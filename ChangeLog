2000-12-03    (Doug Bagley)

	* Switched from ChangeLog to automated Activity Log.

	* Added some Pike programs from Fredrik Noring, et. al.

2000-11-27    (Doug Bagley)

	* Released version 0.1.7.

2000-11-26    (Doug Bagley)

	* Totally re-wrote the benchtest script, it is now called
	minibench, and it has lots of nice features.  It should start
	getting easier for others to use it as a benchmarking tool.  New
	option --repeat should allow us to get a better idea of
	variability in cputime from run to run.
	
2000-11-23    (Doug Bagley)

	* Released version 0.1.6 with latest fixes.

	* Added a few more test programs in various areas.

	* Added Reverse a File test.

	* Dave Thomas offered some tips to speed up some of the Ruby
	programs.

2000-11-21    (Doug Bagley)

	* Roberto Ierusalimschy has kindly provided more Lua test programs
	for the new tests, in particular fixing problems in the Lua code
	I've been attempting :-)

2000-11-20    (Doug Bagley)

	* Started new tests: lists, random number generator, heapsort.

2000-11-19    (Doug Bagley)

	* Released version 0.1.5 with latest fixes.

	* I fixed a bug in the benchtest part of the framework that caused
	CPU times from successive runs to be added.  After re-running all
	tests, a few of the rankings have changed a little.  The most
	noticable is that Java tests now show much better because they are
	not penalized as much for their very high startup costs.  Other
	than that, the ranking orders didn't change too much.

	* Roberto Ierusalimschy has kindly provided a number of the Lua
	test programs.

2000-11-06    (Doug Bagley)

	* Modified benchtest to use the GTop perl module.  Hopefully this
	will be good for portability (at least to other Unices).

2000-10-16    (Doug Bagley)

	* Added a couple of Tcl wordfreqs.

	* Added a bigloo sumcol test.

2000-10-15    (Doug Bagley)

	* Added Icon version of sumcol test.

2000-10-12    (Doug Bagley)

	* Added gcc moments test.
	
	* Now you can "make report" at top level or in bench/ to see which
	languages implement which tests, and which tests still need to be
	written.

	* Added a Tcl version of Ackermann, it explodes due to stack
	overflow.
	
2000-10-11    (Doug Bagley)

	* Added Haskell version of Ackermann test.

2000-10-09    (Doug Bagley)

	* Added mercury sieve test.
	
	* Added bigloo sieve test.  Added -O3 param to bigloo compile.

2000-10-08    (Doug Bagley)

	* Added a couple SML test.

	* Released version 0.1.3.

	* Started Statistical Moments test.
	
2000-10-07    (Doug Bagley)

	* Removed some CGI stuff, and now we create HTML tables for data
	at build time.

	* Added an Ackermann test for bigloo scheme.

2000-10-05    (Doug Bagley)

	* Started sumcol test.
	
	* The Ruby Ackermann test completes now (with the upgrade from
	1.4.6 to 1.6.1).

	* Added Mercury version of Ackermann test.

2000-10-03    (Doug Bagley)

	* Released version 0.1.2.
	
	* Added OCAML version of Ackermann and Sieve tests.

2000-10-02    (Doug Bagley)

	* Added Bill Lear's C++ spell checker that uses mmap.
	
	* Started ChangeLog.

2000-09-30    (Doug Bagley)

	* Updated Ruby from 1.4.6 to 1.6.1.

	* Updated Erlang from R7A to R7B.

	* Updated Guile from 1.3.4 to 1.4.

	* Updated Lua from 4.0alpha to 4.0beta.

	* Updated Rep from 0.12.4 to 0.13.1.

	* Updated gforth from 0.4 to 0.5.

	* Updated gawk from 3.0.4 to 3.0.6.

2000-09-25    (Doug Bagley)

	* Now tests can define a range over which measurements are taken.  The
	  range can be number of iterations, size of input datasets or a
	  parameter passed to the test so it can use it as an input parameter.

	* The first test in the range can be designated as the one used for
	  correctness testing (comparing with expected output).  It can also
	  serve to make sure input data is cached.

	* Re-generated test data over variable ranges of input, and results
	  are now on the detail page for each test.  At the minimum end we see
	  effects of startup costs.  At the maximum end, we see the test's
	  optimal performance.
  
	
