# Language Benchmark Shootout Makefile Header
# $Id: Make.header,v 1.75 2005-12-31 16:45:25 bfulgham Exp $

############################################################
# common definitions go here
############################################################

# get rid of this hardcoded path
BIN := /opt/shootout/shootout/bin

MINIBENCH := $(BIN)/minibench --swapok # --debug

BASH := /bin/bash
BIGLOO := /usr/bin/bigloo
CHICKEN := /usr/bin/csc
CIAOC := /usr/bin/ciaoc
CLM := /usr/bin/clm
CMUCL := /usr/bin/lisp
CURRY := /usr/bin/cyc
DLANG := /usr/bin/dmd
ELASTIC = /usr/bin/ec
ELASTICC = /usr/bin/ecc
ERLC := /usr/bin/erlc
ERLANG := /usr/bin/erl
FELIX := /usr/bin/flx
FPASCAL := /usr/bin/fpc
G95 := /usr/bin/g95
GFORTRAN := /usr/bin/gfortran
GAWK := /usr/bin/gawk
GCC := /usr/bin/gcc
GCL := /usr/bin/gclcvs.notworking
GFORTH := /usr/bin/gforth-fast
GHC := /usr/bin/ghc
GUILE := /usr/bin/guile
GNATC := /usr/bin/gnatmake
GNATCHOP := /usr/bin/gnatchop
GPC := /usr/bin/gpc-2.1-3.4
GPLC := /usr/bin/gplc
GROOVY := /usr/bin/groovy
GST := /usr/bin/gst
GWYDION := /usr/bin/d2c
GXX := /usr/bin/g++
HUGS := /usr/bin/runhugs
HUGSI := /usr/bin/hugs
ICC  := /opt/intel/cc/9.0/bin/icc
ICON := /usr/bin/icont
ICPP := /opt/intel/cc/9.0/bin/icpc
IFC  := /opt/intel/fc/9.0/bin/ifort
IO := /usr/local/bin/ioDesktop
GIJ := /usr/bin/gij
GCJ := /usr/bin/gcj
JAVA := /usr/lib/j2sdk1.4.2_05/bin/java
JAVAC := /usr/lib/j2sdk1.4.2_05/bin/javac
JAVA15 := /usr/lib/jdk1.5.0_06/bin/java
JAVAC15 := /usr/lib/jdk1.5.0_06/bin/javac
KAFFE := /usr/bin/kaffe
JAVASCRIPT := /usr/bin/js
LUA := /usr/bin/lua
MAWK := /usr/bin/mawk
MERCURY := /usr/bin/mmake
MLTON := /usr/bin/mlton
MMC := /usr/bin/mmc
MONOC := /usr/bin/mcs
MONORUN := /usr/bin/mono
MZC := /usr/bin/mzc
MZSCHEME := /usr/bin/mzscheme
NEWLISP := /usr/bin/newlisp
NHC98 := /usr/bin/nhc98
NICEC := /usr/bin/nicec
OBJC := /usr/bin/gcc
OCAML := /usr/bin/ocamlopt
OCAMLB := /usr/bin/ocamlc
OOC := /usr/bin/oo2c
OZC := /usr/bin/ozc
PARROT := /usr/bin/parrot
PERL := /usr/bin/perl
PHP := /usr/bin/php5
PIKE := /usr/bin/pike
POLY := /usr/bin/poly
POPLISP := /usr/bin/pop11.bin +clisp
POP11 := /usr/bin/pop11.bin
POPPROLOG := /usr/bin/pop11.bin +prolog
POPSML := /usr/bin/pop11.bin +pml
PYTHON := /usr/bin/python2.4
PSYCO := /usr/bin/python2.4
REGINA := /usr/bin/regina
REP := /usr/bin/rep
RUBY := /usr/bin/ruby1.9
SABLEVM := /usr/bin/sablevm
SABLEVMC := /usr/bin/jikes-sablevm
SBCL := /usr/bin/sbcl
SE := /usr/bin/se-compile
SLANG := /usr/bin/slsh
SMLNJ := /usr/bin/sml
SMLNJBUILD := /usr/bin/ml-build
STALIN := /usr/bin/stalin
SWIPROLOG := /usr/bin/swipl
TCC := /usr/bin/tcc
TCL  := /usr/bin/tclsh
XDS := /opt/xds_x86/bin/xc
#XDSC := /opt/xds_c/bin/xm
XEMACS := /usr/bin/xemacs

LANGS := $(BASH) $(BIGLOO) $(CHICKEN) $(CIAOC) $(CLM) $(CMUCL) $(CURRY) \
	 $(DLANG) $(ELASTIC) $(ERLANG) $(FELIX) $(FPASCAL) $(G95) $(GFORTRAN) \
	 $(GAWK) $(GCC) $(GCL) $(GCJ) $(GFORTH) $(GHC) $(GPC) $(GST) $(GUILE) \
	 $(GWYDION) $(GXX) $(HUGS) $(ICON) $(ICPP) $(IFC) $(IO) $(GIJ) $(JAVA) \
	 $(JAVA15) $(KAFFE) $(JAVASCRIPT) $(LUA) $(MAWK) $(MERCURY) $(MLTON) \
	 $(MZC) $(MZSCHEME) $(NEWLISP) $(NHC98) $(NICE) $(OOC) $(OO2C) $(OBJC) \
	 $(OCAML) $(OCAMLB) $(PERL) $(PHP) $(PIKE) $(PYTHON) $(POP11) \
	 $(POPLISP) $(POPSML) $(POPPROLOG) $(PSYCO) $(REGINA) $(REP) $(RUBY) \
	 $(SABLEVM) $(SBCL) $(SLANG) $(SMLNJ) $(STALIN) $(TCC) $(TCL) $(XDS) \
	 $(XEMACS)

# The SELECT_LANGS variable allows to select a subset of languages.
# It should be set to a shell expression that matches desired file extensions.
# For only one language: make test SELECT_LANGS=bash
# For several languages: make test SELECT_LANGS='{bash,gawk,guile}'
# By default all languages are considered.

SELECT_LANGS := *

JAVAOPT = -server
JREOPTS = -server

############################################################
# we define a default rule to tell user what to do 
# if they just randomly type "make" here.
############################################################
default:
	@echo "No default rule, try:"
	@echo "  make all	# do almost everything"
	@echo "  make plot	# create data and graphs"
	@echo "  make show	# \"make plot\" and then display graphs"
	@echo "  make test	# like \"make plot\", but run only one repetition of tests"
	@echo "  make clean	# remove generated/data files to prep for full re-run"
	@echo "  make report	# report which tests are written (or not)"

.EXPORT_ALL_VARIABLES:

