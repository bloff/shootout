<!--#set var="TITLE" value="Creating A Binary Perl Extension" -->
<!--#set var="KEYWORDS" value="compare, computer, languages
perl, binary, extension" -->
<!--#include virtual="../../../html/header.shtml" -->

<p>
  There are a few different ways to extend Perl with C.  I'll
  demonstrate how it is done in the usual fashion via the Perl XS glue
  language.  However, there is also the option to use <a
  href="http://www.swig.org/">SWIG</a> to automatically generate the
  glue code, or even to use the <a
  href="http://search.cpan.org/doc/INGY/Inline-0.32/Inline.pod">Perl
  Inline</a> module, which cleverly allows you to embed C (and other
  languages) directly in your Perl source.

<hr>
<p>
  This is a short description of what is involved in creating a
  function in C to calculate Ackermann's function, so that it can be
  called from within a Perl script.

<p>
  Perl comes with fairly good documentation on how to build a binary
  extension.  I will try not to repeat any of it here, but point you
  to the manpages <b>perlxstut</b> and <b>perlxs</b>, which are the
  tutorial and reference pages explaining the extension method.

<p>
  Perl uses a macro language called XS which allows you to describe
  the glue between Perl and C.  It isn't the easiest thing in the
  world to use, but fortunately it comes with plenty of tools to help
  you along the way.

<p>
  The basic steps to create your Ackermann's function extension are
  this:

<ol>

<li>
  Run the <b>h2xs</b> command to create a template you can start
  with:
  <pre>&gt; h2xs -n Ackermann</pre>

  <li>
    This creates a <a href="Ackermann">subdirectory</a> with the following files:
    <ul>
    <li>Ackermann.pm
    <li>Ackermann.xs
    <li>Changes
    <li>MANIFEST
    <li>Makefile.PL
    <li>test.pl
    </ul>
  (Other files are created during the make process).
  
<li>
  Edit the file <a href="Ackermann/Ackermann.pm">Ackermann.pm</a> to
  export any functions, and provide documentation.
<li>
  Edit the file <a href="Ackermann/Ackermann.xs">Ackermann.xs</a> to
  add your C function.
<li>
  Edit <a href="Ackermann/test.pl">test.pl</a> to add a test for your new function.
<li>
  Then it's simply a matter of running these commands:
  <pre>
&gt; perl Makefile.PL
&gt; make
&gt; make test
# and if you want to install your new extension with the Perl system
# libraries:
&gt; make install</pre>

</ol>

<p>
  The file <a href="Ackermann/Ackermann.pm">Ackermann.pm</a> contains
  documentation on how to use your new function, but in case you
  missed it, it is simply this:
<pre>
    use Ackermann qw(Ack);
    print "Ack(3,8) is ", Ack(3,8), "\n";
</pre>


<p>
  That's basically all there is to it.  Now you have a dynamically
  loadable C function to calculate Ackermann's function in Perl.  And
  this will run much more efficiently than a pure Perl implementation
  (by a few orders of magnitude).

<!--#include virtual="../../../html/footer.shtml" -->
