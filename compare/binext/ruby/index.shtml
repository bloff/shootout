<!--#set var="TITLE" value="Creating A Binary Ruby Extension" -->
<!--#set var="KEYWORDS" value="compare, computer, languages
ruby, binary, extension" -->
<!--#include virtual="../../../html/header.shtml" -->

(with help from Brian Fundakowski Feldman)

<p>
  This is a short description of what is involved in creating a
  function in C to calculate Ackermann's function, so that it can be
  called from within a Ruby script.

<p>
  The basic steps to create your Ackermann's function extension are
  this:

<ol>
<li>Create a directory (e.g. &quot;Ackermann&quot;)to contain your work.
<li>Create your C extension file <a href="Ackermann/ackermann.c">ackermann.c</a>
    This file needs to contain:
    <ul>
    <li><code>#include &lt;ruby.h&gt;</code>
    <li>A module init function
    <li>Your recursive C Ackermann function.
    <li>A Ruby glue function to call the Ackermann function.
    </ul>
<li>Create a configuration file (<i>extconf.rb</i>) for building your
extention, containing: 
<pre>
  require 'mkmf'
  create_makefile('ackermann')
</pre>
<li>
 Then it's simply a matter of running these commands:
 <pre>
&gt; ruby extconf.rb
&gt; make
&gt; make install  # if you want to install in the system library
 </pre>
</ol>

<p>
 An example Ruby program that calls your external C function looks
 like this: 
<pre>
  require "ackermann"
  print "Ack(3,8) is ", Ackermann.ack(3, 8), "\n"
</pre>

<!--#include virtual="../../../html/footer.shtml" -->
