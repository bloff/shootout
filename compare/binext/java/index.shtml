<!--#set var="TITLE" value="Creating A Binary Java Extension" -->
<!--#set var="KEYWORDS" value="compare, computer, languages
java, binary, extension" -->
<!--#include virtual="../../../html/header.shtml" -->

[This page is based on a contribution by Larry Zappaterrini]

<hr>
<p>
  This is a short description of what is involved in creating a
  function in C to calculate Ackermann's function, so that it can be
  called from within a Java program.

 (this description is based on Sun's description of <a
 href="http://java.sun.com/j2se/1.3/docs/guide/jni/index.html">JNI</a>)

<ol>
<li>
 Create the <a href="Ackermann/ack.java">Java object</a> that will use
 the native method <a href="Ackermann/ack.c">implemented in C</a>.  The
 method must have the keyword 'native' at the beginning of its signature.
 No implementation is provided in the Java object.  That object must also
 load the shared object containing the native implementation (.so or
 .dll) using the static System.loadLibrary(String lib); method.

<li>
 Produce the .class file using javac.  (Here's a simple <a
 href="Ackermann/Makefile">sample Makefile</a>).

<li>
 Generate the .h file by using javah on the .class file.  The resulting
 .h file will contain the method signature to use in your C code.

<li>
 Compile the C code into a shared library (liback.so).

<li>
 Now you can utilize the native method transparently in your Java
 code.  Be sure that the library can be found by your environment
 (LD_LIBRARY_PATH on Linux, e.g. &quot;<code>LD_LIBRARY_PATH=. java
 ack 7</code>&quot;).

</ol>

<!--#include virtual="../../../html/footer.shtml" -->
