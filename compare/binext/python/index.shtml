<!--#set var="TITLE" value="Creating A Binary Python Extension" -->
<!--#set var="KEYWORDS" value="compare, computer, languages
python, binary, extension" -->
<!--#include virtual="../../../html/header.shtml" -->

<p>
  This is a short description of what is involved in creating a
  function in C to calculate Ackermann's function, so that it can be
  called from within a Python script.

<p>
  Python comes with fairly good documentation on how to build a binary
  extension.  While the man page for Python points you to <a
  href="http://www.python.org/doc/ext/ext.html">
  http://www.python.org/doc/ext/ext.html</a>, you should be able to
  find this documentation locally if you have Python installed on your
  system.

<p>
  The basic steps to create your Ackermann's function extension are
  this:

<ol>
  <li>Create a directory (e.g. &quot;Ackermann&quot;)to contain your work.
  <li>Copy Python-1.6/Misc/Makefile.pre.in from the Python distribution.
  <li>Create a <a href="Ackermann/Setup">Setup</a> file that tells
  Python to dynamically load your new module, and give the module name.
  <li>Create your C extension file <a href="Ackermann/Ackermann.c">Ackermann.c</a>
      This file needs to contain:
    <ul>
    <li><code>#include &lt;Python.h&gt;</code>
    <li>A forward declaration for your Ackermann function.
    <li>An entry in a method table for your function.
    <li>A module init function
    <li>Your recursive C Ackermann function.
    <li>A Python glue function to call the Ackermann function.
    </ul>
  <li>
    Now you can create your extension with these commands:
  <pre>
  &gt; make -f Makefile.pre.in boot
  &gt; make
  # and if you want to install your new extension with the Python system
  # libraries:
  &gt; make install</pre>
  <li>Finally, you can write a small <a href="Ackermann/test.py">python
  script</a> to test your module, it is simply this:
  <pre>
  import Ack from Ackermann
  print "Ack(3,8) is", Ack(3,8)</pre>
</ol>


<p>
  That's basically all there is to it.  Now you have a dynamically
  loadable C function to calculate Ackermann's function in Python.  And
  this will run much more efficiently than a pure Python implementation.

<!--#include virtual="../../../html/footer.shtml" -->
