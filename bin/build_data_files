#!/usr/bin/perl
# to be run in top directory

# Extracts the data from each test and build the global data file
# used to display the graphs on the benchmark pages.
use strict;
use File::Basename;

BEGIN {
    # Load our hash of languages
    foreach my $d qw(. .. ../.. ../../..) {
        my $file = "$d/langs.pl";
	if (-f $file) {
	    require $file;
	    last;
	}
    }
}

sub max (@) {
    @_ = grep(defined($_), @_);
    my $max = shift;
    foreach (@_) { $max = $_ if ($_ > $max); }
    return($max);
}

sub min (@) {
    @_ = grep(defined($_), @_);
    my $min = shift;
    foreach (@_) { $min = $_ if ($_ < $min); }
    return($min);
}

#
#  Print an output [n]data file
#
sub print_datafile($$$%) {
    my ($benchmark, $dest, $mdref, %startup_cost) = @_;
    my %masterdata = %$mdref;
    my $locsource = "bench/$benchmark/data/loc.tab";
    my (%loc);

    # Process LOC data
    unless ( open(LOC, "<$locsource") ) {
        print "Can't open $locsource for input!: $!\n";
	return;
    }
    while(<LOC>) {
        chomp;
        my($impl, $lines) = split;
	$loc{$impl} = $lines;
    }
    close LOC;
    print "    Read $locsource input data...\n";

    
    my $gzcsource = "bench/$benchmark/data/gzc.tab";
    my (%gzc);

    # Process GZC data
    unless ( open(GZC, "<$gzcsource") ) {
        print "Can't open $gzcsource for input!: $!\n";
	return;
    }
    while(<GZC>) {
        chomp;
        my($impl, $lines) = split;
	$gzc{$impl} = $lines;
    }
    close GZC;
    print "    Read $gzcsource input data...\n";


    # Process each language in turn...
    open(DEST, ">>$dest") or die "Can't open $dest for output!";
    foreach my $impl (sort keys %masterdata) {
         my %data = %{$masterdata{$impl}};

	 foreach my $run (sort keys %data) {
	     my $ref = $data{$run};
	     my %rundata = %$ref;

	     my $cpu = $rundata{'cpu'};
	     my $mem = $rundata{'mem'};

	     $impl =~ /(.*)\-(\d+)/;
	     my $lang = $1;
	     my $id = $2;

	     unless (defined($lang)) {
	         $lang = $impl;
             }

             unless (defined($id)) {
                 $id = " ";
             }

             print DEST "$benchmark,$lang,$id,$run,";
	     print DEST $gzc{$impl};
	     print DEST ",$cpu,$mem,";
             print DEST $loc{$impl};
	     print DEST ", 09/30/2004\n";
         }
    }
    close DEST;

    return;
}

#
#  Global "All Run" Data File
#
sub gen_ndata_files ($$%) {
    my ($benchmark, $dest, %startup_cost) = @_;
    my (%masterdata);

    print "    >>> Reading individual run data <<<\n";
    print "        ";
    my $langcount = 0;
    foreach my $lang (keys %::LANG) {

	# Note:  Each language may provide a few implementations.  These
	# are stored as, e.g., "ackermann.perl", "ackermann.perl2.perl",
	# "ackermann.perl3.perl", etc.
	my @choices = ("", "$lang-2.", "$lang-3.", "$lang-4.");
	foreach my $try (@choices) {
            my $source = "bench/$benchmark/tmp/$benchmark." . $try . "$lang.mbdat";
            my (%filedata);

            next unless -s $source;

            open(SOURCE, "<$source") or die "Can't open $source for input!: $!\n";
            while(<SOURCE>) {
                chomp;
                next if /#/;
                my($run, $user, $sys, $mem) = split;

                if (($user eq -1) || ($user eq -2)) {
                    $filedata{$run} = [ 1, $user, $user];
                } else {
                    my $cpu = $user + $sys;
                    my $ref = $filedata{$run};
		    my @data;
                    if (defined $ref) {
                        @data = @$ref;
			$filedata{$run} =
		            [ $data[0] + 1,
			      sprintf("%.3f", min($cpu, $data[1])),
			      sprintf("%.0f", max($mem, $data[2])) ];
                    } else {
		        $filedata{$run} =
			    [ 1,
			      sprintf("%.3f", $cpu),
			      sprintf("%.0f", $mem) ];
                    }
                }
            }
            close SOURCE;

            # Now get averages and add to the master hash
            my %rundata;
            foreach my $iter (keys %filedata) {
                my $ref = $filedata{$iter};
                my @tempdata;
                if (defined $ref) {
	            @tempdata = @$ref;
                } else {
	            @tempdata = (0, 0, 0);
                }
                my $count = shift @tempdata;
                my $agcpu = shift @tempdata;
                my $agmem = shift @tempdata;

                if (($agcpu eq -1) || ($agcpu eq -2)) {
                    $rundata{$iter} = { cpu => $agcpu, mem => $agcpu };
                } else {
                   $rundata{$iter} = { cpu => $agcpu, mem => $agmem };
                }
            }

	    if ($try eq "") {
                $masterdata{$lang} = \%rundata;
            } else {
	        my $slot = $try;
		$slot =~ s/\.//;
                $masterdata{$slot} = \%rundata;
            }
        }
        print "$lang ";
        $langcount++;
        if ($langcount % 10 eq 0) {
            print "\n        ";
        }
    }
    print "\n";
    print "    Processed individual data files.  Generating master ndata.csv...\n";

    print_datafile($benchmark, $dest, \%masterdata, %startup_cost);

    return;
}


#
#  Main
#
sub main {

    print "Generating ndata.csv ...\n";

    my $startup = "bench/hello/data/startup.tab";
    my %startup_cost;
    my $ndest = "website/data/ndata.csv";

    # Read in the startup costs
    open(STARTUP, "<$startup") or die "Can't open $startup for input!";

    while(<STARTUP>) {
        chomp;
        my($lang, $startup) = split;
	$startup_cost{$lang} = $startup;
    }
    print "    Read startup cost data...\n";
	
    # Mine the data from the benchmarks
    opendir BENCHDIR, "bench" or die "Couldn't open benchmark directory: $!\n";
    my @allfiles = sort readdir BENCHDIR;
    shift @allfiles;	# Drop the . directory
    shift @allfiles;	# Drop the .. directory
    closedir BENCHDIR;

    print "    Read list of benchmarks...\n";
    if (-s $ndest) {
        unlink $ndest or die "Couldn't delete old $ndest file: $!\n";
    }
    open(NDEST, ">$ndest") or die "Couldn't create new $ndest file: $!\n";
    print NDEST "test,lang,id,iter,secs-startup,secs,kb,lines,date\n";
    close NDEST;
    print "\n\n";

    #
    #  For each directory in the bench directory, read the
    #  associated '[test].[lang].mbdat' data file.  Build a hash of
    #  these entries and then write the corresponding 'ndata.csv'
    #  file in the website directory.
    #
    print "    [[[ Processing data ]]]\n";
    foreach my $benchmark (@allfiles) {

        my $benchdir = $benchmark;

        next unless -d "bench/$benchdir";	    
        next if ($benchdir =~ /\.\./);
        next if ($benchdir =~ /\./);
        next if ($benchdir =~ /Include/);
        next if ($benchdir =~ /CVS/);

	print "  [$benchdir]\n";

	gen_ndata_files($benchdir, $ndest, %startup_cost);
    }
    
    print "Finished.\n";
}

main();
