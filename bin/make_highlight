#!/usr/bin/perl
# to be run in top directory

# Generates beautiful, highlighted source code for viewing
# via Web Browsers
#
# Note:  Requires the Highlight program by André Simon <andre.simon1@gmx.de>
# see http://www.andre-simon.de/
#
use File::Basename;
use File::Copy;

BEGIN {
    require "langs.pl";
}

sub genfile ($$$$) {
    my ($benchdir, $benchmark, $impl, $tag) = @_;
    my $source = "bench/$benchdir/$benchmark.$tag" . "$impl";
    my $outsource = "bench/$benchdir/tmp/$benchmark.$tag" . "$impl" . "_out";
    return unless -s $source;

    my $impname = $tag;
    $impname =~ s/\.//;

    if ($impname eq "") {
        $impname = $impl;
    }

    my $logsource = "bench/$benchdir/tmp/$impname" . "_runlog";

    my $dest = "website/code/$benchmark-$impname.code";
    my $logdest = "website/code/$benchmark-$impname.log";

    my $lang = $::LANG{$impl}->{Lang};
    my $ext = $::LANG{$impl}->{Ext};

    # Check that source file needs to be generated
    my ($sdev, $sino, $smode, $snlink, $suid, $sgid, $srdev, $ssize,
        $satime, $smtime, $sctime, $sblksize, $sblocks)
        = stat $source;
    my ($ddev, $dino, $dmode, $dnlink, $duid, $dgid, $drdev, $dsize,
        $datime, $dmtime, $dctime, $dblksize, $dblocks)
        = stat $dest;
    # ... or that the log file needs to be updated
    my ($lsdev, $lsino, $lsmode, $lsnlink, $lsuid, $lsgid, $lsrdev, $lssize,
        $lsatime, $lsmtime, $lsctime, $lsblksize, $lsblocks)
        = stat $logsource;
    my ($lddev, $ldino, $ldmode, $ldnlink, $lduid, $ldgid, $ldrdev, $ldsize,
        $ldatime, $ldmtime, $ldctime, $ldblksize, $ldblocks)
        = stat $logdest;

    my $retval = 0;

    if ($smtime > $dmtime)
    {
        my $command = "highlight -f -i $source --output=$benchmark-$impname.code --syntax=$ext --style=typical --css-outfile=website/websites/css/highlight.css";
        print "Trying $command\n";

        unlink($dest);
        system($command) == 0
          or print "$command failed: $!";

        copy("$benchmark-$impname.code", $dest)
          or print "\nCould not copy $benchmark-$impname.code to $dest\n";
        unlink("$benchmark-$impname.code");
	$retval = 1;
    }

    if ($lsmtime > $ldmtime)
    {
        print "Copying $logsource...\n";

        # Copy over the runlog as well.  We don't really care if it fails
        copy ($logsource, $logdest)
            or print "\nCould not copy $logsource to $logdest\n";

        # Concatenate the output as well
        if (open DEST, ">>$logdest") {
            if (open SRC, "<$outsource") {
                print DEST "\n\nPROGRAM OUTPUT\n";
                print DEST "==============\n";
       
                my $iter = 0;
                while (<SRC>) {
                    print DEST $_;
                    $iter++;
                    if ($iter >= 50) {
                        print DEST "===================================\n";
                        print DEST "!!! Note: Truncated to 50 lines !!!\n";
                        print DEST "===================================\n";
                        last;
                    }
                }
                close SRC;
            }
            close DEST;
        }
	$retval = 1;
    }

    return $retval;
}

sub main {

    print "Starting to generate HTML...\n";
    opendir BENCHDIR, "bench" or die "Couldn't open benchmark directory: $!\n";
    @allfiles = readdir BENCHDIR;
    shift @allfiles;    # Drop the . directory
    shift @allfiles;    # Drop the .. directory
    closedir BENCHDIR;
    
    my $implcount = 0;
    foreach my $impl (keys %LANG) {
        my $header = "Processing $impl...\nbench: ";
        my $count = 0;
        my @choices = ("", "$impl-2.", "$impl-3.", "$impl-4.");
        foreach my $tag (@choices) {

            #
            #  For each directory in the bench directory, generate
            #  HTML-ized source code and place in the appropriate lang
            #  directory.
            #
            foreach my $benchmark (@allfiles) {

                my $benchdir = $benchmark;

                next unless -d "bench/$benchdir";
        
                next if ($benchdir =~ /\.\./);
                next if ($benchdir =~ /\./);
                next if ($benchdir =~ /Include/);
                next if ($benchdir =~ /CVS/);

                my $file = "bench/$benchdir/$benchmark.$tag" . "$impl";
                next unless -s $file;

                if ($count == 0) {
                    print $header;
                }
                $count++;

                if ( genfile($benchdir, $benchmark, $impl, $tag) ) {
                    print "$benchmark ";
                    $implcount++;
                }

                if ($benchdir eq "plugin") {
                    my @ends = ( "_2", "_3" );
                    foreach $end (@ends) {
                        my $bmk = $benchmark . $end;
                        my $file = "bench/$benchdir/$bmk.$tag.$impl";
                        next unless -s $file;
                        if ( genfile($benchdir, $bmk, $impl, $tag) ) {
                            print "$bmk ";
                            $implcount++;
                        }
                    }
                }
            }
        }
        print "\n" if ($count > 0);
    }
    print "No updates needed.\n" if ($implcount == 0);
    print "Finished.\n";
}

main();
