<!--#set var="TITLE" value="Computer Language Shootout FAQ" -->
<!--#set var="KEYWORDS" value="performance, benchmark, computer,
algorithms, languages, compare, cpu, memory" --> 
<!--#include virtual="html/header.shtml" -->
<!--#include virtual="nav.html" -->


<br>
<h4><font color="red">
Hi, the shootout is an unfinished project.  I've decided to
discontinue updates to it for now while I work on some other things.
Thanks for everyone's help.
</font></h4>

<ol>

<hr>
<h4><li>Q: Why are you doing this?</h4>
<p>
  To learn and to have fun.  I'll continue as long as the fun holds out.

<hr>
<h4><li>Q: Is your shootout a fair comparison?</h4>
<p>
  Not really.  As I state on the home page: <b>It's a work in
  progress</b>.  Maybe in a year I'll be able to get it to a point
  where it is &quot;fair&quot;.  Feel free to help out or come
  back later and decide for yourself.  Thanks.

<hr>
<h4><li>Q: Will you include my favorite language X?</h4>
<p>
  I already have more than I can handle :-) but I <i>might</i> if your
  language: 
<ol>
 <li>
  Is Free.  I hope that people who come across the shootout will be
  motivated to learn a new language, and since I feel that people are
  far more likely to learn a language from a free implementation, those
  are the languages I prefer to display.  While I do not completely
  disqualify a commercial language product, I have not yet found an
  overriding justification to include one.  If it was free to students,
  I might be more open to accepting it.

 <li>
  Is distributed with source code!  I also prefer that the language
  be open source.  As a language user, if I find a problem but do
  not have access to the source then I get very frustrated.  In my
  testing of languages I have found bugs in half a dozen of the
  languages, and I have been able to submit bug reports, sometimes
  with patches, to the language authors.  I think that's the way
  things should work.

 <li>
  Builds and installs with <code>./configure && make && make
  install</code> (on Linux), with default target of /usr

 <li>
  Is in current use and development.  (I might make exceptions for
  something cool.  Like maybe Simula).

 <li>
  Ideally it should have a measurable userbase.
</ol>

<p>
  Furthermore, the language <b>must</b> have the following features:
<ol>
<li>
  Documentation.
<li>
  Ability to parse an integer from the command line.
<li>
  32-bit Integers.
<li>
  Double precision floating point numbers and the ability to format
  them for output (equivalent to <code>printf("%.9f", f);</code>).
<li>
  Hash tables and Sequences (Arrays and/or Lists).
<li>
  Ability to read lines from standard input, write lines to standard
  output.
</ol>

<p>
  The language <b>should</b> have most of the following desireable
  features: 
<ol>
<li>
  Ability to read/write 4K buffers, bypassing standard I/O.
<li>
  Process control (i.e. fork()/wait()).
<li>
  Exceptions.
<li>
  Regular Expressions (preferably Perl compatible).
<li>
  Linux Kernel Threads.
<li>
  Internet Sockets.
<li>
  Objects.
<li>
  Ability to print out its own version number.
<li>
  A module system, and separate compilation of modules (if compiled).
</ol>
<p>
  I may make some exceptions to the above, but only if I feel like it.
  
<hr>
<h4><li>Q: Will you compare REBOL/Limbo/Miranda/Clean?</h4>
<p>
  Last time I checked, these languages either do not come with
  source, or are commercial products.  As a matter of principle,
  I'm currently limiting myself to free, open-source languages.
  Closed source languages are a bad idea.  In my most humble
  opinion, of course.  If I make an exception to this, it will
  probably only be for a language that is wildly popular (like
  Java).

<hr>
<h4><li>Q: Will you include Gwydion Dylan?</h4>
<p>
  A quick look indicates I need 3 files just to do a &quot;hello
  world&quot; program in Dylan.  If you can show me how to do a
  simple program with a single source file, I'll include Dylan.

<hr>
<h4><li>Q: Will you include Pascal/Prolog/Ada?</h4>
<p>
  Possibly.  I haven't included them yet, because I have not been
  personally attracted to these languages.  Some implementations have
  been suggested, and, given time, I may try to add them to the
  shootout.

<hr>
<h4><li>Q: Will you include Fortran/APL?</h4>
<p>
  It's been over twenty years since I've programmed in either of those
  languages.  IMHO, they are both fairly specialized, and probably
  wouldn't do so well in some of the tests I currently have in the
  shootout.  I'm not counting them out entirely, but I have a lot of
  work to do before I can even get to them.

<hr>
<h4><li>Q: Will you try recompiling language X with
super-hyper-optimization and all these configure switches?</h4>
<p>
  In general I will compile and install each language like any normal
  user would by following the included installation instructions.  If
  those instructions are too complex I may lose interest.
<p>
  This has come up more than once with issue of <a
  href="lang/php/">PHP</a>.  I feel that in order to be fair I have to
  lay down some rules and follow them.  If I make an exception for one
  language, then I have to allow all languages the same exception.  So
  if I allow PHP to configure with special switches to boost
  performance, then I have to allow all languages to be tweaked at
  build time for performance.  I remain unconvinced that most people
  will do this in normal practice, and the shootout attempts to be a
  test of relatively normal conditions.  Does PHP get configured with
  the --enable-inline-optimization flag in most binary distributions?
  If yes, I'm willing to reconsider my position.  If no, then I think
  what I'm doing is fair.  As far as I know, PHP is the <b>only</b>
  language in the shootout that does not configure for performance
  &quot;out of the box&quot;.  Maybe the PHP developers should
  consider changing that situation.

<hr>
<h4><li>Q: Why are you doing all these numerical tests in scripting languages?</h4>
<p>    
  More generally maybe you mean <i>Test X</i> is not really
  appropriate for <i>Language Y</i>.
<p>
  This is true.
<p>
  But maybe it is meaningful to see two languages trying to do the same
  thing ... no matter whether you would ever normally use them to do
  that thing.  YMMV.
<p>
  I include tests like the Sieve because it's a classic.  Many of the
  other tests have appeared in other language comparisons.  I'm just
  trying to treat them a little bit better.
<p>
  I include some tests that do a lot of line-oriented I/O because lots
  of people do that sort of thing with scripting languages.  Yes, I
  know it's a heck of a lot faster to do block I/O, and I'll try to
  have tests that do that too.

<hr>
<h4><li>Q: Will you include my idea for a cool test?</h4>
<p>
  Mmmmaybe.  Will you help?

<hr>
<h4><li>Q: I sent you a faster program, and you told me you posted it,
but I still see the old code?</h4>
<p>
  Try reloading when viewing the source code.  It is probably just
  cached. 

<hr>
<h4><li>Q: What kind of platform are the tests run on?</h4>
<p>
  My current shootout host is a dual 450Mhz Pentium-II
  server with 1GB of RAM and 4x9GB SCSI disks.

<hr>
<h4><li>Q: Why don't you run the tests on Sparc/Alpha/PPC/etc?</h4>
<p>
  The shootout would gladly accept your kind hardware donations :-)
  Until then, I'm sorry, but I only own a few Intel boxes.

<hr>
<h4><li>Q: Why do many of your solutions seem naive and unidiomatic?</h4>
<p>
  There are two <i>kinds</i> of tests in the shootout, tests where
  solutions are supposed to do things in the <a
  href="method.shtml#sameway"><b>same way</b></a> and tests where the
  solutions are supposed to do the <a
  href="method.shtml#samething"><b>same thing</b></a>.  Please refer
  to the <a href="method.shtml#sameway">page about methodology</a> for
  a discussion of why the <b>same way</b> tests often show naive or
  unidiomatic code.  It is intentional.

<hr>
<h4><li>Q: Why don't you also measure the time it took to write the code?</h4>
<p>
  Because I don't just sit down and write one of the test programs
  and post it.  I work on it a little and come back over and over to
  see if I can make it better.  It wouldn't be fair, since I know
  some languages much better than others.  Furthermore, a number of
  the programs were not written by me.  There is just is no way for
  me to practically measure the time spent coding in this shootout.
  I will let someone else design a test of how long it takes to code
  something.

<hr>
<h4><li>Q: Why don't you also measure maintainability or productivity
or some other more important software engineering quality?</h4>
<p>
  Because this is simply a comparison of CPU, Memory and Lines of
  Code.  That's all I can and will and want to measure.  I'd love to
  see a comparison of some other metrics but I don't have the time and
  resources to do it myself.

<hr>
<h4><li>Q: Do you like <a href="http://www.brave.com/bo/">accordian music</a>?</h4>
<p>
  Yes!

</ol>
<!--
<hr>
<h4><li>Q: ?</h4>
<p>
  
  -->
<!--#include virtual="html/footer.shtml" -->
