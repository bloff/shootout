Original README (prior to 8/4/2005):
-----8<-----CUT HERE-------8<--------------------
To run the benchmarks, type "make"
this will show you some fun targets to build.
-----8<-----CUT HERE-------8<--------------------

Since this is not true, I (loisel@math.mcgill.ca) am putting here
something less untrue.

0) SET UP COMPUTER
a) Type make. See what perl needs. Get it off cpan. For instance,
the first thing is BSD/Resource.pm. So you end up here:
http://search.cpan.org/dist/BSD-Resource/
b) Install desired programming languages.

1) RUNNING BENCHMARKS:

I can't get that to work cleanly, but if you

a) edit shootout/Make.header to have the correct path for your
installed compilers,
b) select only the languages you care about in SELECT_LANGS
c) manually create the shootout/bench/*/tmp and shootout/bench/*/data
directoriss,
d) in the case of compiled languages, manually create (for instance) the
shootout/bench/hello/tmp/hello.c++ file,
e) in shootout/bench/hello type make all (maybe)

then some benchmarks might run.

Note:  If the minibench Perl script is running properly, the 
*/tmp and */data files, and hello.c++ files will be generated
automatically.

2) ADDING BENCHMARKS:

a) make a new directory under bench. Say it's bench/foo
b) add any source code to bench/foo. Make sure it has the correct
(unusual) extensions. For instance, for c++ code to be compiled with g++,
the extension is gpp.
c) copy and edit a Makefile from another directory.  You may need to
create a local Minibench.conf file in the benchmark directory if
   (1)  You have to rename the benchmark for some reason.  Example:  Erlang
        could not use the name 'lists' as a module name (since it conflicted
	with a system library), so it runs a different name.  This is handled
	via a line in the Minbench.conf file.
   (2)  You have to start the test in some special way.  Example:  The Tcl
        'echo' test needs to run two processes (a client and a server).  It
	uses a Bash script to launch the two programs, since it isn't well
	set-up to fork processes internally.  This is handled by a custom
	Minibench.conf file.
d) in shootout/website/websites/sandbox/include.csv (say), add your test.
e) in shootout/website/desc/test.csv, add your test.
f) add your test to shootout/bench/Makefile.
g) ...more steps to be added as I discover them...
