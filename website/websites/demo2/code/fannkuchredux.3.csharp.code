<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Isaac Gouy, transliterated from Oleg Mazurov's Java program</span>
<span class="hl com">*/</span>

<span class="hl kwa">using</span> System<span class="hl sym">;</span>
<span class="hl kwa">using</span> System<span class="hl sym">.</span>Threading<span class="hl sym">;</span>


<span class="hl kwa">class</span> FannkuchRedux
<span class="hl sym">{</span>
   <span class="hl kwa">private static</span> <span class="hl kwb">int</span> NCHUNKS <span class="hl sym">=</span> <span class="hl num">150</span><span class="hl sym">;</span>
   <span class="hl kwa">private static</span> <span class="hl kwb">int</span> CHUNKSZ<span class="hl sym">;</span>
   <span class="hl kwa">private static</span> <span class="hl kwb">int</span> NTASKS<span class="hl sym">;</span>
   <span class="hl kwa">private static</span> <span class="hl kwb">int</span> n<span class="hl sym">;</span>
   <span class="hl kwa">private static</span> <span class="hl kwb">int</span><span class="hl sym">[]</span> Fact<span class="hl sym">;</span>
   <span class="hl kwa">private static</span> <span class="hl kwb">int</span><span class="hl sym">[]</span> maxFlips<span class="hl sym">;</span>
   <span class="hl kwa">private static</span> <span class="hl kwb">int</span><span class="hl sym">[]</span> chkSums<span class="hl sym">;</span>
   <span class="hl kwa">private static</span> <span class="hl kwb">int</span> taskId<span class="hl sym">;</span>

   <span class="hl kwb">int</span><span class="hl sym">[]</span> p<span class="hl sym">,</span> pp<span class="hl sym">,</span> count<span class="hl sym">;</span>


   <span class="hl kwb">void</span> <span class="hl kwd">FirstPermutation</span><span class="hl sym">(</span> <span class="hl kwb">int</span> idx <span class="hl sym">)</span>
   <span class="hl sym">{</span>
       <span class="hl kwa">for</span> <span class="hl sym">(</span> <span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>p<span class="hl sym">.</span>Length<span class="hl sym">; ++</span>i <span class="hl sym">) {</span>
          p<span class="hl sym">[</span>i<span class="hl sym">] =</span> i<span class="hl sym">;</span>
       <span class="hl sym">}</span>

       <span class="hl kwa">for</span> <span class="hl sym">(</span> <span class="hl kwb">int</span> i<span class="hl sym">=</span>count<span class="hl sym">.</span>Length<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">;</span> i<span class="hl sym">&gt;</span><span class="hl num">0</span><span class="hl sym">; --</span>i <span class="hl sym">) {</span>
           <span class="hl kwb">int</span> d <span class="hl sym">=</span> idx <span class="hl sym">/</span> Fact<span class="hl sym">[</span>i<span class="hl sym">];</span>
           count<span class="hl sym">[</span>i<span class="hl sym">] =</span> d<span class="hl sym">;</span>
           idx <span class="hl sym">=</span> idx <span class="hl sym">%</span> Fact<span class="hl sym">[</span>i<span class="hl sym">];</span>

           Array<span class="hl sym">.</span><span class="hl kwd">Copy</span><span class="hl sym">(</span> p<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> pp<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> i<span class="hl sym">+</span><span class="hl num">1</span> <span class="hl sym">);</span>
           <span class="hl kwa">for</span> <span class="hl sym">(</span> <span class="hl kwb">int</span> j<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> j<span class="hl sym">&lt;=</span>i<span class="hl sym">; ++</span>j <span class="hl sym">) {</span>
               p<span class="hl sym">[</span>j<span class="hl sym">] =</span> j<span class="hl sym">+</span>d <span class="hl sym">&lt;=</span> i ? pp<span class="hl sym">[</span>j<span class="hl sym">+</span>d<span class="hl sym">] :</span> pp<span class="hl sym">[</span>j<span class="hl sym">+</span>d<span class="hl sym">-</span>i<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">];</span>
           <span class="hl sym">}</span>
       <span class="hl sym">}</span>
   <span class="hl sym">}</span>


   <span class="hl kwb">bool</span> <span class="hl kwd">NextPermutation</span><span class="hl sym">()</span>
   <span class="hl sym">{</span>
      <span class="hl kwb">int</span> first <span class="hl sym">=</span> p<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">];</span>
      p<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">] =</span> p<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
      p<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] =</span> first<span class="hl sym">;</span>

      <span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl kwa">while</span> <span class="hl sym">( ++</span>count<span class="hl sym">[</span>i<span class="hl sym">] &gt;</span> i <span class="hl sym">) {</span>
         count<span class="hl sym">[</span>i<span class="hl sym">++] =</span> <span class="hl num">0</span><span class="hl sym">;</span>
         <span class="hl kwb">int</span> next <span class="hl sym">=</span> p<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] =</span> p<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">];</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span> <span class="hl kwb">int</span> j<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">;</span> j<span class="hl sym">&lt;</span>i<span class="hl sym">; ++</span>j <span class="hl sym">) {</span>
            p<span class="hl sym">[</span>j<span class="hl sym">] =</span> p<span class="hl sym">[</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">];</span>
         <span class="hl sym">}</span>
         p<span class="hl sym">[</span>i<span class="hl sym">] =</span> first<span class="hl sym">;</span>
         first <span class="hl sym">=</span> next<span class="hl sym">;</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">return true</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>


   <span class="hl kwb">int</span> <span class="hl kwd">CountFlips</span><span class="hl sym">()</span>
   <span class="hl sym">{</span>
      <span class="hl kwb">int</span> flips <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl kwb">int</span> first <span class="hl sym">=</span> p<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span> p<span class="hl sym">[</span>first<span class="hl sym">] !=</span> <span class="hl num">0</span> <span class="hl sym">) {</span>
         Array<span class="hl sym">.</span><span class="hl kwd">Copy</span><span class="hl sym">(</span> p<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> pp<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> pp<span class="hl sym">.</span>Length <span class="hl sym">);</span>
         <span class="hl kwa">do</span> <span class="hl sym">{</span>
            <span class="hl sym">++</span>flips<span class="hl sym">;</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span> <span class="hl kwb">int</span> lo <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">,</span> hi <span class="hl sym">=</span> first <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span> lo <span class="hl sym">&lt;</span> hi<span class="hl sym">; ++</span>lo<span class="hl sym">, --</span>hi <span class="hl sym">) {</span>
               <span class="hl kwb">int</span> t <span class="hl sym">=</span> pp<span class="hl sym">[</span>lo<span class="hl sym">];</span>
               pp<span class="hl sym">[</span>lo<span class="hl sym">] =</span> pp<span class="hl sym">[</span>hi<span class="hl sym">];</span>
               pp<span class="hl sym">[</span>hi<span class="hl sym">] =</span> t<span class="hl sym">;</span>
            <span class="hl sym">}</span>
            <span class="hl kwb">int</span> tp <span class="hl sym">=</span> pp<span class="hl sym">[</span>first<span class="hl sym">];</span>
            pp<span class="hl sym">[</span>first<span class="hl sym">] =</span> first<span class="hl sym">;</span>
            first <span class="hl sym">=</span> tp<span class="hl sym">;</span>
         <span class="hl sym">}</span> <span class="hl kwa">while</span> <span class="hl sym">(</span> pp<span class="hl sym">[</span>first<span class="hl sym">] !=</span> <span class="hl num">0</span> <span class="hl sym">);</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">return</span> flips<span class="hl sym">;</span>
   <span class="hl sym">}</span>


   <span class="hl kwb">void</span> <span class="hl kwd">RunTask</span><span class="hl sym">(</span> <span class="hl kwb">int</span> task <span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwb">int</span> idxMin <span class="hl sym">=</span> task<span class="hl sym">*</span>CHUNKSZ<span class="hl sym">;</span>
      <span class="hl kwb">int</span> idxMax <span class="hl sym">=</span> Math<span class="hl sym">.</span><span class="hl kwd">Min</span><span class="hl sym">(</span> Fact<span class="hl sym">[</span>n<span class="hl sym">],</span> idxMin<span class="hl sym">+</span>CHUNKSZ <span class="hl sym">);</span>

      <span class="hl kwd">FirstPermutation</span><span class="hl sym">(</span> idxMin <span class="hl sym">);</span>

      <span class="hl kwb">int</span> maxflips <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl kwb">int</span> chksum <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span> <span class="hl kwb">int</span> i<span class="hl sym">=</span>idxMin<span class="hl sym">;; ) {</span>

         <span class="hl kwa">if</span> <span class="hl sym">(</span> p<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] !=</span> <span class="hl num">0</span> <span class="hl sym">) {</span>
            <span class="hl kwb">int</span> flips <span class="hl sym">=</span> <span class="hl kwd">CountFlips</span><span class="hl sym">();</span>
            maxflips <span class="hl sym">=</span> Math<span class="hl sym">.</span><span class="hl kwd">Max</span><span class="hl sym">(</span> maxflips<span class="hl sym">,</span> flips <span class="hl sym">);</span>
            chksum <span class="hl sym">+=</span> i<span class="hl sym">%</span><span class="hl num">2</span> <span class="hl sym">==</span><span class="hl num">0</span> ? flips <span class="hl sym">: -</span>flips<span class="hl sym">;</span>
         <span class="hl sym">}</span>

         <span class="hl kwa">if</span> <span class="hl sym">( ++</span>i <span class="hl sym">==</span> idxMax <span class="hl sym">) {</span>
	    <span class="hl kwa">break</span><span class="hl sym">;</span>
	 <span class="hl sym">}</span>

         <span class="hl kwd">NextPermutation</span><span class="hl sym">();</span>
      <span class="hl sym">}</span>
      maxFlips<span class="hl sym">[</span>task<span class="hl sym">] =</span> maxflips<span class="hl sym">;</span>
      chkSums<span class="hl sym">[</span>task<span class="hl sym">]  =</span> chksum<span class="hl sym">;</span>
   <span class="hl sym">}</span>


   <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">Run</span><span class="hl sym">()</span>
   <span class="hl sym">{</span>
      p     <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">int</span><span class="hl sym">[</span>n<span class="hl sym">];</span>
      pp    <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">int</span><span class="hl sym">[</span>n<span class="hl sym">];</span>
      count <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">int</span><span class="hl sym">[</span>n<span class="hl sym">];</span>

      <span class="hl kwb">int</span> task<span class="hl sym">;</span>
      <span class="hl kwa">while</span> <span class="hl sym">( (</span>task <span class="hl sym">=</span> taskId<span class="hl sym">++) &lt;</span> NTASKS <span class="hl sym">) {</span> <span class="hl slc">// NOT SAFE - need PFX</span>
	 <span class="hl kwd">RunTask</span><span class="hl sym">(</span> task <span class="hl sym">);</span>       
      <span class="hl sym">}</span> 
   <span class="hl sym">}</span>


   <span class="hl kwa">static</span> <span class="hl kwb">void</span> <span class="hl kwd">Main</span><span class="hl sym">(</span><span class="hl kwb">string</span><span class="hl sym">[]</span> args<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      n <span class="hl sym">=</span> <span class="hl num">7</span><span class="hl sym">;</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>args<span class="hl sym">.</span>Length <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> n <span class="hl sym">=</span> Int32<span class="hl sym">.</span><span class="hl kwd">Parse</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>

      Fact <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">int</span><span class="hl sym">[</span>n<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">];</span>
      Fact<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] =</span> <span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span> <span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>Fact<span class="hl sym">.</span>Length<span class="hl sym">; ++</span>i <span class="hl sym">) {</span>
         Fact<span class="hl sym">[</span>i<span class="hl sym">] =</span> Fact<span class="hl sym">[</span>i<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">] *</span> i<span class="hl sym">;</span>
      <span class="hl sym">}</span>

      CHUNKSZ <span class="hl sym">= (</span>Fact<span class="hl sym">[</span>n<span class="hl sym">] +</span> NCHUNKS <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">) /</span> NCHUNKS<span class="hl sym">;</span>
      NTASKS <span class="hl sym">= (</span>Fact<span class="hl sym">[</span>n<span class="hl sym">] +</span> CHUNKSZ <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">) /</span> CHUNKSZ<span class="hl sym">;</span>
      maxFlips <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">int</span><span class="hl sym">[</span>NTASKS<span class="hl sym">];</span>
      chkSums  <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">int</span><span class="hl sym">[</span>NTASKS<span class="hl sym">];</span>
      taskId <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

      <span class="hl kwb">int</span> nthreads <span class="hl sym">=</span> Environment<span class="hl sym">.</span>ProcessorCount<span class="hl sym">;</span>
      Thread<span class="hl sym">[]</span> threads <span class="hl sym">=</span> <span class="hl kwa">new</span> Thread<span class="hl sym">[</span>nthreads<span class="hl sym">];</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span> <span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>nthreads<span class="hl sym">; ++</span>i <span class="hl sym">) {</span>
         threads<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">Thread</span><span class="hl sym">(</span> <span class="hl kwa">new</span> <span class="hl kwd">ThreadStart</span><span class="hl sym">(</span><span class="hl kwa">new</span> <span class="hl kwd">FannkuchRedux</span><span class="hl sym">().</span>Run<span class="hl sym">) );</span>
         threads<span class="hl sym">[</span>i<span class="hl sym">].</span><span class="hl kwd">Start</span><span class="hl sym">();</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">foreach</span> <span class="hl sym">(</span> Thread t <span class="hl kwa">in</span> threads <span class="hl sym">) {</span>
         t<span class="hl sym">.</span><span class="hl kwd">Join</span><span class="hl sym">();</span>
      <span class="hl sym">}</span>

      <span class="hl kwb">int</span> res <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwa">foreach</span> <span class="hl sym">(</span> <span class="hl kwb">int</span> v <span class="hl kwa">in</span> maxFlips <span class="hl sym">) {</span>
         res <span class="hl sym">=</span> Math<span class="hl sym">.</span><span class="hl kwd">Max</span><span class="hl sym">(</span> res<span class="hl sym">,</span> v <span class="hl sym">);</span>
      <span class="hl sym">}</span>
      <span class="hl kwb">int</span> chk <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwa">foreach</span> <span class="hl sym">(</span> <span class="hl kwb">int</span> v <span class="hl kwa">in</span> chkSums <span class="hl sym">) {</span>
         chk <span class="hl sym">+=</span> v<span class="hl sym">;</span>
      <span class="hl sym">}</span>

      Console<span class="hl sym">.</span><span class="hl kwd">WriteLine</span><span class="hl sym">(</span><span class="hl str">&quot;{0}</span><span class="hl esc">\n</span><span class="hl str">Pfannkuchen({1}) = {2}&quot;</span><span class="hl sym">,</span> chk<span class="hl sym">,</span> n<span class="hl sym">,</span> res<span class="hl sym">);</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>
