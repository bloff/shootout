<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">-- Contributed by Jed Brown with improvements by Spencer Janssen, Don Stewart and Alex Mason</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Compile with: &lt;ghc&gt; --make -O2 -fglasgow-exts -threaded threadring.ghc-4.hs -o threadring.ghc-4.ghc_run</span>

import Control.Monad
import Control.Concurrent
import System.Environment
import GHC.Conc

ring <span class="hl sym">=</span> <span class="hl num">503</span>

new ret l i <span class="hl sym">=</span> do
  r <span class="hl sym">&lt;-</span> newEmptyMVar
  forkOnIO numCapabilities <span class="hl sym">(</span>thread ret i l r<span class="hl sym">)</span>
  return r


thread <span class="hl sym">::</span> MVar <span class="hl sym">() -&gt;</span> Int <span class="hl sym">-&gt;</span> MVar Int <span class="hl sym">-&gt;</span> MVar Int <span class="hl sym">-&gt;</span> IO <span class="hl sym">()</span>
thread ret i l r <span class="hl sym">=</span> go
  where go <span class="hl sym">=</span> do
          m <span class="hl sym">&lt;-</span> takeMVar l
          if m <span class="hl sym">&gt;</span> <span class="hl num">1</span>
              then <span class="hl sym">(</span>putMVar r $<span class="hl sym">!</span> m <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">) &gt;&gt;</span> go
              else print i <span class="hl sym">&gt;&gt;</span> putMVar ret <span class="hl sym">()</span>

main <span class="hl sym">=</span> do
  a <span class="hl sym">&lt;-</span> newMVar . read . head <span class="hl sym">=&lt;&lt;</span> getArgs
  ret <span class="hl sym">&lt;-</span> newEmptyMVar
  z <span class="hl sym">&lt;-</span> foldM <span class="hl sym">(</span>new ret<span class="hl sym">)</span> a <span class="hl sym">[</span><span class="hl num">2</span>..ring<span class="hl sym">]</span>
  forkOnIO numCapabilities <span class="hl sym">(</span>thread ret <span class="hl num">1</span> z a<span class="hl sym">)</span>
  takeMVar ret
