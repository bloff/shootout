<span class="hl com">(*  The Computer Language Benchmarks Game</span>
<span class="hl com">    http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">    Contributed by Dmitry Lomov &amp; Jomo Fisher</span>
<span class="hl com"></span>
<span class="hl com">    Uses F# asyncs (lightweight threads) with customized auto reset cell </span>
<span class="hl com">    as semaphore.</span>
<span class="hl com">*)</span>

<span class="hl kwa">let</span> ringLength <span class="hl sym">=</span> <span class="hl num">503</span>

<span class="hl kwa">type</span> <span class="hl kwd">AutoResetCell</span><span class="hl sym">() =</span>
    <span class="hl kwa">let mutable value</span> <span class="hl sym">= -</span><span class="hl num">1</span>
    <span class="hl kwa">let mutable</span> run <span class="hl sym">=</span> <span class="hl kwd">None</span>
    
    member this<span class="hl sym">.</span><span class="hl kwd">RegisterResult</span> res <span class="hl sym">=</span>
        <span class="hl kwa">let</span> grabbed <span class="hl sym">=</span> 
            lock this <span class="hl sym">(</span><span class="hl kwa">fun</span> <span class="hl sym">() -&gt;</span>
                <span class="hl kwa">match</span> run <span class="hl kwa">with</span>
                <span class="hl sym">|</span> <span class="hl kwd">None</span> <span class="hl sym">-&gt;</span> <span class="hl kwa">value</span> <span class="hl sym">&lt;-</span> res<span class="hl sym">;</span> <span class="hl kwd">None</span>
                <span class="hl sym">|</span> grabbed <span class="hl sym">-&gt;</span> run <span class="hl sym">&lt;-</span> <span class="hl kwd">None</span><span class="hl sym">;</span> grabbed<span class="hl sym">)</span>
        <span class="hl kwa">match</span> grabbed <span class="hl kwa">with</span>
        <span class="hl sym">|</span> <span class="hl kwd">None</span> <span class="hl sym">-&gt; ()</span>
        <span class="hl sym">|</span> <span class="hl kwd">Some</span> run <span class="hl sym">-&gt;</span> run res

    member this<span class="hl sym">.</span><span class="hl kwd">AsyncResult</span> <span class="hl sym">=</span> 
        <span class="hl kwc">Async</span><span class="hl sym">.</span><span class="hl kwd">FromContinuations</span><span class="hl sym">(</span><span class="hl kwa">fun</span> <span class="hl sym">(</span>success<span class="hl sym">,</span>_<span class="hl sym">,</span>_<span class="hl sym">) -&gt;</span> 
            <span class="hl kwa">let</span> runNow <span class="hl sym">=</span> 
                lock this <span class="hl sym">(</span><span class="hl kwa">fun</span> <span class="hl sym">() -&gt;</span>
                    <span class="hl kwa">if value</span> <span class="hl sym">= -</span><span class="hl num">1</span> <span class="hl kwa">then</span>
                        run <span class="hl sym">&lt;-</span> <span class="hl kwd">Some</span> success
                        <span class="hl kwa">false</span>                        
                    <span class="hl kwa">else true</span><span class="hl sym">)</span>                        
            <span class="hl kwa">if</span> runNow <span class="hl kwa">then</span> 
                <span class="hl kwa">let</span> r <span class="hl sym">=</span> <span class="hl kwa">value</span>
                <span class="hl kwa">value</span> <span class="hl sym">&lt;- -</span><span class="hl num">1</span> <span class="hl sym">//</span> <span class="hl kwd">Autoreset</span>
                success r<span class="hl sym">)</span> 

<span class="hl kwa">let</span> createCell _ <span class="hl sym">=</span> <span class="hl kwd">AutoResetCell</span><span class="hl sym">()</span>

<span class="hl kwa">let</span> createThread <span class="hl sym">(</span>cells<span class="hl sym">:</span><span class="hl kwd">AutoResetCell</span> array<span class="hl sym">)</span> i <span class="hl sym">=</span>
    <span class="hl kwa">let</span> next <span class="hl sym">=</span> <span class="hl kwa">if</span> i <span class="hl sym">=</span> ringLength<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl kwa">then</span> <span class="hl num">0</span> <span class="hl kwa">else</span> i <span class="hl sym">+</span> <span class="hl num">1</span>
    async <span class="hl sym">{</span>
            <span class="hl kwa">let</span> more <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl kwa">true</span>
            <span class="hl kwa">while</span> <span class="hl sym">!</span>more <span class="hl kwa">do</span>
                <span class="hl kwa">let</span><span class="hl sym">!</span> msg <span class="hl sym">=</span> cells<span class="hl sym">.[</span>i<span class="hl sym">].</span><span class="hl kwd">AsyncResult</span> 
                cells<span class="hl sym">.[</span>next<span class="hl sym">].</span><span class="hl kwd">RegisterResult</span><span class="hl sym">(</span>msg<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>           
                more <span class="hl sym">:=</span> msg<span class="hl sym">&gt;</span><span class="hl num">0</span>
                <span class="hl kwa">if</span> msg <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">then</span>                    
                    printfn <span class="hl str">&quot;%d&quot;</span> <span class="hl sym">(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) }</span>

<span class="hl sym">[&lt;</span><span class="hl kwd">EntryPoint</span><span class="hl sym">&gt;]</span>
<span class="hl kwa">let</span> main args <span class="hl sym">=</span> 
    <span class="hl kwa">let</span> count <span class="hl sym">=</span> <span class="hl kwa">if</span> args<span class="hl sym">.</span><span class="hl kwd">Length</span><span class="hl sym">&gt;</span><span class="hl num">0</span> <span class="hl kwa">then</span> <span class="hl kwb">int</span> args<span class="hl sym">.[</span><span class="hl num">0</span><span class="hl sym">]</span> <span class="hl kwa">else</span> <span class="hl num">50000000</span>
    
    <span class="hl kwa">let</span> cells <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>init ringLength createCell

    <span class="hl kwa">let</span> threads <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>init ringLength <span class="hl sym">(</span>createThread cells<span class="hl sym">)</span>

    cells<span class="hl sym">.[</span><span class="hl num">0</span><span class="hl sym">].</span><span class="hl kwd">RegisterResult</span><span class="hl sym">(</span>count<span class="hl sym">)</span> 

    threads
        <span class="hl sym">|&gt;</span> <span class="hl kwc">Async</span><span class="hl sym">.</span><span class="hl kwd">Parallel</span> <span class="hl sym">//</span> <span class="hl kwd">Run</span> all the asyncs at once
        <span class="hl sym">|&gt;</span> <span class="hl kwc">Async</span><span class="hl sym">.</span><span class="hl kwd">Ignore</span> <span class="hl sym">//</span> <span class="hl kwd">Ignore</span> the results
        <span class="hl sym">|&gt;</span> <span class="hl kwc">Async</span><span class="hl sym">.</span><span class="hl kwd">RunSynchronously</span> <span class="hl sym">//</span> <span class="hl kwd">Block</span> the main thread until work is <span class="hl kwa">done</span>
    
    <span class="hl num">0</span>
