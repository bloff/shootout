<span class="hl com">{-</span>
<span class="hl com">   The Computer Language Shootout</span>
<span class="hl com">      http://shootout.alioth.debian.org/</span>
<span class="hl com">      contributed by Olof Kraigher</span>
<span class="hl com">-}</span>

module Main where

import System<span class="hl sym">(</span>getArgs<span class="hl sym">);</span>      import Data.List<span class="hl sym">;</span>   import Data.Bits<span class="hl sym">;</span>         import Data.Array.IArray<span class="hl sym">;</span>
import Char<span class="hl sym">(</span>intToDigit<span class="hl sym">);</span>   import Data.Maybe<span class="hl sym">;</span>   import Data.Word<span class="hl sym">(</span>Word64<span class="hl sym">);</span>   import Numeric<span class="hl sym">(</span>showIntAtBase<span class="hl sym">);</span>

data Direction <span class="hl sym">=</span> E <span class="hl sym">|</span> SE <span class="hl sym">|</span> SW <span class="hl sym">|</span> W <span class="hl sym">|</span> NW <span class="hl sym">|</span> NE deriving <span class="hl sym">(</span>Enum<span class="hl sym">,</span> Eq<span class="hl sym">,</span> Ord<span class="hl sym">,</span> Show<span class="hl sym">)</span>
type Piece <span class="hl sym">= [</span>Direction<span class="hl sym">]</span>
type Cell <span class="hl sym">= (</span>Int<span class="hl sym">,</span> Int<span class="hl sym">)</span>
type Mask <span class="hl sym">=</span> Word64
type Color <span class="hl sym">=</span> Int

class Rotatable a where
   rot <span class="hl sym">::</span> a <span class="hl sym">-&gt;</span> a 

class Floppable a where
   flop <span class="hl sym">::</span> a <span class="hl sym">-&gt;</span> a   
   
class Maskable a where
   mask <span class="hl sym">::</span> a <span class="hl sym">-&gt;</span> Mask

instance Rotatable Direction where
   rot NE <span class="hl sym">=</span> E
   rot d <span class="hl sym">=</span> succ d

instance Rotatable Piece where
   rot a <span class="hl sym">=</span> map rot a

instance Floppable Direction where
   flop E <span class="hl sym">=</span> W
   flop W <span class="hl sym">=</span> E
   flop SE <span class="hl sym">=</span> SW
   flop SW <span class="hl sym">=</span> SE
   flop NE <span class="hl sym">=</span> NW
   flop NW <span class="hl sym">=</span> NE

instance Floppable Piece where
   flop a <span class="hl sym">=</span> map flop a
   
instance Maskable Cell where
   mask <span class="hl sym">(</span>x<span class="hl sym">,</span>y<span class="hl sym">) =</span> bit <span class="hl sym">(</span>x <span class="hl sym">+</span> y<span class="hl sym">*</span>width<span class="hl sym">)</span>

instance Maskable <span class="hl sym">[</span>Cell<span class="hl sym">]</span> where
   mask p <span class="hl sym">=</span> foldl' <span class="hl sym">(</span>\a b <span class="hl sym">-&gt;</span> a .<span class="hl sym">|</span>. mask b<span class="hl sym">)</span> <span class="hl num">0</span> p

width <span class="hl sym">::</span> Int
width <span class="hl sym">=</span> <span class="hl num">5</span>

height <span class="hl sym">::</span> Int
height <span class="hl sym">=</span> <span class="hl num">10</span>

allCells <span class="hl sym">:: [</span>Cell<span class="hl sym">]</span>
allCells <span class="hl sym">= [(</span>x<span class="hl sym">,</span>y<span class="hl sym">) |</span> y <span class="hl sym">&lt;- [</span><span class="hl num">0</span>..height<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">],</span> x <span class="hl sym">&lt;- [</span><span class="hl num">0</span>..width<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">]]</span>

left <span class="hl sym">::</span> Mask
left <span class="hl sym">=</span> shift right <span class="hl sym">(</span>width<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>

right <span class="hl sym">::</span> Mask
right <span class="hl sym">=</span> foldl' <span class="hl sym">(</span>\a b <span class="hl sym">-&gt;</span> a .<span class="hl sym">|</span>. <span class="hl sym">(</span>shift <span class="hl num">1</span> b<span class="hl sym">))</span> <span class="hl num">0</span> <span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">,</span>width..width<span class="hl sym">*(</span>height<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)]</span>

bottom <span class="hl sym">::</span> Mask
bottom <span class="hl sym">=</span> <span class="hl num">0x1f</span>

top <span class="hl sym">::</span> Mask
top <span class="hl sym">=</span> shift bottom <span class="hl sym">(</span>width<span class="hl sym">*(</span>height<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">))</span>

fullMask <span class="hl sym">::</span> Mask
fullMask <span class="hl sym">=</span> <span class="hl num">0x3FFFFFFFFFFFF</span>
      
pieces <span class="hl sym">::</span> Array Color Piece
pieces <span class="hl sym">=</span> array <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">9</span><span class="hl sym">)</span> $ zip <span class="hl sym">[</span><span class="hl num">0</span>.<span class="hl num">.9</span><span class="hl sym">]</span> $ 
      <span class="hl sym">[   [</span>E<span class="hl sym">,</span>    E<span class="hl sym">,</span>  E<span class="hl sym">,</span>  SE<span class="hl sym">],</span>
         <span class="hl sym">[</span>SE<span class="hl sym">,</span> SW<span class="hl sym">,</span> W<span class="hl sym">,</span>  SW<span class="hl sym">],</span>
         <span class="hl sym">[</span>W<span class="hl sym">,</span>  W<span class="hl sym">,</span>  SW<span class="hl sym">,</span> SE<span class="hl sym">],</span>
         <span class="hl sym">[</span>E<span class="hl sym">,</span>  E<span class="hl sym">,</span>  SW<span class="hl sym">,</span> SE<span class="hl sym">],</span>
         <span class="hl sym">[</span>NW<span class="hl sym">,</span> W<span class="hl sym">,</span>  NW<span class="hl sym">,</span> SE<span class="hl sym">,</span> SW<span class="hl sym">],</span>
         <span class="hl sym">[</span>E<span class="hl sym">,</span>  E<span class="hl sym">,</span>  NE<span class="hl sym">,</span> W<span class="hl sym">],</span>
         <span class="hl sym">[</span>NW<span class="hl sym">,</span> NE<span class="hl sym">,</span> NE<span class="hl sym">,</span> W<span class="hl sym">],</span>
         <span class="hl sym">[</span>NE<span class="hl sym">,</span> SE<span class="hl sym">,</span> E<span class="hl sym">,</span>  NE<span class="hl sym">],</span>
         <span class="hl sym">[</span>SE<span class="hl sym">,</span> SE<span class="hl sym">,</span> E<span class="hl sym">,</span>  SE<span class="hl sym">],</span>
         <span class="hl sym">[</span>E<span class="hl sym">,</span>  NW<span class="hl sym">,</span> NW<span class="hl sym">,</span> NW<span class="hl sym">]]</span>

valid <span class="hl sym">::</span> Cell <span class="hl sym">-&gt;</span> Maybe Cell
valid p<span class="hl sym">&#64;(</span>x<span class="hl sym">,</span>y<span class="hl sym">)</span>
   <span class="hl sym">|</span> <span class="hl num">0</span> <span class="hl sym">&lt;=</span> x<span class="hl sym">,</span> x <span class="hl sym">&lt;</span> width<span class="hl sym">,</span> <span class="hl num">0</span> <span class="hl sym">&lt;=</span> y<span class="hl sym">,</span> y <span class="hl sym">&lt;</span> height <span class="hl sym">=</span> Just p
   <span class="hl sym">|</span>otherwise <span class="hl sym">=</span> Nothing

move <span class="hl sym">::</span> Cell <span class="hl sym">-&gt;</span> Direction <span class="hl sym">-&gt;</span> Maybe Cell
move <span class="hl sym">(</span>x<span class="hl sym">,</span>y<span class="hl sym">)</span> E <span class="hl sym">=</span> valid <span class="hl sym">(</span>x<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span>y<span class="hl sym">)</span>
move <span class="hl sym">(</span>x<span class="hl sym">,</span>y<span class="hl sym">)</span> W <span class="hl sym">=</span> valid <span class="hl sym">(</span>x<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span>y<span class="hl sym">)</span>
move <span class="hl sym">(</span>x<span class="hl sym">,</span>y<span class="hl sym">)</span> NE <span class="hl sym">=</span> valid <span class="hl sym">(</span>x<span class="hl sym">+(</span>mod y <span class="hl num">2</span><span class="hl sym">),</span>y<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
move <span class="hl sym">(</span>x<span class="hl sym">,</span>y<span class="hl sym">)</span> NW <span class="hl sym">=</span> valid <span class="hl sym">(</span>x<span class="hl sym">+(</span>mod y <span class="hl num">2</span><span class="hl sym">)-</span><span class="hl num">1</span><span class="hl sym">,</span>y<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
move <span class="hl sym">(</span>x<span class="hl sym">,</span>y<span class="hl sym">)</span> SE <span class="hl sym">=</span> valid <span class="hl sym">(</span>x<span class="hl sym">+(</span>mod y <span class="hl num">2</span><span class="hl sym">),</span>y<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>
move <span class="hl sym">(</span>x<span class="hl sym">,</span>y<span class="hl sym">)</span> SW <span class="hl sym">=</span> valid <span class="hl sym">(</span>x<span class="hl sym">+(</span>mod y <span class="hl num">2</span><span class="hl sym">)-</span><span class="hl num">1</span><span class="hl sym">,</span>y<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>

cells <span class="hl sym">::</span> Piece <span class="hl sym">-&gt;</span> Cell <span class="hl sym">-&gt;</span> Maybe <span class="hl sym">[</span>Cell<span class="hl sym">]</span>
cells <span class="hl sym">[]</span> cell <span class="hl sym">=</span> Just <span class="hl sym">[</span>cell<span class="hl sym">]</span>
cells <span class="hl sym">(</span>d<span class="hl sym">:</span>ds<span class="hl sym">)</span> cell<span class="hl sym">&#64;(</span>x<span class="hl sym">,</span>y<span class="hl sym">) =</span>
   case move <span class="hl sym">(</span>x<span class="hl sym">,</span>y<span class="hl sym">)</span> d of
      Nothing <span class="hl sym">-&gt;</span> Nothing
      Just <span class="hl sym">(</span>x'<span class="hl sym">,</span>y'<span class="hl sym">) -&gt;</span>
         case cells ds <span class="hl sym">(</span>x'<span class="hl sym">,</span>y'<span class="hl sym">)</span> of
            Nothing <span class="hl sym">-&gt;</span> Nothing
            Just ps <span class="hl sym">-&gt;</span> Just $ <span class="hl sym">(</span>x<span class="hl sym">,</span>y<span class="hl sym">) :</span> ps
            
bitCount <span class="hl sym">::</span> Mask <span class="hl sym">-&gt;</span> Int
bitCount <span class="hl num">0</span> <span class="hl sym">=</span> <span class="hl num">0</span>
bitCount mask <span class="hl sym">= (</span>fromIntegral $ <span class="hl sym">(</span>mask .<span class="hl sym">&amp;</span>. <span class="hl num">1</span><span class="hl sym">)) + (</span>bitCount <span class="hl sym">(</span>shiftR mask <span class="hl num">1</span><span class="hl sym">))</span>

floodFill <span class="hl sym">::</span> Mask <span class="hl sym">-&gt;</span> Mask <span class="hl sym">-&gt;</span> Mask
floodFill mask fromBit
   <span class="hl sym">|</span> overlaps fromBit mask <span class="hl sym">=</span> mask
   <span class="hl sym">|</span> otherwise <span class="hl sym">=</span>   
      let mask' <span class="hl sym">=</span> mask .<span class="hl sym">|</span>. fromBit
      in foldl' <span class="hl sym">(</span>floodFill<span class="hl sym">)</span> mask' $ 
            map snd $ filter <span class="hl sym">(</span>\<span class="hl sym">(</span>a<span class="hl sym">,</span> b<span class="hl sym">) -&gt;</span> not $ overlaps a fromBit<span class="hl sym">)</span> $ 
               zip <span class="hl sym">[</span>left<span class="hl sym">,</span> right<span class="hl sym">,</span> top<span class="hl sym">,</span> bottom<span class="hl sym">]</span> $ 
                  map <span class="hl sym">(</span>shift fromBit<span class="hl sym">) [</span><span class="hl num">1</span><span class="hl sym">,-</span><span class="hl num">1</span><span class="hl sym">,</span>width<span class="hl sym">,-</span>width<span class="hl sym">]</span>

findFreeBit <span class="hl sym">::</span> Mask <span class="hl sym">-&gt;</span> Mask
findFreeBit mask <span class="hl sym">=</span> fromJust $ find <span class="hl sym">(</span>not.<span class="hl sym">(</span>overlaps mask<span class="hl sym">))</span> $ map <span class="hl sym">(</span>shift <span class="hl num">1</span><span class="hl sym">) [</span><span class="hl num">0</span>..width<span class="hl sym">*</span>height<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">]</span>

noIslands <span class="hl sym">::</span> Mask <span class="hl sym">-&gt;</span> Bool
noIslands mask <span class="hl sym">=</span> not $ any <span class="hl sym">(&lt;</span><span class="hl num">5</span><span class="hl sym">)</span> $ diffs $ noIslands' mask where
   noIslands' mask
      <span class="hl sym">|</span> mask <span class="hl sym">==</span> fullMask <span class="hl sym">= [</span>bitCount mask<span class="hl sym">]</span>
      <span class="hl sym">|</span> otherwise <span class="hl sym">= (</span>bitCount mask<span class="hl sym">): (</span>noIslands' $ floodFill mask $ findFreeBit mask<span class="hl sym">)</span>
   diffs <span class="hl sym">(</span>x<span class="hl sym">:</span>y<span class="hl sym">:[]) = [</span>y<span class="hl sym">-</span>x<span class="hl sym">]</span>
   diffs <span class="hl sym">(</span>x<span class="hl sym">:</span>y<span class="hl sym">:</span>xs<span class="hl sym">) = (</span>y<span class="hl sym">-</span>x<span class="hl sym">): (</span>diffs $ y<span class="hl sym">:</span>xs<span class="hl sym">)</span>

bitmasksWithColor <span class="hl sym">::</span> Array Color <span class="hl sym">[</span>Mask<span class="hl sym">]</span>
bitmasksWithColor <span class="hl sym">=</span> amap bitmasksWithColor' pieces where
   
   bitmasksWithColor' <span class="hl sym">::</span> Piece <span class="hl sym">-&gt; [</span>Mask<span class="hl sym">]</span>
   bitmasksWithColor' piece 
      <span class="hl sym">|</span> piece <span class="hl sym">== [</span>NW<span class="hl sym">,</span> W<span class="hl sym">,</span>  NW<span class="hl sym">,</span> SE<span class="hl sym">,</span> SW<span class="hl sym">] =</span> do 
         piece' <span class="hl sym">&lt;- (</span>take <span class="hl num">3</span> $ iterate rot piece<span class="hl sym">) ++ (</span>take <span class="hl num">3</span> $ iterate rot $ flop piece<span class="hl sym">)</span>
         filter noIslands $ map mask $ mapMaybe <span class="hl sym">(</span>cells piece'<span class="hl sym">)</span> allCells
         
      <span class="hl sym">|</span> otherwise <span class="hl sym">=</span> do 
         piece' <span class="hl sym">&lt;- (</span>take <span class="hl num">6</span> $ iterate rot piece<span class="hl sym">) ++ (</span>take <span class="hl num">6</span> $ iterate rot $ flop piece<span class="hl sym">)</span>
         filter noIslands $ map mask $ mapMaybe <span class="hl sym">(</span>cells piece'<span class="hl sym">)</span> allCells
   

bitmasksAtCell <span class="hl sym">:: [</span>Mask<span class="hl sym">] -&gt;</span> Array Cell <span class="hl sym">[</span>Mask<span class="hl sym">]</span>
bitmasksAtCell masks <span class="hl sym">=</span> 
   let masks' <span class="hl sym">= (</span>bitmasksAtCell' <span class="hl sym">(</span>shift <span class="hl num">1</span> $ width<span class="hl sym">*</span>height <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">) [] (</span>reverse $ sort masks<span class="hl sym">))</span>
   in  array <span class="hl sym">((</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">),(</span><span class="hl num">4</span><span class="hl sym">,</span><span class="hl num">9</span><span class="hl sym">))</span> $ zip <span class="hl sym">[(</span>x<span class="hl sym">,</span>y<span class="hl sym">) |</span> y <span class="hl sym">&lt;- [</span><span class="hl num">9</span><span class="hl sym">,</span><span class="hl num">8</span>.<span class="hl num">.0</span><span class="hl sym">],</span> x <span class="hl sym">&lt;- [</span><span class="hl num">4</span><span class="hl sym">,</span><span class="hl num">3</span>.<span class="hl num">.0</span><span class="hl sym">]]</span> masks' where
      
      bitmasksAtCell' <span class="hl sym">::</span> Mask <span class="hl sym">-&gt; [</span>Mask<span class="hl sym">] -&gt; [</span>Mask<span class="hl sym">] -&gt; [[</span>Mask<span class="hl sym">]]</span>
      bitmasksAtCell' <span class="hl num">1</span> cellMasks <span class="hl sym">[] = [</span>cellMasks<span class="hl sym">]</span> 
      bitmasksAtCell' cellMask cellMasks <span class="hl sym">[] =</span> cellMasks<span class="hl sym">:(</span>bitmasksAtCell' <span class="hl sym">(</span>shiftR cellMask <span class="hl num">1</span><span class="hl sym">) [] [])</span>
      bitmasksAtCell' cellMask cellMasks masks<span class="hl sym">&#64;(</span>m<span class="hl sym">:</span>ms<span class="hl sym">)</span>
         <span class="hl sym">|</span> overlaps cellMask m <span class="hl sym">=</span> bitmasksAtCell' cellMask <span class="hl sym">(</span>m<span class="hl sym">:</span>cellMasks<span class="hl sym">)</span> ms
         <span class="hl sym">|</span> otherwise <span class="hl sym">=</span> cellMasks <span class="hl sym">: (</span>bitmasksAtCell' <span class="hl sym">(</span>shiftR cellMask <span class="hl num">1</span><span class="hl sym">) []</span> masks<span class="hl sym">)</span>
         

bitmasksWithColorAtCell <span class="hl sym">::</span> Array Color <span class="hl sym">(</span>Array Cell <span class="hl sym">[</span>Mask<span class="hl sym">])</span>
bitmasksWithColorAtCell <span class="hl sym">=</span> amap bitmasksAtCell bitmasksWithColor

nextCell <span class="hl sym">::</span> Cell <span class="hl sym">-&gt;</span> Cell
nextCell <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span>y<span class="hl sym">) = (</span>width<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span>y<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
nextCell <span class="hl sym">(</span>x<span class="hl sym">,</span>y<span class="hl sym">) =  (</span>x<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span>y<span class="hl sym">)</span>


overlaps <span class="hl sym">::</span> Mask <span class="hl sym">-&gt;</span> Mask <span class="hl sym">-&gt;</span> Bool
overlaps a b <span class="hl sym">= (</span>a .<span class="hl sym">&amp;</span>. b<span class="hl sym">) /=</span> <span class="hl num">0</span>

legal <span class="hl sym">::</span> Mask <span class="hl sym">-&gt; [</span>Mask<span class="hl sym">] -&gt; [</span>Mask<span class="hl sym">]</span>
legal boardMask masks <span class="hl sym">=</span> filter <span class="hl sym">(</span>not.<span class="hl sym">(</span>overlaps boardMask<span class="hl sym">))</span> masks      


solutions <span class="hl sym">:: [</span>String<span class="hl sym">]</span>
solutions <span class="hl sym">=</span> solutions' <span class="hl num">0</span> <span class="hl sym">(</span>width<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> height<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">) [</span><span class="hl num">0</span>.<span class="hl num">.9</span><span class="hl sym">] []</span> where
   
   solutions' <span class="hl sym">::</span> Mask <span class="hl sym">-&gt;</span> Cell <span class="hl sym">-&gt; [</span>Color<span class="hl sym">] -&gt; [(</span>Color<span class="hl sym">,</span> Mask<span class="hl sym">)]-&gt; [</span>String<span class="hl sym">]</span>
   solutions' _ _ <span class="hl sym">[]</span> usedMasks <span class="hl sym">=</span>    let s <span class="hl sym">=</span> stringOfColorMasks usedMasks in   <span class="hl sym">[</span>s<span class="hl sym">,</span> invertString s<span class="hl sym">]</span>
   solutions' board cell colorsLeft usedMasks 
      <span class="hl sym">|</span> overlaps board <span class="hl sym">(</span>mask cell<span class="hl sym">) =</span> solutions' board <span class="hl sym">(</span>nextCell cell<span class="hl sym">)</span> colorsLeft usedMasks
      <span class="hl sym">|</span> otherwise <span class="hl sym">=</span> do
         color <span class="hl sym">&lt;-</span> colorsLeft
         mask <span class="hl sym">&lt;-</span> legal board $ bitmasksWithColorAtCell<span class="hl sym">!</span>color<span class="hl sym">!</span>cell
         solutions' <span class="hl sym">(</span>board .<span class="hl sym">|</span>. mask<span class="hl sym">) (</span>nextCell cell<span class="hl sym">) (</span>colorsLeft \\ <span class="hl sym">[</span>color<span class="hl sym">]) ((</span>color<span class="hl sym">,</span> mask<span class="hl sym">):</span>usedMasks<span class="hl sym">)</span>

stringOfColorMasks <span class="hl sym">:: [(</span>Color<span class="hl sym">,</span> Mask<span class="hl sym">)] -&gt;</span> String
stringOfColorMasks colorMasks <span class="hl sym">=</span> 
   tail $ show $ <span class="hl sym">(+) (</span><span class="hl num">10</span>^<span class="hl sym">(</span>width<span class="hl sym">*</span>height<span class="hl sym">))</span> $ 
      sum $ map <span class="hl sym">(</span>\<span class="hl sym">(</span>c<span class="hl sym">,</span>m<span class="hl sym">) -&gt; ((</span>fromIntegral c<span class="hl sym">) * (</span>read $ showIntAtBase <span class="hl num">2</span> intToDigit m <span class="hl str">&quot;&quot;</span><span class="hl sym">)) ::</span> Integer<span class="hl sym">)</span> colorMasks

invertString <span class="hl sym">::</span> String <span class="hl sym">-&gt;</span> String
invertString s <span class="hl sym">= [</span>s<span class="hl sym">!!(</span>width<span class="hl sym">-</span>x<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl sym">+ (</span>height<span class="hl sym">-</span>y<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)*</span>width<span class="hl sym">) |</span> y <span class="hl sym">&lt;- [</span><span class="hl num">0</span>..height<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">],</span> x <span class="hl sym">&lt;- [</span><span class="hl num">0</span> .. width<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">]]</span>

printSolution <span class="hl sym">::</span> String <span class="hl sym">-&gt;</span> IO <span class="hl sym">()</span>
printSolution solution <span class="hl sym">=</span> printSolution' <span class="hl num">0</span> solution where
   printSolution' cell <span class="hl sym">[] =</span> return <span class="hl sym">()</span>
   printSolution' cell <span class="hl sym">(</span>s<span class="hl sym">:</span>ss<span class="hl sym">) =</span> do
      putStr $ s<span class="hl sym">:</span><span class="hl str">&quot; &quot;</span>
      case mod <span class="hl sym">(</span>cell<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span> width of
         <span class="hl num">0</span> <span class="hl sym">-&gt;</span> case mod <span class="hl sym">(</span>cell<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) (</span><span class="hl num">2</span><span class="hl sym">*</span>width<span class="hl sym">)</span> of
            <span class="hl num">0</span> <span class="hl sym">-&gt;</span> putStr <span class="hl str">&quot;\n&quot;</span>
            _ <span class="hl sym">-&gt;</span> putStr <span class="hl str">&quot;\n &quot;</span>
         _ <span class="hl sym">-&gt;</span> return <span class="hl sym">()</span>
      
      printSolution' <span class="hl sym">(</span>cell<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span> ss

main <span class="hl sym">=</span> do 
   <span class="hl sym">(</span>n <span class="hl sym">::</span> Int<span class="hl sym">) &lt;-</span> return.read.head <span class="hl sym">=&lt;&lt;</span> getArgs
   let nsolutions <span class="hl sym">=</span> take n solutions
   putStrLn $ <span class="hl sym">(</span>show $ length nsolutions<span class="hl sym">) ++</span> <span class="hl str">&quot; solutions found\n&quot;</span>
   printSolution $ minimum nsolutions
   putStr <span class="hl str">&quot;\n&quot;</span>
   printSolution $ maximum nsolutions
   putStr <span class="hl str">&quot;\n&quot;</span>
