<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Isaac Gouy, transliterated from Rex Kerr's Scala program</span>
<span class="hl com">*/</span>

<span class="hl kwa">using</span> System<span class="hl sym">;</span>

<span class="hl kwa">class</span> FannkuchRedux
<span class="hl sym">{</span>
   <span class="hl kwa">public static</span> <span class="hl kwb">int</span> <span class="hl kwd">fannkuch</span><span class="hl sym">(</span><span class="hl kwb">int</span> n<span class="hl sym">) {</span>
      <span class="hl kwb">int</span><span class="hl sym">[]</span> perm <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">int</span><span class="hl sym">[</span>n<span class="hl sym">],</span> perm1 <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">int</span><span class="hl sym">[</span>n<span class="hl sym">],</span> count <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">int</span><span class="hl sym">[</span>n<span class="hl sym">];</span>
      <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwb">int</span> j<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> j<span class="hl sym">&lt;</span>n<span class="hl sym">;</span> j<span class="hl sym">++)</span> perm1<span class="hl sym">[</span>j<span class="hl sym">] =</span> j<span class="hl sym">;</span>
      <span class="hl kwb">int</span> f <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> k <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> r <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> flips <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> nperm <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> checksum <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

      r <span class="hl sym">=</span> n<span class="hl sym">;</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>r<span class="hl sym">&gt;</span><span class="hl num">0</span><span class="hl sym">) {</span>
         i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         <span class="hl kwa">while</span> <span class="hl sym">(</span>r <span class="hl sym">!=</span> <span class="hl num">1</span><span class="hl sym">) {</span> count<span class="hl sym">[</span>r<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">] =</span> r<span class="hl sym">;</span> r <span class="hl sym">-=</span> <span class="hl num">1</span><span class="hl sym">; }</span>
         <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> n<span class="hl sym">) {</span> perm<span class="hl sym">[</span>i<span class="hl sym">] =</span> perm1<span class="hl sym">[</span>i<span class="hl sym">];</span> i <span class="hl sym">+=</span> <span class="hl num">1</span><span class="hl sym">; }</span>
      
         <span class="hl slc">// Count flips and update max  and checksum</span>
         f <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         k <span class="hl sym">=</span> perm<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
         <span class="hl kwa">while</span> <span class="hl sym">(</span>k <span class="hl sym">!=</span> <span class="hl num">0</span><span class="hl sym">) {</span>
           i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
           <span class="hl kwa">while</span> <span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>i <span class="hl sym">&lt;</span> k<span class="hl sym">) {</span>
             var t <span class="hl sym">=</span> perm<span class="hl sym">[</span>i<span class="hl sym">];</span> perm<span class="hl sym">[</span>i<span class="hl sym">] =</span> perm<span class="hl sym">[</span>k<span class="hl sym">-</span>i<span class="hl sym">];</span> perm<span class="hl sym">[</span>k<span class="hl sym">-</span>i<span class="hl sym">] =</span> t<span class="hl sym">;</span>
             i <span class="hl sym">+=</span> <span class="hl num">1</span><span class="hl sym">;</span>
           <span class="hl sym">}</span>
           k <span class="hl sym">=</span> perm<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
           f <span class="hl sym">+=</span> <span class="hl num">1</span><span class="hl sym">;</span>
         <span class="hl sym">}</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>f<span class="hl sym">&gt;</span>flips<span class="hl sym">)</span> flips <span class="hl sym">=</span> f<span class="hl sym">;</span>
         <span class="hl kwa">if</span> <span class="hl sym">((</span>nperm<span class="hl sym">&amp;</span><span class="hl num">0x1</span><span class="hl sym">)==</span><span class="hl num">0</span><span class="hl sym">)</span> checksum <span class="hl sym">+=</span> f<span class="hl sym">;</span>
         <span class="hl kwa">else</span> checksum <span class="hl sym">-=</span> f<span class="hl sym">;</span>
                      
         <span class="hl slc">// Use incremental change to generate another permutation</span>
         var go <span class="hl sym">=</span> <span class="hl kwa">true</span><span class="hl sym">;</span>
         <span class="hl kwa">while</span> <span class="hl sym">(</span>go<span class="hl sym">) {</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>r <span class="hl sym">==</span> n<span class="hl sym">) {</span>
               Console<span class="hl sym">.</span><span class="hl kwd">WriteLine</span><span class="hl sym">(</span>checksum<span class="hl sym">);</span>
               <span class="hl kwa">return</span> flips<span class="hl sym">;</span>
            <span class="hl sym">}</span>
            var p0 <span class="hl sym">=</span> perm1<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
            i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> r<span class="hl sym">) {</span>
               var j <span class="hl sym">=</span> i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">;</span>
               perm1<span class="hl sym">[</span>i<span class="hl sym">] =</span> perm1<span class="hl sym">[</span>j<span class="hl sym">];</span>
               i <span class="hl sym">=</span> j<span class="hl sym">;</span>
            <span class="hl sym">}</span>
            perm1<span class="hl sym">[</span>r<span class="hl sym">] =</span> p0<span class="hl sym">;</span>

            count<span class="hl sym">[</span>r<span class="hl sym">] -=</span> <span class="hl num">1</span><span class="hl sym">;</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>count<span class="hl sym">[</span>r<span class="hl sym">] &gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> go <span class="hl sym">=</span> <span class="hl kwa">false</span><span class="hl sym">;</span>
            <span class="hl kwa">else</span> r <span class="hl sym">+=</span> <span class="hl num">1</span><span class="hl sym">;</span>
         <span class="hl sym">}</span>
         nperm <span class="hl sym">+=</span> <span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">return</span> flips<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">static</span> <span class="hl kwb">void</span> <span class="hl kwd">Main</span><span class="hl sym">(</span><span class="hl kwb">string</span><span class="hl sym">[]</span> args<span class="hl sym">){</span>
      <span class="hl kwb">int</span> n <span class="hl sym">=</span> <span class="hl num">7</span><span class="hl sym">;</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>args<span class="hl sym">.</span>Length <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> n <span class="hl sym">=</span> Int32<span class="hl sym">.</span><span class="hl kwd">Parse</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>
      Console<span class="hl sym">.</span><span class="hl kwd">WriteLine</span><span class="hl sym">(</span><span class="hl str">&quot;Pfannkuchen({0}) = {1}&quot;</span><span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl kwd">fannkuch</span><span class="hl sym">(</span>n<span class="hl sym">));</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>
