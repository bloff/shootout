<span class="hl slc">;;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; derived from the Chicken variant by Anthony Borla</span>
<span class="hl slc">;;; contributed by Matthew Flatt</span>

#lang scheme<span class="hl sym">/</span>base
<span class="hl sym">(</span>require scheme<span class="hl sym">/</span>cmdline<span class="hl sym">)</span>

<span class="hl sym">(</span>define <span class="hl sym">+</span>alu<span class="hl sym">+</span>
  <span class="hl sym">(</span>bytes<span class="hl sym">-</span>append
   #<span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>
   #<span class="hl str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>
   #<span class="hl str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>
   #<span class="hl str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>
   #<span class="hl str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>
   #<span class="hl str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>
   #<span class="hl str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="hl sym">))</span>

<span class="hl sym">(</span>define <span class="hl sym">+</span>iub<span class="hl sym">+</span>
  <span class="hl sym">(</span>list
   <span class="hl sym">'(</span>#\a . <span class="hl num">0.27</span><span class="hl sym">) '(</span>#\c . <span class="hl num">0.12</span><span class="hl sym">) '(</span>#\g . <span class="hl num">0.12</span><span class="hl sym">) '(</span>#\t . <span class="hl num">0.27</span><span class="hl sym">) '(</span>#\B . <span class="hl num">0.02</span><span class="hl sym">)</span>
   <span class="hl sym">'(</span>#\D . <span class="hl num">0.02</span><span class="hl sym">) '(</span>#\H . <span class="hl num">0.02</span><span class="hl sym">) '(</span>#\K . <span class="hl num">0.02</span><span class="hl sym">) '(</span>#\M . <span class="hl num">0.02</span><span class="hl sym">) '(</span>#\N . <span class="hl num">0.02</span><span class="hl sym">)</span>
   <span class="hl sym">'(</span>#\R . <span class="hl num">0.02</span><span class="hl sym">) '(</span>#\S . <span class="hl num">0.02</span><span class="hl sym">) '(</span>#\V . <span class="hl num">0.02</span><span class="hl sym">) '(</span>#\W . <span class="hl num">0.02</span><span class="hl sym">) '(</span>#\Y . <span class="hl num">0.02</span><span class="hl sym">)))</span>

<span class="hl sym">(</span>define <span class="hl sym">+</span>homosapien<span class="hl sym">+</span>
  <span class="hl sym">(</span>list
   <span class="hl sym">'(</span>#\a . <span class="hl num">0.3029549426680</span><span class="hl sym">) '(</span>#\c . <span class="hl num">0.1979883004921</span><span class="hl sym">)</span>
   <span class="hl sym">'(</span>#\g . <span class="hl num">0.1975473066391</span><span class="hl sym">) '(</span>#\t . <span class="hl num">0.3015094502008</span><span class="hl sym">)))</span>

<span class="hl slc">;; -------------</span>

<span class="hl sym">(</span>define <span class="hl sym">+</span>line<span class="hl sym">-</span>size<span class="hl sym">+</span> <span class="hl num">60</span><span class="hl sym">)</span>

<span class="hl slc">;; -------------------------------</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>make<span class="hl sym">-</span>random seed<span class="hl sym">)</span>
  <span class="hl sym">(</span>let<span class="hl sym">* ((</span>ia <span class="hl num">3877</span><span class="hl sym">) (</span>ic <span class="hl num">29573</span><span class="hl sym">) (</span>im <span class="hl num">139968</span><span class="hl sym">) (</span>last seed<span class="hl sym">))</span>
    <span class="hl sym">(</span>lambda <span class="hl sym">(</span>max<span class="hl sym">)</span>
      <span class="hl sym">(</span>set<span class="hl sym">!</span> last <span class="hl sym">(</span>modulo <span class="hl sym">(+</span> ic <span class="hl sym">(*</span> last ia<span class="hl sym">))</span> im<span class="hl sym">))</span>
      <span class="hl sym">(/ (*</span> max last<span class="hl sym">)</span> im<span class="hl sym">) )))</span>

<span class="hl slc">;; -------------------------------</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>make<span class="hl sym">-</span>cumulative<span class="hl sym">-</span>table frequency<span class="hl sym">-</span>table<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">([</span>cumulative <span class="hl num">0.0</span><span class="hl sym">])</span>
    <span class="hl sym">(</span>for<span class="hl sym">/</span>list <span class="hl sym">([</span>x frequency<span class="hl sym">-</span>table<span class="hl sym">])</span>
      <span class="hl sym">(</span>set<span class="hl sym">!</span> cumulative <span class="hl sym">(+</span> cumulative <span class="hl sym">(</span>cdr x<span class="hl sym">)))</span> 
      <span class="hl sym">(</span>cons <span class="hl sym">(</span>char<span class="hl sym">-&gt;</span>integer <span class="hl sym">(</span>car x<span class="hl sym">))</span> cumulative<span class="hl sym">))))</span>

<span class="hl slc">;; -------------</span>

<span class="hl sym">(</span>define random<span class="hl sym">-</span>next <span class="hl sym">(</span>make<span class="hl sym">-</span>random <span class="hl num">42</span><span class="hl sym">))</span>
<span class="hl sym">(</span>define <span class="hl sym">+</span>segmarker<span class="hl sym">+</span> <span class="hl str">&quot;&gt;&quot;</span><span class="hl sym">)</span>

<span class="hl slc">;; -------------</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>select<span class="hl sym">-</span>random cumulative<span class="hl sym">-</span>table<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>rvalue <span class="hl sym">(</span>random<span class="hl sym">-</span>next <span class="hl num">1.0</span><span class="hl sym">)))</span>
    <span class="hl sym">(</span>let select<span class="hl sym">-</span>over<span class="hl sym">-</span>threshold <span class="hl sym">([</span>table cumulative<span class="hl sym">-</span>table<span class="hl sym">])</span>
      <span class="hl sym">(</span>if <span class="hl sym">(&lt;=</span> rvalue <span class="hl sym">(</span>cdar table<span class="hl sym">))</span>
          <span class="hl sym">(</span>caar table<span class="hl sym">)</span>
          <span class="hl sym">(</span>select<span class="hl sym">-</span>over<span class="hl sym">-</span>threshold <span class="hl sym">(</span>cdr table<span class="hl sym">))))))</span>

<span class="hl slc">;; -------------</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>repeat<span class="hl sym">-</span>fasta id desc n_ sequence line<span class="hl sym">-</span>length<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>seqlen <span class="hl sym">(</span>bytes<span class="hl sym">-</span>length sequence<span class="hl sym">))</span>
        <span class="hl sym">(</span>out <span class="hl sym">(</span>current<span class="hl sym">-</span>output<span class="hl sym">-</span>port<span class="hl sym">)))</span>
    <span class="hl sym">(</span>display <span class="hl sym">(</span>string<span class="hl sym">-</span>append <span class="hl sym">+</span>segmarker<span class="hl sym">+</span> id <span class="hl str">&quot; &quot;</span> desc <span class="hl str">&quot;</span><span class="hl esc">\</span><span class="hl str">n&quot;</span><span class="hl sym">)</span> out<span class="hl sym">)</span>
    <span class="hl sym">(</span>let loop<span class="hl sym">-</span>o <span class="hl sym">((</span>n n_<span class="hl sym">) (</span>k <span class="hl num">0</span><span class="hl sym">))</span>
      <span class="hl sym">(</span>unless <span class="hl sym">(&lt;=</span> n <span class="hl num">0</span><span class="hl sym">)</span> 
        <span class="hl sym">(</span>let <span class="hl sym">((</span>m <span class="hl sym">(</span>min n line<span class="hl sym">-</span>length<span class="hl sym">)))</span>
          <span class="hl sym">(</span>let loop<span class="hl sym">-</span>i <span class="hl sym">((</span>i <span class="hl num">0</span><span class="hl sym">) (</span>k k<span class="hl sym">))</span>
            <span class="hl sym">(</span>if <span class="hl sym">(&gt;=</span> i m<span class="hl sym">)</span> 
                <span class="hl sym">(</span>begin
                  <span class="hl sym">(</span>newline out<span class="hl sym">)</span>
                  <span class="hl sym">(</span>loop<span class="hl sym">-</span>o <span class="hl sym">(-</span> n line<span class="hl sym">-</span>length<span class="hl sym">)</span> k<span class="hl sym">))</span>
                <span class="hl sym">(</span>let <span class="hl sym">([</span>k <span class="hl sym">(</span>if <span class="hl sym">(=</span> k seqlen<span class="hl sym">)</span> <span class="hl num">0</span> k<span class="hl sym">)])</span>
                  <span class="hl sym">(</span>write<span class="hl sym">-</span>byte <span class="hl sym">(</span>bytes<span class="hl sym">-</span>ref sequence k<span class="hl sym">)</span> out<span class="hl sym">)</span>
                  <span class="hl sym">(</span>loop<span class="hl sym">-</span>i <span class="hl sym">(</span>add1 i<span class="hl sym">) (</span>add1 k<span class="hl sym">))))))))))</span>

<span class="hl slc">;; -------------</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>random<span class="hl sym">-</span>fasta id desc n_ cumulative<span class="hl sym">-</span>table line<span class="hl sym">-</span>length<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>out <span class="hl sym">(</span>current<span class="hl sym">-</span>output<span class="hl sym">-</span>port<span class="hl sym">)))</span>
    <span class="hl sym">(</span>display <span class="hl sym">(</span>string<span class="hl sym">-</span>append <span class="hl sym">+</span>segmarker<span class="hl sym">+</span> id <span class="hl str">&quot; &quot;</span> desc <span class="hl str">&quot;</span><span class="hl esc">\</span><span class="hl str">n&quot;</span><span class="hl sym">)</span> out<span class="hl sym">)</span>
    <span class="hl sym">(</span>let loop<span class="hl sym">-</span>o <span class="hl sym">((</span>n n_<span class="hl sym">))</span>
      <span class="hl sym">(</span>unless <span class="hl sym">(&lt;=</span> n <span class="hl num">0</span><span class="hl sym">)</span>
        <span class="hl sym">(</span>for <span class="hl sym">([</span>i <span class="hl sym">(</span>in<span class="hl sym">-</span>range <span class="hl sym">(</span>min n line<span class="hl sym">-</span>length<span class="hl sym">))])</span>
          <span class="hl sym">(</span>write<span class="hl sym">-</span>byte <span class="hl sym">(</span>select<span class="hl sym">-</span>random cumulative<span class="hl sym">-</span>table<span class="hl sym">)</span> out<span class="hl sym">))</span>
        <span class="hl sym">(</span>newline out<span class="hl sym">)</span>
        <span class="hl sym">(</span>loop<span class="hl sym">-</span>o <span class="hl sym">(-</span> n line<span class="hl sym">-</span>length<span class="hl sym">))))))</span>

<span class="hl slc">;; -------------------------------</span>
  
<span class="hl sym">(</span>let <span class="hl sym">((</span>n <span class="hl sym">(</span>command<span class="hl sym">-</span>line #<span class="hl sym">:</span>args <span class="hl sym">(</span>n<span class="hl sym">) (</span>string<span class="hl sym">-&gt;</span>number n<span class="hl sym">))))</span>
    
  <span class="hl sym">(</span>repeat<span class="hl sym">-</span>fasta <span class="hl str">&quot;ONE&quot;</span> <span class="hl str">&quot;Homo sapiens alu&quot;</span> <span class="hl sym">(*</span> n <span class="hl num">2</span><span class="hl sym">) +</span>alu<span class="hl sym">+ +</span>line<span class="hl sym">-</span>size<span class="hl sym">+)</span>
  
  <span class="hl sym">(</span>random<span class="hl sym">-</span>fasta <span class="hl str">&quot;TWO&quot;</span> <span class="hl str">&quot;IUB ambiguity codes&quot;</span> <span class="hl sym">(*</span> n <span class="hl num">3</span><span class="hl sym">)</span>
                <span class="hl sym">(</span>make<span class="hl sym">-</span>cumulative<span class="hl sym">-</span>table <span class="hl sym">+</span>iub<span class="hl sym">+) +</span>line<span class="hl sym">-</span>size<span class="hl sym">+)</span>
  
  <span class="hl sym">(</span>random<span class="hl sym">-</span>fasta <span class="hl str">&quot;THREE&quot;</span> <span class="hl str">&quot;Homo sapiens frequency&quot;</span> <span class="hl sym">(*</span> n <span class="hl num">5</span><span class="hl sym">)</span>
                <span class="hl sym">(</span>make<span class="hl sym">-</span>cumulative<span class="hl sym">-</span>table <span class="hl sym">+</span>homosapien<span class="hl sym">+) +</span>line<span class="hl sym">-</span>size<span class="hl sym">+))</span>
