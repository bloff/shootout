<span class="hl com">(*</span>
<span class="hl com">** The Computer Language Benchmarks Game</span>
<span class="hl com">** http://shootout.alioth.debian.org/</span>
<span class="hl com">**</span>
<span class="hl com">** contributed by Hongwei Xi</span>
<span class="hl com">**</span>
<span class="hl com">** compilation command:</span>
<span class="hl com">**   atscc -D_ATS_MULTITHREAD -O3 binary-trees_smp.dats -o binary-trees_smp -lpthread -D_ATS_GCATS</span>
<span class="hl com">*)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl sym">%{</span>^

<span class="hl dir">#include</span> <span class="hl dstr">&quot;libc/CATS/pthread_locks.cats&quot;</span><span class="hl dir"></span>

<span class="hl sym">%}</span>

<span class="hl com">(* ****** ****** *)</span>

staload <span class="hl str">&quot;libc/SATS/pthread.sats&quot;</span>
staload <span class="hl str">&quot;libc/SATS/pthread_locks.sats&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">dataviewtype</span> tree <span class="hl sym">(</span>int<span class="hl sym">) =</span>
  Nil<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">) | {</span>n1<span class="hl sym">,</span>n2<span class="hl sym">:</span>two<span class="hl sym">}</span> Node<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">of</span> <span class="hl sym">(</span>tree n1<span class="hl sym">,</span> int<span class="hl sym">,</span> tree n2<span class="hl sym">)</span>

<span class="hl kwa">viewtypedef</span> Tree <span class="hl sym">= [</span>n<span class="hl sym">:</span>two<span class="hl sym">]</span> tree n

<span class="hl kwa">fun</span> make <span class="hl sym">(</span>d<span class="hl sym">:</span> int<span class="hl sym">,</span> i<span class="hl sym">:</span> int<span class="hl sym">):</span> Tree <span class="hl sym">=</span>
  <span class="hl kwa">if</span> d <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
    <span class="hl kwa">let val</span> d1 <span class="hl sym">=</span> d<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl kwa">and</span> i2 <span class="hl sym">=</span> i <span class="hl sym">&lt;&lt;</span> <span class="hl num">1</span> <span class="hl kwa">in</span>
      Node <span class="hl sym">(</span>make <span class="hl sym">(</span>d1<span class="hl sym">,</span> i2 <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">),</span> i<span class="hl sym">,</span> make <span class="hl sym">(</span>d1<span class="hl sym">,</span> i2<span class="hl sym">))</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">else</span> Node <span class="hl sym">(</span>Nil <span class="hl sym">(),</span> i<span class="hl sym">,</span> Nil <span class="hl sym">())</span>

<span class="hl kwa">fun</span> check_and_free <span class="hl sym">(</span>t<span class="hl sym">:</span> Tree<span class="hl sym">):&lt;!</span>ntm<span class="hl sym">&gt;</span> int <span class="hl sym">=</span>  <span class="hl kwa">case</span><span class="hl sym">+</span> t <span class="hl kwa">of</span>
  <span class="hl sym">|</span> ~Node <span class="hl sym">(</span>tl<span class="hl sym">,</span> i<span class="hl sym">,</span> tr<span class="hl sym">) =&gt;</span> i <span class="hl sym">+</span> check_and_free tl <span class="hl sym">-</span> check_and_free tr
  <span class="hl sym">|</span> ~Nil <span class="hl sym">() =&gt;</span> <span class="hl num">0</span>

<span class="hl kwa">fun</span> check <span class="hl sym">(</span>t<span class="hl sym">: !</span>Tree<span class="hl sym">):&lt;!</span>ntm<span class="hl sym">&gt;</span> int <span class="hl sym">=</span>  <span class="hl kwa">case</span><span class="hl sym">+</span> t <span class="hl kwa">of</span>
  <span class="hl sym">|</span> Node <span class="hl sym">(!</span>tl<span class="hl sym">,</span> i<span class="hl sym">, !</span>tr<span class="hl sym">) =&gt;</span>
    <span class="hl kwa">let val</span> ans <span class="hl sym">=</span> i <span class="hl sym">+</span> check <span class="hl sym">(!</span>tl<span class="hl sym">) -</span> check <span class="hl sym">(!</span>tr<span class="hl sym">)</span> <span class="hl kwa">in</span> <span class="hl sym">(</span>fold&#64; t<span class="hl sym">;</span> ans<span class="hl sym">)</span> <span class="hl kwa">end</span>
  <span class="hl sym">|</span> Nil <span class="hl sym">() =&gt; (</span>fold&#64; t<span class="hl sym">;</span> <span class="hl num">0</span><span class="hl sym">)</span>

<span class="hl kwa">fun</span> check_ref <span class="hl sym">(</span>r<span class="hl sym">:</span> ref Tree<span class="hl sym">):</span> int <span class="hl sym">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> <span class="hl sym">(</span>pf_box <span class="hl sym">|</span> p<span class="hl sym">) =</span> ref_get_view_ptr r
  <span class="hl kwa">prval</span> vbox pf <span class="hl sym">=</span> pf_box
<span class="hl kwa">in</span>
  check <span class="hl sym">!</span>p
<span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>check_ref<span class="hl sym">]</span>

<span class="hl sym">//</span>

<span class="hl dir">#define min_depth 4 // val min_depth: Nat = 4</span>

<span class="hl sym">//</span>

<span class="hl kwa">fn</span> stretch <span class="hl sym">(</span>max_depth<span class="hl sym">:</span> Nat<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl kwa">let</span>
   <span class="hl kwa">val</span> stretch_depth <span class="hl sym">=</span> max_depth <span class="hl sym">+</span> <span class="hl num">1</span>
   <span class="hl kwa">val</span> t <span class="hl sym">=</span> make <span class="hl sym">(</span>stretch_depth<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">)</span>
   <span class="hl kwa">val</span> c <span class="hl sym">=</span> check_and_free <span class="hl sym">(</span>t<span class="hl sym">)</span>
<span class="hl kwa">in</span>
   printf <span class="hl sym">(</span><span class="hl str">&quot;stretch tree of depth %i</span><span class="hl esc">\t</span> <span class="hl str">check: %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> &#64;<span class="hl sym">(</span>stretch_depth<span class="hl sym">,</span> c<span class="hl sym">));</span>
<span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>stretch<span class="hl sym">]</span>

<span class="hl kwa">extern typedef</span> <span class="hl str">&quot;Tree&quot;</span> <span class="hl sym">=</span> Tree
<span class="hl kwa">extern fun</span> ref_tree <span class="hl sym">(</span>t<span class="hl sym">:</span> Tree<span class="hl sym">):</span> ref Tree <span class="hl sym">=</span> <span class="hl str">&quot;ref_tree&quot;</span>

<span class="hl sym">%{</span>

ats_ref_type ref_tree <span class="hl sym">(</span>ats_ptr_type t<span class="hl sym">) {</span>
  Tree<span class="hl sym">*</span> r <span class="hl sym">;</span>
  r <span class="hl sym">=</span> ATS_MALLOC <span class="hl sym">(</span>sizeof<span class="hl sym">(</span>Tree<span class="hl sym">)) ;</span>
  <span class="hl sym">*</span>r <span class="hl sym">= (</span>Tree<span class="hl sym">)</span>t <span class="hl sym">;</span>
  return r <span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl sym">%}</span>

<span class="hl kwa">fn</span> long_lived_tree_make
  <span class="hl sym">(</span>max_depth<span class="hl sym">:</span> Nat<span class="hl sym">):</span> ref Tree <span class="hl sym">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> t <span class="hl sym">=</span> make <span class="hl sym">(</span>max_depth<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">)</span>
  <span class="hl kwa">val</span> t_r <span class="hl sym">=</span> ref_tree <span class="hl sym">(</span>t<span class="hl sym">)</span>
<span class="hl kwa">in</span>
  t_r
<span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>long_lived_tree_make<span class="hl sym">]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl sym">%{</span>^

static inline
ats_ptr_type int_make <span class="hl sym">() {</span>
  return malloc<span class="hl sym">(</span>sizeof<span class="hl sym">(</span>ats_int_type<span class="hl sym">)) ;</span>
<span class="hl sym">}</span>

static inline
ats_void_type int_free <span class="hl sym">(</span>ats_ptr_type p<span class="hl sym">) {</span> free <span class="hl sym">(</span>p<span class="hl sym">);</span> return <span class="hl sym">; }</span>

<span class="hl sym">%}</span>

<span class="hl kwa">extern fun</span> int_make <span class="hl sym">(): [</span>l<span class="hl sym">:</span>addr<span class="hl sym">] (</span>int &#64; l <span class="hl sym">|</span> ptr l<span class="hl sym">) =</span> <span class="hl str">&quot;int_make&quot;</span>
<span class="hl kwa">extern fun</span> int_free <span class="hl sym">{</span>l<span class="hl sym">:</span>addr<span class="hl sym">} (</span>pf<span class="hl sym">:</span> int &#64; l <span class="hl sym">|</span> p<span class="hl sym">:</span> ptr l<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl str">&quot;int_free&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">viewdef</span> int3_v
  <span class="hl sym">(</span>l_n<span class="hl sym">:</span>addr<span class="hl sym">,</span> l_d<span class="hl sym">:</span>addr<span class="hl sym">,</span> l_c<span class="hl sym">:</span>addr<span class="hl sym">) =</span> &#64;<span class="hl sym">(</span>int &#64; l_n<span class="hl sym">,</span> int &#64; l_d<span class="hl sym">,</span> int &#64; l_c<span class="hl sym">)</span>
<span class="hl kwa">viewtypedef</span> lock
  <span class="hl sym">(</span>l_n<span class="hl sym">:</span>addr<span class="hl sym">,</span> l_d<span class="hl sym">:</span>addr<span class="hl sym">,</span> l_c<span class="hl sym">:</span>addr<span class="hl sym">) =</span> uplock <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> int3_v <span class="hl sym">(</span>l_n<span class="hl sym">,</span> l_d<span class="hl sym">,</span> l_c<span class="hl sym">))</span>
<span class="hl kwa">viewtypedef</span> ticket
  <span class="hl sym">(</span>l_n<span class="hl sym">:</span>addr<span class="hl sym">,</span> l_d<span class="hl sym">:</span>addr<span class="hl sym">,</span> l_c<span class="hl sym">:</span>addr<span class="hl sym">) =</span> upticket <span class="hl sym">(</span>int3_v <span class="hl sym">(</span>l_n<span class="hl sym">,</span> l_d<span class="hl sym">,</span> l_c<span class="hl sym">))</span>

<span class="hl kwa">dataviewtype</span> locklst <span class="hl sym">=</span>
  <span class="hl sym">|</span> locklst_nil <span class="hl kwa">of</span> <span class="hl sym">()</span>
  <span class="hl sym">| {</span>l_n<span class="hl sym">,</span>l_d<span class="hl sym">,</span>l_c<span class="hl sym">:</span>addr<span class="hl sym">}</span> locklst_cons <span class="hl kwa">of</span>
       <span class="hl sym">(</span>ptr l_n<span class="hl sym">,</span> ptr l_d<span class="hl sym">,</span> ptr l_c<span class="hl sym">,</span> lock <span class="hl sym">(</span>l_n<span class="hl sym">,</span> l_d<span class="hl sym">,</span> l_c<span class="hl sym">),</span> locklst<span class="hl sym">)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">fun</span> worker <span class="hl sym">{</span>l_n<span class="hl sym">,</span>l_d<span class="hl sym">,</span>l_c<span class="hl sym">:</span>addr<span class="hl sym">} {</span>d<span class="hl sym">,</span>md<span class="hl sym">:</span>nat <span class="hl sym">|</span> d <span class="hl sym">&lt;=</span> md<span class="hl sym">} (</span>
    pf_n<span class="hl sym">:</span> int &#64; l_n
  <span class="hl sym">,</span> pf_d<span class="hl sym">:</span> int &#64; l_d
  <span class="hl sym">,</span> pf_c<span class="hl sym">:</span> int &#64; l_c
  <span class="hl sym">|</span> tick<span class="hl sym">:</span> ticket <span class="hl sym">(</span>l_n<span class="hl sym">,</span> l_d<span class="hl sym">,</span> l_c<span class="hl sym">)</span>
  <span class="hl sym">,</span> p_n<span class="hl sym">:</span> ptr l_n<span class="hl sym">,</span> p_d<span class="hl sym">:</span> ptr l_d<span class="hl sym">,</span> p_c<span class="hl sym">:</span> ptr l_c
  <span class="hl sym">,</span> d<span class="hl sym">:</span> int d<span class="hl sym">,</span> max_depth<span class="hl sym">:</span> int md
  <span class="hl sym">) :</span> void <span class="hl sym">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> n <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>max_depth <span class="hl sym">-</span> d <span class="hl sym">+</span> min_depth<span class="hl sym">)</span>
  <span class="hl kwa">fun</span> loop <span class="hl sym">(</span>i<span class="hl sym">:</span> Nat<span class="hl sym">,</span> c<span class="hl sym">:</span> int<span class="hl sym">):&lt;</span>cloref1<span class="hl sym">&gt;</span> int <span class="hl sym">=</span>
    <span class="hl kwa">if</span> i <span class="hl sym">&lt;</span> n <span class="hl kwa">then let</span>
      <span class="hl kwa">val</span> t <span class="hl sym">=</span> make<span class="hl sym">(</span>d<span class="hl sym">,</span>  i<span class="hl sym">);</span> <span class="hl kwa">val</span> c1 <span class="hl sym">=</span> check_and_free t
      <span class="hl kwa">val</span> t <span class="hl sym">=</span> make<span class="hl sym">(</span>d<span class="hl sym">,</span> ~i<span class="hl sym">);</span> <span class="hl kwa">val</span> c2 <span class="hl sym">=</span> check_and_free t
    <span class="hl kwa">in</span>
      loop <span class="hl sym">(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> c <span class="hl sym">+</span> c1 <span class="hl sym">+</span> c2<span class="hl sym">)</span>
    <span class="hl kwa">end else begin</span>
      c <span class="hl sym">//</span> return value
    <span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span><span class="hl kwa">if</span><span class="hl sym">]</span>
  <span class="hl kwa">val</span> <span class="hl sym">() = !</span>p_n <span class="hl sym">:=</span> n
  <span class="hl kwa">val</span> <span class="hl sym">() = !</span>p_d <span class="hl sym">:=</span> d<span class="hl sym">;</span>
  <span class="hl kwa">val</span> <span class="hl sym">() = !</span>p_c <span class="hl sym">:=</span> loop <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">)</span>
  <span class="hl kwa">prval</span> pf <span class="hl sym">=</span> &#64;<span class="hl sym">(</span>pf_n<span class="hl sym">,</span> pf_d<span class="hl sym">,</span> pf_c<span class="hl sym">)</span>
<span class="hl kwa">in</span>
  pthread_upticket_upload_and_destroy <span class="hl sym">(</span>pf <span class="hl sym">|</span> tick<span class="hl sym">)</span>
<span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>worker<span class="hl sym">]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">fun</span> loop_depths
  <span class="hl sym">(</span>d<span class="hl sym">:</span> Nat<span class="hl sym">,</span> max_depth<span class="hl sym">:</span> Nat<span class="hl sym">,</span> res<span class="hl sym">: &amp;</span>locklst? <span class="hl sym">&gt;&gt;</span> locklst<span class="hl sym">):</span> void <span class="hl sym">=</span>
  <span class="hl kwa">if</span> d <span class="hl sym">&lt;=</span> max_depth <span class="hl kwa">then let</span>
    <span class="hl kwa">val</span> <span class="hl sym">[</span>l_n<span class="hl sym">:</span>addr<span class="hl sym">] (</span>pf_n <span class="hl sym">|</span> p_n<span class="hl sym">) =</span> int_make <span class="hl sym">()</span>
    <span class="hl kwa">val</span> <span class="hl sym">[</span>l_d<span class="hl sym">:</span>addr<span class="hl sym">] (</span>pf_d <span class="hl sym">|</span> p_d<span class="hl sym">) =</span> int_make <span class="hl sym">()</span>
    <span class="hl kwa">val</span> <span class="hl sym">[</span>l_c<span class="hl sym">:</span>addr<span class="hl sym">] (</span>pf_c <span class="hl sym">|</span> p_c<span class="hl sym">) =</span> int_make <span class="hl sym">()</span>
    <span class="hl kwa">viewdef</span> V <span class="hl sym">=</span> &#64;<span class="hl sym">(</span>int &#64; l_n<span class="hl sym">,</span> int &#64; l_d<span class="hl sym">,</span> int &#64; l_c<span class="hl sym">)</span>
    <span class="hl kwa">val</span> lock <span class="hl sym">=</span>  pthread_uplock_create <span class="hl sym">{</span>V<span class="hl sym">} ()</span>
    <span class="hl kwa">val</span> tick <span class="hl sym">=</span> pthread_upticket_create <span class="hl sym">{</span>V<span class="hl sym">} (</span>lock<span class="hl sym">)</span>
    <span class="hl kwa">val</span> <span class="hl sym">() =</span> pthread_create_detached_cloptr <span class="hl sym">(</span>
      <span class="hl kwa">lam</span> <span class="hl sym">() =&lt;</span>lin<span class="hl sym">,</span>cloptr1<span class="hl sym">&gt;</span> worker
        <span class="hl sym">(</span>pf_n<span class="hl sym">,</span> pf_d<span class="hl sym">,</span> pf_c <span class="hl sym">|</span> tick<span class="hl sym">,</span> p_n<span class="hl sym">,</span> p_d<span class="hl sym">,</span> p_c<span class="hl sym">,</span> d<span class="hl sym">,</span> max_depth<span class="hl sym">)</span>
    <span class="hl sym">) //</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>pthread_create_detached_cloptr<span class="hl sym">]</span>
    <span class="hl kwa">val</span> <span class="hl sym">() =</span> res <span class="hl sym">:=</span> locklst_cons <span class="hl sym">(</span>p_n<span class="hl sym">,</span> p_d<span class="hl sym">,</span> p_c<span class="hl sym">,</span> lock<span class="hl sym">,</span> ?<span class="hl sym">)</span>
    <span class="hl kwa">val</span><span class="hl sym">+</span> locklst_cons <span class="hl sym">(</span>_<span class="hl sym">,</span> _<span class="hl sym">,</span> _<span class="hl sym">,</span> _<span class="hl sym">, !</span>res1<span class="hl sym">) =</span> res
  <span class="hl kwa">in</span>
    loop_depths <span class="hl sym">(</span>d <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">,</span> max_depth<span class="hl sym">, !</span>res1<span class="hl sym">);</span> fold&#64; res
  <span class="hl kwa">end else begin</span>
    res <span class="hl sym">:=</span> locklst_nil <span class="hl sym">()</span>
  <span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span><span class="hl kwa">if</span><span class="hl sym">]</span>

<span class="hl kwa">fun</span> finishup <span class="hl sym">(</span>locks<span class="hl sym">:</span> locklst<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl kwa">case</span><span class="hl sym">+</span> locks <span class="hl kwa">of</span>
  <span class="hl sym">|</span> ~locklst_cons <span class="hl sym">(</span>p_n<span class="hl sym">,</span> p_d<span class="hl sym">,</span> p_c<span class="hl sym">,</span> lock<span class="hl sym">,</span> locks<span class="hl sym">) =&gt;</span> <span class="hl kwa">let</span>
      <span class="hl kwa">val</span> <span class="hl sym">(</span>pf <span class="hl sym">| ()) =</span> pthread_uplock_download <span class="hl sym">(</span>lock<span class="hl sym">)</span>
      <span class="hl kwa">prval</span> pf_n <span class="hl sym">=</span> pf<span class="hl num">.0</span> <span class="hl kwa">and</span> pf_d <span class="hl sym">=</span> pf<span class="hl num">.1</span> <span class="hl kwa">and</span> pf_c <span class="hl sym">=</span> pf<span class="hl num">.2</span>
      <span class="hl kwa">val</span> <span class="hl sym">() =</span> printf <span class="hl sym">(</span>
        <span class="hl str">&quot;%i</span><span class="hl esc">\t</span> <span class="hl str">trees of depth %i</span><span class="hl esc">\t</span> <span class="hl str">check: %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> &#64;<span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">* !</span>p_n<span class="hl sym">, !</span>p_d<span class="hl sym">, !</span>p_c<span class="hl sym">)</span>
      <span class="hl sym">) //</span> <span class="hl kwa">end of</span> printf
      <span class="hl kwa">val</span> <span class="hl sym">() =</span> int_free <span class="hl sym">(</span>pf_n <span class="hl sym">|</span> p_n<span class="hl sym">)</span>
      <span class="hl kwa">val</span> <span class="hl sym">() =</span> int_free <span class="hl sym">(</span>pf_d <span class="hl sym">|</span> p_d<span class="hl sym">)</span>
      <span class="hl kwa">val</span> <span class="hl sym">() =</span> int_free <span class="hl sym">(</span>pf_c <span class="hl sym">|</span> p_c<span class="hl sym">)</span>
    <span class="hl kwa">in</span>
      finishup <span class="hl sym">(</span>locks<span class="hl sym">)</span>
    <span class="hl kwa">end</span>
  <span class="hl sym">|</span> ~locklst_nil <span class="hl sym">() =&gt; ()</span>

<span class="hl kwa">implement</span> main <span class="hl sym">(</span>argc<span class="hl sym">,</span> argv<span class="hl sym">) =</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> assert_errmsg
    <span class="hl sym">(</span>argc <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">,</span> <span class="hl str">&quot;Exit: wrong command format!</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span>
  <span class="hl kwa">val</span> n <span class="hl sym">=</span> int1_of argv<span class="hl sym">.[</span><span class="hl num">1</span><span class="hl sym">]</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> assert_errmsg
    <span class="hl sym">(</span>n <span class="hl sym">&gt;=</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl str">&quot;The input integer needs to be a natural number.</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> gc_chunk_count_limit_set <span class="hl sym">(</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> <span class="hl num">15</span><span class="hl sym">) //</span> no max
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> gc_chunk_count_limit_max_set <span class="hl sym">(</span>~<span class="hl num">1</span><span class="hl sym">) //</span> no max
  <span class="hl kwa">val</span> max_depth <span class="hl sym">=</span> max <span class="hl sym">(</span>min_depth <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">,</span> n<span class="hl sym">)</span>
  <span class="hl kwa">var</span> res<span class="hl sym">:</span> locklst <span class="hl sym">//</span> uninitialized
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> loop_depths <span class="hl sym">(</span>min_depth<span class="hl sym">,</span> max_depth<span class="hl sym">,</span> res<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> stretch <span class="hl sym">(</span>max_depth<span class="hl sym">)</span>
  <span class="hl kwa">val</span> long_lived_tree <span class="hl sym">=</span> long_lived_tree_make <span class="hl sym">(</span>max_depth<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> finishup <span class="hl sym">(</span>res<span class="hl sym">)</span>
<span class="hl kwa">in</span>
  printf <span class="hl sym">(</span><span class="hl str">&quot;long lived tree of depth %i</span><span class="hl esc">\t</span> <span class="hl str">check: %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> &#64;<span class="hl sym">(</span>max_depth<span class="hl sym">,</span> check_ref long_lived_tree<span class="hl sym">))</span>
<span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>main<span class="hl sym">]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl com">(* end of [binary-tree.dats] *)</span>
