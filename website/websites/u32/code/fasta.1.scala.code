<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com">  http://shootout.alioth.debian.org/</span>
<span class="hl com">  contributed by Isaac Gouy</span>
<span class="hl com">  updated for 2.8 and modified by Rex Kerr</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> java<span class="hl sym">.</span>io<span class="hl sym">.</span>_

<span class="hl kwa">object</span> fasta <span class="hl sym">{</span>
  <span class="hl kwa">val</span> ALU <span class="hl sym">=</span>
    <span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span> <span class="hl sym">+</span>
    <span class="hl str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span> <span class="hl sym">+</span>
    <span class="hl str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span> <span class="hl sym">+</span>
    <span class="hl str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span> <span class="hl sym">+</span>
    <span class="hl str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span> <span class="hl sym">+</span>
    <span class="hl str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span> <span class="hl sym">+</span>
    <span class="hl str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>

  <span class="hl kwa">val</span> IUB <span class="hl sym">= (</span><span class="hl kwc">Array</span><span class="hl sym">( (</span><span class="hl str">'a'</span><span class="hl sym">,</span><span class="hl num">0.27</span><span class="hl sym">), (</span><span class="hl str">'c'</span><span class="hl sym">,</span><span class="hl num">0.12</span><span class="hl sym">), (</span><span class="hl str">'g'</span><span class="hl sym">,</span><span class="hl num">0.12</span><span class="hl sym">), (</span><span class="hl str">'t'</span><span class="hl sym">,</span><span class="hl num">0.27</span><span class="hl sym">) ) ++</span>
    <span class="hl str">&quot;BDHKMNRSVWY&quot;</span><span class="hl sym">.</span>map<span class="hl sym">(</span>c <span class="hl sym">=&gt; (</span>c<span class="hl sym">,</span><span class="hl num">0.02</span><span class="hl sym">))</span>
  <span class="hl sym">).</span>scanLeft<span class="hl sym">( (</span><span class="hl num">0</span><span class="hl sym">:</span><span class="hl kwc">Byte</span><span class="hl sym">,</span><span class="hl num">0.0</span><span class="hl sym">) )( (</span>l<span class="hl sym">,</span>r<span class="hl sym">) =&gt; (</span>r<span class="hl sym">.</span>_1<span class="hl sym">.</span>toByte<span class="hl sym">,</span> l<span class="hl sym">.</span>_2<span class="hl sym">+</span>r<span class="hl sym">.</span>_2<span class="hl sym">) ).</span>tail

  <span class="hl kwa">val</span> HomoSapiens <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">(</span>
    <span class="hl sym">(</span><span class="hl str">'a'</span><span class="hl sym">,</span> <span class="hl num">0.3029549426680</span><span class="hl sym">),</span>
    <span class="hl sym">(</span><span class="hl str">'c'</span><span class="hl sym">,</span> <span class="hl num">0.1979883004921</span><span class="hl sym">),</span>
    <span class="hl sym">(</span><span class="hl str">'g'</span><span class="hl sym">,</span> <span class="hl num">0.1975473066391</span><span class="hl sym">),</span>
    <span class="hl sym">(</span><span class="hl str">'t'</span><span class="hl sym">,</span> <span class="hl num">0.3015094502008</span><span class="hl sym">)</span>
  <span class="hl sym">).</span>scanLeft<span class="hl sym">( (</span><span class="hl num">0</span><span class="hl sym">:</span><span class="hl kwc">Byte</span><span class="hl sym">,</span><span class="hl num">0.0</span><span class="hl sym">) )( (</span>l<span class="hl sym">,</span>r<span class="hl sym">) =&gt; (</span>r<span class="hl sym">.</span>_1<span class="hl sym">.</span>toByte<span class="hl sym">,</span> l<span class="hl sym">.</span>_2<span class="hl sym">+</span>r<span class="hl sym">.</span>_2<span class="hl sym">) ).</span>tail

  <span class="hl kwa">def</span> main<span class="hl sym">(</span>args<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">String</span><span class="hl sym">]) = {</span>
    <span class="hl kwa">val</span> n <span class="hl sym">=</span> args<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">).</span>toInt
    <span class="hl kwa">val</span> s <span class="hl sym">=</span> <span class="hl kwa">new</span> FastaOutputStream<span class="hl sym">(</span><span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">)</span>

    s<span class="hl sym">.</span>writeDescription<span class="hl sym">(</span><span class="hl str">&quot;ONE Homo sapiens alu&quot;</span><span class="hl sym">)</span>
    s<span class="hl sym">.</span>writeRepeatingSequence<span class="hl sym">(</span>ALU<span class="hl sym">,</span>n<span class="hl sym">*</span><span class="hl num">2</span><span class="hl sym">)</span>

    s<span class="hl sym">.</span>writeDescription<span class="hl sym">(</span><span class="hl str">&quot;TWO IUB ambiguity codes&quot;</span><span class="hl sym">)</span>
    s<span class="hl sym">.</span>writeRandomSequence<span class="hl sym">(</span>IUB<span class="hl sym">,</span>n<span class="hl sym">*</span><span class="hl num">3</span><span class="hl sym">)</span>

    s<span class="hl sym">.</span>writeDescription<span class="hl sym">(</span><span class="hl str">&quot;THREE Homo sapiens frequency&quot;</span><span class="hl sym">)</span>
    s<span class="hl sym">.</span>writeRandomSequence<span class="hl sym">(</span>HomoSapiens<span class="hl sym">,</span>n<span class="hl sym">*</span><span class="hl num">5</span><span class="hl sym">)</span>

    s<span class="hl sym">.</span>close
  <span class="hl sym">}</span>
<span class="hl sym">}</span>


<span class="hl slc">// extend the Java BufferedOutputStream class</span>

<span class="hl kwa">class</span> FastaOutputStream<span class="hl sym">(</span>out<span class="hl sym">:</span> <span class="hl kwc">OutputStream</span><span class="hl sym">)</span> <span class="hl kwa">extends</span> <span class="hl kwc">BufferedOutputStream</span><span class="hl sym">(</span>out<span class="hl sym">) {</span>
  <span class="hl kwa">private val</span> LineLength <span class="hl sym">=</span> <span class="hl num">60</span>
  <span class="hl kwa">private val</span> nl <span class="hl sym">=</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">.</span>toByte

  <span class="hl kwa">def</span> writeDescription<span class="hl sym">(</span>desc<span class="hl sym">:</span> <span class="hl kwc">String</span><span class="hl sym">) = {</span> write<span class="hl sym">( (</span><span class="hl str">&quot;&gt;&quot;</span> <span class="hl sym">+</span> desc <span class="hl sym">+</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">).</span>getBytes <span class="hl sym">) }</span>

  <span class="hl kwa">def</span> writeRepeatingSequence<span class="hl sym">(</span>_alu<span class="hl sym">:</span> <span class="hl kwc">String</span><span class="hl sym">,</span> length<span class="hl sym">:</span> Int<span class="hl sym">) = {</span>
    <span class="hl kwa">val</span> alu <span class="hl sym">=</span> _alu<span class="hl sym">.</span>getBytes
    <span class="hl kwa">var</span> n <span class="hl sym">=</span> length<span class="hl sym">;</span> <span class="hl kwa">var</span> k <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> <span class="hl kwa">val</span> kn <span class="hl sym">=</span> alu<span class="hl sym">.</span>length<span class="hl sym">;</span>

    <span class="hl kwa">while</span> <span class="hl sym">(</span>n <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">) {</span>
      <span class="hl kwa">val</span> m <span class="hl sym">=</span> <span class="hl kwa">if</span> <span class="hl sym">(</span>n <span class="hl sym">&lt;</span> LineLength<span class="hl sym">)</span> n <span class="hl kwa">else</span> LineLength

      <span class="hl kwa">var</span> i <span class="hl sym">=</span> <span class="hl num">0</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> m<span class="hl sym">){</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>k <span class="hl sym">==</span> kn<span class="hl sym">)</span> k <span class="hl sym">=</span> <span class="hl num">0</span>
        <span class="hl kwa">val</span> b <span class="hl sym">=</span> alu<span class="hl sym">(</span>k<span class="hl sym">)</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>count <span class="hl sym">&lt;</span> buf<span class="hl sym">.</span>length<span class="hl sym">){</span> buf<span class="hl sym">(</span>count<span class="hl sym">) =</span> b<span class="hl sym">;</span> count <span class="hl sym">+=</span> <span class="hl num">1</span> <span class="hl sym">}</span>
        <span class="hl kwa">else</span> <span class="hl sym">{</span> write<span class="hl sym">(</span>b<span class="hl sym">) }</span> <span class="hl slc">// flush buffer</span>
        k <span class="hl sym">+=</span> <span class="hl num">1</span>
        i <span class="hl sym">+=</span> <span class="hl num">1</span>
      <span class="hl sym">}</span>

      write<span class="hl sym">(</span>nl<span class="hl sym">)</span>
      n <span class="hl sym">-=</span> LineLength
    <span class="hl sym">}</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">def</span> writeRandomSequence<span class="hl sym">(</span>distribution<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[(</span><span class="hl kwc">Byte</span><span class="hl sym">,</span><span class="hl kwc">Double</span><span class="hl sym">)],</span> length<span class="hl sym">:</span> Int<span class="hl sym">) = {</span>
    <span class="hl kwa">var</span> n <span class="hl sym">=</span> length
    <span class="hl kwa">while</span> <span class="hl sym">(</span>n <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">) {</span>
      <span class="hl kwa">val</span> m <span class="hl sym">=</span> <span class="hl kwa">if</span> <span class="hl sym">(</span>n <span class="hl sym">&lt;</span> LineLength<span class="hl sym">)</span> n <span class="hl kwa">else</span> LineLength

      <span class="hl kwa">var</span> i <span class="hl sym">=</span> <span class="hl num">0</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> m<span class="hl sym">){</span>
        <span class="hl kwa">val</span> b <span class="hl sym">=</span> selectRandom<span class="hl sym">(</span>distribution<span class="hl sym">)</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>count <span class="hl sym">&lt;</span> buf<span class="hl sym">.</span>length<span class="hl sym">) {</span> buf<span class="hl sym">(</span>count<span class="hl sym">) =</span> b<span class="hl sym">;</span> count <span class="hl sym">+=</span> <span class="hl num">1</span> <span class="hl sym">}</span>
        <span class="hl kwa">else</span> <span class="hl sym">{</span> write<span class="hl sym">(</span>b<span class="hl sym">) }</span> <span class="hl slc">// flush buffer</span>
        i <span class="hl sym">+=</span> <span class="hl num">1</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">if</span> <span class="hl sym">(</span>count <span class="hl sym">&lt;</span> buf<span class="hl sym">.</span>length<span class="hl sym">){</span> buf<span class="hl sym">(</span>count<span class="hl sym">) =</span> nl<span class="hl sym">;</span> count <span class="hl sym">+=</span> <span class="hl num">1</span> <span class="hl sym">}</span>
      <span class="hl kwa">else</span> <span class="hl sym">{</span> write<span class="hl sym">(</span>nl<span class="hl sym">) }</span> <span class="hl slc">// flush buffer</span>
      n <span class="hl sym">-=</span> LineLength
    <span class="hl sym">}</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">private def</span> selectRandom<span class="hl sym">(</span>distribution<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[(</span><span class="hl kwc">Byte</span><span class="hl sym">,</span><span class="hl kwc">Double</span><span class="hl sym">)]):</span> <span class="hl kwc">Byte</span> <span class="hl sym">= {</span>
    <span class="hl kwa">val</span> n <span class="hl sym">=</span> distribution<span class="hl sym">.</span>length
    <span class="hl kwa">val</span> r <span class="hl sym">=</span> RandomNumber scaledTo<span class="hl sym">(</span><span class="hl num">1.0</span><span class="hl sym">)</span>

    <span class="hl kwa">var</span> i <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> n<span class="hl sym">) {</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>r <span class="hl sym">&lt;</span> distribution<span class="hl sym">(</span>i<span class="hl sym">).</span>_2<span class="hl sym">)</span> <span class="hl kwa">return</span> distribution<span class="hl sym">(</span>i<span class="hl sym">).</span>_1
      i <span class="hl sym">=</span> i<span class="hl sym">+</span><span class="hl num">1</span>
    <span class="hl sym">}</span>
    <span class="hl kwa">return</span> distribution<span class="hl sym">(</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">).</span>_1
  <span class="hl sym">}</span>
<span class="hl sym">}</span>


<span class="hl kwa">object</span> RandomNumber <span class="hl sym">{</span>
  <span class="hl kwa">val</span> IM <span class="hl sym">=</span> <span class="hl num">139968</span>
  <span class="hl kwa">val</span> IA <span class="hl sym">=</span> <span class="hl num">3877</span>
  <span class="hl kwa">val</span> IC <span class="hl sym">=</span> <span class="hl num">29573</span>
  <span class="hl kwa">private var</span> seed <span class="hl sym">=</span> <span class="hl num">42</span>

  <span class="hl kwa">def</span> scaledTo<span class="hl sym">(</span>max<span class="hl sym">:</span> <span class="hl kwc">Double</span><span class="hl sym">) = {</span>
    seed <span class="hl sym">= (</span>seed <span class="hl sym">*</span> IA <span class="hl sym">+</span> IC<span class="hl sym">) %</span> IM
    max <span class="hl sym">*</span> seed <span class="hl sym">/</span> IM
  <span class="hl sym">}</span>
<span class="hl sym">}</span>
