<span class="hl slc">#!/usr/bin/tclsh</span>
<span class="hl slc">##</span>
<span class="hl slc">## The Computer Lannguage Shootout</span>
<span class="hl slc">## http://shootout.alioth.debian.org/</span>
<span class="hl slc">## Contributed by Heiner Marxen</span>
<span class="hl slc">##</span>
<span class="hl slc">## &quot;fannkuch&quot;	for Tcl</span>
<span class="hl slc">## Call:	tclsh fannkuch.tcl 9</span>
<span class="hl slc">##</span>
<span class="hl slc">## $Id: fannkuch.2.tcl.code,v 1.6 2008-09-12 23:29:39 igouy-guest Exp $</span>

<span class="hl kwa">proc</span> fannkuch <span class="hl sym">{</span>n<span class="hl sym">} {</span>
    <span class="hl kwa">if</span> <span class="hl sym">{</span><span class="hl kwb">$n</span> <span class="hl sym">&lt;</span> <span class="hl num">1</span><span class="hl sym">} {</span>
	<span class="hl kwa">return</span> <span class="hl num">0</span>
    <span class="hl sym">}</span>
    <span class="hl kwa">set</span> n1 <span class="hl sym">[</span><span class="hl kwa">expr</span> <span class="hl sym">{</span><span class="hl kwb">$n</span> <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">}]		;</span><span class="hl slc"># just caches n-1</span>

    <span class="hl kwa">set</span> nL <span class="hl sym">[</span><span class="hl kwa">list</span><span class="hl sym">]			;</span><span class="hl slc"># caches list &lt; $n</span>
    <span class="hl kwa">for</span> <span class="hl sym">{</span><span class="hl kwa">set</span> i <span class="hl num">0</span><span class="hl sym">} {</span><span class="hl kwb">$i</span> <span class="hl sym">&lt;</span> <span class="hl kwb">$n</span><span class="hl sym">} {</span><span class="hl kwa">incr</span> i<span class="hl sym">} {</span>
	<span class="hl kwa">lappend</span> nL <span class="hl kwb">$i</span>
    <span class="hl sym">}</span>
    <span class="hl kwa">foreach</span> j <span class="hl kwb">$nL</span> <span class="hl sym">{</span>
	<span class="hl kwa">set</span> L <span class="hl sym">[</span><span class="hl kwa">list</span><span class="hl sym">]</span>
	<span class="hl kwa">set</span> k <span class="hl kwb">$j</span>
	<span class="hl kwa">for</span> <span class="hl sym">{</span><span class="hl kwa">set</span> i <span class="hl num">0</span><span class="hl sym">} {</span><span class="hl kwb">$i</span> <span class="hl sym">&lt;</span> <span class="hl kwb">$k</span><span class="hl sym">} {</span><span class="hl kwa">incr</span> i<span class="hl sym">;</span> <span class="hl kwa">incr</span> k <span class="hl kwc">-1</span><span class="hl sym">} {</span>
	    <span class="hl kwa">lappend</span> L <span class="hl kwb">$i $k</span>
	<span class="hl sym">}</span>
	<span class="hl kwa">set</span> IK<span class="hl sym">(</span><span class="hl kwb">$j</span><span class="hl sym">)</span> <span class="hl kwb">$L</span>		<span class="hl sym">;</span><span class="hl slc"># caches inner loop as above</span>
	<span class="hl sym">;</span><span class="hl slc"># quadratic overhead is ok for factorial usage</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">foreach</span> i <span class="hl kwb">$nL</span> <span class="hl sym">{</span>
	<span class="hl kwa">set</span> perm1<span class="hl sym">(</span><span class="hl kwb">$i</span><span class="hl sym">)</span> <span class="hl kwb">$i</span>		<span class="hl sym">;</span><span class="hl slc"># initial (trivial) permu</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">set</span> r        <span class="hl kwb">$n</span>
    <span class="hl kwa">set</span> didpr    <span class="hl num">0</span>
    <span class="hl kwa">set</span> flipsMax <span class="hl num">0</span>
    <span class="hl kwa">while</span> <span class="hl num">1</span> <span class="hl sym">{</span>
	<span class="hl kwa">if</span> <span class="hl sym">{</span><span class="hl kwb">$didpr</span> <span class="hl sym">&lt;</span> <span class="hl num">30</span><span class="hl sym">} {</span>
	    <span class="hl kwa">foreach</span> i <span class="hl kwb">$nL</span> <span class="hl sym">{</span>
		<span class="hl kwa">puts</span> <span class="hl kwc">-nonewline</span> <span class="hl str">&quot;[expr {1 + $perm1($i)}]&quot;</span>
	    <span class="hl sym">}</span>
	    <span class="hl kwa">puts</span> <span class="hl str">&quot;&quot;</span>
	    <span class="hl kwa">incr</span> didpr
	<span class="hl sym">}</span>
	<span class="hl kwa">for</span> <span class="hl sym">{} {</span><span class="hl kwb">$r</span> <span class="hl sym">!=</span> <span class="hl num">1</span><span class="hl sym">} {</span><span class="hl kwa">incr</span> r <span class="hl kwc">-1</span><span class="hl sym">} {</span>
	    <span class="hl kwa">set</span> count<span class="hl sym">([</span><span class="hl kwa">expr</span> <span class="hl sym">{</span><span class="hl kwb">$r</span><span class="hl kwc">-1</span><span class="hl sym">}])</span> <span class="hl kwb">$r</span>
	<span class="hl sym">}</span>

	<span class="hl kwa">if</span> <span class="hl sym">{! (</span><span class="hl kwb">$perm1</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">) ==</span> <span class="hl num">0</span>  <span class="hl sym">||</span>  <span class="hl kwb">$perm1</span><span class="hl sym">(</span><span class="hl kwb">$n1</span><span class="hl sym">) ==</span> <span class="hl kwb">$n1</span><span class="hl sym">)} {</span>
	    <span class="hl kwa">set</span> flips <span class="hl num">0</span>

	    <span class="hl sym">;</span><span class="hl slc">#array set perm [array get perm1]	;# is slower</span>
	    <span class="hl kwa">foreach</span> i <span class="hl kwb">$nL</span> <span class="hl sym">{</span>
		<span class="hl kwa">set</span> perm<span class="hl sym">(</span><span class="hl kwb">$i</span><span class="hl sym">)</span> <span class="hl kwb">$perm1</span><span class="hl sym">(</span><span class="hl kwb">$i</span><span class="hl sym">)		;</span><span class="hl slc"># perm = perm1</span>
	    <span class="hl sym">}</span>
	    <span class="hl kwa">for</span> <span class="hl sym">{</span><span class="hl kwa">set</span> k <span class="hl kwb">$perm</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)} {</span><span class="hl kwb">$k</span><span class="hl sym">} {</span><span class="hl kwa">set</span> k <span class="hl kwb">$perm</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)} {</span>
		<span class="hl sym">;</span><span class="hl slc">#for {set i 0} {$i &lt; $k} {incr i; incr k -1}</span>
		<span class="hl kwa">foreach</span> <span class="hl sym">{</span>i k<span class="hl sym">}</span> <span class="hl kwb">$IK</span><span class="hl sym">(</span><span class="hl kwb">$k</span><span class="hl sym">) {</span>
		    <span class="hl kwa">set</span> t <span class="hl kwb">$perm</span><span class="hl sym">(</span><span class="hl kwb">$i</span><span class="hl sym">)</span>
		    <span class="hl kwa">set</span>    perm<span class="hl sym">(</span><span class="hl kwb">$i</span><span class="hl sym">)</span> <span class="hl kwb">$perm</span><span class="hl sym">(</span><span class="hl kwb">$k</span><span class="hl sym">)</span>
		    <span class="hl kwa">set</span>              perm<span class="hl sym">(</span><span class="hl kwb">$k</span><span class="hl sym">)</span> <span class="hl kwb">$t</span>
		    <span class="hl sym">;</span><span class="hl slc"># the foreach exchange approach is much slower, here</span>
		<span class="hl sym">}</span>
		<span class="hl kwa">incr</span> flips
	    <span class="hl sym">}</span>

	    <span class="hl kwa">if</span> <span class="hl sym">{</span><span class="hl kwb">$flipsMax</span> <span class="hl sym">&lt;</span> <span class="hl kwb">$flips</span><span class="hl sym">} {</span>
		<span class="hl kwa">set</span> flipsMax <span class="hl kwb">$flips</span>
	    <span class="hl sym">}</span>
	<span class="hl sym">}</span>

	<span class="hl kwa">while</span> <span class="hl num">1</span> <span class="hl sym">{</span>
	    <span class="hl kwa">if</span> <span class="hl sym">{</span><span class="hl kwb">$r</span> <span class="hl sym">==</span> <span class="hl kwb">$n</span><span class="hl sym">} {</span>
		<span class="hl kwa">return</span> <span class="hl kwb">$flipsMax</span>
	    <span class="hl sym">}</span>
	    <span class="hl sym">;</span><span class="hl slc"># rotate down perm[0..r] by one</span>
	    <span class="hl kwa">set</span> perm0 <span class="hl kwb">$perm1</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
	    <span class="hl kwa">for</span> <span class="hl sym">{</span><span class="hl kwa">set</span> i <span class="hl num">0</span><span class="hl sym">} {</span><span class="hl kwb">$i</span> <span class="hl sym">&lt;</span> <span class="hl kwb">$r</span><span class="hl sym">} {} {</span>
		<span class="hl kwa">set</span> perm1<span class="hl sym">(</span><span class="hl kwb">$i</span><span class="hl sym">)</span> <span class="hl kwb">$perm1</span><span class="hl sym">([</span><span class="hl kwa">incr</span> i<span class="hl sym">])	;</span><span class="hl slc"># tricky: increment embedded</span>
	    <span class="hl sym">}</span>
	    <span class="hl kwa">set</span> perm1<span class="hl sym">(</span><span class="hl kwb">$r</span><span class="hl sym">)</span> <span class="hl kwb">$perm0</span>
	    <span class="hl kwa">if</span> <span class="hl sym">{[</span><span class="hl kwa">incr</span> count<span class="hl sym">(</span><span class="hl kwb">$r</span><span class="hl sym">)</span> <span class="hl kwc">-1</span><span class="hl sym">] &gt;</span> <span class="hl num">0</span><span class="hl sym">} {</span>
		<span class="hl kwa">break</span>
	    <span class="hl sym">}</span>
	    <span class="hl kwa">incr</span> r
	<span class="hl sym">}</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwa">proc</span> main <span class="hl sym">{</span>argv<span class="hl sym">} {</span>
    <span class="hl kwa">set</span> n <span class="hl num">0</span>
    <span class="hl kwa">if</span> <span class="hl sym">{[</span><span class="hl kwa">llength</span> <span class="hl kwb">$argv</span><span class="hl sym">]} {</span>
	<span class="hl kwa">set</span> n <span class="hl sym">[</span><span class="hl kwa">lindex</span> <span class="hl kwb">$argv</span> <span class="hl num">0</span><span class="hl sym">]</span>
    <span class="hl sym">}</span>
    <span class="hl kwa">puts</span> <span class="hl str">&quot;Pfannkuchen($n) = [fannkuch $n]&quot;</span>
    <span class="hl kwa">return</span> <span class="hl num">0</span>
<span class="hl sym">}</span>

main <span class="hl kwb">$argv</span>
