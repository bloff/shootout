<span class="hl slc">;;   The Computer Language Benchmarks Game</span>
<span class="hl slc">;;   http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; By Jon Smith (rev 3)</span>
<span class="hl slc">;;; Fixed a bug in my use of write-sequence, which wasn't apparent on my machine, for whatever reason.</span>
<span class="hl slc">;;; Based off of java implementation. </span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; To compile</span>
<span class="hl slc">;;; sbcl --load fasta.lisp --eval &quot;(save-lisp-and-die \&quot;fasta.core\&quot; :purify t :toplevel (lambda () (main) (quit)))&quot;</span>
<span class="hl slc">;;; To run</span>
<span class="hl slc">;;; sbcl --noinform --core fastab.core %A</span>
<span class="hl sym">(</span>setf <span class="hl sym">*</span>efficiency<span class="hl sym">-</span>note<span class="hl sym">-</span>cost<span class="hl sym">-</span>threshold<span class="hl sym">*</span> <span class="hl num">1</span><span class="hl sym">)</span>

<span class="hl sym">(</span>defmacro define<span class="hl sym">-</span>constant <span class="hl sym">(</span>name value <span class="hl sym">&amp;</span>optional doc<span class="hl sym">)</span>
  <span class="hl sym">`(</span>defconstant <span class="hl sym">,</span>name <span class="hl sym">(</span>if <span class="hl sym">(</span>boundp <span class="hl sym">',</span>name<span class="hl sym">) (</span>symbol<span class="hl sym">-</span>value <span class="hl sym">',</span>name<span class="hl sym">) ,</span>value<span class="hl sym">)</span>
     <span class="hl sym">,</span>&#64;<span class="hl sym">(</span>when doc <span class="hl sym">(</span>list doc<span class="hl sym">))))</span>

<span class="hl sym">(</span>declaim <span class="hl sym">(</span>optimize <span class="hl sym">(</span>speed <span class="hl num">3</span><span class="hl sym">) (</span>safety <span class="hl num">0</span><span class="hl sym">) (</span>debug <span class="hl num">0</span><span class="hl sym">)))</span>

<span class="hl sym">(</span>defconstant line<span class="hl sym">-</span>length <span class="hl num">60</span><span class="hl sym">)</span>
<span class="hl sym">(</span>defconstant out<span class="hl sym">-</span>buffer<span class="hl sym">-</span>size <span class="hl sym">(*</span> <span class="hl num">256 1024</span><span class="hl sym">))</span>
<span class="hl sym">(</span>defconstant lookup<span class="hl sym">-</span>size <span class="hl sym">(*</span> <span class="hl num">4 1024</span><span class="hl sym">))</span>
<span class="hl sym">(</span>defconstant lookup<span class="hl sym">-</span>scale <span class="hl sym">(</span>the double<span class="hl sym">-</span>float <span class="hl sym">(*</span> <span class="hl num">1.0</span>d0 <span class="hl sym">(-</span> lookup<span class="hl sym">-</span>size <span class="hl num">1</span><span class="hl sym">))))</span>
<span class="hl sym">(</span>defconstant lim <span class="hl sym">(-</span> out<span class="hl sym">-</span>buffer<span class="hl sym">-</span>size <span class="hl sym">(*</span> <span class="hl num">2</span> line<span class="hl sym">-</span>length<span class="hl sym">)</span> <span class="hl num">1</span><span class="hl sym">))</span>

<span class="hl sym">(</span>eval<span class="hl sym">-</span>when <span class="hl sym">(:</span>load<span class="hl sym">-</span>toplevel <span class="hl sym">:</span>compile<span class="hl sym">-</span>toplevel <span class="hl sym">:</span>execute<span class="hl sym">)</span>

  <span class="hl sym">(</span>deftype cbyte <span class="hl sym">() '(</span>unsigned<span class="hl sym">-</span>byte <span class="hl num">8</span><span class="hl sym">))</span>

  <span class="hl sym">(</span>defmacro cbyte <span class="hl sym">(</span>form<span class="hl sym">)</span>
    <span class="hl sym">(</span>cond <span class="hl sym">((</span>stringp form<span class="hl sym">)</span>
	   <span class="hl sym">(</span>map <span class="hl sym">'(</span>simple<span class="hl sym">-</span>array cbyte <span class="hl sym">(*))</span> #<span class="hl sym">'</span>char<span class="hl sym">-</span>code form<span class="hl sym">))</span>
	  <span class="hl sym">((</span>characterp form<span class="hl sym">)</span>
	   <span class="hl sym">(</span>char<span class="hl sym">-</span>code form<span class="hl sym">))))</span>

  

  <span class="hl sym">(</span>defstruct freq 
    <span class="hl sym">(</span>c <span class="hl num">0</span> <span class="hl sym">:</span>type cbyte<span class="hl sym">)</span>
    <span class="hl sym">(</span>m <span class="hl num">0.0</span>d0 <span class="hl sym">:</span>type double<span class="hl sym">-</span>float<span class="hl sym">))</span>

  <span class="hl sym">(</span>defmacro frequify <span class="hl sym">(&amp;</span>rest freq<span class="hl sym">-</span>pairs<span class="hl sym">)</span>
    <span class="hl sym">`(</span>frequify<span class="hl sym">-</span>fn <span class="hl sym">',(</span>mapcar <span class="hl sym">(</span>lambda <span class="hl sym">(</span>s<span class="hl sym">)</span>
			      <span class="hl sym">(</span>destructuring<span class="hl sym">-</span>bind <span class="hl sym">(</span>b f<span class="hl sym">)</span> s
				<span class="hl sym">(</span>list <span class="hl sym">(</span>char<span class="hl sym">-</span>code b<span class="hl sym">)</span> f<span class="hl sym">)))</span>
			    freq<span class="hl sym">-</span>pairs<span class="hl sym">)))</span>

  <span class="hl sym">(</span>defun frequify<span class="hl sym">-</span>fn <span class="hl sym">(</span>parsed<span class="hl sym">-</span>freq<span class="hl sym">-</span>pairs<span class="hl sym">)</span>
    <span class="hl sym">(</span>declare <span class="hl sym">(</span>type list parsed<span class="hl sym">-</span>freq<span class="hl sym">-</span>pairs<span class="hl sym">))</span>
    <span class="hl sym">(</span>let <span class="hl sym">((</span>i <span class="hl num">0</span><span class="hl sym">)</span>
	  <span class="hl sym">(</span>array <span class="hl sym">(</span>make<span class="hl sym">-</span>array <span class="hl sym">(</span>length parsed<span class="hl sym">-</span>freq<span class="hl sym">-</span>pairs<span class="hl sym">))))</span>
      <span class="hl sym">(</span>dolist <span class="hl sym">(</span>pair parsed<span class="hl sym">-</span>freq<span class="hl sym">-</span>pairs<span class="hl sym">)</span>
	<span class="hl sym">(</span>destructuring<span class="hl sym">-</span>bind <span class="hl sym">(</span>byte double<span class="hl sym">)</span> pair
	  <span class="hl sym">(</span>let <span class="hl sym">((</span>fr <span class="hl sym">(</span>make<span class="hl sym">-</span>freq <span class="hl sym">:</span>c byte <span class="hl sym">:</span>m double<span class="hl sym">)))</span>
	    <span class="hl sym">(</span>setf <span class="hl sym">(</span>aref array i<span class="hl sym">)</span> fr<span class="hl sym">)))</span>
	<span class="hl sym">(</span>incf i<span class="hl sym">))</span>
      array<span class="hl sym">))</span>

  <span class="hl sym">(</span>defun sum<span class="hl sym">-</span>and<span class="hl sym">-</span>scale <span class="hl sym">(</span>a<span class="hl sym">)</span>
    <span class="hl sym">(</span>declare <span class="hl sym">(</span>type <span class="hl sym">(</span>simple<span class="hl sym">-</span>array freq <span class="hl sym">(*))</span> a<span class="hl sym">))</span> 
    <span class="hl sym">(</span>let <span class="hl sym">((</span>p <span class="hl num">0.0</span>d0<span class="hl sym">))</span>
      <span class="hl sym">(</span>loop for i from <span class="hl num">0</span> below <span class="hl sym">(</span>length a<span class="hl sym">)</span>
	 do <span class="hl sym">(</span>setf <span class="hl sym">(</span>freq<span class="hl sym">-</span>m <span class="hl sym">(</span>aref a i<span class="hl sym">))</span>
		  <span class="hl sym">(* (</span>incf p <span class="hl sym">(</span>freq<span class="hl sym">-</span>m <span class="hl sym">(</span>aref a i<span class="hl sym">)))</span> lookup<span class="hl sym">-</span>scale<span class="hl sym">)))</span>
      <span class="hl sym">(</span>setf <span class="hl sym">(</span>freq<span class="hl sym">-</span>m <span class="hl sym">(</span>aref a <span class="hl sym">(- (</span>length a<span class="hl sym">)</span> <span class="hl num">1</span><span class="hl sym">)))</span> lookup<span class="hl sym">-</span>scale<span class="hl sym">))</span>
    a<span class="hl sym">)</span>

  <span class="hl sym">(</span>defun random<span class="hl sym">-</span>fasta<span class="hl sym">-</span>make<span class="hl sym">-</span>lookup <span class="hl sym">(</span>a<span class="hl sym">)</span>
    <span class="hl sym">(</span>declare <span class="hl sym">(</span>type <span class="hl sym">(</span>simple<span class="hl sym">-</span>array freq <span class="hl sym">(*))</span> a<span class="hl sym">))</span>
    <span class="hl sym">(</span>let <span class="hl sym">((</span>lookup<span class="hl sym">-</span>byte <span class="hl sym">(</span>make<span class="hl sym">-</span>array lookup<span class="hl sym">-</span>size
				   <span class="hl sym">:</span>element<span class="hl sym">-</span>type <span class="hl sym">'</span>cbyte
				   <span class="hl sym">:</span>initial<span class="hl sym">-</span>element <span class="hl num">0</span><span class="hl sym">))</span>
	  <span class="hl sym">(</span>lookup<span class="hl sym">-</span>float <span class="hl sym">(</span>make<span class="hl sym">-</span>array lookup<span class="hl sym">-</span>size
				    <span class="hl sym">:</span>element<span class="hl sym">-</span>type <span class="hl sym">'</span>double<span class="hl sym">-</span>float
				    <span class="hl sym">:</span>initial<span class="hl sym">-</span>element <span class="hl num">0.0</span>d0<span class="hl sym">)))</span>
      
      <span class="hl sym">(</span>let <span class="hl sym">((</span>j <span class="hl num">0</span><span class="hl sym">))</span>
	<span class="hl sym">(</span>loop for i from <span class="hl num">0</span> below lookup<span class="hl sym">-</span>size
	   do <span class="hl sym">(</span>loop while <span class="hl sym">(&lt; (</span>freq<span class="hl sym">-</span>m <span class="hl sym">(</span>aref a j<span class="hl sym">)) (*</span> <span class="hl num">1.0</span>d0 i<span class="hl sym">))</span>  do <span class="hl sym">(</span>incf j<span class="hl sym">))</span>
	   do <span class="hl sym">(</span>setf <span class="hl sym">(</span>aref lookup<span class="hl sym">-</span>float i<span class="hl sym">) (</span>freq<span class="hl sym">-</span>m <span class="hl sym">(</span>aref a j<span class="hl sym">)))</span>
	   do <span class="hl sym">(</span>setf <span class="hl sym">(</span>aref lookup<span class="hl sym">-</span>byte i<span class="hl sym">) (</span>freq<span class="hl sym">-</span>c <span class="hl sym">(</span>aref a j<span class="hl sym">)))))</span>
      <span class="hl sym">(</span>list lookup<span class="hl sym">-</span>float lookup<span class="hl sym">-</span>byte<span class="hl sym">)))</span>

<span class="hl sym">(</span>defmacro fx <span class="hl sym">(</span>a<span class="hl sym">)</span>
    <span class="hl sym">`(</span>the fixnum <span class="hl sym">,</span>a<span class="hl sym">)))</span>

<span class="hl sym">(</span>defconstant IM <span class="hl num">139968</span><span class="hl sym">)</span>
<span class="hl sym">(</span>defconstant IA <span class="hl num">3877</span><span class="hl sym">)</span>
<span class="hl sym">(</span>defconstant IC <span class="hl num">29573</span><span class="hl sym">)</span>
<span class="hl sym">(</span>defconstant scale <span class="hl sym">(/</span> lookup<span class="hl sym">-</span>scale IM<span class="hl sym">))</span>

<span class="hl sym">(</span>define<span class="hl sym">-</span>constant rand<span class="hl sym">-</span>array 
  <span class="hl sym">(</span>let <span class="hl sym">((</span>a <span class="hl sym">(</span>make<span class="hl sym">-</span>array IM <span class="hl sym">:</span>initial<span class="hl sym">-</span>element <span class="hl num">0.0</span>d0 <span class="hl sym">:</span>element<span class="hl sym">-</span>type <span class="hl sym">'</span>double<span class="hl sym">-</span>float<span class="hl sym">))</span>
	<span class="hl sym">(</span>last <span class="hl num">42</span><span class="hl sym">))</span>
    <span class="hl sym">(</span>labels <span class="hl sym">((</span>random<span class="hl sym">-</span>next<span class="hl sym">-</span>sub <span class="hl sym">()</span>
	       <span class="hl sym">(*</span> scale <span class="hl sym">(</span>setf last <span class="hl sym">(</span>mod <span class="hl sym">(+ (*</span> last IA<span class="hl sym">)</span> IC<span class="hl sym">)</span> IM<span class="hl sym">)))))</span>
      <span class="hl sym">(</span>dotimes <span class="hl sym">(</span>i <span class="hl num">139967</span><span class="hl sym">)</span>
	<span class="hl sym">(</span>setf <span class="hl sym">(</span>aref a i<span class="hl sym">) (</span>random<span class="hl sym">-</span>next<span class="hl sym">-</span>sub<span class="hl sym">)))</span>
      a<span class="hl sym">)))</span>

<span class="hl sym">(</span>define<span class="hl sym">-</span>constant ai<span class="hl sym">-</span>array 
    <span class="hl sym">(</span>let <span class="hl sym">((</span>a <span class="hl sym">(</span>make<span class="hl sym">-</span>array IM <span class="hl sym">:</span>initial<span class="hl sym">-</span>element <span class="hl num">0</span> <span class="hl sym">:</span>element<span class="hl sym">-</span>type <span class="hl sym">'</span>fixnum<span class="hl sym">)))</span>
      <span class="hl sym">(</span>dotimes <span class="hl sym">(</span>i <span class="hl num">139967</span><span class="hl sym">)</span>
	<span class="hl sym">(</span>setf <span class="hl sym">(</span>aref a i<span class="hl sym">) (</span>truncate <span class="hl sym">(</span>aref rand<span class="hl sym">-</span>array i<span class="hl sym">))))</span>
      a<span class="hl sym">))</span>

<span class="hl sym">(</span>defparameter <span class="hl sym">*</span>c<span class="hl sym">*</span> <span class="hl num">0</span><span class="hl sym">)</span>
<span class="hl sym">(</span>declaim <span class="hl sym">(</span>type fixnum <span class="hl sym">*</span>c<span class="hl sym">*))</span>

<span class="hl sym">(</span>defmacro random<span class="hl sym">-</span>next <span class="hl sym">(</span>c<span class="hl sym">)</span>
  <span class="hl sym">(</span>assert <span class="hl sym">(</span>symbolp c<span class="hl sym">))</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>g <span class="hl sym">(</span>gensym<span class="hl sym">)))</span>
    <span class="hl sym">`(</span>if <span class="hl sym">(= ,</span>c <span class="hl num">139967</span><span class="hl sym">)</span>
	 <span class="hl sym">(</span>progn
	   <span class="hl sym">(</span>setf <span class="hl sym">,</span>c <span class="hl num">1</span><span class="hl sym">)</span>
	   <span class="hl sym">(</span>values <span class="hl sym">,(</span>aref rand<span class="hl sym">-</span>array <span class="hl num">0</span><span class="hl sym">) ,(</span>aref ai<span class="hl sym">-</span>array <span class="hl num">0</span><span class="hl sym">)))</span>
	 <span class="hl sym">(</span>let <span class="hl sym">((,</span>g <span class="hl sym">,</span>c<span class="hl sym">))</span> 
	   <span class="hl sym">(</span>incf <span class="hl sym">,</span>c<span class="hl sym">)</span>
	   <span class="hl sym">(</span>values <span class="hl sym">(</span>aref rand<span class="hl sym">-</span>array <span class="hl sym">,</span>g<span class="hl sym">) (</span>aref ai<span class="hl sym">-</span>array <span class="hl sym">,</span>g<span class="hl sym">))))))</span>

<span class="hl sym">(</span>define<span class="hl sym">-</span>constant ALU <span class="hl sym">(</span>map <span class="hl sym">'(</span>simple<span class="hl sym">-</span>array cbyte <span class="hl sym">(*))</span> #<span class="hl sym">'</span>char<span class="hl sym">-</span>code 
			  <span class="hl sym">(</span>concatenate <span class="hl sym">'</span>string
				       <span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>
				       <span class="hl str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>
				       <span class="hl str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>
				       <span class="hl str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>
				       <span class="hl str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>
				       <span class="hl str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>
				       <span class="hl str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="hl sym">)))</span>



<span class="hl sym">(</span>define<span class="hl sym">-</span>constant IUB <span class="hl sym">(</span>random<span class="hl sym">-</span>fasta<span class="hl sym">-</span>make<span class="hl sym">-</span>lookup
		      <span class="hl sym">(</span>sum<span class="hl sym">-</span>and<span class="hl sym">-</span>scale
		       <span class="hl sym">(</span>frequify 
			<span class="hl sym">(</span>#\a <span class="hl num">0.27</span>d0<span class="hl sym">) (</span>#\c <span class="hl num">0.12</span>d0<span class="hl sym">) (</span>#\g <span class="hl num">0.12</span>d0<span class="hl sym">) (</span>#\t <span class="hl num">0.27</span>d0<span class="hl sym">)</span>
			<span class="hl sym">(</span>#\B <span class="hl num">0.02</span>d0<span class="hl sym">) (</span>#\D <span class="hl num">0.02</span>d0<span class="hl sym">) (</span>#\H <span class="hl num">0.02</span>d0<span class="hl sym">) (</span>#\K <span class="hl num">0.02</span>d0<span class="hl sym">)</span>
			<span class="hl sym">(</span>#\M <span class="hl num">0.02</span>d0<span class="hl sym">) (</span>#\N <span class="hl num">0.02</span>d0<span class="hl sym">) (</span>#\R <span class="hl num">0.02</span>d0<span class="hl sym">) (</span>#\S <span class="hl num">0.02</span>d0<span class="hl sym">)</span>
			<span class="hl sym">(</span>#\V <span class="hl num">0.02</span>d0<span class="hl sym">) (</span>#\W <span class="hl num">0.02</span>d0<span class="hl sym">) (</span>#\Y <span class="hl num">0.02</span>d0<span class="hl sym">)))))</span>

<span class="hl sym">(</span>define<span class="hl sym">-</span>constant homo<span class="hl sym">-</span>sapiens 
    <span class="hl sym">(</span>random<span class="hl sym">-</span>fasta<span class="hl sym">-</span>make<span class="hl sym">-</span>lookup 
     <span class="hl sym">(</span>sum<span class="hl sym">-</span>and<span class="hl sym">-</span>scale 
      <span class="hl sym">(</span>frequify 
       <span class="hl sym">(</span>#\a <span class="hl num">0.3029549426680</span>d0<span class="hl sym">)</span>
       <span class="hl sym">(</span>#\c <span class="hl num">0.1979883004921</span>d0<span class="hl sym">)</span>
       <span class="hl sym">(</span>#\g <span class="hl num">0.1975473066391</span>d0<span class="hl sym">)</span>
       <span class="hl sym">(</span>#\t <span class="hl num">0.3015094502008</span>d0<span class="hl sym">)))))</span>

<span class="hl sym">(</span>define<span class="hl sym">-</span>constant out<span class="hl sym">-</span>buf <span class="hl sym">(</span>make<span class="hl sym">-</span>array out<span class="hl sym">-</span>buffer<span class="hl sym">-</span>size <span class="hl sym">:</span>element<span class="hl sym">-</span>type <span class="hl sym">'</span>cbyte<span class="hl sym">))</span>

<span class="hl sym">(</span>let <span class="hl sym">((</span>ct <span class="hl num">0</span><span class="hl sym">))</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>type fixnum ct<span class="hl sym">))</span>

  <span class="hl sym">(</span>let <span class="hl sym">(</span>out<span class="hl sym">)</span>
    <span class="hl sym">(</span>defun set<span class="hl sym">-</span>out <span class="hl sym">(</span>stream<span class="hl sym">)</span>
      <span class="hl sym">(</span>setf out stream<span class="hl sym">))</span>

    <span class="hl sym">(</span>defun out<span class="hl sym">-</span>check<span class="hl sym">-</span>flush <span class="hl sym">()</span>
      <span class="hl sym">(</span>when <span class="hl sym">(&gt;=</span> ct lim<span class="hl sym">)</span>
	<span class="hl sym">(</span>write<span class="hl sym">-</span>sequence out<span class="hl sym">-</span>buf out <span class="hl sym">:</span>start <span class="hl num">0</span> <span class="hl sym">:</span>end ct<span class="hl sym">) (</span>setf ct <span class="hl num">0</span><span class="hl sym">)))</span>

    <span class="hl sym">(</span>defun out<span class="hl sym">-</span>close <span class="hl sym">()</span>
      <span class="hl sym">(</span>write<span class="hl sym">-</span>sequence out<span class="hl sym">-</span>buf out <span class="hl sym">:</span>start <span class="hl num">0</span> <span class="hl sym">:</span>end ct<span class="hl sym">)</span>
      <span class="hl sym">(</span>setf ct <span class="hl num">0</span><span class="hl sym">)</span>
      <span class="hl sym">(</span>close out<span class="hl sym">)))</span>

  <span class="hl sym">(</span>defun random<span class="hl sym">-</span>fasta<span class="hl sym">-</span>add<span class="hl sym">-</span>line <span class="hl sym">(</span>bytes lookup<span class="hl sym">-</span>float lookup<span class="hl sym">-</span>byte<span class="hl sym">)</span>
    <span class="hl sym">(</span>declare <span class="hl sym">(</span>type fixnum bytes<span class="hl sym">)</span>
	     <span class="hl sym">(</span>type <span class="hl sym">(</span>simple<span class="hl sym">-</span>array double<span class="hl sym">-</span>float <span class="hl sym">(</span>#.lookup<span class="hl sym">-</span>size<span class="hl sym">))</span> lookup<span class="hl sym">-</span>float<span class="hl sym">)</span>
	     <span class="hl sym">(</span>type <span class="hl sym">(</span>simple<span class="hl sym">-</span>array cbyte <span class="hl sym">(</span>#.lookup<span class="hl sym">-</span>size<span class="hl sym">))</span> lookup<span class="hl sym">-</span>byte<span class="hl sym">))</span>
    <span class="hl sym">(</span>out<span class="hl sym">-</span>check<span class="hl sym">-</span>flush<span class="hl sym">)</span>
    <span class="hl sym">(</span>let <span class="hl sym">((</span>lct ct<span class="hl sym">)</span>
	  <span class="hl sym">(</span>c <span class="hl sym">*</span>c<span class="hl sym">*))</span>
      <span class="hl sym">(</span>declare <span class="hl sym">(</span>type fixnum lct<span class="hl sym">)</span>
	       <span class="hl sym">(</span>type fixnum c<span class="hl sym">))</span>
      <span class="hl sym">(</span>loop while <span class="hl sym">(&lt;</span> lct <span class="hl sym">(</span>fx <span class="hl sym">(+</span> ct bytes<span class="hl sym">)))</span>
	 do <span class="hl sym">(</span>multiple<span class="hl sym">-</span>value<span class="hl sym">-</span>bind <span class="hl sym">(</span>r ai<span class="hl sym">) (</span>random<span class="hl sym">-</span>next c<span class="hl sym">)</span>
	      <span class="hl sym">(</span>loop while <span class="hl sym">(&lt; (</span>aref lookup<span class="hl sym">-</span>float ai<span class="hl sym">)</span> r<span class="hl sym">)</span>
		 do <span class="hl sym">(</span>incf ai<span class="hl sym">))</span>
	      <span class="hl sym">(</span>setf <span class="hl sym">(</span>aref out<span class="hl sym">-</span>buf lct<span class="hl sym">) (</span>aref lookup<span class="hl sym">-</span>byte ai<span class="hl sym">))</span>
	      <span class="hl sym">(</span>incf lct<span class="hl sym">)))</span>

      <span class="hl sym">(</span>setf <span class="hl sym">(</span>aref out<span class="hl sym">-</span>buf lct<span class="hl sym">) (</span>cbyte #\NEWLINE<span class="hl sym">))</span>
      <span class="hl sym">(</span>incf lct<span class="hl sym">)</span>
      <span class="hl sym">(</span>setf ct lct<span class="hl sym">)</span>
      <span class="hl sym">(</span>setf <span class="hl sym">*</span>c<span class="hl sym">*</span> c<span class="hl sym">)</span>
      <span class="hl sym">(</span>values<span class="hl sym">)))</span>

  <span class="hl sym">(</span>defun random<span class="hl sym">-</span>fasta<span class="hl sym">-</span>make <span class="hl sym">(</span>desc lookup<span class="hl sym">-</span>float lookup<span class="hl sym">-</span>byte n<span class="hl sym">)</span>
    <span class="hl sym">(</span>declare <span class="hl sym">(</span>type <span class="hl sym">(</span>simple<span class="hl sym">-</span>array cbyte <span class="hl sym">(*))</span> desc<span class="hl sym">)</span>
	     <span class="hl sym">(</span>type fixnum n<span class="hl sym">))</span>
    <span class="hl sym">(</span>let <span class="hl sym">((</span>len <span class="hl sym">(</span>length desc<span class="hl sym">)))</span>
      <span class="hl sym">(</span>replace out<span class="hl sym">-</span>buf desc <span class="hl sym">:</span>start1 ct <span class="hl sym">:</span>start2 <span class="hl num">0</span> <span class="hl sym">:</span>end1 <span class="hl sym">(</span>fx <span class="hl sym">(</span>incf ct len<span class="hl sym">)) :</span>end2 len<span class="hl sym">))</span>
    <span class="hl sym">(</span>setf <span class="hl sym">(</span>aref out<span class="hl sym">-</span>buf ct<span class="hl sym">) (</span>cbyte #\NEWLINE<span class="hl sym">))</span>
    <span class="hl sym">(</span>incf ct<span class="hl sym">)</span>
    <span class="hl sym">(</span>loop while <span class="hl sym">(&gt;</span> n <span class="hl num">0</span><span class="hl sym">)</span>
       do <span class="hl sym">(</span>let <span class="hl sym">((</span>bytes <span class="hl sym">(</span>min line<span class="hl sym">-</span>length n<span class="hl sym">)))</span>
	    <span class="hl sym">(</span>random<span class="hl sym">-</span>fasta<span class="hl sym">-</span>add<span class="hl sym">-</span>line bytes lookup<span class="hl sym">-</span>float lookup<span class="hl sym">-</span>byte<span class="hl sym">)</span>
	    <span class="hl sym">(</span>decf n bytes<span class="hl sym">)))</span>
    <span class="hl sym">(</span>values<span class="hl sym">))</span>

  <span class="hl sym">(</span>defun repeat<span class="hl sym">-</span>fasta<span class="hl sym">-</span>make <span class="hl sym">(</span>desc n<span class="hl sym">)</span>
    <span class="hl sym">(</span>declare <span class="hl sym">(</span>type <span class="hl sym">(</span>simple<span class="hl sym">-</span>array cbyte <span class="hl sym">(*))</span> desc<span class="hl sym">)</span>
	     <span class="hl sym">(</span>type fixnum n<span class="hl sym">))</span>
    <span class="hl sym">(</span>replace out<span class="hl sym">-</span>buf desc <span class="hl sym">:</span>start1 ct <span class="hl sym">:</span>end2 <span class="hl sym">(</span>length desc<span class="hl sym">))</span>
    <span class="hl sym">(</span>incf ct <span class="hl sym">(</span>length desc<span class="hl sym">))</span>
    <span class="hl sym">(</span>setf <span class="hl sym">(</span>aref out<span class="hl sym">-</span>buf ct<span class="hl sym">) (</span>cbyte #\NEWLINE<span class="hl sym">))</span>
    <span class="hl sym">(</span>incf ct<span class="hl sym">)</span>
    <span class="hl sym">(</span>let <span class="hl sym">((</span>buf <span class="hl sym">(</span>make<span class="hl sym">-</span>array <span class="hl sym">(+ (</span>length alu<span class="hl sym">)</span> line<span class="hl sym">-</span>length<span class="hl sym">))))</span>
      <span class="hl sym">(</span>loop for i of<span class="hl sym">-</span>type fixnum from <span class="hl num">0</span> below <span class="hl sym">(</span>length buf<span class="hl sym">)</span> by <span class="hl sym">(</span>length alu<span class="hl sym">)</span>
	 do <span class="hl sym">(</span>replace buf alu <span class="hl sym">:</span>start1 i <span class="hl sym">:</span>end2 <span class="hl sym">(</span>min <span class="hl sym">(</span>length alu<span class="hl sym">) (- (</span>length buf<span class="hl sym">)</span> <span class="hl num">1</span><span class="hl sym">))))</span>
      <span class="hl sym">(</span>let <span class="hl sym">((</span>pos <span class="hl num">0</span><span class="hl sym">))</span>
	<span class="hl sym">(</span>loop while <span class="hl sym">(&gt;</span> n <span class="hl num">0</span><span class="hl sym">)</span>
	   do <span class="hl sym">(</span>let <span class="hl sym">((</span>bytes <span class="hl sym">(</span>min line<span class="hl sym">-</span>length n<span class="hl sym">)))</span>
		<span class="hl sym">(</span>out<span class="hl sym">-</span>check<span class="hl sym">-</span>flush<span class="hl sym">)</span>
		<span class="hl sym">(</span>replace out<span class="hl sym">-</span>buf buf <span class="hl sym">:</span>start2 pos <span class="hl sym">:</span>start1 ct <span class="hl sym">:</span>end2 <span class="hl sym">(</span>the fixnum <span class="hl sym">(+</span> pos bytes<span class="hl sym">)))</span>
		<span class="hl sym">(</span>incf ct bytes<span class="hl sym">)</span>
		<span class="hl sym">(</span>setf <span class="hl sym">(</span>aref out<span class="hl sym">-</span>buf ct<span class="hl sym">) (</span>cbyte #\NEWLINE<span class="hl sym">))</span>
		<span class="hl sym">(</span>incf ct<span class="hl sym">)</span>
		<span class="hl sym">(</span>setf pos <span class="hl sym">(</span>mod <span class="hl sym">(</span>the fixnum <span class="hl sym">(+</span> pos bytes<span class="hl sym">)) (</span>length alu<span class="hl sym">)))</span>
		<span class="hl sym">(</span>decf n bytes<span class="hl sym">)))))</span>
    <span class="hl sym">(</span>values<span class="hl sym">)))</span>

<span class="hl sym">(</span>defun main <span class="hl sym">(&amp;</span>optional in<span class="hl sym">-</span>n<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>n <span class="hl sym">(</span>or in<span class="hl sym">-</span>n
	       <span class="hl sym">(</span>ignore<span class="hl sym">-</span>errors
		 <span class="hl sym">(</span>parse<span class="hl sym">-</span>integer <span class="hl sym">(</span>car <span class="hl sym">(</span>last #<span class="hl sym">+</span>sbcl sb<span class="hl sym">-</span>ext<span class="hl sym">:*</span>posix<span class="hl sym">-</span>argv<span class="hl sym">*</span>
					   #<span class="hl sym">+</span>cmu  extensions<span class="hl sym">:*</span>command<span class="hl sym">-</span>line<span class="hl sym">-</span>strings<span class="hl sym">*</span>
					   #<span class="hl sym">+</span>gcl  si<span class="hl sym">::*</span>command<span class="hl sym">-</span>args<span class="hl sym">*</span>
					   #<span class="hl sym">+</span>clisp nil<span class="hl sym">)))))))</span>
    <span class="hl sym">(</span>declare <span class="hl sym">(</span>type fixnum n<span class="hl sym">))</span>
    <span class="hl sym">(</span>set<span class="hl sym">-</span>out <span class="hl sym">(</span>open #p<span class="hl str">&quot;/dev/stdout&quot;</span> <span class="hl sym">:</span>direction <span class="hl sym">:</span>output <span class="hl sym">:</span>if<span class="hl sym">-</span>exists <span class="hl sym">:</span>append <span class="hl sym">:</span>element<span class="hl sym">-</span>type <span class="hl sym">'</span>cbyte<span class="hl sym">))</span>
    <span class="hl sym">(</span>unwind<span class="hl sym">-</span>protect <span class="hl sym">(</span>progn
		      <span class="hl sym">(</span>repeat<span class="hl sym">-</span>fasta<span class="hl sym">-</span>make <span class="hl sym">(</span>cbyte <span class="hl str">&quot;&gt;ONE Homo sapiens alu&quot;</span><span class="hl sym">) (</span>the fixnum <span class="hl sym">(*</span> n <span class="hl num">2</span><span class="hl sym">)))</span>
		      <span class="hl sym">(</span>random<span class="hl sym">-</span>fasta<span class="hl sym">-</span>make <span class="hl sym">(</span>cbyte <span class="hl str">&quot;&gt;TWO IUB ambiguity codes&quot;</span><span class="hl sym">)</span> 
					 <span class="hl sym">(</span>first IUB<span class="hl sym">)</span>
					 <span class="hl sym">(</span>second IUB<span class="hl sym">)</span>
					 <span class="hl sym">(</span>the fixnum <span class="hl sym">(*</span> n <span class="hl num">3</span><span class="hl sym">)))</span>
		      <span class="hl sym">(</span>random<span class="hl sym">-</span>fasta<span class="hl sym">-</span>make 
		       <span class="hl sym">(</span>cbyte <span class="hl str">&quot;&gt;THREE Homo sapiens frequency&quot;</span><span class="hl sym">)</span>
		       <span class="hl sym">(</span>first homo<span class="hl sym">-</span>sapiens<span class="hl sym">)</span>
		       <span class="hl sym">(</span>second homo<span class="hl sym">-</span>sapiens<span class="hl sym">)</span>
		       <span class="hl sym">(</span>the fixnum <span class="hl sym">(*</span> n <span class="hl num">5</span><span class="hl sym">))))</span>
      <span class="hl sym">(</span>out<span class="hl sym">-</span>close<span class="hl sym">))))</span>
