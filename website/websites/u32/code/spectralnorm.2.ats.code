<span class="hl com">(*</span>
<span class="hl com">** The Computer Language Benchmarks Game</span>
<span class="hl com">** http://shootout.alioth.debian.org/</span>
<span class="hl com">**</span>
<span class="hl com">** contributed by Hongwei Xi</span>
<span class="hl com">**</span>
<span class="hl com">** compilation command:</span>
<span class="hl com">	atscc -D_ATS_MULTITHREAD -O3 -fomit-frame-pointer -msse2 spectral-norm_smp.dats -o spectral-norm_smp -lm -lpthread</span>
<span class="hl com">**</span>
<span class="hl com">*)</span>

staload M <span class="hl sym">=</span> <span class="hl str">&quot;libc/SATS/math.sats&quot;</span>

<span class="hl sym">%{</span>^

static inline
ats_ptr_type darray_make <span class="hl sym">(</span>ats_int_type n<span class="hl sym">,</span> ats_double_type f<span class="hl sym">) {</span>
  int i<span class="hl sym">;</span> ats_double_type <span class="hl sym">*</span>p0<span class="hl sym">, *</span>p <span class="hl sym">;</span>
  p0 <span class="hl sym">=</span> malloc<span class="hl sym">(</span>n <span class="hl sym">*</span> sizeof<span class="hl sym">(</span>ats_double_type<span class="hl sym">)) ;</span>
  <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> p <span class="hl sym">=</span> p0<span class="hl sym">;</span> i <span class="hl sym">&lt;</span> n<span class="hl sym">; ++</span>i<span class="hl sym">, ++</span>p<span class="hl sym">) *</span>p <span class="hl sym">=</span> f<span class="hl sym">;</span>
  return p0 <span class="hl sym">;</span>
<span class="hl sym">}</span>

static inline
ats_void_type darray_free <span class="hl sym">(</span>ats_ptr_type A<span class="hl sym">) {</span> free <span class="hl sym">(</span>A<span class="hl sym">) ;</span> return <span class="hl sym">; }</span>

static inline
ats_double_type darray_get <span class="hl sym">(</span>ats_ptr_type A<span class="hl sym">,</span> ats_int_type i<span class="hl sym">) {</span>
  return <span class="hl sym">((</span>ats_double_type*)A<span class="hl sym">)[</span>i<span class="hl sym">] ;</span>
<span class="hl sym">}</span>

static inline
ats_void_type
darray_set <span class="hl sym">(</span>ats_ptr_type A<span class="hl sym">,</span> ats_int_type i<span class="hl sym">,</span> ats_double_type f<span class="hl sym">) {</span>
  <span class="hl sym">((</span>ats_double_type*)A<span class="hl sym">)[</span>i<span class="hl sym">] =</span> f <span class="hl sym">;</span> return <span class="hl sym">;</span>
<span class="hl sym">}</span>

static inline
ats_double_type eval_A <span class="hl sym">(</span>ats_int_type i<span class="hl sym">,</span> ats_int_type j<span class="hl sym">) {</span>
  return <span class="hl num">1.0</span><span class="hl sym">/((</span>i<span class="hl sym">+</span>j<span class="hl sym">)*(</span>i<span class="hl sym">+</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)/</span><span class="hl num">2</span><span class="hl sym">+</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) ;</span>
<span class="hl sym">}</span>

<span class="hl sym">%}</span>

<span class="hl com">(* ****** ****** *)</span>

absviewt&#64;ype darray <span class="hl sym">(</span>n<span class="hl sym">:</span>int<span class="hl sym">)</span> <span class="hl slc">// it is linear, so it cannot be leaked.</span>

<span class="hl kwa">extern fun</span> darray_make <span class="hl sym">{</span>n<span class="hl sym">:</span>nat<span class="hl sym">}</span>
  <span class="hl sym">(</span>n<span class="hl sym">:</span> int n<span class="hl sym">,</span> d<span class="hl sym">:</span> double<span class="hl sym">): [</span>l<span class="hl sym">:</span>addr<span class="hl sym">] (</span>darray n &#64; l <span class="hl sym">|</span> ptr l<span class="hl sym">) =</span> <span class="hl str">&quot;darray_make&quot;</span>

<span class="hl kwa">extern fun</span> darray_free
  <span class="hl sym">{</span>n<span class="hl sym">:</span>nat<span class="hl sym">} {</span>l<span class="hl sym">:</span>addr<span class="hl sym">} (</span>pf<span class="hl sym">:</span> darray n &#64; l <span class="hl sym">|</span> p<span class="hl sym">:</span> ptr l<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl str">&quot;darray_free&quot;</span>

<span class="hl kwa">extern fun</span> darray_get
  <span class="hl sym">{</span>n<span class="hl sym">:</span>nat<span class="hl sym">} (</span>A<span class="hl sym">: &amp;</span>darray n<span class="hl sym">,</span> i<span class="hl sym">:</span> natLt n<span class="hl sym">):</span> double <span class="hl sym">=</span> <span class="hl str">&quot;darray_get&quot;</span>

<span class="hl kwa">extern fun</span> darray_set
  <span class="hl sym">{</span>n<span class="hl sym">:</span>nat<span class="hl sym">} (</span>A<span class="hl sym">: &amp;</span>darray n<span class="hl sym">,</span> i<span class="hl sym">:</span> natLt n<span class="hl sym">,</span> d<span class="hl sym">:</span> double<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl str">&quot;darray_set&quot;</span>

<span class="hl kwa">overload</span> <span class="hl sym">[]</span> <span class="hl kwa">with</span> darray_get<span class="hl sym">;</span> <span class="hl kwa">overload</span> <span class="hl sym">[]</span> <span class="hl kwa">with</span> darray_set

<span class="hl slc">//</span>

<span class="hl kwa">extern fun</span> eval_A <span class="hl sym">(</span>i<span class="hl sym">:</span> int<span class="hl sym">,</span> j<span class="hl sym">:</span> int<span class="hl sym">):</span> double <span class="hl sym">=</span> <span class="hl str">&quot;eval_A&quot;</span>

<span class="hl slc">//</span>

<span class="hl sym">%{</span>^

ats_void_type loop_one_ij
  <span class="hl sym">(</span>ats_int_type N<span class="hl sym">,</span> ats_ptr_type u<span class="hl sym">,</span> ats_ptr_type Aui<span class="hl sym">,</span> ats_int_type i<span class="hl sym">) {</span>
  int j <span class="hl sym">;</span> double sum <span class="hl sym">=</span> <span class="hl num">0.0</span> <span class="hl sym">;</span>
  <span class="hl kwa">for</span> <span class="hl sym">(</span>j <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl sym">;</span> j <span class="hl sym">&lt;</span> N <span class="hl sym">;</span> j <span class="hl sym">+=</span> <span class="hl num">1</span><span class="hl sym">)</span> sum <span class="hl sym">+=</span> eval_A <span class="hl sym">(</span>i<span class="hl sym">,</span> j<span class="hl sym">) * ((</span>double*)u<span class="hl sym">)[</span>j<span class="hl sym">] ;</span>
  <span class="hl sym">*(</span>double*)Aui <span class="hl sym">=</span> sum <span class="hl sym">;</span>
  return <span class="hl sym">;</span>
<span class="hl sym">}</span>

ats_void_type
loop_all_ij <span class="hl sym">(</span>
  ats_int_type N
<span class="hl sym">,</span> ats_int_type beg
<span class="hl sym">,</span> ats_int_type fin
<span class="hl sym">,</span> ats_ptr_type u
<span class="hl sym">,</span> ats_ptr_type Au
<span class="hl sym">) {</span>
  int i <span class="hl sym">;</span>
  <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> beg <span class="hl sym">;</span> i <span class="hl sym">&lt;</span> fin <span class="hl sym">;</span> i <span class="hl sym">+=</span> <span class="hl num">1</span><span class="hl sym">)</span> loop_one_ij <span class="hl sym">(</span>N<span class="hl sym">,</span> u<span class="hl sym">, &amp;((</span>double*)Au<span class="hl sym">)[</span>i<span class="hl sym">],</span> i<span class="hl sym">) ;</span>
  return <span class="hl sym">;</span>
<span class="hl sym">}</span>

ats_void_type loop_one_ji
  <span class="hl sym">(</span>ats_int_type N<span class="hl sym">,</span> ats_ptr_type u<span class="hl sym">,</span> ats_ptr_type Aui<span class="hl sym">,</span> ats_int_type i<span class="hl sym">) {</span>
  int j <span class="hl sym">;</span> double sum <span class="hl sym">=</span> <span class="hl num">0.0</span> <span class="hl sym">;</span>
  <span class="hl kwa">for</span> <span class="hl sym">(</span>j <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl sym">;</span> j <span class="hl sym">&lt;</span> N <span class="hl sym">;</span> j <span class="hl sym">+=</span> <span class="hl num">1</span><span class="hl sym">)</span> sum <span class="hl sym">+=</span> eval_A <span class="hl sym">(</span>j<span class="hl sym">,</span> i<span class="hl sym">) * ((</span>double*)u<span class="hl sym">)[</span>j<span class="hl sym">] ;</span>
  <span class="hl sym">*(</span>double*)Aui <span class="hl sym">=</span> sum <span class="hl sym">;</span>
  return <span class="hl sym">;</span>
<span class="hl sym">}</span>

ats_void_type
loop_all_ji <span class="hl sym">(</span>
  ats_int_type N
<span class="hl sym">,</span> ats_int_type beg
<span class="hl sym">,</span> ats_int_type fin
<span class="hl sym">,</span> ats_ptr_type u
<span class="hl sym">,</span> ats_ptr_type Au
<span class="hl sym">) {</span>
  int i <span class="hl sym">;</span>
  <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> beg <span class="hl sym">;</span> i <span class="hl sym">&lt;</span> fin <span class="hl sym">;</span> i <span class="hl sym">+=</span> <span class="hl num">1</span><span class="hl sym">)</span> loop_one_ji <span class="hl sym">(</span>N<span class="hl sym">,</span> u<span class="hl sym">, &amp;((</span>double*)Au<span class="hl sym">)[</span>i<span class="hl sym">],</span> i<span class="hl sym">) ;</span>
  return <span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl sym">%}</span>

<span class="hl kwa">extern fun</span> loop_all_ij <span class="hl sym">{</span>N<span class="hl sym">,</span>s<span class="hl sym">,</span>f<span class="hl sym">:</span>int <span class="hl sym">|</span> <span class="hl num">0</span> <span class="hl sym">&lt;=</span> s<span class="hl sym">;</span> f <span class="hl sym">&lt;=</span> N<span class="hl sym">}</span>
  <span class="hl sym">(</span>N<span class="hl sym">:</span> int N<span class="hl sym">,</span> beg<span class="hl sym">:</span> int s<span class="hl sym">,</span> fin<span class="hl sym">:</span> int f<span class="hl sym">,</span> u<span class="hl sym">: &amp;</span>darray N<span class="hl sym">,</span> Au<span class="hl sym">: &amp;</span>darray N<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl str">&quot;loop_all_ij&quot;</span>

<span class="hl kwa">extern fun</span> loop_all_ji <span class="hl sym">{</span>N<span class="hl sym">,</span>s<span class="hl sym">,</span>f<span class="hl sym">:</span>int <span class="hl sym">|</span> <span class="hl num">0</span> <span class="hl sym">&lt;=</span> s<span class="hl sym">;</span> f <span class="hl sym">&lt;=</span> N<span class="hl sym">}</span>
  <span class="hl sym">(</span>N<span class="hl sym">:</span> int N<span class="hl sym">,</span> beg<span class="hl sym">:</span> int s<span class="hl sym">,</span> fin<span class="hl sym">:</span> int f<span class="hl sym">,</span> u<span class="hl sym">: &amp;</span>darray N<span class="hl sym">,</span> Au<span class="hl sym">: &amp;</span>darray N<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl str">&quot;loop_all_ji&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl sym">%{</span>^

<span class="hl dir">#include &lt;pthread.h&gt;</span>

static pthread_mutex_t mutex_fin <span class="hl sym">=</span> PTHREAD_MUTEX_INITIALIZER<span class="hl sym">;</span>

static inline
ats_void_type finlock_wait <span class="hl sym">() {</span>
  pthread_mutex_lock <span class="hl sym">(&amp;</span>mutex_fin<span class="hl sym">) ;</span> pthread_mutex_unlock <span class="hl sym">(&amp;</span>mutex_fin<span class="hl sym">) ;</span>
  return <span class="hl sym">;</span>
<span class="hl sym">}</span>

static the_nticket <span class="hl sym">;</span>
static the_nthread <span class="hl sym">;</span>
static pthread_mutex_t mutex_nticket <span class="hl sym">=</span> PTHREAD_MUTEX_INITIALIZER<span class="hl sym">;</span>
static pthread_mutex_t mutex_nthread <span class="hl sym">=</span> PTHREAD_MUTEX_INITIALIZER<span class="hl sym">;</span>

static inline
ats_void_type thread_v_return <span class="hl sym">() {</span>
  int n <span class="hl sym">;</span>
  pthread_mutex_lock <span class="hl sym">(&amp;</span>mutex_nthread<span class="hl sym">) ;</span>
  n <span class="hl sym">=</span> the_nthread <span class="hl sym">;</span> the_nthread <span class="hl sym">=</span> n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>
  pthread_mutex_unlock <span class="hl sym">(&amp;</span>mutex_nthread<span class="hl sym">) ;</span>
  <span class="hl kwa">if</span> <span class="hl sym">(</span>n <span class="hl sym">==</span> <span class="hl num">1</span><span class="hl sym">) {</span>
    pthread_mutex_unlock <span class="hl sym">(&amp;</span>mutex_fin<span class="hl sym">) ;</span> <span class="hl slc">// conditional wait?</span>
  <span class="hl sym">}</span> <span class="hl slc">// end of [if]</span>
  return <span class="hl sym">;</span>
<span class="hl sym">}</span>

ats_int_type nticket_get <span class="hl sym">() {</span>
  int n <span class="hl sym">;</span>
  pthread_mutex_lock <span class="hl sym">(&amp;</span>mutex_nticket<span class="hl sym">) ;</span>
  n <span class="hl sym">=</span> the_nticket <span class="hl sym">;</span> the_nticket <span class="hl sym">=</span> n <span class="hl sym">+</span> <span class="hl num">1</span> <span class="hl sym">;</span>
  pthread_mutex_unlock <span class="hl sym">(&amp;</span>mutex_nticket<span class="hl sym">) ;</span>
  return n <span class="hl sym">;</span>
<span class="hl sym">}</span>

static inline
ats_void_type nthread_init <span class="hl sym">(</span>ats_int_type n<span class="hl sym">) {</span>
  the_nticket <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl sym">;</span> the_nthread <span class="hl sym">=</span> n <span class="hl sym">;</span> pthread_mutex_lock <span class="hl sym">(&amp;</span>mutex_fin<span class="hl sym">) ;</span>
  return <span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl sym">%}</span>

<span class="hl kwa">absview</span> thread_v<span class="hl sym">;</span> <span class="hl kwa">absview</span> nthread_v <span class="hl sym">(</span>int<span class="hl sym">)</span>

<span class="hl kwa">extern fun</span> thread_v_return
  <span class="hl sym">(</span>pf<span class="hl sym">:</span> thread_v <span class="hl sym">|</span> <span class="hl com">(*none*)</span><span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl str">&quot;thread_v_return&quot;</span>

<span class="hl kwa">extern prfun</span> nthread_v_take <span class="hl sym">{</span>n<span class="hl sym">:</span>pos<span class="hl sym">}</span>
  <span class="hl sym">(</span>pf<span class="hl sym">: !</span>nthread_v n <span class="hl sym">&gt;&gt;</span> nthread_v <span class="hl sym">(</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)):</span> thread_v

<span class="hl kwa">extern prfun</span> nthread_v_elim <span class="hl sym">(</span>pf<span class="hl sym">:</span> nthread_v <span class="hl num">0</span><span class="hl sym">):&lt;&gt;</span> void

<span class="hl kwa">extern fun</span> nticket_get
  <span class="hl sym">(</span>pf<span class="hl sym">: !</span>thread_v <span class="hl sym">|</span> <span class="hl com">(*none*)</span><span class="hl sym">):</span> Nat <span class="hl sym">=</span> <span class="hl str">&quot;nticket_get&quot;</span>

<span class="hl slc">// [!ref] prevents it from being called in a thread</span>
<span class="hl kwa">extern fun</span> nthread_init <span class="hl sym">{</span>n<span class="hl sym">:</span>nat<span class="hl sym">} (</span>n<span class="hl sym">:</span> int n<span class="hl sym">):&lt;!</span>ref<span class="hl sym">&gt; (</span>nthread_v n <span class="hl sym">|</span> void<span class="hl sym">)</span>
  <span class="hl sym">=</span> <span class="hl str">&quot;nthread_init&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

staload <span class="hl str">&quot;libc/SATS/pthread.sats&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl dir">#define NTHREAD 4; #define STRIDE 4</span>

<span class="hl kwa">fn</span> eval_A_times_u_knd <span class="hl sym">{</span>N<span class="hl sym">:</span>nat<span class="hl sym">}</span>
  <span class="hl sym">(</span>knd<span class="hl sym">:</span> int<span class="hl sym">,</span> N<span class="hl sym">:</span> int N<span class="hl sym">,</span> u<span class="hl sym">: &amp;</span>darray N<span class="hl sym">,</span> Au<span class="hl sym">: &amp;</span>darray N<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">fun</span> worker <span class="hl sym">{</span>l_u<span class="hl sym">,</span> l_Au<span class="hl sym">:</span>addr<span class="hl sym">} (</span>
      pf_thread<span class="hl sym">:</span> thread_v
    <span class="hl sym">,</span> pf_u<span class="hl sym">:</span> darray N &#64; l_u<span class="hl sym">,</span> pf_Au<span class="hl sym">:</span> darray N &#64; l_Au
    <span class="hl sym">|</span> knd<span class="hl sym">:</span> int<span class="hl sym">,</span> N<span class="hl sym">:</span> int N<span class="hl sym">,</span> p_u<span class="hl sym">:</span> ptr l_u<span class="hl sym">,</span> p_Au<span class="hl sym">:</span> ptr l_Au
    <span class="hl sym">) :</span> void <span class="hl sym">=</span> <span class="hl kwa">let</span>
    <span class="hl kwa">val</span> n <span class="hl sym">=</span> nticket_get <span class="hl sym">(</span>pf_thread <span class="hl sym">|</span> <span class="hl com">(*none*)</span><span class="hl sym">);</span> <span class="hl kwa">val</span> beg <span class="hl sym">=</span> n <span class="hl sym">*</span> STRIDE
  <span class="hl kwa">in</span>
    <span class="hl kwa">case</span><span class="hl sym">+</span> <span class="hl num">0</span> <span class="hl kwa">of</span>
    <span class="hl sym">|</span> _ <span class="hl kwa">when</span> beg <span class="hl sym">&lt;</span> N <span class="hl sym">=&gt;</span> <span class="hl kwa">let</span>
        <span class="hl kwa">val</span> fin <span class="hl sym">=</span> beg <span class="hl sym">+</span> STRIDE
        <span class="hl kwa">val</span> fin <span class="hl sym">= (</span><span class="hl kwa">if</span> fin <span class="hl sym">&lt;</span> N <span class="hl kwa">then</span> fin <span class="hl kwa">else</span> N<span class="hl sym">):</span> natLte N
        <span class="hl kwa">val</span> <span class="hl sym">() =</span> <span class="hl kwa">case</span><span class="hl sym">+</span> <span class="hl num">0</span> <span class="hl kwa">of</span>
          <span class="hl sym">|</span> _ <span class="hl kwa">when</span> knd <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl sym">=&gt;</span> loop_all_ij <span class="hl sym">(</span>N<span class="hl sym">,</span> beg<span class="hl sym">,</span> fin<span class="hl sym">, !</span>p_u<span class="hl sym">, !</span>p_Au<span class="hl sym">)</span>
          <span class="hl sym">|</span> _ <span class="hl com">(* knd = 1 *)</span> <span class="hl sym">=&gt;</span> loop_all_ji <span class="hl sym">(</span>N<span class="hl sym">,</span> beg<span class="hl sym">,</span> fin<span class="hl sym">, !</span>p_u<span class="hl sym">, !</span>p_Au<span class="hl sym">)</span>
      <span class="hl kwa">in</span>
        worker <span class="hl sym">(</span>pf_thread<span class="hl sym">,</span> pf_u<span class="hl sym">,</span> pf_Au <span class="hl sym">|</span> knd<span class="hl sym">,</span> N<span class="hl sym">,</span> p_u<span class="hl sym">,</span> p_Au<span class="hl sym">)</span>
      <span class="hl kwa">end</span>
    <span class="hl sym">|</span> _ <span class="hl sym">=&gt;</span> <span class="hl kwa">let</span>
        <span class="hl kwa">extern prfun</span> darray_v_elim <span class="hl sym">{</span>l<span class="hl sym">:</span>addr<span class="hl sym">} (</span>pf<span class="hl sym">:</span> darray N &#64; l<span class="hl sym">):</span> void
        <span class="hl kwa">prval</span> <span class="hl sym">() =</span> darray_v_elim <span class="hl sym">(</span>pf_u<span class="hl sym">)</span>
        <span class="hl kwa">prval</span> <span class="hl sym">() =</span> darray_v_elim <span class="hl sym">(</span>pf_Au<span class="hl sym">)</span>
      <span class="hl kwa">in</span>
        thread_v_return <span class="hl sym">(</span>pf_thread <span class="hl sym">|</span> <span class="hl com">(*none*)</span><span class="hl sym">);</span>
      <span class="hl kwa">end</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [worker]</span>
  <span class="hl kwa">val</span> p_u <span class="hl sym">= &amp;</span>u <span class="hl kwa">and</span> p_Au <span class="hl sym">= &amp;</span>Au
  <span class="hl kwa">fun</span> worker_gen <span class="hl sym">{</span>n<span class="hl sym">:</span>nat<span class="hl sym">}</span>
    <span class="hl sym">(</span>pf_nthread<span class="hl sym">:</span> nthread_v n <span class="hl sym">|</span> n<span class="hl sym">:</span> int n<span class="hl sym">):&lt;</span>cloref1<span class="hl sym">&gt;</span> void <span class="hl sym">=</span>
    <span class="hl kwa">if</span> n <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then let</span>
      <span class="hl kwa">extern prfun</span> darray_v_copy <span class="hl sym">{</span>l<span class="hl sym">:</span>addr<span class="hl sym">} (</span>p<span class="hl sym">:</span> ptr l<span class="hl sym">):</span> darray N &#64; l
      <span class="hl kwa">prval</span> pf_u <span class="hl sym">=</span> darray_v_copy <span class="hl sym">(</span>p_u<span class="hl sym">)</span>
      <span class="hl kwa">prval</span> pf_Au <span class="hl sym">=</span> darray_v_copy <span class="hl sym">(</span>p_Au<span class="hl sym">)</span>
      <span class="hl kwa">prval</span> pf_thread <span class="hl sym">=</span> nthread_v_take <span class="hl sym">(</span>pf_nthread<span class="hl sym">)</span>
      <span class="hl kwa">val</span> <span class="hl sym">() =</span> pthread_create_detached_cloptr <span class="hl sym">(</span>
        <span class="hl kwa">lam</span> <span class="hl sym">() =&lt;</span>lin<span class="hl sym">,</span>cloptr1<span class="hl sym">&gt;</span> worker <span class="hl sym">(</span>pf_thread<span class="hl sym">,</span> pf_u<span class="hl sym">,</span> pf_Au <span class="hl sym">|</span> knd<span class="hl sym">,</span> N<span class="hl sym">,</span> p_u<span class="hl sym">,</span> p_Au<span class="hl sym">)</span>
      <span class="hl sym">)</span> <span class="hl slc">// end of [pthread_create_detached_cloptr]</span>
    <span class="hl kwa">in</span>
      worker_gen <span class="hl sym">(</span>pf_nthread <span class="hl sym">|</span> n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
    <span class="hl kwa">end else begin</span>
      <span class="hl kwa">let prval</span> <span class="hl sym">() =</span> nthread_v_elim <span class="hl sym">(</span>pf_nthread<span class="hl sym">)</span> <span class="hl kwa">in</span> <span class="hl sym">()</span> <span class="hl kwa">end</span>
    <span class="hl kwa">end</span> <span class="hl slc">// end of [if]</span>
  <span class="hl kwa">val</span> <span class="hl sym">(</span>pf_nthread <span class="hl sym">| ()) =</span> nthread_init <span class="hl sym">(</span>NTHREAD<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> worker_gen <span class="hl sym">(</span>pf_nthread <span class="hl sym">|</span> NTHREAD<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> finlock_wait <span class="hl sym">()</span> <span class="hl kwa">where</span> <span class="hl sym">{</span>
    <span class="hl kwa">extern fun</span> finlock_wait <span class="hl sym">():</span> void <span class="hl sym">=</span> <span class="hl str">&quot;finlock_wait&quot;</span>
  <span class="hl sym">}</span>
<span class="hl kwa">in</span>
  <span class="hl slc">// empty</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [eval_A_times_u]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">fn</span> eval_A_times_u <span class="hl sym">{</span>N<span class="hl sym">:</span>nat<span class="hl sym">} (</span>N<span class="hl sym">:</span> int N<span class="hl sym">,</span> u<span class="hl sym">: &amp;</span>darray N<span class="hl sym">,</span> Au<span class="hl sym">: &amp;</span>darray N<span class="hl sym">):</span> void <span class="hl sym">=</span>
  eval_A_times_u_knd <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> N<span class="hl sym">,</span> u<span class="hl sym">,</span> Au<span class="hl sym">)</span>

<span class="hl kwa">fn</span> eval_At_times_u <span class="hl sym">{</span>N<span class="hl sym">:</span>nat<span class="hl sym">} (</span>N<span class="hl sym">:</span> int N<span class="hl sym">,</span> u<span class="hl sym">: &amp;</span>darray N<span class="hl sym">,</span> Au<span class="hl sym">: &amp;</span>darray N<span class="hl sym">):</span> void <span class="hl sym">=</span>
  eval_A_times_u_knd <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> N<span class="hl sym">,</span> u<span class="hl sym">,</span> Au<span class="hl sym">)</span>

<span class="hl kwa">fn</span> eval_AtA_times_u <span class="hl sym">{</span>N<span class="hl sym">:</span>nat<span class="hl sym">}</span>
  <span class="hl sym">(</span>N<span class="hl sym">:</span> int N<span class="hl sym">,</span> u<span class="hl sym">: &amp;</span>darray N<span class="hl sym">,</span> AtAu<span class="hl sym">: &amp;</span>darray N<span class="hl sym">):&lt;</span>cloptr1<span class="hl sym">&gt;</span> void <span class="hl sym">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> <span class="hl sym">(</span>pf <span class="hl sym">|</span> p_v<span class="hl sym">) =</span> darray_make <span class="hl sym">(</span>N<span class="hl sym">,</span> <span class="hl num">0.0</span><span class="hl sym">)</span>
<span class="hl kwa">in</span>
  eval_A_times_u<span class="hl sym">(</span>N<span class="hl sym">,</span> u<span class="hl sym">, !</span>p_v<span class="hl sym">);</span>
  eval_At_times_u <span class="hl sym">(</span>N<span class="hl sym">, !</span>p_v<span class="hl sym">,</span> AtAu<span class="hl sym">);</span>
  darray_free <span class="hl sym">(</span>pf <span class="hl sym">|</span> p_v<span class="hl sym">)</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [eval_AtT_times_u]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl dir">#define TIMES 10</span>

<span class="hl kwa">implement</span> main <span class="hl sym">(</span>argc<span class="hl sym">,</span> argv<span class="hl sym">) =</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> assert_errmsg <span class="hl sym">(</span>argc <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">,</span> <span class="hl str">&quot;Exit: wrong command format!</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">[</span>N<span class="hl sym">:</span>int<span class="hl sym">]</span> N <span class="hl sym">=</span> int1_of_string argv<span class="hl sym">.[</span><span class="hl num">1</span><span class="hl sym">]</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> assert_errmsg <span class="hl sym">(</span>
    N <span class="hl sym">&gt;=</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl str">&quot;The input integer needs to be a natural number.</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
  <span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">(</span>pf_u <span class="hl sym">|</span> p_u<span class="hl sym">) =</span> darray_make <span class="hl sym">(</span>N<span class="hl sym">,</span> <span class="hl num">1.0</span><span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">(</span>pf_v <span class="hl sym">|</span> p_v<span class="hl sym">) =</span> darray_make <span class="hl sym">(</span>N<span class="hl sym">,</span> <span class="hl num">0.0</span><span class="hl sym">)</span>
  <span class="hl kwa">fun</span> loop1 <span class="hl sym">{</span>i<span class="hl sym">:</span>nat <span class="hl sym">|</span> i <span class="hl sym">&lt;=</span> TIMES<span class="hl sym">} .&lt;</span>TIMES<span class="hl sym">-</span>i<span class="hl sym">&gt;.</span>
    <span class="hl sym">(</span>u<span class="hl sym">: &amp;</span>darray N<span class="hl sym">,</span> v<span class="hl sym">: &amp;</span>darray N<span class="hl sym">,</span> i<span class="hl sym">:</span> int i<span class="hl sym">):&lt;</span>cloptr1<span class="hl sym">&gt;</span> void <span class="hl sym">=</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> TIMES<span class="hl sym">)</span> <span class="hl kwa">then begin</span>
      eval_AtA_times_u<span class="hl sym">(</span>N<span class="hl sym">,</span> u<span class="hl sym">,</span> v<span class="hl sym">);</span> eval_AtA_times_u<span class="hl sym">(</span>N<span class="hl sym">,</span> v<span class="hl sym">,</span> u<span class="hl sym">);</span> loop1 <span class="hl sym">(</span>u<span class="hl sym">,</span> v<span class="hl sym">,</span> i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> loop1 <span class="hl sym">(!</span>p_u<span class="hl sym">, !</span>p_v<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">)</span>
  <span class="hl kwa">fun</span> loop2 <span class="hl sym">{</span>i<span class="hl sym">:</span>nat<span class="hl sym">|</span> i <span class="hl sym">&lt;=</span> N<span class="hl sym">} .&lt;</span>N<span class="hl sym">-</span>i<span class="hl sym">&gt;.</span>
    <span class="hl sym">(</span>u<span class="hl sym">: &amp;</span>darray N<span class="hl sym">,</span> v<span class="hl sym">: &amp;</span>darray N<span class="hl sym">,</span>
     vBv<span class="hl sym">:</span> double<span class="hl sym">,</span> vv<span class="hl sym">:</span> double<span class="hl sym">,</span> i<span class="hl sym">:</span> int i<span class="hl sym">):&lt;</span>cloptr1<span class="hl sym">&gt;</span> &#64;<span class="hl sym">(</span>double<span class="hl sym">,</span> double<span class="hl sym">) =</span>
    <span class="hl kwa">if</span> i <span class="hl sym">&lt;</span> N <span class="hl kwa">then</span>
      <span class="hl kwa">let val</span> ui <span class="hl sym">=</span> u<span class="hl sym">[</span>i<span class="hl sym">]</span> <span class="hl kwa">and</span> vi <span class="hl sym">=</span> v<span class="hl sym">[</span>i<span class="hl sym">]</span> <span class="hl kwa">in</span>
        loop2 <span class="hl sym">(</span>u<span class="hl sym">,</span> v<span class="hl sym">,</span> vBv<span class="hl sym">+</span>ui<span class="hl sym">*</span>vi<span class="hl sym">,</span> vv<span class="hl sym">+</span>vi<span class="hl sym">*</span>vi<span class="hl sym">,</span> i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>
      <span class="hl kwa">end</span>
    <span class="hl kwa">else</span> <span class="hl sym">(</span>vBv<span class="hl sym">,</span> vv<span class="hl sym">)</span>
  <span class="hl kwa">val</span> &#64;<span class="hl sym">(</span>vBv<span class="hl sym">,</span> vv<span class="hl sym">) =</span> loop2 <span class="hl sym">(!</span>p_u<span class="hl sym">, !</span>p_v<span class="hl sym">,</span> <span class="hl num">0.0</span><span class="hl sym">,</span> <span class="hl num">0.0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() = (</span>darray_free <span class="hl sym">(</span>pf_u <span class="hl sym">|</span> p_u<span class="hl sym">);</span> darray_free <span class="hl sym">(</span>pf_v <span class="hl sym">|</span> p_v<span class="hl sym">))</span>
<span class="hl kwa">in</span>
  printf<span class="hl sym">(</span><span class="hl str">&quot;%0.9f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> &#64;<span class="hl sym">(</span>$M<span class="hl sym">.</span>sqrt <span class="hl sym">(</span>vBv<span class="hl sym">/</span>vv<span class="hl sym">)))</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [main]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl com">(* end of [spectral-norm.dats] *)</span>
