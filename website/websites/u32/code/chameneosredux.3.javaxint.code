<span class="hl com">/** The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Ross Judson</span>
<span class="hl com"> */</span>

<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span><span class="hl kwc">ArrayList</span><span class="hl sym">;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span><span class="hl kwc">List</span><span class="hl sym">;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span>concurrent<span class="hl sym">.</span><span class="hl kwc">Exchanger</span><span class="hl sym">;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span>concurrent<span class="hl sym">.</span><span class="hl kwc">Semaphore</span><span class="hl sym">;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span>concurrent<span class="hl sym">.</span><span class="hl kwc">TimeUnit</span><span class="hl sym">;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span>concurrent<span class="hl sym">.</span><span class="hl kwc">TimeoutException</span><span class="hl sym">;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span>concurrent<span class="hl sym">.</span>atomic<span class="hl sym">.</span><span class="hl kwc">AtomicInteger</span><span class="hl sym">;</span>


<span class="hl kwa">public class</span> chameneosredux <span class="hl sym">{</span>

   <span class="hl kwa">static final</span> <span class="hl kwb">int</span> BLOCK <span class="hl sym">=</span> <span class="hl num">100</span><span class="hl sym">;</span>

   <span class="hl com">/**</span>
<span class="hl com">    * &#64;param args</span>
<span class="hl com">    */</span>
   <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">) {</span>
      <span class="hl kwb">int</span> n <span class="hl sym">=</span> <span class="hl num">6000000</span><span class="hl sym">;</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>args<span class="hl sym">.</span>length <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
         n <span class="hl sym">=</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span><span class="hl kwd">parseInt</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>

      <span class="hl kwa">try</span> <span class="hl sym">{</span>
         <span class="hl kwb">long</span> now <span class="hl sym">=</span> <span class="hl kwc">System</span><span class="hl sym">.</span><span class="hl kwd">currentTimeMillis</span><span class="hl sym">();</span>
         <span class="hl kwd">run</span><span class="hl sym">(</span>n<span class="hl sym">,</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">,</span> Colour<span class="hl sym">.</span>red<span class="hl sym">,</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">);</span>
         <span class="hl kwd">run</span><span class="hl sym">(</span>n<span class="hl sym">,</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">,</span> Colour<span class="hl sym">.</span>red<span class="hl sym">,</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">,</span> Colour<span class="hl sym">.</span>red<span class="hl sym">,</span>
               Colour<span class="hl sym">.</span>yellow<span class="hl sym">,</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">,</span> Colour<span class="hl sym">.</span>red<span class="hl sym">,</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">,</span>
               Colour<span class="hl sym">.</span>red<span class="hl sym">,</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">);</span>

         <span class="hl kwb">long</span> after <span class="hl sym">=</span> <span class="hl kwc">System</span><span class="hl sym">.</span><span class="hl kwd">currentTimeMillis</span><span class="hl sym">();</span>
         <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">format</span><span class="hl sym">(</span><span class="hl str">&quot;Run time: %,dms</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> after <span class="hl sym">-</span> now<span class="hl sym">);</span>
      <span class="hl sym">}</span> <span class="hl kwa">catch</span> <span class="hl sym">(</span><span class="hl kwc">InterruptedException</span> ie<span class="hl sym">) {</span>
         <span class="hl slc">// ignore.</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">static</span> <span class="hl kwb">void</span> <span class="hl kwd">run</span><span class="hl sym">(</span><span class="hl kwb">int</span> n<span class="hl sym">,</span> Colour<span class="hl sym">...</span> colours<span class="hl sym">)</span> <span class="hl kwa">throws</span> <span class="hl kwc">InterruptedException</span> <span class="hl sym">{</span>
      <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">format</span><span class="hl sym">(</span><span class="hl str">&quot;Run for %,d meetings</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> n<span class="hl sym">);</span>
      meetings<span class="hl sym">.</span><span class="hl kwd">set</span><span class="hl sym">(</span>n<span class="hl sym">);</span>
      done <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">Semaphore</span><span class="hl sym">(-</span>colours<span class="hl sym">.</span>length<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">);</span>
      <span class="hl kwc">List</span><span class="hl sym">&lt;</span>Creature<span class="hl sym">&gt;</span> creatures <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">ArrayList</span><span class="hl sym">&lt;</span>Creature<span class="hl sym">&gt;();</span>
      <span class="hl kwb">int</span> id <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span>Colour c<span class="hl sym">:</span> colours<span class="hl sym">) {</span>
         Creature creature <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Creature</span><span class="hl sym">(</span>id<span class="hl sym">++,</span> c<span class="hl sym">);</span>
         creature<span class="hl sym">.</span><span class="hl kwd">start</span><span class="hl sym">();</span>
         creatures<span class="hl sym">.</span><span class="hl kwd">add</span><span class="hl sym">(</span>creature<span class="hl sym">);</span>
      <span class="hl sym">}</span>
      done<span class="hl sym">.</span><span class="hl kwd">acquire</span><span class="hl sym">();</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>done<span class="hl sym">.</span><span class="hl kwd">availablePermits</span><span class="hl sym">() &lt;=</span> <span class="hl num">0</span><span class="hl sym">)</span>
         <span class="hl kwa">try</span> <span class="hl sym">{</span>
            meetingPlace<span class="hl sym">.</span><span class="hl kwd">exchange</span><span class="hl sym">(</span>Colour<span class="hl sym">.</span>blue<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> <span class="hl kwc">TimeUnit</span><span class="hl sym">.</span>MILLISECONDS<span class="hl sym">);</span>
         <span class="hl sym">}</span> <span class="hl kwa">catch</span> <span class="hl sym">(</span><span class="hl kwc">TimeoutException</span> e<span class="hl sym">) {</span>
            <span class="hl slc">// ignore.</span>
         <span class="hl sym">}</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span>Creature c<span class="hl sym">:</span> creatures<span class="hl sym">)</span>
         <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span>c<span class="hl sym">);</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">static</span> <span class="hl kwc">Exchanger</span><span class="hl sym">&lt;</span>Colour<span class="hl sym">&gt;</span> meetingPlace <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">Exchanger</span><span class="hl sym">&lt;</span>Colour<span class="hl sym">&gt;();</span>
   <span class="hl kwa">static</span> <span class="hl kwc">AtomicInteger</span> meetings <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">AtomicInteger</span><span class="hl sym">();</span>
   <span class="hl kwa">static</span> <span class="hl kwc">Semaphore</span> done<span class="hl sym">;</span>

   <span class="hl kwa">static class</span> Creature <span class="hl kwa">extends</span> <span class="hl kwc">Thread</span> <span class="hl sym">{</span>
      <span class="hl kwa">private</span> Colour colour<span class="hl sym">;</span>
      <span class="hl kwa">private</span> <span class="hl kwb">int</span> count<span class="hl sym">;</span>
      <span class="hl kwa">final private</span> <span class="hl kwb">int</span> id<span class="hl sym">;</span>

      <span class="hl kwd">Creature</span><span class="hl sym">(</span><span class="hl kwb">int</span> id<span class="hl sym">,</span> Colour colour<span class="hl sym">) {</span>
         <span class="hl kwa">this</span><span class="hl sym">.</span>colour <span class="hl sym">=</span> colour<span class="hl sym">;</span>
         <span class="hl kwa">this</span><span class="hl sym">.</span>id <span class="hl sym">=</span> id<span class="hl sym">;</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">public</span> <span class="hl kwc">String</span> <span class="hl kwd">toString</span><span class="hl sym">() {</span>
         <span class="hl kwa">return</span> <span class="hl kwc">String</span><span class="hl sym">.</span><span class="hl kwd">format</span><span class="hl sym">(</span><span class="hl str">&quot;Creature %,d is %s, and performed %,d exchanges&quot;</span><span class="hl sym">,</span> id<span class="hl sym">,</span> colour<span class="hl sym">,</span> count<span class="hl sym">);</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">run</span><span class="hl sym">() {</span>
         <span class="hl kwa">try</span> <span class="hl sym">{</span>
            <span class="hl kwa">while</span> <span class="hl sym">(</span>meetings<span class="hl sym">.</span><span class="hl kwd">getAndAdd</span><span class="hl sym">(-</span>BLOCK<span class="hl sym">) &gt;=</span> <span class="hl num">0</span><span class="hl sym">)</span>
               <span class="hl kwd">block</span><span class="hl sym">();</span>
         <span class="hl sym">}</span> <span class="hl kwa">catch</span> <span class="hl sym">(</span><span class="hl kwc">InterruptedException</span> ie<span class="hl sym">) {</span>
            <span class="hl slc">// ignore, exit.</span>
         <span class="hl sym">}</span> <span class="hl kwa">finally</span> <span class="hl sym">{</span>
            done<span class="hl sym">.</span><span class="hl kwd">release</span><span class="hl sym">();</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">private</span> <span class="hl kwb">void</span> <span class="hl kwd">block</span><span class="hl sym">()</span> <span class="hl kwa">throws</span> <span class="hl kwc">InterruptedException</span> <span class="hl sym">{</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> BLOCK<span class="hl sym">;</span> i<span class="hl sym">++)</span>
            colour <span class="hl sym">=</span> <span class="hl kwd">doCompliment</span><span class="hl sym">(</span>colour<span class="hl sym">,</span> meetingPlace<span class="hl sym">.</span><span class="hl kwd">exchange</span><span class="hl sym">(</span>colour<span class="hl sym">));</span>
         count <span class="hl sym">+=</span> BLOCK<span class="hl sym">;</span>
      <span class="hl sym">}</span>

   <span class="hl sym">}</span>

   enum Colour <span class="hl sym">{</span>
      blue<span class="hl sym">,</span> red<span class="hl sym">,</span> yellow
   <span class="hl sym">}</span>

   <span class="hl kwa">static</span> Colour <span class="hl kwd">doCompliment</span><span class="hl sym">(</span>Colour c1<span class="hl sym">,</span> Colour c2<span class="hl sym">) {</span>
      <span class="hl kwa">switch</span> <span class="hl sym">(</span>c1<span class="hl sym">) {</span>
      <span class="hl kwa">case</span> blue<span class="hl sym">:</span>
         <span class="hl kwa">switch</span> <span class="hl sym">(</span>c2<span class="hl sym">) {</span>
         <span class="hl kwa">case</span> blue<span class="hl sym">:</span>
            <span class="hl kwa">return</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">;</span>
         <span class="hl kwa">case</span> red<span class="hl sym">:</span>
            <span class="hl kwa">return</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">;</span>
         <span class="hl kwa">case</span> yellow<span class="hl sym">:</span>
            <span class="hl kwa">return</span> Colour<span class="hl sym">.</span>red<span class="hl sym">;</span>
         <span class="hl sym">}</span>
      <span class="hl kwa">case</span> red<span class="hl sym">:</span>
         <span class="hl kwa">switch</span> <span class="hl sym">(</span>c2<span class="hl sym">) {</span>
         <span class="hl kwa">case</span> blue<span class="hl sym">:</span>
            <span class="hl kwa">return</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">;</span>
         <span class="hl kwa">case</span> red<span class="hl sym">:</span>
            <span class="hl kwa">return</span> Colour<span class="hl sym">.</span>red<span class="hl sym">;</span>
         <span class="hl kwa">case</span> yellow<span class="hl sym">:</span>
            <span class="hl kwa">return</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">;</span>
         <span class="hl sym">}</span>
      <span class="hl kwa">default</span><span class="hl sym">:</span>
         <span class="hl kwa">switch</span> <span class="hl sym">(</span>c2<span class="hl sym">) {</span>
         <span class="hl kwa">case</span> blue<span class="hl sym">:</span>
            <span class="hl kwa">return</span> Colour<span class="hl sym">.</span>red<span class="hl sym">;</span>
         <span class="hl kwa">case</span> red<span class="hl sym">:</span>
            <span class="hl kwa">return</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">;</span>
         <span class="hl kwa">default</span><span class="hl sym">:</span>
            <span class="hl kwa">return</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">;</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>
