<span class="hl com">(*</span>
<span class="hl com"> *  The Computer Language Benchmarks Game</span>
<span class="hl com"> *  http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> *  contributed by Jordan P.</span>
<span class="hl com"> *</span>
<span class="hl com"> *)</span>


<span class="hl kwa">let</span> fasta_list <span class="hl sym">=</span>
  <span class="hl kwa">let rec</span> loop list <span class="hl sym">=</span>
    <span class="hl kwa">try</span> 
      <span class="hl kwa">let</span> line <span class="hl sym">=</span> input_line stdin <span class="hl kwa">in</span>
      <span class="hl kwa">let</span> line <span class="hl sym">=</span> line ^ <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl kwa">in</span>
      loop <span class="hl sym">(</span>line <span class="hl sym">::</span> list<span class="hl sym">)</span>
    <span class="hl kwa">with</span> <span class="hl kwd">End_of_file</span> <span class="hl sym">-&gt;</span> <span class="hl kwc">List</span><span class="hl sym">.</span>rev list
  <span class="hl kwa">in</span> loop <span class="hl sym">[]</span>
<span class="hl sym">;;</span>

<span class="hl kwa">let</span> seq_length seq <span class="hl sym">=</span>
  <span class="hl kwc">List</span><span class="hl sym">.</span>fold_left <span class="hl sym">(</span><span class="hl kwa">fun</span> num line <span class="hl sym">-&gt;</span> num <span class="hl sym">+ (</span><span class="hl kwc">String</span><span class="hl sym">.</span>length line<span class="hl sym">))</span> <span class="hl num">0</span> seq
<span class="hl sym">;;</span>


<span class="hl kwa">let</span> comment_out flist <span class="hl sym">=</span>
  <span class="hl kwa">let</span> not_comment line <span class="hl sym">=</span> 
      <span class="hl kwa">let</span> first_char <span class="hl sym">= (</span><span class="hl kwc">String</span><span class="hl sym">.</span>sub line <span class="hl num">0 1</span><span class="hl sym">)</span> <span class="hl kwa">in</span>
      <span class="hl kwa">if</span> first_char <span class="hl sym">&lt;&gt;</span> <span class="hl str">&quot;&gt;&quot;</span> <span class="hl sym">&amp;&amp;</span> first_char <span class="hl sym">&lt;&gt;</span> <span class="hl str">&quot;;&quot;</span> <span class="hl kwa">then true else false</span>
  <span class="hl kwa">in</span>
  <span class="hl kwc">List</span><span class="hl sym">.</span>filter not_comment  flist
<span class="hl sym">;;</span>

<span class="hl kwa">let</span> remove_linefeeds flist <span class="hl sym">=</span> 
  <span class="hl kwa">let</span> clean str <span class="hl sym">=</span> <span class="hl kwc">Str</span><span class="hl sym">.</span>replace_first <span class="hl sym">(</span><span class="hl kwc">Str</span><span class="hl sym">.</span>regexp_string <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span> <span class="hl str">&quot;&quot;</span> str <span class="hl kwa">in</span>
  <span class="hl kwc">List</span><span class="hl sym">.</span>map clean flist
<span class="hl sym">;;</span>

<span class="hl kwa">let</span> variants <span class="hl sym">= [</span>
  <span class="hl str">&quot;agggtaaa</span><span class="hl esc">\\</span><span class="hl str">|tttaccct&quot;</span><span class="hl sym">;</span>    
  <span class="hl str">&quot;[cgt]gggtaaa</span><span class="hl esc">\\</span><span class="hl str">|tttaccc[acg]&quot;</span><span class="hl sym">;</span>
  <span class="hl str">&quot;a[act]ggtaaa</span><span class="hl esc">\\</span><span class="hl str">|tttacc[agt]t&quot;</span><span class="hl sym">;</span>  
  <span class="hl str">&quot;ag[act]gtaaa</span><span class="hl esc">\\</span><span class="hl str">|tttac[agt]ct&quot;</span><span class="hl sym">;</span>
  <span class="hl str">&quot;agg[act]taaa</span><span class="hl esc">\\</span><span class="hl str">|ttta[agt]cct&quot;</span><span class="hl sym">;</span>
  <span class="hl str">&quot;aggg[acg]aaa</span><span class="hl esc">\\</span><span class="hl str">|ttt[cgt]ccct&quot;</span><span class="hl sym">;</span>
  <span class="hl str">&quot;agggt[cgt]aa</span><span class="hl esc">\\</span><span class="hl str">|tt[acg]accct&quot;</span><span class="hl sym">;</span>
  <span class="hl str">&quot;agggta[cgt]a</span><span class="hl esc">\\</span><span class="hl str">|t[acg]taccct&quot;</span><span class="hl sym">;</span>
  <span class="hl str">&quot;agggtaa[cgt]</span><span class="hl esc">\\</span><span class="hl str">|[acg]ttaccct&quot;</span>
<span class="hl sym">]</span>

<span class="hl kwa">let</span> find_variants flist <span class="hl sym">=</span> 
  <span class="hl kwa">let</span> find_matches match_string <span class="hl sym">=</span> 
    <span class="hl kwa">let</span> regex <span class="hl sym">=</span> <span class="hl kwc">Str</span><span class="hl sym">.</span>regexp match_string <span class="hl kwa">in</span>
    <span class="hl kwa">let</span> get_total_matches rx str <span class="hl sym">=</span>
      <span class="hl kwa">let rec</span> loop num total <span class="hl sym">=</span>
        <span class="hl kwa">try</span> 
          <span class="hl kwa">let</span> index <span class="hl sym">=</span> <span class="hl kwc">Str</span><span class="hl sym">.</span>search_forward rx str num <span class="hl kwa">in</span>
          loop <span class="hl sym">(</span>index<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) (</span>total <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
        <span class="hl kwa">with</span> <span class="hl kwd">Not_found</span> <span class="hl sym">-&gt;</span> total 
      <span class="hl kwa">in</span> loop <span class="hl num">0 0</span>
    <span class="hl kwa">in</span>
    <span class="hl kwa">let rec</span> loop list total <span class="hl sym">=</span>
      <span class="hl kwa">match</span> list <span class="hl kwa">with</span> 
      <span class="hl sym">[] -&gt; (</span>match_string<span class="hl sym">,</span> total<span class="hl sym">)</span> 
    <span class="hl sym">| (</span>hd <span class="hl sym">:: []) -&gt;</span> 
        <span class="hl kwa">let</span> matches <span class="hl sym">=</span> get_total_matches regex hd <span class="hl kwa">in</span>
        loop <span class="hl sym">[] (</span>total <span class="hl sym">+</span> matches<span class="hl sym">)</span>
    <span class="hl sym">| (</span>hd1 <span class="hl sym">::</span> hd2 <span class="hl sym">::</span> tl<span class="hl sym">) -&gt;</span> 
        <span class="hl kwa">let</span> matches <span class="hl sym">=</span> get_total_matches regex <span class="hl sym">(</span>hd1 ^ hd2<span class="hl sym">)</span> <span class="hl kwa">in</span>
        <span class="hl kwa">let</span> matches <span class="hl sym">=</span> matches <span class="hl sym">- (</span>get_total_matches regex hd1<span class="hl sym">)</span> <span class="hl kwa">in</span>
        loop <span class="hl sym">(</span>hd2 <span class="hl sym">::</span> tl<span class="hl sym">) (</span>total <span class="hl sym">+</span> matches<span class="hl sym">)</span>
    <span class="hl kwa">in</span> loop flist <span class="hl num">0</span>
  <span class="hl kwa">in</span>
  <span class="hl kwc">List</span><span class="hl sym">.</span>map find_matches variants
<span class="hl sym">;;</span>

<span class="hl kwa">let</span> print_variants vars <span class="hl sym">=</span> 
  <span class="hl kwa">let rec</span> loop vars <span class="hl sym">=</span>
    <span class="hl kwa">match</span> vars <span class="hl kwa">with</span>
    <span class="hl sym">[] -&gt; ()</span>
  <span class="hl sym">| (</span>hd <span class="hl sym">::</span> tl<span class="hl sym">) -&gt;</span> 
      <span class="hl kwa">match</span> hd <span class="hl kwa">with</span> <span class="hl sym">(</span>pat<span class="hl sym">,</span> num<span class="hl sym">) -&gt;</span> 
        <span class="hl kwa">let</span> pat <span class="hl sym">=</span> <span class="hl kwc">Str</span><span class="hl sym">.</span>global_replace <span class="hl sym">(</span><span class="hl kwc">Str</span><span class="hl sym">.</span>regexp_string <span class="hl str">&quot;</span><span class="hl esc">\\</span><span class="hl str">&quot;</span><span class="hl sym">)</span> <span class="hl str">&quot;&quot;</span> pat <span class="hl kwa">in</span>
        <span class="hl kwc">Printf</span><span class="hl sym">.</span>printf <span class="hl str">&quot;%s %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> pat num<span class="hl sym">;</span>
        loop tl
  <span class="hl kwa">in</span> loop vars
<span class="hl sym">;;</span>

<span class="hl kwa">let</span> iubs <span class="hl sym">= [</span>
  <span class="hl sym">(</span><span class="hl str">&quot;B&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl sym">);</span>
  <span class="hl sym">(</span><span class="hl str">&quot;D&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl sym">);</span>
  <span class="hl sym">(</span><span class="hl str">&quot;H&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl sym">);</span>
  <span class="hl sym">(</span><span class="hl str">&quot;K&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(g|t)&quot;</span><span class="hl sym">);</span>
  <span class="hl sym">(</span><span class="hl str">&quot;M&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c)&quot;</span><span class="hl sym">);</span>
  <span class="hl sym">(</span><span class="hl str">&quot;N&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl sym">);</span>
  <span class="hl sym">(</span><span class="hl str">&quot;R&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|g)&quot;</span><span class="hl sym">);</span>
  <span class="hl sym">(</span><span class="hl str">&quot;S&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|g)&quot;</span><span class="hl sym">);</span>
  <span class="hl sym">(</span><span class="hl str">&quot;V&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl sym">);</span>
  <span class="hl sym">(</span><span class="hl str">&quot;W&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|t)&quot;</span><span class="hl sym">);</span>
  <span class="hl sym">(</span><span class="hl str">&quot;Y&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|t)&quot;</span><span class="hl sym">);</span>
<span class="hl sym">];;</span>

<span class="hl kwa">let</span> replace_IUBs flist <span class="hl sym">=</span> 
  <span class="hl kwa">let</span> replace iub_pair str <span class="hl sym">=</span>
    <span class="hl kwa">match</span> iub_pair <span class="hl kwa">with</span> <span class="hl sym">(</span>original<span class="hl sym">,</span> updated<span class="hl sym">) -&gt;</span>
      <span class="hl kwa">let</span> regex <span class="hl sym">=</span> <span class="hl kwc">Str</span><span class="hl sym">.</span>regexp original <span class="hl kwa">in</span>
      <span class="hl kwc">Str</span><span class="hl sym">.</span>global_replace regex updated str
  <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> replace_all str <span class="hl sym">=</span>
    <span class="hl kwa">let rec</span> loop str pairs <span class="hl sym">=</span>
      <span class="hl kwa">match</span> pairs <span class="hl kwa">with</span> 
      <span class="hl sym">[] -&gt;</span> str
    <span class="hl sym">| (</span>hd <span class="hl sym">::</span> tl<span class="hl sym">) -&gt;</span>
        <span class="hl kwa">let</span> str <span class="hl sym">=</span> replace hd str <span class="hl kwa">in</span>
        loop str tl
    <span class="hl kwa">in</span> loop str iubs
  <span class="hl kwa">in</span>
  <span class="hl kwc">List</span><span class="hl sym">.</span>map replace_all flist
<span class="hl sym">;;</span>

<span class="hl com">(* Run the program with input from stdin, output to stdout *)</span>
<span class="hl kwa">let</span> _ <span class="hl sym">=</span> 
  <span class="hl kwa">let</span> flist <span class="hl sym">=</span> fasta_list <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> seq_length1 <span class="hl sym">=</span> seq_length flist <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> flist <span class="hl sym">=</span> comment_out flist <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> flist <span class="hl sym">=</span> remove_linefeeds flist <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> seq_length2 <span class="hl sym">=</span> seq_length flist <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> variants <span class="hl sym">=</span> find_variants flist <span class="hl kwa">in</span>
  print_variants variants<span class="hl sym">;</span>
  <span class="hl kwa">let</span> flist <span class="hl sym">=</span> replace_IUBs flist <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> seq_length3 <span class="hl sym">=</span> seq_length flist <span class="hl kwa">in</span>

  <span class="hl kwc">Printf</span><span class="hl sym">.</span>printf <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
  <span class="hl kwc">Printf</span><span class="hl sym">.</span>printf <span class="hl str">&quot;%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> seq_length1<span class="hl sym">;</span>
  <span class="hl kwc">Printf</span><span class="hl sym">.</span>printf <span class="hl str">&quot;%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> seq_length2<span class="hl sym">;</span>
  <span class="hl kwc">Printf</span><span class="hl sym">.</span>printf <span class="hl str">&quot;%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> seq_length3<span class="hl sym">;</span>
<span class="hl sym">;;</span>
