<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Kannan Goundan</span>
<span class="hl com">   modified by Isaac Gouy</span>
<span class="hl com">   optimized by David Pollak</span>
<span class="hl com">   updated to 2.8 by Rex Kerr</span>
<span class="hl com">   modified by Piotr Tarsa</span>
<span class="hl com">*/</span>

<span class="hl kwa">sealed abstract class</span> <span class="hl kwc">Node</span><span class="hl sym">(</span>i<span class="hl sym">:</span> Int<span class="hl sym">,</span> left<span class="hl sym">:</span> <span class="hl kwc">Node</span><span class="hl sym">,</span> right<span class="hl sym">:</span> <span class="hl kwc">Node</span><span class="hl sym">) {</span>
  <span class="hl kwa">def</span> isum<span class="hl sym">:</span> Int
<span class="hl sym">}</span>
<span class="hl kwa">case class</span> NonLeaf<span class="hl sym">(</span>i<span class="hl sym">:</span> Int<span class="hl sym">,</span> left<span class="hl sym">:</span> <span class="hl kwc">Node</span><span class="hl sym">,</span> right<span class="hl sym">:</span> <span class="hl kwc">Node</span><span class="hl sym">)</span> <span class="hl kwa">extends</span> <span class="hl kwc">Node</span><span class="hl sym">(</span>i<span class="hl sym">,</span> left<span class="hl sym">,</span> right<span class="hl sym">) {</span>
  <span class="hl kwa">def</span> isum<span class="hl sym">:</span> Int <span class="hl sym">=</span> i <span class="hl sym">+</span> left<span class="hl sym">.</span>isum <span class="hl sym">-</span> right<span class="hl sym">.</span>isum
<span class="hl sym">}</span>
<span class="hl kwa">case class</span> Leaf<span class="hl sym">(</span>i<span class="hl sym">:</span> Int<span class="hl sym">)</span> <span class="hl kwa">extends</span> <span class="hl kwc">Node</span><span class="hl sym">(</span>i<span class="hl sym">,</span> NullNode<span class="hl sym">,</span> NullNode<span class="hl sym">) {</span>
  <span class="hl kwa">def</span> isum<span class="hl sym">:</span> Int <span class="hl sym">=</span> i
<span class="hl sym">}</span>
<span class="hl kwa">case object</span> NullNode <span class="hl kwa">extends</span> <span class="hl kwc">Node</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> <span class="hl kwa">new</span> Leaf<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">),</span> <span class="hl kwa">new</span> Leaf<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)) {</span>
  <span class="hl kwa">def</span> isum<span class="hl sym">:</span> Int <span class="hl sym">=</span> <span class="hl num">0</span>
<span class="hl sym">}</span>

<span class="hl kwa">object</span> Tree <span class="hl sym">{</span>
  <span class="hl kwa">def</span> apply<span class="hl sym">(</span>i<span class="hl sym">:</span> Int<span class="hl sym">,</span> depth<span class="hl sym">:</span> Int<span class="hl sym">):</span> <span class="hl kwc">Node</span> <span class="hl sym">= {</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>depth <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> NonLeaf<span class="hl sym">(</span>i<span class="hl sym">,</span> Tree<span class="hl sym">(</span>i <span class="hl sym">*</span> <span class="hl num">2</span> <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> depth <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">),</span> Tree<span class="hl sym">(</span>i <span class="hl sym">*</span> <span class="hl num">2</span><span class="hl sym">,</span> depth <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">))</span>
    <span class="hl kwa">else</span> Leaf<span class="hl sym">(</span>i<span class="hl sym">)</span>
  <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwa">object</span> binarytrees <span class="hl sym">{</span>
  <span class="hl kwa">def</span> main<span class="hl sym">(</span>args<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">String</span><span class="hl sym">]) = {</span>
    <span class="hl kwa">val</span> n <span class="hl sym">=</span> <span class="hl kwa">try</span><span class="hl sym">{</span> args<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">).</span>toInt <span class="hl sym">}</span> <span class="hl kwa">catch</span> <span class="hl sym">{</span> <span class="hl kwa">case</span> _ <span class="hl sym">=&gt;</span> <span class="hl num">1</span> <span class="hl sym">}</span>
    <span class="hl kwa">val</span> minDepth <span class="hl sym">=</span> <span class="hl num">4</span>
    <span class="hl kwa">val</span> maxDepth <span class="hl sym">=</span> n max <span class="hl sym">(</span>minDepth <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">)</span>

    <span class="hl kwa">def</span> print<span class="hl sym">(</span>name<span class="hl sym">:</span> <span class="hl kwc">String</span><span class="hl sym">,</span> depth<span class="hl sym">:</span> Int<span class="hl sym">,</span> check<span class="hl sym">:</span> Int<span class="hl sym">) =</span>
      println<span class="hl sym">(</span>name <span class="hl sym">+</span> <span class="hl str">&quot; of depth &quot;</span> <span class="hl sym">+</span> depth <span class="hl sym">+</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">check: &quot;</span> <span class="hl sym">+</span> check<span class="hl sym">)</span>

    print<span class="hl sym">(</span><span class="hl str">&quot;stretch tree&quot;</span><span class="hl sym">,</span> maxDepth <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span> Tree<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> maxDepth <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">).</span>isum<span class="hl sym">)</span>
    <span class="hl kwa">val</span> longLivedTree <span class="hl sym">=</span> Tree<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> maxDepth<span class="hl sym">)</span>
    minDepth to maxDepth by <span class="hl num">2</span> foreach <span class="hl sym">{</span>
      depth <span class="hl sym">=&gt;</span>
      <span class="hl kwa">val</span> iterations <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>maxDepth <span class="hl sym">-</span> depth <span class="hl sym">+</span> minDepth<span class="hl sym">)</span>
      <span class="hl kwa">var</span> i<span class="hl sym">,</span> sum <span class="hl sym">=</span> <span class="hl num">0</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> iterations<span class="hl sym">) {</span>
        i <span class="hl sym">+=</span> <span class="hl num">1</span>
        sum <span class="hl sym">+=</span> Tree<span class="hl sym">(</span>i<span class="hl sym">,</span> depth<span class="hl sym">).</span>isum <span class="hl sym">+</span> Tree<span class="hl sym">(-</span>i<span class="hl sym">,</span> depth<span class="hl sym">).</span>isum
      <span class="hl sym">}</span>
      print<span class="hl sym">(</span>iterations <span class="hl sym">*</span><span class="hl num">2</span>  <span class="hl sym">+</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">trees&quot;</span><span class="hl sym">,</span> depth<span class="hl sym">,</span> sum<span class="hl sym">)</span>
    <span class="hl sym">}</span>
    print<span class="hl sym">(</span><span class="hl str">&quot;long lived tree&quot;</span><span class="hl sym">,</span> maxDepth<span class="hl sym">,</span> longLivedTree<span class="hl sym">.</span>isum<span class="hl sym">)</span>
  <span class="hl sym">}</span>
<span class="hl sym">}</span>
