<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://shootout.alioth.debian.org/</span>
<span class="hl slc"># contributed by Daniel Nanz 2008-04-10</span>
<span class="hl slc"># 2to3</span>

<span class="hl kwa">import</span> sys
<span class="hl kwa">import</span> _thread
<span class="hl kwa">import</span> time

<span class="hl slc"># colors and matching</span>
creature_colors <span class="hl sym">= [</span><span class="hl str">'blue'</span><span class="hl sym">,</span> <span class="hl str">'red'</span><span class="hl sym">,</span> <span class="hl str">'yellow'</span><span class="hl sym">]</span>

<span class="hl kwa">def</span> <span class="hl kwd">complement</span><span class="hl sym">(</span>c1<span class="hl sym">,</span> c2<span class="hl sym">):</span>

    <span class="hl kwa">if</span> c1 <span class="hl sym">==</span> c2<span class="hl sym">:</span> <span class="hl kwa">return</span> c1
    <span class="hl kwa">if</span> c1 <span class="hl sym">==</span> <span class="hl str">'blue'</span><span class="hl sym">:</span>
        <span class="hl kwa">if</span> c2 <span class="hl sym">==</span> <span class="hl str">'red'</span><span class="hl sym">:</span> <span class="hl kwa">return</span> <span class="hl str">'yellow'</span>
        <span class="hl kwa">return</span> <span class="hl str">'red'</span>
    <span class="hl kwa">if</span> c1 <span class="hl sym">==</span> <span class="hl str">'red'</span><span class="hl sym">:</span>
        <span class="hl kwa">if</span> c2 <span class="hl sym">==</span> <span class="hl str">'blue'</span><span class="hl sym">:</span> <span class="hl kwa">return</span> <span class="hl str">'yellow'</span>
        <span class="hl kwa">return</span> <span class="hl str">'blue'</span>
    <span class="hl kwa">if</span> c2 <span class="hl sym">==</span> <span class="hl str">'blue'</span><span class="hl sym">:</span> <span class="hl kwa">return</span> <span class="hl str">'red'</span>
    <span class="hl kwa">return</span> <span class="hl str">'blue'</span>


compl_dict <span class="hl sym">=</span> <span class="hl kwb">dict</span><span class="hl sym">(((</span>c1<span class="hl sym">,</span> c2<span class="hl sym">),</span> <span class="hl kwd">complement</span><span class="hl sym">(</span>c1<span class="hl sym">,</span> c2<span class="hl sym">))</span>
                  <span class="hl kwa">for</span> c1 <span class="hl kwa">in</span> creature_colors
                  <span class="hl kwa">for</span> c2 <span class="hl kwa">in</span> creature_colors<span class="hl sym">)</span>


<span class="hl kwa">def</span> <span class="hl kwd">check_complement</span><span class="hl sym">(</span>colors<span class="hl sym">=</span>creature_colors<span class="hl sym">,</span> compl<span class="hl sym">=</span>compl_dict<span class="hl sym">):</span>

    <span class="hl kwa">for</span> c1 <span class="hl kwa">in</span> colors<span class="hl sym">:</span>
        <span class="hl kwa">for</span> c2 <span class="hl kwa">in</span> colors<span class="hl sym">:</span>
            <span class="hl kwa">print</span><span class="hl sym">(</span><span class="hl str">'%s + %s -&gt; %s'</span> <span class="hl sym">% (</span>c1<span class="hl sym">,</span> c2<span class="hl sym">,</span> compl<span class="hl sym">[(</span>c1<span class="hl sym">,</span> c2<span class="hl sym">)]))</span>
    <span class="hl kwa">print</span><span class="hl sym">(</span><span class="hl str">''</span><span class="hl sym">)</span>


<span class="hl slc"># reporting</span>
<span class="hl kwa">def</span> <span class="hl kwd">spellout</span><span class="hl sym">(</span>n<span class="hl sym">):</span>

    numbers <span class="hl sym">= [</span><span class="hl str">'zero'</span><span class="hl sym">,</span> <span class="hl str">'one'</span><span class="hl sym">,</span> <span class="hl str">'two'</span><span class="hl sym">,</span> <span class="hl str">'three'</span><span class="hl sym">,</span> <span class="hl str">'four'</span><span class="hl sym">,</span>
               <span class="hl str">'five'</span><span class="hl sym">,</span> <span class="hl str">'six'</span><span class="hl sym">,</span> <span class="hl str">'seven'</span><span class="hl sym">,</span> <span class="hl str">'eight'</span><span class="hl sym">,</span> <span class="hl str">'nine'</span><span class="hl sym">]</span>
    <span class="hl kwa">return</span> <span class="hl str">' '</span> <span class="hl sym">+</span> <span class="hl str">' '</span><span class="hl sym">.</span><span class="hl kwd">join</span><span class="hl sym">(</span>numbers<span class="hl sym">[</span><span class="hl kwb">int</span><span class="hl sym">(</span>c<span class="hl sym">)]</span> <span class="hl kwa">for</span> c <span class="hl kwa">in</span> <span class="hl kwb">str</span><span class="hl sym">(</span>n<span class="hl sym">))</span>


<span class="hl kwa">def</span> <span class="hl kwd">report</span><span class="hl sym">(</span>input_zoo<span class="hl sym">,</span> met<span class="hl sym">,</span> self_met<span class="hl sym">):</span>

    <span class="hl kwa">print</span><span class="hl sym">(</span><span class="hl str">' '</span> <span class="hl sym">+</span> <span class="hl str">' '</span><span class="hl sym">.</span><span class="hl kwd">join</span><span class="hl sym">(</span>input_zoo<span class="hl sym">))</span>
    <span class="hl kwa">for</span> m<span class="hl sym">,</span> sm <span class="hl kwa">in</span> <span class="hl kwb">zip</span><span class="hl sym">(</span>met<span class="hl sym">,</span> self_met<span class="hl sym">):</span>
        <span class="hl kwa">print</span><span class="hl sym">(</span><span class="hl kwb">str</span><span class="hl sym">(</span>m<span class="hl sym">) +</span> <span class="hl kwd">spellout</span><span class="hl sym">(</span>sm<span class="hl sym">))</span>
    <span class="hl kwa">print</span><span class="hl sym">(</span><span class="hl kwd">spellout</span><span class="hl sym">(</span><span class="hl kwb">sum</span><span class="hl sym">(</span>met<span class="hl sym">)) +</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">)</span>


<span class="hl slc"># the zoo</span>
<span class="hl kwa">def</span> <span class="hl kwd">creature</span><span class="hl sym">(</span>my_id<span class="hl sym">,</span> venue<span class="hl sym">,</span> my_lock_acquire<span class="hl sym">,</span> in_lock_acquire<span class="hl sym">,</span> out_lock_release<span class="hl sym">):</span>

    <span class="hl kwa">while True</span><span class="hl sym">:</span>
        <span class="hl kwd">my_lock_acquire</span><span class="hl sym">()</span>   <span class="hl slc"># only proceed if not already at meeting place</span>
        <span class="hl kwd">in_lock_acquire</span><span class="hl sym">()</span>   <span class="hl slc"># only proceed when holding in_lock</span>
        venue<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] =</span> my_id    <span class="hl slc"># register at meeting place</span>
        <span class="hl kwd">out_lock_release</span><span class="hl sym">()</span>  <span class="hl slc"># signal &quot;registration ok&quot;</span>


<span class="hl kwa">def</span> <span class="hl kwd">let_them_meet</span><span class="hl sym">(</span>meetings_left<span class="hl sym">,</span> input_zoo<span class="hl sym">,</span>
                  compl<span class="hl sym">=</span>compl_dict<span class="hl sym">,</span> allocate<span class="hl sym">=</span>_thread<span class="hl sym">.</span>allocate_lock<span class="hl sym">):</span>
    <span class="hl slc"># prepare</span>
    c_no <span class="hl sym">=</span> <span class="hl kwb">len</span><span class="hl sym">(</span>input_zoo<span class="hl sym">)</span>
    venue <span class="hl sym">= [-</span><span class="hl num">1</span><span class="hl sym">]</span>
    met <span class="hl sym">= [</span><span class="hl num">0</span><span class="hl sym">] *</span> c_no
    self_met <span class="hl sym">= [</span><span class="hl num">0</span><span class="hl sym">] *</span> c_no
    colors <span class="hl sym">=</span> input_zoo<span class="hl sym">[:]</span>

    in_lock <span class="hl sym">=</span> <span class="hl kwd">allocate</span><span class="hl sym">()</span>
    in_lock_acquire <span class="hl sym">=</span> in_lock<span class="hl sym">.</span>acquire     <span class="hl slc"># function aliases</span>
    in_lock_release <span class="hl sym">=</span> in_lock<span class="hl sym">.</span>release     <span class="hl slc"># (minor performance gain)</span>
    <span class="hl kwd">in_lock_acquire</span><span class="hl sym">()</span>
    out_lock <span class="hl sym">=</span> <span class="hl kwd">allocate</span><span class="hl sym">()</span>
    out_lock_release <span class="hl sym">=</span> out_lock<span class="hl sym">.</span>release
    out_lock_acquire <span class="hl sym">=</span> out_lock<span class="hl sym">.</span>acquire
    <span class="hl kwd">out_lock_acquire</span><span class="hl sym">()</span>
    locks <span class="hl sym">= [</span><span class="hl kwd">allocate</span><span class="hl sym">()</span> <span class="hl kwa">for</span> c <span class="hl kwa">in</span> input_zoo<span class="hl sym">]</span>

    <span class="hl slc"># let creatures wild</span>
    <span class="hl kwa">for</span> ci <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl sym">(</span>c_no<span class="hl sym">):</span>
        args <span class="hl sym">= (</span>ci<span class="hl sym">,</span> venue<span class="hl sym">,</span> locks<span class="hl sym">[</span>ci<span class="hl sym">].</span>acquire<span class="hl sym">,</span> in_lock_acquire<span class="hl sym">,</span> out_lock_release<span class="hl sym">)</span>
        new <span class="hl sym">=</span> _thread<span class="hl sym">.</span><span class="hl kwd">start_new_thread</span><span class="hl sym">(</span>creature<span class="hl sym">,</span> args<span class="hl sym">)</span>
    time<span class="hl sym">.</span><span class="hl kwd">sleep</span><span class="hl sym">(</span><span class="hl num">0.05</span><span class="hl sym">)</span>     <span class="hl slc"># to reduce work-load imbalance</span>

    <span class="hl kwd">in_lock_release</span><span class="hl sym">()</span>   <span class="hl slc"># signal &quot;meeting_place open for registration&quot;</span>
    <span class="hl kwd">out_lock_acquire</span><span class="hl sym">()</span>  <span class="hl slc"># only proceed with a &quot;registration ok&quot; signal</span>
    id1 <span class="hl sym">=</span> venue<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]</span>
    <span class="hl kwa">while</span> meetings_left <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">:</span>
        <span class="hl kwd">in_lock_release</span><span class="hl sym">()</span>
        <span class="hl kwd">out_lock_acquire</span><span class="hl sym">()</span>
        id2 <span class="hl sym">=</span> venue<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]</span>
        <span class="hl kwa">if</span> id1 <span class="hl sym">!=</span> id2<span class="hl sym">:</span>
            new_color <span class="hl sym">=</span> compl<span class="hl sym">[(</span>colors<span class="hl sym">[</span>id1<span class="hl sym">],</span> colors<span class="hl sym">[</span>id2<span class="hl sym">])]</span>
            colors<span class="hl sym">[</span>id1<span class="hl sym">] =</span> new_color
            colors<span class="hl sym">[</span>id2<span class="hl sym">] =</span> new_color
            met<span class="hl sym">[</span>id1<span class="hl sym">] +=</span> <span class="hl num">1</span>
            met<span class="hl sym">[</span>id2<span class="hl sym">] +=</span> <span class="hl num">1</span>
        <span class="hl kwa">else</span><span class="hl sym">:</span>
            self_met<span class="hl sym">[</span>id1<span class="hl sym">] +=</span> <span class="hl num">1</span>
            met<span class="hl sym">[</span>id1<span class="hl sym">] +=</span> <span class="hl num">1</span>
        meetings_left <span class="hl sym">-=</span> <span class="hl num">1</span>
        <span class="hl kwa">if</span> meetings_left <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">:</span>
            locks<span class="hl sym">[</span>id1<span class="hl sym">].</span><span class="hl kwd">release</span><span class="hl sym">()</span>  <span class="hl slc"># signal &quot;you were kicked from meeting place&quot;</span>
            id1 <span class="hl sym">=</span> id2
        <span class="hl kwa">else</span><span class="hl sym">:</span>
            <span class="hl kwd">report</span><span class="hl sym">(</span>input_zoo<span class="hl sym">,</span> met<span class="hl sym">,</span> self_met<span class="hl sym">)</span>


<span class="hl kwa">def</span> <span class="hl kwd">chameneosiate</span><span class="hl sym">(</span>n<span class="hl sym">):</span>

    <span class="hl kwd">check_complement</span><span class="hl sym">()</span>
    <span class="hl kwd">let_them_meet</span><span class="hl sym">(</span>n<span class="hl sym">, [</span><span class="hl str">'blue'</span><span class="hl sym">,</span> <span class="hl str">'red'</span><span class="hl sym">,</span> <span class="hl str">'yellow'</span><span class="hl sym">])</span>
    <span class="hl kwd">let_them_meet</span><span class="hl sym">(</span>n<span class="hl sym">, [</span><span class="hl str">'blue'</span><span class="hl sym">,</span> <span class="hl str">'red'</span><span class="hl sym">,</span> <span class="hl str">'yellow'</span><span class="hl sym">,</span> <span class="hl str">'red'</span><span class="hl sym">,</span> <span class="hl str">'yellow'</span><span class="hl sym">,</span>
                      <span class="hl str">'blue'</span><span class="hl sym">,</span> <span class="hl str">'red'</span><span class="hl sym">,</span> <span class="hl str">'yellow'</span><span class="hl sym">,</span> <span class="hl str">'red'</span><span class="hl sym">,</span> <span class="hl str">'blue'</span><span class="hl sym">])</span>
    <span class="hl slc">#print ''</span>


<span class="hl kwd">chameneosiate</span><span class="hl sym">(</span><span class="hl kwb">int</span><span class="hl sym">(</span>sys<span class="hl sym">.</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]))</span>
