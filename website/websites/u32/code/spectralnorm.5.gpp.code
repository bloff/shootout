<span class="hl slc">// The Computer Language Benchmarks Game</span>
<span class="hl slc">// http://shootout.alioth.debian.org/</span>
<span class="hl slc">//</span>
<span class="hl slc">// Original C contributed by Sebastien Loisel</span>
<span class="hl slc">// Conversion to C++ by Jon Harrop</span>
<span class="hl slc">// OpenMP parallelize by The Anh Tran</span>

<span class="hl dir">#include &lt;cmath&gt;</span>
<span class="hl dir">#include &lt;cstdio&gt;</span>
<span class="hl dir">#include &lt;cstdlib&gt;</span>
<span class="hl dir">#include &lt;sched.h&gt;</span>
<span class="hl dir">#include &lt;omp.h&gt;</span>


<span class="hl dir">#define   N_REG   2</span>
<span class="hl dir">#define   ALG      64</span>

<span class="hl kwb">struct</span> Param
<span class="hl sym">{</span>
   <span class="hl kwb">double</span><span class="hl sym">*</span> u<span class="hl sym">;</span>
   <span class="hl kwb">double</span><span class="hl sym">*</span> tmp<span class="hl sym">;</span>
   <span class="hl kwb">double</span><span class="hl sym">*</span> v<span class="hl sym">;</span>

   <span class="hl kwb">int</span> N<span class="hl sym">;</span>
   <span class="hl kwb">int</span> r_begin<span class="hl sym">;</span>
   <span class="hl kwb">int</span> r_end<span class="hl sym">;</span>
<span class="hl sym">};</span>

<span class="hl kwd">__attribute__</span><span class="hl sym">((</span> <span class="hl kwd">regparm</span><span class="hl sym">(</span>N_REG<span class="hl sym">) ))</span>
<span class="hl kwb">double</span> <span class="hl sym">(*</span>eval_A<span class="hl sym">)(</span><span class="hl kwb">int</span> i<span class="hl sym">,</span> <span class="hl kwb">int</span> j<span class="hl sym">);</span>

<span class="hl kwd">__attribute__</span><span class="hl sym">((</span> <span class="hl kwd">regparm</span><span class="hl sym">(</span>N_REG<span class="hl sym">) ))</span>
<span class="hl kwb">double</span> <span class="hl kwd">f_eval_A</span><span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">,</span> <span class="hl kwb">int</span> j<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl slc">// Original is: 1.0 / (i+j) * (i+j+1) /2 + i+1;</span>
   <span class="hl kwb">int</span> d <span class="hl sym">= ( ((</span>i<span class="hl sym">+</span>j<span class="hl sym">) * (</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">+</span>j<span class="hl sym">)) &gt;&gt;</span> <span class="hl num">1</span> <span class="hl sym">)  +</span> i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">;</span>
   <span class="hl kwa">return</span> <span class="hl num">1.0</span> <span class="hl sym">/</span> d<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">eval_A_times_u</span> <span class="hl sym">(</span>Param <span class="hl sym">&amp;</span>p<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> p<span class="hl sym">.</span>r_begin<span class="hl sym">,</span> ie <span class="hl sym">=</span> p<span class="hl sym">.</span>r_end<span class="hl sym">;</span> i <span class="hl sym">&lt;</span> ie<span class="hl sym">;</span> i<span class="hl sym">++)</span>
   <span class="hl sym">{</span>
      <span class="hl kwb">double</span> sum <span class="hl sym">=</span> <span class="hl num">0.0</span><span class="hl sym">;</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> j <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> je <span class="hl sym">=</span> p<span class="hl sym">.</span>N<span class="hl sym">;</span> j <span class="hl sym">&lt;</span> je<span class="hl sym">;</span> j<span class="hl sym">++)</span>
         sum <span class="hl sym">+=</span> p<span class="hl sym">.</span>u<span class="hl sym">[</span>j<span class="hl sym">] *</span> <span class="hl kwd">eval_A</span><span class="hl sym">(</span>i<span class="hl sym">,</span> j<span class="hl sym">);</span>
      p<span class="hl sym">.</span>tmp<span class="hl sym">[</span>i<span class="hl sym">] =</span> sum<span class="hl sym">;</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">eval_At_times_u</span><span class="hl sym">(</span>Param <span class="hl sym">&amp;</span>p<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> p<span class="hl sym">.</span>r_begin<span class="hl sym">,</span> ie <span class="hl sym">=</span> p<span class="hl sym">.</span>r_end<span class="hl sym">;</span> i <span class="hl sym">&lt;</span> ie<span class="hl sym">;</span> i<span class="hl sym">++)</span>
   <span class="hl sym">{</span>
      <span class="hl kwb">double</span> sum <span class="hl sym">=</span> <span class="hl num">0.0</span><span class="hl sym">;</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> j <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> je <span class="hl sym">=</span> p<span class="hl sym">.</span>N<span class="hl sym">;</span> j <span class="hl sym">&lt;</span> je<span class="hl sym">;</span> j<span class="hl sym">++)</span>
         sum <span class="hl sym">+=</span> p<span class="hl sym">.</span>tmp<span class="hl sym">[</span>j<span class="hl sym">] *</span> <span class="hl kwd">eval_A</span><span class="hl sym">(</span>j<span class="hl sym">,</span> i<span class="hl sym">);</span>
      p<span class="hl sym">.</span>v<span class="hl sym">[</span>i<span class="hl sym">] =</span> sum<span class="hl sym">;</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">eval_AtA_times_u</span><span class="hl sym">(</span>Param <span class="hl sym">&amp;</span>p<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwd">eval_A_times_u</span><span class="hl sym">(</span> p <span class="hl sym">);</span>
   <span class="hl dir">#pragma omp barrier</span>

   <span class="hl kwd">eval_At_times_u</span><span class="hl sym">(</span> p <span class="hl sym">);</span>
   <span class="hl dir">#pragma omp barrier</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">GetThreadCount</span><span class="hl sym">()</span>
<span class="hl sym">{</span>
   cpu_set_t cs<span class="hl sym">;</span>
   <span class="hl kwd">CPU_ZERO</span><span class="hl sym">(&amp;</span>cs<span class="hl sym">);</span>
   <span class="hl kwd">sched_getaffinity</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span>cs<span class="hl sym">), &amp;</span>cs<span class="hl sym">);</span>

   <span class="hl kwb">int</span> count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">8</span><span class="hl sym">;</span> i<span class="hl sym">++)</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">CPU_ISSET</span><span class="hl sym">(</span>i<span class="hl sym">, &amp;</span>cs<span class="hl sym">))</span>
         count<span class="hl sym">++;</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">return</span> count<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">double</span> <span class="hl kwd">spectral_game</span><span class="hl sym">(</span><span class="hl kwb">int</span> N <span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwb">int</span> nthreads <span class="hl sym">=</span> <span class="hl kwd">GetThreadCount</span><span class="hl sym">();</span>
   <span class="hl kwb">int</span> chunk <span class="hl sym">=</span> N <span class="hl sym">/</span> nthreads<span class="hl sym">;</span>

   <span class="hl kwd">__attribute__</span><span class="hl sym">((</span><span class="hl kwd">aligned</span><span class="hl sym">(</span>ALG<span class="hl sym">)))</span>   <span class="hl kwb">double</span>   u   <span class="hl sym">[</span>N<span class="hl sym">];</span>
   <span class="hl kwd">__attribute__</span><span class="hl sym">((</span><span class="hl kwd">aligned</span><span class="hl sym">(</span>ALG<span class="hl sym">)))</span>   <span class="hl kwb">double</span>   tmp   <span class="hl sym">[</span>N<span class="hl sym">];</span>
   <span class="hl kwd">__attribute__</span><span class="hl sym">((</span><span class="hl kwd">aligned</span><span class="hl sym">(</span>ALG<span class="hl sym">)))</span>   <span class="hl kwb">double</span>   v   <span class="hl sym">[</span>N<span class="hl sym">];</span>

   <span class="hl kwb">double</span> vBv   <span class="hl sym">=</span> <span class="hl num">0.0</span><span class="hl sym">;</span>
   <span class="hl kwb">double</span> vv   <span class="hl sym">=</span> <span class="hl num">0.0</span><span class="hl sym">;</span>

   <span class="hl dir">#pragma omp parallel default(shared) num_threads(nthreads)</span>
   <span class="hl sym">{</span>
      <span class="hl dir">#pragma omp for schedule(static)</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> N<span class="hl sym">;</span> i<span class="hl sym">++)</span>
         u<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl num">1.0</span><span class="hl sym">;</span>

      <span class="hl kwb">int</span> threadid   <span class="hl sym">=</span> <span class="hl kwd">omp_get_thread_num</span><span class="hl sym">();</span>

      Param my_param<span class="hl sym">;</span>
      my_param<span class="hl sym">.</span>tmp   <span class="hl sym">=</span> tmp<span class="hl sym">;</span>
      my_param<span class="hl sym">.</span>N      <span class="hl sym">=</span> N<span class="hl sym">;</span>

      <span class="hl slc">// calculate each thread's working range [range1 .. range2) =&gt; static schedule here</span>
      my_param<span class="hl sym">.</span>r_begin <span class="hl sym">=</span> threadid <span class="hl sym">*</span> chunk<span class="hl sym">;</span>
      my_param<span class="hl sym">.</span>r_end <span class="hl sym">= (</span>threadid <span class="hl sym">&lt; (</span>nthreads <span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">))</span> ? <span class="hl sym">(</span>my_param<span class="hl sym">.</span>r_begin <span class="hl sym">+</span> chunk<span class="hl sym">) :</span> N<span class="hl sym">;</span>

      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> ite <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> ite <span class="hl sym">&lt;</span> <span class="hl num">10</span><span class="hl sym">;</span> ite<span class="hl sym">++)</span>
      <span class="hl sym">{</span>
         my_param<span class="hl sym">.</span>u <span class="hl sym">=</span> u<span class="hl sym">;</span>
         my_param<span class="hl sym">.</span>v <span class="hl sym">=</span> v<span class="hl sym">;</span>
         <span class="hl kwd">eval_AtA_times_u</span><span class="hl sym">(</span>my_param<span class="hl sym">);</span>

         my_param<span class="hl sym">.</span>u <span class="hl sym">=</span> v<span class="hl sym">;</span>
         my_param<span class="hl sym">.</span>v <span class="hl sym">=</span> u<span class="hl sym">;</span>
         <span class="hl kwd">eval_AtA_times_u</span><span class="hl sym">(</span>my_param<span class="hl sym">);</span>
      <span class="hl sym">}</span>

      <span class="hl dir">#pragma omp for schedule(static) reduction( + : vBv, vv ) nowait</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> N<span class="hl sym">;</span> i<span class="hl sym">++)</span>
      <span class="hl sym">{</span>
         vv   <span class="hl sym">+=</span> v<span class="hl sym">[</span>i<span class="hl sym">] *</span> v<span class="hl sym">[</span>i<span class="hl sym">];</span>
         vBv   <span class="hl sym">+=</span> u<span class="hl sym">[</span>i<span class="hl sym">] *</span> v<span class="hl sym">[</span>i<span class="hl sym">];</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span> <span class="hl slc">// end parallel region</span>

   <span class="hl kwa">return</span> <span class="hl kwd">sqrt</span><span class="hl sym">(</span> vBv<span class="hl sym">/</span>vv <span class="hl sym">);</span>
<span class="hl sym">}</span>


<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">*</span>argv<span class="hl sym">[])</span>
<span class="hl sym">{</span>
   <span class="hl kwb">int</span> N <span class="hl sym">= ((</span>argc <span class="hl sym">&gt;=</span> <span class="hl num">2</span><span class="hl sym">)</span> ? <span class="hl kwd">atoi</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]) :</span> <span class="hl num">2000</span><span class="hl sym">);</span>

   eval_A <span class="hl sym">=</span> f_eval_A<span class="hl sym">;</span>

   <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;%.9f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> <span class="hl kwd">spectral_game</span><span class="hl sym">(</span>N<span class="hl sym">));</span>
   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

