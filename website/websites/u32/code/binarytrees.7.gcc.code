<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by Francesco Abbate</span>
<span class="hl com"> */</span>


<span class="hl dir">#include &lt;stdlib.h&gt;</span>
<span class="hl dir">#include &lt;stdio.h&gt;</span>

<span class="hl kwc">typedef</span> off_t off64_t<span class="hl sym">;</span>
<span class="hl dir">#include &lt;apr_pools.h&gt;</span>

<span class="hl kwb">const size_t</span>	LINE_SIZE <span class="hl sym">=</span> <span class="hl num">64</span><span class="hl sym">;</span>

<span class="hl kwb">struct</span> node
<span class="hl sym">{</span>
  <span class="hl kwb">int</span> i<span class="hl sym">;</span>
  <span class="hl kwb">struct</span> node <span class="hl sym">*</span>left<span class="hl sym">;</span>
  <span class="hl kwb">struct</span> node <span class="hl sym">*</span>right<span class="hl sym">;</span>
<span class="hl sym">};</span>

<span class="hl kwb">int</span>
<span class="hl kwd">node_check</span><span class="hl sym">(</span><span class="hl kwb">const struct</span> node <span class="hl sym">*</span>n<span class="hl sym">)</span>
<span class="hl sym">{</span>
  <span class="hl kwa">if</span> <span class="hl sym">(</span>n<span class="hl sym">-&gt;</span>left<span class="hl sym">)</span>
    <span class="hl sym">{</span>
      <span class="hl kwb">int</span> lc <span class="hl sym">=</span> <span class="hl kwd">node_check</span> <span class="hl sym">(</span>n<span class="hl sym">-&gt;</span>left<span class="hl sym">);</span>
      <span class="hl kwb">int</span> rc <span class="hl sym">=</span> <span class="hl kwd">node_check</span> <span class="hl sym">(</span>n<span class="hl sym">-&gt;</span>right<span class="hl sym">);</span>
      <span class="hl kwa">return</span> lc <span class="hl sym">+</span> n<span class="hl sym">-&gt;</span>i <span class="hl sym">-</span> rc<span class="hl sym">;</span>
    <span class="hl sym">}</span>

  <span class="hl kwa">return</span> n<span class="hl sym">-&gt;</span>i<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">struct</span> node <span class="hl sym">*</span>
<span class="hl kwd">node_get_avail</span> <span class="hl sym">(</span>apr_pool_t <span class="hl sym">*</span>pool<span class="hl sym">)</span>
<span class="hl sym">{</span>
  <span class="hl kwa">return</span> <span class="hl kwd">apr_palloc</span> <span class="hl sym">(</span>pool<span class="hl sym">,</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span><span class="hl kwb">struct</span> node<span class="hl sym">));</span>
<span class="hl sym">}</span>

<span class="hl kwb">struct</span> node <span class="hl sym">*</span>
<span class="hl kwd">make</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">,</span> <span class="hl kwb">int</span> depth<span class="hl sym">,</span> apr_pool_t <span class="hl sym">*</span>pool<span class="hl sym">)</span>
<span class="hl sym">{</span>
  <span class="hl kwb">struct</span> node <span class="hl sym">*</span>curr <span class="hl sym">=</span> <span class="hl kwd">node_get_avail</span> <span class="hl sym">(</span>pool<span class="hl sym">);</span>

  curr<span class="hl sym">-&gt;</span>i <span class="hl sym">=</span> i<span class="hl sym">;</span>

  <span class="hl kwa">if</span> <span class="hl sym">(</span>depth <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
    <span class="hl sym">{</span>
      curr<span class="hl sym">-&gt;</span>left  <span class="hl sym">=</span> <span class="hl kwd">make</span> <span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>i<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> depth <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> pool<span class="hl sym">);</span>
      curr<span class="hl sym">-&gt;</span>right <span class="hl sym">=</span> <span class="hl kwd">make</span> <span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>i  <span class="hl sym">,</span> depth <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> pool<span class="hl sym">);</span>
    <span class="hl sym">}</span>
  <span class="hl kwa">else</span>
    <span class="hl sym">{</span>
      curr<span class="hl sym">-&gt;</span>left  <span class="hl sym">=</span> NULL<span class="hl sym">;</span>
      curr<span class="hl sym">-&gt;</span>right <span class="hl sym">=</span> NULL<span class="hl sym">;</span>
    <span class="hl sym">}</span>

  <span class="hl kwa">return</span> curr<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span>
<span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">*</span>argv<span class="hl sym">[])</span>
<span class="hl sym">{</span>
  apr_pool_t <span class="hl sym">*</span>long_lived_pool<span class="hl sym">;</span>
  <span class="hl kwb">int</span> min_depth <span class="hl sym">=</span> <span class="hl num">4</span><span class="hl sym">;</span>
  <span class="hl kwb">int</span> req_depth <span class="hl sym">= (</span>argc <span class="hl sym">==</span> <span class="hl num">2</span> ? <span class="hl kwd">atoi</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]) :</span> <span class="hl num">10</span><span class="hl sym">);</span>
  <span class="hl kwb">int</span> max_depth <span class="hl sym">= (</span>req_depth <span class="hl sym">&gt;</span> min_depth <span class="hl sym">+</span> <span class="hl num">2</span> ? req_depth <span class="hl sym">:</span> min_depth <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">);</span>
  <span class="hl kwb">int</span> stretch_depth <span class="hl sym">=</span> max_depth<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">;</span>

  <span class="hl kwd">apr_initialize</span><span class="hl sym">();</span>

  <span class="hl com">/* Alloc then dealloc stretchdepth tree */</span>
  <span class="hl sym">{</span>
    apr_pool_t <span class="hl sym">*</span>store<span class="hl sym">;</span>
    <span class="hl kwb">struct</span> node <span class="hl sym">*</span>curr<span class="hl sym">;</span>

    <span class="hl kwd">apr_pool_create</span> <span class="hl sym">(&amp;</span>store<span class="hl sym">,</span> NULL<span class="hl sym">);</span>
    curr <span class="hl sym">=</span> <span class="hl kwd">make</span> <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> stretch_depth<span class="hl sym">,</span> store<span class="hl sym">);</span>
    <span class="hl kwd">printf</span> <span class="hl sym">(</span><span class="hl str">&quot;stretch tree of depth %i</span><span class="hl esc">\t</span> <span class="hl str">check: %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> stretch_depth<span class="hl sym">,</span>
	    <span class="hl kwd">node_check</span> <span class="hl sym">(</span>curr<span class="hl sym">));</span>
    <span class="hl kwd">apr_pool_destroy</span> <span class="hl sym">(</span>store<span class="hl sym">);</span>
  <span class="hl sym">}</span>

  <span class="hl kwd">apr_pool_create</span> <span class="hl sym">(&amp;</span>long_lived_pool<span class="hl sym">,</span> NULL<span class="hl sym">);</span>

  <span class="hl sym">{</span>
    <span class="hl kwb">struct</span> node <span class="hl sym">*</span>long_lived_tree <span class="hl sym">=</span> <span class="hl kwd">make</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> max_depth<span class="hl sym">,</span> long_lived_pool<span class="hl sym">);</span>

    <span class="hl com">/* buffer to store output of each thread */</span>
    <span class="hl kwb">char</span> <span class="hl sym">*</span>outputstr <span class="hl sym">= (</span><span class="hl kwb">char</span><span class="hl sym">*)</span> <span class="hl kwd">malloc</span><span class="hl sym">(</span>LINE_SIZE <span class="hl sym">* (</span>max_depth <span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) *</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span><span class="hl kwb">char</span><span class="hl sym">));</span>
    <span class="hl kwb">int</span> d<span class="hl sym">;</span>

<span class="hl dir">#pragma omp parallel for</span>
    <span class="hl kwa">for</span> <span class="hl sym">(</span>d <span class="hl sym">=</span> min_depth<span class="hl sym">;</span> d <span class="hl sym">&lt;=</span> max_depth<span class="hl sym">;</span> d <span class="hl sym">+=</span> <span class="hl num">2</span><span class="hl sym">)</span>
      <span class="hl sym">{</span>
        <span class="hl kwb">int</span> iterations <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>max_depth <span class="hl sym">-</span> d <span class="hl sym">+</span> min_depth<span class="hl sym">);</span>
	apr_pool_t <span class="hl sym">*</span>store<span class="hl sym">;</span>
        <span class="hl kwb">int</span> c <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> i<span class="hl sym">;</span>

	<span class="hl kwd">apr_pool_create</span> <span class="hl sym">(&amp;</span>store<span class="hl sym">,</span> NULL<span class="hl sym">);</span>

        <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span> i <span class="hl sym">&lt;=</span> iterations<span class="hl sym">; ++</span>i<span class="hl sym">)</span>
	  <span class="hl sym">{</span>
	    <span class="hl kwb">struct</span> node <span class="hl sym">*</span>a<span class="hl sym">, *</span>b<span class="hl sym">;</span>

	    a <span class="hl sym">=</span> <span class="hl kwd">make</span> <span class="hl sym">(</span> i<span class="hl sym">,</span> d<span class="hl sym">,</span> store<span class="hl sym">);</span>
	    b <span class="hl sym">=</span> <span class="hl kwd">make</span> <span class="hl sym">(-</span>i<span class="hl sym">,</span> d<span class="hl sym">,</span> store<span class="hl sym">);</span>
            c <span class="hl sym">+=</span> <span class="hl kwd">node_check</span> <span class="hl sym">(</span>a<span class="hl sym">) +</span> <span class="hl kwd">node_check</span> <span class="hl sym">(</span>b<span class="hl sym">);</span>
	    <span class="hl kwd">apr_pool_clear</span> <span class="hl sym">(</span>store<span class="hl sym">);</span>
        <span class="hl sym">}</span>
	<span class="hl kwd">apr_pool_destroy</span> <span class="hl sym">(</span>store<span class="hl sym">);</span>

	<span class="hl com">/* each thread write to separate location */</span>
	<span class="hl kwd">sprintf</span><span class="hl sym">(</span>outputstr <span class="hl sym">+</span> LINE_SIZE <span class="hl sym">*</span> d<span class="hl sym">,</span> <span class="hl str">&quot;%d</span><span class="hl esc">\t</span> <span class="hl str">trees of depth %d</span><span class="hl esc">\t</span> <span class="hl str">check: %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">, (</span><span class="hl num">2</span> <span class="hl sym">*</span> iterations<span class="hl sym">),</span> d<span class="hl sym">,</span> c<span class="hl sym">);</span>
      <span class="hl sym">}</span>

    <span class="hl com">/* print all results */</span>
    <span class="hl kwa">for</span> <span class="hl sym">(</span>d <span class="hl sym">=</span> min_depth<span class="hl sym">;</span> d <span class="hl sym">&lt;=</span> max_depth<span class="hl sym">;</span> d <span class="hl sym">+=</span> <span class="hl num">2</span><span class="hl sym">)</span>
      <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;%s&quot;</span><span class="hl sym">,</span> outputstr <span class="hl sym">+ (</span>d <span class="hl sym">*</span> LINE_SIZE<span class="hl sym">) );</span>
    <span class="hl kwd">free</span><span class="hl sym">(</span>outputstr<span class="hl sym">);</span>

    <span class="hl kwd">printf</span> <span class="hl sym">(</span><span class="hl str">&quot;long lived tree of depth %i</span><span class="hl esc">\t</span> <span class="hl str">check: %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> max_depth<span class="hl sym">,</span>
	    <span class="hl kwd">node_check</span> <span class="hl sym">(</span>long_lived_tree<span class="hl sym">));</span>

    <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
  <span class="hl sym">}</span>
<span class="hl sym">}</span>
