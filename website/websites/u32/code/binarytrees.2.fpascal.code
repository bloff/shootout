<span class="hl com">{ The Computer Language Benchmarks Game</span>
<span class="hl com">  http://shootout.alioth.debian.org</span>
<span class="hl com"></span>
<span class="hl com">  contributed by Ales Katona</span>
<span class="hl com">}</span>

<span class="hl com">{$mode objfpc}</span>

<span class="hl kwa">program</span> BinaryTrees<span class="hl sym">;</span>

<span class="hl kwa">type</span>
  PNode <span class="hl sym">= ^</span>TNode<span class="hl sym">;</span>
  TNode <span class="hl sym">=</span> <span class="hl kwa">record</span>
    l<span class="hl sym">,</span> r<span class="hl sym">:</span> PNode<span class="hl sym">;</span>
    i<span class="hl sym">:</span> <span class="hl kwb">Longint</span><span class="hl sym">;</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">function</span> <span class="hl kwd">CreateNode</span><span class="hl sym">(</span>l2<span class="hl sym">,</span> r2<span class="hl sym">:</span> PNode<span class="hl sym">;</span> <span class="hl kwa">const</span> i2<span class="hl sym">:</span> <span class="hl kwb">Longint</span><span class="hl sym">):</span> PNode<span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  Result <span class="hl sym">:=</span> <span class="hl kwd">GetMem</span><span class="hl sym">(</span><span class="hl kwd">SizeOf</span><span class="hl sym">(</span>TNode<span class="hl sym">));</span>
  Result<span class="hl sym">^.</span>l<span class="hl sym">:=</span>l2<span class="hl sym">;</span>
  Result<span class="hl sym">^.</span>r<span class="hl sym">:=</span>r2<span class="hl sym">;</span>
  Result<span class="hl sym">^.</span>i<span class="hl sym">:=</span>i2<span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">procedure</span> <span class="hl kwd">DestroyNode</span><span class="hl sym">(</span>ANode<span class="hl sym">:</span> PNode<span class="hl sym">);</span>
<span class="hl kwa">begin</span>
  <span class="hl kwa">if</span> ANode<span class="hl sym">^.</span>l <span class="hl sym">&lt;&gt;</span> <span class="hl kwa">nil then begin</span>
    <span class="hl kwd">DestroyNode</span><span class="hl sym">(</span>ANode<span class="hl sym">^.</span>l<span class="hl sym">);</span>
    <span class="hl kwd">DestroyNode</span><span class="hl sym">(</span>ANode<span class="hl sym">^.</span>r<span class="hl sym">);</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>
  <span class="hl kwd">FreeMem</span><span class="hl sym">(</span>ANode<span class="hl sym">,</span> <span class="hl kwd">SizeOf</span><span class="hl sym">(</span>TNode<span class="hl sym">));</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">function</span> <span class="hl kwd">CheckNode</span><span class="hl sym">(</span>ANode<span class="hl sym">:</span> PNode<span class="hl sym">):</span> <span class="hl kwb">Longint</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  <span class="hl kwa">if</span> ANode<span class="hl sym">^.</span>l <span class="hl sym">=</span> <span class="hl kwa">nil then</span>
    Result<span class="hl sym">:=</span>ANode<span class="hl sym">^.</span>i
  <span class="hl kwa">else</span>
    Result<span class="hl sym">:=</span><span class="hl kwd">CheckNode</span><span class="hl sym">(</span>ANode<span class="hl sym">^.</span>l<span class="hl sym">) +</span> ANode<span class="hl sym">^.</span>i <span class="hl sym">-</span> <span class="hl kwd">CheckNode</span><span class="hl sym">(</span>ANode<span class="hl sym">^.</span>r<span class="hl sym">);</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">function</span> <span class="hl kwd">Make</span><span class="hl sym">(</span>i<span class="hl sym">,</span> d<span class="hl sym">:</span> <span class="hl kwb">Longint</span><span class="hl sym">):</span> PNode<span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  <span class="hl kwa">if</span> d <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">then</span> Result<span class="hl sym">:=</span><span class="hl kwd">CreateNode</span><span class="hl sym">(</span><span class="hl kwa">nil</span><span class="hl sym">,</span> <span class="hl kwa">nil</span><span class="hl sym">,</span> i<span class="hl sym">)</span>
  <span class="hl kwa">else</span> Result<span class="hl sym">:=</span><span class="hl kwd">CreateNode</span><span class="hl sym">(</span><span class="hl kwd">Make</span><span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> i <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> d <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">),</span> <span class="hl kwd">Make</span><span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> i<span class="hl sym">,</span> d <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">),</span> i<span class="hl sym">);</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">const</span>
  mind <span class="hl sym">=</span> <span class="hl num">4</span><span class="hl sym">;</span>

<span class="hl kwa">var</span>
  maxd <span class="hl sym">:</span> <span class="hl kwb">Longint</span> <span class="hl sym">=</span> <span class="hl num">10</span><span class="hl sym">;</span>
  strd<span class="hl sym">,</span>
  iter<span class="hl sym">,</span>
  c<span class="hl sym">,</span> d<span class="hl sym">,</span> i <span class="hl sym">:</span> <span class="hl kwb">Longint</span><span class="hl sym">;</span>
  tree<span class="hl sym">,</span> llt <span class="hl sym">:</span> PNode<span class="hl sym">;</span>

<span class="hl kwa">begin</span>
  <span class="hl kwa">if</span> ParamCount <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl kwa">then</span>
    <span class="hl kwd">Val</span><span class="hl sym">(</span><span class="hl kwd">ParamStr</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">),</span> maxd<span class="hl sym">);</span>

  <span class="hl kwa">if</span> maxd <span class="hl sym">&lt;</span> mind<span class="hl sym">+</span><span class="hl num">2</span> <span class="hl kwa">then</span>
     maxd <span class="hl sym">:=</span> mind <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">;</span>

  strd<span class="hl sym">:=</span>maxd <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
  tree<span class="hl sym">:=</span><span class="hl kwd">Make</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> strd<span class="hl sym">);</span>
  <span class="hl kwd">Writeln</span><span class="hl sym">(</span><span class="hl str">'stretch tree of depth '</span><span class="hl sym">,</span> strd<span class="hl sym">,</span> <span class="hl esc">#9</span><span class="hl str">' check: '</span><span class="hl sym">,</span> <span class="hl kwd">CheckNode</span><span class="hl sym">(</span>tree<span class="hl sym">));</span>
  <span class="hl kwd">DestroyNode</span><span class="hl sym">(</span>tree<span class="hl sym">);</span>

  llt<span class="hl sym">:=</span><span class="hl kwd">Make</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> maxd<span class="hl sym">);</span>

  d<span class="hl sym">:=</span>mind<span class="hl sym">;</span>
  <span class="hl kwa">while</span> d <span class="hl sym">&lt;=</span> maxd <span class="hl kwa">do begin</span>
    iter<span class="hl sym">:=</span><span class="hl num">1</span> <span class="hl kwa">shl</span> <span class="hl sym">(</span>maxd <span class="hl sym">-</span> d <span class="hl sym">+</span> mind<span class="hl sym">);</span>
    c<span class="hl sym">:=</span><span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl kwa">for</span> i<span class="hl sym">:=</span><span class="hl num">1</span> <span class="hl kwa">to</span> Iter <span class="hl kwa">do begin</span>
      tree<span class="hl sym">:=</span><span class="hl kwd">Make</span><span class="hl sym">(</span>i<span class="hl sym">,</span> d<span class="hl sym">);</span>
      c<span class="hl sym">:=</span>c <span class="hl sym">+</span> <span class="hl kwd">CheckNode</span><span class="hl sym">(</span>tree<span class="hl sym">);</span>
      <span class="hl kwd">DestroyNode</span><span class="hl sym">(</span>tree<span class="hl sym">);</span>
      tree<span class="hl sym">:=</span><span class="hl kwd">Make</span><span class="hl sym">(-</span>i<span class="hl sym">,</span> d<span class="hl sym">);</span>
      c<span class="hl sym">:=</span>c <span class="hl sym">+</span> <span class="hl kwd">CheckNode</span><span class="hl sym">(</span>tree<span class="hl sym">);</span>
      <span class="hl kwd">DestroyNode</span><span class="hl sym">(</span>tree<span class="hl sym">);</span>
    <span class="hl kwa">end</span><span class="hl sym">;</span>
    <span class="hl kwd">Writeln</span><span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> Iter<span class="hl sym">,</span> <span class="hl esc">#9</span><span class="hl str">' trees of depth '</span><span class="hl sym">,</span> d<span class="hl sym">,</span> <span class="hl esc">#9</span><span class="hl str">' check: '</span><span class="hl sym">,</span> c<span class="hl sym">);</span>
    <span class="hl kwd">Inc</span><span class="hl sym">(</span>d<span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">);</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>

  <span class="hl kwd">Writeln</span><span class="hl sym">(</span><span class="hl str">'long lived tree of depth '</span><span class="hl sym">,</span> maxd<span class="hl sym">,</span> <span class="hl esc">#9</span><span class="hl str">' check: '</span><span class="hl sym">,</span> <span class="hl kwd">CheckNode</span><span class="hl sym">(</span>llt<span class="hl sym">));</span>
  <span class="hl kwd">DestroyNode</span><span class="hl sym">(</span>llt<span class="hl sym">);</span>
<span class="hl kwa">end</span><span class="hl sym">.</span>
