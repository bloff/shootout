<span class="hl sym">//</span> <span class="hl kwd">The Computer Language Benchmarks Game</span>
<span class="hl sym">//</span> http<span class="hl sym">://</span>shootout<span class="hl sym">.</span>alioth<span class="hl sym">.</span>debian<span class="hl sym">.</span>org<span class="hl sym">/</span>
<span class="hl sym">//</span>
<span class="hl sym">//</span> <span class="hl kwd">Based</span> on ocaml version by <span class="hl kwd">Sebastien Loisel</span> <span class="hl sym">&amp;</span> <span class="hl kwd">Troestler Christophe</span>
<span class="hl sym">//</span> <span class="hl kwd">Contributed</span> by <span class="hl kwd">Robert Pickering</span>
#light

<span class="hl kwa">let</span> eval_A i j <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">. /</span> <span class="hl kwb">float</span><span class="hl sym">((</span>i<span class="hl sym">+</span>j<span class="hl sym">)*(</span>i<span class="hl sym">+</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)/</span><span class="hl num">2</span><span class="hl sym">+</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>

<span class="hl kwa">let</span> eval_A_times_u u v <span class="hl sym">=</span>
  <span class="hl kwa">let</span> n <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>length v <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl kwa">in</span>
  <span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span>  n <span class="hl kwa">do</span>
    v<span class="hl sym">.(</span>i<span class="hl sym">) &lt;-</span> <span class="hl num">0.0</span>
    <span class="hl kwa">for</span> j <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> n <span class="hl kwa">do</span>
        v<span class="hl sym">.(</span>i<span class="hl sym">) &lt;-</span> v<span class="hl sym">.(</span>i<span class="hl sym">) +</span> eval_A i j <span class="hl sym">*</span> u<span class="hl sym">.(</span>j<span class="hl sym">)</span>

<span class="hl kwa">let</span> eval_At_times_u u v <span class="hl sym">=</span>
  <span class="hl kwa">let</span> n <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>length v <span class="hl sym">-</span><span class="hl num">1</span> <span class="hl kwa">in</span>
  <span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> n <span class="hl kwa">do</span>
    v<span class="hl sym">.(</span>i<span class="hl sym">) &lt;-</span> <span class="hl num">0.0</span>
    <span class="hl kwa">for</span> j <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> n <span class="hl kwa">do</span>
        v<span class="hl sym">.(</span>i<span class="hl sym">) &lt;-</span> v<span class="hl sym">.(</span>i<span class="hl sym">) +</span> eval_A j i <span class="hl sym">*</span> u<span class="hl sym">.(</span>j<span class="hl sym">)</span>

<span class="hl kwa">let</span> eval_AtA_times_u u v <span class="hl sym">=</span>
  <span class="hl kwa">let</span> w <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>create <span class="hl sym">(</span><span class="hl kwc">Array</span><span class="hl sym">.</span>length u<span class="hl sym">)</span> <span class="hl num">0.0</span>
  eval_A_times_u u w
  eval_At_times_u w v


<span class="hl kwa">let</span> <span class="hl sym">() =</span>
  <span class="hl kwa">let</span> n <span class="hl sym">=</span> <span class="hl kwa">try</span> int_of_string<span class="hl sym">(</span><span class="hl kwc">Array</span><span class="hl sym">.</span>get <span class="hl kwc">Sys</span><span class="hl sym">.</span>argv <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">with</span> _ <span class="hl sym">-&gt;</span>  <span class="hl num">2000</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> u <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>create n <span class="hl num">1.0</span>
  <span class="hl kwa">let</span> v <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>create n <span class="hl num">0.0</span>
  <span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> <span class="hl num">9</span> <span class="hl kwa">do</span>
    eval_AtA_times_u u v
    eval_AtA_times_u v u

  <span class="hl kwa">let mutable</span> vv <span class="hl sym">=</span> <span class="hl num">0.0</span>
  <span class="hl kwa">let mutable</span> vBv <span class="hl sym">=</span> <span class="hl num">0.0</span>
  <span class="hl kwa">for</span> i<span class="hl sym">=</span><span class="hl num">0</span> <span class="hl kwa">to</span> n<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl kwa">do</span>
    vv <span class="hl sym">&lt;-</span> vv <span class="hl sym">+</span> v<span class="hl sym">.(</span>i<span class="hl sym">) *</span> v<span class="hl sym">.(</span>i<span class="hl sym">)</span>
    vBv <span class="hl sym">&lt;-</span> vBv <span class="hl sym">+</span> u<span class="hl sym">.(</span>i<span class="hl sym">) *</span> v<span class="hl sym">.(</span>i<span class="hl sym">)</span>
  <span class="hl kwc">Printf</span><span class="hl sym">.</span>printf <span class="hl str">&quot;%0.9f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl sym">(</span>sqrt<span class="hl sym">(</span>vBv <span class="hl sym">/</span> vv<span class="hl sym">))</span>
