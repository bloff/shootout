<span class="hl com">/*The Computer Language Benchmarks Game</span>
<span class="hl com">  http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">  contributed by Paolo Bonzini</span>
<span class="hl com">  further optimized by Jason Garrett-Glaser</span>
<span class="hl com">  pthreads added by Eckehard Berns</span>
<span class="hl com">*/</span>

<span class="hl dir">#include &lt;stdio.h&gt;</span>
<span class="hl dir">#include &lt;stdlib.h&gt;</span>
<span class="hl dir">#include &lt;pthread.h&gt;</span>

<span class="hl kwc">typedef</span> <span class="hl kwb">double</span> v2df <span class="hl kwd">__attribute__</span> <span class="hl sym">((</span><span class="hl kwd">vector_size</span><span class="hl sym">(</span><span class="hl num">16</span><span class="hl sym">)));</span> <span class="hl com">/* vector of two doubles */</span>
<span class="hl kwc">typedef</span> <span class="hl kwb">int</span> v4si <span class="hl kwd">__attribute__</span> <span class="hl sym">((</span><span class="hl kwd">vector_size</span><span class="hl sym">(</span><span class="hl num">16</span><span class="hl sym">)));</span> <span class="hl com">/* vector of four ints */</span>

<span class="hl dir">#define NWORKERS 8</span>

<span class="hl kwb">int</span> w<span class="hl sym">,</span> h<span class="hl sym">;</span>
v2df zero <span class="hl sym">= {</span> <span class="hl num">0.0</span><span class="hl sym">,</span> <span class="hl num">0.0</span> <span class="hl sym">};</span>
v2df four <span class="hl sym">= {</span> <span class="hl num">4.0</span><span class="hl sym">,</span> <span class="hl num">4.0</span> <span class="hl sym">};</span>
v2df nzero<span class="hl sym">;</span>
<span class="hl kwb">double</span> inverse_w<span class="hl sym">;</span>
<span class="hl kwb">double</span> inverse_h<span class="hl sym">;</span>

<span class="hl kwb">char</span> <span class="hl sym">*</span>whole_data<span class="hl sym">;</span>
<span class="hl kwb">int</span> y_pick<span class="hl sym">;</span>
pthread_mutex_t y_mutex <span class="hl sym">=</span> PTHREAD_MUTEX_INITIALIZER<span class="hl sym">;</span>

<span class="hl kwb">static void</span> <span class="hl sym">*</span>
<span class="hl kwd">worker</span><span class="hl sym">(</span><span class="hl kwb">void</span> <span class="hl sym">*</span>_args<span class="hl sym">)</span>
<span class="hl sym">{</span>
    <span class="hl kwb">char</span> <span class="hl sym">*</span>data<span class="hl sym">;</span>
    <span class="hl kwb">double</span> x<span class="hl sym">,</span> y<span class="hl sym">;</span>
    <span class="hl kwb">int</span> i<span class="hl sym">,</span> bit_num<span class="hl sym">;</span>
    <span class="hl kwb">char</span> byte_acc <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    v4si mask<span class="hl sym">;</span>
    <span class="hl kwb">int</span> <span class="hl sym">*</span>pmask<span class="hl sym">;</span>

    <span class="hl com">/* Detect endianness.  */</span>
    mask <span class="hl sym">= (</span>v4si<span class="hl sym">)</span>nzero<span class="hl sym">;</span>
    pmask <span class="hl sym">= (</span><span class="hl kwb">int</span> <span class="hl sym">*) &amp;</span>mask<span class="hl sym">;</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>pmask<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">])</span> pmask<span class="hl sym">++;</span>

    <span class="hl kwa">for</span> <span class="hl sym">(;;) {</span>
        <span class="hl kwd">pthread_mutex_lock</span><span class="hl sym">(&amp;</span>y_mutex<span class="hl sym">);</span>
        y <span class="hl sym">=</span> y_pick<span class="hl sym">;</span>
        y_pick <span class="hl sym">=</span> y <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
        <span class="hl kwd">pthread_mutex_unlock</span><span class="hl sym">(&amp;</span>y_mutex<span class="hl sym">);</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>y <span class="hl sym">&gt;=</span> h<span class="hl sym">)</span>
            <span class="hl kwa">return</span> NULL<span class="hl sym">;</span>
        data <span class="hl sym">= &amp;</span>whole_data<span class="hl sym">[(</span>w <span class="hl sym">&gt;&gt;</span> <span class="hl num">3</span><span class="hl sym">) * (</span><span class="hl kwb">int</span><span class="hl sym">)</span>y<span class="hl sym">];</span>

        <span class="hl kwa">for</span><span class="hl sym">(</span>bit_num<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">,</span>x<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span>x<span class="hl sym">&lt;</span>w<span class="hl sym">;</span>x<span class="hl sym">+=</span><span class="hl num">2</span><span class="hl sym">)</span>
        <span class="hl sym">{</span>
            v2df Crv <span class="hl sym">= {</span> x<span class="hl sym">*</span>inverse_w<span class="hl sym">-</span><span class="hl num">1.5</span><span class="hl sym">, (</span>x<span class="hl sym">+</span><span class="hl num">1.0</span><span class="hl sym">)*</span>inverse_w<span class="hl sym">-</span><span class="hl num">1.5</span> <span class="hl sym">};</span>
            v2df Civ <span class="hl sym">= {</span> y<span class="hl sym">*</span>inverse_h<span class="hl sym">-</span><span class="hl num">1.0</span><span class="hl sym">,</span> y<span class="hl sym">*</span>inverse_h<span class="hl sym">-</span><span class="hl num">1.0</span> <span class="hl sym">};</span>
            v2df Zrv <span class="hl sym">= {</span> <span class="hl num">0.0</span><span class="hl sym">,</span> <span class="hl num">0.0</span> <span class="hl sym">};</span>
            v2df Ziv <span class="hl sym">= {</span> <span class="hl num">0.0</span><span class="hl sym">,</span> <span class="hl num">0.0</span> <span class="hl sym">};</span>
            v2df Trv <span class="hl sym">= {</span> <span class="hl num">0.0</span><span class="hl sym">,</span> <span class="hl num">0.0</span> <span class="hl sym">};</span>
            v2df Tiv <span class="hl sym">= {</span> <span class="hl num">0.0</span><span class="hl sym">,</span> <span class="hl num">0.0</span> <span class="hl sym">};</span>
            i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

            <span class="hl kwa">do</span> <span class="hl sym">{</span>
                v2df delta<span class="hl sym">;</span>
                Ziv <span class="hl sym">= (</span>Zrv<span class="hl sym">*</span>Ziv<span class="hl sym">) + (</span>Zrv<span class="hl sym">*</span>Ziv<span class="hl sym">) +</span> Civ<span class="hl sym">;</span>
                Zrv <span class="hl sym">=</span> Trv <span class="hl sym">-</span> Tiv <span class="hl sym">+</span> Crv<span class="hl sym">;</span>
                Trv <span class="hl sym">=</span> Zrv <span class="hl sym">*</span> Zrv<span class="hl sym">;</span>
                Tiv <span class="hl sym">=</span> Ziv <span class="hl sym">*</span> Ziv<span class="hl sym">;</span>

                <span class="hl com">/* sign bit zeroed if 4.0 - Trv - Tiv &gt;= 0.0 (i.e. |Z| &lt;= 4.0).  */</span>
                delta <span class="hl sym">=</span> four <span class="hl sym">-</span> Trv <span class="hl sym">-</span> Tiv<span class="hl sym">;</span>
                mask <span class="hl sym">= (</span>v4si<span class="hl sym">)</span>delta <span class="hl sym">&amp; (</span>v4si<span class="hl sym">)</span>nzero<span class="hl sym">;</span>
            <span class="hl sym">}</span> <span class="hl kwa">while</span> <span class="hl sym">(++</span>i <span class="hl sym">&lt;</span> <span class="hl num">50</span> <span class="hl sym">&amp;&amp; !(</span>pmask<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] &amp;</span> pmask<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">]));</span>

            byte_acc <span class="hl sym">&lt;&lt;=</span> <span class="hl num">2</span><span class="hl sym">;</span>
            <span class="hl kwa">if</span><span class="hl sym">(!</span>pmask<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">])</span>
                byte_acc <span class="hl sym">|=</span> <span class="hl num">0x02</span><span class="hl sym">;</span>
            <span class="hl kwa">if</span><span class="hl sym">(!</span>pmask<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">])</span>
                byte_acc <span class="hl sym">|=</span> <span class="hl num">0x01</span><span class="hl sym">;</span>
            bit_num<span class="hl sym">+=</span><span class="hl num">2</span><span class="hl sym">;</span>

            <span class="hl kwa">if</span><span class="hl sym">(!(</span>bit_num<span class="hl sym">&amp;</span><span class="hl num">7</span><span class="hl sym">)) {</span>
                data<span class="hl sym">[(</span>bit_num<span class="hl sym">&gt;&gt;</span><span class="hl num">3</span><span class="hl sym">) -</span> <span class="hl num">1</span><span class="hl sym">] =</span> byte_acc<span class="hl sym">;</span>
                byte_acc <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl sym">}</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">if</span><span class="hl sym">(</span>bit_num<span class="hl sym">&amp;</span><span class="hl num">7</span><span class="hl sym">) {</span>
            byte_acc <span class="hl sym">&lt;&lt;= (</span><span class="hl num">8</span><span class="hl sym">-</span>w<span class="hl sym">%</span><span class="hl num">8</span><span class="hl sym">);</span>
            bit_num <span class="hl sym">+=</span> <span class="hl num">8</span><span class="hl sym">;</span>
            data<span class="hl sym">[</span>bit_num<span class="hl sym">&gt;&gt;</span><span class="hl num">3</span><span class="hl sym">] =</span> byte_acc<span class="hl sym">;</span>
            byte_acc <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>


<span class="hl kwb">int</span> <span class="hl kwd">main</span> <span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">**</span>argv<span class="hl sym">)</span>
<span class="hl sym">{</span>
    pthread_t ids<span class="hl sym">[</span>NWORKERS<span class="hl sym">];</span>
    <span class="hl kwb">int</span> i<span class="hl sym">;</span>

    nzero <span class="hl sym">= -</span>zero<span class="hl sym">;</span>

    w <span class="hl sym">=</span> h <span class="hl sym">=</span> <span class="hl kwd">atoi</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]);</span>

    inverse_w <span class="hl sym">=</span> <span class="hl num">2.0</span> <span class="hl sym">/</span> w<span class="hl sym">;</span>
    inverse_h <span class="hl sym">=</span> <span class="hl num">2.0</span> <span class="hl sym">/</span> h<span class="hl sym">;</span>

    y_pick <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    whole_data <span class="hl sym">=</span> <span class="hl kwd">malloc</span><span class="hl sym">(</span>w <span class="hl sym">* (</span>w <span class="hl sym">&gt;&gt;</span> <span class="hl num">3</span><span class="hl sym">));</span>

    <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> NWORKERS<span class="hl sym">;</span> i<span class="hl sym">++)</span>
        <span class="hl kwd">pthread_create</span><span class="hl sym">(&amp;</span>ids<span class="hl sym">[</span>i<span class="hl sym">],</span> NULL<span class="hl sym">,</span> worker<span class="hl sym">,</span> NULL<span class="hl sym">);</span>
    <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> NWORKERS<span class="hl sym">;</span> i<span class="hl sym">++)</span>
        <span class="hl kwd">pthread_join</span><span class="hl sym">(</span>ids<span class="hl sym">[</span>i<span class="hl sym">],</span> NULL<span class="hl sym">);</span>
    <span class="hl kwd">pthread_mutex_destroy</span><span class="hl sym">(&amp;</span>y_mutex<span class="hl sym">);</span>

    <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">%d %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span>w<span class="hl sym">,</span>h<span class="hl sym">);</span>
    <span class="hl kwd">fwrite</span><span class="hl sym">(</span>whole_data<span class="hl sym">,</span> h<span class="hl sym">,</span> w <span class="hl sym">&gt;&gt;</span> <span class="hl num">3</span><span class="hl sym">,</span> stdout<span class="hl sym">);</span>

    <span class="hl kwd">free</span><span class="hl sym">(</span>whole_data<span class="hl sym">);</span>

    <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

