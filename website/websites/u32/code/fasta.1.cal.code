<span class="hl com">/**</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * Based on the CAL Open Quark version</span>
<span class="hl com"> * Contributed by Magnus Byne.</span>
<span class="hl com"> */</span>
<span class="hl kwa">module</span> Fasta<span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Prelude <span class="hl kwa">using</span>
    <span class="hl kwa">typeClass</span> <span class="hl sym">=</span> Inputable<span class="hl sym">,</span> Outputable<span class="hl sym">;</span>
    <span class="hl kwa">typeConstructor</span> <span class="hl sym">=</span> Byte<span class="hl sym">,</span> Char<span class="hl sym">,</span> Double<span class="hl sym">,</span> Int<span class="hl sym">,</span> String<span class="hl sym">;</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> eager<span class="hl sym">,</span> fromInt<span class="hl sym">,</span> fst<span class="hl sym">,</span> min<span class="hl sym">,</span> seq<span class="hl sym">,</span> snd<span class="hl sym">,</span> stringToInt<span class="hl sym">,</span> toByte<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Char<span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Collections<span class="hl sym">.</span>List <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> foldLeftStrict<span class="hl sym">,</span> head<span class="hl sym">,</span> length<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Collections<span class="hl sym">.</span>Array<span class="hl sym">;</span>


<span class="hl kwa">data foreign unsafe import jvm</span> <span class="hl str">&quot;java.io.PrintStream&quot;</span> <span class="hl kwa">private</span> JPrintStream<span class="hl sym">;</span>

<span class="hl kwa">data foreign unsafe import jvm</span> <span class="hl str">&quot;byte[]&quot;</span>
    JByteArray <span class="hl kwa">deriving</span> Inputable<span class="hl sym">,</span> Outputable<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;lengthArray&quot;</span> byteArray_length <span class="hl sym">::</span> JByteArray <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;newArray&quot;</span> byteArray_new <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> JByteArray<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;subscriptArray&quot;</span>
    byteArray_subscript <span class="hl sym">::</span> JByteArray <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Byte<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;updateArray&quot;</span>
    byteArray_update <span class="hl sym">::</span> JByteArray <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Byte <span class="hl sym">-&gt;</span> Byte<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;static field java.lang.System.out&quot;</span>
    <span class="hl kwa">private</span> stdout <span class="hl sym">::</span> JOutputStream<span class="hl sym">;</span>

<span class="hl kwa">data foreign unsafe import jvm</span> <span class="hl str">&quot;java.io.OutputStream&quot;</span> <span class="hl kwa">private</span> JOutputStream<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;method write&quot;</span>
    <span class="hl kwa">private</span> writeBytes <span class="hl sym">::</span> JOutputStream <span class="hl sym">-&gt;</span> JByteArray <span class="hl sym">-&gt; ();</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;method write&quot;</span>
    <span class="hl kwa">private</span> writeBytesFromTo <span class="hl sym">::</span> JOutputStream <span class="hl sym">-&gt;</span> JByteArray <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt; ();</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;method write&quot;</span>
    <span class="hl kwa">private</span> writeByte <span class="hl sym">::</span> JOutputStream <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt; ();</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;method getBytes&quot;</span>
    <span class="hl kwa">private</span> toBytes <span class="hl sym">::</span> String <span class="hl sym">-&gt;</span> JByteArray<span class="hl sym">;</span>

<span class="hl kwa">data foreign unsafe import jvm</span> <span class="hl str">&quot;double[]&quot;</span> JDoubleArray<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;newArray&quot;</span> doubleArray_new <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> JDoubleArray<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;subscriptArray&quot;</span>
    doubleArray_subscript <span class="hl sym">::</span> JDoubleArray <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Double<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;updateArray&quot;</span>
    doubleArray_update <span class="hl sym">::</span> JDoubleArray <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Double <span class="hl sym">-&gt;</span> Double<span class="hl sym">;</span>

alu <span class="hl sym">::</span> JByteArray<span class="hl sym">;</span>
alu <span class="hl sym">=</span>
    toBytes
        <span class="hl sym">(</span>
            <span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>
            <span class="hl sym">++</span> <span class="hl str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>
            <span class="hl sym">++</span> <span class="hl str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>
            <span class="hl sym">++</span> <span class="hl str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>
            <span class="hl sym">++</span> <span class="hl str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>
            <span class="hl sym">++</span> <span class="hl str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>
            <span class="hl sym">++</span> <span class="hl str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>
        <span class="hl sym">)</span>
    <span class="hl sym">;</span>

charToByte <span class="hl sym">::</span> Char <span class="hl sym">-&gt;</span> Byte<span class="hl sym">;</span>
charToByte <span class="hl sym">!</span>c <span class="hl sym">=</span> toByte <span class="hl sym">(</span>Char<span class="hl sym">.</span>toInt c<span class="hl sym">);</span>

<span class="hl com">/** create array of iub codes*/</span>
iubCodes <span class="hl sym">::</span> JByteArray<span class="hl sym">;</span>
iubCodes <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        codes <span class="hl sym">=</span>
            <span class="hl sym">[</span>
                <span class="hl str">'a'</span><span class="hl sym">,</span><span class="hl str">'c'</span><span class="hl sym">,</span><span class="hl str">'g'</span><span class="hl sym">,</span><span class="hl str">'t'</span><span class="hl sym">,</span><span class="hl str">'B'</span><span class="hl sym">,</span><span class="hl str">'D'</span><span class="hl sym">,</span><span class="hl str">'H'</span><span class="hl sym">,</span>
                <span class="hl str">'K'</span><span class="hl sym">,</span><span class="hl str">'M'</span><span class="hl sym">,</span><span class="hl str">'N'</span><span class="hl sym">,</span><span class="hl str">'R'</span><span class="hl sym">,</span><span class="hl str">'S'</span><span class="hl sym">,</span><span class="hl str">'V'</span><span class="hl sym">,</span><span class="hl str">'W'</span><span class="hl sym">,</span><span class="hl str">'Y'</span>
            <span class="hl sym">]</span>
            <span class="hl sym">;</span>
    <span class="hl kwa">in</span>
        fst
            <span class="hl sym">(</span>foldLeftStrict
                <span class="hl sym">(</span>
                    \<span class="hl sym">!</span>array <span class="hl sym">!</span>value <span class="hl sym">-&gt;</span>
                        <span class="hl sym">(</span>
                            byteArray_update
                                <span class="hl sym">(</span>fst array<span class="hl sym">)</span>
                                <span class="hl sym">(</span>snd array<span class="hl sym">)</span>
                                <span class="hl sym">(</span>charToByte value<span class="hl sym">)</span>
                            <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                            fst array<span class="hl sym">,</span>
                            snd array <span class="hl sym">+</span> <span class="hl num">1</span>
                        <span class="hl sym">)</span>
                <span class="hl sym">)</span>
                <span class="hl sym">(</span>byteArray_new <span class="hl sym">(</span>length codes<span class="hl sym">),</span> <span class="hl num">0</span><span class="hl sym">)</span>
                codes
            <span class="hl sym">)</span>
    <span class="hl sym">;</span>

<span class="hl com">/** create array of cumulative frequencies*/</span>
iubFreq <span class="hl sym">::</span> JDoubleArray<span class="hl sym">;</span>
iubFreq <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        freq <span class="hl sym">=</span>
            <span class="hl sym">[</span>
                <span class="hl num">0.27</span><span class="hl sym">,</span><span class="hl num">0.12</span><span class="hl sym">,</span><span class="hl num">0.12</span><span class="hl sym">,</span><span class="hl num">0.27</span><span class="hl sym">,</span><span class="hl num">0.02</span><span class="hl sym">,</span><span class="hl num">0.02</span><span class="hl sym">,</span><span class="hl num">0.02</span><span class="hl sym">,</span>
                <span class="hl num">0.02</span><span class="hl sym">,</span><span class="hl num">0.02</span><span class="hl sym">,</span><span class="hl num">0.02</span><span class="hl sym">,</span><span class="hl num">0.02</span><span class="hl sym">,</span><span class="hl num">0.02</span><span class="hl sym">,</span><span class="hl num">0.02</span><span class="hl sym">,</span><span class="hl num">0.02</span><span class="hl sym">,</span><span class="hl num">0.02</span>
            <span class="hl sym">]</span>
            <span class="hl sym">;</span>
    <span class="hl kwa">in</span>
        <span class="hl sym">(</span>foldLeftStrict
            <span class="hl sym">(</span>
                \<span class="hl sym">!</span>accum <span class="hl sym">!</span>value <span class="hl sym">-&gt;</span>
                    <span class="hl sym">(</span>
                        doubleArray_update
                            accum<span class="hl sym">.</span>#<span class="hl num">1</span>
                            accum<span class="hl sym">.</span>#<span class="hl num">2</span>
                            <span class="hl sym">(</span>accum<span class="hl sym">.</span>#<span class="hl num">3</span> <span class="hl sym">+</span> value<span class="hl sym">)</span>
                        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                        accum<span class="hl sym">.</span>#<span class="hl num">1</span><span class="hl sym">,</span>
                        accum<span class="hl sym">.</span>#<span class="hl num">2</span> <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span>
                        accum<span class="hl sym">.</span>#<span class="hl num">3</span> <span class="hl sym">+</span> value
                    <span class="hl sym">)</span>
            <span class="hl sym">)</span>
            <span class="hl sym">(</span>doubleArray_new <span class="hl sym">(</span>length freq<span class="hl sym">),</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0.0</span><span class="hl sym">)</span>
            freq
        <span class="hl sym">).</span>#<span class="hl num">1</span>
    <span class="hl sym">;</span>

<span class="hl com">/** array of human gene codes*/</span>
humanCodes <span class="hl sym">::</span> JByteArray<span class="hl sym">;</span>
humanCodes <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        codes <span class="hl sym">= [</span><span class="hl str">'a'</span><span class="hl sym">,</span> <span class="hl str">'c'</span><span class="hl sym">,</span> <span class="hl str">'g'</span><span class="hl sym">,</span> <span class="hl str">'t'</span><span class="hl sym">];</span>
    <span class="hl kwa">in</span>
        fst
            <span class="hl sym">(</span>foldLeftStrict
                <span class="hl sym">(</span>
                    \<span class="hl sym">!</span>array <span class="hl sym">!</span>value <span class="hl sym">-&gt;</span>
                        <span class="hl sym">(</span>
                            byteArray_update
                                <span class="hl sym">(</span>fst array<span class="hl sym">)</span>
                                <span class="hl sym">(</span>snd array<span class="hl sym">)</span>
                                <span class="hl sym">(</span>charToByte value<span class="hl sym">)</span>
                            <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                            fst array<span class="hl sym">,</span>
                            snd array <span class="hl sym">+</span> <span class="hl num">1</span>
                        <span class="hl sym">)</span>
                <span class="hl sym">)</span>
                <span class="hl sym">(</span>byteArray_new <span class="hl sym">(</span>length codes<span class="hl sym">),</span> <span class="hl num">0</span><span class="hl sym">)</span>
                codes
            <span class="hl sym">)</span>
    <span class="hl sym">;</span>

<span class="hl com">/** create native array of cumulative frequencies for human genes*/</span>
humanFreq <span class="hl sym">::</span> JDoubleArray<span class="hl sym">;</span>
humanFreq <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        freq <span class="hl sym">=</span>
            <span class="hl sym">[</span>
                <span class="hl num">0.302954942668</span><span class="hl sym">,</span>
                <span class="hl num">0.1979883004921</span><span class="hl sym">,</span>
                <span class="hl num">0.1975473066391</span><span class="hl sym">,</span>
                <span class="hl num">0.3015094502008</span>
            <span class="hl sym">]</span>
            <span class="hl sym">;</span>
    <span class="hl kwa">in</span>
        <span class="hl sym">(</span>foldLeftStrict
            <span class="hl sym">(</span>
                \<span class="hl sym">!</span>accum <span class="hl sym">!</span>value <span class="hl sym">-&gt;</span>
                    <span class="hl sym">(</span>
                        doubleArray_update
                            accum<span class="hl sym">.</span>#<span class="hl num">1</span>
                            accum<span class="hl sym">.</span>#<span class="hl num">2</span>
                            <span class="hl sym">(</span>accum<span class="hl sym">.</span>#<span class="hl num">3</span> <span class="hl sym">+</span> value<span class="hl sym">)</span>
                        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                        accum<span class="hl sym">.</span>#<span class="hl num">1</span><span class="hl sym">,</span>
                        accum<span class="hl sym">.</span>#<span class="hl num">2</span> <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span>
                        accum<span class="hl sym">.</span>#<span class="hl num">3</span> <span class="hl sym">+</span> value
                    <span class="hl sym">)</span>
            <span class="hl sym">)</span>
            <span class="hl sym">(</span>doubleArray_new <span class="hl sym">(</span>length freq<span class="hl sym">),</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0.0</span><span class="hl sym">)</span>
            freq
        <span class="hl sym">).</span>#<span class="hl num">1</span>
    <span class="hl sym">;</span>

<span class="hl com">/** naively pick a random gene from frequency table*/</span>
selectGene <span class="hl sym">::</span> JDoubleArray <span class="hl sym">-&gt;</span> JByteArray <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Double <span class="hl sym">-&gt;</span> Byte<span class="hl sym">;</span>
selectGene <span class="hl sym">!</span>freqTable <span class="hl sym">!</span>codeTable <span class="hl sym">!</span>i <span class="hl sym">!</span>rnd <span class="hl sym">=</span>
    <span class="hl kwa">if</span> doubleArray_subscript freqTable i <span class="hl sym">&gt;</span> rnd <span class="hl kwa">then</span>
        byteArray_subscript codeTable i
    <span class="hl kwa">else</span>
        selectGene freqTable codeTable <span class="hl sym">(</span>i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span> rnd
    <span class="hl sym">;</span>

<span class="hl com">/** output file line length*/</span>
lineLength <span class="hl sym">::</span> Int<span class="hl sym">;</span>
lineLength <span class="hl sym">=</span> <span class="hl num">60</span> <span class="hl sym">::</span> Int<span class="hl sym">;</span>

<span class="hl com">/** random number generator consts*/</span>
im <span class="hl sym">::</span> Int<span class="hl sym">;</span>
im <span class="hl sym">=</span> <span class="hl num">139968</span><span class="hl sym">;</span>

ia <span class="hl sym">::</span> Int<span class="hl sym">;</span>
ia <span class="hl sym">=</span> <span class="hl num">3877</span><span class="hl sym">;</span>

ic <span class="hl sym">::</span> Int<span class="hl sym">;</span>
ic <span class="hl sym">=</span> <span class="hl num">29573</span><span class="hl sym">;</span>

makeRandomFasta <span class="hl sym">::</span>
    String <span class="hl sym">-&gt;</span> String <span class="hl sym">-&gt;</span> JDoubleArray
    <span class="hl sym">-&gt;</span> JByteArray <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> JOutputStream <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>
makeRandomFasta <span class="hl sym">!</span>id <span class="hl sym">!</span>desc <span class="hl sym">!</span>freqTable <span class="hl sym">!</span>codeTable <span class="hl sym">!</span>n <span class="hl sym">!</span>stream <span class="hl sym">!</span>seed <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        eol <span class="hl sym">::</span> Byte<span class="hl sym">;</span>
        eol <span class="hl sym">=</span> eager $ fromInt <span class="hl sym">(</span>Char<span class="hl sym">.</span>toInt <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">);</span>

        buffer <span class="hl sym">::</span> JByteArray<span class="hl sym">;</span>
        buffer <span class="hl sym">=</span> byteArray_new <span class="hl num">10240</span><span class="hl sym">;</span>

        bufferLength <span class="hl sym">::</span> Int<span class="hl sym">;</span>
        bufferLength <span class="hl sym">=</span> <span class="hl num">10240</span><span class="hl sym">;</span>

        generate <span class="hl sym">::</span> JByteArray <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>
        generate <span class="hl sym">!</span>buffer <span class="hl sym">!</span>n <span class="hl sym">!</span>bytesToEol <span class="hl sym">!</span>bytesInBuffer <span class="hl sym">!</span>seed <span class="hl sym">=</span>
            <span class="hl kwa">if</span> bytesToEol <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
                <span class="hl kwa">let</span>
                    newseed <span class="hl sym">::</span> Int<span class="hl sym">;</span>
                    newseed <span class="hl sym">=</span> eager $ <span class="hl sym">(</span>seed <span class="hl sym">*</span> ia <span class="hl sym">+</span> ic<span class="hl sym">) %</span> im<span class="hl sym">;</span>

                    rnd <span class="hl sym">::</span> Double<span class="hl sym">;</span>
                    rnd <span class="hl sym">=</span> <span class="hl num">1.0</span> <span class="hl sym">*</span> fromInt newseed <span class="hl sym">/</span> fromInt im<span class="hl sym">;</span>
                <span class="hl kwa">in</span>
                    byteArray_update
                        buffer
                        bytesInBuffer
                        <span class="hl sym">(</span>selectGene freqTable codeTable <span class="hl num">0</span> rnd<span class="hl sym">)</span>
                    <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                    generate
                        buffer
                        n
                        <span class="hl sym">(</span>bytesToEol <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span>
                        <span class="hl sym">(</span>bytesInBuffer <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
                        newseed
            <span class="hl kwa">else</span>
                <span class="hl slc">//end of line add the eol byte</span>
                byteArray_update buffer bytesInBuffer eol
                <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                <span class="hl sym">(</span>
                    <span class="hl kwa">if</span> n <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
                        <span class="hl kwa">let</span>
                            bytesInNextLine <span class="hl sym">::</span> Int<span class="hl sym">;</span>
                            bytesInNextLine <span class="hl sym">=</span> eager $ min n lineLength<span class="hl sym">;</span>
                        <span class="hl kwa">in</span>
                            <span class="hl kwa">if</span>
                                bytesInNextLine
                                <span class="hl sym">&gt;</span> bufferLength <span class="hl sym">- (</span>bytesInBuffer <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
                            <span class="hl kwa">then</span>
                                writeBytesFromTo
                                    stream
                                    buffer
                                    <span class="hl num">0</span>
                                    <span class="hl sym">(</span>bytesInBuffer <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
                                <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                                generate
                                    buffer
                                    <span class="hl sym">(</span>n <span class="hl sym">-</span> lineLength<span class="hl sym">)</span>
                                    bytesInNextLine
                                    <span class="hl num">0</span>
                                    seed
                            <span class="hl kwa">else</span>
                                generate
                                    buffer
                                    <span class="hl sym">(</span>n <span class="hl sym">-</span> lineLength<span class="hl sym">)</span>
                                    bytesInNextLine
                                    <span class="hl sym">(</span>bytesInBuffer <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
                                    seed
                    <span class="hl kwa">else</span>
                        <span class="hl slc">//finished, flush buffer</span>
                        writeBytesFromTo stream buffer <span class="hl num">0</span> <span class="hl sym">(</span>bytesInBuffer <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
                        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                        seed
                <span class="hl sym">)</span>
            <span class="hl sym">;</span>
    <span class="hl kwa">in</span>
        writeBytes stream <span class="hl sym">(</span>toBytes <span class="hl sym">(</span><span class="hl str">&quot;&gt;&quot;</span> <span class="hl sym">++</span> id <span class="hl sym">++</span> <span class="hl str">&quot; &quot;</span> <span class="hl sym">++</span> desc <span class="hl sym">++</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">))</span>
        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
        generate buffer <span class="hl sym">(</span>n <span class="hl sym">-</span> lineLength<span class="hl sym">) (</span>min n lineLength<span class="hl sym">)</span> <span class="hl num">0</span> seed
    <span class="hl sym">;</span>

makeRepeatFasta <span class="hl sym">::</span>
    String <span class="hl sym">-&gt;</span> String <span class="hl sym">-&gt;</span> JByteArray <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> JOutputStream <span class="hl sym">-&gt; ();</span>
makeRepeatFasta <span class="hl sym">!</span>id <span class="hl sym">!</span>desc <span class="hl sym">!</span>alu <span class="hl sym">!</span>n <span class="hl sym">!</span>stream <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        seqLength <span class="hl sym">::</span> Int<span class="hl sym">;</span>
        seqLength <span class="hl sym">=</span> eager $ byteArray_length alu<span class="hl sym">;</span>

        eol <span class="hl sym">::</span> Int<span class="hl sym">;</span>
        eol <span class="hl sym">=</span> eager $ Char<span class="hl sym">.</span>toInt <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">;</span>

        generate <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt; ();</span>
        generate <span class="hl sym">!</span>n <span class="hl sym">!</span>k <span class="hl sym">=</span>
            <span class="hl kwa">if</span> n <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
                <span class="hl kwa">let</span>
                    bytesToWriteThisLine <span class="hl sym">::</span> Int<span class="hl sym">;</span>
                    bytesToWriteThisLine <span class="hl sym">=</span> eager $ min n lineLength<span class="hl sym">;</span>
                <span class="hl kwa">in</span>
                    <span class="hl kwa">if</span> bytesToWriteThisLine <span class="hl sym">&lt;</span> seqLength <span class="hl sym">-</span> k <span class="hl kwa">then</span>
                        writeBytesFromTo stream alu k bytesToWriteThisLine
                        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                        writeByte stream eol
                        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                        generate
                            <span class="hl sym">(</span>n <span class="hl sym">-</span> bytesToWriteThisLine<span class="hl sym">)</span>
                            <span class="hl sym">(</span>k <span class="hl sym">+</span> bytesToWriteThisLine<span class="hl sym">)</span>
                    <span class="hl kwa">else</span>
                        writeBytesFromTo stream alu k <span class="hl sym">(</span>seqLength <span class="hl sym">-</span> k<span class="hl sym">)</span>
                        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                        writeBytesFromTo
                            stream
                            alu
                            <span class="hl num">0</span>
                            <span class="hl sym">(</span>bytesToWriteThisLine <span class="hl sym">- (</span>seqLength <span class="hl sym">-</span> k<span class="hl sym">))</span>
                        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                        writeByte stream eol
                        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                        generate
                            <span class="hl sym">(</span>n <span class="hl sym">-</span> bytesToWriteThisLine<span class="hl sym">)</span>
                            <span class="hl sym">(</span>bytesToWriteThisLine <span class="hl sym">- (</span>seqLength <span class="hl sym">-</span> k<span class="hl sym">))</span>
            <span class="hl kwa">else</span>
                <span class="hl sym">()</span>
            <span class="hl sym">;</span>
    <span class="hl kwa">in</span>
        writeBytes stream <span class="hl sym">(</span>toBytes <span class="hl sym">(</span><span class="hl str">&quot;&gt;&quot;</span> <span class="hl sym">++</span> id <span class="hl sym">++</span> <span class="hl str">&quot; &quot;</span> <span class="hl sym">++</span> desc <span class="hl sym">++</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">))</span>
        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
        generate n <span class="hl num">0</span>
    <span class="hl sym">;</span>

main <span class="hl sym">:: [</span>String<span class="hl sym">] -&gt; ();</span>
<span class="hl kwa">public</span> main args <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        n <span class="hl sym">=</span> eager $ stringToInt <span class="hl sym">(</span>head args<span class="hl sym">);</span>

        intialSeed <span class="hl sym">::</span> Int<span class="hl sym">;</span>
        intialSeed <span class="hl sym">=</span> <span class="hl num">42</span><span class="hl sym">;</span>

        seed1 <span class="hl sym">::</span> Int<span class="hl sym">;</span>
        seed1 <span class="hl sym">=</span>
            makeRandomFasta
                <span class="hl str">&quot;TWO&quot;</span>
                <span class="hl str">&quot;IUB ambiguity codes&quot;</span>
                iubFreq
                iubCodes
                <span class="hl sym">(</span>n <span class="hl sym">*</span> <span class="hl num">3</span><span class="hl sym">)</span>
                stdout
                intialSeed
            <span class="hl sym">;</span>

        seed2 <span class="hl sym">::</span> Int<span class="hl sym">;</span>
        seed2 <span class="hl sym">=</span>
            makeRandomFasta
                <span class="hl str">&quot;THREE&quot;</span>
                <span class="hl str">&quot;Homo sapiens frequency&quot;</span>
                humanFreq
                humanCodes
                <span class="hl sym">(</span>n <span class="hl sym">*</span> <span class="hl num">5</span><span class="hl sym">)</span>
                stdout
                seed1
            <span class="hl sym">;</span>
    <span class="hl kwa">in</span>
        makeRepeatFasta <span class="hl str">&quot;ONE&quot;</span> <span class="hl str">&quot;Homo sapiens alu&quot;</span> alu <span class="hl sym">(</span>n <span class="hl sym">*</span> <span class="hl num">2</span><span class="hl sym">)</span> stdout
        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
        seed1
        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
        seed2
        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
        <span class="hl sym">()</span>
    <span class="hl sym">;</span>

