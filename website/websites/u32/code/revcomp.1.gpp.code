<span class="hl com">/* ------------------------------------------------------------------ */</span>
<span class="hl com">/* The Computer Language Shootout                               */</span>
<span class="hl com">/* http://shootout.alioth.debian.org/                                 */</span>
<span class="hl com">/*                                                                    */</span>
<span class="hl com">/* Contributed by Anthony Borla                                       */</span>
<span class="hl com">/* Modified by Vaclav Haisman                                         */</span>
<span class="hl com">/* Changed to match style of Perl example: Greg Buchholz              */</span>
<span class="hl com">/* ------------------------------------------------------------------ */</span>

<span class="hl dir">#include &lt;cctype&gt;</span>
<span class="hl dir">#include &lt;string&gt;</span>
<span class="hl dir">#include &lt;algorithm&gt;</span>
<span class="hl dir">#include &lt;iterator&gt;</span>
<span class="hl dir">#include &lt;iostream&gt;</span>
<span class="hl kwa">using namespace</span> std<span class="hl sym">;</span>

<span class="hl kwb">const int</span> LINELENGTH <span class="hl sym">=</span> <span class="hl num">60</span><span class="hl sym">;</span>

<span class="hl kwc">typedef</span> string Header<span class="hl sym">;</span>
<span class="hl kwc">typedef</span> string Segment<span class="hl sym">;</span>

<span class="hl kwc">inline</span> <span class="hl kwb">char</span> <span class="hl kwd">complement</span><span class="hl sym">(</span><span class="hl kwb">char</span> element<span class="hl sym">)</span>
<span class="hl sym">{</span>
  <span class="hl kwb">static const char</span> charMap<span class="hl sym">[] =</span>
    <span class="hl sym">{</span>
      <span class="hl str">'T'</span><span class="hl sym">,</span> <span class="hl str">'V'</span><span class="hl sym">,</span> <span class="hl str">'G'</span><span class="hl sym">,</span> <span class="hl str">'H'</span><span class="hl sym">,</span> <span class="hl str">'\0'</span><span class="hl sym">,</span> <span class="hl str">'\0'</span><span class="hl sym">,</span> <span class="hl str">'C'</span><span class="hl sym">,</span> <span class="hl str">'D'</span><span class="hl sym">,</span> <span class="hl str">'\0'</span><span class="hl sym">,</span> <span class="hl str">'\0'</span><span class="hl sym">,</span> <span class="hl str">'M'</span><span class="hl sym">,</span> <span class="hl str">'\0'</span><span class="hl sym">,</span> <span class="hl str">'K'</span><span class="hl sym">,</span>
      <span class="hl str">'N'</span><span class="hl sym">,</span> <span class="hl str">'\0'</span><span class="hl sym">,</span> <span class="hl str">'\0'</span><span class="hl sym">,</span> <span class="hl str">'\0'</span><span class="hl sym">,</span> <span class="hl str">'Y'</span><span class="hl sym">,</span> <span class="hl str">'S'</span><span class="hl sym">,</span> <span class="hl str">'A'</span><span class="hl sym">,</span> <span class="hl str">'A'</span><span class="hl sym">,</span> <span class="hl str">'B'</span><span class="hl sym">,</span> <span class="hl str">'W'</span><span class="hl sym">,</span> <span class="hl str">'\0'</span><span class="hl sym">,</span> <span class="hl str">'R'</span><span class="hl sym">,</span> <span class="hl str">'\0'</span>
    <span class="hl sym">};</span>

  <span class="hl kwa">return</span> charMap<span class="hl sym">[</span><span class="hl kwd">toupper</span><span class="hl sym">(</span>element<span class="hl sym">) -</span> <span class="hl str">'A'</span><span class="hl sym">];</span>
<span class="hl sym">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">print_revcomp</span><span class="hl sym">(</span>Header <span class="hl kwb">const</span><span class="hl sym">&amp;</span> header<span class="hl sym">,</span> Segment <span class="hl kwb">const</span><span class="hl sym">&amp;</span> seg<span class="hl sym">,</span> ostream<span class="hl sym">&amp;</span> out <span class="hl sym">=</span> std<span class="hl sym">::</span>cout<span class="hl sym">)</span>
<span class="hl sym">{</span>
    out <span class="hl sym">&lt;&lt;</span> header <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>

    Segment <span class="hl kwd">comp</span><span class="hl sym">(</span>seg<span class="hl sym">.</span><span class="hl kwd">rbegin</span><span class="hl sym">(),</span>seg<span class="hl sym">.</span><span class="hl kwd">rend</span><span class="hl sym">());</span>
    <span class="hl kwd">transform</span><span class="hl sym">(</span>comp<span class="hl sym">.</span><span class="hl kwd">begin</span><span class="hl sym">(),</span>comp<span class="hl sym">.</span><span class="hl kwd">end</span><span class="hl sym">(),</span> comp<span class="hl sym">.</span><span class="hl kwd">begin</span><span class="hl sym">(),</span> complement<span class="hl sym">);</span>

    <span class="hl kwb">size_t</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl kwb">size_t</span> stop <span class="hl sym">=</span> comp<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">()/</span>LINELENGTH <span class="hl sym">+ ((</span>comp<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">()%</span>LINELENGTH<span class="hl sym">)</span>?<span class="hl num">1</span><span class="hl sym">:</span><span class="hl num">0</span><span class="hl sym">);</span>

    <span class="hl kwa">while</span><span class="hl sym">(</span>i <span class="hl sym">&lt;</span> stop<span class="hl sym">)</span>
        out <span class="hl sym">&lt;&lt;</span> comp<span class="hl sym">.</span><span class="hl kwd">substr</span><span class="hl sym">(</span>i<span class="hl sym">++*</span>LINELENGTH<span class="hl sym">,</span>LINELENGTH<span class="hl sym">) &lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span> <span class="hl sym">()</span>
<span class="hl sym">{</span>
  ios_base<span class="hl sym">::</span><span class="hl kwd">sync_with_stdio</span><span class="hl sym">(</span><span class="hl kwa">false</span><span class="hl sym">);</span>

  Segment line<span class="hl sym">,</span> segment<span class="hl sym">;</span>
  Header header<span class="hl sym">;</span>

  <span class="hl kwa">while</span> <span class="hl sym">(</span><span class="hl kwd">getline</span><span class="hl sym">(</span>cin<span class="hl sym">,</span> line<span class="hl sym">))</span>
  <span class="hl sym">{</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>line<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] ==</span> <span class="hl str">'&gt;'</span><span class="hl sym">)</span>
      <span class="hl sym">{</span>
          <span class="hl kwa">if</span> <span class="hl sym">(!</span> segment<span class="hl sym">.</span><span class="hl kwd">empty</span><span class="hl sym">())</span>
            <span class="hl kwd">print_revcomp</span><span class="hl sym">(</span>header<span class="hl sym">,</span> segment<span class="hl sym">);</span>
          header <span class="hl sym">=</span> line<span class="hl sym">;</span>
          segment<span class="hl sym">.</span><span class="hl kwd">clear</span><span class="hl sym">();</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">else</span>
          segment <span class="hl sym">+=</span> line<span class="hl sym">;</span>
  <span class="hl sym">}</span>
  <span class="hl kwd">print_revcomp</span><span class="hl sym">(</span>header<span class="hl sym">,</span> segment<span class="hl sym">);</span>

  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

