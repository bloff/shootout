#lang racket<span class="hl sym">/</span>base

<span class="hl slc">;;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;; http://shootout.alioth.debian.org/</span>

<span class="hl slc">;;; Translated directly from the C# version by Isaac Gouy</span>
<span class="hl slc">;;; contributed by Matthew Flatt</span>

<span class="hl slc">;; This version uses unsafe operations</span>

<span class="hl sym">(</span>require racket<span class="hl sym">/</span>cmdline
	 racket<span class="hl sym">/</span>require <span class="hl sym">(</span>for<span class="hl sym">-</span>syntax racket<span class="hl sym">/</span>base<span class="hl sym">)</span>
	 <span class="hl sym">(</span>rename<span class="hl sym">-</span>in
          <span class="hl sym">(</span>filtered<span class="hl sym">-</span>in
           <span class="hl sym">(</span>lambda <span class="hl sym">(</span>name<span class="hl sym">) (</span>regexp<span class="hl sym">-</span>replace #rx<span class="hl str">&quot;unsafe-&quot;</span> name <span class="hl str">&quot;&quot;</span><span class="hl sym">))</span>
           racket<span class="hl sym">/</span>unsafe<span class="hl sym">/</span>ops<span class="hl sym">)</span>
          <span class="hl sym">[</span>fx<span class="hl sym">-&gt;</span>fl <span class="hl sym">-&gt;</span>fl<span class="hl sym">])</span>
         <span class="hl sym">(</span>only<span class="hl sym">-</span>in racket<span class="hl sym">/</span>flonum make<span class="hl sym">-</span>flvector<span class="hl sym">))</span>


<span class="hl sym">(</span>define <span class="hl sym">(</span>Approximate n<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">([</span>u <span class="hl sym">(</span>make<span class="hl sym">-</span>flvector n <span class="hl num">1.0</span><span class="hl sym">)]</span>
        <span class="hl sym">[</span>v <span class="hl sym">(</span>make<span class="hl sym">-</span>flvector n <span class="hl num">0.0</span><span class="hl sym">)])</span>
    <span class="hl slc">;; 20 steps of the power method</span>
    <span class="hl sym">(</span>for <span class="hl sym">([</span>i <span class="hl sym">(</span>in<span class="hl sym">-</span>range <span class="hl num">10</span><span class="hl sym">)])</span>
      <span class="hl sym">(</span>MultiplyAtAv n u v<span class="hl sym">)</span>
      <span class="hl sym">(</span>MultiplyAtAv n v u<span class="hl sym">))</span>

    <span class="hl slc">;; B=AtA         A multiplied by A transposed</span>
    <span class="hl slc">;; v.Bv /(v.v)   eigenvalue of v</span>
    <span class="hl sym">(</span>let loop <span class="hl sym">([</span>i <span class="hl num">0</span><span class="hl sym">][</span>vBv <span class="hl num">0.0</span><span class="hl sym">][</span>vv <span class="hl num">0.0</span><span class="hl sym">])</span>
      <span class="hl sym">(</span>if <span class="hl sym">(=</span> i n<span class="hl sym">)</span>
          <span class="hl sym">(</span>flsqrt <span class="hl sym">(</span>fl<span class="hl sym">/</span> vBv vv<span class="hl sym">))</span>
          <span class="hl sym">(</span>let <span class="hl sym">([</span>vi <span class="hl sym">(</span>flvector<span class="hl sym">-</span>ref v i<span class="hl sym">)])</span>
            <span class="hl sym">(</span>loop <span class="hl sym">(</span>add1 i<span class="hl sym">)</span>
                  <span class="hl sym">(</span>fl<span class="hl sym">+</span> vBv <span class="hl sym">(</span>fl<span class="hl sym">* (</span>flvector<span class="hl sym">-</span>ref u i<span class="hl sym">)</span> vi<span class="hl sym">))</span>
                  <span class="hl sym">(</span>fl<span class="hl sym">+</span> vv <span class="hl sym">(</span>fl<span class="hl sym">*</span> vi vi<span class="hl sym">))))))))</span>

<span class="hl slc">;; return element i,j of infinite matrix A</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>A i j<span class="hl sym">)</span>
  <span class="hl sym">(</span>fl<span class="hl sym">/</span> <span class="hl num">1.0</span> <span class="hl sym">(</span>fl<span class="hl sym">+ (</span>fl<span class="hl sym">* (-&gt;</span>fl <span class="hl sym">(+</span> i j<span class="hl sym">))</span>
                     <span class="hl sym">(</span>fl<span class="hl sym">/ (-&gt;</span>fl <span class="hl sym">(+</span> i <span class="hl sym">(+</span> j <span class="hl num">1</span><span class="hl sym">)))</span> <span class="hl num">2.0</span><span class="hl sym">))</span>
                <span class="hl sym">(-&gt;</span>fl <span class="hl sym">(+</span> i <span class="hl num">1</span><span class="hl sym">)))))</span>

<span class="hl slc">;; multiply vector v by matrix A</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>MultiplyAv n v Av<span class="hl sym">)</span>
  <span class="hl sym">(</span>for <span class="hl sym">([</span>i <span class="hl sym">(</span>in<span class="hl sym">-</span>range n<span class="hl sym">)])</span>
    <span class="hl sym">(</span>flvector<span class="hl sym">-</span>set<span class="hl sym">!</span> Av i
                   <span class="hl sym">(</span>for<span class="hl sym">/</span>fold <span class="hl sym">([</span>r <span class="hl num">0.0</span><span class="hl sym">])</span>
                       <span class="hl sym">([</span>j <span class="hl sym">(</span>in<span class="hl sym">-</span>range n<span class="hl sym">)])</span>
                     <span class="hl sym">(</span>fl<span class="hl sym">+</span> r <span class="hl sym">(</span>fl<span class="hl sym">* (</span>A i j<span class="hl sym">) (</span>flvector<span class="hl sym">-</span>ref v j<span class="hl sym">)))))))</span>

<span class="hl slc">;; multiply vector v by matrix A transposed</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>MultiplyAtv n v Atv<span class="hl sym">)</span>
  <span class="hl sym">(</span>for <span class="hl sym">([</span>i <span class="hl sym">(</span>in<span class="hl sym">-</span>range n<span class="hl sym">)])</span>
    <span class="hl sym">(</span>flvector<span class="hl sym">-</span>set<span class="hl sym">!</span> Atv i
                   <span class="hl sym">(</span>for<span class="hl sym">/</span>fold <span class="hl sym">([</span>r <span class="hl num">0.0</span><span class="hl sym">])</span>
                       <span class="hl sym">([</span>j <span class="hl sym">(</span>in<span class="hl sym">-</span>range n<span class="hl sym">)])</span>
                     <span class="hl sym">(</span>fl<span class="hl sym">+</span> r <span class="hl sym">(</span>fl<span class="hl sym">* (</span>A j i<span class="hl sym">) (</span>flvector<span class="hl sym">-</span>ref v j<span class="hl sym">)))))))</span>

<span class="hl slc">;; multiply vector v by matrix A and then by matrix A transposed</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>MultiplyAtAv n v AtAv<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">([</span>u <span class="hl sym">(</span>make<span class="hl sym">-</span>flvector n <span class="hl num">0.0</span><span class="hl sym">)])</span>
    <span class="hl sym">(</span>MultiplyAv n v u<span class="hl sym">)</span>
    <span class="hl sym">(</span>MultiplyAtv n u AtAv<span class="hl sym">)))</span>

<span class="hl sym">(</span>printf <span class="hl str">&quot;~a</span><span class="hl esc">\</span><span class="hl str">n&quot;</span>
        <span class="hl sym">(</span>real<span class="hl sym">-&gt;</span>decimal<span class="hl sym">-</span>string
         <span class="hl sym">(</span>Approximate <span class="hl sym">(</span>command<span class="hl sym">-</span>line #<span class="hl sym">:</span>args <span class="hl sym">(</span>n<span class="hl sym">) (</span>string<span class="hl sym">-&gt;</span>number n<span class="hl sym">)))</span>
         <span class="hl num">9</span><span class="hl sym">))</span>
