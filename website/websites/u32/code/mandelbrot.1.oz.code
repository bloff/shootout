<span class="hl slc">% The Computer Language Benchmarks Game</span>
<span class="hl slc">% http://shootout.alioth.debian.org/</span>
<span class="hl slc">% contributed by Isaac Gouy</span>

<span class="hl kwa">functor</span>
<span class="hl kwa">import</span> Application Open

<span class="hl kwa">define</span>
   <span class="hl kwa">proc</span> <span class="hl sym">{</span>Mandelbrot F Side<span class="hl sym">}</span>
      IXMax <span class="hl sym">=</span> Side <span class="hl sym">-</span> <span class="hl num">1</span>
      IYMax <span class="hl sym">=</span> IXMax
      XMax <span class="hl sym">= {</span>IntToFloat Side<span class="hl sym">}</span>
      YMax <span class="hl sym">=</span> XMax
      M <span class="hl sym">=</span> <span class="hl num">50</span>
      Limit2 <span class="hl sym">=</span> <span class="hl num">4.0</span>


      <span class="hl kwa">proc</span> <span class="hl sym">{</span>XLoop IX Y B N<span class="hl sym">}</span>
         X <span class="hl sym">= {</span>IntToFloat IX<span class="hl sym">}</span>
         Cr <span class="hl sym">=</span> <span class="hl num">2.0</span><span class="hl sym">*</span>X <span class="hl sym">/</span> XMax <span class="hl sym">-</span> <span class="hl num">1.5</span>
         Ci <span class="hl sym">=</span> <span class="hl num">2.0</span><span class="hl sym">*</span>Y <span class="hl sym">/</span> YMax <span class="hl sym">-</span> <span class="hl num">1.0</span>
         Bits
         Bitnum

         <span class="hl kwa">fun</span> <span class="hl sym">{</span>Include J Zr Zi Tr Ti<span class="hl sym">}</span>
            <span class="hl kwa">if</span> J<span class="hl sym">&lt;</span>M <span class="hl kwa">andthen</span> Tr <span class="hl sym">+</span> Ti <span class="hl sym">=&lt;</span> Limit2 <span class="hl kwa">then</span>
               I <span class="hl sym">=</span> <span class="hl num">2.0</span> <span class="hl sym">*</span> Zr <span class="hl sym">*</span> Zi <span class="hl sym">+</span> Ci
               R <span class="hl sym">=</span> Tr <span class="hl sym">-</span> Ti <span class="hl sym">+</span> Cr
            <span class="hl kwa">in</span>
               <span class="hl sym">{</span>Include J<span class="hl sym">+</span><span class="hl num">1</span> R I R<span class="hl sym">*</span>R I<span class="hl sym">*</span>I<span class="hl sym">}</span>
            <span class="hl kwa">else</span>
               Tr <span class="hl sym">+</span> Ti <span class="hl sym">=&lt;</span> Limit2
            <span class="hl kwa">end</span>
         <span class="hl kwa">end</span>

      <span class="hl kwa">in</span>
         <span class="hl kwa">if</span> IX <span class="hl sym">=&lt;</span> IXMax <span class="hl kwa">then</span>
            Bits <span class="hl sym">=</span> <span class="hl kwa">if</span> <span class="hl sym">{</span>Include <span class="hl num">0 0.0 0.0 0.0 0.0</span><span class="hl sym">}</span> <span class="hl kwa">then</span> B<span class="hl sym">*</span><span class="hl num">2</span><span class="hl sym">+</span><span class="hl num">1</span> <span class="hl kwa">else</span> B<span class="hl sym">*</span><span class="hl num">2</span> <span class="hl kwa">end</span>
            Bitnum <span class="hl sym">=</span> N<span class="hl sym">+</span><span class="hl num">1</span>

            <span class="hl kwa">if</span> Bitnum <span class="hl sym">==</span> <span class="hl num">8</span> <span class="hl kwa">then</span>
               <span class="hl sym">{</span>F putC<span class="hl sym">(</span>Bits<span class="hl sym">)}</span>
               <span class="hl sym">{</span>XLoop IX<span class="hl sym">+</span><span class="hl num">1</span> Y <span class="hl num">0 0</span><span class="hl sym">}</span>
            <span class="hl kwa">elseif</span> IX <span class="hl sym">==</span> IXMax <span class="hl kwa">then</span>
               <span class="hl sym">{</span>F putC<span class="hl sym">(</span> Bits <span class="hl sym">* {</span>Pow <span class="hl num">2</span> <span class="hl sym">(</span><span class="hl num">8</span> <span class="hl sym">- (</span>Side mod <span class="hl num">8</span><span class="hl sym">))} )}</span>
               <span class="hl sym">{</span>XLoop IX<span class="hl sym">+</span><span class="hl num">1</span> Y <span class="hl num">0 0</span><span class="hl sym">}</span>
            <span class="hl kwa">else</span>
               <span class="hl sym">{</span>XLoop IX<span class="hl sym">+</span><span class="hl num">1</span> Y Bits Bitnum<span class="hl sym">}</span>
            <span class="hl kwa">end</span>
         <span class="hl kwa">end</span>
      <span class="hl kwa">end</span>


      <span class="hl kwa">proc</span> <span class="hl sym">{</span>YLoop IY<span class="hl sym">}</span>
         <span class="hl kwa">if</span> IY <span class="hl sym">=&lt;</span> IYMax <span class="hl kwa">then</span>
            <span class="hl sym">{</span>XLoop <span class="hl num">0</span> <span class="hl sym">{</span>IntToFloat IY<span class="hl sym">}</span> <span class="hl num">0 0</span><span class="hl sym">}</span>
            <span class="hl sym">{</span>YLoop IY<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">}</span>
         <span class="hl kwa">end</span>
      <span class="hl kwa">end</span>

   <span class="hl kwa">in</span>
      <span class="hl sym">{</span>F putS<span class="hl sym">(</span>&quot;P4&quot;<span class="hl sym">)}</span>
      <span class="hl sym">{</span>F putS<span class="hl sym">({</span>IntToString Side<span class="hl sym">} #</span> &quot; &quot; <span class="hl sym"># {</span>IntToString Side<span class="hl sym">})}</span>
      <span class="hl sym">{</span>YLoop <span class="hl num">0</span><span class="hl sym">}</span>
   <span class="hl kwa">end</span>


   <span class="hl sym">[</span>Arg<span class="hl sym">] = {</span>Application<span class="hl sym">.</span>getArgs plain<span class="hl sym">}</span>
   N <span class="hl sym">= {</span>String<span class="hl sym">.</span>toInt Arg<span class="hl sym">}</span>

   <span class="hl kwa">class</span> TextFile <span class="hl kwa">from</span> Open<span class="hl sym">.</span>file Open<span class="hl sym">.</span>text <span class="hl kwa">end</span>
   StdOut <span class="hl sym">= {</span>New TextFile init<span class="hl sym">(</span>name<span class="hl sym">:</span>stdout<span class="hl sym">)}</span>

<span class="hl kwa">in</span>
   <span class="hl sym">{</span>Mandelbrot StdOut N<span class="hl sym">}</span>
   <span class="hl sym">{</span>Application<span class="hl sym">.</span>exit <span class="hl num">0</span><span class="hl sym">}</span>
<span class="hl kwa">end</span>
