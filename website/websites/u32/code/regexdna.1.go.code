<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by The Go Authors.</span>
<span class="hl com"> */</span>

<span class="hl kwa">package</span> main

<span class="hl kwa">import</span> <span class="hl sym">(</span>
   <span class="hl str">&quot;fmt&quot;</span><span class="hl sym">;</span>
   <span class="hl str">&quot;io/ioutil&quot;</span><span class="hl sym">;</span>
   <span class="hl str">&quot;os&quot;</span><span class="hl sym">;</span>
   <span class="hl str">&quot;regexp&quot;</span><span class="hl sym">;</span>
   <span class="hl str">&quot;strings&quot;</span><span class="hl sym">;</span>
<span class="hl sym">)</span>

<span class="hl kwa">var</span> variants <span class="hl sym">= []</span>string<span class="hl sym">{</span>
   <span class="hl str">&quot;agggtaaa|tttaccct&quot;</span><span class="hl sym">,</span>
   <span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="hl sym">,</span>
   <span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="hl sym">,</span>
   <span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="hl sym">,</span>
   <span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="hl sym">,</span>
   <span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="hl sym">,</span>
   <span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="hl sym">,</span>
   <span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="hl sym">,</span>
   <span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span><span class="hl sym">,</span>
<span class="hl sym">}</span>

<span class="hl kwa">type</span> Subst <span class="hl kwa">struct</span> <span class="hl sym">{</span>
   pat<span class="hl sym">,</span> repl string<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwa">var</span> substs <span class="hl sym">= []</span>Subst<span class="hl sym">{</span>
   Subst<span class="hl sym">{</span><span class="hl str">&quot;B&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl sym">},</span>
   Subst<span class="hl sym">{</span><span class="hl str">&quot;D&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl sym">},</span>
   Subst<span class="hl sym">{</span><span class="hl str">&quot;H&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl sym">},</span>
   Subst<span class="hl sym">{</span><span class="hl str">&quot;K&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(g|t)&quot;</span><span class="hl sym">},</span>
   Subst<span class="hl sym">{</span><span class="hl str">&quot;M&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c)&quot;</span><span class="hl sym">},</span>
   Subst<span class="hl sym">{</span><span class="hl str">&quot;N&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl sym">},</span>
   Subst<span class="hl sym">{</span><span class="hl str">&quot;R&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|g)&quot;</span><span class="hl sym">},</span>
   Subst<span class="hl sym">{</span><span class="hl str">&quot;S&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|g)&quot;</span><span class="hl sym">},</span>
   Subst<span class="hl sym">{</span><span class="hl str">&quot;V&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl sym">},</span>
   Subst<span class="hl sym">{</span><span class="hl str">&quot;W&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|t)&quot;</span><span class="hl sym">},</span>
   Subst<span class="hl sym">{</span><span class="hl str">&quot;Y&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|t)&quot;</span><span class="hl sym">},</span>
<span class="hl sym">}</span>

<span class="hl kwa">func</span> countMatches<span class="hl sym">(</span>pat string<span class="hl sym">,</span> bytes <span class="hl sym">[]</span>byte<span class="hl sym">)</span> int <span class="hl sym">{</span>
   re <span class="hl sym">:=</span> regexp<span class="hl sym">.</span>MustCompile<span class="hl sym">(</span>pat<span class="hl sym">);</span>
   n <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">for</span> <span class="hl sym">{</span>
      e <span class="hl sym">:=</span> re<span class="hl sym">.</span>Execute<span class="hl sym">(</span>bytes<span class="hl sym">);</span>
      <span class="hl kwa">if</span> len<span class="hl sym">(</span>e<span class="hl sym">) ==</span> <span class="hl num">0</span> <span class="hl sym">{</span>
         <span class="hl kwa">break</span>
      <span class="hl sym">}</span>
      n<span class="hl sym">++;</span>
      bytes <span class="hl sym">=</span> bytes<span class="hl sym">[</span>e<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]:];</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">return</span> n<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwa">func</span> main<span class="hl sym">() {</span>
   bytes<span class="hl sym">,</span> err <span class="hl sym">:=</span> ioutil<span class="hl sym">.</span>ReadFile<span class="hl sym">(</span><span class="hl str">&quot;/dev/stdin&quot;</span><span class="hl sym">);</span>
   <span class="hl kwa">if</span> err <span class="hl sym">!=</span> nil <span class="hl sym">{</span>
      fmt<span class="hl sym">.</span>Fprintf<span class="hl sym">(</span>os<span class="hl sym">.</span>Stderr<span class="hl sym">,</span> <span class="hl str">&quot;can't read input: %s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> err<span class="hl sym">);</span>
      os<span class="hl sym">.</span>Exit<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">);</span>
   <span class="hl sym">}</span>
   ilen <span class="hl sym">:=</span> len<span class="hl sym">(</span>bytes<span class="hl sym">);</span>
   <span class="hl slc">// Delete the comment lines and newlines</span>
   bytes <span class="hl sym">=</span> regexp<span class="hl sym">.</span>MustCompile<span class="hl sym">(</span><span class="hl str">&quot;(&gt;[^</span><span class="hl esc">\n</span><span class="hl str">]+)?</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">).</span>ReplaceAll<span class="hl sym">(</span>bytes<span class="hl sym">, []</span>byte<span class="hl sym">{});</span>
   clen <span class="hl sym">:=</span> len<span class="hl sym">(</span>bytes<span class="hl sym">);</span>
   <span class="hl kwa">for</span> _<span class="hl sym">,</span> s <span class="hl sym">:=</span> <span class="hl kwa">range</span> variants <span class="hl sym">{</span>
      fmt<span class="hl sym">.</span>Printf<span class="hl sym">(</span><span class="hl str">&quot;%s %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> s<span class="hl sym">,</span> countMatches<span class="hl sym">(</span>s<span class="hl sym">,</span> bytes<span class="hl sym">))</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">for</span> _<span class="hl sym">,</span> sub <span class="hl sym">:=</span> <span class="hl kwa">range</span> substs <span class="hl sym">{</span>
      bytes <span class="hl sym">=</span> regexp<span class="hl sym">.</span>MustCompile<span class="hl sym">(</span>sub<span class="hl sym">.</span>pat<span class="hl sym">).</span>ReplaceAll<span class="hl sym">(</span>bytes<span class="hl sym">,</span> strings<span class="hl sym">.</span>Bytes<span class="hl sym">(</span>sub<span class="hl sym">.</span>repl<span class="hl sym">))</span>
   <span class="hl sym">}</span>
   fmt<span class="hl sym">.</span>Printf<span class="hl sym">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">%d</span><span class="hl esc">\n</span><span class="hl str">%d</span><span class="hl esc">\n</span><span class="hl str">%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> ilen<span class="hl sym">,</span> clen<span class="hl sym">,</span> len<span class="hl sym">(</span>bytes<span class="hl sym">));</span>
<span class="hl sym">}</span>
