<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Contributed by Jon Harrop</span>
<span class="hl com"> * Modified by Alex Mizrahi</span>
<span class="hl com"> * modified by The Anh Tran</span>
<span class="hl com">*/</span>

<span class="hl slc">// next define is for redirecting pthread_create to GC_pthread_create</span>
<span class="hl dir">#define GC_PTHREADS</span>
<span class="hl dir">#include &lt;gc_cpp.h&gt;</span>
<span class="hl dir">#include &lt;iostream&gt;</span>

<span class="hl slc">// OMP lib has [malloc, pthread_create...] buried deep inside its compiled .SO files.</span>
<span class="hl slc">// GC uses macro to redirect those functions to its customized functions.</span>
<span class="hl slc">// OMP + GC -&gt; disaster</span>
<span class="hl slc">// If you want a OMP + GC combination, you'll have to recompile OpenMP with redirect malloc, from scratch</span>
<span class="hl slc">//#include &lt;omp.h&gt;</span>


<span class="hl kwb">struct</span> Node
<span class="hl sym">{</span>
   Node <span class="hl sym">*</span>l<span class="hl sym">, *</span>r<span class="hl sym">;</span>
   <span class="hl kwb">int</span> i<span class="hl sym">;</span>

   <span class="hl kwd">Node</span><span class="hl sym">(</span><span class="hl kwb">int</span> i2<span class="hl sym">) :</span> <span class="hl kwd">l</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">),</span> <span class="hl kwd">r</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">),</span> <span class="hl kwd">i</span><span class="hl sym">(</span>i2<span class="hl sym">)</span>
   <span class="hl sym">{   }</span>
   <span class="hl kwd">Node</span><span class="hl sym">(</span>Node <span class="hl sym">*</span>l2<span class="hl sym">,</span> <span class="hl kwb">int</span> i2<span class="hl sym">,</span> Node <span class="hl sym">*</span>r2<span class="hl sym">) :</span> <span class="hl kwd">l</span><span class="hl sym">(</span>l2<span class="hl sym">),</span> <span class="hl kwd">r</span><span class="hl sym">(</span>r2<span class="hl sym">),</span> <span class="hl kwd">i</span><span class="hl sym">(</span>i2<span class="hl sym">)</span>
   <span class="hl sym">{   }</span>

   <span class="hl slc">//~Node()    { if (l) delete l;  if (r) delete r;  }</span>

   <span class="hl kwb">int</span> <span class="hl kwd">check</span><span class="hl sym">()</span> <span class="hl kwb">const</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>l <span class="hl sym">!=</span> <span class="hl num">0</span><span class="hl sym">)</span>
         <span class="hl kwa">return</span> l<span class="hl sym">-&gt;</span><span class="hl kwd">check</span><span class="hl sym">() +</span> i <span class="hl sym">-</span> r<span class="hl sym">-&gt;</span><span class="hl kwd">check</span><span class="hl sym">();</span>
      <span class="hl kwa">else</span>
         <span class="hl kwa">return</span> i<span class="hl sym">;</span>
   <span class="hl sym">}</span>
<span class="hl sym">};</span>

<span class="hl kwb">static</span> <span class="hl kwc">inline</span>
Node <span class="hl sym">*</span><span class="hl kwd">make</span><span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">,</span> <span class="hl kwb">int</span> d<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span>d <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
      <span class="hl kwa">return new</span> <span class="hl sym">(</span>GC<span class="hl sym">)</span> <span class="hl kwd">Node</span><span class="hl sym">(</span> <span class="hl kwd">make</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>i<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> d<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">),</span> i<span class="hl sym">,</span> <span class="hl kwd">make</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>i<span class="hl sym">,</span> d<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">) );</span>

   <span class="hl kwa">return new</span> <span class="hl sym">(</span>GC<span class="hl sym">)</span> <span class="hl kwd">Node</span><span class="hl sym">(</span>i<span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl slc">// parameters passing to each working thread</span>
<span class="hl kwb">struct</span> Info
<span class="hl sym">{</span>
   <span class="hl kwb">int</span>          <span class="hl sym">*</span>current_depth<span class="hl sym">;</span>
   <span class="hl kwb">int</span>         min_depth<span class="hl sym">;</span>
   <span class="hl kwb">int</span>         max_depth<span class="hl sym">;</span>
   <span class="hl kwb">char</span>      <span class="hl sym">*</span>outputstr<span class="hl sym">;</span>

   pthread_t      ht<span class="hl sym">;</span>
   pthread_spinlock_t<span class="hl sym">*</span> lock<span class="hl sym">;</span>
<span class="hl sym">};</span>

<span class="hl kwb">const size_t</span> LINE_SIZE <span class="hl sym">=</span> <span class="hl num">64</span><span class="hl sym">;</span>
<span class="hl kwb">void</span><span class="hl sym">*</span> <span class="hl kwd">ThreadRun</span><span class="hl sym">(</span><span class="hl kwb">void</span><span class="hl sym">*</span> p<span class="hl sym">)</span>
<span class="hl sym">{</span>
   Info inf <span class="hl sym">= *((</span>Info<span class="hl sym">*)</span>p<span class="hl sym">);</span>

   <span class="hl kwa">while</span> <span class="hl sym">(</span><span class="hl kwa">true</span><span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl slc">// fetch works</span>
      <span class="hl kwd">pthread_spin_lock</span><span class="hl sym">(</span>inf<span class="hl sym">.</span>lock<span class="hl sym">);</span>
      <span class="hl kwb">int</span> d <span class="hl sym">= *(</span>inf<span class="hl sym">.</span>current_depth<span class="hl sym">);</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>d <span class="hl sym">&lt;=</span> inf<span class="hl sym">.</span>max_depth<span class="hl sym">)</span>
         <span class="hl sym">*(</span>inf<span class="hl sym">.</span>current_depth<span class="hl sym">) +=</span> <span class="hl num">2</span><span class="hl sym">;</span>
      <span class="hl kwd">pthread_spin_unlock</span><span class="hl sym">(</span>inf<span class="hl sym">.</span>lock<span class="hl sym">);</span>

      <span class="hl slc">// alloc many trees</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>d <span class="hl sym">&lt;=</span> inf<span class="hl sym">.</span>max_depth<span class="hl sym">)</span>
      <span class="hl sym">{</span>
         <span class="hl kwb">int</span> iterations <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>inf<span class="hl sym">.</span>max_depth <span class="hl sym">-</span> d <span class="hl sym">+</span> inf<span class="hl sym">.</span>min_depth<span class="hl sym">);</span>
         <span class="hl kwb">int</span> c<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span>

         <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span> i <span class="hl sym">&lt;=</span> iterations<span class="hl sym">; ++</span>i<span class="hl sym">)</span>
         <span class="hl sym">{</span>
            Node <span class="hl sym">*</span>a <span class="hl sym">=</span> <span class="hl kwd">make</span><span class="hl sym">(</span>i<span class="hl sym">,</span> d<span class="hl sym">);</span>
            Node <span class="hl sym">*</span>b <span class="hl sym">=</span> <span class="hl kwd">make</span><span class="hl sym">(-</span>i<span class="hl sym">,</span> d<span class="hl sym">);</span>
            c <span class="hl sym">+=</span> a<span class="hl sym">-&gt;</span><span class="hl kwd">check</span><span class="hl sym">() +</span> b<span class="hl sym">-&gt;</span><span class="hl kwd">check</span><span class="hl sym">();</span>
            <span class="hl slc">//delete a;   delete b;</span>
         <span class="hl sym">}</span>

         <span class="hl kwd">sprintf</span><span class="hl sym">(</span>inf<span class="hl sym">.</span>outputstr <span class="hl sym">+</span> LINE_SIZE <span class="hl sym">*</span> d<span class="hl sym">,</span> <span class="hl str">&quot;%d</span><span class="hl esc">\t</span> <span class="hl str">trees of depth %d</span><span class="hl esc">\t</span> <span class="hl str">check: %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">, (</span><span class="hl num">2</span> <span class="hl sym">*</span> iterations<span class="hl sym">),</span> d<span class="hl sym">,</span> c<span class="hl sym">);</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">else</span>
         <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>


<span class="hl kwb">void</span> <span class="hl kwd">MT_AllocTree</span><span class="hl sym">(</span><span class="hl kwb">int</span> threadcount<span class="hl sym">,</span> <span class="hl kwb">int</span> min_depth<span class="hl sym">,</span> <span class="hl kwb">int</span> max_depth<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwb">char</span> <span class="hl sym">*</span> outputstr <span class="hl sym">= (</span><span class="hl kwb">char</span><span class="hl sym">*)</span><span class="hl kwd">GC_malloc_atomic</span><span class="hl sym">(</span>LINE_SIZE <span class="hl sym">* (</span>max_depth<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">) *</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span><span class="hl kwb">char</span><span class="hl sym">));</span>
   Info <span class="hl sym">*</span>inf <span class="hl sym">= (</span>Info<span class="hl sym">*)</span><span class="hl kwd">GC_malloc_atomic</span><span class="hl sym">(</span>threadcount <span class="hl sym">*</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span>Info<span class="hl sym">));</span>

   <span class="hl slc">// atomic checking &amp; changing current_depth, access from many threads</span>
   pthread_spinlock_t   lock<span class="hl sym">;</span>
   <span class="hl kwd">pthread_spin_init</span><span class="hl sym">(&amp;</span>lock<span class="hl sym">,</span> PTHREAD_PROCESS_PRIVATE<span class="hl sym">);</span>

   <span class="hl kwb">int</span> current_depth <span class="hl sym">=</span> min_depth<span class="hl sym">;</span>

   <span class="hl slc">// spawn N threads</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> t <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> t <span class="hl sym">&lt;</span> threadcount<span class="hl sym">;</span> t<span class="hl sym">++)</span>
   <span class="hl sym">{</span>
      inf<span class="hl sym">[</span>t<span class="hl sym">].</span>current_depth   <span class="hl sym">= &amp;</span>current_depth<span class="hl sym">;</span>
      inf<span class="hl sym">[</span>t<span class="hl sym">].</span>min_depth   <span class="hl sym">=</span> min_depth<span class="hl sym">;</span>
      inf<span class="hl sym">[</span>t<span class="hl sym">].</span>max_depth   <span class="hl sym">=</span> max_depth<span class="hl sym">;</span>
      inf<span class="hl sym">[</span>t<span class="hl sym">].</span>outputstr      <span class="hl sym">=</span> outputstr<span class="hl sym">;</span>
      inf<span class="hl sym">[</span>t<span class="hl sym">].</span>lock         <span class="hl sym">= &amp;</span>lock<span class="hl sym">;</span>

      <span class="hl kwd">pthread_create</span><span class="hl sym">(&amp;(</span>inf<span class="hl sym">[</span>t<span class="hl sym">].</span>ht<span class="hl sym">),</span> <span class="hl num">0</span><span class="hl sym">,</span> ThreadRun<span class="hl sym">, (</span><span class="hl kwb">void</span><span class="hl sym">*)(</span>inf <span class="hl sym">+</span>t<span class="hl sym">));</span>
   <span class="hl sym">}</span>

   <span class="hl slc">// waiting</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> t <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> t <span class="hl sym">&lt;</span> threadcount<span class="hl sym">;</span> t<span class="hl sym">++)</span>
      <span class="hl kwd">pthread_join</span><span class="hl sym">(</span>inf<span class="hl sym">[</span>t<span class="hl sym">].</span>ht<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">);</span>

   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> d <span class="hl sym">=</span> min_depth<span class="hl sym">;</span> d <span class="hl sym">&lt;=</span> max_depth<span class="hl sym">;</span> d<span class="hl sym">+=</span><span class="hl num">2</span><span class="hl sym">)</span>
      std<span class="hl sym">::</span>cout <span class="hl sym">&lt;&lt;</span> outputstr <span class="hl sym">+ (</span>d <span class="hl sym">*</span> LINE_SIZE<span class="hl sym">);</span>

   <span class="hl kwd">pthread_spin_destroy</span><span class="hl sym">(&amp;</span>lock<span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">GetThreadCount</span><span class="hl sym">();</span>
<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">*</span>argv<span class="hl sym">[])</span>
<span class="hl sym">{</span>
   <span class="hl kwd">GC_INIT</span><span class="hl sym">();</span>

   <span class="hl kwb">int</span> min_depth <span class="hl sym">=</span> <span class="hl num">4</span><span class="hl sym">;</span>
   <span class="hl kwb">int</span> max_depth <span class="hl sym">=</span> std<span class="hl sym">::</span><span class="hl kwd">max</span><span class="hl sym">(</span>min_depth <span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">, (</span>argc <span class="hl sym">==</span> <span class="hl num">2</span> ? <span class="hl kwd">atoi</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]) :</span> <span class="hl num">10</span><span class="hl sym">));</span>
   <span class="hl kwb">int</span> stretch_depth <span class="hl sym">=</span> max_depth <span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">;</span>

   <span class="hl sym">{</span>
      Node <span class="hl sym">*</span>c <span class="hl sym">=</span> <span class="hl kwd">make</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> stretch_depth<span class="hl sym">);</span>
      std<span class="hl sym">::</span>cout   <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;stretch tree of depth &quot;</span> <span class="hl sym">&lt;&lt;</span> stretch_depth <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">&quot;</span>
            <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;check: &quot;</span> <span class="hl sym">&lt;&lt;</span> c<span class="hl sym">-&gt;</span><span class="hl kwd">check</span><span class="hl sym">() &lt;&lt;</span> std<span class="hl sym">::</span>endl<span class="hl sym">;</span>
      <span class="hl slc">//delete c;</span>
   <span class="hl sym">}</span>

   Node <span class="hl sym">*</span>long_lived_tree <span class="hl sym">=</span> <span class="hl kwd">make</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> max_depth<span class="hl sym">);</span>

   <span class="hl kwb">int</span> threadcount <span class="hl sym">=</span> <span class="hl kwd">GetThreadCount</span><span class="hl sym">();</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span>threadcount <span class="hl sym">&gt;</span> <span class="hl num">1</span><span class="hl sym">)</span>
      <span class="hl kwd">MT_AllocTree</span><span class="hl sym">(</span>threadcount<span class="hl sym">,</span> min_depth<span class="hl sym">,</span> max_depth<span class="hl sym">);</span>
   <span class="hl kwa">else</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> d <span class="hl sym">=</span> min_depth<span class="hl sym">;</span> d <span class="hl sym">&lt;=</span> max_depth<span class="hl sym">;</span> d<span class="hl sym">+=</span><span class="hl num">2</span><span class="hl sym">)</span>
      <span class="hl sym">{</span>
         <span class="hl kwb">int</span> iterations <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>max_depth <span class="hl sym">-</span> d <span class="hl sym">+</span> min_depth<span class="hl sym">);</span>
         <span class="hl kwb">int</span> c<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span>

         <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span> i <span class="hl sym">&lt;=</span> iterations<span class="hl sym">; ++</span>i<span class="hl sym">)</span>
         <span class="hl sym">{</span>
            Node <span class="hl sym">*</span>a <span class="hl sym">=</span> <span class="hl kwd">make</span><span class="hl sym">(</span>i<span class="hl sym">,</span> d<span class="hl sym">);</span>
            Node <span class="hl sym">*</span>b <span class="hl sym">=</span> <span class="hl kwd">make</span><span class="hl sym">(-</span>i<span class="hl sym">,</span> d<span class="hl sym">);</span>
            c <span class="hl sym">+=</span> a<span class="hl sym">-&gt;</span><span class="hl kwd">check</span><span class="hl sym">() +</span> b<span class="hl sym">-&gt;</span><span class="hl kwd">check</span><span class="hl sym">();</span>
            <span class="hl slc">//delete a;   delete b;</span>
         <span class="hl sym">}</span>

         std<span class="hl sym">::</span>cout <span class="hl sym">&lt;&lt; (</span><span class="hl num">2</span><span class="hl sym">*</span>iterations<span class="hl sym">) &lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">trees of depth &quot;</span> <span class="hl sym">&lt;&lt;</span> d <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">&quot;</span>
               <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;check: &quot;</span> <span class="hl sym">&lt;&lt;</span> c <span class="hl sym">&lt;&lt;</span> std<span class="hl sym">::</span>endl<span class="hl sym">;</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   std<span class="hl sym">::</span>cout <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;long lived tree of depth &quot;</span> <span class="hl sym">&lt;&lt;</span> max_depth <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">&quot;</span>
         <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;check: &quot;</span> <span class="hl sym">&lt;&lt; (</span>long_lived_tree<span class="hl sym">-&gt;</span><span class="hl kwd">check</span><span class="hl sym">()) &lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>

   <span class="hl slc">//delete long_lived_tree;</span>
   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">GetThreadCount</span><span class="hl sym">()</span>
<span class="hl sym">{</span>
   cpu_set_t cs<span class="hl sym">;</span>
   <span class="hl kwd">CPU_ZERO</span><span class="hl sym">(&amp;</span>cs<span class="hl sym">);</span>
   <span class="hl kwd">sched_getaffinity</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span>cs<span class="hl sym">), &amp;</span>cs<span class="hl sym">);</span>

   <span class="hl kwb">int</span> count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">4</span><span class="hl sym">;</span> i<span class="hl sym">++)</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">CPU_ISSET</span><span class="hl sym">(</span>i<span class="hl sym">, &amp;</span>cs<span class="hl sym">))</span>
         count<span class="hl sym">++;</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">return</span> count<span class="hl sym">;</span>
<span class="hl sym">}</span>


