<span class="hl com">/*</span>
<span class="hl com"> * The Computer Language Shootout</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by Andrei Formiga</span>
<span class="hl com"> */</span>

<span class="hl kwa">object</span> fannkuch
<span class="hl sym">{</span>
  <span class="hl kwa">def</span> main<span class="hl sym">(</span>args<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">String</span><span class="hl sym">]) = {</span>
    <span class="hl kwa">val</span> n <span class="hl sym">=</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span>parseInt<span class="hl sym">(</span>args<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">))</span>
    <span class="hl kwa">var</span> maxFlips <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">var</span> permN <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">var</span> k<span class="hl sym">:</span> <span class="hl kwb">int</span> <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">var</span> temp<span class="hl sym">:</span> <span class="hl kwb">int</span> <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">var</span> first<span class="hl sym">:</span> <span class="hl kwb">int</span> <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">var</span> flips<span class="hl sym">:</span> <span class="hl kwb">int</span> <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">var</span> perm0<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwb">int</span><span class="hl sym">] =</span> <span class="hl kwa">new</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwb">int</span><span class="hl sym">](</span>n<span class="hl sym">)</span>
    <span class="hl kwa">var</span> perm<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwb">int</span><span class="hl sym">] =</span> <span class="hl kwa">new</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwb">int</span><span class="hl sym">](</span>n<span class="hl sym">)</span>
    <span class="hl kwa">var</span> rot<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwb">int</span><span class="hl sym">] =</span> <span class="hl kwa">new</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwb">int</span><span class="hl sym">](</span>n<span class="hl sym">)</span>

    <span class="hl kwa">while</span> <span class="hl sym">(</span>k <span class="hl sym">&lt;</span> n<span class="hl sym">) {</span> perm<span class="hl sym">(</span>k<span class="hl sym">) =</span> k <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span> rot<span class="hl sym">(</span>k<span class="hl sym">) =</span> <span class="hl num">0</span><span class="hl sym">;</span> k <span class="hl sym">=</span> k <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">; }</span>
    <span class="hl kwa">while</span> <span class="hl sym">(</span>rot<span class="hl sym">(</span>n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">) &lt;</span> n<span class="hl sym">) {</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>permN <span class="hl sym">&lt;</span> <span class="hl num">30</span><span class="hl sym">) {</span>
	k <span class="hl sym">=</span> <span class="hl num">0</span>
	<span class="hl kwa">while</span> <span class="hl sym">(</span>k <span class="hl sym">&lt;</span> n<span class="hl sym">) {</span>
	  Console<span class="hl sym">.</span>print<span class="hl sym">(</span>perm<span class="hl sym">(</span>k<span class="hl sym">).</span>toString<span class="hl sym">())</span>
	  k <span class="hl sym">=</span> k <span class="hl sym">+</span> <span class="hl num">1</span>
	<span class="hl sym">}</span>
	Console<span class="hl sym">.</span>println
	permN <span class="hl sym">=</span> permN <span class="hl sym">+</span> <span class="hl num">1</span>
      <span class="hl sym">}</span>

      flips <span class="hl sym">=</span> <span class="hl num">0</span>
      k <span class="hl sym">=</span> <span class="hl num">0</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>k <span class="hl sym">&lt;</span> n<span class="hl sym">) {</span> perm0<span class="hl sym">(</span>k<span class="hl sym">) =</span> perm<span class="hl sym">(</span>k<span class="hl sym">);</span> k <span class="hl sym">=</span> k <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">; }</span>
      first <span class="hl sym">=</span> perm0<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
      <span class="hl kwa">while</span><span class="hl sym">(</span>first <span class="hl sym">!=</span> <span class="hl num">1</span><span class="hl sym">) {</span>
	k <span class="hl sym">=</span> <span class="hl num">0</span>
	<span class="hl kwa">while</span> <span class="hl sym">(</span>k <span class="hl sym">&lt;</span> first <span class="hl sym">/</span> <span class="hl num">2</span><span class="hl sym">) {</span>
	  temp <span class="hl sym">=</span> perm0<span class="hl sym">(</span>k<span class="hl sym">);</span> perm0<span class="hl sym">(</span>k<span class="hl sym">) =</span> perm0<span class="hl sym">(</span>first <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl sym">-</span> k<span class="hl sym">);</span> perm0<span class="hl sym">(</span>first <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl sym">-</span> k<span class="hl sym">) =</span> temp<span class="hl sym">;</span>
	  k <span class="hl sym">=</span> k <span class="hl sym">+</span> <span class="hl num">1</span>
	<span class="hl sym">}</span>
	first <span class="hl sym">=</span> perm0<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
	flips <span class="hl sym">=</span> flips <span class="hl sym">+</span> <span class="hl num">1</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">if</span> <span class="hl sym">(</span>flips <span class="hl sym">&gt;</span> maxFlips<span class="hl sym">)</span> maxFlips <span class="hl sym">=</span> flips

      temp <span class="hl sym">=</span> perm<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span> perm<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">) =</span> perm<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">);</span> perm<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">) =</span> temp<span class="hl sym">;</span>
      rot<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">) =</span> rot<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">) +</span> <span class="hl num">1</span>
      <span class="hl kwa">var</span> j <span class="hl sym">=</span> <span class="hl num">1</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>j <span class="hl sym">&lt;</span> n <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl sym">&amp;&amp;</span> rot<span class="hl sym">(</span>j<span class="hl sym">) &gt;</span> j<span class="hl sym">) {</span>
	rot<span class="hl sym">(</span>j<span class="hl sym">) =</span> <span class="hl num">0</span>
	j <span class="hl sym">=</span> j <span class="hl sym">+</span> <span class="hl num">1</span>

	k <span class="hl sym">=</span> <span class="hl num">0</span>
  	<span class="hl kwa">while</span> <span class="hl sym">(</span>k <span class="hl sym">&lt;</span> j<span class="hl sym">) {</span>
	  temp <span class="hl sym">=</span> perm<span class="hl sym">(</span>k<span class="hl sym">);</span> perm<span class="hl sym">(</span>k<span class="hl sym">) =</span> perm<span class="hl sym">(</span>k <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">);</span> perm<span class="hl sym">(</span>k <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">) =</span> temp<span class="hl sym">;</span>
	  k <span class="hl sym">=</span> k <span class="hl sym">+</span> <span class="hl num">1</span>
	<span class="hl sym">}</span>
	rot<span class="hl sym">(</span>j<span class="hl sym">) =</span> rot<span class="hl sym">(</span>j<span class="hl sym">) +</span> <span class="hl num">1</span>
      <span class="hl sym">}</span>
    <span class="hl sym">}</span>

    Console<span class="hl sym">.</span>println<span class="hl sym">(</span><span class="hl str">&quot;Pfannkuchen(&quot;</span> <span class="hl sym">+</span> n <span class="hl sym">+</span> <span class="hl str">&quot;) = &quot;</span> <span class="hl sym">+</span> maxFlips<span class="hl sym">)</span>
  <span class="hl sym">}</span>
<span class="hl sym">}</span>

