<span class="hl sym">&lt;</span>?php
<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Damien Bonvillain</span>
<span class="hl com">   modified by anon</span>
<span class="hl com"> */</span>

<span class="hl kwa">ob_implicit_flush</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">);</span>
<span class="hl kwa">ob_start</span><span class="hl sym">(</span>NULL<span class="hl sym">,</span> <span class="hl num">4096</span><span class="hl sym">);</span>

<span class="hl kwc">$sequence</span> <span class="hl sym">=</span> <span class="hl kwd">read_sequence</span><span class="hl sym">(</span><span class="hl str">'THREE'</span><span class="hl sym">);</span>

<span class="hl kwa">fclose</span><span class="hl sym">(</span>STDIN<span class="hl sym">);</span>

<span class="hl slc">// sequence read, let's write some stats</span>
<span class="hl kwd">write_freq</span><span class="hl sym">(</span><span class="hl kwc">$sequence</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">);</span>
<span class="hl kwd">write_freq</span><span class="hl sym">(</span><span class="hl kwc">$sequence</span><span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">);</span>
<span class="hl kwd">write_count</span><span class="hl sym">(</span><span class="hl kwc">$sequence</span><span class="hl sym">,</span> <span class="hl str">'GGT'</span><span class="hl sym">);</span>
<span class="hl kwd">write_count</span><span class="hl sym">(</span><span class="hl kwc">$sequence</span><span class="hl sym">,</span> <span class="hl str">'GGTA'</span><span class="hl sym">);</span>
<span class="hl kwd">write_count</span><span class="hl sym">(</span><span class="hl kwc">$sequence</span><span class="hl sym">,</span> <span class="hl str">'GGTATT'</span><span class="hl sym">);</span>
<span class="hl kwd">write_count</span><span class="hl sym">(</span><span class="hl kwc">$sequence</span><span class="hl sym">,</span> <span class="hl str">'GGTATTTTAATT'</span><span class="hl sym">);</span>
<span class="hl kwd">write_count</span><span class="hl sym">(</span><span class="hl kwc">$sequence</span><span class="hl sym">,</span> <span class="hl str">'GGTATTTTAATTTATAGT'</span><span class="hl sym">);</span>

<span class="hl com">/* functions definitions follow */</span>

<span class="hl kwa">function</span> <span class="hl kwd">read_sequence</span><span class="hl sym">(</span><span class="hl kwc">$id</span><span class="hl sym">) {</span>
   <span class="hl kwc">$id</span> <span class="hl sym">=</span> <span class="hl str">'&gt;'</span> . <span class="hl kwc">$id</span><span class="hl sym">;</span>
   <span class="hl kwc">$ln_id</span> <span class="hl sym">=</span> <span class="hl kwa">strlen</span><span class="hl sym">(</span><span class="hl kwc">$id</span><span class="hl sym">);</span>
   <span class="hl kwc">$fd</span> <span class="hl sym">=</span> STDIN<span class="hl sym">;</span>
   <span class="hl slc">// reach sequence three</span>
   <span class="hl kwc">$line</span> <span class="hl sym">=</span> <span class="hl str">''</span><span class="hl sym">;</span>
   <span class="hl kwa">while</span><span class="hl sym">(</span><span class="hl kwc">$line</span> <span class="hl sym">!==</span> <span class="hl str">''</span> <span class="hl sym">|| !</span><span class="hl kwa">feof</span><span class="hl sym">(</span><span class="hl kwc">$fd</span><span class="hl sym">)) {</span>
      <span class="hl kwc">$line</span> <span class="hl sym">=</span> <span class="hl kwd">stream_get_line</span><span class="hl sym">(</span><span class="hl kwc">$fd</span><span class="hl sym">,</span> <span class="hl num">100</span><span class="hl sym">,</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">);</span>
      <span class="hl kwa">if</span><span class="hl sym">(</span><span class="hl kwc">$line</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] ==</span> <span class="hl str">'&gt;'</span> <span class="hl sym">&amp;&amp;</span> <span class="hl kwa">strncmp</span><span class="hl sym">(</span><span class="hl kwc">$line</span><span class="hl sym">,</span> <span class="hl kwc">$id</span><span class="hl sym">,</span> <span class="hl kwc">$ln_id</span><span class="hl sym">) ===</span> <span class="hl num">0</span><span class="hl sym">) {</span>
         <span class="hl kwa">break</span><span class="hl sym">;</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">if</span><span class="hl sym">(</span><span class="hl kwa">feof</span><span class="hl sym">(</span><span class="hl kwc">$fd</span><span class="hl sym">)) {</span>
      <span class="hl slc">// sequence not found</span>
      <span class="hl kwa">exit</span><span class="hl sym">(-</span><span class="hl num">1</span><span class="hl sym">);</span>
   <span class="hl sym">}</span>
   <span class="hl slc">// next, read the content of the sequence</span>
   <span class="hl kwc">$sequence</span> <span class="hl sym">=</span> <span class="hl str">''</span><span class="hl sym">;</span>
   <span class="hl kwa">while</span><span class="hl sym">(</span><span class="hl kwc">$line</span> <span class="hl sym">!==</span> <span class="hl str">''</span> <span class="hl sym">|| !</span><span class="hl kwa">feof</span><span class="hl sym">(</span><span class="hl kwc">$fd</span><span class="hl sym">)) {</span>
      <span class="hl kwc">$line</span> <span class="hl sym">=</span> <span class="hl kwd">stream_get_line</span><span class="hl sym">(</span><span class="hl kwc">$fd</span><span class="hl sym">,</span> <span class="hl num">100</span><span class="hl sym">,</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">);</span>
      <span class="hl kwa">if</span> <span class="hl sym">(!</span><span class="hl kwd">isset</span><span class="hl sym">(</span><span class="hl kwc">$line</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]))</span> <span class="hl kwa">continue</span><span class="hl sym">;</span>
      <span class="hl kwc">$c</span> <span class="hl sym">=</span> <span class="hl kwc">$line</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwc">$c</span> <span class="hl sym">===</span> <span class="hl str">';'</span><span class="hl sym">)</span> <span class="hl kwa">continue</span><span class="hl sym">;</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwc">$c</span> <span class="hl sym">===</span> <span class="hl str">'&gt;'</span><span class="hl sym">)</span> <span class="hl kwa">break</span><span class="hl sym">;</span>
      <span class="hl slc">// append the uppercase sequence fragment,</span>
      <span class="hl slc">// must get rid of the CR/LF or whatever if present</span>
      <span class="hl kwc">$sequence</span> .<span class="hl sym">=</span> <span class="hl kwc">$line</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">return strtoupper</span><span class="hl sym">(&amp;</span><span class="hl kwc">$sequence</span><span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">write_freq</span><span class="hl sym">(&amp;</span><span class="hl kwc">$sequence</span><span class="hl sym">,</span> <span class="hl kwc">$key_length</span><span class="hl sym">) {</span>
   <span class="hl kwc">$map</span> <span class="hl sym">=</span> <span class="hl kwd">generate_frequencies</span><span class="hl sym">(</span><span class="hl kwc">$sequence</span><span class="hl sym">,</span> <span class="hl kwc">$key_length</span><span class="hl sym">);</span>
   <span class="hl kwd">sort_by_freq_and_name</span><span class="hl sym">(</span><span class="hl kwc">$map</span><span class="hl sym">);</span>
   <span class="hl kwa">foreach</span><span class="hl sym">(</span><span class="hl kwc">$map</span> as <span class="hl kwc">$key</span> <span class="hl sym">=&gt;</span> <span class="hl kwc">$val</span><span class="hl sym">) {</span>
      <span class="hl kwa">printf</span> <span class="hl sym">(</span><span class="hl str">&quot;%s %.3f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> <span class="hl kwc">$key</span><span class="hl sym">,</span> <span class="hl kwc">$val</span><span class="hl sym">);</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">echo</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">write_count</span><span class="hl sym">(&amp;</span><span class="hl kwc">$sequence</span><span class="hl sym">,</span> <span class="hl kwc">$key</span><span class="hl sym">) {</span>
   <span class="hl kwc">$map</span> <span class="hl sym">=</span> <span class="hl kwd">generate_frequencies</span><span class="hl sym">(</span><span class="hl kwc">$sequence</span><span class="hl sym">,</span> <span class="hl kwa">strlen</span><span class="hl sym">(</span><span class="hl kwc">$key</span><span class="hl sym">),</span> false<span class="hl sym">);</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">isset</span><span class="hl sym">(</span><span class="hl kwc">$map</span><span class="hl sym">[</span><span class="hl kwc">$key</span><span class="hl sym">]))</span> <span class="hl kwc">$value</span> <span class="hl sym">=</span> <span class="hl kwc">$map</span><span class="hl sym">[</span><span class="hl kwc">$key</span><span class="hl sym">];</span>
   <span class="hl kwa">else</span> <span class="hl kwc">$value</span> <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">printf</span> <span class="hl sym">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\t</span><span class="hl str">%s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> <span class="hl kwc">$value</span><span class="hl sym">,</span> <span class="hl kwc">$key</span><span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl com">/**</span>
<span class="hl com"> * Returns a map (key, count or freq(default))</span>
<span class="hl com"> */</span>
<span class="hl kwa">function</span> <span class="hl kwd">generate_frequencies</span><span class="hl sym">(&amp;</span><span class="hl kwc">$sequence</span><span class="hl sym">,</span> <span class="hl kwc">$key_length</span><span class="hl sym">,</span> <span class="hl kwc">$compute_freq</span> <span class="hl sym">=</span> true<span class="hl sym">) {</span>
   <span class="hl kwc">$result</span> <span class="hl sym">=</span> <span class="hl kwa">array</span><span class="hl sym">();</span>
   <span class="hl kwc">$total</span> <span class="hl sym">=</span> <span class="hl kwa">strlen</span><span class="hl sym">(&amp;</span><span class="hl kwc">$sequence</span><span class="hl sym">) -</span> <span class="hl kwc">$key_length</span><span class="hl sym">;</span>
   <span class="hl kwc">$i</span> <span class="hl sym">=</span> <span class="hl kwc">$total</span><span class="hl sym">;</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwc">$key_length</span> <span class="hl sym">===</span> <span class="hl num">1</span><span class="hl sym">) {</span>
      do <span class="hl sym">{</span>
         <span class="hl kwc">$key</span> <span class="hl sym">=</span> <span class="hl kwc">$sequence</span><span class="hl sym">[</span><span class="hl kwc">$i</span><span class="hl sym">--];</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">isset</span><span class="hl sym">(</span><span class="hl kwc">$result</span><span class="hl sym">[</span><span class="hl kwc">$key</span><span class="hl sym">])) ++</span><span class="hl kwc">$result</span><span class="hl sym">[</span><span class="hl kwc">$key</span><span class="hl sym">];</span>
         <span class="hl kwa">else</span> <span class="hl kwc">$result</span><span class="hl sym">[</span><span class="hl kwc">$key</span><span class="hl sym">] =</span> <span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl sym">}</span> <span class="hl kwa">while</span> <span class="hl sym">(</span><span class="hl kwc">$i</span><span class="hl sym">);</span>
   <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
      do <span class="hl sym">{</span>
         <span class="hl kwc">$key</span> <span class="hl sym">=</span> <span class="hl kwa">substr</span><span class="hl sym">(&amp;</span><span class="hl kwc">$sequence</span><span class="hl sym">,</span> <span class="hl kwc">$i</span><span class="hl sym">--,</span> <span class="hl kwc">$key_length</span><span class="hl sym">);</span>
         <span class="hl kwa">if</span><span class="hl sym">(</span><span class="hl kwd">isset</span><span class="hl sym">(</span><span class="hl kwc">$result</span><span class="hl sym">[</span><span class="hl kwc">$key</span><span class="hl sym">])) ++</span><span class="hl kwc">$result</span><span class="hl sym">[</span><span class="hl kwc">$key</span><span class="hl sym">];</span>
         <span class="hl kwa">else</span> <span class="hl kwc">$result</span><span class="hl sym">[</span><span class="hl kwc">$key</span><span class="hl sym">] =</span> <span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl sym">}</span> <span class="hl kwa">while</span> <span class="hl sym">(</span><span class="hl kwc">$i</span><span class="hl sym">);</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">if</span><span class="hl sym">(</span><span class="hl kwc">$compute_freq</span><span class="hl sym">) {</span>
      <span class="hl kwa">foreach</span><span class="hl sym">(</span><span class="hl kwc">$result</span> as <span class="hl sym">&amp;</span><span class="hl kwc">$v</span><span class="hl sym">) {</span>
         <span class="hl kwc">$v</span> <span class="hl sym">=</span> <span class="hl kwc">$v</span> <span class="hl sym">*</span> <span class="hl num">100</span> <span class="hl sym">/</span> <span class="hl kwc">$total</span><span class="hl sym">;</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">return</span> <span class="hl kwc">$result</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">compute_freq</span><span class="hl sym">(&amp;</span><span class="hl kwc">$count_freq</span><span class="hl sym">,</span> <span class="hl kwc">$key</span><span class="hl sym">,</span> <span class="hl kwc">$total</span><span class="hl sym">) {</span>
   <span class="hl kwc">$count_freq</span> <span class="hl sym">= (</span><span class="hl kwc">$count_freq</span><span class="hl sym">*</span> <span class="hl num">100</span><span class="hl sym">) /</span> <span class="hl kwc">$total</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">sort_by_freq_and_name</span><span class="hl sym">(&amp;</span><span class="hl kwc">$map</span><span class="hl sym">) {</span>
   <span class="hl slc">// since PHP 4.1.0, sorting is not stable =&gt; dirty kludge</span>
   <span class="hl kwa">array_walk</span><span class="hl sym">(</span><span class="hl kwc">$map</span><span class="hl sym">,</span> <span class="hl str">'append_key'</span><span class="hl sym">);</span>
   <span class="hl kwa">uasort</span><span class="hl sym">(</span><span class="hl kwc">$map</span><span class="hl sym">,</span> <span class="hl str">'freq_name_comparator'</span><span class="hl sym">);</span>
   <span class="hl kwa">array_walk</span><span class="hl sym">(</span><span class="hl kwc">$map</span><span class="hl sym">,</span> <span class="hl str">'remove_key'</span><span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">append_key</span><span class="hl sym">(&amp;</span><span class="hl kwc">$val</span><span class="hl sym">,</span> <span class="hl kwc">$key</span><span class="hl sym">) {</span>
   <span class="hl kwc">$val</span> <span class="hl sym">=</span> <span class="hl kwa">array</span><span class="hl sym">(</span><span class="hl kwc">$val</span><span class="hl sym">,</span> <span class="hl kwc">$key</span><span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">freq_name_comparator</span><span class="hl sym">(</span><span class="hl kwc">$val1</span><span class="hl sym">,</span> <span class="hl kwc">$val2</span><span class="hl sym">) {</span>
   <span class="hl kwc">$delta</span> <span class="hl sym">=</span> <span class="hl kwc">$val2</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] -</span> <span class="hl kwc">$val1</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
   <span class="hl slc">// the comparator must return something close to an int</span>
   <span class="hl kwc">$result</span> <span class="hl sym">= (</span><span class="hl kwc">$delta</span> <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span>?<span class="hl kwa">strcmp</span><span class="hl sym">(</span><span class="hl kwc">$val1</span><span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">],</span><span class="hl kwc">$val2</span><span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]):</span>
      <span class="hl sym">(</span><span class="hl kwc">$delta</span> <span class="hl sym">&lt;</span> <span class="hl num">0</span><span class="hl sym">)</span>?<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">:</span><span class="hl num">1</span><span class="hl sym">;</span>
   <span class="hl kwa">return</span> <span class="hl kwc">$result</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">remove_key</span><span class="hl sym">(&amp;</span><span class="hl kwc">$val</span><span class="hl sym">,</span> <span class="hl kwc">$key</span><span class="hl sym">) {</span>
   <span class="hl kwc">$val</span> <span class="hl sym">=</span> <span class="hl kwc">$val</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
<span class="hl sym">}</span>

