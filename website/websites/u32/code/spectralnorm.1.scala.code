<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Isaac Gouy</span>
<span class="hl com">   modified by Meiko Rachimow</span>
<span class="hl com">   updated for 2.8 by Rex Kerr</span>
<span class="hl com">*/</span>

<span class="hl kwa">object</span> spectralnorm <span class="hl sym">{</span>
  <span class="hl kwa">def</span> main<span class="hl sym">(</span>args<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">String</span><span class="hl sym">]) = {</span>
    <span class="hl kwa">val</span> n <span class="hl sym">= (</span><span class="hl kwa">if</span> <span class="hl sym">(</span>args<span class="hl sym">.</span>length<span class="hl sym">&gt;</span><span class="hl num">0</span><span class="hl sym">)</span> args<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">).</span>toInt <span class="hl kwa">else</span> <span class="hl num">100</span><span class="hl sym">)</span>
    printf<span class="hl sym">(</span><span class="hl str">&quot;%.09f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">, (</span><span class="hl kwa">new</span> SpectralNorm<span class="hl sym">(</span>n<span class="hl sym">)).</span>approximate<span class="hl sym">())</span>
  <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwa">class</span> SpectralNorm<span class="hl sym">(</span>n<span class="hl sym">:</span> Int<span class="hl sym">) {</span>

  <span class="hl slc">// Ordinary and transposed versions of infinite matrix</span>
  <span class="hl kwa">val</span> A <span class="hl sym">= (</span>i<span class="hl sym">:</span> Int<span class="hl sym">,</span> j<span class="hl sym">:</span> Int<span class="hl sym">) =&gt;</span> <span class="hl num">1.0</span><span class="hl sym">/((</span>i<span class="hl sym">+</span>j<span class="hl sym">)*(</span>i<span class="hl sym">+</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)/</span><span class="hl num">2</span> <span class="hl sym">+</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>
  <span class="hl kwa">val</span> At <span class="hl sym">= (</span>j<span class="hl sym">:</span> Int<span class="hl sym">,</span> i<span class="hl sym">:</span> Int<span class="hl sym">) =&gt;</span> <span class="hl num">1.0</span><span class="hl sym">/((</span>i<span class="hl sym">+</span>j<span class="hl sym">)*(</span>i<span class="hl sym">+</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)/</span><span class="hl num">2</span> <span class="hl sym">+</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>

  <span class="hl slc">// Matrix multiplication w &lt;- M*v</span>
  <span class="hl kwa">def</span> mult<span class="hl sym">(</span>v<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">Double</span><span class="hl sym">],</span> w<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">Double</span><span class="hl sym">],</span> M<span class="hl sym">: (</span>Int<span class="hl sym">,</span>Int<span class="hl sym">)=&gt;</span> <span class="hl kwc">Double</span> <span class="hl sym">) {</span>
    <span class="hl kwa">var</span> i <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> n<span class="hl sym">) {</span>
     <span class="hl kwa">var</span> s <span class="hl sym">=</span> <span class="hl num">0.0</span>
     <span class="hl kwa">var</span> j <span class="hl sym">=</span> <span class="hl num">0</span>
     <span class="hl kwa">while</span> <span class="hl sym">(</span>j <span class="hl sym">&lt;</span> n<span class="hl sym">) {</span> s <span class="hl sym">+=</span> M<span class="hl sym">(</span>i<span class="hl sym">,</span>j<span class="hl sym">)*</span>v<span class="hl sym">(</span>j<span class="hl sym">);</span> j <span class="hl sym">+=</span> <span class="hl num">1</span> <span class="hl sym">}</span>
     w<span class="hl sym">(</span>i<span class="hl sym">) =</span>  s
     i <span class="hl sym">+=</span> <span class="hl num">1</span>
    <span class="hl sym">}</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">def</span> approximate<span class="hl sym">() = {</span>
    <span class="hl kwa">val</span> u<span class="hl sym">,</span>v<span class="hl sym">,</span>w <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>fill<span class="hl sym">(</span>n<span class="hl sym">)(</span><span class="hl num">1.0</span><span class="hl sym">)</span>

    <span class="hl kwa">var</span> i <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> <span class="hl num">10</span><span class="hl sym">) {</span>
      <span class="hl slc">// Multiply by matrix &amp; transpose</span>
      mult<span class="hl sym">(</span>u<span class="hl sym">,</span>w<span class="hl sym">,</span>A<span class="hl sym">)</span>
      mult<span class="hl sym">(</span>w<span class="hl sym">,</span>v<span class="hl sym">,</span>At<span class="hl sym">)</span>
      mult<span class="hl sym">(</span>v<span class="hl sym">,</span>w<span class="hl sym">,</span>A<span class="hl sym">)</span>
      mult<span class="hl sym">(</span>w<span class="hl sym">,</span>u<span class="hl sym">,</span>At<span class="hl sym">)</span>
      i <span class="hl sym">+=</span> <span class="hl num">1</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">var</span> vbv<span class="hl sym">,</span>vv <span class="hl sym">=</span> <span class="hl num">0.0</span>
    i <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> n<span class="hl sym">) {</span>
      vbv <span class="hl sym">+=</span> u<span class="hl sym">(</span>i<span class="hl sym">)*</span>v<span class="hl sym">(</span>i<span class="hl sym">)</span>
      vv <span class="hl sym">+=</span> v<span class="hl sym">(</span>i<span class="hl sym">)*</span>v<span class="hl sym">(</span>i<span class="hl sym">)</span>
      i <span class="hl sym">+=</span> <span class="hl num">1</span>
    <span class="hl sym">}</span>

    math<span class="hl sym">.</span>sqrt<span class="hl sym">(</span>vbv<span class="hl sym">/</span>vv<span class="hl sym">)</span>
  <span class="hl sym">}</span>
<span class="hl sym">}</span>
