
Fri, 07 Nov 2008 03:43:45 GMT

MAKE:
cp: `mandelbrot.sbcl' and `./mandelbrot.sbcl' are the same file
SBCL built with: /usr/local/bin/sbcl --userinit /dev/null -batch -eval '(load "mandelbrot.sbcl_compile")'
### START mandelbrot.sbcl_compile
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(handler-bind ((sb-ext:defconstant-uneql      (lambda (c) (abort c))))      (load (compile-file "mandelbrot.sbcl" ))) (save-lisp-and-die "sbcl.core" :purify t)
### END mandelbrot.sbcl_compile


; compiling file "/home/dunham/shootout/bench/mandelbrot/mandelbrot.sbcl" (written 14 OCT 2008 09:38:47 PM):
; compiling (DEFTYPE INDEX ...)
; compiling (DECLAIM (INLINE IN-SET-P))
; compiling (DEFUN IN-SET-P ...)
; compiling (DEFUN RENDER ...)
; file: /home/dunham/shootout/bench/mandelbrot/mandelbrot.sbcl
; in: DEFUN RENDER
;     (LOOP REPEAT NPROC COLLECT (SB-THREAD:MAKE-THREAD #'COMPUTE-ROWS))
; --> BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; --> FUNCTION IF AND IF NOT IF ZEROP 
; ==>
;   (= REM 0)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.
; 
; note: unable to open code because: The operands might not be the same type.

; --> BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; --> FUNCTION IF AND IF AND IF MINUSP 
; ==>
;   (< SB-KERNEL::DIVISOR 0)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.

; ==>
;   (< NUMBER 0)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.

; --> BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; --> FUNCTION IF AND IF AND IF PLUSP 
; ==>
;   (> NUMBER 0)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.

; --> BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; --> FUNCTION IF VALUES 
; ==>
;   (- REM SB-KERNEL::DIVISOR)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a RATIONAL.
;   The second argument is a REAL, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.
;   The second argument is a REAL, not a RATIONAL.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a SINGLE-FLOAT.
;   The second argument is a REAL, not a DOUBLE-FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a DOUBLE-FLOAT.
;   The second argument is a REAL, not a SINGLE-FLOAT.

; --> BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; ==>
;   (TRUNCATE NUMBER SB-KERNEL::DIVISOR)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.
;   The second argument is a REAL, not a (OR SINGLE-FLOAT DOUBLE-FLOAT INTEGER).
; 
; note: unable to
;   convert division by 2^k to shift
; due to type uncertainty:
;   The first argument is a REAL, not a INTEGER.
;   The second argument is a REAL, not a INTEGER.

; --> BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; --> FUNCTION IF AND IF AND IF MINUSP 
; ==>
;   (< SB-KERNEL::DIVISOR 0)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a REAL, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a REAL, not a FIXNUM.
;       etc.

; --> BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; --> FUNCTION IF AND IF AND IF PLUSP 
; ==>
;   (> NUMBER 0)
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a REAL, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a REAL, not a FIXNUM.
;       etc.

; --> BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; --> FUNCTION IF AND IF AND IF MINUSP 
; ==>
;   (< NUMBER 0)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a REAL, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a REAL, not a FIXNUM.
;       etc.

; --> BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; --> FUNCTION IF VALUES 
; ==>
;   (+ SB-KERNEL::TRU 1)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       The result is a (VALUES INTEGER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       The result is a (VALUES INTEGER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

; ==>
;   (- REM SB-KERNEL::DIVISOR)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline float arithmetic (cost 2) because:
;       The first argument is a REAL, not a DOUBLE-FLOAT.
;       The second argument is a REAL, not a DOUBLE-FLOAT.
;       The result is a (VALUES REAL &OPTIONAL), not a (VALUES DOUBLE-FLOAT &REST
;                                                              T).
;       unable to do inline float arithmetic (cost 2) because:
;       The first argument is a REAL, not a SINGLE-FLOAT.
;       The second argument is a REAL, not a SINGLE-FLOAT.
;       The result is a (VALUES REAL &OPTIONAL), not a (VALUES SINGLE-FLOAT &REST
;                                                              T).
;       etc.

;     (* SIZE (CEILING SIZE 8))
; 
; note: forced to do GENERIC-* (cost 30)
;       unable to do inline fixnum arithmetic (cost 4) because:
;       The second argument is a INTEGER, not a FIXNUM.
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The second argument is a INTEGER, not a (SIGNED-BYTE 32).
;       etc.

;     (LOOP REPEAT NPROC COLLECT (SB-THREAD:MAKE-THREAD #'COMPUTE-ROWS))
; --> BLOCK LET SB-LOOP::WITH-LOOP-LIST-COLLECTION-HEAD LET* SB-LOOP::LOOP-BODY 
; --> TAGBODY IF <= IF 
; ==>
;   (> SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> BLOCK LET SB-LOOP::WITH-LOOP-LIST-COLLECTION-HEAD LET* SB-LOOP::LOOP-BODY 
; --> TAGBODY IF DECF LET* 
; ==>
;   (- #:LOOP-REPEAT-43 #:G47)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (INTEGER 1), not a FIXNUM.
;       The result is a (VALUES UNSIGNED-BYTE &OPTIONAL), not a (VALUES FIXNUM
;                                                                       &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (INTEGER 1), not a FIXNUM.
;       The result is a (VALUES UNSIGNED-BYTE &OPTIONAL), not a (VALUES FIXNUM
;                                                                       &REST T).
;       etc.

;     (LABELS ((COMPUTE-ROW (BASE-IMAG ROW-INDEX)
;                (DECLARE (TYPE DOUBLE-FLOAT BASE-IMAG) (TYPE INDEX ROW-INDEX)
;                 (OPTIMIZE #))
;                (LOOP FOR X OF-TYPE INDEX BELOW SIZE BY 8 FOR INDEX OF-TYPE ...))
;              (GET-NEXT-ROW ()
;                (LOOP FOR OLD-Y OF-TYPE INDEX = (CAR CUR-ROW) WHEN (EQ OLD-Y #) DO
;                      (RETURN OLD-Y)))
;              (COMPUTE-ROWS ()
;                (LOOP FOR Y = (GET-NEXT-ROW) WHILE (< Y SIZE) DO
;                      (LET #
;                        #))
;                NIL))
;       (IF (= NPROC 1) (COMPUTE-ROWS)
;           (MAPC #'SB-THREAD:JOIN-THREAD
;                 (LOOP REPEAT NPROC COLLECT
;                       (SB-THREAD:MAKE-THREAD #'COMPUTE-ROWS)))))
; --> SB-C::%%ALLOCATE-CLOSURES 
; ==>
;   (SB-C::%ALLOCATE-CLOSURES
;    '(#<SB-C::CLAMBDA
;        :%SOURCE-NAME COMPUTE-ROW
;        :%DEBUG-NAME (LABELS COMPUTE-ROW)
;        :KIND :ZOMBIE
;        :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
;        :WHERE-FROM :DEFINED
;        :VARS (BASE-IMAG ROW-INDEX) {A9A4B79}>
;      #<SB-C::CLAMBDA
;        :%SOURCE-NAME GET-NEXT-ROW
;        :%DEBUG-NAME (LABELS GET-NEXT-ROW)
;        :KIND :ZOMBIE
;        :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
;        :WHERE-FROM :DEFINED
;        :VARS NIL {A9D1441}>
;      #<SB-C::CLAMBDA
;        :%SOURCE-NAME COMPUTE-ROWS
;        :%DEBUG-NAME (LABELS COMPUTE-ROWS)
;        :KIND NIL
;        :TYPE #<SB-KERNEL:FUN-TYPE #>
;        :WHERE-FROM :DEFINED
;        :VARS NIL {A9D4181}>))
; 
; note: doing float to pointer coercion (cost 13), for:
;       the second argument of CLOSURE-INIT

;     (COMPARE-AND-SWAP (CAR CUR-ROW) OLD-Y (1+ OLD-Y))
; ==>
;   (SB-KERNEL:%COMPARE-AND-SWAP-CAR (THE CONS CUR-ROW) OLD-Y (1+ OLD-Y))
; 
; note: doing signed word to integer coercion (cost 20), for:
;       the third argument of COMPARE-AND-SWAP-SLOT

; compiling (DEFUN MAIN ...)
; file: /home/dunham/shootout/bench/mandelbrot/mandelbrot.sbcl
; in: DEFUN MAIN
;     (FORMAT STREAM "P4~%~d ~d~%" N N)
; ==>
;   (FORMAT SB-C::DEST (FORMATTER "P4~%~d ~d~%") #:G99 #:G100)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a (OR (MEMBER NIL T) STREAM (VECTOR CHARACTER)
;                               (VECTOR NIL) BASE-STRING), not a STREAM.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a (OR (MEMBER NIL T) STREAM (VECTOR CHARACTER)
;                               (VECTOR NIL) BASE-STRING), not a (MEMBER T).
; 
; compilation unit finished
;   printed 23 notes


; /home/dunham/benchmarksgame_onecore/mandelbrot/tmp/mandelbrot.fasl written
; compilation finished in 0:00:00
[undoing binding stack and other enclosing state... done]
[saving current Lisp image into /home/dunham/benchmarksgame_onecore/mandelbrot/tmp/sbcl.core:
writing 3528 bytes from the read-only space at 0x01000000
writing 2160 bytes from the static space at 0x01100000
writing 26611712 bytes from the dynamic space at 0x09000000
done]
### START mandelbrot.sbcl_run
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(main) (quit)
### END mandelbrot.sbcl_run

0.58s to complete and log all make actions

COMMAND LINE:
/usr/local/bin/sbcl --noinform --core sbcl.core --userinit /dev/null --load mandelbrot.sbcl_run 6400

(BINARY) PROGRAM OUTPUT NOT SHOWN
