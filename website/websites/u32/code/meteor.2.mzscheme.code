<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;</span>
<span class="hl slc">;; Based on a Python version:</span>
<span class="hl slc">;;   contributed by Olof Kraigher</span>
<span class="hl slc">;;    modified by Tupteq</span>
<span class="hl slc">;;   contributed by Matthew Flatt</span>
<span class="hl slc">;;   optimized by Eli Barzilay</span>

#lang scheme<span class="hl sym">/</span>base
<span class="hl sym">(</span>require scheme<span class="hl sym">/</span>cmdline scheme<span class="hl sym">/</span><span class="hl kwa">list</span><span class="hl sym">)</span>

<span class="hl sym">(</span>define width <span class="hl num">5</span><span class="hl sym">)</span>
<span class="hl sym">(</span>define height <span class="hl num">10</span><span class="hl sym">)</span>
<span class="hl sym">(</span>define size <span class="hl sym">(*</span> width height<span class="hl sym">))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>valid<span class="hl sym">-</span>xy? x y<span class="hl sym">)</span>
  <span class="hl sym">(</span><span class="hl kwa">and</span> <span class="hl sym">(</span><span class="hl num">0</span> . <span class="hl sym">&lt;=</span> . x<span class="hl sym">)</span>
       <span class="hl sym">(</span>x . <span class="hl sym">&lt;</span> . width<span class="hl sym">)</span>
       <span class="hl sym">(</span><span class="hl num">0</span> . <span class="hl sym">&lt;=</span> . y<span class="hl sym">)</span>
       <span class="hl sym">(</span>y . <span class="hl sym">&lt;</span> . height<span class="hl sym">)))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>mover fun<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">([</span>t <span class="hl sym">(</span>make<span class="hl sym">-</span>vector size<span class="hl sym">)])</span>
    <span class="hl sym">(</span>for <span class="hl sym">([</span>p <span class="hl sym">(</span>in<span class="hl sym">-</span>range size<span class="hl sym">)])</span>
      <span class="hl sym">(</span>vector<span class="hl sym">-</span><span class="hl kwa">set</span><span class="hl sym">!</span> t p <span class="hl sym">(</span>let<span class="hl sym">*-</span>values <span class="hl sym">([(</span>y x<span class="hl sym">) (</span>quotient<span class="hl sym">/</span>remainder p width<span class="hl sym">)]</span>
                                     <span class="hl sym">[(</span>x y<span class="hl sym">) (</span>fun x y<span class="hl sym">)])</span>
                         <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>valid<span class="hl sym">-</span>xy? x y<span class="hl sym">) (+</span> x <span class="hl sym">(*</span> y width<span class="hl sym">)) -</span><span class="hl num">1</span><span class="hl sym">))))</span>
    t<span class="hl sym">))</span>

<span class="hl sym">(</span>define E
  <span class="hl sym">(</span>mover <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>x y<span class="hl sym">) (</span>values <span class="hl sym">(</span>add1 x<span class="hl sym">)</span> y<span class="hl sym">))))</span>
<span class="hl sym">(</span>define W
  <span class="hl sym">(</span>mover <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>x y<span class="hl sym">) (</span>values <span class="hl sym">(</span>sub1 x<span class="hl sym">)</span> y<span class="hl sym">))))</span>
<span class="hl sym">(</span>define NE
  <span class="hl sym">(</span>mover <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>x y<span class="hl sym">) (</span>values <span class="hl sym">(+</span> x <span class="hl sym">(</span>bitwise<span class="hl sym">-</span><span class="hl kwa">and</span> y <span class="hl num">1</span><span class="hl sym">)) (</span>sub1 y<span class="hl sym">)))))</span>
<span class="hl sym">(</span>define NW
  <span class="hl sym">(</span>mover <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>x y<span class="hl sym">) (</span>values <span class="hl sym">(</span>sub1 <span class="hl sym">(+</span> x <span class="hl sym">(</span>bitwise<span class="hl sym">-</span><span class="hl kwa">and</span> y <span class="hl num">1</span><span class="hl sym">))) (</span>sub1 y<span class="hl sym">)))))</span>
<span class="hl sym">(</span>define SE
  <span class="hl sym">(</span>mover <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>x y<span class="hl sym">) (</span>values <span class="hl sym">(+</span> x <span class="hl sym">(</span>bitwise<span class="hl sym">-</span><span class="hl kwa">and</span> y <span class="hl num">1</span><span class="hl sym">)) (</span>add1 y<span class="hl sym">)))))</span>
<span class="hl sym">(</span>define SW
  <span class="hl sym">(</span>mover <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>x y<span class="hl sym">) (</span>values <span class="hl sym">(</span>sub1 <span class="hl sym">(+</span> x <span class="hl sym">(</span>bitwise<span class="hl sym">-</span><span class="hl kwa">and</span> y <span class="hl num">1</span><span class="hl sym">))) (</span>add1 y<span class="hl sym">)))))</span>

<span class="hl sym">(</span>define rotate<span class="hl sym">-</span><span class="hl kwa">list</span> <span class="hl sym">(</span><span class="hl kwa">list</span> E NE NW W SW SE E<span class="hl sym">))</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>rotate dir<span class="hl sym">)</span>
  <span class="hl sym">(</span><span class="hl kwa">cadr</span> <span class="hl sym">(</span>memq dir rotate<span class="hl sym">-</span><span class="hl kwa">list</span><span class="hl sym">)))</span>

<span class="hl sym">(</span>define flip<span class="hl sym">-</span>alist <span class="hl sym">(</span><span class="hl kwa">list</span> <span class="hl sym">(</span><span class="hl kwa">cons</span> E W<span class="hl sym">) (</span><span class="hl kwa">cons</span> NE NW<span class="hl sym">) (</span><span class="hl kwa">cons</span> NW NE<span class="hl sym">)</span>
                         <span class="hl sym">(</span><span class="hl kwa">cons</span> W E<span class="hl sym">) (</span><span class="hl kwa">cons</span> SW SE<span class="hl sym">) (</span><span class="hl kwa">cons</span> SE SW<span class="hl sym">)))</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>flip dir<span class="hl sym">) (</span><span class="hl kwa">cdr</span> <span class="hl sym">(</span>assq dir flip<span class="hl sym">-</span>alist<span class="hl sym">)))</span>

<span class="hl sym">(</span>define movers <span class="hl sym">(</span><span class="hl kwa">list</span> E W NE NW SE SW<span class="hl sym">))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>valid? p<span class="hl sym">)</span>
  <span class="hl sym">(</span>p . <span class="hl sym">&gt;=</span> . <span class="hl num">0</span><span class="hl sym">))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>clear? board pos<span class="hl sym">)</span>
  <span class="hl sym">(</span><span class="hl kwa">not</span> <span class="hl sym">(</span>bitwise<span class="hl sym">-</span>bit<span class="hl sym">-</span><span class="hl kwa">set</span>? board pos<span class="hl sym">)))</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span><span class="hl kwa">set</span> board pos<span class="hl sym">)</span>
  <span class="hl sym">(</span>bitwise<span class="hl sym">-</span>ior board <span class="hl sym">(</span>arithmetic<span class="hl sym">-</span>shift <span class="hl num">1</span> pos<span class="hl sym">)))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>zero<span class="hl sym">-</span>count board<span class="hl sym">)</span>
  <span class="hl sym">(</span>for<span class="hl sym">/</span>fold <span class="hl sym">([</span>count <span class="hl num">0</span><span class="hl sym">]) ([</span>i <span class="hl sym">(</span>in<span class="hl sym">-</span>range size<span class="hl sym">)])</span>
    <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>clear? board i<span class="hl sym">) (</span>add1 count<span class="hl sym">)</span> count<span class="hl sym">)))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>find<span class="hl sym">-</span>free<span class="hl sym">-</span>cell board<span class="hl sym">)</span>
  <span class="hl sym">(</span>for<span class="hl sym">/</span><span class="hl kwa">or</span> <span class="hl sym">([</span>p <span class="hl sym">(</span>in<span class="hl sym">-</span>range <span class="hl num">0</span> size<span class="hl sym">)])</span>
    <span class="hl sym">(</span><span class="hl kwa">and</span> <span class="hl sym">(</span>clear? board p<span class="hl sym">)</span> p<span class="hl sym">)))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>flood<span class="hl sym">-</span>fill board p<span class="hl sym">)</span>
  <span class="hl sym">(</span>for<span class="hl sym">/</span>fold <span class="hl sym">([</span>board <span class="hl sym">(</span><span class="hl kwa">set</span> board p<span class="hl sym">)]) ([</span>mover <span class="hl sym">(</span>in<span class="hl sym">-</span><span class="hl kwa">list</span> movers<span class="hl sym">)])</span>
    <span class="hl sym">(</span>let <span class="hl sym">([</span>p <span class="hl sym">(</span>vector<span class="hl sym">-</span>ref mover p<span class="hl sym">)])</span>
      <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">and</span> <span class="hl sym">(</span>valid? p<span class="hl sym">) (</span>clear? board p<span class="hl sym">))</span>
        <span class="hl sym">(</span>flood<span class="hl sym">-</span>fill board p<span class="hl sym">)</span>
        board<span class="hl sym">))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>no<span class="hl sym">-</span>islands? mask<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">([</span>zeros <span class="hl sym">(</span>zero<span class="hl sym">-</span>count mask<span class="hl sym">)])</span>
    <span class="hl sym">(</span><span class="hl kwa">and</span> <span class="hl sym">(</span>zeros . <span class="hl sym">&gt;=</span> . <span class="hl num">5</span><span class="hl sym">)</span>
         <span class="hl sym">(</span>let loop <span class="hl sym">([</span>mask mask<span class="hl sym">] [</span>zeros zeros<span class="hl sym">])</span>
           <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(=</span> mask #x3FFFFFFFFFFFF<span class="hl sym">)</span>
             #t
             <span class="hl sym">(</span>let<span class="hl sym">* ([</span>p <span class="hl sym">(</span>find<span class="hl sym">-</span>free<span class="hl sym">-</span>cell mask<span class="hl sym">)]</span>
                    <span class="hl sym">[</span>mask <span class="hl sym">(</span>flood<span class="hl sym">-</span>fill mask p<span class="hl sym">)]</span>
                    <span class="hl sym">[</span>new<span class="hl sym">-</span>zeros <span class="hl sym">(</span>zero<span class="hl sym">-</span>count mask<span class="hl sym">)])</span>
               <span class="hl sym">(</span><span class="hl kwa">and</span> <span class="hl sym">((-</span> zeros new<span class="hl sym">-</span>zeros<span class="hl sym">)</span> . <span class="hl sym">&gt;=</span> . <span class="hl num">5</span><span class="hl sym">)</span>
                    <span class="hl sym">(</span>loop mask new<span class="hl sym">-</span>zeros<span class="hl sym">))))))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>get<span class="hl sym">-</span>bitmask p piece<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">([</span>mask <span class="hl sym">(</span>arithmetic<span class="hl sym">-</span>shift <span class="hl num">1</span> p<span class="hl sym">)])</span>
    <span class="hl sym">(</span>let loop <span class="hl sym">([</span>p p<span class="hl sym">] [</span>cells piece<span class="hl sym">] [</span>mask mask<span class="hl sym">])</span>
      <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">null</span>? cells<span class="hl sym">)</span>
        mask
        <span class="hl sym">(</span>let <span class="hl sym">([</span>p <span class="hl sym">(</span>vector<span class="hl sym">-</span>ref <span class="hl sym">(</span><span class="hl kwa">car</span> cells<span class="hl sym">)</span> p<span class="hl sym">)])</span>
          <span class="hl sym">(</span><span class="hl kwa">and</span> <span class="hl sym">(</span>valid? p<span class="hl sym">) (</span>loop p <span class="hl sym">(</span><span class="hl kwa">cdr</span> cells<span class="hl sym">) (</span><span class="hl kwa">set</span> mask p<span class="hl sym">))))))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>all<span class="hl sym">-</span>bitmasks piece color<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">([</span>pieces
         <span class="hl sym">(</span>let<span class="hl sym">-</span>values <span class="hl sym">([(</span>accum piece<span class="hl sym">)</span>
                       <span class="hl sym">(</span>for<span class="hl sym">/</span>fold <span class="hl sym">([</span>accum <span class="hl kwa">null</span><span class="hl sym">] [</span>piece piece<span class="hl sym">])</span>
                                 <span class="hl sym">([</span>orientations <span class="hl sym">(</span>in<span class="hl sym">-</span>range <span class="hl num">2</span><span class="hl sym">)])</span>
                         <span class="hl sym">(</span>let<span class="hl sym">-</span>values <span class="hl sym">([(</span>accum piece<span class="hl sym">)</span>
                                       <span class="hl sym">(</span>for<span class="hl sym">/</span>fold <span class="hl sym">([</span>accum accum<span class="hl sym">] [</span>piece piece<span class="hl sym">])</span>
                                                 <span class="hl sym">([</span>orientations <span class="hl sym">(</span>in<span class="hl sym">-</span>range <span class="hl sym">(-</span> <span class="hl num">6</span> <span class="hl sym">(*</span> <span class="hl num">3</span> <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(=</span> color <span class="hl num">4</span><span class="hl sym">)</span> <span class="hl num">1 0</span><span class="hl sym">))))])</span>
                                         <span class="hl sym">(</span>values <span class="hl sym">(</span><span class="hl kwa">cons</span> piece accum<span class="hl sym">)</span>
                                                 <span class="hl sym">(</span>map rotate piece<span class="hl sym">)))])</span>
                           <span class="hl sym">(</span>values accum <span class="hl sym">(</span>map flip piece<span class="hl sym">))))])</span>
           accum<span class="hl sym">)])</span>
    <span class="hl sym">(</span><span class="hl kwa">reverse</span>
     <span class="hl sym">(</span>for<span class="hl sym">*/</span>fold <span class="hl sym">([</span>accum <span class="hl kwa">null</span><span class="hl sym">])</span>
                <span class="hl sym">([</span>piece <span class="hl sym">(</span>in<span class="hl sym">-</span><span class="hl kwa">list</span> pieces<span class="hl sym">)]</span>
                 <span class="hl sym">[</span>p <span class="hl sym">(</span>in<span class="hl sym">-</span>range <span class="hl num">0</span> size<span class="hl sym">)])</span>
       <span class="hl sym">(</span>let <span class="hl sym">([</span>mask <span class="hl sym">(</span>get<span class="hl sym">-</span>bitmask p piece<span class="hl sym">)])</span>
         <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">and</span> mask <span class="hl sym">(</span>no<span class="hl sym">-</span>islands? mask<span class="hl sym">)) (</span><span class="hl kwa">cons</span> mask accum<span class="hl sym">)</span> accum<span class="hl sym">))))))</span>

<span class="hl sym">(</span>define generate<span class="hl sym">-</span>bitmasks<span class="hl sym">-</span>pieces
  <span class="hl sym">(</span><span class="hl kwa">list</span> <span class="hl sym">(</span><span class="hl kwa">list</span> E  E  E  SE<span class="hl sym">)</span>
        <span class="hl sym">(</span><span class="hl kwa">list</span> SE SW W  SW<span class="hl sym">)</span>
        <span class="hl sym">(</span><span class="hl kwa">list</span> W  W  SW SE<span class="hl sym">)</span>
        <span class="hl sym">(</span><span class="hl kwa">list</span> E  E  SW SE<span class="hl sym">)</span>
        <span class="hl sym">(</span><span class="hl kwa">list</span> NW W  NW SE SW<span class="hl sym">)</span>
        <span class="hl sym">(</span><span class="hl kwa">list</span> E  E  NE W<span class="hl sym">)</span>
        <span class="hl sym">(</span><span class="hl kwa">list</span> NW NE NE W<span class="hl sym">)</span>
        <span class="hl sym">(</span><span class="hl kwa">list</span> NE SE E  NE<span class="hl sym">)</span>
        <span class="hl sym">(</span><span class="hl kwa">list</span> SE SE E  SE<span class="hl sym">)</span>
        <span class="hl sym">(</span><span class="hl kwa">list</span> E  NW NW NW<span class="hl sym">)))</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>generate<span class="hl sym">-</span>bitmasks<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">([</span>masks<span class="hl sym">-</span>at<span class="hl sym">-</span>cell
         <span class="hl sym">(</span><span class="hl kwa">list</span><span class="hl sym">-&gt;</span>vector
          <span class="hl sym">(</span>for<span class="hl sym">/</span><span class="hl kwa">list</span> <span class="hl sym">([</span>i <span class="hl sym">(</span>in<span class="hl sym">-</span>range size<span class="hl sym">)])</span>
            <span class="hl sym">(</span><span class="hl kwa">list</span><span class="hl sym">-&gt;</span>vector <span class="hl sym">(</span>for<span class="hl sym">/</span><span class="hl kwa">list</span> <span class="hl sym">([</span>j <span class="hl sym">(</span>in<span class="hl sym">-</span>range <span class="hl num">10</span><span class="hl sym">)])</span> <span class="hl kwa">null</span><span class="hl sym">))))])</span>
    <span class="hl sym">(</span>for <span class="hl sym">([</span>piece <span class="hl sym">(</span>in<span class="hl sym">-</span><span class="hl kwa">list</span> generate<span class="hl sym">-</span>bitmasks<span class="hl sym">-</span>pieces<span class="hl sym">)]</span>
          <span class="hl sym">[</span>color <span class="hl sym">(</span>in<span class="hl sym">-</span>naturals<span class="hl sym">)])</span>
      <span class="hl sym">(</span>let loop <span class="hl sym">([</span>masks <span class="hl sym">(</span>sort <span class="hl sym">(</span>all<span class="hl sym">-</span>bitmasks piece color<span class="hl sym">) &gt;)]</span>
                 <span class="hl sym">[</span>cell<span class="hl sym">-</span>bit <span class="hl sym">(</span>sub1 size<span class="hl sym">)]</span>
                 <span class="hl sym">[</span>cell<span class="hl sym">-</span>counter <span class="hl sym">(</span>sub1 size<span class="hl sym">)])</span>
        <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">null</span>? masks<span class="hl sym">)</span>
          masks<span class="hl sym">-</span>at<span class="hl sym">-</span>cell
          <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>bitwise<span class="hl sym">-</span>bit<span class="hl sym">-</span><span class="hl kwa">set</span>? <span class="hl sym">(</span><span class="hl kwa">car</span> masks<span class="hl sym">)</span> cell<span class="hl sym">-</span>bit<span class="hl sym">)</span>
            <span class="hl sym">(</span>let <span class="hl sym">([</span>vec <span class="hl sym">(</span>vector<span class="hl sym">-</span>ref masks<span class="hl sym">-</span>at<span class="hl sym">-</span>cell cell<span class="hl sym">-</span>counter<span class="hl sym">)])</span>
              <span class="hl sym">(</span>vector<span class="hl sym">-</span><span class="hl kwa">set</span><span class="hl sym">!</span> vec color <span class="hl sym">(</span><span class="hl kwa">cons</span> <span class="hl sym">(</span><span class="hl kwa">car</span> masks<span class="hl sym">) (</span>vector<span class="hl sym">-</span>ref vec color<span class="hl sym">)))</span>
              <span class="hl sym">(</span>loop <span class="hl sym">(</span><span class="hl kwa">cdr</span> masks<span class="hl sym">)</span> cell<span class="hl sym">-</span>bit cell<span class="hl sym">-</span>counter<span class="hl sym">))</span>
            <span class="hl sym">(</span>loop masks <span class="hl sym">(</span>sub1 cell<span class="hl sym">-</span>bit<span class="hl sym">) (</span>sub1 cell<span class="hl sym">-</span>counter<span class="hl sym">))))))</span>
    <span class="hl sym">(</span>for <span class="hl sym">([</span>v <span class="hl sym">(</span>in<span class="hl sym">-</span>vector masks<span class="hl sym">-</span>at<span class="hl sym">-</span>cell<span class="hl sym">)])</span>
      <span class="hl sym">(</span>for <span class="hl sym">([</span>j <span class="hl sym">(</span>in<span class="hl sym">-</span>naturals<span class="hl sym">)]</span>
            <span class="hl sym">[</span>val <span class="hl sym">(</span>in<span class="hl sym">-</span>vector v<span class="hl sym">)])</span>
        <span class="hl sym">(</span>vector<span class="hl sym">-</span><span class="hl kwa">set</span><span class="hl sym">!</span> v j <span class="hl sym">(</span><span class="hl kwa">reverse</span> val<span class="hl sym">))))</span>
    masks<span class="hl sym">-</span>at<span class="hl sym">-</span>cell<span class="hl sym">))</span>

<span class="hl sym">(</span>define masks<span class="hl sym">-</span>at<span class="hl sym">-</span>cell <span class="hl sym">(</span>generate<span class="hl sym">-</span>bitmasks<span class="hl sym">))</span>

<span class="hl sym">(</span>define masks <span class="hl sym">(</span>make<span class="hl sym">-</span>vector <span class="hl num">10 0</span><span class="hl sym">))</span>
<span class="hl sym">(</span>define to<span class="hl sym">-</span>go <span class="hl num">0</span><span class="hl sym">)</span>
<span class="hl sym">(</span>define solutions <span class="hl sym">(</span>mcons #f #f<span class="hl sym">))</span> <span class="hl slc">; keeps (min max) solutions</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>solve<span class="hl sym">-</span>cell<span class="hl sym">!</span> cell board<span class="hl sym">)</span>
  <span class="hl sym">(</span>when <span class="hl sym">(</span><span class="hl kwa">and</span> <span class="hl sym">(</span>positive? to<span class="hl sym">-</span>go<span class="hl sym">) (</span><span class="hl kwa">not</span> <span class="hl sym">(</span>negative? cell<span class="hl sym">)))</span>
    <span class="hl slc">;; Need solutions and not off board</span>
    <span class="hl sym">(</span><span class="hl kwa">cond</span> <span class="hl sym">[(=</span> board #x3FFFFFFFFFFFF<span class="hl sym">)</span>
           <span class="hl slc">;; Solved</span>
           <span class="hl sym">(</span>add<span class="hl sym">-</span>solutions<span class="hl sym">!)]</span>
          <span class="hl sym">[(</span><span class="hl kwa">not</span> <span class="hl sym">(</span>clear? board cell<span class="hl sym">))</span>
           <span class="hl slc">;; Cell full, so try next</span>
           <span class="hl sym">(</span>solve<span class="hl sym">-</span>cell<span class="hl sym">! (</span>sub1 cell<span class="hl sym">)</span> board<span class="hl sym">)]</span>
          <span class="hl sym">[</span>else
           <span class="hl slc">;; Recur</span>
           <span class="hl sym">(</span>for<span class="hl sym">* ([</span>color <span class="hl sym">(</span>in<span class="hl sym">-</span>range <span class="hl num">10</span><span class="hl sym">)]</span>
                  #<span class="hl sym">:</span>when <span class="hl sym">(</span>zero? <span class="hl sym">(</span>vector<span class="hl sym">-</span>ref masks color<span class="hl sym">))</span>
                  <span class="hl sym">[</span>mask <span class="hl sym">(</span>in<span class="hl sym">-</span><span class="hl kwa">list</span> <span class="hl sym">(</span>vector<span class="hl sym">-</span>ref <span class="hl sym">(</span>vector<span class="hl sym">-</span>ref masks<span class="hl sym">-</span>at<span class="hl sym">-</span>cell cell<span class="hl sym">)</span>
                                             color<span class="hl sym">))]</span>
                  #<span class="hl sym">:</span>when <span class="hl sym">(</span>zero? <span class="hl sym">(</span>bitwise<span class="hl sym">-</span><span class="hl kwa">and</span> mask board<span class="hl sym">)))</span>
             <span class="hl sym">(</span>vector<span class="hl sym">-</span><span class="hl kwa">set</span><span class="hl sym">!</span> masks color mask<span class="hl sym">)</span>
             <span class="hl sym">(</span>solve<span class="hl sym">-</span>cell<span class="hl sym">! (</span>sub1 cell<span class="hl sym">) (</span>bitwise<span class="hl sym">-</span>ior board mask<span class="hl sym">))</span>
             <span class="hl sym">(</span>vector<span class="hl sym">-</span><span class="hl kwa">set</span><span class="hl sym">!</span> masks color <span class="hl num">0</span><span class="hl sym">))])))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>add<span class="hl sym">-</span>solutions<span class="hl sym">!)</span>
  <span class="hl sym">(</span>define <span class="hl sym">(</span>add<span class="hl sym">!</span> solution<span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl kwa">cond</span> <span class="hl sym">[(</span><span class="hl kwa">not</span> <span class="hl sym">(</span>mcar solutions<span class="hl sym">))</span>
           <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">-</span>mcar<span class="hl sym">!</span> solutions solution<span class="hl sym">)</span>
           <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">-</span>mcdr<span class="hl sym">!</span> solutions solution<span class="hl sym">)]</span>
          <span class="hl sym">[(</span>bytes<span class="hl sym">&lt;</span>? solution <span class="hl sym">(</span>mcar solutions<span class="hl sym">))</span>
           <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">-</span>mcar<span class="hl sym">!</span> solutions solution<span class="hl sym">)]</span>
          <span class="hl sym">[(</span>bytes<span class="hl sym">&gt;</span>? solution <span class="hl sym">(</span>mcdr solutions<span class="hl sym">))</span>
           <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">-</span>mcdr<span class="hl sym">!</span> solutions solution<span class="hl sym">)]))</span>
  <span class="hl sym">(</span>let<span class="hl sym">* ([</span>s <span class="hl sym">(</span><span class="hl kwa">list</span><span class="hl sym">-&gt;</span>bytes
             <span class="hl sym">(</span>for<span class="hl sym">/</span><span class="hl kwa">list</span> <span class="hl sym">([</span>pos <span class="hl sym">(</span>in<span class="hl sym">-</span>range size<span class="hl sym">)])</span>
               <span class="hl sym">(</span>for<span class="hl sym">/</span><span class="hl kwa">or</span> <span class="hl sym">([</span>color <span class="hl sym">(</span>in<span class="hl sym">-</span>range <span class="hl num">10</span><span class="hl sym">)])</span>
                       <span class="hl sym">(</span><span class="hl kwa">and</span> <span class="hl sym">(</span><span class="hl kwa">not</span> <span class="hl sym">(</span>clear? <span class="hl sym">(</span>vector<span class="hl sym">-</span>ref masks color<span class="hl sym">)</span> pos<span class="hl sym">))</span>
                            <span class="hl sym">(+</span> color <span class="hl sym">(</span>char<span class="hl sym">-&gt;</span>integer #\<span class="hl num">0</span><span class="hl sym">))))))]</span>
         <span class="hl sym">[</span>ns <span class="hl sym">(</span>make<span class="hl sym">-</span>bytes size<span class="hl sym">)])</span>
    <span class="hl slc">;; Inverse</span>
    <span class="hl sym">(</span>for<span class="hl sym">* ([</span>y <span class="hl sym">(</span>in<span class="hl sym">-</span>range height<span class="hl sym">)]</span>
           <span class="hl sym">[</span>x <span class="hl sym">(</span>in<span class="hl sym">-</span>range width<span class="hl sym">)])</span>
      <span class="hl sym">(</span>bytes<span class="hl sym">-</span><span class="hl kwa">set</span><span class="hl sym">!</span> ns <span class="hl sym">(+</span> x <span class="hl sym">(*</span> y width<span class="hl sym">))</span>
                  <span class="hl sym">(</span>bytes<span class="hl sym">-</span>ref s <span class="hl sym">(+ (-</span> width <span class="hl sym">(+</span> x <span class="hl num">1</span><span class="hl sym">))</span>
                                  <span class="hl sym">(*</span> width <span class="hl sym">(-</span> height <span class="hl sym">(+</span> y <span class="hl num">1</span><span class="hl sym">)))))))</span>
    <span class="hl slc">;; Keep first and last only</span>
    <span class="hl sym">(</span>add<span class="hl sym">!</span> s<span class="hl sym">)</span>
    <span class="hl sym">(</span>add<span class="hl sym">!</span> ns<span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> to<span class="hl sym">-</span>go <span class="hl sym">(-</span> to<span class="hl sym">-</span>go <span class="hl num">2</span><span class="hl sym">))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span><span class="hl kwa">print</span><span class="hl sym">-</span>solution solution<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">([</span>solution <span class="hl sym">(</span>bytes<span class="hl sym">-&gt;</span>string<span class="hl sym">/</span>utf<span class="hl sym">-</span><span class="hl num">8</span> solution<span class="hl sym">)])</span>
    <span class="hl sym">(</span>for <span class="hl sym">([</span>y <span class="hl sym">(</span>in<span class="hl sym">-</span>range height<span class="hl sym">)])</span>
      <span class="hl sym">(</span>when <span class="hl sym">(</span>odd? y<span class="hl sym">) (</span>display <span class="hl str">&quot; &quot;</span><span class="hl sym">))</span>
      <span class="hl sym">(</span>for <span class="hl sym">([</span>x <span class="hl sym">(</span>in<span class="hl sym">-</span>range width<span class="hl sym">)])</span>
        <span class="hl sym">(</span>printf <span class="hl str">&quot;~a &quot;</span> <span class="hl sym">(</span>string<span class="hl sym">-</span>ref solution <span class="hl sym">(+</span> x <span class="hl sym">(*</span> y width<span class="hl sym">)))))</span>
      <span class="hl sym">(</span>printf <span class="hl str">&quot;</span><span class="hl esc">\</span><span class="hl str">n&quot;</span><span class="hl sym">))</span>
    <span class="hl sym">(</span>newline<span class="hl sym">)))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>solve<span class="hl sym">!</span> n<span class="hl sym">)</span>
  <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> to<span class="hl sym">-</span>go n<span class="hl sym">)</span>
  <span class="hl sym">(</span>solve<span class="hl sym">-</span>cell<span class="hl sym">! (</span>sub1 size<span class="hl sym">)</span> <span class="hl num">0</span><span class="hl sym">))</span>

<span class="hl sym">(</span><span class="hl kwa">command</span><span class="hl sym">-</span><span class="hl kwa">line</span> #<span class="hl sym">:</span>args <span class="hl sym">(</span>n<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">([</span>n <span class="hl sym">(</span>string<span class="hl sym">-&gt;</span>number n<span class="hl sym">)])</span>
    <span class="hl sym">(</span>solve<span class="hl sym">!</span> n<span class="hl sym">)</span>
    <span class="hl sym">(</span>printf <span class="hl str">&quot;~a solutions found</span><span class="hl esc">\</span><span class="hl str">n</span><span class="hl esc">\</span><span class="hl str">n&quot;</span> <span class="hl sym">(-</span> n to<span class="hl sym">-</span>go<span class="hl sym">))</span>
    <span class="hl sym">(</span><span class="hl kwa">print</span><span class="hl sym">-</span>solution <span class="hl sym">(</span>mcar solutions<span class="hl sym">))</span>
    <span class="hl sym">(</span><span class="hl kwa">print</span><span class="hl sym">-</span>solution <span class="hl sym">(</span>mcdr solutions<span class="hl sym">))))</span>
