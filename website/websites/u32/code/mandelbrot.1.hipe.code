<span class="hl slc">%% The Computer Language Benchmarks Game</span>
<span class="hl slc">%% http://shootout.alioth.debian.org/</span>
<span class="hl slc">%% Contributed by Fredrik Svahn based on Per Gustafsson's mandelbrot program</span>

<span class="hl sym">-</span><span class="hl kwa">module</span><span class="hl sym">(</span>mandelbrot<span class="hl sym">).</span>
<span class="hl sym">-</span><span class="hl kwa">export</span><span class="hl sym">([</span>main<span class="hl sym">/</span><span class="hl num">1</span><span class="hl sym">]).</span>
<span class="hl sym">-</span><span class="hl kwa">define</span><span class="hl sym">(</span>LIM_SQR<span class="hl sym">,</span> <span class="hl num">4.0</span><span class="hl sym">).</span>
<span class="hl sym">-</span><span class="hl kwa">define</span><span class="hl sym">(</span>ITER<span class="hl sym">,</span> <span class="hl num">50</span><span class="hl sym">).</span>
<span class="hl sym">-</span><span class="hl kwa">define</span><span class="hl sym">(</span>SR<span class="hl sym">, -</span><span class="hl num">1.5</span><span class="hl sym">).</span>
<span class="hl sym">-</span><span class="hl kwa">define</span><span class="hl sym">(</span>SI<span class="hl sym">, -</span><span class="hl num">1</span><span class="hl sym">).</span>

<span class="hl kwd">main</span><span class="hl sym">([</span>Arg<span class="hl sym">]) -&gt;</span>
    N <span class="hl sym">=</span> <span class="hl kwb">list_to_integer</span><span class="hl sym">(</span>Arg<span class="hl sym">),</span>
    io<span class="hl sym">:</span><span class="hl kwd">put_chars</span><span class="hl sym">([</span><span class="hl str">&quot;P4</span><span class="hl esc">\</span><span class="hl str">n&quot;</span><span class="hl sym">,</span> Arg<span class="hl sym">,</span> <span class="hl str">&quot; &quot;</span><span class="hl sym">,</span> Arg<span class="hl sym">,</span> <span class="hl str">&quot;</span><span class="hl esc">\</span><span class="hl str">n&quot;</span><span class="hl sym">]),</span>

    <span class="hl slc">%% Spawn one process per row</span>
    Row <span class="hl sym">=</span> <span class="hl kwa">fun</span><span class="hl sym">(</span>Y<span class="hl sym">)-&gt;</span> <span class="hl kwb">spawn</span><span class="hl sym">(</span><span class="hl kwa">fun</span><span class="hl sym">()-&gt;</span> <span class="hl kwd">row</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">, ?</span>SI<span class="hl sym">+</span>Y<span class="hl sym">*</span><span class="hl num">2</span><span class="hl sym">/</span>N<span class="hl sym">,</span> N<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">, [],</span> <span class="hl num">7</span><span class="hl sym">)</span> <span class="hl kwa">end</span><span class="hl sym">)</span> <span class="hl kwa">end</span><span class="hl sym">,</span>
    Pids <span class="hl sym">=</span> lists<span class="hl sym">:</span><span class="hl kwd">map</span><span class="hl sym">(</span>Row<span class="hl sym">,</span> lists<span class="hl sym">:</span><span class="hl kwd">seq</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span>N<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)),</span>

    <span class="hl slc">%Pass token around to make sure printouts are in the right order</span>
    <span class="hl kwb">hd</span><span class="hl sym">(</span>Pids<span class="hl sym">) !</span> <span class="hl kwb">tl</span><span class="hl sym">(</span>Pids<span class="hl sym">) ++ [</span> <span class="hl kwb">self</span><span class="hl sym">() ],</span>
    <span class="hl kwa">receive</span> _Token <span class="hl sym">-&gt;</span> <span class="hl kwb">halt</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">end</span><span class="hl sym">.</span>

<span class="hl slc">%Iterate over a row, collect bits, bytes and finally print the row</span>
<span class="hl kwd">row</span><span class="hl sym">(</span>X<span class="hl sym">,</span> _<span class="hl sym">,</span> N<span class="hl sym">,</span> Bits<span class="hl sym">,</span> Bytes<span class="hl sym">,</span> BitC<span class="hl sym">)</span> <span class="hl kwa">when</span> X <span class="hl sym">=:=</span> N<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl sym">-&gt;</span>
    <span class="hl kwa">receive</span> Pids <span class="hl sym">-&gt;</span>
	    <span class="hl kwd">put_chars</span><span class="hl sym">(</span>Bits<span class="hl sym">,</span> Bytes<span class="hl sym">,</span> BitC<span class="hl sym">),</span>
	    <span class="hl kwb">hd</span><span class="hl sym">(</span>Pids<span class="hl sym">) !</span> <span class="hl kwb">tl</span><span class="hl sym">(</span>Pids<span class="hl sym">)</span>
    <span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwd">row</span><span class="hl sym">(</span>X<span class="hl sym">,</span> Y2<span class="hl sym">,</span> N<span class="hl sym">,</span> Bits<span class="hl sym">,</span> Bytes<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">) -&gt;</span>
    <span class="hl kwd">row</span><span class="hl sym">(</span>X<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> Y2<span class="hl sym">,</span> N<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">, [</span>Bits <span class="hl kwa">bsl</span> <span class="hl num">1</span> <span class="hl sym">+</span> <span class="hl kwd">m</span><span class="hl sym">(?</span>ITER<span class="hl sym">, ?</span>SR<span class="hl sym">+</span>X<span class="hl sym">*</span><span class="hl num">2</span><span class="hl sym">/</span>N<span class="hl sym">,</span> Y2<span class="hl sym">) |</span> Bytes<span class="hl sym">],</span> <span class="hl num">7</span><span class="hl sym">);</span>

<span class="hl kwd">row</span><span class="hl sym">(</span>X<span class="hl sym">,</span> Y2<span class="hl sym">,</span> N<span class="hl sym">,</span> Bits<span class="hl sym">,</span> Bytes<span class="hl sym">,</span> BitC<span class="hl sym">) -&gt;</span>
    <span class="hl kwd">row</span><span class="hl sym">(</span>X<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> Y2<span class="hl sym">,</span> N<span class="hl sym">,</span> Bits <span class="hl kwa">bsl</span> <span class="hl num">1</span> <span class="hl sym">+</span> <span class="hl kwd">m</span><span class="hl sym">(?</span>ITER<span class="hl sym">, ?</span>SR<span class="hl sym">+</span>X<span class="hl sym">*</span><span class="hl num">2</span><span class="hl sym">/</span>N<span class="hl sym">,</span> Y2<span class="hl sym">),</span> Bytes<span class="hl sym">,</span> BitC<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">).</span>

<span class="hl slc">%Mandelbrot algorithm</span>
<span class="hl kwd">m</span><span class="hl sym">(</span>Iter<span class="hl sym">,</span> CR<span class="hl sym">,</span>CI<span class="hl sym">) -&gt;</span> <span class="hl kwd">m</span><span class="hl sym">(</span>Iter <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> CR<span class="hl sym">,</span> CI<span class="hl sym">,</span> CR<span class="hl sym">,</span> CI<span class="hl sym">).</span>

<span class="hl kwd">m</span><span class="hl sym">(</span>Iter<span class="hl sym">,</span> R<span class="hl sym">,</span> I<span class="hl sym">,</span> CR<span class="hl sym">,</span> CI<span class="hl sym">) -&gt;</span>
    <span class="hl kwa">case</span> R<span class="hl sym">*</span>R<span class="hl sym">+</span>I<span class="hl sym">*</span>I <span class="hl sym">&gt; ?</span>LIM_SQR <span class="hl kwa">of</span>
	false <span class="hl kwa">when</span> Iter <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl sym">-&gt;</span> <span class="hl kwd">m</span><span class="hl sym">(</span>Iter<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> R<span class="hl sym">*</span>R<span class="hl sym">-</span>I<span class="hl sym">*</span>I<span class="hl sym">+</span>CR<span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">*</span>R<span class="hl sym">*</span>I<span class="hl sym">+</span>CI<span class="hl sym">,</span> CR<span class="hl sym">,</span> CI<span class="hl sym">);</span>
	false <span class="hl sym">-&gt;</span> <span class="hl num">1</span><span class="hl sym">;</span>
	true <span class="hl sym">-&gt;</span> <span class="hl num">0</span>
    <span class="hl kwa">end</span><span class="hl sym">.</span>

<span class="hl kwd">put_chars</span><span class="hl sym">(</span>_<span class="hl sym">,</span> Bytes<span class="hl sym">,</span> <span class="hl num">7</span><span class="hl sym">)-&gt;</span> io<span class="hl sym">:</span><span class="hl kwd">put_chars</span><span class="hl sym">(</span>lists<span class="hl sym">:</span><span class="hl kwd">reverse</span><span class="hl sym">(</span>Bytes<span class="hl sym">));</span>
<span class="hl kwd">put_chars</span><span class="hl sym">(</span>Bits<span class="hl sym">,</span> Bytes<span class="hl sym">,</span> C<span class="hl sym">) -&gt;</span> io<span class="hl sym">:</span><span class="hl kwd">put_chars</span><span class="hl sym">(</span>lists<span class="hl sym">:</span><span class="hl kwd">reverse</span><span class="hl sym">([</span>Bits <span class="hl kwa">bsl</span> <span class="hl sym">(</span>C<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) |</span> Bytes<span class="hl sym">])).</span>
