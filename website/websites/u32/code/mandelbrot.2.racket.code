#lang racket<span class="hl sym">/</span>base

<span class="hl slc">;;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;</span>
<span class="hl slc">;;; Derived from the Chicken Scheme variant by Anthony Borla</span>
<span class="hl slc">;;; contributed by Matthew Flatt</span>
<span class="hl slc">;;</span>
<span class="hl slc">;; This version uses unsafe operations</span>

<span class="hl sym">(</span>require racket<span class="hl sym">/</span>cmdline
	 racket<span class="hl sym">/</span>require <span class="hl sym">(</span>for<span class="hl sym">-</span>syntax racket<span class="hl sym">/</span>base<span class="hl sym">)</span>
	 <span class="hl sym">(</span>filtered<span class="hl sym">-</span>in
	  <span class="hl sym">(</span>lambda <span class="hl sym">(</span>name<span class="hl sym">) (</span>regexp<span class="hl sym">-</span>replace #rx<span class="hl str">&quot;unsafe-&quot;</span> name <span class="hl str">&quot;&quot;</span><span class="hl sym">))</span>
	  racket<span class="hl sym">/</span>unsafe<span class="hl sym">/</span>ops<span class="hl sym">))</span>

<span class="hl sym">(</span>define <span class="hl sym">+</span>limit<span class="hl sym">-</span>sqr<span class="hl sym">+</span> <span class="hl num">4.0</span><span class="hl sym">)</span>

<span class="hl sym">(</span>define <span class="hl sym">+</span>iterations<span class="hl sym">+</span> <span class="hl num">50</span><span class="hl sym">)</span>

<span class="hl slc">;; -------------------------------</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>mandelbrot x y n ci<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>cr <span class="hl sym">(</span>fl<span class="hl sym">- (</span>fl<span class="hl sym">/ (</span>fl<span class="hl sym">*</span> <span class="hl num">2.0</span> <span class="hl sym">(</span>fx<span class="hl sym">-&gt;</span>fl x<span class="hl sym">)) (</span>fx<span class="hl sym">-&gt;</span>fl n<span class="hl sym">))</span> <span class="hl num">1.5</span><span class="hl sym">)))</span>
    <span class="hl sym">(</span>let loop <span class="hl sym">((</span>i <span class="hl num">0</span><span class="hl sym">) (</span>zr <span class="hl num">0.0</span><span class="hl sym">) (</span>zi <span class="hl num">0.0</span><span class="hl sym">))</span>
      <span class="hl sym">(</span>if <span class="hl sym">(</span>fx<span class="hl sym">&gt;</span> i <span class="hl sym">+</span>iterations<span class="hl sym">+)</span>
          <span class="hl num">1</span>
          <span class="hl sym">(</span>cond
           <span class="hl sym">((</span>fl<span class="hl sym">&gt; (</span>fl<span class="hl sym">+ (</span>fl<span class="hl sym">*</span> zr zr<span class="hl sym">) (</span>fl<span class="hl sym">*</span> zi zi<span class="hl sym">)) +</span>limit<span class="hl sym">-</span>sqr<span class="hl sym">+)</span> <span class="hl num">0</span><span class="hl sym">)</span>
           <span class="hl sym">(</span>else <span class="hl sym">(</span>loop <span class="hl sym">(</span>fx<span class="hl sym">+</span> <span class="hl num">1</span> i<span class="hl sym">)</span>
                       <span class="hl sym">(</span>fl<span class="hl sym">+ (</span>fl<span class="hl sym">- (</span>fl<span class="hl sym">*</span> zr zr<span class="hl sym">) (</span>fl<span class="hl sym">*</span> zi zi<span class="hl sym">))</span> cr<span class="hl sym">)</span>
                       <span class="hl sym">(</span>fl<span class="hl sym">+ (</span>fl<span class="hl sym">*</span> <span class="hl num">2.0</span> <span class="hl sym">(</span>fl<span class="hl sym">*</span> zr zi<span class="hl sym">))</span> ci<span class="hl sym">))))))))</span>

<span class="hl slc">;; -------------------------------</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>main n<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>out <span class="hl sym">(</span>current<span class="hl sym">-</span>output<span class="hl sym">-</span>port<span class="hl sym">)))</span>

    <span class="hl sym">(</span>fprintf out <span class="hl str">&quot;P4</span><span class="hl esc">\</span><span class="hl str">n~a ~a</span><span class="hl esc">\</span><span class="hl str">n&quot;</span> n n<span class="hl sym">)</span>

    <span class="hl sym">(</span>let loop<span class="hl sym">-</span>y <span class="hl sym">((</span>y <span class="hl num">0</span><span class="hl sym">))</span>

      <span class="hl sym">(</span>when <span class="hl sym">(</span>fx<span class="hl sym">&lt;</span> y n<span class="hl sym">)</span>

        <span class="hl sym">(</span>let <span class="hl sym">([</span>ci <span class="hl sym">(</span>fl<span class="hl sym">- (</span>fl<span class="hl sym">/ (</span>fl<span class="hl sym">*</span> <span class="hl num">2.0</span> <span class="hl sym">(</span>fx<span class="hl sym">-&gt;</span>fl y<span class="hl sym">)) (</span>fx<span class="hl sym">-&gt;</span>fl n<span class="hl sym">))</span> <span class="hl num">1.0</span><span class="hl sym">)])</span>

          <span class="hl sym">(</span>let loop<span class="hl sym">-</span>x <span class="hl sym">((</span>x <span class="hl num">0</span><span class="hl sym">) (</span>bitnum <span class="hl num">0</span><span class="hl sym">) (</span>byteacc <span class="hl num">0</span><span class="hl sym">))</span>

            <span class="hl sym">(</span>if <span class="hl sym">(</span>fx<span class="hl sym">&lt;</span> x n<span class="hl sym">)</span>
                <span class="hl sym">(</span>let <span class="hl sym">([</span>bitnum <span class="hl sym">(</span>fx<span class="hl sym">+</span> <span class="hl num">1</span> bitnum<span class="hl sym">)]</span>
                      <span class="hl sym">[</span>byteacc <span class="hl sym">(</span>fx<span class="hl sym">+ (</span>fxlshift byteacc <span class="hl num">1</span><span class="hl sym">)</span>
                                           <span class="hl sym">(</span>mandelbrot x y n ci<span class="hl sym">))])</span>

                  <span class="hl sym">(</span>cond
                   <span class="hl sym">((</span>fx<span class="hl sym">=</span> bitnum <span class="hl num">8</span><span class="hl sym">)</span>
                    <span class="hl sym">(</span>write<span class="hl sym">-</span>byte byteacc out<span class="hl sym">)</span>
                    <span class="hl sym">(</span>loop<span class="hl sym">-</span>x <span class="hl sym">(</span>fx<span class="hl sym">+</span> <span class="hl num">1</span> x<span class="hl sym">)</span> <span class="hl num">0 0</span><span class="hl sym">))</span>

                   <span class="hl sym">[</span>else <span class="hl sym">(</span>loop<span class="hl sym">-</span>x <span class="hl sym">(</span>fx<span class="hl sym">+</span> <span class="hl num">1</span> x<span class="hl sym">)</span> bitnum byteacc<span class="hl sym">)]))</span>

                <span class="hl sym">(</span>begin
                  <span class="hl sym">(</span>when <span class="hl sym">(</span>positive? bitnum<span class="hl sym">)</span>
                    <span class="hl sym">(</span>write<span class="hl sym">-</span>byte <span class="hl sym">(</span>arithmetic<span class="hl sym">-</span>shift byteacc
                                                  <span class="hl sym">(-</span> <span class="hl num">8</span> <span class="hl sym">(</span>bitwise<span class="hl sym">-</span>and n #x7<span class="hl sym">)))</span>
                                out<span class="hl sym">))</span>

                  <span class="hl sym">(</span>loop<span class="hl sym">-</span>y <span class="hl sym">(</span>add1 y<span class="hl sym">))))))))))</span>

<span class="hl slc">;; -------------------------------</span>

<span class="hl sym">(</span>command<span class="hl sym">-</span>line #<span class="hl sym">:</span>args <span class="hl sym">(</span>n<span class="hl sym">)</span>
              <span class="hl sym">(</span>main <span class="hl sym">(</span>string<span class="hl sym">-&gt;</span>number n<span class="hl sym">)))</span>
