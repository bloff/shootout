<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   Contributed by John Nilsson</span>
<span class="hl com">   Major performance improvement by Geoff Reedy</span>
<span class="hl com">*/</span>

<span class="hl kwa">object</span> pidigits <span class="hl sym">{</span>
    <span class="hl kwa">type</span> I <span class="hl sym">=</span> BigInt
    <span class="hl kwa">import</span> BigInt<span class="hl sym">.</span>_
    <span class="hl kwa">val</span> <span class="hl kwc">List</span><span class="hl sym">(</span>_0<span class="hl sym">,</span>_1<span class="hl sym">,</span>_10<span class="hl sym">) =</span> <span class="hl kwc">List</span><span class="hl sym">[</span>I<span class="hl sym">](</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">10</span><span class="hl sym">)</span>

    <span class="hl kwa">class</span> LFT<span class="hl sym">(</span><span class="hl kwa">val</span> q<span class="hl sym">:</span>I<span class="hl sym">,</span> <span class="hl kwa">val</span> r<span class="hl sym">:</span>I<span class="hl sym">,</span> <span class="hl kwa">val</span> t<span class="hl sym">:</span>I<span class="hl sym">) {</span>
        <span class="hl kwa">def</span> compose<span class="hl sym">(</span>o<span class="hl sym">:</span>LFT<span class="hl sym">) =</span> <span class="hl kwa">new</span> LFT<span class="hl sym">(</span>q <span class="hl sym">*</span> o<span class="hl sym">.</span>q<span class="hl sym">, (</span>q <span class="hl sym">*</span> o<span class="hl sym">.</span>r<span class="hl sym">) + (</span>r <span class="hl sym">*</span> o<span class="hl sym">.</span>t<span class="hl sym">),</span> t <span class="hl sym">*</span> o<span class="hl sym">.</span>t<span class="hl sym">)</span>
        <span class="hl kwa">def</span> extractDigit <span class="hl sym">= {</span>
            <span class="hl kwa">val</span> <span class="hl sym">(</span>y<span class="hl sym">,</span>rem<span class="hl sym">) = (</span><span class="hl num">3</span><span class="hl sym">*</span>q <span class="hl sym">+</span> r<span class="hl sym">) /%</span> t
            <span class="hl kwa">if</span><span class="hl sym">((</span>rem <span class="hl sym">+</span> q<span class="hl sym">) &lt;</span> t<span class="hl sym">)</span> Some<span class="hl sym">(</span>y<span class="hl sym">)</span> <span class="hl kwa">else</span> None
        <span class="hl sym">}</span>
        <span class="hl kwa">def</span> next<span class="hl sym">(</span>y<span class="hl sym">:</span>I<span class="hl sym">) =</span> <span class="hl kwa">new</span> LFT<span class="hl sym">(</span>_10<span class="hl sym">*</span>q<span class="hl sym">,</span> _10<span class="hl sym">*(</span>r<span class="hl sym">-(</span>y<span class="hl sym">*</span>t<span class="hl sym">)),</span> t<span class="hl sym">)</span>
        <span class="hl kwa">def</span> reduce <span class="hl sym">= {</span>
            <span class="hl kwa">val</span> d <span class="hl sym">= (</span>q<span class="hl sym">&gt;&gt;</span>q<span class="hl sym">.</span>lowestSetBit<span class="hl sym">).</span>gcd<span class="hl sym">(</span>r<span class="hl sym">).</span>gcd<span class="hl sym">(</span>t<span class="hl sym">)</span>
            <span class="hl kwa">new</span> LFT<span class="hl sym">(</span>q<span class="hl sym">/</span>d<span class="hl sym">,</span>r<span class="hl sym">/</span>d<span class="hl sym">,</span>t<span class="hl sym">/</span>d<span class="hl sym">)</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">def</span> pi_digits <span class="hl sym">= {</span>
        <span class="hl kwa">def</span> _lfts <span class="hl sym">=</span> Stream from <span class="hl num">1</span> map <span class="hl sym">{</span> k <span class="hl sym">=&gt;</span> <span class="hl kwa">new</span> LFT<span class="hl sym">(</span>k<span class="hl sym">,</span> k <span class="hl sym">*</span> <span class="hl num">4</span> <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">,</span> k <span class="hl sym">*</span> <span class="hl num">2</span> <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">) }</span>
        <span class="hl kwa">def</span> _pi_digits<span class="hl sym">(</span>z<span class="hl sym">:</span>LFT<span class="hl sym">,</span> lfts<span class="hl sym">:</span>Stream<span class="hl sym">[</span>LFT<span class="hl sym">],</span>n<span class="hl sym">:</span>Int<span class="hl sym">):</span> Stream<span class="hl sym">[(</span>Int<span class="hl sym">,</span>I<span class="hl sym">)] = {</span>
            <span class="hl kwa">val</span> _z <span class="hl sym">=</span> <span class="hl kwa">if</span><span class="hl sym">(</span>lfts<span class="hl sym">.</span>head<span class="hl sym">.</span>q <span class="hl sym">%</span> <span class="hl num">5000</span> <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span> z reduce <span class="hl kwa">else</span> z
            _z extractDigit match <span class="hl sym">{</span>
                <span class="hl kwa">case</span> Some<span class="hl sym">(</span>y<span class="hl sym">) =&gt;</span> Stream<span class="hl sym">.</span>cons<span class="hl sym">((</span>n<span class="hl sym">,</span>y<span class="hl sym">),</span>_pi_digits<span class="hl sym">(</span>_z next y<span class="hl sym">,</span> lfts<span class="hl sym">,</span>n<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">))</span>
                <span class="hl kwa">case</span> None    <span class="hl sym">=&gt;</span> _pi_digits<span class="hl sym">(</span>_z compose lfts<span class="hl sym">.</span>head<span class="hl sym">,</span> lfts<span class="hl sym">.</span>tail<span class="hl sym">,</span>n<span class="hl sym">)</span>
            <span class="hl sym">}</span>
        <span class="hl sym">}</span>
        _pi_digits<span class="hl sym">(</span><span class="hl kwa">new</span> LFT<span class="hl sym">(</span>_1<span class="hl sym">,</span>_0<span class="hl sym">,</span>_1<span class="hl sym">),</span>_lfts<span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">)</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">def</span> by<span class="hl sym">[</span>T<span class="hl sym">](</span>s<span class="hl sym">:</span> Stream<span class="hl sym">[</span>T<span class="hl sym">],</span> n<span class="hl sym">:</span> Int<span class="hl sym">):</span> Stream<span class="hl sym">[</span>Stream<span class="hl sym">[</span>T<span class="hl sym">]] =</span>
        <span class="hl kwa">if</span><span class="hl sym">(</span>s<span class="hl sym">.</span>isEmpty<span class="hl sym">)</span> Stream<span class="hl sym">.</span>empty
        <span class="hl kwa">else</span> Stream<span class="hl sym">.</span>cons<span class="hl sym">(</span>s take n<span class="hl sym">,</span> by<span class="hl sym">(</span>s drop n<span class="hl sym">,</span> n<span class="hl sym">))</span>

    <span class="hl kwa">def</span> main<span class="hl sym">(</span>args<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">String</span><span class="hl sym">]):</span> Unit <span class="hl sym">=</span>
        <span class="hl kwa">for</span> <span class="hl sym">(</span>d <span class="hl sym">&lt;-</span> by<span class="hl sym">(</span>pi_digits take args<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">).</span>toInt<span class="hl sym">,</span> <span class="hl num">10</span><span class="hl sym">))</span>
            println<span class="hl sym">(</span><span class="hl str">&quot;%-10s</span><span class="hl esc">\t</span><span class="hl str">:%d&quot;</span><span class="hl sym">.</span>format<span class="hl sym">(</span>d<span class="hl sym">.</span>map<span class="hl sym">(</span>_<span class="hl sym">.</span>_2<span class="hl sym">).</span>mkString<span class="hl sym">(</span><span class="hl str">&quot;&quot;</span><span class="hl sym">),</span>d<span class="hl sym">.</span>last<span class="hl sym">.</span>_1<span class="hl sym">))</span>
<span class="hl sym">}</span>
