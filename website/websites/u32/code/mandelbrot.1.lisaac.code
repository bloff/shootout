<span class="hl com">/* The Computer Language Shootout Benchmarks</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Xavier Oswald &amp; Anthony Pajot</span>
<span class="hl com">*/</span>

Section Header

  <span class="hl sym">+</span> name <span class="hl sym">:=</span> MANDELBROT<span class="hl sym">;</span>

Section Inherit

  <span class="hl sym">-</span> parent_object <span class="hl sym">:</span> OBJECT <span class="hl sym">:=</span> OBJECT<span class="hl sym">;</span>

Section Public

  <span class="hl sym">-</span> main <span class="hl sym">&lt;-</span>
  <span class="hl sym">( +</span> w<span class="hl sym">,</span> h<span class="hl sym">,</span> bit_num<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
    <span class="hl sym">+</span> iter<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
    <span class="hl sym">+</span> byte_acc<span class="hl sym">:</span>INTEGER_8<span class="hl sym">;</span>
    <span class="hl sym">+</span> four<span class="hl sym">:</span>REAL_64<span class="hl sym">;</span>
    <span class="hl sym">+</span> delta0<span class="hl sym">,</span>delta1<span class="hl sym">:</span>REAL_64<span class="hl sym">;</span>
    <span class="hl sym">+</span> mod_w<span class="hl sym">,</span>wm1<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
    <span class="hl sym">+</span> cmd<span class="hl sym">:</span>STRING<span class="hl sym">;</span>
    <span class="hl sym">+</span> civ<span class="hl sym">:</span>REAL_64<span class="hl sym">;</span>

    iter <span class="hl sym">:=</span> <span class="hl num">50</span><span class="hl sym">;</span>
    four <span class="hl sym">:=</span> <span class="hl num">4.0</span><span class="hl sym">;</span>

    cmd <span class="hl sym">:=</span> COMMAND_LINE.item <span class="hl num">1</span><span class="hl sym">;</span>

    h <span class="hl sym">:=</span> w <span class="hl sym">:=</span> cmd.to_integer<span class="hl sym">;</span>

    <span class="hl str">&quot;P4\n&quot;</span>.print<span class="hl sym">;</span>
    cmd.print<span class="hl sym">;</span>
    <span class="hl str">' '</span>.print<span class="hl sym">;</span>
    cmd.print<span class="hl sym">;</span>
    <span class="hl str">'\n'</span>.print<span class="hl sym">;</span>

    mod_w <span class="hl sym">:=</span> <span class="hl num">8</span> <span class="hl sym">- (</span>w <span class="hl sym">&amp;</span> <span class="hl num">7</span><span class="hl sym">);</span>
    wm1   <span class="hl sym">:=</span> w <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>

    <span class="hl num">0</span>.to <span class="hl sym">(</span>h <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span> do <span class="hl sym">{</span> y<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>

      civ <span class="hl sym">:= (</span>y <span class="hl sym">*</span> <span class="hl num">2</span><span class="hl sym">)</span>.to_real_64 <span class="hl sym">/</span> h <span class="hl sym">-</span> <span class="hl num">1.0</span><span class="hl sym">;</span>

      <span class="hl num">0</span>.to wm1 by <span class="hl num">2</span> do <span class="hl sym">{</span> x<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
        <span class="hl sym">+</span> crv0<span class="hl sym">,</span>crv1<span class="hl sym">:</span>REAL_64<span class="hl sym">;</span>
        <span class="hl sym">+</span> zrv0<span class="hl sym">,</span>zrv1<span class="hl sym">:</span>REAL_64<span class="hl sym">;</span>
        <span class="hl sym">+</span> ziv0<span class="hl sym">,</span>ziv1<span class="hl sym">:</span>REAL_64<span class="hl sym">;</span>
        <span class="hl sym">+</span> trv0<span class="hl sym">,</span>trv1<span class="hl sym">:</span>REAL_64<span class="hl sym">;</span>
        <span class="hl sym">+</span> tiv0<span class="hl sym">,</span>tiv1<span class="hl sym">:</span>REAL_64<span class="hl sym">;</span>
        <span class="hl sym">+</span> i<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>

        crv0 <span class="hl sym">:= (</span>x <span class="hl sym">*</span> <span class="hl num">2</span><span class="hl sym">)</span>.to_real_64 <span class="hl sym">/</span> w <span class="hl sym">-</span> <span class="hl num">1.5</span><span class="hl sym">;</span>
        crv1 <span class="hl sym">:= ((</span>x <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">) *</span> <span class="hl num">2</span><span class="hl sym">)</span>.to_real_64 <span class="hl sym">/</span> w <span class="hl sym">-</span> <span class="hl num">1.5</span><span class="hl sym">;</span>
        <span class="hl sym">{</span>
          ziv0 <span class="hl sym">:= (</span>zrv0 <span class="hl sym">*</span> ziv0<span class="hl sym">) + (</span>zrv0 <span class="hl sym">*</span> ziv0<span class="hl sym">) +</span> civ<span class="hl sym">;</span>
          ziv1 <span class="hl sym">:= (</span>zrv1 <span class="hl sym">*</span> ziv1<span class="hl sym">) + (</span>zrv1 <span class="hl sym">*</span> ziv1<span class="hl sym">) +</span> civ<span class="hl sym">;</span>

          zrv0 <span class="hl sym">:=</span> trv0 <span class="hl sym">-</span> tiv0 <span class="hl sym">+</span> crv0<span class="hl sym">;</span>
          zrv1 <span class="hl sym">:=</span> trv1 <span class="hl sym">-</span> tiv1 <span class="hl sym">+</span> crv1<span class="hl sym">;</span>

          trv0 <span class="hl sym">:=</span> zrv0 <span class="hl sym">*</span> zrv0<span class="hl sym">;</span>
          trv1 <span class="hl sym">:=</span> zrv1 <span class="hl sym">*</span> zrv1<span class="hl sym">;</span>

          tiv0 <span class="hl sym">:=</span> ziv0 <span class="hl sym">*</span> ziv0<span class="hl sym">;</span>
          tiv1 <span class="hl sym">:=</span> ziv1 <span class="hl sym">*</span> ziv1<span class="hl sym">;</span>

          delta0 <span class="hl sym">:=</span> four <span class="hl sym">-</span> trv0 <span class="hl sym">-</span> tiv0<span class="hl sym">;</span>
          delta1 <span class="hl sym">:=</span> four <span class="hl sym">-</span> trv1 <span class="hl sym">-</span> tiv1<span class="hl sym">;</span>

          i  <span class="hl sym">:=</span> i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
        <span class="hl sym">}</span>.do_while <span class="hl sym">{</span>
          <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> iter<span class="hl sym">) &amp;&amp; {</span>
            <span class="hl sym">(</span>delta0 <span class="hl sym">&gt;=</span> <span class="hl num">0</span><span class="hl sym">) || {</span>delta1 <span class="hl sym">&gt;=</span> <span class="hl num">0</span><span class="hl sym">}</span>
          <span class="hl sym">}</span>
        <span class="hl sym">};</span>
        byte_acc <span class="hl sym">:=</span> byte_acc <span class="hl sym">&lt;&lt;</span> <span class="hl num">2</span><span class="hl sym">;</span>

        <span class="hl sym">(</span>delta0 <span class="hl sym">&gt;=</span> <span class="hl num">0</span><span class="hl sym">)</span>.if <span class="hl sym">{</span>
          byte_acc <span class="hl sym">:=</span> byte_acc <span class="hl sym">|</span> <span class="hl num">02</span>h<span class="hl sym">;</span>
        <span class="hl sym">};</span>
        <span class="hl sym">(</span>delta1 <span class="hl sym">&gt;=</span> <span class="hl num">0</span><span class="hl sym">)</span>.if <span class="hl sym">{</span>
          byte_acc <span class="hl sym">:=</span> byte_acc <span class="hl sym">|</span> <span class="hl num">01</span>h<span class="hl sym">;</span>
        <span class="hl sym">};</span>

        bit_num <span class="hl sym">:=</span> bit_num <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">;</span>
        <span class="hl sym">(</span>bit_num <span class="hl sym">=</span> <span class="hl num">8</span><span class="hl sym">)</span>.if <span class="hl sym">{</span>
          byte_acc.to_character.print<span class="hl sym">;</span>
          byte_acc <span class="hl sym">:=</span> bit_num <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
        <span class="hl sym">};</span>
      <span class="hl sym">};</span>
      <span class="hl sym">(</span>bit_num <span class="hl sym">!=</span> <span class="hl num">0</span><span class="hl sym">)</span>.if <span class="hl sym">{</span>
        byte_acc <span class="hl sym">:=</span> byte_acc <span class="hl sym">&lt;&lt;</span> mod_w<span class="hl sym">;</span>
        byte_acc.to_character.print<span class="hl sym">;</span>
        byte_acc <span class="hl sym">:=</span> bit_num <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl sym">};</span>
    <span class="hl sym">};</span>
  <span class="hl sym">);</span>
