<span class="hl com">(*  The Computer Language Benchmarks Game</span>
<span class="hl com">    http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">    Contributed by Jomo Fisher</span>
<span class="hl com"></span>
<span class="hl com">    Uses F# asyncs. Asyncs are triggered by tailcall in sequence as progress is </span>
<span class="hl com">    made around the ring. </span>
<span class="hl com">*)</span>
<span class="hl kwa">let</span> ringLength <span class="hl sym">=</span> <span class="hl num">503</span>

<span class="hl kwa">let</span> cells <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>zeroCreate ringLength
<span class="hl kwa">let</span> threads <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>zeroCreate ringLength
<span class="hl kwa">let</span> answer <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl sym">-</span><span class="hl num">1</span>

<span class="hl kwa">let</span> createWorker i <span class="hl sym">=</span> 
    <span class="hl kwa">let</span> next <span class="hl sym">= (</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)%</span>ringLength
    async <span class="hl sym">{</span> <span class="hl kwa">let value</span> <span class="hl sym">=</span> cells<span class="hl sym">.[</span>i<span class="hl sym">]</span>
            <span class="hl kwa">if false then</span> <span class="hl sym">()</span> 
            <span class="hl kwa">match value with</span>
            <span class="hl sym">|</span> <span class="hl num">0</span> <span class="hl sym">-&gt;</span> answer <span class="hl sym">:=</span> i<span class="hl sym">+</span><span class="hl num">1</span>
            <span class="hl sym">|</span> _ <span class="hl sym">-&gt;</span> 
                cells<span class="hl sym">.[</span>next<span class="hl sym">] &lt;-</span> <span class="hl kwa">value</span> <span class="hl sym">-</span> <span class="hl num">1</span> 
                return<span class="hl sym">!</span> threads<span class="hl sym">.[</span>next<span class="hl sym">] }</span>
    
<span class="hl sym">[&lt;</span><span class="hl kwd">EntryPoint</span><span class="hl sym">&gt;]</span>
<span class="hl kwa">let</span> main args <span class="hl sym">=</span> 
    cells<span class="hl sym">.[</span><span class="hl num">0</span><span class="hl sym">] &lt;-</span> <span class="hl kwa">if</span> args<span class="hl sym">.</span><span class="hl kwd">Length</span><span class="hl sym">&gt;</span><span class="hl num">0</span> <span class="hl kwa">then</span> <span class="hl kwb">int</span> args<span class="hl sym">.[</span><span class="hl num">0</span><span class="hl sym">]</span> <span class="hl kwa">else</span> <span class="hl num">50000000</span>
    <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl num">0</span><span class="hl sym">..</span>ringLength<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl kwa">do</span> 
        threads<span class="hl sym">.[</span>i<span class="hl sym">]&lt;-</span>createWorker i

    <span class="hl kwa">let</span> result <span class="hl sym">=</span> <span class="hl kwc">Async</span><span class="hl sym">.</span><span class="hl kwd">StartImmediate</span><span class="hl sym">(</span>threads<span class="hl sym">.[</span><span class="hl num">0</span><span class="hl sym">])</span>
    printfn <span class="hl str">&quot;%d&quot;</span> <span class="hl sym">!</span>answer
    <span class="hl num">0</span>


