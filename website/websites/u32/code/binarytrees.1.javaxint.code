<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by Jarkko Miettinen</span>
<span class="hl com"> * parallelize by The Anh Tran</span>
<span class="hl com"> */</span>

<span class="hl kwa">public class</span> binarytrees
<span class="hl sym">{</span>
    <span class="hl kwa">private final static</span> <span class="hl kwb">int</span> minDepth <span class="hl sym">=</span> <span class="hl num">4</span><span class="hl sym">;</span>

    <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span> <span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">)</span>
    <span class="hl sym">{</span>
        <span class="hl kwb">int</span> n <span class="hl sym">=</span> <span class="hl num">18</span><span class="hl sym">;</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>args<span class="hl sym">.</span>length <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
            n <span class="hl sym">=</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span><span class="hl kwd">parseInt</span> <span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>

        <span class="hl kwb">int</span> maxDepth <span class="hl sym">= (</span>minDepth <span class="hl sym">+</span> <span class="hl num">2</span> <span class="hl sym">&gt;</span> n<span class="hl sym">)</span> ? minDepth <span class="hl sym">+</span> <span class="hl num">2</span> <span class="hl sym">:</span> n<span class="hl sym">;</span>
        <span class="hl kwb">int</span> stretchDepth <span class="hl sym">=</span> maxDepth <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>

        <span class="hl slc">// alloc stretchdepth tree, then dealloc</span>
        <span class="hl sym">{</span>
            <span class="hl kwb">int</span> check <span class="hl sym">= (</span><span class="hl kwc">TreeNode</span><span class="hl sym">.</span><span class="hl kwd">bottomUpTree</span> <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> stretchDepth<span class="hl sym">)).</span><span class="hl kwd">itemCheck</span> <span class="hl sym">();</span>
            <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span> <span class="hl sym">(</span><span class="hl str">&quot;stretch tree of depth &quot;</span> <span class="hl sym">+</span> stretchDepth <span class="hl sym">+</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">check: &quot;</span> <span class="hl sym">+</span> check<span class="hl sym">);</span>
        <span class="hl sym">}</span>

        <span class="hl slc">// build longlivedtree</span>
        <span class="hl kwc">TreeNode</span> longLivedTree <span class="hl sym">=</span> <span class="hl kwc">TreeNode</span><span class="hl sym">.</span><span class="hl kwd">bottomUpTree</span> <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> maxDepth<span class="hl sym">);</span>

        <span class="hl slc">// build many small tree</span>
        AllocWorker<span class="hl sym">.</span><span class="hl kwd">allocTree</span> <span class="hl sym">(</span>minDepth<span class="hl sym">,</span> maxDepth<span class="hl sym">);</span>

        <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span> <span class="hl sym">(</span><span class="hl str">&quot;long lived tree of depth &quot;</span> <span class="hl sym">+</span> maxDepth <span class="hl sym">+</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">check: &quot;</span><span class="hl sym">+</span> longLivedTree<span class="hl sym">.</span><span class="hl kwd">itemCheck</span> <span class="hl sym">());</span>
    <span class="hl sym">}</span>


    <span class="hl kwa">private final static class</span> AllocWorker <span class="hl kwa">extends</span> <span class="hl kwc">Thread</span>
    <span class="hl sym">{</span>
        <span class="hl kwa">private static</span> <span class="hl kwb">int</span> minDepth<span class="hl sym">;</span>
        <span class="hl kwa">private static</span> <span class="hl kwb">int</span> maxDepth<span class="hl sym">;</span>

        <span class="hl kwa">private static</span> <span class="hl kwb">int</span> currentdepth<span class="hl sym">;</span>
        <span class="hl kwa">private</span> <span class="hl kwb">int</span> depth<span class="hl sym">;</span>

        <span class="hl kwa">private static</span> <span class="hl kwc">String</span><span class="hl sym">[]</span> output<span class="hl sym">;</span>

        <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">allocTree</span> <span class="hl sym">(</span><span class="hl kwb">int</span> minD<span class="hl sym">,</span> <span class="hl kwb">int</span> maxD<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            minDepth <span class="hl sym">=</span> minD<span class="hl sym">;</span>
            maxDepth <span class="hl sym">=</span> maxD<span class="hl sym">;</span>
            currentdepth <span class="hl sym">=</span> minDepth<span class="hl sym">;</span>

            output <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">String</span><span class="hl sym">[</span>maxDepth <span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">];</span>

            <span class="hl kwc">Thread</span> rt<span class="hl sym">[] =</span> <span class="hl kwa">new</span> <span class="hl kwc">Thread</span><span class="hl sym">[</span><span class="hl kwc">Runtime</span><span class="hl sym">.</span><span class="hl kwd">getRuntime</span> <span class="hl sym">().</span><span class="hl kwd">availableProcessors</span> <span class="hl sym">()];</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> rt<span class="hl sym">.</span>length<span class="hl sym">;</span> i<span class="hl sym">++)</span>
            <span class="hl sym">{</span>
                rt<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">AllocWorker</span> <span class="hl sym">();</span>
                rt<span class="hl sym">[</span>i<span class="hl sym">].</span><span class="hl kwd">start</span> <span class="hl sym">();</span>
            <span class="hl sym">}</span>

            <span class="hl kwa">try</span>
            <span class="hl sym">{</span>
                <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> rt<span class="hl sym">.</span>length<span class="hl sym">;</span> i<span class="hl sym">++)</span>
                    rt<span class="hl sym">[</span>i<span class="hl sym">].</span><span class="hl kwd">join</span> <span class="hl sym">();</span>
            <span class="hl sym">}</span>
            <span class="hl kwa">catch</span> <span class="hl sym">(</span><span class="hl kwc">Exception</span> e<span class="hl sym">)</span>
            <span class="hl sym">{</span>
                e<span class="hl sym">.</span><span class="hl kwd">printStackTrace</span> <span class="hl sym">();</span>
            <span class="hl sym">}</span>

            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> d <span class="hl sym">=</span> minDepth<span class="hl sym">;</span> d <span class="hl sym">&lt;=</span> maxDepth<span class="hl sym">;</span> d <span class="hl sym">+=</span> <span class="hl num">2</span><span class="hl sym">)</span>
                <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span> <span class="hl sym">(</span>output<span class="hl sym">[</span>d<span class="hl sym">]);</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">public synchronized</span> <span class="hl kwb">void</span> <span class="hl kwd">run</span> <span class="hl sym">()</span>
        <span class="hl sym">{</span>
            <span class="hl kwa">while</span> <span class="hl sym">(</span>currentdepth <span class="hl sym">&lt;=</span> maxDepth<span class="hl sym">)</span>
            <span class="hl sym">{</span>
                depth <span class="hl sym">=</span> currentdepth<span class="hl sym">;</span>
                currentdepth <span class="hl sym">+=</span> <span class="hl num">2</span><span class="hl sym">;</span>

                <span class="hl kwd">allocAndCheck</span> <span class="hl sym">();</span>
            <span class="hl sym">}</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">private</span> <span class="hl kwb">void</span> <span class="hl kwd">allocAndCheck</span> <span class="hl sym">()</span>
        <span class="hl sym">{</span>
            <span class="hl kwb">int</span> iterations <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>maxDepth <span class="hl sym">-</span> depth <span class="hl sym">+</span> minDepth<span class="hl sym">);</span>
            <span class="hl kwb">int</span> check <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span> i <span class="hl sym">&lt;=</span> iterations<span class="hl sym">;</span> i<span class="hl sym">++)</span>
            <span class="hl sym">{</span>
                check <span class="hl sym">+= (</span><span class="hl kwc">TreeNode</span><span class="hl sym">.</span><span class="hl kwd">bottomUpTree</span> <span class="hl sym">(</span>i<span class="hl sym">,</span>depth<span class="hl sym">)).</span><span class="hl kwd">itemCheck</span> <span class="hl sym">();</span>
                check <span class="hl sym">+= (</span><span class="hl kwc">TreeNode</span><span class="hl sym">.</span><span class="hl kwd">bottomUpTree</span> <span class="hl sym">(-</span>i<span class="hl sym">,</span>depth<span class="hl sym">)).</span><span class="hl kwd">itemCheck</span> <span class="hl sym">();</span>
            <span class="hl sym">}</span>

            output<span class="hl sym">[</span>depth<span class="hl sym">] =</span> <span class="hl kwa">new</span> <span class="hl kwc">String</span> <span class="hl sym">( (</span>iterations <span class="hl sym">*</span> <span class="hl num">2</span><span class="hl sym">) +</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">trees of depth &quot;</span> <span class="hl sym">+</span> depth <span class="hl sym">+</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">check: &quot;</span> <span class="hl sym">+</span> check<span class="hl sym">);</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">private final static class</span> <span class="hl kwc">TreeNode</span>
    <span class="hl sym">{</span>
        <span class="hl kwa">private</span> <span class="hl kwc">TreeNode</span> left<span class="hl sym">,</span> right<span class="hl sym">;</span>
        <span class="hl kwa">private</span> <span class="hl kwb">int</span> item<span class="hl sym">;</span>

        <span class="hl kwa">public</span> <span class="hl kwc">TreeNode</span> <span class="hl sym">(</span><span class="hl kwb">int</span> item<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            <span class="hl kwa">this</span><span class="hl sym">.</span>item <span class="hl sym">=</span> item<span class="hl sym">;</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">public</span> <span class="hl kwc">TreeNode</span> <span class="hl sym">(</span><span class="hl kwc">TreeNode</span> left<span class="hl sym">,</span> <span class="hl kwc">TreeNode</span> right<span class="hl sym">,</span> <span class="hl kwb">int</span> item<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            <span class="hl kwa">this</span><span class="hl sym">.</span>left <span class="hl sym">=</span> left<span class="hl sym">;</span>
            <span class="hl kwa">this</span><span class="hl sym">.</span>right <span class="hl sym">=</span> right<span class="hl sym">;</span>
            <span class="hl kwa">this</span><span class="hl sym">.</span>item <span class="hl sym">=</span> item<span class="hl sym">;</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">public static</span> <span class="hl kwc">TreeNode</span> <span class="hl kwd">bottomUpTree</span> <span class="hl sym">(</span><span class="hl kwb">int</span> item<span class="hl sym">,</span> <span class="hl kwb">int</span> depth<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>depth <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
                <span class="hl kwa">return new</span> <span class="hl kwc">TreeNode</span> <span class="hl sym">(</span>   <span class="hl kwd">bottomUpTree</span> <span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>item<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> depth<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">),</span>
                        <span class="hl kwd">bottomUpTree</span> <span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>item<span class="hl sym">,</span> depth<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">),</span>
                        item    <span class="hl sym">);</span>
            <span class="hl kwa">return new</span> <span class="hl kwc">TreeNode</span> <span class="hl sym">(</span>item<span class="hl sym">);</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">public</span> <span class="hl kwb">int</span> <span class="hl kwd">itemCheck</span> <span class="hl sym">()</span>
        <span class="hl sym">{</span>
            <span class="hl slc">// if necessary deallocate here</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>left <span class="hl sym">!=</span> null<span class="hl sym">)</span>
                <span class="hl kwa">return</span> item <span class="hl sym">+</span> left<span class="hl sym">.</span><span class="hl kwd">itemCheck</span> <span class="hl sym">() -</span> right<span class="hl sym">.</span><span class="hl kwd">itemCheck</span> <span class="hl sym">();</span>
            <span class="hl kwa">return</span> item<span class="hl sym">;</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>
