<span class="hl com">{ The Computer Language Benchmarks Game</span>
<span class="hl com">  http://shootout.alioth.debian.org</span>
<span class="hl com"></span>
<span class="hl com">  contributed by Ales Katona</span>
<span class="hl com">  modified by Vincent Snijders</span>
<span class="hl com">  modified by Jeppe Johansen</span>
<span class="hl com">}</span>

<span class="hl kwa">program</span> mandelbrot<span class="hl sym">;</span>

<span class="hl kwa">uses</span> <span class="hl com">{$ifdef unix}</span>
     cthreads<span class="hl sym">,</span>
     <span class="hl com">{$endif}</span>
     sysutils<span class="hl sym">;</span>

<span class="hl kwa">var</span>
  n<span class="hl sym">,</span> yg<span class="hl sym">:</span> <span class="hl kwb">longint</span><span class="hl sym">;</span>
  fThreads<span class="hl sym">:</span> <span class="hl kwb">longint</span><span class="hl sym">;</span>
  fBuffer<span class="hl sym">:</span> PByte<span class="hl sym">;</span>
  fLen<span class="hl sym">:</span> plongint<span class="hl sym">;</span>

<span class="hl kwa">function</span> <span class="hl kwd">run</span><span class="hl sym">(</span>param<span class="hl sym">:</span> <span class="hl kwb">pointer</span><span class="hl sym">):</span> <span class="hl kwb">longint</span><span class="hl sym">;</span>
<span class="hl kwa">var</span>
  Cy<span class="hl sym">,</span> Step<span class="hl sym">:</span> <span class="hl kwb">double</span><span class="hl sym">;</span>
  lx<span class="hl sym">,</span> x<span class="hl sym">,</span> y<span class="hl sym">,</span> bits<span class="hl sym">,</span>bit<span class="hl sym">:</span> <span class="hl kwb">Longint</span><span class="hl sym">;</span>

  <span class="hl kwa">function</span> <span class="hl kwd">CalculatePoint</span><span class="hl sym">(</span><span class="hl kwa">const</span> Cx<span class="hl sym">,</span> Cy<span class="hl sym">:</span> <span class="hl kwb">double</span><span class="hl sym">):</span> <span class="hl kwb">boolean</span><span class="hl sym">;</span> nostackframe<span class="hl sym">;</span> <span class="hl kwa">inline</span><span class="hl sym">;</span>
  <span class="hl kwa">const</span>
    Limit <span class="hl sym">=</span> <span class="hl num">4</span><span class="hl sym">;</span>
  <span class="hl kwa">var</span>
    i<span class="hl sym">:</span> <span class="hl kwb">longint</span><span class="hl sym">;</span>
    Zr<span class="hl sym">,</span> Zi<span class="hl sym">,</span> Ti<span class="hl sym">,</span> Tr<span class="hl sym">:</span> <span class="hl kwb">Double</span><span class="hl sym">;</span>

  <span class="hl kwa">begin</span>
    Zr <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>  Zi <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span> Tr <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span> Ti <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl num">1</span> <span class="hl kwa">to</span> <span class="hl num">50</span> <span class="hl kwa">do begin</span>
      Zi <span class="hl sym">:=</span> <span class="hl num">2</span><span class="hl sym">*</span>Zr<span class="hl sym">*</span>Zi <span class="hl sym">+</span> Cy<span class="hl sym">;</span>
      Zr <span class="hl sym">:=</span> Tr <span class="hl sym">-</span> Ti <span class="hl sym">+</span> Cx<span class="hl sym">;</span>
      Ti <span class="hl sym">:=</span> Zi <span class="hl sym">*</span> Zi<span class="hl sym">;</span>
      Tr <span class="hl sym">:=</span> Zr <span class="hl sym">*</span> Zr<span class="hl sym">;</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>Tr <span class="hl sym">+</span> Ti<span class="hl sym">&gt;=</span>limit<span class="hl sym">)</span> <span class="hl kwa">then</span> <span class="hl kwd">exit</span><span class="hl sym">(</span><span class="hl kwb">true</span><span class="hl sym">);</span>
    <span class="hl kwa">end</span><span class="hl sym">;</span>

    CalculatePoint <span class="hl sym">:=</span> <span class="hl kwb">false</span><span class="hl sym">;</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">begin</span>
  run <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
  Step <span class="hl sym">:=</span> <span class="hl num">2</span><span class="hl sym">/</span>n<span class="hl sym">;</span>
  <span class="hl kwa">while</span> <span class="hl kwb">true</span> <span class="hl kwa">do</span>
  <span class="hl kwa">begin</span>
    y <span class="hl sym">:=</span> <span class="hl kwd">interlockedIncrement</span><span class="hl sym">(</span>yg<span class="hl sym">)-</span><span class="hl num">1</span><span class="hl sym">;</span>
    <span class="hl kwa">if</span> y <span class="hl sym">&gt;=</span> n <span class="hl kwa">then</span>
      break<span class="hl sym">;</span>
    Cy <span class="hl sym">:=</span> y <span class="hl sym">*</span> Step <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>
    bits <span class="hl sym">:=</span> <span class="hl num">255</span><span class="hl sym">;</span>  bit <span class="hl sym">:=</span> <span class="hl num">128</span><span class="hl sym">;</span>
    lx <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl kwa">for</span> x <span class="hl sym">:=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> n<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl kwa">do</span>
    <span class="hl kwa">begin</span>
      <span class="hl kwa">if</span> <span class="hl kwd">CalculatePoint</span><span class="hl sym">(</span>x <span class="hl sym">*</span> Step  <span class="hl sym">-</span> <span class="hl num">1.5</span><span class="hl sym">,</span> Cy<span class="hl sym">)</span> <span class="hl kwa">then</span>
        bits <span class="hl sym">:=</span> bits <span class="hl kwa">xor</span> bit<span class="hl sym">;</span>

      <span class="hl kwa">if</span> bit <span class="hl sym">&gt;</span> <span class="hl num">1</span> <span class="hl kwa">then</span>
        bit <span class="hl sym">:=</span> bit <span class="hl kwa">shr</span> <span class="hl num">1</span>
      <span class="hl kwa">else</span>
      <span class="hl kwa">begin</span>
        fBuffer<span class="hl sym">[</span>y<span class="hl sym">*(</span>n<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)+</span>lx<span class="hl sym">] :=</span> bits<span class="hl sym">;</span>
        <span class="hl kwd">inc</span><span class="hl sym">(</span>lx<span class="hl sym">);</span>
        bits <span class="hl sym">:=</span> <span class="hl num">255</span><span class="hl sym">;</span>  bit <span class="hl sym">:=</span> <span class="hl num">128</span><span class="hl sym">;</span>
      <span class="hl kwa">end</span><span class="hl sym">;</span>
    <span class="hl kwa">end</span><span class="hl sym">;</span>
    <span class="hl kwa">if</span> bit <span class="hl sym">&lt;</span> <span class="hl num">128</span> <span class="hl kwa">then</span>
   <span class="hl kwa">begin</span>
     fBuffer<span class="hl sym">[</span>y<span class="hl sym">*(</span>n<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)+</span>lx<span class="hl sym">] :=</span> bits <span class="hl kwa">xor</span><span class="hl sym">((</span>bit <span class="hl kwa">shl</span> <span class="hl num">1</span><span class="hl sym">)-</span><span class="hl num">1</span><span class="hl sym">);</span>
     <span class="hl kwd">inc</span><span class="hl sym">(</span>lx<span class="hl sym">);</span>
   <span class="hl kwa">end</span><span class="hl sym">;</span>
   flen<span class="hl sym">[</span>y<span class="hl sym">] :=</span> lx<span class="hl sym">;</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>

  <span class="hl kwd">interlockeddecrement</span><span class="hl sym">(</span>fThreads<span class="hl sym">);</span>
  <span class="hl kwd">EndThread</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">var</span> c<span class="hl sym">:</span> longword<span class="hl sym">;</span>
   i<span class="hl sym">,</span> i2<span class="hl sym">:</span> <span class="hl kwb">longint</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  <span class="hl kwd">Val</span><span class="hl sym">(</span><span class="hl kwd">ParamStr</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">),</span> n<span class="hl sym">);</span>

  yg <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
  fBuffer <span class="hl sym">:=</span> <span class="hl kwd">GetMem</span><span class="hl sym">((</span>n<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)*</span>n<span class="hl sym">);</span>
  fLen <span class="hl sym">:=</span> <span class="hl kwd">GetMem</span><span class="hl sym">(</span>n<span class="hl sym">*</span><span class="hl num">4</span><span class="hl sym">);</span>

  <span class="hl kwd">writeln</span><span class="hl sym">(</span><span class="hl str">'P4'</span><span class="hl sym">);</span>
  <span class="hl kwd">writeln</span><span class="hl sym">(</span>n<span class="hl sym">,</span><span class="hl str">' '</span><span class="hl sym">,</span>n<span class="hl sym">);</span>

  fThreads <span class="hl sym">:=</span> n <span class="hl kwa">shr</span> <span class="hl num">5</span><span class="hl sym">;</span> <span class="hl slc">//Start a number of calculation threads to take advantage of SMP systems</span>
  <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> fThreads<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl kwa">do</span>
    <span class="hl kwd">BeginThread</span><span class="hl sym">(</span><span class="hl kwa">nil</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">, &#64;</span>run<span class="hl sym">,</span> <span class="hl kwa">nil</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span>c<span class="hl sym">);</span>

  <span class="hl kwa">while</span> fThreads <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">do</span> <span class="hl kwd">sleep</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span> <span class="hl slc">//There exists no good crossplatform synchronization primitives</span>

  <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> n<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl kwa">do</span> <span class="hl slc">//Write the output to a file</span>
    <span class="hl kwa">for</span> i2 <span class="hl sym">:=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> fLen<span class="hl sym">[</span>i<span class="hl sym">]-</span><span class="hl num">1</span> <span class="hl kwa">do</span>
     <span class="hl kwd">write</span><span class="hl sym">(</span><span class="hl kwd">chr</span><span class="hl sym">(</span>fBuffer<span class="hl sym">[</span>i<span class="hl sym">*(</span>n<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)+</span>i2<span class="hl sym">]));</span>

  <span class="hl kwd">freemem</span><span class="hl sym">(</span>fBuffer<span class="hl sym">);</span>
  <span class="hl kwd">freemem</span><span class="hl sym">(</span>flen<span class="hl sym">);</span>
<span class="hl kwa">end</span><span class="hl sym">.</span>
