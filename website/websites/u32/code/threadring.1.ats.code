<span class="hl com">(*</span>
<span class="hl com">** The Computer Language Benchmarks Game</span>
<span class="hl com">** http://shootout.alioth.debian.org/</span>
<span class="hl com">**</span>
<span class="hl com">** The [thread-ring] benchmark</span>
<span class="hl com">**</span>
<span class="hl com">** contributed by Hongwei Xi</span>
<span class="hl com">**</span>
<span class="hl com">** compilation command:</span>
<span class="hl com">**   atscc -O3 -fomit-frame-pointer thread-ring.dats -o thread-ring -lpthread</span>
<span class="hl com">*)</span>

<span class="hl sym">%{</span>^

<span class="hl dir">#include &lt;stdio.h&gt;</span>
<span class="hl dir">#include &lt;stdlib.h&gt;</span>
<span class="hl dir">#include &lt;pthread.h&gt;</span>
<span class="hl dir">#include &lt;string.h&gt;</span>
<span class="hl dir">#include &lt;limits.h&gt;</span>

<span class="hl dir">#define NTHREAD (503)</span>

static pthread_mutex_t mutex0 <span class="hl sym">;</span>
static pthread_mutex_t mutexarr<span class="hl sym">[</span>NTHREAD<span class="hl sym">] ;</span>
<span class="hl kwa">typedef struct</span> <span class="hl sym">{</span> char _<span class="hl sym">[</span>PTHREAD_STACK_MIN<span class="hl sym">] ; }</span> threadstack <span class="hl sym">;</span>
static threadstack threadstackarr<span class="hl sym">[</span>NTHREAD<span class="hl sym">] ;</span>

static inline
ats_void_type lock_acquire <span class="hl sym">(</span>ats_int_type i<span class="hl sym">) {</span>
  <span class="hl kwa">if</span> <span class="hl sym">(</span>i <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">) {</span>
    pthread_mutex_lock <span class="hl sym">(&amp;</span>mutex0<span class="hl sym">) ;</span>
  <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
    pthread_mutex_lock <span class="hl sym">(&amp;</span>mutexarr<span class="hl sym">[</span>i<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">]) ;</span>
  <span class="hl sym">}</span>
  return <span class="hl sym">;</span>
<span class="hl sym">}</span>

static inline
ats_void_type lock_release <span class="hl sym">(</span>ats_int_type i<span class="hl sym">) {</span>
  <span class="hl kwa">if</span> <span class="hl sym">(</span>i <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">) {</span>
    pthread_mutex_unlock <span class="hl sym">(&amp;</span>mutex0<span class="hl sym">) ;</span>
  <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
    pthread_mutex_unlock <span class="hl sym">(&amp;</span>mutexarr<span class="hl sym">[</span>i<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">]) ;</span>
  <span class="hl sym">}</span>
  return <span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl sym">%}</span>

<span class="hl dir">#define NTHREAD (503)</span>

<span class="hl sym">%{</span>^

static ats_int_type the_answer <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl sym">;</span>

static inline
ats_int_type the_answer_get <span class="hl sym">() {</span> return the_answer <span class="hl sym">; }</span>

static inline
ats_void_type the_answer_set <span class="hl sym">(</span>ats_int_type n<span class="hl sym">) {</span> the_answer <span class="hl sym">=</span> n <span class="hl sym">;</span> return <span class="hl sym">; }</span>

<span class="hl com">/* ****** ****** */</span>

static ats_int_type the_token <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl sym">;</span>

static inline
ats_int_type the_token_get <span class="hl sym">() {</span> return the_token <span class="hl sym">; }</span>

static inline
ats_void_type the_token_set <span class="hl sym">(</span>ats_int_type n<span class="hl sym">) {</span> the_token <span class="hl sym">=</span> n <span class="hl sym">;</span> return <span class="hl sym">; }</span>

<span class="hl sym">%}</span>

<span class="hl kwa">absview</span> ticket_v

<span class="hl kwa">extern fun</span> the_answer_get <span class="hl sym">(</span>pf<span class="hl sym">: !</span>ticket_v <span class="hl sym">|</span> <span class="hl com">(*nil*)</span><span class="hl sym">):</span> int <span class="hl sym">=</span> <span class="hl str">&quot;the_answer_get&quot;</span>
<span class="hl kwa">extern fun</span> the_answer_set <span class="hl sym">(</span>pf<span class="hl sym">: !</span>ticket_v <span class="hl sym">|</span> n<span class="hl sym">:</span> int<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl str">&quot;the_answer_set&quot;</span>

<span class="hl kwa">extern fun</span> the_token_get <span class="hl sym">(</span>pf<span class="hl sym">: !</span>ticket_v <span class="hl sym">|</span> <span class="hl com">(*nil*)</span><span class="hl sym">):</span> int <span class="hl sym">=</span> <span class="hl str">&quot;the_token_get&quot;</span>
<span class="hl kwa">extern fun</span> the_token_set <span class="hl sym">(</span>pf<span class="hl sym">: !</span>ticket_v <span class="hl sym">|</span> n<span class="hl sym">:</span> int<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl str">&quot;the_token_set&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">extern fun</span> lock_acquire <span class="hl sym">(</span>i<span class="hl sym">:</span> natLte NTHREAD<span class="hl sym">): (</span>ticket_v <span class="hl sym">|</span> void<span class="hl sym">)</span>
  <span class="hl sym">=</span> <span class="hl str">&quot;lock_acquire&quot;</span>

<span class="hl kwa">extern fun</span> lock_release <span class="hl sym">(</span>pf<span class="hl sym">:</span> ticket_v <span class="hl sym">|</span> i<span class="hl sym">:</span> natLte NTHREAD<span class="hl sym">):</span> void
  <span class="hl sym">=</span> <span class="hl str">&quot;lock_release&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">extern fun</span> fthread
  <span class="hl sym">{</span>i<span class="hl sym">:</span>int <span class="hl sym">|</span> <span class="hl num">1</span> <span class="hl sym">&lt;=</span> i<span class="hl sym">;</span> i <span class="hl sym">&lt;=</span> NTHREAD<span class="hl sym">} (</span>i<span class="hl sym">:</span> int i<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl str">&quot;fthread&quot;</span>

<span class="hl kwa">implement</span> fthread <span class="hl sym">(</span>i<span class="hl sym">) =</span> <span class="hl kwa">let</span>
<span class="hl com">(*</span>
<span class="hl com">  val () = (prerr &quot;fthread: i = &quot;; prerr i ; prerr_newline ())</span>
<span class="hl com">*)</span>
  <span class="hl kwa">val</span> <span class="hl sym">(</span>pf <span class="hl sym">| ()) =</span> lock_acquire <span class="hl sym">(</span>i<span class="hl sym">)</span>
  <span class="hl kwa">val</span> n <span class="hl sym">=</span> the_token_get <span class="hl sym">(</span>pf <span class="hl sym">|</span> <span class="hl com">(*nil*)</span><span class="hl sym">)</span>
<span class="hl com">(*</span>
<span class="hl com">  val () = (prerr &quot;fthread: n = &quot;; prerr n ; prerr_newline ())</span>
<span class="hl com">*)</span>
  <span class="hl kwa">val</span> i1 <span class="hl sym">=</span> i <span class="hl sym">+</span> <span class="hl num">1</span>
  <span class="hl kwa">val</span> i1 <span class="hl sym">= (</span><span class="hl kwa">if</span> i1 <span class="hl sym">&lt;=</span> NTHREAD <span class="hl kwa">then</span> i1 <span class="hl kwa">else</span> <span class="hl num">1</span><span class="hl sym">):</span> natLte NTHREAD
<span class="hl kwa">in</span>
  <span class="hl kwa">if</span> n <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then let</span>
    <span class="hl kwa">val</span> <span class="hl sym">() =</span> the_token_set <span class="hl sym">(</span>pf <span class="hl sym">|</span> n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">);</span> <span class="hl kwa">val</span> <span class="hl sym">() =</span> lock_release <span class="hl sym">(</span>pf <span class="hl sym">|</span> i1<span class="hl sym">)</span>
  <span class="hl kwa">in</span>
    fthread <span class="hl sym">(</span>i<span class="hl sym">)</span>
  <span class="hl kwa">end else begin</span>
    the_answer_set <span class="hl sym">(</span>pf <span class="hl sym">|</span> i<span class="hl sym">);</span> lock_release <span class="hl sym">(</span>pf <span class="hl sym">|</span> <span class="hl num">0</span><span class="hl sym">)</span>
  <span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span><span class="hl kwa">if</span><span class="hl sym">]</span>
<span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>fthread<span class="hl sym">]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">extern fun</span> initialization <span class="hl sym">(</span>n<span class="hl sym">:</span> Nat<span class="hl sym">): (</span>ticket_v <span class="hl sym">|</span> void<span class="hl sym">) =</span> <span class="hl str">&quot;initialization&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">implement</span> main <span class="hl sym">(</span>argc<span class="hl sym">,</span> argv<span class="hl sym">) =</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> assert <span class="hl sym">(</span>argc <span class="hl sym">&gt;=</span> <span class="hl num">2</span><span class="hl sym">)</span>
  <span class="hl kwa">val</span> n <span class="hl sym">=</span> int1_of_string <span class="hl sym">(</span>argv<span class="hl sym">.[</span><span class="hl num">1</span><span class="hl sym">])</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> assert <span class="hl sym">(</span>n <span class="hl sym">&gt;=</span> <span class="hl num">0</span><span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">(</span>pf <span class="hl sym">| ()) =</span> initialization <span class="hl sym">(</span>n<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> lock_release <span class="hl sym">(</span>pf <span class="hl sym">|</span> <span class="hl num">1</span><span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">(</span>pf <span class="hl sym">| ()) =</span> lock_acquire <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
  <span class="hl kwa">val</span> ans <span class="hl sym">=</span> the_answer_get <span class="hl sym">(</span>pf <span class="hl sym">|</span> <span class="hl com">(*nil*)</span><span class="hl sym">)</span>
  <span class="hl kwa">prval</span> <span class="hl sym">() =</span> __leak <span class="hl sym">(</span>pf<span class="hl sym">)</span> <span class="hl kwa">where</span> <span class="hl sym">{</span>
    <span class="hl kwa">extern prfun</span> __leak <span class="hl sym">(</span>pf<span class="hl sym">:</span> ticket_v<span class="hl sym">):</span> void
  <span class="hl sym">}</span>
<span class="hl kwa">in</span>
  print ans<span class="hl sym">;</span> print_newline <span class="hl sym">()</span>
<span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>main<span class="hl sym">]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl sym">%{</span>$

ats_void_type initialization <span class="hl sym">(</span>ats_int_type n<span class="hl sym">) {</span>
  int i<span class="hl sym">;</span>
  pthread_t tid <span class="hl sym">;</span>
  pthread_mutex_t <span class="hl sym">*</span>p_mutex <span class="hl sym">;</span>
  pthread_attr_t thread_attr <span class="hl sym">;</span>
  threadstack <span class="hl sym">*</span>p_threadstack <span class="hl sym">;</span>

  the_token <span class="hl sym">=</span> n <span class="hl sym">;</span>

  pthread_mutex_init <span class="hl sym">(&amp;</span>mutex0<span class="hl sym">,</span> NULL<span class="hl sym">) ;</span>
  pthread_mutex_lock <span class="hl sym">(&amp;</span>mutex0<span class="hl sym">) ;</span>

  pthread_attr_init <span class="hl sym">(&amp;</span>thread_attr<span class="hl sym">) ;</span>

  i <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl sym">;</span>
  p_mutex <span class="hl sym">= &amp;</span>mutexarr<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] ;</span>
  p_threadstack <span class="hl sym">= &amp;</span>threadstackarr<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] ;</span>
  <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> NTHREAD<span class="hl sym">) {</span>
    pthread_mutex_init <span class="hl sym">(</span>p_mutex<span class="hl sym">,</span> NULL<span class="hl sym">);</span> pthread_mutex_lock <span class="hl sym">(</span>p_mutex<span class="hl sym">);</span>
    pthread_attr_setstack <span class="hl sym">(&amp;</span>thread_attr<span class="hl sym">,</span> p_threadstack<span class="hl sym">,</span> sizeof<span class="hl sym">(</span>threadstack<span class="hl sym">)) ;</span>
    pthread_create<span class="hl sym">(&amp;</span>tid<span class="hl sym">, &amp;</span>thread_attr<span class="hl sym">, (</span>void<span class="hl sym">*</span> <span class="hl com">(*)(void*)</span><span class="hl sym">)</span>fthread<span class="hl sym">, (</span>void*)<span class="hl sym">(</span>intptr_t<span class="hl sym">)(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)) ;</span>
    i <span class="hl sym">+=</span> <span class="hl num">1</span> <span class="hl sym">;</span> p_mutex <span class="hl sym">+=</span> <span class="hl num">1</span> <span class="hl sym">;</span> p_threadstack <span class="hl sym">+=</span> <span class="hl num">1</span> <span class="hl sym">;</span>
  <span class="hl sym">}</span>

  fprintf <span class="hl sym">(</span>stderr<span class="hl sym">,</span> <span class="hl str">&quot;PTHREAD_STACK_MIN = %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> PTHREAD_STACK_MIN<span class="hl sym">) ;</span>
  return <span class="hl sym">;</span>
<span class="hl sym">} //</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>initialization<span class="hl sym">]</span>

<span class="hl sym">%}</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl com">(* end of [thread-ring] *)</span>
