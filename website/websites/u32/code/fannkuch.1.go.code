<span class="hl com">/*</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by The Go Authors.</span>
<span class="hl com"> * Based on fannkuch.c by Heiner Marxen</span>
<span class="hl com"> * flag.Arg hack by Isaac Gouy</span>
<span class="hl com"> */</span>

<span class="hl kwa">package</span> main

<span class="hl kwa">import</span> <span class="hl sym">(</span>
   <span class="hl str">&quot;flag&quot;</span>
   <span class="hl str">&quot;fmt&quot;</span>
   <span class="hl str">&quot;strconv&quot;</span>
<span class="hl sym">)</span>

<span class="hl kwa">var</span> n <span class="hl sym">=</span> <span class="hl num">0</span>

<span class="hl kwa">func</span> fannkuch<span class="hl sym">(</span>n int<span class="hl sym">)</span> int <span class="hl sym">{</span>
   <span class="hl kwa">if</span> n <span class="hl sym">&lt;</span> <span class="hl num">1</span> <span class="hl sym">{</span>
      <span class="hl kwa">return</span> <span class="hl num">0</span>
   <span class="hl sym">}</span>

   n1 <span class="hl sym">:=</span> n <span class="hl sym">-</span> <span class="hl num">1</span>
   perm <span class="hl sym">:=</span> make<span class="hl sym">([]</span>int<span class="hl sym">,</span> n<span class="hl sym">)</span>
   perm1 <span class="hl sym">:=</span> make<span class="hl sym">([]</span>int<span class="hl sym">,</span> n<span class="hl sym">)</span>
   count <span class="hl sym">:=</span> make<span class="hl sym">([]</span>int<span class="hl sym">,</span> n<span class="hl sym">)</span>

   <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> n<span class="hl sym">;</span> i<span class="hl sym">++ {</span>
      perm1<span class="hl sym">[</span>i<span class="hl sym">] =</span> i   <span class="hl slc">// initial (trivial) permutation</span>
   <span class="hl sym">}</span>

   r <span class="hl sym">:=</span> n
   didpr <span class="hl sym">:=</span> <span class="hl num">0</span>
   flipsMax <span class="hl sym">:=</span> <span class="hl num">0</span>
   <span class="hl kwa">for</span> <span class="hl sym">{</span>
      <span class="hl kwa">if</span> didpr <span class="hl sym">&lt;</span> <span class="hl num">30</span>  <span class="hl sym">{</span>
         <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> n<span class="hl sym">;</span> i<span class="hl sym">++ {</span>
            fmt<span class="hl sym">.</span>Printf<span class="hl sym">(</span><span class="hl str">&quot;%d&quot;</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">+</span>perm1<span class="hl sym">[</span>i<span class="hl sym">])</span>
         <span class="hl sym">}</span>
         fmt<span class="hl sym">.</span>Printf<span class="hl sym">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span>
         didpr<span class="hl sym">++</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">for</span> <span class="hl sym">;</span> r <span class="hl sym">!=</span> <span class="hl num">1</span><span class="hl sym">;</span> r<span class="hl sym">-- {</span>
         count<span class="hl sym">[</span>r<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">] =</span> r
      <span class="hl sym">}</span>

      <span class="hl kwa">if</span> perm1<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] !=</span> <span class="hl num">0</span> <span class="hl sym">&amp;&amp;</span> perm1<span class="hl sym">[</span>n1<span class="hl sym">] !=</span> n1 <span class="hl sym">{</span>
         flips <span class="hl sym">:=</span> <span class="hl num">0</span>
         <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl num">1</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> n<span class="hl sym">;</span> i<span class="hl sym">++ {</span>   <span class="hl slc">// perm = perm1</span>
            perm<span class="hl sym">[</span>i<span class="hl sym">] =</span> perm1<span class="hl sym">[</span>i<span class="hl sym">]</span>
         <span class="hl sym">}</span>
         k <span class="hl sym">:=</span> perm1<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]</span>      <span class="hl slc">// cache perm[0] in k</span>
         <span class="hl kwa">for</span> <span class="hl sym">{</span>         <span class="hl slc">// k!=0 ==&gt; k&gt;0</span>
            <span class="hl kwa">for</span> i<span class="hl sym">,</span> j <span class="hl sym">:=</span> <span class="hl num">1</span><span class="hl sym">,</span> k<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> j<span class="hl sym">;</span> i<span class="hl sym">,</span> j <span class="hl sym">=</span> i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> j<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl sym">{</span>
               perm<span class="hl sym">[</span>i<span class="hl sym">],</span> perm<span class="hl sym">[</span>j<span class="hl sym">] =</span> perm<span class="hl sym">[</span>j<span class="hl sym">],</span> perm<span class="hl sym">[</span>i<span class="hl sym">]</span>
            <span class="hl sym">}</span>
            flips<span class="hl sym">++</span>
            <span class="hl slc">// Now exchange k (caching perm[0]) and perm[k]... with care!</span>
            j <span class="hl sym">:=</span> perm<span class="hl sym">[</span>k<span class="hl sym">];</span> perm<span class="hl sym">[</span>k<span class="hl sym">] =</span> k<span class="hl sym">;</span> k <span class="hl sym">=</span> j<span class="hl sym">;</span>
            <span class="hl kwa">if</span> k <span class="hl sym">==</span> <span class="hl num">0</span> <span class="hl sym">{</span>
               <span class="hl kwa">break</span>
            <span class="hl sym">}</span>
         <span class="hl sym">}</span>
         <span class="hl kwa">if</span> flipsMax <span class="hl sym">&lt;</span> flips <span class="hl sym">{</span>
            flipsMax <span class="hl sym">=</span> flips
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">for</span> <span class="hl sym">;</span> r <span class="hl sym">&lt;</span> n<span class="hl sym">;</span> r<span class="hl sym">++ {</span>
         <span class="hl slc">// rotate down perm[0..r] by one</span>
         perm0 <span class="hl sym">:=</span> perm1<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]</span>
         <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> r<span class="hl sym">;</span> i<span class="hl sym">++ {</span>
            perm1<span class="hl sym">[</span>i<span class="hl sym">] =</span> perm1<span class="hl sym">[</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">]</span>
         <span class="hl sym">}</span>
         perm1<span class="hl sym">[</span>r<span class="hl sym">] =</span> perm0
         count<span class="hl sym">[</span>r<span class="hl sym">]--</span>
         <span class="hl kwa">if</span> count<span class="hl sym">[</span>r<span class="hl sym">] &gt;</span> <span class="hl num">0</span> <span class="hl sym">{</span>
            <span class="hl kwa">break</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">if</span> r <span class="hl sym">==</span> n <span class="hl sym">{</span>
         <span class="hl kwa">return</span> flipsMax
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">return</span> <span class="hl num">0</span>
<span class="hl sym">}</span>

<span class="hl kwa">func</span> main<span class="hl sym">() {</span>
   flag<span class="hl sym">.</span>Parse<span class="hl sym">()</span>
   <span class="hl kwa">if</span> flag<span class="hl sym">.</span>NArg<span class="hl sym">() &gt;</span> <span class="hl num">0</span> <span class="hl sym">{</span> n<span class="hl sym">,</span>_ <span class="hl sym">=</span> strconv<span class="hl sym">.</span>Atoi<span class="hl sym">(</span> flag<span class="hl sym">.</span>Arg<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">) ) }</span>
   fmt<span class="hl sym">.</span>Printf<span class="hl sym">(</span><span class="hl str">&quot;Pfannkuchen(%d) = %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> n<span class="hl sym">,</span> fannkuch<span class="hl sym">(</span>n<span class="hl sym">))</span>
<span class="hl sym">}</span>
