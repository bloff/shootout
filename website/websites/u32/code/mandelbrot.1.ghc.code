<span class="hl com">{-# OPTIONS -O2 -fvia-C -fexcess-precision #-}</span> <span class="hl com">{-# LANGUAGE BangPatterns #-}</span>
<span class="hl slc">--</span>
<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Contributed by Spencer Janssen, Trevor McCort, Christophe Poucet and Don Stewart</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Must be compiled with the -fexcess-precision flag as a pragma. GHC</span>
<span class="hl slc">-- currently doesn't recognise the -fexcess-precision flag on the command</span>
<span class="hl slc">-- line (!).</span>
<span class="hl slc">--</span>
<span class="hl slc">-- The following flags are suggested when compiling:</span>
<span class="hl slc">--</span>
<span class="hl slc">--      -O -fglasgow-exts -optc-march=pentium4</span>
<span class="hl slc">--      -fbang-patterns -funbox-strict-fields -optc-O2 -optc-mfpmath=sse -optc-msse2</span>
<span class="hl slc">--</span>

import System
import System.IO
import Foreign
import Foreign.Marshal.Array

main <span class="hl sym">=</span> do
    w <span class="hl sym">&lt;-</span> getArgs <span class="hl sym">&gt;&gt;=</span> readIO . head
    let n      <span class="hl sym">=</span> w `div` <span class="hl num">8</span>
        m  <span class="hl sym">=</span> <span class="hl num">2</span> <span class="hl sym">/</span> fromIntegral w
    putStrLn <span class="hl sym">(</span><span class="hl str">&quot;P4\n&quot;</span><span class="hl sym">++</span>show w<span class="hl sym">++</span><span class="hl str">&quot; &quot;</span><span class="hl sym">++</span>show w<span class="hl sym">)</span>
    p <span class="hl sym">&lt;-</span> mallocArray0 n
    unfold n <span class="hl sym">(</span>next_x w m n<span class="hl sym">)</span> p <span class="hl sym">(</span>T <span class="hl num">1 0 0</span> <span class="hl sym">(-</span><span class="hl num">1</span><span class="hl sym">))</span>

unfold <span class="hl sym">::</span> Int <span class="hl sym">-&gt; (</span>T <span class="hl sym">-&gt;</span> Maybe <span class="hl sym">(</span>Word8<span class="hl sym">,</span>T<span class="hl sym">)) -&gt;</span> Ptr Word8 <span class="hl sym">-&gt;</span> T <span class="hl sym">-&gt;</span> IO <span class="hl sym">()</span>
unfold <span class="hl sym">!</span>i <span class="hl sym">!</span>f <span class="hl sym">!</span>ptr <span class="hl sym">!</span>x0 <span class="hl sym">=</span> loop x0
  where
    loop <span class="hl sym">!</span>x <span class="hl sym">=</span> go ptr <span class="hl num">0</span> x

    go <span class="hl sym">!</span>p <span class="hl sym">!</span>n <span class="hl sym">!</span>x <span class="hl sym">=</span> case f x of
        Just <span class="hl sym">(</span>w<span class="hl sym">,</span>y<span class="hl sym">) |</span> n <span class="hl sym">/=</span> i <span class="hl sym">-&gt;</span> poke p w <span class="hl sym">&gt;&gt;</span> go <span class="hl sym">(</span>p `plusPtr` <span class="hl num">1</span><span class="hl sym">) (</span>n<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span> y
        Nothing             <span class="hl sym">-&gt;</span> hPutBuf stdout ptr i
        _                   <span class="hl sym">-&gt;</span> hPutBuf stdout ptr i <span class="hl sym">&gt;&gt;</span> loop x

data T <span class="hl sym">=</span> T <span class="hl sym">!</span>Int <span class="hl sym">!</span>Int <span class="hl sym">!</span>Int <span class="hl sym">!</span>Double

next_x <span class="hl sym">!</span>w <span class="hl sym">!</span>iw <span class="hl sym">!</span>bw <span class="hl sym">(</span>T bx x y ci<span class="hl sym">)</span>
    <span class="hl sym">|</span> y  <span class="hl sym">==</span> w   <span class="hl sym">=</span> Nothing
    <span class="hl sym">|</span> bx <span class="hl sym">==</span> bw  <span class="hl sym">=</span> Just <span class="hl sym">(</span>loop_x w x <span class="hl num">8</span> iw ci <span class="hl num">0</span><span class="hl sym">,</span> T <span class="hl num">1 0</span>    <span class="hl sym">(</span>y<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)   (</span>iw<span class="hl sym">+</span>ci<span class="hl sym">))</span>
    <span class="hl sym">|</span> otherwise <span class="hl sym">=</span> Just <span class="hl sym">(</span>loop_x w x <span class="hl num">8</span> iw ci <span class="hl num">0</span><span class="hl sym">,</span> T <span class="hl sym">(</span>bx<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) (</span>x<span class="hl sym">+</span><span class="hl num">8</span><span class="hl sym">)</span> y ci<span class="hl sym">)</span>

loop_x <span class="hl sym">!</span>w <span class="hl sym">!</span>x <span class="hl sym">!</span>n <span class="hl sym">!</span>iw <span class="hl sym">!</span>ci <span class="hl sym">!</span>b
    <span class="hl sym">|</span> x <span class="hl sym">&lt;</span> w <span class="hl sym">=</span> if n <span class="hl sym">==</span> <span class="hl num">0</span>
                    then b
                    else loop_x w <span class="hl sym">(</span>x<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) (</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span> iw ci <span class="hl sym">(</span>b<span class="hl sym">+</span>b<span class="hl sym">+</span>v<span class="hl sym">)</span>
    <span class="hl sym">|</span> otherwise <span class="hl sym">=</span> b `shiftL` n
  where
    v <span class="hl sym">=</span> fractal <span class="hl num">0 0</span> <span class="hl sym">(</span>fromIntegral x <span class="hl sym">*</span> iw <span class="hl sym">-</span> <span class="hl num">1.5</span><span class="hl sym">)</span> ci <span class="hl num">50</span>

fractal <span class="hl sym">::</span> Double <span class="hl sym">-&gt;</span> Double <span class="hl sym">-&gt;</span> Double <span class="hl sym">-&gt;</span> Double <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Word8
fractal <span class="hl sym">!</span>r <span class="hl sym">!</span>i <span class="hl sym">!</span>cr <span class="hl sym">!</span>ci <span class="hl sym">!</span>k
    <span class="hl sym">|</span> r2 <span class="hl sym">+</span> i2 <span class="hl sym">&gt;</span> <span class="hl num">4</span> <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl sym">|</span> k <span class="hl sym">==</span> <span class="hl num">0</span>      <span class="hl sym">=</span> <span class="hl num">1</span>
    <span class="hl sym">|</span> otherwise   <span class="hl sym">=</span> fractal <span class="hl sym">(</span>r2<span class="hl sym">-</span>i2<span class="hl sym">+</span>cr<span class="hl sym">) ((</span>r<span class="hl sym">+</span>r<span class="hl sym">)*</span>i<span class="hl sym">+</span>ci<span class="hl sym">)</span> cr ci <span class="hl sym">(</span>k<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
  where
    <span class="hl sym">(!</span>r2<span class="hl sym">,!</span>i2<span class="hl sym">) = (</span>r<span class="hl sym">*</span>r<span class="hl sym">,</span>i<span class="hl sym">*</span>i<span class="hl sym">)</span>
