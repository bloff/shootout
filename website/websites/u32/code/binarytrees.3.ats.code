<span class="hl com">(*</span>
<span class="hl com">** The Computer Language Benchmarks Game</span>
<span class="hl com">** http://shootout.alioth.debian.org/</span>
<span class="hl com">**</span>
<span class="hl com">** contributed by Hongwei Xi</span>
<span class="hl com">**</span>
<span class="hl com">** compilation command:</span>
<span class="hl com">**   atscc -D_GNU_SOURCE -D_ATS_MULTITHREAD -O3 binary-trees3.dats -o binary-trees3 -D_ATS_GCATS -lpthread</span>
<span class="hl com">*)</span>

<span class="hl com">(* ****** ****** *)</span>

staload <span class="hl str">&quot;libats/SATS/parworkshop.sats&quot;</span>
staload _ <span class="hl sym">=</span> <span class="hl str">&quot;libats/DATS/parworkshop.dats&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

staload _<span class="hl com">(*anon*)</span> <span class="hl sym">=</span> <span class="hl str">&quot;prelude/DATS/reference.dats&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">dataviewtype</span> tree <span class="hl sym">(</span>int<span class="hl sym">) =</span>
  Nil<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">) | {</span>n1<span class="hl sym">,</span>n2<span class="hl sym">:</span>two<span class="hl sym">}</span> Node<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">of</span> <span class="hl sym">(</span>tree n1<span class="hl sym">,</span> int<span class="hl sym">,</span> tree n2<span class="hl sym">)</span>

<span class="hl kwa">viewtypedef</span> Tree <span class="hl sym">= [</span>n<span class="hl sym">:</span>two<span class="hl sym">]</span> tree n

<span class="hl kwa">fun</span> tree_make <span class="hl sym">(</span>d<span class="hl sym">:</span> int<span class="hl sym">,</span> i<span class="hl sym">:</span> int<span class="hl sym">):</span> Tree <span class="hl sym">=</span>
  <span class="hl kwa">if</span> d <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
    <span class="hl kwa">let val</span> d1 <span class="hl sym">=</span> d<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl kwa">and</span> i2 <span class="hl sym">=</span> i <span class="hl sym">&lt;&lt;</span> <span class="hl num">1</span> <span class="hl kwa">in</span>      
      Node <span class="hl sym">(</span>tree_make <span class="hl sym">(</span>d1<span class="hl sym">,</span> i2 <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">),</span> i<span class="hl sym">,</span> tree_make <span class="hl sym">(</span>d1<span class="hl sym">,</span> i2<span class="hl sym">))</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">else</span> Node <span class="hl sym">(</span>Nil <span class="hl sym">(),</span> i<span class="hl sym">,</span> Nil <span class="hl sym">())</span>
<span class="hl slc">// end of [tree_make]</span>

<span class="hl kwa">fun</span> check_and_free <span class="hl sym">(</span>t<span class="hl sym">:</span> Tree<span class="hl sym">):&lt;!</span>ntm<span class="hl sym">&gt;</span> int <span class="hl sym">=</span>  <span class="hl kwa">case</span><span class="hl sym">+</span> t <span class="hl kwa">of</span>
  <span class="hl sym">|</span> ~Node <span class="hl sym">(</span>tl<span class="hl sym">,</span> i<span class="hl sym">,</span> tr<span class="hl sym">) =&gt;</span> i <span class="hl sym">+</span> check_and_free tl <span class="hl sym">-</span> check_and_free tr
  <span class="hl sym">|</span> ~Nil <span class="hl sym">() =&gt;</span> <span class="hl num">0</span>
<span class="hl slc">// end of [check_and_free]</span>

<span class="hl kwa">fun</span> check <span class="hl sym">(</span>t<span class="hl sym">: !</span>Tree<span class="hl sym">):&lt;!</span>ntm<span class="hl sym">&gt;</span> int <span class="hl sym">=</span>  <span class="hl kwa">case</span><span class="hl sym">+</span> t <span class="hl kwa">of</span>
  <span class="hl sym">|</span> Node <span class="hl sym">(!</span>tl<span class="hl sym">,</span> i<span class="hl sym">, !</span>tr<span class="hl sym">) =&gt;</span>
    <span class="hl kwa">let val</span> ans <span class="hl sym">=</span> i <span class="hl sym">+</span> check <span class="hl sym">(!</span>tl<span class="hl sym">) -</span> check <span class="hl sym">(!</span>tr<span class="hl sym">)</span> <span class="hl kwa">in</span> <span class="hl sym">(</span>fold&#64; t<span class="hl sym">;</span> ans<span class="hl sym">)</span> <span class="hl kwa">end</span>
  <span class="hl sym">|</span> Nil <span class="hl sym">() =&gt; (</span>fold&#64; t<span class="hl sym">;</span> <span class="hl num">0</span><span class="hl sym">)</span>
<span class="hl slc">// end of [check]</span>

<span class="hl kwa">fun</span> check_ref <span class="hl sym">(</span>r<span class="hl sym">:</span> ref Tree<span class="hl sym">):</span> int <span class="hl sym">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> <span class="hl sym">(</span>vbox pf <span class="hl sym">|</span> p<span class="hl sym">) =</span> ref_get_view_ptr r <span class="hl kwa">in</span> check <span class="hl sym">!</span>p     
<span class="hl kwa">end</span> <span class="hl slc">// end of [check_ref]</span>

<span class="hl slc">//</span>

<span class="hl dir">#define MIN_DEPTH 4</span>

<span class="hl slc">//</span>

<span class="hl kwa">fn</span> stretch <span class="hl sym">(</span>max_depth<span class="hl sym">:</span> Nat<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl kwa">let</span>
   <span class="hl kwa">val</span> stretch_depth <span class="hl sym">=</span> max_depth <span class="hl sym">+</span> <span class="hl num">1</span>
   <span class="hl kwa">val</span> t <span class="hl sym">=</span> tree_make <span class="hl sym">(</span>stretch_depth<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">)</span>
   <span class="hl kwa">val</span> c <span class="hl sym">=</span> check_and_free <span class="hl sym">(</span>t<span class="hl sym">)</span>
<span class="hl kwa">in</span>
   printf <span class="hl sym">(</span><span class="hl str">&quot;stretch tree of depth %i</span><span class="hl esc">\t</span> <span class="hl str">check: %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> &#64;<span class="hl sym">(</span>stretch_depth<span class="hl sym">,</span> c<span class="hl sym">));</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [stretch]</span>

<span class="hl kwa">fn</span> long_lived_tree_make
  <span class="hl sym">(</span>max_depth<span class="hl sym">:</span> Nat<span class="hl sym">):</span> ref Tree <span class="hl sym">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> t <span class="hl sym">=</span> tree_make <span class="hl sym">(</span>max_depth<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">);</span> <span class="hl kwa">val</span> t_r <span class="hl sym">=</span> ref<span class="hl sym">&lt;</span>Tree<span class="hl sym">&gt; (</span>t<span class="hl sym">)</span>
<span class="hl kwa">in</span>
  t_r
<span class="hl kwa">end</span> <span class="hl slc">// end of [long_lived_tree_make]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">fun</span> doWork
  <span class="hl sym">{</span>l_n<span class="hl sym">,</span>l_d<span class="hl sym">,</span>l_c<span class="hl sym">:</span>addr<span class="hl sym">} {</span>d<span class="hl sym">,</span>md<span class="hl sym">:</span>nat <span class="hl sym">|</span> d <span class="hl sym">&lt;=</span> md<span class="hl sym">} (</span>
    pf_n<span class="hl sym">: !</span>int &#64; l_n
  <span class="hl sym">,</span> pf_d<span class="hl sym">: !</span>int &#64; l_d
  <span class="hl sym">,</span> pf_c<span class="hl sym">: !</span>int &#64; l_c
  <span class="hl sym">|</span> p_n<span class="hl sym">:</span> ptr l_n<span class="hl sym">,</span> p_d<span class="hl sym">:</span> ptr l_d<span class="hl sym">,</span> p_c<span class="hl sym">:</span> ptr l_c
  <span class="hl sym">,</span> d<span class="hl sym">:</span> int d<span class="hl sym">,</span> max_depth<span class="hl sym">:</span> int md
  <span class="hl sym">) :</span> void <span class="hl sym">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> n <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>max_depth <span class="hl sym">-</span> d <span class="hl sym">+</span> MIN_DEPTH<span class="hl sym">)</span>
  <span class="hl kwa">fun</span> loop <span class="hl sym">(</span>i<span class="hl sym">:</span> Nat<span class="hl sym">,</span> c<span class="hl sym">:</span> int<span class="hl sym">):&lt;</span>cloref1<span class="hl sym">&gt;</span> int <span class="hl sym">=</span>
    <span class="hl kwa">if</span> i <span class="hl sym">&lt;</span> n <span class="hl kwa">then let</span>
      <span class="hl kwa">val</span> t <span class="hl sym">=</span> tree_make<span class="hl sym">(</span>d<span class="hl sym">,</span>  i<span class="hl sym">);</span> <span class="hl kwa">val</span> c1 <span class="hl sym">=</span> check_and_free t
      <span class="hl kwa">val</span> t <span class="hl sym">=</span> tree_make<span class="hl sym">(</span>d<span class="hl sym">,</span> ~i<span class="hl sym">);</span> <span class="hl kwa">val</span> c2 <span class="hl sym">=</span> check_and_free t
    <span class="hl kwa">in</span>
      loop <span class="hl sym">(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> c <span class="hl sym">+</span> c1 <span class="hl sym">+</span> c2<span class="hl sym">)</span>
    <span class="hl kwa">end else begin</span>
      c <span class="hl slc">// return value</span>
    <span class="hl kwa">end</span> <span class="hl slc">// end of [if]</span>
  <span class="hl kwa">val</span> <span class="hl sym">() = !</span>p_n <span class="hl sym">:=</span> n
  <span class="hl kwa">val</span> <span class="hl sym">() = !</span>p_d <span class="hl sym">:=</span> d<span class="hl sym">;</span>
  <span class="hl kwa">val</span> <span class="hl sym">() = !</span>p_c <span class="hl sym">:=</span> loop <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">)</span>
<span class="hl kwa">in</span>
  <span class="hl slc">// nothing</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [doWork]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">dataviewtype</span> CONT <span class="hl sym">=</span>
  <span class="hl sym">|</span> CONTnil <span class="hl kwa">of</span> <span class="hl sym">()</span>
  <span class="hl sym">|</span> CONTcons <span class="hl kwa">of</span> <span class="hl sym">(</span>int<span class="hl com">(*n*)</span><span class="hl sym">,</span> int<span class="hl com">(*d*)</span><span class="hl sym">,</span> int<span class="hl com">(*c*)</span><span class="hl sym">,</span> CONT<span class="hl sym">)</span>
<span class="hl slc">// end of [CONT]</span>

<span class="hl kwa">fun</span> finishup <span class="hl sym">(</span>cont<span class="hl sym">:</span> CONT<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl kwa">case</span><span class="hl sym">+</span> cont <span class="hl kwa">of</span>
  <span class="hl sym">|</span> ~CONTcons <span class="hl sym">(</span>n<span class="hl sym">,</span> d<span class="hl sym">,</span> c<span class="hl sym">,</span> cont<span class="hl sym">) =&gt;</span> <span class="hl kwa">let</span>
      <span class="hl kwa">val</span> <span class="hl sym">() =</span> printf <span class="hl sym">(</span>
        <span class="hl str">&quot;%i</span><span class="hl esc">\t</span> <span class="hl str">trees of depth %i</span><span class="hl esc">\t</span> <span class="hl str">check: %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> &#64;<span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> n<span class="hl sym">,</span> d<span class="hl sym">,</span> c<span class="hl sym">)</span>
      <span class="hl sym">)</span> <span class="hl slc">// end of printf</span>
    <span class="hl kwa">in</span>
      finishup <span class="hl sym">(</span>cont<span class="hl sym">)</span>
    <span class="hl kwa">end</span> <span class="hl com">(* end of [locklst_cons] *)</span>
  <span class="hl sym">|</span> ~CONTnil <span class="hl sym">() =&gt; ()</span>
<span class="hl slc">// end of [finishup]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">viewtypedef</span> work <span class="hl sym">= () -&lt;</span>lincloptr1<span class="hl sym">&gt;</span> void
<span class="hl kwa">viewtypedef</span> WSptr <span class="hl sym">(</span>l<span class="hl sym">:</span>addr<span class="hl sym">) =</span> WORKSHOPptr <span class="hl sym">(</span>work<span class="hl sym">,</span> l<span class="hl sym">)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">fun</span> fwork <span class="hl sym">{</span>l<span class="hl sym">:</span>addr<span class="hl sym">}</span>
  <span class="hl sym">(</span>ws<span class="hl sym">: !</span>WSptr l<span class="hl sym">,</span> wk<span class="hl sym">: &amp;</span>work <span class="hl sym">&gt;&gt;</span> work?<span class="hl sym">):</span> int <span class="hl sym">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> wk <span class="hl sym">=</span> wk
  <span class="hl kwa">val</span> pfun <span class="hl sym">=</span> __cast <span class="hl sym">(</span>wk<span class="hl sym">)</span> <span class="hl kwa">where</span> <span class="hl sym">{</span>
    <span class="hl kwa">extern</span> castfn __cast
      <span class="hl sym">(</span>wk<span class="hl sym">: !</span>work <span class="hl sym">&gt;&gt;</span> opt <span class="hl sym">(</span>work<span class="hl sym">,</span> i <span class="hl sym">&gt;=</span> <span class="hl num">1</span><span class="hl sym">)):</span> <span class="hl dir">#[i:nat] uintptr i</span>
  <span class="hl sym">}</span> <span class="hl slc">// end of [val]</span>
<span class="hl kwa">in</span>
  <span class="hl kwa">if</span> pfun <span class="hl sym">&gt;= (</span>uintptr1_of_uint1<span class="hl sym">)</span><span class="hl num">1U</span> <span class="hl kwa">then let</span>
    <span class="hl kwa">prval</span> <span class="hl sym">() =</span> opt_unsome <span class="hl sym">{</span>work<span class="hl sym">} (</span>wk<span class="hl sym">)</span>
    <span class="hl kwa">val</span> <span class="hl sym">() =</span> wk <span class="hl sym">()</span>
    <span class="hl kwa">val</span> <span class="hl sym">() =</span> cloptr_free <span class="hl sym">(</span>wk<span class="hl sym">)</span>
  <span class="hl kwa">in</span>
    <span class="hl num">1</span> <span class="hl slc">// the worker is to continue</span>
  <span class="hl kwa">end else let</span>
    <span class="hl kwa">val</span> u <span class="hl sym">=</span> uint1_of_uintptr1 <span class="hl sym">(</span>pfun<span class="hl sym">)</span>
    <span class="hl kwa">val</span> i <span class="hl sym">=</span> int_of_uint <span class="hl sym">(</span>u<span class="hl sym">)</span>
    <span class="hl kwa">prval</span> <span class="hl sym">() =</span> opt_unnone <span class="hl sym">{</span>work<span class="hl sym">} (</span>wk<span class="hl sym">)</span>
    <span class="hl kwa">prval</span> <span class="hl sym">() =</span> cleanup_top <span class="hl sym">{</span>work<span class="hl sym">} (</span>wk<span class="hl sym">)</span>
  <span class="hl kwa">in</span>
    ~i <span class="hl slc">// the worker is to pause or quit</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [if]</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [fwork]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">fun</span> loop_depths <span class="hl sym">{</span>lws<span class="hl sym">:</span>agz<span class="hl sym">}</span>
  <span class="hl sym">(</span>ws<span class="hl sym">: !</span>WSptr lws<span class="hl sym">,</span> d<span class="hl sym">:</span> Nat<span class="hl sym">,</span> max_depth<span class="hl sym">:</span> Nat<span class="hl sym">,</span> res<span class="hl sym">: &amp;</span>CONT? <span class="hl sym">&gt;&gt;</span> CONT<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">extern prfun</span> __ref <span class="hl sym">{</span>v<span class="hl sym">:</span>view<span class="hl sym">} (</span>pf<span class="hl sym">: !</span>v<span class="hl sym">):</span> v
  <span class="hl kwa">extern prfun</span> __unref <span class="hl sym">{</span>v<span class="hl sym">:</span>view<span class="hl sym">} (</span>pf<span class="hl sym">:</span> v<span class="hl sym">):</span> void
<span class="hl kwa">in</span>
  <span class="hl kwa">if</span> d <span class="hl sym">&lt;=</span> max_depth <span class="hl kwa">then let</span>
    <span class="hl kwa">val</span> <span class="hl sym">() =</span> res <span class="hl sym">:=</span> CONTcons <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> ?<span class="hl sym">)</span>
    <span class="hl kwa">val</span><span class="hl sym">+</span> CONTcons <span class="hl sym">(!</span>p_n<span class="hl sym">, !</span>p_d<span class="hl sym">, !</span>p_c<span class="hl sym">, !</span>p_res1<span class="hl sym">) =</span> res
    <span class="hl kwa">stavar</span> l_n<span class="hl sym">:</span>addr <span class="hl kwa">and</span> l_d<span class="hl sym">:</span>addr <span class="hl kwa">and</span> l_c<span class="hl sym">:</span>addr
    <span class="hl kwa">prval</span> pf_n <span class="hl sym">=</span> __ref <span class="hl sym">{</span>int&#64;l_n<span class="hl sym">} (</span>view&#64; <span class="hl sym">!</span>p_n<span class="hl sym">)</span>
    <span class="hl kwa">prval</span> pf_d <span class="hl sym">=</span> __ref <span class="hl sym">{</span>int&#64;l_d<span class="hl sym">} (</span>view&#64; <span class="hl sym">!</span>p_d<span class="hl sym">)</span>
    <span class="hl kwa">prval</span> pf_c <span class="hl sym">=</span> __ref <span class="hl sym">{</span>int&#64;l_c<span class="hl sym">} (</span>view&#64; <span class="hl sym">!</span>p_c<span class="hl sym">)</span>
    <span class="hl kwa">val</span> <span class="hl sym">() =</span> workshop_insert_work <span class="hl sym">(</span>ws<span class="hl sym">,</span> f<span class="hl sym">)</span> <span class="hl kwa">where</span> <span class="hl sym">{</span>
      <span class="hl kwa">val</span> f <span class="hl sym">=</span> <span class="hl kwa">lam</span> <span class="hl sym">():</span> void <span class="hl sym">=&lt;</span>lincloptr1<span class="hl sym">&gt;</span> <span class="hl kwa">let</span>
        <span class="hl kwa">val</span> <span class="hl sym">() =</span> doWork <span class="hl sym">(</span>pf_n<span class="hl sym">,</span> pf_d<span class="hl sym">,</span> pf_c <span class="hl sym">|</span> p_n<span class="hl sym">,</span> p_d<span class="hl sym">,</span> p_c<span class="hl sym">,</span> d<span class="hl sym">,</span> max_depth<span class="hl sym">)</span>
        <span class="hl kwa">prval</span> <span class="hl sym">() =</span> __unref <span class="hl sym">(</span>pf_n<span class="hl sym">)</span>
        <span class="hl kwa">prval</span> <span class="hl sym">() =</span> __unref <span class="hl sym">(</span>pf_d<span class="hl sym">)</span>
        <span class="hl kwa">prval</span> <span class="hl sym">() =</span> __unref <span class="hl sym">(</span>pf_c<span class="hl sym">)</span>
      <span class="hl kwa">in</span>
        <span class="hl slc">// nothing</span>
      <span class="hl kwa">end</span>
    <span class="hl sym">}</span> <span class="hl slc">// end of [workshop_add_work]</span>
    <span class="hl kwa">val</span> <span class="hl sym">() =</span> loop_depths <span class="hl sym">(</span>ws<span class="hl sym">,</span> d <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">,</span> max_depth<span class="hl sym">, !</span>p_res1<span class="hl sym">)</span>
  <span class="hl kwa">in</span>
    fold&#64; <span class="hl sym">(</span>res<span class="hl sym">)</span>
  <span class="hl kwa">end else begin</span>
    res <span class="hl sym">:=</span> CONTnil <span class="hl sym">()</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [if]</span>
<span class="hl kwa">end</span> <span class="hl com">(* end of [loop_depths] *)</span>

<span class="hl com">(* ****** ****** *)</span>

staload <span class="hl str">&quot;libc/SATS/sched.sats&quot;</span>
staload TYPES <span class="hl sym">=</span> <span class="hl str">&quot;libc/sys/SATS/types.sats&quot;</span>
<span class="hl kwa">macdef</span> pid_t <span class="hl sym">=</span> $TYPES<span class="hl sym">.</span>pid_of_int

<span class="hl kwa">extern fun</span> ncore_get <span class="hl sym">():</span> int
<span class="hl kwa">implement</span> ncore_get <span class="hl sym">() =</span> <span class="hl kwa">let</span>
  <span class="hl kwa">var</span> cs<span class="hl sym">:</span> cpu_set0_t <span class="hl slc">// uninitialized</span>
  <span class="hl kwa">prval</span> <span class="hl sym">() =</span> cpusetinit <span class="hl sym">(</span>cs<span class="hl sym">)</span> <span class="hl slc">// not a real initialization</span>
  <span class="hl kwa">stavar</span> nset<span class="hl sym">:</span> int
  <span class="hl kwa">val</span> nset <span class="hl sym">=</span> cpusetsize_get <span class="hl sym">(</span>cs<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> assert_errmsg <span class="hl sym">(</span>nset <span class="hl sym">&gt;=</span> <span class="hl num">2</span><span class="hl sym">,</span> <span class="hl dir">#LOCATION)</span>
  <span class="hl kwa">val</span> err <span class="hl sym">=</span> sched_getaffinity <span class="hl sym">((</span>pid_t<span class="hl sym">)</span><span class="hl num">0</span><span class="hl sym">,</span> nset<span class="hl sym">,</span> cs<span class="hl sym">)</span>
  <span class="hl kwa">var</span> count<span class="hl sym">:</span> Nat <span class="hl sym">=</span> <span class="hl num">0</span>
  <span class="hl kwa">var</span> i<span class="hl sym">:</span> natLte <span class="hl num">16</span> <span class="hl slc">// uninitialized</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> <span class="hl kwa">for</span><span class="hl sym">* (</span>cs<span class="hl sym">:</span> cpu_set_t nset<span class="hl sym">) =&gt;</span>
    <span class="hl sym">(</span>i <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">16</span><span class="hl sym">;</span> i <span class="hl sym">:=</span> i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>CPU_ISSET <span class="hl sym">(</span>i<span class="hl sym">,</span> cs<span class="hl sym">) &gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">then</span> count <span class="hl sym">:=</span> count <span class="hl sym">+</span> <span class="hl num">1</span>
  <span class="hl slc">// end of [val]</span>
<span class="hl kwa">in</span>
  count
<span class="hl kwa">end</span> <span class="hl slc">// end of [ncore_get]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl dir">#define QSZ 1024</span>

<span class="hl kwa">implement</span> main <span class="hl sym">(</span>argc<span class="hl sym">,</span> argv<span class="hl sym">) =</span> <span class="hl kwa">let</span>
<span class="hl slc">//</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> gc_chunk_count_limit_set <span class="hl sym">(</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> <span class="hl num">15</span><span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> gc_chunk_count_limit_max_set <span class="hl sym">(</span>~<span class="hl num">1</span><span class="hl sym">)</span> <span class="hl slc">// no max</span>
<span class="hl slc">//</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> assert_errmsg
    <span class="hl sym">(</span>argc <span class="hl sym">&gt;=</span> <span class="hl num">2</span><span class="hl sym">,</span> <span class="hl str">&quot;Exit: wrong command format!</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span>
  <span class="hl kwa">val</span> n <span class="hl sym">=</span> int1_of argv<span class="hl sym">.[</span><span class="hl num">1</span><span class="hl sym">]</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> assert_errmsg
    <span class="hl sym">(</span>n <span class="hl sym">&gt;=</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl str">&quot;The input integer needs to be a natural number.</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span>
<span class="hl slc">//</span>
  <span class="hl kwa">val</span> NWORKER <span class="hl sym">=</span> ncore_get <span class="hl sym">()</span>
  <span class="hl kwa">val</span> nworker <span class="hl sym">=</span>
    <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>argc <span class="hl sym">&gt;=</span> <span class="hl num">3</span><span class="hl sym">)</span> <span class="hl kwa">then</span> int_of argv<span class="hl sym">.[</span><span class="hl num">2</span><span class="hl sym">]</span> <span class="hl kwa">else</span> NWORKER<span class="hl sym">):</span> int
  <span class="hl kwa">val</span> nworker <span class="hl sym">=</span> int1_of_int<span class="hl sym">(</span>nworker<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> assert_errmsg <span class="hl sym">(</span>nworker <span class="hl sym">&gt;=</span> <span class="hl num">1</span><span class="hl sym">,</span> <span class="hl dir">#LOCATION)</span>
  <span class="hl kwa">val</span> ws <span class="hl sym">=</span> workshop_make<span class="hl sym">&lt;</span>work<span class="hl sym">&gt; (</span>QSZ<span class="hl sym">,</span> fwork<span class="hl sym">)</span>
  <span class="hl kwa">val</span> _err <span class="hl sym">=</span> workshop_add_nworker <span class="hl sym">(</span>ws<span class="hl sym">,</span> nworker<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> assert_errmsg <span class="hl sym">(</span>_err <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl dir">#LOCATION)</span>
<span class="hl slc">//</span>
  <span class="hl kwa">val</span> max_depth <span class="hl sym">=</span> max <span class="hl sym">(</span>MIN_DEPTH <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">,</span> n<span class="hl sym">)</span>
  <span class="hl kwa">var</span> res<span class="hl sym">:</span> CONT <span class="hl slc">// uninitialized</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> loop_depths <span class="hl sym">(</span>ws<span class="hl sym">,</span> MIN_DEPTH<span class="hl sym">,</span> max_depth<span class="hl sym">,</span> res<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> stretch <span class="hl sym">(</span>max_depth<span class="hl sym">)</span>
  <span class="hl kwa">val</span> long_lived_tree <span class="hl sym">=</span> long_lived_tree_make <span class="hl sym">(</span>max_depth<span class="hl sym">)</span>
<span class="hl slc">//</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> workshop_wait_blocked_all <span class="hl sym">(</span>ws<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> finishup <span class="hl sym">(</span>res<span class="hl sym">)</span>
<span class="hl slc">//</span>
  <span class="hl kwa">var</span> i<span class="hl sym">:</span> Nat <span class="hl sym">=</span> <span class="hl num">0</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> nworker<span class="hl sym">)</span> <span class="hl kwa">let</span>
    <span class="hl kwa">val</span> _quit <span class="hl sym">=</span> $extval <span class="hl sym">(</span>work<span class="hl sym">,</span> <span class="hl str">&quot;(void*)0&quot;</span><span class="hl sym">)</span>
    <span class="hl kwa">val</span> <span class="hl sym">() =</span> workshop_insert_work <span class="hl sym">(</span>ws<span class="hl sym">,</span> _quit<span class="hl sym">)</span> <span class="hl kwa">in</span> i <span class="hl sym">:=</span> i <span class="hl sym">+</span> <span class="hl num">1</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [val]</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> workshop_wait_quit_all <span class="hl sym">(</span>ws<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> workshop_free_vt_exn <span class="hl sym">(</span>ws<span class="hl sym">)</span>
<span class="hl kwa">in</span>
  printf <span class="hl sym">(</span><span class="hl str">&quot;long lived tree of depth %i</span><span class="hl esc">\t</span> <span class="hl str">check: %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> &#64;<span class="hl sym">(</span>max_depth<span class="hl sym">,</span> check_ref long_lived_tree<span class="hl sym">))</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [main]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl com">(* end of [binary-tree3.dats] *)</span>
