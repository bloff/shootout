<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Contributed by David Hotham.</span>
<span class="hl slc">--</span>
<span class="hl slc">-- To be compiled with:</span>
<span class="hl slc">--</span>
<span class="hl slc">--  -funfolding-use-threshold=16</span>
<span class="hl kwa">import</span> System<span class="hl sym">(</span>getArgs<span class="hl sym">)</span>
<span class="hl kwa">import</span> Text.Printf<span class="hl sym">(</span>printf<span class="hl sym">)</span>
<span class="hl kwa">import</span> Data.List<span class="hl sym">(</span>foldl'<span class="hl sym">,</span> foldl1'<span class="hl sym">)</span>

<span class="hl kwa">data</span> Vector3 <span class="hl sym">=</span> Vec <span class="hl sym">!</span><span class="hl kwb">Double</span> <span class="hl sym">!</span><span class="hl kwb">Double</span> <span class="hl sym">!</span><span class="hl kwb">Double</span>

<span class="hl sym">(</span>.<span class="hl sym">+</span>.<span class="hl sym">) ::</span> Vector3 <span class="hl sym">-&gt;</span> Vector3 <span class="hl sym">-&gt;</span> Vector3
<span class="hl sym">(</span>Vec x y z<span class="hl sym">)</span> .<span class="hl sym">+</span>. <span class="hl sym">(</span>Vec u v w<span class="hl sym">) =</span> Vec <span class="hl sym">(</span>x<span class="hl sym">+</span>u<span class="hl sym">) (</span>y<span class="hl sym">+</span>v<span class="hl sym">) (</span>z<span class="hl sym">+</span>w<span class="hl sym">)</span>

<span class="hl sym">(</span>.<span class="hl sym">-</span>.<span class="hl sym">) ::</span> Vector3 <span class="hl sym">-&gt;</span> Vector3 <span class="hl sym">-&gt;</span> Vector3
<span class="hl sym">(</span>Vec x y z<span class="hl sym">)</span> .<span class="hl sym">-</span>. <span class="hl sym">(</span>Vec u v w<span class="hl sym">) =</span> Vec <span class="hl sym">(</span>x<span class="hl sym">-</span>u<span class="hl sym">) (</span>y<span class="hl sym">-</span>v<span class="hl sym">) (</span>z<span class="hl sym">-</span>w<span class="hl sym">)</span>

<span class="hl sym">(*</span>.<span class="hl sym">) ::</span> <span class="hl kwb">Double</span> <span class="hl sym">-&gt;</span> Vector3 <span class="hl sym">-&gt;</span> Vector3
k <span class="hl sym">*</span>. <span class="hl sym">(</span>Vec x y z<span class="hl sym">) =</span> Vec <span class="hl sym">(</span>k<span class="hl sym">*</span>x<span class="hl sym">) (</span>k<span class="hl sym">*</span>y<span class="hl sym">) (</span>k<span class="hl sym">*</span>z<span class="hl sym">)</span>

magnitude2 <span class="hl sym">::</span> Vector3 <span class="hl sym">-&gt;</span> <span class="hl kwb">Double</span>
magnitude2 <span class="hl sym">(</span>Vec x y z<span class="hl sym">) =</span> x<span class="hl sym">*</span>x <span class="hl sym">+</span> y<span class="hl sym">*</span>y <span class="hl sym">+</span> z<span class="hl sym">*</span>z

<span class="hl kwa">data</span> Body <span class="hl sym">=</span> Body <span class="hl sym">!</span>Vector3 <span class="hl sym">!</span>Vector3 <span class="hl sym">!</span><span class="hl kwb">Double</span>

jupPos<span class="hl sym">,</span> satPos<span class="hl sym">,</span> uraPos<span class="hl sym">,</span> nepPos <span class="hl sym">::</span> Vector3
jupPos <span class="hl sym">=</span> Vec <span class="hl sym">(</span><span class="hl num">4.84143144246472090e+00</span><span class="hl sym">)</span>
             <span class="hl sym">(-</span><span class="hl num">1.16032004402742839e+00</span><span class="hl sym">)</span>
             <span class="hl sym">(-</span><span class="hl num">1.03622044471123109e-01</span><span class="hl sym">)</span>
satPos <span class="hl sym">=</span> Vec <span class="hl sym">(</span><span class="hl num">8.34336671824457987e+00</span><span class="hl sym">)</span>
             <span class="hl sym">(</span><span class="hl num">4.12479856412430479e+00</span><span class="hl sym">)</span>
             <span class="hl sym">(-</span><span class="hl num">4.03523417114321381e-01</span><span class="hl sym">)</span>
uraPos <span class="hl sym">=</span> Vec <span class="hl sym">(</span><span class="hl num">1.28943695621391310e+01</span><span class="hl sym">)</span>
             <span class="hl sym">(-</span><span class="hl num">1.51111514016986312e+01</span><span class="hl sym">)</span>
             <span class="hl sym">(-</span><span class="hl num">2.23307578892655734e-01</span><span class="hl sym">)</span>
nepPos <span class="hl sym">=</span> Vec <span class="hl sym">(</span><span class="hl num">1.53796971148509165e+01</span><span class="hl sym">)</span>
             <span class="hl sym">(-</span><span class="hl num">2.59193146099879641e+01</span><span class="hl sym">)</span>
             <span class="hl sym">(</span><span class="hl num">1.79258772950371181e-01</span><span class="hl sym">)</span>

days_per_year <span class="hl sym">::</span> <span class="hl kwb">Double</span>
days_per_year <span class="hl sym">=</span> <span class="hl num">365.24</span>

jupVel<span class="hl sym">,</span> satVel<span class="hl sym">,</span> uraVel<span class="hl sym">,</span> nepVel <span class="hl sym">::</span> Vector3
jupVel <span class="hl sym">=</span> Vec <span class="hl sym">(</span><span class="hl num">1.66007664274403694e-03</span><span class="hl sym">*</span>days_per_year<span class="hl sym">)</span>
             <span class="hl sym">(</span><span class="hl num">7.69901118419740425e-03</span><span class="hl sym">*</span>days_per_year<span class="hl sym">)</span>
             <span class="hl sym">(-</span><span class="hl num">6.90460016972063023e-05</span><span class="hl sym">*</span>days_per_year<span class="hl sym">)</span>
satVel <span class="hl sym">=</span> Vec <span class="hl sym">(-</span><span class="hl num">2.76742510726862411e-03</span><span class="hl sym">*</span>days_per_year<span class="hl sym">)</span>
             <span class="hl sym">(</span><span class="hl num">4.99852801234917238e-03</span><span class="hl sym">*</span>days_per_year<span class="hl sym">)</span>
             <span class="hl sym">(</span><span class="hl num">2.30417297573763929e-05</span><span class="hl sym">*</span>days_per_year<span class="hl sym">)</span>
uraVel <span class="hl sym">=</span> Vec <span class="hl sym">(</span><span class="hl num">2.96460137564761618e-03</span><span class="hl sym">*</span>days_per_year<span class="hl sym">)</span>
             <span class="hl sym">(</span><span class="hl num">2.37847173959480950e-03</span><span class="hl sym">*</span>days_per_year<span class="hl sym">)</span>
             <span class="hl sym">(-</span><span class="hl num">2.96589568540237556e-05</span><span class="hl sym">*</span>days_per_year<span class="hl sym">)</span>
nepVel <span class="hl sym">=</span> Vec <span class="hl sym">(</span><span class="hl num">2.68067772490389322e-03</span><span class="hl sym">*</span>days_per_year<span class="hl sym">)</span>
             <span class="hl sym">(</span><span class="hl num">1.62824170038242295e-03</span><span class="hl sym">*</span>days_per_year<span class="hl sym">)</span>
             <span class="hl sym">(-</span><span class="hl num">9.51592254519715870e-05</span><span class="hl sym">*</span>days_per_year<span class="hl sym">)</span>

jupMass<span class="hl sym">,</span> satMass<span class="hl sym">,</span> uraMass<span class="hl sym">,</span> nepMass<span class="hl sym">,</span> solar_mass <span class="hl sym">::</span> <span class="hl kwb">Double</span>
solar_mass <span class="hl sym">=</span> <span class="hl num">4</span> <span class="hl sym">*</span> pi <span class="hl sym">**</span> <span class="hl num">2</span><span class="hl sym">;</span>
jupMass <span class="hl sym">= (</span><span class="hl num">9.54791938424326609e-04</span> <span class="hl sym">*</span> solar_mass<span class="hl sym">)</span>
satMass <span class="hl sym">= (</span><span class="hl num">2.85885980666130812e-04</span> <span class="hl sym">*</span> solar_mass<span class="hl sym">)</span>
uraMass <span class="hl sym">= (</span><span class="hl num">4.36624404335156298e-05</span> <span class="hl sym">*</span> solar_mass<span class="hl sym">)</span>
nepMass <span class="hl sym">= (</span><span class="hl num">5.15138902046611451e-05</span> <span class="hl sym">*</span> solar_mass<span class="hl sym">)</span>

sun<span class="hl sym">,</span> jupiter<span class="hl sym">,</span> saturn<span class="hl sym">,</span> uranus<span class="hl sym">,</span> neptune <span class="hl sym">::</span> Body
sun <span class="hl sym">=</span> Body <span class="hl sym">(</span>Vec <span class="hl num">0 0 0</span><span class="hl sym">) (</span>Vec <span class="hl num">0 0 0</span><span class="hl sym">)</span> solar_mass
jupiter <span class="hl sym">=</span> Body jupPos jupVel jupMass
saturn <span class="hl sym">=</span> Body satPos satVel satMass
uranus <span class="hl sym">=</span> Body uraPos uraVel uraMass
neptune <span class="hl sym">=</span> Body nepPos nepVel nepMass

kineticEnergy <span class="hl sym">::</span> Body <span class="hl sym">-&gt;</span> <span class="hl kwb">Double</span>
kineticEnergy <span class="hl sym">(</span>Body _ vel m<span class="hl sym">) =</span> <span class="hl num">0.5</span> <span class="hl sym">*</span> m <span class="hl sym">* (</span>magnitude2 vel<span class="hl sym">)</span>

potentialEnergy <span class="hl sym">::</span> Body <span class="hl sym">-&gt;</span> Body <span class="hl sym">-&gt;</span> <span class="hl kwb">Double</span>
potentialEnergy <span class="hl sym">(</span>Body p1 _ m1<span class="hl sym">) (</span>Body p2 _ m2<span class="hl sym">) = -</span>m1 <span class="hl sym">*</span> m2 <span class="hl sym">/</span> dist
  <span class="hl kwa">where</span> dist <span class="hl sym">=</span> sqrt . magnitude2 $ p1 .<span class="hl sym">-</span>. p2

momentum <span class="hl sym">::</span> Body <span class="hl sym">-&gt;</span> Vector3
momentum <span class="hl sym">(</span>Body _ vel m<span class="hl sym">) =</span> m <span class="hl sym">*</span>. vel

offsetMomemtum <span class="hl sym">:: [</span>Body<span class="hl sym">] -&gt; [</span>Body<span class="hl sym">]</span>
offsetMomemtum <span class="hl sym">[] = []</span>
offsetMomemtum bodies<span class="hl sym">&#64;(</span>b<span class="hl sym">:</span>bs<span class="hl sym">) = (</span>Body p <span class="hl sym">(</span>v .<span class="hl sym">+</span>. compensation<span class="hl sym">)</span> m<span class="hl sym">) :</span> bs
  <span class="hl kwa">where</span> totalMomentum <span class="hl sym">=</span> foldl1' <span class="hl sym">(</span>.<span class="hl sym">+</span>.<span class="hl sym">)</span> $ map momentum bodies
        <span class="hl sym">(</span>Body p v m<span class="hl sym">) =</span> b
        compensation <span class="hl sym">= (-</span><span class="hl num">1</span><span class="hl sym">/</span>m<span class="hl sym">) *</span>. totalMomentum

initialState <span class="hl sym">:: [</span>Body<span class="hl sym">]</span>
initialState <span class="hl sym">=</span> offsetMomemtum <span class="hl sym">[</span>sun<span class="hl sym">,</span> jupiter<span class="hl sym">,</span> saturn<span class="hl sym">,</span> uranus<span class="hl sym">,</span> neptune<span class="hl sym">]</span>

sum' <span class="hl sym">:: (</span>Num a<span class="hl sym">) =&gt; [</span>a<span class="hl sym">] -&gt;</span> a
sum' <span class="hl sym">=</span> foldl' <span class="hl sym">(+)</span> <span class="hl num">0</span>

energy <span class="hl sym">:: [</span>Body<span class="hl sym">] -&gt;</span> <span class="hl kwb">Double</span>
energy <span class="hl sym">[] =</span> <span class="hl num">0</span>
energy <span class="hl sym">(</span>b<span class="hl sym">:</span>bs<span class="hl sym">) =</span> sum' <span class="hl sym">[</span>ke<span class="hl sym">,</span> pe<span class="hl sym">,</span> energy bs<span class="hl sym">]</span>
          <span class="hl kwa">where</span> ke <span class="hl sym">=</span> kineticEnergy b
                pe <span class="hl sym">=</span> sum' $ map <span class="hl sym">(</span>potentialEnergy b<span class="hl sym">)</span> bs

accelPairwise <span class="hl sym">::</span> <span class="hl kwb">Double</span> <span class="hl sym">-&gt;</span> Body <span class="hl sym">-&gt;</span> Body <span class="hl sym">-&gt; (</span>Vector3<span class="hl sym">,</span> Vector3<span class="hl sym">)</span>
accelPairwise dt <span class="hl sym">(</span>Body p1 _ m1<span class="hl sym">) (</span>Body p2 _ m2<span class="hl sym">) = (</span>dv1<span class="hl sym">,</span> dv2<span class="hl sym">)</span>
  <span class="hl kwa">where</span> diff <span class="hl sym">=</span> p1 .<span class="hl sym">-</span>. p2
        <span class="hl sym">!</span>dist2 <span class="hl sym">=</span> magnitude2 diff
        <span class="hl sym">!</span>mag <span class="hl sym">=</span> dt <span class="hl sym">/ (</span>dist2 <span class="hl sym">* (</span>sqrt dist2<span class="hl sym">))</span>
        dv1 <span class="hl sym">= ((-</span>m2 <span class="hl sym">*</span> mag<span class="hl sym">) *</span>. diff<span class="hl sym">)</span>
        dv2 <span class="hl sym">= ((</span>m1 <span class="hl sym">*</span> mag<span class="hl sym">) *</span>. diff<span class="hl sym">)</span>

moveAlong <span class="hl sym">::</span> <span class="hl kwb">Double</span> <span class="hl sym">-&gt;</span> Body <span class="hl sym">-&gt;</span> Body
moveAlong dt <span class="hl sym">(</span>Body p1 v1 m1<span class="hl sym">) =</span> Body <span class="hl sym">(</span>p1 .<span class="hl sym">+</span>. <span class="hl sym">(</span>dt <span class="hl sym">*</span>. v1<span class="hl sym">))</span> v1 m1

accelAll <span class="hl sym">::</span> <span class="hl kwb">Double</span> <span class="hl sym">-&gt; [</span>Body<span class="hl sym">] -&gt; [</span>Body<span class="hl sym">]</span>
accelAll _ <span class="hl sym">[] = []</span>
accelAll dt <span class="hl sym">(</span>b<span class="hl sym">:</span>bs<span class="hl sym">) =</span> newB <span class="hl sym">:</span> accelAll dt newBs
  <span class="hl kwa">where</span> <span class="hl sym">!</span>dvs <span class="hl sym">=</span> map <span class="hl sym">(</span>accelPairwise dt b<span class="hl sym">)</span> bs
        <span class="hl sym">!</span>newB <span class="hl sym">=</span> foldl' <span class="hl sym">(</span>\<span class="hl sym">(</span>Body p v m<span class="hl sym">) (</span>dv<span class="hl sym">,</span> _<span class="hl sym">) -&gt;</span> Body p <span class="hl sym">(</span>v .<span class="hl sym">+</span>. dv<span class="hl sym">)</span> m<span class="hl sym">)</span> b dvs
        <span class="hl sym">!</span>newBs <span class="hl sym">=</span> zipWith <span class="hl sym">(</span>\<span class="hl sym">(</span>Body p v m<span class="hl sym">) (</span>_<span class="hl sym">,</span> dv<span class="hl sym">) -&gt;</span> Body p <span class="hl sym">(</span>v .<span class="hl sym">+</span>. dv<span class="hl sym">)</span> m<span class="hl sym">)</span> bs dvs

delta_t <span class="hl sym">::</span> <span class="hl kwb">Double</span>
delta_t <span class="hl sym">=</span> <span class="hl num">0.01</span>

advance <span class="hl sym">:: [</span>Body<span class="hl sym">] -&gt; [</span>Body<span class="hl sym">]</span>
advance <span class="hl sym">=</span> map <span class="hl sym">(</span>moveAlong delta_t<span class="hl sym">)</span> . accelAll delta_t

iterate' <span class="hl sym">:: (</span>a <span class="hl sym">-&gt;</span> a<span class="hl sym">) -&gt;</span> a <span class="hl sym">-&gt; [</span>a<span class="hl sym">]</span>
iterate' f a <span class="hl sym">=</span> a <span class="hl sym">: (</span>iterate' f $<span class="hl sym">!</span> f a<span class="hl sym">)</span>

main <span class="hl sym">::</span> IO <span class="hl sym">()</span>
main <span class="hl sym">=</span> <span class="hl kwa">do</span> n <span class="hl sym">&lt;-</span> getArgs <span class="hl sym">&gt;&gt;=</span> readIO . head
          printf <span class="hl str">&quot;%.9f\n&quot;</span> $ energy initialState
          printf <span class="hl str">&quot;%.9f\n&quot;</span> $ energy $ iterate' advance initialState <span class="hl sym">!!</span> n
