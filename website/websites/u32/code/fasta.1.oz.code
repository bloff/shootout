<span class="hl slc">% The Computer Language Benchmarks Game</span>
<span class="hl slc">% http://shootout.alioth.debian.org/</span>
<span class="hl slc">% contributed by Isaac Gouy</span>

<span class="hl kwa">functor</span>
<span class="hl kwa">import</span> Application Open

<span class="hl kwa">define</span>
   <span class="hl slc">% lists convenient for declaring data</span>

   RawALU <span class="hl sym">=</span>
      &quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot; <span class="hl sym">#</span>
      &quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot; <span class="hl sym">#</span>
      &quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot; <span class="hl sym">#</span>
      &quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot; <span class="hl sym">#</span>
      &quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot; <span class="hl sym">#</span>
      &quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot; <span class="hl sym">#</span>
      &quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;

   RawIUB <span class="hl sym">= [</span>
      &quot;a&quot;<span class="hl sym">#</span><span class="hl num">0.27</span> &quot;c&quot;<span class="hl sym">#</span><span class="hl num">0.12</span> &quot;g&quot;<span class="hl sym">#</span><span class="hl num">0.12</span> &quot;t&quot;<span class="hl sym">#</span><span class="hl num">0.27</span>
      &quot;B&quot;<span class="hl sym">#</span><span class="hl num">0.02</span> &quot;D&quot;<span class="hl sym">#</span><span class="hl num">0.02</span> &quot;H&quot;<span class="hl sym">#</span><span class="hl num">0.02</span> &quot;K&quot;<span class="hl sym">#</span><span class="hl num">0.02</span>
      &quot;M&quot;<span class="hl sym">#</span><span class="hl num">0.02</span> &quot;N&quot;<span class="hl sym">#</span><span class="hl num">0.02</span> &quot;R&quot;<span class="hl sym">#</span><span class="hl num">0.02</span> &quot;S&quot;<span class="hl sym">#</span><span class="hl num">0.02</span>
      &quot;V&quot;<span class="hl sym">#</span><span class="hl num">0.02</span> &quot;W&quot;<span class="hl sym">#</span><span class="hl num">0.02</span> &quot;Y&quot;<span class="hl sym">#</span><span class="hl num">0.02</span> <span class="hl sym">]</span>

   RawHomoSapiens <span class="hl sym">= [</span>
      &quot;a&quot;<span class="hl sym">#</span> <span class="hl num">0.3029549426680</span>
      &quot;c&quot;<span class="hl sym">#</span> <span class="hl num">0.1979883004921</span>
      &quot;g&quot;<span class="hl sym">#</span> <span class="hl num">0.1975473066391</span>
      &quot;t&quot;<span class="hl sym">#</span> <span class="hl num">0.3015094502008</span> <span class="hl sym">]</span>


   <span class="hl slc">% arrays faster for indexed selection</span>

   <span class="hl kwa">fun</span> <span class="hl sym">{</span>MakeStringArray L<span class="hl sym">}</span>
      A <span class="hl sym">= {</span>NewArray <span class="hl num">1</span> <span class="hl sym">{</span>Length L<span class="hl sym">}</span> nil<span class="hl sym">}</span>
   <span class="hl kwa">in</span>
     <span class="hl sym">{</span>List<span class="hl sym">.</span>forAllInd L
        <span class="hl kwa">proc</span><span class="hl sym">{$</span> I C<span class="hl sym">}</span> A<span class="hl sym">.</span>I <span class="hl sym">:= [</span>C<span class="hl sym">]</span> <span class="hl kwa">end</span><span class="hl sym">}</span>
     A
   <span class="hl kwa">end</span>

   <span class="hl kwa">fun</span> <span class="hl sym">{</span>MakeCumulative L<span class="hl sym">}</span>
      N <span class="hl sym">= {</span>Length L<span class="hl sym">}</span>
      A <span class="hl sym">= {</span>NewArray <span class="hl num">1</span> N <span class="hl num">0</span><span class="hl sym">}</span>
      Sum <span class="hl sym">= {</span>NewCell <span class="hl num">0.0</span><span class="hl sym">}</span>

      <span class="hl kwa">proc</span> <span class="hl sym">{</span>Acc I Code<span class="hl sym">#</span>Percent<span class="hl sym">}</span>
         A<span class="hl sym">.</span>I <span class="hl sym">:=</span> Code <span class="hl sym"># (</span>Percent <span class="hl sym">+ &#64;</span>Sum<span class="hl sym">)</span>
         Sum <span class="hl sym">:= &#64;</span>Sum <span class="hl sym">+</span> Percent
      <span class="hl kwa">end</span>
   <span class="hl kwa">in</span>
      <span class="hl sym">{</span>List<span class="hl sym">.</span>forAllInd L Acc<span class="hl sym">}</span>
      A
   <span class="hl kwa">end</span>

   ALU <span class="hl sym">= {</span>MakeStringArray <span class="hl sym">{</span>VirtualString<span class="hl sym">.</span>toString RawALU<span class="hl sym">} }</span>
   IUB <span class="hl sym">= {</span>MakeCumulative RawIUB<span class="hl sym">}</span>
   HomoSapiens <span class="hl sym">= {</span>MakeCumulative RawHomoSapiens<span class="hl sym">}</span>


   <span class="hl slc">% random selection</span>

   <span class="hl kwa">fun</span> <span class="hl sym">{</span>PseudoRandomFunction Max<span class="hl sym">}</span>
      IM <span class="hl sym">=</span> <span class="hl num">139968</span> IMF <span class="hl sym">=</span> <span class="hl num">139968.0</span>
      IA <span class="hl sym">=</span> <span class="hl num">3877</span>
      IC <span class="hl sym">=</span> <span class="hl num">29573</span>
      Seed <span class="hl sym">= {</span>NewCell <span class="hl num">42</span><span class="hl sym">}</span>
   <span class="hl kwa">in</span>
      <span class="hl kwa">fun</span> <span class="hl sym">{$}</span>
         Seed <span class="hl sym">:= (&#64;</span>Seed <span class="hl sym">*</span> IA <span class="hl sym">+</span> IC<span class="hl sym">)</span> mod IM
         Max <span class="hl sym">* {</span>IntToFloat <span class="hl sym">&#64;</span>Seed<span class="hl sym">} /</span> IMF
      <span class="hl kwa">end</span>
   <span class="hl kwa">end</span>

   RandomNumber <span class="hl sym">= {</span>PseudoRandomFunction <span class="hl num">1.0</span><span class="hl sym">}</span>


   <span class="hl kwa">fun</span> <span class="hl sym">{</span>SelectRandom A<span class="hl sym">}</span>
      <span class="hl kwa">fun</span> <span class="hl sym">{</span>Select R A I N<span class="hl sym">}</span>   <span class="hl slc">% simple sequential search</span>
         Code<span class="hl sym">#</span>Percent <span class="hl sym">=</span> A<span class="hl sym">.</span>I
      <span class="hl kwa">in</span>
         <span class="hl kwa">if</span> R <span class="hl sym">=&lt;</span> Percent <span class="hl kwa">then</span> Code <span class="hl kwa">else</span> <span class="hl sym">{</span>Select R A I<span class="hl sym">+</span><span class="hl num">1</span> N<span class="hl sym">}</span> <span class="hl kwa">end</span>
      <span class="hl kwa">end</span>
   <span class="hl kwa">in</span>
      <span class="hl sym">{</span>Select <span class="hl sym">{</span>RandomNumber<span class="hl sym">}</span> A <span class="hl sym">{</span>Array<span class="hl sym">.</span>low A<span class="hl sym">} {</span>Array<span class="hl sym">.</span>high A<span class="hl sym">}}</span>
   <span class="hl kwa">end</span>


   <span class="hl slc">% based on Paul Hsieh's C program</span>
   <span class="hl kwa">proc</span> <span class="hl sym">{</span>MakeRandomFasta Id Desc A N F<span class="hl sym">}</span>
      <span class="hl kwa">fun</span> <span class="hl sym">{</span>Line I L<span class="hl sym">}</span>
         <span class="hl kwa">if</span> I <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span> <span class="hl sym">{</span>Line I<span class="hl sym">-</span><span class="hl num">1</span> L<span class="hl sym">#{</span>SelectRandom A<span class="hl sym">} }</span> <span class="hl kwa">else</span> L <span class="hl kwa">end</span>
      <span class="hl kwa">end</span>
   <span class="hl kwa">in</span>
      <span class="hl sym">{</span>F  write<span class="hl sym">(</span>vs<span class="hl sym">:</span> &quot;<span class="hl sym">&gt;</span>&quot; <span class="hl sym">#</span> Id <span class="hl sym">#</span> &quot; &quot; <span class="hl sym">#</span> Desc <span class="hl sym">#</span> &quot;<span class="hl sym">\</span>n&quot;<span class="hl sym">)}</span>

      <span class="hl kwa">for</span> I <span class="hl kwa">in</span> N<span class="hl sym">;</span> I <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">;</span> I<span class="hl sym">-</span>LineLength do
         M <span class="hl sym">=</span> <span class="hl kwa">if</span> I <span class="hl sym">&lt;</span> LineLength <span class="hl kwa">then</span> I <span class="hl kwa">else</span> LineLength <span class="hl kwa">end</span>
      <span class="hl kwa">in</span>
         <span class="hl sym">{</span>F  write<span class="hl sym">(</span>vs<span class="hl sym">: {</span>Line M &quot;&quot;<span class="hl sym">} #</span> &quot;<span class="hl sym">\</span>n&quot;<span class="hl sym">)}</span>
      <span class="hl kwa">end</span>
   <span class="hl kwa">end</span>


   <span class="hl slc">% repeat selection</span>

   <span class="hl kwa">proc</span> <span class="hl sym">{</span>MakeRepeatFasta Id Desc A N F<span class="hl sym">}</span>
      Start <span class="hl sym">= {</span>NewCell <span class="hl num">1</span><span class="hl sym">}</span>
      Last <span class="hl sym">= {</span>Array<span class="hl sym">.</span>high A<span class="hl sym">}</span>

      <span class="hl kwa">fun</span> <span class="hl sym">{</span>Line I N L<span class="hl sym">}</span>
         <span class="hl kwa">if</span> I <span class="hl sym">=&lt;</span> N <span class="hl kwa">then</span> <span class="hl sym">{</span>Line I<span class="hl sym">+</span><span class="hl num">1</span> N L<span class="hl sym">#</span>A<span class="hl sym">.</span>I <span class="hl sym">}</span> <span class="hl kwa">else</span> L <span class="hl kwa">end</span>
      <span class="hl kwa">end</span>
   <span class="hl kwa">in</span>
      <span class="hl sym">{</span>F write<span class="hl sym">(</span>vs<span class="hl sym">:</span> &quot;<span class="hl sym">&gt;</span>&quot; <span class="hl sym">#</span> Id <span class="hl sym">#</span> &quot; &quot; <span class="hl sym">#</span> Desc <span class="hl sym">#</span> &quot;<span class="hl sym">\</span>n&quot;<span class="hl sym">)}</span>

      <span class="hl kwa">for</span> I <span class="hl kwa">in</span> N<span class="hl sym">;</span> I <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">;</span> I<span class="hl sym">-</span>LineLength do
         M <span class="hl sym">=</span> <span class="hl kwa">if</span> I <span class="hl sym">&lt;</span> LineLength <span class="hl kwa">then</span> I <span class="hl kwa">else</span> LineLength <span class="hl kwa">end</span>
         K <span class="hl sym">= &#64;</span>Start <span class="hl sym">+</span> M <span class="hl sym">-</span> <span class="hl num">1</span>
         Stop <span class="hl sym">=</span> <span class="hl kwa">if</span> K <span class="hl sym">&gt;</span> Last <span class="hl kwa">then</span> K<span class="hl sym">-</span>Last <span class="hl kwa">else</span> K <span class="hl kwa">end</span>
         L
      <span class="hl kwa">in</span>
         <span class="hl kwa">if</span> K <span class="hl sym">&gt;</span> Last <span class="hl kwa">then</span>
            L <span class="hl sym">= {</span>Line <span class="hl sym">&#64;</span>Start Last nil<span class="hl sym">}</span>
            Start <span class="hl sym">:=</span> <span class="hl num">1</span>
         <span class="hl kwa">else</span>
            L <span class="hl sym">=</span> nil
         <span class="hl kwa">end</span>
         <span class="hl sym">{</span>F write<span class="hl sym">(</span>vs<span class="hl sym">: {</span>Line <span class="hl sym">&#64;</span>Start Stop L<span class="hl sym">} #</span> &quot;<span class="hl sym">\</span>n&quot;<span class="hl sym">) }</span>
         Start <span class="hl sym">:=</span> Stop <span class="hl sym">+</span> <span class="hl num">1</span>
      <span class="hl kwa">end</span>
   <span class="hl kwa">end</span>


   LineLength <span class="hl sym">=</span> <span class="hl num">60</span>

   <span class="hl sym">[</span>Arg<span class="hl sym">] = {</span>Application<span class="hl sym">.</span>getArgs plain<span class="hl sym">}</span>
   N <span class="hl sym">= {</span>String<span class="hl sym">.</span>toInt Arg<span class="hl sym">}</span>
   StdOut <span class="hl sym">= {</span>New Open<span class="hl sym">.</span>file init<span class="hl sym">(</span>name<span class="hl sym">:</span>stdout<span class="hl sym">)}</span>

<span class="hl kwa">in</span>
   <span class="hl sym">{</span>MakeRepeatFasta &quot;ONE&quot; &quot;Homo sapiens alu&quot; ALU N<span class="hl sym">*</span><span class="hl num">2</span> StdOut<span class="hl sym">}</span>
   <span class="hl sym">{</span>MakeRandomFasta &quot;TWO&quot; &quot;IUB ambiguity codes&quot; IUB N<span class="hl sym">*</span><span class="hl num">3</span> StdOut<span class="hl sym">}</span>
   <span class="hl sym">{</span>MakeRandomFasta &quot;THREE&quot; &quot;Homo sapiens frequency&quot; HomoSapiens N<span class="hl sym">*</span><span class="hl num">5</span> StdOut<span class="hl sym">}</span>
   <span class="hl sym">{</span>Application<span class="hl sym">.</span>exit <span class="hl num">0</span><span class="hl sym">}</span>
<span class="hl kwa">end</span>
