<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://shootout.alioth.debian.org/</span>
<span class="hl slc"># Contributed by Sebastien Loisel</span>
<span class="hl slc"># Fixed by Isaac Gouy</span>
<span class="hl slc"># Sped up by Josh Goldfoot</span>
<span class="hl slc"># Dirtily sped up by Simon Descarpentries</span>
<span class="hl slc"># Concurrency by Jason Stitt</span>
<span class="hl slc"># Modified by Justin Peel</span>

<span class="hl kwa">from</span> multiprocessing <span class="hl kwa">import</span> Pool<span class="hl sym">,</span> cpu_count
<span class="hl kwa">from</span> math            <span class="hl kwa">import</span> sqrt
<span class="hl kwa">from</span> itertools       <span class="hl kwa">import</span> izip
<span class="hl kwa">from</span> sys             <span class="hl kwa">import</span> argv
<span class="hl kwa">from</span> operator        <span class="hl kwa">import</span> add

<span class="hl kwa">def</span> <span class="hl kwd">eval_A</span> <span class="hl sym">(</span>i<span class="hl sym">,</span> j<span class="hl sym">):</span>
    ij <span class="hl sym">=</span> i <span class="hl sym">+</span> j
    <span class="hl kwa">return</span> <span class="hl num">1.0</span> <span class="hl sym">/ ((</span>ij<span class="hl sym">) * (</span>ij <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">) /</span> <span class="hl num">2</span> <span class="hl sym">+</span> i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">eval_A_times_u</span> <span class="hl sym">(</span>u<span class="hl sym">,</span> splits<span class="hl sym">):</span>
    args <span class="hl sym">= ((</span>split<span class="hl sym">,</span> u<span class="hl sym">)</span> <span class="hl kwa">for</span> split <span class="hl kwa">in</span> splits<span class="hl sym">)</span>
    <span class="hl kwa">return</span> <span class="hl kwb">reduce</span><span class="hl sym">(</span>add<span class="hl sym">,</span>pool<span class="hl sym">.</span><span class="hl kwb">map</span><span class="hl sym">(</span>part_A_times_u<span class="hl sym">,</span> args<span class="hl sym">))</span>    

<span class="hl kwa">def</span> <span class="hl kwd">eval_At_times_u</span> <span class="hl sym">(</span>u<span class="hl sym">,</span> splits<span class="hl sym">):</span>
    args <span class="hl sym">= ((</span>split<span class="hl sym">,</span> u<span class="hl sym">)</span> <span class="hl kwa">for</span> split <span class="hl kwa">in</span> splits<span class="hl sym">)</span>
    <span class="hl kwa">return</span> <span class="hl kwb">reduce</span><span class="hl sym">(</span>add<span class="hl sym">,</span>pool<span class="hl sym">.</span><span class="hl kwb">map</span><span class="hl sym">(</span>part_At_times_u<span class="hl sym">,</span> args<span class="hl sym">))</span>

<span class="hl kwa">def</span> <span class="hl kwd">eval_AtA_times_u</span> <span class="hl sym">(</span>u<span class="hl sym">,</span> splits<span class="hl sym">):</span>
    <span class="hl kwa">return</span> <span class="hl kwd">eval_At_times_u</span> <span class="hl sym">(</span><span class="hl kwd">eval_A_times_u</span> <span class="hl sym">(</span>u<span class="hl sym">,</span> splits<span class="hl sym">),</span> splits<span class="hl sym">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">part_A_times_u</span><span class="hl sym">((</span>split<span class="hl sym">,</span>u<span class="hl sym">)):</span>
    <span class="hl kwa">return</span> <span class="hl kwb">tuple</span><span class="hl sym">(</span><span class="hl kwb">sum</span><span class="hl sym">([</span><span class="hl kwd">eval_A</span><span class="hl sym">(</span>i<span class="hl sym">,</span>j<span class="hl sym">) *</span> u_j <span class="hl kwa">for</span> j<span class="hl sym">,</span> u_j <span class="hl kwa">in</span> <span class="hl kwb">enumerate</span><span class="hl sym">(</span>u<span class="hl sym">)])</span>
            <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">xrange</span><span class="hl sym">(</span>split<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">],</span>split<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]))</span>

<span class="hl kwa">def</span> <span class="hl kwd">part_At_times_u</span><span class="hl sym">((</span>split<span class="hl sym">,</span>u<span class="hl sym">)):</span>
    <span class="hl kwa">return</span> <span class="hl kwb">tuple</span><span class="hl sym">(</span><span class="hl kwb">sum</span><span class="hl sym">([</span><span class="hl kwd">eval_A</span><span class="hl sym">(</span>j<span class="hl sym">,</span>i<span class="hl sym">) *</span> u_j <span class="hl kwa">for</span> j<span class="hl sym">,</span> u_j <span class="hl kwa">in</span> <span class="hl kwb">enumerate</span><span class="hl sym">(</span>u<span class="hl sym">)])</span>
            <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">xrange</span><span class="hl sym">(</span>split<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">],</span>split<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]))</span>

<span class="hl kwa">def</span> <span class="hl kwd">main</span><span class="hl sym">(</span>numprocs<span class="hl sym">):</span>
    n <span class="hl sym">=</span> <span class="hl kwb">int</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">])</span>
    u <span class="hl sym">= [</span><span class="hl num">1</span><span class="hl sym">] *</span> n
    numineach <span class="hl sym">= [</span>n <span class="hl sym">/</span> numprocs<span class="hl sym">]*</span>numprocs
    <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">xrange</span><span class="hl sym">(</span>n <span class="hl sym">%</span> numprocs<span class="hl sym">):</span>
        numineach<span class="hl sym">[</span>i<span class="hl sym">] +=</span> <span class="hl num">1</span>
    splits <span class="hl sym">= [(</span><span class="hl num">0</span><span class="hl sym">,</span>numineach<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">])]</span>
    <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">xrange</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span>numprocs<span class="hl sym">):</span>
        splits<span class="hl sym">.</span><span class="hl kwd">append</span><span class="hl sym">((</span>splits<span class="hl sym">[-</span><span class="hl num">1</span><span class="hl sym">][</span><span class="hl num">1</span><span class="hl sym">],</span>splits<span class="hl sym">[-</span><span class="hl num">1</span><span class="hl sym">][</span><span class="hl num">1</span><span class="hl sym">] +</span> numineach<span class="hl sym">[</span>i<span class="hl sym">]))</span>
    <span class="hl kwa">for</span> dummy <span class="hl kwa">in</span> <span class="hl kwb">xrange</span> <span class="hl sym">(</span><span class="hl num">10</span><span class="hl sym">):</span>
        v <span class="hl sym">=</span> <span class="hl kwd">eval_AtA_times_u</span> <span class="hl sym">(</span>u<span class="hl sym">,</span> splits<span class="hl sym">)</span>
        u <span class="hl sym">=</span> <span class="hl kwd">eval_AtA_times_u</span> <span class="hl sym">(</span>v<span class="hl sym">,</span> splits<span class="hl sym">)</span>

    vBv <span class="hl sym">=</span> vv <span class="hl sym">=</span> <span class="hl num">0</span>

    <span class="hl kwa">for</span> ue<span class="hl sym">,</span> ve <span class="hl kwa">in</span> <span class="hl kwd">izip</span> <span class="hl sym">(</span>u<span class="hl sym">,</span> v<span class="hl sym">):</span>
        vBv <span class="hl sym">+=</span> ue <span class="hl sym">*</span> ve
        vv  <span class="hl sym">+=</span> ve <span class="hl sym">*</span> ve

    <span class="hl kwa">print</span> <span class="hl str">&quot;%0.9f&quot;</span> <span class="hl sym">% (</span><span class="hl kwd">sqrt</span><span class="hl sym">(</span>vBv<span class="hl sym">/</span>vv<span class="hl sym">))</span>

<span class="hl kwa">if</span> __name__ <span class="hl sym">==</span> <span class="hl str">'__main__'</span><span class="hl sym">:</span>
    numprocs <span class="hl sym">=</span> <span class="hl kwd">cpu_count</span><span class="hl sym">()</span>
    pool <span class="hl sym">=</span> <span class="hl kwd">Pool</span><span class="hl sym">(</span>processes<span class="hl sym">=</span>numprocs<span class="hl sym">)</span>
    <span class="hl kwd">main</span><span class="hl sym">(</span>numprocs<span class="hl sym">)</span>
