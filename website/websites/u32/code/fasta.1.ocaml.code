<span class="hl com">(* fasta.ml</span>
<span class="hl com"> *</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by Troestler Christophe</span>
<span class="hl com"> * modified by Mauricio Fernandez</span>
<span class="hl com"> *)</span>

<span class="hl com">(* Random number generator *)</span>
<span class="hl kwa">let</span> im <span class="hl sym">=</span> <span class="hl num">139968</span>
<span class="hl kwa">and</span> ia <span class="hl sym">=</span> <span class="hl num">3877</span>
<span class="hl kwa">and</span> ic <span class="hl sym">=</span> <span class="hl num">29573</span>

<span class="hl kwa">let</span> last <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">42</span> <span class="hl kwa">and</span> inv_im <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">. /.</span> <span class="hl kwb">float</span> im
<span class="hl kwa">let</span> gen_random  max <span class="hl sym">=</span>
  <span class="hl kwa">let</span> n <span class="hl sym">= (!</span>last <span class="hl sym">*</span> ia <span class="hl sym">+</span> ic<span class="hl sym">)</span> <span class="hl kwa">mod</span> im <span class="hl kwa">in</span>
    last <span class="hl sym">:=</span> n<span class="hl sym">;</span>
    max <span class="hl sym">*.</span> <span class="hl kwb">float</span> n <span class="hl sym">*.</span> inv_im

<span class="hl kwa">module</span> <span class="hl kwd">Cumul_tbl</span> <span class="hl sym">=</span>
<span class="hl kwa">struct</span>
  <span class="hl kwa">type</span> t <span class="hl sym">= {</span> probs <span class="hl sym">:</span> <span class="hl kwb">float</span> array<span class="hl sym">;</span> chars <span class="hl sym">:</span> char array <span class="hl sym">}</span>

  <span class="hl kwa">let</span> make a <span class="hl sym">=</span> <span class="hl kwa">let</span> p <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">0.0</span> <span class="hl kwa">in</span>
    <span class="hl sym">{</span>
      probs <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>map <span class="hl sym">(</span><span class="hl kwa">fun</span> <span class="hl sym">(</span>_<span class="hl sym">,</span> p1<span class="hl sym">) -&gt;</span> p <span class="hl sym">:= !</span>p <span class="hl sym">+.</span> p1<span class="hl sym">; !</span>p<span class="hl sym">)</span> a<span class="hl sym">;</span>
      chars <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>map fst a<span class="hl sym">;</span>
    <span class="hl sym">}</span>

  <span class="hl kwa">let</span> rand_char t <span class="hl sym">=</span>
    <span class="hl kwa">let</span> p <span class="hl sym">=</span> gen_random <span class="hl num">1.0</span> <span class="hl kwa">in</span>
    <span class="hl kwa">let</span> i <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">and</span> ps <span class="hl sym">=</span> t<span class="hl sym">.</span>probs <span class="hl kwa">in</span>
      <span class="hl kwa">while</span> p <span class="hl sym">&gt;=</span> ps<span class="hl sym">.(!</span>i<span class="hl sym">)</span> <span class="hl kwa">do</span> incr i <span class="hl kwa">done</span><span class="hl sym">;</span>
      t<span class="hl sym">.</span>chars<span class="hl sym">.(!</span>i<span class="hl sym">)</span>
<span class="hl kwa">end</span>

<span class="hl kwa">let</span> width <span class="hl sym">=</span> <span class="hl num">60</span>

<span class="hl kwa">let</span> make_random_fasta id desc table n <span class="hl sym">=</span>
  <span class="hl kwc">Printf</span><span class="hl sym">.</span>printf <span class="hl str">&quot;&gt;%s %s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> id desc<span class="hl sym">;</span>
  <span class="hl kwa">let</span> table <span class="hl sym">=</span> <span class="hl kwc">Cumul_tbl</span><span class="hl sym">.</span>make table <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> line <span class="hl sym">=</span> <span class="hl kwc">String</span><span class="hl sym">.</span>make <span class="hl sym">(</span>width<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span> <span class="hl kwa">in</span>
  <span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl kwa">to</span> n <span class="hl sym">/</span> width <span class="hl kwa">do</span>
    <span class="hl kwa">for</span> j <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> width <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl kwa">do</span> line<span class="hl sym">.[</span>j<span class="hl sym">] &lt;-</span> <span class="hl kwc">Cumul_tbl</span><span class="hl sym">.</span>rand_char table <span class="hl kwa">done</span><span class="hl sym">;</span>
    print_string line<span class="hl sym">;</span>
  <span class="hl kwa">done</span><span class="hl sym">;</span>
  <span class="hl kwa">let</span> w <span class="hl sym">=</span> n <span class="hl kwa">mod</span> width <span class="hl kwa">in</span>
  <span class="hl kwa">if</span> w <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span> <span class="hl sym">(</span>
    <span class="hl kwa">for</span> j <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl kwa">to</span> w <span class="hl kwa">do</span> print_char<span class="hl sym">(</span><span class="hl kwc">Cumul_tbl</span><span class="hl sym">.</span>rand_char table<span class="hl sym">);</span> <span class="hl kwa">done</span><span class="hl sym">;</span>
    print_char <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span>
  <span class="hl sym">)</span>

<span class="hl com">(* [write s i0 l w] outputs [w] chars of [s.[0 .. l]], followed by a</span>
<span class="hl com">   newline, starting with [s.[i0]] and considering the substring [s.[0</span>
<span class="hl com">   .. l]] as a &quot;circle&quot;.</span>
<span class="hl com">   One assumes [0 &lt;= i0 &lt;= l &lt;= String.length s].</span>
<span class="hl com">   &#64;return [i0] needed for subsequent writes.  *)</span>
<span class="hl kwa">let rec</span> write s i0 l w <span class="hl sym">=</span>
  <span class="hl kwa">let</span> len <span class="hl sym">=</span> l <span class="hl sym">-</span> i0 <span class="hl kwa">in</span>
  <span class="hl kwa">if</span> w <span class="hl sym">&lt;=</span> len <span class="hl kwa">then</span> <span class="hl sym">(</span>output stdout s i0 w<span class="hl sym">;</span> print_char <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">;</span> i0 <span class="hl sym">+</span> w<span class="hl sym">)</span>
  <span class="hl kwa">else</span> <span class="hl sym">(</span>output stdout s i0 len<span class="hl sym">;</span> write s <span class="hl num">0</span> l <span class="hl sym">(</span>w <span class="hl sym">-</span> len<span class="hl sym">))</span>

<span class="hl kwa">let</span> make_repeat_fasta id desc src n <span class="hl sym">=</span>
  <span class="hl kwc">Printf</span><span class="hl sym">.</span>printf <span class="hl str">&quot;&gt;%s %s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> id desc<span class="hl sym">;</span>
  <span class="hl kwa">let</span> l <span class="hl sym">=</span> <span class="hl kwc">String</span><span class="hl sym">.</span>length src
  <span class="hl kwa">and</span> i0 <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">in</span>
  <span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl kwa">to</span> n <span class="hl sym">/</span> width <span class="hl kwa">do</span>
    i0 <span class="hl sym">:=</span> write src <span class="hl sym">!</span>i0 l width<span class="hl sym">;</span>
  <span class="hl kwa">done</span><span class="hl sym">;</span>
  <span class="hl kwa">let</span> w <span class="hl sym">=</span> n <span class="hl kwa">mod</span> width <span class="hl kwa">in</span>
  <span class="hl kwa">if</span> w <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span> ignore<span class="hl sym">(</span>write src <span class="hl sym">!</span>i0 l w<span class="hl sym">)</span>


<span class="hl kwa">let</span> alu <span class="hl sym">=</span> <span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG\</span>
<span class="hl str">GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA\</span>
<span class="hl str">CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT\</span>
<span class="hl str">ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA\</span>
<span class="hl str">GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG\</span>
<span class="hl str">AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC\</span>
<span class="hl str">AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>

<span class="hl kwa">let</span> iub <span class="hl sym">= [| (</span><span class="hl kwb">'a'</span><span class="hl sym">,</span> <span class="hl num">0.27</span><span class="hl sym">);  (</span><span class="hl kwb">'c'</span><span class="hl sym">,</span> <span class="hl num">0.12</span><span class="hl sym">);  (</span><span class="hl kwb">'g'</span><span class="hl sym">,</span> <span class="hl num">0.12</span><span class="hl sym">);  (</span><span class="hl kwb">'t'</span><span class="hl sym">,</span> <span class="hl num">0.27</span><span class="hl sym">);</span>
	     <span class="hl sym">(</span><span class="hl kwb">'B'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">);  (</span><span class="hl kwb">'D'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">);  (</span><span class="hl kwb">'H'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">);  (</span><span class="hl kwb">'K'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">);</span>
	     <span class="hl sym">(</span><span class="hl kwb">'M'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">);  (</span><span class="hl kwb">'N'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">);  (</span><span class="hl kwb">'R'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">);  (</span><span class="hl kwb">'S'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">);</span>
	     <span class="hl sym">(</span><span class="hl kwb">'V'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">);  (</span><span class="hl kwb">'W'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">);  (</span><span class="hl kwb">'Y'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">);  |]</span>

<span class="hl kwa">let</span> homosapiens <span class="hl sym">= [| (</span><span class="hl kwb">'a'</span><span class="hl sym">,</span> <span class="hl num">0.3029549426680</span><span class="hl sym">);    (</span><span class="hl kwb">'c'</span><span class="hl sym">,</span> <span class="hl num">0.1979883004921</span><span class="hl sym">);</span>
		     <span class="hl sym">(</span><span class="hl kwb">'g'</span><span class="hl sym">,</span> <span class="hl num">0.1975473066391</span><span class="hl sym">);    (</span><span class="hl kwb">'t'</span><span class="hl sym">,</span> <span class="hl num">0.3015094502008</span><span class="hl sym">);  |]</span>

<span class="hl kwa">let</span> <span class="hl sym">() =</span>
  <span class="hl kwa">let</span> n <span class="hl sym">=</span> <span class="hl kwa">try</span> int_of_string<span class="hl sym">(</span><span class="hl kwc">Array</span><span class="hl sym">.</span>get <span class="hl kwc">Sys</span><span class="hl sym">.</span>argv <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">with</span> _ <span class="hl sym">-&gt;</span> <span class="hl num">1000</span> <span class="hl kwa">in</span>
  make_repeat_fasta <span class="hl str">&quot;ONE&quot;</span> <span class="hl str">&quot;Homo sapiens alu&quot;</span> alu <span class="hl sym">(</span>n<span class="hl sym">*</span><span class="hl num">2</span><span class="hl sym">);</span>
  make_random_fasta <span class="hl str">&quot;TWO&quot;</span> <span class="hl str">&quot;IUB ambiguity codes&quot;</span> iub <span class="hl sym">(</span>n<span class="hl sym">*</span><span class="hl num">3</span><span class="hl sym">);</span>
  make_random_fasta <span class="hl str">&quot;THREE&quot;</span> <span class="hl str">&quot;Homo sapiens frequency&quot;</span> homosapiens <span class="hl sym">(</span>n<span class="hl sym">*</span><span class="hl num">5</span><span class="hl sym">)</span>

