
Wed, 01 Sep 2010 16:15:59 GMT

MAKE:
cp: `regexdna.sbcl-3.sbcl' and `./regexdna.sbcl-3.sbcl' are the same file
SBCL built with: /usr/local/bin/sbcl --userinit /dev/null --batch --eval '(load "regexdna.sbcl-3.sbcl_compile")'
### START regexdna.sbcl-3.sbcl_compile
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(handler-bind ((sb-ext:defconstant-uneql      (lambda (c) (abort c))))      (load (compile-file "regexdna.sbcl-3.sbcl" ))) (save-lisp-and-die "sbcl.core" :purify t)
### END regexdna.sbcl-3.sbcl_compile


; compiling file "/home/dunham/shootout/bench/regexdna/regexdna.sbcl-3.sbcl" (written 11 MAR 2009 02:06:35 PM):
; compiling (REQUIRE :ASDF)
; compiling (REQUIRE :CL-PPCRE)
; compiling (DEFINE-ALIEN-ROUTINE SYSCONF ...)
; file: /home/dunham/shootout/bench/regexdna/regexdna.sbcl-3.sbcl
; in: DEFINE-ALIEN-ROUTINE SYSCONF
;     (DEFINE-ALIEN-ROUTINE SYSCONF LONG (NAME INT))
; --> PROGN DEFUN PROGN EVAL-WHEN 
; ==>
;   (SB-IMPL::%DEFUN 'SYSCONF
;                    (SB-INT:NAMED-LAMBDA SYSCONF
;                        (NAME)
;                      (BLOCK SYSCONF
;                        (WITH-ALIEN (#)
;                          (VALUES #))))
;                    NIL 'NIL (SB-C:SOURCE-LOCATION))
; 
; note: doing signed word to integer coercion (cost 20) to "<return value>"

; compiling (USE-PACKAGE :SB-THREAD)
; compiling (DEFCONSTANT +REGEX-LIST+ ...)
; compiling (DEFCONSTANT +ALTERNATIVES+ ...)
; compiling (DEFCONSTANT +CPU-COUNT+ ...)
; compiling (DEFVAR *MUTEX* ...)
; compiling (DEFVAR *AUX-MUTEX* ...)
; compiling (DEFMACRO BG ...)
; compiling (DEFMACRO JOIN-ALL ...)
; compiling (DEFUN READ-ALL ...)
; compiling (DEFUN LENGTH-TO-REPLACE ...)
; compiling (DEFUN REPLACE-AUX ...)
; file: /home/dunham/shootout/bench/regexdna/regexdna.sbcl-3.sbcl
; in: DEFUN REPLACE-AUX
;     (SETF (SUBSEQ RESULT-STRING I) (SUBSEQ TARGET-STRING J (CAR PAIR))
;           I (+ I (- (THE FIXNUM #) J))
;           (SUBSEQ RESULT-STRING I) REPLACEMENT
;           J (CDR PAIR)
;           I (+ I LEN))
; --> PROGN SETF LET* MULTIPLE-VALUE-BIND LET PROGN 
; ==>
;   (REPLACE #:G225 #:G227 :START1 #:G226 :END1 NIL)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The second argument is a VECTOR, not a SIMPLE-BASE-STRING.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The second argument is a VECTOR, not a (SIMPLE-ARRAY CHARACTER (*)).

; compiling (DEFUN PARTS ...)
; file: /home/dunham/shootout/bench/regexdna/regexdna.sbcl-3.sbcl
; in: DEFUN PARTS
;     (FLOOR LEN PARTS-NUM)
; --> BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL FUNCTION IF 
; ==>
;   (VALUES SB-KERNEL::TRU REM)
; 
; note: doing signed word to integer coercion (cost 20)

; ==>
;   (VALUES (1- SB-KERNEL::TRU) (+ REM SB-KERNEL::DIVISOR))
; 
; note: doing signed word to integer coercion (cost 20)
; 
; note: doing signed word to integer coercion (cost 20)

; compiling (DEFUN REPLACE-ALL ...)
; file: /home/dunham/shootout/bench/regexdna/regexdna.sbcl-3.sbcl
; in: DEFUN REPLACE-ALL
;     (CL-PPCRE:DO-SCANS (MATCH-START MATCH-END REG-STARTS REG-ENDS REGEXP
;                         TARGET-STRING NIL)
;       (PUSH (CONS MATCH-START MATCH-END) RMATCH))
; --> LET BLOCK LET* LOOP BLOCK TAGBODY PROGN MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL FUNCTION SETQ THE IF 
; ==>
;   (= MATCH-START MATCH-END)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a SINGLE-FLOAT.
;   The second argument is a NUMBER, not a DOUBLE-FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a DOUBLE-FLOAT.
;   The second argument is a NUMBER, not a SINGLE-FLOAT.
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
;   The second argument is a NUMBER, not a RATIONAL.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
;   The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
;   The second argument is a NUMBER, not a REAL.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a REAL.
;   The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
;   The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
;   The second argument is a NUMBER, not a REAL.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a REAL.
;   The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; note: unable to open code because: The operands might not be the same type.

; --> LET BLOCK LET* LOOP BLOCK TAGBODY PROGN MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL FUNCTION SETQ THE IF 1+ 
; ==>
;   (+ MATCH-END 1)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).

; --> LET BLOCK LET* LOOP BLOCK TAGBODY PROGN MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL FUNCTION SETQ THE IF 
; ==>
;   (= MATCH-START MATCH-END)
; 
; note: forced to do GENERIC-= (cost 10)
;       unable to do inline float comparison (cost 3) because:
;       The first argument is a NUMBER, not a DOUBLE-FLOAT.
;       The second argument is a NUMBER, not a DOUBLE-FLOAT.
;       unable to do inline float comparison (cost 3) because:
;       The first argument is a NUMBER, not a SINGLE-FLOAT.
;       The second argument is a NUMBER, not a SINGLE-FLOAT.

; --> LET BLOCK LET* LOOP BLOCK TAGBODY PROGN MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL FUNCTION SETQ THE IF 1+ 
; ==>
;   (+ MATCH-END 1)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

; compiling (DEFUN MAIN ...); 
; compilation unit finished
;   printed 21 notes


; /home/dunham/benchmarksgame_onecore/regexdna/tmp/regexdna.sbcl-3.fasl written
; compilation finished in 0:00:00.758
[undoing binding stack and other enclosing state... done]
[saving current Lisp image into sbcl.core:
writing 3512 bytes from the read-only space at 0x01000000
writing 2256 bytes from the static space at 0x01100000
writing 29552640 bytes from the dynamic space at 0x09000000
done]
### START regexdna.sbcl-3.sbcl_run
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(main) (quit)
### END regexdna.sbcl-3.sbcl_run

1.38s to complete and log all make actions

COMMAND LINE:
/usr/local/bin/sbcl --noinform --core sbcl.core --userinit /dev/null --load regexdna.sbcl-3.sbcl_run 0 < regexdna-input5000000.txt

TIMED OUT after 3600s


PROGRAM OUTPUT:

Heap exhausted during allocation: 12369920 bytes available, 25000088 requested.
 Gen StaPg UbSta LaSta LUbSt Boxed Unboxed LB   LUB  !move  Alloc  Waste   Trig    WP  GCs Mem-age
   0: 57769     0     0     0  3684     0     0     0    19 14904520 185144  5093328    0   1  0.0000
   1: 57243 34373     0     0  2379     1     0 15968 15994 75097512 55896  2000000 2353   0  0.0000
   2: 58457     0     0     0 11412     1     0 87227 75429 403723624 305816  2000000 11265   0  0.4633
   3:     0     0     0     0     0     0     0     0     0        0     0  2000000    0   0  0.0000
   4:     0     0     0     0     0     0     0     0     0        0     0  2000000    0   0  0.0000
   5:     0     0     0     0     0     0     0     0     0        0     0  2000000    0   0  0.0000
   6:     0     0     0     0  5986  1229     0     0     0 29552640     0  2000000 5945   0  0.0000
   Total bytes allocated    = 523278296
   Dynamic-space-size bytes = 536870912
GC control variables:
   *GC-INHIBIT* = false
   *GC-PENDING* = false
   *STOP-FOR-GC-PENDING* = false

debugger invoked on a SB-KERNEL::HEAP-EXHAUSTED-ERROR in thread #<THREAD
                                                                  RUNNING
                                                                  {DC7C279}>:
  Heap exhausted (no more space for allocation).
There are still 12369920 bytes available; the request was for 25000088 bytes.

PROCEED WITH CAUTION.
