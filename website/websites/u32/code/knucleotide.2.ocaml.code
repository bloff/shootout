<span class="hl com">(* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by Troestler Christophe</span>
<span class="hl com"> * modified by Mauricio Fernandez</span>
<span class="hl com"> *)</span>

<span class="hl kwa">module</span> <span class="hl kwd">C</span><span class="hl sym">(</span><span class="hl kwd">S</span> <span class="hl sym">:</span> <span class="hl kwa">sig</span>
           <span class="hl kwa">val</span> k <span class="hl sym">:</span> <span class="hl kwb">int</span>
           <span class="hl kwa">val</span> dna <span class="hl sym">:</span> <span class="hl kwb">string</span>
         <span class="hl kwa">end</span><span class="hl sym">) =</span>
<span class="hl kwa">struct</span>
  <span class="hl kwa">let</span> dna<span class="hl sym">,</span> k <span class="hl sym">=</span> <span class="hl kwc">S</span><span class="hl sym">.</span>dna<span class="hl sym">,</span> <span class="hl kwc">S</span><span class="hl sym">.</span>k

  <span class="hl kwa">module</span> <span class="hl kwd">K</span> <span class="hl sym">=</span> <span class="hl kwa">struct</span>
    <span class="hl kwa">type</span> t <span class="hl sym">=</span> <span class="hl kwb">int</span>
    <span class="hl kwa">let</span> equal k1 k2 <span class="hl sym">=</span>
      <span class="hl kwa">let rec</span> cmp n ka kb <span class="hl sym">=</span>
        <span class="hl kwa">if</span> n <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">then true</span>
        <span class="hl kwa">else if</span> dna<span class="hl sym">.[</span>ka<span class="hl sym">] =</span> dna<span class="hl sym">.[</span>kb<span class="hl sym">]</span> <span class="hl kwa">then</span> cmp <span class="hl sym">(</span>n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">) (</span>ka <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">) (</span>kb <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
        <span class="hl kwa">else false</span>
      <span class="hl kwa">in</span> cmp k k1 k2

    <span class="hl kwa">let</span> hash n <span class="hl sym">=</span>
      <span class="hl kwa">let</span> h <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">in</span>
        <span class="hl kwa">for</span> i <span class="hl sym">=</span> n <span class="hl kwa">to</span> n <span class="hl sym">+</span> k <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl kwa">do</span> h <span class="hl sym">:= !</span>h <span class="hl sym">*</span> <span class="hl num">5</span> <span class="hl sym">+</span> <span class="hl kwc">Char</span><span class="hl sym">.</span>code dna<span class="hl sym">.[</span>i<span class="hl sym">]</span> <span class="hl kwa">done</span><span class="hl sym">;</span>
        <span class="hl sym">!</span>h
  <span class="hl kwa">end</span>

  <span class="hl kwa">let</span> c <span class="hl sym">=</span> <span class="hl num">0x40000</span>
  <span class="hl kwa">include</span> <span class="hl kwc">Hashtbl</span><span class="hl sym">.</span><span class="hl kwd">Make</span><span class="hl sym">(</span><span class="hl kwd">K</span><span class="hl sym">)</span>
  <span class="hl kwa">let</span> h <span class="hl sym">=</span> create c

  <span class="hl kwa">let</span> count <span class="hl sym">() =</span>
    <span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> <span class="hl kwc">String</span><span class="hl sym">.</span>length dna <span class="hl sym">-</span> k <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl kwa">do</span>
      <span class="hl kwa">try</span> incr <span class="hl sym">(</span>find h i<span class="hl sym">)</span> <span class="hl kwa">with</span> <span class="hl kwd">Not_found</span> <span class="hl sym">-&gt;</span> add h i <span class="hl sym">(</span><span class="hl kwb">ref</span> <span class="hl num">1</span><span class="hl sym">)</span>
    <span class="hl kwa">done</span>

  <span class="hl kwa">let</span> compare_freq <span class="hl sym">((</span>k1<span class="hl sym">:</span><span class="hl kwb">string</span><span class="hl sym">),(</span>f1<span class="hl sym">:</span><span class="hl kwb">float</span><span class="hl sym">)) (</span>k2<span class="hl sym">,</span> f2<span class="hl sym">) =</span>
    <span class="hl kwa">if</span> f1 <span class="hl sym">&gt;</span> f2 <span class="hl kwa">then</span> <span class="hl sym">-</span><span class="hl num">1</span> <span class="hl kwa">else if</span> f1 <span class="hl sym">&lt;</span> f2 <span class="hl kwa">then</span> <span class="hl num">1</span> <span class="hl kwa">else</span> <span class="hl kwc">String</span><span class="hl sym">.</span>compare k1 k2

  <span class="hl kwa">let</span> write_frequencies <span class="hl sym">() =</span>
    count <span class="hl sym">();</span>
    <span class="hl kwa">let</span> tot <span class="hl sym">=</span> <span class="hl kwb">float</span><span class="hl sym">(</span>fold <span class="hl sym">(</span><span class="hl kwa">fun</span> _ n t <span class="hl sym">-&gt; !</span>n <span class="hl sym">+</span> t<span class="hl sym">)</span> h <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">in</span>
    <span class="hl kwa">let</span> frq <span class="hl sym">=</span>
      fold <span class="hl sym">(</span><span class="hl kwa">fun</span> off n l <span class="hl sym">-&gt;</span>
              <span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">.</span>sub dna off k<span class="hl sym">,</span> <span class="hl num">100</span><span class="hl sym">. *.</span> <span class="hl kwb">float</span> <span class="hl sym">!</span>n <span class="hl sym">/.</span> tot<span class="hl sym">) ::</span> l<span class="hl sym">)</span> h <span class="hl sym">[]</span> <span class="hl kwa">in</span>
    <span class="hl kwa">let</span> frq <span class="hl sym">=</span> <span class="hl kwc">List</span><span class="hl sym">.</span>sort compare_freq frq <span class="hl kwa">in</span>
      <span class="hl kwc">String</span><span class="hl sym">.</span>concat <span class="hl str">&quot;&quot;</span>
        <span class="hl sym">(</span><span class="hl kwc">List</span><span class="hl sym">.</span>map <span class="hl sym">(</span><span class="hl kwa">fun</span> <span class="hl sym">(</span>k<span class="hl sym">,</span>f<span class="hl sym">) -&gt;</span> <span class="hl kwc">Printf</span><span class="hl sym">.</span>sprintf <span class="hl str">&quot;%s %.3f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> k f<span class="hl sym">)</span> frq<span class="hl sym">)</span>

  <span class="hl kwa">let</span> write_count seq <span class="hl sym">=</span>
    <span class="hl kwa">assert</span> <span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">.</span>length seq <span class="hl sym">=</span> k<span class="hl sym">);</span>
    count <span class="hl sym">();</span>
    <span class="hl kwc">String</span><span class="hl sym">.</span>blit seq <span class="hl num">0</span> dna <span class="hl num">0</span> k<span class="hl sym">;</span>
    <span class="hl kwc">Printf</span><span class="hl sym">.</span>sprintf <span class="hl str">&quot;%d</span><span class="hl esc">\t</span><span class="hl str">%s&quot;</span> <span class="hl sym">(</span><span class="hl kwa">try</span> <span class="hl sym">!(</span>find h <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">with</span> <span class="hl kwd">Not_found</span> <span class="hl sym">-&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> seq
<span class="hl kwa">end</span>

<span class="hl com">(* Extract DNA sequence &quot;THREE&quot; from stdin *)</span>
<span class="hl kwa">let</span> dna_three <span class="hl sym">=</span>
  <span class="hl kwa">let</span> is_not_three s <span class="hl sym">=</span> <span class="hl kwa">try</span> <span class="hl kwc">String</span><span class="hl sym">.</span>sub s <span class="hl num">0 6</span> <span class="hl sym">&lt;&gt;</span> <span class="hl str">&quot;&gt;THREE&quot;</span> <span class="hl kwa">with</span> _ <span class="hl sym">-&gt;</span> <span class="hl kwa">true in</span>
  <span class="hl kwa">while</span> is_not_three<span class="hl sym">(</span>input_line stdin<span class="hl sym">)</span> <span class="hl kwa">do</span> <span class="hl sym">()</span> <span class="hl kwa">done</span><span class="hl sym">;</span>
  <span class="hl kwa">let</span> buf <span class="hl sym">=</span> <span class="hl kwc">Buffer</span><span class="hl sym">.</span>create <span class="hl num">1000</span> <span class="hl kwa">in</span>
  <span class="hl com">(* Skip possible comment *)</span>
  <span class="hl sym">(</span><span class="hl kwa">try while true do</span>
     <span class="hl kwa">let</span> line <span class="hl sym">=</span> input_line stdin <span class="hl kwa">in</span>
     <span class="hl kwa">if</span> line<span class="hl sym">.[</span><span class="hl num">0</span><span class="hl sym">] &lt;&gt;</span> '<span class="hl sym">;</span>' <span class="hl kwa">then</span>
       <span class="hl sym">(</span><span class="hl kwc">Buffer</span><span class="hl sym">.</span>add_string buf <span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">.</span>uppercase line<span class="hl sym">);</span> raise <span class="hl kwd">Exit</span><span class="hl sym">)</span>
   <span class="hl kwa">done with</span> _ <span class="hl sym">-&gt; ());</span>
  <span class="hl com">(* Read the DNA sequence *)</span>
  <span class="hl sym">(</span><span class="hl kwa">try while true do</span>
       <span class="hl kwa">let</span> line <span class="hl sym">=</span> input_line stdin <span class="hl kwa">in</span>
       <span class="hl kwa">if</span> line<span class="hl sym">.[</span><span class="hl num">0</span><span class="hl sym">] =</span> '<span class="hl sym">&gt;</span>' <span class="hl kwa">then</span> raise <span class="hl kwd">End_of_file</span><span class="hl sym">;</span>
       <span class="hl kwc">Buffer</span><span class="hl sym">.</span>add_string buf <span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">.</span>uppercase line<span class="hl sym">)</span>
   <span class="hl kwa">done with</span> <span class="hl kwd">End_of_file</span> <span class="hl sym">-&gt; ());</span>
  <span class="hl kwc">Buffer</span><span class="hl sym">.</span>contents buf

<span class="hl kwa">let</span> invoke <span class="hl sym">(</span>f <span class="hl sym">:</span> <span class="hl kwb">'a</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">'b</span><span class="hl sym">)</span> x <span class="hl sym">:</span> <span class="hl kwb">unit</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">'b</span> <span class="hl sym">=</span>
  <span class="hl kwa">let</span> input<span class="hl sym">,</span> output <span class="hl sym">=</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>pipe<span class="hl sym">()</span> <span class="hl kwa">in</span>
  <span class="hl kwa">match</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>fork<span class="hl sym">()</span> <span class="hl kwa">with</span>
  <span class="hl sym">| -</span><span class="hl num">1</span> <span class="hl sym">-&gt;</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>close input<span class="hl sym">;</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>close output<span class="hl sym">; (</span><span class="hl kwa">let</span> v <span class="hl sym">=</span> f x <span class="hl kwa">in fun</span> <span class="hl sym">() -&gt;</span> v<span class="hl sym">)</span>
  <span class="hl sym">|</span> <span class="hl num">0</span> <span class="hl sym">-&gt;</span>
      <span class="hl kwc">Unix</span><span class="hl sym">.</span>close input<span class="hl sym">;</span>
      <span class="hl kwa">let</span> output <span class="hl sym">=</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>out_channel_of_descr output <span class="hl kwa">in</span>
        <span class="hl kwc">Marshal</span><span class="hl sym">.</span>to_channel output <span class="hl sym">(</span><span class="hl kwa">try</span> `<span class="hl kwd">Res</span><span class="hl sym">(</span>f x<span class="hl sym">)</span> <span class="hl kwa">with</span> e <span class="hl sym">-&gt;</span> `<span class="hl kwd">Exn</span> e<span class="hl sym">) [];</span>
        close_out output<span class="hl sym">;</span>
        exit <span class="hl num">0</span>
  <span class="hl sym">|</span> pid <span class="hl sym">-&gt;</span>
      <span class="hl kwc">Unix</span><span class="hl sym">.</span>close output<span class="hl sym">;</span>
      <span class="hl kwa">let</span> input <span class="hl sym">=</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>in_channel_of_descr input <span class="hl kwa">in fun</span> <span class="hl sym">() -&gt;</span>
        <span class="hl kwa">let</span> v <span class="hl sym">=</span> <span class="hl kwc">Marshal</span><span class="hl sym">.</span>from_channel input <span class="hl kwa">in</span>
        ignore <span class="hl sym">(</span><span class="hl kwc">Unix</span><span class="hl sym">.</span>waitpid <span class="hl sym">[]</span> pid<span class="hl sym">);</span>
        close_in input<span class="hl sym">;</span>
        <span class="hl kwa">match</span> v <span class="hl kwa">with</span> `<span class="hl kwd">Res</span> x <span class="hl sym">-&gt;</span> x <span class="hl sym">|</span> `<span class="hl kwd">Exn</span> e <span class="hl sym">-&gt;</span> raise e

<span class="hl kwa">let</span> parallelize f l <span class="hl sym">=</span>
  <span class="hl kwc">List</span><span class="hl sym">.</span>iter <span class="hl sym">(</span><span class="hl kwa">fun</span> g <span class="hl sym">-&gt;</span> print_endline <span class="hl sym">(</span>g <span class="hl sym">())) (</span><span class="hl kwc">List</span><span class="hl sym">.</span>map <span class="hl sym">(</span>invoke f<span class="hl sym">)</span> l<span class="hl sym">)</span>

<span class="hl kwa">let</span> <span class="hl sym">() =</span>
  parallelize
    <span class="hl sym">(</span><span class="hl kwa">fun</span> i <span class="hl sym">-&gt;</span>
       <span class="hl kwa">let module</span> <span class="hl kwd">M</span> <span class="hl sym">=</span> <span class="hl kwd">C</span><span class="hl sym">(</span><span class="hl kwa">struct let</span> k <span class="hl sym">=</span> i <span class="hl kwa">let</span> dna <span class="hl sym">=</span> dna_three <span class="hl kwa">end</span><span class="hl sym">)</span> <span class="hl kwa">in</span>
         <span class="hl kwc">M</span><span class="hl sym">.</span>write_frequencies <span class="hl sym">()) [</span><span class="hl num">1</span><span class="hl sym">;</span> <span class="hl num">2</span><span class="hl sym">];</span>
  parallelize
    <span class="hl sym">(</span><span class="hl kwa">fun</span> k <span class="hl sym">-&gt;</span>
       <span class="hl kwa">let module</span> <span class="hl kwd">M</span> <span class="hl sym">=</span> <span class="hl kwd">C</span><span class="hl sym">(</span><span class="hl kwa">struct let</span> k <span class="hl sym">=</span> <span class="hl kwc">String</span><span class="hl sym">.</span>length k <span class="hl kwa">let</span> dna <span class="hl sym">=</span> dna_three <span class="hl kwa">end</span><span class="hl sym">)</span> <span class="hl kwa">in</span>
         <span class="hl kwc">M</span><span class="hl sym">.</span>write_count k<span class="hl sym">)</span>
    <span class="hl sym">[</span><span class="hl str">&quot;GGT&quot;</span><span class="hl sym">;</span> <span class="hl str">&quot;GGTA&quot;</span><span class="hl sym">;</span> <span class="hl str">&quot;GGTATT&quot;</span><span class="hl sym">;</span> <span class="hl str">&quot;GGTATTTTAATT&quot;</span><span class="hl sym">;</span> <span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl sym">]</span>
