<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * based on pidigits.c (by Paolo Bonzini &amp; Sean Bartlett,</span>
<span class="hl com"> *                      modified by Michael Mellor)</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by The Go Authors.</span>
<span class="hl com"> * flag.Arg hack by Isaac Gouy</span>
<span class="hl com"> */</span>

<span class="hl kwa">package</span> main

<span class="hl kwa">import</span> <span class="hl sym">(</span>
   <span class="hl str">&quot;big&quot;</span>
   <span class="hl str">&quot;flag&quot;</span>
   <span class="hl str">&quot;fmt&quot;</span>
   <span class="hl str">&quot;strconv&quot;</span>
<span class="hl sym">)</span>

<span class="hl kwa">var</span> n <span class="hl sym">=</span> <span class="hl num">0</span>
<span class="hl kwa">var</span> silent <span class="hl sym">=</span> false

<span class="hl kwa">var</span> <span class="hl sym">(</span>
	tmp1  <span class="hl sym">=</span> big<span class="hl sym">.</span>NewInt<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
	tmp2  <span class="hl sym">=</span> big<span class="hl sym">.</span>NewInt<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
	y2    <span class="hl sym">=</span> big<span class="hl sym">.</span>NewInt<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
	bigk  <span class="hl sym">=</span> big<span class="hl sym">.</span>NewInt<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
	numer <span class="hl sym">=</span> big<span class="hl sym">.</span>NewInt<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>
	accum <span class="hl sym">=</span> big<span class="hl sym">.</span>NewInt<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
	denom <span class="hl sym">=</span> big<span class="hl sym">.</span>NewInt<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>
	ten   <span class="hl sym">=</span> big<span class="hl sym">.</span>NewInt<span class="hl sym">(</span><span class="hl num">10</span><span class="hl sym">)</span>
<span class="hl sym">)</span>

<span class="hl kwa">func</span> extract_digit<span class="hl sym">()</span> int64 <span class="hl sym">{</span>
	<span class="hl kwa">if</span> numer<span class="hl sym">.</span>Cmp<span class="hl sym">(</span>accum<span class="hl sym">) &gt;</span> <span class="hl num">0</span> <span class="hl sym">{</span>
		<span class="hl kwa">return</span> <span class="hl sym">-</span><span class="hl num">1</span>
	<span class="hl sym">}</span>

	<span class="hl slc">// Compute (numer * 3 + accum) / denom</span>
	tmp1<span class="hl sym">.</span>Lsh<span class="hl sym">(</span>numer<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">)</span>
	tmp1<span class="hl sym">.</span>Add<span class="hl sym">(</span>tmp1<span class="hl sym">,</span> numer<span class="hl sym">)</span>
	tmp1<span class="hl sym">.</span>Add<span class="hl sym">(</span>tmp1<span class="hl sym">,</span> accum<span class="hl sym">)</span>
	tmp1<span class="hl sym">.</span>DivMod<span class="hl sym">(</span>tmp1<span class="hl sym">,</span> denom<span class="hl sym">,</span> tmp2<span class="hl sym">)</span>

	<span class="hl slc">// Now, if (numer * 4 + accum) % denom...</span>
	tmp2<span class="hl sym">.</span>Add<span class="hl sym">(</span>tmp2<span class="hl sym">,</span> numer<span class="hl sym">)</span>

	<span class="hl slc">// ... is normalized, then the two divisions have the same result.</span>
	<span class="hl kwa">if</span> tmp2<span class="hl sym">.</span>Cmp<span class="hl sym">(</span>denom<span class="hl sym">) &gt;=</span> <span class="hl num">0</span> <span class="hl sym">{</span>
		<span class="hl kwa">return</span> <span class="hl sym">-</span><span class="hl num">1</span>
	<span class="hl sym">}</span>

	<span class="hl kwa">return</span> tmp1<span class="hl sym">.</span>Int64<span class="hl sym">()</span>
<span class="hl sym">}</span>

<span class="hl kwa">func</span> next_term<span class="hl sym">(</span>k int64<span class="hl sym">) {</span>
	<span class="hl slc">// TODO(eds) If big.Int ever gets a Scale method, y2 and bigk could be int64</span>
	y2<span class="hl sym">.</span>SetInt64<span class="hl sym">(</span>k<span class="hl sym">*</span><span class="hl num">2</span> <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
	bigk<span class="hl sym">.</span>SetInt64<span class="hl sym">(</span>k<span class="hl sym">)</span>

	tmp1<span class="hl sym">.</span>Lsh<span class="hl sym">(</span>numer<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">)</span>
	accum<span class="hl sym">.</span>Add<span class="hl sym">(</span>accum<span class="hl sym">,</span> tmp1<span class="hl sym">)</span>
	accum<span class="hl sym">.</span>Mul<span class="hl sym">(</span>accum<span class="hl sym">,</span> y2<span class="hl sym">)</span>
	numer<span class="hl sym">.</span>Mul<span class="hl sym">(</span>numer<span class="hl sym">,</span> bigk<span class="hl sym">)</span>
	denom<span class="hl sym">.</span>Mul<span class="hl sym">(</span>denom<span class="hl sym">,</span> y2<span class="hl sym">)</span>
<span class="hl sym">}</span>

<span class="hl kwa">func</span> eliminate_digit<span class="hl sym">(</span>d int64<span class="hl sym">) {</span>
	tmp <span class="hl sym">:=</span> big<span class="hl sym">.</span>NewInt<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">).</span>Set<span class="hl sym">(</span>denom<span class="hl sym">)</span>
	accum<span class="hl sym">.</span>Sub<span class="hl sym">(</span>accum<span class="hl sym">,</span> tmp<span class="hl sym">.</span>Mul<span class="hl sym">(</span>tmp<span class="hl sym">,</span> big<span class="hl sym">.</span>NewInt<span class="hl sym">(</span>d<span class="hl sym">)))</span>
	accum<span class="hl sym">.</span>Mul<span class="hl sym">(</span>accum<span class="hl sym">,</span> ten<span class="hl sym">)</span>
	numer<span class="hl sym">.</span>Mul<span class="hl sym">(</span>numer<span class="hl sym">,</span> ten<span class="hl sym">)</span>
<span class="hl sym">}</span>

<span class="hl kwa">func</span> printf<span class="hl sym">(</span>s string<span class="hl sym">,</span> arg <span class="hl sym">...</span><span class="hl kwa">interface</span><span class="hl sym">{}) {</span>
   <span class="hl kwa">if</span> <span class="hl sym">!</span>silent <span class="hl sym">{</span>
      fmt<span class="hl sym">.</span>Printf<span class="hl sym">(</span>s<span class="hl sym">,</span> arg<span class="hl sym">...)</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwa">func</span> main<span class="hl sym">() {</span>
   flag<span class="hl sym">.</span>Parse<span class="hl sym">()</span>
   <span class="hl kwa">if</span> flag<span class="hl sym">.</span>NArg<span class="hl sym">() &gt;</span> <span class="hl num">0</span> <span class="hl sym">{</span> n<span class="hl sym">,</span>_ <span class="hl sym">=</span> strconv<span class="hl sym">.</span>Atoi<span class="hl sym">(</span> flag<span class="hl sym">.</span>Arg<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">) ) }</span>

   <span class="hl kwa">var</span> m int <span class="hl slc">// 0 &lt;= m &lt; 10</span>
   <span class="hl kwa">for</span> i<span class="hl sym">,</span> k <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">,</span> int64<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">); ; {</span>
      d <span class="hl sym">:=</span> int64<span class="hl sym">(-</span><span class="hl num">1</span><span class="hl sym">)</span>
      <span class="hl kwa">for</span> d <span class="hl sym">&lt;</span> <span class="hl num">0</span> <span class="hl sym">{</span>
         k<span class="hl sym">++</span>
         next_term<span class="hl sym">(</span>k<span class="hl sym">)</span>
         d <span class="hl sym">=</span> extract_digit<span class="hl sym">()</span>
      <span class="hl sym">}</span>

      printf<span class="hl sym">(</span><span class="hl str">&quot;%c&quot;</span><span class="hl sym">,</span> d<span class="hl sym">+</span>'<span class="hl num">0</span>'<span class="hl sym">)</span>

      i<span class="hl sym">++</span>
      m <span class="hl sym">=</span> i <span class="hl sym">%</span> <span class="hl num">10</span>
      <span class="hl kwa">if</span> m <span class="hl sym">==</span> <span class="hl num">0</span> <span class="hl sym">{</span>
         printf<span class="hl sym">(</span><span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">:%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> i<span class="hl sym">)</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">if</span> i <span class="hl sym">&gt;=</span> n <span class="hl sym">{</span>
         <span class="hl kwa">break</span>
      <span class="hl sym">}</span>
      eliminate_digit<span class="hl sym">(</span>d<span class="hl sym">)</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">if</span> m <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl sym">{</span>
      printf<span class="hl sym">(</span><span class="hl str">&quot;%s</span><span class="hl esc">\t</span><span class="hl str">:%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;          &quot;</span><span class="hl sym">[</span>m<span class="hl sym">:</span><span class="hl num">10</span><span class="hl sym">],</span> n<span class="hl sym">)</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>
