
<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Contributed by Jim Rogers</span>
<span class="hl slc">-- Modified by Jonathan Parker (Oct 2009)</span>

<span class="hl kwa">pragma</span> Restrictions <span class="hl sym">(</span>No_Abort_Statements<span class="hl sym">);</span>
<span class="hl kwa">pragma</span> Restrictions <span class="hl sym">(</span>Max_Asynchronous_Select_Nesting <span class="hl sym">=&gt;</span> <span class="hl num">0</span><span class="hl sym">);</span>

<span class="hl kwa">with</span> Ada<span class="hl sym">.</span>Text_Io<span class="hl sym">;</span>
<span class="hl kwa">with</span> Ada<span class="hl sym">.</span>Numerics<span class="hl sym">.</span>Generic_Elementary_Functions<span class="hl sym">;</span>
<span class="hl kwa">with</span> Ada<span class="hl sym">.</span>Command_Line<span class="hl sym">;</span> <span class="hl kwa">use</span> Ada<span class="hl sym">.</span>Command_Line<span class="hl sym">;</span>
<span class="hl kwa">with</span> Spectral_Utils<span class="hl sym">;</span>

<span class="hl kwa">procedure</span> SpectralNorm <span class="hl kwa">is</span>

   <span class="hl kwa">type</span> Real <span class="hl kwa">is digits</span> <span class="hl num">15</span><span class="hl sym">;</span>

   No_of_Cores_to_Use <span class="hl sym">:</span> <span class="hl kwa">constant</span> <span class="hl sym">:=</span> <span class="hl num">4</span><span class="hl sym">;</span>

   <span class="hl kwa">package</span> Real_IO <span class="hl kwa">is new</span> Ada<span class="hl sym">.</span>Text_Io<span class="hl sym">.</span>Float_Io<span class="hl sym">(</span>Real<span class="hl sym">);</span>
   <span class="hl kwa">package</span> Real_Funcs <span class="hl kwa">is new</span> Ada<span class="hl sym">.</span>Numerics<span class="hl sym">.</span>Generic_Elementary_Functions<span class="hl sym">(</span>Real<span class="hl sym">);</span>
   <span class="hl kwa">use</span> Real_Funcs<span class="hl sym">;</span>

   N <span class="hl sym">:</span> <span class="hl kwb">Natural</span> <span class="hl sym">:=</span> <span class="hl num">100</span><span class="hl sym">;</span>
   Vbv<span class="hl sym">,</span> Vv <span class="hl sym">:</span> Real <span class="hl sym">:=</span> <span class="hl num">0.0</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
   <span class="hl kwa">if</span> Argument_Count <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl kwa">then</span>
      N <span class="hl sym">:=</span> <span class="hl kwb">Natural</span>'Value <span class="hl sym">(</span>Argument<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">));</span>
   <span class="hl kwa">end if</span><span class="hl sym">;</span>

   <span class="hl kwa">declare</span>
      <span class="hl kwa">package</span> Spectral_Utilities <span class="hl kwa">is new</span> Spectral_Utils
        <span class="hl sym">(</span>Real<span class="hl sym">,</span> No_of_Tasks <span class="hl sym">=&gt;</span> No_of_Cores_to_Use<span class="hl sym">,</span> Matrix_Size <span class="hl sym">=&gt;</span> N<span class="hl sym">);</span>
      <span class="hl kwa">use</span> Spectral_Utilities<span class="hl sym">;</span>

      U <span class="hl sym">:</span> Matrix <span class="hl sym">:= (</span><span class="hl kwa">Others</span> <span class="hl sym">=&gt;</span> <span class="hl num">1.0</span><span class="hl sym">);</span>
      V <span class="hl sym">:</span> Matrix <span class="hl sym">:= (</span><span class="hl kwa">Others</span> <span class="hl sym">=&gt;</span> <span class="hl num">0.0</span><span class="hl sym">);</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">for</span> I <span class="hl kwa">in</span> <span class="hl num">1</span> <span class="hl sym">..</span> <span class="hl num">10</span> <span class="hl kwa">loop</span>
         Eval_Ata_Times_U<span class="hl sym">(</span>U<span class="hl sym">,</span> V<span class="hl sym">);</span>
         Eval_Ata_Times_U<span class="hl sym">(</span>V<span class="hl sym">,</span> U<span class="hl sym">);</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>
      <span class="hl kwa">for</span> I <span class="hl kwa">in</span> V'<span class="hl kwa">Range loop</span>
         Vbv <span class="hl sym">:=</span> Vbv <span class="hl sym">+</span> U<span class="hl sym">(</span>I<span class="hl sym">) *</span> V<span class="hl sym">(</span>I<span class="hl sym">);</span>
         Vv  <span class="hl sym">:=</span> Vv  <span class="hl sym">+</span> V<span class="hl sym">(</span>I<span class="hl sym">) *</span> V<span class="hl sym">(</span>I<span class="hl sym">);</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>
   <span class="hl kwa">end</span><span class="hl sym">;</span>
   Real_IO<span class="hl sym">.</span>Put<span class="hl sym">(</span>Item <span class="hl sym">=&gt;</span> Sqrt<span class="hl sym">(</span>Vbv<span class="hl sym">/</span>Vv<span class="hl sym">),</span> Fore <span class="hl sym">=&gt;</span> <span class="hl num">1</span><span class="hl sym">,</span> Aft <span class="hl sym">=&gt;</span> <span class="hl num">9</span><span class="hl sym">,</span> Exp <span class="hl sym">=&gt;</span> <span class="hl num">0</span><span class="hl sym">);</span>
   Ada<span class="hl sym">.</span>Text_Io<span class="hl sym">.</span>New_Line<span class="hl sym">;</span>
<span class="hl kwa">end</span> SpectralNorm<span class="hl sym">;</span>

<span class="hl kwa">generic</span>

   <span class="hl kwa">type</span> Real <span class="hl kwa">is digits</span> <span class="hl sym">&lt;&gt;;</span>
   No_Of_Tasks <span class="hl sym">:</span> <span class="hl kwb">Positive</span><span class="hl sym">;</span>
   Matrix_Size <span class="hl sym">:</span> <span class="hl kwb">Positive</span><span class="hl sym">;</span>

<span class="hl kwa">package</span> Spectral_Utils <span class="hl kwa">is</span>

   <span class="hl kwa">type</span> Matrix <span class="hl kwa">is array</span><span class="hl sym">(</span><span class="hl kwb">Natural</span> <span class="hl kwa">range</span> <span class="hl num">0</span> <span class="hl sym">..</span> Matrix_Size<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">of</span> Real<span class="hl sym">;</span>

   <span class="hl slc">--  Evaluate matrix A at indices I, J.</span>

   <span class="hl kwa">function</span> Eval_A<span class="hl sym">(</span>I<span class="hl sym">,</span> J <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">)</span> <span class="hl kwa">return</span> Real<span class="hl sym">;</span>

   <span class="hl slc">--  Get   A_transpose_A_times_U = A_transpose * A * U.</span>

   <span class="hl kwa">procedure</span> Eval_Ata_Times_U
     <span class="hl sym">(</span>U                     <span class="hl sym">:</span> <span class="hl kwa">in</span> Matrix<span class="hl sym">;</span>
      A_transpose_A_times_U <span class="hl sym">:</span> <span class="hl kwa">out</span> Matrix<span class="hl sym">);</span>

   <span class="hl slc">--  Get   AU = A * U.  Calculate only AU(Start .. Finish).</span>

   <span class="hl kwa">procedure</span> Eval_A_Times
     <span class="hl sym">(</span>U      <span class="hl sym">:</span> <span class="hl kwa">in</span>  Matrix<span class="hl sym">;</span>
      Start  <span class="hl sym">:</span> <span class="hl kwa">in</span>  <span class="hl kwb">Natural</span><span class="hl sym">;</span>
      Finish <span class="hl sym">:</span> <span class="hl kwa">in</span>  <span class="hl kwb">Natural</span><span class="hl sym">;</span>
      AU     <span class="hl sym">:</span> <span class="hl kwa">out</span> Matrix<span class="hl sym">);</span>

   <span class="hl slc">--  Get   AU = A_transpose * U.   Calculate only AU(Start .. Finish).</span>

   <span class="hl kwa">procedure</span> Eval_At_Times
     <span class="hl sym">(</span>U      <span class="hl sym">:</span> <span class="hl kwa">in</span>  Matrix<span class="hl sym">;</span>
      Start  <span class="hl sym">:</span> <span class="hl kwa">in</span>  <span class="hl kwb">Natural</span><span class="hl sym">;</span>
      Finish <span class="hl sym">:</span> <span class="hl kwa">in</span>  <span class="hl kwb">Natural</span><span class="hl sym">;</span>
      AU     <span class="hl sym">:</span> <span class="hl kwa">out</span> Matrix<span class="hl sym">);</span>

   <span class="hl kwa">pragma</span> Inline <span class="hl sym">(</span>Eval_A_Times<span class="hl sym">,</span> Eval_At_Times<span class="hl sym">);</span>
   <span class="hl kwa">pragma</span> Inline <span class="hl sym">(</span>Eval_A<span class="hl sym">,</span> Eval_Ata_Times_U<span class="hl sym">);</span>

<span class="hl kwa">end</span> Spectral_Utils<span class="hl sym">;</span>

<span class="hl kwa">package body</span> Spectral_Utils <span class="hl kwa">is</span>

   <span class="hl kwa">function</span> Eval_A <span class="hl sym">(</span>I<span class="hl sym">,</span> J <span class="hl sym">:</span> <span class="hl kwa">in</span> <span class="hl kwb">Natural</span><span class="hl sym">)</span> <span class="hl kwa">return</span> Real <span class="hl kwa">is</span>
      Denom <span class="hl sym">:</span> <span class="hl kwa">constant</span> Real <span class="hl sym">:=</span> Real <span class="hl sym">(((</span>I <span class="hl sym">+</span> J<span class="hl sym">) * (</span>I <span class="hl sym">+</span> J <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)) /</span> <span class="hl num">2</span> <span class="hl sym">+</span> I <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">);</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">return</span> <span class="hl num">1.0</span> <span class="hl sym">/</span> Denom<span class="hl sym">;</span>
   <span class="hl kwa">end</span> Eval_A<span class="hl sym">;</span>

   <span class="hl kwa">type</span> A_Element_Pair <span class="hl kwa">is array</span> <span class="hl sym">(</span><span class="hl num">0</span> <span class="hl sym">..</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">of</span> Real<span class="hl sym">;</span>

   <span class="hl slc">-- Evaluate matrix A twice - at (I,J) and (I,J+1):</span>

   <span class="hl kwa">function</span> Eval_A_Twice <span class="hl sym">(</span>I<span class="hl sym">,</span> J <span class="hl sym">:</span> <span class="hl kwa">in</span> <span class="hl kwb">Integer</span><span class="hl sym">)</span> <span class="hl kwa">return</span> A_Element_Pair <span class="hl kwa">is</span>
      Denom_0 <span class="hl sym">:</span> <span class="hl kwa">constant</span> Real <span class="hl sym">:=</span> Real <span class="hl sym">((</span>I <span class="hl sym">+</span> J    <span class="hl sym">)*(</span>I <span class="hl sym">+</span> J <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)/</span><span class="hl num">2</span> <span class="hl sym">+</span> I <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">);</span>
      Denom_1 <span class="hl sym">:</span> <span class="hl kwa">constant</span> Real <span class="hl sym">:=</span> Real <span class="hl sym">((</span>I <span class="hl sym">+</span> J <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)*(</span>I <span class="hl sym">+</span> J <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">)/</span><span class="hl num">2</span> <span class="hl sym">+</span> I <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">);</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">return</span> <span class="hl sym">(</span><span class="hl num">1.0</span> <span class="hl sym">/</span> Denom_0<span class="hl sym">,</span> <span class="hl num">1.0</span> <span class="hl sym">/</span> Denom_1<span class="hl sym">);</span>
   <span class="hl kwa">end</span> Eval_A_Twice<span class="hl sym">;</span>

   <span class="hl slc">-- Evaluate A_transpose (indices I and J swapped):</span>

   <span class="hl kwa">function</span> Eval_A_tr_Twice <span class="hl sym">(</span>I<span class="hl sym">,</span> J <span class="hl sym">:</span> <span class="hl kwa">in</span> <span class="hl kwb">Integer</span><span class="hl sym">)</span> <span class="hl kwa">return</span> A_Element_Pair <span class="hl kwa">is</span>
      Denom_0 <span class="hl sym">:</span> <span class="hl kwa">constant</span> Real <span class="hl sym">:=</span> Real <span class="hl sym">((</span>I <span class="hl sym">+</span> J    <span class="hl sym">)*(</span>I <span class="hl sym">+</span> J <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)/</span><span class="hl num">2</span> <span class="hl sym">+</span> J <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">);</span>
      Denom_1 <span class="hl sym">:</span> <span class="hl kwa">constant</span> Real <span class="hl sym">:=</span> Real <span class="hl sym">((</span>I <span class="hl sym">+</span> J <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)*(</span>I <span class="hl sym">+</span> J <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">)/</span><span class="hl num">2</span> <span class="hl sym">+</span> J <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">);</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">return</span> <span class="hl sym">(</span><span class="hl num">1.0</span> <span class="hl sym">/</span> Denom_0<span class="hl sym">,</span> <span class="hl num">1.0</span> <span class="hl sym">/</span> Denom_1<span class="hl sym">);</span>
   <span class="hl kwa">end</span> Eval_A_tr_Twice<span class="hl sym">;</span>

   <span class="hl kwa">procedure</span> Eval_A_Times
     <span class="hl sym">(</span>U      <span class="hl sym">:</span> <span class="hl kwa">in</span>  Matrix<span class="hl sym">;</span>
      Start  <span class="hl sym">:</span> <span class="hl kwa">in</span>  <span class="hl kwb">Natural</span><span class="hl sym">;</span>
      Finish <span class="hl sym">:</span> <span class="hl kwa">in</span>  <span class="hl kwb">Natural</span><span class="hl sym">;</span>
      Au     <span class="hl sym">:</span> <span class="hl kwa">out</span> Matrix<span class="hl sym">)</span>
   <span class="hl kwa">is</span>
      Sum <span class="hl sym">:</span> Real<span class="hl sym">;</span>
      J_Index <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span>
      A_Elements <span class="hl sym">:</span> A_Element_Pair<span class="hl sym">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">for</span> I <span class="hl kwa">in</span> Start <span class="hl sym">..</span> Finish <span class="hl kwa">loop</span>
         Sum <span class="hl sym">:=</span> <span class="hl num">0.0</span><span class="hl sym">;</span>
         <span class="hl kwa">for</span> J <span class="hl kwa">in</span> <span class="hl kwb">Natural</span> <span class="hl kwa">range</span> <span class="hl num">0</span> <span class="hl sym">..</span> U'Length<span class="hl sym">/</span><span class="hl num">2</span> <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl kwa">loop</span>
            J_Index    <span class="hl sym">:=</span> U'First <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">*</span>J<span class="hl sym">;</span>
            A_Elements <span class="hl sym">:=</span> Eval_A_Twice <span class="hl sym">(</span>I<span class="hl sym">,</span> J_Index<span class="hl sym">);</span>
            Sum <span class="hl sym">:=</span> Sum <span class="hl sym">+</span> A_Elements<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)*</span>U<span class="hl sym">(</span>J_Index<span class="hl sym">) +</span> A_Elements<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)*</span>U<span class="hl sym">(</span>J_Index<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">);</span>
         <span class="hl kwa">end loop</span><span class="hl sym">;</span>
         <span class="hl kwa">if</span> U'Length <span class="hl kwa">mod</span> <span class="hl num">2</span> <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl kwa">then</span>
            Sum <span class="hl sym">:=</span> Sum <span class="hl sym">+</span> Eval_A<span class="hl sym">(</span>I<span class="hl sym">,</span> U'Last<span class="hl sym">) *</span> U<span class="hl sym">(</span>U'Last<span class="hl sym">);</span> <span class="hl slc">-- J_Index := U'Last;</span>
         <span class="hl kwa">end if</span><span class="hl sym">;</span>
         Au<span class="hl sym">(</span>I<span class="hl sym">) :=</span> Sum<span class="hl sym">;</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>
   <span class="hl kwa">end</span> Eval_A_Times<span class="hl sym">;</span>


   <span class="hl kwa">procedure</span> Eval_At_Times
     <span class="hl sym">(</span>U      <span class="hl sym">:</span> <span class="hl kwa">in</span>  Matrix<span class="hl sym">;</span>
      Start  <span class="hl sym">:</span> <span class="hl kwa">in</span>  <span class="hl kwb">Natural</span><span class="hl sym">;</span>
      Finish <span class="hl sym">:</span> <span class="hl kwa">in</span>  <span class="hl kwb">Natural</span><span class="hl sym">;</span>
      Au     <span class="hl sym">:</span> <span class="hl kwa">out</span> Matrix<span class="hl sym">)</span>
   <span class="hl kwa">is</span>
      Sum <span class="hl sym">:</span> Real<span class="hl sym">;</span>
      J_Index <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span>
      A_Elements <span class="hl sym">:</span> A_Element_Pair<span class="hl sym">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">for</span> I <span class="hl kwa">in</span> Start <span class="hl sym">..</span> Finish <span class="hl kwa">loop</span>
         Sum <span class="hl sym">:=</span> <span class="hl num">0.0</span><span class="hl sym">;</span>
         <span class="hl kwa">for</span> J <span class="hl kwa">in</span> <span class="hl kwb">Natural</span> <span class="hl kwa">range</span> <span class="hl num">0</span> <span class="hl sym">..</span> U'Length<span class="hl sym">/</span><span class="hl num">2</span> <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl kwa">loop</span>
            J_Index    <span class="hl sym">:=</span> U'First <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">*</span>J<span class="hl sym">;</span>
            A_Elements <span class="hl sym">:=</span> Eval_A_tr_Twice <span class="hl sym">(</span>I<span class="hl sym">,</span> J_Index<span class="hl sym">);</span>
            Sum <span class="hl sym">:=</span> Sum <span class="hl sym">+</span> A_Elements<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)*</span>U<span class="hl sym">(</span>J_Index<span class="hl sym">) +</span> A_Elements<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)*</span>U<span class="hl sym">(</span>J_Index<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">);</span>
         <span class="hl kwa">end loop</span><span class="hl sym">;</span>
         <span class="hl kwa">if</span> U'Length <span class="hl kwa">mod</span> <span class="hl num">2</span> <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl kwa">then</span>
            Sum <span class="hl sym">:=</span> Sum <span class="hl sym">+</span> Eval_A <span class="hl sym">(</span>U'Last<span class="hl sym">,</span> I<span class="hl sym">) *</span> U<span class="hl sym">(</span>U'Last<span class="hl sym">);</span> <span class="hl slc">-- J_Index := U'Last;</span>
         <span class="hl kwa">end if</span><span class="hl sym">;</span>
         Au<span class="hl sym">(</span>I<span class="hl sym">) :=</span> Sum<span class="hl sym">;</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>
   <span class="hl kwa">end</span> Eval_At_Times<span class="hl sym">;</span>


   <span class="hl slc">-- Calculate A * U</span>

   <span class="hl kwa">task type</span> Matrix_A_times_U <span class="hl kwa">is</span>
      <span class="hl kwa">pragma</span> Storage_Size <span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">**</span><span class="hl num">20</span><span class="hl sym">);</span>
      <span class="hl kwa">entry</span> Multiply <span class="hl sym">(</span>U <span class="hl sym">:</span> <span class="hl kwa">in</span> Matrix<span class="hl sym">;</span> Start <span class="hl sym">:</span> <span class="hl kwa">in</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span> Finish <span class="hl sym">:</span> <span class="hl kwa">in</span> <span class="hl kwb">Natural</span><span class="hl sym">);</span>
      <span class="hl kwa">entry</span> Result <span class="hl sym">(</span>Start <span class="hl sym">:</span> <span class="hl kwa">out</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span> Finish <span class="hl sym">:</span> <span class="hl kwa">out</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span> R <span class="hl sym">:</span> <span class="hl kwa">out</span> Matrix<span class="hl sym">);</span>
   <span class="hl kwa">end</span> Matrix_A_times_U<span class="hl sym">;</span>

   <span class="hl kwa">task body</span> Matrix_A_times_U <span class="hl kwa">is</span>
      I1<span class="hl sym">,</span> I2 <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span>
      AU<span class="hl sym">,</span> U_local <span class="hl sym">:</span> Matrix<span class="hl sym">;</span>
   <span class="hl kwa">begin</span>
     <span class="hl kwa">loop</span>
     <span class="hl kwa">select</span>
        <span class="hl kwa">accept</span> Multiply <span class="hl sym">(</span>U <span class="hl sym">:</span> <span class="hl kwa">in</span> Matrix<span class="hl sym">;</span> Start <span class="hl sym">:</span> <span class="hl kwa">in</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span> Finish <span class="hl sym">:</span> <span class="hl kwa">in</span> <span class="hl kwb">Natural</span><span class="hl sym">)</span> <span class="hl kwa">do</span>
           I1 <span class="hl sym">:=</span> Start<span class="hl sym">;</span>
           I2 <span class="hl sym">:=</span> Finish<span class="hl sym">;</span>
           U_local <span class="hl sym">:=</span> U<span class="hl sym">;</span>
        <span class="hl kwa">end</span> Multiply<span class="hl sym">;</span>

        Eval_A_Times <span class="hl sym">(</span>U_local<span class="hl sym">,</span> I1<span class="hl sym">,</span> I2<span class="hl sym">,</span> AU<span class="hl sym">);</span> <span class="hl slc">-- updates AU(I1..I2)</span>

        <span class="hl kwa">accept</span> Result <span class="hl sym">(</span>Start <span class="hl sym">:</span> <span class="hl kwa">out</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span> Finish <span class="hl sym">:</span> <span class="hl kwa">out</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span> R <span class="hl sym">:</span> <span class="hl kwa">out</span> Matrix<span class="hl sym">)</span> <span class="hl kwa">do</span>
           Start  <span class="hl sym">:=</span> I1<span class="hl sym">;</span>
           Finish <span class="hl sym">:=</span> I2<span class="hl sym">;</span>
           R<span class="hl sym">(</span>Start <span class="hl sym">..</span> Finish<span class="hl sym">) :=</span> AU<span class="hl sym">(</span>Start <span class="hl sym">..</span> Finish<span class="hl sym">);</span>
        <span class="hl kwa">end</span> Result<span class="hl sym">;</span>
     <span class="hl kwa">or</span>
        <span class="hl kwa">terminate</span><span class="hl sym">;</span>
     <span class="hl kwa">end select</span><span class="hl sym">;</span>
     <span class="hl kwa">end loop</span><span class="hl sym">;</span>
   <span class="hl kwa">end</span> Matrix_A_times_U<span class="hl sym">;</span>


   <span class="hl slc">-- Calculate A_transpose * V</span>

   <span class="hl kwa">task type</span> Matrix_A_tr_times_V <span class="hl kwa">is</span>
      <span class="hl kwa">pragma</span> Storage_Size <span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">**</span><span class="hl num">20</span><span class="hl sym">);</span>
      <span class="hl kwa">entry</span> Multiply <span class="hl sym">(</span>V <span class="hl sym">:</span> <span class="hl kwa">in</span> Matrix<span class="hl sym">;</span> Start <span class="hl sym">:</span> <span class="hl kwa">in</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span> Finish <span class="hl sym">:</span> <span class="hl kwa">in</span> <span class="hl kwb">Natural</span><span class="hl sym">);</span>
      <span class="hl kwa">entry</span> Result <span class="hl sym">(</span>Start <span class="hl sym">:</span> <span class="hl kwa">out</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span> Finish <span class="hl sym">:</span> <span class="hl kwa">out</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span> R <span class="hl sym">:</span> <span class="hl kwa">out</span> Matrix<span class="hl sym">);</span>
   <span class="hl kwa">end</span> Matrix_A_tr_times_V<span class="hl sym">;</span>

   <span class="hl kwa">task body</span> Matrix_A_tr_times_V <span class="hl kwa">is</span>
      I1<span class="hl sym">,</span> I2 <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span>
      AV<span class="hl sym">,</span> V_local <span class="hl sym">:</span> Matrix<span class="hl sym">;</span>
   <span class="hl kwa">begin</span>
     <span class="hl kwa">loop</span>
     <span class="hl kwa">select</span>
        <span class="hl kwa">accept</span> Multiply <span class="hl sym">(</span>V <span class="hl sym">:</span> <span class="hl kwa">in</span> Matrix<span class="hl sym">;</span> Start <span class="hl sym">:</span> <span class="hl kwa">in</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span> Finish <span class="hl sym">:</span> <span class="hl kwa">in</span> <span class="hl kwb">Natural</span><span class="hl sym">)</span> <span class="hl kwa">do</span>
           I1 <span class="hl sym">:=</span> Start<span class="hl sym">;</span>
           I2 <span class="hl sym">:=</span> Finish<span class="hl sym">;</span>
           V_local <span class="hl sym">:=</span> V<span class="hl sym">;</span>
        <span class="hl kwa">end</span> Multiply<span class="hl sym">;</span>

        Eval_At_Times <span class="hl sym">(</span>V_local<span class="hl sym">,</span> I1<span class="hl sym">,</span> I2<span class="hl sym">,</span> AV<span class="hl sym">);</span>  <span class="hl slc">-- AV = A_transpose * V_local</span>

        <span class="hl kwa">accept</span> Result <span class="hl sym">(</span>Start <span class="hl sym">:</span> <span class="hl kwa">out</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span> Finish <span class="hl sym">:</span> <span class="hl kwa">out</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span> R <span class="hl sym">:</span> <span class="hl kwa">out</span> Matrix<span class="hl sym">)</span> <span class="hl kwa">do</span>
           Start  <span class="hl sym">:=</span> I1<span class="hl sym">;</span>
           Finish <span class="hl sym">:=</span> I2<span class="hl sym">;</span>
           R<span class="hl sym">(</span>Start <span class="hl sym">..</span> Finish<span class="hl sym">) :=</span> AV<span class="hl sym">(</span>Start <span class="hl sym">..</span> Finish<span class="hl sym">);</span>
        <span class="hl kwa">end</span> Result<span class="hl sym">;</span>
     <span class="hl kwa">or</span>
        <span class="hl kwa">terminate</span><span class="hl sym">;</span>
     <span class="hl kwa">end select</span><span class="hl sym">;</span>
     <span class="hl kwa">end loop</span><span class="hl sym">;</span>
   <span class="hl kwa">end</span> Matrix_A_tr_times_V<span class="hl sym">;</span>


   <span class="hl slc">-- Create (No_Of_Tasks-1) tasks. The final task is the environmental task,</span>
   <span class="hl slc">-- which does its fair share of the work in procedure Eval_Ata_Times_U.</span>

   <span class="hl kwa">subtype</span> Task_Range <span class="hl kwa">is</span> <span class="hl kwb">Positive</span> <span class="hl kwa">range</span> <span class="hl num">1</span> <span class="hl sym">..</span> No_Of_Tasks<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">;</span>

   Partial_Matrix_A_times_U    <span class="hl sym">:</span> <span class="hl kwa">array</span> <span class="hl sym">(</span>Task_Range<span class="hl sym">)</span> <span class="hl kwa">of</span> Matrix_A_times_U<span class="hl sym">;</span>
   Partial_Matrix_A_tr_times_V <span class="hl sym">:</span> <span class="hl kwa">array</span> <span class="hl sym">(</span>Task_Range<span class="hl sym">)</span> <span class="hl kwa">of</span> Matrix_A_tr_times_V<span class="hl sym">;</span>


   <span class="hl kwa">procedure</span> Eval_Ata_Times_U
     <span class="hl sym">(</span>U                     <span class="hl sym">:</span> <span class="hl kwa">in</span>  Matrix<span class="hl sym">;</span>
      A_transpose_A_times_U <span class="hl sym">:</span> <span class="hl kwa">out</span> Matrix<span class="hl sym">)</span>
   <span class="hl kwa">is</span>
      V<span class="hl sym">,</span> Partial_Product <span class="hl sym">:</span> Matrix<span class="hl sym">;</span>

      Segment_Length <span class="hl sym">:</span> <span class="hl kwa">constant</span> <span class="hl kwb">Integer</span> <span class="hl sym">:=</span> U'Length <span class="hl sym">/</span> No_Of_Tasks <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl slc">-- Gives the 1st few tasks a slightly greater share of the work.</span>

      I1<span class="hl sym">,</span> I2<span class="hl sym">,</span> J1<span class="hl sym">,</span> J2 <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span>
   <span class="hl kwa">begin</span>
      I1 <span class="hl sym">:=</span> V'First<span class="hl sym">;</span>
      I2 <span class="hl sym">:=</span> V'First <span class="hl sym">+</span> Segment_Length <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>
      I2 <span class="hl sym">:=</span> <span class="hl kwb">Integer</span>'Min <span class="hl sym">(</span>I2<span class="hl sym">,</span> V'Last<span class="hl sym">);</span>

      <span class="hl slc">-- Start running the tasks in Task_Range:</span>

      <span class="hl kwa">for</span> k <span class="hl kwa">in</span> Task_Range <span class="hl kwa">loop</span>
         Partial_Matrix_A_times_U<span class="hl sym">(</span>k<span class="hl sym">).</span>Multiply <span class="hl sym">(</span>U<span class="hl sym">,</span> I1<span class="hl sym">,</span> I2<span class="hl sym">);</span>
         I1 <span class="hl sym">:=</span> I2 <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
         I2 <span class="hl sym">:=</span> I2 <span class="hl sym">+</span> Segment_Length<span class="hl sym">;</span>
         I2 <span class="hl sym">:=</span> <span class="hl kwb">Integer</span>'Min <span class="hl sym">(</span>I2<span class="hl sym">,</span> V'Last<span class="hl sym">);</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>

      Eval_A_Times <span class="hl sym">(</span>U<span class="hl sym">,</span> I1<span class="hl sym">,</span> V'Last<span class="hl sym">,</span> V<span class="hl sym">);</span> <span class="hl slc">-- Env task updates V(I1 .. V'Last).</span>

      <span class="hl slc">-- Rendezvous with tasks to get partial results. Write results to V:</span>

      <span class="hl kwa">for</span> k <span class="hl kwa">in</span> Task_Range <span class="hl kwa">loop</span>
         Partial_Matrix_A_times_U<span class="hl sym">(</span>k<span class="hl sym">).</span>Result <span class="hl sym">(</span>J1<span class="hl sym">,</span> J2<span class="hl sym">,</span> Partial_Product<span class="hl sym">);</span>
         V<span class="hl sym">(</span>J1 <span class="hl sym">..</span> J2<span class="hl sym">) :=</span> Partial_Product<span class="hl sym">(</span>J1 <span class="hl sym">..</span> J2<span class="hl sym">);</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>

      <span class="hl slc">-- The result, stored in V, is A*U. Next get A_transpose * (A*U).</span>

      I1 <span class="hl sym">:=</span> V'First<span class="hl sym">;</span>
      I2 <span class="hl sym">:=</span> V'First <span class="hl sym">+</span> Segment_Length <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>
      I2 <span class="hl sym">:=</span> <span class="hl kwb">Integer</span>'Min <span class="hl sym">(</span>I2<span class="hl sym">,</span> V'Last<span class="hl sym">);</span>

      <span class="hl kwa">for</span> k <span class="hl kwa">in</span> Task_Range <span class="hl kwa">loop</span>
         Partial_Matrix_A_tr_times_V<span class="hl sym">(</span>k<span class="hl sym">).</span>Multiply <span class="hl sym">(</span>V<span class="hl sym">,</span> I1<span class="hl sym">,</span> I2<span class="hl sym">);</span>
         I1 <span class="hl sym">:=</span> I2 <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
         I2 <span class="hl sym">:=</span> I2 <span class="hl sym">+</span> Segment_Length<span class="hl sym">;</span>
         I2 <span class="hl sym">:=</span> <span class="hl kwb">Integer</span>'Min <span class="hl sym">(</span>I2<span class="hl sym">,</span> V'Last<span class="hl sym">);</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>

      Eval_At_Times <span class="hl sym">(</span>V<span class="hl sym">,</span> I1<span class="hl sym">,</span> V'Last<span class="hl sym">,</span> A_transpose_A_times_U<span class="hl sym">);</span>
      <span class="hl slc">-- Env. task updates A_transpose_A_times_U (I1 .. V'Last).</span>

      <span class="hl kwa">for</span> k <span class="hl kwa">in</span> Task_Range <span class="hl kwa">loop</span>
         Partial_Matrix_A_tr_times_V<span class="hl sym">(</span>k<span class="hl sym">).</span>Result <span class="hl sym">(</span>J1<span class="hl sym">,</span> J2<span class="hl sym">,</span> Partial_Product<span class="hl sym">);</span>
         A_transpose_A_times_U<span class="hl sym">(</span>J1 <span class="hl sym">..</span> J2<span class="hl sym">) :=</span> Partial_Product<span class="hl sym">(</span>J1 <span class="hl sym">..</span> J2<span class="hl sym">);</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>

   <span class="hl kwa">end</span> Eval_Ata_Times_U<span class="hl sym">;</span>

<span class="hl kwa">end</span> Spectral_Utils<span class="hl sym">;</span>


