<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   Scala translation contributed by Rex Kerr;</span>
<span class="hl com">   based on Java original by Michael Barker.</span>
<span class="hl com">*/</span>


<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span>concurrent<span class="hl sym">.</span>_<span class="hl sym">;</span>
<span class="hl kwa">import</span> atomic<span class="hl sym">.</span>_<span class="hl sym">;</span>

<span class="hl kwa">object</span> chameneosredux <span class="hl sym">{</span>
  <span class="hl kwa">object</span> <span class="hl kwc">Color</span> <span class="hl kwa">extends</span> <span class="hl kwc">Enumeration</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl str">&quot;blue&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;red&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;yellow&quot;</span><span class="hl sym">) {</span>
    <span class="hl kwa">val</span> Blue<span class="hl sym">,</span>Red<span class="hl sym">,</span>Yellow <span class="hl sym">=</span> Value
    <span class="hl kwa">def</span> doComplement<span class="hl sym">(</span>c1<span class="hl sym">:</span> Value<span class="hl sym">,</span> c2<span class="hl sym">:</span> Value<span class="hl sym">) =</span> c1 match <span class="hl sym">{</span>
      <span class="hl kwa">case</span> Blue <span class="hl sym">=&gt;</span> c2 match <span class="hl sym">{</span>
        <span class="hl kwa">case</span> Blue <span class="hl sym">=&gt;</span> Blue
        <span class="hl kwa">case</span> Red <span class="hl sym">=&gt;</span> Yellow
        <span class="hl kwa">case</span> Yellow <span class="hl sym">=&gt;</span> Red
      <span class="hl sym">}</span>
      <span class="hl kwa">case</span> Red <span class="hl sym">=&gt;</span> c2 match <span class="hl sym">{</span>
        <span class="hl kwa">case</span> Blue <span class="hl sym">=&gt;</span> Yellow
        <span class="hl kwa">case</span> Red <span class="hl sym">=&gt;</span> Red
        <span class="hl kwa">case</span> Yellow <span class="hl sym">=&gt;</span> Blue
      <span class="hl sym">}</span>
      <span class="hl kwa">case</span> Yellow <span class="hl sym">=&gt;</span> c2 match <span class="hl sym">{</span>
        <span class="hl kwa">case</span> Blue <span class="hl sym">=&gt;</span> Red
        <span class="hl kwa">case</span> Red <span class="hl sym">=&gt;</span> Blue
        <span class="hl kwa">case</span> Yellow <span class="hl sym">=&gt;</span> Yellow
      <span class="hl sym">}</span>
    <span class="hl sym">}</span>
    <span class="hl kwa">def</span> printColors <span class="hl sym">{</span>
      <span class="hl kwc">Color</span><span class="hl sym">.</span>foreach<span class="hl sym">(</span>c1 <span class="hl sym">=&gt;</span> <span class="hl kwc">Color</span><span class="hl sym">.</span>foreach<span class="hl sym">(</span>c2 <span class="hl sym">=&gt; {</span>
        println<span class="hl sym">(</span>c1 <span class="hl sym">+</span> <span class="hl str">&quot; + &quot;</span> <span class="hl sym">+</span> c2 <span class="hl sym">+</span> <span class="hl str">&quot; -&gt; &quot;</span> <span class="hl sym">+</span> doComplement<span class="hl sym">(</span>c1<span class="hl sym">,</span>c2<span class="hl sym">))</span>
      <span class="hl sym">}))</span>
    <span class="hl sym">}</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">object</span> Verbalize <span class="hl sym">{</span>
    <span class="hl kwa">val</span> digit <span class="hl sym">=</span> <span class="hl kwc">Map</span><span class="hl sym">(</span><span class="hl str">'0'</span><span class="hl sym">-&gt;</span><span class="hl str">&quot;zero&quot;</span><span class="hl sym">,</span><span class="hl str">'1'</span><span class="hl sym">-&gt;</span><span class="hl str">&quot;one&quot;</span><span class="hl sym">,</span><span class="hl str">'2'</span><span class="hl sym">-&gt;</span><span class="hl str">&quot;two&quot;</span><span class="hl sym">,</span><span class="hl str">'3'</span><span class="hl sym">-&gt;</span><span class="hl str">&quot;three&quot;</span><span class="hl sym">,</span><span class="hl str">'4'</span><span class="hl sym">-&gt;</span><span class="hl str">&quot;four&quot;</span><span class="hl sym">,</span>
                    <span class="hl str">'5'</span><span class="hl sym">-&gt;</span><span class="hl str">&quot;five&quot;</span><span class="hl sym">,</span><span class="hl str">'6'</span><span class="hl sym">-&gt;</span><span class="hl str">&quot;six&quot;</span><span class="hl sym">,</span><span class="hl str">'7'</span><span class="hl sym">-&gt;</span><span class="hl str">&quot;seven&quot;</span><span class="hl sym">,</span><span class="hl str">'8'</span><span class="hl sym">-&gt;</span><span class="hl str">&quot;eight&quot;</span><span class="hl sym">,</span><span class="hl str">'9'</span><span class="hl sym">-&gt;</span><span class="hl str">&quot;nine&quot;</span><span class="hl sym">)</span>
    <span class="hl kwa">def</span> apply<span class="hl sym">(</span>n<span class="hl sym">:</span> Int<span class="hl sym">) =</span> n<span class="hl sym">.</span>toString<span class="hl sym">.</span>toList<span class="hl sym">.</span>map<span class="hl sym">(</span>c<span class="hl sym">=&gt;</span><span class="hl str">&quot; &quot;</span><span class="hl sym">+</span>digit<span class="hl sym">(</span>c<span class="hl sym">)).</span>mkString
  <span class="hl sym">}</span>

  <span class="hl kwa">class</span> MeetingPlace<span class="hl sym">(</span>meetings<span class="hl sym">:</span> Int<span class="hl sym">) {</span>
    <span class="hl kwa">private val</span> meetingsLeft <span class="hl sym">=</span> <span class="hl kwa">new</span> atomic<span class="hl sym">.</span><span class="hl kwc">AtomicInteger</span><span class="hl sym">(</span>meetings<span class="hl sym">)</span>
    <span class="hl kwa">private val</span> creatureRef <span class="hl sym">=</span> <span class="hl kwa">new</span> atomic<span class="hl sym">.</span><span class="hl kwc">AtomicReference</span><span class="hl sym">[</span>Creature<span class="hl sym">]</span>

    <span class="hl kwa">def</span> meet<span class="hl sym">(</span>incoming<span class="hl sym">:</span> Creature<span class="hl sym">) {</span>
      <span class="hl kwa">val</span> existing <span class="hl sym">=</span> creatureRef<span class="hl sym">.</span>get
      <span class="hl kwa">if</span> <span class="hl sym">(</span>existing <span class="hl sym">==</span> null<span class="hl sym">) {</span>
        <span class="hl kwa">if</span> <span class="hl sym">(!</span>creatureRef<span class="hl sym">.</span>compareAndSet<span class="hl sym">(</span>existing<span class="hl sym">,</span>incoming<span class="hl sym">))</span> meet<span class="hl sym">(</span>incoming<span class="hl sym">);</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">else</span> <span class="hl sym">{</span>
        <span class="hl kwa">val</span> newColor <span class="hl sym">=</span> <span class="hl kwc">Color</span><span class="hl sym">.</span>doComplement<span class="hl sym">(</span>incoming<span class="hl sym">.</span>color<span class="hl sym">,</span>existing<span class="hl sym">.</span>color<span class="hl sym">)</span>      
        <span class="hl kwa">if</span> <span class="hl sym">(!</span>creatureRef<span class="hl sym">.</span>compareAndSet<span class="hl sym">(</span>existing<span class="hl sym">,</span>null<span class="hl sym">))</span> meet<span class="hl sym">(</span>incoming<span class="hl sym">);</span>
        <span class="hl kwa">else</span> <span class="hl sym">{</span>
          meetingsLeft<span class="hl sym">.</span>getAndDecrement<span class="hl sym">()</span> match <span class="hl sym">{</span>
            <span class="hl kwa">case</span> x <span class="hl kwa">if</span> <span class="hl sym">(</span>x<span class="hl sym">&gt;</span><span class="hl num">0</span><span class="hl sym">) =&gt;</span>
              existing<span class="hl sym">.</span>setColor<span class="hl sym">(</span>incoming<span class="hl sym">.</span>id<span class="hl sym">,</span> newColor<span class="hl sym">,</span> x<span class="hl sym">==</span><span class="hl num">1</span><span class="hl sym">);</span>
              incoming<span class="hl sym">.</span>setColor<span class="hl sym">(</span>existing<span class="hl sym">.</span>id<span class="hl sym">,</span> newColor<span class="hl sym">,</span> x<span class="hl sym">==</span><span class="hl num">1</span><span class="hl sym">);</span>
            <span class="hl kwa">case</span> _ <span class="hl sym">=&gt;</span>
              existing<span class="hl sym">.</span>finish<span class="hl sym">()</span>
              incoming<span class="hl sym">.</span>finish<span class="hl sym">()</span>
          <span class="hl sym">}</span>
        <span class="hl sym">}</span>
      <span class="hl sym">}</span>
    <span class="hl sym">}</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">class</span> Dispatcher<span class="hl sym">(</span>bqc<span class="hl sym">:</span> <span class="hl kwc">BlockingQueue</span><span class="hl sym">[</span>Creature<span class="hl sym">])</span> <span class="hl kwa">extends</span> <span class="hl kwc">Runnable</span> <span class="hl sym">{</span>
    <span class="hl kwa">def</span> run<span class="hl sym">() {</span>
      <span class="hl kwa">try</span> <span class="hl sym">{</span>
        <span class="hl kwa">while</span><span class="hl sym">(</span>true<span class="hl sym">)</span> bqc<span class="hl sym">.</span>take<span class="hl sym">().</span>run<span class="hl sym">()</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">catch</span> <span class="hl sym">{</span> <span class="hl kwa">case</span> e<span class="hl sym">:</span> <span class="hl kwc">InterruptedException</span> <span class="hl sym">=&gt; }</span>
    <span class="hl sym">}</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">class</span> Creature<span class="hl sym">(</span>place<span class="hl sym">:</span> MeetingPlace<span class="hl sym">,</span> <span class="hl kwa">var</span> color<span class="hl sym">:</span> <span class="hl kwc">Color</span><span class="hl sym">.</span>Value<span class="hl sym">,</span> bqc<span class="hl sym">:</span> <span class="hl kwc">BlockingQueue</span><span class="hl sym">[</span>Creature<span class="hl sym">],</span> latch<span class="hl sym">:</span> <span class="hl kwc">CountDownLatch</span><span class="hl sym">) {</span>
    <span class="hl kwa">val</span> id <span class="hl sym">=</span> <span class="hl kwc">System</span><span class="hl sym">.</span>identityHashCode<span class="hl sym">(</span><span class="hl kwa">this</span><span class="hl sym">)</span>
    <span class="hl kwa">var</span> count <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">private var</span> sameCount <span class="hl sym">=</span> <span class="hl num">0</span>

    <span class="hl kwa">def</span> finish<span class="hl sym">() {</span> latch<span class="hl sym">.</span>countDown<span class="hl sym">() }</span>
    <span class="hl kwa">def</span> setColor<span class="hl sym">(</span>id2<span class="hl sym">:</span> Int<span class="hl sym">,</span> newColor<span class="hl sym">:</span> <span class="hl kwc">Color</span><span class="hl sym">.</span>Value<span class="hl sym">,</span> complete<span class="hl sym">:</span> <span class="hl kwc">Boolean</span><span class="hl sym">) {</span>
      color <span class="hl sym">=</span> newColor
      count <span class="hl sym">+=</span> <span class="hl num">1</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>id<span class="hl sym">==</span>id2<span class="hl sym">)</span> sameCount <span class="hl sym">+=</span> <span class="hl num">1</span>
      <span class="hl kwa">if</span> <span class="hl sym">(!</span>complete<span class="hl sym">)</span> bqc<span class="hl sym">.</span>add<span class="hl sym">(</span><span class="hl kwa">this</span><span class="hl sym">)</span>
      <span class="hl kwa">else</span> finish<span class="hl sym">()</span>
    <span class="hl sym">}</span>
    <span class="hl kwa">def</span> run<span class="hl sym">() {</span> place<span class="hl sym">.</span>meet<span class="hl sym">(</span><span class="hl kwa">this</span><span class="hl sym">) }</span>
    <span class="hl kwa">override def</span> toString<span class="hl sym">() =</span> count <span class="hl sym">+</span> Verbalize<span class="hl sym">(</span>sameCount<span class="hl sym">)</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">def</span> run<span class="hl sym">(</span>n<span class="hl sym">:</span> Int<span class="hl sym">,</span> colors<span class="hl sym">:</span> <span class="hl kwc">Color</span><span class="hl sym">.</span>Value<span class="hl sym">*) {</span>
    <span class="hl kwa">val</span> place <span class="hl sym">=</span> <span class="hl kwa">new</span> MeetingPlace<span class="hl sym">(</span>n<span class="hl sym">)</span>
    <span class="hl kwa">val</span> bqc <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">ArrayBlockingQueue</span><span class="hl sym">[</span>Creature<span class="hl sym">](</span>colors<span class="hl sym">.</span>length<span class="hl sym">)</span>
    <span class="hl kwa">val</span> latch <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">CountDownLatch</span><span class="hl sym">(</span>colors<span class="hl sym">.</span>length <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span>

    <span class="hl kwa">val</span> creatures <span class="hl sym">=</span> colors<span class="hl sym">.</span>map<span class="hl sym">(</span>c <span class="hl sym">=&gt; {</span> print<span class="hl sym">(</span><span class="hl str">&quot; &quot;</span><span class="hl sym">+</span>c<span class="hl sym">) ;</span> <span class="hl kwa">new</span> Creature<span class="hl sym">(</span>place<span class="hl sym">,</span> c<span class="hl sym">,</span> bqc<span class="hl sym">,</span> latch<span class="hl sym">) })</span>
    println

    <span class="hl kwa">val</span> threads <span class="hl sym">=</span> colors<span class="hl sym">.</span>map<span class="hl sym">(</span>_ <span class="hl sym">=&gt;</span> <span class="hl kwa">new</span> <span class="hl kwc">Thread</span><span class="hl sym">(</span><span class="hl kwa">new</span> Dispatcher<span class="hl sym">(</span>bqc<span class="hl sym">)))</span>
    threads<span class="hl sym">.</span>foreach<span class="hl sym">(</span>_<span class="hl sym">.</span>start<span class="hl sym">())</span>
    creatures<span class="hl sym">.</span>foreach<span class="hl sym">(</span>c <span class="hl sym">=&gt;</span> bqc<span class="hl sym">.</span>add<span class="hl sym">(</span>c<span class="hl sym">))</span>

    <span class="hl kwa">try</span> <span class="hl sym">{</span> latch<span class="hl sym">.</span>await <span class="hl sym">}</span>
    <span class="hl kwa">catch</span> <span class="hl sym">{</span> <span class="hl kwa">case</span> ie<span class="hl sym">:</span> <span class="hl kwc">InterruptedException</span> <span class="hl sym">=&gt;</span> println<span class="hl sym">(</span><span class="hl str">&quot;Exiting with error: &quot;</span> <span class="hl sym">+</span> ie<span class="hl sym">) }</span>

    threads<span class="hl sym">.</span>foreach<span class="hl sym">(</span>_<span class="hl sym">.</span>interrupt<span class="hl sym">())</span>

    println<span class="hl sym">(</span> Verbalize <span class="hl sym">( (</span><span class="hl num">0</span> <span class="hl sym">/:</span> creatures<span class="hl sym">)((</span>sum<span class="hl sym">,</span>c<span class="hl sym">) =&gt; {</span> println<span class="hl sym">(</span>c<span class="hl sym">) ;</span> sum <span class="hl sym">+</span> c<span class="hl sym">.</span>count <span class="hl sym">}) ) )</span>
    println
  <span class="hl sym">}</span>

  <span class="hl kwa">def</span> main<span class="hl sym">(</span>args<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">String</span><span class="hl sym">]) {</span>
    <span class="hl kwa">import</span> <span class="hl kwc">Color</span><span class="hl sym">.</span>_

    <span class="hl kwa">val</span> n <span class="hl sym">=</span> <span class="hl kwa">try</span> <span class="hl sym">{</span> args<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">).</span>toInt <span class="hl sym">}</span> <span class="hl kwa">catch</span> <span class="hl sym">{</span> <span class="hl kwa">case</span> _ <span class="hl sym">=&gt;</span> <span class="hl num">600</span> <span class="hl sym">}</span>
    
    printColors
    println

    run<span class="hl sym">(</span>n<span class="hl sym">,</span>Blue<span class="hl sym">,</span>Red<span class="hl sym">,</span>Yellow<span class="hl sym">)</span>
    run<span class="hl sym">(</span>n<span class="hl sym">,</span>Blue<span class="hl sym">,</span>Red<span class="hl sym">,</span>Yellow<span class="hl sym">,</span>Red<span class="hl sym">,</span>Yellow<span class="hl sym">,</span>Blue<span class="hl sym">,</span>Red<span class="hl sym">,</span>Yellow<span class="hl sym">,</span>Red<span class="hl sym">,</span>Blue<span class="hl sym">)</span>
  <span class="hl sym">}</span>
<span class="hl sym">}</span>
