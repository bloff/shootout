<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;</span>
<span class="hl slc">;; contributed by Jesse Rosenstock</span>

<span class="hl sym">(</span>ns threadring
  <span class="hl sym">(:</span>gen<span class="hl sym">-</span>class<span class="hl sym">))</span>

<span class="hl sym">(</span>set<span class="hl sym">! *</span>warn<span class="hl sym">-</span>on<span class="hl sym">-</span>reflection<span class="hl sym">*</span> true<span class="hl sym">)</span>

<span class="hl sym">(</span>defn pass<span class="hl sym">-</span>message
  <span class="hl sym">[</span>the<span class="hl sym">-</span>agent
   ^Integer value
   first<span class="hl sym">-</span>agent<span class="hl sym">]</span>
  <span class="hl sym">(</span>if <span class="hl sym">(</span>zero? value<span class="hl sym">)</span>
    <span class="hl sym">(</span>do <span class="hl sym">(</span>println <span class="hl sym">(:</span>num the<span class="hl sym">-</span>agent<span class="hl sym">))</span>
      <span class="hl sym">(</span>shutdown<span class="hl sym">-</span>agents<span class="hl sym">)</span>
      <span class="hl sym">(</span>System<span class="hl sym">/</span>exit <span class="hl num">0</span><span class="hl sym">))</span>
    <span class="hl slc">; Pass to the next agent if we're not at the end of the line,</span>
    <span class="hl slc">; otherwise back to the first.</span>
    <span class="hl sym">(</span>send <span class="hl sym">(</span>if <span class="hl sym">(:</span>next the<span class="hl sym">-</span>agent<span class="hl sym">) (:</span>next the<span class="hl sym">-</span>agent<span class="hl sym">)</span> first<span class="hl sym">-</span>agent<span class="hl sym">)</span>
          pass<span class="hl sym">-</span>message <span class="hl sym">(</span>dec value<span class="hl sym">)</span> first<span class="hl sym">-</span>agent<span class="hl sym">))</span>
  the<span class="hl sym">-</span>agent<span class="hl sym">)</span>

<span class="hl sym">(</span>defn pass<span class="hl sym">-</span>messages
  <span class="hl sym">[</span>^Integer num<span class="hl sym">-</span>agents
   ^Integer num<span class="hl sym">-</span>messages<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>first<span class="hl sym">-</span>agent <span class="hl sym">(</span>reduce <span class="hl sym">(</span>fn <span class="hl sym">[</span>next<span class="hl sym">-</span>agent agent<span class="hl sym">-</span>num<span class="hl sym">]</span>
                              <span class="hl sym">(</span>agent <span class="hl sym">{:</span>next next<span class="hl sym">-</span>agent <span class="hl sym">:</span>num agent<span class="hl sym">-</span>num<span class="hl sym">}))</span>
                            nil
                            <span class="hl sym">(</span>range num<span class="hl sym">-</span>agents <span class="hl num">0</span> <span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">))]</span>
    <span class="hl sym">(</span>send first<span class="hl sym">-</span>agent pass<span class="hl sym">-</span>message num<span class="hl sym">-</span>messages first<span class="hl sym">-</span>agent<span class="hl sym">)))</span>

<span class="hl sym">(</span>defn <span class="hl sym">-</span>main <span class="hl sym">[&amp;</span> args<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>num<span class="hl sym">-</span>messages <span class="hl sym">(</span>if <span class="hl sym">(</span>empty? args<span class="hl sym">)</span>
                       <span class="hl num">1000</span>
                       <span class="hl sym">(</span>Integer<span class="hl sym">/</span>valueOf <span class="hl sym">(</span>first args<span class="hl sym">)))]</span>
    <span class="hl sym">(</span>pass<span class="hl sym">-</span>messages <span class="hl num">503</span> num<span class="hl sym">-</span>messages<span class="hl sym">)))</span>
