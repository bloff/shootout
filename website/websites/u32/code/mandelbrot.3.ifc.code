<span class="hl slc">! The Computer Language Benchmarks Game</span>
<span class="hl slc">! http://shootout.alioth.debian.org/</span>
<span class="hl slc">!</span>
<span class="hl slc">! Simon Geard, 6/1/05</span>
<span class="hl slc">! Modified by Waldemar Spomer, 10/1/09: openmp, one I/O</span>

<span class="hl kwa">program</span> mandelbrot
	<span class="hl kwa">use</span> omp_lib
	<span class="hl kwa">implicit none</span>
	<span class="hl kwb">integer</span> N<span class="hl sym">,</span> x<span class="hl sym">,</span> y<span class="hl sym">,</span> bit_num<span class="hl sym">,</span> i<span class="hl sym">,</span> incr<span class="hl sym">,</span> width_bytes
	<span class="hl kwb">integer</span><span class="hl sym">(</span>kind<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">)</span> byte_acc<span class="hl sym">,</span> state<span class="hl sym">,</span> mask<span class="hl sym">,</span> res<span class="hl sym">,</span> maskbita<span class="hl sym">,</span> maskbitb
	<span class="hl kwb">integer</span><span class="hl sym">(</span>kind<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">),</span> <span class="hl kwa">parameter</span> <span class="hl sym">::</span> K0 <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> K1 <span class="hl sym">=</span> <span class="hl num">1</span>
	<span class="hl kwb">integer</span><span class="hl sym">,</span> <span class="hl kwa">parameter</span> <span class="hl sym">::</span> iter <span class="hl sym">=</span> <span class="hl num">50</span>
	<span class="hl kwb">real</span><span class="hl sym">*</span><span class="hl num">8</span><span class="hl sym">,</span> <span class="hl kwa">parameter</span>  <span class="hl sym">::</span> limit2 <span class="hl sym">=</span> <span class="hl num">4.0d0</span>
	<span class="hl kwb">double precision</span> <span class="hl sym">::</span> absZ1<span class="hl sym">,</span> absZ2<span class="hl sym">,</span> invert
	<span class="hl kwb">character</span><span class="hl sym">(</span>len<span class="hl sym">=</span><span class="hl num">8</span><span class="hl sym">)</span> argv
	<span class="hl kwb">complex</span><span class="hl sym">(</span>kind<span class="hl sym">=</span><span class="hl num">8</span><span class="hl sym">)</span> Z1<span class="hl sym">,</span> Z2<span class="hl sym">,</span> C1<span class="hl sym">,</span> C2
	<span class="hl kwb">logical</span> in_mandelbrot
	<span class="hl slc">! Modified to use pointers</span>
	<span class="hl kwb">character</span><span class="hl sym">(</span>len<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">),</span> <span class="hl kwa">pointer</span><span class="hl sym">,</span> <span class="hl kwa">dimension</span><span class="hl sym">(:) ::</span> whole_data<span class="hl sym">,</span> pdata
	<span class="hl kwb">double precision</span><span class="hl sym">,</span> <span class="hl kwa">dimension</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">:</span><span class="hl num">2</span><span class="hl sym">) ::</span> m1<span class="hl sym">,</span> m2 <span class="hl slc">! for mask</span>
	
	<span class="hl kwd">nullify</span><span class="hl sym">(</span>pdata<span class="hl sym">,</span> whole_data<span class="hl sym">)</span>
	
	<span class="hl kwa">call</span> <span class="hl kwd">getarg</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span>argv<span class="hl sym">)</span>
	<span class="hl kwa">read</span><span class="hl sym">(</span>argv<span class="hl sym">,*)</span> N
	
	<span class="hl kwd">allocate</span><span class="hl sym">(</span><span class="hl kwd">whole_data</span><span class="hl sym">(</span>N<span class="hl sym">**</span><span class="hl num">2</span><span class="hl sym">/</span><span class="hl num">8</span><span class="hl sym">),</span>STAT<span class="hl sym">=</span>state<span class="hl sym">)</span>
	<span class="hl slc">! Output pbm header</span>
	<span class="hl kwa">write</span><span class="hl sym">(*,</span><span class="hl str">'(a)'</span><span class="hl sym">)</span> <span class="hl str">'P4'</span>
	<span class="hl kwa">write</span><span class="hl sym">(*,</span><span class="hl str">'(i0,a,i0)'</span><span class="hl sym">)</span> N<span class="hl sym">,</span><span class="hl str">' '</span><span class="hl sym">,</span>N
	
	width_bytes <span class="hl sym">=</span> <span class="hl kwd">ishft</span><span class="hl sym">(</span>N<span class="hl sym">,-</span><span class="hl num">3</span><span class="hl sym">)</span>
	invert <span class="hl sym">=</span> <span class="hl num">2.0d0</span><span class="hl sym">/</span>N
	<span class="hl slc">! Modified</span>
	<span class="hl slc">!$omp parallel default(private) shared(whole_data,N,width_bytes,invert)</span>
	<span class="hl slc">!$omp do schedule(dynamic)</span>
	<span class="hl kwa">do</span> y<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">,</span>N<span class="hl sym">-</span><span class="hl num">1</span>
		bit_num <span class="hl sym">=</span> <span class="hl num">0</span>
		byte_acc <span class="hl sym">=</span> K0
		<span class="hl slc">! Adopted form c++ example</span>
		pdata <span class="hl sym">=&gt;</span> <span class="hl kwd">whole_data</span><span class="hl sym">((</span>y<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)*</span>width_bytes<span class="hl sym">:(</span>y<span class="hl sym">)*</span>width_bytes<span class="hl sym">)</span>
		incr<span class="hl sym">=</span><span class="hl num">0</span>
		<span class="hl kwa">do</span> x<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">,</span>N<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">2</span>
			C1 <span class="hl sym">=</span> <span class="hl kwd">cmplx</span><span class="hl sym">(</span>x<span class="hl sym">*</span>invert<span class="hl sym">-</span><span class="hl num">1.5d0</span><span class="hl sym">,</span>y<span class="hl sym">*</span>invert<span class="hl sym">-</span><span class="hl num">1.0d0</span><span class="hl sym">)</span>
			C2 <span class="hl sym">=</span> <span class="hl kwd">cmplx</span><span class="hl sym">((</span>x<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)*</span>invert<span class="hl sym">-</span><span class="hl num">1.5d0</span><span class="hl sym">,</span>y<span class="hl sym">*</span>invert<span class="hl sym">-</span><span class="hl num">1.0d0</span><span class="hl sym">)</span>
			Z1 <span class="hl sym">=</span> C1
			Z2 <span class="hl sym">=</span> C2
			in_mandelbrot <span class="hl sym">= .</span>true<span class="hl sym">.</span>
			res<span class="hl sym">=</span><span class="hl num">3</span>
			<span class="hl kwa">do</span> i<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">,</span>iter
				
				<span class="hl slc">! Adopted from C/C++ example</span>
				Z1 <span class="hl sym">=</span> Z1<span class="hl sym">**</span><span class="hl num">2</span> <span class="hl sym">+</span> C1
				Z2 <span class="hl sym">=</span> Z2<span class="hl sym">**</span><span class="hl num">2</span> <span class="hl sym">+</span> C2
				
				absZ1 <span class="hl sym">=</span> <span class="hl kwb">real</span><span class="hl sym">(</span>Z1<span class="hl sym">*</span><span class="hl kwd">conjg</span><span class="hl sym">(</span>Z1<span class="hl sym">))</span>
				absZ2 <span class="hl sym">=</span> <span class="hl kwb">real</span><span class="hl sym">(</span>Z2<span class="hl sym">*</span><span class="hl kwd">conjg</span><span class="hl sym">(</span>Z2<span class="hl sym">))</span>
				
				<span class="hl kwa">if</span> <span class="hl sym">(</span>absZ2 <span class="hl sym">&lt;=</span> limit2 <span class="hl sym">.</span>AND<span class="hl sym">.</span> absZ1 <span class="hl sym">&lt;=</span> limit2<span class="hl sym">)</span> <span class="hl kwa">then</span>
					mask <span class="hl sym">=</span> <span class="hl num">3</span>
				<span class="hl kwa">else if</span> <span class="hl sym">(</span>absZ2 <span class="hl sym">&gt;</span> limit2 <span class="hl sym">.</span>AND<span class="hl sym">.</span> absZ1 <span class="hl sym">&lt;=</span> limit2<span class="hl sym">)</span> <span class="hl kwa">then</span>
					mask <span class="hl sym">=</span> <span class="hl num">2</span>
				<span class="hl kwa">else if</span> <span class="hl sym">(</span>absZ2 <span class="hl sym">&lt;=</span> limit2 <span class="hl sym">.</span>AND<span class="hl sym">.</span> absZ1 <span class="hl sym">&gt;</span> limit2<span class="hl sym">)</span> <span class="hl kwa">then</span>
					mask <span class="hl sym">=</span> <span class="hl num">1</span>
				<span class="hl kwa">else if</span> <span class="hl sym">(</span>absZ2 <span class="hl sym">&gt;</span> limit2 <span class="hl sym">.</span>AND<span class="hl sym">.</span> absZ1 <span class="hl sym">&gt;</span> limit2<span class="hl sym">)</span> <span class="hl kwa">then</span>
					mask <span class="hl sym">=</span> <span class="hl num">0</span>
				<span class="hl kwa">end if</span>
				
				res <span class="hl sym">=</span> <span class="hl kwd">iand</span><span class="hl sym">(</span>res<span class="hl sym">,</span>mask<span class="hl sym">)</span>
				
				<span class="hl kwa">if</span> <span class="hl sym">(</span>res<span class="hl sym">==</span><span class="hl num">0</span><span class="hl sym">)</span> exit
			<span class="hl kwa">end do</span>
			
			bit_num <span class="hl sym">=</span> bit_num <span class="hl sym">+</span> <span class="hl num">2</span>
			byte_acc <span class="hl sym">=</span> <span class="hl kwd">ior</span><span class="hl sym">(</span><span class="hl kwd">ishft</span><span class="hl sym">(</span>byte_acc<span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">),</span>res<span class="hl sym">)</span>
			
			<span class="hl kwa">if</span> <span class="hl sym">(</span>bit_num <span class="hl sym">==</span> <span class="hl num">8</span><span class="hl sym">)</span> <span class="hl kwa">then</span>
				<span class="hl slc">! All bits set so output them</span>
				incr<span class="hl sym">=</span>incr<span class="hl sym">+</span><span class="hl num">1</span>
				<span class="hl kwd">pdata</span><span class="hl sym">(</span>incr<span class="hl sym">) =</span> <span class="hl kwd">char</span><span class="hl sym">(</span>byte_acc<span class="hl sym">)</span>
				byte_acc <span class="hl sym">=</span> K0
				bit_num <span class="hl sym">=</span> <span class="hl num">0</span>

			<span class="hl kwa">end if</span>
		<span class="hl kwa">end do</span>
	<span class="hl slc">! End of a row so left-justify the bits we have and output them</span>
	byte_acc <span class="hl sym">=</span> <span class="hl kwd">ishft</span><span class="hl sym">(</span>byte_acc<span class="hl sym">,</span><span class="hl num">8</span><span class="hl sym">-</span><span class="hl kwd">mod</span><span class="hl sym">(</span>N<span class="hl sym">,</span><span class="hl num">8</span><span class="hl sym">))</span>
	<span class="hl kwd">pdata</span><span class="hl sym">(</span>incr<span class="hl sym">) =</span> <span class="hl kwd">char</span><span class="hl sym">(</span>byte_acc<span class="hl sym">)</span>

	<span class="hl kwa">end do</span>
	<span class="hl slc">!$omp end do nowait</span>
	<span class="hl slc">!$omp end parallel</span>
	<span class="hl kwa">write</span><span class="hl sym">(*,*)</span> whole_data
	<span class="hl kwd">deallocate</span><span class="hl sym">(</span>whole_data<span class="hl sym">)</span>
	<span class="hl kwd">nullify</span><span class="hl sym">(</span>pdata<span class="hl sym">,</span> whole_data<span class="hl sym">)</span>
<span class="hl kwa">end program</span> mandelbrot
