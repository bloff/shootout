<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://shootout.alioth.debian.org</span>
<span class="hl slc">#</span>
<span class="hl slc"># contributed by jose fco. gonzalez</span>
<span class="hl slc"># modified by Sokolov Yura</span>
<span class="hl slc"># Parallelism by Rick Branson</span>

<span class="hl kwb">$seq</span> <span class="hl sym">=</span> String<span class="hl sym">.</span>new

<span class="hl kwa">def</span> <span class="hl kwd">frequency</span><span class="hl sym">(</span>seq<span class="hl sym">,</span> length<span class="hl sym">)</span>
  frequencies <span class="hl sym">=</span> Hash<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
  ns          <span class="hl sym">=</span> seq<span class="hl sym">.</span>length <span class="hl sym">+</span> <span class="hl num">1</span> <span class="hl sym">-</span> length

  <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl sym">(</span><span class="hl num">0</span> <span class="hl sym">...</span> ns<span class="hl sym">)</span>
    frequencies<span class="hl sym">[</span>seq<span class="hl sym">[</span>i<span class="hl sym">,</span> length<span class="hl sym">]] +=</span> <span class="hl num">1</span>
  <span class="hl kwa">end</span>

  <span class="hl sym">[</span>ns<span class="hl sym">,</span> frequencies<span class="hl sym">]</span>
<span class="hl kwa">end</span>

<span class="hl kwa">def</span> <span class="hl kwd">sort_by_freq</span><span class="hl sym">(</span>seq<span class="hl sym">,</span> length<span class="hl sym">)</span>
  ret       <span class="hl sym">=</span> <span class="hl str">&quot;&quot;</span>
  n<span class="hl sym">,</span> table  <span class="hl sym">=</span> <span class="hl kwd">frequency</span><span class="hl sym">(</span>seq<span class="hl sym">,</span> length<span class="hl sym">)</span>

  table<span class="hl sym">.</span>sort<span class="hl sym">{|</span>a<span class="hl sym">,</span>b<span class="hl sym">|</span> b<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">] &lt;=&gt;</span> a<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]}.</span>each <span class="hl kwa">do</span> <span class="hl sym">|</span>v<span class="hl sym">|</span>
      ret <span class="hl sym">+=</span> <span class="hl str">&quot;%s %.3f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl sym">% [</span>v<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">].</span>upcase<span class="hl sym">,((</span>v<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]*</span><span class="hl num">100</span><span class="hl sym">).</span>to_f<span class="hl sym">/</span>n<span class="hl sym">)]</span>
  <span class="hl kwa">end</span>

  ret <span class="hl sym">+=</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
<span class="hl kwa">end</span>

<span class="hl kwa">def</span> <span class="hl kwd">find_seq</span><span class="hl sym">(</span>seq<span class="hl sym">,</span> s<span class="hl sym">)</span>
  n<span class="hl sym">,</span> table <span class="hl sym">=</span> <span class="hl kwd">frequency</span><span class="hl sym">(</span>seq<span class="hl sym">,</span> s<span class="hl sym">.</span>length<span class="hl sym">)</span>
  <span class="hl str">&quot;#{table[s].to_s}</span><span class="hl esc">\t</span><span class="hl str">#{s.upcase}</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
<span class="hl kwa">end</span>

line <span class="hl sym">=</span> <span class="hl kwc">STDIN</span><span class="hl sym">.</span>gets <span class="hl kwa">while</span> line <span class="hl sym">!</span>~ <span class="hl kwc">/^&gt;THREE/</span>
line <span class="hl sym">=</span> <span class="hl kwc">STDIN</span><span class="hl sym">.</span>gets
<span class="hl kwa">while</span> <span class="hl sym">(</span>line <span class="hl sym">!</span>~ <span class="hl kwc">/^&gt;/</span><span class="hl sym">) &amp;</span> line <span class="hl kwa">do</span>
    <span class="hl kwb">$seq</span> <span class="hl sym">&lt;&lt;</span> line<span class="hl sym">.</span>chomp
    line <span class="hl sym">=</span> <span class="hl kwc">STDIN</span><span class="hl sym">.</span>gets
<span class="hl kwa">end</span>

<span class="hl kwa">class</span> Worker
  <span class="hl kwa">def</span> <span class="hl kwd">initialize</span><span class="hl sym">(&amp;</span>block<span class="hl sym">)</span>
    <span class="hl kwa">if</span> <span class="hl kwc">RUBY_PLATFORM</span> <span class="hl sym">==</span> <span class="hl str">&quot;java&quot;</span>
      <span class="hl kwb">&#64;t</span> <span class="hl sym">=</span> Thread<span class="hl sym">.</span>new <span class="hl kwa">do</span>
        Thread<span class="hl sym">.</span>current<span class="hl sym">[:</span>result<span class="hl sym">] =</span> <span class="hl kwa">yield</span>
      <span class="hl kwa">end</span>
    <span class="hl kwa">else</span>
      <span class="hl kwb">&#64;r</span><span class="hl sym">,</span> <span class="hl kwb">&#64;w</span> <span class="hl sym">=</span> IO<span class="hl sym">.</span>pipe
      <span class="hl kwb">&#64;p</span> <span class="hl sym">=</span> Process<span class="hl sym">.</span>fork <span class="hl kwa">do</span>
        <span class="hl kwb">&#64;r</span><span class="hl sym">.</span>close
        <span class="hl kwb">&#64;w</span><span class="hl sym">.</span>write <span class="hl kwa">yield</span>
        <span class="hl kwb">&#64;w</span><span class="hl sym">.</span>close
      <span class="hl kwa">end</span>

      <span class="hl kwb">&#64;w</span><span class="hl sym">.</span>close
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>

  <span class="hl kwa">def</span> result
    <span class="hl kwa">if</span> <span class="hl kwc">RUBY_PLATFORM</span> <span class="hl sym">==</span> <span class="hl str">&quot;java&quot;</span>
      <span class="hl kwb">&#64;t</span><span class="hl sym">.</span>join
      <span class="hl kwb">&#64;t</span><span class="hl sym">[:</span>result<span class="hl sym">]</span>
    <span class="hl kwa">else</span>
      ret <span class="hl sym">=</span> <span class="hl kwb">&#64;r</span><span class="hl sym">.</span>read
      <span class="hl kwb">&#64;r</span><span class="hl sym">.</span>close
      Process<span class="hl sym">.</span><span class="hl kwd">wait</span><span class="hl sym">(</span><span class="hl kwb">&#64;p</span><span class="hl sym">)</span>
      ret
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

FREQS   <span class="hl sym">= [</span><span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">]</span>
NUCLEOS <span class="hl sym">= %</span><span class="hl kwd">w</span><span class="hl sym">(</span>ggt ggta ggtatt ggtattttaatt ggtattttaatttatagt<span class="hl sym">)</span>

workers <span class="hl sym">=</span>   FREQS<span class="hl sym">.</span>map   <span class="hl sym">{ |</span>i<span class="hl sym">|</span> Worker<span class="hl sym">.</span>new <span class="hl sym">{</span> <span class="hl kwd">sort_by_freq</span><span class="hl sym">(</span><span class="hl kwb">$seq</span><span class="hl sym">,</span> i<span class="hl sym">) } }</span>
workers <span class="hl sym">+=</span>  NUCLEOS<span class="hl sym">.</span>map <span class="hl sym">{ |</span>s<span class="hl sym">|</span> Worker<span class="hl sym">.</span>new <span class="hl sym">{</span> <span class="hl kwd">find_seq</span><span class="hl sym">(</span><span class="hl kwb">$seq</span><span class="hl sym">,</span> s<span class="hl sym">) } }</span>

results <span class="hl sym">=</span> workers<span class="hl sym">.</span>map <span class="hl sym">{ |</span>w<span class="hl sym">|</span> w<span class="hl sym">.</span>result <span class="hl sym">}</span>
print results<span class="hl sym">.</span>join
