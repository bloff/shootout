<span class="hl slc">;;   The Computer Language Benchmarks Game</span>
<span class="hl slc">;;   http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;   contributed by James McIlree</span>
<span class="hl slc">;;   Modified by Juho Snellman 2005-11-19</span>
<span class="hl slc">;;     * About 50% speedup on both SBCL and CMUCL</span>
<span class="hl slc">;;     * Use SIMPLE-BASE-STRINGs instead of (SIMPLE-ARRAY CHARACTER) for</span>
<span class="hl slc">;;       lower memory use on Unicode SBCL</span>
<span class="hl slc">;;     * Declare the type of SEQUENCE in ACCUMULATE-FREQUENCIES</span>

<span class="hl sym">(</span><span class="hl kwa">defun read</span><span class="hl sym">-</span>data <span class="hl sym">(</span>stream<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>data <span class="hl sym">(</span>make<span class="hl sym">-</span>array <span class="hl num">0</span> <span class="hl sym">:</span>element<span class="hl sym">-</span><span class="hl kwa">type</span> <span class="hl sym">'</span>base<span class="hl sym">-</span>char <span class="hl sym">:</span>adjustable t <span class="hl sym">:</span>fill<span class="hl sym">-</span>pointer <span class="hl num">0</span><span class="hl sym">)))</span>
    <span class="hl sym">(</span>do <span class="hl sym">((</span><span class="hl kwa">line</span> <span class="hl sym">(</span><span class="hl kwa">read</span><span class="hl sym">-</span><span class="hl kwa">line</span> stream nil <span class="hl sym">'</span>eof<span class="hl sym">) (</span><span class="hl kwa">read</span><span class="hl sym">-</span><span class="hl kwa">line</span> stream nil <span class="hl sym">'</span>eof<span class="hl sym">)))</span>
        <span class="hl sym">((</span><span class="hl kwa">or</span> <span class="hl sym">(</span><span class="hl kwa">eq line</span> <span class="hl sym">'</span>eof<span class="hl sym">) (</span>string<span class="hl sym">=</span> <span class="hl str">&quot;&gt;THREE&quot;</span> <span class="hl kwa">line</span> <span class="hl sym">:</span>start2 <span class="hl num">0</span> <span class="hl sym">:</span>end2 <span class="hl num">6</span><span class="hl sym">))))</span>
    <span class="hl sym">(</span>do <span class="hl sym">((</span><span class="hl kwa">line</span> <span class="hl sym">(</span><span class="hl kwa">read</span><span class="hl sym">-</span><span class="hl kwa">line</span> stream nil <span class="hl sym">'</span>eof<span class="hl sym">) (</span><span class="hl kwa">read</span><span class="hl sym">-</span><span class="hl kwa">line</span> stream nil <span class="hl sym">'</span>eof<span class="hl sym">)))</span>
        <span class="hl sym">((</span><span class="hl kwa">or</span> <span class="hl sym">(</span><span class="hl kwa">eq line</span> <span class="hl sym">'</span>eof<span class="hl sym">) (</span>char<span class="hl sym">= (</span>schar <span class="hl kwa">line</span> <span class="hl num">0</span><span class="hl sym">)</span> #\<span class="hl sym">&gt;)))</span>
      <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">not</span> <span class="hl sym">(</span>char<span class="hl sym">= (</span>schar <span class="hl kwa">line</span> <span class="hl num">0</span><span class="hl sym">)</span> #\<span class="hl slc">;))</span>
          <span class="hl sym">(</span>dotimes <span class="hl sym">(</span>char<span class="hl sym">-</span>index <span class="hl sym">(</span><span class="hl kwa">length line</span><span class="hl sym">))</span>
            <span class="hl sym">(</span>vector<span class="hl sym">-</span>push<span class="hl sym">-</span>extend <span class="hl sym">(</span>char<span class="hl sym">-</span>upcase <span class="hl sym">(</span>the base<span class="hl sym">-</span>char <span class="hl sym">(</span>schar <span class="hl kwa">line</span> char<span class="hl sym">-</span>index<span class="hl sym">)))</span> data<span class="hl sym">))))</span>
    <span class="hl sym">(</span>coerce data <span class="hl sym">'</span>simple<span class="hl sym">-</span>base<span class="hl sym">-</span>string<span class="hl sym">)))</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> accumulate<span class="hl sym">-</span>frequencies <span class="hl sym">(</span>hashmap sequence offset fragment<span class="hl sym">-</span><span class="hl kwa">length</span><span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">type</span> <span class="hl sym">(</span>integer <span class="hl num">0 18</span><span class="hl sym">)</span> fragment<span class="hl sym">-</span><span class="hl kwa">length</span><span class="hl sym">)</span>
           <span class="hl sym">(</span>fixnum offset<span class="hl sym">)</span>
           <span class="hl sym">(</span><span class="hl kwa">type</span> <span class="hl sym">(</span>simple<span class="hl sym">-</span>base<span class="hl sym">-</span>string<span class="hl sym">)</span> sequence<span class="hl sym">))</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span><span class="hl kwa">last</span><span class="hl sym">-</span>sequence<span class="hl sym">-</span>index <span class="hl sym">(- (</span><span class="hl kwa">length</span> sequence<span class="hl sym">)</span> fragment<span class="hl sym">-</span><span class="hl kwa">length</span><span class="hl sym">)))</span>
    <span class="hl sym">(</span>do <span class="hl sym">((</span>start offset <span class="hl sym">(+</span> start fragment<span class="hl sym">-</span><span class="hl kwa">length</span><span class="hl sym">)))</span>
        <span class="hl sym">((&gt;</span> start <span class="hl kwa">last</span><span class="hl sym">-</span>sequence<span class="hl sym">-</span>index<span class="hl sym">))</span>
      <span class="hl sym">(</span>let <span class="hl sym">((</span>fragment <span class="hl sym">(</span>subseq sequence start <span class="hl sym">(+</span> start fragment<span class="hl sym">-</span><span class="hl kwa">length</span><span class="hl sym">))))</span>
        <span class="hl sym">(</span>setf <span class="hl sym">(</span>gethash fragment hashmap<span class="hl sym">) (</span><span class="hl num">1</span><span class="hl sym">+ (</span>the <span class="hl sym">(</span>integer <span class="hl num">0 999999</span><span class="hl sym">) (</span>gethash fragment hashmap <span class="hl num">0</span><span class="hl sym">))))))))</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> calculate<span class="hl sym">-</span>frequencies <span class="hl sym">(</span>sequence fragment<span class="hl sym">-</span><span class="hl kwa">length</span><span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">type</span> <span class="hl sym">(</span>integer <span class="hl num">0 18</span><span class="hl sym">)</span> fragment<span class="hl sym">-</span><span class="hl kwa">length</span><span class="hl sym">))</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>hashmap <span class="hl sym">(</span>make<span class="hl sym">-</span>hash<span class="hl sym">-</span>table <span class="hl sym">:</span>test #<span class="hl sym">'</span><span class="hl kwa">equal</span><span class="hl sym">)))</span>
    <span class="hl sym">(</span>dotimes <span class="hl sym">(</span>offset fragment<span class="hl sym">-</span><span class="hl kwa">length</span><span class="hl sym">)</span>
      <span class="hl sym">(</span>accumulate<span class="hl sym">-</span>frequencies hashmap sequence offset fragment<span class="hl sym">-</span><span class="hl kwa">length</span><span class="hl sym">))</span>
    hashmap<span class="hl sym">))</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> write<span class="hl sym">-</span>frequencies <span class="hl sym">(</span>sequence <span class="hl kwa">length</span><span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>sorted<span class="hl sym">-</span>frequencies<span class="hl sym">)</span>
        <span class="hl sym">(</span>sum <span class="hl num">0</span><span class="hl sym">))</span>
    <span class="hl sym">(</span>declare <span class="hl sym">(</span>fixnum sum<span class="hl sym">))</span>
    <span class="hl sym">(</span>maphash #<span class="hl sym">'(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>k v<span class="hl sym">)</span>
                 <span class="hl sym">(</span>setf sum <span class="hl sym">(+</span> sum <span class="hl sym">(</span>the fixnum v<span class="hl sym">)))</span>
                 <span class="hl sym">(</span>setf sorted<span class="hl sym">-</span>frequencies <span class="hl sym">(</span><span class="hl kwa">cons</span> <span class="hl sym">(</span><span class="hl kwa">cons</span> k v<span class="hl sym">)</span> sorted<span class="hl sym">-</span>frequencies<span class="hl sym">))) (</span>calculate<span class="hl sym">-</span>frequencies sequence <span class="hl kwa">length</span><span class="hl sym">))</span>
    <span class="hl sym">(</span>setf sorted<span class="hl sym">-</span>frequencies <span class="hl sym">(</span>sort sorted<span class="hl sym">-</span>frequencies #<span class="hl sym">'(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>v1 v2<span class="hl sym">)</span>
                                                          <span class="hl sym">(</span><span class="hl kwa">cond</span> <span class="hl sym">((&gt; (</span>the <span class="hl sym">(</span>integer <span class="hl num">0 999999</span><span class="hl sym">) (</span><span class="hl kwa">cdr</span> v1<span class="hl sym">)) (</span>the <span class="hl sym">(</span>integer <span class="hl num">0 999999</span><span class="hl sym">) (</span><span class="hl kwa">cdr</span> v2<span class="hl sym">)))</span> t<span class="hl sym">)</span>
                                                                <span class="hl sym">((&lt; (</span>the <span class="hl sym">(</span>integer <span class="hl num">0 999999</span><span class="hl sym">) (</span><span class="hl kwa">cdr</span> v1<span class="hl sym">)) (</span>the <span class="hl sym">(</span>integer <span class="hl num">0 999999</span><span class="hl sym">) (</span><span class="hl kwa">cdr</span> v2<span class="hl sym">)))</span> nil<span class="hl sym">)</span>
                                                                <span class="hl sym">(</span>t <span class="hl sym">(</span>string<span class="hl sym">&lt; (</span><span class="hl kwa">car</span> v1<span class="hl sym">) (</span><span class="hl kwa">car</span> v2<span class="hl sym">)))))))</span>
    <span class="hl sym">(</span>dolist <span class="hl sym">(</span>entry sorted<span class="hl sym">-</span>frequencies<span class="hl sym">) (</span>format t <span class="hl str">&quot;~A ~,3F~%&quot;</span> <span class="hl sym">(</span><span class="hl kwa">car</span> entry<span class="hl sym">) (* (/ (</span>the <span class="hl sym">(</span>integer <span class="hl num">0 999999</span><span class="hl sym">) (</span><span class="hl kwa">cdr</span> entry<span class="hl sym">))</span> sum<span class="hl sym">)</span> <span class="hl num">100.0</span><span class="hl sym">)))</span>
    <span class="hl sym">(</span><span class="hl kwa">terpri</span><span class="hl sym">)))</span>

<span class="hl slc">;;</span>
<span class="hl slc">;; Delete this before including in the shootout, test method only.</span>
<span class="hl slc">;;</span>
<span class="hl slc">;;(defun test-main (filename)</span>
<span class="hl slc">;;  (with-open-file (stream filename)</span>
<span class="hl slc">;;    (let ((sequence (read-data stream)))</span>
<span class="hl slc">;;      (declare (type (simple-array * *) sequence))</span>
<span class="hl slc">;;      (dolist (entry '(1 2)) (write-frequencies sequence entry))</span>
<span class="hl slc">;;      (dolist (entry '(&quot;GGT&quot; &quot;GGTA&quot; &quot;GGTATT&quot; &quot;GGTATTTTAATT&quot; &quot;GGTATTTTAATTTATAGT&quot;))</span>
<span class="hl slc">;;        (declare (type (simple-array * *) entry))</span>
<span class="hl slc">;;        (format t &quot;~A~C~A~%&quot; (gethash entry (calculate-frequencies sequence (length entry)) 0) #\Tab entry)))))</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> main <span class="hl sym">()</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>sequence <span class="hl sym">(</span><span class="hl kwa">read</span><span class="hl sym">-</span>data <span class="hl sym">*</span>standard<span class="hl sym">-</span>input<span class="hl sym">*)))</span>
    <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">type</span> <span class="hl sym">(</span>simple<span class="hl sym">-</span>array <span class="hl sym">* *)</span> sequence<span class="hl sym">))</span>
    <span class="hl sym">(</span>dolist <span class="hl sym">(</span>entry <span class="hl sym">'(</span><span class="hl num">1 2</span><span class="hl sym">)) (</span>write<span class="hl sym">-</span>frequencies sequence entry<span class="hl sym">))</span>
    <span class="hl sym">(</span>dolist <span class="hl sym">(</span>entry <span class="hl sym">'(</span><span class="hl str">&quot;GGT&quot;</span> <span class="hl str">&quot;GGTA&quot;</span> <span class="hl str">&quot;GGTATT&quot;</span> <span class="hl str">&quot;GGTATTTTAATT&quot;</span> <span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl sym">))</span>
      <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">type</span> <span class="hl sym">(</span>simple<span class="hl sym">-</span>array <span class="hl sym">* *)</span> entry<span class="hl sym">))</span>
      <span class="hl sym">(</span>format t <span class="hl str">&quot;~A~C~A~%&quot;</span>
              <span class="hl sym">(</span>gethash entry <span class="hl sym">(</span>calculate<span class="hl sym">-</span>frequencies sequence <span class="hl sym">(</span><span class="hl kwa">length</span> entry<span class="hl sym">))</span> <span class="hl num">0</span><span class="hl sym">)</span>
              #\Tab entry<span class="hl sym">))))</span>
