<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Xavier Oswald</span>
<span class="hl com">*/</span>

Section Header

  <span class="hl sym">+</span> name <span class="hl sym">:=</span> REVCOMP<span class="hl sym">;</span>

Section Inherit

  <span class="hl sym">-</span> parent_any<span class="hl sym">:</span>OBJECT <span class="hl sym">:=</span> OBJECT<span class="hl sym">;</span>

Section Public

  <span class="hl sym">-</span> puts tab<span class="hl sym">:</span>NATIVE_ARRAY<span class="hl sym">[</span>CHARACTER<span class="hl sym">] &lt;-</span> `puts<span class="hl sym">(</span>&#64;tab<span class="hl sym">)</span>`<span class="hl sym">;</span>

  <span class="hl sym">-</span> buffer <span class="hl sym">:</span>STRING<span class="hl sym">;</span>

  <span class="hl sym">-</span> iub_pairs<span class="hl sym">:</span>STRING_CONSTANT <span class="hl sym">:=</span> <span class="hl str">&quot;ATCGBVDHKMRY&quot;</span><span class="hl sym">;</span>

  <span class="hl sym">-</span> iub_complement <span class="hl sym">:</span>NATIVE_ARRAY<span class="hl sym">[</span>CHARACTER<span class="hl sym">] :=</span> NATIVE_ARRAY<span class="hl sym">[</span>CHARACTER<span class="hl sym">]</span>.create <span class="hl num">256</span><span class="hl sym">;</span>

  <span class="hl sym">-</span> build_iub_complement <span class="hl sym">&lt;-</span>
  <span class="hl sym">(</span>
    <span class="hl num">0</span>.to <span class="hl num">256</span> do <span class="hl sym">{</span> i<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
      iub_complement.put <span class="hl sym">(</span>i.to_character<span class="hl sym">)</span> to i<span class="hl sym">;</span>
    <span class="hl sym">};</span>

    <span class="hl sym">(</span>iub_pairs.lower<span class="hl sym">)</span>.to <span class="hl sym">(</span>iub_pairs.upper<span class="hl sym">)</span> by <span class="hl num">2</span> do <span class="hl sym">{</span> j<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
      iub_complement.put<span class="hl sym">(</span>iub_pairs.item <span class="hl sym">(</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">))</span> to <span class="hl sym">(</span>iub_pairs.item  j   .to_integer<span class="hl sym">);</span>
      iub_complement.put<span class="hl sym">(</span>iub_pairs.item  j   <span class="hl sym">)</span> to <span class="hl sym">(</span>iub_pairs.item <span class="hl sym">(</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>.to_integer<span class="hl sym">);</span>
      iub_complement.put<span class="hl sym">(</span>iub_pairs.item <span class="hl sym">(</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">))</span> to <span class="hl sym">(</span>iub_pairs.item  j   .to_lower.to_integer<span class="hl sym">);</span>
      iub_complement.put<span class="hl sym">(</span>iub_pairs.item  j   <span class="hl sym">)</span> to <span class="hl sym">(</span>iub_pairs.item <span class="hl sym">(</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>.to_lower.to_integer<span class="hl sym">);</span>
    <span class="hl sym">};</span>
  <span class="hl sym">);</span>

  <span class="hl sym">-</span> in_place_reverse <span class="hl sym">&lt;-</span>
  <span class="hl sym">( +</span> i<span class="hl sym">,</span>len<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
    <span class="hl sym">+</span> c<span class="hl sym">:</span>CHARACTER<span class="hl sym">;</span>
    <span class="hl sym">+</span> s<span class="hl sym">:</span>NATIVE_ARRAY<span class="hl sym">[</span>CHARACTER<span class="hl sym">];</span>

    i <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    len <span class="hl sym">:=</span> buffer.count <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>
    s <span class="hl sym">:=</span> buffer.storage<span class="hl sym">;</span>

    <span class="hl sym">{</span>i <span class="hl sym">&lt;</span> len<span class="hl sym">}</span>.while_do <span class="hl sym">{</span>
      c <span class="hl sym">:=</span> s.item i<span class="hl sym">;</span>
      s.put <span class="hl sym">(</span>iub_complement.item<span class="hl sym">((</span>s.item len<span class="hl sym">)</span>.to_integer<span class="hl sym">))</span> to i<span class="hl sym">;</span>
      s.put <span class="hl sym">(</span>iub_complement.item<span class="hl sym">(</span>c.to_integer<span class="hl sym">))</span> to len<span class="hl sym">;</span>
      i <span class="hl sym">:=</span> i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
      len <span class="hl sym">:=</span> len <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>
    <span class="hl sym">};</span>

    <span class="hl sym">(</span>i <span class="hl sym">=</span> len<span class="hl sym">)</span>.if <span class="hl sym">{</span>
      s.put<span class="hl sym">(</span>iub_complement.item<span class="hl sym">((</span>s.item i<span class="hl sym">)</span>.to_integer<span class="hl sym">))</span> to i<span class="hl sym">;</span>
    <span class="hl sym">};</span>
  <span class="hl sym">);</span>

  <span class="hl sym">-</span> process <span class="hl sym">&lt;-</span>
  <span class="hl sym">( +</span> c <span class="hl sym">:</span>CHARACTER<span class="hl sym">;</span>
    <span class="hl sym">+</span> s <span class="hl sym">:</span>NATIVE_ARRAY<span class="hl sym">[</span>CHARACTER<span class="hl sym">];</span>
    <span class="hl sym">+</span> len<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>

    in_place_reverse<span class="hl sym">;</span>

    s <span class="hl sym">:=</span> buffer.storage<span class="hl sym">;</span>
    len <span class="hl sym">:=</span> buffer.count<span class="hl sym">;</span>

    <span class="hl sym">{</span>len <span class="hl sym">&gt;</span> <span class="hl num">60</span><span class="hl sym">}</span>.while_do<span class="hl sym">{</span>
      c <span class="hl sym">:=</span> s.item <span class="hl num">60</span><span class="hl sym">;</span>
      s.put <span class="hl str">'\0'</span> to <span class="hl num">60</span><span class="hl sym">;</span>
      puts s<span class="hl sym">;</span>
      s.put c to <span class="hl num">60</span><span class="hl sym">;</span>
      s <span class="hl sym">:=</span> s <span class="hl sym">+</span> <span class="hl num">60</span><span class="hl sym">;</span>
      len <span class="hl sym">:=</span> len <span class="hl sym">-</span> <span class="hl num">60</span><span class="hl sym">;</span>
    <span class="hl sym">};</span>

    s.put <span class="hl str">'\0'</span> to len<span class="hl sym">;</span>
    puts s<span class="hl sym">;</span>
  <span class="hl sym">);</span>

  <span class="hl sym">-</span> main <span class="hl sym">&lt;-</span>
  <span class="hl sym">( +</span> mlen   <span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
    <span class="hl sym">+</span> line<span class="hl sym">:</span>STRING<span class="hl sym">;</span>

    buffer <span class="hl sym">:=</span> STRING.create <span class="hl num">16777216</span><span class="hl sym">;</span>
    mlen <span class="hl sym">:=</span> <span class="hl num">128</span><span class="hl sym">;</span>
    build_iub_complement<span class="hl sym">;</span>

    IO.read_line<span class="hl sym">;</span>
    line <span class="hl sym">:=</span> IO.last_string<span class="hl sym">;</span>
    <span class="hl sym">{</span>IO.end_of_input<span class="hl sym">}</span>.until_do <span class="hl sym">{</span>
      <span class="hl sym">(!</span> line.is_empty<span class="hl sym">)</span>.if <span class="hl sym">{</span>
        <span class="hl sym">(</span>line.first <span class="hl sym">=</span> <span class="hl str">'&gt;'</span><span class="hl sym">)</span>.if <span class="hl sym">{</span>
          <span class="hl sym">(</span>buffer.is_empty<span class="hl sym">)</span>.if_false <span class="hl sym">{</span>
            process<span class="hl sym">;</span>
          <span class="hl sym">};</span>
          IO.put_string line<span class="hl sym">;</span>
          IO.put_new_line<span class="hl sym">;</span>
          buffer.clear<span class="hl sym">;</span>
        <span class="hl sym">}</span> else <span class="hl sym">{</span>
          buffer.append line<span class="hl sym">;</span>
        <span class="hl sym">};</span>
      <span class="hl sym">};</span>
      IO.read_line<span class="hl sym">;</span>
    <span class="hl sym">};</span>

    <span class="hl sym">(!</span> buffer.is_empty<span class="hl sym">)</span>.if <span class="hl sym">{</span>
      process<span class="hl sym">;</span>
    <span class="hl sym">};</span>

  <span class="hl sym">);</span>
