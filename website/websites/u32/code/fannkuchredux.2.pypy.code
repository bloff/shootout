<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://shootout.alioth.debian.org/</span>
<span class="hl slc">#</span>
<span class="hl slc"># contributed by Sokolov Yura</span>
<span class="hl slc"># modified by Tupteq</span>
<span class="hl slc"># modified by Isaac Gouy</span>

<span class="hl kwa">def</span> <span class="hl kwd">fannkuch</span><span class="hl sym">(</span>n<span class="hl sym">):</span>
    count <span class="hl sym">=</span> <span class="hl kwb">range</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> n<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>
    max_flips <span class="hl sym">=</span> <span class="hl num">0</span>
    m <span class="hl sym">=</span> n<span class="hl sym">-</span><span class="hl num">1</span>
    r <span class="hl sym">=</span> n
    perm_count <span class="hl sym">=</span> <span class="hl num">0</span>
    checksum <span class="hl sym">=</span> <span class="hl num">0</span>
    perm1 <span class="hl sym">=</span> <span class="hl kwb">range</span><span class="hl sym">(</span>n<span class="hl sym">)</span>
    perm <span class="hl sym">=</span> <span class="hl kwb">range</span><span class="hl sym">(</span>n<span class="hl sym">)</span>
    perm1_ins <span class="hl sym">=</span> perm1<span class="hl sym">.</span>insert
    perm1_pop <span class="hl sym">=</span> perm1<span class="hl sym">.</span>pop

    <span class="hl kwa">while</span> <span class="hl num">1</span><span class="hl sym">:</span>
        <span class="hl kwa">while</span> r <span class="hl sym">!=</span> <span class="hl num">1</span><span class="hl sym">:</span>
            count<span class="hl sym">[</span>r<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">] =</span> r
            r <span class="hl sym">-=</span> <span class="hl num">1</span>

        perm <span class="hl sym">=</span> perm1<span class="hl sym">[:]</span>
        flips_count <span class="hl sym">=</span> <span class="hl num">0</span>
        k <span class="hl sym">=</span> perm<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]</span>
        <span class="hl kwa">while</span> k<span class="hl sym">:</span>
            perm<span class="hl sym">[:</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">] =</span> perm<span class="hl sym">[</span>k<span class="hl sym">::-</span><span class="hl num">1</span><span class="hl sym">]</span>
            flips_count <span class="hl sym">+=</span> <span class="hl num">1</span>
            k <span class="hl sym">=</span> perm<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]</span>

        <span class="hl kwa">if</span> flips_count <span class="hl sym">&gt;</span> max_flips<span class="hl sym">:</span>
            max_flips <span class="hl sym">=</span> flips_count

        <span class="hl kwa">if</span> perm_count <span class="hl sym">%</span> <span class="hl num">2</span> <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">:</span>
            checksum <span class="hl sym">+=</span> flips_count
        <span class="hl kwa">else</span><span class="hl sym">:</span>
            checksum <span class="hl sym">-=</span> flips_count

        <span class="hl kwa">while</span> r <span class="hl sym">!=</span> n<span class="hl sym">:</span>
            <span class="hl kwd">perm1_ins</span><span class="hl sym">(</span>r<span class="hl sym">,</span> <span class="hl kwd">perm1_pop</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">))</span>
            count<span class="hl sym">[</span>r<span class="hl sym">] -=</span> <span class="hl num">1</span>
            <span class="hl kwa">if</span> count<span class="hl sym">[</span>r<span class="hl sym">] &gt;</span> <span class="hl num">0</span><span class="hl sym">:</span>
                <span class="hl kwa">break</span>
            r <span class="hl sym">+=</span> <span class="hl num">1</span>
        <span class="hl kwa">else</span><span class="hl sym">:</span>
            <span class="hl kwa">print</span><span class="hl sym">(</span>checksum<span class="hl sym">)</span>
            <span class="hl kwa">return</span> max_flips

        perm_count <span class="hl sym">+=</span> <span class="hl num">1</span>
        <span class="hl kwa">if</span> perm_count <span class="hl sym">==</span> <span class="hl num">1048576</span><span class="hl sym">:</span>
            perm_count <span class="hl sym">=</span> <span class="hl num">0</span>

<span class="hl kwa">def</span> <span class="hl kwd">main</span><span class="hl sym">():</span>
    <span class="hl kwa">from</span> sys <span class="hl kwa">import</span> argv
    n <span class="hl sym">=</span> <span class="hl kwb">int</span><span class="hl sym">(</span>argv <span class="hl kwa">and</span> argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]</span> <span class="hl kwa">or</span> <span class="hl num">1</span><span class="hl sym">)</span>
    <span class="hl kwa">print</span> <span class="hl str">&quot;Pfannkuchen(%d) = %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl sym">% (</span>n<span class="hl sym">,</span> <span class="hl kwd">fannkuch</span><span class="hl sym">(</span>n<span class="hl sym">)),</span>

<span class="hl kwa">if</span> __name__<span class="hl sym">==</span><span class="hl str">&quot;__main__&quot;</span><span class="hl sym">:</span>
    <span class="hl kwd">main</span><span class="hl sym">()</span>
