<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Kevin Carson</span>
<span class="hl com">   modified by Isaac Gouy for CINT</span>
<span class="hl com">*/</span>

<span class="hl dir">#include &lt;stdio.h&gt;</span>
<span class="hl dir">#include &lt;stdlib.h&gt;</span>
<span class="hl dir">#include &lt;math.h&gt;</span>


<span class="hl kwc">typedef</span> <span class="hl kwb">struct</span> tn <span class="hl sym">{</span>
    <span class="hl kwb">struct</span> tn<span class="hl sym">*</span>    left<span class="hl sym">;</span>
    <span class="hl kwb">struct</span> tn<span class="hl sym">*</span>    right<span class="hl sym">;</span>
    <span class="hl kwb">long</span>          item<span class="hl sym">;</span>
<span class="hl sym">}</span> treeNode<span class="hl sym">;</span>


treeNode<span class="hl sym">*</span> <span class="hl kwd">NewTreeNode</span><span class="hl sym">(</span>treeNode<span class="hl sym">*</span> left<span class="hl sym">,</span> treeNode<span class="hl sym">*</span> right<span class="hl sym">,</span> <span class="hl kwb">long</span> item<span class="hl sym">)</span>
<span class="hl sym">{</span>
    treeNode<span class="hl sym">*</span>    newNode<span class="hl sym">;</span>

    newNode <span class="hl sym">= (</span>treeNode<span class="hl sym">*)</span><span class="hl kwd">malloc</span><span class="hl sym">(</span><span class="hl kwa">sizeof</span><span class="hl sym">(</span>treeNode<span class="hl sym">));</span>

    newNode<span class="hl sym">-&gt;</span>left <span class="hl sym">=</span> left<span class="hl sym">;</span>
    newNode<span class="hl sym">-&gt;</span>right <span class="hl sym">=</span> right<span class="hl sym">;</span>
    newNode<span class="hl sym">-&gt;</span>item <span class="hl sym">=</span> item<span class="hl sym">;</span>

    <span class="hl kwa">return</span> newNode<span class="hl sym">;</span>
<span class="hl sym">}</span> <span class="hl com">/* NewTreeNode() */</span>


<span class="hl kwb">long</span> <span class="hl kwd">ItemCheck</span><span class="hl sym">(</span>treeNode<span class="hl sym">*</span> tree<span class="hl sym">)</span>
<span class="hl sym">{</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>tree<span class="hl sym">-&gt;</span>left <span class="hl sym">==</span> NULL<span class="hl sym">)</span>
        <span class="hl kwa">return</span> tree<span class="hl sym">-&gt;</span>item<span class="hl sym">;</span>
    <span class="hl kwa">else</span>
        <span class="hl kwa">return</span> tree<span class="hl sym">-&gt;</span>item <span class="hl sym">+</span> <span class="hl kwd">ItemCheck</span><span class="hl sym">(</span>tree<span class="hl sym">-&gt;</span>left<span class="hl sym">) -</span> <span class="hl kwd">ItemCheck</span><span class="hl sym">(</span>tree<span class="hl sym">-&gt;</span>right<span class="hl sym">);</span>
<span class="hl sym">}</span> <span class="hl com">/* ItemCheck() */</span>


treeNode<span class="hl sym">*</span> <span class="hl kwd">BottomUpTree</span><span class="hl sym">(</span><span class="hl kwb">long</span> item<span class="hl sym">,</span> <span class="hl kwb">unsigned</span> depth<span class="hl sym">)</span>
<span class="hl sym">{</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>depth <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
        <span class="hl kwa">return</span> NewTreeNode
        <span class="hl sym">(</span>
            <span class="hl kwd">BottomUpTree</span><span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> item <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> depth <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">),</span>
            <span class="hl kwd">BottomUpTree</span><span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> item<span class="hl sym">,</span> depth <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">),</span>
            item
        <span class="hl sym">);</span>
    <span class="hl kwa">else</span>
        <span class="hl kwa">return</span> <span class="hl kwd">NewTreeNode</span><span class="hl sym">(</span>NULL<span class="hl sym">,</span> NULL<span class="hl sym">,</span> item<span class="hl sym">);</span>
<span class="hl sym">}</span> <span class="hl com">/* BottomUpTree() */</span>


<span class="hl kwb">void</span> <span class="hl kwd">DeleteTree</span><span class="hl sym">(</span>treeNode<span class="hl sym">*</span> tree<span class="hl sym">)</span>
<span class="hl sym">{</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>tree<span class="hl sym">-&gt;</span>left <span class="hl sym">!=</span> NULL<span class="hl sym">)</span>
    <span class="hl sym">{</span>
        <span class="hl kwd">DeleteTree</span><span class="hl sym">(</span>tree<span class="hl sym">-&gt;</span>left<span class="hl sym">);</span>
        <span class="hl kwd">DeleteTree</span><span class="hl sym">(</span>tree<span class="hl sym">-&gt;</span>right<span class="hl sym">);</span>
    <span class="hl sym">}</span>

    <span class="hl kwd">free</span><span class="hl sym">(</span>tree<span class="hl sym">);</span>
<span class="hl sym">}</span> <span class="hl com">/* DeleteTree() */</span>


<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">**</span> argv<span class="hl sym">)</span>
<span class="hl sym">{</span>
    <span class="hl kwb">unsigned</span>   N<span class="hl sym">,</span> depth<span class="hl sym">,</span> minDepth<span class="hl sym">,</span> maxDepth<span class="hl sym">,</span> stretchDepth<span class="hl sym">;</span>
    treeNode   <span class="hl sym">*</span>stretchTree<span class="hl sym">, *</span>longLivedTree<span class="hl sym">, *</span>tempTree<span class="hl sym">;</span>

    N <span class="hl sym">=</span> <span class="hl kwd">atol</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]);</span>

    minDepth <span class="hl sym">=</span> <span class="hl num">4</span><span class="hl sym">;</span>

    <span class="hl kwa">if</span> <span class="hl sym">((</span>minDepth <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">) &gt;</span> N<span class="hl sym">)</span>
        maxDepth <span class="hl sym">=</span> minDepth <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">;</span>
    <span class="hl kwa">else</span>
        maxDepth <span class="hl sym">=</span> N<span class="hl sym">;</span>

    stretchDepth <span class="hl sym">=</span> maxDepth <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>

    stretchTree <span class="hl sym">=</span> <span class="hl kwd">BottomUpTree</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> stretchDepth<span class="hl sym">);</span>
    printf
    <span class="hl sym">(</span>
        <span class="hl str">&quot;stretch tree of depth %u</span><span class="hl esc">\t</span> <span class="hl str">check: %li</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span>
        stretchDepth<span class="hl sym">,</span>
        <span class="hl kwd">ItemCheck</span><span class="hl sym">(</span>stretchTree<span class="hl sym">)</span>
    <span class="hl sym">);</span>

    <span class="hl kwd">DeleteTree</span><span class="hl sym">(</span>stretchTree<span class="hl sym">);</span>

    longLivedTree <span class="hl sym">=</span> <span class="hl kwd">BottomUpTree</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> maxDepth<span class="hl sym">);</span>

    <span class="hl kwa">for</span> <span class="hl sym">(</span>depth <span class="hl sym">=</span> minDepth<span class="hl sym">;</span> depth <span class="hl sym">&lt;=</span> maxDepth<span class="hl sym">;</span> depth <span class="hl sym">+=</span> <span class="hl num">2</span><span class="hl sym">)</span>
    <span class="hl sym">{</span>
        <span class="hl kwb">long</span>    i<span class="hl sym">,</span> iterations<span class="hl sym">,</span> check<span class="hl sym">;</span>

        iterations <span class="hl sym">=</span> <span class="hl kwd">pow</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">,</span> maxDepth <span class="hl sym">-</span> depth <span class="hl sym">+</span> minDepth<span class="hl sym">);</span>

        check <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

        <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span> i <span class="hl sym">&lt;=</span> iterations<span class="hl sym">;</span> i<span class="hl sym">++)</span>
        <span class="hl sym">{</span>
            tempTree <span class="hl sym">=</span> <span class="hl kwd">BottomUpTree</span><span class="hl sym">(</span>i<span class="hl sym">,</span> depth<span class="hl sym">);</span>
            check <span class="hl sym">+=</span> <span class="hl kwd">ItemCheck</span><span class="hl sym">(</span>tempTree<span class="hl sym">);</span>
            <span class="hl kwd">DeleteTree</span><span class="hl sym">(</span>tempTree<span class="hl sym">);</span>

            tempTree <span class="hl sym">=</span> <span class="hl kwd">BottomUpTree</span><span class="hl sym">(-</span>i<span class="hl sym">,</span> depth<span class="hl sym">);</span>
            check <span class="hl sym">+=</span> <span class="hl kwd">ItemCheck</span><span class="hl sym">(</span>tempTree<span class="hl sym">);</span>
            <span class="hl kwd">DeleteTree</span><span class="hl sym">(</span>tempTree<span class="hl sym">);</span>
        <span class="hl sym">}</span> <span class="hl com">/* for(i = 1...) */</span>

        printf
        <span class="hl sym">(</span>
            <span class="hl str">&quot;%li</span><span class="hl esc">\t</span> <span class="hl str">trees of depth %u</span><span class="hl esc">\t</span> <span class="hl str">check: %li</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span>
            iterations <span class="hl sym">*</span> <span class="hl num">2</span><span class="hl sym">,</span>
            depth<span class="hl sym">,</span>
            check
        <span class="hl sym">);</span>
    <span class="hl sym">}</span> <span class="hl com">/* for(depth = minDepth...) */</span>

    printf
    <span class="hl sym">(</span>
        <span class="hl str">&quot;long lived tree of depth %u</span><span class="hl esc">\t</span> <span class="hl str">check: %li</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span>
        maxDepth<span class="hl sym">,</span>
        <span class="hl kwd">ItemCheck</span><span class="hl sym">(</span>longLivedTree<span class="hl sym">)</span>
    <span class="hl sym">);</span>

    <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span> <span class="hl com">/* main() */</span>
