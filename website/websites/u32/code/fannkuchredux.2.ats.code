<span class="hl com">(*</span>
<span class="hl com">** The Computer Language Benchmarks Game</span>
<span class="hl com">** http://shootout.alioth.debian.org/</span>
<span class="hl com">**</span>
<span class="hl com">** based on code by Hongwei Xi, Miroslav Rubanets, and Oleg Mazurov</span>
<span class="hl com">** contributed by Julian Beaumont</span>
<span class="hl com">**</span>
<span class="hl com">** compilation command:</span>
<span class="hl com">**   atscc -fomit-frame-pointer -O3 fannkuchredux.dats -o fannkuchredux</span>
<span class="hl com">*)</span>

<span class="hl com">(* ****** ****** *)</span>

staload _ <span class="hl sym">=</span> <span class="hl str">&quot;prelude/DATS/pointer.dats&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl sym">%{</span>^
<span class="hl slc">//</span>
<span class="hl slc">// HX: this is the best choice on my machine</span>
<span class="hl slc">//</span>
<span class="hl kwa">typedef</span> ats_uint_type ats_ussi_type <span class="hl sym">;</span>
<span class="hl sym">%}</span>
abst&#64;ype ussiLt <span class="hl sym">(</span>n<span class="hl sym">:</span> int<span class="hl sym">) =</span> $extype <span class="hl str">&quot;ats_ussi_type&quot;</span>

<span class="hl kwa">extern</span> castfn ussiLt_of <span class="hl sym">{</span>n <span class="hl sym">:</span> nat <span class="hl sym">|</span> n <span class="hl sym">&lt;=</span> <span class="hl num">256</span><span class="hl sym">} (</span>x <span class="hl sym">:</span> sizeLt  n<span class="hl sym">) :&lt;&gt;</span> ussiLt n
<span class="hl kwa">extern</span> castfn sizeLt_of  <span class="hl sym">{</span>n <span class="hl sym">:</span> nat <span class="hl sym">|</span> n <span class="hl sym">&lt;=</span> <span class="hl num">256</span><span class="hl sym">} (</span>x <span class="hl sym">:</span> ussiLt n<span class="hl sym">) :&lt;&gt;</span> sizeLt n

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">viewtypedef</span> iarray <span class="hl sym">(</span>n <span class="hl sym">:</span> int<span class="hl sym">,</span> l <span class="hl sym">:</span> addr<span class="hl sym">)</span>
  <span class="hl sym">= [</span><span class="hl num">0</span> <span class="hl sym">&lt;</span> n <span class="hl sym">&amp;&amp;</span> n <span class="hl sym">&lt;=</span> <span class="hl num">256</span><span class="hl sym">]</span> &#64;<span class="hl sym">(</span> array_v <span class="hl sym">(</span>ussiLt n<span class="hl sym">,</span> n<span class="hl sym">,</span> l<span class="hl sym">) |</span> ptr l <span class="hl sym">)</span>

<span class="hl kwa">fn</span> array_get <span class="hl sym">{</span>n <span class="hl sym">:</span> nat<span class="hl sym">} {</span>l <span class="hl sym">:</span> addr<span class="hl sym">} {</span>i <span class="hl sym">:</span> nat <span class="hl sym">|</span> i <span class="hl sym">&lt;</span> n<span class="hl sym">}</span>
  <span class="hl sym">(</span>xs <span class="hl sym">: !</span> iarray <span class="hl sym">(</span>n<span class="hl sym">,</span> l<span class="hl sym">),</span> i <span class="hl sym">:</span> size_t i<span class="hl sym">) :&lt;&gt;</span> sizeLt n <span class="hl sym">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">prval</span> pf <span class="hl sym">=</span> xs<span class="hl num">.0</span>
  <span class="hl kwa">val</span> p <span class="hl sym">=</span> xs<span class="hl num">.1</span>
  <span class="hl kwa">val</span> result <span class="hl sym">=</span> p<span class="hl sym">-&gt;[</span>i<span class="hl sym">]</span>
  <span class="hl kwa">prval</span> <span class="hl sym">() =</span> xs<span class="hl num">.0</span> <span class="hl sym">:=</span> pf
<span class="hl kwa">in</span> sizeLt_of <span class="hl sym">{</span>n<span class="hl sym">} (</span>result<span class="hl sym">)</span> <span class="hl kwa">end</span>

<span class="hl kwa">fn</span> array_set <span class="hl sym">{</span>n <span class="hl sym">:</span> nat<span class="hl sym">} {</span>l <span class="hl sym">:</span> addr<span class="hl sym">} {</span>i <span class="hl sym">:</span> nat <span class="hl sym">|</span> i <span class="hl sym">&lt;</span> n<span class="hl sym">}</span>
  <span class="hl sym">(</span>xs <span class="hl sym">: !</span> iarray <span class="hl sym">(</span>n<span class="hl sym">,</span> l<span class="hl sym">),</span> i <span class="hl sym">:</span> size_t i<span class="hl sym">,</span> x <span class="hl sym">:</span> sizeLt n<span class="hl sym">) :&lt;&gt;</span> void <span class="hl sym">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">prval</span> pf <span class="hl sym">=</span> xs<span class="hl num">.0</span>
  <span class="hl kwa">val</span> p <span class="hl sym">=</span> xs<span class="hl num">.1</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> p<span class="hl sym">-&gt;[</span>i<span class="hl sym">] := (</span>ussiLt_of<span class="hl sym">)</span>x
  <span class="hl kwa">prval</span> <span class="hl sym">() =</span> xs<span class="hl num">.0</span> <span class="hl sym">:=</span> pf
<span class="hl kwa">in</span> <span class="hl sym">()</span> <span class="hl kwa">end</span>

<span class="hl kwa">overload</span> <span class="hl sym">[]</span> <span class="hl kwa">with</span> array_get
<span class="hl kwa">overload</span> <span class="hl sym">[]</span> <span class="hl kwa">with</span> array_set

<span class="hl com">(* ****** ****** *)</span>

<span class="hl sym">%{</span>^
ATSinline<span class="hl sym">()</span>
ats_void_type array_copy
 <span class="hl sym">(</span>ats_ptr_type src<span class="hl sym">,</span> ats_ptr_type dst<span class="hl sym">,</span> ats_size_type n<span class="hl sym">) {</span>
  memcpy <span class="hl sym">(</span>dst<span class="hl sym">,</span> src<span class="hl sym">,</span> n<span class="hl sym">*</span>sizeof<span class="hl sym">(</span>ats_ussi_type<span class="hl sym">));</span>
<span class="hl sym">}</span>
<span class="hl sym">%}</span>

<span class="hl kwa">extern fun</span> array_copy <span class="hl sym">{</span>n <span class="hl sym">:</span> nat<span class="hl sym">} {</span>s<span class="hl sym">,</span> d <span class="hl sym">:</span> addr<span class="hl sym">}</span>
    <span class="hl sym">(</span> src <span class="hl sym">: !</span> iarray <span class="hl sym">(</span>n<span class="hl sym">,</span> s<span class="hl sym">),</span> dst <span class="hl sym">: !</span> iarray <span class="hl sym">(</span>n<span class="hl sym">,</span> d<span class="hl sym">),</span> n <span class="hl sym">:</span> size_t n
    <span class="hl sym">) :&lt;&gt;</span> void <span class="hl sym">=</span> <span class="hl str">&quot;array_copy&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">fn</span> array_fprint <span class="hl sym">{</span>n <span class="hl sym">:</span> nat<span class="hl sym">} {</span>l <span class="hl sym">:</span> addr<span class="hl sym">}</span>
  <span class="hl sym">(</span> out <span class="hl sym">:</span> FILEref<span class="hl sym">,</span> xs <span class="hl sym">: !</span> iarray <span class="hl sym">(</span>n<span class="hl sym">,</span> l<span class="hl sym">),</span> n <span class="hl sym">:</span> size_t n <span class="hl sym">) :</span> void <span class="hl sym">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">var</span> i <span class="hl sym">:</span> sizeLte n <span class="hl sym">=</span> size1_of_int1 <span class="hl num">0</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> n<span class="hl sym">) (</span>fprint_size <span class="hl sym">(</span>out<span class="hl sym">,</span> xs<span class="hl sym">[</span>i<span class="hl sym">]);</span> i <span class="hl sym">:=</span> i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> fprint_char <span class="hl sym">(</span>out<span class="hl sym">,</span> '\n'<span class="hl sym">)</span>
<span class="hl kwa">in end</span>

<span class="hl kwa">fn</span> array_print <span class="hl sym">{</span>n <span class="hl sym">:</span> nat<span class="hl sym">} {</span>l <span class="hl sym">:</span> addr<span class="hl sym">}</span>
  <span class="hl sym">(</span> xs <span class="hl sym">: !</span> iarray <span class="hl sym">(</span>n<span class="hl sym">,</span> l<span class="hl sym">),</span> n <span class="hl sym">:</span> size_t n <span class="hl sym">) :</span> void <span class="hl sym">=</span> <span class="hl kwa">begin</span>
  array_fprint <span class="hl sym">(</span>stdout_ref<span class="hl sym">,</span> xs<span class="hl sym">,</span> n<span class="hl sym">)</span>
<span class="hl kwa">end</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">fun</span> array_init <span class="hl sym">{</span>n <span class="hl sym">:</span> nat<span class="hl sym">} {</span>l <span class="hl sym">:</span> addr<span class="hl sym">} {</span>i <span class="hl sym">:</span> nat <span class="hl sym">|</span> i <span class="hl sym">&lt;=</span> n<span class="hl sym">} .&lt;</span> n <span class="hl sym">-</span> i <span class="hl sym">&gt;.</span>
        <span class="hl sym">(</span>xs <span class="hl sym">: !</span> iarray <span class="hl sym">(</span>n<span class="hl sym">,</span> l<span class="hl sym">),</span> n <span class="hl sym">:</span> size_t n<span class="hl sym">,</span> i <span class="hl sym">:</span> size_t i<span class="hl sym">) :&lt;&gt;</span> void <span class="hl sym">=</span>
    <span class="hl kwa">if</span> i <span class="hl sym">&lt;</span> n <span class="hl kwa">then</span> <span class="hl sym">(</span>xs<span class="hl sym">[</span>i<span class="hl sym">] :=</span> i <span class="hl sym">;</span> array_init <span class="hl sym">(</span>xs<span class="hl sym">,</span> n<span class="hl sym">,</span> i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">))</span>

<span class="hl kwa">fun</span> array_shift <span class="hl sym">{</span>n<span class="hl sym">,</span> i<span class="hl sym">,</span> j <span class="hl sym">:</span> nat <span class="hl sym">|</span> i <span class="hl sym">&lt;=</span> j <span class="hl sym">;</span> j <span class="hl sym">&lt;</span> n<span class="hl sym">} {</span>l <span class="hl sym">:</span> addr<span class="hl sym">} .&lt;</span> j <span class="hl sym">-</span> i <span class="hl sym">&gt;.</span>
        <span class="hl sym">(</span>xs <span class="hl sym">: !</span> iarray <span class="hl sym">(</span>n<span class="hl sym">,</span> l<span class="hl sym">),</span> i <span class="hl sym">:</span> size_t i<span class="hl sym">,</span> j <span class="hl sym">:</span> size_t j<span class="hl sym">) :&lt;&gt;</span> void <span class="hl sym">=</span>
    <span class="hl kwa">if</span> i <span class="hl sym">&lt;</span> j <span class="hl kwa">then</span> <span class="hl sym">(</span>xs<span class="hl sym">[</span>i<span class="hl sym">] :=</span> xs<span class="hl sym">[</span>i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">] ;</span> array_shift <span class="hl sym">(</span>xs<span class="hl sym">,</span> i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span> j<span class="hl sym">))</span>

<span class="hl kwa">fn</span> array_rotate <span class="hl sym">{</span>n <span class="hl sym">:</span> nat<span class="hl sym">} {</span>l <span class="hl sym">:</span> addr<span class="hl sym">}</span>
        <span class="hl sym">(</span>xs <span class="hl sym">: !</span> iarray <span class="hl sym">(</span>n<span class="hl sym">,</span> l<span class="hl sym">),</span> i <span class="hl sym">:</span> sizeLt n<span class="hl sym">) :&lt;&gt;</span> void <span class="hl sym">=</span> <span class="hl kwa">let</span>
    <span class="hl kwa">val</span> x0 <span class="hl sym">=</span> xs<span class="hl sym">[</span>size1_of_int1 <span class="hl num">0</span><span class="hl sym">]</span>
    <span class="hl kwa">val</span> <span class="hl sym">() =</span> array_shift <span class="hl sym">(</span>xs<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> i<span class="hl sym">)</span>
    <span class="hl kwa">val</span> <span class="hl sym">() =</span> xs<span class="hl sym">[</span>i<span class="hl sym">] :=</span> x0
<span class="hl kwa">in</span> <span class="hl sym">()</span> <span class="hl kwa">end</span>

<span class="hl kwa">fun</span> array_reverse <span class="hl sym">{</span>n <span class="hl sym">:</span> nat<span class="hl sym">} {</span>x <span class="hl sym">:</span> addr<span class="hl sym">}</span> 
            <span class="hl sym">{</span>l<span class="hl sym">,</span> u <span class="hl sym">:</span> nat <span class="hl sym">|</span> l <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl sym">&lt;=</span> u <span class="hl sym">;</span> u <span class="hl sym">&lt;</span> n<span class="hl sym">} .&lt;</span> u <span class="hl sym">-</span> l <span class="hl sym">+</span> <span class="hl num">1</span> <span class="hl sym">&gt;.</span>
        <span class="hl sym">(</span>xs <span class="hl sym">: !</span> iarray <span class="hl sym">(</span>n<span class="hl sym">,</span> x<span class="hl sym">),</span> l <span class="hl sym">:</span> size_t l<span class="hl sym">,</span> u <span class="hl sym">:</span> size_t u<span class="hl sym">) :&lt;&gt;</span> void <span class="hl sym">=</span> <span class="hl kwa">begin</span>
    <span class="hl kwa">if</span> l <span class="hl sym">&lt;</span> u <span class="hl kwa">then let</span>
        <span class="hl kwa">val</span> xl <span class="hl sym">=</span> xs<span class="hl sym">[</span>l<span class="hl sym">]</span>
        <span class="hl kwa">val</span> <span class="hl sym">() =</span> xs<span class="hl sym">[</span>l<span class="hl sym">] :=</span> xs<span class="hl sym">[</span>u<span class="hl sym">]</span>
        <span class="hl kwa">val</span> <span class="hl sym">() =</span> xs<span class="hl sym">[</span>u<span class="hl sym">] :=</span> xl
        <span class="hl kwa">val</span> <span class="hl sym">() =</span> array_reverse <span class="hl sym">(</span>xs<span class="hl sym">,</span> l <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span> u <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span>
    <span class="hl kwa">in</span> <span class="hl sym">()</span> <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

<span class="hl kwa">fun</span> array_next_permutation <span class="hl sym">{</span>n <span class="hl sym">:</span> nat<span class="hl sym">} {</span>c<span class="hl sym">,</span> p <span class="hl sym">:</span> addr<span class="hl sym">}</span> 
            <span class="hl sym">{</span>i <span class="hl sym">:</span> nat <span class="hl sym">|</span> i <span class="hl sym">&lt;</span> n<span class="hl sym">} .&lt;</span> n <span class="hl sym">-</span> i <span class="hl sym">&gt;.</span>
        <span class="hl sym">(</span> cs <span class="hl sym">: !</span> iarray <span class="hl sym">(</span>n<span class="hl sym">,</span> c<span class="hl sym">),</span> ps <span class="hl sym">: !</span> iarray <span class="hl sym">(</span>n<span class="hl sym">,</span> p<span class="hl sym">)</span>
        <span class="hl sym">,</span> n <span class="hl sym">:</span> size_t n<span class="hl sym">,</span> i <span class="hl sym">:</span> size_t i
        <span class="hl sym">) :&lt;&gt;</span> sizeLte n <span class="hl sym">=</span> <span class="hl kwa">let</span>
    <span class="hl kwa">val</span> <span class="hl sym">() =</span> array_rotate <span class="hl sym">(</span>ps<span class="hl sym">,</span> i<span class="hl sym">)</span>
    <span class="hl kwa">val</span> ci <span class="hl sym">=</span> cs<span class="hl sym">[</span>i<span class="hl sym">]</span> <span class="hl kwa">in</span>
    <span class="hl kwa">if</span> ci <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span> <span class="hl sym">(</span>cs<span class="hl sym">[</span>i<span class="hl sym">] :=</span> ci <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl sym">;</span> i<span class="hl sym">)</span> <span class="hl kwa">else let</span>
        <span class="hl kwa">val</span> <span class="hl sym">() =</span> cs<span class="hl sym">[</span>i<span class="hl sym">] :=</span> i <span class="hl kwa">in</span>
        <span class="hl kwa">if</span> i <span class="hl sym">+</span> <span class="hl num">1</span> <span class="hl sym">&gt;=</span> n <span class="hl kwa">then</span> i <span class="hl sym">+</span> <span class="hl num">1</span> <span class="hl kwa">else</span>
            array_next_permutation <span class="hl sym">(</span>cs<span class="hl sym">,</span> ps<span class="hl sym">,</span> n<span class="hl sym">,</span> i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
    <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">typedef</span> result <span class="hl sym">=</span>
    &#64;<span class="hl sym">{</span> maxFlips <span class="hl sym">=</span> int
     <span class="hl sym">,</span> checksum <span class="hl sym">=</span> int
     <span class="hl sym">}</span>

<span class="hl kwa">fun</span> fannkuch <span class="hl sym">{</span>n <span class="hl sym">:</span> nat <span class="hl sym">|</span> n <span class="hl sym">&gt;=</span> <span class="hl num">2</span><span class="hl sym">} {</span>c<span class="hl sym">,</span> p<span class="hl sym">,</span> s <span class="hl sym">:</span> addr<span class="hl sym">}</span>
        <span class="hl sym">(</span> cs <span class="hl sym">: !</span> iarray <span class="hl sym">(</span>n<span class="hl sym">,</span> c<span class="hl sym">),</span> ps <span class="hl sym">: !</span> iarray <span class="hl sym">(</span>n<span class="hl sym">,</span> p<span class="hl sym">),</span> ss <span class="hl sym">: !</span> iarray <span class="hl sym">(</span>n<span class="hl sym">,</span> s<span class="hl sym">)</span>
        <span class="hl sym">,</span> n <span class="hl sym">:</span> size_t n<span class="hl sym">,</span> count <span class="hl sym">:</span> int<span class="hl sym">,</span> result <span class="hl sym">: &amp;</span>result
        <span class="hl sym">) :</span> void <span class="hl sym">=</span> <span class="hl kwa">let</span>
    <span class="hl kwa">val</span> <span class="hl sym">() =</span>
        <span class="hl kwa">if</span> array_get <span class="hl sym">(</span>ps<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">) =</span> <span class="hl num">0</span> <span class="hl kwa">then</span> <span class="hl sym">()</span> <span class="hl kwa">else let</span>
            <span class="hl kwa">var</span> flips <span class="hl sym">:</span> int <span class="hl sym">=</span> <span class="hl num">0</span>
            <span class="hl kwa">val</span> <span class="hl sym">() =</span> array_copy <span class="hl sym">(</span>ps<span class="hl sym">,</span> ss<span class="hl sym">,</span> n<span class="hl sym">)</span>
            <span class="hl kwa">var</span> s0 <span class="hl sym">:</span> sizeLt n <span class="hl sym">=</span> ss<span class="hl sym">[</span>size1_of_int1 <span class="hl num">0</span><span class="hl sym">]</span>
            <span class="hl kwa">val</span> <span class="hl sym">() =</span> <span class="hl kwa">while</span> <span class="hl sym">(</span>s0 <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">let</span>
                <span class="hl kwa">val</span> <span class="hl sym">() =</span> flips <span class="hl sym">:=</span> flips <span class="hl sym">+</span> <span class="hl num">1</span>
                <span class="hl kwa">val</span> <span class="hl sym">() =</span> array_reverse <span class="hl sym">(</span>ss<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> s0<span class="hl sym">)</span>
                <span class="hl kwa">val</span> <span class="hl sym">() =</span> s0 <span class="hl sym">:=</span> ss<span class="hl sym">[</span>size1_of_int1 <span class="hl num">0</span><span class="hl sym">]</span>
            <span class="hl kwa">in</span> <span class="hl sym">()</span> <span class="hl kwa">end</span>
            <span class="hl kwa">val</span> <span class="hl sym">() =</span> result<span class="hl sym">.</span>maxFlips <span class="hl sym">:=</span>
                <span class="hl sym">(</span><span class="hl kwa">if</span> result<span class="hl sym">.</span>maxFlips <span class="hl sym">&lt;</span> flips
                    <span class="hl kwa">then</span> flips <span class="hl kwa">else</span> result<span class="hl sym">.</span>maxFlips<span class="hl sym">)</span>
            <span class="hl kwa">val</span> <span class="hl sym">() =</span> result<span class="hl sym">.</span>checksum <span class="hl sym">:=</span> result<span class="hl sym">.</span>checksum <span class="hl sym">+</span>
                <span class="hl sym">(</span><span class="hl kwa">if</span> count mod <span class="hl num">2</span> <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">then</span> flips <span class="hl kwa">else</span> ~flips<span class="hl sym">)</span>
        <span class="hl kwa">in</span> <span class="hl sym">()</span> <span class="hl kwa">end</span>
    <span class="hl kwa">val</span> i <span class="hl sym">=</span> array_next_permutation <span class="hl sym">(</span>cs<span class="hl sym">,</span> ps<span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">)</span>
<span class="hl kwa">in</span>
    <span class="hl kwa">if</span> i <span class="hl sym">&lt;</span> n <span class="hl kwa">then</span>
        fannkuch <span class="hl sym">(</span>cs<span class="hl sym">,</span> ps<span class="hl sym">,</span> ss<span class="hl sym">,</span> n<span class="hl sym">,</span> count <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span> result<span class="hl sym">)</span>
<span class="hl kwa">end</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">implement</span> main <span class="hl sym">(</span>argc<span class="hl sym">,</span> argv<span class="hl sym">) =</span> <span class="hl kwa">let</span>
    <span class="hl kwa">val</span> <span class="hl sym">() =</span> assert <span class="hl sym">(</span>argc <span class="hl sym">&gt;=</span> <span class="hl num">2</span><span class="hl sym">)</span>
    <span class="hl kwa">val</span> <span class="hl sym">[</span>n <span class="hl sym">:</span> int<span class="hl sym">]</span> n <span class="hl sym">=</span> int1_of argv<span class="hl sym">.[</span><span class="hl num">1</span><span class="hl sym">]</span>
    <span class="hl kwa">val</span> <span class="hl sym">() =</span> assert <span class="hl sym">(</span><span class="hl num">1</span> <span class="hl sym">&lt;</span> n <span class="hl sym">&amp;&amp;</span> n <span class="hl sym">&lt;=</span> <span class="hl num">256</span><span class="hl sym">)</span>
    <span class="hl kwa">val</span> n <span class="hl sym">=</span> size1_of_int1 n
    <span class="hl kwa">val</span> z <span class="hl sym">=</span> ussiLt_of <span class="hl sym">(</span>size1_of_int1 <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">))</span>
    <span class="hl kwa">var</span> <span class="hl sym">!</span>cs <span class="hl kwa">with</span> pcs <span class="hl sym">=</span> &#64;<span class="hl sym">[</span>ussiLt n<span class="hl sym">][</span>n<span class="hl sym">](</span>z<span class="hl sym">)</span>
    <span class="hl kwa">var</span> <span class="hl sym">!</span>ps <span class="hl kwa">with</span> pps <span class="hl sym">=</span> &#64;<span class="hl sym">[</span>ussiLt n<span class="hl sym">][</span>n<span class="hl sym">](</span>z<span class="hl sym">)</span>
    <span class="hl kwa">var</span> <span class="hl sym">!</span>ss <span class="hl kwa">with</span> pss <span class="hl sym">=</span> &#64;<span class="hl sym">[</span>ussiLt n<span class="hl sym">][</span>n<span class="hl sym">](</span>z<span class="hl sym">)</span>
    <span class="hl kwa">val</span> acs <span class="hl sym">=</span> &#64;<span class="hl sym">(</span>pcs <span class="hl sym">|</span> cs<span class="hl sym">)</span>
    <span class="hl kwa">val</span> aps <span class="hl sym">=</span> &#64;<span class="hl sym">(</span>pps <span class="hl sym">|</span> ps<span class="hl sym">)</span>
    <span class="hl kwa">val</span> ass <span class="hl sym">=</span> &#64;<span class="hl sym">(</span>pss <span class="hl sym">|</span> ss<span class="hl sym">)</span>
    <span class="hl kwa">val</span> <span class="hl sym">() =</span> array_init <span class="hl sym">(</span>acs<span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">)</span>
    <span class="hl kwa">val</span> <span class="hl sym">() =</span> array_init <span class="hl sym">(</span>aps<span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">)</span>
    <span class="hl kwa">var</span> ans <span class="hl sym">:</span> result <span class="hl sym">=</span> &#64;<span class="hl sym">{</span> maxFlips <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> checksum <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl sym">}</span>
    <span class="hl kwa">val</span> <span class="hl sym">() =</span> fannkuch <span class="hl sym">(</span>acs<span class="hl sym">,</span> aps<span class="hl sym">,</span> ass<span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> ans<span class="hl sym">)</span>
    <span class="hl kwa">prval</span> <span class="hl sym">() =</span> pcs <span class="hl sym">:=</span> acs<span class="hl num">.0</span>
    <span class="hl kwa">prval</span> <span class="hl sym">() =</span> pps <span class="hl sym">:=</span> aps<span class="hl num">.0</span>
    <span class="hl kwa">prval</span> <span class="hl sym">() =</span> pss <span class="hl sym">:=</span> ass<span class="hl num">.0</span>
<span class="hl kwa">in</span>
    printf <span class="hl sym">(</span><span class="hl str">&quot;%i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> &#64;<span class="hl sym">(</span>ans<span class="hl sym">.</span>checksum<span class="hl sym">));</span>
    printf <span class="hl sym">(</span><span class="hl str">&quot;Pfannkuchen(%i) = %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> &#64;<span class="hl sym">(</span>int1_of_size1 <span class="hl sym">(</span>n<span class="hl sym">),</span> ans<span class="hl sym">.</span>maxFlips<span class="hl sym">))</span>
<span class="hl kwa">end</span>

<span class="hl com">(* ****** ****** *)</span>

