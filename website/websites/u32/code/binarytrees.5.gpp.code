<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by Jon Harrop</span>
<span class="hl com"> * modified by Alex Mizrahi</span>
<span class="hl com"> * modified by Andreas Sch√§fer</span>
<span class="hl com"> */</span>

<span class="hl dir">#include &lt;iostream&gt;</span>
<span class="hl dir">#include &lt;stdlib.h&gt;</span>
<span class="hl dir">#include &lt;boost/pool/object_pool.hpp&gt;</span>

<span class="hl kwb">struct</span> Node<span class="hl sym">;</span>

<span class="hl kwb">struct</span> Node <span class="hl sym">{</span>
    Node <span class="hl sym">*</span>l<span class="hl sym">, *</span>r<span class="hl sym">;</span>
    <span class="hl kwb">int</span> i<span class="hl sym">;</span>
    <span class="hl kwd">Node</span><span class="hl sym">(</span><span class="hl kwb">int</span> i2<span class="hl sym">) :</span> <span class="hl kwd">l</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">),</span> <span class="hl kwd">r</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">),</span> <span class="hl kwd">i</span><span class="hl sym">(</span>i2<span class="hl sym">) {}</span>
    <span class="hl kwd">Node</span><span class="hl sym">(</span>Node <span class="hl sym">*</span>l2<span class="hl sym">,</span> <span class="hl kwb">int</span> i2<span class="hl sym">,</span> Node <span class="hl sym">*</span>r2<span class="hl sym">) :</span> <span class="hl kwd">l</span><span class="hl sym">(</span>l2<span class="hl sym">),</span> <span class="hl kwd">r</span><span class="hl sym">(</span>r2<span class="hl sym">),</span> <span class="hl kwd">i</span><span class="hl sym">(</span>i2<span class="hl sym">) {}</span>
    <span class="hl kwb">int</span> <span class="hl kwd">check</span><span class="hl sym">()</span> <span class="hl kwb">const</span> <span class="hl sym">{</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>l<span class="hl sym">)</span>
            <span class="hl kwa">return</span> l<span class="hl sym">-&gt;</span><span class="hl kwd">check</span><span class="hl sym">() +</span> i <span class="hl sym">-</span> r<span class="hl sym">-&gt;</span><span class="hl kwd">check</span><span class="hl sym">();</span>
        <span class="hl kwa">else return</span> i<span class="hl sym">;</span>
    <span class="hl sym">}</span>
<span class="hl sym">};</span>

Node <span class="hl sym">*</span><span class="hl kwd">make</span><span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">,</span> <span class="hl kwb">int</span> d<span class="hl sym">,</span> boost<span class="hl sym">::</span>object_pool<span class="hl sym">&lt;</span>Node<span class="hl sym">&gt; *</span>store<span class="hl sym">) {</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>d <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">return</span> store<span class="hl sym">-&gt;</span><span class="hl kwd">construct</span><span class="hl sym">(</span>i<span class="hl sym">);</span>
    <span class="hl kwa">return</span> store<span class="hl sym">-&gt;</span><span class="hl kwd">construct</span><span class="hl sym">(</span><span class="hl kwd">make</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>i<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> d<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> store<span class="hl sym">),</span> i<span class="hl sym">,</span> <span class="hl kwd">make</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>i<span class="hl sym">,</span> d<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> store<span class="hl sym">));</span>
<span class="hl sym">}</span>


<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">*</span>argv<span class="hl sym">[]) {</span>
    <span class="hl kwb">int</span> min_depth <span class="hl sym">=</span> <span class="hl num">4</span><span class="hl sym">;</span>
    <span class="hl kwb">int</span> max_depth <span class="hl sym">=</span> std<span class="hl sym">::</span><span class="hl kwd">max</span><span class="hl sym">(</span>min_depth<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">,</span>
                             <span class="hl sym">(</span>argc <span class="hl sym">==</span> <span class="hl num">2</span> ? <span class="hl kwd">atoi</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]) :</span> <span class="hl num">10</span><span class="hl sym">));</span>
    <span class="hl kwb">int</span> stretch_depth <span class="hl sym">=</span> max_depth<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">;</span>

    <span class="hl sym">{</span>
        boost<span class="hl sym">::</span>object_pool<span class="hl sym">&lt;</span>Node<span class="hl sym">&gt;</span> store<span class="hl sym">;</span>
        Node <span class="hl sym">*</span>c <span class="hl sym">=</span> <span class="hl kwd">make</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> stretch_depth<span class="hl sym">, &amp;</span>store<span class="hl sym">);</span>
        std<span class="hl sym">::</span>cout <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;stretch tree of depth &quot;</span> <span class="hl sym">&lt;&lt;</span> stretch_depth <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">&quot;</span>
                  <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;check: &quot;</span> <span class="hl sym">&lt;&lt;</span> c<span class="hl sym">-&gt;</span><span class="hl kwd">check</span><span class="hl sym">() &lt;&lt;</span> std<span class="hl sym">::</span>endl<span class="hl sym">;</span>
    <span class="hl sym">}</span>

    boost<span class="hl sym">::</span>object_pool<span class="hl sym">&lt;</span>Node<span class="hl sym">&gt;</span> long_lived_store<span class="hl sym">;</span>
    Node <span class="hl sym">*</span>long_lived_tree<span class="hl sym">=</span><span class="hl kwd">make</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> max_depth<span class="hl sym">, &amp;</span>long_lived_store<span class="hl sym">);</span>

    <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> d<span class="hl sym">=</span>min_depth<span class="hl sym">;</span> d<span class="hl sym">&lt;=</span>max_depth<span class="hl sym">;</span> d<span class="hl sym">+=</span><span class="hl num">2</span><span class="hl sym">) {</span>
        <span class="hl kwb">int</span> iterations <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>max_depth <span class="hl sym">-</span> d <span class="hl sym">+</span> min_depth<span class="hl sym">),</span> c<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span>

        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">;</span> i<span class="hl sym">&lt;=</span>iterations<span class="hl sym">; ++</span>i<span class="hl sym">) {</span>
            boost<span class="hl sym">::</span>object_pool<span class="hl sym">&lt;</span>Node<span class="hl sym">&gt;</span> store<span class="hl sym">;</span>
            Node <span class="hl sym">*</span>a <span class="hl sym">=</span> <span class="hl kwd">make</span><span class="hl sym">(</span>i<span class="hl sym">,</span> d<span class="hl sym">, &amp;</span>store<span class="hl sym">), *</span>b <span class="hl sym">=</span> <span class="hl kwd">make</span><span class="hl sym">(-</span>i<span class="hl sym">,</span> d<span class="hl sym">, &amp;</span>store<span class="hl sym">);</span>
            c <span class="hl sym">+=</span> a<span class="hl sym">-&gt;</span><span class="hl kwd">check</span><span class="hl sym">() +</span> b<span class="hl sym">-&gt;</span><span class="hl kwd">check</span><span class="hl sym">();</span>
        <span class="hl sym">}</span>
        std<span class="hl sym">::</span>cout <span class="hl sym">&lt;&lt; (</span><span class="hl num">2</span><span class="hl sym">*</span>iterations<span class="hl sym">) &lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">trees of depth &quot;</span> <span class="hl sym">&lt;&lt;</span> d <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">&quot;</span>
                  <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;check: &quot;</span> <span class="hl sym">&lt;&lt;</span> c <span class="hl sym">&lt;&lt;</span> std<span class="hl sym">::</span>endl<span class="hl sym">;</span>
    <span class="hl sym">}</span>

    std<span class="hl sym">::</span>cout <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;long lived tree of depth &quot;</span> <span class="hl sym">&lt;&lt;</span> max_depth <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">&quot;</span>
              <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;check: &quot;</span> <span class="hl sym">&lt;&lt; (</span>long_lived_tree<span class="hl sym">-&gt;</span><span class="hl kwd">check</span><span class="hl sym">()) &lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>

    <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>
