<span class="hl slc">! The Great Computer Language Shootout</span>
<span class="hl slc">! http://shootout.alioth.debian.org/</span>
<span class="hl slc">!</span>
<span class="hl slc">! contributed by Steve Decker</span>
<span class="hl slc">! based on the D version by Dave Fladebo</span>
<span class="hl slc">! revised for new specification</span>
<span class="hl slc">! compilation:</span>
<span class="hl slc">!    gfortran -O3 -fomit-frame-pointer fannkuch.f90</span>
<span class="hl slc">!    ifort -O3 -ipo -static fannkuch.f90</span>

<span class="hl kwa">program</span> fannkuch
  <span class="hl kwa">implicit none</span>

  <span class="hl kwb">integer</span> <span class="hl sym">::</span> n<span class="hl sym">,</span> i<span class="hl sym">,</span> r<span class="hl sym">,</span> flips<span class="hl sym">,</span> temp<span class="hl sym">,</span> j<span class="hl sym">,</span> k<span class="hl sym">,</span> maxFlipsCount <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> curPerm <span class="hl sym">=</span> <span class="hl num">1</span>
  <span class="hl kwb">character</span><span class="hl sym">(</span>len<span class="hl sym">=</span><span class="hl num">2</span><span class="hl sym">) ::</span> argv
  <span class="hl kwb">integer</span><span class="hl sym">,</span> <span class="hl kwa">dimension</span><span class="hl sym">(:),</span> allocatable <span class="hl sym">::</span> perm<span class="hl sym">,</span> perm1<span class="hl sym">,</span> cnt

  <span class="hl kwa">call</span> <span class="hl kwd">get_command_argument</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> argv<span class="hl sym">)</span>
  <span class="hl kwa">read</span> <span class="hl sym">(</span>argv<span class="hl sym">, *)</span> n

  <span class="hl kwd">allocate</span><span class="hl sym">(</span><span class="hl kwd">perm</span><span class="hl sym">(</span>n<span class="hl sym">),</span> <span class="hl kwd">perm1</span><span class="hl sym">(</span>n<span class="hl sym">),</span> <span class="hl kwd">cnt</span><span class="hl sym">(</span>n<span class="hl sym">))</span>

  <span class="hl slc">! Initialize permutation</span>
  perm1 <span class="hl sym">= (/ (</span>i<span class="hl sym">,</span> i <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">,</span> n<span class="hl sym">) /)</span>

  r <span class="hl sym">=</span> n <span class="hl sym">+</span> <span class="hl num">1</span>
  outer<span class="hl sym">:</span> <span class="hl kwa">do</span>  <span class="hl slc">! For all n! permutations</span>
     <span class="hl kwa">if</span> <span class="hl sym">(</span>curPerm <span class="hl sym">&lt;=</span> <span class="hl num">30</span><span class="hl sym">)</span> <span class="hl kwa">then</span>
        curPerm <span class="hl sym">=</span> curPerm <span class="hl sym">+</span> <span class="hl num">1</span>
        <span class="hl kwa">write</span><span class="hl sym">(*,</span><span class="hl str">&quot;(99(i0))&quot;</span><span class="hl sym">)</span> perm1
     <span class="hl kwa">end if</span>
     <span class="hl kwa">do while</span> <span class="hl sym">(</span>r <span class="hl sym">&gt;</span> <span class="hl num">2</span><span class="hl sym">)</span>
        <span class="hl kwd">cnt</span><span class="hl sym">(</span>r<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">) =</span> r
        r <span class="hl sym">=</span> r <span class="hl sym">-</span> <span class="hl num">1</span>
     <span class="hl kwa">end do</span>
     <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">perm1</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">) &gt;</span> <span class="hl num">1</span> <span class="hl sym">.</span>and<span class="hl sym">.</span> <span class="hl kwd">perm1</span><span class="hl sym">(</span>n<span class="hl sym">) &lt;</span> n<span class="hl sym">)</span> <span class="hl kwa">then</span>
        perm <span class="hl sym">=</span> perm1

        i <span class="hl sym">=</span> <span class="hl kwd">perm</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>
        flips <span class="hl sym">=</span> <span class="hl num">0</span>
        <span class="hl kwa">do while</span> <span class="hl sym">(</span>i <span class="hl sym">&gt;</span> <span class="hl num">1</span><span class="hl sym">)</span>  <span class="hl slc">! Perform flips until first element is 1</span>
           temp <span class="hl sym">=</span> <span class="hl kwd">perm</span><span class="hl sym">(</span>i<span class="hl sym">)</span>
           <span class="hl kwd">perm</span><span class="hl sym">(</span>i<span class="hl sym">) =</span> i
           i <span class="hl sym">=</span> temp
           j <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">;</span> k <span class="hl sym">=</span> i <span class="hl sym">-</span> <span class="hl num">1</span>
           <span class="hl kwa">do while</span> <span class="hl sym">(</span>j <span class="hl sym">&lt;</span> k<span class="hl sym">)</span>
              temp <span class="hl sym">=</span> <span class="hl kwd">perm</span><span class="hl sym">(</span>j<span class="hl sym">)</span>
              <span class="hl kwd">perm</span><span class="hl sym">(</span>j<span class="hl sym">) =</span> <span class="hl kwd">perm</span><span class="hl sym">(</span>k<span class="hl sym">)</span>
              <span class="hl kwd">perm</span><span class="hl sym">(</span>k<span class="hl sym">) =</span> temp
              j <span class="hl sym">=</span> j <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span> k <span class="hl sym">=</span> k <span class="hl sym">-</span> <span class="hl num">1</span>
           <span class="hl kwa">end do</span>
           flips <span class="hl sym">=</span> flips <span class="hl sym">+</span> <span class="hl num">1</span>  <span class="hl slc">! Count number of flips</span>
        <span class="hl kwa">end do</span>

        <span class="hl kwa">if</span> <span class="hl sym">(</span>flips <span class="hl sym">&gt;</span> maxFlipsCount<span class="hl sym">)</span> maxFlipsCount <span class="hl sym">=</span> flips
     <span class="hl kwa">end if</span>
     <span class="hl kwa">do</span>  <span class="hl slc">! Produce next permutation</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>r <span class="hl sym">==</span> n<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">then</span>
           <span class="hl kwa">write</span><span class="hl sym">(*,</span><span class="hl str">&quot;(2(a,i0))&quot;</span><span class="hl sym">)</span> <span class="hl str">&quot;Pfannkuchen(&quot;</span><span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl str">&quot;) = &quot;</span><span class="hl sym">,</span> maxFlipsCount
           exit outer
        <span class="hl kwa">end if</span>

        temp <span class="hl sym">=</span> <span class="hl kwd">perm1</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>
        i <span class="hl sym">=</span> <span class="hl num">1</span>
        <span class="hl kwa">do while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> r<span class="hl sym">)</span>
           j <span class="hl sym">=</span> i <span class="hl sym">+</span> <span class="hl num">1</span>
           <span class="hl kwd">perm1</span><span class="hl sym">(</span>i<span class="hl sym">) =</span> <span class="hl kwd">perm1</span><span class="hl sym">(</span>j<span class="hl sym">)</span>
           i <span class="hl sym">=</span> j
        <span class="hl kwa">end do</span>
        <span class="hl kwd">perm1</span><span class="hl sym">(</span>r<span class="hl sym">) =</span> temp
        <span class="hl slc">! perm1(1:r) = cshift(perm1(1:r),1)</span>
        <span class="hl slc">! could replace the previous 8 lines, but this is much slower.</span>

        <span class="hl kwd">cnt</span><span class="hl sym">(</span>r<span class="hl sym">) =</span> <span class="hl kwd">cnt</span><span class="hl sym">(</span>r<span class="hl sym">) -</span> <span class="hl num">1</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">cnt</span><span class="hl sym">(</span>r<span class="hl sym">) &gt;</span> <span class="hl num">1</span><span class="hl sym">)</span> exit
        r <span class="hl sym">=</span> r <span class="hl sym">+</span> <span class="hl num">1</span>
     <span class="hl kwa">end do</span>
  <span class="hl kwa">end do</span> outer
<span class="hl kwa">end program</span> fannkuch
