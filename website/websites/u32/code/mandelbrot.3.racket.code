#lang racket<span class="hl sym">/</span>base

<span class="hl slc">;;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;; contributed by Eli Barzilay</span>

<span class="hl sym">(</span>require racket<span class="hl sym">/</span>require racket<span class="hl sym">/</span>require<span class="hl sym">-</span>syntax <span class="hl sym">(</span>for<span class="hl sym">-</span>syntax racket<span class="hl sym">/</span>base<span class="hl sym">))</span>
<span class="hl sym">(</span>define<span class="hl sym">-</span>require<span class="hl sym">-</span>syntax overriding<span class="hl sym">-</span>in
  <span class="hl sym">(</span>syntax<span class="hl sym">-</span>rules <span class="hl sym">() [(</span>_ R1 R2<span class="hl sym">) (</span>combine<span class="hl sym">-</span>in R2 <span class="hl sym">(</span>subtract<span class="hl sym">-</span>in R1 R2<span class="hl sym">))]))</span>
<span class="hl sym">(</span>require <span class="hl sym">(</span>overriding<span class="hl sym">-</span>in
          racket<span class="hl sym">/</span>flonum
          <span class="hl sym">(</span>filtered<span class="hl sym">-</span>in <span class="hl sym">(</span>lambda <span class="hl sym">(</span>name<span class="hl sym">) (</span>regexp<span class="hl sym">-</span>replace #rx<span class="hl str">&quot;unsafe-&quot;</span> name <span class="hl str">&quot;&quot;</span><span class="hl sym">))</span>
                       racket<span class="hl sym">/</span>unsafe<span class="hl sym">/</span>ops<span class="hl sym">))</span>
         racket<span class="hl sym">/</span>cmdline<span class="hl sym">)</span>

<span class="hl sym">(</span>define O <span class="hl sym">(</span>current<span class="hl sym">-</span>output<span class="hl sym">-</span>port<span class="hl sym">))</span>

<span class="hl sym">(</span>define LIMIT<span class="hl sym">-</span>SQR <span class="hl num">4.0</span><span class="hl sym">)</span>
<span class="hl sym">(</span>define ITERATIONS <span class="hl num">50</span><span class="hl sym">)</span>
<span class="hl sym">(</span>define N <span class="hl sym">(</span>command<span class="hl sym">-</span>line #<span class="hl sym">:</span>args <span class="hl sym">(</span>n<span class="hl sym">) (</span>string<span class="hl sym">-&gt;</span>number n<span class="hl sym">)))</span>
<span class="hl sym">(</span>define N<span class="hl num">.0</span> <span class="hl sym">(</span>fx<span class="hl sym">-&gt;</span>fl N<span class="hl sym">))</span>
<span class="hl sym">(</span>define <span class="hl num">2</span><span class="hl sym">/</span>N <span class="hl sym">(</span>fl<span class="hl sym">/</span> <span class="hl num">2.0</span> N<span class="hl num">.0</span><span class="hl sym">))</span>
<span class="hl sym">(</span>define Crs
  <span class="hl sym">(</span>let <span class="hl sym">([</span>v <span class="hl sym">(</span>make<span class="hl sym">-</span>flvector N<span class="hl sym">)])</span>
    <span class="hl sym">(</span>for <span class="hl sym">([</span>x <span class="hl sym">(</span>in<span class="hl sym">-</span>range N<span class="hl sym">)])</span>
      <span class="hl sym">(</span>flvector<span class="hl sym">-</span>set<span class="hl sym">!</span> v x <span class="hl sym">(</span>fl<span class="hl sym">- (</span>fl<span class="hl sym">/ (</span>fx<span class="hl sym">-&gt;</span>fl <span class="hl sym">(</span>fx<span class="hl sym">*</span> <span class="hl num">2</span> x<span class="hl sym">))</span> N<span class="hl num">.0</span><span class="hl sym">)</span> <span class="hl num">1.5</span><span class="hl sym">)))</span>
    v<span class="hl sym">))</span>

<span class="hl sym">(</span>define<span class="hl sym">-</span>syntax <span class="hl sym">(</span>let<span class="hl sym">-</span>n stx<span class="hl sym">)</span>
  <span class="hl sym">(</span>syntax<span class="hl sym">-</span>case stx <span class="hl sym">()</span>
    <span class="hl sym">[(</span>_ N bindings E<span class="hl sym">)</span>
     <span class="hl sym">(</span>let loop <span class="hl sym">([</span>N <span class="hl sym">(</span>syntax<span class="hl sym">-</span>e #<span class="hl sym">'</span>N<span class="hl sym">)] [</span>E #<span class="hl sym">'</span>E<span class="hl sym">])</span>
       <span class="hl sym">(</span>if <span class="hl sym">(</span>zero? N<span class="hl sym">)</span> E <span class="hl sym">(</span>loop <span class="hl sym">(</span>sub1 N<span class="hl sym">)</span> #<span class="hl sym">`(</span>let bindings #<span class="hl sym">,</span>E<span class="hl sym">))))]))</span>

<span class="hl sym">(</span>define<span class="hl sym">-</span>syntax<span class="hl sym">-</span>rule <span class="hl sym">(</span>mandelbrot Cr Ci<span class="hl sym">)</span>
  <span class="hl sym">(</span>let loop <span class="hl sym">([</span>i <span class="hl num">0</span><span class="hl sym">] [</span>Zr <span class="hl num">0.0</span><span class="hl sym">] [</span>Zi <span class="hl num">0.0</span><span class="hl sym">])</span>
    <span class="hl sym">(</span>cond <span class="hl sym">[(</span>fl<span class="hl sym">&gt; (</span>fl<span class="hl sym">+ (</span>fl<span class="hl sym">*</span> Zr Zr<span class="hl sym">) (</span>fl<span class="hl sym">*</span> Zi Zi<span class="hl sym">))</span> LIMIT<span class="hl sym">-</span>SQR<span class="hl sym">)</span> <span class="hl num">0</span><span class="hl sym">]</span>
          <span class="hl sym">[(</span>fx<span class="hl sym">=</span> i ITERATIONS<span class="hl sym">)</span> <span class="hl num">1</span><span class="hl sym">]</span>
          <span class="hl sym">[</span>else <span class="hl sym">(</span>let<span class="hl sym">-</span>n <span class="hl num">5</span> <span class="hl sym">([</span>Zr <span class="hl sym">(</span>fl<span class="hl sym">+ (</span>fl<span class="hl sym">- (</span>fl<span class="hl sym">*</span> Zr Zr<span class="hl sym">) (</span>fl<span class="hl sym">*</span> Zi Zi<span class="hl sym">))</span> Cr<span class="hl sym">)]</span>
                          <span class="hl sym">[</span>Zi <span class="hl sym">(</span>fl<span class="hl sym">+ (</span>fl<span class="hl sym">*</span> <span class="hl num">2.0</span> <span class="hl sym">(</span>fl<span class="hl sym">*</span> Zr Zi<span class="hl sym">))</span> Ci<span class="hl sym">)])</span>
                  <span class="hl sym">(</span>loop <span class="hl sym">(</span>fx<span class="hl sym">+</span> i <span class="hl num">5</span><span class="hl sym">)</span> Zr Zi<span class="hl sym">))])))</span>

<span class="hl sym">(</span>fprintf O <span class="hl str">&quot;P4</span><span class="hl esc">\</span><span class="hl str">n~a ~a</span><span class="hl esc">\</span><span class="hl str">n&quot;</span> N N<span class="hl sym">)</span>
<span class="hl sym">(</span>let loop<span class="hl sym">-</span>y <span class="hl sym">([</span>y N<span class="hl sym">])</span>
  <span class="hl sym">(</span>let <span class="hl sym">([</span>Ci <span class="hl sym">(</span>fl<span class="hl sym">- (</span>fl<span class="hl sym">*</span> <span class="hl num">2</span><span class="hl sym">/</span>N <span class="hl sym">(</span>fx<span class="hl sym">-&gt;</span>fl y<span class="hl sym">))</span> <span class="hl num">1.0</span><span class="hl sym">)])</span>
    <span class="hl sym">(</span>let loop<span class="hl sym">-</span>x <span class="hl sym">([</span>x <span class="hl num">0</span><span class="hl sym">] [</span>bitnum <span class="hl num">0</span><span class="hl sym">] [</span>byteacc <span class="hl num">0</span><span class="hl sym">])</span>
      <span class="hl sym">(</span>if <span class="hl sym">(</span>fx<span class="hl sym">&lt;</span> x N<span class="hl sym">)</span>
        <span class="hl sym">(</span>let<span class="hl sym">* ([</span>Cr <span class="hl sym">(</span>flvector<span class="hl sym">-</span>ref Crs x<span class="hl sym">)]</span>
               <span class="hl sym">[</span>bitnum <span class="hl sym">(</span>fx<span class="hl sym">+</span> bitnum <span class="hl num">1</span><span class="hl sym">)]</span>
               <span class="hl sym">[</span>byteacc <span class="hl sym">(</span>fx<span class="hl sym">+ (</span>fxlshift byteacc <span class="hl num">1</span><span class="hl sym">) (</span>mandelbrot Cr Ci<span class="hl sym">))])</span>
          <span class="hl sym">(</span>cond <span class="hl sym">[(</span>fx<span class="hl sym">=</span> bitnum <span class="hl num">8</span><span class="hl sym">)</span>
                 <span class="hl sym">(</span>write<span class="hl sym">-</span>byte byteacc O<span class="hl sym">)</span>
                 <span class="hl sym">(</span>loop<span class="hl sym">-</span>x <span class="hl sym">(</span>fx<span class="hl sym">+</span> x <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl num">0 0</span><span class="hl sym">)]</span>
                <span class="hl sym">[</span>else <span class="hl sym">(</span>loop<span class="hl sym">-</span>x <span class="hl sym">(</span>fx<span class="hl sym">+</span> x <span class="hl num">1</span><span class="hl sym">)</span> bitnum byteacc<span class="hl sym">)]))</span>
        <span class="hl sym">(</span>begin <span class="hl sym">(</span>when <span class="hl sym">(</span>fx<span class="hl sym">&gt;</span> bitnum <span class="hl num">0</span><span class="hl sym">)</span>
                 <span class="hl sym">(</span>write<span class="hl sym">-</span>byte <span class="hl sym">(</span>fxlshift byteacc <span class="hl sym">(</span>fx<span class="hl sym">-</span> <span class="hl num">8</span> <span class="hl sym">(</span>fxand N #x7<span class="hl sym">)))</span> O<span class="hl sym">))</span>
               <span class="hl sym">(</span>when <span class="hl sym">(</span>fx<span class="hl sym">&gt;</span> y <span class="hl num">1</span><span class="hl sym">) (</span>loop<span class="hl sym">-</span>y <span class="hl sym">(</span>fx<span class="hl sym">-</span> y <span class="hl num">1</span><span class="hl sym">))))))))</span>
