<span class="hl slc">;;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; contributed by Shyamal Prasad</span>
<span class="hl slc">;;; modified by Witali Kusnezow</span>

<span class="hl sym">(</span><span class="hl kwa">eval</span><span class="hl sym">-</span>when <span class="hl sym">(:</span>compile<span class="hl sym">-</span>toplevel<span class="hl sym">)</span>
<span class="hl sym">(</span>require <span class="hl sym">:</span>asdf<span class="hl sym">)</span>
<span class="hl sym">(</span>require <span class="hl sym">:</span>cl<span class="hl sym">-</span>ppcre<span class="hl sym">))</span>

<span class="hl sym">(</span>defparameter <span class="hl sym">*</span>regex<span class="hl sym">-</span><span class="hl kwa">list</span><span class="hl sym">*</span>
  <span class="hl sym">(</span><span class="hl kwa">list</span>
   <span class="hl str">&quot;agggtaaa|tttaccct&quot;</span>
   <span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span>
   <span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span>
   <span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span>
   <span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span>
   <span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span>
   <span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span>
   <span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span>
   <span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span><span class="hl sym">))</span>

<span class="hl sym">(</span>defparameter <span class="hl sym">*</span>alternatives<span class="hl sym">*</span>
  <span class="hl sym">'((</span><span class="hl str">&quot;B&quot;</span> <span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl sym">)  (</span><span class="hl str">&quot;D&quot;</span> <span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl str">&quot;H&quot;</span> <span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl sym">)  (</span><span class="hl str">&quot;K&quot;</span> <span class="hl str">&quot;(g|t)&quot;</span><span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl str">&quot;M&quot;</span> <span class="hl str">&quot;(a|c)&quot;</span><span class="hl sym">)    (</span><span class="hl str">&quot;N&quot;</span> <span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl str">&quot;R&quot;</span> <span class="hl str">&quot;(a|g)&quot;</span><span class="hl sym">)    (</span><span class="hl str">&quot;S&quot;</span> <span class="hl str">&quot;(c|t)&quot;</span><span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl str">&quot;V&quot;</span> <span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl sym">)  (</span><span class="hl str">&quot;W&quot;</span> <span class="hl str">&quot;(a|t)&quot;</span><span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl str">&quot;Y&quot;</span> <span class="hl str">&quot;(c|t)&quot;</span><span class="hl sym">)))</span>


<span class="hl slc">;; Read in the entire file as the benchmark specifieds</span>
<span class="hl sym">(</span><span class="hl kwa">defun</span> get<span class="hl sym">-</span>input<span class="hl sym">-</span>chars <span class="hl sym">(</span>stream<span class="hl sym">)</span>
  <span class="hl sym">(</span>with<span class="hl sym">-</span>output<span class="hl sym">-</span>to<span class="hl sym">-</span>string
    <span class="hl sym">(</span>output<span class="hl sym">)</span>
    <span class="hl sym">(</span>loop <span class="hl kwa">while</span> <span class="hl sym">(</span>multiple<span class="hl sym">-</span>value<span class="hl sym">-</span>bind
		    <span class="hl sym">(</span><span class="hl kwa">line</span> missing<span class="hl sym">) (</span><span class="hl kwa">read</span><span class="hl sym">-</span><span class="hl kwa">line</span> stream nil<span class="hl sym">)</span>
		  <span class="hl sym">(</span>when <span class="hl kwa">line</span> <span class="hl sym">(</span>write<span class="hl sym">-</span>string <span class="hl kwa">line</span> output<span class="hl sym">))</span>
		  <span class="hl sym">(</span>unless missing <span class="hl sym">(</span>write<span class="hl sym">-</span>char #\Newline output<span class="hl sym">))</span>
		  <span class="hl kwa">line</span><span class="hl sym">))))</span>



<span class="hl sym">(</span><span class="hl kwa">defun</span> main <span class="hl sym">(&amp;</span>optional <span class="hl sym">(</span>stream <span class="hl sym">*</span>standard<span class="hl sym">-</span>input<span class="hl sym">*))</span>
  <span class="hl sym">(</span>let<span class="hl sym">*</span>
      <span class="hl slc">;; Benchmark definition requires using a regex to</span>
      <span class="hl slc">;; remove headers/newlines from the file</span>
      <span class="hl sym">((</span>text <span class="hl sym">(</span>get<span class="hl sym">-</span>input<span class="hl sym">-</span>chars stream<span class="hl sym">))</span>
       <span class="hl sym">(</span>sequence
	<span class="hl sym">(</span>cl<span class="hl sym">-</span>ppcre<span class="hl sym">:</span>regex<span class="hl sym">-</span>replace<span class="hl sym">-</span>all <span class="hl str">&quot;&gt;[^</span><span class="hl esc">\\</span><span class="hl str">n]*</span><span class="hl esc">\\</span><span class="hl str">n|</span><span class="hl esc">\\</span><span class="hl str">n&quot;</span> text <span class="hl str">&quot;&quot;</span><span class="hl sym">)))</span>

    <span class="hl slc">;; Count and print the number of subsequences</span>
    <span class="hl sym">(</span>loop for regex in <span class="hl sym">*</span>regex<span class="hl sym">-</span><span class="hl kwa">list</span><span class="hl sym">*</span> do
	  <span class="hl sym">(</span>format t <span class="hl str">&quot;~a ~a~%&quot;</span> regex
		  <span class="hl sym">(/ (</span><span class="hl kwa">length</span> <span class="hl sym">(</span>cl<span class="hl sym">-</span>ppcre<span class="hl sym">:</span>all<span class="hl sym">-</span>matches regex sequence<span class="hl sym">))</span> <span class="hl num">2</span><span class="hl sym">)))</span>

    <span class="hl slc">;; Print lengths</span>
    <span class="hl sym">(</span>format t <span class="hl str">&quot;~%~a~%&quot;</span> <span class="hl sym">(</span><span class="hl kwa">length</span> text<span class="hl sym">))</span>
    <span class="hl sym">(</span>format t <span class="hl str">&quot;~a~%&quot;</span> <span class="hl sym">(</span><span class="hl kwa">length</span> sequence<span class="hl sym">))</span>

    <span class="hl slc">;; do the alternative substitution and create the new text string</span>
    <span class="hl slc">;; that the benchmark definition requires</span>
    <span class="hl sym">(</span>loop for pair in <span class="hl sym">*</span>alternatives<span class="hl sym">*</span> do
	  <span class="hl sym">(</span>setf sequence
		<span class="hl sym">(</span>cl<span class="hl sym">-</span>ppcre<span class="hl sym">:</span>regex<span class="hl sym">-</span>replace<span class="hl sym">-</span>all <span class="hl sym">(</span><span class="hl kwa">car</span> pair<span class="hl sym">)</span> sequence <span class="hl sym">(</span><span class="hl kwa">cadr</span> pair<span class="hl sym">))))</span>
    <span class="hl sym">(</span>format t <span class="hl str">&quot;~a~%&quot;</span> <span class="hl sym">(</span><span class="hl kwa">length</span> sequence<span class="hl sym">))))</span>
