<span class="hl com">(*</span>
<span class="hl com">  The Computer Language Benchmarks Game</span>
<span class="hl com">  http://shootout.alioth.debian.org</span>
<span class="hl com"></span>
<span class="hl com">  contributed by Vitaly Trifonof</span>
<span class="hl com">*)</span>

<span class="hl kwa">uses</span> regexpr<span class="hl sym">,</span> sysutils<span class="hl sym">;</span>


<span class="hl kwa">var</span>
  seqLen<span class="hl sym">:</span> <span class="hl kwb">Cardinal</span> <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
  seqCleanLen<span class="hl sym">:</span> <span class="hl kwb">Cardinal</span> <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>


<span class="hl kwa">function</span> getchar<span class="hl sym">:</span> <span class="hl kwb">Char</span><span class="hl sym">;</span> <span class="hl kwa">inline</span><span class="hl sym">;</span>
<span class="hl kwa">var</span>
  ch<span class="hl sym">:</span> <span class="hl kwb">Char</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  seqLen <span class="hl sym">+=</span> <span class="hl num">1</span><span class="hl sym">;</span>  <span class="hl kwd">read</span><span class="hl sym">(</span>ch<span class="hl sym">);</span>  getchar <span class="hl sym">:=</span> ch
<span class="hl kwa">end</span><span class="hl sym">;</span>


<span class="hl kwa">var</span>
  patterns <span class="hl sym">:</span> <span class="hl kwa">array</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">.</span><span class="hl num">.8</span><span class="hl sym">]</span> <span class="hl kwa">of</span> PChar <span class="hl sym">=</span>
    <span class="hl sym">(</span>
      <span class="hl str">'(agggtaaa)|(tttaccct)'</span><span class="hl sym">,</span>
      <span class="hl str">'([cgt]gggtaaa)|(tttaccc[acg])'</span><span class="hl sym">,</span>
      <span class="hl str">'(a[act]ggtaaa)|(tttacc[agt]t)'</span><span class="hl sym">,</span>
      <span class="hl str">'(ag[act]gtaaa)|(tttac[agt]ct)'</span><span class="hl sym">,</span>
      <span class="hl str">'(agg[act]taaa)|(ttta[agt]cct)'</span><span class="hl sym">,</span>
      <span class="hl str">'(aggg[acg]aaa)|(ttt[cgt]ccct)'</span><span class="hl sym">,</span>
      <span class="hl str">'(agggt[cgt]aa)|(tt[acg]accct)'</span><span class="hl sym">,</span>
      <span class="hl str">'(agggta[cgt]a)|(t[acg]taccct)'</span><span class="hl sym">,</span>
      <span class="hl str">'(agggtaa[cgt])|([acg]ttaccct)'</span>
    <span class="hl sym">);</span>


<span class="hl kwa">function</span> <span class="hl kwd">findExpr</span><span class="hl sym">(</span> regexp<span class="hl sym">,</span> seq<span class="hl sym">:</span> PChar <span class="hl sym">):</span> <span class="hl kwb">Longint</span><span class="hl sym">;</span> <span class="hl kwa">inline</span><span class="hl sym">;</span>
<span class="hl kwa">var</span>
  cregexp <span class="hl sym">:</span> TRegExprEngine<span class="hl sym">;</span>
  count<span class="hl sym">,</span> index<span class="hl sym">,</span> tmpInt<span class="hl sym">:</span> <span class="hl kwb">Longint</span><span class="hl sym">;</span>
  tmpseq<span class="hl sym">:</span> PChar<span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  count <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span> tmpseq <span class="hl sym">:=</span> seq<span class="hl sym">;</span>
  <span class="hl kwd">GenerateRegExprEngine</span><span class="hl sym">(</span> regexp<span class="hl sym">, [</span>ref_caseinsensitive<span class="hl sym">],</span> cregexp<span class="hl sym">);</span>

  <span class="hl kwa">while</span> <span class="hl kwd">RegExprPos</span><span class="hl sym">(</span>cregexp<span class="hl sym">,</span> tmpseq<span class="hl sym">,</span> index<span class="hl sym">,</span> tmpInt<span class="hl sym">)</span> <span class="hl kwa">do</span>
  <span class="hl kwa">begin</span>
    count <span class="hl sym">+=</span> <span class="hl num">1</span><span class="hl sym">;</span>
    tmpseq <span class="hl sym">:= &#64;(</span>tmpseq<span class="hl sym">[</span>index <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">]);</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>

  <span class="hl kwd">DestroyRegExprEngine</span><span class="hl sym">(</span> cregexp <span class="hl sym">);</span>
  findExpr <span class="hl sym">:=</span> count
<span class="hl kwa">end</span><span class="hl sym">;</span>


<span class="hl kwa">function</span> <span class="hl kwd">findSplitExpr</span> <span class="hl sym">(</span> regexp<span class="hl sym">,</span>seq<span class="hl sym">:</span> PChar <span class="hl sym">):</span> <span class="hl kwb">Longint</span><span class="hl sym">;</span> <span class="hl kwa">inline</span><span class="hl sym">;</span>
<span class="hl kwa">var</span>
  split<span class="hl sym">:</span> PChar<span class="hl sym">;</span>
  count<span class="hl sym">:</span> <span class="hl kwb">Longint</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  split <span class="hl sym">:=</span> <span class="hl kwd">strscan</span><span class="hl sym">(</span>regexp<span class="hl sym">,</span> <span class="hl str">'|'</span><span class="hl sym">);</span>
  <span class="hl kwb">Byte</span><span class="hl sym">(</span>split<span class="hl sym">^) :=</span> <span class="hl num">0</span><span class="hl sym">;</span>

  count <span class="hl sym">:=</span> <span class="hl kwd">findExpr</span><span class="hl sym">(</span>regexp<span class="hl sym">,</span> seq<span class="hl sym">);</span>
  count <span class="hl sym">+=</span> <span class="hl kwd">findExpr</span><span class="hl sym">(&#64;</span>split<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">],</span> seq<span class="hl sym">);</span>
  split<span class="hl sym">^ :=</span> <span class="hl str">'|'</span><span class="hl sym">;</span>
  findSplitExpr <span class="hl sym">:=</span> count
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl com">(* calculate needed size for malloc *)</span>
<span class="hl kwa">function</span> <span class="hl kwd">addSize</span><span class="hl sym">(</span> seq<span class="hl sym">:</span> PChar <span class="hl sym">):</span> <span class="hl kwb">Cardinal</span><span class="hl sym">;</span> <span class="hl kwa">inline</span><span class="hl sym">;</span>
<span class="hl kwa">var</span>
  count<span class="hl sym">:</span> <span class="hl kwb">Cardinal</span> <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
  tmpseq<span class="hl sym">:</span> PChar<span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  tmpseq <span class="hl sym">:=</span> seq<span class="hl sym">;</span>
  <span class="hl kwa">while</span> <span class="hl kwb">Byte</span><span class="hl sym">(</span>tmpseq<span class="hl sym">^) &lt;&gt;</span> <span class="hl num">0</span> <span class="hl kwa">do</span>
  <span class="hl kwa">begin</span>
    <span class="hl kwa">case</span> tmpseq<span class="hl sym">^</span> <span class="hl kwa">of</span>
      <span class="hl str">'B'</span><span class="hl sym">:</span>    count <span class="hl sym">+=</span> <span class="hl num">6</span><span class="hl sym">;</span>  <span class="hl slc">//(c|g|t)</span>
      <span class="hl str">'D'</span><span class="hl sym">:</span>    count <span class="hl sym">+=</span> <span class="hl num">6</span><span class="hl sym">;</span>  <span class="hl slc">//(a|g|t)</span>
      <span class="hl str">'H'</span><span class="hl sym">:</span>    count <span class="hl sym">+=</span> <span class="hl num">6</span><span class="hl sym">;</span>  <span class="hl slc">//(a|c|t)</span>
      <span class="hl str">'K'</span><span class="hl sym">:</span>    count <span class="hl sym">+=</span> <span class="hl num">4</span><span class="hl sym">;</span>  <span class="hl slc">//(g|t)</span>
      <span class="hl str">'M'</span><span class="hl sym">:</span>    count <span class="hl sym">+=</span> <span class="hl num">4</span><span class="hl sym">;</span>  <span class="hl slc">//(a|c)</span>
      <span class="hl str">'N'</span><span class="hl sym">:</span>    count <span class="hl sym">+=</span> <span class="hl num">8</span><span class="hl sym">;</span>  <span class="hl slc">//(a|c|g|t)</span>
      <span class="hl str">'R'</span><span class="hl sym">:</span>    count <span class="hl sym">+=</span> <span class="hl num">4</span><span class="hl sym">;</span>  <span class="hl slc">//(a|g)</span>
      <span class="hl str">'S'</span><span class="hl sym">:</span>    count <span class="hl sym">+=</span> <span class="hl num">4</span><span class="hl sym">;</span>  <span class="hl slc">//(c|t)</span>
      <span class="hl str">'V'</span><span class="hl sym">:</span>    count <span class="hl sym">+=</span> <span class="hl num">6</span><span class="hl sym">;</span>  <span class="hl slc">//(a|c|g)</span>
      <span class="hl str">'W'</span><span class="hl sym">:</span>    count <span class="hl sym">+=</span> <span class="hl num">4</span><span class="hl sym">;</span>  <span class="hl slc">//(a|t)</span>
      <span class="hl str">'Y'</span><span class="hl sym">:</span>    count <span class="hl sym">+=</span> <span class="hl num">4</span><span class="hl sym">;</span>  <span class="hl slc">//(c|t)</span>
    <span class="hl kwa">end</span><span class="hl sym">;</span>
    tmpseq <span class="hl sym">:= &#64;</span>tmpseq<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>
  addSize <span class="hl sym">:=</span> count
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl com">(* IUB replace *)</span>
<span class="hl kwa">procedure</span> <span class="hl kwd">replace</span><span class="hl sym">(</span> seq<span class="hl sym">:</span> PChar<span class="hl sym">;</span> <span class="hl kwa">var</span> newSeq<span class="hl sym">:</span> PChar <span class="hl sym">);</span> <span class="hl kwa">inline</span><span class="hl sym">;</span>
<span class="hl kwa">var</span>
  itmpseq<span class="hl sym">,</span> otmpseq<span class="hl sym">:</span> PChar<span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  <span class="hl kwd">GetMem</span><span class="hl sym">(</span>newSeq<span class="hl sym">,</span> <span class="hl kwd">SizeOf</span><span class="hl sym">(</span><span class="hl kwb">Char</span><span class="hl sym">)*(</span>seqCleanLen <span class="hl sym">+</span> <span class="hl kwd">addSize</span><span class="hl sym">(</span>seq<span class="hl sym">) +</span> <span class="hl num">1</span><span class="hl sym">));</span>
  itmpseq <span class="hl sym">:=</span> seq<span class="hl sym">;</span> otmpseq <span class="hl sym">:=</span> newSeq<span class="hl sym">;</span>
  <span class="hl kwa">while</span> <span class="hl kwb">Byte</span><span class="hl sym">(</span>itmpseq<span class="hl sym">^) &lt;&gt;</span> <span class="hl num">0</span> <span class="hl kwa">do</span>
  <span class="hl kwa">begin</span>
    <span class="hl kwa">case</span> itmpseq<span class="hl sym">^</span> <span class="hl kwa">of</span>
      <span class="hl str">'B'</span><span class="hl sym">:</span>  otmpseq <span class="hl sym">:=</span> <span class="hl kwd">strecopy</span><span class="hl sym">(</span>otmpseq<span class="hl sym">,</span><span class="hl str">'(c|g|t)'</span><span class="hl sym">);</span>
      <span class="hl str">'D'</span><span class="hl sym">:</span>  otmpseq <span class="hl sym">:=</span> <span class="hl kwd">strecopy</span><span class="hl sym">(</span>otmpseq<span class="hl sym">,</span><span class="hl str">'(a|g|t)'</span><span class="hl sym">);</span>
      <span class="hl str">'H'</span><span class="hl sym">:</span>  otmpseq <span class="hl sym">:=</span> <span class="hl kwd">strecopy</span><span class="hl sym">(</span>otmpseq<span class="hl sym">,</span><span class="hl str">'(a|c|t)'</span><span class="hl sym">);</span>
      <span class="hl str">'K'</span><span class="hl sym">:</span>  otmpseq <span class="hl sym">:=</span> <span class="hl kwd">strecopy</span><span class="hl sym">(</span>otmpseq<span class="hl sym">,</span><span class="hl str">'(g|t)'</span><span class="hl sym">);</span>
      <span class="hl str">'M'</span><span class="hl sym">:</span>  otmpseq <span class="hl sym">:=</span> <span class="hl kwd">strecopy</span><span class="hl sym">(</span>otmpseq<span class="hl sym">,</span><span class="hl str">'(a|c)'</span><span class="hl sym">);</span>
      <span class="hl str">'N'</span><span class="hl sym">:</span>  otmpseq <span class="hl sym">:=</span> <span class="hl kwd">strecopy</span><span class="hl sym">(</span>otmpseq<span class="hl sym">,</span><span class="hl str">'(a|c|g|t)'</span><span class="hl sym">);</span>
      <span class="hl str">'R'</span><span class="hl sym">:</span>  otmpseq <span class="hl sym">:=</span> <span class="hl kwd">strecopy</span><span class="hl sym">(</span>otmpseq<span class="hl sym">,</span><span class="hl str">'(a|g)'</span><span class="hl sym">);</span>
      <span class="hl str">'S'</span><span class="hl sym">:</span>  otmpseq <span class="hl sym">:=</span> <span class="hl kwd">strecopy</span><span class="hl sym">(</span>otmpseq<span class="hl sym">,</span><span class="hl str">'(c|t)'</span><span class="hl sym">);</span>
      <span class="hl str">'V'</span><span class="hl sym">:</span>  otmpseq <span class="hl sym">:=</span> <span class="hl kwd">strecopy</span><span class="hl sym">(</span>otmpseq<span class="hl sym">,</span><span class="hl str">'(a|c|g)'</span><span class="hl sym">);</span>
      <span class="hl str">'W'</span><span class="hl sym">:</span>  otmpseq <span class="hl sym">:=</span> <span class="hl kwd">strecopy</span><span class="hl sym">(</span>otmpseq<span class="hl sym">,</span><span class="hl str">'(a|t)'</span><span class="hl sym">);</span>
      <span class="hl str">'Y'</span><span class="hl sym">:</span>  otmpseq <span class="hl sym">:=</span> <span class="hl kwd">strecopy</span><span class="hl sym">(</span>otmpseq<span class="hl sym">,</span><span class="hl str">'(c|t)'</span><span class="hl sym">);</span>
    <span class="hl kwa">else</span>
      otmpseq<span class="hl sym">^ :=</span> itmpseq<span class="hl sym">^;</span>
      otmpseq <span class="hl sym">:= &#64;</span>otmpseq<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]</span>
    <span class="hl kwa">end</span><span class="hl sym">;</span>
    itmpseq <span class="hl sym">:= &#64;</span>itmpseq<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>


<span class="hl kwa">var</span>
  seq<span class="hl sym">,</span> newSeq<span class="hl sym">:</span> PChar<span class="hl sym">;</span>
  maxSeqLen<span class="hl sym">:</span> <span class="hl kwb">Cardinal</span> <span class="hl sym">=</span> <span class="hl num">6000000</span><span class="hl sym">;</span>
  ch<span class="hl sym">:</span> <span class="hl kwb">Char</span><span class="hl sym">;</span>
  i<span class="hl sym">:</span> <span class="hl kwb">Longint</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  <span class="hl kwd">GetMem</span><span class="hl sym">(</span>seq<span class="hl sym">,</span> <span class="hl kwd">SizeOf</span><span class="hl sym">(</span><span class="hl kwb">Char</span><span class="hl sym">)*(</span>maxSeqLen<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">));</span>

<span class="hl com">(* Read FASTA format file from stdin</span>
<span class="hl com">   Count length and remove the unwanted elements  *)</span>
  <span class="hl kwa">while not</span> eof <span class="hl kwa">do</span>
  <span class="hl kwa">begin</span>
    ch <span class="hl sym">:=</span> getchar<span class="hl sym">;</span>

    <span class="hl kwa">if</span> ch <span class="hl sym">&lt;&gt;</span> <span class="hl str">'&gt;'</span> <span class="hl kwa">then</span>
    <span class="hl kwa">begin</span>
      <span class="hl kwa">if</span> seqCleanLen <span class="hl sym">=</span> maxSeqLen <span class="hl kwa">then</span>
      <span class="hl kwa">begin</span>
        maxSeqLen <span class="hl sym">+=</span> <span class="hl num">2000000</span><span class="hl sym">;</span>
        seq <span class="hl sym">:=</span> <span class="hl kwd">ReAllocMem</span><span class="hl sym">(</span>seq<span class="hl sym">,</span> <span class="hl kwd">SizeOf</span><span class="hl sym">(</span><span class="hl kwb">Char</span><span class="hl sym">)*(</span>maxSeqLen<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">) );</span>
      <span class="hl kwa">end</span><span class="hl sym">;</span>
      seq<span class="hl sym">[</span>seqCleanLen<span class="hl sym">] :=</span> ch<span class="hl sym">;</span>
      seqCleanLen <span class="hl sym">+=</span> <span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl kwa">if</span> eoln <span class="hl kwa">then</span>
        getchar
    <span class="hl kwa">end</span>
    <span class="hl kwa">else</span>
    <span class="hl kwa">begin</span>
      <span class="hl kwa">repeat</span>
        getchar
      <span class="hl kwa">until</span> eoln<span class="hl sym">;</span>
      getchar
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>
  <span class="hl kwb">Byte</span><span class="hl sym">(</span>seq<span class="hl sym">[</span>seqCleanLen<span class="hl sym">]) :=</span> <span class="hl num">0</span><span class="hl sym">;</span> <span class="hl slc">//end read data</span>

<span class="hl com">(* Count matches *)</span>
<span class="hl com">(* The following slow, because unit regexpr in free pascal is very slow *)</span>
  <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> <span class="hl num">8</span> <span class="hl kwa">do</span>
    <span class="hl kwd">writeln</span><span class="hl sym">(</span>patterns<span class="hl sym">[</span>i<span class="hl sym">],</span> <span class="hl kwd">findSplitExpr</span><span class="hl sym">(</span>patterns<span class="hl sym">[</span>i<span class="hl sym">],</span> seq<span class="hl sym">));</span>
    <span class="hl slc">//writeln(patterns[i], findExpr(patterns[i], seq));</span>

<span class="hl com">(* do replacements *)</span>
  <span class="hl kwd">replace</span><span class="hl sym">(</span>seq<span class="hl sym">,</span> newSeq<span class="hl sym">);</span>

  writeln<span class="hl sym">;</span>
  <span class="hl kwd">writeln</span><span class="hl sym">(</span>seqLen<span class="hl sym">);</span>
  <span class="hl kwd">writeln</span><span class="hl sym">(</span>seqCleanLen<span class="hl sym">);</span>
  <span class="hl kwd">writeln</span><span class="hl sym">(</span><span class="hl kwd">strlen</span><span class="hl sym">(</span>newSeq<span class="hl sym">));</span>

  <span class="hl kwd">FreeMem</span><span class="hl sym">(</span>newSeq<span class="hl sym">);</span>
  <span class="hl kwd">FreeMem</span><span class="hl sym">(</span>seq<span class="hl sym">)</span>
<span class="hl kwa">end</span><span class="hl sym">.</span>
