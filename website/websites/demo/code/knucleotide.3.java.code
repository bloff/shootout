<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Matthieu Bentot</span>
<span class="hl com">   based on the original by The Anh Tran</span>
<span class="hl com"> */</span>

<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.*;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>io<span class="hl sym">.*;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span>concurrent<span class="hl sym">.</span>atomic<span class="hl sym">.*;</span>

<span class="hl kwa">public final class</span> knucleotide <span class="hl sym">{</span>

    <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span> <span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">) {</span>
      <span class="hl kwa">try</span> <span class="hl sym">{</span>
         <span class="hl kwb">byte</span> source<span class="hl sym">[]=</span><span class="hl kwd">readInput</span><span class="hl sym">();</span>

           <span class="hl kwc">String</span> result<span class="hl sym">[]=</span><span class="hl kwa">new</span> <span class="hl kwc">String</span><span class="hl sym">[</span><span class="hl num">7</span><span class="hl sym">];</span>
           <span class="hl kwc">AtomicInteger</span> job<span class="hl sym">=</span><span class="hl kwa">new</span> <span class="hl kwc">AtomicInteger</span><span class="hl sym">(</span><span class="hl num">6</span><span class="hl sym">);</span>

           <span class="hl kwc">Thread</span> pool<span class="hl sym">[]=</span><span class="hl kwa">new</span> <span class="hl kwc">Thread</span><span class="hl sym">[</span><span class="hl kwc">Runtime</span><span class="hl sym">.</span><span class="hl kwd">getRuntime</span><span class="hl sym">().</span><span class="hl kwd">availableProcessors</span><span class="hl sym">()];</span>
           <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span>i<span class="hl sym">&lt;</span>pool<span class="hl sym">.</span>length<span class="hl sym">;</span>i<span class="hl sym">++) {</span>
               pool<span class="hl sym">[</span>i<span class="hl sym">]=</span><span class="hl kwa">new</span> <span class="hl kwd">ProcessingThread</span><span class="hl sym">(</span>source<span class="hl sym">,</span> job<span class="hl sym">,</span> result<span class="hl sym">);</span>
               pool<span class="hl sym">[</span>i<span class="hl sym">].</span><span class="hl kwd">start</span><span class="hl sym">();</span>
           <span class="hl sym">}</span>

           <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwc">Thread</span> t<span class="hl sym">:</span> pool<span class="hl sym">)</span> t<span class="hl sym">.</span><span class="hl kwd">join</span><span class="hl sym">();</span>

           <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwc">String</span> s<span class="hl sym">:</span> result<span class="hl sym">)</span> <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span>s<span class="hl sym">);</span>
      <span class="hl sym">}</span> <span class="hl kwa">catch</span> <span class="hl sym">(</span><span class="hl kwc">Exception</span> e<span class="hl sym">) {</span>
         e<span class="hl sym">.</span><span class="hl kwd">printStackTrace</span><span class="hl sym">();</span>
         <span class="hl kwc">System</span><span class="hl sym">.</span><span class="hl kwd">exit</span><span class="hl sym">(-</span><span class="hl num">1</span><span class="hl sym">);</span>
      <span class="hl sym">}</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">private static</span> <span class="hl kwb">byte</span><span class="hl sym">[]</span> <span class="hl kwd">readInput</span><span class="hl sym">()</span> <span class="hl kwa">throws</span> <span class="hl kwc">IOException</span> <span class="hl sym">{</span>
        <span class="hl kwc">BufferedReader</span> reader<span class="hl sym">=</span><span class="hl kwa">new</span> <span class="hl kwc">BufferedReader</span><span class="hl sym">(</span><span class="hl kwa">new</span> <span class="hl kwc">InputStreamReader</span><span class="hl sym">(</span><span class="hl kwc">System</span><span class="hl sym">.</span>in<span class="hl sym">,</span> <span class="hl str">&quot;US-ASCII&quot;</span><span class="hl sym">));</span>

        <span class="hl kwc">String</span> s<span class="hl sym">;</span>

        <span class="hl kwa">while</span><span class="hl sym">((</span>s<span class="hl sym">=</span>reader<span class="hl sym">.</span><span class="hl kwd">readLine</span><span class="hl sym">()) !=</span> null<span class="hl sym">) {</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>s<span class="hl sym">.</span><span class="hl kwd">startsWith</span><span class="hl sym">(</span><span class="hl str">&quot;&gt;THREE&quot;</span><span class="hl sym">))</span> <span class="hl kwa">break</span><span class="hl sym">;</span>
        <span class="hl sym">}</span>

        <span class="hl kwc">ByteArrayOutputStream</span> baos<span class="hl sym">=</span><span class="hl kwa">new</span> <span class="hl kwc">ByteArrayOutputStream</span><span class="hl sym">();</span>
        <span class="hl kwb">byte</span> line<span class="hl sym">[]=</span><span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl sym">[</span><span class="hl num">100</span><span class="hl sym">];</span>

        <span class="hl kwa">while</span><span class="hl sym">((</span>s<span class="hl sym">=</span>reader<span class="hl sym">.</span><span class="hl kwd">readLine</span><span class="hl sym">()) !=</span> null<span class="hl sym">) {</span>
           <span class="hl kwa">if</span> <span class="hl sym">(</span>s<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">()&gt;</span>line<span class="hl sym">.</span>length<span class="hl sym">)</span> line<span class="hl sym">=</span><span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl sym">[</span>s<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">()];</span>
           <span class="hl kwb">int</span> i<span class="hl sym">;</span>
           <span class="hl kwa">for</span><span class="hl sym">(</span>i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span>i<span class="hl sym">&lt;</span>s<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">();</span>i<span class="hl sym">++)</span> line<span class="hl sym">[</span>i<span class="hl sym">]=(</span><span class="hl kwb">byte</span><span class="hl sym">)</span>s<span class="hl sym">.</span><span class="hl kwd">charAt</span><span class="hl sym">(</span>i<span class="hl sym">);</span>
            baos<span class="hl sym">.</span><span class="hl kwd">write</span><span class="hl sym">(</span>line<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> i<span class="hl sym">);</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">return</span> baos<span class="hl sym">.</span><span class="hl kwd">toByteArray</span><span class="hl sym">();</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">private static final class</span> ProcessingThread <span class="hl kwa">extends</span> <span class="hl kwc">Thread</span> <span class="hl sym">{</span>

      <span class="hl kwa">private final</span> <span class="hl kwb">byte</span> input<span class="hl sym">[];</span>

      <span class="hl kwa">private final</span> <span class="hl kwc">AtomicInteger</span> job<span class="hl sym">;</span>

      <span class="hl kwa">private final</span> <span class="hl kwc">String</span> result<span class="hl sym">[];</span>

      <span class="hl kwa">private</span> <span class="hl kwd">ProcessingThread</span><span class="hl sym">(</span><span class="hl kwb">byte</span> source<span class="hl sym">[],</span> <span class="hl kwc">AtomicInteger</span> job<span class="hl sym">,</span> <span class="hl kwc">String</span> result<span class="hl sym">[]) {</span>
         <span class="hl kwa">this</span><span class="hl sym">.</span>input<span class="hl sym">=</span>source<span class="hl sym">;</span>
         <span class="hl kwa">this</span><span class="hl sym">.</span>job<span class="hl sym">=</span>job<span class="hl sym">;</span>
         <span class="hl kwa">this</span><span class="hl sym">.</span>result<span class="hl sym">=</span>result<span class="hl sym">;</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">run</span><span class="hl sym">() {</span>
          <span class="hl kwb">int</span> j<span class="hl sym">;</span>
          <span class="hl kwa">while</span><span class="hl sym">((</span>j<span class="hl sym">=</span>job<span class="hl sym">.</span><span class="hl kwd">getAndDecrement</span><span class="hl sym">()) &gt;=</span> <span class="hl num">0</span><span class="hl sym">) {</span>
              <span class="hl kwa">switch</span> <span class="hl sym">(</span>j<span class="hl sym">) {</span>
                  <span class="hl kwa">case</span> <span class="hl num">0</span><span class="hl sym">:</span>
                      result<span class="hl sym">[</span>j<span class="hl sym">]=</span><span class="hl kwd">writeFreq</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">);</span>
                      <span class="hl kwa">break</span><span class="hl sym">;</span>
                  <span class="hl kwa">case</span> <span class="hl num">1</span><span class="hl sym">:</span>
                      result<span class="hl sym">[</span>j<span class="hl sym">]=</span><span class="hl kwd">writeFreq</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">);</span>
                      <span class="hl kwa">break</span><span class="hl sym">;</span>
                  <span class="hl kwa">case</span> <span class="hl num">2</span><span class="hl sym">:</span>
                      result<span class="hl sym">[</span>j<span class="hl sym">]=</span><span class="hl kwd">writeFreq</span><span class="hl sym">(</span><span class="hl str">&quot;ggt&quot;</span><span class="hl sym">);</span>
                      <span class="hl kwa">break</span><span class="hl sym">;</span>
                  <span class="hl kwa">case</span> <span class="hl num">3</span><span class="hl sym">:</span>
                      result<span class="hl sym">[</span>j<span class="hl sym">]=</span><span class="hl kwd">writeFreq</span><span class="hl sym">(</span><span class="hl str">&quot;ggta&quot;</span><span class="hl sym">);</span>
                      <span class="hl kwa">break</span><span class="hl sym">;</span>
                  <span class="hl kwa">case</span> <span class="hl num">4</span><span class="hl sym">:</span>
                      result<span class="hl sym">[</span>j<span class="hl sym">]=</span><span class="hl kwd">writeFreq</span><span class="hl sym">(</span><span class="hl str">&quot;ggtatt&quot;</span><span class="hl sym">);</span>
                      <span class="hl kwa">break</span><span class="hl sym">;</span>
                  <span class="hl kwa">case</span> <span class="hl num">5</span><span class="hl sym">:</span>
                      result<span class="hl sym">[</span>j<span class="hl sym">]=</span><span class="hl kwd">writeFreq</span><span class="hl sym">(</span><span class="hl str">&quot;ggtattttaatt&quot;</span><span class="hl sym">);</span>
                      <span class="hl kwa">break</span><span class="hl sym">;</span>
                  <span class="hl kwa">case</span> <span class="hl num">6</span><span class="hl sym">:</span>
                      result<span class="hl sym">[</span>j<span class="hl sym">]=</span><span class="hl kwd">writeFreq</span><span class="hl sym">(</span><span class="hl str">&quot;ggtattttaatttatagt&quot;</span><span class="hl sym">);</span>
                      <span class="hl kwa">break</span><span class="hl sym">;</span>
                  <span class="hl kwa">default</span><span class="hl sym">:</span>
                      <span class="hl kwa">throw new</span> <span class="hl kwc">RuntimeException</span><span class="hl sym">(</span><span class="hl str">&quot;Invalid task&quot;</span><span class="hl sym">);</span>
              <span class="hl sym">}</span>
          <span class="hl sym">}</span>
      <span class="hl sym">}</span>

       <span class="hl kwa">private</span> <span class="hl kwc">String</span> <span class="hl kwd">writeFreq</span><span class="hl sym">(</span><span class="hl kwb">int</span> frameSize<span class="hl sym">) {</span>
           <span class="hl kwc">ArrayList</span><span class="hl sym">&lt;</span><span class="hl kwc">Key</span><span class="hl sym">&gt;</span> result<span class="hl sym">=</span><span class="hl kwa">new</span> <span class="hl kwc">ArrayList</span><span class="hl sym">&lt;</span><span class="hl kwc">Key</span><span class="hl sym">&gt;(</span><span class="hl kwd">calculateFreq</span><span class="hl sym">(</span>input<span class="hl sym">,</span> frameSize<span class="hl sym">).</span><span class="hl kwd">keySet</span><span class="hl sym">());</span>
           <span class="hl kwc">Collections</span><span class="hl sym">.</span><span class="hl kwd">sort</span><span class="hl sym">(</span>result<span class="hl sym">);</span>

           <span class="hl kwb">float</span> totalchar<span class="hl sym">=</span>input<span class="hl sym">.</span>length<span class="hl sym">-</span>frameSize<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">;</span>

           <span class="hl kwc">StringBuilder</span> sb<span class="hl sym">=</span><span class="hl kwa">new</span> <span class="hl kwc">StringBuilder</span><span class="hl sym">();</span>

           <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwc">Key</span> k<span class="hl sym">:</span> result<span class="hl sym">) {</span>
              <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span>i<span class="hl sym">&lt;</span>k<span class="hl sym">.</span>key<span class="hl sym">.</span>length<span class="hl sym">;</span>i<span class="hl sym">++)</span> sb<span class="hl sym">.</span><span class="hl kwd">append</span><span class="hl sym">(</span><span class="hl kwc">Character</span><span class="hl sym">.</span><span class="hl kwd">toUpperCase</span><span class="hl sym">((</span><span class="hl kwb">char</span><span class="hl sym">)</span>k<span class="hl sym">.</span>key<span class="hl sym">[</span>i<span class="hl sym">]));</span>
               sb<span class="hl sym">.</span><span class="hl kwd">append</span><span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">.</span><span class="hl kwd">format</span><span class="hl sym">(</span><span class="hl str">&quot; %.3f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">, (</span><span class="hl kwb">float</span><span class="hl sym">)(</span>k<span class="hl sym">.</span>count<span class="hl sym">) *</span> <span class="hl num">100.0</span>f <span class="hl sym">/</span> totalchar<span class="hl sym">));</span>
           <span class="hl sym">}</span>

           <span class="hl kwa">return</span> sb<span class="hl sym">.</span><span class="hl kwd">toString</span><span class="hl sym">();</span>
       <span class="hl sym">}</span>

       <span class="hl kwa">private</span> <span class="hl kwc">String</span> <span class="hl kwd">writeFreq</span><span class="hl sym">(</span><span class="hl kwc">String</span> specific<span class="hl sym">) {</span>
           <span class="hl kwc">Key</span> k<span class="hl sym">=</span><span class="hl kwa">new</span> <span class="hl kwc">Key</span><span class="hl sym">(</span>specific<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">());</span>
           k<span class="hl sym">.</span><span class="hl kwd">reHash</span><span class="hl sym">(</span>specific<span class="hl sym">.</span><span class="hl kwd">getBytes</span><span class="hl sym">(),</span> <span class="hl num">0</span><span class="hl sym">);</span>

           <span class="hl kwb">int</span> count<span class="hl sym">=</span><span class="hl kwd">calculateFreq</span><span class="hl sym">(</span>input<span class="hl sym">,</span> specific<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">()).</span><span class="hl kwd">get</span><span class="hl sym">(</span>k<span class="hl sym">).</span>count<span class="hl sym">;</span>

           <span class="hl kwa">return</span> <span class="hl kwc">String</span><span class="hl sym">.</span><span class="hl kwd">format</span><span class="hl sym">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\t</span><span class="hl str">%s&quot;</span><span class="hl sym">,</span> count<span class="hl sym">,</span> specific<span class="hl sym">.</span><span class="hl kwd">toUpperCase</span><span class="hl sym">());</span>
       <span class="hl sym">}</span>

       <span class="hl kwa">private static</span> <span class="hl kwc">HashMap</span><span class="hl sym">&lt;</span><span class="hl kwc">Key</span><span class="hl sym">,</span> <span class="hl kwc">Key</span><span class="hl sym">&gt;</span> <span class="hl kwd">calculateFreq</span><span class="hl sym">(</span><span class="hl kwb">byte</span> input<span class="hl sym">[],</span> <span class="hl kwb">int</span> frameSize<span class="hl sym">) {</span>
          <span class="hl kwc">HashMap</span><span class="hl sym">&lt;</span><span class="hl kwc">Key</span><span class="hl sym">,</span> <span class="hl kwc">Key</span><span class="hl sym">&gt;</span> htb<span class="hl sym">=</span><span class="hl kwa">new</span> <span class="hl kwc">HashMap</span><span class="hl sym">&lt;</span><span class="hl kwc">Key</span><span class="hl sym">,</span> <span class="hl kwc">Key</span><span class="hl sym">&gt;();</span>

           <span class="hl kwb">int</span> end<span class="hl sym">=</span>input<span class="hl sym">.</span>length<span class="hl sym">-</span>frameSize<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">;</span>
           <span class="hl kwc">Key</span> k<span class="hl sym">=</span><span class="hl kwa">new</span> <span class="hl kwc">Key</span><span class="hl sym">(</span>frameSize<span class="hl sym">);</span>

           <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span>i<span class="hl sym">&lt;</span>end<span class="hl sym">;</span>i<span class="hl sym">++) {</span>
               k<span class="hl sym">.</span><span class="hl kwd">reHash</span><span class="hl sym">(</span>input<span class="hl sym">,</span> i<span class="hl sym">);</span>

               <span class="hl kwc">Key</span> existing<span class="hl sym">=</span>htb<span class="hl sym">.</span><span class="hl kwd">get</span><span class="hl sym">(</span>k<span class="hl sym">);</span>
               <span class="hl kwa">if</span> <span class="hl sym">(</span>existing<span class="hl sym">!=</span>null<span class="hl sym">) {</span>
                  existing<span class="hl sym">.</span>count<span class="hl sym">++;</span>
               <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
                   htb<span class="hl sym">.</span><span class="hl kwd">put</span><span class="hl sym">(</span>k<span class="hl sym">,</span> k<span class="hl sym">);</span>
                   k<span class="hl sym">=</span><span class="hl kwa">new</span> <span class="hl kwc">Key</span><span class="hl sym">(</span>frameSize<span class="hl sym">);</span>
               <span class="hl sym">}</span>
           <span class="hl sym">}</span>

           <span class="hl kwa">return</span> htb<span class="hl sym">;</span>
       <span class="hl sym">}</span>

   <span class="hl sym">}</span>

   <span class="hl kwa">static final class</span> <span class="hl kwc">Key</span> <span class="hl kwa">implements</span> <span class="hl kwc">Comparable</span><span class="hl sym">&lt;</span><span class="hl kwc">Key</span><span class="hl sym">&gt; {</span>

        <span class="hl kwa">public</span> <span class="hl kwb">int</span> hash<span class="hl sym">,</span> count<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">;</span>

        <span class="hl kwa">public final</span> <span class="hl kwb">byte</span> key<span class="hl sym">[];</span>

        <span class="hl kwa">public</span> <span class="hl kwc">Key</span><span class="hl sym">(</span><span class="hl kwb">int</span> frame<span class="hl sym">) {</span>
            key<span class="hl sym">=</span><span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl sym">[</span>frame<span class="hl sym">];</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">reHash</span><span class="hl sym">(</span><span class="hl kwb">byte</span> k<span class="hl sym">[],</span> <span class="hl kwb">int</span> offset<span class="hl sym">) {</span>
           <span class="hl kwb">int</span> hash<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span>i<span class="hl sym">&lt;</span>key<span class="hl sym">.</span>length<span class="hl sym">;</span>i<span class="hl sym">++) {</span>
               <span class="hl kwb">byte</span> b<span class="hl sym">=</span>k<span class="hl sym">[</span>offset<span class="hl sym">+</span>i<span class="hl sym">];</span>
                key<span class="hl sym">[</span>i<span class="hl sym">]=</span>b<span class="hl sym">;</span>
                hash<span class="hl sym">=</span>hash<span class="hl sym">*</span><span class="hl num">31</span><span class="hl sym">+</span>b<span class="hl sym">;</span>
            <span class="hl sym">}</span>
            <span class="hl kwa">this</span><span class="hl sym">.</span>hash<span class="hl sym">=</span>hash<span class="hl sym">;</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">public</span> <span class="hl kwb">int</span> <span class="hl kwd">hashCode</span><span class="hl sym">() {</span>
            <span class="hl kwa">return</span> hash<span class="hl sym">;</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">public</span> <span class="hl kwb">boolean</span> <span class="hl kwd">equals</span><span class="hl sym">(</span><span class="hl kwc">Object</span> obj<span class="hl sym">) {</span>
            <span class="hl kwa">return</span> hash<span class="hl sym">==((</span><span class="hl kwc">Key</span><span class="hl sym">)</span>obj<span class="hl sym">).</span>hash<span class="hl sym">;</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">public</span> <span class="hl kwb">int</span> <span class="hl kwd">compareTo</span><span class="hl sym">(</span><span class="hl kwc">Key</span> o<span class="hl sym">) {</span>
            <span class="hl kwa">return</span> o<span class="hl sym">.</span>count<span class="hl sym">-</span>count<span class="hl sym">;</span>
        <span class="hl sym">}</span>

    <span class="hl sym">}</span>

<span class="hl sym">}</span>
