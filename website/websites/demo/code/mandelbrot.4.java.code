<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">http://shootout.alioth.debian.org/</span>
<span class="hl com">contributed by Kenneth Jonsson</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> java<span class="hl sym">.</span>io<span class="hl sym">.</span><span class="hl kwc">BufferedOutputStream</span><span class="hl sym">;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span><span class="hl kwc">Vector</span><span class="hl sym">;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span>concurrent<span class="hl sym">.</span><span class="hl kwc">Callable</span><span class="hl sym">;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span>concurrent<span class="hl sym">.</span><span class="hl kwc">ExecutorService</span><span class="hl sym">;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span>concurrent<span class="hl sym">.</span><span class="hl kwc">Executors</span><span class="hl sym">;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span>concurrent<span class="hl sym">.</span><span class="hl kwc">Future</span><span class="hl sym">;</span>

<span class="hl kwa">public class</span> mandelbrot <span class="hl kwa">implements</span> <span class="hl kwc">Callable</span><span class="hl sym">&lt;</span><span class="hl kwb">byte</span><span class="hl sym">[]&gt;</span>
<span class="hl sym">{</span>
    <span class="hl kwa">public static final</span> <span class="hl kwb">double</span> limitSquared <span class="hl sym">=</span> <span class="hl num">4</span><span class="hl sym">;</span>
    <span class="hl kwa">public static final</span> <span class="hl kwb">int</span> maxIterations <span class="hl sym">=</span> <span class="hl num">50</span><span class="hl sym">;</span>

    <span class="hl kwa">public static</span> <span class="hl kwb">int</span> N<span class="hl sym">;</span>
    <span class="hl kwa">public static</span> <span class="hl kwb">int</span> bytesPerRow<span class="hl sym">;</span>

    <span class="hl kwa">private</span> <span class="hl kwb">int</span> rowNum<span class="hl sym">;</span>

    <span class="hl kwa">public</span> <span class="hl kwd">mandelbrot</span><span class="hl sym">(</span><span class="hl kwb">int</span> rn<span class="hl sym">)</span>
    <span class="hl sym">{</span>
        rowNum <span class="hl sym">=</span> rn<span class="hl sym">;</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">public</span> <span class="hl kwb">byte</span><span class="hl sym">[]</span> <span class="hl kwd">call</span><span class="hl sym">()</span>
    <span class="hl sym">{</span>
        <span class="hl slc">// rowBitmap is initialized to all zeros by the JVM.</span>
        <span class="hl kwb">byte</span><span class="hl sym">[]</span> rowBitmap <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl sym">[</span>bytesPerRow<span class="hl sym">];</span>
        <span class="hl kwb">double</span> ci <span class="hl sym">=</span> <span class="hl num">2.0</span> <span class="hl sym">*</span> rowNum <span class="hl sym">/</span> N <span class="hl sym">-</span> <span class="hl num">1.0</span><span class="hl sym">;</span>

        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> column <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> column <span class="hl sym">&lt;</span> N<span class="hl sym">;</span> column<span class="hl sym">++)</span>
        <span class="hl sym">{</span>
            <span class="hl kwb">double</span> cr <span class="hl sym">=</span> <span class="hl num">2.0</span> <span class="hl sym">*</span> column <span class="hl sym">/</span> N <span class="hl sym">-</span> <span class="hl num">1.5</span><span class="hl sym">;</span>
            <span class="hl kwb">double</span> zr <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl kwb">double</span> tr <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl kwb">double</span> zi <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl kwb">double</span> ti <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl kwb">int</span> iteration <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

            <span class="hl kwa">do</span> <span class="hl sym">{</span>
                zi <span class="hl sym">=</span> <span class="hl num">2</span> <span class="hl sym">*</span> zr <span class="hl sym">*</span> zi <span class="hl sym">+</span> ci<span class="hl sym">;</span>
                zr <span class="hl sym">=</span> tr <span class="hl sym">-</span> ti <span class="hl sym">+</span> cr<span class="hl sym">;</span>
                ti <span class="hl sym">=</span> zi <span class="hl sym">*</span> zi<span class="hl sym">;</span>
                tr <span class="hl sym">=</span> zr <span class="hl sym">*</span> zr<span class="hl sym">;</span>
            <span class="hl sym">}</span> <span class="hl kwa">while</span> <span class="hl sym">(</span>tr <span class="hl sym">+</span> ti <span class="hl sym">&lt;=</span> limitSquared <span class="hl sym">&amp;&amp; ++</span>iteration <span class="hl sym">&lt;</span> maxIterations<span class="hl sym">);</span>

            <span class="hl kwa">if</span> <span class="hl sym">(</span>tr <span class="hl sym">+</span> ti <span class="hl sym">&lt;=</span> limitSquared<span class="hl sym">)</span>
                rowBitmap<span class="hl sym">[</span>column <span class="hl sym">&gt;&gt;</span> <span class="hl num">3</span><span class="hl sym">] |= (</span><span class="hl kwb">byte</span><span class="hl sym">) (</span><span class="hl num">0x80</span> <span class="hl sym">&gt;&gt; (</span>column <span class="hl sym">&amp;</span> <span class="hl num">7</span><span class="hl sym">));</span>
            <span class="hl slc">// else: leave the bit cleared</span>
        <span class="hl sym">}</span>
        <span class="hl kwa">return</span> rowBitmap<span class="hl sym">;</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">)</span> <span class="hl kwa">throws</span> <span class="hl kwc">Exception</span>
    <span class="hl sym">{</span>
        N <span class="hl sym">=</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span><span class="hl kwd">parseInt</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>
        bytesPerRow <span class="hl sym">= (</span>N <span class="hl sym">+</span> <span class="hl num">7</span><span class="hl sym">) /</span> <span class="hl num">8</span><span class="hl sym">;</span>

        <span class="hl slc">// Add each row as a future calculation</span>
        <span class="hl kwc">Vector</span><span class="hl sym">&lt;</span>mandelbrot<span class="hl sym">&gt;</span> rows <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">Vector</span><span class="hl sym">&lt;</span>mandelbrot<span class="hl sym">&gt;(</span>N<span class="hl sym">);</span>
        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> row <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> row <span class="hl sym">&lt;</span> N<span class="hl sym">;</span> row<span class="hl sym">++)</span>
            rows<span class="hl sym">.</span><span class="hl kwd">add</span><span class="hl sym">(</span>row<span class="hl sym">,</span> <span class="hl kwa">new</span> <span class="hl kwd">mandelbrot</span><span class="hl sym">(</span>row<span class="hl sym">));</span>

        <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">format</span><span class="hl sym">(</span><span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">%d %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> N<span class="hl sym">,</span> N<span class="hl sym">);</span>
        <span class="hl kwc">BufferedOutputStream</span> ostream <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">BufferedOutputStream</span><span class="hl sym">(</span><span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">);</span>

        <span class="hl slc">// Create an executor backend with one thread per available</span>
        <span class="hl slc">// core in this system</span>
        <span class="hl kwb">int</span> numThreads <span class="hl sym">=</span> <span class="hl kwc">Runtime</span><span class="hl sym">.</span><span class="hl kwd">getRuntime</span><span class="hl sym">().</span><span class="hl kwd">availableProcessors</span><span class="hl sym">();</span>
        <span class="hl kwc">ExecutorService</span> executor <span class="hl sym">=</span> <span class="hl kwc">Executors</span><span class="hl sym">.</span><span class="hl kwd">newFixedThreadPool</span><span class="hl sym">(</span>numThreads<span class="hl sym">);</span>

        <span class="hl slc">// Submit all the future row calculations to the executor and</span>
        <span class="hl slc">// write the results as they finish.</span>
        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwc">Future</span><span class="hl sym">&lt;</span><span class="hl kwb">byte</span><span class="hl sym">[]&gt;</span> row <span class="hl sym">:</span> executor<span class="hl sym">.</span><span class="hl kwd">invokeAll</span><span class="hl sym">(</span>rows<span class="hl sym">))</span>
            ostream<span class="hl sym">.</span><span class="hl kwd">write</span><span class="hl sym">(</span>row<span class="hl sym">.</span><span class="hl kwd">get</span><span class="hl sym">(),</span> <span class="hl num">0</span><span class="hl sym">,</span> bytesPerRow<span class="hl sym">);</span>
        ostream<span class="hl sym">.</span><span class="hl kwd">close</span><span class="hl sym">();</span>
        executor<span class="hl sym">.</span><span class="hl kwd">shutdown</span><span class="hl sym">();</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>
