<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com"> contributed by James McIlree</span>
<span class="hl com"> */</span>

<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.*;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>io<span class="hl sym">.*;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span>concurrent<span class="hl sym">.*;</span>

<span class="hl kwa">public class</span> knucleotide <span class="hl sym">{</span>
    <span class="hl kwc">String</span> sequence<span class="hl sym">;</span>
    <span class="hl kwb">int</span> count <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span>

    <span class="hl kwd">knucleotide</span><span class="hl sym">(</span><span class="hl kwc">String</span> sequence<span class="hl sym">) {</span>
	<span class="hl kwa">this</span><span class="hl sym">.</span>sequence <span class="hl sym">=</span> sequence<span class="hl sym">;</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">static</span> <span class="hl kwc">ArrayList</span><span class="hl sym">&lt;</span><span class="hl kwc">Callable</span><span class="hl sym">&lt;</span> <span class="hl kwc">Map</span><span class="hl sym">&lt;</span><span class="hl kwc">String</span><span class="hl sym">,</span> knucleotide<span class="hl sym">&gt; &gt; &gt;</span> <span class="hl kwd">createFragmentTasks</span><span class="hl sym">(</span><span class="hl kwa">final</span> <span class="hl kwc">String</span> sequence<span class="hl sym">,</span> <span class="hl kwb">int</span><span class="hl sym">[]</span> fragmentLengths<span class="hl sym">) {</span>
	<span class="hl kwc">ArrayList</span><span class="hl sym">&lt;</span><span class="hl kwc">Callable</span><span class="hl sym">&lt;</span><span class="hl kwc">Map</span><span class="hl sym">&lt;</span><span class="hl kwc">String</span><span class="hl sym">,</span> knucleotide<span class="hl sym">&gt;&gt;&gt;</span> tasks <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">ArrayList</span><span class="hl sym">&lt;</span><span class="hl kwc">Callable</span><span class="hl sym">&lt;</span><span class="hl kwc">Map</span><span class="hl sym">&lt;</span><span class="hl kwc">String</span><span class="hl sym">,</span> knucleotide<span class="hl sym">&gt;&gt;&gt;();</span>
	<span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> fragmentLength <span class="hl sym">:</span> fragmentLengths<span class="hl sym">) {</span>
	    <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> index<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> index<span class="hl sym">&lt;</span>fragmentLength<span class="hl sym">;</span> index<span class="hl sym">++) {</span>
		<span class="hl kwa">final</span> <span class="hl kwb">int</span> offset <span class="hl sym">=</span> index<span class="hl sym">;</span>
		<span class="hl kwa">final</span> <span class="hl kwb">int</span> finalFragmentLength <span class="hl sym">=</span> fragmentLength<span class="hl sym">;</span>
		tasks<span class="hl sym">.</span><span class="hl kwd">add</span><span class="hl sym">(</span><span class="hl kwa">new</span> <span class="hl kwc">Callable</span><span class="hl sym">&lt;</span><span class="hl kwc">Map</span><span class="hl sym">&lt;</span><span class="hl kwc">String</span><span class="hl sym">,</span> knucleotide<span class="hl sym">&gt;&gt;() {</span>
		    <span class="hl kwa">public</span> <span class="hl kwc">Map</span><span class="hl sym">&lt;</span><span class="hl kwc">String</span><span class="hl sym">,</span> knucleotide<span class="hl sym">&gt;</span> <span class="hl kwd">call</span><span class="hl sym">() {</span>
			<span class="hl kwa">return</span> <span class="hl kwd">createFragmentMap</span><span class="hl sym">(</span>sequence<span class="hl sym">,</span> offset<span class="hl sym">,</span> finalFragmentLength<span class="hl sym">);</span>
		    <span class="hl sym">}</span>
		<span class="hl sym">});</span>
	    <span class="hl sym">}</span>
	<span class="hl sym">}</span>
	<span class="hl kwa">return</span> tasks<span class="hl sym">;</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">static</span> <span class="hl kwc">Map</span><span class="hl sym">&lt;</span><span class="hl kwc">String</span><span class="hl sym">,</span> knucleotide<span class="hl sym">&gt;</span> <span class="hl kwd">createFragmentMap</span><span class="hl sym">(</span><span class="hl kwc">String</span> sequence<span class="hl sym">,</span> <span class="hl kwb">int</span> offset<span class="hl sym">,</span> <span class="hl kwb">int</span> fragmentLength<span class="hl sym">) {</span>
	<span class="hl kwc">HashMap</span><span class="hl sym">&lt;</span><span class="hl kwc">String</span><span class="hl sym">,</span> knucleotide<span class="hl sym">&gt;</span> map <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">HashMap</span><span class="hl sym">&lt;</span><span class="hl kwc">String</span><span class="hl sym">,</span> knucleotide<span class="hl sym">&gt;();</span>
	<span class="hl kwb">int</span> lastIndex <span class="hl sym">=</span> sequence<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">() -</span> fragmentLength <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
	<span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> index<span class="hl sym">=</span>offset<span class="hl sym">;</span> index<span class="hl sym">&lt;</span>lastIndex<span class="hl sym">;</span> index<span class="hl sym">+=</span>fragmentLength<span class="hl sym">) {</span>
	    <span class="hl kwc">String</span> temp <span class="hl sym">=</span> sequence<span class="hl sym">.</span><span class="hl kwd">substring</span><span class="hl sym">(</span>index<span class="hl sym">,</span> index <span class="hl sym">+</span> fragmentLength<span class="hl sym">);</span>
	    knucleotide fragment <span class="hl sym">= (</span>knucleotide<span class="hl sym">)</span>map<span class="hl sym">.</span><span class="hl kwd">get</span><span class="hl sym">(</span>temp<span class="hl sym">);</span>
	    <span class="hl kwa">if</span> <span class="hl sym">(</span>fragment <span class="hl sym">!=</span> null<span class="hl sym">)</span>
		fragment<span class="hl sym">.</span>count<span class="hl sym">++;</span>
	    <span class="hl kwa">else</span>
		map<span class="hl sym">.</span><span class="hl kwd">put</span><span class="hl sym">(</span>temp<span class="hl sym">,</span> <span class="hl kwa">new</span> <span class="hl kwd">knucleotide</span><span class="hl sym">(</span>temp<span class="hl sym">));</span>
	<span class="hl sym">}</span>

	<span class="hl kwa">return</span> map<span class="hl sym">;</span>
    <span class="hl sym">}</span>

    <span class="hl slc">// Destructive!</span>
    <span class="hl kwa">static</span> <span class="hl kwc">Map</span><span class="hl sym">&lt;</span><span class="hl kwc">String</span><span class="hl sym">,</span> knucleotide<span class="hl sym">&gt;</span> <span class="hl kwd">sumTwoMaps</span><span class="hl sym">(</span><span class="hl kwc">Map</span><span class="hl sym">&lt;</span><span class="hl kwc">String</span><span class="hl sym">,</span> knucleotide<span class="hl sym">&gt;</span> map1<span class="hl sym">,</span> <span class="hl kwc">Map</span><span class="hl sym">&lt;</span><span class="hl kwc">String</span><span class="hl sym">,</span> knucleotide<span class="hl sym">&gt;</span> map2<span class="hl sym">) {</span>
	<span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwc">Map</span><span class="hl sym">.</span>Entry<span class="hl sym">&lt;</span><span class="hl kwc">String</span><span class="hl sym">,</span> knucleotide<span class="hl sym">&gt;</span> entry <span class="hl sym">:</span> map2<span class="hl sym">.</span><span class="hl kwd">entrySet</span><span class="hl sym">()) {</span>
	    knucleotide sum <span class="hl sym">= (</span>knucleotide<span class="hl sym">)</span>map1<span class="hl sym">.</span><span class="hl kwd">get</span><span class="hl sym">(</span>entry<span class="hl sym">.</span><span class="hl kwd">getKey</span><span class="hl sym">());</span>
	    <span class="hl kwa">if</span> <span class="hl sym">(</span>sum <span class="hl sym">!=</span> null<span class="hl sym">)</span>
		sum<span class="hl sym">.</span>count <span class="hl sym">+=</span> entry<span class="hl sym">.</span><span class="hl kwd">getValue</span><span class="hl sym">().</span>count<span class="hl sym">;</span>
	    <span class="hl kwa">else</span>
		map1<span class="hl sym">.</span><span class="hl kwd">put</span><span class="hl sym">(</span>entry<span class="hl sym">.</span><span class="hl kwd">getKey</span><span class="hl sym">(),</span> entry<span class="hl sym">.</span><span class="hl kwd">getValue</span><span class="hl sym">());</span>
	<span class="hl sym">}</span>
	<span class="hl kwa">return</span> map1<span class="hl sym">;</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">static</span> <span class="hl kwc">String</span> <span class="hl kwd">writeFrequencies</span><span class="hl sym">(</span><span class="hl kwc">Map</span><span class="hl sym">&lt;</span><span class="hl kwc">String</span><span class="hl sym">,</span> knucleotide<span class="hl sym">&gt;</span> frequencies<span class="hl sym">) {</span>
	<span class="hl kwc">ArrayList</span><span class="hl sym">&lt;</span>knucleotide<span class="hl sym">&gt;</span> list <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">ArrayList</span><span class="hl sym">&lt;</span>knucleotide<span class="hl sym">&gt;(</span>frequencies<span class="hl sym">.</span><span class="hl kwd">size</span><span class="hl sym">());</span>
	<span class="hl kwb">int</span> sum <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
	<span class="hl kwa">for</span> <span class="hl sym">(</span>knucleotide fragment <span class="hl sym">:</span> frequencies<span class="hl sym">.</span><span class="hl kwd">values</span><span class="hl sym">()) {</span>
	    list<span class="hl sym">.</span><span class="hl kwd">add</span><span class="hl sym">(</span>fragment<span class="hl sym">);</span>
	    sum <span class="hl sym">+=</span> fragment<span class="hl sym">.</span>count<span class="hl sym">;</span>
	<span class="hl sym">}</span>

	<span class="hl kwc">Collections</span><span class="hl sym">.</span><span class="hl kwd">sort</span><span class="hl sym">(</span>list<span class="hl sym">,</span> <span class="hl kwa">new</span> <span class="hl kwc">Comparator</span><span class="hl sym">&lt;</span>knucleotide<span class="hl sym">&gt;() {</span>
	    <span class="hl kwa">public</span> <span class="hl kwb">int</span> <span class="hl kwd">compare</span><span class="hl sym">(</span>knucleotide o1<span class="hl sym">,</span> knucleotide o2<span class="hl sym">) {</span>
		<span class="hl kwb">int</span> c <span class="hl sym">=</span> o2<span class="hl sym">.</span>count <span class="hl sym">-</span> o1<span class="hl sym">.</span>count<span class="hl sym">;</span>
		<span class="hl kwa">if</span> <span class="hl sym">(</span>c <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">) {</span>
		    c <span class="hl sym">=</span> o1<span class="hl sym">.</span>sequence<span class="hl sym">.</span><span class="hl kwd">compareTo</span><span class="hl sym">(</span>o2<span class="hl sym">.</span>sequence<span class="hl sym">);</span>
		<span class="hl sym">}</span>
		<span class="hl kwa">return</span> c<span class="hl sym">;</span>
	    <span class="hl sym">}</span>
	<span class="hl sym">});</span>

	<span class="hl kwc">StringBuilder</span> sb <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">StringBuilder</span><span class="hl sym">();</span>
	<span class="hl kwa">for</span> <span class="hl sym">(</span>knucleotide k <span class="hl sym">:</span> list<span class="hl sym">)</span>
	    sb<span class="hl sym">.</span><span class="hl kwd">append</span><span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">.</span><span class="hl kwd">format</span><span class="hl sym">(</span><span class="hl str">&quot;%s %.3f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> k<span class="hl sym">.</span>sequence<span class="hl sym">.</span><span class="hl kwd">toUpperCase</span><span class="hl sym">(), (</span><span class="hl kwb">float</span><span class="hl sym">)(</span>k<span class="hl sym">.</span>count<span class="hl sym">) *</span> <span class="hl num">100.0</span>f <span class="hl sym">/ (</span><span class="hl kwb">double</span><span class="hl sym">)</span>sum<span class="hl sym">));</span>

	<span class="hl kwa">return</span> sb<span class="hl sym">.</span><span class="hl kwd">toString</span><span class="hl sym">();</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">static</span> <span class="hl kwc">String</span> <span class="hl kwd">writeCount</span><span class="hl sym">(</span><span class="hl kwc">List</span><span class="hl sym">&lt;</span><span class="hl kwc">Future</span><span class="hl sym">&lt;</span><span class="hl kwc">Map</span><span class="hl sym">&lt;</span><span class="hl kwc">String</span><span class="hl sym">,</span> knucleotide<span class="hl sym">&gt;&gt;&gt;</span> futures<span class="hl sym">,</span> <span class="hl kwc">String</span> nucleotideFragment<span class="hl sym">)</span> <span class="hl kwa">throws</span> <span class="hl kwc">Exception</span> <span class="hl sym">{</span>
	<span class="hl kwb">int</span> count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
	<span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwc">Future</span><span class="hl sym">&lt;</span><span class="hl kwc">Map</span><span class="hl sym">&lt;</span><span class="hl kwc">String</span><span class="hl sym">,</span> knucleotide<span class="hl sym">&gt;&gt;</span> future <span class="hl sym">:</span> futures<span class="hl sym">) {</span>
	    knucleotide temp <span class="hl sym">=</span> future<span class="hl sym">.</span><span class="hl kwd">get</span><span class="hl sym">().</span><span class="hl kwd">get</span><span class="hl sym">(</span>nucleotideFragment<span class="hl sym">);</span>
	    <span class="hl kwa">if</span> <span class="hl sym">(</span>temp <span class="hl sym">!=</span> null<span class="hl sym">)</span> count <span class="hl sym">+=</span> temp<span class="hl sym">.</span>count<span class="hl sym">;</span>
	<span class="hl sym">}</span>

	<span class="hl kwa">return</span> count <span class="hl sym">+</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">&quot;</span> <span class="hl sym">+</span> nucleotideFragment<span class="hl sym">.</span><span class="hl kwd">toUpperCase</span><span class="hl sym">();</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span> <span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">)</span> <span class="hl kwa">throws</span> <span class="hl kwc">Exception</span> <span class="hl sym">{</span>
	<span class="hl kwc">String</span> line<span class="hl sym">;</span>
	<span class="hl kwc">BufferedReader</span> <span class="hl kwa">in</span> <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">BufferedReader</span><span class="hl sym">(</span><span class="hl kwa">new</span> <span class="hl kwc">InputStreamReader</span><span class="hl sym">(</span><span class="hl kwc">System</span><span class="hl sym">.</span><span class="hl kwa">in</span><span class="hl sym">));</span>
	<span class="hl kwa">while</span> <span class="hl sym">((</span>line <span class="hl sym">=</span> <span class="hl kwa">in</span><span class="hl sym">.</span><span class="hl kwd">readLine</span><span class="hl sym">()) !=</span> null<span class="hl sym">) {</span>
	    <span class="hl kwa">if</span> <span class="hl sym">(</span>line<span class="hl sym">.</span><span class="hl kwd">startsWith</span><span class="hl sym">(</span><span class="hl str">&quot;&gt;THREE&quot;</span><span class="hl sym">))</span> <span class="hl kwa">break</span><span class="hl sym">;</span>
	<span class="hl sym">}</span>

	<span class="hl kwc">StringBuilder</span> sbuilder <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">StringBuilder</span><span class="hl sym">();</span>
	<span class="hl kwa">while</span> <span class="hl sym">((</span>line <span class="hl sym">=</span> <span class="hl kwa">in</span><span class="hl sym">.</span><span class="hl kwd">readLine</span><span class="hl sym">()) !=</span> null<span class="hl sym">) {</span>
	    sbuilder<span class="hl sym">.</span><span class="hl kwd">append</span><span class="hl sym">(</span>line<span class="hl sym">);</span>
	<span class="hl sym">}</span>

	<span class="hl kwc">ExecutorService</span> pool <span class="hl sym">=</span> <span class="hl kwc">Executors</span><span class="hl sym">.</span><span class="hl kwd">newFixedThreadPool</span><span class="hl sym">(</span><span class="hl kwc">Runtime</span><span class="hl sym">.</span><span class="hl kwd">getRuntime</span><span class="hl sym">().</span><span class="hl kwd">availableProcessors</span><span class="hl sym">());</span>
	<span class="hl kwb">int</span><span class="hl sym">[]</span> fragmentLengths <span class="hl sym">= {</span> <span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">,</span> <span class="hl num">3</span><span class="hl sym">,</span> <span class="hl num">4</span><span class="hl sym">,</span> <span class="hl num">6</span><span class="hl sym">,</span> <span class="hl num">12</span><span class="hl sym">,</span> <span class="hl num">18</span> <span class="hl sym">};</span>
	<span class="hl kwc">List</span><span class="hl sym">&lt;</span><span class="hl kwc">Future</span><span class="hl sym">&lt;</span><span class="hl kwc">Map</span><span class="hl sym">&lt;</span><span class="hl kwc">String</span><span class="hl sym">,</span> knucleotide<span class="hl sym">&gt;&gt;&gt;</span> futures <span class="hl sym">=</span> pool<span class="hl sym">.</span><span class="hl kwd">invokeAll</span><span class="hl sym">(</span><span class="hl kwd">createFragmentTasks</span><span class="hl sym">(</span>sbuilder<span class="hl sym">.</span><span class="hl kwd">toString</span><span class="hl sym">(),</span> fragmentLengths<span class="hl sym">));</span>
	pool<span class="hl sym">.</span><span class="hl kwd">shutdown</span><span class="hl sym">();</span>

    	<span class="hl slc">// Print the length 1 &amp; 2 counts. We know the offsets of the tasks, so we can cheat.</span>
	<span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span><span class="hl kwd">writeFrequencies</span><span class="hl sym">(</span>futures<span class="hl sym">.</span><span class="hl kwd">get</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">).</span><span class="hl kwd">get</span><span class="hl sym">()));</span>
	<span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span><span class="hl kwd">writeFrequencies</span><span class="hl sym">(</span><span class="hl kwd">sumTwoMaps</span><span class="hl sym">(</span>futures<span class="hl sym">.</span><span class="hl kwd">get</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">).</span><span class="hl kwd">get</span><span class="hl sym">(),</span> futures<span class="hl sym">.</span><span class="hl kwd">get</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">).</span><span class="hl kwd">get</span><span class="hl sym">())));</span>

	<span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span><span class="hl kwd">writeCount</span><span class="hl sym">(</span>futures<span class="hl sym">,</span> <span class="hl str">&quot;ggt&quot;</span><span class="hl sym">));</span>
	<span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span><span class="hl kwd">writeCount</span><span class="hl sym">(</span>futures<span class="hl sym">,</span> <span class="hl str">&quot;ggta&quot;</span><span class="hl sym">));</span>
	<span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span><span class="hl kwd">writeCount</span><span class="hl sym">(</span>futures<span class="hl sym">,</span> <span class="hl str">&quot;ggtatt&quot;</span><span class="hl sym">));</span>
	<span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span><span class="hl kwd">writeCount</span><span class="hl sym">(</span>futures<span class="hl sym">,</span> <span class="hl str">&quot;ggtattttaatt&quot;</span><span class="hl sym">));</span>
	<span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span><span class="hl kwd">writeCount</span><span class="hl sym">(</span>futures<span class="hl sym">,</span> <span class="hl str">&quot;ggtattttaatttatagt&quot;</span><span class="hl sym">));</span>
    <span class="hl sym">}</span>

<span class="hl sym">}</span>
