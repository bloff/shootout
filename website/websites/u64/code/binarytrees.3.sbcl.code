<span class="hl slc">;;; The Computer Language Shootout</span>
<span class="hl slc">;;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; Contributed by Witali Kusnezow 2009-02-19</span>

<span class="hl sym">(</span>defclass btree <span class="hl sym">()</span>
    <span class="hl sym">((</span>item  <span class="hl sym">:</span>accessor item  <span class="hl sym">:</span>initarg <span class="hl sym">:</span>item  <span class="hl sym">:</span><span class="hl kwa">type</span> fixnum<span class="hl sym">)</span>
     <span class="hl sym">(</span>depth <span class="hl sym">:</span>accessor depth <span class="hl sym">:</span>initarg <span class="hl sym">:</span>depth <span class="hl sym">:</span><span class="hl kwa">type</span> fixnum<span class="hl sym">)</span>
     <span class="hl sym">(</span>size  <span class="hl sym">:</span>reader   size  <span class="hl sym">:</span><span class="hl kwa">type</span> fixnum<span class="hl sym">)</span>
     <span class="hl sym">(</span>pool  <span class="hl sym">:</span>accessor pool  <span class="hl sym">:</span>initarg <span class="hl sym">:</span>pool  <span class="hl sym">:</span>initform nil<span class="hl sym">)))</span>

<span class="hl sym">(</span>defmacro tree <span class="hl sym">(</span>item depth <span class="hl sym">&amp;</span>optional <span class="hl sym">(</span>pool nil<span class="hl sym">))</span>
  <span class="hl sym">`(</span>make<span class="hl sym">-</span>instance <span class="hl sym">'</span>btree <span class="hl sym">:</span>item <span class="hl sym">,</span>item <span class="hl sym">:</span>depth <span class="hl sym">,</span>depth <span class="hl sym">:</span>pool <span class="hl sym">,</span>pool<span class="hl sym">))</span>
<span class="hl sym">(</span>defmacro check<span class="hl sym">(</span>tree<span class="hl sym">)</span>
  <span class="hl sym">`(</span>the fixnum <span class="hl sym">(</span>let <span class="hl sym">((</span>a<span class="hl sym">-</span>tree <span class="hl sym">,</span>tree<span class="hl sym">))(</span>check<span class="hl sym">-</span>tree <span class="hl sym">(</span>pool a<span class="hl sym">-</span>tree<span class="hl sym">) (</span>size a<span class="hl sym">-</span>tree<span class="hl sym">)))))</span>

<span class="hl sym">(</span>defmethod initialize<span class="hl sym">-</span>instance <span class="hl sym">:</span>after <span class="hl sym">((</span>a<span class="hl sym">-</span>tree btree<span class="hl sym">) &amp;</span>rest init<span class="hl sym">-</span>args<span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>ignore init<span class="hl sym">-</span>args<span class="hl sym">))</span>
  <span class="hl sym">(</span>with<span class="hl sym">-</span>slots <span class="hl sym">(</span>item depth pool size<span class="hl sym">)</span> a<span class="hl sym">-</span>tree
    <span class="hl sym">(</span>setf size <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">- (</span>the fixnum <span class="hl sym">(</span>ash <span class="hl num">2</span> depth<span class="hl sym">))))</span>
    <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">not</span> pool<span class="hl sym">)</span>
        <span class="hl sym">(</span>setf pool <span class="hl sym">(</span>make<span class="hl sym">-</span>array size <span class="hl sym">:</span>initial<span class="hl sym">-</span>element <span class="hl num">0</span><span class="hl sym">)))</span>
    <span class="hl sym">(</span>init<span class="hl sym">-</span>tree pool item depth<span class="hl sym">)))</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> init<span class="hl sym">-</span>tree <span class="hl sym">(</span>pool item depth<span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">type</span> fixnum item depth<span class="hl sym">))</span>
  <span class="hl sym">(</span>loop for i of<span class="hl sym">-</span><span class="hl kwa">type</span> fixnum to depth
     with <span class="hl sym">(</span>ii ii2 iit<span class="hl sym">)</span> of<span class="hl sym">-</span><span class="hl kwa">type</span> fixnum
     do <span class="hl sym">(</span>setf ii <span class="hl sym">(</span>ash <span class="hl num">1</span> i<span class="hl sym">)</span> ii2 <span class="hl sym">(+</span> ii ii <span class="hl sym">-</span><span class="hl num">2</span><span class="hl sym">)</span> iit <span class="hl sym">(*</span> item ii<span class="hl sym">))</span>
     <span class="hl sym">(</span>loop
        for idx downfrom ii2
        for val downfrom iit
        <span class="hl kwa">repeat</span> <span class="hl sym">(</span>the fixnum ii<span class="hl sym">)</span>
        do <span class="hl sym">(</span>setf <span class="hl sym">(</span>svref  pool idx<span class="hl sym">)</span> val<span class="hl sym">))))</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> check<span class="hl sym">-</span>tree <span class="hl sym">(</span>pool size <span class="hl sym">&amp;</span>optional <span class="hl sym">(</span>idx <span class="hl num">1</span><span class="hl sym">)</span>
               <span class="hl sym">&amp;</span>aux <span class="hl sym">(</span>data <span class="hl sym">(</span>svref pool <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">-</span> idx<span class="hl sym">))) (</span>child <span class="hl sym">(</span>ash idx <span class="hl num">1</span><span class="hl sym">)))</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">type</span> fixnum idx child data size<span class="hl sym">)</span>
           <span class="hl sym">(</span>values fixnum<span class="hl sym">))</span>
  <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(&lt;</span> size child<span class="hl sym">)</span>
      data
      <span class="hl sym">(- (+</span> data <span class="hl sym">(</span>check<span class="hl sym">-</span>tree pool size child<span class="hl sym">)) (</span>check<span class="hl sym">-</span>tree pool size <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">+</span> child<span class="hl sym">)))))</span>

#<span class="hl sym">+</span>sb<span class="hl sym">-</span>thread
<span class="hl sym">(</span><span class="hl kwa">eval</span><span class="hl sym">-</span>when <span class="hl sym">(:</span>compile<span class="hl sym">-</span>toplevel <span class="hl sym">:</span><span class="hl kwa">load</span><span class="hl sym">-</span>toplevel <span class="hl sym">:</span>execute<span class="hl sym">)</span>
  <span class="hl sym">(</span>define<span class="hl sym">-</span>alien<span class="hl sym">-</span>routine sysconf long <span class="hl sym">(</span>name int<span class="hl sym">))</span>
  <span class="hl sym">(</span>use<span class="hl sym">-</span>package  <span class="hl sym">:</span>sb<span class="hl sym">-</span>thread<span class="hl sym">))</span>

#<span class="hl sym">+</span>sb<span class="hl sym">-</span>thread
<span class="hl sym">(</span><span class="hl kwa">progn</span>
  <span class="hl sym">(</span>defconstant  <span class="hl sym">+</span>cpu<span class="hl sym">-</span>count<span class="hl sym">+ (</span>sysconf <span class="hl num">84</span><span class="hl sym">))</span>
  <span class="hl sym">(</span>defmacro bg  <span class="hl sym">(&amp;</span>body body<span class="hl sym">) `(</span>make<span class="hl sym">-</span>thread <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">() ,</span>&#64;body<span class="hl sym">)))</span>
  <span class="hl sym">(</span>defparameter <span class="hl sym">*</span>semaphores<span class="hl sym">*</span> nil<span class="hl sym">)</span>
  <span class="hl sym">(</span>defparameter <span class="hl sym">*</span>semaphore<span class="hl sym">* (</span>make<span class="hl sym">-</span>semaphore<span class="hl sym">))</span>
  <span class="hl sym">(</span><span class="hl kwa">defun</span> loop<span class="hl sym">-</span>depths <span class="hl sym">(</span><span class="hl kwa">max</span><span class="hl sym">-</span>depth
                      <span class="hl sym">&amp;</span>key <span class="hl sym">(</span><span class="hl kwa">min</span><span class="hl sym">-</span>depth <span class="hl num">4</span><span class="hl sym">) (</span>long<span class="hl sym">-</span>lived<span class="hl sym">-</span>tree <span class="hl sym">(</span>tree <span class="hl num">0</span> <span class="hl kwa">max</span><span class="hl sym">-</span>depth<span class="hl sym">))</span>
                      <span class="hl sym">&amp;</span>aux <span class="hl sym">(</span>count <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">+ (</span>ash <span class="hl sym">(-</span> <span class="hl kwa">max</span><span class="hl sym">-</span>depth <span class="hl kwa">min</span><span class="hl sym">-</span>depth<span class="hl sym">) -</span><span class="hl num">1</span><span class="hl sym">)))</span>
                      <span class="hl sym">(</span>count<span class="hl sym">+</span><span class="hl num">1</span> <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">+</span> count<span class="hl sym">)))</span>
    <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">type</span> fixnum <span class="hl kwa">max</span><span class="hl sym">-</span>depth <span class="hl kwa">min</span><span class="hl sym">-</span>depth count count<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">))</span>
    <span class="hl sym">(</span>setf <span class="hl sym">*</span>semaphores<span class="hl sym">* (</span>loop <span class="hl kwa">repeat</span> count<span class="hl sym">+</span><span class="hl num">1</span> collect <span class="hl sym">(</span>make<span class="hl sym">-</span>semaphore<span class="hl sym">)))</span>
    <span class="hl sym">(</span>let<span class="hl sym">((</span>threads
          <span class="hl sym">(</span>concatenate
           <span class="hl sym">'</span><span class="hl kwa">list</span>
           <span class="hl sym">(</span>loop for idx of<span class="hl sym">-</span><span class="hl kwa">type</span> fixnum by <span class="hl num">1</span> <span class="hl kwa">repeat</span> count collect
                <span class="hl sym">(</span>bg
                  <span class="hl sym">(</span>let<span class="hl sym">* ((</span>depth <span class="hl sym">(+</span> <span class="hl kwa">min</span><span class="hl sym">-</span>depth <span class="hl sym">(</span>the fixnum <span class="hl sym">(</span>ash idx <span class="hl num">1</span><span class="hl sym">))))</span>
                         <span class="hl sym">(</span>iterations <span class="hl sym">(</span>ash <span class="hl num">1</span> <span class="hl sym">(+</span> <span class="hl kwa">max</span><span class="hl sym">-</span>depth <span class="hl kwa">min</span><span class="hl sym">-</span>depth <span class="hl sym">(-</span> depth<span class="hl sym">)))))</span>
                    <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">type</span> fixnum depth iterations<span class="hl sym">))</span>
                    <span class="hl sym">(</span>wait<span class="hl sym">-</span>on<span class="hl sym">-</span>semaphore <span class="hl sym">(</span><span class="hl kwa">nth</span> idx <span class="hl sym">*</span>semaphores<span class="hl sym">*))</span>
                    <span class="hl sym">(</span>loop with pool <span class="hl sym">= (</span>make<span class="hl sym">-</span>array <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">- (</span>the fixnum <span class="hl sym">(</span>ash <span class="hl num">2</span> depth<span class="hl sym">))) :</span>initial<span class="hl sym">-</span>element <span class="hl num">0</span><span class="hl sym">)</span>
                       for i of<span class="hl sym">-</span><span class="hl kwa">type</span> fixnum from <span class="hl num">1</span> upto iterations
                       sum <span class="hl sym">(+ (</span>check <span class="hl sym">(</span>tree i depth pool<span class="hl sym">)) (</span>check <span class="hl sym">(</span>tree <span class="hl sym">(-</span> i<span class="hl sym">)</span> depth pool<span class="hl sym">)))</span>
                       into result of<span class="hl sym">-</span><span class="hl kwa">type</span> fixnum
                       finally
                       <span class="hl sym">(</span>signal<span class="hl sym">-</span>semaphore <span class="hl sym">*</span>semaphore<span class="hl sym">*)</span>
                       <span class="hl sym">(</span>return
                         <span class="hl sym">(</span>format nil <span class="hl str">&quot;~D	 trees of depth ~D	 check: ~D&quot;</span>
                                 <span class="hl sym">(</span>the fixnum <span class="hl sym">(+</span> iterations iterations <span class="hl sym">))</span> depth result<span class="hl sym">))))))</span>
           <span class="hl sym">(</span><span class="hl kwa">list</span> <span class="hl sym">(</span>bg <span class="hl sym">(</span>wait<span class="hl sym">-</span>on<span class="hl sym">-</span>semaphore <span class="hl sym">(</span><span class="hl kwa">nth</span> count <span class="hl sym">*</span>semaphores<span class="hl sym">*))</span>
                     <span class="hl sym">(</span>format nil <span class="hl str">&quot;long lived tree of depth ~D	 check: ~D&quot;</span>
                             <span class="hl kwa">max</span><span class="hl sym">-</span>depth <span class="hl sym">(</span>check long<span class="hl sym">-</span>lived<span class="hl sym">-</span>tree<span class="hl sym">)))))))</span>
      <span class="hl sym">(</span>loop with active of<span class="hl sym">-</span><span class="hl kwa">type</span> fixnum <span class="hl sym">=</span> <span class="hl num">0</span>
         for idx of<span class="hl sym">-</span><span class="hl kwa">type</span> fixnum by <span class="hl num">1</span> <span class="hl kwa">repeat</span> count<span class="hl sym">+</span><span class="hl num">1</span>
         <span class="hl kwa">if</span> <span class="hl sym">(=</span> active <span class="hl sym">+</span>cpu<span class="hl sym">-</span>count<span class="hl sym">+)</span>
         do <span class="hl sym">(</span>wait<span class="hl sym">-</span>on<span class="hl sym">-</span>semaphore <span class="hl sym">*</span>semaphore<span class="hl sym">*) (</span>decf active<span class="hl sym">)</span>
         do <span class="hl sym">(</span>incf active<span class="hl sym">) (</span>signal<span class="hl sym">-</span>semaphore <span class="hl sym">(</span><span class="hl kwa">nth</span> idx <span class="hl sym">*</span>semaphores<span class="hl sym">*)))</span>
      <span class="hl sym">(</span>format t <span class="hl str">&quot;~{~a~%~}&quot;</span> <span class="hl sym">(</span><span class="hl kwa">mapcar</span> #<span class="hl sym">'</span>join<span class="hl sym">-</span>thread threads<span class="hl sym">))</span>
      <span class="hl sym">)))</span>

#<span class="hl sym">-</span>sb<span class="hl sym">-</span>thread
<span class="hl sym">(</span><span class="hl kwa">defun</span> loop<span class="hl sym">-</span>depths <span class="hl sym">(</span><span class="hl kwa">max</span><span class="hl sym">-</span>depth
                    <span class="hl sym">&amp;</span>key <span class="hl sym">(</span><span class="hl kwa">min</span><span class="hl sym">-</span>depth <span class="hl num">4</span><span class="hl sym">)  (</span>long<span class="hl sym">-</span>lived<span class="hl sym">-</span>tree <span class="hl sym">(</span>tree <span class="hl num">0</span> <span class="hl kwa">max</span><span class="hl sym">-</span>depth<span class="hl sym">))</span>
                    <span class="hl sym">(</span>pool <span class="hl sym">(</span>make<span class="hl sym">-</span>array <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">- (</span>ash <span class="hl num">2</span> <span class="hl kwa">max</span><span class="hl sym">-</span>depth<span class="hl sym">)) :</span>initial<span class="hl sym">-</span>element <span class="hl num">0</span><span class="hl sym">)))</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">type</span> fixnum <span class="hl kwa">max</span><span class="hl sym">-</span>depth <span class="hl kwa">min</span><span class="hl sym">-</span>depth<span class="hl sym">))</span>
  <span class="hl sym">(</span>loop for d of<span class="hl sym">-</span><span class="hl kwa">type</span> fixnum from <span class="hl kwa">min</span><span class="hl sym">-</span>depth by <span class="hl num">2</span> upto <span class="hl kwa">max</span><span class="hl sym">-</span>depth do
       <span class="hl sym">(</span>loop with iterations of<span class="hl sym">-</span><span class="hl kwa">type</span> fixnum <span class="hl sym">= (</span>ash <span class="hl num">1</span> <span class="hl sym">(+</span> <span class="hl kwa">max</span><span class="hl sym">-</span>depth <span class="hl kwa">min</span><span class="hl sym">-</span>depth <span class="hl sym">(-</span> d<span class="hl sym">)))</span>
          for i of<span class="hl sym">-</span><span class="hl kwa">type</span> fixnum from <span class="hl num">1</span> upto iterations
          sum <span class="hl sym">(+ (</span>check <span class="hl sym">(</span>tree i d pool<span class="hl sym">)) (</span>check <span class="hl sym">(</span>tree <span class="hl sym">(-</span> i<span class="hl sym">)</span> d pool<span class="hl sym">)))</span>
          into result of<span class="hl sym">-</span><span class="hl kwa">type</span> fixnum
          finally
            <span class="hl sym">(</span>format t <span class="hl str">&quot;~D	 trees of depth ~D	 check: ~D~%&quot;</span>
                    <span class="hl sym">(</span>the fixnum <span class="hl sym">(+</span> iterations iterations <span class="hl sym">))</span> d result<span class="hl sym">)))</span>
  <span class="hl sym">(</span>format t <span class="hl str">&quot;long lived tree of depth ~D	 check: ~D~%&quot;</span>
          <span class="hl kwa">max</span><span class="hl sym">-</span>depth <span class="hl sym">(</span>check long<span class="hl sym">-</span>lived<span class="hl sym">-</span>tree<span class="hl sym">)))</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> main <span class="hl sym">(&amp;</span>optional <span class="hl sym">(</span>n <span class="hl sym">(</span>parse<span class="hl sym">-</span>integer
                           <span class="hl sym">(</span><span class="hl kwa">or</span> <span class="hl sym">(</span><span class="hl kwa">car</span> <span class="hl sym">(</span><span class="hl kwa">last</span> #<span class="hl sym">+</span>sbcl sb<span class="hl sym">-</span>ext<span class="hl sym">:*</span>posix<span class="hl sym">-</span>argv<span class="hl sym">*</span>
                                          #<span class="hl sym">+</span>cmu  extensions<span class="hl sym">:*</span><span class="hl kwa">command</span><span class="hl sym">-</span><span class="hl kwa">line</span><span class="hl sym">-</span>strings<span class="hl sym">*</span>
                                          #<span class="hl sym">+</span>gcl  si<span class="hl sym">::*</span><span class="hl kwa">command</span><span class="hl sym">-</span>args<span class="hl sym">*))</span>
                               <span class="hl str">&quot;1&quot;</span><span class="hl sym">)))</span>
             <span class="hl sym">&amp;</span>aux <span class="hl sym">(</span>n<span class="hl sym">+</span><span class="hl num">1</span> <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">+</span> n<span class="hl sym">)))</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">type</span> fixnum n n<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">))</span>
  <span class="hl sym">(</span>format t <span class="hl str">&quot;stretch tree of depth ~D	 check: ~D~%&quot;</span> n<span class="hl sym">+</span><span class="hl num">1</span> <span class="hl sym">(</span>check <span class="hl sym">(</span>tree <span class="hl num">0</span> n<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)))</span>
  <span class="hl sym">(</span>loop<span class="hl sym">-</span>depths n<span class="hl sym">))</span>

