<span class="hl com">{- The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   Written by Tom Pledger, 13 Nov 2006.</span>
<span class="hl com">   modified by Don Stewart</span>
<span class="hl com">   modified by Spencer Janssen, 29 Sep 2007 -}</span>

import Control.Concurrent
import Control.Monad
import Data.Char
import System.Environment
import System.IO
import GHC.Conc <span class="hl sym">(</span>forkOnIO<span class="hl sym">)</span>

default<span class="hl sym">(</span>Int<span class="hl sym">)</span>

data Colour <span class="hl sym">=</span> Blue <span class="hl sym">|</span> Red <span class="hl sym">|</span> Yellow deriving <span class="hl sym">(</span>Show<span class="hl sym">,</span> Eq<span class="hl sym">,</span> Enum<span class="hl sym">)</span>

complement a b <span class="hl sym">|</span> a <span class="hl sym">==</span> b <span class="hl sym">=</span> a
complement a b <span class="hl sym">=</span> case a of
    Blue   <span class="hl sym">-&gt;</span> case b of Red  <span class="hl sym">-&gt;</span> Yellow<span class="hl sym">;</span> _ <span class="hl sym">-&gt;</span> Red
    Red    <span class="hl sym">-&gt;</span> case b of Blue <span class="hl sym">-&gt;</span> Yellow<span class="hl sym">;</span> _ <span class="hl sym">-&gt;</span> Blue
    Yellow <span class="hl sym">-&gt;</span> case b of Blue <span class="hl sym">-&gt;</span> Red<span class="hl sym">;</span>    _ <span class="hl sym">-&gt;</span> Blue

data MP <span class="hl sym">=</span> MP <span class="hl sym">!</span>Int <span class="hl sym">!(</span>Maybe <span class="hl sym">(</span>Colour<span class="hl sym">,</span> ThreadId<span class="hl sym">,</span> MVar <span class="hl sym">(</span>Colour<span class="hl sym">,</span> ThreadId<span class="hl sym">)))</span>

arrive mpv finish c0 <span class="hl sym">=</span> do
    tid <span class="hl sym">&lt;-</span> myThreadId
    let inc x <span class="hl sym">= (</span>fromEnum <span class="hl sym">(</span>tid <span class="hl sym">==</span> x<span class="hl sym">) +)</span>
        go <span class="hl sym">!</span>c <span class="hl sym">!</span>t <span class="hl sym">!</span>b <span class="hl sym">=</span> do
            MP q w <span class="hl sym">&lt;-</span> takeMVar mpv
            case w of
                _ <span class="hl sym">|</span> q <span class="hl sym">==</span> <span class="hl num">0</span> <span class="hl sym">-&gt;</span> do
                    putMVar mpv $ MP <span class="hl num">0</span> w
                    putMVar finish <span class="hl sym">(</span>t<span class="hl sym">,</span> b<span class="hl sym">)</span>

                Nothing <span class="hl sym">-&gt;</span> do
                     waker <span class="hl sym">&lt;-</span> newEmptyMVar
                     putMVar mpv $ MP q <span class="hl sym">(</span>Just <span class="hl sym">(</span>c<span class="hl sym">,</span> tid<span class="hl sym">,</span> waker<span class="hl sym">))</span>
                     <span class="hl sym">(</span>c'<span class="hl sym">,</span> tid'<span class="hl sym">) &lt;-</span> takeMVar waker
                     go c' <span class="hl sym">(</span>t<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span> $ inc tid' b

                Just <span class="hl sym">(</span>k<span class="hl sym">,</span> tid'<span class="hl sym">,</span> waker<span class="hl sym">) -&gt;</span> do
                    putMVar mpv $ MP <span class="hl sym">(</span>q<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span> Nothing
                    let <span class="hl sym">!</span>c' <span class="hl sym">=</span> complement k c
                    putMVar waker <span class="hl sym">(</span>c'<span class="hl sym">,</span> tid<span class="hl sym">)</span>
                    go c' <span class="hl sym">(</span>t<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span> $ inc tid' b
    go c0 <span class="hl num">0 0</span>

showN <span class="hl sym">=</span> unwords . map <span class="hl sym">((</span>digits <span class="hl sym">!!)</span> . digitToInt<span class="hl sym">)</span> . show

digits <span class="hl sym">=</span> words <span class="hl str">&quot;zero one two three four five six seven eight nine&quot;</span>

run cpu n cs <span class="hl sym">=</span> do
    fs    <span class="hl sym">&lt;-</span> replicateM <span class="hl sym">(</span>length cs<span class="hl sym">)</span> newEmptyMVar
    mpv   <span class="hl sym">&lt;-</span> newMVar $ MP n Nothing
    zipWithM <span class="hl sym">((</span>forkOnIO cpu .<span class="hl sym">)</span> . arrive mpv<span class="hl sym">)</span> fs cs
    return $ do
        ns    <span class="hl sym">&lt;-</span> mapM takeMVar fs

        putStrLn . map toLower . unwords . <span class="hl sym">([]:)</span> . map show $ cs
        putStr . map toLower . unlines $ <span class="hl sym">[</span>unwords <span class="hl sym">[</span>show n<span class="hl sym">,</span> showN b<span class="hl sym">] | (</span>n<span class="hl sym">,</span> b<span class="hl sym">) &lt;-</span> ns<span class="hl sym">]</span>
        putStrLn . <span class="hl sym">(</span><span class="hl str">&quot; &quot;</span><span class="hl sym">++)</span> . showN . sum . map fst $ ns
        putStrLn <span class="hl str">&quot;&quot;</span>

main <span class="hl sym">=</span> do
    putStrLn . map toLower . unlines $
        <span class="hl sym">[</span>unwords <span class="hl sym">[</span>show a<span class="hl sym">,</span> <span class="hl str">&quot;+&quot;</span><span class="hl sym">,</span> show b<span class="hl sym">,</span> <span class="hl str">&quot;-&gt;&quot;</span><span class="hl sym">,</span> show $ complement a b<span class="hl sym">]</span>
            <span class="hl sym">|</span> a <span class="hl sym">&lt;- [</span>Blue ..<span class="hl sym">],</span> b <span class="hl sym">&lt;- [</span>Blue ..<span class="hl sym">]]</span>

    n <span class="hl sym">&lt;-</span> readIO . head <span class="hl sym">=&lt;&lt;</span> getArgs
    collect1 <span class="hl sym">&lt;-</span> run <span class="hl num">1</span> n <span class="hl sym">[</span>Blue ..<span class="hl sym">]</span>
    collect2 <span class="hl sym">&lt;-</span> run <span class="hl num">2</span> n <span class="hl sym">[</span>Blue<span class="hl sym">,</span> Red<span class="hl sym">,</span> Yellow<span class="hl sym">,</span> Red<span class="hl sym">,</span> Yellow<span class="hl sym">,</span> Blue<span class="hl sym">,</span> Red<span class="hl sym">,</span> Yellow<span class="hl sym">,</span> Red<span class="hl sym">,</span> Blue<span class="hl sym">]</span>
    collect1
    collect2

