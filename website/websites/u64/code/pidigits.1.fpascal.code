<span class="hl com">{ The Computer Language Benchmarks Game</span>
<span class="hl com">  http://shootout.alioth.debian.org</span>
<span class="hl com"></span>
<span class="hl com">  contributed by Vincent Snijders</span>
<span class="hl com">}</span>

<span class="hl com">{$mode objfpc}</span>


<span class="hl kwa">program</span> pidigits<span class="hl sym">;</span>

<span class="hl kwa">type</span>
  <span class="hl com">{ TBigInt }</span>

  PBigInt <span class="hl sym">= ^</span>TBigInt<span class="hl sym">;</span>

  <span class="hl com">{ TBigInt }</span>

  TBigInt <span class="hl sym">=</span> <span class="hl kwa">class</span>
  <span class="hl kwa">private</span>
    Digit<span class="hl sym">:</span> pdword<span class="hl sym">;</span>
    FSize<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">;</span>
    Capacity<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">;</span>
    FNextFree<span class="hl sym">:</span> TBigInt<span class="hl sym">;</span> <span class="hl slc">// used to maintain the freelist</span>
    <span class="hl kwa">procedure</span> Clear<span class="hl sym">;</span>
    <span class="hl kwa">procedure</span> <span class="hl kwd">Resize</span><span class="hl sym">(</span>NewSize<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">);</span>
    <span class="hl kwa">function</span> IsNegative<span class="hl sym">:</span> <span class="hl kwb">boolean</span><span class="hl sym">;</span> <span class="hl kwa">inline</span><span class="hl sym">;</span>
    <span class="hl kwa">function</span> IsZero<span class="hl sym">:</span> <span class="hl kwb">boolean</span><span class="hl sym">;</span> <span class="hl kwa">inline</span><span class="hl sym">;</span>
    <span class="hl kwa">procedure</span> Negate<span class="hl sym">;</span>
  <span class="hl kwa">public</span>
    <span class="hl kwa">constructor</span> <span class="hl kwd">Create</span><span class="hl sym">(</span>InitialSize<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">);</span>
    <span class="hl kwa">destructor</span> Destroy<span class="hl sym">;</span> <span class="hl kwa">override</span><span class="hl sym">;</span>
    <span class="hl kwa">function</span> <span class="hl kwd">GetDigit</span><span class="hl sym">(</span>i<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">) :</span> DWord<span class="hl sym">;</span> <span class="hl kwa">inline</span><span class="hl sym">;</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">type</span>
  TBigMatrix <span class="hl sym">=</span> <span class="hl kwa">array</span><span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">.</span><span class="hl num">.2</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">.</span><span class="hl num">.2</span><span class="hl sym">]</span> <span class="hl kwa">of</span> TBigInt<span class="hl sym">;</span>
  TIntMatrix <span class="hl sym">=</span> <span class="hl kwa">array</span><span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">.</span><span class="hl num">.2</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">.</span><span class="hl num">.2</span><span class="hl sym">]</span> <span class="hl kwa">of</span> <span class="hl kwb">integer</span><span class="hl sym">;</span>

<span class="hl kwa">var</span>
  BigIntStack<span class="hl sym">:</span> PBigInt<span class="hl sym">;</span>
  BigIntStackLen<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">;</span>
  BigIntTop<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">;</span>
  FirstFreeBigInt<span class="hl sym">:</span> TBigInt<span class="hl sym">;</span>

<span class="hl com">{ BigInt memory management }</span>

<span class="hl kwa">procedure</span> FreeBigInts<span class="hl sym">;</span>
<span class="hl kwa">var</span>
  Next<span class="hl sym">:</span> TBigInt<span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  <span class="hl kwa">while</span> <span class="hl kwd">assigned</span><span class="hl sym">(</span>FirstFreeBigInt<span class="hl sym">)</span> <span class="hl kwa">do begin</span>
    Next <span class="hl sym">:=</span> FirstFreeBigInt<span class="hl sym">.</span>FNextFree<span class="hl sym">;</span>
    FirstFreeBigInt<span class="hl sym">.</span>Free<span class="hl sym">;</span>
    FirstFreeBigInt <span class="hl sym">:=</span> Next<span class="hl sym">;</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">function</span> <span class="hl kwd">GetBigInt</span><span class="hl sym">(</span>Size<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">;</span> DoClear<span class="hl sym">:</span> <span class="hl kwb">boolean</span> <span class="hl sym">=</span> <span class="hl kwb">true</span><span class="hl sym">) :</span> TBigInt<span class="hl sym">;</span>
<span class="hl kwa">var</span>
  Current<span class="hl sym">,</span> Previous<span class="hl sym">:</span> TBigInt<span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  <span class="hl kwa">if</span> <span class="hl kwd">assigned</span><span class="hl sym">(</span>FirstFreeBigInt<span class="hl sym">)</span> <span class="hl kwa">then begin</span>
    Previous <span class="hl sym">:=</span> <span class="hl kwa">nil</span><span class="hl sym">;</span>
    Current <span class="hl sym">:=</span> FirstFreeBigInt<span class="hl sym">;</span>
    <span class="hl kwa">repeat</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>Current<span class="hl sym">.</span>Capacity<span class="hl sym">&gt;=</span>Size<span class="hl sym">)</span> <span class="hl kwa">then begin</span>
        Result<span class="hl sym">:=</span>Current<span class="hl sym">;</span>
        Result<span class="hl sym">.</span>FSize<span class="hl sym">:=</span> Size<span class="hl sym">;</span>
        <span class="hl kwa">if</span> DoClear <span class="hl kwa">then</span>
          Result<span class="hl sym">.</span>Clear<span class="hl sym">;</span>
        <span class="hl kwa">if</span> <span class="hl kwd">assigned</span><span class="hl sym">(</span>previous<span class="hl sym">)</span> <span class="hl kwa">then</span>
          Previous<span class="hl sym">.</span>FNextFree <span class="hl sym">:=</span> Current<span class="hl sym">.</span>FNextFree
        <span class="hl kwa">else</span>
          FirstFreeBigInt <span class="hl sym">:=</span> Current<span class="hl sym">.</span>FNextFree<span class="hl sym">;</span>
        exit<span class="hl sym">;</span>
      <span class="hl kwa">end</span><span class="hl sym">;</span>
      Previous <span class="hl sym">:=</span> Current<span class="hl sym">;</span>
      Current <span class="hl sym">:=</span> Current<span class="hl sym">.</span>FNextFree<span class="hl sym">;</span>
    <span class="hl kwa">until</span> Current<span class="hl sym">=</span><span class="hl kwa">nil</span><span class="hl sym">;</span>
    Result <span class="hl sym">:=</span> FirstFreeBigInt<span class="hl sym">;</span>
    Result<span class="hl sym">.</span><span class="hl kwd">Resize</span><span class="hl sym">(</span>Size<span class="hl sym">);</span>
    FirstFreeBigInt <span class="hl sym">:=</span> FirstFreeBigInt<span class="hl sym">.</span>FNextFree<span class="hl sym">;</span>
  <span class="hl kwa">end</span>
  <span class="hl kwa">else</span> result <span class="hl sym">:=</span> TBigInt<span class="hl sym">.</span><span class="hl kwd">Create</span><span class="hl sym">(</span>Size<span class="hl sym">);</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">function</span> <span class="hl kwd">GetBigInt</span><span class="hl sym">(</span>bi<span class="hl sym">:</span> TBigInt<span class="hl sym">) :</span> TBigInt<span class="hl sym">;</span> <span class="hl kwa">inline</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  result <span class="hl sym">:=</span> <span class="hl kwd">GetBigInt</span><span class="hl sym">(</span>bi<span class="hl sym">.</span>FSize<span class="hl sym">,</span> <span class="hl kwb">false</span><span class="hl sym">);</span>
  <span class="hl kwd">Move</span><span class="hl sym">(</span>bi<span class="hl sym">.</span>Digit<span class="hl sym">^,</span> Result<span class="hl sym">.</span>Digit<span class="hl sym">^,</span> bi<span class="hl sym">.</span>FSize<span class="hl sym">*</span><span class="hl kwd">sizeof</span><span class="hl sym">(</span>dword<span class="hl sym">));</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">procedure</span> <span class="hl kwd">FreeBigInt</span><span class="hl sym">(</span>bi<span class="hl sym">:</span> TBigInt<span class="hl sym">);</span>
<span class="hl kwa">begin</span>
  bi<span class="hl sym">.</span>FNextFree <span class="hl sym">:=</span> FirstFreeBigInt<span class="hl sym">;</span>
  FirstFreeBigInt <span class="hl sym">:=</span> bi<span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl com">{ TBigInt }</span>

operator <span class="hl sym">:= (</span>i<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">) :</span> TBigInt<span class="hl sym">;</span> <span class="hl kwa">inline</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  Result <span class="hl sym">:=</span> <span class="hl kwd">GetBigInt</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">);</span>
  Result<span class="hl sym">.</span>Digit<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] :=</span> <span class="hl kwd">dword</span><span class="hl sym">(</span>i<span class="hl sym">);</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">constructor</span> TBigInt<span class="hl sym">.</span><span class="hl kwd">Create</span><span class="hl sym">(</span>InitialSize<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">);</span>
<span class="hl kwa">begin</span>
  FSize<span class="hl sym">:=</span> InitialSize<span class="hl sym">;</span>
  Capacity<span class="hl sym">:=</span> <span class="hl num">2</span><span class="hl sym">*</span>FSize<span class="hl sym">;</span>
  <span class="hl kwd">GetMem</span><span class="hl sym">(</span>Digit<span class="hl sym">,</span> Capacity<span class="hl sym">*</span><span class="hl kwd">sizeof</span><span class="hl sym">(</span>DWord<span class="hl sym">));</span>
  Clear<span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">destructor</span> TBigInt<span class="hl sym">.</span>Destroy<span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  <span class="hl kwd">FreeMem</span><span class="hl sym">(</span>Digit<span class="hl sym">);</span>
  <span class="hl kwa">inherited</span> Destroy<span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">procedure</span> TBigInt<span class="hl sym">.</span>Clear<span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  <span class="hl kwd">FillChar</span><span class="hl sym">(</span>Digit<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">],</span> FSize<span class="hl sym">*</span><span class="hl kwd">sizeof</span><span class="hl sym">(</span>DWord<span class="hl sym">),</span> <span class="hl num">0</span><span class="hl sym">);</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">procedure</span> TBigInt<span class="hl sym">.</span><span class="hl kwd">Resize</span><span class="hl sym">(</span>NewSize<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">);</span>
<span class="hl kwa">begin</span>
  <span class="hl kwd">FreeMem</span><span class="hl sym">(</span>Digit<span class="hl sym">);</span>
  FSize<span class="hl sym">:=</span> NewSize<span class="hl sym">;</span>
  Capacity<span class="hl sym">:=</span> <span class="hl num">2</span><span class="hl sym">*</span>FSize<span class="hl sym">;</span>
  <span class="hl kwd">GetMem</span><span class="hl sym">(</span>Digit<span class="hl sym">,</span> Capacity<span class="hl sym">*</span><span class="hl kwd">sizeof</span><span class="hl sym">(</span>DWord<span class="hl sym">));</span>
  Clear<span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">function</span> TBigInt<span class="hl sym">.</span>IsNegative<span class="hl sym">:</span> <span class="hl kwb">boolean</span><span class="hl sym">;</span> <span class="hl kwa">inline</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  result <span class="hl sym">:= (</span>Digit<span class="hl sym">[</span>FSize<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">]</span> <span class="hl kwa">and</span> <span class="hl num">$80000000</span><span class="hl sym">)&gt;</span><span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">function</span> TBigInt<span class="hl sym">.</span>IsZero<span class="hl sym">:</span><span class="hl kwb">boolean</span><span class="hl sym">;</span><span class="hl kwa">inline</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  result <span class="hl sym">:= (</span>FSize<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">and</span> <span class="hl sym">(</span>Digit<span class="hl sym">^=</span><span class="hl num">0</span><span class="hl sym">);</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">procedure</span> TBigInt<span class="hl sym">.</span>Negate<span class="hl sym">;</span>
<span class="hl kwa">var</span>
  value<span class="hl sym">:</span> <span class="hl kwb">int64</span><span class="hl sym">;</span>
  valueparts <span class="hl sym">:</span> <span class="hl kwa">array</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">.</span><span class="hl num">.1</span><span class="hl sym">]</span> <span class="hl kwa">of</span> dword <span class="hl kwa">absolute</span> value<span class="hl sym">;</span>
  carry<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">;</span>
  CurDigit<span class="hl sym">:</span> PDWord<span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  <span class="hl kwa">if</span> IsZero <span class="hl kwa">then</span> exit<span class="hl sym">;</span>
  CurDigit<span class="hl sym">:= &#64;</span>Digit<span class="hl sym">[</span>FSize<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">];</span>
  <span class="hl kwa">repeat</span>
    CurDigit<span class="hl sym">^:=</span> <span class="hl kwa">not</span> CurDigit<span class="hl sym">^;</span>
    <span class="hl kwd">dec</span><span class="hl sym">(</span>CurDigit<span class="hl sym">);</span>
  <span class="hl kwa">until</span> CurDigit<span class="hl sym">&lt;</span>Digit<span class="hl sym">;</span>
  carry <span class="hl sym">:=</span> <span class="hl num">1</span><span class="hl sym">;</span>
  CurDigit<span class="hl sym">:=</span>Digit<span class="hl sym">;</span>
  <span class="hl kwa">while</span> <span class="hl sym">(</span>carry<span class="hl sym">&gt;</span><span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">do begin</span>
    value <span class="hl sym">:=</span> CurDigit<span class="hl sym">^;</span>
    <span class="hl kwd">inc</span><span class="hl sym">(</span>value<span class="hl sym">);</span>
    CurDigit<span class="hl sym">^ :=</span> valueparts<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
    carry <span class="hl sym">:=</span> valueparts<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">];</span>
    <span class="hl kwd">inc</span><span class="hl sym">(</span>CurDigit<span class="hl sym">);</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">function</span> TBigInt<span class="hl sym">.</span><span class="hl kwd">GetDigit</span><span class="hl sym">(</span>i<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">):</span> DWord<span class="hl sym">;</span> <span class="hl kwa">inline</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  <span class="hl kwa">if</span> <span class="hl sym">(</span>i<span class="hl sym">&lt;</span>FSize<span class="hl sym">)</span> <span class="hl kwa">then</span>
    result <span class="hl sym">:=</span> Digit<span class="hl sym">[</span>i<span class="hl sym">]</span>
  <span class="hl kwa">else if</span> IsNegative <span class="hl kwa">then</span>
    result <span class="hl sym">:=</span> <span class="hl num">$FFFFFFFF</span>
  <span class="hl kwa">else</span>
    result <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl com">{ BigInt Calculation }</span>

<span class="hl kwa">procedure</span> <span class="hl kwd">PushBigInt</span><span class="hl sym">(</span>bi<span class="hl sym">:</span> TBigInt<span class="hl sym">);</span>
<span class="hl kwa">begin</span>
  <span class="hl kwd">inc</span><span class="hl sym">(</span>BigIntTop<span class="hl sym">);</span>
  <span class="hl kwa">if</span> <span class="hl sym">(</span>BigIntTop<span class="hl sym">=</span>BigIntStackLen<span class="hl sym">)</span> <span class="hl kwa">then</span>
    <span class="hl kwd">RunError</span><span class="hl sym">(</span><span class="hl num">1025</span><span class="hl sym">);</span> <span class="hl slc">// not implemented, too complicated calculation</span>
  BigIntStack<span class="hl sym">[</span>BigIntTop<span class="hl sym">]:=</span>bi<span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">procedure</span> <span class="hl kwd">PushBigIntByValue</span><span class="hl sym">(</span>bi<span class="hl sym">:</span> TBigInt<span class="hl sym">);</span>
<span class="hl kwa">begin</span>
  <span class="hl kwd">inc</span><span class="hl sym">(</span>BigIntTop<span class="hl sym">);</span>
  <span class="hl kwa">if</span> <span class="hl sym">(</span>BigIntTop<span class="hl sym">=</span>BigIntStackLen<span class="hl sym">)</span> <span class="hl kwa">then</span>
    <span class="hl kwd">RunError</span><span class="hl sym">(</span><span class="hl num">1025</span><span class="hl sym">);</span> <span class="hl slc">// not implemented, too complicated calculation</span>
  BigIntStack<span class="hl sym">[</span>BigIntTop<span class="hl sym">]:=</span> <span class="hl kwd">GetBigInt</span><span class="hl sym">(</span>bi<span class="hl sym">);</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">function</span> PopBigInt<span class="hl sym">:</span> TBigInt<span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  result<span class="hl sym">:=</span>BigIntStack<span class="hl sym">[</span>BigIntTop<span class="hl sym">];</span>
  <span class="hl kwd">dec</span><span class="hl sym">(</span>BigIntTop<span class="hl sym">);</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">procedure</span> BigIntAdd<span class="hl sym">;</span>
<span class="hl kwa">var</span>
  a<span class="hl sym">,</span> b<span class="hl sym">:</span> TBigInt<span class="hl sym">;</span>
  bSignExtend<span class="hl sym">:</span> dword<span class="hl sym">;</span>
  Result<span class="hl sym">:</span> TBigInt<span class="hl sym">;</span>
  carry<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">;</span>
  sum<span class="hl sym">:</span> <span class="hl kwb">int64</span><span class="hl sym">;</span>
  maxsize<span class="hl sym">,</span> minsize<span class="hl sym">,</span> i<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">;</span>
  sumparts <span class="hl sym">:</span> <span class="hl kwa">array</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">.</span><span class="hl num">.1</span><span class="hl sym">]</span> <span class="hl kwa">of</span> <span class="hl kwb">integer</span> <span class="hl kwa">absolute</span> sum<span class="hl sym">;</span>
  aDigit<span class="hl sym">,</span> bDigit<span class="hl sym">,</span> ResultDigit<span class="hl sym">:</span> PDWord<span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  <span class="hl kwa">if</span> BigIntStack<span class="hl sym">[</span>BigIntTop<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">].</span>FSize<span class="hl sym">&lt;</span>BigIntStack<span class="hl sym">[</span>BigIntTop<span class="hl sym">].</span>FSize <span class="hl kwa">then begin</span>
    a<span class="hl sym">:=</span> BigIntStack<span class="hl sym">[</span>BigIntTop<span class="hl sym">];</span>
    b<span class="hl sym">:=</span> BigIntStack<span class="hl sym">[</span>BigIntTop<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">];</span>
  <span class="hl kwa">end</span>
  <span class="hl kwa">else begin</span>
    a<span class="hl sym">:=</span> BigIntStack<span class="hl sym">[</span>BigIntTop<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">];</span>
    b<span class="hl sym">:=</span> BigIntStack<span class="hl sym">[</span>BigIntTop<span class="hl sym">];</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>
  <span class="hl kwa">if</span> b<span class="hl sym">.</span>IsZero <span class="hl kwa">then</span>
    Result <span class="hl sym">:=</span> a
  <span class="hl kwa">else begin</span>
    maxsize<span class="hl sym">:=</span>a<span class="hl sym">.</span>FSize<span class="hl sym">;</span>
    minsize<span class="hl sym">:=</span>b<span class="hl sym">.</span>FSize<span class="hl sym">;</span>
    Result <span class="hl sym">:=</span> <span class="hl kwd">GetBigInt</span><span class="hl sym">(</span>maxsize<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">);</span>
    carry <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    aDigit<span class="hl sym">:=</span> a<span class="hl sym">.</span>Digit<span class="hl sym">;</span> bDigit<span class="hl sym">:=</span> b<span class="hl sym">.</span>Digit<span class="hl sym">;</span> ResultDigit<span class="hl sym">:=</span> Result<span class="hl sym">.</span>Digit<span class="hl sym">;</span>
    <span class="hl kwa">for</span> i<span class="hl sym">:=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> minsize<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl kwa">do begin</span>
      sum <span class="hl sym">:=</span> <span class="hl kwb">int64</span><span class="hl sym">(</span>aDigit<span class="hl sym">^) +</span> <span class="hl kwb">int64</span><span class="hl sym">(</span>bDigit<span class="hl sym">^) +</span> carry<span class="hl sym">;</span>
      carry <span class="hl sym">:=</span> sumparts<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">];</span>
      ResultDigit<span class="hl sym">^ :=</span> sumparts<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
      <span class="hl kwd">inc</span><span class="hl sym">(</span>aDigit<span class="hl sym">);</span> <span class="hl kwd">inc</span><span class="hl sym">(</span>bDigit<span class="hl sym">);</span> <span class="hl kwd">inc</span><span class="hl sym">(</span>ResultDigit<span class="hl sym">);</span>
    <span class="hl kwa">end</span><span class="hl sym">;</span>
    <span class="hl kwa">if</span> b<span class="hl sym">.</span>IsNegative <span class="hl kwa">then</span>
      bSignExtend <span class="hl sym">:=</span> <span class="hl num">$FFFFFFFF</span>
    <span class="hl kwa">else</span>
      bSignExtend <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl kwa">for</span> i<span class="hl sym">:=</span> minsize <span class="hl kwa">to</span> maxsize <span class="hl kwa">do begin</span>
      sum <span class="hl sym">:=</span> <span class="hl kwb">int64</span><span class="hl sym">(</span>a<span class="hl sym">.</span><span class="hl kwd">GetDigit</span><span class="hl sym">(</span>i<span class="hl sym">)) +</span> bSignExtend <span class="hl sym">+</span> carry<span class="hl sym">;</span>
      carry <span class="hl sym">:=</span> sumparts<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">];</span>
      ResultDigit<span class="hl sym">^ :=</span> sumparts<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
      <span class="hl kwd">inc</span><span class="hl sym">(</span>ResultDigit<span class="hl sym">);</span>
    <span class="hl kwa">end</span><span class="hl sym">;</span>
    <span class="hl kwa">while</span> <span class="hl sym">(</span>Result<span class="hl sym">.</span>FSize<span class="hl sym">&gt;</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">and</span> <span class="hl sym">(</span>Result<span class="hl sym">.</span>Digit<span class="hl sym">[</span>Result<span class="hl sym">.</span>FSize<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">]=</span><span class="hl num">0</span><span class="hl sym">)</span>
      <span class="hl kwa">and</span> <span class="hl sym">(</span>Result<span class="hl sym">.</span>Digit<span class="hl sym">[</span>Result<span class="hl sym">.</span>FSize<span class="hl sym">-</span><span class="hl num">2</span><span class="hl sym">]</span> <span class="hl kwa">and</span> <span class="hl num">$80000000</span><span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">do</span>
      <span class="hl kwd">dec</span><span class="hl sym">(</span>Result<span class="hl sym">.</span>FSize<span class="hl sym">);</span>
    <span class="hl kwa">while</span> <span class="hl sym">(</span>Result<span class="hl sym">.</span>FSize<span class="hl sym">&gt;</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">and</span>
       <span class="hl sym">(</span>Result<span class="hl sym">.</span>Digit<span class="hl sym">[</span>Result<span class="hl sym">.</span>FSize<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">]=</span><span class="hl num">$FFFFFFFF</span><span class="hl sym">)</span> <span class="hl kwa">and</span>
       <span class="hl sym">(</span>Result<span class="hl sym">.</span>Digit<span class="hl sym">[</span>Result<span class="hl sym">.</span>FSize<span class="hl sym">-</span><span class="hl num">2</span><span class="hl sym">]</span> <span class="hl kwa">and</span> <span class="hl num">$80000000</span><span class="hl sym">&gt;</span><span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">do</span>
      <span class="hl kwd">dec</span><span class="hl sym">(</span>Result<span class="hl sym">.</span>FSize<span class="hl sym">);</span>
    <span class="hl kwd">FreeBigInt</span><span class="hl sym">(</span>a<span class="hl sym">);</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>
  <span class="hl kwd">FreeBigInt</span><span class="hl sym">(</span>b<span class="hl sym">);</span>
  <span class="hl kwd">dec</span><span class="hl sym">(</span>BigIntTop<span class="hl sym">);</span>
  BigIntStack<span class="hl sym">[</span>BigIntTop<span class="hl sym">]:=</span>Result<span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">procedure</span> <span class="hl kwd">BigIntMulInt</span><span class="hl sym">(</span>int<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">);</span>
<span class="hl kwa">type</span>
  TWordPart <span class="hl sym">=</span> <span class="hl kwa">record</span>
    w1<span class="hl sym">,</span> w2<span class="hl sym">:</span> <span class="hl kwb">word</span><span class="hl sym">;</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>
<span class="hl kwa">var</span>
  mcarry<span class="hl sym">:</span> dword<span class="hl sym">;</span>
  value<span class="hl sym">:</span> qword<span class="hl sym">;</span>
  valueparts <span class="hl sym">:</span> <span class="hl kwa">array</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">.</span><span class="hl num">.1</span><span class="hl sym">]</span> <span class="hl kwa">of</span> dword <span class="hl kwa">absolute</span> value<span class="hl sym">;</span>
  BiNeg<span class="hl sym">,</span> IntNeg<span class="hl sym">:</span> <span class="hl kwb">boolean</span><span class="hl sym">;</span>
  i<span class="hl sym">:</span><span class="hl kwb">Integer</span><span class="hl sym">;</span>
  TopBi<span class="hl sym">,</span> Result<span class="hl sym">:</span> TBigInt<span class="hl sym">;</span>
  TopBiDigit<span class="hl sym">,</span> ResultDigit<span class="hl sym">:</span> PDWord<span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  TopBi <span class="hl sym">:=</span> BigIntStack<span class="hl sym">[</span>BigIntTop<span class="hl sym">];</span>
  <span class="hl kwa">if</span> <span class="hl sym">(</span>int<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">or</span> <span class="hl sym">(</span>TopBi<span class="hl sym">.</span>IsZero<span class="hl sym">)</span> <span class="hl kwa">then begin</span>
    TopBi<span class="hl sym">.</span>FSize <span class="hl sym">:=</span> <span class="hl num">1</span><span class="hl sym">;</span>
    TopBi<span class="hl sym">.</span>Digit<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]:=</span><span class="hl num">0</span><span class="hl sym">;</span>
  <span class="hl kwa">end</span>
  <span class="hl kwa">else begin</span>
    BiNeg <span class="hl sym">:=</span> TopBi<span class="hl sym">.</span>IsNegative<span class="hl sym">;</span>
    <span class="hl kwa">if</span> BiNeg <span class="hl kwa">then</span>
      TopBi<span class="hl sym">.</span>Negate<span class="hl sym">;</span>
    IntNeg <span class="hl sym">:=</span> int<span class="hl sym">&lt;</span><span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl kwa">if</span> IntNeg <span class="hl kwa">then</span>
      int <span class="hl sym">:= -</span>int<span class="hl sym">;</span>
    Result <span class="hl sym">:=</span> <span class="hl kwd">GetBigInt</span><span class="hl sym">(</span>TopBi<span class="hl sym">.</span>FSize<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> <span class="hl kwb">false</span><span class="hl sym">);</span>
    mcarry <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    TopBiDigit <span class="hl sym">:=</span> TopBi<span class="hl sym">.</span>Digit<span class="hl sym">;</span>
    ResultDigit <span class="hl sym">:=</span> Result<span class="hl sym">.</span>Digit<span class="hl sym">;</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>int <span class="hl kwa">and</span> <span class="hl num">$FFFF0000</span><span class="hl sym">)=</span><span class="hl num">0</span> <span class="hl kwa">then</span>
      <span class="hl kwa">for</span> i<span class="hl sym">:=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> Result<span class="hl sym">.</span>FSize<span class="hl sym">-</span><span class="hl num">2</span> <span class="hl kwa">do begin</span>
        <span class="hl com">{this is what I want to do, but to get to the carry fpc compiles it into</span>
<span class="hl com">        an expensive qword*qword mulitplication:   }</span>
        <span class="hl com">{value := qword(TopBiDigit^) * int + mcarry;}</span>
        value <span class="hl sym">:=</span> <span class="hl kwd">TWordPart</span><span class="hl sym">(</span>TopBiDigit<span class="hl sym">^).</span>w1 <span class="hl sym">*</span> <span class="hl kwb">word</span><span class="hl sym">(</span>int<span class="hl sym">) +</span>
          <span class="hl kwd">qword</span><span class="hl sym">(</span><span class="hl kwd">TWordPart</span><span class="hl sym">(</span>TopBiDigit<span class="hl sym">^).</span>w2 <span class="hl sym">*</span> <span class="hl kwb">word</span><span class="hl sym">(</span>int<span class="hl sym">))</span> <span class="hl kwa">shl</span> <span class="hl num">16</span> <span class="hl sym">+</span> mcarry<span class="hl sym">;</span>
        ResultDigit<span class="hl sym">^ :=</span> valueparts<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
        mcarry <span class="hl sym">:=</span> valueparts<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">];</span>
        <span class="hl kwd">inc</span><span class="hl sym">(</span>TopBiDigit<span class="hl sym">);</span> <span class="hl kwd">inc</span><span class="hl sym">(</span>ResultDigit<span class="hl sym">);</span>
      <span class="hl kwa">end</span>
    <span class="hl kwa">else</span>
    <span class="hl slc">// this branch is less often taken, so no hand code dword * dword multiplication</span>
      <span class="hl kwa">for</span> i<span class="hl sym">:=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> Result<span class="hl sym">.</span>FSize<span class="hl sym">-</span><span class="hl num">2</span> <span class="hl kwa">do begin</span>
        value <span class="hl sym">:=</span> <span class="hl kwd">qword</span><span class="hl sym">(</span>TopBiDigit<span class="hl sym">^) *</span> int <span class="hl sym">+</span> mcarry<span class="hl sym">;</span>
        ResultDigit<span class="hl sym">^ :=</span> valueparts<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
        mcarry <span class="hl sym">:=</span> valueparts<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">];</span>
        <span class="hl kwd">inc</span><span class="hl sym">(</span>TopBiDigit<span class="hl sym">);</span> <span class="hl kwd">inc</span><span class="hl sym">(</span>ResultDigit<span class="hl sym">);</span>
      <span class="hl kwa">end</span><span class="hl sym">;</span>
    ResultDigit<span class="hl sym">^ :=</span> mcarry<span class="hl sym">;</span>
    <span class="hl kwa">while</span> <span class="hl sym">(</span>Result<span class="hl sym">.</span>FSize<span class="hl sym">&gt;</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">and</span> <span class="hl sym">(</span>Result<span class="hl sym">.</span>Digit<span class="hl sym">[</span>Result<span class="hl sym">.</span>FSize<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">]=</span><span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">and</span>
      <span class="hl sym">((</span>Result<span class="hl sym">.</span>Digit<span class="hl sym">[</span>Result<span class="hl sym">.</span>FSize<span class="hl sym">-</span><span class="hl num">2</span><span class="hl sym">]</span> <span class="hl kwa">and</span> <span class="hl num">$80000000</span><span class="hl sym">)=</span><span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">do</span>
      <span class="hl kwd">dec</span><span class="hl sym">(</span>Result<span class="hl sym">.</span>FSize<span class="hl sym">);</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>BiNeg<span class="hl sym">&lt;&gt;</span>IntNeg<span class="hl sym">)</span> <span class="hl kwa">then</span>
      Result<span class="hl sym">.</span>Negate<span class="hl sym">;</span>
    <span class="hl kwd">FreeBigInt</span><span class="hl sym">(</span>TopBi<span class="hl sym">);</span>
    BigIntStack<span class="hl sym">[</span>BigIntTop<span class="hl sym">]:=</span>Result<span class="hl sym">;</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">function</span> BigIntDivIntResult<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">;</span>
<span class="hl kwa">var</span>
  dividend<span class="hl sym">:</span> TBigInt<span class="hl sym">;</span>
  divisor<span class="hl sym">:</span> TBigInt<span class="hl sym">;</span>
  carry<span class="hl sym">:</span> dword<span class="hl sym">;</span>
  diff<span class="hl sym">:</span> <span class="hl kwb">int64</span><span class="hl sym">;</span>
  diffparts<span class="hl sym">:</span> <span class="hl kwa">array</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">.</span><span class="hl num">.1</span><span class="hl sym">]</span> <span class="hl kwa">of</span> dword <span class="hl kwa">absolute</span> diff<span class="hl sym">;</span>
  i<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">;</span>
  DividendDigit<span class="hl sym">:</span> PDWord<span class="hl sym">;</span>
  DivisorDigit<span class="hl sym">:</span> PDWord<span class="hl sym">;</span>

  <span class="hl kwa">function</span> DividendIsSmallerThanDivisor <span class="hl sym">:</span> <span class="hl kwb">boolean</span><span class="hl sym">;</span> <span class="hl kwa">inline</span><span class="hl sym">;</span>
  <span class="hl kwa">var</span>
    i<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">;</span>
  <span class="hl kwa">begin</span>
    <span class="hl kwa">while</span> <span class="hl sym">(</span>Dividend<span class="hl sym">.</span>FSize<span class="hl sym">&gt;</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">and</span> <span class="hl sym">(</span>Dividend<span class="hl sym">.</span>Digit<span class="hl sym">[</span>Dividend<span class="hl sym">.</span>FSize<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">]=</span><span class="hl num">0</span><span class="hl sym">)</span>
      <span class="hl kwa">and</span> <span class="hl sym">(</span>Dividend<span class="hl sym">.</span>Digit<span class="hl sym">[</span>Dividend<span class="hl sym">.</span>FSize<span class="hl sym">-</span><span class="hl num">2</span><span class="hl sym">]</span> <span class="hl kwa">and</span> <span class="hl num">$80000000</span><span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">do</span>
      <span class="hl kwd">dec</span><span class="hl sym">(</span>Dividend<span class="hl sym">.</span>FSize<span class="hl sym">);</span>
    <span class="hl kwa">if</span> dividend<span class="hl sym">.</span>FSize<span class="hl sym">=</span>divisor<span class="hl sym">.</span>FSize <span class="hl kwa">then begin</span>
      i <span class="hl sym">:=</span> dividend<span class="hl sym">.</span>FSize<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>i<span class="hl sym">&gt;=</span><span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">and</span> <span class="hl sym">(</span>dividend<span class="hl sym">.</span>Digit<span class="hl sym">[</span>i<span class="hl sym">]=</span>divisor<span class="hl sym">.</span>Digit<span class="hl sym">[</span>i<span class="hl sym">])</span> <span class="hl kwa">do</span>
        <span class="hl kwd">dec</span><span class="hl sym">(</span>i<span class="hl sym">);</span>
      Result<span class="hl sym">:= (</span>i<span class="hl sym">&gt;=</span><span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">and</span> <span class="hl sym">(</span>dividend<span class="hl sym">.</span>Digit<span class="hl sym">[</span>i<span class="hl sym">]&lt;</span>divisor<span class="hl sym">.</span>Digit<span class="hl sym">[</span>i<span class="hl sym">]);</span>
    <span class="hl kwa">end</span>
    <span class="hl kwa">else</span>
      Result<span class="hl sym">:=</span>dividend<span class="hl sym">.</span>FSize<span class="hl sym">&lt;</span>divisor<span class="hl sym">.</span>FSize<span class="hl sym">;</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">begin</span>
  dividend <span class="hl sym">:=</span> BigIntStack<span class="hl sym">[</span>BigIntTop<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">];</span>
  divisor <span class="hl sym">:=</span> BigIntStack<span class="hl sym">[</span>BigIntTop<span class="hl sym">];</span>
  Result<span class="hl sym">:=</span><span class="hl num">0</span><span class="hl sym">;</span>
  <span class="hl kwa">while not</span> DividendIsSmallerThanDivisor <span class="hl kwa">do begin</span>
    <span class="hl kwd">inc</span><span class="hl sym">(</span>Result<span class="hl sym">);</span>
    carry <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    DividendDigit <span class="hl sym">:=</span> Dividend<span class="hl sym">.</span>Digit<span class="hl sym">;</span>
    DivisorDigit <span class="hl sym">:=</span> Divisor<span class="hl sym">.</span>Digit<span class="hl sym">;</span>
    <span class="hl kwa">for</span> i<span class="hl sym">:=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> divisor<span class="hl sym">.</span>FSize<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl kwa">do begin</span>
      diff <span class="hl sym">:=</span> <span class="hl kwb">int64</span><span class="hl sym">(</span>dividendDigit<span class="hl sym">^) - (</span>divisorDigit<span class="hl sym">^ +</span> carry<span class="hl sym">);</span>
      carry <span class="hl sym">:=</span> diffparts<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]</span> <span class="hl kwa">and</span> <span class="hl num">$1</span><span class="hl sym">;</span>
      dividendDigit<span class="hl sym">^ :=</span> diffparts<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
      <span class="hl kwd">inc</span><span class="hl sym">(</span>DividendDigit<span class="hl sym">);</span> <span class="hl kwd">inc</span><span class="hl sym">(</span>DivisorDigit<span class="hl sym">);</span>
    <span class="hl kwa">end</span><span class="hl sym">;</span>
    <span class="hl kwa">for</span> i<span class="hl sym">:=</span> divisor<span class="hl sym">.</span>FSize <span class="hl kwa">to</span> dividend<span class="hl sym">.</span>FSize<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl kwa">do begin</span>
      diff <span class="hl sym">:=</span> <span class="hl kwb">int64</span><span class="hl sym">(</span>dividendDigit<span class="hl sym">^) - (</span>divisor<span class="hl sym">.</span><span class="hl kwd">GetDigit</span><span class="hl sym">(</span>i<span class="hl sym">) +</span> carry<span class="hl sym">);</span>
      carry <span class="hl sym">:=</span> diffparts<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]</span> <span class="hl kwa">and</span> <span class="hl num">$1</span><span class="hl sym">;</span>
      dividendDigit<span class="hl sym">^ :=</span> diffparts<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
      dividend<span class="hl sym">.</span>Digit<span class="hl sym">[</span>i<span class="hl sym">] :=</span> diffparts<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
      <span class="hl kwd">inc</span><span class="hl sym">(</span>DividendDigit<span class="hl sym">);</span>
    <span class="hl kwa">end</span><span class="hl sym">;</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>
  <span class="hl kwd">FreeBigInt</span><span class="hl sym">(</span>dividend<span class="hl sym">);</span>
  <span class="hl kwd">FreeBigInt</span><span class="hl sym">(</span>divisor<span class="hl sym">);</span>
  <span class="hl kwd">dec</span><span class="hl sym">(</span>BigIntTop<span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">);</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">procedure</span> Init<span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  BigIntStackLen <span class="hl sym">:=</span> <span class="hl num">8</span><span class="hl sym">;</span>
  <span class="hl kwd">GetMem</span><span class="hl sym">(</span>BigIntStack<span class="hl sym">,</span> BigIntStackLen <span class="hl sym">*</span> <span class="hl kwd">sizeof</span><span class="hl sym">(</span>TBigInt<span class="hl sym">));</span>
  BigIntTop <span class="hl sym">:= -</span><span class="hl num">1</span><span class="hl sym">;</span>
  FirstFreeBigInt <span class="hl sym">:=</span> <span class="hl kwa">nil</span><span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">procedure</span> Finalize<span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  <span class="hl kwd">Freemem</span><span class="hl sym">(</span>BigIntStack<span class="hl sym">);</span>
  FreeBigInts<span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl com">{ Matrix manipulation }</span>

<span class="hl kwa">procedure</span> <span class="hl kwd">FreeBigIntMatrix</span><span class="hl sym">(</span>a<span class="hl sym">:</span> TBigMatrix<span class="hl sym">);</span> <span class="hl kwa">inline</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  <span class="hl kwd">FreeBigInt</span><span class="hl sym">(</span>a<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">]);</span>
  <span class="hl kwd">FreeBigInt</span><span class="hl sym">(</span>a<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">]);</span>
  <span class="hl kwd">FreeBigInt</span><span class="hl sym">(</span>a<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">]);</span>
  <span class="hl kwd">FreeBigInt</span><span class="hl sym">(</span>a<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">]);</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">function</span> <span class="hl kwd">DotProduct</span><span class="hl sym">(</span>a1<span class="hl sym">,</span>a2<span class="hl sym">:</span> TBigInt<span class="hl sym">;</span> b1<span class="hl sym">,</span>b2<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">;</span> FreeBigInt<span class="hl sym">:</span> <span class="hl kwb">boolean</span><span class="hl sym">) :</span> TBigInt<span class="hl sym">;</span> <span class="hl kwa">inline</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  <span class="hl kwa">if</span> FreeBigInt <span class="hl kwa">then</span>
    <span class="hl kwd">PushBigInt</span><span class="hl sym">(</span>a1<span class="hl sym">)</span>
  <span class="hl kwa">else</span>
    <span class="hl kwd">PushBigIntByValue</span><span class="hl sym">(</span>a1<span class="hl sym">);</span>
  <span class="hl kwd">BigIntMulInt</span><span class="hl sym">(</span>b1<span class="hl sym">);</span>
  <span class="hl kwa">if</span> FreeBigInt <span class="hl kwa">then</span>
    <span class="hl kwd">PushBigInt</span><span class="hl sym">(</span>a2<span class="hl sym">)</span>
  <span class="hl kwa">else</span>
    <span class="hl kwd">PushBigIntByValue</span><span class="hl sym">(</span>a2<span class="hl sym">);</span>
  <span class="hl kwd">BigIntMulInt</span><span class="hl sym">(</span>b2<span class="hl sym">);</span>
  BigIntAdd<span class="hl sym">;</span>
  Result<span class="hl sym">:=</span> PopBigInt<span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

operator <span class="hl sym">* (</span>a<span class="hl sym">:</span> TBigMatrix<span class="hl sym">;</span> b <span class="hl sym">:</span> TIntMatrix<span class="hl sym">) :</span> TBigMatrix<span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  result<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">] :=</span> <span class="hl kwd">DotProduct</span><span class="hl sym">(</span>a<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">],</span>a<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">],</span> b<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">],</span> b<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">],</span> <span class="hl kwb">false</span><span class="hl sym">);</span>
  result<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">] :=</span> <span class="hl kwd">DotProduct</span><span class="hl sym">(</span>a<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">],</span>a<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">],</span> b<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">],</span> b<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">],</span> <span class="hl kwb">true</span><span class="hl sym">);</span>
  result<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">] :=</span> <span class="hl kwd">DotProduct</span><span class="hl sym">(</span>a<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">],</span>a<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">],</span> b<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">],</span> b<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">],</span> <span class="hl kwb">false</span><span class="hl sym">);</span>
  result<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">] :=</span> <span class="hl kwd">DotProduct</span><span class="hl sym">(</span>a<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">],</span>a<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">],</span> b<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">],</span> b<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">],</span> <span class="hl kwb">true</span><span class="hl sym">);</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

operator <span class="hl sym">* (</span>a<span class="hl sym">:</span> TIntMatrix<span class="hl sym">;</span> b <span class="hl sym">:</span> TBigMatrix<span class="hl sym">) :</span> TBigMatrix<span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  result<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">] :=</span> <span class="hl kwd">DotProduct</span><span class="hl sym">(</span>b<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">],</span>b<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">],</span>a<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">],</span>a<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">],</span> <span class="hl kwb">false</span><span class="hl sym">);</span>
  result<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">] :=</span> <span class="hl kwd">DotProduct</span><span class="hl sym">(</span>b<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">],</span>b<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">],</span>a<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">],</span>a<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">],</span> <span class="hl kwb">false</span><span class="hl sym">);</span>
  result<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">] :=</span> <span class="hl kwd">DotProduct</span><span class="hl sym">(</span>b<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">],</span>b<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">],</span>a<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">],</span>a<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">],</span> <span class="hl kwb">true</span><span class="hl sym">);</span>
  result<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">] :=</span> <span class="hl kwd">DotProduct</span><span class="hl sym">(</span>b<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">],</span>b<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">],</span>a<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">],</span>a<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">],</span> <span class="hl kwb">true</span><span class="hl sym">);</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">function</span> <span class="hl kwd">InitBigMatrix</span><span class="hl sym">(</span>a<span class="hl sym">,</span>b<span class="hl sym">,</span>c<span class="hl sym">,</span>d<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">):</span> TBigMatrix<span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  result<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">] :=</span> a<span class="hl sym">;</span>
  result<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">] :=</span> b<span class="hl sym">;</span>
  result<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">] :=</span> c<span class="hl sym">;</span>
  result<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">] :=</span> d<span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">function</span> <span class="hl kwd">InitIntMatrix</span><span class="hl sym">(</span>a<span class="hl sym">,</span>b<span class="hl sym">,</span>c<span class="hl sym">,</span>d<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">):</span> TIntMatrix<span class="hl sym">;</span> <span class="hl kwa">inline</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  result<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">] :=</span> a<span class="hl sym">;</span>
  result<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">] :=</span> b<span class="hl sym">;</span>
  result<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">] :=</span> c<span class="hl sym">;</span>
  result<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">] :=</span> d<span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl com">{ calculating pidigits}</span>

<span class="hl kwa">procedure</span> <span class="hl kwd">PrintPiDigits</span><span class="hl sym">(</span><span class="hl kwa">const</span> NumDigits<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">);</span>
<span class="hl kwa">var</span>
  n<span class="hl sym">:</span> <span class="hl kwb">integer</span> <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
  k<span class="hl sym">:</span> <span class="hl kwb">integer</span> <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
  z<span class="hl sym">:</span> TBigMatrix<span class="hl sym">;</span>
  x<span class="hl sym">,</span>p<span class="hl sym">:</span> TIntMatrix<span class="hl sym">;</span>
  Digit<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">;</span>

  <span class="hl kwa">function</span> <span class="hl kwd">Extract</span><span class="hl sym">(</span>x<span class="hl sym">:</span><span class="hl kwb">integer</span><span class="hl sym">) :</span> <span class="hl kwb">integer</span><span class="hl sym">;</span>
  <span class="hl kwa">begin</span>
    <span class="hl kwd">PushBigIntByValue</span><span class="hl sym">(</span>z<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">]);</span>
    <span class="hl kwd">BigIntMulInt</span><span class="hl sym">(</span>x<span class="hl sym">);</span>
    <span class="hl kwd">PushBigIntByValue</span><span class="hl sym">(</span>z<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">]);</span>
    BigIntAdd<span class="hl sym">;</span>
    <span class="hl kwd">PushBigIntByValue</span><span class="hl sym">(</span>z<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">]);</span>
    <span class="hl kwd">BigIntMulInt</span><span class="hl sym">(</span>x<span class="hl sym">);</span>
    <span class="hl kwd">PushBigIntByValue</span><span class="hl sym">(</span>z<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">]);</span>
    BigIntAdd<span class="hl sym">;</span>
    result <span class="hl sym">:=</span> BigIntDivIntResult<span class="hl sym">;</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>

  <span class="hl kwa">function</span> GetDigit <span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">;</span>
  <span class="hl kwa">begin</span>
    result <span class="hl sym">:=</span> <span class="hl kwd">Extract</span><span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">);</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>

  <span class="hl kwa">function</span> IsSafe <span class="hl sym">:</span> <span class="hl kwb">boolean</span><span class="hl sym">;</span>
  <span class="hl kwa">begin</span>
    result <span class="hl sym">:=</span> Digit <span class="hl sym">=</span> <span class="hl kwd">Extract</span><span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">);</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>

  <span class="hl kwa">procedure</span> Produce<span class="hl sym">;</span>
  <span class="hl kwa">begin</span>
    p<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">] := -</span><span class="hl num">10</span> <span class="hl sym">*</span> digit<span class="hl sym">;</span>
    z <span class="hl sym">:=</span> p <span class="hl sym">*</span> z<span class="hl sym">;</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>

  <span class="hl kwa">procedure</span> Consume<span class="hl sym">;</span>
  <span class="hl kwa">begin</span>
    <span class="hl kwd">inc</span><span class="hl sym">(</span>k<span class="hl sym">);</span>
    x<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">] :=</span> k<span class="hl sym">;</span>
    x<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">] :=</span> <span class="hl num">4</span><span class="hl sym">*</span>k<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">;</span>
    x<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">] :=</span> <span class="hl num">2</span><span class="hl sym">*</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">;</span>
    z<span class="hl sym">:=</span> z <span class="hl sym">*</span> x<span class="hl sym">;</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">begin</span>
  z <span class="hl sym">:=</span> <span class="hl kwd">InitBigMatrix</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">);</span>
  p <span class="hl sym">:=</span> <span class="hl kwd">InitIntMatrix</span><span class="hl sym">(</span><span class="hl num">10</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">);</span>
  x<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">] :=</span> <span class="hl num">0</span><span class="hl sym">;</span>
  <span class="hl kwa">while</span> <span class="hl sym">(</span>n<span class="hl sym">&lt;</span>NumDigits<span class="hl sym">)</span> <span class="hl kwa">do begin</span>
    Digit <span class="hl sym">:=</span> GetDigit<span class="hl sym">;</span>
    <span class="hl kwa">while not</span> IsSafe <span class="hl kwa">do begin</span>
      Consume<span class="hl sym">;</span>
      Digit<span class="hl sym">:=</span> GetDigit<span class="hl sym">;</span>
    <span class="hl kwa">end</span><span class="hl sym">;</span>
    Produce<span class="hl sym">;</span>
    <span class="hl kwd">write</span><span class="hl sym">(</span>Digit<span class="hl sym">);</span>
    <span class="hl kwd">inc</span><span class="hl sym">(</span>n<span class="hl sym">);</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>n <span class="hl kwa">mod</span> <span class="hl num">10</span><span class="hl sym">)=</span><span class="hl num">0</span> <span class="hl kwa">then</span>
      <span class="hl kwd">writeln</span><span class="hl sym">(</span><span class="hl esc">#9</span><span class="hl str">':'</span><span class="hl sym">,</span> n<span class="hl sym">);</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>
  <span class="hl kwd">FreeBigIntMatrix</span><span class="hl sym">(</span>z<span class="hl sym">);</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">var</span>
  n<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">;</span>
  errorcode<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">;</span>

<span class="hl kwa">begin</span>
  Init<span class="hl sym">;</span>
  <span class="hl kwa">if</span> <span class="hl sym">(</span>ParamCount<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">then begin</span>
    <span class="hl kwd">val</span><span class="hl sym">(</span><span class="hl kwd">ParamStr</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">),</span> n<span class="hl sym">,</span> errorcode<span class="hl sym">);</span>
    <span class="hl kwd">PrintPiDigits</span><span class="hl sym">(</span>n<span class="hl sym">);</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>
  Finalize<span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">.</span>

