<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://shootout.alioth.debian.org/</span>
<span class="hl slc">#</span>
<span class="hl slc"># contributed by Rick Branson</span>

<span class="hl kwa">require</span> <span class="hl str">&quot;thread&quot;</span>

<span class="hl kwa">def</span> <span class="hl kwd">eval_a</span><span class="hl sym">(</span>i<span class="hl sym">,</span> j<span class="hl sym">)</span>
  <span class="hl num">1.0</span><span class="hl kwc">/((i+j)*(i+j+1.0)/</span><span class="hl num">2.0</span><span class="hl sym">+</span>i<span class="hl sym">+</span><span class="hl num">1.0</span><span class="hl sym">)</span>
<span class="hl kwa">end</span>

<span class="hl kwa">class</span> Barrier
  <span class="hl kwa">def</span> <span class="hl kwd">initialize</span><span class="hl sym">(</span>count<span class="hl sym">)</span>
    <span class="hl kwb">&#64;mutex</span> <span class="hl sym">=</span> Mutex<span class="hl sym">.</span>new
    <span class="hl kwb">&#64;count</span> <span class="hl sym">=</span> count
    reset_generation
  <span class="hl kwa">end</span>

  <span class="hl kwa">def</span> reset_generation
    <span class="hl kwb">&#64;generation</span> <span class="hl sym">= { :</span>waiting <span class="hl sym">=&gt;</span> <span class="hl num">0</span> <span class="hl sym">}</span>
  <span class="hl kwa">end</span>

  <span class="hl kwa">def</span> wait
    generation <span class="hl sym">=</span> <span class="hl kwa">nil</span>

    <span class="hl kwb">&#64;mutex</span><span class="hl sym">.</span>synchronize <span class="hl kwa">do</span>
      generation <span class="hl sym">=</span> <span class="hl kwb">&#64;generation</span>
    <span class="hl kwa">end</span>

    <span class="hl kwb">&#64;mutex</span><span class="hl sym">.</span>synchronize <span class="hl kwa">do</span>
      generation<span class="hl sym">[:</span>waiting<span class="hl sym">] +=</span> <span class="hl num">1</span>

      <span class="hl kwa">if</span> generation<span class="hl sym">[:</span>waiting<span class="hl sym">] ==</span> <span class="hl kwb">&#64;count</span>
        reset_generation
      <span class="hl kwa">end</span>
    <span class="hl kwa">end</span>

    <span class="hl kwa">loop do</span>
      <span class="hl kwb">&#64;mutex</span><span class="hl sym">.</span>synchronize <span class="hl kwa">do</span>
        <span class="hl kwa">if</span> generation<span class="hl sym">[:</span>waiting<span class="hl sym">] ==</span> <span class="hl kwb">&#64;count</span>
          <span class="hl kwa">return</span>
        <span class="hl kwa">end</span>
      <span class="hl kwa">end</span>

      Thread<span class="hl sym">.</span>pass
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

<span class="hl kwa">class</span> SpectralNorm
  <span class="hl kwa">class</span> Worker
    <span class="hl kwa">def</span> <span class="hl kwd">initialize</span><span class="hl sym">(</span>sn<span class="hl sym">,</span> range<span class="hl sym">)</span>
      <span class="hl kwb">&#64;u</span><span class="hl sym">,</span> <span class="hl kwb">&#64;v</span><span class="hl sym">,</span> <span class="hl kwb">&#64;mtx</span><span class="hl sym">,</span> <span class="hl kwb">&#64;tmp</span><span class="hl sym">,</span> <span class="hl kwb">&#64;range</span> <span class="hl sym">=</span> sn<span class="hl sym">.</span>u<span class="hl sym">,</span> sn<span class="hl sym">.</span>v<span class="hl sym">,</span> sn<span class="hl sym">.</span>mtx<span class="hl sym">,</span> sn<span class="hl sym">.</span>tmp<span class="hl sym">,</span> range

      <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">.</span><span class="hl num">.10</span><span class="hl sym">)</span>
        <span class="hl kwd">multiply_at_av</span><span class="hl sym">(</span><span class="hl kwb">&#64;u</span><span class="hl sym">,</span> <span class="hl kwb">&#64;tmp</span><span class="hl sym">,</span> <span class="hl kwb">&#64;v</span><span class="hl sym">)</span>
        <span class="hl kwd">multiply_at_av</span><span class="hl sym">(</span><span class="hl kwb">&#64;v</span><span class="hl sym">,</span> <span class="hl kwb">&#64;tmp</span><span class="hl sym">,</span> <span class="hl kwb">&#64;u</span><span class="hl sym">)</span>
      <span class="hl kwa">end</span>

      <span class="hl kwb">&#64;vBv</span> <span class="hl sym">=</span> <span class="hl num">0</span>
      <span class="hl kwb">&#64;vv</span>  <span class="hl sym">=</span> <span class="hl num">0</span>

      <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">&#64;range</span>
        <span class="hl kwb">&#64;vBv</span> <span class="hl sym">+=</span> <span class="hl kwb">&#64;u</span><span class="hl sym">[</span>i<span class="hl sym">] *</span> <span class="hl kwb">&#64;v</span><span class="hl sym">[</span>i<span class="hl sym">]</span>
        <span class="hl kwb">&#64;vv</span>  <span class="hl sym">+=</span> <span class="hl kwb">&#64;v</span><span class="hl sym">[</span>i<span class="hl sym">] *</span> <span class="hl kwb">&#64;v</span><span class="hl sym">[</span>i<span class="hl sym">]</span>
      <span class="hl kwa">end</span>
    <span class="hl kwa">end</span>

    <span class="hl kwa">def</span> values
      <span class="hl sym">[</span> <span class="hl kwb">&#64;vBv</span><span class="hl sym">,</span> <span class="hl kwb">&#64;vv</span> <span class="hl sym">]</span>
    <span class="hl kwa">end</span>

    private

    <span class="hl kwa">def</span> <span class="hl kwd">multiply_atv</span><span class="hl sym">(</span>v<span class="hl sym">,</span> atv<span class="hl sym">)</span>
      <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">&#64;range</span>
        sum <span class="hl sym">=</span> <span class="hl num">0.0</span>

        <span class="hl kwa">for</span> j <span class="hl kwa">in</span> <span class="hl sym">(</span><span class="hl num">0</span> <span class="hl sym">.. (</span>v<span class="hl sym">.</span>size <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">))</span>
          sum <span class="hl sym">+=</span> <span class="hl kwd">eval_a</span><span class="hl sym">(</span>j<span class="hl sym">,</span> i<span class="hl sym">) *</span> v<span class="hl sym">[</span>j<span class="hl sym">]</span>
        <span class="hl kwa">end</span>

        atv<span class="hl sym">[</span>i<span class="hl sym">] =</span> sum
      <span class="hl kwa">end</span>
    <span class="hl kwa">end</span>

    <span class="hl kwa">def</span> <span class="hl kwd">multiply_av</span><span class="hl sym">(</span>v<span class="hl sym">,</span> av<span class="hl sym">)</span>
      <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">&#64;range</span>
        sum <span class="hl sym">=</span> <span class="hl num">0.0</span>

        <span class="hl kwa">for</span> j <span class="hl kwa">in</span> <span class="hl sym">(</span><span class="hl num">0</span> <span class="hl sym">.. (</span>v<span class="hl sym">.</span>size <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">))</span>
          sum <span class="hl sym">+=</span> <span class="hl kwd">eval_a</span><span class="hl sym">(</span>i<span class="hl sym">,</span> j<span class="hl sym">) *</span> v<span class="hl sym">[</span>j<span class="hl sym">]</span>
        <span class="hl kwa">end</span>

        av<span class="hl sym">[</span>i<span class="hl sym">] =</span> sum
      <span class="hl kwa">end</span>
    <span class="hl kwa">end</span>

    <span class="hl kwa">def</span> <span class="hl kwd">multiply_at_av</span><span class="hl sym">(</span>v<span class="hl sym">,</span> tmp<span class="hl sym">,</span> at_av<span class="hl sym">)</span>
      <span class="hl kwd">multiply_av</span><span class="hl sym">(</span>v<span class="hl sym">,</span> tmp<span class="hl sym">)</span>
      <span class="hl kwb">&#64;mtx</span><span class="hl sym">.</span>wait
      <span class="hl kwd">multiply_atv</span><span class="hl sym">(</span>tmp<span class="hl sym">,</span> at_av<span class="hl sym">)</span>
      <span class="hl kwb">&#64;mtx</span><span class="hl sym">.</span>wait
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>

  attr_reader <span class="hl sym">:</span>u
  attr_reader <span class="hl sym">:</span>v
  attr_reader <span class="hl sym">:</span>tmp
  attr_reader <span class="hl sym">:</span>mtx

  <span class="hl kwa">def</span> <span class="hl kwd">initialize</span><span class="hl sym">(</span>n<span class="hl sym">,</span> threads <span class="hl sym">=</span> <span class="hl num">4</span><span class="hl sym">)</span>
    <span class="hl kwb">&#64;n</span>        <span class="hl sym">=</span> n
    <span class="hl kwb">&#64;u</span>        <span class="hl sym">= [</span><span class="hl num">1.0</span><span class="hl sym">] *</span> n
    <span class="hl kwb">&#64;v</span>        <span class="hl sym">=</span> Array<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">(</span>n<span class="hl sym">)</span>
    <span class="hl kwb">&#64;tmp</span>      <span class="hl sym">=</span> Array<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">(</span>n<span class="hl sym">)</span>
    <span class="hl kwb">&#64;threads</span>  <span class="hl sym">=</span> threads
    <span class="hl kwb">&#64;mtx</span>      <span class="hl sym">=</span> Barrier<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">(</span>threads<span class="hl sym">)</span>
  <span class="hl kwa">end</span>

  <span class="hl kwa">def</span> run
    vBv <span class="hl sym">=</span> <span class="hl num">0</span>
    vv  <span class="hl sym">=</span> <span class="hl num">0</span>
    ths <span class="hl sym">= []</span>
    chk <span class="hl sym">=</span> <span class="hl kwb">&#64;n</span> <span class="hl sym">/</span> <span class="hl kwb">&#64;threads</span>

    <span class="hl kwb">&#64;threads</span><span class="hl sym">.</span>times <span class="hl kwa">do</span> <span class="hl sym">|</span>i<span class="hl sym">|</span>
      r <span class="hl sym">= ((</span>i <span class="hl sym">*</span> chk<span class="hl sym">) .. ((</span>i <span class="hl sym">&lt; (</span><span class="hl kwb">&#64;threads</span> <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">) ? (</span>i <span class="hl sym">*</span> chk<span class="hl sym">) +</span> chk <span class="hl sym">:</span> <span class="hl kwb">&#64;n</span><span class="hl sym">) -</span> <span class="hl num">1</span><span class="hl sym">))</span>

      ths <span class="hl sym">&lt;&lt;</span> Thread<span class="hl sym">.</span>new <span class="hl kwa">do</span>
        Thread<span class="hl sym">.</span>current<span class="hl sym">[:</span>worker<span class="hl sym">] =</span> Worker<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">(</span><span class="hl kwa">self</span><span class="hl sym">,</span> r<span class="hl sym">)</span>
      <span class="hl kwa">end</span>
    <span class="hl kwa">end</span>

    ths<span class="hl sym">.</span>each <span class="hl kwa">do</span> <span class="hl sym">|</span>t<span class="hl sym">|</span>
      t<span class="hl sym">.</span>join
      t_vBv<span class="hl sym">,</span> t_vv <span class="hl sym">=</span> t<span class="hl sym">[:</span>worker<span class="hl sym">].</span>values
      vBv <span class="hl sym">+=</span> t_vBv
      vv  <span class="hl sym">+=</span> t_vv
    <span class="hl kwa">end</span>

    Math<span class="hl sym">.</span><span class="hl kwd">sqrt</span><span class="hl sym">(</span>vBv <span class="hl sym">/</span> vv<span class="hl sym">)</span>
  <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

print <span class="hl str">&quot;%0.9f&quot;</span> <span class="hl sym">%</span> SpectralNorm<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">(</span><span class="hl kwc">ARGV</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">].</span>to_i<span class="hl sym">).</span>run<span class="hl sym">,</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
