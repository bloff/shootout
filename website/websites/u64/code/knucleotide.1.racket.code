#lang racket<span class="hl sym">/</span>base

<span class="hl slc">;;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;; http://shootout.alioth.debian.org/</span>

<span class="hl slc">;;; contributed by Matthew Flatt</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>all<span class="hl sym">-</span>counts len dna<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">([</span>table <span class="hl sym">(</span>make<span class="hl sym">-</span>hasheq<span class="hl sym">)]</span>
        <span class="hl sym">[</span>seq <span class="hl sym">(</span>make<span class="hl sym">-</span>string len<span class="hl sym">)])</span>
    <span class="hl sym">(</span>for <span class="hl sym">([</span>s <span class="hl sym">(</span>in<span class="hl sym">-</span>range <span class="hl sym">(- (</span>string<span class="hl sym">-</span>length dna<span class="hl sym">)</span> len<span class="hl sym">) -</span><span class="hl num">1</span> <span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)])</span>
      <span class="hl sym">(</span>string<span class="hl sym">-</span>copy<span class="hl sym">!</span> seq <span class="hl num">0</span> dna s <span class="hl sym">(+</span> s len<span class="hl sym">))</span>
      <span class="hl sym">(</span>let <span class="hl sym">([</span>key <span class="hl sym">(</span>string<span class="hl sym">-&gt;</span>symbol seq<span class="hl sym">)])</span>
        <span class="hl sym">(</span>let <span class="hl sym">([</span>cnt <span class="hl sym">(</span>hash<span class="hl sym">-</span>ref table key <span class="hl num">0</span><span class="hl sym">)])</span>
          <span class="hl sym">(</span>hash<span class="hl sym">-</span>set<span class="hl sym">!</span> table key <span class="hl sym">(</span>add1 cnt<span class="hl sym">)))))</span>
    table<span class="hl sym">))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>write<span class="hl sym">-</span>freqs table<span class="hl sym">)</span>
  <span class="hl sym">(</span>let<span class="hl sym">* ([</span>content <span class="hl sym">(</span>hash<span class="hl sym">-</span>map table cons<span class="hl sym">)]</span>
         <span class="hl sym">[</span>total <span class="hl sym">(</span>exact<span class="hl sym">-&gt;</span>inexact <span class="hl sym">(</span>apply <span class="hl sym">+ (</span>map cdr content<span class="hl sym">)))])</span>
    <span class="hl sym">(</span>for <span class="hl sym">([</span>a <span class="hl sym">(</span>sort content <span class="hl sym">&gt;</span> #<span class="hl sym">:</span>key cdr<span class="hl sym">)])</span>
      <span class="hl sym">(</span>printf <span class="hl str">&quot;~a ~a</span><span class="hl esc">\</span><span class="hl str">n&quot;</span>
              <span class="hl sym">(</span>car a<span class="hl sym">)</span>
              <span class="hl sym">(</span>real<span class="hl sym">-&gt;</span>decimal<span class="hl sym">-</span>string <span class="hl sym">(*</span> <span class="hl num">100</span> <span class="hl sym">(/ (</span>cdr a<span class="hl sym">)</span> total<span class="hl sym">))</span> <span class="hl num">3</span><span class="hl sym">)))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>write<span class="hl sym">-</span>one<span class="hl sym">-</span>freq table key<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">([</span>cnt <span class="hl sym">(</span>hash<span class="hl sym">-</span>ref table key <span class="hl num">0</span><span class="hl sym">)])</span>
    <span class="hl sym">(</span>printf <span class="hl str">&quot;~a</span><span class="hl esc">\</span><span class="hl str">t~a</span><span class="hl esc">\</span><span class="hl str">n&quot;</span> cnt key<span class="hl sym">)))</span>

<span class="hl sym">(</span>define dna
  <span class="hl sym">(</span>let <span class="hl sym">([</span>in <span class="hl sym">(</span>current<span class="hl sym">-</span>input<span class="hl sym">-</span>port<span class="hl sym">)])</span>
    <span class="hl slc">;; Skip to &quot;&gt;THREE ...&quot;</span>
    <span class="hl sym">(</span>regexp<span class="hl sym">-</span>match #rx#<span class="hl str">&quot;(?m:^&gt;THREE.*$)&quot;</span> in<span class="hl sym">)</span>
    <span class="hl sym">(</span>let <span class="hl sym">([</span>s <span class="hl sym">(</span>open<span class="hl sym">-</span>output<span class="hl sym">-</span>string<span class="hl sym">)])</span>
      <span class="hl slc">;; Copy everything but newlines to s:</span>
      <span class="hl sym">(</span>for <span class="hl sym">([</span>l <span class="hl sym">(</span>in<span class="hl sym">-</span>bytes<span class="hl sym">-</span>lines in<span class="hl sym">)])</span>
        <span class="hl sym">(</span>write<span class="hl sym">-</span>bytes l s<span class="hl sym">))</span>
      <span class="hl slc">;; Extract the string from s:</span>
      <span class="hl sym">(</span>string<span class="hl sym">-</span>upcase <span class="hl sym">(</span>get<span class="hl sym">-</span>output<span class="hl sym">-</span>string s<span class="hl sym">)))))</span>

<span class="hl slc">;; 1-nucleotide counts:</span>
<span class="hl sym">(</span>write<span class="hl sym">-</span>freqs <span class="hl sym">(</span>all<span class="hl sym">-</span>counts <span class="hl num">1</span> dna<span class="hl sym">))</span>
<span class="hl sym">(</span>newline<span class="hl sym">)</span>

<span class="hl slc">;; 2-nucleotide counts:</span>
<span class="hl sym">(</span>write<span class="hl sym">-</span>freqs <span class="hl sym">(</span>all<span class="hl sym">-</span>counts <span class="hl num">2</span> dna<span class="hl sym">))</span>
<span class="hl sym">(</span>newline<span class="hl sym">)</span>

<span class="hl slc">;; Specific sequences:</span>
<span class="hl sym">(</span>for <span class="hl sym">([</span>seq <span class="hl sym">'(</span><span class="hl str">&quot;GGT&quot;</span> <span class="hl str">&quot;GGTA&quot;</span> <span class="hl str">&quot;GGTATT&quot;</span> <span class="hl str">&quot;GGTATTTTAATT&quot;</span> <span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl sym">)])</span>
  <span class="hl sym">(</span>write<span class="hl sym">-</span>one<span class="hl sym">-</span>freq <span class="hl sym">(</span>all<span class="hl sym">-</span>counts <span class="hl sym">(</span>string<span class="hl sym">-</span>length seq<span class="hl sym">)</span> dna<span class="hl sym">)</span>
                  <span class="hl sym">(</span>string<span class="hl sym">-&gt;</span>symbol seq<span class="hl sym">)))</span>
