<span class="hl com">(*</span>
<span class="hl com">** The Computer Language Benchmarks Game</span>
<span class="hl com">** http://shootout.alioth.debian.org/</span>
<span class="hl com">**</span>
<span class="hl com">** contributed by Hongwei Xi</span>
<span class="hl com">**</span>
<span class="hl com">** compilation command:</span>
<span class="hl com">**   atscc -O3 binary-trees2.dats -o binary-trees2 -D_ATS_GCATS</span>
<span class="hl com">*)</span>

<span class="hl com">(* ****** ****** *)</span>

staload _<span class="hl com">(*anonymous*)</span> <span class="hl sym">=</span> <span class="hl str">&quot;prelude/DATS/reference.dats&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">dataviewtype</span> tree <span class="hl sym">(</span>int<span class="hl sym">) =</span>
  Nil<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">) | {</span>n1<span class="hl sym">,</span>n2<span class="hl sym">:</span>two<span class="hl sym">}</span> Node<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">of</span> <span class="hl sym">(</span>tree n1<span class="hl sym">,</span> int<span class="hl sym">,</span> tree n2<span class="hl sym">)</span>
<span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>tree<span class="hl sym">]</span>

<span class="hl kwa">viewtypedef</span> Tree <span class="hl sym">= [</span>n<span class="hl sym">:</span>two<span class="hl sym">]</span> tree n

<span class="hl kwa">fun</span> tree_make <span class="hl sym">(</span>d<span class="hl sym">:</span> int<span class="hl sym">,</span> i<span class="hl sym">:</span> int<span class="hl sym">):</span> Tree <span class="hl sym">=</span>
  <span class="hl kwa">if</span> d <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then let</span>
    <span class="hl kwa">val</span> d1 <span class="hl sym">=</span> d<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl kwa">and</span> i2 <span class="hl sym">=</span> i <span class="hl sym">&lt;&lt;</span> <span class="hl num">1</span> <span class="hl kwa">in</span>
    Node <span class="hl sym">(</span>tree_make <span class="hl sym">(</span>d1<span class="hl sym">,</span> i2 <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">),</span> i<span class="hl sym">,</span> tree_make <span class="hl sym">(</span>d1<span class="hl sym">,</span> i2<span class="hl sym">))</span>
  <span class="hl kwa">end else</span> Node <span class="hl sym">(</span>Nil <span class="hl sym">(),</span> i<span class="hl sym">,</span> Nil <span class="hl sym">())</span>
<span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>tree_make<span class="hl sym">]</span>

<span class="hl kwa">fun</span> check_and_free <span class="hl sym">(</span>t<span class="hl sym">:</span> Tree<span class="hl sym">):&lt;!</span>ntm<span class="hl sym">&gt;</span> int <span class="hl sym">=</span>  <span class="hl kwa">case</span><span class="hl sym">+</span> t <span class="hl kwa">of</span>
  <span class="hl sym">|</span> ~Node <span class="hl sym">(</span>tl<span class="hl sym">,</span> i<span class="hl sym">,</span> tr<span class="hl sym">) =&gt;</span> i <span class="hl sym">+</span> check_and_free tl <span class="hl sym">-</span> check_and_free tr
  <span class="hl sym">|</span> ~Nil <span class="hl sym">() =&gt;</span> <span class="hl num">0</span>
<span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>check_and_free<span class="hl sym">]</span>

<span class="hl kwa">fun</span> check <span class="hl sym">(</span>t<span class="hl sym">: !</span>Tree<span class="hl sym">):&lt;!</span>ntm<span class="hl sym">&gt;</span> int <span class="hl sym">=</span> <span class="hl kwa">case</span><span class="hl sym">+</span> t <span class="hl kwa">of</span>
  <span class="hl sym">|</span> Node <span class="hl sym">(!</span>tl<span class="hl sym">,</span> i<span class="hl sym">, !</span>tr<span class="hl sym">) =&gt;</span> <span class="hl kwa">let</span>
      <span class="hl kwa">val</span> ans <span class="hl sym">=</span> i <span class="hl sym">+</span> check <span class="hl sym">(!</span>tl<span class="hl sym">) -</span> check <span class="hl sym">(!</span>tr<span class="hl sym">)</span> <span class="hl kwa">in</span> <span class="hl sym">(</span>fold&#64; t<span class="hl sym">;</span> ans<span class="hl sym">)</span>
    <span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>Node<span class="hl sym">]</span>
  <span class="hl sym">|</span> Nil <span class="hl sym">() =&gt; (</span>fold&#64; t<span class="hl sym">;</span> <span class="hl num">0</span><span class="hl sym">)</span>
<span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>check<span class="hl sym">]</span>

<span class="hl kwa">fun</span> check_ref <span class="hl sym">(</span>r<span class="hl sym">:</span> ref Tree<span class="hl sym">):</span> int <span class="hl sym">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> <span class="hl sym">(</span>vbox pf <span class="hl sym">|</span> p<span class="hl sym">) =</span> ref_get_view_ptr r <span class="hl kwa">in</span> check <span class="hl sym">!</span>p
<span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>check_ref<span class="hl sym">]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl dir">#define MIN_DEPTH 4</span>

<span class="hl kwa">fn</span> stretch <span class="hl sym">(</span>max_depth<span class="hl sym">:</span> Nat<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl kwa">let</span>
   <span class="hl kwa">val</span> stretch_depth <span class="hl sym">=</span> max_depth <span class="hl sym">+</span> <span class="hl num">1</span>
   <span class="hl kwa">val</span> t <span class="hl sym">=</span> tree_make <span class="hl sym">(</span>stretch_depth<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">)</span>
   <span class="hl kwa">val</span> c <span class="hl sym">=</span> check_and_free <span class="hl sym">(</span>t<span class="hl sym">)</span>
<span class="hl kwa">in</span>
   printf <span class="hl sym">(</span><span class="hl str">&quot;stretch tree of depth %i</span><span class="hl esc">\t</span> <span class="hl str">check: %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> &#64;<span class="hl sym">(</span>stretch_depth<span class="hl sym">,</span> c<span class="hl sym">));</span>
<span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>stretch<span class="hl sym">]</span>

<span class="hl kwa">fn</span> long_lived_tree_make
  <span class="hl sym">(</span>max_depth<span class="hl sym">:</span> Nat<span class="hl sym">):</span> ref Tree <span class="hl sym">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> t <span class="hl sym">=</span> tree_make <span class="hl sym">(</span>max_depth<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">);</span> <span class="hl kwa">val</span> t_r <span class="hl sym">=</span> ref<span class="hl sym">&lt;</span>Tree<span class="hl sym">&gt; (</span>t<span class="hl sym">)</span>
<span class="hl kwa">in</span>
  t_r
<span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>long_lived_tree_make<span class="hl sym">]</span>

<span class="hl kwa">fun</span> loop_depths <span class="hl sym">(</span>d<span class="hl sym">:</span> Nat<span class="hl sym">,</span> max_depth<span class="hl sym">:</span> Nat<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl kwa">begin</span>
  <span class="hl kwa">if</span> d <span class="hl sym">&lt;=</span> max_depth <span class="hl kwa">then let</span>
    <span class="hl kwa">val</span> n <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>max_depth <span class="hl sym">-</span> d <span class="hl sym">+</span> MIN_DEPTH<span class="hl sym">)</span>
    <span class="hl kwa">fun</span> loop <span class="hl sym">(</span>i<span class="hl sym">:</span> Nat<span class="hl sym">,</span> c<span class="hl sym">:</span> int<span class="hl sym">):&lt;</span>cloref1<span class="hl sym">&gt;</span> int <span class="hl sym">=</span>
      <span class="hl kwa">if</span> i <span class="hl sym">&lt;</span> n <span class="hl kwa">then let</span>
        <span class="hl kwa">val</span> t <span class="hl sym">=</span> tree_make<span class="hl sym">(</span>d<span class="hl sym">,</span>  i<span class="hl sym">);</span> <span class="hl kwa">val</span> c1 <span class="hl sym">=</span> check_and_free t
        <span class="hl kwa">val</span> t <span class="hl sym">=</span> tree_make<span class="hl sym">(</span>d<span class="hl sym">,</span> ~i<span class="hl sym">);</span> <span class="hl kwa">val</span> c2 <span class="hl sym">=</span> check_and_free t
      <span class="hl kwa">in</span>
        loop <span class="hl sym">(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> c <span class="hl sym">+</span> c1 <span class="hl sym">+</span> c2<span class="hl sym">)</span>
      <span class="hl kwa">end else</span> c
    <span class="hl kwa">val</span> c <span class="hl sym">=</span> loop <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">)</span>
  <span class="hl kwa">in</span>
    printf <span class="hl sym">(</span><span class="hl str">&quot;%i</span><span class="hl esc">\t</span> <span class="hl str">trees of depth %i</span><span class="hl esc">\t</span> <span class="hl str">check: %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> &#64;<span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> n<span class="hl sym">,</span> d<span class="hl sym">,</span> c<span class="hl sym">));</span>
    loop_depths <span class="hl sym">(</span>d <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">,</span> max_depth<span class="hl sym">)</span>
  <span class="hl kwa">end</span>
<span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>loop_depths<span class="hl sym">]</span>

<span class="hl kwa">implement</span> main <span class="hl sym">(</span>argc<span class="hl sym">,</span> argv<span class="hl sym">) =</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> assert_errmsg
    <span class="hl sym">(</span>argc <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">,</span> <span class="hl str">&quot;Exit: wrong command format!</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span>
  <span class="hl kwa">val</span> n <span class="hl sym">=</span> int1_of argv<span class="hl sym">.[</span><span class="hl num">1</span><span class="hl sym">]</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> assert_errmsg
    <span class="hl sym">(</span>n <span class="hl sym">&gt;=</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl str">&quot;The input integer needs to be a natural number.</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span>
  <span class="hl sym">//</span> this simply means that no garbage collection can be triggered
  <span class="hl sym">//</span> <span class="hl kwa">and</span> memory allocation <span class="hl kwa">and</span> deallocation must be handled manually
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> gc_chunk_count_limit_max_set <span class="hl sym">(</span>~<span class="hl num">1</span><span class="hl sym">) //</span> infinite
  <span class="hl kwa">val</span> max_depth <span class="hl sym">=</span> max <span class="hl sym">(</span>MIN_DEPTH <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">,</span> n<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> stretch <span class="hl sym">(</span>max_depth<span class="hl sym">)</span>
  <span class="hl kwa">val</span> long_lived_tree <span class="hl sym">=</span> long_lived_tree_make <span class="hl sym">(</span>max_depth<span class="hl sym">)</span>
<span class="hl kwa">in</span>
  loop_depths <span class="hl sym">(</span>MIN_DEPTH<span class="hl sym">,</span> max_depth<span class="hl sym">);</span>
  printf <span class="hl sym">(</span><span class="hl str">&quot;long lived tree of depth %i</span><span class="hl esc">\t</span> <span class="hl str">check: %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> &#64;<span class="hl sym">(</span>max_depth<span class="hl sym">,</span> check_ref long_lived_tree<span class="hl sym">))</span>
<span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>main<span class="hl sym">]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl com">(* end of [binary-tree2.dats] *)</span>
