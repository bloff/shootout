<span class="hl com">(* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Contributed by Sebastien Loisel</span>
<span class="hl com"> * Cleanup by Troestler Christophe</span>
<span class="hl com"> * Parallelized by Mauricio Fernandez</span>
<span class="hl com"> *)</span>

<span class="hl kwa">open</span> <span class="hl kwd">Bigarray</span>
<span class="hl kwa">type</span> v <span class="hl sym">= (</span><span class="hl kwb">float</span><span class="hl sym">,</span> float64_elt<span class="hl sym">,</span> c_layout<span class="hl sym">)</span> <span class="hl kwc">Array1</span><span class="hl sym">.</span>t

<span class="hl kwa">let</span> max_workers <span class="hl sym">=</span> <span class="hl num">32</span>

<span class="hl kwa">let</span> map_chunks f low hi <span class="hl sym">=</span>
  <span class="hl kwa">let</span> step <span class="hl sym">= (</span>hi <span class="hl sym">-</span> low<span class="hl sym">) /</span> max_workers <span class="hl kwa">in</span>
  <span class="hl kwa">let rec</span> loop acc n <span class="hl sym">=</span>
    <span class="hl kwa">if</span> n <span class="hl sym">&lt;</span> hi <span class="hl kwa">then</span>
      <span class="hl kwa">let</span> n' <span class="hl sym">=</span> n <span class="hl sym">+</span> step <span class="hl kwa">in</span> loop <span class="hl sym">(</span>f <span class="hl sym">(</span>n<span class="hl sym">, (</span>min hi n'<span class="hl sym">)) ::</span> acc<span class="hl sym">)</span> n'
    <span class="hl kwa">else</span> acc
  <span class="hl kwa">in</span> loop <span class="hl sym">[]</span> low

<span class="hl kwa">let</span> wait_for <span class="hl sym">=</span> <span class="hl kwc">List</span><span class="hl sym">.</span>iter <span class="hl sym">(</span><span class="hl kwa">fun</span> f <span class="hl sym">-&gt;</span> f<span class="hl sym">())</span>

<span class="hl com">(* original function due to Jon D. Harrop *)</span>
<span class="hl kwa">let</span> invoke <span class="hl sym">(</span>f <span class="hl sym">:</span> <span class="hl kwb">'a</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">'b</span><span class="hl sym">)</span> x <span class="hl sym">:</span> <span class="hl kwb">unit</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">'b</span> <span class="hl sym">=</span>
  <span class="hl kwa">let</span> input<span class="hl sym">,</span> output <span class="hl sym">=</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>pipe<span class="hl sym">()</span> <span class="hl kwa">in</span>
  <span class="hl kwa">match</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>fork<span class="hl sym">()</span> <span class="hl kwa">with</span>
  <span class="hl sym">| -</span><span class="hl num">1</span> <span class="hl sym">-&gt;</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>close input<span class="hl sym">;</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>close output<span class="hl sym">; (</span><span class="hl kwa">let</span> v <span class="hl sym">=</span> f x <span class="hl kwa">in fun</span> <span class="hl sym">() -&gt;</span> v<span class="hl sym">)</span>
  <span class="hl sym">|</span> <span class="hl num">0</span> <span class="hl sym">-&gt;</span>
      <span class="hl kwc">Unix</span><span class="hl sym">.</span>close input<span class="hl sym">;</span>
      <span class="hl kwa">let</span> output <span class="hl sym">=</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>out_channel_of_descr output <span class="hl kwa">in</span>
        <span class="hl kwc">Marshal</span><span class="hl sym">.</span>to_channel output <span class="hl sym">(</span><span class="hl kwa">try</span> `<span class="hl kwd">Res</span><span class="hl sym">(</span>f x<span class="hl sym">)</span> <span class="hl kwa">with</span> e <span class="hl sym">-&gt;</span> `<span class="hl kwd">Exn</span> e<span class="hl sym">) [];</span>
        close_out output<span class="hl sym">;</span>
        exit <span class="hl num">0</span>
  <span class="hl sym">|</span> pid <span class="hl sym">-&gt;</span>
      <span class="hl kwc">Unix</span><span class="hl sym">.</span>close output<span class="hl sym">;</span>
      <span class="hl kwa">let</span> input <span class="hl sym">=</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>in_channel_of_descr input <span class="hl kwa">in fun</span> <span class="hl sym">() -&gt;</span>
        <span class="hl kwa">let</span> v <span class="hl sym">=</span> <span class="hl kwc">Marshal</span><span class="hl sym">.</span>from_channel input <span class="hl kwa">in</span>
        ignore <span class="hl sym">(</span><span class="hl kwc">Unix</span><span class="hl sym">.</span>waitpid <span class="hl sym">[]</span> pid<span class="hl sym">);</span>
        close_in input<span class="hl sym">;</span>
        <span class="hl kwa">match</span> v <span class="hl kwa">with</span> `<span class="hl kwd">Res</span> x <span class="hl sym">-&gt;</span> x <span class="hl sym">|</span> `<span class="hl kwd">Exn</span> e <span class="hl sym">-&gt;</span> raise e

<span class="hl kwa">let</span> eval_A i j <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">. /.</span> <span class="hl kwb">float</span><span class="hl sym">((</span>i<span class="hl sym">+</span>j<span class="hl sym">)*(</span>i<span class="hl sym">+</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)/</span><span class="hl num">2</span><span class="hl sym">+</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>

<span class="hl kwa">let</span> eval_A_times_u <span class="hl sym">(</span>u <span class="hl sym">:</span> v<span class="hl sym">) (</span>v <span class="hl sym">:</span> v<span class="hl sym">) =</span>
  <span class="hl kwa">let</span> n <span class="hl sym">=</span> <span class="hl kwc">Array1</span><span class="hl sym">.</span>dim v <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> compute <span class="hl sym">(</span>p<span class="hl sym">,</span> q<span class="hl sym">) =</span>
    <span class="hl kwa">for</span> i <span class="hl sym">=</span> p <span class="hl kwa">to</span> q <span class="hl kwa">do</span>
      <span class="hl kwa">let</span> vi <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span><span class="hl sym">.</span> <span class="hl kwa">in</span>
        <span class="hl kwa">for</span> j <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> n <span class="hl kwa">do</span> vi <span class="hl sym">:= !</span>vi <span class="hl sym">+.</span> eval_A i j <span class="hl sym">*.</span> u<span class="hl sym">.{</span>j<span class="hl sym">}</span> <span class="hl kwa">done</span><span class="hl sym">;</span>
        v<span class="hl sym">.{</span>i<span class="hl sym">} &lt;- !</span>vi
    <span class="hl kwa">done</span>
  <span class="hl kwa">in</span> wait_for <span class="hl sym">(</span>map_chunks <span class="hl sym">(</span>invoke compute<span class="hl sym">)</span> <span class="hl num">0</span> n<span class="hl sym">)</span>

<span class="hl kwa">let</span> eval_At_times_u <span class="hl sym">(</span>u <span class="hl sym">:</span> v<span class="hl sym">) (</span>v <span class="hl sym">:</span> v<span class="hl sym">) =</span>
  <span class="hl kwa">let</span> n <span class="hl sym">=</span> <span class="hl kwc">Array1</span><span class="hl sym">.</span>dim v <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> compute <span class="hl sym">(</span>p<span class="hl sym">,</span> q<span class="hl sym">) =</span>
    <span class="hl kwa">for</span> i <span class="hl sym">=</span> p <span class="hl kwa">to</span> q <span class="hl kwa">do</span>
      <span class="hl kwa">let</span> vi <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span><span class="hl sym">.</span> <span class="hl kwa">in</span>
        <span class="hl kwa">for</span> j <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> n <span class="hl kwa">do</span> vi <span class="hl sym">:= !</span>vi <span class="hl sym">+.</span> eval_A j i <span class="hl sym">*.</span> u<span class="hl sym">.{</span>j<span class="hl sym">}</span> <span class="hl kwa">done</span><span class="hl sym">;</span>
        v<span class="hl sym">.{</span>i<span class="hl sym">} &lt;- !</span>vi
    <span class="hl kwa">done</span>
  <span class="hl kwa">in</span> wait_for <span class="hl sym">(</span>map_chunks <span class="hl sym">(</span>invoke compute<span class="hl sym">)</span> <span class="hl num">0</span> n<span class="hl sym">)</span>

<span class="hl kwa">let</span> make_array n x <span class="hl sym">=</span>
  <span class="hl kwa">let</span> v <span class="hl sym">=</span> <span class="hl kwc">Array1</span><span class="hl sym">.</span>map_file
            <span class="hl sym">(</span><span class="hl kwc">Unix</span><span class="hl sym">.</span>openfile <span class="hl str">&quot;/dev/zero&quot;</span> <span class="hl sym">[</span><span class="hl kwc">Unix</span><span class="hl sym">.</span><span class="hl kwd">O_RDWR</span><span class="hl sym">]</span> <span class="hl num">0</span>o755<span class="hl sym">)</span>
            float64 c_layout <span class="hl kwa">true</span> n <span class="hl kwa">in</span>
    <span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> n <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl kwa">do</span> v<span class="hl sym">.{</span>i<span class="hl sym">} &lt;-</span> x <span class="hl kwa">done</span><span class="hl sym">;</span>
    v

<span class="hl kwa">let</span> eval_AtA_times_u u v <span class="hl sym">=</span>
  <span class="hl kwa">let</span> w <span class="hl sym">=</span> make_array <span class="hl sym">(</span><span class="hl kwc">Array1</span><span class="hl sym">.</span>dim u<span class="hl sym">)</span> <span class="hl num">0.0</span> <span class="hl kwa">in</span>
  eval_A_times_u u w<span class="hl sym">;</span> eval_At_times_u w v

<span class="hl kwa">let</span> <span class="hl sym">() =</span>
  <span class="hl kwa">let</span> n <span class="hl sym">=</span> <span class="hl kwa">try</span> int_of_string<span class="hl sym">(</span><span class="hl kwc">Array</span><span class="hl sym">.</span>get <span class="hl kwc">Sys</span><span class="hl sym">.</span>argv <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">with</span> _ <span class="hl sym">-&gt;</span>  <span class="hl num">2000</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> u <span class="hl sym">=</span> make_array n <span class="hl num">1.0</span>  <span class="hl kwa">and</span>  v <span class="hl sym">=</span> make_array n <span class="hl num">0.0</span> <span class="hl kwa">in</span>
  <span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> <span class="hl num">9</span> <span class="hl kwa">do</span>
    eval_AtA_times_u u v<span class="hl sym">;</span> eval_AtA_times_u v u
  <span class="hl kwa">done</span><span class="hl sym">;</span>

  <span class="hl kwa">let</span> vv <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">0.0</span>  <span class="hl kwa">and</span>  vBv <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">0.0</span> <span class="hl kwa">in</span>
  <span class="hl kwa">for</span> i<span class="hl sym">=</span><span class="hl num">0</span> <span class="hl kwa">to</span> n<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl kwa">do</span>
    vv <span class="hl sym">:= !</span>vv <span class="hl sym">+.</span> v<span class="hl sym">.{</span>i<span class="hl sym">} *.</span> v<span class="hl sym">.{</span>i<span class="hl sym">};</span>
    vBv <span class="hl sym">:= !</span>vBv <span class="hl sym">+.</span> u<span class="hl sym">.{</span>i<span class="hl sym">} *.</span> v<span class="hl sym">.{</span>i<span class="hl sym">}</span>
  <span class="hl kwa">done</span><span class="hl sym">;</span>
  <span class="hl kwc">Printf</span><span class="hl sym">.</span>printf <span class="hl str">&quot;%0.9f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl sym">(</span>sqrt<span class="hl sym">(!</span>vBv <span class="hl sym">/. !</span>vv<span class="hl sym">))</span>

