<span class="hl com">/*   The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   Contributed by Eric Willigers</span>
<span class="hl com">   Port of Java implementation by Michael Barker and Luzius Meisser</span>
<span class="hl com">*/</span>

<span class="hl kwa">object</span> Colours <span class="hl kwa">extends</span> <span class="hl kwc">Enumeration</span> <span class="hl sym">{</span>
   <span class="hl kwa">val</span> Blue <span class="hl sym">=</span> Value<span class="hl sym">(</span><span class="hl str">&quot;blue&quot;</span><span class="hl sym">)</span>
   <span class="hl kwa">val</span> Red <span class="hl sym">=</span> Value<span class="hl sym">(</span><span class="hl str">&quot;red&quot;</span><span class="hl sym">)</span>
   <span class="hl kwa">val</span> Yellow <span class="hl sym">=</span> Value<span class="hl sym">(</span><span class="hl str">&quot;yellow&quot;</span><span class="hl sym">)</span>
<span class="hl sym">}</span>

<span class="hl kwa">import</span> Colours<span class="hl sym">.{</span>Blue<span class="hl sym">,</span> Red<span class="hl sym">,</span> Yellow<span class="hl sym">,</span> Value <span class="hl sym">=&gt;</span> Colour<span class="hl sym">}</span>

<span class="hl kwa">final class</span> Creature<span class="hl sym">(</span>place<span class="hl sym">:</span> MeetingPlace<span class="hl sym">,</span> <span class="hl kwa">var</span> colour<span class="hl sym">:</span> Colour<span class="hl sym">)</span> <span class="hl kwa">extends</span> <span class="hl kwc">Runnable</span> <span class="hl sym">{</span>
   <span class="hl kwa">val</span> id <span class="hl sym">=</span> <span class="hl kwc">System</span><span class="hl sym">.</span>identityHashCode<span class="hl sym">(</span><span class="hl kwa">this</span><span class="hl sym">)</span>
   <span class="hl kwa">var</span> sameCount <span class="hl sym">=</span> <span class="hl num">0</span>
   <span class="hl kwa">var</span> count <span class="hl sym">=</span> <span class="hl num">0</span>

   <span class="hl kwa">def</span> run<span class="hl sym">() =</span> <span class="hl kwa">try</span> <span class="hl sym">{</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>true<span class="hl sym">) {</span>
         <span class="hl kwa">val</span> p <span class="hl sym">=</span> place<span class="hl sym">.</span>meet<span class="hl sym">(</span>id<span class="hl sym">,</span> colour<span class="hl sym">)</span>
         colour <span class="hl sym">=</span> p<span class="hl sym">.</span>colour
         <span class="hl kwa">if</span> <span class="hl sym">(</span>p<span class="hl sym">.</span>sameId<span class="hl sym">)</span>
            sameCount <span class="hl sym">+=</span> <span class="hl num">1</span>
         count <span class="hl sym">+=</span><span class="hl num">1</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span> <span class="hl kwa">catch</span> <span class="hl sym">{</span>
      <span class="hl kwa">case</span> _<span class="hl sym">:</span> <span class="hl kwc">Exception</span> <span class="hl sym">=&gt; ()</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">override def</span> toString <span class="hl sym">=</span> <span class="hl kwc">String</span><span class="hl sym">.</span>valueOf<span class="hl sym">(</span>count<span class="hl sym">)+</span><span class="hl str">&quot; &quot;</span><span class="hl sym">+</span>chameneosredux<span class="hl sym">.</span>getNumber<span class="hl sym">(</span>sameCount<span class="hl sym">)</span>
<span class="hl sym">}</span>

<span class="hl kwa">final class</span> MeetingPlace<span class="hl sym">(</span><span class="hl kwa">var</span> meetingsLeft<span class="hl sym">:</span> Int<span class="hl sym">) {</span>
   <span class="hl kwa">var</span> firstColour<span class="hl sym">:</span> <span class="hl kwc">Option</span><span class="hl sym">[</span>Colour<span class="hl sym">] =</span> None
   <span class="hl kwa">var</span> firstId <span class="hl sym">=</span> <span class="hl num">0</span>
   <span class="hl kwa">var</span> current<span class="hl sym">:</span> <span class="hl kwc">Future</span> <span class="hl sym">=</span> _

   <span class="hl kwa">def</span> meet<span class="hl sym">(</span>id<span class="hl sym">:</span> Int<span class="hl sym">,</span> c<span class="hl sym">:</span> Colour<span class="hl sym">) =</span> <span class="hl kwa">synchronized</span> <span class="hl sym">{</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>meetingsLeft <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">) {</span>
         <span class="hl kwa">throw new</span> <span class="hl kwc">Exception</span><span class="hl sym">(</span><span class="hl str">&quot;Finished&quot;</span><span class="hl sym">)</span>
      <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>firstColour<span class="hl sym">.</span>isEmpty<span class="hl sym">) {</span>
            firstColour <span class="hl sym">=</span> Some<span class="hl sym">(</span>c<span class="hl sym">)</span>
            firstId <span class="hl sym">=</span> id
            current <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">Future</span><span class="hl sym">()</span>
         <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
            current<span class="hl sym">.</span>setItem<span class="hl sym">(</span><span class="hl kwa">new</span> Pair<span class="hl sym">(</span>id <span class="hl sym">==</span> firstId<span class="hl sym">,</span> chameneosredux<span class="hl sym">.</span>doCompliment<span class="hl sym">(</span>c<span class="hl sym">,</span> firstColour<span class="hl sym">.</span>get<span class="hl sym">)))</span>
            firstColour <span class="hl sym">=</span> None
            meetingsLeft <span class="hl sym">-=</span> <span class="hl num">1</span>
         <span class="hl sym">}</span>

         current
      <span class="hl sym">}</span>
   <span class="hl sym">}.</span>getItem<span class="hl sym">()</span>
<span class="hl sym">}</span>

<span class="hl kwa">final class</span> <span class="hl kwc">Future</span> <span class="hl sym">{</span>
   &#64;<span class="hl kwa">volatile var</span> p<span class="hl sym">:</span> Pair <span class="hl sym">=</span> _

   <span class="hl kwa">def</span> getItem<span class="hl sym">() = {</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>p <span class="hl sym">==</span> null<span class="hl sym">)</span>
         <span class="hl kwc">Thread</span><span class="hl sym">.</span>`<span class="hl kwa">yield</span>`<span class="hl sym">()</span>   
      p
   <span class="hl sym">}</span>

   <span class="hl kwa">def</span> setItem<span class="hl sym">(</span>_p<span class="hl sym">:</span> Pair<span class="hl sym">) {</span>
      <span class="hl kwa">this</span><span class="hl sym">.</span>p <span class="hl sym">=</span> _p
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwa">final case class</span> Pair<span class="hl sym">(</span>sameId<span class="hl sym">:</span> <span class="hl kwc">Boolean</span><span class="hl sym">,</span> colour<span class="hl sym">:</span> Colour<span class="hl sym">)</span>

<span class="hl kwa">object</span> chameneosredux <span class="hl sym">{</span>
   <span class="hl kwa">def</span> doCompliment<span class="hl sym">(</span>c1<span class="hl sym">:</span> Colour<span class="hl sym">,</span> c2<span class="hl sym">:</span> Colour<span class="hl sym">) = (</span>c1<span class="hl sym">,</span> c2<span class="hl sym">)</span> match <span class="hl sym">{</span>
      <span class="hl kwa">case</span> <span class="hl sym">(</span>Blue<span class="hl sym">,</span> Blue<span class="hl sym">) =&gt;</span> Blue   
      <span class="hl kwa">case</span> <span class="hl sym">(</span>Blue<span class="hl sym">,</span> Red<span class="hl sym">) =&gt;</span> Yellow   
      <span class="hl kwa">case</span> <span class="hl sym">(</span>Blue<span class="hl sym">,</span> Yellow<span class="hl sym">) =&gt;</span> Red   
      <span class="hl kwa">case</span> <span class="hl sym">(</span>Red<span class="hl sym">,</span> Blue<span class="hl sym">) =&gt;</span> Yellow
      <span class="hl kwa">case</span> <span class="hl sym">(</span>Red<span class="hl sym">,</span> Red<span class="hl sym">) =&gt;</span> Red
      <span class="hl kwa">case</span> <span class="hl sym">(</span>Red<span class="hl sym">,</span> Yellow<span class="hl sym">) =&gt;</span> Blue   
      <span class="hl kwa">case</span> <span class="hl sym">(</span>Yellow<span class="hl sym">,</span> Blue<span class="hl sym">) =&gt;</span> Red   
      <span class="hl kwa">case</span> <span class="hl sym">(</span>Yellow<span class="hl sym">,</span> Red<span class="hl sym">) =&gt;</span> Blue
      <span class="hl kwa">case</span> <span class="hl sym">(</span>Yellow<span class="hl sym">,</span> Yellow<span class="hl sym">) =&gt;</span> Yellow
   <span class="hl sym">}</span>

   <span class="hl kwa">def</span> run<span class="hl sym">(</span>n<span class="hl sym">:</span> Int<span class="hl sym">,</span> colours<span class="hl sym">:</span> Colour<span class="hl sym">*) {</span>
      <span class="hl kwa">val</span> place <span class="hl sym">=</span> <span class="hl kwa">new</span> MeetingPlace<span class="hl sym">(</span>n<span class="hl sym">)</span>
      colours<span class="hl sym">.</span>foreach <span class="hl sym">{</span> c <span class="hl sym">=&gt;</span> print<span class="hl sym">(</span><span class="hl str">&quot; &quot;</span><span class="hl sym">+</span>c<span class="hl sym">) }</span>
      <span class="hl kwa">val</span> creatures <span class="hl sym">=</span> colours<span class="hl sym">.</span>map <span class="hl sym">{</span> <span class="hl kwa">new</span> Creature<span class="hl sym">(</span>place<span class="hl sym">,</span> _<span class="hl sym">) }.</span>toArray
      println<span class="hl sym">()</span>
      <span class="hl kwa">val</span> ts <span class="hl sym">=</span> creatures<span class="hl sym">.</span>map <span class="hl sym">{</span> <span class="hl kwa">new</span> <span class="hl kwc">Thread</span><span class="hl sym">(</span>_<span class="hl sym">) }</span>
      ts<span class="hl sym">.</span>foreach <span class="hl sym">{</span> _<span class="hl sym">.</span>start<span class="hl sym">() }</span>
      ts<span class="hl sym">.</span>foreach <span class="hl sym">{</span> _<span class="hl sym">.</span>join<span class="hl sym">() }</span>
      creatures<span class="hl sym">.</span>foreach <span class="hl sym">{</span> println<span class="hl sym">(</span>_<span class="hl sym">) }</span>
      println<span class="hl sym">(</span>getNumber<span class="hl sym">(</span>creatures<span class="hl sym">.</span>foldLeft<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">){</span>_ <span class="hl sym">+</span> _<span class="hl sym">.</span>count<span class="hl sym">}))</span>
      println<span class="hl sym">()</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">def</span> main<span class="hl sym">(</span>args<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">String</span><span class="hl sym">]) {</span>
      <span class="hl kwa">val</span> n <span class="hl sym">=</span> <span class="hl kwa">if</span> <span class="hl sym">(</span>args<span class="hl sym">.</span>isEmpty<span class="hl sym">)</span> <span class="hl num">600</span> <span class="hl kwa">else</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span>parseInt<span class="hl sym">(</span>args<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">))</span>
      printColours<span class="hl sym">()</span>
      println<span class="hl sym">()</span>
      run<span class="hl sym">(</span>n<span class="hl sym">,</span> Blue<span class="hl sym">,</span> Red<span class="hl sym">,</span> Yellow<span class="hl sym">)</span>
      run<span class="hl sym">(</span>n<span class="hl sym">,</span> Blue<span class="hl sym">,</span> Red<span class="hl sym">,</span> Yellow<span class="hl sym">,</span> Red<span class="hl sym">,</span> Yellow<span class="hl sym">,</span>
            Blue<span class="hl sym">,</span> Red<span class="hl sym">,</span> Yellow<span class="hl sym">,</span> Red<span class="hl sym">,</span> Blue<span class="hl sym">)</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">val</span> Numbers <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">String</span><span class="hl sym">](</span><span class="hl str">&quot;zero&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;one&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;two&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;three&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;four&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;five&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;six&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;seven&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;eight&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;nine&quot;</span><span class="hl sym">)</span>

   <span class="hl kwa">def</span> getNumber<span class="hl sym">(</span>n<span class="hl sym">:</span> Int<span class="hl sym">) =</span> <span class="hl kwc">String</span><span class="hl sym">.</span>valueOf<span class="hl sym">(</span>n<span class="hl sym">).</span>toList<span class="hl sym">.</span>map <span class="hl sym">{</span> ch <span class="hl sym">=&gt;</span> Numbers<span class="hl sym">(</span><span class="hl kwc">Character</span><span class="hl sym">.</span>getNumericValue<span class="hl sym">(</span>ch<span class="hl sym">)) } .</span>mkString<span class="hl sym">(</span><span class="hl str">&quot; &quot;</span><span class="hl sym">)</span>

   <span class="hl kwa">def</span> printColours<span class="hl sym">() {</span>
      printColours<span class="hl sym">(</span>Blue<span class="hl sym">,</span> Blue<span class="hl sym">)</span>
      printColours<span class="hl sym">(</span>Blue<span class="hl sym">,</span> Red<span class="hl sym">)</span>
      printColours<span class="hl sym">(</span>Blue<span class="hl sym">,</span> Yellow<span class="hl sym">)</span>
      printColours<span class="hl sym">(</span>Red<span class="hl sym">,</span> Blue<span class="hl sym">)</span>   
      printColours<span class="hl sym">(</span>Red<span class="hl sym">,</span> Red<span class="hl sym">)</span>
      printColours<span class="hl sym">(</span>Red<span class="hl sym">,</span> Yellow<span class="hl sym">)</span>
      printColours<span class="hl sym">(</span>Yellow<span class="hl sym">,</span> Blue<span class="hl sym">)</span>
      printColours<span class="hl sym">(</span>Yellow<span class="hl sym">,</span> Red<span class="hl sym">)</span>
      printColours<span class="hl sym">(</span>Yellow<span class="hl sym">,</span> Yellow<span class="hl sym">)</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">def</span> printColours<span class="hl sym">(</span>c1<span class="hl sym">:</span> Colour<span class="hl sym">,</span> c2<span class="hl sym">:</span> Colour<span class="hl sym">) {</span>
      println<span class="hl sym">(</span>c1<span class="hl sym">+</span><span class="hl str">&quot; + &quot;</span><span class="hl sym">+</span>c2<span class="hl sym">+</span><span class="hl str">&quot; -&gt; &quot;</span><span class="hl sym">+</span>doCompliment<span class="hl sym">(</span>c1<span class="hl sym">,</span> c2<span class="hl sym">))</span>   
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

