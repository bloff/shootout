<span class="hl slc">;;    The Computer Language Benchmarks Game</span>
<span class="hl slc">;;    http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;</span>
<span class="hl slc">;;    Adapted from the C (gcc) code by Sebastien Loisel</span>
<span class="hl slc">;;</span>
<span class="hl slc">;;    Contributed by Christopher Neufeld</span>
<span class="hl slc">;;    Modified by Juho Snellman 2005-10-26</span>
<span class="hl slc">;;      * Use SIMPLE-ARRAY instead of ARRAY in declarations</span>
<span class="hl slc">;;      * Use TRUNCATE instead of / for fixnum division</span>
<span class="hl slc">;;      * Rearrange EVAL-A to make it more readable and a bit faster</span>
<span class="hl slc">;;    Modified by Andy Hefner 2008-09-18</span>
<span class="hl slc">;;      * Eliminate array consing</span>
<span class="hl slc">;;      * Clean up type declarations in eval-A</span>
<span class="hl slc">;;      * Distribute work across multiple cores on SBCL</span>
<span class="hl slc">;;    Modified by Witali Kusnezow 2008-12-02</span>
<span class="hl slc">;;      * use right shift instead of truncate for division in eval-A</span>
<span class="hl slc">;;      * redefine eval-A as a macro</span>


<span class="hl slc">;; This is our most expensive function.  Optimized with the knowledge</span>
<span class="hl slc">;; that 'n' will never be &quot;huge&quot;.  This will break if 'n' exceeds</span>
<span class="hl slc">;; approximately half of the square root of the largest fixnum</span>
<span class="hl slc">;; supported by the implementation.  On 32-bit sbcl,</span>
<span class="hl slc">;; 'most-positive-fixnum' is 536870911, and we can support values of</span>
<span class="hl slc">;; 'n' above 11000.</span>

<span class="hl sym">(</span>defmacro <span class="hl kwa">eval</span><span class="hl sym">-</span>A <span class="hl sym">(</span>i j<span class="hl sym">)</span>
  <span class="hl sym">`(</span>let<span class="hl sym">* ((</span>n <span class="hl sym">(+ ,</span>i <span class="hl sym">,</span>j<span class="hl sym">))</span>
          <span class="hl sym">(</span>n<span class="hl sym">+</span><span class="hl num">1</span> <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">+</span> n<span class="hl sym">)))</span>
     <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">type</span> <span class="hl sym">(</span>integer <span class="hl num">0 22000</span><span class="hl sym">)</span> n n<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">))</span>
     <span class="hl sym">(/ (</span><span class="hl kwa">float</span> <span class="hl sym">(+ (</span>ash <span class="hl sym">(*</span> n n<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) -</span><span class="hl num">1</span><span class="hl sym">) ,</span>i <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl num">0</span>d0<span class="hl sym">))))</span>

<span class="hl sym">(</span><span class="hl kwa">defun eval</span><span class="hl sym">-</span>At<span class="hl sym">-</span>times<span class="hl sym">-</span>u <span class="hl sym">(</span>u n Au start end<span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">type</span> fixnum n start end<span class="hl sym">)</span>
           <span class="hl sym">(</span><span class="hl kwa">type</span> <span class="hl sym">(</span>simple<span class="hl sym">-</span>array double<span class="hl sym">-</span><span class="hl kwa">float</span><span class="hl sym">)</span> u Au<span class="hl sym">))</span>
  <span class="hl sym">(</span>loop for i from start below end do
        <span class="hl sym">(</span>setf <span class="hl sym">(</span>aref Au i<span class="hl sym">)</span>
              <span class="hl sym">(</span>loop for j below n
                    summing <span class="hl sym">(* (</span>aref u j<span class="hl sym">) (</span><span class="hl kwa">eval</span><span class="hl sym">-</span>A j i<span class="hl sym">))</span>
                    of<span class="hl sym">-</span><span class="hl kwa">type</span> double<span class="hl sym">-</span><span class="hl kwa">float</span><span class="hl sym">))))</span>

<span class="hl sym">(</span><span class="hl kwa">defun eval</span><span class="hl sym">-</span>A<span class="hl sym">-</span>times<span class="hl sym">-</span>u <span class="hl sym">(</span>u n Au start end<span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">type</span> fixnum n start end<span class="hl sym">)</span>
           <span class="hl sym">(</span><span class="hl kwa">type</span> <span class="hl sym">(</span>simple<span class="hl sym">-</span>array double<span class="hl sym">-</span><span class="hl kwa">float</span><span class="hl sym">)</span> u Au<span class="hl sym">))</span>
  <span class="hl sym">(</span>loop for i from start below end do
        <span class="hl sym">(</span>setf <span class="hl sym">(</span>aref Au i<span class="hl sym">)</span>
              <span class="hl sym">(</span>loop for j below n
                    summing <span class="hl sym">(* (</span>aref u j<span class="hl sym">) (</span><span class="hl kwa">eval</span><span class="hl sym">-</span>A i j<span class="hl sym">))</span>
                    of<span class="hl sym">-</span><span class="hl kwa">type</span> double<span class="hl sym">-</span><span class="hl kwa">float</span><span class="hl sym">))))</span>

#<span class="hl sym">+</span>sb<span class="hl sym">-</span>thread
<span class="hl sym">(</span><span class="hl kwa">defun</span> execute<span class="hl sym">-</span>parallel <span class="hl sym">(</span>start end function<span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>optimize <span class="hl sym">(</span>speed <span class="hl num">0</span><span class="hl sym">)))</span>
  <span class="hl sym">(</span>let<span class="hl sym">* ((</span>num<span class="hl sym">-</span>threads <span class="hl num">4</span><span class="hl sym">))</span>
    <span class="hl sym">(</span>loop with step <span class="hl sym">= (</span>truncate <span class="hl sym">(-</span> end start<span class="hl sym">)</span> num<span class="hl sym">-</span>threads<span class="hl sym">)</span>
          for index from start below end by step
          collecting <span class="hl sym">(</span>let <span class="hl sym">((</span>start index<span class="hl sym">)</span>
                           <span class="hl sym">(</span>end <span class="hl sym">(</span><span class="hl kwa">min</span> end <span class="hl sym">(+</span> index step<span class="hl sym">))))</span>
                       <span class="hl sym">(</span>sb<span class="hl sym">-</span>thread<span class="hl sym">:</span>make<span class="hl sym">-</span>thread
                        <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">() (</span>funcall function start end<span class="hl sym">))))</span>
          into threads
          finally <span class="hl sym">(</span><span class="hl kwa">mapcar</span> #<span class="hl sym">'</span>sb<span class="hl sym">-</span>thread<span class="hl sym">:</span>join<span class="hl sym">-</span>thread threads<span class="hl sym">))))</span>

#<span class="hl sym">-</span>sb<span class="hl sym">-</span>thread
<span class="hl sym">(</span><span class="hl kwa">defun</span> execute<span class="hl sym">-</span>parallel <span class="hl sym">(</span>start end function <span class="hl sym">)</span>
  <span class="hl sym">(</span>funcall function start end<span class="hl sym">))</span>

<span class="hl sym">(</span><span class="hl kwa">defun eval</span><span class="hl sym">-</span>AtA<span class="hl sym">-</span>times<span class="hl sym">-</span>u <span class="hl sym">(</span>u AtAu v n start end<span class="hl sym">)</span>
  <span class="hl sym">(</span>execute<span class="hl sym">-</span>parallel start end
    <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>start end<span class="hl sym">)</span>
      <span class="hl sym">(</span><span class="hl kwa">eval</span><span class="hl sym">-</span>A<span class="hl sym">-</span>times<span class="hl sym">-</span>u u n v start end<span class="hl sym">)))</span>
  <span class="hl sym">(</span>execute<span class="hl sym">-</span>parallel start end
    <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>start end<span class="hl sym">)</span>
      <span class="hl sym">(</span><span class="hl kwa">eval</span><span class="hl sym">-</span>At<span class="hl sym">-</span>times<span class="hl sym">-</span>u v n AtAu start end<span class="hl sym">))))</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> main <span class="hl sym">(&amp;</span>optional n<span class="hl sym">-</span>supplied<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>n <span class="hl sym">(</span><span class="hl kwa">or</span> n<span class="hl sym">-</span>supplied
               <span class="hl sym">(</span>parse<span class="hl sym">-</span>integer <span class="hl sym">(</span><span class="hl kwa">or</span> <span class="hl sym">(</span><span class="hl kwa">car</span> <span class="hl sym">(</span><span class="hl kwa">last</span> #<span class="hl sym">+</span>sbcl sb<span class="hl sym">-</span>ext<span class="hl sym">:*</span>posix<span class="hl sym">-</span>argv<span class="hl sym">*</span>
                                             #<span class="hl sym">+</span>clisp ext<span class="hl sym">:*</span>args<span class="hl sym">*</span>
                                             #<span class="hl sym">+</span>cmu extensions<span class="hl sym">:*</span><span class="hl kwa">command</span><span class="hl sym">-</span><span class="hl kwa">line</span><span class="hl sym">-</span>strings<span class="hl sym">*</span>
                                             #<span class="hl sym">+</span>gcl  si<span class="hl sym">::*</span><span class="hl kwa">command</span><span class="hl sym">-</span>args<span class="hl sym">*))</span>
                                  <span class="hl str">&quot;2000&quot;</span><span class="hl sym">)))))</span>
    <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">type</span> fixnum n<span class="hl sym">))</span>
    <span class="hl sym">(</span><span class="hl kwa">or</span> <span class="hl sym">(</span>typep <span class="hl sym">(* (- (*</span> <span class="hl num">2</span> n<span class="hl sym">)</span> <span class="hl num">1</span><span class="hl sym">) (- (*</span> <span class="hl num">2</span> n<span class="hl sym">)</span> <span class="hl num">2</span><span class="hl sym">)) '</span>fixnum<span class="hl sym">)</span>
        <span class="hl sym">(</span>error <span class="hl str">&quot;The supplied value of 'n' breaks the optimizations in EVAL-A&quot;</span><span class="hl sym">))</span>
    <span class="hl sym">(</span>let <span class="hl sym">((</span>u <span class="hl sym">(</span>make<span class="hl sym">-</span>array n <span class="hl sym">:</span>element<span class="hl sym">-</span><span class="hl kwa">type</span> <span class="hl sym">'</span>double<span class="hl sym">-</span><span class="hl kwa">float</span> <span class="hl sym">:</span>initial<span class="hl sym">-</span>element <span class="hl num">1.0</span>d0<span class="hl sym">))</span>
          <span class="hl sym">(</span>v <span class="hl sym">(</span>make<span class="hl sym">-</span>array n <span class="hl sym">:</span>element<span class="hl sym">-</span><span class="hl kwa">type</span> <span class="hl sym">'</span>double<span class="hl sym">-</span><span class="hl kwa">float</span><span class="hl sym">))</span>
          <span class="hl sym">(</span>tmp <span class="hl sym">(</span>make<span class="hl sym">-</span>array n <span class="hl sym">:</span>element<span class="hl sym">-</span><span class="hl kwa">type</span> <span class="hl sym">'</span>double<span class="hl sym">-</span><span class="hl kwa">float</span><span class="hl sym">)))</span>
      <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">type</span> <span class="hl sym">(</span>simple<span class="hl sym">-</span>array double<span class="hl sym">-</span><span class="hl kwa">float</span><span class="hl sym">)</span> U V<span class="hl sym">))</span>
      <span class="hl sym">(</span>dotimes <span class="hl sym">(</span>i <span class="hl num">10</span><span class="hl sym">)</span>
        <span class="hl sym">(</span><span class="hl kwa">eval</span><span class="hl sym">-</span>AtA<span class="hl sym">-</span>times<span class="hl sym">-</span>u u v tmp n <span class="hl num">0</span> n<span class="hl sym">)</span>
        <span class="hl sym">(</span><span class="hl kwa">eval</span><span class="hl sym">-</span>AtA<span class="hl sym">-</span>times<span class="hl sym">-</span>u v u tmp n <span class="hl num">0</span> n<span class="hl sym">))</span>
      <span class="hl sym">(</span>let <span class="hl sym">((</span>vBv <span class="hl num">0.0</span>d0<span class="hl sym">)</span>
            <span class="hl sym">(</span>vv <span class="hl num">0.0</span>d0<span class="hl sym">))</span>
        <span class="hl sym">(</span>dotimes <span class="hl sym">(</span>i n<span class="hl sym">)</span>
          <span class="hl sym">(</span>incf vBv <span class="hl sym">(* (</span>aref u i<span class="hl sym">) (</span>aref v i<span class="hl sym">)))</span>
          <span class="hl sym">(</span>incf vv <span class="hl sym">(* (</span>aref v i<span class="hl sym">) (</span>aref v i<span class="hl sym">))))</span>
        <span class="hl sym">(</span>format t <span class="hl str">&quot;~11,9F~%&quot;</span> <span class="hl sym">(</span><span class="hl kwa">sqrt</span> <span class="hl sym">(</span>the <span class="hl sym">(</span>double<span class="hl sym">-</span><span class="hl kwa">float</span> <span class="hl num">0</span>d0<span class="hl sym">) (/</span> vBv vv<span class="hl sym">))))))))</span>
