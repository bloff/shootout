<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Contributed by Martin Koistinen</span>
<span class="hl com"> * Based on mandelbrot.c contributed by Greg Buchholz and The Go Authors</span>
<span class="hl com"> * flag.Arg hack by Isaac Gouy</span>
<span class="hl com"> *</span>
<span class="hl com"> * Large changes by Bill Broadley, including:</span>
<span class="hl com"> * 1) Switching the one goroutine per line to one per CPU</span>
<span class="hl com"> * 2) Replacing gorouting calls with channels</span>
<span class="hl com"> * 3) Handling out of order results in the file writer.</span>
<span class="hl com"> */</span>

<span class="hl kwa">package</span> main

<span class="hl kwa">import</span> <span class="hl sym">(</span>
   <span class="hl str">&quot;bufio&quot;</span><span class="hl sym">;</span>
   <span class="hl str">&quot;flag&quot;</span><span class="hl sym">;</span>
   <span class="hl str">&quot;fmt&quot;</span><span class="hl sym">;</span>
   <span class="hl str">&quot;os&quot;</span><span class="hl sym">;</span>
   <span class="hl str">&quot;strconv&quot;</span><span class="hl sym">;</span>
   <span class="hl str">&quot;runtime&quot;</span><span class="hl sym">;</span>
<span class="hl sym">)</span>

<span class="hl com">/* targeting a q6600 system, one cpu worker per core */</span>
<span class="hl kwa">const</span> pool <span class="hl sym">=</span> <span class="hl num">4</span>

<span class="hl kwa">const</span> ZERO float64 <span class="hl sym">=</span> <span class="hl num">0</span>
<span class="hl kwa">const</span> LIMIT <span class="hl sym">=</span> <span class="hl num">2.0</span>
<span class="hl kwa">const</span> ITER <span class="hl sym">=</span> <span class="hl num">50</span>   <span class="hl slc">// Benchmark parameter</span>
<span class="hl kwa">const</span> SIZE <span class="hl sym">=</span> <span class="hl num">16000</span>

<span class="hl kwa">var</span> rows <span class="hl sym">[]</span>byte<span class="hl sym">;</span>
<span class="hl kwa">var</span> bytesPerRow int

<span class="hl slc">// This func is responsible for rendering a row of pixels,</span>
<span class="hl slc">// and when complete writing it out to the file.</span>

<span class="hl kwa">func</span> renderRow<span class="hl sym">(</span>w<span class="hl sym">,</span> h<span class="hl sym">,</span> bytes int<span class="hl sym">,</span> workChan <span class="hl kwa">chan</span> int<span class="hl sym">,</span>iter int<span class="hl sym">,</span> finishChan <span class="hl kwa">chan</span> bool<span class="hl sym">) {</span>

   <span class="hl kwa">var</span> Zr<span class="hl sym">,</span> Zi<span class="hl sym">,</span> Tr<span class="hl sym">,</span> Ti<span class="hl sym">,</span> Cr float64<span class="hl sym">;</span>
   <span class="hl kwa">var</span> x<span class="hl sym">,</span>i int<span class="hl sym">;</span>

   <span class="hl kwa">for</span> y <span class="hl sym">:=</span> <span class="hl kwa">range</span> workChan <span class="hl sym">{</span>

      offset <span class="hl sym">:=</span> bytesPerRow <span class="hl sym">*</span> y<span class="hl sym">;</span>
      Ci <span class="hl sym">:= (</span><span class="hl num">2</span><span class="hl sym">*</span>float64<span class="hl sym">(</span>y<span class="hl sym">)/</span>float64<span class="hl sym">(</span>h<span class="hl sym">) -</span> <span class="hl num">1.0</span><span class="hl sym">);</span>

      <span class="hl kwa">for</span> x <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> x <span class="hl sym">&lt;</span> w<span class="hl sym">;</span> x<span class="hl sym">++ {</span>
         Zr<span class="hl sym">,</span> Zi<span class="hl sym">,</span> Tr<span class="hl sym">,</span> Ti <span class="hl sym">=</span> ZERO<span class="hl sym">,</span> ZERO<span class="hl sym">,</span> ZERO<span class="hl sym">,</span> ZERO<span class="hl sym">;</span>
         Cr <span class="hl sym">= (</span><span class="hl num">2</span><span class="hl sym">*</span>float64<span class="hl sym">(</span>x<span class="hl sym">)/</span>float64<span class="hl sym">(</span>w<span class="hl sym">) -</span> <span class="hl num">1.5</span><span class="hl sym">);</span>

         <span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> iter <span class="hl sym">&amp;&amp;</span> Tr<span class="hl sym">+</span>Ti <span class="hl sym">&lt;=</span> LIMIT<span class="hl sym">*</span>LIMIT<span class="hl sym">;</span> i<span class="hl sym">++ {</span>
            Zi <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">*</span>Zr<span class="hl sym">*</span>Zi <span class="hl sym">+</span> Ci<span class="hl sym">;</span>
            Zr <span class="hl sym">=</span> Tr <span class="hl sym">-</span> Ti <span class="hl sym">+</span> Cr<span class="hl sym">;</span>
            Tr <span class="hl sym">=</span> Zr <span class="hl sym">*</span> Zr<span class="hl sym">;</span>
            Ti <span class="hl sym">=</span> Zi <span class="hl sym">*</span> Zi<span class="hl sym">;</span>
         <span class="hl sym">}</span>

         <span class="hl slc">// Store the value in the array of ints</span>
         <span class="hl kwa">if</span> Tr<span class="hl sym">+</span>Ti <span class="hl sym">&lt;=</span> LIMIT<span class="hl sym">*</span>LIMIT <span class="hl sym">{</span>
            rows<span class="hl sym">[</span>offset<span class="hl sym">+</span>x<span class="hl sym">/</span><span class="hl num">8</span><span class="hl sym">] |= (</span>byte<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">) &lt;&lt;</span> uint<span class="hl sym">(</span><span class="hl num">7</span><span class="hl sym">-(</span>x<span class="hl sym">%</span><span class="hl num">8</span><span class="hl sym">)))</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
   <span class="hl com">/* tell master I'm finished */</span>
   finishChan <span class="hl sym">&lt;-</span> true<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwa">func</span> main<span class="hl sym">() {</span>
   runtime<span class="hl sym">.</span>GOMAXPROCS<span class="hl sym">(</span>pool<span class="hl sym">);</span>

   size <span class="hl sym">:=</span> SIZE<span class="hl sym">;</span>   <span class="hl slc">// Contest settings</span>
   iter <span class="hl sym">:=</span> ITER<span class="hl sym">;</span>

   <span class="hl slc">// Get input, if any...</span>
   flag<span class="hl sym">.</span>Parse<span class="hl sym">();</span>
   <span class="hl kwa">if</span> flag<span class="hl sym">.</span>NArg<span class="hl sym">() &gt;</span> <span class="hl num">0</span> <span class="hl sym">{</span>
      size<span class="hl sym">,</span> _ <span class="hl sym">=</span> strconv<span class="hl sym">.</span>Atoi<span class="hl sym">(</span>flag<span class="hl sym">.</span>Arg<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">))</span>
   <span class="hl sym">}</span>
   w<span class="hl sym">,</span> h <span class="hl sym">:=</span> size<span class="hl sym">,</span> size<span class="hl sym">;</span>
   bytesPerRow <span class="hl sym">=</span>  w <span class="hl sym">/</span> <span class="hl num">8</span><span class="hl sym">;</span>

   out <span class="hl sym">:=</span> bufio<span class="hl sym">.</span>NewWriter<span class="hl sym">(</span>os<span class="hl sym">.</span>Stdout<span class="hl sym">);</span>
   <span class="hl kwa">defer</span> out<span class="hl sym">.</span>Flush<span class="hl sym">();</span>
   fmt<span class="hl sym">.</span>Fprintf<span class="hl sym">(</span>out<span class="hl sym">,</span> <span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">%d %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> w<span class="hl sym">,</span> h<span class="hl sym">);</span>

   rows <span class="hl sym">=</span> make<span class="hl sym">([]</span>byte<span class="hl sym">,</span> bytesPerRow<span class="hl sym">*</span>h<span class="hl sym">);</span>

   <span class="hl com">/* global buffer of work for workers, ideally never runs dry */</span>
   workChan <span class="hl sym">:=</span> make<span class="hl sym">(</span><span class="hl kwa">chan</span> int<span class="hl sym">,</span> pool<span class="hl sym">*</span><span class="hl num">2</span><span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">);</span>
   <span class="hl com">/* global buffer of results for output, ideally never blocks */</span>
   finishChan <span class="hl sym">:=</span> make<span class="hl sym">(</span><span class="hl kwa">chan</span> bool<span class="hl sym">);</span>
   <span class="hl slc">// start pool workers, and assign all work</span>
   <span class="hl kwa">for</span> y <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span> y <span class="hl sym">&lt;</span> size<span class="hl sym">;</span> y<span class="hl sym">++ {</span>
      <span class="hl kwa">if</span> y <span class="hl sym">&lt;</span> pool <span class="hl sym">{</span>
         <span class="hl kwa">go</span> renderRow<span class="hl sym">(</span>w<span class="hl sym">,</span> h<span class="hl sym">,</span> bytesPerRow<span class="hl sym">,</span> workChan<span class="hl sym">,</span> iter<span class="hl sym">,</span>finishChan<span class="hl sym">)</span>
      <span class="hl sym">}</span>
      workChan <span class="hl sym">&lt;-</span> y<span class="hl sym">;</span>
   <span class="hl sym">}</span>
   <span class="hl com">/* tell the workers all done */</span>
   close<span class="hl sym">(</span>workChan<span class="hl sym">);</span>
   <span class="hl com">/* write for the file workers to finish */</span>
   <span class="hl kwa">for</span> i<span class="hl sym">:=</span><span class="hl num">0</span><span class="hl sym">;</span>i<span class="hl sym">&lt;</span>pool<span class="hl sym">;</span>i<span class="hl sym">++ {</span>
      <span class="hl sym">&lt;-</span> finishChan<span class="hl sym">;</span>
   <span class="hl sym">}</span>
   out<span class="hl sym">.</span>Write<span class="hl sym">(</span>rows<span class="hl sym">);</span>
<span class="hl sym">}</span>
