<span class="hl com">/*</span>
<span class="hl com">* The Computer Language Benchmarks Game</span>
<span class="hl com">* http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">* based on a contribution by Premysl Hruby</span>
<span class="hl com">* modified to use LWP instead of pthreads by Guenther Thomsen</span>
<span class="hl com">*/</span>

<span class="hl dir">#include &lt;stdio.h&gt;</span>
<span class="hl dir">#include &lt;stdlib.h&gt;</span>
<span class="hl dir">#include &lt;lwp/lwp.h&gt;</span>
<span class="hl dir">#include &lt;lwp/lock.h&gt;</span>
<span class="hl dir">#include &lt;string.h&gt;</span>
<span class="hl dir">#include &lt;limits.h&gt;</span>

<span class="hl dir">#define THREADS (503)</span>


<span class="hl slc">// LWP2 library doesn't contain explicit mutex handling functions.</span>
<span class="hl kwc">typedef volatile</span> <span class="hl kwb">int</span> mutex_t<span class="hl sym">;</span>
<span class="hl kwc">inline</span> <span class="hl kwb">void</span> <span class="hl kwd">mutex_init</span><span class="hl sym">(</span>mutex_t <span class="hl sym">*</span>m<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl sym">*</span>m <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl slc">// lock mutex, yield iff mutex was already locked and retry</span>
<span class="hl kwc">inline</span> <span class="hl kwb">void</span> <span class="hl kwd">mutex_lock</span><span class="hl sym">(</span>mutex_t <span class="hl sym">*</span>m<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl slc">// No need for atomic operations or careful locking here; we're using</span>
   <span class="hl slc">// non-preemptive &quot;scheduling&quot; within a single thread of execution.</span>
   <span class="hl slc">// Simply yielding turns out to be faster than waiting here and later</span>
   <span class="hl slc">// signaling the LWProcess(es) waiting for the mutex.</span>
   <span class="hl kwa">while</span><span class="hl sym">(++*</span>m <span class="hl sym">&gt;</span> <span class="hl num">1</span><span class="hl sym">) {</span>
      <span class="hl sym">--*</span>m<span class="hl sym">;</span>
      <span class="hl kwd">LWP_DispatchProcess</span><span class="hl sym">();</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl slc">// unlock mutex, yield</span>
<span class="hl kwc">inline</span> <span class="hl kwb">void</span> <span class="hl kwd">mutex_unlock</span><span class="hl sym">(</span>mutex_t <span class="hl sym">*</span>m<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl sym">*</span>m <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwd">LWP_DispatchProcess</span><span class="hl sym">();</span>
<span class="hl sym">}</span>


<span class="hl kwb">static</span> mutex_t mutex<span class="hl sym">[</span>THREADS<span class="hl sym">];</span>
<span class="hl kwb">static int</span> data<span class="hl sym">[</span>THREADS<span class="hl sym">];</span>
<span class="hl dir">#define STACK_SIZE 256</span>
<span class="hl kwb">static int</span> result<span class="hl sym">;</span>

<span class="hl kwb">static</span> PROCESS thread_ids<span class="hl sym">[</span>THREADS<span class="hl sym">];</span>


<span class="hl kwb">static void</span><span class="hl sym">*</span> <span class="hl kwd">thread</span><span class="hl sym">(</span><span class="hl kwb">void</span> <span class="hl sym">*</span>num<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwb">int</span> l <span class="hl sym">= (</span><span class="hl kwb">int</span><span class="hl sym">)</span>num<span class="hl sym">;</span>
   <span class="hl kwb">int</span> r <span class="hl sym">= (</span>l<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) %</span> THREADS<span class="hl sym">;</span>
   <span class="hl kwb">int</span> token<span class="hl sym">;</span>

   <span class="hl kwa">while</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">) {</span>
      <span class="hl kwd">mutex_lock</span><span class="hl sym">(&amp;</span>mutex<span class="hl sym">[</span>l<span class="hl sym">]);</span>
      token <span class="hl sym">=</span> data<span class="hl sym">[</span>l<span class="hl sym">];</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>token<span class="hl sym">) {</span>
         data<span class="hl sym">[</span>r<span class="hl sym">] =</span> token <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>
         <span class="hl kwd">mutex_unlock</span><span class="hl sym">(&amp;</span>mutex<span class="hl sym">[</span>r<span class="hl sym">]);</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">else</span> <span class="hl sym">{</span>
         result <span class="hl sym">=</span> l<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">;</span>
         <span class="hl kwd">LWP_SignalProcess</span><span class="hl sym">(&amp;</span>result<span class="hl sym">);</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>


<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">**</span>argv<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwb">int</span> i<span class="hl sym">;</span>
   PROCESS id<span class="hl sym">;</span>
   <span class="hl kwb">char</span> pname<span class="hl sym">[</span><span class="hl num">10</span><span class="hl sym">];</span>

   <span class="hl kwa">if</span> <span class="hl sym">(</span>argc <span class="hl sym">!=</span> <span class="hl num">2</span><span class="hl sym">)</span>
      <span class="hl kwd">exit</span><span class="hl sym">(</span><span class="hl num">255</span><span class="hl sym">);</span>
   data<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] =</span> <span class="hl kwd">atoi</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]);</span>

   <span class="hl kwd">LWP_Init</span><span class="hl sym">(</span>LWP_VERSION<span class="hl sym">,</span> LWP_NORMAL_PRIORITY<span class="hl sym">, &amp;</span>id<span class="hl sym">);</span>

   <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> THREADS<span class="hl sym">;</span> i<span class="hl sym">++) {</span>
      <span class="hl kwd">mutex_init</span><span class="hl sym">(&amp;</span>mutex<span class="hl sym">[</span>i<span class="hl sym">]);</span>
      <span class="hl kwd">mutex_lock</span><span class="hl sym">(&amp;</span>mutex<span class="hl sym">[</span>i<span class="hl sym">]);</span>
      <span class="hl kwd">sprintf</span><span class="hl sym">(</span>pname<span class="hl sym">,</span> <span class="hl str">&quot;Thread%3d&quot;</span><span class="hl sym">,</span> i<span class="hl sym">);</span>
      <span class="hl kwd">LWP_CreateProcess</span><span class="hl sym">(</span>thread<span class="hl sym">,</span> STACK_SIZE<span class="hl sym">,</span> LWP_NORMAL_PRIORITY<span class="hl sym">,</span> 
              <span class="hl sym">(</span><span class="hl kwb">void</span> <span class="hl sym">*)</span>i<span class="hl sym">,</span> pname<span class="hl sym">, &amp;</span>thread_ids<span class="hl sym">[</span>i<span class="hl sym">]);</span>
   <span class="hl sym">}</span>

   <span class="hl kwd">mutex_unlock</span><span class="hl sym">(&amp;</span>mutex<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>
   <span class="hl kwd">LWP_WaitProcess</span><span class="hl sym">(&amp;</span>result<span class="hl sym">);</span>
   <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;%i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> result<span class="hl sym">);</span>
   <span class="hl kwd">exit</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span>
<span class="hl sym">}</span>
