
Mon, 23 Feb 2009 04:51:48 GMT

COMMAND LINE:
/usr/local/src/vw7.6nc/bin/linuxx86_64/vwlinuxx86_64 /usr/local/src/vw7.6nc/image/benchmarks.im -nogui -evaluate "Tests knucleotide4" -a 0 < knucleotide-input25000000.txt

UNEXPECTED OUTPUT 

27,1709c27
< Unhandled exception: No space available to allocate this object
< 
< ----------------------------------------------------------------------
< Dictionary class(Behavior)>>newNoRetry:
< Receiver:
< 	a Dictionary class
< Instance Variables:
< 	superclass = Set
< 	methodDict = a MethodDictionary[65]
< 	format = 20481
< 	subclasses = an Array[4]
< 	instanceVariables = nil
< 	organization = ('accessing' #associationAt: #associationAt:ifAbsent: #associations #at: #at:ifAbsent: #at:ifAbsentPut: #at:ifPresent: #at:put: #bindingFor: #bindingFor:modifiers: #createKey:value: #findElementLike:ifAbsent: #keyAtValue: #keyAtValue:ifAbsent: #keys #localBindingFor: #localBindingNames #localBindings #oldBindingFor: #poolDefinitionClass #protectedBindingFor:modifiers: #values)
< ('testing' #includes: #isLikeNameSpace #occurrencesOf:)
< ('adding' #add: #declare:from:)
< ('removing' #remove: #remove:ifAbsent:)
< ('enumerating' #collect: #do: #keysAndValuesDo: #select:)
< ('printing' #printOn: #storeOn:)
< ('dictionary testing' #contentsEquals: #includesKey:)
< ('dictionary removing' #removeKey: #removeKey:ifAbsent:)
< ('dictionary enumerating' #associationsDo: #bindingsDo: #keysDo: #localNamesAndBindingsDo: #namesAndBindingsDo: #namesAndBindingsDo:modifiers: #protectedNamesAndBindingsDo:modifiers:)
< ('user interface' #inspectorClass #inspectorClasses)
< ('tracing' #traceWalkFrom:)
< ('binary storage' #readGeneralStructureOn: #storeGeneralStructureOn:)
< ('copying' #copyWithCopiedValues #postCopy #postCopyWithCopiedValues)
< ('private' #changeCapacityTo: #findKey:ifAbsent: #findKey:ifAbsentRaise: #findKeyOrNil: #fixCollisionsFrom: #keyNotFoundErrorFor:index: #noCheckAdd: #removeKeyPrivately: #valueNotFoundError:)
< ('private-backward compatibility' #keyNotFoundError:)
< ('computer language shootout' #at:putValueOf:ifAbsentPutValueOf:)
< 
< 	name = #Dictionary
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[222]
< Arguments:
< 	anInteger = 187904819
< Context PC = 15
< 
< ----------------------------------------------------------------------
< Dictionary class(Behavior)>>handleFailedNew:size:
< Receiver:
< 	a Dictionary class
< Instance Variables:
< 	superclass = Set
< 	methodDict = a MethodDictionary[65]
< 	format = 20481
< 	subclasses = an Array[4]
< 	instanceVariables = nil
< 	organization = ('accessing' #associationAt: #associationAt:ifAbsent: #associations #at: #at:ifAbsent: #at:ifAbsentPut: #at:ifPresent: #at:put: #bindingFor: #bindingFor:modifiers: #createKey:value: #findElementLike:ifAbsent: #keyAtValue: #keyAtValue:ifAbsent: #keys #localBindingFor: #localBindingNames #localBindings #oldBindingFor: #poolDefinitionClass #protectedBindingFor:modifiers: #values)
< ('testing' #includes: #isLikeNameSpace #occurrencesOf:)
< ('adding' #add: #declare:from:)
< ('removing' #remove: #remove:ifAbsent:)
< ('enumerating' #collect: #do: #keysAndValuesDo: #select:)
< ('printing' #printOn: #storeOn:)
< ('dictionary testing' #contentsEquals: #includesKey:)
< ('dictionary removing' #removeKey: #removeKey:ifAbsent:)
< ('dictionary enumerating' #associationsDo: #bindingsDo: #keysDo: #localNamesAndBindingsDo: #namesAndBindingsDo: #namesAndBindingsDo:modifiers: #protectedNamesAndBindingsDo:modifiers:)
< ('user interface' #inspectorClass #inspectorClasses)
< ('tracing' #traceWalkFrom:)
< ('binary storage' #readGeneralStructureOn: #storeGeneralStructureOn:)
< ('copying' #copyWithCopiedValues #postCopy #postCopyWithCopiedValues)
< ('private' #changeCapacityTo: #findKey:ifAbsent: #findKey:ifAbsentRaise: #findKeyOrNil: #fixCollisionsFrom: #keyNotFoundErrorFor:index: #noCheckAdd: #removeKeyPrivately: #valueNotFoundError:)
< ('private-backward compatibility' #keyNotFoundError:)
< ('computer language shootout' #at:putValueOf:ifAbsentPutValueOf:)
< 
< 	name = #Dictionary
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[222]
< Arguments:
< 	error = a SystemError(#'allocation failed',1503238560)
< 	newSize = 187904819
< Context PC = 29
< 
< ----------------------------------------------------------------------
< Dictionary class(Behavior)>>new:
< Receiver:
< 	a Dictionary class
< Instance Variables:
< 	superclass = Set
< 	methodDict = a MethodDictionary[65]
< 	format = 20481
< 	subclasses = an Array[4]
< 	instanceVariables = nil
< 	organization = ('accessing' #associationAt: #associationAt:ifAbsent: #associations #at: #at:ifAbsent: #at:ifAbsentPut: #at:ifPresent: #at:put: #bindingFor: #bindingFor:modifiers: #createKey:value: #findElementLike:ifAbsent: #keyAtValue: #keyAtValue:ifAbsent: #keys #localBindingFor: #localBindingNames #localBindings #oldBindingFor: #poolDefinitionClass #protectedBindingFor:modifiers: #values)
< ('testing' #includes: #isLikeNameSpace #occurrencesOf:)
< ('adding' #add: #declare:from:)
< ('removing' #remove: #remove:ifAbsent:)
< ('enumerating' #collect: #do: #keysAndValuesDo: #select:)
< ('printing' #printOn: #storeOn:)
< ('dictionary testing' #contentsEquals: #includesKey:)
< ('dictionary removing' #removeKey: #removeKey:ifAbsent:)
< ('dictionary enumerating' #associationsDo: #bindingsDo: #keysDo: #localNamesAndBindingsDo: #namesAndBindingsDo: #namesAndBindingsDo:modifiers: #protectedNamesAndBindingsDo:modifiers:)
< ('user interface' #inspectorClass #inspectorClasses)
< ('tracing' #traceWalkFrom:)
< ('binary storage' #readGeneralStructureOn: #storeGeneralStructureOn:)
< ('copying' #copyWithCopiedValues #postCopy #postCopyWithCopiedValues)
< ('private' #changeCapacityTo: #findKey:ifAbsent: #findKey:ifAbsentRaise: #findKeyOrNil: #fixCollisionsFrom: #keyNotFoundErrorFor:index: #noCheckAdd: #removeKeyPrivately: #valueNotFoundError:)
< ('private-backward compatibility' #keyNotFoundError:)
< ('computer language shootout' #at:putValueOf:ifAbsentPutValueOf:)
< 
< 	name = #Dictionary
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[222]
< Arguments:
< 	anInteger = 187904819
< Temporaries:
< 	error = a SystemError(#'allocation failed',1503238560)
< Context PC = 11
< 
< ----------------------------------------------------------------------
< Dictionary class(Set class)>>new:
< Receiver:
< 	a Dictionary class
< Instance Variables:
< 	superclass = Set
< 	methodDict = a MethodDictionary[65]
< 	format = 20481
< 	subclasses = an Array[4]
< 	instanceVariables = nil
< 	organization = ('accessing' #associationAt: #associationAt:ifAbsent: #associations #at: #at:ifAbsent: #at:ifAbsentPut: #at:ifPresent: #at:put: #bindingFor: #bindingFor:modifiers: #createKey:value: #findElementLike:ifAbsent: #keyAtValue: #keyAtValue:ifAbsent: #keys #localBindingFor: #localBindingNames #localBindings #oldBindingFor: #poolDefinitionClass #protectedBindingFor:modifiers: #values)
< ('testing' #includes: #isLikeNameSpace #occurrencesOf:)
< ('adding' #add: #declare:from:)
< ('removing' #remove: #remove:ifAbsent:)
< ('enumerating' #collect: #do: #keysAndValuesDo: #select:)
< ('printing' #printOn: #storeOn:)
< ('dictionary testing' #contentsEquals: #includesKey:)
< ('dictionary removing' #removeKey: #removeKey:ifAbsent:)
< ('dictionary enumerating' #associationsDo: #bindingsDo: #keysDo: #localNamesAndBindingsDo: #namesAndBindingsDo: #namesAndBindingsDo:modifiers: #protectedNamesAndBindingsDo:modifiers:)
< ('user interface' #inspectorClass #inspectorClasses)
< ('tracing' #traceWalkFrom:)
< ('binary storage' #readGeneralStructureOn: #storeGeneralStructureOn:)
< ('copying' #copyWithCopiedValues #postCopy #postCopyWithCopiedValues)
< ('private' #changeCapacityTo: #findKey:ifAbsent: #findKey:ifAbsentRaise: #findKeyOrNil: #fixCollisionsFrom: #keyNotFoundErrorFor:index: #noCheckAdd: #removeKeyPrivately: #valueNotFoundError:)
< ('private-backward compatibility' #keyNotFoundError:)
< ('computer language shootout' #at:putValueOf:ifAbsentPutValueOf:)
< 
< 	name = #Dictionary
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[222]
< Arguments:
< 	anInteger = 187500000
< Context PC = 21
< 
< ----------------------------------------------------------------------
< optimized [] in Tests class>>knucleotide4From:to:
< Receiver:
< 	an UndefinedObject
< Arguments:
< 	nucleotideFragment = 'GGTATTTTAATTTATAGT'
< Temporaries:
< 	frequencies = nil
< 	count = nil
< 	.sequence = 'CCCATAACTACAATAGTCGGCAATCTTTT...CTTGTTTGATTCCCCTGTATCTTAATTC'
< 	.output = a StandardIOStream
< Context PC = 23
< 
< ----------------------------------------------------------------------
< Tests class>>knucleotide4From:to:
< Receiver:
< 	a Tests class
< Instance Variables:
< 	superclass = Object
< 	methodDict = a MethodDictionary[0]
< 	format = 16384
< 	subclasses = nil
< 	instanceVariables = nil
< 	organization = 
< 	name = #Tests
< 	classPool = a NameSpaceOfClass[0]
< 	environment = nil
< Arguments:
< 	input = an ExternalReadStream
< 	output = a StandardIOStream
< Temporaries:
< 	sequence = 'CCCATAACTACAATAGTCGGCAATCTTTT...CTTGTTTGATTCCCCTGTATCTTAATTC'
< 	writeFrequencies = BlockClosure [] in Tests class>>knucleotide4From:to:
< 	writeCount = BlockClosure [] in Tests class>>knucleotide4From:to:
< 	maxDictionarySize = 80000000
< Context PC = 88
< 
< ----------------------------------------------------------------------
< Tests class>>knucleotide4
< Receiver:
< 	a Tests class
< Instance Variables:
< 	superclass = Object
< 	methodDict = a MethodDictionary[0]
< 	format = 16384
< 	subclasses = nil
< 	instanceVariables = nil
< 	organization = 
< 	name = #Tests
< 	classPool = a NameSpaceOfClass[0]
< 	environment = nil
< Context PC = 10
< 
< ----------------------------------------------------------------------
< UndefinedObject>>unboundMethod
< Receiver:
< 	an UndefinedObject
< Context PC = 3
< 
< ----------------------------------------------------------------------
< UndefinedObject(Object)>>performMethod:arguments:
< Receiver:
< 	an UndefinedObject
< Arguments:
< 	method = AnnotatedMethod UndefinedObject>>unboundMethod
< 	args = an Array[0]
< Context PC = 5
< 
< ----------------------------------------------------------------------
< UndefinedObject(Object)>>performMethod:
< Receiver:
< 	an UndefinedObject
< Arguments:
< 	method = AnnotatedMethod UndefinedObject>>unboundMethod
< Context PC = 5
< 
< ----------------------------------------------------------------------
< Compiler(SmalltalkCompiler)>>evaluate:in:allowReceiver:receiver:environment:notifying:ifFail:
< Receiver:
< 	a Compiler
< Instance Variables:
< 	sourceStream = a ReadStream
< 	requestor = nil
< 	class = UndefinedObject
< 	targetClass = UndefinedObject
< 	environment = a NameSpace[63]
< 	context = nil
< 	methodClass = CompiledMethod
< 	allowSelfReferences = true
< 	allowClassVariableReferences = nil
< Arguments:
< 	textOrStream = 'Tests knucleotide4'
< 	aContext = nil
< 	allowSelf = true
< 	receiver = nil
< 	env = a NameSpace[63]
< 	aRequestor = nil
< 	failBlock = BlockClosure [] in SmalltalkCompiler class>>evaluate:for:in:notifying:logged:
< Temporaries:
< 	method = AnnotatedMethod UndefinedObject>>unboundMethod
< Context PC = 22
< 
< ----------------------------------------------------------------------
< Compiler class(SmalltalkCompiler class)>>evaluate:for:in:notifying:logged:
< Receiver:
< 	a Compiler class
< Instance Variables:
< 	superclass = SmalltalkCompiler
< 	methodDict = a MethodDictionary[4]
< 	format = 16393
< 	subclasses = an Array[2]
< 	instanceVariables = nil
< 	organization = ('private' #compile:in: #newCodeStream #newMethodHolder #translate:noPattern:ifFail:needSourceMap:handler:)
< 
< 	name = #Compiler
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[225]
< Arguments:
< 	textOrString = 'Tests knucleotide4'
< 	anObject = nil
< 	aNameSpace = a NameSpace[63]
< 	aController = nil
< 	logFlag = false
< Temporaries:
< 	val = nil
< Context PC = 14
< 
< ----------------------------------------------------------------------
< Compiler class(SmalltalkCompiler class)>>evaluate:notifying:logged:
< Receiver:
< 	a Compiler class
< Instance Variables:
< 	superclass = SmalltalkCompiler
< 	methodDict = a MethodDictionary[4]
< 	format = 16393
< 	subclasses = an Array[2]
< 	instanceVariables = nil
< 	organization = ('private' #compile:in: #newCodeStream #newMethodHolder #translate:noPattern:ifFail:needSourceMap:handler:)
< 
< 	name = #Compiler
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[225]
< Arguments:
< 	textOrString = 'Tests knucleotide4'
< 	aController = nil
< 	logFlag = false
< Context PC = 9
< 
< ----------------------------------------------------------------------
< Compiler class(SmalltalkCompiler class)>>evaluate:logged:
< Receiver:
< 	a Compiler class
< Instance Variables:
< 	superclass = SmalltalkCompiler
< 	methodDict = a MethodDictionary[4]
< 	format = 16393
< 	subclasses = an Array[2]
< 	instanceVariables = nil
< 	organization = ('private' #compile:in: #newCodeStream #newMethodHolder #translate:noPattern:ifFail:needSourceMap:handler:)
< 
< 	name = #Compiler
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[225]
< Arguments:
< 	textOrString = 'Tests knucleotide4'
< 	logFlag = false
< Context PC = 7
< 
< ----------------------------------------------------------------------
< Compiler class(SmalltalkCompiler class)>>evaluate:
< Receiver:
< 	a Compiler class
< Instance Variables:
< 	superclass = SmalltalkCompiler
< 	methodDict = a MethodDictionary[4]
< 	format = 16393
< 	subclasses = an Array[2]
< 	instanceVariables = nil
< 	organization = ('private' #compile:in: #newCodeStream #newMethodHolder #translate:noPattern:ifFail:needSourceMap:handler:)
< 
< 	name = #Compiler
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[225]
< Arguments:
< 	textOrString = 'Tests knucleotide4'
< Context PC = 6
< 
< ----------------------------------------------------------------------
< optimized [] in [] in ImageConfigurationSystem>>runCodeAndThenQuit:
< Receiver:
< 	an UndefinedObject
< Arguments:
< 	each = 'Tests knucleotide4'
< Temporaries:
< 	expressions = an OrderedCollection[1]
< 	result = nil
< 	.super = an ImageConfigurationSystem
< Context PC = 6
< 
< ----------------------------------------------------------------------
< OrderedCollection>>do:
< Receiver:
< 	an OrderedCollection
< Instance Variables:
< 	firstIndex = 1
< 	lastIndex = 1
< Arguments:
< 	aBlock = BlockClosure [] in [] in ImageConfigurationSystem>>runCodeAndThenQuit:
< Temporaries:
< 	index = 1
< Context PC = 17
< 
< ----------------------------------------------------------------------
< optimized [] in ImageConfigurationSystem>>runCodeAndThenQuit:
< Receiver:
< 	an UndefinedObject
< Temporaries:
< 	.argumentStream = a ReadStream
< 	expressions = an OrderedCollection[1]
< 	result = nil
< 	.super = an ImageConfigurationSystem
< Context PC = 17
< 
< ----------------------------------------------------------------------
< BlockClosure>>ensure:
< Receiver:
< 	a BlockClosure
< Instance Variables:
< 	method = CompiledBlock [] in ImageConfigurationSystem>>runCodeAndThenQuit:
< 	outerContext = nil
< 	copiedValues = an Array[3]
< Arguments:
< 	aBlock = BlockClosure [] in ImageConfigurationSystem>>runCodeAndThenQuit:
< Temporaries:
< 	result = nil
< Context PC = 4
< 
< ----------------------------------------------------------------------
< ImageConfigurationSystem>>runCodeAndThenQuit:
< Receiver:
< 	an ImageConfigurationSystem
< Instance Variables:
< 	state = #inactive
< 	canActivate = true
< 	prerequisites = a Set[2]
< Arguments:
< 	argumentStream = a ReadStream
< Temporaries:
< 	expressions = an OrderedCollection[1]
< 	result = nil
< Context PC = 20
< 
< ----------------------------------------------------------------------
< CommandLineInterest>>triggerWithTokenStream:
< Receiver:
< 	a CommandLineInterest
< Instance Variables:
< 	receiver = an ImageConfigurationSystem
< 	selector = #runCodeAndThenQuit:
< 	systemEvent = #activate
< 	sequence = 1
< 	option = '-evaluate'
< 	commandLine = an Array[7]
< Arguments:
< 	aStream = a ReadStream
< Context PC = 24
< 
< ----------------------------------------------------------------------
< CommandLineInterest>>triggerOptionAt:
< Receiver:
< 	a CommandLineInterest
< Instance Variables:
< 	receiver = an ImageConfigurationSystem
< 	selector = #runCodeAndThenQuit:
< 	systemEvent = #activate
< 	sequence = 1
< 	option = '-evaluate'
< 	commandLine = an Array[7]
< Arguments:
< 	index = 4
< Temporaries:
< 	tokenStream = a ReadStream
< Context PC = 14
< 
< ----------------------------------------------------------------------
< optimized [] in [] in Subsystem>>runActivationActions
< Receiver:
< 	an UndefinedObject
< Arguments:
< 	association = 4->a CommandLineInterest(on: #activate at: 1 send: 'an ImageConfigurationSystem runCodeAndThenQuit:')(on: #activate at: 1 for: '-evaluate' send: 'an ImageConfigurationSystem runCodeAndThenQuit:')
< Context PC = 7
< 
< ----------------------------------------------------------------------
< SortedCollection(OrderedCollection)>>do:
< Receiver:
< 	a SortedCollection
< Instance Variables:
< 	firstIndex = 1
< 	lastIndex = 1
< 	sortBlock = BlockClosure [] in [] in Subsystem>>runActivationActions
< Arguments:
< 	aBlock = BlockClosure [] in [] in Subsystem>>runActivationActions
< Temporaries:
< 	index = 1
< Context PC = 17
< 
< ----------------------------------------------------------------------
< optimized [] in Subsystem>>runActivationActions
< Receiver:
< 	an UndefinedObject
< Arguments:
< 	sequence = 1
< Temporaries:
< 	interests = an OrderedCollection[1]
< 	.optionsBySequence = a Dictionary[1]
< Context PC = 13
< 
< ----------------------------------------------------------------------
< SortedCollection(OrderedCollection)>>do:
< Receiver:
< 	a SortedCollection
< Instance Variables:
< 	firstIndex = 1
< 	lastIndex = 1
< 	sortBlock = BlockClosure [] in SortedCollection class>>initialize
< Arguments:
< 	aBlock = BlockClosure [] in Subsystem>>runActivationActions
< Temporaries:
< 	index = 1
< Context PC = 17
< 
< ----------------------------------------------------------------------
< ImageConfigurationSystem(Subsystem)>>runActivationActions
< Receiver:
< 	an ImageConfigurationSystem
< Instance Variables:
< 	state = #inactive
< 	canActivate = true
< 	prerequisites = a Set[2]
< Temporaries:
< 	optionsBySequence = a Dictionary[1]
< 	sequenceValues = a SortedCollection[1]
< Context PC = 18
< 
< ----------------------------------------------------------------------
< ImageConfigurationSystem>>runActivationActions
< Receiver:
< 	an ImageConfigurationSystem
< Instance Variables:
< 	state = #inactive
< 	canActivate = true
< 	prerequisites = a Set[2]
< Context PC = 17
< 
< ----------------------------------------------------------------------
< ImageConfigurationSystem(Subsystem)>>privateActivate
< Receiver:
< 	an ImageConfigurationSystem
< Instance Variables:
< 	state = #inactive
< 	canActivate = true
< 	prerequisites = a Set[2]
< Context PC = 21
< 
< ----------------------------------------------------------------------
< ImageConfigurationSystem class(Subsystem class)>>activate
< Receiver:
< 	an ImageConfigurationSystem class
< Instance Variables:
< 	superclass = Subsystem
< 	methodDict = a MethodDictionary[16]
< 	format = 16387
< 	subclasses = nil
< 	instanceVariables = nil
< 	organization = ('command line handling' #loadCodeFromFilein: #loadParcel: #loadParcelsFromConfigurationFile: #loadSettings: #runCode: #runCodeAndThenQuit:)
< ('private' #stdout)
< ('actions' #defaultConfigFileName)
< ('prerequisites' #prerequisiteSystems)
< ('helpers' #getOptionsFrom: #loadFromConfigFileNamed: #loadFromConfigStream: #loadSettingsFrom: #processOptions: #tokensFromStream:)
< ('private-activate/deactivate' #runActivationActions)
< 
< 	name = #ImageConfigurationSystem
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[222]
< 	current = an ImageConfigurationSystem
< 	allowParcelLoading = true
< 	allowFilein = true
< 	allowSettings = nil
< 	allowExpressions = true
< 	useDefaultConfigFile = true
< 	allowDevelopment = nil
< Context PC = 5
< 
< ----------------------------------------------------------------------
< optimized [] in Subsystem>>ensurePrerequisitesAreActive
< Receiver:
< 	an UndefinedObject
< Arguments:
< 	each = ImageConfigurationSystem
< Context PC = 3
< 
< ----------------------------------------------------------------------
< Set>>do:
< Receiver:
< 	a Set
< Instance Variables:
< 	tally = 1
< Arguments:
< 	aBlock = BlockClosure [] in Subsystem>>ensurePrerequisitesAreActive
< Temporaries:
< 	index = 3
< 	elem = ImageConfigurationSystem
< Context PC = 31
< 
< ----------------------------------------------------------------------
< RuntimeSystem(Subsystem)>>ensurePrerequisitesAreActive
< Receiver:
< 	a RuntimeSystem
< Instance Variables:
< 	state = #inactive
< 	canActivate = true
< 	prerequisites = a Set[1]
< Context PC = 7
< 
< ----------------------------------------------------------------------
< RuntimeSystem(Subsystem)>>privateActivate
< Receiver:
< 	a RuntimeSystem
< Instance Variables:
< 	state = #inactive
< 	canActivate = true
< 	prerequisites = a Set[1]
< Context PC = 15
< 
< ----------------------------------------------------------------------
< RuntimeSystem class(Subsystem class)>>activate
< Receiver:
< 	a RuntimeSystem class
< Instance Variables:
< 	superclass = Subsystem
< 	methodDict = a MethodDictionary[3]
< 	format = 16387
< 	subclasses = nil
< 	instanceVariables = nil
< 	organization = ('accessing' #isDevelopment #isRuntime)
< ('prerequisites' #prerequisiteSystems)
< 
< 	name = #RuntimeSystem
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[222]
< 	current = a RuntimeSystem
< Context PC = 5
< 
< ----------------------------------------------------------------------
< optimized [] in Subsystem>>ensurePrerequisitesAreActive
< Receiver:
< 	an UndefinedObject
< Arguments:
< 	each = RuntimeSystem
< Context PC = 3
< 
< ----------------------------------------------------------------------
< Set>>do:
< Receiver:
< 	a Set
< Instance Variables:
< 	tally = 1
< Arguments:
< 	aBlock = BlockClosure [] in Subsystem>>ensurePrerequisitesAreActive
< Temporaries:
< 	index = 3
< 	elem = RuntimeSystem
< Context PC = 31
< 
< ----------------------------------------------------------------------
< UserApplication(Subsystem)>>ensurePrerequisitesAreActive
< Receiver:
< 	an UserApplication
< Instance Variables:
< 	state = #inactive
< 	canActivate = true
< 	prerequisites = a Set[1]
< Context PC = 7
< 
< ----------------------------------------------------------------------
< UserApplication(Subsystem)>>privateActivate
< Receiver:
< 	an UserApplication
< Instance Variables:
< 	state = #inactive
< 	canActivate = true
< 	prerequisites = a Set[1]
< Context PC = 15
< 
< ----------------------------------------------------------------------
< UserApplication class(Subsystem class)>>activate
< Receiver:
< 	an UserApplication class
< Instance Variables:
< 	superclass = Subsystem
< 	methodDict = a MethodDictionary[3]
< 	format = 16387
< 	subclasses = nil
< 	instanceVariables = nil
< 	organization = ('prerequisites' #prerequisiteSystems)
< ('actions' #main #setUp)
< 
< 	name = #UserApplication
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[222]
< 	current = an UserApplication
< Context PC = 5
< 
< ----------------------------------------------------------------------
< UserApplication class(Subsystem class)>>reactToEvent:
< Receiver:
< 	an UserApplication class
< Instance Variables:
< 	superclass = Subsystem
< 	methodDict = a MethodDictionary[3]
< 	format = 16387
< 	subclasses = nil
< 	instanceVariables = nil
< 	organization = ('prerequisites' #prerequisiteSystems)
< ('actions' #main #setUp)
< 
< 	name = #UserApplication
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[222]
< 	current = an UserApplication
< Arguments:
< 	aSymbol = #returnFromSnapshot
< Context PC = 30
< 
< ----------------------------------------------------------------------
< optimized [] in Subsystem class>>signalEvent:to:
< Receiver:
< 	an UndefinedObject
< Arguments:
< 	eachClass = UserApplication
< Temporaries:
< 	.aSymbol = #returnFromSnapshot
< Context PC = 9
< 
< ----------------------------------------------------------------------
< Set>>do:
< Receiver:
< 	a Set
< Instance Variables:
< 	tally = 19
< Arguments:
< 	aBlock = BlockClosure [] in Subsystem class>>signalEvent:to:
< Temporaries:
< 	index = 8
< 	elem = UserApplication
< Context PC = 31
< 
< ----------------------------------------------------------------------
< Subsystem class>>signalEvent:to:
< Receiver:
< 	a Subsystem class
< Instance Variables:
< 	superclass = Object
< 	methodDict = a MethodDictionary[38]
< 	format = 16387
< 	subclasses = an Array[17]
< 	instanceVariables = an Array[3]
< 	organization = ('testing' #isActive #isInactive #isPaused)
< ('initialize/release' #initialize)
< ('private - pragma messages' #option: #option:sequence: #prerequisites)
< ('default actions' #pauseAction #resumeAction #setUp #tearDown)
< ('defaults' #defaultCommandLineOptionSequence)
< ('private-activate/deactivate' #changeStateToActive #changeStateToInactive #changeStateToPaused #commandLine #commandLineOptionsWithPositions #commandLineOptionsWithPositionsInCommandLine: #ensureDependentSystemsAreInactive #ensureDependentSystemsArePaused #ensurePrerequisitesAreActive #ensurePrerequisitesAreResumed #privateActivate #privateDeactivate #privateMarkInactive #privatePause #privateResume #resetPrerequisites #runActivationActions)
< ('prerequisites' #allDependentSystems #allDependentSystemsRecursively #allPrerequisiteSystems #allPrerequisiteSystemsRecursively #dependentSystems #prerequisiteSystems)
< ('private-command line' #commandLineOptions)
< ('accessing' #canActivate #canActivate:)
< 
< 	name = #Subsystem
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[222]
< 	current = a Subsystem
< Arguments:
< 	aSymbol = #returnFromSnapshot
< 	aCollection = a Set[19]
< Context PC = 8
< 
< ----------------------------------------------------------------------
< Subsystem class>>signalEvent:
< Receiver:
< 	a Subsystem class
< Instance Variables:
< 	superclass = Object
< 	methodDict = a MethodDictionary[38]
< 	format = 16387
< 	subclasses = an Array[17]
< 	instanceVariables = an Array[3]
< 	organization = ('testing' #isActive #isInactive #isPaused)
< ('initialize/release' #initialize)
< ('private - pragma messages' #option: #option:sequence: #prerequisites)
< ('default actions' #pauseAction #resumeAction #setUp #tearDown)
< ('defaults' #defaultCommandLineOptionSequence)
< ('private-activate/deactivate' #changeStateToActive #changeStateToInactive #changeStateToPaused #commandLine #commandLineOptionsWithPositions #commandLineOptionsWithPositionsInCommandLine: #ensureDependentSystemsAreInactive #ensureDependentSystemsArePaused #ensurePrerequisitesAreActive #ensurePrerequisitesAreResumed #privateActivate #privateDeactivate #privateMarkInactive #privatePause #privateResume #resetPrerequisites #runActivationActions)
< ('prerequisites' #allDependentSystems #allDependentSystemsRecursively #allPrerequisiteSystems #allPrerequisiteSystemsRecursively #dependentSystems #prerequisiteSystems)
< ('private-command line' #commandLineOptions)
< ('accessing' #canActivate #canActivate:)
< 
< 	name = #Subsystem
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[222]
< 	current = a Subsystem
< Arguments:
< 	aSymbol = #returnFromSnapshot
< Temporaries:
< 	classesToNotify = a Set[19]
< 	done = a Set[0]
< Context PC = 22
< 
< ----------------------------------------------------------------------
< Snapshot>>signalSystemEvent:
< Receiver:
< 	a Snapshot
< Instance Variables:
< 	loadPolicy = 0
< 	quitAfterwards = false
< 	imagePrefix = 'benchmarks'
< 	originalPriority = 50
< Arguments:
< 	aSymbol = #returnFromSnapshot
< Context PC = 4
< 
< ----------------------------------------------------------------------
< Snapshot>>postSnapshotBootstrap
< Receiver:
< 	a Snapshot
< Instance Variables:
< 	loadPolicy = 0
< 	quitAfterwards = false
< 	imagePrefix = 'benchmarks'
< 	originalPriority = 50
< Context PC = 16
< 
< ----------------------------------------------------------------------
< Snapshot>>privateSnapshot
< Receiver:
< 	a Snapshot
< Instance Variables:
< 	loadPolicy = 0
< 	quitAfterwards = false
< 	imagePrefix = 'benchmarks'
< 	originalPriority = 50
< Temporaries:
< 	justSnapped = false
< Context PC = 25
< 
< ----------------------------------------------------------------------
< optimized [] in [] in Snapshot>>snapshot
< Receiver:
< 	an UndefinedObject
< Temporaries:
< 	.super = a Snapshot
< Context PC = 6
< 
< ----------------------------------------------------------------------
< Cursor>>showWhile:
< Receiver:
< 	a Cursor
< Instance Variables:
< 	errorCode = 0
< 	handle = nil
< 	image = Depth1Image(extent: 16@16 depth: 1)
< 	mask = Depth1Image(extent: 16@16 depth: 1)
< 	hotSpot = 0@0
< 	name = 'wait'
< Arguments:
< 	aBlock = BlockClosure [] in [] in Snapshot>>snapshot
< Temporaries:
< 	oldcursor = Cursor wait
< Context PC = 13
< 
< ----------------------------------------------------------------------
< optimized [] in Snapshot>>snapshot
< Receiver:
< 	an UndefinedObject
< Temporaries:
< 	.super = a Snapshot
< Context PC = 16
< 
< ----------------------------------------------------------------------
< BlockClosure>>ensure:
< Receiver:
< 	a BlockClosure
< Instance Variables:
< 	method = CompiledBlock [] in Snapshot>>snapshot
< 	outerContext = nil
< 	copiedValues = a Snapshot
< Arguments:
< 	aBlock = BlockClosure [] in Snapshot class>>withSnapshot:do:
< Temporaries:
< 	result = nil
< Context PC = 4
< 
< ----------------------------------------------------------------------
< Snapshot class>>withSnapshot:do:
< Receiver:
< 	a Snapshot class
< Instance Variables:
< 	superclass = Object
< 	methodDict = a MethodDictionary[28]
< 	format = 16388
< 	subclasses = nil
< 	instanceVariables = an Array[4]
< 	organization = ('initialize/release' #initialize)
< ('accessing' #changesFilename #imageFilename #imagePrefix: #isAboutToQuit #loadPolicy #loadPolicy: #loadPolicyNormal #loadPolicyPermSave #loadPolicyPermUndo #quitAfterwards:)
< ('user interaction' #getImagePrefix #imageFilenameForUI #imagePrefixForUI #saveDialogThenQuit:)
< ('private-saving' #logSnapshot #postSnapshotBootstrap #postSnapshotStillRunning #preSnapshot #privateSnapshot #quitImage #setUpForSnapshot #tryToSnapshot #verifyWritability)
< ('signalling' #signalSystemEvent:)
< ('saving' #saveAs:thenQuit: #saveDetachedTo:thenQuit: #snapshot)
< 
< 	name = #Snapshot
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[225]
< 	current = a Snapshot
< Arguments:
< 	aSnapshot = a Snapshot
< 	aBlock = BlockClosure [] in Snapshot>>snapshot
< Context PC = 10
< 
< ----------------------------------------------------------------------
< Snapshot>>snapshot
< Receiver:
< 	a Snapshot
< Instance Variables:
< 	loadPolicy = 0
< 	quitAfterwards = false
< 	imagePrefix = 'benchmarks'
< 	originalPriority = 50
< Context PC = 13
< 
< ----------------------------------------------------------------------
< Snapshot>>saveAs:thenQuit:
< Receiver:
< 	a Snapshot
< Instance Variables:
< 	loadPolicy = 0
< 	quitAfterwards = false
< 	imagePrefix = 'benchmarks'
< 	originalPriority = 50
< Arguments:
< 	imageFilePrefix = 'benchmarks'
< 	quitIfTrue = false
< Context PC = 10
< 
< ----------------------------------------------------------------------
< Snapshot>>saveDetachedTo:thenQuit:
< Receiver:
< 	a Snapshot
< Instance Variables:
< 	loadPolicy = 0
< 	quitAfterwards = false
< 	imagePrefix = 'benchmarks'
< 	originalPriority = 50
< Arguments:
< 	imageFilePrefix = 'benchmarks'
< 	quitIfTrue = false
< Temporaries:
< 	oldImagePrefix = '/usr/local/src/vw7.6nc/preview/64-bit/visual64'
< 	snapshotResult = nil
< 	oldTarget = 2
< 	oldChangeLog = an UnixFilename('/usr/local/src/vw7.6nc/preview/64-bit/visual64.cha')
< 	oldRegisteredName = '/usr/local/src/vw7.6nc/preview/64-bit/visual64.im'
< Context PC = 26
< 
< ----------------------------------------------------------------------
< HeadlessImage>>saveHeadless:to:
< Receiver:
< 	a HeadlessImage
< Instance Variables:
< 	state = #active
< 	canActivate = true
< 	prerequisites = a Set[1]
< 	isTerminating = true
< 	startupFilename = 'headless-startup.st'
< 	transcriptFilename = 'headless-transcript.log'
< 	currentlyHeadless = false
< 	shouldSaveHeadless = false
< 	transcriptToStandardOut = false
< 	transcriptToStandardOutHeadless = true
< 	transcriptToFile = false
< 	transcriptToFileHeadless = true
< 	suspendedProcesses = nil
< 	stackDumpStream = nil
< Arguments:
< 	beHeadless = true
< 	prefix = 'benchmarks'
< Context PC = 11
< 
< ----------------------------------------------------------------------
< HeadlessImage>>saveHeadless:
< Receiver:
< 	a HeadlessImage
< Instance Variables:
< 	state = #active
< 	canActivate = true
< 	prerequisites = a Set[1]
< 	isTerminating = true
< 	startupFilename = 'headless-startup.st'
< 	transcriptFilename = 'headless-transcript.log'
< 	currentlyHeadless = false
< 	shouldSaveHeadless = false
< 	transcriptToStandardOut = false
< 	transcriptToStandardOutHeadless = true
< 	transcriptToFile = false
< 	transcriptToFileHeadless = true
< 	suspendedProcesses = nil
< 	stackDumpStream = nil
< Arguments:
< 	prefix = 'benchmarks'
< Context PC = 6
< 
< ----------------------------------------------------------------------
< UndefinedObject>>unboundMethod
< Receiver:
< 	an UndefinedObject
< Context PC = 147
< 
< ----------------------------------------------------------------------
< UndefinedObject(Object)>>performMethod:arguments:
< Receiver:
< 	an UndefinedObject
< Arguments:
< 	method = AnnotatedMethod UndefinedObject>>unboundMethod
< 	args = an Array[0]
< Context PC = 5
< 
< ----------------------------------------------------------------------
< UndefinedObject(Object)>>performMethod:
< Receiver:
< 	an UndefinedObject
< Arguments:
< 	method = AnnotatedMethod UndefinedObject>>unboundMethod
< Context PC = 5
< 
< ----------------------------------------------------------------------
< Compiler(SmalltalkCompiler)>>evaluate:in:allowReceiver:receiver:environment:notifying:ifFail:
< Receiver:
< 	a Compiler
< Instance Variables:
< 	sourceStream = a ReadStream
< 	requestor = nil
< 	class = UndefinedObject
< 	targetClass = UndefinedObject
< 	environment = a NameSpace[63]
< 	context = nil
< 	methodClass = CompiledMethod
< 	allowSelfReferences = true
< 	allowClassVariableReferences = nil
< Arguments:
< 	textOrStream = '
< ''./files/platform.vw'' asFile...chmarks''. 
< ObjectMemory quit'
< 	aContext = nil
< 	allowSelf = true
< 	receiver = nil
< 	env = a NameSpace[63]
< 	aRequestor = nil
< 	failBlock = BlockClosure [] in SmalltalkCompiler class>>evaluate:for:in:notifying:logged:
< Temporaries:
< 	method = AnnotatedMethod UndefinedObject>>unboundMethod
< Context PC = 22
< 
< ----------------------------------------------------------------------
< Compiler class(SmalltalkCompiler class)>>evaluate:for:in:notifying:logged:
< Receiver:
< 	a Compiler class
< Instance Variables:
< 	superclass = SmalltalkCompiler
< 	methodDict = a MethodDictionary[4]
< 	format = 16393
< 	subclasses = an Array[2]
< 	instanceVariables = nil
< 	organization = ('private' #compile:in: #newCodeStream #newMethodHolder #translate:noPattern:ifFail:needSourceMap:handler:)
< 
< 	name = #Compiler
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[225]
< Arguments:
< 	textOrString = '
< ''./files/platform.vw'' asFile...chmarks''. 
< ObjectMemory quit'
< 	anObject = nil
< 	aNameSpace = a NameSpace[63]
< 	aController = nil
< 	logFlag = false
< Temporaries:
< 	val = nil
< Context PC = 14
< 
< ----------------------------------------------------------------------
< Compiler class(SmalltalkCompiler class)>>evaluate:notifying:logged:
< Receiver:
< 	a Compiler class
< Instance Variables:
< 	superclass = SmalltalkCompiler
< 	methodDict = a MethodDictionary[4]
< 	format = 16393
< 	subclasses = an Array[2]
< 	instanceVariables = nil
< 	organization = ('private' #compile:in: #newCodeStream #newMethodHolder #translate:noPattern:ifFail:needSourceMap:handler:)
< 
< 	name = #Compiler
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[225]
< Arguments:
< 	textOrString = '
< ''./files/platform.vw'' asFile...chmarks''. 
< ObjectMemory quit'
< 	aController = nil
< 	logFlag = false
< Context PC = 9
< 
< ----------------------------------------------------------------------
< Compiler class(SmalltalkCompiler class)>>evaluate:logged:
< Receiver:
< 	a Compiler class
< Instance Variables:
< 	superclass = SmalltalkCompiler
< 	methodDict = a MethodDictionary[4]
< 	format = 16393
< 	subclasses = an Array[2]
< 	instanceVariables = nil
< 	organization = ('private' #compile:in: #newCodeStream #newMethodHolder #translate:noPattern:ifFail:needSourceMap:handler:)
< 
< 	name = #Compiler
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[225]
< Arguments:
< 	textOrString = '
< ''./files/platform.vw'' asFile...chmarks''. 
< ObjectMemory quit'
< 	logFlag = false
< Context PC = 7
< 
< ----------------------------------------------------------------------
< Compiler class(SmalltalkCompiler class)>>evaluate:
< Receiver:
< 	a Compiler class
< Instance Variables:
< 	superclass = SmalltalkCompiler
< 	methodDict = a MethodDictionary[4]
< 	format = 16393
< 	subclasses = an Array[2]
< 	instanceVariables = nil
< 	organization = ('private' #compile:in: #newCodeStream #newMethodHolder #translate:noPattern:ifFail:needSourceMap:handler:)
< 
< 	name = #Compiler
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[225]
< Arguments:
< 	textOrString = '
< ''./files/platform.vw'' asFile...chmarks''. 
< ObjectMemory quit'
< Context PC = 6
< 
< ----------------------------------------------------------------------
< optimized [] in ImageConfigurationSystem>>runCode:
< Receiver:
< 	an UndefinedObject
< Arguments:
< 	each = '
< ''./files/platform.vw'' asFile...chmarks''. 
< ObjectMemory quit'
< Context PC = 4
< 
< ----------------------------------------------------------------------
< OrderedCollection>>do:
< Receiver:
< 	an OrderedCollection
< Instance Variables:
< 	firstIndex = 1
< 	lastIndex = 1
< Arguments:
< 	aBlock = BlockClosure [] in ImageConfigurationSystem>>runCode:
< Temporaries:
< 	index = 1
< Context PC = 17
< 
< ----------------------------------------------------------------------
< ImageConfigurationSystem>>runCode:
< Receiver:
< 	an ImageConfigurationSystem
< Instance Variables:
< 	state = #inactive
< 	canActivate = true
< 	prerequisites = a Set[2]
< Arguments:
< 	argumentStream = a ReadStream
< Temporaries:
< 	expressions = an OrderedCollection[1]
< Context PC = 16
< 
< ----------------------------------------------------------------------
< CommandLineInterest>>triggerWithTokenStream:
< Receiver:
< 	a CommandLineInterest
< Instance Variables:
< 	receiver = an ImageConfigurationSystem
< 	selector = #runCode:
< 	systemEvent = #activate
< 	sequence = 1
< 	option = '-doit'
< 	commandLine = an Array[4]
< Arguments:
< 	aStream = a ReadStream
< Context PC = 24
< 
< ----------------------------------------------------------------------
< CommandLineInterest>>triggerOptionAt:
< Receiver:
< 	a CommandLineInterest
< Instance Variables:
< 	receiver = an ImageConfigurationSystem
< 	selector = #runCode:
< 	systemEvent = #activate
< 	sequence = 1
< 	option = '-doit'
< 	commandLine = an Array[4]
< Arguments:
< 	index = 3
< Temporaries:
< 	tokenStream = a ReadStream
< Context PC = 14
< 
< ----------------------------------------------------------------------
< optimized [] in [] in Subsystem>>runActivationActions
< Receiver:
< 	an UndefinedObject
< Arguments:
< 	association = 3->a CommandLineInterest(on: #activate at: 1 send: 'an ImageConfigurationSystem runCode:')(on: #activate at: 1 for: '-doit' send: 'an ImageConfigurationSystem runCode:')
< Context PC = 7
< 
< ----------------------------------------------------------------------
< SortedCollection(OrderedCollection)>>do:
< Receiver:
< 	a SortedCollection
< Instance Variables:
< 	firstIndex = 1
< 	lastIndex = 1
< 	sortBlock = BlockClosure [] in [] in Subsystem>>runActivationActions
< Arguments:
< 	aBlock = BlockClosure [] in [] in Subsystem>>runActivationActions
< Temporaries:
< 	index = 1
< Context PC = 17
< 
< ----------------------------------------------------------------------
< optimized [] in Subsystem>>runActivationActions
< Receiver:
< 	an UndefinedObject
< Arguments:
< 	sequence = 1
< Temporaries:
< 	interests = an OrderedCollection[1]
< 	.optionsBySequence = a Dictionary[1]
< Context PC = 13
< 
< ----------------------------------------------------------------------
< SortedCollection(OrderedCollection)>>do:
< Receiver:
< 	a SortedCollection
< Instance Variables:
< 	firstIndex = 1
< 	lastIndex = 1
< 	sortBlock = BlockClosure [] in SortedCollection class>>initialize
< Arguments:
< 	aBlock = BlockClosure [] in Subsystem>>runActivationActions
< Temporaries:
< 	index = 1
< Context PC = 17
< 
< ----------------------------------------------------------------------
< ImageConfigurationSystem(Subsystem)>>runActivationActions
< Receiver:
< 	an ImageConfigurationSystem
< Instance Variables:
< 	state = #inactive
< 	canActivate = true
< 	prerequisites = a Set[2]
< Temporaries:
< 	optionsBySequence = a Dictionary[1]
< 	sequenceValues = a SortedCollection[1]
< Context PC = 18
< 
< ----------------------------------------------------------------------
< ImageConfigurationSystem>>runActivationActions
< Receiver:
< 	an ImageConfigurationSystem
< Instance Variables:
< 	state = #inactive
< 	canActivate = true
< 	prerequisites = a Set[2]
< Context PC = 17
< 
< ----------------------------------------------------------------------
< ImageConfigurationSystem(Subsystem)>>privateActivate
< Receiver:
< 	an ImageConfigurationSystem
< Instance Variables:
< 	state = #inactive
< 	canActivate = true
< 	prerequisites = a Set[2]
< Context PC = 21
< 
< ----------------------------------------------------------------------
< ImageConfigurationSystem class(Subsystem class)>>activate
< Receiver:
< 	an ImageConfigurationSystem class
< Instance Variables:
< 	superclass = Subsystem
< 	methodDict = a MethodDictionary[16]
< 	format = 16387
< 	subclasses = nil
< 	instanceVariables = nil
< 	organization = ('command line handling' #loadCodeFromFilein: #loadParcel: #loadParcelsFromConfigurationFile: #loadSettings: #runCode: #runCodeAndThenQuit:)
< ('private' #stdout)
< ('actions' #defaultConfigFileName)
< ('prerequisites' #prerequisiteSystems)
< ('helpers' #getOptionsFrom: #loadFromConfigFileNamed: #loadFromConfigStream: #loadSettingsFrom: #processOptions: #tokensFromStream:)
< ('private-activate/deactivate' #runActivationActions)
< 
< 	name = #ImageConfigurationSystem
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[222]
< 	current = an ImageConfigurationSystem
< 	allowParcelLoading = true
< 	allowFilein = true
< 	allowSettings = nil
< 	allowExpressions = true
< 	useDefaultConfigFile = true
< 	allowDevelopment = nil
< Context PC = 5
< 
< ----------------------------------------------------------------------
< optimized [] in Subsystem>>ensurePrerequisitesAreActive
< Receiver:
< 	an UndefinedObject
< Arguments:
< 	each = ImageConfigurationSystem
< Context PC = 3
< 
< ----------------------------------------------------------------------
< Set>>do:
< Receiver:
< 	a Set
< Instance Variables:
< 	tally = 1
< Arguments:
< 	aBlock = BlockClosure [] in Subsystem>>ensurePrerequisitesAreActive
< Temporaries:
< 	index = 3
< 	elem = ImageConfigurationSystem
< Context PC = 31
< 
< ----------------------------------------------------------------------
< RuntimeSystem(Subsystem)>>ensurePrerequisitesAreActive
< Receiver:
< 	a RuntimeSystem
< Instance Variables:
< 	state = #inactive
< 	canActivate = true
< 	prerequisites = a Set[1]
< Context PC = 7
< 
< ----------------------------------------------------------------------
< RuntimeSystem(Subsystem)>>privateActivate
< Receiver:
< 	a RuntimeSystem
< Instance Variables:
< 	state = #inactive
< 	canActivate = true
< 	prerequisites = a Set[1]
< Context PC = 15
< 
< ----------------------------------------------------------------------
< RuntimeSystem class(Subsystem class)>>activate
< Receiver:
< 	a RuntimeSystem class
< Instance Variables:
< 	superclass = Subsystem
< 	methodDict = a MethodDictionary[3]
< 	format = 16387
< 	subclasses = nil
< 	instanceVariables = nil
< 	organization = ('accessing' #isDevelopment #isRuntime)
< ('prerequisites' #prerequisiteSystems)
< 
< 	name = #RuntimeSystem
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[222]
< 	current = a RuntimeSystem
< Context PC = 5
< 
< ----------------------------------------------------------------------
< optimized [] in Subsystem>>ensurePrerequisitesAreActive
< Receiver:
< 	an UndefinedObject
< Arguments:
< 	each = RuntimeSystem
< Context PC = 3
< 
< ----------------------------------------------------------------------
< Set>>do:
< Receiver:
< 	a Set
< Instance Variables:
< 	tally = 1
< Arguments:
< 	aBlock = BlockClosure [] in Subsystem>>ensurePrerequisitesAreActive
< Temporaries:
< 	index = 3
< 	elem = RuntimeSystem
< Context PC = 31
< 
< ----------------------------------------------------------------------
< UserApplication(Subsystem)>>ensurePrerequisitesAreActive
< Receiver:
< 	an UserApplication
< Instance Variables:
< 	state = #inactive
< 	canActivate = true
< 	prerequisites = a Set[1]
< Context PC = 7
< 
< ----------------------------------------------------------------------
< UserApplication(Subsystem)>>privateActivate
< Receiver:
< 	an UserApplication
< Instance Variables:
< 	state = #inactive
< 	canActivate = true
< 	prerequisites = a Set[1]
< Context PC = 15
< 
< ----------------------------------------------------------------------
< UserApplication class(Subsystem class)>>activate
< Receiver:
< 	an UserApplication class
< Instance Variables:
< 	superclass = Subsystem
< 	methodDict = a MethodDictionary[3]
< 	format = 16387
< 	subclasses = nil
< 	instanceVariables = nil
< 	organization = ('prerequisites' #prerequisiteSystems)
< ('actions' #main #setUp)
< 
< 	name = #UserApplication
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[222]
< 	current = an UserApplication
< Context PC = 5
< 
< ----------------------------------------------------------------------
< UserApplication class(Subsystem class)>>reactToEvent:
< Receiver:
< 	an UserApplication class
< Instance Variables:
< 	superclass = Subsystem
< 	methodDict = a MethodDictionary[3]
< 	format = 16387
< 	subclasses = nil
< 	instanceVariables = nil
< 	organization = ('prerequisites' #prerequisiteSystems)
< ('actions' #main #setUp)
< 
< 	name = #UserApplication
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[222]
< 	current = an UserApplication
< Arguments:
< 	aSymbol = #returnFromSnapshot
< Context PC = 30
< 
< ----------------------------------------------------------------------
< optimized [] in Subsystem class>>signalEvent:to:
< Receiver:
< 	an UndefinedObject
< Arguments:
< 	eachClass = UserApplication
< Temporaries:
< 	.aSymbol = #returnFromSnapshot
< Context PC = 9
< 
< ----------------------------------------------------------------------
< Set>>do:
< Receiver:
< 	a Set
< Instance Variables:
< 	tally = 19
< Arguments:
< 	aBlock = BlockClosure [] in Subsystem class>>signalEvent:to:
< Temporaries:
< 	index = 8
< 	elem = UserApplication
< Context PC = 31
< 
< ----------------------------------------------------------------------
< Subsystem class>>signalEvent:to:
< Receiver:
< 	a Subsystem class
< Instance Variables:
< 	superclass = Object
< 	methodDict = a MethodDictionary[38]
< 	format = 16387
< 	subclasses = an Array[17]
< 	instanceVariables = an Array[3]
< 	organization = ('testing' #isActive #isInactive #isPaused)
< ('initialize/release' #initialize)
< ('private - pragma messages' #option: #option:sequence: #prerequisites)
< ('default actions' #pauseAction #resumeAction #setUp #tearDown)
< ('defaults' #defaultCommandLineOptionSequence)
< ('private-activate/deactivate' #changeStateToActive #changeStateToInactive #changeStateToPaused #commandLine #commandLineOptionsWithPositions #commandLineOptionsWithPositionsInCommandLine: #ensureDependentSystemsAreInactive #ensureDependentSystemsArePaused #ensurePrerequisitesAreActive #ensurePrerequisitesAreResumed #privateActivate #privateDeactivate #privateMarkInactive #privatePause #privateResume #resetPrerequisites #runActivationActions)
< ('prerequisites' #allDependentSystems #allDependentSystemsRecursively #allPrerequisiteSystems #allPrerequisiteSystemsRecursively #dependentSystems #prerequisiteSystems)
< ('private-command line' #commandLineOptions)
< ('accessing' #canActivate #canActivate:)
< 
< 	name = #Subsystem
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[222]
< 	current = a Subsystem
< Arguments:
< 	aSymbol = #returnFromSnapshot
< 	aCollection = a Set[19]
< Context PC = 8
< 
< ----------------------------------------------------------------------
< Subsystem class>>signalEvent:
< Receiver:
< 	a Subsystem class
< Instance Variables:
< 	superclass = Object
< 	methodDict = a MethodDictionary[38]
< 	format = 16387
< 	subclasses = an Array[17]
< 	instanceVariables = an Array[3]
< 	organization = ('testing' #isActive #isInactive #isPaused)
< ('initialize/release' #initialize)
< ('private - pragma messages' #option: #option:sequence: #prerequisites)
< ('default actions' #pauseAction #resumeAction #setUp #tearDown)
< ('defaults' #defaultCommandLineOptionSequence)
< ('private-activate/deactivate' #changeStateToActive #changeStateToInactive #changeStateToPaused #commandLine #commandLineOptionsWithPositions #commandLineOptionsWithPositionsInCommandLine: #ensureDependentSystemsAreInactive #ensureDependentSystemsArePaused #ensurePrerequisitesAreActive #ensurePrerequisitesAreResumed #privateActivate #privateDeactivate #privateMarkInactive #privatePause #privateResume #resetPrerequisites #runActivationActions)
< ('prerequisites' #allDependentSystems #allDependentSystemsRecursively #allPrerequisiteSystems #allPrerequisiteSystemsRecursively #dependentSystems #prerequisiteSystems)
< ('private-command line' #commandLineOptions)
< ('accessing' #canActivate #canActivate:)
< 
< 	name = #Subsystem
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[222]
< 	current = a Subsystem
< Arguments:
< 	aSymbol = #returnFromSnapshot
< Temporaries:
< 	classesToNotify = a Set[19]
< 	done = a Set[0]
< Context PC = 22
< 
< ----------------------------------------------------------------------
< Snapshot>>signalSystemEvent:
< Receiver:
< 	a Snapshot
< Instance Variables:
< 	loadPolicy = 0
< 	quitAfterwards = true
< 	imagePrefix = 'visual64'
< 	originalPriority = 50
< Arguments:
< 	aSymbol = #returnFromSnapshot
< Context PC = 4
< 
< ----------------------------------------------------------------------
< Snapshot>>postSnapshotBootstrap
< Receiver:
< 	a Snapshot
< Instance Variables:
< 	loadPolicy = 0
< 	quitAfterwards = true
< 	imagePrefix = 'visual64'
< 	originalPriority = 50
< Context PC = 16
< 
< ----------------------------------------------------------------------
< Snapshot>>privateSnapshot
< Receiver:
< 	a Snapshot
< Instance Variables:
< 	loadPolicy = 0
< 	quitAfterwards = true
< 	imagePrefix = 'visual64'
< 	originalPriority = 50
< Temporaries:
< 	justSnapped = false
< Context PC = 25
< 
< ----------------------------------------------------------------------
< optimized [] in [] in Snapshot>>snapshot
< Receiver:
< 	an UndefinedObject
< Temporaries:
< 	.super = a Snapshot
< Context PC = 6
< 
< ----------------------------------------------------------------------
< BlockClosure>>ensure:
< Receiver:
< 	a BlockClosure
< Instance Variables:
< 	method = CompiledBlock [] in [] in Snapshot>>snapshot
< 	outerContext = nil
< 	copiedValues = a Snapshot
< Arguments:
< 	aBlock = BlockClosure [] in Cursor>>showWhile:
< Temporaries:
< 	result = nil
< Context PC = 4
< 
< ----------------------------------------------------------------------
< Cursor>>showWhile:
< Receiver:
< 	a Cursor
< Instance Variables:
< 	errorCode = 0
< 	handle = nil
< 	image = Depth1Image(extent: 16@16 depth: 1)
< 	mask = Depth1Image(extent: 16@16 depth: 1)
< 	hotSpot = 0@0
< 	name = 'wait'
< Arguments:
< 	aBlock = BlockClosure [] in [] in Snapshot>>snapshot
< Temporaries:
< 	oldcursor = Cursor normal
< Context PC = 23
< 
< ----------------------------------------------------------------------
< optimized [] in Snapshot>>snapshot
< Receiver:
< 	an UndefinedObject
< Temporaries:
< 	.super = a Snapshot
< Context PC = 16
< 
< ----------------------------------------------------------------------
< BlockClosure>>ensure:
< Receiver:
< 	a BlockClosure
< Instance Variables:
< 	method = CompiledBlock [] in Snapshot>>snapshot
< 	outerContext = nil
< 	copiedValues = a Snapshot
< Arguments:
< 	aBlock = BlockClosure [] in Snapshot class>>withSnapshot:do:
< Temporaries:
< 	result = nil
< Context PC = 4
< 
< ----------------------------------------------------------------------
< Snapshot class>>withSnapshot:do:
< Receiver:
< 	a Snapshot class
< Instance Variables:
< 	superclass = Object
< 	methodDict = a MethodDictionary[28]
< 	format = 16388
< 	subclasses = nil
< 	instanceVariables = an Array[4]
< 	organization = ('initialize/release' #initialize)
< ('accessing' #changesFilename #imageFilename #imagePrefix: #isAboutToQuit #loadPolicy #loadPolicy: #loadPolicyNormal #loadPolicyPermSave #loadPolicyPermUndo #quitAfterwards:)
< ('user interaction' #getImagePrefix #imageFilenameForUI #imagePrefixForUI #saveDialogThenQuit:)
< ('private-saving' #logSnapshot #postSnapshotBootstrap #postSnapshotStillRunning #preSnapshot #privateSnapshot #quitImage #setUpForSnapshot #tryToSnapshot #verifyWritability)
< ('signalling' #signalSystemEvent:)
< ('saving' #saveAs:thenQuit: #saveDetachedTo:thenQuit: #snapshot)
< 
< 	name = #Snapshot
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[225]
< 	current = a Snapshot
< Arguments:
< 	aSnapshot = a Snapshot
< 	aBlock = BlockClosure [] in Snapshot>>snapshot
< Context PC = 10
< 
< ----------------------------------------------------------------------
< Snapshot>>snapshot
< Receiver:
< 	a Snapshot
< Instance Variables:
< 	loadPolicy = 0
< 	quitAfterwards = true
< 	imagePrefix = 'visual64'
< 	originalPriority = 50
< Context PC = 13
< 
< ----------------------------------------------------------------------
< Snapshot>>saveAs:thenQuit:
< Receiver:
< 	a Snapshot
< Instance Variables:
< 	loadPolicy = 0
< 	quitAfterwards = true
< 	imagePrefix = 'visual64'
< 	originalPriority = 50
< Arguments:
< 	imageFilePrefix = 'visual64'
< 	quitIfTrue = true
< Context PC = 10
< 
< ----------------------------------------------------------------------
< optimized [] in UndefinedObject>>unboundMethod
< Receiver:
< 	an UndefinedObject
< Temporaries:
< 	.t1 = a Snapshot
< Context PC = 7
< 
< ----------------------------------------------------------------------
< BlockClosure>>on:do:
< Receiver:
< 	a BlockClosure
< Instance Variables:
< 	method = CompiledBlock [] in UndefinedObject>>unboundMethod
< 	outerContext = nil
< 	copiedValues = a Snapshot
< Arguments:
< 	anExceptionSelector = TerminateException
< 	handlerBlock = BlockClosure [] in [] in Process class>>forBlock:priority:
< Context PC = 18
< 
< ----------------------------------------------------------------------
< optimized [] in Process class>>forBlock:priority:
< Receiver:
< 	an UndefinedObject
< Temporaries:
< 	.aBlock = BlockClosure [] in UndefinedObject>>unboundMethod
< Context PC = 9
---
> 893	GGTATTTTAATTTATAGT

(TRUNCATED) PROGRAM OUTPUT:
A 30.295
T 30.151
C 19.800
G 19.754

AA 9.177
TA 9.132
AT 9.131
TT 9.091
CA 6.002
AC 6.001
AG 5.987
GA 5.984
CT 5.971
TC 5.971
GT 5.957
TG 5.956
CC 3.917
GC 3.911
CG 3.909
GG 3.902

1471758	GGT
446535	GGTA
47336	GGTATT
893	GGTATTTTAATT
Unhandled exception: No space available to allocate this object

----------------------------------------------------------------------
Dictionary class(Behavior)>>newNoRetry:
Receiver:
	a Dictionary class
Instance Variables:
	superclass = Set
	methodDict = a MethodDictionary[65]
	format = 20481
	subclasses = an Array[4]
	instanceVariables = nil
	organization = ('accessing' #associationAt: #associationAt:ifAbsent: #associations #at: #at:ifAbsent: #at:ifAbsentPut: #at:ifPresent: #at:put: #bindingFor: #bindingFor:modifiers: #createKey:value: #findElementLike:ifAbsent: #keyAtValue: #keyAtValue:ifAbsent: #keys #localBindingFor: #localBindingNames #localBindings #oldBindingFor: #poolDefinitionClass #protectedBindingFor:modifiers: #values)
('testing' #includes: #isLikeNameSpace #occurrencesOf:)
('adding' #add: #declare:from:)
('removing' #remove: #remove:ifAbsent:)
('enumerating' #collect: #do: #keysAndValuesDo: #select:)
('printing' #printOn: #storeOn:)
('dictionary testing' #contentsEquals: #includesKey:)
('dictionary removing' #removeKey: #removeKey:ifAbsent:)
('dictionary enumerating' #associationsDo: #bindingsDo: #keysDo: #localNamesAndBindingsDo: #namesAndBindingsDo: #namesAndBindingsDo:modifiers: #protectedNamesAndBindingsDo:modifiers:)
('user interface' #inspectorClass #inspectorClasses)
('tracing' #traceWalkFrom:)
('binary storage' #readGeneralStructureOn: #storeGeneralStructureOn:)
('copying' #copyWithCopiedValues #postCopy #postCopyWithCopiedValues)
('private' #changeCapacityTo: #findKey:ifAbsent: #findKey:ifAbsentRaise: #findKeyOrNil: #fixCollisionsFrom: #keyNotFoundErrorFor:index: #noCheckAdd: #removeKeyPrivately: #valueNotFoundError:)
('private-backward compatibility' #keyNotFoundError:)
('computer language shootout' #at:putValueOf:ifAbsentPutValueOf:)

	name = #Dictionary
	classPool = a NameSpaceOfClass[0]
	environment = a NameSpace[222]
Arguments:
	anInteger = 187904819
Context PC = 15

----------------------------------------------------------------------
Dictionary class(Behavior)>>handleFailedNew:size:
Receiver:
	a Dictionary class
Instance Variables:
	superclass = Set
	methodDict = a MethodDictionary[65]
	format = 20481
	subclasses = an Array[4]
	instanceVariables = nil
	organization = ('accessing' #associationAt: #associationAt:ifAbsent: #associations #at: #at:ifAbsent: #at:ifAbsentPut: #at:ifPresent: #at:put: #bindingFor: #bindingFor:modifiers: #createKey:value: #findElementLike:ifAbsent: #keyAtValue: #keyAtValue:ifAbsent: #keys #localBindingFor: #localBindingNames #localBindings #oldBindingFor: #poolDefinitionClass #protectedBindingFor:modifiers: #values)
('testing' #includes: #isLikeNameSpace #occurrencesOf:)
('adding' #add: #declare:from:)
('removing' #remove: #remove:ifAbsent:)
('enumerating' #collect: #do: #keysAndValuesDo: #select:)
('printing' #printOn: #storeOn:)
('dictionary testing' #contentsEquals: #includesKey:)
('dictionary removing' #removeKey: #removeKey:ifAbsent:)
('dictionary enumerating' #associationsDo: #bindingsDo: #keysDo: #localNamesAndBindingsDo: #namesAndBindingsDo: #namesAndBindingsDo:modifiers: #protectedNamesAndBindingsDo:modifiers:)
('user interface' #inspectorClass #inspectorClasses)
('tracing' #traceWalkFrom:)
('binary storage' #readGeneralStructureOn: #storeGeneralStructureOn:)
('copying' #copyWithCopiedValues #postCopy #postCopyWithCopiedValues)
('private' #changeCapacityTo: #findKey:ifAbsent: #findKey:ifAbsentRaise: #findKeyOrNil: #fixCollisionsFrom: #keyNotFoundErrorFor:index: #noCheckAdd: #removeKeyPrivately: #valueNotFoundError:)
('private-backward compatibility' #keyNotFoundError:)
('computer language shootout' #at:putValueOf:ifAbsentPutValueOf:)

	name = #Dictionary
	classPool = a NameSpaceOfClass[0]
	environment = a NameSpace[222]
Arguments:
	error = a SystemError(#'allocation failed',1503238560)
	newSize = 187904819
Context PC = 29

----------------------------------------------------------------------
Dictionary class(Behavior)>>new:
Receiver:
	a Dictionary class
Instance Variables:
	superclass = Set
	methodDict = a MethodDictionary[65]
	format = 20481
	subclasses = an Array[4]
	instanceVariables = nil
	organization = ('accessing' #associationAt: #associationAt:ifAbsent: #associations #at: #at:ifAbsent: #at:ifAbsentPut: #at:ifPresent: #at:put: #bindingFor: #bindingFor:modifiers: #createKey:value: #findElementLike:ifAbsent: #keyAtValue: #keyAtValue:ifAbsent: #keys #localBindingFor: #localBindingNames #localBindings #oldBindingFor: #poolDefinitionClass #protectedBindingFor:modifiers: #values)
('testing' #includes: #isLikeNameSpace #occurrencesOf:)
('adding' #add: #declare:from:)
('removing' #remove: #remove:ifAbsent:)
('enumerating' #collect: #do: #keysAndValuesDo: #select:)
('printing' #printOn: #storeOn:)
('dictionary testing' #contentsEquals: #includesKey:)
('dictionary removing' #removeKey: #removeKey:ifAbsent:)
('dictionary enumerating' #associationsDo: #bindingsDo: #keysDo: #localNamesAndBindingsDo: #namesAndBindingsDo: #namesAndBindingsDo:modifiers: #protectedNamesAndBindingsDo:modifiers:)
('user interface' #inspectorClass #inspectorClasses)
('tracing' #traceWalkFrom:)
('binary storage' #readGeneralStructureOn: #storeGeneralStructureOn:)
('copying' #copyWithCopiedValues #postCopy #postCopyWithCopiedValues)
('private' #changeCapacityTo: #findKey:ifAbsent: #findKey:ifAbsentRaise: #findKeyOrNil: #fixCollisionsFrom: #keyNotFoundErrorFor:index: #noCheckAdd: #removeKeyPrivately: #valueNotFoundError:)
('private-backward compatibility' #keyNotFoundError:)
('computer language shootout' #at:putValueOf:ifAbsentPutValueOf:)

	name = #Dictionary
	classPool = a NameSpaceOfClass[0]
	environment = a NameSpace[222]
Arguments:
	anInteger = 187904819
Temporaries:
	error = a SystemError(#'allocation failed',1503238560)
Context PC = 11

----------------------------------------------------------------------
Dictionary class(Set class)>>new:
Receiver:
	a Dictionary class
Instance Variables:
	superclass = Set
	methodDict = a MethodDictionary[65]
	format = 20481
	subclasses = an Array[4]
	instanceVariables = nil
	organization = ('accessing' #associationAt: #associationAt:ifAbsent: #associations #at: #at:ifAbsent: #at:ifAbsentPut: #at:ifPresent: #at:put: #bindingFor: #bindingFor:modifiers: #createKey:value: #findElementLike:ifAbsent: #keyAtValue: #keyAtValue:ifAbsent: #keys #localBindingFor: #localBindingNames #localBindings #oldBindingFor: #poolDefinitionClass #protectedBindingFor:modifiers: #values)
('testing' #includes: #isLikeNameSpace #occurrencesOf:)
('adding' #add: #declare:from:)
('removing' #remove: #remove:ifAbsent:)
('enumerating' #collect: #do: #keysAndValuesDo: #select:)
('printing' #printOn: #storeOn:)
('dictionary testing' #contentsEquals: #includesKey:)
('dictionary removing' #removeKey: #removeKey:ifAbsent:)
('dictionary enumerating' #associationsDo: #bindingsDo: #keysDo: #localNamesAndBindingsDo: #namesAndBindingsDo: #namesAndBindingsDo:modifiers: #protectedNamesAndBindingsDo:modifiers:)
('user interface' #inspectorClass #inspectorClasses)
('tracing' #traceWalkFrom:)
('binary storage' #readGeneralStructureOn: #storeGeneralStructureOn:)
('copying' #copyWithCopiedValues #postCopy #postCopyWithCopiedValues)
('private' #changeCapacityTo: #findKey:ifAbsent: #findKey:ifAbsentRaise: #findKeyOrNil: #fixCollisionsFrom: #keyNotFoundErrorFor:index: #noCheckAdd: #removeKeyPrivately: #valueNotFoundError:)
('private-backward compatibility' #keyNotFoundError:)
('computer language shootout' #at:putValueOf:ifAbsentPutValueOf:)

	name = #Dictionary
	classPool = a NameSpaceOfClass[0]
	environment = a NameSpace[222]
Arguments:
	anInteger = 187500000
Context PC = 21

----------------------------------------------------------------------
optimized [] in Tests class>>knucleotide4From:to:
Receiver:
	an UndefinedObject
Arguments:
	nucleotideFragment = 'GGTATTTTAATTTATAGT'
Temporaries:
	frequencies = nil
	count = nil
	.sequence = 'CCCATAACTACAATAGTCGGCAATCTTTT...CTTGTTTGATTCCCCTGTATCTTAATTC'
	.output = a StandardIOStream
Context PC = 23

----------------------------------------------------------------------
Tests class>>knucleotide4From:to:
Receiver:
	a Tests class
Instance Variables:
	superclass = Object
	methodDict = a MethodDictionary[0]
	format = 16384
	subclasses = nil
	instanceVariables = nil
	organization = 
	name = #Tests
	classPool = a NameSpaceOfClass[0]
	environment = nil
Arguments:
	input = an ExternalReadStream
	output = a StandardIOStream
Temporaries:
	sequence = 'CCCATAACTACAATAGTCGGCAATCTTTT...CTTGTTTGATTCCCCTGTATCTTAATTC'
	writeFrequencies = BlockClosure [] in Tests class>>knucleotide4From:to:
	writeCount = BlockClosure [] in Tests class>>knucleotide4From:to:
	maxDictionarySize = 80000000
Context PC = 88

----------------------------------------------------------------------
Tests class>>knucleotide4
Receiver:
	a Tests class
Instance Variables:
	superclass = Object
	methodDict = a MethodDictionary[0]
	format = 16384
	subclasses = nil
	instanceVariables = nil
	organization = 
	name = #Tests
	classPool = a NameSpaceOfClass[0]
	environment = nil
Context PC = 10

----------------------------------------------------------------------
UndefinedObject>>unboundMethod
Receiver:
	an UndefinedObject
Context PC = 3

----------------------------------------------------------------------
UndefinedObject(Object)>>performMethod:arguments:
Receiver:
	an UndefinedObject
Arguments:
	method = AnnotatedMethod UndefinedObject>>unboundMethod
	args = an Array[0]
Context PC = 5

----------------------------------------------------------------------
UndefinedObject(Object)>>performMethod:
Receiver:
	an UndefinedObject
Arguments:
	method = AnnotatedMethod UndefinedObject>>unboundMethod
Context PC = 5

----------------------------------------------------------------------
Compiler(SmalltalkCompiler)>>evaluate:in:allowReceiver:receiver:environment:notifying:ifFail:
Receiver:
	a Compiler
Instance Variables:
	sourceStream = a ReadStream
	requestor = nil
	class = UndefinedObject
	targetClass = Undefi