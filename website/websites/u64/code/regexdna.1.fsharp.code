<span class="hl sym">///</span> <span class="hl kwd">The Computer Language Benchmarks Game</span>
<span class="hl sym">///</span> http<span class="hl sym">://</span>shootout<span class="hl sym">.</span>alioth<span class="hl sym">.</span>debian<span class="hl sym">.</span>org<span class="hl sym">/</span>
<span class="hl sym">///</span>
<span class="hl sym">///</span> contributed by <span class="hl kwd">Cesar Mendoza</span>
#light

<span class="hl kwa">open</span> <span class="hl kwd">System</span>
<span class="hl kwa">open</span> <span class="hl kwc">System</span><span class="hl sym">.</span><span class="hl kwd">Text</span>
<span class="hl kwa">open</span> <span class="hl kwc">System</span><span class="hl sym">.</span><span class="hl kwc">Text</span><span class="hl sym">.</span><span class="hl kwd">RegularExpressions</span>

<span class="hl kwa">let</span> data <span class="hl sym">=</span> <span class="hl kwc">Console</span><span class="hl sym">.</span><span class="hl kwc">In</span><span class="hl sym">.</span><span class="hl kwd">ReadToEnd</span><span class="hl sym">()</span>
<span class="hl kwa">let</span> initialLength  <span class="hl sym">=</span> data<span class="hl sym">.</span><span class="hl kwd">Length</span>


<span class="hl kwa">let</span> buffer <span class="hl sym">=</span>
    <span class="hl kwa">let</span> sb <span class="hl sym">=</span> data<span class="hl sym">.</span><span class="hl kwd">Split</span><span class="hl sym">([|</span>'\n'<span class="hl sym">|]) |&gt;</span> <span class="hl kwc">Seq</span><span class="hl sym">.</span>filter<span class="hl sym">(</span><span class="hl kwa">fun</span> line <span class="hl sym">-&gt;</span> line<span class="hl sym">.</span><span class="hl kwd">StartsWith</span><span class="hl sym">(</span><span class="hl str">&quot;&gt;&quot;</span><span class="hl sym">) |&gt;</span> not<span class="hl sym">)</span>
                <span class="hl sym">|&gt;</span> <span class="hl kwc">Seq</span><span class="hl sym">.</span>fold<span class="hl sym">(</span><span class="hl kwa">fun</span> <span class="hl sym">(</span>sb<span class="hl sym">:</span> <span class="hl kwd">StringBuilder</span><span class="hl sym">)</span> line <span class="hl sym">-&gt;</span> sb<span class="hl sym">.</span><span class="hl kwd">Append</span><span class="hl sym">(</span>line<span class="hl sym">)) (</span><span class="hl kwa">new</span> <span class="hl kwd">StringBuilder</span><span class="hl sym">(</span>initialLength<span class="hl sym">))</span>
    sb<span class="hl sym">.</span><span class="hl kwd">ToString</span><span class="hl sym">()</span>

<span class="hl kwa">let</span> codeLength <span class="hl sym">=</span> buffer<span class="hl sym">.</span><span class="hl kwd">Length</span>

<span class="hl kwa">let</span> variants <span class="hl sym">= [</span> <span class="hl str">&quot;agggtaaa|tttaccct&quot;</span><span class="hl sym">;</span>
                 <span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="hl sym">;</span>
                 <span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="hl sym">;</span>
                 <span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="hl sym">;</span>
                 <span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="hl sym">;</span>
                 <span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="hl sym">;</span>
                 <span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="hl sym">;</span>
                 <span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="hl sym">;</span>
                 <span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span> <span class="hl sym">]</span>


<span class="hl kwa">let</span> map_parallel f items <span class="hl sym">=</span>
    seq <span class="hl sym">{</span> <span class="hl kwa">for</span> i <span class="hl kwa">in</span> items <span class="hl sym">-&gt;</span> async <span class="hl sym">{</span> return <span class="hl sym">(</span>f i<span class="hl sym">) } } |&gt;</span> <span class="hl kwc">Async</span><span class="hl sym">.</span><span class="hl kwd">Parallel</span> <span class="hl sym">|&gt;</span> <span class="hl kwc">Async</span><span class="hl sym">.</span><span class="hl kwd">Run</span>

<span class="hl kwa">let</span> processVariant <span class="hl sym">(</span>var<span class="hl sym">:</span> <span class="hl kwb">string</span><span class="hl sym">) =</span>
    <span class="hl kwa">let</span> count <span class="hl sym">=</span> var<span class="hl sym">.</span><span class="hl kwd">Split</span><span class="hl sym">([|</span>'<span class="hl sym">|</span>'<span class="hl sym">|]) |&gt;</span> map_parallel<span class="hl sym">(</span><span class="hl kwa">fun</span> var <span class="hl sym">-&gt;</span>
        <span class="hl kwa">let</span> re <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Regex</span><span class="hl sym">(</span>var<span class="hl sym">)</span>
        <span class="hl kwa">let</span> matches <span class="hl sym">=</span> re<span class="hl sym">.</span><span class="hl kwd">Matches</span><span class="hl sym">(</span>buffer<span class="hl sym">)</span> <span class="hl kwa">in</span> matches<span class="hl sym">.</span><span class="hl kwd">Count</span><span class="hl sym">) |&gt;</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>sum
    <span class="hl sym">(</span>var<span class="hl sym">,</span> count<span class="hl sym">)</span>

<span class="hl kwa">let</span> results <span class="hl sym">=</span> variants <span class="hl sym">|&gt;</span> map_parallel processVariant

<span class="hl kwa">let</span> map <span class="hl sym">=</span> <span class="hl kwc">Map</span><span class="hl sym">.</span>of_list <span class="hl sym">[ (</span><span class="hl kwb">'W'</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|t)&quot;</span><span class="hl sym">);</span>
            <span class="hl sym">(</span><span class="hl kwb">'Y'</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|t)&quot;</span><span class="hl sym">);</span>
            <span class="hl sym">(</span><span class="hl kwb">'K'</span><span class="hl sym">,</span> <span class="hl str">&quot;(g|t)&quot;</span><span class="hl sym">);</span>
            <span class="hl sym">(</span><span class="hl kwb">'M'</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c)&quot;</span><span class="hl sym">);</span>
            <span class="hl sym">(</span><span class="hl kwb">'S'</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|g)&quot;</span><span class="hl sym">);</span>
            <span class="hl sym">(</span><span class="hl kwb">'R'</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|g)&quot;</span><span class="hl sym">);</span>
            <span class="hl sym">(</span><span class="hl kwb">'B'</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl sym">);</span>
            <span class="hl sym">(</span><span class="hl kwb">'D'</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl sym">);</span>
            <span class="hl sym">(</span><span class="hl kwb">'V'</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl sym">);</span>
            <span class="hl sym">(</span><span class="hl kwb">'H'</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl sym">);</span>
            <span class="hl sym">(</span><span class="hl kwb">'N'</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl sym">) ]</span>

<span class="hl kwa">let</span> sequence <span class="hl sym">=</span>
    seq <span class="hl sym">{</span>
        <span class="hl kwa">for</span> ch <span class="hl kwa">in</span> buffer <span class="hl kwa">do</span>
            <span class="hl kwa">match</span> map<span class="hl sym">.</span><span class="hl kwd">TryFind</span><span class="hl sym">(</span>ch<span class="hl sym">)</span> <span class="hl kwa">with</span>
                <span class="hl sym">|</span> <span class="hl kwd">None</span> <span class="hl sym">-&gt;</span> yield ch
                <span class="hl sym">|</span> <span class="hl kwd">Some</span> str <span class="hl sym">-&gt;</span> yield<span class="hl sym">!</span> str
    <span class="hl sym">}</span>
<span class="hl kwa">let</span> sequenceLength <span class="hl sym">=</span> sequence <span class="hl sym">|&gt;</span> <span class="hl kwc">Seq</span><span class="hl sym">.</span>length

results <span class="hl sym">|&gt;</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>iter<span class="hl sym">(</span><span class="hl kwa">fun</span> <span class="hl sym">(</span>var<span class="hl sym">,</span>count<span class="hl sym">) -&gt;</span> printfn <span class="hl str">&quot;%s %d&quot;</span> var count<span class="hl sym">)</span>

printfn <span class="hl str">&quot;&quot;</span>

printfn <span class="hl str">&quot;%d&quot;</span> initialLength

printfn <span class="hl str">&quot;%d&quot;</span> codeLength
printfn <span class="hl str">&quot;%d&quot;</span> sequenceLength

