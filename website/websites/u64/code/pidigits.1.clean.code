<span class="hl com">/* The Great Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"> </span>
<span class="hl com">   contributed by Diederik van Arkel</span>
<span class="hl com">*/</span>
 
module pidigits

import StdEnv<span class="hl sym">,</span> LanguageShootout<span class="hl sym">,</span> BigInt

Start world
   <span class="hl sym">#</span> n           <span class="hl sym">=</span> argi
   <span class="hl sym"># (</span>io<span class="hl sym">,</span>world<span class="hl sym">)  =</span> stdio world
   <span class="hl sym">#</span> io          <span class="hl sym">=</span> digit <span class="hl num">1</span> <span class="hl sym">(</span>toBigInt <span class="hl num">1</span><span class="hl sym">,</span>toBigInt <span class="hl num">0</span><span class="hl sym">,</span>toBigInt <span class="hl num">0</span><span class="hl sym">,</span>toBigInt <span class="hl num">1</span><span class="hl sym">)</span> n <span class="hl num">0 0</span> io
   <span class="hl sym"># (</span>err<span class="hl sym">,</span>world<span class="hl sym">) =</span> fclose io world
   <span class="hl sym">=</span> world

digit <span class="hl sym">::</span> Int <span class="hl sym">(</span>BigInt<span class="hl sym">,</span>BigInt<span class="hl sym">,</span>BigInt<span class="hl sym">,</span>BigInt<span class="hl sym">)</span> Int Int Int <span class="hl sym">*</span>File <span class="hl sym">-&gt; *</span>File
digit k z <span class="hl num">0</span> row col io
   <span class="hl sym">=</span> io &lt;&lt;&lt; toString <span class="hl sym">(</span>repeatn <span class="hl sym">(</span><span class="hl num">10</span><span class="hl sym">-</span>col<span class="hl sym">)</span> ' '<span class="hl sym">)</span> &lt;&lt;&lt; <span class="hl str">&quot;\t:&quot;</span> &lt;&lt;&lt; <span class="hl sym">(</span>row<span class="hl sym">+</span>col<span class="hl sym">)</span> &lt;&lt;&lt; <span class="hl str">&quot;\n&quot;</span>
digit k z n row col io
   <span class="hl sym">|</span> safe z y
      <span class="hl sym">|</span> col <span class="hl sym">==</span> <span class="hl num">10</span>
         <span class="hl sym">#</span> row` <span class="hl sym">=</span> row <span class="hl sym">+</span> <span class="hl num">10</span>
         <span class="hl sym">#</span> io   <span class="hl sym">=</span> io &lt;&lt;&lt; <span class="hl str">&quot;\t:&quot;</span> &lt;&lt;&lt; row` &lt;&lt;&lt; <span class="hl str">&quot;\n&quot;</span> &lt;&lt;&lt; toString y
         <span class="hl sym">=</span> digit k <span class="hl sym">(</span>prod z y<span class="hl sym">) (</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span> row` <span class="hl num">1</span> io
         <span class="hl sym">#</span> io <span class="hl sym">=</span> io &lt;&lt;&lt; toString y
         <span class="hl sym">=</span> digit k <span class="hl sym">(</span>prod z y<span class="hl sym">) (</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span> row <span class="hl sym">(</span>col<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span> io
      <span class="hl sym">=</span> digit <span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) (</span>cons z k<span class="hl sym">)</span> n row col io
where
   y <span class="hl sym">=</span> next z
   prod z n <span class="hl sym">=</span> comp <span class="hl sym">(</span>toBigInt <span class="hl num">10</span><span class="hl sym">,</span>toBigInt <span class="hl sym">-</span><span class="hl num">10</span> <span class="hl sym">*</span> n<span class="hl sym">,</span> toBigInt <span class="hl num">0</span><span class="hl sym">,</span> toBigInt <span class="hl num">1</span><span class="hl sym">)</span> z

floor_ev <span class="hl sym">:: (</span>BigInt<span class="hl sym">,</span>BigInt<span class="hl sym">,</span>BigInt<span class="hl sym">,</span>BigInt<span class="hl sym">)</span> BigInt <span class="hl sym">-&gt;</span> BigInt
floor_ev <span class="hl sym">(</span>q<span class="hl sym">,</span> r<span class="hl sym">,</span> s<span class="hl sym">,</span> t<span class="hl sym">)</span> x <span class="hl sym">= (</span>q<span class="hl sym">*</span>x <span class="hl sym">+</span> r<span class="hl sym">) / (</span>s<span class="hl sym">*</span>x <span class="hl sym">+</span> t<span class="hl sym">)</span>
comp <span class="hl sym">:: (</span>BigInt<span class="hl sym">,</span>BigInt<span class="hl sym">,</span>BigInt<span class="hl sym">,</span>BigInt<span class="hl sym">) (</span>BigInt<span class="hl sym">,</span>BigInt<span class="hl sym">,</span>BigInt<span class="hl sym">,</span>BigInt<span class="hl sym">) -&gt; (</span>BigInt<span class="hl sym">,</span>BigInt<span class="hl sym">,</span>BigInt<span class="hl sym">,</span>BigInt<span class="hl sym">)</span>
comp <span class="hl sym">(</span>q<span class="hl sym">,</span>r<span class="hl sym">,</span>s<span class="hl sym">,</span>t<span class="hl sym">) (</span>q`<span class="hl sym">,</span>r`<span class="hl sym">,</span>s`<span class="hl sym">,</span>t`<span class="hl sym">) = (</span>q<span class="hl sym">*</span>q` <span class="hl sym">+</span> r<span class="hl sym">*</span>s`<span class="hl sym">,</span> q<span class="hl sym">*</span>r` <span class="hl sym">+</span> r<span class="hl sym">*</span>t`<span class="hl sym">,</span> s<span class="hl sym">*</span>q` <span class="hl sym">+</span> t<span class="hl sym">*</span>s`<span class="hl sym">,</span> s<span class="hl sym">*</span>r` <span class="hl sym">+</span> t<span class="hl sym">*</span>t`<span class="hl sym">)</span>
next <span class="hl sym">:: (</span>BigInt<span class="hl sym">,</span>BigInt<span class="hl sym">,</span>BigInt<span class="hl sym">,</span>BigInt<span class="hl sym">) -&gt;</span> BigInt
next z <span class="hl sym">=</span> floor_ev z <span class="hl sym">(</span>toBigInt <span class="hl num">3</span><span class="hl sym">)</span>

safe z n <span class="hl sym">=</span> n <span class="hl sym">==</span> floor_ev z <span class="hl sym">(</span>toBigInt <span class="hl num">4</span><span class="hl sym">)</span>
cons z k <span class="hl sym">=</span> let den <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">*</span>k<span class="hl sym">+</span><span class="hl num">1</span> in comp z <span class="hl sym">(</span>toBigInt k<span class="hl sym">,</span> toBigInt <span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>den<span class="hl sym">),</span> toBigInt <span class="hl num">0</span><span class="hl sym">,</span> toBigInt den<span class="hl sym">)</span>
