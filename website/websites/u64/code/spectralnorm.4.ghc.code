<span class="hl com">{-# LANGUAGE BangPatterns, MagicHash #-}</span>
<span class="hl com">{-# OPTIONS -fvia-C -fexcess-precision #-}</span>
<span class="hl slc">--</span>
<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Translation from Clean by Don Stewart</span>
<span class="hl slc">-- Modified by Ryan Trinkle: 1) change from divInt# to uncheckedIShiftRA#</span>
<span class="hl slc">--                           2) changed -optc-O to -optc-O3</span>
<span class="hl slc">--                           3) added -optc-ffast-math</span>
<span class="hl slc">-- Parallelised by Don Stewart</span>
<span class="hl slc">-- Modified by Alex Mason - forkIO'd powerMethod in main</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Should be compiled with:</span>
<span class="hl slc">--      -O2 -threaded --make</span>
<span class="hl slc">--      -optc-O2 -optc-march=native -optc-mfpmath=sse -optc-msse2 -optc-ffast-math</span>
<span class="hl slc">--</span>

<span class="hl kwa">import</span> System
<span class="hl kwa">import</span> Foreign.Marshal.Array
<span class="hl kwa">import</span> Foreign
<span class="hl kwa">import</span> Text.Printf
<span class="hl kwa">import</span> Control.Monad
<span class="hl kwa">import</span> Data.ByteString.Internal

<span class="hl kwa">import</span> GHC.Base
<span class="hl kwa">import</span> GHC.<span class="hl kwb">Float</span>
<span class="hl kwa">import</span> GHC.<span class="hl kwb">Int</span>

<span class="hl kwa">import</span> Control.Concurrent
<span class="hl kwa">import</span> Control.Exception

<span class="hl kwa">type</span> Reals <span class="hl sym">=</span> Ptr <span class="hl kwb">Double</span>

main <span class="hl sym">=</span> <span class="hl kwa">do</span>
    n <span class="hl sym">&lt;-</span> getArgs <span class="hl sym">&gt;&gt;=</span> readIO . head

    u <span class="hl sym">&lt;-</span> mallocArray n <span class="hl sym">::</span> IO Reals
    forM_ <span class="hl sym">[</span><span class="hl num">0</span>..n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">]</span> $ \i <span class="hl sym">-&gt;</span> pokeElemOff u i <span class="hl num">1</span>
    v <span class="hl sym">&lt;-</span> mallocArray n <span class="hl sym">::</span> IO Reals
    forM_ <span class="hl sym">[</span><span class="hl num">0</span>..n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">]</span> $ \i <span class="hl sym">-&gt;</span> pokeElemOff v i <span class="hl num">0</span>
    ret <span class="hl sym">&lt;-</span> newEmptyMVar
    forkIO $ powerMethod <span class="hl num">10</span> n u v <span class="hl sym">&gt;&gt;</span> putMVar ret <span class="hl sym">()</span>
    takeMVar ret
    printf <span class="hl str">&quot;%.9f\n&quot;</span> <span class="hl sym">(</span>eigenvalue n u v <span class="hl num">0 0 0</span><span class="hl sym">)</span>

<span class="hl slc">------------------------------------------------------------------------</span>

eigenvalue <span class="hl sym">::</span> <span class="hl kwb">Int</span> <span class="hl sym">-&gt;</span> Reals <span class="hl sym">-&gt;</span> Reals <span class="hl sym">-&gt;</span> <span class="hl kwb">Int</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">Double</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">Double</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">Double</span>
eigenvalue <span class="hl sym">!</span>n <span class="hl sym">!</span>u <span class="hl sym">!</span>v <span class="hl sym">!</span>i <span class="hl sym">!</span>vBv <span class="hl sym">!</span>vv
    <span class="hl sym">|</span> i <span class="hl sym">&lt;</span> n     <span class="hl sym">=</span> eigenvalue n u v <span class="hl sym">(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) (</span>vBv <span class="hl sym">+</span> ui <span class="hl sym">*</span> vi<span class="hl sym">) (</span>vv <span class="hl sym">+</span> vi <span class="hl sym">*</span> vi<span class="hl sym">)</span>
    <span class="hl sym">|</span> otherwise <span class="hl sym">=</span> sqrt $<span class="hl sym">!</span> vBv <span class="hl sym">/</span> vv
    <span class="hl kwa">where</span>
       ui <span class="hl sym">=</span> inlinePerformIO <span class="hl sym">(</span>peekElemOff u i<span class="hl sym">)</span>
       vi <span class="hl sym">=</span> inlinePerformIO <span class="hl sym">(</span>peekElemOff v i<span class="hl sym">)</span>

<span class="hl slc">------------------------------------------------------------------------</span>

powerMethod <span class="hl sym">::</span> <span class="hl kwb">Int</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">Int</span> <span class="hl sym">-&gt;</span> Reals <span class="hl sym">-&gt;</span> Reals <span class="hl sym">-&gt;</span> IO <span class="hl sym">()</span>
powerMethod i n u v <span class="hl sym">=</span> <span class="hl kwa">do</span>
    <span class="hl slc">-- roll our own synchronisation</span>
    children <span class="hl sym">&lt;-</span> newMVar <span class="hl sym">[]</span>
    replicateM_ i $ <span class="hl kwa">do</span>
        me <span class="hl sym">&lt;-</span> newEmptyMVar
        cs <span class="hl sym">&lt;-</span> takeMVar children
        putMVar children <span class="hl sym">(</span>me <span class="hl sym">:</span> cs<span class="hl sym">)</span>
        forkIO <span class="hl sym">(</span>child `finally` putMVar me <span class="hl sym">())</span>
    wait children
  <span class="hl kwa">where</span>
    child <span class="hl sym">=</span> allocaArray n $ \t <span class="hl sym">-&gt;</span> timesAtAv t n u v <span class="hl sym">&gt;&gt;</span> timesAtAv t n v u

    <span class="hl slc">-- wait on children</span>
    wait box <span class="hl sym">=</span> <span class="hl kwa">do</span>
      cs <span class="hl sym">&lt;-</span> takeMVar box
      <span class="hl kwa">case</span> cs <span class="hl kwa">of</span>
        <span class="hl sym">[]   -&gt;</span> return <span class="hl sym">()</span>
        m<span class="hl sym">:</span>ms <span class="hl sym">-&gt;</span> putMVar box ms <span class="hl sym">&gt;&gt;</span> takeMVar m <span class="hl sym">&gt;&gt;</span> wait box

<span class="hl slc">-- multiply vector v by matrix A and then by matrix A transposed</span>
timesAtAv <span class="hl sym">::</span> Reals <span class="hl sym">-&gt;</span> <span class="hl kwb">Int</span> <span class="hl sym">-&gt;</span> Reals <span class="hl sym">-&gt;</span> Reals <span class="hl sym">-&gt;</span> IO <span class="hl sym">()</span>
timesAtAv <span class="hl sym">!</span>t <span class="hl sym">!</span>n <span class="hl sym">!</span>u <span class="hl sym">!</span>atau <span class="hl sym">=</span> <span class="hl kwa">do</span>
    timesAv  n u t
    timesAtv n t atau

timesAv <span class="hl sym">::</span> <span class="hl kwb">Int</span> <span class="hl sym">-&gt;</span> Reals <span class="hl sym">-&gt;</span> Reals <span class="hl sym">-&gt;</span> IO <span class="hl sym">()</span>
timesAv <span class="hl sym">!</span>n <span class="hl sym">!</span>u <span class="hl sym">!</span>au <span class="hl sym">=</span> go <span class="hl num">0</span>
  <span class="hl kwa">where</span>
    go <span class="hl sym">::</span> <span class="hl kwb">Int</span> <span class="hl sym">-&gt;</span> IO <span class="hl sym">()</span>
    go <span class="hl sym">!</span>i <span class="hl sym">=</span> when <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> n<span class="hl sym">)</span> $ <span class="hl kwa">do</span>
        pokeElemOff au i <span class="hl sym">(</span>avsum i <span class="hl num">0 0</span><span class="hl sym">)</span>
        go <span class="hl sym">(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>

    avsum <span class="hl sym">::</span> <span class="hl kwb">Int</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">Int</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">Double</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">Double</span>
    avsum <span class="hl sym">!</span>i <span class="hl sym">!</span>j <span class="hl sym">!</span>acc
        <span class="hl sym">|</span> j <span class="hl sym">&lt;</span> n <span class="hl sym">=</span> avsum i <span class="hl sym">(</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) (</span>acc <span class="hl sym">+ ((</span>aij i j<span class="hl sym">) *</span> uj<span class="hl sym">))</span>
        <span class="hl sym">|</span> otherwise <span class="hl sym">=</span> acc
        <span class="hl kwa">where</span> uj <span class="hl sym">=</span> inlinePerformIO <span class="hl sym">(</span>peekElemOff u j<span class="hl sym">)</span>

timesAtv <span class="hl sym">::</span> <span class="hl kwb">Int</span> <span class="hl sym">-&gt;</span> Reals <span class="hl sym">-&gt;</span> Reals <span class="hl sym">-&gt;</span> IO <span class="hl sym">()</span>
timesAtv <span class="hl sym">!</span>n <span class="hl sym">!</span>u <span class="hl sym">!</span>a <span class="hl sym">=</span> go <span class="hl num">0</span>
  <span class="hl kwa">where</span>
    go <span class="hl sym">::</span> <span class="hl kwb">Int</span> <span class="hl sym">-&gt;</span> IO <span class="hl sym">()</span>
    go <span class="hl sym">!</span>i <span class="hl sym">=</span> when <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> n<span class="hl sym">)</span> $ <span class="hl kwa">do</span>
        pokeElemOff a i <span class="hl sym">(</span>atvsum i <span class="hl num">0 0</span><span class="hl sym">)</span>
        go <span class="hl sym">(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>

    atvsum <span class="hl sym">::</span> <span class="hl kwb">Int</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">Int</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">Double</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">Double</span>
    atvsum <span class="hl sym">!</span>i <span class="hl sym">!</span>j <span class="hl sym">!</span>acc
        <span class="hl sym">|</span> j <span class="hl sym">&lt;</span> n     <span class="hl sym">=</span> atvsum i <span class="hl sym">(</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) (</span>acc <span class="hl sym">+ ((</span>aij j i<span class="hl sym">) *</span> uj<span class="hl sym">))</span>
        <span class="hl sym">|</span> otherwise <span class="hl sym">=</span> acc
        <span class="hl kwa">where</span> uj <span class="hl sym">=</span> inlinePerformIO <span class="hl sym">(</span>peekElemOff u j<span class="hl sym">)</span>

<span class="hl slc">--</span>
<span class="hl slc">-- manually unbox the inner loop:</span>
<span class="hl slc">-- aij i j = 1 / fromIntegral ((i+j) * (i+j+1) `div` 2 + i + 1)</span>
<span class="hl slc">--</span>
aij <span class="hl sym">(</span>I# i<span class="hl sym">) (</span>I# j<span class="hl sym">) =</span> D# <span class="hl sym">(</span>
    <span class="hl kwa">case</span> i <span class="hl sym">+</span># j <span class="hl kwa">of</span>
        n <span class="hl sym">-&gt;</span> <span class="hl kwa">case</span> n <span class="hl sym">*</span># <span class="hl sym">(</span>n<span class="hl sym">+</span>#<span class="hl num">1</span>#<span class="hl sym">)</span> <span class="hl kwa">of</span>
                t <span class="hl sym">-&gt;</span> <span class="hl kwa">case</span> t `uncheckedIShiftRA#` <span class="hl num">1</span># <span class="hl kwa">of</span>
                        u <span class="hl sym">-&gt;</span> <span class="hl kwa">case</span> u <span class="hl sym">+</span># <span class="hl sym">(</span>i <span class="hl sym">+</span># <span class="hl num">1</span>#<span class="hl sym">)</span> <span class="hl kwa">of</span>
                                r <span class="hl sym">-&gt;</span> <span class="hl num">1.0</span>## <span class="hl sym">/</span>## <span class="hl sym">(</span>int2Double# r<span class="hl sym">))</span>
