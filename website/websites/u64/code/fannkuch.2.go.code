<span class="hl com">/*</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Based on fannkuch.scala by Rex Kerr</span>
<span class="hl com"> * contributed by The Go Authors.</span>
<span class="hl com"> * flag.Arg hack by Isaac Gouy</span>
<span class="hl com"> */</span>

<span class="hl kwa">package</span> main

<span class="hl kwa">import</span> <span class="hl sym">(</span>
   <span class="hl str">&quot;flag&quot;</span>
   <span class="hl str">&quot;fmt&quot;</span>
   <span class="hl str">&quot;runtime&quot;</span>
   <span class="hl str">&quot;strconv&quot;</span>
<span class="hl sym">)</span>

<span class="hl kwa">var</span> N <span class="hl sym">=</span> <span class="hl num">0</span>
<span class="hl kwa">var</span> nCPU <span class="hl sym">=</span> <span class="hl num">4</span>

<span class="hl kwa">type</span> Job <span class="hl kwa">struct</span> <span class="hl sym">{</span>
   start <span class="hl sym">[]</span>int
   n     int
<span class="hl sym">}</span>

<span class="hl kwa">type</span> Found <span class="hl kwa">struct</span> <span class="hl sym">{</span>
   who <span class="hl sym">*</span>Kucher
   k   int
<span class="hl sym">}</span>

<span class="hl kwa">type</span> Kucher <span class="hl kwa">struct</span> <span class="hl sym">{</span>
   perm <span class="hl sym">[]</span>int
   temp <span class="hl sym">[]</span>int
   flip <span class="hl sym">[]</span>int
   in   <span class="hl kwa">chan</span> Job
<span class="hl sym">}</span>

<span class="hl kwa">func</span> NewKucher<span class="hl sym">(</span>length int<span class="hl sym">) *</span>Kucher <span class="hl sym">{</span>
   <span class="hl kwa">return</span> <span class="hl sym">&amp;</span>Kucher<span class="hl sym">{</span>
      perm<span class="hl sym">:</span> make<span class="hl sym">([]</span>int<span class="hl sym">,</span> length<span class="hl sym">),</span>
      temp<span class="hl sym">:</span> make<span class="hl sym">([]</span>int<span class="hl sym">,</span> length<span class="hl sym">),</span>
      flip<span class="hl sym">:</span> make<span class="hl sym">([]</span>int<span class="hl sym">,</span> length<span class="hl sym">),</span>
      in<span class="hl sym">:</span>   make<span class="hl sym">(</span><span class="hl kwa">chan</span> Job<span class="hl sym">),</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwa">func</span> <span class="hl sym">(</span>k <span class="hl sym">*</span>Kucher<span class="hl sym">)</span> permute<span class="hl sym">(</span>n int<span class="hl sym">)</span> bool <span class="hl sym">{</span>
   i <span class="hl sym">:=</span> <span class="hl num">0</span>
   <span class="hl kwa">for</span> <span class="hl sym">;</span> i <span class="hl sym">&lt;</span> n<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl sym">&amp;&amp;</span> k<span class="hl sym">.</span>flip<span class="hl sym">[</span>i<span class="hl sym">] ==</span> <span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">++ {</span>
      t <span class="hl sym">:=</span> k<span class="hl sym">.</span>perm<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]</span>
      j <span class="hl sym">:=</span> <span class="hl num">0</span>
      <span class="hl kwa">for</span> <span class="hl sym">;</span> j <span class="hl sym">&lt;=</span> i<span class="hl sym">;</span> j<span class="hl sym">++ {</span>
         k<span class="hl sym">.</span>perm<span class="hl sym">[</span>j<span class="hl sym">] =</span> k<span class="hl sym">.</span>perm<span class="hl sym">[</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">]</span>
      <span class="hl sym">}</span>
      k<span class="hl sym">.</span>perm<span class="hl sym">[</span>j<span class="hl sym">] =</span> t
   <span class="hl sym">}</span>
   k<span class="hl sym">.</span>flip<span class="hl sym">[</span>i<span class="hl sym">]--</span>
   <span class="hl kwa">for</span> i <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl sym">{</span>
      i<span class="hl sym">--</span>
      k<span class="hl sym">.</span>flip<span class="hl sym">[</span>i<span class="hl sym">] =</span> i
   <span class="hl sym">}</span>
   <span class="hl kwa">return</span> k<span class="hl sym">.</span>flip<span class="hl sym">[</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">] &gt;=</span> <span class="hl num">0</span>
<span class="hl sym">}</span>

<span class="hl kwa">func</span> <span class="hl sym">(</span>k <span class="hl sym">*</span>Kucher<span class="hl sym">)</span> count<span class="hl sym">()</span> int <span class="hl sym">{</span>
   K <span class="hl sym">:=</span> <span class="hl num">0</span>
   copy<span class="hl sym">(</span>k<span class="hl sym">.</span>temp<span class="hl sym">,</span> k<span class="hl sym">.</span>perm<span class="hl sym">)</span>
   <span class="hl kwa">for</span> k<span class="hl sym">.</span>temp<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] !=</span> <span class="hl num">0</span> <span class="hl sym">{</span>
      m <span class="hl sym">:=</span> k<span class="hl sym">.</span>temp<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]</span>
      <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> m<span class="hl sym">;</span> i<span class="hl sym">++ {</span>
         k<span class="hl sym">.</span>temp<span class="hl sym">[</span>i<span class="hl sym">],</span> k<span class="hl sym">.</span>temp<span class="hl sym">[</span>m<span class="hl sym">] =</span> k<span class="hl sym">.</span>temp<span class="hl sym">[</span>m<span class="hl sym">],</span> k<span class="hl sym">.</span>temp<span class="hl sym">[</span>i<span class="hl sym">]</span>
         m<span class="hl sym">--</span>
      <span class="hl sym">}</span>
      K<span class="hl sym">++</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">return</span> K
<span class="hl sym">}</span>

<span class="hl kwa">func</span> <span class="hl sym">(</span>k <span class="hl sym">*</span>Kucher<span class="hl sym">)</span> Run<span class="hl sym">(</span>foreman <span class="hl kwa">chan</span><span class="hl sym">&lt;-</span> Found<span class="hl sym">) {</span>
   <span class="hl kwa">for</span> job <span class="hl sym">:=</span> <span class="hl kwa">range</span> k<span class="hl sym">.</span>in <span class="hl sym">{</span>
      verbose <span class="hl sym">:=</span> <span class="hl num">30</span>
      copy<span class="hl sym">(</span>k<span class="hl sym">.</span>perm<span class="hl sym">,</span> job<span class="hl sym">.</span>start<span class="hl sym">)</span>
      <span class="hl kwa">for</span> i<span class="hl sym">,</span> v <span class="hl sym">:=</span> <span class="hl kwa">range</span> k<span class="hl sym">.</span>perm <span class="hl sym">{</span>
         <span class="hl kwa">if</span> v <span class="hl sym">!=</span> i <span class="hl sym">{</span>
            verbose <span class="hl sym">=</span> <span class="hl num">0</span>
         <span class="hl sym">}</span>
         k<span class="hl sym">.</span>flip<span class="hl sym">[</span>i<span class="hl sym">] =</span> i
      <span class="hl sym">}</span>
      K <span class="hl sym">:=</span> <span class="hl num">0</span>
      <span class="hl kwa">for</span> <span class="hl sym">{</span>
         <span class="hl kwa">if</span> verbose <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl sym">{</span>
            <span class="hl kwa">for</span> _<span class="hl sym">,</span> p <span class="hl sym">:=</span> <span class="hl kwa">range</span> k<span class="hl sym">.</span>perm <span class="hl sym">{</span>
               fmt<span class="hl sym">.</span>Print<span class="hl sym">(</span>p <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
            <span class="hl sym">}</span>
            fmt<span class="hl sym">.</span>Println<span class="hl sym">()</span>
            verbose<span class="hl sym">--</span>
         <span class="hl sym">}</span>
         count <span class="hl sym">:=</span> k<span class="hl sym">.</span>count<span class="hl sym">()</span>
         <span class="hl kwa">if</span> count <span class="hl sym">&gt;</span> K <span class="hl sym">{</span>
            K <span class="hl sym">=</span> count
         <span class="hl sym">}</span>
         <span class="hl kwa">if</span> <span class="hl sym">!</span>k<span class="hl sym">.</span>permute<span class="hl sym">(</span>job<span class="hl sym">.</span>n<span class="hl sym">) {</span>
            <span class="hl kwa">break</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>
      foreman <span class="hl sym">&lt;-</span> Found<span class="hl sym">{</span>k<span class="hl sym">,</span> K<span class="hl sym">}</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwa">type</span> Fanner <span class="hl kwa">struct</span> <span class="hl sym">{</span>
   jobind   int
   jobsdone int
   k        int
   jobs     <span class="hl sym">[]</span>Job
   workers  <span class="hl sym">[]*</span>Kucher
   in       <span class="hl kwa">chan</span> Found
   result   <span class="hl kwa">chan</span> int
<span class="hl sym">}</span>

<span class="hl kwa">func</span> NewFanner<span class="hl sym">(</span>jobs <span class="hl sym">[]</span>Job<span class="hl sym">,</span> workers <span class="hl sym">[]*</span>Kucher<span class="hl sym">) *</span>Fanner <span class="hl sym">{</span>
   <span class="hl kwa">return</span> <span class="hl sym">&amp;</span>Fanner<span class="hl sym">{</span>
      jobs<span class="hl sym">:</span> jobs<span class="hl sym">,</span> workers<span class="hl sym">:</span> workers<span class="hl sym">,</span>
      in<span class="hl sym">:</span>     make<span class="hl sym">(</span><span class="hl kwa">chan</span> Found<span class="hl sym">),</span>
      result<span class="hl sym">:</span> make<span class="hl sym">(</span><span class="hl kwa">chan</span> int<span class="hl sym">),</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwa">func</span> <span class="hl sym">(</span>f <span class="hl sym">*</span>Fanner<span class="hl sym">)</span> Run<span class="hl sym">(</span>N int<span class="hl sym">) {</span>
   <span class="hl kwa">for</span> msg <span class="hl sym">:=</span> <span class="hl kwa">range</span> f<span class="hl sym">.</span>in <span class="hl sym">{</span>
      <span class="hl kwa">if</span> msg<span class="hl sym">.</span>k <span class="hl sym">&gt;</span> f<span class="hl sym">.</span>k <span class="hl sym">{</span>
         f<span class="hl sym">.</span>k <span class="hl sym">=</span> msg<span class="hl sym">.</span>k
      <span class="hl sym">}</span>
      <span class="hl kwa">if</span> msg<span class="hl sym">.</span>k <span class="hl sym">&gt;=</span> <span class="hl num">0</span> <span class="hl sym">{</span>
         f<span class="hl sym">.</span>jobsdone<span class="hl sym">++</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">if</span> f<span class="hl sym">.</span>jobind <span class="hl sym">&lt;</span> len<span class="hl sym">(</span>f<span class="hl sym">.</span>jobs<span class="hl sym">) {</span>
         msg<span class="hl sym">.</span>who<span class="hl sym">.</span>in <span class="hl sym">&lt;-</span> f<span class="hl sym">.</span>jobs<span class="hl sym">[</span>f<span class="hl sym">.</span>jobind<span class="hl sym">]</span>
         f<span class="hl sym">.</span>jobind<span class="hl sym">++</span>
      <span class="hl sym">}</span> <span class="hl kwa">else if</span> f<span class="hl sym">.</span>jobsdone <span class="hl sym">==</span> len<span class="hl sym">(</span>f<span class="hl sym">.</span>jobs<span class="hl sym">) {</span>
         f<span class="hl sym">.</span>result <span class="hl sym">&lt;-</span> f<span class="hl sym">.</span>k
         <span class="hl kwa">return</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwa">func</span> swapped<span class="hl sym">(</span>a <span class="hl sym">[]</span>int<span class="hl sym">,</span> i<span class="hl sym">,</span> j int<span class="hl sym">) []</span>int <span class="hl sym">{</span>
   b <span class="hl sym">:=</span> make<span class="hl sym">([]</span>int<span class="hl sym">,</span> len<span class="hl sym">(</span>a<span class="hl sym">))</span>
   copy<span class="hl sym">(</span>b<span class="hl sym">,</span> a<span class="hl sym">)</span>
   b<span class="hl sym">[</span>i<span class="hl sym">],</span> b<span class="hl sym">[</span>j<span class="hl sym">] =</span> a<span class="hl sym">[</span>j<span class="hl sym">],</span> a<span class="hl sym">[</span>i<span class="hl sym">]</span>
   <span class="hl kwa">return</span> b
<span class="hl sym">}</span>

<span class="hl kwa">func</span> main<span class="hl sym">() {</span>
   flag<span class="hl sym">.</span>Parse<span class="hl sym">()</span>
   runtime<span class="hl sym">.</span>GOMAXPROCS<span class="hl sym">(</span>nCPU<span class="hl sym">)</span>
   <span class="hl kwa">if</span> flag<span class="hl sym">.</span>NArg<span class="hl sym">() &gt;</span> <span class="hl num">0</span> <span class="hl sym">{</span> N<span class="hl sym">,</span>_ <span class="hl sym">=</span> strconv<span class="hl sym">.</span>Atoi<span class="hl sym">(</span> flag<span class="hl sym">.</span>Arg<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">) ) }</span>
   base <span class="hl sym">:=</span> make<span class="hl sym">([]</span>int<span class="hl sym">,</span> N<span class="hl sym">)</span>
   <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl kwa">range</span> base <span class="hl sym">{</span>
      base<span class="hl sym">[</span>i<span class="hl sym">] =</span> i
   <span class="hl sym">}</span>

   njobs <span class="hl sym">:=</span> <span class="hl num">1</span>
   <span class="hl kwa">if</span> N <span class="hl sym">&gt;</span> <span class="hl num">8</span> <span class="hl sym">{</span>
      njobs <span class="hl sym">+= (</span>N<span class="hl sym">*(</span>N<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">))/</span><span class="hl num">2</span> <span class="hl sym">-</span> <span class="hl num">28</span> <span class="hl slc">// njobs = 1 + sum(8..N-1) = 1 + sum(1..N-1) - sum(1..7)</span>
   <span class="hl sym">}</span>
   jobs <span class="hl sym">:=</span> make<span class="hl sym">([]</span>Job<span class="hl sym">,</span> njobs<span class="hl sym">)</span>
   jobsind <span class="hl sym">:=</span> <span class="hl num">0</span>

   firstN <span class="hl sym">:=</span> N
   <span class="hl kwa">if</span> firstN <span class="hl sym">&gt;</span> <span class="hl num">8</span> <span class="hl sym">{</span>
      firstN <span class="hl sym">=</span> <span class="hl num">8</span>
   <span class="hl sym">}</span>
   jobs<span class="hl sym">[</span>jobsind<span class="hl sym">] =</span> Job<span class="hl sym">{</span>base<span class="hl sym">,</span> firstN<span class="hl sym">}</span>
   jobsind<span class="hl sym">++</span>
   <span class="hl kwa">for</span> i <span class="hl sym">:=</span> N <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span> i <span class="hl sym">&gt;=</span> <span class="hl num">8</span><span class="hl sym">;</span> i<span class="hl sym">-- {</span>
      <span class="hl kwa">for</span> j <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span> j <span class="hl sym">&lt;</span> i<span class="hl sym">;</span> j<span class="hl sym">++ {</span>
         jobs<span class="hl sym">[</span>jobsind<span class="hl sym">] =</span> Job<span class="hl sym">{</span>swapped<span class="hl sym">(</span>base<span class="hl sym">,</span> i<span class="hl sym">,</span> j<span class="hl sym">),</span> i<span class="hl sym">}</span>
         jobsind<span class="hl sym">++</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   nworkers <span class="hl sym">:=</span> nCPU
   <span class="hl kwa">if</span> njobs <span class="hl sym">&lt;</span> nworkers <span class="hl sym">{</span>
      nworkers <span class="hl sym">=</span> njobs
   <span class="hl sym">}</span>
   workers <span class="hl sym">:=</span> make<span class="hl sym">([]*</span>Kucher<span class="hl sym">,</span> nworkers<span class="hl sym">)</span>
   foreman <span class="hl sym">:=</span> NewFanner<span class="hl sym">(</span>jobs<span class="hl sym">,</span> workers<span class="hl sym">)</span>
   <span class="hl kwa">go</span> foreman<span class="hl sym">.</span>Run<span class="hl sym">(</span>N<span class="hl sym">)</span>
   <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl kwa">range</span> workers <span class="hl sym">{</span>
      k <span class="hl sym">:=</span> NewKucher<span class="hl sym">(</span>N<span class="hl sym">)</span>
      workers<span class="hl sym">[</span>i<span class="hl sym">] =</span> k
      <span class="hl kwa">go</span> k<span class="hl sym">.</span>Run<span class="hl sym">(</span>foreman<span class="hl sym">.</span>in<span class="hl sym">)</span>
      foreman<span class="hl sym">.</span>in <span class="hl sym">&lt;-</span> Found<span class="hl sym">{</span>k<span class="hl sym">, -</span><span class="hl num">1</span><span class="hl sym">}</span>
   <span class="hl sym">}</span>
   fmt<span class="hl sym">.</span>Printf<span class="hl sym">(</span><span class="hl str">&quot;Pfannkuchen(%d) = %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> N<span class="hl sym">, &lt;-</span>foreman<span class="hl sym">.</span>result<span class="hl sym">)</span>
<span class="hl sym">}</span>

