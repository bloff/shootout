<span class="hl com">(* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Ethan Burns</span>
<span class="hl com">*)</span>


<span class="hl com">(** Flip the front [n] pancakes of [a]. *)</span>
<span class="hl kwa">let</span> flip n <span class="hl sym">(</span>a <span class="hl sym">:</span> <span class="hl kwb">int</span> array<span class="hl sym">) =</span>
  <span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> n <span class="hl sym">/</span> <span class="hl num">2</span> <span class="hl kwa">do</span>
    <span class="hl kwa">let</span> t <span class="hl sym">=</span> a<span class="hl sym">.(</span>i<span class="hl sym">)</span> <span class="hl kwa">in</span>
    <span class="hl kwa">let</span> k <span class="hl sym">=</span> n <span class="hl sym">-</span> i <span class="hl kwa">in</span>
      a<span class="hl sym">.(</span>i<span class="hl sym">) &lt;-</span> a<span class="hl sym">.(</span>k<span class="hl sym">);</span>
      a<span class="hl sym">.(</span>k<span class="hl sym">) &lt;-</span> t<span class="hl sym">;</span>
  <span class="hl kwa">done</span>

<span class="hl com">(** Count the number of flips so that pancake 0 is at index 0. *)</span>
<span class="hl kwa">let rec</span> count c ary <span class="hl sym">=</span>
  <span class="hl kwa">let</span> z <span class="hl sym">=</span> ary<span class="hl sym">.(</span><span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">in</span>
    <span class="hl kwa">if</span> z <span class="hl sym">&lt;&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then begin</span>
      flip z ary<span class="hl sym">;</span>
      count <span class="hl sym">(</span>c <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span> ary
    <span class="hl kwa">end else</span>
      c

<span class="hl com">(** Rotate the first [n] pancakes of [a]. *)</span>
<span class="hl kwa">let</span> rotate n <span class="hl sym">(</span>a <span class="hl sym">:</span> <span class="hl kwb">int</span> array<span class="hl sym">) =</span>
  <span class="hl kwa">let</span> t <span class="hl sym">=</span> a<span class="hl sym">.(</span><span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> m <span class="hl sym">=</span> n <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl kwa">in</span>
    <span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl kwa">to</span> m <span class="hl kwa">do</span>
      a<span class="hl sym">.(</span>i <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">) &lt;-</span> a<span class="hl sym">.(</span>i<span class="hl sym">);</span>
    <span class="hl kwa">done</span><span class="hl sym">;</span>
    a<span class="hl sym">.(</span>m<span class="hl sym">) &lt;-</span> t

<span class="hl com">(** Call [f] on each permutation of [n] numbers in order. *)</span>
<span class="hl kwa">let</span> iter_perms n f <span class="hl sym">=</span>
  <span class="hl kwa">let rec</span> do_iter num perm copy f ht <span class="hl sym">=</span>
    <span class="hl kwa">if</span> ht <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl kwa">then begin</span>
      <span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> n <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl kwa">do</span> copy<span class="hl sym">.(</span>i<span class="hl sym">) &lt;-</span> perm<span class="hl sym">.(</span>i<span class="hl sym">)</span> <span class="hl kwa">done</span><span class="hl sym">;</span>
      f <span class="hl sym">!</span>num copy<span class="hl sym">;</span>
      incr num<span class="hl sym">;</span>
    <span class="hl kwa">end else</span>
      <span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl kwa">to</span> ht <span class="hl kwa">do</span>
	do_iter num perm copy f <span class="hl sym">(</span>ht <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">);</span>
	rotate ht perm<span class="hl sym">;</span>
      <span class="hl kwa">done</span>
  <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> perm <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>init n <span class="hl sym">(</span><span class="hl kwa">fun</span> i <span class="hl sym">-&gt;</span> i<span class="hl sym">)</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> copy <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>create n <span class="hl num">0</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> num <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">in</span>
    do_iter num perm copy f n

<span class="hl kwa">let</span> _ <span class="hl sym">=</span>
  <span class="hl kwa">let</span> n <span class="hl sym">=</span> int_of_string <span class="hl kwc">Sys</span><span class="hl sym">.</span>argv<span class="hl sym">.(</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> csum <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">and</span> m <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">in</span>
    iter_perms n <span class="hl sym">(</span><span class="hl kwa">fun</span> num a <span class="hl sym">-&gt;</span>
		    <span class="hl kwa">let</span> c <span class="hl sym">=</span> count <span class="hl num">0</span> a <span class="hl kwa">in</span>
		      <span class="hl com">(* csum update from Otto Bommer's Scala ver. *)</span>
		      csum <span class="hl sym">:= !</span>csum <span class="hl sym">+</span> c <span class="hl sym">* (</span><span class="hl num">1</span> <span class="hl sym">- (</span>num <span class="hl kwa">land</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">lsl</span> <span class="hl num">1</span><span class="hl sym">);</span>
		      <span class="hl kwa">if</span> c <span class="hl sym">&gt; !</span>m <span class="hl kwa">then</span> m <span class="hl sym">:=</span> c<span class="hl sym">;);</span>
    <span class="hl kwc">Printf</span><span class="hl sym">.</span>printf <span class="hl str">&quot;%d</span><span class="hl esc">\n</span><span class="hl str">Pfannkuchen(%d) = %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl sym">!</span>csum n <span class="hl sym">!</span>m
