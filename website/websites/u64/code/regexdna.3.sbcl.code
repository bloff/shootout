<span class="hl slc">;;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; Contributed by: Witali Kusnezow 2009-03-02</span>

<span class="hl sym">(</span><span class="hl kwa">eval</span><span class="hl sym">-</span>when <span class="hl sym">(:</span>compile<span class="hl sym">-</span>toplevel <span class="hl sym">:</span><span class="hl kwa">load</span><span class="hl sym">-</span>toplevel <span class="hl sym">:</span>execute<span class="hl sym">)</span>
  <span class="hl sym">(</span>require <span class="hl sym">:</span>asdf<span class="hl sym">)</span>
  <span class="hl sym">(</span>require <span class="hl sym">:</span>cl<span class="hl sym">-</span>ppcre<span class="hl sym">)</span>

#<span class="hl sym">+</span>sb<span class="hl sym">-</span>thread
<span class="hl sym">(</span><span class="hl kwa">progn</span>
  <span class="hl sym">(</span>define<span class="hl sym">-</span>alien<span class="hl sym">-</span>routine sysconf long <span class="hl sym">(</span>name int<span class="hl sym">))</span>
  <span class="hl sym">(</span>use<span class="hl sym">-</span>package <span class="hl sym">:</span>sb<span class="hl sym">-</span>thread<span class="hl sym">)))</span>

<span class="hl sym">(</span><span class="hl kwa">eval</span><span class="hl sym">-</span>when <span class="hl sym">(:</span>compile<span class="hl sym">-</span>toplevel<span class="hl sym">)</span>
<span class="hl sym">(</span>setf cl<span class="hl sym">-</span>ppcre<span class="hl sym">:*</span>regex<span class="hl sym">-</span>char<span class="hl sym">-</span>code<span class="hl sym">-</span>limit<span class="hl sym">*</span> <span class="hl num">128</span><span class="hl sym">))</span>

<span class="hl sym">(</span>defconstant  <span class="hl sym">+</span>regex<span class="hl sym">-</span><span class="hl kwa">list</span><span class="hl sym">+</span>
  <span class="hl sym">'(</span><span class="hl str">&quot;agggtaaa|tttaccct&quot;</span>
    <span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span>
    <span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span>
    <span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span>
    <span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span>
    <span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span>
    <span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span>
    <span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span>
    <span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span><span class="hl sym">))</span>

<span class="hl sym">(</span>defconstant  <span class="hl sym">+</span>alternatives<span class="hl sym">+</span>
  <span class="hl sym">'((</span><span class="hl str">&quot;B&quot;</span> <span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl sym">)  (</span><span class="hl str">&quot;D&quot;</span> <span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl str">&quot;H&quot;</span> <span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl sym">)  (</span><span class="hl str">&quot;K&quot;</span> <span class="hl str">&quot;(g|t)&quot;</span><span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl str">&quot;M&quot;</span> <span class="hl str">&quot;(a|c)&quot;</span><span class="hl sym">)    (</span><span class="hl str">&quot;N&quot;</span> <span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl str">&quot;R&quot;</span> <span class="hl str">&quot;(a|g)&quot;</span><span class="hl sym">)    (</span><span class="hl str">&quot;S&quot;</span> <span class="hl str">&quot;(c|t)&quot;</span><span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl str">&quot;V&quot;</span> <span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl sym">)  (</span><span class="hl str">&quot;W&quot;</span> <span class="hl str">&quot;(a|t)&quot;</span><span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl str">&quot;Y&quot;</span> <span class="hl str">&quot;(c|t)&quot;</span><span class="hl sym">)))</span>

#<span class="hl sym">+</span>sb<span class="hl sym">-</span>thread
<span class="hl sym">(</span><span class="hl kwa">progn</span>
  <span class="hl sym">(</span>defconstant  <span class="hl sym">+</span>cpu<span class="hl sym">-</span>count<span class="hl sym">+ (</span>sysconf <span class="hl num">84</span><span class="hl sym">))</span>
  <span class="hl sym">(</span>defvar <span class="hl sym">*</span>mutex<span class="hl sym">* (</span>make<span class="hl sym">-</span>mutex<span class="hl sym">))</span>
  <span class="hl sym">(</span>defvar <span class="hl sym">*</span>aux<span class="hl sym">-</span>mutex<span class="hl sym">* (</span>make<span class="hl sym">-</span>mutex<span class="hl sym">))</span>

  <span class="hl sym">(</span>defmacro bg  <span class="hl sym">(&amp;</span>body body<span class="hl sym">) `(</span>make<span class="hl sym">-</span>thread <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">() ,</span>&#64;body<span class="hl sym">)))</span>
  <span class="hl sym">(</span>defmacro join<span class="hl sym">-</span>all <span class="hl sym">(&amp;</span>body body<span class="hl sym">)</span>
	<span class="hl sym">`(</span><span class="hl kwa">mapcar</span>
	  #<span class="hl sym">'</span>join<span class="hl sym">-</span>thread
	  <span class="hl sym">(</span>loop for item in <span class="hl sym">(</span><span class="hl kwa">list</span> <span class="hl sym">,</span>&#64;body<span class="hl sym">)</span>
		 <span class="hl kwa">append</span> <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>consp item<span class="hl sym">)</span> item <span class="hl sym">(</span><span class="hl kwa">list</span> item<span class="hl sym">))))))</span>

<span class="hl sym">(</span><span class="hl kwa">defun read</span><span class="hl sym">-</span>all
    <span class="hl sym">(</span>stream <span class="hl sym">&amp;</span>aux <span class="hl sym">(</span>buf<span class="hl sym">-</span>size <span class="hl sym">(*</span> <span class="hl num">1024 1024</span><span class="hl sym">))</span>
     <span class="hl sym">(</span>size <span class="hl num">0</span><span class="hl sym">)</span>
     <span class="hl sym">(</span>buf<span class="hl sym">-</span><span class="hl kwa">list</span>
      <span class="hl sym">(</span>loop
         for buf <span class="hl sym">= (</span>make<span class="hl sym">-</span>string buf<span class="hl sym">-</span>size <span class="hl sym">:</span>element<span class="hl sym">-</span><span class="hl kwa">type</span> <span class="hl sym">'</span>base<span class="hl sym">-</span>char<span class="hl sym">)</span>
         for len <span class="hl sym">= (</span><span class="hl kwa">read</span><span class="hl sym">-</span>sequence buf stream<span class="hl sym">)</span>
         do <span class="hl sym">(</span>incf size len<span class="hl sym">)</span>
         collect <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(&lt;</span> len buf<span class="hl sym">-</span>size<span class="hl sym">) (</span>subseq buf <span class="hl num">0</span> len<span class="hl sym">)</span> buf<span class="hl sym">)</span>
         <span class="hl kwa">while</span> <span class="hl sym">(=</span> len buf<span class="hl sym">-</span>size<span class="hl sym">))))</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">type</span> fixnum size<span class="hl sym">))</span>
  <span class="hl sym">(</span>loop with res<span class="hl sym">-</span>string <span class="hl sym">= (</span>make<span class="hl sym">-</span>string size <span class="hl sym">:</span>element<span class="hl sym">-</span><span class="hl kwa">type</span> <span class="hl sym">'</span>base<span class="hl sym">-</span>char<span class="hl sym">)</span>
     with i of<span class="hl sym">-</span><span class="hl kwa">type</span> fixnum <span class="hl sym">=</span> <span class="hl num">0</span>
     for str in buf<span class="hl sym">-</span><span class="hl kwa">list</span>
     do <span class="hl sym">(</span>setf <span class="hl sym">(</span>subseq res<span class="hl sym">-</span>string i<span class="hl sym">) (</span>the simple<span class="hl sym">-</span>base<span class="hl sym">-</span>string str<span class="hl sym">))</span>
     <span class="hl sym">(</span>incf i <span class="hl sym">(</span><span class="hl kwa">length</span> <span class="hl sym">(</span>the simple<span class="hl sym">-</span>base<span class="hl sym">-</span>string str<span class="hl sym">)))</span>
     finally <span class="hl sym">(</span>return res<span class="hl sym">-</span>string<span class="hl sym">)))</span>

<span class="hl sym">(</span><span class="hl kwa">defun length</span><span class="hl sym">-</span>to<span class="hl sym">-</span>replace <span class="hl sym">(</span>match<span class="hl sym">)</span>
  <span class="hl sym">(</span>loop for x in match
     sum <span class="hl sym">(- (</span>the fixnum <span class="hl sym">(</span><span class="hl kwa">cdr</span> x<span class="hl sym">))</span>
            <span class="hl sym">(</span>the fixnum <span class="hl sym">(</span><span class="hl kwa">car</span> x<span class="hl sym">)))</span> of<span class="hl sym">-</span><span class="hl kwa">type</span> fixnum<span class="hl sym">))</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> replace<span class="hl sym">-</span>aux
    <span class="hl sym">(</span>match replacement target<span class="hl sym">-</span>string result<span class="hl sym">-</span>string
     <span class="hl sym">&amp;</span>key <span class="hl sym">(</span>match<span class="hl sym">-</span>begin <span class="hl num">0</span><span class="hl sym">) (</span>match<span class="hl sym">-</span>end <span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
     <span class="hl sym">(</span>match<span class="hl sym">-</span><span class="hl kwa">length</span> <span class="hl sym">(</span><span class="hl kwa">length</span> match<span class="hl sym">))</span>
     <span class="hl sym">&amp;</span>aux
     <span class="hl sym">(</span>len <span class="hl sym">(</span><span class="hl kwa">length</span> replacement<span class="hl sym">))</span>
     <span class="hl sym">(</span>first<span class="hl sym">-</span>match <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">zerop</span> match<span class="hl sym">-</span>begin<span class="hl sym">) '(</span><span class="hl num">0</span> . <span class="hl num">0</span><span class="hl sym">) (</span><span class="hl kwa">nth</span> <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">-</span> match<span class="hl sym">-</span>begin<span class="hl sym">)</span> match<span class="hl sym">)))</span>
     <span class="hl sym">(</span>target<span class="hl sym">-</span>start <span class="hl sym">(</span><span class="hl kwa">cdr</span> first<span class="hl sym">-</span>match<span class="hl sym">))</span>
     <span class="hl sym">(</span>result<span class="hl sym">-</span>start <span class="hl sym">(+ (</span>the fixnum <span class="hl sym">(*</span> len match<span class="hl sym">-</span>begin<span class="hl sym">))</span>
                    <span class="hl sym">(-</span> target<span class="hl sym">-</span>start
                       <span class="hl sym">(</span>the fixnum <span class="hl sym">(</span><span class="hl kwa">length</span><span class="hl sym">-</span>to<span class="hl sym">-</span>replace <span class="hl sym">(</span>subseq match <span class="hl num">0</span> match<span class="hl sym">-</span>begin<span class="hl sym">)))))))</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">type</span> fixnum match<span class="hl sym">-</span>begin match<span class="hl sym">-</span>end match<span class="hl sym">-</span><span class="hl kwa">length</span> target<span class="hl sym">-</span>start result<span class="hl sym">-</span>start len<span class="hl sym">)</span>
           <span class="hl sym">(</span><span class="hl kwa">type list</span> match<span class="hl sym">)</span>
           <span class="hl sym">(</span><span class="hl kwa">type</span> simple<span class="hl sym">-</span>base<span class="hl sym">-</span>string result<span class="hl sym">-</span>string target<span class="hl sym">-</span>string<span class="hl sym">)</span>
           <span class="hl sym">(</span><span class="hl kwa">type</span> vector replacement<span class="hl sym">))</span>
  <span class="hl sym">(</span>loop with <span class="hl sym">(</span>i j<span class="hl sym">)</span> of<span class="hl sym">-</span><span class="hl kwa">type</span> fixnum <span class="hl sym">= (</span><span class="hl kwa">list</span> result<span class="hl sym">-</span>start target<span class="hl sym">-</span>start<span class="hl sym">)</span>
     with mmatch <span class="hl sym">= (</span><span class="hl kwa">if</span> <span class="hl sym">(&gt;</span> match<span class="hl sym">-</span>begin match<span class="hl sym">-</span>end<span class="hl sym">)</span>
                       match <span class="hl sym">(</span>subseq match match<span class="hl sym">-</span>begin match<span class="hl sym">-</span>end<span class="hl sym">))</span>
     for pair in mmatch
     do <span class="hl sym">(</span>setf <span class="hl sym">(</span>subseq result<span class="hl sym">-</span>string i<span class="hl sym">) (</span>subseq target<span class="hl sym">-</span>string j <span class="hl sym">(</span><span class="hl kwa">car</span> pair<span class="hl sym">))</span>
              i <span class="hl sym">(+</span> i <span class="hl sym">(- (</span>the fixnum <span class="hl sym">(</span><span class="hl kwa">car</span> pair<span class="hl sym">))</span> j<span class="hl sym">))</span>
              <span class="hl sym">(</span>subseq result<span class="hl sym">-</span>string i<span class="hl sym">)</span> replacement
              j <span class="hl sym">(</span><span class="hl kwa">cdr</span> pair<span class="hl sym">)</span>
              i <span class="hl sym">(+</span> i len<span class="hl sym">))</span>
     finally <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">or</span> <span class="hl sym">(</span><span class="hl kwa">minusp</span> match<span class="hl sym">-</span>end<span class="hl sym">) (&lt;=</span> match<span class="hl sym">-</span><span class="hl kwa">length</span> match<span class="hl sym">-</span>end<span class="hl sym">))</span>
                 <span class="hl sym">(</span>setf <span class="hl sym">(</span>subseq result<span class="hl sym">-</span>string i <span class="hl sym">) (</span>subseq target<span class="hl sym">-</span>string j<span class="hl sym">))))</span>
  nil<span class="hl sym">)</span>

#<span class="hl sym">+</span>sb<span class="hl sym">-</span>thread
<span class="hl sym">(</span><span class="hl kwa">defun</span> parts
    <span class="hl sym">(</span>parts<span class="hl sym">-</span>num len
     <span class="hl sym">&amp;</span>aux
     <span class="hl sym">(</span>ranges <span class="hl sym">(</span>loop with <span class="hl sym">(</span>step rest<span class="hl sym">)</span> of<span class="hl sym">-</span><span class="hl kwa">type</span> fixnum <span class="hl sym">=  (</span>multiple<span class="hl sym">-</span>value<span class="hl sym">-</span><span class="hl kwa">list</span> <span class="hl sym">(</span>floor len parts<span class="hl sym">-</span>num<span class="hl sym">))</span>
                with i of<span class="hl sym">-</span><span class="hl kwa">type</span> fixnum <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">while</span> <span class="hl sym">(&lt;</span> i len<span class="hl sym">)</span>
                collect i into res of<span class="hl sym">-</span><span class="hl kwa">type</span> fixnum
                do <span class="hl sym">(</span>incf i step<span class="hl sym">)(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>plusp rest<span class="hl sym">) (</span><span class="hl kwa">progn</span> <span class="hl sym">(</span>incf i<span class="hl sym">) (</span>decf rest<span class="hl sym">)) )</span>
                finally <span class="hl sym">(</span>return <span class="hl sym">(</span><span class="hl kwa">append</span> res <span class="hl sym">(</span><span class="hl kwa">list</span> len<span class="hl sym">))))</span>
             <span class="hl sym">))</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">type</span> fixnum len parts<span class="hl sym">-</span>num<span class="hl sym">)</span>
           <span class="hl sym">(</span><span class="hl kwa">type list</span> ranges<span class="hl sym">))</span>
  <span class="hl sym">(</span><span class="hl kwa">mapcar</span> #<span class="hl sym">'</span><span class="hl kwa">cons</span> ranges <span class="hl sym">(</span>subseq ranges <span class="hl num">1</span><span class="hl sym">)))</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> replace<span class="hl sym">-</span>all
    <span class="hl sym">(</span>regexp replacement target<span class="hl sym">-</span>string
     <span class="hl sym">&amp;</span>aux <span class="hl sym">(</span>rmatch <span class="hl sym">'()) (</span>match <span class="hl sym">'())</span>
     <span class="hl sym">(</span>result<span class="hl sym">-</span>string <span class="hl sym">(</span>make<span class="hl sym">-</span>string <span class="hl num">0</span> <span class="hl sym">:</span>element<span class="hl sym">-</span><span class="hl kwa">type</span> <span class="hl sym">'</span>base<span class="hl sym">-</span>char<span class="hl sym">)))</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">type</span> simple<span class="hl sym">-</span>base<span class="hl sym">-</span>string result<span class="hl sym">-</span>string target<span class="hl sym">-</span>string<span class="hl sym">)</span>
           <span class="hl sym">(</span><span class="hl kwa">type</span> vector replacement<span class="hl sym">))</span>
  <span class="hl sym">(</span>cl<span class="hl sym">-</span>ppcre<span class="hl sym">:</span>do<span class="hl sym">-</span>scans
      <span class="hl sym">(</span>match<span class="hl sym">-</span>start match<span class="hl sym">-</span>end reg<span class="hl sym">-</span>starts reg<span class="hl sym">-</span>ends regexp target<span class="hl sym">-</span>string nil<span class="hl sym">)</span>
    <span class="hl sym">(</span>push <span class="hl sym">(</span><span class="hl kwa">cons</span> match<span class="hl sym">-</span>start match<span class="hl sym">-</span>end<span class="hl sym">)</span> rmatch<span class="hl sym">))</span>
  <span class="hl sym">(</span><span class="hl kwa">if</span> rmatch
      <span class="hl sym">(</span><span class="hl kwa">progn</span>
        <span class="hl sym">(</span>setf match <span class="hl sym">(</span><span class="hl kwa">reverse</span> rmatch<span class="hl sym">)</span>
              result<span class="hl sym">-</span>string <span class="hl sym">(</span>make<span class="hl sym">-</span>string
                             <span class="hl sym">(+ (- (</span><span class="hl kwa">length</span> target<span class="hl sym">-</span>string<span class="hl sym">)</span>
                                   <span class="hl sym">(</span><span class="hl kwa">length</span><span class="hl sym">-</span>to<span class="hl sym">-</span>replace match<span class="hl sym">))</span>
                                <span class="hl sym">(</span>the fixnum <span class="hl sym">(* (</span><span class="hl kwa">length</span> replacement<span class="hl sym">)</span>
                                               <span class="hl sym">(</span><span class="hl kwa">length</span> match<span class="hl sym">)))) :</span>element<span class="hl sym">-</span><span class="hl kwa">type</span> <span class="hl sym">'</span>base<span class="hl sym">-</span>char<span class="hl sym">))</span>
        #<span class="hl sym">-</span>sb<span class="hl sym">-</span>thread
        <span class="hl sym">(</span>replace<span class="hl sym">-</span>aux match replacement target<span class="hl sym">-</span>string result<span class="hl sym">-</span>string<span class="hl sym">)</span>
        #<span class="hl sym">+</span>sb<span class="hl sym">-</span>thread
        <span class="hl sym">(</span><span class="hl kwa">mapcar</span> #<span class="hl sym">'</span>join<span class="hl sym">-</span>thread
                <span class="hl sym">(</span>loop with len of<span class="hl sym">-</span><span class="hl kwa">type</span> fixnum <span class="hl sym">= (</span><span class="hl kwa">length</span> match<span class="hl sym">)</span>
				   with parts<span class="hl sym">-</span><span class="hl kwa">list</span>  <span class="hl sym">= (</span>parts <span class="hl sym">+</span>cpu<span class="hl sym">-</span>count<span class="hl sym">+</span> len<span class="hl sym">)</span>
                   with current of<span class="hl sym">-</span><span class="hl kwa">type</span> fixnum <span class="hl sym">=</span> <span class="hl num">0</span>
                   <span class="hl kwa">repeat</span> <span class="hl sym">+</span>cpu<span class="hl sym">-</span>count<span class="hl sym">+</span>
                   collect
					 <span class="hl sym">(</span>bg <span class="hl sym">(</span>let <span class="hl sym">(</span>range<span class="hl sym">)</span>
                           <span class="hl sym">(</span>with<span class="hl sym">-</span>mutex <span class="hl sym">(*</span>mutex<span class="hl sym">*)</span>
                             <span class="hl sym">(</span>setf range <span class="hl sym">(</span><span class="hl kwa">nth</span> current parts<span class="hl sym">-</span><span class="hl kwa">list</span><span class="hl sym">))</span>
                             <span class="hl sym">(</span>incf current<span class="hl sym">))</span>
                           <span class="hl sym">(</span>replace<span class="hl sym">-</span>aux match replacement target<span class="hl sym">-</span>string result<span class="hl sym">-</span>string
                                        <span class="hl sym">:</span>match<span class="hl sym">-</span>begin <span class="hl sym">(</span><span class="hl kwa">car</span> range<span class="hl sym">) :</span>match<span class="hl sym">-</span>end <span class="hl sym">(</span><span class="hl kwa">cdr</span> range<span class="hl sym">)</span>
                                        <span class="hl sym">:</span>match<span class="hl sym">-</span><span class="hl kwa">length</span> len<span class="hl sym">)))))</span>
        result<span class="hl sym">-</span>string<span class="hl sym">)</span>
      target<span class="hl sym">-</span>string<span class="hl sym">))</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> main <span class="hl sym">(&amp;</span>optional <span class="hl sym">(</span>stream <span class="hl sym">*</span>standard<span class="hl sym">-</span>input<span class="hl sym">*)</span>
             <span class="hl sym">&amp;</span>aux <span class="hl sym">(</span>sequence <span class="hl sym">(</span><span class="hl kwa">read</span><span class="hl sym">-</span>all stream<span class="hl sym">))</span>
             <span class="hl sym">(</span>size <span class="hl sym">(</span><span class="hl kwa">length</span> sequence<span class="hl sym">)))</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">type</span> simple<span class="hl sym">-</span>base<span class="hl sym">-</span>string sequence<span class="hl sym">))</span>
  <span class="hl sym">(</span>setf sequence <span class="hl sym">(</span>replace<span class="hl sym">-</span>all <span class="hl str">&quot;&gt;[^</span><span class="hl esc">\\</span><span class="hl str">n]*</span><span class="hl esc">\\</span><span class="hl str">n|</span><span class="hl esc">\\</span><span class="hl str">n&quot;</span> <span class="hl str">&quot;&quot;</span> sequence<span class="hl sym">))</span>

  #<span class="hl sym">-</span>sb<span class="hl sym">-</span>thread
  <span class="hl sym">(</span><span class="hl kwa">progn</span>
    <span class="hl sym">(</span>loop for regex in <span class="hl sym">+</span>regex<span class="hl sym">-</span><span class="hl kwa">list</span><span class="hl sym">+</span> do
         <span class="hl sym">(</span>format t <span class="hl str">&quot;~a ~a~%&quot;</span> regex
                 <span class="hl sym">(/ (</span><span class="hl kwa">length</span>
                     <span class="hl sym">(</span>the <span class="hl kwa">list</span>
                       <span class="hl sym">(</span>cl<span class="hl sym">-</span>ppcre<span class="hl sym">:</span>all<span class="hl sym">-</span>matches regex sequence<span class="hl sym">)))</span> <span class="hl num">2</span><span class="hl sym">)))</span>
    <span class="hl sym">(</span>format t <span class="hl str">&quot;~%~a~%~a~%&quot;</span> size <span class="hl sym">(</span><span class="hl kwa">length</span> sequence<span class="hl sym">))</span>
    <span class="hl sym">(</span>loop for pair in <span class="hl sym">+</span>alternatives<span class="hl sym">+</span> do
         <span class="hl sym">(</span>setf sequence <span class="hl sym">(</span>replace<span class="hl sym">-</span>all  <span class="hl sym">(</span><span class="hl kwa">car</span> pair<span class="hl sym">) (</span><span class="hl kwa">cadr</span> pair<span class="hl sym">)</span> sequence <span class="hl sym">)))</span>
    <span class="hl sym">(</span>format t <span class="hl str">&quot;~a~%&quot;</span> <span class="hl sym">(</span><span class="hl kwa">length</span> sequence<span class="hl sym">)))</span>
  #<span class="hl sym">+</span>sb<span class="hl sym">-</span>thread
  <span class="hl sym">(</span>let<span class="hl sym">* ((</span>len <span class="hl sym">(</span><span class="hl kwa">length</span> <span class="hl sym">+</span>regex<span class="hl sym">-</span><span class="hl kwa">list</span><span class="hl sym">+))</span>
         <span class="hl sym">(</span>result <span class="hl sym">(</span>make<span class="hl sym">-</span><span class="hl kwa">list</span> <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">+</span> len<span class="hl sym">))))</span>
    <span class="hl sym">(</span>join<span class="hl sym">-</span>all
	 <span class="hl sym">(</span>loop with idx of<span class="hl sym">-</span><span class="hl kwa">type</span> fixnum <span class="hl sym">=</span> <span class="hl num">0</span>
		<span class="hl kwa">repeat</span> len
		collect
          <span class="hl sym">(</span>bg <span class="hl sym">(</span>let <span class="hl sym">(</span>reg cur<span class="hl sym">)</span>
                <span class="hl sym">(</span>with<span class="hl sym">-</span>mutex <span class="hl sym">(*</span>aux<span class="hl sym">-</span>mutex<span class="hl sym">*)</span>
                  <span class="hl sym">(</span>setf cur idx reg <span class="hl sym">(</span><span class="hl kwa">nth</span> cur <span class="hl sym">+</span>regex<span class="hl sym">-</span><span class="hl kwa">list</span><span class="hl sym">+))</span>
                  <span class="hl sym">(</span>incf idx<span class="hl sym">))</span>
              <span class="hl sym">(</span>setf <span class="hl sym">(</span><span class="hl kwa">nth</span> cur result<span class="hl sym">)</span>
                    <span class="hl sym">(</span>format nil <span class="hl str">&quot;~a ~a&quot;</span> reg
                            <span class="hl sym">(/ (</span><span class="hl kwa">length</span>
                                <span class="hl sym">(</span>the <span class="hl kwa">list</span>
                                  <span class="hl sym">(</span>cl<span class="hl sym">-</span>ppcre<span class="hl sym">:</span>all<span class="hl sym">-</span>matches reg sequence<span class="hl sym">)))</span> <span class="hl num">2</span><span class="hl sym">))))))</span>
	 <span class="hl sym">(</span>bg <span class="hl sym">(</span>loop with seq <span class="hl sym">= (</span>copy<span class="hl sym">-</span>seq sequence<span class="hl sym">)</span>
            for pair in <span class="hl sym">+</span>alternatives<span class="hl sym">+</span> do
              <span class="hl sym">(</span>setf seq <span class="hl sym">(</span>replace<span class="hl sym">-</span>all  <span class="hl sym">(</span><span class="hl kwa">car</span> pair<span class="hl sym">) (</span><span class="hl kwa">cadr</span> pair<span class="hl sym">)</span> seq <span class="hl sym">))</span>
            finally <span class="hl sym">(</span>setf <span class="hl sym">(</span><span class="hl kwa">nth</span> len result<span class="hl sym">)</span>
                          <span class="hl sym">(</span>format nil <span class="hl str">&quot;~%~a~%~a~%~a&quot;</span> size <span class="hl sym">(</span><span class="hl kwa">length</span> sequence<span class="hl sym">) (</span><span class="hl kwa">length</span> seq<span class="hl sym">))))))</span>
    <span class="hl sym">(</span>format t <span class="hl str">&quot;~{~a~%~}&quot;</span> result<span class="hl sym">))</span>
  <span class="hl sym">)</span>
