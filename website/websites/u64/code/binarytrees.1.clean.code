<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/ </span>
<span class="hl com"> </span>
<span class="hl com">   contributed by Isaac Gouy (Clean novice)</span>
<span class="hl com">   corrected by John van Groningen</span>
<span class="hl com">*/</span>

module binarytrees
import StdEnv<span class="hl sym">,</span> LanguageShootout

Start world
   <span class="hl sym">#</span> max`          <span class="hl sym">=</span> max <span class="hl sym">(</span>min`<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">)</span> argi
   <span class="hl sym">#</span> stretch`      <span class="hl sym">=</span> max` <span class="hl sym">+</span> <span class="hl num">1</span>
   <span class="hl sym"># (</span>io<span class="hl sym">,</span>world<span class="hl sym">)    =</span> stdio world
   <span class="hl sym">#!</span> io           <span class="hl sym">=</span> showItemCheck stretch` <span class="hl sym">(</span>bottomup <span class="hl num">0</span> stretch`<span class="hl sym">)</span> <span class="hl str">&quot;stretch tree of depth &quot;</span> io
   <span class="hl sym">#!</span> longLived    <span class="hl sym">=</span> bottomup <span class="hl num">0</span> max`
   <span class="hl sym">#!</span> io           <span class="hl sym">=</span> depthloop min` max` io
   <span class="hl sym">#!</span> io           <span class="hl sym">=</span> showItemCheck max` longLived <span class="hl str">&quot;long lived tree of depth &quot;</span> io		
   <span class="hl sym"># (</span>error<span class="hl sym">,</span>world<span class="hl sym">) =</span> fclose io world
   <span class="hl sym">=</span> world		

min` <span class="hl sym">=</span> <span class="hl num">4</span>	
	
showItemCheck d a s io
   <span class="hl sym">=</span> io &lt;&lt;&lt; s &lt;&lt;&lt; toString <span class="hl sym">(</span>d<span class="hl sym">)</span> &lt;&lt;&lt;
      <span class="hl str">&quot;\t check: &quot;</span> &lt;&lt;&lt; toString <span class="hl sym">(</span>itemcheck a<span class="hl sym">)</span> &lt;&lt;&lt; <span class="hl str">&quot;\n&quot;</span>	
		
showCheck i d check io
   <span class="hl sym">=</span> io &lt;&lt;&lt; toString <span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>i<span class="hl sym">)</span> &lt;&lt;&lt; <span class="hl str">&quot;\t trees of depth &quot;</span> &lt;&lt;&lt; 
      toString <span class="hl sym">(</span>d<span class="hl sym">)</span> &lt;&lt;&lt; <span class="hl str">&quot;\t check: &quot;</span> &lt;&lt;&lt; toString <span class="hl sym">(</span>check<span class="hl sym">)</span> &lt;&lt;&lt; <span class="hl str">&quot;\n&quot;</span>						
				
depthloop d m io
   <span class="hl sym">|</span> d &gt; m  <span class="hl sym">=</span> io
            <span class="hl sym">=</span> depthloop <span class="hl sym">(</span>d<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">)</span> m <span class="hl sym">(</span>showCheck n d check io<span class="hl sym">)</span>	
   where 
   n <span class="hl sym">=</span> <span class="hl num">1</span> &lt;&lt; <span class="hl sym">(</span>m <span class="hl sym">-</span> d <span class="hl sym">+</span> min`<span class="hl sym">)</span>
   check <span class="hl sym">=</span> sumloop n d <span class="hl num">0</span>	

sumloop <span class="hl sym">:: !</span>Int <span class="hl sym">!</span>Int <span class="hl sym">!</span>Int <span class="hl sym">-&gt;</span> Int	
sumloop n d sum
   <span class="hl sym">|</span> n &gt; <span class="hl num">0</span>	<span class="hl sym">=</span> sumloop <span class="hl sym">(</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span> d <span class="hl sym">(</span>sum <span class="hl sym">+</span> check <span class="hl sym">+</span> check`<span class="hl sym">)</span>	
            <span class="hl sym">=</span> sum
   where 
   check <span class="hl sym">=</span> itemcheck <span class="hl sym">(</span>bottomup n d<span class="hl sym">)</span>
   check` <span class="hl sym">=</span> itemcheck <span class="hl sym">(</span>bottomup <span class="hl sym">(-</span><span class="hl num">1</span><span class="hl sym">*</span>n<span class="hl sym">)</span> d<span class="hl sym">)</span>	   


<span class="hl sym">::</span> Tree <span class="hl sym">=</span> TreeNode <span class="hl sym">!</span>Int Tree Tree <span class="hl sym">|</span> Nil

bottomup <span class="hl sym">:: !</span>Int <span class="hl sym">!</span>Int <span class="hl sym">-&gt;</span> Tree
bottomup i d
   <span class="hl sym">|</span> d <span class="hl sym">==</span> <span class="hl num">0</span> <span class="hl sym">=</span> TreeNode i Nil Nil
            <span class="hl sym">=</span> TreeNode i <span class="hl sym">(</span>bottomup <span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>i<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)(</span>d<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)) (</span>bottomup <span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>i<span class="hl sym">)(</span>d<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">))</span>

itemcheck Nil <span class="hl sym">=</span> <span class="hl num">0</span>
itemcheck <span class="hl sym">(</span>TreeNode a left right<span class="hl sym">) =</span> a <span class="hl sym">+</span> itemcheck<span class="hl sym">(</span>left<span class="hl sym">) -</span> itemcheck<span class="hl sym">(</span>right<span class="hl sym">)</span>					
