<span class="hl com">/*</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Contributed by Eckehard Berns</span>
<span class="hl com"> * Based on code by Heiner Marxen</span>
<span class="hl com"> * and the ATS version by Hongwei Xi</span>
<span class="hl com"> */</span>

<span class="hl dir">#include &lt;stdlib.h&gt;</span>
<span class="hl dir">#include &lt;stdio.h&gt;</span>

<span class="hl dir">#define USETHREADS 1</span>
<span class="hl dir">#if USETHREADS</span>
<span class="hl dir">#include &lt;pthread.h&gt;</span>
<span class="hl dir">#endif</span>

<span class="hl kwb">struct</span> worker_args <span class="hl sym">{</span>
   <span class="hl kwb">int</span> i<span class="hl sym">,</span> n<span class="hl sym">;</span>
<span class="hl dir">#if USETHREADS</span>
   pthread_t id<span class="hl sym">;</span>
<span class="hl dir">#endif</span>
   <span class="hl kwb">struct</span> worker_args <span class="hl sym">*</span>next<span class="hl sym">;</span>
<span class="hl sym">};</span>

<span class="hl kwb">static void</span> <span class="hl sym">*</span>
<span class="hl kwd">fannkuch_worker</span><span class="hl sym">(</span><span class="hl kwb">void</span> <span class="hl sym">*</span>_arg<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwb">struct</span> worker_args <span class="hl sym">*</span>args <span class="hl sym">=</span> _arg<span class="hl sym">;</span>
   <span class="hl kwb">int</span> <span class="hl sym">*</span>perm1<span class="hl sym">, *</span>count<span class="hl sym">, *</span>perm<span class="hl sym">;</span>
   <span class="hl kwb">int</span> maxflips<span class="hl sym">,</span> flips<span class="hl sym">,</span> i<span class="hl sym">,</span> n<span class="hl sym">,</span> r<span class="hl sym">,</span> j<span class="hl sym">,</span> k<span class="hl sym">,</span> tmp<span class="hl sym">;</span>

   maxflips <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   n <span class="hl sym">=</span> args<span class="hl sym">-&gt;</span>n<span class="hl sym">;</span>
   perm1 <span class="hl sym">=</span> <span class="hl kwd">malloc</span><span class="hl sym">(</span>n <span class="hl sym">*</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span><span class="hl kwb">int</span><span class="hl sym">));</span>
   perm <span class="hl sym">=</span> <span class="hl kwd">malloc</span><span class="hl sym">(</span>n <span class="hl sym">*</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span><span class="hl kwb">int</span><span class="hl sym">));</span>
   count <span class="hl sym">=</span> <span class="hl kwd">malloc</span><span class="hl sym">(</span>n <span class="hl sym">*</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span><span class="hl kwb">int</span><span class="hl sym">));</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> n<span class="hl sym">;</span> i<span class="hl sym">++)</span>
      perm1<span class="hl sym">[</span>i<span class="hl sym">] =</span> i<span class="hl sym">;</span>
   perm1<span class="hl sym">[</span>args<span class="hl sym">-&gt;</span>i<span class="hl sym">] =</span> n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>
   perm1<span class="hl sym">[</span>n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">] =</span> args<span class="hl sym">-&gt;</span>i<span class="hl sym">;</span>
   r <span class="hl sym">=</span> n<span class="hl sym">;</span>

   <span class="hl kwa">for</span> <span class="hl sym">(;;) {</span>
      <span class="hl kwa">for</span> <span class="hl sym">(;</span> r <span class="hl sym">&gt;</span> <span class="hl num">1</span><span class="hl sym">;</span> r<span class="hl sym">--)</span>
         count<span class="hl sym">[</span>r <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">] =</span> r<span class="hl sym">;</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>perm1<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] !=</span> <span class="hl num">0</span> <span class="hl sym">&amp;&amp;</span> perm1<span class="hl sym">[</span>n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">] !=</span> n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">) {</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> n<span class="hl sym">;</span> i<span class="hl sym">++)</span>
            perm<span class="hl sym">[</span>i<span class="hl sym">] =</span> perm1<span class="hl sym">[</span>i<span class="hl sym">];</span>
         flips <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         k <span class="hl sym">=</span> perm<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
         <span class="hl kwa">do</span> <span class="hl sym">{</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">,</span> j <span class="hl sym">=</span> k <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> j<span class="hl sym">;</span> i<span class="hl sym">++,</span> j<span class="hl sym">--) {</span>
               tmp <span class="hl sym">=</span> perm<span class="hl sym">[</span>i<span class="hl sym">];</span>
               perm<span class="hl sym">[</span>i<span class="hl sym">] =</span> perm<span class="hl sym">[</span>j<span class="hl sym">];</span>
               perm<span class="hl sym">[</span>j<span class="hl sym">] =</span> tmp<span class="hl sym">;</span>
            <span class="hl sym">}</span>
            flips<span class="hl sym">++;</span>
            tmp <span class="hl sym">=</span> perm<span class="hl sym">[</span>k<span class="hl sym">];</span>
            perm<span class="hl sym">[</span>k<span class="hl sym">] =</span> k<span class="hl sym">;</span>
            k <span class="hl sym">=</span> tmp<span class="hl sym">;</span>
         <span class="hl sym">}</span> <span class="hl kwa">while</span> <span class="hl sym">(</span>k<span class="hl sym">);</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>maxflips <span class="hl sym">&lt;</span> flips<span class="hl sym">)</span>
            maxflips <span class="hl sym">=</span> flips<span class="hl sym">;</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">for</span> <span class="hl sym">(;;) {</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>r <span class="hl sym">&gt;=</span> n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">) {</span>
            <span class="hl kwd">free</span><span class="hl sym">(</span>perm1<span class="hl sym">);</span>
            <span class="hl kwd">free</span><span class="hl sym">(</span>perm<span class="hl sym">);</span>
            <span class="hl kwd">free</span><span class="hl sym">(</span>count<span class="hl sym">);</span>
            <span class="hl kwa">return</span> <span class="hl sym">(</span><span class="hl kwb">void</span> <span class="hl sym">*)</span>maxflips<span class="hl sym">;</span>
         <span class="hl sym">}</span>

         <span class="hl sym">{</span>
            <span class="hl kwb">int</span> p0 <span class="hl sym">=</span> perm1<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> r<span class="hl sym">;</span> i<span class="hl sym">++)</span>
               perm1<span class="hl sym">[</span>i<span class="hl sym">] =</span> perm1<span class="hl sym">[</span>i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">];</span>
            perm1<span class="hl sym">[</span>i<span class="hl sym">] =</span> p0<span class="hl sym">;</span>
         <span class="hl sym">}</span>
         <span class="hl kwa">if</span> <span class="hl sym">(--</span>count<span class="hl sym">[</span>r<span class="hl sym">] &gt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
            <span class="hl kwa">break</span><span class="hl sym">;</span>
         r<span class="hl sym">++;</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwb">static int</span>
<span class="hl kwd">fannkuch</span><span class="hl sym">(</span><span class="hl kwb">int</span> n<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwb">struct</span> worker_args <span class="hl sym">*</span>args<span class="hl sym">, *</span>targs<span class="hl sym">;</span>
   <span class="hl kwb">int</span> showmax <span class="hl sym">=</span> <span class="hl num">30</span><span class="hl sym">;</span>
   <span class="hl kwb">int</span> <span class="hl sym">*</span>perm1<span class="hl sym">, *</span>count<span class="hl sym">,</span> i<span class="hl sym">,</span> r<span class="hl sym">,</span> maxflips<span class="hl sym">,</span> flips<span class="hl sym">;</span>

   args <span class="hl sym">=</span> NULL<span class="hl sym">;</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span> i<span class="hl sym">++) {</span>
      targs <span class="hl sym">=</span> <span class="hl kwd">malloc</span><span class="hl sym">(</span><span class="hl kwa">sizeof</span><span class="hl sym">(</span><span class="hl kwb">struct</span> worker_args<span class="hl sym">));</span>
      targs<span class="hl sym">-&gt;</span>i <span class="hl sym">=</span> i<span class="hl sym">;</span>
      targs<span class="hl sym">-&gt;</span>n <span class="hl sym">=</span> n<span class="hl sym">;</span>
      targs<span class="hl sym">-&gt;</span>next <span class="hl sym">=</span> args<span class="hl sym">;</span>
      args <span class="hl sym">=</span> targs<span class="hl sym">;</span>
<span class="hl dir">#if USETHREADS</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl num">0</span> <span class="hl sym">!=</span> <span class="hl kwd">pthread_create</span><span class="hl sym">(&amp;</span>args<span class="hl sym">-&gt;</span>id<span class="hl sym">,</span> NULL<span class="hl sym">,</span> fannkuch_worker<span class="hl sym">,</span> args<span class="hl sym">))</span>
         <span class="hl kwd">abort</span><span class="hl sym">();</span>
<span class="hl dir">#endif</span>
   <span class="hl sym">}</span>

   perm1 <span class="hl sym">=</span> <span class="hl kwd">malloc</span><span class="hl sym">(</span>n <span class="hl sym">*</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span><span class="hl kwb">int</span><span class="hl sym">));</span>
   count <span class="hl sym">=</span> <span class="hl kwd">malloc</span><span class="hl sym">(</span>n <span class="hl sym">*</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span><span class="hl kwb">int</span><span class="hl sym">));</span>

   <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> n<span class="hl sym">;</span> i<span class="hl sym">++)</span>
      perm1<span class="hl sym">[</span>i<span class="hl sym">] =</span> i<span class="hl sym">;</span>

   r <span class="hl sym">=</span> n<span class="hl sym">;</span>
   <span class="hl kwa">for</span> <span class="hl sym">(;;) {</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>showmax<span class="hl sym">) {</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> n<span class="hl sym">;</span> i<span class="hl sym">++)</span>
            <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;%d&quot;</span><span class="hl sym">,</span> perm1<span class="hl sym">[</span>i<span class="hl sym">] +</span> <span class="hl num">1</span><span class="hl sym">);</span>
         <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">);</span>
         showmax<span class="hl sym">--;</span>
      <span class="hl sym">}</span> <span class="hl kwa">else</span>
         <span class="hl kwa">goto</span> cleanup<span class="hl sym">;</span>

      <span class="hl kwa">for</span> <span class="hl sym">(;</span> r <span class="hl sym">&gt;</span> <span class="hl num">1</span><span class="hl sym">;</span> r<span class="hl sym">--)</span>
         count<span class="hl sym">[</span>r <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">] =</span> r<span class="hl sym">;</span>

      <span class="hl kwa">for</span> <span class="hl sym">(;;) {</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>r <span class="hl sym">==</span> n<span class="hl sym">)</span>
            <span class="hl kwa">goto</span> cleanup<span class="hl sym">;</span>
         <span class="hl sym">{</span>
            <span class="hl kwb">int</span> p0 <span class="hl sym">=</span> perm1<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> r<span class="hl sym">;</span> i<span class="hl sym">++)</span>
               perm1<span class="hl sym">[</span>i<span class="hl sym">] =</span> perm1<span class="hl sym">[</span>i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">];</span>
            perm1<span class="hl sym">[</span>i<span class="hl sym">] =</span> p0<span class="hl sym">;</span>
         <span class="hl sym">}</span>
         <span class="hl kwa">if</span> <span class="hl sym">(--</span>count<span class="hl sym">[</span>r<span class="hl sym">] &gt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
            <span class="hl kwa">break</span><span class="hl sym">;</span>

         r<span class="hl sym">++;</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

    cleanup<span class="hl sym">:</span>
   <span class="hl kwd">free</span><span class="hl sym">(</span>perm1<span class="hl sym">);</span>
   <span class="hl kwd">free</span><span class="hl sym">(</span>count<span class="hl sym">);</span>
   maxflips <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">while</span> <span class="hl sym">(</span>args <span class="hl sym">!=</span> NULL<span class="hl sym">) {</span>
<span class="hl dir">#if USETHREADS</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl num">0</span> <span class="hl sym">!=</span> <span class="hl kwd">pthread_join</span><span class="hl sym">(</span>args<span class="hl sym">-&gt;</span>id<span class="hl sym">, (</span><span class="hl kwb">void</span> <span class="hl sym">**)&amp;</span>flips<span class="hl sym">))</span>
         <span class="hl kwd">abort</span><span class="hl sym">();</span>
<span class="hl dir">#else</span>
      flips <span class="hl sym">= (</span><span class="hl kwb">int</span><span class="hl sym">)</span><span class="hl kwd">fannkuch_worker</span><span class="hl sym">(</span>args<span class="hl sym">);</span>
<span class="hl dir">#endif</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>maxflips <span class="hl sym">&lt;</span> flips<span class="hl sym">)</span>
         maxflips <span class="hl sym">=</span> flips<span class="hl sym">;</span>
      targs <span class="hl sym">=</span> args<span class="hl sym">;</span>
      args <span class="hl sym">=</span> args<span class="hl sym">-&gt;</span>next<span class="hl sym">;</span>
      <span class="hl kwd">free</span><span class="hl sym">(</span>targs<span class="hl sym">);</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">return</span> maxflips<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span>
<span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span> ac<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">**</span>av<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwb">int</span> n <span class="hl sym">=</span> ac <span class="hl sym">&gt;</span> <span class="hl num">1</span> ? <span class="hl kwd">atoi</span><span class="hl sym">(</span>av<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]) :</span> <span class="hl num">0</span><span class="hl sym">;</span>

   <span class="hl kwa">if</span> <span class="hl sym">(</span>n <span class="hl sym">&lt;</span> <span class="hl num">1</span><span class="hl sym">) {</span>
      <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;Wrong argument.</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">);</span>
      <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>
   <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;Pfannkuchen(%d) = %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl kwd">fannkuch</span><span class="hl sym">(</span>n<span class="hl sym">));</span>
   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

