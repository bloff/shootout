<span class="hl com">/**</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * Based on the CAL Open Quark version</span>
<span class="hl com"> * Contributed by Magnus Byne.</span>
<span class="hl com"> */</span>
<span class="hl kwa">module</span> Binarytrees<span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Prelude <span class="hl kwa">using</span>
    <span class="hl kwa">typeConstructor</span> <span class="hl sym">=</span> Int<span class="hl sym">,</span> String<span class="hl sym">;</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> eager<span class="hl sym">,</span> max<span class="hl sym">,</span> seq<span class="hl sym">,</span> stringToInt<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Bits <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> shiftL<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Collections<span class="hl sym">.</span>List <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> head<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Debug <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> show<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>IO<span class="hl sym">.</span>Console <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> printLine<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">data public</span> Tree <span class="hl sym">=</span>
    Empty <span class="hl sym">|</span>
    Node
        value <span class="hl sym">:: !</span>Int
        leftChild <span class="hl sym">:: !</span>Tree
        rightChild <span class="hl sym">:: !</span>Tree
    <span class="hl sym">;</span>

<span class="hl com">/** Traverses tree and returns a checksum on the values in the nodes.*/</span>
check <span class="hl sym">::</span> Tree <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>
check <span class="hl sym">!</span>tree <span class="hl sym">=</span>
    <span class="hl kwa">case</span> tree <span class="hl kwa">of</span>
    Empty <span class="hl sym">-&gt;</span> <span class="hl num">0</span><span class="hl sym">;</span>
    Node value left right <span class="hl sym">-&gt;</span> value <span class="hl sym">+</span> check left <span class="hl sym">-</span> check right<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl com">/** builds a tree of depth */</span>
make <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Tree<span class="hl sym">;</span>
make <span class="hl sym">!</span>i <span class="hl sym">!</span>depth <span class="hl sym">=</span>
    <span class="hl kwa">if</span> depth <span class="hl sym">==</span> <span class="hl num">1</span> <span class="hl kwa">then</span>
        Node
            i
            <span class="hl sym">(</span>Node <span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> i <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span> Empty Empty<span class="hl sym">)</span>
            <span class="hl sym">(</span>Node <span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> i<span class="hl sym">)</span> Empty Empty<span class="hl sym">)</span>
    <span class="hl kwa">else</span>
        Node
            i
            <span class="hl sym">(</span>make <span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> i <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">) (</span>depth <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">))</span>
            <span class="hl sym">(</span>make <span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> i<span class="hl sym">) (</span>depth <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">))</span>
    <span class="hl sym">;</span>

<span class="hl com">/**</span>
<span class="hl com"> * Test different numbers of trees at different depths and</span>
<span class="hl com"> * writes the number and checksum to stdout.</span>
<span class="hl com"> */</span>
testTrees <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt; ();</span>
testTrees <span class="hl sym">!</span>depth <span class="hl sym">!</span>minDepth <span class="hl sym">!</span>maxDepth <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        <span class="hl slc">//allocates and checks 2i trees, each of depth depth</span>
        testFixedDepth <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>
        testFixedDepth <span class="hl sym">!</span>i <span class="hl sym">!</span>depth <span class="hl sym">!</span>checksum <span class="hl sym">=</span>
            <span class="hl kwa">if</span> i <span class="hl sym">==</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
                checksum
            <span class="hl kwa">else</span>
                testFixedDepth
                    <span class="hl sym">(</span>i <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span>
                    depth
                    <span class="hl sym">(</span>
                        checksum <span class="hl sym">+</span> check <span class="hl sym">(</span>make i depth<span class="hl sym">)</span>
                        <span class="hl sym">+</span> check <span class="hl sym">(</span>make <span class="hl sym">(-</span>i<span class="hl sym">)</span> depth<span class="hl sym">)</span>
                    <span class="hl sym">)</span>
            <span class="hl sym">;</span>
    <span class="hl kwa">in</span>
        <span class="hl kwa">if</span> depth <span class="hl sym">&gt;</span> maxDepth <span class="hl kwa">then</span>
            <span class="hl sym">()</span>
        <span class="hl kwa">else</span>
            <span class="hl kwa">let</span>
                i <span class="hl sym">::</span> Int<span class="hl sym">;</span>
                i <span class="hl sym">=</span> eager $ shiftL <span class="hl num">1</span> <span class="hl sym">(</span>maxDepth <span class="hl sym">-</span> depth <span class="hl sym">+</span> minDepth<span class="hl sym">);</span>
            <span class="hl kwa">in</span>
                printLine
                    <span class="hl sym">(</span>
                        show <span class="hl sym">(</span>i <span class="hl sym">*</span> <span class="hl num">2</span><span class="hl sym">)</span>
                        <span class="hl sym">++</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">trees of depth &quot;</span>
                        <span class="hl sym">++</span> show depth
                        <span class="hl sym">++</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">check: &quot;</span>
                        <span class="hl sym">++</span> show <span class="hl sym">(</span>testFixedDepth i depth <span class="hl num">0</span><span class="hl sym">)</span>
                    <span class="hl sym">)</span>
                <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                testTrees <span class="hl sym">(</span>depth <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">)</span> minDepth maxDepth
    <span class="hl sym">;</span>

main <span class="hl sym">:: [</span>String<span class="hl sym">] -&gt; ();</span>
<span class="hl kwa">public</span> main <span class="hl sym">!</span>args <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        n <span class="hl sym">::</span> Int<span class="hl sym">;</span>
        n <span class="hl sym">=</span> eager $ stringToInt <span class="hl sym">(</span>head args<span class="hl sym">);</span>

        minDepth <span class="hl sym">::</span> Int<span class="hl sym">;</span>
        minDepth <span class="hl sym">=</span> <span class="hl num">4</span><span class="hl sym">;</span>

        maxDepth <span class="hl sym">::</span> Int<span class="hl sym">;</span>
        maxDepth <span class="hl sym">=</span> max <span class="hl sym">(</span>minDepth <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">)</span> n<span class="hl sym">;</span>

        stretchDepth <span class="hl sym">::</span> Int<span class="hl sym">;</span>
        stretchDepth <span class="hl sym">=</span> maxDepth <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>

        longLivedTree <span class="hl sym">::</span> Tree<span class="hl sym">;</span>
        longLivedTree <span class="hl sym">=</span> make <span class="hl num">0</span> maxDepth<span class="hl sym">;</span>
    <span class="hl kwa">in</span>
        printLine
            <span class="hl sym">(</span>
                <span class="hl str">&quot;stretch tree of depth &quot;</span>
                <span class="hl sym">++</span> show stretchDepth
                <span class="hl sym">++</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">check: &quot;</span>
                <span class="hl sym">++</span> show <span class="hl sym">(</span>check <span class="hl sym">(</span>make <span class="hl num">0</span> stretchDepth<span class="hl sym">))</span>
            <span class="hl sym">)</span>
        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
        longLivedTree
        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
        testTrees minDepth minDepth maxDepth
        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
        printLine
            <span class="hl sym">(</span>
                <span class="hl str">&quot;long lived tree of depth &quot;</span>
                <span class="hl sym">++</span> show maxDepth
                <span class="hl sym">++</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">check: &quot;</span>
                <span class="hl sym">++</span> show <span class="hl sym">(</span>check longLivedTree<span class="hl sym">)</span>
            <span class="hl sym">)</span>
    <span class="hl sym">;</span>

