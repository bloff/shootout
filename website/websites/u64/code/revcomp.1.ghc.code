<span class="hl com">{-# OPTIONS -O2 -fglasgow-exts #-}</span>
<span class="hl com">{-# LANGUAGE BangPatterns #-}</span>
<span class="hl slc">--</span>
<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Contributed by Sterling Clover</span>
<span class="hl slc">-- Heavily inspired by contribution from Don Stewart</span>
<span class="hl slc">-- Inlining improvements by Don Stewart.</span>
<span class="hl slc">-- Heavily revised by Louis Wasserman.</span>

import qualified Data.ByteString.Char8 as S
import Data.ByteString.Internal
import GHC.Base
import GHC.Ptr
import Foreign
import GHC.IO

main <span class="hl sym">=</span> S.getContents <span class="hl sym">&gt;&gt;=</span>
	clines <span class="hl sym">(</span>\ h b <span class="hl sym">-&gt;</span> S.putStrLn h <span class="hl sym">&gt;&gt;</span> revcomp b <span class="hl sym">&gt;&gt;</span> writeFasta b<span class="hl sym">)</span>

writeFasta t
    <span class="hl sym">|</span> S.null t  <span class="hl sym">=</span> return <span class="hl sym">()</span>
    <span class="hl sym">|</span> otherwise <span class="hl sym">=</span> S.putStrLn l <span class="hl sym">&gt;&gt;</span> writeFasta r
    where <span class="hl sym">!(</span>l<span class="hl sym">,</span>r<span class="hl sym">) =</span> S.splitAt <span class="hl num">60</span> t

clines <span class="hl sym">:: (</span>ByteString <span class="hl sym">-&gt;</span> ByteString <span class="hl sym">-&gt;</span> IO <span class="hl sym">()) -&gt;</span> ByteString <span class="hl sym">-&gt;</span> IO <span class="hl sym">()</span>
clines run <span class="hl sym">=</span> clines' where
      clines' <span class="hl sym">!</span>ps <span class="hl sym">=</span> case S.elemIndex '\n' ps of
	  Just n1 <span class="hl sym">-&gt;</span> let <span class="hl sym">!</span>ps' <span class="hl sym">=</span> S.drop <span class="hl sym">(</span>n1<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span> ps in case S.elemIndex '<span class="hl sym">&gt;</span>' ps' of
		  Just n2 <span class="hl sym">-&gt;</span> do
		  	run <span class="hl sym">(</span>S.take n1 ps<span class="hl sym">) (</span>elimNewlines <span class="hl sym">(</span>S.take n2 ps'<span class="hl sym">))</span>
			clines' <span class="hl sym">(</span>S.drop n2 ps'<span class="hl sym">)</span>
		  Nothing <span class="hl sym">-&gt;</span> run <span class="hl sym">(</span>S.take n1 ps<span class="hl sym">) (</span>elimNewlines ps'<span class="hl sym">)</span>

elimNewlines <span class="hl sym">::</span> ByteString <span class="hl sym">-&gt;</span> ByteString
elimNewlines <span class="hl sym">(</span>PS fp i n<span class="hl sym">) =</span> unsafeDupablePerformIO $ do
	fDest <span class="hl sym">&lt;-</span> mallocByteString n
	withForeignPtr fDest $ \ dest <span class="hl sym">-&gt;</span> withForeignPtr fp $ \ p <span class="hl sym">-&gt;</span>
	  let go <span class="hl sym">!</span>p <span class="hl sym">!</span>n <span class="hl sym">!</span>d <span class="hl sym">=</span> do
		  q <span class="hl sym">&lt;-</span> memchr p <span class="hl sym">(</span>c2w '\n'<span class="hl sym">)</span> n
		  if q <span class="hl sym">==</span> nullPtr then do
		  	memcpy d p n
		  	return <span class="hl sym">(</span>PS fDest <span class="hl num">0</span>
		  		<span class="hl sym">(</span>d `minusPtr` dest <span class="hl sym">+</span> fromIntegral n<span class="hl sym">))</span>
		    else do
			let l <span class="hl sym">=</span> fromIntegral <span class="hl sym">(</span>q `minusPtr` p<span class="hl sym">)</span>
			memcpy d p l
			go <span class="hl sym">(</span>q `plusPtr` <span class="hl num">1</span><span class="hl sym">) (</span>n <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl sym">-</span> l<span class="hl sym">)</span>
				<span class="hl sym">(</span>d `plusPtr` fromIntegral l<span class="hl sym">)</span>
	  in go <span class="hl sym">(</span>p `plusPtr` i<span class="hl sym">) (</span>fromIntegral n<span class="hl sym">)</span> dest

<span class="hl com">{-# INLINE comps #-}</span>
comps <span class="hl sym">=</span> Prelude.zipWith <span class="hl sym">(</span>\ a b <span class="hl sym">-&gt; (</span>ord a<span class="hl sym">,</span> c2w b<span class="hl sym">))</span> <span class="hl str">&quot;AaCcGgTtUuMmRrYyKkVvHhDdBb&quot;</span>
	<span class="hl str">&quot;TTGGCCAAAAKKYYRRMMBBDDHHVV&quot;</span>

ca <span class="hl sym">::</span> Ptr Word8
ca <span class="hl sym">=</span> inlinePerformIO $ do
       <span class="hl sym">!</span>a <span class="hl sym">&lt;-</span> mallocArray <span class="hl num">200</span>
       mapM_ <span class="hl sym">(</span>\ i <span class="hl sym">-&gt;</span> pokeByteOff a <span class="hl sym">(</span>fromIntegral i<span class="hl sym">)</span> i <span class="hl sym">) [</span><span class="hl num">0</span>.<span class="hl num">.199</span><span class="hl sym">::</span>Word8<span class="hl sym">]</span>
       mapM_ <span class="hl sym">(</span>uncurry <span class="hl sym">(</span>pokeByteOff a<span class="hl sym">))</span> comps
       return a

comp <span class="hl sym">::</span> Word# <span class="hl sym">-&gt;</span> Word#
comp c <span class="hl sym">=</span> rw8 ca <span class="hl sym">(</span>word2Int# c<span class="hl sym">)</span>

revcomp <span class="hl sym">(</span>PS fp s <span class="hl sym">(</span>I# l<span class="hl sym">)) =</span> ca `seq` <span class="hl sym">(</span>withForeignPtr fp $ \p <span class="hl sym">-&gt;</span>
	rc <span class="hl sym">(</span>p `plusPtr` s<span class="hl sym">)</span> <span class="hl num">0</span># <span class="hl sym">(</span>l <span class="hl sym">-</span># <span class="hl num">1</span>#<span class="hl sym">))</span>
  where
    rc <span class="hl sym">::</span> Ptr Word8 <span class="hl sym">-&gt;</span> Int# <span class="hl sym">-&gt;</span> Int# <span class="hl sym">-&gt;</span> IO <span class="hl sym">()</span>
    rc <span class="hl sym">!</span>p i j  <span class="hl sym">=</span> rc' i j
        where
          rc' i j
              <span class="hl sym">|</span> i <span class="hl sym">&lt;</span># j <span class="hl sym">=</span> do
                          let <span class="hl sym">!</span>x <span class="hl sym">=</span> rw8 p i
                          ww8 p i <span class="hl sym">(</span>comp <span class="hl sym">(</span>rw8 p j<span class="hl sym">))</span>
                          ww8 p j <span class="hl sym">(</span>comp x<span class="hl sym">)</span>
                          rc' <span class="hl sym">(</span>i <span class="hl sym">+</span># <span class="hl num">1</span>#<span class="hl sym">) (</span>j <span class="hl sym">-</span># <span class="hl num">1</span>#<span class="hl sym">)</span>
              <span class="hl sym">|</span> i <span class="hl sym">==</span># j <span class="hl sym">=</span> ww8 p i <span class="hl sym">(</span>comp <span class="hl sym">(</span>rw8 p i<span class="hl sym">))</span>
              <span class="hl sym">|</span> otherwise <span class="hl sym">=</span>  return <span class="hl sym">()</span>

rw8 <span class="hl sym">::</span> Ptr Word8 <span class="hl sym">-&gt;</span> Int# <span class="hl sym">-&gt;</span> Word#
rw8 <span class="hl sym">(</span>Ptr a<span class="hl sym">)</span> i <span class="hl sym">=</span> case readWord8OffAddr# a i realWorld#  of <span class="hl sym">(</span># _<span class="hl sym">,</span> x #<span class="hl sym">) -&gt;</span>  x
<span class="hl com">{-# INLINE rw8 #-}</span>

ww8 <span class="hl sym">::</span> Ptr Word8 <span class="hl sym">-&gt;</span> Int# <span class="hl sym">-&gt;</span> Word# <span class="hl sym">-&gt;</span> IO <span class="hl sym">()</span>
ww8 <span class="hl sym">(</span>Ptr a<span class="hl sym">)</span> i x  <span class="hl sym">=</span> IO $ \s <span class="hl sym">-&gt;</span> case writeWord8OffAddr# a i x s of s2 <span class="hl sym">-&gt; (</span># s2<span class="hl sym">, ()</span> #<span class="hl sym">)</span>
