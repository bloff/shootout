<span class="hl slc">% The Computer Language Benchmarks Game</span>
<span class="hl slc">% http://shootout.alioth.debian.org/</span>
<span class="hl slc">% Contributed by: Sergei Matusevich 2007</span>
<span class="hl slc">% Modified and Parallelized by: Thanassis Avgerinos 2009</span>

<span class="hl sym">-</span><span class="hl kwa">module</span><span class="hl sym">(</span>regexdna<span class="hl sym">).</span>

<span class="hl sym">-</span><span class="hl kwa">export</span><span class="hl sym">([</span>main<span class="hl sym">/</span><span class="hl num">1</span><span class="hl sym">]).</span>

<span class="hl sym">-</span><span class="hl kwa">define</span><span class="hl sym">(</span> VARIANTS<span class="hl sym">,</span>
  <span class="hl sym">[</span> <span class="hl str">&quot;agggtaaa|tttaccct&quot;</span><span class="hl sym">,</span>
    <span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="hl sym">,</span>
    <span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="hl sym">,</span>
    <span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="hl sym">,</span>
    <span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="hl sym">,</span>
    <span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="hl sym">,</span>
    <span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="hl sym">,</span>
    <span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="hl sym">,</span>
    <span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span> <span class="hl sym">] ).</span>

<span class="hl kwd">read_lines</span><span class="hl sym">(</span>File<span class="hl sym">,</span> SzTotal<span class="hl sym">, [</span>Seg<span class="hl sym">|</span>Segz<span class="hl sym">]) -&gt;</span>
    <span class="hl kwa">case</span> io<span class="hl sym">:</span><span class="hl kwd">get_line</span><span class="hl sym">(</span>File<span class="hl sym">,</span> <span class="hl str">''</span><span class="hl sym">)</span> <span class="hl kwa">of</span>
	eof <span class="hl sym">-&gt; {</span>SzTotal<span class="hl sym">, [</span>Seg<span class="hl sym">|</span>Segz<span class="hl sym">]};</span>
	Str <span class="hl sym">-&gt;</span>
	    Len <span class="hl sym">=</span> <span class="hl kwb">size</span><span class="hl sym">(</span>Str<span class="hl sym">),</span>
	    Eol <span class="hl sym">=</span> Len <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span>
	    <span class="hl kwd">read_lines</span><span class="hl sym">(</span> File<span class="hl sym">,</span> SzTotal <span class="hl sym">+</span> Len<span class="hl sym">,</span>
			<span class="hl kwa">case</span> Str <span class="hl kwa">of</span>
			    <span class="hl sym">&lt;&lt;</span><span class="hl str">&quot;&gt;&quot;</span><span class="hl sym">,</span>_<span class="hl sym">/</span><span class="hl kwb">binary</span><span class="hl sym">&gt;&gt;         -&gt;     [[],</span>Seg<span class="hl sym">|</span>Segz<span class="hl sym">];</span>
			    <span class="hl sym">&lt;&lt;</span>Trim<span class="hl sym">:</span>Eol<span class="hl sym">/</span><span class="hl kwb">binary</span><span class="hl sym">,</span><span class="hl str">&quot;</span><span class="hl esc">\</span><span class="hl str">n&quot;</span><span class="hl sym">&gt;&gt; -&gt; [[</span>Trim<span class="hl sym">|</span>Seg<span class="hl sym">]|</span>Segz<span class="hl sym">];</span>
			    _                        <span class="hl sym">-&gt;  [[</span>Str<span class="hl sym">|</span>Seg<span class="hl sym">]|</span>Segz<span class="hl sym">]</span>
			<span class="hl kwa">end</span> <span class="hl sym">)</span>
    <span class="hl kwa">end</span><span class="hl sym">.</span>

<span class="hl kwd">match_number</span><span class="hl sym">(</span>Text<span class="hl sym">,</span> Pat<span class="hl sym">) -&gt;</span>
    <span class="hl kwa">case</span> re<span class="hl sym">:</span><span class="hl kwd">run</span><span class="hl sym">(</span>Text<span class="hl sym">,</span> Pat<span class="hl sym">, [</span>global<span class="hl sym">,</span> caseless<span class="hl sym">])</span> <span class="hl kwa">of</span>
	<span class="hl sym">{</span>match<span class="hl sym">,</span> M<span class="hl sym">} -&gt;</span> <span class="hl kwb">length</span><span class="hl sym">(</span>M<span class="hl sym">);</span>
	nomatch <span class="hl sym">-&gt;</span> <span class="hl num">0</span>
    <span class="hl kwa">end</span><span class="hl sym">.</span>

<span class="hl kwd">get_matches</span><span class="hl sym">(</span>S2<span class="hl sym">,</span> S3<span class="hl sym">) -&gt;</span>
    Parent <span class="hl sym">=</span> <span class="hl kwb">self</span><span class="hl sym">(),</span>
    FindMatches <span class="hl sym">=</span>
	<span class="hl kwa">fun</span> <span class="hl sym">(</span>Id<span class="hl sym">,</span> Str<span class="hl sym">) -&gt;</span>
		Res <span class="hl sym">=</span> <span class="hl kwd">match_number</span><span class="hl sym">(</span>S2<span class="hl sym">,</span> Str<span class="hl sym">) +</span> <span class="hl kwd">match_number</span><span class="hl sym">(</span>S3<span class="hl sym">,</span> Str<span class="hl sym">),</span>
		Parent <span class="hl sym">! {</span>Id<span class="hl sym">,</span> Str<span class="hl sym">,</span> Res<span class="hl sym">}</span>
	<span class="hl kwa">end</span><span class="hl sym">,</span>
    NV <span class="hl sym">=</span> lists<span class="hl sym">:</span><span class="hl kwd">foldl</span><span class="hl sym">(</span><span class="hl kwa">fun</span> <span class="hl sym">(</span>Str<span class="hl sym">,</span> N<span class="hl sym">) -&gt;</span>
			     <span class="hl kwb">spawn</span><span class="hl sym">(</span><span class="hl kwa">fun</span> <span class="hl sym">() -&gt;</span>  <span class="hl kwd">FindMatches</span><span class="hl sym">(</span>N<span class="hl sym">,</span> Str<span class="hl sym">)</span> <span class="hl kwa">end</span><span class="hl sym">),</span>
				       N<span class="hl sym">+</span><span class="hl num">1</span>
		     <span class="hl kwa">end</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">, ?</span>VARIANTS<span class="hl sym">),</span>
    <span class="hl kwd">wait_all</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> NV<span class="hl sym">).</span>

<span class="hl kwd">wait_all</span><span class="hl sym">(</span>N<span class="hl sym">,</span> N<span class="hl sym">) -&gt;</span>
    ok<span class="hl sym">;</span>
<span class="hl kwd">wait_all</span><span class="hl sym">(</span>N1<span class="hl sym">,</span> N<span class="hl sym">) -&gt;</span>
    <span class="hl kwa">receive</span>
	<span class="hl sym">{</span>N1<span class="hl sym">,</span> Str<span class="hl sym">,</span> Res<span class="hl sym">} -&gt;</span>
	    io<span class="hl sym">:</span><span class="hl kwd">format</span><span class="hl sym">(</span><span class="hl str">&quot;~s ~w~n&quot;</span><span class="hl sym">, [</span>Str<span class="hl sym">,</span> Res<span class="hl sym">])</span>
    <span class="hl kwa">end</span><span class="hl sym">,</span>
    <span class="hl kwd">wait_all</span><span class="hl sym">(</span>N1 <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span> N<span class="hl sym">).</span>


<span class="hl kwd">main</span><span class="hl sym">(</span>_<span class="hl sym">) -&gt;</span>
    io<span class="hl sym">:</span><span class="hl kwd">setopts</span><span class="hl sym">(</span>standard_io<span class="hl sym">, [</span><span class="hl kwb">binary</span><span class="hl sym">]),</span>
    <span class="hl sym">{</span>SzTotal<span class="hl sym">, [</span>S3Raw<span class="hl sym">,</span>S2Raw<span class="hl sym">,</span>S1Raw<span class="hl sym">|</span>_<span class="hl sym">]} =</span> <span class="hl kwd">read_lines</span><span class="hl sym">(</span>standard_io<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">, [[]]),</span>
    B1 <span class="hl sym">=</span> <span class="hl kwb">list_to_binary</span><span class="hl sym">(</span>lists<span class="hl sym">:</span><span class="hl kwd">reverse</span><span class="hl sym">(</span>S1Raw<span class="hl sym">)),</span>
    B2 <span class="hl sym">=</span> <span class="hl kwb">list_to_binary</span><span class="hl sym">(</span>lists<span class="hl sym">:</span><span class="hl kwd">reverse</span><span class="hl sym">(</span>S2Raw<span class="hl sym">)),</span>
    B3 <span class="hl sym">=</span> <span class="hl kwb">list_to_binary</span><span class="hl sym">(</span>lists<span class="hl sym">:</span><span class="hl kwd">reverse</span><span class="hl sym">(</span>S3Raw<span class="hl sym">)),</span>
    S2 <span class="hl sym">=</span> <span class="hl kwb">binary_to_list</span><span class="hl sym">(</span>B2<span class="hl sym">),</span>
    L2  <span class="hl sym">=</span> <span class="hl kwb">size</span><span class="hl sym">(</span>B2<span class="hl sym">),</span>
    L13 <span class="hl sym">=</span> <span class="hl kwb">size</span><span class="hl sym">(</span>B1<span class="hl sym">) +</span> <span class="hl kwb">size</span><span class="hl sym">(</span>B3<span class="hl sym">),</span>
    <span class="hl kwd">get_matches</span><span class="hl sym">(</span>B2<span class="hl sym">,</span> B3<span class="hl sym">),</span>
    L2Subst <span class="hl sym">=</span> <span class="hl kwb">length</span><span class="hl sym">(</span> lists<span class="hl sym">:</span><span class="hl kwd">flatmap</span><span class="hl sym">(</span>
			<span class="hl kwa">fun</span><span class="hl sym">(</span>Ch<span class="hl sym">) -&gt;</span>
				<span class="hl kwa">case</span> Ch <span class="hl kwa">of</span>
				    $B <span class="hl sym">-&gt;</span> <span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl sym">;</span>
				    $D <span class="hl sym">-&gt;</span> <span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl sym">;</span>
				    $H <span class="hl sym">-&gt;</span> <span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl sym">;</span>
				    $K <span class="hl sym">-&gt;</span> <span class="hl str">&quot;(g|t)&quot;</span><span class="hl sym">;</span>
				    $M <span class="hl sym">-&gt;</span> <span class="hl str">&quot;(a|c)&quot;</span><span class="hl sym">;</span>
				    $N <span class="hl sym">-&gt;</span> <span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl sym">;</span>
				    $R <span class="hl sym">-&gt;</span> <span class="hl str">&quot;(a|g)&quot;</span><span class="hl sym">;</span>
				    $S <span class="hl sym">-&gt;</span> <span class="hl str">&quot;(c|g)&quot;</span><span class="hl sym">;</span>
				    $V <span class="hl sym">-&gt;</span> <span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl sym">;</span>
				    $W <span class="hl sym">-&gt;</span> <span class="hl str">&quot;(a|t)&quot;</span><span class="hl sym">;</span>
				    $Y <span class="hl sym">-&gt;</span> <span class="hl str">&quot;(c|t)&quot;</span><span class="hl sym">;</span>
				    XX <span class="hl sym">-&gt; [</span>XX<span class="hl sym">]</span>
				<span class="hl kwa">end</span>
			<span class="hl kwa">end</span><span class="hl sym">,</span> S2 <span class="hl sym">) ),</span>
    io<span class="hl sym">:</span><span class="hl kwd">format</span><span class="hl sym">(</span><span class="hl str">&quot;~n~w~n~w~n~w~n&quot;</span><span class="hl sym">, [</span>SzTotal<span class="hl sym">,</span> L13 <span class="hl sym">+</span> L2<span class="hl sym">,</span> L13 <span class="hl sym">+</span> L2Subst<span class="hl sym">]),</span>
    <span class="hl kwb">halt</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">).</span>
