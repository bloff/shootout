<span class="hl slc">-- $Id: revcomp.1.gnat.code,v 1.7 2009-04-27 18:00:39 igouy-guest Exp $</span>
<span class="hl slc">-- http://dada.perl.it/shootout/</span>
<span class="hl slc">-- Contributed by Pascal Obry on 2005/03/19</span>
<span class="hl slc">-- Optimized by Bill Findlay on 2005/04/04</span>

<span class="hl kwa">with</span> Ada.Text_IO<span class="hl sym">;</span>                <span class="hl kwa">use</span> Ada.Text_IO<span class="hl sym">;</span>
<span class="hl kwa">with</span> Ada.Unchecked_Deallocation<span class="hl sym">;</span>

<span class="hl kwa">procedure</span> Revcomp <span class="hl kwa">is</span>

   Complement <span class="hl sym">:</span> <span class="hl kwa">constant array</span> <span class="hl sym">(</span><span class="hl kwb">Character</span><span class="hl sym">)</span> <span class="hl kwa">of</span> <span class="hl kwb">Character</span> <span class="hl sym">:=</span>
                  <span class="hl sym">('</span>A<span class="hl sym">' =&gt; '</span>T<span class="hl sym">', '</span>C<span class="hl sym">' =&gt; '</span>G<span class="hl sym">', '</span>G<span class="hl sym">' =&gt; '</span>C<span class="hl sym">', '</span>T<span class="hl sym">' =&gt; '</span>A<span class="hl sym">', '</span>U<span class="hl sym">' =&gt; '</span>A<span class="hl sym">',</span>
                   <span class="hl sym">'</span>M<span class="hl sym">' =&gt; '</span>K<span class="hl sym">', '</span>R<span class="hl sym">' =&gt; '</span>Y<span class="hl sym">', '</span>W<span class="hl sym">' =&gt; '</span>W<span class="hl sym">', '</span>S<span class="hl sym">' =&gt; '</span>S<span class="hl sym">', '</span>Y<span class="hl sym">' =&gt; '</span>R<span class="hl sym">',</span>
                   <span class="hl sym">'</span>K<span class="hl sym">' =&gt; '</span>M<span class="hl sym">', '</span>V<span class="hl sym">' =&gt; '</span>B<span class="hl sym">', '</span>H<span class="hl sym">' =&gt; '</span>D<span class="hl sym">', '</span>D<span class="hl sym">' =&gt; '</span>H<span class="hl sym">', '</span>B<span class="hl sym">' =&gt; '</span>V<span class="hl sym">',</span>
                   <span class="hl sym">'</span>N<span class="hl sym">' =&gt; '</span>N<span class="hl sym">',</span>
                   <span class="hl sym">'</span>a<span class="hl sym">' =&gt; '</span>T<span class="hl sym">', '</span>c<span class="hl sym">' =&gt; '</span>G<span class="hl sym">', '</span>g<span class="hl sym">' =&gt; '</span>C<span class="hl sym">', '</span>t<span class="hl sym">' =&gt; '</span>A<span class="hl sym">', '</span>u<span class="hl sym">' =&gt; '</span>A<span class="hl sym">',</span>
                   <span class="hl sym">'</span>m<span class="hl sym">' =&gt; '</span>K<span class="hl sym">', '</span>r<span class="hl sym">' =&gt; '</span>Y<span class="hl sym">', '</span>w<span class="hl sym">' =&gt; '</span>W<span class="hl sym">', '</span>s<span class="hl sym">' =&gt; '</span>S<span class="hl sym">', '</span>y<span class="hl sym">' =&gt; '</span>R<span class="hl sym">',</span>
                   <span class="hl sym">'</span>k<span class="hl sym">' =&gt; '</span>M<span class="hl sym">', '</span>v<span class="hl sym">' =&gt; '</span>B<span class="hl sym">', '</span>h<span class="hl sym">' =&gt; '</span>D<span class="hl sym">', '</span>d<span class="hl sym">' =&gt; '</span>H<span class="hl sym">', '</span>b<span class="hl sym">' =&gt; '</span>V<span class="hl sym">',</span>
                   <span class="hl sym">'</span>n<span class="hl sym">' =&gt; '</span>N<span class="hl sym">',</span>
                   <span class="hl kwa">others</span> <span class="hl sym">=&gt; '</span>?<span class="hl sym">');</span>

   Max_Length <span class="hl sym">:</span> <span class="hl kwa">constant</span> <span class="hl sym">:=</span> <span class="hl num">60</span><span class="hl sym">;</span>

   <span class="hl kwa">type</span> String_Access <span class="hl kwa">is access</span> <span class="hl kwb">String</span><span class="hl sym">;</span>

   <span class="hl kwa">procedure</span> Free <span class="hl kwa">is new</span> Ada.Unchecked_Deallocation <span class="hl sym">(</span><span class="hl kwb">String</span><span class="hl sym">,</span> String_Access<span class="hl sym">);</span>

   <span class="hl kwa">procedure</span> Get_Fasta <span class="hl sym">(</span>Seq <span class="hl sym">:</span> <span class="hl kwa">in out</span> String_Access<span class="hl sym">;</span> Length <span class="hl sym">:</span> <span class="hl kwa">out</span> <span class="hl kwb">Natural</span><span class="hl sym">)</span> <span class="hl kwa">is</span>
      Ptr  <span class="hl sym">:</span> String_Access<span class="hl sym">;</span>
      J<span class="hl sym">,</span> K <span class="hl sym">:</span> <span class="hl kwb">Natural</span> <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      C    <span class="hl sym">:</span> <span class="hl kwb">Character</span><span class="hl sym">;</span>
      EOL  <span class="hl sym">:</span> <span class="hl kwb">Boolean</span><span class="hl sym">;</span>
   <span class="hl kwa">begin</span>
      Length <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>

      <span class="hl kwa">loop</span>
         Look_Ahead <span class="hl sym">(</span>C<span class="hl sym">,</span> EOL<span class="hl sym">);</span>
         <span class="hl kwa">exit when</span> C <span class="hl sym">/= '&gt;'</span> <span class="hl kwa">and</span> C <span class="hl sym">/= ';' ;</span>
         Get_Line <span class="hl sym">(</span>Seq <span class="hl sym">(</span><span class="hl num">1</span> .. Seq<span class="hl sym">'</span>Length<span class="hl sym">),</span> J<span class="hl sym">);</span>
         <span class="hl kwa">if</span> Seq <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">) = '&gt;'</span> <span class="hl kwa">then</span>
            Put_Line <span class="hl sym">(</span>Seq <span class="hl sym">(</span><span class="hl num">1</span> .. J<span class="hl sym">));</span>
         <span class="hl kwa">end if</span><span class="hl sym">;</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>

      <span class="hl kwa">loop</span>
         <span class="hl kwa">if</span> Length <span class="hl sym">+</span> Max_Length <span class="hl sym">&gt;</span> Seq<span class="hl sym">'</span>Length <span class="hl kwa">then</span>
            Ptr <span class="hl sym">:=</span> Seq<span class="hl sym">;</span>
            Seq <span class="hl sym">:=</span> <span class="hl kwa">new</span> <span class="hl kwb">String</span> <span class="hl sym">(</span><span class="hl num">1</span> .. <span class="hl num">2</span> <span class="hl sym">*</span> Seq<span class="hl sym">'</span>Length<span class="hl sym">);</span>
            Seq <span class="hl sym">(</span><span class="hl num">1</span> .. Length<span class="hl sym">) :=</span> Ptr <span class="hl sym">(</span><span class="hl num">1</span> .. Length<span class="hl sym">);</span>
            Free <span class="hl sym">(</span>Ptr<span class="hl sym">);</span>
         <span class="hl kwa">end if</span><span class="hl sym">;</span>

         Get_Line <span class="hl sym">(</span>Seq <span class="hl sym">(</span>Length <span class="hl sym">+</span> <span class="hl num">1</span> .. Length <span class="hl sym">+</span> Max_Length<span class="hl sym">),</span> J<span class="hl sym">);</span>
         K <span class="hl sym">:=</span> J <span class="hl sym">-</span> Length<span class="hl sym">;</span>
         Length <span class="hl sym">:=</span> J<span class="hl sym">;</span>

         <span class="hl kwa">if</span> K <span class="hl sym">=</span> Max_Length <span class="hl kwa">then</span>
            Skip_Line<span class="hl sym">;</span>
         <span class="hl kwa">end if</span><span class="hl sym">;</span>

         Look_Ahead <span class="hl sym">(</span>C<span class="hl sym">,</span> EOL<span class="hl sym">);</span>

         <span class="hl kwa">if</span> K <span class="hl sym">&lt;</span> Max_Length <span class="hl kwa">or else</span> C <span class="hl sym">= '&gt;'</span> <span class="hl kwa">or else</span> C <span class="hl sym">= ';'</span> <span class="hl kwa">then</span>
            <span class="hl kwa">return</span><span class="hl sym">;</span>
         <span class="hl kwa">end if</span><span class="hl sym">;</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>
   <span class="hl kwa">exception</span>
      <span class="hl kwa">when</span> End_Error <span class="hl sym">=&gt;</span>
         <span class="hl kwa">return</span><span class="hl sym">;</span>
   <span class="hl kwa">end</span> Get_Fasta<span class="hl sym">;</span>

   <span class="hl kwa">procedure</span> Reverse_Fasta <span class="hl sym">(</span>Fasta <span class="hl sym">:</span> <span class="hl kwa">in out</span> <span class="hl kwb">String</span><span class="hl sym">)</span> <span class="hl kwa">is</span>
      C    <span class="hl sym">:</span> <span class="hl kwb">Character</span><span class="hl sym">;</span>
      L<span class="hl sym">,</span> R <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">for</span> I <span class="hl kwa">in</span> <span class="hl num">0</span> .. Fasta<span class="hl sym">'</span>Length <span class="hl kwa">loop</span>
         L <span class="hl sym">:=</span> Fasta<span class="hl sym">'</span>First <span class="hl sym">+</span> I<span class="hl sym">;</span>
         R <span class="hl sym">:=</span> Fasta<span class="hl sym">'</span>Last <span class="hl sym">-</span> I<span class="hl sym">;</span>
         <span class="hl kwa">exit when</span> L <span class="hl sym">&gt;</span> R<span class="hl sym">;</span>
         C <span class="hl sym">:=</span> Fasta <span class="hl sym">(</span>L<span class="hl sym">);</span>
         Fasta <span class="hl sym">(</span>L<span class="hl sym">) :=</span> Complement <span class="hl sym">(</span>Fasta <span class="hl sym">(</span>R<span class="hl sym">));</span>
         Fasta <span class="hl sym">(</span>R<span class="hl sym">) :=</span> Complement <span class="hl sym">(</span>C<span class="hl sym">);</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>
   <span class="hl kwa">end</span> Reverse_Fasta<span class="hl sym">;</span>

   <span class="hl kwa">procedure</span> Put_Reversed_Fasta <span class="hl sym">(</span>Fasta <span class="hl sym">:</span> <span class="hl kwa">in out</span> <span class="hl kwb">String</span><span class="hl sym">)</span> <span class="hl kwa">is</span>
      L <span class="hl sym">:</span> <span class="hl kwb">Natural</span> <span class="hl sym">:=</span> Fasta<span class="hl sym">'</span>Last<span class="hl sym">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">while</span> L <span class="hl sym">&gt;=</span> Max_Length <span class="hl kwa">loop</span>
         Reverse_Fasta <span class="hl sym">(</span>Fasta <span class="hl sym">(</span>L <span class="hl sym">-</span> Max_Length <span class="hl sym">+</span> <span class="hl num">1</span> .. L<span class="hl sym">));</span>
         Put_Line <span class="hl sym">(</span>Fasta <span class="hl sym">(</span>L <span class="hl sym">-</span> Max_Length <span class="hl sym">+</span> <span class="hl num">1</span> .. L<span class="hl sym">));</span>
         L <span class="hl sym">:=</span> L <span class="hl sym">-</span> Max_Length<span class="hl sym">;</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>
      <span class="hl kwa">if</span> L <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
         Reverse_Fasta <span class="hl sym">(</span>Fasta <span class="hl sym">(</span><span class="hl num">1</span> .. L<span class="hl sym">));</span>
         Put_Line <span class="hl sym">(</span>Fasta <span class="hl sym">(</span><span class="hl num">1</span> .. L<span class="hl sym">));</span>
      <span class="hl kwa">end if</span><span class="hl sym">;</span>
   <span class="hl kwa">end</span> Put_Reversed_Fasta<span class="hl sym">;</span>

   Seq    <span class="hl sym">:</span> String_Access <span class="hl sym">:=</span> <span class="hl kwa">new</span> <span class="hl kwb">String</span> <span class="hl sym">(</span><span class="hl num">1</span> .. <span class="hl num">1</span>_024<span class="hl sym">);</span>
   Length <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span>

<span class="hl kwa">begin</span>
   <span class="hl kwa">loop</span>
      Get_Fasta <span class="hl sym">(</span>Seq<span class="hl sym">,</span> Length<span class="hl sym">);</span>
      <span class="hl kwa">exit when</span> Length <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      Put_Reversed_Fasta <span class="hl sym">(</span>Seq <span class="hl sym">(</span><span class="hl num">1</span> .. Length<span class="hl sym">));</span>
   <span class="hl kwa">end loop</span><span class="hl sym">;</span>
<span class="hl kwa">end</span> Revcomp<span class="hl sym">;</span>
