<span class="hl com">/*</span>
<span class="hl com">	The Great Computer Language Shootout</span>
<span class="hl com">	http://shootout.alioth.debian.org/</span>
<span class="hl com">	Based on the SML version, written by Matthias Blume,</span>
<span class="hl com">	and the Clean program, written by Diederik van Arkel.</span>
<span class="hl com">	Contributed by John van Groningen</span>
<span class="hl com">*/</span>

module mandelbrot

import StdEnv<span class="hl sym">,</span>LanguageShootout

Start world
	<span class="hl sym"># (</span>console<span class="hl sym">,</span> world<span class="hl sym">)	=</span> stdio world
	  width				<span class="hl sym">=</span> argi
	  console			<span class="hl sym">=</span> console &lt;&lt;&lt; <span class="hl str">&quot;P4\n&quot;</span> &lt;&lt;&lt; width &lt;&lt;&lt; <span class="hl str">&quot; &quot;</span> &lt;&lt;&lt; width &lt;&lt;&lt; <span class="hl str">&quot;\n&quot;</span>
	  console			<span class="hl sym">=</span> loop_y <span class="hl num">0</span> console width width
	<span class="hl sym">=</span> snd <span class="hl sym">(</span>fclose console world<span class="hl sym">)</span>

max_iter <span class="hl sym">:==</span> <span class="hl num">50</span>

loop_y <span class="hl sym">:: !</span>Int <span class="hl sym">!*</span>File <span class="hl sym">!</span>Int <span class="hl sym">!</span>Int <span class="hl sym">-&gt; *</span>File
loop_y y file width height
	<span class="hl sym">|</span> y&lt;width
		<span class="hl sym">=</span> loop_y <span class="hl sym">(</span>y<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) (</span>loop_x <span class="hl num">0</span> y <span class="hl num">0 8</span> file width height<span class="hl sym">)</span> width height
		<span class="hl sym">=</span> file

loop_x <span class="hl sym">:: !</span>Int <span class="hl sym">!</span>Int <span class="hl sym">!</span>Int <span class="hl sym">!</span>Int <span class="hl sym">!*</span>File <span class="hl sym">!</span>Int <span class="hl sym">!</span>Int <span class="hl sym">-&gt; *</span>File
loop_x x y bits bit_shift file width height
	<span class="hl sym">|</span> x&lt;height
		<span class="hl sym">|</span> bit_shift<span class="hl sym">==</span><span class="hl num">0</span>
			<span class="hl sym">=</span> loop_x x y <span class="hl num">0 8</span> <span class="hl sym">(</span>fwritec <span class="hl sym">(</span>toChar bits<span class="hl sym">)</span> file<span class="hl sym">)</span> width height
			<span class="hl sym"># (</span>w<span class="hl sym">,</span>h<span class="hl sym">) = (</span>toReal width<span class="hl sym">,</span>toReal height<span class="hl sym">)</span>
			  c <span class="hl sym">= (</span><span class="hl num">2.0</span><span class="hl sym">*</span>toReal x<span class="hl sym">/</span>w <span class="hl sym">-</span> <span class="hl num">1.5</span><span class="hl sym">,</span> <span class="hl num">2.0</span><span class="hl sym">*</span>toReal y<span class="hl sym">/</span>h <span class="hl sym">-</span> <span class="hl num">1.0</span><span class="hl sym">)</span>
			  point <span class="hl sym">=</span> fractal <span class="hl sym">(</span><span class="hl num">0.0</span><span class="hl sym">,</span><span class="hl num">0.0</span><span class="hl sym">)</span> max_iter c
			<span class="hl sym">=</span> loop_x <span class="hl sym">(</span>x<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span> y <span class="hl sym">(</span>bits<span class="hl sym">+</span>bits<span class="hl sym">+</span>point<span class="hl sym">) (</span>bit_shift<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span> file width height
		<span class="hl sym">|</span> bit_shift&lt;<span class="hl num">8</span>
			<span class="hl sym">=</span> fwritec <span class="hl sym">(</span>toChar <span class="hl sym">(</span>bits&lt;&lt;bit_shift<span class="hl sym">))</span> file
			<span class="hl sym">=</span> file

fractal <span class="hl sym">:: !(!</span>Real<span class="hl sym">,!</span>Real<span class="hl sym">) !</span>Int <span class="hl sym">!(!</span>Real<span class="hl sym">,!</span>Real<span class="hl sym">) -&gt;</span> Int
fractal <span class="hl sym">(</span>r<span class="hl sym">,</span>i<span class="hl sym">)</span> iter c<span class="hl sym">=:(</span>cr<span class="hl sym">,</span>ci<span class="hl sym">)</span>
	<span class="hl sym"># (</span>r2<span class="hl sym">,</span>i2<span class="hl sym">) = (</span>r<span class="hl sym">*</span>r<span class="hl sym">,</span>i<span class="hl sym">*</span>i<span class="hl sym">)</span>
	<span class="hl sym">|</span> r2 <span class="hl sym">+</span> i2 &lt;<span class="hl sym">=</span> <span class="hl num">4.0</span>
		<span class="hl sym">|</span> iter &gt; <span class="hl num">0</span>	<span class="hl sym">=</span> let pri<span class="hl sym">=</span>r<span class="hl sym">*</span>i in fractal <span class="hl sym">(</span>r2<span class="hl sym">-</span>i2<span class="hl sym">+</span>cr<span class="hl sym">,</span>pri<span class="hl sym">+</span>pri<span class="hl sym">+</span>ci<span class="hl sym">) (</span>iter<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span> c
					<span class="hl sym">=</span> <span class="hl num">1</span>
		<span class="hl sym">=</span> <span class="hl num">0</span>
