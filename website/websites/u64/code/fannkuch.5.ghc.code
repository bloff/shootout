<span class="hl com">{-# OPTIONS -fglasgow-exts -O2 -optc-O3 #-}</span>

<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">-- contributed by Don Stewart, translation from the C version</span>
<span class="hl slc">-- Parallelized by Reid Barton</span>

<span class="hl kwa">import</span> Control.Concurrent
<span class="hl kwa">import</span> Control.Monad
<span class="hl kwa">import</span> Data.List
<span class="hl kwa">import</span> Foreign
<span class="hl kwa">import</span> System
<span class="hl kwa">import</span> GHC.Base
<span class="hl kwa">import</span> GHC.Ptr
<span class="hl kwa">import</span> GHC.IOBase

main <span class="hl sym">=</span> <span class="hl kwa">do</span>
    n <span class="hl sym">&lt;-</span> getArgs <span class="hl sym">&gt;&gt;=</span> return . read . head
    when <span class="hl sym">(</span>n <span class="hl sym">&lt;=</span> <span class="hl num">1</span><span class="hl sym">)</span> $ putStrLn <span class="hl str">&quot;Pfannkuchen(1) = 0&quot;</span> <span class="hl sym">&gt;&gt;</span> exitWith ExitSuccess
    fannkuchSmall n
    chan <span class="hl sym">&lt;-</span> newChan <span class="hl sym">::</span> IO <span class="hl sym">(</span>Chan <span class="hl kwb">Int</span><span class="hl sym">)</span>
    <span class="hl slc">-- The C version ignores permutations ending in n-1,</span>
    <span class="hl slc">-- so let's do so even more efficiently.</span>
    forM_ <span class="hl sym">[ (</span>l1<span class="hl sym">,</span> l2<span class="hl sym">)</span>
          <span class="hl sym">|</span> l2 <span class="hl sym">&lt;- [</span><span class="hl num">0</span>..n<span class="hl sym">-</span><span class="hl num">2</span><span class="hl sym">]</span>
          <span class="hl sym">,</span> l1 <span class="hl sym">&lt;- [</span><span class="hl num">0</span>..n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">]</span>
          <span class="hl sym">,</span> l1 <span class="hl sym">/=</span> l2 <span class="hl sym">]</span>
          $ \<span class="hl sym">(</span>l1<span class="hl sym">,</span> l2<span class="hl sym">) -&gt;</span> forkIO <span class="hl sym">(</span>fannkuch n l1 l2 <span class="hl sym">&gt;&gt;=</span> writeChan chan<span class="hl sym">)</span>
    k <span class="hl sym">&lt;- (</span>maximum . take <span class="hl sym">((</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>^<span class="hl num">2</span><span class="hl sym">))</span> `fmap` getChanContents chan
    putStrLn $ <span class="hl str">&quot;Pfannkuchen(&quot;</span> <span class="hl sym">++</span> show n <span class="hl sym">++</span> <span class="hl str">&quot;) = &quot;</span> <span class="hl sym">++</span> show <span class="hl sym">(</span>k <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span>

<span class="hl slc">-- Separate loop to print the small values</span>
fannkuchSmall n<span class="hl sym">&#64;(</span>I# n#<span class="hl sym">) =</span> <span class="hl kwa">do</span>
    perm            <span class="hl sym">&lt;-</span> mallocArray n       <span class="hl sym">::</span> IO <span class="hl sym">(</span>Ptr <span class="hl kwb">Int</span><span class="hl sym">)</span>
    <span class="hl sym">(</span>Ptr c#<span class="hl sym">)        &lt;-</span> mallocArray n       <span class="hl sym">::</span> IO <span class="hl sym">(</span>Ptr <span class="hl kwb">Int</span><span class="hl sym">)</span>
    perm1<span class="hl sym">&#64;(</span>Ptr p1#<span class="hl sym">) &lt;-</span> newArray <span class="hl sym">[</span><span class="hl num">0</span> .. n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">] ::</span> IO <span class="hl sym">(</span>Ptr <span class="hl kwb">Int</span><span class="hl sym">)</span>
    <span class="hl sym">(</span>Ptr rP<span class="hl sym">)        &lt;-</span> newArray <span class="hl sym">[</span>n<span class="hl sym">]        ::</span> IO <span class="hl sym">(</span>Ptr <span class="hl kwb">Int</span><span class="hl sym">)</span>

    <span class="hl kwa">let</span> go didpr <span class="hl sym">=</span> when <span class="hl sym">(</span>didpr <span class="hl sym">&lt; (</span><span class="hl num">30</span> <span class="hl sym">::</span> <span class="hl kwb">Int</span><span class="hl sym">))</span> $ <span class="hl kwa">do</span>
            ppr <span class="hl num">0</span> n perm1 <span class="hl sym">&gt;&gt;</span> putStr <span class="hl str">&quot;\n&quot;</span>

            IO $ \s <span class="hl sym">-&gt;</span>
                <span class="hl kwa">case</span> readIntOffAddr# rP <span class="hl num">0</span># s <span class="hl kwa">of</span>
                    <span class="hl sym">(</span># s<span class="hl sym">,</span> r# #<span class="hl sym">) -&gt;</span> <span class="hl kwa">case</span> setcount c# r# s <span class="hl kwa">of</span>
                        <span class="hl sym">(</span># s<span class="hl sym">,</span> _ #<span class="hl sym">) -&gt;</span> <span class="hl kwa">case</span> writeIntOffAddr# rP <span class="hl num">0</span># <span class="hl num">1</span># s <span class="hl kwa">of</span>
                            s <span class="hl sym">-&gt; (</span># s<span class="hl sym">, ()</span> #<span class="hl sym">)</span>

            done <span class="hl sym">&lt;-</span> IO $ \s <span class="hl sym">-&gt;</span> rot rP n# p1# c# s
            if done <span class="hl kwa">then</span> return <span class="hl sym">()</span> <span class="hl kwa">else</span> go <span class="hl sym">(</span>didpr<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>
    go <span class="hl num">0</span>

fannkuch n<span class="hl sym">&#64;(</span>I# n#<span class="hl sym">)</span> l1 l2 <span class="hl sym">=</span> <span class="hl kwa">do</span>       <span class="hl slc">-- Only consider permutations ending with l1 l2.</span>
    <span class="hl kwa">let</span> startArray <span class="hl sym">= ([</span><span class="hl num">0</span>..n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">]</span> \\ <span class="hl sym">[</span>l1<span class="hl sym">,</span> l2<span class="hl sym">]) ++ [</span>l1<span class="hl sym">,</span> l2<span class="hl sym">]</span>
    perm            <span class="hl sym">&lt;-</span> mallocArray n       <span class="hl sym">::</span> IO <span class="hl sym">(</span>Ptr <span class="hl kwb">Int</span><span class="hl sym">)</span>
    <span class="hl sym">(</span>Ptr c#<span class="hl sym">)        &lt;-</span> mallocArray n       <span class="hl sym">::</span> IO <span class="hl sym">(</span>Ptr <span class="hl kwb">Int</span><span class="hl sym">)</span>
    perm1<span class="hl sym">&#64;(</span>Ptr p1#<span class="hl sym">) &lt;-</span> newArray startArray <span class="hl sym">::</span> IO <span class="hl sym">(</span>Ptr <span class="hl kwb">Int</span><span class="hl sym">)</span>
    <span class="hl sym">(</span>Ptr rP<span class="hl sym">)        &lt;-</span> newArray <span class="hl sym">[</span>n<span class="hl sym">]        ::</span> IO <span class="hl sym">(</span>Ptr <span class="hl kwb">Int</span><span class="hl sym">)</span>
    <span class="hl sym">(</span>Ptr flipsMaxP<span class="hl sym">) &lt;-</span> newArray <span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]        ::</span> IO <span class="hl sym">(</span>Ptr <span class="hl kwb">Int</span><span class="hl sym">)</span>

    <span class="hl kwa">let</span> go <span class="hl sym">=</span> <span class="hl kwa">do</span>
            IO $ \s <span class="hl sym">-&gt;</span>
                <span class="hl kwa">case</span> readIntOffAddr# rP <span class="hl num">0</span># s <span class="hl kwa">of</span>
                    <span class="hl sym">(</span># s<span class="hl sym">,</span> r# #<span class="hl sym">) -&gt;</span> <span class="hl kwa">case</span> setcount c# r# s <span class="hl kwa">of</span>
                        <span class="hl sym">(</span># s<span class="hl sym">,</span> _ #<span class="hl sym">) -&gt;</span> <span class="hl kwa">case</span> writeIntOffAddr# rP <span class="hl num">0</span># <span class="hl num">1</span># s <span class="hl kwa">of</span>
                            s <span class="hl sym">-&gt; (</span># s<span class="hl sym">, ()</span> #<span class="hl sym">)</span>

            t <span class="hl sym">&lt;-</span> IO $ \s <span class="hl sym">-&gt;</span>
                <span class="hl kwa">case</span> readIntOffAddr# p1# <span class="hl num">0</span># s <span class="hl kwa">of</span>
                    <span class="hl sym">(</span># s<span class="hl sym">,</span> p1 #<span class="hl sym">) -&gt; (</span># s<span class="hl sym">,</span> not <span class="hl sym">(</span>p1 <span class="hl sym">==</span># <span class="hl num">0</span>#<span class="hl sym">)</span> #<span class="hl sym">)</span>

            when t $ exchange n perm perm1 flipsMaxP

            fm   <span class="hl sym">&lt;-</span> IO $ \s <span class="hl sym">-&gt;</span> <span class="hl kwa">case</span> readIntOffAddr# flipsMaxP <span class="hl num">0</span># s <span class="hl kwa">of</span>
                                <span class="hl sym">(</span># s<span class="hl sym">,</span> x #<span class="hl sym">) -&gt; (</span># s<span class="hl sym">,</span> I# x #<span class="hl sym">)</span>
            done <span class="hl sym">&lt;-</span> IO $ \s <span class="hl sym">-&gt;</span> rot rP <span class="hl sym">(</span>n# <span class="hl sym">-</span># <span class="hl num">2</span>#<span class="hl sym">)</span> p1# c# s
            if done <span class="hl kwa">then</span> return fm <span class="hl kwa">else</span> go
    go

<span class="hl slc">------------------------------------------------------------------------</span>

exchange n p<span class="hl sym">&#64;(</span>Ptr a<span class="hl sym">)</span> p1<span class="hl sym">&#64;(</span>Ptr b<span class="hl sym">)</span> fm <span class="hl sym">=</span> <span class="hl kwa">do</span>
    copyArray <span class="hl sym">(</span>p `advancePtr` <span class="hl num">1</span><span class="hl sym">) (</span>p1 `advancePtr` <span class="hl num">1</span><span class="hl sym">) (</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
    IO $ \s <span class="hl sym">-&gt;</span>
        <span class="hl kwa">case</span> readIntOffAddr# b <span class="hl num">0</span># s  <span class="hl kwa">of</span> { <span class="hl sym">(</span># s<span class="hl sym">,</span> k #<span class="hl sym">) -&gt;</span>
        <span class="hl kwa">case</span> doswap k a <span class="hl num">0</span># s         <span class="hl kwa">of</span> { <span class="hl sym">(</span># s<span class="hl sym">,</span> f #<span class="hl sym">) -&gt;</span>
        <span class="hl kwa">case</span> readIntOffAddr# fm <span class="hl num">0</span># s <span class="hl kwa">of</span> { <span class="hl sym">(</span># s<span class="hl sym">,</span> m #<span class="hl sym">) -&gt;</span>
        if m <span class="hl sym">&lt;</span># f <span class="hl kwa">then case</span> writeIntOffAddr# fm <span class="hl num">0</span># f s <span class="hl kwa">of</span> s <span class="hl sym">-&gt; (</span># s<span class="hl sym">, ()</span> #<span class="hl sym">)</span>
                  <span class="hl kwa">else</span> <span class="hl sym">(</span># s<span class="hl sym">, ()</span> #<span class="hl sym">)</span>
        } } }
<span class="hl com">{-# INLINE exchange #-}</span>

doswap k a f s <span class="hl sym">=</span>
    <span class="hl kwa">case</span> swap <span class="hl num">1</span># <span class="hl sym">(</span>k <span class="hl sym">-</span># <span class="hl num">1</span>#<span class="hl sym">)</span> a s    <span class="hl kwa">of</span> { <span class="hl sym">(</span># s<span class="hl sym">,</span> _ #<span class="hl sym">) -&gt;</span>
    <span class="hl kwa">case</span> readIntOffAddr# a k s    <span class="hl kwa">of</span> { <span class="hl sym">(</span># s<span class="hl sym">,</span> j #<span class="hl sym">) -&gt;</span>
    <span class="hl kwa">case</span> writeIntOffAddr# a k k s <span class="hl kwa">of</span> { s          <span class="hl sym">-&gt;</span>
    if k <span class="hl sym">/=</span># <span class="hl num">0</span># <span class="hl kwa">then</span> doswap j a <span class="hl sym">(</span>f <span class="hl sym">+</span># <span class="hl num">1</span>#<span class="hl sym">)</span> s <span class="hl kwa">else</span> <span class="hl sym">(</span># s<span class="hl sym">, (</span>f <span class="hl sym">+</span># <span class="hl num">1</span>#<span class="hl sym">)</span> #<span class="hl sym">)</span>
    } } }
<span class="hl com">{-# INLINE doswap #-}</span>

swap i j a s <span class="hl sym">=</span>
    if i <span class="hl sym">&lt;</span># j <span class="hl kwa">then case</span> readIntOffAddr#  a i s   <span class="hl kwa">of</span> { <span class="hl sym">(</span># s<span class="hl sym">,</span> x #<span class="hl sym">) -&gt;</span>
                   <span class="hl kwa">case</span> readIntOffAddr#  a j s   <span class="hl kwa">of</span> { <span class="hl sym">(</span># s<span class="hl sym">,</span> y #<span class="hl sym">) -&gt;</span>
                   <span class="hl kwa">case</span> writeIntOffAddr# a j x s <span class="hl kwa">of</span> { s          <span class="hl sym">-&gt;</span>
                   <span class="hl kwa">case</span> writeIntOffAddr# a i y s <span class="hl kwa">of</span> { s          <span class="hl sym">-&gt;</span>
                   swap <span class="hl sym">(</span>i <span class="hl sym">+</span># <span class="hl num">1</span>#<span class="hl sym">) (</span>j <span class="hl sym">-</span># <span class="hl num">1</span>#<span class="hl sym">)</span> a s
                   } } } }
              <span class="hl kwa">else</span> <span class="hl sym">(</span># s<span class="hl sym">, ()</span> #<span class="hl sym">)</span>
<span class="hl com">{-# INLINE swap #-}</span>

loop r i a s <span class="hl sym">=</span>
    if i <span class="hl sym">&lt;</span># r <span class="hl kwa">then case</span> readIntOffAddr# a <span class="hl sym">(</span>i <span class="hl sym">+</span># <span class="hl num">1</span>#<span class="hl sym">)</span> s <span class="hl kwa">of</span>
                    <span class="hl sym">(</span># s<span class="hl sym">,</span> x #<span class="hl sym">) -&gt;</span> <span class="hl kwa">case</span> writeIntOffAddr# a i x s <span class="hl kwa">of</span>
                        s <span class="hl sym">-&gt;</span> loop r <span class="hl sym">(</span>i <span class="hl sym">+</span># <span class="hl num">1</span>#<span class="hl sym">)</span> a s
              <span class="hl kwa">else</span> <span class="hl sym">(</span># s<span class="hl sym">, ()</span> #<span class="hl sym">)</span>
<span class="hl com">{-# INLINE loop #-}</span>

setcount p r s <span class="hl sym">=</span>
    if r <span class="hl sym">==</span># <span class="hl num">1</span># <span class="hl kwa">then</span> <span class="hl sym">(</span># s<span class="hl sym">, ()</span> #<span class="hl sym">)</span>
                <span class="hl kwa">else case</span> writeIntOffAddr# p <span class="hl sym">(</span>r <span class="hl sym">-</span># <span class="hl num">1</span>#<span class="hl sym">)</span> r s <span class="hl kwa">of</span>
                        s <span class="hl sym">-&gt;</span> setcount p <span class="hl sym">(</span>r <span class="hl sym">-</span># <span class="hl num">1</span>#<span class="hl sym">)</span> s
<span class="hl com">{-# INLINE setcount #-}</span>

rot rP n a cp s <span class="hl sym">=</span>
  <span class="hl kwa">case</span> readIntOffAddr# rP <span class="hl num">0</span># s <span class="hl kwa">of</span> { <span class="hl sym">(</span># s<span class="hl sym">,</span> r #<span class="hl sym">) -&gt;</span>
  if r <span class="hl sym">==</span># n <span class="hl kwa">then</span> <span class="hl sym">(</span># s<span class="hl sym">,</span> <span class="hl kwa">True</span> #<span class="hl sym">)</span>
             <span class="hl kwa">else case</span> readIntOffAddr# a <span class="hl num">0</span># s             <span class="hl kwa">of</span> { <span class="hl sym">(</span># s<span class="hl sym">,</span> p0 #<span class="hl sym">) -&gt;</span>
                  <span class="hl kwa">case</span> loop r <span class="hl num">0</span># a s                      <span class="hl kwa">of</span> { <span class="hl sym">(</span># s<span class="hl sym">,</span> _ #<span class="hl sym">)  -&gt;</span>
                  <span class="hl kwa">case</span> writeIntOffAddr# a r p0 s          <span class="hl kwa">of</span> { s           <span class="hl sym">-&gt;</span>
                  <span class="hl kwa">case</span> readIntOffAddr# cp r s             <span class="hl kwa">of</span> { <span class="hl sym">(</span># s<span class="hl sym">,</span> cr #<span class="hl sym">) -&gt;</span>
                  <span class="hl kwa">case</span> writeIntOffAddr# cp r <span class="hl sym">(</span>cr <span class="hl sym">-</span># <span class="hl num">1</span>#<span class="hl sym">)</span> s <span class="hl kwa">of</span> { s           <span class="hl sym">-&gt;</span>
                  if cr <span class="hl sym">-</span># <span class="hl num">1</span># <span class="hl sym">&gt;</span># <span class="hl num">0</span># <span class="hl kwa">then</span> <span class="hl sym">(</span># s<span class="hl sym">,</span> <span class="hl kwa">False</span> #<span class="hl sym">)</span>
                                    <span class="hl kwa">else case</span> inc s <span class="hl kwa">of</span> s <span class="hl sym">-&gt;</span> rot rP n a cp s
  } } } } } }
  <span class="hl kwa">where</span> inc s <span class="hl sym">=</span> <span class="hl kwa">case</span> readIntOffAddr# rP <span class="hl num">0</span># s <span class="hl kwa">of</span>
                  <span class="hl sym">(</span># s<span class="hl sym">,</span> x #<span class="hl sym">) -&gt;</span> writeIntOffAddr# rP <span class="hl num">0</span># <span class="hl sym">(</span>x <span class="hl sym">+</span># <span class="hl num">1</span>#<span class="hl sym">)</span> s
<span class="hl com">{-# INLINE rot #-}</span>

ppr i n p <span class="hl sym">=</span> when <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> n<span class="hl sym">)</span> $ <span class="hl kwa">do</span>
    putStr . show . <span class="hl sym">(+</span><span class="hl num">1</span><span class="hl sym">) =&lt;&lt;</span> peek <span class="hl sym">(</span>p `advancePtr` i<span class="hl sym">)</span>
    ppr <span class="hl sym">(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span> n p
