<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;   http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;</span>
<span class="hl slc">;;  contributed by Jim Kannampuzha</span>
<span class="hl slc">;;  version 0.9</span>

<span class="hl sym">(</span>ns spectralnorm
 <span class="hl sym">(:</span>import <span class="hl sym">(</span>java.text DecimalFormat<span class="hl sym">) (</span>java.util Locale<span class="hl sym">))</span>
 <span class="hl sym">(:</span>use clojure.test<span class="hl sym">)</span>
 <span class="hl sym">(:</span>gen<span class="hl sym">-</span>class<span class="hl sym">))</span>

<span class="hl sym">(</span>set<span class="hl sym">! *</span>warn<span class="hl sym">-</span>on<span class="hl sym">-</span>reflection<span class="hl sym">*</span> true<span class="hl sym">)</span>


<span class="hl sym">(</span>def num<span class="hl sym">-</span>threads <span class="hl sym">(</span>.availableProcessors <span class="hl sym">(</span>Runtime<span class="hl sym">/</span>getRuntime<span class="hl sym">)))</span>
<span class="hl sym">(</span>def workers <span class="hl sym">(</span>vec <span class="hl sym">(</span>repeatedly num<span class="hl sym">-</span>threads #<span class="hl sym">(</span>agent <span class="hl sym">()))))</span>
<span class="hl sym">(</span>def indices <span class="hl sym">(</span>atom <span class="hl sym">()))</span>
<span class="hl sym">(</span>def chunks <span class="hl sym">(</span>atom <span class="hl sym">()))</span>

<span class="hl sym">(</span>defn eval<span class="hl sym">-</span>A
  <span class="hl sym">[</span>ii jj<span class="hl sym">] (</span>let <span class="hl sym">[</span>i <span class="hl sym">(</span>int ii<span class="hl sym">)</span>
                j <span class="hl sym">(</span>int jj<span class="hl sym">)</span>
                div <span class="hl sym">(+ (*</span> j j<span class="hl sym">)</span>
                       <span class="hl sym">(+ (* (+</span> i i<span class="hl sym">)</span> j<span class="hl sym">)</span>
                          <span class="hl sym">(- (+ (*</span> i i<span class="hl sym">)(- (</span>int <span class="hl num">2</span><span class="hl sym">)</span> i<span class="hl sym">)) (* (</span>int <span class="hl num">3</span><span class="hl sym">)</span> j<span class="hl sym">))))]</span>
            <span class="hl sym">(/ (</span>double <span class="hl num">2</span><span class="hl sym">)</span> div<span class="hl sym">)))</span>

<span class="hl sym">(</span>defn mult<span class="hl sym">-</span>Av <span class="hl sym">[</span>a chunk v<span class="hl sym">]</span>
  <span class="hl sym">(</span>for <span class="hl sym">[</span>i chunk<span class="hl sym">] (</span>reduce <span class="hl sym">+ (</span>map <span class="hl sym">* (</span>for <span class="hl sym">[</span>j &#64;indices<span class="hl sym">] (</span>eval<span class="hl sym">-</span>A i j<span class="hl sym">))</span> v<span class="hl sym">))))</span>

<span class="hl sym">(</span>defn mult<span class="hl sym">-</span>Atv <span class="hl sym">[</span>a chunk v<span class="hl sym">]</span>
  <span class="hl sym">(</span>for <span class="hl sym">[</span>i chunk<span class="hl sym">] (</span>reduce <span class="hl sym">+ (</span>map <span class="hl sym">* (</span>for <span class="hl sym">[</span>j &#64;indices<span class="hl sym">] (</span>eval<span class="hl sym">-</span>A j i<span class="hl sym">))</span> v<span class="hl sym">))))</span>

<span class="hl sym">(</span>defn mult<span class="hl sym">-</span>AtAv <span class="hl sym">[</span>v<span class="hl sym">]</span>
  <span class="hl sym">(</span>dotimes <span class="hl sym">[</span>i num<span class="hl sym">-</span>threads<span class="hl sym">] (</span>send <span class="hl sym">(</span>nth workers i<span class="hl sym">)</span> mult<span class="hl sym">-</span>Atv <span class="hl sym">(</span>nth &#64;chunks i<span class="hl sym">)</span> v<span class="hl sym">))</span>
  <span class="hl sym">(</span>apply await workers<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>w <span class="hl sym">(</span>apply concat <span class="hl sym">(</span>map deref workers<span class="hl sym">))]</span>
    <span class="hl sym">(</span>dotimes <span class="hl sym">[</span>i num<span class="hl sym">-</span>threads<span class="hl sym">] (</span>send <span class="hl sym">(</span>nth workers i<span class="hl sym">)</span> mult<span class="hl sym">-</span>Av <span class="hl sym">(</span>nth &#64;chunks i<span class="hl sym">)</span> w<span class="hl sym">)))</span>
  <span class="hl sym">(</span>apply await workers<span class="hl sym">)</span>
  <span class="hl sym">(</span>apply concat <span class="hl sym">(</span>map deref workers<span class="hl sym">)))</span>

<span class="hl sym">(</span>defn spec <span class="hl sym">[</span>n<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>chunk<span class="hl sym">-</span>size <span class="hl sym">(</span>Math<span class="hl sym">/</span>ceil <span class="hl sym">(/</span> n <span class="hl sym">(</span>double num<span class="hl sym">-</span>threads<span class="hl sym">)))]</span>
    <span class="hl sym">(</span>reset<span class="hl sym">!</span> indices <span class="hl sym">(</span>range <span class="hl num">1</span> <span class="hl sym">(</span>inc n<span class="hl sym">)))</span>
    <span class="hl sym">(</span>reset<span class="hl sym">!</span> chunks <span class="hl sym">(</span>vec <span class="hl sym">(</span>partition<span class="hl sym">-</span>all chunk<span class="hl sym">-</span>size &#64;indices<span class="hl sym">)))</span>
    <span class="hl sym">(</span>let <span class="hl sym">[</span>u <span class="hl sym">(</span>repeat n <span class="hl num">1.0</span><span class="hl sym">)</span>
          v <span class="hl sym">(</span>nth <span class="hl sym">(</span>iterate mult<span class="hl sym">-</span>AtAv u<span class="hl sym">)</span> <span class="hl num">19</span><span class="hl sym">)</span>
          uv <span class="hl sym">(</span>mult<span class="hl sym">-</span>AtAv v<span class="hl sym">)</span>
          vBv <span class="hl sym">(</span>reduce <span class="hl sym">+ (</span>map <span class="hl sym">*</span> uv v<span class="hl sym">))</span>
          vv <span class="hl sym">(</span>reduce <span class="hl sym">+ (</span>map <span class="hl sym">*</span> v v<span class="hl sym">))]</span>
      <span class="hl sym">(</span>java.lang.Math<span class="hl sym">/</span>sqrt <span class="hl sym">(</span>double <span class="hl sym">(/</span> vBv vv<span class="hl sym">))))))</span>

<span class="hl sym">(</span>defn <span class="hl sym">-</span>main <span class="hl sym">[&amp;</span> args<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>n <span class="hl sym">(</span>if <span class="hl sym">(</span>first args<span class="hl sym">) (</span>Integer<span class="hl sym">/</span>parseInt <span class="hl sym">(</span>first args<span class="hl sym">))</span> <span class="hl num">1000</span><span class="hl sym">)</span>
        df <span class="hl sym">(</span>doto ^DecimalFormat <span class="hl sym">(</span>DecimalFormat<span class="hl sym">/</span>getNumberInstance Locale<span class="hl sym">/</span>US<span class="hl sym">)</span>
             <span class="hl sym">(</span>.applyPattern <span class="hl str">&quot;#.000000000&quot;</span><span class="hl sym">))]</span>
    <span class="hl sym">(</span>println <span class="hl sym">(</span>.format df <span class="hl sym">(</span>spec n<span class="hl sym">))))</span>
  <span class="hl sym">(</span>shutdown<span class="hl sym">-</span>agents<span class="hl sym">))</span>
