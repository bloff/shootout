<span class="hl slc">// The Computer Language Benchmarks Game</span>
<span class="hl slc">// http://shootout.alioth.debian.org/</span>
<span class="hl slc">// Contributed by Paul Kitchin</span>
<span class="hl slc">// OpenMP by The Anh Tran</span>

<span class="hl dir">#include &lt;omp.h&gt;</span>
<span class="hl dir">#include &lt;cstdio&gt;</span>
<span class="hl dir">#include &lt;cstring&gt;</span>
<span class="hl dir">#include &lt;iostream&gt;</span>
<span class="hl dir">#include &lt;set&gt;</span>
<span class="hl dir">#include &lt;vector&gt;</span>
<span class="hl dir">#include &lt;algorithm&gt;</span>
<span class="hl dir">#include &lt;sched.h&gt;</span>

<span class="hl kwc">template</span> <span class="hl sym">&lt;</span> std<span class="hl sym">::</span><span class="hl kwb">size_t</span> size <span class="hl sym">&gt;</span>
<span class="hl kwb">struct</span> hasher
<span class="hl sym">{</span>
   <span class="hl kwb">static</span> std<span class="hl sym">::</span><span class="hl kwb">size_t const</span> length <span class="hl sym">=</span> size<span class="hl sym">;</span>
   <span class="hl kwb">static char const</span> <span class="hl sym">*</span> <span class="hl kwd">string</span><span class="hl sym">(</span><span class="hl kwb">char const</span> <span class="hl sym">*</span> string<span class="hl sym">,</span> <span class="hl kwb">char</span><span class="hl sym">*</span> tmp<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwd">strncpy</span><span class="hl sym">(</span>tmp<span class="hl sym">,</span> string<span class="hl sym">,</span> size<span class="hl sym">);</span>
      <span class="hl kwa">return</span> tmp<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   std<span class="hl sym">::</span><span class="hl kwb">size_t</span> <span class="hl kwd">hash</span><span class="hl sym">(</span><span class="hl kwb">char const</span> <span class="hl sym">*</span> string<span class="hl sym">)</span> <span class="hl kwb">const</span>
   <span class="hl sym">{</span>
      std<span class="hl sym">::</span><span class="hl kwb">size_t</span> h <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span>std<span class="hl sym">::</span><span class="hl kwb">size_t</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> size<span class="hl sym">; ++</span>i<span class="hl sym">)</span>
         h <span class="hl sym">= (</span>h <span class="hl sym">*</span> <span class="hl num">4</span><span class="hl sym">) + ((</span>string<span class="hl sym">[</span>i<span class="hl sym">] &amp;</span> <span class="hl num">0x6</span><span class="hl sym">) /</span> <span class="hl num">2</span><span class="hl sym">);</span>

      <span class="hl kwa">return</span> h<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwb">bool</span> <span class="hl kwd">equal</span><span class="hl sym">(</span><span class="hl kwb">char const</span> <span class="hl sym">*</span> lhs<span class="hl sym">,</span> <span class="hl kwb">char const</span> <span class="hl sym">*</span> rhs<span class="hl sym">)</span> <span class="hl kwb">const</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">return</span> std<span class="hl sym">::</span><span class="hl kwd">strncmp</span><span class="hl sym">(</span>lhs<span class="hl sym">,</span> rhs<span class="hl sym">,</span> size<span class="hl sym">) ==</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>
<span class="hl sym">};</span>

<span class="hl kwc">template</span> <span class="hl sym">&lt;</span> typename key<span class="hl sym">,</span> typename value<span class="hl sym">,</span> typename hash_traits <span class="hl sym">&gt;</span>
<span class="hl kwc">class</span> hashtable <span class="hl sym">:</span> <span class="hl kwc">private</span> hash_traits
<span class="hl sym">{</span>
<span class="hl kwc">public</span><span class="hl sym">:</span>

   <span class="hl kwb">struct</span> entry
   <span class="hl sym">{</span>
      key key_<span class="hl sym">;</span>
      value value_<span class="hl sym">;</span>
      entry <span class="hl sym">*</span> next_<span class="hl sym">;</span>

      <span class="hl kwd">entry</span><span class="hl sym">()   :</span> <span class="hl kwd">key_</span><span class="hl sym">(</span><span class="hl kwd">key</span><span class="hl sym">()),</span> <span class="hl kwd">value_</span><span class="hl sym">(</span><span class="hl kwd">value</span><span class="hl sym">()),</span>   <span class="hl kwd">next_</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
      <span class="hl sym">{   }</span>

      <span class="hl kwd">entry</span><span class="hl sym">(</span>key key_<span class="hl sym">)   :</span> <span class="hl kwd">key_</span><span class="hl sym">(</span>key_<span class="hl sym">),</span> <span class="hl kwd">value_</span><span class="hl sym">(</span><span class="hl kwd">value</span><span class="hl sym">()),</span> <span class="hl kwd">next_</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
      <span class="hl sym">{   }</span>

      <span class="hl kwb">bool</span> <span class="hl kwc">operator</span><span class="hl sym">&lt;(</span>entry <span class="hl kwb">const</span> <span class="hl sym">&amp;</span> entry<span class="hl sym">)</span> <span class="hl kwb">const</span>
      <span class="hl sym">{</span>
         <span class="hl kwa">return</span> value_ <span class="hl sym">&gt;</span> entry<span class="hl sym">.</span>value_<span class="hl sym">;</span>
      <span class="hl sym">}</span>
   <span class="hl sym">};</span>

   <span class="hl kwd">hashtable</span><span class="hl sym">(</span>std<span class="hl sym">::</span><span class="hl kwb">size_t</span> size<span class="hl sym">)   :</span> <span class="hl kwd">size_</span><span class="hl sym">(</span><span class="hl kwd">power_of_two</span><span class="hl sym">(</span>size<span class="hl sym">)),</span> <span class="hl kwd">table_</span><span class="hl sym">(</span>size_<span class="hl sym">)</span>
   <span class="hl sym">{   }</span>

   value <span class="hl sym">&amp;</span> <span class="hl kwc">operator</span><span class="hl sym">[](</span>key lookup_key<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      entry <span class="hl sym">*</span> node <span class="hl sym">= &amp;</span>table_<span class="hl sym">[</span><span class="hl kwd">hash</span><span class="hl sym">(</span>lookup_key<span class="hl sym">) &amp; (</span>size_ <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)];</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>node<span class="hl sym">-&gt;</span>key_<span class="hl sym">)</span>
      <span class="hl sym">{</span>
         <span class="hl kwa">while</span> <span class="hl sym">(!</span><span class="hl kwd">equal</span><span class="hl sym">(</span>lookup_key<span class="hl sym">,</span> node<span class="hl sym">-&gt;</span>key_<span class="hl sym">) &amp;&amp;</span> node<span class="hl sym">-&gt;</span>next_<span class="hl sym">)</span>
            node <span class="hl sym">=</span> node<span class="hl sym">-&gt;</span>next_<span class="hl sym">;</span>

         <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">equal</span><span class="hl sym">(</span>lookup_key<span class="hl sym">,</span> node<span class="hl sym">-&gt;</span>key_<span class="hl sym">))</span>
            <span class="hl kwa">return</span> node<span class="hl sym">-&gt;</span>value_<span class="hl sym">;</span>

         node<span class="hl sym">-&gt;</span>next_ <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">entry</span><span class="hl sym">(</span><span class="hl kwd">value</span><span class="hl sym">());</span>
         node <span class="hl sym">=</span> node<span class="hl sym">-&gt;</span>next_<span class="hl sym">;</span>
      <span class="hl sym">}</span>
      node<span class="hl sym">-&gt;</span>key_ <span class="hl sym">=</span> lookup_key<span class="hl sym">;</span>
      <span class="hl kwa">return</span> node<span class="hl sym">-&gt;</span>value_<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwc">typedef</span> typename std<span class="hl sym">::</span>vector<span class="hl sym">&lt;</span> entry <span class="hl sym">&gt;::</span>const_iterator const_iterator<span class="hl sym">;</span>

   const_iterator <span class="hl kwd">begin</span><span class="hl sym">()</span> <span class="hl kwb">const</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">return</span> table_<span class="hl sym">.</span><span class="hl kwd">begin</span><span class="hl sym">();</span>
   <span class="hl sym">}</span>

   const_iterator <span class="hl kwd">end</span><span class="hl sym">()</span> <span class="hl kwb">const</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">return</span> table_<span class="hl sym">.</span><span class="hl kwd">end</span><span class="hl sym">();</span>
   <span class="hl sym">}</span>

<span class="hl kwc">private</span><span class="hl sym">:</span>
   std<span class="hl sym">::</span><span class="hl kwb">size_t</span> size_<span class="hl sym">;</span>
   std<span class="hl sym">::</span>vector<span class="hl sym">&lt;</span> entry <span class="hl sym">&gt;</span> table_<span class="hl sym">;</span>

   std<span class="hl sym">::</span><span class="hl kwb">size_t</span> <span class="hl kwd">power_of_two</span><span class="hl sym">(</span>std<span class="hl sym">::</span><span class="hl kwb">size_t</span> lower_bound<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span>std<span class="hl sym">::</span><span class="hl kwb">size_t</span> i <span class="hl sym">=</span> <span class="hl num">4</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">64</span> <span class="hl sym">*</span> <span class="hl num">1024</span><span class="hl sym">;</span> i <span class="hl sym">*=</span> <span class="hl num">2</span><span class="hl sym">)</span>
      <span class="hl sym">{</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>i <span class="hl sym">&gt;=</span> lower_bound<span class="hl sym">)</span>
            <span class="hl kwa">return</span> i<span class="hl sym">;</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">return</span> <span class="hl num">1024</span> <span class="hl sym">*</span> <span class="hl num">64</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>
<span class="hl sym">};</span>

<span class="hl kwc">template</span> <span class="hl sym">&lt;</span> typename hasher <span class="hl sym">&gt;</span>
<span class="hl kwb">void</span> <span class="hl kwd">write_frequencies</span><span class="hl sym">(</span>std<span class="hl sym">::</span>vector<span class="hl sym">&lt;</span> <span class="hl kwb">char</span> <span class="hl sym">&gt;</span> <span class="hl kwb">const</span> <span class="hl sym">&amp;</span> input<span class="hl sym">,</span> <span class="hl kwb">char</span><span class="hl sym">*</span> output<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwc">typedef</span> hashtable<span class="hl sym">&lt;</span> <span class="hl kwb">char const</span> <span class="hl sym">*,</span> std<span class="hl sym">::</span><span class="hl kwb">size_t</span><span class="hl sym">,</span> hasher <span class="hl sym">&gt;</span> frequency_table<span class="hl sym">;</span>
   <span class="hl kwc">typedef</span> typename std<span class="hl sym">::</span>set<span class="hl sym">&lt;</span> typename frequency_table<span class="hl sym">::</span>entry <span class="hl sym">&gt;::</span>const_iterator sc_ite<span class="hl sym">;</span>

   std<span class="hl sym">::</span><span class="hl kwb">size_t</span> sum <span class="hl sym">=</span> input<span class="hl sym">.</span><span class="hl kwd">size</span><span class="hl sym">() +</span> <span class="hl num">1</span> <span class="hl sym">-</span> hasher<span class="hl sym">::</span>length<span class="hl sym">;</span>

   frequency_table <span class="hl kwd">frequencies</span><span class="hl sym">(</span>std<span class="hl sym">::</span>min<span class="hl sym">&lt;</span> std<span class="hl sym">::</span><span class="hl kwb">size_t</span> <span class="hl sym">&gt;(</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>hasher<span class="hl sym">::</span>length <span class="hl sym">*</span> <span class="hl num">2</span><span class="hl sym">),</span> sum<span class="hl sym">));</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">size_t</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> i_end <span class="hl sym">=</span> input<span class="hl sym">.</span><span class="hl kwd">size</span><span class="hl sym">() +</span> <span class="hl num">1</span> <span class="hl sym">-</span> hasher<span class="hl sym">::</span>length<span class="hl sym">;</span> i <span class="hl sym">!=</span> i_end<span class="hl sym">; ++</span>i<span class="hl sym">)</span>
      <span class="hl sym">++</span>frequencies<span class="hl sym">[ &amp;</span>input<span class="hl sym">[</span>i<span class="hl sym">] ];</span>

   std<span class="hl sym">::</span>set<span class="hl sym">&lt;</span> typename frequency_table<span class="hl sym">::</span>entry <span class="hl sym">&gt;</span> <span class="hl kwd">ordered_entries</span><span class="hl sym">(</span>frequencies<span class="hl sym">.</span><span class="hl kwd">begin</span><span class="hl sym">(),</span> frequencies<span class="hl sym">.</span><span class="hl kwd">end</span><span class="hl sym">());</span>

   <span class="hl kwb">size_t</span> printedchar <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span>   sc_ite i <span class="hl sym">=</span> ordered_entries<span class="hl sym">.</span><span class="hl kwd">begin</span><span class="hl sym">(),</span> i_end <span class="hl sym">=</span> ordered_entries<span class="hl sym">.</span><span class="hl kwd">end</span><span class="hl sym">();</span> i <span class="hl sym">!=</span> i_end<span class="hl sym">; ++</span>i<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwb">char</span> tmpbuf<span class="hl sym">[</span><span class="hl num">32</span><span class="hl sym">] = {</span><span class="hl num">0</span><span class="hl sym">};</span>
      printedchar <span class="hl sym">+=</span> <span class="hl kwd">sprintf</span><span class="hl sym">(</span>   output <span class="hl sym">+</span>printedchar<span class="hl sym">,</span> <span class="hl str">&quot;%s %0.3f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span>
                     hasher<span class="hl sym">::</span><span class="hl kwd">string</span><span class="hl sym">(</span>i<span class="hl sym">-&gt;</span>key_<span class="hl sym">,</span> tmpbuf<span class="hl sym">),</span>
                     <span class="hl sym">(</span>sum ? <span class="hl kwb">double</span><span class="hl sym">(</span>i<span class="hl sym">-&gt;</span>value_<span class="hl sym">) *</span> <span class="hl num">100.0</span> <span class="hl sym">/</span> sum <span class="hl sym">:</span> <span class="hl num">0.0</span><span class="hl sym">)   );</span>
   <span class="hl sym">}</span>

   <span class="hl kwd">strcpy</span><span class="hl sym">(</span>output <span class="hl sym">+</span> printedchar<span class="hl sym">,</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwc">template</span> <span class="hl sym">&lt;</span> typename hasher <span class="hl sym">&gt;</span>
<span class="hl kwb">void</span> <span class="hl kwd">write_count</span><span class="hl sym">(</span>std<span class="hl sym">::</span>vector<span class="hl sym">&lt;</span> <span class="hl kwb">char</span> <span class="hl sym">&gt;</span> <span class="hl kwb">const</span> <span class="hl sym">&amp;</span> input<span class="hl sym">,</span> <span class="hl kwb">char const</span> <span class="hl sym">*</span> string<span class="hl sym">,</span> <span class="hl kwb">char</span><span class="hl sym">*</span> output<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwc">typedef</span> hashtable<span class="hl sym">&lt;</span> <span class="hl kwb">char const</span> <span class="hl sym">*,</span> std<span class="hl sym">::</span><span class="hl kwb">size_t</span><span class="hl sym">,</span> hasher <span class="hl sym">&gt;</span> frequency_table<span class="hl sym">;</span>

   std<span class="hl sym">::</span><span class="hl kwb">size_t</span> sum <span class="hl sym">=</span> input<span class="hl sym">.</span><span class="hl kwd">size</span><span class="hl sym">() +</span> <span class="hl num">1</span> <span class="hl sym">-</span> hasher<span class="hl sym">::</span>length<span class="hl sym">;</span>

   frequency_table <span class="hl kwd">frequencies</span><span class="hl sym">(</span>std<span class="hl sym">::</span>min<span class="hl sym">&lt;</span><span class="hl kwb">size_t</span><span class="hl sym">&gt;(</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> std<span class="hl sym">::</span>min<span class="hl sym">&lt;</span><span class="hl kwb">size_t</span><span class="hl sym">&gt;(</span><span class="hl num">30</span><span class="hl sym">,</span> hasher<span class="hl sym">::</span>length <span class="hl sym">*</span> <span class="hl num">2</span><span class="hl sym">),</span> sum<span class="hl sym">));</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">size_t</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> i_end <span class="hl sym">=</span> input<span class="hl sym">.</span><span class="hl kwd">size</span><span class="hl sym">() +</span> <span class="hl num">1</span> <span class="hl sym">-</span> hasher<span class="hl sym">::</span>length<span class="hl sym">;</span> i <span class="hl sym">!=</span> i_end<span class="hl sym">; ++</span>i<span class="hl sym">)</span>
      <span class="hl sym">++</span>frequencies<span class="hl sym">[ &amp;</span>input<span class="hl sym">[</span>i<span class="hl sym">] ];</span>

   <span class="hl kwd">sprintf</span><span class="hl sym">(</span>output<span class="hl sym">,</span> <span class="hl str">&quot;%u</span><span class="hl esc">\t</span><span class="hl str">%s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">, (</span><span class="hl kwb">unsigned int</span><span class="hl sym">)(</span>frequencies<span class="hl sym">[</span>string<span class="hl sym">]),</span> string<span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwb">static</span>
<span class="hl kwb">char</span> <span class="hl kwd">to_upper</span><span class="hl sym">(</span><span class="hl kwb">char</span> c<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwa">return</span> <span class="hl kwb">char</span><span class="hl sym">(</span>std<span class="hl sym">::</span><span class="hl kwd">toupper</span><span class="hl sym">(</span>c<span class="hl sym">));</span>
<span class="hl sym">}</span>

<span class="hl kwb">static</span>
<span class="hl kwb">int</span> <span class="hl kwd">GetThreadCount</span><span class="hl sym">()</span>
<span class="hl sym">{</span>
   cpu_set_t cs<span class="hl sym">;</span>
   <span class="hl kwd">CPU_ZERO</span><span class="hl sym">(&amp;</span>cs<span class="hl sym">);</span>
   <span class="hl kwd">sched_getaffinity</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span>cs<span class="hl sym">), &amp;</span>cs<span class="hl sym">);</span>

   <span class="hl kwb">int</span> count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">16</span><span class="hl sym">;</span> i<span class="hl sym">++)</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">CPU_ISSET</span><span class="hl sym">(</span>i<span class="hl sym">, &amp;</span>cs<span class="hl sym">))</span>
         count<span class="hl sym">++;</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">return</span> count<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl sym">()</span>
<span class="hl sym">{</span>
   std<span class="hl sym">::</span>vector<span class="hl sym">&lt;</span> <span class="hl kwb">char</span> <span class="hl sym">&gt;</span> input<span class="hl sym">;</span>
   input<span class="hl sym">.</span><span class="hl kwd">reserve</span><span class="hl sym">(</span><span class="hl num">256</span><span class="hl sym">*</span><span class="hl num">1024</span><span class="hl sym">*</span><span class="hl num">1024</span><span class="hl sym">);</span> <span class="hl slc">// 256MB</span>

   <span class="hl kwb">char</span> buffer<span class="hl sym">[</span><span class="hl num">4096</span><span class="hl sym">];</span>

   <span class="hl slc">// Rule: line-by-line</span>
   <span class="hl kwa">while</span> <span class="hl sym">(</span>std<span class="hl sym">::</span>cin<span class="hl sym">.</span><span class="hl kwd">getline</span><span class="hl sym">(</span>buffer<span class="hl sym">,</span> <span class="hl num">4096</span><span class="hl sym">) &amp;&amp;</span> std<span class="hl sym">::</span><span class="hl kwd">strncmp</span><span class="hl sym">(</span>buffer<span class="hl sym">,</span> <span class="hl str">&quot;&gt;THREE&quot;</span><span class="hl sym">,</span> <span class="hl num">6</span><span class="hl sym">) !=</span> <span class="hl num">0</span><span class="hl sym">)</span>
   <span class="hl sym">{   }</span>

   <span class="hl kwa">while</span> <span class="hl sym">(</span>std<span class="hl sym">::</span>cin<span class="hl sym">.</span><span class="hl kwd">getline</span><span class="hl sym">(</span>buffer<span class="hl sym">,</span> <span class="hl num">4096</span><span class="hl sym">) &amp;&amp;</span> buffer<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] !=</span> <span class="hl str">'&gt;'</span><span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>buffer<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] !=</span> <span class="hl str">';'</span><span class="hl sym">)</span>
         input<span class="hl sym">.</span><span class="hl kwd">insert</span><span class="hl sym">(</span>input<span class="hl sym">.</span><span class="hl kwd">end</span><span class="hl sym">(),</span> buffer<span class="hl sym">,</span> buffer <span class="hl sym">+</span> std<span class="hl sym">::</span>cin<span class="hl sym">.</span><span class="hl kwd">gcount</span><span class="hl sym">() -</span> <span class="hl num">1</span><span class="hl sym">);</span>
   <span class="hl sym">}</span>

   std<span class="hl sym">::</span><span class="hl kwd">transform</span><span class="hl sym">(</span>input<span class="hl sym">.</span><span class="hl kwd">begin</span><span class="hl sym">(),</span> input<span class="hl sym">.</span><span class="hl kwd">end</span><span class="hl sym">(),</span> input<span class="hl sym">.</span><span class="hl kwd">begin</span><span class="hl sym">(),</span> to_upper<span class="hl sym">);</span>

   <span class="hl kwb">char</span> output<span class="hl sym">[</span><span class="hl num">7</span><span class="hl sym">][</span><span class="hl num">256</span><span class="hl sym">];</span>
   <span class="hl dir">#pragma omp parallel sections num_threads(GetThreadCount()) default(shared)</span>
   <span class="hl sym">{</span>
      <span class="hl dir">#pragma omp section</span>
      write_count<span class="hl sym">&lt;</span> hasher<span class="hl sym">&lt;</span> <span class="hl num">18</span> <span class="hl sym">&gt; &gt;(</span>input<span class="hl sym">,</span> <span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl sym">,</span> output<span class="hl sym">[</span><span class="hl num">6</span><span class="hl sym">] );</span>
      <span class="hl dir">#pragma omp section</span>
      write_count<span class="hl sym">&lt;</span> hasher<span class="hl sym">&lt;</span> <span class="hl num">12</span> <span class="hl sym">&gt; &gt;(</span>input<span class="hl sym">,</span> <span class="hl str">&quot;GGTATTTTAATT&quot;</span><span class="hl sym">,</span> output<span class="hl sym">[</span><span class="hl num">5</span><span class="hl sym">] );</span>
      <span class="hl dir">#pragma omp section</span>
      write_count<span class="hl sym">&lt;</span> hasher<span class="hl sym">&lt;</span> <span class="hl num">6</span> <span class="hl sym">&gt; &gt;(</span>input<span class="hl sym">,</span> <span class="hl str">&quot;GGTATT&quot;</span><span class="hl sym">,</span> output<span class="hl sym">[</span><span class="hl num">4</span><span class="hl sym">] );</span>
      <span class="hl dir">#pragma omp section</span>
      write_count<span class="hl sym">&lt;</span> hasher<span class="hl sym">&lt;</span> <span class="hl num">4</span> <span class="hl sym">&gt; &gt;(</span>input<span class="hl sym">,</span> <span class="hl str">&quot;GGTA&quot;</span><span class="hl sym">,</span> output<span class="hl sym">[</span><span class="hl num">3</span><span class="hl sym">] );</span>
      <span class="hl dir">#pragma omp section</span>
      write_count<span class="hl sym">&lt;</span> hasher<span class="hl sym">&lt;</span> <span class="hl num">3</span> <span class="hl sym">&gt; &gt;(</span>input<span class="hl sym">,</span> <span class="hl str">&quot;GGT&quot;</span><span class="hl sym">,</span> output<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">] );</span>
      <span class="hl dir">#pragma omp section</span>
      write_frequencies<span class="hl sym">&lt;</span> hasher<span class="hl sym">&lt;</span> <span class="hl num">2</span> <span class="hl sym">&gt; &gt;(</span>input<span class="hl sym">,</span> output<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">] );</span>
      <span class="hl dir">#pragma omp section</span>
      write_frequencies<span class="hl sym">&lt;</span> hasher<span class="hl sym">&lt;</span> <span class="hl num">1</span> <span class="hl sym">&gt; &gt;(</span>input<span class="hl sym">,</span> output<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] );</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">for</span> <span class="hl sym">(</span> <span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">7</span><span class="hl sym">;</span> i<span class="hl sym">++ )</span>
      <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;%s&quot;</span><span class="hl sym">,</span> output<span class="hl sym">[</span>i<span class="hl sym">]);</span>
<span class="hl sym">}</span>
