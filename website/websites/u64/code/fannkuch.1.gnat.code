<span class="hl slc">-----------------------------------------------------------------------</span>
<span class="hl slc">-- The Computer Language Shootout</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">-- converted to Ada by Jim Rogers</span>
<span class="hl slc">-- compile: gcc -c -gnatwu -O2 -gnatn -funroll-loops -gnatp fannkuch.adb</span>
<span class="hl slc">-----------------------------------------------------------------------</span>
<span class="hl kwa">with</span> Ada.Command_Line<span class="hl sym">;</span> <span class="hl kwa">use</span> Ada.Command_Line<span class="hl sym">;</span>
<span class="hl kwa">with</span> Ada.Text_Io<span class="hl sym">;</span> <span class="hl kwa">use</span> Ada.Text_Io<span class="hl sym">;</span>

<span class="hl kwa">procedure</span> Fannkuch <span class="hl kwa">is</span>
   <span class="hl kwa">package</span> Pos_Io <span class="hl kwa">is new</span> Ada.Text_Io.Integer_Io<span class="hl sym">(</span><span class="hl kwb">Positive</span><span class="hl sym">);</span>
   <span class="hl kwa">use</span> Pos_IO<span class="hl sym">;</span>
   <span class="hl kwa">type</span> Perm_Array <span class="hl kwa">is array</span><span class="hl sym">(</span><span class="hl kwb">Natural</span> <span class="hl kwa">range</span> <span class="hl sym">&lt;&gt;)</span> <span class="hl kwa">of</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span>
   <span class="hl kwa">procedure</span> Swap<span class="hl sym">(</span>A<span class="hl sym">,</span> B <span class="hl sym">:</span> <span class="hl kwa">in out</span> <span class="hl kwb">Natural</span><span class="hl sym">)</span> <span class="hl kwa">is</span>
      Temp <span class="hl sym">:</span> <span class="hl kwb">Natural</span> <span class="hl sym">:=</span> A<span class="hl sym">;</span>
   <span class="hl kwa">begin</span>
      A <span class="hl sym">:=</span> B<span class="hl sym">;</span>
      B <span class="hl sym">:=</span> Temp<span class="hl sym">;</span>
   <span class="hl kwa">end</span> Swap<span class="hl sym">;</span>

   <span class="hl kwa">function</span> Fann<span class="hl sym">(</span>N <span class="hl sym">:</span> <span class="hl kwb">Positive</span><span class="hl sym">)</span> <span class="hl kwa">return</span> <span class="hl kwb">Natural</span> <span class="hl kwa">is</span>
      M        <span class="hl sym">:</span> <span class="hl kwb">Natural</span> <span class="hl sym">:=</span> N <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>
      Perm     <span class="hl sym">:</span> Perm_Array<span class="hl sym">(</span><span class="hl num">0</span>..M<span class="hl sym">);</span>
      Perm1    <span class="hl sym">:</span> Perm_Array<span class="hl sym">(</span><span class="hl num">0</span>..M<span class="hl sym">);</span>
      Count    <span class="hl sym">:</span> Perm_Array<span class="hl sym">(</span><span class="hl num">0</span>..M<span class="hl sym">);</span>
      Max_Flips_Count <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      R        <span class="hl sym">:</span> <span class="hl kwb">Natural</span> <span class="hl sym">:=</span> N<span class="hl sym">;</span>
      Check    <span class="hl sym">:</span> <span class="hl kwb">Natural</span> <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">for</span> I <span class="hl kwa">in</span> Perm1<span class="hl sym">'</span><span class="hl kwa">range loop</span>
         Perm1<span class="hl sym">(</span>I<span class="hl sym">) :=</span> I<span class="hl sym">;</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>
      <span class="hl kwa">loop</span>
         <span class="hl kwa">if</span> Check <span class="hl sym">&lt;</span> <span class="hl num">30</span> <span class="hl kwa">then</span>
            <span class="hl kwa">for</span> I <span class="hl kwa">in</span> Perm1<span class="hl sym">'</span><span class="hl kwa">range loop</span>
               Put<span class="hl sym">(</span>Item <span class="hl sym">=&gt;</span> Perm1<span class="hl sym">(</span>I<span class="hl sym">) +</span> <span class="hl num">1</span><span class="hl sym">,</span> Width <span class="hl sym">=&gt;</span> <span class="hl num">1</span><span class="hl sym">);</span>
            <span class="hl kwa">end loop</span><span class="hl sym">;</span>
            New_Line<span class="hl sym">;</span>
            Check <span class="hl sym">:=</span> Check <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
         <span class="hl kwa">end if</span><span class="hl sym">;</span>
         <span class="hl kwa">while</span> R <span class="hl sym">/=</span> <span class="hl num">1</span> <span class="hl kwa">loop</span>
            Count<span class="hl sym">(</span>R <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">) :=</span> R<span class="hl sym">;</span>
            R <span class="hl sym">:=</span> R <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>
         <span class="hl kwa">end loop</span><span class="hl sym">;</span>
         <span class="hl kwa">if not</span> <span class="hl sym">(</span>Perm1<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">) =</span> <span class="hl num">0</span> <span class="hl kwa">or</span> Perm1<span class="hl sym">(</span>M<span class="hl sym">) =</span> M<span class="hl sym">)</span> <span class="hl kwa">then</span>
            Perm <span class="hl sym">:=</span> Perm1<span class="hl sym">;</span>
            <span class="hl kwa">declare</span>
               Flips_Count <span class="hl sym">:</span> <span class="hl kwb">Natural</span> <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
               K           <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span>
            <span class="hl kwa">begin</span>
               <span class="hl kwa">loop</span>
                  K <span class="hl sym">:=</span> Perm<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span>
                  <span class="hl kwa">exit when</span> K <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
                  <span class="hl kwa">for</span> I <span class="hl kwa">in</span> <span class="hl num">0</span>..<span class="hl sym">((</span>K <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)/</span><span class="hl num">2</span> <span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">loop</span>
                     Swap<span class="hl sym">(</span>Perm<span class="hl sym">(</span>I<span class="hl sym">),</span> Perm<span class="hl sym">(</span>K <span class="hl sym">-</span> I<span class="hl sym">));</span>
                  <span class="hl kwa">end loop</span><span class="hl sym">;</span>
                  Flips_Count <span class="hl sym">:=</span> Flips_Count <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
               <span class="hl kwa">end loop</span><span class="hl sym">;</span>
               <span class="hl kwa">if</span> Flips_Count <span class="hl sym">&gt;</span> Max_Flips_Count <span class="hl kwa">then</span>
                  Max_Flips_Count <span class="hl sym">:=</span> Flips_Count<span class="hl sym">;</span>
               <span class="hl kwa">end if</span><span class="hl sym">;</span>
            <span class="hl kwa">end</span><span class="hl sym">;</span>
         <span class="hl kwa">end if</span><span class="hl sym">;</span>
         <span class="hl kwa">loop</span>
            <span class="hl kwa">if</span> R <span class="hl sym">=</span> N <span class="hl kwa">then</span>
               <span class="hl kwa">return</span> Max_Flips_Count<span class="hl sym">;</span>
            <span class="hl kwa">end if</span><span class="hl sym">;</span>
            <span class="hl kwa">declare</span>
               Perm0 <span class="hl sym">:</span> <span class="hl kwb">Natural</span> <span class="hl sym">:=</span> Perm1<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span>
               J <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span>
               I <span class="hl sym">:</span> <span class="hl kwb">Natural</span> <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl kwa">begin</span>
               <span class="hl kwa">while</span> I <span class="hl sym">&lt;</span> R <span class="hl kwa">loop</span>
                  J <span class="hl sym">:=</span> I <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
                  Perm1<span class="hl sym">(</span>I<span class="hl sym">) :=</span> Perm1<span class="hl sym">(</span>J<span class="hl sym">);</span>
                  I <span class="hl sym">:=</span> J<span class="hl sym">;</span>
               <span class="hl kwa">end loop</span><span class="hl sym">;</span>
               Perm1<span class="hl sym">(</span>r<span class="hl sym">) :=</span> Perm0<span class="hl sym">;</span>
            <span class="hl kwa">end</span><span class="hl sym">;</span>
            Count<span class="hl sym">(</span>R<span class="hl sym">) :=</span> Count<span class="hl sym">(</span>R<span class="hl sym">) -</span> <span class="hl num">1</span><span class="hl sym">;</span>
            <span class="hl kwa">exit when</span> Count<span class="hl sym">(</span>R<span class="hl sym">) &gt;</span> <span class="hl num">0</span><span class="hl sym">;</span>
            r <span class="hl sym">:=</span> R <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
         <span class="hl kwa">end loop</span><span class="hl sym">;</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>
   <span class="hl kwa">end</span> Fann<span class="hl sym">;</span>
   Num <span class="hl sym">:</span> <span class="hl kwb">Positive</span> <span class="hl sym">:=</span> <span class="hl num">7</span><span class="hl sym">;</span>
   Result <span class="hl sym">:</span> <span class="hl kwb">Positive</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
   <span class="hl kwa">if</span> Argument_Count <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
      Num <span class="hl sym">:=</span> <span class="hl kwb">Positive</span><span class="hl sym">'</span>Value<span class="hl sym">(</span>Argument<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">));</span>
   <span class="hl kwa">end if</span><span class="hl sym">;</span>
   Result <span class="hl sym">:=</span> Fann<span class="hl sym">(</span>Num<span class="hl sym">);</span>
   Put<span class="hl sym">(</span><span class="hl str">&quot;Pfannkuchen(&quot;</span> <span class="hl sym">);</span>
   Put<span class="hl sym">(</span>Item <span class="hl sym">=&gt;</span> Num<span class="hl sym">,</span> Width <span class="hl sym">=&gt;</span> <span class="hl num">0</span><span class="hl sym">);</span>
   Put<span class="hl sym">(</span><span class="hl str">&quot;) = &quot;</span><span class="hl sym">);</span>
   Put<span class="hl sym">(</span>Item <span class="hl sym">=&gt;</span> Result<span class="hl sym">,</span> Width <span class="hl sym">=&gt;</span> <span class="hl num">0</span><span class="hl sym">);</span>
   New_Line<span class="hl sym">;</span>
<span class="hl kwa">end</span> Fannkuch<span class="hl sym">;</span>

