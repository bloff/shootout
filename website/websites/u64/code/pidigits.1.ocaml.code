<span class="hl com">(*</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by Christophe TROESTLER</span>
<span class="hl com"> * modified by Matthias Giovannini?</span>
<span class="hl com"> * ported to Gmp by David Teller</span>
<span class="hl com"> *)</span>
<span class="hl kwa">open</span> <span class="hl kwd">Printf</span>
<span class="hl kwa">open</span> <span class="hl kwc">Gmp</span><span class="hl sym">.</span><span class="hl kwd">Z2</span>
<span class="hl kwa">open</span> <span class="hl kwc">Gmp</span><span class="hl sym">.</span><span class="hl kwc">Z</span><span class="hl sym">.</span><span class="hl kwd">Infixes</span>

<span class="hl kwa">let</span> big_0      <span class="hl sym">=</span> <span class="hl kwc">Gmp</span><span class="hl sym">.</span><span class="hl kwc">Z</span><span class="hl sym">.</span>zero
<span class="hl kwa">let</span> big_1      <span class="hl sym">=</span> <span class="hl kwc">Gmp</span><span class="hl sym">.</span><span class="hl kwc">Z</span><span class="hl sym">.</span>one
<span class="hl kwa">let</span> big_3      <span class="hl sym">=</span> <span class="hl kwc">Gmp</span><span class="hl sym">.</span><span class="hl kwc">Z</span><span class="hl sym">.</span>of_int <span class="hl num">3</span>
<span class="hl kwa">let</span> big_4      <span class="hl sym">=</span> <span class="hl kwc">Gmp</span><span class="hl sym">.</span><span class="hl kwc">Z</span><span class="hl sym">.</span>of_int <span class="hl num">4</span>
<span class="hl kwa">let</span> big_10     <span class="hl sym">=</span> <span class="hl kwc">Gmp</span><span class="hl sym">.</span><span class="hl kwc">Z</span><span class="hl sym">.</span>of_int <span class="hl num">10</span>
<span class="hl kwa">let</span> big_10_neg <span class="hl sym">=</span> <span class="hl kwc">Gmp</span><span class="hl sym">.</span><span class="hl kwc">Z</span><span class="hl sym">.</span>of_int <span class="hl sym">(-</span><span class="hl num">10</span><span class="hl sym">)</span>

<span class="hl kwa">let</span> q <span class="hl sym">=</span> <span class="hl kwc">Gmp</span><span class="hl sym">.</span><span class="hl kwc">Z</span><span class="hl sym">.</span>of_int <span class="hl num">1</span> 
<span class="hl kwa">and</span> r <span class="hl sym">=</span> <span class="hl kwc">Gmp</span><span class="hl sym">.</span><span class="hl kwc">Z</span><span class="hl sym">.</span>of_int <span class="hl num">0</span>
<span class="hl kwa">and</span> s <span class="hl sym">=</span> <span class="hl kwc">Gmp</span><span class="hl sym">.</span><span class="hl kwc">Z</span><span class="hl sym">.</span>of_int <span class="hl num">0</span>
<span class="hl kwa">and</span> t <span class="hl sym">=</span> <span class="hl kwc">Gmp</span><span class="hl sym">.</span><span class="hl kwc">Z</span><span class="hl sym">.</span>of_int <span class="hl num">1</span>

<span class="hl kwa">let</span> u <span class="hl sym">=</span> create <span class="hl sym">()</span> <span class="hl kwa">and</span> v <span class="hl sym">=</span> create <span class="hl sym">()</span> <span class="hl kwa">and</span> w <span class="hl sym">=</span> create <span class="hl sym">()</span>

<span class="hl kwa">let</span> k <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">and</span> digit <span class="hl sym">=</span> create <span class="hl sym">()</span>

<span class="hl com">(* Entier part of the linear fractional transform qrst of x *)</span>
<span class="hl kwa">let</span> extract x ~out<span class="hl sym">:</span>item<span class="hl sym">=</span> 
  mul u q x<span class="hl sym">;</span>
  add u u r<span class="hl sym">;</span>
  mul v s x<span class="hl sym">;</span>
  add v v t<span class="hl sym">;</span>
  tdiv_q item u v

<span class="hl kwa">let</span> next <span class="hl sym">() =</span> extract big_3 ~out<span class="hl sym">:</span>digit
<span class="hl kwa">and</span> safe <span class="hl sym">() =</span> extract big_4 ~out<span class="hl sym">:</span>w<span class="hl sym">;</span> <span class="hl kwc">Gmp</span><span class="hl sym">.</span><span class="hl kwc">Z</span><span class="hl sym">.</span>equal w digit
<span class="hl kwa">and</span> produce <span class="hl sym">() =</span> 
  mul r r big_10<span class="hl sym">;</span>
  mul w big_10_neg digit<span class="hl sym">;</span>
  mul v t w<span class="hl sym">;</span>
  add r r v<span class="hl sym">;</span>
  mul q q big_10<span class="hl sym">;</span>  
<span class="hl kwa">and</span> consume <span class="hl sym">() =</span>
  incr k<span class="hl sym">;</span>
  <span class="hl kwa">let</span> big_k <span class="hl sym">=</span> <span class="hl kwc">Gmp</span><span class="hl sym">.</span><span class="hl kwc">Z</span><span class="hl sym">.</span>of_int <span class="hl sym">!</span>k <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> den <span class="hl sym">=</span> <span class="hl kwc">Gmp</span><span class="hl sym">.</span><span class="hl kwc">Z</span><span class="hl sym">.</span>of_int <span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">* !</span>k <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> den2 <span class="hl sym">=</span> <span class="hl kwc">Gmp</span><span class="hl sym">.</span><span class="hl kwc">Z</span><span class="hl sym">.</span>mul_2exp den <span class="hl num">1</span> <span class="hl kwa">in</span>
  mul r r den<span class="hl sym">;</span>
  mul u q den2<span class="hl sym">;</span>
  add r r u<span class="hl sym">;</span>
  mul t t den<span class="hl sym">;</span>
  mul v s den2<span class="hl sym">;</span>
  add t t v<span class="hl sym">;</span>
  mul s s big_k<span class="hl sym">;</span>
  mul q q big_k

<span class="hl kwa">let</span> digits n <span class="hl sym">=</span> 
  <span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl kwa">to</span> n <span class="hl kwa">do</span>
    next <span class="hl sym">();</span>
    <span class="hl kwa">while</span> not <span class="hl sym">(</span>safe <span class="hl sym">())</span> <span class="hl kwa">do</span>
      consume <span class="hl sym">();</span>
      next <span class="hl sym">();</span>
    <span class="hl kwa">done</span><span class="hl sym">;</span>
    produce <span class="hl sym">();</span>
    print_string <span class="hl sym">(</span><span class="hl kwc">Gmp</span><span class="hl sym">.</span><span class="hl kwc">Z</span><span class="hl sym">.</span>to_string digit<span class="hl sym">);</span>
    <span class="hl kwa">if</span> i <span class="hl kwa">mod</span> <span class="hl num">10</span> <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">then</span> 
      printf <span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">:%i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> i<span class="hl sym">;</span>
  <span class="hl kwa">done</span><span class="hl sym">;</span>
  <span class="hl kwa">if</span> n <span class="hl kwa">mod</span> <span class="hl num">10</span> <span class="hl sym">!=</span> <span class="hl num">0</span> <span class="hl kwa">then</span> 
    printf <span class="hl str">&quot;%*s</span><span class="hl esc">\t</span><span class="hl str">:%i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl sym">(</span><span class="hl num">10</span><span class="hl sym">-</span> n <span class="hl kwa">mod</span> <span class="hl num">10</span><span class="hl sym">)</span> <span class="hl str">&quot;&quot;</span> n

<span class="hl kwa">let</span> <span class="hl sym">() =</span> digits <span class="hl sym">(</span><span class="hl kwa">try</span> int_of_string <span class="hl sym">(</span><span class="hl kwc">Array</span><span class="hl sym">.</span>get <span class="hl kwc">Sys</span><span class="hl sym">.</span>argv <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">with</span> _ <span class="hl sym">-&gt;</span> <span class="hl num">27</span><span class="hl sym">)</span>
