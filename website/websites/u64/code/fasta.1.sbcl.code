<span class="hl slc">;;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;; By Ralph Richard Cook</span>
<span class="hl slc">;;; Optimizations by Nicolas Neuss</span>
<span class="hl slc">;;; Includes code from the 'random' benchmark</span>
<span class="hl slc">;;; Credits from the 'random' benchmark:</span>
<span class="hl slc">;;; Chih-Chung Chang contributed better declarations to improve performance</span>
<span class="hl slc">;;; Multi-lisp modifications by Brent Fulgham</span>

<span class="hl sym">(</span>defconstant IM     <span class="hl num">139968</span><span class="hl sym">)</span>
<span class="hl sym">(</span>defconstant IA       <span class="hl num">3877</span><span class="hl sym">)</span>
<span class="hl sym">(</span>defconstant IC     <span class="hl num">29573</span><span class="hl sym">)</span>

<span class="hl sym">(</span>defparameter THE_LAST <span class="hl num">42</span><span class="hl sym">)</span>

<span class="hl sym">(</span>declaim <span class="hl sym">(</span>inline gen_random select<span class="hl sym">-</span>random<span class="hl sym">))</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> gen_random <span class="hl sym">(</span><span class="hl kwa">max</span><span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">type</span> <span class="hl sym">(</span>unsigned<span class="hl sym">-</span>byte <span class="hl num">30</span><span class="hl sym">)</span> IM IA IC THE_LAST<span class="hl sym">))</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>double<span class="hl sym">-</span><span class="hl kwa">float max</span><span class="hl sym">))</span>
  <span class="hl sym">(</span><span class="hl kwa">setq</span> THE_LAST <span class="hl sym">(</span>mod <span class="hl sym">(+ (</span>the <span class="hl sym">(</span>unsigned<span class="hl sym">-</span>byte <span class="hl num">31</span><span class="hl sym">) (*</span> THE_LAST IA<span class="hl sym">))</span> IC<span class="hl sym">)</span> IM<span class="hl sym">))</span>
  <span class="hl sym">(/ (*</span> <span class="hl kwa">max</span> THE_LAST<span class="hl sym">)</span> IM<span class="hl sym">))</span>

<span class="hl sym">(</span>defconstant LINE_LENGTH <span class="hl num">60</span><span class="hl sym">)</span>

<span class="hl sym">(</span>defstruct <span class="hl sym">(</span>freq <span class="hl sym">(:</span><span class="hl kwa">type</span> vector<span class="hl sym">))</span>
  <span class="hl sym">(</span>c #\x <span class="hl sym">:</span><span class="hl kwa">type</span> base<span class="hl sym">-</span>char<span class="hl sym">)</span>
  <span class="hl sym">(</span>p <span class="hl num">0.0</span>d0 <span class="hl sym">:</span><span class="hl kwa">type</span> double<span class="hl sym">-</span><span class="hl kwa">float</span><span class="hl sym">))</span>

<span class="hl sym">(</span>defparameter ALU <span class="hl sym">(</span>concatenate <span class="hl sym">'</span>string
  <span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>
  <span class="hl str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>
  <span class="hl str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>
  <span class="hl str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>
  <span class="hl str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>
  <span class="hl str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>
  <span class="hl str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="hl sym">))</span>

<span class="hl sym">(</span>defparameter IUB
  <span class="hl sym">(</span>vector
   <span class="hl sym">(</span>make<span class="hl sym">-</span>freq <span class="hl sym">:</span>c #\a <span class="hl sym">:</span>p <span class="hl num">0.27</span>d0<span class="hl sym">)</span>
   <span class="hl sym">(</span>make<span class="hl sym">-</span>freq <span class="hl sym">:</span>c #\c <span class="hl sym">:</span>p <span class="hl num">0.12</span>d0<span class="hl sym">)</span>
   <span class="hl sym">(</span>make<span class="hl sym">-</span>freq <span class="hl sym">:</span>c #\g <span class="hl sym">:</span>p <span class="hl num">0.12</span>d0<span class="hl sym">)</span>
   <span class="hl sym">(</span>make<span class="hl sym">-</span>freq <span class="hl sym">:</span>c #\t <span class="hl sym">:</span>p <span class="hl num">0.27</span>d0<span class="hl sym">)</span>

   <span class="hl sym">(</span>make<span class="hl sym">-</span>freq <span class="hl sym">:</span>c #\B <span class="hl sym">:</span>p <span class="hl num">0.02</span>d0<span class="hl sym">)</span>
   <span class="hl sym">(</span>make<span class="hl sym">-</span>freq <span class="hl sym">:</span>c #\D <span class="hl sym">:</span>p <span class="hl num">0.02</span>d0<span class="hl sym">)</span>
   <span class="hl sym">(</span>make<span class="hl sym">-</span>freq <span class="hl sym">:</span>c #\H <span class="hl sym">:</span>p <span class="hl num">0.02</span>d0<span class="hl sym">)</span>
   <span class="hl sym">(</span>make<span class="hl sym">-</span>freq <span class="hl sym">:</span>c #\K <span class="hl sym">:</span>p <span class="hl num">0.02</span>d0<span class="hl sym">)</span>
   <span class="hl sym">(</span>make<span class="hl sym">-</span>freq <span class="hl sym">:</span>c #\M <span class="hl sym">:</span>p <span class="hl num">0.02</span>d0<span class="hl sym">)</span>
   <span class="hl sym">(</span>make<span class="hl sym">-</span>freq <span class="hl sym">:</span>c #\N <span class="hl sym">:</span>p <span class="hl num">0.02</span>d0<span class="hl sym">)</span>
   <span class="hl sym">(</span>make<span class="hl sym">-</span>freq <span class="hl sym">:</span>c #\R <span class="hl sym">:</span>p <span class="hl num">0.02</span>d0<span class="hl sym">)</span>
   <span class="hl sym">(</span>make<span class="hl sym">-</span>freq <span class="hl sym">:</span>c #\S <span class="hl sym">:</span>p <span class="hl num">0.02</span>d0<span class="hl sym">)</span>
   <span class="hl sym">(</span>make<span class="hl sym">-</span>freq <span class="hl sym">:</span>c #\V <span class="hl sym">:</span>p <span class="hl num">0.02</span>d0<span class="hl sym">)</span>
   <span class="hl sym">(</span>make<span class="hl sym">-</span>freq <span class="hl sym">:</span>c #\W <span class="hl sym">:</span>p <span class="hl num">0.02</span>d0<span class="hl sym">)</span>
   <span class="hl sym">(</span>make<span class="hl sym">-</span>freq <span class="hl sym">:</span>c #\Y <span class="hl sym">:</span>p <span class="hl num">0.02</span>d0<span class="hl sym">)))</span>

<span class="hl sym">(</span>defparameter HomoSapiens
  <span class="hl sym">(</span>vector
   <span class="hl sym">(</span>make<span class="hl sym">-</span>freq <span class="hl sym">:</span>c #\a <span class="hl sym">:</span>p <span class="hl num">0.3029549426680</span>d0<span class="hl sym">)</span>
   <span class="hl sym">(</span>make<span class="hl sym">-</span>freq <span class="hl sym">:</span>c #\c <span class="hl sym">:</span>p <span class="hl num">0.1979883004921</span>d0<span class="hl sym">)</span>
   <span class="hl sym">(</span>make<span class="hl sym">-</span>freq <span class="hl sym">:</span>c #\g <span class="hl sym">:</span>p <span class="hl num">0.1975473066391</span>d0<span class="hl sym">)</span>
   <span class="hl sym">(</span>make<span class="hl sym">-</span>freq <span class="hl sym">:</span>c #\t <span class="hl sym">:</span>p <span class="hl num">0.3015094502008</span>d0<span class="hl sym">)))</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> make<span class="hl sym">-</span>cumulative <span class="hl sym">(</span>freqs<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>cp <span class="hl num">0.0</span>d0<span class="hl sym">))</span>
    <span class="hl sym">(</span>declare <span class="hl sym">(</span>double<span class="hl sym">-</span><span class="hl kwa">float</span> cp<span class="hl sym">))</span>
    <span class="hl sym">(</span>dotimes <span class="hl sym">(</span>i <span class="hl sym">(</span><span class="hl kwa">length</span> freqs<span class="hl sym">))</span>
      <span class="hl sym">(</span>incf cp <span class="hl sym">(</span>freq<span class="hl sym">-</span>p <span class="hl sym">(</span>aref freqs i<span class="hl sym">)))</span>
      <span class="hl sym">(</span>setf <span class="hl sym">(</span>freq<span class="hl sym">-</span>p <span class="hl sym">(</span>aref freqs i<span class="hl sym">))</span> cp<span class="hl sym">))))</span>


<span class="hl sym">(</span><span class="hl kwa">defun</span> select<span class="hl sym">-</span>random <span class="hl sym">(</span>freqs len<span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>fixnum len<span class="hl sym">) (</span>simple<span class="hl sym">-</span>vector freqs<span class="hl sym">))</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>r <span class="hl sym">(</span>gen_random <span class="hl num">1.0</span>d0<span class="hl sym">)))</span>
    <span class="hl sym">(</span>declare <span class="hl sym">(</span>double<span class="hl sym">-</span><span class="hl kwa">float</span> r<span class="hl sym">))</span>
    <span class="hl sym">(</span>dotimes <span class="hl sym">(</span>i len<span class="hl sym">)</span>
      <span class="hl sym">(</span>when <span class="hl sym">(&lt;</span> r <span class="hl sym">(</span>freq<span class="hl sym">-</span>p <span class="hl sym">(</span>aref freqs i<span class="hl sym">)))</span>
        <span class="hl sym">(</span>return<span class="hl sym">-</span>from select<span class="hl sym">-</span>random <span class="hl sym">(</span>freq<span class="hl sym">-</span>c <span class="hl sym">(</span>aref freqs i<span class="hl sym">)))))</span>
    <span class="hl sym">(</span>freq<span class="hl sym">-</span>c <span class="hl sym">(</span>aref freqs <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">-</span> len<span class="hl sym">)))))</span>

<span class="hl sym">(</span>defconstant BUFFER_SIZE <span class="hl num">30000</span><span class="hl sym">)</span>
<span class="hl sym">(</span><span class="hl kwa">defun</span> make<span class="hl sym">-</span>random<span class="hl sym">-</span>fasta <span class="hl sym">(</span>id desc freqs freqs<span class="hl sym">-</span><span class="hl kwa">length</span> n <span class="hl kwa">line</span><span class="hl sym">-</span><span class="hl kwa">length</span><span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>fixnum freqs<span class="hl sym">-</span><span class="hl kwa">length</span> n <span class="hl kwa">line</span><span class="hl sym">-</span><span class="hl kwa">length</span><span class="hl sym">))</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>buf <span class="hl sym">(</span>make<span class="hl sym">-</span>string BUFFER_SIZE <span class="hl sym">:</span>element<span class="hl sym">-</span><span class="hl kwa">type</span> <span class="hl sym">'</span>base<span class="hl sym">-</span>char <span class="hl sym">:</span>initial<span class="hl sym">-</span>element #\Space<span class="hl sym">))</span>
        <span class="hl sym">(</span>index <span class="hl num">0</span><span class="hl sym">))</span>
    <span class="hl sym">(</span>declare <span class="hl sym">(</span>fixnum index<span class="hl sym">))</span>
    <span class="hl sym">(</span>format t <span class="hl str">&quot;&gt;~a ~a~%&quot;</span> id desc<span class="hl sym">)</span>
    <span class="hl sym">(</span>do<span class="hl sym">* ((</span>chars<span class="hl sym">-</span>remaining n <span class="hl sym">(-</span> chars<span class="hl sym">-</span>remaining current<span class="hl sym">-</span><span class="hl kwa">line</span><span class="hl sym">-</span><span class="hl kwa">length</span><span class="hl sym">))</span>
          <span class="hl sym">(</span>current<span class="hl sym">-</span><span class="hl kwa">line</span><span class="hl sym">-</span><span class="hl kwa">length</span> <span class="hl num">0</span><span class="hl sym">))</span>
         <span class="hl sym">((&lt;=</span> chars<span class="hl sym">-</span>remaining <span class="hl num">0</span><span class="hl sym">)</span> nil<span class="hl sym">)</span>
      <span class="hl sym">(</span>declare <span class="hl sym">(</span>fixnum chars<span class="hl sym">-</span>remaining current<span class="hl sym">-</span><span class="hl kwa">line</span><span class="hl sym">-</span><span class="hl kwa">length</span><span class="hl sym">))</span>
      <span class="hl sym">(</span>setf current<span class="hl sym">-</span><span class="hl kwa">line</span><span class="hl sym">-</span><span class="hl kwa">length</span> <span class="hl sym">(</span><span class="hl kwa">min</span> chars<span class="hl sym">-</span>remaining <span class="hl kwa">line</span><span class="hl sym">-</span><span class="hl kwa">length</span><span class="hl sym">))</span>
      <span class="hl sym">(</span>when <span class="hl sym">(&lt; (-</span> BUFFER_SIZE index<span class="hl sym">)</span> current<span class="hl sym">-</span><span class="hl kwa">line</span><span class="hl sym">-</span><span class="hl kwa">length</span><span class="hl sym">)</span>
        <span class="hl sym">(</span>write<span class="hl sym">-</span>sequence buf <span class="hl sym">*</span>standard<span class="hl sym">-</span>output<span class="hl sym">* :</span>end index<span class="hl sym">)</span>
        <span class="hl sym">(</span>setf index <span class="hl num">0</span><span class="hl sym">))</span>
      <span class="hl sym">(</span>dotimes <span class="hl sym">(</span>i current<span class="hl sym">-</span><span class="hl kwa">line</span><span class="hl sym">-</span><span class="hl kwa">length</span><span class="hl sym">)</span>
        <span class="hl sym">(</span>declare <span class="hl sym">(</span>fixnum i<span class="hl sym">))</span>
        <span class="hl sym">(</span>setf <span class="hl sym">(</span>aref buf index<span class="hl sym">) (</span>select<span class="hl sym">-</span>random freqs freqs<span class="hl sym">-</span><span class="hl kwa">length</span><span class="hl sym">))</span>
        <span class="hl sym">(</span>incf index<span class="hl sym">))</span>
      <span class="hl sym">(</span>setf <span class="hl sym">(</span>aref buf index<span class="hl sym">)</span> #\Newline<span class="hl sym">)</span>
      <span class="hl sym">(</span>incf index<span class="hl sym">))</span>
    <span class="hl sym">(</span>when <span class="hl sym">(&gt;</span> index <span class="hl num">0</span><span class="hl sym">)</span>
      <span class="hl sym">(</span>write<span class="hl sym">-</span>sequence buf <span class="hl sym">*</span>standard<span class="hl sym">-</span>output<span class="hl sym">* :</span>end index<span class="hl sym">))))</span>


<span class="hl sym">(</span><span class="hl kwa">defun</span> make<span class="hl sym">-</span><span class="hl kwa">repeat</span><span class="hl sym">-</span>fasta <span class="hl sym">(</span>id desc s n <span class="hl kwa">line</span><span class="hl sym">-</span><span class="hl kwa">length</span><span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>fixnum n <span class="hl kwa">line</span><span class="hl sym">-</span><span class="hl kwa">length</span><span class="hl sym">))</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>s<span class="hl sym">-</span>start <span class="hl num">0</span><span class="hl sym">)</span>               <span class="hl slc">; this won't change</span>
        <span class="hl sym">(</span>s<span class="hl sym">-</span>end <span class="hl sym">(</span><span class="hl kwa">length</span> s<span class="hl sym">))</span>        <span class="hl slc">; this won't change</span>
        <span class="hl sym">(</span>w<span class="hl sym">-</span>start <span class="hl num">0</span><span class="hl sym">)</span>               <span class="hl slc">; this will cycle around</span>
        <span class="hl sym">(</span>w<span class="hl sym">-</span>end <span class="hl num">0</span><span class="hl sym">)</span>                 <span class="hl slc">; this will cycle around</span>
        <span class="hl sym">(</span>current<span class="hl sym">-</span><span class="hl kwa">line</span><span class="hl sym">-</span><span class="hl kwa">length</span> <span class="hl num">0</span><span class="hl sym">))</span>  <span class="hl slc">; line-length or less for the last line</span>
    <span class="hl sym">(</span>declare <span class="hl sym">(</span>fixnum s<span class="hl sym">-</span>start s<span class="hl sym">-</span>end w<span class="hl sym">-</span>start w<span class="hl sym">-</span>end<span class="hl sym">))</span>
    <span class="hl sym">(</span>format t <span class="hl str">&quot;&gt;~a ~a~%&quot;</span> id desc<span class="hl sym">)</span>
    <span class="hl sym">(</span>do <span class="hl sym">((</span>chars<span class="hl sym">-</span>remaining n <span class="hl sym">(-</span> chars<span class="hl sym">-</span>remaining current<span class="hl sym">-</span><span class="hl kwa">line</span><span class="hl sym">-</span><span class="hl kwa">length</span><span class="hl sym">)))</span>
        <span class="hl sym">((&lt;=</span> chars<span class="hl sym">-</span>remaining <span class="hl num">0</span><span class="hl sym">)</span> nil<span class="hl sym">)</span>
        <span class="hl sym">(</span>setf current<span class="hl sym">-</span><span class="hl kwa">line</span><span class="hl sym">-</span><span class="hl kwa">length</span> <span class="hl sym">(</span><span class="hl kwa">min</span> chars<span class="hl sym">-</span>remaining <span class="hl kwa">line</span><span class="hl sym">-</span><span class="hl kwa">length</span><span class="hl sym">))</span>
        <span class="hl sym">(</span>setf w<span class="hl sym">-</span>end <span class="hl sym">(+</span> w<span class="hl sym">-</span>start current<span class="hl sym">-</span><span class="hl kwa">line</span><span class="hl sym">-</span><span class="hl kwa">length</span><span class="hl sym">))</span>
        <span class="hl sym">(</span>when <span class="hl sym">(&gt;</span> w<span class="hl sym">-</span>end s<span class="hl sym">-</span>end<span class="hl sym">)</span>
          <span class="hl sym">(</span>decf w<span class="hl sym">-</span>end s<span class="hl sym">-</span>end<span class="hl sym">))</span>
        <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(&gt;</span> w<span class="hl sym">-</span>end w<span class="hl sym">-</span>start<span class="hl sym">)</span>
          <span class="hl sym">(</span>write<span class="hl sym">-</span>sequence s <span class="hl sym">*</span>standard<span class="hl sym">-</span>output<span class="hl sym">* :</span>start w<span class="hl sym">-</span>start <span class="hl sym">:</span>end w<span class="hl sym">-</span>end<span class="hl sym">)</span>
          <span class="hl sym">(</span><span class="hl kwa">progn</span>
            <span class="hl sym">(</span>write<span class="hl sym">-</span>sequence s <span class="hl sym">*</span>standard<span class="hl sym">-</span>output<span class="hl sym">* :</span>start w<span class="hl sym">-</span>start <span class="hl sym">:</span>end s<span class="hl sym">-</span>end<span class="hl sym">)</span>
            <span class="hl sym">(</span>write<span class="hl sym">-</span>sequence s <span class="hl sym">*</span>standard<span class="hl sym">-</span>output<span class="hl sym">* :</span>start s<span class="hl sym">-</span>start <span class="hl sym">:</span>end w<span class="hl sym">-</span>end<span class="hl sym">)))</span>
        <span class="hl sym">(</span>write<span class="hl sym">-</span>char #\Newline<span class="hl sym">)</span>
        <span class="hl sym">(</span>setf w<span class="hl sym">-</span>start w<span class="hl sym">-</span>end<span class="hl sym">))))</span>


<span class="hl sym">(</span><span class="hl kwa">defun</span> main <span class="hl sym">()</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>n <span class="hl sym">(</span>parse<span class="hl sym">-</span>integer <span class="hl sym">(</span><span class="hl kwa">or</span> <span class="hl sym">(</span><span class="hl kwa">car</span> <span class="hl sym">(</span><span class="hl kwa">last</span> #<span class="hl sym">+</span>sbcl sb<span class="hl sym">-</span>ext<span class="hl sym">:*</span>posix<span class="hl sym">-</span>argv<span class="hl sym">*</span>
                                         #<span class="hl sym">+</span>cmu  extensions<span class="hl sym">:*</span><span class="hl kwa">command</span><span class="hl sym">-</span><span class="hl kwa">line</span><span class="hl sym">-</span>strings<span class="hl sym">*</span>
                                         #<span class="hl sym">+</span>gcl  si<span class="hl sym">::*</span><span class="hl kwa">command</span><span class="hl sym">-</span>args<span class="hl sym">*))</span> <span class="hl str">&quot;1&quot;</span><span class="hl sym">))))</span>

    <span class="hl sym">(</span>make<span class="hl sym">-</span>cumulative IUB<span class="hl sym">)</span>
    <span class="hl sym">(</span>make<span class="hl sym">-</span>cumulative HomoSapiens<span class="hl sym">)</span>

    <span class="hl sym">(</span>make<span class="hl sym">-</span><span class="hl kwa">repeat</span><span class="hl sym">-</span>fasta <span class="hl str">&quot;ONE&quot;</span> <span class="hl str">&quot;Homo sapiens alu&quot;</span> ALU <span class="hl sym">(*</span> n <span class="hl num">2</span><span class="hl sym">)</span> LINE_LENGTH<span class="hl sym">)</span>
    <span class="hl sym">(</span>make<span class="hl sym">-</span>random<span class="hl sym">-</span>fasta <span class="hl str">&quot;TWO&quot;</span> <span class="hl str">&quot;IUB ambiguity codes&quot;</span> IUB <span class="hl sym">(</span><span class="hl kwa">length</span> IUB<span class="hl sym">) (*</span> n <span class="hl num">3</span><span class="hl sym">)</span> LINE_LENGTH<span class="hl sym">)</span>
    <span class="hl sym">(</span>make<span class="hl sym">-</span>random<span class="hl sym">-</span>fasta <span class="hl str">&quot;THREE&quot;</span>  <span class="hl str">&quot;Homo sapiens frequency&quot;</span> HomoSapiens <span class="hl sym">(</span><span class="hl kwa">length</span> HomoSapiens<span class="hl sym">) (*</span> n <span class="hl num">5</span><span class="hl sym">)</span> LINE_LENGTH<span class="hl sym">)))</span>
