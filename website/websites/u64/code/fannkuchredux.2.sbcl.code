<span class="hl slc">;;   The Computer Language Benchmarks Game</span>
<span class="hl slc">;;   http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; By Jon Smith</span>
<span class="hl slc">;;; Tranlated from OCaml implementation by ?, who translated it from</span>
<span class="hl slc">;;; the Scala implementation by Otto Bommer.</span>
<span class="hl slc">;;; </span>
<span class="hl slc">;;; This is a single core implementation.</span>
<span class="hl slc">;;; I am sure that this program can be improved upon quite a lot.</span>
<span class="hl slc">;;; Most likely it will involve knowing how sbcl does its optimizations.</span>
<span class="hl slc">;;; As you can see, I simply used fixnums everywhere. There may be a better choice.</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; To compile</span>
<span class="hl slc">;;; sbcl --load fannkuch.lisp --eval &quot;(save-lisp-and-die \&quot;fannkuch.core\&quot; :purify t :toplevel (lambda () (main) (quit)))&quot;</span>
<span class="hl slc">;;; To run</span>
<span class="hl slc">;;; sbcl --noinform --core fannkuch.core %A</span>

<span class="hl sym">(</span>declaim <span class="hl sym">(</span>optimize <span class="hl sym">(</span>speed <span class="hl num">3</span><span class="hl sym">) (</span>safety <span class="hl num">0</span><span class="hl sym">) (</span>space <span class="hl num">1</span><span class="hl sym">) (</span>debug <span class="hl num">0</span><span class="hl sym">)))</span>

<span class="hl sym">(</span>defun fannkuch <span class="hl sym">(</span>n<span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>type fixnum n<span class="hl sym">))</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>csum <span class="hl num">0</span><span class="hl sym">)</span>
	<span class="hl sym">(</span>fmax <span class="hl num">0</span><span class="hl sym">))</span>
    <span class="hl sym">(</span>declare <span class="hl sym">(</span>type fixnum fmax<span class="hl sym">))</span>
    <span class="hl sym">(</span>let <span class="hl sym">((</span>perm <span class="hl sym">(</span>make<span class="hl sym">-</span>array n <span class="hl sym">:</span>element<span class="hl sym">-</span>type <span class="hl sym">'</span>fixnum<span class="hl sym">))</span>
	  <span class="hl sym">(</span>copy <span class="hl sym">(</span>make<span class="hl sym">-</span>array n <span class="hl sym">:</span>element<span class="hl sym">-</span>type <span class="hl sym">'</span>fixnum<span class="hl sym">))</span>
	  <span class="hl sym">(</span>num <span class="hl num">0</span><span class="hl sym">))</span> 

      <span class="hl sym">(</span>loop for i from <span class="hl num">0</span> to <span class="hl sym">(-</span> n <span class="hl num">1</span><span class="hl sym">)</span> do <span class="hl sym">(</span>setf <span class="hl sym">(</span>aref perm i<span class="hl sym">)</span> i<span class="hl sym">))</span>

      <span class="hl sym">(</span>labels <span class="hl sym">((</span>do<span class="hl sym">-</span>iter <span class="hl sym">(</span>ht<span class="hl sym">)</span>
		 
		 <span class="hl sym">(</span>declare <span class="hl sym">(</span>type fixnum ht<span class="hl sym">))</span>
		 
		 <span class="hl sym">(</span>if <span class="hl sym">(=</span> ht <span class="hl num">1</span><span class="hl sym">)</span>
		     <span class="hl sym">(</span>progn
		       <span class="hl sym">(</span>loop for i from <span class="hl num">0</span> to <span class="hl sym">(-</span> n <span class="hl num">1</span><span class="hl sym">)</span> do <span class="hl sym">(</span>setf <span class="hl sym">(</span>aref copy i<span class="hl sym">) (</span>aref perm i<span class="hl sym">)))</span>
		       <span class="hl sym">(</span>let <span class="hl sym">((</span>c <span class="hl num">0</span><span class="hl sym">))</span>
			 <span class="hl sym">(</span>declare <span class="hl sym">(</span>type fixnum c<span class="hl sym">))</span>
			 <span class="hl sym">(</span>let <span class="hl sym">((</span>z <span class="hl sym">(</span>aref copy <span class="hl num">0</span><span class="hl sym">)))</span>
			   <span class="hl sym">(</span>loop until <span class="hl sym">(=</span> z <span class="hl num">0</span><span class="hl sym">)</span> do
				<span class="hl sym">(</span>progn
				  <span class="hl sym">(</span>loop for i from <span class="hl num">0</span> to <span class="hl sym">(</span>ash z <span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
				     do <span class="hl sym">(</span>let <span class="hl sym">((</span>temp <span class="hl sym">(</span>aref copy i<span class="hl sym">))</span>
					      <span class="hl sym">(</span>k <span class="hl sym">(-</span> z i<span class="hl sym">)))</span>
					  <span class="hl sym">(</span>setf <span class="hl sym">(</span>aref copy i<span class="hl sym">) (</span>aref copy k<span class="hl sym">))</span>
					  <span class="hl sym">(</span>setf <span class="hl sym">(</span>aref copy k<span class="hl sym">)</span> temp<span class="hl sym">)))</span>
				  <span class="hl sym">(</span>incf c<span class="hl sym">)</span>
				  <span class="hl sym">(</span>setf z <span class="hl sym">(</span>aref copy <span class="hl num">0</span><span class="hl sym">)))))</span>
			 <span class="hl sym">(</span>setf csum <span class="hl sym">(+</span> csum  <span class="hl sym">(</span>if <span class="hl sym">(</span>evenp num<span class="hl sym">)</span> c <span class="hl sym">(-</span> c<span class="hl sym">))))</span>
			 <span class="hl sym">(</span>when <span class="hl sym">(&gt;</span> c fmax<span class="hl sym">)</span>
			   <span class="hl sym">(</span>setf fmax c<span class="hl sym">)))</span>
		       <span class="hl sym">(</span>incf num<span class="hl sym">))</span>
		     <span class="hl sym">(</span>loop for i from <span class="hl num">1</span> to ht do
			  <span class="hl sym">(</span>progn <span class="hl sym">(</span>do<span class="hl sym">-</span>iter <span class="hl sym">(-</span> ht <span class="hl num">1</span><span class="hl sym">))</span>
				 <span class="hl sym">(</span>let <span class="hl sym">((</span>temp <span class="hl sym">(</span>aref perm <span class="hl num">0</span><span class="hl sym">))</span>
				       <span class="hl sym">(</span>m <span class="hl sym">(-</span> ht <span class="hl num">1</span><span class="hl sym">)))</span>
				   <span class="hl sym">(</span>loop for i from <span class="hl num">1</span> to m do
					<span class="hl sym">(</span>setf <span class="hl sym">(</span>aref perm <span class="hl sym">(-</span> i <span class="hl num">1</span><span class="hl sym">)) (</span>aref perm i<span class="hl sym">)))</span>
				   <span class="hl sym">(</span>setf <span class="hl sym">(</span>aref perm m<span class="hl sym">)</span> temp<span class="hl sym">)))))))</span>

	<span class="hl sym">(</span>do<span class="hl sym">-</span>iter n<span class="hl sym">)))</span>
    <span class="hl sym">(</span>format t <span class="hl str">&quot;~s~%Pfannkuchen(~s) = ~s~%&quot;</span> csum n fmax<span class="hl sym">)))</span>


<span class="hl sym">(</span>defun main <span class="hl sym">()</span>  
  <span class="hl sym">(</span>let<span class="hl sym">* ((</span>args <span class="hl sym">(</span>cdr sb<span class="hl sym">-</span>ext<span class="hl sym">:*</span>posix<span class="hl sym">-</span>argv<span class="hl sym">*))</span>
         <span class="hl sym">(</span>n <span class="hl sym">(</span>parse<span class="hl sym">-</span>integer <span class="hl sym">(</span>car args<span class="hl sym">))))</span>
    <span class="hl sym">(</span>fannkuch n<span class="hl sym">)))</span>
