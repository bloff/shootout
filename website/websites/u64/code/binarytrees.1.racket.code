#lang racket<span class="hl sym">/</span>base

<span class="hl slc">;;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;; http://shootout.alioth.debian.org/</span>

<span class="hl slc">;;; Derived from the Chicken variant by Sven Hartrumpf</span>
<span class="hl slc">;;; contributed by Matthew Flatt</span>

<span class="hl sym">(</span>require racket<span class="hl sym">/</span>cmdline<span class="hl sym">)</span>

<span class="hl sym">(</span>struct node <span class="hl sym">(</span>left val right<span class="hl sym">))</span>

<span class="hl slc">;; Instead of (define-struct leaf (val)):</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>leaf val<span class="hl sym">) (</span>node #f val #f<span class="hl sym">))</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>leaf? l<span class="hl sym">) (</span>not <span class="hl sym">(</span>node<span class="hl sym">-</span>left l<span class="hl sym">)))</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>leaf<span class="hl sym">-</span>val l<span class="hl sym">) (</span>node<span class="hl sym">-</span>val l<span class="hl sym">))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>make item d<span class="hl sym">)</span>
  <span class="hl sym">(</span>if <span class="hl sym">(=</span> d <span class="hl num">0</span><span class="hl sym">)</span>
      <span class="hl sym">(</span>leaf item<span class="hl sym">)</span>
      <span class="hl sym">(</span>let <span class="hl sym">((</span>item2 <span class="hl sym">(*</span> item <span class="hl num">2</span><span class="hl sym">))</span>
            <span class="hl sym">(</span>d2 <span class="hl sym">(-</span> d <span class="hl num">1</span><span class="hl sym">)))</span>
        <span class="hl sym">(</span>node <span class="hl sym">(</span>make <span class="hl sym">(-</span> item2 <span class="hl num">1</span><span class="hl sym">)</span> d2<span class="hl sym">)</span>
              item
              <span class="hl sym">(</span>make item2 d2<span class="hl sym">)))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>check t<span class="hl sym">)</span>
  <span class="hl sym">(</span>if <span class="hl sym">(</span>leaf? t<span class="hl sym">)</span>
      <span class="hl sym">(</span>leaf<span class="hl sym">-</span>val t<span class="hl sym">)</span>
      <span class="hl sym">(+ (</span>node<span class="hl sym">-</span>val t<span class="hl sym">) (- (</span>check <span class="hl sym">(</span>node<span class="hl sym">-</span>left t<span class="hl sym">))</span>
                         <span class="hl sym">(</span>check <span class="hl sym">(</span>node<span class="hl sym">-</span>right t<span class="hl sym">))))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>main n<span class="hl sym">)</span>
  <span class="hl sym">(</span>let<span class="hl sym">* ((</span>min<span class="hl sym">-</span>depth <span class="hl num">4</span><span class="hl sym">)</span>
         <span class="hl sym">(</span>max<span class="hl sym">-</span>depth <span class="hl sym">(</span>max <span class="hl sym">(+</span> min<span class="hl sym">-</span>depth <span class="hl num">2</span><span class="hl sym">)</span> n<span class="hl sym">)))</span>
    <span class="hl sym">(</span>let <span class="hl sym">((</span>stretch<span class="hl sym">-</span>depth <span class="hl sym">(+</span> max<span class="hl sym">-</span>depth <span class="hl num">1</span><span class="hl sym">)))</span>
      <span class="hl sym">(</span>printf <span class="hl str">&quot;stretch tree of depth ~a</span><span class="hl esc">\</span><span class="hl str">t check: ~a</span><span class="hl esc">\</span><span class="hl str">n&quot;</span>
              stretch<span class="hl sym">-</span>depth
              <span class="hl sym">(</span>check <span class="hl sym">(</span>make <span class="hl num">0</span> stretch<span class="hl sym">-</span>depth<span class="hl sym">))))</span>
    <span class="hl sym">(</span>let <span class="hl sym">((</span>long<span class="hl sym">-</span>lived<span class="hl sym">-</span>tree <span class="hl sym">(</span>make <span class="hl num">0</span> max<span class="hl sym">-</span>depth<span class="hl sym">)))</span>
      <span class="hl sym">(</span>for <span class="hl sym">((</span>d <span class="hl sym">(</span>in<span class="hl sym">-</span>range <span class="hl num">4</span> <span class="hl sym">(</span>add1 max<span class="hl sym">-</span>depth<span class="hl sym">)</span> <span class="hl num">2</span><span class="hl sym">)))</span>
        <span class="hl sym">(</span>let <span class="hl sym">((</span>iterations <span class="hl sym">(</span>arithmetic<span class="hl sym">-</span>shift <span class="hl num">1</span> <span class="hl sym">(+ (-</span> max<span class="hl sym">-</span>depth d<span class="hl sym">)</span> min<span class="hl sym">-</span>depth<span class="hl sym">))))</span>
          <span class="hl sym">(</span>printf <span class="hl str">&quot;~a</span><span class="hl esc">\</span><span class="hl str">t trees of depth ~a</span><span class="hl esc">\</span><span class="hl str">t check: ~a</span><span class="hl esc">\</span><span class="hl str">n&quot;</span>
                  <span class="hl sym">(*</span> <span class="hl num">2</span> iterations<span class="hl sym">)</span>
                  d
                  <span class="hl sym">(</span>for<span class="hl sym">/</span>fold <span class="hl sym">([</span>c <span class="hl num">0</span><span class="hl sym">])</span>
                            <span class="hl sym">([</span>i <span class="hl sym">(</span>in<span class="hl sym">-</span>range iterations<span class="hl sym">)])</span>
                    <span class="hl sym">(+</span> c
                       <span class="hl sym">(</span>check <span class="hl sym">(</span>make i d<span class="hl sym">))</span>
                       <span class="hl sym">(</span>check <span class="hl sym">(</span>make <span class="hl sym">(-</span> i<span class="hl sym">)</span> d<span class="hl sym">)))))))</span>
      <span class="hl sym">(</span>printf <span class="hl str">&quot;long lived tree of depth ~a</span><span class="hl esc">\</span><span class="hl str">t check: ~a</span><span class="hl esc">\</span><span class="hl str">n&quot;</span>
              max<span class="hl sym">-</span>depth
              <span class="hl sym">(</span>check long<span class="hl sym">-</span>lived<span class="hl sym">-</span>tree<span class="hl sym">)))))</span>

<span class="hl sym">(</span>command<span class="hl sym">-</span>line #<span class="hl sym">:</span>args <span class="hl sym">(</span>n<span class="hl sym">)</span>
              <span class="hl sym">(</span>main <span class="hl sym">(</span>string<span class="hl sym">-&gt;</span>number n<span class="hl sym">)))</span>
