<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   Contributed by Tim Hochberg.</span>
<span class="hl com"></span>
<span class="hl com">   Some ideas taken from Olof Kraigher's Python and GHC implementations</span>
<span class="hl com">   and Ben St. John's GCC implementation.</span>
<span class="hl com">*/</span>


<span class="hl kwa">module</span> meteor

<span class="hl kwa">import</span> StdEnv<span class="hl sym">,</span> LanguageShootout<span class="hl sym">,</span> StdLib<span class="hl sym">,</span> StdStrictLists


Start
    <span class="hl sym">=</span> toString <span class="hl sym">(</span>length solns<span class="hl sym">) +++</span> <span class="hl str">&quot; solutions found\n\n&quot;</span>
    <span class="hl sym">+++</span> format <span class="hl sym">(</span>hd solns<span class="hl sym">) +++</span> <span class="hl str">&quot;\n&quot;</span>
    <span class="hl sym">+++</span> format <span class="hl sym">(</span>last solns<span class="hl sym">) +++</span> <span class="hl str">&quot;\n&quot;</span>
<span class="hl kwa">where</span>
    solns <span class="hl sym">=  (</span>sort <span class="hl sym">(</span>take argi <span class="hl sym">[</span>x <span class="hl sym">\\</span> x &lt;<span class="hl sym">|-</span> solutions<span class="hl sym">]))</span>


<span class="hl slc">// --- Generate the solutions ---</span>

firstZero <span class="hl sym">:: {#</span><span class="hl kwb">Int</span><span class="hl sym">}</span>
firstZero <span class="hl sym">=: {</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">3</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">4</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">3</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">5</span><span class="hl sym">}</span>

solutions <span class="hl sym">=:</span> solveCell <span class="hl num">0</span> <span class="hl sym">[#</span>c <span class="hl sym">\\</span> c <span class="hl sym">&lt;-</span> COLORS<span class="hl sym">!]</span> <span class="hl num">0</span> <span class="hl sym">[#!] [!]</span>
  <span class="hl kwa">where</span>
    solveCell <span class="hl sym">::  !</span><span class="hl kwb">Int</span> <span class="hl sym">[#</span><span class="hl kwb">Int</span><span class="hl sym">!] !</span><span class="hl kwb">Int</span> <span class="hl sym">!</span>Solution <span class="hl sym">*[!</span>String<span class="hl sym">] -&gt; *[!</span>String<span class="hl sym">]</span>
    solveCell _  <span class="hl sym">[#!]</span>  _  soln results
        <span class="hl sym">= [!</span>s<span class="hl sym">,</span> revString s<span class="hl sym">:</span>results<span class="hl sym">]</span> <span class="hl kwa">with</span> s <span class="hl sym">=</span> toString soln
    solveCell row todo board soln results
        <span class="hl sym">#!</span> top <span class="hl sym">=</span> board bitand M_TOP
        <span class="hl sym">|</span> top <span class="hl sym">==</span> M_TOP
            <span class="hl sym">=</span> solveCell <span class="hl sym">(</span>row<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span> todo <span class="hl sym">(</span>board &gt;&gt; N_COL<span class="hl sym">)</span> soln results
        <span class="hl sym">#!</span> col <span class="hl sym">=</span> firstZero<span class="hl sym">.[</span>top<span class="hl sym">]</span>
        <span class="hl sym">#!</span> masks <span class="hl sym">=</span> masksAtCell<span class="hl sym">.[</span>row<span class="hl sym">].[</span>col<span class="hl sym">]</span>
        <span class="hl sym">|</span> otherwise
            <span class="hl sym">=</span> foldr solveMask results <span class="hl sym">[</span>m <span class="hl sym">\\</span> c &lt;<span class="hl sym">|-</span> todo<span class="hl sym">,</span> m  &lt;<span class="hl sym">|-</span> masks<span class="hl sym">.[</span>c<span class="hl sym">] |</span> board bitand m <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">]</span>
      <span class="hl kwa">where</span>
        solveMask <span class="hl sym">:: !</span><span class="hl kwb">Int</span> <span class="hl sym">*[!</span>String<span class="hl sym">] -&gt; *[!</span>String<span class="hl sym">]</span>
        solveMask m results
            <span class="hl sym">=</span> solveCell row <span class="hl sym">(</span>remove <span class="hl sym">(</span>tagof m<span class="hl sym">)</span> todo<span class="hl sym">) ((</span>untag m<span class="hl sym">)</span> bitor board<span class="hl sym">) [#</span>m<span class="hl sym">:</span>soln<span class="hl sym">!]</span> results
    remove<span class="hl sym">::</span> <span class="hl kwb">Int</span> <span class="hl sym">!</span>u<span class="hl sym">:[#</span><span class="hl kwb">Int</span><span class="hl sym">!] -&gt;</span> u<span class="hl sym">:[#</span><span class="hl kwb">Int</span><span class="hl sym">!]</span>
    remove e <span class="hl sym">[#</span>a<span class="hl sym">:</span>as<span class="hl sym">!]</span>
        <span class="hl sym">|</span> a<span class="hl sym">==</span>e		<span class="hl sym">=</span> as
                    <span class="hl sym">= [#</span>a<span class="hl sym">:</span>remove e as<span class="hl sym">!]</span>
    remove e <span class="hl sym">[#!] = [#!]</span>



<span class="hl slc">// --- Formatting ---</span>

<span class="hl sym">::</span> Solution <span class="hl sym">:== [#</span><span class="hl kwb">Int</span><span class="hl sym">!]</span>

format <span class="hl sym">::</span> String <span class="hl sym">-&gt;</span> String
format raw <span class="hl sym">=</span> format_ <span class="hl sym">[</span>c <span class="hl sym">\\</span> c <span class="hl sym">&lt;-:</span> raw<span class="hl sym">]</span> False
  <span class="hl kwa">where</span>
    format_ <span class="hl sym">:: [</span><span class="hl kwb">Char</span><span class="hl sym">]</span> <span class="hl kwb">Bool</span> <span class="hl sym">-&gt;</span> String
    format_ <span class="hl sym">[]</span> _ <span class="hl sym">=</span> <span class="hl str">&quot;&quot;</span>
    format_ chars isodd
        <span class="hl sym"># (</span>cur<span class="hl sym">,</span> rest<span class="hl sym">) =</span> splitAt <span class="hl num">5</span> chars
        <span class="hl sym">#</span> spaced <span class="hl sym">=</span> flatten <span class="hl sym">[[</span>c<span class="hl sym">,</span> ' '<span class="hl sym">] \\</span> c <span class="hl sym">&lt;-</span> cur<span class="hl sym">]</span>
        <span class="hl sym">#</span> str <span class="hl sym">= {</span>c <span class="hl sym">\\</span> c <span class="hl sym">&lt;-</span> spaced<span class="hl sym">} +++</span> <span class="hl str">&quot;\n&quot;</span> <span class="hl sym">+++</span> format_ rest <span class="hl sym">(</span>not isodd<span class="hl sym">)</span>
        <span class="hl sym">= (</span><span class="hl kwa">if</span> isodd <span class="hl str">&quot; &quot;</span> <span class="hl str">&quot;&quot;</span><span class="hl sym">) +++</span> str

<span class="hl kwa">instance</span> toString Solution
  <span class="hl kwa">where</span>
    toString <span class="hl sym">::</span> Solution <span class="hl sym">-&gt; {#</span><span class="hl kwb">Char</span><span class="hl sym">}</span>
    toString masks <span class="hl sym">= {</span>color n <span class="hl sym">\\</span> n <span class="hl sym">&lt;-</span> CELLS<span class="hl sym">}</span> <span class="hl kwa">where</span>
        color n <span class="hl sym">=</span> <span class="hl str">&quot;0123456789.&quot;</span><span class="hl sym">.[</span><span class="hl kwa">if</span> <span class="hl sym">(</span>isNothing x<span class="hl sym">)</span> <span class="hl num">10</span> <span class="hl sym">((</span>tagof o snd o fromJust<span class="hl sym">)</span> x<span class="hl sym">)]</span> <span class="hl kwa">where</span>
            x <span class="hl sym">=</span>  find matches masksWithRows
            matches <span class="hl sym">(</span>r<span class="hl sym">,</span> m<span class="hl sym">)</span>
                <span class="hl sym">#</span> n` <span class="hl sym">=</span> n <span class="hl sym">-</span> N_COL <span class="hl sym">*</span> r
                <span class="hl sym">|</span> n` &lt; <span class="hl num">0</span>     <span class="hl sym">=</span> False
                <span class="hl sym">|</span> n` &gt; <span class="hl num">30</span>    <span class="hl sym">=</span> False
                <span class="hl sym">|</span> otherwise <span class="hl sym">= (</span>untag m<span class="hl sym">)</span> bitand <span class="hl sym">(</span><span class="hl num">1</span> &lt;&lt; n`<span class="hl sym">)</span> &lt;&gt; <span class="hl num">0</span>
        <span class="hl slc">// The row associated with each mask is implicit in the order that appears</span>
        masksWithRows <span class="hl sym">=</span> withRows <span class="hl num">0 0</span> <span class="hl sym">(</span>reverse  <span class="hl sym">[</span>m <span class="hl sym">\\</span> m&lt;<span class="hl sym">|-</span>masks<span class="hl sym">])</span>
        withRows _ _ <span class="hl sym">[] = []</span>
        withRows board r <span class="hl sym">[</span>m<span class="hl sym">:</span>rest<span class="hl sym">]</span>
            <span class="hl sym">#</span> delta <span class="hl sym">=</span> first0 board <span class="hl sym">/</span> N_COL
            <span class="hl sym">#</span> board <span class="hl sym">= (</span>board &gt;&gt;  <span class="hl sym">(</span>delta <span class="hl sym">*</span> N_COL<span class="hl sym">))</span> bitor <span class="hl sym">(</span>untag m<span class="hl sym">)</span>
            <span class="hl sym">#</span> r <span class="hl sym">=</span> r<span class="hl sym">+</span>delta
            <span class="hl sym">= [(</span>r<span class="hl sym">,</span> m<span class="hl sym">):</span>withRows board r rest<span class="hl sym">]</span>

revString <span class="hl sym">::</span> u<span class="hl sym">:{#</span><span class="hl kwb">Char</span><span class="hl sym">} -&gt;</span> u<span class="hl sym">:{#</span><span class="hl kwb">Char</span><span class="hl sym">}</span>
revString a
    <span class="hl sym"># (</span>n<span class="hl sym">,</span> a<span class="hl sym">) =</span> usize a
    <span class="hl sym">= {</span>createArray n ' ' <span class="hl sym">&amp; [</span>i<span class="hl sym">]=</span>c <span class="hl sym">\\</span> c <span class="hl sym">&lt;-:</span> a <span class="hl sym">&amp;</span> i <span class="hl sym">&lt;- [</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span>n<span class="hl sym">-</span><span class="hl num">2</span><span class="hl sym">.</span><span class="hl num">.0</span><span class="hl sym">]}</span>


<span class="hl slc">// --- The Board ---</span>
N_ELEM <span class="hl sym">:==</span> <span class="hl num">5</span>
N_COL <span class="hl sym">:==</span> <span class="hl num">5</span>
N_ROW <span class="hl sym">:==</span> <span class="hl num">10</span>
M_TOP <span class="hl sym">:==</span> <span class="hl num">0x1F</span>
CELLS <span class="hl sym">=: [</span><span class="hl num">0</span><span class="hl sym">.</span><span class="hl num">.49</span><span class="hl sym">]</span>
COLORS <span class="hl sym">=: [</span><span class="hl num">0</span><span class="hl sym">.</span><span class="hl num">.9</span><span class="hl sym">]</span>

cellAt x y <span class="hl sym">:==</span> x <span class="hl sym">+</span> N_COL<span class="hl sym">*</span>y
coordOf i <span class="hl sym">:== (</span>i rem N_COL<span class="hl sym">,</span> i <span class="hl sym">/</span> N_COL<span class="hl sym">)</span>
isValid x y <span class="hl sym">:==</span> <span class="hl num">0</span> &lt;<span class="hl sym">=</span> x <span class="hl sym">&amp;&amp;</span> x &lt; N_COL <span class="hl sym">&amp;&amp;</span> <span class="hl num">0</span> &lt;<span class="hl sym">=</span> y <span class="hl sym">&amp;&amp;</span> y &lt; N_ROW


<span class="hl slc">// --- Piece Operations ---</span>

<span class="hl sym">::</span> Dir <span class="hl sym">=</span> E <span class="hl sym">|</span> NE <span class="hl sym">|</span> NW <span class="hl sym">|</span> W <span class="hl sym">|</span> SW <span class="hl sym">|</span> SE
DIRECTIONS <span class="hl sym">=: [</span>E<span class="hl sym">,</span> NE<span class="hl sym">,</span> NW<span class="hl sym">,</span> W<span class="hl sym">,</span> SW<span class="hl sym">,</span> SE<span class="hl sym">]</span>

<span class="hl sym">::</span> Piece <span class="hl sym">:== [</span>Dir<span class="hl sym">]</span>

pieces <span class="hl sym">:: {</span>Piece<span class="hl sym">}</span>
pieces <span class="hl sym">=: { [</span>E<span class="hl sym">,</span> E<span class="hl sym">,</span> E<span class="hl sym">,</span> SE<span class="hl sym">]</span>
          <span class="hl sym">, [</span>SE<span class="hl sym">,</span> SW<span class="hl sym">,</span> W<span class="hl sym">,</span> SW<span class="hl sym">]</span>
          <span class="hl sym">, [</span>W<span class="hl sym">,</span> W<span class="hl sym">,</span> SW<span class="hl sym">,</span> SE<span class="hl sym">]</span>
          <span class="hl sym">, [</span>E <span class="hl sym">,</span> E<span class="hl sym">,</span> SW<span class="hl sym">,</span> SE<span class="hl sym">]</span>
          <span class="hl sym">, [</span>NW<span class="hl sym">,</span> W<span class="hl sym">,</span> NW<span class="hl sym">,</span> SE<span class="hl sym">,</span> SW<span class="hl sym">]</span>
          <span class="hl sym">, [</span>E<span class="hl sym">,</span> E<span class="hl sym">,</span> NE<span class="hl sym">,</span> W<span class="hl sym">]</span>
          <span class="hl sym">, [</span>NW<span class="hl sym">,</span> NE<span class="hl sym">,</span> NE<span class="hl sym">,</span> W<span class="hl sym">]</span>
          <span class="hl sym">, [</span>NE<span class="hl sym">,</span> SE<span class="hl sym">,</span> E<span class="hl sym">,</span> NE<span class="hl sym">]</span>
          <span class="hl sym">, [</span>SE<span class="hl sym">,</span> SE<span class="hl sym">,</span> E<span class="hl sym">,</span> SE<span class="hl sym">]</span>
          <span class="hl sym">, [</span>E<span class="hl sym">,</span> NW<span class="hl sym">,</span> NW<span class="hl sym">,</span> NW<span class="hl sym">]</span>
          <span class="hl sym">}</span>

permutations p <span class="hl sym">=</span> take <span class="hl num">12</span> <span class="hl sym">(</span>perms p<span class="hl sym">)</span>
  <span class="hl kwa">where</span>
    perms p <span class="hl sym">= [</span>p<span class="hl sym">, (</span>flip p<span class="hl sym">):</span> perms <span class="hl sym">(</span>rotate p<span class="hl sym">)]</span>
    rotate piece <span class="hl sym">=</span> map r piece
      <span class="hl kwa">where</span> r E  <span class="hl sym">=</span> NE
            r NE <span class="hl sym">=</span> NW
            r NW <span class="hl sym">=</span> W
            r W  <span class="hl sym">=</span> SW
            r SW <span class="hl sym">=</span> SE
            r SE <span class="hl sym">=</span> E
    flip piece <span class="hl sym">=</span> map f piece
      <span class="hl kwa">where</span> f E  <span class="hl sym">=</span> W
            f NE <span class="hl sym">=</span> NW
            f NW <span class="hl sym">=</span> NE
            f W  <span class="hl sym">=</span> E
            f SW <span class="hl sym">=</span> SE
            f SE <span class="hl sym">=</span> SW


<span class="hl slc">// --- Mask Operations ----</span>

<span class="hl slc">// Most of the time we only use 25 bits of a mask</span>
<span class="hl slc">// so we store info in a 5 bit tag.</span>
set   mask n <span class="hl sym">:==</span> mask bitor <span class="hl sym">(</span><span class="hl num">1</span> &lt;&lt; n<span class="hl sym">)</span>
test1 mask n <span class="hl sym">:==</span> mask bitand <span class="hl sym">(</span><span class="hl num">1</span> &lt;&lt; n<span class="hl sym">)</span> &lt;&gt; <span class="hl num">0</span>
test0 mask n <span class="hl sym">:==</span> mask bitand <span class="hl sym">(</span><span class="hl num">1</span> &lt;&lt; n<span class="hl sym">) ==</span> <span class="hl num">0</span>
retag mask n <span class="hl sym">:== (</span>mask bitand <span class="hl num">0x1ffffff</span><span class="hl sym">)</span> bitor n &lt;&lt; <span class="hl num">25</span>
tagof mask   <span class="hl sym">:==  (</span>mask &gt;&gt; <span class="hl num">25</span><span class="hl sym">)</span>
tag   mask n <span class="hl sym">:==</span> mask bitor <span class="hl sym">(</span>n &lt;&lt; <span class="hl num">25</span><span class="hl sym">)</span>
untag mask   <span class="hl sym">:== (</span>mask bitand <span class="hl num">0x1ffffff</span><span class="hl sym">)</span>

count1s <span class="hl sym">:: !</span><span class="hl kwb">Int</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">Int</span>
count1s <span class="hl num">0</span> <span class="hl sym">=</span> <span class="hl num">0</span>
count1s i <span class="hl sym">= (</span><span class="hl kwa">if</span> <span class="hl sym">(</span>i bitand <span class="hl num">1</span> <span class="hl sym">==</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl num">1 0</span><span class="hl sym">) +</span> count1s <span class="hl sym">(</span>i &gt;&gt; <span class="hl num">1</span><span class="hl sym">)</span>

first0 <span class="hl sym">:: !</span><span class="hl kwb">Int</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">Int</span>
first0 i <span class="hl sym">=</span> <span class="hl kwa">if</span> <span class="hl sym">(</span>i bitand <span class="hl num">1</span> <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl num">0</span> <span class="hl sym">(</span><span class="hl num">1</span> <span class="hl sym">+</span> first0 <span class="hl sym">(</span>i &gt;&gt; <span class="hl num">1</span><span class="hl sym">))</span>


<span class="hl slc">// --- Making the Bitmasks ---</span>

<span class="hl kwa">instance</span> mod <span class="hl kwb">Int</span>
  <span class="hl kwa">where</span> mod a b <span class="hl sym">=</span> <span class="hl kwa">if</span> <span class="hl sym">(</span>r &lt; <span class="hl num">0</span><span class="hl sym">) (</span>r <span class="hl sym">+</span> b<span class="hl sym">)</span> r <span class="hl kwa">with</span> r <span class="hl sym">=</span> a rem b

move <span class="hl sym">:: !</span>Dir <span class="hl sym">(!</span><span class="hl kwb">Int</span><span class="hl sym">, !</span><span class="hl kwb">Int</span><span class="hl sym">) -&gt; (!</span><span class="hl kwb">Int</span><span class="hl sym">, !</span><span class="hl kwb">Int</span><span class="hl sym">)</span>
move E  <span class="hl sym">(</span>x<span class="hl sym">,</span> y<span class="hl sym">) = (</span>x<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> y<span class="hl sym">)</span>
move W  <span class="hl sym">(</span>x<span class="hl sym">,</span> y<span class="hl sym">) = (</span>x<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> y<span class="hl sym">)</span>
move NE <span class="hl sym">(</span>x<span class="hl sym">,</span> y<span class="hl sym">) = (</span>x<span class="hl sym">+(</span>y mod <span class="hl num">2</span><span class="hl sym">),</span> y<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
move NW <span class="hl sym">(</span>x<span class="hl sym">,</span> y<span class="hl sym">) = (</span>x<span class="hl sym">+(</span>y mod <span class="hl num">2</span><span class="hl sym">)-</span><span class="hl num">1</span><span class="hl sym">,</span> y<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
move SE <span class="hl sym">(</span>x<span class="hl sym">,</span> y<span class="hl sym">) = (</span>x<span class="hl sym">+(</span>y mod <span class="hl num">2</span><span class="hl sym">),</span> y<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>
move SW <span class="hl sym">(</span>x<span class="hl sym">,</span> y<span class="hl sym">) = (</span>x<span class="hl sym">+(</span>y mod <span class="hl num">2</span><span class="hl sym">)-</span><span class="hl num">1</span><span class="hl sym">,</span> y<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>

packSize a b <span class="hl sym">:==</span> a<span class="hl sym">*</span><span class="hl num">5</span><span class="hl sym">+</span>b
unpackSize n <span class="hl sym">:== (</span>n<span class="hl sym">/</span><span class="hl num">5</span><span class="hl sym">,</span> n rem <span class="hl num">5</span><span class="hl sym">)</span>


pieceBounds piece isodd <span class="hl sym">:==</span> bounds piece <span class="hl num">0</span> y0 <span class="hl num">0</span> y0 <span class="hl num">0</span> y0 <span class="hl kwa">with</span> y0 <span class="hl sym">= (</span><span class="hl kwa">if</span> isodd <span class="hl num">1 0</span><span class="hl sym">)</span>
  <span class="hl kwa">where</span>
    bounds <span class="hl sym">[]</span> _ _ xmin ymin xmax ymax <span class="hl sym">= (</span>xmin<span class="hl sym">,</span> ymin<span class="hl sym">,</span> xmax<span class="hl sym">,</span> ymax<span class="hl sym">)</span>
    bounds <span class="hl sym">[</span>d<span class="hl sym">:</span>rest<span class="hl sym">]</span> x y xmin ymin xmax ymax
        <span class="hl sym"># (</span>x<span class="hl sym">,</span> y<span class="hl sym">) =</span> move d <span class="hl sym">(</span>x<span class="hl sym">,</span> y<span class="hl sym">)</span>
        <span class="hl sym">=</span> bounds rest x y <span class="hl sym">(</span>min x xmin<span class="hl sym">) (</span>min y ymin<span class="hl sym">) (</span>max x xmax<span class="hl sym">) (</span>max y ymax<span class="hl sym">)</span>


pieceMask piece
    <span class="hl sym"># (</span>xmin<span class="hl sym">,</span> ymin<span class="hl sym">,</span> xmax<span class="hl sym">,</span> ymax<span class="hl sym">) =</span> pieceBounds piece False
    <span class="hl sym"># (</span>x1<span class="hl sym">,</span> y1<span class="hl sym">) = (</span>~xmin<span class="hl sym">,</span> ~ymin<span class="hl sym">)</span>
    <span class="hl sym">#</span> swap <span class="hl sym">=</span> y1 rem <span class="hl num">2</span> &lt;&gt; <span class="hl num">0</span>
    <span class="hl sym">#</span> w1 <span class="hl sym">=</span> xmax <span class="hl sym">-</span> xmin
    <span class="hl sym">#</span> h1 <span class="hl sym">=</span> ymax <span class="hl sym">-</span> ymin
    <span class="hl sym"># (</span>xmin<span class="hl sym">,</span> ymin<span class="hl sym">,</span> xmax<span class="hl sym">,</span> ymax<span class="hl sym">) =</span> pieceBounds piece True
    <span class="hl sym"># (</span>x2<span class="hl sym">,</span> y2<span class="hl sym">) = (</span>~xmin<span class="hl sym">,</span> ~ymin<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>
    <span class="hl sym">#</span> w2 <span class="hl sym">=</span> xmax <span class="hl sym">-</span> xmin
    <span class="hl sym">#</span> h2 <span class="hl sym">=</span> ymax <span class="hl sym">-</span> ymin
    <span class="hl sym">|</span> swap      <span class="hl sym">= (</span>tag <span class="hl sym">(</span>mask piece x2 y2 <span class="hl num">0</span><span class="hl sym">) (</span>packSize w2 h2<span class="hl sym">),</span> tag <span class="hl sym">(</span>mask piece x1 <span class="hl sym">(</span>y1<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl num">0</span> &gt;&gt; N_COL<span class="hl sym">) (</span>packSize w1 h1<span class="hl sym">))</span>
    <span class="hl sym">|</span> otherwise <span class="hl sym">= (</span>tag <span class="hl sym">(</span>mask piece x1 y1 <span class="hl num">0</span><span class="hl sym">) (</span>packSize w1 h1<span class="hl sym">),</span> tag <span class="hl sym">(</span>mask piece x2 <span class="hl sym">(</span>y2<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl num">0</span> &gt;&gt; N_COL<span class="hl sym">) (</span>packSize w2 h2<span class="hl sym">))</span>
  <span class="hl kwa">where</span>
    mask <span class="hl sym">[]</span> x y m <span class="hl sym">=</span> m bitor <span class="hl sym">(</span><span class="hl num">1</span> &lt;&lt; cellAt x y<span class="hl sym">)</span>
    mask <span class="hl sym">[</span>d<span class="hl sym">:</span>rest<span class="hl sym">]</span> x y m
        <span class="hl sym">=</span> mask rest x` y` <span class="hl sym">(</span>m bitor <span class="hl sym">(</span><span class="hl num">1</span> &lt;&lt; cellAt x y<span class="hl sym">))</span>
                           <span class="hl kwa">with</span> <span class="hl sym">(</span>x`<span class="hl sym">,</span> y`<span class="hl sym">) =</span> move d <span class="hl sym">(</span>x<span class="hl sym">,</span> y<span class="hl sym">)</span>


templatesForColor c <span class="hl sym">= (</span>unzip o map pieceMask<span class="hl sym">)</span> perms
    <span class="hl kwa">where</span> perms <span class="hl sym">=</span> <span class="hl kwa">if</span> <span class="hl sym">(</span>c <span class="hl sym">==</span> <span class="hl num">5</span><span class="hl sym">) (</span>take <span class="hl num">6</span> ps<span class="hl sym">)</span> ps
          ps <span class="hl sym">=</span> permutations pieces<span class="hl sym">.[</span>c<span class="hl sym">]</span>


masksForColor <span class="hl sym">:: !</span><span class="hl kwb">Int</span> <span class="hl sym">-&gt; [(!</span><span class="hl kwb">Int</span><span class="hl sym">, !</span><span class="hl kwb">Int</span><span class="hl sym">)]</span>
masksForColor c <span class="hl sym">=</span> flatten <span class="hl sym">[</span>atCell n <span class="hl sym">\\</span> n <span class="hl sym">&lt;-</span> CELLS<span class="hl sym">]</span>
  <span class="hl kwa">where</span>
    <span class="hl sym">(</span>even<span class="hl sym">,</span> odd<span class="hl sym">) =</span> templatesForColor c
    atCell n
        <span class="hl sym"># (</span>x<span class="hl sym">,</span> y<span class="hl sym">) =</span> coordOf n
        <span class="hl sym">|</span> isEven y <span class="hl sym">= [(</span>y<span class="hl sym">,</span> retag <span class="hl sym">(</span>m &lt;&lt; x<span class="hl sym">)</span> c<span class="hl sym">) \\</span> m <span class="hl sym">&lt;-</span> even <span class="hl sym">|</span> isok m x y<span class="hl sym">]</span>
        <span class="hl sym">|</span> isOdd y  <span class="hl sym">= [(</span>y<span class="hl sym">,</span> retag <span class="hl sym">(</span>m &lt;&lt; x<span class="hl sym">)</span> c<span class="hl sym">) \\</span> m <span class="hl sym">&lt;-</span> odd  <span class="hl sym">|</span> isok m x y<span class="hl sym">]</span>
    isok mask x y
        <span class="hl sym"># (</span>width<span class="hl sym">,</span> height<span class="hl sym">) =</span> unpackSize <span class="hl sym">(</span>tagof mask<span class="hl sym">)</span>
        <span class="hl sym">#</span> mask <span class="hl sym">=</span> untag mask &lt;&lt; x
        <span class="hl sym">=</span>    isValid <span class="hl sym">(</span>x<span class="hl sym">+</span>width<span class="hl sym">) (</span>y<span class="hl sym">+</span>height<span class="hl sym">)</span>
          <span class="hl sym">&amp;&amp;</span> <span class="hl kwa">case</span> <span class="hl sym">(</span>y <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">,</span> y<span class="hl sym">+</span>height<span class="hl sym">==</span><span class="hl num">9</span><span class="hl sym">)</span> <span class="hl kwa">of</span>
                <span class="hl sym">(</span>False<span class="hl sym">,</span> False<span class="hl sym">) =</span> noLeftIslands mask <span class="hl sym">&amp;&amp;</span> noRightIslands mask
                <span class="hl sym">(</span>True<span class="hl sym">,</span> False<span class="hl sym">)  =</span> noIslands mask
                <span class="hl sym">(</span>False<span class="hl sym">,</span> True<span class="hl sym">)  =</span> noIslands <span class="hl sym">(</span>mask &lt;&lt; <span class="hl sym">(</span>N_COL<span class="hl sym">*(</span>y <span class="hl sym">-</span> <span class="hl num">4</span><span class="hl sym">)))</span>


<span class="hl sym">::</span> MaskData <span class="hl sym">:== {!{!{![#</span><span class="hl kwb">Int</span><span class="hl sym">!]}}}</span>

masksAtCell <span class="hl sym">::</span> MaskData
masksAtCell <span class="hl sym">=:</span> transpose <span class="hl sym">{</span><span class="hl kwa">let</span> mc <span class="hl sym">=</span> masksForColor c <span class="hl kwa">in</span> <span class="hl sym">{</span>m <span class="hl sym">\\</span> m <span class="hl sym">&lt;-</span> masksAt mc CELLS<span class="hl sym">} \\</span> c <span class="hl sym">&lt;-</span> COLORS<span class="hl sym">}</span>
  <span class="hl kwa">where</span>
    masksAt <span class="hl sym">:: ![(</span><span class="hl kwb">Int</span><span class="hl sym">,</span> <span class="hl kwb">Int</span><span class="hl sym">)] ![</span><span class="hl kwb">Int</span><span class="hl sym">] -&gt; [[#</span><span class="hl kwb">Int</span><span class="hl sym">!]]</span>
    masksAt masks <span class="hl sym">[] = []</span>
    masksAt masks <span class="hl sym">[</span>n<span class="hl sym">:</span>ns<span class="hl sym">] = [[#</span>snd x <span class="hl sym">\\</span> x <span class="hl sym">&lt;-</span> t<span class="hl sym">!]:</span>masksAt f ns<span class="hl sym">]</span>
      <span class="hl kwa">where</span>
        <span class="hl sym">(</span>t<span class="hl sym">,</span> f<span class="hl sym">) =</span> partition test masks
        test <span class="hl sym">(</span>r<span class="hl sym">,</span> m<span class="hl sym">) =</span> n` &gt;<span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl sym">&amp;&amp;</span> n` &lt; <span class="hl num">25</span> <span class="hl sym">&amp;&amp; (</span>untag m<span class="hl sym">)</span> bitand <span class="hl sym">(</span><span class="hl num">1</span> &lt;&lt; n`<span class="hl sym">)</span> &lt;&gt; <span class="hl num">0</span>
                    <span class="hl kwa">with</span> n` <span class="hl sym">=</span> n <span class="hl sym">-</span> N_COL <span class="hl sym">*</span> r
    transpose <span class="hl sym">::{{[#</span><span class="hl kwb">Int</span><span class="hl sym">!]}} -&gt;</span> MaskData
    transpose a <span class="hl sym">= {</span>copy<span class="hl sym">.[</span>y<span class="hl sym">] \\</span> y <span class="hl sym">&lt;- [</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">3</span><span class="hl sym">,</span><span class="hl num">4</span><span class="hl sym">,</span><span class="hl num">5</span><span class="hl sym">,</span><span class="hl num">6</span><span class="hl sym">]}</span>
      <span class="hl kwa">where</span>
        copy <span class="hl sym">::</span> MaskData
        copy <span class="hl sym">= {{{[#</span>x <span class="hl sym">\\</span> x &lt;<span class="hl sym">|-</span> a<span class="hl sym">.[</span>i<span class="hl sym">].[</span>cellAt x y<span class="hl sym">]!] \\</span> i <span class="hl sym">&lt;-</span> COLORS<span class="hl sym">} \\</span> x <span class="hl sym">&lt;- [</span><span class="hl num">0</span><span class="hl sym">..</span>N_COL<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">]} \\</span> y <span class="hl sym">&lt;- [</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">5</span><span class="hl sym">,</span><span class="hl num">6</span><span class="hl sym">,</span><span class="hl num">7</span><span class="hl sym">,</span><span class="hl num">8</span><span class="hl sym">,</span><span class="hl num">9</span><span class="hl sym">]}</span>



<span class="hl slc">// --- Looking for Islands ---</span>

noLineIslands mask start stop step
    <span class="hl sym">#</span> n <span class="hl sym">=</span> find test1 start step mask
    <span class="hl sym">#</span> n <span class="hl sym">=</span> find test0 n     step mask
    <span class="hl sym">#</span> n <span class="hl sym">=</span> find test1 n     step mask
    <span class="hl sym">|</span> n &gt; stop  <span class="hl sym">=</span> True
    <span class="hl sym">|</span> otherwise <span class="hl sym">=</span> False
  <span class="hl kwa">where</span>
    find test n dn mask
        <span class="hl sym">|</span> n &gt;<span class="hl sym">=</span> <span class="hl num">25</span>       <span class="hl sym">=</span> <span class="hl num">25</span>
        <span class="hl sym">|</span> test mask n   <span class="hl sym">=</span> n
        <span class="hl sym">|</span> otherwise     <span class="hl sym">=</span> find test <span class="hl sym">(</span>n<span class="hl sym">+</span>dn<span class="hl sym">)</span> dn mask
noLeftIslands mask   <span class="hl sym">:==</span> noLineIslands mask <span class="hl num">0  20 5</span>
noRightIslands mask  <span class="hl sym">:==</span> noLineIslands mask <span class="hl num">4  24 5</span>

noIslands board <span class="hl sym">:==</span> noisles board <span class="hl sym">(</span>count1s board<span class="hl sym">)</span>
  <span class="hl kwa">where</span>
    noisles <span class="hl sym">:: !</span><span class="hl kwb">Int</span> <span class="hl sym">!</span><span class="hl kwb">Int</span>  <span class="hl sym">-&gt;</span> <span class="hl kwb">Bool</span>
    noisles _ <span class="hl num">30</span> <span class="hl sym">=</span> True
    noisles board ones
        <span class="hl sym">#</span> board <span class="hl sym">=</span> fill board <span class="hl sym">(</span>coordOf <span class="hl sym">(</span>first0 board<span class="hl sym">))</span>
        <span class="hl sym">#</span> ones` <span class="hl sym">=</span> count1s board
        <span class="hl sym">| (</span>ones` <span class="hl sym">-</span> ones<span class="hl sym">)</span> rem N_ELEM &lt;&gt; <span class="hl num">0</span>    <span class="hl sym">=</span> False
        <span class="hl sym">|</span> otherwise                         <span class="hl sym">=</span> noisles board ones`
    fill <span class="hl sym">:: !</span><span class="hl kwb">Int</span> <span class="hl sym">!(!</span><span class="hl kwb">Int</span><span class="hl sym">, !</span><span class="hl kwb">Int</span><span class="hl sym">) -&gt;</span> <span class="hl kwb">Int</span>
    fill m <span class="hl sym">(</span>x<span class="hl sym">,</span> y<span class="hl sym">)</span>
        <span class="hl sym">|</span> x &lt; <span class="hl num">0</span> <span class="hl sym">||</span> x &gt;<span class="hl sym">=</span> N_COL <span class="hl sym">=</span> m
        <span class="hl sym">|</span> y &lt; <span class="hl num">0</span> <span class="hl sym">||</span> y &gt;<span class="hl sym">=</span> <span class="hl num">6</span>     <span class="hl sym">=</span> m
        <span class="hl sym">#</span> i <span class="hl sym">=</span> cellAt x y
        <span class="hl sym">|</span> test1 m i			  <span class="hl sym">=</span> m
        <span class="hl sym">=</span> foldl <span class="hl sym">(</span>\m d <span class="hl sym">-&gt;</span> fill m <span class="hl sym">(</span>move d <span class="hl sym">(</span>x<span class="hl sym">,</span> y<span class="hl sym">))) (</span>set m i<span class="hl sym">)</span> DIRECTIONS

