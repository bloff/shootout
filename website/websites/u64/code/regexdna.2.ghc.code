<span class="hl com">{-# LANGUAGE BangPatterns #-}</span>
<span class="hl com">{-# OPTIONS_GHC -O2 #-}</span>

<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">-- contributed by Sergei Matusevich 2007</span>
<span class="hl slc">-- modified by Tim Newsham</span>
<span class="hl slc">-- modified by Stephen Blackheath 2009, v1.0</span>
<span class="hl slc">-- mostly redone by Louis Wasserman, 2010</span>

<span class="hl slc">-- Compile command: ghc --make -O2 -threaded regex.hs -o regex</span>
<span class="hl slc">-- Run command:     ./regex +RTS -N4 -qm -qw -H250M       (quad core)</span>
<span class="hl slc">--                  ./regex +RTS -H250M               (single core)</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Note for future reference: with GHC HEAD as of 6/13/10,</span>
<span class="hl slc">-- works something like 3x as fast as GHC 6.12.1.  Reevaluate</span>
<span class="hl slc">-- in future! -LW</span>


import Control.Concurrent
import Control.Parallel.Strategies
import Control.Monad
import GHC.Conc
import Foreign
import Text.Regex.PCRE
import Text.Regex.PCRE.ByteString          <span class="hl slc">-- requires haskell-regex-pcre-builtin</span>
import qualified Data.ByteString as B
import qualified Data.ByteString.Internal as BI
import Data.Array.Base
import Data.List
import Data.Word
import Data.ByteString.Unsafe

subs <span class="hl sym">= [</span>
    <span class="hl sym">(</span><span class="hl str">&quot;B&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl sym">),</span>
    <span class="hl sym">(</span><span class="hl str">&quot;D&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl sym">),</span>
    <span class="hl sym">(</span><span class="hl str">&quot;H&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl sym">),</span>
    <span class="hl sym">(</span><span class="hl str">&quot;K&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(g|t)&quot;</span><span class="hl sym">),</span>
    <span class="hl sym">(</span><span class="hl str">&quot;M&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c)&quot;</span><span class="hl sym">),</span>
    <span class="hl sym">(</span><span class="hl str">&quot;N&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl sym">),</span>
    <span class="hl sym">(</span><span class="hl str">&quot;R&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|g)&quot;</span><span class="hl sym">),</span>
    <span class="hl sym">(</span><span class="hl str">&quot;S&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|g)&quot;</span><span class="hl sym">),</span>
    <span class="hl sym">(</span><span class="hl str">&quot;V&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl sym">),</span>
    <span class="hl sym">(</span><span class="hl str">&quot;W&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|t)&quot;</span><span class="hl sym">),</span>
    <span class="hl sym">(</span><span class="hl str">&quot;Y&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|t)&quot;</span><span class="hl sym">)]</span>

main <span class="hl sym">=</span> do
  file <span class="hl sym">&lt;-</span> B.getContents
  let variants <span class="hl sym">=</span> map <span class="hl sym">(</span>\ x <span class="hl sym">-&gt; (</span>x<span class="hl sym">,</span> makeRegex x<span class="hl sym">)) [</span>
	<span class="hl str">&quot;agggtaaa|tttaccct&quot;</span><span class="hl sym">,</span>
	<span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="hl sym">,</span>
	<span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="hl sym">,</span>
	<span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="hl sym">,</span>
	<span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="hl sym">,</span>
	<span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="hl sym">,</span>
	<span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="hl sym">,</span>
	<span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="hl sym">,</span>
	<span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span> <span class="hl sym">]  :: [(</span>String<span class="hl sym">,</span> Regex<span class="hl sym">)]</span>
  let <span class="hl sym">[</span>s1<span class="hl sym">,</span>s2<span class="hl sym">,</span>s3<span class="hl sym">] =</span> map <span class="hl sym">(</span>B.concat . tail<span class="hl sym">)</span> $
                groupBy notHeader $ B.split <span class="hl sym">(</span>BI.c2w '\n'<span class="hl sym">)</span> file
      showVars <span class="hl sym">:: (</span>String<span class="hl sym">,</span> Regex<span class="hl sym">) -&gt;</span> String
      showVars <span class="hl sym">(</span>rx<span class="hl sym">,</span>r<span class="hl sym">) =</span> let m2 <span class="hl sym">=</span> match r s2<span class="hl sym">;</span> m3 <span class="hl sym">=</span> match r s3 <span class="hl sym">::</span> Int in
      	m2 `par` m3 `seq` <span class="hl sym">(</span>rx <span class="hl sym">++</span> ' ' <span class="hl sym">:</span> show <span class="hl sym">(</span>m2 <span class="hl sym">+</span> m3<span class="hl sym">))</span>
      results <span class="hl sym">=</span> map showVars variants <span class="hl sym">++ [</span>
                  <span class="hl str">&quot;&quot;</span><span class="hl sym">,</span>
                  show $ B.length file<span class="hl sym">,</span>
                  show $ B.length s1 <span class="hl sym">+</span> B.length s2 <span class="hl sym">+</span> B.length s3<span class="hl sym">]</span>
  store <span class="hl sym">&lt;-</span> newEmptyMVar
  let chunks <span class="hl sym">=</span> fragment <span class="hl num">20000</span> s2  <span class="hl slc">-- break into chunks to parallelize, which</span>
                                 <span class="hl slc">-- is possible as our regexes are 1 char long</span>
  s1 `seq` s2 `seq` s3 `seq` <span class="hl sym">(</span>variants `using` parList <span class="hl sym">(</span>seqPair r0 rwhnf<span class="hl sym">))</span> `par`
  	forkIO <span class="hl sym">(</span>parallel <span class="hl sym">(</span>map substituteAll chunks<span class="hl sym">) &gt;&gt;=</span> putMVar store<span class="hl sym">)</span>
  	<span class="hl slc">-- do regex substitutions</span>
  mapM_ putStrLn $ results `using` parList rdeepseq
  chunks' <span class="hl sym">&lt;-</span> takeMVar store
  print $ B.length s1 <span class="hl sym">+</span> B.length s3 <span class="hl sym">+</span> chunks'
  where notHeader _ s <span class="hl sym">=</span> B.null s <span class="hl sym">||</span> B.head s <span class="hl sym">/= (</span>BI.c2w '<span class="hl sym">&gt;</span>'<span class="hl sym">)</span>

<span class="hl slc">-- Drop in replacement for sequence</span>
parallel <span class="hl sym">:: [</span>IO Int<span class="hl sym">] -&gt;</span> IO Int
parallel actions <span class="hl sym">=</span> do
    vars <span class="hl sym">&lt;-</span> mapM <span class="hl sym">(</span>\ action <span class="hl sym">-&gt;</span> do
        var <span class="hl sym">&lt;-</span> newEmptyMVar
        forkIO $ do
            answer <span class="hl sym">&lt;-</span> action
            putMVar var $<span class="hl sym">!</span> answer
        return var<span class="hl sym">)</span> actions
    foldM <span class="hl sym">(</span>\ <span class="hl sym">!</span>x v <span class="hl sym">-&gt;</span> liftM <span class="hl sym">(+</span>x<span class="hl sym">) (</span>takeMVar v<span class="hl sym">))</span> <span class="hl num">0</span> vars

fragment <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> B.ByteString <span class="hl sym">-&gt; [</span>B.ByteString<span class="hl sym">]</span>
fragment chunkSize bs <span class="hl sym">=</span> if B.null bs then <span class="hl sym">[]</span> else
    case B.splitAt chunkSize bs of
    	<span class="hl sym">(</span>start<span class="hl sym">,</span> rem<span class="hl sym">) -&gt;</span> start <span class="hl sym">:</span> fragment chunkSize rem

<span class="hl slc">-- Precompile regexes</span>
subRegexes <span class="hl sym">:: [(</span>Regex<span class="hl sym">,</span> B.ByteString<span class="hl sym">)]</span>
subRegexes <span class="hl sym">=</span> flip map subs $ \<span class="hl sym">(</span>pattern<span class="hl sym">,</span> sub<span class="hl sym">) -&gt;</span>
    <span class="hl sym">(</span>makeRegex pattern <span class="hl sym">::</span> Regex<span class="hl sym">,</span> B.pack <span class="hl sym">(</span>map BI.c2w sub<span class="hl sym">))</span>

extend <span class="hl sym">::</span> B.ByteString <span class="hl sym">-&gt;</span> IO B.ByteString
extend src <span class="hl sym">=</span> do
	destFP <span class="hl sym">&lt;-</span> BI.mallocByteString <span class="hl sym">(</span>B.length src <span class="hl sym">*</span> <span class="hl num">3</span><span class="hl sym">)</span>
	copyBS src destFP

copyBS <span class="hl sym">::</span> B.ByteString <span class="hl sym">-&gt;</span> ForeignPtr Word8 <span class="hl sym">-&gt;</span> IO B.ByteString
copyBS <span class="hl sym">(</span>BI.PS srcFP srcOff srcLen<span class="hl sym">)</span> destFP <span class="hl sym">=</span> withForeignPtr srcFP $ \ src0 <span class="hl sym">-&gt;</span>
	withForeignPtr destFP $ \ dest0 <span class="hl sym">-&gt;</span> do
	  copyArray dest0 <span class="hl sym">(</span>src0 <span class="hl sym">+!</span> srcOff<span class="hl sym">)</span> srcLen
	  return <span class="hl sym">(</span>BI.PS destFP <span class="hl num">0</span> srcLen<span class="hl sym">)</span>

substituteAll <span class="hl sym">::</span> B.ByteString <span class="hl sym">-&gt;</span> IO Int
substituteAll <span class="hl sym">!</span>txt<span class="hl sym">&#64;(</span>BI.PS srcFP srcOff srcLen<span class="hl sym">) =</span> allocaArray <span class="hl sym">(</span>B.length txt <span class="hl sym">*</span> <span class="hl num">3</span><span class="hl sym">)</span> $ \ destP <span class="hl sym">-&gt;</span> do
    destFP <span class="hl sym">&lt;-</span> newForeignPtr_ destP
    withForeignPtr srcFP $ \ srcP <span class="hl sym">-&gt;</span> copyArray destP <span class="hl sym">(</span>srcP `advancePtr` srcOff<span class="hl sym">)</span> srcLen
    let dest <span class="hl sym">=</span> BI.PS destFP <span class="hl num">0</span> srcLen
    allocaArray <span class="hl sym">(</span>B.length txt <span class="hl sym">*</span> <span class="hl num">3</span><span class="hl sym">)</span> $ \ tmp <span class="hl sym">-&gt;</span> do
    	tmpF <span class="hl sym">&lt;-</span> newForeignPtr_ tmp
    	foldM <span class="hl sym">(</span>\ <span class="hl sym">!</span>n sub <span class="hl sym">-&gt;</span> do
       		n' <span class="hl sym">&lt;-</span> substitute_ tmp <span class="hl sym">(</span>BI.PS destFP <span class="hl num">0</span> n<span class="hl sym">)</span> sub
       		copyArray destP tmp n'
       		return n'<span class="hl sym">)</span> srcLen subRegexes

<span class="hl sym">(+!) =</span> advancePtr

substitute_ <span class="hl sym">::</span> Ptr Word8 <span class="hl sym">-&gt;</span> B.ByteString <span class="hl sym">-&gt; (</span>Regex<span class="hl sym">,</span> B.ByteString<span class="hl sym">) -&gt;</span> IO Int
substitute_ <span class="hl sym">!</span>p xs<span class="hl sym">&#64;(</span>BI.PS fp0 i0 l0<span class="hl sym">) (</span>regex<span class="hl sym">,</span> BI.PS fpSub iSub lSub<span class="hl sym">) =</span>
  withForeignPtr fp0 $ \ p00 <span class="hl sym">-&gt;</span> let p0 <span class="hl sym">=</span> p00 <span class="hl sym">+!</span> i0 in withForeignPtr fpSub $ \ pSub <span class="hl sym">-&gt;</span> do
	len <span class="hl sym">&lt;-</span> do
		let go <span class="hl sym">!</span>i <span class="hl sym">!</span>j <span class="hl sym">=</span> do
		      match <span class="hl sym">&lt;-</span> execute regex <span class="hl sym">(</span>unsafeDrop i xs<span class="hl sym">)</span>
		      case match of
			Right <span class="hl sym">(</span>Just arr<span class="hl sym">) -&gt;</span> do
			    let <span class="hl sym">!(!</span>off<span class="hl sym">, !</span>len<span class="hl sym">) =</span> arr `unsafeAt` <span class="hl num">0</span>
			    copyArray <span class="hl sym">(</span>p <span class="hl sym">+!</span> j<span class="hl sym">) (</span>p0 <span class="hl sym">+!</span> i<span class="hl sym">)</span> off
			    copyArray <span class="hl sym">(</span>p <span class="hl sym">+! (</span>j <span class="hl sym">+</span> off<span class="hl sym">)) (</span>pSub <span class="hl sym">+!</span> iSub<span class="hl sym">)</span> lSub
			    go <span class="hl sym">(</span>i <span class="hl sym">+</span> off <span class="hl sym">+</span> len<span class="hl sym">) (</span>j <span class="hl sym">+</span> off <span class="hl sym">+</span> lSub<span class="hl sym">)</span>
			_ <span class="hl sym">-&gt;</span> copyArray <span class="hl sym">(</span>p <span class="hl sym">+!</span> j<span class="hl sym">) (</span>p0 <span class="hl sym">+!</span> i<span class="hl sym">) (</span>l0 <span class="hl sym">-</span> i<span class="hl sym">) &gt;&gt;</span> return <span class="hl sym">(</span>j <span class="hl sym">+</span> l0 <span class="hl sym">-</span> i<span class="hl sym">)</span>
		go <span class="hl num">0 0</span>
	return len <span class="hl slc">-- destFP now points to the substituted string</span>
