<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by The Go Authors.</span>
<span class="hl com"> */</span>

<span class="hl kwa">package</span> main

<span class="hl kwa">import</span> <span class="hl sym">(</span>
   <span class="hl str">&quot;bufio&quot;</span><span class="hl sym">;</span>
   <span class="hl str">&quot;os&quot;</span><span class="hl sym">;</span>
<span class="hl sym">)</span>

<span class="hl kwa">const</span> lineSize <span class="hl sym">=</span> <span class="hl num">60</span>

<span class="hl kwa">var</span> complement <span class="hl sym">= [</span><span class="hl num">256</span><span class="hl sym">]</span>uint8<span class="hl sym">{</span>
   'A'<span class="hl sym">:</span> 'T'<span class="hl sym">,</span> 'a'<span class="hl sym">:</span> 'T'<span class="hl sym">,</span>
   'C'<span class="hl sym">:</span> 'G'<span class="hl sym">,</span> 'c'<span class="hl sym">:</span> 'G'<span class="hl sym">,</span>
   'G'<span class="hl sym">:</span> 'C'<span class="hl sym">,</span> 'g'<span class="hl sym">:</span> 'C'<span class="hl sym">,</span>
   'T'<span class="hl sym">:</span> 'A'<span class="hl sym">,</span> 't'<span class="hl sym">:</span> 'A'<span class="hl sym">,</span>
   'U'<span class="hl sym">:</span> 'A'<span class="hl sym">,</span> 'u'<span class="hl sym">:</span> 'A'<span class="hl sym">,</span>
   'M'<span class="hl sym">:</span> 'K'<span class="hl sym">,</span> 'm'<span class="hl sym">:</span> 'K'<span class="hl sym">,</span>
   'R'<span class="hl sym">:</span> 'Y'<span class="hl sym">,</span> 'r'<span class="hl sym">:</span> 'Y'<span class="hl sym">,</span>
   'W'<span class="hl sym">:</span> 'W'<span class="hl sym">,</span> 'w'<span class="hl sym">:</span> 'W'<span class="hl sym">,</span>
   'S'<span class="hl sym">:</span> 'S'<span class="hl sym">,</span> 's'<span class="hl sym">:</span> 'S'<span class="hl sym">,</span>
   'Y'<span class="hl sym">:</span> 'R'<span class="hl sym">,</span> 'y'<span class="hl sym">:</span> 'R'<span class="hl sym">,</span>
   'K'<span class="hl sym">:</span> 'M'<span class="hl sym">,</span> 'k'<span class="hl sym">:</span> 'M'<span class="hl sym">,</span>
   'V'<span class="hl sym">:</span> 'B'<span class="hl sym">,</span> 'v'<span class="hl sym">:</span> 'B'<span class="hl sym">,</span>
   'H'<span class="hl sym">:</span> 'D'<span class="hl sym">,</span> 'h'<span class="hl sym">:</span> 'D'<span class="hl sym">,</span>
   'D'<span class="hl sym">:</span> 'H'<span class="hl sym">,</span> 'd'<span class="hl sym">:</span> 'H'<span class="hl sym">,</span>
   'B'<span class="hl sym">:</span> 'V'<span class="hl sym">,</span> 'b'<span class="hl sym">:</span> 'V'<span class="hl sym">,</span>
   'N'<span class="hl sym">:</span> 'N'<span class="hl sym">,</span> 'n'<span class="hl sym">:</span> 'N'<span class="hl sym">,</span>
<span class="hl sym">}</span>

<span class="hl kwa">func</span> main<span class="hl sym">() {</span>
   in <span class="hl sym">:=</span> bufio<span class="hl sym">.</span>NewReader<span class="hl sym">(</span>os<span class="hl sym">.</span>Stdin<span class="hl sym">);</span>
   buf <span class="hl sym">:=</span> make<span class="hl sym">([]</span>byte<span class="hl sym">,</span> <span class="hl num">1024</span><span class="hl sym">*</span><span class="hl num">1024</span><span class="hl sym">);</span>
   line<span class="hl sym">,</span> err <span class="hl sym">:=</span> in<span class="hl sym">.</span>ReadSlice<span class="hl sym">(</span>'\n'<span class="hl sym">);</span>
   <span class="hl kwa">for</span> err <span class="hl sym">==</span> nil <span class="hl sym">{</span>
      os<span class="hl sym">.</span>Stdout<span class="hl sym">.</span>Write<span class="hl sym">(</span>line<span class="hl sym">);</span>

      <span class="hl slc">// Accumulate reversed complement in buf[w:]</span>
      nchar <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      w <span class="hl sym">:=</span> len<span class="hl sym">(</span>buf<span class="hl sym">);</span>
      <span class="hl kwa">for</span> <span class="hl sym">{</span>
         line<span class="hl sym">,</span> err <span class="hl sym">=</span> in<span class="hl sym">.</span>ReadSlice<span class="hl sym">(</span>'\n'<span class="hl sym">);</span>
         <span class="hl kwa">if</span> err <span class="hl sym">!=</span> nil <span class="hl sym">||</span> line<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] ==</span> '<span class="hl sym">&gt;</span>' <span class="hl sym">{</span>
            <span class="hl kwa">break</span>
         <span class="hl sym">}</span>
         line <span class="hl sym">=</span> line<span class="hl sym">[</span><span class="hl num">0</span> <span class="hl sym">:</span> len<span class="hl sym">(</span>line<span class="hl sym">)-</span><span class="hl num">1</span><span class="hl sym">];</span>
         nchar <span class="hl sym">+=</span> len<span class="hl sym">(</span>line<span class="hl sym">);</span>
         <span class="hl kwa">if</span> len<span class="hl sym">(</span>line<span class="hl sym">)+</span>nchar<span class="hl sym">/</span><span class="hl num">60</span><span class="hl sym">+</span><span class="hl num">128</span> <span class="hl sym">&gt;=</span> w <span class="hl sym">{</span>
            nbuf <span class="hl sym">:=</span> make<span class="hl sym">([]</span>byte<span class="hl sym">,</span> len<span class="hl sym">(</span>buf<span class="hl sym">)*</span><span class="hl num">5</span><span class="hl sym">);</span>
            copy<span class="hl sym">(</span>nbuf<span class="hl sym">[</span>len<span class="hl sym">(</span>nbuf<span class="hl sym">)-</span>len<span class="hl sym">(</span>buf<span class="hl sym">):],</span> buf<span class="hl sym">);</span>
            w <span class="hl sym">+=</span> len<span class="hl sym">(</span>nbuf<span class="hl sym">) -</span> len<span class="hl sym">(</span>buf<span class="hl sym">);</span>
            buf <span class="hl sym">=</span> nbuf<span class="hl sym">;</span>
         <span class="hl sym">}</span>

         <span class="hl slc">// This loop is the bottleneck.</span>
         <span class="hl kwa">for</span> _<span class="hl sym">,</span> c <span class="hl sym">:=</span> <span class="hl kwa">range</span> line <span class="hl sym">{</span>
            w<span class="hl sym">--;</span>
            buf<span class="hl sym">[</span>w<span class="hl sym">] =</span> complement<span class="hl sym">[</span>c<span class="hl sym">];</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>

      <span class="hl slc">// Copy down to beginning of buffer, inserting newlines.</span>
      <span class="hl slc">// The loop left room for the newlines and 128 bytes of padding.</span>
      i <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwa">for</span> j <span class="hl sym">:=</span> w<span class="hl sym">;</span> j <span class="hl sym">&lt;</span> len<span class="hl sym">(</span>buf<span class="hl sym">);</span> j <span class="hl sym">+=</span> <span class="hl num">60</span> <span class="hl sym">{</span>
         n <span class="hl sym">:=</span> copy<span class="hl sym">(</span>buf<span class="hl sym">[</span>i<span class="hl sym">:</span>i<span class="hl sym">+</span><span class="hl num">60</span><span class="hl sym">],</span> buf<span class="hl sym">[</span>j<span class="hl sym">:]);</span>
         buf<span class="hl sym">[</span>i<span class="hl sym">+</span>n<span class="hl sym">] =</span> '\n'<span class="hl sym">;</span>
         i <span class="hl sym">+=</span> n <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl sym">}</span>
      os<span class="hl sym">.</span>Stdout<span class="hl sym">.</span>Write<span class="hl sym">(</span>buf<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">:</span>i<span class="hl sym">]);</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>
