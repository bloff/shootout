
<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">* http://shootout.alioth.debian.org/</span>
<span class="hl com">*</span>
<span class="hl com">* Original C contributed by Sebastien Loisel</span>
<span class="hl com">* Conversion to C++ by Jon Harrop</span>
<span class="hl com">* OpenMP parallelize by The Anh Tran</span>
<span class="hl com">* Add SSE by The Anh Tran</span>
<span class="hl com">* Conversion (back) to C by Diogo Sousa (aka orium)</span>
<span class="hl com">*/</span>

<span class="hl com">/* Fastest with this flag: -Os</span>
<span class="hl com">* Compile with: gcc -Wall -pipe -Os -fomit-frame-pointer -march=native \</span>
<span class="hl com">* -fopenmp -mfpmath=sse -msse2 -lm spec.c -o spec.run</span>
<span class="hl com">*/</span>

<span class="hl dir">#define _GNU_SOURCE</span>

<span class="hl dir">#include &lt;math.h&gt;</span>
<span class="hl dir">#include &lt;stdlib.h&gt;</span>
<span class="hl dir">#include &lt;stdio.h&gt;</span>
<span class="hl dir">#include &lt;sched.h&gt;</span>
<span class="hl dir">#include &lt;omp.h&gt;</span>
<span class="hl dir">#include &lt;stdbool.h&gt;</span>

<span class="hl com">/* define SIMD data type. 2 doubles encapsulated in one XMM register */</span>
<span class="hl kwc">typedef</span> <span class="hl kwb">double</span> v2dt <span class="hl kwd">__attribute__</span><span class="hl sym">((</span><span class="hl kwd">vector_size</span><span class="hl sym">(</span><span class="hl num">16</span><span class="hl sym">)));</span>


<span class="hl com">/* parameter for evaluate functions */</span>
<span class="hl kwc">typedef</span> <span class="hl kwb">struct</span>
<span class="hl sym">{</span>
   <span class="hl kwb">double</span><span class="hl sym">*</span> u<span class="hl sym">;</span>   <span class="hl com">/* source vector */</span>
   <span class="hl kwb">double</span><span class="hl sym">*</span> tmp<span class="hl sym">;</span> <span class="hl com">/* temporary */</span>
   <span class="hl kwb">double</span><span class="hl sym">*</span> v<span class="hl sym">;</span>   <span class="hl com">/* destination vector */</span>

   <span class="hl kwb">int</span> N<span class="hl sym">;</span>       <span class="hl com">/* source/destination vector length */</span>
   <span class="hl kwb">int</span> N2<span class="hl sym">;</span>        <span class="hl com">/* = N/2 */</span>

   <span class="hl kwb">int</span> r_begin<span class="hl sym">;</span> <span class="hl com">/* working range of each thread */</span>
   <span class="hl kwb">int</span> r_end<span class="hl sym">;</span>
<span class="hl sym">}</span> param<span class="hl sym">;</span>


<span class="hl com">/* Input: i, j</span>
<span class="hl com">* Return: 1.0 / (i + j) * (i + j +1) / 2 + i + 1;</span>
<span class="hl com">*/</span>
<span class="hl dir">#define eval_A(i,j) (1.0/(((i+j)*(i+j+1))&gt;&gt;1)+i+1)</span>

<span class="hl com">/* Input: i, j</span>
<span class="hl com">* Return type: 2 doubles in xmm register [double1, double2]</span>
<span class="hl com">*   with</span>
<span class="hl com">*      double1 = 1.0 / (i + j) * (i + j +1) / 2 + i + 1;</span>
<span class="hl com">*      double2 = 1.0 / (i+1 + j) * (i+1 + j +1) / 2 + i+1 + 1;</span>
<span class="hl com">*   Or   double2 = 1.0 / (i + j+1) * (i + j+1 +1) / 2 + i + 1;</span>
<span class="hl com">*   depend on version eval_A_sse_inc_i() or eval_A_sse()</span>
<span class="hl com">*/</span>
<span class="hl kwb">static</span> v2dt
<span class="hl kwd">eval_A_sse_inc_i</span><span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">,</span> <span class="hl kwb">int</span> j<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwb">int</span> d1<span class="hl sym">=(((</span>i<span class="hl sym">+</span>j<span class="hl sym">)*(</span>i<span class="hl sym">+</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">))&gt;&gt;</span><span class="hl num">1</span><span class="hl sym">)+</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">;</span>
   v2dt <span class="hl kwb">const</span> v1<span class="hl sym">={</span><span class="hl num">1.0</span><span class="hl sym">,</span><span class="hl num">1.0</span><span class="hl sym">};</span>
   v2dt r<span class="hl sym">={</span>d1<span class="hl sym">, (((</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">+</span>j<span class="hl sym">)*(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">+</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">))&gt;&gt;</span><span class="hl num">1</span><span class="hl sym">)+(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)+</span><span class="hl num">1</span><span class="hl sym">};</span>
   <span class="hl kwa">return</span> v1<span class="hl sym">/</span>r<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">static</span> v2dt
<span class="hl kwd">eval_A_sse</span><span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">,</span> <span class="hl kwb">int</span> j<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwb">int</span> d1<span class="hl sym">=(((</span>i<span class="hl sym">+</span>j<span class="hl sym">)*(</span>i<span class="hl sym">+</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">))&gt;&gt;</span><span class="hl num">1</span><span class="hl sym">)+</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">;</span>
   v2dt <span class="hl kwb">const</span> v1<span class="hl sym">={</span><span class="hl num">1.0</span><span class="hl sym">,</span> <span class="hl num">1.0</span><span class="hl sym">};</span>
   v2dt r<span class="hl sym">={</span>d1<span class="hl sym">, (((</span>i<span class="hl sym">+</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)*(</span>i<span class="hl sym">+</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">))&gt;&gt;</span><span class="hl num">1</span><span class="hl sym">)+</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">};</span>
   <span class="hl kwa">return</span> v1<span class="hl sym">/</span>r<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl com">/* This function is called by many threads */</span>
<span class="hl kwb">static void</span>
<span class="hl kwd">eval_A_times_u</span><span class="hl sym">(</span>param <span class="hl kwb">const</span> <span class="hl sym">*</span>p<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl com">/* alias of source vector */</span>
   v2dt <span class="hl kwb">const</span> <span class="hl sym">*</span>pU<span class="hl sym">=(</span>v2dt <span class="hl kwb">const</span><span class="hl sym">*)</span>p<span class="hl sym">-&gt;</span>u<span class="hl sym">;</span>
   <span class="hl kwb">int</span> i<span class="hl sym">;</span>
   <span class="hl kwb">int</span> ie<span class="hl sym">;</span>

   <span class="hl kwa">for</span> <span class="hl sym">(</span>i<span class="hl sym">=</span>p<span class="hl sym">-&gt;</span>r_begin<span class="hl sym">,</span> ie<span class="hl sym">=</span>p<span class="hl sym">-&gt;</span>r_end<span class="hl sym">;</span> i <span class="hl sym">&lt;</span> ie<span class="hl sym">;</span> i<span class="hl sym">++)</span>
   <span class="hl sym">{</span>
      v2dt sum <span class="hl sym">= {</span><span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">};</span>

      <span class="hl com">/* since xmm = 2 doubles. This loop run from [0 .. N/2) */</span>
      <span class="hl kwb">int</span> j<span class="hl sym">;</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span>j<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> j <span class="hl sym">&lt;</span> p<span class="hl sym">-&gt;</span>N2<span class="hl sym">;</span> j<span class="hl sym">++)</span>
         sum <span class="hl sym">+=</span> pU<span class="hl sym">[</span>j<span class="hl sym">]*</span><span class="hl kwd">eval_A_sse</span><span class="hl sym">(</span>i<span class="hl sym">,</span>j<span class="hl sym">*</span><span class="hl num">2</span><span class="hl sym">);</span>

      <span class="hl com">/* write result */</span>
      p<span class="hl sym">-&gt;</span>tmp<span class="hl sym">[</span>i<span class="hl sym">]= ((</span><span class="hl kwb">double</span><span class="hl sym">*)(&amp;</span>sum<span class="hl sym">))[</span><span class="hl num">0</span><span class="hl sym">] + ((</span><span class="hl kwb">double</span><span class="hl sym">*)(&amp;</span>sum<span class="hl sym">))[</span><span class="hl num">1</span><span class="hl sym">];</span>

      <span class="hl com">/* If source vector is odd size.</span>
<span class="hl com">      * This should be called &lt;= 1 time */</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span>j<span class="hl sym">=</span>j<span class="hl sym">*</span><span class="hl num">2</span><span class="hl sym">;</span> <span class="hl kwd">__builtin_expect</span><span class="hl sym">(</span>j <span class="hl sym">&lt;</span> p<span class="hl sym">-&gt;</span>N<span class="hl sym">,</span><span class="hl kwa">false</span><span class="hl sym">);</span> j<span class="hl sym">++)</span>
         p<span class="hl sym">-&gt;</span>tmp<span class="hl sym">[</span>i<span class="hl sym">]+=</span><span class="hl kwd">eval_A</span><span class="hl sym">(</span>i<span class="hl sym">,</span>j<span class="hl sym">)*</span>p<span class="hl sym">-&gt;</span>u<span class="hl sym">[</span>j<span class="hl sym">];</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwb">static void</span>
<span class="hl kwd">eval_At_times_u</span><span class="hl sym">(</span>param <span class="hl kwb">const</span> <span class="hl sym">*</span>p<span class="hl sym">)</span>
<span class="hl sym">{</span>
   v2dt <span class="hl kwb">const</span> <span class="hl sym">*</span>pT <span class="hl sym">=(</span>v2dt <span class="hl kwb">const</span> <span class="hl sym">*)</span>p<span class="hl sym">-&gt;</span>tmp<span class="hl sym">;</span>
   <span class="hl kwb">int</span> i<span class="hl sym">;</span>
   <span class="hl kwb">int</span> ie<span class="hl sym">;</span>
   <span class="hl kwb">int</span> j<span class="hl sym">;</span>

   <span class="hl kwa">for</span> <span class="hl sym">(</span>i<span class="hl sym">=</span>p<span class="hl sym">-&gt;</span>r_begin<span class="hl sym">,</span> ie<span class="hl sym">=</span>p<span class="hl sym">-&gt;</span>r_end<span class="hl sym">;</span> i <span class="hl sym">&lt;</span> ie<span class="hl sym">;</span> i<span class="hl sym">++)</span>
   <span class="hl sym">{</span>
      v2dt sum <span class="hl sym">= {</span><span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">};</span>

      <span class="hl kwa">for</span> <span class="hl sym">(</span>j<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> j <span class="hl sym">&lt;</span> p<span class="hl sym">-&gt;</span>N2<span class="hl sym">;</span> j<span class="hl sym">++)</span>
         sum <span class="hl sym">+=</span> pT<span class="hl sym">[</span>j<span class="hl sym">]*</span><span class="hl kwd">eval_A_sse_inc_i</span><span class="hl sym">(</span>j<span class="hl sym">*</span><span class="hl num">2</span><span class="hl sym">,</span>i<span class="hl sym">);</span>

      p<span class="hl sym">-&gt;</span>v<span class="hl sym">[</span>i<span class="hl sym">]= ((</span><span class="hl kwb">double</span><span class="hl sym">*)(&amp;</span>sum<span class="hl sym">))[</span><span class="hl num">0</span><span class="hl sym">] + ((</span><span class="hl kwb">double</span><span class="hl sym">*)(&amp;</span>sum<span class="hl sym">))[</span><span class="hl num">1</span><span class="hl sym">];</span>

      <span class="hl com">/* odd size array */</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span>j<span class="hl sym">=</span>j<span class="hl sym">*</span><span class="hl num">2</span><span class="hl sym">;</span> <span class="hl kwd">__builtin_expect</span><span class="hl sym">(</span>j <span class="hl sym">&lt;</span> p<span class="hl sym">-&gt;</span>N<span class="hl sym">,</span><span class="hl kwa">false</span><span class="hl sym">);</span> j<span class="hl sym">++)</span>
         p<span class="hl sym">-&gt;</span>v<span class="hl sym">[</span>i<span class="hl sym">]+=</span><span class="hl kwd">eval_A</span><span class="hl sym">(</span>j<span class="hl sym">,</span>i<span class="hl sym">)*</span>p<span class="hl sym">-&gt;</span>tmp<span class="hl sym">[</span>j<span class="hl sym">];</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl com">/* Called by N threads.</span>
<span class="hl com">* Each thread modifies its portion in destination vector</span>
<span class="hl com">* -&gt; barrier needed to sync access</span>
<span class="hl com">*/</span>
<span class="hl kwb">static void</span>
<span class="hl kwd">eval_AtA_times_u</span><span class="hl sym">(</span>param <span class="hl kwb">const</span> <span class="hl sym">*</span>p<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwd">eval_A_times_u</span><span class="hl sym">(</span>p<span class="hl sym">);</span>
   <span class="hl dir">#pragma omp barrier</span>
   <span class="hl kwd">eval_At_times_u</span><span class="hl sym">(</span>p<span class="hl sym">);</span>
   <span class="hl dir">#pragma omp barrier</span>
<span class="hl sym">}</span>

<span class="hl com">/* Shootout bench uses affinity to emulate single core processor.</span>
<span class="hl com">* This function search for appropriate number of threads to spawn</span>
<span class="hl com">*/</span>
<span class="hl kwb">static int</span>
<span class="hl kwd">GetThreadCount</span><span class="hl sym">()</span>
<span class="hl sym">{</span>
   cpu_set_t cs<span class="hl sym">;</span>
   <span class="hl kwb">int</span> count<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwb">int</span> i<span class="hl sym">;</span>

   <span class="hl kwd">CPU_ZERO</span><span class="hl sym">(&amp;</span>cs<span class="hl sym">);</span>
   <span class="hl kwd">sched_getaffinity</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl kwa">sizeof</span><span class="hl sym">(</span>cs<span class="hl sym">),&amp;</span>cs<span class="hl sym">);</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">8</span><span class="hl sym">;</span> i<span class="hl sym">++)</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">CPU_ISSET</span><span class="hl sym">(</span>i<span class="hl sym">,&amp;</span>cs<span class="hl sym">))</span>
         count<span class="hl sym">++;</span>
   <span class="hl kwa">return</span> count<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">static</span>
<span class="hl kwb">double</span> <span class="hl kwd">spectral_game</span><span class="hl sym">(</span><span class="hl kwb">int</span> N<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl slc">// Align 64 byte for L2 cache line</span>
   <span class="hl kwd">__attribute__</span><span class="hl sym">((</span><span class="hl kwd">aligned</span><span class="hl sym">(</span><span class="hl num">64</span><span class="hl sym">)))</span> <span class="hl kwb">double</span> u<span class="hl sym">[</span>N<span class="hl sym">];</span>
   <span class="hl kwd">__attribute__</span><span class="hl sym">((</span><span class="hl kwd">aligned</span><span class="hl sym">(</span><span class="hl num">64</span><span class="hl sym">)))</span> <span class="hl kwb">double</span> tmp<span class="hl sym">[</span>N<span class="hl sym">];</span>
   <span class="hl kwd">__attribute__</span><span class="hl sym">((</span><span class="hl kwd">aligned</span><span class="hl sym">(</span><span class="hl num">64</span><span class="hl sym">)))</span> <span class="hl kwb">double</span> v<span class="hl sym">[</span>N<span class="hl sym">];</span>

   <span class="hl kwb">double</span> vBv<span class="hl sym">=</span><span class="hl num">0.0</span><span class="hl sym">;</span>
   <span class="hl kwb">double</span> vv<span class="hl sym">=</span><span class="hl num">0.0</span><span class="hl sym">;</span>

   <span class="hl dir">#pragma omp parallel default(shared) num_threads(GetThreadCount())</span>
   <span class="hl sym">{</span>
      <span class="hl kwb">int</span> i<span class="hl sym">;</span>
      <span class="hl kwb">int</span> ite<span class="hl sym">;</span>

      <span class="hl dir">#pragma omp for schedule(static)</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> N<span class="hl sym">;</span> i<span class="hl sym">++)</span>
         u<span class="hl sym">[</span>i<span class="hl sym">]=</span><span class="hl num">1.0</span><span class="hl sym">;</span>

      <span class="hl com">/* this block will be executed by GetThreadCount()</span>
<span class="hl com">      * variables declared in this block are private for each thread</span>
<span class="hl com">      */</span>

      <span class="hl kwb">int</span> threadid<span class="hl sym">=</span><span class="hl kwd">omp_get_thread_num</span><span class="hl sym">();</span>
      <span class="hl kwb">int</span> threadcount<span class="hl sym">=</span><span class="hl kwd">omp_get_num_threads</span><span class="hl sym">();</span>
      <span class="hl kwb">int</span> chunk<span class="hl sym">=</span>N<span class="hl sym">/</span>threadcount<span class="hl sym">;</span>

      param my_param<span class="hl sym">;</span>

      my_param<span class="hl sym">.</span>tmp<span class="hl sym">=</span>tmp<span class="hl sym">;</span>
      my_param<span class="hl sym">.</span>N<span class="hl sym">=</span>N<span class="hl sym">;</span>
      my_param<span class="hl sym">.</span>N2<span class="hl sym">=</span>N<span class="hl sym">/</span><span class="hl num">2</span><span class="hl sym">;</span>

      <span class="hl com">/* calculate each thread's working range</span>
<span class="hl com">      * [range1 .. range2) =&gt; static schedule here</span>
<span class="hl com">      */</span>

      my_param<span class="hl sym">.</span>r_begin<span class="hl sym">=</span>threadid<span class="hl sym">*</span>chunk<span class="hl sym">;</span>
      my_param<span class="hl sym">.</span>r_end<span class="hl sym">=(</span>threadid <span class="hl sym">&lt;</span> threadcount<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
         ? my_param<span class="hl sym">.</span>r_begin<span class="hl sym">+</span>chunk <span class="hl sym">:</span> N<span class="hl sym">;</span>

      <span class="hl kwa">for</span> <span class="hl sym">(</span>ite<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> ite <span class="hl sym">&lt;</span> <span class="hl num">10</span><span class="hl sym">;</span> ite<span class="hl sym">++)</span>
      <span class="hl sym">{</span>
         my_param<span class="hl sym">.</span>u<span class="hl sym">=</span>u<span class="hl sym">;</span>   <span class="hl com">/* source vec is u */</span>
         my_param<span class="hl sym">.</span>v<span class="hl sym">=</span>v<span class="hl sym">;</span>   <span class="hl com">/* destination vec is v */</span>
         <span class="hl kwd">eval_AtA_times_u</span><span class="hl sym">(&amp;</span>my_param<span class="hl sym">);</span>

         my_param<span class="hl sym">.</span>u<span class="hl sym">=</span>v<span class="hl sym">;</span> <span class="hl com">/* source is v */</span>
         my_param<span class="hl sym">.</span>v<span class="hl sym">=</span>u<span class="hl sym">;</span> <span class="hl com">/* desti is u */</span>
         <span class="hl kwd">eval_AtA_times_u</span><span class="hl sym">(&amp;</span>my_param<span class="hl sym">);</span>
      <span class="hl sym">}</span>

      <span class="hl com">/* multi thread adding */</span>
      <span class="hl dir">#pragma omp for schedule(static) reduction( + : vBv, vv ) nowait</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> N<span class="hl sym">;</span> i<span class="hl sym">++)</span>
      <span class="hl sym">{</span>
         vv<span class="hl sym">+=</span>v<span class="hl sym">[</span>i<span class="hl sym">]*</span>v<span class="hl sym">[</span>i<span class="hl sym">];</span>
         vBv<span class="hl sym">+=</span>u<span class="hl sym">[</span>i<span class="hl sym">]*</span>v<span class="hl sym">[</span>i<span class="hl sym">];</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span> <span class="hl com">/* end parallel region */</span>

   <span class="hl kwa">return</span> <span class="hl kwd">sqrt</span><span class="hl sym">(</span>vBv<span class="hl sym">/</span>vv<span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span>
<span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">**</span>argv<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwb">int</span> N<span class="hl sym">=(</span>argc <span class="hl sym">&gt;=</span> <span class="hl num">2</span><span class="hl sym">)</span> ? <span class="hl kwd">atoi</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]) :</span> <span class="hl num">2000</span><span class="hl sym">;</span>
   <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;%.9f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> <span class="hl kwd">spectral_game</span><span class="hl sym">(</span>N<span class="hl sym">));</span>
   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

