<span class="hl com">{-# LANGUAGE ForeignFunctionInterface, BangPatterns #-}</span>
<span class="hl com">{-# OPTIONS_GHC -O2 #-}</span>

<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">-- contributed by Sergei Matusevich 2007</span>
<span class="hl slc">-- modified by Tim Newsham</span>
<span class="hl slc">-- modified by Stephen Blackheath 2009, v1.0</span>

<span class="hl slc">-- Compile command: ghc -o regex regex.hs -threaded --make</span>
<span class="hl slc">-- Run command:     ./regex +RTS -N4       (quad core)</span>
<span class="hl slc">--                  ./regex                (single core)</span>


<span class="hl kwa">import</span> Control.Concurrent
<span class="hl kwa">import</span> Control.Parallel
<span class="hl kwa">import</span> Control.Parallel.Strategies
<span class="hl kwa">import</span> Control.Monad
<span class="hl kwa">import</span> Foreign.Storable
<span class="hl kwa">import</span> Foreign.Marshal.Alloc
<span class="hl kwa">import</span> Foreign.Marshal.Array
<span class="hl kwa">import</span> Foreign.Ptr
<span class="hl kwa">import</span> Foreign.ForeignPtr
<span class="hl kwa">import</span> Foreign.C.Types
<span class="hl kwa">import</span> Text.Regex.PCRE          <span class="hl slc">-- requires haskell-regex-pcre-builtin</span>
<span class="hl kwa">import qualified</span> Data.ByteString <span class="hl kwa">as</span> B
<span class="hl kwa">import qualified</span> Data.ByteString.Internal <span class="hl kwa">as</span> BI
<span class="hl kwa">import</span> System.IO.Unsafe
<span class="hl kwa">import</span> Data.Array
<span class="hl kwa">import</span> Debug.Trace
<span class="hl kwa">import</span> Data.List
<span class="hl kwa">import</span> Data.Word

variants <span class="hl sym">= [</span>
  <span class="hl str">&quot;agggtaaa|tttaccct&quot;</span><span class="hl sym">,</span>
  <span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="hl sym">,</span>
  <span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="hl sym">,</span>
  <span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="hl sym">,</span>
  <span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="hl sym">,</span>
  <span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="hl sym">,</span>
  <span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="hl sym">,</span>
  <span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="hl sym">,</span>
  <span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span> <span class="hl sym">]</span>

subs <span class="hl sym">= [</span>
    <span class="hl sym">(</span><span class="hl str">&quot;B&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl sym">),</span>
    <span class="hl sym">(</span><span class="hl str">&quot;D&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl sym">),</span>
    <span class="hl sym">(</span><span class="hl str">&quot;H&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl sym">),</span>
    <span class="hl sym">(</span><span class="hl str">&quot;K&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(g|t)&quot;</span><span class="hl sym">),</span>
    <span class="hl sym">(</span><span class="hl str">&quot;M&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c)&quot;</span><span class="hl sym">),</span>
    <span class="hl sym">(</span><span class="hl str">&quot;N&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl sym">),</span>
    <span class="hl sym">(</span><span class="hl str">&quot;R&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|g)&quot;</span><span class="hl sym">),</span>
    <span class="hl sym">(</span><span class="hl str">&quot;S&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|g)&quot;</span><span class="hl sym">),</span>
    <span class="hl sym">(</span><span class="hl str">&quot;V&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl sym">),</span>
    <span class="hl sym">(</span><span class="hl str">&quot;W&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|t)&quot;</span><span class="hl sym">),</span>
    <span class="hl sym">(</span><span class="hl str">&quot;Y&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|t)&quot;</span><span class="hl sym">)]</span>

main <span class="hl sym">=</span> <span class="hl kwa">do</span>
  file <span class="hl sym">&lt;-</span> B.getContents
  <span class="hl kwa">let</span> <span class="hl sym">[</span>s1<span class="hl sym">,</span>s2<span class="hl sym">,</span>s3<span class="hl sym">] =</span> map <span class="hl sym">(</span>B.concat . tail<span class="hl sym">)</span> $
                groupBy notHeader $ B.split <span class="hl sym">(</span>BI.c2w '\n'<span class="hl sym">)</span> file
      showVars r <span class="hl sym">=</span> r <span class="hl sym">++</span> ' ' <span class="hl sym">:</span> show <span class="hl sym">((</span>s2 <span class="hl sym">=~</span> r <span class="hl sym">::</span> <span class="hl kwb">Int</span><span class="hl sym">) + (</span>s3 <span class="hl sym">=~</span> r <span class="hl sym">::</span> <span class="hl kwb">Int</span><span class="hl sym">))</span>
      results <span class="hl sym">=</span> map showVars variants <span class="hl sym">++ [</span>
                  <span class="hl str">&quot;&quot;</span><span class="hl sym">,</span>
                  show $ B.length file<span class="hl sym">,</span>
                  show $ B.length s1 <span class="hl sym">+</span> B.length s2 <span class="hl sym">+</span> B.length s3<span class="hl sym">]</span>
      r2 <span class="hl sym">=</span> flip map <span class="hl sym">(</span>zip <span class="hl sym">[</span><span class="hl num">1</span>..<span class="hl sym">]</span> results<span class="hl sym">)</span> $ \<span class="hl sym">(</span>idx<span class="hl sym">,</span> a<span class="hl sym">) -&gt;</span>
          trace <span class="hl sym">(</span><span class="hl str">&quot;start &quot;</span><span class="hl sym">++</span>show idx<span class="hl sym">) ()</span> `seq` <span class="hl sym">(</span>a `using` rnf<span class="hl sym">)</span> `seq` trace <span class="hl sym">(</span><span class="hl str">&quot;end &quot;</span><span class="hl sym">++</span>show idx<span class="hl sym">) ()</span> `seq` a
  <span class="hl slc">-- Ensure that the data blocks are fully evaluated before we start</span>
  <span class="hl slc">-- executing things in parallel, since they all depend on them</span>
  return $<span class="hl sym">! (</span>s1 `par` s2 `par` s3<span class="hl sym">)</span> `seq` s1 `seq` s2 `seq` s3
  mapM_ putStrLn $ parList rnf results `seq` results

  <span class="hl kwa">let</span> chunks <span class="hl sym">=</span> fragment <span class="hl num">5000</span> s2  <span class="hl slc">-- break into chunks to parallelize, which</span>
                                 <span class="hl slc">-- is possible as our regexes are 1 char long</span>
  chunks' <span class="hl sym">&lt;-</span> parallel $ map substituteAll chunks  <span class="hl slc">-- do regex substitutions</span>
  print $ B.length s1 <span class="hl sym">+</span> B.length s3 <span class="hl sym">+</span> B.length <span class="hl sym">(</span>B.concat chunks'<span class="hl sym">)</span>
  <span class="hl kwa">where</span> notHeader _ s <span class="hl sym">=</span> B.null s <span class="hl sym">||</span> B.head s <span class="hl sym">/= (</span>BI.c2w '<span class="hl sym">&gt;</span>'<span class="hl sym">)</span>

<span class="hl slc">-- Drop in replacement for sequence</span>
parallel <span class="hl sym">:: [</span>IO a<span class="hl sym">] -&gt;</span> IO <span class="hl sym">[</span>a<span class="hl sym">]</span>
parallel actions <span class="hl sym">=</span> <span class="hl kwa">do</span>
    vars <span class="hl sym">&lt;-</span> forM actions $ \action <span class="hl sym">-&gt;</span> <span class="hl kwa">do</span>
        var <span class="hl sym">&lt;-</span> newEmptyMVar
        forkIO $ <span class="hl kwa">do</span>
            answer <span class="hl sym">&lt;-</span> action
            return $<span class="hl sym">!</span> answer
            putMVar var answer
        return var
    forM vars takeMVar

fragment <span class="hl sym">::</span> <span class="hl kwb">Int</span> <span class="hl sym">-&gt;</span> B.ByteString <span class="hl sym">-&gt; [</span>B.ByteString<span class="hl sym">]</span>
fragment chunkSize bs <span class="hl sym">=</span>
    <span class="hl kwa">let</span> <span class="hl sym">(</span>start<span class="hl sym">,</span> rem<span class="hl sym">) =</span> B.splitAt chunkSize bs
    <span class="hl kwa">in</span>  if B.null rem
            <span class="hl kwa">then</span> <span class="hl sym">[</span>start<span class="hl sym">]</span>
            <span class="hl kwa">else</span> start <span class="hl sym">:</span> fragment chunkSize rem

<span class="hl slc">-- Precompile regexes</span>
subRegexes <span class="hl sym">:: [(</span>Regex<span class="hl sym">,</span> B.ByteString<span class="hl sym">)]</span>
subRegexes <span class="hl sym">=</span> flip map subs $ \<span class="hl sym">(</span>pattern<span class="hl sym">,</span> sub<span class="hl sym">) -&gt;</span>
    <span class="hl sym">(</span>makeRegex pattern <span class="hl sym">::</span> Regex<span class="hl sym">,</span> B.pack <span class="hl sym">(</span>map BI.c2w sub<span class="hl sym">))</span>

substituteAll <span class="hl sym">::</span> B.ByteString <span class="hl sym">-&gt;</span> IO B.ByteString
substituteAll <span class="hl sym">!</span>txt <span class="hl sym">=</span> <span class="hl kwa">do</span>
    <span class="hl kwa">let</span> BI.PS srcFP srcOff srcLen <span class="hl sym">=</span> txt
    withForeignPtr srcFP $ \src0 <span class="hl sym">-&gt;</span> <span class="hl kwa">do</span>
        <span class="hl kwa">let</span> src <span class="hl sym">=</span> src0 `plusPtr` srcOff
            <span class="hl slc">-- Capacity of -1 guarantees that a new buffer will be allocated</span>
        <span class="hl sym">(</span>dst<span class="hl sym">,</span> dstLen<span class="hl sym">,</span> _<span class="hl sym">) &lt;-</span> foldM substitute_ <span class="hl sym">(</span>src<span class="hl sym">,</span> srcLen<span class="hl sym">, -</span><span class="hl num">1</span><span class="hl sym">)</span> subRegexes
        dstFP <span class="hl sym">&lt;-</span> newForeignPtr finalizerFree dst
        return $ BI.PS dstFP <span class="hl num">0</span> dstLen

foreign <span class="hl kwa">import</span> ccall unsafe <span class="hl str">&quot;string.h memmove&quot;</span> memmove
    <span class="hl sym">::</span> Ptr Word8 <span class="hl sym">-&gt;</span> Ptr Word8 <span class="hl sym">-&gt;</span> CSize <span class="hl sym">-&gt;</span> IO <span class="hl sym">(</span>Ptr Word8<span class="hl sym">)</span>

<span class="hl slc">-- A function that does nothing</span>
foreign <span class="hl kwa">import</span> ccall unsafe <span class="hl str">&quot;static unistd.h &amp;getpid&quot;</span> c_null_finalizer
    <span class="hl sym">::</span> FunPtr <span class="hl sym">(</span>Ptr Word8 <span class="hl sym">-&gt;</span> IO <span class="hl sym">())</span>

<span class="hl slc">-- Do a single regex substitution, returning the modified string</span>
substitute_ <span class="hl sym">:: (</span>Ptr Word8<span class="hl sym">,</span> <span class="hl kwb">Int</span><span class="hl sym">,</span> <span class="hl kwb">Int</span><span class="hl sym">) -&gt; (</span>Regex<span class="hl sym">,</span> B.ByteString<span class="hl sym">) -&gt;</span> IO <span class="hl sym">(</span>Ptr Word8<span class="hl sym">,</span> <span class="hl kwb">Int</span><span class="hl sym">,</span> <span class="hl kwb">Int</span><span class="hl sym">)</span>
substitute_ <span class="hl sym">(</span>src<span class="hl sym">,</span> srcLen<span class="hl sym">,</span> srcCap<span class="hl sym">) (</span>regex<span class="hl sym">,</span> sub<span class="hl sym">) =</span> <span class="hl kwa">do</span>
    <span class="hl slc">-- Make a new string given the input string, regex match positions, and</span>
    <span class="hl slc">-- string to substitute</span>
    <span class="hl slc">-- Turn the source buffer into a byte string to pass to 'match'</span>
    srcFP <span class="hl sym">&lt;-</span> newForeignPtr c_null_finalizer src
    <span class="hl kwa">let</span> srcBS <span class="hl sym">=</span> BI.PS srcFP <span class="hl num">0</span> srcLen
        am <span class="hl sym">::</span> Array <span class="hl kwb">Int</span> <span class="hl sym">(</span>MatchOffset<span class="hl sym">,</span> MatchLength<span class="hl sym">)</span>
        AllMatches am <span class="hl sym">=</span> match regex srcBS
        <span class="hl sym">(</span>start<span class="hl sym">,</span> end<span class="hl sym">) =</span> bounds am
        matches <span class="hl sym">=</span> end <span class="hl sym">+</span> <span class="hl num">1</span>
        BI.PS subFP subOff subLen <span class="hl sym">=</span> sub
        newLength <span class="hl sym">=</span> srcLen <span class="hl sym">+</span> matches <span class="hl sym">* (</span>subLen <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span>
    withForeignPtr subFP $ \sub0 <span class="hl sym">-&gt;</span> <span class="hl kwa">do</span>
        <span class="hl kwa">let</span> sub <span class="hl sym">=</span> sub0 `plusPtr` subOff
        <span class="hl sym">(</span>dst<span class="hl sym">,</span> dstCap<span class="hl sym">) &lt;-</span>
            if newLength <span class="hl sym">&gt;</span> srcCap
                <span class="hl kwa">then do</span>
                    <span class="hl kwa">let</span> dstCap <span class="hl sym">=</span> if srcCap <span class="hl sym">&lt;</span> <span class="hl num">0</span>
                            <span class="hl kwa">then</span> srcLen <span class="hl sym">*</span> <span class="hl num">2</span>
                            <span class="hl kwa">else</span> srcCap <span class="hl sym">*</span> <span class="hl num">2</span>
                    dst <span class="hl sym">&lt;-</span> mallocBytes dstCap
                    return <span class="hl sym">(</span>dst<span class="hl sym">,</span> dstCap<span class="hl sym">)</span>
                <span class="hl kwa">else</span>
                    return <span class="hl sym">(</span>src<span class="hl sym">,</span> srcCap<span class="hl sym">)</span>

        <span class="hl kwa">let</span> copy <span class="hl sym">::</span> <span class="hl kwb">Int</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">Int</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">Int</span> <span class="hl sym">-&gt;</span> IO <span class="hl sym">()</span>
            copy idx sOff dOff <span class="hl sym">|</span> idx <span class="hl sym">&lt;</span> <span class="hl num">0</span> <span class="hl sym">=</span> <span class="hl kwa">do</span>
                <span class="hl kwa">let</span> chunkLen <span class="hl sym">=</span> sOff
                when <span class="hl sym">(</span>dst <span class="hl sym">/=</span> src<span class="hl sym">)</span> $
                    BI.memcpy dst src <span class="hl sym">(</span>fromIntegral chunkLen<span class="hl sym">)</span>

            copy idx sOff dOff <span class="hl sym">=</span> <span class="hl kwa">do</span>
                <span class="hl kwa">let</span> <span class="hl sym">(</span>matchOff<span class="hl sym">,</span> _<span class="hl sym">) =</span> am <span class="hl sym">!</span> idx
                    sOff' <span class="hl sym">=</span> matchOff <span class="hl sym">+</span> <span class="hl num">1</span>
                    chunkLen <span class="hl sym">=</span>  sOff <span class="hl sym">-</span> sOff'
                    dOff' <span class="hl sym">=</span> dOff <span class="hl sym">-</span> chunkLen
                memmove <span class="hl sym">(</span>dst `plusPtr` dOff'<span class="hl sym">) (</span>src `plusPtr` sOff'<span class="hl sym">)</span>
                        <span class="hl sym">(</span>fromIntegral chunkLen<span class="hl sym">)</span>
                <span class="hl kwa">let</span> dOff'' <span class="hl sym">=</span> dOff' <span class="hl sym">-</span> subLen
                    sOff'' <span class="hl sym">=</span> sOff' <span class="hl sym">-</span> <span class="hl num">1</span>
                BI.memcpy <span class="hl sym">(</span>dst `plusPtr` dOff''<span class="hl sym">)</span> sub
                        <span class="hl sym">(</span>fromIntegral subLen<span class="hl sym">)</span>
                copy <span class="hl sym">(</span>idx<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span> sOff'' dOff''

        copy end srcLen newLength
        when <span class="hl sym">(</span>dst <span class="hl sym">/=</span> src <span class="hl sym">&amp;&amp;</span> srcCap <span class="hl sym">&gt;=</span> <span class="hl num">0</span><span class="hl sym">)</span> $ free src
        return <span class="hl sym">(</span>dst<span class="hl sym">,</span> newLength<span class="hl sym">,</span> dstCap<span class="hl sym">)</span>

