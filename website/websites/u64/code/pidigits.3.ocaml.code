<span class="hl com">(*</span>
<span class="hl com"> * The Computer Language Shootout</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by Christophe TROESTLER</span>
<span class="hl com"> * modified by Mat√≠as Giovannini</span>
<span class="hl com"> * modified by Ethan Burns</span>
<span class="hl com"> *)</span>

<span class="hl kwa">open</span> <span class="hl kwd">Big_int</span>

<span class="hl kwa">type</span> lft <span class="hl sym">=</span> big_int <span class="hl sym">*</span> big_int <span class="hl sym">*</span> big_int <span class="hl sym">*</span> big_int
<span class="hl kwa">type</span> lft_ints <span class="hl sym">=</span> <span class="hl kwb">int</span> <span class="hl sym">*</span> <span class="hl kwb">int</span> <span class="hl sym">*</span> <span class="hl kwb">int</span> <span class="hl sym">*</span> <span class="hl kwb">int</span>

<span class="hl kwa">let</span> <span class="hl kwb">unit</span><span class="hl sym">:</span>lft <span class="hl sym">= (</span>unit_big_int<span class="hl sym">,</span> zero_big_int<span class="hl sym">,</span> zero_big_int<span class="hl sym">,</span> unit_big_int<span class="hl sym">)</span>

<span class="hl com">(* Attempt to avoid the (apparently slow) Big_int module in some</span>
<span class="hl com">   simple cases... seems to improve performance 30%. *)</span>

<span class="hl kwa">let</span> <span class="hl sym">( */ )</span> a b <span class="hl sym">=</span>
  <span class="hl kwa">if</span> b <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
    zero_big_int
  <span class="hl kwa">else if</span> b <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl kwa">then</span>
    a
  <span class="hl kwa">else if</span> b <span class="hl sym">=</span> <span class="hl num">2</span> <span class="hl kwa">then</span>
    add_big_int a a
  <span class="hl kwa">else</span>
    mult_int_big_int b a

<span class="hl kwa">let</span> <span class="hl sym">( +/ )</span> a b <span class="hl sym">=</span>
  <span class="hl kwa">if</span> eq_big_int a zero_big_int <span class="hl kwa">then</span>
    b
  <span class="hl kwa">else if</span> eq_big_int b zero_big_int <span class="hl kwa">then</span>
    a
  <span class="hl kwa">else</span>
    add_big_int a b

<span class="hl kwa">let</span> <span class="hl sym">( // )</span> a b <span class="hl sym">=</span>
  <span class="hl kwa">if</span> lt_big_int a b <span class="hl kwa">then</span>
    zero_big_int
  <span class="hl kwa">else if</span> eq_big_int a b <span class="hl kwa">then</span>
    unit_big_int
  <span class="hl kwa">else</span>
    div_big_int a b

<span class="hl kwa">let</span> extr <span class="hl sym">(</span>q<span class="hl sym">,</span> r<span class="hl sym">,</span> s<span class="hl sym">,</span> t<span class="hl sym">)</span> x <span class="hl sym">=</span>
  int_of_big_int <span class="hl sym">((</span>q <span class="hl sym">*/</span> x <span class="hl sym">+/</span> r<span class="hl sym">) // (</span>s <span class="hl sym">*/</span> x <span class="hl sym">+/</span> t<span class="hl sym">))</span>

<span class="hl kwa">let</span> comp <span class="hl sym">((</span>q<span class="hl sym">,</span> r<span class="hl sym">,</span> s<span class="hl sym">,</span> t<span class="hl sym">) :</span> lft<span class="hl sym">) ((</span>u<span class="hl sym">,</span> v<span class="hl sym">,</span> w<span class="hl sym">,</span> x<span class="hl sym">) :</span> lft_ints<span class="hl sym">) :</span> lft <span class="hl sym">=</span>
  q <span class="hl sym">*/</span> u <span class="hl sym">+/</span> r <span class="hl sym">*/</span> w<span class="hl sym">,</span>
  q <span class="hl sym">*/</span> v <span class="hl sym">+/</span> r <span class="hl sym">*/</span> x<span class="hl sym">,</span>
  s <span class="hl sym">*/</span> u <span class="hl sym">+/</span> t <span class="hl sym">*/</span> w<span class="hl sym">,</span>
  s <span class="hl sym">*/</span> v <span class="hl sym">+/</span> t <span class="hl sym">*/</span> x

<span class="hl kwa">let</span> comp' <span class="hl sym">((</span>q<span class="hl sym">,</span> r<span class="hl sym">,</span> s<span class="hl sym">,</span> t<span class="hl sym">) :</span> lft_ints<span class="hl sym">) ((</span>u<span class="hl sym">,</span> v<span class="hl sym">,</span> w<span class="hl sym">,</span> x<span class="hl sym">) :</span> lft<span class="hl sym">) :</span> lft <span class="hl sym">=</span>
  u <span class="hl sym">*/</span> q <span class="hl sym">+/</span> w <span class="hl sym">*/</span> r<span class="hl sym">,</span>
  v <span class="hl sym">*/</span> q <span class="hl sym">+/</span> x <span class="hl sym">*/</span> r<span class="hl sym">,</span>
  u <span class="hl sym">*/</span> s <span class="hl sym">+/</span> w <span class="hl sym">*/</span> t<span class="hl sym">,</span>
  v <span class="hl sym">*/</span> s <span class="hl sym">+/</span> x <span class="hl sym">*/</span> t

<span class="hl kwa">let</span> stream next safe prod cons ith_x z_0 i_0 num <span class="hl sym">=</span>
  <span class="hl kwa">let</span> buf <span class="hl sym">=</span> <span class="hl kwc">Buffer</span><span class="hl sym">.</span>create <span class="hl sym">(</span>num <span class="hl sym">*</span> <span class="hl num">2</span><span class="hl sym">)</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> col <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> z_int <span class="hl sym">=</span> int_of_char <span class="hl kwb">'0'</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> end_row left <span class="hl sym">=</span>
    col <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl kwc">Buffer</span><span class="hl sym">.</span>add_string buf <span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">:&quot;</span><span class="hl sym">;</span>
    <span class="hl kwc">Buffer</span><span class="hl sym">.</span>add_string buf <span class="hl sym">(</span>string_of_int <span class="hl sym">(</span>num <span class="hl sym">-</span> left<span class="hl sym">));</span>
    <span class="hl kwc">Buffer</span><span class="hl sym">.</span>add_char buf '\n'<span class="hl sym">;</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> next_digit left d <span class="hl sym">=</span>
    <span class="hl kwc">Buffer</span><span class="hl sym">.</span>add_char buf <span class="hl sym">(</span>char_of_int <span class="hl sym">(</span>d <span class="hl sym">+</span> z_int<span class="hl sym">));</span>
    incr col<span class="hl sym">;</span>
    <span class="hl kwa">if</span> <span class="hl sym">(!</span>col <span class="hl sym">=</span> <span class="hl num">10</span><span class="hl sym">)</span> <span class="hl kwa">then</span> end_row left <span class="hl kwa">in</span>
  <span class="hl kwa">let rec</span> do_stream z i left <span class="hl sym">=</span>
    <span class="hl kwa">if</span> left <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
      <span class="hl kwa">let</span> y <span class="hl sym">=</span> next z <span class="hl kwa">in</span>
	<span class="hl kwa">if</span> safe z y <span class="hl kwa">then begin</span>
	  <span class="hl kwa">let</span> left' <span class="hl sym">=</span> left <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl kwa">in</span>
	    next_digit left' y<span class="hl sym">;</span>
	    do_stream <span class="hl sym">(</span>prod z y<span class="hl sym">)</span> i left'
	<span class="hl kwa">end else begin</span>
	  do_stream <span class="hl sym">(</span>cons z <span class="hl sym">(</span>ith_x i<span class="hl sym">)) (</span>i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span> left
	<span class="hl kwa">end</span>
  <span class="hl kwa">in</span>
    do_stream z_0 i_0 num<span class="hl sym">;</span>
    <span class="hl kwa">if</span> <span class="hl sym">!</span>col <span class="hl sym">&lt;&gt;</span> <span class="hl num">10</span> <span class="hl kwa">then</span>
      <span class="hl kwc">Buffer</span><span class="hl sym">.</span>add_string buf <span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">.</span>make <span class="hl sym">(</span><span class="hl num">10</span> <span class="hl sym">- !</span>col<span class="hl sym">)</span> ' '<span class="hl sym">);</span>
    end_row <span class="hl num">0</span><span class="hl sym">;</span>
    print_string <span class="hl sym">(</span><span class="hl kwc">Buffer</span><span class="hl sym">.</span>contents buf<span class="hl sym">);</span>
    print_newline

<span class="hl kwa">let</span> pi num <span class="hl sym">=</span>
  <span class="hl kwa">let</span> init <span class="hl sym">=</span> <span class="hl kwb">unit</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> lfts k <span class="hl sym">=</span> <span class="hl kwa">let</span> x <span class="hl sym">=</span> <span class="hl num">2</span> <span class="hl sym">*</span> k <span class="hl sym">+</span> <span class="hl num">1</span> <span class="hl kwa">in</span> k<span class="hl sym">,</span> <span class="hl num">2</span> <span class="hl sym">*</span> x<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> x <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> next z <span class="hl sym">=</span> extr z <span class="hl num">3</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> safe z n <span class="hl sym">=</span> n <span class="hl sym">= (</span>extr z <span class="hl num">4</span><span class="hl sym">)</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> prod z n <span class="hl sym">=</span> comp' <span class="hl sym">(</span><span class="hl num">10</span><span class="hl sym">,</span> ~<span class="hl sym">-</span><span class="hl num">10</span> <span class="hl sym">*</span> n<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">)</span> z <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> cons z z' <span class="hl sym">=</span> comp z z' <span class="hl kwa">in</span>
    stream next safe prod cons lfts init <span class="hl num">1</span> num

<span class="hl kwa">let</span> main <span class="hl sym">() =</span>
  <span class="hl kwa">let</span> num <span class="hl sym">=</span>
    <span class="hl kwa">if</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>length <span class="hl kwc">Sys</span><span class="hl sym">.</span>argv <span class="hl sym">&lt;</span> <span class="hl num">2</span> <span class="hl kwa">then</span>
      <span class="hl num">27</span>
    <span class="hl kwa">else</span>
      <span class="hl kwa">try</span> int_of_string <span class="hl kwc">Sys</span><span class="hl sym">.</span>argv<span class="hl sym">.(</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">with</span> _ <span class="hl sym">-&gt;</span> <span class="hl num">27</span>
  <span class="hl kwa">in</span>
    pi num

<span class="hl kwa">let</span> _ <span class="hl sym">=</span> main <span class="hl sym">()</span>
