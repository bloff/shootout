<span class="hl slc">;;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; contributed by Witali Kusnezow 2008-12-02</span>

<span class="hl sym">(</span>defparameter <span class="hl sym">*</span>mutex<span class="hl sym">* (</span>sb<span class="hl sym">-</span>thread<span class="hl sym">:</span>make<span class="hl sym">-</span>mutex <span class="hl sym">:</span>name <span class="hl str">&quot;lock&quot;</span><span class="hl sym">))</span>

<span class="hl sym">(</span>defconstant  <span class="hl sym">+</span>threads<span class="hl sym">+</span> <span class="hl num">503</span><span class="hl sym">)</span>
<span class="hl sym">(</span>defparameter <span class="hl sym">*</span>counter<span class="hl sym">*</span> <span class="hl num">0</span><span class="hl sym">)</span>
<span class="hl sym">(</span>defparameter <span class="hl sym">*</span>current<span class="hl sym">*</span> <span class="hl num">0</span><span class="hl sym">)</span>
<span class="hl sym">(</span>defparameter <span class="hl sym">*</span>main<span class="hl sym">-</span>queue<span class="hl sym">* (</span>sb<span class="hl sym">-</span>thread<span class="hl sym">:</span>make<span class="hl sym">-</span>waitqueue<span class="hl sym">))</span>
<span class="hl sym">(</span>defparameter <span class="hl sym">*</span>queues<span class="hl sym">*</span>
  <span class="hl sym">(</span>make<span class="hl sym">-</span>array <span class="hl sym">+</span>threads<span class="hl sym">+</span>
              <span class="hl sym">:</span>initial<span class="hl sym">-</span>contents
              <span class="hl sym">(</span>loop for i of<span class="hl sym">-</span><span class="hl kwa">type</span> fixnum below <span class="hl sym">+</span>threads<span class="hl sym">+</span>
                 collect <span class="hl sym">(</span>sb<span class="hl sym">-</span>thread<span class="hl sym">:</span>make<span class="hl sym">-</span>waitqueue<span class="hl sym">))))</span>

<span class="hl sym">(</span>declaim <span class="hl sym">(</span><span class="hl kwa">type</span> fixnum <span class="hl sym">*</span>counter<span class="hl sym">* *</span>current<span class="hl sym">*))</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> thread<span class="hl sym">-</span>body <span class="hl sym">()</span>
  <span class="hl sym">(</span>sb<span class="hl sym">-</span>thread<span class="hl sym">:</span>with<span class="hl sym">-</span>mutex <span class="hl sym">(*</span>mutex<span class="hl sym">* :</span>wait<span class="hl sym">-</span>p t<span class="hl sym">)</span>
    <span class="hl sym">(</span>let <span class="hl sym">((</span>number <span class="hl sym">*</span>current<span class="hl sym">*)</span>
          <span class="hl sym">(</span>next <span class="hl sym">(</span>incf <span class="hl sym">*</span>current<span class="hl sym">*)))</span>
      <span class="hl sym">(</span>declare <span class="hl sym">(</span>fixnum number next<span class="hl sym">))</span>
      <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(=</span> next <span class="hl sym">+</span>threads<span class="hl sym">+) (</span><span class="hl kwa">setq</span> next <span class="hl num">0</span><span class="hl sym">))</span>
      <span class="hl sym">(</span>loop
         with <span class="hl sym">(</span>curr_queue next_queue<span class="hl sym">) =</span>
           <span class="hl sym">(</span><span class="hl kwa">list</span> <span class="hl sym">(</span>svref <span class="hl sym">*</span>queues<span class="hl sym">*</span> number<span class="hl sym">) (</span>svref <span class="hl sym">*</span>queues<span class="hl sym">*</span> next<span class="hl sym">))</span>
         do <span class="hl sym">(</span>sb<span class="hl sym">-</span>thread<span class="hl sym">:</span>condition<span class="hl sym">-</span>wait curr_queue <span class="hl sym">*</span>mutex<span class="hl sym">*)</span>
         until <span class="hl sym">(</span><span class="hl kwa">zerop</span> <span class="hl sym">*</span>counter<span class="hl sym">*)</span>
         do <span class="hl sym">(</span>decf <span class="hl sym">*</span>counter<span class="hl sym">*)  (</span>sb<span class="hl sym">-</span>thread<span class="hl sym">:</span>condition<span class="hl sym">-</span>notify next_queue<span class="hl sym">)</span>
         finally <span class="hl sym">(</span>format t <span class="hl str">&quot;~d~%&quot;</span> <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">+</span> number<span class="hl sym">))</span>
           <span class="hl sym">(</span>sb<span class="hl sym">-</span>thread<span class="hl sym">:</span>condition<span class="hl sym">-</span>notify <span class="hl sym">*</span>main<span class="hl sym">-</span>queue<span class="hl sym">*)))))</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> start <span class="hl sym">(</span>n<span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">type</span> fixnum n<span class="hl sym">))</span>
  <span class="hl sym">(</span><span class="hl kwa">setq</span> <span class="hl sym">*</span>counter<span class="hl sym">*</span> n <span class="hl sym">*</span>current<span class="hl sym">*</span> <span class="hl num">0</span><span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>threads
         <span class="hl sym">(</span>loop
            for i of<span class="hl sym">-</span><span class="hl kwa">type</span> fixnum below <span class="hl sym">+</span>threads<span class="hl sym">+</span>
            collect <span class="hl sym">(</span>sb<span class="hl sym">-</span>thread<span class="hl sym">:</span>make<span class="hl sym">-</span>thread #<span class="hl sym">'</span>thread<span class="hl sym">-</span>body<span class="hl sym">))))</span>
    <span class="hl sym">(</span>sb<span class="hl sym">-</span>thread<span class="hl sym">:</span>condition<span class="hl sym">-</span>notify <span class="hl sym">(</span>svref <span class="hl sym">*</span>queues<span class="hl sym">*</span> <span class="hl num">0</span><span class="hl sym">))</span>
    <span class="hl sym">(</span>sb<span class="hl sym">-</span>thread<span class="hl sym">:</span>with<span class="hl sym">-</span>mutex <span class="hl sym">(*</span>mutex<span class="hl sym">* :</span>wait<span class="hl sym">-</span>p t<span class="hl sym">)</span>
      <span class="hl sym">(</span>sb<span class="hl sym">-</span>thread<span class="hl sym">:</span>condition<span class="hl sym">-</span>wait <span class="hl sym">*</span>main<span class="hl sym">-</span>queue<span class="hl sym">* *</span>mutex<span class="hl sym">*))</span>
    <span class="hl sym">(</span>dolist <span class="hl sym">(</span>i threads<span class="hl sym">)</span>
      <span class="hl sym">(</span>handler<span class="hl sym">-</span>case <span class="hl sym">(</span>sb<span class="hl sym">-</span>thread<span class="hl sym">:</span>terminate<span class="hl sym">-</span>thread i<span class="hl sym">)</span>
        <span class="hl sym">(</span>sb<span class="hl sym">-</span>thread<span class="hl sym">:</span>interrupt<span class="hl sym">-</span>thread<span class="hl sym">-</span>error <span class="hl sym">()</span> nil<span class="hl sym">)))))</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> main <span class="hl sym">()</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>n <span class="hl sym">(</span>parse<span class="hl sym">-</span>integer <span class="hl sym">(</span><span class="hl kwa">or</span> <span class="hl sym">(</span><span class="hl kwa">car</span> <span class="hl sym">(</span><span class="hl kwa">last</span> #<span class="hl sym">+</span>sbcl sb<span class="hl sym">-</span>ext<span class="hl sym">:*</span>posix<span class="hl sym">-</span>argv<span class="hl sym">*</span>
                                         #<span class="hl sym">+</span>cmu  extensions<span class="hl sym">:*</span><span class="hl kwa">command</span><span class="hl sym">-</span><span class="hl kwa">line</span><span class="hl sym">-</span>strings<span class="hl sym">*</span>
                                         #<span class="hl sym">+</span>gcl  si<span class="hl sym">::*</span><span class="hl kwa">command</span><span class="hl sym">-</span>args<span class="hl sym">*))</span> <span class="hl str">&quot;1&quot;</span><span class="hl sym">))))</span>
    <span class="hl sym">(</span>start n<span class="hl sym">)))</span>
