<span class="hl com">(* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Contributed by Troestler Christophe</span>
<span class="hl com"> * Rough parallelization by Mauricio Fernandez</span>
<span class="hl com"> *)</span>

<span class="hl kwa">type</span> <span class="hl kwb">'a</span> tree <span class="hl sym">=</span> <span class="hl kwd">Empty</span> <span class="hl sym">|</span> <span class="hl kwd">Node</span> <span class="hl kwa">of</span> <span class="hl kwb">'a</span> tree <span class="hl sym">*</span> <span class="hl kwb">'a</span> <span class="hl sym">*</span> <span class="hl kwb">'a</span> tree

<span class="hl kwa">let rec</span> make i d <span class="hl sym">=</span>
<span class="hl com">(* if d = 0 then Empty *)</span>
  <span class="hl kwa">if</span> d <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">then</span> <span class="hl kwd">Node</span><span class="hl sym">(</span><span class="hl kwd">Empty</span><span class="hl sym">,</span> i<span class="hl sym">,</span> <span class="hl kwd">Empty</span><span class="hl sym">)</span>
  <span class="hl kwa">else let</span> i2 <span class="hl sym">=</span> <span class="hl num">2</span> <span class="hl sym">*</span> i <span class="hl kwa">and</span> d <span class="hl sym">=</span> d <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl kwa">in</span> <span class="hl kwd">Node</span><span class="hl sym">(</span>make <span class="hl sym">(</span>i2 <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span> d<span class="hl sym">,</span> i<span class="hl sym">,</span> make i2 d<span class="hl sym">)</span>

<span class="hl kwa">let rec</span> check <span class="hl sym">=</span> <span class="hl kwa">function</span> <span class="hl kwd">Empty</span> <span class="hl sym">-&gt;</span> <span class="hl num">0</span> <span class="hl sym">|</span> <span class="hl kwd">Node</span><span class="hl sym">(</span>l<span class="hl sym">,</span> i<span class="hl sym">,</span> r<span class="hl sym">) -&gt;</span> i <span class="hl sym">+</span> check l <span class="hl sym">-</span> check r

<span class="hl kwa">let</span> min_depth <span class="hl sym">=</span> <span class="hl num">4</span>
<span class="hl kwa">let</span> max_depth <span class="hl sym">= (</span><span class="hl kwa">let</span> n <span class="hl sym">=</span> <span class="hl kwa">try</span> int_of_string<span class="hl sym">(</span><span class="hl kwc">Array</span><span class="hl sym">.</span>get <span class="hl kwc">Sys</span><span class="hl sym">.</span>argv <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">with</span> _ <span class="hl sym">-&gt;</span> <span class="hl num">10</span> <span class="hl kwa">in</span>
                 max <span class="hl sym">(</span>min_depth <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">)</span> n<span class="hl sym">)</span>
<span class="hl kwa">let</span> stretch_depth <span class="hl sym">=</span> max_depth <span class="hl sym">+</span> <span class="hl num">1</span>

<span class="hl kwa">let</span> <span class="hl sym">() =</span>
  <span class="hl com">(* Gc.set { (Gc.get()) with Gc.minor_heap_size = 1024 * 1024; max_overhead = -1; }; *)</span>
  <span class="hl kwa">let</span> c <span class="hl sym">=</span> check <span class="hl sym">(</span>make <span class="hl num">0</span> stretch_depth<span class="hl sym">)</span> <span class="hl kwa">in</span>
  <span class="hl kwc">Printf</span><span class="hl sym">.</span>printf <span class="hl str">&quot;stretch tree of depth %i</span><span class="hl esc">\t</span> <span class="hl str">check: %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> stretch_depth c

<span class="hl kwa">let</span> long_lived_tree <span class="hl sym">=</span> make <span class="hl num">0</span> max_depth

<span class="hl kwa">let rec</span> loop_depths d <span class="hl sym">=</span>
  <span class="hl kwa">let</span> worker d <span class="hl sym">=</span>
    <span class="hl kwa">let</span> niter <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl kwa">lsl</span> <span class="hl sym">(</span>max_depth <span class="hl sym">-</span> d <span class="hl sym">+</span> min_depth<span class="hl sym">)</span> <span class="hl kwa">and</span> c <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">in</span>
    <span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl kwa">to</span> niter <span class="hl kwa">do</span> c <span class="hl sym">:= !</span>c <span class="hl sym">+</span> check<span class="hl sym">(</span>make i d<span class="hl sym">) +</span> check<span class="hl sym">(</span>make <span class="hl sym">(-</span>i<span class="hl sym">)</span> d<span class="hl sym">)</span> <span class="hl kwa">done</span><span class="hl sym">;</span>
    <span class="hl sym">(</span>niter<span class="hl sym">, !</span>c<span class="hl sym">)</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> workers <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>init <span class="hl sym">((</span>max_depth <span class="hl sym">-</span> d<span class="hl sym">) /</span> <span class="hl num">2</span> <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
                  <span class="hl sym">(</span><span class="hl kwa">fun</span> i <span class="hl sym">-&gt;</span> <span class="hl kwa">let</span> d <span class="hl sym">=</span> d <span class="hl sym">+</span> i <span class="hl sym">*</span> <span class="hl num">2</span> <span class="hl kwa">in</span> <span class="hl sym">(</span>d<span class="hl sym">,</span> invoke worker d<span class="hl sym">))</span>
  <span class="hl kwa">in</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>iter
       <span class="hl sym">(</span><span class="hl kwa">fun</span> <span class="hl sym">(</span>d<span class="hl sym">,</span> w<span class="hl sym">) -&gt;</span>
          <span class="hl kwa">let</span> niter<span class="hl sym">,</span> c <span class="hl sym">=</span> w <span class="hl sym">()</span> <span class="hl kwa">in</span>
          <span class="hl kwc">Printf</span><span class="hl sym">.</span>printf <span class="hl str">&quot;%i</span><span class="hl esc">\t</span> <span class="hl str">trees of depth %i</span><span class="hl esc">\t</span> <span class="hl str">check: %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> niter<span class="hl sym">)</span> d c<span class="hl sym">)</span>
       workers

<span class="hl com">(* function originally due to Jon D. Harrop *)</span>
<span class="hl kwa">and</span> invoke <span class="hl sym">(</span>f <span class="hl sym">:</span> <span class="hl kwb">'a</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">'b</span><span class="hl sym">)</span> x <span class="hl sym">:</span> <span class="hl kwb">unit</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">'b</span> <span class="hl sym">=</span>
  <span class="hl kwa">let</span> input<span class="hl sym">,</span> output <span class="hl sym">=</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>pipe<span class="hl sym">()</span> <span class="hl kwa">in</span>
  <span class="hl kwa">match</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>fork<span class="hl sym">()</span> <span class="hl kwa">with</span>
  <span class="hl sym">| -</span><span class="hl num">1</span> <span class="hl sym">-&gt;</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>close input<span class="hl sym">;</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>close output<span class="hl sym">; (</span><span class="hl kwa">let</span> v <span class="hl sym">=</span> f x <span class="hl kwa">in fun</span> <span class="hl sym">() -&gt;</span> v<span class="hl sym">)</span>
  <span class="hl sym">|</span> <span class="hl num">0</span> <span class="hl sym">-&gt;</span>
      <span class="hl kwc">Unix</span><span class="hl sym">.</span>close input<span class="hl sym">;</span>
      <span class="hl kwa">let</span> output <span class="hl sym">=</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>out_channel_of_descr output <span class="hl kwa">in</span>
      <span class="hl kwc">Marshal</span><span class="hl sym">.</span>to_channel output <span class="hl sym">(</span><span class="hl kwa">try</span> `<span class="hl kwd">Res</span><span class="hl sym">(</span>f x<span class="hl sym">)</span> <span class="hl kwa">with</span> e <span class="hl sym">-&gt;</span> `<span class="hl kwd">Exn</span> e<span class="hl sym">) [];</span>
      close_out output<span class="hl sym">;</span>
      exit <span class="hl num">0</span>
  <span class="hl sym">|</span> pid <span class="hl sym">-&gt;</span>
      <span class="hl kwc">Unix</span><span class="hl sym">.</span>close output<span class="hl sym">;</span>
      <span class="hl kwa">let</span> input <span class="hl sym">=</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>in_channel_of_descr input <span class="hl kwa">in</span>
      <span class="hl kwa">fun</span> <span class="hl sym">() -&gt;</span>
        <span class="hl kwa">let</span> v <span class="hl sym">=</span> <span class="hl kwc">Marshal</span><span class="hl sym">.</span>from_channel input <span class="hl kwa">in</span>
        ignore <span class="hl sym">(</span><span class="hl kwc">Unix</span><span class="hl sym">.</span>waitpid <span class="hl sym">[]</span> pid<span class="hl sym">);</span>
        close_in input<span class="hl sym">;</span>
        <span class="hl kwa">match</span> v <span class="hl kwa">with</span>
        <span class="hl sym">|</span> `<span class="hl kwd">Res</span> x <span class="hl sym">-&gt;</span> x
        <span class="hl sym">|</span> `<span class="hl kwd">Exn</span> e <span class="hl sym">-&gt;</span> raise e

<span class="hl kwa">let</span> <span class="hl sym">() =</span>
  flush stdout<span class="hl sym">;</span>
  loop_depths min_depth<span class="hl sym">;</span>
  <span class="hl kwc">Printf</span><span class="hl sym">.</span>printf <span class="hl str">&quot;long lived tree of depth %i</span><span class="hl esc">\t</span> <span class="hl str">check: %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
    max_depth <span class="hl sym">(</span>check long_lived_tree<span class="hl sym">)</span>

