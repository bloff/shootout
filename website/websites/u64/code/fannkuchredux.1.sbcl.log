
Sat, 02 Oct 2010 13:43:10 GMT

MAKE:
cp: `fannkuchredux.sbcl' and `./fannkuchredux.sbcl' are the same file
SBCL built with: /usr/local/bin/sbcl --userinit /dev/null --batch --eval '(load "fannkuchredux.sbcl_compile")'
### START fannkuchredux.sbcl_compile
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(handler-bind ((sb-ext:defconstant-uneql      (lambda (c) (abort c))))      (load (compile-file "fannkuchredux.sbcl" ))) (save-lisp-and-die "sbcl.core" :purify t)
### END fannkuchredux.sbcl_compile


; compiling file "/home/dunham/shootout/bench/fannkuchredux/fannkuchredux.sbcl" (written 01 OCT 2010 07:22:16 PM):
; compiling (DEFPACKAGE #:FANNKUCH-REDUX ...)
; compiling (IN-PACKAGE :FANNKUCH-REDUX)
; compiling (DEFUN MAKE-FACTS-VECTOR ...)
; file: /home/dunham/shootout/bench/fannkuchredux/fannkuchredux.sbcl
; in: DEFUN MAKE-FACTS-VECTOR
;     (1+ FANNKUCH-REDUX::SEQ-LENGTH)
; ==>
;   (+ FANNKUCH-REDUX::SEQ-LENGTH 1)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.

;     (* FANNKUCH-REDUX::R FANNKUCH-REDUX::I)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   convert x*2^k to shift
; due to type uncertainty:
;   The first argument is a NUMBER, not a INTEGER.

;     (1+ FANNKUCH-REDUX::SEQ-LENGTH)
; ==>
;   (+ FANNKUCH-REDUX::SEQ-LENGTH 1)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

;     (LOOP :WITH FANNKUCH-REDUX::R = 1
;           :FOR FANNKUCH-REDUX::I FANNKUCH-REDUX::FROM 1 FANNKUCH-REDUX::TO FANNKUCH-REDUX::SEQ-LENGTH
;           :COLLECT ...)
; --> BLOCK LET LET SB-LOOP::WITH-LOOP-LIST-COLLECTION-HEAD LET* 
; --> SB-LOOP::LOOP-BODY TAGBODY WHEN IF 
; ==>
;   (> FANNKUCH-REDUX::I #:LOOP-LIMIT-0)
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 1), not a FIXNUM.
;       The second argument is a REAL, not a FIXNUM.

;     (* FANNKUCH-REDUX::R FANNKUCH-REDUX::I)
; 
; note: forced to do GENERIC-* (cost 30)
;       unable to do inline fixnum arithmetic (cost 4) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The second argument is a (INTEGER 1), not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline (signed-byte 64) arithmetic (cost 5) because:
;       The first argument is a NUMBER, not a (SIGNED-BYTE 64).
;       The second argument is a (INTEGER 1), not a (SIGNED-BYTE 64).
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES (SIGNED-BYTE 64)
;                                                                &REST T).
;       etc.

;     (LOOP :WITH FANNKUCH-REDUX::R = 1
;           :FOR FANNKUCH-REDUX::I FANNKUCH-REDUX::FROM 1 FANNKUCH-REDUX::TO FANNKUCH-REDUX::SEQ-LENGTH
;           :COLLECT ...)
; --> BLOCK LET LET SB-LOOP::WITH-LOOP-LIST-COLLECTION-HEAD LET* 
; --> SB-LOOP::LOOP-BODY TAGBODY SB-LOOP::LOOP-REALLY-DESETQ SETQ THE 1+ 
; ==>
;   (+ FANNKUCH-REDUX::I 1)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (INTEGER 1), not a FIXNUM.
;       The result is a (VALUES (INTEGER 2) &OPTIONAL), not a (VALUES FIXNUM
;                                                                     &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (INTEGER 1), not a FIXNUM.
;       The result is a (VALUES (INTEGER 2) &OPTIONAL), not a (VALUES FIXNUM
;                                                                     &REST T).
;       etc.

; compiling (DEFMACRO WITH-VARS-BOUND ...)
; compiling (DEFMACRO WITH-PERMUTATIONS ...)
; file: /home/dunham/shootout/bench/fannkuchredux/fannkuchredux.sbcl
; in: DEFMACRO WITH-PERMUTATIONS
;     (- FANNKUCH-REDUX::SEQ-LENGTH FANNKUCH-REDUX::DEPTH)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The second argument is a REAL, not a FLOAT.

;     (LOOP :REPEAT (- FANNKUCH-REDUX::SEQ-LENGTH FANNKUCH-REDUX::DEPTH)
;           :COLLECT (GENSYM))
; --> BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; --> TRUNCATE LET 
; ==>
;   (SB-KERNEL:%UNARY-TRUNCATE SB-C::X)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a SINGLE-FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a DOUBLE-FLOAT.

; --> BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; --> TRUNCATE LET VALUES 
; ==>
;   (- SB-C::X SB-C::RES)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.

; --> BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; --> FUNCTION IF AND IF NOT IF ZEROP 
; ==>
;   (= REM 0)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.
; 
; note: unable to open code because: The operands might not be the same type.

;     (= FANNKUCH-REDUX::DEPTH (1- FANNKUCH-REDUX::SEQ-LENGTH))
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.
; 
; note: unable to open code because: The operands might not be the same type.

;     (1+ FANNKUCH-REDUX::DEPTH)
; ==>
;   (+ FANNKUCH-REDUX::DEPTH 1)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.

;     (- FANNKUCH-REDUX::SEQ-LENGTH FANNKUCH-REDUX::DEPTH 1)
; --> - 
; ==>
;   (- FANNKUCH-REDUX::SEQ-LENGTH FANNKUCH-REDUX::DEPTH)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The second argument is a REAL, not a FLOAT.

; ==>
;   (- (- FANNKUCH-REDUX::SEQ-LENGTH FANNKUCH-REDUX::DEPTH) 1)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.

; --> - 
; ==>
;   (- FANNKUCH-REDUX::SEQ-LENGTH FANNKUCH-REDUX::DEPTH)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The second argument is a REAL, not a FLOAT.

; ==>
;   (- (- FANNKUCH-REDUX::SEQ-LENGTH FANNKUCH-REDUX::DEPTH) 1)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.

;     (1+ FANNKUCH-REDUX::DEPTH)
; ==>
;   (+ FANNKUCH-REDUX::DEPTH 1)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.

;     (SUBSEQ FANNKUCH-REDUX::UPPER-SEQ-VARS (LENGTH FANNKUCH-REDUX::MY-SEQ-VARS))
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a VECTOR.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a LIST.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a SB-KERNEL:EXTENDED-SEQUENCE.

;     (- FANNKUCH-REDUX::SEQ-LENGTH FANNKUCH-REDUX::DEPTH)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The second argument is a REAL, not a FLOAT.

;     (> (- FANNKUCH-REDUX::SEQ-LENGTH FANNKUCH-REDUX::DEPTH) 1)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.

;     (- FANNKUCH-REDUX::SEQ-LENGTH FANNKUCH-REDUX::DEPTH)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The second argument is a REAL, not a FLOAT.

;     (LOOP :REPEAT (- FANNKUCH-REDUX::SEQ-LENGTH FANNKUCH-REDUX::DEPTH)
;           :COLLECT (GENSYM))
; --> BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; --> FUNCTION IF AND IF AND THE IF PLUSP 
; ==>
;   (> NUMBER 0)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.

;     (>= FANNKUCH-REDUX::DEPTH FANNKUCH-REDUX::SEQ-LENGTH)
; --> OR LET > IF 
; ==>
;   (> SB-C::X SB-C::Y)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.

; --> OR LET IF OR THE = IF 
; ==>
;   (= SB-C::X SB-C::Y)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.
; 
; note: unable to open code because: The operands might not be the same type.

;     (LABELS ((FANNKUCH-REDUX::BUILD-LOOP
;                  (FANNKUCH-REDUX::DEPTH FANNKUCH-REDUX::UPPER-SEQ-VARS)
;                (IF (>= FANNKUCH-REDUX::DEPTH FANNKUCH-REDUX::SEQ-LENGTH)
;                    `(FANNKUCH-REDUX::WITH-VARS-BOUND #
;                       #
;                       #
;                       ,@FANNKUCH-REDUX::BODY)
;                    (LET* #
;                      #))))
;       `(LET ((,COUNT ,FANNKUCH-REDUX::PERM-COUNT))
;          (DECLARE (TYPE (INTEGER ,0 ,#) ,COUNT))
;          (BLOCK ,FANNKUCH-REDUX::OUTER-TAG
;            ,(FANNKUCH-REDUX::BUILD-LOOP 0
;              (LOOP :FOR FANNKUCH-REDUX::I :FROM 0 :BELOW FANNKUCH-REDUX::SEQ-LENGTH
;                    :COLLECT FANNKUCH-REDUX::I)))))
; 
; note: Return type not fixed values, so can't use known return convention:
;   *

;     (>= FANNKUCH-REDUX::DEPTH FANNKUCH-REDUX::SEQ-LENGTH)
; --> OR LET > IF 
; ==>
;   (> SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a REAL, not a FIXNUM.

;     (- FANNKUCH-REDUX::SEQ-LENGTH FANNKUCH-REDUX::DEPTH)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The second argument is a REAL, not a FIXNUM.
;       The result is a (VALUES REAL &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline (signed-byte 64) arithmetic (cost 5) because:
;       The second argument is a REAL, not a (SIGNED-BYTE 64).
;       The result is a (VALUES REAL &OPTIONAL), not a (VALUES (SIGNED-BYTE 64)
;                                                              &REST T).
;       etc.

;     (LOOP :REPEAT (- FANNKUCH-REDUX::SEQ-LENGTH FANNKUCH-REDUX::DEPTH)
;           :COLLECT (GENSYM))
; --> BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; --> TRUNCATE LET VALUES 
; ==>
;   (- SB-C::X SB-C::RES)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a REAL, not a FIXNUM.
;       The second argument is a INTEGER, not a FIXNUM.
;       The result is a (VALUES REAL &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline (signed-byte 64) arithmetic (cost 5) because:
;       The first argument is a REAL, not a (SIGNED-BYTE 64).
;       The second argument is a INTEGER, not a (SIGNED-BYTE 64).
;       The result is a (VALUES REAL &OPTIONAL), not a (VALUES (SIGNED-BYTE 64)
;                                                              &REST T).
;       etc.

; --> BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; --> FUNCTION IF AND IF AND THE IF PLUSP 
; ==>
;   (> NUMBER 0)
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a REAL, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a REAL, not a FIXNUM.
;       etc.

; --> BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; --> FUNCTION IF VALUES 
; ==>
;   (+ SB-KERNEL::TRU 1)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       The result is a (VALUES INTEGER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       The result is a (VALUES INTEGER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

; --> BLOCK LET SB-LOOP::WITH-LOOP-LIST-COLLECTION-HEAD LET* SB-LOOP::LOOP-BODY 
; --> TAGBODY IF <= IF 
; ==>
;   (> SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

;     (- FANNKUCH-REDUX::SEQ-LENGTH FANNKUCH-REDUX::DEPTH 1)
; --> - 
; ==>
;   (- FANNKUCH-REDUX::SEQ-LENGTH FANNKUCH-REDUX::DEPTH)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The second argument is a REAL, not a FIXNUM.
;       The result is a (VALUES REAL &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline (signed-byte 64) arithmetic (cost 5) because:
;       The second argument is a REAL, not a (SIGNED-BYTE 64).
;       The result is a (VALUES REAL &OPTIONAL), not a (VALUES (SIGNED-BYTE 64)
;                                                              &REST T).
;       etc.

; ==>
;   (- (- FANNKUCH-REDUX::SEQ-LENGTH FANNKUCH-REDUX::DEPTH) 1)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a REAL, not a FIXNUM.
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a REAL, not a FIXNUM.
;       etc.

; --> - 
; ==>
;   (- FANNKUCH-REDUX::SEQ-LENGTH FANNKUCH-REDUX::DEPTH)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The second argument is a REAL, not a FIXNUM.
;       The result is a (VALUES REAL &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline (signed-byte 64) arithmetic (cost 5) because:
;       The second argument is a REAL, not a (SIGNED-BYTE 64).
;       The result is a (VALUES REAL &OPTIONAL), not a (VALUES (SIGNED-BYTE 64)
;                                                              &REST T).
;       etc.

; ==>
;   (- (- FANNKUCH-REDUX::SEQ-LENGTH FANNKUCH-REDUX::DEPTH) 1)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a REAL, not a FIXNUM.
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a REAL, not a FIXNUM.
;       etc.

;     (1+ FANNKUCH-REDUX::DEPTH)
; ==>
;   (+ FANNKUCH-REDUX::DEPTH 1)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a REAL, not a FIXNUM.
;       The result is a (VALUES REAL &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a REAL, not a FIXNUM.
;       The result is a (VALUES REAL &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a REAL, not a FIXNUM.
;       The result is a (VALUES REAL &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a REAL, not a FIXNUM.
;       The result is a (VALUES REAL &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

;     (- FANNKUCH-REDUX::SEQ-LENGTH FANNKUCH-REDUX::DEPTH)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The second argument is a REAL, not a FIXNUM.
;       The result is a (VALUES REAL &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline (signed-byte 64) arithmetic (cost 5) because:
;       The second argument is a REAL, not a (SIGNED-BYTE 64).
;       The result is a (VALUES REAL &OPTIONAL), not a (VALUES (SIGNED-BYTE 64)
;                                                              &REST T).
;       etc.

;     (> (- FANNKUCH-REDUX::SEQ-LENGTH FANNKUCH-REDUX::DEPTH) 1)
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a REAL, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a REAL, not a FIXNUM.
;       etc.

;     (- FANNKUCH-REDUX::SEQ-LENGTH FANNKUCH-REDUX::DEPTH)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The second argument is a REAL, not a FIXNUM.
;       The result is a (VALUES REAL &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline (signed-byte 64) arithmetic (cost 5) because:
;       The second argument is a REAL, not a (SIGNED-BYTE 64).
;       The result is a (VALUES REAL &OPTIONAL), not a (VALUES (SIGNED-BYTE 64)
;                                                              &REST T).
;       etc.

;     (LOOP :REPEAT (- FANNKUCH-REDUX::SEQ-LENGTH FANNKUCH-REDUX::DEPTH)
;           :COLLECT (GENSYM))
; --> BLOCK LET SB-LOOP::WITH-LOOP-LIST-COLLECTION-HEAD LET* SB-LOOP::LOOP-BODY 
; --> TAGBODY IF DECF LET* 
; ==>
;   (- #:LOOP-REPEAT-48 #:G52)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (INTEGER 1), not a FIXNUM.
;       The result is a (VALUES UNSIGNED-BYTE &OPTIONAL), not a (VALUES FIXNUM
;                                                                       &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (INTEGER 1), not a FIXNUM.
;       The result is a (VALUES UNSIGNED-BYTE &OPTIONAL), not a (VALUES FIXNUM
;                                                                       &REST T).
;       etc.

; compiling (DEFMACRO WITH-FLIPS-COUNT ...)
; compiling (DEFSTRUCT ATOMIC ...)
; compiling (DEFMACRO DEFFANNKUCH ...)
; file: /home/dunham/shootout/bench/fannkuchredux/fannkuchredux.sbcl
; in: DEFMACRO DEFFANNKUCH
;     (1- FANNKUCH-REDUX::WORKERS)
; ==>
;   (- FANNKUCH-REDUX::WORKERS 1)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.

;     (MIN (ELT FANNKUCH-REDUX::FACTS FANNKUCH-REDUX::SEQ-LENGTH) 400)
; --> LET LET IF <= OR LET < IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.

; --> LET LET IF <= OR LET IF OR THE = IF 
; ==>
;   (= SB-C::X SB-C::Y)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.
; 
; note: unable to open code because: The operands might not be the same type.

;     (LOOP :FOR FANNKUCH-REDUX::I :FROM 0 :BELOW FANNKUCH-REDUX::SEQ-LENGTH
;           :COLLECT (GENSYM))
; --> BLOCK LET SB-LOOP::WITH-LOOP-LIST-COLLECTION-HEAD LET* SB-LOOP::LOOP-BODY 
; --> TAGBODY WHEN IF >= OR LET IF OR THE = IF 
; ==>
;   (= SB-C::X SB-C::Y)
; 
; note: unable to open code because: The operands might not be the same type.

;     (LOOP :FOR FANNKUCH-REDUX::WRK-INDEX :FROM 0 :BELOW FANNKUCH-REDUX::WORKERS
;           :COLLECT `(SB-THREAD:MAKE-THREAD
;                      (FANNKUCH-REDUX::MAKE-WORKER ,FANNKUCH-REDUX::WRK-INDEX)))
; --> BLOCK LET SB-LOOP::WITH-LOOP-LIST-COLLECTION-HEAD LET* SB-LOOP::LOOP-BODY 
; --> TAGBODY WHEN IF >= OR LET IF OR THE = IF 
; ==>
;   (= SB-C::X SB-C::Y)
; 
; note: unable to open code because: The operands might not be the same type.

;     (MIN (ELT FANNKUCH-REDUX::FACTS FANNKUCH-REDUX::SEQ-LENGTH) 400)
; --> LET LET IF <= OR LET < IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a REAL, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a REAL, not a FIXNUM.
;       etc.

;     (LOOP :FOR FANNKUCH-REDUX::I :FROM 0 :BELOW FANNKUCH-REDUX::SEQ-LENGTH
;           :COLLECT (GENSYM))
; --> BLOCK LET SB-LOOP::WITH-LOOP-LIST-COLLECTION-HEAD LET* SB-LOOP::LOOP-BODY 
; --> TAGBODY WHEN IF >= OR LET > IF 
; ==>
;   (> SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       The second argument is a REAL, not a FIXNUM.

; --> BLOCK LET SB-LOOP::WITH-LOOP-LIST-COLLECTION-HEAD LET* SB-LOOP::LOOP-BODY 
; --> TAGBODY SB-LOOP::LOOP-REALLY-DESETQ SETQ THE 1+ 
; ==>
;   (+ FANNKUCH-REDUX::I 1)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       The result is a (VALUES (INTEGER 1) &OPTIONAL), not a (VALUES FIXNUM
;                                                                     &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       The result is a (VALUES (INTEGER 1) &OPTIONAL), not a (VALUES FIXNUM
;                                                                     &REST T).
;       etc.

;     (1- FANNKUCH-REDUX::WORKERS)
; ==>
;   (- FANNKUCH-REDUX::WORKERS 1)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

;     (LOOP :FOR FANNKUCH-REDUX::WRK-INDEX :FROM 0 :BELOW FANNKUCH-REDUX::WORKERS
;           :COLLECT `(SB-THREAD:MAKE-THREAD
;                      (FANNKUCH-REDUX::MAKE-WORKER ,FANNKUCH-REDUX::WRK-INDEX)))
; --> BLOCK LET SB-LOOP::WITH-LOOP-LIST-COLLECTION-HEAD LET* SB-LOOP::LOOP-BODY 
; --> TAGBODY WHEN IF >= OR LET > IF 
; ==>
;   (> SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       The second argument is a REAL, not a FIXNUM.

; --> BLOCK LET SB-LOOP::WITH-LOOP-LIST-COLLECTION-HEAD LET* SB-LOOP::LOOP-BODY 
; --> TAGBODY SB-LOOP::LOOP-REALLY-DESETQ SETQ THE 1+ 
; ==>
;   (+ FANNKUCH-REDUX::WRK-INDEX 1)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       The result is a (VALUES (INTEGER 1) &OPTIONAL), not a (VALUES FIXNUM
;                                                                     &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       The result is a (VALUES (INTEGER 1) &OPTIONAL), not a (VALUES FIXNUM
;                                                                     &REST T).
;       etc.

; compiling (DEFUN MAIN ...)
; compiling (IN-PACKAGE :CL-USER)
; compiling (DEFUN MAIN ...); 
; compilation unit finished
;   printed 60 notes


; /home/dunham/benchmarksgame_onecore/fannkuchredux/tmp/fannkuchredux.fasl written
; compilation finished in 0:00:00.167
[undoing binding stack and other enclosing state... done]
[saving current Lisp image into sbcl.core:
writing 6352 bytes from the read-only space at 0x20000000
writing 4064 bytes from the static space at 0x20100000
writing 45039616 bytes from the dynamic space at 0x1000000000
done]
### START fannkuchredux.sbcl_run
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(main) (quit)
### END fannkuchredux.sbcl_run

1.16s to complete and log all make actions

COMMAND LINE:
/usr/local/bin/sbcl  --noinform --core sbcl.core --userinit /dev/null --load fannkuchredux.sbcl_run 12

PROGRAM OUTPUT:
3968050
Pfannkuchen(12) = 65
