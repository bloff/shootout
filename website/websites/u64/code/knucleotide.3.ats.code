<span class="hl com">(*</span>
<span class="hl com">** The Computer Language Benchmarks Game</span>
<span class="hl com">** http://shootout.alioth.debian.org/</span>
<span class="hl com">**</span>
<span class="hl com">** contributed by Hongwei Xi</span>
<span class="hl com">**</span>
<span class="hl com">** compilation command:</span>
<span class="hl com">**   atscc -D_GNU_SOURCE -D_ATS_MULTITHREAD -D_ATS_GCATS -O3 -o k-nucleotide3_smp -lpthread k-nucleotide3_smp.dats</span>
<span class="hl com">*)</span>

<span class="hl com">(* ****** ****** *)</span>

staload <span class="hl str">&quot;libc/SATS/stdio.sats&quot;</span>
staload <span class="hl str">&quot;libc/SATS/stdlib.sats&quot;</span>
staload <span class="hl str">&quot;libc/SATS/string.sats&quot;</span>
staload _<span class="hl com">(*anonymous*)</span> <span class="hl sym">=</span> <span class="hl str">&quot;prelude/DATS/array.dats&quot;</span>
staload _<span class="hl com">(*anonymous*)</span> <span class="hl sym">=</span> <span class="hl str">&quot;prelude/DATS/list_vt.dats&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

staload H <span class="hl sym">=</span> <span class="hl str">&quot;libats/SATS/hashtable_chain.sats&quot;</span>
staload _<span class="hl com">(*anon*)</span> <span class="hl sym">=</span> <span class="hl str">&quot;libats/DATS/hashtable_chain.dats&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl sym">%{</span>^
<span class="hl kwa">typedef</span> char <span class="hl sym">*</span>symbol_t <span class="hl sym">;</span>
<span class="hl sym">%}</span> <span class="hl slc">// end of [%{^]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">abstype</span> dna_t <span class="hl slc">// boxed type</span>
abst&#64;ype symbol_t <span class="hl sym">=</span> $extype <span class="hl str">&quot;symbol_t&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl sym">%{</span>^

ats_void_type print_symbol
  <span class="hl sym">(</span>symbol_t sym<span class="hl sym">,</span> ats_size_type len<span class="hl sym">) {</span>
  <span class="hl kwa">while</span> <span class="hl sym">(</span>len <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">) {</span> fputc <span class="hl sym">( *</span>sym<span class="hl sym">,</span> stdout<span class="hl sym">) ; --</span>len <span class="hl sym">; ++</span>sym <span class="hl sym">; }</span>
  return <span class="hl sym">;</span>
<span class="hl sym">}</span> <span class="hl slc">// end of [print_symbol]</span>

<span class="hl sym">%}</span> <span class="hl slc">// end of [%{^]</span>

<span class="hl kwa">extern fun</span> print_symbol
  <span class="hl sym">(</span>sym<span class="hl sym">:</span> symbol_t<span class="hl sym">,</span> len<span class="hl sym">:</span> size_t<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl str">&quot;print_symbol&quot;</span>
<span class="hl slc">// end of [print_symbol]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl sym">%{</span>^

size_t the_symlen <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl sym">;</span>
ats_size_type symlen_get <span class="hl sym">() {</span> return the_symlen <span class="hl sym">; }</span>
ats_void_type symlen_set
  <span class="hl sym">(</span>ats_size_type len<span class="hl sym">) {</span> the_symlen <span class="hl sym">=</span> len <span class="hl sym">;</span> return <span class="hl sym">; }</span>
<span class="hl slc">// end of [symlen_set]</span>

<span class="hl sym">%}</span> <span class="hl slc">// end of [%{^]</span>
<span class="hl kwa">extern fun</span> symlen_get <span class="hl sym">():&lt;&gt;</span> size_t <span class="hl sym">=</span> <span class="hl str">&quot;symlen_get&quot;</span>
<span class="hl kwa">extern fun</span> symlen_set <span class="hl sym">(</span>len<span class="hl sym">:</span> size_t<span class="hl sym">):&lt;&gt;</span> void <span class="hl sym">=</span> <span class="hl str">&quot;symlen_set&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl sym">%{</span>^

<span class="hl slc">// a commonly used simple hash function</span>

static <span class="hl slc">// inline</span>
ats_ulint_type hash_symbol_len <span class="hl sym">(</span>
  symbol_t sym<span class="hl sym">,</span> ats_size_type len
<span class="hl sym">) {</span>
  unsigned long int hash_val <span class="hl sym">=</span> <span class="hl num">31415927UL</span> <span class="hl sym">;</span>
  <span class="hl kwa">while</span> <span class="hl sym">(</span>len <span class="hl sym">&gt;=</span> <span class="hl num">4</span><span class="hl sym">) {</span>
    hash_val <span class="hl sym">+=</span> hash_val <span class="hl sym">*</span> <span class="hl num">33</span> <span class="hl sym">;</span>
    hash_val <span class="hl sym">+=</span> sym<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] &lt;&lt;</span> <span class="hl num">24</span> <span class="hl sym">;</span>
    hash_val <span class="hl sym">+=</span> sym<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">] &lt;&lt;</span> <span class="hl num">16</span> <span class="hl sym">;</span>
    hash_val <span class="hl sym">+=</span> sym<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">] &lt;&lt;</span>  <span class="hl num">8</span> <span class="hl sym">;</span>
    hash_val <span class="hl sym">+=</span> sym<span class="hl sym">[</span><span class="hl num">3</span><span class="hl sym">] ;</span>
    sym <span class="hl sym">+=</span> <span class="hl num">4</span> <span class="hl sym">;</span> len <span class="hl sym">-=</span> <span class="hl num">4</span> <span class="hl sym">;</span>
  <span class="hl sym">}</span> <span class="hl slc">// end of [while]</span>
  <span class="hl kwa">if</span> <span class="hl sym">(</span>len <span class="hl sym">&gt;=</span> <span class="hl num">2</span><span class="hl sym">) {</span>
    hash_val <span class="hl sym">=</span> hash_val <span class="hl sym">*</span> <span class="hl num">33</span> <span class="hl sym">+ (</span>sym<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] &lt;&lt;</span> <span class="hl num">8</span><span class="hl sym">) +</span> sym<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">] ;</span>
    sym <span class="hl sym">+=</span> <span class="hl num">2</span> <span class="hl sym">;</span> len <span class="hl sym">-=</span> <span class="hl num">2</span> <span class="hl sym">;</span>
  <span class="hl sym">}</span> <span class="hl slc">// end of [if]</span>
  <span class="hl kwa">if</span> <span class="hl sym">(</span>len <span class="hl sym">&gt;=</span> <span class="hl num">1</span><span class="hl sym">) {</span>
    hash_val <span class="hl sym">=</span> hash_val <span class="hl sym">*</span> <span class="hl num">33</span> <span class="hl sym">+</span> sym<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] ;</span>
  <span class="hl sym">}</span> <span class="hl slc">// end of [while]</span>
  return hash_val <span class="hl sym">;</span>
<span class="hl sym">}</span> <span class="hl slc">// end of [hash_symbol_len]</span>

<span class="hl sym">%}</span> <span class="hl slc">// end of [%{^]</span>

<span class="hl kwa">extern fun</span> hash_symbol_len
  <span class="hl sym">(</span>sym<span class="hl sym">:</span> symbol_t<span class="hl sym">,</span> len<span class="hl sym">:</span> size_t<span class="hl sym">):&lt;&gt;</span> ulint <span class="hl sym">=</span> <span class="hl str">&quot;hash_symbol_len&quot;</span>
<span class="hl slc">// end of [hash_symbol]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">implement</span> $H<span class="hl sym">.</span>hash_key<span class="hl sym">&lt;</span>symbol_t<span class="hl sym">&gt;</span>
  <span class="hl sym">(</span>x<span class="hl sym">,</span> _<span class="hl sym">) =</span> hash_symbol_len <span class="hl sym">(</span>x<span class="hl sym">,</span> symlen_get <span class="hl sym">())</span>
<span class="hl slc">// end of [implement]</span>

<span class="hl kwa">implement</span>
$H<span class="hl sym">.</span>equal_key_key<span class="hl sym">&lt;</span>symbol_t<span class="hl sym">&gt; (</span>x1<span class="hl sym">,</span> x2<span class="hl sym">,</span> _<span class="hl sym">) =</span> <span class="hl kwa">let</span>
  <span class="hl kwa">extern</span> castfn __cast <span class="hl sym">(</span>x<span class="hl sym">:</span> symbol_t<span class="hl sym">):&lt;&gt;</span> string
  <span class="hl kwa">val</span> x1 <span class="hl sym">=</span> __cast x1 <span class="hl kwa">and</span> x2 <span class="hl sym">=</span> __cast x2
  <span class="hl kwa">val</span> k <span class="hl sym">=</span> symlen_get <span class="hl sym">()</span>
  <span class="hl kwa">val</span> k <span class="hl sym">=</span> size1_of_size <span class="hl sym">(</span>k<span class="hl sym">)</span>
<span class="hl kwa">in</span>
  strncmp <span class="hl sym">(</span>x1<span class="hl sym">,</span> x2<span class="hl sym">,</span> k<span class="hl sym">) =</span> <span class="hl num">0</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [implement]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">viewtypedef</span> symtbl <span class="hl sym">(</span>l<span class="hl sym">:</span>addr<span class="hl sym">) =</span> $H<span class="hl sym">.</span>HASHTBLptr <span class="hl sym">(</span>symbol_t<span class="hl sym">,</span> int<span class="hl sym">,</span> l<span class="hl sym">)</span>
<span class="hl kwa">viewtypedef</span> symtbl0 <span class="hl sym">= [</span>l<span class="hl sym">:</span>agez<span class="hl sym">]</span> symtbl l
<span class="hl kwa">viewtypedef</span> symtbl1 <span class="hl sym">= [</span>l<span class="hl sym">:</span>addr <span class="hl sym">|</span> l <span class="hl sym">&gt;</span> null<span class="hl sym">]</span> symtbl l

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">extern fun</span> succ_symbol
  <span class="hl sym">(</span>x<span class="hl sym">:</span> symbol_t<span class="hl sym">):</span> symbol_t <span class="hl sym">=</span> <span class="hl str">&quot;#atspre_psucc&quot;</span>
<span class="hl kwa">extern fun</span> add_symbol_size
  <span class="hl sym">(</span>x<span class="hl sym">:</span> symbol_t<span class="hl sym">,</span> n<span class="hl sym">:</span> size_t<span class="hl sym">):</span> symbol_t <span class="hl sym">=</span> <span class="hl str">&quot;#atspre_padd_size&quot;</span>

<span class="hl kwa">fn</span> dna_count_one <span class="hl sym">{</span>l<span class="hl sym">:</span>agz<span class="hl sym">} {</span>n1<span class="hl sym">,</span>n2<span class="hl sym">:</span>nat<span class="hl sym">}</span>
  <span class="hl sym">(</span>tbl<span class="hl sym">: !</span>symtbl l<span class="hl sym">,</span> dna<span class="hl sym">:</span> dna_t<span class="hl sym">,</span> n1<span class="hl sym">:</span> size_t n1<span class="hl sym">,</span> n2<span class="hl sym">:</span> size_t n2<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">var</span> n1<span class="hl sym">:</span> size_t <span class="hl sym">=</span> n1
  <span class="hl kwa">val</span> sym0<span class="hl sym">:</span> symbol_t <span class="hl sym">=</span>
    __cast <span class="hl sym">(</span>dna<span class="hl sym">)</span> <span class="hl kwa">where</span> <span class="hl sym">{</span> <span class="hl kwa">extern</span> castfn __cast <span class="hl sym">(</span>x<span class="hl sym">:</span> dna_t<span class="hl sym">):</span> symbol_t <span class="hl sym">}</span>
  <span class="hl slc">// end of [var]</span>
  <span class="hl kwa">var</span> sym<span class="hl sym">:</span> symbol_t <span class="hl sym">=</span> add_symbol_size <span class="hl sym">(</span>sym0<span class="hl sym">,</span> n1<span class="hl sym">)</span>
<span class="hl kwa">in</span>
  <span class="hl kwa">while</span> <span class="hl sym">(</span>n1 <span class="hl sym">&lt;</span> n2<span class="hl sym">)</span> <span class="hl kwa">let</span>
    <span class="hl kwa">val</span> <span class="hl sym">[</span>l_itm<span class="hl sym">:</span>addr<span class="hl sym">]</span> p_itm <span class="hl sym">=</span> $H<span class="hl sym">.</span>hashtbl_search_ref<span class="hl sym">&lt;</span>symbol_t<span class="hl sym">,</span>int<span class="hl sym">&gt; (</span>tbl<span class="hl sym">,</span> sym<span class="hl sym">)</span>
    <span class="hl kwa">val</span> <span class="hl sym">() =</span> <span class="hl kwa">if</span> p_itm <span class="hl sym">&lt;&gt;</span> null <span class="hl kwa">then let</span>
      <span class="hl kwa">prval</span> <span class="hl sym">(</span>fpf<span class="hl sym">,</span> pf<span class="hl sym">) =</span> __assert <span class="hl sym">()</span> <span class="hl kwa">where</span> <span class="hl sym">{</span>
        <span class="hl kwa">extern prfun</span> __assert <span class="hl sym">(): (</span>int&#64;l_itm <span class="hl sym">-&lt;</span>prf<span class="hl sym">&gt;</span> void<span class="hl sym">,</span> int&#64;l_itm<span class="hl sym">)</span>
      <span class="hl sym">}</span> <span class="hl slc">// end of [prval]</span>
      <span class="hl kwa">val</span> <span class="hl sym">() = !</span>p_itm <span class="hl sym">:= !</span>p_itm <span class="hl sym">+</span> <span class="hl num">1</span>
      <span class="hl kwa">prval</span> <span class="hl sym">() =</span> fpf <span class="hl sym">(</span>pf<span class="hl sym">)</span>
    <span class="hl kwa">in</span>
      <span class="hl slc">// nothing</span>
    <span class="hl kwa">end else</span> $H<span class="hl sym">.</span>hashtbl_insert <span class="hl sym">(</span>tbl<span class="hl sym">,</span> sym<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">)</span>
  <span class="hl kwa">in</span>
    n1 <span class="hl sym">:=</span> n1 <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span> sym <span class="hl sym">:=</span> succ_symbol sym
  <span class="hl kwa">end</span> <span class="hl slc">// end of [while]</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [dna_count_one]</span>

<span class="hl com">(* ****** ****** *)</span>

staload <span class="hl str">&quot;libats/SATS/parworkshop.sats&quot;</span>
staload _ <span class="hl sym">=</span> <span class="hl str">&quot;libats/DATS/parworkshop.dats&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">viewtypedef</span> work <span class="hl sym">= () -&lt;</span>lincloptr1<span class="hl sym">&gt;</span> void
<span class="hl kwa">viewtypedef</span> WSptr <span class="hl sym">(</span>l<span class="hl sym">:</span>addr<span class="hl sym">) =</span> WORKSHOPptr <span class="hl sym">(</span>work<span class="hl sym">,</span> l<span class="hl sym">)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">fun</span> fwork <span class="hl sym">{</span>l<span class="hl sym">:</span>addr<span class="hl sym">}</span>
  <span class="hl sym">(</span>ws<span class="hl sym">: !</span>WSptr l<span class="hl sym">,</span> wk<span class="hl sym">: &amp;</span>work <span class="hl sym">&gt;&gt;</span> work?<span class="hl sym">):</span> int <span class="hl sym">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> wk <span class="hl sym">=</span> wk
  <span class="hl kwa">val</span> pfun <span class="hl sym">=</span> __cast <span class="hl sym">(</span>wk<span class="hl sym">)</span> <span class="hl kwa">where</span> <span class="hl sym">{</span>
    <span class="hl kwa">extern</span> castfn __cast
      <span class="hl sym">(</span>wk<span class="hl sym">: !</span>work <span class="hl sym">&gt;&gt;</span> opt <span class="hl sym">(</span>work<span class="hl sym">,</span> i <span class="hl sym">&gt;=</span> <span class="hl num">1</span><span class="hl sym">)):</span> <span class="hl dir">#[i:nat] uintptr i</span>
  <span class="hl sym">}</span> <span class="hl slc">// end of [val]</span>
<span class="hl kwa">in</span>
  <span class="hl kwa">if</span> pfun <span class="hl sym">&gt;= (</span>uintptr1_of_uint1<span class="hl sym">)</span><span class="hl num">1U</span> <span class="hl kwa">then let</span>
    <span class="hl kwa">prval</span> <span class="hl sym">() =</span> opt_unsome <span class="hl sym">{</span>work<span class="hl sym">} (</span>wk<span class="hl sym">)</span>
    <span class="hl kwa">val</span> <span class="hl sym">() =</span> wk <span class="hl sym">()</span>
    <span class="hl kwa">val</span> <span class="hl sym">() =</span> cloptr_free <span class="hl sym">(</span>wk<span class="hl sym">)</span>
  <span class="hl kwa">in</span>
    <span class="hl num">1</span> <span class="hl slc">// the worker is to continue</span>
  <span class="hl kwa">end else let</span>
    <span class="hl kwa">val</span> u <span class="hl sym">=</span> uint1_of_uintptr1 <span class="hl sym">(</span>pfun<span class="hl sym">)</span>
    <span class="hl kwa">val</span> i <span class="hl sym">=</span> int_of_uint <span class="hl sym">(</span>u<span class="hl sym">)</span>
    <span class="hl kwa">prval</span> <span class="hl sym">() =</span> opt_unnone <span class="hl sym">{</span>work<span class="hl sym">} (</span>wk<span class="hl sym">)</span>
    <span class="hl kwa">prval</span> <span class="hl sym">() =</span> cleanup_top <span class="hl sym">{</span>work<span class="hl sym">} (</span>wk<span class="hl sym">)</span>
  <span class="hl kwa">in</span>
    ~i <span class="hl slc">// the worker is to pause or quit</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [if]</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [fwork]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">val</span> eqfn <span class="hl sym">=</span> $extval <span class="hl sym">(</span>$H<span class="hl sym">.</span>eqfn symbol_t<span class="hl sym">,</span> <span class="hl str">&quot;0&quot;</span><span class="hl sym">)</span>
<span class="hl kwa">val</span> fhash <span class="hl sym">=</span> $extval <span class="hl sym">(</span>$H<span class="hl sym">.</span>hash symbol_t<span class="hl sym">,</span> <span class="hl str">&quot;0&quot;</span><span class="hl sym">)</span>
<span class="hl kwa">macdef</span> hastbl_make <span class="hl sym">() =</span> $H<span class="hl sym">.</span>hashtbl_make_hint <span class="hl sym">(</span>fhash<span class="hl sym">,</span> eqfn<span class="hl sym">,</span> <span class="hl num">24593</span><span class="hl sym">)</span>

<span class="hl kwa">fn</span> dna_count <span class="hl sym">{</span>lws<span class="hl sym">:</span>agz<span class="hl sym">} {</span>n<span class="hl sym">:</span>pos<span class="hl sym">;</span>k<span class="hl sym">:</span>pos<span class="hl sym">} {</span>N<span class="hl sym">:</span>pos<span class="hl sym">} (</span>
    ws<span class="hl sym">: !</span>WSptr lws
  <span class="hl sym">,</span> dna<span class="hl sym">:</span> dna_t
  <span class="hl sym">,</span> n<span class="hl sym">:</span> size_t n
  <span class="hl sym">,</span> k<span class="hl sym">:</span> size_t k
  <span class="hl sym">,</span> N<span class="hl sym">:</span> int N <span class="hl slc">// nthread</span>
  <span class="hl sym">) :</span> List_vt <span class="hl sym">(</span>symtbl1<span class="hl sym">) =</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> symlen_set <span class="hl sym">(</span>k<span class="hl sym">)</span>
  <span class="hl kwa">val</span> INC <span class="hl sym">= ((</span>n <span class="hl sym">+</span> N <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">) /</span> N<span class="hl sym">):</span> size_t
  <span class="hl kwa">val</span> <span class="hl sym">[</span>inc<span class="hl sym">:</span>int<span class="hl sym">]</span> INC <span class="hl sym">=</span> size1_of_size <span class="hl sym">(</span>INC<span class="hl sym">)</span>
  <span class="hl kwa">prval</span> <span class="hl sym">() =</span> __assert <span class="hl sym">()</span> <span class="hl kwa">where</span> <span class="hl sym">{</span>
    <span class="hl kwa">extern prfun</span> __assert <span class="hl sym">(): [</span>inc <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">]</span> void
  <span class="hl sym">}</span>
  <span class="hl kwa">fun</span> split <span class="hl sym">{</span>n1<span class="hl sym">,</span>n2<span class="hl sym">:</span>nat<span class="hl sym">} (</span>
      ws<span class="hl sym">: !</span>WSptr lws<span class="hl sym">,</span> n1<span class="hl sym">:</span> size_t n1<span class="hl sym">,</span> n2<span class="hl sym">:</span> size_t n2
    <span class="hl sym">) :&lt;</span>cloref1<span class="hl sym">&gt;</span> List_vt <span class="hl sym">(</span>symtbl1<span class="hl sym">) =</span>
    <span class="hl kwa">if</span> n1 <span class="hl sym">&lt;</span> n2 <span class="hl kwa">then let</span>
      <span class="hl kwa">val</span> n11 <span class="hl sym">=</span> min <span class="hl sym">(</span>n1 <span class="hl sym">+</span> INC<span class="hl sym">,</span> n2<span class="hl sym">)</span>
      <span class="hl kwa">val</span> <span class="hl sym">[</span>l<span class="hl sym">:</span>addr<span class="hl sym">]</span> tbl <span class="hl sym">=</span> hastbl_make <span class="hl sym">()</span>
      <span class="hl kwa">extern</span> castfn __ref <span class="hl sym">(</span>x<span class="hl sym">: !</span>symtbl l<span class="hl sym">):&lt;&gt;</span> symtbl l
      <span class="hl kwa">val</span> tbl1 <span class="hl sym">=</span> __ref <span class="hl sym">(</span>tbl<span class="hl sym">)</span>
      <span class="hl kwa">val</span> f <span class="hl sym">=</span> <span class="hl kwa">lam</span> <span class="hl sym">():</span> void <span class="hl sym">=&lt;</span>lincloptr1<span class="hl sym">&gt; ()</span> <span class="hl kwa">where</span> <span class="hl sym">{</span>
        <span class="hl kwa">val</span> <span class="hl sym">() =</span> dna_count_one <span class="hl sym">(</span>tbl1<span class="hl sym">,</span> dna<span class="hl sym">,</span> n1<span class="hl sym">,</span> n11<span class="hl sym">)</span>
        <span class="hl kwa">prval</span> <span class="hl sym">() =</span> __unref tbl1 <span class="hl kwa">where</span> <span class="hl sym">{</span> <span class="hl kwa">extern prfun</span> __unref <span class="hl sym">(</span>x<span class="hl sym">:</span> symtbl l<span class="hl sym">):</span> void <span class="hl sym">}</span>
      <span class="hl sym">}</span> <span class="hl slc">// end of [val]</span>
      <span class="hl kwa">val</span> <span class="hl sym">() =</span> workshop_insert_work <span class="hl sym">(</span>ws<span class="hl sym">,</span> f<span class="hl sym">)</span>
    <span class="hl kwa">in</span>
      list_vt_cons <span class="hl sym">(</span>tbl<span class="hl sym">,</span> split <span class="hl sym">(</span>ws<span class="hl sym">,</span> n11<span class="hl sym">,</span> n2<span class="hl sym">))</span>
    <span class="hl kwa">end else</span> list_vt_nil <span class="hl sym">()</span>
  <span class="hl slc">// end of [split]</span>
  <span class="hl kwa">val</span> res <span class="hl sym">=</span> split <span class="hl sym">(</span>ws<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> n<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> workshop_wait_blocked_all <span class="hl sym">(</span>ws<span class="hl sym">)</span>
<span class="hl kwa">in</span>
  res
<span class="hl kwa">end</span> <span class="hl slc">// end of [dna_count]</span>

<span class="hl kwa">extern fun</span> symtbls_merge <span class="hl sym">(</span>xs<span class="hl sym">:</span> List_vt symtbl1<span class="hl sym">):</span> symtbl0
<span class="hl kwa">implement</span> symtbls_merge <span class="hl sym">(</span>xs<span class="hl sym">) =</span> <span class="hl kwa">let</span>
  <span class="hl kwa">fun</span> loop <span class="hl sym">{</span>l<span class="hl sym">:</span>addr<span class="hl sym">} {</span>l<span class="hl sym">:</span>agz<span class="hl sym">}</span>
    <span class="hl sym">(</span>x<span class="hl sym">: !</span>symtbl l<span class="hl sym">,</span> xs<span class="hl sym">:</span> List_vt symtbl1<span class="hl sym">):</span> void <span class="hl sym">=</span>
    <span class="hl kwa">case</span><span class="hl sym">+</span> xs <span class="hl kwa">of</span>
    <span class="hl sym">|</span> ~list_vt_cons <span class="hl sym">(</span>x1<span class="hl sym">,</span> xs<span class="hl sym">) =&gt;</span> <span class="hl kwa">let</span>
        <span class="hl kwa">val</span> xp <span class="hl sym">=</span> $H<span class="hl sym">.</span>ptr_of_HASHTBLptr <span class="hl sym">(</span>x<span class="hl sym">)</span>
        <span class="hl kwa">var</span> <span class="hl sym">!</span>p_clo <span class="hl sym">=</span> &#64;<span class="hl kwa">lam</span>
          <span class="hl sym">(</span>pf<span class="hl sym">: !</span>unit_v <span class="hl sym">|</span> k<span class="hl sym">:</span> symbol_t<span class="hl sym">,</span> i<span class="hl sym">: &amp;</span>int<span class="hl sym">):</span> void <span class="hl sym">=&lt;</span>clo<span class="hl sym">&gt;</span> <span class="hl kwa">let</span>
          <span class="hl kwa">val</span> x <span class="hl sym">=</span> __ref <span class="hl sym">(</span>xp<span class="hl sym">)</span> <span class="hl kwa">where</span> <span class="hl sym">{</span>
            <span class="hl kwa">extern</span> castfn __ref <span class="hl sym">(</span>x<span class="hl sym">:</span> ptr l<span class="hl sym">):&lt;&gt;</span> symtbl l
          <span class="hl sym">}</span>
          <span class="hl kwa">val</span> <span class="hl sym">[</span>l_itm<span class="hl sym">:</span>addr<span class="hl sym">]</span> p_itm <span class="hl sym">=</span> $H<span class="hl sym">.</span>hashtbl_search_ref<span class="hl sym">&lt;</span>symbol_t<span class="hl sym">,</span>int<span class="hl sym">&gt; (</span>x<span class="hl sym">,</span> k<span class="hl sym">)</span>
          <span class="hl kwa">val</span> <span class="hl sym">() =</span> <span class="hl kwa">if</span> p_itm <span class="hl sym">&lt;&gt;</span> null <span class="hl kwa">then let</span>
            <span class="hl kwa">prval</span> <span class="hl sym">(</span>fpf<span class="hl sym">,</span> pf<span class="hl sym">) =</span> __assert <span class="hl sym">()</span> <span class="hl kwa">where</span> <span class="hl sym">{</span>
              <span class="hl kwa">extern prfun</span> __assert <span class="hl sym">(): (</span>int&#64;l_itm <span class="hl sym">-&lt;</span>prf<span class="hl sym">&gt;</span> void<span class="hl sym">,</span> int&#64;l_itm<span class="hl sym">)</span>
            <span class="hl sym">}</span> <span class="hl slc">// end of [prval]</span>
            <span class="hl kwa">val</span> <span class="hl sym">() = !</span>p_itm <span class="hl sym">:= !</span>p_itm <span class="hl sym">+</span> i
            <span class="hl kwa">prval</span> <span class="hl sym">() =</span> fpf <span class="hl sym">(</span>pf<span class="hl sym">)</span>
          <span class="hl kwa">in</span>
            <span class="hl slc">// nothing</span>
          <span class="hl kwa">end else</span> $H<span class="hl sym">.</span>hashtbl_insert <span class="hl sym">(</span>x<span class="hl sym">,</span> k<span class="hl sym">,</span> i<span class="hl sym">)</span>
          <span class="hl kwa">prval</span> <span class="hl sym">() =</span> __unref <span class="hl sym">(</span>x<span class="hl sym">)</span> <span class="hl kwa">where</span> <span class="hl sym">{</span>
            <span class="hl kwa">extern prfun</span> __unref <span class="hl sym">(</span>x<span class="hl sym">:</span> symtbl l<span class="hl sym">):</span> void
          <span class="hl sym">}</span>
        <span class="hl kwa">in</span>
          <span class="hl slc">// nothing</span>
        <span class="hl kwa">end</span> <span class="hl slc">// end of [var]</span>
        <span class="hl kwa">prval</span> pf <span class="hl sym">=</span> unit_v <span class="hl sym">()</span>
        <span class="hl kwa">val</span> <span class="hl sym">() =</span> $H<span class="hl sym">.</span>hashtbl_foreach_clo <span class="hl sym">{</span>unit_v<span class="hl sym">} (</span>pf <span class="hl sym">|</span> x1<span class="hl sym">, !</span>p_clo<span class="hl sym">)</span>
        <span class="hl kwa">prval</span> unit_v <span class="hl sym">() =</span> pf
        <span class="hl kwa">val</span> <span class="hl sym">() =</span> $H<span class="hl sym">.</span>hashtbl_free <span class="hl sym">(</span>x1<span class="hl sym">)</span>
      <span class="hl kwa">in</span>
        loop <span class="hl sym">(</span>x<span class="hl sym">,</span> xs<span class="hl sym">)</span>
      <span class="hl kwa">end</span> <span class="hl slc">// end of [list_vt_cons]</span>
    <span class="hl sym">|</span> ~list_vt_nil <span class="hl sym">() =&gt; ()</span>
  <span class="hl slc">// end of [loop]</span>
<span class="hl kwa">in</span>
  <span class="hl kwa">case</span><span class="hl sym">+</span> xs <span class="hl kwa">of</span>
  <span class="hl sym">|</span> ~list_vt_cons <span class="hl sym">(</span>x<span class="hl sym">,</span> xs<span class="hl sym">) =&gt;</span>
      <span class="hl kwa">let val</span> <span class="hl sym">() =</span> loop <span class="hl sym">(</span>x<span class="hl sym">,</span> xs<span class="hl sym">)</span> <span class="hl kwa">in</span> x <span class="hl kwa">end</span>
    <span class="hl slc">// end of [list_vt_cons]</span>
  <span class="hl sym">|</span> ~list_vt_nil <span class="hl sym">() =&gt;</span> __cast <span class="hl sym">(</span>null<span class="hl sym">)</span> <span class="hl kwa">where</span> <span class="hl sym">{</span>
      <span class="hl kwa">extern</span> castfn __cast <span class="hl sym">(</span>x<span class="hl sym">:</span> ptr null<span class="hl sym">):&lt;&gt;</span> $H<span class="hl sym">.</span>HASHTBLptr <span class="hl sym">(</span>symbol_t<span class="hl sym">,</span> int<span class="hl sym">,</span> null<span class="hl sym">)</span>
    <span class="hl sym">}</span> <span class="hl slc">// end of [list_vt_nil]</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [symtbls_merge]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">typedef</span> symflt <span class="hl sym">=</span> &#64;<span class="hl sym">(</span>symbol_t<span class="hl sym">,</span> float<span class="hl sym">)</span>

<span class="hl kwa">fn</span> compare_symflt_symflt <span class="hl slc">// [&gt;=]</span>
  <span class="hl sym">(</span>x1<span class="hl sym">: &amp;</span>symflt<span class="hl sym">,</span> x2<span class="hl sym">: &amp;</span>symflt<span class="hl sym">):&lt;&gt;</span> Sgn <span class="hl sym">=</span> compare_float_float <span class="hl sym">(</span>x2<span class="hl sym">.</span><span class="hl dir">1, x1.1)</span>
<span class="hl slc">// end of [compare_symflt_symflt]</span>

<span class="hl kwa">viewtypedef</span> frqlst <span class="hl sym">=</span> List_vt symflt

<span class="hl com">(* ****** ****** *)</span>

<span class="hl slc">// print and free</span>
<span class="hl kwa">fun</span> print_free_frqlst
  <span class="hl sym">(</span>kfs<span class="hl sym">:</span> frqlst<span class="hl sym">,</span> len<span class="hl sym">:</span> size_t<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl kwa">begin case</span><span class="hl sym">+</span> kfs <span class="hl kwa">of</span>
  <span class="hl sym">|</span> ~list_vt_cons <span class="hl sym">(</span>kf<span class="hl sym">,</span> kfs<span class="hl sym">) =&gt;</span> <span class="hl kwa">begin</span> print_symbol <span class="hl sym">(</span>kf<span class="hl num">.0</span><span class="hl sym">,</span> len<span class="hl sym">);</span>
       printf <span class="hl sym">(</span><span class="hl str">&quot; %.3f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> &#64;<span class="hl sym">(</span>double_of kf<span class="hl num">.1</span><span class="hl sym">));</span> print_free_frqlst <span class="hl sym">(</span>kfs<span class="hl sym">,</span> len<span class="hl sym">)</span>
    <span class="hl kwa">end</span> <span class="hl slc">// end of [FRQLSTcons]</span>
  <span class="hl sym">|</span> ~list_vt_nil <span class="hl sym">() =&gt; ()</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [print_free_frqlst]</span>

<span class="hl kwa">fn</span> write_frequencies
  <span class="hl sym">{</span>lws<span class="hl sym">:</span>agz<span class="hl sym">} {</span>n<span class="hl sym">,</span>k<span class="hl sym">:</span>pos <span class="hl sym">|</span> k <span class="hl sym">&lt;=</span> n<span class="hl sym">} {</span>N<span class="hl sym">:</span>pos<span class="hl sym">} (</span>
    ws<span class="hl sym">: !</span>WSptr lws<span class="hl sym">,</span> dna<span class="hl sym">:</span> dna_t<span class="hl sym">,</span> n<span class="hl sym">:</span> size_t n<span class="hl sym">,</span> k<span class="hl sym">:</span> size_t k<span class="hl sym">,</span> N<span class="hl sym">:</span> int N
  <span class="hl sym">) :</span> void <span class="hl sym">=</span> <span class="hl kwa">let</span>
<span class="hl slc">//</span>
  <span class="hl kwa">val</span> tbls <span class="hl sym">=</span> dna_count <span class="hl sym">(</span>ws<span class="hl sym">,</span> dna<span class="hl sym">,</span> n<span class="hl sym">-</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> k<span class="hl sym">,</span> N<span class="hl sym">)</span>
  <span class="hl kwa">val</span> tbl <span class="hl sym">=</span> symtbls_merge <span class="hl sym">(</span>tbls<span class="hl sym">)</span>
  <span class="hl kwa">val</span> ptbl <span class="hl sym">=</span> $H<span class="hl sym">.</span>ptr_of_HASHTBLptr tbl
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> assert_errmsg <span class="hl sym">(</span>ptbl <span class="hl sym">&lt;&gt;</span> null<span class="hl sym">,</span> <span class="hl str">&quot;: &quot;</span> <span class="hl sym">+</span> <span class="hl dir">#LOCATION)</span>
<span class="hl slc">//</span>
  <span class="hl kwa">var</span> total<span class="hl sym">:</span> int <span class="hl sym">=</span> <span class="hl num">0</span>
  <span class="hl kwa">var</span> <span class="hl sym">!</span>p_clo <span class="hl sym">=</span> &#64;<span class="hl kwa">lam</span> <span class="hl sym">(</span>pf<span class="hl sym">: !</span>int&#64;total <span class="hl sym">|</span> k<span class="hl sym">:</span> symbol_t<span class="hl sym">,</span> i<span class="hl sym">: &amp;</span>int<span class="hl sym">):</span> void <span class="hl sym">=&lt;</span>clo<span class="hl sym">&gt;</span>
    <span class="hl sym">(</span>total <span class="hl sym">:=</span> total <span class="hl sym">+</span> i<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> $H<span class="hl sym">.</span>hashtbl_foreach_clo <span class="hl sym">{</span>int&#64;total<span class="hl sym">} (</span>view&#64; total <span class="hl sym">|</span> tbl<span class="hl sym">, !</span>p_clo<span class="hl sym">)</span>
  <span class="hl kwa">val</span> ftotal <span class="hl sym">=</span> float_of total
  <span class="hl kwa">var</span> frqs<span class="hl sym">:</span> frqlst <span class="hl sym">=</span> list_vt_nil <span class="hl sym">()</span>
  <span class="hl kwa">var</span> <span class="hl sym">!</span>p_clo <span class="hl sym">=</span> &#64;<span class="hl kwa">lam</span>
    <span class="hl sym">(</span>pf<span class="hl sym">: !</span>frqlst &#64; frqs <span class="hl sym">|</span> k<span class="hl sym">:</span> symbol_t<span class="hl sym">,</span> cnt<span class="hl sym">: &amp;</span>int<span class="hl sym">):</span> void <span class="hl sym">=&lt;</span>clo<span class="hl sym">&gt;</span> <span class="hl kwa">let</span>
    <span class="hl kwa">val</span> f <span class="hl sym">= (</span>float_of <span class="hl num">100</span><span class="hl sym">) *</span> float_of cnt <span class="hl sym">/</span> ftotal<span class="hl sym">;</span> <span class="hl kwa">val</span> kf <span class="hl sym">=</span> &#64;<span class="hl sym">(</span>k<span class="hl sym">,</span> f<span class="hl sym">)</span> <span class="hl kwa">in</span>
    frqs <span class="hl sym">:=</span> list_vt_cons <span class="hl sym">(</span>kf<span class="hl sym">,</span> frqs<span class="hl sym">)</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [f]</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> $H<span class="hl sym">.</span>hashtbl_foreach_clo <span class="hl sym">{</span>frqlst&#64;frqs<span class="hl sym">} (</span>view&#64; frqs <span class="hl sym">|</span> tbl<span class="hl sym">, !</span>p_clo<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> $H<span class="hl sym">.</span>hashtbl_free <span class="hl sym">(</span>tbl<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> list_vt_quicksort <span class="hl sym">(</span>frqs<span class="hl sym">,</span> compare_symflt_symflt<span class="hl sym">)</span>
<span class="hl kwa">in</span>
  print_free_frqlst <span class="hl sym">(</span>frqs<span class="hl sym">,</span> symlen_get <span class="hl sym">())</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [write_frequencies]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">fn</span> write_count <span class="hl sym">{</span>lws<span class="hl sym">:</span>agz<span class="hl sym">} {</span>n<span class="hl sym">,</span>k<span class="hl sym">:</span>pos<span class="hl sym">} {</span>N<span class="hl sym">:</span>pos<span class="hl sym">} (</span>
    ws<span class="hl sym">: !</span>WSptr lws<span class="hl sym">,</span> dna<span class="hl sym">:</span> dna_t<span class="hl sym">,</span> n<span class="hl sym">:</span> size_t n<span class="hl sym">,</span> seq<span class="hl sym">:</span> string k<span class="hl sym">,</span> N<span class="hl sym">:</span> int N
  <span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> k <span class="hl sym">=</span> string1_length seq
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> assert_errmsg <span class="hl sym">(</span>k <span class="hl sym">&lt;=</span> n<span class="hl sym">,</span> <span class="hl str">&quot;: &quot;</span> <span class="hl sym">+</span> <span class="hl dir">#LOCATION)</span>
<span class="hl slc">//</span>
  <span class="hl kwa">val</span> tbls <span class="hl sym">=</span> dna_count <span class="hl sym">(</span>ws<span class="hl sym">,</span> dna<span class="hl sym">,</span> n<span class="hl sym">-</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> k<span class="hl sym">,</span> N<span class="hl sym">)</span>
  <span class="hl kwa">val</span> seq1 <span class="hl sym">=</span> __cast seq <span class="hl kwa">where</span> <span class="hl sym">{</span>
    <span class="hl kwa">extern</span> castfn __cast <span class="hl sym">(</span>x<span class="hl sym">:</span> string<span class="hl sym">):</span> symbol_t
  <span class="hl sym">}</span> <span class="hl slc">// end of [var]</span>
  <span class="hl kwa">val</span> cnt <span class="hl sym">=</span> loop <span class="hl sym">(</span>tbls<span class="hl sym">,</span> seq1<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">where</span> <span class="hl sym">{</span>
    <span class="hl kwa">fun</span> loop <span class="hl sym">(</span>xs<span class="hl sym">:</span> List_vt symtbl1<span class="hl sym">,</span> seq<span class="hl sym">:</span> symbol_t<span class="hl sym">,</span> cnt<span class="hl sym">:</span> int<span class="hl sym">):</span> int <span class="hl sym">=</span>
      <span class="hl kwa">case</span><span class="hl sym">+</span> xs <span class="hl kwa">of</span>
      <span class="hl sym">|</span> ~list_vt_cons <span class="hl sym">(</span>x<span class="hl sym">,</span> xs<span class="hl sym">) =&gt;</span> <span class="hl kwa">let</span>
          <span class="hl kwa">var</span> res <span class="hl sym">:</span> int
          <span class="hl kwa">val</span> ans <span class="hl sym">=</span> $H<span class="hl sym">.</span>hashtbl_search <span class="hl sym">(</span>x<span class="hl sym">,</span> seq<span class="hl sym">,</span> res<span class="hl sym">)</span>
          <span class="hl kwa">val</span> <span class="hl sym">() =</span> $H<span class="hl sym">.</span>hashtbl_free <span class="hl sym">(</span>x<span class="hl sym">)</span>
          <span class="hl kwa">val</span> <span class="hl sym">() =</span> <span class="hl kwa">if</span> ans <span class="hl kwa">then let</span>
            <span class="hl kwa">prval</span> <span class="hl sym">() =</span> opt_unsome <span class="hl sym">{</span>int<span class="hl sym">} (</span>res<span class="hl sym">)</span> <span class="hl kwa">in</span> <span class="hl com">(*none*)</span>
          <span class="hl kwa">end else let</span>
            <span class="hl kwa">prval</span> <span class="hl sym">() =</span> opt_unnone <span class="hl sym">{</span>int<span class="hl sym">} (</span>res<span class="hl sym">)</span> <span class="hl kwa">in</span> res <span class="hl sym">:=</span> <span class="hl num">0</span>
          <span class="hl kwa">end</span> <span class="hl sym">:</span> void <span class="hl slc">// end of [val]</span>
        <span class="hl kwa">in</span>
          loop <span class="hl sym">(</span>xs<span class="hl sym">,</span> seq<span class="hl sym">,</span> cnt <span class="hl sym">+</span> res<span class="hl sym">)</span>
        <span class="hl kwa">end</span> <span class="hl slc">// end of [list_vt_cons]</span>
      <span class="hl sym">|</span> ~list_vt_nil <span class="hl sym">() =&gt;</span> cnt
    <span class="hl slc">// end of [loop]</span>
  <span class="hl sym">}</span> <span class="hl slc">// end of [cnt]</span>
<span class="hl slc">//</span>
<span class="hl kwa">in</span>
  printf <span class="hl sym">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\t</span><span class="hl str">%s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> &#64;<span class="hl sym">(</span>cnt<span class="hl sym">,</span> seq<span class="hl sym">))</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [write_count]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">extern fun</span> getline <span class="hl sym">():</span> string <span class="hl sym">=</span> <span class="hl str">&quot;__getline&quot;</span>
<span class="hl kwa">extern fun</span> getrest <span class="hl sym">(</span>sz<span class="hl sym">: &amp;</span>size_t? <span class="hl sym">&gt;&gt;</span> size_t n<span class="hl sym">):</span> <span class="hl dir">#[n:nat] string n =</span> <span class="hl dstr">&quot;__getrest&quot;</span><span class="hl dir"></span>

<span class="hl sym">%{</span>$

<span class="hl dir">#define LINEBUFSZ 1024</span>
char theLineBuffer<span class="hl sym">[</span>LINEBUFSZ<span class="hl sym">] ;</span>
ats_ptr_type __getline <span class="hl sym">() {</span>
  fgets <span class="hl sym">(</span>theLineBuffer<span class="hl sym">,</span> LINEBUFSZ<span class="hl sym">,</span> stdin<span class="hl sym">) ;</span> return theLineBuffer <span class="hl sym">;</span>
<span class="hl sym">}</span> <span class="hl com">/* end of [getline] */</span>

<span class="hl dir">#define RESTBUFSZ (128 * 1024 * 1024)</span>
char theRestBuffer<span class="hl sym">[</span>RESTBUFSZ<span class="hl sym">] ;</span>

ats_ptr_type __getrest <span class="hl sym">(</span>ats_ref_type p_n<span class="hl sym">) {</span>
  int c <span class="hl sym">;</span> size_t i <span class="hl sym">;</span> char <span class="hl sym">*</span>s <span class="hl sym">;</span>
  s <span class="hl sym">=</span> theRestBuffer <span class="hl sym">;</span> i <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl sym">;</span>
  <span class="hl kwa">while</span> <span class="hl sym">((</span>c <span class="hl sym">=</span> fgetc<span class="hl sym">(</span>stdin<span class="hl sym">)) !=</span> EOF<span class="hl sym">) {</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>c <span class="hl sym">!=</span> '\n'<span class="hl sym">) { *</span>s<span class="hl sym">++ =</span> toupper<span class="hl sym">(</span>c<span class="hl sym">) ;</span> i<span class="hl sym">++ ; }</span>
  <span class="hl sym">}</span>
  <span class="hl sym">*</span>s <span class="hl sym">=</span> '\000' <span class="hl sym">; *((</span>size_t*)p_n<span class="hl sym">) =</span> i <span class="hl sym">;</span>
  <span class="hl kwa">if</span> <span class="hl sym">(</span>i <span class="hl sym">&gt;=</span> RESTBUFSZ<span class="hl sym">) {</span>
    fprintf <span class="hl sym">(</span>stderr<span class="hl sym">,</span> <span class="hl str">&quot;exit(ATS): too much data for processing</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">) ;</span> exit<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">) ;</span>
  <span class="hl sym">}</span>
  return theRestBuffer <span class="hl sym">;</span>
<span class="hl sym">}</span> <span class="hl com">/* end of [__getrest] */</span>

<span class="hl sym">%}</span> <span class="hl slc">// end of [%{^]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">fun</span> is_three <span class="hl sym">(</span>s<span class="hl sym">:</span> string<span class="hl sym">):</span> bool <span class="hl sym">=</span>
  <span class="hl kwa">if</span> strncmp <span class="hl sym">(</span>s<span class="hl sym">,</span> <span class="hl str">&quot;&gt;THREE&quot;</span><span class="hl sym">,</span> <span class="hl num">6</span><span class="hl sym">) =</span> <span class="hl num">0</span> <span class="hl kwa">then</span> true <span class="hl kwa">else</span> false
<span class="hl slc">// end of [is_three]</span>

<span class="hl com">(* ****** ****** *)</span>

staload <span class="hl str">&quot;libc/SATS/sched.sats&quot;</span>
staload TYPES <span class="hl sym">=</span> <span class="hl str">&quot;libc/sys/SATS/types.sats&quot;</span>
<span class="hl kwa">macdef</span> pid_t <span class="hl sym">=</span> $TYPES<span class="hl sym">.</span>pid_of_int

<span class="hl kwa">extern fun</span> ncore_get <span class="hl sym">():</span> int
<span class="hl kwa">implement</span> ncore_get <span class="hl sym">() =</span> <span class="hl kwa">let</span>
  <span class="hl kwa">var</span> cs<span class="hl sym">:</span> cpu_set0_t <span class="hl slc">// uninitialized</span>
  <span class="hl kwa">prval</span> <span class="hl sym">() =</span> cpusetinit <span class="hl sym">(</span>cs<span class="hl sym">)</span> <span class="hl slc">// not a real initialization</span>
  <span class="hl kwa">stavar</span> nset<span class="hl sym">:</span> int
  <span class="hl kwa">val</span> nset <span class="hl sym">=</span> cpusetsize_get <span class="hl sym">(</span>cs<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> assert_errmsg <span class="hl sym">(</span>nset <span class="hl sym">&gt;=</span> <span class="hl num">2</span><span class="hl sym">,</span> <span class="hl str">&quot;: &quot;</span> <span class="hl sym">+</span> <span class="hl dir">#LOCATION)</span>
  <span class="hl kwa">val</span> err <span class="hl sym">=</span> sched_getaffinity <span class="hl sym">((</span>pid_t<span class="hl sym">)</span><span class="hl num">0</span><span class="hl sym">,</span> nset<span class="hl sym">,</span> cs<span class="hl sym">)</span>
  <span class="hl kwa">var</span> count<span class="hl sym">:</span> Nat <span class="hl sym">=</span> <span class="hl num">0</span>
  <span class="hl kwa">var</span> i<span class="hl sym">:</span> natLte <span class="hl num">16</span> <span class="hl slc">// uninitialized</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> <span class="hl kwa">for</span><span class="hl sym">* (</span>cs<span class="hl sym">:</span> cpu_set_t nset<span class="hl sym">) =&gt;</span>
    <span class="hl sym">(</span>i <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">16</span><span class="hl sym">;</span> i <span class="hl sym">:=</span> i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>CPU_ISSET <span class="hl sym">(</span>i<span class="hl sym">,</span> cs<span class="hl sym">) &gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">then</span> count <span class="hl sym">:=</span> count <span class="hl sym">+</span> <span class="hl num">1</span>
  <span class="hl slc">// end of [val]</span>
<span class="hl kwa">in</span>
  count
<span class="hl kwa">end</span> <span class="hl slc">// end of [ncore_get]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">extern fun</span> dna_of_string <span class="hl sym">(</span>s<span class="hl sym">:</span> string<span class="hl sym">):</span> dna_t <span class="hl sym">=</span> <span class="hl str">&quot;dna_of_string&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl dir">#define QSZ 1024</span>

<span class="hl kwa">implement</span> main <span class="hl sym">(</span>argc<span class="hl sym">,</span> argv<span class="hl sym">) =</span> <span class="hl kwa">let</span>
<span class="hl slc">//</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> gc_chunk_count_limit_set <span class="hl sym">(</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> <span class="hl num">15</span><span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> gc_chunk_count_limit_max_set <span class="hl sym">(</span>~<span class="hl num">1</span><span class="hl sym">)</span> <span class="hl slc">// no max</span>
<span class="hl slc">//</span>
  <span class="hl kwa">val</span> ncore <span class="hl sym">=</span> ncore_get <span class="hl sym">()</span>
  <span class="hl kwa">val</span> nworker <span class="hl sym">=</span>
    <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>argc <span class="hl sym">&gt;=</span> <span class="hl num">2</span><span class="hl sym">)</span> <span class="hl kwa">then</span> int_of argv<span class="hl sym">.[</span><span class="hl num">1</span><span class="hl sym">]</span> <span class="hl kwa">else</span> <span class="hl num">0</span><span class="hl sym">):</span> int
  <span class="hl kwa">val</span> nworker <span class="hl sym">:</span> int <span class="hl sym">=</span> <span class="hl kwa">if</span> nworker <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span> nworker <span class="hl kwa">else</span> ncore
  <span class="hl kwa">val</span> nworker <span class="hl sym">=</span> int1_of_int <span class="hl sym">(</span>nworker<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> assert_errmsg <span class="hl sym">(</span>nworker <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl str">&quot;: &quot;</span> <span class="hl sym">+</span> <span class="hl dir">#LOCATION)</span>
<span class="hl slc">//</span>
  <span class="hl kwa">fun</span> dna_three_get
    <span class="hl sym">(</span>n<span class="hl sym">: &amp;</span>size_t? <span class="hl sym">&gt;&gt;</span> size_t n<span class="hl sym">):</span> <span class="hl dir">#[n:nat] string n = let</span>
    <span class="hl kwa">val</span> s <span class="hl sym">=</span> getline <span class="hl sym">();</span> <span class="hl kwa">val</span> is3 <span class="hl sym">=</span> is_three <span class="hl sym">(</span>s<span class="hl sym">)</span>
  <span class="hl kwa">in</span>
    <span class="hl kwa">if</span> is3 <span class="hl kwa">then</span> getrest <span class="hl sym">(</span>n<span class="hl sym">)</span> <span class="hl kwa">else</span> dna_three_get <span class="hl sym">(</span>n<span class="hl sym">)</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [dna_three_get]</span>
  <span class="hl kwa">var</span> n<span class="hl sym">:</span> size_t <span class="hl slc">// uninitialized</span>
  <span class="hl kwa">val</span> dna_three <span class="hl sym">=</span> dna_three_get <span class="hl sym">(</span>n<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> assert_errmsg <span class="hl sym">(</span>n <span class="hl sym">&gt;=</span> <span class="hl num">2</span><span class="hl sym">,</span> <span class="hl str">&quot;: &quot;</span> <span class="hl sym">+</span> <span class="hl dir">#LOCATION)</span>
<span class="hl com">(*</span>
<span class="hl com">  val () = (prerr &quot;main: n = &quot;; prerr n; prerr_newline ())</span>
<span class="hl com">*)</span>
  <span class="hl kwa">val</span> dna3 <span class="hl sym">=</span>
    dna_of_string dna_three <span class="hl kwa">where</span> <span class="hl sym">{</span>
    <span class="hl kwa">extern</span> castfn dna_of_string <span class="hl sym">(</span>str<span class="hl sym">:</span> string<span class="hl sym">):</span> dna_t
  <span class="hl sym">}</span> <span class="hl slc">// end of [val]</span>
<span class="hl slc">//</span>
  <span class="hl slc">// val () = (print &quot;nworker = &quot;; print nworker; print_newline ())</span>
<span class="hl slc">//</span>
  <span class="hl kwa">val</span> ws <span class="hl sym">=</span> workshop_make<span class="hl sym">&lt;</span>work<span class="hl sym">&gt; (</span>QSZ<span class="hl sym">,</span> fwork<span class="hl sym">)</span>
  <span class="hl kwa">val</span> _err <span class="hl sym">=</span> workshop_add_nworker <span class="hl sym">(</span>ws<span class="hl sym">,</span> nworker<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> assert_errmsg <span class="hl sym">(</span>_err <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl str">&quot;: &quot;</span> <span class="hl sym">+</span> <span class="hl dir">#LOCATION)</span>
<span class="hl slc">//</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> write_frequencies <span class="hl sym">(</span>ws<span class="hl sym">,</span> dna3<span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> nworker<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> print_newline <span class="hl sym">()</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> write_frequencies <span class="hl sym">(</span>ws<span class="hl sym">,</span> dna3<span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">,</span> nworker<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> print_newline <span class="hl sym">()</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> write_count <span class="hl sym">(</span>ws<span class="hl sym">,</span> dna3<span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl str">&quot;GGT&quot;</span><span class="hl sym">,</span> nworker<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> write_count <span class="hl sym">(</span>ws<span class="hl sym">,</span> dna3<span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl str">&quot;GGTA&quot;</span><span class="hl sym">,</span> nworker<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> write_count <span class="hl sym">(</span>ws<span class="hl sym">,</span> dna3<span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl str">&quot;GGTATT&quot;</span><span class="hl sym">,</span> nworker<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> write_count <span class="hl sym">(</span>ws<span class="hl sym">,</span> dna3<span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl str">&quot;GGTATTTTAATT&quot;</span><span class="hl sym">,</span> nworker<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> write_count <span class="hl sym">(</span>ws<span class="hl sym">,</span> dna3<span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl sym">,</span> nworker<span class="hl sym">)</span>
<span class="hl slc">//</span>
  <span class="hl kwa">var</span> i<span class="hl sym">:</span> Nat <span class="hl sym">=</span> <span class="hl num">0</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> nworker<span class="hl sym">)</span> <span class="hl kwa">let</span>
    <span class="hl kwa">val</span> _quit <span class="hl sym">=</span> $extval <span class="hl sym">(</span>work<span class="hl sym">,</span> <span class="hl str">&quot;(void*)0&quot;</span><span class="hl sym">)</span>
    <span class="hl kwa">val</span> <span class="hl sym">() =</span> workshop_insert_work <span class="hl sym">(</span>ws<span class="hl sym">,</span> _quit<span class="hl sym">)</span> <span class="hl kwa">in</span> i <span class="hl sym">:=</span> i <span class="hl sym">+</span> <span class="hl num">1</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [val]</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> workshop_wait_quit_all <span class="hl sym">(</span>ws<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> workshop_free_vt_exn <span class="hl sym">(</span>ws<span class="hl sym">)</span>
<span class="hl kwa">in</span>
  <span class="hl slc">// nothing</span>
<span class="hl kwa">end</span> <span class="hl com">(* end of [main] *)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl com">(* end of [k-nucleotide3_smp.dats] *)</span>
