<span class="hl com">/*   The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Eric Willigers</span>
<span class="hl com">   based on Java version by The Anh Tran</span>
<span class="hl com">*/</span>

<span class="hl kwa">object</span> spectralnorm <span class="hl sym">{</span>
   <span class="hl kwa">val</span> nthread <span class="hl sym">=</span> <span class="hl kwc">Runtime</span><span class="hl sym">.</span>getRuntime<span class="hl sym">.</span>availableProcessors
   <span class="hl kwa">val</span> barrier <span class="hl sym">=</span> <span class="hl kwa">new</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span>concurrent<span class="hl sym">.</span><span class="hl kwc">CyclicBarrier</span><span class="hl sym">(</span>nthread<span class="hl sym">)</span>

   <span class="hl kwa">def</span> main<span class="hl sym">(</span>args<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">String</span><span class="hl sym">]) {</span>
      <span class="hl kwa">val</span> n <span class="hl sym">=</span> <span class="hl kwa">if</span> <span class="hl sym">(</span>args<span class="hl sym">.</span>length <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwc">Integer</span> parseInt args<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>  <span class="hl kwa">else</span> <span class="hl num">1000</span>
      <span class="hl kwa">val</span> fmt <span class="hl sym">=</span> <span class="hl kwa">new</span> java<span class="hl sym">.</span>text<span class="hl sym">.</span><span class="hl kwc">DecimalFormat</span><span class="hl sym">(</span><span class="hl str">&quot;#.000000000&quot;</span><span class="hl sym">)</span>
      println<span class="hl sym">(</span>fmt format run<span class="hl sym">(</span>n<span class="hl sym">))</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">def</span> run<span class="hl sym">(</span>n<span class="hl sym">:</span> Int<span class="hl sym">) = {</span>
      <span class="hl kwa">val</span> u <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">Double</span><span class="hl sym">](</span>n<span class="hl sym">)</span>
      <span class="hl kwa">val</span> v <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">Double</span><span class="hl sym">](</span>n<span class="hl sym">)</span>
      <span class="hl kwa">val</span> tmp <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">Double</span><span class="hl sym">](</span>n<span class="hl sym">)</span>
      <span class="hl kwa">val</span> chunk <span class="hl sym">=</span> n <span class="hl sym">/</span> nthread
      <span class="hl kwa">var</span> vBv <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">.</span>
      <span class="hl kwa">var</span> vv <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">.</span>
      java<span class="hl sym">.</span>util<span class="hl sym">.</span><span class="hl kwc">Arrays</span><span class="hl sym">.</span>fill<span class="hl sym">(</span>u<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">.)</span>
      <span class="hl kwc">Array</span> range<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> nthread<span class="hl sym">)</span> map <span class="hl sym">{</span> i <span class="hl sym">=&gt;</span>
         <span class="hl kwa">val</span> rbegin <span class="hl sym">=</span> i <span class="hl sym">*</span> chunk
         <span class="hl kwa">val</span> rend <span class="hl sym">=</span> <span class="hl kwa">if</span> <span class="hl sym">(</span>i <span class="hl sym">&lt; (</span>nthread <span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">))</span> rbegin <span class="hl sym">+</span> chunk <span class="hl kwa">else</span> n
         <span class="hl kwa">new</span> Approximate<span class="hl sym">(</span>u<span class="hl sym">,</span> v<span class="hl sym">,</span> tmp<span class="hl sym">,</span> rbegin<span class="hl sym">,</span> rend<span class="hl sym">)</span>         
      <span class="hl sym">}</span> foreach <span class="hl sym">{</span> a<span class="hl sym">=&gt;</span>
         a join<span class="hl sym">()</span>
         vBv <span class="hl sym">+=</span> a<span class="hl sym">.</span>m_vBv
         vv <span class="hl sym">+=</span> a<span class="hl sym">.</span>m_vv
      <span class="hl sym">}</span>
      <span class="hl kwc">Math</span> sqrt<span class="hl sym">(</span>vBv<span class="hl sym">/</span>vv<span class="hl sym">)</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">final class</span> Approximate<span class="hl sym">(</span>u<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">Double</span><span class="hl sym">],</span> v<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">Double</span><span class="hl sym">],</span> tmp<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">Double</span><span class="hl sym">],</span> rbegin<span class="hl sym">:</span> Int<span class="hl sym">,</span> rend<span class="hl sym">:</span> Int<span class="hl sym">)</span> <span class="hl kwa">extends</span> <span class="hl kwc">Thread</span> <span class="hl sym">{</span>
      <span class="hl kwa">var</span> m_vBv <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">.</span>
      <span class="hl kwa">var</span> m_vv <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">.</span>
      start<span class="hl sym">()</span>

      <span class="hl kwa">override def</span> run<span class="hl sym">() {</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;-</span> <span class="hl num">0</span> until <span class="hl num">10</span><span class="hl sym">) {</span>
            MultiplyAtAv<span class="hl sym">(</span>u<span class="hl sym">,</span> tmp<span class="hl sym">,</span> v<span class="hl sym">)</span>
            MultiplyAtAv<span class="hl sym">(</span>v<span class="hl sym">,</span> tmp<span class="hl sym">,</span> u<span class="hl sym">)</span>            
         <span class="hl sym">}</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;-</span> rbegin until rend<span class="hl sym">) {</span>
            m_vBv <span class="hl sym">+=</span> u<span class="hl sym">(</span>i<span class="hl sym">) *</span> v<span class="hl sym">(</span>i<span class="hl sym">)</span>
            m_vv  <span class="hl sym">+=</span> v<span class="hl sym">(</span>i<span class="hl sym">) *</span> v<span class="hl sym">(</span>i<span class="hl sym">)</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>

      &#64;inline
      <span class="hl kwa">def</span> eval_A<span class="hl sym">(</span>i<span class="hl sym">:</span> Int<span class="hl sym">,</span> j<span class="hl sym">:</span> Int<span class="hl sym">) =</span> <span class="hl num">1.0</span> <span class="hl sym">/ ( ((</span>i<span class="hl sym">+</span>j<span class="hl sym">) * (</span>i<span class="hl sym">+</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) &gt;&gt;&gt;</span> <span class="hl num">1</span><span class="hl sym">) +</span>i<span class="hl sym">+</span><span class="hl num">1</span> <span class="hl sym">)</span>

      <span class="hl kwa">def</span> MultiplyAv<span class="hl sym">(</span>v<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">Double</span><span class="hl sym">],</span> Av<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">Double</span><span class="hl sym">]) {</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;-</span> rbegin until rend<span class="hl sym">) {</span>
            <span class="hl kwa">var</span> sum <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">.</span>
            <span class="hl kwa">var</span> j <span class="hl sym">=</span> <span class="hl num">0</span>
            <span class="hl kwa">while</span> <span class="hl sym">(</span>j <span class="hl sym">&lt;</span> v<span class="hl sym">.</span>length<span class="hl sym">) {</span>
               sum <span class="hl sym">+=</span> eval_A<span class="hl sym">(</span>i<span class="hl sym">,</span> j<span class="hl sym">) *</span> v<span class="hl sym">(</span>j<span class="hl sym">)</span>
               j <span class="hl sym">+=</span> <span class="hl num">1</span>
            <span class="hl sym">}</span>
            Av<span class="hl sym">(</span>i<span class="hl sym">) =</span> sum
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">def</span> MultiplyAtv<span class="hl sym">(</span>v<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">Double</span><span class="hl sym">],</span> Atv<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">Double</span><span class="hl sym">]) {</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;-</span> rbegin until rend<span class="hl sym">) {</span>
            <span class="hl kwa">var</span> sum <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">.</span>
            <span class="hl kwa">var</span> j <span class="hl sym">=</span> <span class="hl num">0</span>
            <span class="hl kwa">while</span> <span class="hl sym">(</span>j <span class="hl sym">&lt;</span> v<span class="hl sym">.</span>length<span class="hl sym">) {</span>
               sum <span class="hl sym">+=</span> eval_A<span class="hl sym">(</span>j<span class="hl sym">,</span> i<span class="hl sym">) *</span> v<span class="hl sym">(</span>j<span class="hl sym">)</span>
               j <span class="hl sym">+=</span> <span class="hl num">1</span>
            <span class="hl sym">}</span>
            Atv<span class="hl sym">(</span>i<span class="hl sym">) =</span> sum
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">def</span> MultiplyAtAv<span class="hl sym">(</span>v<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">Double</span><span class="hl sym">],</span> tmp<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">Double</span><span class="hl sym">],</span> AtAv<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">Double</span><span class="hl sym">]) {</span>
         MultiplyAv<span class="hl sym">(</span>v<span class="hl sym">,</span> tmp<span class="hl sym">)</span>
         barrier await<span class="hl sym">()</span>
         MultiplyAtv<span class="hl sym">(</span>tmp<span class="hl sym">,</span> AtAv<span class="hl sym">)</span>
         barrier await<span class="hl sym">()</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>
