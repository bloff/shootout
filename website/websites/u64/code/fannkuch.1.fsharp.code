<span class="hl com">(*</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> * Based on contribution of Isaac Gouy</span>
<span class="hl com"> * Based on contribution of Eckehard Berns</span>
<span class="hl com"> * Based on code by Heiner Marxen</span>
<span class="hl com"> * and the ATS version by Hongwei Xi</span>
<span class="hl com"> * converted to C# by The Anh Tran</span>
<span class="hl com"> * converted to F# by George Prekas</span>
<span class="hl com"> *)</span>

#light

<span class="hl kwa">let</span> print_list l <span class="hl sym">=</span>
    <span class="hl kwc">Array</span><span class="hl sym">.</span>iter <span class="hl sym">(</span>printf <span class="hl str">&quot;%d&quot;</span><span class="hl sym">)</span> l
    printfn <span class="hl str">&quot;&quot;</span>

<span class="hl kwa">let</span> rotate_array <span class="hl sym">(</span>array<span class="hl sym">:</span>_<span class="hl sym">[])</span> count <span class="hl sym">=</span>
    <span class="hl kwa">let</span> a0 <span class="hl sym">=</span> array<span class="hl sym">.[</span><span class="hl num">0</span><span class="hl sym">]</span>
    <span class="hl kwa">for</span> i <span class="hl kwa">in</span> seq <span class="hl sym">{</span> <span class="hl num">0</span><span class="hl sym">..</span>count<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl sym">}</span> <span class="hl kwa">do</span>
        array<span class="hl sym">.[</span>i<span class="hl sym">] &lt;-</span> array<span class="hl sym">.[</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">]</span>
    array<span class="hl sym">.[</span>count<span class="hl sym">] &lt;-</span> a0
    array

<span class="hl kwa">let</span> next_perm permutation position <span class="hl sym">=</span>
    rotate_array <span class="hl sym">(</span><span class="hl kwc">Array</span><span class="hl sym">.</span>copy permutation<span class="hl sym">)</span> position

<span class="hl kwa">let mutable</span> result <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl kwa">let mutable</span> seq_no <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

<span class="hl kwa">let</span> count_flip <span class="hl sym">(</span>perm<span class="hl sym">:</span>_<span class="hl sym">[]) =</span>
    <span class="hl kwa">let</span> flip <span class="hl sym">(</span>list<span class="hl sym">:</span>_<span class="hl sym">[])</span> pos <span class="hl sym">=</span>
        <span class="hl kwa">let rec</span> flip_inner x y <span class="hl sym">=</span>
            <span class="hl kwa">if</span> x<span class="hl sym">&lt;</span>y <span class="hl kwa">then</span>
                <span class="hl kwa">let</span> tmp <span class="hl sym">=</span> list<span class="hl sym">.[</span>x<span class="hl sym">]</span>
                list<span class="hl sym">.[</span>x<span class="hl sym">] &lt;-</span> list<span class="hl sym">.[</span>y<span class="hl sym">]</span>
                list<span class="hl sym">.[</span>y<span class="hl sym">] &lt;-</span> tmp
                flip_inner <span class="hl sym">(</span>x<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) (</span>y<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
        flip_inner <span class="hl num">0</span> <span class="hl sym">(</span>pos<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
        list
    <span class="hl kwa">let rec</span> count_flip_inner acc <span class="hl sym">(</span>perm<span class="hl sym">:</span>_<span class="hl sym">[]) =</span>
        <span class="hl kwa">if</span> perm<span class="hl sym">.[</span><span class="hl num">0</span><span class="hl sym">]=</span><span class="hl num">1</span> <span class="hl kwa">then</span>
            acc
        <span class="hl kwa">else</span>
            count_flip_inner <span class="hl sym">(</span>acc<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) (</span>flip perm perm<span class="hl sym">.[</span><span class="hl num">0</span><span class="hl sym">])</span>
    <span class="hl kwa">if</span> perm<span class="hl sym">.[</span><span class="hl num">0</span><span class="hl sym">]&lt;&gt;</span><span class="hl num">1</span> <span class="hl sym">&amp;&amp;</span> perm<span class="hl sym">.[</span><span class="hl kwc">Array</span><span class="hl sym">.</span>length perm<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">]&lt;&gt;</span><span class="hl kwc">Array</span><span class="hl sym">.</span>length perm <span class="hl kwa">then</span>
        count_flip_inner <span class="hl num">0</span> <span class="hl sym">(</span><span class="hl kwc">Array</span><span class="hl sym">.</span>copy perm<span class="hl sym">)</span>
    <span class="hl kwa">else</span>
        <span class="hl num">0</span>

<span class="hl kwa">let</span> go perm <span class="hl sym">=</span>
    <span class="hl kwa">let</span> x <span class="hl sym">=</span> count_flip perm
    <span class="hl kwa">if</span> x <span class="hl sym">&gt;</span> result <span class="hl kwa">then</span> result <span class="hl sym">&lt;-</span> x

<span class="hl kwa">exception</span> <span class="hl kwd">StopPrinting</span>

<span class="hl kwa">let</span> go2 perm <span class="hl sym">=</span>
    <span class="hl kwa">if</span> seq_no <span class="hl sym">&lt;</span> <span class="hl num">30</span> <span class="hl kwa">then</span>
        print_list perm
        seq_no <span class="hl sym">&lt;-</span> seq_no<span class="hl sym">+</span><span class="hl num">1</span>
    <span class="hl kwa">else</span>
        raise <span class="hl kwd">StopPrinting</span>

<span class="hl kwa">let rec</span> perm_inner func <span class="hl sym">=</span> <span class="hl kwa">function</span>
    <span class="hl sym">| (</span>perm<span class="hl sym">,</span>x<span class="hl sym">,</span>_<span class="hl sym">)</span> <span class="hl kwa">when</span> x<span class="hl sym">&lt;=</span><span class="hl num">0</span> <span class="hl sym">-&gt; ()</span>
    <span class="hl sym">| (</span>perm<span class="hl sym">,</span>x<span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">)           -&gt;</span>
        perm_inner func <span class="hl sym">(</span>perm<span class="hl sym">,</span>x<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span>x<span class="hl sym">)</span>
    <span class="hl sym">| (</span>perm<span class="hl sym">,</span>x<span class="hl sym">,</span>count<span class="hl sym">)       -&gt;</span>
        perm_inner func <span class="hl sym">(</span>perm<span class="hl sym">,</span>x<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span>x<span class="hl sym">)</span>
        <span class="hl kwa">let</span> perm2 <span class="hl sym">=</span> next_perm perm x
        func perm2
        perm_inner func <span class="hl sym">(</span>perm2<span class="hl sym">,</span> x<span class="hl sym">,</span>count<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>

<span class="hl kwa">let</span> part_of_permutation func n m <span class="hl sym">=</span>
    <span class="hl kwa">let</span> perm <span class="hl sym">= [|</span><span class="hl num">1</span><span class="hl sym">..</span>n<span class="hl sym">|]</span>
    <span class="hl kwa">let</span> tmp <span class="hl sym">=</span> perm<span class="hl sym">.[</span>m<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">]</span>
    perm<span class="hl sym">.[</span>m<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">] &lt;-</span> perm<span class="hl sym">.[</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">]</span>
    perm<span class="hl sym">.[</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">] &lt;-</span> tmp
    func perm
    perm_inner func <span class="hl sym">(</span>perm<span class="hl sym">,</span>n<span class="hl sym">-</span><span class="hl num">2</span><span class="hl sym">,</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>

<span class="hl kwa">let</span> worker_common n m <span class="hl sym">=</span>
    part_of_permutation go n m

<span class="hl kwa">let</span> pworker n <span class="hl sym">=</span>
    <span class="hl kwa">let</span> worker_inner m <span class="hl sym">=</span>
        async <span class="hl sym">{</span>
            return worker_common n m
        <span class="hl sym">}</span>
    <span class="hl kwc">Async</span><span class="hl sym">.</span><span class="hl kwd">Parallel</span> <span class="hl sym">[</span> <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl num">1</span><span class="hl sym">..</span>n <span class="hl sym">-&gt;</span> worker_inner i <span class="hl sym">]</span>
    <span class="hl sym">|&gt;</span> <span class="hl kwc">Async</span><span class="hl sym">.</span><span class="hl kwd">Run</span>
    <span class="hl sym">|&gt;</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>max

<span class="hl kwa">let</span> worker n <span class="hl sym">=</span>
    seq <span class="hl sym">{</span> <span class="hl num">1</span> <span class="hl sym">..</span> n <span class="hl sym">}</span>
    <span class="hl sym">|&gt;</span> <span class="hl kwc">Seq</span><span class="hl sym">.</span>map <span class="hl sym">(</span>worker_common n<span class="hl sym">)</span>
    <span class="hl sym">|&gt;</span> <span class="hl kwc">Seq</span><span class="hl sym">.</span>max

<span class="hl kwa">let</span> permutation func n <span class="hl sym">=</span>
    <span class="hl kwa">let</span> perm <span class="hl sym">= [|</span><span class="hl num">1</span><span class="hl sym">..</span>n<span class="hl sym">|]</span>
    func perm
    perm_inner func <span class="hl sym">(</span>perm<span class="hl sym">,</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span>n<span class="hl sym">)</span>

<span class="hl kwa">let</span> print_30_permut n <span class="hl sym">=</span>
    <span class="hl kwa">try</span>
        permutation go2 n
    <span class="hl kwa">with</span> <span class="hl kwd">StopPrinting</span> <span class="hl sym">-&gt;</span>
        <span class="hl sym">()</span>

<span class="hl kwa">let</span> fannkuch n <span class="hl sym">=</span>
    print_30_permut n
    pworker n
    result

<span class="hl sym">[&lt;</span><span class="hl kwd">EntryPoint</span><span class="hl sym">&gt;]</span>
<span class="hl kwa">let</span> main<span class="hl sym">(</span>args<span class="hl sym">) =</span>
    <span class="hl kwa">let</span> x <span class="hl sym">=</span> <span class="hl kwa">if</span> args<span class="hl sym">.</span><span class="hl kwd">Length</span> <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span> <span class="hl kwb">int</span> args<span class="hl sym">.[</span><span class="hl num">0</span><span class="hl sym">]</span> <span class="hl kwa">else</span> <span class="hl num">7</span>
    printfn <span class="hl str">&quot;Pfannkuchen(%d) = %d&quot;</span> x <span class="hl sym">(</span>fannkuch x<span class="hl sym">)</span>
    <span class="hl num">0</span>
