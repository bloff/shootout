<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by The Go Authors.</span>
<span class="hl com"> * flag.Arg hack by Isaac Gouy</span>
<span class="hl com"> */</span>

<span class="hl kwa">package</span> main

<span class="hl kwa">import</span> <span class="hl sym">(</span>
   <span class="hl str">&quot;flag&quot;</span><span class="hl sym">;</span>
   <span class="hl str">&quot;fmt&quot;</span><span class="hl sym">;</span>
   <span class="hl str">&quot;os&quot;</span><span class="hl sym">;</span>
   <span class="hl str">&quot;strconv&quot;</span><span class="hl sym">;</span>
<span class="hl sym">)</span>

<span class="hl kwa">var</span> n <span class="hl sym">=</span> <span class="hl num">0</span>

<span class="hl kwa">type</span> Color int

<span class="hl kwa">const</span> <span class="hl sym">(</span>
   blue Color <span class="hl sym">=</span> iota<span class="hl sym">;</span>
   red<span class="hl sym">;</span>
   yellow<span class="hl sym">;</span>
<span class="hl sym">)</span>

<span class="hl kwa">func</span> <span class="hl sym">(</span>c Color<span class="hl sym">)</span> String<span class="hl sym">()</span> string <span class="hl sym">{</span>
   <span class="hl kwa">return</span> <span class="hl sym">[]</span>string<span class="hl sym">{</span><span class="hl str">&quot;blue&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;red&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;yellow&quot;</span><span class="hl sym">}[</span>c<span class="hl sym">]</span>
<span class="hl sym">}</span>

<span class="hl kwa">func</span> complement<span class="hl sym">(</span>c1<span class="hl sym">,</span> c2 Color<span class="hl sym">)</span> Color <span class="hl sym">{</span>
    <span class="hl kwa">switch</span> c1 <span class="hl sym">&lt;&lt;</span> <span class="hl num">2</span> <span class="hl sym">|</span> c2 <span class="hl sym">{</span>
    <span class="hl kwa">case</span> blue <span class="hl sym">&lt;&lt;</span> <span class="hl num">2</span> <span class="hl sym">|</span> blue<span class="hl sym">:</span>
       <span class="hl kwa">return</span> blue
    <span class="hl kwa">case</span> blue <span class="hl sym">&lt;&lt;</span> <span class="hl num">2</span> <span class="hl sym">|</span> red<span class="hl sym">:</span>
       <span class="hl kwa">return</span> yellow
    <span class="hl kwa">case</span> blue <span class="hl sym">&lt;&lt;</span> <span class="hl num">2</span> <span class="hl sym">|</span> yellow<span class="hl sym">:</span>
       <span class="hl kwa">return</span> red
    <span class="hl kwa">case</span> red <span class="hl sym">&lt;&lt;</span> <span class="hl num">2</span> <span class="hl sym">|</span> blue<span class="hl sym">:</span>
       <span class="hl kwa">return</span> yellow
    <span class="hl kwa">case</span> red <span class="hl sym">&lt;&lt;</span> <span class="hl num">2</span> <span class="hl sym">|</span> red<span class="hl sym">:</span>
       <span class="hl kwa">return</span> red
    <span class="hl kwa">case</span> red <span class="hl sym">&lt;&lt;</span> <span class="hl num">2</span> <span class="hl sym">|</span> yellow<span class="hl sym">:</span>
       <span class="hl kwa">return</span> blue
    <span class="hl kwa">case</span> yellow <span class="hl sym">&lt;&lt;</span> <span class="hl num">2</span> <span class="hl sym">|</span> blue<span class="hl sym">:</span>
       <span class="hl kwa">return</span> red
    <span class="hl kwa">case</span> yellow <span class="hl sym">&lt;&lt;</span> <span class="hl num">2</span> <span class="hl sym">|</span> red<span class="hl sym">:</span>
       <span class="hl kwa">return</span> blue
    <span class="hl kwa">case</span> yellow <span class="hl sym">&lt;&lt;</span> <span class="hl num">2</span> <span class="hl sym">|</span> yellow<span class="hl sym">:</span>
       <span class="hl kwa">return</span> yellow
   <span class="hl sym">}</span>
   fmt<span class="hl sym">.</span>Println<span class="hl sym">(</span><span class="hl str">&quot;invalid colors&quot;</span><span class="hl sym">,</span> c1<span class="hl sym">,</span> c2<span class="hl sym">);</span>
   os<span class="hl sym">.</span>Exit<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">);</span>
   <span class="hl kwa">return</span> <span class="hl num">0</span>
<span class="hl sym">}</span>

<span class="hl kwa">func</span> printColors<span class="hl sym">(</span>c1<span class="hl sym">,</span> c2 Color<span class="hl sym">) {</span>
   fmt<span class="hl sym">.</span>Printf<span class="hl sym">(</span><span class="hl str">&quot;%s + %s -&gt; %s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> c1<span class="hl sym">,</span> c2<span class="hl sym">,</span> complement<span class="hl sym">(</span>c1<span class="hl sym">,</span> c2<span class="hl sym">));</span>
<span class="hl sym">}</span>

<span class="hl kwa">func</span> printColorTable<span class="hl sym">() {</span>
   printColors<span class="hl sym">(</span>blue<span class="hl sym">,</span> blue<span class="hl sym">);</span>
   printColors<span class="hl sym">(</span>blue<span class="hl sym">,</span> red<span class="hl sym">);</span>
   printColors<span class="hl sym">(</span>blue<span class="hl sym">,</span> yellow<span class="hl sym">);</span>
   printColors<span class="hl sym">(</span>red<span class="hl sym">,</span> blue<span class="hl sym">);</span>
   printColors<span class="hl sym">(</span>red<span class="hl sym">,</span> red<span class="hl sym">);</span>
   printColors<span class="hl sym">(</span>red<span class="hl sym">,</span> yellow<span class="hl sym">);</span>
   printColors<span class="hl sym">(</span>yellow<span class="hl sym">,</span> blue<span class="hl sym">);</span>
   printColors<span class="hl sym">(</span>yellow<span class="hl sym">,</span> red<span class="hl sym">);</span>
   printColors<span class="hl sym">(</span>yellow<span class="hl sym">,</span> yellow<span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwa">type</span> Referee <span class="hl kwa">struct</span> <span class="hl sym">{</span>
   rendezCount   int<span class="hl sym">;</span>
   cham   <span class="hl sym">[]*</span>Chameneos<span class="hl sym">;</span>
   rendez   <span class="hl kwa">chan</span> <span class="hl sym">*</span>Chameneos<span class="hl sym">;</span>
   done   <span class="hl kwa">chan</span> int<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwa">func</span> NewReferee<span class="hl sym">() *</span>Referee <span class="hl sym">{</span>
   ref <span class="hl sym">:=</span> new<span class="hl sym">(</span>Referee<span class="hl sym">);</span>
   ref<span class="hl sym">.</span>cham <span class="hl sym">=</span> make<span class="hl sym">([]*</span>Chameneos<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">100</span><span class="hl sym">);</span>
   ref<span class="hl sym">.</span>rendez <span class="hl sym">=</span> make<span class="hl sym">(</span><span class="hl kwa">chan</span> <span class="hl sym">*</span>Chameneos<span class="hl sym">);</span>
   ref<span class="hl sym">.</span>done <span class="hl sym">=</span> make<span class="hl sym">(</span><span class="hl kwa">chan</span> int<span class="hl sym">);</span>
   <span class="hl kwa">go</span> ref<span class="hl sym">.</span>Serve<span class="hl sym">();</span>
   <span class="hl kwa">return</span> ref<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwa">func</span> <span class="hl sym">(</span>ref <span class="hl sym">*</span>Referee<span class="hl sym">)</span> Serve<span class="hl sym">() {</span>
   <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> n<span class="hl sym">;</span> i<span class="hl sym">++ {</span>
      c1 <span class="hl sym">:= &lt;-</span>ref<span class="hl sym">.</span>rendez<span class="hl sym">;</span>
      c2 <span class="hl sym">:= &lt;-</span>ref<span class="hl sym">.</span>rendez<span class="hl sym">;</span>
      c1<span class="hl sym">.</span>col<span class="hl sym">,</span> c2<span class="hl sym">.</span>col <span class="hl sym">=</span> complement<span class="hl sym">(</span>c1<span class="hl sym">.</span>col<span class="hl sym">,</span> c2<span class="hl sym">.</span>col<span class="hl sym">),</span> complement<span class="hl sym">(</span>c2<span class="hl sym">.</span>col<span class="hl sym">,</span> c1<span class="hl sym">.</span>col<span class="hl sym">);</span>
      c1<span class="hl sym">.</span>rendez <span class="hl sym">&lt;-</span> c2<span class="hl sym">;</span>
      c2<span class="hl sym">.</span>rendez <span class="hl sym">&lt;-</span> c1<span class="hl sym">;</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> len<span class="hl sym">(</span>ref<span class="hl sym">.</span>cham<span class="hl sym">);</span> i<span class="hl sym">++ {</span>
      c <span class="hl sym">:= &lt;-</span>ref<span class="hl sym">.</span>rendez<span class="hl sym">;</span>
      c<span class="hl sym">.</span>rendez <span class="hl sym">&lt;-</span> nil<span class="hl sym">;</span>
   <span class="hl sym">}</span>
   ref<span class="hl sym">.</span>done <span class="hl sym">&lt;-</span> <span class="hl num">1</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwa">func</span> <span class="hl sym">(</span>ref <span class="hl sym">*</span>Referee<span class="hl sym">)</span> Add<span class="hl sym">(</span>ch <span class="hl sym">*</span>Chameneos<span class="hl sym">) {</span>
   n <span class="hl sym">:=</span> len<span class="hl sym">(</span>ref<span class="hl sym">.</span>cham<span class="hl sym">);</span>
   ref<span class="hl sym">.</span>cham <span class="hl sym">=</span> ref<span class="hl sym">.</span>cham<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">:</span>n<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">];</span>
   ref<span class="hl sym">.</span>cham<span class="hl sym">[</span>n<span class="hl sym">] =</span> ch<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwa">type</span> Chameneos <span class="hl kwa">struct</span> <span class="hl sym">{</span>
   index   int<span class="hl sym">;</span>
   col   Color<span class="hl sym">;</span>
   rendez   <span class="hl kwa">chan</span> <span class="hl sym">*</span>Chameneos<span class="hl sym">;</span>
   count   int<span class="hl sym">;</span>
   same   int<span class="hl sym">;</span>
   ref   <span class="hl sym">*</span>Referee<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwa">func</span> <span class="hl sym">(</span>c <span class="hl sym">*</span>Chameneos<span class="hl sym">)</span> Init<span class="hl sym">(</span>index int<span class="hl sym">,</span> ref <span class="hl sym">*</span>Referee<span class="hl sym">,</span> col Color<span class="hl sym">) *</span>Chameneos <span class="hl sym">{</span>
   c<span class="hl sym">.</span>index <span class="hl sym">=</span> index<span class="hl sym">;</span>
   c<span class="hl sym">.</span>ref <span class="hl sym">=</span> ref<span class="hl sym">;</span>
   c<span class="hl sym">.</span>col <span class="hl sym">=</span> col<span class="hl sym">;</span>
   c<span class="hl sym">.</span>rendez <span class="hl sym">=</span> make<span class="hl sym">(</span><span class="hl kwa">chan</span> <span class="hl sym">*</span>Chameneos<span class="hl sym">);</span>
   <span class="hl kwa">go</span> c<span class="hl sym">.</span>Serve<span class="hl sym">();</span>
   <span class="hl kwa">return</span> c<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwa">func</span> <span class="hl sym">(</span>c <span class="hl sym">*</span>Chameneos<span class="hl sym">)</span> Serve<span class="hl sym">() {</span>
   <span class="hl kwa">for</span> <span class="hl sym">{</span>
      c<span class="hl sym">.</span>ref<span class="hl sym">.</span>rendez <span class="hl sym">&lt;-</span> c<span class="hl sym">;</span>
      c1 <span class="hl sym">:= &lt;-</span> c<span class="hl sym">.</span>rendez<span class="hl sym">;</span>
      <span class="hl kwa">if</span> c1 <span class="hl sym">==</span> nil <span class="hl sym">{</span>
         <span class="hl kwa">break</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">if</span> c1<span class="hl sym">.</span>index <span class="hl sym">==</span> c<span class="hl sym">.</span>index <span class="hl sym">{</span>
         c<span class="hl sym">.</span>same<span class="hl sym">++</span>
      <span class="hl sym">}</span>
      c<span class="hl sym">.</span>count<span class="hl sym">++;</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwa">func</span> play<span class="hl sym">(</span>ref <span class="hl sym">*</span>Referee<span class="hl sym">,</span> color <span class="hl sym">[]</span>Color<span class="hl sym">) {</span>
   cham <span class="hl sym">:=</span> make<span class="hl sym">([]</span>Chameneos<span class="hl sym">,</span> len<span class="hl sym">(</span>color<span class="hl sym">));</span>
   <span class="hl kwa">for</span> i<span class="hl sym">,</span> c <span class="hl sym">:=</span> <span class="hl kwa">range</span> color <span class="hl sym">{</span>
      fmt<span class="hl sym">.</span>Printf<span class="hl sym">(</span><span class="hl str">&quot; %s&quot;</span><span class="hl sym">,</span> c<span class="hl sym">);</span>
      ref<span class="hl sym">.</span>Add<span class="hl sym">(</span>cham<span class="hl sym">[</span>i<span class="hl sym">].</span>Init<span class="hl sym">(</span>i<span class="hl sym">,</span> ref<span class="hl sym">,</span> c<span class="hl sym">));</span>
   <span class="hl sym">}</span>
   fmt<span class="hl sym">.</span>Printf<span class="hl sym">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">);</span>
   <span class="hl sym">&lt;-</span>ref<span class="hl sym">.</span>done<span class="hl sym">;</span>
   total <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">for</span> _<span class="hl sym">,</span> c <span class="hl sym">:=</span> <span class="hl kwa">range</span> cham <span class="hl sym">{</span>
      total <span class="hl sym">+=</span> c<span class="hl sym">.</span>count<span class="hl sym">;</span>
      fmt<span class="hl sym">.</span>Printf<span class="hl sym">(</span><span class="hl str">&quot;%d %s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> c<span class="hl sym">.</span>count<span class="hl sym">,</span> say<span class="hl sym">(</span>c<span class="hl sym">.</span>same<span class="hl sym">));</span>
   <span class="hl sym">}</span>
   fmt<span class="hl sym">.</span>Printf<span class="hl sym">(</span><span class="hl str">&quot;%s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> say<span class="hl sym">(</span>total<span class="hl sym">));</span>
<span class="hl sym">}</span>

<span class="hl kwa">var</span> words <span class="hl sym">= []</span>string<span class="hl sym">{</span><span class="hl str">&quot;zero&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;one&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;two&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;three&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;four&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;five&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;six&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;seven&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;eight&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;nine&quot;</span><span class="hl sym">}</span>

<span class="hl kwa">func</span> say<span class="hl sym">(</span>n int<span class="hl sym">)</span> string <span class="hl sym">{</span>
   digits <span class="hl sym">:=</span> fmt<span class="hl sym">.</span>Sprint<span class="hl sym">(</span>n<span class="hl sym">);</span>
   s <span class="hl sym">:=</span> <span class="hl str">&quot;&quot;</span><span class="hl sym">;</span>
   <span class="hl kwa">for</span> _<span class="hl sym">,</span> c <span class="hl sym">:=</span> <span class="hl kwa">range</span> digits <span class="hl sym">{</span>
      s <span class="hl sym">+=</span> <span class="hl str">&quot; &quot;</span> <span class="hl sym">+</span> words<span class="hl sym">[</span>c<span class="hl sym">-</span>'<span class="hl num">0</span>'<span class="hl sym">];</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">return</span> s<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwa">func</span> main<span class="hl sym">() {</span>
   flag<span class="hl sym">.</span>Parse<span class="hl sym">();</span>
   <span class="hl kwa">if</span> flag<span class="hl sym">.</span>NArg<span class="hl sym">() &gt;</span> <span class="hl num">0</span> <span class="hl sym">{</span> n<span class="hl sym">,</span>_ <span class="hl sym">=</span> strconv<span class="hl sym">.</span>Atoi<span class="hl sym">(</span> flag<span class="hl sym">.</span>Arg<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">) ) }</span>

   printColorTable<span class="hl sym">();</span>
   fmt<span class="hl sym">.</span>Print<span class="hl sym">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">);</span>
   play<span class="hl sym">(</span>NewReferee<span class="hl sym">(), []</span>Color<span class="hl sym">{</span>blue<span class="hl sym">,</span> red<span class="hl sym">,</span> yellow<span class="hl sym">});</span>
   fmt<span class="hl sym">.</span>Print<span class="hl sym">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">);</span>
   play<span class="hl sym">(</span>NewReferee<span class="hl sym">(), []</span>Color<span class="hl sym">{</span>blue<span class="hl sym">,</span> red<span class="hl sym">,</span> yellow<span class="hl sym">,</span> red<span class="hl sym">,</span> yellow<span class="hl sym">,</span> blue<span class="hl sym">,</span> red<span class="hl sym">,</span> yellow<span class="hl sym">,</span> red<span class="hl sym">,</span> blue<span class="hl sym">});</span>
   fmt<span class="hl sym">.</span>Print<span class="hl sym">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">);</span>
<span class="hl sym">}</span>
