<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Isaac Gouy</span>
<span class="hl com">   transliterated from Miha Vučkovič's Haskell program</span>
<span class="hl com">*/</span>

module fannkuchredux

import StdEnv<span class="hl sym">,</span>LanguageShootout

flop <span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">,</span>x1<span class="hl sym">:</span>t<span class="hl sym">] = [</span>x1<span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">:</span>t<span class="hl sym">]</span>
flop <span class="hl sym">[</span><span class="hl num">3</span><span class="hl sym">,</span>x1<span class="hl sym">,</span>x2<span class="hl sym">:</span>t<span class="hl sym">] = [</span>x2<span class="hl sym">,</span>x1<span class="hl sym">,</span><span class="hl num">3</span><span class="hl sym">:</span>t<span class="hl sym">]</span>
flop <span class="hl sym">[</span><span class="hl num">4</span><span class="hl sym">,</span>x1<span class="hl sym">,</span>x2<span class="hl sym">,</span>x3<span class="hl sym">:</span>t<span class="hl sym">] = [</span>x3<span class="hl sym">,</span>x2<span class="hl sym">,</span>x1<span class="hl sym">,</span><span class="hl num">4</span><span class="hl sym">:</span>t<span class="hl sym">]</span>
flop <span class="hl sym">[</span><span class="hl num">5</span><span class="hl sym">,</span>x1<span class="hl sym">,</span>x2<span class="hl sym">,</span>x3<span class="hl sym">,</span>x4<span class="hl sym">:</span>t<span class="hl sym">] = [</span>x4<span class="hl sym">,</span>x3<span class="hl sym">,</span>x2<span class="hl sym">,</span>x1<span class="hl sym">,</span><span class="hl num">5</span><span class="hl sym">:</span>t<span class="hl sym">]</span>
flop <span class="hl sym">[</span><span class="hl num">6</span><span class="hl sym">,</span>x1<span class="hl sym">,</span>x2<span class="hl sym">,</span>x3<span class="hl sym">,</span>x4<span class="hl sym">,</span>x5<span class="hl sym">:</span>t<span class="hl sym">] = [</span>x5<span class="hl sym">,</span>x4<span class="hl sym">,</span>x3<span class="hl sym">,</span>x2<span class="hl sym">,</span>x1<span class="hl sym">,</span><span class="hl num">6</span><span class="hl sym">:</span>t<span class="hl sym">]</span>
flop <span class="hl sym">[</span><span class="hl num">7</span><span class="hl sym">,</span>x1<span class="hl sym">,</span>x2<span class="hl sym">,</span>x3<span class="hl sym">,</span>x4<span class="hl sym">,</span>x5<span class="hl sym">,</span>x6<span class="hl sym">:</span>t<span class="hl sym">] = [</span>x6<span class="hl sym">,</span>x5<span class="hl sym">,</span>x4<span class="hl sym">,</span>x3<span class="hl sym">,</span>x2<span class="hl sym">,</span>x1<span class="hl sym">,</span><span class="hl num">7</span><span class="hl sym">:</span>t<span class="hl sym">]</span>

flop lst<span class="hl sym">=:[</span>h<span class="hl sym">:</span>_<span class="hl sym">] =</span> r where
   <span class="hl sym">(</span>t<span class="hl sym">,</span> r<span class="hl sym">) =</span> flop2 h <span class="hl sym">(</span>lst<span class="hl sym">,</span> t<span class="hl sym">)</span>
   flop2 <span class="hl num">0</span> <span class="hl sym">(</span>t<span class="hl sym">,</span> r<span class="hl sym">) = (</span>t<span class="hl sym">,</span> r<span class="hl sym">)</span>
   flop2 n <span class="hl sym">([</span>h<span class="hl sym">:</span>t<span class="hl sym">],</span> r<span class="hl sym">) =</span> flop2 <span class="hl sym">(</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">) (</span>t<span class="hl sym">, [</span>h<span class="hl sym">:</span>r<span class="hl sym">])</span>

flopS <span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">:</span>_<span class="hl sym">] =</span> <span class="hl num">0</span>
flopS lst <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">+</span> flopS <span class="hl sym">(</span>flop lst<span class="hl sym">)</span>

rotate n <span class="hl sym">[</span>h<span class="hl sym">:</span>t<span class="hl sym">] =</span> rotate2 <span class="hl sym">(</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span> t where
   rotate2 <span class="hl num">0</span> l <span class="hl sym">= [</span>h<span class="hl sym">:</span>l<span class="hl sym">]</span>
   rotate2 n <span class="hl sym">[</span>f<span class="hl sym">:</span>t<span class="hl sym">] = [</span>f<span class="hl sym">:(</span>rotate2 <span class="hl sym">(</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span> t<span class="hl sym">)]</span>

checksum i f
   <span class="hl sym">|</span> i rem <span class="hl num">2</span> <span class="hl sym">==</span> <span class="hl num">0</span> <span class="hl sym">=</span> f
                  <span class="hl sym">=</span> ~f

pfold r <span class="hl sym">[] =</span> r
pfold <span class="hl sym">(</span>ac<span class="hl sym">,</span> af<span class="hl sym">) [(</span>c<span class="hl sym">,</span> f<span class="hl sym">):</span>t<span class="hl sym">]</span>
   <span class="hl sym">#!</span> sc <span class="hl sym">=</span> ac<span class="hl sym">+</span>c
   <span class="hl sym">#!</span> sf <span class="hl sym">=</span> max af f
   <span class="hl sym">=</span> pfold <span class="hl sym">(</span>sc<span class="hl sym">,</span> sf<span class="hl sym">)</span> t

permut n <span class="hl sym">=</span> foldr perm <span class="hl sym">[[</span><span class="hl num">1</span><span class="hl sym">..</span>n<span class="hl sym">]] [</span><span class="hl num">2</span><span class="hl sym">..</span>n<span class="hl sym">]</span> where
   perm x lst <span class="hl sym">=</span> flatten <span class="hl sym">[</span>take x <span class="hl sym">(</span>iterate <span class="hl sym">(</span>rotate x<span class="hl sym">)</span> l<span class="hl sym">) \\</span> l <span class="hl sym">&lt;-</span> lst<span class="hl sym">]</span>

Start world
   <span class="hl sym">#</span> n <span class="hl sym">=</span> argi
     <span class="hl sym">(</span>chksm<span class="hl sym">,</span> mflops<span class="hl sym">) =</span> pfold <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">) (</span>map
        <span class="hl sym">(</span>\<span class="hl sym">(</span>i<span class="hl sym">,</span> p<span class="hl sym">) =</span> let flops <span class="hl sym">=</span> flopS p in <span class="hl sym">(</span>checksum i flops<span class="hl sym">,</span> flops<span class="hl sym">))</span>
           <span class="hl sym">(</span>zip2 <span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">..] (</span>permut n<span class="hl sym">)) )</span>

   <span class="hl sym">=</span> toString chksm <span class="hl sym">+++</span> <span class="hl str">&quot;\n&quot;</span> <span class="hl sym">+++</span>
     <span class="hl str">&quot;Pfannkuchen(&quot;</span> <span class="hl sym">+++</span> toString n <span class="hl sym">+++</span> <span class="hl str">&quot;) = &quot;</span> <span class="hl sym">+++</span> toString mflops <span class="hl sym">+++</span> <span class="hl str">&quot;\n&quot;</span>

