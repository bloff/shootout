<span class="hl com">(* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by Troestler Christophe</span>
<span class="hl com"> * modified by Mauricio Fernandez</span>
<span class="hl com"> * modified by Fabrice Le Fessant</span>
<span class="hl com"> *)</span>

<span class="hl kwa">let</span> arch64 <span class="hl sym">=</span>
  <span class="hl kwa">match</span> <span class="hl kwc">Sys</span><span class="hl sym">.</span>word_size <span class="hl kwa">with</span>
      <span class="hl num">32</span> <span class="hl sym">-&gt;</span> <span class="hl kwa">false</span>
    <span class="hl sym">|</span> <span class="hl num">64</span> <span class="hl sym">-&gt;</span> <span class="hl kwa">true</span>
    <span class="hl sym">|</span> _ <span class="hl sym">-&gt;</span> <span class="hl kwa">assert false</span>

<span class="hl kwa">module</span> <span class="hl kwd">Spawner</span> <span class="hl sym">:</span> <span class="hl kwa">sig</span>

  <span class="hl kwa">val</span> spawn <span class="hl sym">:</span> <span class="hl kwb">bool</span> <span class="hl sym">-&gt; (</span><span class="hl kwb">unit</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">unit</span><span class="hl sym">) -&gt; (</span><span class="hl kwb">unit</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">unit</span><span class="hl sym">) -&gt;</span> <span class="hl kwb">unit</span>

 <span class="hl kwa">end</span> <span class="hl sym">=</span> <span class="hl kwa">struct</span>

<span class="hl kwa">let</span> inbuf <span class="hl sym">=</span> <span class="hl kwc">String</span><span class="hl sym">.</span>create <span class="hl num">1</span>

<span class="hl kwa">let</span> wait_for <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl kwd">None</span>
<span class="hl kwa">let</span> spawn spawn prelude postlude <span class="hl sym">=</span>
  <span class="hl kwa">begin</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>
  <span class="hl kwa">if</span> spawn <span class="hl kwa">then begin</span>
    <span class="hl kwa">let</span> <span class="hl sym">(</span>ix<span class="hl sym">,</span> ox<span class="hl sym">) =</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>pipe <span class="hl sym">()</span> <span class="hl kwa">in</span>
      <span class="hl kwa">match</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>fork <span class="hl sym">()</span> <span class="hl kwa">with</span>
	  <span class="hl sym">-</span><span class="hl num">1</span> <span class="hl sym">-&gt;</span> <span class="hl kwa">assert false</span>
	<span class="hl sym">|</span> <span class="hl num">0</span> <span class="hl sym">-&gt;</span>
	    prelude <span class="hl sym">();</span>
	    <span class="hl kwa">begin</span>
	      <span class="hl kwa">match</span> <span class="hl sym">!</span>wait_for <span class="hl kwa">with</span>
		  <span class="hl kwd">None</span> <span class="hl sym">-&gt; ()</span>
		<span class="hl sym">|</span> <span class="hl kwd">Some</span> ix <span class="hl sym">-&gt;</span>
		    ignore <span class="hl sym">(</span><span class="hl kwc">Unix</span><span class="hl sym">.</span>read ix inbuf <span class="hl num">0 1</span><span class="hl sym">)</span>
	    <span class="hl kwa">end</span><span class="hl sym">;</span>
	    postlude <span class="hl sym">();</span>
	    ignore <span class="hl sym">(</span><span class="hl kwc">Unix</span><span class="hl sym">.</span>write ox <span class="hl str">&quot;X&quot;</span> <span class="hl num">0 1</span><span class="hl sym">);</span>
	    <span class="hl kwc">Unix</span><span class="hl sym">.</span>close ox<span class="hl sym">;</span>
	    exit <span class="hl num">0</span>
	<span class="hl sym">|</span> _ <span class="hl sym">-&gt;</span>
	    wait_for <span class="hl sym">:=</span> <span class="hl kwd">Some</span> ix<span class="hl sym">;</span>
  <span class="hl kwa">end else begin</span>
    prelude <span class="hl sym">();</span>
    <span class="hl kwa">begin</span>
      <span class="hl kwa">match</span> <span class="hl sym">!</span>wait_for <span class="hl kwa">with</span>
	  <span class="hl kwd">None</span> <span class="hl sym">-&gt; ()</span>
	<span class="hl sym">|</span> <span class="hl kwd">Some</span> ix <span class="hl sym">-&gt;</span>
	    ignore <span class="hl sym">(</span><span class="hl kwc">Unix</span><span class="hl sym">.</span>read ix inbuf <span class="hl num">0 1</span><span class="hl sym">);</span>
    <span class="hl kwa">end</span><span class="hl sym">;</span>
    postlude <span class="hl sym">();</span>
  <span class="hl kwa">end</span>


<span class="hl kwa">end</span>

<span class="hl kwa">let</span> alu <span class="hl sym">=</span> <span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG\</span>
<span class="hl str">GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA\</span>
<span class="hl str">CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT\</span>
<span class="hl str">ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA\</span>
<span class="hl str">GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG\</span>
<span class="hl str">AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC\</span>
<span class="hl str">AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>

<span class="hl kwa">let</span> iub <span class="hl sym">= [| (</span><span class="hl kwb">'a'</span><span class="hl sym">,</span> <span class="hl num">0.27</span><span class="hl sym">);  (</span><span class="hl kwb">'c'</span><span class="hl sym">,</span> <span class="hl num">0.12</span><span class="hl sym">);  (</span><span class="hl kwb">'g'</span><span class="hl sym">,</span> <span class="hl num">0.12</span><span class="hl sym">);  (</span><span class="hl kwb">'t'</span><span class="hl sym">,</span> <span class="hl num">0.27</span><span class="hl sym">);</span>
	     <span class="hl sym">(</span><span class="hl kwb">'B'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">);  (</span><span class="hl kwb">'D'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">);  (</span><span class="hl kwb">'H'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">);  (</span><span class="hl kwb">'K'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">);</span>
	     <span class="hl sym">(</span><span class="hl kwb">'M'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">);  (</span><span class="hl kwb">'N'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">);  (</span><span class="hl kwb">'R'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">);  (</span><span class="hl kwb">'S'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">);</span>
	     <span class="hl sym">(</span><span class="hl kwb">'V'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">);  (</span><span class="hl kwb">'W'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">);  (</span><span class="hl kwb">'Y'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">);  |]</span>

<span class="hl kwa">let</span> homosapiens <span class="hl sym">= [| (</span><span class="hl kwb">'a'</span><span class="hl sym">,</span> <span class="hl num">0.3029549426680</span><span class="hl sym">);    (</span><span class="hl kwb">'c'</span><span class="hl sym">,</span> <span class="hl num">0.1979883004921</span><span class="hl sym">);</span>
		     <span class="hl sym">(</span><span class="hl kwb">'g'</span><span class="hl sym">,</span> <span class="hl num">0.1975473066391</span><span class="hl sym">);    (</span><span class="hl kwb">'t'</span><span class="hl sym">,</span> <span class="hl num">0.3015094502008</span><span class="hl sym">);  |]</span>


<span class="hl com">(* Random number generator *)</span>
<span class="hl kwa">let</span> im <span class="hl sym">=</span> <span class="hl num">139968</span>
<span class="hl kwa">and</span> ia <span class="hl sym">=</span> <span class="hl num">3877</span>
<span class="hl kwa">and</span> ic <span class="hl sym">=</span> <span class="hl num">29573</span>

<span class="hl kwa">let</span> last <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">42</span> <span class="hl kwa">and</span> im_f <span class="hl sym">=</span> <span class="hl kwb">float</span> im


<span class="hl kwa">let</span> cache <span class="hl sym">=</span>
  <span class="hl kwa">let</span> im <span class="hl sym">=</span> <span class="hl num">139968</span>
  <span class="hl kwa">and</span> ia <span class="hl sym">=</span> <span class="hl num">3877</span>
  <span class="hl kwa">and</span> ic <span class="hl sym">=</span> <span class="hl num">29573</span> <span class="hl kwa">in</span>
  <span class="hl kwc">Array</span><span class="hl sym">.</span>init im  <span class="hl sym">(</span><span class="hl kwa">fun</span> i <span class="hl sym">-&gt;  (</span>i <span class="hl sym">*</span> ia <span class="hl sym">+</span> ic<span class="hl sym">)</span> <span class="hl kwa">mod</span> im<span class="hl sym">)</span>

<span class="hl kwa">let</span> gen_random  <span class="hl sym">() =</span>
  <span class="hl kwa">let</span> n <span class="hl sym">=</span> cache<span class="hl sym">.(!</span>last<span class="hl sym">)</span> <span class="hl kwa">in</span>
    last <span class="hl sym">:=</span> n<span class="hl sym">;</span>
    n

<span class="hl kwa">module</span> <span class="hl kwd">Cumul_tbl</span> <span class="hl sym">=</span>
<span class="hl kwa">struct</span>
  <span class="hl kwa">type</span> t <span class="hl sym">= {</span> probs <span class="hl sym">:</span> <span class="hl kwb">float</span> array<span class="hl sym">;</span>
	     chars <span class="hl sym">:</span> char array<span class="hl sym">;</span>
	     cache <span class="hl sym">:</span> char array<span class="hl sym">; }</span>

  <span class="hl kwa">let</span> make a <span class="hl sym">=</span>
    <span class="hl kwa">let</span> len <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>length a <span class="hl kwa">in</span>
    <span class="hl kwa">let</span> chars <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>create len <span class="hl kwb">'x'</span> <span class="hl kwa">in</span>
    <span class="hl kwa">let</span> probs <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>create len <span class="hl num">0</span><span class="hl sym">.</span> <span class="hl kwa">in</span>
    <span class="hl kwa">let</span> p <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">0.0</span> <span class="hl kwa">in</span>
      <span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> len<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl kwa">do</span>
	<span class="hl kwa">let</span> <span class="hl sym">(</span>c<span class="hl sym">,</span> p1<span class="hl sym">) =</span> a<span class="hl sym">.(</span>i<span class="hl sym">)</span> <span class="hl kwa">in</span>
	  chars<span class="hl sym">.(</span>i<span class="hl sym">) &lt;-</span> c<span class="hl sym">;</span>
	  <span class="hl kwa">let</span> p0 <span class="hl sym">= !</span>p <span class="hl sym">+.</span> p1 <span class="hl kwa">in</span>
	    p <span class="hl sym">:=</span> p0<span class="hl sym">;</span>
	    probs<span class="hl sym">.(</span>i<span class="hl sym">) &lt;-</span> p0
      <span class="hl kwa">done</span><span class="hl sym">;</span>
    <span class="hl sym">{</span>
      probs <span class="hl sym">=</span> probs<span class="hl sym">;</span>
      chars <span class="hl sym">=</span> chars<span class="hl sym">;</span>
      cache <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>create im '\000'<span class="hl sym">;</span>
    <span class="hl sym">}</span>

<span class="hl com">(* Dichotomy is actually slower than linear search on small tables. *)</span>
  <span class="hl kwa">let</span> find t p <span class="hl sym">=</span>
    <span class="hl kwa">let</span> ps <span class="hl sym">=</span> t<span class="hl sym">.</span>probs <span class="hl kwa">in</span>
    <span class="hl kwa">let</span> i <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">in</span>
      <span class="hl kwa">while</span> p <span class="hl sym">&gt;=</span> ps<span class="hl sym">.(!</span>i<span class="hl sym">)</span> <span class="hl kwa">do</span> incr i <span class="hl kwa">done</span><span class="hl sym">;</span>
      <span class="hl sym">!</span>i

  <span class="hl kwa">let</span> rand_char t <span class="hl sym">=</span>
    <span class="hl kwa">let</span> n <span class="hl sym">=</span> gen_random <span class="hl sym">()</span> <span class="hl kwa">in</span>
    <span class="hl kwa">let</span> c <span class="hl sym">=</span>  t<span class="hl sym">.</span>cache<span class="hl sym">.(</span>n<span class="hl sym">)</span> <span class="hl kwa">in</span>
      <span class="hl kwa">if</span> c <span class="hl sym">=</span> '\000' <span class="hl kwa">then</span>
	<span class="hl kwa">let</span> p <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">. *.</span> <span class="hl kwb">float</span> n <span class="hl sym">/.</span> im_f <span class="hl kwa">in</span>
	<span class="hl kwa">let</span> i <span class="hl sym">=</span> find t p <span class="hl kwa">in</span>
	  <span class="hl kwa">let</span> c <span class="hl sym">=</span> t<span class="hl sym">.</span>chars<span class="hl sym">.(</span>i<span class="hl sym">)</span> <span class="hl kwa">in</span>
	    t<span class="hl sym">.</span>cache<span class="hl sym">.(</span>n<span class="hl sym">) &lt;-</span> c<span class="hl sym">;</span>
	    c
      <span class="hl kwa">else</span>
	c
<span class="hl kwa">end</span>

<span class="hl kwa">let</span> width <span class="hl sym">=</span> <span class="hl num">60</span>

<span class="hl kwa">module</span> <span class="hl kwd">IMPLEMENTATION32</span> <span class="hl sym">=</span> <span class="hl kwa">struct</span>

<span class="hl kwa">module</span> <span class="hl kwd">Buffer</span> <span class="hl sym">:</span> <span class="hl kwa">sig</span>

  <span class="hl kwa">val</span> add_substring <span class="hl sym">:</span> <span class="hl kwb">string</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">int</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">int</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">unit</span>
  <span class="hl kwa">val</span> add_string <span class="hl sym">:</span> <span class="hl kwb">string</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">unit</span>
  <span class="hl kwa">val</span> add_char <span class="hl sym">:</span> char <span class="hl sym">-&gt;</span> <span class="hl kwb">unit</span>

  <span class="hl kwa">val</span> clear <span class="hl sym">:</span> <span class="hl kwb">unit</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">unit</span>
  <span class="hl kwa">val</span> print <span class="hl sym">:</span> <span class="hl kwb">unit</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">unit</span>

<span class="hl kwa">end</span> <span class="hl sym">=</span> <span class="hl kwa">struct</span>

  <span class="hl kwa">let</span> buffer_len <span class="hl sym">=</span> <span class="hl num">1_000_000</span>
  <span class="hl kwa">let</span> buffers <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>init <span class="hl num">150</span> <span class="hl sym">(</span><span class="hl kwa">fun</span> _ <span class="hl sym">-&gt;</span> <span class="hl kwc">String</span><span class="hl sym">.</span>create buffer_len<span class="hl sym">)</span>
  <span class="hl kwa">let</span> nbuffer <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span>
  <span class="hl kwa">let</span> buffer_pos <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span>
  <span class="hl kwa">let</span> current_buffer <span class="hl sym">=</span> <span class="hl kwb">ref</span> buffers<span class="hl sym">.(</span><span class="hl num">0</span><span class="hl sym">)</span>

  <span class="hl kwa">let</span> add_substring s pos len <span class="hl sym">=</span>
    <span class="hl kwa">let</span> rem <span class="hl sym">=</span> buffer_len <span class="hl sym">- !</span>buffer_pos <span class="hl kwa">in</span>
      <span class="hl kwa">if</span> rem <span class="hl sym">&gt;=</span> len <span class="hl kwa">then begin</span>
	<span class="hl kwc">String</span><span class="hl sym">.</span>blit s pos <span class="hl sym">!</span>current_buffer <span class="hl sym">!</span>buffer_pos len<span class="hl sym">;</span>
	buffer_pos <span class="hl sym">:= !</span>buffer_pos <span class="hl sym">+</span> len
      <span class="hl kwa">end else</span>
	<span class="hl kwa">if</span> rem <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">then begin</span>
	  incr nbuffer<span class="hl sym">;</span>
	  current_buffer <span class="hl sym">:=</span> buffers<span class="hl sym">.(!</span>nbuffer<span class="hl sym">);</span>
	    <span class="hl kwc">String</span><span class="hl sym">.</span>blit s pos <span class="hl sym">!</span>current_buffer <span class="hl num">0</span> len<span class="hl sym">;</span>
	    buffer_pos <span class="hl sym">:=</span> len<span class="hl sym">;</span>
	<span class="hl kwa">end else begin</span>
	  <span class="hl kwc">String</span><span class="hl sym">.</span>blit s pos <span class="hl sym">!</span>current_buffer <span class="hl sym">!</span>buffer_pos rem<span class="hl sym">;</span>
	  incr nbuffer<span class="hl sym">;</span>
	  current_buffer <span class="hl sym">:=</span> buffers<span class="hl sym">.(!</span>nbuffer<span class="hl sym">);</span>
	  <span class="hl kwa">let</span> len2 <span class="hl sym">=</span> len <span class="hl sym">-</span> rem <span class="hl kwa">in</span>
	    <span class="hl kwc">String</span><span class="hl sym">.</span>blit s <span class="hl sym">(</span>pos<span class="hl sym">+</span>rem<span class="hl sym">) !</span>current_buffer <span class="hl num">0</span> len2<span class="hl sym">;</span>
	    buffer_pos <span class="hl sym">:=</span> len2<span class="hl sym">;</span>
	<span class="hl kwa">end</span>

  <span class="hl kwa">let</span> add_string s <span class="hl sym">=</span>
    add_substring s <span class="hl num">0</span> <span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">.</span>length s<span class="hl sym">)</span>

  <span class="hl kwa">let</span> add_char c <span class="hl sym">=</span>
    <span class="hl kwa">if</span> <span class="hl sym">!</span>buffer_pos <span class="hl sym">&lt;</span> buffer_len <span class="hl kwa">then begin</span>
      <span class="hl sym">!</span>current_buffer<span class="hl sym">.[!</span>buffer_pos<span class="hl sym">] &lt;-</span> c<span class="hl sym">;</span>
      incr buffer_pos
    <span class="hl kwa">end else begin</span>
      incr nbuffer<span class="hl sym">;</span>
      current_buffer <span class="hl sym">:=</span> buffers<span class="hl sym">.(!</span>nbuffer<span class="hl sym">);</span>
      <span class="hl sym">!</span>current_buffer<span class="hl sym">.[</span><span class="hl num">0</span><span class="hl sym">] &lt;-</span> c<span class="hl sym">;</span>
      buffer_pos <span class="hl sym">:=</span> <span class="hl num">1</span><span class="hl sym">;</span>
    <span class="hl kwa">end</span>

  <span class="hl kwa">let</span> clear <span class="hl sym">() =</span>
    buffer_pos <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    nbuffer <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    current_buffer <span class="hl sym">:=</span> buffers<span class="hl sym">.(</span><span class="hl num">0</span><span class="hl sym">)</span>

  <span class="hl kwa">let</span> print <span class="hl sym">() =</span>
    <span class="hl kwa">let rec</span> iter buffer i len <span class="hl sym">=</span>
      <span class="hl kwa">if</span> len <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then begin</span>
	<span class="hl kwa">let</span> nw <span class="hl sym">=</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>write <span class="hl kwc">Unix</span><span class="hl sym">.</span>stdout buffer i  len <span class="hl kwa">in</span>
	  iter buffer <span class="hl sym">(</span>i<span class="hl sym">+</span>nw<span class="hl sym">) (</span>len<span class="hl sym">-</span>nw<span class="hl sym">)</span>
      <span class="hl kwa">end</span>
    <span class="hl kwa">in</span>
      <span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> <span class="hl sym">!</span>nbuffer <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl kwa">do</span>
	iter buffers<span class="hl sym">.(</span>i<span class="hl sym">)</span> <span class="hl num">0</span> buffer_len
      <span class="hl kwa">done</span><span class="hl sym">;</span>
      iter buffers<span class="hl sym">.(!</span>nbuffer<span class="hl sym">)</span> <span class="hl num">0</span> <span class="hl sym">!</span>buffer_pos<span class="hl sym">;</span>
      clear <span class="hl sym">()</span>

<span class="hl kwa">end</span>

<span class="hl kwa">let</span> add_header id desc <span class="hl sym">=</span>
  <span class="hl kwc">Buffer</span><span class="hl sym">.</span>add_char '<span class="hl sym">&gt;</span>'<span class="hl sym">;</span>
  <span class="hl kwc">Buffer</span><span class="hl sym">.</span>add_string id<span class="hl sym">;</span>
  <span class="hl kwc">Buffer</span><span class="hl sym">.</span>add_char ' '<span class="hl sym">;</span>
  <span class="hl kwc">Buffer</span><span class="hl sym">.</span>add_string desc<span class="hl sym">;</span>
  <span class="hl kwc">Buffer</span><span class="hl sym">.</span>add_char '\n'

<span class="hl kwa">let</span> make_random_fasta id desc table n <span class="hl sym">=</span>
  add_header id desc<span class="hl sym">;</span>
  <span class="hl kwa">let</span> table <span class="hl sym">=</span> <span class="hl kwc">Cumul_tbl</span><span class="hl sym">.</span>make table <span class="hl kwa">in</span>
  <span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl kwa">to</span> n <span class="hl sym">/</span> width <span class="hl kwa">do</span>
    <span class="hl kwa">for</span> j <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> width<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl kwa">do</span> <span class="hl kwc">Buffer</span><span class="hl sym">.</span>add_char<span class="hl sym">(</span><span class="hl kwc">Cumul_tbl</span><span class="hl sym">.</span>rand_char table<span class="hl sym">);</span> <span class="hl kwa">done</span><span class="hl sym">;</span>
    <span class="hl kwc">Buffer</span><span class="hl sym">.</span>add_char '\n'
  <span class="hl kwa">done</span><span class="hl sym">;</span>
  <span class="hl kwa">let</span> w <span class="hl sym">=</span> n <span class="hl kwa">mod</span> width <span class="hl kwa">in</span>
  <span class="hl kwa">if</span> w <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span> <span class="hl sym">(</span>
    <span class="hl kwa">for</span> j <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl kwa">to</span> w <span class="hl kwa">do</span> <span class="hl kwc">Buffer</span><span class="hl sym">.</span>add_char<span class="hl sym">(</span><span class="hl kwc">Cumul_tbl</span><span class="hl sym">.</span>rand_char table<span class="hl sym">);</span> <span class="hl kwa">done</span><span class="hl sym">;</span>
    <span class="hl kwc">Buffer</span><span class="hl sym">.</span>add_char '\n'
  <span class="hl sym">)</span>

<span class="hl com">(* [write s i0 l w] outputs [w] chars of [s.[0 .. l]], followed by a</span>
<span class="hl com">   newline, starting with [s.[i0]] and considering the substring [s.[0</span>
<span class="hl com">   .. l]] as a &quot;circle&quot;.</span>
<span class="hl com">   One assumes [0 &lt;= i0 &lt;= l &lt;= String.length s].</span>
<span class="hl com">   &#64;return [i0] needed for subsequent writes.  *)</span>
<span class="hl kwa">let rec</span> write s i0 l w <span class="hl sym">=</span>
  <span class="hl kwa">let</span> len <span class="hl sym">=</span> l <span class="hl sym">-</span> i0 <span class="hl kwa">in</span>
  <span class="hl kwa">if</span> w <span class="hl sym">&lt;=</span> len <span class="hl kwa">then begin</span>
    <span class="hl kwc">Buffer</span><span class="hl sym">.</span>add_substring s i0 w<span class="hl sym">;</span>
    <span class="hl kwc">Buffer</span><span class="hl sym">.</span>add_char '\n'<span class="hl sym">;</span> i0 <span class="hl sym">+</span> w
  <span class="hl kwa">end</span>
  <span class="hl kwa">else begin</span>
    <span class="hl kwc">Buffer</span><span class="hl sym">.</span>add_substring s i0 len<span class="hl sym">;</span>
    write s <span class="hl num">0</span> l <span class="hl sym">(</span>w <span class="hl sym">-</span> len<span class="hl sym">);</span>
  <span class="hl kwa">end</span>

<span class="hl kwa">let</span> make_repeat_fasta id desc src n <span class="hl sym">=</span>
  add_header id desc<span class="hl sym">;</span>
  <span class="hl kwa">let</span> l <span class="hl sym">=</span> <span class="hl kwc">String</span><span class="hl sym">.</span>length src
  <span class="hl kwa">and</span> i0 <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">in</span>
  <span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl kwa">to</span> n <span class="hl sym">/</span> width <span class="hl kwa">do</span>
    i0 <span class="hl sym">:=</span> write src <span class="hl sym">!</span>i0 l width<span class="hl sym">;</span>
  <span class="hl kwa">done</span><span class="hl sym">;</span>
  <span class="hl kwa">let</span> w <span class="hl sym">=</span> n <span class="hl kwa">mod</span> width <span class="hl kwa">in</span>
  <span class="hl kwa">if</span> w <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span> ignore<span class="hl sym">(</span>write src <span class="hl sym">!</span>i0 l w<span class="hl sym">)</span>


<span class="hl kwa">let</span> main n <span class="hl sym">=</span>
      <span class="hl kwc">Spawner</span><span class="hl sym">.</span>spawn <span class="hl kwa">true</span> <span class="hl sym">(</span><span class="hl kwa">fun</span> _ <span class="hl sym">-&gt;</span>
			  make_repeat_fasta <span class="hl str">&quot;ONE&quot;</span> <span class="hl str">&quot;Homo sapiens alu&quot;</span> alu <span class="hl sym">(</span>n<span class="hl sym">*</span><span class="hl num">2</span><span class="hl sym">);</span>
			  <span class="hl sym">())</span> <span class="hl kwc">Buffer</span><span class="hl sym">.</span>print<span class="hl sym">;</span>
      <span class="hl kwc">Buffer</span><span class="hl sym">.</span>clear <span class="hl sym">();</span>
      make_random_fasta <span class="hl str">&quot;TWO&quot;</span> <span class="hl str">&quot;IUB ambiguity codes&quot;</span> iub <span class="hl sym">(</span>n<span class="hl sym">*</span><span class="hl num">3</span><span class="hl sym">);</span>
      <span class="hl kwc">Spawner</span><span class="hl sym">.</span>spawn <span class="hl kwa">true</span> <span class="hl sym">(</span><span class="hl kwa">fun</span> _ <span class="hl sym">-&gt; ())</span> <span class="hl kwc">Buffer</span><span class="hl sym">.</span>print<span class="hl sym">;</span>
      <span class="hl kwc">Buffer</span><span class="hl sym">.</span>clear <span class="hl sym">();</span>
      make_random_fasta <span class="hl str">&quot;THREE&quot;</span> <span class="hl str">&quot;Homo sapiens frequency&quot;</span> homosapiens <span class="hl sym">(</span>n<span class="hl sym">*</span><span class="hl num">5</span><span class="hl sym">);</span>
      <span class="hl kwc">Spawner</span><span class="hl sym">.</span>spawn <span class="hl kwa">false</span> <span class="hl sym">(</span><span class="hl kwa">fun</span> _ <span class="hl sym">-&gt; ())</span> <span class="hl kwc">Buffer</span><span class="hl sym">.</span>print<span class="hl sym">;</span>
      <span class="hl kwc">Buffer</span><span class="hl sym">.</span>clear <span class="hl sym">();</span>


<span class="hl kwa">end</span>

<span class="hl kwa">module</span> <span class="hl kwd">IMPLEMENTATION64</span> <span class="hl sym">=</span> <span class="hl kwa">struct</span>

<span class="hl kwa">module</span> <span class="hl kwd">Buffer</span> <span class="hl sym">:</span> <span class="hl kwa">sig</span>

  <span class="hl kwa">val</span> add_substring <span class="hl sym">:</span> <span class="hl kwb">string</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">int</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">int</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">unit</span>
  <span class="hl kwa">val</span> add_string <span class="hl sym">:</span> <span class="hl kwb">string</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">unit</span>
  <span class="hl kwa">val</span> add_char <span class="hl sym">:</span> char <span class="hl sym">-&gt;</span> <span class="hl kwb">unit</span>
  <span class="hl kwa">val</span> add_copy <span class="hl sym">:</span> <span class="hl kwb">int</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">int</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">unit</span>

  <span class="hl kwa">val</span> length <span class="hl sym">:</span> <span class="hl kwb">unit</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">int</span>

  <span class="hl kwa">val</span> clear <span class="hl sym">:</span> <span class="hl kwb">unit</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">unit</span>
  <span class="hl kwa">val</span> print <span class="hl sym">:</span> <span class="hl kwb">unit</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">unit</span>

  <span class="hl kwa">val</span> check_char <span class="hl sym">:</span> char <span class="hl sym">-&gt;</span> <span class="hl kwb">unit</span>
  <span class="hl kwa">val</span> check_copy <span class="hl sym">:</span> <span class="hl kwb">int</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">int</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">unit</span>


<span class="hl kwa">end</span> <span class="hl sym">=</span> <span class="hl kwa">struct</span>

  <span class="hl kwa">let</span> buffer_len <span class="hl sym">=</span> <span class="hl kwa">if</span> arch64 <span class="hl kwa">then</span> <span class="hl num">150_000_000</span> <span class="hl kwa">else</span> <span class="hl num">1</span>
  <span class="hl kwa">let</span> buffer <span class="hl sym">=</span> <span class="hl kwc">String</span><span class="hl sym">.</span>create buffer_len
  <span class="hl kwa">let</span> buffer_pos <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span>

  <span class="hl kwa">let</span> length <span class="hl sym">() = !</span>buffer_pos

  <span class="hl kwa">let</span> add_substring s pos len <span class="hl sym">=</span>
    <span class="hl kwc">String</span><span class="hl sym">.</span>blit s pos buffer <span class="hl sym">!</span>buffer_pos len<span class="hl sym">;</span>
    buffer_pos <span class="hl sym">:= !</span>buffer_pos <span class="hl sym">+</span> len

  <span class="hl kwa">let</span> add_string s <span class="hl sym">=</span>
    add_substring s <span class="hl num">0</span> <span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">.</span>length s<span class="hl sym">)</span>

  <span class="hl kwa">let</span> add_char c <span class="hl sym">=</span>
    buffer<span class="hl sym">.[!</span>buffer_pos<span class="hl sym">] &lt;-</span> c<span class="hl sym">;</span>
    incr buffer_pos

  <span class="hl kwa">let</span> check_char c <span class="hl sym">=</span>
    <span class="hl kwa">if</span> buffer<span class="hl sym">.[!</span>buffer_pos<span class="hl sym">] &lt;&gt;</span> c <span class="hl kwa">then begin</span>
      <span class="hl kwc">Printf</span><span class="hl sym">.</span>fprintf stderr <span class="hl str">&quot;check_char [%d]</span><span class="hl esc">\n</span><span class="hl str">%!&quot;</span> <span class="hl sym">!</span>buffer_pos<span class="hl sym">;</span>
      exit <span class="hl num">2</span><span class="hl sym">;</span>
    <span class="hl kwa">end</span><span class="hl sym">;</span>
    incr buffer_pos

  <span class="hl kwa">let</span> clear <span class="hl sym">() =</span> buffer_pos <span class="hl sym">:=</span> <span class="hl num">0</span>

  <span class="hl kwa">let</span> print <span class="hl sym">() =</span>
    <span class="hl kwa">let rec</span> iter i len <span class="hl sym">=</span>
      <span class="hl kwa">if</span> len <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then begin</span>
	<span class="hl kwa">let</span> nw <span class="hl sym">=</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>write <span class="hl kwc">Unix</span><span class="hl sym">.</span>stdout buffer i  len <span class="hl kwa">in</span>
	  iter <span class="hl sym">(</span>i<span class="hl sym">+</span>nw<span class="hl sym">) (</span>len<span class="hl sym">-</span>nw<span class="hl sym">)</span>
      <span class="hl kwa">end</span>

    <span class="hl kwa">in</span>
      iter <span class="hl num">0</span> <span class="hl sym">!</span>buffer_pos<span class="hl sym">;</span>
      buffer_pos <span class="hl sym">:=</span> <span class="hl num">0</span>

  <span class="hl kwa">let</span> add_copy src len <span class="hl sym">=</span>
    add_substring buffer src len

  <span class="hl kwa">let rec</span> check_copy src len <span class="hl sym">=</span>
    <span class="hl kwa">if</span> len <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then begin</span>
      <span class="hl kwa">assert</span> <span class="hl sym">(</span>buffer<span class="hl sym">.[</span>src<span class="hl sym">] =</span> buffer<span class="hl sym">.[!</span>buffer_pos<span class="hl sym">]);</span>
      incr buffer_pos<span class="hl sym">;</span>
      check_copy <span class="hl sym">(</span>src<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) (</span>len<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">);</span>
    <span class="hl kwa">end</span>

<span class="hl kwa">end</span>

<span class="hl kwa">let</span> add_header id desc <span class="hl sym">=</span>
  <span class="hl kwc">Buffer</span><span class="hl sym">.</span>add_char '<span class="hl sym">&gt;</span>'<span class="hl sym">;</span>
  <span class="hl kwc">Buffer</span><span class="hl sym">.</span>add_string id<span class="hl sym">;</span>
  <span class="hl kwc">Buffer</span><span class="hl sym">.</span>add_char ' '<span class="hl sym">;</span>
  <span class="hl kwc">Buffer</span><span class="hl sym">.</span>add_string desc<span class="hl sym">;</span>
  <span class="hl kwc">Buffer</span><span class="hl sym">.</span>add_char '\n'

<span class="hl kwa">let</span> make_random_fasta id desc table n <span class="hl sym">=</span>
  add_header id desc<span class="hl sym">;</span>
  <span class="hl kwa">let</span> table <span class="hl sym">=</span> <span class="hl kwc">Cumul_tbl</span><span class="hl sym">.</span>make table <span class="hl kwa">in</span>
  <span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl kwa">to</span> n <span class="hl sym">/</span> width <span class="hl kwa">do</span>
    <span class="hl kwa">for</span> j <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> width<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl kwa">do</span> <span class="hl kwc">Buffer</span><span class="hl sym">.</span>add_char<span class="hl sym">(</span><span class="hl kwc">Cumul_tbl</span><span class="hl sym">.</span>rand_char table<span class="hl sym">);</span> <span class="hl kwa">done</span><span class="hl sym">;</span>
    <span class="hl kwc">Buffer</span><span class="hl sym">.</span>add_char '\n'
  <span class="hl kwa">done</span><span class="hl sym">;</span>
  <span class="hl kwa">let</span> w <span class="hl sym">=</span> n <span class="hl kwa">mod</span> width <span class="hl kwa">in</span>
  <span class="hl kwa">if</span> w <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span> <span class="hl sym">(</span>
    <span class="hl kwa">for</span> j <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl kwa">to</span> w <span class="hl kwa">do</span> <span class="hl kwc">Buffer</span><span class="hl sym">.</span>add_char<span class="hl sym">(</span><span class="hl kwc">Cumul_tbl</span><span class="hl sym">.</span>rand_char table<span class="hl sym">);</span> <span class="hl kwa">done</span><span class="hl sym">;</span>
    <span class="hl kwc">Buffer</span><span class="hl sym">.</span>add_char '\n'
  <span class="hl sym">)</span>


<span class="hl com">(* [write s i0 l w] outputs [w] chars of [s.[0 .. l]], followed by a</span>
<span class="hl com">   newline, starting with [s.[i0]] and considering the substring [s.[0</span>
<span class="hl com">   .. l]] as a &quot;circle&quot;.</span>
<span class="hl com">   One assumes [0 &lt;= i0 &lt;= l &lt;= String.length s].</span>
<span class="hl com">   &#64;return [i0] needed for subsequent writes.  *)</span>
<span class="hl kwa">let rec</span> write s i0 l w <span class="hl sym">=</span>
  <span class="hl kwa">let</span> len <span class="hl sym">=</span> l <span class="hl sym">-</span> i0 <span class="hl kwa">in</span>
  <span class="hl kwa">if</span> w <span class="hl sym">&lt;=</span> len <span class="hl kwa">then begin</span>
    <span class="hl kwc">Buffer</span><span class="hl sym">.</span>add_substring s i0 w<span class="hl sym">;</span>
    <span class="hl kwc">Buffer</span><span class="hl sym">.</span>add_char '\n'<span class="hl sym">;</span> i0 <span class="hl sym">+</span> w
  <span class="hl kwa">end</span>
  <span class="hl kwa">else begin</span>
    <span class="hl kwc">Buffer</span><span class="hl sym">.</span>add_substring s i0 len<span class="hl sym">;</span>
    write s <span class="hl num">0</span> l <span class="hl sym">(</span>w <span class="hl sym">-</span> len<span class="hl sym">);</span>
  <span class="hl kwa">end</span>


<span class="hl kwa">let</span> make_repeat_fasta1 id desc src n <span class="hl sym">=</span>
  add_header id desc<span class="hl sym">;</span>
  <span class="hl kwa">let</span> l <span class="hl sym">=</span> <span class="hl kwc">String</span><span class="hl sym">.</span>length src
  <span class="hl kwa">and</span> i0 <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">in</span>
  <span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl kwa">to</span> n <span class="hl sym">/</span> width <span class="hl kwa">do</span>
    i0 <span class="hl sym">:=</span> write src <span class="hl sym">!</span>i0 l width<span class="hl sym">;</span>
  <span class="hl kwa">done</span><span class="hl sym">;</span>
  <span class="hl kwa">let</span> w <span class="hl sym">=</span> n <span class="hl kwa">mod</span> width <span class="hl kwa">in</span>
  <span class="hl kwa">if</span> w <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span> ignore<span class="hl sym">(</span>write src <span class="hl sym">!</span>i0 l w<span class="hl sym">)</span>

<span class="hl com">(* This version keeps a cache of starting positions of the string in the buffer modulo 61.</span>
<span class="hl com"> After 61 misses, it fills the buffer at exponential speed. Unfortunately, it is useless</span>
<span class="hl com"> as the speed-up for the short computation time is neglectible.</span>
<span class="hl com"></span>
<span class="hl com">let make_repeat_fasta2 id desc src n =</span>
<span class="hl com">  Buffer.clear ();</span>
<span class="hl com">  add_header id desc;</span>
<span class="hl com">  let cache = Array.create 61 None in</span>
<span class="hl com">  let len_src = String.length src in</span>
<span class="hl com"></span>
<span class="hl com">  let rec iter i n =</span>
<span class="hl com">    if i &lt; n then</span>
<span class="hl com">      let x = i mod 61 in</span>
<span class="hl com">	match cache.(x) with</span>
<span class="hl com">	    Some pos -&gt;</span>
<span class="hl com">(*	      Printf.fprintf stderr &quot;Hit at %d (%d)\n%!&quot; i x; *)</span>
<span class="hl com">	      let len = Buffer.length () - pos in</span>
<span class="hl com">(*		Printf.fprintf stderr &quot;copy %d\n%!&quot; len; *)</span>
<span class="hl com">	      let len = if len &gt; n-i then n-i else len in</span>
<span class="hl com">		Buffer.add_copy pos len;</span>
<span class="hl com">		iter (i+len) n</span>
<span class="hl com">	  | None -&gt;</span>
<span class="hl com">(*	      Printf.fprintf stderr &quot;Miss at %d (%d)\n%!&quot; i x; *)</span>
<span class="hl com">	      cache.(x) &lt;- Some (Buffer.length ());</span>
<span class="hl com">	      let len = if len_src &gt; n-i then n-i else len_src in</span>
<span class="hl com">	      iter2 0 len i x</span>
<span class="hl com"></span>
<span class="hl com">  and iter2 j len i imod =</span>
<span class="hl com">    if j &lt; len then</span>
<span class="hl com">      if imod = 60 then begin</span>
<span class="hl com">	Buffer.add_char '\n';</span>
<span class="hl com">	iter2 j len (i+1) 0</span>
<span class="hl com">      end else begin</span>
<span class="hl com">	Buffer.add_char src.[j];</span>
<span class="hl com">	iter2 (j+1) len (i+1) (imod+1)</span>
<span class="hl com">      end</span>
<span class="hl com">    else</span>
<span class="hl com">      iter i n</span>
<span class="hl com">  in</span>
<span class="hl com">  let n = n + (n / 60) in</span>
<span class="hl com">    iter 0 n;</span>
<span class="hl com">    if n mod 61 &lt;&gt; 0 then</span>
<span class="hl com">      Buffer.add_char '\n'</span>
<span class="hl com">*)</span>

<span class="hl kwa">let</span> make_repeat_fasta id desc src n <span class="hl sym">=</span>
  make_repeat_fasta1 id desc src n<span class="hl sym">;</span>
<span class="hl com">(*    make_repeat_fasta2 id desc src n; *)</span>
    <span class="hl sym">()</span>

<span class="hl kwa">let</span> main n <span class="hl sym">=</span>
      <span class="hl kwc">Spawner</span><span class="hl sym">.</span>spawn <span class="hl kwa">true</span> <span class="hl sym">(</span><span class="hl kwa">fun</span> _ <span class="hl sym">-&gt;</span>
			  make_repeat_fasta <span class="hl str">&quot;ONE&quot;</span> <span class="hl str">&quot;Homo sapiens alu&quot;</span> alu <span class="hl sym">(</span>n<span class="hl sym">*</span><span class="hl num">2</span><span class="hl sym">);</span>
			  <span class="hl sym">())</span> <span class="hl kwc">Buffer</span><span class="hl sym">.</span>print<span class="hl sym">;</span>
      <span class="hl kwc">Buffer</span><span class="hl sym">.</span>clear <span class="hl sym">();</span>
      make_random_fasta <span class="hl str">&quot;TWO&quot;</span> <span class="hl str">&quot;IUB ambiguity codes&quot;</span> iub <span class="hl sym">(</span>n<span class="hl sym">*</span><span class="hl num">3</span><span class="hl sym">);</span>
      <span class="hl kwc">Spawner</span><span class="hl sym">.</span>spawn <span class="hl kwa">true</span> <span class="hl sym">(</span><span class="hl kwa">fun</span> _ <span class="hl sym">-&gt; ())</span> <span class="hl kwc">Buffer</span><span class="hl sym">.</span>print<span class="hl sym">;</span>
      <span class="hl kwc">Buffer</span><span class="hl sym">.</span>clear <span class="hl sym">();</span>
      make_random_fasta <span class="hl str">&quot;THREE&quot;</span> <span class="hl str">&quot;Homo sapiens frequency&quot;</span> homosapiens <span class="hl sym">(</span>n<span class="hl sym">*</span><span class="hl num">5</span><span class="hl sym">);</span>
      <span class="hl kwc">Spawner</span><span class="hl sym">.</span>spawn <span class="hl kwa">false</span> <span class="hl sym">(</span><span class="hl kwa">fun</span> _ <span class="hl sym">-&gt; ())</span> <span class="hl kwc">Buffer</span><span class="hl sym">.</span>print<span class="hl sym">;</span>
      <span class="hl kwc">Buffer</span><span class="hl sym">.</span>clear <span class="hl sym">();</span>

<span class="hl kwa">end</span>


<span class="hl kwa">let</span> <span class="hl sym">() =</span>
  <span class="hl kwa">let</span> n <span class="hl sym">=</span> <span class="hl kwa">try</span> int_of_string<span class="hl sym">(</span><span class="hl kwc">Array</span><span class="hl sym">.</span>get <span class="hl kwc">Sys</span><span class="hl sym">.</span>argv <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">with</span> _ <span class="hl sym">-&gt;</span> <span class="hl num">1000</span> <span class="hl kwa">in</span>
  <span class="hl kwa">if</span> arch64 <span class="hl kwa">then</span>
    <span class="hl kwc">IMPLEMENTATION64</span><span class="hl sym">.</span>main n
  <span class="hl kwa">else</span>
    <span class="hl kwc">IMPLEMENTATION32</span><span class="hl sym">.</span>main n
