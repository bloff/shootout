<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Contributed by Jim Rogers</span>
<span class="hl slc">-- Modified by Georg Bauhaus</span>
<span class="hl slc">--</span>
<span class="hl slc">-- This version uses the GNAT Spitbol Pattern matching libraries</span>
<span class="hl slc">-- rather than the more commonly used Unix-style regex libraries</span>

<span class="hl kwa">with</span> Gnat<span class="hl sym">.</span>Spitbol<span class="hl sym">.</span>Patterns<span class="hl sym">;</span> <span class="hl kwa">use</span> Gnat<span class="hl sym">.</span>Spitbol<span class="hl sym">.</span>Patterns<span class="hl sym">;</span>
<span class="hl kwa">use</span> Gnat<span class="hl sym">.</span>Spitbol<span class="hl sym">;</span>

<span class="hl kwa">package</span> DNA <span class="hl kwa">is</span>

   <span class="hl kwa">subtype</span> Variant_Index <span class="hl kwa">is</span> <span class="hl kwb">Positive</span> <span class="hl kwa">range</span> <span class="hl num">1</span><span class="hl sym">.</span><span class="hl num">.9</span><span class="hl sym">;</span>
   Variant_Labels <span class="hl sym">:</span> <span class="hl kwa">constant array</span> <span class="hl sym">(</span>Variant_Index<span class="hl sym">)</span> <span class="hl kwa">of</span> Vstring <span class="hl sym">:= (</span>
      V<span class="hl sym">(</span><span class="hl str">&quot;agggtaaa|tttaccct&quot;</span><span class="hl sym">),</span>
      V<span class="hl sym">(</span><span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="hl sym">),</span>
      V<span class="hl sym">(</span><span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="hl sym">),</span>
      V<span class="hl sym">(</span><span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="hl sym">),</span>
      V<span class="hl sym">(</span><span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="hl sym">),</span>
      V<span class="hl sym">(</span><span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="hl sym">),</span>
      V<span class="hl sym">(</span><span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="hl sym">),</span>
      V<span class="hl sym">(</span><span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="hl sym">),</span>
      V<span class="hl sym">(</span><span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span><span class="hl sym">));</span>

   Variant_Patterns <span class="hl sym">:</span> <span class="hl kwa">constant array</span><span class="hl sym">(</span>Variant_Index<span class="hl sym">)</span> <span class="hl kwa">of</span> Pattern <span class="hl sym">:= (</span>
      <span class="hl str">&quot;agggtaaa&quot;</span> <span class="hl kwa">or</span> <span class="hl str">&quot;tttaccct&quot;</span><span class="hl sym">,</span>
      <span class="hl sym">(</span>Any<span class="hl sym">(</span><span class="hl str">&quot;cgt&quot;</span><span class="hl sym">) &amp;</span> <span class="hl str">&quot;gggtaaa&quot;</span><span class="hl sym">)</span> <span class="hl kwa">or</span> <span class="hl sym">(</span><span class="hl str">&quot;tttaccc&quot;</span> <span class="hl sym">&amp;</span> Any<span class="hl sym">(</span><span class="hl str">&quot;acg&quot;</span><span class="hl sym">)),</span>
      <span class="hl sym">(</span><span class="hl str">&quot;a&quot;</span> <span class="hl sym">&amp;</span> Any<span class="hl sym">(</span><span class="hl str">&quot;act&quot;</span><span class="hl sym">) &amp;</span> <span class="hl str">&quot;ggtaaa&quot;</span><span class="hl sym">)</span> <span class="hl kwa">or</span> <span class="hl sym">(</span><span class="hl str">&quot;tttacc&quot;</span> <span class="hl sym">&amp;</span> Any<span class="hl sym">(</span><span class="hl str">&quot;agt&quot;</span><span class="hl sym">) &amp;</span> <span class="hl str">&quot;t&quot;</span><span class="hl sym">),</span>
      <span class="hl sym">(</span><span class="hl str">&quot;ag&quot;</span> <span class="hl sym">&amp;</span> Any<span class="hl sym">(</span><span class="hl str">&quot;act&quot;</span><span class="hl sym">) &amp;</span> <span class="hl str">&quot;gtaaa&quot;</span><span class="hl sym">)</span> <span class="hl kwa">or</span> <span class="hl sym">(</span><span class="hl str">&quot;tttac&quot;</span> <span class="hl sym">&amp;</span> Any<span class="hl sym">(</span><span class="hl str">&quot;agt&quot;</span><span class="hl sym">) &amp;</span> <span class="hl str">&quot;ct&quot;</span><span class="hl sym">),</span>
      <span class="hl sym">(</span><span class="hl str">&quot;agg&quot;</span> <span class="hl sym">&amp;</span> Any<span class="hl sym">(</span><span class="hl str">&quot;act&quot;</span><span class="hl sym">) &amp;</span> <span class="hl str">&quot;taaa&quot;</span><span class="hl sym">)</span> <span class="hl kwa">or</span> <span class="hl sym">(</span><span class="hl str">&quot;ttta&quot;</span> <span class="hl sym">&amp;</span> Any<span class="hl sym">(</span><span class="hl str">&quot;agt&quot;</span><span class="hl sym">) &amp;</span> <span class="hl str">&quot;cct&quot;</span><span class="hl sym">),</span>
      <span class="hl sym">(</span><span class="hl str">&quot;aggg&quot;</span> <span class="hl sym">&amp;</span> Any<span class="hl sym">(</span><span class="hl str">&quot;acg&quot;</span><span class="hl sym">) &amp;</span> <span class="hl str">&quot;aaa&quot;</span><span class="hl sym">)</span> <span class="hl kwa">or</span> <span class="hl sym">(</span><span class="hl str">&quot;ttt&quot;</span> <span class="hl sym">&amp;</span> Any<span class="hl sym">(</span><span class="hl str">&quot;cgt&quot;</span><span class="hl sym">) &amp;</span> <span class="hl str">&quot;ccct&quot;</span><span class="hl sym">),</span>
      <span class="hl sym">(</span><span class="hl str">&quot;agggt&quot;</span> <span class="hl sym">&amp;</span> Any<span class="hl sym">(</span><span class="hl str">&quot;cgt&quot;</span><span class="hl sym">) &amp;</span> <span class="hl str">&quot;aa&quot;</span><span class="hl sym">)</span> <span class="hl kwa">or</span> <span class="hl sym">(</span><span class="hl str">&quot;tt&quot;</span> <span class="hl sym">&amp;</span> Any<span class="hl sym">(</span><span class="hl str">&quot;acg&quot;</span><span class="hl sym">) &amp;</span> <span class="hl str">&quot;accct&quot;</span><span class="hl sym">),</span>
      <span class="hl sym">(</span><span class="hl str">&quot;agggta&quot;</span> <span class="hl sym">&amp;</span> Any<span class="hl sym">(</span><span class="hl str">&quot;cgt&quot;</span><span class="hl sym">) &amp;</span> <span class="hl str">&quot;a&quot;</span><span class="hl sym">)</span> <span class="hl kwa">or</span> <span class="hl sym">(</span><span class="hl str">&quot;t&quot;</span> <span class="hl sym">&amp;</span> Any<span class="hl sym">(</span><span class="hl str">&quot;acg&quot;</span><span class="hl sym">) &amp;</span> <span class="hl str">&quot;taccct&quot;</span><span class="hl sym">),</span>
      <span class="hl sym">(</span><span class="hl str">&quot;agggtaa&quot;</span> <span class="hl sym">&amp;</span> Any<span class="hl sym">(</span><span class="hl str">&quot;cgt&quot;</span><span class="hl sym">))</span> <span class="hl kwa">or</span> <span class="hl sym">(</span>Any<span class="hl sym">(</span><span class="hl str">&quot;acg&quot;</span><span class="hl sym">) &amp;</span> <span class="hl str">&quot;ttaccct&quot;</span><span class="hl sym">));</span>

   <span class="hl kwa">type</span> Iub <span class="hl kwa">is</span>
      <span class="hl kwa">record</span>
         Code         <span class="hl sym">:</span> Pattern<span class="hl sym">;</span>
         Alternatives <span class="hl sym">:</span> VString<span class="hl sym">;</span>
   <span class="hl kwa">end record</span><span class="hl sym">;</span>
   <span class="hl kwa">subtype</span> Codes_Index <span class="hl kwa">is</span> <span class="hl kwb">Natural</span> <span class="hl kwa">range</span> <span class="hl num">1</span><span class="hl sym">.</span><span class="hl num">.11</span><span class="hl sym">;</span>
   <span class="hl kwa">type</span> Codes_Array <span class="hl kwa">is array</span> <span class="hl sym">(</span>Codes_Index<span class="hl sym">)</span> <span class="hl kwa">of</span> Iub<span class="hl sym">;</span>
   Codes <span class="hl sym">:</span> <span class="hl kwa">constant</span> Codes_Array <span class="hl sym">:= (</span>
      <span class="hl sym">(</span>Any<span class="hl sym">(</span><span class="hl str">&quot;B&quot;</span><span class="hl sym">),</span> V<span class="hl sym">(</span><span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl sym">)),</span>
      <span class="hl sym">(</span>Any<span class="hl sym">(</span><span class="hl str">&quot;D&quot;</span><span class="hl sym">),</span> V<span class="hl sym">(</span><span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl sym">)),</span>
      <span class="hl sym">(</span>Any<span class="hl sym">(</span><span class="hl str">&quot;H&quot;</span><span class="hl sym">),</span> V<span class="hl sym">(</span><span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl sym">)),</span>
      <span class="hl sym">(</span>Any<span class="hl sym">(</span><span class="hl str">&quot;K&quot;</span><span class="hl sym">),</span> V<span class="hl sym">(</span><span class="hl str">&quot;(g|t)&quot;</span><span class="hl sym">)),</span>
      <span class="hl sym">(</span>Any<span class="hl sym">(</span><span class="hl str">&quot;M&quot;</span><span class="hl sym">),</span> V<span class="hl sym">(</span><span class="hl str">&quot;(a|c)&quot;</span><span class="hl sym">)),</span>
      <span class="hl sym">(</span>Any<span class="hl sym">(</span><span class="hl str">&quot;N&quot;</span><span class="hl sym">),</span> V<span class="hl sym">(</span><span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl sym">)),</span>
      <span class="hl sym">(</span>Any<span class="hl sym">(</span><span class="hl str">&quot;R&quot;</span><span class="hl sym">),</span> V<span class="hl sym">(</span><span class="hl str">&quot;(a|g)&quot;</span><span class="hl sym">)),</span>
      <span class="hl sym">(</span>Any<span class="hl sym">(</span><span class="hl str">&quot;S&quot;</span><span class="hl sym">),</span> V<span class="hl sym">(</span><span class="hl str">&quot;(c|g)&quot;</span><span class="hl sym">)),</span>
      <span class="hl sym">(</span>Any<span class="hl sym">(</span><span class="hl str">&quot;V&quot;</span><span class="hl sym">),</span> V<span class="hl sym">(</span><span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl sym">)),</span>
      <span class="hl sym">(</span>Any<span class="hl sym">(</span><span class="hl str">&quot;W&quot;</span><span class="hl sym">),</span> V<span class="hl sym">(</span><span class="hl str">&quot;(a|t)&quot;</span><span class="hl sym">)),</span>
      <span class="hl sym">(</span>Any<span class="hl sym">(</span><span class="hl str">&quot;Y&quot;</span><span class="hl sym">),</span> V<span class="hl sym">(</span><span class="hl str">&quot;(c|t)&quot;</span><span class="hl sym">)));</span>

   <span class="hl kwa">type</span> Lines <span class="hl kwa">is array</span><span class="hl sym">(</span><span class="hl kwb">Positive</span> <span class="hl kwa">range</span> <span class="hl sym">&lt;&gt;)</span> <span class="hl kwa">of</span> Vstring<span class="hl sym">;</span>

<span class="hl kwa">end</span> DNA<span class="hl sym">;</span>

<span class="hl slc">-- ----------------</span>
<span class="hl slc">-- main subprogram</span>
<span class="hl slc">-- ----------------</span>
<span class="hl kwa">with</span> Ada<span class="hl sym">.</span>Text_Io<span class="hl sym">;</span> <span class="hl kwa">use</span> Ada<span class="hl sym">.</span>Text_Io<span class="hl sym">;</span>
<span class="hl kwa">with</span> Ada<span class="hl sym">.</span>Integer_Text_IO<span class="hl sym">;</span> <span class="hl kwa">use</span> Ada<span class="hl sym">.</span>Integer_Text_IO<span class="hl sym">;</span>
<span class="hl kwa">with</span> Ada<span class="hl sym">.</span>Strings<span class="hl sym">.</span>Unbounded<span class="hl sym">;</span>  <span class="hl kwa">use</span> Ada<span class="hl sym">.</span>Strings<span class="hl sym">.</span>Unbounded<span class="hl sym">;</span>
<span class="hl kwa">with</span> Gnat<span class="hl sym">.</span>Spitbol<span class="hl sym">.</span>Patterns<span class="hl sym">;</span> <span class="hl kwa">use</span> Gnat<span class="hl sym">.</span>Spitbol<span class="hl sym">.</span>Patterns<span class="hl sym">;</span>
<span class="hl kwa">use</span> Gnat<span class="hl sym">.</span>Spitbol<span class="hl sym">;</span>

<span class="hl kwa">with</span> DNA<span class="hl sym">.</span>Matching<span class="hl sym">;</span>
<span class="hl kwa">with</span> DNA<span class="hl sym">.</span>Replacing<span class="hl sym">;</span>
<span class="hl kwa">use</span> DNA<span class="hl sym">;</span>

<span class="hl kwa">procedure</span> Regexdna <span class="hl kwa">is</span>

   <span class="hl kwa">function</span> Length<span class="hl sym">(</span>Item <span class="hl sym">:</span> <span class="hl kwa">in</span> DNA<span class="hl sym">.</span>Lines<span class="hl sym">)</span> <span class="hl kwa">return</span> <span class="hl kwb">Natural</span> <span class="hl kwa">is</span>
      Sum <span class="hl sym">:</span> <span class="hl kwb">Natural</span> <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">for</span> I <span class="hl kwa">in</span> Item'<span class="hl kwa">range loop</span>
         Sum <span class="hl sym">:=</span> Sum <span class="hl sym">+</span> Size<span class="hl sym">(</span>Item<span class="hl sym">(</span>I<span class="hl sym">));</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>
      <span class="hl kwa">return</span> Sum<span class="hl sym">;</span>
   <span class="hl kwa">end</span> Length<span class="hl sym">;</span>


   Initial_Length <span class="hl sym">:</span> <span class="hl kwb">Natural</span> <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   Code_Length <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span>
   Line <span class="hl sym">:</span> <span class="hl kwb">String</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">.</span><span class="hl num">.80</span><span class="hl sym">);</span>
   Var_Line <span class="hl sym">:</span> Vstring_Var<span class="hl sym">;</span>
   Line_Length <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span>
   Sequence <span class="hl sym">:</span> <span class="hl kwa">aliased</span> Vstring_Var<span class="hl sym">;</span>
   Fasta_Description <span class="hl sym">:</span> <span class="hl kwa">constant</span> Pattern <span class="hl sym">:=</span> Pos<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">) &amp;</span> <span class="hl str">&quot;&gt;&quot;</span> <span class="hl sym">&amp;</span> Rest<span class="hl sym">;</span>
   Num_Lines <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span>
   Split_Length <span class="hl sym">:</span> <span class="hl kwa">constant</span> <span class="hl sym">:=</span> <span class="hl num">80</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>

   <span class="hl slc">-- Read FASTA Sequence</span>
   <span class="hl slc">-- Record length and remove the unwanted elements</span>

   <span class="hl kwa">while not</span> End_Of_File <span class="hl kwa">loop</span>
      Get_Line<span class="hl sym">(</span>Item <span class="hl sym">=&gt;</span> Line<span class="hl sym">,</span> Last <span class="hl sym">=&gt;</span> Line_Length<span class="hl sym">);</span>
      Var_Line <span class="hl sym">:=</span> V<span class="hl sym">(</span>Line<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">..</span>Line_Length<span class="hl sym">));</span>
      Initial_Length <span class="hl sym">:=</span> Initial_Length <span class="hl sym">+</span> Size<span class="hl sym">(</span>Var_Line<span class="hl sym">) +</span> <span class="hl num">1</span><span class="hl sym">;</span>
      Match<span class="hl sym">(</span>Subject <span class="hl sym">=&gt;</span> Var_Line<span class="hl sym">,</span>
         Pat <span class="hl sym">=&gt;</span> Fasta_Description<span class="hl sym">,</span> Replace <span class="hl sym">=&gt;</span> <span class="hl str">&quot;&quot;</span><span class="hl sym">);</span>
      Append<span class="hl sym">(</span>Source <span class="hl sym">=&gt;</span> Sequence<span class="hl sym">,</span> New_Item <span class="hl sym">=&gt;</span> Var_Line<span class="hl sym">);</span>
   <span class="hl kwa">end loop</span><span class="hl sym">;</span>
   Code_Length <span class="hl sym">:=</span> Length<span class="hl sym">(</span>Sequence<span class="hl sym">);</span>


   Matching_Part<span class="hl sym">:</span>
   <span class="hl kwa">declare</span>
      Worker <span class="hl sym">:</span> <span class="hl kwa">array</span> <span class="hl sym">(</span>Variant_Index<span class="hl sym">)</span> <span class="hl kwa">of</span> Matching<span class="hl sym">.</span>Service<span class="hl sym">(</span>Sequence'<span class="hl kwa">Access</span><span class="hl sym">);</span>
      Count <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl slc">-- assign tasks</span>
      <span class="hl kwa">for</span> Variant <span class="hl kwa">in</span> Variant_Index <span class="hl kwa">loop</span>
         Worker<span class="hl sym">(</span>Variant<span class="hl sym">).</span>Match_Variant<span class="hl sym">(</span>Variant<span class="hl sym">);</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>

      <span class="hl slc">-- print results so far</span>
      <span class="hl kwa">for</span> Variant <span class="hl kwa">in</span> Variant_Index <span class="hl kwa">Loop</span>
         Matching<span class="hl sym">.</span>Stats<span class="hl sym">.</span>Get<span class="hl sym">(</span>Variant<span class="hl sym">)(</span>Result <span class="hl sym">=&gt;</span> Count<span class="hl sym">);</span>
         Put<span class="hl sym">(</span>To_String<span class="hl sym">(</span>Variant_Labels<span class="hl sym">(</span>Variant<span class="hl sym">)) &amp;</span> <span class="hl str">&quot; &quot;</span><span class="hl sym">);</span>
         Put<span class="hl sym">(</span>Item <span class="hl sym">=&gt;</span> Count<span class="hl sym">,</span> Width <span class="hl sym">=&gt;</span> <span class="hl num">1</span><span class="hl sym">);</span>
         New_Line<span class="hl sym">;</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>

   <span class="hl kwa">end</span> Matching_Part<span class="hl sym">;</span>


   <span class="hl slc">-- regex substitution</span>

   Num_Lines <span class="hl sym">:=</span> Length<span class="hl sym">(</span>Sequence<span class="hl sym">) /</span> Split_Length<span class="hl sym">;</span>
   <span class="hl kwa">if</span> Length<span class="hl sym">(</span>Sequence<span class="hl sym">)</span> <span class="hl kwa">mod</span> Split_Length <span class="hl sym">&gt;</span> <span class="hl num">1</span> <span class="hl kwa">then</span>
      Num_Lines <span class="hl sym">:=</span> Num_Lines <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
   <span class="hl kwa">end if</span><span class="hl sym">;</span>

   Replacing_Part<span class="hl sym">:</span>
   <span class="hl kwa">declare</span>
      <span class="hl kwa">type</span> Sequence_Lines_Access <span class="hl kwa">is access</span> DNA<span class="hl sym">.</span>Lines<span class="hl sym">;</span>
      Sequence_Lines_Pointer <span class="hl sym">:</span> <span class="hl kwa">constant</span> Sequence_Lines_Access <span class="hl sym">:=</span>
        <span class="hl kwa">new</span> DNA<span class="hl sym">.</span>Lines<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">..</span>Num_Lines<span class="hl sym">);</span>
      Sequence_Lines <span class="hl sym">:</span> DNA<span class="hl sym">.</span>Lines <span class="hl kwa">renames</span> Sequence_Lines_Pointer<span class="hl sym">.</span><span class="hl kwa">all</span><span class="hl sym">;</span>

      Worker <span class="hl sym">:</span> <span class="hl kwa">array</span> <span class="hl sym">(</span>Codes_Index<span class="hl sym">)</span> <span class="hl kwa">of</span> Replacing<span class="hl sym">.</span>Service<span class="hl sym">(</span>Sequence_Lines_Pointer<span class="hl sym">);</span>
      Low<span class="hl sym">,</span> Sub_Len <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl slc">-- Distribute Sequence to Sequence_Lines</span>
      Low <span class="hl sym">:=</span> <span class="hl num">1</span><span class="hl sym">;</span>
      Sub_Len <span class="hl sym">:=</span> Split_Length<span class="hl sym">;</span>
      <span class="hl kwa">for</span> I <span class="hl kwa">in</span> Sequence_Lines'<span class="hl kwa">range loop</span>
         Sequence_Lines<span class="hl sym">(</span>I<span class="hl sym">) :=</span> Substr<span class="hl sym">(</span>Str <span class="hl sym">=&gt;</span> Sequence <span class="hl sym">,</span>
            Start <span class="hl sym">=&gt;</span> Low<span class="hl sym">,</span> Len <span class="hl sym">=&gt;</span> Sub_Len <span class="hl sym">);</span>
         Low <span class="hl sym">:=</span> Low <span class="hl sym">+</span> Sub_Len<span class="hl sym">;</span>
         <span class="hl kwa">if</span> Low <span class="hl sym">+</span> Sub_Len <span class="hl sym">&gt;</span> Length<span class="hl sym">(</span>Sequence<span class="hl sym">)</span> <span class="hl kwa">then</span>
            Sub_Len <span class="hl sym">:=</span> Length<span class="hl sym">(</span>Sequence<span class="hl sym">) -</span> Low <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
         <span class="hl kwa">end if</span><span class="hl sym">;</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>

      <span class="hl slc">-- replace</span>
      <span class="hl kwa">for</span> L <span class="hl kwa">in</span> Worker'<span class="hl kwa">Range loop</span>
         Worker<span class="hl sym">(</span>L<span class="hl sym">).</span>Replace <span class="hl sym">(</span>First_Line <span class="hl sym">=&gt;</span> L<span class="hl sym">);</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>

      <span class="hl slc">-- wait for results and report</span>
      Replacing<span class="hl sym">.</span>Stats<span class="hl sym">.</span>Collect<span class="hl sym">;</span>
      New_Line<span class="hl sym">;</span>
      Put<span class="hl sym">(</span>Item <span class="hl sym">=&gt;</span> Initial_Length<span class="hl sym">,</span> Width <span class="hl sym">=&gt;</span> <span class="hl num">1</span><span class="hl sym">);</span>
      New_Line<span class="hl sym">;</span>
      Put<span class="hl sym">(</span>Item <span class="hl sym">=&gt;</span> Code_Length<span class="hl sym">,</span> Width <span class="hl sym">=&gt;</span> <span class="hl num">1</span><span class="hl sym">);</span>
      New_Line<span class="hl sym">;</span>
      Put<span class="hl sym">(</span>Item <span class="hl sym">=&gt;</span> Length<span class="hl sym">(</span>Sequence_Lines<span class="hl sym">),</span> Width <span class="hl sym">=&gt;</span> <span class="hl num">1</span><span class="hl sym">);</span>
      New_Line<span class="hl sym">;</span>
   <span class="hl kwa">end</span> Replacing_Part<span class="hl sym">;</span>

<span class="hl kwa">end</span> Regexdna<span class="hl sym">;</span>

<span class="hl slc">-- ----------------</span>
<span class="hl slc">-- match</span>
<span class="hl slc">-- ----------------</span>
<span class="hl kwa">package</span> DNA<span class="hl sym">.</span>Matching <span class="hl kwa">is</span>

   <span class="hl kwa">task type</span> Service<span class="hl sym">(</span>Sequence <span class="hl sym">:</span> <span class="hl kwa">access</span> VString_Var<span class="hl sym">)</span> <span class="hl kwa">is</span>
      <span class="hl slc">-- perform matching one pattern concurrently</span>

      <span class="hl kwa">entry</span> Match_Variant<span class="hl sym">(</span>Variant <span class="hl sym">:</span> Variant_Index<span class="hl sym">);</span>
   <span class="hl kwa">end</span> Service<span class="hl sym">;</span>


   <span class="hl kwa">type</span> Occurrences <span class="hl kwa">is array</span> <span class="hl sym">(</span>Variant_Index<span class="hl sym">)</span> <span class="hl kwa">of</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span>

   No_Count <span class="hl sym">:</span> <span class="hl kwa">constant</span> <span class="hl kwb">Natural</span> <span class="hl sym">:=</span> <span class="hl kwb">Natural</span>'Last<span class="hl sym">;</span>

   <span class="hl kwa">protected</span> Stats <span class="hl kwa">is</span>
      <span class="hl slc">-- collect counts from tasks, waiting to be printed</span>

      <span class="hl kwa">procedure</span> Report<span class="hl sym">(</span>Variant <span class="hl sym">:</span> Variant_Index<span class="hl sym">;</span> Count <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">);</span>
      <span class="hl kwa">entry</span> Get<span class="hl sym">(</span>Variant_Index<span class="hl sym">)(</span>Result <span class="hl sym">:</span> <span class="hl kwa">out</span> <span class="hl kwb">Natural</span><span class="hl sym">);</span>
   <span class="hl kwa">private</span>
      Data <span class="hl sym">:</span> Occurrences <span class="hl sym">:= (</span>Variant_Index <span class="hl sym">=&gt;</span> No_Count<span class="hl sym">);</span>
   <span class="hl kwa">end</span> Stats<span class="hl sym">;</span>

<span class="hl kwa">end</span> DNA<span class="hl sym">.</span>Matching<span class="hl sym">;</span>


<span class="hl kwa">package body</span> DNA<span class="hl sym">.</span>Matching <span class="hl kwa">is</span>

   <span class="hl kwa">task body</span> Service <span class="hl kwa">is</span>
      Count <span class="hl sym">:</span> <span class="hl kwb">Natural</span> <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwa">function</span> Inc_Count <span class="hl kwa">return</span> <span class="hl kwb">Boolean</span> <span class="hl kwa">is</span>
      <span class="hl kwa">begin</span>
         Count <span class="hl sym">:=</span> Count <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
         <span class="hl kwa">return</span> <span class="hl kwd">False</span><span class="hl sym">;</span>
      <span class="hl kwa">end</span> Inc_Count<span class="hl sym">;</span>
      Variant <span class="hl sym">:</span> Variant_Index<span class="hl sym">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">accept</span> Match_Variant<span class="hl sym">(</span>Variant <span class="hl sym">:</span> Variant_Index<span class="hl sym">)</span> <span class="hl kwa">do</span>
         Service<span class="hl sym">.</span>Variant <span class="hl sym">:=</span> Variant<span class="hl sym">;</span>
      <span class="hl kwa">end</span> Match_Variant<span class="hl sym">;</span>

      Count <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      Match<span class="hl sym">(</span>Subject <span class="hl sym">=&gt;</span> Sequence<span class="hl sym">.</span><span class="hl kwa">all</span><span class="hl sym">,</span>
            Pat <span class="hl sym">=&gt;</span> Variant_Patterns<span class="hl sym">(</span>Variant<span class="hl sym">) &amp; (+</span>Inc_Count'Unrestricted_Access<span class="hl sym">));</span>
      Stats<span class="hl sym">.</span>Report<span class="hl sym">(</span>Variant<span class="hl sym">,</span> Count<span class="hl sym">);</span>
   <span class="hl kwa">end</span> Service<span class="hl sym">;</span>


   <span class="hl kwa">protected body</span> Stats <span class="hl kwa">is</span>
      <span class="hl kwa">procedure</span> Report<span class="hl sym">(</span>Variant <span class="hl sym">:</span> Variant_Index<span class="hl sym">;</span> Count <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">)</span> <span class="hl kwa">is</span>
      <span class="hl kwa">begin</span>
         Data<span class="hl sym">(</span>Variant<span class="hl sym">) :=</span> Count<span class="hl sym">;</span>
      <span class="hl kwa">end</span> Report<span class="hl sym">;</span>

      <span class="hl kwa">entry</span> Get<span class="hl sym">(</span><span class="hl kwa">for</span> Variant <span class="hl kwa">in</span> Variant_Index<span class="hl sym">)(</span>Result <span class="hl sym">:</span> <span class="hl kwa">out</span> <span class="hl kwb">Natural</span><span class="hl sym">)</span>
      <span class="hl kwa">when</span> Data<span class="hl sym">(</span>Variant<span class="hl sym">) /=</span> No_Count <span class="hl kwa">is</span>
      <span class="hl kwa">begin</span>
         Result <span class="hl sym">:=</span> Data<span class="hl sym">(</span>Variant<span class="hl sym">);</span>
      <span class="hl kwa">end</span> Get<span class="hl sym">;</span>
   <span class="hl kwa">end</span> Stats<span class="hl sym">;</span>

<span class="hl kwa">end</span> DNA<span class="hl sym">.</span>Matching<span class="hl sym">;</span>


<span class="hl slc">-- ----------------</span>
<span class="hl slc">-- match-replace</span>
<span class="hl slc">-- ----------------</span>
<span class="hl kwa">package</span> DNA<span class="hl sym">.</span>Replacing <span class="hl kwa">is</span>

   <span class="hl kwa">task type</span> Service<span class="hl sym">(</span>Sequence_Lines <span class="hl sym">:</span> <span class="hl kwa">access</span> DNA<span class="hl sym">.</span>Lines<span class="hl sym">)</span>  <span class="hl kwa">is</span>
      <span class="hl slc">--</span>
      <span class="hl slc">--  replace in one bunch of lines</span>
      <span class="hl slc">--</span>
      <span class="hl kwa">entry</span> Replace<span class="hl sym">(</span>First_Line <span class="hl sym">:</span> Codes_Index<span class="hl sym">);</span>
   <span class="hl kwa">end</span> Service<span class="hl sym">;</span>

   <span class="hl kwa">type</span> Task_Status <span class="hl kwa">is array</span> <span class="hl sym">(</span>Codes_Index<span class="hl sym">)</span> <span class="hl kwa">of</span> <span class="hl kwb">Boolean</span><span class="hl sym">;</span>

   <span class="hl kwa">protected</span> Stats <span class="hl kwa">is</span>
      <span class="hl kwa">procedure</span> Done<span class="hl sym">(</span>Who <span class="hl sym">:</span> Codes_Index<span class="hl sym">);</span>
      <span class="hl kwa">entry</span> Collect<span class="hl sym">;</span>
      <span class="hl slc">--  wait for all to have called `Done`</span>
   <span class="hl kwa">private</span>
      Finished <span class="hl sym">:</span> Task_Status <span class="hl sym">:= (</span>Codes_Index <span class="hl sym">=&gt;</span> <span class="hl kwd">False</span><span class="hl sym">);</span>
   <span class="hl kwa">end</span> Stats<span class="hl sym">;</span>

<span class="hl kwa">end</span> DNA<span class="hl sym">.</span>Replacing<span class="hl sym">;</span>


<span class="hl kwa">package body</span> DNA<span class="hl sym">.</span>Replacing <span class="hl kwa">is</span>

   <span class="hl kwa">task body</span> Service <span class="hl kwa">is</span>

      Offset <span class="hl sym">:</span> <span class="hl kwb">Positive</span> <span class="hl kwa">range</span> Codes_Index'<span class="hl kwa">Range</span><span class="hl sym">;</span>
      Step <span class="hl sym">:</span> <span class="hl kwa">constant</span> <span class="hl kwb">Positive</span> <span class="hl sym">:=</span> Codes_Index'Last<span class="hl sym">;</span>
      <span class="hl slc">--  the task's loop skips `Step` lines in `Sequence_Lines`</span>

      Limit <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span>
      I <span class="hl sym">:</span> <span class="hl kwb">Positive</span><span class="hl sym">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">accept</span> Replace<span class="hl sym">(</span>First_Line <span class="hl sym">:</span> Codes_Index<span class="hl sym">)</span> <span class="hl kwa">do</span>
         Offset <span class="hl sym">:=</span> First_Line<span class="hl sym">;</span>
      <span class="hl kwa">end</span> Replace<span class="hl sym">;</span>

      Limit <span class="hl sym">:=</span> Sequence_Lines'Last <span class="hl sym">+</span> Offset <span class="hl sym">-</span> Step<span class="hl sym">;</span>
      I <span class="hl sym">:=</span> Offset<span class="hl sym">;</span>

      <span class="hl slc">-- Perform the regex substitution.  Likely facing</span>
      <span class="hl slc">--</span>
      <span class="hl slc">-- (1a) the GREAT BIG subtstitution problem</span>
      <span class="hl slc">--      (cf. D.W.E. Blatt, 1980)</span>
      <span class="hl slc">-- (1b) replacements in Unbounded_String which</span>
      <span class="hl slc">--      the pattern matching implementation is using</span>
      <span class="hl kwa">while</span> I <span class="hl sym">&lt;=</span> Limit <span class="hl kwa">loop</span>
         <span class="hl kwa">for</span> C <span class="hl kwa">in</span> Codes_Index <span class="hl kwa">loop</span>
            <span class="hl kwa">while</span>
               Match<span class="hl sym">(</span>Subject <span class="hl sym">=&gt;</span> Sequence_Lines<span class="hl sym">(</span>I<span class="hl sym">),</span>
                     Pat <span class="hl sym">=&gt;</span> Codes<span class="hl sym">(</span>C<span class="hl sym">).</span>Code<span class="hl sym">,</span>
                     Replace <span class="hl sym">=&gt;</span> Codes<span class="hl sym">(</span>C<span class="hl sym">).</span>Alternatives<span class="hl sym">)</span>
            <span class="hl kwa">loop</span>
               <span class="hl kwa">null</span><span class="hl sym">;</span>
            <span class="hl kwa">end loop</span><span class="hl sym">;</span>
         <span class="hl kwa">end loop</span><span class="hl sym">;</span>
         I <span class="hl sym">:=</span> I <span class="hl sym">+</span> Step<span class="hl sym">;</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>

      Stats<span class="hl sym">.</span>Done<span class="hl sym">(</span>Offset<span class="hl sym">);</span>

   <span class="hl kwa">end</span> Service<span class="hl sym">;</span>


   <span class="hl kwa">protected body</span> Stats <span class="hl kwa">is</span>
      <span class="hl kwa">procedure</span> Done<span class="hl sym">(</span>Who <span class="hl sym">:</span> Codes_Index<span class="hl sym">)</span> <span class="hl kwa">is</span>
      <span class="hl kwa">begin</span>
         Finished <span class="hl sym">(</span>Who<span class="hl sym">) :=</span> <span class="hl kwd">True</span><span class="hl sym">;</span>
      <span class="hl kwa">end</span> Done<span class="hl sym">;</span>

      <span class="hl kwa">entry</span> Collect
      <span class="hl kwa">when</span> Finished <span class="hl sym">= (</span>Finished'<span class="hl kwa">Range</span> <span class="hl sym">=&gt;</span> <span class="hl kwd">True</span><span class="hl sym">)</span> <span class="hl kwa">is</span>
      <span class="hl kwa">begin</span>
         <span class="hl kwa">null</span><span class="hl sym">;</span>
      <span class="hl kwa">end</span> Collect<span class="hl sym">;</span>
   <span class="hl kwa">end</span> Stats<span class="hl sym">;</span>

<span class="hl kwa">end</span> DNA<span class="hl sym">.</span>Replacing<span class="hl sym">;</span>

<span class="hl slc">-- spec of GNAT Pattern library package with Stack_Size setting</span>
<span class="hl kwa">with</span> Ada<span class="hl sym">.</span>Strings<span class="hl sym">.</span>Maps<span class="hl sym">;</span> <span class="hl kwa">use</span> Ada<span class="hl sym">.</span>Strings<span class="hl sym">.</span>Maps<span class="hl sym">;</span>
<span class="hl kwa">with</span> Ada<span class="hl sym">.</span>Text_IO<span class="hl sym">;</span>      <span class="hl kwa">use</span> Ada<span class="hl sym">.</span>Text_IO<span class="hl sym">;</span>
<span class="hl kwa">package</span> GNAT<span class="hl sym">.</span>Spitbol<span class="hl sym">.</span>Patterns <span class="hl kwa">is</span>
   <span class="hl kwa">pragma</span> Elaborate_Body<span class="hl sym">;</span>
   <span class="hl kwa">type</span> Pattern <span class="hl kwa">is private</span><span class="hl sym">;</span>
   <span class="hl kwa">type</span> Boolean_Func <span class="hl kwa">is access function return</span> <span class="hl kwb">Boolean</span><span class="hl sym">;</span>
   <span class="hl kwa">type</span> Natural_Func <span class="hl kwa">is access function return</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span>
   <span class="hl kwa">type</span> VString_Func <span class="hl kwa">is access function return</span> VString<span class="hl sym">;</span>
   <span class="hl kwa">subtype</span> PString <span class="hl kwa">is</span> <span class="hl kwb">String</span><span class="hl sym">;</span>
   <span class="hl kwa">subtype</span> PChar <span class="hl kwa">is</span> <span class="hl kwb">Character</span><span class="hl sym">;</span>
   <span class="hl kwa">subtype</span> VString_Var <span class="hl kwa">is</span> VString<span class="hl sym">;</span>
   <span class="hl kwa">subtype</span> Pattern_Var <span class="hl kwa">is</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> <span class="hl str">&quot;&amp;&quot;</span>  <span class="hl sym">(</span>L <span class="hl sym">:</span> Pattern<span class="hl sym">;</span> R <span class="hl sym">:</span> Pattern<span class="hl sym">)</span> <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> <span class="hl str">&quot;&amp;&quot;</span>  <span class="hl sym">(</span>L <span class="hl sym">:</span> PString<span class="hl sym">;</span> R <span class="hl sym">:</span> Pattern<span class="hl sym">)</span> <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> <span class="hl str">&quot;&amp;&quot;</span>  <span class="hl sym">(</span>L <span class="hl sym">:</span> Pattern<span class="hl sym">;</span> R <span class="hl sym">:</span> PString<span class="hl sym">)</span> <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> <span class="hl str">&quot;&amp;&quot;</span>  <span class="hl sym">(</span>L <span class="hl sym">:</span> PChar<span class="hl sym">;</span>   R <span class="hl sym">:</span> Pattern<span class="hl sym">)</span> <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> <span class="hl str">&quot;&amp;&quot;</span>  <span class="hl sym">(</span>L <span class="hl sym">:</span> Pattern<span class="hl sym">;</span> R <span class="hl sym">:</span> PChar<span class="hl sym">)</span>   <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> <span class="hl str">&quot;or&quot;</span> <span class="hl sym">(</span>L <span class="hl sym">:</span> Pattern<span class="hl sym">;</span> R <span class="hl sym">:</span> Pattern<span class="hl sym">)</span> <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> <span class="hl str">&quot;or&quot;</span> <span class="hl sym">(</span>L <span class="hl sym">:</span> PString<span class="hl sym">;</span> R <span class="hl sym">:</span> Pattern<span class="hl sym">)</span> <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> <span class="hl str">&quot;or&quot;</span> <span class="hl sym">(</span>L <span class="hl sym">:</span> Pattern<span class="hl sym">;</span> R <span class="hl sym">:</span> PString<span class="hl sym">)</span> <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> <span class="hl str">&quot;or&quot;</span> <span class="hl sym">(</span>L <span class="hl sym">:</span> PString<span class="hl sym">;</span> R <span class="hl sym">:</span> PString<span class="hl sym">)</span> <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> <span class="hl str">&quot;or&quot;</span> <span class="hl sym">(</span>L <span class="hl sym">:</span> PChar<span class="hl sym">;</span>   R <span class="hl sym">:</span> Pattern<span class="hl sym">)</span> <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> <span class="hl str">&quot;or&quot;</span> <span class="hl sym">(</span>L <span class="hl sym">:</span> Pattern<span class="hl sym">;</span> R <span class="hl sym">:</span> PChar<span class="hl sym">)</span>   <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> <span class="hl str">&quot;or&quot;</span> <span class="hl sym">(</span>L <span class="hl sym">:</span> PChar<span class="hl sym">;</span>   R <span class="hl sym">:</span> PChar<span class="hl sym">)</span>   <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> <span class="hl str">&quot;or&quot;</span> <span class="hl sym">(</span>L <span class="hl sym">:</span> PString<span class="hl sym">;</span> R <span class="hl sym">:</span> PChar<span class="hl sym">)</span>   <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> <span class="hl str">&quot;or&quot;</span> <span class="hl sym">(</span>L <span class="hl sym">:</span> PChar<span class="hl sym">;</span>   R <span class="hl sym">:</span> PString<span class="hl sym">)</span> <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> <span class="hl str">&quot;*&quot;</span> <span class="hl sym">(</span>P <span class="hl sym">:</span> Pattern<span class="hl sym">;</span> Var <span class="hl sym">:</span> VString_Var<span class="hl sym">)</span>  <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> <span class="hl str">&quot;*&quot;</span> <span class="hl sym">(</span>P <span class="hl sym">:</span> PString<span class="hl sym">;</span> Var <span class="hl sym">:</span> VString_Var<span class="hl sym">)</span>  <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> <span class="hl str">&quot;*&quot;</span> <span class="hl sym">(</span>P <span class="hl sym">:</span> PChar<span class="hl sym">;</span>   Var <span class="hl sym">:</span> VString_Var<span class="hl sym">)</span>  <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> <span class="hl str">&quot;**&quot;</span> <span class="hl sym">(</span>P <span class="hl sym">:</span> Pattern<span class="hl sym">;</span> Var <span class="hl sym">:</span> VString_Var<span class="hl sym">)</span> <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> <span class="hl str">&quot;**&quot;</span> <span class="hl sym">(</span>P <span class="hl sym">:</span> PString<span class="hl sym">;</span> Var <span class="hl sym">:</span> VString_Var<span class="hl sym">)</span> <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> <span class="hl str">&quot;**&quot;</span> <span class="hl sym">(</span>P <span class="hl sym">:</span> PChar<span class="hl sym">;</span>   Var <span class="hl sym">:</span> VString_Var<span class="hl sym">)</span> <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> <span class="hl str">&quot;+&quot;</span> <span class="hl sym">(</span>Str <span class="hl sym">:</span> VString_Var<span class="hl sym">)</span>  <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> <span class="hl str">&quot;+&quot;</span> <span class="hl sym">(</span>Str <span class="hl sym">:</span> VString_Func<span class="hl sym">)</span> <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> <span class="hl str">&quot;+&quot;</span> <span class="hl sym">(</span>P <span class="hl sym">:</span> Pattern_Var<span class="hl sym">)</span>    <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> <span class="hl str">&quot;+&quot;</span> <span class="hl sym">(</span>P <span class="hl sym">:</span> Boolean_Func<span class="hl sym">)</span>   <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Arb                                             <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Arbno  <span class="hl sym">(</span>P <span class="hl sym">:</span> Pattern<span class="hl sym">)</span>                            <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Arbno  <span class="hl sym">(</span>P <span class="hl sym">:</span> PString<span class="hl sym">)</span>                            <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Arbno  <span class="hl sym">(</span>P <span class="hl sym">:</span> PChar<span class="hl sym">)</span>                              <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Any    <span class="hl sym">(</span>Str <span class="hl sym">:</span> <span class="hl kwb">String</span><span class="hl sym">)</span>                           <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Any    <span class="hl sym">(</span>Str <span class="hl sym">:</span> VString<span class="hl sym">)</span>                          <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Any    <span class="hl sym">(</span>Str <span class="hl sym">:</span> <span class="hl kwb">Character</span><span class="hl sym">)</span>                        <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Any    <span class="hl sym">(</span>Str <span class="hl sym">:</span> Character_Set<span class="hl sym">)</span>                    <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Any    <span class="hl sym">(</span>Str <span class="hl sym">:</span> <span class="hl kwa">not null access</span> VString<span class="hl sym">)</span>          <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Any    <span class="hl sym">(</span>Str <span class="hl sym">:</span> VString_Func<span class="hl sym">)</span>                     <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Bal                                             <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Break  <span class="hl sym">(</span>Str <span class="hl sym">:</span> <span class="hl kwb">String</span><span class="hl sym">)</span>                           <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Break  <span class="hl sym">(</span>Str <span class="hl sym">:</span> VString<span class="hl sym">)</span>                          <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Break  <span class="hl sym">(</span>Str <span class="hl sym">:</span> <span class="hl kwb">Character</span><span class="hl sym">)</span>                        <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Break  <span class="hl sym">(</span>Str <span class="hl sym">:</span> Character_Set<span class="hl sym">)</span>                    <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Break  <span class="hl sym">(</span>Str <span class="hl sym">:</span> <span class="hl kwa">not null access</span> VString<span class="hl sym">)</span>          <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Break  <span class="hl sym">(</span>Str <span class="hl sym">:</span> VString_Func<span class="hl sym">)</span>                     <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> BreakX <span class="hl sym">(</span>Str <span class="hl sym">:</span> <span class="hl kwb">String</span><span class="hl sym">)</span>                           <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> BreakX <span class="hl sym">(</span>Str <span class="hl sym">:</span> VString<span class="hl sym">)</span>                          <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> BreakX <span class="hl sym">(</span>Str <span class="hl sym">:</span> <span class="hl kwb">Character</span><span class="hl sym">)</span>                        <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> BreakX <span class="hl sym">(</span>Str <span class="hl sym">:</span> Character_Set<span class="hl sym">)</span>                    <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> BreakX <span class="hl sym">(</span>Str <span class="hl sym">:</span> <span class="hl kwa">not null access</span> VString<span class="hl sym">)</span>          <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> BreakX <span class="hl sym">(</span>Str <span class="hl sym">:</span> VString_Func<span class="hl sym">)</span>                     <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Cancel                                          <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Fail                                            <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Fence                                           <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Fence  <span class="hl sym">(</span>P <span class="hl sym">:</span> Pattern<span class="hl sym">)</span>                            <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Len    <span class="hl sym">(</span>Count <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">)</span>                        <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Len    <span class="hl sym">(</span>Count <span class="hl sym">:</span> <span class="hl kwa">not null access</span> <span class="hl kwb">Natural</span><span class="hl sym">)</span>        <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Len    <span class="hl sym">(</span>Count <span class="hl sym">:</span> Natural_Func<span class="hl sym">)</span>                   <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> NotAny <span class="hl sym">(</span>Str <span class="hl sym">:</span> <span class="hl kwb">String</span><span class="hl sym">)</span>                           <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> NotAny <span class="hl sym">(</span>Str <span class="hl sym">:</span> VString<span class="hl sym">)</span>                          <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> NotAny <span class="hl sym">(</span>Str <span class="hl sym">:</span> <span class="hl kwb">Character</span><span class="hl sym">)</span>                        <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> NotAny <span class="hl sym">(</span>Str <span class="hl sym">:</span> Character_Set<span class="hl sym">)</span>                    <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> NotAny <span class="hl sym">(</span>Str <span class="hl sym">:</span> <span class="hl kwa">not null access</span> VString<span class="hl sym">)</span>          <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> NotAny <span class="hl sym">(</span>Str <span class="hl sym">:</span> VString_Func<span class="hl sym">)</span>                     <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> NSpan  <span class="hl sym">(</span>Str <span class="hl sym">:</span> <span class="hl kwb">String</span><span class="hl sym">)</span>                           <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> NSpan  <span class="hl sym">(</span>Str <span class="hl sym">:</span> VString<span class="hl sym">)</span>                          <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> NSpan  <span class="hl sym">(</span>Str <span class="hl sym">:</span> <span class="hl kwb">Character</span><span class="hl sym">)</span>                        <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> NSpan  <span class="hl sym">(</span>Str <span class="hl sym">:</span> Character_Set<span class="hl sym">)</span>                    <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> NSpan  <span class="hl sym">(</span>Str <span class="hl sym">:</span> <span class="hl kwa">not null access</span> VString<span class="hl sym">)</span>          <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> NSpan  <span class="hl sym">(</span>Str <span class="hl sym">:</span> VString_Func<span class="hl sym">)</span>                     <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Pos    <span class="hl sym">(</span>Count <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">)</span>                        <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Pos    <span class="hl sym">(</span>Count <span class="hl sym">:</span> <span class="hl kwa">not null access</span> <span class="hl kwb">Natural</span><span class="hl sym">)</span>        <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Pos    <span class="hl sym">(</span>Count <span class="hl sym">:</span> Natural_Func<span class="hl sym">)</span>                   <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Rest                                            <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Rpos   <span class="hl sym">(</span>Count <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">)</span>                        <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Rpos   <span class="hl sym">(</span>Count <span class="hl sym">:</span> <span class="hl kwa">not null access</span> <span class="hl kwb">Natural</span><span class="hl sym">)</span>        <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Rpos   <span class="hl sym">(</span>Count <span class="hl sym">:</span> Natural_Func<span class="hl sym">)</span>                   <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Rtab   <span class="hl sym">(</span>Count <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">)</span>                        <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Rtab   <span class="hl sym">(</span>Count <span class="hl sym">:</span> <span class="hl kwa">not null access</span> <span class="hl kwb">Natural</span><span class="hl sym">)</span>        <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Rtab   <span class="hl sym">(</span>Count <span class="hl sym">:</span> Natural_Func<span class="hl sym">)</span>                   <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Setcur <span class="hl sym">(</span>Var <span class="hl sym">:</span> <span class="hl kwa">not null access</span> <span class="hl kwb">Natural</span><span class="hl sym">)</span>          <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Span   <span class="hl sym">(</span>Str <span class="hl sym">:</span> <span class="hl kwb">String</span><span class="hl sym">)</span>                           <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Span   <span class="hl sym">(</span>Str <span class="hl sym">:</span> VString<span class="hl sym">)</span>                          <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Span   <span class="hl sym">(</span>Str <span class="hl sym">:</span> <span class="hl kwb">Character</span><span class="hl sym">)</span>                        <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Span   <span class="hl sym">(</span>Str <span class="hl sym">:</span> Character_Set<span class="hl sym">)</span>                    <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Span   <span class="hl sym">(</span>Str <span class="hl sym">:</span> <span class="hl kwa">not null access</span> VString<span class="hl sym">)</span>          <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Span   <span class="hl sym">(</span>Str <span class="hl sym">:</span> VString_Func<span class="hl sym">)</span>                     <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Succeed                                         <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Tab    <span class="hl sym">(</span>Count <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">)</span>                        <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Tab    <span class="hl sym">(</span>Count <span class="hl sym">:</span> <span class="hl kwa">not null access</span> <span class="hl kwb">Natural</span><span class="hl sym">)</span>        <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Tab    <span class="hl sym">(</span>Count <span class="hl sym">:</span> Natural_Func<span class="hl sym">)</span>                   <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   Anchored_Mode <span class="hl sym">:</span> <span class="hl kwb">Boolean</span> <span class="hl sym">:=</span> <span class="hl kwd">False</span><span class="hl sym">;</span>
   Pattern_Stack_Overflow <span class="hl sym">:</span> <span class="hl kwa">exception</span><span class="hl sym">;</span>
   Stack_Size <span class="hl sym">:</span> <span class="hl kwa">constant</span> <span class="hl kwb">Positive</span> <span class="hl sym">:=</span> <span class="hl num">20</span><span class="hl sym">;</span>
   <span class="hl kwa">function</span> Match
     <span class="hl sym">(</span>Subject <span class="hl sym">:</span> VString<span class="hl sym">;</span>
      Pat     <span class="hl sym">:</span> Pattern<span class="hl sym">)</span> <span class="hl kwa">return</span> <span class="hl kwb">Boolean</span><span class="hl sym">;</span>
   <span class="hl kwa">function</span> Match
     <span class="hl sym">(</span>Subject <span class="hl sym">:</span> VString<span class="hl sym">;</span>
      Pat     <span class="hl sym">:</span> PString<span class="hl sym">)</span> <span class="hl kwa">return</span> <span class="hl kwb">Boolean</span><span class="hl sym">;</span>
   <span class="hl kwa">function</span> Match
     <span class="hl sym">(</span>Subject <span class="hl sym">:</span> <span class="hl kwb">String</span><span class="hl sym">;</span>
      Pat     <span class="hl sym">:</span> Pattern<span class="hl sym">)</span> <span class="hl kwa">return</span> <span class="hl kwb">Boolean</span><span class="hl sym">;</span>
   <span class="hl kwa">function</span> Match
     <span class="hl sym">(</span>Subject <span class="hl sym">:</span> <span class="hl kwb">String</span><span class="hl sym">;</span>
      Pat     <span class="hl sym">:</span> PString<span class="hl sym">)</span> <span class="hl kwa">return</span> <span class="hl kwb">Boolean</span><span class="hl sym">;</span>
   <span class="hl kwa">function</span> Match
     <span class="hl sym">(</span>Subject <span class="hl sym">:</span> VString_Var<span class="hl sym">;</span>
      Pat     <span class="hl sym">:</span> Pattern<span class="hl sym">;</span>
      Replace <span class="hl sym">:</span> VString<span class="hl sym">)</span> <span class="hl kwa">return</span> <span class="hl kwb">Boolean</span><span class="hl sym">;</span>
   <span class="hl kwa">function</span> Match
     <span class="hl sym">(</span>Subject <span class="hl sym">:</span> VString_Var<span class="hl sym">;</span>
      Pat     <span class="hl sym">:</span> PString<span class="hl sym">;</span>
      Replace <span class="hl sym">:</span> VString<span class="hl sym">)</span> <span class="hl kwa">return</span> <span class="hl kwb">Boolean</span><span class="hl sym">;</span>
   <span class="hl kwa">function</span> Match
     <span class="hl sym">(</span>Subject <span class="hl sym">:</span> VString_Var<span class="hl sym">;</span>
      Pat     <span class="hl sym">:</span> Pattern<span class="hl sym">;</span>
      Replace <span class="hl sym">:</span> <span class="hl kwb">String</span><span class="hl sym">)</span> <span class="hl kwa">return</span> <span class="hl kwb">Boolean</span><span class="hl sym">;</span>
   <span class="hl kwa">function</span> Match
     <span class="hl sym">(</span>Subject <span class="hl sym">:</span> VString_Var<span class="hl sym">;</span>
      Pat     <span class="hl sym">:</span> PString<span class="hl sym">;</span>
      Replace <span class="hl sym">:</span> <span class="hl kwb">String</span><span class="hl sym">)</span> <span class="hl kwa">return</span> <span class="hl kwb">Boolean</span><span class="hl sym">;</span>
   <span class="hl kwa">procedure</span> Match
     <span class="hl sym">(</span>Subject <span class="hl sym">:</span> VString<span class="hl sym">;</span>
      Pat     <span class="hl sym">:</span> Pattern<span class="hl sym">);</span>
   <span class="hl kwa">procedure</span> Match
     <span class="hl sym">(</span>Subject <span class="hl sym">:</span> VString<span class="hl sym">;</span>
      Pat     <span class="hl sym">:</span> PString<span class="hl sym">);</span>
   <span class="hl kwa">procedure</span> Match
     <span class="hl sym">(</span>Subject <span class="hl sym">:</span> <span class="hl kwb">String</span><span class="hl sym">;</span>
      Pat     <span class="hl sym">:</span> Pattern<span class="hl sym">);</span>
   <span class="hl kwa">procedure</span> Match
     <span class="hl sym">(</span>Subject <span class="hl sym">:</span> <span class="hl kwb">String</span><span class="hl sym">;</span>
      Pat     <span class="hl sym">:</span> PString<span class="hl sym">);</span>
   <span class="hl kwa">procedure</span> Match
     <span class="hl sym">(</span>Subject <span class="hl sym">:</span> <span class="hl kwa">in out</span> VString<span class="hl sym">;</span>
      Pat     <span class="hl sym">:</span> Pattern<span class="hl sym">;</span>
      Replace <span class="hl sym">:</span> VString<span class="hl sym">);</span>
   <span class="hl kwa">procedure</span> Match
     <span class="hl sym">(</span>Subject <span class="hl sym">:</span> <span class="hl kwa">in out</span> VString<span class="hl sym">;</span>
      Pat     <span class="hl sym">:</span> PString<span class="hl sym">;</span>
      Replace <span class="hl sym">:</span> VString<span class="hl sym">);</span>
   <span class="hl kwa">procedure</span> Match
     <span class="hl sym">(</span>Subject <span class="hl sym">:</span> <span class="hl kwa">in out</span> VString<span class="hl sym">;</span>
      Pat     <span class="hl sym">:</span> Pattern<span class="hl sym">;</span>
      Replace <span class="hl sym">:</span> <span class="hl kwb">String</span><span class="hl sym">);</span>
   <span class="hl kwa">procedure</span> Match
     <span class="hl sym">(</span>Subject <span class="hl sym">:</span> <span class="hl kwa">in out</span> VString<span class="hl sym">;</span>
      Pat     <span class="hl sym">:</span> PString<span class="hl sym">;</span>
      Replace <span class="hl sym">:</span> <span class="hl kwb">String</span><span class="hl sym">);</span>
   <span class="hl kwa">type</span> Match_Result <span class="hl kwa">is private</span><span class="hl sym">;</span>
   <span class="hl kwa">subtype</span> Match_Result_Var <span class="hl kwa">is</span> Match_Result<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Match
     <span class="hl sym">(</span>Subject <span class="hl sym">:</span> VString_Var<span class="hl sym">;</span>
      Pat     <span class="hl sym">:</span> Pattern<span class="hl sym">;</span>
      Result  <span class="hl sym">:</span> Match_Result_Var<span class="hl sym">)</span> <span class="hl kwa">return</span> <span class="hl kwb">Boolean</span><span class="hl sym">;</span>
   <span class="hl kwa">procedure</span> Match
     <span class="hl sym">(</span>Subject <span class="hl sym">:</span> <span class="hl kwa">in out</span> VString<span class="hl sym">;</span>
      Pat     <span class="hl sym">:</span> Pattern<span class="hl sym">;</span>
      Result  <span class="hl sym">:</span> <span class="hl kwa">out</span> Match_Result<span class="hl sym">);</span>
   <span class="hl kwa">procedure</span> Replace
     <span class="hl sym">(</span>Result  <span class="hl sym">:</span> <span class="hl kwa">in out</span> Match_Result<span class="hl sym">;</span>
      Replace <span class="hl sym">:</span> VString<span class="hl sym">);</span>
   Debug_Mode <span class="hl sym">:</span> <span class="hl kwb">Boolean</span> <span class="hl sym">:=</span> <span class="hl kwd">False</span><span class="hl sym">;</span>
   <span class="hl kwa">function</span> <span class="hl str">&quot;*&quot;</span>  <span class="hl sym">(</span>P <span class="hl sym">:</span> Pattern<span class="hl sym">;</span> Fil <span class="hl sym">:</span> File_Access<span class="hl sym">)</span>           <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> <span class="hl str">&quot;*&quot;</span>  <span class="hl sym">(</span>P <span class="hl sym">:</span> PString<span class="hl sym">;</span> Fil <span class="hl sym">:</span> File_Access<span class="hl sym">)</span>           <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> <span class="hl str">&quot;*&quot;</span>  <span class="hl sym">(</span>P <span class="hl sym">:</span> PChar<span class="hl sym">;</span>   Fil <span class="hl sym">:</span> File_Access<span class="hl sym">)</span>           <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> <span class="hl str">&quot;**&quot;</span> <span class="hl sym">(</span>P <span class="hl sym">:</span> Pattern<span class="hl sym">;</span> Fil <span class="hl sym">:</span> File_Access<span class="hl sym">)</span>           <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> <span class="hl str">&quot;**&quot;</span> <span class="hl sym">(</span>P <span class="hl sym">:</span> PString<span class="hl sym">;</span> Fil <span class="hl sym">:</span> File_Access<span class="hl sym">)</span>           <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   <span class="hl kwa">function</span> <span class="hl str">&quot;**&quot;</span> <span class="hl sym">(</span>P <span class="hl sym">:</span> PChar<span class="hl sym">;</span>   Fil <span class="hl sym">:</span> File_Access<span class="hl sym">)</span>           <span class="hl kwa">return</span> Pattern<span class="hl sym">;</span>
   Terminal <span class="hl sym">:</span> <span class="hl kwa">constant</span> File_Access <span class="hl sym">:=</span> Standard_Error<span class="hl sym">;</span>
   Output   <span class="hl sym">:</span> <span class="hl kwa">constant</span> File_Access <span class="hl sym">:=</span> Standard_Output<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Image <span class="hl sym">(</span>P <span class="hl sym">:</span> Pattern<span class="hl sym">)</span> <span class="hl kwa">return</span> <span class="hl kwb">String</span><span class="hl sym">;</span>
   <span class="hl kwa">function</span> Image <span class="hl sym">(</span>P <span class="hl sym">:</span> Pattern<span class="hl sym">)</span> <span class="hl kwa">return</span> VString<span class="hl sym">;</span>
   <span class="hl kwa">procedure</span> Dump <span class="hl sym">(</span>P <span class="hl sym">:</span> Pattern<span class="hl sym">);</span>
<span class="hl kwa">private</span>
   <span class="hl kwa">type</span> PE<span class="hl sym">;</span>
   <span class="hl kwa">type</span> PE_Ptr <span class="hl kwa">is access all</span> PE<span class="hl sym">;</span>
   <span class="hl kwa">type</span> Pattern <span class="hl kwa">is new</span> Controlled <span class="hl kwa">with record</span>
      Stk <span class="hl sym">:</span> <span class="hl kwb">Natural</span> <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      P <span class="hl sym">:</span> PE_Ptr <span class="hl sym">:=</span> <span class="hl kwa">null</span><span class="hl sym">;</span>
   <span class="hl kwa">end record</span><span class="hl sym">;</span>
   <span class="hl kwa">pragma</span> Finalize_Storage_Only <span class="hl sym">(</span>Pattern<span class="hl sym">);</span>
   <span class="hl kwa">procedure</span> Adjust <span class="hl sym">(</span>Object <span class="hl sym">:</span> <span class="hl kwa">in out</span> Pattern<span class="hl sym">);</span>
   <span class="hl kwa">procedure</span> Finalize <span class="hl sym">(</span>Object <span class="hl sym">:</span> <span class="hl kwa">in out</span> Pattern<span class="hl sym">);</span>
   <span class="hl kwa">type</span> VString_Ptr <span class="hl kwa">is access all</span> VString<span class="hl sym">;</span>
   <span class="hl kwa">type</span> Match_Result <span class="hl kwa">is record</span>
      Var <span class="hl sym">:</span> VString_Ptr<span class="hl sym">;</span>
      Start <span class="hl sym">:</span> <span class="hl kwb">Natural</span> <span class="hl sym">:=</span> <span class="hl num">1</span><span class="hl sym">;</span>
      Stop <span class="hl sym">:</span> <span class="hl kwb">Natural</span> <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">end record</span><span class="hl sym">;</span>
   <span class="hl kwa">pragma</span> Volatile <span class="hl sym">(</span>Match_Result<span class="hl sym">);</span>
<span class="hl kwa">end</span> GNAT<span class="hl sym">.</span>Spitbol<span class="hl sym">.</span>Patterns<span class="hl sym">;</span>
