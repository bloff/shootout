<span class="hl com">(*</span>
<span class="hl com">** The Great Computer Language Shootout</span>
<span class="hl com">** http://shootout.alioth.debian.org/</span>
<span class="hl com">**</span>
<span class="hl com">** contributed by Hongwei Xi (hwxi AT cs DOT bu DOT edu)</span>
<span class="hl com">**</span>
<span class="hl com">** compilation command:</span>
<span class="hl com">**   atscc -msse2 -O3 mandelbrot.dats -o mandelbrot</span>
<span class="hl com">**)</span>

<span class="hl dir">#define TIMES 50</span>
<span class="hl dir">#define LIMIT2 (2.0 * 2.0)</span>
<span class="hl dir">#define i2b byte_of_int</span>
<span class="hl dir">#define i2d double_of_int</span>

<span class="hl kwa">fn</span> mandelbrot <span class="hl sym">(</span>h<span class="hl sym">:</span> int<span class="hl sym">,</span> w<span class="hl sym">:</span> int<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> w_r <span class="hl sym">=</span> <span class="hl num">1.0</span> <span class="hl sym">/</span> i2d w <span class="hl kwa">and</span> h_r <span class="hl sym">=</span> <span class="hl num">1.0</span> <span class="hl sym">/</span> i2d h
  <span class="hl kwa">fn</span> p <span class="hl sym">(</span>x<span class="hl sym">:</span> int<span class="hl sym">,</span> y<span class="hl sym">:</span> int<span class="hl sym">):&lt;</span>cloref1<span class="hl sym">&gt;</span> bool <span class="hl sym">=</span> <span class="hl kwa">let</span>
    <span class="hl kwa">val</span> Cr <span class="hl sym">=</span> i2d <span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> x<span class="hl sym">) *</span> w_r <span class="hl sym">-</span> <span class="hl num">1.5</span>
    <span class="hl kwa">and</span> Ci <span class="hl sym">=</span> i2d <span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> y<span class="hl sym">) *</span> h_r <span class="hl sym">-</span> <span class="hl num">1.0</span>
    <span class="hl kwa">fun</span> lp <span class="hl sym">(</span>r<span class="hl sym">:</span> double<span class="hl sym">,</span> i<span class="hl sym">:</span> double<span class="hl sym">,</span> k<span class="hl sym">:</span> int<span class="hl sym">):&lt;</span>cloref1<span class="hl sym">&gt;</span> bool <span class="hl sym">=</span>
      <span class="hl kwa">let val</span> r2 <span class="hl sym">=</span> r <span class="hl sym">*</span> r <span class="hl kwa">and</span> i2 <span class="hl sym">=</span> i <span class="hl sym">*</span> i <span class="hl kwa">in</span>
        <span class="hl kwa">if</span> r2<span class="hl sym">+</span>i2 <span class="hl sym">&lt;=</span> LIMIT2 <span class="hl kwa">then</span>
          <span class="hl kwa">if</span> k<span class="hl sym">=</span><span class="hl num">0</span> <span class="hl kwa">then</span> true <span class="hl kwa">else</span> lp <span class="hl sym">(</span>r2<span class="hl sym">-</span>i2<span class="hl sym">+</span>Cr<span class="hl sym">,</span> <span class="hl num">2.0</span><span class="hl sym">*</span>r<span class="hl sym">*</span>i<span class="hl sym">+</span>Ci<span class="hl sym">,</span> k<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
        <span class="hl kwa">else</span> false
      <span class="hl kwa">end</span>
  <span class="hl kwa">in</span>
    lp <span class="hl sym">(</span><span class="hl num">0.0</span><span class="hl sym">,</span> <span class="hl num">0.0</span><span class="hl sym">,</span> TIMES<span class="hl sym">)</span>
  <span class="hl kwa">end</span>

  <span class="hl kwa">fun</span> xl <span class="hl sym">(</span>x<span class="hl sym">:</span> int<span class="hl sym">,</span> y<span class="hl sym">:</span> int<span class="hl sym">,</span> b<span class="hl sym">:</span> byte<span class="hl sym">,</span> n<span class="hl sym">:</span> natLte <span class="hl num">8</span><span class="hl sym">):&lt;</span>cloref1<span class="hl sym">&gt;</span> void <span class="hl sym">=</span>
    <span class="hl kwa">if</span> x <span class="hl sym">&lt;</span> w <span class="hl kwa">then</span>
      <span class="hl kwa">if</span> p <span class="hl sym">(</span>x<span class="hl sym">,</span> y<span class="hl sym">)</span> <span class="hl kwa">then</span>
        <span class="hl kwa">if</span> n <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span> xl <span class="hl sym">(</span>x<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> y<span class="hl sym">, (</span>b <span class="hl sym">&lt;&lt;</span> <span class="hl num">1</span><span class="hl sym">) +</span> i2b <span class="hl num">1</span><span class="hl sym">,</span> n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
        <span class="hl kwa">else</span> <span class="hl sym">(</span>print b<span class="hl sym">;</span> xl <span class="hl sym">(</span>x<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> y<span class="hl sym">,</span> i2b <span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">7</span><span class="hl sym">))</span>
      <span class="hl kwa">else</span>
        <span class="hl kwa">if</span> n <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span> xl <span class="hl sym">(</span>x<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> y<span class="hl sym">,</span> b <span class="hl sym">&lt;&lt;</span> <span class="hl num">1</span><span class="hl sym">,</span> n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
        <span class="hl kwa">else</span> <span class="hl sym">(</span>print b<span class="hl sym">;</span> xl <span class="hl sym">(</span>x<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> y<span class="hl sym">,</span> i2b <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">7</span><span class="hl sym">))</span>
    <span class="hl kwa">else begin</span>
      print <span class="hl sym">(</span>b <span class="hl sym">&lt;&lt;</span> n<span class="hl sym">);</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>y <span class="hl sym">&lt;</span> h<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">then</span> xl <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> y<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> i2b <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">8</span><span class="hl sym">)</span>
    <span class="hl kwa">end</span>
<span class="hl kwa">in</span>
   printf <span class="hl sym">(</span><span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">%i %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> &#64;<span class="hl sym">(</span>h<span class="hl sym">,</span> w<span class="hl sym">));</span> <span class="hl kwa">if</span> h <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span> xl <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> i2b <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">8</span><span class="hl sym">)</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [mandelbrot]</span>

<span class="hl kwa">implement</span> main <span class="hl sym">(</span>argc<span class="hl sym">,</span> argv<span class="hl sym">) =</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> assert_errmsg
    <span class="hl sym">(</span>argc <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">,</span> <span class="hl str">&quot;Exit: wrong command format!</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span>
  <span class="hl kwa">val</span> i <span class="hl sym">=</span> int1_of_string argv<span class="hl sym">.[</span><span class="hl num">1</span><span class="hl sym">]</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> assert_errmsg
    <span class="hl sym">(</span>i <span class="hl sym">&gt;=</span> <span class="hl num">2</span><span class="hl sym">,</span> <span class="hl str">&quot;The input integer needs to be at least 2.</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span>
<span class="hl kwa">in</span>
  mandelbrot <span class="hl sym">(</span>i<span class="hl sym">,</span> i<span class="hl sym">)</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [main]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl com">(* end of [mandelbrot.dats] *)</span>
