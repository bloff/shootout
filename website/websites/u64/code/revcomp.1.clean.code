<span class="hl slc">// The Great Computer Language Shootout</span>
<span class="hl slc">// http://shootout.alioth.debian.org/</span>
<span class="hl slc">// </span>
<span class="hl slc">// contributed by Diederik van Arkel</span>

module revcomp

import StdEnv<span class="hl sym">,</span> LanguageShootout

Start world
	<span class="hl sym"># (</span>io<span class="hl sym">,</span>world<span class="hl sym">)	=</span> stdio world
	<span class="hl sym">#</span> io			<span class="hl sym">=</span> process io
	<span class="hl sym"># (</span>err<span class="hl sym">,</span>world<span class="hl sym">)	=</span> fclose io world
	<span class="hl sym">=</span> world

process <span class="hl sym">:: !*</span>File <span class="hl sym">-&gt; *</span>File
process io
	<span class="hl sym">#! (</span>line<span class="hl sym">,</span> io<span class="hl sym">) =</span> freadline io
	<span class="hl sym">|</span> size line <span class="hl sym">==</span> <span class="hl num">0</span>
		<span class="hl sym">=</span> io
	<span class="hl sym">|</span> line<span class="hl sym">.[</span><span class="hl num">0</span><span class="hl sym">] ==</span> '&gt;'
		<span class="hl sym">#</span> io		<span class="hl sym">=</span> io &lt;&lt;&lt; line
		<span class="hl sym">=</span> extract io <span class="hl sym">[]</span>
	<span class="hl sym">=</span> process io

extract <span class="hl sym">:: !*</span>File <span class="hl sym">![*</span>String<span class="hl sym">] -&gt; *</span>File
extract io ls
	<span class="hl sym">#! (</span>line<span class="hl sym">,</span> io<span class="hl sym">) =</span> freadline io
	<span class="hl sym">|</span> size line &gt; <span class="hl num">0</span>
		<span class="hl sym">|</span> line<span class="hl sym">.[</span><span class="hl num">0</span><span class="hl sym">] ==</span> '&gt;'
			<span class="hl sym">#</span> io		<span class="hl sym">=</span> write <span class="hl sym">(</span>revcomp ls<span class="hl sym">)</span> io
			<span class="hl sym">#</span> io		<span class="hl sym">=</span> io &lt;&lt;&lt; line
			<span class="hl sym">=</span> extract io <span class="hl sym">[]</span>
		<span class="hl sym">|</span> line<span class="hl sym">.[</span><span class="hl num">0</span><span class="hl sym">] ==</span> ';'
			<span class="hl sym">=</span> extract io ls
		<span class="hl sym">=</span> extract io <span class="hl sym">[</span>line<span class="hl sym">:</span>ls<span class="hl sym">]</span>
	<span class="hl sym">=</span> write <span class="hl sym">(</span>revcomp ls<span class="hl sym">)</span> io

revcomp l
	<span class="hl sym">#</span> l <span class="hl sym">=</span> reverse l
	<span class="hl sym">#</span> s	<span class="hl sym">=</span> concat_strip l
	<span class="hl sym">=</span> build s

concat_strip <span class="hl sym">:: ![</span>String<span class="hl sym">] -&gt; .</span>String
concat_strip l
	<span class="hl sym">#</span> s <span class="hl sym">=</span> sizelist l
	<span class="hl sym">#</span> a <span class="hl sym">=</span> createArray s ' '
	<span class="hl sym">=</span> copylist l a <span class="hl num">0</span>
where
	sizelist <span class="hl sym">[] =</span> <span class="hl num">0</span>
	sizelist <span class="hl sym">[</span>h<span class="hl sym">:</span>t<span class="hl sym">] =</span> size h <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl sym">+</span> sizelist t
	
	copylist <span class="hl sym">:: ![</span>String<span class="hl sym">] !*</span>String <span class="hl sym">!</span>Int <span class="hl sym">-&gt; .</span>String
	copylist <span class="hl sym">[]</span> a i <span class="hl sym">=</span> a
	copylist <span class="hl sym">[</span>h<span class="hl sym">:</span>t<span class="hl sym">]</span> a i
		<span class="hl sym"># (</span>i<span class="hl sym">,</span>a<span class="hl sym">) =</span> scopy <span class="hl sym">(</span>size h <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span> i <span class="hl num">0</span> a h
		<span class="hl sym">=</span> copylist t a i

scopy <span class="hl sym">::</span>
	<span class="hl sym">!</span>Int		<span class="hl slc">// end of copy source index</span>
	<span class="hl sym">!</span>Int		<span class="hl slc">// current target index</span>
	<span class="hl sym">!</span>Int		<span class="hl slc">// current source index</span>
	<span class="hl sym">!*{#</span>Char<span class="hl sym">}</span>	<span class="hl slc">// target string</span>
	<span class="hl sym">!{#</span>Char<span class="hl sym">}</span>	<span class="hl slc">// source string</span>
	<span class="hl sym">-&gt; (!</span>Int<span class="hl sym">,!.{#</span>Char<span class="hl sym">})</span>
scopy n i j s h
	<span class="hl sym">|</span> j &gt;<span class="hl sym">=</span> n <span class="hl sym">= (</span>i<span class="hl sym">,</span>s<span class="hl sym">)</span>
	<span class="hl sym">#!</span> s <span class="hl sym">= {</span>s <span class="hl sym">&amp; [</span>i<span class="hl sym">] =</span> h<span class="hl sym">.[</span>j<span class="hl sym">]}</span>
	<span class="hl sym">=</span> scopy n <span class="hl sym">(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) (</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span> s h


build <span class="hl sym">:: !*</span>String <span class="hl sym">-&gt; .</span>String
build iub
	<span class="hl sym">#!</span> e	<span class="hl sym">=</span> size iub <span class="hl sym">-</span> <span class="hl num">1</span>
	<span class="hl sym">=</span> build iub <span class="hl num">0</span> e complementArray
where
	build <span class="hl sym">:: !*</span>String <span class="hl sym">!</span>Int <span class="hl sym">!</span>Int <span class="hl sym">!</span>String <span class="hl sym">-&gt; .</span>String
	build iub b e complementArray
		<span class="hl sym">|</span> b &gt;<span class="hl sym">=</span> e
			<span class="hl sym">=</span> iub
		<span class="hl sym">#!</span> cb	<span class="hl sym">=</span> iub<span class="hl sym">.[</span>b<span class="hl sym">]</span>
		   ce	<span class="hl sym">=</span> iub<span class="hl sym">.[</span>e<span class="hl sym">]</span>
		<span class="hl sym">#</span>  iub	<span class="hl sym">= {</span>iub <span class="hl sym">&amp; [</span>b<span class="hl sym">] =</span> complementArray<span class="hl sym">.[</span>toInt ce<span class="hl sym">]}</span>
		   iub	<span class="hl sym">= {</span>iub <span class="hl sym">&amp; [</span>e<span class="hl sym">] =</span> complementArray<span class="hl sym">.[</span>toInt cb<span class="hl sym">]}</span>
		<span class="hl sym">=</span> build iub <span class="hl sym">(</span>b<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) (</span>e<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span> complementArray
<span class="hl com">/*</span>
<span class="hl com">	= build iub 0 e</span>
<span class="hl com">where</span>
<span class="hl com">	build :: !*String !Int !Int -&gt; .String</span>
<span class="hl com">	build iub b e</span>
<span class="hl com">		| b &gt;= e</span>
<span class="hl com">			= iub</span>
<span class="hl com">		#! cb	= iub.[b]</span>
<span class="hl com">		   ce	= iub.[e]</span>
<span class="hl com">		   iub	= {iub &amp; [b] = complement ce}</span>
<span class="hl com">		   iub	= {iub &amp; [e] = complement cb}</span>
<span class="hl com">		= build iub (b+1) (e-1)</span>
<span class="hl com"></span>
<span class="hl com">complement :: !Char -&gt; Char</span>
<span class="hl com">complement c</span>
<span class="hl com">	= complementArray.[toInt c]</span>
<span class="hl com">*/</span>
complementArray <span class="hl sym">=:</span> buildComplement
where
	buildComplement <span class="hl sym">::</span> String
	buildComplement
<span class="hl slc">//		# a	= {c \\ c &lt;- ['\x0'..'\xFF']}</span>
		<span class="hl sym">#</span> a <span class="hl sym">= {</span>toChar i <span class="hl sym">\\</span> i <span class="hl sym">&lt;- [</span><span class="hl num">0</span><span class="hl sym">.</span><span class="hl num">.255</span><span class="hl sym">]}</span>
		<span class="hl sym">=</span> build pairs a
	build <span class="hl sym">[]</span> a <span class="hl sym">=</span> a
	build <span class="hl sym">[(</span>f<span class="hl sym">,</span>t<span class="hl sym">):</span>ps<span class="hl sym">]</span> a
		<span class="hl sym">#</span> a <span class="hl sym">= {</span> a <span class="hl sym">&amp; [</span>toInt f<span class="hl sym">] =</span> t
				  <span class="hl sym">, [</span>toInt t<span class="hl sym">] =</span> f
				  <span class="hl sym">, [</span>toInt <span class="hl sym">(</span>toLower f<span class="hl sym">)] =</span> t
				  <span class="hl sym">, [</span>toInt <span class="hl sym">(</span>toLower t<span class="hl sym">)] =</span> f
			  <span class="hl sym">}</span>
		<span class="hl sym">=</span> build ps a
	pairs <span class="hl sym">= [(</span>'A'<span class="hl sym">,</span>'T'<span class="hl sym">)</span>
			<span class="hl sym">,(</span>'C'<span class="hl sym">,</span>'G'<span class="hl sym">)</span>
			<span class="hl sym">,(</span>'B'<span class="hl sym">,</span>'V'<span class="hl sym">)</span>
			<span class="hl sym">,(</span>'D'<span class="hl sym">,</span>'H'<span class="hl sym">)</span>
			<span class="hl sym">,(</span>'K'<span class="hl sym">,</span>'M'<span class="hl sym">)</span>
			<span class="hl sym">,(</span>'R'<span class="hl sym">,</span>'Y'<span class="hl sym">)</span>
			<span class="hl sym">]</span>

write s io
	<span class="hl sym">=</span> write s <span class="hl num">0</span> io
where
	e	<span class="hl sym">=</span> size s

	write <span class="hl sym">:: !</span>String <span class="hl sym">!</span>Int <span class="hl sym">!*</span>File <span class="hl sym">-&gt; *</span>File
	write s b io
		<span class="hl sym">|</span> b &gt;<span class="hl sym">=</span> e
			<span class="hl sym">=</span> io
		<span class="hl sym">#!</span> io	<span class="hl sym">=</span> io &lt;&lt;&lt; <span class="hl sym">(</span>s%<span class="hl sym">(</span>b<span class="hl sym">,</span>b<span class="hl sym">+</span><span class="hl num">59</span><span class="hl sym">))</span> &lt;&lt;&lt; '\n'
<span class="hl slc">//		#! io	= (fwritesubstring b (min (e-b) 60) s io) &lt;&lt;&lt; '\n'</span>
		<span class="hl sym">=</span> write s <span class="hl sym">(</span>b<span class="hl sym">+</span><span class="hl num">60</span><span class="hl sym">)</span> io
