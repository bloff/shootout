#lang racket<span class="hl sym">/</span>base

<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;; http://shootout.alioth.debian.org/</span>

<span class="hl slc">;; Based on the Perl version of the benchmark</span>
<span class="hl slc">;; adapted with a GMP interface by Eli Barzilay</span>

<span class="hl sym">(</span>require racket<span class="hl sym">/</span>cmdline
         <span class="hl sym">(</span>for<span class="hl sym">-</span>syntax racket<span class="hl sym">/</span>base<span class="hl sym">)</span>
         ffi<span class="hl sym">/</span>unsafe<span class="hl sym">)</span>

<span class="hl slc">;; quick libgmp interface, limited to what we need below</span>
<span class="hl sym">(</span>define libgmp <span class="hl sym">(</span>ffi<span class="hl sym">-</span>lib <span class="hl str">&quot;libgmp&quot;</span><span class="hl sym">))</span>
<span class="hl sym">(</span>define<span class="hl sym">-</span>syntax<span class="hl sym">-</span>rule <span class="hl sym">(</span>defgmp op type ...<span class="hl sym">)</span>
  <span class="hl sym">(</span>define op <span class="hl sym">(</span>get<span class="hl sym">-</span>ffi<span class="hl sym">-</span>obj <span class="hl sym">(</span>format <span class="hl str">&quot;__gmpz_~a&quot;</span> <span class="hl sym">'</span>op<span class="hl sym">)</span> libgmp <span class="hl sym">(</span>_fun type ...<span class="hl sym">))))</span>
<span class="hl sym">(</span>define<span class="hl sym">-</span>cstruct _mpz <span class="hl sym">([</span>alloc _int<span class="hl sym">] [</span>size _int<span class="hl sym">] [</span>limbs _pointer<span class="hl sym">]))</span>
<span class="hl sym">(</span>defgmp init_set_ui _mpz<span class="hl sym">-</span>pointer _ulong <span class="hl sym">-&gt;</span> _void<span class="hl sym">)</span>
<span class="hl sym">(</span>defgmp set_ui _mpz<span class="hl sym">-</span>pointer _ulong <span class="hl sym">-&gt;</span> _void<span class="hl sym">)</span>
<span class="hl sym">(</span>defgmp get_ui    _mpz<span class="hl sym">-</span>pointer <span class="hl sym">-&gt;</span> _ulong<span class="hl sym">)</span>
<span class="hl sym">(</span>defgmp add       _mpz<span class="hl sym">-</span>pointer _mpz<span class="hl sym">-</span>pointer _mpz<span class="hl sym">-</span>pointer <span class="hl sym">-&gt;</span> _void<span class="hl sym">)</span>
<span class="hl sym">(</span>defgmp mul       _mpz<span class="hl sym">-</span>pointer _mpz<span class="hl sym">-</span>pointer _mpz<span class="hl sym">-</span>pointer <span class="hl sym">-&gt;</span> _void<span class="hl sym">)</span>
<span class="hl sym">(</span>defgmp mul_ui    _mpz<span class="hl sym">-</span>pointer _mpz<span class="hl sym">-</span>pointer _long        <span class="hl sym">-&gt;</span> _void<span class="hl sym">)</span>
<span class="hl sym">(</span>defgmp addmul    _mpz<span class="hl sym">-</span>pointer _mpz<span class="hl sym">-</span>pointer _mpz<span class="hl sym">-</span>pointer <span class="hl sym">-&gt;</span> _void<span class="hl sym">)</span>
<span class="hl sym">(</span>defgmp addmul_ui _mpz<span class="hl sym">-</span>pointer _mpz<span class="hl sym">-</span>pointer _ulong       <span class="hl sym">-&gt;</span> _void<span class="hl sym">)</span>
<span class="hl sym">(</span>defgmp submul_ui _mpz<span class="hl sym">-</span>pointer _mpz<span class="hl sym">-</span>pointer _ulong       <span class="hl sym">-&gt;</span> _void<span class="hl sym">)</span>
<span class="hl sym">(</span>defgmp tdiv_q    _mpz<span class="hl sym">-</span>pointer _mpz<span class="hl sym">-</span>pointer _mpz<span class="hl sym">-</span>pointer <span class="hl sym">-&gt;</span> _void<span class="hl sym">)</span>
<span class="hl sym">(</span>defgmp cmp       _mpz<span class="hl sym">-</span>pointer _mpz<span class="hl sym">-</span>pointer              <span class="hl sym">-&gt;</span> _int<span class="hl sym">)</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>make<span class="hl sym">-</span>ui n<span class="hl sym">) (</span>let <span class="hl sym">([</span>i <span class="hl sym">(</span>make<span class="hl sym">-</span>mpz <span class="hl num">0 0</span> #f<span class="hl sym">)]) (</span>init_set_ui i n<span class="hl sym">)</span> i<span class="hl sym">))</span>
<span class="hl slc">;; &quot;fancy&quot; parser, for fun (only for the limited subset we use)</span>
<span class="hl sym">(</span>define<span class="hl sym">-</span>syntax <span class="hl sym">(</span>gmp stx<span class="hl sym">)</span>
  <span class="hl sym">(</span>define <span class="hl sym">(</span>sym<span class="hl sym">=</span>? x y<span class="hl sym">)</span>
    <span class="hl sym">(</span>eq? <span class="hl sym">(</span>if <span class="hl sym">(</span>syntax? x<span class="hl sym">) (</span>syntax<span class="hl sym">-</span>e x<span class="hl sym">)</span> x<span class="hl sym">) (</span>if <span class="hl sym">(</span>syntax? y<span class="hl sym">) (</span>syntax<span class="hl sym">-</span>e y<span class="hl sym">)</span> y<span class="hl sym">)))</span>
  <span class="hl sym">(</span>define <span class="hl sym">(</span>_? stx<span class="hl sym">)</span>
    <span class="hl sym">(</span>and <span class="hl sym">(</span>identifier? stx<span class="hl sym">)</span>
         <span class="hl sym">(</span>regexp<span class="hl sym">-</span>match? #rx<span class="hl str">&quot;^_&quot;</span> <span class="hl sym">(</span>symbol<span class="hl sym">-&gt;</span>string <span class="hl sym">(</span>syntax<span class="hl sym">-</span>e stx<span class="hl sym">)))))</span>
  <span class="hl sym">(</span>define <span class="hl sym">(</span>split xs<span class="hl sym">)</span>
    <span class="hl sym">(</span>let loop <span class="hl sym">([</span>xs xs<span class="hl sym">] [</span>cur <span class="hl sym">'()] [</span>r <span class="hl sym">'()])</span>
      <span class="hl sym">(</span>define <span class="hl sym">(</span>add<span class="hl sym">) (</span>cons <span class="hl sym">(</span>reverse cur<span class="hl sym">)</span> r<span class="hl sym">))</span>
      <span class="hl sym">(</span>cond <span class="hl sym">[(</span>null? xs<span class="hl sym">) (</span>reverse <span class="hl sym">(</span>add<span class="hl sym">))]</span>
            <span class="hl sym">[(</span>syntax<span class="hl sym">-</span>case <span class="hl sym">(</span>car xs<span class="hl sym">) (</span>unquote<span class="hl sym">) [,</span>x #<span class="hl sym">'</span>x<span class="hl sym">] [</span>else #f<span class="hl sym">])</span>
             <span class="hl sym">=&gt; (</span>lambda <span class="hl sym">(</span>x<span class="hl sym">) (</span>loop <span class="hl sym">(</span>cdr xs<span class="hl sym">) (</span>list x<span class="hl sym">) (</span>add<span class="hl sym">)))]</span>
            <span class="hl sym">[</span>else <span class="hl sym">(</span>loop <span class="hl sym">(</span>cdr xs<span class="hl sym">) (</span>cons <span class="hl sym">(</span>car xs<span class="hl sym">)</span> cur<span class="hl sym">)</span> r<span class="hl sym">)])))</span>
  <span class="hl sym">(</span>define <span class="hl sym">(</span>translate expr<span class="hl sym">)</span>
    <span class="hl sym">(</span>syntax<span class="hl sym">-</span>case<span class="hl sym">*</span> expr <span class="hl sym">(= += -= + * / &lt; &gt;)</span> sym<span class="hl sym">=</span>?
      <span class="hl sym">[(</span>x <span class="hl sym">=</span> y <span class="hl sym">+</span> z<span class="hl sym">)</span>  #<span class="hl sym">'(</span>add x y z<span class="hl sym">)]</span>
      <span class="hl sym">[(</span>x <span class="hl sym">=</span> y <span class="hl sym">*</span> z<span class="hl sym">)</span>  #<span class="hl sym">`(</span>#<span class="hl sym">,(</span>if <span class="hl sym">(</span>_? #<span class="hl sym">'</span>z<span class="hl sym">)</span> #<span class="hl sym">'</span>mul #<span class="hl sym">'</span>mul_ui<span class="hl sym">)</span> x y z<span class="hl sym">)]</span>
      <span class="hl sym">[(</span>x <span class="hl sym">+=</span> y <span class="hl sym">*</span> z<span class="hl sym">)</span> #<span class="hl sym">`(</span>#<span class="hl sym">,(</span>if <span class="hl sym">(</span>_? #<span class="hl sym">'</span>z<span class="hl sym">)</span> #<span class="hl sym">'</span>addmul #<span class="hl sym">'</span>addmul_ui<span class="hl sym">)</span> x y z<span class="hl sym">)]</span>
      <span class="hl sym">[(</span>x <span class="hl sym">-=</span> y <span class="hl sym">*</span> z<span class="hl sym">)</span> #<span class="hl sym">`(</span>#<span class="hl sym">,(</span>if <span class="hl sym">(</span>_? #<span class="hl sym">'</span>z<span class="hl sym">)</span> #<span class="hl sym">'</span>submul #<span class="hl sym">'</span>submul_ui<span class="hl sym">)</span> x y z<span class="hl sym">)]</span>
      <span class="hl sym">[(</span>x <span class="hl sym">=</span> y <span class="hl sym">/</span> z<span class="hl sym">)</span>  #<span class="hl sym">'(</span>tdiv_q x y z<span class="hl sym">)]</span>
      <span class="hl sym">[(</span>x <span class="hl sym">&lt;</span> y<span class="hl sym">)</span>      #<span class="hl sym">'(&lt; (</span>cmp x y<span class="hl sym">)</span> <span class="hl num">0</span><span class="hl sym">)]</span>
      <span class="hl sym">[(</span>x <span class="hl sym">&gt;</span> y<span class="hl sym">)</span>      #<span class="hl sym">'(&gt; (</span>cmp x y<span class="hl sym">)</span> <span class="hl num">0</span><span class="hl sym">)]</span>
      <span class="hl sym">[(</span>get x<span class="hl sym">)</span>      #<span class="hl sym">'(</span>get_ui x<span class="hl sym">)]))</span>
  <span class="hl sym">(</span>syntax<span class="hl sym">-</span>case stx <span class="hl sym">()</span>
    <span class="hl sym">[(</span>_ x ...<span class="hl sym">)</span> #<span class="hl sym">`(</span>begin #<span class="hl sym">,</span>&#64;<span class="hl sym">(</span>map translate <span class="hl sym">(</span>split <span class="hl sym">(</span>syntax<span class="hl sym">-&gt;</span>list #<span class="hl sym">'(</span>x ...<span class="hl sym">)))))]))</span>

<span class="hl slc">;; the actual code</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>digits n<span class="hl sym">)</span>
  <span class="hl sym">(</span>define i <span class="hl num">0</span><span class="hl sym">)</span>
  <span class="hl sym">(</span>define _x0 <span class="hl sym">(</span>make<span class="hl sym">-</span>ui <span class="hl num">1</span><span class="hl sym">))</span>
  <span class="hl sym">(</span>define _x1 <span class="hl sym">(</span>make<span class="hl sym">-</span>ui <span class="hl num">0</span><span class="hl sym">))</span>
  <span class="hl sym">(</span>define _x2 <span class="hl sym">(</span>make<span class="hl sym">-</span>ui <span class="hl num">1</span><span class="hl sym">))</span>
  <span class="hl sym">(</span>define _r  <span class="hl sym">(</span>make<span class="hl sym">-</span>ui <span class="hl num">0</span><span class="hl sym">))</span>

  <span class="hl sym">(</span>define <span class="hl sym">(</span>extract<span class="hl sym">-</span>digit n<span class="hl sym">)</span>
    <span class="hl sym">(</span>gmp _r <span class="hl sym">=</span> _x0 <span class="hl sym">*</span> n<span class="hl sym">,</span> _r <span class="hl sym">=</span> _r <span class="hl sym">+</span> _x1<span class="hl sym">,</span> _r <span class="hl sym">=</span> _r <span class="hl sym">/</span> _x2<span class="hl sym">,</span> get _r<span class="hl sym">))</span>

  <span class="hl sym">(</span>let loop <span class="hl sym">([</span>k <span class="hl num">0</span><span class="hl sym">])</span>

    <span class="hl sym">(</span>define<span class="hl sym">-</span>syntax<span class="hl sym">-</span>rule <span class="hl sym">(</span>compose1<span class="hl sym">!+</span>loop<span class="hl sym">)</span>
      <span class="hl sym">(</span>let<span class="hl sym">* ([</span>k <span class="hl sym">(</span>add1 k<span class="hl sym">)] [</span>y2 <span class="hl sym">(</span>add1 <span class="hl sym">(*</span> k <span class="hl num">2</span><span class="hl sym">))])</span>
        <span class="hl sym">(</span>gmp _x1 <span class="hl sym">=</span> _x1 <span class="hl sym">*</span> y2<span class="hl sym">,</span> _x1 <span class="hl sym">+=</span> _x0 <span class="hl sym">* (*</span> y2 <span class="hl num">2</span><span class="hl sym">),</span> _x0 <span class="hl sym">=</span> _x0 <span class="hl sym">*</span> k<span class="hl sym">,</span>_x2 <span class="hl sym">=</span> _x2 <span class="hl sym">*</span> y2<span class="hl sym">)</span>
        <span class="hl sym">(</span>loop k<span class="hl sym">)))</span>
    <span class="hl sym">(</span>define<span class="hl sym">-</span>syntax<span class="hl sym">-</span>rule <span class="hl sym">(</span>compose2<span class="hl sym">!</span> d<span class="hl sym">)</span>
      <span class="hl sym">(</span>begin <span class="hl sym">(</span>gmp _x1 <span class="hl sym">-=</span> _x2 <span class="hl sym">*</span> d<span class="hl sym">,</span> _x1 <span class="hl sym">=</span> _x1 <span class="hl sym">*</span> <span class="hl num">10</span><span class="hl sym">,</span> _x0 <span class="hl sym">=</span> _x0 <span class="hl sym">*</span> <span class="hl num">10</span><span class="hl sym">)</span>
             <span class="hl sym">(</span>loop k<span class="hl sym">)))</span>

    <span class="hl sym">(</span>if <span class="hl sym">(</span>gmp _x0 <span class="hl sym">&gt;</span> _x1<span class="hl sym">)</span>
      <span class="hl sym">(</span>compose1<span class="hl sym">!+</span>loop<span class="hl sym">)</span>
      <span class="hl sym">(</span>let <span class="hl sym">([</span>d <span class="hl sym">(</span>extract<span class="hl sym">-</span>digit <span class="hl num">3</span><span class="hl sym">)])</span>
        <span class="hl sym">(</span>if <span class="hl sym">(</span>not <span class="hl sym">(=</span> d <span class="hl sym">(</span>extract<span class="hl sym">-</span>digit <span class="hl num">4</span><span class="hl sym">)))</span>
          <span class="hl sym">(</span>compose1<span class="hl sym">!+</span>loop<span class="hl sym">)</span>
          <span class="hl sym">(</span>begin <span class="hl sym">(</span>display d<span class="hl sym">)</span>
                 <span class="hl sym">(</span>set<span class="hl sym">!</span> i <span class="hl sym">(</span>add1 i<span class="hl sym">))</span>
                 <span class="hl sym">(</span>let <span class="hl sym">([</span>m <span class="hl sym">(</span>modulo i <span class="hl num">10</span><span class="hl sym">)])</span>
                   <span class="hl sym">(</span>when <span class="hl sym">(</span>zero? m<span class="hl sym">) (</span>printf <span class="hl str">&quot;</span><span class="hl esc">\</span><span class="hl str">t:~a</span><span class="hl esc">\</span><span class="hl str">n&quot;</span> i<span class="hl sym">))</span>
                   <span class="hl sym">(</span>if <span class="hl sym">(&lt;</span> i n<span class="hl sym">)</span>
                     <span class="hl sym">(</span>compose2<span class="hl sym">!</span> d<span class="hl sym">)</span>
                     <span class="hl sym">(</span>unless <span class="hl sym">(</span>zero? m<span class="hl sym">)</span>
                       <span class="hl sym">(</span>printf <span class="hl str">&quot;~a</span><span class="hl esc">\</span><span class="hl str">t:~a</span><span class="hl esc">\</span><span class="hl str">n&quot;</span>
                               <span class="hl sym">(</span>make<span class="hl sym">-</span>string <span class="hl sym">(-</span> <span class="hl num">10</span> m<span class="hl sym">)</span> #\space<span class="hl sym">)</span>
                               n<span class="hl sym">))))))))))</span>

<span class="hl sym">(</span>digits <span class="hl sym">(</span>command<span class="hl sym">-</span>line #<span class="hl sym">:</span>args <span class="hl sym">(</span>n<span class="hl sym">) (</span>string<span class="hl sym">-&gt;</span>number n<span class="hl sym">)))</span>
