<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;   http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;</span>
<span class="hl slc">;;   contributed by Alexey Voznyuk</span>
<span class="hl slc">;;</span>

<span class="hl sym">(</span>defpackage #<span class="hl sym">:</span>fannkuch<span class="hl sym">-</span>redux
  <span class="hl sym">(:</span>use <span class="hl sym">:</span>cl<span class="hl sym">))</span>

<span class="hl sym">(</span>in<span class="hl sym">-</span>package <span class="hl sym">:</span>fannkuch<span class="hl sym">-</span>redux<span class="hl sym">)</span>

<span class="hl sym">(</span>defun make<span class="hl sym">-</span>facts<span class="hl sym">-</span>vector <span class="hl sym">(</span>seq<span class="hl sym">-</span>length<span class="hl sym">)</span>
  <span class="hl sym">(</span>make<span class="hl sym">-</span>array <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">+</span> seq<span class="hl sym">-</span>length<span class="hl sym">)</span>
              <span class="hl sym">:</span>initial<span class="hl sym">-</span>contents <span class="hl sym">(</span>cons <span class="hl num">1</span> <span class="hl sym">(</span>loop <span class="hl sym">:</span>with r <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">:</span>for i from <span class="hl num">1</span> to seq<span class="hl sym">-</span>length
                                           <span class="hl sym">:</span>collect <span class="hl sym">(</span>setf r <span class="hl sym">(*</span> r i<span class="hl sym">))))))</span>

<span class="hl sym">(</span>defmacro with<span class="hl sym">-</span>vars<span class="hl sym">-</span>bound <span class="hl sym">((</span>vars bind<span class="hl sym">-</span>vars<span class="hl sym">) &amp;</span>body body<span class="hl sym">)</span>
  <span class="hl sym">`(</span>let <span class="hl sym">(,</span>&#64;<span class="hl sym">(</span>loop <span class="hl sym">:</span>for var <span class="hl sym">:</span>in vars <span class="hl sym">:</span>for bind<span class="hl sym">-</span>var <span class="hl sym">:</span>in bind<span class="hl sym">-</span>vars <span class="hl sym">:</span>collect <span class="hl sym">`(,</span>var <span class="hl sym">,</span>bind<span class="hl sym">-</span>var<span class="hl sym">)))</span>
     <span class="hl sym">(</span>declare <span class="hl sym">(</span>type fixnum <span class="hl sym">,</span>&#64;vars<span class="hl sym">) (</span>ignorable <span class="hl sym">,</span>&#64;vars<span class="hl sym">))</span>
     <span class="hl sym">,</span>&#64;body<span class="hl sym">))</span>

<span class="hl sym">(</span>defmacro with<span class="hl sym">-</span>permutations <span class="hl sym">(((&amp;</span>rest seq<span class="hl sym">-</span>vars<span class="hl sym">)</span> perm<span class="hl sym">-</span>index<span class="hl sym">-</span>start perm<span class="hl sym">-</span>count<span class="hl sym">) &amp;</span>body body<span class="hl sym">)</span>
  <span class="hl sym">(</span>let<span class="hl sym">* ((</span>seq<span class="hl sym">-</span>length <span class="hl sym">(</span>length seq<span class="hl sym">-</span>vars<span class="hl sym">))</span>
         <span class="hl sym">(</span>facts <span class="hl sym">(</span>make<span class="hl sym">-</span>facts<span class="hl sym">-</span>vector seq<span class="hl sym">-</span>length<span class="hl sym">))</span>
         <span class="hl sym">(</span>outer<span class="hl sym">-</span>tag <span class="hl sym">(</span>gensym<span class="hl sym">))</span>
         <span class="hl sym">(</span>count <span class="hl sym">(</span>gensym<span class="hl sym">)))</span>
    <span class="hl sym">(</span>labels <span class="hl sym">((</span>build<span class="hl sym">-</span>loop <span class="hl sym">(</span>depth upper<span class="hl sym">-</span>seq<span class="hl sym">-</span>vars<span class="hl sym">)</span>
               <span class="hl sym">(</span>if <span class="hl sym">(&gt;=</span> depth seq<span class="hl sym">-</span>length<span class="hl sym">)</span>
                   <span class="hl sym">`(</span>with<span class="hl sym">-</span>vars<span class="hl sym">-</span>bound <span class="hl sym">(,</span>seq<span class="hl sym">-</span>vars <span class="hl sym">,</span>upper<span class="hl sym">-</span>seq<span class="hl sym">-</span>vars<span class="hl sym">)</span>
                      <span class="hl sym">(</span>when <span class="hl sym">(</span>zerop <span class="hl sym">,</span>count<span class="hl sym">)</span>
                        <span class="hl sym">(</span>return<span class="hl sym">-</span>from <span class="hl sym">,</span>outer<span class="hl sym">-</span>tag<span class="hl sym">))</span>
                      <span class="hl sym">(</span>decf <span class="hl sym">,</span>count<span class="hl sym">)</span>
                      <span class="hl sym">,</span>&#64;body<span class="hl sym">)</span>
                   <span class="hl sym">(</span>let<span class="hl sym">* ((</span>my<span class="hl sym">-</span>seq<span class="hl sym">-</span>vars <span class="hl sym">(</span>loop <span class="hl sym">:</span>repeat <span class="hl sym">(-</span> seq<span class="hl sym">-</span>length depth<span class="hl sym">) :</span>collect <span class="hl sym">(</span>gensym<span class="hl sym">)))</span>
                          <span class="hl sym">(</span>shift<span class="hl sym">-</span>body <span class="hl sym">`(</span>let <span class="hl sym">((</span>first <span class="hl sym">,(</span>car my<span class="hl sym">-</span>seq<span class="hl sym">-</span>vars<span class="hl sym">)))</span>
                                         <span class="hl sym">(</span>setf <span class="hl sym">,</span>&#64;<span class="hl sym">(</span>loop <span class="hl sym">:</span>for src <span class="hl sym">:</span>in my<span class="hl sym">-</span>seq<span class="hl sym">-</span>vars and dst <span class="hl sym">=</span> src
                                                    <span class="hl sym">:</span>when dst <span class="hl sym">:</span>collect dst and <span class="hl sym">:</span>collect src<span class="hl sym">)</span>
                                               <span class="hl sym">,(</span>car <span class="hl sym">(</span>last my<span class="hl sym">-</span>seq<span class="hl sym">-</span>vars<span class="hl sym">))</span> first<span class="hl sym">)))</span>
                          <span class="hl sym">(</span>repeat<span class="hl sym">-</span>body <span class="hl sym">(</span>if <span class="hl sym">(=</span> depth <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">-</span> seq<span class="hl sym">-</span>length<span class="hl sym">))</span>
                                           <span class="hl sym">(</span>build<span class="hl sym">-</span>loop <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">+</span> depth<span class="hl sym">)</span> upper<span class="hl sym">-</span>seq<span class="hl sym">-</span>vars<span class="hl sym">)</span>
                                           <span class="hl sym">`(</span>prog1 <span class="hl sym">(</span>if <span class="hl sym">(&gt;= ,</span>perm<span class="hl sym">-</span>index<span class="hl sym">-</span>start <span class="hl sym">,(</span>elt facts <span class="hl sym">(-</span> seq<span class="hl sym">-</span>length depth <span class="hl num">1</span><span class="hl sym">)))</span>
                                                       <span class="hl sym">(</span>decf <span class="hl sym">,</span>perm<span class="hl sym">-</span>index<span class="hl sym">-</span>start <span class="hl sym">,(</span>elt facts <span class="hl sym">(-</span> seq<span class="hl sym">-</span>length depth <span class="hl num">1</span><span class="hl sym">)))</span>
                                                       <span class="hl sym">,(</span>build<span class="hl sym">-</span>loop <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">+</span> depth<span class="hl sym">)</span>
                                                                    <span class="hl sym">(</span>append my<span class="hl sym">-</span>seq<span class="hl sym">-</span>vars <span class="hl sym">(</span>subseq upper<span class="hl sym">-</span>seq<span class="hl sym">-</span>vars
                                                                                                <span class="hl sym">(</span>length my<span class="hl sym">-</span>seq<span class="hl sym">-</span>vars<span class="hl sym">)))))</span>
                                              <span class="hl sym">,</span>shift<span class="hl sym">-</span>body<span class="hl sym">))))</span>
                     <span class="hl sym">(</span>if <span class="hl sym">(&gt; (-</span> seq<span class="hl sym">-</span>length depth<span class="hl sym">)</span> <span class="hl num">1</span><span class="hl sym">)</span>
                         <span class="hl sym">`(</span>with<span class="hl sym">-</span>vars<span class="hl sym">-</span>bound <span class="hl sym">(,</span>my<span class="hl sym">-</span>seq<span class="hl sym">-</span>vars <span class="hl sym">,</span>upper<span class="hl sym">-</span>seq<span class="hl sym">-</span>vars<span class="hl sym">)</span>
                            <span class="hl sym">(</span>loop <span class="hl sym">:</span>repeat <span class="hl sym">,(-</span> seq<span class="hl sym">-</span>length depth<span class="hl sym">) :</span>do <span class="hl sym">,</span>repeat<span class="hl sym">-</span>body<span class="hl sym">))</span>
                         repeat<span class="hl sym">-</span>body<span class="hl sym">)))))</span>
      <span class="hl sym">`(</span>let <span class="hl sym">((,</span>count <span class="hl sym">,</span>perm<span class="hl sym">-</span>count<span class="hl sym">))</span>
         <span class="hl sym">(</span>declare <span class="hl sym">(</span>type <span class="hl sym">(</span>integer <span class="hl num">0</span> <span class="hl sym">,(</span>elt facts seq<span class="hl sym">-</span>length<span class="hl sym">)) ,</span>count<span class="hl sym">))</span>
         <span class="hl sym">(</span>block <span class="hl sym">,</span>outer<span class="hl sym">-</span>tag
           <span class="hl sym">,(</span>build<span class="hl sym">-</span>loop <span class="hl num">0</span> <span class="hl sym">(</span>loop <span class="hl sym">:</span>for i <span class="hl sym">:</span>from <span class="hl num">0</span> <span class="hl sym">:</span>below seq<span class="hl sym">-</span>length <span class="hl sym">:</span>collect i<span class="hl sym">)))))))</span>

<span class="hl sym">(</span>defmacro with<span class="hl sym">-</span>flips<span class="hl sym">-</span>count <span class="hl sym">(((&amp;</span>rest seq<span class="hl sym">-</span>vars<span class="hl sym">)</span> flips<span class="hl sym">-</span>count<span class="hl sym">) &amp;</span>body body<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>head <span class="hl sym">(</span>car seq<span class="hl sym">-</span>vars<span class="hl sym">)))</span>
    <span class="hl sym">`(</span>let <span class="hl sym">((,</span>flips<span class="hl sym">-</span>count <span class="hl num">0</span><span class="hl sym">))</span>
       <span class="hl sym">(</span>declare <span class="hl sym">(</span>type fixnum <span class="hl sym">,</span>flips<span class="hl sym">-</span>count<span class="hl sym">))</span>
       <span class="hl sym">(</span>unless <span class="hl sym">(</span>zerop <span class="hl sym">,</span>head<span class="hl sym">)</span>
         <span class="hl sym">(</span>loop
            <span class="hl sym">(</span>incf <span class="hl sym">,</span>flips<span class="hl sym">-</span>count<span class="hl sym">)</span>
            <span class="hl sym">(</span>cond
              <span class="hl sym">,</span>&#64;<span class="hl sym">(</span>loop <span class="hl sym">:</span>for value <span class="hl sym">:</span>from <span class="hl num">1</span> <span class="hl sym">:</span>below <span class="hl sym">(</span>length seq<span class="hl sym">-</span>vars<span class="hl sym">)</span>
                   <span class="hl sym">:</span>collect <span class="hl sym">`((= ,</span>head <span class="hl sym">,</span>value<span class="hl sym">)</span>
                              <span class="hl sym">(</span>when <span class="hl sym">(</span>zerop <span class="hl sym">,(</span>elt seq<span class="hl sym">-</span>vars value<span class="hl sym">))</span>
                                <span class="hl sym">(</span>return<span class="hl sym">))</span>
                              <span class="hl sym">,</span>&#64;<span class="hl sym">(</span>loop <span class="hl sym">:</span>for l <span class="hl sym">:</span>from <span class="hl num">0</span> <span class="hl sym">:</span>for r <span class="hl sym">:</span>downfrom value <span class="hl sym">:</span>while <span class="hl sym">(&lt;</span> l r<span class="hl sym">)</span>
                                   <span class="hl sym">:</span>collect <span class="hl sym">`(</span>rotatef <span class="hl sym">,(</span>elt seq<span class="hl sym">-</span>vars l<span class="hl sym">) ,(</span>elt seq<span class="hl sym">-</span>vars r<span class="hl sym">))))))))</span>
       <span class="hl sym">,</span>&#64;body<span class="hl sym">)))</span>

<span class="hl sym">(</span>defstruct atomic
  <span class="hl sym">(</span>counter <span class="hl num">0</span> <span class="hl sym">:</span>type <span class="hl sym">(</span>unsigned<span class="hl sym">-</span>byte #<span class="hl sym">+</span>x86<span class="hl sym">-</span><span class="hl num">64 64</span> #<span class="hl sym">+</span>x86 <span class="hl num">32</span><span class="hl sym">)))</span>

<span class="hl sym">(</span>defmacro deffannkuch <span class="hl sym">(</span>seq<span class="hl sym">-</span>length <span class="hl sym">&amp;</span>key <span class="hl sym">(</span>workers <span class="hl num">1</span><span class="hl sym">)</span> worker<span class="hl sym">-</span>chunk<span class="hl sym">-</span>size<span class="hl sym">)</span>
  <span class="hl sym">(</span>let<span class="hl sym">* ((</span>facts <span class="hl sym">(</span>make<span class="hl sym">-</span>facts<span class="hl sym">-</span>vector seq<span class="hl sym">-</span>length<span class="hl sym">))</span>
         <span class="hl sym">(</span>chunk<span class="hl sym">-</span>size <span class="hl sym">(</span>or worker<span class="hl sym">-</span>chunk<span class="hl sym">-</span>size <span class="hl sym">(</span>min <span class="hl sym">(</span>elt facts seq<span class="hl sym">-</span>length<span class="hl sym">)</span> <span class="hl num">400</span><span class="hl sym">)))</span>
         <span class="hl sym">(</span>seq<span class="hl sym">-</span>vars <span class="hl sym">(</span>loop <span class="hl sym">:</span>for i <span class="hl sym">:</span>from <span class="hl num">0</span> <span class="hl sym">:</span>below seq<span class="hl sym">-</span>length <span class="hl sym">:</span>collect <span class="hl sym">(</span>gensym<span class="hl sym">))))</span>
    <span class="hl sym">`(</span>lambda <span class="hl sym">()</span>
       <span class="hl sym">(</span>declare <span class="hl sym">(</span>optimize <span class="hl sym">(</span>speed <span class="hl num">3</span><span class="hl sym">) (</span>safety <span class="hl num">0</span><span class="hl sym">) (</span>debug <span class="hl num">0</span><span class="hl sym">)))</span>
       <span class="hl sym">(</span>let <span class="hl sym">((</span>wrk<span class="hl sym">-</span>max<span class="hl sym">-</span>flips <span class="hl sym">(</span>make<span class="hl sym">-</span>array <span class="hl sym">,</span>workers <span class="hl sym">:</span>element<span class="hl sym">-</span>type <span class="hl sym">'</span>fixnum<span class="hl sym">))</span>
             <span class="hl sym">(</span>wrk<span class="hl sym">-</span>checksums <span class="hl sym">(</span>make<span class="hl sym">-</span>array <span class="hl sym">,</span>workers <span class="hl sym">:</span>element<span class="hl sym">-</span>type <span class="hl sym">'</span>fixnum<span class="hl sym">))</span>
             <span class="hl sym">(</span>current<span class="hl sym">-</span>idx <span class="hl sym">(</span>make<span class="hl sym">-</span>atomic<span class="hl sym">)))</span>
         <span class="hl sym">(</span>flet <span class="hl sym">((</span>make<span class="hl sym">-</span>worker <span class="hl sym">(</span>wrk<span class="hl sym">-</span>index<span class="hl sym">)</span>
                  <span class="hl sym">(</span>declare <span class="hl sym">(</span>type <span class="hl sym">(</span>integer <span class="hl num">0</span> <span class="hl sym">,(</span><span class="hl num">1</span><span class="hl sym">-</span> workers<span class="hl sym">))</span> wrk<span class="hl sym">-</span>index<span class="hl sym">))</span>
                  <span class="hl sym">(</span>lambda <span class="hl sym">()</span>
                    <span class="hl sym">(</span>loop
                       <span class="hl sym">:</span>with checksum <span class="hl sym">:</span>of<span class="hl sym">-</span>type fixnum <span class="hl sym">=</span> <span class="hl num">0</span>
                       <span class="hl sym">:</span>with max<span class="hl sym">-</span>flips <span class="hl sym">:</span>of<span class="hl sym">-</span>type fixnum <span class="hl sym">=</span> <span class="hl num">0</span>
                       <span class="hl sym">:</span>for perm<span class="hl sym">-</span>index <span class="hl sym">:</span>of<span class="hl sym">-</span>type fixnum <span class="hl sym">= (</span>sb<span class="hl sym">-</span>ext<span class="hl sym">:</span>atomic<span class="hl sym">-</span>incf <span class="hl sym">(</span>atomic<span class="hl sym">-</span>counter current<span class="hl sym">-</span>idx<span class="hl sym">)</span>
                                                                             <span class="hl sym">,</span>chunk<span class="hl sym">-</span>size<span class="hl sym">)</span>
                       <span class="hl sym">:</span>while <span class="hl sym">(&lt;</span> perm<span class="hl sym">-</span>index <span class="hl sym">,(</span>elt facts seq<span class="hl sym">-</span>length<span class="hl sym">))</span>
                       <span class="hl sym">:</span>for sign <span class="hl sym">:</span>of<span class="hl sym">-</span>type boolean <span class="hl sym">= (</span>evenp perm<span class="hl sym">-</span>index<span class="hl sym">)</span>
                       <span class="hl sym">:</span>do <span class="hl sym">(</span>with<span class="hl sym">-</span>permutations <span class="hl sym">((,</span>&#64;seq<span class="hl sym">-</span>vars<span class="hl sym">)</span> perm<span class="hl sym">-</span>index <span class="hl sym">,</span>chunk<span class="hl sym">-</span>size<span class="hl sym">)</span>
                             <span class="hl sym">(</span>with<span class="hl sym">-</span>flips<span class="hl sym">-</span>count <span class="hl sym">((,</span>&#64;seq<span class="hl sym">-</span>vars<span class="hl sym">)</span> flips<span class="hl sym">-</span>count<span class="hl sym">)</span>
                               <span class="hl sym">(</span>when <span class="hl sym">(&gt;</span> flips<span class="hl sym">-</span>count max<span class="hl sym">-</span>flips<span class="hl sym">)</span>
                                 <span class="hl sym">(</span>setf max<span class="hl sym">-</span>flips flips<span class="hl sym">-</span>count<span class="hl sym">))</span>
                               <span class="hl sym">(</span>incf checksum <span class="hl sym">(</span>if sign flips<span class="hl sym">-</span>count <span class="hl sym">(-</span> flips<span class="hl sym">-</span>count<span class="hl sym">)))</span>
                               <span class="hl sym">(</span>setf sign <span class="hl sym">(</span>not sign<span class="hl sym">))))</span>
                       <span class="hl sym">:</span>finally <span class="hl sym">(</span>setf <span class="hl sym">(</span>elt wrk<span class="hl sym">-</span>max<span class="hl sym">-</span>flips wrk<span class="hl sym">-</span>index<span class="hl sym">)</span> max<span class="hl sym">-</span>flips
                                      <span class="hl sym">(</span>elt wrk<span class="hl sym">-</span>checksums wrk<span class="hl sym">-</span>index<span class="hl sym">)</span> checksum<span class="hl sym">)))))</span>
           <span class="hl sym">(</span>mapc #<span class="hl sym">'</span>sb<span class="hl sym">-</span>thread<span class="hl sym">:</span>join<span class="hl sym">-</span>thread
                 <span class="hl sym">(</span>list <span class="hl sym">,</span>&#64;<span class="hl sym">(</span>loop <span class="hl sym">:</span>for wrk<span class="hl sym">-</span>index <span class="hl sym">:</span>from <span class="hl num">0</span> <span class="hl sym">:</span>below workers
                            <span class="hl sym">:</span>collect <span class="hl sym">`(</span>sb<span class="hl sym">-</span>thread<span class="hl sym">:</span>make<span class="hl sym">-</span>thread <span class="hl sym">(</span>make<span class="hl sym">-</span>worker <span class="hl sym">,</span>wrk<span class="hl sym">-</span>index<span class="hl sym">))))))</span>
         <span class="hl sym">(</span>loop <span class="hl sym">:</span>for i <span class="hl sym">:</span>from <span class="hl num">0</span> <span class="hl sym">:</span>below <span class="hl sym">,</span>workers
            <span class="hl sym">:</span>summing <span class="hl sym">(</span>elt wrk<span class="hl sym">-</span>checksums i<span class="hl sym">) :</span>into checksum <span class="hl sym">:</span>of<span class="hl sym">-</span>type fixnum
            <span class="hl sym">:</span>maximizing <span class="hl sym">(</span>elt wrk<span class="hl sym">-</span>max<span class="hl sym">-</span>flips i<span class="hl sym">) :</span>into max<span class="hl sym">-</span>flips
            <span class="hl sym">:</span>finally <span class="hl sym">(</span>return <span class="hl sym">(</span>values checksum max<span class="hl sym">-</span>flips<span class="hl sym">)))))))</span>

<span class="hl sym">(</span>defun main <span class="hl sym">(&amp;</span>optional force<span class="hl sym">-</span>n<span class="hl sym">)</span>
  <span class="hl sym">(</span>let<span class="hl sym">* ((</span>args <span class="hl sym">(</span>cdr sb<span class="hl sym">-</span>ext<span class="hl sym">:*</span>posix<span class="hl sym">-</span>argv<span class="hl sym">*))</span>
         <span class="hl sym">(</span>n <span class="hl sym">(</span>or force<span class="hl sym">-</span>n <span class="hl sym">(</span>if args <span class="hl sym">(</span>parse<span class="hl sym">-</span>integer <span class="hl sym">(</span>car args<span class="hl sym">))</span> <span class="hl num">12</span><span class="hl sym">))))</span>
    <span class="hl sym">(</span>multiple<span class="hl sym">-</span>value<span class="hl sym">-</span>bind <span class="hl sym">(</span>checksum max<span class="hl sym">-</span>flips<span class="hl sym">-</span>count<span class="hl sym">)</span>
        <span class="hl sym">(</span>funcall <span class="hl sym">(</span>the function <span class="hl sym">(</span>eval <span class="hl sym">`(</span>deffannkuch <span class="hl sym">,</span>n <span class="hl sym">:</span>workers <span class="hl num">4</span> <span class="hl sym">:</span>worker<span class="hl sym">-</span>chunk<span class="hl sym">-</span>size <span class="hl num">12000</span><span class="hl sym">))))</span>
      <span class="hl sym">(</span>format t <span class="hl str">&quot;~a~%Pfannkuchen(~a) = ~a~%&quot;</span> checksum n max<span class="hl sym">-</span>flips<span class="hl sym">-</span>count<span class="hl sym">))))</span>


<span class="hl sym">(</span>in<span class="hl sym">-</span>package <span class="hl sym">:</span>cl<span class="hl sym">-</span>user<span class="hl sym">)</span>

<span class="hl sym">(</span>defun main <span class="hl sym">()</span>
  <span class="hl sym">(</span>fannkuch<span class="hl sym">-</span>redux<span class="hl sym">::</span>main<span class="hl sym">))</span>

