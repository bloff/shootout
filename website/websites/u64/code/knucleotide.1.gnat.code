<span class="hl slc">-------------------------------------------------------------------------------</span>
<span class="hl slc">--  The Computer Language Shootout http://shootout.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">--  Contributed by Martin Krischik</span>
<span class="hl slc">-------------------------------------------------------------------------------</span>

<span class="hl kwa">pragma</span> Ada_95<span class="hl sym">;</span>

<span class="hl slc">--  Standart set of performance improving pragmas as suggested by the GNAT users manual.</span>
<span class="hl kwa">pragma</span> Restrictions <span class="hl sym">(</span>Max_Asynchronous_Select_Nesting <span class="hl sym">=&gt;</span> <span class="hl num">0</span><span class="hl sym">);</span>
<span class="hl kwa">pragma</span> Restrictions <span class="hl sym">(</span>No_Abort_Statements<span class="hl sym">);</span>
<span class="hl kwa">pragma</span> Restrictions <span class="hl sym">(</span>No_Finalization<span class="hl sym">);</span>

<span class="hl kwa">with</span> Ada.Characters.Handling<span class="hl sym">;</span>
<span class="hl kwa">with</span> Ada.Characters.Latin_1<span class="hl sym">;</span>
<span class="hl kwa">with</span> Ada.Integer_Text_IO<span class="hl sym">;</span>
<span class="hl kwa">with</span> Ada.IO_Exceptions<span class="hl sym">;</span>
<span class="hl kwa">with</span> Ada.Float_Text_IO<span class="hl sym">;</span>
<span class="hl kwa">with</span> Ada.Strings.Bounded<span class="hl sym">;</span>
<span class="hl kwa">with</span> Ada.Text_IO<span class="hl sym">;</span>

<span class="hl slc">--  The shootout is using an old Ada 95 compiler so only the GNAT hash tables and sort are</span>
<span class="hl slc">--  available. As soon as the new Ada 2005 compiler is available we can use Ada.Containers which</span>
<span class="hl slc">--  are more high level and should reduce the LOC significantly and make the programm more</span>
<span class="hl slc">--  &quot;plain vanilla&quot;.</span>
<span class="hl kwa">with</span> GNAT.Heap_Sort_G<span class="hl sym">;</span>
<span class="hl kwa">with</span> GNAT.HTable<span class="hl sym">;</span>

<span class="hl kwa">procedure</span> KNucleotide <span class="hl kwa">is</span>
   <span class="hl kwa">subtype</span> Frequencies <span class="hl kwa">is</span> <span class="hl kwb">Integer</span> <span class="hl kwa">range</span> <span class="hl num">1</span> .. <span class="hl num">18</span><span class="hl sym">;</span>

   <span class="hl kwa">package</span> Fragments <span class="hl kwa">is new</span> Ada.Strings.Bounded.Generic_Bounded_Length <span class="hl sym">(</span>Frequencies<span class="hl sym">'</span>Last<span class="hl sym">);</span>

   <span class="hl kwa">use type</span> Fragments.Bounded_String<span class="hl sym">;</span>

   <span class="hl kwa">subtype</span> Fragment <span class="hl kwa">is</span> Fragments.Bounded_String<span class="hl sym">;</span>

   <span class="hl slc">----------------------------------------------------------------------------</span>
   <span class="hl slc">--</span>
   <span class="hl slc">--  Read data from Standart_Input and return the section THREE as String</span>
   <span class="hl slc">--</span>
   <span class="hl kwa">function</span> Read <span class="hl kwa">return</span> <span class="hl kwb">String</span><span class="hl sym">;</span>

   <span class="hl slc">----------------------------------------------------------------------------</span>
   <span class="hl slc">--</span>
   <span class="hl slc">--  Calculate and write data - either a percentage for all fragments found or - when</span>
   <span class="hl slc">--  Nucleotide_Fragment is given - the count for that fragment.</span>
   <span class="hl slc">--</span>
   <span class="hl kwa">procedure</span> Write
     <span class="hl sym">(</span>Nucleotide_Length   <span class="hl sym">:</span> <span class="hl kwa">in</span> Frequencies<span class="hl sym">;</span>
      Nucleotide_Fragment <span class="hl sym">:</span> <span class="hl kwa">in</span> Fragment <span class="hl sym">:=</span> Fragments.Null_Bounded_String<span class="hl sym">);</span>

   <span class="hl slc">----------------------------------------------------------------------------</span>
   <span class="hl slc">--</span>
   <span class="hl slc">--  List of fragments to be analyzed for this test</span>
   <span class="hl slc">--</span>
   Fragment_3  <span class="hl sym">:</span> <span class="hl kwa">constant</span> Fragment <span class="hl sym">:=</span> Fragments.To_Bounded_String <span class="hl sym">(</span><span class="hl str">&quot;GGT&quot;</span><span class="hl sym">);</span>
   Fragment_4  <span class="hl sym">:</span> <span class="hl kwa">constant</span> Fragment <span class="hl sym">:=</span> Fragments.To_Bounded_String <span class="hl sym">(</span><span class="hl str">&quot;GGTA&quot;</span><span class="hl sym">);</span>
   Fragment_6  <span class="hl sym">:</span> <span class="hl kwa">constant</span> Fragment <span class="hl sym">:=</span> Fragments.To_Bounded_String <span class="hl sym">(</span><span class="hl str">&quot;GGTATT&quot;</span><span class="hl sym">);</span>
   Fragment_12 <span class="hl sym">:</span> <span class="hl kwa">constant</span> Fragment <span class="hl sym">:=</span> Fragments.To_Bounded_String <span class="hl sym">(</span><span class="hl str">&quot;GGTATTTTAATT&quot;</span><span class="hl sym">);</span>
   Fragment_18 <span class="hl sym">:</span> <span class="hl kwa">constant</span> Fragment <span class="hl sym">:=</span> Fragments.To_Bounded_String <span class="hl sym">(</span><span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl sym">);</span>

   <span class="hl slc">----------------------------------------------------------------------------</span>
   <span class="hl slc">--</span>
   <span class="hl slc">--  Read data from Standart_Input and return the section THREE as String</span>
   <span class="hl slc">--</span>
   <span class="hl kwa">function</span> Read <span class="hl kwa">return</span> <span class="hl kwb">String</span> <span class="hl kwa">is</span>
      <span class="hl slc">-------------------------------------------------------------------------</span>
      <span class="hl slc">--</span>
      <span class="hl slc">--  Skip data on Standart_Input until &quot;&gt;THREE&quot; is found</span>
      <span class="hl slc">--</span>
      <span class="hl kwa">procedure</span> Skip_To_Section<span class="hl sym">;</span>

      <span class="hl slc">-------------------------------------------------------------------------</span>
      <span class="hl slc">--</span>
      <span class="hl slc">--  Read next data section - until EOF oder a line beginning with &gt; is found</span>
      <span class="hl slc">--</span>
      <span class="hl kwa">function</span> Read_Section <span class="hl kwa">return</span> <span class="hl kwb">String</span><span class="hl sym">;</span>

      <span class="hl kwa">pragma</span> Inline <span class="hl sym">(</span>Read_Section<span class="hl sym">);</span>
      <span class="hl kwa">pragma</span> Inline <span class="hl sym">(</span>Skip_To_Section<span class="hl sym">);</span>

      Section_Marker <span class="hl sym">:</span> <span class="hl kwa">constant</span> <span class="hl kwb">Character</span> <span class="hl sym">:= '&gt;';</span>
      Section        <span class="hl sym">:</span> <span class="hl kwa">constant</span> <span class="hl kwb">String</span>    <span class="hl sym">:=</span> Section_Marker <span class="hl sym">&amp;</span> <span class="hl str">&quot;THREE&quot;</span><span class="hl sym">;</span>

      <span class="hl slc">-------------------------------------------------------------------------</span>
      <span class="hl slc">--</span>
      <span class="hl slc">--  Read next data section - until EOF oder a line beginning with &gt; is found.</span>
      <span class="hl slc">--</span>
      <span class="hl kwa">function</span> Read_Section <span class="hl kwa">return</span> <span class="hl kwb">String</span> <span class="hl kwa">is</span>
         <span class="hl slc">--</span>
         <span class="hl slc">--  We are using a recursive read function which won't need any heap storage. For</span>
         <span class="hl slc">--  fairness sake we use the same initial buffer size as the C demo.</span>
         <span class="hl slc">--</span>
         Buffer     <span class="hl sym">:</span> <span class="hl kwb">String</span> <span class="hl sym">(</span><span class="hl num">1</span> .. <span class="hl num">10240</span><span class="hl sym">);</span>
         Read_First <span class="hl sym">:</span> <span class="hl kwb">Natural</span> <span class="hl sym">:=</span> Buffer<span class="hl sym">'</span>First<span class="hl sym">;</span>
         Read_Last  <span class="hl sym">:</span> <span class="hl kwb">Natural</span> <span class="hl sym">:=</span> Buffer<span class="hl sym">'</span>First<span class="hl sym">;</span>
      <span class="hl kwa">begin</span>
         <span class="hl kwa">loop</span>
            Ada.Text_IO.Get_Line
              <span class="hl sym">(</span>Item <span class="hl sym">=&gt;</span> Buffer <span class="hl sym">(</span>Read_First .. Buffer<span class="hl sym">'</span>Last<span class="hl sym">),</span>
               Last <span class="hl sym">=&gt;</span> Read_Last<span class="hl sym">);</span>
            <span class="hl kwa">exit when</span> Buffer <span class="hl sym">(</span>Read_First<span class="hl sym">) =</span> Section_Marker<span class="hl sym">;</span>
            <span class="hl kwa">if</span> Read_Last <span class="hl sym">=</span> Buffer<span class="hl sym">'</span>Last <span class="hl kwa">then</span>
               <span class="hl kwa">return</span> Buffer <span class="hl sym">&amp;</span> Read_Section<span class="hl sym">;</span>
            <span class="hl kwa">end if</span><span class="hl sym">;</span>
            Read_First <span class="hl sym">:=</span> Read_Last <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
         <span class="hl kwa">end loop</span><span class="hl sym">;</span>
         <span class="hl kwa">return</span> Buffer <span class="hl sym">(</span><span class="hl num">1</span> .. Read_Last<span class="hl sym">);</span>
      <span class="hl kwa">exception</span>
         <span class="hl kwa">when</span> Ada.IO_Exceptions.End_Error <span class="hl sym">=&gt;</span>
            <span class="hl kwa">return</span> Buffer <span class="hl sym">(</span><span class="hl num">1</span> .. Read_Last<span class="hl sym">);</span>
      <span class="hl kwa">end</span> Read_Section<span class="hl sym">;</span>

      <span class="hl slc">------------------------------------------------------------------------</span>
      <span class="hl slc">--</span>
      <span class="hl slc">--  Skip data on Standart_Input until &quot;&gt;THREE&quot; is found</span>
      <span class="hl slc">--</span>
      <span class="hl kwa">procedure</span> Skip_To_Section <span class="hl kwa">is</span>
         <span class="hl slc">--</span>
         <span class="hl slc">--  The line lenght of the test data is 60 character. Note: Get_Line would survive</span>
         <span class="hl slc">--  longer lines as well - they would just be read in two parts.</span>
         <span class="hl slc">--</span>
         Line      <span class="hl sym">:</span> <span class="hl kwb">String</span> <span class="hl sym">(</span><span class="hl num">1</span> .. <span class="hl num">60</span><span class="hl sym">);</span>
         Read_Last <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span>
      <span class="hl kwa">begin</span>
         <span class="hl kwa">loop</span>
            Ada.Text_IO.Get_Line <span class="hl sym">(</span>Item <span class="hl sym">=&gt;</span> Line<span class="hl sym">,</span> Last <span class="hl sym">=&gt;</span> Read_Last<span class="hl sym">);</span>
            <span class="hl kwa">exit when</span> Line <span class="hl sym">(</span><span class="hl num">1</span> .. <span class="hl num">6</span><span class="hl sym">) =</span> Section<span class="hl sym">;</span>
         <span class="hl kwa">end loop</span><span class="hl sym">;</span>
      <span class="hl kwa">end</span> Skip_To_Section<span class="hl sym">;</span>

   <span class="hl kwa">begin</span>
      Skip_To_Section<span class="hl sym">;</span>
      <span class="hl kwa">return</span> Ada.Characters.Handling.To_Upper <span class="hl sym">(</span>Read_Section<span class="hl sym">);</span>
   <span class="hl kwa">end</span> Read<span class="hl sym">;</span>

   <span class="hl slc">---------------------------------------------------------------------------</span>
   <span class="hl slc">--</span>
   <span class="hl slc">--  Data read as single String</span>
   <span class="hl slc">--</span>
   Buffer <span class="hl sym">:</span> <span class="hl kwa">constant</span> <span class="hl kwb">String</span> <span class="hl sym">:=</span> Read<span class="hl sym">;</span>

   <span class="hl slc">----------------------------------------------------------------------------</span>
   <span class="hl slc">--</span>
   <span class="hl slc">--  Calculate and write data - either a percentage for all fragments found or - when</span>
   <span class="hl slc">--  Nucleotide_Fragment is given - the count for that fragment.</span>
   <span class="hl slc">--</span>
   <span class="hl kwa">procedure</span> Write
     <span class="hl sym">(</span>Nucleotide_Length   <span class="hl sym">:</span> <span class="hl kwa">in</span> Frequencies<span class="hl sym">;</span>
      Nucleotide_Fragment <span class="hl sym">:</span> <span class="hl kwa">in</span> Fragment <span class="hl sym">:=</span> Fragments.Null_Bounded_String<span class="hl sym">)</span>
   <span class="hl kwa">is</span>
      <span class="hl slc">------------------------------------------------------------------------</span>
      <span class="hl slc">--</span>
      <span class="hl slc">--  The Calculator package calculates the nucleotide frequencies and keeps the result</span>
      <span class="hl slc">--  inside a hash table as requested by the shootout rules.</span>
      <span class="hl slc">--</span>
      <span class="hl kwa">package</span> Calculator <span class="hl kwa">is</span>
         <span class="hl slc">---------------------------------------------------------------------</span>
         <span class="hl slc">--</span>
         <span class="hl slc">--  Elements used to store inside hash table</span>
         <span class="hl slc">--</span>
         <span class="hl kwa">type</span> Element_Type <span class="hl kwa">is private</span><span class="hl sym">;</span>
         <span class="hl kwa">type</span> Element_Access <span class="hl kwa">is access</span> Element_Type<span class="hl sym">;</span>
         <span class="hl kwa">for</span> Element_Access<span class="hl sym">'</span>Storage_Size <span class="hl kwa">use</span> <span class="hl num">16</span>#<span class="hl num">60</span>_00_00#<span class="hl sym">;</span>

         <span class="hl slc">---------------------------------------------------------------------</span>
         <span class="hl slc">--</span>
         <span class="hl slc">--  Calculate the calculates the nucleotide frequencies</span>
         <span class="hl slc">--</span>
         <span class="hl kwa">procedure</span> Calculate_Frequencies <span class="hl sym">(</span>Length <span class="hl sym">:</span> Frequencies<span class="hl sym">);</span>

         <span class="hl slc">---------------------------------------------------------------------</span>
         <span class="hl slc">--</span>
         <span class="hl slc">--  Get the count for the given nucleotide fragment</span>
         <span class="hl slc">--</span>
         <span class="hl kwa">function</span> Get <span class="hl sym">(</span>Nucleotide_Fragment <span class="hl sym">:</span> Fragment<span class="hl sym">)</span> <span class="hl kwa">return</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span>

         <span class="hl slc">---------------------------------------------------------------------</span>
         <span class="hl slc">--</span>
         <span class="hl slc">--  Start to iterate over all element of hash table</span>
         <span class="hl slc">--</span>
         <span class="hl kwa">function</span> Get_First <span class="hl kwa">return</span> Element_Access<span class="hl sym">;</span>

         <span class="hl slc">---------------------------------------------------------------------</span>
         <span class="hl slc">--</span>
         <span class="hl slc">--  Continue itereation over the hash table</span>
         <span class="hl slc">--</span>
         <span class="hl kwa">function</span> Get_Next <span class="hl kwa">return</span> Element_Access<span class="hl sym">;</span>

         <span class="hl slc">---------------------------------------------------------------------</span>
         <span class="hl slc">--</span>
         <span class="hl slc">--  Get count for element</span>
         <span class="hl slc">--</span>
         <span class="hl kwa">function</span> Count <span class="hl sym">(</span>Element <span class="hl sym">:</span> Element_Access<span class="hl sym">)</span> <span class="hl kwa">return</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span>

         <span class="hl slc">---------------------------------------------------------------------</span>
         <span class="hl slc">--</span>
         <span class="hl slc">--  Get key for element</span>
         <span class="hl slc">--</span>
         <span class="hl kwa">function</span> Key <span class="hl sym">(</span>Element <span class="hl sym">:</span> Element_Access<span class="hl sym">)</span> <span class="hl kwa">return</span> Fragment<span class="hl sym">;</span>

         <span class="hl slc">---------------------------------------------------------------------</span>
         <span class="hl slc">--</span>
         <span class="hl slc">--  Get total count over all elements - as well as the count of elements</span>
         <span class="hl slc">--</span>
         <span class="hl kwa">procedure</span> Get_Total <span class="hl sym">(</span>Total <span class="hl sym">:</span> <span class="hl kwa">out</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span> Count <span class="hl sym">:</span> <span class="hl kwa">out</span> <span class="hl kwb">Natural</span><span class="hl sym">);</span>

         <span class="hl kwa">pragma</span> Inline <span class="hl sym">(</span>Calculate_Frequencies<span class="hl sym">);</span>
         <span class="hl kwa">pragma</span> Inline <span class="hl sym">(</span>Get<span class="hl sym">);</span>
         <span class="hl kwa">pragma</span> Inline <span class="hl sym">(</span>Get_First<span class="hl sym">);</span>
         <span class="hl kwa">pragma</span> Inline <span class="hl sym">(</span>Get_Next<span class="hl sym">);</span>
         <span class="hl kwa">pragma</span> Inline <span class="hl sym">(</span>Count<span class="hl sym">);</span>
         <span class="hl kwa">pragma</span> Inline <span class="hl sym">(</span>Key<span class="hl sym">);</span>
         <span class="hl kwa">pragma</span> Inline <span class="hl sym">(</span>Get_Total<span class="hl sym">);</span>
      <span class="hl kwa">private</span>
         <span class="hl slc">---------------------------------------------------------------------</span>
         <span class="hl slc">--</span>
         <span class="hl slc">--  Elements used to store inside hash table.</span>
         <span class="hl slc">--</span>
         <span class="hl kwa">type</span> Element_Type <span class="hl kwa">is record</span>
            Count <span class="hl sym">:</span> <span class="hl kwb">Natural</span>        <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            Key   <span class="hl sym">:</span> Fragment       <span class="hl sym">:=</span> Fragments.Null_Bounded_String<span class="hl sym">;</span>
            Next  <span class="hl sym">:</span> Element_Access <span class="hl sym">:=</span> <span class="hl kwa">null</span><span class="hl sym">;</span>
         <span class="hl kwa">end record</span><span class="hl sym">;</span>
      <span class="hl kwa">end</span> Calculator<span class="hl sym">;</span>

      <span class="hl kwa">package body</span> Calculator <span class="hl kwa">is</span>
         <span class="hl kwa">type</span> Hash_Type <span class="hl kwa">is range</span> <span class="hl num">0</span> .. <span class="hl num">2</span> <span class="hl sym">**</span> <span class="hl num">16</span><span class="hl sym">;</span>

         <span class="hl kwa">function</span> Hash <span class="hl sym">(</span>Key <span class="hl sym">:</span> Fragment<span class="hl sym">)</span> <span class="hl kwa">return</span> Hash_Type<span class="hl sym">;</span>
         <span class="hl kwa">procedure</span> Set_Next <span class="hl sym">(</span>E <span class="hl sym">:</span> Element_Access<span class="hl sym">;</span> Next <span class="hl sym">:</span> Element_Access<span class="hl sym">);</span>
         <span class="hl kwa">function</span> Next <span class="hl sym">(</span>E <span class="hl sym">:</span> Element_Access<span class="hl sym">)</span> <span class="hl kwa">return</span> Element_Access<span class="hl sym">;</span>
         <span class="hl kwa">function</span> Get_Key <span class="hl sym">(</span>E <span class="hl sym">:</span> Element_Access<span class="hl sym">)</span> <span class="hl kwa">return</span> Fragment<span class="hl sym">;</span>

         <span class="hl kwa">pragma</span> Inline <span class="hl sym">(</span>Hash<span class="hl sym">);</span>
         <span class="hl kwa">pragma</span> Inline <span class="hl sym">(</span>Set_Next<span class="hl sym">);</span>
         <span class="hl kwa">pragma</span> Inline <span class="hl sym">(</span>Next<span class="hl sym">);</span>
         <span class="hl kwa">pragma</span> Inline <span class="hl sym">(</span>Get_Key<span class="hl sym">);</span>

         <span class="hl kwa">package</span> Table <span class="hl kwa">is new</span> GNAT.HTable.Static_HTable <span class="hl sym">(</span>
            Header_Num <span class="hl sym">=&gt;</span> Hash_Type<span class="hl sym">,</span>
            Element <span class="hl sym">=&gt;</span> Element_Type<span class="hl sym">,</span>
            Elmt_Ptr <span class="hl sym">=&gt;</span> Element_Access<span class="hl sym">,</span>
            Null_Ptr <span class="hl sym">=&gt;</span> <span class="hl kwa">null</span><span class="hl sym">,</span>
            Key <span class="hl sym">=&gt;</span> Fragment<span class="hl sym">,</span>
            Hash <span class="hl sym">=&gt;</span> Hash<span class="hl sym">,</span>
            Equal <span class="hl sym">=&gt;</span> Fragments. <span class="hl str">&quot;=&quot;</span><span class="hl sym">,</span>
            Set_Next <span class="hl sym">=&gt;</span> Set_Next<span class="hl sym">,</span>
            Next <span class="hl sym">=&gt;</span> Next<span class="hl sym">,</span>
            Get_Key <span class="hl sym">=&gt;</span> Get_Key<span class="hl sym">);</span>

         <span class="hl kwa">function</span> Hash_Function <span class="hl kwa">is new</span> GNAT.HTable.Hash <span class="hl sym">(</span>Header_Num <span class="hl sym">=&gt;</span> Hash_Type<span class="hl sym">);</span>

         <span class="hl slc">---------------------------------------------------------------------</span>
         <span class="hl slc">--</span>
         <span class="hl slc">--  Calculate the calculates the nucleotide frequencies</span>
         <span class="hl slc">--</span>
         <span class="hl kwa">procedure</span> Calculate_Frequencies <span class="hl sym">(</span>Length <span class="hl sym">:</span> Frequencies<span class="hl sym">)</span> <span class="hl kwa">is</span>
         <span class="hl kwa">begin</span>
            Table.Reset<span class="hl sym">;</span>
            <span class="hl kwa">for</span> I <span class="hl kwa">in</span>  <span class="hl num">1</span> .. Buffer<span class="hl sym">'</span>Last <span class="hl sym">-</span> <span class="hl kwb">Integer</span> <span class="hl sym">(</span>Length<span class="hl sym">) +</span> <span class="hl num">1</span> <span class="hl kwa">loop</span>
               <span class="hl kwa">declare</span>
                  Key     <span class="hl sym">:</span> <span class="hl kwa">constant</span> Fragment       <span class="hl sym">:=</span>
                     Fragments.To_Bounded_String <span class="hl sym">(</span>Buffer <span class="hl sym">(</span>I .. I <span class="hl sym">+</span> Length <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">));</span>
                  Element <span class="hl sym">:</span> <span class="hl kwa">constant</span> Element_Access <span class="hl sym">:=</span> Table.Get <span class="hl sym">(</span>Key<span class="hl sym">);</span>
               <span class="hl kwa">begin</span>
                  <span class="hl kwa">if</span> Element <span class="hl sym">/=</span> <span class="hl kwa">null then</span>
                     Element.<span class="hl kwa">all</span>.Count <span class="hl sym">:=</span> <span class="hl kwb">Natural</span><span class="hl sym">'</span>Succ <span class="hl sym">(</span>Element.<span class="hl kwa">all</span>.Count<span class="hl sym">);</span>
                  <span class="hl kwa">else</span>
                     Table.Set <span class="hl sym">(</span><span class="hl kwa">new</span> Element_Type<span class="hl sym">'(</span>Count <span class="hl sym">=&gt;</span> <span class="hl num">1</span><span class="hl sym">,</span> Key <span class="hl sym">=&gt;</span> Key<span class="hl sym">,</span> Next <span class="hl sym">=&gt;</span> <span class="hl kwa">null</span><span class="hl sym">));</span>
                  <span class="hl kwa">end if</span><span class="hl sym">;</span>
               <span class="hl kwa">end</span><span class="hl sym">;</span>
            <span class="hl kwa">end loop</span><span class="hl sym">;</span>
            <span class="hl kwa">return</span><span class="hl sym">;</span>
         <span class="hl kwa">end</span> Calculate_Frequencies<span class="hl sym">;</span>

         <span class="hl slc">---------------------------------------------------------------------</span>
         <span class="hl slc">--</span>
         <span class="hl slc">--  Get count for element</span>
         <span class="hl slc">--</span>
         <span class="hl kwa">function</span> Count <span class="hl sym">(</span>Element <span class="hl sym">:</span> Element_Access<span class="hl sym">)</span> <span class="hl kwa">return</span> <span class="hl kwb">Natural</span> <span class="hl kwa">is</span>
         <span class="hl kwa">begin</span>
            <span class="hl kwa">return</span> Element.<span class="hl kwa">all</span>.Count<span class="hl sym">;</span>
         <span class="hl kwa">end</span> Count<span class="hl sym">;</span>

         <span class="hl slc">---------------------------------------------------------------------</span>
         <span class="hl slc">--</span>
         <span class="hl slc">--  Get the count for the given nucleotide fragment</span>
         <span class="hl slc">--</span>
         <span class="hl kwa">function</span> Get <span class="hl sym">(</span>Nucleotide_Fragment <span class="hl sym">:</span> Fragment<span class="hl sym">)</span> <span class="hl kwa">return</span> <span class="hl kwb">Natural</span> <span class="hl kwa">is</span>
            The_Element <span class="hl sym">:</span> <span class="hl kwa">constant</span> Element_Access <span class="hl sym">:=</span> Table.Get <span class="hl sym">(</span>Nucleotide_Fragment<span class="hl sym">);</span>
         <span class="hl kwa">begin</span>
            <span class="hl kwa">if</span> The_Element <span class="hl sym">/=</span> <span class="hl kwa">null then</span>
               <span class="hl kwa">return</span> The_Element.<span class="hl kwa">all</span>.Count<span class="hl sym">;</span>
            <span class="hl kwa">else</span>
               <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl kwa">end if</span><span class="hl sym">;</span>
         <span class="hl kwa">end</span> Get<span class="hl sym">;</span>

         <span class="hl slc">---------------------------------------------------------------------</span>
         <span class="hl slc">--</span>
         <span class="hl slc">--  Start to iterate over all element of hash table</span>
         <span class="hl slc">--</span>
         <span class="hl kwa">function</span> Get_First <span class="hl kwa">return</span> Element_Access <span class="hl kwa">is</span>
         <span class="hl kwa">begin</span>
            <span class="hl kwa">return</span> Table.Get_First<span class="hl sym">;</span>
         <span class="hl kwa">end</span> Get_First<span class="hl sym">;</span>

         <span class="hl slc">---------------------------------------------------------------------</span>
         <span class="hl slc">--</span>
         <span class="hl slc">--  Get key for element</span>
         <span class="hl slc">--</span>
         <span class="hl kwa">function</span> Get_Key <span class="hl sym">(</span>E <span class="hl sym">:</span> Element_Access<span class="hl sym">)</span> <span class="hl kwa">return</span> Fragment <span class="hl kwa">is</span>
         <span class="hl kwa">begin</span>
            <span class="hl kwa">return</span> E.<span class="hl kwa">all</span>.Key<span class="hl sym">;</span>
         <span class="hl kwa">end</span> Get_Key<span class="hl sym">;</span>

         <span class="hl slc">---------------------------------------------------------------------</span>
         <span class="hl slc">--</span>
         <span class="hl slc">--  Continue itereation over the hash table</span>
         <span class="hl slc">--</span>
         <span class="hl kwa">function</span> Get_Next <span class="hl kwa">return</span> Element_Access <span class="hl kwa">is</span>
         <span class="hl kwa">begin</span>
            <span class="hl kwa">return</span> Table.Get_Next<span class="hl sym">;</span>
         <span class="hl kwa">end</span> Get_Next<span class="hl sym">;</span>

         <span class="hl slc">---------------------------------------------------------------------</span>
         <span class="hl slc">--</span>
         <span class="hl slc">--  Get total count over all elements - as well as the count of elements</span>
         <span class="hl slc">--</span>
         <span class="hl kwa">procedure</span> Get_Total <span class="hl sym">(</span>Total <span class="hl sym">:</span> <span class="hl kwa">out</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span> Count <span class="hl sym">:</span> <span class="hl kwa">out</span> <span class="hl kwb">Natural</span><span class="hl sym">)</span> <span class="hl kwa">is</span>
            The_Element <span class="hl sym">:</span> Element_Access <span class="hl sym">:=</span> Table.Get_First<span class="hl sym">;</span>
         <span class="hl kwa">begin</span>
            Total <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            Count <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl kwa">while</span> The_Element <span class="hl sym">/=</span> <span class="hl kwa">null loop</span>
               Total       <span class="hl sym">:=</span> Total <span class="hl sym">+</span> The_Element.<span class="hl kwa">all</span>.Count<span class="hl sym">;</span>
               Count       <span class="hl sym">:=</span> Count <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
               The_Element <span class="hl sym">:=</span> Table.Get_Next<span class="hl sym">;</span>
            <span class="hl kwa">end loop</span><span class="hl sym">;</span>
         <span class="hl kwa">end</span> Get_Total<span class="hl sym">;</span>

         <span class="hl kwa">function</span> Hash <span class="hl sym">(</span>Key <span class="hl sym">:</span> Fragment<span class="hl sym">)</span> <span class="hl kwa">return</span> Hash_Type <span class="hl kwa">is</span>
         <span class="hl kwa">begin</span>
            <span class="hl kwa">return</span> Hash_Function <span class="hl sym">(</span>Fragments.To_String <span class="hl sym">(</span>Key<span class="hl sym">));</span>
         <span class="hl kwa">end</span> Hash<span class="hl sym">;</span>

         <span class="hl slc">---------------------------------------------------------------------</span>
         <span class="hl slc">--</span>
         <span class="hl slc">--  Get key for element</span>
         <span class="hl slc">--</span>
         <span class="hl kwa">function</span> Key <span class="hl sym">(</span>Element <span class="hl sym">:</span> <span class="hl kwa">in</span> Element_Access<span class="hl sym">)</span> <span class="hl kwa">return</span> Fragment <span class="hl kwa">is</span>
         <span class="hl kwa">begin</span>
            <span class="hl kwa">return</span> Element.<span class="hl kwa">all</span>.Key<span class="hl sym">;</span>
         <span class="hl kwa">end</span> Key<span class="hl sym">;</span>

         <span class="hl kwa">function</span> Next <span class="hl sym">(</span>E <span class="hl sym">:</span> Element_Access<span class="hl sym">)</span> <span class="hl kwa">return</span> Element_Access <span class="hl kwa">is</span>
         <span class="hl kwa">begin</span>
            <span class="hl kwa">return</span> E.<span class="hl kwa">all</span>.Next<span class="hl sym">;</span>
         <span class="hl kwa">end</span> Next<span class="hl sym">;</span>

         <span class="hl kwa">procedure</span> Set_Next <span class="hl sym">(</span>E <span class="hl sym">:</span> Element_Access<span class="hl sym">;</span> Next <span class="hl sym">:</span> Element_Access<span class="hl sym">)</span> <span class="hl kwa">is</span>
         <span class="hl kwa">begin</span>
            E.<span class="hl kwa">all</span>.Next <span class="hl sym">:=</span> Next<span class="hl sym">;</span>
         <span class="hl kwa">end</span> Set_Next<span class="hl sym">;</span>
      <span class="hl kwa">end</span> Calculator<span class="hl sym">;</span>

   <span class="hl kwa">begin</span>
      Calculator.Calculate_Frequencies <span class="hl sym">(</span>Nucleotide_Length<span class="hl sym">);</span>

      <span class="hl kwa">if</span> Nucleotide_Fragment <span class="hl sym">=</span> Fragments.Null_Bounded_String <span class="hl kwa">then</span>
         Calculate_Total <span class="hl sym">:</span> <span class="hl kwa">declare</span>
            Count <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span>
            Total <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span>
         <span class="hl kwa">begin</span>
            Calculator.Get_Total <span class="hl sym">(</span>Total <span class="hl sym">=&gt;</span> Total<span class="hl sym">,</span> Count <span class="hl sym">=&gt;</span> Count<span class="hl sym">);</span>

            Get_Sort_Put <span class="hl sym">:</span> <span class="hl kwa">declare</span>
               Data <span class="hl sym">:</span> <span class="hl kwa">array</span> <span class="hl sym">(</span><span class="hl num">0</span> .. Count<span class="hl sym">)</span> <span class="hl kwa">of</span> Calculator.Element_Access<span class="hl sym">;</span>

               <span class="hl kwa">procedure</span> Move <span class="hl sym">(</span>From <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span> To <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">);</span>
               <span class="hl kwa">function</span> Less_Then <span class="hl sym">(</span>Op1<span class="hl sym">,</span> Op2 <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">)</span> <span class="hl kwa">return</span> <span class="hl kwb">Boolean</span><span class="hl sym">;</span>

               <span class="hl kwa">pragma</span> Inline <span class="hl sym">(</span>Move<span class="hl sym">);</span>
               <span class="hl kwa">pragma</span> Inline <span class="hl sym">(</span>Less_Then<span class="hl sym">);</span>

               <span class="hl kwa">package</span> Heap_Sort <span class="hl kwa">is new</span> GNAT.Heap_Sort_G <span class="hl sym">(</span>Move <span class="hl sym">=&gt;</span> Move<span class="hl sym">,</span> Lt <span class="hl sym">=&gt;</span> Less_Then<span class="hl sym">);</span>

               <span class="hl kwa">function</span> Less_Then <span class="hl sym">(</span>Op1<span class="hl sym">,</span> Op2 <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">)</span> <span class="hl kwa">return</span> <span class="hl kwb">Boolean</span> <span class="hl kwa">is</span>
               <span class="hl kwa">begin</span>
                  <span class="hl kwa">return</span> Calculator.Count <span class="hl sym">(</span>Data <span class="hl sym">(</span>Op1<span class="hl sym">)) &gt;</span> Calculator.Count <span class="hl sym">(</span>Data <span class="hl sym">(</span>Op2<span class="hl sym">));</span>
               <span class="hl kwa">end</span> Less_Then<span class="hl sym">;</span>

               <span class="hl kwa">procedure</span> Move <span class="hl sym">(</span>From <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span> To <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">)</span> <span class="hl kwa">is</span>
               <span class="hl kwa">begin</span>
                  Data <span class="hl sym">(</span>To<span class="hl sym">) :=</span> Data <span class="hl sym">(</span>From<span class="hl sym">);</span>
               <span class="hl kwa">end</span> Move<span class="hl sym">;</span>
            <span class="hl kwa">begin</span>
               Data <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">) :=</span> <span class="hl kwa">null</span><span class="hl sym">;</span>
               Data <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">) :=</span> Calculator.Get_First<span class="hl sym">;</span>

               <span class="hl kwa">for</span> I <span class="hl kwa">in</span>  <span class="hl num">2</span> .. Data<span class="hl sym">'</span>Last <span class="hl kwa">loop</span>
                  Data <span class="hl sym">(</span>I<span class="hl sym">) :=</span> Calculator.Get_Next<span class="hl sym">;</span>
               <span class="hl kwa">end loop</span><span class="hl sym">;</span>

               Heap_Sort.Sort <span class="hl sym">(</span>Data<span class="hl sym">'</span>Last<span class="hl sym">);</span>

               <span class="hl kwa">for</span> I <span class="hl kwa">in</span>  <span class="hl num">1</span> .. Data<span class="hl sym">'</span>Last <span class="hl kwa">loop</span>
                  Ada.Text_IO.Put <span class="hl sym">(</span>Fragments.To_String <span class="hl sym">(</span>Calculator.Key <span class="hl sym">(</span>Data <span class="hl sym">(</span>I<span class="hl sym">))));</span>
                  Ada.Text_IO.Put <span class="hl sym">(</span>Ada.Characters.Latin_1.Space<span class="hl sym">);</span>
                  Ada.Float_Text_IO.Put
                    <span class="hl sym">(</span>Item <span class="hl sym">=&gt;</span> <span class="hl num">100.0</span> <span class="hl sym">*</span> <span class="hl kwb">Float</span> <span class="hl sym">(</span>Calculator.Count <span class="hl sym">(</span>Data <span class="hl sym">(</span>I<span class="hl sym">))) /</span> <span class="hl kwb">Float</span> <span class="hl sym">(</span>Total<span class="hl sym">),</span>
                     Fore <span class="hl sym">=&gt;</span> <span class="hl num">1</span><span class="hl sym">,</span>
                     Aft  <span class="hl sym">=&gt;</span> <span class="hl num">3</span><span class="hl sym">,</span>
                     Exp  <span class="hl sym">=&gt;</span> <span class="hl num">0</span><span class="hl sym">);</span>
                  Ada.Text_IO.New_Line<span class="hl sym">;</span>
               <span class="hl kwa">end loop</span><span class="hl sym">;</span>
               Ada.Text_IO.New_Line<span class="hl sym">;</span>
            <span class="hl kwa">end</span> Get_Sort_Put<span class="hl sym">;</span>
         <span class="hl kwa">end</span> Calculate_Total<span class="hl sym">;</span>
      <span class="hl kwa">else</span>
         Ada.Integer_Text_IO.Put <span class="hl sym">(</span>Item <span class="hl sym">=&gt;</span> Calculator.Get <span class="hl sym">(</span>Nucleotide_Fragment<span class="hl sym">),</span> Width <span class="hl sym">=&gt;</span> <span class="hl num">1</span><span class="hl sym">);</span>
         Ada.Text_IO.Put <span class="hl sym">(</span>Ada.Characters.Latin_1.HT<span class="hl sym">);</span>
         Ada.Text_IO.Put_Line <span class="hl sym">(</span>Fragments.To_String <span class="hl sym">(</span>Nucleotide_Fragment<span class="hl sym">));</span>
      <span class="hl kwa">end if</span><span class="hl sym">;</span>
      <span class="hl kwa">return</span><span class="hl sym">;</span>
   <span class="hl kwa">end</span> Write<span class="hl sym">;</span>

<span class="hl kwa">begin</span>
   Write <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">);</span>
   Write <span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">);</span>
   Write <span class="hl sym">(</span>Fragments.Length <span class="hl sym">(</span>Fragment_3<span class="hl sym">),</span> Fragment_3<span class="hl sym">);</span>
   Write <span class="hl sym">(</span>Fragments.Length <span class="hl sym">(</span>Fragment_4<span class="hl sym">),</span> Fragment_4<span class="hl sym">);</span>
   Write <span class="hl sym">(</span>Fragments.Length <span class="hl sym">(</span>Fragment_6<span class="hl sym">),</span> Fragment_6<span class="hl sym">);</span>
   Write <span class="hl sym">(</span>Fragments.Length <span class="hl sym">(</span>Fragment_12<span class="hl sym">),</span> Fragment_12<span class="hl sym">);</span>
   Write <span class="hl sym">(</span>Fragments.Length <span class="hl sym">(</span>Fragment_18<span class="hl sym">),</span> Fragment_18<span class="hl sym">);</span>
   <span class="hl kwa">return</span><span class="hl sym">;</span>
<span class="hl kwa">end</span> KNucleotide<span class="hl sym">;</span>

<span class="hl slc">-------------------------------------------------------------------------------</span>
<span class="hl slc">--   vim: textwidth=0 nowrap tabstop=8 shiftwidth=3 softtabstop=3 expandtab vim: filetype=ada</span>
<span class="hl slc">--   encoding=latin1 fileformat=unix</span>
