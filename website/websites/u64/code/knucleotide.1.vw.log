
Sat, 23 Jan 2010 02:38:42 GMT

COMMAND LINE:
/usr/local/src/vw7.7nc/bin/linuxx86_64/vwlinuxx86_64 /usr/local/src/vw7.7nc/image/benchmarks.im -nogui -evaluate "Tests knucleotide" -a 0 < knucleotide-input25000000.txt

UNEXPECTED OUTPUT 

27,2352c27
< Unhandled exception: No space available to allocate this object
< 
< ----------------------------------------------------------------------
< Dictionary class(Behavior)>>newNoRetry:
< Receiver:
< 	a Dictionary class
< Instance Variables:
< 	superclass = Set
< 	methodDict = a MethodDictionary[72]
< 	format = 20481
< 	subclasses = an Array[4]
< 	instanceVariables = nil
< 	organization = ('accessing' #associationAt: #associationAt:ifAbsent: #associations #at: #at:ifAbsent: #at:ifAbsentPut: #at:ifPresent: #at:put: #bindingFor: #bindingFor:modifiers: #createKey:value: #findElementLike:ifAbsent: #keyAtValue: #keyAtValue:ifAbsent: #keys #localBindingFor: #localBindingNames #localBindings #oldBindingFor: #poolDefinitionClass #protectedBindingFor:modifiers: #values)
< ('testing' #includes: #isLikeNameSpace #occurrencesOf:)
< ('adding' #add: #addAll: #declare:from: #glorpAddAll:)
< ('removing' #remove: #remove:ifAbsent:)
< ('enumerating' #collect: #do: #groupedBy: #keysAndValuesDo: #select:)
< ('printing' #printOn: #storeOn:)
< ('dictionary testing' #contentsEquals: #includesKey:)
< ('dictionary removing' #removeKey: #removeKey:ifAbsent:)
< ('dictionary enumerating' #associationsDo: #bindingsDo: #keysDo: #localNamesAndBindingsDo: #namesAndBindingsDo: #namesAndBindingsDo:modifiers: #protectedNamesAndBindingsDo:modifiers:)
< ('user interface' #inspectorClass #inspectorClasses)
< ('tracing' #traceWalkFrom:)
< ('binary storage' #readGeneralStructureOn: #representBinaryOn: #storeGeneralStructureOn:)
< ('copying' #copyWithCopiedValues #postCopy #postCopyWithCopiedValues)
< ('private' #_addAllToDictionary: #changeCapacityTo: #findKey:ifAbsent: #findKey:ifAbsentRaise: #findKeyOrNil: #fixCollisionsFrom: #keyNotFoundErrorFor:index: #noCheckAdd: #removeKeyPrivately: #valueNotFoundError:)
< ('private-backward compatibility' #keyNotFoundError:)
< ('comparing' #= #hash)
< ('computer language shootout' #at:putValueOf:ifAbsentPutValueOf:)
< 
< 	name = #Dictionary
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[236]
< Arguments:
< 	anInteger = 187904819
< Context PC = 15
< 
< ----------------------------------------------------------------------
< Dictionary class(Behavior)>>handleFailedNew:size:
< Receiver:
< 	a Dictionary class
< Instance Variables:
< 	superclass = Set
< 	methodDict = a MethodDictionary[72]
< 	format = 20481
< 	subclasses = an Array[4]
< 	instanceVariables = nil
< 	organization = ('accessing' #associationAt: #associationAt:ifAbsent: #associations #at: #at:ifAbsent: #at:ifAbsentPut: #at:ifPresent: #at:put: #bindingFor: #bindingFor:modifiers: #createKey:value: #findElementLike:ifAbsent: #keyAtValue: #keyAtValue:ifAbsent: #keys #localBindingFor: #localBindingNames #localBindings #oldBindingFor: #poolDefinitionClass #protectedBindingFor:modifiers: #values)
< ('testing' #includes: #isLikeNameSpace #occurrencesOf:)
< ('adding' #add: #addAll: #declare:from: #glorpAddAll:)
< ('removing' #remove: #remove:ifAbsent:)
< ('enumerating' #collect: #do: #groupedBy: #keysAndValuesDo: #select:)
< ('printing' #printOn: #storeOn:)
< ('dictionary testing' #contentsEquals: #includesKey:)
< ('dictionary removing' #removeKey: #removeKey:ifAbsent:)
< ('dictionary enumerating' #associationsDo: #bindingsDo: #keysDo: #localNamesAndBindingsDo: #namesAndBindingsDo: #namesAndBindingsDo:modifiers: #protectedNamesAndBindingsDo:modifiers:)
< ('user interface' #inspectorClass #inspectorClasses)
< ('tracing' #traceWalkFrom:)
< ('binary storage' #readGeneralStructureOn: #representBinaryOn: #storeGeneralStructureOn:)
< ('copying' #copyWithCopiedValues #postCopy #postCopyWithCopiedValues)
< ('private' #_addAllToDictionary: #changeCapacityTo: #findKey:ifAbsent: #findKey:ifAbsentRaise: #findKeyOrNil: #fixCollisionsFrom: #keyNotFoundErrorFor:index: #noCheckAdd: #removeKeyPrivately: #valueNotFoundError:)
< ('private-backward compatibility' #keyNotFoundError:)
< ('comparing' #= #hash)
< ('computer language shootout' #at:putValueOf:ifAbsentPutValueOf:)
< 
< 	name = #Dictionary
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[236]
< Arguments:
< 	error = a SystemError(#'allocation failed',1503238560)
< 	newSize = 187904819
< Context PC = 29
< 
< ----------------------------------------------------------------------
< Dictionary class(Behavior)>>new:
< Receiver:
< 	a Dictionary class
< Instance Variables:
< 	superclass = Set
< 	methodDict = a MethodDictionary[72]
< 	format = 20481
< 	subclasses = an Array[4]
< 	instanceVariables = nil
< 	organization = ('accessing' #associationAt: #associationAt:ifAbsent: #associations #at: #at:ifAbsent: #at:ifAbsentPut: #at:ifPresent: #at:put: #bindingFor: #bindingFor:modifiers: #createKey:value: #findElementLike:ifAbsent: #keyAtValue: #keyAtValue:ifAbsent: #keys #localBindingFor: #localBindingNames #localBindings #oldBindingFor: #poolDefinitionClass #protectedBindingFor:modifiers: #values)
< ('testing' #includes: #isLikeNameSpace #occurrencesOf:)
< ('adding' #add: #addAll: #declare:from: #glorpAddAll:)
< ('removing' #remove: #remove:ifAbsent:)
< ('enumerating' #collect: #do: #groupedBy: #keysAndValuesDo: #select:)
< ('printing' #printOn: #storeOn:)
< ('dictionary testing' #contentsEquals: #includesKey:)
< ('dictionary removing' #removeKey: #removeKey:ifAbsent:)
< ('dictionary enumerating' #associationsDo: #bindingsDo: #keysDo: #localNamesAndBindingsDo: #namesAndBindingsDo: #namesAndBindingsDo:modifiers: #protectedNamesAndBindingsDo:modifiers:)
< ('user interface' #inspectorClass #inspectorClasses)
< ('tracing' #traceWalkFrom:)
< ('binary storage' #readGeneralStructureOn: #representBinaryOn: #storeGeneralStructureOn:)
< ('copying' #copyWithCopiedValues #postCopy #postCopyWithCopiedValues)
< ('private' #_addAllToDictionary: #changeCapacityTo: #findKey:ifAbsent: #findKey:ifAbsentRaise: #findKeyOrNil: #fixCollisionsFrom: #keyNotFoundErrorFor:index: #noCheckAdd: #removeKeyPrivately: #valueNotFoundError:)
< ('private-backward compatibility' #keyNotFoundError:)
< ('comparing' #= #hash)
< ('computer language shootout' #at:putValueOf:ifAbsentPutValueOf:)
< 
< 	name = #Dictionary
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[236]
< Arguments:
< 	anInteger = 187904819
< Temporaries:
< 	error = a SystemError(#'allocation failed',1503238560)
< Context PC = 11
< 
< ----------------------------------------------------------------------
< Dictionary class(Set class)>>new:
< Receiver:
< 	a Dictionary class
< Instance Variables:
< 	superclass = Set
< 	methodDict = a MethodDictionary[72]
< 	format = 20481
< 	subclasses = an Array[4]
< 	instanceVariables = nil
< 	organization = ('accessing' #associationAt: #associationAt:ifAbsent: #associations #at: #at:ifAbsent: #at:ifAbsentPut: #at:ifPresent: #at:put: #bindingFor: #bindingFor:modifiers: #createKey:value: #findElementLike:ifAbsent: #keyAtValue: #keyAtValue:ifAbsent: #keys #localBindingFor: #localBindingNames #localBindings #oldBindingFor: #poolDefinitionClass #protectedBindingFor:modifiers: #values)
< ('testing' #includes: #isLikeNameSpace #occurrencesOf:)
< ('adding' #add: #addAll: #declare:from: #glorpAddAll:)
< ('removing' #remove: #remove:ifAbsent:)
< ('enumerating' #collect: #do: #groupedBy: #keysAndValuesDo: #select:)
< ('printing' #printOn: #storeOn:)
< ('dictionary testing' #contentsEquals: #includesKey:)
< ('dictionary removing' #removeKey: #removeKey:ifAbsent:)
< ('dictionary enumerating' #associationsDo: #bindingsDo: #keysDo: #localNamesAndBindingsDo: #namesAndBindingsDo: #namesAndBindingsDo:modifiers: #protectedNamesAndBindingsDo:modifiers:)
< ('user interface' #inspectorClass #inspectorClasses)
< ('tracing' #traceWalkFrom:)
< ('binary storage' #readGeneralStructureOn: #representBinaryOn: #storeGeneralStructureOn:)
< ('copying' #copyWithCopiedValues #postCopy #postCopyWithCopiedValues)
< ('private' #_addAllToDictionary: #changeCapacityTo: #findKey:ifAbsent: #findKey:ifAbsentRaise: #findKeyOrNil: #fixCollisionsFrom: #keyNotFoundErrorFor:index: #noCheckAdd: #removeKeyPrivately: #valueNotFoundError:)
< ('private-backward compatibility' #keyNotFoundError:)
< ('comparing' #= #hash)
< ('computer language shootout' #at:putValueOf:ifAbsentPutValueOf:)
< 
< 	name = #Dictionary
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[236]
< Arguments:
< 	anInteger = 187500000
< Context PC = 21
< 
< ----------------------------------------------------------------------
< optimized [] in Tests class>>knucleotide3bFrom:to:
< Receiver:
< 	an UndefinedObject
< Arguments:
< 	nucleotideFragment = 'GGTATTTTAATTTATAGT'
< Temporaries:
< 	frequencies = nil
< 	count = nil
< 	.sequence = 'CCCATAACTACAATAGTCGGCAATCTTTT...CTTGTTTGATTCCCCTGTATCTTAATTC'
< 	.output = a StandardIOStream
< Context PC = 23
< 
< ----------------------------------------------------------------------
< Tests class>>knucleotide3bFrom:to:
< Receiver:
< 	a Tests class
< Instance Variables:
< 	superclass = Object
< 	methodDict = a MethodDictionary[0]
< 	format = 16384
< 	subclasses = nil
< 	instanceVariables = nil
< 	organization = 
< 	name = #Tests
< 	classPool = a NameSpaceOfClass[0]
< 	environment = nil
< Arguments:
< 	input = an ExternalReadStream
< 	output = a StandardIOStream
< Temporaries:
< 	sequence = 'CCCATAACTACAATAGTCGGCAATCTTTT...CTTGTTTGATTCCCCTGTATCTTAATTC'
< 	writeFrequencies = BlockClosure [] in Tests class>>knucleotide3bFrom:to:
< 	writeCount = BlockClosure [] in Tests class>>knucleotide3bFrom:to:
< Context PC = 52
< 
< ----------------------------------------------------------------------
< Tests class>>knucleotide
< Receiver:
< 	a Tests class
< Instance Variables:
< 	superclass = Object
< 	methodDict = a MethodDictionary[0]
< 	format = 16384
< 	subclasses = nil
< 	instanceVariables = nil
< 	organization = 
< 	name = #Tests
< 	classPool = a NameSpaceOfClass[0]
< 	environment = nil
< Context PC = 10
< 
< ----------------------------------------------------------------------
< UndefinedObject>>unboundMethod
< Receiver:
< 	an UndefinedObject
< Context PC = 3
< 
< ----------------------------------------------------------------------
< UndefinedObject(Object)>>performMethod:arguments:
< Receiver:
< 	an UndefinedObject
< Arguments:
< 	method = AnnotatedMethod UndefinedObject>>unboundMethod
< 	args = an Array[0]
< Context PC = 5
< 
< ----------------------------------------------------------------------
< UndefinedObject(Object)>>performMethod:
< Receiver:
< 	an UndefinedObject
< Arguments:
< 	method = AnnotatedMethod UndefinedObject>>unboundMethod
< Context PC = 5
< 
< ----------------------------------------------------------------------
< Compiler(SmalltalkCompiler)>>evaluate:in:allowReceiver:receiver:environment:notifying:ifFail:
< Receiver:
< 	a Compiler
< Instance Variables:
< 	sourceStream = a ReadStream
< 	requestor = nil
< 	class = UndefinedObject
< 	targetClass = UndefinedObject
< 	environment = a NameSpace[225]
< 	context = nil
< 	methodClass = CompiledMethod
< 	allowSelfReferences = true
< 	allowClassVariableReferences = nil
< Arguments:
< 	textOrStream = 'Tests knucleotide'
< 	aContext = nil
< 	allowSelf = true
< 	receiver = nil
< 	env = a NameSpace[225]
< 	aRequestor = nil
< 	failBlock = BlockClosure [] in SmalltalkCompiler class>>evaluate:for:in:notifying:logged:
< Temporaries:
< 	method = AnnotatedMethod UndefinedObject>>unboundMethod
< Context PC = 22
< 
< ----------------------------------------------------------------------
< Compiler class(SmalltalkCompiler class)>>evaluate:for:in:notifying:logged:
< Receiver:
< 	a Compiler class
< Instance Variables:
< 	superclass = SmalltalkCompiler
< 	methodDict = a MethodDictionary[4]
< 	format = 16393
< 	subclasses = an Array[2]
< 	instanceVariables = nil
< 	organization = ('private' #compile:in: #newCodeStream #newMethodHolder #translate:noPattern:ifFail:needSourceMap:handler:)
< 
< 	name = #Compiler
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[257]
< Arguments:
< 	textOrString = 'Tests knucleotide'
< 	anObject = nil
< 	aNameSpace = a NameSpace[225]
< 	aController = nil
< 	logFlag = false
< Temporaries:
< 	val = nil
< Context PC = 14
< 
< ----------------------------------------------------------------------
< Compiler class(SmalltalkCompiler class)>>evaluate:notifying:logged:
< Receiver:
< 	a Compiler class
< Instance Variables:
< 	superclass = SmalltalkCompiler
< 	methodDict = a MethodDictionary[4]
< 	format = 16393
< 	subclasses = an Array[2]
< 	instanceVariables = nil
< 	organization = ('private' #compile:in: #newCodeStream #newMethodHolder #translate:noPattern:ifFail:needSourceMap:handler:)
< 
< 	name = #Compiler
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[257]
< Arguments:
< 	textOrString = 'Tests knucleotide'
< 	aController = nil
< 	logFlag = false
< Context PC = 9
< 
< ----------------------------------------------------------------------
< Compiler class(SmalltalkCompiler class)>>evaluate:logged:
< Receiver:
< 	a Compiler class
< Instance Variables:
< 	superclass = SmalltalkCompiler
< 	methodDict = a MethodDictionary[4]
< 	format = 16393
< 	subclasses = an Array[2]
< 	instanceVariables = nil
< 	organization = ('private' #compile:in: #newCodeStream #newMethodHolder #translate:noPattern:ifFail:needSourceMap:handler:)
< 
< 	name = #Compiler
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[257]
< Arguments:
< 	textOrString = 'Tests knucleotide'
< 	logFlag = false
< Context PC = 7
< 
< ----------------------------------------------------------------------
< Compiler class(SmalltalkCompiler class)>>evaluate:
< Receiver:
< 	a Compiler class
< Instance Variables:
< 	superclass = SmalltalkCompiler
< 	methodDict = a MethodDictionary[4]
< 	format = 16393
< 	subclasses = an Array[2]
< 	instanceVariables = nil
< 	organization = ('private' #compile:in: #newCodeStream #newMethodHolder #translate:noPattern:ifFail:needSourceMap:handler:)
< 
< 	name = #Compiler
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[257]
< Arguments:
< 	textOrString = 'Tests knucleotide'
< Context PC = 6
< 
< ----------------------------------------------------------------------
< optimized [] in [] in ImageConfigurationSystem>>runCodeAndThenQuit:
< Receiver:
< 	an UndefinedObject
< Arguments:
< 	each = 'Tests knucleotide'
< Temporaries:
< 	expressions = an OrderedCollection[1]
< 	result = nil
< 	.self = an ImageConfigurationSystem
< Context PC = 6
< 
< ----------------------------------------------------------------------
< OrderedCollection>>do:
< Receiver:
< 	an OrderedCollection
< Instance Variables:
< 	firstIndex = 1
< 	lastIndex = 1
< Arguments:
< 	aBlock = BlockClosure [] in [] in ImageConfigurationSystem>>runCodeAndThenQuit:
< Temporaries:
< 	index = 1
< Context PC = 17
< 
< ----------------------------------------------------------------------
< optimized [] in ImageConfigurationSystem>>runCodeAndThenQuit:
< Receiver:
< 	an UndefinedObject
< Temporaries:
< 	.argumentStream = a ReadStream
< 	expressions = an OrderedCollection[1]
< 	result = nil
< 	.self = an ImageConfigurationSystem
< Context PC = 17
< 
< ----------------------------------------------------------------------
< BlockClosure>>ensure:
< Receiver:
< 	a BlockClosure
< Instance Variables:
< 	method = CompiledBlock [] in ImageConfigurationSystem>>runCodeAndThenQuit:
< 	outerContext = nil
< 	copiedValues = an Array[3]
< Arguments:
< 	aBlock = BlockClosure [] in ImageConfigurationSystem>>runCodeAndThenQuit:
< Temporaries:
< 	result = nil
< Context PC = 4
< 
< ----------------------------------------------------------------------
< ImageConfigurationSystem>>runCodeAndThenQuit:
< Receiver:
< 	an ImageConfigurationSystem
< Instance Variables:
< 	state = #inactive
< 	canActivate = true
< 	prerequisites = a Set[2]
< Arguments:
< 	argumentStream = a ReadStream
< Temporaries:
< 	expressions = an OrderedCollection[1]
< 	result = nil
< Context PC = 20
< 
< ----------------------------------------------------------------------
< CommandLineInterest>>triggerWithTokenStream:
< Receiver:
< 	a CommandLineInterest
< Instance Variables:
< 	receiver = an ImageConfigurationSystem
< 	selector = #runCodeAndThenQuit:
< 	systemEvent = #activate
< 	sequence = 1
< 	option = '-evaluate'
< 	commandLine = an Array[7]
< Arguments:
< 	aStream = a ReadStream
< Context PC = 24
< 
< ----------------------------------------------------------------------
< CommandLineInterest>>triggerOptionAt:
< Receiver:
< 	a CommandLineInterest
< Instance Variables:
< 	receiver = an ImageConfigurationSystem
< 	selector = #runCodeAndThenQuit:
< 	systemEvent = #activate
< 	sequence = 1
< 	option = '-evaluate'
< 	commandLine = an Array[7]
< Arguments:
< 	index = 4
< Temporaries:
< 	tokenStream = a ReadStream
< Context PC = 14
< 
< ----------------------------------------------------------------------
< optimized [] in [] in Subsystem>>runActivationActions
< Receiver:
< 	an UndefinedObject
< Arguments:
< 	association = 4 -> a CommandLineInterest(on: #activate at: 1 send: 'an ImageConfigurationSystem runCodeAndThenQuit:')(on: #activate at: 1 for: '-evaluate' send: 'an ImageConfigurationSystem runCodeAndThenQuit:')
< Context PC = 7
< 
< ----------------------------------------------------------------------
< SortedCollection(OrderedCollection)>>do:
< Receiver:
< 	a SortedCollection
< Instance Variables:
< 	firstIndex = 1
< 	lastIndex = 1
< 	sortBlock = BlockClosure [] in [] in Subsystem>>runActivationActions
< Arguments:
< 	aBlock = BlockClosure [] in [] in Subsystem>>runActivationActions
< Temporaries:
< 	index = 1
< Context PC = 17
< 
< ----------------------------------------------------------------------
< optimized [] in Subsystem>>runActivationActions
< Receiver:
< 	an UndefinedObject
< Arguments:
< 	sequence = 1
< Temporaries:
< 	interests = an OrderedCollection[1]
< 	.optionsBySequence = a Dictionary[1]
< Context PC = 13
< 
< ----------------------------------------------------------------------
< SortedCollection(OrderedCollection)>>do:
< Receiver:
< 	a SortedCollection
< Instance Variables:
< 	firstIndex = 1
< 	lastIndex = 1
< 	sortBlock = BlockClosure [] in SortedCollection class>>initialize
< Arguments:
< 	aBlock = BlockClosure [] in Subsystem>>runActivationActions
< Temporaries:
< 	index = 1
< Context PC = 17
< 
< ----------------------------------------------------------------------
< ImageConfigurationSystem(Subsystem)>>runActivationActions
< Receiver:
< 	an ImageConfigurationSystem
< Instance Variables:
< 	state = #inactive
< 	canActivate = true
< 	prerequisites = a Set[2]
< Temporaries:
< 	optionsBySequence = a Dictionary[1]
< 	sequenceValues = a SortedCollection[1]
< Context PC = 18
< 
< ----------------------------------------------------------------------
< ImageConfigurationSystem>>runActivationActions
< Receiver:
< 	an ImageConfigurationSystem
< Instance Variables:
< 	state = #inactive
< 	canActivate = true
< 	prerequisites = a Set[2]
< Context PC = 17
< 
< ----------------------------------------------------------------------
< ImageConfigurationSystem(Subsystem)>>privateActivate
< Receiver:
< 	an ImageConfigurationSystem
< Instance Variables:
< 	state = #inactive
< 	canActivate = true
< 	prerequisites = a Set[2]
< Context PC = 21
< 
< ----------------------------------------------------------------------
< ImageConfigurationSystem class(Subsystem class)>>activate
< Receiver:
< 	an ImageConfigurationSystem class
< Instance Variables:
< 	superclass = Subsystem
< 	methodDict = a MethodDictionary[16]
< 	format = 16387
< 	subclasses = nil
< 	instanceVariables = nil
< 	organization = ('command line handling' #loadCodeFromFilein: #loadParcel: #loadParcelsFromConfigurationFile: #loadSettings: #runCode: #runCodeAndThenQuit:)
< ('private' #stdout)
< ('actions' #defaultConfigFileName)
< ('prerequisites' #prerequisiteSystems)
< ('helpers' #getOptionsFrom: #loadFromConfigFileNamed: #loadFromConfigStream: #loadSettingsFrom: #processOptions: #tokensFromStream:)
< ('private-activate/deactivate' #runActivationActions)
< 
< 	name = #ImageConfigurationSystem
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[236]
< 	current = an ImageConfigurationSystem
< 	allowParcelLoading = true
< 	allowFilein = true
< 	allowSettings = true
< 	allowExpressions = true
< 	useDefaultConfigFile = true
< 	allowDevelopment = nil
< Context PC = 5
< 
< ----------------------------------------------------------------------
< optimized [] in Subsystem>>ensurePrerequisitesAreActive
< Receiver:
< 	an UndefinedObject
< Arguments:
< 	each = ImageConfigurationSystem
< Context PC = 3
< 
< ----------------------------------------------------------------------
< Set>>do:
< Receiver:
< 	a Set
< Instance Variables:
< 	tally = 1
< Arguments:
< 	aBlock = BlockClosure [] in Subsystem>>ensurePrerequisitesAreActive
< Temporaries:
< 	index = 2
< 	elem = ImageConfigurationSystem
< Context PC = 31
< 
< ----------------------------------------------------------------------
< RuntimeSystem(Subsystem)>>ensurePrerequisitesAreActive
< Receiver:
< 	a RuntimeSystem
< Instance Variables:
< 	state = #inactive
< 	canActivate = true
< 	prerequisites = a Set[1]
< Context PC = 7
< 
< ----------------------------------------------------------------------
< RuntimeSystem(Subsystem)>>privateActivate
< Receiver:
< 	a RuntimeSystem
< Instance Variables:
< 	state = #inactive
< 	canActivate = true
< 	prerequisites = a Set[1]
< Context PC = 15
< 
< ----------------------------------------------------------------------
< RuntimeSystem class(Subsystem class)>>activate
< Receiver:
< 	a RuntimeSystem class
< Instance Variables:
< 	superclass = Subsystem
< 	methodDict = a MethodDictionary[3]
< 	format = 16387
< 	subclasses = nil
< 	instanceVariables = nil
< 	organization = ('accessing' #isDevelopment #isRuntime)
< ('prerequisites' #prerequisiteSystems)
< 
< 	name = #RuntimeSystem
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[236]
< 	current = a RuntimeSystem
< Context PC = 5
< 
< ----------------------------------------------------------------------
< optimized [] in Subsystem>>ensurePrerequisitesAreActive
< Receiver:
< 	an UndefinedObject
< Arguments:
< 	each = RuntimeSystem
< Context PC = 3
< 
< ----------------------------------------------------------------------
< Set>>do:
< Receiver:
< 	a Set
< Instance Variables:
< 	tally = 1
< Arguments:
< 	aBlock = BlockClosure [] in Subsystem>>ensurePrerequisitesAreActive
< Temporaries:
< 	index = 3
< 	elem = RuntimeSystem
< Context PC = 31
< 
< ----------------------------------------------------------------------
< UserApplication(Subsystem)>>ensurePrerequisitesAreActive
< Receiver:
< 	an UserApplication
< Instance Variables:
< 	state = #inactive
< 	canActivate = true
< 	prerequisites = a Set[1]
< Context PC = 7
< 
< ----------------------------------------------------------------------
< UserApplication(Subsystem)>>privateActivate
< Receiver:
< 	an UserApplication
< Instance Variables:
< 	state = #inactive
< 	canActivate = true
< 	prerequisites = a Set[1]
< Context PC = 15
< 
< ----------------------------------------------------------------------
< UserApplication class(Subsystem class)>>activate
< Receiver:
< 	an UserApplication class
< Instance Variables:
< 	superclass = Subsystem
< 	methodDict = a MethodDictionary[3]
< 	format = 16387
< 	subclasses = nil
< 	instanceVariables = nil
< 	organization = ('prerequisites' #prerequisiteSystems)
< ('actions' #main #setUp)
< 
< 	name = #UserApplication
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[236]
< 	current = an UserApplication
< Context PC = 5
< 
< ----------------------------------------------------------------------
< UserApplication class(Subsystem class)>>reactToEvent:
< Receiver:
< 	an UserApplication class
< Instance Variables:
< 	superclass = Subsystem
< 	methodDict = a MethodDictionary[3]
< 	format = 16387
< 	subclasses = nil
< 	instanceVariables = nil
< 	organization = ('prerequisites' #prerequisiteSystems)
< ('actions' #main #setUp)
< 
< 	name = #UserApplication
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[236]
< 	current = an UserApplication
< Arguments:
< 	aSymbol = #returnFromSnapshot
< Context PC = 30
< 
< ----------------------------------------------------------------------
< optimized [] in Subsystem class>>signalEvent:to:
< Receiver:
< 	an UndefinedObject
< Arguments:
< 	eachClass = UserApplication
< Temporaries:
< 	.aSymbol = #returnFromSnapshot
< Context PC = 9
< 
< ----------------------------------------------------------------------
< Set>>do:
< Receiver:
< 	a Set
< Instance Variables:
< 	tally = 21
< Arguments:
< 	aBlock = BlockClosure [] in Subsystem class>>signalEvent:to:
< Temporaries:
< 	index = 3
< 	elem = UserApplication
< Context PC = 31
< 
< ----------------------------------------------------------------------
< Subsystem class>>signalEvent:to:
< Receiver:
< 	a Subsystem class
< Instance Variables:
< 	superclass = Object
< 	methodDict = a MethodDictionary[38]
< 	format = 16387
< 	subclasses = an Array[19]
< 	instanceVariables = an Array[3]
< 	organization = ('testing' #isActive #isInactive #isPaused)
< ('initialize/release' #initialize)
< ('private - pragma messages' #option: #option:sequence: #prerequisites)
< ('default actions' #pauseAction #resumeAction #setUp #tearDown)
< ('defaults' #defaultCommandLineOptionSequence)
< ('private-activate/deactivate' #changeStateToActive #changeStateToInactive #changeStateToPaused #commandLine #commandLineOptionsWithPositions #commandLineOptionsWithPositionsInCommandLine: #ensureDependentSystemsAreInactive #ensureDependentSystemsArePaused #ensurePrerequisitesAreActive #ensurePrerequisitesAreResumed #privateActivate #privateDeactivate #privateMarkInactive #privatePause #privateResume #resetPrerequisites #runActivationActions)
< ('prerequisites' #allDependentSystems #allDependentSystemsRecursively #allPrerequisiteSystems #allPrerequisiteSystemsRecursively #dependentSystems #prerequisiteSystems)
< ('private-command line' #commandLineOptions)
< ('accessing' #canActivate #canActivate:)
< 
< 	name = #Subsystem
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[236]
< 	current = a Subsystem
< Arguments:
< 	aSymbol = #returnFromSnapshot
< 	aCollection = a Set[21]
< Context PC = 8
< 
< ----------------------------------------------------------------------
< Subsystem class>>signalEvent:
< Receiver:
< 	a Subsystem class
< Instance Variables:
< 	superclass = Object
< 	methodDict = a MethodDictionary[38]
< 	format = 16387
< 	subclasses = an Array[19]
< 	instanceVariables = an Array[3]
< 	organization = ('testing' #isActive #isInactive #isPaused)
< ('initialize/release' #initialize)
< ('private - pragma messages' #option: #option:sequence: #prerequisites)
< ('default actions' #pauseAction #resumeAction #setUp #tearDown)
< ('defaults' #defaultCommandLineOptionSequence)
< ('private-activate/deactivate' #changeStateToActive #changeStateToInactive #changeStateToPaused #commandLine #commandLineOptionsWithPositions #commandLineOptionsWithPositionsInCommandLine: #ensureDependentSystemsAreInactive #ensureDependentSystemsArePaused #ensurePrerequisitesAreActive #ensurePrerequisitesAreResumed #privateActivate #privateDeactivate #privateMarkInactive #privatePause #privateResume #resetPrerequisites #runActivationActions)
< ('prerequisites' #allDependentSystems #allDependentSystemsRecursively #allPrerequisiteSystems #allPrerequisiteSystemsRecursively #dependentSystems #prerequisiteSystems)
< ('private-command line' #commandLineOptions)
< ('accessing' #canActivate #canActivate:)
< 
< 	name = #Subsystem
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[236]
< 	current = a Subsystem
< Arguments:
< 	aSymbol = #returnFromSnapshot
< Temporaries:
< 	classesToNotify = a Set[21]
< 	done = a Set[0]
< Context PC = 22
< 
< ----------------------------------------------------------------------
< Snapshot>>signalSystemEvent:
< Receiver:
< 	a Snapshot
< Instance Variables:
< 	loadPolicy = 0
< 	quitAfterwards = false
< 	imagePrefix = 'benchmarks'
< 	originalPriority = 50
< Arguments:
< 	aSymbol = #returnFromSnapshot
< Context PC = 4
< 
< ----------------------------------------------------------------------
< Snapshot>>postSnapshotBootstrap
< Receiver:
< 	a Snapshot
< Instance Variables:
< 	loadPolicy = 0
< 	quitAfterwards = false
< 	imagePrefix = 'benchmarks'
< 	originalPriority = 50
< Context PC = 16
< 
< ----------------------------------------------------------------------
< Snapshot>>privateSnapshot
< Receiver:
< 	a Snapshot
< Instance Variables:
< 	loadPolicy = 0
< 	quitAfterwards = false
< 	imagePrefix = 'benchmarks'
< 	originalPriority = 50
< Temporaries:
< 	justSnapped = false
< Context PC = 25
< 
< ----------------------------------------------------------------------
< optimized [] in [] in Snapshot>>snapshot
< Receiver:
< 	an UndefinedObject
< Temporaries:
< 	.self = a Snapshot
< Context PC = 6
< 
< ----------------------------------------------------------------------
< Cursor>>showWhile:
< Receiver:
< 	a Cursor
< Instance Variables:
< 	errorCode = 0
< 	handle = nil
< 	image = Depth1Image(extent: 16 @ 16 depth: 1)
< 	mask = Depth1Image(extent: 16 @ 16 depth: 1)
< 	hotSpot = 0 @ 0
< 	name = 'wait'
< Arguments:
< 	aBlock = BlockClosure [] in [] in Snapshot>>snapshot
< Temporaries:
< 	oldcursor = Cursor wait
< Context PC = 13
< 
< ----------------------------------------------------------------------
< optimized [] in Snapshot>>snapshot
< Receiver:
< 	an UndefinedObject
< Temporaries:
< 	.self = a Snapshot
< Context PC = 16
< 
< ----------------------------------------------------------------------
< BlockClosure>>ensure:
< Receiver:
< 	a BlockClosure
< Instance Variables:
< 	method = CompiledBlock [] in Snapshot>>snapshot
< 	outerContext = nil
< 	copiedValues = a Snapshot
< Arguments:
< 	aBlock = BlockClosure [] in Snapshot class>>withSnapshot:do:
< Temporaries:
< 	result = nil
< Context PC = 4
< 
< ----------------------------------------------------------------------
< Snapshot class>>withSnapshot:do:
< Receiver:
< 	a Snapshot class
< Instance Variables:
< 	superclass = Object
< 	methodDict = a MethodDictionary[28]
< 	format = 16388
< 	subclasses = nil
< 	instanceVariables = an Array[4]
< 	organization = ('initialize/release' #initialize)
< ('accessing' #changesFilename #imageFilename #imagePrefix: #isAboutToQuit #loadPolicy #loadPolicy: #loadPolicyNormal #loadPolicyPermSave #loadPolicyPermUndo #quitAfterwards:)
< ('user interaction' #getImagePrefix #imageFilenameForUI #imagePrefixForUI #saveDialogThenQuit:)
< ('private-saving' #logSnapshot #postSnapshotBootstrap #postSnapshotStillRunning #preSnapshot #privateSnapshot #quitImage #setUpForSnapshot #tryToSnapshot #verifyWritability)
< ('signalling' #signalSystemEvent:)
< ('saving' #saveAs:thenQuit: #saveDetachedTo:thenQuit: #snapshot)
< 
< 	name = #Snapshot
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[257]
< 	current = a Snapshot
< Arguments:
< 	aSnapshot = a Snapshot
< 	aBlock = BlockClosure [] in Snapshot>>snapshot
< Context PC = 10
< 
< ----------------------------------------------------------------------
< Snapshot>>snapshot
< Receiver:
< 	a Snapshot
< Instance Variables:
< 	loadPolicy = 0
< 	quitAfterwards = false
< 	imagePrefix = 'benchmarks'
< 	originalPriority = 50
< Context PC = 13
< 
< ----------------------------------------------------------------------
< Snapshot>>saveAs:thenQuit:
< Receiver:
< 	a Snapshot
< Instance Variables:
< 	loadPolicy = 0
< 	quitAfterwards = false
< 	imagePrefix = 'benchmarks'
< 	originalPriority = 50
< Arguments:
< 	imageFilePrefix = 'benchmarks'
< 	quitIfTrue = false
< Context PC = 10
< 
< ----------------------------------------------------------------------
< Snapshot>>saveDetachedTo:thenQuit:
< Receiver:
< 	a Snapshot
< Instance Variables:
< 	loadPolicy = 0
< 	quitAfterwards = false
< 	imagePrefix = 'benchmarks'
< 	originalPriority = 50
< Arguments:
< 	imageFilePrefix = 'benchmarks'
< 	quitIfTrue = false
< Temporaries:
< 	oldImagePrefix = '/usr/local/src/vw7.7nc/image/visualnc64'
< 	snapshotResult = nil
< 	oldTarget = 2
< 	oldChangeLog = an UnixFilename('/usr/local/src/vw7.7nc/image/visualnc64.cha')
< 	oldRegisteredName = a ByteArray[43]
< Context PC = 24
< 
< ----------------------------------------------------------------------
< HeadlessImage>>saveHeadless:to:
< Receiver:
< 	a HeadlessImage
< Instance Variables:
< 	state = #active
< 	canActivate = true
< 	prerequisites = a Set[1]
< 	isTerminating = true
< 	startupFilename = 'headless-startup.st'
< 	transcriptFilename = 'headless-transcript.log'
< 	currentlyHeadless = false
< 	shouldSaveHeadless = false
< 	transcriptToStandardOut = false
< 	transcriptToStandardOutHeadless = true
< 	transcriptToFile = false
< 	transcriptToFileHeadless = true
< 	suspendedProcesses = nil
< 	stackDumpStream = nil
< Arguments:
< 	beHeadless = true
< 	prefix = 'benchmarks'
< Context PC = 11
< 
< ----------------------------------------------------------------------
< HeadlessImage>>saveHeadless:
< Receiver:
< 	a HeadlessImage
< Instance Variables:
< 	state = #active
< 	canActivate = true
< 	prerequisites = a Set[1]
< 	isTerminating = true
< 	startupFilename = 'headless-startup.st'
< 	transcriptFilename = 'headless-transcript.log'
< 	currentlyHeadless = false
< 	shouldSaveHeadless = false
< 	transcriptToStandardOut = false
< 	transcriptToStandardOutHeadless = true
< 	transcriptToFile = false
< 	transcriptToFileHeadless = true
< 	suspendedProcesses = nil
< 	stackDumpStream = nil
< Arguments:
< 	prefix = 'benchmarks'
< Context PC = 6
< 
< ----------------------------------------------------------------------
< UndefinedObject>>unboundMethod
< Receiver:
< 	an UndefinedObject
< Context PC = 154
< 
< ----------------------------------------------------------------------
< UndefinedObject(Object)>>performMethod:arguments:
< Receiver:
< 	an UndefinedObject
< Arguments:
< 	method = AnnotatedMethod UndefinedObject>>unboundMethod
< 	args = an Array[0]
< Context PC = 5
< 
< ----------------------------------------------------------------------
< UndefinedObject(Object)>>performMethod:
< Receiver:
< 	an UndefinedObject
< Arguments:
< 	method = AnnotatedMethod UndefinedObject>>unboundMethod
< Context PC = 5
< 
< ----------------------------------------------------------------------
< Compiler(SmalltalkCompiler)>>evaluate:in:allowReceiver:receiver:environment:notifying:ifFail:
< Receiver:
< 	a Compiler
< Instance Variables:
< 	sourceStream = a ReadStream
< 	requestor = nil
< 	class = UndefinedObject
< 	targetClass = UndefinedObject
< 	environment = a NameSpace[225]
< 	context = nil
< 	methodClass = CompiledMethod
< 	allowSelfReferences = true
< 	allowClassVariableReferences = nil
< Arguments:
< 	textOrStream = '
< ''./files/platform.vw'' asFile...chmarks''. 
< ObjectMemory quit'
< 	aContext = nil
< 	allowSelf = true
< 	receiver = nil
< 	env = a NameSpace[225]
< 	aRequestor = nil
< 	failBlock = BlockClosure [] in SmalltalkCompiler class>>evaluate:for:in:notifying:logged:
< Temporaries:
< 	method = AnnotatedMethod UndefinedObject>>unboundMethod
< Context PC = 22
< 
< ----------------------------------------------------------------------
< Compiler class(SmalltalkCompiler class)>>evaluate:for:in:notifying:logged:
< Receiver:
< 	a Compiler class
< Instance Variables:
< 	superclass = SmalltalkCompiler
< 	methodDict = a MethodDictionary[4]
< 	format = 16393
< 	subclasses = an Array[2]
< 	instanceVariables = nil
< 	organization = ('private' #compile:in: #newCodeStream #newMethodHolder #translate:noPattern:ifFail:needSourceMap:handler:)
< 
< 	name = #Compiler
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[257]
< Arguments:
< 	textOrString = '
< ''./files/platform.vw'' asFile...chmarks''. 
< ObjectMemory quit'
< 	anObject = nil
< 	aNameSpace = a NameSpace[225]
< 	aController = nil
< 	logFlag = false
< Temporaries:
< 	val = nil
< Context PC = 14
< 
< ----------------------------------------------------------------------
< Compiler class(SmalltalkCompiler class)>>evaluate:notifying:logged:
< Receiver:
< 	a Compiler class
< Instance Variables:
< 	superclass = SmalltalkCompiler
< 	methodDict = a MethodDictionary[4]
< 	format = 16393
< 	subclasses = an Array[2]
< 	instanceVariables = nil
< 	organization = ('private' #compile:in: #newCodeStream #newMethodHolder #translate:noPattern:ifFail:needSourceMap:handler:)
< 
< 	name = #Compiler
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[257]
< Arguments:
< 	textOrString = '
< ''./files/platform.vw'' asFile...chmarks''. 
< ObjectMemory quit'
< 	aController = nil
< 	logFlag = false
< Context PC = 9
< 
< ----------------------------------------------------------------------
< Compiler class(SmalltalkCompiler class)>>evaluate:logged:
< Receiver:
< 	a Compiler class
< Instance Variables:
< 	superclass = SmalltalkCompiler
< 	methodDict = a MethodDictionary[4]
< 	format = 16393
< 	subclasses = an Array[2]
< 	instanceVariables = nil
< 	organization = ('private' #compile:in: #newCodeStream #newMethodHolder #translate:noPattern:ifFail:needSourceMap:handler:)
< 
< 	name = #Compiler
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[257]
< Arguments:
< 	textOrString = '
< ''./files/platform.vw'' asFile...chmarks''. 
< ObjectMemory quit'
< 	logFlag = false
< Context PC = 7
< 
< ----------------------------------------------------------------------
< Compiler class(SmalltalkCompiler class)>>evaluate:
< Receiver:
< 	a Compiler class
< Instance Variables:
< 	superclass = SmalltalkCompiler
< 	methodDict = a MethodDictionary[4]
< 	format = 16393
< 	subclasses = an Array[2]
< 	instanceVariables = nil
< 	organization = ('private' #compile:in: #newCodeStream #newMethodHolder #translate:noPattern:ifFail:needSourceMap:handler:)
< 
< 	name = #Compiler
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[257]
< Arguments:
< 	textOrString = '
< ''./files/platform.vw'' asFile...chmarks''. 
< ObjectMemory quit'
< Context PC = 6
< 
< ----------------------------------------------------------------------
< optimized [] in ImageConfigurationSystem>>runCode:
< Receiver:
< 	an UndefinedObject
< Arguments:
< 	each = '
< ''./files/platform.vw'' asFile...chmarks''. 
< ObjectMemory quit'
< Context PC = 4
< 
< ----------------------------------------------------------------------
< OrderedCollection>>do:
< Receiver:
< 	an OrderedCollection
< Instance Variables:
< 	firstIndex = 1
< 	lastIndex = 1
< Arguments:
< 	aBlock = BlockClosure [] in ImageConfigurationSystem>>runCode:
< Temporaries:
< 	index = 1
< Context PC = 17
< 
< ----------------------------------------------------------------------
< ImageConfigurationSystem>>runCode:
< Receiver:
< 	an ImageConfigurationSystem
< Instance Variables:
< 	state = #inactive
< 	canActivate = true
< 	prerequisites = a Set[2]
< Arguments:
< 	argumentStream = a ReadStream
< Temporaries:
< 	expressions = an OrderedCollection[1]
< Context PC = 16
< 
< ----------------------------------------------------------------------
< CommandLineInterest>>triggerWithTokenStream:
< Receiver:
< 	a CommandLineInterest
< Instance Variables:
< 	receiver = an ImageConfigurationSystem
< 	selector = #runCode:
< 	systemEvent = #activate
< 	sequence = 1
< 	option = '-doit'
< 	commandLine = an Array[4]
< Arguments:
< 	aStream = a ReadStream
< Context PC = 24
< 
< ----------------------------------------------------------------------
< CommandLineInterest>>triggerOptionAt:
< Receiver:
< 	a CommandLineInterest
< Instance Variables:
< 	receiver = an ImageConfigurationSystem
< 	selector = #runCode:
< 	systemEvent = #activate
< 	sequence = 1
< 	option = '-doit'
< 	commandLine = an Array[4]
< Arguments:
< 	index = 3
< Temporaries:
< 	tokenStream = a ReadStream
< Context PC = 14
< 
< ----------------------------------------------------------------------
< optimized [] in [] in Subsystem>>runActivationActions
< Receiver:
< 	an UndefinedObject
< Arguments:
< 	association = 3 -> a CommandLineInterest(on: #activate at: 1 send: 'an ImageConfigurationSystem runCode:')(on: #activate at: 1 for: '-doit' send: 'an ImageConfigurationSystem runCode:')
< Context PC = 7
< 
< ----------------------------------------------------------------------
< SortedCollection(OrderedCollection)>>do:
< Receiver:
< 	a SortedCollection
< Instance Variables:
< 	firstIndex = 1
< 	lastIndex = 1
< 	sortBlock = BlockClosure [] in [] in Subsystem>>runActivationActions
< Arguments:
< 	aBlock = BlockClosure [] in [] in Subsystem>>runActivationActions
< Temporaries:
< 	index = 1
< Context PC = 17
< 
< ----------------------------------------------------------------------
< optimized [] in Subsystem>>runActivationActions
< Receiver:
< 	an UndefinedObject
< Arguments:
< 	sequence = 1
< Temporaries:
< 	interests = an OrderedCollection[1]
< 	.optionsBySequence = a Dictionary[1]
< Context PC = 13
< 
< ----------------------------------------------------------------------
< SortedCollection(OrderedCollection)>>do:
< Receiver:
< 	a SortedCollection
< Instance Variables:
< 	firstIndex = 1
< 	lastIndex = 1
< 	sortBlock = BlockClosure [] in SortedCollection class>>initialize
< Arguments:
< 	aBlock = BlockClosure [] in Subsystem>>runActivationActions
< Temporaries:
< 	index = 1
< Context PC = 17
< 
< ----------------------------------------------------------------------
< ImageConfigurationSystem(Subsystem)>>runActivationActions
< Receiver:
< 	an ImageConfigurationSystem
< Instance Variables:
< 	state = #inactive
< 	canActivate = true
< 	prerequisites = a Set[2]
< Temporaries:
< 	optionsBySequence = a Dictionary[1]
< 	sequenceValues = a SortedCollection[1]
< Context PC = 18
< 
< ----------------------------------------------------------------------
< ImageConfigurationSystem>>runActivationActions
< Receiver:
< 	an ImageConfigurationSystem
< Instance Variables:
< 	state = #inactive
< 	canActivate = true
< 	prerequisites = a Set[2]
< Context PC = 17
< 
< ----------------------------------------------------------------------
< ImageConfigurationSystem(Subsystem)>>privateActivate
< Receiver:
< 	an ImageConfigurationSystem
< Instance Variables:
< 	state = #inactive
< 	canActivate = true
< 	prerequisites = a Set[2]
< Context PC = 21
< 
< ----------------------------------------------------------------------
< ImageConfigurationSystem class(Subsystem class)>>activate
< Receiver:
< 	an ImageConfigurationSystem class
< Instance Variables:
< 	superclass = Subsystem
< 	methodDict = a MethodDictionary[16]
< 	format = 16387
< 	subclasses = nil
< 	instanceVariables = nil
< 	organization = ('command line handling' #loadCodeFromFilein: #loadParcel: #loadParcelsFromConfigurationFile: #loadSettings: #runCode: #runCodeAndThenQuit:)
< ('private' #stdout)
< ('actions' #defaultConfigFileName)
< ('prerequisites' #prerequisiteSystems)
< ('helpers' #getOptionsFrom: #loadFromConfigFileNamed: #loadFromConfigStream: #loadSettingsFrom: #processOptions: #tokensFromStream:)
< ('private-activate/deactivate' #runActivationActions)
< 
< 	name = #ImageConfigurationSystem
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[236]
< 	current = an ImageConfigurationSystem
< 	allowParcelLoading = true
< 	allowFilein = true
< 	allowSettings = true
< 	allowExpressions = true
< 	useDefaultConfigFile = true
< 	allowDevelopment = nil
< Context PC = 5
< 
< ----------------------------------------------------------------------
< optimized [] in Subsystem>>ensurePrerequisitesAreActive
< Receiver:
< 	an UndefinedObject
< Arguments:
< 	each = ImageConfigurationSystem
< Context PC = 3
< 
< ----------------------------------------------------------------------
< Set>>do:
< Receiver:
< 	a Set
< Instance Variables:
< 	tally = 1
< Arguments:
< 	aBlock = BlockClosure [] in Subsystem>>ensurePrerequisitesAreActive
< Temporaries:
< 	index = 2
< 	elem = ImageConfigurationSystem
< Context PC = 31
< 
< ----------------------------------------------------------------------
< RuntimeSystem(Subsystem)>>ensurePrerequisitesAreActive
< Receiver:
< 	a RuntimeSystem
< Instance Variables:
< 	state = #inactive
< 	canActivate = true
< 	prerequisites = a Set[1]
< Context PC = 7
< 
< ----------------------------------------------------------------------
< RuntimeSystem(Subsystem)>>privateActivate
< Receiver:
< 	a RuntimeSystem
< Instance Variables:
< 	state = #inactive
< 	canActivate = true
< 	prerequisites = a Set[1]
< Context PC = 15
< 
< ----------------------------------------------------------------------
< RuntimeSystem class(Subsystem class)>>activate
< Receiver:
< 	a RuntimeSystem class
< Instance Variables:
< 	superclass = Subsystem
< 	methodDict = a MethodDictionary[3]
< 	format = 16387
< 	subclasses = nil
< 	instanceVariables = nil
< 	organization = ('accessing' #isDevelopment #isRuntime)
< ('prerequisites' #prerequisiteSystems)
< 
< 	name = #RuntimeSystem
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[236]
< 	current = a RuntimeSystem
< Context PC = 5
< 
< ----------------------------------------------------------------------
< optimized [] in Subsystem>>ensurePrerequisitesAreActive
< Receiver:
< 	an UndefinedObject
< Arguments:
< 	each = RuntimeSystem
< Context PC = 3
< 
< ----------------------------------------------------------------------
< Set>>do:
< Receiver:
< 	a Set
< Instance Variables:
< 	tally = 1
< Arguments:
< 	aBlock = BlockClosure [] in Subsystem>>ensurePrerequisitesAreActive
< Temporaries:
< 	index = 3
< 	elem = RuntimeSystem
< Context PC = 31
< 
< ----------------------------------------------------------------------
< UserApplication(Subsystem)>>ensurePrerequisitesAreActive
< Receiver:
< 	an UserApplication
< Instance Variables:
< 	state = #inactive
< 	canActivate = true
< 	prerequisites = a Set[1]
< Context PC = 7
< 
< ----------------------------------------------------------------------
< UserApplication(Subsystem)>>privateActivate
< Receiver:
< 	an UserApplication
< Instance Variables:
< 	state = #inactive
< 	canActivate = true
< 	prerequisites = a Set[1]
< Context PC = 15
< 
< ----------------------------------------------------------------------
< UserApplication class(Subsystem class)>>activate
< Receiver:
< 	an UserApplication class
< Instance Variables:
< 	superclass = Subsystem
< 	methodDict = a MethodDictionary[3]
< 	format = 16387
< 	subclasses = nil
< 	instanceVariables = nil
< 	organization = ('prerequisites' #prerequisiteSystems)
< ('actions' #main #setUp)
< 
< 	name = #UserApplication
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[236]
< 	current = an UserApplication
< Context PC = 5
< 
< ----------------------------------------------------------------------
< UserApplication class(Subsystem class)>>reactToEvent:
< Receiver:
< 	an UserApplication class
< Instance Variables:
< 	superclass = Subsystem
< 	methodDict = a MethodDictionary[3]
< 	format = 16387
< 	subclasses = nil
< 	instanceVariables = nil
< 	organization = ('prerequisites' #prerequisiteSystems)
< ('actions' #main #setUp)
< 
< 	name = #UserApplication
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[236]
< 	current = an UserApplication
< Arguments:
< 	aSymbol = #returnFromSnapshot
< Context PC = 30
< 
< ----------------------------------------------------------------------
< optimized [] in Subsystem class>>signalEvent:to:
< Receiver:
< 	an UndefinedObject
< Arguments:
< 	eachClass = UserApplication
< Temporaries:
< 	.aSymbol = #returnFromSnapshot
< Context PC = 9
< 
< ----------------------------------------------------------------------
< Set>>do:
< Receiver:
< 	a Set
< Instance Variables:
< 	tally = 21
< Arguments:
< 	aBlock = BlockClosure [] in Subsystem class>>signalEvent:to:
< Temporaries:
< 	index = 3
< 	elem = UserApplication
< Context PC = 31
< 
< ----------------------------------------------------------------------
< Subsystem class>>signalEvent:to:
< Receiver:
< 	a Subsystem class
< Instance Variables:
< 	superclass = Object
< 	methodDict = a MethodDictionary[38]
< 	format = 16387
< 	subclasses = an Array[19]
< 	instanceVariables = an Array[3]
< 	organization = ('testing' #isActive #isInactive #isPaused)
< ('initialize/release' #initialize)
< ('private - pragma messages' #option: #option:sequence: #prerequisites)
< ('default actions' #pauseAction #resumeAction #setUp #tearDown)
< ('defaults' #defaultCommandLineOptionSequence)
< ('private-activate/deactivate' #changeStateToActive #changeStateToInactive #changeStateToPaused #commandLine #commandLineOptionsWithPositions #commandLineOptionsWithPositionsInCommandLine: #ensureDependentSystemsAreInactive #ensureDependentSystemsArePaused #ensurePrerequisitesAreActive #ensurePrerequisitesAreResumed #privateActivate #privateDeactivate #privateMarkInactive #privatePause #privateResume #resetPrerequisites #runActivationActions)
< ('prerequisites' #allDependentSystems #allDependentSystemsRecursively #allPrerequisiteSystems #allPrerequisiteSystemsRecursively #dependentSystems #prerequisiteSystems)
< ('private-command line' #commandLineOptions)
< ('accessing' #canActivate #canActivate:)
< 
< 	name = #Subsystem
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[236]
< 	current = a Subsystem
< Arguments:
< 	aSymbol = #returnFromSnapshot
< 	aCollection = a Set[21]
< Context PC = 8
< 
< ----------------------------------------------------------------------
< Subsystem class>>signalEvent:
< Receiver:
< 	a Subsystem class
< Instance Variables:
< 	superclass = Object
< 	methodDict = a MethodDictionary[38]
< 	format = 16387
< 	subclasses = an Array[19]
< 	instanceVariables = an Array[3]
< 	organization = ('testing' #isActive #isInactive #isPaused)
< ('initialize/release' #initialize)
< ('private - pragma messages' #option: #option:sequence: #prerequisites)
< ('default actions' #pauseAction #resumeAction #setUp #tearDown)
< ('defaults' #defaultCommandLineOptionSequence)
< ('private-activate/deactivate' #changeStateToActive #changeStateToInactive #changeStateToPaused #commandLine #commandLineOptionsWithPositions #commandLineOptionsWithPositionsInCommandLine: #ensureDependentSystemsAreInactive #ensureDependentSystemsArePaused #ensurePrerequisitesAreActive #ensurePrerequisitesAreResumed #privateActivate #privateDeactivate #privateMarkInactive #privatePause #privateResume #resetPrerequisites #runActivationActions)
< ('prerequisites' #allDependentSystems #allDependentSystemsRecursively #allPrerequisiteSystems #allPrerequisiteSystemsRecursively #dependentSystems #prerequisiteSystems)
< ('private-command line' #commandLineOptions)
< ('accessing' #canActivate #canActivate:)
< 
< 	name = #Subsystem
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[236]
< 	current = a Subsystem
< Arguments:
< 	aSymbol = #returnFromSnapshot
< Temporaries:
< 	classesToNotify = a Set[21]
< 	done = a Set[0]
< Context PC = 22
< 
< ----------------------------------------------------------------------
< Snapshot>>signalSystemEvent:
< Receiver:
< 	a Snapshot
< Instance Variables:
< 	loadPolicy = 0
< 	quitAfterwards = true
< 	imagePrefix = '/pps/license/cake/dec09.1/image/visualnc64'
< 	originalPriority = 50
< Arguments:
< 	aSymbol = #returnFromSnapshot
< Context PC = 4
< 
< ----------------------------------------------------------------------
< Snapshot>>postSnapshotBootstrap
< Receiver:
< 	a Snapshot
< Instance Variables:
< 	loadPolicy = 0
< 	quitAfterwards = true
< 	imagePrefix = '/pps/license/cake/dec09.1/image/visualnc64'
< 	originalPriority = 50
< Context PC = 16
< 
< ----------------------------------------------------------------------
< Snapshot>>privateSnapshot
< Receiver:
< 	a Snapshot
< Instance Variables:
< 	loadPolicy = 0
< 	quitAfterwards = true
< 	imagePrefix = '/pps/license/cake/dec09.1/image/visualnc64'
< 	originalPriority = 50
< Temporaries:
< 	justSnapped = false
< Context PC = 25
< 
< ----------------------------------------------------------------------
< optimized [] in [] in Snapshot>>snapshot
< Receiver:
< 	an UndefinedObject
< Temporaries:
< 	.self = a Snapshot
< Context PC = 6
< 
< ----------------------------------------------------------------------
< BlockClosure>>ensure:
< Receiver:
< 	a BlockClosure
< Instance Variables:
< 	method = CompiledBlock [] in [] in Snapshot>>snapshot
< 	outerContext = nil
< 	copiedValues = a Snapshot
< Arguments:
< 	aBlock = BlockClosure [] in Cursor>>showWhile:
< Temporaries:
< 	result = nil
< Context PC = 4
< 
< ----------------------------------------------------------------------
< Cursor>>showWhile:
< Receiver:
< 	a Cursor
< Instance Variables:
< 	errorCode = 0
< 	handle = nil
< 	image = Depth1Image(extent: 16 @ 16 depth: 1)
< 	mask = Depth1Image(extent: 16 @ 16 depth: 1)
< 	hotSpot = 0 @ 0
< 	name = 'wait'
< Arguments:
< 	aBlock = BlockClosure [] in [] in Snapshot>>snapshot
< Temporaries:
< 	oldcursor = Cursor normal
< Context PC = 23
< 
< ----------------------------------------------------------------------
< optimized [] in Snapshot>>snapshot
< Receiver:
< 	an UndefinedObject
< Temporaries:
< 	.self = a Snapshot
< Context PC = 16
< 
< ----------------------------------------------------------------------
< BlockClosure>>ensure:
< Receiver:
< 	a BlockClosure
< Instance Variables:
< 	method = CompiledBlock [] in Snapshot>>snapshot
< 	outerContext = nil
< 	copiedValues = a Snapshot
< Arguments:
< 	aBlock = BlockClosure [] in Snapshot class>>withSnapshot:do:
< Temporaries:
< 	result = nil
< Context PC = 4
< 
< ----------------------------------------------------------------------
< Snapshot class>>withSnapshot:do:
< Receiver:
< 	a Snapshot class
< Instance Variables:
< 	superclass = Object
< 	methodDict = a MethodDictionary[28]
< 	format = 16388
< 	subclasses = nil
< 	instanceVariables = an Array[4]
< 	organization = ('initialize/release' #initialize)
< ('accessing' #changesFilename #imageFilename #imagePrefix: #isAboutToQuit #loadPolicy #loadPolicy: #loadPolicyNormal #loadPolicyPermSave #loadPolicyPermUndo #quitAfterwards:)
< ('user interaction' #getImagePrefix #imageFilenameForUI #imagePrefixForUI #saveDialogThenQuit:)
< ('private-saving' #logSnapshot #postSnapshotBootstrap #postSnapshotStillRunning #preSnapshot #privateSnapshot #quitImage #setUpForSnapshot #tryToSnapshot #verifyWritability)
< ('signalling' #signalSystemEvent:)
< ('saving' #saveAs:thenQuit: #saveDetachedTo:thenQuit: #snapshot)
< 
< 	name = #Snapshot
< 	classPool = a NameSpaceOfClass[0]
< 	environment = a NameSpace[257]
< 	current = a Snapshot
< Arguments:
< 	aSnapshot = a Snapshot
< 	aBlock = BlockClosure [] in Snapshot>>snapshot
< Context PC = 10
< 
< ----------------------------------------------------------------------
< Snapshot>>snapshot
< Receiver:
< 	a Snapshot
< Instance Variables:
< 	loadPolicy = 0
< 	quitAfterwards = true
< 	imagePrefix = '/pps/license/cake/dec09.1/image/visualnc64'
< 	originalPriority = 50
< Context PC = 13
< 
< ----------------------------------------------------------------------
< Snapshot>>saveAs:thenQuit:
< Receiver:
< 	a Snapshot
< Instance Variables:
< 	loadPolicy = 0
< 	quitAfterwards = true
< 	imagePrefix = '/pps/license/cake/dec09.1/image/visualnc64'
< 	originalPriority = 50
< Arguments:
< 	imageFilePrefix = '/pps/license/cake/dec09.1/image/visualnc64'
< 	quitIfTrue = true
< Context PC = 10
< 
< ----------------------------------------------------------------------
< ObjectMemory class>>snapshotAs:thenQuit:
< Receiver:
< 	an ObjectMemory class
< Instance Variables:
< 	superclass = Object
< 	methodDict = a MethodDictionary[101]
< 	format = 20546
< 	subclasses = nil
< 	instanceVariables = an Array[66]
< 	organization = ('incremental queries' #incrementalGCState #percentOfFreeOldSpaceAllocated #percentOfFreeSpaceAllocated)
< ('space queries' #availableContiguousFixedSpace #availableContiguousOldSpace #availableContiguousSpace)
< ('converting' #ftEntriesToBytes: #oopsToBytes: #otEntriesToBytes:)
< ('accessing-general' #bytesPerOOP #bytesPerOTE #enumerationCallsPerMillisecond)
< ('accessing-remembered table' #bytesPerRTE #rtEntries #rtUsedEntries)
< ('accessing-new space' #edenBytes #edenUsedBytes #edenUsedBytesScavengeThreshold #survBytes #survUsedBytes #survUsedBytesTenuringThreshold)
< ('accessing-fixed space' #fixedBytes #fixedSegments #fixedUsedBytes #fixedUsedObjects)
< ('accessing-large space' #bytesPerFTE #bytesPerLTE #largeBytes #largeFreeBytesTenuringThreshold #largeUsedBytes #largeUsedObjects)
< ('accessing-fragmentation/free list' #allocFailures #allocMatches #allocProbes #allocSplits #threadedDataBytes #threadedDataEntries #threadedOTEntries)
< ('accessing-incremental' #incGCState #incMarkedBytes #incMarkedObjects #incMarkedWeakBytes #incMarkedWeakObjects #incNilledBytes #incNilledObjects #incReclaimedBytes #incReclaimedObjects #incSweepAllocatedBytes #incSweepAllocatedObjects #incSweptObjects #incUnmarkedObjects)
< ('accessing-free space' #availableFreeBytes #availableFreeFixedSpaceBytes #availableFreeLargeSpaceBytes #availableFreeOldSpaceBytes #availableFreeOldSpaceBytesLimit #contiguousFreeBytes #contiguousFreeOldBytes #freePermBytes #maximalFreeOldBytes #oopsLeft #reservedContiguousFreeBytes)
< ('accessing-old space' #oldBytes #oldDataBytes #oldOTEs #oldSegments)
< ('accessing-segments' #contiguousFixedSpaceAt: #contiguousOldSpaceAt: #contiguousSpaceAt: #fixedDataSizeAt: #fixedSegmentSizeAt: #fixedTableSizeAt: #oldDataSizeAt: #oldOtSizeAt: #oldSegmentSizeAt:)
< ('accessing-reclamation stats' #numDataCompactions #numGCs #numGlobalGCs #numIncGCs #numMarkStackOverflows #numScavenges #numWeakObjectListOverflows)
< ('accessing-fixed size spaces' #compCodeCacheBytes #emergencyDebuggingHeadroom #stackBytes #stackZoneFlushBytes)
< ('utilities' #dynamicallyAllocatedFootprint #inspectorStatisticsAttribute #numOopsNumBytes #numOopsNumBytesIn: #print:used:total:threshold:objects:on: #printSpaceReport #spaceSummaryOn:)
< ('accessing-old remembered table' #oldRtEntries #oldRtUsedEntries)
< ('accessing-perm space' #permBytes #permDataBytes #permOTEs)
< ('WaveCompatibility' #noticeOfDeinstall #noticeOfInstall)
< ('accessing-native stack' #nativeStackSpills)
< 
< 	name = #ObjectMemory
< 	classPool = a NameSpaceOfClass[14]
< 	environment = a NameSpace[257]
< 	dependents = a DependentsCollection[8]
< Arguments:
< 	imageFilePrefix = '/pps/license/cake/dec09.1/image/visualnc64'
< 	quitIfTrue = true
< Context PC = 6
< 
< ----------------------------------------------------------------------
< ObjectMemory class>>snapshotThenQuit
< Receiver:
< 	an ObjectMemory class
< Instance Variables:
< 	superclass = Object
< 	methodDict = a MethodDictionary[101]
< 	format = 20546
< 	subclasses = nil
< 	instanceVariables = an Array[66]
< 	organization = ('incremental queries' #incrementalGCState #percentOfFreeOldSpaceAllocated #percentOfFreeSpaceAllocated)
< ('space queries' #availableContiguousFixedSpace #availableContiguousOldSpace #availableContiguousSpace)
< ('converting' #ftEntriesToBytes: #oopsToBytes: #otEntriesToBytes:)
< ('accessing-general' #bytesPerOOP #bytesPerOTE #enumerationCallsPerMillisecond)
< ('accessing-remembered table' #bytesPerRTE #rtEntries #rtUsedEntries)
< ('accessing-new space' #edenBytes #edenUsedBytes #edenUsedBytesScavengeThreshold #survBytes #survUsedBytes #survUsedBytesTenuringThreshold)
< ('accessing-fixed space' #fixedBytes #fixedSegments #fixedUsedBytes #fixedUsedObjects)
< ('accessing-large space' #bytesPerFTE #bytesPerLTE #largeBytes #largeFreeBytesTenuringThreshold #largeUsedBytes #largeUsedObjects)
< ('accessing-fragmentation/free list' #allocFailures #allocMatches #allocProbes #allocSplits #threadedDataBytes #threadedDataEntries #threadedOTEntries)
< ('accessing-incremental' #incGCState #incMarkedBytes #incMarkedObjects #incMarkedWeakBytes #incMarkedWeakObjects #incNilledBytes #incNilledObjects #incReclaimedBytes #incReclaimedObjects #incSweepAllocatedBytes #incSweepAllocatedObjects #incSweptObjects #incUnmarkedObjects)
< ('accessing-free space' #availableFreeBytes #availableFreeFixedSpaceBytes #availableFreeLargeSpaceBytes #availableFreeOldSpaceBytes #availableFreeOldSpaceBytesLimit #contiguousFreeBytes #contiguousFreeOldBytes #freePermBytes #maximalFreeOldBytes #oopsLeft #reservedContiguousFreeBytes)
< ('accessing-old space' #oldBytes #oldDataBytes #oldOTEs #oldSegments)
< ('accessing-segments' #contiguousFixedSpaceAt: #contiguousOldSpaceAt: #contiguousSpaceAt: #fixedDataSizeAt: #fixedSegmentSizeAt: #fixedTableSizeAt: #oldDataSizeAt: #oldOtSizeAt: #oldSegmentSizeAt:)
< ('accessing-reclamation stats' #numDataCompactions #numGCs #numGlobalGCs #numIncGCs #numMarkStackOverflows #numScavenges #numWeakObjectListOverflows)
< ('accessing-fixed size spaces' #compCodeCacheBytes #emergencyDebuggingHeadroom #stackBytes #stackZoneFlushBytes)
< ('utilities' #dynamicallyAllocatedFootprint #inspectorStatisticsAttribute #numOopsNumBytes #numOopsNumBytesIn: #print:used:total:threshold:objects:on: #printSpaceReport #spaceSummaryOn:)
< ('accessing-old remembered table' #oldRtEntries #oldRtUsedEntries)
< ('accessing-perm space' #permBytes #permDataBytes #permOTEs)
< ('WaveCompatibility' #noticeOfDeinstall #noticeOfInstall)
< ('accessing-native stack' #nativeStackSpills)
< 
< 	name = #ObjectMemory
< 	classPool = a NameSpaceOfClass[14]
< 	environment = a NameSpace[257]
< 	dependents = a DependentsCollection[8]
< Context PC = 6
< 
< ----------------------------------------------------------------------
< ObjectMemory class>>quitDialog
< Receiver:
< 	an ObjectMemory class
< Instance Variables:
< 	superclass = Object
< 	methodDict = a MethodDictionary[101]
< 	format = 20546
< 	subclasses = nil
< 	instanceVariables = an Array[66]
< 	organization = ('incremental queries' #incrementalGCState #percentOfFreeOldSpaceAllocated #percentOfFreeSpaceAllocated)
< ('space queries' #availableContiguousFixedSpace #availableContiguousOldSpace #availableContiguousSpace)
< ('converting' #ftEntriesToBytes: #oopsToBytes: #otEntriesToBytes:)
< ('accessing-general' #bytesPerOOP #bytesPerOTE #enumerationCallsPerMillisecond)
< ('accessing-remembered table' #bytesPerRTE #rtEntries #rtUsedEntries)
< ('accessing-new space' #edenBytes #edenUsedBytes #edenUsedBytesScavengeThreshold #survBytes #survUsedBytes #survUsedBytesTenuringThreshold)
< ('accessing-fixed space' #fixedBytes #fixedSegments #fixedUsedBytes #fixedUsedObjects)
< ('accessing-large space' #bytesPerFTE #bytesPerLTE #largeBytes #largeFreeBytesTenuringThreshold #largeUsedBytes #largeUsedObjects)
< ('accessing-fragmentation/free list' #allocFailures #allocMatches #allocProbes #allocSplits #threadedDataBytes #threadedDataEntries #threadedOTEntries)
< ('accessing-incremental' #incGCState #incMarkedBytes #incMarkedObjects #incMarkedWeakBytes #incMarkedWeakObjects #incNilledBytes #incNilledObjects #incReclaimedBytes #incReclaimedObjects #incSweepAllocatedBytes #incSweepAllocatedObjects #incSweptObjects #incUnmarkedObjects)
< ('accessing-free space' #availableFreeBytes #availableFreeFixedSpaceBytes #availableFreeLargeSpaceBytes #availableFreeOldSpaceBytes #availableFreeOldSpaceBytesLimit #contiguousFreeBytes #contiguousFreeOldBytes #freePermBytes #maximalFreeOldBytes #oopsLeft #reservedContiguousFreeBytes)
< ('accessing-old space' #oldBytes #oldDataBytes #oldOTEs #oldSegments)
< ('accessing-segments' #contiguousFixedSpaceAt: #contiguousOldSpaceAt: #contiguousSpaceAt: #fixedDataSizeAt: #fixedSegmentSizeAt: #fixedTableSizeAt: #oldDataSizeAt: #oldOtSizeAt: #oldSegmentSizeAt:)
< ('accessing-reclamation stats' #numDataCompactions #numGCs #numGlobalGCs #numIncGCs #numMarkStackOverflows #numScavenges #numWeakObjectListOverflows)
< ('accessing-fixed size spaces' #compCodeCacheBytes #emergencyDebuggingHeadroom #stackBytes #stackZoneFlushBytes)
< ('utilities' #dynamicallyAllocatedFootprint #inspectorStatisticsAttribute #numOopsNumBytes #numOopsNumBytesIn: #print:used:total:threshold:objects:on: #printSpaceReport #spaceSummaryOn:)
< ('accessing-old remembered table' #oldRtEntries #oldRtUsedEntries)
< ('accessing-perm space' #permBytes #permDataBytes #permOTEs)
< ('WaveCompatibility' #noticeOfDeinstall #noticeOfInstall)
< ('accessing-native stack' #nativeStackSpills)
< 
< 	name = #ObjectMemory
< 	classPool = a NameSpaceOfClass[14]
< 	environment = a NameSpace[257]
< 	dependents = a DependentsCollection[8]
< Temporaries:
< 	result = #saveThenQuit
< Context PC = 52
< 
< ----------------------------------------------------------------------
< VisualLauncher>>visualWorksExit
< Receiver:
< 	a VisualLauncher
< Instance Variables:
< 	dependents = an ApplicationWindow nil
< 	builder = an UIBuilder
< 	uiSession = a ControlManager
< 	eventHandlers = nil
< 	menuBar = a Menu
< 	toolBar = a ValueHolder on: a Menu
< 	textCollector = a TextCollector on: Text for '
< /pps/license/cake/dec09.1/image/visualnc64.im created at December 15, 2009 1:22:39 PM
< Filing in from:
< 	files/platform.vw
< Tests class<platform
< Tests class<platform
< Tests class<platform
< Tests class<platform
< Tests class<platform
< Stream<platform
< Stream<platform
< Stream<platform
< Integer<platform
< Filing in from:
< 	files/binarytrees.vw
< Tests class<benchmarking
< Tests class<benchmark scripts
< TreeNode<initialize-release
< TreeNode<accessing
< TreeNode class<instance creation
< TreeNode class<instance creation
< Filing in from:
< 	files/fannkuch.vw
< Array<benchmarking
< PermGenerator<initialize-release
< PermGenerator<initialize-release
< PermGenerator<benchmarks
< PermGenerator<accessing
< PermGenerator<accessing
< PermGenerator class<instance creation
< Tests class<benchmarking
< Tests class<benchmark scripts
< Filing in from:
< 	files/fasta.vw
< RandomNumber<private
< RandomNumber<accessing
< RandomNumber class<class initialization
< RandomNumber class<initialize-release
< RepeatStream<accessing
< RepeatStream<testing
< RepeatStream<initialize-release
< RandomStream<accessing
< RandomStream<accessing
< RandomStream<initialize-release
< RepeatStream class<instance creation
< Tests class<benchmarking
< Tests class<benchmarking
< Tests class<benchmark scripts
< Filing in from:
< 	files/hello.vw
< Tests class<benchmark scripts
< Filing in from:
< 	files/knucleotide.vw
< SequenceableCollection<computer language shootout
< Dictionary<computer language shootout
< Tests class<benchmarking
< Tests class<benchmarking
< Tests class<benchmark scripts
< Filing in from:
< 	files/knucleotide.vw-2.vw
< SequenceableCollection<computer language shootout
< Dictionary<computer language shootout
< DNASequenceDictionary<private
< String<comparing
< Tests class<benchmarking
< Tests class<benchmarking
< Tests class<benchmark scripts
< Filing in from:
< 	files/knucleotide.vw-3.vw
< SequenceableCollection<computer language shootout
< Dictionary<computer language shootout
< Tests class<benchmarking
< Tests class<benchmarking
< Tests class<benchmark scripts
< Filing in from:
< 	files/knucleotide.vw-4.vw
< SequenceableCollection<computer language shootout
< Dictionary<computer language shootout
< Tests class<benchmarking
< Tests class<benchmarking
< Tests class<benchmark scripts
< Filing in from:
< 	files/mandelbrot.vw-2.vw
< Tests class<benchmarking
< Tests class<benchmark scripts
< Filing in from:
< 	files/nbody.vw
< Body<accessing
< Body<accessing
< Body<accessing
< Body<accessing
< Body<accessing
< Body<nbody
< Body<nbody
< Body<nbody
< Body<nbody
< Body<nbody
< Body<nbody
< Body<nbody
< Body<nbody
< Body class<constants
< Body class<constants
< Body class<constants
< Body class<constants
< Body class<constants
< Body class<constants
< Body class<constants
< Body class<constants
< NBodySystem<nbody
< NBodySystem<nbody
< NBodySystem<initialize-release
< Tests class<benchmark scripts
< Filing in from:
< 	files/nsieve.vw
< Tests class<benchmark scripts
< Tests class<benchmarking
< Tests class<benchmarking
< Filing in from:
< 	files/nsievebits.vw
< BitArray<accessing
< BitArray<accessing
< BitArray<accessing
< BitArray class<instance creation
< Tests class<benchmark scripts
< Tests class<benchmarking
< Tests class<benchmarking
< Filing in from:
< 	files/partialsums.vw
< Tests class<benchmarking
< Tests class<benchmarking(Tests class #print:withName:to: - name - redeclared)
< 
< Tests class<benchmark scripts
< Filing in from:
< 	files/pidigits.vw
< PiDigitSpigot<private
< PiDigitSpigot<private
< PiDigitSpigot<private
< PiDigitSpigot<private
< PiDigitSpigot<accessing
< PiDigitSpigot<initialize-release
< PiDigitSpigot class<instance creation
< Tests class<benchmarking
< Tests class<benchmark scripts
< Transformation<accessing
< Transformation<accessing
< Transformation<accessing
< Transformation<accessing
< Transformation<accessing
< Transformation<accessing
< Transformation<accessing
< Transformation<accessing
< Transformation<initialize-release
< Transformation class<instance creation
< Transformation class<instance creation
< Transformation class<instance creation
< Filing in from:
< 	files/pidigits.vw-3.vw
< PiDigitSpigot<stream
< PiDigitSpigot<private
< PiDigitSpigot class<instance creation
< Tests class<benchmarking
< Tests class<benchmark scripts
< Filing in from:
< 	files/revcomp.vw
< Tests class<benchmarking
< Tests class<benchmarking
< Tests class<benchmark scripts
< Filing in from:
< 	files/recursive.vw
< Double<benchmarking
< Double<benchmarking
< SmallInteger<benchmarking
< SmallInteger<benchmarking
< SmallInteger<benchmarking
< Tests class<benchmarking
< Tests class<benchmark scripts
< Filing in from:
< 	files/sumcol.vw-2.vw
< Tests class<benchmark scripts
< Filing in from:
< 	files/threadring.vw-2.vw
< Tests class<benchmarking
< Thread class<instance creation
< Thread<accessing
< Filing in from:
< 	files/sumcol.vw-3.vw
< Tests class<benchmark scripts
< Filing in from:
< 	files/chameneosredux.vw-2.vw
< Tests class<benchmarking-scripts
< Pair class<instance creation
< Pair<accessing
< Pair<initialize-release
< Mall class<printing
< Mall class<initialize-release
< Mall class<private
< Mall class<accessing
< Mall class<public
< Mall<accessing
< Mall<private
< Mall<initialize-release
< Mall<controlling
< Creature class<initialize-release
< Creature<accessing
< Creature<initialize-release
< Creature<controlling
< ChameneosColour class<accessing
< ChameneosColour class<initialize-release
< ChameneosColour class<printing
< ChameneosColour<as yet unclassified
< ChameneosColour<testing
< ChameneosColour<accessing
< ChameneosColour<printing
< Filing in from:
< 	files/spectralnorm.vw-2.vw
< Array<benchmarking
< Array<benchmarking
< Array<benchmarking
< SmallInteger<benchmarking
< Tests class<benchmarking
< Tests class<benchmark scripts
< Autoloading Regex11 from $(VISUALWORKS)/parcels/Regex11.pcl
< Filing in from:
< 	regex-fixes
< Filing in from:
< 	files/regexdna.vw
< Tests class<benchmarking
< Tests class<benchmarking
< Tests class<benchmarking
< Tests class<benchmark scripts
< Copying /usr/local/src/vw7.7nc/image/visualnc64.cha  to /home/dunham/shootout/bench/Include/smalltalk/vw/benchmarks.cha... done
< 
< benchmarks.im created at January 22, 2010 3:51:06 PM'
< 	toolDock = a VisualLauncherToolDock
< Context PC = 3
< 
< ----------------------------------------------------------------------
< MenuBarButtonController>>dispatchMenuSymbol:
< Receiver:
< 	a MenuBarButtonController
< Instance Variables:
< 	model = nil
< 	view = a MotifMenuBarButtonView
< 	sensor = a TranslatingSensor
< Arguments:
< 	menuSelection = #visualWorksExit
< Context PC = 38
< 
< ----------------------------------------------------------------------
< MenuBarButtonController>>dispatchMenuSelection:
< Receiver:
< 	a MenuBarButtonController
< Instance Variables:
< 	model = nil
< 	view = a MotifMenuBarButtonView
< 	sensor = a TranslatingSensor
< Arguments:
< 	menuSelection = #visualWorksExit
< Context PC = 21
< 
< ----------------------------------------------------------------------
< optimized [] in MenuBarButtonController>>menuBarActionForMenu:
< Receiver:
< 	an UndefinedObject
< Temporaries:
< 	valueResult = a MenuItem 'Exit VisualWorks...'
< 	.self = a MenuBarButtonController
< 	.aMenu = a Menu
< Context PC = 35
< 
< ----------------------------------------------------------------------
< BlockClosure>>ensure:
< Receiver:
< 	a BlockClosure
< Instance Variables:
< 	method = CompiledBlock [] in MenuBarButtonController>>menuBarActionForMenu:
< 	outerContext = nil
< 	copiedValues = an Array[2]
< Arguments:
< 	aBlock = BlockClosure [] in MenuBarButtonController>>menuBarActionForMenu:
< Temporaries:
< 	result = nil
< Context PC = 4
< 
< ----------------------------------------------------------------------
< MenuBarButtonController>>menuBarActionForMenu:
< Receiver:
< 	a MenuBarButtonController
< Instance Variables:
< 	model = nil
< 	view = a MotifMenuBarButtonView
< 	sensor = a TranslatingSensor
< Arguments:
< 	aMenu = a Menu
< Temporaries:
< 	performer = a VisualLauncher
< Context PC = 31
< 
< ----------------------------------------------------------------------
< MenuBarButtonController>>menuBarAction
< Receiver:
< 	a MenuBarButtonController
< Instance Variables:
< 	model = nil
< 	view = a MotifMenuBarButtonView
< 	sensor = a TranslatingSensor
< Temporaries:
< 	theMenu = a Menu
< Context PC = 20
< 
< ----------------------------------------------------------------------
< MenuBarButtonController>>redButtonPressedEvent:
< Receiver:
< 	a MenuBarButtonController
< Instance Variables:
< 	model = nil
< 	view = a MotifMenuBarButtonView
< 	sensor = a TranslatingSensor
< Arguments:
< 	event = a RedButtonPressedEvent
< Context PC = 10
< 
< ----------------------------------------------------------------------
< RedButtonPressedEvent>>dispatchTo:
< Receiver:
< 	a RedButtonPressedEvent
< Instance Variables:
< 	time = 2486732301
< 	initiator = an EventDispatcher
< 	window = an ApplicationWindow nil
< 	state = 1
< 	x = 19
< 	y = 16
< 	gx = 154
< 	gy = 69
< 	buttonNumber = 1
< Arguments:
< 	anObject = a MenuBarButtonController
< Context PC = 4
< 
< ----------------------------------------------------------------------
< MenuBarButtonController(Controller)>>handleEvent:
< Receiver:
< 	a MenuBarButtonController
< Instance Variables:
< 	model = nil
< 	view = a MotifMenuBarButtonView
< 	sensor = a TranslatingSensor
< Arguments:
< 	event = a RedButtonPressedEvent
< Context PC = 4
< 
< ----------------------------------------------------------------------
< EventDispatcher>>dispatch:to:
< Receiver:
< 	an EventDispatcher
< Instance Variables:
< 	windowController = an ApplicationStandardSystemController
< 	currentMouseConsumer = nil
< 	grabbingMouse = false
< 	keyboardProcessor = nil
< 	lastControlObject = nil
< 	trapList = nil
< 	state = nil
< 	repairDamageWhenDebugging = true
< 	flushQueueAfterError = true
< 	distributeEventsWhenDebugging = true
< 	dragDropInProgress = false
< 	dragDropTracker = nil
< 	dispatchUnknownEvents = false
< Arguments:
< 	event = a RedButtonPressedEvent
< 	object = a MenuBarButtonController
< Temporaries:
< 	tmp = nil
< Context PC = 10
< 
< ----------------------------------------------------------------------
< EventDispatcher>>dispatchEvent:
< Receiver:
< 	an EventDispatcher
< Instance Variables:
< 	windowController = an ApplicationStandardSystemController
< 	currentMouseConsumer = nil
< 	grabbingMouse = false
< 	keyboardProcessor = nil
< 	lastControlObject = nil
< 	trapList = nil
< 	state = nil
< 	repairDamageWhenDebugging = true
< 	flushQueueAfterError = true
< 	distributeEventsWhenDebugging = true
< 	dragDropInProgress = false
< 	dragDropTracker = nil
< 	dispatchUnknownEvents = false
< Arguments:
< 	event = a RedButtonPressedEvent
< Temporaries:
< 	objectWantingControl = a MenuBarButtonController
< 	targetKeyboardProcessor = nil
< Context PC = 113
< 
< ----------------------------------------------------------------------
< RedButtonPressedEvent(Event)>>dispatch
< Receiver:
< 	a RedButtonPressedEvent
< Instance Variables:
< 	time = 2486732301
< 	initiator = an EventDispatcher
< 	window = an ApplicationWindow nil
< 	state = 1
< 	x = 19
< 	y = 16
< 	gx = 154
< 	gy = 69
< 	buttonNumber = 1
< Context PC = 16
< 
< ----------------------------------------------------------------------
< RedButtonPressedEvent(Event)>>dispatchForWindowManager:
< Receiver:
< 	a RedButtonPressedEvent
< Instance Variables:
< 	time = 2486732301
< 	initiator = an EventDispatcher
< 	window = an ApplicationWindow nil
< 	state = 1
< 	x = 19
< 	y = 16
< 	gx = 154
< 	gy = 69
< 	buttonNumber = 1
< Arguments:
< 	aWinMgr = a WindowManager
< Context PC = 4
< 
< ----------------------------------------------------------------------
< optimized [] in WindowManager>>safelyDispatchForWindowManager:
< Receiver:
< 	an UndefinedObject
< Temporaries:
< 	.event = a RedButtonPressedEvent
< 	.self = a WindowManager
< Context PC = 6
< 
< ----------------------------------------------------------------------
< BlockClosure>>on:do:
< Receiver:
< 	a BlockClosure
< Instance Variables:
< 	method = CompiledBlock [] in WindowManager>>safelyDispatchForWindowManager:
< 	outerContext = nil
< 	copiedValues = an Array[2]
< Arguments:
< 	anExceptionSelector = BadControllerError
< 	handlerBlock = BlockClosure [] in WindowManager>>safelyDispatchForWindowManager:
< Context PC = 18
< 
< ----------------------------------------------------------------------
< WindowManager>>safelyDispatchForWindowManager:
< Receiver:
< 	a WindowManager
< Instance Variables:
< 	windows = an OrderedCollection[1]
< 	activeController = nil
< 	interruptLock = false
< 	outstandingMetaOrDamage = false
< 	openInProgress = false
< 	eventQueue = an EventQueue
< 	baseProcess = a Process in nil
< 	dontFilterEvents = false
< Arguments:
< 	event = a RedButtonPressedEvent
< Context PC = 13
< 
< ----------------------------------------------------------------------
< WindowManager>>processNextEvent
< Receiver:
< 	a WindowManager
< Instance Variables:
< 	windows = an OrderedCollection[1]
< 	activeController = nil
< 	interruptLock = false
< 	outstandingMetaOrDamage = false
< 	openInProgress = false
< 	eventQueue = an EventQueue
< 	baseProcess = a Process in nil
< 	dontFilterEvents = false
< Temporaries:
< 	event = a RedButtonPressedEvent
< Context PC = 9
< 
< ----------------------------------------------------------------------
< optimized [] in [] in WindowManager>>newProcess
< Receiver:
< 	an UndefinedObject
< Temporaries:
< 	.self = a WindowManager
< Context PC = 13
< 
< ----------------------------------------------------------------------
< BlockClosure>>on:do:
< Receiver:
< 	a BlockClosure
< Instance Variables:
< 	method = CompiledBlock [] in [] in WindowManager>>newProcess
< 	outerContext = nil
< 	copiedValues = a WindowManager
< Arguments:
< 	anExceptionSelector = TerminateException
< 	handlerBlock = BlockClosure [] in [] in WindowManager>>newProcess
< Context PC = 18
< 
< ----------------------------------------------------------------------
< optimized [] in WindowManager>>newProcess
< Receiver:
< 	an UndefinedObject
< Temporaries:
< 	.self = a WindowManager
< Context PC = 15
< 
< ----------------------------------------------------------------------
< BlockClosure>>on:do:
< Receiver:
< 	a BlockClosure
< Instance Variables:
< 	method = CompiledBlock [] in WindowManager>>newProcess
< 	outerContext = nil
< 	copiedValues = a WindowManager
< Arguments:
< 	anExceptionSelector = TerminateException
< 	handlerBlock = BlockClosure [] in [] in Process class>>forBlock:priority:
< Context PC = 18
< 
< ----------------------------------------------------------------------
< optimized [] in Process class>>forBlock:priority:
< Receiver:
< 	an UndefinedObject
< Temporaries:
< 	.aBlock = BlockClosure [] in WindowManager>>newProcess
< Context PC = 9
---
> 893	GGTATTTTAATTTATAGT

(TRUNCATED) PROGRAM OUTPUT:
A 30.295
T 30.151
C 19.800
G 19.754

AA 9.177
TA 9.132
AT 9.131
TT 9.091
CA 6.002
AC 6.001
AG 5.987
GA 5.984
CT 5.971
TC 5.971
GT 5.957
TG 5.956
CC 3.917
GC 3.911
CG 3.909
GG 3.902

1471758	GGT
446535	GGTA
47336	GGTATT
893	GGTATTTTAATT
Unhandled exception: No space available to allocate this object

----------------------------------------------------------------------
Dictionary class(Behavior)>>newNoRetry:
Receiver:
	a Dictionary class
Instance Variables:
	superclass = Set
	methodDict = a MethodDictionary[72]
	format = 20481
	subclasses = an Array[4]
	instanceVariables = nil
	organization = ('accessing' #associationAt: #associationAt:ifAbsent: #associations #at: #at:ifAbsent: #at:ifAbsentPut: #at:ifPresent: #at:put: #bindingFor: #bindingFor:modifiers: #createKey:value: #findElementLike:ifAbsent: #keyAtValue: #keyAtValue:ifAbsent: #keys #localBindingFor: #localBindingNames #localBindings #oldBindingFor: #poolDefinitionClass #protectedBindingFor:modifiers: #values)
('testing' #includes: #isLikeNameSpace #occurrencesOf:)
('adding' #add: #addAll: #declare:from: #glorpAddAll:)
('removing' #remove: #remove:ifAbsent:)
('enumerating' #collect: #do: #groupedBy: #keysAndValuesDo: #select:)
('printing' #printOn: #storeOn:)
('dictionary testing' #contentsEquals: #includesKey:)
('dictionary removing' #removeKey: #removeKey:ifAbsent:)
('dictionary enumerating' #associationsDo: #bindingsDo: #keysDo: #localNamesAndBindingsDo: #namesAndBindingsDo: #namesAndBindingsDo:modifiers: #protectedNamesAndBindingsDo:modifiers:)
('user interface' #inspectorClass #inspectorClasses)
('tracing' #traceWalkFrom:)
('binary storage' #readGeneralStructureOn: #representBinaryOn: #storeGeneralStructureOn:)
('copying' #copyWithCopiedValues #postCopy #postCopyWithCopiedValues)
('private' #_addAllToDictionary: #changeCapacityTo: #findKey:ifAbsent: #findKey:ifAbsentRaise: #findKeyOrNil: #fixCollisionsFrom: #keyNotFoundErrorFor:index: #noCheckAdd: #removeKeyPrivately: #valueNotFoundError:)
('private-backward compatibility' #keyNotFoundError:)
('comparing' #= #hash)
('computer language shootout' #at:putValueOf:ifAbsentPutValueOf:)

	name = #Dictionary
	classPool = a NameSpaceOfClass[0]
	environment = a NameSpace[236]
Arguments:
	anInteger = 187904819
Context PC = 15

----------------------------------------------------------------------
Dictionary class(Behavior)>>handleFailedNew:size:
Receiver:
	a Dictionary class
Instance Variables:
	superclass = Set
	methodDict = a MethodDictionary[72]
	format = 20481
	subclasses = an Array[4]
	instanceVariables = nil
	organization = ('accessing' #associationAt: #associationAt:ifAbsent: #associations #at: #at:ifAbsent: #at:ifAbsentPut: #at:ifPresent: #at:put: #bindingFor: #bindingFor:modifiers: #createKey:value: #findElementLike:ifAbsent: #keyAtValue: #keyAtValue:ifAbsent: #keys #localBindingFor: #localBindingNames #localBindings #oldBindingFor: #poolDefinitionClass #protectedBindingFor:modifiers: #values)
('testing' #includes: #isLikeNameSpace #occurrencesOf:)
('adding' #add: #addAll: #declare:from: #glorpAddAll:)
('removing' #remove: #remove:ifAbsent:)
('enumerating' #collect: #do: #groupedBy: #keysAndValuesDo: #select:)
('printing' #printOn: #storeOn:)
('dictionary testing' #contentsEquals: #includesKey:)
('dictionary removing' #removeKey: #removeKey:ifAbsent:)
('dictionary enumerating' #associationsDo: #bindingsDo: #keysDo: #localNamesAndBindingsDo: #namesAndBindingsDo: #namesAndBindingsDo:modifiers: #protectedNamesAndBindingsDo:modifiers:)
('user interface' #inspectorClass #inspectorClasses)
('tracing' #traceWalkFrom:)
('binary storage' #readGeneralStructureOn: #representBinaryOn: #storeGeneralStructureOn:)
('copying' #copyWithCopiedValues #postCopy #postCopyWithCopiedValues)
('private' #_addAllToDictionary: #changeCapacityTo: #findKey:ifAbsent: #findKey:ifAbsentRaise: #findKeyOrNil: #fixCollisionsFrom: #keyNotFoundErrorFor:index: #noCheckAdd: #removeKeyPrivately: #valueNotFoundError:)
('private-backward compatibility' #keyNotFoundError:)
('comparing' #= #hash)
('computer language shootout' #at:putValueOf:ifAbsentPutValueOf:)

	name = #Dictionary
	classPool = a NameSpaceOfClass[0]
	environment = a NameSpace[236]
Arguments:
	error = a SystemError(#'allocation failed',1503238560)
	newSize = 187904819
Context PC = 29

----------------------------------------------------------------------
Dictionary class(Behavior)>>new:
Receiver:
	a Dictionary class
Instance Variables:
	superclass = Set
	methodDict = a MethodDictionary[72]
	format = 20481
	subclasses = an Array[4]
	instanceVariables = nil
	organization = ('accessing' #associationAt: #associationAt:ifAbsent: #associations #at: #at:ifAbsent: #at:ifAbsentPut: #at:ifPresent: #at:put: #bindingFor: #bindingFor:modifiers: #createKey:value: #findElementLike:ifAbsent: #keyAtValue: #keyAtValue:ifAbsent: #keys #localBindingFor: #localBindingNames #localBindings #oldBindingFor: #poolDefinitionClass #protectedBindingFor:modifiers: #values)
('testing' #includes: #isLikeNameSpace #occurrencesOf:)
('adding' #add: #addAll: #declare:from: #glorpAddAll:)
('removing' #remove: #remove:ifAbsent:)
('enumerating' #collect: #do: #groupedBy: #keysAndValuesDo: #select:)
('printing' #printOn: #storeOn:)
('dictionary testing' #contentsEquals: #includesKey:)
('dictionary removing' #removeKey: #removeKey:ifAbsent:)
('dictionary enumerating' #associationsDo: #bindingsDo: #keysDo: #localNamesAndBindingsDo: #namesAndBindingsDo: #namesAndBindingsDo:modifiers: #protectedNamesAndBindingsDo:modifiers:)
('user interface' #inspectorClass #inspectorClasses)
('tracing' #traceWalkFrom:)
('binary storage' #readGeneralStructureOn: #representBinaryOn: #storeGeneralStructureOn:)
('copying' #copyWithCopiedValues #postCopy #postCopyWithCopiedValues)
('private' #_addAllToDictionary: #changeCapacityTo: #findKey:ifAbsent: #findKey:ifAbsentRaise: #findKeyOrNil: #fixCollisionsFrom: #keyNotFoundErrorFor:index: #noCheckAdd: #removeKeyPrivately: #valueNotFoundError:)
('private-backward compatibility' #keyNotFoundError:)
('comparing' #= #hash)
('computer language shootout' #at:putValueOf:ifAbsentPutValueOf:)

	name = #Dictionary
	classPool = a NameSpaceOfClass[0]
	environment = a NameSpace[236]
Arguments:
	anInteger = 187904819
Temporaries:
	error = a SystemError(#'allocation failed',1503238560)
Context PC = 11

----------------------------------------------------------------------
Dictionary class(Set class)>>new:
Receiver:
	a Dictionary class
Instance Variables:
	superclass = Set
	methodDict = a MethodDictionary[72]
	format = 20481
	subclasses = an Array[4]
	instanceVariables = nil
	organization = ('accessing' #associationAt: #associationAt:ifAbsent: #associations #at: #at:ifAbsent: #at:ifAbsentPut: #at:ifPresent: #at:put: #bindingFor: #bindingFor:modifiers: #createKey:value: #findElementLike:ifAbsent: #keyAtValue: #keyAtValue:ifAbsent: #keys #localBindingFor: #localBindingNames #localBindings #oldBindingFor: #poolDefinitionClass #protectedBindingFor:modifiers: #values)
('testing' #includes: #isLikeNameSpace #occurrencesOf:)
('adding' #add: #addAll: #declare:from: #glorpAddAll:)
('removing' #remove: #remove:ifAbsent:)
('enumerating' #collect: #do: #groupedBy: #keysAndValuesDo: #select:)
('printing' #printOn: #storeOn:)
('dictionary testing' #contentsEquals: #includesKey:)
('dictionary removing' #removeKey: #removeKey:ifAbsent:)
('dictionary enumerating' #associationsDo: #bindingsDo: #keysDo: #localNamesAndBindingsDo: #namesAndBindingsDo: #namesAndBindingsDo:modifiers: #protectedNamesAndBindingsDo:modifiers:)
('user interface' #inspectorClass #inspectorClasses)
('tracing' #traceWalkFrom:)
('binary storage' #readGeneralStructureOn: #representBinaryOn: #storeGeneralStructureOn:)
('copying' #copyWithCopiedValues #postCopy #postCopyWithCopiedValues)
('private' #_addAllToDictionary: #changeCapacityTo: #findKey:ifAbsent: #findKey:ifAbsentRaise: #findKeyOrNil: #fixCollisionsFrom: #keyNotFoundErrorFor:index: #noCheckAdd: #removeKeyPrivately: #valueNotFoundError:)
('private-backward compatibility' #keyNotFoundError:)
('comparing' #= #hash)
('computer language shootout' #at:putValueOf:ifAbsentPutValueOf:)

	name = #Dictionary
	classPool = a NameSpaceOfClass[0]
	environment = a NameSpace[236]
Arguments:
	anInteger = 187500000
Context PC = 21

----------------------------------------------------------------------
optimized [] in Tests class>>knucleotide3bFrom:to:
Receiver:
	an UndefinedObject
Arguments:
	nucleotideFragment = 'GGTATTTTAATTTATAGT'
Temporaries:
	frequencies = nil
	count = nil
	.sequence = 'CCCATAACTACAATAGTCGGCAATCTTTT...CTTGTTTGATTCCCCTGTATCTTAATTC'
	.output = a StandardIOStream
Context PC = 23

----------------------------------------------------------------------
Tests class>>knucleotide3bFrom:to:
Receiver:
	a Tests class
Instance Variables:
	superclass = Object
	methodDict = a MethodDictionary[0]
	format = 16384
	subclasses = nil
	instanceVariables = nil
	organization = 
	name = #Tests
	classPool = a NameSpaceOfClass[0]
	environment = nil
Arguments:
	input = an ExternalReadStream
	output = a StandardIOStream
Temporaries:
	sequence = 'CCCATAACTACAATAGTCGGCAATCTTTT...CTTGTTTGATTCCCCTGTATCTTAATTC'
	writeFrequencies = BlockClosure [] in Tests class>>knucleotide3bFrom:to:
	writeCount = BlockClosure [] in Tests class>>knucleotide3bFrom:to:
Context PC = 52

----------------------------------------------------------------------
Tests class>>knucleotide
Receiver:
	a Tests class
Instance Variables:
	superclass = Object
	methodDict = a MethodDictionary[0]
	format = 16384
	subclasses = nil
	instanceVariables = nil
	organization = 
	name = #Tests
	classPool = a NameSpaceOfClass[0]
	environment = nil
Context PC = 10

----------------------------------------------------------------------
UndefinedObject>>unboundMethod
Receiver:
	an UndefinedObject
Context PC = 3

----------------------------------------------------------------------
UndefinedObject(Object)>>performMethod:arguments:
Receiver:
	an UndefinedObject
Arguments:
	method = AnnotatedMethod UndefinedObject>>unboundMethod
	args = an Array[0]
Context PC = 5

----------------------------------------------------------------------
UndefinedObject(Object)>>performMethod:
Receiver:
	an UndefinedObject
Arguments: