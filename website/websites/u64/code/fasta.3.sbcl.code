<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;</span>
<span class="hl slc">;; Contributed by Lorenzo Bolla</span>

<span class="hl sym">(</span>declaim <span class="hl sym">(</span>optimize <span class="hl sym">(</span>speed <span class="hl num">3</span><span class="hl sym">) (</span>debug <span class="hl num">0</span><span class="hl sym">) (</span>safety <span class="hl num">0</span><span class="hl sym">)))</span>

<span class="hl sym">(</span>declaim <span class="hl sym">(</span>fixnum <span class="hl sym">+</span>line<span class="hl sym">-</span>length<span class="hl sym">+ +</span>buffer<span class="hl sym">-</span>size<span class="hl sym">+ +</span>im<span class="hl sym">+))</span>
<span class="hl sym">(</span>defconstant <span class="hl sym">+</span>line<span class="hl sym">-</span>length<span class="hl sym">+</span> <span class="hl num">60</span><span class="hl sym">)</span>
<span class="hl sym">(</span>defconstant <span class="hl sym">+</span>buffer<span class="hl sym">-</span>size<span class="hl sym">+</span> <span class="hl num">3000</span><span class="hl sym">)</span>
<span class="hl sym">(</span>defconstant <span class="hl sym">+</span>im<span class="hl sym">+</span> <span class="hl num">139968</span><span class="hl sym">)</span>

<span class="hl sym">(</span>declaim <span class="hl sym">(</span>simple<span class="hl sym">-</span>base<span class="hl sym">-</span>string <span class="hl sym">*</span>alu<span class="hl sym">*))</span>
<span class="hl sym">(</span>defparameter <span class="hl sym">*</span>alu<span class="hl sym">* (</span>concatenate <span class="hl sym">'</span>simple<span class="hl sym">-</span>base<span class="hl sym">-</span>string
						<span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>
						<span class="hl str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>
						<span class="hl str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>
						<span class="hl str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>
						<span class="hl str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>
						<span class="hl str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>
						<span class="hl str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="hl sym">))</span>

<span class="hl sym">(</span>defun cumsum <span class="hl sym">(</span>lst<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>c <span class="hl num">0.0</span><span class="hl sym">))</span>
	<span class="hl sym">(</span>declare <span class="hl sym">(</span>type single<span class="hl sym">-</span>float c<span class="hl sym">))</span>
	<span class="hl sym">(</span>mapcar #<span class="hl sym">'(</span>lambda <span class="hl sym">(</span>x<span class="hl sym">)</span> 
				<span class="hl sym">(</span>declare <span class="hl sym">(</span>type single<span class="hl sym">-</span>float x<span class="hl sym">)</span>
						 <span class="hl sym">(</span>values fixnum<span class="hl sym">))</span>
				<span class="hl sym">(</span>the fixnum <span class="hl sym">(</span>ceiling <span class="hl sym">(* +</span>im<span class="hl sym">+ (</span>incf c x<span class="hl sym">)))))</span>
			lst<span class="hl sym">)))</span>

<span class="hl sym">(</span>defun make<span class="hl sym">-</span>cprob <span class="hl sym">(</span>probs<span class="hl sym">)</span>
  <span class="hl sym">(</span>make<span class="hl sym">-</span>array <span class="hl sym">(</span>length probs<span class="hl sym">)</span>
			   <span class="hl sym">:</span>element<span class="hl sym">-</span>type <span class="hl sym">'</span>fixnum
			   <span class="hl sym">:</span>initial<span class="hl sym">-</span>contents <span class="hl sym">(</span>cumsum probs<span class="hl sym">)))</span>

<span class="hl sym">(</span>defparameter <span class="hl sym">*</span>amino<span class="hl sym">-</span>acids<span class="hl sym">-</span>syms<span class="hl sym">*</span> <span class="hl str">&quot;acgtBDHKMNRSVWY&quot;</span><span class="hl sym">)</span>
<span class="hl sym">(</span>defparameter <span class="hl sym">*</span>amino<span class="hl sym">-</span>acids<span class="hl sym">-</span>cprobs<span class="hl sym">*</span> 
  <span class="hl sym">(</span>make<span class="hl sym">-</span>cprob <span class="hl sym">'(</span><span class="hl num">0.27 0.12 0.12 0.27 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02</span><span class="hl sym">)))</span>

<span class="hl sym">(</span>defparameter <span class="hl sym">*</span>homo<span class="hl sym">-</span>sapiens<span class="hl sym">-</span>syms<span class="hl sym">*</span> <span class="hl str">&quot;acgt&quot;</span><span class="hl sym">)</span>
<span class="hl sym">(</span>defparameter <span class="hl sym">*</span>homo<span class="hl sym">-</span>sapiens<span class="hl sym">-</span>cprobs<span class="hl sym">*</span> 
  <span class="hl sym">(</span>make<span class="hl sym">-</span>cprob <span class="hl sym">'(</span><span class="hl num">0.3029549426680 0.1979883004921 0.1975473066391 0.3015094502008</span><span class="hl sym">)))</span>

<span class="hl sym">(</span>let <span class="hl sym">((</span>r <span class="hl num">42</span><span class="hl sym">)</span>
	  <span class="hl sym">(</span>ia <span class="hl num">3877</span><span class="hl sym">)</span>
	  <span class="hl sym">(</span>ic <span class="hl num">29573</span><span class="hl sym">))</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>type fixnum r ia ic<span class="hl sym">))</span>
  <span class="hl sym">(</span>defun reset<span class="hl sym">-</span>random <span class="hl sym">() (</span>setf r <span class="hl sym">(</span>the fixnum <span class="hl num">42</span><span class="hl sym">)))</span>
  <span class="hl sym">(</span>declaim <span class="hl sym">(</span>inline next<span class="hl sym">-</span>random<span class="hl sym">))</span>
  <span class="hl sym">(</span>defun next<span class="hl sym">-</span>random <span class="hl sym">()</span>
	<span class="hl sym">(</span>declare <span class="hl sym">(</span>values fixnum<span class="hl sym">))</span>
	<span class="hl sym">(</span>setf r <span class="hl sym">(</span>mod <span class="hl sym">(+ (</span>the <span class="hl sym">(</span>integer <span class="hl num">0 542655936</span><span class="hl sym">) (*</span> r ia<span class="hl sym">))</span> ic<span class="hl sym">) +</span>im<span class="hl sym">+))))</span>

<span class="hl sym">(</span>defun find<span class="hl sym">-</span>amino<span class="hl sym">-</span>acid <span class="hl sym">(</span>amino<span class="hl sym">-</span>acids<span class="hl sym">-</span>syms amino<span class="hl sym">-</span>acids<span class="hl sym">-</span>cprobs p<span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>type <span class="hl sym">(</span>simple<span class="hl sym">-</span>array fixnum <span class="hl sym">(*))</span> amino<span class="hl sym">-</span>acids<span class="hl sym">-</span>cprobs<span class="hl sym">)</span>
		   <span class="hl sym">(</span>type simple<span class="hl sym">-</span>string amino<span class="hl sym">-</span>acids<span class="hl sym">-</span>syms<span class="hl sym">)</span>
		   <span class="hl sym">(</span>type fixnum p<span class="hl sym">))</span>
  <span class="hl sym">(</span>let<span class="hl sym">* ((</span>i <span class="hl num">0</span><span class="hl sym">)</span>
		 <span class="hl sym">(</span>j <span class="hl sym">(</span>length amino<span class="hl sym">-</span>acids<span class="hl sym">-</span>syms<span class="hl sym">)))</span>
	<span class="hl sym">(</span>declare <span class="hl sym">(</span>type fixnum i j<span class="hl sym">))</span>
	<span class="hl sym">(</span>loop
	  <span class="hl sym">(</span>when <span class="hl sym">(&lt;=</span> j i<span class="hl sym">)</span> 
		<span class="hl sym">(</span>return <span class="hl sym">(</span>aref amino<span class="hl sym">-</span>acids<span class="hl sym">-</span>syms i<span class="hl sym">)))</span>
	  <span class="hl sym">(</span>let<span class="hl sym">* ((</span>mid <span class="hl sym">(</span>ash <span class="hl sym">(+</span> i j<span class="hl sym">) -</span><span class="hl num">1</span><span class="hl sym">))</span>
			 <span class="hl sym">(</span>c <span class="hl sym">(</span>aref amino<span class="hl sym">-</span>acids<span class="hl sym">-</span>cprobs mid<span class="hl sym">)))</span>
		<span class="hl sym">(</span>cond <span class="hl sym">((&lt;</span> p c<span class="hl sym">)</span>
			   <span class="hl sym">(</span>setf j mid<span class="hl sym">))</span>
			  <span class="hl sym">(</span>t
				<span class="hl sym">(</span>setf i <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">+</span> mid<span class="hl sym">))))))))</span>

<span class="hl sym">(</span>declaim <span class="hl sym">(</span>inline output<span class="hl sym">-</span>line flush<span class="hl sym">))</span>
<span class="hl sym">(</span>defun output<span class="hl sym">-</span>line <span class="hl sym">(</span>line <span class="hl sym">&amp;</span>key <span class="hl sym">(</span>start <span class="hl num">0</span><span class="hl sym">) (</span>end nil<span class="hl sym">))</span>
  <span class="hl sym">(</span>write<span class="hl sym">-</span>line line <span class="hl sym">*</span>standard<span class="hl sym">-</span>output<span class="hl sym">* :</span>start start <span class="hl sym">:</span>end end<span class="hl sym">))</span>
<span class="hl sym">(</span>defun flush <span class="hl sym">()</span>
  <span class="hl sym">(</span>finish<span class="hl sym">-</span>output <span class="hl sym">*</span>standard<span class="hl sym">-</span>output<span class="hl sym">*))</span>

<span class="hl sym">(</span>defun randomize <span class="hl sym">(</span>amino<span class="hl sym">-</span>acids<span class="hl sym">-</span>syms amino<span class="hl sym">-</span>acids<span class="hl sym">-</span>cprobs title n<span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>type fixnum n<span class="hl sym">))</span>
  <span class="hl sym">(</span>output<span class="hl sym">-</span>line title<span class="hl sym">)</span>
  <span class="hl sym">(</span>loop
	with buf of<span class="hl sym">-</span>type simple<span class="hl sym">-</span>base<span class="hl sym">-</span>string <span class="hl sym">= (</span>make<span class="hl sym">-</span>string <span class="hl sym">+</span>buffer<span class="hl sym">-</span>size<span class="hl sym">+ :</span>element<span class="hl sym">-</span>type <span class="hl sym">'</span>base<span class="hl sym">-</span>char<span class="hl sym">)</span>
	with i of<span class="hl sym">-</span>type fixnum <span class="hl sym">=</span> <span class="hl num">0</span>
	with max<span class="hl sym">-</span>j of<span class="hl sym">-</span>type fixnum <span class="hl sym">= (</span><span class="hl num">1</span><span class="hl sym">- +</span>buffer<span class="hl sym">-</span>size<span class="hl sym">+)</span>
	for j of<span class="hl sym">-</span>type fixnum from <span class="hl num">0</span>
	for k of<span class="hl sym">-</span>type fixnum from <span class="hl num">0</span>
	while <span class="hl sym">(&lt;</span> i n<span class="hl sym">)</span>
	if <span class="hl sym">(=</span> k <span class="hl sym">+</span>line<span class="hl sym">-</span>length<span class="hl sym">+)</span> do 
	<span class="hl sym">(</span>setf <span class="hl sym">(</span>aref buf j<span class="hl sym">)</span> #\Newline<span class="hl sym">)</span> 
	<span class="hl sym">(</span>setf k <span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
	else do 
	<span class="hl sym">(</span>incf i<span class="hl sym">)</span>
	<span class="hl sym">(</span>setf <span class="hl sym">(</span>aref buf j<span class="hl sym">)</span> 
		  <span class="hl sym">(</span>find<span class="hl sym">-</span>amino<span class="hl sym">-</span>acid amino<span class="hl sym">-</span>acids<span class="hl sym">-</span>syms amino<span class="hl sym">-</span>acids<span class="hl sym">-</span>cprobs <span class="hl sym">(</span>next<span class="hl sym">-</span>random<span class="hl sym">)))</span>
	end
	when <span class="hl sym">(=</span> j max<span class="hl sym">-</span>j<span class="hl sym">)</span> do 
	<span class="hl sym">(</span>write<span class="hl sym">-</span>string buf <span class="hl sym">*</span>standard<span class="hl sym">-</span>output<span class="hl sym">*)</span>
	<span class="hl sym">(</span>setf j <span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
	finally 
	<span class="hl sym">(</span>output<span class="hl sym">-</span>line buf <span class="hl sym">:</span>start <span class="hl num">0</span> <span class="hl sym">:</span>end j<span class="hl sym">)</span>
	<span class="hl sym">(</span>flush<span class="hl sym">)))</span>

<span class="hl sym">(</span>defun repeat <span class="hl sym">(</span>alu title n<span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>type simple<span class="hl sym">-</span>base<span class="hl sym">-</span>string alu<span class="hl sym">)</span> 
		   <span class="hl sym">(</span>type fixnum n<span class="hl sym">))</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>len <span class="hl sym">(</span>length alu<span class="hl sym">))</span>
		<span class="hl sym">(</span>buf <span class="hl sym">(</span>concatenate <span class="hl sym">'</span>simple<span class="hl sym">-</span>base<span class="hl sym">-</span>string 
						  alu 
						  <span class="hl sym">(</span>subseq alu <span class="hl num">0</span> <span class="hl sym">+</span>line<span class="hl sym">-</span>length<span class="hl sym">+))))</span>
	<span class="hl sym">(</span>declare <span class="hl sym">(</span>type fixnum len<span class="hl sym">)</span> 
			 <span class="hl sym">(</span>type simple<span class="hl sym">-</span>base<span class="hl sym">-</span>string buf<span class="hl sym">))</span>
	<span class="hl sym">(</span>output<span class="hl sym">-</span>line title<span class="hl sym">)</span>
	<span class="hl sym">(</span>do<span class="hl sym">* ((</span>pos<span class="hl sym">-</span>start <span class="hl num">0</span> <span class="hl sym">(</span>mod pos<span class="hl sym">-</span>end len<span class="hl sym">))</span>
		  <span class="hl sym">(</span>m n <span class="hl sym">(-</span> m bytes<span class="hl sym">))</span>
		  <span class="hl sym">(</span>bytes <span class="hl sym">(</span>min n <span class="hl sym">+</span>line<span class="hl sym">-</span>length<span class="hl sym">+) (</span>min m <span class="hl sym">+</span>line<span class="hl sym">-</span>length<span class="hl sym">+))</span>
		  <span class="hl sym">(</span>pos<span class="hl sym">-</span>end <span class="hl sym">(+</span> pos<span class="hl sym">-</span>start bytes<span class="hl sym">) (+</span> pos<span class="hl sym">-</span>start bytes<span class="hl sym">)))</span>
	  <span class="hl sym">((&lt;=</span> m <span class="hl num">0</span><span class="hl sym">) (</span>flush<span class="hl sym">))</span>
	  <span class="hl sym">(</span>declare <span class="hl sym">(</span>type fixnum pos<span class="hl sym">-</span>start pos<span class="hl sym">-</span>end m bytes<span class="hl sym">))</span>
	  <span class="hl sym">(</span>output<span class="hl sym">-</span>line buf <span class="hl sym">:</span>start pos<span class="hl sym">-</span>start <span class="hl sym">:</span>end pos<span class="hl sym">-</span>end<span class="hl sym">))))</span>

<span class="hl sym">(</span>defun main <span class="hl sym">(&amp;</span>optional in<span class="hl sym">-</span>n<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>n <span class="hl sym">(</span>or in<span class="hl sym">-</span>n
			   <span class="hl sym">(</span>ignore<span class="hl sym">-</span>errors
				 <span class="hl sym">(</span>parse<span class="hl sym">-</span>integer <span class="hl sym">(</span>car <span class="hl sym">(</span>last #<span class="hl sym">+</span>sbcl sb<span class="hl sym">-</span>ext<span class="hl sym">:*</span>posix<span class="hl sym">-</span>argv<span class="hl sym">*</span>
										   #<span class="hl sym">+</span>cmu  extensions<span class="hl sym">:*</span>command<span class="hl sym">-</span>line<span class="hl sym">-</span>strings<span class="hl sym">*</span>
										   #<span class="hl sym">+</span>gcl  si<span class="hl sym">::*</span>command<span class="hl sym">-</span>args<span class="hl sym">*</span>
										   #<span class="hl sym">+</span>clisp nil<span class="hl sym">))))</span>
			   <span class="hl num">1000</span><span class="hl sym">)))</span>
	<span class="hl sym">(</span>declare <span class="hl sym">(</span>fixnum n<span class="hl sym">))</span>
	<span class="hl sym">(</span>reset<span class="hl sym">-</span>random<span class="hl sym">)</span>
	<span class="hl sym">(</span>repeat <span class="hl sym">*</span>alu<span class="hl sym">*</span> <span class="hl str">&quot;&gt;ONE Homo sapiens alu&quot;</span> <span class="hl sym">(</span>the fixnum <span class="hl sym">(*</span> n <span class="hl num">2</span><span class="hl sym">)))</span>
	<span class="hl sym">(</span>randomize <span class="hl sym">*</span>amino<span class="hl sym">-</span>acids<span class="hl sym">-</span>syms<span class="hl sym">* *</span>amino<span class="hl sym">-</span>acids<span class="hl sym">-</span>cprobs<span class="hl sym">*</span> <span class="hl str">&quot;&gt;TWO IUB ambiguity codes&quot;</span> <span class="hl sym">(</span>the fixnum <span class="hl sym">(*</span> n <span class="hl num">3</span><span class="hl sym">)))</span>
	<span class="hl sym">(</span>randomize <span class="hl sym">*</span>homo<span class="hl sym">-</span>sapiens<span class="hl sym">-</span>syms<span class="hl sym">* *</span>homo<span class="hl sym">-</span>sapiens<span class="hl sym">-</span>cprobs<span class="hl sym">*</span> <span class="hl str">&quot;&gt;THREE Homo sapiens frequency&quot;</span> <span class="hl sym">(</span>the fixnum <span class="hl sym">(*</span> n <span class="hl num">5</span><span class="hl sym">)))))</span>
