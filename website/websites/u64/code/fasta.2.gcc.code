<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   based on C++ program by Andrew Moon</span>
<span class="hl com">   contributed by Damien Grassart</span>
<span class="hl com">*/</span>

<span class="hl dir">#define _GNU_SOURCE</span>
<span class="hl dir">#include &lt;stdlib.h&gt;</span>
<span class="hl dir">#include &lt;stdio.h&gt;</span>
<span class="hl dir">#include &lt;string.h&gt;</span>

<span class="hl dir">#define MIN(x, y) ((x &lt; y) ? x : y)</span>
<span class="hl dir">#define LINELEN 60</span>
<span class="hl dir">#define SLOTS 4095</span>

<span class="hl kwb">struct</span> aminoacid <span class="hl sym">{</span>
   <span class="hl kwb">char</span> c<span class="hl sym">;</span>
   <span class="hl kwb">float</span> p<span class="hl sym">;</span>
<span class="hl sym">};</span>

<span class="hl kwb">static struct</span> aminoacid <span class="hl sym">*</span>lu<span class="hl sym">[</span>SLOTS <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">];</span>

<span class="hl kwb">static void</span> <span class="hl kwd">repeat_fasta</span><span class="hl sym">(</span><span class="hl kwb">const char</span> <span class="hl sym">*</span>alu<span class="hl sym">,</span> <span class="hl kwb">size_t</span> n<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwb">const size_t</span> alulen <span class="hl sym">=</span> <span class="hl kwd">strlen</span><span class="hl sym">(</span>alu<span class="hl sym">);</span>
   <span class="hl kwb">char</span> buf<span class="hl sym">[</span>alulen <span class="hl sym">+</span> LINELEN<span class="hl sym">];</span>
   <span class="hl kwb">size_t</span> pos <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> bytes<span class="hl sym">;</span>

   <span class="hl kwd">memcpy</span><span class="hl sym">(</span>buf<span class="hl sym">,</span> alu<span class="hl sym">,</span> alulen<span class="hl sym">);</span>
   <span class="hl kwd">memcpy</span><span class="hl sym">(</span>buf <span class="hl sym">+</span> alulen<span class="hl sym">,</span> alu<span class="hl sym">,</span> LINELEN<span class="hl sym">);</span>
   <span class="hl kwa">while</span> <span class="hl sym">(</span>n<span class="hl sym">) {</span>
      bytes <span class="hl sym">=</span> <span class="hl kwd">MIN</span><span class="hl sym">(</span>LINELEN<span class="hl sym">,</span> n<span class="hl sym">);</span>
      <span class="hl kwd">fwrite_unlocked</span><span class="hl sym">(</span>buf <span class="hl sym">+</span> pos<span class="hl sym">,</span> bytes<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> stdout<span class="hl sym">);</span>
      <span class="hl kwd">putchar_unlocked</span><span class="hl sym">(</span><span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">);</span>
      pos <span class="hl sym">+=</span> bytes<span class="hl sym">;</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>pos <span class="hl sym">&gt;</span> alulen<span class="hl sym">)</span>
         pos <span class="hl sym">-=</span> alulen<span class="hl sym">;</span>
      n <span class="hl sym">-=</span> bytes<span class="hl sym">;</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwb">static void</span> <span class="hl kwd">acc_probs</span><span class="hl sym">(</span><span class="hl kwb">struct</span> aminoacid <span class="hl sym">*</span>table<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwb">struct</span> aminoacid <span class="hl sym">*</span>iter <span class="hl sym">=</span> table<span class="hl sym">;</span>

   <span class="hl kwa">while</span> <span class="hl sym">((++</span>iter<span class="hl sym">)-&gt;</span>c<span class="hl sym">) {</span>
      iter<span class="hl sym">-&gt;</span>p <span class="hl sym">+= (</span>iter<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)-&gt;</span>p<span class="hl sym">;</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;=</span> SLOTS<span class="hl sym">; ++</span>i<span class="hl sym">) {</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&gt; (</span>table<span class="hl sym">-&gt;</span>p <span class="hl sym">*</span> SLOTS<span class="hl sym">))</span>
         <span class="hl sym">++</span>table<span class="hl sym">;</span>
      lu<span class="hl sym">[</span>i<span class="hl sym">] =</span> table<span class="hl sym">;</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwb">static float</span> <span class="hl kwd">rng</span><span class="hl sym">(</span><span class="hl kwb">float</span> max<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwb">const unsigned int</span> IM <span class="hl sym">=</span> <span class="hl num">139968</span><span class="hl sym">,</span> IA <span class="hl sym">=</span> <span class="hl num">3877</span><span class="hl sym">,</span> IC <span class="hl sym">=</span> <span class="hl num">29573</span><span class="hl sym">;</span>
   <span class="hl kwb">static unsigned int</span> seed <span class="hl sym">=</span> <span class="hl num">42</span><span class="hl sym">;</span>

   seed <span class="hl sym">= (</span>seed <span class="hl sym">*</span> IA <span class="hl sym">+</span> IC<span class="hl sym">) %</span> IM<span class="hl sym">;</span>
   <span class="hl kwa">return</span> max <span class="hl sym">*</span> seed <span class="hl sym">/</span> IM<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">static char</span> <span class="hl kwd">nextc</span><span class="hl sym">()</span>
<span class="hl sym">{</span>
   <span class="hl kwb">float</span> r<span class="hl sym">;</span>
   <span class="hl kwb">struct</span> aminoacid <span class="hl sym">*</span>iter<span class="hl sym">;</span>

   r <span class="hl sym">=</span> <span class="hl kwd">rng</span><span class="hl sym">(</span><span class="hl num">1.0</span>f<span class="hl sym">);</span>
   iter <span class="hl sym">=</span> lu<span class="hl sym">[(</span><span class="hl kwb">int</span><span class="hl sym">)(</span>r <span class="hl sym">*</span> SLOTS<span class="hl sym">)];</span>
   <span class="hl kwa">while</span> <span class="hl sym">(</span>iter<span class="hl sym">-&gt;</span>p <span class="hl sym">&lt;</span> r<span class="hl sym">)</span>
      <span class="hl sym">++</span>iter<span class="hl sym">;</span>
   <span class="hl kwa">return</span> iter<span class="hl sym">-&gt;</span>c<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">static void</span> <span class="hl kwd">random_fasta</span><span class="hl sym">(</span><span class="hl kwb">struct</span> aminoacid <span class="hl sym">*</span>table<span class="hl sym">,</span> <span class="hl kwb">size_t</span> n<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwb">const size_t</span> lines <span class="hl sym">=</span> n <span class="hl sym">/</span> LINELEN<span class="hl sym">;</span>
   <span class="hl kwb">const size_t</span> chars_left <span class="hl sym">=</span> n <span class="hl sym">%</span> LINELEN<span class="hl sym">;</span>
   <span class="hl kwb">size_t</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> j <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwb">char</span> <span class="hl sym">*</span>buf <span class="hl sym">=</span> <span class="hl kwd">malloc</span><span class="hl sym">(</span>n <span class="hl sym">+</span> lines<span class="hl sym">);</span>
   <span class="hl kwb">char</span> <span class="hl sym">*</span>iter <span class="hl sym">=</span> buf<span class="hl sym">;</span>

   <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> lines<span class="hl sym">; ++</span>i<span class="hl sym">) {</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span>j <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> j <span class="hl sym">&lt;</span> LINELEN<span class="hl sym">; ++</span>j<span class="hl sym">) {</span>
         <span class="hl sym">*(</span>iter<span class="hl sym">++) =</span> <span class="hl kwd">nextc</span><span class="hl sym">();</span>
      <span class="hl sym">}</span>
      <span class="hl sym">*(</span>iter<span class="hl sym">++) =</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> chars_left<span class="hl sym">; ++</span>i<span class="hl sym">)</span>
      <span class="hl sym">*(</span>iter<span class="hl sym">++) =</span> <span class="hl kwd">nextc</span><span class="hl sym">();</span>
   <span class="hl kwd">fwrite_unlocked</span><span class="hl sym">(</span>buf<span class="hl sym">,</span> n <span class="hl sym">+</span> lines<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> stdout<span class="hl sym">);</span>
   <span class="hl kwd">free</span><span class="hl sym">(</span>buf<span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">**</span>argv<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwb">const size_t</span> n <span class="hl sym">= (</span>argc <span class="hl sym">&gt;</span> <span class="hl num">1</span><span class="hl sym">)</span> ? <span class="hl kwd">atoi</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]) :</span> <span class="hl num">1000</span><span class="hl sym">;</span>
   <span class="hl kwb">const char</span> alu<span class="hl sym">[] =</span>
      <span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTG&quot;</span>
      <span class="hl str">&quot;GGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGA&quot;</span>
      <span class="hl str">&quot;GACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAA&quot;</span>
      <span class="hl str">&quot;AATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAAT&quot;</span>
      <span class="hl str">&quot;CCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAAC&quot;</span>
      <span class="hl str">&quot;CCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTG&quot;</span>
      <span class="hl str">&quot;CACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="hl sym">;</span>
   <span class="hl kwb">struct</span> aminoacid iub<span class="hl sym">[] = {</span>
      <span class="hl sym">{</span> <span class="hl str">'a'</span><span class="hl sym">,</span> <span class="hl num">0.27</span> <span class="hl sym">},</span>
      <span class="hl sym">{</span> <span class="hl str">'c'</span><span class="hl sym">,</span> <span class="hl num">0.12</span> <span class="hl sym">},</span>
      <span class="hl sym">{</span> <span class="hl str">'g'</span><span class="hl sym">,</span> <span class="hl num">0.12</span> <span class="hl sym">},</span>
      <span class="hl sym">{</span> <span class="hl str">'t'</span><span class="hl sym">,</span> <span class="hl num">0.27</span> <span class="hl sym">},</span>
      <span class="hl sym">{</span> <span class="hl str">'B'</span><span class="hl sym">,</span> <span class="hl num">0.02</span> <span class="hl sym">},</span>
      <span class="hl sym">{</span> <span class="hl str">'D'</span><span class="hl sym">,</span> <span class="hl num">0.02</span> <span class="hl sym">},</span>
      <span class="hl sym">{</span> <span class="hl str">'H'</span><span class="hl sym">,</span> <span class="hl num">0.02</span> <span class="hl sym">},</span>
      <span class="hl sym">{</span> <span class="hl str">'K'</span><span class="hl sym">,</span> <span class="hl num">0.02</span> <span class="hl sym">},</span>
      <span class="hl sym">{</span> <span class="hl str">'M'</span><span class="hl sym">,</span> <span class="hl num">0.02</span> <span class="hl sym">},</span>
      <span class="hl sym">{</span> <span class="hl str">'N'</span><span class="hl sym">,</span> <span class="hl num">0.02</span> <span class="hl sym">},</span>
      <span class="hl sym">{</span> <span class="hl str">'R'</span><span class="hl sym">,</span> <span class="hl num">0.02</span> <span class="hl sym">},</span>
      <span class="hl sym">{</span> <span class="hl str">'S'</span><span class="hl sym">,</span> <span class="hl num">0.02</span> <span class="hl sym">},</span>
      <span class="hl sym">{</span> <span class="hl str">'V'</span><span class="hl sym">,</span> <span class="hl num">0.02</span> <span class="hl sym">},</span>
      <span class="hl sym">{</span> <span class="hl str">'W'</span><span class="hl sym">,</span> <span class="hl num">0.02</span> <span class="hl sym">},</span>
      <span class="hl sym">{</span> <span class="hl str">'Y'</span><span class="hl sym">,</span> <span class="hl num">0.02</span> <span class="hl sym">},</span>
      <span class="hl sym">{</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span> <span class="hl sym">}</span>
   <span class="hl sym">};</span>
   <span class="hl kwb">struct</span> aminoacid homosapiens<span class="hl sym">[] = {</span>
      <span class="hl sym">{</span> <span class="hl str">'a'</span><span class="hl sym">,</span> <span class="hl num">0.3029549426680</span> <span class="hl sym">},</span>
      <span class="hl sym">{</span> <span class="hl str">'c'</span><span class="hl sym">,</span> <span class="hl num">0.1979883004921</span> <span class="hl sym">},</span>
      <span class="hl sym">{</span> <span class="hl str">'g'</span><span class="hl sym">,</span> <span class="hl num">0.1975473066391</span> <span class="hl sym">},</span>
      <span class="hl sym">{</span> <span class="hl str">'t'</span><span class="hl sym">,</span> <span class="hl num">0.3015094502008</span> <span class="hl sym">},</span>
      <span class="hl sym">{</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span> <span class="hl sym">}</span>
   <span class="hl sym">};</span>

   <span class="hl kwd">fputs_unlocked</span><span class="hl sym">(</span><span class="hl str">&quot;&gt;ONE Homo sapiens alu</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> stdout<span class="hl sym">);</span>
   <span class="hl kwd">repeat_fasta</span><span class="hl sym">(</span>alu<span class="hl sym">,</span> n <span class="hl sym">*</span> <span class="hl num">2</span><span class="hl sym">);</span>
   <span class="hl kwd">fputs_unlocked</span><span class="hl sym">(</span><span class="hl str">&quot;&gt;TWO IUB ambiguity codes</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> stdout<span class="hl sym">);</span>
   <span class="hl kwd">acc_probs</span><span class="hl sym">(</span>iub<span class="hl sym">);</span>
   <span class="hl kwd">random_fasta</span><span class="hl sym">(</span>iub<span class="hl sym">,</span> n <span class="hl sym">*</span> <span class="hl num">3</span><span class="hl sym">);</span>
   <span class="hl kwd">fputs_unlocked</span><span class="hl sym">(</span><span class="hl str">&quot;&gt;THREE Homo sapiens frequency</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> stdout<span class="hl sym">);</span>
   <span class="hl kwd">acc_probs</span><span class="hl sym">(</span>homosapiens<span class="hl sym">);</span>
   <span class="hl kwd">random_fasta</span><span class="hl sym">(</span>homosapiens<span class="hl sym">,</span> n <span class="hl sym">*</span> <span class="hl num">5</span><span class="hl sym">);</span>
   <span class="hl kwd">putchar_unlocked</span><span class="hl sym">(</span><span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">);</span>

   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>
