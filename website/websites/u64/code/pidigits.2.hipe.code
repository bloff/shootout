<span class="hl slc">%% The Computer Language Benchmarks Game</span>
<span class="hl slc">%% http://shootout.alioth.debian.org/</span>
<span class="hl slc">%%</span>
<span class="hl slc">%% Contributed by : Alkis Gotovos 10 Oct 2010</span>

<span class="hl sym">-</span>module<span class="hl sym">(</span>pidigits<span class="hl sym">).</span>

<span class="hl sym">-</span>compile<span class="hl sym">([</span>native<span class="hl sym">, {</span>hipe<span class="hl sym">, [</span>o3<span class="hl sym">]}]).</span>

<span class="hl sym">-</span>export<span class="hl sym">([</span>main<span class="hl sym">/</span><span class="hl num">1</span><span class="hl sym">]).</span>

main<span class="hl sym">(</span>N<span class="hl sym">)</span> when is_integer<span class="hl sym">(</span>N<span class="hl sym">) -&gt;</span>
    Pid <span class="hl sym">=</span> spawn_link<span class="hl sym">(</span>fun<span class="hl sym">() -&gt;</span> io_worker<span class="hl sym">()</span> end<span class="hl sym">),</span>
    register<span class="hl sym">(</span>io_worker<span class="hl sym">,</span> Pid<span class="hl sym">),</span>
    stream<span class="hl sym">({</span><span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">},</span> <span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> N<span class="hl sym">);</span>
main<span class="hl sym">([</span>N<span class="hl sym">]) -&gt;</span> main<span class="hl sym">(</span>list_to_integer<span class="hl sym">(</span>N<span class="hl sym">)).</span>
    
comp<span class="hl sym">({</span>Q<span class="hl sym">,</span> R<span class="hl sym">,</span> T<span class="hl sym">}, {</span>U<span class="hl sym">,</span> V<span class="hl sym">,</span> X<span class="hl sym">}) -&gt; {</span>Q<span class="hl sym">*</span>U<span class="hl sym">,</span> Q<span class="hl sym">*</span>V <span class="hl sym">+</span> R<span class="hl sym">*</span>X<span class="hl sym">,</span> T<span class="hl sym">*</span>X<span class="hl sym">}.</span>

next<span class="hl sym">({</span>Q<span class="hl sym">,</span> R<span class="hl sym">,</span> T<span class="hl sym">}) -&gt; (</span>Q<span class="hl sym">*</span><span class="hl num">3</span> <span class="hl sym">+</span> R<span class="hl sym">)</span> div T<span class="hl sym">.</span>

safe<span class="hl sym">({</span>Q<span class="hl sym">,</span> R<span class="hl sym">,</span> T<span class="hl sym">},</span> N<span class="hl sym">) -&gt;</span> N <span class="hl sym">== (</span>Q<span class="hl sym">*</span><span class="hl num">4</span> <span class="hl sym">+</span> R<span class="hl sym">)</span> div T<span class="hl sym">.</span>

prod<span class="hl sym">({</span>Z11<span class="hl sym">,</span> Z12<span class="hl sym">,</span> Z22<span class="hl sym">},</span> N<span class="hl sym">) -&gt; {</span><span class="hl num">10</span><span class="hl sym">*</span>Z11<span class="hl sym">,</span> <span class="hl num">10</span><span class="hl sym">*(</span>Z12 <span class="hl sym">-</span> N<span class="hl sym">*</span>Z22<span class="hl sym">),</span> Z22<span class="hl sym">}.</span>

stream<span class="hl sym">(</span>Z<span class="hl sym">,</span> K<span class="hl sym">,</span> P<span class="hl sym">,</span> N<span class="hl sym">) -&gt;</span>
    Y <span class="hl sym">=</span> next<span class="hl sym">(</span>Z<span class="hl sym">),</span>
    case safe<span class="hl sym">(</span>Z<span class="hl sym">,</span> Y<span class="hl sym">)</span> of
	true <span class="hl sym">-&gt;</span>
	    io_worker <span class="hl sym">! {</span>Y<span class="hl sym">,</span> P <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span> N<span class="hl sym">},</span>
	    stream<span class="hl sym">(</span>prod<span class="hl sym">(</span>Z<span class="hl sym">,</span> Y<span class="hl sym">),</span> K<span class="hl sym">,</span> P <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span> N<span class="hl sym">);</span>
	false <span class="hl sym">-&gt;</span> stream<span class="hl sym">(</span>comp<span class="hl sym">(</span>Z<span class="hl sym">, {</span>K<span class="hl sym">,</span> <span class="hl num">4</span><span class="hl sym">*</span>K <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">*</span>K <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">}),</span> K <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span> P<span class="hl sym">,</span> N<span class="hl sym">)</span>
    end<span class="hl sym">.</span>

io_worker<span class="hl sym">() -&gt;</span>
    receive
	<span class="hl sym">{</span>Y<span class="hl sym">,</span> N<span class="hl sym">,</span> N<span class="hl sym">} -&gt;</span>
	    Spaces <span class="hl sym">= (</span><span class="hl num">10</span> <span class="hl sym">-</span> N rem <span class="hl num">10</span><span class="hl sym">)</span> rem <span class="hl num">10</span><span class="hl sym">,</span>
	    io<span class="hl sym">:</span>fwrite<span class="hl sym">(</span><span class="hl str">&quot;~w~.*c</span><span class="hl esc">\</span><span class="hl str">t:~w~n&quot;</span><span class="hl sym">, [</span>Y<span class="hl sym">,</span> Spaces<span class="hl sym">,</span> $ <span class="hl sym">,</span> N<span class="hl sym">]),</span>
	    erlang<span class="hl sym">:</span>halt<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span>
	<span class="hl sym">{</span>Y<span class="hl sym">,</span> P<span class="hl sym">,</span> _N<span class="hl sym">}</span> when P rem <span class="hl num">10</span> <span class="hl sym">==</span> <span class="hl num">0</span> <span class="hl sym">-&gt;</span>
	    io<span class="hl sym">:</span>fwrite<span class="hl sym">(</span><span class="hl str">&quot;~w</span><span class="hl esc">\</span><span class="hl str">t:~w~n&quot;</span><span class="hl sym">, [</span>Y<span class="hl sym">,</span> P<span class="hl sym">]),</span>
	    io_worker<span class="hl sym">();</span>
	<span class="hl sym">{</span>Y<span class="hl sym">,</span> _P<span class="hl sym">,</span> _N<span class="hl sym">} -&gt;</span>
	    io<span class="hl sym">:</span>fwrite<span class="hl sym">(</span><span class="hl str">&quot;~w&quot;</span><span class="hl sym">, [</span>Y<span class="hl sym">]),</span>
	    io_worker<span class="hl sym">()</span>
    end<span class="hl sym">.</span>
