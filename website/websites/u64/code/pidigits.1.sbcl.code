<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;</span>
<span class="hl slc">;; Adapted from the C (gcc) code by Lorenzo Bolla</span>

<span class="hl sym">(</span>declaim <span class="hl sym">(</span>optimize <span class="hl sym">(</span>speed <span class="hl num">3</span><span class="hl sym">) (</span>safety <span class="hl num">0</span><span class="hl sym">) (</span>debug <span class="hl num">0</span><span class="hl sym">)))</span>

<span class="hl sym">(</span>define<span class="hl sym">-</span>alien<span class="hl sym">-</span>type mp<span class="hl sym">-</span>limb<span class="hl sym">-</span>t unsigned<span class="hl sym">-</span>int<span class="hl sym">)</span>
<span class="hl sym">(</span>define<span class="hl sym">-</span>alien<span class="hl sym">-</span>type mp<span class="hl sym">-</span>bitcnt<span class="hl sym">-</span>t unsigned<span class="hl sym">-</span>long<span class="hl sym">)</span>
<span class="hl sym">(</span>define<span class="hl sym">-</span>alien<span class="hl sym">-</span>type mpz<span class="hl sym">-</span>struct
				   <span class="hl sym">(</span>struct nil
						   <span class="hl sym">(</span>mp<span class="hl sym">-</span>alloc int<span class="hl sym">)</span>
						   <span class="hl sym">(</span>mp<span class="hl sym">-</span>size int<span class="hl sym">)</span>
						   <span class="hl sym">(</span>mp<span class="hl sym">-</span>d mp<span class="hl sym">-</span>limb<span class="hl sym">-</span>t<span class="hl sym">)))</span>
<span class="hl sym">(</span>define<span class="hl sym">-</span>alien<span class="hl sym">-</span>type mpz<span class="hl sym">-</span>ptr <span class="hl sym">(*</span> mpz<span class="hl sym">-</span>struct<span class="hl sym">))</span>
<span class="hl sym">(</span>define<span class="hl sym">-</span>alien<span class="hl sym">-</span>type mpz<span class="hl sym">-</span>srcptr <span class="hl sym">(*</span> mpz<span class="hl sym">-</span>struct<span class="hl sym">))</span>

<span class="hl sym">(</span>declaim <span class="hl sym">(</span>inline mpz<span class="hl sym">-</span>init<span class="hl sym">))</span>
<span class="hl sym">(</span>define<span class="hl sym">-</span>alien<span class="hl sym">-</span>routine <span class="hl sym">(</span><span class="hl str">&quot;__gmpz_init&quot;</span> mpz<span class="hl sym">-</span>init<span class="hl sym">)</span>
					  void
					  <span class="hl sym">(</span>a mpz<span class="hl sym">-</span>ptr<span class="hl sym">))</span>

<span class="hl sym">(</span>declaim <span class="hl sym">(</span>inline mpz<span class="hl sym">-</span>init<span class="hl sym">-</span>set<span class="hl sym">-</span>ui<span class="hl sym">))</span>
<span class="hl sym">(</span>define<span class="hl sym">-</span>alien<span class="hl sym">-</span>routine <span class="hl sym">(</span><span class="hl str">&quot;__gmpz_init_set_ui&quot;</span> mpz<span class="hl sym">-</span>init<span class="hl sym">-</span>set<span class="hl sym">-</span>ui<span class="hl sym">)</span>
					  void
					  <span class="hl sym">(</span>a mpz<span class="hl sym">-</span>ptr<span class="hl sym">)</span>
					  <span class="hl sym">(</span>b unsigned<span class="hl sym">-</span>long<span class="hl sym">))</span>

<span class="hl sym">(</span>declaim <span class="hl sym">(</span>inline mpz<span class="hl sym">-</span>get<span class="hl sym">-</span>ui<span class="hl sym">))</span>
<span class="hl sym">(</span>define<span class="hl sym">-</span>alien<span class="hl sym">-</span>routine <span class="hl sym">(</span><span class="hl str">&quot;__gmpz_get_ui&quot;</span> mpz<span class="hl sym">-</span>get<span class="hl sym">-</span>ui<span class="hl sym">)</span>
					  unsigned<span class="hl sym">-</span>long
					  <span class="hl sym">(</span>a mpz<span class="hl sym">-</span>srcptr<span class="hl sym">))</span>

<span class="hl sym">(</span>declaim <span class="hl sym">(</span>inline mpz<span class="hl sym">-</span>set<span class="hl sym">-</span>ui<span class="hl sym">))</span>
<span class="hl sym">(</span>define<span class="hl sym">-</span>alien<span class="hl sym">-</span>routine <span class="hl sym">(</span><span class="hl str">&quot;__gmpz_set_ui&quot;</span> mpz<span class="hl sym">-</span>set<span class="hl sym">-</span>ui<span class="hl sym">)</span>
					  void
					  <span class="hl sym">(</span>a mpz<span class="hl sym">-</span>ptr<span class="hl sym">)</span>
					  <span class="hl sym">(</span>b unsigned<span class="hl sym">-</span>long<span class="hl sym">))</span>

<span class="hl sym">(</span>declaim <span class="hl sym">(</span>inline mpz<span class="hl sym">-</span>cmp<span class="hl sym">))</span>
<span class="hl sym">(</span>define<span class="hl sym">-</span>alien<span class="hl sym">-</span>routine <span class="hl sym">(</span><span class="hl str">&quot;__gmpz_cmp&quot;</span> mpz<span class="hl sym">-</span>cmp<span class="hl sym">)</span>
					  int
					  <span class="hl sym">(</span>a mpz<span class="hl sym">-</span>srcptr<span class="hl sym">)</span>
					  <span class="hl sym">(</span>b mpz<span class="hl sym">-</span>srcptr<span class="hl sym">))</span>

<span class="hl sym">(</span>declaim <span class="hl sym">(</span>inline mpz<span class="hl sym">-</span>add<span class="hl sym">))</span>
<span class="hl sym">(</span>define<span class="hl sym">-</span>alien<span class="hl sym">-</span>routine <span class="hl sym">(</span><span class="hl str">&quot;__gmpz_add&quot;</span> mpz<span class="hl sym">-</span>add<span class="hl sym">)</span>
					  void
					  <span class="hl sym">(</span>a mpz<span class="hl sym">-</span>ptr<span class="hl sym">)</span>
					  <span class="hl sym">(</span>b mpz<span class="hl sym">-</span>srcptr<span class="hl sym">)</span>
					  <span class="hl sym">(</span>c mpz<span class="hl sym">-</span>srcptr<span class="hl sym">))</span>

<span class="hl sym">(</span>declaim <span class="hl sym">(</span>inline mpz<span class="hl sym">-</span>mul<span class="hl sym">-</span><span class="hl num">2</span>exp<span class="hl sym">))</span>
<span class="hl sym">(</span>define<span class="hl sym">-</span>alien<span class="hl sym">-</span>routine <span class="hl sym">(</span><span class="hl str">&quot;__gmpz_mul_2exp&quot;</span> mpz<span class="hl sym">-</span>mul<span class="hl sym">-</span><span class="hl num">2</span>exp<span class="hl sym">)</span>
					  void
					  <span class="hl sym">(</span>a mpz<span class="hl sym">-</span>ptr<span class="hl sym">)</span>
					  <span class="hl sym">(</span>b mpz<span class="hl sym">-</span>srcptr<span class="hl sym">)</span>
					  <span class="hl sym">(</span>c mp<span class="hl sym">-</span>bitcnt<span class="hl sym">-</span>t<span class="hl sym">))</span>

<span class="hl sym">(</span>declaim <span class="hl sym">(</span>inline mpz<span class="hl sym">-</span>fdiv<span class="hl sym">-</span>qr<span class="hl sym">))</span>
<span class="hl sym">(</span>define<span class="hl sym">-</span>alien<span class="hl sym">-</span>routine <span class="hl sym">(</span><span class="hl str">&quot;__gmpz_fdiv_qr&quot;</span> mpz<span class="hl sym">-</span>fdiv<span class="hl sym">-</span>qr<span class="hl sym">)</span>
					  void
					  <span class="hl sym">(</span>a mpz<span class="hl sym">-</span>ptr<span class="hl sym">)</span>
					  <span class="hl sym">(</span>b mpz<span class="hl sym">-</span>ptr<span class="hl sym">)</span>
					  <span class="hl sym">(</span>c mpz<span class="hl sym">-</span>srcptr<span class="hl sym">)</span>
					  <span class="hl sym">(</span>d mpz<span class="hl sym">-</span>srcptr<span class="hl sym">))</span>

<span class="hl sym">(</span>declaim <span class="hl sym">(</span>inline mpz<span class="hl sym">-</span>mul<span class="hl sym">-</span>ui<span class="hl sym">))</span>
<span class="hl sym">(</span>define<span class="hl sym">-</span>alien<span class="hl sym">-</span>routine <span class="hl sym">(</span><span class="hl str">&quot;__gmpz_mul_ui&quot;</span> mpz<span class="hl sym">-</span>mul<span class="hl sym">-</span>ui<span class="hl sym">)</span>
					  void
					  <span class="hl sym">(</span>a mpz<span class="hl sym">-</span>ptr<span class="hl sym">)</span>
					  <span class="hl sym">(</span>b mpz<span class="hl sym">-</span>srcptr<span class="hl sym">)</span>
					  <span class="hl sym">(</span>c unsigned<span class="hl sym">-</span>long<span class="hl sym">))</span>

<span class="hl sym">(</span>declaim <span class="hl sym">(</span>inline mpz<span class="hl sym">-</span>submul<span class="hl sym">-</span>ui<span class="hl sym">))</span>
<span class="hl sym">(</span>define<span class="hl sym">-</span>alien<span class="hl sym">-</span>routine <span class="hl sym">(</span><span class="hl str">&quot;__gmpz_submul_ui&quot;</span> mpz<span class="hl sym">-</span>submul<span class="hl sym">-</span>ui<span class="hl sym">)</span>
					  void
					  <span class="hl sym">(</span>a mpz<span class="hl sym">-</span>ptr<span class="hl sym">)</span>
					  <span class="hl sym">(</span>b mpz<span class="hl sym">-</span>srcptr<span class="hl sym">)</span>
					  <span class="hl sym">(</span>c unsigned<span class="hl sym">-</span>long<span class="hl sym">))</span>

<span class="hl sym">(</span>defvar <span class="hl sym">*</span>libgmp<span class="hl sym">-</span>so<span class="hl sym">* (</span>load<span class="hl sym">-</span>shared<span class="hl sym">-</span>object <span class="hl str">&quot;libgmp.so&quot;</span><span class="hl sym">))</span>
<span class="hl sym">(</span>defvar <span class="hl sym">*</span>tmp1<span class="hl sym">*)</span>
<span class="hl sym">(</span>defvar <span class="hl sym">*</span>tmp2<span class="hl sym">*)</span>
<span class="hl sym">(</span>defvar <span class="hl sym">*</span>num<span class="hl sym">*)</span>
<span class="hl sym">(</span>defvar <span class="hl sym">*</span>acc<span class="hl sym">*)</span>
<span class="hl sym">(</span>defvar <span class="hl sym">*</span>den<span class="hl sym">*)</span>

<span class="hl sym">(</span>defun init <span class="hl sym">()</span>
  <span class="hl sym">(</span>setf <span class="hl sym">*</span>tmp1<span class="hl sym">* (</span>make<span class="hl sym">-</span>alien mpz<span class="hl sym">-</span>struct<span class="hl sym">))</span>
  <span class="hl sym">(</span>setf <span class="hl sym">*</span>tmp2<span class="hl sym">* (</span>make<span class="hl sym">-</span>alien mpz<span class="hl sym">-</span>struct<span class="hl sym">))</span>
  <span class="hl sym">(</span>setf <span class="hl sym">*</span>num<span class="hl sym">* (</span>make<span class="hl sym">-</span>alien mpz<span class="hl sym">-</span>struct<span class="hl sym">))</span>
  <span class="hl sym">(</span>setf <span class="hl sym">*</span>acc<span class="hl sym">* (</span>make<span class="hl sym">-</span>alien mpz<span class="hl sym">-</span>struct<span class="hl sym">))</span>
  <span class="hl sym">(</span>setf <span class="hl sym">*</span>den<span class="hl sym">* (</span>make<span class="hl sym">-</span>alien mpz<span class="hl sym">-</span>struct<span class="hl sym">)))</span>

<span class="hl sym">(</span>defun cleanup <span class="hl sym">()</span>
  <span class="hl sym">(</span>free<span class="hl sym">-</span>alien <span class="hl sym">*</span>tmp1<span class="hl sym">*)</span>
  <span class="hl sym">(</span>free<span class="hl sym">-</span>alien <span class="hl sym">*</span>tmp2<span class="hl sym">*)</span>
  <span class="hl sym">(</span>free<span class="hl sym">-</span>alien <span class="hl sym">*</span>num<span class="hl sym">*)</span>
  <span class="hl sym">(</span>free<span class="hl sym">-</span>alien <span class="hl sym">*</span>acc<span class="hl sym">*)</span>
  <span class="hl sym">(</span>free<span class="hl sym">-</span>alien <span class="hl sym">*</span>den<span class="hl sym">*))</span>

<span class="hl sym">(</span>defun extract<span class="hl sym">-</span>digit <span class="hl sym">()</span>
  <span class="hl sym">(</span>if <span class="hl sym">(&gt; (</span>mpz<span class="hl sym">-</span>cmp <span class="hl sym">*</span>num<span class="hl sym">* *</span>acc<span class="hl sym">*)</span> <span class="hl num">0</span><span class="hl sym">)</span>
	<span class="hl sym">-</span><span class="hl num">1</span>
	<span class="hl sym">(</span>progn
	  <span class="hl sym">(</span>mpz<span class="hl sym">-</span>mul<span class="hl sym">-</span><span class="hl num">2</span>exp <span class="hl sym">*</span>tmp1<span class="hl sym">* *</span>num<span class="hl sym">*</span> <span class="hl num">1</span><span class="hl sym">)</span>
	  <span class="hl sym">(</span>mpz<span class="hl sym">-</span>add <span class="hl sym">*</span>tmp1<span class="hl sym">* *</span>tmp1<span class="hl sym">* *</span>num<span class="hl sym">*)</span>
	  <span class="hl sym">(</span>mpz<span class="hl sym">-</span>add <span class="hl sym">*</span>tmp1<span class="hl sym">* *</span>tmp1<span class="hl sym">* *</span>acc<span class="hl sym">*)</span>
	  <span class="hl sym">(</span>mpz<span class="hl sym">-</span>fdiv<span class="hl sym">-</span>qr <span class="hl sym">*</span>tmp1<span class="hl sym">* *</span>tmp2<span class="hl sym">* *</span>tmp1<span class="hl sym">* *</span>den<span class="hl sym">*)</span>
	  <span class="hl sym">(</span>mpz<span class="hl sym">-</span>add <span class="hl sym">*</span>tmp2<span class="hl sym">* *</span>tmp2<span class="hl sym">* *</span>num<span class="hl sym">*)</span>
	  <span class="hl sym">(</span>if <span class="hl sym">(&gt;= (</span>mpz<span class="hl sym">-</span>cmp <span class="hl sym">*</span>tmp2<span class="hl sym">* *</span>den<span class="hl sym">*)</span> <span class="hl num">0</span><span class="hl sym">)</span>
		<span class="hl sym">-</span><span class="hl num">1</span>
		<span class="hl sym">(</span>mpz<span class="hl sym">-</span>get<span class="hl sym">-</span>ui <span class="hl sym">*</span>tmp1<span class="hl sym">*)))))</span>

<span class="hl sym">(</span>defun next<span class="hl sym">-</span>term <span class="hl sym">(</span>k<span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>type fixnum k<span class="hl sym">))</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>y2 <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">+ (*</span> <span class="hl num">2</span> k<span class="hl sym">))))</span>
	<span class="hl sym">(</span>mpz<span class="hl sym">-</span>mul<span class="hl sym">-</span><span class="hl num">2</span>exp <span class="hl sym">*</span>tmp1<span class="hl sym">* *</span>num<span class="hl sym">*</span> <span class="hl num">1</span><span class="hl sym">)</span>
	<span class="hl sym">(</span>mpz<span class="hl sym">-</span>add <span class="hl sym">*</span>acc<span class="hl sym">* *</span>acc<span class="hl sym">* *</span>tmp1<span class="hl sym">*)</span>
	<span class="hl sym">(</span>mpz<span class="hl sym">-</span>mul<span class="hl sym">-</span>ui <span class="hl sym">*</span>acc<span class="hl sym">* *</span>acc<span class="hl sym">*</span> y2<span class="hl sym">)</span>
	<span class="hl sym">(</span>mpz<span class="hl sym">-</span>mul<span class="hl sym">-</span>ui <span class="hl sym">*</span>num<span class="hl sym">* *</span>num<span class="hl sym">*</span> k<span class="hl sym">)</span>
	<span class="hl sym">(</span>mpz<span class="hl sym">-</span>mul<span class="hl sym">-</span>ui <span class="hl sym">*</span>den<span class="hl sym">* *</span>den<span class="hl sym">*</span> y2<span class="hl sym">)))</span>

<span class="hl sym">(</span>defun eliminate<span class="hl sym">-</span>digit <span class="hl sym">(</span>d<span class="hl sym">)</span>
  <span class="hl sym">(</span>mpz<span class="hl sym">-</span>submul<span class="hl sym">-</span>ui <span class="hl sym">*</span>acc<span class="hl sym">* *</span>den<span class="hl sym">*</span> d<span class="hl sym">)</span>
  <span class="hl sym">(</span>mpz<span class="hl sym">-</span>mul<span class="hl sym">-</span>ui <span class="hl sym">*</span>acc<span class="hl sym">* *</span>acc<span class="hl sym">*</span> <span class="hl num">10</span><span class="hl sym">)</span>
  <span class="hl sym">(</span>mpz<span class="hl sym">-</span>mul<span class="hl sym">-</span>ui <span class="hl sym">*</span>num<span class="hl sym">* *</span>num<span class="hl sym">*</span> <span class="hl num">10</span><span class="hl sym">))</span>

<span class="hl sym">(</span>defun pidigits <span class="hl sym">(</span>n<span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>type fixnum n<span class="hl sym">))</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>d <span class="hl num">0</span><span class="hl sym">)</span>
		<span class="hl sym">(</span>k <span class="hl num">0</span><span class="hl sym">)</span>
		<span class="hl sym">(</span>i <span class="hl num">0</span><span class="hl sym">)</span>
		<span class="hl sym">(</span>m <span class="hl num">0</span><span class="hl sym">))</span>
	<span class="hl sym">(</span>declare <span class="hl sym">(</span>type fixnum d k i m<span class="hl sym">))</span>
	<span class="hl sym">(</span>mpz<span class="hl sym">-</span>init <span class="hl sym">*</span>tmp1<span class="hl sym">*)</span>
	<span class="hl sym">(</span>mpz<span class="hl sym">-</span>init <span class="hl sym">*</span>tmp2<span class="hl sym">*)</span>
	<span class="hl sym">(</span>mpz<span class="hl sym">-</span>init<span class="hl sym">-</span>set<span class="hl sym">-</span>ui <span class="hl sym">*</span>num<span class="hl sym">*</span> <span class="hl num">1</span><span class="hl sym">)</span>
	<span class="hl sym">(</span>mpz<span class="hl sym">-</span>init<span class="hl sym">-</span>set<span class="hl sym">-</span>ui <span class="hl sym">*</span>acc<span class="hl sym">*</span> <span class="hl num">0</span><span class="hl sym">)</span>
	<span class="hl sym">(</span>mpz<span class="hl sym">-</span>init<span class="hl sym">-</span>set<span class="hl sym">-</span>ui <span class="hl sym">*</span>den<span class="hl sym">*</span> <span class="hl num">1</span><span class="hl sym">)</span>
	<span class="hl sym">(</span>loop
	  <span class="hl sym">(</span>loop
		<span class="hl sym">(</span>incf k<span class="hl sym">)</span>
		<span class="hl sym">(</span>next<span class="hl sym">-</span>term k<span class="hl sym">)</span>
		<span class="hl sym">(</span>setf d <span class="hl sym">(</span>extract<span class="hl sym">-</span>digit<span class="hl sym">))</span>
		<span class="hl sym">(</span>unless <span class="hl sym">(=</span> d <span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
		  <span class="hl sym">(</span>return<span class="hl sym">)))</span>
	  <span class="hl sym">(</span>format t <span class="hl str">&quot;~D&quot;</span> d<span class="hl sym">)</span>
	  <span class="hl sym">(</span>incf i<span class="hl sym">)</span>
	  <span class="hl sym">(</span>setf m <span class="hl sym">(</span>rem i <span class="hl num">10</span><span class="hl sym">))</span>
	  <span class="hl sym">(</span>when <span class="hl sym">(=</span> m <span class="hl num">0</span><span class="hl sym">)</span>
		<span class="hl sym">(</span>format t <span class="hl str">&quot;	:~D~%&quot;</span> i<span class="hl sym">))</span>
	  <span class="hl sym">(</span>when <span class="hl sym">(&gt;=</span> i n<span class="hl sym">)</span>
		<span class="hl sym">(</span>return<span class="hl sym">))</span>
	  <span class="hl sym">(</span>eliminate<span class="hl sym">-</span>digit d<span class="hl sym">))</span>
	<span class="hl sym">(</span>unless <span class="hl sym">(=</span> m <span class="hl num">0</span><span class="hl sym">)</span>
	  <span class="hl sym">(</span>format t <span class="hl str">&quot;	:~D~%&quot;</span> n<span class="hl sym">))))</span>

<span class="hl sym">(</span>defun main <span class="hl sym">(&amp;</span>optional n<span class="hl sym">-</span>supplied<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>n <span class="hl sym">(</span>or n<span class="hl sym">-</span>supplied
			   <span class="hl sym">(</span>parse<span class="hl sym">-</span>integer <span class="hl sym">(</span>or <span class="hl sym">(</span>car <span class="hl sym">(</span>last #<span class="hl sym">+</span>sbcl sb<span class="hl sym">-</span>ext<span class="hl sym">:*</span>posix<span class="hl sym">-</span>argv<span class="hl sym">*</span>
											 #<span class="hl sym">+</span>clisp ext<span class="hl sym">:*</span>args<span class="hl sym">*</span>
											 #<span class="hl sym">+</span>cmu extensions<span class="hl sym">:*</span>command<span class="hl sym">-</span>line<span class="hl sym">-</span>strings<span class="hl sym">*</span>
											 #<span class="hl sym">+</span>gcl  si<span class="hl sym">::*</span>command<span class="hl sym">-</span>args<span class="hl sym">*))</span>
								  <span class="hl str">&quot;2000&quot;</span><span class="hl sym">)))))</span>
	<span class="hl sym">(</span>init<span class="hl sym">)</span>
	<span class="hl sym">(</span>pidigits n<span class="hl sym">)</span>
	<span class="hl sym">(</span>cleanup<span class="hl sym">)))</span>

