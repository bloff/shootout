<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">-- contributed by Bruno Massa</span>

require<span class="hl str">&quot;coroutine&quot;</span>

<span class="hl slc">-- variables</span>
<span class="hl kwa">local</span> n                 <span class="hl sym">=</span> <span class="hl kwb">tonumber</span><span class="hl sym">(</span>arg<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">])</span>
<span class="hl kwa">local</span> nthreads<span class="hl sym">,</span> threads <span class="hl sym">=</span> <span class="hl num">503</span><span class="hl sym">, {}</span>
<span class="hl kwa">local</span> id<span class="hl sym">,</span> token<span class="hl sym">,</span> ok     <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl kwa">true</span>

<span class="hl slc">-- cache these to avoid global environment lookups</span>
<span class="hl kwa">local</span> yield<span class="hl sym">,</span> wrap       <span class="hl sym">=</span> coroutine<span class="hl sym">.</span>yield<span class="hl sym">,</span> coroutine<span class="hl sym">.</span>wrap

<span class="hl kwa">local</span> thread_ring <span class="hl sym">=</span> <span class="hl kwa">function</span><span class="hl sym">(</span>id<span class="hl sym">,</span> mytoken<span class="hl sym">)</span>
  <span class="hl kwa">local</span> nextid
  <span class="hl kwa">if</span> id <span class="hl sym">==</span> nthreads <span class="hl kwa">then</span>
    nextid <span class="hl sym">=</span> <span class="hl num">1</span>
  <span class="hl kwa">else</span>
    nextid <span class="hl sym">=</span> id <span class="hl sym">+</span> <span class="hl num">1</span>
  <span class="hl kwa">end</span>

  <span class="hl kwa">while true do</span>
    <span class="hl kwa">if</span> mytoken <span class="hl sym">==</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
      <span class="hl kwb">print</span><span class="hl sym">(</span>id<span class="hl sym">)</span>
      <span class="hl kwa">return false</span>
    <span class="hl kwa">end</span>
    id<span class="hl sym">,</span> mytoken <span class="hl sym">=</span> <span class="hl kwd">yield</span><span class="hl sym">(</span><span class="hl kwa">true</span><span class="hl sym">,</span> nextid<span class="hl sym">,</span> mytoken <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span>
  <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

<span class="hl slc">-- create all threads</span>
<span class="hl kwa">for</span> id <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">,</span> nthreads <span class="hl kwa">do</span>
  threads<span class="hl sym">[</span>id<span class="hl sym">] =</span> <span class="hl kwd">wrap</span><span class="hl sym">(</span>thread_ring<span class="hl sym">)</span>
<span class="hl kwa">end</span>

<span class="hl slc">-- send the token</span>
<span class="hl kwa">while</span> ok <span class="hl kwa">do</span>
  ok<span class="hl sym">,</span> id<span class="hl sym">,</span> token <span class="hl sym">=</span> threads<span class="hl sym">[</span>id<span class="hl sym">](</span>id<span class="hl sym">,</span> token<span class="hl sym">)</span>
<span class="hl kwa">end</span>
