<span class="hl com">/*   The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   Based on C contribution by Alex Burlyga</span>
<span class="hl com">   Based on Java contribution by Michael Barker</span>
<span class="hl com">   Contributed by The Anh Tran</span>
<span class="hl com"></span>
<span class="hl com">   Concurrency technique:</span>
<span class="hl com">   1.   The threadpool is created with 1 or 4 kernel threads - depends on benchmark u32/u32q/u64/u64q.</span>
<span class="hl com">   2.   3 (or 10) creatures are queues into threadpool.</span>
<span class="hl com">   3.   The 1st creature reaching meeting_place will become inactive.</span>
<span class="hl com">   4.   The 2nd creature reaching meeting_place will do the color compliment,</span>
<span class="hl com">      then set 1st creature's state to active.</span>
<span class="hl com">   5.   Creature insides meeting_place use spinwait + atomic instruction to change meeting_place's state.</span>
<span class="hl com">*/</span>


<span class="hl dir">#include &lt;iostream&gt;</span>
<span class="hl dir">#include &lt;string&gt;</span>

<span class="hl dir">#include &lt;cmath&gt;</span>
<span class="hl dir">#include &lt;memory.h&gt;</span>

<span class="hl dir">#include &lt;sched.h&gt;</span>

<span class="hl dir">#include &lt;boost/lexical_cast.hpp&gt;</span>
<span class="hl dir">#include &lt;boost/format.hpp&gt;</span>
<span class="hl dir">#include &lt;boost/bind.hpp&gt;</span>
<span class="hl dir">#include &lt;boost/scoped_ptr.hpp&gt;</span>

<span class="hl slc">// Use threadpool library written by Philipp Henkel.</span>
<span class="hl dir">#include</span> <span class="hl dstr">&quot;threadpool/boost/threadpool.hpp&quot;</span><span class="hl dir"></span>


<span class="hl kwa">using namespace</span> std<span class="hl sym">;</span>
<span class="hl kwa">using namespace</span> boost<span class="hl sym">;</span>

scoped_ptr<span class="hl sym">&lt;</span>threadpool<span class="hl sym">::</span>pool<span class="hl sym">&gt;</span>      tpool<span class="hl sym">;</span>

<span class="hl kwb">enum</span> COLOR
<span class="hl sym">{</span>
   BLUE   <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span>
   RED      <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">,</span>
   YELLOW   <span class="hl sym">=</span> <span class="hl num">2</span>
<span class="hl sym">};</span>

<span class="hl kwb">char const</span> <span class="hl sym">*</span> <span class="hl kwb">const</span> ColorName<span class="hl sym">[]   = {</span><span class="hl str">&quot;blue&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;red&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;yellow&quot;</span><span class="hl sym">};</span>


COLOR
<span class="hl kwd">ColorCompliment</span><span class="hl sym">(</span>COLOR c1<span class="hl sym">,</span> COLOR c2<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwa">switch</span> <span class="hl sym">(</span>c1<span class="hl sym">)</span>
   <span class="hl sym">{</span>
   <span class="hl kwa">case</span> BLUE<span class="hl sym">:</span>
      <span class="hl kwa">switch</span> <span class="hl sym">(</span>c2<span class="hl sym">)</span>
      <span class="hl sym">{</span>
      <span class="hl kwa">case</span> BLUE<span class="hl sym">:</span>      <span class="hl kwa">return</span> BLUE<span class="hl sym">;</span>
      <span class="hl kwa">case</span> RED<span class="hl sym">:</span>      <span class="hl kwa">return</span> YELLOW<span class="hl sym">;</span>
      <span class="hl kwa">case</span> YELLOW<span class="hl sym">:</span>   <span class="hl kwa">return</span> RED<span class="hl sym">;</span>
      <span class="hl sym">}</span>

   <span class="hl kwa">case</span> RED<span class="hl sym">:</span>
      <span class="hl kwa">switch</span> <span class="hl sym">(</span>c2<span class="hl sym">)</span>
      <span class="hl sym">{</span>
      <span class="hl kwa">case</span> BLUE<span class="hl sym">:</span>      <span class="hl kwa">return</span> YELLOW<span class="hl sym">;</span>
      <span class="hl kwa">case</span> RED<span class="hl sym">:</span>      <span class="hl kwa">return</span> RED<span class="hl sym">;</span>
      <span class="hl kwa">case</span> YELLOW<span class="hl sym">:</span>   <span class="hl kwa">return</span> BLUE<span class="hl sym">;</span>
      <span class="hl sym">}</span>

   <span class="hl kwa">case</span> YELLOW<span class="hl sym">:</span>
      <span class="hl kwa">switch</span> <span class="hl sym">(</span>c2<span class="hl sym">)</span>
      <span class="hl sym">{</span>
      <span class="hl kwa">case</span> BLUE<span class="hl sym">:</span>      <span class="hl kwa">return</span> RED<span class="hl sym">;</span>
      <span class="hl kwa">case</span> RED<span class="hl sym">:</span>      <span class="hl kwa">return</span> BLUE<span class="hl sym">;</span>
      <span class="hl kwa">case</span> YELLOW<span class="hl sym">:</span>   <span class="hl kwa">return</span> YELLOW<span class="hl sym">;</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   cerr <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;Invalid color</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
   <span class="hl kwa">return</span> BLUE<span class="hl sym">;</span>
<span class="hl sym">}</span>


string
<span class="hl kwd">SpellNumber</span><span class="hl sym">(</span><span class="hl kwb">int</span> n<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwb">static char const</span><span class="hl sym">*</span> <span class="hl kwb">const</span> NumberStr<span class="hl sym">[] =</span>
   <span class="hl sym">{</span>
      <span class="hl str">&quot;zero &quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;one &quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;two &quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;three &quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;four &quot;</span><span class="hl sym">,</span>
      <span class="hl str">&quot;five &quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;six &quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;seven &quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;eight &quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;nine &quot;</span>
   <span class="hl sym">};</span>
   string num<span class="hl sym">;</span>

   <span class="hl kwa">while</span> <span class="hl sym">(</span> n <span class="hl sym">&gt;=</span> <span class="hl num">10</span> <span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwb">int</span> m <span class="hl sym">=</span> n <span class="hl sym">%</span> <span class="hl num">10</span><span class="hl sym">;</span>
      n <span class="hl sym">/=</span> <span class="hl num">10</span><span class="hl sym">;</span>

      num <span class="hl sym">=</span> NumberStr<span class="hl sym">[</span>m<span class="hl sym">] +</span> num<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   num <span class="hl sym">=</span> NumberStr<span class="hl sym">[</span>n<span class="hl sym">] +</span> num<span class="hl sym">;</span>
   <span class="hl kwa">return</span> num<span class="hl sym">;</span>
<span class="hl sym">}</span>



<span class="hl kwb">struct</span> Creature<span class="hl sym">;</span>
<span class="hl kwb">struct</span> MeetingPlace
<span class="hl sym">{</span>
   <span class="hl kwb">int</span>   <span class="hl kwc">volatile</span>   _meetings_left<span class="hl sym">;</span>
   Creature<span class="hl sym">*</span>      _creature_waiting<span class="hl sym">;</span>


   <span class="hl kwd">MeetingPlace</span><span class="hl sym">(</span><span class="hl kwb">int</span> N<span class="hl sym">) :</span> <span class="hl kwd">_meetings_left</span><span class="hl sym">(</span>N<span class="hl sym">),</span> <span class="hl kwd">_creature_waiting</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
   <span class="hl sym">{   }</span>

   <span class="hl kwb">bool</span> <span class="hl kwd">GotoMeet</span><span class="hl sym">(</span> Creature<span class="hl sym">*</span> cr1<span class="hl sym">,</span> Creature<span class="hl sym">* &amp;</span>cr2 <span class="hl sym">);</span>
<span class="hl sym">};</span>


<span class="hl kwb">struct</span> Creature
<span class="hl sym">{</span>
   MeetingPlace <span class="hl sym">*</span>      _place<span class="hl sym">;</span>
   COLOR            _color<span class="hl sym">;</span>

   <span class="hl kwb">int</span>               _count<span class="hl sym">;</span>
   <span class="hl kwb">int</span>               _same_count<span class="hl sym">;</span>

   <span class="hl kwb">size_t</span>            _id<span class="hl sym">;</span>
   <span class="hl kwb">double</span>            _dummy<span class="hl sym">;</span>


   <span class="hl kwd">Creature</span><span class="hl sym">()</span>
   <span class="hl sym">{</span>
      <span class="hl kwd">memset</span><span class="hl sym">(</span><span class="hl kwa">this</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl kwa">sizeof</span><span class="hl sym">(*</span><span class="hl kwa">this</span><span class="hl sym">));</span>
   <span class="hl sym">}</span>

   <span class="hl slc">// Put to threadpool, ready for running</span>
   <span class="hl kwb">void</span> <span class="hl kwd">EnQueue</span><span class="hl sym">()</span>
   <span class="hl sym">{</span>
      tpool<span class="hl sym">-&gt;</span><span class="hl kwd">schedule</span><span class="hl sym">(</span><span class="hl kwd">bind</span><span class="hl sym">(&amp;</span>Creature<span class="hl sym">::</span>Run<span class="hl sym">,</span> <span class="hl kwa">this</span><span class="hl sym">));</span>
   <span class="hl sym">}</span>

   <span class="hl kwb">void</span>
   <span class="hl kwd">Start</span><span class="hl sym">(</span> MeetingPlace <span class="hl sym">*</span> mp<span class="hl sym">,</span> COLOR color<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      _place   <span class="hl sym">=</span> mp<span class="hl sym">;</span>
      _color   <span class="hl sym">=</span> color<span class="hl sym">;</span>
      _dummy <span class="hl sym">=</span> _id <span class="hl sym">=</span> <span class="hl kwa">reinterpret_cast</span><span class="hl sym">&lt;</span><span class="hl kwb">size_t</span><span class="hl sym">&gt;(</span><span class="hl kwa">this</span><span class="hl sym">);</span>

      <span class="hl kwd">EnQueue</span><span class="hl sym">();</span>
   <span class="hl sym">}</span>

   <span class="hl kwb">void</span>
   <span class="hl kwd">Run</span><span class="hl sym">()</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span><span class="hl kwa">true</span><span class="hl sym">)</span>
      <span class="hl sym">{</span>
         Creature<span class="hl sym">*</span> other <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

         <span class="hl kwa">if</span> <span class="hl sym">(</span>_place<span class="hl sym">-&gt;</span><span class="hl kwd">GotoMeet</span><span class="hl sym">(</span><span class="hl kwa">this</span><span class="hl sym">,</span> other<span class="hl sym">))</span>
         <span class="hl sym">{</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>other <span class="hl sym">!=</span> <span class="hl num">0</span><span class="hl sym">)</span>   <span class="hl slc">// 2nd arrive, go to meet the 2nd creature</span>
               <span class="hl kwd">Meet</span><span class="hl sym">(*</span>other<span class="hl sym">);</span>
            <span class="hl kwa">else</span> <span class="hl slc">// me is the 1st creature, have to wait -&gt; yield execution</span>
               <span class="hl kwa">return</span><span class="hl sym">;</span>
         <span class="hl sym">}</span>
         <span class="hl kwa">else</span>
            <span class="hl kwa">return</span><span class="hl sym">;</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   <span class="hl kwb">void</span>
   <span class="hl kwd">Meet</span><span class="hl sym">(</span>Creature <span class="hl sym">&amp;</span>other<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">__builtin_expect</span><span class="hl sym">(</span>_id <span class="hl sym">==</span> other<span class="hl sym">.</span>_id<span class="hl sym">,</span> <span class="hl kwa">false</span><span class="hl sym">))</span>
      <span class="hl sym">{</span>
         <span class="hl sym">++</span>_same_count<span class="hl sym">;</span>
         <span class="hl sym">++</span>other<span class="hl sym">.</span>_same_count<span class="hl sym">;</span>
      <span class="hl sym">}</span>

      <span class="hl sym">++</span>_count<span class="hl sym">;</span>
      <span class="hl sym">++</span>other<span class="hl sym">.</span>_count<span class="hl sym">;</span>

      COLOR new_color   <span class="hl sym">=</span> <span class="hl kwd">ColorCompliment</span><span class="hl sym">(</span> _color<span class="hl sym">,</span> other<span class="hl sym">.</span>_color <span class="hl sym">);</span>
      other<span class="hl sym">.</span>_color   <span class="hl sym">=</span> _color   <span class="hl sym">=</span> new_color<span class="hl sym">;</span>

      other<span class="hl sym">.</span><span class="hl kwd">EnQueue</span><span class="hl sym">();</span> <span class="hl slc">// 1st creature is inactive -&gt; put it into active queue</span>
   <span class="hl sym">}</span>

<span class="hl sym">};</span>

<span class="hl kwb">bool</span>
MeetingPlace<span class="hl sym">::</span><span class="hl kwd">GotoMeet</span><span class="hl sym">(</span> Creature<span class="hl sym">*</span> cr_in<span class="hl sym">,</span> Creature<span class="hl sym">* &amp;</span>cr_out <span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwa">while</span> <span class="hl sym">(</span><span class="hl kwa">true</span><span class="hl sym">)</span> <span class="hl slc">// spin wait</span>
   <span class="hl sym">{</span>
      <span class="hl slc">// store pointer to first creature</span>
      Creature<span class="hl sym">*</span> first <span class="hl sym">=</span> <span class="hl kwa">reinterpret_cast</span><span class="hl sym">&lt;</span>Creature<span class="hl sym">*&gt;(</span><span class="hl kwd">__sync_val_compare_and_swap</span><span class="hl sym">(&amp;</span>_creature_waiting<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> cr_in<span class="hl sym">));</span>

      <span class="hl kwa">if</span> <span class="hl sym">(</span>first <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span>   <span class="hl slc">// first arrive</span>
         <span class="hl kwa">return</span> <span class="hl sym">(</span>_meetings_left <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">);</span>
      <span class="hl kwa">else</span>         <span class="hl slc">// second arrive</span>
      <span class="hl sym">{</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">__sync_bool_compare_and_swap</span><span class="hl sym">(&amp;</span>_creature_waiting<span class="hl sym">,</span> first<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">))</span>
         <span class="hl sym">{</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">__sync_fetch_and_sub</span><span class="hl sym">(&amp;</span>_meetings_left<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">) &gt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
            <span class="hl sym">{</span>
               cr_out <span class="hl sym">=</span> first<span class="hl sym">;</span>
               <span class="hl kwa">return true</span><span class="hl sym">;</span>
            <span class="hl sym">}</span>
            <span class="hl kwa">else</span>
               <span class="hl kwa">return false</span><span class="hl sym">;</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>


<span class="hl kwc">template</span> <span class="hl sym">&lt;</span><span class="hl kwb">int</span> ncolor<span class="hl sym">&gt;</span>
<span class="hl kwb">void</span>
<span class="hl kwd">RunGame</span><span class="hl sym">(</span><span class="hl kwb">int</span> n<span class="hl sym">,</span> COLOR <span class="hl kwb">const</span> <span class="hl sym">(&amp;</span>color<span class="hl sym">)[</span>ncolor<span class="hl sym">])</span>
<span class="hl sym">{</span>
   MeetingPlace   <span class="hl kwd">place</span><span class="hl sym">(</span>n<span class="hl sym">);</span>
   Creature      cr<span class="hl sym">[</span>ncolor<span class="hl sym">];</span>

   format <span class="hl kwd">fmt</span><span class="hl sym">(</span><span class="hl str">&quot;%1% &quot;</span><span class="hl sym">);</span>
   <span class="hl slc">// print initial color of each creature</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> ncolor<span class="hl sym">; ++</span>i<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      cout <span class="hl sym">&lt;&lt; (</span>fmt <span class="hl sym">%</span> ColorName<span class="hl sym">[</span>color<span class="hl sym">[</span>i<span class="hl sym">]] );</span>
      cr<span class="hl sym">[</span>i<span class="hl sym">].</span><span class="hl kwd">Start</span><span class="hl sym">( &amp;</span>place<span class="hl sym">,</span> color<span class="hl sym">[</span>i<span class="hl sym">] );</span>
   <span class="hl sym">}</span>

   cout <span class="hl sym">&lt;&lt;</span> endl<span class="hl sym">;</span>


   <span class="hl slc">// wait for them to meet</span>
   tpool<span class="hl sym">-&gt;</span><span class="hl kwd">wait</span><span class="hl sym">();</span>


   <span class="hl kwb">int</span> total <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   fmt <span class="hl sym">=</span> <span class="hl kwd">format</span><span class="hl sym">(</span><span class="hl str">&quot;%1% %2%</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">);</span>

   <span class="hl slc">// print meeting times of each creature</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> ncolor<span class="hl sym">;</span> i<span class="hl sym">++)</span>
   <span class="hl sym">{</span>
      total <span class="hl sym">+=</span> cr<span class="hl sym">[</span>i<span class="hl sym">].</span>_count<span class="hl sym">;</span>
      cout <span class="hl sym">&lt;&lt; (</span>fmt <span class="hl sym">%</span> cr<span class="hl sym">[</span>i<span class="hl sym">].</span>_count <span class="hl sym">%</span> <span class="hl kwd">SpellNumber</span><span class="hl sym">(</span>cr<span class="hl sym">[</span>i<span class="hl sym">].</span>_same_count<span class="hl sym">));</span>
   <span class="hl sym">}</span>

   <span class="hl slc">// print total meeting times</span>
   fmt <span class="hl sym">=</span> <span class="hl kwd">format</span><span class="hl sym">(</span><span class="hl str">&quot; %1%</span><span class="hl esc">\n\n</span><span class="hl str">&quot;</span><span class="hl sym">);</span>
   cout <span class="hl sym">&lt;&lt; (</span>fmt <span class="hl sym">%</span> <span class="hl kwd">SpellNumber</span><span class="hl sym">(</span>total<span class="hl sym">));</span>
<span class="hl sym">}</span>

<span class="hl kwb">void</span>
<span class="hl kwd">PrintColors</span><span class="hl sym">()</span>
<span class="hl sym">{</span>
   format <span class="hl kwd">fmt</span><span class="hl sym">(</span><span class="hl str">&quot;%1% + %2% -&gt; %3%</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">);</span>

   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> c1 <span class="hl sym">=</span> BLUE<span class="hl sym">;</span> c1 <span class="hl sym">&lt;=</span> YELLOW<span class="hl sym">; ++</span>c1<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> c2 <span class="hl sym">=</span> BLUE<span class="hl sym">;</span> c2 <span class="hl sym">&lt;=</span> YELLOW<span class="hl sym">; ++</span>c2<span class="hl sym">)</span>
      <span class="hl sym">{</span>
         cout <span class="hl sym">&lt;&lt; (</span>fmt
                  <span class="hl sym">%</span> ColorName<span class="hl sym">[</span>c1<span class="hl sym">]</span>
                  <span class="hl sym">%</span> ColorName<span class="hl sym">[</span>c2<span class="hl sym">]</span>
                  <span class="hl sym">%</span> ColorName<span class="hl sym">[</span><span class="hl kwd">ColorCompliment</span><span class="hl sym">( (</span>COLOR<span class="hl sym">)</span>c1<span class="hl sym">, (</span>COLOR<span class="hl sym">)</span>c2 <span class="hl sym">)]  );</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   cout <span class="hl sym">&lt;&lt;</span> endl<span class="hl sym">;</span>
<span class="hl sym">}</span>


<span class="hl kwb">int</span>
<span class="hl kwd">GetThreadCount</span><span class="hl sym">()</span>
<span class="hl sym">{</span>
   cpu_set_t cs<span class="hl sym">;</span>
   <span class="hl kwd">CPU_ZERO</span><span class="hl sym">(&amp;</span>cs<span class="hl sym">);</span>
   <span class="hl kwd">sched_getaffinity</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span>cs<span class="hl sym">), &amp;</span>cs<span class="hl sym">);</span>

   <span class="hl kwb">int</span> count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">16</span><span class="hl sym">; ++</span>i<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">CPU_ISSET</span><span class="hl sym">(</span>i<span class="hl sym">, &amp;</span>cs<span class="hl sym">))</span>
         <span class="hl sym">++</span>count<span class="hl sym">;</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">return</span> count<span class="hl sym">;</span>
<span class="hl sym">}</span>


<span class="hl kwb">int</span>
<span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span><span class="hl sym">**</span> argv<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwd">PrintColors</span><span class="hl sym">();</span>

   <span class="hl slc">// Spawn N threads; ie: 1 or 4, depends on benchmark</span>
   <span class="hl kwb">int</span> nc <span class="hl sym">= (</span>argc <span class="hl sym">&gt;=</span> <span class="hl num">3</span><span class="hl sym">)</span> ? lexical_cast<span class="hl sym">&lt;</span><span class="hl kwb">int</span><span class="hl sym">&gt;(</span>argv<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">]) :</span> <span class="hl kwd">GetThreadCount</span><span class="hl sym">();</span>
   tpool<span class="hl sym">.</span><span class="hl kwd">reset</span><span class="hl sym">(</span><span class="hl kwa">new</span> boost<span class="hl sym">::</span>threadpool<span class="hl sym">::</span><span class="hl kwd">pool</span><span class="hl sym">(</span>nc<span class="hl sym">));</span>


   COLOR <span class="hl kwb">const</span> r1<span class="hl sym">[] = {</span>   BLUE<span class="hl sym">,</span> RED<span class="hl sym">,</span> YELLOW   <span class="hl sym">};</span>
   COLOR <span class="hl kwb">const</span> r2<span class="hl sym">[] = {</span>   BLUE<span class="hl sym">,</span> RED<span class="hl sym">,</span> YELLOW<span class="hl sym">,</span> RED<span class="hl sym">,</span> YELLOW<span class="hl sym">,</span> BLUE<span class="hl sym">,</span> RED<span class="hl sym">,</span> YELLOW<span class="hl sym">,</span> RED<span class="hl sym">,</span> BLUE   <span class="hl sym">};</span>

   <span class="hl kwb">int</span> n <span class="hl sym">= (</span>argc <span class="hl sym">&gt;=</span> <span class="hl num">2</span><span class="hl sym">)</span> ? lexical_cast<span class="hl sym">&lt;</span><span class="hl kwb">int</span><span class="hl sym">&gt;(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]) :</span> <span class="hl num">600</span><span class="hl sym">;</span>
   <span class="hl kwd">RunGame</span><span class="hl sym">(</span> n<span class="hl sym">,</span> r1 <span class="hl sym">);</span>
   <span class="hl kwd">RunGame</span><span class="hl sym">(</span> n<span class="hl sym">,</span> r2 <span class="hl sym">);</span>

   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

