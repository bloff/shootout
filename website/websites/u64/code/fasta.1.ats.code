<span class="hl com">(*</span>
<span class="hl com">** The Computer Language Benchmarks Game</span>
<span class="hl com">** http://shootout.alioth.debian.org/</span>
<span class="hl com">**</span>
<span class="hl com">** contributed by Hongwei Xi</span>
<span class="hl com">**</span>
<span class="hl com">** compilation command:</span>
<span class="hl com">**   atscc -O3 fasta2.dats -msse2 -mfpmath=sse -o fasta2</span>
<span class="hl com">*)</span>

<span class="hl com">(* ****** ****** *)</span>

staload <span class="hl str">&quot;libc/SATS/stdio.sats&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">typedef</span> float <span class="hl sym">=</span> float<span class="hl sym">;</span> <span class="hl dir">#define i2f float_of_int</span>

<span class="hl sym">//</span> this is about <span class="hl num">10</span><span class="hl sym">%</span> slower<span class="hl sym">:</span>
<span class="hl sym">//</span> <span class="hl kwa">typedef</span> float <span class="hl sym">=</span> double<span class="hl sym">;</span> <span class="hl dir">#define i2f double_of_int</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">local</span>

<span class="hl dir">#define IM 139968</span>
<span class="hl dir">#define IA 3877</span>
<span class="hl dir">#define IC 29573</span>

<span class="hl kwa">var</span> state<span class="hl sym">:</span> int <span class="hl sym">=</span> <span class="hl num">42</span>
<span class="hl kwa">val</span> <span class="hl sym">(</span>pfbox <span class="hl sym">| ()) =</span> vbox_make_view_ptr <span class="hl sym">{</span>int<span class="hl sym">} (</span>view&#64; state <span class="hl sym">| &amp;</span>state<span class="hl sym">)</span>

<span class="hl kwa">in</span> <span class="hl sym">//</span> <span class="hl kwa">in of</span> <span class="hl sym">[</span><span class="hl kwa">local</span><span class="hl sym">]</span>

<span class="hl kwa">fn</span> random_gen
  <span class="hl sym">(</span>max<span class="hl sym">:</span> float<span class="hl sym">):</span> float <span class="hl sym">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">prval</span> vbox pf <span class="hl sym">=</span> pfbox
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> state <span class="hl sym">:= (</span>state <span class="hl sym">*</span> IA <span class="hl sym">+</span> IC<span class="hl sym">)</span> mod IM <span class="hl kwa">in</span> <span class="hl sym">(</span>max <span class="hl sym">*</span> i2f state<span class="hl sym">) /</span> IM
<span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>random_gen<span class="hl sym">]</span>

<span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span><span class="hl kwa">local</span><span class="hl sym">]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">typedef</span> amino <span class="hl sym">=</span> &#64;<span class="hl sym">{</span> c<span class="hl sym">=</span> char<span class="hl sym">,</span> p<span class="hl sym">=</span> float <span class="hl sym">}</span>
<span class="hl kwa">typedef</span> aminoarr <span class="hl sym">(</span>n<span class="hl sym">:</span>int<span class="hl sym">) =</span> &#64;<span class="hl sym">[</span>amino<span class="hl sym">][</span>n<span class="hl sym">] //</span> amino array <span class="hl kwa">of</span> size n

<span class="hl kwa">fn</span> make_cumulative <span class="hl sym">{</span>n<span class="hl sym">:</span>nat<span class="hl sym">}</span>
  <span class="hl sym">(</span>table<span class="hl sym">: &amp;</span>aminoarr<span class="hl sym">(</span>n<span class="hl sym">),</span> n<span class="hl sym">:</span> size_t n<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">fun</span> loop <span class="hl sym">{</span>i<span class="hl sym">:</span>nat <span class="hl sym">|</span> i <span class="hl sym">&lt;=</span> n<span class="hl sym">} .&lt;</span>n<span class="hl sym">-</span>i<span class="hl sym">&gt;. (</span>
      table<span class="hl sym">: &amp;</span>aminoarr<span class="hl sym">(</span>n<span class="hl sym">),</span> n<span class="hl sym">:</span> size_t n<span class="hl sym">,</span> i<span class="hl sym">:</span> int i<span class="hl sym">,</span> prob<span class="hl sym">:</span> float
    <span class="hl sym">) :</span> void <span class="hl sym">=</span>
    <span class="hl kwa">if</span> i <span class="hl sym">&lt;</span> n <span class="hl kwa">then let</span>
      <span class="hl kwa">val</span> prob <span class="hl sym">=</span> prob <span class="hl sym">+</span> table<span class="hl sym">.[</span>i<span class="hl sym">].</span>p <span class="hl kwa">in</span>
      table<span class="hl sym">.[</span>i<span class="hl sym">].</span>p <span class="hl sym">:=</span> prob<span class="hl sym">;</span> loop <span class="hl sym">(</span>table<span class="hl sym">,</span> n<span class="hl sym">,</span> i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> prob<span class="hl sym">)</span>
    <span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span><span class="hl kwa">if</span><span class="hl sym">]</span>
  <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>loop<span class="hl sym">]</span>
<span class="hl kwa">in</span>
  loop <span class="hl sym">(</span>table<span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0.0</span><span class="hl sym">:</span> float<span class="hl sym">)</span>
<span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>make_cumulative<span class="hl sym">]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">extern fun</span> fwrite_substring <span class="hl sym">{</span>m<span class="hl sym">,</span>p<span class="hl sym">,</span>n<span class="hl sym">:</span>nat <span class="hl sym">|</span> p <span class="hl sym">+</span> n <span class="hl sym">&lt;=</span> m<span class="hl sym">}</span>
  <span class="hl sym">(</span>str<span class="hl sym">:</span> string m<span class="hl sym">,</span> beg<span class="hl sym">:</span> size_t p<span class="hl sym">,</span> n<span class="hl sym">:</span> size_t n<span class="hl sym">,</span> out<span class="hl sym">:</span> FILEref<span class="hl sym">):</span> void
  <span class="hl sym">=</span> <span class="hl str">&quot;fasta_fwrite_substring&quot;</span>

<span class="hl kwa">extern fun</span> fputc <span class="hl sym">(</span>c<span class="hl sym">:</span> char<span class="hl sym">,</span> out<span class="hl sym">:</span> FILEref<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl str">&quot;fasta_fputc&quot;</span>

<span class="hl kwa">extern fun</span> fwrite_byte <span class="hl sym">{</span>bsz<span class="hl sym">,</span>n<span class="hl sym">:</span>nat <span class="hl sym">|</span> n <span class="hl sym">&lt;=</span> bsz<span class="hl sym">}</span>
  <span class="hl sym">(</span>buf<span class="hl sym">: &amp;</span>bytes <span class="hl sym">(</span>bsz<span class="hl sym">),</span> n<span class="hl sym">:</span> size_t n<span class="hl sym">,</span> out<span class="hl sym">:</span> FILEref<span class="hl sym">):&lt;&gt;</span> sizeLte n
  <span class="hl sym">=</span> <span class="hl str">&quot;fasta_fwrite_byte&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl dir">#define WIDTH 60</span>

<span class="hl kwa">fn</span> repeat_fasta <span class="hl sym">{</span>len<span class="hl sym">:</span>nat<span class="hl sym">} {</span>n<span class="hl sym">:</span>nat<span class="hl sym">}</span>
  <span class="hl sym">(</span>out<span class="hl sym">:</span> FILEref<span class="hl sym">,</span> str<span class="hl sym">:</span> string len<span class="hl sym">,</span> n<span class="hl sym">:</span> size_t n<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">macdef</span> WIDTH_sz <span class="hl sym">=</span> size1_of_int1 <span class="hl sym">(</span>WIDTH<span class="hl sym">)</span>
  <span class="hl kwa">val</span> len <span class="hl sym">=</span> string1_length str<span class="hl sym">;</span> <span class="hl kwa">val</span> <span class="hl sym">() =</span> assert <span class="hl sym">(</span>len <span class="hl sym">&gt;=</span> WIDTH_sz<span class="hl sym">)</span>
  <span class="hl kwa">fun</span> loop <span class="hl sym">{</span>n<span class="hl sym">,</span>pos<span class="hl sym">:</span>nat <span class="hl sym">|</span> pos <span class="hl sym">&lt;=</span> len<span class="hl sym">}</span>
    <span class="hl sym">(</span>out<span class="hl sym">:</span> FILEref<span class="hl sym">,</span> n<span class="hl sym">:</span> size_t n<span class="hl sym">,</span> pos<span class="hl sym">:</span> size_t pos<span class="hl sym">):&lt;</span>cloref1<span class="hl sym">&gt;</span> void <span class="hl sym">=</span>
    <span class="hl kwa">if</span> n <span class="hl sym">&gt;</span> WIDTH_sz <span class="hl kwa">then let</span>
      <span class="hl kwa">val</span> left <span class="hl sym">=</span> len <span class="hl sym">-</span> pos <span class="hl kwa">in</span>
      <span class="hl kwa">if</span> left <span class="hl sym">&gt;=</span> WIDTH_sz <span class="hl kwa">then begin</span>
        fwrite_substring <span class="hl sym">(</span>str<span class="hl sym">,</span> pos<span class="hl sym">,</span> WIDTH_sz<span class="hl sym">,</span> out<span class="hl sym">);</span> fputc <span class="hl sym">(</span>'\n'<span class="hl sym">,</span> out<span class="hl sym">);</span>
        loop <span class="hl sym">(</span>out<span class="hl sym">,</span> n <span class="hl sym">-</span> WIDTH_sz<span class="hl sym">,</span> pos <span class="hl sym">+</span> WIDTH_sz<span class="hl sym">)</span>
      <span class="hl kwa">end else begin</span>
        fwrite_substring <span class="hl sym">(</span>str<span class="hl sym">,</span> pos<span class="hl sym">,</span> left<span class="hl sym">,</span> out<span class="hl sym">);</span>
	fwrite_substring <span class="hl sym">(</span>str<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> WIDTH_sz <span class="hl sym">-</span> left<span class="hl sym">,</span> out<span class="hl sym">);</span> fputc <span class="hl sym">(</span>'\n'<span class="hl sym">,</span> out<span class="hl sym">);</span>
	loop <span class="hl sym">(</span>out<span class="hl sym">,</span> n <span class="hl sym">-</span> WIDTH_sz<span class="hl sym">,</span> WIDTH_sz <span class="hl sym">-</span> left<span class="hl sym">)</span>
      <span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span><span class="hl kwa">if</span><span class="hl sym">]</span>
    <span class="hl kwa">end else let</span>
      <span class="hl kwa">val</span> left <span class="hl sym">=</span> len <span class="hl sym">-</span> pos <span class="hl kwa">in</span>
      <span class="hl kwa">if</span> left <span class="hl sym">&gt;=</span> n <span class="hl kwa">then begin</span>
        fwrite_substring <span class="hl sym">(</span>str<span class="hl sym">,</span> pos<span class="hl sym">,</span> n<span class="hl sym">,</span> out<span class="hl sym">);</span> fputc <span class="hl sym">(</span>'\n'<span class="hl sym">,</span> out<span class="hl sym">)</span>
      <span class="hl kwa">end else begin</span>
        fwrite_substring <span class="hl sym">(</span>str<span class="hl sym">,</span> pos<span class="hl sym">,</span> left<span class="hl sym">,</span> out<span class="hl sym">);</span>
	fwrite_substring <span class="hl sym">(</span>str<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> n<span class="hl sym">-</span>left<span class="hl sym">,</span> out<span class="hl sym">);</span> fputc <span class="hl sym">(</span>'\n'<span class="hl sym">,</span> out<span class="hl sym">)</span>
      <span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span><span class="hl kwa">if</span><span class="hl sym">]</span>
    <span class="hl kwa">end</span> <span class="hl com">(* end of [if] *)</span>
  <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>loop<span class="hl sym">]</span>
<span class="hl kwa">in</span>
  loop <span class="hl sym">(</span>out<span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">)</span>
<span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>repeat_fasta<span class="hl sym">]</span>

<span class="hl kwa">fun</span> random_char <span class="hl sym">{</span>n<span class="hl sym">:</span>pos<span class="hl sym">} {</span>l<span class="hl sym">:</span>addr<span class="hl sym">} (</span>
    pf_tbl<span class="hl sym">: !</span>aminoarr<span class="hl sym">(</span>n<span class="hl sym">)</span> &#64; l <span class="hl sym">|</span> p_tbl<span class="hl sym">:</span> ptr l<span class="hl sym">,</span> n<span class="hl sym">:</span> size_t n<span class="hl sym">,</span> prob<span class="hl sym">:</span> float
  <span class="hl sym">) :</span> char <span class="hl sym">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">prval</span> <span class="hl sym">(</span>pf1<span class="hl sym">,</span> pf2<span class="hl sym">) =</span> array_v_uncons <span class="hl sym">{</span>amino<span class="hl sym">} (</span>pf_tbl<span class="hl sym">)</span>
<span class="hl kwa">in</span>
  <span class="hl kwa">if</span> prob <span class="hl sym">&gt;=</span> p_tbl<span class="hl sym">-&gt;</span>p <span class="hl kwa">then let</span>
    <span class="hl kwa">prval</span> <span class="hl sym">() =</span> __meta_info <span class="hl sym">()</span> <span class="hl kwa">where</span> <span class="hl sym">{</span>
      <span class="hl kwa">extern prfun</span> __meta_info <span class="hl sym">(): [</span>n <span class="hl sym">&gt;</span> <span class="hl num">1</span><span class="hl sym">]</span> void <span class="hl sym">//</span> a piece <span class="hl kwa">of</span> meta information
    <span class="hl sym">}</span>
    <span class="hl kwa">val</span> ans <span class="hl sym">=</span> random_char <span class="hl sym">(</span>pf2 <span class="hl sym">|</span> p_tbl <span class="hl sym">+</span> sizeof<span class="hl sym">&lt;</span>amino<span class="hl sym">&gt;,</span> n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> prob<span class="hl sym">)</span>
    <span class="hl kwa">prval</span> <span class="hl sym">() =</span> pf_tbl <span class="hl sym">:=</span> array_v_cons <span class="hl sym">{</span>amino<span class="hl sym">} (</span>pf1<span class="hl sym">,</span> pf2<span class="hl sym">)</span>
  <span class="hl kwa">in</span>
    ans
  <span class="hl kwa">end else let</span>
    <span class="hl kwa">val</span> ans <span class="hl sym">=</span> p_tbl<span class="hl sym">-&gt;</span>c
    <span class="hl kwa">prval</span> <span class="hl sym">() =</span> pf_tbl <span class="hl sym">:=</span> array_v_cons <span class="hl sym">{</span>amino<span class="hl sym">} (</span>pf1<span class="hl sym">,</span> pf2<span class="hl sym">)</span>
  <span class="hl kwa">in</span>
    ans
  <span class="hl kwa">end</span> <span class="hl com">(* end of [if] *)</span>
<span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>random_char<span class="hl sym">]</span>

<span class="hl kwa">fun</span> random_buf
  <span class="hl sym">{</span>n<span class="hl sym">:</span>pos<span class="hl sym">} {</span>i<span class="hl sym">,</span>len<span class="hl sym">,</span>bsz<span class="hl sym">:</span>nat <span class="hl sym">|</span> i <span class="hl sym">&lt;=</span> len<span class="hl sym">;</span> len <span class="hl sym">&lt;=</span> bsz<span class="hl sym">}</span>
  <span class="hl sym">(</span>tbl<span class="hl sym">: &amp;</span>aminoarr<span class="hl sym">(</span>n<span class="hl sym">),</span> buf<span class="hl sym">: &amp;</span>bytes<span class="hl sym">(</span>bsz<span class="hl sym">),</span> n<span class="hl sym">:</span> size_t n<span class="hl sym">,</span> len<span class="hl sym">:</span> size_t len<span class="hl sym">,</span> i<span class="hl sym">:</span> size_t i<span class="hl sym">)</span>
  <span class="hl sym">:</span> void <span class="hl sym">=</span>
  <span class="hl kwa">if</span> i <span class="hl sym">&lt;</span> len <span class="hl kwa">then let</span>
    <span class="hl kwa">val</span> c <span class="hl sym">=</span> random_char <span class="hl sym">(</span>view&#64; tbl <span class="hl sym">| &amp;</span>tbl<span class="hl sym">,</span> n<span class="hl sym">,</span> random_gen <span class="hl sym">(</span><span class="hl num">1.0</span><span class="hl sym">:</span> float<span class="hl sym">))</span>
    <span class="hl kwa">val</span> <span class="hl sym">() =</span> buf<span class="hl sym">.[</span>i<span class="hl sym">] :=</span> byte_of_char c
  <span class="hl kwa">in</span>
    random_buf <span class="hl sym">(</span>tbl<span class="hl sym">,</span> buf<span class="hl sym">,</span> n<span class="hl sym">,</span> len<span class="hl sym">,</span> i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>
  <span class="hl kwa">end</span> <span class="hl com">(* end of [if] *)</span>
<span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>random_buf<span class="hl sym">]</span>

<span class="hl kwa">fn</span> random_fasta <span class="hl sym">{</span>n<span class="hl sym">:</span>pos<span class="hl sym">} {</span>len<span class="hl sym">:</span>nat<span class="hl sym">} (</span>
    out<span class="hl sym">:</span> FILEref<span class="hl sym">,</span> tbl<span class="hl sym">: &amp;</span>aminoarr<span class="hl sym">(</span>n<span class="hl sym">),</span> n<span class="hl sym">:</span> size_t n<span class="hl sym">,</span> len<span class="hl sym">:</span> size_t len
  <span class="hl sym">) :</span> void <span class="hl sym">= ()</span> <span class="hl kwa">where</span> <span class="hl sym">{</span>
  <span class="hl kwa">macdef</span> WIDTH_sz <span class="hl sym">=</span> size1_of_int1 <span class="hl sym">(</span>WIDTH<span class="hl sym">)</span>
  <span class="hl kwa">fun</span> loop <span class="hl sym">{</span>len<span class="hl sym">:</span>nat<span class="hl sym">} .&lt;</span>len<span class="hl sym">&gt;. (</span>
      out<span class="hl sym">:</span> FILEref
    <span class="hl sym">,</span> tbl<span class="hl sym">: &amp;</span>aminoarr<span class="hl sym">(</span>n<span class="hl sym">),</span> buf<span class="hl sym">: &amp;</span>bytes<span class="hl sym">(</span>WIDTH<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">),</span> n<span class="hl sym">:</span> size_t n<span class="hl sym">,</span> len<span class="hl sym">:</span> size_t len
    <span class="hl sym">) :</span> void <span class="hl sym">=</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>len <span class="hl sym">&gt;</span> WIDTH_sz<span class="hl sym">)</span> <span class="hl kwa">then let</span>
      <span class="hl kwa">val</span> <span class="hl sym">() =</span> random_buf <span class="hl sym">(</span>tbl<span class="hl sym">,</span> buf<span class="hl sym">,</span> n<span class="hl sym">,</span> WIDTH_sz<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">)</span>
      <span class="hl kwa">val</span> _<span class="hl com">(*int*)</span> <span class="hl sym">=</span> fwrite_byte <span class="hl sym">(</span>buf<span class="hl sym">,</span> WIDTH_sz<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> out<span class="hl sym">)</span>
    <span class="hl kwa">in</span>
      loop <span class="hl sym">(</span>out<span class="hl sym">,</span> tbl<span class="hl sym">,</span> buf<span class="hl sym">,</span> n<span class="hl sym">,</span> len<span class="hl sym">-</span>WIDTH_sz<span class="hl sym">)</span>
    <span class="hl kwa">end else let</span>
      <span class="hl kwa">val</span> <span class="hl sym">() =</span> random_buf <span class="hl sym">(</span>tbl<span class="hl sym">,</span> buf<span class="hl sym">,</span> n<span class="hl sym">,</span> len<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">)</span>
      <span class="hl kwa">val</span> _<span class="hl com">(*int*)</span> <span class="hl sym">=</span> fwrite_byte <span class="hl sym">(</span>buf<span class="hl sym">,</span> len<span class="hl sym">,</span> out<span class="hl sym">)</span>
      <span class="hl kwa">val</span> <span class="hl sym">() =</span> fputc <span class="hl sym">(</span>'\n'<span class="hl sym">,</span> out<span class="hl sym">)</span>
    <span class="hl kwa">in</span>
      <span class="hl sym">//</span> empty
    <span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>loop<span class="hl sym">]</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> make_cumulative <span class="hl sym">(</span>tbl<span class="hl sym">,</span> n<span class="hl sym">)</span>
  <span class="hl kwa">var</span> <span class="hl sym">!</span>p_buf <span class="hl kwa">with</span> pf_buf <span class="hl sym">=</span> &#64;<span class="hl sym">[</span>byte<span class="hl sym">][</span>WIDTH<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">]()</span>
  <span class="hl kwa">prval</span> <span class="hl sym">() =</span> pf_buf <span class="hl sym">:=</span> bytes_v_of_b0ytes_v <span class="hl sym">(</span>pf_buf<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> p_buf<span class="hl sym">-&gt;[</span>WIDTH_sz<span class="hl sym">] :=</span> byte_of_char '\n'
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> loop <span class="hl sym">(</span>out<span class="hl sym">,</span> tbl<span class="hl sym">, !</span>p_buf<span class="hl sym">,</span> n<span class="hl sym">,</span> len<span class="hl sym">)</span>
<span class="hl sym">} //</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>random_fasta<span class="hl sym">]</span>

<span class="hl kwa">val</span> alu <span class="hl sym">=</span><span class="hl str">&quot;\</span>
<span class="hl str">GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG\</span>
<span class="hl str">GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA\</span>
<span class="hl str">CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT\</span>
<span class="hl str">ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA\</span>
<span class="hl str">GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG\</span>
<span class="hl str">AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC\</span>
<span class="hl str">AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>

<span class="hl sym">//</span>

<span class="hl kwa">implement</span> main <span class="hl sym">(</span>argc<span class="hl sym">,</span> argv<span class="hl sym">) = ()</span> <span class="hl kwa">where</span> <span class="hl sym">{</span>

<span class="hl kwa">val</span> <span class="hl sym">() =</span> assert <span class="hl sym">(</span>argc <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">)</span>
<span class="hl kwa">val</span> n <span class="hl sym">=</span> int1_of_string <span class="hl sym">(</span>argv<span class="hl sym">.[</span><span class="hl num">1</span><span class="hl sym">])</span>
<span class="hl kwa">val</span> <span class="hl sym">() =</span> assert <span class="hl sym">(</span>n <span class="hl sym">&gt;=</span> <span class="hl num">0</span><span class="hl sym">)</span>
<span class="hl kwa">val</span> &#64;<span class="hl sym">(</span>pf_gc<span class="hl sym">,</span> pf_iub <span class="hl sym">|</span> p_iub<span class="hl sym">,</span> iub_sz<span class="hl sym">) =</span> $arrsz<span class="hl sym">{</span>amino<span class="hl sym">}(</span>
  &#64;<span class="hl sym">{</span>c<span class="hl sym">=</span>'a'<span class="hl sym">,</span> p<span class="hl sym">=</span><span class="hl num">0.27</span><span class="hl sym">}</span>
<span class="hl sym">,</span> &#64;<span class="hl sym">{</span>c<span class="hl sym">=</span>'c'<span class="hl sym">,</span> p<span class="hl sym">=</span><span class="hl num">0.12</span><span class="hl sym">}</span>
<span class="hl sym">,</span> &#64;<span class="hl sym">{</span>c<span class="hl sym">=</span>'g'<span class="hl sym">,</span> p<span class="hl sym">=</span><span class="hl num">0.12</span><span class="hl sym">}</span>
<span class="hl sym">,</span> &#64;<span class="hl sym">{</span>c<span class="hl sym">=</span>'t'<span class="hl sym">,</span> p<span class="hl sym">=</span><span class="hl num">0.27</span><span class="hl sym">}</span>
<span class="hl sym">,</span> &#64;<span class="hl sym">{</span>c<span class="hl sym">=</span>'B'<span class="hl sym">,</span> p<span class="hl sym">=</span><span class="hl num">0.02</span><span class="hl sym">}</span>
<span class="hl sym">,</span> &#64;<span class="hl sym">{</span>c<span class="hl sym">=</span>'D'<span class="hl sym">,</span> p<span class="hl sym">=</span><span class="hl num">0.02</span><span class="hl sym">}</span>
<span class="hl sym">,</span> &#64;<span class="hl sym">{</span>c<span class="hl sym">=</span>'H'<span class="hl sym">,</span> p<span class="hl sym">=</span><span class="hl num">0.02</span><span class="hl sym">}</span>
<span class="hl sym">,</span> &#64;<span class="hl sym">{</span>c<span class="hl sym">=</span>'K'<span class="hl sym">,</span> p<span class="hl sym">=</span><span class="hl num">0.02</span><span class="hl sym">}</span>
<span class="hl sym">,</span> &#64;<span class="hl sym">{</span>c<span class="hl sym">=</span>'M'<span class="hl sym">,</span> p<span class="hl sym">=</span><span class="hl num">0.02</span><span class="hl sym">}</span>
<span class="hl sym">,</span> &#64;<span class="hl sym">{</span>c<span class="hl sym">=</span>'N'<span class="hl sym">,</span> p<span class="hl sym">=</span><span class="hl num">0.02</span><span class="hl sym">}</span>
<span class="hl sym">,</span> &#64;<span class="hl sym">{</span>c<span class="hl sym">=</span>'R'<span class="hl sym">,</span> p<span class="hl sym">=</span><span class="hl num">0.02</span><span class="hl sym">}</span>
<span class="hl sym">,</span> &#64;<span class="hl sym">{</span>c<span class="hl sym">=</span>'S'<span class="hl sym">,</span> p<span class="hl sym">=</span><span class="hl num">0.02</span><span class="hl sym">}</span>
<span class="hl sym">,</span> &#64;<span class="hl sym">{</span>c<span class="hl sym">=</span>'V'<span class="hl sym">,</span> p<span class="hl sym">=</span><span class="hl num">0.02</span><span class="hl sym">}</span>
<span class="hl sym">,</span> &#64;<span class="hl sym">{</span>c<span class="hl sym">=</span>'W'<span class="hl sym">,</span> p<span class="hl sym">=</span><span class="hl num">0.02</span><span class="hl sym">}</span>
<span class="hl sym">,</span> &#64;<span class="hl sym">{</span>c<span class="hl sym">=</span>'Y'<span class="hl sym">,</span> p<span class="hl sym">=</span><span class="hl num">0.02</span><span class="hl sym">}</span>
<span class="hl sym">) //</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span><span class="hl kwa">val</span><span class="hl sym">]</span>

<span class="hl kwa">val</span> &#64;<span class="hl sym">(</span>pf_homo_gc<span class="hl sym">,</span> pf_homo <span class="hl sym">|</span> p_homo<span class="hl sym">,</span> homo_sz<span class="hl sym">) =</span> $arrsz<span class="hl sym">{</span>amino<span class="hl sym">}(</span>
  &#64;<span class="hl sym">{</span>c<span class="hl sym">=</span>'a'<span class="hl sym">,</span> p<span class="hl sym">=</span><span class="hl num">0.3029549426680</span><span class="hl sym">}</span>
<span class="hl sym">,</span> &#64;<span class="hl sym">{</span>c<span class="hl sym">=</span>'c'<span class="hl sym">,</span> p<span class="hl sym">=</span><span class="hl num">0.1979883004921</span><span class="hl sym">}</span>
<span class="hl sym">,</span> &#64;<span class="hl sym">{</span>c<span class="hl sym">=</span>'g'<span class="hl sym">,</span> p<span class="hl sym">=</span><span class="hl num">0.1975473066391</span><span class="hl sym">}</span>
<span class="hl sym">,</span> &#64;<span class="hl sym">{</span>c<span class="hl sym">=</span>'t'<span class="hl sym">,</span> p<span class="hl sym">=</span><span class="hl num">0.3015094502008</span><span class="hl sym">}</span>
<span class="hl sym">) //</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span><span class="hl kwa">val</span><span class="hl sym">]</span>

<span class="hl dir">#define i2sz size1_of_int1</span>
<span class="hl kwa">val</span> <span class="hl sym">() =</span> fprint <span class="hl sym">(</span>stdout_ref<span class="hl sym">,</span> <span class="hl str">&quot;&gt;ONE Homo sapiens alu</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span>
<span class="hl kwa">val</span> <span class="hl sym">() =</span> repeat_fasta <span class="hl sym">(</span>stdout_ref<span class="hl sym">,</span> alu<span class="hl sym">,</span> i2sz <span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> n<span class="hl sym">))</span>
<span class="hl kwa">val</span> <span class="hl sym">() =</span> fprint <span class="hl sym">(</span>stdout_ref<span class="hl sym">,</span> <span class="hl str">&quot;&gt;TWO IUB ambiguity codes</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span>
<span class="hl kwa">val</span> <span class="hl sym">() =</span> random_fasta <span class="hl sym">(</span>stdout_ref<span class="hl sym">, !</span>p_iub<span class="hl sym">,</span> iub_sz<span class="hl sym">,</span> i2sz <span class="hl sym">(</span><span class="hl num">3</span> <span class="hl sym">*</span> n<span class="hl sym">))</span>
<span class="hl kwa">val</span> <span class="hl sym">() =</span> array_ptr_free <span class="hl sym">{</span>amino<span class="hl sym">} (</span>pf_gc<span class="hl sym">,</span> pf_iub <span class="hl sym">|</span> p_iub<span class="hl sym">)</span>
<span class="hl kwa">val</span> <span class="hl sym">() =</span> fprint <span class="hl sym">(</span>stdout_ref<span class="hl sym">,</span> <span class="hl str">&quot;&gt;THREE Homo sapiens frequency</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span>
<span class="hl kwa">val</span> <span class="hl sym">() =</span> random_fasta <span class="hl sym">(</span>stdout_ref<span class="hl sym">, !</span>p_homo<span class="hl sym">,</span> homo_sz<span class="hl sym">,</span> i2sz <span class="hl sym">(</span>n <span class="hl sym">*</span> <span class="hl num">5</span><span class="hl sym">))</span>
<span class="hl kwa">val</span> <span class="hl sym">() =</span> array_ptr_free <span class="hl sym">{</span>amino<span class="hl sym">} (</span>pf_homo_gc<span class="hl sym">,</span> pf_homo <span class="hl sym">|</span> p_homo<span class="hl sym">)</span>

<span class="hl sym">} //</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>main<span class="hl sym">]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl sym">%{</span>^

ats_void_type
fasta_fwrite_substring <span class="hl sym">(</span>
  ats_ptr_type str<span class="hl sym">,</span> ats_size_type beg
<span class="hl sym">,</span> ats_size_type len<span class="hl sym">,</span> ats_ptr_type out
<span class="hl sym">) {</span>
  fwrite_unlocked<span class="hl sym">(((</span>char*)str<span class="hl sym">)+</span>beg<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> len<span class="hl sym">, (</span>FILE*)out<span class="hl sym">) ;</span> return <span class="hl sym">;</span>
<span class="hl sym">}</span>

ats_void_type
fasta_fputc <span class="hl sym">(</span>ats_char_type c<span class="hl sym">,</span> ats_ptr_type out<span class="hl sym">) {</span>
  fputc_unlocked <span class="hl sym">((</span>char<span class="hl sym">)</span>c<span class="hl sym">, (</span>FILE*)out<span class="hl sym">) ;</span> return <span class="hl sym">;</span>
<span class="hl sym">}</span>

ats_size_type
fasta_fwrite_byte
  <span class="hl sym">(</span>ats_ptr_type buf<span class="hl sym">,</span> ats_size_type n<span class="hl sym">,</span> ats_ptr_type fil<span class="hl sym">) {</span>
  return fwrite_unlocked <span class="hl sym">((</span>void*)buf<span class="hl sym">, (</span>size_t<span class="hl sym">)</span><span class="hl num">1</span><span class="hl sym">, (</span>size_t<span class="hl sym">)</span>n<span class="hl sym">, (</span>FILE*)fil<span class="hl sym">) ;</span>
<span class="hl sym">}</span>

<span class="hl sym">%}</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl com">(* end of [fasta2.dats] *)</span>
