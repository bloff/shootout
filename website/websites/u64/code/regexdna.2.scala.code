<span class="hl com">/*</span>
<span class="hl com">   The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Paul Phillips (directly ported from the Java version)</span>
<span class="hl com"> */</span>

<span class="hl kwa">import</span> java<span class="hl sym">.</span>io<span class="hl sym">.{</span> <span class="hl kwc">BufferedReader</span><span class="hl sym">,</span> <span class="hl kwc">InputStreamReader</span> <span class="hl sym">}</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span>concurrent<span class="hl sym">.</span><span class="hl kwc">CyclicBarrier</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span>concurrent<span class="hl sym">.</span>atomic<span class="hl sym">.</span><span class="hl kwc">AtomicIntegerArray</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span>regex<span class="hl sym">.</span><span class="hl kwc">Pattern</span>
<span class="hl kwa">import</span> scala<span class="hl sym">.</span>collection<span class="hl sym">.</span>mutable<span class="hl sym">.</span>ArrayBuffer

<span class="hl kwa">object</span> regexdna
<span class="hl sym">{</span>
  lazy <span class="hl kwa">val</span> processors <span class="hl sym">=</span> <span class="hl kwc">Runtime</span><span class="hl sym">.</span>getRuntime<span class="hl sym">().</span>availableProcessors
  <span class="hl slc">// source data is duplicated into 2 arrays</span>
  <span class="hl kwa">val</span> source_as_segments <span class="hl sym">=</span> <span class="hl kwa">new</span> ArrayBuffer<span class="hl sym">[</span><span class="hl kwc">StringBuilder</span><span class="hl sym">]</span>
  <span class="hl kwa">val</span> source_as_lines <span class="hl sym">=</span> <span class="hl kwa">new</span> ArrayBuffer<span class="hl sym">[</span><span class="hl kwc">StringBuilder</span><span class="hl sym">]</span>

  <span class="hl kwa">def</span> runPool<span class="hl sym">(</span>f<span class="hl sym">: () =&gt;</span> <span class="hl kwc">Thread</span><span class="hl sym">) {</span>
    <span class="hl kwa">val</span> pool <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>range<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> processors<span class="hl sym">)</span> map <span class="hl sym">(</span>_ <span class="hl sym">=&gt;</span> f<span class="hl sym">())</span>
    pool foreach <span class="hl sym">(</span>_<span class="hl sym">.</span>start<span class="hl sym">)</span>
    pool foreach <span class="hl sym">(</span>_<span class="hl sym">.</span>join<span class="hl sym">)</span>
  <span class="hl sym">}</span>

  <span class="hl slc">// read data from stdin to StringBuilder</span>
  <span class="hl slc">// return initial data size</span>
  <span class="hl kwa">private def</span> ReadInput<span class="hl sym">(</span>sb<span class="hl sym">:</span> <span class="hl kwc">StringBuilder</span><span class="hl sym">):</span> Int <span class="hl sym">= {</span>
    <span class="hl kwa">val</span> reader <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">BufferedReader</span> <span class="hl sym">(</span><span class="hl kwa">new</span> <span class="hl kwc">InputStreamReader</span> <span class="hl sym">(</span><span class="hl kwc">System</span><span class="hl sym">.</span>in<span class="hl sym">,</span> <span class="hl str">&quot;US-ASCII&quot;</span><span class="hl sym">))</span>
    <span class="hl kwa">val</span> buf <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">Array</span><span class="hl sym">[</span>Char<span class="hl sym">](</span><span class="hl num">64</span> <span class="hl sym">*</span> <span class="hl num">1024</span><span class="hl sym">)</span>
    <span class="hl kwa">var</span> read<span class="hl sym">,</span> total <span class="hl sym">=</span> <span class="hl num">0</span>

    <span class="hl kwa">while</span> <span class="hl sym">(</span>true<span class="hl sym">) {</span>
      read <span class="hl sym">=</span> reader read buf
      <span class="hl kwa">if</span> <span class="hl sym">(</span>read <span class="hl sym">== -</span><span class="hl num">1</span><span class="hl sym">)</span>
        <span class="hl kwa">return</span> total

      total <span class="hl sym">+=</span> read
      sb<span class="hl sym">.</span>append<span class="hl sym">(</span>buf<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> read<span class="hl sym">)</span>
    <span class="hl sym">}</span>
    <span class="hl num">0</span>
  <span class="hl sym">}</span>

  <span class="hl slc">// strip header and newline</span>
  <span class="hl slc">// duplicate each data line into 2 arrays</span>
  <span class="hl kwa">private def</span> StripHeader<span class="hl sym">(</span>sb<span class="hl sym">:</span> <span class="hl kwc">StringBuilder</span><span class="hl sym">):</span> Int <span class="hl sym">= {</span>
    <span class="hl kwa">val</span> pat <span class="hl sym">=</span> <span class="hl kwc">Pattern</span><span class="hl sym">.</span>compile<span class="hl sym">(</span><span class="hl str">&quot;(&gt;.*</span><span class="hl esc">\n</span><span class="hl str">)|</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span>
    <span class="hl kwa">val</span> mt <span class="hl sym">=</span> pat matcher sb
    <span class="hl kwa">var</span> desti<span class="hl sym">:</span> <span class="hl kwc">StringBuilder</span> <span class="hl sym">=</span> null
    <span class="hl kwa">val</span> tmp <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">StringBuffer</span><span class="hl sym">()</span>

    <span class="hl kwa">while</span> <span class="hl sym">(</span>mt<span class="hl sym">.</span>find<span class="hl sym">()) {</span>
      mt<span class="hl sym">.</span>appendReplacement<span class="hl sym">(</span>tmp<span class="hl sym">,</span> <span class="hl str">&quot;&quot;</span><span class="hl sym">)</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>mt<span class="hl sym">.</span>start<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">) &gt;=</span> <span class="hl num">0</span><span class="hl sym">) {</span>
        desti <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">StringBuilder</span>
        source_as_segments <span class="hl sym">+=</span> desti
      <span class="hl sym">}</span>
      desti append tmp
      source_as_lines <span class="hl sym">+=</span> <span class="hl kwa">new</span> <span class="hl kwc">StringBuilder</span><span class="hl sym">(</span>tmp<span class="hl sym">.</span>toString<span class="hl sym">())</span>
      tmp setLength <span class="hl num">0</span>
    <span class="hl sym">}</span>
    source_as_segments map <span class="hl sym">(</span>_<span class="hl sym">.</span>length<span class="hl sym">)</span> reduceLeft <span class="hl sym">(</span>_ <span class="hl sym">+</span> _<span class="hl sym">)</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">private def</span> CountMatch<span class="hl sym">() {</span>
    <span class="hl kwa">val</span> patterns <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">(</span>
      <span class="hl str">&quot;agggtaaa|tttaccct&quot;</span> <span class="hl sym">,</span>
      <span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="hl sym">,</span>
      <span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="hl sym">,</span>
      <span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="hl sym">,</span>
      <span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="hl sym">,</span>
      <span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="hl sym">,</span>
      <span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="hl sym">,</span>
      <span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="hl sym">,</span>
      <span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span>
    <span class="hl sym">)</span>
    <span class="hl kwa">val</span> patCount <span class="hl sym">=</span> patterns<span class="hl sym">.</span>length
    <span class="hl kwa">val</span> results <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">AtomicIntegerArray</span><span class="hl sym">(</span>patCount<span class="hl sym">)</span>
    <span class="hl kwa">val</span> tasks <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">AtomicIntegerArray</span><span class="hl sym">(</span>patCount<span class="hl sym">)</span>

    <span class="hl kwa">class</span> RegexDnaCount <span class="hl kwa">extends</span> <span class="hl kwc">Thread</span> <span class="hl sym">{</span>
      <span class="hl kwa">override def</span> run<span class="hl sym">() {</span>
        <span class="hl kwa">for</span> <span class="hl sym">(</span>pt <span class="hl sym">&lt;-</span> <span class="hl num">0</span> until patCount<span class="hl sym">) {</span>
          <span class="hl kwa">val</span> expression <span class="hl sym">=</span> <span class="hl kwc">Pattern</span> compile patterns<span class="hl sym">(</span>pt<span class="hl sym">)</span>
          <span class="hl kwa">val</span> total_seg <span class="hl sym">=</span> source_as_segments<span class="hl sym">.</span>size
          <span class="hl kwa">val</span> mt <span class="hl sym">=</span> expression<span class="hl sym">.</span>matcher<span class="hl sym">(</span><span class="hl str">&quot;&quot;</span><span class="hl sym">)</span>

          <span class="hl kwa">def</span> doSeq<span class="hl sym">():</span> <span class="hl kwc">Boolean</span> <span class="hl sym">= {</span>
            <span class="hl kwa">val</span> seq <span class="hl sym">=</span> tasks getAndIncrement pt
            <span class="hl kwa">if</span> <span class="hl sym">(</span>seq <span class="hl sym">&gt;=</span> total_seg<span class="hl sym">)</span>
              <span class="hl kwa">return</span> false

            mt reset source_as_segments<span class="hl sym">(</span>seq<span class="hl sym">)</span>
            <span class="hl kwa">while</span> <span class="hl sym">(</span>mt<span class="hl sym">.</span>find<span class="hl sym">())</span>
              results incrementAndGet pt

            true
          <span class="hl sym">}</span>

          <span class="hl kwa">while</span> <span class="hl sym">(</span>doSeq<span class="hl sym">()) { }</span>
        <span class="hl sym">}</span>
      <span class="hl sym">}</span>
    <span class="hl sym">}</span>

    runPool<span class="hl sym">(() =&gt;</span> <span class="hl kwa">new</span> RegexDnaCount<span class="hl sym">)</span>
    <span class="hl kwa">for</span> <span class="hl sym">((</span>p<span class="hl sym">,</span> i<span class="hl sym">) &lt;-</span> patterns<span class="hl sym">.</span>zipWithIndex<span class="hl sym">)</span>
      println<span class="hl sym">(</span><span class="hl str">&quot;%s %s&quot;</span><span class="hl sym">.</span>format<span class="hl sym">(</span>p<span class="hl sym">,</span> results get i<span class="hl sym">))</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">private val</span> pat_search<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">String</span><span class="hl sym">] =</span>
    <span class="hl str">&quot;WYKMSRBDVHN&quot;</span><span class="hl sym">.</span>toArray map <span class="hl sym">(</span>c <span class="hl sym">=&gt;</span> <span class="hl kwa">new</span> <span class="hl kwc">String</span><span class="hl sym">(</span><span class="hl kwc">Array</span><span class="hl sym">(</span>c<span class="hl sym">)))</span>

  <span class="hl kwa">private val</span> pat_replace <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">(</span>
    <span class="hl str">&quot;(a|t)&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|t)&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(g|t)&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c)&quot;</span><span class="hl sym">,</span>
    <span class="hl str">&quot;(c|g)&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|g)&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl sym">,</span>
    <span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|g|t)&quot;</span>
  <span class="hl sym">)</span>
  <span class="hl kwa">private val</span> searchCount <span class="hl sym">=</span> pat_search<span class="hl sym">.</span>length

  <span class="hl kwa">private def</span> Replace<span class="hl sym">():</span> Int <span class="hl sym">= {</span>
    <span class="hl kwa">val</span> tasks <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">AtomicIntegerArray</span><span class="hl sym">(</span>searchCount<span class="hl sym">)</span>
    <span class="hl kwa">val</span> result <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">AtomicIntegerArray</span><span class="hl sym">(</span>searchCount<span class="hl sym">)</span>
    <span class="hl kwa">val</span> barrier <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">CyclicBarrier</span><span class="hl sym">(</span>processors<span class="hl sym">)</span>

    <span class="hl kwa">class</span> RegexDnaReplace <span class="hl kwa">extends</span> <span class="hl kwc">Thread</span> <span class="hl sym">{</span>
      <span class="hl kwa">override def</span> run<span class="hl sym">() {</span>
        <span class="hl kwa">val</span> des_buf <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">StringBuffer</span>

        <span class="hl kwa">for</span> <span class="hl sym">(</span>pt <span class="hl sym">&lt;-</span> <span class="hl num">0</span> until searchCount<span class="hl sym">) {</span>
          <span class="hl kwa">val</span> pattern <span class="hl sym">=</span> <span class="hl kwc">Pattern</span> compile pat_search<span class="hl sym">(</span>pt<span class="hl sym">)</span>
          <span class="hl kwa">val</span> m <span class="hl sym">=</span> pattern<span class="hl sym">.</span>matcher<span class="hl sym">(</span><span class="hl str">&quot;&quot;</span><span class="hl sym">);</span>
          <span class="hl kwa">val</span> total_line <span class="hl sym">=</span> source_as_lines<span class="hl sym">.</span>size

          <span class="hl kwa">def</span> doLine<span class="hl sym">():</span> <span class="hl kwc">Boolean</span> <span class="hl sym">= {</span>
            <span class="hl kwa">val</span> line <span class="hl sym">=</span> tasks<span class="hl sym">.</span>getAndIncrement<span class="hl sym">(</span>pt<span class="hl sym">)</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>line <span class="hl sym">&gt;=</span> total_line<span class="hl sym">)</span>
              <span class="hl kwa">return</span> false

            <span class="hl kwa">val</span> src_buf <span class="hl sym">=</span> source_as_lines<span class="hl sym">(</span>line<span class="hl sym">)</span>
            m reset src_buf
            <span class="hl kwa">var</span> change <span class="hl sym">=</span> false

            <span class="hl kwa">while</span> <span class="hl sym">(</span>m<span class="hl sym">.</span>find<span class="hl sym">()) {</span>
              m<span class="hl sym">.</span>appendReplacement<span class="hl sym">(</span>des_buf<span class="hl sym">,</span> pat_replace<span class="hl sym">(</span>pt<span class="hl sym">))</span>
              change <span class="hl sym">=</span> true
            <span class="hl sym">}</span>

            <span class="hl kwa">if</span> <span class="hl sym">(</span>change<span class="hl sym">) {</span>
              m appendTail des_buf
              src_buf setLength <span class="hl num">0</span>
              src_buf append des_buf
            <span class="hl sym">}</span>

            <span class="hl kwa">if</span> <span class="hl sym">(</span>pt <span class="hl sym">==</span> searchCount <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span>
              result<span class="hl sym">.</span>addAndGet<span class="hl sym">(</span>pt<span class="hl sym">,</span> src_buf<span class="hl sym">.</span>length<span class="hl sym">)</span>

            des_buf setLength <span class="hl num">0</span>
            true
          <span class="hl sym">}</span>
          <span class="hl kwa">while</span> <span class="hl sym">(</span>doLine<span class="hl sym">()) { }</span>
        <span class="hl sym">}</span>

        barrier<span class="hl sym">.</span>await
      <span class="hl sym">}</span>
    <span class="hl sym">}</span>

    runPool<span class="hl sym">(() =&gt;</span> <span class="hl kwa">new</span> RegexDnaReplace<span class="hl sym">)</span>
    <span class="hl num">0</span> until searchCount map result<span class="hl sym">.</span>get reduceLeft<span class="hl sym">(</span>_ <span class="hl sym">+</span> _<span class="hl sym">)</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">def</span> main<span class="hl sym">(</span>args<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">String</span><span class="hl sym">]) {</span>
    <span class="hl kwa">var</span> sb <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">StringBuilder</span>
    <span class="hl kwa">val</span> init_len <span class="hl sym">=</span> ReadInput<span class="hl sym">(</span>sb<span class="hl sym">)</span>
    <span class="hl kwa">val</span> strip_len <span class="hl sym">=</span> StripHeader<span class="hl sym">(</span>sb<span class="hl sym">)</span>
    sb <span class="hl sym">=</span> null

    CountMatch<span class="hl sym">()</span>
    source_as_segments<span class="hl sym">.</span>clear<span class="hl sym">()</span>
    <span class="hl kwa">val</span> replace_len <span class="hl sym">=</span> Replace<span class="hl sym">()</span>
    source_as_lines<span class="hl sym">.</span>clear<span class="hl sym">()</span>

    println<span class="hl sym">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">%d</span><span class="hl esc">\n</span><span class="hl str">%d</span><span class="hl esc">\n</span><span class="hl str">%d&quot;</span><span class="hl sym">.</span>format<span class="hl sym">(</span>init_len<span class="hl sym">,</span> strip_len<span class="hl sym">,</span> replace_len<span class="hl sym">))</span>
  <span class="hl sym">}</span>
<span class="hl sym">}</span>
