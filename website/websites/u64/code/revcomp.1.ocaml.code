<span class="hl com">(* reverse-complement.ml</span>
<span class="hl com"> *</span>
<span class="hl com"> * The Great Computer Language Shootout</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Contributed by Troestler Christophe</span>
<span class="hl com"> *)</span>


<span class="hl kwa">let</span> complement <span class="hl sym">=</span>
  <span class="hl kwa">let</span> cplt <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>init <span class="hl num">256</span> <span class="hl sym">(</span><span class="hl kwa">fun</span> i <span class="hl sym">-&gt;</span> <span class="hl kwc">Char</span><span class="hl sym">.</span>chr i<span class="hl sym">)</span> <span class="hl kwa">in</span>
  <span class="hl kwc">List</span><span class="hl sym">.</span>iter <span class="hl sym">(</span><span class="hl kwa">fun</span> <span class="hl sym">(</span>c1<span class="hl sym">,</span> c2<span class="hl sym">) -&gt;</span>
	       cplt<span class="hl sym">.(</span><span class="hl kwc">Char</span><span class="hl sym">.</span>code c1<span class="hl sym">) &lt;-</span> c2<span class="hl sym">;</span>
	       cplt<span class="hl sym">.(</span><span class="hl kwc">Char</span><span class="hl sym">.</span>code c2<span class="hl sym">) &lt;-</span> c1<span class="hl sym">;</span>
	       cplt<span class="hl sym">.(</span><span class="hl kwc">Char</span><span class="hl sym">.</span>code<span class="hl sym">(</span><span class="hl kwc">Char</span><span class="hl sym">.</span>lowercase c1<span class="hl sym">)) &lt;-</span> c2<span class="hl sym">;</span>
	       cplt<span class="hl sym">.(</span><span class="hl kwc">Char</span><span class="hl sym">.</span>code<span class="hl sym">(</span><span class="hl kwc">Char</span><span class="hl sym">.</span>lowercase c2<span class="hl sym">)) &lt;-</span> c1<span class="hl sym">;  )</span>
    <span class="hl sym">[ (</span><span class="hl kwb">'A'</span><span class="hl sym">,</span><span class="hl kwb">'T'</span><span class="hl sym">); (</span><span class="hl kwb">'C'</span><span class="hl sym">,</span><span class="hl kwb">'G'</span><span class="hl sym">); (</span><span class="hl kwb">'B'</span><span class="hl sym">,</span><span class="hl kwb">'V'</span><span class="hl sym">); (</span><span class="hl kwb">'D'</span><span class="hl sym">,</span><span class="hl kwb">'H'</span><span class="hl sym">); (</span><span class="hl kwb">'K'</span><span class="hl sym">,</span><span class="hl kwb">'M'</span><span class="hl sym">); (</span><span class="hl kwb">'R'</span><span class="hl sym">,</span><span class="hl kwb">'Y'</span><span class="hl sym">) ];</span>
  cplt

<span class="hl com">(* [reverse s] reverse-complement the string [s] in place. *)</span>
<span class="hl kwa">let</span> reverse s <span class="hl sym">=</span>
  <span class="hl kwa">let rec</span> rev i j <span class="hl sym">=</span>
    <span class="hl kwa">if</span> i <span class="hl sym">&lt;</span> j <span class="hl kwa">then</span> <span class="hl sym">(</span>
      <span class="hl kwa">let</span> si <span class="hl sym">=</span> s<span class="hl sym">.[</span>i<span class="hl sym">]</span> <span class="hl kwa">in</span>
      s<span class="hl sym">.[</span>i<span class="hl sym">] &lt;-</span> complement<span class="hl sym">.(</span><span class="hl kwc">Char</span><span class="hl sym">.</span>code s<span class="hl sym">.[</span>j<span class="hl sym">]);</span>
      s<span class="hl sym">.[</span>j<span class="hl sym">] &lt;-</span> complement<span class="hl sym">.(</span><span class="hl kwc">Char</span><span class="hl sym">.</span>code si<span class="hl sym">);</span>
      rev <span class="hl sym">(</span>i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">) (</span>j <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span>
    <span class="hl sym">)</span> <span class="hl kwa">in</span>
  rev <span class="hl num">0</span> <span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">.</span>length s <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">);</span>
  s

<span class="hl kwa">let</span> print_fasta <span class="hl sym">=</span>
  <span class="hl kwa">let rec</span> print60 pos len dna <span class="hl sym">=</span>
    <span class="hl kwa">if</span> len <span class="hl sym">&gt;</span> <span class="hl num">60</span> <span class="hl kwa">then</span> <span class="hl sym">(</span>
      output stdout dna pos <span class="hl num">60</span><span class="hl sym">;</span> print_string <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
      print60 <span class="hl sym">(</span>pos <span class="hl sym">+</span> <span class="hl num">60</span><span class="hl sym">) (</span>len <span class="hl sym">-</span> <span class="hl num">60</span><span class="hl sym">)</span> dna
    <span class="hl sym">)</span>
    <span class="hl kwa">else</span> <span class="hl sym">(</span>output stdout dna pos len<span class="hl sym">;</span> print_string <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span> <span class="hl kwa">in</span>
  <span class="hl kwa">fun</span> dna <span class="hl sym">-&gt;</span> print60 <span class="hl num">0</span> <span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">.</span>length dna<span class="hl sym">)</span> dna


<span class="hl kwa">let</span> <span class="hl sym">() =</span>
  <span class="hl kwa">let</span> buf <span class="hl sym">=</span> <span class="hl kwc">Buffer</span><span class="hl sym">.</span>create <span class="hl num">4096</span> <span class="hl kwa">in</span>
  <span class="hl kwa">try while true do</span>
    <span class="hl kwa">let</span> line <span class="hl sym">=</span> input_line stdin <span class="hl kwa">in</span>
    <span class="hl kwa">if</span> <span class="hl kwc">String</span><span class="hl sym">.</span>length line <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl sym">&amp;&amp;</span> line<span class="hl sym">.[</span><span class="hl num">0</span><span class="hl sym">] =</span> '<span class="hl sym">&gt;</span>' <span class="hl kwa">then</span> <span class="hl sym">(</span>
      <span class="hl kwa">if</span> <span class="hl kwc">Buffer</span><span class="hl sym">.</span>length buf <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span> print_fasta<span class="hl sym">(</span>reverse<span class="hl sym">(</span><span class="hl kwc">Buffer</span><span class="hl sym">.</span>contents buf<span class="hl sym">));</span>
      <span class="hl kwc">Buffer</span><span class="hl sym">.</span>clear buf<span class="hl sym">;</span>
      print_endline line
    <span class="hl sym">)</span>
    <span class="hl kwa">else</span> <span class="hl kwc">Buffer</span><span class="hl sym">.</span>add_string buf line
  <span class="hl kwa">done with</span> <span class="hl kwd">End_of_file</span> <span class="hl sym">-&gt;</span> print_fasta<span class="hl sym">(</span>reverse<span class="hl sym">(</span><span class="hl kwc">Buffer</span><span class="hl sym">.</span>contents buf<span class="hl sym">))</span>

