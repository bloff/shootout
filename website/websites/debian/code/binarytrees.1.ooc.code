<span class="com">(* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org</span>
<span class="com"></span>
<span class="com">   Unoptimised reference implementation</span>
<span class="com"></span>
<span class="com">   contributed by Isaac Gouy (Oberon-2 novice)</span>
<span class="com">*)</span>


<span class="kwa">MODULE</span> binarytrees<span class="sym">;</span>
<span class="kwa">IMPORT</span> Shootout<span class="sym">,</span> Out<span class="sym">;</span>

<span class="kwa">CONST</span>
   minDepth <span class="sym">=</span> <span class="num">4</span><span class="sym">;</span>

<span class="kwa">TYPE</span>
   TreeNode <span class="sym">=</span> <span class="kwb">POINTER</span> <span class="kwa">TO</span> TreeNodeDesc<span class="sym">;</span>
   TreeNodeDesc <span class="sym">=</span> <span class="kwa">RECORD</span>
      left<span class="sym">,</span> right<span class="sym">:</span> TreeNode<span class="sym">;</span>
      item<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;</span>
   <span class="kwa">END</span><span class="sym">;</span>

<span class="kwa">VAR</span>
   n<span class="sym">,</span> maxDepth<span class="sym">,</span> stretchDepth<span class="sym">,</span> depth<span class="sym">,</span> iterations<span class="sym">,</span> check<span class="sym">,</span> i<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;</span>
   stretchTree<span class="sym">,</span> longLivedTree<span class="sym">,</span> tempTree<span class="sym">:</span> TreeNode<span class="sym">;</span>


<span class="kwa">PROCEDURE</span> <span class="kwd">NewTreeNode</span><span class="sym">(</span>item<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">):</span> TreeNode<span class="sym">;</span>
<span class="kwa">VAR</span> t<span class="sym">:</span> TreeNode<span class="sym">;</span>
<span class="kwa">BEGIN</span>
   <span class="kwa">NEW</span><span class="sym">(</span>t<span class="sym">);</span> t<span class="sym">.</span>item <span class="sym">:=</span> item<span class="sym">;</span>
   <span class="kwa">RETURN</span> t<span class="sym">;</span>
<span class="kwa">END</span> NewTreeNode<span class="sym">;</span>


<span class="kwa">PROCEDURE</span> <span class="kwd">NewTree</span><span class="sym">(</span>left<span class="sym">,</span> right<span class="sym">:</span> TreeNode<span class="sym">;</span> item<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">):</span> TreeNode<span class="sym">;</span>
<span class="kwa">VAR</span> t<span class="sym">:</span> TreeNode<span class="sym">;</span>
<span class="kwa">BEGIN</span>
   <span class="kwa">NEW</span><span class="sym">(</span>t<span class="sym">);</span> t<span class="sym">.</span>item <span class="sym">:=</span> item<span class="sym">;</span> t<span class="sym">.</span>left <span class="sym">:=</span> left<span class="sym">;</span> t<span class="sym">.</span>right <span class="sym">:=</span> right<span class="sym">;</span>
   <span class="kwa">RETURN</span> t<span class="sym">;</span>
<span class="kwa">END</span> NewTree<span class="sym">;</span>


<span class="kwa">PROCEDURE</span> <span class="kwd">BottomUpTree</span><span class="sym">(</span>item<span class="sym">,</span> depth<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">):</span> TreeNode<span class="sym">;</span>
<span class="kwa">BEGIN</span>
   <span class="kwa">IF</span> depth <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">THEN</span>
      <span class="kwa">RETURN</span> <span class="kwd">NewTree</span><span class="sym">(</span>
          <span class="kwd">BottomUpTree</span><span class="sym">(</span><span class="num">2</span><span class="sym">*</span>item<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>depth<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
         <span class="sym">,</span><span class="kwd">BottomUpTree</span><span class="sym">(</span><span class="num">2</span><span class="sym">*</span>item<span class="sym">,</span>depth<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
         <span class="sym">,</span>item
      <span class="sym">);</span>
   <span class="kwa">ELSE</span>
      <span class="kwa">RETURN</span> <span class="kwd">NewTreeNode</span><span class="sym">(</span>item<span class="sym">);</span>
   <span class="kwa">END</span><span class="sym">;</span>
<span class="kwa">END</span> BottomUpTree<span class="sym">;</span>


<span class="kwa">PROCEDURE</span> <span class="sym">(</span>t<span class="sym">:</span>TreeNode<span class="sym">)</span> <span class="kwd">ItemCheck</span><span class="sym">():</span> <span class="kwb">LONGINT</span><span class="sym">;</span>
<span class="kwa">BEGIN</span>
   <span class="kwa">IF</span> t<span class="sym">.</span>left <span class="sym">=</span> <span class="kwa">NIL THEN RETURN</span> t<span class="sym">.</span>item<span class="sym">;</span>
   <span class="kwa">ELSE RETURN</span> t<span class="sym">.</span>item <span class="sym">+</span> t<span class="sym">.</span>left<span class="sym">.</span><span class="kwd">ItemCheck</span><span class="sym">() -</span> t<span class="sym">.</span>right<span class="sym">.</span><span class="kwd">ItemCheck</span><span class="sym">();</span>
   <span class="kwa">END</span><span class="sym">;</span>
<span class="kwa">END</span> ItemCheck<span class="sym">;</span>


<span class="kwa">PROCEDURE</span> <span class="kwd">ShowCheck</span><span class="sym">(</span>i<span class="sym">,</span>depth<span class="sym">,</span>check<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">);</span>
<span class="kwa">BEGIN</span>
   Out<span class="sym">.</span><span class="kwd">Int</span><span class="sym">(</span>i<span class="sym">,</span><span class="num">1</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">Char</span><span class="sym">(</span><span class="num">9</span>X<span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot; trees of depth &quot;</span><span class="sym">);</span>
   Out<span class="sym">.</span><span class="kwd">Int</span><span class="sym">(</span>depth<span class="sym">,</span><span class="num">1</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">Char</span><span class="sym">(</span><span class="num">9</span>X<span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot; check: &quot;</span><span class="sym">);</span>
   Out<span class="sym">.</span><span class="kwd">Int</span><span class="sym">(</span>check<span class="sym">,</span><span class="num">1</span><span class="sym">);</span>  Out<span class="sym">.</span>Ln<span class="sym">;</span>
<span class="kwa">END</span> ShowCheck<span class="sym">;</span>


<span class="kwa">PROCEDURE</span> <span class="kwd">ShowItemCheck</span><span class="sym">(</span>depth<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;</span> t<span class="sym">:</span> TreeNode<span class="sym">;</span> s<span class="sym">:</span> <span class="kwa">ARRAY OF</span> <span class="kwb">CHAR</span><span class="sym">);</span>
<span class="kwa">BEGIN</span>
   Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span>s<span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">Int</span><span class="sym">(</span>depth<span class="sym">,</span><span class="num">1</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">Char</span><span class="sym">(</span><span class="num">9</span>X<span class="sym">);</span>  Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot; check: &quot;</span><span class="sym">);</span>
   Out<span class="sym">.</span><span class="kwd">Int</span><span class="sym">(</span>t<span class="sym">.</span><span class="kwd">ItemCheck</span><span class="sym">(),</span><span class="num">1</span><span class="sym">);</span>  Out<span class="sym">.</span>Ln<span class="sym">;</span>
<span class="kwa">END</span> ShowItemCheck<span class="sym">;</span>


<span class="kwa">BEGIN</span>
   n <span class="sym">:=</span> Shootout<span class="sym">.</span><span class="kwd">Argi</span><span class="sym">();</span>

   <span class="kwa">IF</span> minDepth<span class="sym">+</span><span class="num">2</span> <span class="sym">&gt;</span> n <span class="kwa">THEN</span> maxDepth <span class="sym">:=</span> minDepth<span class="sym">+</span><span class="num">2</span><span class="sym">;</span> <span class="kwa">ELSE</span> maxDepth <span class="sym">:=</span> n<span class="sym">;</span> <span class="kwa">END</span><span class="sym">;</span>
   stretchDepth <span class="sym">:=</span> maxDepth <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>

   stretchTree <span class="sym">:=</span> <span class="kwd">BottomUpTree</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span>stretchDepth<span class="sym">);</span>
   <span class="kwd">ShowItemCheck</span><span class="sym">(</span>stretchDepth<span class="sym">,</span> stretchTree<span class="sym">,</span> <span class="str">&quot;stretch tree of depth &quot;</span><span class="sym">);</span>
   stretchTree <span class="sym">:=</span> <span class="kwa">NIL</span><span class="sym">;</span>

   longLivedTree <span class="sym">:=</span> <span class="kwd">BottomUpTree</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span>maxDepth<span class="sym">);</span>

   <span class="kwa">FOR</span> depth<span class="sym">:=</span>minDepth <span class="kwa">TO</span> maxDepth BY <span class="num">2</span> <span class="kwa">DO</span>
      iterations <span class="sym">:=</span> <span class="kwa">ASH</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> maxDepth<span class="sym">-</span>depth<span class="sym">+</span>minDepth<span class="sym">);</span>
      check <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
      <span class="kwa">FOR</span> i<span class="sym">:=</span><span class="num">1</span> <span class="kwa">TO</span> iterations <span class="kwa">DO</span>
         tempTree <span class="sym">:=</span> <span class="kwd">BottomUpTree</span><span class="sym">(</span>i<span class="sym">,</span>depth<span class="sym">);</span>
         <span class="kwa">INC</span><span class="sym">(</span>check<span class="sym">,</span> tempTree<span class="sym">.</span><span class="kwd">ItemCheck</span><span class="sym">());</span>
         tempTree <span class="sym">:=</span> <span class="kwa">NIL</span><span class="sym">;</span>

         tempTree <span class="sym">:=</span> <span class="kwd">BottomUpTree</span><span class="sym">(-</span>i<span class="sym">,</span>depth<span class="sym">);</span>
         <span class="kwa">INC</span><span class="sym">(</span>check<span class="sym">,</span> tempTree<span class="sym">.</span><span class="kwd">ItemCheck</span><span class="sym">());</span>
         tempTree <span class="sym">:=</span> <span class="kwa">NIL</span><span class="sym">;</span>
      <span class="kwa">END</span><span class="sym">;</span>
      <span class="kwd">ShowCheck</span><span class="sym">(</span>iterations<span class="sym">*</span><span class="num">2</span><span class="sym">,</span>depth<span class="sym">,</span>check<span class="sym">);</span>
   <span class="kwa">END</span><span class="sym">;</span>

   <span class="kwd">ShowItemCheck</span><span class="sym">(</span>maxDepth<span class="sym">,</span> longLivedTree<span class="sym">,</span> <span class="str">&quot;long lived tree of depth &quot;</span><span class="sym">);</span>
<span class="kwa">END</span> binarytrees<span class="sym">.</span>
