<span class="str">&quot;* The Computer Language Shootout</span>
<span class="str">    http://shootout.alioth.debian.org/</span>
<span class="str">    contributed by Isaac Gouy</span>
<span class="str">    modified by Paolo Bonzini</span>
<span class="str">    modified by Eliot Miranda *&quot;</span><span class="sym">!</span>

Object subclass<span class="sym">:</span> <span class="slc">#RandomNumber   instanceVariableNames: 'seed scale'   classVariableNames: 'FModulus Increment Modulus Multiplier'   poolDictionaries: ''   category: 'Shootout'!</span>

ReadStream subclass<span class="sym">:</span> <span class="slc">#RepeatStream   instanceVariableNames: 'repeatPtr repeatLimit'   classVariableNames: ''   poolDictionaries: ''   category: 'Shootout'!</span>

RepeatStream subclass<span class="sym">:</span> <span class="slc">#RandomStream   instanceVariableNames: 'random percentages'   classVariableNames: ''   poolDictionaries: ''   category: 'Shootout'!!RandomNumber methodsFor: 'private'!to: anInteger   seed := 42.   scale := anInteger! !!RandomNumber methodsFor: 'accessing'!next   seed := (seed * Multiplier + Increment) \\ Modulus.   ^(seed * scale) / FModulus! !!RandomNumber class methodsFor: 'class initialization'!initialize   FModulus := 139968.0d0.   Increment := 29573.   Modulus := 139968.   Multiplier := 3877.! !!RandomNumber class methodsFor: 'initialize-release'!to: anInteger   ^self basicNew to: anInteger! !!RepeatStream methodsFor: 'accessing'!next   | element |</span>
   ptr <span class="sym">&gt;</span> endPtr ifTrue<span class="sym">: [</span> self position<span class="sym">:</span> <span class="num">0</span> <span class="sym">]</span>.
   element <span class="sym">:=</span> collection at<span class="sym">:</span> ptr.
   ptr <span class="sym">:=</span> ptr <span class="sym">+</span> <span class="num">1</span>. repeatPtr <span class="sym">:=</span> repeatPtr <span class="sym">+</span> <span class="num">1</span>.
   ^element<span class="sym">! !!</span>RepeatStream methodsFor<span class="sym">:</span> <span class="str">'testing'</span><span class="sym">!</span>atEnd   ^repeatPtr <span class="sym">&gt;=</span> repeatLimit<span class="sym">! !!</span>RepeatStream methodsFor<span class="sym">:</span> <span class="str">'initialize-release'</span><span class="sym">!</span>to<span class="sym">:</span> anInteger   repeatPtr <span class="sym">:=</span> <span class="num">0</span>.   repeatLimit <span class="sym">:=</span> anInteger<span class="sym">! !!</span>RandomStream methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span><span class="kwa">next</span>   <span class="sym">|</span> r <span class="sym">|</span>   r <span class="sym">:=</span> random <span class="kwa">next</span>.   repeatPtr <span class="sym">:=</span> repeatPtr <span class="sym">+</span> <span class="num">1</span>.   <span class="num">1</span> to<span class="sym">:</span> percentages size <span class="kwa">do</span><span class="sym">: [:</span>i<span class="sym">|      (</span>r <span class="sym">&lt; (</span>percentages at<span class="sym">:</span> i<span class="sym">))</span> ifTrue<span class="sym">: [</span>^collection at<span class="sym">:</span> i<span class="sym">]]! !!</span>RandomStream methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>random<span class="sym">:</span> aRandomNumber<span class="str">&quot;* Share the random number generator so we can get the expected results. *&quot;</span>   random <span class="sym">:=</span> aRandomNumber<span class="sym">! !!</span>RandomStream methodsFor<span class="sym">:</span> <span class="str">'private methods'</span><span class="sym">!</span>initCollection<span class="sym">:</span> aCollection limit<span class="sym">:</span> size   <span class="sym">|</span> cp <span class="sym">|</span>   repeatPtr <span class="sym">:=</span> <span class="num">0</span>.   random <span class="sym">:=</span> RandomNumber to<span class="sym">:</span> <span class="num">1.0</span>d0.   percentages <span class="sym">:=</span> Array new<span class="sym">:</span> size.   collection <span class="sym">:=</span> Array new<span class="sym">:</span> size.   cp <span class="sym">:=</span> <span class="num">0.0</span>d0.
   <span class="num">1</span> to<span class="sym">:</span> size <span class="kwa">do</span><span class="sym">: [:</span>i<span class="sym">|</span>      collection at<span class="sym">:</span> i put<span class="sym">: (</span>aCollection at<span class="sym">:</span> i<span class="sym">)</span> first.      percentages at<span class="sym">:</span> i put<span class="sym">: (</span>cp <span class="sym">:=</span> cp <span class="sym">+ (</span>aCollection at<span class="sym">:</span> i<span class="sym">)</span> <span class="kwa">last</span><span class="sym">)</span>.
   <span class="sym">]! !!</span>RepeatStream class methodsFor<span class="sym">:</span> <span class="str">'instance creation'</span><span class="sym">!</span>to<span class="sym">:</span> anInteger on<span class="sym">:</span> aCollection   ^<span class="sym">(</span>super on<span class="sym">:</span> aCollection<span class="sym">)</span> to<span class="sym">:</span> anInteger<span class="sym">! !</span>


<span class="sym">!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>
writeFasta<span class="sym">:</span> aString from<span class="sym">:</span> inStream to<span class="sym">:</span> outStream lineLength<span class="sym">:</span> lineLength
   <span class="sym">|</span> i <span class="sym">|</span>
   outStream nextPut<span class="sym">: $&gt;;</span> nextPutAll<span class="sym">:</span> aString<span class="sym">;</span> nl.
   i <span class="sym">:=</span> <span class="num">0</span>.
   <span class="sym">[</span>inStream atEnd<span class="sym">]</span> whileFalse<span class="sym">:</span>
      <span class="sym">[</span>i <span class="sym">==</span> lineLength ifTrue<span class="sym">: [</span>outStream nl. i <span class="sym">:=</span> <span class="num">0</span><span class="sym">]</span>.
      outStream nextPut<span class="sym">:</span> inStream <span class="kwa">next</span>.
      i <span class="sym">:=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">]</span>.
   outStream nl<span class="sym">! !</span>

<span class="sym">!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>
fasta<span class="sym">:</span> n to<span class="sym">:</span> out
   <span class="sym">|</span> r lineLength <span class="sym">|</span>
   lineLength <span class="sym">:=</span> <span class="num">60</span>.

   self
      writeFasta<span class="sym">:</span> <span class="str">'ONE Homo sapiens alu'</span>
      from<span class="sym">:</span>
         <span class="sym">(</span> RepeatStream
            to<span class="sym">:</span> n<span class="sym">*</span><span class="num">2</span>
            on<span class="sym">:</span><span class="str">'GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG'</span><span class="sym">,</span>
               <span class="str">'GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA'</span><span class="sym">,</span>
               <span class="str">'CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT'</span><span class="sym">,</span>
               <span class="str">'ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA'</span><span class="sym">,</span>
               <span class="str">'GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG'</span><span class="sym">,</span>
               <span class="str">'AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC'</span><span class="sym">,</span>
               <span class="str">'AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA'</span> <span class="sym">)</span>
      to<span class="sym">:</span> out
      lineLength<span class="sym">:</span> lineLength.

   r <span class="sym">:=</span> RandomNumber to<span class="sym">:</span> <span class="num">1</span>. <span class="str">&quot;Shared random sequence&quot;</span>

   self
      writeFasta<span class="sym">:</span> <span class="str">'TWO IUB ambiguity codes'</span>
      from<span class="sym">:</span>
         <span class="sym">((</span> RandomStream
            to<span class="sym">:</span> n<span class="sym">*</span><span class="num">3</span>
            on<span class="sym">:</span> <span class="slc">#(   #($a 0.27d0)</span>
                  <span class="slc">#($c 0.12d0)</span>
                  <span class="slc">#($g 0.12d0)</span>
                  <span class="slc">#($t 0.27d0)</span>

                  <span class="slc">#($B 0.02d0)</span>
                  <span class="slc">#($D 0.02d0)</span>
                  <span class="slc">#($H 0.02d0)</span>
                  <span class="slc">#($K 0.02d0)</span>
                  <span class="slc">#($M 0.02d0)</span>
                  <span class="slc">#($N 0.02d0)</span>
                  <span class="slc">#($R 0.02d0)</span>
                  <span class="slc">#($S 0.02d0)</span>
                  <span class="slc">#($V 0.02d0)</span>
                  <span class="slc">#($W 0.02d0)</span>
                  <span class="slc">#($Y 0.02d0)))</span>
         random<span class="sym">:</span> r<span class="sym">;</span>
         yourself<span class="sym">)</span>
      to<span class="sym">:</span> out
      lineLength<span class="sym">:</span> lineLength.

   self
      writeFasta<span class="sym">:</span> <span class="str">'THREE Homo sapiens frequency'</span>
      from<span class="sym">:</span>
         <span class="sym">((</span> RandomStream
            to<span class="sym">:</span> n<span class="sym">*</span><span class="num">5</span>
            on<span class="sym">:</span> <span class="slc">#(   #($a 0.3029549426680d0)</span>
                  <span class="slc">#($c 0.1979883004921d0)</span>
                  <span class="slc">#($g 0.1975473066391d0)</span>
                  <span class="slc">#($t 0.3015094502008d0)))</span>
            random<span class="sym">:</span> r<span class="sym">;</span>
            yourself<span class="sym">)</span>
      to<span class="sym">:</span> out
      lineLength<span class="sym">:</span> lineLength.

   out flush. <span class="sym">! !</span>
<span class="sym">!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmark scripts'</span><span class="sym">!</span>
fasta   self fasta<span class="sym">:</span> self arg to<span class="sym">:</span> self stdout.   ^<span class="str">''</span><span class="sym">! !</span>

RandomNumber initialize<span class="sym">!</span>


Tests fasta<span class="sym">!</span>
