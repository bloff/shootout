<span class="com">(*</span>
<span class="com"> * The Computer Language Benchmarks Game</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * contributed by Christophe TROESTLER</span>
<span class="com"> * modified by Matthias Giovannini?</span>
<span class="com"> * ported to Gmp by David Teller</span>
<span class="com"> *)</span>
<span class="kwa">open</span> Printf
<span class="kwa">open</span> Gmp.Z2
<span class="kwa">open</span> Gmp.Z.Infixes

<span class="kwa">let</span> big_0      <span class="sym">=</span> Gmp.Z.zero
<span class="kwa">let</span> big_1      <span class="sym">=</span> Gmp.Z.one
<span class="kwa">let</span> big_3      <span class="sym">=</span> Gmp.Z.of_int <span class="num">3</span>
<span class="kwa">let</span> big_4      <span class="sym">=</span> Gmp.Z.of_int <span class="num">4</span>
<span class="kwa">let</span> big_10     <span class="sym">=</span> Gmp.Z.of_int <span class="num">10</span>
<span class="kwa">let</span> big_10_neg <span class="sym">=</span> Gmp.Z.<span class="kwd">of_int</span> <span class="sym">(-</span><span class="num">10</span><span class="sym">)</span>

<span class="kwa">let</span> q <span class="sym">=</span> Gmp.Z.of_int <span class="num">1</span>
<span class="kwa">and</span> r <span class="sym">=</span> Gmp.Z.of_int <span class="num">0</span>
<span class="kwa">and</span> s <span class="sym">=</span> Gmp.Z.of_int <span class="num">0</span>
<span class="kwa">and</span> t <span class="sym">=</span> Gmp.Z.of_int <span class="num">1</span>

<span class="kwa">let</span> u <span class="sym">=</span> <span class="kwd">create</span> <span class="sym">()</span> <span class="kwa">and</span> v <span class="sym">=</span> <span class="kwd">create</span> <span class="sym">()</span> <span class="kwa">and</span> w <span class="sym">=</span> <span class="kwd">create</span> <span class="sym">()</span>

<span class="kwa">let</span> k <span class="sym">=</span> ref <span class="num">0</span> <span class="kwa">and</span> digit <span class="sym">=</span> <span class="kwd">create</span> <span class="sym">()</span>

<span class="com">(* Entier part of the linear fractional transform qrst of x *)</span>
<span class="kwa">let</span> extract x ~out<span class="sym">:</span>item<span class="sym">=</span>
  mul u q x<span class="sym">;</span>
  add u u r<span class="sym">;</span>
  mul v s x<span class="sym">;</span>
  add v v t<span class="sym">;</span>
  tdiv_q item u v

<span class="kwa">let</span> <span class="kwd">next</span> <span class="sym">() =</span> extract big_3 ~out<span class="sym">:</span>digit
<span class="kwa">and</span> <span class="kwd">safe</span> <span class="sym">() =</span> extract big_4 ~out<span class="sym">:</span>w<span class="sym">;</span> Gmp.Z.equal w digit
<span class="kwa">and</span> <span class="kwd">produce</span> <span class="sym">() =</span>
  mul r r big_10<span class="sym">;</span>
  mul w big_10_neg digit<span class="sym">;</span>
  mul v t w<span class="sym">;</span>
  add r r v<span class="sym">;</span>
  mul q q big_10<span class="sym">;</span>
<span class="kwa">and</span> <span class="kwd">consume</span> <span class="sym">() =</span>
  incr k<span class="sym">;</span>
  <span class="kwa">let</span> big_k <span class="sym">=</span> Gmp.Z.of_int <span class="sym">!</span>k <span class="kwa">in</span>
  <span class="kwa">let</span> den <span class="sym">=</span> Gmp.Z.<span class="kwd">of_int</span> <span class="sym">(</span><span class="num">2</span> <span class="sym">* !</span>k <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">in</span>
  <span class="kwa">let</span> den2 <span class="sym">=</span> Gmp.Z.mul_2exp den <span class="num">1</span> <span class="kwa">in</span>
  mul r r den<span class="sym">;</span>
  mul u q den2<span class="sym">;</span>
  add r r u<span class="sym">;</span>
  mul t t den<span class="sym">;</span>
  mul v s den2<span class="sym">;</span>
  add t t v<span class="sym">;</span>
  mul s s big_k<span class="sym">;</span>
  mul q q big_k

<span class="kwa">let</span> digits n <span class="sym">=</span>
  <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">to</span> n <span class="kwa">do</span>
    <span class="kwd">next</span> <span class="sym">();</span>
    <span class="kwa">while</span> <span class="kwd">not</span> <span class="sym">(</span><span class="kwd">safe</span> <span class="sym">())</span> <span class="kwa">do</span>
      <span class="kwd">consume</span> <span class="sym">();</span>
      <span class="kwd">next</span> <span class="sym">();</span>
    <span class="kwa">done</span><span class="sym">;</span>
    <span class="kwd">produce</span> <span class="sym">();</span>
    <span class="kwd">print_string</span> <span class="sym">(</span>Gmp.Z.to_string digit<span class="sym">);</span>
    <span class="kwa">if</span> i <span class="kwa">mod</span> <span class="num">10</span> <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then</span>
      printf <span class="str">&quot;</span><span class="esc">\t</span><span class="str">:%i</span><span class="esc">\n</span><span class="str">&quot;</span> i<span class="sym">;</span>
  <span class="kwa">done</span><span class="sym">;</span>
  <span class="kwa">if</span> n <span class="kwa">mod</span> <span class="num">10</span> <span class="sym">!=</span> <span class="num">0</span> <span class="kwa">then</span>
    printf <span class="str">&quot;%*s</span><span class="esc">\t</span><span class="str">:%i</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">(</span><span class="num">10</span><span class="sym">-</span> n <span class="kwa">mod</span> <span class="num">10</span><span class="sym">)</span> <span class="str">&quot;&quot;</span> n

<span class="kwa">let</span> <span class="sym">() =</span> <span class="kwd">digits</span> <span class="sym">(</span><span class="kwa">try</span> <span class="kwd">int_of_string</span> <span class="sym">(</span>Array.get Sys.argv <span class="num">1</span><span class="sym">)</span> <span class="kwa">with</span> _ <span class="sym">-&gt;</span> <span class="num">27</span><span class="sym">)</span>
