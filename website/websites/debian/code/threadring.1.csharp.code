<span class="com">/* The Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> * contributed by Isaac Gouy</span>
<span class="com"> */</span>

<span class="kwa">using</span> System<span class="sym">;</span>
<span class="kwa">using</span> System<span class="sym">.</span>Threading<span class="sym">;</span>


<span class="kwa">internal class</span> NamedThread
<span class="sym">{</span>
   <span class="kwa">private</span> <span class="kwb">int</span> name<span class="sym">;</span>
   <span class="kwa">private</span> AutoResetEvent signal <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">AutoResetEvent</span><span class="sym">(</span><span class="kwa">false</span><span class="sym">);</span>
   <span class="kwa">private</span> <span class="kwb">int</span> token <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

   <span class="kwa">internal</span> <span class="kwd">NamedThread</span><span class="sym">(</span><span class="kwb">int</span> name<span class="sym">) {</span>
      <span class="kwa">this</span><span class="sym">.</span>name <span class="sym">=</span> name<span class="sym">;</span>
   <span class="sym">}</span>

   <span class="kwa">internal</span> <span class="kwb">void</span> <span class="kwd">Run</span><span class="sym">() {</span>
      <span class="kwa">while</span> <span class="sym">(</span><span class="kwd">TokenNotDone</span><span class="sym">())</span>
         <span class="kwd">NextThread</span><span class="sym">().</span><span class="kwd">TakeToken</span><span class="sym">(</span>token<span class="sym">-</span><span class="num">1</span><span class="sym">);</span>

      <span class="kwa">if</span> <span class="sym">(</span>token <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> Console<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span>name<span class="sym">);</span>
      <span class="kwd">NextThread</span><span class="sym">().</span><span class="kwd">TakeToken</span><span class="sym">(-</span><span class="num">1</span><span class="sym">);</span>
   <span class="sym">}</span>

   <span class="kwa">private</span> <span class="kwb">bool</span> <span class="kwd">TokenNotDone</span><span class="sym">() {</span>
      signal<span class="sym">.</span><span class="kwd">WaitOne</span><span class="sym">();</span>
      <span class="kwa">return</span> token <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">;</span>
   <span class="sym">}</span>

   <span class="kwa">internal</span> NamedThread <span class="kwd">NextThread</span><span class="sym">() {</span>
      <span class="kwa">return</span> ThreadRing<span class="sym">.</span>threadRing<span class="sym">[</span> name <span class="sym">%</span> ThreadRing<span class="sym">.</span>numberOfThreads <span class="sym">];</span>
   <span class="sym">}</span>

   <span class="kwa">internal</span> <span class="kwb">void</span> <span class="kwd">TakeToken</span><span class="sym">(</span><span class="kwb">int</span> x<span class="sym">) {</span>
      token <span class="sym">=</span> x<span class="sym">;</span>
      signal<span class="sym">.</span><span class="kwd">Set</span><span class="sym">();</span>
   <span class="sym">}</span>
<span class="sym">}</span>


<span class="kwa">public class</span> ThreadRing
<span class="sym">{</span>
   <span class="kwa">internal</span> <span class="kwb">const int</span> numberOfThreads <span class="sym">=</span> <span class="num">503</span><span class="sym">;</span>
   <span class="kwa">internal static</span> NamedThread<span class="sym">[]</span> threadRing <span class="sym">=</span> <span class="kwa">new</span> NamedThread<span class="sym">[</span><span class="num">503</span><span class="sym">];</span>

   <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">Main</span><span class="sym">(</span><span class="kwb">string</span><span class="sym">[]</span> args<span class="sym">) {</span>
      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> numberOfThreads<span class="sym">;</span> i<span class="sym">++){</span>
         threadRing<span class="sym">[</span>i<span class="sym">] =</span> <span class="kwa">new</span> <span class="kwd">NamedThread</span><span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">);</span>
      <span class="sym">}</span>

      <span class="kwa">foreach</span> <span class="sym">(</span>NamedThread t in threadRing<span class="sym">)</span>
         <span class="kwa">new</span> <span class="kwd">Thread</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwd">ThreadStart</span><span class="sym">(</span>t<span class="sym">.</span>Run<span class="sym">)).</span><span class="kwd">Start</span><span class="sym">();</span>

      threadRing<span class="sym">[</span><span class="num">0</span><span class="sym">].</span><span class="kwd">TakeToken</span><span class="sym">(</span> <span class="kwb">int</span><span class="sym">.</span><span class="kwd">Parse</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]) );</span>
   <span class="sym">}</span>
<span class="sym">}</span>
