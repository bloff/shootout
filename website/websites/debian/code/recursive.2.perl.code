<span class="slc"># The Computer Language Shootout</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc"># recursive test, by Andreas Koenig, Sep 24 2006</span>

<span class="slc">### Uses temp variables to help perl free memory earlier</span>

<span class="kwa">use</span> strict<span class="sym">;</span>

<span class="kwa">sub</span> Ack
<span class="sym">{</span>
	<span class="kwc">my</span> <span class="sym">(</span><span class="kwb">$x</span><span class="sym">,</span> <span class="kwb">$y</span><span class="sym">) =</span> <span class="kwb">&#64;_</span><span class="sym">;</span>

	<span class="kwa">return</span> <span class="kwb">$y</span> <span class="sym">+</span> <span class="num">1</span>         <span class="kwa">if</span> <span class="kwb">$x</span> <span class="sym">==</span> <span class="num">0</span><span class="sym">;</span>
	<span class="kwa">return</span> <span class="kwd">Ack</span><span class="sym">(</span><span class="kwb">$x</span> <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">if</span> <span class="kwb">$y</span> <span class="sym">==</span> <span class="num">0</span><span class="sym">;</span>

        <span class="kwc">my</span> <span class="kwb">$y2</span> <span class="sym">=</span> <span class="kwd">Ack</span><span class="sym">(</span><span class="kwb">$x</span><span class="sym">,</span> <span class="kwb">$y</span> <span class="sym">-</span> <span class="num">1</span><span class="sym">);</span>
	<span class="kwc">my</span> <span class="kwb">$ret</span> <span class="sym">=</span> <span class="kwd">Ack</span><span class="sym">(</span><span class="kwb">$x</span> <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> <span class="kwb">$y2</span><span class="sym">);</span>
        <span class="kwa">return</span> <span class="kwb">$ret</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwa">sub</span> Fib
<span class="sym">{</span>
	<span class="kwc">my</span> <span class="sym">(</span><span class="kwb">$n</span><span class="sym">) =</span> <span class="kwb">&#64;_</span><span class="sym">;</span>

	<span class="kwa">return</span> <span class="num">1</span> <span class="kwa">if</span> <span class="kwb">$n</span> <span class="sym">&lt;</span> <span class="num">2</span><span class="sym">;</span>

        <span class="kwc">my</span> <span class="kwb">$f1</span> <span class="sym">=</span> <span class="kwd">Fib</span><span class="sym">(</span><span class="kwb">$n</span> <span class="sym">-</span> <span class="num">1</span><span class="sym">);</span>
        <span class="kwc">my</span> <span class="kwb">$f2</span> <span class="sym">=</span> <span class="kwd">Fib</span><span class="sym">(</span><span class="kwb">$n</span> <span class="sym">-</span> <span class="num">2</span><span class="sym">);</span>
	<span class="kwa">return</span> <span class="kwb">$f2</span> <span class="sym">+</span> <span class="kwb">$f1</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwa">sub</span> Tak
<span class="sym">{</span>
	<span class="kwc">my</span> <span class="sym">(</span><span class="kwb">$x</span><span class="sym">,</span> <span class="kwb">$y</span><span class="sym">,</span> <span class="kwb">$z</span><span class="sym">) =</span> <span class="kwb">&#64;_</span><span class="sym">;</span>

        <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$y</span> <span class="sym">&lt;</span> <span class="kwb">$x</span><span class="sym">) {</span>
          <span class="kwc">my</span> <span class="kwb">$z1</span> <span class="sym">=</span> <span class="kwd">Tak</span><span class="sym">(</span><span class="kwb">$x</span> <span class="sym">-</span> <span class="num">1.0</span><span class="sym">,</span> <span class="kwb">$y</span><span class="sym">,</span> <span class="kwb">$z</span><span class="sym">);</span>
          <span class="kwc">my</span> <span class="kwb">$z2</span> <span class="sym">=</span> <span class="kwd">Tak</span><span class="sym">(</span><span class="kwb">$y</span> <span class="sym">-</span> <span class="num">1.0</span><span class="sym">,</span> <span class="kwb">$z</span><span class="sym">,</span> <span class="kwb">$x</span><span class="sym">);</span>
          <span class="kwc">my</span> <span class="kwb">$z3</span> <span class="sym">=</span> <span class="kwd">Tak</span><span class="sym">(</span><span class="kwb">$z</span> <span class="sym">-</span> <span class="num">1.0</span><span class="sym">,</span> <span class="kwb">$x</span><span class="sym">,</span> <span class="kwb">$y</span><span class="sym">);</span>
          <span class="kwc">my</span> <span class="kwb">$ret</span> <span class="sym">=</span> <span class="kwd">Tak</span><span class="sym">(</span><span class="kwb">$z1</span><span class="sym">,</span> <span class="kwb">$z2</span><span class="sym">,</span> <span class="kwb">$z3</span><span class="sym">);</span>
          <span class="kwa">return</span> <span class="kwb">$ret</span><span class="sym">;</span>
        <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
          <span class="kwa">return</span> <span class="kwb">$z</span><span class="sym">;</span>
        <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwc">my</span> <span class="kwb">$n</span> <span class="sym">= (</span><span class="kwb">$ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">] ||</span> <span class="num">0</span><span class="sym">) -</span> <span class="num">1</span><span class="sym">;</span>
printf <span class="str">&quot;Ack(%d,%d): %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>
	<span class="num">3</span><span class="sym">,</span> <span class="kwb">$n</span> <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> <span class="kwd">Ack</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span> <span class="kwb">$n</span> <span class="sym">+</span> <span class="num">1</span><span class="sym">);</span>
printf <span class="str">&quot;Fib(%.1f): %.1f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>
	<span class="num">28.0</span> <span class="sym">+</span> <span class="kwb">$n</span><span class="sym">,</span> <span class="kwd">Fib</span><span class="sym">(</span><span class="num">28.0</span> <span class="sym">+</span> <span class="kwb">$n</span><span class="sym">);</span>
printf <span class="str">&quot;Tak(%d,%d,%d): %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>
	<span class="kwb">$n</span> <span class="sym">*</span> <span class="num">3</span><span class="sym">,</span> <span class="kwb">$n</span> <span class="sym">*</span> <span class="num">2</span><span class="sym">,</span> <span class="kwb">$n</span><span class="sym">,</span> <span class="kwd">Tak</span><span class="sym">(</span><span class="kwb">$n</span> <span class="sym">*</span> <span class="num">3</span><span class="sym">,</span> <span class="kwb">$n</span> <span class="sym">*</span> <span class="num">2</span><span class="sym">,</span> <span class="kwb">$n</span><span class="sym">);</span>
printf <span class="str">&quot;Fib(%d): %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>
	<span class="num">3</span><span class="sym">,</span> <span class="kwd">Fib</span><span class="sym">(</span><span class="num">3</span><span class="sym">);</span>
printf <span class="str">&quot;Tak(%.1f,%.1f,%.1f): %.1f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>
	<span class="num">3.0</span><span class="sym">,</span><span class="num">2.0</span><span class="sym">,</span><span class="num">1.0</span><span class="sym">,</span> <span class="kwd">Tak</span><span class="sym">(</span><span class="num">3.0</span><span class="sym">,</span><span class="num">2.0</span><span class="sym">,</span><span class="num">1.0</span><span class="sym">);</span>
