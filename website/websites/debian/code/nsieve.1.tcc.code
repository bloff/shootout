<span class="slc">// The Computer Language Shootout</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>
<span class="slc">// Precedent C entry modified by bearophile for speed and size, 31 Jan 2006</span>
<span class="slc">// Compile with:  -O3 -s -std=c99 -fomit-frame-pointer</span>

<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>
<span class="dir">#include &lt;string.h&gt;</span>

<span class="kwc">typedef</span> <span class="kwb">unsigned char</span> boolean<span class="sym">;</span>


<span class="kwb">static void</span> <span class="kwd">nsieve</span><span class="sym">(</span><span class="kwb">int</span> m<span class="sym">) {</span>
    <span class="kwb">unsigned int</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> i<span class="sym">,</span> j<span class="sym">;</span>
    boolean <span class="sym">*</span> flags <span class="sym">= (</span>boolean <span class="sym">*)</span> <span class="kwd">malloc</span><span class="sym">(</span>m <span class="sym">*</span> <span class="kwa">sizeof</span><span class="sym">(</span>boolean<span class="sym">));</span>
    <span class="kwd">memset</span><span class="sym">(</span>flags<span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> m<span class="sym">);</span>

    <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span> i <span class="sym">&lt;</span> m<span class="sym">; ++</span>i<span class="sym">)</span>
        <span class="kwa">if</span> <span class="sym">(</span>flags<span class="sym">[</span>i<span class="sym">]) {</span>
            <span class="sym">++</span>count<span class="sym">;</span>
            <span class="kwa">for</span> <span class="sym">(</span>j <span class="sym">=</span> i <span class="sym">&lt;&lt;</span> <span class="num">1</span><span class="sym">;</span> j <span class="sym">&lt;</span> m<span class="sym">;</span> j <span class="sym">+=</span> i<span class="sym">)</span>
<span class="slc">//                if (flags[j])</span>
                   flags<span class="sym">[</span>j<span class="sym">] =</span> <span class="num">0</span><span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwd">free</span><span class="sym">(</span>flags<span class="sym">);</span>
    <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;Primes up to %8u %8u</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> m<span class="sym">,</span> count<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span> argv<span class="sym">[]) {</span>
    <span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwb">int</span> m <span class="sym">=</span> <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span>
    <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> <span class="num">3</span><span class="sym">;</span> i<span class="sym">++)</span>
        <span class="kwd">nsieve</span><span class="sym">(</span><span class="num">10000</span> <span class="sym">&lt;&lt; (</span>m<span class="sym">-</span>i<span class="sym">));</span>
    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>
