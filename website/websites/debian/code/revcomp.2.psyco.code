<span class="slc"># The Computer Language Shootout</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc"># contributed by Jacob Lee, Steven Bethard, et al</span>
<span class="slc"># modified by bearophile</span>

<span class="kwa">import</span> string<span class="sym">,</span> psyco
<span class="kwa">from</span> sys <span class="kwa">import</span> stdin

<span class="kwa">def</span> <span class="kwd">show</span><span class="sym">(</span>seq<span class="sym">,</span> table<span class="sym">):</span>
    seq <span class="sym">=</span> <span class="str">''</span><span class="sym">.</span><span class="kwd">join</span><span class="sym">(</span>seq<span class="sym">).</span><span class="kwd">translate</span><span class="sym">(</span>table<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)[::-</span><span class="num">1</span><span class="sym">]</span>
    result <span class="sym">= []</span>
    result_append <span class="sym">=</span> result<span class="sym">.</span>append
    <span class="kwa">for</span> i <span class="kwa">in</span> <span class="kwb">xrange</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="kwb">len</span><span class="sym">(</span>seq<span class="sym">),</span> <span class="num">60</span><span class="sym">):</span>
        <span class="kwd">result_append</span><span class="sym">(</span>seq<span class="sym">[</span>i<span class="sym">:</span>i<span class="sym">+</span><span class="num">60</span><span class="sym">])</span>
    <span class="kwa">if</span> result<span class="sym">:</span> <span class="kwa">print</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">.</span><span class="kwd">join</span><span class="sym">(</span>result<span class="sym">)</span>

<span class="kwa">def</span> <span class="kwd">main</span><span class="sym">():</span>
    tab <span class="sym">=</span> string<span class="sym">.</span><span class="kwd">maketrans</span><span class="sym">(</span><span class="str">'ACBDGHKMNSRUTWVYacbdghkmnsrutwvy'</span><span class="sym">,</span><span class="str">'TGVHCDMKNSYAAWBRTGVHCDMKNSYAAWBR'</span><span class="sym">)</span>
    seq <span class="sym">= []</span>
    add_line <span class="sym">=</span> seq<span class="sym">.</span>append
    <span class="kwa">for</span> line <span class="kwa">in</span> stdin<span class="sym">:</span>
        <span class="kwa">if</span> line<span class="sym">[</span><span class="num">0</span><span class="sym">]</span> <span class="kwa">in</span> <span class="str">'&gt;;'</span><span class="sym">:</span>
            <span class="kwd">show</span><span class="sym">(</span>seq<span class="sym">,</span> tab<span class="sym">)</span>
            <span class="kwa">print</span> line<span class="sym">,</span>
            <span class="kwa">del</span> seq<span class="sym">[:]</span>
        <span class="kwa">else</span><span class="sym">:</span>
            <span class="kwd">add_line</span><span class="sym">(</span>line<span class="sym">)</span>
    <span class="kwd">show</span><span class="sym">(</span>seq<span class="sym">,</span> tab<span class="sym">)</span>

psyco<span class="sym">.</span><span class="kwd">bind</span><span class="sym">(</span>show<span class="sym">);</span> psyco<span class="sym">.</span><span class="kwd">bind</span><span class="sym">(</span>main<span class="sym">)</span>
<span class="kwd">main</span><span class="sym">()</span>
