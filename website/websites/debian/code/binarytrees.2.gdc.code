<span class="com">/* The Computer Language Shootout Benchmarks</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Frits van Bommel (update from entry by Dave Fladebo)</span>
<span class="com">   compile: dmd -O -inline -release binarytrees.d</span>
<span class="com">*/</span>

<span class="kwa">import</span> std<span class="sym">.</span>string<span class="sym">,</span> std<span class="sym">.</span>stdio<span class="sym">;</span>
<span class="kwa">import</span> c <span class="sym">=</span> std<span class="sym">.</span>c<span class="sym">.</span>stdlib<span class="sym">;</span>

<span class="kwa">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwa">char</span><span class="sym">[][]</span> args<span class="sym">)</span>
<span class="sym">{</span>
    TreeNode<span class="sym">*</span>   stretchTree<span class="sym">,</span> longLivedTree<span class="sym">,</span> tempTree<span class="sym">;</span>
    <span class="kwa">int</span>         depth<span class="sym">,</span> minDepth<span class="sym">,</span> maxDepth<span class="sym">,</span> stretchDepth<span class="sym">,</span> N <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">1</span> ? <span class="kwd">atoi</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">;</span>

    minDepth <span class="sym">=</span> <span class="num">4</span><span class="sym">;</span>
    maxDepth <span class="sym">= (</span>minDepth <span class="sym">+</span> <span class="num">2</span><span class="sym">) &gt;</span> N ? minDepth <span class="sym">+</span> <span class="num">2</span> <span class="sym">:</span> N<span class="sym">;</span>
    stretchDepth <span class="sym">=</span> maxDepth <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>

    stretchTree <span class="sym">=</span> TreeNode<span class="sym">.</span><span class="kwd">BottomUpTree</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> stretchDepth<span class="sym">);</span>
    <span class="kwd">writefln</span><span class="sym">(</span><span class="str">&quot;stretch tree of depth &quot;</span><span class="sym">,</span>stretchDepth<span class="sym">,</span><span class="str">&quot;</span><span class="esc">\t</span> <span class="str">check: &quot;</span><span class="sym">,</span>stretchTree<span class="sym">.</span>ItemCheck<span class="sym">);</span>
    TreeNode<span class="sym">.</span><span class="kwd">DeleteTree</span><span class="sym">(</span>stretchTree<span class="sym">);</span>

    longLivedTree <span class="sym">=</span> TreeNode<span class="sym">.</span><span class="kwd">BottomUpTree</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> maxDepth<span class="sym">);</span>

    <span class="kwa">for</span><span class="sym">(</span>depth <span class="sym">=</span> minDepth<span class="sym">;</span> depth <span class="sym">&lt;=</span> maxDepth<span class="sym">;</span> depth <span class="sym">+=</span> <span class="num">2</span><span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwa">int</span> check<span class="sym">,</span> iterations <span class="sym">=</span> <span class="num">1</span> <span class="sym">&lt;&lt; (</span>maxDepth <span class="sym">-</span> depth <span class="sym">+</span> minDepth<span class="sym">);</span>

        <span class="kwa">for</span><span class="sym">(</span><span class="kwa">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> iterations<span class="sym">;</span> i<span class="sym">++)</span>
        <span class="sym">{</span>
            tempTree <span class="sym">=</span> TreeNode<span class="sym">.</span><span class="kwd">BottomUpTree</span><span class="sym">(</span>i<span class="sym">,</span> depth<span class="sym">);</span>
            check <span class="sym">+=</span> tempTree<span class="sym">.</span>ItemCheck<span class="sym">;</span>
            TreeNode<span class="sym">.</span><span class="kwd">DeleteTree</span><span class="sym">(</span>tempTree<span class="sym">);</span>

            tempTree <span class="sym">=</span> TreeNode<span class="sym">.</span><span class="kwd">BottomUpTree</span><span class="sym">(-</span>i<span class="sym">,</span> depth<span class="sym">);</span>
            check <span class="sym">+=</span> tempTree<span class="sym">.</span>ItemCheck<span class="sym">;</span>
            TreeNode<span class="sym">.</span><span class="kwd">DeleteTree</span><span class="sym">(</span>tempTree<span class="sym">);</span>
        <span class="sym">}</span>

        <span class="kwd">writefln</span><span class="sym">(</span>iterations <span class="sym">*</span> <span class="num">2</span><span class="sym">,</span><span class="str">&quot;</span><span class="esc">\t</span> <span class="str">trees of depth &quot;</span><span class="sym">,</span>depth<span class="sym">,</span><span class="str">&quot;</span><span class="esc">\t</span> <span class="str">check: &quot;</span><span class="sym">,</span>check<span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwd">writefln</span><span class="sym">(</span><span class="str">&quot;long lived tree of depth &quot;</span><span class="sym">,</span>maxDepth<span class="sym">,</span><span class="str">&quot;</span><span class="esc">\t</span> <span class="str">check: &quot;</span><span class="sym">,</span>longLivedTree<span class="sym">.</span>ItemCheck<span class="sym">);</span>
    TreeNode<span class="sym">.</span><span class="kwd">DeleteTree</span><span class="sym">(</span>longLivedTree<span class="sym">);</span>

    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwa">struct</span> TreeNode
<span class="sym">{</span>
<span class="kwa">public</span><span class="sym">:</span>
    <span class="kwa">static</span> TreeNode<span class="sym">*</span> <span class="kwd">BottomUpTree</span><span class="sym">(</span><span class="kwa">int</span> item<span class="sym">,</span> <span class="kwa">int</span> depth<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwa">if</span><span class="sym">(</span>depth <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span>
            <span class="kwa">return</span> <span class="kwd">TreeNode</span><span class="sym">(</span>item
                           <span class="sym">,</span><span class="kwd">BottomUpTree</span><span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> item <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> depth <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span>
                           <span class="sym">,</span><span class="kwd">BottomUpTree</span><span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> item<span class="sym">,</span> depth <span class="sym">-</span> <span class="num">1</span><span class="sym">));</span>
        <span class="kwa">return</span> <span class="kwd">TreeNode</span><span class="sym">(</span>item<span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwa">int</span> <span class="kwd">ItemCheck</span><span class="sym">()</span>
    <span class="sym">{</span>
        <span class="kwa">if</span><span class="sym">(</span>left<span class="sym">)</span>
            <span class="kwa">return</span> item <span class="sym">+</span> left<span class="sym">.</span><span class="kwd">ItemCheck</span><span class="sym">() -</span> right<span class="sym">.</span><span class="kwd">ItemCheck</span><span class="sym">();</span>
        <span class="kwa">return</span> item<span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">static void</span> <span class="kwd">DeleteTree</span><span class="sym">(</span>TreeNode<span class="sym">*</span> tree<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwa">if</span><span class="sym">(</span>tree<span class="sym">.</span>left<span class="sym">)</span>
        <span class="sym">{</span>
            <span class="kwd">DeleteTree</span><span class="sym">(</span>tree<span class="sym">.</span>left<span class="sym">);</span>
            <span class="kwd">DeleteTree</span><span class="sym">(</span>tree<span class="sym">.</span>right<span class="sym">);</span>
        <span class="sym">}</span>

        <span class="kwa">delete</span> tree<span class="sym">;</span>
    <span class="sym">}</span>

<span class="kwa">private</span><span class="sym">:</span>
    TreeNode<span class="sym">*</span>           left<span class="sym">,</span> right<span class="sym">;</span>
    <span class="kwa">int</span>                 item<span class="sym">;</span>

    <span class="kwa">static</span> TreeNode<span class="sym">*</span> <span class="kwd">opCall</span><span class="sym">(</span><span class="kwa">int</span> item<span class="sym">,</span> TreeNode<span class="sym">*</span> left <span class="sym">=</span> <span class="kwa">null</span><span class="sym">,</span> TreeNode<span class="sym">*</span> right <span class="sym">=</span> <span class="kwa">null</span><span class="sym">)</span>
    <span class="sym">{</span>
        TreeNode<span class="sym">*</span> t <span class="sym">=</span> <span class="kwa">new</span> TreeNode<span class="sym">;</span>
        t<span class="sym">.</span>left <span class="sym">=</span> left<span class="sym">;</span>
        t<span class="sym">.</span>right <span class="sym">=</span> right<span class="sym">;</span>
        t<span class="sym">.</span>item <span class="sym">=</span> item<span class="sym">;</span>
        <span class="kwa">return</span> t<span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">new</span><span class="sym">(</span><span class="kwa">uint</span> sz<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwa">return</span> c<span class="sym">.</span><span class="kwd">malloc</span><span class="sym">(</span>sz<span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwa">delete</span><span class="sym">(</span><span class="kwa">void</span><span class="sym">*</span> p<span class="sym">)</span>
    <span class="sym">{</span>
        c<span class="sym">.</span><span class="kwd">free</span><span class="sym">(</span>p<span class="sym">);</span>
    <span class="sym">}</span>
<span class="sym">}</span>
