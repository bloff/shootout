<span class="com">/**</span>
<span class="com"> * The Computer Language Benchmarks Game</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> * based on c++ g++ solution by Paul Kitchin</span>
<span class="com"> * contributed by Klaus Friedel</span>
<span class="com"> */</span>

<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;</span>

<span class="kwa">public class</span> revcomp <span class="sym">{</span>
  <span class="kwa">static final</span> <span class="kwb">int</span> line_length <span class="sym">=</span> <span class="num">60</span><span class="sym">;</span>
  <span class="kwa">static final</span> <span class="kwb">byte</span><span class="sym">[]</span> complement_map <span class="sym">= {</span>
      <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="str">'T'</span><span class="sym">,</span> <span class="str">'V'</span><span class="sym">,</span> <span class="str">'G'</span><span class="sym">,</span> <span class="str">'H'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="str">'C'</span><span class="sym">,</span> <span class="str">'D'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="str">'M'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span>
      <span class="str">'K'</span><span class="sym">,</span> <span class="str">'N'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="str">'Y'</span><span class="sym">,</span> <span class="str">'S'</span><span class="sym">,</span> <span class="str">'A'</span><span class="sym">,</span> <span class="str">'A'</span><span class="sym">,</span> <span class="str">'B'</span><span class="sym">,</span> <span class="str">'W'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="str">'R'</span>
      <span class="sym">};</span>

  <span class="kwa">static</span> <span class="kwb">byte</span> <span class="kwd">complement</span><span class="sym">(</span><span class="kwb">byte</span> character<span class="sym">) {</span>
    <span class="kwa">return</span> complement_map<span class="sym">[</span>character <span class="sym">&amp;</span> <span class="num">0x1f</span><span class="sym">];</span>
  <span class="sym">}</span>

  <span class="kwa">static class</span> Chunk <span class="sym">{</span>
    Chunk previous<span class="sym">;</span>
    Chunk next<span class="sym">;</span>
    <span class="kwb">int</span> length<span class="sym">;</span>
    <span class="kwb">byte</span><span class="sym">[]</span> data <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">byte</span><span class="sym">[</span><span class="num">65526</span><span class="sym">];</span>

    <span class="kwd">Chunk</span><span class="sym">() {</span>
    <span class="sym">}</span>


    <span class="kwd">Chunk</span><span class="sym">(</span>Chunk previous<span class="sym">) {</span>
      <span class="kwa">this</span><span class="sym">.</span>previous <span class="sym">=</span> previous<span class="sym">;</span>
      previous<span class="sym">.</span>next <span class="sym">=</span> <span class="kwa">this</span><span class="sym">;</span>
    <span class="sym">}</span>
  <span class="sym">}</span>

  <span class="kwa">static</span> <span class="kwb">void</span> <span class="kwd">write_reverse_complement</span><span class="sym">(</span><span class="kwc">OutputStream</span> out<span class="sym">,</span> Chunk begin<span class="sym">,</span> Chunk end<span class="sym">)</span>
      <span class="kwa">throws</span> <span class="kwc">IOException</span> <span class="sym">{</span>

    Chunk start <span class="sym">=</span> begin<span class="sym">;</span>

    <span class="kwb">int</span> begin_idx <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwb">int</span> end_idx <span class="sym">=</span> end<span class="sym">.</span>length <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span>
    <span class="kwa">while</span> <span class="sym">(</span>begin <span class="sym">!=</span> end <span class="sym">||</span> begin_idx <span class="sym">&lt;</span> end_idx<span class="sym">) {</span>
      <span class="kwb">byte</span> temp <span class="sym">=</span> <span class="kwd">complement</span><span class="sym">(</span>begin<span class="sym">.</span>data<span class="sym">[</span>begin_idx<span class="sym">]);</span>
      begin<span class="sym">.</span>data<span class="sym">[</span>begin_idx<span class="sym">++] =</span> <span class="kwd">complement</span><span class="sym">(</span>end<span class="sym">.</span>data<span class="sym">[</span>end_idx<span class="sym">]);</span>
      end<span class="sym">.</span>data<span class="sym">[</span>end_idx<span class="sym">--] =</span> temp<span class="sym">;</span>
      <span class="kwa">if</span> <span class="sym">(</span>begin<span class="sym">.</span>data<span class="sym">[</span>begin_idx<span class="sym">] ==</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">) {</span>
        <span class="sym">++</span>begin_idx<span class="sym">;</span>
      <span class="sym">}</span>
      <span class="kwa">if</span> <span class="sym">(</span>begin_idx <span class="sym">==</span> begin<span class="sym">.</span>length<span class="sym">) {</span>
        begin <span class="sym">=</span> begin<span class="sym">.</span>next<span class="sym">;</span>
        begin_idx <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
        <span class="kwa">if</span> <span class="sym">(</span>begin<span class="sym">.</span>data<span class="sym">[</span>begin_idx<span class="sym">] ==</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">) {</span>
          <span class="sym">++</span>begin_idx<span class="sym">;</span>
        <span class="sym">}</span>
      <span class="sym">}</span>
      <span class="kwa">if</span> <span class="sym">(</span>end_idx <span class="sym">== -</span><span class="num">1</span><span class="sym">) {</span>
        end <span class="sym">=</span> end<span class="sym">.</span>previous<span class="sym">;</span>
        end_idx <span class="sym">=</span> end<span class="sym">.</span>length <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span>
        <span class="kwa">if</span> <span class="sym">(</span>end<span class="sym">.</span>data<span class="sym">[</span>end_idx<span class="sym">] ==</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">) {</span>
          <span class="sym">--</span>end_idx<span class="sym">;</span>
        <span class="sym">}</span>
      <span class="sym">}</span> <span class="kwa">else if</span> <span class="sym">(</span>end<span class="sym">.</span>data<span class="sym">[</span>end_idx<span class="sym">] ==</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">) {</span>
        <span class="sym">--</span>end_idx<span class="sym">;</span>
      <span class="sym">}</span>

    <span class="sym">}</span>
    <span class="kwa">while</span> <span class="sym">(</span>start <span class="sym">!=</span> null<span class="sym">) {</span>
      out<span class="sym">.</span><span class="kwd">write</span><span class="sym">(</span>start<span class="sym">.</span>data<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> start<span class="sym">.</span>length<span class="sym">);</span>
      start <span class="sym">=</span> start<span class="sym">.</span>next<span class="sym">;</span>
    <span class="sym">}</span>
    out<span class="sym">.</span><span class="kwd">write</span><span class="sym">(</span><span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">);</span>
  <span class="sym">}</span>

  <span class="kwa">static class</span> LineInput <span class="sym">{</span>
    <span class="kwc">InputStream</span> in<span class="sym">;</span>
    <span class="kwb">boolean</span> eof<span class="sym">;</span>
    <span class="kwb">byte</span><span class="sym">[]</span> buffer <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">byte</span><span class="sym">[</span><span class="num">8192</span><span class="sym">];</span>
    <span class="kwb">int</span> idx <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

    <span class="kwd">LineInput</span><span class="sym">(</span><span class="kwc">InputStream</span> in<span class="sym">) {</span>
      <span class="kwa">this</span><span class="sym">.</span>in <span class="sym">=</span> in<span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwb">void</span> <span class="kwd">fill</span><span class="sym">()</span> <span class="kwa">throws</span> <span class="kwc">IOException</span> <span class="sym">{</span>
      <span class="kwa">if</span><span class="sym">(</span>eof<span class="sym">)</span> <span class="kwa">return</span><span class="sym">;</span>
      <span class="kwa">if</span> <span class="sym">(</span>count <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {</span>
        <span class="slc">// compact</span>
        <span class="kwc">System</span><span class="sym">.</span><span class="kwd">arraycopy</span><span class="sym">(</span>buffer<span class="sym">,</span> idx<span class="sym">,</span> buffer<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> count<span class="sym">);</span>
      <span class="sym">}</span>
      idx <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
      <span class="kwb">int</span> c <span class="sym">=</span> in<span class="sym">.</span><span class="kwd">read</span><span class="sym">(</span>buffer<span class="sym">,</span> count<span class="sym">,</span> buffer<span class="sym">.</span>length <span class="sym">-</span> count<span class="sym">);</span>
      <span class="kwa">if</span> <span class="sym">(</span>c <span class="sym">== -</span><span class="num">1</span><span class="sym">){</span>
        eof <span class="sym">=</span> true<span class="sym">;</span>
      <span class="sym">}</span><span class="kwa">else</span><span class="sym">{</span>
        count <span class="sym">+=</span> c<span class="sym">;</span>
      <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">public</span> <span class="kwb">int</span> <span class="kwd">getline</span><span class="sym">(</span><span class="kwb">byte</span><span class="sym">[]</span> data<span class="sym">,</span> <span class="kwb">int</span> offset<span class="sym">,</span> <span class="kwb">int</span> len<span class="sym">)</span> <span class="kwa">throws</span> <span class="kwc">IOException</span> <span class="sym">{</span>
      <span class="kwa">for</span> <span class="sym">(; ;) {</span>
        <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> count<span class="sym">;</span> i<span class="sym">++) {</span>
          <span class="kwa">if</span> <span class="sym">(</span>buffer<span class="sym">[</span>i <span class="sym">+</span> idx<span class="sym">] ==</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span> <span class="sym">||</span> i <span class="sym">&gt;=</span> len<span class="sym">) {</span>
            <span class="kwc">System</span><span class="sym">.</span><span class="kwd">arraycopy</span><span class="sym">(</span>buffer<span class="sym">,</span> idx<span class="sym">,</span> data<span class="sym">,</span> offset<span class="sym">,</span> i<span class="sym">);</span>
            <span class="kwb">int</span> gcount <span class="sym">=</span> i<span class="sym">+</span><span class="num">1</span><span class="sym">;</span>
            idx <span class="sym">+=</span> gcount<span class="sym">;</span>
            count <span class="sym">-=</span> gcount<span class="sym">;</span>
            <span class="kwa">return</span> gcount<span class="sym">;</span>
          <span class="sym">}</span>
        <span class="sym">}</span>
        <span class="kwa">if</span><span class="sym">(</span>eof<span class="sym">){</span>
          <span class="kwc">System</span><span class="sym">.</span><span class="kwd">arraycopy</span><span class="sym">(</span>buffer<span class="sym">,</span> idx<span class="sym">,</span> data<span class="sym">,</span> offset<span class="sym">,</span> count<span class="sym">);</span>
          <span class="kwb">int</span> gcount <span class="sym">=</span> count<span class="sym">;</span>
          count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
          <span class="kwa">return</span> gcount<span class="sym">;</span>
        <span class="sym">}</span><span class="kwa">else</span><span class="sym">{</span>
          <span class="kwd">fill</span><span class="sym">();</span>
        <span class="sym">}</span>
      <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwb">int</span> <span class="kwd">peek</span><span class="sym">()</span> <span class="kwa">throws</span> <span class="kwc">IOException</span> <span class="sym">{</span>
      <span class="kwa">if</span> <span class="sym">(</span>count <span class="sym">&lt;</span> <span class="num">1</span><span class="sym">)</span> <span class="kwd">fill</span><span class="sym">();</span>
      <span class="kwa">return</span> buffer<span class="sym">[</span>idx<span class="sym">];</span>
    <span class="sym">}</span>

    <span class="kwb">boolean</span> <span class="kwd">eof</span><span class="sym">() {</span>
      <span class="kwa">return</span> eof <span class="sym">&amp;&amp;</span> count <span class="sym">==</span> <span class="num">0</span><span class="sym">;</span>
    <span class="sym">}</span>
  <span class="sym">}</span>

  <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">)</span> <span class="kwa">throws</span> <span class="kwc">Exception</span> <span class="sym">{</span>
    LineInput cin <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">LineInput</span><span class="sym">(</span><span class="kwc">System</span><span class="sym">.</span>in<span class="sym">);</span>

    <span class="kwa">while</span> <span class="sym">(!</span>cin<span class="sym">.</span><span class="kwd">eof</span><span class="sym">()) {</span>
      <span class="kwb">byte</span> <span class="sym">[]</span> header <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">byte</span><span class="sym">[</span><span class="num">100</span><span class="sym">];</span>
      <span class="kwb">int</span> c <span class="sym">=</span> cin<span class="sym">.</span><span class="kwd">getline</span><span class="sym">(</span>header<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> header<span class="sym">.</span>length<span class="sym">);</span>
      <span class="kwc">PrintStream</span> out <span class="sym">=</span> <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">;</span>
      out<span class="sym">.</span><span class="kwd">write</span><span class="sym">(</span>header<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> c <span class="sym">-</span> <span class="num">1</span><span class="sym">);</span>
      out<span class="sym">.</span><span class="kwd">write</span><span class="sym">(</span><span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">);</span>
      Chunk start <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Chunk</span><span class="sym">();</span>
      Chunk end <span class="sym">=</span> start<span class="sym">;</span>

      <span class="kwa">while</span> <span class="sym">(!</span>cin<span class="sym">.</span><span class="kwd">eof</span><span class="sym">() &amp;&amp;</span> cin<span class="sym">.</span><span class="kwd">peek</span><span class="sym">() !=</span> <span class="str">'&gt;'</span><span class="sym">) {</span>
        <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> line <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> line <span class="sym">&lt;</span> <span class="num">1074</span> <span class="sym">&amp;&amp; !</span>cin<span class="sym">.</span><span class="kwd">eof</span><span class="sym">() &amp;&amp;</span> cin<span class="sym">.</span><span class="kwd">peek</span><span class="sym">() !=</span> <span class="str">'&gt;'</span><span class="sym">; ++</span>line<span class="sym">) {</span>
          end<span class="sym">.</span>length <span class="sym">+=</span> cin<span class="sym">.</span><span class="kwd">getline</span><span class="sym">(</span>end<span class="sym">.</span>data<span class="sym">,</span> end<span class="sym">.</span>length<span class="sym">,</span> line_length <span class="sym">+</span> <span class="num">1</span><span class="sym">);</span>
          end<span class="sym">.</span>data<span class="sym">[</span>end<span class="sym">.</span>length <span class="sym">-</span> <span class="num">1</span><span class="sym">] =</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;</span>
        <span class="sym">}</span>
        <span class="kwa">if</span> <span class="sym">(!</span>cin<span class="sym">.</span><span class="kwd">eof</span><span class="sym">() &amp;&amp;</span> cin<span class="sym">.</span><span class="kwd">peek</span><span class="sym">() !=</span> <span class="str">'&gt;'</span><span class="sym">) {</span>
          end <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Chunk</span><span class="sym">(</span>end<span class="sym">);</span>
        <span class="sym">}</span>
      <span class="sym">}</span>
      <span class="sym">--</span>end<span class="sym">.</span>length<span class="sym">;</span>
      <span class="kwd">write_reverse_complement</span><span class="sym">(</span>out<span class="sym">,</span> start<span class="sym">,</span> end<span class="sym">);</span>
    <span class="sym">}</span>
  <span class="sym">}</span>
<span class="sym">}</span>
