#<span class="sym">!</span>.<span class="sym">/</span>parrot <span class="sym">-</span>j
#
# spectralnorm.pir N         <span class="sym">(</span>N <span class="sym">=</span> <span class="num">100</span> for shootout<span class="sym">)</span>
# by Michal Jurosz

.<span class="kwa">sub</span> eval_A
	.param <span class="kwa">int</span> i
	.param <span class="kwa">int</span> j

	# return <span class="num">1.0</span><span class="sym">/((</span>i<span class="sym">+</span>j<span class="sym">)*(</span>i<span class="sym">+</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">)/</span><span class="num">2</span><span class="sym">+</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span><span class="slc">;</span>
	$N0 <span class="sym">=</span> i <span class="sym">+</span> j
	$N1 <span class="sym">=</span> $N0 <span class="sym">+</span> <span class="num">1</span>
	$N0 <span class="sym">*=</span> $N1
	$N0 <span class="sym">/=</span> <span class="num">2</span>
	$N0 <span class="sym">+=</span> i
	$N0 <span class="sym">+=</span> <span class="num">1</span>
	$N0 <span class="sym">=</span> <span class="num">1</span> <span class="sym">/</span> $N0
	.return <span class="sym">(</span>$N0<span class="sym">)</span>
.<span class="kwa">end</span>


.<span class="kwa">sub</span> eval_A_times_u
	.param <span class="kwa">int</span> N
	.param pmc u
	.param pmc Au

	.<span class="kwa">local int</span> i<span class="sym">,</span> j

	i <span class="sym">=</span> <span class="num">0</span>
beginfor_i<span class="sym">:</span>
	unless i <span class="sym">&lt;</span> N goto endfor_i
		Au<span class="sym">[</span>i<span class="sym">] =</span> <span class="num">0</span>
		j <span class="sym">=</span> <span class="num">0</span>
	beginfor_j<span class="sym">:</span>
		unless j <span class="sym">&lt;</span> N goto endfor_j
			# Au<span class="sym">[</span>i<span class="sym">]+=</span>eval_A<span class="sym">(</span>i<span class="sym">,</span>j<span class="sym">)*</span>u<span class="sym">[</span>j<span class="sym">]</span>
			$N0 <span class="sym">=</span> eval_A<span class="sym">(</span>i<span class="sym">,</span>j<span class="sym">)</span>
			$N1 <span class="sym">=</span> u<span class="sym">[</span>j<span class="sym">]</span>
			$N0 <span class="sym">*=</span> $N1
			$N1 <span class="sym">=</span> Au<span class="sym">[</span>i<span class="sym">]</span>
			$N0 <span class="sym">+=</span> $N1
			Au<span class="sym">[</span>i<span class="sym">] =</span> $N0

		<span class="kwa">inc</span> j
		goto beginfor_j
	endfor_j<span class="sym">:</span>

	<span class="kwa">inc</span> i
	goto beginfor_i
endfor_i<span class="sym">:</span>
.<span class="kwa">end</span>


.<span class="kwa">sub</span> eval_At_times_u
	.param <span class="kwa">int</span> N
	.param pmc u
	.param pmc Au

	.<span class="kwa">local int</span> i<span class="sym">,</span> j

	i <span class="sym">=</span> <span class="num">0</span>
beginfor_i<span class="sym">:</span>
	unless i <span class="sym">&lt;</span> N goto endfor_i
		Au<span class="sym">[</span>i<span class="sym">] =</span> <span class="num">0</span>
		j <span class="sym">=</span> <span class="num">0</span>
	beginfor_j<span class="sym">:</span>
		unless j <span class="sym">&lt;</span> N goto endfor_j
			# Au<span class="sym">[</span>i<span class="sym">]+=</span>eval_A<span class="sym">(</span>j<span class="sym">,</span>i<span class="sym">)*</span>u<span class="sym">[</span>j<span class="sym">]</span>
			$N0 <span class="sym">=</span> eval_A<span class="sym">(</span>j<span class="sym">,</span>i<span class="sym">)</span>
			$N1 <span class="sym">=</span> u<span class="sym">[</span>j<span class="sym">]</span>
			$N0 <span class="sym">*=</span> $N1
			$N1 <span class="sym">=</span> Au<span class="sym">[</span>i<span class="sym">]</span>
			$N0 <span class="sym">+=</span> $N1
			Au<span class="sym">[</span>i<span class="sym">] =</span> $N0

		<span class="kwa">inc</span> j
		goto beginfor_j
	endfor_j<span class="sym">:</span>

	<span class="kwa">inc</span> i
	goto beginfor_i
endfor_i<span class="sym">:</span>
.<span class="kwa">end</span>


.<span class="kwa">sub</span> eval_AtA_times_u
	.param <span class="kwa">int</span> N
	.param pmc u
	.param pmc AtAu

	.<span class="kwa">local</span> pmc v
	v <span class="sym">=</span> new .FixedFloatArray
	v <span class="sym">=</span> N

	eval_A_times_u<span class="sym">(</span>N<span class="sym">,</span>u<span class="sym">,</span>v<span class="sym">)</span>
	eval_At_times_u<span class="sym">(</span>N<span class="sym">,</span>v<span class="sym">,</span>AtAu<span class="sym">)</span>
.<span class="kwa">end</span>


.<span class="kwa">sub</span> main <span class="sym">:</span>main
	.param pmc argv
	$S0 <span class="sym">=</span> argv<span class="sym">[</span><span class="num">1</span><span class="sym">]</span>
	.<span class="kwa">local int</span> N
	N <span class="sym">=</span> $S0

	.<span class="kwa">local</span> pmc u<span class="sym">,</span> v
	u <span class="sym">=</span> new .FixedFloatArray
	u <span class="sym">=</span> N
	v <span class="sym">=</span> new .FixedFloatArray
	v <span class="sym">=</span> N

	.<span class="kwa">local int</span> i

	i <span class="sym">=</span> <span class="num">0</span>
beginfor_init<span class="sym">:</span>
	unless i <span class="sym">&lt;</span> N goto endfor_init
		u<span class="sym">[</span>i<span class="sym">] =</span> <span class="num">1</span>
	<span class="kwa">inc</span> i
	goto beginfor_init
endfor_init<span class="sym">:</span>


	i <span class="sym">=</span> <span class="num">0</span>
beginfor_eval<span class="sym">:</span>
	unless i <span class="sym">&lt;</span> <span class="num">10</span> goto endfor_eval
	    eval_AtA_times_u<span class="sym">(</span>N<span class="sym">,</span>u<span class="sym">,</span>v<span class="sym">)</span>
	    eval_AtA_times_u<span class="sym">(</span>N<span class="sym">,</span>v<span class="sym">,</span>u<span class="sym">)</span>
	<span class="kwa">inc</span> i
	goto beginfor_eval
endfor_eval<span class="sym">:</span>

	.<span class="kwa">local</span> float vBv<span class="sym">,</span> vv
  	vBv <span class="sym">=</span> <span class="num">0.0</span>
  	vv <span class="sym">=</span> <span class="num">0.0</span>

	i <span class="sym">=</span> <span class="num">0</span>
beginfor_calc<span class="sym">:</span>
	unless i <span class="sym">&lt;</span> N goto endfor_calc
		# vBv<span class="sym">+=</span>u<span class="sym">[</span>i<span class="sym">]*</span>v<span class="sym">[</span>i<span class="sym">]</span><span class="slc">; vv+=v[i]*v[i];</span>
		$N0 <span class="sym">=</span> u<span class="sym">[</span>i<span class="sym">]</span>
		$N1 <span class="sym">=</span> v<span class="sym">[</span>i<span class="sym">]</span>
		$N0 <span class="sym">*=</span> $N1
		vBv <span class="sym">+=</span> $N0
		$N0 <span class="sym">=</span> $N1
		$N0 <span class="sym">*=</span> $N0
		vv <span class="sym">+=</span> $N0
	<span class="kwa">inc</span> i
	goto beginfor_calc
endfor_calc<span class="sym">:</span>

	# print <span class="str">&quot;%0.9f&quot;</span> <span class="sym">% (</span>sqrt<span class="sym">(</span>vBv<span class="sym">/</span>vv<span class="sym">))</span>
	$N0 <span class="sym">=</span> vBv <span class="sym">/</span> vv
	$N0 <span class="sym">=</span> sqrt $N0
	.<span class="kwa">local</span> pmc spf
	spf <span class="sym">=</span> new .FixedFloatArray
	spf <span class="sym">=</span> <span class="num">1</span>
	spf<span class="sym">[</span><span class="num">0</span><span class="sym">] =</span> $N0
	$S0 <span class="sym">=</span> sprintf <span class="str">&quot;%.9f\n&quot;</span><span class="sym">,</span> spf
	print $S0
	exit <span class="num">0</span>
.<span class="kwa">end</span>

