<span class="slc">;; The Computer Language Benchmarks Game</span>
<span class="slc">;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;</span>
<span class="slc">;; recursive benchmark</span>
<span class="slc">;;</span>
<span class="slc">;; contributed by Rudolf Olah</span>

<span class="sym">(</span>module
 recursive
 <span class="sym">(</span>export
  <span class="sym">(</span>ack<span class="sym">::</span>int x<span class="sym">::</span>int y<span class="sym">::</span>int<span class="sym">)</span>
  <span class="sym">(</span>fib<span class="sym">::</span>int n<span class="sym">::</span>int<span class="sym">)</span>
  <span class="sym">(</span>fibFP<span class="sym">::</span>double n<span class="sym">::</span>double<span class="sym">)</span>
  <span class="sym">(</span>tak<span class="sym">::</span>int x<span class="sym">::</span>int y<span class="sym">::</span>int z<span class="sym">::</span>int<span class="sym">)</span>
  <span class="sym">(</span>takFP<span class="sym">::</span>double x<span class="sym">::</span>double y<span class="sym">::</span>double z<span class="sym">::</span>double<span class="sym">)</span>
  <span class="sym">)</span>
 <span class="sym">(</span>main main<span class="sym">))</span>

<span class="sym">(</span>define <span class="sym">(</span>ack x y<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((</span>zero? x<span class="sym">) (+</span> y <span class="num">1</span><span class="sym">))</span>
	<span class="sym">((</span>zero? y<span class="sym">) (</span>ack <span class="sym">(-</span> x <span class="num">1</span><span class="sym">)</span> <span class="num">1</span><span class="sym">))</span>
	<span class="sym">(</span>else <span class="sym">(</span>ack <span class="sym">(-</span> x <span class="num">1</span><span class="sym">) (</span>ack x <span class="sym">(-</span> y <span class="num">1</span><span class="sym">))))))</span>

<span class="sym">(</span>define <span class="sym">(</span>fib n<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&lt;</span> n <span class="num">2</span><span class="sym">)</span>
      <span class="num">1</span>
      <span class="sym">(+ (</span>fib <span class="sym">(-</span> n <span class="num">2</span><span class="sym">)) (</span>fib <span class="sym">(-</span> n <span class="num">1</span><span class="sym">)))))</span>

<span class="sym">(</span>define <span class="sym">(</span>fibFP n<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&lt;</span> n <span class="num">2.0</span><span class="sym">)</span>
      <span class="num">1.0</span>
      <span class="sym">(+ (</span>fibFP <span class="sym">(-</span> n <span class="num">2.0</span><span class="sym">)) (</span>fibFP <span class="sym">(-</span> n <span class="num">1.0</span><span class="sym">)))))</span>

<span class="sym">(</span>define <span class="sym">(</span>tak x y z<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&lt;</span> y x<span class="sym">)</span>
      <span class="sym">(</span>tak <span class="sym">(</span>tak <span class="sym">(-</span> x <span class="num">1</span><span class="sym">)</span> y z<span class="sym">)</span>
	   <span class="sym">(</span>tak <span class="sym">(-</span> y <span class="num">1</span><span class="sym">)</span> z x<span class="sym">)</span>
	   <span class="sym">(</span>tak <span class="sym">(-</span> z <span class="num">1</span><span class="sym">)</span> x y<span class="sym">))</span>
      z<span class="sym">))</span>

<span class="sym">(</span>define <span class="sym">(</span>takFP x y z<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&lt;</span> y x<span class="sym">)</span>
      <span class="sym">(</span>takFP <span class="sym">(</span>takFP <span class="sym">(-</span> x <span class="num">1.0</span><span class="sym">)</span> y z<span class="sym">)</span>
	     <span class="sym">(</span>takFP <span class="sym">(-</span> y <span class="num">1.0</span><span class="sym">)</span> z x<span class="sym">)</span>
	     <span class="sym">(</span>takFP <span class="sym">(-</span> z <span class="num">1.0</span><span class="sym">)</span> x y<span class="sym">))</span>
      z<span class="sym">))</span>

<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span>string<span class="sym">-&gt;</span>integer <span class="sym">(</span><span class="kwa">cadr</span> args<span class="sym">))))</span>
    <span class="sym">(</span><span class="kwa">print</span> <span class="str">&quot;Ack(3,&quot;</span> <span class="sym">(+</span> n <span class="num">1</span><span class="sym">)</span> <span class="str">&quot;): &quot;</span> <span class="sym">(</span>ack <span class="num">3</span> <span class="sym">(+</span> n <span class="num">1</span><span class="sym">)))</span>
    <span class="sym">(</span><span class="kwa">print</span> <span class="str">&quot;Fib(&quot;</span> <span class="sym">(+</span> n <span class="num">28.0</span><span class="sym">)</span> <span class="str">&quot;): &quot;</span> <span class="sym">(</span>fibFP <span class="sym">(+</span> n <span class="num">28.0</span><span class="sym">)))</span>
    <span class="sym">(</span><span class="kwa">print</span> <span class="str">&quot;Tak(&quot;</span> <span class="sym">(*</span> <span class="num">3</span> n<span class="sym">)</span> <span class="str">&quot;,&quot;</span> <span class="sym">(*</span> <span class="num">2</span> n<span class="sym">)</span> <span class="str">&quot;,&quot;</span> n <span class="str">&quot;): &quot;</span> <span class="sym">(</span>tak <span class="sym">(*</span> <span class="num">3</span> n<span class="sym">) (*</span> <span class="num">2</span> n<span class="sym">)</span> n<span class="sym">))</span>
    <span class="sym">(</span><span class="kwa">print</span> <span class="str">&quot;Fib(3): &quot;</span> <span class="sym">(</span>fib <span class="num">3</span><span class="sym">))</span>
    <span class="sym">(</span><span class="kwa">print</span> <span class="str">&quot;Tak(3.0,2.0,1.0): &quot;</span> <span class="sym">(</span>takFP <span class="num">3.0 2.0 1.0</span><span class="sym">))</span>
    <span class="sym">))</span>
