<span class="slc">// The Computer Language Benchmarks Game</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>
<span class="slc">// By bearophile, optimized for simplicity, quite slow</span>

<span class="kwa">import</span> std<span class="sym">.</span>stdio<span class="sym">,</span> std<span class="sym">.</span>conv<span class="sym">;</span>

<span class="kwa">class</span> TreeNode <span class="sym">{</span>
    <span class="kwa">int</span> item<span class="sym">;</span>
    TreeNode left<span class="sym">,</span> right<span class="sym">;</span>

    <span class="kwa">this</span><span class="sym">(</span><span class="kwa">int</span> item<span class="sym">,</span> TreeNode left<span class="sym">=</span><span class="kwa">null</span><span class="sym">,</span> TreeNode right<span class="sym">=</span><span class="kwa">null</span><span class="sym">) {</span>
        <span class="kwa">this</span><span class="sym">.</span>item <span class="sym">=</span> item<span class="sym">;</span>
        <span class="kwa">this</span><span class="sym">.</span>left <span class="sym">=</span> left<span class="sym">;</span>
        <span class="kwa">this</span><span class="sym">.</span>right <span class="sym">=</span> right<span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">int</span> <span class="kwd">check</span><span class="sym">() {</span>
        <span class="kwa">return</span> left <span class="kwa">is null</span> ? item <span class="sym">:</span> item <span class="sym">+</span> left<span class="sym">.</span>check <span class="sym">-</span> right<span class="sym">.</span>check<span class="sym">;</span>
    <span class="sym">}</span>
<span class="sym">}</span>

TreeNode <span class="kwd">makeTree</span><span class="sym">(</span><span class="kwa">int</span> item<span class="sym">,</span> <span class="kwa">int</span> depth<span class="sym">) {</span>
    <span class="kwa">if</span> <span class="sym">(</span>depth <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span>
        <span class="kwa">return new</span> <span class="kwd">TreeNode</span><span class="sym">(</span>item<span class="sym">,</span> <span class="kwd">makeTree</span><span class="sym">(</span><span class="num">2</span><span class="sym">*</span>item<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> depth<span class="sym">-</span><span class="num">1</span><span class="sym">),</span> <span class="kwd">makeTree</span><span class="sym">(</span><span class="num">2</span><span class="sym">*</span>item<span class="sym">,</span> depth<span class="sym">-</span><span class="num">1</span><span class="sym">));</span>
    <span class="kwa">else</span>
        <span class="kwa">return new</span> <span class="kwd">TreeNode</span><span class="sym">(</span>item<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwa">void</span> <span class="kwd">main</span><span class="sym">(</span>string<span class="sym">[]</span> args<span class="sym">) {</span>
    <span class="kwa">const</span> minDepth <span class="sym">=</span> <span class="num">4</span><span class="sym">;</span>
    <span class="kwa">int</span> n <span class="sym">= (</span>args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">)</span> ? <span class="kwd">toInt</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">2</span><span class="sym">;</span>
    <span class="kwa">int</span> maxDepth <span class="sym">= (</span>minDepth <span class="sym">+</span> <span class="num">2</span><span class="sym">) &gt;</span> n ? minDepth <span class="sym">+</span> <span class="num">2</span> <span class="sym">:</span> n<span class="sym">;</span>

    <span class="kwa">int</span> check <span class="sym">=</span> <span class="kwd">makeTree</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> maxDepth <span class="sym">+</span> <span class="num">1</span><span class="sym">).</span>check<span class="sym">;</span>
    <span class="kwd">writefln</span><span class="sym">(</span><span class="str">&quot;stretch tree of depth &quot;</span><span class="sym">,</span> maxDepth <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">check: &quot;</span><span class="sym">,</span> check<span class="sym">);</span>

    <span class="kwa">auto</span> longLivedTree <span class="sym">=</span> <span class="kwd">makeTree</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> maxDepth<span class="sym">);</span>

    <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">int</span> depth <span class="sym">=</span> minDepth<span class="sym">;</span> depth <span class="sym">&lt;=</span> maxDepth<span class="sym">;</span> depth <span class="sym">+=</span> <span class="num">2</span><span class="sym">) {</span>
        <span class="kwa">int</span> iterations <span class="sym">=</span> <span class="num">1</span> <span class="sym">&lt;&lt; (</span>maxDepth <span class="sym">-</span> depth <span class="sym">+</span> minDepth<span class="sym">);</span>
        check <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

        <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">int</span> i <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> i <span class="sym">&lt;=</span> iterations<span class="sym">;</span> i<span class="sym">++)</span>
            check <span class="sym">+= (</span><span class="kwd">makeTree</span><span class="sym">(</span>i<span class="sym">,</span> depth<span class="sym">)).</span>check <span class="sym">+ (</span><span class="kwd">makeTree</span><span class="sym">(-</span>i<span class="sym">,</span> depth<span class="sym">)).</span>check<span class="sym">;</span>

        <span class="kwd">writefln</span><span class="sym">(</span>iterations <span class="sym">*</span> <span class="num">2</span><span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">trees of depth &quot;</span><span class="sym">,</span> depth<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">check: &quot;</span><span class="sym">,</span> check<span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwd">writefln</span><span class="sym">(</span><span class="str">&quot;long lived tree of depth &quot;</span><span class="sym">,</span> maxDepth<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">check: &quot;</span><span class="sym">,</span> longLivedTree<span class="sym">.</span>check<span class="sym">);</span>
<span class="sym">}</span>
