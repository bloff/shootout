<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">*/</span>

<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;</span>

<span class="kwb">void</span> main<span class="sym">(</span>String<span class="sym">[]</span> args<span class="sym">){</span>

   <span class="kwb">byte</span><span class="sym">[]</span> IUBCodeComplements<span class="sym">(){</span>
      <span class="kwa">let</span> code <span class="sym">=</span> <span class="str">&quot;ABCDGHKMNRSTVWYabcdghkmnrstvwy&quot;</span><span class="sym">.</span>getBytes<span class="sym">;</span>
      <span class="kwa">let</span> comp <span class="sym">=</span> <span class="str">&quot;TVGHCDMKNYSABWRTVGHCDMKNYSABWR&quot;</span><span class="sym">.</span>getBytes<span class="sym">;</span>
      <span class="kwa">let</span> <span class="kwb">byte</span><span class="sym">[]</span> a <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">byte</span><span class="sym">[</span> <span class="str">&quot;z&quot;</span><span class="sym">.</span>getBytes<span class="sym">[</span><span class="num">0</span><span class="sym">] ];</span>

      <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">var</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>code<span class="sym">.</span>length<span class="sym">;</span> i<span class="sym">++)</span> a<span class="sym">[</span> code<span class="sym">[</span>i<span class="sym">] ] =</span> comp<span class="sym">[</span>i<span class="sym">];</span>
      <span class="kwa">return</span> a<span class="sym">;</span>
   <span class="sym">}</span>

   <span class="kwa">let</span> IUB <span class="sym">=</span> IUBCodeComplements<span class="sym">();</span>


   <span class="kwb">void</span> complementReverseWrite<span class="sym">(</span>String desc<span class="sym">,</span> Stack<span class="sym">&lt;</span><span class="kwb">byte</span><span class="sym">[]&gt;</span> lines<span class="sym">,</span>
         BufferedOutputStream w<span class="sym">){</span>

      <span class="kwb">void</span> inplaceComplementReverse<span class="sym">(</span><span class="kwb">byte</span><span class="sym">[]</span> b<span class="sym">){</span>
         <span class="kwa">var</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
         <span class="kwa">var</span> j <span class="sym">=</span> b<span class="sym">.</span>length <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span>
         <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> j<span class="sym">){</span>
            <span class="kwa">let</span> swap <span class="sym">=</span> b<span class="sym">[</span>i<span class="sym">];</span>
            b<span class="sym">[</span>i<span class="sym">] =</span> IUB<span class="sym">[</span> b<span class="sym">[</span>j<span class="sym">] ];</span>
            b<span class="sym">[</span>j<span class="sym">] =</span> IUB<span class="sym">[</span> swap <span class="sym">];</span>
            i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
            j <span class="sym">=</span> j <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span>
         <span class="sym">}</span>
         <span class="kwa">if</span> <span class="sym">(</span>i <span class="sym">==</span> j<span class="sym">)</span> b<span class="sym">[</span>i<span class="sym">] =</span> IUB<span class="sym">[</span> b<span class="sym">[</span>i<span class="sym">] ];</span>
      <span class="sym">}</span>

      <span class="kwa">let</span> nl <span class="sym">=</span> <span class="str">&quot;\n&quot;</span><span class="sym">.</span>getBytes<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
      w<span class="sym">.</span>write<span class="sym">(</span>desc<span class="sym">.</span>getBytes<span class="sym">);</span> w<span class="sym">.</span>write<span class="sym">(</span>nl<span class="sym">);</span>

      <span class="kwa">let</span> n <span class="sym">=</span> <span class="num">60</span><span class="sym">;</span>
      <span class="kwa">var</span> k <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
      <span class="kwa">if</span> <span class="sym">(!</span>lines<span class="sym">.</span>empty<span class="sym">)</span> k <span class="sym">=</span> lines<span class="sym">.</span>peek<span class="sym">.</span>length<span class="sym">;</span>
      <span class="kwa">let</span> isSplitLine <span class="sym">=</span> k <span class="sym">&lt;</span> n<span class="sym">;</span>
      <span class="kwa">var</span> isFirstLine <span class="sym">=</span> true<span class="sym">;</span>

      <span class="kwa">while</span> <span class="sym">(!</span>lines<span class="sym">.</span>empty<span class="sym">) {</span>
        <span class="kwa">let</span> line <span class="sym">=</span> lines<span class="sym">.</span>pop<span class="sym">;</span>
        inplaceComplementReverse<span class="sym">(</span>line<span class="sym">);</span>

        <span class="kwa">if</span> <span class="sym">(</span>isSplitLine<span class="sym">){</span>
           <span class="kwa">if</span> <span class="sym">(</span>isFirstLine<span class="sym">){</span> w<span class="sym">.</span>write<span class="sym">(</span>line<span class="sym">);</span> isFirstLine <span class="sym">=</span> false<span class="sym">; }</span>
           <span class="kwa">else</span> <span class="sym">{</span> w<span class="sym">.</span>write<span class="sym">(</span>line<span class="sym">,</span><span class="num">0</span><span class="sym">,</span>n<span class="sym">-</span>k<span class="sym">);</span> w<span class="sym">.</span>write<span class="sym">(</span>nl<span class="sym">);</span> w<span class="sym">.</span>write<span class="sym">(</span>line<span class="sym">,</span>n<span class="sym">-</span>k<span class="sym">,</span>k<span class="sym">); }</span>
        <span class="sym">}</span>
        <span class="kwa">else</span> <span class="sym">{</span> w<span class="sym">.</span>write<span class="sym">(</span>line<span class="sym">);</span> w<span class="sym">.</span>write<span class="sym">(</span>nl<span class="sym">); }</span>
      <span class="sym">}</span>
      <span class="kwa">if</span> <span class="sym">(</span>isSplitLine <span class="sym">&amp;&amp; !</span>isFirstLine<span class="sym">)</span> w<span class="sym">.</span>write<span class="sym">(</span>nl<span class="sym">);</span>
   <span class="sym">}</span>



   <span class="kwa">let</span> r <span class="sym">=</span> <span class="kwa">new</span> BufferedReader<span class="sym">(</span><span class="kwa">new</span> InputStreamReader<span class="sym">(</span>System<span class="sym">.</span>in<span class="sym">));</span>
   <span class="kwa">let</span> w <span class="sym">=</span> <span class="kwa">new</span> BufferedOutputStream<span class="sym">(</span>System<span class="sym">.</span>out<span class="sym">);</span>

   <span class="kwa">var</span> lines <span class="sym">=</span> <span class="kwa">new</span> Stack<span class="sym">();</span>
   <span class="kwa">var</span> desc <span class="sym">=</span> <span class="str">&quot;&quot;</span><span class="sym">;</span>

   <span class="kwa">var</span> <span class="sym">?</span>String line<span class="sym">;</span>
   <span class="kwa">while</span> <span class="sym">((</span>line <span class="sym">=</span> r<span class="sym">.</span>readLine<span class="sym">()) !=</span> <span class="kwa">null</span><span class="sym">) {</span>
      <span class="kwa">let</span> c <span class="sym">=</span> line<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
      <span class="kwa">if</span> <span class="sym">(</span>c <span class="sym">==</span> <span class="str">'&gt;'</span><span class="sym">){</span>
         <span class="kwa">if</span> <span class="sym">(</span>desc<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">){</span>
            complementReverseWrite<span class="sym">(</span>desc<span class="sym">,</span> lines<span class="sym">,</span> w<span class="sym">);</span>
            lines <span class="sym">=</span> <span class="kwa">new</span> Stack<span class="sym">();</span>
         <span class="sym">}</span>
         desc <span class="sym">=</span> line<span class="sym">;</span>
      <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
         <span class="kwa">if</span> <span class="sym">(</span>c <span class="sym">!=</span> <span class="str">';'</span><span class="sym">)</span> lines<span class="sym">.</span>push<span class="sym">(</span>line<span class="sym">.</span>getBytes<span class="sym">);</span>
      <span class="sym">}</span>
      <span class="sym">}</span>
   r<span class="sym">.</span>close<span class="sym">;</span>

   <span class="kwa">if</span> <span class="sym">(</span>desc<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> complementReverseWrite<span class="sym">(</span>desc<span class="sym">,</span> lines<span class="sym">,</span> w<span class="sym">);</span>
   w<span class="sym">.</span>close<span class="sym">;</span>
<span class="sym">}</span>
