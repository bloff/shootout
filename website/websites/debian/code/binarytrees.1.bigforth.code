\ binary<span class="sym">-</span>tree<span class="sym">.</span>gforth
\ http<span class="sym">:</span><span class="slc">//shootout.alioth.debian.org/</span>
\ contributed by Ian Osgood
\ modified by Bernd Paysan

<span class="num">4</span> constant min<span class="sym">-</span>depth

\ read NUM from last command line argument
<span class="num">0</span><span class="sym">.</span> argc &#64; <span class="num">1</span><span class="sym">-</span> arg <span class="sym">&gt;</span>number <span class="num">2</span>drop drop min<span class="sym">-</span>depth <span class="num">2</span> <span class="sym">+</span> max constant NUM

<span class="kwb">struct</span><span class="sym">{</span>
  cell left
  cell right
  cell item
<span class="sym">}</span> node

<span class="sym">:</span> bottom<span class="sym">-</span>up<span class="sym">-</span><span class="kwd">tree</span> <span class="sym">(</span> item depth <span class="sym">--</span> tree <span class="sym">)</span>
  dup <span class="kwa">if</span>
    over <span class="num">2</span><span class="sym">*</span> <span class="num">1</span><span class="sym">-</span> over <span class="num">1</span><span class="sym">-</span> recurse  <span class="sym">&gt;</span>r
    over <span class="num">2</span><span class="sym">*</span>    swap <span class="num">1</span><span class="sym">-</span> recurse  r<span class="sym">&gt;</span>
  <span class="kwa">else</span> <span class="num">0</span> <span class="kwd">then</span> <span class="sym">(</span> item right left <span class="sym">)</span>
  <span class="kwa">sizeof</span> node allocate <span class="kwa">throw</span>
  tuck node left <span class="sym">!</span>  tuck node right <span class="sym">!</span>  tuck node item <span class="sym">! ;</span>

<span class="sym">:</span> item<span class="sym">-</span><span class="kwd">check</span> <span class="sym">(</span> tree <span class="sym">--</span> n <span class="sym">)</span>
  dup node item &#64;
  over node left &#64; <span class="kwa">if</span>
    over node left &#64; recurse <span class="sym">+</span>  over node right &#64; recurse <span class="sym">-</span>
  then nip <span class="sym">;</span>

<span class="sym">:</span> free<span class="sym">-</span><span class="kwd">tree</span> <span class="sym">(</span> tree <span class="sym">-- )</span>
  dup node right &#64; <span class="kwa">if</span>
    dup node right &#64; recurse  dup node left &#64; recurse
  then free <span class="kwa">throw</span> <span class="sym">;</span>

<span class="sym">: .</span><span class="kwd">check</span> <span class="sym">(</span> check depth <span class="sym">-- )</span>
  <span class="sym">.</span><span class="str">&quot;  of depth &quot;</span> <span class="num">1</span> u<span class="sym">.</span>r <span class="dir">#tab emit .</span><span class="dstr">&quot;  check: &quot;</span><span class="dir"> 1 .r ;</span>

<span class="sym">:</span> main
  <span class="num">0</span> NUM <span class="num">1</span><span class="sym">+</span> bottom<span class="sym">-</span>up<span class="sym">-</span>tree
  <span class="sym">.</span><span class="str">&quot; stretch tree&quot;</span> dup item<span class="sym">-</span>check NUM <span class="num">1</span><span class="sym">+ .</span>check cr
  free<span class="sym">-</span>tree
  <span class="num">0</span> NUM bottom<span class="sym">-</span>up<span class="sym">-</span>tree
  NUM <span class="num">1</span><span class="sym">+</span> min<span class="sym">-</span>depth <span class="kwa">do</span>
    <span class="num">1</span>  NUM min<span class="sym">-</span>depth <span class="sym">+</span> i <span class="sym">-</span>  lshift  <span class="kwd">0</span> <span class="sym">(</span> iterations check <span class="sym">)</span>
    over <span class="num">1</span><span class="sym">+</span> <span class="num">1</span> <span class="kwa">do</span>
      i        j bottom<span class="sym">-</span>up<span class="sym">-</span>tree dup item<span class="sym">-</span>check swap free<span class="sym">-</span>tree <span class="sym">+</span>
      i negate j bottom<span class="sym">-</span>up<span class="sym">-</span>tree dup item<span class="sym">-</span>check swap free<span class="sym">-</span>tree <span class="sym">+</span>
    loop
    swap <span class="num">2</span><span class="sym">*</span> <span class="num">1</span> u<span class="sym">.</span>r <span class="dir">#tab emit .</span><span class="dstr">&quot;  trees&quot;</span><span class="dir"> i .check cr</span>
  <span class="num">2</span> <span class="sym">+</span>loop
  <span class="sym">.</span><span class="str">&quot; long lived tree&quot;</span> dup item<span class="sym">-</span>check NUM <span class="sym">.</span>check cr
  free<span class="sym">-</span>tree <span class="sym">;</span>

main bye  \ done<span class="sym">!</span>
