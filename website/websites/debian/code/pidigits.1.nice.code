<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">*/</span>

<span class="kwa">import</span> java<span class="sym">.</span>math<span class="sym">.*;</span>

<span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">){</span>
   <span class="kwa">let</span> L <span class="sym">=</span> <span class="num">10</span><span class="sym">;</span>
   var n <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>

   var j <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="kwa">let</span> digits <span class="sym">=</span> <span class="kwa">new</span> PiDigitSpigot<span class="sym">();</span>

   <span class="kwa">while</span> <span class="sym">(</span>n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">){</span>
      <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&gt;=</span> L<span class="sym">){</span>
         <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>L<span class="sym">;</span> i<span class="sym">++)</span> print<span class="sym">(</span> digits<span class="sym">.</span>next<span class="sym">() );</span>
         j <span class="sym">+=</span> L<span class="sym">;</span>
      <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
         <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++)</span> print<span class="sym">(</span> digits<span class="sym">.</span>next<span class="sym">() );</span>
         <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span>n<span class="sym">;</span> i<span class="sym">&lt;</span>L<span class="sym">;</span> i<span class="sym">++)</span> print<span class="sym">(</span><span class="str">&quot; &quot;</span><span class="sym">);</span>
         j <span class="sym">+=</span> n<span class="sym">;</span>
      <span class="sym">}</span>
      print<span class="sym">(</span><span class="str">&quot;</span><span class="esc">\t</span><span class="str">:&quot;</span><span class="sym">);</span> println<span class="sym">(</span>j<span class="sym">);</span>
      n <span class="sym">-=</span> L<span class="sym">;</span>
   <span class="sym">}</span>
<span class="sym">}</span>


<span class="kwa">class</span> PiDigitSpigot <span class="sym">{</span>
   Transformation z <span class="sym">=</span> <span class="kwa">new</span> Transformation<span class="sym">().</span>qrst<span class="sym">(</span><span class="num">1</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">);</span>
   Transformation x <span class="sym">=</span> <span class="kwa">new</span> Transformation<span class="sym">();</span>
   Transformation inverse <span class="sym">=</span> <span class="kwa">new</span> Transformation<span class="sym">();</span>

   <span class="kwb">int</span> next<span class="sym">(){</span>
      <span class="kwa">let</span> y <span class="sym">=</span> <span class="kwa">this</span><span class="sym">.</span>digit<span class="sym">();</span>
      <span class="kwa">if</span> <span class="sym">(</span><span class="kwa">this</span><span class="sym">.</span>isSafe<span class="sym">(</span>y<span class="sym">)){</span>
         z <span class="sym">=</span> <span class="kwa">this</span><span class="sym">.</span>produce<span class="sym">(</span>y<span class="sym">);</span> <span class="kwa">return</span> y<span class="sym">;</span>
      <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
         z <span class="sym">=</span> <span class="kwa">this</span><span class="sym">.</span>consume<span class="sym">(</span> x<span class="sym">.</span>next<span class="sym">() );</span> <span class="kwa">return this</span><span class="sym">.</span>next<span class="sym">();</span>
      <span class="sym">}</span>
   <span class="sym">}</span>

   <span class="kwb">int</span> digit<span class="sym">() =</span> z<span class="sym">.</span>extract<span class="sym">(</span><span class="num">3</span><span class="sym">);</span>
   <span class="kwb">boolean</span> isSafe<span class="sym">(</span><span class="kwb">int</span> digit<span class="sym">) =</span> digit <span class="sym">==</span> z<span class="sym">.</span>extract<span class="sym">(</span><span class="num">4</span><span class="sym">);</span>
   Transformation produce<span class="sym">(</span><span class="kwb">int</span> i<span class="sym">) = (</span> inverse<span class="sym">.</span>qrst<span class="sym">(</span><span class="num">10</span><span class="sym">,-</span><span class="num">10</span><span class="sym">*</span>i<span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">) ).</span>compose<span class="sym">(</span>z<span class="sym">);</span>
   Transformation consume<span class="sym">(</span>Transformation a<span class="sym">) =</span> z<span class="sym">.</span>compose<span class="sym">(</span>a<span class="sym">);</span>
<span class="sym">}</span>



<span class="kwa">class</span> Transformation <span class="sym">{</span>
   <span class="kwc">BigInteger</span> q <span class="sym">=</span> <span class="kwc">BigInteger</span><span class="sym">.</span>valueOf<span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
   <span class="kwc">BigInteger</span> r <span class="sym">=</span> <span class="kwc">BigInteger</span><span class="sym">.</span>valueOf<span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
   <span class="kwc">BigInteger</span> s <span class="sym">=</span> <span class="kwc">BigInteger</span><span class="sym">.</span>valueOf<span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
   <span class="kwc">BigInteger</span> t <span class="sym">=</span> <span class="kwc">BigInteger</span><span class="sym">.</span>valueOf<span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
   <span class="kwb">int</span> k <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

   Transformation next<span class="sym">(){</span>
      k<span class="sym">++;</span>
      q <span class="sym">=</span> <span class="kwc">BigInteger</span><span class="sym">.</span>valueOf<span class="sym">(</span>k<span class="sym">);</span>
      r <span class="sym">=</span> <span class="kwc">BigInteger</span><span class="sym">.</span>valueOf<span class="sym">(</span><span class="num">4</span> <span class="sym">*</span> k <span class="sym">+</span> <span class="num">2</span><span class="sym">);</span>
      s <span class="sym">=</span> <span class="kwc">BigInteger</span><span class="sym">.</span>valueOf<span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
      t <span class="sym">=</span> <span class="kwc">BigInteger</span><span class="sym">.</span>valueOf<span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> k <span class="sym">+</span> <span class="num">1</span><span class="sym">);</span>
      <span class="kwa">return this</span><span class="sym">;</span>
   <span class="sym">}</span>

   <span class="kwb">int</span> extract<span class="sym">(</span><span class="kwb">int</span> j<span class="sym">){</span>
      <span class="kwa">let</span> bigj <span class="sym">=</span> <span class="kwc">BigInteger</span><span class="sym">.</span>valueOf<span class="sym">(</span>j<span class="sym">);</span>
      <span class="kwa">return</span> <span class="sym">(((</span>q <span class="sym">*</span> bigj<span class="sym">) +</span> r<span class="sym">) / ((</span>s <span class="sym">*</span> bigj<span class="sym">) +</span> t<span class="sym">)).</span>intValue<span class="sym">;</span>
   <span class="sym">}</span>

   Transformation qrst<span class="sym">(</span><span class="kwb">int</span> q<span class="sym">,</span> <span class="kwb">int</span> r<span class="sym">,</span> <span class="kwb">int</span> s<span class="sym">,</span> <span class="kwb">int</span> t<span class="sym">){</span>
      <span class="kwa">this</span><span class="sym">.</span>q <span class="sym">=</span> <span class="kwc">BigInteger</span><span class="sym">.</span>valueOf<span class="sym">(</span>q<span class="sym">);</span>
      <span class="kwa">this</span><span class="sym">.</span>r <span class="sym">=</span> <span class="kwc">BigInteger</span><span class="sym">.</span>valueOf<span class="sym">(</span>r<span class="sym">);</span>
      <span class="kwa">this</span><span class="sym">.</span>s <span class="sym">=</span> <span class="kwc">BigInteger</span><span class="sym">.</span>valueOf<span class="sym">(</span>s<span class="sym">);</span>
      <span class="kwa">this</span><span class="sym">.</span>t <span class="sym">=</span> <span class="kwc">BigInteger</span><span class="sym">.</span>valueOf<span class="sym">(</span>t<span class="sym">);</span>
      k <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
      <span class="kwa">return this</span><span class="sym">;</span>
   <span class="sym">}</span>

   Transformation compose<span class="sym">(</span>Transformation a<span class="sym">) =</span>
      <span class="kwa">new</span> Transformation<span class="sym">(</span>
         q<span class="sym">:</span>  q <span class="sym">*</span> a<span class="sym">.</span>q<span class="sym">,</span>
         r<span class="sym">: (</span>q <span class="sym">*</span> a<span class="sym">.</span>r<span class="sym">) + (</span>r <span class="sym">*</span> a<span class="sym">.</span>t<span class="sym">),</span>
         s<span class="sym">: (</span>s <span class="sym">*</span> a<span class="sym">.</span>q<span class="sym">) + (</span>t <span class="sym">*</span> a<span class="sym">.</span>s<span class="sym">),</span>
         t<span class="sym">: (</span>s <span class="sym">*</span> a<span class="sym">.</span>r<span class="sym">) + (</span>t <span class="sym">*</span> a<span class="sym">.</span>t<span class="sym">)</span>
      <span class="sym">);</span>
<span class="sym">}</span>
