#<span class="sym">!</span>.<span class="sym">/</span>parrot <span class="sym">-</span>C
# The Great Computer Language Shootout
# http<span class="sym">://</span>shootout.alioth.debian.<span class="kwa">org</span><span class="sym">/</span>
#
# Contributed by Joshua Isom

.<span class="kwa">sub</span> main <span class="sym">:</span>main
	.<span class="kwa">local</span> pmc stdin
	.<span class="kwa">local</span> string line
	stdin <span class="sym">=</span> getstdin
	# Skip to block THREE
beginwhile_1<span class="sym">:</span>
	line <span class="sym">=</span> readline stdin
	$S0 <span class="sym">=</span> chopn line<span class="sym">, -</span><span class="num">6</span>
	if $S0 <span class="sym">!=</span> <span class="str">&quot;&gt;THREE&quot;</span> goto beginwhile_1
	line <span class="sym">=</span> <span class="str">''</span>
	.<span class="kwa">local</span> string seq
beginwhile_2<span class="sym">:</span>
	chopn line<span class="sym">,</span> <span class="num">1</span>
	seq .<span class="sym">=</span> line
	line <span class="sym">=</span> readline stdin
	$I0 <span class="sym">=</span> <span class="kwa">length</span> line
	unless $I0 goto endwhile_2
	$S0 <span class="sym">=</span> chopn line<span class="sym">, -</span><span class="num">1</span>
	if $S0 <span class="sym">!=</span> <span class="str">&quot;&gt;&quot;</span> goto beginwhile_2
endwhile_2<span class="sym">:</span>
	upcase seq
	sort_seq<span class="sym">(</span>seq<span class="sym">,</span> <span class="num">1</span><span class="sym">)</span>
	sort_seq<span class="sym">(</span>seq<span class="sym">,</span> <span class="num">2</span><span class="sym">)</span>
	find_seq<span class="sym">(</span>seq<span class="sym">,</span> <span class="str">&quot;GGT&quot;</span><span class="sym">)</span>
	find_seq<span class="sym">(</span>seq<span class="sym">,</span> <span class="str">&quot;GGTA&quot;</span><span class="sym">)</span>
	find_seq<span class="sym">(</span>seq<span class="sym">,</span> <span class="str">&quot;GGTATT&quot;</span><span class="sym">)</span>
	find_seq<span class="sym">(</span>seq<span class="sym">,</span> <span class="str">&quot;GGTATTTTAATT&quot;</span><span class="sym">)</span>
	find_seq<span class="sym">(</span>seq<span class="sym">,</span> <span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="sym">)</span>
.<span class="kwa">end</span>

.<span class="kwa">sub</span> sort_seq
	.param string seq
	.param <span class="kwa">int</span> len
	.<span class="kwa">local int</span> i<span class="sym">,</span> seqend
	.<span class="kwa">local</span> pmc table
	table <span class="sym">=</span> new .Hash
	i <span class="sym">=</span> <span class="num">0</span>
	seqend <span class="sym">=</span> <span class="kwa">length</span> seq
beginfor<span class="sym">:</span>
	unless i <span class="sym">&lt;</span> seqend goto endfor
	$S0 <span class="sym">=</span> substr seq<span class="sym">,</span> i<span class="sym">,</span> len
	$I1 <span class="sym">=</span> <span class="kwa">length</span> $S0
	if $I1 <span class="sym">&lt;</span> len goto endfor
	$I0 <span class="sym">=</span> table<span class="sym">[</span>$S0<span class="sym">]</span>
	<span class="kwa">inc</span> $I0
	table<span class="sym">[</span>$S0<span class="sym">] =</span> $I0
	<span class="kwa">inc</span> i
	goto beginfor
endfor<span class="sym">:</span>
	sort_n_print<span class="sym">(</span>table<span class="sym">,</span> i<span class="sym">)</span>
	print <span class="str">&quot;\n&quot;</span>
.<span class="kwa">end</span>

.<span class="kwa">include</span> <span class="str">&quot;iterator.pasm&quot;</span>
.<span class="kwa">sub</span> sort_n_print
	.param pmc table
	.param <span class="kwa">int</span> seqlen
	.<span class="kwa">local int</span> i

	.<span class="kwa">local</span> pmc array
	array <span class="sym">=</span> new .FixedPMCArray
	$I0 <span class="sym">=</span> elements table
	array <span class="sym">=</span> $I0

	.<span class="kwa">local</span> pmc iter
   	iter <span class="sym">=</span> new .Iterator<span class="sym">,</span> table
	set iter<span class="sym">,</span> .ITERATE_FROM_START
	i <span class="sym">=</span> <span class="num">0</span>
iter_loop_1<span class="sym">:</span>
	unless iter goto iter_end_1
	$S0 <span class="sym">=</span> shift iter
	$I0 <span class="sym">=</span> table<span class="sym">[</span>$S0<span class="sym">]</span>
	$P0 <span class="sym">=</span> new .FixedPMCArray
	$P0 <span class="sym">=</span> <span class="num">2</span>
	array<span class="sym">[</span>i<span class="sym">] =</span> $P0
	array<span class="sym">[</span>i<span class="slc">;0] = $S0</span>
	array<span class="sym">[</span>i<span class="slc">;1] = $I0</span>
	<span class="kwa">inc</span> i
	goto iter_loop_1
iter_end_1<span class="sym">:</span>

	$P0 <span class="sym">=</span> global <span class="str">&quot;sort&quot;</span>
	array.<span class="str">&quot;sort&quot;</span><span class="sym">(</span>$P0<span class="sym">)</span>

	$I0 <span class="sym">=</span> array
	i <span class="sym">=</span> <span class="num">0</span>
beginfor<span class="sym">:</span>
	unless i <span class="sym">&lt;</span> $I0 goto endfor
	$S0 <span class="sym">=</span> array<span class="sym">[</span>i<span class="slc">;0]</span>
	$N0 <span class="sym">=</span> array<span class="sym">[</span>i<span class="slc">;1]</span>
	print $S0
	print <span class="str">&quot; &quot;</span>
	$P0 <span class="sym">=</span> new .FixedFloatArray
	$P0 <span class="sym">=</span> <span class="num">1</span>
	$N1 <span class="sym">=</span> seqlen
	$N0 <span class="sym">/=</span> $N1
	$N0 <span class="sym">*=</span> <span class="num">100</span>
	$P0<span class="sym">[</span><span class="num">0</span><span class="sym">] =</span> $N0
	$S0 <span class="sym">=</span> sprintf <span class="str">&quot;%.3f\n&quot;</span><span class="sym">,</span> $P0
	print $S0
	<span class="kwa">inc</span> i
	goto beginfor
endfor<span class="sym">:</span>
.<span class="kwa">end</span>

.<span class="kwa">sub</span> sort
	.param pmc a
	.param pmc b
	$I0 <span class="sym">=</span> a<span class="sym">[</span><span class="num">1</span><span class="sym">]</span>
	$I1 <span class="sym">=</span> b<span class="sym">[</span><span class="num">1</span><span class="sym">]</span>
	$I2 <span class="sym">=</span> <span class="kwa">cmp</span> $I1<span class="sym">,</span> $I0
	.return<span class="sym">(</span>$I2<span class="sym">)</span>
.<span class="kwa">end</span>

.<span class="kwa">sub</span> find_seq
	.param string seq
	.param string s
	.<span class="kwa">local int</span> i
	i <span class="sym">=</span> <span class="num">0</span>
	$I0 <span class="sym">=</span> <span class="num">0</span>
beginwhile<span class="sym">:</span>
	$I2 <span class="sym">=</span> $I0 <span class="sym">+</span> <span class="num">1</span>
	$I0 <span class="sym">=</span> index seq<span class="sym">,</span> s<span class="sym">,</span> $I2
	if $I0 <span class="sym">== -</span><span class="num">1</span> goto endwhile
	<span class="kwa">inc</span> i
	goto beginwhile
endwhile<span class="sym">:</span>
	print i
	print <span class="str">&quot;\t&quot;</span>
	print s
	print <span class="str">&quot;\n&quot;</span>
.<span class="kwa">end</span>

