<span class="slc">-- The Computer Language Benchmarks Game</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">-- contributed by Pilho Kim</span>

<span class="slc">-- requires LGMP &quot;A GMP package for Lua 5.1&quot;</span>
<span class="slc">-- http://members.chello.nl/~w.couwenberg/lgmp.htm</span>


require <span class="str">'gmp'</span>

<span class="slc">-- Transformation</span>

<span class="kwa">local</span> T <span class="sym">= {}</span>

<span class="kwa">function</span> T<span class="sym">.</span><span class="kwd">bigzero</span><span class="sym">()</span> <span class="kwa">return</span> gmp<span class="sym">.</span><span class="kwd">z</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span> <span class="kwa">end</span>
<span class="kwa">function</span> T<span class="sym">.</span><span class="kwd">bigone</span><span class="sym">()</span> <span class="kwa">return</span> gmp<span class="sym">,</span><span class="kwd">z</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">end</span>
<span class="kwa">function</span> T<span class="sym">.</span><span class="kwd">bigten</span><span class="sym">()</span> <span class="kwa">return</span> gmp<span class="sym">.</span><span class="kwd">z</span><span class="sym">(</span><span class="num">10</span><span class="sym">)</span> <span class="kwa">end</span>

<span class="kwa">function</span> T<span class="sym">.</span><span class="kwd">new</span><span class="sym">(</span>q1<span class="sym">,</span>r1<span class="sym">,</span>s1<span class="sym">,</span>t1<span class="sym">)</span>
   <span class="kwa">return</span> <span class="sym">{</span>
       q <span class="sym">=</span> q1
      <span class="sym">,</span>r <span class="sym">=</span> r1
      <span class="sym">,</span>s <span class="sym">=</span> s1
      <span class="sym">,</span>t <span class="sym">=</span> t1
      <span class="sym">,</span>k <span class="sym">=</span> gmp<span class="sym">.</span><span class="kwd">z</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
      <span class="sym">}</span>
<span class="kwa">end</span>

<span class="kwa">function</span> T<span class="sym">.</span><span class="kwd">newInt</span><span class="sym">(</span>q<span class="sym">,</span>r<span class="sym">,</span>s<span class="sym">,</span>t<span class="sym">)</span>
   <span class="kwa">return</span> <span class="sym">{</span>
       q <span class="sym">=</span> gmp<span class="sym">.</span><span class="kwd">z</span><span class="sym">(</span>q<span class="sym">)</span>
      <span class="sym">,</span>r <span class="sym">=</span> gmp<span class="sym">.</span><span class="kwd">z</span><span class="sym">(</span>r<span class="sym">)</span>
      <span class="sym">,</span>s <span class="sym">=</span> gmp<span class="sym">.</span><span class="kwd">z</span><span class="sym">(</span>s<span class="sym">)</span>
      <span class="sym">,</span>t <span class="sym">=</span> gmp<span class="sym">.</span><span class="kwd">z</span><span class="sym">(</span>t<span class="sym">)</span>
      <span class="sym">,</span>k <span class="sym">=</span> gmp<span class="sym">.</span><span class="kwd">z</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
      <span class="sym">}</span>
<span class="kwa">end</span>

<span class="kwa">function</span> T<span class="sym">.</span><span class="kwd">unity</span><span class="sym">()</span> <span class="kwa">return</span> T<span class="sym">.</span><span class="kwd">newInt</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">end</span>
<span class="kwa">function</span> T<span class="sym">.</span><span class="kwd">zero</span><span class="sym">()</span> <span class="kwa">return</span> T<span class="sym">.</span><span class="kwd">newInt</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">end</span>

<span class="kwa">function</span> T<span class="sym">.</span><span class="kwd">compose</span><span class="sym">(</span>a<span class="sym">,</span>b<span class="sym">)</span>
   <span class="kwa">local</span> qq<span class="sym">,</span> qrrt<span class="sym">,</span> sqts<span class="sym">,</span> srtt
   qq <span class="sym">=</span> a<span class="sym">.</span>q <span class="sym">*</span> b<span class="sym">.</span>q
   qrrt <span class="sym">=</span> a<span class="sym">.</span>q <span class="sym">*</span> b<span class="sym">.</span>r <span class="sym">+</span> a<span class="sym">.</span>r <span class="sym">*</span> b<span class="sym">.</span>t
   sqts <span class="sym">=</span> T<span class="sym">.</span><span class="kwd">bigzero</span><span class="sym">()</span>
   srtt <span class="sym">=</span> a<span class="sym">.</span>t <span class="sym">*</span> b<span class="sym">.</span>t
   <span class="kwa">return</span> T<span class="sym">.</span><span class="kwd">new</span><span class="sym">(</span>qq<span class="sym">,</span> qrrt<span class="sym">,</span> sqts<span class="sym">,</span> srtt<span class="sym">)</span>
<span class="kwa">end</span>


<span class="kwa">function</span> T<span class="sym">.</span><span class="kwd">extract</span><span class="sym">(</span>a<span class="sym">,</span>j<span class="sym">)</span>
   <span class="kwa">local</span> bigj <span class="sym">=</span> gmp<span class="sym">.</span><span class="kwd">z</span><span class="sym">(</span>j<span class="sym">)</span>
   <span class="kwa">local</span> qjr<span class="sym">,</span> sjt
   qjr <span class="sym">=</span> a<span class="sym">.</span>q <span class="sym">*</span> bigj <span class="sym">+</span> a<span class="sym">.</span>r
   sjt <span class="sym">=</span> a<span class="sym">.</span>t
   <span class="kwa">return</span> qjr <span class="sym">/</span> sjt
<span class="kwa">end</span>

<span class="kwa">function</span> T<span class="sym">.</span><span class="kwb">next</span><span class="sym">(</span>a<span class="sym">)</span>
   a<span class="sym">.</span>k <span class="sym">=</span> a<span class="sym">.</span>k <span class="sym">+</span> <span class="num">1</span>
   a<span class="sym">.</span>q <span class="sym">=</span> a<span class="sym">.</span>k
   a<span class="sym">.</span>t <span class="sym">=</span> <span class="num">2</span><span class="sym">*</span>a<span class="sym">.</span>k <span class="sym">+</span> <span class="num">1</span>
   a<span class="sym">.</span>r <span class="sym">=</span> <span class="num">2</span><span class="sym">*</span>a<span class="sym">.</span>t
   <span class="kwa">return</span> a
<span class="kwa">end</span>


<span class="slc">-- Pi Digit Stream</span>

<span class="kwa">local</span> P <span class="sym">= {}</span>

<span class="kwa">function</span> P<span class="sym">.</span><span class="kwd">new</span><span class="sym">()</span>
   <span class="kwa">return</span> <span class="sym">{</span>
       z <span class="sym">=</span> T<span class="sym">.</span><span class="kwd">unity</span><span class="sym">()</span>
       <span class="sym">,</span>x <span class="sym">=</span> T<span class="sym">.</span><span class="kwd">zero</span><span class="sym">()</span>
      <span class="sym">,</span>inverse <span class="sym">=</span> T<span class="sym">.</span><span class="kwd">newInt</span><span class="sym">(</span><span class="num">10</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)</span>
      <span class="sym">}</span>
<span class="kwa">end</span>

<span class="kwa">function</span> P<span class="sym">.</span><span class="kwd">produce</span><span class="sym">(</span>a<span class="sym">,</span>j<span class="sym">)</span>
   <span class="kwa">local</span> i <span class="sym">=</span> a<span class="sym">.</span>inverse
   i<span class="sym">.</span>r <span class="sym">=</span> T<span class="sym">.</span><span class="kwd">bigzero</span><span class="sym">() -</span> T<span class="sym">.</span><span class="kwd">bigten</span><span class="sym">()*</span>j
   <span class="kwa">return</span> T<span class="sym">.</span><span class="kwd">compose</span><span class="sym">(</span>i<span class="sym">,</span>a<span class="sym">.</span>z<span class="sym">)</span>
<span class="kwa">end</span>

<span class="kwa">function</span> P<span class="sym">.</span><span class="kwd">consume</span><span class="sym">(</span>a<span class="sym">,</span>b<span class="sym">)</span>
   <span class="kwa">return</span> T<span class="sym">.</span><span class="kwd">compose</span><span class="sym">(</span>a<span class="sym">.</span>z<span class="sym">,</span>b<span class="sym">)</span>
<span class="kwa">end</span>

<span class="kwa">function</span> P<span class="sym">.</span><span class="kwd">digit</span><span class="sym">(</span>a<span class="sym">)</span>
   <span class="kwa">return</span> T<span class="sym">.</span><span class="kwd">extract</span><span class="sym">(</span>a<span class="sym">.</span>z<span class="sym">,</span><span class="num">3</span><span class="sym">)</span>
<span class="kwa">end</span>

<span class="kwa">function</span> P<span class="sym">.</span><span class="kwd">isSafe</span><span class="sym">(</span>a<span class="sym">,</span>j<span class="sym">)</span>
   <span class="kwa">return</span> j <span class="sym">==</span> T<span class="sym">.</span><span class="kwd">extract</span><span class="sym">(</span>a<span class="sym">.</span>z<span class="sym">,</span><span class="num">4</span><span class="sym">)</span>
<span class="kwa">end</span>

<span class="kwa">function</span> P<span class="sym">.</span><span class="kwb">next</span><span class="sym">(</span>a<span class="sym">)</span>
   <span class="kwa">local</span> y
   y <span class="sym">=</span> P<span class="sym">.</span><span class="kwd">digit</span><span class="sym">(</span>a<span class="sym">)</span>
   <span class="kwa">if</span> P<span class="sym">.</span><span class="kwd">isSafe</span><span class="sym">(</span>a<span class="sym">,</span>y<span class="sym">)</span> <span class="kwa">then</span>
      a<span class="sym">.</span>z <span class="sym">=</span> P<span class="sym">.</span><span class="kwd">produce</span><span class="sym">(</span>a<span class="sym">,</span>y<span class="sym">)</span>
      <span class="kwa">return</span> <span class="kwb">tostring</span><span class="sym">(</span>y<span class="sym">)</span>
   <span class="kwa">else</span>
      a<span class="sym">.</span>z <span class="sym">=</span> P<span class="sym">.</span><span class="kwd">consume</span><span class="sym">(</span>a<span class="sym">,</span>T<span class="sym">.</span><span class="kwb">next</span><span class="sym">(</span>a<span class="sym">.</span>x<span class="sym">))</span>
      <span class="kwa">return</span> P<span class="sym">.</span><span class="kwb">next</span><span class="sym">(</span>a<span class="sym">)</span>
   <span class="kwa">end</span>
<span class="kwa">end</span>


<span class="slc">-- Main</span>
n <span class="sym">=</span> <span class="kwb">tonumber</span><span class="sym">(</span>arg <span class="kwa">and</span> arg<span class="sym">[</span><span class="num">1</span><span class="sym">])</span> <span class="kwa">or</span> <span class="num">27</span>

i <span class="sym">=</span> <span class="num">0</span>
length <span class="sym">=</span> <span class="num">10</span>
pidigit <span class="sym">=</span> P<span class="sym">.</span><span class="kwd">new</span><span class="sym">()</span>

<span class="kwa">while</span> n <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">do</span>
   <span class="kwa">if</span> n <span class="sym">&lt;</span> length <span class="kwa">then</span>
      <span class="kwa">for</span> _ <span class="sym">=</span> <span class="num">1</span><span class="sym">,</span>n <span class="kwa">do</span> io<span class="sym">.</span><span class="kwb">write</span><span class="sym">(</span> P<span class="sym">.</span><span class="kwb">next</span><span class="sym">(</span>pidigit<span class="sym">) )</span> <span class="kwa">end</span>
      <span class="kwa">for</span> _ <span class="sym">=</span> <span class="num">1</span><span class="sym">,</span>length <span class="sym">-</span> n <span class="kwa">do</span> io<span class="sym">.</span><span class="kwb">write</span><span class="sym">(</span> <span class="str">' '</span> <span class="sym">)</span> <span class="kwa">end</span>
      i <span class="sym">=</span> i <span class="sym">+</span> n
   <span class="kwa">else</span>
      <span class="kwa">for</span> _ <span class="sym">=</span> <span class="num">1</span><span class="sym">,</span>length <span class="kwa">do</span> io<span class="sym">.</span><span class="kwb">write</span><span class="sym">(</span> P<span class="sym">.</span><span class="kwb">next</span><span class="sym">(</span>pidigit<span class="sym">) )</span> <span class="kwa">end</span>
      i <span class="sym">=</span> i <span class="sym">+</span> length
   <span class="kwa">end</span>
   io<span class="sym">.</span><span class="kwb">write</span><span class="sym">(</span><span class="str">'</span><span class="esc">\t</span><span class="str">:'</span><span class="sym">,</span> i<span class="sym">,</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">)</span>
   n <span class="sym">=</span> n <span class="sym">-</span> length
<span class="kwa">end</span>

<span class="slc">-- eof</span>

