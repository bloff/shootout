<span class="com">/* The Computer Language Shootout</span>
<span class="com">http://shootout.alioth.debian.org/</span>
<span class="com">contributed by Alexei Svitkine</span>
<span class="com">*/</span>

<span class="kwa">public class</span> nsieve
<span class="sym">{</span>
  <span class="kwa">static</span> <span class="kwb">void</span> <span class="kwd">nsieve</span><span class="sym">(</span><span class="kwb">int</span> m<span class="sym">) {</span>
    <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> i<span class="sym">,</span> j<span class="sym">;</span>
    <span class="kwb">boolean</span><span class="sym">[]</span> flags <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">boolean</span><span class="sym">[</span>m<span class="sym">];</span>

    <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span> i <span class="sym">&lt;</span> m<span class="sym">; ++</span>i<span class="sym">)</span>
      <span class="kwa">if</span> <span class="sym">(!</span>flags<span class="sym">[</span>i<span class="sym">]) {</span>
        <span class="sym">++</span>count<span class="sym">;</span>
        <span class="kwa">for</span> <span class="sym">(</span>j <span class="sym">=</span> i <span class="sym">&lt;&lt;</span> <span class="num">1</span><span class="sym">;</span> j <span class="sym">&lt;</span> m<span class="sym">;</span> j <span class="sym">+=</span> i<span class="sym">)</span>
          flags<span class="sym">[</span>j<span class="sym">] =</span> true<span class="sym">;</span>
      <span class="sym">}</span>

    <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">println</span><span class="sym">(</span><span class="kwc">String</span><span class="sym">.</span><span class="kwd">format</span><span class="sym">(</span><span class="str">&quot;Primes up to %8d %8d&quot;</span><span class="sym">,</span> m<span class="sym">,</span> count<span class="sym">));</span>
  <span class="sym">}</span>

  <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">) {</span>
    <span class="kwb">int</span> m <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span>
    <span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> m <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span><span class="kwd">parseInt</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>
    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> <span class="num">3</span><span class="sym">;</span> i<span class="sym">++)</span>
      <span class="kwd">nsieve</span><span class="sym">(</span><span class="num">10000</span> <span class="sym">&lt;&lt; (</span>m<span class="sym">-</span>i<span class="sym">));</span>
  <span class="sym">}</span>
<span class="sym">}</span>
