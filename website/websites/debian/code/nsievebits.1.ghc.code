<span class="com">{-# OPTIONS -O2 -optc-O -fbang-patterns #-}</span>
<span class="slc">--</span>
<span class="slc">-- The Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">-- Contributed by Don Stewart</span>
<span class="slc">-- nsieve over an ST monad Bool array</span>
<span class="slc">--</span>

<span class="kwa">import</span> Control.Monad.ST
<span class="kwa">import</span> Data.Array.ST
<span class="kwa">import</span> Data.Array.Base
<span class="kwa">import</span> System
<span class="kwa">import</span> Control.Monad
<span class="kwa">import</span> Data.Bits
<span class="kwa">import</span> Text.Printf

main <span class="sym">=</span> <span class="kwa">do</span>
    n <span class="sym">&lt;-</span> getArgs <span class="sym">&gt;&gt;=</span> readIO . head <span class="sym">::</span> IO <span class="kwb">Int</span>
    mapM_ <span class="sym">(</span>sieve . <span class="sym">(</span><span class="num">10000</span> <span class="sym">*)</span> . <span class="sym">(</span><span class="num">2</span> ^<span class="sym">)) [</span>n<span class="sym">,</span> n<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> n<span class="sym">-</span><span class="num">2</span><span class="sym">]</span>

sieve n <span class="sym">=</span> <span class="kwa">do</span>
   <span class="kwa">let</span> r <span class="sym">=</span> runST <span class="sym">(</span><span class="kwa">do</span> a <span class="sym">&lt;-</span> newArray <span class="sym">(</span><span class="num">2</span><span class="sym">,</span>n<span class="sym">)</span> <span class="kwa">True</span> <span class="sym">::</span> ST s <span class="sym">(</span>STUArray s <span class="kwb">Int Bool</span><span class="sym">)</span>
                     go a n <span class="num">2 0</span><span class="sym">)</span>
   printf <span class="str">&quot;Primes up to %8d %8d\n&quot;</span> <span class="sym">(</span>n<span class="sym">::</span><span class="kwb">Int</span><span class="sym">) (</span>r<span class="sym">::</span><span class="kwb">Int</span><span class="sym">) ::</span> IO <span class="sym">()</span>

go <span class="sym">!</span>a <span class="sym">!</span>m <span class="sym">!</span>n <span class="sym">!</span>c
    <span class="sym">|</span> n <span class="sym">==</span> m    <span class="sym">=</span> return c
    <span class="sym">|</span> otherwise <span class="sym">=</span> <span class="kwa">do</span>
          e <span class="sym">&lt;-</span> unsafeRead a n
          if e <span class="kwa">then let</span> loop <span class="sym">!</span>j
                          <span class="sym">|</span> j <span class="sym">&lt;</span> m     <span class="sym">=</span> <span class="kwa">do</span>
                              x <span class="sym">&lt;-</span> unsafeRead a j
                              when x $ unsafeWrite a j <span class="kwa">False</span>
                              loop <span class="sym">(</span>j<span class="sym">+</span>n<span class="sym">)</span>

                          <span class="sym">|</span> otherwise <span class="sym">=</span> go a m <span class="sym">(</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">) (</span>c<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>
                    <span class="kwa">in</span> loop <span class="sym">(</span>n `shiftL` <span class="num">1</span><span class="sym">)</span>
               <span class="kwa">else</span> go a m <span class="sym">(</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> c

