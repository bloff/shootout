<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by - Michael Snoyman (D novice)</span>
<span class="com">*/</span>
<span class="kwa">import</span> std<span class="sym">.</span>stdio<span class="sym">;</span>

<span class="kwa">enum</span> <span class="sym">{</span> E<span class="sym">,</span> SE<span class="sym">,</span> SW<span class="sym">,</span> W<span class="sym">,</span> NW<span class="sym">,</span> NE <span class="sym">}</span>
<span class="kwa">const uint</span> CellsPerRow <span class="sym">=</span> <span class="num">5</span><span class="sym">;</span>
<span class="kwa">const uint</span> RowsPerBoard <span class="sym">=</span> <span class="num">10</span><span class="sym">;</span>
<span class="kwa">const uint</span> CellsPerBoard <span class="sym">=</span> CellsPerRow <span class="sym">*</span> RowsPerBoard<span class="sym">;</span>
<span class="kwa">const uint</span> PermutationCount <span class="sym">=</span> <span class="num">12</span><span class="sym">;</span>
<span class="kwa">const uint</span> CellsPerPiece <span class="sym">=</span> <span class="num">5</span><span class="sym">;</span>

<span class="kwa">class</span> result_t <span class="sym">{</span>
	<span class="kwa">uint</span><span class="sym">[</span><span class="num">50</span><span class="sym">]</span> numbers<span class="sym">;</span>

	<span class="kwa">void</span> <span class="kwd">write</span><span class="sym">() {</span>
		<span class="kwa">foreach</span><span class="sym">(</span>i<span class="sym">,</span> n<span class="sym">;</span> numbers<span class="sym">) {</span>
			<span class="kwa">if</span><span class="sym">((</span>i <span class="sym">%</span> <span class="num">10</span><span class="sym">) ==</span> <span class="num">5</span><span class="sym">)</span> <span class="slc">// beginning of odd row</span>
				<span class="kwd">writef</span><span class="sym">(</span><span class="str">&quot; &quot;</span><span class="sym">);</span>
			<span class="kwa">assert</span><span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">10</span><span class="sym">);</span>
			<span class="kwd">writef</span><span class="sym">(</span><span class="str">&quot;%d &quot;</span><span class="sym">,</span> n<span class="sym">);</span>
			<span class="kwa">if</span><span class="sym">((</span>i <span class="sym">%</span> <span class="num">5</span><span class="sym">) ==</span> <span class="num">4</span><span class="sym">)</span> <span class="slc">// end of row</span>
				<span class="kwd">writefln</span><span class="sym">(</span><span class="str">&quot;&quot;</span><span class="sym">);</span>
		<span class="sym">}</span>
		<span class="kwd">writefln</span><span class="sym">(</span><span class="str">&quot;&quot;</span><span class="sym">);</span>
	<span class="sym">}</span>

	<span class="slc">/// fill the values from a solved board</span>
	<span class="kwa">void</span> <span class="kwd">fill</span><span class="sym">(</span>Board b<span class="sym">)</span>
	<span class="kwa">in</span> <span class="sym">{</span>
		<span class="kwa">foreach</span><span class="sym">(</span>cell<span class="sym">;</span> b<span class="sym">.</span>cells<span class="sym">)</span>
			<span class="kwa">assert</span><span class="sym">(</span>cell<span class="sym">.</span>number <span class="sym">&gt;=</span> <span class="num">0</span><span class="sym">);</span>
	<span class="sym">}</span>
	<span class="kwa">out</span> <span class="sym">{</span>
		<span class="kwa">uint</span> nums<span class="sym">[</span><span class="num">10</span><span class="sym">];</span>
		<span class="kwa">foreach</span><span class="sym">(</span>n<span class="sym">;</span> numbers<span class="sym">) {</span>
			<span class="kwa">assert</span><span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">10</span><span class="sym">);</span>
			<span class="sym">++</span>nums<span class="sym">[</span>n<span class="sym">];</span>
		<span class="sym">}</span>
		<span class="kwa">foreach</span><span class="sym">(</span>i<span class="sym">,</span> num<span class="sym">;</span> nums<span class="sym">)</span>
			<span class="kwa">assert</span><span class="sym">(</span>num <span class="sym">==</span> <span class="num">5</span><span class="sym">);</span>
	<span class="sym">}</span>
	<span class="kwa">body</span> <span class="sym">{</span>
		<span class="kwa">foreach</span><span class="sym">(</span>n<span class="sym">,</span> cell<span class="sym">;</span> b<span class="sym">.</span>cells<span class="sym">)</span>
			numbers<span class="sym">[</span>n<span class="sym">] =</span> cell<span class="sym">.</span>number<span class="sym">;</span>
	<span class="sym">}</span>

	<span class="kwa">int</span> <span class="kwd">opCmp</span><span class="sym">(</span>Board rhs<span class="sym">) {</span>
		<span class="kwa">foreach</span><span class="sym">(</span>index<span class="sym">,</span> number<span class="sym">;</span> numbers<span class="sym">) {</span>
			<span class="kwa">int</span> rnumber <span class="sym">=</span> rhs<span class="sym">.</span>cells<span class="sym">[</span>index<span class="sym">].</span>number<span class="sym">;</span>
			<span class="kwa">assert</span><span class="sym">(</span>number <span class="sym">&lt;</span> <span class="num">10</span> <span class="sym">&amp;&amp;</span> rnumber <span class="sym">&lt;</span> <span class="num">10</span><span class="sym">);</span>
			<span class="kwa">if</span><span class="sym">(</span>number <span class="sym">&lt;</span> rnumber<span class="sym">)</span>
				<span class="kwa">return</span> <span class="sym">-</span><span class="num">1</span><span class="sym">;</span>
			<span class="kwa">else if</span><span class="sym">(</span>number <span class="sym">&gt;</span> rnumber<span class="sym">)</span>
				<span class="kwa">return</span> <span class="num">1</span><span class="sym">;</span>
		<span class="sym">}</span>
		<span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
	<span class="sym">}</span>

	<span class="kwa">invariant</span> <span class="sym">{</span>
		<span class="kwa">foreach</span><span class="sym">(</span>number<span class="sym">;</span> numbers<span class="sym">)</span>
			<span class="kwa">assert</span><span class="sym">(</span>number <span class="sym">&lt;</span> <span class="num">10</span><span class="sym">);</span>
	<span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">class</span> PieceCell <span class="sym">{</span>
	PieceCell<span class="sym">[</span><span class="num">6</span><span class="sym">]</span> around<span class="sym">;</span>
	bool marked<span class="sym">;</span>

	<span class="kwa">void</span> <span class="kwd">flip</span><span class="sym">() {</span>
		PieceCell tmp <span class="sym">=</span> around<span class="sym">[</span>NE<span class="sym">];</span>
		around<span class="sym">[</span>NE<span class="sym">] =</span> around<span class="sym">[</span>NW<span class="sym">];</span>
		around<span class="sym">[</span>NW<span class="sym">] =</span> tmp<span class="sym">;</span>

		tmp <span class="sym">=</span> around<span class="sym">[</span>SE<span class="sym">];</span>
		around<span class="sym">[</span>SE<span class="sym">] =</span> around<span class="sym">[</span>SW<span class="sym">];</span>
		around<span class="sym">[</span>SW<span class="sym">] =</span> tmp<span class="sym">;</span>

		tmp <span class="sym">=</span> around<span class="sym">[</span>E<span class="sym">];</span>
		around<span class="sym">[</span>E<span class="sym">] =</span> around<span class="sym">[</span>W<span class="sym">];</span>
		around<span class="sym">[</span>W<span class="sym">] =</span> tmp<span class="sym">;</span>
	<span class="sym">}</span>

	<span class="kwa">void</span> <span class="kwd">rotate</span><span class="sym">() {</span>
		PieceCell tmp <span class="sym">=</span> around<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
		<span class="kwa">for</span><span class="sym">(</span><span class="kwa">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> <span class="num">5</span><span class="sym">; ++</span>i<span class="sym">)</span>
			around<span class="sym">[</span>i<span class="sym">] =</span> around<span class="sym">[</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">];</span>
		around<span class="sym">[</span><span class="num">5</span><span class="sym">] =</span> tmp<span class="sym">;</span>
	<span class="sym">}</span>

	bool <span class="kwd">fillPlaces</span><span class="sym">(</span>Board b<span class="sym">,</span> <span class="kwa">int</span> place<span class="sym">,</span> <span class="kwa">ubyte</span><span class="sym">[</span><span class="num">5</span><span class="sym">]</span> places<span class="sym">,</span> <span class="kwa">inout int</span> index<span class="sym">) {</span>
		marked <span class="sym">=</span> <span class="kwa">true</span><span class="sym">;</span>
		places<span class="sym">[</span>index<span class="sym">++] =</span> place<span class="sym">;</span>
		<span class="kwa">foreach</span><span class="sym">(</span>direction<span class="sym">,</span> cell<span class="sym">;</span> around<span class="sym">) {</span>
			<span class="kwa">if</span><span class="sym">(</span>cell <span class="kwa">is null</span> <span class="sym">||</span> cell<span class="sym">.</span>marked<span class="sym">)</span>
				<span class="kwa">continue</span><span class="sym">;</span>
			<span class="kwa">if</span><span class="sym">(</span>b<span class="sym">.</span>cells<span class="sym">[</span>place<span class="sym">].</span>around<span class="sym">[</span>direction<span class="sym">]</span> <span class="kwa">is null</span><span class="sym">)</span>
				<span class="kwa">return false</span><span class="sym">;</span>
			<span class="kwa">int</span> place2 <span class="sym">=</span> b<span class="sym">.</span>cells<span class="sym">[</span>place<span class="sym">].</span>around<span class="sym">[</span>direction<span class="sym">].</span>place<span class="sym">;</span>
			<span class="kwa">if</span><span class="sym">(!</span>cell<span class="sym">.</span><span class="kwd">fillPlaces</span><span class="sym">(</span>b<span class="sym">,</span> place2<span class="sym">,</span> places<span class="sym">,</span> index<span class="sym">))</span>
				<span class="kwa">return false</span><span class="sym">;</span>
		<span class="sym">}</span>
		<span class="kwa">return true</span><span class="sym">;</span>
	<span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">class</span> PieceConfig <span class="sym">{</span>
	Piece piece<span class="sym">;</span>
	PieceCell<span class="sym">[</span><span class="num">5</span><span class="sym">]</span> cells<span class="sym">;</span>

	bool<span class="sym">[</span><span class="num">50</span><span class="sym">][</span><span class="num">5</span><span class="sym">]</span> fits<span class="sym">;</span>
	<span class="kwa">ubyte</span><span class="sym">[</span><span class="num">5</span><span class="sym">][</span><span class="num">50</span><span class="sym">][</span><span class="num">5</span><span class="sym">]</span> places<span class="sym">;</span>

	<span class="kwa">this</span><span class="sym">(</span>Piece piece<span class="sym">,</span> <span class="kwa">int</span> permIndex<span class="sym">,</span> Board b<span class="sym">) {</span>
		<span class="kwa">this</span><span class="sym">.</span>piece <span class="sym">=</span> piece<span class="sym">;</span>
		<span class="kwa">for</span><span class="sym">(</span><span class="kwa">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> CellsPerPiece<span class="sym">; ++</span>i<span class="sym">)</span>
			cells<span class="sym">[</span>i<span class="sym">] =</span> <span class="kwa">new</span> PieceCell<span class="sym">;</span>
		<span class="kwd">loadConfig</span><span class="sym">(</span>piece<span class="sym">.</span>number<span class="sym">);</span>
		<span class="kwa">if</span><span class="sym">(</span>permIndex <span class="sym">&gt;=</span> PermutationCount<span class="sym">/</span><span class="num">2</span><span class="sym">)</span>
			<span class="kwd">flip</span><span class="sym">();</span>
		<span class="kwa">for</span><span class="sym">(</span><span class="kwa">int</span> i <span class="sym">=</span> permIndex<span class="sym">%(</span>PermutationCount<span class="sym">/</span><span class="num">2</span><span class="sym">);</span> i<span class="sym">; --</span>i<span class="sym">)</span>
			<span class="kwd">rotate</span><span class="sym">();</span>
		<span class="kwd">generateFits</span><span class="sym">(</span>b<span class="sym">);</span>
	<span class="sym">}</span>

	bool <span class="kwd">marked</span><span class="sym">()</span>
	<span class="kwa">out</span><span class="sym">(</span>result<span class="sym">) {</span>
		<span class="kwa">foreach</span><span class="sym">(</span>cell<span class="sym">;</span> cells<span class="sym">)</span>
			<span class="kwa">assert</span><span class="sym">(</span>cell<span class="sym">.</span>marked <span class="sym">==</span> result<span class="sym">);</span>
	<span class="sym">}</span>
	<span class="kwa">body</span> <span class="sym">{</span>
		<span class="kwa">return</span> cells<span class="sym">[</span><span class="num">0</span><span class="sym">].</span>marked<span class="sym">;</span>
	<span class="sym">}</span>

	<span class="kwa">void</span> <span class="kwd">marked</span><span class="sym">(</span>bool b<span class="sym">)</span>
	<span class="kwa">out</span> <span class="sym">{</span>
		<span class="kwa">assert</span><span class="sym">(</span>marked <span class="sym">==</span> b<span class="sym">);</span>
	<span class="sym">}</span>
	<span class="kwa">body</span> <span class="sym">{</span>
		<span class="kwa">foreach</span><span class="sym">(</span>cell<span class="sym">;</span> cells<span class="sym">)</span>
			cell<span class="sym">.</span>marked <span class="sym">=</span> b<span class="sym">;</span>
	<span class="sym">}</span>

<span class="kwa">private</span><span class="sym">:</span>
	<span class="kwa">void</span> <span class="kwd">generateFits</span><span class="sym">(</span>Board b<span class="sym">) {</span>
		<span class="kwa">for</span><span class="sym">(</span><span class="kwa">int</span> cell <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> cell <span class="sym">&lt;</span> <span class="num">5</span><span class="sym">; ++</span>cell<span class="sym">) {</span>
			<span class="kwa">for</span><span class="sym">(</span><span class="kwa">int</span> place <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> place <span class="sym">&lt;</span> <span class="num">50</span><span class="sym">; ++</span>place<span class="sym">) {</span>
				marked <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;</span>
				<span class="kwa">int</span> index<span class="sym">;</span>
				<span class="kwa">if</span><span class="sym">(</span>cells<span class="sym">[</span>cell<span class="sym">].</span><span class="kwd">fillPlaces</span><span class="sym">(</span>b<span class="sym">,</span> place<span class="sym">,</span> places<span class="sym">[</span>cell<span class="sym">][</span>place<span class="sym">],</span> index<span class="sym">)) {</span>
					<span class="kwa">assert</span><span class="sym">(</span>index <span class="sym">==</span> <span class="num">5</span><span class="sym">);</span>
					fits<span class="sym">[</span>cell<span class="sym">][</span>place<span class="sym">] =</span> <span class="kwa">true</span><span class="sym">;</span>
				<span class="sym">}</span>
			<span class="sym">}</span>
		<span class="sym">}</span>
	<span class="sym">}</span>

	<span class="slc">/// load the basic configuration for the given piece number</span>
	<span class="kwa">void</span> <span class="kwd">loadConfig</span><span class="sym">(</span><span class="kwa">int</span> number<span class="sym">)</span>
	<span class="kwa">in</span> <span class="sym">{</span>
		<span class="kwa">assert</span><span class="sym">(</span>number <span class="sym">&lt;</span> <span class="num">10</span><span class="sym">);</span>
	<span class="sym">}</span>
	<span class="kwa">body</span> <span class="sym">{</span>
		<span class="kwa">switch</span><span class="sym">(</span>number<span class="sym">) {</span>
		<span class="kwa">case</span> <span class="num">0</span><span class="sym">:</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> E<span class="sym">,</span> <span class="num">1</span><span class="sym">);</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> E<span class="sym">,</span> <span class="num">2</span><span class="sym">);</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">2</span><span class="sym">,</span> E<span class="sym">,</span> <span class="num">3</span><span class="sym">);</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span> SE<span class="sym">,</span> <span class="num">4</span><span class="sym">);</span>
			<span class="kwa">break</span><span class="sym">;</span>
		<span class="kwa">case</span> <span class="num">1</span><span class="sym">:</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> SE<span class="sym">,</span> <span class="num">1</span><span class="sym">);</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> SW<span class="sym">,</span> <span class="num">2</span><span class="sym">);</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">2</span><span class="sym">,</span> W<span class="sym">,</span> <span class="num">3</span><span class="sym">);</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span> SW<span class="sym">,</span> <span class="num">4</span><span class="sym">);</span>
			<span class="kwa">break</span><span class="sym">;</span>
		<span class="kwa">case</span> <span class="num">2</span><span class="sym">:</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> W<span class="sym">,</span> <span class="num">1</span><span class="sym">);</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> W<span class="sym">,</span> <span class="num">2</span><span class="sym">);</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">2</span><span class="sym">,</span> SW<span class="sym">,</span> <span class="num">3</span><span class="sym">);</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span> SE<span class="sym">,</span> <span class="num">4</span><span class="sym">);</span>
			<span class="kwa">break</span><span class="sym">;</span>
		<span class="kwa">case</span> <span class="num">3</span><span class="sym">:</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> E<span class="sym">,</span> <span class="num">1</span><span class="sym">);</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> E<span class="sym">,</span> <span class="num">2</span><span class="sym">);</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> SE<span class="sym">,</span> <span class="num">3</span><span class="sym">);</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">2</span><span class="sym">,</span> SW<span class="sym">,</span> <span class="num">3</span><span class="sym">);</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span> SE<span class="sym">,</span> <span class="num">4</span><span class="sym">);</span>
			<span class="kwa">break</span><span class="sym">;</span>
		<span class="kwa">case</span> <span class="num">4</span><span class="sym">:</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> SE<span class="sym">,</span> <span class="num">1</span><span class="sym">);</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> SW<span class="sym">,</span> <span class="num">2</span><span class="sym">);</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> E<span class="sym">,</span> <span class="num">3</span><span class="sym">);</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span> SE<span class="sym">,</span> <span class="num">4</span><span class="sym">);</span>
			<span class="kwa">break</span><span class="sym">;</span>
		<span class="kwa">case</span> <span class="num">5</span><span class="sym">:</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> W<span class="sym">,</span> <span class="num">1</span><span class="sym">);</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> SW<span class="sym">,</span> <span class="num">2</span><span class="sym">);</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> SE<span class="sym">,</span> <span class="num">2</span><span class="sym">);</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> SW<span class="sym">,</span> <span class="num">3</span><span class="sym">);</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">2</span><span class="sym">,</span> W<span class="sym">,</span> <span class="num">3</span><span class="sym">);</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span> W<span class="sym">,</span> <span class="num">4</span><span class="sym">);</span>
			<span class="kwa">break</span><span class="sym">;</span>
		<span class="kwa">case</span> <span class="num">6</span><span class="sym">:</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> E<span class="sym">,</span> <span class="num">1</span><span class="sym">);</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> SE<span class="sym">,</span> <span class="num">2</span><span class="sym">);</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> SW<span class="sym">,</span> <span class="num">2</span><span class="sym">);</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">2</span><span class="sym">,</span> SW<span class="sym">,</span> <span class="num">3</span><span class="sym">);</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span> SE<span class="sym">,</span> <span class="num">4</span><span class="sym">);</span>
			<span class="kwa">break</span><span class="sym">;</span>
		<span class="kwa">case</span> <span class="num">7</span><span class="sym">:</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> SW<span class="sym">,</span> <span class="num">1</span><span class="sym">);</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> SE<span class="sym">,</span> <span class="num">2</span><span class="sym">);</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> E<span class="sym">,</span> <span class="num">2</span><span class="sym">);</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">2</span><span class="sym">,</span> E<span class="sym">,</span> <span class="num">3</span><span class="sym">);</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span> NE<span class="sym">,</span> <span class="num">4</span><span class="sym">);</span>
			<span class="kwa">break</span><span class="sym">;</span>
		<span class="kwa">case</span> <span class="num">8</span><span class="sym">:</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> SE<span class="sym">,</span> <span class="num">1</span><span class="sym">);</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> SE<span class="sym">,</span> <span class="num">2</span><span class="sym">);</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">2</span><span class="sym">,</span> E<span class="sym">,</span> <span class="num">3</span><span class="sym">);</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span> SE<span class="sym">,</span> <span class="num">4</span><span class="sym">);</span>
			<span class="kwa">break</span><span class="sym">;</span>
		<span class="kwa">case</span> <span class="num">9</span><span class="sym">:</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> SE<span class="sym">,</span> <span class="num">1</span><span class="sym">);</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> SE<span class="sym">,</span> <span class="num">2</span><span class="sym">);</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">2</span><span class="sym">,</span> SE<span class="sym">,</span> <span class="num">3</span><span class="sym">);</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">2</span><span class="sym">,</span> SW<span class="sym">,</span> <span class="num">4</span><span class="sym">);</span>
			<span class="kwd">connect</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span> W<span class="sym">,</span> <span class="num">4</span><span class="sym">);</span>
			<span class="kwa">break</span><span class="sym">;</span>
		<span class="kwa">default</span><span class="sym">:</span>
			<span class="kwa">assert</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
		<span class="sym">}</span>
	<span class="sym">}</span>

	<span class="slc">/// connect two cells along the specified border</span>
	<span class="kwa">void</span> <span class="kwd">connect</span><span class="sym">(</span><span class="kwa">int</span> cell1<span class="sym">,</span> <span class="kwa">int</span> border<span class="sym">,</span> <span class="kwa">int</span> cell2<span class="sym">)</span>
	<span class="kwa">in</span> <span class="sym">{</span>
		<span class="kwa">assert</span><span class="sym">(</span>cell1 <span class="sym">!=</span> cell2<span class="sym">);</span>
		<span class="kwa">assert</span><span class="sym">(</span><span class="num">0</span> <span class="sym">&lt;=</span> border <span class="sym">&amp;&amp;</span> border <span class="sym">&lt;</span> <span class="num">6</span><span class="sym">);</span>
	<span class="sym">}</span>
	<span class="kwa">body</span> <span class="sym">{</span>
		cells<span class="sym">[</span>cell1<span class="sym">].</span>around<span class="sym">[</span>border<span class="sym">] =</span> cells<span class="sym">[</span>cell2<span class="sym">];</span>
		<span class="kwa">switch</span><span class="sym">(</span>border<span class="sym">) {</span>
			<span class="kwa">case</span> E<span class="sym">:</span> border <span class="sym">=</span> W<span class="sym">;</span> <span class="kwa">break</span><span class="sym">;</span>
			<span class="kwa">case</span> W<span class="sym">:</span> border <span class="sym">=</span> E<span class="sym">;</span> <span class="kwa">break</span><span class="sym">;</span>
			<span class="kwa">case</span> SE<span class="sym">:</span> border <span class="sym">=</span> NW<span class="sym">;</span> <span class="kwa">break</span><span class="sym">;</span>
			<span class="kwa">case</span> NW<span class="sym">:</span> border <span class="sym">=</span> SE<span class="sym">;</span> <span class="kwa">break</span><span class="sym">;</span>
			<span class="kwa">case</span> NE<span class="sym">:</span> border <span class="sym">=</span> SW<span class="sym">;</span> <span class="kwa">break</span><span class="sym">;</span>
			<span class="kwa">case</span> SW<span class="sym">:</span> border <span class="sym">=</span> NE<span class="sym">;</span> <span class="kwa">break</span><span class="sym">;</span>
			<span class="kwa">default</span><span class="sym">:</span> <span class="kwa">assert</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
		<span class="sym">}</span>
		cells<span class="sym">[</span>cell2<span class="sym">].</span>around<span class="sym">[</span>border<span class="sym">] =</span> cells<span class="sym">[</span>cell1<span class="sym">];</span>
	<span class="sym">}</span>

	<span class="kwa">void</span> <span class="kwd">flip</span><span class="sym">() {</span>
		<span class="kwa">foreach</span><span class="sym">(</span>cell<span class="sym">;</span> cells<span class="sym">)</span>
			cell<span class="sym">.</span>flip<span class="sym">;</span>
	<span class="sym">}</span>

	<span class="kwa">void</span> <span class="kwd">rotate</span><span class="sym">() {</span>
		<span class="kwa">foreach</span><span class="sym">(</span>cell<span class="sym">;</span> cells<span class="sym">)</span>
			cell<span class="sym">.</span>rotate<span class="sym">;</span>
	<span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">class</span> Piece <span class="sym">{</span>
	PieceConfig<span class="sym">[</span>PermutationCount<span class="sym">]</span> configs<span class="sym">;</span>
	<span class="kwa">int</span> number<span class="sym">;</span>

	<span class="kwa">this</span><span class="sym">(</span><span class="kwa">int</span> number<span class="sym">,</span> Board b<span class="sym">)</span>
	<span class="kwa">in</span> <span class="sym">{</span>
		<span class="kwa">assert</span><span class="sym">(</span>number <span class="sym">&gt;=</span> <span class="num">0</span> <span class="sym">&amp;&amp;</span> number <span class="sym">&lt;</span> <span class="num">10</span><span class="sym">);</span>
	<span class="sym">}</span>
	<span class="kwa">body</span> <span class="sym">{</span>
		<span class="kwa">this</span><span class="sym">.</span>number <span class="sym">=</span> number<span class="sym">;</span>
		<span class="kwa">for</span><span class="sym">(</span><span class="kwa">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> PermutationCount<span class="sym">; ++</span>i<span class="sym">)</span>
			configs<span class="sym">[</span>i<span class="sym">] =</span> <span class="kwa">new</span> <span class="kwd">PieceConfig</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">,</span> i<span class="sym">,</span> b<span class="sym">);</span>
	<span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">class</span> BoardCell <span class="sym">{</span>
	BoardCell<span class="sym">[</span><span class="num">6</span><span class="sym">]</span> around<span class="sym">;</span>
	<span class="kwa">int</span> number <span class="sym">= -</span><span class="num">1</span><span class="sym">;</span>

	<span class="kwa">uint</span> <span class="kwd">place</span><span class="sym">() {</span> <span class="kwa">return</span> place_<span class="sym">; }</span>
	<span class="kwa">void</span> <span class="kwd">setPlace</span><span class="sym">(</span><span class="kwa">uint</span> place<span class="sym">,</span> BoardCell<span class="sym">[</span>CellsPerBoard<span class="sym">]</span> cells<span class="sym">)</span>
	<span class="kwa">in</span> <span class="sym">{</span>
		<span class="kwa">assert</span><span class="sym">(</span>place <span class="sym">&lt;</span> <span class="num">50</span><span class="sym">);</span>
		<span class="kwa">foreach</span><span class="sym">(</span>cell<span class="sym">;</span> cells<span class="sym">)</span>
			<span class="kwa">assert</span><span class="sym">(!(</span>cell <span class="kwa">is null</span><span class="sym">));</span>
	<span class="sym">}</span>
	<span class="kwa">body</span> <span class="sym">{</span>
		place_ <span class="sym">=</span> place<span class="sym">;</span>
		<span class="kwa">uint</span> row <span class="sym">=</span> place <span class="sym">/</span> <span class="num">5</span><span class="sym">;</span>
		<span class="kwa">assert</span><span class="sym">(</span>row <span class="sym">&lt;</span> <span class="num">10</span><span class="sym">);</span>
		bool firstCol <span class="sym">= ((</span>place<span class="sym">%</span><span class="num">5</span><span class="sym">) ==</span> <span class="num">0</span><span class="sym">);</span>
		bool lastCol <span class="sym">= ((</span>place<span class="sym">%</span><span class="num">5</span><span class="sym">) ==</span> <span class="num">4</span><span class="sym">);</span>

		<span class="kwa">if</span><span class="sym">(</span>row <span class="sym">%</span> <span class="num">2</span> <span class="sym">==</span> <span class="num">0</span><span class="sym">) {</span> <span class="slc">// even row</span>
			<span class="kwa">if</span><span class="sym">(</span>row<span class="sym">) {</span> <span class="slc">// has northern around</span>
				<span class="kwa">if</span><span class="sym">(!</span>firstCol<span class="sym">)</span>
					around<span class="sym">[</span>NW<span class="sym">] =</span> cells<span class="sym">[</span>place <span class="sym">-</span> <span class="num">6</span><span class="sym">];</span>
				around<span class="sym">[</span>NE<span class="sym">] =</span> cells<span class="sym">[</span>place <span class="sym">-</span> <span class="num">5</span><span class="sym">];</span>
			<span class="sym">}</span>
			<span class="slc">// all even rows have southern neighbors</span>
			<span class="kwa">if</span><span class="sym">(!</span>firstCol<span class="sym">)</span>
				around<span class="sym">[</span>SW<span class="sym">] =</span> cells<span class="sym">[</span>place <span class="sym">+</span> <span class="num">4</span><span class="sym">];</span>
			around<span class="sym">[</span>SE<span class="sym">] =</span> cells<span class="sym">[</span>place <span class="sym">+</span> <span class="num">5</span><span class="sym">];</span>
		<span class="sym">}</span>
		<span class="kwa">else</span> <span class="sym">{</span> <span class="slc">// odd row</span>
			<span class="slc">// all odd rows have northern neighbors</span>
			around<span class="sym">[</span>NW<span class="sym">] =</span> cells<span class="sym">[</span>place <span class="sym">-</span> <span class="num">5</span><span class="sym">];</span>
			<span class="kwa">if</span><span class="sym">(!</span>lastCol<span class="sym">)</span>
				around<span class="sym">[</span>NE<span class="sym">] =</span> cells<span class="sym">[</span>place <span class="sym">-</span> <span class="num">4</span><span class="sym">];</span>
			<span class="kwa">if</span><span class="sym">(</span>row <span class="sym">!=</span> <span class="num">9</span><span class="sym">) {</span> <span class="slc">// has southern neighbors</span>
				around<span class="sym">[</span>SW<span class="sym">] =</span> cells<span class="sym">[</span>place <span class="sym">+</span> <span class="num">5</span><span class="sym">];</span>
				<span class="kwa">if</span><span class="sym">(!</span>lastCol<span class="sym">)</span>
					around<span class="sym">[</span>SE<span class="sym">] =</span> cells<span class="sym">[</span>place <span class="sym">+</span> <span class="num">6</span><span class="sym">];</span>
			<span class="sym">}</span>
		<span class="sym">}</span>

		<span class="slc">// add around on this row</span>
		<span class="kwa">if</span><span class="sym">(!</span>firstCol<span class="sym">)</span>
			around<span class="sym">[</span>W<span class="sym">] =</span> cells<span class="sym">[</span>place <span class="sym">-</span> <span class="num">1</span><span class="sym">];</span>
		<span class="kwa">if</span><span class="sym">(!</span>lastCol<span class="sym">)</span>
			around<span class="sym">[</span>E<span class="sym">] =</span> cells<span class="sym">[</span>place <span class="sym">+</span> <span class="num">1</span><span class="sym">];</span>
	<span class="sym">}</span>

	<span class="slc">/// size of the island i'm in; 0 for checked cells and placed ones</span>
	<span class="kwa">uint</span> <span class="kwd">islandSize</span><span class="sym">()</span>
	<span class="kwa">out</span><span class="sym">(</span>result<span class="sym">) {</span>
		<span class="kwa">assert</span><span class="sym">(</span>result <span class="sym">&lt;=</span> <span class="num">50</span><span class="sym">);</span>
	<span class="sym">}</span>
	<span class="kwa">body</span> <span class="sym">{</span>
		<span class="kwa">uint</span> <span class="kwc">ret</span> <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>
		checked <span class="sym">=</span> <span class="kwa">true</span><span class="sym">;</span>
		<span class="kwa">foreach</span><span class="sym">(</span>cell<span class="sym">;</span> around<span class="sym">)</span>
			<span class="kwa">if</span><span class="sym">((!(</span>cell <span class="kwa">is null</span><span class="sym">)) &amp;&amp; (</span>cell<span class="sym">.</span>number <span class="sym">== -</span><span class="num">1</span><span class="sym">) &amp;&amp; (!</span>cell<span class="sym">.</span>checked<span class="sym">))</span>
				<span class="kwc">ret</span> <span class="sym">+=</span> cell<span class="sym">.</span>islandSize<span class="sym">;</span>
		<span class="kwa">return</span> <span class="kwc">ret</span><span class="sym">;</span>
	<span class="sym">}</span>

	<span class="kwa">invariant</span> <span class="sym">{</span>
		<span class="kwa">assert</span><span class="sym">(</span>number <span class="sym">&gt;= -</span><span class="num">1</span><span class="sym">);</span>
		<span class="kwa">assert</span><span class="sym">(</span>number <span class="sym">&lt;</span> <span class="num">10</span><span class="sym">);</span>
	<span class="sym">}</span>

<span class="kwa">private</span><span class="sym">:</span>
	<span class="kwa">uint</span> place_<span class="sym">;</span>
	bool checked<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwa">class</span> Board <span class="sym">{</span>
	BoardCell<span class="sym">[</span>CellsPerBoard<span class="sym">]</span> cells<span class="sym">;</span>

	<span class="kwa">this</span><span class="sym">() {</span>
		<span class="kwa">for</span><span class="sym">(</span><span class="kwa">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> CellsPerBoard<span class="sym">; ++</span>i<span class="sym">)</span>
			cells<span class="sym">[</span>i<span class="sym">] =</span> <span class="kwa">new</span> <span class="kwd">BoardCell</span><span class="sym">();</span>
		<span class="kwa">for</span><span class="sym">(</span><span class="kwa">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> CellsPerBoard<span class="sym">; ++</span>i<span class="sym">)</span>
			cells<span class="sym">[</span>i<span class="sym">].</span><span class="kwd">setPlace</span><span class="sym">(</span>i<span class="sym">,</span> cells<span class="sym">);</span>
		<span class="kwa">assert</span><span class="sym">(</span>cells<span class="sym">[</span><span class="num">0</span><span class="sym">].</span>islandSize <span class="sym">==</span> <span class="num">50</span><span class="sym">);</span>
	<span class="sym">}</span>

	<span class="slc">/// attempt to put a piececell in a boardcell</span>
	bool <span class="kwd">put</span><span class="sym">(</span>PieceConfig pc<span class="sym">,</span> <span class="kwa">uint</span> pieceIndex<span class="sym">,</span> <span class="kwa">uint</span> place<span class="sym">)</span>
	<span class="kwa">in</span> <span class="sym">{</span>
		<span class="kwa">assert</span><span class="sym">(</span>pieceIndex <span class="sym">&lt;</span> <span class="num">5</span><span class="sym">);</span>
		<span class="kwa">assert</span><span class="sym">(</span>place <span class="sym">&lt;</span> <span class="num">50</span><span class="sym">);</span>
		<span class="kwa">assert</span><span class="sym">(</span>cells<span class="sym">[</span>place<span class="sym">].</span>number <span class="sym">== -</span><span class="num">1</span><span class="sym">);</span>
	<span class="sym">}</span>
	<span class="kwa">out</span><span class="sym">(</span>result<span class="sym">) {</span>
		<span class="kwa">assert</span><span class="sym">((</span>cells<span class="sym">[</span>place<span class="sym">].</span>number <span class="sym">&gt;=</span> <span class="num">0</span><span class="sym">) ==</span> result<span class="sym">);</span>
	<span class="sym">}</span>
	<span class="kwa">body</span> <span class="sym">{</span>
		<span class="kwa">if</span><span class="sym">(!</span>pc<span class="sym">.</span>fits<span class="sym">[</span>pieceIndex<span class="sym">][</span>place<span class="sym">])</span>
			<span class="kwa">return false</span><span class="sym">;</span>
		<span class="kwa">foreach</span><span class="sym">(</span>place2<span class="sym">;</span> pc<span class="sym">.</span>places<span class="sym">[</span>pieceIndex<span class="sym">][</span>place<span class="sym">])</span>
			<span class="kwa">if</span><span class="sym">(</span>cells<span class="sym">[</span>place2<span class="sym">].</span>number <span class="sym">&gt; -</span><span class="num">1</span><span class="sym">)</span>
				<span class="kwa">return false</span><span class="sym">;</span>
		<span class="kwa">int</span> number <span class="sym">=</span> pc<span class="sym">.</span>piece<span class="sym">.</span>number<span class="sym">;</span>
		<span class="kwa">foreach</span><span class="sym">(</span>i<span class="sym">,</span> place2<span class="sym">;</span> pc<span class="sym">.</span>places<span class="sym">[</span>pieceIndex<span class="sym">][</span>place<span class="sym">]) {</span>
			piecePlaces<span class="sym">[</span>number<span class="sym">][</span>i<span class="sym">] =</span> place2<span class="sym">;</span>
			cells<span class="sym">[</span>place2<span class="sym">].</span>number <span class="sym">=</span> number<span class="sym">;</span>
		<span class="sym">}</span>
		<span class="kwa">return true</span><span class="sym">;</span>
	<span class="sym">}</span>

	<span class="slc">/// remove a piece from the board</span>
	<span class="kwa">void</span> <span class="kwd">remove</span><span class="sym">(</span><span class="kwa">int</span> number<span class="sym">)</span>
	<span class="kwa">out</span> <span class="sym">{</span>
		<span class="kwa">foreach</span><span class="sym">(</span>cell<span class="sym">;</span> cells<span class="sym">)</span>
			<span class="kwa">assert</span><span class="sym">(</span>cell<span class="sym">.</span>number <span class="sym">!=</span> number<span class="sym">);</span>
	<span class="sym">}</span>
	<span class="kwa">body</span> <span class="sym">{</span>
		<span class="kwa">foreach</span><span class="sym">(</span>place<span class="sym">;</span> piecePlaces<span class="sym">[</span>number<span class="sym">]) {</span>
			<span class="kwa">assert</span><span class="sym">(</span>cells<span class="sym">[</span>place<span class="sym">].</span>number <span class="sym">==</span> number<span class="sym">);</span>
			cells<span class="sym">[</span>place<span class="sym">].</span>number <span class="sym">= -</span><span class="num">1</span><span class="sym">;</span>
		<span class="sym">}</span>
	<span class="sym">}</span>

	<span class="slc">/// checks that a possible solutions exists; purely an optimization</span>
	bool <span class="kwd">possible</span><span class="sym">(</span><span class="kwa">out int</span> newPlace<span class="sym">) {</span>
		<span class="kwa">int</span> placeSize <span class="sym">=</span> <span class="num">51</span><span class="sym">;</span> <span class="slc">// size of island at newPlace</span>
		<span class="kwa">foreach</span><span class="sym">(</span>cell<span class="sym">;</span> cells<span class="sym">)</span>
			cell<span class="sym">.</span>checked <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;</span>
		<span class="kwa">foreach</span><span class="sym">(</span>place<span class="sym">,</span> cell<span class="sym">;</span> cells<span class="sym">) {</span>
			<span class="kwa">if</span><span class="sym">(</span>cell<span class="sym">.</span>checked <span class="sym">||</span> cell<span class="sym">.</span>number <span class="sym">&gt;=</span> <span class="num">0</span><span class="sym">)</span>
				<span class="kwa">continue</span><span class="sym">;</span>
			<span class="kwa">int</span> size <span class="sym">=</span> cell<span class="sym">.</span>islandSize<span class="sym">;</span>
			<span class="kwa">if</span><span class="sym">(</span>size <span class="sym">%</span> <span class="num">5</span><span class="sym">)</span>
				<span class="kwa">return false</span><span class="sym">;</span>
			<span class="kwa">if</span><span class="sym">(</span>size <span class="sym">&amp;&amp;</span> size <span class="sym">&lt;</span> placeSize<span class="sym">) {</span>
				newPlace <span class="sym">=</span> place<span class="sym">;</span>
				placeSize <span class="sym">=</span> size<span class="sym">;</span>
			<span class="sym">}</span>
		<span class="sym">}</span>
		<span class="kwa">return true</span><span class="sym">;</span>
	<span class="sym">}</span>

	<span class="com">/*</span>
<span class="com">	/// print out the board-- merely for debugging purposes</span>
<span class="com">	void printBoard() {</span>
<span class="com">		int[6] printOrder = [NW, NE, W, E, SW, SE];</span>
<span class="com">		writefln(&quot;cell\tNW NE W  E  SW SE&quot;);</span>
<span class="com">		foreach(place, cell; cells) {</span>
<span class="com">			assert(cell.place == place);</span>
<span class="com">			writef(&quot;%d\t&quot;, place);</span>
<span class="com">			foreach(direction; printOrder) {</span>
<span class="com">				BoardCell b = cell.around[direction];</span>
<span class="com">				if(b is null)</span>
<span class="com">					writef(&quot;--&quot;);</span>
<span class="com">				else {</span>
<span class="com">					if(b.place &lt; 10)</span>
<span class="com">						writef(&quot;0&quot;);</span>
<span class="com">					writef(&quot;%d&quot;, b.place);</span>
<span class="com">				}</span>
<span class="com">				writef(&quot; &quot;);</span>
<span class="com">			}</span>
<span class="com">			writefln(&quot;&quot;);</span>
<span class="com">		}</span>
<span class="com">		writefln(&quot;&quot;);</span>
<span class="com">	}</span>
<span class="com">	*/</span>

<span class="kwa">private</span><span class="sym">:</span>
	<span class="kwa">uint</span> piecePlaces<span class="sym">[</span><span class="num">10</span><span class="sym">][</span><span class="num">5</span><span class="sym">];</span>
<span class="sym">}</span>

<span class="kwa">class</span> Solver <span class="sym">{</span>
	<span class="kwa">this</span><span class="sym">() {</span>
		b <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Board</span><span class="sym">();</span>
		low <span class="sym">=</span> <span class="kwa">new</span> result_t<span class="sym">;</span>
		high <span class="sym">=</span> <span class="kwa">new</span> result_t<span class="sym">;</span>
		<span class="kwa">for</span><span class="sym">(</span><span class="kwa">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> <span class="num">50</span><span class="sym">; ++</span>i<span class="sym">)</span>
			low<span class="sym">.</span>numbers<span class="sym">[</span>i<span class="sym">] =</span> <span class="num">9</span><span class="sym">;</span>
		<span class="kwa">for</span><span class="sym">(</span><span class="kwa">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> <span class="num">10</span><span class="sym">; ++</span>i<span class="sym">)</span>
			pieces<span class="sym">[</span>i<span class="sym">] =</span> <span class="kwa">new</span> <span class="kwd">Piece</span><span class="sym">(</span>i<span class="sym">,</span> b<span class="sym">);</span>
	<span class="sym">}</span>

	<span class="kwa">void</span> <span class="kwd">solve</span><span class="sym">(</span><span class="kwa">int</span> place <span class="sym">=</span> <span class="num">0</span><span class="sym">) {</span>
		<span class="sym">++</span>placedCount<span class="sym">;</span>

		<span class="slc">// try fitting each piece in that slot</span>
		<span class="kwa">foreach</span><span class="sym">(</span>number<span class="sym">,</span> piece<span class="sym">;</span> pieces<span class="sym">) {</span>
			<span class="kwa">assert</span><span class="sym">(</span>piece<span class="sym">.</span>number <span class="sym">==</span> number<span class="sym">);</span>
			<span class="kwa">if</span><span class="sym">(</span>piecePlaced<span class="sym">[</span>number<span class="sym">])</span>
				<span class="kwa">continue</span><span class="sym">;</span>
			piecePlaced<span class="sym">[</span>number<span class="sym">] =</span> <span class="kwa">true</span><span class="sym">;</span>

			<span class="slc">// try each configuration of the piece</span>
			<span class="kwa">foreach</span><span class="sym">(</span>config<span class="sym">;</span> piece<span class="sym">.</span>configs<span class="sym">) {</span>
				<span class="slc">// try each cell within the config</span>
				<span class="kwa">foreach</span><span class="sym">(</span>i<span class="sym">,</span> cell<span class="sym">;</span> config<span class="sym">.</span>cells<span class="sym">) {</span>
					<span class="kwa">if</span><span class="sym">(</span>b<span class="sym">.</span><span class="kwd">put</span><span class="sym">(</span>config<span class="sym">,</span> i<span class="sym">,</span> place<span class="sym">)) {</span>
						<span class="kwa">if</span><span class="sym">(</span>placedCount <span class="sym">==</span> <span class="num">10</span><span class="sym">) {</span>
							<span class="sym">++</span>solutions<span class="sym">;</span>
							<span class="kwa">if</span><span class="sym">(</span>low <span class="sym">&gt;</span> b<span class="sym">)</span>
								low<span class="sym">.</span><span class="kwd">fill</span><span class="sym">(</span>b<span class="sym">);</span>
							<span class="kwa">if</span><span class="sym">(</span>high <span class="sym">&lt;</span> b<span class="sym">)</span>
								high<span class="sym">.</span><span class="kwd">fill</span><span class="sym">(</span>b<span class="sym">);</span>
						<span class="sym">}</span>
						<span class="kwa">else</span> <span class="sym">{</span>
							<span class="kwa">int</span> newPlace<span class="sym">;</span>
							<span class="kwa">if</span><span class="sym">(</span>b<span class="sym">.</span><span class="kwd">possible</span><span class="sym">(</span>newPlace<span class="sym">))</span>
								<span class="kwd">solve</span><span class="sym">(</span>newPlace<span class="sym">);</span>
						<span class="sym">}</span>
						b<span class="sym">.</span><span class="kwd">remove</span><span class="sym">(</span>number<span class="sym">);</span>
					<span class="sym">}</span>
				<span class="sym">}</span>
			<span class="sym">}</span>
			piecePlaced<span class="sym">[</span>number<span class="sym">] =</span> <span class="kwa">false</span><span class="sym">;</span>
		<span class="sym">}</span>
		<span class="sym">--</span>placedCount<span class="sym">;</span>
	<span class="sym">}</span>

	<span class="kwa">void</span> <span class="kwd">write</span><span class="sym">() {</span>
		<span class="kwd">writefln</span><span class="sym">(</span><span class="str">&quot;%d solutions found</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> solutions<span class="sym">);</span>
		low<span class="sym">.</span>write<span class="sym">;</span>
		high<span class="sym">.</span>write<span class="sym">;</span>
	<span class="sym">}</span>
<span class="kwa">private</span><span class="sym">:</span>
	bool piecePlaced<span class="sym">[</span><span class="num">10</span><span class="sym">];</span>
	result_t low<span class="sym">,</span> high<span class="sym">;</span>
	Piece<span class="sym">[</span><span class="num">10</span><span class="sym">]</span> pieces<span class="sym">;</span>
	Board b<span class="sym">;</span>
	<span class="kwa">uint</span> solutions<span class="sym">;</span>
	<span class="kwa">int</span> placedCount<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwa">void</span> <span class="kwd">main</span><span class="sym">() {</span>
	Solver s <span class="sym">=</span> <span class="kwa">new</span> Solver<span class="sym">;</span>
	s<span class="sym">.</span>solve<span class="sym">;</span>
	s<span class="sym">.</span>write<span class="sym">;</span>
<span class="sym">}</span>
