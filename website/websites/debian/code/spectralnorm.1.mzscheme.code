<span class="slc">;; The Great Computer Language Shootout</span>
<span class="slc">;; http://shootout.alioth.debian.org/</span>

<span class="slc">;; Translated directly from the C# version, which was:</span>
<span class="slc">;;   contributed by Isaac Gouy</span>

<span class="sym">(</span>module spectralnorm mzscheme
  <span class="sym">(</span>require <span class="sym">(</span>lib <span class="str">&quot;string.ss&quot;</span><span class="sym">))</span>

  <span class="sym">(</span>define <span class="sym">(</span>Approximate n<span class="sym">)</span>
    <span class="sym">(</span>let <span class="sym">([</span>u <span class="sym">(</span>make<span class="sym">-</span>vector n <span class="num">1.0</span><span class="sym">)]</span>
          <span class="sym">[</span>v <span class="sym">(</span>make<span class="sym">-</span>vector n <span class="num">0.0</span><span class="sym">)])</span>
      <span class="slc">;; 20 steps of the power method</span>
      <span class="sym">(</span>let loop <span class="sym">([</span>i <span class="num">0</span><span class="sym">])</span>
        <span class="sym">(</span>unless <span class="sym">(=</span> i <span class="num">10</span><span class="sym">)</span>
          <span class="sym">(</span>MultiplyAtAv n u v<span class="sym">)</span>
          <span class="sym">(</span>MultiplyAtAv n v u<span class="sym">)</span>
          <span class="sym">(</span>loop <span class="sym">(</span>add1 i<span class="sym">))))</span>

      <span class="slc">;; B=AtA         A multiplied by A transposed</span>
      <span class="slc">;; v.Bv /(v.v)   eigenvalue of v</span>
      <span class="sym">(</span>let loop <span class="sym">([</span>i <span class="num">0</span><span class="sym">][</span>vBv <span class="num">0</span><span class="sym">][</span>vv <span class="num">0</span><span class="sym">])</span>
        <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(=</span> i n<span class="sym">)</span>
            <span class="sym">(</span><span class="kwa">sqrt</span> <span class="sym">(/</span> vBv vv<span class="sym">))</span>
            <span class="sym">(</span>let <span class="sym">([</span>vi <span class="sym">(</span>vector<span class="sym">-</span>ref v i<span class="sym">)])</span>
              <span class="sym">(</span>loop <span class="sym">(</span>add1 i<span class="sym">)</span>
                    <span class="sym">(+</span> vBv <span class="sym">(* (</span>vector<span class="sym">-</span>ref u i<span class="sym">)</span> vi<span class="sym">))</span>
                    <span class="sym">(+</span> vv <span class="sym">(*</span> vi vi<span class="sym">))))))))</span>

  <span class="slc">;; return element i,j of infinite matrix A</span>
  <span class="sym">(</span>define <span class="sym">(</span>A i j<span class="sym">)</span>
    <span class="sym">(/</span> <span class="num">1.0</span> <span class="sym">(+ (* (+</span> i j<span class="sym">) (/ (+</span> i j <span class="num">1</span><span class="sym">)</span> <span class="num">2</span><span class="sym">))</span> i <span class="num">1</span><span class="sym">)))</span>

  <span class="slc">;; multiply vector v by matrix A</span>
  <span class="sym">(</span>define <span class="sym">(</span>MultiplyAv n v Av<span class="sym">)</span>
    <span class="sym">(</span>let loop <span class="sym">([</span>i <span class="num">0</span><span class="sym">])</span>
      <span class="sym">(</span>unless <span class="sym">(=</span> i n<span class="sym">)</span>
        <span class="sym">(</span>let jloop <span class="sym">([</span>j <span class="num">0</span><span class="sym">][</span>r <span class="num">0</span><span class="sym">])</span>
          <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(=</span> j n<span class="sym">)</span>
              <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> Av i r<span class="sym">)</span>
              <span class="sym">(</span>jloop <span class="sym">(</span>add1 j<span class="sym">)</span>
                     <span class="sym">(+</span> r <span class="sym">(* (</span>A i j<span class="sym">) (</span>vector<span class="sym">-</span>ref v j<span class="sym">))))))</span>
        <span class="sym">(</span>loop <span class="sym">(</span>add1 i<span class="sym">)))))</span>

  <span class="slc">;; multiply vector v by matrix A transposed</span>
  <span class="sym">(</span>define <span class="sym">(</span>MultiplyAtv n v Atv<span class="sym">)</span>
    <span class="sym">(</span>let loop <span class="sym">([</span>i <span class="num">0</span><span class="sym">])</span>
      <span class="sym">(</span>unless <span class="sym">(=</span> i n<span class="sym">)</span>
        <span class="sym">(</span>let jloop <span class="sym">([</span>j <span class="num">0</span><span class="sym">][</span>r <span class="num">0</span><span class="sym">])</span>
          <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(=</span> j n<span class="sym">)</span>
              <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> Atv i r<span class="sym">)</span>
              <span class="sym">(</span>jloop <span class="sym">(</span>add1 j<span class="sym">)</span>
                     <span class="sym">(+</span> r <span class="sym">(* (</span>A j i<span class="sym">) (</span>vector<span class="sym">-</span>ref v j<span class="sym">))))))</span>
        <span class="sym">(</span>loop <span class="sym">(</span>add1 i<span class="sym">)))))</span>

  <span class="slc">;; multiply vector v by matrix A and then by matrix A transposed</span>
  <span class="sym">(</span>define <span class="sym">(</span>MultiplyAtAv n v AtAv<span class="sym">)</span>
    <span class="sym">(</span>let <span class="sym">([</span>u <span class="sym">(</span>make<span class="sym">-</span>vector n <span class="num">0.0</span><span class="sym">)])</span>
      <span class="sym">(</span>MultiplyAv n v u<span class="sym">)</span>
      <span class="sym">(</span>MultiplyAtv n u AtAv<span class="sym">)))</span>

  <span class="sym">(</span>printf <span class="str">&quot;~a</span><span class="esc">\n</span><span class="str">&quot;</span>
          <span class="sym">(</span>real<span class="sym">-&gt;</span>decimal<span class="sym">-</span>string
           <span class="sym">(</span>Approximate <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span>vector<span class="sym">-</span>ref
                                         <span class="sym">(</span>current<span class="sym">-</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">)</span>
                                         <span class="num">0</span><span class="sym">)))</span>
           <span class="num">9</span><span class="sym">)))</span>
