<span class="slc">;;; The Computer Language Benchmarks Game</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;; contributed by Sven Hartrumpf</span>

<span class="sym">(</span>define make <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>item d<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(=</span> d <span class="num">0</span><span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">list</span> <span class="sym">'</span>empty item<span class="sym">)</span>
    <span class="sym">(</span>let <span class="sym">((</span>item2 <span class="sym">(*</span> item <span class="num">2</span><span class="sym">))</span>
          <span class="sym">(</span>d2 <span class="sym">(-</span> d <span class="num">1</span><span class="sym">)))</span>
      <span class="sym">(</span><span class="kwa">list</span> <span class="sym">'</span>node <span class="sym">(</span>make <span class="sym">(-</span> item2 <span class="num">1</span><span class="sym">)</span> d2<span class="sym">)</span> item <span class="sym">(</span>make item2 d2<span class="sym">))))))</span>

<span class="sym">(</span>define check <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>t<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">eq</span>? <span class="sym">(</span><span class="kwa">car</span> t<span class="sym">) '</span>empty<span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">cadr</span> t<span class="sym">)</span>
    <span class="sym">(+ (</span><span class="kwa">caddr</span> t<span class="sym">) (- (</span>check <span class="sym">(</span><span class="kwa">cadr</span> t<span class="sym">)) (</span>check <span class="sym">(</span><span class="kwa">cadddr</span> t<span class="sym">)))))))</span>

<span class="sym">(</span>define main <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>argv<span class="sym">)</span>
  <span class="sym">(</span>let<span class="sym">* ((</span><span class="kwa">min</span><span class="sym">-</span>depth <span class="num">4</span><span class="sym">)</span>
         <span class="sym">(</span><span class="kwa">max</span><span class="sym">-</span>depth <span class="sym">(</span><span class="kwa">max</span> <span class="sym">(+</span> <span class="kwa">min</span><span class="sym">-</span>depth <span class="num">2</span><span class="sym">) (</span><span class="kwa">if</span> <span class="sym">(</span>pair? argv<span class="sym">) (</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">car</span> argv<span class="sym">))</span> <span class="num">10</span><span class="sym">))))</span>
    <span class="sym">(</span>let <span class="sym">((</span>stretch<span class="sym">-</span>depth <span class="sym">(+</span> <span class="kwa">max</span><span class="sym">-</span>depth <span class="num">1</span><span class="sym">)))</span>
      <span class="sym">(</span>display <span class="str">&quot;stretch tree of depth &quot;</span><span class="sym">) (</span>display stretch<span class="sym">-</span>depth<span class="sym">) (</span>write<span class="sym">-</span>char #\tab<span class="sym">) (</span>display <span class="str">&quot; check: &quot;</span><span class="sym">) (</span>display <span class="sym">(</span>check <span class="sym">(</span>make <span class="num">0</span> stretch<span class="sym">-</span>depth<span class="sym">))) (</span>newline<span class="sym">))</span>
    <span class="sym">(</span>let <span class="sym">((</span>long<span class="sym">-</span>lived<span class="sym">-</span>tree <span class="sym">(</span>make <span class="num">0</span> <span class="kwa">max</span><span class="sym">-</span>depth<span class="sym">)))</span>
      <span class="sym">(</span>do <span class="sym">((</span>d <span class="num">4</span> <span class="sym">(+</span> d <span class="num">2</span><span class="sym">))</span>
           <span class="sym">(</span>c <span class="num">0 0</span><span class="sym">))</span>
        <span class="sym">((&gt;</span> d <span class="kwa">max</span><span class="sym">-</span>depth<span class="sym">))</span>
        <span class="sym">(</span>let <span class="sym">((</span>iterations <span class="sym">(</span>arithmetic<span class="sym">-</span>shift <span class="num">1</span> <span class="sym">(+ (-</span> <span class="kwa">max</span><span class="sym">-</span>depth d<span class="sym">)</span> <span class="kwa">min</span><span class="sym">-</span>depth<span class="sym">))))</span> <span class="slc">; chicken-specific: arithmetic-shift</span>
          <span class="sym">(</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))</span>
            <span class="sym">((&gt;=</span> i iterations<span class="sym">))</span>
            <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> c <span class="sym">(+</span> c <span class="sym">(</span>check <span class="sym">(</span>make i d<span class="sym">)) (</span>check <span class="sym">(</span>make <span class="sym">(-</span> i<span class="sym">)</span> d<span class="sym">)))))</span>
          <span class="sym">(</span>display <span class="sym">(*</span> <span class="num">2</span> iterations<span class="sym">)) (</span>write<span class="sym">-</span>char #\tab<span class="sym">) (</span>display <span class="str">&quot; trees of depth &quot;</span><span class="sym">) (</span>display d<span class="sym">) (</span>write<span class="sym">-</span>char #\tab<span class="sym">) (</span>display <span class="str">&quot; check: &quot;</span><span class="sym">) (</span>display c<span class="sym">) (</span>newline<span class="sym">)))</span>
      <span class="sym">(</span>display <span class="str">&quot;long lived tree of depth &quot;</span><span class="sym">) (</span>display <span class="kwa">max</span><span class="sym">-</span>depth<span class="sym">) (</span>write<span class="sym">-</span>char #\tab<span class="sym">) (</span>display <span class="str">&quot; check: &quot;</span><span class="sym">) (</span>display <span class="sym">(</span>check long<span class="sym">-</span>lived<span class="sym">-</span>tree<span class="sym">)) (</span>newline<span class="sym">)))))</span>

<span class="sym">(</span>main <span class="sym">(</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">))</span>
