<span class="str">&quot;*  The Computer Language Shootout</span>
<span class="str">   http://shootout.alioth.debian.org/</span>
<span class="str">   contributed by Eliot Miranda and Isaac Gouy *&quot;</span><span class="sym">!</span>


<span class="sym">!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>
reverseComplement<span class="sym">:</span> sequence named<span class="sym">:</span> sequenceName to<span class="sym">:</span> output
   <span class="sym">|</span> complement newline lineLength n <span class="sym">|</span>
   <span class="sym">(</span>sequenceName isNil<span class="sym">)</span> ifTrue<span class="sym">: [</span>^self<span class="sym">]</span>.

   complement <span class="sym">:=</span> String new<span class="sym">:</span> <span class="num">128</span> withAll<span class="sym">: $*</span>.

   <span class="str">'ABCDGHKMNRSTVWY'</span> with<span class="sym">:</span>
   <span class="str">'TVGHCDMKNYSABWR'</span>
      <span class="kwa">do</span><span class="sym">: [:</span>a <span class="sym">:</span>b<span class="sym">|</span>
         complement at<span class="sym">:</span> a asInteger put<span class="sym">:</span> b.
         complement at<span class="sym">:</span> a asLowercase asInteger put<span class="sym">:</span> b<span class="sym">]</span>.

   newline <span class="sym">:=</span> Character lf.
   lineLength <span class="sym">:=</span> <span class="num">60</span>.
   n <span class="sym">:=</span> sequence size.

   output nextPutAll<span class="sym">:</span> sequenceName<span class="sym">;</span> nextPut<span class="sym">:</span> newline.

   <span class="sym">[</span>n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">]</span> whileTrue<span class="sym">: [</span>
         <span class="num">1</span> to<span class="sym">: ((</span>n <span class="sym">&lt;</span> lineLength<span class="sym">)</span> ifTrue<span class="sym">: [</span>n<span class="sym">]</span> ifFalse<span class="sym">: [</span>lineLength<span class="sym">])</span> <span class="kwa">do</span><span class="sym">:</span>
            <span class="sym">[:</span>i <span class="sym">|</span> output nextPut<span class="sym">:</span>
               <span class="sym">(</span>complement at<span class="sym">: (</span>sequence at<span class="sym">:</span> n <span class="sym">-</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span> asInteger<span class="sym">)]</span>.
         output nextPut<span class="sym">:</span> newline.
         n <span class="sym">:=</span> n <span class="sym">-</span> lineLength.
      <span class="sym">] ! !</span>


<span class="sym">!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>
readFasta<span class="sym">:</span> sequenceName from<span class="sym">:</span> input
   <span class="sym">|</span> prefix newline buffer description line char <span class="sym">|</span>
   prefix <span class="sym">:=</span> <span class="str">'&gt;'</span><span class="sym">,</span>sequenceName.
   newline <span class="sym">:=</span> Character lf.

   <span class="str">&quot;* find start of particular fasta sequence *&quot;</span>
   <span class="sym">[(</span>input atEnd<span class="sym">)</span> <span class="kwa">or</span><span class="sym">: [</span>
         <span class="sym">(</span>input peek <span class="sym">= $&gt;)</span>
            ifTrue<span class="sym">: [((</span>line <span class="sym">:=</span> input upTo<span class="sym">:</span> newline<span class="sym">)</span>
               indexOfSubCollection<span class="sym">:</span> prefix startingAt<span class="sym">:</span> <span class="num">1</span><span class="sym">) =</span> <span class="num">1</span><span class="sym">]</span>
            ifFalse<span class="sym">: [</span>input skipTo<span class="sym">:</span> newline. false<span class="sym">]]</span>
      <span class="sym">]</span> whileFalse.

   <span class="str">&quot;* line-by-line read - it would be a lot faster to block read *&quot;</span>
   description <span class="sym">:=</span> line.
   buffer <span class="sym">:=</span> ReadWriteStream on<span class="sym">: (</span>String new<span class="sym">:</span> <span class="num">1028</span><span class="sym">)</span>.
   <span class="sym">[(</span>input atEnd<span class="sym">)</span> <span class="kwa">or</span><span class="sym">: [(</span>char <span class="sym">:=</span> input peek<span class="sym">) = $&gt;]]</span> whileFalse<span class="sym">: [</span>
      <span class="sym">(</span>char <span class="sym">= $;)</span>
         ifTrue<span class="sym">: [</span>input upTo<span class="sym">:</span> newline<span class="sym">]</span>
         ifFalse<span class="sym">: [</span>buffer nextPutAll<span class="sym">: (</span>input upTo<span class="sym">:</span> newline<span class="sym">)]</span>
      <span class="sym">]</span>.
   ^Association key<span class="sym">:</span> description value<span class="sym">:</span> buffer contents <span class="sym">! !</span>


<span class="sym">!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmark scripts'</span><span class="sym">!</span>
revcomp
   <span class="sym">|</span> input output <span class="sym">|</span>
   input <span class="sym">:=</span> self stdin.
   output <span class="sym">:=</span> self stdout.

   <span class="slc">#('ONE' 'TWO' 'THREE') do:</span>
      <span class="sym">[:</span>sequenceName<span class="sym">|   |</span> fasta <span class="sym">|</span>
         fasta <span class="sym">:=</span> self readFasta<span class="sym">:</span> sequenceName from<span class="sym">:</span> input.
         self reverseComplement<span class="sym">:</span> fasta value named<span class="sym">:</span> fasta key to<span class="sym">:</span> output.
      <span class="sym">]</span>.

   output flush.
   ^<span class="str">''</span> <span class="sym">! !</span>


Tests revcomp<span class="sym">!</span>
