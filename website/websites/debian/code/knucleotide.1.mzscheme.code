<span class="slc">;;   The Computer Language Shootout</span>
<span class="slc">;;   http://shootout.alioth.debian.org/</span>

<span class="sym">(</span>module knucleotide mzscheme
  <span class="sym">(</span>require <span class="sym">(</span>lib <span class="str">&quot;list.ss&quot;</span><span class="sym">)</span>
           <span class="sym">(</span>lib <span class="str">&quot;string.ss&quot;</span><span class="sym">)</span>
           <span class="sym">(</span>only <span class="sym">(</span>lib <span class="str">&quot;13.ss&quot;</span> <span class="str">&quot;srfi&quot;</span><span class="sym">)</span> string<span class="sym">-</span>pad<span class="sym">-</span>right<span class="sym">))</span>

  <span class="sym">(</span>define <span class="sym">(</span>all<span class="sym">-</span>counts len dna<span class="sym">)</span>
    <span class="sym">(</span>let <span class="sym">([</span>table <span class="sym">(</span>make<span class="sym">-</span>hash<span class="sym">-</span>table<span class="sym">)]</span>
          <span class="sym">[</span>seq <span class="sym">(</span>make<span class="sym">-</span>string len<span class="sym">)])</span>
      <span class="sym">(</span>let loop <span class="sym">([</span>s <span class="sym">(- (</span>string<span class="sym">-</span><span class="kwa">length</span> dna<span class="sym">)</span> len<span class="sym">)])</span>
        <span class="sym">(</span>string<span class="sym">-</span>copy<span class="sym">!</span> seq <span class="num">0</span> dna s <span class="sym">(+</span> s len<span class="sym">))</span>
        <span class="sym">(</span>let <span class="sym">([</span>key <span class="sym">(</span>string<span class="sym">-&gt;</span>symbol seq<span class="sym">)])</span>
          <span class="sym">(</span>let <span class="sym">([</span>cnt <span class="sym">(</span>hash<span class="sym">-</span>table<span class="sym">-</span>get table key <span class="num">0</span><span class="sym">)])</span>
            <span class="sym">(</span>hash<span class="sym">-</span>table<span class="sym">-</span>put<span class="sym">!</span> table key <span class="sym">(</span>add1 cnt<span class="sym">))))</span>
        <span class="sym">(</span>unless <span class="sym">(</span>zero? s<span class="sym">)</span>
          <span class="sym">(</span>loop <span class="sym">(</span>sub1 s<span class="sym">))))</span>
      table<span class="sym">))</span>

  <span class="sym">(</span>define <span class="sym">(</span>write<span class="sym">-</span>freqs table<span class="sym">)</span>
    <span class="sym">(</span>let<span class="sym">* ([</span>content <span class="sym">(</span>hash<span class="sym">-</span>table<span class="sym">-</span>map table <span class="kwa">cons</span><span class="sym">)]</span>
           <span class="sym">[</span>total <span class="sym">(</span>exact<span class="sym">-&gt;</span>inexact <span class="sym">(</span><span class="kwa">apply</span> <span class="sym">+ (</span>map <span class="kwa">cdr</span> content<span class="sym">)))])</span>
      <span class="sym">(</span>for<span class="sym">-</span>each
       <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>a<span class="sym">)</span>
         <span class="sym">(</span>printf <span class="str">&quot;~a ~a</span><span class="esc">\n</span><span class="str">&quot;</span>
                 <span class="sym">(</span><span class="kwa">car</span> a<span class="sym">)</span>
                 <span class="sym">(</span>real<span class="sym">-&gt;</span>decimal<span class="sym">-</span>string <span class="sym">(*</span> <span class="num">100</span> <span class="sym">(/ (</span><span class="kwa">cdr</span> a<span class="sym">)</span> total<span class="sym">))</span> <span class="num">3</span><span class="sym">)))</span>
       <span class="sym">(</span>sort content <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>a b<span class="sym">) (&gt; (</span><span class="kwa">cdr</span> a<span class="sym">) (</span><span class="kwa">cdr</span> b<span class="sym">)))))))</span>

  <span class="sym">(</span>define <span class="sym">(</span>write<span class="sym">-</span>one<span class="sym">-</span>freq table key<span class="sym">)</span>
    <span class="sym">(</span>let <span class="sym">([</span>cnt <span class="sym">(</span>hash<span class="sym">-</span>table<span class="sym">-</span>get table key <span class="num">0</span><span class="sym">)])</span>
      <span class="sym">(</span>printf <span class="str">&quot;~a</span><span class="esc">\t</span><span class="str">~a</span><span class="esc">\n</span><span class="str">&quot;</span> cnt key<span class="sym">)))</span>

  <span class="sym">(</span>define dna
    <span class="sym">(</span>begin
      <span class="slc">;; Skip to &quot;&gt;THREE ...&quot;</span>
      <span class="sym">(</span>regexp<span class="sym">-</span>match #rx#<span class="str">&quot;(?m:^&gt;THREE.*$)&quot;</span> <span class="sym">(</span>current<span class="sym">-</span>input<span class="sym">-</span>port<span class="sym">))</span>
      <span class="sym">(</span>let <span class="sym">([</span>s <span class="sym">(</span><span class="kwa">open</span><span class="sym">-</span>output<span class="sym">-</span>string<span class="sym">)])</span>
        <span class="slc">;; Copy everything but newlines to s:</span>
        <span class="sym">(</span>let loop <span class="sym">()</span>
          <span class="sym">(</span>when <span class="sym">(</span>regexp<span class="sym">-</span>match #rx#<span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">(</span>current<span class="sym">-</span>input<span class="sym">-</span>port<span class="sym">)</span> <span class="num">0</span> #f s<span class="sym">)</span>
            <span class="sym">(</span>loop<span class="sym">)))</span>
        <span class="slc">;; Extract the string from s:</span>
        <span class="sym">(</span>string<span class="sym">-</span>upcase <span class="sym">(</span>get<span class="sym">-</span>output<span class="sym">-</span>string s<span class="sym">)))))</span>

  <span class="slc">;; 1-nucleotide counts:</span>
  <span class="sym">(</span>write<span class="sym">-</span>freqs <span class="sym">(</span>all<span class="sym">-</span>counts <span class="num">1</span> dna<span class="sym">))</span>
  <span class="sym">(</span>newline<span class="sym">)</span>

  <span class="slc">;; 2-nucleotide counts:</span>
  <span class="sym">(</span>write<span class="sym">-</span>freqs <span class="sym">(</span>all<span class="sym">-</span>counts <span class="num">2</span> dna<span class="sym">))</span>
  <span class="sym">(</span>newline<span class="sym">)</span>

  <span class="slc">;; Specific sequences:</span>
  <span class="sym">(</span>for<span class="sym">-</span>each <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>seq<span class="sym">)</span>
              <span class="sym">(</span>write<span class="sym">-</span>one<span class="sym">-</span>freq <span class="sym">(</span>all<span class="sym">-</span>counts <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">length</span> seq<span class="sym">)</span> dna<span class="sym">)</span>
                              <span class="sym">(</span>string<span class="sym">-&gt;</span>symbol seq<span class="sym">)))</span>
            <span class="sym">'(</span><span class="str">&quot;GGT&quot;</span> <span class="str">&quot;GGTA&quot;</span> <span class="str">&quot;GGTATT&quot;</span> <span class="str">&quot;GGTATTTTAATT&quot;</span> <span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="sym">))</span>

  <span class="sym">)</span>



