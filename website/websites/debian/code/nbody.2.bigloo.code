<span class="slc">;;; The Great Computer Language Shootout</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;; contributed by Will M. Farr</span>
<span class="slc">;; based on program by Greg Buchholz</span>
<span class="slc">;; re-written in an imperative style with explicitly-typed vectors of</span>
<span class="slc">;; double-precision floats.</span>

<span class="sym">(</span>module nbody
  <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span>tvector f64vector <span class="sym">(</span>double<span class="sym">)))</span>
  <span class="sym">(</span>main main<span class="sym">)</span>
  <span class="sym">(</span>extern <span class="sym">(</span>macro cprintf<span class="sym">::</span>int <span class="sym">(</span>string double<span class="sym">)</span> <span class="str">&quot;printf&quot;</span><span class="sym">))</span>
  <span class="sym">(</span>static
   <span class="sym">(</span>final<span class="sym">-</span>class planet
     q<span class="sym">::</span>f64vector v<span class="sym">::</span>f64vector m<span class="sym">::</span>double<span class="sym">)))</span>

<span class="sym">(</span>define <span class="sym">(</span>f64vector . args<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span><span class="kwa">length</span> args<span class="sym">)))</span>
    <span class="sym">(</span>let <span class="sym">((</span>result <span class="sym">(</span>make<span class="sym">-</span>f64vector n <span class="num">0.0</span><span class="sym">)))</span>
      <span class="sym">(</span>let loop <span class="sym">((</span>i <span class="num">0</span><span class="sym">) (</span>arg <span class="sym">(</span><span class="kwa">car</span> args<span class="sym">)) (</span><span class="kwa">rem</span> <span class="sym">(</span><span class="kwa">cdr</span> args<span class="sym">)))</span>
	<span class="sym">(</span>f64vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> result i arg<span class="sym">)</span>
	<span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">null</span>? <span class="kwa">rem</span><span class="sym">)</span>
	    result
	    <span class="sym">(</span>loop <span class="sym">(+</span>fx i <span class="num">1</span><span class="sym">) (</span><span class="kwa">car rem</span><span class="sym">) (</span><span class="kwa">cdr rem</span><span class="sym">)))))))</span>

<span class="sym">(</span>define<span class="sym">-</span>expander do<span class="sym">-</span>range
  <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>x e<span class="sym">)</span>
    <span class="sym">(</span>match<span class="sym">-</span>case x
      <span class="sym">((</span>do<span class="sym">-</span>range <span class="sym">(</span>?i ?aa ?bb<span class="sym">)</span> . ?body<span class="sym">)</span>
       <span class="sym">(</span>let <span class="sym">((</span>a <span class="sym">(</span>gensym<span class="sym">))</span>
	     <span class="sym">(</span>b <span class="sym">(</span>gensym<span class="sym">)))</span>
	 <span class="sym">(</span>e `<span class="sym">(</span>let <span class="sym">((,</span>a <span class="sym">,</span>aa<span class="sym">)</span>
		   <span class="sym">(,</span>b <span class="sym">,</span>bb<span class="sym">))</span>
	       <span class="sym">(</span>do <span class="sym">((,</span>i <span class="sym">,</span>a <span class="sym">(+</span>fx <span class="sym">,</span>i <span class="num">1</span><span class="sym">)))</span>
		   <span class="sym">((&gt;=</span>fx <span class="sym">,</span>i <span class="sym">,</span>b<span class="sym">))</span>
		 <span class="sym">,</span>&#64;body<span class="sym">))</span> e<span class="sym">))))))</span>

<span class="sym">(</span>define<span class="sym">-</span>expander do<span class="sym">-</span>times
  <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>x e<span class="sym">)</span>
    <span class="sym">(</span>match<span class="sym">-</span>case x
      <span class="sym">((</span>do<span class="sym">-</span>times <span class="sym">(</span>?i ?nn<span class="sym">)</span> . ?body<span class="sym">)</span>
       <span class="sym">(</span>e `<span class="sym">(</span>do<span class="sym">-</span>range <span class="sym">(,</span>i <span class="num">0</span> <span class="sym">,</span>nn<span class="sym">) ,</span>&#64;body<span class="sym">)</span> e<span class="sym">)))))</span>

<span class="sym">(</span>define <span class="sym">(</span>dot a b<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>sum <span class="num">0.0</span><span class="sym">))</span>
    <span class="sym">(</span>do<span class="sym">-</span>times <span class="sym">(</span>i <span class="num">3</span><span class="sym">)</span>
      <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> sum <span class="sym">(+</span>fl sum <span class="sym">(*</span>fl <span class="sym">(</span>f64vector<span class="sym">-</span>ref a i<span class="sym">)</span>
			      <span class="sym">(</span>f64vector<span class="sym">-</span>ref b i<span class="sym">)))))</span>
    sum<span class="sym">))</span>

<span class="sym">(</span>define <span class="sym">(</span>v<span class="sym">+!</span> into a b<span class="sym">)</span>
  <span class="sym">(</span>do<span class="sym">-</span>times <span class="sym">(</span>i <span class="num">3</span><span class="sym">)</span>
    <span class="sym">(</span>f64vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> into i <span class="sym">(+</span>fl <span class="sym">(</span>f64vector<span class="sym">-</span>ref a i<span class="sym">)</span>
				<span class="sym">(</span>f64vector<span class="sym">-</span>ref b i<span class="sym">))))</span>
  into<span class="sym">)</span>

<span class="sym">(</span>define <span class="sym">(</span>v<span class="sym">-!</span> into a b<span class="sym">)</span>
  <span class="sym">(</span>do<span class="sym">-</span>times <span class="sym">(</span>i <span class="num">3</span><span class="sym">)</span>
    <span class="sym">(</span>f64vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> into i <span class="sym">(-</span>fl <span class="sym">(</span>f64vector<span class="sym">-</span>ref a i<span class="sym">)</span>
				<span class="sym">(</span>f64vector<span class="sym">-</span>ref b i<span class="sym">))))</span>
  into<span class="sym">)</span>

<span class="sym">(</span>define <span class="sym">(</span>mag<span class="sym">-</span>squared v<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>sum <span class="num">0.0</span><span class="sym">))</span>
    <span class="sym">(</span>do<span class="sym">-</span>times <span class="sym">(</span>i <span class="num">3</span><span class="sym">)</span>
      <span class="sym">(</span>let <span class="sym">((</span>temp <span class="sym">(</span>f64vector<span class="sym">-</span>ref v i<span class="sym">)))</span>
	<span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> sum <span class="sym">(+</span>fl sum <span class="sym">(*</span>fl temp temp<span class="sym">)))))</span>
    sum<span class="sym">))</span>

<span class="sym">(</span>define <span class="sym">(</span>mag v<span class="sym">)</span>
  <span class="sym">(</span>sqrtfl <span class="sym">(</span>mag<span class="sym">-</span>squared v<span class="sym">)))</span>

<span class="sym">(</span>define <span class="sym">(</span>scale<span class="sym">!</span> into x v<span class="sym">)</span>
  <span class="sym">(</span>do<span class="sym">-</span>times <span class="sym">(</span>i <span class="num">3</span><span class="sym">)</span>
    <span class="sym">(</span>f64vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> into i <span class="sym">(*</span>fl x <span class="sym">(</span>f64vector<span class="sym">-</span>ref v i<span class="sym">))))</span>
  into<span class="sym">)</span>

<span class="sym">(</span>define <span class="sym">+</span>pi<span class="sym">+</span> <span class="num">3.141592653589793</span><span class="sym">)</span>
<span class="sym">(</span>define <span class="sym">+</span>solar<span class="sym">-</span>mass<span class="sym">+ (*</span> <span class="num">4.0</span> <span class="sym">+</span>pi<span class="sym">+ +</span>pi<span class="sym">+))</span>
<span class="sym">(</span>define <span class="sym">+</span>days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">+</span> <span class="num">365.24</span><span class="sym">)</span>

<span class="sym">(</span>define Jupiter
  <span class="sym">(</span>make<span class="sym">-</span>planet
   <span class="sym">(</span>f64vector <span class="num">4.84143144246472090e+00</span>
	      <span class="sym">-</span><span class="num">1.16032004402742839e+00</span>
	      <span class="sym">-</span><span class="num">1.03622044471123109e-01</span><span class="sym">)</span>
   <span class="sym">(</span>f64vector <span class="sym">(*</span> <span class="num">1.66007664274403694e-03</span>  <span class="sym">+</span>days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">+)</span>
	      <span class="sym">(*</span> <span class="num">7.69901118419740425e-03</span>  <span class="sym">+</span>days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">+)</span>
	      <span class="sym">(* -</span><span class="num">6.90460016972063023e-05</span> <span class="sym">+</span>days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">+))</span>
   <span class="sym">(*</span> <span class="num">9.54791938424326609e-04</span> <span class="sym">+</span>solar<span class="sym">-</span>mass<span class="sym">+)))</span>

<span class="sym">(</span>define Saturn
  <span class="sym">(</span>make<span class="sym">-</span>planet
   <span class="sym">(</span>f64vector <span class="num">8.34336671824457987e+00</span>
	      <span class="num">4.12479856412430479e+00</span>
	      <span class="sym">-</span><span class="num">4.03523417114321381e-01</span><span class="sym">)</span>
   <span class="sym">(</span>f64vector <span class="sym">(* -</span><span class="num">2.76742510726862411e-03</span> <span class="sym">+</span>days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">+)</span>
	      <span class="sym">(*</span> <span class="num">4.99852801234917238e-03</span>  <span class="sym">+</span>days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">+)</span>
	      <span class="sym">(*</span> <span class="num">2.30417297573763929e-05</span>  <span class="sym">+</span>days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">+))</span>
   <span class="sym">(*</span> <span class="num">2.85885980666130812e-04</span> <span class="sym">+</span>solar<span class="sym">-</span>mass<span class="sym">+)))</span>

<span class="sym">(</span>define Uranus
  <span class="sym">(</span>make<span class="sym">-</span>planet
   <span class="sym">(</span>f64vector <span class="num">1.28943695621391310e+01</span>
	      <span class="sym">-</span><span class="num">1.51111514016986312e+01</span>
	      <span class="sym">-</span><span class="num">2.23307578892655734e-01</span><span class="sym">)</span>
   <span class="sym">(</span>f64vector <span class="sym">(*</span> <span class="num">2.96460137564761618e-03</span>  <span class="sym">+</span>days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">+)</span>
	      <span class="sym">(*</span> <span class="num">2.37847173959480950e-03</span>  <span class="sym">+</span>days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">+)</span>
	      <span class="sym">(* -</span><span class="num">2.96589568540237556e-05</span> <span class="sym">+</span>days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">+))</span>
   <span class="sym">(*</span> <span class="num">4.36624404335156298e-05</span> <span class="sym">+</span>solar<span class="sym">-</span>mass<span class="sym">+)))</span>

<span class="sym">(</span>define Neptune
  <span class="sym">(</span>make<span class="sym">-</span>planet
   <span class="sym">(</span>f64vector <span class="num">1.53796971148509165e+01</span>
	      <span class="sym">-</span><span class="num">2.59193146099879641e+01</span>
	      <span class="num">1.79258772950371181e-01</span><span class="sym">)</span>
   <span class="sym">(</span>f64vector <span class="sym">(*</span> <span class="num">2.68067772490389322e-03</span>  <span class="sym">+</span>days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">+)</span>
	      <span class="sym">(*</span> <span class="num">1.62824170038242295e-03</span>  <span class="sym">+</span>days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">+)</span>
	      <span class="sym">(* -</span><span class="num">9.51592254519715870e-05</span> <span class="sym">+</span>days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">+))</span>
   <span class="sym">(*</span> <span class="num">5.15138902046611451e-05</span> <span class="sym">+</span>solar<span class="sym">-</span>mass<span class="sym">+)))</span>

<span class="sym">(</span>define Sun <span class="sym">(</span>make<span class="sym">-</span>planet
	     <span class="sym">(</span>f64vector <span class="num">0.0 0.0 0.0</span><span class="sym">)</span>
	     <span class="sym">(</span>f64vector <span class="num">0.0 0.0 0.0</span><span class="sym">)</span>
	     <span class="sym">+</span>solar<span class="sym">-</span>mass<span class="sym">+))</span>

<span class="sym">(</span>define <span class="sym">(</span><span class="kwa">distance</span> v1 v2<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>sum <span class="num">0.0</span><span class="sym">))</span>
    <span class="sym">(</span>do<span class="sym">-</span>times <span class="sym">(</span>i <span class="num">3</span><span class="sym">)</span>
      <span class="sym">(</span>let <span class="sym">((</span>temp <span class="sym">(-</span>fl <span class="sym">(</span>f64vector<span class="sym">-</span>ref v1 i<span class="sym">)</span>
		       <span class="sym">(</span>f64vector<span class="sym">-</span>ref v2 i<span class="sym">))))</span>
	<span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> sum <span class="sym">(+</span>fl sum <span class="sym">(*</span>fl temp temp<span class="sym">)))))</span>
    <span class="sym">(</span>sqrtfl sum<span class="sym">)))</span>

<span class="sym">(</span>define adv<span class="sym">-</span>a<span class="sym">/</span>m <span class="sym">(</span>make<span class="sym">-</span>f64vector <span class="num">3 0.0</span><span class="sym">))</span>
<span class="sym">(</span>define adv<span class="sym">-</span>a <span class="sym">(</span>make<span class="sym">-</span>f64vector <span class="num">3 0.0</span><span class="sym">))</span>
<span class="sym">(</span>define store <span class="sym">(</span>make<span class="sym">-</span>f64vector <span class="num">3 0.0</span><span class="sym">))</span>

<span class="sym">(</span>define <span class="sym">(</span>advance<span class="sym">!</span> system dt<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">length</span> system<span class="sym">)))</span>
    <span class="sym">(</span>do<span class="sym">-</span>times <span class="sym">(</span>i n<span class="sym">)</span>
      <span class="sym">(</span>with<span class="sym">-</span>access<span class="sym">::</span>planet <span class="sym">(</span>vector<span class="sym">-</span>ref system i<span class="sym">) ((</span>mi m<span class="sym">) (</span>qi q<span class="sym">) (</span>vi v<span class="sym">))</span>
	<span class="sym">(</span>do<span class="sym">-</span>range <span class="sym">(</span>j <span class="sym">(+</span>fx i <span class="num">1</span><span class="sym">)</span> n<span class="sym">)</span>
	  <span class="sym">(</span>with<span class="sym">-</span>access<span class="sym">::</span>planet <span class="sym">(</span>vector<span class="sym">-</span>ref system j<span class="sym">) ((</span>mj m<span class="sym">) (</span>qj q<span class="sym">) (</span>vj v<span class="sym">))</span>
	    <span class="sym">(</span>v<span class="sym">-!</span> adv<span class="sym">-</span>a<span class="sym">/</span>m qj qi<span class="sym">)</span>
	    <span class="sym">(</span>let<span class="sym">* ((</span>r <span class="sym">(</span>mag adv<span class="sym">-</span>a<span class="sym">/</span>m<span class="sym">))</span>
		   <span class="sym">(</span>dt<span class="sym">/</span>r3 <span class="sym">(/</span>fl dt
			       <span class="sym">(*</span>fl <span class="sym">(*</span>fl r r<span class="sym">)</span> r<span class="sym">))))</span>
	      <span class="sym">(</span>scale<span class="sym">!</span> adv<span class="sym">-</span>a<span class="sym">/</span>m dt<span class="sym">/</span>r3 adv<span class="sym">-</span>a<span class="sym">/</span>m<span class="sym">)</span> <span class="slc">;; a/m now holds dt*F_ij/(mi*mj)</span>
	      <span class="sym">(</span>scale<span class="sym">!</span> adv<span class="sym">-</span>a mj adv<span class="sym">-</span>a<span class="sym">/</span>m<span class="sym">)</span>
	      <span class="sym">(</span>v<span class="sym">+!</span> vi vi adv<span class="sym">-</span>a<span class="sym">)</span>
	      <span class="sym">(</span>scale<span class="sym">!</span> adv<span class="sym">-</span>a mi adv<span class="sym">-</span>a<span class="sym">/</span>m<span class="sym">)</span>
	      <span class="sym">(</span>v<span class="sym">-!</span> vj vj adv<span class="sym">-</span>a<span class="sym">))))))</span>
    <span class="sym">(</span>do<span class="sym">-</span>times <span class="sym">(</span>i n<span class="sym">)</span>
      <span class="sym">(</span>with<span class="sym">-</span>access<span class="sym">::</span>planet <span class="sym">(</span>vector<span class="sym">-</span>ref system i<span class="sym">) (</span>m q v<span class="sym">)</span>
	<span class="sym">(</span>scale<span class="sym">!</span> store dt v<span class="sym">)</span>
	<span class="sym">(</span>v<span class="sym">+!</span> q q store<span class="sym">)))))</span>

<span class="sym">(</span>define <span class="sym">(</span>energy system<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">length</span> system<span class="sym">))</span>
	<span class="sym">(</span>e <span class="num">0.0</span><span class="sym">))</span>
    <span class="sym">(</span>do<span class="sym">-</span>times <span class="sym">(</span>i n<span class="sym">)</span>
      <span class="sym">(</span>with<span class="sym">-</span>access<span class="sym">::</span>planet <span class="sym">(</span>vector<span class="sym">-</span>ref system i<span class="sym">) ((</span>mi m<span class="sym">) (</span>qi q<span class="sym">) (</span>vi v<span class="sym">))</span>
	<span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> e <span class="sym">(+</span>fl e <span class="sym">(*</span>fl <span class="num">0.5</span> <span class="sym">(*</span>fl mi <span class="sym">(</span>mag<span class="sym">-</span>squared vi<span class="sym">)))))</span>
	<span class="sym">(</span>do<span class="sym">-</span>range <span class="sym">(</span>j <span class="sym">(+</span>fx i <span class="num">1</span><span class="sym">)</span> n<span class="sym">)</span>
	  <span class="sym">(</span>with<span class="sym">-</span>access<span class="sym">::</span>planet <span class="sym">(</span>vector<span class="sym">-</span>ref system j<span class="sym">) ((</span>mj m<span class="sym">) (</span>qj q<span class="sym">))</span>
	    <span class="sym">(</span>let <span class="sym">((</span>r <span class="sym">(</span><span class="kwa">distance</span> qi qj<span class="sym">)))</span>
	      <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> e <span class="sym">(-</span>fl e <span class="sym">(/</span>fl <span class="sym">(*</span>fl mi mj<span class="sym">)</span> r<span class="sym">))))))))</span>
    e<span class="sym">))</span>

<span class="sym">(</span>define <span class="sym">(</span>zero<span class="sym">-</span>momentum<span class="sym">!</span> bs<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>sun <span class="sym">(</span>vector<span class="sym">-</span>ref bs <span class="num">0</span><span class="sym">))</span>
	<span class="sym">(</span>p <span class="sym">(</span>make<span class="sym">-</span>f64vector <span class="num">3 0.0</span><span class="sym">))</span>
	<span class="sym">(</span>store <span class="sym">(</span>make<span class="sym">-</span>f64vector <span class="num">3 0.0</span><span class="sym">)))</span>
    <span class="sym">(</span>do<span class="sym">-</span>range <span class="sym">(</span>i <span class="num">1</span> <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">length</span> bs<span class="sym">))</span>
      <span class="sym">(</span>with<span class="sym">-</span>access<span class="sym">::</span>planet <span class="sym">(</span>vector<span class="sym">-</span>ref bs i<span class="sym">) (</span>m v<span class="sym">)</span>
	<span class="sym">(</span>scale<span class="sym">!</span> store m v<span class="sym">)</span>
	<span class="sym">(</span>v<span class="sym">+!</span> p p store<span class="sym">)))</span>
    <span class="sym">(</span>scale<span class="sym">! (</span>planet<span class="sym">-</span>v sun<span class="sym">) (/</span>fl <span class="sym">-</span><span class="num">1.0</span> <span class="sym">+</span>solar<span class="sym">-</span>mass<span class="sym">+)</span> p<span class="sym">)))</span>

<span class="sym">(</span>define <span class="sym">(</span>main argv<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">cadr</span> argv<span class="sym">)))</span>
	<span class="sym">(</span>system <span class="sym">(</span>vector Sun Jupiter Saturn Uranus Neptune<span class="sym">)))</span>
    <span class="sym">(</span>zero<span class="sym">-</span>momentum<span class="sym">!</span> system<span class="sym">)</span>
    <span class="sym">(</span>cprintf <span class="str">&quot;%.9f</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">(</span>energy system<span class="sym">))</span>
    <span class="sym">(</span>do<span class="sym">-</span>times <span class="sym">(</span>i n<span class="sym">)</span>
      <span class="sym">(</span>advance<span class="sym">!</span> system <span class="num">0.01</span><span class="sym">))</span>
    <span class="sym">(</span>cprintf <span class="str">&quot;%.9f&quot;</span> <span class="sym">(</span>energy system<span class="sym">)))</span>
  <span class="num">0</span><span class="sym">)</span>
