<span class="com">(* The Computer Language Benchmarks Game</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Contributed by Christophe TROESTLER</span>
<span class="com"> * modified by Mario Pernici</span>
<span class="com"> * modified by Vladimir Silyaev</span>
<span class="com"> * modified by Edgar Friendly and Nicolas Cannasse</span>
<span class="com"> *)</span>

<span class="kwa">module</span> BitSet <span class="sym">=</span> <span class="kwa">struct</span>

  <span class="kwa">type</span> intern

  <span class="kwa">let</span> bcreate <span class="sym">:</span> <span class="kwb">int</span> <span class="sym">-&gt;</span> intern <span class="sym">=</span> Obj.magic String.create
  <span class="kwa">external</span> fast_get <span class="sym">:</span> intern <span class="sym">-&gt;</span> <span class="kwb">int</span> <span class="sym">-&gt;</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="str">&quot;%string_unsafe_get&quot;</span>
  <span class="kwa">external</span> fast_set <span class="sym">:</span> intern <span class="sym">-&gt;</span> <span class="kwb">int</span> <span class="sym">-&gt;</span> <span class="kwb">int</span> <span class="sym">-&gt;</span> <span class="kwb">unit</span> <span class="sym">=</span> <span class="str">&quot;%string_unsafe_set&quot;</span>
  <span class="kwa">external</span> fast_bool <span class="sym">:</span> <span class="kwb">int</span> <span class="sym">-&gt;</span> <span class="kwb">bool</span> <span class="sym">=</span> <span class="str">&quot;%identity&quot;</span>
  <span class="kwa">let</span> fast_fill <span class="sym">:</span> intern <span class="sym">-&gt;</span> <span class="kwb">int</span> <span class="sym">-&gt;</span> <span class="kwb">int</span> <span class="sym">-&gt;</span> <span class="kwb">int</span> <span class="sym">-&gt;</span> <span class="kwb">unit</span> <span class="sym">=</span> Obj.magic String.fill
  <span class="kwa">let</span> fast_length <span class="sym">:</span> intern <span class="sym">-&gt;</span> <span class="kwb">int</span><span class="sym">=</span> Obj.magic String.length

  <span class="kwa">let</span> int_size <span class="sym">=</span> <span class="kwd">7</span> <span class="com">(* value used to round up index *)</span>
  <span class="kwa">let</span> log_int_size <span class="sym">=</span> <span class="kwd">3</span> <span class="com">(* number of shifts *)</span>

  <span class="kwa">let</span> create n <span class="sym">=</span>
    <span class="kwa">let</span> size <span class="sym">= (</span>n<span class="sym">+</span>int_size<span class="sym">)</span> <span class="kwa">lsr</span> log_int_size <span class="kwa">in</span>
    <span class="kwa">let</span> b <span class="sym">=</span> bcreate size <span class="kwa">in</span>
      fast_fill b <span class="num">0</span> size <span class="num">0xFF</span><span class="sym">;</span>
      b

<span class="com">(*  let set t x =</span>
<span class="com">    let pos = x lsr log_int_size and delta = x land int_size in</span>
<span class="com">      fast_set t pos ((fast_get t pos) lor (1 lsl delta))</span>
<span class="com">*)</span>

  <span class="kwa">let</span> unset t x <span class="sym">=</span>
    <span class="kwa">let</span> pos <span class="sym">=</span> x <span class="kwa">lsr</span> log_int_size <span class="kwa">and</span> delta <span class="sym">=</span> x <span class="kwa">land</span> int_size <span class="kwa">in</span>
	fast_set t <span class="kwd">pos</span> <span class="sym">((</span>fast_get t pos<span class="sym">)</span> <span class="kwa">land</span> <span class="sym">(</span><span class="num">0xFF</span> <span class="kwa">lxor</span> <span class="sym">(</span><span class="num">1</span> <span class="kwa">lsl</span> delta<span class="sym">)))</span>

  <span class="kwa">let</span> is_set t x <span class="sym">=</span>
    <span class="kwa">let</span> pos <span class="sym">=</span> x <span class="kwa">lsr</span> log_int_size <span class="kwa">and</span> delta <span class="sym">=</span> x <span class="kwa">land</span> int_size <span class="kwa">in</span>
      <span class="kwd">fast_bool</span> <span class="sym">(((</span>fast_get t pos<span class="sym">)</span> <span class="kwa">lsr</span> delta<span class="sym">)</span> <span class="kwa">land</span> <span class="num">1</span><span class="sym">)</span>

<span class="kwa">end</span>

<span class="kwa">let</span> nsieve m <span class="sym">=</span>
  <span class="kwa">let</span> a <span class="sym">=</span> BitSet.create m <span class="kwa">in</span>
  <span class="kwa">let</span> count <span class="sym">=</span> ref <span class="num">0</span> <span class="kwa">in</span>
  <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">2</span> <span class="kwa">to</span> m <span class="sym">-</span> <span class="num">1</span> <span class="kwa">do</span>
    <span class="kwa">if</span> BitSet.is_set a i <span class="kwa">then</span>
      <span class="sym">(</span><span class="kwa">let</span> j <span class="sym">=</span> <span class="kwd">ref</span><span class="sym">(</span><span class="num">2</span><span class="sym">*</span>i<span class="sym">)</span> <span class="kwa">in</span>
      <span class="kwa">while</span> <span class="sym">!</span>j <span class="sym">&lt;</span> m <span class="kwa">do</span> BitSet.unset a <span class="sym">!</span>j<span class="sym">;</span>  j <span class="sym">:= !</span>j <span class="sym">+</span> i <span class="kwa">done</span><span class="sym">;</span>
      incr count<span class="sym">)</span>
  <span class="kwa">done</span><span class="sym">;</span>
  <span class="sym">!</span>count


<span class="kwa">let</span> test n <span class="sym">=</span>
  <span class="kwa">let</span> m <span class="sym">=</span> <span class="num">10000</span> <span class="kwa">lsl</span> n <span class="kwa">in</span>
  Printf.printf <span class="str">&quot;Primes up to %8i %8i</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="kwd">m</span> <span class="sym">(</span>nsieve m<span class="sym">)</span>

<span class="kwa">let</span> <span class="sym">() =</span>
  <span class="kwa">let</span> n <span class="sym">=</span>
    <span class="kwa">try</span> <span class="kwd">int_of_string</span><span class="sym">(</span>Array.get Sys.argv <span class="num">1</span><span class="sym">)</span>
    <span class="kwa">with</span> _ <span class="sym">-&gt; (</span>Printf.printf <span class="str">&quot;usage: %s N</span><span class="esc">\n</span><span class="str">&quot;</span> Sys.argv.<span class="sym">(</span><span class="num">0</span><span class="sym">);</span> exit <span class="num">2</span><span class="sym">)</span> <span class="kwa">in</span>
  test n<span class="sym">;</span>
  <span class="kwa">if</span> n <span class="sym">&gt;=</span> <span class="num">1</span> <span class="kwa">then</span> <span class="kwd">test</span><span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">);</span>
  <span class="kwa">if</span> n <span class="sym">&gt;=</span> <span class="num">2</span> <span class="kwa">then</span> <span class="kwd">test</span><span class="sym">(</span>n<span class="sym">-</span><span class="num">2</span><span class="sym">)</span>
