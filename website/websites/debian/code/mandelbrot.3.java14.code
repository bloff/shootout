<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Stefan Krause</span>
<span class="com">*/</span>

<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.</span><span class="kwc">BufferedOutputStream</span><span class="sym">;</span>
<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.</span><span class="kwc">IOException</span><span class="sym">;</span>

<span class="kwa">class</span> mandelbrot <span class="sym">{</span>

   <span class="kwa">final static</span> <span class="kwb">double</span> limitSquared <span class="sym">=</span> <span class="num">4.0</span><span class="sym">;</span>
   <span class="kwa">final static</span> <span class="kwb">int</span> iterations <span class="sym">=</span> <span class="num">50</span><span class="sym">;</span>

   <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">)</span> <span class="kwa">throws</span> <span class="kwc">Exception</span> <span class="sym">{</span>
      <span class="kwb">int</span> size <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span><span class="kwd">parseInt</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>
      Mandelbrot m <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Mandelbrot</span><span class="sym">(</span>size<span class="sym">);</span>
      m<span class="sym">.</span><span class="kwd">compute</span><span class="sym">();</span>
   <span class="sym">}</span>

   <span class="kwa">public static class</span> Mandelbrot <span class="sym">{</span>
      <span class="kwa">public</span> <span class="kwd">Mandelbrot</span><span class="sym">(</span><span class="kwb">int</span> size<span class="sym">)</span>
      <span class="sym">{</span>
         <span class="kwa">this</span><span class="sym">.</span>size <span class="sym">=</span> size<span class="sym">;</span>
         fac <span class="sym">=</span> <span class="num">2.0</span> <span class="sym">/</span> size<span class="sym">;</span>
         out <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">BufferedOutputStream</span><span class="sym">(</span><span class="kwc">System</span><span class="sym">.</span>out<span class="sym">);</span>

         <span class="kwb">int</span> offset <span class="sym">=</span> size <span class="sym">%</span> <span class="num">8</span><span class="sym">;</span>
         shift <span class="sym">=</span> offset <span class="sym">==</span> <span class="num">0</span> ? <span class="num">0</span> <span class="sym">: (</span><span class="num">8</span><span class="sym">-</span>offset<span class="sym">);</span>
      <span class="sym">}</span>
      <span class="kwa">final</span> <span class="kwb">int</span> size<span class="sym">;</span>
      <span class="kwa">final</span> <span class="kwc">BufferedOutputStream</span> out<span class="sym">;</span>
      <span class="kwa">final</span> <span class="kwb">double</span> fac<span class="sym">;</span>
      <span class="kwa">final</span> <span class="kwb">int</span> shift<span class="sym">;</span>

      <span class="kwa">public</span> <span class="kwb">void</span> <span class="kwd">compute</span><span class="sym">()</span> <span class="kwa">throws</span> <span class="kwc">IOException</span>
      <span class="sym">{</span>
         <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">print</span><span class="sym">(</span><span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span> <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">print</span><span class="sym">(</span>size<span class="sym">);</span>
         <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">print</span><span class="sym">(</span><span class="str">&quot; &quot;</span><span class="sym">);</span> <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">println</span><span class="sym">(</span>size<span class="sym">);</span>
         <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> y <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> y<span class="sym">&lt;</span>size<span class="sym">;</span> y<span class="sym">++)</span>
            <span class="kwd">computeRow</span><span class="sym">(</span>y<span class="sym">);</span>
         out<span class="sym">.</span><span class="kwd">close</span><span class="sym">();</span>
      <span class="sym">}</span>

      <span class="kwa">private</span> <span class="kwb">void</span> <span class="kwd">computeRow</span><span class="sym">(</span><span class="kwb">int</span> y<span class="sym">)</span> <span class="kwa">throws</span> <span class="kwc">IOException</span>
      <span class="sym">{</span>
         <span class="kwb">int</span> bits <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

         <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> x <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> x<span class="sym">&lt;</span>size<span class="sym">;</span>x<span class="sym">++) {</span>
            <span class="kwb">double</span> Zr <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
            <span class="kwb">double</span> Zi <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
            <span class="kwb">double</span> Cr <span class="sym">= (</span>x<span class="sym">*</span>fac <span class="sym">-</span> <span class="num">1.5</span><span class="sym">);</span>
            <span class="kwb">double</span> Ci <span class="sym">= (</span>y<span class="sym">*</span>fac <span class="sym">-</span> <span class="num">1.0</span><span class="sym">);</span>

            <span class="kwb">int</span> i <span class="sym">=</span> iterations<span class="sym">;</span>
            <span class="kwb">double</span> ZrN <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
            <span class="kwb">double</span> ZiN <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
            <span class="kwa">do</span> <span class="sym">{</span>
               Zi <span class="sym">=</span> <span class="num">2.0</span> <span class="sym">*</span> Zr <span class="sym">*</span> Zi <span class="sym">+</span> Ci<span class="sym">;</span>
               Zr <span class="sym">=</span> ZrN <span class="sym">-</span> ZiN <span class="sym">+</span> Cr<span class="sym">;</span>
               ZiN <span class="sym">=</span> Zi <span class="sym">*</span> Zi<span class="sym">;</span>
               ZrN <span class="sym">=</span> Zr <span class="sym">*</span> Zr<span class="sym">;</span>
            <span class="sym">}</span> <span class="kwa">while</span> <span class="sym">(!(</span>ZiN <span class="sym">+</span> ZrN <span class="sym">&gt;</span> limitSquared<span class="sym">) &amp;&amp; --</span>i <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">);</span>

            bits <span class="sym">=</span> bits <span class="sym">&lt;&lt;</span> <span class="num">1</span><span class="sym">;</span>
            <span class="kwa">if</span> <span class="sym">(</span>i <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> bits<span class="sym">++;</span>

            <span class="kwa">if</span> <span class="sym">(</span>x<span class="sym">%</span><span class="num">8</span> <span class="sym">==</span> <span class="num">7</span><span class="sym">) {</span>
               out<span class="sym">.</span><span class="kwd">write</span><span class="sym">((</span><span class="kwb">byte</span><span class="sym">)</span>bits<span class="sym">);</span>
               bits <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
            <span class="sym">}</span>
         <span class="sym">}</span>
         <span class="kwa">if</span> <span class="sym">(</span>shift<span class="sym">!=</span><span class="num">0</span><span class="sym">) {</span>
            bits <span class="sym">=</span> bits <span class="sym">&lt;&lt;</span> shift<span class="sym">;</span>
            out<span class="sym">.</span><span class="kwd">write</span><span class="sym">((</span><span class="kwb">byte</span><span class="sym">)</span>bits<span class="sym">);</span>
         <span class="sym">}</span>
      <span class="sym">}</span>
   <span class="sym">}</span>
<span class="sym">}</span>
