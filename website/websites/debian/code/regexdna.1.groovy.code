<span class="slc">// The Computer Language Benchmark Games</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>
<span class="slc">//</span>
<span class="slc">// contributed by James Durbin</span>
<span class="slc">// based very closely on Ruby version by jose fco. gonzalez</span>


def seq <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">StringBuffer</span><span class="sym">();</span>
seq <span class="sym">=</span> System<span class="sym">.</span>in<span class="sym">.</span><span class="kwd">readLines</span><span class="sym">().</span><span class="kwd">join</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)+</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>

initialLength <span class="sym">=</span> seq<span class="sym">.</span><span class="kwd">length</span><span class="sym">();</span>
seq <span class="sym">= (</span>seq <span class="sym">=~</span><span class="str">&quot;&gt;.*</span><span class="esc">\n</span><span class="str">|</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">).</span><span class="kwd">replaceAll</span><span class="sym">(</span><span class="str">&quot;&quot;</span><span class="sym">);</span>
codeLength <span class="sym">=</span> seq<span class="sym">.</span><span class="kwd">length</span><span class="sym">();</span>

<span class="sym">[</span>
   <span class="str">&quot;agggtaaa|tttaccct&quot;</span> <span class="sym">,</span>
   <span class="str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="sym">,</span>
   <span class="str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="sym">,</span>
   <span class="str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="sym">,</span>
   <span class="str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="sym">,</span>
   <span class="str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="sym">,</span>
   <span class="str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="sym">,</span>
   <span class="str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="sym">,</span>
   <span class="str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span>
<span class="sym">].</span>each<span class="sym">{</span>
   println <span class="str">&quot;$it &quot;</span><span class="sym">+(</span>seq <span class="sym">=~</span>it<span class="sym">).</span><span class="kwd">getCount</span><span class="sym">();</span>
<span class="sym">};</span>


<span class="sym">[</span>
   <span class="str">'B'</span><span class="sym">:</span><span class="str">'(c|g|t)'</span><span class="sym">,</span> <span class="str">'D'</span><span class="sym">:</span><span class="str">'(a|g|t)'</span><span class="sym">,</span> <span class="str">'H'</span><span class="sym">:</span><span class="str">'(a|c|t)'</span><span class="sym">,</span> <span class="str">'K'</span><span class="sym">:</span><span class="str">'(g|t)'</span><span class="sym">,</span>
   <span class="str">'M'</span><span class="sym">:</span><span class="str">'(a|c)'</span><span class="sym">,</span> <span class="str">'N'</span><span class="sym">:</span><span class="str">'(a|c|g|t)'</span><span class="sym">,</span> <span class="str">'R'</span><span class="sym">:</span><span class="str">'(a|g)'</span><span class="sym">,</span> <span class="str">'S'</span><span class="sym">:</span><span class="str">'(c|t)'</span><span class="sym">,</span>
   <span class="str">'V'</span><span class="sym">:</span><span class="str">'(a|c|g)'</span><span class="sym">,</span> <span class="str">'W'</span><span class="sym">:</span><span class="str">'(a|t)'</span><span class="sym">,</span> <span class="str">'Y'</span><span class="sym">:</span><span class="str">'(c|t)'</span>
<span class="sym">].</span>each <span class="sym">{</span> f<span class="sym">,</span>r <span class="sym">-&gt;</span>
   seq <span class="sym">= (</span>seq <span class="sym">=~</span> f<span class="sym">).</span><span class="kwd">replaceAll</span><span class="sym">(</span>r<span class="sym">);</span>
<span class="sym">}</span>

println <span class="str">&quot;&quot;</span><span class="sym">;</span>
println initialLength<span class="sym">;</span>
println codeLength<span class="sym">;</span>
println seq<span class="sym">.</span><span class="kwd">length</span><span class="sym">();</span>


