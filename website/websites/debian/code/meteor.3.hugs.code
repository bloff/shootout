<span class="com">{-# OPTIONS -O3 -fglasgow-exts #-}</span>

<span class="com">{-</span>
<span class="com">	The Computer Language Shootout</span>
<span class="com">   	http://shootout.alioth.debian.org/</span>
<span class="com">   	contributed by Olof Kraigher</span>
<span class="com">-}</span>

<span class="kwa">module</span> Main <span class="kwa">where</span>

<span class="kwa">import</span> System<span class="sym">(</span>getArgs<span class="sym">);</span>		<span class="kwa">import</span> Data.List<span class="sym">;</span>	<span class="kwa">import</span> Data.Bits<span class="sym">;</span>		<span class="kwa">import</span> Data.Array.IArray<span class="sym">;</span>
<span class="kwa">import</span> Data.Word<span class="sym">(</span>Word64<span class="sym">);</span>	<span class="kwa">import</span> Data.Maybe<span class="sym">;</span>	<span class="kwa">import</span> Control.Monad<span class="sym">;</span>

<span class="kwa">data</span> Direction <span class="sym">=</span> E <span class="sym">|</span> SE <span class="sym">|</span> SW <span class="sym">|</span> W <span class="sym">|</span> NW <span class="sym">|</span> NE <span class="kwa">deriving</span> <span class="sym">(</span>Enum<span class="sym">,</span> Eq<span class="sym">,</span> Ord<span class="sym">)</span>
<span class="kwa">type</span> Piece <span class="sym">= [</span>Direction<span class="sym">]</span>
<span class="kwa">type</span> CellCoord <span class="sym">= (</span><span class="kwb">Int</span><span class="sym">,</span> <span class="kwb">Int</span><span class="sym">)</span>
<span class="kwa">type</span> CellIndex <span class="sym">=</span> <span class="kwb">Int</span>
<span class="kwa">type</span> Mask <span class="sym">=</span> Word64
<span class="kwa">type</span> Color <span class="sym">=</span> <span class="kwb">Int</span>
<span class="kwa">type</span> Solution <span class="sym">=</span> String

<span class="kwa">class</span> Rotatable a <span class="kwa">where</span> rot <span class="sym">::</span> a <span class="sym">-&gt;</span> a
<span class="kwa">class</span> Floppable a <span class="kwa">where</span> flop <span class="sym">::</span> a <span class="sym">-&gt;</span> a
<span class="kwa">class</span> Maskable a <span class="kwa">where</span> mask <span class="sym">::</span> a <span class="sym">-&gt;</span> Mask

<span class="kwa">instance</span> Rotatable Direction	<span class="kwa">where</span> rot d <span class="sym">=</span> toEnum $ mod <span class="sym">((</span>fromEnum d<span class="sym">) +</span> <span class="num">1</span><span class="sym">)</span> <span class="num">6</span>
<span class="kwa">instance</span> Rotatable Piece 		<span class="kwa">where</span> rot a <span class="sym">=</span> map rot a

<span class="kwa">instance</span> Floppable Direction 	<span class="kwa">where</span> flop d <span class="sym">=</span> toEnum $ mod <span class="sym">(</span><span class="num">9</span> <span class="sym">- (</span>fromEnum d<span class="sym">))</span> <span class="num">6</span>
<span class="kwa">instance</span> Floppable Piece 		<span class="kwa">where</span> flop a <span class="sym">=</span> map flop a

<span class="kwa">instance</span> Maskable CellCoord 	<span class="kwa">where</span> mask <span class="sym">(</span>x<span class="sym">,</span>y<span class="sym">) =</span> bit <span class="sym">(</span>x <span class="sym">+</span> y<span class="sym">*</span>width<span class="sym">)</span>
<span class="kwa">instance</span> Maskable <span class="sym">[</span>CellCoord<span class="sym">]</span>	<span class="kwa">where</span> mask p <span class="sym">=</span> foldl' <span class="sym">(</span>\a b <span class="sym">-&gt;</span> a .<span class="sym">|</span>. mask b<span class="sym">)</span> <span class="num">0</span> p
<span class="kwa">instance</span> Maskable CellIndex 	<span class="kwa">where</span> mask i <span class="sym">=</span> bit i


width <span class="sym">::</span> <span class="kwb">Int</span>
width <span class="sym">=</span> <span class="num">5</span>

height <span class="sym">::</span> <span class="kwb">Int</span>
height <span class="sym">=</span> <span class="num">10</span>

cellcs <span class="sym">:: [</span>CellCoord<span class="sym">]</span>
cellcs <span class="sym">= [(</span>x<span class="sym">,</span>y<span class="sym">) |</span> y <span class="sym">&lt;- [</span><span class="num">0</span>..height<span class="sym">-</span><span class="num">1</span><span class="sym">],</span> x <span class="sym">&lt;- [</span><span class="num">0</span>..width<span class="sym">-</span><span class="num">1</span><span class="sym">]]</span>

cellis <span class="sym">:: [</span>CellIndex<span class="sym">]</span>
cellis <span class="sym">= [</span><span class="num">0</span>..width<span class="sym">*</span>height<span class="sym">-</span><span class="num">1</span><span class="sym">]</span>

fullMask <span class="sym">::</span> Mask
fullMask <span class="sym">=</span> <span class="num">0x3FFFFFFFFFFFF</span>

pieces <span class="sym">::</span> Array Color Piece
pieces <span class="sym">=</span> array <span class="sym">(</span><span class="num">0</span><span class="sym">,</span><span class="num">9</span><span class="sym">)</span> $ zip <span class="sym">[</span><span class="num">0</span>.<span class="num">.9</span><span class="sym">]</span> $
		<span class="sym">[	[</span>E<span class="sym">,</span>	 E<span class="sym">,</span>  E<span class="sym">,</span>  SE<span class="sym">],</span>
			<span class="sym">[</span>SE<span class="sym">,</span> SW<span class="sym">,</span> W<span class="sym">,</span>  SW<span class="sym">],</span>
			<span class="sym">[</span>W<span class="sym">,</span>  W<span class="sym">,</span>  SW<span class="sym">,</span> SE<span class="sym">],</span>
			<span class="sym">[</span>E<span class="sym">,</span>  E<span class="sym">,</span>  SW<span class="sym">,</span> SE<span class="sym">],</span>
			<span class="sym">[</span>NW<span class="sym">,</span> W<span class="sym">,</span>  NW<span class="sym">,</span> SE<span class="sym">,</span> SW<span class="sym">],</span>
			<span class="sym">[</span>E<span class="sym">,</span>  E<span class="sym">,</span>  NE<span class="sym">,</span> W<span class="sym">],</span>
			<span class="sym">[</span>NW<span class="sym">,</span> NE<span class="sym">,</span> NE<span class="sym">,</span> W<span class="sym">],</span>
			<span class="sym">[</span>NE<span class="sym">,</span> SE<span class="sym">,</span> E<span class="sym">,</span>  NE<span class="sym">],</span>
			<span class="sym">[</span>SE<span class="sym">,</span> SE<span class="sym">,</span> E<span class="sym">,</span>  SE<span class="sym">],</span>
			<span class="sym">[</span>E<span class="sym">,</span>  NW<span class="sym">,</span> NW<span class="sym">,</span> NW<span class="sym">]]</span>

valid <span class="sym">::</span> CellCoord <span class="sym">-&gt;</span> Maybe CellCoord
valid p<span class="sym">&#64;(</span>x<span class="sym">,</span>y<span class="sym">)</span>
	<span class="sym">|</span> <span class="num">0</span> <span class="sym">&lt;=</span> x<span class="sym">,</span> x <span class="sym">&lt;</span> width<span class="sym">,</span> <span class="num">0</span> <span class="sym">&lt;=</span> y<span class="sym">,</span> y <span class="sym">&lt;</span> height <span class="sym">=</span> Just p
	<span class="sym">|</span>otherwise <span class="sym">=</span> Nothing

move <span class="sym">::</span> CellCoord <span class="sym">-&gt;</span> Direction <span class="sym">-&gt;</span> Maybe CellCoord
move <span class="sym">(</span>x<span class="sym">,</span>y<span class="sym">)</span> E <span class="sym">=</span> valid <span class="sym">(</span>x<span class="sym">+</span><span class="num">1</span><span class="sym">,</span>y<span class="sym">)</span>
move <span class="sym">(</span>x<span class="sym">,</span>y<span class="sym">)</span> W <span class="sym">=</span> valid <span class="sym">(</span>x<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>y<span class="sym">)</span>
move <span class="sym">(</span>x<span class="sym">,</span>y<span class="sym">)</span> NE <span class="sym">=</span> valid <span class="sym">(</span>x<span class="sym">+(</span>mod y <span class="num">2</span><span class="sym">),</span>y<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
move <span class="sym">(</span>x<span class="sym">,</span>y<span class="sym">)</span> NW <span class="sym">=</span> valid <span class="sym">(</span>x<span class="sym">+(</span>mod y <span class="num">2</span><span class="sym">)-</span><span class="num">1</span><span class="sym">,</span>y<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
move <span class="sym">(</span>x<span class="sym">,</span>y<span class="sym">)</span> SE <span class="sym">=</span> valid <span class="sym">(</span>x<span class="sym">+(</span>mod y <span class="num">2</span><span class="sym">),</span>y<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>
move <span class="sym">(</span>x<span class="sym">,</span>y<span class="sym">)</span> SW <span class="sym">=</span> valid <span class="sym">(</span>x<span class="sym">+(</span>mod y <span class="num">2</span><span class="sym">)-</span><span class="num">1</span><span class="sym">,</span>y<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>


overlap <span class="sym">::</span> Mask <span class="sym">-&gt;</span> Mask <span class="sym">-&gt;</span> <span class="kwb">Bool</span>
overlap a b <span class="sym">= (</span>a .<span class="sym">&amp;</span>. b<span class="sym">) /=</span> <span class="num">0</span>

legal <span class="sym">::</span> Mask <span class="sym">-&gt;</span> Mask <span class="sym">-&gt;</span> <span class="kwb">Bool</span>
legal a b <span class="sym">=</span> not $ overlap a b

bc <span class="sym">::</span> Mask <span class="sym">-&gt;</span> <span class="kwb">Int</span>
bc <span class="num">0</span> <span class="sym">=</span> <span class="num">0</span>
bc mask <span class="sym">= (</span>fromIntegral $ <span class="sym">(</span>mask .<span class="sym">&amp;</span>. <span class="num">1</span><span class="sym">)) + (</span>bc <span class="sym">(</span>shiftR mask <span class="num">1</span><span class="sym">))</span>

fill <span class="sym">::</span> Mask <span class="sym">-&gt;</span> CellCoord <span class="sym">-&gt;</span> Mask
fill mask cell<span class="sym">&#64;(</span>x<span class="sym">,</span>y<span class="sym">)</span>
	<span class="sym">|</span> overlap mask <span class="sym">(</span>bit $ x <span class="sym">+</span> y<span class="sym">*</span>width<span class="sym">) =</span> mask
	<span class="sym">|</span> otherwise <span class="sym">=</span>
		<span class="kwa">let</span> mask' <span class="sym">=</span> mask .<span class="sym">|</span>. <span class="sym">(</span>bit $ x <span class="sym">+</span> y<span class="sym">*</span>width<span class="sym">)</span>
		<span class="kwa">in</span>	foldl' fill mask' $ mapMaybe <span class="sym">(</span>move cell<span class="sym">) [</span>E .. NE<span class="sym">]</span>

freeCell <span class="sym">::</span> Mask <span class="sym">-&gt;</span> CellCoord
freeCell mask <span class="sym">=</span>
	fromJust $ find <span class="sym">(</span>\<span class="sym">(</span>x<span class="sym">,</span>y<span class="sym">) -&gt;</span> legal mask <span class="sym">(</span>bit $ x <span class="sym">+</span> y<span class="sym">*</span>width<span class="sym">))</span> cellcs

noIslands <span class="sym">::</span> Mask <span class="sym">-&gt;</span> <span class="kwb">Bool</span>
noIslands mask <span class="sym">=</span> not $ any <span class="sym">(&lt;</span><span class="num">5</span><span class="sym">)</span> $ diffs $ noIslands' mask <span class="kwa">where</span>
	noIslands' mask
		<span class="sym">|</span> mask <span class="sym">==</span> fullMask <span class="sym">= [</span>bc mask<span class="sym">]</span>
		<span class="sym">|</span> otherwise <span class="sym">= (</span>bc mask<span class="sym">) : (</span>noIslands' $ fill mask $ freeCell mask<span class="sym">)</span>
	diffs l <span class="sym">=</span> zipWith <span class="sym">(-) (</span>tail l<span class="sym">)</span> l


placePiece <span class="sym">::</span> Piece <span class="sym">-&gt;</span> CellCoord <span class="sym">-&gt;</span> Maybe <span class="sym">[</span>CellCoord<span class="sym">]</span>
placePiece <span class="sym">[]</span> cell <span class="sym">=</span> Just <span class="sym">[</span>cell<span class="sym">]</span>
placePiece <span class="sym">(</span>p<span class="sym">:</span>ps<span class="sym">)</span> cell <span class="sym">=</span> move cell p <span class="sym">&gt;&gt;= (</span>placePiece ps<span class="sym">) &gt;&gt;=</span> return . <span class="sym">(</span>cell<span class="sym">:)</span>

pieceMasks <span class="sym">::</span> Array Color <span class="sym">[</span>Mask<span class="sym">]</span>
pieceMasks <span class="sym">=</span> amap pieceMasks' pieces <span class="kwa">where</span>
	pieceMasks' piece
		<span class="sym">|</span> piece <span class="sym">== (</span>pieces<span class="sym">!</span><span class="num">5</span><span class="sym">) =</span> <span class="kwa">do</span>
			piece' <span class="sym">&lt;- (</span>take <span class="num">3</span> $ iterate rot piece<span class="sym">) ++ (</span>take <span class="num">3</span> $ iterate rot $ flop $ piece<span class="sym">)</span>
			filter noIslands $ map mask $ mapMaybe <span class="sym">(</span>placePiece piece'<span class="sym">)</span> cellcs

		<span class="sym">|</span> otherwise <span class="sym">=</span> <span class="kwa">do</span>
			piece' <span class="sym">&lt;- (</span>take <span class="num">6</span> $ iterate rot piece<span class="sym">) ++ (</span>take <span class="num">6</span> $ iterate rot $ flop $ piece<span class="sym">)</span>
			filter noIslands $ map mask $ mapMaybe <span class="sym">(</span>placePiece piece'<span class="sym">)</span> cellcs

pieceMasksAtCell <span class="sym">::</span> Array Color <span class="sym">(</span>Array CellIndex <span class="sym">[</span>Mask<span class="sym">])</span>
pieceMasksAtCell <span class="sym">=</span> amap pieceMasksAtCell' pieceMasks <span class="kwa">where</span>
	pieceMasksAtCell' masks <span class="sym">=</span> array <span class="sym">(</span><span class="num">0</span><span class="sym">,</span>width<span class="sym">*</span>height<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> $ pieceMasksAtCell'' masks cellis <span class="kwa">where</span>
		pieceMasksAtCell'' masks <span class="sym">[] = []</span>
		pieceMasksAtCell'' masks <span class="sym">(</span>c<span class="sym">:</span>cs<span class="sym">) =</span>
			<span class="kwa">let</span> <span class="sym">(</span>a<span class="sym">,</span>b<span class="sym">) =</span> partition <span class="sym">(</span>overlap <span class="sym">(</span>mask c<span class="sym">))</span> masks
			<span class="kwa">in</span> <span class="sym">(</span>c<span class="sym">,</span>a<span class="sym">) : (</span>pieceMasksAtCell'' b cs<span class="sym">)</span>

format <span class="sym">::</span> Color <span class="sym">-&gt;</span> Mask <span class="sym">-&gt;</span> Integer
format c m <span class="sym">=  (</span>fromIntegral c<span class="sym">) * (</span>binToDec m<span class="sym">)</span> <span class="kwa">where</span>
	binToDec <span class="sym">::</span> Mask <span class="sym">-&gt;</span> Integer
	binToDec <span class="num">0</span> <span class="sym">=</span> <span class="num">0</span>
	binToDec n <span class="sym">= (</span>fromIntegral <span class="sym">(</span>mod n <span class="num">2</span><span class="sym">)) +</span> <span class="num">10</span><span class="sym">*(</span>binToDec $ div n <span class="num">2</span><span class="sym">)</span>

ps <span class="sym">::</span> Solution <span class="sym">-&gt;</span> IO <span class="sym">()</span>
ps solution <span class="sym">=</span> pe $ map <span class="sym">(</span>concatMap <span class="sym">(</span>\a <span class="sym">-&gt; [</span>a<span class="sym">,</span>' '<span class="sym">]))</span> $
					take height $ map <span class="sym">(</span>take <span class="num">5</span><span class="sym">)</span> $ iterate <span class="sym">(</span>drop width<span class="sym">)</span> solution <span class="kwa">where</span>
	po <span class="sym">[] =</span> return <span class="sym">()</span>
	po <span class="sym">(</span>s<span class="sym">:</span>ss<span class="sym">) =</span> <span class="kwa">do</span>
		putStrLn $ ' '<span class="sym">:</span>s
		pe ss

	pe <span class="sym">[] =</span> return <span class="sym">()</span>
	pe <span class="sym">(</span>s<span class="sym">:</span>ss<span class="sym">) =</span> <span class="kwa">do</span>
		putStrLn s
		po ss

solutions <span class="sym">:: [</span>Solution<span class="sym">]</span>
solutions <span class="sym">=</span> solutions' <span class="num">0 0</span> <span class="sym">[</span><span class="num">0</span>.<span class="num">.9</span><span class="sym">] (</span><span class="num">10</span>^<span class="sym">(</span>width<span class="sym">*</span>height<span class="sym">))</span> <span class="kwa">where</span>

	solutions' <span class="sym">::</span> Mask <span class="sym">-&gt;</span> CellIndex <span class="sym">-&gt; [</span>Color<span class="sym">] -&gt;</span> Integer<span class="sym">-&gt; [</span>Solution<span class="sym">]</span>
	solutions' _ _ <span class="sym">[]</span> i <span class="sym">=</span> 	<span class="kwa">let</span> s <span class="sym">=</span> tail.show $ i <span class="kwa">in</span> <span class="sym">[</span>s<span class="sym">,</span> reverse s<span class="sym">]</span>
	solutions' board cell colorsLeft i
		<span class="sym">|</span> overlap board <span class="sym">(</span>mask cell<span class="sym">) =</span> solutions' board <span class="sym">(</span>cell<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> colorsLeft i
		<span class="sym">|</span> otherwise <span class="sym">=</span> <span class="kwa">do</span>
			color <span class="sym">&lt;-</span> colorsLeft
			mask <span class="sym">&lt;-</span> filter <span class="sym">(</span>legal board<span class="sym">)</span> $ pieceMasksAtCell<span class="sym">!</span>color<span class="sym">!</span>cell
			solutions' <span class="sym">(</span>board .<span class="sym">|</span>. mask<span class="sym">) (</span>cell<span class="sym">+</span><span class="num">1</span><span class="sym">) (</span>delete color colorsLeft<span class="sym">) (</span>i <span class="sym">+ (</span>format color mask<span class="sym">))</span>


main <span class="sym">=</span> <span class="kwa">do</span>
	<span class="sym">(</span>n <span class="sym">::</span> <span class="kwb">Int</span><span class="sym">) &lt;-</span> return.read.head <span class="sym">=&lt;&lt;</span> getArgs
	<span class="kwa">let</span> nsolutions <span class="sym">=</span> take n solutions
	putStrLn $ <span class="sym">(</span>show $ length nsolutions<span class="sym">) ++</span> <span class="str">&quot; solutions found\n&quot;</span>
	ps $ minimum nsolutions
	putStr <span class="str">&quot;\n&quot;</span>
	ps $ maximum nsolutions
	putStr <span class="str">&quot;\n&quot;</span>
