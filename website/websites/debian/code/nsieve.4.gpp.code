<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Jeffrey Beu</span>
<span class="com">*/</span>

<span class="dir">#include &lt;vector&gt;</span>
<span class="dir">#include &lt;cstdlib&gt;</span>
<span class="dir">#include &lt;iomanip&gt;</span>
<span class="dir">#include &lt;iostream&gt;</span>

<span class="kwa">using namespace</span> std<span class="sym">;</span>

<span class="kwb">unsigned int</span> <span class="kwd">nsieve</span><span class="sym">(</span><span class="kwb">unsigned int</span> m<span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwc">typedef</span> vector<span class="sym">&lt;</span><span class="kwb">unsigned char</span><span class="sym">&gt;</span> vc<span class="sym">;</span>

   <span class="kwb">unsigned int</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

   vc <span class="kwd">bflags</span><span class="sym">(</span>m<span class="sym">,</span><span class="num">1</span><span class="sym">);</span>

   vc<span class="sym">::</span>const_iterator end   <span class="sym">=</span> bflags<span class="sym">.</span><span class="kwd">end</span><span class="sym">();</span>
   vc<span class="sym">::</span>const_iterator begin <span class="sym">=</span> bflags<span class="sym">.</span><span class="kwd">begin</span><span class="sym">();</span>

   <span class="kwa">for</span><span class="sym">(</span>vc<span class="sym">::</span>iterator i <span class="sym">=</span> bflags<span class="sym">.</span><span class="kwd">begin</span><span class="sym">() +</span> <span class="num">2</span><span class="sym">;</span> i <span class="sym">&lt;</span> end<span class="sym">; ++</span>i<span class="sym">)</span>
   <span class="sym">{</span>
      <span class="kwa">if</span><span class="sym">(*</span>i<span class="sym">) {</span>
         <span class="kwb">int</span> off_set <span class="sym">= (</span><span class="kwb">int</span><span class="sym">)(</span>i <span class="sym">-</span> begin<span class="sym">);</span>

         <span class="kwa">for</span><span class="sym">(</span>vc<span class="sym">::</span>iterator j <span class="sym">=</span> i <span class="sym">+</span> off_set<span class="sym">;</span> j <span class="sym">&lt;</span> end<span class="sym">;</span> j <span class="sym">+=</span> off_set<span class="sym">)</span>
         <span class="sym">{</span>
            <span class="sym">*</span>j <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
         <span class="sym">}</span>
         <span class="sym">++</span>count<span class="sym">;</span>
      <span class="sym">}</span>
   <span class="sym">}</span>

   <span class="kwa">return</span> count<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span><span class="sym">*</span> argv<span class="sym">[])</span>
<span class="sym">{</span>
   <span class="kwb">unsigned int</span> m <span class="sym">=</span> <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span>

   <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> <span class="num">3</span><span class="sym">;</span> i<span class="sym">++) {</span>
      <span class="kwb">unsigned int</span> arg_m <span class="sym">=</span> <span class="num">10000</span> <span class="sym">&lt;&lt; (</span>m<span class="sym">-</span>i<span class="sym">);</span>
      <span class="kwb">unsigned int</span> rslt <span class="sym">=</span> <span class="kwd">nsieve</span><span class="sym">(</span>arg_m<span class="sym">);</span>
      cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;Primes up to&quot;</span>
           <span class="sym">&lt;&lt;</span> <span class="kwd">setw</span><span class="sym">(</span><span class="num">9</span><span class="sym">) &lt;&lt;</span> arg_m
           <span class="sym">&lt;&lt;</span> <span class="kwd">setw</span><span class="sym">(</span><span class="num">9</span><span class="sym">) &lt;&lt;</span> rslt  <span class="sym">&lt;&lt;</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;</span>
   <span class="sym">}</span>

   <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

