<span class="slc"># The Computer Language Benchmarks Game</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc"># modified by Ian Osgood</span>
<span class="slc"># modified again by Heinrich Acker</span>

<span class="kwa">import</span> sys<span class="sym">,</span> bisect

alu <span class="sym">= (</span>
   <span class="str">'GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG'</span>
   <span class="str">'GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA'</span>
   <span class="str">'CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT'</span>
   <span class="str">'ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA'</span>
   <span class="str">'GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG'</span>
   <span class="str">'AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC'</span>
   <span class="str">'AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA'</span><span class="sym">)</span>

iub <span class="sym">=</span> <span class="kwb">zip</span><span class="sym">(</span><span class="str">'acgtBDHKMNRSVWY'</span><span class="sym">, [</span><span class="num">0.27</span><span class="sym">,</span> <span class="num">0.12</span><span class="sym">,</span> <span class="num">0.12</span><span class="sym">,</span> <span class="num">0.27</span><span class="sym">] + [</span><span class="num">0.02</span><span class="sym">]*</span><span class="num">11</span><span class="sym">)</span>

homosapiens <span class="sym">= [</span>
    <span class="sym">(</span><span class="str">'a'</span><span class="sym">,</span> <span class="num">0.3029549426680</span><span class="sym">),</span>
    <span class="sym">(</span><span class="str">'c'</span><span class="sym">,</span> <span class="num">0.1979883004921</span><span class="sym">),</span>
    <span class="sym">(</span><span class="str">'g'</span><span class="sym">,</span> <span class="num">0.1975473066391</span><span class="sym">),</span>
    <span class="sym">(</span><span class="str">'t'</span><span class="sym">,</span> <span class="num">0.3015094502008</span><span class="sym">),</span>
<span class="sym">]</span>


<span class="kwa">def</span> <span class="kwd">genRandom</span><span class="sym">(</span>lim<span class="sym">,</span> ia <span class="sym">=</span> <span class="num">3877</span><span class="sym">,</span> ic <span class="sym">=</span> <span class="num">29573</span><span class="sym">,</span> im <span class="sym">=</span> <span class="num">139968</span><span class="sym">):</span>
    seed <span class="sym">=</span> <span class="num">42</span>
    imf <span class="sym">=</span> <span class="kwb">float</span><span class="sym">(</span>im<span class="sym">)</span>
    <span class="kwa">while</span> <span class="num">1</span><span class="sym">:</span>
        seed <span class="sym">= (</span>seed <span class="sym">*</span> ia <span class="sym">+</span> ic<span class="sym">) %</span> im
        <span class="kwa">yield</span> lim <span class="sym">*</span> seed <span class="sym">/</span> imf

Random <span class="sym">=</span> <span class="kwd">genRandom</span><span class="sym">(</span><span class="num">1</span><span class="sym">.)</span>

<span class="kwa">def</span> <span class="kwd">makeCumulative</span><span class="sym">(</span>table<span class="sym">):</span>
    P <span class="sym">= []</span>
    C <span class="sym">= []</span>
    prob <span class="sym">=</span> <span class="num">0</span><span class="sym">.</span>
    <span class="kwa">for</span> char<span class="sym">,</span> p <span class="kwa">in</span> table<span class="sym">:</span>
        prob <span class="sym">+=</span> p
        P <span class="sym">+= [</span>prob<span class="sym">]</span>
        C <span class="sym">+= [</span>char<span class="sym">]</span>
    <span class="kwa">return</span> <span class="sym">(</span>P<span class="sym">,</span> C<span class="sym">)</span>

<span class="kwa">def</span> <span class="kwd">repeatFasta</span><span class="sym">(</span>src<span class="sym">,</span> n<span class="sym">):</span>
    width <span class="sym">=</span> <span class="num">60</span>
    r <span class="sym">=</span> <span class="kwb">len</span><span class="sym">(</span>src<span class="sym">)</span>
    s <span class="sym">=</span> src <span class="sym">+</span> src <span class="sym">+</span> src<span class="sym">[:</span>n <span class="sym">%</span> r<span class="sym">]</span>
    <span class="kwa">for</span> j <span class="kwa">in</span> <span class="kwb">xrange</span><span class="sym">(</span>n <span class="sym">//</span> width<span class="sym">):</span>
        i <span class="sym">=</span> j<span class="sym">*</span>width <span class="sym">%</span> r
        <span class="kwa">print</span> s<span class="sym">[</span>i<span class="sym">:</span>i<span class="sym">+</span>width<span class="sym">]</span>
    <span class="kwa">if</span> n <span class="sym">%</span> width<span class="sym">:</span>
        <span class="kwa">print</span> s<span class="sym">[-(</span>n <span class="sym">%</span> width<span class="sym">):]</span>

<span class="kwa">def</span> <span class="kwd">randomFasta</span><span class="sym">(</span>table<span class="sym">,</span> n<span class="sym">):</span>
    width <span class="sym">=</span> <span class="num">60</span>
    r <span class="sym">=</span> <span class="kwb">xrange</span><span class="sym">(</span>width<span class="sym">)</span>
    gR <span class="sym">=</span> Random<span class="sym">.</span>next
    bb <span class="sym">=</span> bisect<span class="sym">.</span>bisect
    jn <span class="sym">=</span> <span class="str">''</span><span class="sym">.</span>join
    probs<span class="sym">,</span> chars <span class="sym">=</span> <span class="kwd">makeCumulative</span><span class="sym">(</span>table<span class="sym">)</span>
    <span class="kwa">for</span> j <span class="kwa">in</span> <span class="kwb">xrange</span><span class="sym">(</span>n <span class="sym">//</span> width<span class="sym">):</span>
        <span class="kwa">print</span> <span class="kwd">jn</span><span class="sym">([</span>chars<span class="sym">[</span><span class="kwd">bb</span><span class="sym">(</span>probs<span class="sym">,</span> <span class="kwd">gR</span><span class="sym">())]</span> <span class="kwa">for</span> i <span class="kwa">in</span> r<span class="sym">])</span>
    <span class="kwa">if</span> n <span class="sym">%</span> width<span class="sym">:</span>
        <span class="kwa">print</span> <span class="kwd">jn</span><span class="sym">([</span>chars<span class="sym">[</span><span class="kwd">bb</span><span class="sym">(</span>probs<span class="sym">,</span> <span class="kwd">gR</span><span class="sym">())]</span> <span class="kwa">for</span> i <span class="kwa">in</span> <span class="kwb">xrange</span><span class="sym">(</span>n <span class="sym">%</span> width<span class="sym">)])</span>


n <span class="sym">=</span> <span class="kwb">int</span><span class="sym">(</span>sys<span class="sym">.</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">])</span>

<span class="kwa">print</span> <span class="str">'&gt;ONE Homo sapiens alu'</span>
<span class="kwd">repeatFasta</span><span class="sym">(</span>alu<span class="sym">,</span> n<span class="sym">*</span><span class="num">2</span><span class="sym">)</span>

<span class="kwa">print</span> <span class="str">'&gt;TWO IUB ambiguity codes'</span>
<span class="kwd">randomFasta</span><span class="sym">(</span>iub<span class="sym">,</span> n<span class="sym">*</span><span class="num">3</span><span class="sym">)</span>

<span class="kwa">print</span> <span class="str">'&gt;THREE Homo sapiens frequency'</span>
<span class="kwd">randomFasta</span><span class="sym">(</span>homosapiens<span class="sym">,</span> n<span class="sym">*</span><span class="num">5</span><span class="sym">)</span>
