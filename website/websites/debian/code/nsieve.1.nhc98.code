<span class="com">{-# OPTIONS -O2 -fasm -fbang-patterns #-}</span>
<span class="slc">--</span>
<span class="slc">-- The Computer Language Benchmarks Game</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">-- Contributed by Don Stewart.</span>
<span class="slc">-- Uses Word8 values to represent Bools, avoiding a bit-packing Array Bool</span>
<span class="slc">--</span>

<span class="kwa">import</span> System
<span class="kwa">import</span> Foreign
<span class="kwa">import</span> Data.ByteString.Unsafe
<span class="kwa">import</span> Data.ByteString.Internal
<span class="kwa">import</span> Text.Printf

main <span class="sym">=</span> <span class="kwa">do</span>
    n <span class="sym">&lt;-</span> getArgs <span class="sym">&gt;&gt;=</span> readIO . head
    mapM_ <span class="sym">(</span>\i <span class="sym">-&gt;</span> sieve <span class="sym">(</span><span class="num">10000</span> `shiftL` <span class="sym">(</span>n<span class="sym">-</span>i<span class="sym">))) [</span><span class="num">0</span><span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> <span class="num">2</span><span class="sym">]</span>

sieve n <span class="sym">=</span> <span class="kwa">do</span>
    a <span class="sym">&lt;-</span> create n $ \p <span class="sym">-&gt;</span> memset p <span class="num">0</span> <span class="sym">(</span>fromIntegral n<span class="sym">) &gt;&gt;</span> return <span class="sym">()</span>
    r <span class="sym">&lt;-</span> go n a <span class="num">0 2</span>
    printf <span class="str">&quot;Primes up to %8d %8d\n&quot;</span> <span class="sym">(</span>n<span class="sym">::</span><span class="kwb">Int</span><span class="sym">) (</span>r<span class="sym">::</span><span class="kwb">Int</span><span class="sym">)</span>

go m <span class="sym">!</span>a <span class="sym">!</span>c <span class="sym">!</span>n
    <span class="sym">|</span> n <span class="sym">==</span> m    <span class="sym">=</span> return c
    <span class="sym">|</span> true a n  <span class="sym">=</span> go m a c <span class="sym">(</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>
    <span class="sym">|</span> otherwise <span class="sym">=</span> set <span class="sym">(</span>n<span class="sym">+</span>n<span class="sym">)</span>
  <span class="kwa">where</span>
    set <span class="sym">!</span>j <span class="sym">|</span> j <span class="sym">&lt;=</span> m    <span class="sym">=</span> false a j <span class="sym">&gt;&gt;</span> set <span class="sym">(</span>j<span class="sym">+</span>n<span class="sym">)</span>
           <span class="sym">|</span> otherwise <span class="sym">=</span> go m a <span class="sym">(</span>c<span class="sym">+</span><span class="num">1</span><span class="sym">) (</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>

true  <span class="sym">!</span>a <span class="sym">!</span>n          <span class="sym">=</span> unsafeIndex a n <span class="sym">==</span> <span class="num">1</span>
false <span class="sym">(</span>PS fp _ _<span class="sym">) !</span>n <span class="sym">=</span> withForeignPtr fp $ \p <span class="sym">-&gt;</span> pokeByteOff p n <span class="sym">(</span><span class="num">1</span> <span class="sym">::</span> Word8<span class="sym">)</span>
