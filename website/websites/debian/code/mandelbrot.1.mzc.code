<span class="slc">;; ---------------------------------------------------------------------</span>
<span class="slc">;; The Great Computer Language Shootout</span>
<span class="slc">;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;</span>
<span class="slc">;; Derived from the Chicken variant, which was</span>
<span class="slc">;; Contributed by Anthony Borla</span>

<span class="sym">(</span>module mandelbrot mzscheme

  <span class="slc">;; -------------------------------</span>

  <span class="sym">(</span>define <span class="sym">+</span>limit<span class="sym">-</span>sqr<span class="sym">+</span> <span class="num">4.0</span><span class="sym">)</span>

  <span class="sym">(</span>define <span class="sym">+</span>iterations<span class="sym">+</span> <span class="num">50</span><span class="sym">)</span>

  <span class="slc">;; -------------------------------</span>

  <span class="sym">(</span>define <span class="sym">(</span>mandelbrot iterations x y n<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>cr <span class="sym">(- (/ (*</span> <span class="num">2.0</span> x<span class="sym">)</span> n<span class="sym">)</span> <span class="num">1.5</span><span class="sym">)) (</span>ci <span class="sym">(- (/ (*</span> <span class="num">2.0</span> y<span class="sym">)</span> n<span class="sym">)</span> <span class="num">1.0</span><span class="sym">)))</span>
    <span class="sym">(</span>let loop <span class="sym">((</span>i <span class="num">0</span><span class="sym">) (</span>zr <span class="num">0.0</span><span class="sym">) (</span>zi <span class="num">0.0</span><span class="sym">))</span>
      <span class="sym">(</span>let <span class="sym">((</span>zrq <span class="sym">(*</span> zr zr<span class="sym">)) (</span>ziq <span class="sym">(*</span> zi zi<span class="sym">)))</span>
        <span class="sym">(</span><span class="kwa">cond</span>
          <span class="sym">((&gt;</span> i iterations<span class="sym">)</span> <span class="num">1</span><span class="sym">)</span>
          <span class="sym">((&gt; (+</span> zrq ziq<span class="sym">) +</span>limit<span class="sym">-</span>sqr<span class="sym">+)</span> <span class="num">0</span><span class="sym">)</span>
          <span class="sym">(</span>else <span class="sym">(</span>loop <span class="sym">(</span>add1 i<span class="sym">) (+ (-</span> zrq ziq<span class="sym">)</span> cr<span class="sym">) (+ (*</span> <span class="num">2.0</span> zr zi<span class="sym">)</span> ci<span class="sym">)))) ))))</span>

  <span class="slc">;; -------------------------------</span>

  <span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
    <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span>vector<span class="sym">-</span>ref args <span class="num">0</span><span class="sym">)))</span>
	  <span class="sym">(</span>bitnum <span class="num">0</span><span class="sym">)</span>
	  <span class="sym">(</span>byteacc <span class="num">0</span><span class="sym">))</span>

      <span class="sym">(</span>printf <span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">~a ~a</span><span class="esc">\n</span><span class="str">&quot;</span> n n<span class="sym">)</span>

      <span class="sym">(</span>let loop<span class="sym">-</span>y <span class="sym">((</span>y <span class="num">0</span><span class="sym">))</span>

	<span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&gt;</span> y <span class="sym">(-</span> n <span class="num">1</span><span class="sym">))</span> <span class="str">'()</span>
<span class="str">	    ;; else</span>
<span class="str">	    (begin</span>
<span class="str">	      (let loop-x ((x 0))</span>
<span class="str"></span>
<span class="str">		(if (&gt; x (- n 1)) '</span><span class="sym">()</span>
		    <span class="slc">;; else</span>
		    <span class="sym">(</span>begin
		      <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> bitnum <span class="sym">(</span>add1 bitnum<span class="sym">))</span>
		      <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> byteacc <span class="sym">(+ (*</span> <span class="num">2</span> byteacc<span class="sym">) (</span>mandelbrot <span class="sym">+</span>iterations<span class="sym">+</span> x y n<span class="sym">)))</span>

		      <span class="sym">(</span><span class="kwa">cond</span>
		       <span class="sym">((=</span> bitnum <span class="num">8</span><span class="sym">)</span>
			<span class="sym">(</span>write<span class="sym">-</span>byte byteacc<span class="sym">)</span>
			<span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> bitnum <span class="num">0</span><span class="sym">)</span>
			<span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> byteacc <span class="num">0</span><span class="sym">))</span>

		       <span class="sym">((=</span> x <span class="sym">(-</span> n <span class="num">1</span><span class="sym">))</span>
			<span class="sym">(</span>write<span class="sym">-</span>byte <span class="sym">(*</span> byteacc <span class="sym">(</span><span class="kwa">expt</span> <span class="num">2</span> <span class="sym">(-</span> <span class="num">8</span> <span class="sym">(</span>modulo n <span class="num">8</span><span class="sym">)))))</span>
			<span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> bitnum <span class="num">0</span><span class="sym">)</span>
			<span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> byteacc <span class="num">0</span><span class="sym">)))</span>

		      <span class="sym">(</span>loop<span class="sym">-</span>x <span class="sym">(</span>add1 x<span class="sym">)) )))</span>

	      <span class="sym">(</span>loop<span class="sym">-</span>y <span class="sym">(</span>add1 y<span class="sym">)) ))) ))</span>

  <span class="slc">;; -------------------------------</span>

  <span class="sym">(</span>main <span class="sym">(</span>current<span class="sym">-</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">)))</span>
