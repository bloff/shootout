<span class="sym">&lt;</span>?php
<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Peter Baltruschat</span>
<span class="com">*/</span>

<span class="kwa">function</span> bottomUpTree<span class="sym">(</span><span class="kwb">$item</span><span class="sym">,</span> <span class="kwb">$depth</span><span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwa">if</span><span class="sym">(</span><span class="kwb">$depth</span><span class="sym">)</span>
   <span class="sym">{</span>
      <span class="sym">--</span><span class="kwb">$depth</span><span class="sym">;</span>
      <span class="kwb">$newItem</span> <span class="sym">=</span> <span class="kwb">$item</span><span class="sym">&lt;&lt;</span><span class="num">1</span><span class="sym">;</span>
      <span class="kwa">return array</span><span class="sym">(</span>
         bottomUpTree<span class="sym">(</span><span class="kwb">$newItem</span> <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> <span class="kwb">$depth</span><span class="sym">),</span>
         bottomUpTree<span class="sym">(</span><span class="kwb">$newItem</span><span class="sym">,</span> <span class="kwb">$depth</span><span class="sym">),</span>
         <span class="kwb">$item</span>
      <span class="sym">);</span>
   <span class="sym">}</span>
   <span class="kwa">return array</span><span class="sym">(</span>NULL<span class="sym">,</span> NULL<span class="sym">,</span> <span class="kwb">$item</span><span class="sym">);</span>
<span class="sym">}</span>

<span class="kwa">function</span> itemCheck<span class="sym">(</span><span class="kwb">$treeNode</span><span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwb">$check</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   do
   <span class="sym">{</span>
      <span class="kwb">$check</span> <span class="sym">+=</span> <span class="kwb">$treeNode</span><span class="sym">[</span><span class="num">2</span><span class="sym">];</span>
      <span class="kwa">if</span><span class="sym">(</span>NULL <span class="sym">==</span> <span class="kwb">$treeNode</span><span class="sym">[</span><span class="num">0</span><span class="sym">])</span>
      <span class="sym">{</span>
         <span class="kwa">return</span> <span class="kwb">$check</span><span class="sym">;</span>
      <span class="sym">}</span>
      <span class="kwb">$check</span> <span class="sym">-=</span> itemCheck<span class="sym">(</span><span class="kwb">$treeNode</span><span class="sym">[</span><span class="num">1</span><span class="sym">]);</span>
      <span class="kwb">$treeNode</span> <span class="sym">=</span> <span class="kwb">$treeNode</span><span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
   <span class="sym">}</span>
   <span class="kwa">while</span><span class="sym">(</span>TRUE<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">$minDepth</span> <span class="sym">=</span> <span class="num">4</span><span class="sym">;</span>

<span class="kwb">$n</span> <span class="sym">= (</span><span class="kwb">$argc</span> <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? <span class="kwb">$argv</span><span class="sym">[</span><span class="num">1</span><span class="sym">] :</span> <span class="num">1</span><span class="sym">;</span>
<span class="kwb">$maxDepth</span> <span class="sym">=</span> <span class="kwa">max</span><span class="sym">(</span><span class="kwb">$minDepth</span> <span class="sym">+</span> <span class="num">2</span><span class="sym">,</span> <span class="kwb">$n</span><span class="sym">);</span>
<span class="kwb">$stretchDepth</span> <span class="sym">=</span> <span class="kwb">$maxDepth</span> <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>

<span class="kwb">$stretchTree</span> <span class="sym">=</span> bottomUpTree<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="kwb">$stretchDepth</span><span class="sym">);</span>
<span class="kwa">printf</span><span class="sym">(</span><span class="str">&quot;stretch tree of depth %d</span><span class="esc">\t</span> <span class="str">check: %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>
<span class="kwb">$stretchDepth</span><span class="sym">,</span> itemCheck<span class="sym">(</span><span class="kwb">$stretchTree</span><span class="sym">));</span>
<span class="kwa">unset</span><span class="sym">(</span><span class="kwb">$stretchTree</span><span class="sym">);</span>

<span class="kwb">$longLivedTree</span> <span class="sym">=</span> bottomUpTree<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="kwb">$maxDepth</span><span class="sym">);</span>

<span class="kwb">$iterations</span> <span class="sym">=</span> <span class="num">1</span> <span class="sym">&lt;&lt; (</span><span class="kwb">$maxDepth</span><span class="sym">);</span>
do
<span class="sym">{</span>
   <span class="kwb">$check</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="kwa">for</span><span class="sym">(</span><span class="kwb">$i</span> <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> <span class="kwb">$i</span> <span class="sym">&lt;=</span> <span class="kwb">$iterations</span><span class="sym">; ++</span><span class="kwb">$i</span><span class="sym">)</span>
   <span class="sym">{</span>
      <span class="kwb">$t</span> <span class="sym">=</span> bottomUpTree<span class="sym">(</span><span class="kwb">$i</span><span class="sym">,</span> <span class="kwb">$minDepth</span><span class="sym">);</span>
      <span class="kwb">$check</span> <span class="sym">+=</span> itemCheck<span class="sym">(</span><span class="kwb">$t</span><span class="sym">);</span>
      <span class="kwa">unset</span><span class="sym">(</span><span class="kwb">$t</span><span class="sym">);</span>
      <span class="kwb">$t</span> <span class="sym">=</span> bottomUpTree<span class="sym">(-</span><span class="kwb">$i</span><span class="sym">,</span> <span class="kwb">$minDepth</span><span class="sym">);</span>
      <span class="kwb">$check</span> <span class="sym">+=</span> itemCheck<span class="sym">(</span><span class="kwb">$t</span><span class="sym">);</span>
      <span class="kwa">unset</span><span class="sym">(</span><span class="kwb">$t</span><span class="sym">);</span>
   <span class="sym">}</span>

   <span class="kwa">printf</span><span class="sym">(</span><span class="str">&quot;%d</span><span class="esc">\t</span> <span class="str">trees of depth %d</span><span class="esc">\t</span> <span class="str">check: %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>
<span class="kwb">$iterations</span><span class="sym">&lt;&lt;</span><span class="num">1</span><span class="sym">,</span> <span class="kwb">$minDepth</span><span class="sym">,</span> <span class="kwb">$check</span><span class="sym">);</span>

   <span class="kwb">$minDepth</span> <span class="sym">+=</span> <span class="num">2</span><span class="sym">;</span>
   <span class="kwb">$iterations</span> <span class="sym">&gt;&gt;=</span> <span class="num">2</span><span class="sym">;</span>
<span class="sym">}</span>
<span class="kwa">while</span><span class="sym">(</span><span class="kwb">$minDepth</span> <span class="sym">&lt;=</span> <span class="kwb">$maxDepth</span><span class="sym">);</span>

<span class="kwa">printf</span><span class="sym">(</span><span class="str">&quot;long lived tree of depth %d</span><span class="esc">\t</span> <span class="str">check: %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>
<span class="kwb">$maxDepth</span><span class="sym">,</span> itemCheck<span class="sym">(</span><span class="kwb">$longLivedTree</span><span class="sym">));</span>
?<span class="sym">&gt;</span>
