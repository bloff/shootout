<span class="com">/* -*- mode: objc -*-</span>
<span class="com"> *</span>
<span class="com"> * The Computer Language Benchmarks Game</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Original C# Mono contributed by Isaac Gouy</span>
<span class="com"> * Conversion to Objective-C by Selman Ulug</span>
<span class="com"> */</span>

<span class="dir">#include &lt;objc/Object.h&gt;</span>
<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>
<span class="dir">#include &lt;math.h&gt;</span>

<span class="kwa">&#64;interface</span> SpectralNorm <span class="sym">:</span> Object
<span class="sym">{</span>
  <span class="kwb">int</span> N<span class="sym">;</span>
<span class="sym">}</span>
<span class="sym">- (</span><span class="kwb">double</span><span class="sym">)</span> approximate<span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span>n<span class="sym">;</span>
<span class="sym">- (</span><span class="kwb">double</span><span class="sym">)</span> A<span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span>i <span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span>j<span class="sym">;</span>
<span class="sym">- (</span><span class="kwb">void</span><span class="sym">)</span> multiplyAv<span class="sym">: (</span><span class="kwb">double</span><span class="sym">[])</span>v <span class="sym">: (</span><span class="kwb">double</span><span class="sym">[])</span>Av<span class="sym">;</span>
<span class="sym">- (</span><span class="kwb">void</span><span class="sym">)</span> multiplyAtv<span class="sym">: (</span><span class="kwb">double</span><span class="sym">[])</span>v <span class="sym">: (</span><span class="kwb">double</span><span class="sym">[])</span>Atv<span class="sym">;</span>
<span class="sym">- (</span><span class="kwb">void</span><span class="sym">)</span> multiplyAtAv<span class="sym">: (</span><span class="kwb">double</span><span class="sym">[])</span>v <span class="sym">: (</span><span class="kwb">double</span><span class="sym">[])</span>AtAv<span class="sym">;</span>
<span class="kwa">&#64;end</span>

<span class="kwa">&#64;implementation</span> SpectralNorm
<span class="sym">- (</span><span class="kwb">double</span><span class="sym">)</span> approximate<span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span>n
<span class="sym">{</span>
  N <span class="sym">=</span> n<span class="sym">;</span>
  <span class="kwb">double</span> u<span class="sym">[</span>N<span class="sym">],</span> v<span class="sym">[</span>N<span class="sym">],</span> vBv<span class="sym">,</span> vv<span class="sym">;</span>
  <span class="kwb">int</span> i<span class="sym">;</span>

  <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> N<span class="sym">;</span> i<span class="sym">++)</span>
    u<span class="sym">[</span>i<span class="sym">] =</span> <span class="num">1</span><span class="sym">;</span>

  <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> <span class="num">10</span><span class="sym">;</span> i<span class="sym">++)</span>
    <span class="sym">{</span>
      <span class="sym">[</span><span class="kwa">self</span> multiplyAtAv<span class="sym">:</span> u <span class="sym">:</span> v<span class="sym">];</span>
      <span class="sym">[</span><span class="kwa">self</span> multiplyAtAv<span class="sym">:</span> v <span class="sym">:</span> u<span class="sym">];</span>
    <span class="sym">}</span>

  vBv <span class="sym">=</span>  vv <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
  <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++)</span>
    <span class="sym">{</span>
      vBv <span class="sym">+=</span> u<span class="sym">[</span>i<span class="sym">] *</span> v<span class="sym">[</span>i<span class="sym">];</span>
      vv <span class="sym">+=</span> v<span class="sym">[</span>i<span class="sym">] *</span> v<span class="sym">[</span>i<span class="sym">];</span>
    <span class="sym">}</span>

  <span class="kwa">return</span> <span class="kwd">sqrt</span> <span class="sym">(</span>vBv <span class="sym">/</span> vv<span class="sym">);</span>
<span class="sym">}</span>

<span class="sym">- (</span><span class="kwb">double</span><span class="sym">)</span> A<span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span>i <span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span>j
<span class="sym">{</span>
  <span class="kwa">return</span> <span class="num">1.0</span> <span class="sym">/ ((</span>i <span class="sym">+</span> j<span class="sym">) * (</span>i <span class="sym">+</span> j <span class="sym">+</span> <span class="num">1</span><span class="sym">) /</span> <span class="num">2</span> <span class="sym">+</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">);</span>
<span class="sym">}</span>

<span class="sym">- (</span><span class="kwb">void</span><span class="sym">)</span> multiplyAv<span class="sym">: (</span><span class="kwb">double</span><span class="sym">[])</span>v <span class="sym">: (</span><span class="kwb">double</span><span class="sym">[])</span>Av
<span class="sym">{</span>
  <span class="kwb">int</span> i<span class="sym">,</span> j<span class="sym">;</span>

  <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> N<span class="sym">;</span> i<span class="sym">++)</span>
    <span class="sym">{</span>
      Av<span class="sym">[</span>i<span class="sym">] =</span> <span class="num">0</span><span class="sym">;</span>
      <span class="kwa">for</span> <span class="sym">(</span>j <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> j <span class="sym">&lt;</span> N<span class="sym">;</span> j<span class="sym">++)</span>
	Av<span class="sym">[</span>i<span class="sym">] += [</span><span class="kwa">self</span> A<span class="sym">:</span> i <span class="sym">:</span> j<span class="sym">] *</span> v<span class="sym">[</span>j<span class="sym">];</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="sym">- (</span><span class="kwb">void</span><span class="sym">)</span> multiplyAtv<span class="sym">: (</span><span class="kwb">double</span><span class="sym">[])</span>v <span class="sym">: (</span><span class="kwb">double</span><span class="sym">[])</span>Atv
<span class="sym">{</span>
  <span class="kwb">int</span> i<span class="sym">,</span> j<span class="sym">;</span>

  <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> N<span class="sym">;</span> i<span class="sym">++)</span>
    <span class="sym">{</span>
      Atv<span class="sym">[</span>i<span class="sym">] =</span> <span class="num">0</span><span class="sym">;</span>
      <span class="kwa">for</span> <span class="sym">(</span>j <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> j <span class="sym">&lt;</span> N<span class="sym">;</span> j<span class="sym">++)</span>
	Atv<span class="sym">[</span>i<span class="sym">] += [</span><span class="kwa">self</span> A<span class="sym">:</span> j <span class="sym">:</span> i<span class="sym">] *</span> v<span class="sym">[</span>j<span class="sym">];</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="sym">- (</span><span class="kwb">void</span><span class="sym">)</span> multiplyAtAv<span class="sym">: (</span><span class="kwb">double</span><span class="sym">[])</span>v <span class="sym">: (</span><span class="kwb">double</span><span class="sym">[])</span>AtAv
<span class="sym">{</span>
  <span class="kwb">double</span> u<span class="sym">[</span>N<span class="sym">];</span>

  <span class="sym">[</span><span class="kwa">self</span> multiplyAv<span class="sym">:</span> v <span class="sym">:</span> u<span class="sym">];</span>
  <span class="sym">[</span><span class="kwa">self</span> multiplyAtv<span class="sym">:</span> u <span class="sym">:</span> AtAv<span class="sym">];</span>
<span class="sym">}</span>
<span class="kwa">&#64;end</span>

<span class="kwb">int</span>
<span class="kwd">main</span> <span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">**</span>argv<span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwb">int</span> N <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? <span class="kwd">atoi</span> <span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">2000</span><span class="sym">);</span>

  SpectralNorm<span class="sym">*</span> sn <span class="sym">= [[</span>SpectralNorm alloc<span class="sym">]</span> init<span class="sym">];</span>
  <span class="kwd">printf</span> <span class="sym">(</span><span class="str">&quot;%0.9f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">, [</span>sn approximate<span class="sym">:</span> N<span class="sym">]);</span>

  <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>
