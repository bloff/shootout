<span class="slc">;;; The Computer Language Shootout</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;; by Risto Laakso 12/2005</span>
<span class="slc">;;; Modified by Stefan Lang 2007-02-10</span>

<span class="sym">(</span><span class="kwa">defun</span> main <span class="sym">()</span>
  <span class="sym">(</span>declare <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">)))</span>
  <span class="sym">(</span>flet <span class="sym">((</span><span class="kwa">read</span><span class="sym">-</span>fixnum <span class="sym">(</span>stream<span class="sym">)</span>
	   <span class="sym">(</span>let <span class="sym">((</span>num <span class="num">0</span><span class="sym">) (</span>sgn <span class="num">1</span><span class="sym">) (</span>skip t<span class="sym">))</span>
	     <span class="sym">(</span>declare <span class="sym">(</span>fixnum num sgn<span class="sym">))</span>
	     <span class="sym">(</span>loop for digit fixnum <span class="sym">= (</span><span class="kwa">read</span><span class="sym">-</span>byte stream<span class="sym">)</span>
		   for n fixnum <span class="sym">= (-</span> digit #.<span class="sym">(</span>char<span class="sym">-</span>code #\0<span class="sym">))</span>
		   do <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((=</span> digit #.<span class="sym">(</span>char<span class="sym">-</span>code #\-<span class="sym">))</span>
			     <span class="sym">(</span>setf sgn <span class="sym">-</span><span class="num">1</span><span class="sym">))</span>
			    <span class="sym">((&lt;=</span> <span class="num">0</span> n <span class="num">9</span><span class="sym">)</span>
			     <span class="sym">(</span>setf num <span class="sym">(+</span> n <span class="sym">(</span>the fixnum <span class="sym">(*</span> <span class="num">10</span> num<span class="sym">)))</span>
				   skip nil<span class="sym">))</span>
			    <span class="sym">((</span><span class="kwa">not</span> skip<span class="sym">)</span>
			     <span class="sym">(</span>return <span class="sym">(</span>the fixnum <span class="sym">(*</span> sgn num<span class="sym">)))))))))</span>
    <span class="sym">(</span>with<span class="sym">-</span><span class="kwa">open</span><span class="sym">-</span>file <span class="sym">(</span>in <span class="str">&quot;/dev/stdin&quot;</span> <span class="sym">:</span>element<span class="sym">-</span><span class="kwa">type</span> <span class="sym">'(</span>unsigned<span class="sym">-</span>byte <span class="num">8</span><span class="sym">))</span>
      <span class="sym">(</span>let <span class="sym">((</span>sum <span class="num">0</span><span class="sym">))</span>
	<span class="sym">(</span>declare <span class="sym">(</span>fixnum sum<span class="sym">))</span>
	<span class="sym">(</span>handler<span class="sym">-</span>case <span class="sym">(</span>loop <span class="sym">(</span>incf sum <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span>fixnum in<span class="sym">)))</span>
	  <span class="sym">(</span>end<span class="sym">-</span>of<span class="sym">-</span>file <span class="sym">() (</span>format t <span class="str">&quot;~A~%&quot;</span> sum<span class="sym">)))))))</span>
