<span class="com">/* The Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> * Contributed by Paul Kitchin</span>
<span class="com"> */</span>


<span class="dir">#include &lt;iostream&gt;</span>
<span class="dir">#include &lt;sstream&gt;</span>

<span class="kwc">class</span> Tree
<span class="sym">{</span>

      <span class="kwb">struct</span> Node
      <span class="sym">{</span>

         <span class="kwd">Node</span><span class="sym">(</span><span class="kwb">int</span> value<span class="sym">,</span> std<span class="sym">::</span><span class="kwb">size_t</span> depth<span class="sym">,</span> std<span class="sym">::</span><span class="kwb">size_t</span> index<span class="sym">,</span> Node <span class="sym">*</span> nodes<span class="sym">,</span> std<span class="sym">::</span><span class="kwb">size_t</span> max<span class="sym">)</span>
            <span class="sym">:</span>
            <span class="kwd">value</span><span class="sym">(</span>value<span class="sym">)</span>
         <span class="sym">{</span>
            <span class="kwa">if</span> <span class="sym">(</span>index <span class="sym">*</span> <span class="num">2</span> <span class="sym">+</span> <span class="num">2</span> <span class="sym">&lt;</span> max<span class="sym">)</span>
            <span class="sym">{</span>
               <span class="kwa">new</span> <span class="sym">(</span>nodes <span class="sym">+</span> index <span class="sym">*</span> <span class="num">2</span> <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span> <span class="kwd">Node</span><span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> value <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> depth <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> index <span class="sym">*</span> <span class="num">2</span> <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> nodes<span class="sym">,</span> max<span class="sym">);</span>
               <span class="kwa">new</span> <span class="sym">(</span>nodes <span class="sym">+</span> index <span class="sym">*</span> <span class="num">2</span> <span class="sym">+</span> <span class="num">2</span><span class="sym">)</span> <span class="kwd">Node</span><span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> value<span class="sym">,</span> depth <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> index <span class="sym">*</span> <span class="num">2</span> <span class="sym">+</span> <span class="num">2</span><span class="sym">,</span> nodes<span class="sym">,</span> max<span class="sym">);</span>
            <span class="sym">}</span>
         <span class="sym">}</span>

         <span class="kwb">int</span> <span class="kwd">check</span><span class="sym">(</span>std<span class="sym">::</span><span class="kwb">size_t</span> index<span class="sym">,</span> Node <span class="sym">*</span> nodes<span class="sym">,</span> std<span class="sym">::</span><span class="kwb">size_t</span> max<span class="sym">)</span> <span class="kwb">const</span>
         <span class="sym">{</span>
            <span class="kwa">if</span> <span class="sym">(</span>index <span class="sym">*</span> <span class="num">2</span> <span class="sym">+</span> <span class="num">2</span> <span class="sym">&lt;</span> max<span class="sym">)</span>
            <span class="sym">{</span>
               <span class="kwa">return</span> nodes<span class="sym">[</span>index <span class="sym">*</span> <span class="num">2</span> <span class="sym">+</span> <span class="num">1</span><span class="sym">].</span><span class="kwd">check</span><span class="sym">(</span>index <span class="sym">*</span> <span class="num">2</span> <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> nodes<span class="sym">,</span> max<span class="sym">) +</span> value <span class="sym">-</span> nodes<span class="sym">[</span>index <span class="sym">*</span> <span class="num">2</span> <span class="sym">+</span> <span class="num">2</span><span class="sym">].</span><span class="kwd">check</span><span class="sym">(</span>index <span class="sym">*</span> <span class="num">2</span> <span class="sym">+</span> <span class="num">2</span><span class="sym">,</span> nodes<span class="sym">,</span> max<span class="sym">);</span>
            <span class="sym">}</span>
            <span class="kwa">return</span> value<span class="sym">;</span>
         <span class="sym">}</span>

         <span class="kwb">int</span> value<span class="sym">;</span>

      <span class="sym">};</span>

   <span class="kwc">public</span><span class="sym">:</span>

      <span class="kwd">Tree</span><span class="sym">(</span><span class="kwb">int</span> value<span class="sym">,</span> std<span class="sym">::</span><span class="kwb">size_t</span> depth<span class="sym">)</span>
         <span class="sym">:</span>
         <span class="kwd">size</span><span class="sym">((</span><span class="num">2</span> <span class="sym">&lt;&lt;</span> depth<span class="sym">) -</span> <span class="num">1</span><span class="sym">),</span>
         <span class="kwd">nodes</span><span class="sym">(</span><span class="kwa">static_cast</span><span class="sym">&lt;</span> Node <span class="sym">* &gt;(</span><span class="kwc">operator</span> <span class="kwa">new</span><span class="sym">(</span>size <span class="sym">*</span> <span class="kwa">sizeof</span><span class="sym">(</span>Node<span class="sym">))))</span>
      <span class="sym">{</span>
         <span class="kwa">new</span> <span class="sym">(</span>nodes<span class="sym">)</span> <span class="kwd">Node</span><span class="sym">(</span>value<span class="sym">,</span> depth<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> nodes<span class="sym">,</span> size<span class="sym">);</span>
      <span class="sym">}</span>

      <span class="sym">~</span><span class="kwd">Tree</span><span class="sym">()</span>
      <span class="sym">{</span>
         <span class="kwc">operator</span> <span class="kwa">delete</span><span class="sym">(</span>nodes<span class="sym">);</span>
      <span class="sym">}</span>

      <span class="kwb">int</span> <span class="kwd">check</span><span class="sym">()</span> <span class="kwb">const</span>
      <span class="sym">{</span>
         <span class="kwa">return</span> nodes<span class="sym">-&gt;</span><span class="kwd">check</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> nodes<span class="sym">,</span> size<span class="sym">);</span>
      <span class="sym">}</span>

   <span class="kwc">private</span><span class="sym">:</span>

      std<span class="sym">::</span><span class="kwb">size_t</span> size<span class="sym">;</span>
      Node <span class="sym">*</span> nodes<span class="sym">;</span>

<span class="sym">};</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">* *</span> argv<span class="sym">)</span>
<span class="sym">{</span>
   std<span class="sym">::</span><span class="kwb">size_t</span> user_depth <span class="sym">=</span> <span class="num">10</span><span class="sym">;</span>
   <span class="kwa">if</span> <span class="sym">(</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span>
   <span class="sym">{</span>
      std<span class="sym">::</span>istringstream <span class="kwd">convertor</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span>
      <span class="kwa">if</span> <span class="sym">(!(</span>convertor <span class="sym">&gt;&gt;</span> user_depth<span class="sym">) || !</span>convertor<span class="sym">.</span><span class="kwd">eof</span><span class="sym">())</span>
      <span class="sym">{</span>
         std<span class="sym">::</span>cerr <span class="sym">&lt;&lt;</span> <span class="str">&quot;Usage: &quot;</span> <span class="sym">&lt;&lt;</span> argv<span class="sym">[</span><span class="num">0</span><span class="sym">] &lt;&lt;</span> <span class="str">&quot; [n]</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
         std<span class="sym">::</span>cerr <span class="sym">&lt;&lt;</span> <span class="str">&quot;</span><span class="esc">\t</span><span class="str">n must be an integer</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
         <span class="kwa">return</span> <span class="num">1</span><span class="sym">;</span>
      <span class="sym">}</span>
   <span class="sym">}</span>
   std<span class="sym">::</span><span class="kwb">size_t</span> minimum_depth <span class="sym">=</span> <span class="num">4</span><span class="sym">;</span>
   std<span class="sym">::</span><span class="kwb">size_t</span> maximum_depth <span class="sym">=</span> std<span class="sym">::</span><span class="kwd">max</span><span class="sym">(</span>minimum_depth <span class="sym">+</span> <span class="num">2</span><span class="sym">,</span> user_depth<span class="sym">);</span>
   <span class="sym">{</span>
      Tree <span class="kwd">tree</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> maximum_depth <span class="sym">+</span> <span class="num">1</span><span class="sym">);</span>
      std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;stretch tree of depth &quot;</span> <span class="sym">&lt;&lt; (</span>maximum_depth <span class="sym">+</span> <span class="num">1</span><span class="sym">) &lt;&lt;</span> <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">check: &quot;</span> <span class="sym">&lt;&lt;</span> tree<span class="sym">.</span><span class="kwd">check</span><span class="sym">() &lt;&lt;</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;</span>
   <span class="sym">}</span>
   Tree <span class="kwd">long_lived_tree</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> maximum_depth<span class="sym">);</span>
   <span class="kwa">for</span> <span class="sym">(</span>std<span class="sym">::</span><span class="kwb">size_t</span> depth <span class="sym">=</span> minimum_depth<span class="sym">;</span> depth <span class="sym">&lt;=</span> maximum_depth<span class="sym">;</span> depth <span class="sym">+=</span> <span class="num">2</span><span class="sym">)</span>
   <span class="sym">{</span>
      <span class="kwb">int</span> iterations <span class="sym">=</span> <span class="num">1</span> <span class="sym">&lt;&lt; (</span>maximum_depth <span class="sym">-</span> depth <span class="sym">+</span> minimum_depth<span class="sym">);</span>
      <span class="kwb">int</span> check <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> iteration <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> iteration <span class="sym">&lt;=</span> iterations<span class="sym">; ++</span>iteration<span class="sym">)</span>
      <span class="sym">{</span>
         Tree <span class="kwd">first</span><span class="sym">(</span>iteration<span class="sym">,</span> depth<span class="sym">);</span>
         Tree <span class="kwd">second</span><span class="sym">(-</span>iteration<span class="sym">,</span> depth<span class="sym">);</span>
         check <span class="sym">+=</span> first<span class="sym">.</span><span class="kwd">check</span><span class="sym">() +</span> second<span class="sym">.</span><span class="kwd">check</span><span class="sym">();</span>
      <span class="sym">}</span>
      std<span class="sym">::</span>cout <span class="sym">&lt;&lt; (</span><span class="num">2</span> <span class="sym">*</span> iterations<span class="sym">) &lt;&lt;</span> <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">trees of depth &quot;</span> <span class="sym">&lt;&lt;</span> depth <span class="sym">&lt;&lt;</span> <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">check: &quot;</span> <span class="sym">&lt;&lt;</span> check <span class="sym">&lt;&lt;</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;</span>
   <span class="sym">}</span>
   std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;long lived tree of depth &quot;</span> <span class="sym">&lt;&lt;</span> maximum_depth <span class="sym">&lt;&lt;</span> <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">check: &quot;</span> <span class="sym">&lt;&lt;</span> long_lived_tree<span class="sym">.</span><span class="kwd">check</span><span class="sym">() &lt;&lt;</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;</span>
<span class="sym">}</span>
