<span class="str">&quot;* The Computer Language Shootout</span>
<span class="str">    http://shootout.alioth.debian.org/</span>
<span class="str">    contributed by Isaac Gouy</span>
<span class="str">    modified by Paolo Bonzini *&quot;</span>


<span class="sym">!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>matchPatterns
   ^<span class="slc">#(   'agggtaaa|tttaccct'</span>
         <span class="str">'[cgt]gggtaaa|tttaccc[acg]'</span>
         <span class="str">'a[act]ggtaaa|tttacc[agt]t'</span>
         <span class="str">'ag[act]gtaaa|tttac[agt]ct'</span>
         <span class="str">'agg[act]taaa|ttta[agt]cct'</span>
         <span class="str">'aggg[acg]aaa|ttt[cgt]ccct'</span>
         <span class="str">'agggt[cgt]aa|tt[acg]accct'</span>
         <span class="str">'agggta[cgt]a|t[acg]taccct'</span>
         <span class="str">'agggtaa[cgt]|[acg]ttaccct'</span>
   <span class="sym">)! !</span>

<span class="sym">!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>substitutionPatterns
   ^<span class="slc">#(   #('B' '(c|g|t)')</span>
         <span class="slc">#('D' '(a|g|t)')</span>
         <span class="slc">#('H' '(a|c|t)')</span>
         <span class="slc">#('K' '(g|t)')</span>
         <span class="slc">#('M' '(a|c)')</span>
         <span class="slc">#('N' '(a|c|g|t)')</span>
         <span class="slc">#('R' '(a|g)')</span>
         <span class="slc">#('S' '(c|g)')</span>
         <span class="slc">#('V' '(a|c|g)')</span>
         <span class="slc">#('W' '(a|t)')</span>
         <span class="slc">#('Y' '(c|t)'))! !</span>


<span class="sym">!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>regexDNA<span class="sym">:</span> sequence to<span class="sym">:</span> output
   <span class="sym">|</span> s size1 size2 <span class="sym">|</span>
   size1 <span class="sym">:=</span> sequence size.

   <span class="str">&quot;* remove FASTA sequence descriptions and new-lines *&quot;</span>
   s <span class="sym">:=</span> sequence copyReplacingAllRegex<span class="sym">:</span> <span class="str">'&gt;.*</span><span class="esc">\n</span><span class="str">|</span><span class="esc">\n</span><span class="str">'</span> with<span class="sym">:</span> <span class="str">''</span>.
   size2 <span class="sym">:=</span> s size.

   self matchPatterns <span class="kwa">do</span><span class="sym">: [:</span>each<span class="sym">|</span>
      output
         nextPutAll<span class="sym">:</span> each<span class="sym">;</span> space<span class="sym">;</span>
         print<span class="sym">: (</span>s occurrencesOfRegex<span class="sym">:</span> each<span class="sym">);</span> nl
      <span class="sym">]</span>.

   self substitutionPatterns <span class="kwa">do</span><span class="sym">: [:</span>each<span class="sym">|</span>
      s <span class="sym">:=</span> s copyReplacingAllRegex<span class="sym">:</span> each first with<span class="sym">:</span> each <span class="kwa">last</span><span class="sym">]</span>.

   output
      nl<span class="sym">;</span>
      print<span class="sym">:</span> size1<span class="sym">;</span> nl<span class="sym">;</span>
      print<span class="sym">:</span> size2<span class="sym">;</span> nl<span class="sym">;</span>
      print<span class="sym">:</span> s size<span class="sym">;</span> nl<span class="sym">! !!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmark scripts'</span><span class="sym">!</span>regexdna
   self regexDNA<span class="sym">:</span> self stdinSpecial contents to<span class="sym">:</span> self stdout.
   ^<span class="str">''</span> <span class="sym">! !</span>

Tests regexdna<span class="sym">!</span>
