<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   Contributed by Dennis Decker Jensen</span>
<span class="com">*/</span>

<span class="kwa">parse arg</span> num .
check <span class="sym">=</span> <span class="num">0</span>
maxflips <span class="sym">=</span> <span class="num">0</span>
f<span class="num">.0</span> <span class="sym">=</span> num<span class="sym">;</span> p<span class="num">.0</span> <span class="sym">=</span> num
<span class="kwa">do</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> num<span class="sym">;</span> p.i <span class="sym">=</span> i<span class="sym">;</span> <span class="kwa">end</span><span class="sym">;</span>

<span class="kwa">call</span> pfannkuch_permutations num
<span class="kwa">say</span> <span class="str">&quot;Pfannkuchen(&quot;</span> <span class="sym">||</span> num <span class="sym">||</span> <span class="str">&quot;) = &quot;</span> <span class="sym">||</span> maxflips
<span class="kwa">exit</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>

pfannkuch_permutations<span class="sym">:</span> <span class="kwa">procedure expose</span> f. p. maxflips check
<span class="kwa">arg</span> n
<span class="kwa">if</span> n <span class="sym">=</span> <span class="num">1</span> <span class="kwa">then do</span>
	<span class="com">/* write the first 30 permutations */</span>
	<span class="kwa">if</span> check <span class="sym">&lt;</span> <span class="num">30</span> <span class="kwa">then do</span>
		<span class="kwa">do</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> p<span class="num">.0</span><span class="sym">;</span> <span class="kwa">call</span> <span class="kwb">charout</span> <span class="sym">,</span> p.i<span class="sym">;</span> <span class="kwa">end</span>
		<span class="kwa">say</span>
		check <span class="sym">=</span> check <span class="sym">+</span> <span class="num">1</span>
	<span class="kwa">end</span>

	f<span class="num">.0</span> <span class="sym">=</span> p<span class="num">.0</span>
	<span class="kwa">do</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> p<span class="num">.0</span><span class="sym">;</span> f.i <span class="sym">=</span> p.i<span class="sym">;</span> <span class="kwa">end</span>
	maxflips <span class="sym">=</span> <span class="kwb">max</span><span class="sym">(</span>nflips<span class="sym">(),</span> maxflips<span class="sym">)</span>
<span class="kwa">end</span>
<span class="kwa">else do</span>
	<span class="kwa">do</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> n
		<span class="kwa">call</span> pfannkuch_permutations n<span class="sym">-</span><span class="num">1</span>
		m <span class="sym">=</span> p<span class="num">.1</span>		<span class="com">/* roll */</span>
		<span class="kwa">do</span> j <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> n
			k <span class="sym">=</span> j <span class="sym">+</span> <span class="num">1</span>
			p.j <span class="sym">=</span> p.k
		<span class="kwa">end</span>
		p.n <span class="sym">=</span> m
	<span class="kwa">end</span>
<span class="kwa">end</span>
<span class="kwa">return</span> maxflips

nflips<span class="sym">:</span> <span class="kwa">procedure expose</span> f.
n <span class="sym">=</span> <span class="num">0</span>
<span class="kwa">do while</span> f<span class="num">.1</span> \<span class="sym">=</span> <span class="num">1</span>
	<span class="kwa">call</span> <span class="kwb">reverse</span> f<span class="num">.1</span>
	n <span class="sym">=</span> n <span class="sym">+</span> <span class="num">1</span>
<span class="kwa">end</span>
<span class="kwa">return</span> n

<span class="kwb">reverse</span><span class="sym">:</span> <span class="kwa">procedure expose</span> f.
<span class="kwa">arg</span> n
k <span class="sym">=</span> n <span class="sym">%</span> <span class="num">2</span>
<span class="kwa">do</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> k
	<span class="kwa">parse</span> <span class="kwb">value</span> f.i f.n <span class="kwa">with</span> f.n f.i
	n <span class="sym">=</span> n <span class="sym">-</span> <span class="num">1</span>
<span class="kwa">end</span>
<span class="kwa">return</span>

