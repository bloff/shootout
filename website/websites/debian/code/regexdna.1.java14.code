
<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Josh Goldfoot</span>
<span class="com">   based on the Nice entry by Isaac Guoy</span>
<span class="com">*/</span>

<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;</span>
<span class="kwa">import</span> java<span class="sym">.</span>lang<span class="sym">.*;</span>
<span class="kwa">import</span> java<span class="sym">.</span>util<span class="sym">.</span>regex<span class="sym">.*;</span>

<span class="kwa">public class</span> regexdna <span class="sym">{</span>

    <span class="kwa">public</span> <span class="kwd">regexdna</span><span class="sym">() {</span>
    <span class="sym">}</span>

    <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">) {</span>
        <span class="kwc">BufferedReader</span> r <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">BufferedReader</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwc">InputStreamReader</span><span class="sym">(</span><span class="kwc">System</span><span class="sym">.</span>in<span class="sym">));</span>
        <span class="kwc">StringBuffer</span> sb <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">StringBuffer</span><span class="sym">(</span><span class="num">10240</span><span class="sym">);</span>
        <span class="kwb">char</span><span class="sym">[]</span> cbuf <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">char</span><span class="sym">[</span><span class="num">10240</span><span class="sym">];</span>
        <span class="kwb">int</span> charsRead <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
        <span class="kwa">try</span> <span class="sym">{</span>
            <span class="kwa">while</span> <span class="sym">((</span>charsRead <span class="sym">=</span> r<span class="sym">.</span><span class="kwd">read</span><span class="sym">(</span>cbuf<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">10240</span><span class="sym">)) != -</span><span class="num">1</span><span class="sym">)</span>
                sb<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span>cbuf<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> charsRead<span class="sym">);</span>
        <span class="sym">}</span> <span class="kwa">catch</span> <span class="sym">(</span>java<span class="sym">.</span>io<span class="sym">.</span><span class="kwc">IOException</span> e<span class="sym">) {</span>
            <span class="kwa">return</span><span class="sym">;</span>
        <span class="sym">}</span>
        <span class="kwc">String</span> sequence <span class="sym">=</span> sb<span class="sym">.</span><span class="kwd">toString</span><span class="sym">();</span>

        <span class="kwb">int</span> initialLength <span class="sym">=</span> sequence<span class="sym">.</span><span class="kwd">length</span><span class="sym">();</span>
        sequence <span class="sym">=</span> <span class="kwc">Pattern</span><span class="sym">.</span><span class="kwd">compile</span><span class="sym">(</span><span class="str">&quot;&gt;.*</span><span class="esc">\n</span><span class="str">|</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">).</span><span class="kwd">matcher</span><span class="sym">(</span>sequence<span class="sym">).</span><span class="kwd">replaceAll</span><span class="sym">(</span><span class="str">&quot;&quot;</span><span class="sym">);</span>
        <span class="kwb">int</span> codeLength <span class="sym">=</span> sequence<span class="sym">.</span><span class="kwd">length</span><span class="sym">();</span>

        <span class="kwc">String</span><span class="sym">[]</span> variants <span class="sym">= {</span> <span class="str">&quot;agggtaaa|tttaccct&quot;</span> <span class="sym">,</span><span class="str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="sym">,</span> <span class="str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="sym">,</span>
                 <span class="str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="sym">,</span> <span class="str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="sym">,</span> <span class="str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="sym">,</span>
                 <span class="str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="sym">,</span> <span class="str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="sym">,</span> <span class="str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span> <span class="sym">};</span>
        <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> variants<span class="sym">.</span>length<span class="sym">;</span> i<span class="sym">++) {</span>
            <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
            <span class="kwc">Matcher</span> m <span class="sym">=</span> <span class="kwc">Pattern</span><span class="sym">.</span><span class="kwd">compile</span><span class="sym">(</span>variants<span class="sym">[</span>i<span class="sym">]).</span><span class="kwd">matcher</span><span class="sym">(</span>sequence<span class="sym">);</span>
            <span class="kwa">while</span> <span class="sym">(</span>m<span class="sym">.</span><span class="kwd">find</span><span class="sym">())</span>
                count<span class="sym">++;</span>
            <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">println</span><span class="sym">(</span>variants<span class="sym">[</span>i<span class="sym">] +</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span> count<span class="sym">);</span>
        <span class="sym">}</span>

        sequence <span class="sym">=</span> <span class="kwc">Pattern</span><span class="sym">.</span><span class="kwd">compile</span><span class="sym">(</span><span class="str">&quot;B&quot;</span><span class="sym">).</span><span class="kwd">matcher</span><span class="sym">(</span>sequence<span class="sym">).</span><span class="kwd">replaceAll</span><span class="sym">(</span><span class="str">&quot;(c|g|t)&quot;</span><span class="sym">);</span>
        sequence <span class="sym">=</span> <span class="kwc">Pattern</span><span class="sym">.</span><span class="kwd">compile</span><span class="sym">(</span><span class="str">&quot;D&quot;</span><span class="sym">).</span><span class="kwd">matcher</span><span class="sym">(</span>sequence<span class="sym">).</span><span class="kwd">replaceAll</span><span class="sym">(</span><span class="str">&quot;(a|g|t)&quot;</span><span class="sym">);</span>
        sequence <span class="sym">=</span> <span class="kwc">Pattern</span><span class="sym">.</span><span class="kwd">compile</span><span class="sym">(</span><span class="str">&quot;H&quot;</span><span class="sym">).</span><span class="kwd">matcher</span><span class="sym">(</span>sequence<span class="sym">).</span><span class="kwd">replaceAll</span><span class="sym">(</span><span class="str">&quot;(a|c|t)&quot;</span><span class="sym">);</span>
        sequence <span class="sym">=</span> <span class="kwc">Pattern</span><span class="sym">.</span><span class="kwd">compile</span><span class="sym">(</span><span class="str">&quot;K&quot;</span><span class="sym">).</span><span class="kwd">matcher</span><span class="sym">(</span>sequence<span class="sym">).</span><span class="kwd">replaceAll</span><span class="sym">(</span><span class="str">&quot;(g|t)&quot;</span><span class="sym">);</span>
        sequence <span class="sym">=</span> <span class="kwc">Pattern</span><span class="sym">.</span><span class="kwd">compile</span><span class="sym">(</span><span class="str">&quot;M&quot;</span><span class="sym">).</span><span class="kwd">matcher</span><span class="sym">(</span>sequence<span class="sym">).</span><span class="kwd">replaceAll</span><span class="sym">(</span><span class="str">&quot;(a|c)&quot;</span><span class="sym">);</span>
        sequence <span class="sym">=</span> <span class="kwc">Pattern</span><span class="sym">.</span><span class="kwd">compile</span><span class="sym">(</span><span class="str">&quot;N&quot;</span><span class="sym">).</span><span class="kwd">matcher</span><span class="sym">(</span>sequence<span class="sym">).</span><span class="kwd">replaceAll</span><span class="sym">(</span><span class="str">&quot;(a|c|g|t)&quot;</span><span class="sym">);</span>
        sequence <span class="sym">=</span> <span class="kwc">Pattern</span><span class="sym">.</span><span class="kwd">compile</span><span class="sym">(</span><span class="str">&quot;R&quot;</span><span class="sym">).</span><span class="kwd">matcher</span><span class="sym">(</span>sequence<span class="sym">).</span><span class="kwd">replaceAll</span><span class="sym">(</span><span class="str">&quot;(a|g)&quot;</span><span class="sym">);</span>
        sequence <span class="sym">=</span> <span class="kwc">Pattern</span><span class="sym">.</span><span class="kwd">compile</span><span class="sym">(</span><span class="str">&quot;S&quot;</span><span class="sym">).</span><span class="kwd">matcher</span><span class="sym">(</span>sequence<span class="sym">).</span><span class="kwd">replaceAll</span><span class="sym">(</span><span class="str">&quot;(c|g)&quot;</span><span class="sym">);</span>
        sequence <span class="sym">=</span> <span class="kwc">Pattern</span><span class="sym">.</span><span class="kwd">compile</span><span class="sym">(</span><span class="str">&quot;V&quot;</span><span class="sym">).</span><span class="kwd">matcher</span><span class="sym">(</span>sequence<span class="sym">).</span><span class="kwd">replaceAll</span><span class="sym">(</span><span class="str">&quot;(a|c|g)&quot;</span><span class="sym">);</span>
        sequence <span class="sym">=</span> <span class="kwc">Pattern</span><span class="sym">.</span><span class="kwd">compile</span><span class="sym">(</span><span class="str">&quot;W&quot;</span><span class="sym">).</span><span class="kwd">matcher</span><span class="sym">(</span>sequence<span class="sym">).</span><span class="kwd">replaceAll</span><span class="sym">(</span><span class="str">&quot;(a|t)&quot;</span><span class="sym">);</span>
        sequence <span class="sym">=</span> <span class="kwc">Pattern</span><span class="sym">.</span><span class="kwd">compile</span><span class="sym">(</span><span class="str">&quot;Y&quot;</span><span class="sym">).</span><span class="kwd">matcher</span><span class="sym">(</span>sequence<span class="sym">).</span><span class="kwd">replaceAll</span><span class="sym">(</span><span class="str">&quot;(c|t)&quot;</span><span class="sym">);</span>

        <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">println</span><span class="sym">();</span>
        <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">println</span><span class="sym">(</span>initialLength<span class="sym">);</span>
        <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">println</span><span class="sym">(</span>codeLength<span class="sym">);</span>
        <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">println</span><span class="sym">(</span>sequence<span class="sym">.</span><span class="kwd">length</span><span class="sym">());</span>
    <span class="sym">}</span>
<span class="sym">}</span>
