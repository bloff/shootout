<span class="str">&quot;* The Computer Language Shootout</span>
<span class="str"> http://shootout.alioth.debian.org/</span>
<span class="str"> contributed by Isaac Gouy</span>
<span class="str"> modified by Paolo Bonzini *&quot;</span>

ReadStream subclass<span class="sym">:</span> <span class="slc">#RepeatStream  instanceVariableNames: 'repeatPtr repeatLimit' classVariableNames: '' poolDictionaries: '' category: nil !</span>

<span class="sym">!</span>RepeatStream class methodsFor<span class="sym">:</span> <span class="str">'instance creation '</span><span class="sym">!</span>

to<span class="sym">:</span> anInteger on<span class="sym">:</span> aCollection
   ^<span class="sym">(</span>super on<span class="sym">:</span> aCollection<span class="sym">)</span> to<span class="sym">:</span> anInteger <span class="sym">! !</span>

<span class="sym">!</span>RepeatStream methodsFor<span class="sym">:</span> <span class="str">'initialize-release'</span><span class="sym">!</span>

to<span class="sym">:</span> anInteger
   repeatPtr <span class="sym">:=</span> <span class="num">0</span>.
   repeatLimit <span class="sym">:=</span> anInteger <span class="sym">! !</span>

<span class="sym">!</span>RepeatStream methodsFor<span class="sym">:</span> <span class="str">'accessing-reading'</span><span class="sym">!</span>

<span class="kwa">next</span>
    <span class="sym">|</span> element <span class="sym">|</span>
    ptr <span class="sym">&gt;</span> endPtr ifTrue<span class="sym">: [</span> self position<span class="sym">:</span> <span class="num">0</span> <span class="sym">]</span>.
    element <span class="sym">:=</span> collection at<span class="sym">:</span> ptr.
    ptr <span class="sym">:=</span> ptr <span class="sym">+</span> <span class="num">1</span>. repeatPtr <span class="sym">:=</span> repeatPtr <span class="sym">+</span> <span class="num">1</span>.
    ^element <span class="sym">! !</span>

<span class="sym">!</span>RepeatStream methodsFor<span class="sym">:</span> <span class="str">'testing'</span><span class="sym">!</span>

atEnd
   ^repeatPtr <span class="sym">&gt;=</span> repeatLimit <span class="sym">! !</span>


RepeatStream subclass<span class="sym">:</span> <span class="slc">#RandomStream instanceVariableNames: 'random percentages'</span>
classVariableNames<span class="sym">:</span> <span class="str">''</span> poolDictionaries<span class="sym">:</span> <span class="str">''</span> category<span class="sym">:</span> nil <span class="sym">!</span>

<span class="sym">!</span>RandomStream methodsFor<span class="sym">:</span> <span class="str">'private methods'</span><span class="sym">!</span>

initCollection<span class="sym">:</span> aCollection limit<span class="sym">:</span> size
   <span class="sym">|</span> cp <span class="sym">|</span>
   repeatPtr <span class="sym">:=</span> <span class="num">0</span>.
   random <span class="sym">:=</span> RandomNumber to<span class="sym">:</span> <span class="num">1.0</span>.
   percentages <span class="sym">:=</span> Array new<span class="sym">:</span> size.
   collection <span class="sym">:=</span> Array new<span class="sym">:</span> size.
   cp <span class="sym">:=</span> <span class="num">0.0</span>.
   <span class="num">1</span> to<span class="sym">:</span> size <span class="kwa">do</span><span class="sym">: [:</span>i<span class="sym">|</span>
      cp <span class="sym">:=</span> cp <span class="sym">+ (</span>aCollection at<span class="sym">:</span> i<span class="sym">)</span> value.
      collection at<span class="sym">:</span> i put<span class="sym">: (</span>aCollection at<span class="sym">:</span> i<span class="sym">)</span> key.
      percentages at<span class="sym">:</span> i put<span class="sym">: (</span>cp <span class="sym">*</span> RandomNumber scale<span class="sym">)</span> ceiling.
   <span class="sym">] ! !</span>

<span class="sym">!</span>RandomStream methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>

<span class="kwa">next</span>
   <span class="sym">|</span> r <span class="sym">|</span>
   r <span class="sym">:=</span> random <span class="kwa">next</span>.
   repeatPtr <span class="sym">:=</span> repeatPtr <span class="sym">+</span> <span class="num">1</span>.
   <span class="num">1</span> to<span class="sym">:</span> percentages size <span class="kwa">do</span><span class="sym">: [:</span>i<span class="sym">|</span>
      <span class="sym">(</span>r <span class="sym">&lt; (</span>percentages at<span class="sym">:</span> i<span class="sym">))</span> ifTrue<span class="sym">: [</span>^collection at<span class="sym">:</span> i<span class="sym">]]</span>.
self halt <span class="sym">!</span>

random<span class="sym">:</span> aRandomNumber
<span class="str">&quot;* Share the random number generator so we can get the expected results. *&quot;</span>
   random <span class="sym">:=</span> aRandomNumber <span class="sym">! !</span>


<span class="sym">!</span> FileStream methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>

writeFasta<span class="sym">:</span> aString sequence<span class="sym">:</span> aStream
   <span class="sym">|</span> i <span class="sym">|</span>
   self nextPut<span class="sym">: $&gt;;</span> nextPutAll<span class="sym">:</span> aString<span class="sym">;</span> nl.

   i <span class="sym">:=</span> <span class="num">0</span>.
   <span class="sym">[</span>aStream atEnd<span class="sym">]</span> whileFalse<span class="sym">: [</span>
      <span class="sym">(</span>i <span class="sym">==</span> <span class="num">60</span><span class="sym">)</span> ifTrue<span class="sym">: [</span>self nl. i <span class="sym">:=</span> <span class="num">0</span><span class="sym">]</span>.
      self nextPut<span class="sym">:</span> aStream <span class="kwa">next</span>.
      i <span class="sym">:=</span> i <span class="sym">+</span> <span class="num">1</span>.
      <span class="sym">]</span>.
   self nl <span class="sym">! !</span>


Object subclass<span class="sym">:</span> <span class="slc">#RandomNumber</span>
instanceVariableNames<span class="sym">:</span> <span class="str">'seed scale'</span>
classVariableNames<span class="sym">:</span> <span class="str">'Increment Multiplier Modulus '</span>
poolDictionaries<span class="sym">:</span> <span class="str">''</span> category<span class="sym">:</span> nil <span class="sym">!</span>

<span class="sym">!</span>RandomNumber class methodsFor<span class="sym">:</span> <span class="str">'instance creation'</span><span class="sym">!</span>

scale
   ^Modulus<span class="sym">!</span>

to<span class="sym">:</span> anInteger
   Increment <span class="sym">:=</span> <span class="num">29573</span>.
   Multiplier <span class="sym">:=</span> <span class="num">3877</span>.
   Modulus <span class="sym">:=</span> <span class="num">139968</span>.
   ^self basicNew to<span class="sym">:</span> anInteger <span class="sym">! !</span>

<span class="sym">!</span>RandomNumber methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>

<span class="kwa">next</span>
   ^seed <span class="sym">:=</span> seed <span class="sym">*</span> Multiplier <span class="sym">+</span> Increment <span class="esc">\\</span> Modulus<span class="sym">! !</span>

<span class="sym">!</span>RandomNumber methodsFor<span class="sym">:</span> <span class="str">'private'</span><span class="sym">!</span>

to<span class="sym">:</span> anInteger
   seed <span class="sym">:=</span> <span class="num">42</span>.
   scale <span class="sym">:=</span> anInteger <span class="sym">! !</span>


<span class="sym">|</span> n r s x <span class="sym">|</span>
n <span class="sym">:=</span> Smalltalk arguments first asInteger.
s <span class="sym">:=</span> FileStream stdout bufferSize<span class="sym">:</span> <span class="num">4096</span>.

s writeFasta<span class="sym">:</span> <span class="str">'ONE Homo sapiens alu'</span> sequence<span class="sym">:</span>
   <span class="sym">(</span> RepeatStream to<span class="sym">:</span> n<span class="sym">*</span><span class="num">2</span> on<span class="sym">:</span>
      <span class="str">'GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG'</span><span class="sym">,</span>
      <span class="str">'GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA'</span><span class="sym">,</span>
      <span class="str">'CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT'</span><span class="sym">,</span>
      <span class="str">'ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA'</span><span class="sym">,</span>
      <span class="str">'GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG'</span><span class="sym">,</span>
      <span class="str">'AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC'</span><span class="sym">,</span>
      <span class="str">'AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA'</span> <span class="sym">)</span>.

r <span class="sym">:=</span> RandomNumber to<span class="sym">:</span> <span class="num">1</span>. <span class="str">&quot;Shared random sequence&quot;</span>

s writeFasta<span class="sym">:</span> <span class="str">'TWO IUB ambiguity codes'</span> sequence<span class="sym">:</span>
   <span class="sym">((</span> RandomStream to<span class="sym">:</span> n<span class="sym">*</span><span class="num">3</span> on<span class="sym">: (</span>
      OrderedCollection new
         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$a</span> value<span class="sym">:</span> <span class="num">0.27</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$c</span> value<span class="sym">:</span> <span class="num">0.12</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$g</span> value<span class="sym">:</span> <span class="num">0.12</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$t</span> value<span class="sym">:</span> <span class="num">0.27</span><span class="sym">);</span>

         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$B</span> value<span class="sym">:</span> <span class="num">0.02</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$D</span> value<span class="sym">:</span> <span class="num">0.02</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$H</span> value<span class="sym">:</span> <span class="num">0.02</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$K</span> value<span class="sym">:</span> <span class="num">0.02</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$M</span> value<span class="sym">:</span> <span class="num">0.02</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$N</span> value<span class="sym">:</span> <span class="num">0.02</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$R</span> value<span class="sym">:</span> <span class="num">0.02</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$S</span> value<span class="sym">:</span> <span class="num">0.02</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$V</span> value<span class="sym">:</span> <span class="num">0.02</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$W</span> value<span class="sym">:</span> <span class="num">0.02</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$Y</span> value<span class="sym">:</span> <span class="num">0.02</span><span class="sym">);</span>
         yourself <span class="sym">))</span> random<span class="sym">:</span> r<span class="sym">)</span>.

s writeFasta<span class="sym">:</span> <span class="str">'THREE Homo sapiens frequency'</span> sequence<span class="sym">:</span>
   <span class="sym">((</span> RandomStream to<span class="sym">:</span> n<span class="sym">*</span><span class="num">5</span> on<span class="sym">: (</span>
      OrderedCollection new
         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$a</span> value<span class="sym">:</span> <span class="num">0.3029549426680</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$c</span> value<span class="sym">:</span> <span class="num">0.1979883004921</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$g</span> value<span class="sym">:</span> <span class="num">0.1975473066391</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$t</span> value<span class="sym">:</span> <span class="num">0.3015094502008</span><span class="sym">);</span>
         yourself <span class="sym">))</span> random<span class="sym">:</span> r<span class="sym">)</span>.

s flush<span class="sym">;</span> close <span class="sym">!</span>
