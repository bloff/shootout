\ The Great Computer Language Shootout
\ http<span class="sym">:</span><span class="slc">//shootout.alioth.debian.org/</span>
\ contributed by Ian Osgood
\ modified by Bernd Paysan
\ use option <span class="str">&quot;-d 32M&quot;</span> to have enough memory to run <span class="kwa">this</span> program

<span class="sym">:</span> mem<span class="sym">,</span>
  here over allot swap move <span class="sym">;</span>

\ complement mappings
create map s<span class="str">&quot; TVGHefCDijMlKNopqYSAABWxRz&quot;</span> mem<span class="sym">,</span>

<span class="sym">:</span> map<span class="sym">-</span><span class="kwd">c</span> <span class="sym">(</span> c <span class="sym">--</span> comp <span class="sym">)</span> <span class="num">32</span> <span class="kwa">or</span> <span class="str">'a - map + c&#64; ;</span>
<span class="str"></span>
<span class="str">60 constant line-len</span>
<span class="str">128 constant lines</span>
<span class="str">line-len 1+ lines * Constant buf-size</span>
<span class="str"></span>
<span class="str"></span><span class="esc">\ </span><span class="str">data arrays</span>
<span class="str">Variable linebuf buf-size allot</span>
<span class="str"></span>
<span class="str">: flush, linebuf &#64;+ swap type linebuf off ;</span>
<span class="str">: emit, ( char -- )  linebuf &#64;+ + c!  1 linebuf +! ;</span>
<span class="str">: cr,  #lf emit, linebuf &#64; buf-size = IF</span>
<span class="str">	flush,</span>
<span class="str">    THEN ;</span>
<span class="str"></span>
<span class="str">: rev-comp ( end -- start ) line-len</span>
<span class="str">  begin  over pad u&gt;</span>
<span class="str">  while  swap 1- dup c&#64; map-c emit,</span>
<span class="str">         swap 1- dup 0= if cr, line-len + then</span>
<span class="str">  repeat line-len &lt; if cr, then flush, ;</span>
<span class="str"></span>
<span class="str">: main   pad ( end )</span>
<span class="str">  begin  dup 80 stdin read-line throw</span>
<span class="str">  while  over c&#64; '</span><span class="sym">&gt; =</span>
         <span class="kwa">if</span>   over  rev<span class="sym">-</span>comp  <span class="sym">-</span>rot type cr
         <span class="kwa">else</span> <span class="sym">+</span> then
  repeat drop rev<span class="sym">-</span>comp drop <span class="sym">;</span>

main bye  \ done<span class="sym">!</span>

