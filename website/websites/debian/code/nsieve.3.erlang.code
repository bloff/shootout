<span class="slc">%   The Computer Language Benchmarks Game</span>
<span class="slc">%   http://shootout.alioth.debian.org/</span>
<span class="slc">%</span>
<span class="slc">%   contributed by Jiri Isa</span>

<span class="sym">-</span><span class="kwa">module</span><span class="sym">(</span>nsieve<span class="sym">).</span>
<span class="sym">-</span><span class="kwa">export</span><span class="sym">([</span>main<span class="sym">/</span><span class="num">1</span><span class="sym">]).</span>

<span class="kwd">main</span><span class="sym">([</span>Arg<span class="sym">]) -&gt;</span>
   N <span class="sym">=</span> <span class="kwb">list_to_integer</span><span class="sym">(</span>Arg<span class="sym">),</span>
   <span class="kwd">start</span><span class="sym">(</span>N<span class="sym">),</span>
   erlang<span class="sym">:</span><span class="kwb">halt</span><span class="sym">(</span><span class="num">0</span><span class="sym">).</span>

<span class="kwd">start</span><span class="sym">(</span>N<span class="sym">) -&gt;</span>
   <span class="kwd">ns</span><span class="sym">(</span>N<span class="sym">),</span>
   <span class="kwd">ns</span><span class="sym">(</span>N<span class="sym">-</span><span class="num">1</span><span class="sym">),</span>
   <span class="kwd">ns</span><span class="sym">(</span>N<span class="sym">-</span><span class="num">2</span><span class="sym">).</span>


<span class="kwd">ns</span><span class="sym">(</span>N<span class="sym">) -&gt;</span>
   M <span class="sym">= (</span><span class="num">1</span> <span class="kwa">bsl</span> N<span class="sym">) *</span> <span class="num">10000</span><span class="sym">,</span>
   Array <span class="sym">=</span> hipe_bifs<span class="sym">:</span><span class="kwd">bytearray</span><span class="sym">(</span>M <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">),</span>
   Count <span class="sym">=</span> <span class="kwd">ns</span><span class="sym">(</span><span class="num">2</span><span class="sym">,</span> M<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> Array<span class="sym">),</span>
   io<span class="sym">:</span><span class="kwd">fwrite</span><span class="sym">(</span><span class="str">&quot;Primes up to ~8.10b ~8.10b~n&quot;</span><span class="sym">, [</span>M<span class="sym">,</span> Count<span class="sym">]).</span>

<span class="kwd">ns</span><span class="sym">(</span>Start<span class="sym">,</span> Start<span class="sym">,</span> Count<span class="sym">,</span> _<span class="sym">) -&gt;</span> Count<span class="sym">;</span>
<span class="kwd">ns</span><span class="sym">(</span>Start<span class="sym">,</span> M<span class="sym">,</span> Count<span class="sym">,</span> Array<span class="sym">) -&gt;</span>
   <span class="kwa">case</span> hipe_bifs<span class="sym">:</span><span class="kwd">bytearray_sub</span><span class="sym">(</span>Array<span class="sym">,</span> Start<span class="sym">)</span> <span class="kwa">of</span>
      <span class="num">0</span> <span class="sym">-&gt;</span>
         <span class="kwd">ns</span><span class="sym">(</span>Start <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> M<span class="sym">,</span> Count<span class="sym">,</span> Array<span class="sym">);</span>
      <span class="num">1</span> <span class="sym">-&gt;</span>
         <span class="kwd">mark</span><span class="sym">(</span>Start <span class="sym">+</span> Start<span class="sym">,</span> Start<span class="sym">,</span> M<span class="sym">,</span> Array<span class="sym">),</span>
         <span class="kwd">ns</span><span class="sym">(</span>Start <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> M<span class="sym">,</span> Count <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> Array<span class="sym">)</span>
   <span class="kwa">end</span><span class="sym">.</span>

<span class="kwd">mark</span><span class="sym">(</span>Start<span class="sym">,</span> _<span class="sym">,</span> M<span class="sym">,</span> _<span class="sym">)</span> <span class="kwa">when</span> Start <span class="sym">&gt;</span> M <span class="sym">-&gt;</span> ok<span class="sym">;</span>
<span class="kwd">mark</span><span class="sym">(</span>Start<span class="sym">,</span> Step<span class="sym">,</span> M<span class="sym">,</span> Array<span class="sym">) -&gt;</span>
   hipe_bifs<span class="sym">:</span><span class="kwd">bytearray_update</span><span class="sym">(</span>Array<span class="sym">,</span> Start<span class="sym">,</span> <span class="num">0</span><span class="sym">),</span>
   <span class="kwd">mark</span><span class="sym">(</span>Start <span class="sym">+</span> Step<span class="sym">,</span> Step<span class="sym">,</span> M<span class="sym">,</span> Array<span class="sym">).</span>

