<span class="slc">#  The Computer Language Benchmarks Game</span>
<span class="slc">#  http://shootout.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc">#  contributed by Karl von Laudermann</span>
<span class="slc">#  modified by Jeremy Echols</span>
<span class="slc">#  modified by Detlef Reichl</span>

size = <span class="kwc">ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">].</span>to_i

puts <span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">#{size} #{size}&quot;</span>

ITER = <span class="num">50</span>                           <span class="slc"># Iterations</span>
LIMIT_SQUARED = <span class="num">4.0</span>                 <span class="slc"># Presquared limit</span>

byte_acc = <span class="num">0</span>
bit_num = <span class="num">0</span>

count_size = size <span class="sym">-</span> <span class="num">1</span>               <span class="slc"># Precomputed size for easy for..in looping</span>

<span class="slc"># For..in loops are faster than .upto, .downto, .times, etc.</span>
<span class="slc"># That's not true, but left it here</span>
<span class="kwa">for</span> y <span class="kwa">in</span> <span class="num">0</span><span class="sym">..</span>count_size
  <span class="kwa">for</span> x <span class="kwa">in</span> <span class="num">0</span><span class="sym">..</span>count_size
    zr = <span class="num">0.0</span>
    zi = <span class="num">0.0</span>
    cr = <span class="sym">(</span><span class="num">2.0</span><span class="sym">*</span>x<span class="sym">/</span>size)<span class="sym">-</span><span class="num">1.5</span>
    ci = <span class="sym">(</span><span class="num">2.0</span><span class="sym">*</span>y<span class="sym">/</span>size)<span class="sym">-</span><span class="num">1.0</span>
    escape = <span class="kwa">false</span>

    zrzr = zr<span class="sym">*</span>zr
    zizi = zi<span class="sym">*</span>zi
    ITER<span class="sym">.</span>times <span class="kwa">do</span>
      tr = zrzr <span class="sym">-</span> zizi <span class="sym">+</span> cr
      ti = <span class="num">2.0</span><span class="sym">*</span>zr<span class="sym">*</span>zi <span class="sym">+</span> ci
      zr = tr
      zi = ti
      <span class="slc"># preserve recalculation</span>
      zrzr = zr<span class="sym">*</span>zr
      zizi = zi<span class="sym">*</span>zi
      <span class="kwa">if</span> zrzr<span class="sym">+</span>zizi <span class="sym">&gt;</span> LIMIT_SQUARED
        escape = <span class="kwa">true</span>
        <span class="kwa">break</span>
      <span class="kwa">end</span>
    <span class="kwa">end</span>

    byte_acc = <span class="sym">(</span>byte_acc <span class="sym">&lt;&lt;</span> <span class="num">1</span>) <span class="sym">| (</span>escape ? <span class="num">0b0</span> <span class="sym">:</span> <span class="num">0b1</span>)
    bit_num <span class="sym">+</span>= <span class="num">1</span>

    <span class="slc"># Code is very similar for these cases, but using separate blocks</span>
    <span class="slc"># ensures we skip the shifting when it's unnecessary, which is most cases.</span>
    <span class="kwa">if</span> <span class="sym">(</span>bit_num == <span class="num">8</span>)
      print byte_acc<span class="sym">.</span>chr
      byte_acc = <span class="num">0</span>
      bit_num = <span class="num">0</span>
    <span class="kwa">elsif</span> <span class="sym">(</span>x == count_size)
      byte_acc <span class="sym">&lt;&lt;</span>= <span class="sym">(</span><span class="num">8</span> <span class="sym">-</span> bit_num)
      print byte_acc<span class="sym">.</span>chr
      byte_acc = <span class="num">0</span>
      bit_num = <span class="num">0</span>
    <span class="kwa">end</span>
  <span class="kwa">end</span>
<span class="kwa">end</span>

