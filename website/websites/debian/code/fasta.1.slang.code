<span class="dir">#!/usr/bin/env slsh</span>
<span class="sym">%</span> The Computer Language Shootout Benchmarks
<span class="sym">%</span> http<span class="sym">:</span><span class="slc">//shootout.alioth.debian.org/</span>
<span class="sym">%</span>
<span class="sym">%</span> contributed by John E<span class="sym">.</span> Davis

<span class="kwc">private</span> variable IM <span class="sym">=</span> <span class="num">139968</span><span class="sym">;</span>
<span class="kwc">private</span> variable IA <span class="sym">=</span> <span class="num">3877</span><span class="sym">;</span>
<span class="kwc">private</span> variable IC <span class="sym">=</span> <span class="num">29573</span><span class="sym">;</span>
<span class="kwc">private</span> variable Last <span class="sym">=</span> <span class="num">42</span><span class="sym">;</span>

<span class="kwc">private</span> define <span class="kwd">random</span> <span class="sym">(</span>max<span class="sym">)</span>
<span class="sym">{</span>
   Last <span class="sym">= (</span>Last <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">)</span> mod IM<span class="sym">;</span>
   <span class="sym">(</span>max <span class="sym">*</span> Last<span class="sym">) /</span> IM<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwc">private</span> define <span class="kwd">select_random</span> <span class="sym">(</span>table<span class="sym">,</span> n<span class="sym">)</span>
<span class="sym">{</span>
   variable p <span class="sym">=</span> table<span class="sym">.</span>prob<span class="sym">;</span>
   variable np <span class="sym">=</span> <span class="kwd">length</span> <span class="sym">(</span>p<span class="sym">);</span>
   variable ch <span class="sym">=</span> table<span class="sym">.</span>ch<span class="sym">;</span>
   variable a <span class="sym">=</span> Char_Type<span class="sym">[</span>n<span class="sym">];</span>
   variable p0 <span class="sym">=</span> p<span class="sym">[</span><span class="num">0</span><span class="sym">],</span> ch0 <span class="sym">=</span> ch<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
   <span class="kwd">_for</span> <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> n<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)</span>
     <span class="sym">{</span>
	variable i <span class="sym">= ();</span>
	variable r <span class="sym">=</span> <span class="kwd">random</span> <span class="sym">(</span><span class="num">1.0</span><span class="sym">);</span>
	<span class="kwa">if</span> <span class="sym">(</span>r <span class="sym">&lt;</span> p0<span class="sym">)</span>
	  <span class="sym">{</span>
	     a<span class="sym">[</span>i<span class="sym">] =</span> ch0<span class="sym">;</span>
	     <span class="kwa">continue</span><span class="sym">;</span>
	  <span class="sym">}</span>
	a<span class="sym">[</span>i<span class="sym">] =</span> ch<span class="sym">[</span><span class="kwd">wherefirst</span><span class="sym">(</span>r <span class="sym">&lt;</span> p<span class="sym">)];</span>
     <span class="sym">}</span>
   <span class="kwa">return</span> a<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwc">private</span> define <span class="kwd">make_random_fasta</span> <span class="sym">(</span>id<span class="sym">,</span> desc<span class="sym">,</span> table<span class="sym">,</span> n<span class="sym">)</span>
<span class="sym">{</span>
   <span class="sym">() =</span> <span class="kwd">fprintf</span> <span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;&gt;%s %s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> id<span class="sym">,</span> desc<span class="sym">);</span>
   variable width <span class="sym">=</span> <span class="num">60</span><span class="sym">;</span>
   variable todo <span class="sym">=</span> n<span class="sym">;</span>
   <span class="kwa">while</span> <span class="sym">(</span>todo <span class="sym">&gt;=</span> width<span class="sym">)</span>
     <span class="sym">{</span>
	<span class="sym">() =</span> <span class="kwd">fwrite</span> <span class="sym">(</span><span class="kwd">select_random</span> <span class="sym">(</span>table<span class="sym">,</span> width<span class="sym">),</span> stdout<span class="sym">);</span>
	<span class="sym">() =</span> <span class="kwd">fputs</span> <span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> stdout<span class="sym">);</span>
	todo <span class="sym">-=</span> width<span class="sym">;</span>
     <span class="sym">}</span>
   <span class="kwa">if</span> <span class="sym">(</span>todo<span class="sym">)</span>
     <span class="sym">{</span>
	<span class="sym">() =</span> <span class="kwd">fwrite</span> <span class="sym">(</span><span class="kwd">select_random</span> <span class="sym">(</span>table<span class="sym">,</span> todo<span class="sym">),</span> stdout<span class="sym">);</span>
	<span class="sym">() =</span> <span class="kwd">fputs</span> <span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> stdout<span class="sym">);</span>
     <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwc">private</span> define <span class="kwd">make_repeat_fasta</span> <span class="sym">(</span>id<span class="sym">,</span> desc<span class="sym">,</span> s<span class="sym">,</span> n<span class="sym">)</span>
<span class="sym">{</span>
   <span class="sym">() =</span> <span class="kwd">fprintf</span> <span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;&gt;%s %s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> id<span class="sym">,</span> desc<span class="sym">);</span>
   variable width <span class="sym">=</span> <span class="num">60</span><span class="sym">;</span>
   variable todo <span class="sym">=</span> n<span class="sym">;</span>
   variable len <span class="sym">=</span> <span class="kwd">strlen</span> <span class="sym">(</span>s<span class="sym">);</span>

   variable i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="kwa">while</span> <span class="sym">(</span>todo<span class="sym">)</span>
     <span class="sym">{</span>
	variable w <span class="sym">=</span> width<span class="sym">;</span>
	<span class="kwa">if</span> <span class="sym">(</span>w <span class="sym">&gt;</span> todo<span class="sym">)</span> w <span class="sym">=</span> todo<span class="sym">;</span>
	variable dlen <span class="sym">=</span> len <span class="sym">-</span> i<span class="sym">;</span>
	<span class="kwa">if</span> <span class="sym">(</span>w <span class="sym">&gt;</span> dlen<span class="sym">)</span>
	  <span class="sym">{</span>
	     <span class="sym">()=</span><span class="kwd">fputs</span> <span class="sym">(</span><span class="kwd">substr</span> <span class="sym">(</span>s<span class="sym">,</span> i<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> dlen<span class="sym">),</span> stdout<span class="sym">);</span>
	     w <span class="sym">-=</span> dlen<span class="sym">;</span>
	     todo <span class="sym">-=</span> dlen<span class="sym">;</span>
	     i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
	  <span class="sym">}</span>

	<span class="sym">() =</span> <span class="kwd">fputs</span> <span class="sym">(</span><span class="kwd">substr</span><span class="sym">(</span>s<span class="sym">,</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">,</span>w<span class="sym">),</span>stdout<span class="sym">);</span>
	i <span class="sym">+=</span> w<span class="sym">;</span>
	<span class="sym">() =</span> <span class="kwd">fputs</span> <span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> stdout<span class="sym">);</span>
	todo <span class="sym">-=</span> w<span class="sym">;</span>
     <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwc">private</span> define <span class="kwd">make_table</span> <span class="sym">()</span>
<span class="sym">{</span>
   variable n <span class="sym">=</span> _NARGS<span class="sym">/</span><span class="num">2</span><span class="sym">;</span>
   variable t <span class="sym">=</span> <span class="kwb">struct</span>
     <span class="sym">{</span>
	ch<span class="sym">,</span> prob
     <span class="sym">};</span>
   t<span class="sym">.</span>ch <span class="sym">=</span> Char_Type<span class="sym">[</span>n<span class="sym">];</span>
   t<span class="sym">.</span>prob <span class="sym">=</span> Double_Type<span class="sym">[</span>n<span class="sym">];</span>
   <span class="kwd">_for</span> <span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> <span class="num">0</span><span class="sym">, -</span><span class="num">1</span><span class="sym">)</span>
     <span class="sym">{</span>
	variable i <span class="sym">= ();</span>
	t<span class="sym">.</span>prob<span class="sym">[</span>i<span class="sym">] = ();</span>
	t<span class="sym">.</span>ch<span class="sym">[</span>i<span class="sym">] = ();</span>
     <span class="sym">}</span>
   t<span class="sym">.</span>prob <span class="sym">=</span> <span class="kwd">cumsum</span> <span class="sym">(</span>t<span class="sym">.</span>prob<span class="sym">);</span>
   <span class="kwa">return</span> t<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwc">private</span> variable IUB <span class="sym">=</span>
  <span class="kwd">make_table</span> <span class="sym">((</span><span class="str">'a'</span><span class="sym">,</span> <span class="num">0.27</span><span class="sym">), (</span><span class="str">'c'</span><span class="sym">,</span> <span class="num">0.12</span><span class="sym">), (</span><span class="str">'g'</span><span class="sym">,</span> <span class="num">0.12</span><span class="sym">), (</span><span class="str">'t'</span><span class="sym">,</span> <span class="num">0.27</span><span class="sym">),</span>
	      <span class="sym">(</span><span class="str">'B'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">), (</span><span class="str">'D'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">), (</span><span class="str">'H'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">), (</span><span class="str">'K'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span>
	      <span class="sym">(</span><span class="str">'M'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">), (</span><span class="str">'N'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">), (</span><span class="str">'R'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">), (</span><span class="str">'S'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span>
	      <span class="sym">(</span><span class="str">'V'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">), (</span><span class="str">'W'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">), (</span><span class="str">'Y'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">));</span>
<span class="kwc">private</span> variable Homosapiens <span class="sym">=</span>
  <span class="kwd">make_table</span> <span class="sym">((</span><span class="str">'a'</span><span class="sym">,</span> <span class="num">0.3029549426680</span><span class="sym">), (</span><span class="str">'c'</span><span class="sym">,</span> <span class="num">0.1979883004921</span><span class="sym">),</span>
	      <span class="sym">(</span><span class="str">'g'</span><span class="sym">,</span> <span class="num">0.1975473066391</span><span class="sym">), (</span><span class="str">'t'</span><span class="sym">,</span> <span class="num">0.3015094502008</span><span class="sym">));</span>

<span class="kwc">private</span> variable ALU <span class="sym">=</span>
   <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span> <span class="sym">+</span>
   <span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span> <span class="sym">+</span>
   <span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span> <span class="sym">+</span>
   <span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span> <span class="sym">+</span>
   <span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span> <span class="sym">+</span>
   <span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span> <span class="sym">+</span>
   <span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="sym">;</span>

define <span class="kwd">slsh_main</span> <span class="sym">()</span>
<span class="sym">{</span>
   variable n <span class="sym">=</span> <span class="num">1000</span><span class="sym">;</span>
   <span class="kwa">if</span> <span class="sym">(</span>__argc <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">)</span> n <span class="sym">=</span> <span class="kwd">integer</span> <span class="sym">(</span>__argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span>
   <span class="kwd">make_repeat_fasta</span> <span class="sym">(</span><span class="str">&quot;ONE&quot;</span><span class="sym">,</span><span class="str">&quot;Homo sapiens alu&quot;</span><span class="sym">,</span>ALU<span class="sym">,</span>n<span class="sym">*</span><span class="num">2</span><span class="sym">);</span>
   <span class="kwd">make_random_fasta</span> <span class="sym">(</span><span class="str">&quot;TWO&quot;</span><span class="sym">,</span> <span class="str">&quot;IUB ambiguity codes&quot;</span><span class="sym">,</span>IUB<span class="sym">,</span>n<span class="sym">*</span><span class="num">3</span><span class="sym">);</span>
   <span class="kwd">make_random_fasta</span> <span class="sym">(</span><span class="str">&quot;THREE&quot;</span><span class="sym">,</span><span class="str">&quot;Homo sapiens frequency&quot;</span><span class="sym">,</span>Homosapiens<span class="sym">,</span>n<span class="sym">*</span><span class="num">5</span><span class="sym">);</span>
<span class="sym">}</span>
