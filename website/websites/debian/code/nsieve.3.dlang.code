<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   Written by Dave Fladebo</span>
<span class="com">   Compile with: dmd -O -inline -release nsieve.d</span>
<span class="com">*/</span>

<span class="kwa">import</span> std<span class="sym">.</span>stdio<span class="sym">,</span> std<span class="sym">.</span>string<span class="sym">;</span>

<span class="kwa">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwa">char</span><span class="sym">[][]</span> args<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">int</span> n <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">1</span> ? <span class="kwd">atoi</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">;</span>

    <span class="kwa">for</span><span class="sym">(</span><span class="kwa">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> <span class="num">3</span><span class="sym">;</span> i<span class="sym">++)</span>
    <span class="sym">{</span>
        <span class="kwa">int</span> m <span class="sym">=</span> <span class="num">10000</span> <span class="sym">&lt;&lt; (</span>n<span class="sym">-</span>i<span class="sym">);</span>
        <span class="kwd">writefln</span><span class="sym">(</span><span class="str">&quot;Primes up to %8d %8d&quot;</span><span class="sym">,</span> m<span class="sym">,</span> <span class="kwd">nsieve</span><span class="sym">(</span>m<span class="sym">));</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">int</span> <span class="kwd">nsieve</span><span class="sym">(</span><span class="kwa">int</span> m<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">typedef</span> bool tbool <span class="sym">=</span> <span class="kwa">true</span><span class="sym">;</span>
    bool<span class="sym">[]</span> isPrime <span class="sym">=</span> <span class="kwa">cast</span><span class="sym">(</span>bool<span class="sym">[])</span><span class="kwa">new</span> tbool<span class="sym">[</span>m<span class="sym">];</span>
    <span class="kwa">int</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

    <span class="kwa">for</span><span class="sym">(</span><span class="kwa">int</span> i <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span> i <span class="sym">&lt;</span> isPrime<span class="sym">.</span>length<span class="sym">;</span> i<span class="sym">++)</span>
    <span class="sym">{</span>
        <span class="kwa">if</span><span class="sym">(</span>isPrime<span class="sym">[</span>i<span class="sym">])</span>
        <span class="sym">{</span>
            count<span class="sym">++;</span>
            <span class="kwa">for</span><span class="sym">(</span><span class="kwa">int</span> k <span class="sym">=</span> i <span class="sym">*</span> <span class="num">2</span><span class="sym">;</span> k <span class="sym">&lt;</span> isPrime<span class="sym">.</span>length<span class="sym">;</span> k <span class="sym">+=</span> i<span class="sym">)</span>
                isPrime<span class="sym">[</span>k<span class="sym">] =</span> <span class="kwa">false</span><span class="sym">;</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">return</span> count<span class="sym">;</span>
<span class="sym">}</span>
