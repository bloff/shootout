<span class="com">/**</span>
<span class="com"> * The Computer Language Benchmarks Game</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> * contributed by Klaus Friedel</span>
<span class="com"> */</span>

<span class="kwa">import</span> java<span class="sym">.</span>util<span class="sym">.</span>concurrent<span class="sym">.*;</span>

<span class="kwa">public class</span> threadring <span class="sym">{</span>
  <span class="kwa">static final</span> <span class="kwb">int</span> THREAD_COUNT <span class="sym">=</span> <span class="num">503</span><span class="sym">;</span>

  <span class="kwa">public static class</span> MessageThread <span class="kwa">extends</span> <span class="kwc">Thread</span> <span class="sym">{</span>
    MessageThread nextThread<span class="sym">;</span>
    <span class="kwc">BlockingQueue</span><span class="sym">&lt;</span><span class="kwc">Integer</span><span class="sym">&gt;</span> queue <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">ArrayBlockingQueue</span><span class="sym">&lt;</span><span class="kwc">Integer</span><span class="sym">&gt;(</span><span class="num">1</span><span class="sym">);</span>

    <span class="kwa">public</span> <span class="kwd">MessageThread</span><span class="sym">(</span>MessageThread nextThread<span class="sym">,</span> <span class="kwb">int</span> name<span class="sym">) {</span>
      <span class="kwa">super</span><span class="sym">(</span><span class="str">&quot;&quot;</span><span class="sym">+</span>name<span class="sym">);</span>
      <span class="kwa">this</span><span class="sym">.</span>nextThread <span class="sym">=</span> nextThread<span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">public</span> <span class="kwb">void</span> <span class="kwd">run</span><span class="sym">() {</span>
      <span class="kwa">try</span> <span class="sym">{</span>
        <span class="kwa">while</span><span class="sym">(</span>true<span class="sym">)</span> nextThread<span class="sym">.</span><span class="kwd">enqueue</span><span class="sym">(</span><span class="kwd">dequeue</span><span class="sym">());</span>
      <span class="sym">}</span> <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">InterruptedException</span> e<span class="sym">) {</span>
        <span class="kwa">if</span><span class="sym">(!</span> nextThread<span class="sym">.</span><span class="kwd">isInterrupted</span><span class="sym">())</span> nextThread<span class="sym">.</span><span class="kwd">interrupt</span><span class="sym">();</span>
      <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">public</span> <span class="kwb">void</span> <span class="kwd">enqueue</span><span class="sym">(</span><span class="kwc">Integer</span> hopsRemaining<span class="sym">)</span> <span class="kwa">throws</span> <span class="kwc">InterruptedException</span> <span class="sym">{</span>
      <span class="kwa">if</span><span class="sym">(</span>hopsRemaining <span class="sym">==</span> <span class="num">0</span><span class="sym">){</span>
        <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">println</span><span class="sym">(</span><span class="kwd">getName</span><span class="sym">());</span>
        <span class="kwa">throw new</span> <span class="kwc">InterruptedException</span><span class="sym">(</span><span class="str">&quot;This is the end..&quot;</span><span class="sym">);</span>
      <span class="sym">}</span>
      queue<span class="sym">.</span><span class="kwd">put</span><span class="sym">(</span>hopsRemaining <span class="sym">-</span> <span class="num">1</span><span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwa">public</span> <span class="kwc">Integer</span> <span class="kwd">dequeue</span><span class="sym">()</span> <span class="kwa">throws</span> <span class="kwc">InterruptedException</span> <span class="sym">{</span>
      <span class="kwa">return</span> queue<span class="sym">.</span><span class="kwd">take</span><span class="sym">();</span>
    <span class="sym">}</span>
  <span class="sym">}</span>

  <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwc">String</span> args<span class="sym">[])</span> <span class="kwa">throws</span> <span class="kwc">Exception</span><span class="sym">{</span>
    <span class="kwb">int</span> hopCount <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span><span class="kwd">parseInt</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>

    MessageThread thread <span class="sym">=</span> null<span class="sym">;</span>
    MessageThread last <span class="sym">=</span> null<span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> THREAD_COUNT<span class="sym">;</span> i <span class="sym">&gt;=</span> <span class="num">1</span> <span class="sym">;</span> i<span class="sym">--) {</span>
      thread <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">MessageThread</span><span class="sym">(</span>thread<span class="sym">,</span> i<span class="sym">);</span>
      <span class="kwa">if</span><span class="sym">(</span>i <span class="sym">==</span> THREAD_COUNT<span class="sym">)</span> last <span class="sym">=</span> thread<span class="sym">;</span>
    <span class="sym">}</span>
    <span class="slc">// close the ring:</span>
    last<span class="sym">.</span>nextThread <span class="sym">=</span> thread<span class="sym">;</span>

    <span class="slc">// start all Threads</span>
    MessageThread t <span class="sym">=</span> thread<span class="sym">;</span>
    <span class="kwa">do</span><span class="sym">{</span>
      t<span class="sym">.</span><span class="kwd">start</span><span class="sym">();</span>
      t <span class="sym">=</span> t<span class="sym">.</span>nextThread<span class="sym">;</span>
    <span class="sym">}</span><span class="kwa">while</span><span class="sym">(</span>t <span class="sym">!=</span> thread<span class="sym">);</span>
    <span class="slc">// inject message</span>
    thread<span class="sym">.</span><span class="kwd">enqueue</span><span class="sym">(</span>hopCount<span class="sym">);</span>
    <span class="slc">// wait until end</span>
    MessageThread t2 <span class="sym">=</span> thread<span class="sym">;</span>
    <span class="kwa">do</span><span class="sym">{</span>
      t2<span class="sym">.</span><span class="kwd">join</span><span class="sym">();</span>
      t2 <span class="sym">=</span> t2<span class="sym">.</span>nextThread<span class="sym">;</span>
    <span class="sym">}</span><span class="kwa">while</span><span class="sym">(</span>t2 <span class="sym">!=</span> thread<span class="sym">);</span>
  <span class="sym">}</span>
<span class="sym">}</span>
