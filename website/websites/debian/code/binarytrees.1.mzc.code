<span class="slc">;;; The Great Computer Language Shootout</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;; Derived from the Chicken variant by Sven Hartrumpf</span>

<span class="sym">(</span>module binarytrees mzscheme

  <span class="sym">(</span>define<span class="sym">-</span>struct node <span class="sym">(</span>left val right<span class="sym">))</span>
  <span class="sym">(</span>define<span class="sym">-</span>struct leaf <span class="sym">(</span>val<span class="sym">))</span>

  <span class="sym">(</span>define <span class="sym">(</span>make item d<span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(=</span> d <span class="num">0</span><span class="sym">)</span>
	<span class="sym">(</span>make<span class="sym">-</span>leaf item<span class="sym">)</span>
	<span class="sym">(</span>let <span class="sym">((</span>item2 <span class="sym">(*</span> item <span class="num">2</span><span class="sym">))</span>
	      <span class="sym">(</span>d2 <span class="sym">(-</span> d <span class="num">1</span><span class="sym">)))</span>
	  <span class="sym">(</span>make<span class="sym">-</span>node <span class="sym">(</span>make <span class="sym">(-</span> item2 <span class="num">1</span><span class="sym">)</span> d2<span class="sym">)</span> item <span class="sym">(</span>make item2 d2<span class="sym">)))))</span>

  <span class="sym">(</span>define <span class="sym">(</span>check t<span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>leaf? t<span class="sym">)</span>
	<span class="sym">(</span>leaf<span class="sym">-</span>val t<span class="sym">)</span>
	<span class="sym">(+ (</span>node<span class="sym">-</span>val t<span class="sym">) (- (</span>check <span class="sym">(</span>node<span class="sym">-</span>left t<span class="sym">)) (</span>check <span class="sym">(</span>node<span class="sym">-</span>right t<span class="sym">))))))</span>

  <span class="sym">(</span>define <span class="sym">(</span>main argv<span class="sym">)</span>
    <span class="sym">(</span>let<span class="sym">* ((</span><span class="kwa">min</span><span class="sym">-</span>depth <span class="num">4</span><span class="sym">)</span>
	   <span class="sym">(</span><span class="kwa">max</span><span class="sym">-</span>depth <span class="sym">(</span><span class="kwa">max</span> <span class="sym">(+</span> <span class="kwa">min</span><span class="sym">-</span>depth <span class="num">2</span><span class="sym">) (</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span>vector<span class="sym">-</span>ref argv <span class="num">0</span><span class="sym">)))))</span>
      <span class="sym">(</span>let <span class="sym">((</span>stretch<span class="sym">-</span>depth <span class="sym">(+</span> <span class="kwa">max</span><span class="sym">-</span>depth <span class="num">1</span><span class="sym">)))</span>
	<span class="sym">(</span>printf <span class="str">&quot;stretch tree of depth ~a</span><span class="esc">\t</span><span class="str">check: ~a</span><span class="esc">\n</span><span class="str">&quot;</span>
		stretch<span class="sym">-</span>depth
		<span class="sym">(</span>check <span class="sym">(</span>make <span class="num">0</span> stretch<span class="sym">-</span>depth<span class="sym">))))</span>
      <span class="sym">(</span>let <span class="sym">((</span>long<span class="sym">-</span>lived<span class="sym">-</span>tree <span class="sym">(</span>make <span class="num">0</span> <span class="kwa">max</span><span class="sym">-</span>depth<span class="sym">)))</span>
	<span class="sym">(</span>do <span class="sym">((</span>d <span class="num">4</span> <span class="sym">(+</span> d <span class="num">2</span><span class="sym">))</span>
	     <span class="sym">(</span>c <span class="num">0 0</span><span class="sym">))</span>
	    <span class="sym">((&gt;</span> d <span class="kwa">max</span><span class="sym">-</span>depth<span class="sym">))</span>
	  <span class="sym">(</span>let <span class="sym">((</span>iterations <span class="sym">(</span>arithmetic<span class="sym">-</span>shift <span class="num">1</span> <span class="sym">(+ (-</span> <span class="kwa">max</span><span class="sym">-</span>depth d<span class="sym">)</span> <span class="kwa">min</span><span class="sym">-</span>depth<span class="sym">))))</span>
	    <span class="sym">(</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))</span>
		<span class="sym">((&gt;=</span> i iterations<span class="sym">))</span>
	      <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> c <span class="sym">(+</span> c <span class="sym">(</span>check <span class="sym">(</span>make i d<span class="sym">)) (</span>check <span class="sym">(</span>make <span class="sym">(-</span> i<span class="sym">)</span> d<span class="sym">)))))</span>
	    <span class="sym">(</span>printf <span class="str">&quot;~a</span><span class="esc">\t</span> <span class="str">trees of depth ~a</span><span class="esc">\t</span> <span class="str">check: ~a</span><span class="esc">\n</span><span class="str">&quot;</span>
		    <span class="sym">(*</span> <span class="num">2</span> iterations<span class="sym">)</span>
		    d
		    c<span class="sym">)))</span>
	<span class="sym">(</span>printf <span class="str">&quot;long lived tree of depth ~a</span><span class="esc">\t</span> <span class="str">check: ~a</span><span class="esc">\n</span><span class="str">&quot;</span>
		<span class="kwa">max</span><span class="sym">-</span>depth
		<span class="sym">(</span>check long<span class="sym">-</span>lived<span class="sym">-</span>tree<span class="sym">)))))</span>

  <span class="sym">(</span>main <span class="sym">(</span>current<span class="sym">-</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">)))</span>
