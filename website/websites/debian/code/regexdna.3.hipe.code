<span class="slc">% The Computer Language Benchmarks Game</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">% Contributed by: Sergei Matusevich 2007</span>

<span class="sym">-</span><span class="kwa">module</span><span class="sym">(</span>regexdna<span class="sym">).</span>

<span class="sym">-</span><span class="kwa">export</span><span class="sym">([</span>main<span class="sym">/</span><span class="num">1</span><span class="sym">]).</span>

<span class="sym">-</span><span class="kwa">define</span><span class="sym">(</span> VARIANTS<span class="sym">,</span>
  <span class="sym">[</span> <span class="str">&quot;agggtaaa|tttaccct&quot;</span><span class="sym">,</span>
    <span class="str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="sym">,</span>
    <span class="str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="sym">,</span>
    <span class="str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="sym">,</span>
    <span class="str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="sym">,</span>
    <span class="str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="sym">,</span>
    <span class="str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="sym">,</span>
    <span class="str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="sym">,</span>
    <span class="str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span> <span class="sym">] ).</span>

<span class="kwd">read_lines</span><span class="sym">(</span>File<span class="sym">,</span> SzTotal<span class="sym">, [</span>Seg<span class="sym">|</span>Segz<span class="sym">]) -&gt;</span>
  <span class="kwa">case</span> io<span class="sym">:</span><span class="kwd">get_line</span><span class="sym">(</span>File<span class="sym">,</span> <span class="str">''</span><span class="sym">)</span> <span class="kwa">of</span>
    eof <span class="sym">-&gt; {</span>SzTotal<span class="sym">, [</span>Seg<span class="sym">|</span>Segz<span class="sym">]};</span>
    Str <span class="sym">-&gt;</span>
      Len <span class="sym">=</span> <span class="kwb">size</span><span class="sym">(</span>Str<span class="sym">),</span>
      Eol <span class="sym">=</span> Len <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span>
      <span class="kwd">read_lines</span><span class="sym">(</span> File<span class="sym">,</span> SzTotal <span class="sym">+</span> Len<span class="sym">,</span>
        <span class="kwa">case</span> Str <span class="kwa">of</span>
          <span class="sym">&lt;&lt;</span><span class="str">&quot;&gt;&quot;</span><span class="sym">,</span>_<span class="sym">/</span><span class="kwb">binary</span><span class="sym">&gt;&gt;         -&gt;     [[],</span>Seg<span class="sym">|</span>Segz<span class="sym">];</span>
          <span class="sym">&lt;&lt;</span>Trim<span class="sym">:</span>Eol<span class="sym">/</span><span class="kwb">binary</span><span class="sym">,</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">&gt;&gt; -&gt; [[</span>Trim<span class="sym">|</span>Seg<span class="sym">]|</span>Segz<span class="sym">];</span>
          _                        <span class="sym">-&gt;  [[</span>Str<span class="sym">|</span>Seg<span class="sym">]|</span>Segz<span class="sym">]</span>
        <span class="kwa">end</span> <span class="sym">)</span>
  <span class="kwa">end</span><span class="sym">.</span>

<span class="kwd">main</span><span class="sym">(</span>_<span class="sym">) -&gt;</span>
  io<span class="sym">:</span><span class="kwd">setopts</span><span class="sym">(</span>standard_io<span class="sym">, [</span><span class="kwb">binary</span><span class="sym">]),</span>
  <span class="sym">{</span>SzTotal<span class="sym">, [</span>S3Raw<span class="sym">,</span>S2Raw<span class="sym">,</span>S1Raw<span class="sym">|</span>_<span class="sym">]} =</span> <span class="kwd">read_lines</span><span class="sym">(</span>standard_io<span class="sym">,</span> <span class="num">0</span><span class="sym">, [[]]),</span>
  B1 <span class="sym">=</span> <span class="kwb">list_to_binary</span><span class="sym">(</span>lists<span class="sym">:</span><span class="kwd">reverse</span><span class="sym">(</span>S1Raw<span class="sym">)),</span>
  B2 <span class="sym">=</span> <span class="kwb">list_to_binary</span><span class="sym">(</span>lists<span class="sym">:</span><span class="kwd">reverse</span><span class="sym">(</span>S2Raw<span class="sym">)),</span>
  B3 <span class="sym">=</span> <span class="kwb">list_to_binary</span><span class="sym">(</span>lists<span class="sym">:</span><span class="kwd">reverse</span><span class="sym">(</span>S3Raw<span class="sym">)),</span>
  S2 <span class="sym">=</span> <span class="kwb">binary_to_list</span><span class="sym">(</span>B2<span class="sym">),</span>
  S3 <span class="sym">=</span> <span class="kwb">binary_to_list</span><span class="sym">(</span>B3<span class="sym">),</span>
  L2  <span class="sym">=</span> <span class="kwb">size</span><span class="sym">(</span>B2<span class="sym">),</span>
  L13 <span class="sym">=</span> <span class="kwb">size</span><span class="sym">(</span>B1<span class="sym">) +</span> <span class="kwb">size</span><span class="sym">(</span>B3<span class="sym">),</span>
  lists<span class="sym">:</span><span class="kwd">foreach</span><span class="sym">(</span>
    <span class="kwa">fun</span><span class="sym">(</span>Re<span class="sym">) -&gt;</span>
      <span class="sym">{</span>match<span class="sym">,</span> M2<span class="sym">} =</span> regexp<span class="sym">:</span><span class="kwd">matches</span><span class="sym">(</span>S2<span class="sym">,</span> Re<span class="sym">),</span>
      <span class="sym">{</span>match<span class="sym">,</span> M3<span class="sym">} =</span> regexp<span class="sym">:</span><span class="kwd">matches</span><span class="sym">(</span>S3<span class="sym">,</span> Re<span class="sym">),</span>
      io<span class="sym">:</span><span class="kwd">format</span><span class="sym">(</span><span class="str">&quot;~s ~w~n&quot;</span><span class="sym">, [</span>Re<span class="sym">,</span> <span class="kwb">length</span><span class="sym">(</span>M2<span class="sym">) +</span> <span class="kwb">length</span><span class="sym">(</span>M3<span class="sym">)])</span>
    <span class="kwa">end</span><span class="sym">, ?</span>VARIANTS <span class="sym">),</span>
  L2Subst <span class="sym">=</span> <span class="kwb">length</span><span class="sym">(</span> lists<span class="sym">:</span><span class="kwd">flatmap</span><span class="sym">(</span>
    <span class="kwa">fun</span><span class="sym">(</span>Ch<span class="sym">) -&gt;</span>
      <span class="kwa">case</span> Ch <span class="kwa">of</span>
        $B <span class="sym">-&gt;</span> <span class="str">&quot;(c|g|t)&quot;</span><span class="sym">;</span>
        $D <span class="sym">-&gt;</span> <span class="str">&quot;(a|g|t)&quot;</span><span class="sym">;</span>
        $H <span class="sym">-&gt;</span> <span class="str">&quot;(a|c|t)&quot;</span><span class="sym">;</span>
        $K <span class="sym">-&gt;</span> <span class="str">&quot;(g|t)&quot;</span><span class="sym">;</span>
        $M <span class="sym">-&gt;</span> <span class="str">&quot;(a|c)&quot;</span><span class="sym">;</span>
        $N <span class="sym">-&gt;</span> <span class="str">&quot;(a|c|g|t)&quot;</span><span class="sym">;</span>
        $R <span class="sym">-&gt;</span> <span class="str">&quot;(a|g)&quot;</span><span class="sym">;</span>
        $S <span class="sym">-&gt;</span> <span class="str">&quot;(c|g)&quot;</span><span class="sym">;</span>
        $V <span class="sym">-&gt;</span> <span class="str">&quot;(a|c|g)&quot;</span><span class="sym">;</span>
        $W <span class="sym">-&gt;</span> <span class="str">&quot;(a|t)&quot;</span><span class="sym">;</span>
        $Y <span class="sym">-&gt;</span> <span class="str">&quot;(c|t)&quot;</span><span class="sym">;</span>
        XX <span class="sym">-&gt; [</span>XX<span class="sym">]</span>
      <span class="kwa">end</span>
    <span class="kwa">end</span><span class="sym">,</span> S2 <span class="sym">) ),</span>
  io<span class="sym">:</span><span class="kwd">format</span><span class="sym">(</span><span class="str">&quot;~n~w~n~w~n~w~n&quot;</span><span class="sym">, [</span>SzTotal<span class="sym">,</span> L13 <span class="sym">+</span> L2<span class="sym">,</span> L13 <span class="sym">+</span> L2Subst<span class="sym">]),</span>
  <span class="kwb">halt</span><span class="sym">(</span><span class="num">0</span><span class="sym">).</span>

