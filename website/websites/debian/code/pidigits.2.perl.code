<span class="slc"># The Computer Language Benchmarks Game</span>
<span class="slc">#   http://shootout.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc">#   contributed by Robert Bradshaw</span>
<span class="slc">#   modified by Ruud H.G.van Tol</span>
<span class="slc">#   modified by Emanuele Zeppieri</span>
<span class="slc">#   modified to use Math:GMP by Kuang-che Wu</span>

<span class="kwa">use</span> strict<span class="sym">;</span>
<span class="kwa">use</span> Math<span class="sym">::</span>GMP<span class="sym">;</span>

<span class="kwc">my</span><span class="sym">(</span><span class="kwb">$z0</span><span class="sym">,</span> <span class="kwb">$z1</span><span class="sym">,</span> <span class="kwb">$z2</span><span class="sym">) =</span> map Math<span class="sym">::</span>GMP<span class="sym">-&gt;</span><span class="kwd">new</span><span class="sym">(</span><span class="kwb">$_</span><span class="sym">),</span><span class="num">1</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">;</span>

<span class="kwa">sub</span> extract_digit <span class="sym">{</span> <span class="kwa">return</span> <span class="sym">(</span><span class="kwb">$z0</span><span class="sym">*</span><span class="kwb">$_</span><span class="sym">[</span><span class="num">0</span><span class="sym">]+</span><span class="kwb">$z1</span><span class="sym">)/</span><span class="kwb">$z2</span><span class="sym">; }</span>

<span class="kwa">sub</span> compose <span class="sym">{</span>
    <span class="kwa">if</span> <span class="sym">(</span> defined <span class="kwb">$_</span><span class="sym">[</span><span class="num">3</span><span class="sym">] ) {</span>
        <span class="kwb">$z1</span> <span class="sym">=</span> <span class="kwb">$z1</span><span class="sym">*</span><span class="kwb">$_</span><span class="sym">[</span><span class="num">0</span><span class="sym">]+</span><span class="kwb">$_</span><span class="sym">[</span><span class="num">1</span><span class="sym">]*</span><span class="kwb">$z2</span><span class="sym">;</span>
    <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
        <span class="kwb">$z1</span> <span class="sym">=</span> <span class="kwb">$z1</span><span class="sym">*</span><span class="kwb">$_</span><span class="sym">[</span><span class="num">2</span><span class="sym">]+</span><span class="kwb">$_</span><span class="sym">[</span><span class="num">1</span><span class="sym">]*</span><span class="kwb">$z0</span><span class="sym">;</span>
    <span class="sym">}</span>
    <span class="kwb">$z0</span> <span class="sym">=</span> <span class="kwb">$z0</span><span class="sym">*</span><span class="kwb">$_</span><span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
    <span class="kwb">$z2</span> <span class="sym">=</span> <span class="kwb">$z2</span><span class="sym">*</span><span class="kwb">$_</span><span class="sym">[</span><span class="num">2</span><span class="sym">];</span>
    <span class="kwa">return</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwc">my</span> <span class="kwb">$n</span> <span class="sym">=</span> <span class="kwb">$ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
<span class="sym">($,, $</span><span class="esc">\)</span> <span class="sym">= (</span><span class="str">&quot;</span><span class="esc">\t</span><span class="str">&quot;</span><span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
<span class="kwc">my</span> <span class="sym">(</span><span class="kwb">$i</span><span class="sym">,</span> <span class="kwb">$s</span><span class="sym">,</span> <span class="kwb">$d</span><span class="sym">);</span> <span class="kwc">my</span> <span class="kwb">$k</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

<span class="slc"># main loop</span>
<span class="kwa">for</span> <span class="kwb">$i</span> <span class="sym">(</span><span class="num">1</span>..<span class="kwb">$n</span><span class="sym">) {</span>
    <span class="kwa">while</span> <span class="sym">(</span>
        <span class="kwb">$z0</span><span class="sym">&gt;</span><span class="kwb">$z2</span> <span class="sym">|| (</span> <span class="kwb">$d</span> <span class="sym">=</span> <span class="kwd">extract_digit</span><span class="sym">(</span><span class="num">3</span><span class="sym">) ) !=</span> <span class="kwd">extract_digit</span><span class="sym">(</span><span class="num">4</span><span class="sym">)</span>
    <span class="sym">) {</span>
        <span class="slc"># y not safe</span>
        <span class="kwb">$k</span><span class="sym">++;</span> <span class="kwd">compose</span><span class="sym">(</span><span class="kwb">$k</span><span class="sym">,</span> <span class="num">4</span><span class="sym">*</span><span class="kwb">$k</span><span class="sym">+</span><span class="num">2</span><span class="sym">,</span> <span class="num">2</span><span class="sym">*</span><span class="kwb">$k</span><span class="sym">+</span><span class="num">1</span><span class="sym">)</span>
    <span class="sym">}</span>
    <span class="kwd">compose</span><span class="sym">(</span><span class="num">10</span><span class="sym">, -</span><span class="num">10</span><span class="sym">*</span><span class="kwb">$d</span><span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">);</span>
    <span class="kwb">$s</span> .<span class="sym">=</span> <span class="kwb">$d</span><span class="sym">;</span>

    <span class="kwa">unless</span> <span class="sym">(</span> <span class="kwb">$i</span> % <span class="num">10</span> <span class="sym">) {</span> print <span class="kwb">$s</span><span class="sym">,</span> <span class="str">&quot;:$i&quot;</span><span class="sym">;</span> undef <span class="kwb">$s</span> <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwb">$s</span> .<span class="sym">=</span> <span class="str">' '</span> <span class="kwd">x</span> <span class="sym">(</span><span class="num">10</span><span class="sym">-</span><span class="kwb">$i</span><span class="sym">)</span> <span class="kwa">if</span> <span class="kwb">$i</span> <span class="sym">=</span> <span class="kwb">$n</span> % <span class="num">10</span><span class="sym">;</span>

print <span class="kwb">$s</span><span class="sym">,</span> <span class="str">&quot;:$n&quot;</span> <span class="kwa">if</span> <span class="kwb">$s</span>
