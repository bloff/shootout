<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com"></span>
<span class="com">   RendezvousServer and Creature follow the same synchronization</span>
<span class="com">   approach as Mall and Chameneos in ANNEX A: JAVA SOLUTION</span>
<span class="com">   &quot;Chameneos, a Concurrency Game for Java, Ada and Others&quot;</span>
<span class="com">*/</span>


enum Colour <span class="sym">{</span> blue<span class="sym">,</span> red<span class="sym">,</span> yellow <span class="sym">}</span>

Colour complementColour<span class="sym">(</span>Colour self<span class="sym">,</span> Colour other<span class="sym">){</span>
   <span class="kwa">if</span> <span class="sym">(</span>self <span class="sym">==</span> other<span class="sym">) {</span>
      <span class="kwa">return</span> self<span class="sym">;</span>
   <span class="sym">}</span>
   <span class="kwa">else if</span> <span class="sym">(</span>self <span class="sym">==</span> blue<span class="sym">) {</span>
      <span class="kwa">if</span> <span class="sym">(</span>other <span class="sym">==</span> red<span class="sym">)</span> <span class="kwa">return</span> yellow<span class="sym">;</span> <span class="kwa">else return</span> red<span class="sym">;</span>
   <span class="sym">}</span>
   <span class="kwa">else if</span> <span class="sym">(</span>self <span class="sym">==</span> red<span class="sym">) {</span>
      <span class="kwa">if</span> <span class="sym">(</span>other <span class="sym">==</span> blue<span class="sym">)</span> <span class="kwa">return</span> yellow<span class="sym">;</span> <span class="kwa">else return</span> blue<span class="sym">;</span>
   <span class="sym">}</span>
   <span class="kwa">else</span> <span class="sym">{</span>
       <span class="kwa">if</span> <span class="sym">(</span>other <span class="sym">==</span> blue<span class="sym">)</span> <span class="kwa">return</span> red<span class="sym">;</span> <span class="kwa">else return</span> blue<span class="sym">;</span>
   <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwb">void</span> checkCreatureColourChanges<span class="sym">() {</span>
   <span class="kwa">let</span> colours <span class="sym">= [</span>blue<span class="sym">,</span>red<span class="sym">,</span>yellow<span class="sym">];</span>
   <span class="kwa">for</span> <span class="sym">(</span>self <span class="sym">:</span> colours<span class="sym">)</span>
      <span class="kwa">for</span> <span class="sym">(</span>other <span class="sym">:</span> colours<span class="sym">)</span>
         println<span class="sym">(</span>self <span class="sym">+</span> <span class="str">&quot; + &quot;</span> <span class="sym">+</span> other <span class="sym">+</span> <span class="str">&quot; -&gt; &quot;</span> <span class="sym">+</span> complementColour<span class="sym">(</span>self<span class="sym">,</span>other<span class="sym">));</span>
   println<span class="sym">();</span>
<span class="sym">}</span>



<span class="kwa">let</span> <span class="sym">(</span><span class="kwb">int</span><span class="sym">,</span>Colour<span class="sym">)</span> stopToken <span class="sym">= (</span><span class="num">0</span><span class="sym">,</span>blue<span class="sym">);</span>

<span class="kwa">class</span> RendezvousServer <span class="sym">{</span>
   <span class="kwa">private</span> <span class="sym">(</span><span class="kwb">int</span><span class="sym">,</span>Colour<span class="sym">)</span> a <span class="sym">=</span> stopToken<span class="sym">;</span>
   <span class="kwa">private</span> <span class="sym">(</span><span class="kwb">int</span><span class="sym">,</span>Colour<span class="sym">)</span> b <span class="sym">=</span> stopToken<span class="sym">;</span>

   <span class="kwa">private</span> <span class="kwb">boolean</span> firstCall <span class="sym">=</span> true<span class="sym">;</span>
   <span class="kwa">private</span> <span class="kwb">boolean</span> mustWait <span class="sym">=</span> false<span class="sym">;</span>

   <span class="kwa">private</span> <span class="kwb">int</span> countdown <span class="sym">=</span> n<span class="sym">;</span>


   <span class="sym">(</span><span class="kwb">int</span><span class="sym">,</span>Colour<span class="sym">)</span> notify<span class="sym">((</span><span class="kwb">int</span><span class="sym">,</span>Colour<span class="sym">)</span> token<span class="sym">) {</span>

      <span class="kwa">synchronized</span><span class="sym">(</span>this<span class="sym">) {</span>

         <span class="kwa">var</span> other <span class="sym">=</span> stopToken<span class="sym">;</span>

         <span class="kwa">while</span> <span class="sym">(</span> mustWait <span class="sym">&amp;&amp;</span> countdown <span class="sym">&gt;</span> <span class="num">0</span> <span class="sym">)</span> this<span class="sym">.</span>wait<span class="sym">();</span>

         <span class="kwa">if</span> <span class="sym">(</span> firstCall <span class="sym">) {</span>
            a <span class="sym">=</span> token<span class="sym">;</span>
            firstCall <span class="sym">=</span> false<span class="sym">;</span>

            <span class="kwa">while</span> <span class="sym">( !</span> firstCall <span class="sym">&amp;&amp;</span> countdown <span class="sym">&gt;</span> <span class="num">0</span> <span class="sym">)</span> this<span class="sym">.</span>wait<span class="sym">();</span>
            other <span class="sym">=</span> b<span class="sym">;</span>
            mustWait <span class="sym">=</span> false<span class="sym">;</span>
            this<span class="sym">.</span>notifyAll<span class="sym">();</span>

            <span class="sym">--</span>countdown<span class="sym">;</span>
         <span class="sym">}</span>

         <span class="kwa">else</span> <span class="sym">{</span>
            b <span class="sym">=</span> token<span class="sym">;</span>
            other <span class="sym">=</span> a<span class="sym">;</span>
            firstCall <span class="sym">=</span> true<span class="sym">;</span>
            mustWait <span class="sym">=</span> true<span class="sym">;</span>
            this<span class="sym">.</span>notifyAll<span class="sym">();</span>
         <span class="sym">}</span>

         <span class="kwa">return</span> countdown <span class="sym">&gt;=</span> <span class="num">0</span> <span class="sym">?</span> other <span class="sym">:</span> stopToken<span class="sym">;</span>
      <span class="sym">}</span>
   <span class="sym">}</span>

<span class="sym">}</span>


<span class="kwa">class</span> Creature <span class="kwa">extends</span> Thread <span class="sym">{</span>
   <span class="kwa">private</span> <span class="kwb">int</span> name<span class="sym">;</span>
   Colour colour<span class="sym">;</span>
   <span class="kwb">int</span> selfMet <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="kwb">int</span> creaturesMet <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="kwa">private</span> RendezvousServer rendezvous<span class="sym">;</span>

   override <span class="kwb">void</span> run<span class="sym">(){</span>
      <span class="kwa">while</span> <span class="sym">(</span>true<span class="sym">) {</span>
         <span class="sym">(</span><span class="kwb">int</span> otherName<span class="sym">,</span> Colour otherColour<span class="sym">) =</span> rendezvous<span class="sym">.</span>notify<span class="sym">( (</span>name<span class="sym">,</span>colour<span class="sym">) );</span>
         <span class="kwa">if</span> <span class="sym">(</span>otherName <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">break</span><span class="sym">;</span>

         colour <span class="sym">=</span> complementColour<span class="sym">(</span>colour<span class="sym">,</span>otherColour<span class="sym">);</span>
         <span class="kwa">if</span> <span class="sym">(</span>otherName <span class="sym">==</span> name<span class="sym">)</span> selfMet<span class="sym">++;</span>
         creaturesMet<span class="sym">++;</span>
      <span class="sym">}</span>
   <span class="sym">}</span>

<span class="sym">}</span>



List<span class="sym">&lt;</span>Creature<span class="sym">&gt;</span> startRendezvousCreaturesWith<span class="sym">(</span>List<span class="sym">&lt;</span>Colour<span class="sym">&gt;</span> colourList<span class="sym">){</span>
   <span class="kwa">let</span> r <span class="sym">=</span> <span class="kwa">new</span> RendezvousServer<span class="sym">();</span>
   <span class="kwa">var</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="kwa">let</span> rendezvousCreatures <span class="sym">=</span> colourList <span class="sym">.</span>map<span class="sym">(</span>
      Colour c <span class="sym">=&gt;</span> <span class="kwa">new</span> Creature<span class="sym">(</span>name<span class="sym">: ++</span>i<span class="sym">,</span> colour<span class="sym">:</span> c<span class="sym">,</span> rendezvous<span class="sym">:</span> r<span class="sym">));</span>

   <span class="kwa">for</span> <span class="sym">(</span>c <span class="sym">:</span> rendezvousCreatures<span class="sym">)</span> c<span class="sym">.</span>start<span class="sym">();</span>
   <span class="kwa">for</span> <span class="sym">(</span>c <span class="sym">:</span> rendezvousCreatures<span class="sym">)</span> c<span class="sym">.</span>join<span class="sym">();</span>

   <span class="kwa">return</span> rendezvousCreatures<span class="sym">;</span>
<span class="sym">}</span>


<span class="kwb">void</span> reportRendezvouses<span class="sym">(</span>List<span class="sym">&lt;</span>Colour<span class="sym">&gt;</span> colourList<span class="sym">){</span>
   <span class="kwa">let</span> numbers <span class="sym">= [</span><span class="str">&quot;zero&quot;</span><span class="sym">,</span> <span class="str">&quot;one&quot;</span><span class="sym">,</span> <span class="str">&quot;two&quot;</span><span class="sym">,</span> <span class="str">&quot;three&quot;</span><span class="sym">,</span> <span class="str">&quot;four&quot;</span><span class="sym">,</span>
                  <span class="str">&quot;five&quot;</span><span class="sym">,</span> <span class="str">&quot;six&quot;</span><span class="sym">,</span> <span class="str">&quot;seven&quot;</span><span class="sym">,</span> <span class="str">&quot;eight&quot;</span><span class="sym">,</span> <span class="str">&quot;nine&quot;</span><span class="sym">];</span>

   String spellout<span class="sym">(</span><span class="kwb">int</span> k<span class="sym">) =</span>
      k <span class="sym">.</span>toString <span class="sym">.</span>toCharArray <span class="sym">.</span>foldLeft<span class="sym">(</span>
         <span class="sym">(</span>String s<span class="sym">,</span> <span class="kwb">char</span> c<span class="sym">) =&gt;</span>
            s <span class="sym">+</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span> numbers<span class="sym">[</span> Character<span class="sym">.</span>getNumericValue<span class="sym">(</span>c<span class="sym">) ],</span> <span class="str">&quot;&quot;</span><span class="sym">);</span>


   <span class="kwa">for</span> <span class="sym">(</span>c <span class="sym">:</span> colourList<span class="sym">)</span> print<span class="sym">(</span><span class="str">&quot; &quot;</span> <span class="sym">+</span> c<span class="sym">);</span> println<span class="sym">();</span>

   <span class="kwa">let</span> rendezvousCreatures <span class="sym">=</span> startRendezvousCreaturesWith<span class="sym">(</span>colourList<span class="sym">);</span>

   <span class="kwa">var</span> sum <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="kwa">for</span> <span class="sym">(</span>c <span class="sym">:</span> rendezvousCreatures<span class="sym">){</span>
      sum <span class="sym">+=</span> c<span class="sym">.</span>creaturesMet<span class="sym">;</span>
      println<span class="sym">(</span>c<span class="sym">.</span>creaturesMet <span class="sym">+</span> spellout<span class="sym">(</span>c<span class="sym">.</span>selfMet<span class="sym">) );</span>
   <span class="sym">}</span>
   println<span class="sym">(</span> spellout<span class="sym">(</span>sum<span class="sym">) );</span>
   println<span class="sym">();</span>
<span class="sym">}</span>


<span class="kwa">var</span> <span class="kwb">int</span> n <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

<span class="kwb">void</span> main<span class="sym">(</span>String<span class="sym">[]</span> args<span class="sym">){</span>
   n <span class="sym">=</span> Integer<span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>

   checkCreatureColourChanges<span class="sym">();</span>
   reportRendezvouses<span class="sym">([</span>blue<span class="sym">,</span>red<span class="sym">,</span>yellow<span class="sym">]);</span>
   reportRendezvouses<span class="sym">([</span>blue<span class="sym">,</span>red<span class="sym">,</span>yellow<span class="sym">,</span>red<span class="sym">,</span>yellow<span class="sym">,</span>blue<span class="sym">,</span>red<span class="sym">,</span>yellow<span class="sym">,</span>red<span class="sym">,</span>blue<span class="sym">]);</span>
<span class="sym">}</span>
