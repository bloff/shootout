<span class="slc">% The Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">% contributed by Isaac Gouy</span>
<span class="slc">% based on Andrei Formiga's functional Scala program</span>

<span class="kwa">functor</span>
<span class="kwa">import</span> Application System

<span class="kwa">define</span>
   <span class="kwa">fun</span> <span class="sym">{</span>Flips A<span class="sym">}</span>
      Last <span class="sym">=</span> A<span class="num">.1</span>
   <span class="kwa">in</span>
      <span class="kwa">if</span> Last <span class="sym">==</span> <span class="num">1</span> <span class="kwa">then</span> <span class="num">0</span>
      <span class="kwa">else</span>
         <span class="kwa">for</span> I <span class="kwa">in</span> <span class="num">1</span><span class="sym">..</span>Last div <span class="num">2</span> do
            From <span class="sym">=</span> Last <span class="sym">+</span> <span class="num">1</span> <span class="sym">-</span> I
            Swap <span class="sym">=</span> A<span class="sym">.</span>I
         <span class="kwa">in</span>
            A<span class="sym">.</span>I <span class="sym">:=</span> A<span class="sym">.</span>From
            A<span class="sym">.</span>From <span class="sym">:=</span> Swap
         <span class="kwa">end</span>

         <span class="sym">{</span>Flips A<span class="sym">} +</span> <span class="num">1</span>
      <span class="kwa">end</span>
   <span class="kwa">end</span>


   <span class="kwa">proc</span> <span class="sym">{</span>ShowPermutation A<span class="sym">}</span>
      <span class="kwa">for</span> I <span class="kwa">in</span> <span class="num">1</span><span class="sym">..{</span>Array<span class="sym">.</span>high A<span class="sym">}</span> do <span class="sym">{</span>System<span class="sym">.</span>printInfo A<span class="sym">.</span>I<span class="sym">}</span> <span class="kwa">end</span>
      <span class="sym">{</span>System<span class="sym">.</span>showInfo &quot;&quot;<span class="sym">}</span>
   <span class="kwa">end</span>

   <span class="kwa">proc</span> <span class="sym">{</span>FlipPermutation A<span class="sym">}</span>
      Count <span class="sym">= {</span>Flips <span class="sym">{</span>Array<span class="sym">.</span>clone A<span class="sym">}}</span>
   <span class="kwa">in</span>
      <span class="kwa">if</span> Count <span class="sym">&gt; &#64;</span>MaxFlipsCount <span class="kwa">then</span> MaxFlipsCount <span class="sym">:=</span> Count <span class="kwa">end</span>
      <span class="kwa">if</span> <span class="sym">&#64;</span>Check <span class="sym">&lt;</span> <span class="num">30</span> <span class="kwa">then</span> <span class="sym">{</span>ShowPermutation A<span class="sym">}</span> Check <span class="sym">:= &#64;</span>Check <span class="sym">+</span> <span class="num">1</span> <span class="kwa">end</span>
   <span class="kwa">end</span>


   <span class="kwa">proc</span> <span class="sym">{</span>RotateLeft <span class="sym">?</span>A N<span class="sym">}</span>
      Swap <span class="sym">=</span> A<span class="num">.1</span>
   <span class="kwa">in</span>
      <span class="kwa">for</span> I <span class="kwa">in</span> <span class="num">1</span><span class="sym">..</span>N<span class="sym">-</span><span class="num">1</span> do A<span class="sym">.</span>I <span class="sym">:=</span> A<span class="sym">.(</span>I<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">end</span>
      A<span class="sym">.</span>N <span class="sym">:=</span> Swap
   <span class="kwa">end</span>

   <span class="kwa">proc</span> <span class="sym">{</span>Permutations A N J<span class="sym">}</span>
      <span class="kwa">if</span> J <span class="sym">&lt;</span> N <span class="kwa">then</span>
         <span class="kwa">if</span> N <span class="sym">==</span> <span class="num">1</span> <span class="kwa">then</span>
            <span class="sym">{</span>FlipPermutation A<span class="sym">}</span>
         <span class="kwa">else</span>
            <span class="sym">{</span>Permutations A N<span class="sym">-</span><span class="num">1 0</span><span class="sym">}</span>
            <span class="sym">{</span>RotateLeft A N<span class="sym">}</span>
            <span class="sym">{</span>Permutations A N J<span class="sym">+</span><span class="num">1</span><span class="sym">}</span>
         <span class="kwa">end</span>
      <span class="kwa">end</span>
   <span class="kwa">end</span>


   <span class="sym">[</span>Arg<span class="sym">] = {</span>Application<span class="sym">.</span>getArgs plain<span class="sym">}</span>
   N <span class="sym">= {</span>String<span class="sym">.</span>toInt Arg<span class="sym">}</span>

   <span class="kwa">fun</span> <span class="sym">{</span>Numbers N<span class="sym">}</span>
      A <span class="sym">= {</span>NewArray <span class="num">1</span> N <span class="num">0</span><span class="sym">}</span>
   <span class="kwa">in</span>
      <span class="kwa">for</span> I <span class="kwa">in</span> <span class="num">1</span><span class="sym">..</span>N do A<span class="sym">.</span>I <span class="sym">:=</span> I <span class="kwa">end</span>
      A
   <span class="kwa">end</span>

   MaxFlipsCount <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span>
   Check <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span>

<span class="kwa">in</span>
   <span class="sym">{</span>Permutations <span class="sym">{</span>Numbers N<span class="sym">}</span> N <span class="num">0</span><span class="sym">}</span>
   <span class="sym">{</span>System<span class="sym">.</span>showInfo &quot;Pfannkuchen<span class="sym">(</span>&quot; <span class="sym">#</span> N <span class="sym">#</span> &quot;<span class="sym">) =</span> &quot; <span class="sym"># &#64;</span>MaxFlipsCount<span class="sym">}</span>
   <span class="sym">{</span>Application<span class="sym">.</span>exit <span class="num">0</span><span class="sym">}</span>
<span class="kwa">end</span>
