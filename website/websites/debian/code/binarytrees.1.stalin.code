<span class="slc">;;; The Computer Language Benchmarks Game</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;; contributed by Fabien D.</span>

<span class="sym">(</span>define <span class="sym">(</span>make<span class="sym">-</span>tree item depth<span class="sym">)</span>
   <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(=</span> depth <span class="num">0</span><span class="sym">)</span>
      <span class="sym">(</span><span class="kwa">list</span> item <span class="sym">'() '())</span>
      <span class="sym">(</span>let <span class="sym">((</span>new<span class="sym">-</span>depth <span class="sym">(-</span> depth <span class="num">1</span><span class="sym">))</span>
            <span class="sym">(</span>new<span class="sym">-</span>item <span class="sym">(*</span> item <span class="num">2</span><span class="sym">)))</span>
         <span class="sym">(</span><span class="kwa">list</span> item <span class="sym">(</span>make<span class="sym">-</span>tree <span class="sym">(-</span> new<span class="sym">-</span>item <span class="num">1</span><span class="sym">)</span> new<span class="sym">-</span>depth<span class="sym">) (</span>make<span class="sym">-</span>tree new<span class="sym">-</span>item new<span class="sym">-</span>depth<span class="sym">)))))</span>


<span class="sym">(</span>define <span class="sym">(</span>check<span class="sym">-</span>tree tree<span class="sym">)</span>
   <span class="sym">(</span>let <span class="sym">((</span>item <span class="sym">(</span><span class="kwa">car</span> tree<span class="sym">))</span>
         <span class="sym">(</span>left <span class="sym">(</span><span class="kwa">cadr</span> tree<span class="sym">))</span>
         <span class="sym">(</span>right <span class="sym">(</span><span class="kwa">caddr</span> tree<span class="sym">)))</span>

      <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">null</span>? left<span class="sym">)</span>
         item
         <span class="sym">(+</span> item <span class="sym">(- (</span>check<span class="sym">-</span>tree left<span class="sym">) (</span>check<span class="sym">-</span>tree right<span class="sym">))))))</span>



<span class="sym">(</span>define <span class="sym">(</span>iterate depth <span class="kwa">min</span><span class="sym">-</span>depth <span class="kwa">max</span><span class="sym">-</span>depth<span class="sym">)</span>
   <span class="sym">(</span>let<span class="sym">* ((</span>iterations <span class="sym">(</span><span class="kwa">expt</span> <span class="num">2</span> <span class="sym">(- (+</span> <span class="kwa">max</span><span class="sym">-</span>depth <span class="kwa">min</span><span class="sym">-</span>depth<span class="sym">)</span> depth<span class="sym">)))</span>
               <span class="sym">(</span>check <span class="sym">(</span>do <span class="sym">((</span>i <span class="num">1</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)) (</span>check <span class="num">0</span><span class="sym">))</span>
                          <span class="sym">((&gt;=</span> i <span class="sym">(+</span> iterations <span class="num">1</span><span class="sym">))</span> check<span class="sym">)</span>
                          <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> check <span class="sym">(+</span> check <span class="sym">(</span>check<span class="sym">-</span>tree <span class="sym">(</span>make<span class="sym">-</span>tree i depth<span class="sym">)) (</span>check<span class="sym">-</span>tree <span class="sym">(</span>make<span class="sym">-</span>tree <span class="sym">(-</span> i<span class="sym">)</span> depth<span class="sym">)))))))</span>

                          <span class="sym">(</span>begin
                              <span class="sym">(</span>display <span class="sym">(*</span> iterations <span class="num">2</span><span class="sym">))</span>
                              <span class="sym">(</span>display <span class="str">&quot;    trees of depth &quot;</span><span class="sym">)</span>
                              <span class="sym">(</span>display depth<span class="sym">)</span>
                              <span class="sym">(</span>display <span class="str">&quot;    check: &quot;</span><span class="sym">)</span>
                              <span class="sym">(</span>display check<span class="sym">)</span>
                              <span class="sym">(</span>newline<span class="sym">))))</span>



<span class="sym">(</span>define <span class="sym">(</span>main user<span class="sym">-</span>depth<span class="sym">)</span>
   <span class="sym">(</span>let<span class="sym">* ((</span><span class="kwa">min</span><span class="sym">-</span>depth <span class="num">4</span><span class="sym">)</span>
          <span class="sym">(</span><span class="kwa">max</span><span class="sym">-</span>depth <span class="sym">(</span><span class="kwa">max</span> <span class="sym">(+</span> <span class="kwa">min</span><span class="sym">-</span>depth <span class="num">2</span><span class="sym">)</span> user<span class="sym">-</span>depth<span class="sym">))</span>
          <span class="sym">(</span>stretch<span class="sym">-</span>depth <span class="sym">(+</span> <span class="kwa">max</span><span class="sym">-</span>depth <span class="num">1</span><span class="sym">))</span>
          <span class="sym">(</span>long<span class="sym">-</span>lived <span class="sym">(</span>make<span class="sym">-</span>tree <span class="num">0</span> <span class="kwa">max</span><span class="sym">-</span>depth<span class="sym">)))</span>

      <span class="sym">(</span>begin
         <span class="sym">(</span>display <span class="str">&quot;stretch tree of depth &quot;</span><span class="sym">)</span>
         <span class="sym">(</span>display stretch<span class="sym">-</span>depth<span class="sym">)</span>
         <span class="sym">(</span>display <span class="str">&quot;    check: &quot;</span><span class="sym">)</span>
         <span class="sym">(</span>display <span class="sym">(</span>check<span class="sym">-</span>tree <span class="sym">(</span>make<span class="sym">-</span>tree <span class="num">0</span> stretch<span class="sym">-</span>depth<span class="sym">)))</span>
         <span class="sym">(</span>newline<span class="sym">)</span>

         <span class="sym">(</span>do <span class="sym">((</span>depth <span class="kwa">min</span><span class="sym">-</span>depth <span class="sym">(+</span> depth <span class="num">2</span><span class="sym">)))</span>
             <span class="sym">((&gt;=</span> depth stretch<span class="sym">-</span>depth<span class="sym">))</span>
             <span class="sym">(</span>iterate depth <span class="kwa">min</span><span class="sym">-</span>depth <span class="kwa">max</span><span class="sym">-</span>depth<span class="sym">))</span>

         <span class="sym">(</span>display <span class="str">&quot;long lived tree of depth &quot;</span><span class="sym">)</span>
         <span class="sym">(</span>display <span class="kwa">max</span><span class="sym">-</span>depth<span class="sym">)</span>
         <span class="sym">(</span>display <span class="str">&quot;    check: &quot;</span><span class="sym">)</span>
         <span class="sym">(</span>display <span class="sym">(</span>check<span class="sym">-</span>tree long<span class="sym">-</span>lived<span class="sym">))</span>
         <span class="sym">(</span>newline<span class="sym">)</span>
         <span class="sym">(</span>newline<span class="sym">))))</span>


<span class="sym">(</span>main <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span>vector<span class="sym">-</span>ref argv <span class="num">1</span><span class="sym">)))</span>
