<span class="slc"># The Computer Language Benchmarks Game</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc"># contributed by Sokolov Yura</span>
<span class="slc"># modified by Tupteq</span>

<span class="kwa">def</span> <span class="kwd">fannkuch</span><span class="sym">(</span>n<span class="sym">):</span>
    count <span class="sym">=</span> <span class="kwb">range</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> n<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>
    max_flips <span class="sym">=</span> <span class="num">0</span>
    m <span class="sym">=</span> n<span class="sym">-</span><span class="num">1</span>
    r <span class="sym">=</span> n
    check <span class="sym">=</span> <span class="num">0</span>
    perm1 <span class="sym">=</span> <span class="kwb">range</span><span class="sym">(</span>n<span class="sym">)</span>
    perm <span class="sym">=</span> <span class="kwb">range</span><span class="sym">(</span>n<span class="sym">)</span>
    perm1_ins <span class="sym">=</span> perm1<span class="sym">.</span>insert
    perm1_pop <span class="sym">=</span> perm1<span class="sym">.</span>pop

    <span class="kwa">while</span> <span class="num">1</span><span class="sym">:</span>
        <span class="kwa">if</span> check <span class="sym">&lt;</span> <span class="num">30</span><span class="sym">:</span>
            <span class="kwa">print</span> <span class="str">&quot;&quot;</span><span class="sym">.</span><span class="kwd">join</span><span class="sym">(</span><span class="kwb">str</span><span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">for</span> i <span class="kwa">in</span> perm1<span class="sym">)</span>
            check <span class="sym">+=</span> <span class="num">1</span>

        <span class="kwa">while</span> r <span class="sym">!=</span> <span class="num">1</span><span class="sym">:</span>
            count<span class="sym">[</span>r<span class="sym">-</span><span class="num">1</span><span class="sym">] =</span> r
            r <span class="sym">-=</span> <span class="num">1</span>

        <span class="kwa">if</span> perm1<span class="sym">[</span><span class="num">0</span><span class="sym">] !=</span> <span class="num">0</span> <span class="kwa">and</span> perm1<span class="sym">[</span>m<span class="sym">] !=</span> m<span class="sym">:</span>
            perm <span class="sym">=</span> perm1<span class="sym">[:]</span>
            flips_count <span class="sym">=</span> <span class="num">0</span>
            k <span class="sym">=</span> perm<span class="sym">[</span><span class="num">0</span><span class="sym">]</span>
            <span class="kwa">while</span> k<span class="sym">:</span>
                perm<span class="sym">[:</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">] =</span> perm<span class="sym">[</span>k<span class="sym">::-</span><span class="num">1</span><span class="sym">]</span>
                flips_count <span class="sym">+=</span> <span class="num">1</span>
                k <span class="sym">=</span> perm<span class="sym">[</span><span class="num">0</span><span class="sym">]</span>

            <span class="kwa">if</span> flips_count <span class="sym">&gt;</span> max_flips<span class="sym">:</span>
                max_flips <span class="sym">=</span> flips_count

        <span class="kwa">while</span> r <span class="sym">!=</span> n<span class="sym">:</span>
            <span class="kwd">perm1_ins</span><span class="sym">(</span>r<span class="sym">,</span> <span class="kwd">perm1_pop</span><span class="sym">(</span><span class="num">0</span><span class="sym">))</span>
            count<span class="sym">[</span>r<span class="sym">] -=</span> <span class="num">1</span>
            <span class="kwa">if</span> count<span class="sym">[</span>r<span class="sym">] &gt;</span> <span class="num">0</span><span class="sym">:</span>
                <span class="kwa">break</span>
            r <span class="sym">+=</span> <span class="num">1</span>
        <span class="kwa">else</span><span class="sym">:</span>
            <span class="kwa">return</span> max_flips

<span class="kwa">def</span> <span class="kwd">main</span><span class="sym">():</span>
    <span class="kwa">from</span> sys <span class="kwa">import</span> argv
    n <span class="sym">=</span> <span class="kwb">int</span><span class="sym">(</span>argv <span class="kwa">and</span> argv<span class="sym">[</span><span class="num">1</span><span class="sym">]</span> <span class="kwa">or</span> <span class="num">1</span><span class="sym">)</span>
    <span class="kwa">print</span> <span class="str">&quot;Pfannkuchen(%d) = %d</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">% (</span>n<span class="sym">,</span> <span class="kwd">fannkuch</span><span class="sym">(</span>n<span class="sym">)),</span>

<span class="kwa">if</span> __name__<span class="sym">==</span><span class="str">&quot;__main__&quot;</span><span class="sym">:</span>
    <span class="kwd">main</span><span class="sym">()</span>
