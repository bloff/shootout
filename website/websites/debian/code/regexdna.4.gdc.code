<span class="slc">// The Computer Language Benchmarks Game</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>
<span class="slc">// contributed by Dave Fladebo</span>
<span class="slc">// modified by bearophile, Dec 1 2007</span>


<span class="kwa">import</span> std<span class="sym">.</span>stdio<span class="sym">,</span> std<span class="sym">.</span>string<span class="sym">,</span> std<span class="sym">.</span>cstream<span class="sym">;</span>
<span class="kwa">import</span> std<span class="sym">.</span>regexp<span class="sym">:</span> RegExp<span class="sym">,</span> search<span class="sym">,</span> resplit <span class="sym">=</span> split<span class="sym">;</span>

<span class="kwa">void</span> <span class="kwd">main</span><span class="sym">() {</span>
    <span class="kwa">char</span><span class="sym">[][]</span> sseq<span class="sym">;</span>
    <span class="kwa">int</span> n<span class="sym">;</span>
    <span class="kwa">char</span><span class="sym">[</span><span class="num">1</span> <span class="sym">&lt;&lt;</span> <span class="num">15</span><span class="sym">]</span> cbuf<span class="sym">;</span>

    <span class="slc">// auto seq = din.toString(); // SLOW</span>
    <span class="kwa">while</span> <span class="sym">((</span>n <span class="sym">=</span> din<span class="sym">.</span><span class="kwd">readBlock</span><span class="sym">(</span>cbuf<span class="sym">.</span>ptr<span class="sym">,</span> cbuf<span class="sym">.</span>length<span class="sym">)) &gt;</span> <span class="num">0</span><span class="sym">)</span>
        <span class="slc">// sseq ~= cbuf[0 .. n][]; // slow</span>
        sseq <span class="sym">~=</span> cbuf<span class="sym">[</span><span class="num">0</span> <span class="sym">..</span> n<span class="sym">].</span>dup<span class="sym">;</span>
    <span class="kwa">auto</span> seq <span class="sym">=</span> sseq<span class="sym">.</span><span class="kwd">join</span><span class="sym">(</span><span class="str">&quot;&quot;</span><span class="sym">);</span>
    <span class="kwa">auto</span> ilen <span class="sym">=</span> seq<span class="sym">.</span>length<span class="sym">;</span>

    <span class="slc">//seq = sub(seq, &quot;&gt;.*\n|\n&quot;, &quot;&quot;, &quot;g&quot;); // SLOW!!</span>
    seq <span class="sym">=</span> <span class="kwd">resplit</span><span class="sym">(</span>seq<span class="sym">,</span> <span class="str">&quot;&gt;.*</span><span class="esc">\n</span><span class="str">|</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">).</span><span class="kwd">join</span><span class="sym">(</span><span class="str">&quot;&quot;</span><span class="sym">);</span>
    <span class="kwa">int</span> clen <span class="sym">=</span> seq<span class="sym">.</span>length<span class="sym">;</span>

    <span class="kwa">foreach</span><span class="sym">(</span>p<span class="sym">;</span> <span class="kwd">split</span><span class="sym">(</span><span class="str">&quot;agggtaaa|tttaccct</span>
<span class="str">                      [cgt]gggtaaa|tttaccc[acg]</span>
<span class="str">                      a[act]ggtaaa|tttacc[agt]t</span>
<span class="str">                      ag[act]gtaaa|tttac[agt]ct</span>
<span class="str">                      agg[act]taaa|ttta[agt]cct</span>
<span class="str">                      aggg[acg]aaa|ttt[cgt]ccct</span>
<span class="str">                      agggt[cgt]aa|tt[acg]accct</span>
<span class="str">                      agggta[cgt]a|t[acg]taccct</span>
<span class="str">                      agggtaa[cgt]|[acg]ttaccct&quot;</span><span class="sym">)) {</span>
        <span class="kwa">int</span> m <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
        <span class="kwa">foreach</span><span class="sym">(</span>_<span class="sym">;</span> <span class="kwd">RegExp</span><span class="sym">(</span>p<span class="sym">).</span><span class="kwd">search</span><span class="sym">(</span>seq<span class="sym">))</span>
            m<span class="sym">++;</span>
        <span class="kwd">writefln</span><span class="sym">(</span>p<span class="sym">,</span> <span class="str">' '</span><span class="sym">,</span> m<span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwa">foreach</span><span class="sym">(</span>el<span class="sym">;</span> <span class="kwd">split</span><span class="sym">(</span><span class="str">&quot;B(c|g|t) D(a|g|t) H(a|c|t) K(g|t) M(a|c)</span>
<span class="str">                       N(a|c|g|t) R(a|g) S(c|g) V(a|c|g) W(a|t) Y(c|t)&quot;</span><span class="sym">))</span>
        <span class="slc">// seq = RegExp(el[0..1], &quot;g&quot;).replace(seq, el[1..$]); // Slow</span>
        seq <span class="sym">= (</span><span class="kwa">new</span> <span class="kwd">RegExp</span><span class="sym">(</span>el<span class="sym">[</span><span class="num">0</span><span class="sym">.</span><span class="num">.1</span><span class="sym">],</span> <span class="str">&quot;g&quot;</span><span class="sym">)).</span><span class="kwd">replace</span><span class="sym">(</span>seq<span class="sym">,</span> el<span class="sym">[</span><span class="num">1</span><span class="sym">..</span>$<span class="sym">]);</span>

    <span class="kwd">writefln</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> ilen<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> clen<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> seq<span class="sym">.</span>length<span class="sym">);</span>
<span class="sym">}</span>
