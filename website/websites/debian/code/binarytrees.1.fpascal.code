<span class="com">(*</span>
<span class="com">  The Computer Language Benchmarks Game</span>
<span class="com">  http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">  contributed by Vitaly Trifonof based on a contribution of Ales Katona</span>
<span class="com">*)</span>

<span class="kwa">program</span> BinaryTrees<span class="sym">;</span>

<span class="com">{$INLINE ON}</span>

<span class="com">{$IFNDEF DEBUG}</span>
<span class="com">{$CHECKPOINTER OFF}</span>
<span class="com">{$RANGECHECKS OFF}</span>
<span class="com">{$OVERFLOWCHECKS OFF}</span>
<span class="com">{$IOCHECKS OFF}</span>
<span class="com">{$ENDIF}</span>

<span class="kwa">type</span>
  PNode <span class="sym">=</span> ^TNode<span class="sym">;</span>
  TNode <span class="sym">=</span> <span class="kwa">record</span>
    l<span class="sym">,</span> r<span class="sym">:</span> PNode<span class="sym">;</span>
    i<span class="sym">:</span> <span class="kwb">Longint</span><span class="sym">;</span>
  <span class="kwa">end</span><span class="sym">;</span>

<span class="kwa">function</span> <span class="kwd">CreateNode</span><span class="sym">(</span>l2<span class="sym">,</span> r2<span class="sym">:</span> PNode<span class="sym">;</span> <span class="kwa">const</span> i2<span class="sym">:</span> <span class="kwb">Longint</span><span class="sym">):</span> PNode<span class="sym">;</span> <span class="kwa">inline</span><span class="sym">;</span>
<span class="kwa">begin</span>
  CreateNode <span class="sym">:=</span> <span class="kwd">GetMem</span><span class="sym">(</span><span class="kwd">SizeOf</span><span class="sym">(</span>TNode<span class="sym">));</span>
  CreateNode^.l<span class="sym">:=</span>l2<span class="sym">;</span>
  CreateNode^.r<span class="sym">:=</span>r2<span class="sym">;</span>
  CreateNode^.i<span class="sym">:=</span>i2<span class="sym">;</span>
<span class="kwa">end</span><span class="sym">;</span>


<span class="com">(* Destroy node and it subnodes in one procedure *)</span>

<span class="kwa">procedure</span> <span class="kwd">DestroyNode</span><span class="sym">(</span>ANode<span class="sym">:</span> PNode<span class="sym">);</span> <span class="kwa">inline</span><span class="sym">;</span>
<span class="kwa">var</span>
  LNode<span class="sym">,</span> RNode<span class="sym">:</span> PNode<span class="sym">;</span>
<span class="kwa">begin</span>
  LNode <span class="sym">:=</span> ANode^.l<span class="sym">;</span>
  <span class="kwa">if</span> LNode <span class="sym">&lt;&gt;</span> <span class="kwa">nil then</span>
  <span class="kwa">begin</span>
    RNode <span class="sym">:=</span> ANode^.r<span class="sym">;</span>
    <span class="kwa">if</span> LNode^.l <span class="sym">&lt;&gt;</span> <span class="kwa">nil then</span>
    <span class="kwa">begin</span>
      <span class="kwd">DestroyNode</span><span class="sym">(</span>LNode^.l<span class="sym">);</span>
      <span class="kwd">DestroyNode</span><span class="sym">(</span>LNode^.r<span class="sym">);</span>
      <span class="kwd">FreeMem</span><span class="sym">(</span>LNode<span class="sym">,</span> <span class="kwd">SizeOf</span><span class="sym">(</span>TNode<span class="sym">));</span>

      <span class="kwd">DestroyNode</span><span class="sym">(</span>RNode^.l<span class="sym">);</span>
      <span class="kwd">DestroyNode</span><span class="sym">(</span>RNode^.r<span class="sym">);</span>
      <span class="kwd">FreeMem</span><span class="sym">(</span>RNode<span class="sym">,</span> <span class="kwd">SizeOf</span><span class="sym">(</span>TNode<span class="sym">));</span>
    <span class="kwa">end</span>
    <span class="kwa">else</span>
    <span class="kwa">begin</span>
      <span class="kwd">DestroyNode</span><span class="sym">(</span>LNode<span class="sym">);</span>
      <span class="kwd">DestroyNode</span><span class="sym">(</span>RNode<span class="sym">);</span>
    <span class="kwa">end</span>
  <span class="kwa">end</span><span class="sym">;</span>

  <span class="kwd">FreeMem</span><span class="sym">(</span>ANode<span class="sym">,</span> <span class="kwd">SizeOf</span><span class="sym">(</span>TNode<span class="sym">));</span>
<span class="kwa">end</span><span class="sym">;</span>


<span class="com">(* Left subnodes check in cycle, right recursive *)</span>

<span class="kwa">function</span> <span class="kwd">CheckNode</span><span class="sym">(</span>ANode<span class="sym">:</span> PNode<span class="sym">):</span> <span class="kwb">Longint</span><span class="sym">;</span> <span class="kwa">inline</span><span class="sym">;</span>
<span class="kwa">begin</span>
  CheckNode <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
  <span class="kwa">while</span> ANode^.l <span class="sym">&lt;&gt;</span> <span class="kwa">nil do</span>
  <span class="kwa">begin</span>
    CheckNode <span class="sym">+=</span> ANode^.i <span class="sym">-</span> <span class="kwd">CheckNode</span><span class="sym">(</span>ANode^.r<span class="sym">);</span>
    ANode <span class="sym">:=</span> ANode^.l
  <span class="kwa">end</span><span class="sym">;</span>
  CheckNode <span class="sym">+=</span> ANode^.i<span class="sym">;</span>
<span class="kwa">end</span><span class="sym">;</span>


<span class="com">(*</span>
<span class="com">   Create node and it subnodes in one function</span>
<span class="com"></span>
<span class="com">   make(1,a)=(2I-1)=Ia make(2,Ia-1)=(2(2I-1)-1)=(4I-3)</span>
<span class="com">                       make(2,Ia)  =(2(2I-1))  =(4I-2)</span>
<span class="com"></span>
<span class="com">   make(1,b)=(2I)=Ib   make(2,Ib-1)=(2(2I)-1)  =(4I-1)</span>
<span class="com">                       make(2,Ib)  =(2(2I))    =(4I)</span>
<span class="com">*)</span>

<span class="kwa">function</span> <span class="kwd">Make</span><span class="sym">(</span>d<span class="sym">,</span> i<span class="sym">:</span> <span class="kwb">Longint</span><span class="sym">):</span> PNode<span class="sym">;</span>
<span class="kwa">var</span>
  fi<span class="sym">:</span> <span class="kwb">Longint</span><span class="sym">;</span>
<span class="kwa">begin</span>
  <span class="kwa">case</span> d <span class="kwa">of</span>
   <span class="num">0</span><span class="sym">:</span> Make<span class="sym">:=</span><span class="kwd">CreateNode</span><span class="sym">(</span><span class="kwa">nil</span><span class="sym">,</span> <span class="kwa">nil</span><span class="sym">,</span> i<span class="sym">);</span>
   <span class="num">1</span><span class="sym">:</span> Make<span class="sym">:=</span><span class="kwd">CreateNode</span><span class="sym">(</span><span class="kwd">CreateNode</span><span class="sym">(</span><span class="kwa">nil</span><span class="sym">,</span> <span class="kwa">nil</span><span class="sym">,</span> <span class="num">2</span><span class="sym">*</span>i<span class="sym">-</span><span class="num">1</span><span class="sym">),</span> <span class="kwd">CreateNode</span><span class="sym">(</span><span class="kwa">nil</span><span class="sym">,</span> <span class="kwa">nil</span><span class="sym">,</span> <span class="num">2</span><span class="sym">*</span>i<span class="sym">),</span>i<span class="sym">);</span>
  <span class="kwa">else</span>
      d <span class="sym">-=</span> <span class="num">2</span><span class="sym">;</span> fi <span class="sym">:=</span> <span class="num">4</span><span class="sym">*</span>i<span class="sym">;</span>
      Make<span class="sym">:=</span><span class="kwd">CreateNode</span><span class="sym">(</span>
                           <span class="kwd">CreateNode</span><span class="sym">(</span> <span class="kwd">Make</span><span class="sym">(</span>d<span class="sym">,</span> fi<span class="sym">-</span><span class="num">3</span><span class="sym">),</span><span class="kwd">Make</span><span class="sym">(</span>d<span class="sym">,</span> fi<span class="sym">-</span><span class="num">2</span><span class="sym">),</span> <span class="num">2</span><span class="sym">*</span>i<span class="sym">-</span><span class="num">1</span> <span class="sym">),</span>
                           <span class="kwd">CreateNode</span><span class="sym">(</span> <span class="kwd">Make</span><span class="sym">(</span>d<span class="sym">,</span> fi<span class="sym">-</span><span class="num">1</span><span class="sym">),</span><span class="kwd">Make</span><span class="sym">(</span>d<span class="sym">,</span> fi<span class="sym">),</span> <span class="num">2</span><span class="sym">*</span>i <span class="sym">),</span>
                           i
                        <span class="sym">)</span>
  <span class="kwa">end</span>
<span class="kwa">end</span><span class="sym">;</span>

<span class="kwa">const</span>
  mind <span class="sym">=</span> <span class="num">4</span><span class="sym">;</span>

<span class="kwa">var</span>
  maxd <span class="sym">:</span> <span class="kwb">Longint</span> <span class="sym">=</span> <span class="num">10</span><span class="sym">;</span>
  strd<span class="sym">,</span>
  iter<span class="sym">,</span>
  c<span class="sym">,</span> d<span class="sym">,</span> i <span class="sym">:</span> <span class="kwb">Longint</span><span class="sym">;</span>
  tree<span class="sym">,</span> llt <span class="sym">:</span> PNode<span class="sym">;</span>

<span class="kwa">begin</span>
  <span class="kwa">if</span> ParamCount <span class="sym">=</span> <span class="num">1</span> <span class="kwa">then</span>
    <span class="kwd">Val</span><span class="sym">(</span><span class="kwd">ParamStr</span><span class="sym">(</span><span class="num">1</span><span class="sym">),</span> maxd<span class="sym">);</span>

  <span class="kwa">if</span> maxd <span class="sym">&lt;</span> mind<span class="sym">+</span><span class="num">2</span> <span class="kwa">then</span>
     maxd <span class="sym">:=</span> mind <span class="sym">+</span> <span class="num">2</span><span class="sym">;</span>

  strd<span class="sym">:=</span>maxd <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
  tree<span class="sym">:=</span><span class="kwd">Make</span><span class="sym">(</span>strd<span class="sym">,</span> <span class="num">0</span><span class="sym">);</span>
  <span class="kwd">Writeln</span><span class="sym">(</span><span class="str">'stretch tree of depth '</span><span class="sym">,</span> strd<span class="sym">,</span> <span class="esc">#9</span><span class="str">' check: '</span><span class="sym">,</span> <span class="kwd">CheckNode</span><span class="sym">(</span>tree<span class="sym">));</span>
  <span class="kwd">DestroyNode</span><span class="sym">(</span>tree<span class="sym">);</span>

  llt<span class="sym">:=</span><span class="kwd">Make</span><span class="sym">(</span>maxd<span class="sym">,</span> <span class="num">0</span><span class="sym">);</span>

  d<span class="sym">:=</span>mind<span class="sym">;</span>
  <span class="kwa">while</span> d <span class="sym">&lt;=</span> maxd <span class="kwa">do begin</span>
    iter<span class="sym">:=</span><span class="num">1</span> <span class="kwa">shl</span> <span class="sym">(</span>maxd <span class="sym">-</span> d <span class="sym">+</span> mind<span class="sym">);</span>
    c<span class="sym">:=</span><span class="num">0</span><span class="sym">;</span>
    <span class="kwa">for</span> i<span class="sym">:=</span><span class="num">1</span> <span class="kwa">to</span> Iter <span class="kwa">do begin</span>
      tree<span class="sym">:=</span><span class="kwd">Make</span><span class="sym">(</span>d<span class="sym">,</span> i<span class="sym">);</span>
      c<span class="sym">:=</span>c <span class="sym">+</span> <span class="kwd">CheckNode</span><span class="sym">(</span>tree<span class="sym">);</span>
      <span class="kwd">DestroyNode</span><span class="sym">(</span>tree<span class="sym">);</span>
      tree<span class="sym">:=</span><span class="kwd">Make</span><span class="sym">(</span>d<span class="sym">, -</span>i<span class="sym">);</span>
      c<span class="sym">:=</span>c <span class="sym">+</span> <span class="kwd">CheckNode</span><span class="sym">(</span>tree<span class="sym">);</span>
      <span class="kwd">DestroyNode</span><span class="sym">(</span>tree<span class="sym">);</span>
    <span class="kwa">end</span><span class="sym">;</span>
    <span class="kwd">Writeln</span><span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> Iter<span class="sym">,</span> <span class="esc">#9</span><span class="str">' trees of depth '</span><span class="sym">,</span> d<span class="sym">,</span> <span class="esc">#9</span><span class="str">' check: '</span><span class="sym">,</span> c<span class="sym">);</span>
    <span class="kwd">Inc</span><span class="sym">(</span>d<span class="sym">,</span> <span class="num">2</span><span class="sym">);</span>
  <span class="kwa">end</span><span class="sym">;</span>

  <span class="kwd">Writeln</span><span class="sym">(</span><span class="str">'long lived tree of depth '</span><span class="sym">,</span> maxd<span class="sym">,</span> <span class="esc">#9</span><span class="str">' check: '</span><span class="sym">,</span> <span class="kwd">CheckNode</span><span class="sym">(</span>llt<span class="sym">));</span>
  <span class="kwd">DestroyNode</span><span class="sym">(</span>llt<span class="sym">);</span>
<span class="kwa">end</span>.
