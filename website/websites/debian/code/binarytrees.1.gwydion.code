<span class="kwb">module</span><span class="sym">:</span> binarytrees

<span class="kwa">define constant</span> <span class="kwa">&lt;tree&gt;</span> <span class="sym">=</span> type<span class="sym">-</span><span class="kwd">union</span><span class="sym">(</span><span class="kwa">&lt;integer&gt;</span><span class="sym">,</span> <span class="kwa">&lt;node&gt;</span><span class="sym">);</span>

<span class="kwa">define class</span> <span class="kwa">&lt;node&gt;</span> <span class="sym">(</span><span class="kwa">&lt;object&gt;</span><span class="sym">)</span>
  <span class="kwa">slot</span> left <span class="sym">::</span> <span class="kwa">&lt;tree&gt;</span><span class="sym">,</span> required<span class="sym">-</span>init<span class="sym">-</span>keyword<span class="sym">:</span> left<span class="sym">:;</span>
  <span class="kwa">slot</span> item <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">,</span> required<span class="sym">-</span>init<span class="sym">-</span>keyword<span class="sym">:</span> item<span class="sym">:;</span>
  <span class="kwa">slot</span> right <span class="sym">::</span> <span class="kwa">&lt;tree&gt;</span><span class="sym">,</span> required<span class="sym">-</span>init<span class="sym">-</span>keyword<span class="sym">:</span> right<span class="sym">:;</span>
<span class="kwa">end</span><span class="sym">;</span>

<span class="kwa">define sealed domain</span> <span class="kwd">make</span><span class="sym">(</span><span class="kwa">singleton</span><span class="sym">(</span><span class="kwa">&lt;node&gt;</span><span class="sym">));</span>
<span class="kwa">define sealed domain</span> <span class="kwd">initialize</span><span class="sym">(</span><span class="kwa">&lt;node&gt;</span><span class="sym">);</span>

<span class="kwa">define function</span> <span class="kwd">build</span><span class="sym">(</span>n <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">,</span> d <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">) =</span>&gt; <span class="sym">(</span>res <span class="sym">::</span> <span class="kwa">&lt;tree&gt;</span><span class="sym">)</span>
  <span class="kwa">if</span> <span class="sym">(</span>d <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span>
    n<span class="sym">;</span>
  <span class="kwa">else</span>
    <span class="kwd">make</span><span class="sym">(</span><span class="kwa">&lt;node&gt;</span><span class="sym">,</span> item<span class="sym">:</span> n<span class="sym">,</span> left<span class="sym">:</span> <span class="kwd">build</span><span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> n <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> d <span class="sym">-</span> <span class="num">1</span><span class="sym">),</span> right<span class="sym">:</span> <span class="kwd">build</span><span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> n<span class="sym">,</span> d <span class="sym">-</span> <span class="num">1</span><span class="sym">));</span>
  <span class="kwa">end</span><span class="sym">;</span>
<span class="kwa">end</span><span class="sym">;</span>

<span class="kwa">define function</span> <span class="kwd">check</span><span class="sym">(</span>tree <span class="sym">::</span> <span class="kwa">&lt;tree&gt;</span><span class="sym">) =</span>&gt; <span class="sym">(</span>res <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">);</span>
  <span class="kwa">select</span> <span class="sym">(</span>tree <span class="kwa">by instance</span>?<span class="sym">)</span>
    <span class="kwa">&lt;integer&gt;</span> <span class="sym">=</span>&gt; tree<span class="sym">;</span>
    <span class="kwa">&lt;node&gt;</span> <span class="sym">=</span>&gt; tree.item <span class="sym">+</span> tree.left.check <span class="sym">-</span> tree.right.check<span class="sym">;</span>
  <span class="kwa">end</span><span class="sym">;</span>
<span class="kwa">end</span><span class="sym">;</span>

<span class="kwa">begin</span>
  <span class="kwa">let</span> min<span class="sym">-</span>depth <span class="sym">=</span> <span class="num">4</span><span class="sym">;</span>
  <span class="kwa">let</span> max<span class="sym">-</span>depth <span class="sym">=</span> <span class="kwd">max</span><span class="sym">(</span>min<span class="sym">-</span>depth <span class="sym">+</span> <span class="num">2</span><span class="sym">,</span> application<span class="sym">-</span><span class="kwd">arguments</span><span class="sym">()[</span><span class="num">0</span><span class="sym">]</span>.string<span class="sym">-</span><span class="kwa">to</span><span class="sym">-</span>integer<span class="sym">);</span>
  <span class="kwa">let</span> stretch<span class="sym">-</span>depth <span class="sym">=</span> max<span class="sym">-</span>depth <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>

  format<span class="sym">-</span><span class="kwd">out</span><span class="sym">(</span><span class="str">&quot;stretch tree of depth %d</span><span class="esc">\t</span> <span class="str">check: %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>
             stretch<span class="sym">-</span>depth<span class="sym">,</span> <span class="kwd">build</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> stretch<span class="sym">-</span>depth<span class="sym">)</span>.check<span class="sym">);</span>

  <span class="kwa">let</span> long<span class="sym">-</span>lived<span class="sym">-</span>tree <span class="sym">=</span> <span class="kwd">build</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> max<span class="sym">-</span>depth<span class="sym">);</span>

  <span class="kwa">for</span> <span class="sym">(</span>d <span class="kwa">from</span> min<span class="sym">-</span>depth <span class="kwa">to</span> max<span class="sym">-</span>depth <span class="kwa">by</span> <span class="num">2</span><span class="sym">)</span>
    <span class="kwa">let</span> iterations <span class="sym">=</span> <span class="kwd">ash</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> max<span class="sym">-</span>depth <span class="sym">-</span> d <span class="sym">+</span> min<span class="sym">-</span>depth<span class="sym">);</span>
    <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">1</span> <span class="kwa">to</span> iterations<span class="sym">,</span>
         c <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then</span> c <span class="sym">+</span> <span class="kwd">build</span><span class="sym">(</span>i<span class="sym">,</span> d<span class="sym">)</span>.check <span class="sym">+</span> <span class="kwd">build</span><span class="sym">(-</span>i<span class="sym">,</span> d<span class="sym">)</span>.check<span class="sym">)</span>
    <span class="kwa">finally</span>
      format<span class="sym">-</span><span class="kwd">out</span><span class="sym">(</span><span class="str">&quot;%d</span><span class="esc">\t</span> <span class="str">trees of depth %d</span><span class="esc">\t</span> <span class="str">check: %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="num">2</span> <span class="sym">*</span> iterations<span class="sym">,</span> d<span class="sym">,</span> c<span class="sym">);</span>
    <span class="kwa">end for</span><span class="sym">;</span>
  <span class="kwa">end for</span><span class="sym">;</span>

  format<span class="sym">-</span><span class="kwd">out</span><span class="sym">(</span><span class="str">&quot;long lived tree of depth %d</span><span class="esc">\t</span> <span class="str">check: %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>
             max<span class="sym">-</span>depth<span class="sym">,</span> long<span class="sym">-</span>lived<span class="sym">-</span>tree.check<span class="sym">);</span>
<span class="kwa">end</span><span class="sym">;</span>
