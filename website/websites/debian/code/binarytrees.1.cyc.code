<span class="com">/* The Computer Language Shootout Benchmarks</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Kevin Carson, converted to Cyclone by</span>
<span class="com">                  Brent Fulgham, using help from Greg Morrisett</span>
<span class="com">		  and the Cyclone 'rewrite' utility.</span>
<span class="com">*/</span>

<span class="dir">#include &lt;math.h&gt;</span>
<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>


<span class="kwc">typedef</span> <span class="kwb">struct</span> tn <span class="sym">{</span>
    <span class="kwb">struct</span> tn?    left<span class="sym">;</span>
    <span class="kwb">struct</span> tn?    right<span class="sym">;</span>
    <span class="kwb">long</span>          item<span class="sym">;</span>
<span class="sym">}</span> treeNode<span class="sym">;</span>


treeNode&#64; <span class="kwd">NewTreeNode</span><span class="sym">(</span>treeNode<span class="sym">*</span> `H left<span class="sym">,</span> treeNode<span class="sym">*</span> `H right<span class="sym">,</span> <span class="kwb">long</span> item<span class="sym">)</span>
<span class="sym">{</span>
    treeNode&#64; nw <span class="sym">= (</span>treeNode&#64;<span class="sym">)</span><span class="kwd">malloc</span><span class="sym">(</span><span class="kwa">sizeof</span><span class="sym">(</span>treeNode<span class="sym">));</span>

    nw<span class="sym">-&gt;</span>left <span class="sym">=</span> left<span class="sym">;</span>
    nw<span class="sym">-&gt;</span>right <span class="sym">=</span> right<span class="sym">;</span>
    nw<span class="sym">-&gt;</span>item <span class="sym">=</span> item<span class="sym">;</span>

    <span class="kwa">return</span> nw<span class="sym">;</span>
<span class="sym">}</span> <span class="com">/* NewTreeNode() */</span>


<span class="kwb">long</span> <span class="kwd">ItemCheck</span><span class="sym">(</span>treeNode&#64; tree<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">if</span> <span class="sym">(</span>tree<span class="sym">-&gt;</span>left <span class="sym">==</span> NULL<span class="sym">)</span>
        <span class="kwa">return</span> tree<span class="sym">-&gt;</span>item<span class="sym">;</span>
    <span class="kwa">else</span>
        <span class="kwa">return</span> tree<span class="sym">-&gt;</span>item <span class="sym">+</span> <span class="kwd">ItemCheck</span><span class="sym">(</span>tree<span class="sym">-&gt;</span>left<span class="sym">) -</span> <span class="kwd">ItemCheck</span><span class="sym">(</span>tree<span class="sym">-&gt;</span>right<span class="sym">);</span>
<span class="sym">}</span> <span class="com">/* ItemCheck() */</span>


treeNode&#64; <span class="kwd">BottomUpTree</span><span class="sym">(</span><span class="kwb">long</span> item<span class="sym">,</span> <span class="kwb">unsigned</span> depth<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">if</span> <span class="sym">(</span>depth <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span>
        <span class="kwa">return</span> NewTreeNode
        <span class="sym">(</span>
            <span class="kwd">BottomUpTree</span><span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> item <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> depth <span class="sym">-</span> <span class="num">1</span><span class="sym">),</span>
            <span class="kwd">BottomUpTree</span><span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> item<span class="sym">,</span> depth <span class="sym">-</span> <span class="num">1</span><span class="sym">),</span>
            item
        <span class="sym">);</span>
    <span class="kwa">else</span>
        <span class="kwa">return</span> <span class="kwd">NewTreeNode</span><span class="sym">(</span>NULL<span class="sym">,</span> NULL<span class="sym">,</span> item<span class="sym">);</span>
<span class="sym">}</span> <span class="com">/* BottomUpTree() */</span>


<span class="kwb">void</span> <span class="kwd">DeleteTree</span><span class="sym">(</span>treeNode&#64; tree<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">if</span> <span class="sym">(</span>tree<span class="sym">-&gt;</span>left <span class="sym">!=</span> NULL<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwd">DeleteTree</span><span class="sym">(</span>tree<span class="sym">-&gt;</span>left<span class="sym">);</span>
        <span class="kwd">DeleteTree</span><span class="sym">(</span>tree<span class="sym">-&gt;</span>right<span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwd">free</span><span class="sym">(</span>tree<span class="sym">);</span>
<span class="sym">}</span> <span class="com">/* DeleteTree() */</span>


<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> ??argv<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwb">unsigned</span>   depth<span class="sym">,</span> maxDepth<span class="sym">;</span>
    treeNode   <span class="sym">*</span>stretchTree<span class="sym">, *</span>longLivedTree<span class="sym">, *</span>tempTree<span class="sym">;</span>

    <span class="kwb">unsigned</span> N <span class="sym">=</span> <span class="kwd">atol</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span>

    <span class="kwb">unsigned</span> minDepth <span class="sym">=</span> <span class="num">4</span><span class="sym">;</span>

    <span class="kwa">if</span> <span class="sym">((</span>minDepth <span class="sym">+</span> <span class="num">2</span><span class="sym">) &gt;</span> N<span class="sym">)</span>
        maxDepth <span class="sym">=</span> minDepth <span class="sym">+</span> <span class="num">2</span><span class="sym">;</span>
    <span class="kwa">else</span>
        maxDepth <span class="sym">=</span> N<span class="sym">;</span>

    <span class="kwb">unsigned</span> stretchDepth <span class="sym">=</span> maxDepth <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>

    stretchTree <span class="sym">=</span> <span class="kwd">BottomUpTree</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> stretchDepth<span class="sym">);</span>
    <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;stretch tree of depth %u</span><span class="esc">\t</span> <span class="str">check: %li</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>
           stretchDepth<span class="sym">,</span>
           <span class="kwd">ItemCheck</span><span class="sym">(</span>stretchTree<span class="sym">));</span>

    <span class="kwd">DeleteTree</span><span class="sym">(</span>stretchTree<span class="sym">);</span>

    longLivedTree <span class="sym">=</span> <span class="kwd">BottomUpTree</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> maxDepth<span class="sym">);</span>

    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">unsigned</span> depth <span class="sym">=</span> minDepth<span class="sym">;</span> depth <span class="sym">&lt;=</span> maxDepth<span class="sym">;</span> depth <span class="sym">+=</span> <span class="num">2</span><span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwb">long</span>    i<span class="sym">,</span> check<span class="sym">;</span>

        <span class="kwb">long</span> iterations <span class="sym">= (</span><span class="kwb">long</span><span class="sym">)</span><span class="kwd">pow</span><span class="sym">(</span><span class="num">2</span><span class="sym">,</span> maxDepth <span class="sym">-</span> depth <span class="sym">+</span> minDepth<span class="sym">);</span>

        check <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

        <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> i <span class="sym">&lt;=</span> iterations<span class="sym">;</span> i<span class="sym">++)</span>
        <span class="sym">{</span>
            tempTree <span class="sym">=</span> <span class="kwd">BottomUpTree</span><span class="sym">(</span>i<span class="sym">,</span> depth<span class="sym">);</span>
            check <span class="sym">+=</span> <span class="kwd">ItemCheck</span><span class="sym">(</span>tempTree<span class="sym">);</span>
            <span class="kwd">DeleteTree</span><span class="sym">(</span>tempTree<span class="sym">);</span>

            tempTree <span class="sym">=</span> <span class="kwd">BottomUpTree</span><span class="sym">(-</span>i<span class="sym">,</span> depth<span class="sym">);</span>
            check <span class="sym">+=</span> <span class="kwd">ItemCheck</span><span class="sym">(</span>tempTree<span class="sym">);</span>
            <span class="kwd">DeleteTree</span><span class="sym">(</span>tempTree<span class="sym">);</span>
        <span class="sym">}</span> <span class="com">/* for(i = 1...) */</span>

        <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%li</span><span class="esc">\t</span> <span class="str">trees of depth %u</span><span class="esc">\t</span> <span class="str">check: %li</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>
               iterations <span class="sym">*</span> <span class="num">2</span><span class="sym">,</span>
               depth<span class="sym">,</span>
               check<span class="sym">);</span>
    <span class="sym">}</span> <span class="com">/* for(depth = minDepth...) */</span>

    <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;long lived tree of depth %u</span><span class="esc">\t</span> <span class="str">check: %li</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>
           maxDepth<span class="sym">,</span>
           <span class="kwd">ItemCheck</span><span class="sym">(</span>longLivedTree<span class="sym">));</span>

    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span> <span class="com">/* main() */</span>
