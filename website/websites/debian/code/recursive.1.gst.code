<span class="str">&quot;* The Computer Language Shootout</span>
<span class="str">    http://shootout.alioth.debian.org/</span>
<span class="str">    contributed by Isaac Gouy</span>
<span class="str">    modified by Eliot Miranda *&quot;</span><span class="sym">!</span>

<span class="sym">!</span>Float methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>fib   ^self <span class="sym">&lt;</span> <span class="num">2.0</span> ifTrue<span class="sym">: [</span><span class="num">1.0</span><span class="sym">]</span> ifFalse<span class="sym">: [(</span>self <span class="sym">-</span> <span class="num">2.0</span><span class="sym">)</span> fib <span class="sym">+ (</span>self <span class="sym">-</span> <span class="num">1.0</span><span class="sym">)</span> fib<span class="sym">]! !!</span>Float methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>tak<span class="sym">:</span> y z<span class="sym">:</span> z   ^y <span class="sym">&lt;</span> self       ifTrue<span class="sym">: [((</span>self <span class="sym">-</span> <span class="num">1.0</span><span class="sym">)</span> tak<span class="sym">:</span> y z<span class="sym">:</span> z<span class="sym">)</span> tak<span class="sym">:        ((</span>y <span class="sym">-</span> <span class="num">1.0</span><span class="sym">)</span> tak<span class="sym">:</span> z z<span class="sym">:</span> self<span class="sym">)</span> z<span class="sym">: ((</span>z <span class="sym">-</span> <span class="num">1.0</span><span class="sym">)</span> tak<span class="sym">:</span> self z<span class="sym">:</span> y<span class="sym">)]</span>      ifFalse<span class="sym">: [</span>z<span class="sym">]! !!</span>SmallInteger methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>ack<span class="sym">:</span> aSmallInteger   ^self <span class="sym">==</span> <span class="num">0</span>      ifTrue<span class="sym">: [</span>aSmallInteger <span class="sym">+</span> <span class="num">1</span><span class="sym">]</span>      ifFalse<span class="sym">: [</span>         aSmallInteger <span class="sym">==</span> <span class="num">0</span>            ifTrue<span class="sym">: [</span>self <span class="sym">-</span> <span class="num">1</span> ack<span class="sym">:</span>  <span class="num">1</span><span class="sym">]</span>            ifFalse<span class="sym">: [</span>self <span class="sym">-</span> <span class="num">1</span> ack<span class="sym">: (</span>self ack<span class="sym">:</span> aSmallInteger <span class="sym">-</span> <span class="num">1</span><span class="sym">)] ]! !!</span>SmallInteger methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>fib   ^self <span class="sym">&lt;</span> <span class="num">2</span> ifTrue<span class="sym">: [</span><span class="num">1</span><span class="sym">]</span> ifFalse<span class="sym">: [(</span>self <span class="sym">-</span> <span class="num">2</span><span class="sym">)</span> fib <span class="sym">+ (</span>self <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> fib<span class="sym">]! !!</span>SmallInteger methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>tak<span class="sym">:</span> y z<span class="sym">:</span> z   ^y <span class="sym">&lt;</span> self       ifTrue<span class="sym">: [((</span>self <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> tak<span class="sym">:</span> y z<span class="sym">:</span> z<span class="sym">)</span> tak<span class="sym">:        ((</span>y <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> tak<span class="sym">:</span> z z<span class="sym">:</span> self<span class="sym">)</span> z<span class="sym">: ((</span>z <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> tak<span class="sym">:</span> self z<span class="sym">:</span> y<span class="sym">)]</span>      ifFalse<span class="sym">: [</span>z<span class="sym">]! !!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>recursive<span class="sym">:</span> nArg to<span class="sym">:</span> output   <span class="sym">|</span> n <span class="sym">|</span>   n <span class="sym">:=</span> nArg.   output       nextPutAll<span class="sym">:</span> <span class="str">'Ack(3,'</span><span class="sym">,</span> n printString<span class="sym">,</span> <span class="str">'): '</span><span class="sym">;</span> print<span class="sym">: (</span><span class="num">3</span> ack<span class="sym">:</span> n<span class="sym">);</span> nl<span class="sym">;</span>      nextPutAll<span class="sym">:</span> <span class="str">'Fib('</span><span class="sym">;</span> print<span class="sym">:</span> <span class="num">27.0</span><span class="sym">+</span>n digits<span class="sym">:</span> <span class="num">1</span><span class="sym">;</span> nextPutAll<span class="sym">:</span> <span class="str">'): '</span><span class="sym">;</span>          print<span class="sym">: (</span><span class="num">27.0</span>d0<span class="sym">+</span>n<span class="sym">)</span> fib digits<span class="sym">:</span> <span class="num">1</span><span class="sym">;</span> nl.   n <span class="sym">:=</span> n <span class="sym">-</span> <span class="num">1</span>.   output       nextPutAll<span class="sym">:</span> <span class="str">'Tak('</span><span class="sym">, (</span><span class="num">3</span><span class="sym">*</span>n<span class="sym">)</span> printString<span class="sym">,</span> <span class="str">','</span><span class="sym">,         (</span><span class="num">2</span><span class="sym">*</span>n<span class="sym">)</span> printString<span class="sym">,</span> <span class="str">','</span><span class="sym">,</span> n printString<span class="sym">,</span> <span class="str">'): '</span><span class="sym">,           (</span><span class="num">3</span><span class="sym">*</span>n tak<span class="sym">:</span> <span class="num">2</span><span class="sym">*</span>n z<span class="sym">:</span> n<span class="sym">)</span> printString<span class="sym">;</span> nl<span class="sym">;</span>      nextPutAll<span class="sym">:</span> <span class="str">'Fib(3): '</span><span class="sym">;</span> print<span class="sym">:</span> <span class="num">3</span> fib<span class="sym">;</span> nl<span class="sym">;</span>      nextPutAll<span class="sym">:</span> <span class="str">'Tak(3.0,2.0,1.0): '</span><span class="sym">;</span>           print<span class="sym">: (</span><span class="num">3.0</span>d0 tak<span class="sym">:</span> <span class="num">2.0</span>d0 z<span class="sym">:</span> <span class="num">1.0</span>d0<span class="sym">)</span> digits<span class="sym">:</span> <span class="num">1</span><span class="sym">;</span> nl<span class="sym">! !!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmark scripts'</span><span class="sym">!</span>recursive   self recursive<span class="sym">:</span> self arg to<span class="sym">:</span> self stdout.   ^<span class="str">''</span><span class="sym">! !</span>

Tests recursive<span class="sym">!</span>
