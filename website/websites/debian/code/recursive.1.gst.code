<span class="hl com">&quot;* The Computer Language Shootout</span>
<span class="hl com">    http://shootout.alioth.debian.org/</span>
<span class="hl com">    contributed by Isaac Gouy</span>
<span class="hl com">    modified by Eliot Miranda *&quot;</span>!

!<span class="hl kwc">Float</span> <span class="hl kwb">methodsFor:</span> <span class="hl str">'benchmarking'</span>!fib   <span class="hl sym">^</span><span class="hl kwa">self</span> &lt; <span class="hl num">2.0</span> <span class="hl kwb">ifTrue:</span> <span class="hl sym">[</span><span class="hl num">1.0</span><span class="hl sym">]</span> <span class="hl kwb">ifFalse:</span> <span class="hl sym">[(</span><span class="hl kwa">self</span> <span class="hl kwb">-</span> <span class="hl num">2.0</span><span class="hl sym">)</span> <span class="hl kwb">fib +</span> <span class="hl sym">(</span><span class="hl kwa">self</span> <span class="hl kwb">-</span> <span class="hl num">1.0</span><span class="hl sym">)</span> <span class="hl kwb">fib</span><span class="hl sym">]</span>! !!<span class="hl kwc">Float</span> <span class="hl kwb">methodsFor:</span> <span class="hl str">'benchmarking'</span>!<span class="hl kwb">tak:</span> y <span class="hl kwb">z:</span> z   <span class="hl sym">^</span>y &lt; <span class="hl kwa">self</span>       <span class="hl kwb">ifTrue:</span> <span class="hl sym">[((</span><span class="hl kwa">self</span> <span class="hl kwb">-</span> <span class="hl num">1.0</span><span class="hl sym">)</span> <span class="hl kwb">tak:</span> y <span class="hl kwb">z:</span> z<span class="hl sym">)</span> <span class="hl kwb">tak:</span>        <span class="hl sym">((</span>y <span class="hl kwb">-</span> <span class="hl num">1.0</span><span class="hl sym">)</span> <span class="hl kwb">tak:</span> z <span class="hl kwb">z:</span> <span class="hl kwa">self</span><span class="hl sym">)</span> <span class="hl kwb">z:</span> <span class="hl sym">((</span>z <span class="hl kwb">-</span> <span class="hl num">1.0</span><span class="hl sym">)</span> <span class="hl kwb">tak:</span> <span class="hl kwa">self</span> <span class="hl kwb">z:</span> y<span class="hl sym">)]</span>      <span class="hl kwb">ifFalse:</span> <span class="hl sym">[</span>z<span class="hl sym">]</span>! !!<span class="hl kwc">SmallInteger</span> <span class="hl kwb">methodsFor:</span> <span class="hl str">'benchmarking'</span>!<span class="hl kwb">ack:</span> aSmallInteger   <span class="hl sym">^</span><span class="hl kwa">self</span> <span class="hl kwb">==</span> <span class="hl num">0</span>      <span class="hl kwb">ifTrue:</span> <span class="hl sym">[</span>aSmallInteger <span class="hl kwb">+</span> <span class="hl num">1</span><span class="hl sym">]</span>      <span class="hl kwb">ifFalse:</span> <span class="hl sym">[</span>         aSmallInteger <span class="hl kwb">==</span> <span class="hl num">0</span>            <span class="hl kwb">ifTrue:</span> <span class="hl sym">[</span><span class="hl kwa">self</span> <span class="hl kwb">-</span> <span class="hl num">1</span> <span class="hl kwb">ack:</span>  <span class="hl num">1</span><span class="hl sym">]</span>            <span class="hl kwb">ifFalse:</span> <span class="hl sym">[</span><span class="hl kwa">self</span> <span class="hl kwb">-</span> <span class="hl num">1</span> <span class="hl kwb">ack:</span> <span class="hl sym">(</span><span class="hl kwa">self</span> <span class="hl kwb">ack:</span> aSmallInteger <span class="hl kwb">-</span> <span class="hl num">1</span><span class="hl sym">)] ]</span>! !!<span class="hl kwc">SmallInteger</span> <span class="hl kwb">methodsFor:</span> <span class="hl str">'benchmarking'</span>!fib   <span class="hl sym">^</span><span class="hl kwa">self</span> &lt; <span class="hl num">2</span> <span class="hl kwb">ifTrue:</span> <span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]</span> <span class="hl kwb">ifFalse:</span> <span class="hl sym">[(</span><span class="hl kwa">self</span> <span class="hl kwb">-</span> <span class="hl num">2</span><span class="hl sym">)</span> <span class="hl kwb">fib +</span> <span class="hl sym">(</span><span class="hl kwa">self</span> <span class="hl kwb">-</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwb">fib</span><span class="hl sym">]</span>! !!<span class="hl kwc">SmallInteger</span> <span class="hl kwb">methodsFor:</span> <span class="hl str">'benchmarking'</span>!<span class="hl kwb">tak:</span> y <span class="hl kwb">z:</span> z   <span class="hl sym">^</span>y &lt; <span class="hl kwa">self</span>       <span class="hl kwb">ifTrue:</span> <span class="hl sym">[((</span><span class="hl kwa">self</span> <span class="hl kwb">-</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwb">tak:</span> y <span class="hl kwb">z:</span> z<span class="hl sym">)</span> <span class="hl kwb">tak:</span>        <span class="hl sym">((</span>y <span class="hl kwb">-</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwb">tak:</span> z <span class="hl kwb">z:</span> <span class="hl kwa">self</span><span class="hl sym">)</span> <span class="hl kwb">z:</span> <span class="hl sym">((</span>z <span class="hl kwb">-</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwb">tak:</span> <span class="hl kwa">self</span> <span class="hl kwb">z:</span> y<span class="hl sym">)]</span>      <span class="hl kwb">ifFalse:</span> <span class="hl sym">[</span>z<span class="hl sym">]</span>! !!<span class="hl kwc">Tests</span> <span class="hl kwb">class methodsFor:</span> <span class="hl str">'benchmarking'</span>!<span class="hl kwb">recursive:</span> nArg <span class="hl kwb">to:</span> output   <span class="hl kwd">| n |</span>   n <span class="hl sym">:=</span> nArg<span class="hl sym">.</span>   output       <span class="hl kwb">nextPutAll:</span> <span class="hl str">'Ack(3,'</span>, <span class="hl kwb">n printString</span>, <span class="hl str">'): '</span><span class="hl sym">;</span> <span class="hl kwb">print:</span> <span class="hl sym">(</span><span class="hl num">3</span> <span class="hl kwb">ack:</span> n<span class="hl sym">);</span> <span class="hl kwb">nl</span><span class="hl sym">;</span>      <span class="hl kwb">nextPutAll:</span> <span class="hl str">'Fib('</span><span class="hl sym">;</span> <span class="hl kwb">print:</span> <span class="hl num">27.0</span><span class="hl kwb">+</span>n <span class="hl kwb">digits:</span> <span class="hl num">1</span><span class="hl sym">;</span> <span class="hl kwb">nextPutAll:</span> <span class="hl str">'): '</span><span class="hl sym">;</span>          <span class="hl kwb">print:</span> <span class="hl sym">(</span><span class="hl num">27.0</span>d0<span class="hl kwb">+</span>n<span class="hl sym">)</span> <span class="hl kwb">fib digits:</span> <span class="hl num">1</span><span class="hl sym">;</span> <span class="hl kwb">nl</span><span class="hl sym">.</span>   n <span class="hl sym">:=</span> n <span class="hl kwb">-</span> <span class="hl num">1</span><span class="hl sym">.</span>   output       <span class="hl kwb">nextPutAll:</span> <span class="hl str">'Tak('</span>, <span class="hl sym">(</span><span class="hl num">3</span><span class="hl kwb">*</span>n<span class="hl sym">)</span> <span class="hl kwb">printString</span>, <span class="hl str">','</span>,         <span class="hl sym">(</span><span class="hl num">2</span><span class="hl kwb">*</span>n<span class="hl sym">)</span> <span class="hl kwb">printString</span>, <span class="hl str">','</span>, <span class="hl kwb">n printString</span>, <span class="hl str">'): '</span>,           <span class="hl sym">(</span><span class="hl num">3</span><span class="hl kwb">*</span>n <span class="hl kwb">tak:</span> <span class="hl num">2</span><span class="hl kwb">*</span>n <span class="hl kwb">z:</span> n<span class="hl sym">)</span> <span class="hl kwb">printString</span><span class="hl sym">;</span> <span class="hl kwb">nl</span><span class="hl sym">;</span>      <span class="hl kwb">nextPutAll:</span> <span class="hl str">'Fib(3): '</span><span class="hl sym">;</span> <span class="hl kwb">print:</span> <span class="hl num">3</span> <span class="hl kwb">fib</span><span class="hl sym">;</span> <span class="hl kwb">nl</span><span class="hl sym">;</span>      <span class="hl kwb">nextPutAll:</span> <span class="hl str">'Tak(3.0,2.0,1.0): '</span><span class="hl sym">;</span>           <span class="hl kwb">print:</span> <span class="hl sym">(</span><span class="hl num">3.0</span>d0 <span class="hl kwb">tak:</span> <span class="hl num">2.0</span>d0 <span class="hl kwb">z:</span> <span class="hl num">1.0</span>d0<span class="hl sym">)</span> <span class="hl kwb">digits:</span> <span class="hl num">1</span><span class="hl sym">;</span> <span class="hl kwb">nl</span>! !!<span class="hl kwc">Tests</span> <span class="hl kwb">class methodsFor:</span> <span class="hl str">'benchmark scripts'</span>!recursive   <span class="hl kwa">self</span> <span class="hl kwb">recursive:</span> <span class="hl kwa">self</span> <span class="hl kwb">arg to:</span> <span class="hl kwa">self</span> <span class="hl kwb">stdout</span><span class="hl sym">.   ^</span><span class="hl str">''</span>! !

<span class="hl kwc">Tests</span> <span class="hl kwb">recursive</span>!
