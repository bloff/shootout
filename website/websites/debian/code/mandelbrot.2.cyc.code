<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Greg Buchholz</span>
<span class="com">   converted to Cyclone by Brent Fulgham (with help from the</span>
<span class="com">                Cyclone Rewrite program.)</span>
<span class="com"></span>
<span class="com">*/</span>

<span class="dir">#include&lt;stdio.h&gt;</span>

<span class="kwc">extern</span> <span class="str">&quot;C&quot;</span> <span class="sym">{</span>
    <span class="kwb">int</span> <span class="kwd">atoi</span><span class="sym">(</span><span class="kwb">const char</span><span class="sym">*</span> nptr<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">main</span> <span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> ??argv<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwb">int</span> w<span class="sym">,</span> h<span class="sym">,</span> bit_num <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwb">char</span> byte_acc <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwb">int</span> i<span class="sym">,</span> iter <span class="sym">=</span> <span class="num">50</span><span class="sym">;</span>
    <span class="kwb">double</span> x<span class="sym">,</span> y<span class="sym">,</span> limit <span class="sym">=</span> <span class="num">2.0</span><span class="sym">;</span>
    <span class="kwb">double</span> Zr<span class="sym">,</span> Zi<span class="sym">,</span> Cr<span class="sym">,</span> Ci<span class="sym">,</span> Tr<span class="sym">,</span> Ti<span class="sym">;</span>

    w <span class="sym">=</span> h <span class="sym">=</span> <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span>

    <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">%d %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>w<span class="sym">,</span>h<span class="sym">);</span>

    <span class="kwa">for</span><span class="sym">(</span>y<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>y<span class="sym">&lt;</span>h<span class="sym">;++</span>y<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwa">for</span><span class="sym">(</span>x<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>x<span class="sym">&lt;</span>w<span class="sym">;++</span>x<span class="sym">)</span>
        <span class="sym">{</span>
            Zr <span class="sym">=</span> Zi <span class="sym">=</span> Tr <span class="sym">=</span> Ti <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
            Cr <span class="sym">= (</span><span class="num">2.0</span><span class="sym">*</span>x<span class="sym">/</span>w <span class="sym">-</span> <span class="num">1.5</span><span class="sym">);</span> Ci<span class="sym">=(</span><span class="num">2.0</span><span class="sym">*</span>y<span class="sym">/</span>h <span class="sym">-</span> <span class="num">1.0</span><span class="sym">);</span>

            <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>i<span class="sym">&lt;</span>iter <span class="sym">&amp;&amp; (</span>Tr<span class="sym">+</span>Ti <span class="sym">&lt;=</span> limit<span class="sym">*</span>limit<span class="sym">);++</span>i<span class="sym">)</span>
            <span class="sym">{</span>
                Zi <span class="sym">=</span> <span class="num">2.0</span><span class="sym">*</span>Zr<span class="sym">*</span>Zi <span class="sym">+</span> Ci<span class="sym">;</span>
                Zr <span class="sym">=</span> Tr <span class="sym">-</span> Ti <span class="sym">+</span> Cr<span class="sym">;</span>
                Tr <span class="sym">=</span> Zr <span class="sym">*</span> Zr<span class="sym">;</span>
                Ti <span class="sym">=</span> Zi <span class="sym">*</span> Zi<span class="sym">;</span>
            <span class="sym">}</span>

            byte_acc <span class="sym">&lt;&lt;=</span> <span class="num">1</span><span class="sym">;</span>
            <span class="kwa">if</span><span class="sym">(</span>Tr<span class="sym">+</span>Ti <span class="sym">&lt;=</span> limit<span class="sym">*</span>limit<span class="sym">)</span> byte_acc <span class="sym">|=</span> <span class="num">0x01</span><span class="sym">;</span>

            <span class="sym">++</span>bit_num<span class="sym">;</span>

            <span class="kwa">if</span><span class="sym">(</span>bit_num <span class="sym">==</span> <span class="num">8</span><span class="sym">)</span>
            <span class="sym">{</span>
                <span class="kwd">putc</span><span class="sym">(</span>byte_acc<span class="sym">,</span>stdout<span class="sym">);</span>
                byte_acc <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
                bit_num <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
            <span class="sym">}</span>
            <span class="kwa">else if</span><span class="sym">(</span>x <span class="sym">==</span> w<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
            <span class="sym">{</span>
                byte_acc <span class="sym">&lt;&lt;= (</span><span class="num">8</span><span class="sym">-</span>w<span class="sym">%</span><span class="num">8</span><span class="sym">);</span>
                <span class="kwd">putc</span><span class="sym">(</span>byte_acc<span class="sym">,</span>stdout<span class="sym">);</span>
                byte_acc <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
                bit_num <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
    <span class="sym">}</span>
<span class="sym">}</span>

