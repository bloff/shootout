#<span class="sym">!</span>.<span class="sym">/</span>parrot <span class="sym">-</span>Oc <span class="sym">-</span>Cj
#
# Ack by Leopold Toetsch
# Fib <span class="kwa">and</span> Tak by Joshua Isom

# use less registers <span class="sym">(</span>leo<span class="sym">)</span>
# time .<span class="sym">/</span>parrot <span class="sym">-</span>Oc <span class="sym">-</span>Cj recursive<span class="sym">-</span><span class="num">2</span>.pir <span class="num">11</span>
# real <span class="num">2.32</span> s   <span class="sym">(</span>AMD X2&#64;<span class="num">2000</span><span class="sym">)</span>

.<span class="kwa">sub</span> main <span class="sym">:</span>main
    .param pmc argv
    .<span class="kwa">local int</span> argc<span class="sym">,</span> n
    argc <span class="sym">=</span> argv
    n <span class="sym">=</span> <span class="num">1</span>
    unless argc <span class="sym">==</span> <span class="num">2</span> goto argsok
    $S0 <span class="sym">=</span> argv<span class="sym">[</span><span class="num">1</span><span class="sym">]</span>
    n <span class="sym">=</span> $S0
argsok<span class="sym">:</span>
    $P0 <span class="sym">=</span> getinterp
    $P0.<span class="str">'recursion_limit'</span><span class="sym">(</span><span class="num">100000</span><span class="sym">)</span>

    .<span class="kwa">local</span> pmc array
    array <span class="sym">=</span> new .FixedFloatArray
    array <span class="sym">=</span> <span class="num">11</span>

    <span class="kwa">dec</span> n

    $I0 <span class="sym">=</span> n <span class="sym">+</span> <span class="num">1</span>
    $I1 <span class="sym">=</span> ack<span class="sym">(</span><span class="num">3</span><span class="sym">,</span> $I0<span class="sym">)</span>
    array<span class="sym">[</span><span class="num">0</span><span class="sym">] =</span> $I0
    array<span class="sym">[</span><span class="num">1</span><span class="sym">] =</span> $I1

    $N0 <span class="sym">=</span> <span class="num">28.0</span> <span class="sym">+</span> n
    array<span class="sym">[</span><span class="num">2</span><span class="sym">] =</span> $N0
    $N0 <span class="sym">=</span> FibNum<span class="sym">(</span>$N0<span class="sym">)</span>
    array<span class="sym">[</span><span class="num">3</span><span class="sym">] =</span> $N0

    $I0 <span class="sym">=</span> n <span class="sym">*</span> <span class="num">3</span>
    $I1 <span class="sym">=</span> n <span class="sym">*</span> <span class="num">2</span>
    array<span class="sym">[</span><span class="num">4</span><span class="sym">] =</span> $I0
    array<span class="sym">[</span><span class="num">5</span><span class="sym">] =</span> $I1
    array<span class="sym">[</span><span class="num">6</span><span class="sym">] =</span> n
    $I0 <span class="sym">=</span> TakInt<span class="sym">(</span>$I0<span class="sym">,</span> $I1<span class="sym">,</span> n<span class="sym">)</span>
    array<span class="sym">[</span><span class="num">7</span><span class="sym">] =</span> $I0

    $I0 <span class="sym">=</span> FibInt<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
    array<span class="sym">[</span><span class="num">8</span><span class="sym">] =</span> $I0

    $N0 <span class="sym">=</span> TakNum<span class="sym">(</span><span class="num">3.0</span><span class="sym">,</span> <span class="num">2.0</span><span class="sym">,</span> <span class="num">1.0</span><span class="sym">)</span>
    array<span class="sym">[</span><span class="num">9</span><span class="sym">] =</span> $N0

    $S0 <span class="sym">=</span> sprintf <span class="sym">&lt;&lt;</span><span class="str">&quot;END&quot;</span><span class="sym">,</span> array
Ack<span class="sym">(</span><span class="num">3</span><span class="sym">,%</span>d<span class="sym">): %</span>d
Fib<span class="sym">(%</span><span class="num">.1</span>f<span class="sym">): %</span><span class="num">.1</span>f
Tak<span class="sym">(%</span>d<span class="sym">,%</span>d<span class="sym">,%</span>d<span class="sym">): %</span>d
Fib<span class="sym">(</span><span class="num">3</span><span class="sym">): %</span>d
Tak<span class="sym">(</span><span class="num">3.0</span><span class="sym">,</span><span class="num">2.0</span><span class="sym">,</span><span class="num">1.0</span><span class="sym">): %</span><span class="num">.1</span>f
<span class="kwa">END</span>
    print $S0
.<span class="kwa">end</span>

.<span class="kwa">sub</span> ack
    .param <span class="kwa">int</span> x
    .param <span class="kwa">int</span> y
    unless x goto a1
    unless y goto a2
    <span class="kwa">dec</span> y
    y <span class="sym">=</span> ack<span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">)</span>
    <span class="kwa">dec</span> x
    .return ack<span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">)</span>
a1<span class="sym">:</span>
    <span class="kwa">inc</span> y
    .return <span class="sym">(</span>y<span class="sym">)</span>
a2<span class="sym">:</span>
    <span class="kwa">dec</span> x
    .return ack<span class="sym">(</span>x<span class="sym">,</span> <span class="num">1</span><span class="sym">)</span>
.<span class="kwa">end</span>

.<span class="kwa">sub</span> FibInt
    .param <span class="kwa">int</span> n
    unless n <span class="sym">&lt;</span> <span class="num">2</span> goto endif
    .return<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
endif<span class="sym">:</span>
    .<span class="kwa">local int</span> tmp
    tmp <span class="sym">=</span> n <span class="sym">-</span> <span class="num">2</span>
    $I0 <span class="sym">=</span> FibInt<span class="sym">(</span>tmp<span class="sym">)</span>
    tmp <span class="sym">=</span> n <span class="sym">-</span> <span class="num">1</span>
    $I1 <span class="sym">=</span> FibInt<span class="sym">(</span>tmp<span class="sym">)</span>
    $I0 <span class="sym">+=</span> $I1
    .return<span class="sym">(</span>$I0<span class="sym">)</span>
.<span class="kwa">end</span>

.<span class="kwa">sub</span> FibNum
    .param num n
    unless n <span class="sym">&lt;</span> <span class="num">2.0</span> goto endif
    .return<span class="sym">(</span><span class="num">1.0</span><span class="sym">)</span>
endif<span class="sym">:</span>
    .<span class="kwa">local</span> num tmp
    tmp <span class="sym">=</span> n <span class="sym">-</span> <span class="num">2.0</span>
    $N0 <span class="sym">=</span> FibNum<span class="sym">(</span>tmp<span class="sym">)</span>
    <span class="kwa">dec</span> n
    n <span class="sym">=</span> FibNum<span class="sym">(</span>n<span class="sym">)</span>
    $N0 <span class="sym">+=</span> n
    .return<span class="sym">(</span>$N0<span class="sym">)</span>
.<span class="kwa">end</span>

.<span class="kwa">sub</span> TakNum
    .param float x
    .param float y
    .param float z
    unless y <span class="sym">&gt;=</span> x goto endif
    .return<span class="sym">(</span>z<span class="sym">)</span>
endif<span class="sym">:</span>
    .<span class="kwa">local</span> float tmp
    tmp <span class="sym">=</span> x <span class="sym">-</span> <span class="num">1</span>
    $N0 <span class="sym">=</span> TakNum<span class="sym">(</span>tmp<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">)</span>
    tmp <span class="sym">=</span> y <span class="sym">-</span> <span class="num">1</span>
    $N1 <span class="sym">=</span> TakNum<span class="sym">(</span>tmp<span class="sym">,</span> z<span class="sym">,</span> x<span class="sym">)</span>
    <span class="kwa">dec</span> z
    z <span class="sym">=</span> TakNum<span class="sym">(</span>z<span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">)</span>
    .return TakNum<span class="sym">(</span>$N0<span class="sym">,</span> $N1<span class="sym">,</span> z<span class="sym">)</span>
.<span class="kwa">end</span>

.<span class="kwa">sub</span> TakInt
    .param <span class="kwa">int</span> x
    .param <span class="kwa">int</span> y
    .param <span class="kwa">int</span> z
    unless y <span class="sym">&gt;=</span> x goto endif
    .return<span class="sym">(</span>z<span class="sym">)</span>
endif<span class="sym">:</span>
    .<span class="kwa">local int</span> tmp
    tmp <span class="sym">=</span> x <span class="sym">-</span> <span class="num">1</span>
    $I0 <span class="sym">=</span> TakInt<span class="sym">(</span>tmp<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">)</span>
    tmp <span class="sym">=</span> y <span class="sym">-</span> <span class="num">1</span>
    tmp <span class="sym">=</span> TakInt<span class="sym">(</span>tmp<span class="sym">,</span> z<span class="sym">,</span> x<span class="sym">)</span>
    <span class="kwa">dec</span> z
    z   <span class="sym">=</span> TakInt<span class="sym">(</span>z<span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">)</span>
    .return TakInt<span class="sym">(</span>$I0<span class="sym">,</span> tmp<span class="sym">,</span> z<span class="sym">)</span>
.<span class="kwa">end</span>

