<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Jochen Hinrichsen</span>
<span class="com"></span>
<span class="com">*/</span>

def <span class="kwd">nsieve</span><span class="sym">(</span>m<span class="sym">) {</span>
   def bits <span class="sym">=</span> <span class="kwa">new</span> java<span class="sym">.</span>util<span class="sym">.</span><span class="kwd">BitSet</span><span class="sym">(</span>m<span class="sym">)</span>
   bits<span class="sym">.</span><span class="kwd">set</span><span class="sym">(</span><span class="num">2</span><span class="sym">,</span> m<span class="sym">,</span> <span class="kwa">true</span><span class="sym">)</span>
   <span class="kwa">for</span> <span class="sym">(</span>i in <span class="num">2</span><span class="sym">..</span>m<span class="sym">) {</span>
      <span class="kwa">if</span> <span class="sym">(</span>bits<span class="sym">.</span><span class="kwd">get</span><span class="sym">(</span>i<span class="sym">)) {</span>
         <span class="sym">(</span>i<span class="sym">+</span>i<span class="sym">..</span>m<span class="sym">).</span><span class="kwd">step</span><span class="sym">(</span>i<span class="sym">) {</span> j <span class="sym">-&gt;</span>
            bits<span class="sym">.</span><span class="kwd">clear</span><span class="sym">(</span>j<span class="sym">)</span>
         <span class="sym">}</span>
      <span class="sym">}</span>
   <span class="sym">}</span>
   bits<span class="sym">.</span><span class="kwd">cardinality</span><span class="sym">()</span>
<span class="sym">}</span>

def <span class="kwd">run</span><span class="sym">(</span>n<span class="sym">) {</span>
   <span class="kwb">int</span> m <span class="sym">=</span> <span class="num">2</span><span class="sym">**</span>n<span class="sym">*</span><span class="num">10000</span>
   <span class="kwd">print</span><span class="sym">(</span><span class="str">&quot;Primes up to ${m.toString().padLeft(8)}&quot;</span><span class="sym">)</span>
   <span class="kwd">println</span><span class="sym">(</span><span class="kwd">nsieve</span><span class="sym">(</span>m<span class="sym">).</span><span class="kwd">toString</span><span class="sym">().</span><span class="kwd">padLeft</span><span class="sym">(</span><span class="num">9</span><span class="sym">))</span>
<span class="sym">}</span>

def n <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">==</span> <span class="num">0</span> ? <span class="num">2</span> <span class="sym">:</span> args<span class="sym">[</span><span class="num">0</span><span class="sym">].</span><span class="kwd">toInteger</span><span class="sym">()</span>
n <span class="sym">= (</span><span class="kwb">int</span><span class="sym">)</span> Math<span class="sym">.</span><span class="kwd">max</span><span class="sym">(</span>n<span class="sym">,</span> <span class="num">2</span><span class="sym">)</span>

<span class="kwd">run</span><span class="sym">(</span>n<span class="sym">)</span>
<span class="kwd">run</span><span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
<span class="kwd">run</span><span class="sym">(</span>n<span class="sym">-</span><span class="num">2</span><span class="sym">)</span>

