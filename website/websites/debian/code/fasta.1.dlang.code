<span class="slc">// The Computer Language Benchmarks Game</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>
<span class="slc">// converted to D by Dave Fladebo</span>
<span class="slc">// Faster version by bearophile</span>

<span class="kwa">import</span> std<span class="sym">.</span>cstream<span class="sym">,</span> std<span class="sym">.</span>stream<span class="sym">,</span> std<span class="sym">.</span>conv<span class="sym">;</span>

<span class="kwa">class</span> Random <span class="sym">{</span>
    <span class="kwa">private</span><span class="sym">:</span>
        <span class="kwa">float</span> seed <span class="sym">=</span> <span class="num">42</span><span class="sym">;</span>
        <span class="kwa">const int</span> IA <span class="sym">=</span> <span class="num">3877</span><span class="sym">,</span> IC <span class="sym">=</span> <span class="num">29573</span><span class="sym">,</span> IM <span class="sym">=</span> <span class="num">139968</span><span class="sym">;</span>

    <span class="kwa">public</span><span class="sym">:</span>
        <span class="kwa">final float</span> <span class="kwd">genRandom</span><span class="sym">(</span><span class="kwa">float</span> max<span class="sym">) {</span>
            <span class="kwa">return</span> max <span class="sym">* ((</span>seed <span class="sym">= (</span>seed <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">) %</span> IM<span class="sym">) * (</span><span class="num">1.0</span> <span class="sym">/</span> IM<span class="sym">));</span>
        <span class="sym">}</span>
<span class="sym">}</span>


<span class="kwa">class</span> Fasta<span class="sym">:</span> Random <span class="sym">{</span>
    <span class="kwa">public</span><span class="sym">:</span>
        <span class="kwa">enum</span> TableType <span class="sym">{</span>
            iub<span class="sym">,</span>
            homosapiens
        <span class="sym">}</span>

        <span class="kwa">this</span><span class="sym">() {</span>
            bso <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">BufferedStream</span><span class="sym">(</span>dout<span class="sym">);</span>
        <span class="sym">}</span>

        <span class="sym">~</span><span class="kwa">this</span><span class="sym">() {</span>
            bso<span class="sym">.</span><span class="kwd">close</span><span class="sym">();</span>
        <span class="sym">}</span>

        <span class="kwa">final void</span> <span class="kwd">makeRepeatFasta</span><span class="sym">(</span><span class="kwa">char</span><span class="sym">[]</span> id<span class="sym">,</span> <span class="kwa">char</span><span class="sym">[]</span> desc<span class="sym">,</span> <span class="kwa">int</span> n<span class="sym">) {</span>
            <span class="kwa">const int</span> length <span class="sym">=</span> <span class="num">60</span><span class="sym">;</span>
            <span class="kwa">int</span> k <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

            bso<span class="sym">.</span><span class="kwd">writefln</span><span class="sym">(</span><span class="str">&quot;&gt;&quot;</span><span class="sym">,</span> id<span class="sym">,</span> <span class="str">&quot; &quot;</span><span class="sym">,</span> desc<span class="sym">);</span>
            <span class="kwa">char</span><span class="sym">[</span>length<span class="sym">]</span> line<span class="sym">;</span>
            <span class="kwa">while</span> <span class="sym">(</span>n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {</span>
                <span class="kwa">int</span> m <span class="sym">=</span> n <span class="sym">&lt;</span> length ? n <span class="sym">:</span> length<span class="sym">;</span>
                <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">int</span> j <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> j <span class="sym">&lt;</span> m<span class="sym">;</span> j<span class="sym">++,</span> k<span class="sym">++) {</span>
                    <span class="kwa">if</span> <span class="sym">(</span>k <span class="sym">&gt;=</span> alu<span class="sym">.</span>length<span class="sym">)</span>
                        k <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
                    line<span class="sym">[</span>j<span class="sym">] =</span> alu<span class="sym">[</span>k<span class="sym">];</span>
                <span class="sym">}</span>
                bso<span class="sym">.</span><span class="kwd">writeLine</span><span class="sym">(</span>line<span class="sym">[</span><span class="num">0</span> <span class="sym">..</span> m<span class="sym">]);</span>
                n <span class="sym">-=</span> length<span class="sym">;</span>
            <span class="sym">}</span>
        <span class="sym">}</span>

        <span class="kwa">final void</span> <span class="kwd">makeRandomFasta</span><span class="sym">(</span><span class="kwa">char</span><span class="sym">[]</span> id<span class="sym">,</span> <span class="kwa">char</span><span class="sym">[]</span> desc<span class="sym">,</span> TableType tableType<span class="sym">,</span> <span class="kwa">int</span> n<span class="sym">) {</span>
            <span class="kwa">const int</span> length <span class="sym">=</span> <span class="num">60</span><span class="sym">;</span>
            IUB<span class="sym">[]</span> table<span class="sym">;</span>

            <span class="kwa">switch</span> <span class="sym">(</span>tableType<span class="sym">) {</span>
                <span class="kwa">case</span> TableType<span class="sym">.</span>iub<span class="sym">:</span>
                    table <span class="sym">=</span> iub<span class="sym">;</span>
                    <span class="kwa">break</span><span class="sym">;</span>
                <span class="kwa">default</span><span class="sym">:</span>
                    table <span class="sym">=</span> homosapiens<span class="sym">;</span>
                    <span class="kwa">break</span><span class="sym">;</span>
            <span class="sym">}</span>

            bso<span class="sym">.</span><span class="kwd">writefln</span><span class="sym">(</span><span class="str">&quot;&gt;&quot;</span><span class="sym">,</span> id<span class="sym">,</span> <span class="str">&quot; &quot;</span><span class="sym">,</span> desc<span class="sym">);</span>
            <span class="kwd">makeCumulative</span><span class="sym">(</span>table<span class="sym">);</span>
            <span class="kwa">char</span><span class="sym">[</span>length<span class="sym">]</span> line<span class="sym">;</span>
            <span class="kwa">while</span> <span class="sym">(</span>n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {</span>
                <span class="kwa">int</span> m <span class="sym">=</span> n <span class="sym">&lt;</span> length ? n <span class="sym">:</span> length<span class="sym">;</span>
                <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">int</span> j<span class="sym">;</span> j <span class="sym">&lt;</span> m<span class="sym">;</span> j<span class="sym">++) {</span>
                    <span class="kwa">float</span> rval <span class="sym">=</span> <span class="kwd">genRandom</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
                    <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">int</span> i<span class="sym">;</span> i <span class="sym">&lt;</span> table<span class="sym">.</span>length<span class="sym">;</span> i<span class="sym">++) {</span>
                        <span class="kwa">if</span> <span class="sym">(</span>rval <span class="sym">&lt;</span> table<span class="sym">[</span>i<span class="sym">].</span>p<span class="sym">) {</span>
                            line<span class="sym">[</span>j<span class="sym">] =</span> table<span class="sym">[</span>i<span class="sym">].</span>c<span class="sym">;</span>
                            <span class="kwa">break</span><span class="sym">;</span>
                        <span class="sym">}</span>
                    <span class="sym">}</span>
                <span class="sym">}</span>
                bso<span class="sym">.</span><span class="kwd">writeLine</span><span class="sym">(</span>line<span class="sym">[</span><span class="num">0</span> <span class="sym">..</span> m<span class="sym">]);</span>
                n <span class="sym">-=</span> length<span class="sym">;</span>
            <span class="sym">}</span>
        <span class="sym">}</span>


    <span class="kwa">private</span><span class="sym">:</span>
        <span class="kwa">struct</span> IUB <span class="sym">{</span>
            <span class="kwa">float</span> p<span class="sym">;</span>
            <span class="kwa">char</span> c<span class="sym">;</span>
        <span class="sym">}</span>

        BufferedStream bso<span class="sym">;</span>

        IUB<span class="sym">[]</span> iub <span class="sym">= [</span><span class="kwd">IUB</span><span class="sym">(</span><span class="num">0.27</span><span class="sym">,</span> <span class="str">'a'</span><span class="sym">),</span>
                     <span class="kwd">IUB</span><span class="sym">(</span><span class="num">0.12</span><span class="sym">,</span> <span class="str">'c'</span><span class="sym">),</span>
                     <span class="kwd">IUB</span><span class="sym">(</span><span class="num">0.12</span><span class="sym">,</span> <span class="str">'g'</span><span class="sym">),</span>
                     <span class="kwd">IUB</span><span class="sym">(</span><span class="num">0.27</span><span class="sym">,</span> <span class="str">'t'</span><span class="sym">),</span>
                     <span class="kwd">IUB</span><span class="sym">(</span><span class="num">0.02</span><span class="sym">,</span> <span class="str">'B'</span><span class="sym">),</span>
                     <span class="kwd">IUB</span><span class="sym">(</span><span class="num">0.02</span><span class="sym">,</span> <span class="str">'D'</span><span class="sym">),</span>
                     <span class="kwd">IUB</span><span class="sym">(</span><span class="num">0.02</span><span class="sym">,</span> <span class="str">'H'</span><span class="sym">),</span>
                     <span class="kwd">IUB</span><span class="sym">(</span><span class="num">0.02</span><span class="sym">,</span> <span class="str">'K'</span><span class="sym">),</span>
                     <span class="kwd">IUB</span><span class="sym">(</span><span class="num">0.02</span><span class="sym">,</span> <span class="str">'M'</span><span class="sym">),</span>
                     <span class="kwd">IUB</span><span class="sym">(</span><span class="num">0.02</span><span class="sym">,</span> <span class="str">'N'</span><span class="sym">),</span>
                     <span class="kwd">IUB</span><span class="sym">(</span><span class="num">0.02</span><span class="sym">,</span> <span class="str">'R'</span><span class="sym">),</span>
                     <span class="kwd">IUB</span><span class="sym">(</span><span class="num">0.02</span><span class="sym">,</span> <span class="str">'S'</span><span class="sym">),</span>
                     <span class="kwd">IUB</span><span class="sym">(</span><span class="num">0.02</span><span class="sym">,</span> <span class="str">'V'</span><span class="sym">),</span>
                     <span class="kwd">IUB</span><span class="sym">(</span><span class="num">0.02</span><span class="sym">,</span> <span class="str">'W'</span><span class="sym">),</span>
                     <span class="kwd">IUB</span><span class="sym">(</span><span class="num">0.02</span><span class="sym">,</span> <span class="str">'Y'</span><span class="sym">)];</span>

        IUB<span class="sym">[]</span> homosapiens <span class="sym">= [</span><span class="kwd">IUB</span><span class="sym">(</span><span class="num">0.3029549426680</span><span class="sym">,</span> <span class="str">'a'</span><span class="sym">),</span>
                             <span class="kwd">IUB</span><span class="sym">(</span><span class="num">0.1979883004921</span><span class="sym">,</span> <span class="str">'c'</span><span class="sym">),</span>
                             <span class="kwd">IUB</span><span class="sym">(</span><span class="num">0.1975473066391</span><span class="sym">,</span> <span class="str">'g'</span><span class="sym">),</span>
                             <span class="kwd">IUB</span><span class="sym">(</span><span class="num">0.3015094502008</span><span class="sym">,</span> <span class="str">'t'</span><span class="sym">)];</span>

        <span class="kwa">const char</span><span class="sym">[]</span> alu <span class="sym">=</span> <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>
                           <span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>
                           <span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>
                           <span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>
                           <span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>
                           <span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>
                           <span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="sym">;</span>

        <span class="kwa">void</span> <span class="kwd">makeCumulative</span><span class="sym">(</span>IUB<span class="sym">[]</span> table<span class="sym">) {</span>
            <span class="kwa">float</span> prob <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
            <span class="kwa">foreach</span><span class="sym">(</span>ref iub<span class="sym">;</span> table<span class="sym">) {</span>
                prob <span class="sym">+=</span> iub<span class="sym">.</span>p<span class="sym">;</span>
                iub<span class="sym">.</span>p <span class="sym">=</span> prob<span class="sym">;</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
<span class="sym">}</span>


<span class="kwa">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwa">char</span><span class="sym">[][]</span> args<span class="sym">) {</span>
    <span class="kwa">int</span> n <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">==</span> <span class="num">2</span> ? <span class="kwd">toInt</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">;</span>

    scope Fasta fasta <span class="sym">=</span> <span class="kwa">new</span> Fasta<span class="sym">;</span>

    fasta<span class="sym">.</span><span class="kwd">makeRepeatFasta</span><span class="sym">(</span><span class="str">&quot;ONE&quot;</span><span class="sym">,</span> <span class="str">&quot;Homo sapiens alu&quot;</span><span class="sym">,</span> n<span class="sym">*</span><span class="num">2</span><span class="sym">);</span>
    fasta<span class="sym">.</span><span class="kwd">makeRandomFasta</span><span class="sym">(</span><span class="str">&quot;TWO&quot;</span><span class="sym">,</span> <span class="str">&quot;IUB ambiguity codes&quot;</span><span class="sym">,</span> Fasta<span class="sym">.</span>TableType<span class="sym">.</span>iub<span class="sym">,</span> n<span class="sym">*</span><span class="num">3</span><span class="sym">);</span>
    fasta<span class="sym">.</span><span class="kwd">makeRandomFasta</span><span class="sym">(</span><span class="str">&quot;THREE&quot;</span><span class="sym">,</span> <span class="str">&quot;Homo sapiens frequency&quot;</span><span class="sym">,</span> Fasta<span class="sym">.</span>TableType<span class="sym">.</span>homosapiens<span class="sym">,</span> n<span class="sym">*</span><span class="num">5</span><span class="sym">);</span>
<span class="sym">}</span>
