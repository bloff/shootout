<span class="com">/*</span>
<span class="com">  The Computer Language Benchmarks Game</span>
<span class="com">  http://shootout.alioth.debian.org/</span>
<span class="com">  Modifications to Josh Goldfoot version by Byron Foster by Miguel de Icaza</span>
<span class="com">  which was modified originally from the Nice entry by Isaac Gouy</span>
<span class="com">*/</span>
<span class="kwa">using</span> System<span class="sym">;</span>
<span class="kwa">using</span> System<span class="sym">.</span>Text<span class="sym">;</span>
<span class="kwa">using</span> System<span class="sym">.</span>Text<span class="sym">.</span>RegularExpressions<span class="sym">;</span>

<span class="kwa">public class</span> regexdna
<span class="sym">{</span>

  <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">Main</span><span class="sym">(</span>String<span class="sym">[]</span> args<span class="sym">)</span>
  <span class="sym">{</span>
    StringBuilder sb <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">StringBuilder</span><span class="sym">();</span>
    <span class="kwb">int</span> initialLength <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">(</span>String line <span class="sym">=</span> <span class="str">&quot;&quot;</span><span class="sym">;</span> line <span class="sym">!=</span> <span class="kwa">null</span><span class="sym">;</span> line <span class="sym">=</span> Console<span class="sym">.</span><span class="kwd">ReadLine</span><span class="sym">())</span>
    <span class="sym">{</span>
      initialLength <span class="sym">+=</span> line<span class="sym">.</span>Length <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
      <span class="kwa">if</span> <span class="sym">(</span>line<span class="sym">.</span><span class="kwd">StartsWith</span><span class="sym">(</span><span class="str">&quot;&gt;&quot;</span><span class="sym">))</span> <span class="kwa">continue</span><span class="sym">;</span>
      sb<span class="sym">.</span><span class="kwd">Append</span><span class="sym">(</span>line<span class="sym">);</span>
    <span class="sym">}</span>

    String sequence <span class="sym">=</span> sb<span class="sym">.</span><span class="kwd">ToString</span><span class="sym">();</span>
    <span class="kwb">int</span> codeLength <span class="sym">=</span> sequence<span class="sym">.</span>Length<span class="sym">;</span>

    String<span class="sym">[]</span> variants <span class="sym">=</span>
      <span class="sym">{</span>
        <span class="str">&quot;agggtaaa|tttaccct&quot;</span> <span class="sym">,</span><span class="str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="sym">,</span> <span class="str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="sym">,</span>
        <span class="str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="sym">,</span> <span class="str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="sym">,</span> <span class="str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="sym">,</span>
        <span class="str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="sym">,</span> <span class="str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="sym">,</span> <span class="str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span>
      <span class="sym">};</span>


      <span class="kwb">int</span> count<span class="sym">;</span>
      <span class="kwa">foreach</span> <span class="sym">(</span><span class="kwb">string</span> v in variants<span class="sym">){</span>
         count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
         Regex r <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Regex</span><span class="sym">(</span>v<span class="sym">,</span> RegexOptions<span class="sym">.</span>Compiled<span class="sym">);</span>

         <span class="kwa">for</span> <span class="sym">(</span>Match m <span class="sym">=</span> r<span class="sym">.</span><span class="kwd">Match</span><span class="sym">(</span>sequence<span class="sym">);</span> m<span class="sym">.</span>Success<span class="sym">;</span> m <span class="sym">=</span> m<span class="sym">.</span><span class="kwd">NextMatch</span><span class="sym">())</span> count<span class="sym">++;</span>
         Console<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span><span class="str">&quot;{0} {1}&quot;</span><span class="sym">,</span> v<span class="sym">,</span> count<span class="sym">);</span>
      <span class="sym">}</span>

    sb <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">StringBuilder</span><span class="sym">(</span><span class="num">4096</span><span class="sym">);</span>
    <span class="kwa">foreach</span> <span class="sym">(</span><span class="kwb">char</span> c in sequence<span class="sym">)</span>
    <span class="sym">{</span>
      <span class="kwa">switch</span> <span class="sym">(</span>c<span class="sym">)</span>
      <span class="sym">{</span>
      <span class="kwa">case</span> <span class="str">'B'</span><span class="sym">:</span> sb<span class="sym">.</span><span class="kwd">Append</span><span class="sym">(</span><span class="str">&quot;(c|g|t)&quot;</span><span class="sym">);</span> <span class="kwa">break</span><span class="sym">;</span>
      <span class="kwa">case</span> <span class="str">'D'</span><span class="sym">:</span> sb<span class="sym">.</span><span class="kwd">Append</span><span class="sym">(</span><span class="str">&quot;(a|g|t)&quot;</span><span class="sym">);</span> <span class="kwa">break</span><span class="sym">;</span>
      <span class="kwa">case</span> <span class="str">'H'</span><span class="sym">:</span> sb<span class="sym">.</span><span class="kwd">Append</span><span class="sym">(</span><span class="str">&quot;(a|c|t)&quot;</span><span class="sym">);</span> <span class="kwa">break</span><span class="sym">;</span>
      <span class="kwa">case</span> <span class="str">'K'</span><span class="sym">:</span> sb<span class="sym">.</span><span class="kwd">Append</span><span class="sym">(</span><span class="str">&quot;(g|t)&quot;</span><span class="sym">);</span> <span class="kwa">break</span><span class="sym">;</span>
      <span class="kwa">case</span> <span class="str">'M'</span><span class="sym">:</span> sb<span class="sym">.</span><span class="kwd">Append</span><span class="sym">(</span><span class="str">&quot;(a|c)&quot;</span><span class="sym">);</span> <span class="kwa">break</span><span class="sym">;</span>
      <span class="kwa">case</span> <span class="str">'N'</span><span class="sym">:</span> sb<span class="sym">.</span><span class="kwd">Append</span><span class="sym">(</span><span class="str">&quot;(a|c|g|t)&quot;</span><span class="sym">);</span> <span class="kwa">break</span><span class="sym">;</span>
      <span class="kwa">case</span> <span class="str">'R'</span><span class="sym">:</span> sb<span class="sym">.</span><span class="kwd">Append</span><span class="sym">(</span><span class="str">&quot;(a|g)&quot;</span><span class="sym">);</span> <span class="kwa">break</span><span class="sym">;</span>
      <span class="kwa">case</span> <span class="str">'S'</span><span class="sym">:</span> sb<span class="sym">.</span><span class="kwd">Append</span><span class="sym">(</span><span class="str">&quot;(c|g)&quot;</span><span class="sym">);</span> <span class="kwa">break</span><span class="sym">;</span>
      <span class="kwa">case</span> <span class="str">'V'</span><span class="sym">:</span> sb<span class="sym">.</span><span class="kwd">Append</span><span class="sym">(</span><span class="str">&quot;(a|c|g)&quot;</span><span class="sym">);</span> <span class="kwa">break</span><span class="sym">;</span>
      <span class="kwa">case</span> <span class="str">'W'</span><span class="sym">:</span> sb<span class="sym">.</span><span class="kwd">Append</span><span class="sym">(</span><span class="str">&quot;(a|t)&quot;</span><span class="sym">);</span> <span class="kwa">break</span><span class="sym">;</span>
      <span class="kwa">case</span> <span class="str">'Y'</span><span class="sym">:</span> sb<span class="sym">.</span><span class="kwd">Append</span><span class="sym">(</span><span class="str">&quot;(c|t)&quot;</span><span class="sym">);</span> <span class="kwa">break</span><span class="sym">;</span>
      <span class="kwa">default</span><span class="sym">:</span> sb<span class="sym">.</span><span class="kwd">Append</span><span class="sym">(</span>c<span class="sym">);</span> <span class="kwa">break</span><span class="sym">;</span>
      <span class="sym">}</span>
    <span class="sym">}</span>

      Console<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">{0}</span><span class="esc">\n</span><span class="str">{1}</span><span class="esc">\n</span><span class="str">{2}&quot;</span><span class="sym">,</span>
         initialLength<span class="sym">,</span> codeLength<span class="sym">,</span> sequence<span class="sym">.</span>Length<span class="sym">);</span>

  <span class="sym">}</span>
<span class="sym">}</span>
