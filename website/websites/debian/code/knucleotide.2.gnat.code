<span class="slc">-------------------------------------------------------------------------------</span>
<span class="slc">--  The Computer Language Benchmarks Game</span>
<span class="slc">--  http://shootout.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">--  Contributed by Martin Krischik</span>
<span class="slc">-------------------------------------------------------------------------------</span>

<span class="kwa">pragma</span> Ada_2005<span class="sym">;</span>

<span class="slc">--  Standart set of performance improving pragmas as suggested by the GNAT users manual.</span>
<span class="kwa">pragma</span> Restrictions <span class="sym">(</span>Max_Asynchronous_Select_Nesting <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">);</span>
<span class="kwa">pragma</span> Restrictions <span class="sym">(</span>No_Abort_Statements<span class="sym">);</span>

<span class="kwa">with</span> Ada.Characters.Handling<span class="sym">;</span>
<span class="kwa">with</span> Ada.Characters.Latin_1<span class="sym">;</span>
<span class="kwa">with</span> Ada.Containers.Generic_Constrained_Array_Sort<span class="sym">;</span>
<span class="kwa">with</span> Ada.Containers.Hashed_Maps<span class="sym">;</span>
<span class="kwa">with</span> Ada.Float_Text_IO<span class="sym">;</span>
<span class="kwa">with</span> Ada.IO_Exceptions<span class="sym">;</span>
<span class="kwa">with</span> Ada.Integer_Text_IO<span class="sym">;</span>
<span class="kwa">with</span> Ada.Strings.Bounded<span class="sym">;</span>
<span class="kwa">with</span> Ada.Text_IO<span class="sym">;</span>

<span class="kwa">procedure</span> KNucleotide_3 <span class="kwa">is</span>
   <span class="slc">--  Appox. gain 0.3s for N=250.000 - that realy proves that runtime checks are bad for you</span>
   <span class="slc">--  ;-).</span>
   <span class="kwa">pragma</span> Suppress <span class="sym">(</span>All_Checks<span class="sym">);</span>

   <span class="kwa">subtype</span> Frequencies <span class="kwa">is</span> <span class="kwb">Natural</span> <span class="kwa">range</span> <span class="num">1</span> .. <span class="num">18</span><span class="sym">;</span>

   <span class="kwa">package</span> Fragments <span class="kwa">is new</span> Ada.Strings.Bounded.Generic_Bounded_Length <span class="sym">(</span>Frequencies<span class="sym">'</span>Last<span class="sym">);</span>

   <span class="kwa">use type</span> Fragments.Bounded_String<span class="sym">;</span>

   <span class="kwa">subtype</span> Fragment <span class="kwa">is</span> Fragments.Bounded_String<span class="sym">;</span>

   <span class="kwa">package</span> Reader <span class="kwa">is</span>
      <span class="slc">----------------------------------------------------------------------------</span>
      <span class="slc">--</span>
      <span class="slc">--  Read data from Standart_Input and return the section THREE as String</span>
      <span class="slc">--</span>
      <span class="kwa">function</span> Read <span class="kwa">return</span> <span class="kwb">String</span><span class="sym">;</span>
      <span class="kwa">pragma</span> Inline <span class="sym">(</span>Read<span class="sym">);</span>
   <span class="kwa">end</span> Reader<span class="sym">;</span>

   <span class="slc">------------------------------------------------------------------------</span>
   <span class="slc">--</span>
   <span class="slc">--  The Calculator package calculates the nucleotide frequencies and keeps the result inside</span>
   <span class="slc">--  a hash table as requested by the shootout rules.</span>
   <span class="slc">--</span>
   <span class="kwa">package</span> Calculator <span class="kwa">is</span>
      <span class="slc">---------------------------------------------------------------------</span>
      <span class="slc">--</span>
      <span class="slc">--  Elements used to store inside hash table</span>
      <span class="slc">--</span>
      <span class="kwa">type</span> Element_Type <span class="kwa">is private</span><span class="sym">;</span>
      <span class="kwa">type</span> Element_Array <span class="kwa">is array</span> <span class="sym">(</span><span class="kwb">Natural</span> <span class="kwa">range</span> <span class="sym">&lt;&gt;)</span> <span class="kwa">of</span> Element_Type<span class="sym">;</span>

      <span class="slc">---------------------------------------------------------------------</span>
      <span class="slc">--</span>
      <span class="slc">--  Calculate the calculates the nucleotide frequencies</span>
      <span class="slc">--</span>
      <span class="kwa">procedure</span> Calculate_Frequencies <span class="sym">(</span>Length <span class="sym">:</span> <span class="kwa">in</span> Frequencies<span class="sym">);</span>

      <span class="kwa">function</span> Hash <span class="sym">(</span>Key <span class="sym">:</span> <span class="kwa">in</span> Fragment<span class="sym">)</span> <span class="kwa">return</span> Ada.Containers.Hash_Type<span class="sym">;</span>

      <span class="slc">---------------------------------------------------------------------</span>
      <span class="slc">--</span>
      <span class="slc">--  Calculate the calculates the nucleotide frequencies</span>
      <span class="slc">--</span>
      <span class="kwa">function</span> Get <span class="sym">(</span>Nucleotide_Fragment <span class="sym">:</span> <span class="kwa">in</span> Fragment<span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">Natural</span><span class="sym">;</span>

      <span class="slc">---------------------------------------------------------------------</span>
      <span class="slc">--</span>
      <span class="slc">--  Get count for element</span>
      <span class="slc">--</span>
      <span class="kwa">function</span> Key <span class="sym">(</span>Element <span class="sym">:</span> <span class="kwa">in</span> Element_Type<span class="sym">)</span> <span class="kwa">return</span> Fragment<span class="sym">;</span>

      <span class="slc">---------------------------------------------------------------------</span>
      <span class="slc">--</span>
      <span class="slc">--  Get count for element</span>
      <span class="slc">--</span>
      <span class="kwa">function</span> Count <span class="sym">(</span>Element <span class="sym">:</span> <span class="kwa">in</span> Element_Type<span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">Natural</span><span class="sym">;</span>
      <span class="slc">---------------------------------------------------------------------</span>
      <span class="slc">--</span>
      <span class="slc">--  Get total count over all elements - as well as the count of elements</span>
      <span class="slc">--</span>
      <span class="kwa">procedure</span> Get_Total <span class="sym">(</span>Total <span class="sym">:</span> <span class="kwa">out</span> <span class="kwb">Natural</span><span class="sym">;</span> Count <span class="sym">:</span> <span class="kwa">out</span> <span class="kwb">Natural</span><span class="sym">);</span>
      <span class="kwa">function</span> Get_Array <span class="sym">(</span>Count <span class="sym">:</span> <span class="kwa">in</span> <span class="kwb">Natural</span><span class="sym">)</span> <span class="kwa">return</span> Element_Array<span class="sym">;</span>
      <span class="kwa">function</span> <span class="str">&quot;&gt;&quot;</span> <span class="sym">(</span>Left <span class="sym">:</span> <span class="kwa">in</span> Element_Type<span class="sym">;</span> Right <span class="sym">:</span> <span class="kwa">in</span> Element_Type<span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">Boolean</span><span class="sym">;</span>

      <span class="kwa">pragma</span> Inline <span class="sym">(</span><span class="str">&quot;&gt;&quot;</span><span class="sym">);</span>
      <span class="kwa">pragma</span> Inline <span class="sym">(</span>Calculate_Frequencies<span class="sym">);</span>
      <span class="kwa">pragma</span> Inline <span class="sym">(</span>Count<span class="sym">);</span>
      <span class="kwa">pragma</span> Inline <span class="sym">(</span>Get<span class="sym">);</span>
      <span class="kwa">pragma</span> Inline <span class="sym">(</span>Get_Total<span class="sym">);</span>
      <span class="kwa">pragma</span> Inline <span class="sym">(</span>Hash<span class="sym">);</span>
      <span class="kwa">pragma</span> Inline <span class="sym">(</span>Key<span class="sym">);</span>
   <span class="kwa">private</span>
      <span class="slc">---------------------------------------------------------------------</span>
      <span class="slc">--</span>
      <span class="slc">--  Elements used to store inside hash table.</span>
      <span class="slc">--</span>
      <span class="kwa">type</span> Element_Type <span class="kwa">is record</span>
         Count <span class="sym">:</span> <span class="kwb">Natural</span>  <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
         Key   <span class="sym">:</span> Fragment <span class="sym">:=</span> Fragments.Null_Bounded_String<span class="sym">;</span>
      <span class="kwa">end record</span><span class="sym">;</span>
   <span class="kwa">end</span> Calculator<span class="sym">;</span>

   <span class="slc">----------------------------------------------------------------------------</span>
   <span class="slc">--</span>
   <span class="slc">--  Calculate and write data - either a percentage for all fragments found or - when</span>
   <span class="slc">--  Nucleotide_Fragment is given - the count for that fragment.</span>
   <span class="slc">--</span>
   <span class="kwa">procedure</span> Write <span class="sym">(</span>Nucleotide_Length <span class="sym">:</span> <span class="kwa">in</span> Frequencies<span class="sym">);</span>
   <span class="kwa">procedure</span> Write <span class="sym">(</span>Nucleotide_Fragment <span class="sym">:</span> <span class="kwa">in</span> Fragment<span class="sym">);</span>

   <span class="slc">----------------------------------------------------------------------------</span>
   <span class="slc">--</span>
   <span class="slc">--  List of fragments to be analyzed for this test</span>
   <span class="slc">--</span>
   Fragment_3  <span class="sym">:</span> <span class="kwa">constant</span> Fragment <span class="sym">:=</span> Fragments.To_Bounded_String <span class="sym">(</span><span class="str">&quot;GGT&quot;</span><span class="sym">);</span>
   Fragment_4  <span class="sym">:</span> <span class="kwa">constant</span> Fragment <span class="sym">:=</span> Fragments.To_Bounded_String <span class="sym">(</span><span class="str">&quot;GGTA&quot;</span><span class="sym">);</span>
   Fragment_6  <span class="sym">:</span> <span class="kwa">constant</span> Fragment <span class="sym">:=</span> Fragments.To_Bounded_String <span class="sym">(</span><span class="str">&quot;GGTATT&quot;</span><span class="sym">);</span>
   Fragment_12 <span class="sym">:</span> <span class="kwa">constant</span> Fragment <span class="sym">:=</span> Fragments.To_Bounded_String <span class="sym">(</span><span class="str">&quot;GGTATTTTAATT&quot;</span><span class="sym">);</span>
   Fragment_18 <span class="sym">:</span> <span class="kwa">constant</span> Fragment <span class="sym">:=</span> Fragments.To_Bounded_String <span class="sym">(</span><span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="sym">);</span>

   <span class="kwa">package body</span> Reader <span class="kwa">is</span>
      <span class="slc">-------------------------------------------------------------------------</span>
      <span class="slc">--</span>
      <span class="slc">--  Skip data on Standart_Input until &quot;&gt;THREE&quot; is found</span>
      <span class="slc">--</span>
      <span class="kwa">procedure</span> Skip_To_Section<span class="sym">;</span>

      <span class="slc">-------------------------------------------------------------------------</span>
      <span class="slc">--</span>
      <span class="slc">--  Read next data section - until EOF oder a line beginning with &gt; is found</span>
      <span class="slc">--</span>
      <span class="kwa">function</span> Read_Section <span class="kwa">return</span> <span class="kwb">String</span><span class="sym">;</span>

      <span class="kwa">pragma</span> Inline <span class="sym">(</span>Read_Section<span class="sym">);</span>
      <span class="kwa">pragma</span> Inline <span class="sym">(</span>Skip_To_Section<span class="sym">);</span>

      Section_Marker <span class="sym">:</span> <span class="kwa">constant</span> <span class="kwb">Character</span> <span class="sym">:= '&gt;';</span>
      Section        <span class="sym">:</span> <span class="kwa">constant</span> <span class="kwb">String</span>    <span class="sym">:=</span> Section_Marker <span class="sym">&amp;</span> <span class="str">&quot;THREE&quot;</span><span class="sym">;</span>

      <span class="kwa">function</span> Read <span class="kwa">return</span> <span class="kwb">String</span> <span class="kwa">is</span>
      <span class="kwa">begin</span>
         Skip_To_Section<span class="sym">;</span>
         <span class="kwa">return</span> Ada.Characters.Handling.To_Upper <span class="sym">(</span>Read_Section<span class="sym">);</span>
      <span class="kwa">end</span> Read<span class="sym">;</span>

      <span class="slc">-------------------------------------------------------------------------</span>
      <span class="slc">--</span>
      <span class="slc">--  Read next data section - until EOF oder a line beginning with &gt; is found</span>
      <span class="slc">--</span>
      <span class="kwa">function</span> Read_Section <span class="kwa">return</span> <span class="kwb">String</span> <span class="kwa">is</span>
         Buffer     <span class="sym">:</span> <span class="kwb">String</span> <span class="sym">(</span><span class="num">1</span> .. <span class="num">10240</span><span class="sym">);</span>
         Read_First <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> Buffer<span class="sym">'</span>First<span class="sym">;</span>
         Read_Last  <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> Buffer<span class="sym">'</span>First<span class="sym">;</span>
      <span class="kwa">begin</span>
         <span class="kwa">loop</span>
            Ada.Text_IO.Get_Line
              <span class="sym">(</span>Item <span class="sym">=&gt;</span> Buffer <span class="sym">(</span>Read_First .. Buffer<span class="sym">'</span>Last<span class="sym">),</span>
               Last <span class="sym">=&gt;</span> Read_Last<span class="sym">);</span>
            <span class="kwa">exit when</span> Buffer <span class="sym">(</span>Read_First<span class="sym">) =</span> Section_Marker<span class="sym">;</span>
            <span class="kwa">if</span> Read_Last <span class="sym">=</span> Buffer<span class="sym">'</span>Last <span class="kwa">then</span>
               <span class="kwa">return</span> Buffer <span class="sym">&amp;</span> Read_Section<span class="sym">;</span>
            <span class="kwa">end if</span><span class="sym">;</span>
            Read_First <span class="sym">:=</span> Read_Last <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
         <span class="kwa">end loop</span><span class="sym">;</span>
         <span class="kwa">return</span> Buffer <span class="sym">(</span><span class="num">1</span> .. Read_Last<span class="sym">);</span>
      <span class="kwa">exception</span>
         <span class="kwa">when</span> Ada.IO_Exceptions.End_Error <span class="sym">=&gt;</span>
            <span class="kwa">return</span> Buffer <span class="sym">(</span><span class="num">1</span> .. Read_Last<span class="sym">);</span>
      <span class="kwa">end</span> Read_Section<span class="sym">;</span>

      <span class="slc">-------------------------------------------------------------------------</span>
      <span class="slc">--</span>
      <span class="slc">--  Skip data on Standart_Input until &quot;&gt;THREE&quot; is found</span>
      <span class="slc">--</span>
      <span class="kwa">procedure</span> Skip_To_Section <span class="kwa">is</span>
         <span class="slc">--</span>
         <span class="slc">--  The line lenght of the test data is 60 character. Note: Get_Line would survive</span>
         <span class="slc">--  longer lines as well - they would just be read in two parts.</span>
         <span class="slc">--</span>
         Line      <span class="sym">:</span> <span class="kwb">String</span> <span class="sym">(</span><span class="num">1</span> .. <span class="num">60</span><span class="sym">);</span>
         Read_Last <span class="sym">:</span> <span class="kwb">Natural</span><span class="sym">;</span>
      <span class="kwa">begin</span>
         <span class="kwa">loop</span>
            Ada.Text_IO.Get_Line <span class="sym">(</span>Item <span class="sym">=&gt;</span> Line<span class="sym">,</span> Last <span class="sym">=&gt;</span> Read_Last<span class="sym">);</span>
            <span class="kwa">exit when</span> Line <span class="sym">(</span><span class="num">1</span> .. <span class="num">6</span><span class="sym">) =</span> Section<span class="sym">;</span>
         <span class="kwa">end loop</span><span class="sym">;</span>
      <span class="kwa">end</span> Skip_To_Section<span class="sym">;</span>
   <span class="kwa">end</span> Reader<span class="sym">;</span>

   <span class="slc">---------------------------------------------------------------------------</span>
   <span class="slc">--</span>
   <span class="slc">--  Data read as single String</span>
   <span class="slc">--</span>
   Buffer <span class="sym">:</span> <span class="kwa">constant</span> <span class="kwb">String</span> <span class="sym">:=</span> Reader.Read<span class="sym">;</span>

   <span class="slc">------------------------------------------------------------------------</span>
   <span class="slc">--</span>
   <span class="slc">--  The Calculator package calculates the nucleotide frequencies and keeps the result inside</span>
   <span class="slc">--  a hash table as requested by the shootout rules.</span>
   <span class="slc">--</span>
   <span class="kwa">package body</span> Calculator <span class="kwa">is</span>

      <span class="kwa">procedure</span> Increment <span class="sym">(</span>Key <span class="sym">:</span> <span class="kwa">in</span> Fragment<span class="sym">;</span> Element <span class="sym">:</span> <span class="kwa">in out</span> Element_Type<span class="sym">);</span>

      <span class="kwa">package</span> Element_Maps <span class="kwa">is new</span> Ada.Containers.Hashed_Maps <span class="sym">(</span>
         Key_Type <span class="sym">=&gt;</span> Fragment<span class="sym">,</span>
         Element_Type <span class="sym">=&gt;</span> Element_Type<span class="sym">,</span>
         Hash <span class="sym">=&gt;</span> Hash<span class="sym">,</span>
         Equivalent_Keys <span class="sym">=&gt;</span> <span class="str">&quot;=&quot;</span><span class="sym">,</span>
         <span class="str">&quot;=&quot;</span> <span class="sym">=&gt;</span> Calculator. <span class="str">&quot;=&quot;</span><span class="sym">);</span>

      Table <span class="sym">:</span> Element_Maps.Map<span class="sym">;</span>

      <span class="kwa">function</span> <span class="str">&quot;&gt;&quot;</span> <span class="sym">(</span>Left <span class="sym">:</span> <span class="kwa">in</span> Element_Type<span class="sym">;</span> Right <span class="sym">:</span> <span class="kwa">in</span> Element_Type<span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">Boolean</span> <span class="kwa">is</span>
      <span class="kwa">begin</span>
         <span class="kwa">return</span> Left.Count <span class="sym">&gt;</span> Right.Count<span class="sym">;</span>
      <span class="kwa">end</span> <span class="str">&quot;&gt;&quot;</span><span class="sym">;</span>

      <span class="slc">---------------------------------------------------------------------</span>
      <span class="slc">--</span>
      <span class="slc">--  Calculate the calculates the nucleotide frequencies</span>
      <span class="slc">--</span>
      <span class="kwa">procedure</span> Calculate_Frequencies <span class="sym">(</span>Length <span class="sym">:</span> Frequencies<span class="sym">)</span> <span class="kwa">is</span>

      <span class="kwa">begin</span>
         Table.Clear<span class="sym">;</span>
         Table.Reserve_Capacity <span class="sym">(</span>Ada.Containers.Count_Type <span class="sym">(</span><span class="num">4</span> <span class="sym">**</span> Length<span class="sym">));</span>
         <span class="kwa">for</span> I <span class="kwa">in</span> <span class="num">1</span> .. Buffer<span class="sym">'</span>Last <span class="sym">-</span> <span class="kwb">Integer</span> <span class="sym">(</span>Length<span class="sym">) +</span> <span class="num">1</span> <span class="kwa">loop</span>
            <span class="kwa">declare</span>
               <span class="kwa">use type</span> Element_Maps.Cursor<span class="sym">;</span>

               Key     <span class="sym">:</span> <span class="kwa">constant</span> Fragment            <span class="sym">:=</span>
                  Fragments.To_Bounded_String <span class="sym">(</span>Buffer <span class="sym">(</span>I .. I <span class="sym">+</span> <span class="kwb">Integer</span> <span class="sym">(</span>Length<span class="sym">) -</span> <span class="num">1</span><span class="sym">));</span>
               Element <span class="sym">:</span> <span class="kwa">constant</span> Element_Maps.Cursor <span class="sym">:=</span> Table.Find <span class="sym">(</span>Key<span class="sym">);</span>
            <span class="kwa">begin</span>
               <span class="kwa">if</span> Element <span class="sym">/=</span> Element_Maps.No_Element <span class="kwa">then</span>
                  Table.Update_Element <span class="sym">(</span>Position <span class="sym">=&gt;</span> Element<span class="sym">,</span> Process <span class="sym">=&gt;</span> Increment<span class="sym">'</span><span class="kwa">Access</span><span class="sym">);</span>
               <span class="kwa">else</span>
                  Table.Insert
                    <span class="sym">(</span>Key      <span class="sym">=&gt;</span> Key<span class="sym">,</span>
                     New_Item <span class="sym">=&gt;</span> Element_Type<span class="sym">'(</span>Count <span class="sym">=&gt;</span> <span class="num">1</span><span class="sym">,</span> Key <span class="sym">=&gt;</span> Key<span class="sym">));</span>
               <span class="kwa">end if</span><span class="sym">;</span>
            <span class="kwa">end</span><span class="sym">;</span>
         <span class="kwa">end loop</span><span class="sym">;</span>
         <span class="kwa">return</span><span class="sym">;</span>
      <span class="kwa">end</span> Calculate_Frequencies<span class="sym">;</span>

      <span class="slc">---------------------------------------------------------------------</span>
      <span class="slc">--</span>
      <span class="slc">--  Get count for element</span>
      <span class="slc">--</span>
      <span class="kwa">function</span> Count <span class="sym">(</span>Element <span class="sym">:</span> <span class="kwa">in</span> Element_Type<span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">Natural</span> <span class="kwa">is</span>
      <span class="kwa">begin</span>
         <span class="kwa">return</span> Element.Count<span class="sym">;</span>
      <span class="kwa">end</span> Count<span class="sym">;</span>

      <span class="slc">---------------------------------------------------------------------</span>
      <span class="slc">--</span>
      <span class="slc">--  Calculate the calculates the nucleotide frequencies</span>
      <span class="slc">--</span>
      <span class="kwa">function</span> Get <span class="sym">(</span>Nucleotide_Fragment <span class="sym">:</span> <span class="kwa">in</span> Fragment<span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">Natural</span> <span class="kwa">is</span>
         <span class="kwa">use type</span> Element_Maps.Cursor<span class="sym">;</span>
         The_Element <span class="sym">:</span> <span class="kwa">constant</span> Element_Maps.Cursor <span class="sym">:=</span> Table.Find <span class="sym">(</span>Nucleotide_Fragment<span class="sym">);</span>
      <span class="kwa">begin</span>
         <span class="kwa">if</span> The_Element <span class="sym">/=</span> Element_Maps.No_Element <span class="kwa">then</span>
            <span class="kwa">return</span> Element_Maps.Element <span class="sym">(</span>The_Element<span class="sym">)</span>.Count<span class="sym">;</span>
         <span class="kwa">else</span>
            <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
         <span class="kwa">end if</span><span class="sym">;</span>
      <span class="kwa">end</span> Get<span class="sym">;</span>

      <span class="kwa">function</span> Get_Array <span class="sym">(</span>Count <span class="sym">:</span> <span class="kwa">in</span> <span class="kwb">Natural</span><span class="sym">)</span> <span class="kwa">return</span> Element_Array <span class="kwa">is</span>
         <span class="kwa">subtype</span> Retval_Index <span class="kwa">is</span> <span class="kwb">Natural</span> <span class="kwa">range</span> <span class="num">1</span> .. Count<span class="sym">;</span>
         <span class="kwa">subtype</span> Retval_Type <span class="kwa">is</span> Element_Array <span class="sym">(</span>Retval_Index<span class="sym">);</span>
         Retval <span class="sym">:</span> Retval_Type<span class="sym">;</span>

         <span class="kwa">use type</span> Calculator.Element_Type<span class="sym">;</span>

         <span class="kwa">procedure</span> Sort <span class="kwa">is new</span> Ada.Containers.Generic_Constrained_Array_Sort <span class="sym">(</span>
            Index_Type <span class="sym">=&gt;</span> Retval_Index<span class="sym">,</span>
            Element_Type <span class="sym">=&gt;</span> Element_Type<span class="sym">,</span>
            Array_Type <span class="sym">=&gt;</span> Retval_Type<span class="sym">,</span>
            <span class="str">&quot;&lt;&quot;</span> <span class="sym">=&gt;</span> <span class="str">&quot;&gt;&quot;</span><span class="sym">);</span>

         The_Element <span class="sym">:</span> Element_Maps.Cursor <span class="sym">:=</span> Table.First<span class="sym">;</span>
      <span class="kwa">begin</span>
         <span class="kwa">for</span> I <span class="kwa">in</span> Retval<span class="sym">'</span><span class="kwa">Range loop</span>
            Retval <span class="sym">(</span>I<span class="sym">) :=</span> Element_Maps.Element <span class="sym">(</span>The_Element<span class="sym">);</span>
            Element_Maps.Next <span class="sym">(</span>The_Element<span class="sym">);</span>
         <span class="kwa">end loop</span><span class="sym">;</span>

         Sort <span class="sym">(</span>Retval<span class="sym">);</span>

         <span class="kwa">return</span> Retval<span class="sym">;</span>
      <span class="kwa">end</span> Get_Array<span class="sym">;</span>

      <span class="slc">---------------------------------------------------------------------</span>
      <span class="slc">--</span>
      <span class="slc">--  Get total count over all elements - as well as the count of elements</span>
      <span class="slc">--</span>
      <span class="kwa">procedure</span> Get_Total <span class="sym">(</span>Total <span class="sym">:</span> <span class="kwa">out</span> <span class="kwb">Natural</span><span class="sym">;</span> Count <span class="sym">:</span> <span class="kwa">out</span> <span class="kwb">Natural</span><span class="sym">)</span> <span class="kwa">is</span>
         <span class="kwa">use type</span> Element_Maps.Cursor<span class="sym">;</span>
         The_Element <span class="sym">:</span> Element_Maps.Cursor <span class="sym">:=</span> Table.First<span class="sym">;</span>
      <span class="kwa">begin</span>
         Total <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
         Count <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
         <span class="kwa">while</span> The_Element <span class="sym">/=</span> Element_Maps.No_Element <span class="kwa">loop</span>
            Total <span class="sym">:=</span> Total <span class="sym">+</span> Element_Maps.Element <span class="sym">(</span>The_Element<span class="sym">)</span>.Count<span class="sym">;</span>
            Count <span class="sym">:=</span> Count <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
            Element_Maps.Next <span class="sym">(</span>The_Element<span class="sym">);</span>
         <span class="kwa">end loop</span><span class="sym">;</span>
      <span class="kwa">end</span> Get_Total<span class="sym">;</span>

      <span class="kwa">function</span> Hash <span class="sym">(</span>Key <span class="sym">:</span> Fragment<span class="sym">)</span> <span class="kwa">return</span> Ada.Containers.Hash_Type <span class="kwa">is</span>
         <span class="kwa">use type</span> Ada.Containers.Hash_Type<span class="sym">;</span>

         <span class="kwa">function</span> Rotate_Left
           <span class="sym">(</span>Value  <span class="sym">:</span> Ada.Containers.Hash_Type<span class="sym">;</span>
            Amount <span class="sym">:</span> <span class="kwb">Natural</span><span class="sym">)</span>
            <span class="kwa">return</span>   Ada.Containers.Hash_Type<span class="sym">;</span>
         <span class="kwa">pragma</span> Import <span class="sym">(</span>Intrinsic<span class="sym">,</span> Rotate_Left<span class="sym">);</span>

         Hash_Value <span class="sym">:</span> Ada.Containers.Hash_Type<span class="sym">;</span>

      <span class="kwa">begin</span>
         Hash_Value <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
         <span class="kwa">for</span> J <span class="kwa">in</span> <span class="num">1</span> .. Fragments.Length <span class="sym">(</span>Key<span class="sym">)</span> <span class="kwa">loop</span>
            Hash_Value <span class="sym">:=</span> Rotate_Left <span class="sym">(</span>Hash_Value<span class="sym">,</span> <span class="num">3</span><span class="sym">) +</span>
                          <span class="kwb">Character</span><span class="sym">'</span>Pos <span class="sym">(</span>Fragments.Element <span class="sym">(</span>Key<span class="sym">,</span> J<span class="sym">));</span>
         <span class="kwa">end loop</span><span class="sym">;</span>

         <span class="kwa">return</span> Hash_Value<span class="sym">;</span>
      <span class="kwa">end</span> Hash<span class="sym">;</span>

      <span class="kwa">procedure</span> Increment <span class="sym">(</span>Key <span class="sym">:</span> <span class="kwa">in</span> Fragment<span class="sym">;</span> Element <span class="sym">:</span> <span class="kwa">in out</span> Element_Type<span class="sym">)</span> <span class="kwa">is</span>
         <span class="kwa">pragma</span> Unreferenced <span class="sym">(</span>Key<span class="sym">);</span>
      <span class="kwa">begin</span>
         Element.Count <span class="sym">:=</span> <span class="kwb">Natural</span><span class="sym">'</span>Succ <span class="sym">(</span>Element.Count<span class="sym">);</span>
      <span class="kwa">end</span> Increment<span class="sym">;</span>

      <span class="slc">---------------------------------------------------------------------</span>
      <span class="slc">--</span>
      <span class="slc">--  Get count for element</span>
      <span class="slc">--</span>
      <span class="kwa">function</span> Key <span class="sym">(</span>Element <span class="sym">:</span> <span class="kwa">in</span> Element_Type<span class="sym">)</span> <span class="kwa">return</span> Fragment <span class="kwa">is</span>
      <span class="kwa">begin</span>
         <span class="kwa">return</span> Element.Key<span class="sym">;</span>
      <span class="kwa">end</span> Key<span class="sym">;</span>

   <span class="kwa">end</span> Calculator<span class="sym">;</span>

   <span class="slc">----------------------------------------------------------------------------</span>
   <span class="slc">--</span>
   <span class="slc">--  Calculate and write data - either a percentage for all fragments found or - when</span>
   <span class="slc">--  Nucleotide_Fragment is given - the count for that fragment.</span>
   <span class="slc">--</span>
   <span class="kwa">procedure</span> Write <span class="sym">(</span>Nucleotide_Length <span class="sym">:</span> <span class="kwa">in</span> Frequencies<span class="sym">)</span> <span class="kwa">is</span>
   <span class="kwa">begin</span>
      Calculator.Calculate_Frequencies <span class="sym">(</span>Nucleotide_Length<span class="sym">);</span>

      Calculate_Total <span class="sym">:</span> <span class="kwa">declare</span>
         Count <span class="sym">:</span> <span class="kwb">Natural</span><span class="sym">;</span>
         Total <span class="sym">:</span> <span class="kwb">Natural</span><span class="sym">;</span>
      <span class="kwa">begin</span>
         Calculator.Get_Total <span class="sym">(</span>Total <span class="sym">=&gt;</span> Total<span class="sym">,</span> Count <span class="sym">=&gt;</span> Count<span class="sym">);</span>

         Get_Sort_Put <span class="sym">:</span> <span class="kwa">declare</span>
            Data <span class="sym">:</span> <span class="kwa">constant</span> Calculator.Element_Array <span class="sym">:=</span> Calculator.Get_Array <span class="sym">(</span>Count<span class="sym">);</span>
         <span class="kwa">begin</span>
            <span class="kwa">for</span> I <span class="kwa">in</span> Data<span class="sym">'</span><span class="kwa">Range loop</span>
               Ada.Text_IO.Put <span class="sym">(</span>Fragments.To_String <span class="sym">(</span>Calculator.Key <span class="sym">(</span>Data <span class="sym">(</span>I<span class="sym">))));</span>
               Ada.Text_IO.Put <span class="sym">(</span>Ada.Characters.Latin_1.Space<span class="sym">);</span>
               Ada.Float_Text_IO.Put
                 <span class="sym">(</span>Item <span class="sym">=&gt;</span> <span class="num">100.0</span> <span class="sym">*</span> <span class="kwb">Float</span> <span class="sym">(</span>Calculator.Count <span class="sym">(</span>Data <span class="sym">(</span>I<span class="sym">))) /</span> <span class="kwb">Float</span> <span class="sym">(</span>Total<span class="sym">),</span>
                  Fore <span class="sym">=&gt;</span> <span class="num">1</span><span class="sym">,</span>
                  Aft  <span class="sym">=&gt;</span> <span class="num">3</span><span class="sym">,</span>
                  Exp  <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">);</span>
               Ada.Text_IO.New_Line<span class="sym">;</span>
            <span class="kwa">end loop</span><span class="sym">;</span>
            Ada.Text_IO.New_Line<span class="sym">;</span>
         <span class="kwa">end</span> Get_Sort_Put<span class="sym">;</span>
      <span class="kwa">end</span> Calculate_Total<span class="sym">;</span>

      <span class="kwa">return</span><span class="sym">;</span>
   <span class="kwa">end</span> Write<span class="sym">;</span>

   <span class="slc">----------------------------------------------------------------------------</span>
   <span class="slc">--</span>
   <span class="slc">--  Calculate and write data - either a percentage for all fragments found or - when</span>
   <span class="slc">--  Nucleotide_Fragment is given - the count for that fragment.</span>
   <span class="slc">--</span>
   <span class="kwa">procedure</span> Write <span class="sym">(</span>Nucleotide_Fragment <span class="sym">:</span> <span class="kwa">in</span> Fragment<span class="sym">)</span> <span class="kwa">is</span>
   <span class="kwa">begin</span>
      Calculator.Calculate_Frequencies <span class="sym">(</span>Fragments.Length <span class="sym">(</span>Nucleotide_Fragment<span class="sym">));</span>
      Ada.Integer_Text_IO.Put <span class="sym">(</span>Item <span class="sym">=&gt;</span> Calculator.Get <span class="sym">(</span>Nucleotide_Fragment<span class="sym">),</span> Width <span class="sym">=&gt;</span> <span class="num">1</span><span class="sym">);</span>
      Ada.Text_IO.Put <span class="sym">(</span>Ada.Characters.Latin_1.HT<span class="sym">);</span>
      Ada.Text_IO.Put_Line <span class="sym">(</span>Fragments.To_String <span class="sym">(</span>Nucleotide_Fragment<span class="sym">));</span>
      <span class="kwa">return</span><span class="sym">;</span>
   <span class="kwa">end</span> Write<span class="sym">;</span>

<span class="kwa">begin</span>
   Write <span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
   Write <span class="sym">(</span><span class="num">2</span><span class="sym">);</span>
   Write <span class="sym">(</span>Fragment_3<span class="sym">);</span>
   Write <span class="sym">(</span>Fragment_4<span class="sym">);</span>
   Write <span class="sym">(</span>Fragment_6<span class="sym">);</span>
   Write <span class="sym">(</span>Fragment_12<span class="sym">);</span>
   Write <span class="sym">(</span>Fragment_18<span class="sym">);</span>
   <span class="kwa">return</span><span class="sym">;</span>
<span class="kwa">end</span> KNucleotide_3<span class="sym">;</span>

<span class="slc">----------------------------------------------------------------------------</span>
<span class="slc">--  $Author: igouy-guest $</span>
<span class="slc">--</span>
<span class="slc">--  $Revision: 1.1 $</span>
<span class="slc">--  $Date: 2008-08-06 16:04:56 $</span>
<span class="slc">--</span>
<span class="slc">--  $Id: knucleotide.2.gnat.code,v 1.1 2008-08-06 16:04:56 igouy-guest Exp $</span>
<span class="slc">--  $HeadURL: http://wikibook-ada.svn.sourceforge.net/svnroot/wikibook-ada/trunk/demos/Source/Language_Shootout/knucleotide_3.adb $</span>
<span class="slc">-------------------------------------------------------------------------------</span>
<span class="slc">--   vim: textwidth=0 nowrap tabstop=8 shiftwidth=3 softtabstop=3 expandtab filetype=ada vim:</span>
<span class="slc">--   fileencoding=latin1 fileformat=unix</span>
