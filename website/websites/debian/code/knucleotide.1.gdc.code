<span class="slc">// The Computer Language Benchmarks Game</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>

<span class="slc">// Adapted by bearophile from my Python version.</span>
<span class="slc">// Compile:  dmd -O -release knucleotide.d</span>

<span class="slc">// This code is slower because it's optimized to</span>
<span class="slc">//   show higher level coding in D.</span>

<span class="kwa">import</span> std<span class="sym">.</span>stdio<span class="sym">,</span> std<span class="sym">.</span>string<span class="sym">;</span>

<span class="kwa">int</span><span class="sym">[</span><span class="kwa">char</span><span class="sym">[]]</span> <span class="kwd">gen_freq</span><span class="sym">(</span><span class="kwa">char</span><span class="sym">[]</span> seq<span class="sym">,</span> <span class="kwa">int</span> frame<span class="sym">) {</span>
    <span class="kwa">int</span><span class="sym">[</span><span class="kwa">char</span><span class="sym">[]]</span> freqs<span class="sym">;</span>
    <span class="kwa">auto</span> ns <span class="sym">=</span> seq<span class="sym">.</span>length <span class="sym">+</span> <span class="num">1</span> <span class="sym">-</span> frame<span class="sym">;</span>

    <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">auto</span> ii <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> ii <span class="sym">&lt;</span> ns<span class="sym">; ++</span>ii<span class="sym">)</span>
        freqs<span class="sym">[</span> seq<span class="sym">[</span>ii <span class="sym">..</span> ii <span class="sym">+</span> frame<span class="sym">] ]++;</span>
    <span class="kwa">return</span> freqs<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwa">void</span> <span class="kwd">sort_seq</span><span class="sym">(</span><span class="kwa">char</span><span class="sym">[]</span> seq<span class="sym">,</span> <span class="kwa">int</span> length<span class="sym">) {</span>
    <span class="kwa">auto</span> n <span class="sym">=</span> seq<span class="sym">.</span>length <span class="sym">+</span> <span class="num">1</span> <span class="sym">-</span> length<span class="sym">;</span>
    <span class="kwa">auto</span> freqs <span class="sym">=</span> <span class="kwd">gen_freq</span><span class="sym">(</span>seq<span class="sym">,</span> length<span class="sym">);</span>
    <span class="slc">//auto l = sortedAA(freqs, function int(char[] k, int v) { return -v; });</span>

    <span class="kwa">struct</span> Pair <span class="sym">{</span>
        <span class="kwa">char</span><span class="sym">[]</span> k<span class="sym">;</span>
        <span class="kwa">int</span> v<span class="sym">;</span>
        <span class="kwa">int</span> <span class="kwd">opCmp</span><span class="sym">(</span>Pair otherPair<span class="sym">) {</span>
            <span class="kwa">return</span> <span class="sym">(</span>v <span class="sym">&gt;</span> otherPair<span class="sym">.</span>v<span class="sym">)</span> ? <span class="sym">-</span><span class="num">1</span> <span class="sym">:</span> <span class="num">1</span><span class="sym">;</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">auto</span> pairs <span class="sym">=</span> <span class="kwa">new</span> Pair<span class="sym">[</span>freqs<span class="sym">.</span>length<span class="sym">];</span>
    <span class="kwa">uint</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">foreach</span><span class="sym">(</span>k<span class="sym">,</span> v<span class="sym">;</span> freqs<span class="sym">) {</span>
        pairs<span class="sym">[</span>i<span class="sym">] =</span> <span class="kwd">Pair</span><span class="sym">(</span>k<span class="sym">,</span> v<span class="sym">);</span>
        i<span class="sym">++;</span>
    <span class="sym">}</span>

    <span class="kwa">foreach</span><span class="sym">(</span>p<span class="sym">;</span> pairs<span class="sym">.</span>sort<span class="sym">)</span>
        <span class="kwd">writefln</span><span class="sym">(</span><span class="str">&quot;%s %.3f&quot;</span><span class="sym">,</span> p<span class="sym">.</span>k<span class="sym">,</span> <span class="num">100.0</span><span class="sym">*</span>p<span class="sym">.</span>v<span class="sym">/</span>n<span class="sym">);</span>
    <span class="kwd">writefln</span><span class="sym">();</span>
<span class="sym">}</span>

<span class="kwa">void</span> <span class="kwd">find_seq</span><span class="sym">(</span><span class="kwa">char</span><span class="sym">[]</span> seq<span class="sym">,</span> <span class="kwa">char</span><span class="sym">[]</span> s<span class="sym">) {</span>
    <span class="kwa">auto</span> t <span class="sym">=</span> <span class="kwd">gen_freq</span><span class="sym">(</span>seq<span class="sym">,</span> s<span class="sym">.</span>length<span class="sym">);</span>
    <span class="kwd">writefln</span><span class="sym">((</span>s <span class="kwa">in</span> t<span class="sym">)</span> ? t<span class="sym">[</span>s<span class="sym">] :</span> <span class="num">0</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\t</span><span class="str">'</span><span class="sym">,</span> s<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwa">void</span> <span class="kwd">main</span><span class="sym">() {</span>
    <span class="kwa">char</span><span class="sym">[]</span> line<span class="sym">;</span>
    <span class="kwa">while</span> <span class="sym">(</span><span class="kwd">readln</span><span class="sym">(</span>stdin<span class="sym">,</span> line<span class="sym">))</span>
        <span class="kwa">if</span> <span class="sym">(</span>line<span class="sym">[</span><span class="num">0</span> <span class="sym">..</span> <span class="num">3</span><span class="sym">] ==</span> <span class="str">&quot;&gt;TH&quot;</span><span class="sym">)</span>
            <span class="kwa">break</span><span class="sym">;</span>

    <span class="kwa">char</span><span class="sym">[][]</span> seq<span class="sym">;</span>
    <span class="kwa">while</span> <span class="sym">(</span><span class="kwd">readln</span><span class="sym">(</span>stdin<span class="sym">,</span> line<span class="sym">)) {</span>
        <span class="kwa">if</span> <span class="sym">((</span>line<span class="sym">[</span><span class="num">0</span><span class="sym">] ==</span> <span class="str">'&gt;'</span><span class="sym">) || (</span>line<span class="sym">[</span><span class="num">0</span><span class="sym">] ==</span> <span class="str">';'</span><span class="sym">))</span>
            <span class="kwa">break</span><span class="sym">;</span>
        seq <span class="sym">~=</span> line<span class="sym">.</span>dup<span class="sym">.</span><span class="kwd">chomp</span><span class="sym">();</span>
    <span class="sym">}</span>

    <span class="kwa">auto</span> sequence <span class="sym">=</span> seq<span class="sym">.</span><span class="kwd">join</span><span class="sym">(</span><span class="str">&quot;&quot;</span><span class="sym">).</span><span class="kwd">toupper</span><span class="sym">();</span>

    <span class="kwd">sort_seq</span><span class="sym">(</span>sequence<span class="sym">,</span> <span class="num">1</span><span class="sym">);</span>
    <span class="kwd">sort_seq</span><span class="sym">(</span>sequence<span class="sym">,</span> <span class="num">2</span><span class="sym">);</span>

    <span class="kwa">foreach</span><span class="sym">(</span>se<span class="sym">;</span> <span class="kwd">split</span><span class="sym">(</span><span class="str">&quot;GGT GGTA GGTATT GGTATTTTAATT GGTATTTTAATTTATAGT&quot;</span><span class="sym">))</span>
        <span class="kwd">find_seq</span><span class="sym">(</span>sequence<span class="sym">,</span> se<span class="sym">);</span>
<span class="sym">}</span>
