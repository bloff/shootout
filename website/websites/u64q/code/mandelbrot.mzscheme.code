<source>
<def></def><slc>;; ---------------------------------------------------------------------</slc><br />
<def></def><slc>;; The Great Computer Language Shootout</slc><br />
<def></def><slc>;; http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>;;</slc><br />
<def></def><slc>;; Derived from the Chicken variant, which was</slc><br />
<def></def><slc>;; Contributed by Anthony Borla</slc><br />
<def></def><br />
<slc>;; Note: as of version 350, this benchmark spends much of</slc><br />
<def></def><slc>;;  its time GCing; it runs 2 times as fast in mzscheme3m.</slc><br />
<def></def><br />
<slc>;; The version that uses complex number is a little</slc><br />
<def></def><slc>;; more elegant, but slower:</slc><br />
<def></def><slc>;;  (define (mandelbrot iterations x y n ci)</slc><br />
<def></def><slc>;;    (let ((c (+ (- (/ (* 2.0 x) n) 1.5)</slc><br />
<def></def><slc>;;                (* ci 0.0+1.0i))))</slc><br />
<def></def><slc>;;      (let loop ((i 0) (z 0.0+0.0i))</slc><br />
<def></def><slc>;;	(cond</slc><br />
<def></def><slc>;;	 [(&gt; i iterations) 1]</slc><br />
<def></def><slc>;;	 [(&gt; (magnitude z) 2.0) 0]</slc><br />
<def></def><slc>;;	 [else (loop (add1 i) (+ (* z z) c))]))))</slc><br />
<def></def><br />
<br />
<sym>(</sym><def>module mandelbrot mzscheme</def><br />
<br />
  <slc>;; -------------------------------</slc><br />
<def></def><br />
  <sym>(</sym><def>define</def> <sym>+</sym><def>limit</def><sym>-</sym><def>sqr</def><sym>+</sym> <def></def><num>4.0</num><def></def><sym>)</sym><br />
<def></def><br />
  <sym>(</sym><def>define</def> <sym>+</sym><def>iterations</def><sym>+</sym> <def></def><num>50</num><def></def><sym>)</sym><br />
<def></def><br />
  <slc>;; -------------------------------</slc><br />
<def></def><br />
  <sym>(</sym><def>define</def> <sym>(</sym><def>mandelbrot iterations x y n ci</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def>let</def> <sym>((</sym><def>cr</def> <sym>(- (/ (*</sym> <def></def><num>2.0</num> <def>x</def><sym>)</sym> <def>n</def><sym>)</sym> <def></def><num>1.5</num><def></def><sym>)))</sym><br />
<def></def>      <sym>(</sym><def>let loop</def> <sym>((</sym><def>i</def> <num>0</num><def></def><sym>) (</sym><def>zr</def> <num>0.0</num><def></def><sym>) (</sym><def>zi</def> <num>0.0</num><def></def><sym>))</sym><br />
<def></def>	<sym>(</sym><def></def><kwa>if</kwa> <def></def><sym>(&gt;</sym> <def>i iterations</def><sym>)</sym><br />
<def></def>	    <num>1</num><br />
<def></def>	    <sym>(</sym><def>let</def> <sym>((</sym><def>zrq</def> <sym>(*</sym> <def>zr zr</def><sym>))</sym><br />
<def></def>		  <sym>(</sym><def>ziq</def> <sym>(*</sym> <def>zi zi</def><sym>)))</sym><br />
<def></def>	      <sym>(</sym><def></def><kwa>cond</kwa><br />
<def></def>	       <sym>((&gt; (+</sym> <def>zrq ziq</def><sym>) +</sym><def>limit</def><sym>-</sym><def>sqr</def><sym>+)</sym> <def></def><num>0</num><def></def><sym>)</sym><br />
<def></def>	       <sym>(</sym><def>else</def> <sym>(</sym><def>loop</def> <sym>(</sym><def>add1 i</def><sym>) (+ (-</sym> <def>zrq ziq</def><sym>)</sym> <def>cr</def><sym>) (+ (*</sym> <def></def><num>2.0</num> <def>zr zi</def><sym>)</sym> <def>ci</def><sym>)))))))))</sym><br />
<def></def><br />
  <slc>;; -------------------------------</slc><br />
<def></def><br />
  <sym>(</sym><def>define</def> <sym>(</sym><def>main args</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def>let</def> <sym>((</sym><def>n</def> <sym>(</sym><def>string</def><sym>-&gt;</sym><def>number</def> <sym>(</sym><def>vector</def><sym>-</sym><def>ref args</def> <num>0</num><def></def><sym>)))</sym><br />
<def></def>	  <sym>(</sym><def>out</def> <sym>(</sym><def>current</def><sym>-</sym><def>output</def><sym>-</sym><def>port</def><sym>)))</sym><br />
<def></def><br />
      <sym>(</sym><def>fprintf out</def> <str>&quot;P4</str><esc>\</esc><str>n~a ~a</str><esc>\</esc><str>n&quot;</str><def> n n</def><sym>)</sym><br />
<def></def><br />
      <sym>(</sym><def>let loop</def><sym>-</sym><def>y</def> <sym>((</sym><def>y</def> <num>0</num><def></def><sym>))</sym><br />
<def></def><br />
	<sym>(</sym><def>when</def> <sym>(&lt;</sym> <def>y n</def><sym>)</sym><br />
<def></def><br />
	  <sym>(</sym><def>let</def> <sym>([</sym><def>ci</def> <sym>(- (/ (*</sym> <def></def><num>2.0</num> <def>y</def><sym>)</sym> <def>n</def><sym>)</sym> <def></def><num>1.0</num><def></def><sym>)])</sym><br />
<def></def><br />
	    <sym>(</sym><def>let loop</def><sym>-</sym><def>x</def> <sym>((</sym><def>x</def> <num>0</num><def></def><sym>) (</sym><def>bitnum</def> <num>0</num><def></def><sym>) (</sym><def>byteacc</def> <num>0</num><def></def><sym>))</sym><br />
<def></def><br />
	      <sym>(</sym><def></def><kwa>if</kwa> <def></def><sym>(&lt;</sym> <def>x n</def><sym>)</sym><br />
<def></def>		  <sym>(</sym><def>let</def> <sym>([</sym><def>bitnum</def> <sym>(</sym><def>add1 bitnum</def><sym>)]</sym><br />
<def></def>			<sym>[</sym><def>byteacc</def> <sym>(+ (</sym><def>arithmetic</def><sym>-</sym><def>shift byteacc</def> <num>1</num><def></def><sym>)</sym><br />
<def></def>				    <sym>(</sym><def>mandelbrot</def> <sym>+</sym><def>iterations</def><sym>+</sym> <def>x y n ci</def><sym>))])</sym><br />
<def></def><br />
		    <sym>(</sym><def></def><kwa>cond</kwa><br />
<def></def>		     <sym>((=</sym> <def>bitnum</def> <num>8</num><def></def><sym>)</sym><br />
<def></def>		      <sym>(</sym><def>write</def><sym>-</sym><def>byte byteacc out</def><sym>)</sym><br />
<def></def>		      <sym>(</sym><def>loop</def><sym>-</sym><def>x</def> <sym>(</sym><def>add1 x</def><sym>)</sym> <def></def><num>0 0</num><def></def><sym>))</sym><br />
<def></def><br />
		     <sym>[</sym><def>else</def> <sym>(</sym><def>loop</def><sym>-</sym><def>x</def> <sym>(</sym><def>add1 x</def><sym>)</sym> <def>bitnum byteacc</def><sym>)]))</sym><br />
<def></def><br />
		  <sym>(</sym><def>begin</def><br />
		    <sym>(</sym><def>when</def> <sym>(</sym><def>positive? bitnum</def><sym>)</sym><br />
<def></def>		      <sym>(</sym><def>write</def><sym>-</sym><def>byte</def> <sym>(</sym><def>arithmetic</def><sym>-</sym><def>shift byteacc</def> <sym>(-</sym> <def></def><num>8</num> <def></def><sym>(</sym><def>bitwise</def><sym>-</sym><def></def><kwa>and</kwa> <def>n #x7</def><sym>)))</sym> <def>out</def><sym>))</sym><br />
<def></def><br />
		    <sym>(</sym><def>loop</def><sym>-</sym><def>y</def> <sym>(</sym><def>add1 y</def><sym>))))))))))</sym><br />
<def></def><br />
  <slc>;; -------------------------------</slc><br />
<def></def><br />
  <sym>(</sym><def>main</def> <sym>(</sym><def>current</def><sym>-</sym><def></def><kwa>command</kwa><def></def><sym>-</sym><def></def><kwa>line</kwa><def></def><sym>-</sym><def>arguments</def><sym>)))</sym><def></def><br />
</source>
