<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;; Written by Dima Dorfman, 2004</span>
<span class="hl slc">;; Slightly improved by Sven Hartrumpf, 2005-2006</span>
<span class="hl slc">;; Ever-so-slightly tweaked for MzScheme by Brent Fulgham</span>
<span class="hl slc">;; PLT-ized for v4.0 by Matthew Flatt</span>

#lang scheme<span class="hl sym">/</span>base
<span class="hl sym">(</span>require scheme<span class="hl sym">/</span>cmdline<span class="hl sym">)</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>fannkuch n<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">([</span>pi <span class="hl sym">(</span><span class="hl kwa">list</span><span class="hl sym">-&gt;</span>vector
             <span class="hl sym">(</span>for<span class="hl sym">/</span><span class="hl kwa">list</span> <span class="hl sym">([</span>i <span class="hl sym">(</span>in<span class="hl sym">-</span>range n<span class="hl sym">)])</span> i<span class="hl sym">))]</span>
        <span class="hl sym">[</span>tmp <span class="hl sym">(</span>make<span class="hl sym">-</span>vector n<span class="hl sym">)]</span>
        <span class="hl sym">[</span>count <span class="hl sym">(</span>make<span class="hl sym">-</span>vector n<span class="hl sym">)])</span>
    <span class="hl sym">(</span>let loop <span class="hl sym">([</span>flips <span class="hl num">0</span><span class="hl sym">]</span>
               <span class="hl sym">[</span>perms <span class="hl num">0</span><span class="hl sym">]</span>
               <span class="hl sym">[</span>r n<span class="hl sym">])</span>
      <span class="hl sym">(</span>when <span class="hl sym">(&lt;</span> perms <span class="hl num">30</span><span class="hl sym">)</span>
        <span class="hl sym">(</span>for <span class="hl sym">([</span>x <span class="hl sym">(</span>in<span class="hl sym">-</span>vector pi<span class="hl sym">)])</span>
          <span class="hl sym">(</span>display <span class="hl sym">(</span>add1 x<span class="hl sym">)))</span>
        <span class="hl sym">(</span>newline<span class="hl sym">))</span>
      <span class="hl sym">(</span>for <span class="hl sym">([</span>i <span class="hl sym">(</span>in<span class="hl sym">-</span>range r<span class="hl sym">)])</span>
        <span class="hl sym">(</span>vector<span class="hl sym">-</span><span class="hl kwa">set</span><span class="hl sym">!</span> count i <span class="hl sym">(</span>add1 i<span class="hl sym">)))</span>
      <span class="hl sym">(</span>let <span class="hl sym">((</span>flips2 <span class="hl sym">(</span><span class="hl kwa">max</span> <span class="hl sym">(</span>count<span class="hl sym">-</span>flips pi tmp<span class="hl sym">)</span> flips<span class="hl sym">)))</span>
        <span class="hl sym">(</span>let loop2 <span class="hl sym">([</span>r <span class="hl num">1</span><span class="hl sym">])</span>
          <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(=</span> r n<span class="hl sym">)</span>
              flips2
              <span class="hl sym">(</span>let <span class="hl sym">((</span>perm0 <span class="hl sym">(</span>vector<span class="hl sym">-</span>ref pi <span class="hl num">0</span><span class="hl sym">)))</span>
                <span class="hl sym">(</span>for <span class="hl sym">([</span>i <span class="hl sym">(</span>in<span class="hl sym">-</span>range r<span class="hl sym">)])</span>
                  <span class="hl sym">(</span>vector<span class="hl sym">-</span><span class="hl kwa">set</span><span class="hl sym">!</span> pi i <span class="hl sym">(</span>vector<span class="hl sym">-</span>ref pi <span class="hl sym">(</span>add1 i<span class="hl sym">))))</span>
                <span class="hl sym">(</span>vector<span class="hl sym">-</span><span class="hl kwa">set</span><span class="hl sym">!</span> pi r perm0<span class="hl sym">)</span>
                <span class="hl sym">(</span>vector<span class="hl sym">-</span><span class="hl kwa">set</span><span class="hl sym">!</span> count r <span class="hl sym">(</span>sub1 <span class="hl sym">(</span>vector<span class="hl sym">-</span>ref count r<span class="hl sym">)))</span>
                <span class="hl sym">(</span><span class="hl kwa">cond</span>
                 <span class="hl sym">[(&lt;= (</span>vector<span class="hl sym">-</span>ref count r<span class="hl sym">)</span> <span class="hl num">0</span><span class="hl sym">)</span>
                  <span class="hl sym">(</span>loop2 <span class="hl sym">(</span>add1 r<span class="hl sym">))]</span>
                 <span class="hl sym">[</span>else <span class="hl sym">(</span>loop flips2 <span class="hl sym">(</span>add1 perms<span class="hl sym">)</span> r<span class="hl sym">)]))))))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>count<span class="hl sym">-</span>flips pi rho<span class="hl sym">)</span>
  <span class="hl sym">(</span>vector<span class="hl sym">-</span>copy<span class="hl sym">!</span> rho <span class="hl num">0</span> pi<span class="hl sym">)</span>
  <span class="hl sym">(</span>let loop <span class="hl sym">([</span>i <span class="hl num">0</span><span class="hl sym">])</span>
    <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(= (</span>vector<span class="hl sym">-</span>ref rho <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl num">0</span><span class="hl sym">)</span>
        i
        <span class="hl sym">(</span>begin
          <span class="hl sym">(</span>vector<span class="hl sym">-</span><span class="hl kwa">reverse</span><span class="hl sym">-</span>slice<span class="hl sym">!</span> rho <span class="hl num">0</span> <span class="hl sym">(</span>add1 <span class="hl sym">(</span>vector<span class="hl sym">-</span>ref rho <span class="hl num">0</span><span class="hl sym">)))</span>
          <span class="hl sym">(</span>loop <span class="hl sym">(</span>add1 i<span class="hl sym">))))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>vector<span class="hl sym">-</span><span class="hl kwa">reverse</span><span class="hl sym">-</span>slice<span class="hl sym">!</span> v i j<span class="hl sym">)</span>
  <span class="hl sym">(</span>let loop <span class="hl sym">([</span>i i<span class="hl sym">]</span>
             <span class="hl sym">[</span>j <span class="hl sym">(</span>sub1 j<span class="hl sym">)])</span>
    <span class="hl sym">(</span>when <span class="hl sym">(&gt;</span> j i<span class="hl sym">)</span>
      <span class="hl sym">(</span>vector<span class="hl sym">-</span>swap<span class="hl sym">!</span> v i j<span class="hl sym">)</span>
      <span class="hl sym">(</span>loop <span class="hl sym">(</span>add1 i<span class="hl sym">) (</span>sub1 j<span class="hl sym">)))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>vector<span class="hl sym">-</span>swap<span class="hl sym">!</span> v i j<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>t <span class="hl sym">(</span>vector<span class="hl sym">-</span>ref v i<span class="hl sym">)))</span>
    <span class="hl sym">(</span>vector<span class="hl sym">-</span><span class="hl kwa">set</span><span class="hl sym">!</span> v i <span class="hl sym">(</span>vector<span class="hl sym">-</span>ref v j<span class="hl sym">))</span>
    <span class="hl sym">(</span>vector<span class="hl sym">-</span><span class="hl kwa">set</span><span class="hl sym">!</span> v j t<span class="hl sym">)))</span>

<span class="hl sym">(</span><span class="hl kwa">command</span><span class="hl sym">-</span><span class="hl kwa">line</span> #<span class="hl sym">:</span>args <span class="hl sym">(</span>n<span class="hl sym">)</span>
              <span class="hl sym">(</span>printf <span class="hl str">&quot;Pfannkuchen(~a) = ~a</span><span class="hl esc">\</span><span class="hl str">n&quot;</span>
                      n
                      <span class="hl sym">(</span>fannkuch <span class="hl sym">(</span>string<span class="hl sym">-&gt;</span>number n<span class="hl sym">))))</span>
