<source>
<def></def><com>{ The Great Computer Language Shootout</com><br />
<com>  http://shootout.alioth.debian.org</com><br />
<com></com><br />
<com>  contributed by Ales Katona</com><br />
<com>}</com><def></def><br />
<br />
<kwa>program</kwa> <def>BinaryTrees</def><sym>;</sym><br />
<def></def><br />
<com>{$mode objfpc}</com><def></def><br />
<br />
<kwa>type</kwa><br />
<def>  PNode</def> <sym>= ^</sym><def>TNode</def><sym>;</sym><br />
<def>  TNode</def> <sym>=</sym> <def></def><kwa>record</kwa><br />
<def>    l</def><sym>,</sym> <def>r</def><sym>:</sym> <def>PNode</def><sym>;</sym><br />
<def>    i</def><sym>:</sym> <def></def><kwb>Longint</kwb><def></def><sym>;</sym><br />
<def></def>  <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>function</kwa> <def></def><kwd>CreateNode</kwd><def></def><sym>(</sym><def>l2</def><sym>,</sym> <def>r2</def><sym>:</sym> <def>PNode</def><sym>;</sym> <def></def><kwa>const</kwa> <def>i2</def><sym>:</sym> <def></def><kwb>Longint</kwb><def></def><sym>):</sym> <def>PNode</def><sym>;</sym><br />
<def></def><kwa>begin</kwa><br />
<def>  Result</def> <sym>:=</sym> <def></def><kwd>GetMem</kwd><def></def><sym>(</sym><def></def><kwd>SizeOf</kwd><def></def><sym>(</sym><def>TNode</def><sym>));</sym><br />
<def>  Result</def><sym>^.</sym><def>l</def><sym>:=</sym><def>l2</def><sym>;</sym><br />
<def>  Result</def><sym>^.</sym><def>r</def><sym>:=</sym><def>r2</def><sym>;</sym><br />
<def>  Result</def><sym>^.</sym><def>i</def><sym>:=</sym><def>i2</def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def></def><kwd>DestroyNode</kwd><def></def><sym>(</sym><def>ANode</def><sym>:</sym> <def>PNode</def><sym>);</sym><br />
<def></def><kwa>begin</kwa><br />
<def></def>  <kwa>if</kwa> <def>ANode</def><sym>^.</sym><def>l</def> <sym>&lt;&gt;</sym> <def></def><kwa>nil then begin</kwa><br />
<def></def>    <kwd>DestroyNode</kwd><def></def><sym>(</sym><def>ANode</def><sym>^.</sym><def>l</def><sym>);</sym><br />
<def></def>    <kwd>DestroyNode</kwd><def></def><sym>(</sym><def>ANode</def><sym>^.</sym><def>r</def><sym>);</sym><br />
<def></def>  <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>  <kwd>FreeMem</kwd><def></def><sym>(</sym><def>ANode</def><sym>,</sym> <def></def><kwd>SizeOf</kwd><def></def><sym>(</sym><def>TNode</def><sym>));</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>function</kwa> <def></def><kwd>CheckNode</kwd><def></def><sym>(</sym><def>ANode</def><sym>:</sym> <def>PNode</def><sym>):</sym> <def></def><kwb>Longint</kwb><def></def><sym>;</sym><br />
<def></def><kwa>begin</kwa><br />
<def></def>  <kwa>if</kwa> <def>ANode</def><sym>^.</sym><def>l</def> <sym>=</sym> <def></def><kwa>nil then</kwa><br />
<def>    Result</def><sym>:=</sym><def>ANode</def><sym>^.</sym><def>i</def><br />
  <kwa>else</kwa><br />
<def>    Result</def><sym>:=</sym><def></def><kwd>CheckNode</kwd><def></def><sym>(</sym><def>ANode</def><sym>^.</sym><def>l</def><sym>) +</sym> <def>ANode</def><sym>^.</sym><def>i</def> <sym>-</sym> <def></def><kwd>CheckNode</kwd><def></def><sym>(</sym><def>ANode</def><sym>^.</sym><def>r</def><sym>);</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>function</kwa> <def></def><kwd>Make</kwd><def></def><sym>(</sym><def>i</def><sym>,</sym> <def>d</def><sym>:</sym> <def></def><kwb>Longint</kwb><def></def><sym>):</sym> <def>PNode</def><sym>;</sym><br />
<def></def><kwa>begin</kwa><br />
<def></def>  <kwa>if</kwa> <def>d</def> <sym>=</sym> <def></def><num>0</num> <def></def><kwa>then</kwa> <def>Result</def><sym>:=</sym><def></def><kwd>CreateNode</kwd><def></def><sym>(</sym><def></def><kwa>nil</kwa><def></def><sym>,</sym> <def></def><kwa>nil</kwa><def></def><sym>,</sym> <def>i</def><sym>)</sym><br />
<def></def>  <kwa>else</kwa> <def>Result</def><sym>:=</sym><def></def><kwd>CreateNode</kwd><def></def><sym>(</sym><def></def><kwd>Make</kwd><def></def><sym>(</sym><def></def><num>2</num> <def></def><sym>*</sym> <def>i</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>d</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>),</sym> <def></def><kwd>Make</kwd><def></def><sym>(</sym><def></def><num>2</num> <def></def><sym>*</sym> <def>i</def><sym>,</sym> <def>d</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>),</sym> <def>i</def><sym>);</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>const</kwa><br />
<def>  mind</def> <sym>=</sym> <def></def><num>4</num><def></def><sym>;</sym><br />
<def></def><br />
<kwa>var</kwa><br />
<def>  maxd</def> <sym>:</sym> <def></def><kwb>Longint</kwb> <def></def><sym>=</sym> <def></def><num>10</num><def></def><sym>;</sym><br />
<def>  strd</def><sym>,</sym><br />
<def>  iter</def><sym>,</sym><br />
<def>  c</def><sym>,</sym> <def>d</def><sym>,</sym> <def>i</def> <sym>:</sym> <def></def><kwb>Longint</kwb><def></def><sym>;</sym><br />
<def>  tree</def><sym>,</sym> <def>llt</def> <sym>:</sym> <def>PNode</def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def></def>  <kwa>if</kwa> <def>ParamCount</def> <sym>=</sym> <def></def><num>1</num> <def></def><kwa>then</kwa><br />
<def></def>    <kwd>Val</kwd><def></def><sym>(</sym><def></def><kwd>ParamStr</kwd><def></def><sym>(</sym><def></def><num>1</num><def></def><sym>),</sym> <def>maxd</def><sym>);</sym><br />
<def></def><br />
  <kwa>if</kwa> <def>maxd</def> <sym>&lt;</sym> <def>mind</def><sym>+</sym><def></def><num>2</num> <def></def><kwa>then</kwa><br />
<def>     maxd</def> <sym>:=</sym> <def>mind</def> <sym>+</sym> <def></def><num>2</num><def></def><sym>;</sym><br />
<def><br />
  strd</def><sym>:=</sym><def>maxd</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def>  tree</def><sym>:=</sym><def></def><kwd>Make</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def>strd</def><sym>);</sym><br />
<def></def>  <kwd>Writeln</kwd><def></def><sym>(</sym><def></def><str>'stretch tree of depth '</str><def></def><sym>,</sym> <def>strd</def><sym>,</sym> <def></def><esc>#9</esc><def></def><str>' check: '</str><def></def><sym>,</sym> <def></def><kwd>CheckNode</kwd><def></def><sym>(</sym><def>tree</def><sym>));</sym><br />
<def></def>  <kwd>DestroyNode</kwd><def></def><sym>(</sym><def>tree</def><sym>);</sym><br />
<def><br />
  llt</def><sym>:=</sym><def></def><kwd>Make</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def>maxd</def><sym>);</sym><br />
<def><br />
  d</def><sym>:=</sym><def>mind</def><sym>;</sym><br />
<def></def>  <kwa>while</kwa> <def>d</def> <sym>&lt;=</sym> <def>maxd</def> <kwa>do begin</kwa><br />
<def>    iter</def><sym>:=</sym><def></def><num>1</num> <def></def><kwa>shl</kwa> <def></def><sym>(</sym><def>maxd</def> <sym>-</sym> <def>d</def> <sym>+</sym> <def>mind</def><sym>);</sym><br />
<def>    c</def><sym>:=</sym><def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>    <kwa>for</kwa> <def>i</def><sym>:=</sym><def></def><num>1</num> <def></def><kwa>to</kwa> <def>Iter</def> <kwa>do begin</kwa><br />
<def>      tree</def><sym>:=</sym><def></def><kwd>Make</kwd><def></def><sym>(</sym><def>i</def><sym>,</sym> <def>d</def><sym>);</sym><br />
<def>      c</def><sym>:=</sym><def>c</def> <sym>+</sym> <def></def><kwd>CheckNode</kwd><def></def><sym>(</sym><def>tree</def><sym>);</sym><br />
<def></def>      <kwd>DestroyNode</kwd><def></def><sym>(</sym><def>tree</def><sym>);</sym><br />
<def>      tree</def><sym>:=</sym><def></def><kwd>Make</kwd><def></def><sym>(-</sym><def>i</def><sym>,</sym> <def>d</def><sym>);</sym><br />
<def>      c</def><sym>:=</sym><def>c</def> <sym>+</sym> <def></def><kwd>CheckNode</kwd><def></def><sym>(</sym><def>tree</def><sym>);</sym><br />
<def></def>      <kwd>DestroyNode</kwd><def></def><sym>(</sym><def>tree</def><sym>);</sym><br />
<def></def>    <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>    <kwd>Writeln</kwd><def></def><sym>(</sym><def></def><num>2</num> <def></def><sym>*</sym> <def>Iter</def><sym>,</sym> <def></def><esc>#9</esc><def></def><str>' trees of depth '</str><def></def><sym>,</sym> <def>d</def><sym>,</sym> <def></def><esc>#9</esc><def></def><str>' check: '</str><def></def><sym>,</sym> <def>c</def><sym>);</sym><br />
<def></def>    <kwd>Inc</kwd><def></def><sym>(</sym><def>d</def><sym>,</sym> <def></def><num>2</num><def></def><sym>);</sym><br />
<def></def>  <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
  <kwd>Writeln</kwd><def></def><sym>(</sym><def></def><str>'long lived tree of depth '</str><def></def><sym>,</sym> <def>maxd</def><sym>,</sym> <def></def><esc>#9</esc><def></def><str>' check: '</str><def></def><sym>,</sym> <def></def><kwd>CheckNode</kwd><def></def><sym>(</sym><def>llt</def><sym>));</sym><br />
<def></def>  <kwd>DestroyNode</kwd><def></def><sym>(</sym><def>llt</def><sym>);</sym><br />
<def></def><kwa>end</kwa><def></def><sym>.</sym><def></def><br />
</source>
