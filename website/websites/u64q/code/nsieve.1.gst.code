<span class="hl com">&quot;* The Computer Language Shootout</span>
<span class="hl com">    http://shootout.alioth.debian.org/</span>
<span class="hl com">    contributed by Isaac Gouy</span>
<span class="hl com">    modified by Eliot Miranda *&quot;</span>!!<span class="hl kwc">Tests</span> <span class="hl kwb">class methodsFor:</span> <span class="hl str">'benchmark scripts'</span>!nsieve   <span class="hl kwd">| n |</span>   n <span class="hl sym">:=</span> <span class="hl kwa">self</span> <span class="hl kwb">arg</span><span class="hl sym">.   (</span>n &lt; <span class="hl num">2</span><span class="hl sym">)</span> <span class="hl kwb">ifTrue:</span> <span class="hl sym">[</span>n <span class="hl sym">:=</span> <span class="hl num">2</span><span class="hl sym">].</span>   <span class="hl kwa">self</span> <span class="hl kwb">primeBenchmarkFor:</span> n <span class="hl kwb">to:</span> <span class="hl kwa">self</span> <span class="hl kwb">stdout using:</span> <span class="hl kwc">Array</span><span class="hl sym">.   ^</span><span class="hl str">''</span>! !!<span class="hl kwc">Tests</span> <span class="hl kwb">class methodsFor:</span> <span class="hl str">'benchmarking'</span>!<span class="hl kwb">nsieve:</span> n <span class="hl kwb">using:</span> arrayClass    <span class="hl kwd">| count isPrime |</span>   count <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">.</span>   isPrime <span class="hl sym">:=</span> arrayClass <span class="hl kwb">new:</span> n <span class="hl kwb">withAll:</span> <span class="hl kwa">true</span><span class="hl sym">.</span>   <span class="hl num">2</span> <span class="hl kwb">to:</span> n <span class="hl kwb">do:</span>      <span class="hl sym">[</span><span class="hl kwd">:i</span> <span class="hl sym">|       (</span>isPrime <span class="hl kwb">at:</span> i<span class="hl sym">)</span> <span class="hl kwb">ifTrue:</span>          <span class="hl sym">[</span>i <span class="hl kwb">+</span> i <span class="hl kwb">to:</span> n <span class="hl kwb">by:</span> i <span class="hl kwb">do:</span>            <span class="hl sym">[</span><span class="hl kwd">:k</span> <span class="hl sym">|</span> isPrime <span class="hl kwb">at:</span> k <span class="hl kwb">put:</span> <span class="hl kwa">false</span><span class="hl sym">].</span>         count <span class="hl sym">:=</span> count <span class="hl kwb">+</span> <span class="hl num">1</span><span class="hl sym">]].   ^</span>count! !!<span class="hl kwc">Tests</span> <span class="hl kwb">class methodsFor:</span> <span class="hl str">'benchmarking'</span>!<span class="hl kwb">primeBenchmarkFor:</span> v <span class="hl kwb">to:</span> output <span class="hl kwb">using:</span> arrayClass   v <span class="hl kwb">to:</span> v <span class="hl kwb">-</span> <span class="hl num">2</span> <span class="hl kwb">by: -</span><span class="hl num">1</span> <span class="hl kwb">do:</span>      <span class="hl sym">[</span><span class="hl kwd">:n</span><span class="hl sym">|</span> <span class="hl kwd">| m |</span>      m <span class="hl sym">:= (</span><span class="hl num">2</span> <span class="hl kwb">raisedTo:</span> n<span class="hl sym">)</span> <span class="hl kwb">*</span> <span class="hl num">10000</span><span class="hl sym">.</span>      output         <span class="hl kwb">nextPutAll:</span> <span class="hl str">'Primes up to '</span><span class="hl sym">;</span>
         <span class="hl kwb">print:</span> m <span class="hl kwb">paddedTo:</span> <span class="hl num">8</span><span class="hl sym">;</span>
         <span class="hl kwb">print:</span> <span class="hl sym">(</span><span class="hl kwa">self</span> <span class="hl kwb">nsieve:</span> m <span class="hl kwb">using:</span> arrayClass<span class="hl sym">)</span> <span class="hl kwb">paddedTo:</span> <span class="hl num">9</span><span class="hl sym">;</span> <span class="hl kwb">nl</span>
      <span class="hl sym">]</span>! !

<span class="hl kwc">Tests</span> <span class="hl kwb">nsieve</span>!
