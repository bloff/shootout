<source>
<def></def><slc>%% The Computer Language Shootout</slc><br />
<def></def><slc>%% http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>%% contributed by Kenneth Johansson, Vlad Dumitrescu, Ulf Wiger</slc><br />
<def></def><br />
<sym>-</sym><def></def><kwa>module</kwa><def></def><sym>(</sym><def>knucleotide</def><sym>).</sym><br />
<def></def><sym>-</sym><def></def><kwa>export</kwa><def></def><sym>([</sym><def>main</def><sym>/</sym><def></def><num>1</num><def></def><sym>]).</sym><br />
<def></def><br />
<slc>%% turn characters a..z to uppercase and strip out any newline</slc><br />
<def></def><kwd>to_upper_no_nl</kwd><def></def><sym>(</sym><def>Str</def><sym>) -&gt;</sym>                               <def></def><kwd>to_upper_no_nl</kwd><def></def><sym>(</sym><def>Str</def><sym>, []).</sym><br />
<def></def><kwd>to_upper_no_nl</kwd><def></def><sym>([</sym><def>C</def><sym>|</sym><def>Cs</def><sym>],</sym> <def>Acc</def><sym>)</sym> <def></def><kwa>when</kwa> <def>C</def> <sym>&gt;=</sym> <def>$a</def><sym>,</sym> <def>C</def> <sym>=&lt;</sym> <def>$z</def> <sym>-&gt;</sym> <def></def><kwd>to_upper_no_nl</kwd><def></def><sym>(</sym><def>Cs</def><sym>, [</sym><def>C</def><sym>-(</sym><def>$a</def><sym>-</sym><def>$A</def><sym>)|</sym> <def>Acc</def><sym>]);</sym><br />
<def></def><kwd>to_upper_no_nl</kwd><def></def><sym>([</sym><def>C</def><sym>|</sym><def>Cs</def><sym>],</sym> <def>Acc</def><sym>)</sym> <def></def><kwa>when</kwa> <def>C</def> <sym>==</sym> <def>$\n</def> <sym>-&gt;</sym>         <def></def><kwd>to_upper_no_nl</kwd><def></def><sym>(</sym><def>Cs</def><sym>,</sym>  <def>Acc</def><sym>);</sym><br />
<def></def><kwd>to_upper_no_nl</kwd><def></def><sym>([</sym><def>C</def><sym>|</sym><def>Cs</def><sym>],</sym> <def>Acc</def><sym>) -&gt;</sym>                       <def></def><kwd>to_upper_no_nl</kwd><def></def><sym>(</sym><def>Cs</def><sym>, [</sym><def>C</def> <sym>|</sym> <def>Acc</def><sym>]);</sym><br />
<def></def><kwd>to_upper_no_nl</kwd><def></def><sym>([],</sym> <def>Acc</def><sym>) -&gt;</sym>                           <def>lists</def><sym>:</sym><def></def><kwd>reverse</kwd><def></def><sym>(</sym><def>Acc</def><sym>).</sym><br />
<def></def><br />
<slc>% Read in lines from stdin and discard them until a line starting with</slc><br />
<def></def><slc>% &gt;THREE are reached.</slc><br />
<def></def><kwd>seek_three</kwd><def></def><sym>() -&gt;</sym><br />
<def></def>    <kwa>case</kwa> <def>io</def><sym>:</sym><def></def><kwd>get_line</kwd><def></def><sym>(</sym><def></def><str>''</str><def></def><sym>)</sym> <def></def><kwa>of</kwa><br />
<def></def>	<str>&quot;&gt;TH&quot;</str><def></def> <sym>++</sym> <def>_</def> <sym>-&gt;</sym> <def>found</def><sym>;</sym><br />
<def>	eof</def>        <sym>-&gt;</sym> <def>erlang</def><sym>:</sym><def></def><kwd>error</kwd><def></def><sym>(</sym><def>eof</def><sym>);</sym><br />
<def>	_</def>          <sym>-&gt;</sym> <def></def><kwd>seek_three</kwd><def></def><sym>()</sym><br />
<def></def>    <kwa>end</kwa><def></def><sym>.</sym><br />
<def></def><br />
<slc>%% Read in lines from stdin until eof.</slc><br />
<def></def><slc>%% Lines are converted to upper case and put into a single list.</slc><br />
<def></def><kwd>dna_seq</kwd><def></def><sym>()      -&gt;</sym> <def></def><kwd>seek_three</kwd><def></def><sym>(),</sym> <def></def><kwd>dna_seq</kwd><def></def><sym>([]).</sym><br />
<def></def><kwd>dna_seq</kwd><def></def><sym>(</sym> <def>Seq</def> <sym>) -&gt;</sym><br />
<def></def>    <kwa>case</kwa> <def>io</def><sym>:</sym><def></def><kwd>get_line</kwd><def></def><sym>(</sym><def></def><str>''</str><def></def><sym>)</sym> <def></def><kwa>of</kwa><br />
<def>        eof</def>  <sym>-&gt;</sym> <def></def><kwb>list_to_binary</kwb><def></def><sym>(</sym><def>lists</def><sym>:</sym><def></def><kwd>reverse</kwd><def></def><sym>(</sym><def>Seq</def><sym>));</sym><br />
<def>        Line</def> <sym>-&gt;</sym> <def>Uline</def> <sym>=</sym> <def></def><kwd>to_upper_no_nl</kwd><def></def><sym>(</sym><def>Line</def><sym>),</sym><br />
<def></def>                <kwd>dna_seq</kwd><def></def><sym>([</sym><def>Uline</def><sym>|</sym><def>Seq</def><sym>])</sym><br />
<def></def>    <kwa>end</kwa><def></def><sym>.</sym><br />
<def></def><br />
<slc>%% Create a dictinary with the dna sequence as key and the number of times</slc><br />
<def></def><slc>%% it was in the original sequence as value.</slc><br />
<def></def><slc>%% Len is the number of basepairs to use as the key.</slc><br />
<def></def><kwd>gen_freq</kwd><def></def><sym>(</sym><def>T</def><sym>,</sym> <def>Dna</def><sym>,</sym> <def>Len</def><sym>) -&gt;</sym><br />
<def></def>    <kwd>gen_freq</kwd><def></def><sym>(</sym><def>Dna</def><sym>,</sym> <def>Len</def><sym>,</sym> <def>T</def> <sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><kwb>size</kwb><def></def><sym>(</sym><def>Dna</def><sym>)).</sym><br />
<def></def><kwd>gen_freq</kwd><def></def><sym>(&lt;&lt;&gt;&gt;,</sym> <def>_</def><sym>,</sym> <def>Frequency</def><sym>,</sym> <def>Acc</def><sym>,</sym> <def>_</def><sym>) -&gt;</sym><br />
<def></def>    <sym>{</sym><def>Frequency</def><sym>,</sym><def>Acc</def><sym>};</sym><br />
<def></def><kwd>gen_freq</kwd><def></def><sym>(</sym><def>Dna</def><sym>,</sym> <def>Len</def><sym>,</sym> <def>Frequency</def><sym>,</sym> <def>Acc</def><sym>,</sym> <def>Dec</def><sym>)</sym> <def></def><kwa>when</kwa> <def>Dec</def> <sym>&gt;=</sym> <def>Len</def> <sym>-&gt;</sym><br />
<def></def>    <sym>&lt;&lt;</sym><def>Key</def><sym>:</sym><def>Len</def><sym>/</sym><def></def><kwb>binary</kwb><def></def><sym>,</sym> <def>_</def><sym>/</sym><def></def><kwb>binary</kwb><def></def><sym>&gt;&gt; =</sym> <def>Dna</def><sym>,</sym><br />
<def></def>    <kwd>update_counter</kwd><def></def><sym>(</sym><def>Key</def><sym>,</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>Frequency</def><sym>),</sym><br />
<def></def>    <sym>&lt;&lt;</sym><def>_</def><sym>,</sym> <def>T</def><sym>/</sym><def></def><kwb>binary</kwb><def></def><sym>&gt;&gt; =</sym> <def>Dna</def><sym>,</sym><br />
<def></def>    <kwd>gen_freq</kwd><def></def><sym>(</sym><def>T</def><sym>,</sym> <def>Len</def><sym>,</sym> <def>Frequency</def><sym>,</sym> <def>Acc</def> <sym>+</sym><def></def><num>1</num><def></def><sym>,</sym> <def>Dec</def> <sym>-</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def></def><kwd>gen_freq</kwd><def></def><sym>(</sym><def>_</def><sym>,</sym> <def>_</def><sym>,</sym> <def>Frequency</def><sym>,</sym> <def>Acc</def><sym>,</sym> <def>_</def><sym>) -&gt;</sym><br />
<def></def>     <sym>{</sym><def>Frequency</def><sym>,</sym><def>Acc</def><sym>}.</sym><br />
<def></def><br />
<kwd>update_counter</kwd><def></def><sym>(</sym><def>Key</def><sym>,</sym> <def>Incr</def><sym>,</sym> <def>T</def><sym>) -&gt;</sym><br />
<def>    try ets</def><sym>:</sym><def></def><kwd>update_counter</kwd><def></def><sym>(</sym><def>T</def><sym>,</sym> <def>Key</def><sym>,</sym> <def>Incr</def><sym>)</sym> <def></def><kwa>of</kwa><br />
<def>	Res</def> <sym>-&gt;</sym><br />
<def>	    Res</def><br />
    <kwa>catch</kwa><br />
<def>	error</def><sym>:</sym><def>badarg</def> <sym>-&gt;</sym><br />
<def>	    ets</def><sym>:</sym><def></def><kwd>insert</kwd><def></def><sym>(</sym><def>T</def><sym>, {</sym><def>Key</def><sym>,</sym> <def>Incr</def><sym>})</sym><br />
<def></def>    <kwa>end</kwa><def></def><sym>.</sym><br />
<def></def><br />
<slc>%% Print the frequency table</slc><br />
<def></def><kwd>printf</kwd><def></def><sym>({</sym><def>Frequency</def><sym>,</sym> <def>Tot</def><sym>}) -&gt;</sym><br />
<def></def>    <kwd>printf</kwd><def></def><sym>(</sym><def>lists</def><sym>:</sym><def></def><kwd>reverse</kwd><def></def><sym>(</sym><def>lists</def><sym>:</sym><def></def><kwd>keysort</kwd><def></def><sym>(</sym><def></def><num>2</num><def></def><sym>,</sym><def>ets</def><sym>:</sym><def></def><kwd>tab2list</kwd><def></def><sym>(</sym><def>Frequency</def><sym>))),</sym> <def>Tot</def><sym>).</sym><br />
<def></def><kwd>printf</kwd><def></def><sym>([],</sym><def>_</def><sym>) -&gt;</sym><br />
<def>    io</def><sym>:</sym><def></def><kwd>fwrite</kwd><def></def><sym>(</sym><def></def><str>&quot;</str><esc>\</esc><str>n&quot;</str><def></def><sym>);</sym><br />
<def></def><kwd>printf</kwd><def></def><sym>([</sym><def>H</def> <sym>|</sym><def>T</def><sym>],</sym><def>Tot</def><sym>)-&gt;</sym><br />
<def></def>    <sym>{</sym><def>Nucleoid</def><sym>,</sym><def>Cnt</def><sym>}=</sym><def>H</def><sym>,</sym><br />
<def>    io</def><sym>:</sym><def></def><kwd>fwrite</kwd><def></def><sym>(</sym><def></def><str>&quot;~s ~.3f</str><esc>\</esc><str>n&quot;</str><def></def><sym>,[</sym><def></def><kwb>binary_to_list</kwb><def></def><sym>(</sym><def>Nucleoid</def><sym>),(</sym><def>Cnt</def><sym>*</sym><def></def><num>100.0</num><def></def><sym>)/</sym><def>Tot</def><sym>]),</sym><br />
<def></def>    <kwd>printf</kwd><def></def><sym>(</sym><def>T</def><sym>,</sym><def>Tot</def><sym>).</sym><br />
<def></def><br />
<kwd>write_count</kwd><def></def><sym>(</sym><def>Dna</def><sym>,</sym> <def>Pattern</def><sym>) -&gt;</sym><br />
<def></def>    <kwd>new_hash</kwd><def></def><sym>(</sym><br />
<def></def>      <kwa>fun</kwa><def></def><sym>(</sym><def>T</def><sym>) -&gt;</sym><br />
<def></def>	      <sym>{</sym> <def>Freq</def> <sym>,</sym><def>_</def><sym>} =</sym> <def></def><kwd>gen_freq</kwd><def></def><sym>(</sym><def>T</def><sym>,</sym> <def>Dna</def><sym>,</sym> <def></def><kwb>size</kwb><def></def><sym>(</sym><def>Pattern</def><sym>)),</sym><br />
<def></def>	      <kwa>case</kwa> <def>ets</def><sym>:</sym><def></def><kwd>lookup</kwd><def></def><sym>(</sym><def>Freq</def><sym>,</sym> <def>Pattern</def><sym>)</sym> <def></def><kwa>of</kwa><br />
<def></def>		  <sym>[{</sym><def>_</def><sym>,</sym> <def>Value</def><sym>}] -&gt;</sym><br />
<def>		      io</def><sym>:</sym><def></def><kwd>fwrite</kwd><def></def><sym>(</sym><def></def><str>&quot;~w</str><esc>\</esc><str>t~s</str><esc>\</esc><str>n&quot;</str><def></def><sym>,[</sym><def>Value</def><sym>,</sym><def></def><kwb>binary_to_list</kwb><def></def><sym>(</sym><def>Pattern</def><sym>)]);</sym><br />
<def></def>		  <sym>[] -&gt;</sym><br />
<def>		      io</def><sym>:</sym><def></def><kwd>fwrite</kwd><def></def><sym>(</sym><def></def><str>&quot;~w</str><esc>\</esc><str>t~s</str><esc>\</esc><str>n&quot;</str><def></def><sym>,[</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><kwb>binary_to_list</kwb><def></def><sym>(</sym><def>Pattern</def><sym>)])</sym><br />
<def></def>	      <kwa>end</kwa><br />
<def></def>      <kwa>end</kwa><def></def><sym>).</sym><br />
<def></def><br />
<kwd>new_hash</kwd><def></def><sym>(</sym><def>F</def><sym>) -&gt;</sym><br />
<def>    T</def> <sym>=</sym> <def>ets</def><sym>:</sym><def></def><kwd>new</kwd><def></def><sym>(</sym><def></def><kwb>hash</kwb><def></def><sym>, [</sym><def>set</def><sym>]),</sym><br />
<def>    Res</def> <sym>=</sym> <def></def><kwd>F</kwd><def></def><sym>(</sym><def>T</def><sym>),</sym><br />
<def>    ets</def><sym>:</sym><def></def><kwd>delete</kwd><def></def><sym>(</sym><def>T</def><sym>),</sym><br />
<def>    Res</def><sym>.</sym><br />
<def></def><br />
<kwd>main</kwd><def></def><sym>(</sym><def>_Arg</def><sym>) -&gt;</sym><br />
<def>    Seq</def> <sym>=</sym> <def></def><kwd>dna_seq</kwd><def></def><sym>(),</sym><br />
<def>    lists</def><sym>:</sym><def></def><kwd>foreach</kwd><def></def><sym>(</sym><def></def><kwa>fun</kwa><def></def><sym>(</sym><def>H</def><sym>) -&gt;</sym><br />
<def></def>			  <kwd>new_hash</kwd><def></def><sym>(</sym><def></def><kwa>fun</kwa><def></def><sym>(</sym><def>T</def><sym>) -&gt;</sym><br />
<def></def>					   <kwd>printf</kwd><def></def><sym>(</sym><def></def><kwd>gen_freq</kwd><def></def><sym>(</sym><def>T</def><sym>,</sym><def>Seq</def><sym>,</sym><def>H</def><sym>))</sym><br />
<def></def>				   <kwa>end</kwa><def></def><sym>)</sym><br />
<def></def>		  <kwa>end</kwa><def></def><sym>, [</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>2</num><def></def><sym>]),</sym><br />
<def>    lists</def><sym>:</sym><def></def><kwd>foreach</kwd><def></def><sym>(</sym><def></def><kwa>fun</kwa><def></def><sym>(</sym><def>H</def><sym>) -&gt;</sym> <def></def><kwd>write_count</kwd><def></def><sym>(</sym><def>Seq</def><sym>,</sym><def>H</def><sym>)</sym> <def></def><kwa>end</kwa><def></def><sym>, [&lt;&lt;</sym><def></def><str>&quot;GGT&quot;</str><def></def><sym>&gt;&gt;,&lt;&lt;</sym><def></def><str>&quot;GGTA&quot;</str><def></def><sym>&gt;&gt;,&lt;&lt;</sym><def></def><str>&quot;GGTATT&quot;</str><def></def><sym>&gt;&gt;,&lt;&lt;</sym><def></def><str>&quot;GGTATTTTAATT&quot;</str><def></def><sym>&gt;&gt;,&lt;&lt;</sym><def></def><str>&quot;GGTATTTTAATTTATAGT&quot;</str><def></def><sym>&gt;&gt;]),</sym><br />
<def></def>    <kwb>halt</kwb><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>).</sym><br />
<def></def><br />
</source>
