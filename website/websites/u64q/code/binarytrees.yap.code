<source>
<def></def><slc>% ----------------------------------------------------------------------</slc><br />
<def></def><slc>% The Computer Language Benchmarks Game</slc><br />
<def></def><slc>% http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>%</slc><br />
<def></def><slc>% Contributed by Anthony Borla</slc><br />
<def></def><slc>% Modified to run with YAP by Glendon Holst</slc><br />
<def></def><slc>% ----------------------------------------------------------------------</slc><br />
<def></def><br />
<sym>:-</sym> <def>yap_flag</def><sym>(</sym><def>unknown</def><sym>,</sym><def>error</def><sym>).</sym><br />
<def></def><br />
<sym>:-</sym> <def>initialization</def><sym>(</sym><def>main</def><sym>).</sym><br />
<def><br />
main</def> <sym>:-</sym><br />
<def>   unix</def><sym>(</sym> <def>argv</def><sym>([</sym><def>H</def><sym>|</sym><def>_</def><sym>]) ),</sym> <def>number_atom</def><sym>(</sym><def>N</def><sym>,</sym><def>H</def><sym>),</sym><br />
<def><br />
   MIN_DEPTH</def> <kwa>is</kwa> <def></def><num>4</num><def></def><sym>,</sym> <def>set_limits</def><sym>(</sym><def>N</def><sym>,</sym> <def>MIN_DEPTH</def><sym>,</sym> <def>MAX_DEPTH</def><sym>,</sym> <def>STRETCH_DEPTH</def><sym>),</sym><br />
<def><br />
   bottom_up_tree</def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def>STRETCH_DEPTH</def><sym>,</sym> <def>ST</def><sym>),</sym><br />
<def><br />
   check_tree</def><sym>(</sym><def>ST</def><sym>,</sym> <def>ITS</def><sym>),</sym><br />
<def>   format</def><sym>(</sym><def></def><str>'stretch tree of depth ~w</str><esc>\t</esc> <str>check: ~w~n'</str><def></def><sym>, [</sym><def>STRETCH_DEPTH</def><sym>,</sym> <def>ITS</def><sym>]),</sym><br />
<def><br />
   bottom_up_tree</def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def>MAX_DEPTH</def><sym>,</sym> <def>LLT</def><sym>),</sym><br />
<def><br />
   descend_trees</def><sym>(</sym><def>MIN_DEPTH</def><sym>,</sym> <def>MIN_DEPTH</def><sym>,</sym> <def>MAX_DEPTH</def><sym>),</sym><br />
<def><br />
   check_tree</def><sym>(</sym><def>LLT</def><sym>,</sym> <def>ITL</def><sym>),</sym><br />
<def>   format</def><sym>(</sym><def></def><str>'long lived tree of depth ~w</str><esc>\t</esc> <str>check: ~w~n'</str><def></def><sym>, [</sym><def>MAX_DEPTH</def><sym>,</sym> <def>ITL</def><sym>]).</sym><br />
<def></def><br />
<slc>% ------------------------------- %</slc><br />
<def><br />
set_limits</def><sym>(</sym><def>N</def><sym>,</sym> <def>MinDepth</def><sym>,</sym> <def>MaxDepth</def><sym>,</sym> <def>StretchDepth</def><sym>) :-</sym><br />
<def>   MinDepth1</def> <kwa>is</kwa> <def>MinDepth</def> <sym>+</sym> <def></def><num>2</num><def></def><sym>,</sym><br />
<def></def>   <sym>(</sym><def>MinDepth1</def> <sym>&gt;</sym> <def>N</def> <sym>-&gt;</sym> <def>MaxDepth</def> <kwa>is</kwa> <def>MinDepth1</def> <sym>;</sym> <def>MaxDepth</def> <kwa>is</kwa> <def>N</def><sym>),</sym><br />
<def>   StretchDepth</def> <kwa>is</kwa> <def>MaxDepth</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>.</sym><br />
<def></def><br />
<slc>% ------------------------------- %</slc><br />
<def><br />
descend_trees</def><sym>(</sym><def>CurrentDepth</def><sym>,</sym> <def>MinDepth</def><sym>,</sym> <def>MaxDepth</def><sym>) :-</sym><br />
<def></def><sym>(</sym><br />
<def>   CurrentDepth</def> <sym>=&lt;</sym> <def>MaxDepth</def> <sym>-&gt;</sym><br />
<def>    N</def> <kwa>is</kwa> <def></def><kwb>integer</kwb><def></def><sym>(</sym><def></def><num>2</num> <def></def><sym>** (</sym><def>MaxDepth</def> <sym>-</sym> <def>CurrentDepth</def> <sym>+</sym> <def>MinDepth</def><sym>)),</sym> <def>Iterations</def> <kwa>is</kwa> <def></def><num>2</num> <def></def><sym>*</sym> <def>N</def><sym>,</sym><br />
<def>    sum_trees</def><sym>(</sym><def>N</def><sym>,</sym> <def>CurrentDepth</def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>Sum</def><sym>),</sym><br />
<def>    format</def><sym>(</sym><def></def><str>'~w</str><esc>\t</esc> <str>trees of depth ~w</str><esc>\t</esc> <str>check: ~w~n'</str><def></def><sym>, [</sym><def>Iterations</def><sym>,</sym> <def>CurrentDepth</def><sym>,</sym> <def>Sum</def><sym>]),</sym><br />
<def>    NewDepth</def> <kwa>is</kwa> <def>CurrentDepth</def> <sym>+</sym> <def></def><num>2</num><def></def><sym>, !,</sym> <def>descend_trees</def><sym>(</sym><def>NewDepth</def><sym>,</sym> <def>MinDepth</def><sym>,</sym> <def>MaxDepth</def><sym>)</sym><br />
<def></def><sym>;</sym><br />
<def></def>    <kwa>true</kwa><br />
<def></def><sym>).</sym><br />
<def></def><br />
<slc>% ------------- %</slc><br />
<def><br />
sum_trees</def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def>_</def><sym>,</sym> <def>AccSum</def><sym>,</sym> <def>AccSum</def><sym>) :- !.</sym><br />
<def><br />
sum_trees</def><sym>(</sym><def>N</def><sym>,</sym> <def>CurrentDepth</def><sym>,</sym> <def>AccSum</def><sym>,</sym> <def>Sum</def><sym>) :-</sym><br />
<def>   bottom_up_tree</def><sym>(</sym><def>N</def><sym>,</sym> <def>CurrentDepth</def><sym>,</sym> <def>TreeLeft</def><sym>),</sym><br />
<def>   Nneg</def> <kwa>is</kwa> <def></def><sym>-</sym><def></def><num>1</num> <def></def><sym>*</sym> <def>N</def><sym>,</sym> <def>bottom_up_tree</def><sym>(</sym><def>Nneg</def><sym>,</sym> <def>CurrentDepth</def><sym>,</sym> <def>TreeRight</def><sym>),</sym><br />
<def>   check_tree</def><sym>(</sym><def>TreeLeft</def><sym>,</sym> <def>ItemLeft</def><sym>),</sym> <def>check_tree</def><sym>(</sym><def>TreeRight</def><sym>,</sym> <def>ItemRight</def><sym>),</sym><br />
<def>   AccSum1</def> <kwa>is</kwa> <def>AccSum</def> <sym>+</sym> <def>ItemLeft</def> <sym>+</sym> <def>ItemRight</def><sym>,</sym><br />
<def>   N1</def> <kwa>is</kwa> <def>N</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>, !,</sym> <def>sum_trees</def><sym>(</sym><def>N1</def><sym>,</sym> <def>CurrentDepth</def><sym>,</sym> <def>AccSum1</def><sym>,</sym> <def>Sum</def><sym>).</sym><br />
<def></def><br />
<slc>% ------------------------------- %</slc><br />
<def><br />
make_tree</def><sym>(</sym><def>Item</def><sym>,</sym> <def>Left</def><sym>,</sym> <def>Right</def><sym>,</sym> <def>tree</def><sym>(</sym><def>Item</def><sym>,</sym> <def>Left</def><sym>,</sym> <def>Right</def><sym>)).</sym><br />
<def></def><br />
<slc>% ------------- %</slc><br />
<def><br />
bottom_up_tree</def><sym>(</sym><def>Item</def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>tree</def><sym>(</sym><def>Item</def><sym>,</sym> <def>nil</def><sym>,</sym> <def>nil</def><sym>)) :- !.</sym><br />
<def><br />
bottom_up_tree</def><sym>(</sym><def>Item</def><sym>,</sym> <def>Depth</def><sym>,</sym> <def>Tree</def><sym>) :-</sym><br />
<def>   ItemLeft</def> <kwa>is</kwa> <def></def><num>2</num> <def></def><sym>*</sym> <def>Item</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>DepthLeft</def> <kwa>is</kwa> <def>Depth</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>,</sym><br />
<def>   bottom_up_tree</def><sym>(</sym><def>ItemLeft</def><sym>,</sym> <def>DepthLeft</def><sym>,</sym> <def>TreeLeft</def><sym>),</sym><br />
<def>   ItemRight</def> <kwa>is</kwa> <def></def><num>2</num> <def></def><sym>*</sym> <def>Item</def><sym>,</sym> <def>DepthRight</def> <kwa>is</kwa> <def>Depth</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>,</sym><br />
<def>   bottom_up_tree</def><sym>(</sym><def>ItemRight</def><sym>,</sym> <def>DepthRight</def><sym>,</sym> <def>TreeRight</def><sym>),</sym><br />
<def>   make_tree</def><sym>(</sym><def>Item</def><sym>,</sym> <def>TreeLeft</def><sym>,</sym> <def>TreeRight</def><sym>,</sym> <def>Tree</def><sym>).</sym><br />
<def></def><br />
<slc>% ------------- %</slc><br />
<def><br />
check_tree</def><sym>(</sym><def>tree</def><sym>(</sym><def>Item</def><sym>,</sym> <def>nil</def><sym>,</sym> <def>_</def><sym>),</sym> <def>Item</def><sym>) :- !.</sym><br />
<def>check_tree</def><sym>(</sym><def>tree</def><sym>(</sym><def>Item</def><sym>,</sym> <def>_</def><sym>,</sym> <def>nil</def><sym>),</sym> <def>Item</def><sym>) :- !.</sym><br />
<def><br />
check_tree</def><sym>(</sym><def>tree</def><sym>(</sym><def>Item</def><sym>,</sym> <def>Left</def><sym>,</sym> <def>Right</def><sym>),</sym> <def>ItemNew</def><sym>) :-</sym><br />
<def>   check_tree</def><sym>(</sym><def>Left</def><sym>,</sym> <def>ItemLeft</def><sym>),</sym><br />
<def>   check_tree</def><sym>(</sym><def>Right</def><sym>,</sym> <def>ItemRight</def><sym>),</sym><br />
<def>   ItemNew</def> <kwa>is</kwa> <def>Item</def> <sym>+</sym> <def>ItemLeft</def> <sym>-</sym> <def>ItemRight</def><sym>.</sym><br />
<def></def><br />
<slc>% ------------------------------- %</slc><def></def><br />
</source>
