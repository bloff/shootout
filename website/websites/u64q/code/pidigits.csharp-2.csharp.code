<source>
<def></def><com>/* The Computer Language Benchmarks Game</com><br />
<com> *    http://shootout.alioth.debian.org/</com><br />
<com> *</com><br />
<com> * Contributed by Alp Toker &lt;alp@atoker.com&gt;</com><br />
<com> * Modified by Antti Lankila &lt;alankila@bel.fi&gt;</com><br />
<com> */</com><def></def><br />
<br />
<kwa>using</kwa> <def>System</def><sym>;</sym><br />
<def></def><kwa>using</kwa> <def>UBigInteger</def> <sym>=</sym> <def>Mono</def><sym>.</sym><def>Math</def><sym>.</sym><def>BigInteger</def><sym>;</sym><br />
<def></def><br />
<kwa>public class</kwa> <def>pidigits</def><br />
<sym>{</sym><br />
<def></def>    <kwb>const int</kwb> <def>L</def> <sym>=</sym> <def></def><num>10</num><def></def><sym>;</sym><br />
<def></def><br />
    <kwa>public static</kwa> <def></def><kwb>void</kwb> <def></def><kwd>Main</kwd> <def></def><sym>(</sym><def></def><kwb>string</kwb><def></def><sym>[]</sym> <def>args</def><sym>)</sym><br />
<def></def>    <sym>{</sym><br />
<def></def>	<kwa>if</kwa> <def></def><sym>(</sym><def>args</def><sym>.</sym><def>Length</def> <sym>!=</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>	    <kwa>return</kwa><def></def><sym>;</sym><br />
<def></def><br />
	<kwb>int</kwb> <def>n</def> <sym>=</sym> <def>Int32</def><sym>.</sym><def></def><kwd>Parse</kwd><def></def><sym>(</sym><def>args</def><sym>[</sym><def></def><num>0</num><def></def><sym>]);</sym><br />
<def></def>	<kwb>int</kwb> <def>j</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def><br />
	PiDigitSpigot pds</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>PiDigitSpigot</kwd><def></def><sym>();</sym><br />
<def></def>	<kwa>while</kwa> <def></def><sym>(</sym><def>j</def> <sym>&lt;</sym> <def>n</def><sym>) {</sym><br />
<def></def>	    <kwb>string</kwb> <def>output</def> <sym>=</sym> <def></def><str>&quot;&quot;</str><def></def><sym>;</sym><br />
<def></def>	    <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>!=</sym> <def>L</def> <sym>&amp;&amp;</sym> <def>j</def> <sym>!=</sym> <def>n</def><sym>;</sym> <def>i</def><sym>++,</sym> <def>j</def><sym>++)</sym><br />
<def>		output</def> <sym>+=</sym> <def>pds</def><sym>.</sym><def></def><kwd>Next</kwd><def></def><sym>();</sym><br />
<def>            Console</def><sym>.</sym><def></def><kwd>WriteLine</kwd><def></def><sym>(</sym><def></def><str>&quot;{0,-&quot;</str><def></def> <sym>+</sym> <def>L</def> <sym>+</sym> <def></def><str>&quot;}</str><esc>\t</esc><str>:{1}&quot;</str><def></def><sym>,</sym> <def>output</def><sym>,</sym> <def>j</def><sym>);</sym><br />
<def></def>	<sym>}</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwa>class</kwa> <def>PiDigitSpigot</def><br />
<sym>{</sym><br />
<def></def>    <kwa>private</kwa> <def>BigInteger z0</def> <sym>=</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>z1</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>z2</def> <sym>=</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>    <kwa>private</kwa> <def></def><kwb>int</kwb> <def>k</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><br />
    <kwa>private</kwa> <def></def><kwb>int</kwb> <def></def><kwd>ExtractDigit</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>digit</def><sym>)</sym><br />
<def></def>    <sym>{</sym><br />
<def></def>	<kwa>return</kwa> <def></def><sym>((</sym><def>z0</def> <sym>*</sym> <def>digit</def> <sym>+</sym> <def>z1</def><sym>) /</sym> <def>z2</def><sym>).</sym><def></def><kwd>IntValue</kwd><def></def><sym>();</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <kwa>private</kwa> <def></def><kwb>void</kwb> <def></def><kwd>Compose_k</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>k</def><sym>)</sym><br />
<def></def>    <sym>{</sym><br />
<def></def>	<kwb>int</kwb> <def>k2</def> <sym>=</sym> <def></def><num>2</num> <def></def><sym>*</sym> <def>k</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def>	z1</def> <sym>=</sym> <def>k2</def> <sym>*</sym> <def>z1</def> <sym>+</sym> <def></def><num>2</num> <def></def><sym>*</sym> <def>k2</def> <sym>*</sym> <def>z0</def><sym>;</sym><br />
<def>	z0</def> <sym>*=</sym> <def>k</def><sym>;</sym><br />
<def>	z2</def> <sym>*=</sym> <def>k2</def><sym>;</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <kwa>private</kwa> <def></def><kwb>void</kwb> <def></def><kwd>Compose_d</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>d</def><sym>)</sym><br />
<def></def>    <sym>{</sym><br />
<def>	z1</def> <sym>=</sym> <def></def><num>10</num> <def></def><sym>*</sym> <def>z1</def> <sym>+ -</sym><def></def><num>10</num> <def></def><sym>*</sym> <def>d</def> <sym>*</sym> <def>z2</def><sym>;</sym><br />
<def>	z0</def> <sym>*=</sym> <def></def><num>10</num><def></def><sym>;</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <kwa>public</kwa> <def></def><kwb>int</kwb> <def></def><kwd>Next</kwd><def></def><sym>()</sym><br />
<def></def>    <sym>{</sym><br />
<def></def>	<kwb>int</kwb> <def>d</def><sym>;</sym><br />
<def></def>	<kwa>while</kwa> <def></def><sym>(</sym><def>z0</def> <sym>==</sym> <def>z2</def> <sym>|| (</sym><def>d</def> <sym>=</sym> <def></def><kwd>ExtractDigit</kwd><def></def><sym>(</sym><def></def><num>3</num><def></def><sym>)) !=</sym> <def></def><kwd>ExtractDigit</kwd><def></def><sym>(</sym><def></def><num>4</num><def></def><sym>))</sym><br />
<def></def>	    <kwd>Compose_k</kwd><def></def><sym>(++</sym><def>k</def><sym>);</sym><br />
<def></def>	<kwd>Compose_d</kwd><def></def><sym>(</sym><def>d</def><sym>);</sym><br />
<def></def>	<kwa>return</kwa> <def>d</def><sym>;</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwa>class</kwa> <def>BigInteger</def><br />
<sym>{</sym><br />
<def></def>    <kwa>private</kwa> <def>UBigInteger bi</def><sym>;</sym><br />
<def></def>    <kwa>private</kwa> <def></def><kwb>int</kwb> <def>sign</def> <sym>=</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>    <kwa>private static readonly</kwa> <def>BigInteger zero</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><br />
    <kwa>private</kwa> <def></def><kwd>BigInteger</kwd> <def></def><sym>() {}</sym><br />
<def></def><br />
    <kwa>public static implicit operator</kwa> <def></def><kwd>BigInteger</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def><sym>)</sym><br />
<def></def>    <sym>{</sym><br />
<def></def>	<kwa>return new</kwa> <def></def><kwd>BigInteger</kwd><def></def><sym>(</sym><def>i</def><sym>);</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <kwa>public</kwa> <def></def><kwd>BigInteger</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def></def><kwa>value</kwa><def></def><sym>)</sym><br />
<def></def>    <sym>{</sym><br />
<def></def>	<kwa>if</kwa> <def></def><sym>(</sym><def></def><kwa>value</kwa> <def></def><sym>==</sym> <def></def><num>0</num><def></def><sym>)</sym><br />
<def>	    sign</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>	<kwa>else if</kwa> <def></def><sym>(</sym><def></def><kwa>value</kwa> <def></def><sym>&lt;</sym> <def></def><num>0</num><def></def><sym>) {</sym><br />
<def>	    sign</def> <sym>= -</sym><def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>	    <kwa>value</kwa> <def></def><sym>= -</sym><def></def><kwa>value</kwa><def></def><sym>;</sym><br />
<def></def>	<sym>}</sym><br />
<def>	bi</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>UBigInteger</kwd><def></def><sym>(</sym><def></def><kwa>value</kwa><def></def><sym>);</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <kwa>public</kwa> <def></def><kwb>int</kwb> <def></def><kwd>IntValue</kwd><def></def><sym>()</sym><br />
<def></def>    <sym>{</sym><br />
<def></def>	<kwa>return</kwa> <def>sign</def> <sym>*</sym> <def>bi</def><sym>.</sym><def></def><kwd>GetBytes</kwd><def></def><sym>()[</sym><def></def><num>0</num><def></def><sym>];</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <kwa>public override</kwa> <def></def><kwb>string</kwb> <def></def><kwd>ToString</kwd> <def></def><sym>()</sym><br />
<def></def>    <sym>{</sym><br />
<def></def>	<kwa>return</kwa> <def></def><sym>(</sym><def>sign</def> <sym>== -</sym><def></def><num>1</num> <def>?</def> <str>&quot;-&quot;</str><def></def> <sym>:</sym> <def></def><str>&quot;&quot;</str><def></def><sym>) +</sym> <def>bi</def><sym>.</sym><def></def><kwd>ToString</kwd> <def></def><sym>();</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <kwa>public static</kwa> <def>BigInteger</def> <kwa>operator</kwa> <def></def><sym>* (</sym><def>BigInteger bi1</def><sym>,</sym> <def>BigInteger bi2</def><sym>)</sym><br />
<def></def>    <sym>{</sym><br />
<def>	BigInteger ret</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>BigInteger</kwd><def></def><sym>();</sym><br />
<def>	ret</def><sym>.</sym><def>bi</def> <sym>=</sym> <def>bi1</def><sym>.</sym><def>bi</def> <sym>*</sym> <def>bi2</def><sym>.</sym><def>bi</def><sym>;</sym><br />
<def>	ret</def><sym>.</sym><def>sign</def> <sym>=</sym> <def>bi1</def><sym>.</sym><def>sign</def> <sym>*</sym> <def>bi2</def><sym>.</sym><def>sign</def><sym>;</sym><br />
<def></def>	<kwa>return</kwa> <def>ret</def><sym>;</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <kwa>public static</kwa> <def>BigInteger</def> <kwa>operator</kwa> <def></def><sym>/ (</sym><def>BigInteger bi1</def><sym>,</sym> <def>BigInteger bi2</def><sym>)</sym><br />
<def></def>    <sym>{</sym><br />
<def>	BigInteger ret</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>BigInteger</kwd><def></def><sym>();</sym><br />
<def>	ret</def><sym>.</sym><def>bi</def> <sym>=</sym> <def>bi1</def><sym>.</sym><def>bi</def> <sym>/</sym> <def>bi2</def><sym>.</sym><def>bi</def><sym>;</sym><br />
<def>	ret</def><sym>.</sym><def>sign</def> <sym>=</sym> <def>bi1</def><sym>.</sym><def>sign</def> <sym>*</sym> <def>bi2</def><sym>.</sym><def>sign</def><sym>;</sym><br />
<def></def>	<kwa>return</kwa> <def>ret</def><sym>;</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <kwa>public static</kwa> <def>BigInteger</def> <kwa>operator</kwa> <def></def><sym>+ (</sym><def>BigInteger bi1</def><sym>,</sym> <def>BigInteger bi2</def><sym>)</sym><br />
<def></def>    <sym>{</sym><br />
<def></def>	<kwa>if</kwa> <def></def><sym>(</sym><def>bi1</def><sym>.</sym><def>sign</def> <sym>==</sym> <def></def><num>0</num><def></def><sym>)</sym><br />
<def></def>	    <kwa>return</kwa> <def>bi2</def><sym>;</sym><br />
<def></def><br />
	<kwa>if</kwa> <def></def><sym>(</sym><def>bi2</def><sym>.</sym><def>sign</def> <sym>==</sym> <def></def><num>0</num><def></def><sym>)</sym><br />
<def></def>	    <kwa>return</kwa> <def>bi1</def><sym>;</sym><br />
<def></def><br />
	<kwa>if</kwa> <def></def><sym>(</sym><def>bi1</def><sym>.</sym><def>sign</def> <sym>==</sym> <def>bi2</def><sym>.</sym><def>sign</def><sym>) {</sym><br />
<def>	    BigInteger ret</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>BigInteger</kwd><def></def><sym>();</sym><br />
<def>	    ret</def><sym>.</sym><def>bi</def> <sym>=</sym> <def>bi1</def><sym>.</sym><def>bi</def> <sym>+</sym> <def>bi2</def><sym>.</sym><def>bi</def><sym>;</sym><br />
<def>	    ret</def><sym>.</sym><def>sign</def> <sym>=</sym> <def>bi1</def><sym>.</sym><def>sign</def><sym>;</sym><br />
<def></def>	    <kwa>return</kwa> <def>ret</def><sym>;</sym><br />
<def></def>	<sym>}</sym><br />
<def></def><br />
<br />
	<kwa>if</kwa> <def></def><sym>(</sym><def>bi1</def><sym>.</sym><def>bi</def> <sym>==</sym> <def>bi2</def><sym>.</sym><def>bi</def><sym>)</sym><br />
<def></def>	    <kwa>return</kwa> <def>zero</def><sym>;</sym><br />
<def></def><br />
	<kwa>if</kwa> <def></def><sym>(</sym><def>bi1</def><sym>.</sym><def>bi</def> <sym>&lt;</sym> <def>bi2</def><sym>.</sym><def>bi</def><sym>) {</sym><br />
<def>	    BigInteger ret</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>BigInteger</kwd><def></def><sym>();</sym><br />
<def>	    ret</def><sym>.</sym><def>bi</def> <sym>=</sym> <def>bi2</def><sym>.</sym><def>bi</def> <sym>-</sym> <def>bi1</def><sym>.</sym><def>bi</def><sym>;</sym><br />
<def>	    ret</def><sym>.</sym><def>sign</def> <sym>=</sym> <def>bi2</def><sym>.</sym><def>sign</def><sym>;</sym><br />
<def></def>	    <kwa>return</kwa> <def>ret</def><sym>;</sym><br />
<def></def>	<sym>}</sym> <def></def><kwa>else</kwa> <def></def><sym>{</sym><br />
<def>	    BigInteger ret</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>BigInteger</kwd><def></def><sym>();</sym><br />
<def>	    ret</def><sym>.</sym><def>bi</def> <sym>=</sym> <def>bi1</def><sym>.</sym><def>bi</def> <sym>-</sym> <def>bi2</def><sym>.</sym><def>bi</def><sym>;</sym><br />
<def>	    ret</def><sym>.</sym><def>sign</def> <sym>= -</sym><def></def><num>1</num> <def></def><sym>*</sym> <def>bi2</def><sym>.</sym><def>sign</def><sym>;</sym><br />
<def></def>	    <kwa>return</kwa> <def>ret</def><sym>;</sym><br />
<def></def>	<sym>}</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
