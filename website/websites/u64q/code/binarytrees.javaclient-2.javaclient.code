<source>
<def></def><com>/* The Great Computer Language Shootout</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com></com><br />
<com>   contributed by Jarkko Miettinen</com><br />
<com>*/</com><def></def><br />
<br />
<kwa>public class</kwa> <def>binarytrees</def> <sym>{</sym><br />
<def></def><br />
	<kwa>private final static</kwa> <def></def><kwb>int</kwb> <def>minDepth</def> <sym>=</sym> <def></def><num>4</num><def></def><sym>;</sym><br />
<def></def><br />
	<kwa>public static</kwa> <def></def><kwb>void</kwb> <def></def><kwd>main</kwd><def></def><sym>(</sym><def></def><kwc>String</kwc><def></def><sym>[]</sym> <def>args</def><sym>){</sym><br />
<def></def>		<kwb>int</kwb> <def>n</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>		<kwa>if</kwa> <def></def><sym>(</sym><def>args</def><sym>.</sym><def>length</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>)</sym> <def>n</def> <sym>=</sym> <def></def><kwc>Integer</kwc><def></def><sym>.</sym><def></def><kwd>parseInt</kwd><def></def><sym>(</sym><def>args</def><sym>[</sym><def></def><num>0</num><def></def><sym>]);</sym><br />
<def></def><br />
		<kwb>int</kwb> <def>maxDepth</def> <sym>= (</sym><def>minDepth</def> <sym>+</sym> <def></def><num>2</num> <def></def><sym>&gt;</sym> <def>n</def><sym>)</sym> <def>? minDepth</def> <sym>+</sym> <def></def><num>2</num> <def></def><sym>:</sym> <def>n</def><sym>;</sym><br />
<def></def>		<kwb>int</kwb> <def>stretchDepth</def> <sym>=</sym> <def>maxDepth</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def><br />
		<kwb>int</kwb> <def>check</def> <sym>= (</sym><def></def><kwc>TreeNode</kwc><def></def><sym>.</sym><def></def><kwd>bottomUpTree</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym><def>stretchDepth</def><sym>)).</sym><def></def><kwd>itemCheck</kwd><def></def><sym>();</sym><br />
<def></def>		<kwc>System</kwc><def></def><sym>.</sym><def>out</def><sym>.</sym><def></def><kwd>println</kwd><def></def><sym>(</sym><def></def><str>&quot;stretch tree of depth &quot;</str><def></def><sym>+</sym><def>stretchDepth</def><sym>+</sym><def></def><str>&quot;</str><esc>\t</esc> <str>check: &quot;</str><def></def> <sym>+</sym> <def>check</def><sym>);</sym><br />
<def></def><br />
		<kwc>TreeNode</kwc> <def>longLivedTree</def> <sym>=</sym> <def></def><kwc>TreeNode</kwc><def></def><sym>.</sym><def></def><kwd>bottomUpTree</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym><def>maxDepth</def><sym>);</sym><br />
<def></def><br />
		<kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>depth</def><sym>=</sym><def>minDepth</def><sym>;</sym> <def>depth</def><sym>&lt;=</sym><def>maxDepth</def><sym>;</sym> <def>depth</def><sym>+=</sym><def></def><num>2</num><def></def><sym>){</sym><br />
<def></def>			<kwb>int</kwb> <def>iterations</def> <sym>=</sym> <def></def><num>1</num> <def></def><sym>&lt;&lt; (</sym><def>maxDepth</def> <sym>-</sym> <def>depth</def> <sym>+</sym> <def>minDepth</def><sym>);</sym><br />
<def>			check</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><br />
			<kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def><sym>=</sym><def></def><num>1</num><def></def><sym>;</sym> <def>i</def><sym>&lt;=</sym><def>iterations</def><sym>;</sym> <def>i</def><sym>++){</sym><br />
<def>				check</def> <sym>+= (</sym><def></def><kwc>TreeNode</kwc><def></def><sym>.</sym><def></def><kwd>bottomUpTree</kwd><def></def><sym>(</sym><def>i</def><sym>,</sym><def>depth</def><sym>)).</sym><def></def><kwd>itemCheck</kwd><def></def><sym>();</sym><br />
<def>				check</def> <sym>+= (</sym><def></def><kwc>TreeNode</kwc><def></def><sym>.</sym><def></def><kwd>bottomUpTree</kwd><def></def><sym>(-</sym><def>i</def><sym>,</sym><def>depth</def><sym>)).</sym><def></def><kwd>itemCheck</kwd><def></def><sym>();</sym><br />
<def></def>			<sym>}</sym><br />
<def></def>			<kwc>System</kwc><def></def><sym>.</sym><def>out</def><sym>.</sym><def></def><kwd>println</kwd><def></def><sym>((</sym><def>iterations</def><sym>*</sym><def></def><num>2</num><def></def><sym>) +</sym> <def></def><str>&quot;</str><esc>\t</esc> <str>trees of depth &quot;</str><def></def> <sym>+</sym> <def>depth</def> <sym>+</sym> <def></def><str>&quot;</str><esc>\t</esc> <str>check: &quot;</str><def></def> <sym>+</sym> <def>check</def><sym>);</sym><br />
<def></def>		<sym>}</sym><br />
<def></def>		<kwc>System</kwc><def></def><sym>.</sym><def>out</def><sym>.</sym><def></def><kwd>println</kwd><def></def><sym>(</sym><def></def><str>&quot;long lived tree of depth &quot;</str><def></def> <sym>+</sym> <def>maxDepth</def> <sym>+</sym> <def></def><str>&quot;</str><esc>\t</esc> <str>check: &quot;</str><def></def><sym>+</sym> <def>longLivedTree</def><sym>.</sym><def></def><kwd>itemCheck</kwd><def></def><sym>());</sym><br />
<def></def>	<sym>}</sym><br />
<def></def><br />
<br />
	<kwa>private static class</kwa> <def></def><kwc>TreeNode</kwc><br />
<def></def>	<sym>{</sym><br />
<def></def>		<kwa>private</kwa> <def></def><kwc>TreeNode</kwc> <def>left</def><sym>,</sym> <def>right</def><sym>;</sym><br />
<def></def>		<kwa>private</kwa> <def></def><kwb>int</kwb> <def>item</def><sym>;</sym><br />
<def></def><br />
		<kwc>TreeNode</kwc><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>item</def><sym>){</sym><br />
<def></def>			<kwa>this</kwa><def></def><sym>.</sym><def>item</def> <sym>=</sym> <def>item</def><sym>;</sym><br />
<def></def>		<sym>}</sym><br />
<def></def><br />
		<kwa>private static</kwa> <def></def><kwc>TreeNode</kwc> <def></def><kwd>bottomUpTree</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>item</def><sym>,</sym> <def></def><kwb>int</kwb> <def>depth</def><sym>){</sym><br />
<def></def>			<kwa>if</kwa> <def></def><sym>(</sym><def>depth</def><sym>&gt;</sym><def></def><num>0</num><def></def><sym>){</sym><br />
<def></def>				<kwa>return new</kwa> <def></def><kwc>TreeNode</kwc><def></def><sym>(</sym><br />
<def></def>						<kwd>bottomUpTree</kwd><def></def><sym>(</sym><def></def><num>2</num><def></def><sym>*</sym><def>item</def><sym>-</sym><def></def><num>1</num><def></def><sym>,</sym> <def>depth</def><sym>-</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>						<sym>,</sym> <def></def><kwd>bottomUpTree</kwd><def></def><sym>(</sym><def></def><num>2</num><def></def><sym>*</sym><def>item</def><sym>,</sym> <def>depth</def><sym>-</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>						<sym>,</sym> <def>item</def><br />
				<sym>);</sym><br />
<def></def>			<sym>}</sym><br />
<def></def>			<kwa>else</kwa> <def></def><sym>{</sym><br />
<def></def>				<kwa>return new</kwa> <def></def><kwc>TreeNode</kwc><def></def><sym>(</sym><def>item</def><sym>);</sym><br />
<def></def>			<sym>}</sym><br />
<def></def>		<sym>}</sym><br />
<def></def><br />
		<kwc>TreeNode</kwc><def></def><sym>(</sym><def></def><kwc>TreeNode</kwc> <def>left</def><sym>,</sym> <def></def><kwc>TreeNode</kwc> <def>right</def><sym>,</sym> <def></def><kwb>int</kwb> <def>item</def><sym>){</sym><br />
<def></def>			<kwa>this</kwa><def></def><sym>.</sym><def>left</def> <sym>=</sym> <def>left</def><sym>;</sym><br />
<def></def>			<kwa>this</kwa><def></def><sym>.</sym><def>right</def> <sym>=</sym> <def>right</def><sym>;</sym><br />
<def></def>			<kwa>this</kwa><def></def><sym>.</sym><def>item</def> <sym>=</sym> <def>item</def><sym>;</sym><br />
<def></def>		<sym>}</sym><br />
<def></def><br />
		<kwa>private</kwa> <def></def><kwb>int</kwb> <def></def><kwd>itemCheck</kwd><def></def><sym>(){</sym><br />
<def></def>			<slc>// if necessary deallocate here</slc><br />
<def></def>			<kwa>if</kwa> <def></def><sym>(</sym><def>left</def><sym>==</sym><def>null</def><sym>)</sym> <def></def><kwa>return</kwa> <def>item</def><sym>;</sym><br />
<def></def>			<kwa>else return</kwa> <def>item</def> <sym>+</sym> <def>left</def><sym>.</sym><def></def><kwd>itemCheck</kwd><def></def><sym>() -</sym> <def>right</def><sym>.</sym><def></def><kwd>itemCheck</kwd><def></def><sym>();</sym><br />
<def></def>		<sym>}</sym><br />
<def></def>	<sym>}</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
