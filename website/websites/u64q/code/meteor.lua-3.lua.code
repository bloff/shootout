<source>
<def></def><slc>-- The Computer Language Shootout</slc><br />
<def></def><slc>-- http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>-- contributed by Mike Pall</slc><br />
<def></def><br />
<slc>-- Generate a decision tree based solver for the meteor puzzle.</slc><br />
<def></def><kwa>local function</kwa> <def></def><kwd>generatesolver</kwd><def></def><sym>(</sym><def>countinit</def><sym>)</sym><br />
<def></def>  <kwa>local</kwa> <def>pairs</def><sym>,</sym> <def>ipairs</def><sym>,</sym> <def></def><kwb>format</kwb> <def></def><sym>=</sym> <def>pairs</def><sym>,</sym> <def>ipairs</def><sym>,</sym> <def></def><kwb>string</kwb><def></def><sym>.</sym><def></def><kwb>format</kwb><br />
<def></def>  <kwa>local</kwa> <def>byte</def><sym>,</sym> <def></def><kwb>min</kwb><def></def><sym>,</sym> <def></def><kwb>sort</kwb> <def></def><sym>=</sym> <def></def><kwb>string</kwb><def></def><sym>.</sym><def>byte</def><sym>,</sym> <def>math</def><sym>.</sym><def></def><kwb>min</kwb><def></def><sym>,</sym> <def></def><kwb>table</kwb><def></def><sym>.</sym><def></def><kwb>sort</kwb><br />
<def></def><br />
  <slc>-- Cached position to distance lookup.</slc><br />
<def></def>  <kwa>local</kwa> <def>dist</def> <sym>=</sym> <def></def><kwd>setmetatable</kwd><def></def><sym>({}, {</sym> <def>__index</def> <sym>=</sym> <def></def><kwa>function</kwa><def></def><sym>(</sym><def>t</def><sym>,</sym> <def>xy</def><sym>)</sym><br />
<def></def>    <kwa>local</kwa> <def>x</def> <sym>=</sym> <def>xy</def><sym>%</sym><def></def><num>10</num><def></def><sym>;</sym> <def></def><kwa>local</kwa> <def>y</def> <sym>= (</sym><def>xy</def><sym>-</sym><def>x</def><sym>)/</sym><def></def><num>10</num><br />
<def></def>    <kwa>if</kwa> <def></def><sym>(</sym><def>x</def><sym>+</sym><def>y</def><sym>)%</sym><def></def><num>2</num> <def></def><sym>==</sym> <def></def><num>1</num> <def></def><kwa>then</kwa> <def>y</def> <sym>=</sym> <def>y</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym> <def>x</def> <sym>=</sym> <def></def><num>10</num> <def></def><sym>-</sym> <def>x</def> <kwa>end</kwa><br />
<def></def>    <kwa>local</kwa> <def>d</def> <sym>=</sym> <def>xy</def> <sym>+</sym> <def></def><num>256</num><def></def><sym>*</sym><def>x</def><sym>*</sym><def>x</def> <sym>+</sym> <def></def><num>1024</num><def></def><sym>*</sym><def>y</def><sym>*</sym><def>y</def><sym>;</sym> <def>t</def><sym>[</sym><def>xy</def><sym>] =</sym> <def>d</def><sym>;</sym> <def></def><kwa>return</kwa> <def>d</def><br />
  <kwa>end</kwa><def></def><sym>})</sym><br />
<def></def><br />
  <slc>-- Generate an optimized decision tree (within 4% of a hand-tuned tree).</slc><br />
<def></def>  <kwa>local</kwa> <def>dtree</def> <sym>= {}</sym><br />
<def></def>  <kwa>local</kwa> <def>rot</def> <sym>= {</sym> <def></def><kwa>nil</kwa><def></def><sym>, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {} }</sym><br />
<def></def>  <kwa>for</kwa> <def>k</def><sym>=</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>9</num> <def></def><kwa>do</kwa><br />
<def></def>    <slc>-- Generate 10 initial pieces from line noise. :-)</slc><br />
<def></def>    <kwa>local</kwa> <def>t</def> <sym>= {</sym> <def></def><num>60</num><def></def><sym>,</sym> <def></def><num>62</num><def></def><sym>,</sym> <def></def><kwd>byte</kwd><def></def><sym>(</sym><def></def><str>&quot;@BMBIK@KT@GPIKR@IKIKT@GK@KM@BG&quot;</str><def></def><sym>,</sym> <def>k</def><sym>*</sym><def></def><num>3</num><def></def><sym>+</sym><def></def><num>1</num><def></def><sym>,</sym> <def>k</def><sym>*</sym><def></def><num>3</num><def></def><sym>+</sym><def></def><num>3</num><def></def><sym>) }</sym><br />
<def>    rot</def><sym>[</sym><def></def><num>1</num><def></def><sym>] =</sym> <def>t</def><br />
    <kwa>for</kwa> <def>i</def><sym>,</sym><def>xy</def> <kwa>in</kwa> <def></def><kwd>ipairs</kwd><def></def><sym>(</sym><def>t</def><sym>)</sym> <def></def><kwa>do</kwa><br />
<def></def>      <kwa>local</kwa> <def>x</def> <sym>=</sym> <def>xy</def><sym>%</sym><def></def><num>10</num><def></def><sym>;</sym> <def></def><kwa>local</kwa> <def>y</def> <sym>= (</sym><def>xy</def><sym>-</sym><def>x</def><sym>-</sym><def></def><num>60</num><def></def><sym>)/</sym><def></def><num>10</num><br />
<def></def>      <slc>-- Add 11 more variations by rotating and flipping.</slc><br />
<def></def>      <kwa>for</kwa> <def>j</def><sym>=</sym><def></def><num>2</num><def></def><sym>,</sym><def></def><num>12</num> <def></def><kwa>do</kwa><br />
<def></def>	<kwa>if</kwa> <def>j</def> <sym>==</sym> <def></def><num>7</num> <def></def><kwa>then</kwa> <def>y</def> <sym>= -</sym><def>y</def> <kwa>else</kwa> <def>x</def><sym>,</sym><def>y</def> <sym>= (</sym><def>x</def><sym>+</sym><def></def><num>3</num><def></def><sym>*</sym><def>y</def><sym>)/</sym><def></def><num>2</num><def></def><sym>, (</sym><def>y</def><sym>-</sym><def>x</def><sym>)/</sym><def></def><num>2</num> <def></def><kwa>end</kwa><br />
<def>	rot</def><sym>[</sym><def>j</def><sym>][</sym><def>i</def><sym>] =</sym> <def>x</def><sym>+</sym><def></def><num>10</num><def></def><sym>*</sym><def>y</def><br />
      <kwa>end</kwa><br />
<def></def>    <kwa>end</kwa><br />
<def></def>    <kwa>for</kwa> <def>i</def><sym>,</sym><def>v</def> <kwa>in</kwa> <def></def><kwd>ipairs</kwd><def></def><sym>(</sym><def>rot</def><sym>)</sym> <def></def><kwa>do</kwa><br />
<def></def>      <slc>-- Exploit symmetry and leave out half of the orientations of one piece.</slc><br />
<def></def>      <slc>-- The selected piece gives the best reduction of the solution space.</slc><br />
<def></def>      <kwa>if</kwa> <def>k ~</def><sym>=</sym> <def></def><num>3</num> <def></def><kwa>or</kwa> <def>i</def><sym>%</sym><def></def><num>2</num> <def></def><sym>==</sym> <def></def><num>0</num> <def></def><kwa>then</kwa><br />
<def></def>	<slc>-- Normalize to origin, add distance, sort by distance from origin.</slc><br />
<def></def>	<kwa>local</kwa> <def>m</def> <sym>=</sym> <def></def><kwb>min</kwb><def></def><sym>(</sym><def>v</def><sym>[</sym><def></def><num>1</num><def></def><sym>],</sym> <def>v</def><sym>[</sym><def></def><num>2</num><def></def><sym>],</sym> <def>v</def><sym>[</sym><def></def><num>3</num><def></def><sym>],</sym> <def>v</def><sym>[</sym><def></def><num>4</num><def></def><sym>],</sym> <def>v</def><sym>[</sym><def></def><num>5</num><def></def><sym>])</sym><br />
<def></def>	<kwa>for</kwa> <def>i</def><sym>=</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>5</num> <def></def><kwa>do</kwa> <def>v</def><sym>[</sym><def>i</def><sym>] =</sym> <def>dist</def><sym>[</sym><def>v</def><sym>[</sym><def>i</def><sym>]-</sym><def>m</def><sym>]</sym> <def></def><kwa>end</kwa><br />
<def></def>	<kwb>sort</kwb><def></def><sym>(</sym><def>v</def><sym>)</sym><br />
<def></def>	<slc>-- Insert into decision tree in distance order.</slc><br />
<def></def>	<kwa>local</kwa> <def>tt</def> <sym>=</sym> <def>dtree</def><br />
	<kwa>for</kwa> <def>i</def><sym>=</sym><def></def><num>2</num><def></def><sym>,</sym><def></def><num>4</num> <def></def><kwa>do</kwa><br />
<def></def>	  <kwa>local</kwa> <def>xy</def> <sym>=</sym> <def>v</def><sym>[</sym><def>i</def><sym>]%</sym><def></def><num>256</num><br />
<def></def>	  <kwa>local</kwa> <def>tn</def> <sym>=</sym> <def>tt</def><sym>[</sym><def>xy</def><sym>]</sym><br />
<def></def>	  <kwa>if not</kwa> <def>tn</def> <kwa>then</kwa> <def>tn</def> <sym>= {};</sym> <def>tt</def><sym>[</sym><def>xy</def><sym>] =</sym> <def>tn</def> <kwa>end</kwa> <def></def><slc>-- Create nodes as needed.</slc><br />
<def>	  tt</def> <sym>=</sym> <def>tn</def><br />
	<kwa>end</kwa><br />
<def>	tt</def><sym>[</sym><def>v</def><sym>[</sym><def></def><num>5</num><def></def><sym>]%</sym><def></def><num>256</num><def></def><sym>] =</sym> <def>k</def> <slc>-- Leaves hold the piece numbers.</slc><br />
<def></def>      <kwa>end</kwa><br />
<def></def>    <kwa>end</kwa><br />
<def></def>  <kwa>end</kwa><br />
<def></def><br />
  <slc>-- Lookup table to validate a cell and to find its successor.</slc><br />
<def></def>  <kwa>local</kwa> <def>ok</def> <sym>= {}</sym><br />
<def></def>  <kwa>for</kwa> <def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>150</num> <def></def><kwa>do</kwa> <def>ok</def><sym>[</sym><def>i</def><sym>] =</sym> <def></def><kwa>false end</kwa><br />
<def></def>  <kwa>for</kwa> <def>i</def><sym>=</sym><def></def><num>99</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,-</sym><def></def><num>1</num> <def></def><kwa>do</kwa><br />
<def></def>    <kwa>local</kwa> <def>x</def> <sym>=</sym> <def>i</def><sym>%</sym><def></def><num>10</num><br />
<def></def>    <kwa>if</kwa> <def></def><sym>((</sym><def>i</def><sym>-</sym><def>x</def><sym>)/</sym><def></def><num>10</num><def></def><sym>+</sym><def>x</def><sym>)%</sym><def></def><num>2</num> <def></def><sym>==</sym> <def></def><num>0</num> <def></def><kwa>then</kwa><br />
<def>      ok</def><sym>[</sym><def>i</def><sym>] =</sym> <def>i</def> <sym>+ (</sym><def>ok</def><sym>[</sym><def>i</def><sym>+</sym><def></def><num>1</num><def></def><sym>]</sym> <def></def><kwa>and</kwa> <def></def><num>1</num> <def></def><kwa>or</kwa> <def></def><sym>(</sym><def>ok</def><sym>[</sym><def>i</def><sym>+</sym><def></def><num>2</num><def></def><sym>]</sym> <def></def><kwa>and</kwa> <def></def><num>2</num> <def></def><kwa>or</kwa> <def></def><num>3</num><def></def><sym>))</sym><br />
<def></def>    <kwa>end</kwa><br />
<def></def>  <kwa>end</kwa><br />
<def></def><br />
  <kwa>local</kwa> <def>s</def> <sym>=</sym> <def></def><str>&quot;local u0,u1,u2,u3,u4,u5,u6,u7,u8,u9&quot;</str><def></def> <slc>-- Piece use flags.</slc><br />
<def></def>  <kwa>for</kwa> <def>p</def><sym>=</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>99</num> <def></def><kwa>do if</kwa> <def>ok</def><sym>[</sym><def>p</def><sym>]</sym> <def></def><kwa>then</kwa> <def>s</def> <sym>=</sym> <def>s</def><sym>..</sym><def></def><str>&quot;,b&quot;</str><def></def><sym>..</sym><def>p</def> <kwa>end end</kwa> <def></def><slc>-- Board cells.</slc><br />
<def>  s</def> <sym>=</sym> <def>s</def><sym>..</sym><def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>..[[</sym><br />
<def></def><kwa>local</kwa> <def>countinit</def> <sym>= ...</sym><br />
<def></def><kwa>local</kwa> <def>count</def> <sym>=</sym> <def>countinit</def><br />
<kwa>local</kwa> <def>bmin</def><sym>,</sym> <def>bmax</def><sym>,</sym> <def>pcs</def> <sym>=</sym> <def></def><num>9</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>, {}</sym><br />
<def></def><kwa>local</kwa> <def>smin</def><sym>,</sym> <def>smax</def><br />
<kwa>local</kwa> <def></def><kwb>write</kwb><def></def><sym>,</sym> <def>reverse</def> <sym>=</sym> <def>io</def><sym>.</sym><def></def><kwb>write</kwb><def></def><sym>,</sym> <def></def><kwb>string</kwb><def></def><sym>.</sym><def>reverse</def><br />
<br />
<slc>-- Print min/max boards.</slc><br />
<def></def><kwa>local function</kwa> <def></def><kwd>printboard</kwd><def></def><sym>(</sym><def>s</def><sym>)</sym><br />
<def></def>  <kwa>local</kwa> <def>flip</def> <sym>=</sym> <def></def><kwa>true</kwa><br />
<def></def>  <kwa>for</kwa> <def>x</def> <kwa>in</kwa> <def></def><kwb>string</kwb><def></def><sym>.</sym><def></def><kwd>gmatch</kwd><def></def><sym>(</sym><def></def><kwb>string</kwb><def></def><sym>.</sym><def></def><kwb>gsub</kwb><def></def><sym>(</sym><def>s</def><sym>,</sym> <def></def><str>&quot;.&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;%1 &quot;</str><def></def><sym>),</sym> <def></def><str>&quot;..........&quot;</str><def></def><sym>)</sym> <def></def><kwa>do</kwa><br />
<def></def>    <kwb>write</kwb><def></def><sym>(</sym><def>x</def><sym>,</sym> <def>flip</def> <kwa>and</kwa> <def></def><str>&quot;</str><esc>\n</esc> <str>&quot;</str><def></def> <kwa>or</kwa> <def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>)</sym><br />
<def>    flip</def> <sym>=</sym> <def></def><kwa>not</kwa> <def>flip</def><br />
  <kwa>end</kwa><br />
<def></def>  <kwb>write</kwb><def></def><sym>(</sym><def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>)</sym><br />
<def></def><kwa>end</kwa><br />
<def></def><br />
<slc>-- Print result.</slc><br />
<def></def><kwa>local function</kwa> <def></def><kwd>printresult</kwd><def></def><sym>()</sym><br />
<def></def>  <kwb>write</kwb><def></def><sym>(</sym><def>countinit</def><sym>-</sym><def>count</def><sym>,</sym> <def></def><str>&quot; solutions found</str><esc>\n\n</esc><str>&quot;</str><def></def><sym>)</sym><br />
<def></def>  <kwd>printboard</kwd><def></def><sym>(</sym><def>smin</def><sym>)</sym><br />
<def></def>  <kwd>printboard</kwd><def></def><sym>(</sym><def>smax</def><sym>)</sym><br />
<def></def><kwa>end</kwa><br />
<def></def><br />
<slc>-- Generate piece lookup array from the order of use.</slc><br />
<def></def><kwa>local function</kwa> <def></def><kwd>genp</kwd><def></def><sym>()</sym><br />
<def></def>  <kwa>local</kwa> <def>p</def> <sym>=</sym> <def>pcs<br />
  p</def><sym>[</sym><def>u0</def><sym>] =</sym> <def></def><str>&quot;0&quot;</str><def> p</def><sym>[</sym><def>u1</def><sym>] =</sym> <def></def><str>&quot;1&quot;</str><def> p</def><sym>[</sym><def>u2</def><sym>] =</sym> <def></def><str>&quot;2&quot;</str><def> p</def><sym>[</sym><def>u3</def><sym>] =</sym> <def></def><str>&quot;3&quot;</str><def> p</def><sym>[</sym><def>u4</def><sym>] =</sym> <def></def><str>&quot;4&quot;</str><def><br />
  p</def><sym>[</sym><def>u5</def><sym>] =</sym> <def></def><str>&quot;5&quot;</str><def> p</def><sym>[</sym><def>u6</def><sym>] =</sym> <def></def><str>&quot;6&quot;</str><def> p</def><sym>[</sym><def>u7</def><sym>] =</sym> <def></def><str>&quot;7&quot;</str><def> p</def><sym>[</sym><def>u8</def><sym>] =</sym> <def></def><str>&quot;8&quot;</str><def> p</def><sym>[</sym><def>u9</def><sym>] =</sym> <def></def><str>&quot;9&quot;</str><def></def><br />
  <kwa>return</kwa> <def>p</def><br />
<kwa>end</kwa><br />
<def></def><br />
<slc>-- Goal function.</slc><br />
<def></def><kwa>local function</kwa> <def></def><kwd>f91</kwd><def></def><sym>(</sym><def>k</def><sym>)</sym><br />
<def></def>  <kwa>if</kwa> <def>k ~</def><sym>=</sym> <def></def><num>10</num> <def></def><kwa>then return end</kwa><br />
<def>  count</def> <sym>=</sym> <def>count</def> <sym>-</sym> <def></def><num>2</num> <def></def><slc>-- Need to count the symmetric solution, too.</slc><br />
<def></def>  <kwa>repeat</kwa><br />
<def></def>    <slc>-- Quick precheck before constructing the string.</slc><br />
<def></def>    <kwa>local</kwa> <def>b0</def><sym>,</sym> <def>b99</def> <sym>=</sym> <def>b0</def><sym>,</sym> <def>b99</def><br />
    <kwa>if</kwa> <def>b0</def> <sym>&lt;=</sym> <def>bmin</def> <kwa>then</kwa> <def>bmin</def> <sym>=</sym> <def>b0</def> <kwa>elseif</kwa> <def>b0</def> <sym>&gt;=</sym> <def>bmax</def> <kwa>then</kwa> <def>bmax</def> <sym>=</sym> <def>b0</def><br />
    <kwa>elseif</kwa> <def>b99</def> <sym>&lt;=</sym> <def>bmin</def> <kwa>then</kwa> <def>bmin</def> <sym>=</sym> <def>b99</def> <kwa>elseif</kwa> <def>b99</def> <sym>&gt;=</sym> <def>bmax</def> <kwa>then</kwa> <def>bmax</def> <sym>=</sym> <def>b99</def><br />
    <kwa>else break end</kwa><br />
<def></def>    <slc>-- Translate the filled board to a string.</slc><br />
<def></def>    <kwa>local</kwa> <def>p</def> <sym>=</sym> <def></def><kwd>genp</kwd><def></def><sym>()</sym><br />
<def></def>    <kwa>local</kwa> <def>s</def> <sym>=</sym> <def>p</def><sym>[</sym><def>b0</def><sym>]</sym> <def>]]</def><br />
  <kwa>for</kwa> <def>p</def><sym>=</sym><def></def><num>2</num><def></def><sym>,</sym><def></def><num>99</num> <def></def><kwa>do if</kwa> <def>ok</def><sym>[</sym><def>p</def><sym>]</sym> <def></def><kwa>then</kwa> <def>s</def> <sym>=</sym> <def>s</def><sym>..</sym><def></def><str>&quot;..p[b&quot;</str><def></def><sym>..</sym><def>p</def><sym>..</sym><def></def><str>&quot;]&quot;</str><def></def> <kwa>end end</kwa><br />
<def>  s</def> <sym>=</sym> <def>s</def><sym>..[[</sym><br />
<def></def>    <slc>-- Remember min/max boards, dito for the symmetric board.</slc><br />
<def></def>    <kwa>if not</kwa> <def>smin</def> <kwa>then</kwa> <def>smin</def> <sym>=</sym> <def>s</def><sym>;</sym> <def>smax</def> <sym>=</sym> <def>s</def><br />
    <kwa>elseif</kwa> <def>s</def> <sym>&lt;</sym> <def>smin</def> <kwa>then</kwa> <def>smin</def> <sym>=</sym> <def>s</def> <kwa>elseif</kwa> <def>s</def> <sym>&gt;</sym> <def>smax</def> <kwa>then</kwa> <def>smax</def> <sym>=</sym> <def>s</def> <kwa>end</kwa><br />
<def>    s</def> <sym>=</sym> <def></def><kwd>reverse</kwd><def></def><sym>(</sym><def>s</def><sym>)</sym><br />
<def></def>    <kwa>if</kwa> <def>s</def> <sym>&lt;</sym> <def>smin</def> <kwa>then</kwa> <def>smin</def> <sym>=</sym> <def>s</def> <kwa>elseif</kwa> <def>s</def> <sym>&gt;</sym> <def>smax</def> <kwa>then</kwa> <def>smax</def> <sym>=</sym> <def>s</def> <kwa>end</kwa><br />
<def></def>  <kwa>until true</kwa><br />
<def></def>  <kwa>if</kwa> <def>count</def> <sym>&lt;=</sym> <def></def><num>0</num> <def></def><kwa>then</kwa> <def></def><kwb>error</kwb><def></def><sym>(</sym><def></def><str>&quot;&quot;</str><def></def><sym>)</sym> <def></def><kwa>end</kwa> <def></def><slc>-- Early abort if max count given.</slc><br />
<def></def><kwa>end</kwa><br />
<def></def><kwa>local</kwa> <def>f93</def> <sym>=</sym> <def>f91<br />
]]</def><br />
<br />
  <slc>-- Recursively prune the decision tree and convert it to Lua code.</slc><br />
<def></def>  <kwa>local function</kwa> <def></def><kwd>codetree</kwd><def></def><sym>(</sym><def>tree</def><sym>,</sym> <def>d</def><sym>,</sym> <def>p</def><sym>,</sym> <def>pn</def><sym>)</sym><br />
<def></def>    <kwa>local</kwa> <def>found</def><sym>,</sym> <def>s</def> <sym>=</sym> <def></def><kwa>false</kwa><def></def><sym>,</sym> <def></def><str>&quot;&quot;</str><def><br />
    d</def> <sym>=</sym> <def>d</def> <sym>+</sym> <def></def><num>1</num><br />
<def></def>    <kwa>for</kwa> <def>a</def><sym>,</sym><def>t</def> <kwa>in</kwa> <def></def><kwd>pairs</kwd><def></def><sym>(</sym><def>tree</def><sym>)</sym> <def></def><kwa>do</kwa><br />
<def></def>      <kwa>local</kwa> <def>b</def> <sym>=</sym> <def>p</def><sym>+</sym><def>a</def><br />
      <kwa>local</kwa> <def>pp</def> <sym>=</sym> <def>ok</def><sym>[</sym><def>b</def><sym>]</sym><br />
<def></def>      <kwa>if</kwa> <def>pp</def> <kwa>then</kwa> <def></def><slc>-- Prune the tree on-the-fly.</slc><br />
<def></def>	<kwa>if</kwa> <def>b ~</def><sym>=</sym> <def>pn</def> <kwa>then</kwa> <def>pp</def> <sym>=</sym> <def>pn</def> <kwa>end</kwa> <def></def><slc>-- Find maximum successor function.</slc><br />
<def></def>	<kwa>if</kwa> <def>d</def> <sym>==</sym> <def></def><num>5</num> <def></def><kwa>then</kwa> <def></def><slc>-- Try to place the last cell of a piece and advance.</slc><br />
<def>	  found</def> <sym>=</sym> <def></def><kwa>true</kwa><br />
<def>	  s</def> <sym>=</sym> <def></def><kwb>format</kwb><def></def><sym>(</sym><def></def><str>&quot;%sif not u%d and not b%d then b%d=k u%d=k f%d(k) u%d=N b%d=N end</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym><br />
<def>		     s</def><sym>,</sym> <def>t</def><sym>,</sym> <def>b</def><sym>,</sym> <def>b</def><sym>,</sym> <def>t</def><sym>,</sym> <def>pp</def><sym>,</sym> <def>t</def><sym>,</sym> <def>b</def><sym>)</sym><br />
<def></def>	<kwa>else</kwa> <def></def><slc>-- Try to place an intermediate cell.</slc><br />
<def></def>	  <kwa>local</kwa> <def>st</def> <sym>=</sym> <def></def><kwd>codetree</kwd><def></def><sym>(</sym><def>t</def><sym>,</sym> <def>d</def><sym>,</sym> <def>p</def><sym>,</sym> <def>pp</def><sym>)</sym><br />
<def></def>	  <kwa>if</kwa> <def>st</def> <kwa>then</kwa> <def></def><slc>-- But only if the subtree is not empty.</slc><br />
<def>	    found</def> <sym>=</sym> <def></def><kwa>true</kwa><br />
<def>	    s</def> <sym>=</sym> <def></def><kwb>format</kwb><def></def><sym>(</sym><def></def><str>&quot;%sif not b%d then b%d=k</str><esc>\n</esc><str>%sb%d=N end</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def>s</def><sym>,</sym> <def>b</def><sym>,</sym> <def>b</def><sym>,</sym> <def>st</def><sym>,</sym> <def>b</def><sym>)</sym><br />
<def></def>	  <kwa>end</kwa><br />
<def></def>	<kwa>end</kwa><br />
<def></def>      <kwa>end</kwa><br />
<def></def>    <kwa>end</kwa><br />
<def></def>    <kwa>return</kwa> <def>found</def> <kwa>and</kwa> <def>s</def><br />
  <kwa>end</kwa><br />
<def></def><br />
  <slc>-- Embed the decision tree into a function hierarchy.</slc><br />
<def></def>  <kwa>for</kwa> <def>p</def><sym>=</sym><def></def><num>88</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,-</sym><def></def><num>1</num> <def></def><kwa>do</kwa><br />
<def></def>    <kwa>local</kwa> <def>pn</def> <sym>=</sym> <def>ok</def><sym>[</sym><def>p</def><sym>]</sym><br />
<def></def>    <kwa>if</kwa> <def>pn</def> <kwa>then</kwa><br />
<def>      s</def> <sym>=</sym> <def></def><kwb>format</kwb><def></def><sym>(</sym><def></def><str>&quot;%slocal function f%d(k)</str><esc>\n</esc><str>local N if b%d then return f%d(k) end k=k+1 b%d=k</str><esc>\n</esc><str>%sb%d=N end</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym><br />
<def>	    s</def><sym>,</sym> <def>p</def><sym>,</sym> <def>p</def><sym>,</sym> <def>pn</def><sym>,</sym> <def>p</def><sym>,</sym> <def></def><kwd>codetree</kwd><def></def><sym>(</sym><def>dtree</def><sym>,</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>p</def><sym>,</sym> <def>pn</def><sym>),</sym> <def>p</def><sym>)</sym><br />
<def></def>    <kwa>end</kwa><br />
<def></def>  <kwa>end</kwa><br />
<def></def><br />
  <slc>-- Compile and return solver function and result getter.</slc><br />
<def></def>  <kwa>return</kwa> <def></def><kwd>loadstring</kwd><def></def><sym>(</sym><def>s</def><sym>..</sym><def></def><str>&quot;return f0, printresult</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;solver&quot;</str><def></def><sym>)(</sym><def>countinit</def><sym>)</sym><br />
<def></def><kwa>end</kwa><br />
<def></def><br />
<slc>-- The optimizer for LuaJIT 1.1.x is not helpful here, so turn it off.</slc><br />
<def></def><kwa>if</kwa> <def>jit</def> <kwa>and</kwa> <def>jit</def><sym>.</sym><def>opt</def> <kwa>and</kwa> <def>jit</def><sym>.</sym><def>version_num</def> <sym>&lt;</sym> <def></def><num>10200</num> <def></def><kwa>then</kwa><br />
<def>  jit</def><sym>.</sym><def>opt</def><sym>.</sym><def></def><kwd>start</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>)</sym><br />
<def>  jit</def><sym>.</sym><def></def><kwd>off</kwd><def></def><sym>(</sym><def>generatesolver</def><sym>)</sym><br />
<def></def><kwa>end</kwa><br />
<def></def><br />
<slc>-- Run the solver protected to get partial results (max count or ctrl-c).</slc><br />
<def></def><kwa>local</kwa> <def>solver</def><sym>,</sym> <def>printresult</def> <sym>=</sym> <def></def><kwd>generatesolver</kwd><def></def><sym>(</sym><def></def><kwb>tonumber</kwb><def></def><sym>(</sym><def>arg</def> <kwa>and</kwa> <def>arg</def><sym>[</sym><def></def><num>1</num><def></def><sym>])</sym> <def></def><kwa>or</kwa> <def></def><num>10000</num><def></def><sym>)</sym><br />
<def></def><kwd>pcall</kwd><def></def><sym>(</sym><def>solver</def><sym>,</sym> <def></def><num>0</num><def></def><sym>)</sym><br />
<def></def><kwd>printresult</kwd><def></def><sym>()</sym><br />
<def></def><br />
</source>
