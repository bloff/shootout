<source>
<def></def><com>/**</com><br />
<com> * The Computer Language Benchmarks Game</com><br />
<com> * Based on the CAL Open Quark version</com><br />
<com> * Contributed by Magnus Byne.</com><br />
<com> */</com><def></def><br />
<kwa>module</kwa> <def>Regexdna</def><sym>;</sym><br />
<def></def><br />
<kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Core</def><sym>.</sym><def>Prelude</def> <kwa>using</kwa><br />
<def></def>    <kwa>typeConstructor</kwa> <def></def><sym>=</sym> <def>Boolean</def><sym>,</sym> <def>Char</def><sym>,</sym> <def>Int</def><sym>,</sym> <def>String</def><sym>;</sym><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>concat</def><sym>,</sym> <def>eager</def><sym>,</sym> <def>seq</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Core</def><sym>.</sym><def>Debug</def> <kwa>using</kwa><br />
<def></def>    <kwa>typeClass</kwa> <def></def><sym>=</sym> <def>Show</def><sym>;</sym><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>show</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Core</def><sym>.</sym><def>String</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>length</def><sym>,</sym> <def>replaceAllString</def><sym>,</sym> <def>splitString</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Collections</def><sym>.</sym><def>List</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>foldLeftStrict</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><kwa>import</kwa> <def>Cal</def><sym>.</sym><def>IO</def><sym>.</sym><def>Console</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>print</def><sym>,</sym> <def>printLine</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<kwa>data foreign unsafe import jvm</kwa> <def></def><str>&quot;java.lang.StringBuilder&quot;</str><def></def><br />
    <kwa>private</kwa> <def>JStringBuilder</def> <kwa>deriving</kwa> <def>Show</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;constructor&quot;</str><def></def><br />
    <kwa>private</kwa> <def>createStringBuilder</def> <sym>::</sym> <def>JStringBuilder</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;method append&quot;</str><def></def><br />
    <kwa>private</kwa> <def>appendString</def> <sym>::</sym> <def>JStringBuilder</def> <sym>-&gt;</sym> <def>String</def> <sym>-&gt;</sym> <def>JStringBuilder</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;method append&quot;</str><def></def><br />
    <kwa>private</kwa> <def>appendChar</def> <sym>::</sym> <def>JStringBuilder</def> <sym>-&gt;</sym> <def>Char</def> <sym>-&gt;</sym> <def>JStringBuilder</def><sym>;</sym><br />
<def></def><br />
<kwa>data foreign unsafe import jvm</kwa> <def></def><str>&quot;java.io.BufferedReader&quot;</str><def></def><br />
    <kwa>private</kwa> <def>JBufferedReader</def><sym>;</sym><br />
<def></def><br />
<kwa>data foreign unsafe import jvm</kwa> <def></def><str>&quot;java.io.InputStream&quot;</str><def></def> <kwa>private</kwa> <def>JInputStream</def><sym>;</sym><br />
<def></def><br />
<kwa>data foreign unsafe import jvm</kwa> <def></def><str>&quot;java.io.InputStreamReader&quot;</str><def></def><br />
    <kwa>private</kwa> <def>JInputStreamReader</def><sym>;</sym><br />
<def></def><br />
<kwa>data foreign unsafe import jvm</kwa> <def></def><str>&quot;java.io.Reader&quot;</str><def></def> <kwa>private</kwa> <def>JReader</def><sym>;</sym><br />
<def></def><br />
<kwa>data foreign unsafe import jvm</kwa> <def></def><str>&quot;java.io.FileReader&quot;</str><def></def> <kwa>private</kwa> <def>JFileReader</def><sym>;</sym><br />
<def></def><br />
<kwa>data foreign unsafe import jvm</kwa> <def></def><str>&quot;java.io.PrintStream&quot;</str><def></def> <kwa>private</kwa> <def>JPrintStream</def><sym>;</sym><br />
<def></def><br />
<kwa>data foreign unsafe import jvm</kwa> <def></def><str>&quot;java.util.regex.Matcher&quot;</str><def></def> <kwa>private</kwa> <def>JMatcher</def><sym>;</sym><br />
<def></def><br />
<kwa>data foreign unsafe import jvm</kwa> <def></def><str>&quot;java.util.regex.Pattern&quot;</str><def></def> <kwa>private</kwa> <def>JPattern</def><sym>;</sym><br />
<def></def><br />
<kwa>data foreign unsafe import jvm</kwa> <def></def><str>&quot;java.lang.CharSequence&quot;</str><def></def> <kwa>private</kwa> <def>JCharSequence</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;static method java.util.regex.Pattern.compile&quot;</str><def></def><br />
    <kwa>private</kwa> <def>compilePattern</def> <sym>::</sym> <def>String</def> <sym>-&gt;</sym> <def>JPattern</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;method matcher&quot;</str><def></def><br />
    <kwa>private</kwa> <def>getMatcher</def> <sym>::</sym> <def>JPattern</def> <sym>-&gt;</sym> <def>JCharSequence</def> <sym>-&gt;</sym> <def>JMatcher</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;method find&quot;</str><def></def> <kwa>private</kwa> <def>find</def> <sym>::</sym> <def>JMatcher</def> <sym>-&gt;</sym> <def>Boolean</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;constructor&quot;</str><def></def><br />
    <kwa>private</kwa> <def>createBufferedReader</def> <sym>::</sym> <def>JReader</def> <sym>-&gt;</sym> <def>JBufferedReader</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;constructor&quot;</str><def></def><br />
    <kwa>private</kwa> <def>createInputStreamReaderStream</def> <sym>::</sym><br />
<def>        JInputStream</def> <sym>-&gt;</sym> <def>JInputStreamReader</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;method append&quot;</str><def></def><br />
    <kwa>private</kwa> <def>append</def> <sym>::</sym><br />
<def>        JStringBuilder</def> <sym>-&gt;</sym> <def>JCharArray</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>JStringBuilder</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;method read&quot;</str><def></def><br />
    <kwa>private</kwa> <def>read</def> <sym>::</sym> <def>JBufferedReader</def> <sym>-&gt;</sym> <def>JCharArray</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;static field java.lang.System.out&quot;</str><def></def><br />
    <kwa>private</kwa> <def>stdout</def> <sym>::</sym> <def>JPrintStream</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;static field java.lang.System.in&quot;</str><def></def><br />
    <kwa>private</kwa> <def>stdin</def> <sym>::</sym> <def>JInputStream</def><sym>;</sym><br />
<def></def><br />
<kwa>data foreign unsafe import jvm</kwa> <def></def><str>&quot;char[]&quot;</str><def> JCharArray</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;newArray&quot;</str><def> char_newArray</def> <sym>::</sym> <def>Int</def> <sym>-&gt;</sym> <def>JCharArray</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;cast&quot;</str><def><br />
    jInputStreamReaderToJReader</def> <sym>::</sym> <def>JInputStreamReader</def> <sym>-&gt;</sym> <def>JReader</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;cast&quot;</str><def><br />
    stringToJCharSequence</def> <sym>::</sym> <def>String</def> <sym>-&gt;</sym> <def>JCharSequence</def><sym>;</sym><br />
<def></def><br />
<com>/** read a dna file from stdin into a buffer */</com><def><br />
readFile</def> <sym>::</sym> <def>JBufferedReader</def> <sym>-&gt;</sym> <def>String</def><sym>;</sym><br />
<def>readFile</def> <sym>!</sym><def>bufferedReader</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa><br />
<def>        charBuffer</def> <sym>::</sym> <def>JCharArray</def><sym>;</sym><br />
<def>        charBuffer</def> <sym>=</sym> <def>eager $ char_newArray</def> <num>10240</num><def></def><sym>;</sym><br />
<def><br />
        stringBuilder</def> <sym>::</sym> <def>JStringBuilder</def><sym>;</sym><br />
<def>        stringBuilder</def> <sym>=</sym> <def>eager $ createStringBuilder</def><sym>;</sym><br />
<def><br />
        readAll</def> <sym>::</sym> <def>JCharArray</def> <sym>-&gt;</sym> <def>JStringBuilder</def> <sym>-&gt;</sym> <def>String</def><sym>;</sym><br />
<def>        readAll</def> <sym>!</sym><def>charBuffer</def> <sym>!</sym><def>stringBuilder</def> <sym>=</sym><br />
<def></def>            <kwa>let</kwa><br />
<def>                charsRead</def> <sym>::</sym> <def>Int</def><sym>;</sym><br />
<def>                charsRead</def> <sym>=</sym> <def>eager $ read bufferedReader charBuffer</def> <num>0 10240</num><def></def><sym>;</sym><br />
<def></def>            <kwa>in</kwa><br />
<def></def>                <kwa>if</kwa> <def>charsRead</def> <sym>!= -</sym><def></def><num>1</num> <def></def><kwa>then</kwa><br />
<def>                    append stringBuilder charBuffer</def> <num>0</num> <def>charsRead</def><br />
                    <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                    readAll charBuffer stringBuilder</def><br />
                <kwa>else</kwa><br />
<def>                    show stringBuilder</def><br />
            <sym>;</sym><br />
<def></def>    <kwa>in</kwa><br />
<def>        readAll charBuffer stringBuilder</def><br />
    <sym>;</sym><br />
<def></def><br />
<com>/** Counts the number of matches remaining in a matcher */</com><def><br />
countMatches</def> <sym>::</sym> <def>JMatcher</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def><sym>;</sym><br />
<def>countMatches</def> <sym>!</sym><def>matcher</def> <sym>!</sym><def>count</def> <sym>=</sym><br />
<def></def>    <kwa>if</kwa> <def>find matcher</def> <kwa>then</kwa><br />
<def>        countMatches matcher</def> <sym>(</sym><def>count</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>    <kwa>else</kwa><br />
<def>        count</def><br />
    <sym>;</sym><br />
<def></def><br />
<com>/** List of variants to search for */</com><def><br />
variants</def> <sym>:: [</sym><def>String</def><sym>];</sym><br />
<def>variants</def> <sym>=</sym><br />
<def></def>    <sym>[</sym><br />
<def></def>        <str>&quot;agggtaaa|tttaccct&quot;</str><def></def><sym>,</sym><br />
<def></def>        <str>&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</str><def></def><sym>,</sym><br />
<def></def>        <str>&quot;a[act]ggtaaa|tttacc[agt]t&quot;</str><def></def><sym>,</sym><br />
<def></def>        <str>&quot;ag[act]gtaaa|tttac[agt]ct&quot;</str><def></def><sym>,</sym><br />
<def></def>        <str>&quot;agg[act]taaa|ttta[agt]cct&quot;</str><def></def><sym>,</sym><br />
<def></def>        <str>&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</str><def></def><sym>,</sym><br />
<def></def>        <str>&quot;agggt[cgt]aa|tt[acg]accct&quot;</str><def></def><sym>,</sym><br />
<def></def>        <str>&quot;agggta[cgt]a|t[acg]taccct&quot;</str><def></def><sym>,</sym><br />
<def></def>        <str>&quot;agggtaa[cgt]|[acg]ttaccct&quot;</str><def></def><br />
    <sym>]</sym><br />
<def></def>    <sym>;</sym><br />
<def><br />
doReplace</def> <sym>!</sym><def>str</def> <sym>!</sym><def>pos</def> <sym>!</sym><def>strBuilder</def> <sym>=</sym><br />
<def></def>    <kwa>if</kwa> <def></def><sym>(</sym><def>pos</def> <sym>==</sym> <def>String</def><sym>.</sym><def>length str</def><sym>)</sym> <def></def><kwa>then</kwa><br />
<def>        strBuilder</def><br />
    <kwa>else</kwa><br />
<def></def>        <kwa>let</kwa><br />
<def>            c</def> <sym>=</sym> <def>eager $ String</def><sym>.</sym><def>subscript str pos</def><sym>;</sym><br />
<def></def>        <kwa>in</kwa><br />
<def></def>            <sym>(</sym><def></def><kwa>case</kwa> <def>c</def> <kwa>of</kwa><br />
<def></def>            <str>'B'</str><def></def> <sym>-&gt;</sym> <def>appendString strBuilder</def> <str>&quot;(c|g|t)&quot;</str><def></def><sym>;</sym><br />
<def></def>            <str>'D'</str><def></def> <sym>-&gt;</sym> <def>appendString strBuilder</def> <str>&quot;(a|g|t)&quot;</str><def></def><sym>;</sym><br />
<def></def>            <str>'H'</str><def></def> <sym>-&gt;</sym> <def>appendString strBuilder</def> <str>&quot;(a|c|t)&quot;</str><def></def><sym>;</sym><br />
<def></def>            <str>'K'</str><def></def> <sym>-&gt;</sym> <def>appendString strBuilder</def> <str>&quot;(g|t)&quot;</str><def></def><sym>;</sym><br />
<def></def>            <str>'M'</str><def></def> <sym>-&gt;</sym> <def>appendString strBuilder</def> <str>&quot;(a|c)&quot;</str><def></def><sym>;</sym><br />
<def></def>            <str>'N'</str><def></def> <sym>-&gt;</sym> <def>appendString strBuilder</def> <str>&quot;(a|c|g|t)&quot;</str><def></def><sym>;</sym><br />
<def></def>            <str>'R'</str><def></def> <sym>-&gt;</sym> <def>appendString strBuilder</def> <str>&quot;(a|g)&quot;</str><def></def><sym>;</sym><br />
<def></def>            <str>'S'</str><def></def> <sym>-&gt;</sym> <def>appendString strBuilder</def> <str>&quot;(c|g)&quot;</str><def></def><sym>;</sym><br />
<def></def>            <str>'V'</str><def></def> <sym>-&gt;</sym> <def>appendString strBuilder</def> <str>&quot;(a|c|g)&quot;</str><def></def><sym>;</sym><br />
<def></def>            <str>'W'</str><def></def> <sym>-&gt;</sym> <def>appendString strBuilder</def> <str>&quot;(a|t)&quot;</str><def></def><sym>;</sym><br />
<def></def>            <str>'Y'</str><def></def> <sym>-&gt;</sym> <def>appendString strBuilder</def> <str>&quot;(c|t)&quot;</str><def></def><sym>;</sym><br />
<def>            _</def> <sym>-&gt;</sym> <def>appendChar strBuilder c</def><sym>;)</sym><br />
<def></def>            <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>            doReplace str</def> <sym>(</sym><def>pos</def><sym>+</sym><def></def><num>1</num><def></def><sym>)</sym> <def>strBuilder</def><br />
    <sym>;</sym><br />
<def><br />
main</def> <sym>:: [</sym><def>String</def><sym>] -&gt; ();</sym><br />
<def></def><kwa>public</kwa> <def>main args</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa><br />
<def>        bufferReader</def> <sym>::</sym> <def>JBufferedReader</def><sym>;</sym><br />
<def>        bufferReader</def> <sym>=</sym><br />
<def>            eager<br />
            $ createBufferedReader</def><br />
                <sym>(</sym><def>jInputStreamReaderToJReader</def><br />
                    <sym>(</sym><def>createInputStreamReaderStream stdin</def><sym>)</sym><br />
<def></def>                <sym>)</sym><br />
<def></def>            <sym>;</sym><br />
<def><br />
        input</def> <sym>::</sym> <def>String</def><sym>;</sym><br />
<def>        input</def> <sym>=</sym> <def>eager $ readFile bufferReader</def><sym>;</sym><br />
<def><br />
        sequence</def> <sym>::</sym> <def>String</def><sym>;</sym><br />
<def>        sequence</def> <sym>=</sym> <def>replaceAllString input</def> <str>&quot;&gt;.*</str><esc>\n</esc><str>|</str><esc>\n</esc><str>&quot;</str><def></def> <str>&quot;&quot;</str><def></def><sym>;</sym><br />
<def></def>    <kwa>in</kwa><br />
<def><br />
        print</def><br />
            <sym>(</sym><def>foldLeftStrict</def><br />
                <sym>(</sym><br />
<def>                    \</def><sym>!</sym><def>accumulator</def> <sym>!</sym><def>variant</def> <sym>-&gt;</sym><br />
<def>                        accumulator</def><br />
                        <sym>++</sym> <def>variant</def><br />
                        <sym>++</sym> <def></def><str>&quot; &quot;</str><def></def><br />
                        <sym>++</sym> <def>show</def><br />
                            <sym>(</sym><br />
<def>                                List</def><sym>.</sym><def>sum<br />
                                $ List</def><sym>.</sym><def>map</def><br />
                                    <sym>(</sym><br />
<def>                                        \</def><sym>!</sym><def>v</def> <sym>-&gt;</sym><br />
<def>                                            countMatches</def><br />
                                                <sym>(</sym><def>getMatcher</def><br />
                                                    <sym>(</sym><def>compilePattern v</def><sym>)</sym><br />
<def></def>                                                    <sym>(</sym><def>stringToJCharSequence<br />
                                                        sequence</def><br />
                                                    <sym>)</sym><br />
<def></def>                                                <sym>)</sym><br />
<def></def>                                                <num>0</num><br />
<def></def>                                    <sym>)</sym><br />
<def></def>                                    <sym>(</sym><def>String</def><sym>.</sym><def>splitString</def> <str>&quot;|&quot;</str><def> variant</def><sym>)</sym><br />
<def></def>                            <sym>)</sym><br />
<def></def>                        <sym>++</sym> <def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><br />
                <sym>)</sym><br />
<def></def>                <str>&quot;&quot;</str><def><br />
                variants</def><br />
            <sym>)</sym><br />
<def></def>        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>        printLine</def> <str>&quot;&quot;</str><def></def><br />
        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>        printLine</def> <sym>(</sym><def>show $ length input</def><sym>)</sym><br />
<def></def>        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>        printLine</def> <sym>(</sym><def>show $ length sequence</def><sym>)</sym><br />
<def></def>        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>        printLine</def><br />
            <sym>(</sym><br />
<def>                show<br />
                $ length</def> <sym>(</sym><def>show $ doReplace sequence</def> <num>0</num> <def>createStringBuilder</def><sym>)</sym><br />
<def></def>            <sym>)</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
</source>
