<source>
<def></def><slc>% ----------------------------------------------------------------------</slc><br />
<def></def><slc>% The Computer Language Benchmarks Game</slc><br />
<def></def><slc>% http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>%</slc><br />
<def></def><slc>%   yap -L fannkuch.plog -- 11</slc><br />
<def></def><slc>%</slc><br />
<def></def><slc>% Contributed by Anthony Borla</slc><br />
<def></def><slc>% Modified by Glendon Holst</slc><br />
<def></def><slc>% ----------------------------------------------------------------------</slc><br />
<def></def><br />
<sym>:-</sym> <def>yap_flag</def><sym>(</sym><def>unknown</def><sym>,</sym><def>error</def><sym>).</sym><br />
<def></def><br />
<sym>:-</sym> <def>use_module</def><sym>(</sym><def>library</def><sym>(</sym><def>lists</def><sym>)).</sym><br />
<def></def><br />
<sym>:-</sym> <def>initialization</def><sym>(</sym><def>main</def><sym>).</sym><br />
<def><br />
main</def> <sym>:-</sym><br />
<def>  unix</def><sym>(</sym> <def>argv</def><sym>([</sym><def>H</def><sym>|</sym><def>_</def><sym>]) ),</sym> <def>number_atom</def><sym>(</sym><def>N</def><sym>,</sym><def>H</def><sym>),</sym><br />
<def><br />
  init_fannkuch</def><sym>,</sym><br />
<def><br />
  f_permutations</def><sym>(</sym><def>N</def><sym>,</sym> <def>MaxFlips</def><sym>),</sym><br />
<def>  format</def><sym>(</sym><def></def><str>'Pfannkuchen(~d) = ~d~n'</str><def></def><sym>, [</sym><def>N</def><sym>,</sym> <def>MaxFlips</def><sym>]).</sym><br />
<def></def><br />
<slc>% ------------------------------- %</slc><br />
<def><br />
init_fannkuch</def> <sym>:-</sym> <def>setvar</def><sym>(</sym><def>perm_N</def><sym>,</sym> <def></def><num>0</num><def></def><sym>),</sym> <def>setvar</def><sym>(</sym><def>max_flips</def><sym>,</sym> <def></def><num>0</num><def></def><sym>).</sym><br />
<def></def><br />
<slc>% ------------------------------- %</slc><br />
<def><br />
f_permutations</def><sym>(</sym><def>N</def><sym>,</sym> <def>MaxFlips</def><sym>) :-</sym><br />
<def>  numlist</def><sym>(</sym><def></def><num>1</num><def></def><sym>,</sym> <def>N</def><sym>,</sym> <def>L</def><sym>),</sym><br />
<def>  f_permutations_</def><sym>(</sym><def>L</def><sym>,</sym> <def>N</def><sym>,</sym> <def></def><num>0</num><def></def><sym>),</sym><br />
<def>  getvar</def><sym>(</sym><def>max_flips</def><sym>,</sym> <def>MaxFlips</def><sym>).</sym><br />
<def></def><br />
<slc>% ------------- %</slc><br />
<def><br />
f_permutations_</def><sym>(</sym><def>L</def><sym>,</sym> <def>N</def><sym>,</sym> <def>I</def><sym>) :-</sym><br />
<def></def>  <sym>(</sym><def>I</def> <sym>&lt;</sym> <def>N</def> <sym>-&gt;</sym><br />
<def></def>    <sym>(</sym><def>N</def> <sym>=:=</sym> <def></def><num>1</num> <def></def><sym>-&gt;</sym><br />
<def></def>      <sym>!,</sym> <def>processPerm</def><sym>(</sym><def>L</def><sym>)</sym><br />
<def></def>    <sym>;</sym><br />
<def>      N1</def> <kwa>is</kwa> <def>N</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>,</sym><br />
<def>      f_permutations_</def><sym>(</sym><def>L</def><sym>,</sym> <def>N1</def><sym>,</sym> <def></def><num>0</num><def></def><sym>),</sym><br />
<def>      split_list</def><sym>(</sym><def>L</def><sym>,</sym> <def>N</def><sym>,</sym> <def>Lt</def><sym>,</sym> <def>Ld</def><sym>),</sym><br />
<def>      rotateLeft</def><sym>(</sym><def>Lt</def><sym>,</sym> <def>LtRL</def><sym>),</sym> <def>append</def><sym>(</sym><def>LtRL</def><sym>,</sym> <def>Ld</def><sym>,</sym> <def>La</def><sym>),</sym> <def>Ii</def> <kwa>is</kwa> <def>I</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>,</sym><br />
<def></def>      <sym>!,</sym> <def>f_permutations_</def><sym>(</sym><def>La</def><sym>,</sym> <def>N</def><sym>,</sym> <def>Ii</def><sym>))</sym><br />
<def></def>  <sym>;</sym><br />
<def></def>    <sym>!,</sym> <def></def><kwa>true</kwa><def></def><sym>).</sym><br />
<def></def><br />
<slc>% ------------------------------- %</slc><br />
<def><br />
flips</def><sym>(</sym><def>L</def><sym>,</sym> <def>Flips</def><sym>) :-</sym> <def>flips_</def><sym>(</sym><def>L</def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>Flips</def><sym>).</sym><br />
<def><br />
flips_</def><sym>([</sym><def></def><num>1</num><def></def><sym>|</sym><def>_</def><sym>],</sym> <def>Fla</def><sym>,</sym> <def>Fla</def><sym>) :- !.</sym><br />
<def><br />
flips_</def><sym>([</sym><def>N</def><sym>|</sym><def>T</def><sym>],</sym> <def>Fla</def><sym>,</sym> <def>Flips</def><sym>) :-</sym><br />
<def>	take_drop</def><sym>([</sym><def>N</def><sym>|</sym><def>T</def><sym>],</sym> <def>N</def><sym>,</sym> <def>Lt</def><sym>,</sym> <def>Ld</def><sym>),</sym> <def>append</def><sym>(</sym><def>Lt</def><sym>,</sym> <def>Ld</def><sym>,</sym> <def>La</def><sym>),</sym><br />
<def>	Fla1</def> <kwa>is</kwa> <def>Fla</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>, !,</sym> <def>flips_</def><sym>(</sym><def>La</def><sym>,</sym> <def>Fla1</def><sym>,</sym> <def>Flips</def><sym>).</sym><br />
<def></def><br />
<slc>% ------------------------------- %</slc><br />
<def><br />
rotateLeft</def><sym>([</sym><def>H</def><sym>|</sym><def>T</def><sym>],</sym> <def>RL</def><sym>) :-</sym> <def>append</def><sym>(</sym><def>T</def><sym>, [</sym><def>H</def><sym>],</sym> <def>RL</def><sym>).</sym><br />
<def>rotateLeft</def><sym>([], []).</sym><br />
<def></def><br />
<slc>% ------------------------------- %</slc><br />
<def><br />
numlist</def><sym>(</sym><def>N</def><sym>,</sym> <def>M</def><sym>, [</sym><def>N</def><sym>|</sym><def>Ls</def><sym>]) :-</sym> <def>N</def> <sym>&lt;</sym> <def>M</def><sym>, !,</sym> <def>N1</def> <kwa>is</kwa> <def>N</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>numlist</def><sym>(</sym><def>N1</def><sym>,</sym> <def>M</def><sym>,</sym> <def>Ls</def><sym>).</sym><br />
<def>numlist</def><sym>(</sym><def>M</def><sym>,</sym> <def>M</def><sym>, [</sym><def>M</def><sym>]).</sym><br />
<def></def><br />
<slc>% ------------------------------- %</slc><br />
<def><br />
printPerm</def><sym>([</sym><def>L</def><sym>|</sym><def>Ls</def><sym>]) :-</sym> <def></def><kwb>write</kwb><def></def><sym>(</sym><def>L</def><sym>),</sym> <def>printPerm</def><sym>(</sym><def>Ls</def><sym>).</sym><br />
<def>printPerm</def><sym>([]) :-</sym> <def></def><kwa>nl</kwa><def></def><sym>.</sym><br />
<def></def><br />
<slc>% ------------------------------- %</slc><br />
<def><br />
processPerm</def><sym>(</sym><def>L</def><sym>) :-</sym><br />
<def>  getvar</def><sym>(</sym><def>max_flips</def><sym>,</sym> <def>MaxFlips</def><sym>),</sym> <def>getvar</def><sym>(</sym><def>perm_N</def><sym>,</sym> <def>PermN</def><sym>),</sym><br />
<def>  flips</def><sym>(</sym><def>L</def><sym>,</sym> <def>Flips</def><sym>),</sym><br />
<def></def>  <sym>(</sym><def>Flips</def> <sym>&gt;</sym> <def>MaxFlips</def> <sym>-&gt;</sym><br />
<def>    setvar</def><sym>(</sym><def>max_flips</def><sym>,</sym> <def>Flips</def><sym>)</sym><br />
<def></def>  <sym>;</sym><br />
<def></def>    <kwa>true</kwa><def></def><sym>),</sym><br />
<def></def>  <sym>(</sym><def>PermN</def> <sym>&lt;</sym> <def></def><num>30</num> <def></def><sym>-&gt;</sym><br />
<def>    printPerm</def><sym>(</sym><def>L</def><sym>),</sym><br />
<def>    PermN1</def> <kwa>is</kwa> <def>PermN</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>,</sym><br />
<def>    setvar</def><sym>(</sym><def>perm_N</def><sym>,</sym> <def>PermN1</def><sym>)</sym><br />
<def></def>  <sym>;</sym><br />
<def></def>    <kwa>true</kwa><def></def><sym>).</sym><br />
<def></def><br />
<slc>% ------------------------------- %</slc><br />
<def><br />
split_list</def><sym>([</sym><def>L</def><sym>|</sym><def>Ls</def><sym>],</sym> <def>N</def><sym>, [</sym><def>L</def><sym>|</sym><def>Hs</def><sym>],</sym> <def>Ts</def><sym>) :-</sym><br />
<def>	N</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>, !,</sym> <def>N1</def> <kwa>is</kwa> <def>N</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>,</sym><br />
<def>	split_list</def><sym>(</sym><def>Ls</def><sym>,</sym> <def>N1</def><sym>,</sym> <def>Hs</def><sym>,</sym> <def>Ts</def><sym>).</sym><br />
<def><br />
split_list</def><sym>(</sym><def>Ls</def><sym>,</sym> <def></def><num>0</num><def></def><sym>, [],</sym> <def>Ls</def><sym>) :- !.</sym><br />
<def></def><br />
<slc>% ------------------------------- %</slc><br />
<def><br />
take_drop</def><sym>(</sym><def>L</def><sym>,</sym> <def>N</def><sym>,</sym> <def>Taken</def><sym>,</sym> <def>Rest</def><sym>) :-</sym> <def>take_drop_</def><sym>(</sym><def>L</def><sym>,</sym> <def>N</def><sym>,</sym> <def></def><num>0</num><def></def><sym>, [],</sym> <def>Taken</def><sym>,</sym> <def>Rest</def><sym>).</sym><br />
<def></def><br />
<slc>%</slc><br />
<def></def><slc>% 'take' list returned in reverse order. If wanting it in order, use:</slc><br />
<def></def><slc>%</slc><br />
<def></def><slc>% take_drop_(L, N, N, Ta, Taken, L) :- !, reverse(Ta, Taken).</slc><br />
<def></def><slc>%</slc><br />
<def><br />
take_drop_</def><sym>(</sym><def>L</def><sym>,</sym> <def>N</def><sym>,</sym> <def>N</def><sym>,</sym> <def>Ta</def><sym>,</sym> <def>Ta</def><sym>,</sym> <def>L</def><sym>) :- !.</sym><br />
<def><br />
take_drop_</def><sym>([</sym><def>H</def><sym>|</sym><def>T</def><sym>],</sym> <def>N</def><sym>,</sym> <def>Nc</def><sym>,</sym> <def>Ta</def><sym>,</sym> <def>Taken</def><sym>,</sym> <def>Rest</def><sym>) :-</sym><br />
<def>  Nc1</def> <kwa>is</kwa> <def>Nc</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>, !,</sym> <def>take_drop_</def><sym>(</sym><def>T</def><sym>,</sym> <def>N</def><sym>,</sym> <def>Nc1</def><sym>, [</sym><def>H</def><sym>|</sym><def>Ta</def><sym>],</sym> <def>Taken</def><sym>,</sym> <def>Rest</def><sym>).</sym><br />
<def></def><br />
<slc>% ------------------------------- %</slc><br />
<def><br />
getvar</def><sym>(</sym><def>Id</def><sym>,</sym> <def>Value</def><sym>) :-</sym> <def>nb_getval</def><sym>(</sym><def>Id</def><sym>,</sym> <def>Value</def><sym>).</sym><br />
<def>setvar</def><sym>(</sym><def>Id</def><sym>,</sym> <def>Value</def><sym>) :-</sym> <def>nb_setval</def><sym>(</sym><def>Id</def><sym>,</sym> <def>Value</def><sym>).</sym><br />
<def></def><br />
<slc>% ------------------------------- %</slc><def></def><br />
</source>
