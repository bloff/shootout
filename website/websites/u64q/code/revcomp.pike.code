<source>
<def></def><slc>// ---------------------------------------------------------------------</slc><br />
<def></def><slc>// The Great Computer Language Shootout</slc><br />
<def></def><slc>// http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>//</slc><br />
<def></def><slc>// Contributed by Anthony Borla</slc><br />
<def></def><slc>// ---------------------------------------------------------------------</slc><br />
<def></def><br />
<kwb>void</kwb> <def></def><kwd>dumpSegment</kwd><def></def><sym>(</sym><def>String.Buffer segment</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>  <kwb>constant</kwb><br />
<def>    LINELENGTH</def> <sym>=</sym> <def></def><num>60.0</num><def></def><sym>,</sym><br />
<def>    FROM</def> <sym>=</sym> <def></def><str>&quot;wsatugcyrkmbdhvnATUGCYRKMBDHVN&quot;</str><def></def> <sym>/</sym> <def></def><num>1</num><def></def><sym>,</sym><br />
<def>    TO</def> <sym>=</sym> <def></def><str>&quot;WSTAACGRYMKVHDBNTAACGRYMKVHDBN&quot;</str><def></def> <sym>/</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def><br />
  <kwa>write</kwa><def></def><sym>(</sym><def></def><str>&quot;%s</str><esc>\n</esc><str>&quot;</str><def></def><sym>, ((</sym><def></def><kwa>reverse</kwa><def></def><sym>(</sym><def></def><kwa>replace</kwa><def></def><sym>(</sym><def>segment</def><sym>-&gt;</sym><def></def><kwd>get</kwd><def></def><sym>(),</sym> <def>FROM</def><sym>,</sym> <def>TO</def><sym>)) /</sym> <def>LINELENGTH</def><sym>) *</sym> <def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>));</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<slc>// --------------------------------</slc><br />
<def></def><br />
<kwb>int</kwb> <def></def><kwd>main</kwd><def></def><sym>()</sym><br />
<def></def><sym>{</sym><br />
<def>  String.Buffer segment</def> <sym>=</sym> <def>String.</def><kwd>Buffer</kwd><def></def><sym>();</sym> <def></def><kwb>string</kwb> <def>sequence</def><sym>;</sym><br />
<def></def><br />
  <kwd>while</kwd> <def></def><sym>((</sym><def>sequence</def> <sym>=</sym> <def>Stdio.stdin.</def><kwd>gets</kwd><def></def><sym>()) !=</sym> <def></def><num>0</num><def></def><sym>)</sym><br />
<def></def>  <sym>{</sym><br />
<def></def>    <kwd>if</kwd> <def></def><sym>(</sym><def>sequence</def><sym>[</sym><def></def><num>0</num><def></def><sym>] ==</sym> <def></def><str>'&gt;'</str><def></def><sym>)</sym><br />
<def></def>    <sym>{</sym><br />
<def></def>      <kwd>if</kwd> <def></def><sym>(</sym><def>segment</def><sym>-&gt;</sym><def></def><kwd>_sizeof</kwd><def></def><sym>() !=</sym> <def></def><num>0</num><def></def><sym>)</sym> <def></def><kwd>dumpSegment</kwd><def></def><sym>(</sym><def>segment</def><sym>);</sym><br />
<def></def>      <kwa>write</kwa><def></def><sym>(</sym><def></def><str>&quot;%s</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def>sequence</def><sym>);</sym><br />
<def></def>    <sym>}</sym><br />
<def>    else</def><br />
    <sym>{</sym><br />
<def>      segment</def><sym>-&gt;</sym><def></def><kwd>add</kwd><def></def><sym>(</sym><def>sequence</def><sym>);</sym><br />
<def></def>    <sym>}</sym><br />
<def></def>  <sym>}</sym><br />
<def></def><br />
  <kwd>dumpSegment</kwd><def></def><sym>(</sym><def>segment</def><sym>);</sym><br />
<def><br />
  return</def> <num>0</num><def></def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
</source>
