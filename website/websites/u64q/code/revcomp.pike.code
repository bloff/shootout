<span class="hl slc">// ---------------------------------------------------------------------</span>
<span class="hl slc">// The Great Computer Language Shootout</span>
<span class="hl slc">// http://shootout.alioth.debian.org/</span>
<span class="hl slc">//</span>
<span class="hl slc">// Contributed by Anthony Borla</span>
<span class="hl slc">// ---------------------------------------------------------------------</span>

<span class="hl kwb">void</span> <span class="hl kwd">dumpSegment</span><span class="hl sym">(</span>String.Buffer segment<span class="hl sym">)</span>
<span class="hl sym">{</span>
  <span class="hl kwb">constant</span>
    LINELENGTH <span class="hl sym">=</span> <span class="hl num">60.0</span><span class="hl sym">,</span>
    FROM <span class="hl sym">=</span> <span class="hl str">&quot;wsatugcyrkmbdhvnATUGCYRKMBDHVN&quot;</span> <span class="hl sym">/</span> <span class="hl num">1</span><span class="hl sym">,</span>
    TO <span class="hl sym">=</span> <span class="hl str">&quot;WSTAACGRYMKVHDBNTAACGRYMKVHDBN&quot;</span> <span class="hl sym">/</span> <span class="hl num">1</span><span class="hl sym">;</span>

  <span class="hl kwa">write</span><span class="hl sym">(</span><span class="hl str">&quot;%s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">, ((</span><span class="hl kwa">reverse</span><span class="hl sym">(</span><span class="hl kwa">replace</span><span class="hl sym">(</span>segment<span class="hl sym">-&gt;</span><span class="hl kwd">get</span><span class="hl sym">(),</span> FROM<span class="hl sym">,</span> TO<span class="hl sym">)) /</span> LINELENGTH<span class="hl sym">) *</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">));</span>
<span class="hl sym">}</span>

<span class="hl slc">// --------------------------------</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl sym">()</span>
<span class="hl sym">{</span>
  String.Buffer segment <span class="hl sym">=</span> String.<span class="hl kwd">Buffer</span><span class="hl sym">();</span> <span class="hl kwb">string</span> sequence<span class="hl sym">;</span>

  <span class="hl kwd">while</span> <span class="hl sym">((</span>sequence <span class="hl sym">=</span> Stdio.stdin.<span class="hl kwd">gets</span><span class="hl sym">()) !=</span> <span class="hl num">0</span><span class="hl sym">)</span>
  <span class="hl sym">{</span>
    <span class="hl kwd">if</span> <span class="hl sym">(</span>sequence<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] ==</span> <span class="hl str">'&gt;'</span><span class="hl sym">)</span>
    <span class="hl sym">{</span>
      <span class="hl kwd">if</span> <span class="hl sym">(</span>segment<span class="hl sym">-&gt;</span><span class="hl kwd">_sizeof</span><span class="hl sym">() !=</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwd">dumpSegment</span><span class="hl sym">(</span>segment<span class="hl sym">);</span>
      <span class="hl kwa">write</span><span class="hl sym">(</span><span class="hl str">&quot;%s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> sequence<span class="hl sym">);</span>
    <span class="hl sym">}</span>
    else
    <span class="hl sym">{</span>
      segment<span class="hl sym">-&gt;</span><span class="hl kwd">add</span><span class="hl sym">(</span>sequence<span class="hl sym">);</span>
    <span class="hl sym">}</span>
  <span class="hl sym">}</span>

  <span class="hl kwd">dumpSegment</span><span class="hl sym">(</span>segment<span class="hl sym">);</span>

  return <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

