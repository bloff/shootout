<source>
<def></def><com>/*</com><br />
<com> * The Computer Language Benchmarks Game</com><br />
<com> * http://shootout.alioth.debian.org/</com><br />
<com> * contributed by Anthony Donnefort</com><br />
<com> * slightly modified to read 82 bytes at a time by Razii</com><br />
<com> */</com><def></def><br />
<br />
<kwa>import</kwa> <def>java</def><sym>.</sym><def>io</def><sym>.*;</sym><br />
<def></def><kwa>public class</kwa> <def>revcomp</def> <sym>{</sym><br />
<def></def>   <kwa>static final</kwa> <def></def><kwb>byte</kwb><def></def><sym>[]</sym> <def>cmp</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwb>byte</kwb><def></def><sym>[</sym><def></def><num>128</num><def></def><sym>];</sym><br />
<def></def>   <kwa>static</kwa> <def></def><sym>{</sym><br />
<def></def>      <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>cmp</def><sym>.</sym><def>length</def><sym>;</sym> <def>i</def><sym>++)</sym> <def>cmp</def><sym>[</sym><def>i</def><sym>] = (</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym> <def>i</def><sym>;</sym><br />
<def>      cmp</def><sym>[</sym><def></def><str>'t'</str><def></def><sym>] =</sym> <def>cmp</def><sym>[</sym><def></def><str>'T'</str><def></def><sym>] =</sym> <def></def><str>'A'</str><def></def><sym>;</sym><br />
<def>      cmp</def><sym>[</sym><def></def><str>'a'</str><def></def><sym>] =</sym> <def>cmp</def><sym>[</sym><def></def><str>'A'</str><def></def><sym>] =</sym> <def></def><str>'T'</str><def></def><sym>;</sym><br />
<def>      cmp</def><sym>[</sym><def></def><str>'g'</str><def></def><sym>] =</sym> <def>cmp</def><sym>[</sym><def></def><str>'G'</str><def></def><sym>] =</sym> <def></def><str>'C'</str><def></def><sym>;</sym><br />
<def>      cmp</def><sym>[</sym><def></def><str>'c'</str><def></def><sym>] =</sym> <def>cmp</def><sym>[</sym><def></def><str>'C'</str><def></def><sym>] =</sym> <def></def><str>'G'</str><def></def><sym>;</sym><br />
<def>      cmp</def><sym>[</sym><def></def><str>'v'</str><def></def><sym>] =</sym> <def>cmp</def><sym>[</sym><def></def><str>'V'</str><def></def><sym>] =</sym> <def></def><str>'B'</str><def></def><sym>;</sym><br />
<def>      cmp</def><sym>[</sym><def></def><str>'h'</str><def></def><sym>] =</sym> <def>cmp</def><sym>[</sym><def></def><str>'H'</str><def></def><sym>] =</sym> <def></def><str>'D'</str><def></def><sym>;</sym><br />
<def>      cmp</def><sym>[</sym><def></def><str>'r'</str><def></def><sym>] =</sym> <def>cmp</def><sym>[</sym><def></def><str>'R'</str><def></def><sym>] =</sym> <def></def><str>'Y'</str><def></def><sym>;</sym><br />
<def>      cmp</def><sym>[</sym><def></def><str>'m'</str><def></def><sym>] =</sym> <def>cmp</def><sym>[</sym><def></def><str>'M'</str><def></def><sym>] =</sym> <def></def><str>'K'</str><def></def><sym>;</sym><br />
<def>      cmp</def><sym>[</sym><def></def><str>'y'</str><def></def><sym>] =</sym> <def>cmp</def><sym>[</sym><def></def><str>'Y'</str><def></def><sym>] =</sym> <def></def><str>'R'</str><def></def><sym>;</sym><br />
<def>      cmp</def><sym>[</sym><def></def><str>'k'</str><def></def><sym>] =</sym> <def>cmp</def><sym>[</sym><def></def><str>'K'</str><def></def><sym>] =</sym> <def></def><str>'M'</str><def></def><sym>;</sym><br />
<def>      cmp</def><sym>[</sym><def></def><str>'b'</str><def></def><sym>] =</sym> <def>cmp</def><sym>[</sym><def></def><str>'B'</str><def></def><sym>] =</sym> <def></def><str>'V'</str><def></def><sym>;</sym><br />
<def>      cmp</def><sym>[</sym><def></def><str>'d'</str><def></def><sym>] =</sym> <def>cmp</def><sym>[</sym><def></def><str>'D'</str><def></def><sym>] =</sym> <def></def><str>'H'</str><def></def><sym>;</sym><br />
<def>      cmp</def><sym>[</sym><def></def><str>'u'</str><def></def><sym>] =</sym> <def>cmp</def><sym>[</sym><def></def><str>'U'</str><def></def><sym>] =</sym> <def></def><str>'A'</str><def></def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>static class</kwa> <def>ReversibleByteArray</def> <kwa>extends</kwa> <def>java</def><sym>.</sym><def>io</def><sym>.</sym><def></def><kwc>ByteArrayOutputStream</kwc> <def></def><sym>{</sym><br />
<def></def>      <kwb>void</kwb> <def></def><kwd>reverse</kwd><def></def><sym>()</sym> <def></def><kwa>throws</kwa> <def></def><kwc>Exception</kwc> <def></def><sym>{</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>count</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>) {</sym><br />
<def></def>            <kwb>int</kwb> <def>begin</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>end</def> <sym>=</sym> <def>count</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>            <kwa>while</kwa> <def></def><sym>(</sym><def>buf</def><sym>[</sym><def>begin</def><sym>++] !=</sym> <def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>);</sym><br />
<def></def>            <kwa>while</kwa> <def></def><sym>(</sym><def>begin</def> <sym>&lt;=</sym> <def>end</def><sym>) {</sym><br />
<def></def>               <kwa>if</kwa> <def></def><sym>(</sym><def>buf</def><sym>[</sym><def>begin</def><sym>] ==</sym> <def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>)</sym> <def>begin</def><sym>++;</sym><br />
<def></def>               <kwa>if</kwa> <def></def><sym>(</sym><def>buf</def><sym>[</sym><def>end</def><sym>] ==</sym> <def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>)</sym> <def>end</def><sym>--;</sym><br />
<def></def>               <kwa>if</kwa> <def></def><sym>(</sym><def>begin</def> <sym>&lt;=</sym> <def>end</def><sym>) {</sym><br />
<def></def>                  <kwb>byte</kwb> <def>tmp</def> <sym>=</sym> <def>buf</def><sym>[</sym><def>begin</def><sym>];</sym><br />
<def>                  buf</def><sym>[</sym><def>begin</def><sym>++] =</sym> <def>cmp</def><sym>[</sym><def>buf</def><sym>[</sym><def>end</def><sym>]];</sym><br />
<def>                  buf</def><sym>[</sym><def>end</def><sym>--] =</sym> <def>cmp</def><sym>[</sym><def>tmp</def><sym>];</sym><br />
<def></def>               <sym>}</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>            <kwc>System</kwc><def></def><sym>.</sym><def>out</def><sym>.</sym><def></def><kwd>write</kwd><def></def><sym>(</sym><def>buf</def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>count</def><sym>);</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>public static</kwa> <def></def><kwb>void</kwb> <def></def><kwd>main</kwd><def></def><sym>(</sym><def></def><kwc>String</kwc><def></def><sym>[]</sym> <def>args</def><sym>)</sym> <def></def><kwa>throws</kwa> <def></def><kwc>Exception</kwc> <def></def><sym>{</sym><br />
<def></def>      <kwb>byte</kwb><def></def><sym>[]</sym> <def>line</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwb>byte</kwb><def></def><sym>[</sym><def></def><num>82</num><def></def><sym>];</sym><br />
<def></def>      <kwb>int</kwb> <def>read</def><sym>;</sym><br />
<def>      ReversibleByteArray buf</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>ReversibleByteArray</kwd><def></def><sym>();</sym><br />
<def></def>      <kwa>while</kwa> <def></def><sym>((</sym><def>read</def> <sym>=</sym> <def></def><kwc>System</kwc><def></def><sym>.</sym><def>in</def><sym>.</sym><def></def><kwd>read</kwd><def></def><sym>(</sym><def>line</def><sym>)) != -</sym><def></def><num>1</num><def></def><sym>) {</sym><br />
<def></def>         <kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>last</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>         <kwa>while</kwa> <def></def><sym>(</sym><def>i</def> <sym>&lt;</sym> <def>read</def><sym>) {</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>line</def><sym>[</sym><def>i</def><sym>] ==</sym> <def></def><str>'&gt;'</str><def></def><sym>) {</sym><br />
<def>               buf</def><sym>.</sym><def></def><kwd>write</kwd><def></def><sym>(</sym><def>line</def><sym>,</sym> <def>last</def><sym>,</sym> <def>i</def> <sym>-</sym> <def>last</def><sym>);</sym><br />
<def>               buf</def><sym>.</sym><def></def><kwd>reverse</kwd><def></def><sym>();</sym><br />
<def>               buf</def><sym>.</sym><def></def><kwd>reset</kwd><def></def><sym>();</sym><br />
<def>               last</def> <sym>=</sym> <def>i</def><sym>;</sym><br />
<def></def>            <sym>}</sym><br />
<def>            i</def><sym>++;</sym><br />
<def></def>         <sym>}</sym><br />
<def>         buf</def><sym>.</sym><def></def><kwd>write</kwd><def></def><sym>(</sym><def>line</def><sym>,</sym> <def>last</def><sym>,</sym> <def>read</def> <sym>-</sym> <def>last</def><sym>);</sym><br />
<def></def>      <sym>}</sym><br />
<def>      buf</def><sym>.</sym><def></def><kwd>reverse</kwd><def></def><sym>();</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<br />
</source>
