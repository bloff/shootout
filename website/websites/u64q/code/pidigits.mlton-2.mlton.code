<source>
<def></def><com>(* The Computer Language Shootout</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com>   contributed by Scott Cruzen</com><br />
<com>*)</com><def></def><br />
<br />
<kwa>fun</kwa> <def>floor_ev</def> <sym>(</sym><def>q</def><sym>,</sym><def>r</def><sym>,</sym><def>s</def><sym>,</sym><def>t</def><sym>)</sym> <def>x</def><sym>:</sym><def>IntInf.</def><kwb>int</kwb> <def></def><sym>=</sym> <def>IntInf.div</def> <sym>((</sym><def>q</def> <sym>*</sym> <def>x</def> <sym>+</sym> <def>r</def><sym>),(</sym><def>s</def> <sym>*</sym> <def>x</def> <sym>+</sym> <def>t</def><sym>))</sym><br />
<def></def><br />
<kwa>fun</kwa> <def>comp</def> <sym>(</sym><def>q</def><sym>,</sym><def>r</def><sym>,</sym><def>s</def><sym>,</sym><def>t</def><sym>) (</sym><def>q'</def><sym>,</sym><def>r'</def><sym>,</sym><def>s'</def><sym>,</sym><def>t'</def><sym>) : (</sym><def>IntInf.</def><kwb>int</kwb> <def></def><sym>*</sym> <def>IntInf.</def><kwb>int</kwb> <def></def><sym>*</sym> <def>IntInf.</def><kwb>int</kwb> <def></def><sym>*</sym> <def>IntInf.</def><kwb>int</kwb><def></def><sym>) =</sym><br />
<def></def>   <sym>(</sym><def>q</def> <sym>*</sym> <def>q'</def> <sym>+</sym> <def>r</def> <sym>*</sym> <def>s'</def><sym>,</sym>  <def>q</def> <sym>*</sym> <def>r'</def> <sym>+</sym> <def>r</def> <sym>*</sym> <def>t'</def><sym>,</sym><br />
<def>    s</def> <sym>*</sym> <def>q'</def> <sym>+</sym> <def>t</def> <sym>*</sym> <def>s'</def><sym>,</sym>  <def>s</def> <sym>*</sym> <def>r'</def> <sym>+</sym> <def>t</def> <sym>*</sym> <def>t'</def><sym>)</sym><br />
<def></def><br />
<kwa>fun</kwa> <def>next z</def> <sym>=</sym> <def>floor_ev z</def> <num>3</num><br />
<def></def><kwa>fun</kwa> <def>safe z n</def> <sym>=</sym> <def>n</def> <sym>=</sym> <def>floor_ev z</def> <num>4</num><br />
<def></def><kwa>fun</kwa> <def>prod z n</def> <sym>=</sym> <def>comp</def> <sym>(</sym><def></def><num>10</num><def></def><sym>,</sym> <def>~</def><num>10</num> <def></def><sym>*</sym> <def>n</def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>1</num><def></def><sym>)</sym> <def>z</def><br />
<kwa>fun</kwa> <def>cons z k</def> <sym>=</sym><br />
<def>   comp z</def> <sym>(</sym><def>IntInf.fromInt k</def><sym>,</sym> <def>IntInf.fromInt</def> <sym>(</sym><def></def><num>2</num><def></def><sym>*(</sym><def></def><num>2</num><def></def><sym>*</sym><def>k</def><sym>+</sym><def></def><num>1</num><def></def><sym>)),</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>IntInf.fromInt</def> <sym>(</sym><def></def><num>2</num><def></def><sym>*</sym><def>k</def><sym>+</sym><def></def><num>1</num><def></def><sym>))</sym><br />
<def></def><br />
<kwa>fun</kwa> <def>digit k z n row col</def> <sym>=</sym><br />
<def></def>   <kwa>if</kwa> <def>n</def> <sym>&gt;</sym> <def></def><num>0</num> <def></def><kwa>then</kwa><br />
<def></def>      <kwa>let val</kwa> <def>y</def> <sym>=</sym> <def>next z</def> <kwa>in</kwa><br />
<def></def>         <kwa>if</kwa> <def>safe z y</def> <kwa>then</kwa><br />
<def></def>            <kwa>if</kwa> <def>col</def> <sym>=</sym> <def></def><num>10</num> <def></def><kwa>then</kwa><br />
<def></def>               <kwa>let val</kwa> <def>row</def> <sym>=</sym> <def>row</def> <sym>+</sym> <def></def><num>10</num> <def></def><kwa>in</kwa><br />
<def>                  print</def><sym>(</sym><def></def><str>&quot;</str><esc>\t</esc><str>:&quot;</str><def> ^ IntInf.toString row ^</def> <str>&quot;</str><esc>\n</esc><str>&quot;</str><def> ^ IntInf.toString y</def><sym>);</sym><br />
<def>                  digit k</def> <sym>(</sym><def>prod z y</def><sym>) (</sym><def>n</def><sym>-</sym><def></def><num>1</num><def></def><sym>)</sym> <def>row</def> <num>1</num><br />
<def></def>               <kwa>end</kwa><br />
<def></def>            <kwa>else</kwa><br />
<def></def>               <sym>(</sym> <def>print</def> <sym>(</sym><def>IntInf.toString y</def><sym>)</sym><br />
<def></def>               <sym>;</sym> <def>digit k</def> <sym>(</sym><def>prod z y</def><sym>) (</sym><def>n</def><sym>-</sym><def></def><num>1</num><def></def><sym>)</sym> <def>row</def> <sym>(</sym><def>col</def><sym>+</sym><def></def><num>1</num><def></def><sym>))</sym><br />
<def></def>         <kwa>else</kwa> <def>digit</def> <sym>(</sym><def>k</def><sym>+</sym><def></def><num>1</num><def></def><sym>) (</sym><def>cons z k</def><sym>)</sym> <def>n row col</def><br />
      <kwa>end</kwa><br />
<def></def>   <kwa>else</kwa><br />
<def>      print</def><sym>(</sym><def></def><kwa>String</kwa><def>.implode</def><sym>(</sym><def></def><kwa>List</kwa><def>.tabulate</def><sym>((</sym><def></def><num>10</num> <def></def><sym>-</sym> <def>IntInf.toInt col</def><sym>),</sym> <def></def><kwa>fn</kwa> <def>x</def> <sym>=&gt;</sym> <def>#</def><str>&quot; &quot;</str><def></def><sym>))</sym><br />
<def>           ^</def> <str>&quot;</str><esc>\t</esc><str>:&quot;</str><def> ^ IntInf.toString</def> <sym>(</sym><def>row</def> <sym>+</sym> <def>col</def><sym>)</sym> <def>^</def> <str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>)</sym><br />
<def></def><br />
<kwa>fun</kwa> <def>digits n</def> <sym>=</sym> <def>digit</def> <num>1</num> <def></def><sym>(</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>1</num><def></def><sym>)</sym> <def>n</def> <num>0 0</num><br />
<def></def><br />
<kwa>val</kwa> <def></def><sym>() =</sym> <def>digits</def> <sym>(</sym><def>valOf</def> <sym>(</sym><def></def><kwa>Int</kwa><def>.fromString</def> <sym>(</sym><def>hd</def> <sym>(</sym><def>CommandLine.arguments</def><sym>()))))</sym><def></def><br />
</source>
