<source>
<def></def><com>/* The Computer Language Shootout</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com></com><br />
<com>   contributed by Kannan Goundan</com><br />
<com>   modified by Isaac Gouy</com><br />
<com>   optimized by David Pollak</com><br />
<com>*/</com><def></def><br />
<br />
<kwa>object</kwa> <def>binarytrees</def> <sym>{</sym><br />
<def></def>   <kwa>def</kwa> <def>main</def><sym>(</sym><def>args</def><sym>:</sym> <def></def><kwc>Array</kwc><def></def><sym>[</sym><def></def><kwc>String</kwc><def></def><sym>]) = {</sym><br />
<def></def>      <kwa>val</kwa> <def>n</def> <sym>=</sym> <def></def><kwa>try</kwa> <def></def><sym>{</sym> <def></def><kwc>Integer</kwc><def></def><sym>.</sym><def>parseInt</def><sym>(</sym><def>args</def><sym>(</sym><def></def><num>0</num><def></def><sym>)) }</sym> <def></def><kwa>catch</kwa> <def></def><sym>{</sym> <def></def><kwa>case</kwa> <def>_</def> <sym>=&gt;</sym> <def></def><num>1</num> <def></def><sym>}</sym><br />
<def></def>      <kwa>val</kwa> <def>minDepth</def> <sym>=</sym> <def></def><num>4</num><br />
<def></def>      <kwa>val</kwa> <def>maxDepth</def> <sym>=</sym> <def></def><kwc>Math</kwc><def></def><sym>.</sym><def>max</def><sym>(</sym><def>minDepth</def><sym>+</sym><def></def><num>2</num><def></def><sym>,</sym><def>n</def><sym>)</sym><br />
<def><br />
      print</def><sym>(</sym><def></def><str>&quot;stretch tree&quot;</str><def></def><sym>,</sym> <def>maxDepth</def><sym>+</sym><def></def><num>1</num><def></def><sym>,</sym> <def>Tree</def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym><def>maxDepth</def><sym>+</sym><def></def><num>1</num><def></def><sym>).</sym><def>isum</def><sym>)</sym><br />
<def></def><br />
      <kwa>val</kwa> <def>longLivedTree</def> <sym>=</sym> <def>Tree</def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym><def>maxDepth</def><sym>)</sym><br />
<def></def><br />
      <kwa>var</kwa> <def>depth</def> <sym>=</sym> <def>minDepth</def><br />
      <kwa>while</kwa> <def></def><sym>(</sym><def>depth</def> <sym>&lt;=</sym> <def>maxDepth</def><sym>) {</sym><br />
<def></def>         <kwa>val</kwa> <def>iterations</def> <sym>=</sym> <def></def><num>1</num> <def></def><sym>&lt;&lt; (</sym><def>maxDepth</def> <sym>-</sym> <def>depth</def> <sym>+</sym> <def>minDepth</def><sym>)</sym><br />
<def></def><br />
         <kwa>var</kwa> <def>sum</def> <sym>=</sym> <def></def><num>0</num><br />
<def></def>         <kwa>var</kwa> <def>i</def> <sym>=</sym> <def></def><num>1</num><br />
<def></def>         <kwa>while</kwa> <def></def><sym>(</sym><def>i</def> <sym>&lt;=</sym> <def>iterations</def><sym>) {</sym><br />
<def>            sum</def> <sym>=</sym> <def>sum</def> <sym>+</sym> <def>Tree</def><sym>(</sym><def>i</def><sym>,</sym><def>depth</def><sym>).</sym><def>isum</def> <sym>+</sym> <def>Tree</def><sym>(-</sym><def>i</def><sym>,</sym><def>depth</def><sym>).</sym><def>isum<br />
            i</def> <sym>=</sym> <def>i</def> <sym>+</sym> <def></def><num>1</num><br />
<def></def>         <sym>}</sym><br />
<def>         print</def><sym>(</sym><def>iterations</def><sym>*</sym><def></def><num>2</num> <def></def><sym>+</sym> <def></def><str>&quot;</str><esc>\t</esc> <str>trees&quot;</str><def></def><sym>,</sym> <def>depth</def><sym>,</sym> <def>sum</def><sym>)</sym><br />
<def><br />
         depth</def> <sym>=</sym> <def>depth</def> <sym>+</sym> <def></def><num>2</num><br />
<def></def>      <sym>}</sym><br />
<def><br />
      print</def><sym>(</sym><def></def><str>&quot;long lived tree&quot;</str><def></def><sym>,</sym> <def>maxDepth</def><sym>,</sym> <def>longLivedTree</def><sym>.</sym><def>isum</def><sym>)</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>def</kwa> <def>print</def><sym>(</sym><def>name</def><sym>:</sym> <def></def><kwc>String</kwc><def></def><sym>,</sym> <def>depth</def><sym>:</sym> <def>Int</def><sym>,</sym> <def>check</def><sym>:</sym> <def>Int</def><sym>) =</sym><br />
<def>      Console</def><sym>.</sym><def>println</def><sym>(</sym><def>name</def> <sym>+</sym> <def></def><str>&quot; of depth &quot;</str><def></def> <sym>+</sym> <def>depth</def> <sym>+</sym> <def></def><str>&quot;</str><esc>\t</esc> <str>check: &quot;</str><def></def> <sym>+</sym> <def>check</def><sym>)</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwa>object</kwa> <def>Tree</def> <sym>{</sym><br />
<def></def>  <kwa>def</kwa> <def>apply</def><sym>(</sym><def>i</def><sym>:</sym> <def></def><kwb>int</kwb><def></def><sym>,</sym> <def>depth</def><sym>:</sym> <def></def><kwb>int</kwb><def></def><sym>):</sym> <def>Tree</def> <sym>= {</sym><br />
<def></def>    <kwa>if</kwa> <def></def><sym>(</sym><def>depth</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>) {</sym><def></def><kwa>val</kwa> <def>d1</def> <sym>=</sym> <def>depth</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>;</sym> <def></def><kwa>val</kwa> <def>i2</def> <sym>=</sym> <def>i</def> <sym>*</sym> <def></def><num>2</num><def></def><sym>;</sym> <def></def><kwa>new</kwa> <def>Tree</def><sym>(</sym><def>i</def><sym>,</sym> <def>Tree</def><sym>(</sym><def>i2</def><sym>-</sym><def></def><num>1</num><def></def><sym>,</sym> <def>d1</def><sym>),</sym> <def>Tree</def><sym>(</sym><def>i2</def><sym>,</sym> <def>d1</def><sym>))}</sym><br />
<def></def>    <kwa>else new</kwa> <def>Tree</def><sym>(</sym><def>i</def><sym>,</sym> <def>null</def><sym>,</sym> <def>null</def><sym>)</sym><br />
<def></def>  <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwa>final class</kwa> <def>Tree</def><sym>(</sym><def></def><kwa>val</kwa> <def>i</def><sym>:</sym> <def></def><kwb>int</kwb><def></def><sym>,</sym><def></def><kwa>val</kwa> <def>left</def><sym>:</sym> <def>Tree</def><sym>,</sym> <def></def><kwa>val</kwa> <def>right</def><sym>:</sym> <def>Tree</def><sym>) {</sym> <def></def><slc>//  depth: int) {</slc><br />
<def></def>    <kwa>def</kwa> <def>isum</def><sym>:</sym> <def></def><kwb>int</kwb> <def></def><sym>= {</sym><br />
<def></def>       <kwa>val</kwa> <def>tl</def> <sym>=</sym> <def>left</def><br />
       <kwa>if</kwa> <def></def><sym>(</sym><def>tl eq null</def><sym>)</sym> <def>i</def><br />
       <kwa>else</kwa> <def>i</def> <sym>+</sym> <def>tl</def><sym>.</sym><def>isum</def> <sym>-</sym> <def>right</def><sym>.</sym><def>isum</def><br />
    <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
</source>
