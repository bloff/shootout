<source>
<def></def><slc>// The Computer Language Benchmarks Game</slc><br />
<def></def><slc>// http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>//</slc><br />
<def></def><slc>// Requires a PCRE [Perl Compatible Regular Expression] enabled Pike.</slc><br />
<def></def><slc>//</slc><br />
<def></def><slc>// contributed by Anthony Borla</slc><br />
<def></def><slc>// Modified by Bertrand LUPART and Mirar.</slc><br />
<def></def><br />
<kwb>array</kwb><def></def><sym>(</sym><def></def><kwb>string</kwb><def></def><sym>)</sym> <def>VARIANTS</def> <sym>=</sym><br />
<def></def>  <sym>({</sym><br />
<def></def>    <str>&quot;agggtaaa|tttaccct&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;a[act]ggtaaa|tttacc[agt]t&quot;</str><def></def><sym>,</sym><br />
<def></def>    <str>&quot;ag[act]gtaaa|tttac[agt]ct&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;agg[act]taaa|ttta[agt]cct&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</str><def></def><sym>,</sym><br />
<def></def>    <str>&quot;agggt[cgt]aa|tt[acg]accct&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;agggta[cgt]a|t[acg]taccct&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;agggtaa[cgt]|[acg]ttaccct&quot;</str><def></def><br />
  <sym>});</sym><br />
<def></def><br />
<kwb>array</kwb><def></def><sym>(</sym><def></def><kwb>string</kwb><def></def><sym>)</sym> <def>IUB</def> <sym>=</sym><br />
<def></def>  <sym>({</sym><br />
<def></def>    <str>&quot;B&quot;</str><def></def><sym>,</sym><def></def><str>&quot;D&quot;</str><def></def><sym>,</sym><def></def><str>&quot;H&quot;</str><def></def><sym>,</sym><def></def><str>&quot;K&quot;</str><def></def><sym>,</sym><def></def><str>&quot;M&quot;</str><def></def><sym>,</sym><def></def><str>&quot;N&quot;</str><def></def><sym>,</sym><def></def><str>&quot;R&quot;</str><def></def><sym>,</sym><def></def><str>&quot;S&quot;</str><def></def><sym>,</sym><def></def><str>&quot;V&quot;</str><def></def><sym>,</sym><def></def><str>&quot;W&quot;</str><def></def><sym>,</sym><def></def><str>&quot;Y&quot;</str><def></def><sym>,</sym><br />
<def></def>  <sym>});</sym><br />
<def></def><br />
<kwb>array</kwb><def></def><sym>(</sym><def></def><kwb>string</kwb><def></def><sym>)</sym> <def>IUBnew</def> <sym>=</sym><br />
<def></def>  <sym>({</sym><br />
<def></def>    <str>&quot;(c|g|t)&quot;</str><def></def><sym>,</sym><def></def><str>&quot;(a|g|t)&quot;</str><def></def><sym>,</sym><def></def><str>&quot;(a|c|t)&quot;</str><def></def><sym>,</sym><def></def><str>&quot;(g|t)&quot;</str><def></def><sym>,</sym><def></def><str>&quot;(a|c)&quot;</str><def></def><sym>,</sym><def></def><str>&quot;(a|c|g|t)&quot;</str><def></def><sym>,</sym><def></def><str>&quot;(a|g)&quot;</str><def></def><sym>,</sym><def></def><str>&quot;(c|g)&quot;</str><def></def><sym>,</sym><def></def><str>&quot;(a|c|g)&quot;</str><def></def><sym>,</sym><def></def><str>&quot;(a|t)&quot;</str><def></def><sym>,</sym><def></def><str>&quot;(c|t)&quot;</str><def></def><sym>,</sym><br />
<def></def>  <sym>});</sym><br />
<def></def><br />
<br />
<br />
<kwb>int</kwb> <def></def><kwd>main</kwd><def></def><sym>()</sym><br />
<def></def><sym>{</sym><br />
<def></def>  <slc>// Read input data into string and record its length</slc><br />
<def></def>  <kwb>string</kwb> <def>seq</def> <sym>=</sym> <def>Stdio.stdin</def><sym>-&gt;</sym><def></def><kwd>read</kwd><def></def><sym>();</sym> <def></def><kwb>int</kwb> <def>initial_length</def> <sym>=</sym> <def></def><kwa>sizeof</kwa><def></def><sym>(</sym><def>seq</def><sym>);</sym><br />
<def></def><br />
  <slc>// Remove all newline and segment divider line occurrences</slc><br />
<def>  seq</def> <sym>=</sym> <def>Regexp.PCRE.</def><kwd>Studied</kwd><def></def><sym>(</sym><def></def><str>&quot;(&gt;.*</str><esc>\n</esc><str>)|(</str><esc>\n</esc><str>)&quot;</str><def></def><sym>)-&gt;</sym><def></def><kwa>replace</kwa><def></def><sym>(</sym><def>seq</def><sym>,</sym> <def></def><str>&quot;&quot;</str><def></def><sym>);</sym><br />
<def></def><br />
  <kwb>int</kwb> <def>code_length</def> <sym>=</sym> <def></def><kwa>sizeof</kwa><def></def><sym>(</sym><def>seq</def><sym>);</sym><br />
<def></def><br />
  <slc>// Perform regexp counts</slc><br />
<def></def>  <kwd>foreach</kwd><def></def><sym>(</sym><def>VARIANTS</def><sym>,</sym> <def></def><kwb>string</kwb> <def>var</def><sym>)</sym><br />
<def></def>  <sym>{</sym><br />
<def></def>		<kwb>int</kwb> <def>number_of_matches</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>		Regexp.PCRE.</def><kwd>Studied</kwd><def></def><sym>(</sym><def>var</def><sym>,</sym> <def>Regexp.PCRE.OPTION.CASELESS</def><sym>)-&gt;</sym><def></def><kwd>matchall</kwd><def></def><sym>(</sym><def>seq</def><sym>,</sym> <def></def><kwd>lambda</kwd><def></def><sym>(){</sym> <def>number_of_matches</def><sym>++; });</sym><br />
<def></def><br />
    <kwa>write</kwa><def></def><sym>(</sym><def></def><str>&quot;%s %d</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def>var</def><sym>,</sym> <def>number_of_matches</def><sym>);</sym><br />
<def></def>  <sym>}</sym><br />
<def></def><br />
  <slc>// Perform replacements</slc><br />
<def>  seq</def> <sym>=</sym> <def></def><kwa>replace</kwa><def></def><sym>(</sym><def>seq</def><sym>,</sym> <def>IUB</def><sym>,</sym> <def>IUBnew</def><sym>);</sym><br />
<def></def><br />
  <slc>// Print statistics</slc><br />
<def></def>  <kwa>write</kwa><def></def><sym>(</sym><def></def><str>&quot;</str><esc>\n</esc><str>%d</str><esc>\n</esc><str>%d</str><esc>\n</esc><str>%d</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def>initial_length</def><sym>,</sym> <def>code_length</def><sym>,</sym> <def></def><kwa>sizeof</kwa><def></def><sym>(</sym><def>seq</def><sym>));</sym><br />
<def><br />
  return</def> <num>0</num><def></def><sym>;</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
