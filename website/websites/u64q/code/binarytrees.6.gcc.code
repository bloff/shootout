<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> *  http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> *  contributed by Francesco Massei</span>
<span class="hl com"> */</span>

<span class="hl dir">#define _GNU_SOURCE</span>
<span class="hl dir">#include &lt;stdlib.h&gt;</span>
<span class="hl dir">#include &lt;stdio.h&gt;</span>
<span class="hl dir">#include &lt;omp.h&gt;</span>
<span class="hl dir">#include &lt;sched.h&gt;</span>

<span class="hl kwc">typedef</span> <span class="hl kwb">struct</span> node_s <span class="hl sym">{</span>
    <span class="hl kwb">struct</span> node_s <span class="hl sym">*</span>l<span class="hl sym">, *</span>r<span class="hl sym">;</span>
    <span class="hl kwb">long</span> i<span class="hl sym">;</span>
<span class="hl sym">}</span> node_st<span class="hl sym">;</span>

<span class="hl kwb">static</span> node_st <span class="hl sym">*</span><span class="hl kwd">new_node</span><span class="hl sym">(</span>node_st <span class="hl sym">*</span>l<span class="hl sym">,</span> node_st <span class="hl sym">*</span>r<span class="hl sym">,</span> <span class="hl kwb">long</span> i<span class="hl sym">)</span>
<span class="hl sym">{</span>
    node_st <span class="hl sym">*</span>ret<span class="hl sym">;</span>
    ret <span class="hl sym">=</span> <span class="hl kwd">malloc</span><span class="hl sym">(</span><span class="hl kwa">sizeof</span><span class="hl sym">(*</span>ret<span class="hl sym">));</span>
    ret<span class="hl sym">-&gt;</span>l <span class="hl sym">=</span> l<span class="hl sym">;</span>
    ret<span class="hl sym">-&gt;</span>r <span class="hl sym">=</span> r<span class="hl sym">;</span>
    ret<span class="hl sym">-&gt;</span>i <span class="hl sym">=</span> i<span class="hl sym">;</span>
    <span class="hl kwa">return</span> ret<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">static long</span> <span class="hl kwd">item_check</span><span class="hl sym">(</span>node_st <span class="hl sym">*</span>node<span class="hl sym">)</span>
<span class="hl sym">{</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>node<span class="hl sym">-&gt;</span>l<span class="hl sym">==</span>NULL<span class="hl sym">)</span> <span class="hl kwa">return</span> node<span class="hl sym">-&gt;</span>i<span class="hl sym">;</span>
    <span class="hl kwa">return</span> node<span class="hl sym">-&gt;</span>i<span class="hl sym">+</span><span class="hl kwd">item_check</span><span class="hl sym">(</span>node<span class="hl sym">-&gt;</span>l<span class="hl sym">)-</span><span class="hl kwd">item_check</span><span class="hl sym">(</span>node<span class="hl sym">-&gt;</span>r<span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwb">static</span> node_st <span class="hl sym">*</span><span class="hl kwd">b_u_tree</span><span class="hl sym">(</span><span class="hl kwb">long</span> i<span class="hl sym">,</span> <span class="hl kwb">int</span> d<span class="hl sym">)</span>
<span class="hl sym">{</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>d<span class="hl sym">&gt;</span><span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">return</span> <span class="hl kwd">new_node</span><span class="hl sym">(</span><span class="hl kwd">b_u_tree</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>i<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> d<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">),</span> <span class="hl kwd">b_u_tree</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>i<span class="hl sym">,</span> d<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">),</span> i<span class="hl sym">);</span>
    <span class="hl kwa">return</span> <span class="hl kwd">new_node</span><span class="hl sym">(</span>NULL<span class="hl sym">,</span> NULL<span class="hl sym">,</span> i<span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwb">static void</span> <span class="hl kwd">delete_node</span><span class="hl sym">(</span>node_st <span class="hl sym">*</span>node<span class="hl sym">)</span>
<span class="hl sym">{</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>node<span class="hl sym">-&gt;</span>l<span class="hl sym">) {</span>
        <span class="hl kwd">delete_node</span><span class="hl sym">(</span>node<span class="hl sym">-&gt;</span>l<span class="hl sym">);</span>
        <span class="hl kwd">delete_node</span><span class="hl sym">(</span>node<span class="hl sym">-&gt;</span>r<span class="hl sym">);</span>
    <span class="hl sym">}</span>
    <span class="hl kwd">free</span><span class="hl sym">(</span>node<span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwb">static long</span> <span class="hl kwd">check_tree_of_depth</span><span class="hl sym">(</span><span class="hl kwb">long</span> iter<span class="hl sym">,</span> <span class="hl kwb">long</span> depth<span class="hl sym">)</span>
<span class="hl sym">{</span>
    <span class="hl kwb">long</span> i<span class="hl sym">,</span> check<span class="hl sym">;</span>
    node_st <span class="hl sym">*</span>tmp<span class="hl sym">;</span>

    <span class="hl kwa">for</span> <span class="hl sym">(</span>check <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> i <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span> i<span class="hl sym">&lt;=</span>iter<span class="hl sym">; ++</span>i<span class="hl sym">) {</span>
        tmp <span class="hl sym">=</span> <span class="hl kwd">b_u_tree</span><span class="hl sym">(</span>i<span class="hl sym">,</span> depth<span class="hl sym">);</span>
        check <span class="hl sym">+=</span> <span class="hl kwd">item_check</span><span class="hl sym">(</span>tmp<span class="hl sym">);</span>
        <span class="hl kwd">delete_node</span><span class="hl sym">(</span>tmp<span class="hl sym">);</span>

        tmp <span class="hl sym">=</span> <span class="hl kwd">b_u_tree</span><span class="hl sym">(-</span>i<span class="hl sym">,</span> depth<span class="hl sym">);</span>
        check <span class="hl sym">+=</span> <span class="hl kwd">item_check</span><span class="hl sym">(</span>tmp<span class="hl sym">);</span>
        <span class="hl kwd">delete_node</span><span class="hl sym">(</span>tmp<span class="hl sym">);</span>
    <span class="hl sym">}</span>
    <span class="hl kwa">return</span> check<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">static int</span> <span class="hl kwd">GetThreadCount</span><span class="hl sym">()</span>
<span class="hl sym">{</span>
	cpu_set_t cs<span class="hl sym">;</span>
    <span class="hl kwb">int</span> count<span class="hl sym">,</span> i<span class="hl sym">;</span>

	<span class="hl kwd">CPU_ZERO</span><span class="hl sym">(&amp;</span>cs<span class="hl sym">);</span>
	<span class="hl kwd">sched_getaffinity</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span>cs<span class="hl sym">), &amp;</span>cs<span class="hl sym">);</span>
	<span class="hl kwa">for</span> <span class="hl sym">(</span>count<span class="hl sym">=</span>i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span><span class="hl num">8</span><span class="hl sym">;</span> i<span class="hl sym">++) {</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">CPU_ISSET</span><span class="hl sym">(</span>i<span class="hl sym">, &amp;</span>cs<span class="hl sym">))</span> count<span class="hl sym">++;</span>
	<span class="hl sym">}</span>
	<span class="hl kwa">return</span> count<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">const int</span> argc<span class="hl sym">,</span> <span class="hl kwb">const char</span> <span class="hl sym">*</span>argv<span class="hl sym">[])</span>
<span class="hl sym">{</span>
    node_st <span class="hl sym">*</span>stretch<span class="hl sym">, *</span>longlived<span class="hl sym">;</span>
    <span class="hl kwb">long</span> i<span class="hl sym">,</span> c<span class="hl sym">;</span>
    <span class="hl kwb">int</span> n<span class="hl sym">,</span> depth<span class="hl sym">,</span> mindepth<span class="hl sym">,</span> maxdepth<span class="hl sym">,</span> stretchdepth<span class="hl sym">;</span>

    n <span class="hl sym">= (</span>argc<span class="hl sym">&gt;</span><span class="hl num">1</span><span class="hl sym">)</span> ? <span class="hl kwd">atoi</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]) :</span> <span class="hl num">10</span><span class="hl sym">;</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>n <span class="hl sym">&lt;</span> <span class="hl num">1</span><span class="hl sym">) {</span>
        <span class="hl kwd">fprintf</span><span class="hl sym">(</span>stderr<span class="hl sym">,</span> <span class="hl str">&quot;Wrong argument.</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">);</span>
        <span class="hl kwd">exit</span><span class="hl sym">(</span>EXIT_FAILURE<span class="hl sym">);</span>
    <span class="hl sym">}</span>

    mindepth <span class="hl sym">=</span> <span class="hl num">4</span><span class="hl sym">;</span>
    maxdepth <span class="hl sym">=</span> mindepth <span class="hl sym">+</span> <span class="hl num">2</span> <span class="hl sym">&gt;</span> n ? mindepth <span class="hl sym">+</span> <span class="hl num">2</span> <span class="hl sym">:</span> n<span class="hl sym">;</span>
    stretchdepth <span class="hl sym">=</span> maxdepth <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>

    stretch <span class="hl sym">=</span> <span class="hl kwd">b_u_tree</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> stretchdepth<span class="hl sym">);</span>
    <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;stretch tree of depth %u</span><span class="hl esc">\t</span> <span class="hl str">check: %li</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> stretchdepth<span class="hl sym">,</span>
                                                        <span class="hl kwd">item_check</span><span class="hl sym">(</span>stretch<span class="hl sym">));</span>
    <span class="hl kwd">delete_node</span><span class="hl sym">(</span>stretch<span class="hl sym">);</span>

    longlived <span class="hl sym">=</span> <span class="hl kwd">b_u_tree</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> maxdepth<span class="hl sym">);</span>

    <span class="hl dir">#pragma omp parallel for default(shared) num_threads(GetThreadCount()) schedule(dynamic, 1)</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span>depth <span class="hl sym">=</span> mindepth<span class="hl sym">;</span> depth <span class="hl sym">&lt;=</span> maxdepth<span class="hl sym">;</span> depth <span class="hl sym">+=</span> <span class="hl num">2</span><span class="hl sym">) {</span>
        i <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>maxdepth <span class="hl sym">-</span> depth <span class="hl sym">+</span> mindepth<span class="hl sym">);</span>
        c <span class="hl sym">=</span> <span class="hl kwd">check_tree_of_depth</span><span class="hl sym">(</span>i<span class="hl sym">,</span> depth<span class="hl sym">);</span>
        <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;%ld</span><span class="hl esc">\t</span> <span class="hl str">trees of depth %d</span><span class="hl esc">\t</span> <span class="hl str">check: %ld</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> i<span class="hl sym">*</span><span class="hl num">2</span><span class="hl sym">,</span> depth<span class="hl sym">,</span> c<span class="hl sym">);</span>
    <span class="hl sym">}</span>

    <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;long lived tree of depth %d</span><span class="hl esc">\t</span> <span class="hl str">check: %ld</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> maxdepth<span class="hl sym">,</span>
                                                        <span class="hl kwd">item_check</span><span class="hl sym">(</span>longlived<span class="hl sym">));</span>

    <span class="hl kwd">delete_node</span><span class="hl sym">(</span>longlived<span class="hl sym">);</span>

    <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

