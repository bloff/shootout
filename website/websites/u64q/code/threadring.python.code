<source>
<def></def><str>&quot;&quot;&quot;</str><br />
<str>The Computer Language Benchmarks Game</str><br />
<str>http://shootout.alioth.debian.org/</str><br />
<str>Contributed by Antti Kervinen</str><br />
<str>&quot;&quot;&quot;</str><def><br />
<br />
THREADS</def> <sym>=</sym> <def></def><num>503</num><br />
<def></def><br />
<slc># Uses pthread library on Linux</slc><br />
<def></def><kwa>import</kwa> <def>thread</def><br />
<kwa>import</kwa> <def>sys</def><br />
<br />
<slc># Set minimum stack size for threads, otherwise the program may fail</slc><br />
<def></def><slc># to create such a many threads</slc><br />
<def>thread</def><sym>.</sym><def></def><kwd>stack_size</kwd><def></def><sym>(</sym><def></def><num>32</num><def></def><sym>*</sym><def></def><num>1024</num><def></def><sym>)</sym><br />
<def></def><br />
<kwa>def</kwa> <def></def><kwd>threadfun</kwd><def></def><sym>(</sym><def>my_number</def><sym>,</sym> <def>my_lock</def><sym>,</sym> <def>next_lock</def><sym>):</sym><br />
<def></def>    <kwa>global</kwa> <def>N</def><sym>,</sym> <def>main_thread_lock</def><br />
    <kwa>while</kwa> <def></def><num>1</num><def></def><sym>:</sym><br />
<def>        my_lock</def><sym>.</sym><def></def><kwd>acquire</kwd><def></def><sym>()</sym><br />
<def></def>        <kwa>if</kwa> <def>N</def> <sym>==</sym> <def></def><num>0</num><def></def><sym>:</sym><br />
<def></def>            <kwa>print</kwa> <def>my_number<br />
            main_thread_lock</def><sym>.</sym><def></def><kwd>release</kwd><def></def><sym>()</sym><br />
<def></def>        <kwa>else</kwa><def></def><sym>:</sym><br />
<def>            N</def> <sym>-=</sym> <def></def><num>1</num><br />
<def>            next_lock</def><sym>.</sym><def></def><kwd>release</kwd><def></def><sym>()</sym><br />
<def></def><br />
<slc># main</slc><br />
<def>N</def> <sym>=</sym> <def></def><kwb>int</kwb><def></def><sym>(</sym><def>sys</def><sym>.</sym><def>argv</def><sym>[</sym><def></def><num>1</num><def></def><sym>])</sym><br />
<def>main_thread_lock</def> <sym>=</sym> <def>thread</def><sym>.</sym><def></def><kwd>allocate_lock</kwd><def></def><sym>()</sym><br />
<def>main_thread_lock</def><sym>.</sym><def></def><kwd>acquire</kwd><def></def><sym>()</sym><br />
<def><br />
first_lock</def> <sym>=</sym> <def>thread</def><sym>.</sym><def></def><kwd>allocate_lock</kwd><def></def><sym>()</sym><br />
<def>next_lock</def> <sym>=</sym> <def>first_lock</def><br />
<br />
<kwa>for</kwa> <def>number</def> <kwa>in</kwa> <def></def><kwb>xrange</kwb><def></def><sym>(</sym><def>THREADS</def><sym>):</sym><br />
<def>    this_lock</def> <sym>=</sym> <def>next_lock<br />
    this_lock</def><sym>.</sym><def></def><kwd>acquire</kwd><def></def><sym>()</sym><br />
<def></def>    <kwa>if</kwa> <def>number</def> <sym>==</sym> <def>THREADS</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>:</sym><br />
<def>        next_lock</def> <sym>=</sym> <def>first_lock</def><br />
    <kwa>else</kwa><def></def><sym>:</sym><br />
<def>        next_lock</def> <sym>=</sym> <def>thread</def><sym>.</sym><def></def><kwd>allocate_lock</kwd><def></def><sym>()</sym><br />
<def>    thread</def><sym>.</sym><def></def><kwd>start_new_thread</kwd><def></def><sym>(</sym><def>threadfun</def><sym>,</sym><br />
<def></def>                            <sym>(</sym><def>number</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>this_lock</def><sym>,</sym> <def>next_lock</def><sym>))</sym><br />
<def><br />
first_lock</def><sym>.</sym><def></def><kwd>release</kwd><def></def><sym>()</sym><br />
<def>main_thread_lock</def><sym>.</sym><def></def><kwd>acquire</kwd><def></def><sym>()</sym><def></def><br />
</source>
