<span class="hl com">{-  The Computer Language Benchmarks Game</span>
<span class="hl com">    http://shootout.alioth.debian.org/</span>
<span class="hl com">    contributed by Miha Vučkovič</span>
<span class="hl com">-}</span>

import Data.List
import System
import Control.Applicative

flop lst<span class="hl sym">&#64;(</span>h<span class="hl sym">:</span>_<span class="hl sym">) =</span> reverse f <span class="hl sym">++</span> s where <span class="hl sym">(</span>f<span class="hl sym">,</span> s<span class="hl sym">) =</span> splitAt h lst

flopS <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">:</span>_<span class="hl sym">) =</span> <span class="hl num">0</span>
flopS lst <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">+</span> flopS <span class="hl sym">(</span>flop lst<span class="hl sym">)</span>

rotate n <span class="hl sym">(</span>h<span class="hl sym">:</span>t<span class="hl sym">) =</span> f <span class="hl sym">++</span> h<span class="hl sym">:</span>s where <span class="hl sym">(</span>f<span class="hl sym">,</span> s<span class="hl sym">) =</span> splitAt <span class="hl sym">(</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span> t

checksum <span class="hl sym">(</span>i<span class="hl sym">,</span> p<span class="hl sym">&#64;(</span>h<span class="hl sym">:</span>_<span class="hl sym">))</span>
   <span class="hl sym">|</span> mod i <span class="hl num">2</span> <span class="hl sym">==</span> <span class="hl num">0</span> <span class="hl sym">=</span> flopS p
   <span class="hl sym">|</span> True <span class="hl sym">= - (</span>flopS p<span class="hl sym">)</span>

permut n <span class="hl sym">=</span> foldr perm <span class="hl sym">[[</span><span class="hl num">1</span>..n<span class="hl sym">]] [</span><span class="hl num">2</span>..n<span class="hl sym">]</span> where
   perm x lst <span class="hl sym">=</span> concat <span class="hl sym">[</span>take x $ iterate <span class="hl sym">(</span>rotate x<span class="hl sym">)</span> l <span class="hl sym">|</span> l <span class="hl sym">&lt;-</span> lst<span class="hl sym">]</span>

main <span class="hl sym">=</span> do
   n <span class="hl sym">&lt;- (</span>read.head<span class="hl sym">) &lt;</span>$<span class="hl sym">&gt;</span> getArgs
   let chksm <span class="hl sym">=</span> sum $ map checksum $ zip <span class="hl sym">[</span><span class="hl num">0</span>..<span class="hl sym">] (</span>permut n<span class="hl sym">)</span>
   let mflops <span class="hl sym">=</span> maximum $ map flopS <span class="hl sym">(</span>permut n<span class="hl sym">)</span>
   putStrLn $ <span class="hl sym">(</span>show chksm<span class="hl sym">) ++</span> <span class="hl str">&quot;\nPfannkuchen(&quot;</span> <span class="hl sym">++ (</span>show n<span class="hl sym">) ++</span> <span class="hl str">&quot;) = &quot;</span> <span class="hl sym">++ (</span>show $ mflops<span class="hl sym">)</span>
