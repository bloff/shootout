<source>
<def></def><com>/*</com><br />
<com>   The Computer Language Benchmarks Game</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com>   contributed by Razii, idea taken from Elliott Hughes and Roger Millington</com><br />
<com>*/</com><def></def><br />
<br />
<kwa>import</kwa> <def>java</def><sym>.</sym><def>io</def><sym>.*;</sym><br />
<def></def><kwa>import</kwa> <def>java</def><sym>.</sym><def>util</def><sym>.</sym><def>regex</def><sym>.*;</sym><br />
<def></def><kwa>import</kwa> <def>java</def><sym>.</sym><def>util</def><sym>.*;</sym><br />
<def></def><br />
<kwa>public final class</kwa> <def>regexdna</def> <sym>{</sym><br />
<def></def><br />
   <kwa>private static final</kwa> <def></def><kwc>Map</kwc><def></def><sym>&lt;</sym><def></def><kwc>String</kwc><def></def><sym>,</sym> <def></def><kwc>String</kwc><def></def><sym>&gt;</sym> <def>replacements</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwc>HashMap</kwc><def></def><sym>&lt;</sym><def></def><kwc>String</kwc><def></def><sym>,</sym> <def></def><kwc>String</kwc><def></def><sym>&gt;();</sym><br />
<def></def><br />
   <kwa>static</kwa> <def></def><sym>{</sym><br />
<def><br />
      replacements</def><sym>.</sym><def></def><kwd>put</kwd><def></def><sym>(</sym><def></def><str>&quot;W&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(a|t)&quot;</str><def></def><sym>);</sym><br />
<def>      replacements</def><sym>.</sym><def></def><kwd>put</kwd><def></def><sym>(</sym><def></def><str>&quot;Y&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(c|t)&quot;</str><def></def><sym>);</sym><br />
<def>      replacements</def><sym>.</sym><def></def><kwd>put</kwd><def></def><sym>(</sym><def></def><str>&quot;K&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(g|t)&quot;</str><def></def><sym>);</sym><br />
<def>      replacements</def><sym>.</sym><def></def><kwd>put</kwd><def></def><sym>(</sym><def></def><str>&quot;M&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(a|c)&quot;</str><def></def><sym>);</sym><br />
<def>      replacements</def><sym>.</sym><def></def><kwd>put</kwd><def></def><sym>(</sym><def></def><str>&quot;S&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(c|g)&quot;</str><def></def><sym>);</sym><br />
<def>      replacements</def><sym>.</sym><def></def><kwd>put</kwd><def></def><sym>(</sym><def></def><str>&quot;R&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(a|g)&quot;</str><def></def><sym>);</sym><br />
<def>      replacements</def><sym>.</sym><def></def><kwd>put</kwd><def></def><sym>(</sym><def></def><str>&quot;B&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(c|g|t)&quot;</str><def></def><sym>);</sym><br />
<def>      replacements</def><sym>.</sym><def></def><kwd>put</kwd><def></def><sym>(</sym><def></def><str>&quot;D&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(a|g|t)&quot;</str><def></def><sym>);</sym><br />
<def>      replacements</def><sym>.</sym><def></def><kwd>put</kwd><def></def><sym>(</sym><def></def><str>&quot;V&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(a|c|g)&quot;</str><def></def><sym>);</sym><br />
<def>      replacements</def><sym>.</sym><def></def><kwd>put</kwd><def></def><sym>(</sym><def></def><str>&quot;H&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(a|c|t)&quot;</str><def></def><sym>);</sym><br />
<def>      replacements</def><sym>.</sym><def></def><kwd>put</kwd><def></def><sym>(</sym><def></def><str>&quot;N&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(a|c|g|t)&quot;</str><def></def><sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>static abstract class</kwa> <def>Rewriter</def> <sym>{</sym><br />
<def></def>      <kwa>private</kwa> <def></def><kwc>Pattern</kwc> <def>pattern</def><sym>;</sym><br />
<def></def>      <kwa>private</kwa> <def></def><kwc>Matcher</kwc> <def>matcher</def><sym>;</sym><br />
<def></def><br />
      <kwa>public</kwa> <def></def><kwd>Rewriter</kwd><def></def><sym>(</sym><def></def><kwc>String</kwc> <def>regularExpression</def><sym>) {</sym><br />
<def></def><br />
         <kwa>this</kwa><def></def><sym>.</sym><def>pattern</def> <sym>=</sym> <def></def><kwc>Pattern</kwc><def></def><sym>.</sym><def></def><kwd>compile</kwd><def></def><sym>(</sym><def>regularExpression</def><sym>);</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><br />
      <kwa>public</kwa> <def></def><kwc>String</kwc> <def></def><kwd>group</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def><sym>) {</sym><br />
<def></def>         <kwa>return</kwa> <def>matcher</def><sym>.</sym><def></def><kwd>group</kwd><def></def><sym>(</sym><def>i</def><sym>);</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><br />
      <kwa>public abstract</kwa> <def></def><kwc>String</kwc> <def></def><kwd>replacement</kwd><def></def><sym>();</sym><br />
<def></def><br />
      <kwa>public</kwa> <def></def><kwc>String</kwc> <def></def><kwd>rewrite</kwd><def></def><sym>(</sym><def></def><kwc>CharSequence</kwc> <def>original</def><sym>) {</sym><br />
<def></def>         <kwa>return</kwa> <def></def><kwd>rewrite</kwd><def></def><sym>(</sym><def>original</def><sym>,</sym> <def></def><kwa>new</kwa> <def></def><kwc>StringBuffer</kwc><def></def><sym>(</sym><def>original</def><sym>.</sym><def></def><kwd>length</kwd><def></def><sym>())).</sym><def></def><kwd>toString</kwd><def></def><sym>();</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><br />
      <kwa>public</kwa> <def></def><kwc>StringBuffer</kwc> <def></def><kwd>rewrite</kwd><def></def><sym>(</sym><def></def><kwc>CharSequence</kwc> <def>original</def><sym>,</sym> <def></def><kwc>StringBuffer</kwc> <def>destination</def><sym>) {</sym><br />
<def></def>         <kwa>this</kwa><def></def><sym>.</sym><def>matcher</def> <sym>=</sym> <def>pattern</def><sym>.</sym><def></def><kwd>matcher</kwd><def></def><sym>(</sym><def>original</def><sym>);</sym><br />
<def></def>         <kwa>while</kwa> <def></def><sym>(</sym><def>matcher</def><sym>.</sym><def></def><kwd>find</kwd><def></def><sym>()) {</sym><br />
<def>            matcher</def><sym>.</sym><def></def><kwd>appendReplacement</kwd><def></def><sym>(</sym><def>destination</def><sym>,</sym> <def></def><str>&quot;&quot;</str><def></def><sym>);</sym><br />
<def>            destination</def><sym>.</sym><def></def><kwd>append</kwd><def></def><sym>(</sym><def></def><kwd>replacement</kwd><def></def><sym>());</sym><br />
<def></def>         <sym>}</sym><br />
<def>         matcher</def><sym>.</sym><def></def><kwd>appendTail</kwd><def></def><sym>(</sym><def>destination</def><sym>);</sym><br />
<def></def>         <kwa>return</kwa> <def>destination</def><sym>;</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>public static</kwa> <def></def><kwb>void</kwb> <def></def><kwd>main</kwd><def></def><sym>(</sym><def></def><kwc>String</kwc><def></def><sym>[]</sym> <def>args</def><sym>)</sym><br />
<def></def>   <kwa>throws</kwa> <def></def><kwc>IOException</kwc> <def></def><sym>{</sym><br />
<def></def><br />
      <kwc>Reader</kwc> <def>r</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwc>InputStreamReader</kwc><def></def><sym>(</sym><def></def><kwc>System</kwc><def></def><sym>.</sym><def>in</def><sym>,</sym> <def></def><str>&quot;ISO-8859-1&quot;</str><def></def><sym>);</sym><br />
<def></def>      <kwc>StringBuilder</kwc> <def>sb</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwc>StringBuilder</kwc><def></def><sym>(</sym><def></def><num>5100000</num><def></def><sym>);</sym><br />
<def></def>      <kwb>char</kwb><def></def><sym>[]</sym> <def>cbuf</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwb>char</kwb><def></def><sym>[</sym><def></def><num>16384</num><def></def><sym>];</sym><br />
<def></def>      <kwb>int</kwb> <def>charsRead</def><sym>;</sym><br />
<def></def>      <kwa>while</kwa> <def></def><sym>((</sym><def>charsRead</def> <sym>=</sym> <def>r</def><sym>.</sym><def></def><kwd>read</kwd><def></def><sym>(</sym><def>cbuf</def><sym>)) != -</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def>         sb</def><sym>.</sym><def></def><kwd>append</kwd><def></def><sym>(</sym><def>cbuf</def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>charsRead</def><sym>);</sym><br />
<def></def><br />
      <kwb>int</kwb> <def>initialLength</def> <sym>=</sym> <def>sb</def><sym>.</sym><def></def><kwd>length</kwd><def></def><sym>();</sym><br />
<def></def><br />
      <kwc>String</kwc> <def>sequence</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>Rewriter</kwd><def></def><sym>(</sym><def></def><str>&quot;&gt;.*</str><esc>\n</esc><str>|</str><esc>\n</esc><str>&quot;</str><def></def><sym>) {</sym><br />
<def></def><br />
         <kwa>public</kwa> <def></def><kwc>String</kwc> <def></def><kwd>replacement</kwd><def></def><sym>() {</sym><br />
<def></def>            <kwa>return</kwa> <def></def><str>&quot;&quot;</str><def></def><sym>;</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>      <sym>}.</sym><def></def><kwd>rewrite</kwd><def></def><sym>(</sym><def>sb</def><sym>);</sym><br />
<def></def><br />
<br />
      <kwb>int</kwb> <def>codeLength</def> <sym>=</sym> <def>sequence</def><sym>.</sym><def></def><kwd>length</kwd><def></def><sym>();</sym><br />
<def></def><br />
      <kwc>String</kwc><def></def><sym>[]</sym> <def>variants</def> <sym>= {</sym> <def></def><str>&quot;agggtaaa|tttaccct&quot;</str><def></def> <sym>,</sym><br />
<def></def>                       <str>&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</str><def></def><sym>,</sym><br />
<def></def>                       <str>&quot;a[act]ggtaaa|tttacc[agt]t&quot;</str><def></def><sym>,</sym><br />
<def></def>                       <str>&quot;ag[act]gtaaa|tttac[agt]ct&quot;</str><def></def><sym>,</sym><br />
<def></def>                       <str>&quot;agg[act]taaa|ttta[agt]cct&quot;</str><def></def><sym>,</sym><br />
<def></def>                       <str>&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</str><def></def><sym>,</sym><br />
<def></def>                       <str>&quot;agggt[cgt]aa|tt[acg]accct&quot;</str><def></def><sym>,</sym><br />
<def></def>                       <str>&quot;agggta[cgt]a|t[acg]taccct&quot;</str><def></def><sym>,</sym><br />
<def></def>                       <str>&quot;agggtaa[cgt]|[acg]ttaccct&quot;</str><def></def><br />
                     <sym>};</sym><br />
<def></def><br />
      <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwc>String</kwc> <def>variant</def> <sym>:</sym> <def>variants</def><sym>) {</sym><br />
<def></def><br />
         <kwb>int</kwb> <def>count</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>         <kwc>Matcher</kwc> <def>m</def> <sym>=</sym> <def></def><kwc>Pattern</kwc><def></def><sym>.</sym><def></def><kwd>compile</kwd><def></def><sym>(</sym><def>variant</def><sym>).</sym><def></def><kwd>matcher</kwd><def></def><sym>(</sym><def>sequence</def><sym>);</sym><br />
<def></def>         <kwa>while</kwa> <def></def><sym>(</sym><def>m</def><sym>.</sym><def></def><kwd>find</kwd><def></def><sym>())</sym><br />
<def>            count</def><sym>++;</sym><br />
<def></def>         <kwc>System</kwc><def></def><sym>.</sym><def>out</def><sym>.</sym><def></def><kwd>println</kwd><def></def><sym>(</sym><def>variant</def> <sym>+</sym> <def></def><str>&quot; &quot;</str><def></def> <sym>+</sym> <def>count</def><sym>);</sym><br />
<def></def>      <sym>}</sym><br />
<def><br />
      sequence</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>Rewriter</kwd><def></def><sym>(</sym><def></def><str>&quot;[WYKMSRBDVHN]&quot;</str><def></def><sym>) {</sym><br />
<def></def><br />
         <kwa>public</kwa> <def></def><kwc>String</kwc> <def></def><kwd>replacement</kwd><def></def><sym>() {</sym><br />
<def></def>            <kwa>return</kwa> <def>replacements</def><sym>.</sym><def></def><kwd>get</kwd><def></def><sym>(</sym><def></def><kwd>group</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>));</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>      <sym>}.</sym><def></def><kwd>rewrite</kwd><def></def><sym>(</sym><def>sequence</def><sym>);</sym><br />
<def></def><br />
      <kwc>System</kwc><def></def><sym>.</sym><def>out</def><sym>.</sym><def></def><kwd>println</kwd><def></def><sym>();</sym><br />
<def></def>      <kwc>System</kwc><def></def><sym>.</sym><def>out</def><sym>.</sym><def></def><kwd>println</kwd><def></def><sym>(</sym><def>initialLength</def><sym>);</sym><br />
<def></def>      <kwc>System</kwc><def></def><sym>.</sym><def>out</def><sym>.</sym><def></def><kwd>println</kwd><def></def><sym>(</sym><def>codeLength</def><sym>);</sym><br />
<def></def>      <kwc>System</kwc><def></def><sym>.</sym><def>out</def><sym>.</sym><def></def><kwd>println</kwd><def></def><sym>(</sym><def>sequence</def><sym>.</sym><def></def><kwd>length</kwd><def></def><sym>());</sym><br />
<def></def><br />
   <sym>}</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
