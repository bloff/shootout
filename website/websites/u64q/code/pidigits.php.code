<source>
<def></def><sym>&lt;</sym><def>?</def> <com>/* The Great Computer Language Shootout</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com></com><br />
<com>   contributed by Isaac Gouy</com><br />
<com></com><br />
<com>   php -q pidigits.php 27</com><br />
<com>*/</com><def></def><br />
<br />
<br />
<kwa>class</kwa> <def>Transformation</def> <sym>{</sym><br />
<def>   var</def> <kwc>$q</kwc><def></def><sym>,</sym> <def></def><kwc>$r</kwc><def></def><sym>,</sym> <def></def><kwc>$s</kwc><def></def><sym>,</sym> <def></def><kwc>$t</kwc><def></def><sym>,</sym> <def></def><kwc>$k</kwc><def></def><sym>;</sym><br />
<def></def><br />
   <kwa>function</kwa> <def></def><kwd>Transformation</kwd><def></def><sym>(</sym><def></def><kwc>$q</kwc><def></def><sym>,</sym> <def></def><kwc>$r</kwc><def></def><sym>,</sym> <def></def><kwc>$s</kwc><def></def><sym>,</sym> <def></def><kwc>$t</kwc><def></def><sym>){</sym><br />
<def></def>      <kwc>$this</kwc><def></def><sym>-&gt;</sym><def>q</def> <sym>=</sym> <def></def><kwc>$q</kwc><def></def><sym>;</sym><br />
<def></def>      <kwc>$this</kwc><def></def><sym>-&gt;</sym><def>r</def> <sym>=</sym> <def></def><kwc>$r</kwc><def></def><sym>;</sym><br />
<def></def>      <kwc>$this</kwc><def></def><sym>-&gt;</sym><def>s</def> <sym>=</sym> <def></def><kwc>$s</kwc><def></def><sym>;</sym><br />
<def></def>      <kwc>$this</kwc><def></def><sym>-&gt;</sym><def>t</def> <sym>=</sym> <def></def><kwc>$t</kwc><def></def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>function</kwa> <def></def><kwd>Unity</kwd><def></def><sym>(){</sym><br />
<def></def>      <kwa>return</kwa> <def>new</def> <kwd>Transformation</kwd><def></def><sym>(</sym><def></def><str>&quot;1&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;0&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;0&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;1&quot;</str><def></def><sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>function</kwa> <def></def><kwd>Zero</kwd><def></def><sym>(){</sym><br />
<def></def>      <kwa>return</kwa> <def>new</def> <kwd>Transformation</kwd><def></def><sym>(</sym><def></def><str>&quot;0&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;0&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;0&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;0&quot;</str><def></def><sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
<br />
   <kwa>function</kwa> <def></def><kwd>Compose</kwd><def></def><sym>(</sym><def></def><kwc>$a</kwc><def></def><sym>){</sym><br />
<def></def>      <kwc>$qq</kwc> <def></def><sym>=</sym> <def></def><kwa>bcmul</kwa><def></def><sym>(</sym><def></def><kwc>$this</kwc><def></def><sym>-&gt;</sym><def>q</def><sym>,</sym> <def></def><kwc>$a</kwc><def></def><sym>-&gt;</sym><def>q</def><sym>);</sym><br />
<def></def>      <kwc>$qrrt</kwc> <def></def><sym>=</sym> <def></def><kwa>bcadd</kwa><def></def><sym>(</sym><def></def><kwa>bcmul</kwa><def></def><sym>(</sym><def></def><kwc>$this</kwc><def></def><sym>-&gt;</sym><def>q</def><sym>,</sym> <def></def><kwc>$a</kwc><def></def><sym>-&gt;</sym><def>r</def><sym>),</sym> <def></def><kwa>bcmul</kwa><def></def><sym>(</sym><def></def><kwc>$this</kwc><def></def><sym>-&gt;</sym><def>r</def><sym>,</sym> <def></def><kwc>$a</kwc><def></def><sym>-&gt;</sym><def>t</def><sym>));</sym><br />
<def></def>      <kwc>$sqts</kwc> <def></def><sym>=</sym> <def></def><kwa>bcadd</kwa><def></def><sym>(</sym><def></def><kwa>bcmul</kwa><def></def><sym>(</sym><def></def><kwc>$this</kwc><def></def><sym>-&gt;</sym><def>s</def><sym>,</sym> <def></def><kwc>$a</kwc><def></def><sym>-&gt;</sym><def>q</def><sym>),</sym> <def></def><kwa>bcmul</kwa><def></def><sym>(</sym><def></def><kwc>$this</kwc><def></def><sym>-&gt;</sym><def>t</def><sym>,</sym> <def></def><kwc>$a</kwc><def></def><sym>-&gt;</sym><def>s</def><sym>));</sym><br />
<def></def>      <kwc>$srtt</kwc> <def></def><sym>=</sym> <def></def><kwa>bcadd</kwa><def></def><sym>(</sym><def></def><kwa>bcmul</kwa><def></def><sym>(</sym><def></def><kwc>$this</kwc><def></def><sym>-&gt;</sym><def>s</def><sym>,</sym> <def></def><kwc>$a</kwc><def></def><sym>-&gt;</sym><def>r</def><sym>),</sym> <def></def><kwa>bcmul</kwa><def></def><sym>(</sym><def></def><kwc>$this</kwc><def></def><sym>-&gt;</sym><def>t</def><sym>,</sym> <def></def><kwc>$a</kwc><def></def><sym>-&gt;</sym><def>t</def><sym>));</sym><br />
<def></def>      <kwa>return</kwa> <def>new</def> <kwd>Transformation</kwd><def></def><sym>(</sym><def></def><kwc>$qq</kwc><def></def><sym>,</sym> <def></def><kwc>$qrrt</kwc><def></def><sym>,</sym> <def></def><kwc>$sqts</kwc><def></def><sym>,</sym> <def></def><kwc>$srtt</kwc><def></def><sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>function Extract</kwa><def></def><sym>(</sym><def></def><kwc>$j</kwc><def></def><sym>){</sym><br />
<def></def>      <kwc>$bigj</kwc> <def></def><sym>=</sym> <def></def><kwa>strval</kwa><def></def><sym>(</sym><def></def><kwc>$j</kwc><def></def><sym>);</sym><br />
<def></def>      <kwc>$qjr</kwc> <def></def><sym>=</sym> <def></def><kwa>bcadd</kwa><def></def><sym>(</sym><def></def><kwa>bcmul</kwa><def></def><sym>(</sym><def></def><kwc>$this</kwc><def></def><sym>-&gt;</sym><def>q</def><sym>,</sym> <def></def><kwc>$bigj</kwc><def></def><sym>),</sym> <def></def><kwc>$this</kwc><def></def><sym>-&gt;</sym><def>r</def><sym>);</sym><br />
<def></def>      <kwc>$sjt</kwc> <def></def><sym>=</sym> <def></def><kwa>bcadd</kwa><def></def><sym>(</sym><def></def><kwa>bcmul</kwa><def></def><sym>(</sym><def></def><kwc>$this</kwc><def></def><sym>-&gt;</sym><def>s</def><sym>,</sym> <def></def><kwc>$bigj</kwc><def></def><sym>),</sym> <def></def><kwc>$this</kwc><def></def><sym>-&gt;</sym><def>t</def><sym>);</sym><br />
<def></def>      <kwc>$d</kwc> <def></def><sym>=</sym> <def></def><kwa>bcdiv</kwa><def></def><sym>(</sym><def></def><kwc>$qjr</kwc><def></def><sym>,</sym> <def></def><kwc>$sjt</kwc><def></def><sym>);</sym><br />
<def></def>      <kwa>return floor</kwa><def></def><sym>(</sym><def></def><kwc>$d</kwc><def></def><sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>function Next</kwa><def></def><sym>(){</sym><br />
<def></def>      <kwc>$this</kwc><def></def><sym>-&gt;</sym><def>k</def> <sym>=</sym> <def></def><kwc>$this</kwc><def></def><sym>-&gt;</sym><def>k</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>      <kwc>$this</kwc><def></def><sym>-&gt;</sym><def>q</def> <sym>=</sym> <def></def><kwa>strval</kwa><def></def><sym>(</sym><def></def><kwc>$this</kwc><def></def><sym>-&gt;</sym><def>k</def><sym>);</sym><br />
<def></def>      <kwc>$this</kwc><def></def><sym>-&gt;</sym><def>r</def> <sym>=</sym> <def></def><kwa>strval</kwa><def></def><sym>(</sym><def></def><num>4</num><def></def><sym>*</sym><def></def><kwc>$this</kwc><def></def><sym>-&gt;</sym><def>k</def> <sym>+</sym> <def></def><num>2</num><def></def><sym>);</sym><br />
<def></def>      <kwc>$this</kwc><def></def><sym>-&gt;</sym><def>s</def> <sym>=</sym> <def></def><str>&quot;0&quot;</str><def></def><sym>;</sym><br />
<def></def>      <kwc>$this</kwc><def></def><sym>-&gt;</sym><def>t</def> <sym>=</sym> <def></def><kwa>strval</kwa><def></def><sym>(</sym><def></def><num>2</num><def></def><sym>*</sym><def></def><kwc>$this</kwc><def></def><sym>-&gt;</sym><def>k</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>      <kwa>return</kwa> <def></def><kwc>$this</kwc><def></def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<br />
<br />
<kwa>class</kwa> <def>PiDigitStream</def> <sym>{</sym><br />
<def>   var</def> <kwc>$z</kwc><def></def><sym>,</sym> <def></def><kwc>$x</kwc><def></def><sym>,</sym> <def></def><kwc>$inverse</kwc><def></def><sym>;</sym><br />
<def></def><br />
   <kwa>function</kwa> <def></def><kwd>PiDigitStream</kwd><def></def><sym>(){</sym><br />
<def></def>      <kwc>$this</kwc><def></def><sym>-&gt;</sym><def>z</def> <sym>=</sym> <def>Transformation</def><sym>::</sym><def></def><kwd>Unity</kwd><def></def><sym>();</sym><br />
<def></def>      <kwc>$this</kwc><def></def><sym>-&gt;</sym><def>x</def> <sym>=</sym> <def>Transformation</def><sym>::</sym><def></def><kwd>Zero</kwd><def></def><sym>();</sym><br />
<def></def>      <kwc>$this</kwc><def></def><sym>-&gt;</sym><def>inverse</def> <sym>=</sym> <def>Transformation</def><sym>::</sym><def></def><kwd>Zero</kwd><def></def><sym>();</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>function</kwa> <def></def><kwd>Produce</kwd><def></def><sym>(</sym><def></def><kwc>$j</kwc><def></def><sym>){</sym><br />
<def></def>      <kwc>$i</kwc> <def></def><sym>=</sym> <def></def><kwc>$this</kwc><def></def><sym>-&gt;</sym><def>inverse</def><sym>;</sym><br />
<def></def>      <kwc>$i</kwc><def></def><sym>-&gt;</sym><def>q</def> <sym>=</sym> <def></def><str>&quot;10&quot;</str><def></def><sym>;</sym><br />
<def></def>      <kwc>$i</kwc><def></def><sym>-&gt;</sym><def>r</def> <sym>=</sym> <def></def><kwa>strval</kwa><def></def><sym>(-</sym><def></def><num>10</num><def></def><sym>*</sym><def></def><kwc>$j</kwc><def></def><sym>);</sym><br />
<def></def>      <kwc>$i</kwc><def></def><sym>-&gt;</sym><def>s</def> <sym>=</sym> <def></def><str>&quot;0&quot;</str><def></def><sym>;</sym><br />
<def></def>      <kwc>$i</kwc><def></def><sym>-&gt;</sym><def>t</def> <sym>=</sym> <def></def><str>&quot;1&quot;</str><def></def><sym>;</sym><br />
<def></def>      <kwa>return</kwa> <def></def><kwc>$i</kwc><def></def><sym>-&gt;</sym><def></def><kwd>Compose</kwd><def></def><sym>(</sym><def></def><kwc>$this</kwc><def></def><sym>-&gt;</sym><def>z</def><sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>function</kwa> <def></def><kwd>Consume</kwd><def></def><sym>(</sym><def></def><kwc>$a</kwc><def></def><sym>){</sym><br />
<def></def>      <kwa>return</kwa> <def></def><kwc>$this</kwc><def></def><sym>-&gt;</sym><def>z</def> <sym>-&gt;</sym><def></def><kwd>Compose</kwd><def></def><sym>(</sym><def></def><kwc>$a</kwc><def></def><sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>function</kwa> <def></def><kwd>Digit</kwd><def></def><sym>(){</sym><br />
<def></def>      <kwa>return</kwa> <def></def><kwc>$this</kwc><def></def><sym>-&gt;</sym><def>z</def> <sym>-&gt;</sym><def></def><kwa>Extract</kwa><def></def><sym>(</sym><def></def><num>3</num><def></def><sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>function</kwa> <def></def><kwd>IsSafe</kwd><def></def><sym>(</sym><def></def><kwc>$j</kwc><def></def><sym>){</sym><br />
<def></def>      <kwa>return</kwa> <def></def><kwc>$j</kwc> <def></def><sym>== (</sym><def></def><kwc>$this</kwc><def></def><sym>-&gt;</sym><def>z</def> <sym>-&gt;</sym><def></def><kwa>Extract</kwa><def></def><sym>(</sym><def></def><num>4</num><def></def><sym>));</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>function Next</kwa><def></def><sym>(){</sym><br />
<def></def>      <kwc>$y</kwc> <def></def><sym>=</sym> <def></def><kwc>$this</kwc><def></def><sym>-&gt;</sym><def></def><kwd>Digit</kwd><def></def><sym>();</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def></def><kwc>$this</kwc><def></def><sym>-&gt;</sym><def></def><kwd>IsSafe</kwd><def></def><sym>(</sym><def></def><kwc>$y</kwc><def></def><sym>)){</sym><br />
<def></def>         <kwc>$this</kwc><def></def><sym>-&gt;</sym><def>z</def> <sym>=</sym> <def></def><kwc>$this</kwc><def></def><sym>-&gt;</sym><def></def><kwd>Produce</kwd><def></def><sym>(</sym><def></def><kwc>$y</kwc><def></def><sym>);</sym><br />
<def></def>         <kwa>return</kwa> <def></def><kwc>$y</kwc><def></def><sym>;</sym><br />
<def></def>      <sym>}</sym> <def></def><kwa>else</kwa> <def></def><sym>{</sym><br />
<def></def>         <kwc>$this</kwc><def></def><sym>-&gt;</sym><def>z</def> <sym>=</sym> <def></def><kwc>$this</kwc><def></def><sym>-&gt;</sym><def></def><kwd>Consume</kwd><def></def><sym>(</sym><def></def><kwc>$this</kwc><def></def><sym>-&gt;</sym><def>x</def> <sym>-&gt;</sym><def></def><kwa>Next</kwa><def></def><sym>());</sym><br />
<def></def>         <kwa>return</kwa> <def></def><kwc>$this</kwc><def></def><sym>-&gt;</sym><def></def><kwa>Next</kwa><def></def><sym>();</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<br />
<kwc>$n</kwc> <def></def><sym>=</sym> <def></def><kwc>$argv</kwc><def></def><sym>[</sym><def></def><num>1</num><def></def><sym>];</sym><br />
<def></def><kwc>$i</kwc> <def></def><sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><kwc>$length</kwc> <def></def><sym>=</sym> <def></def><num>10</num><def></def><sym>;</sym><br />
<def></def><kwc>$pidigit</kwc> <def></def><sym>=</sym> <def>new PiDigitStream</def><sym>;</sym><br />
<def></def><br />
<kwa>while</kwa> <def></def><sym>(</sym><def></def><kwc>$n</kwc> <def></def><sym>&gt;</sym> <def></def><num>0</num><def></def><sym>){</sym><br />
<def></def>   <kwa>if</kwa> <def></def><sym>(</sym><def></def><kwc>$n</kwc> <def></def><sym>&lt;</sym> <def></def><kwc>$length</kwc><def></def><sym>){</sym><br />
<def></def>      <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwc>$j</kwc><def></def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def></def><kwc>$j</kwc><def></def><sym>&lt;</sym><def></def><kwc>$n</kwc><def></def><sym>;</sym> <def></def><kwc>$j</kwc><def></def><sym>++)</sym> <def></def><kwa>printf</kwa><def></def><sym>(</sym><def></def><str>&quot;%d&quot;</str><def></def><sym>,</sym><def></def><kwc>$pidigit</kwc><def></def><sym>-&gt;</sym><def></def><kwa>Next</kwa><def></def><sym>());</sym><br />
<def></def>      <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwc>$j</kwc><def></def><sym>=</sym><def></def><kwc>$n</kwc><def></def><sym>;</sym> <def></def><kwc>$j</kwc><def></def><sym>&lt;</sym><def></def><kwc>$length</kwc><def></def><sym>;</sym> <def></def><kwc>$j</kwc><def></def><sym>++)</sym>  <def></def><kwa>print</kwa> <def></def><str>&quot; &quot;</str><def></def><sym>;</sym><br />
<def></def>      <kwc>$i</kwc> <def></def><sym>+=</sym> <def></def><kwc>$n</kwc><def></def><sym>;</sym><br />
<def></def>   <sym>}</sym> <def></def><kwa>else</kwa> <def></def><sym>{</sym><br />
<def></def>      <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwc>$j</kwc><def></def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def></def><kwc>$j</kwc><def></def><sym>&lt;</sym><def></def><kwc>$length</kwc><def></def><sym>;</sym> <def></def><kwc>$j</kwc><def></def><sym>++)</sym> <def></def><kwa>printf</kwa><def></def><sym>(</sym><def></def><str>&quot;%d&quot;</str><def></def><sym>,</sym><def></def><kwc>$pidigit</kwc><def></def><sym>-&gt;</sym><def></def><kwa>Next</kwa><def></def><sym>());</sym><br />
<def></def>      <kwc>$i</kwc> <def></def><sym>+=</sym> <def></def><kwc>$length</kwc><def></def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def>   <kwa>print</kwa> <def></def><str>&quot;</str><esc>\t</esc><str>:$i</str><esc>\n</esc><str>&quot;</str><def></def><sym>;</sym><br />
<def></def>   <kwc>$n</kwc> <def></def><sym>-=</sym> <def></def><kwc>$length</kwc><def></def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def>?</def><sym>&gt;</sym><def></def><br />
</source>
