<source>
<def></def><com>(* binarytrees.mlton</com><br />
<com> *</com><br />
<com> * The Computer Language Shootout</com><br />
<com> * http://shootout.alioth.debian.org/</com><br />
<com> *</com><br />
<com> * Contributed by Troestler Christophe</com><br />
<com> * Ported to MLton/SML by sweeks@sweeks.com.</com><br />
<com> * Optimized and compressed by Vesa Karvonen.</com><br />
<com> * De-optimized by Isaac Gouy</com><br />
<com> *)</com><def></def><br />
<kwa>datatype</kwa> <def>'a tree</def> <sym>=</sym> <def>Nil</def> <sym>|</sym> <def>Node</def> <kwa>of</kwa> <def>'a tree</def> <sym>*</sym> <def>'a</def> <sym>*</sym> <def>'a tree</def><br />
<com>(* fun mk 0 i = Nil | mk d i = Node (mk (d-1) (i*2-1), i, mk (d-1) (i*2)) *)</com><def></def><br />
<kwa>fun</kwa> <def>mk</def> <num>0</num> <def>i</def> <sym>=</sym> <def>Node</def> <sym>(</sym><def>Nil</def><sym>,</sym> <def>i</def><sym>,</sym> <def>Nil</def><sym>) |</sym> <def>mk d i</def> <sym>=</sym> <def>Node</def> <sym>(</sym><def>mk</def> <sym>(</sym><def>d</def><sym>-</sym><def></def><num>1</num><def></def><sym>) (</sym><def>i</def><sym>*</sym><def></def><num>2</num><def></def><sym>-</sym><def></def><num>1</num><def></def><sym>),</sym> <def>i</def><sym>,</sym> <def>mk</def> <sym>(</sym><def>d</def><sym>-</sym><def></def><num>1</num><def></def><sym>) (</sym><def>i</def><sym>*</sym><def></def><num>2</num><def></def><sym>))</sym><br />
<def></def><kwa>fun</kwa> <def>chk Nil</def> <sym>=</sym> <def></def><num>0</num> <def></def><sym>|</sym> <def>chk</def> <sym>(</sym><def>Node</def> <sym>(</sym><def>l</def><sym>,</sym> <def>i</def><sym>,</sym> <def>r</def><sym>)) =</sym> <def>i</def> <sym>+</sym> <def>chk l</def> <sym>-</sym> <def>chk r</def><br />
<kwa>val</kwa> <def>n</def> <sym>=</sym> <def>valOf</def> <sym>(</sym><def></def><kwa>Int</kwa><def>.fromString</def> <sym>(</sym><def>hd</def> <sym>(</sym><def>CommandLine.arguments</def> <sym>())))</sym> <def></def><kwa>handle</kwa> <def>_</def> <sym>=&gt;</sym> <def></def><num>10</num><br />
<def></def><kwa>val</kwa> <def>min'</def> <sym>=</sym> <def></def><num>4</num><br />
<def></def><kwa>val</kwa> <def>max'</def> <sym>=</sym> <def></def><kwa>Int</kwa><def>.max</def> <sym>(</sym><def>min'</def> <sym>+</sym> <def></def><num>2</num><def></def><sym>,</sym> <def>n</def><sym>)</sym><br />
<def></def><kwa>val</kwa> <def>stretch'</def> <sym>=</sym> <def>max'</def> <sym>+</sym> <def></def><num>1</num><br />
<def></def><kwa>val</kwa> <def>i2s</def> <sym>=</sym> <def></def><kwa>String</kwa><def>.translate</def> <sym>(</sym><def></def><kwa>fn</kwa> <def>#</def><str>&quot;~&quot;</str><def></def> <sym>=&gt;</sym> <def></def><str>&quot;-&quot;</str><def></def> <sym>|</sym> <def>c</def> <sym>=&gt;</sym> <def>str c</def><sym>)</sym> <def></def><kwa>o Int</kwa><def>.toString</def><br />
<kwa>fun</kwa> <def>msg h d t</def> <sym>=</sym> <def>app print</def> <sym>[</sym><def>h</def><sym>,</sym> <def></def><kwa>Int</kwa><def>.toString d</def><sym>,</sym> <def></def><str>&quot;</str><esc>\t</esc> <str>check: &quot;</str><def></def><sym>,</sym> <def>i2s t</def><sym>,</sym> <def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>]</sym><br />
<def></def><kwa>val</kwa> <def></def><sym>() =</sym> <def>msg</def> <str>&quot;stretch tree of depth &quot;</str><def> stretch'</def> <sym>(</sym><def>chk</def> <sym>(</sym><def>mk stretch'</def> <num>0</num><def></def><sym>))</sym><br />
<def></def><kwa>val</kwa> <def>longLivedTree</def> <sym>=</sym> <def>mk max'</def> <num>0</num><br />
<def></def><kwa>fun</kwa> <def>loopDepths d</def> <sym>=</sym><br />
<def></def>    <kwa>if</kwa> <def>d</def> <sym>&gt;</sym> <def>max'</def> <kwa>then</kwa> <def></def><sym>()</sym><br />
<def></def>    <kwa>else let val</kwa> <def>n</def> <sym>=</sym> <def></def><kwa>Word</kwa><def>.toInt</def> <sym>(</sym><def></def><kwa>Word</kwa><def>.</def><sym>&lt;&lt; (</sym><def></def><num>0</num><def>w1</def><sym>,</sym> <def></def><kwa>Word</kwa><def>.fromInt</def> <sym>(</sym><def>max'</def><sym>-</sym><def>d</def><sym>+</sym><def>min'</def><sym>)))</sym><br />
<def></def>             <kwa>fun</kwa> <def>lp</def> <sym>(</sym><def>i</def><sym>,</sym> <def>c</def><sym>) =</sym> <def></def><kwa>if</kwa> <def>i</def><sym>=</sym><def>n</def> <kwa>then</kwa> <def>c</def><br />
                             <kwa>else</kwa> <def>lp</def> <sym>(</sym><def>i</def><sym>+</sym><def></def><num>1</num><def></def><sym>,</sym> <def>c</def> <sym>+</sym> <def>chk</def> <sym>(</sym><def>mk d i</def><sym>) +</sym> <def>chk</def> <sym>(</sym><def>mk d</def> <sym>(</sym><def>~i</def><sym>)))</sym><br />
<def></def>         <kwa>in</kwa> <def>msg</def> <sym>(</sym><def></def><kwa>Int</kwa><def>.toString</def> <sym>(</sym><def></def><num>2</num><def></def><sym>*</sym><def>n</def><sym>)</sym><def>^</def><str>&quot;</str><esc>\t</esc> <str>trees of depth &quot;</str><def></def><sym>)</sym> <def>d</def> <sym>(</sym><def>lp</def> <sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>))</sym><br />
<def></def>          <sym>;</sym> <def>loopDepths</def> <sym>(</sym><def>d</def> <sym>+</sym> <def></def><num>2</num><def></def><sym>)</sym> <def></def><kwa>end</kwa><br />
<def></def><kwa>val</kwa> <def></def><sym>() =</sym> <def>loopDepths min'</def><br />
<kwa>val</kwa> <def></def><sym>() =</sym> <def>msg</def> <str>&quot;long lived tree of depth &quot;</str><def> max'</def> <sym>(</sym><def>chk longLivedTree</def><sym>)</sym><def></def><br />
</source>
