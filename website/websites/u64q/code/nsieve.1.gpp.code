<span class="hl slc">// The Computer Language Shootout</span>
<span class="hl slc">// http://shootout.alioth.debian.org/</span>
<span class="hl slc">// Precedent C entry modified by bearophile for speed and size, 31 Jan 2006</span>
<span class="hl slc">// Converted to C++ by Paul Kitchin</span>

<span class="hl dir">#include &lt;iomanip&gt;</span>
<span class="hl dir">#include &lt;iostream&gt;</span>
<span class="hl dir">#include &lt;sstream&gt;</span>
<span class="hl dir">#include &lt;vector&gt;</span>

<span class="hl kwb">void</span> <span class="hl kwd">nsieve</span><span class="hl sym">(</span>std<span class="hl sym">::</span><span class="hl kwb">size_t</span> max<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwb">static</span> std<span class="hl sym">::</span>vector<span class="hl sym">&lt;</span> <span class="hl kwb">unsigned char</span> <span class="hl sym">&gt;</span> flags<span class="hl sym">;</span>
   flags<span class="hl sym">.</span><span class="hl kwd">assign</span><span class="hl sym">(</span>max<span class="hl sym">,</span> <span class="hl kwa">false</span><span class="hl sym">);</span>
   std<span class="hl sym">::</span><span class="hl kwb">size_t</span> count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span>std<span class="hl sym">::</span><span class="hl kwb">size_t</span> value <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">;</span> value <span class="hl sym">&lt;</span> max<span class="hl sym">; ++</span>value<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">if</span> <span class="hl sym">(!</span>flags<span class="hl sym">[</span>value<span class="hl sym">])</span>
      <span class="hl sym">{</span>
         <span class="hl sym">++</span>count<span class="hl sym">;</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span>std<span class="hl sym">::</span><span class="hl kwb">size_t</span> multiple <span class="hl sym">=</span> value <span class="hl sym">*</span> <span class="hl num">2</span><span class="hl sym">;</span> multiple <span class="hl sym">&lt;</span> max<span class="hl sym">;</span> multiple <span class="hl sym">+=</span> value<span class="hl sym">)</span>
         <span class="hl sym">{</span>
            flags<span class="hl sym">[</span>multiple<span class="hl sym">] =</span> <span class="hl kwa">true</span><span class="hl sym">;</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
   std<span class="hl sym">::</span>cout <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;Primes up to &quot;</span> <span class="hl sym">&lt;&lt;</span> std<span class="hl sym">::</span><span class="hl kwd">setw</span><span class="hl sym">(</span><span class="hl num">8</span><span class="hl sym">) &lt;&lt;</span> max <span class="hl sym">&lt;&lt;</span> <span class="hl str">' '</span> <span class="hl sym">&lt;&lt;</span> std<span class="hl sym">::</span><span class="hl kwd">setw</span><span class="hl sym">(</span><span class="hl num">8</span><span class="hl sym">) &lt;&lt;</span> count <span class="hl sym">&lt;&lt;</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">* *</span> argv<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span>argc <span class="hl sym">!=</span> <span class="hl num">2</span><span class="hl sym">)</span>
   <span class="hl sym">{</span>
      std<span class="hl sym">::</span>cerr <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;usage: &quot;</span> <span class="hl sym">&lt;&lt;</span> argv<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] &lt;&lt;</span> <span class="hl str">&quot; &lt;n&gt;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
      <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>
   <span class="hl kwb">unsigned int</span> count<span class="hl sym">;</span>
   <span class="hl sym">{</span>
      std<span class="hl sym">::</span>istringstream <span class="hl kwd">convertor</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]);</span>
      <span class="hl kwa">if</span> <span class="hl sym">(!(</span>convertor <span class="hl sym">&gt;&gt;</span> count<span class="hl sym">) || !</span>convertor<span class="hl sym">.</span><span class="hl kwd">eof</span><span class="hl sym">())</span>
      <span class="hl sym">{</span>
         std<span class="hl sym">::</span>cerr <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;usage: &quot;</span> <span class="hl sym">&lt;&lt;</span> argv<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] &lt;&lt;</span> <span class="hl str">&quot; &lt;n&gt;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
         std<span class="hl sym">::</span>cerr <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">n must be an integer</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
         <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span>std<span class="hl sym">::</span><span class="hl kwb">size_t</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">3</span><span class="hl sym">; ++</span>i<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwd">nsieve</span><span class="hl sym">(</span><span class="hl num">10000</span> <span class="hl sym">&lt;&lt; (</span>count <span class="hl sym">-</span> i<span class="hl sym">));</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>
