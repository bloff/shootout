<source>
<def></def><com>/**</com><br />
<com> * The Computer Language Benchmarks Game</com><br />
<com> * Based on the CAL Open Quark version</com><br />
<com> * Contributed by Magnus Byne.</com><br />
<com> */</com><def></def><br />
<kwa>module</kwa> <def>Fannkuch</def><sym>;</sym><br />
<def></def><br />
<kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Core</def><sym>.</sym><def>Prelude</def> <kwa>using</kwa><br />
<def></def>    <kwa>typeConstructor</kwa> <def></def><sym>=</sym> <def>Int</def><sym>,</sym> <def>String</def><sym>;</sym><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>eager</def><sym>,</sym> <def>max</def><sym>,</sym> <def>seq</def><sym>,</sym> <def>stringToInt</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Core</def><sym>.</sym><def>Debug</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>show</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Collections</def><sym>.</sym><def>List</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>head</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><kwa>import</kwa> <def>Cal</def><sym>.</sym><def>IO</def><sym>.</sym><def>Console</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>print</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<kwa>data foreign unsafe import jvm</kwa> <def></def><str>&quot;int[]&quot;</str><def> JIntArray</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;newArray&quot;</str><def> newArray</def> <sym>::</sym> <def>Int</def> <sym>-&gt;</sym> <def>JIntArray</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;subscriptArray&quot;</str><def> subscript</def> <sym>::</sym> <def>JIntArray</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;updateArray&quot;</str><def> update</def> <sym>::</sym> <def>JIntArray</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def><sym>;</sym><br />
<def></def><br />
<com>/** creates an initial sequence, 0 1 2 3 ...*/</com><def><br />
initSeq</def> <sym>::</sym> <def>Int</def> <sym>-&gt;</sym> <def>JIntArray</def><sym>;</sym><br />
<def>initSeq</def> <sym>!</sym><def>size</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa><br />
<def>        go</def> <sym>::</sym> <def>JIntArray</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>JIntArray</def><sym>;</sym><br />
<def>        go</def> <sym>!</sym><def>array</def> <sym>!</sym><def>i</def> <sym>=</sym><br />
<def></def>            <kwa>if</kwa> <def>i</def> <sym>==</sym> <def>size</def> <kwa>then</kwa><br />
<def>                array</def><br />
            <kwa>else</kwa><br />
<def>                update array i i</def><br />
                <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                go array</def> <sym>(</sym><def>i</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>            <sym>;</sym><br />
<def></def>    <kwa>in</kwa><br />
<def>        go</def> <sym>(</sym><def>newArray size</def><sym>)</sym> <def></def><num>0</num><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<com>/** prints a sequence*/</com><def><br />
printSeq</def> <sym>::</sym> <def>JIntArray</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt; ();</sym><br />
<def>printSeq</def> <sym>!</sym><def>array</def> <sym>!</sym><def>start</def> <sym>!</sym><def>end</def> <sym>=</sym><br />
<def></def>    <kwa>if</kwa> <def>start</def> <sym>==</sym> <def>end</def> <kwa>then</kwa><br />
<def>        print</def> <str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><br />
    <kwa>else</kwa><br />
<def>        print</def> <sym>(</sym><def>show</def> <sym>(</sym><def>array</def> <sym>`</sym><def>subscript</def><sym>`</sym> <def>start</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>))</sym><br />
<def></def>        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>        printSeq array</def> <sym>(</sym><def>start</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>)</sym> <def>end</def><br />
    <sym>;</sym><br />
<def></def><br />
<com>/** rotate elements of array left by one place,</com><br />
<com> * e.g. 1 2 3 -&gt; 2 3 1.</com><br />
<com> */</com><def><br />
rotateL</def> <sym>::</sym> <def>JIntArray</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def><sym>;</sym><br />
<def>rotateL</def> <sym>!</sym><def>array</def> <sym>!</sym><def>length</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa><br />
<def>        elem0</def> <sym>::</sym> <def>Int</def><sym>;</sym><br />
<def>        elem0</def> <sym>=</sym> <def>eager $ array</def> <sym>`</sym><def>subscript</def><sym>`</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def><br />
        go</def> <sym>::</sym> <def>Int</def> <sym>-&gt; ();</sym><br />
<def>        go</def> <sym>!</sym><def>i</def> <sym>=</sym><br />
<def></def>            <kwa>if</kwa> <def>i</def> <sym>==</sym> <def>length</def> <kwa>then</kwa><br />
<def></def>                <sym>()</sym><br />
<def></def>            <kwa>else</kwa><br />
<def>                update array i</def> <sym>(</sym><def>array</def> <sym>`</sym><def>subscript</def><sym>` (</sym><def>i</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>))</sym><br />
<def></def>                <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                go</def> <sym>(</sym><def>i</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>            <sym>;</sym><br />
<def></def>    <kwa>in</kwa><br />
<def>        elem0</def><br />
        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>        go</def> <num>0</num><br />
<def></def>        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>        update array length elem0</def><br />
    <sym>;</sym><br />
<def></def><br />
<com>/** copy an array*/</com><def><br />
copyArray</def> <sym>::</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>JIntArray</def> <sym>-&gt;</sym> <def>JIntArray</def> <sym>-&gt;</sym> <def>JIntArray</def><sym>;</sym><br />
<def>copyArray</def> <sym>!</sym><def>start</def> <sym>!</sym><def>end</def> <sym>!</sym><def>to</def> <sym>!</sym><def>from</def> <sym>=</sym><br />
<def></def>    <kwa>if</kwa> <def>start</def> <sym>==</sym> <def>end</def> <kwa>then</kwa><br />
<def>        to</def><br />
    <kwa>else</kwa><br />
<def>        update to start</def> <sym>(</sym><def>from</def> <sym>`</sym><def>subscript</def><sym>`</sym> <def>start</def><sym>)</sym><br />
<def></def>        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>        copyArray</def> <sym>(</sym><def>start</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>)</sym> <def>end to from</def><br />
    <sym>;</sym><br />
<def></def><br />
<com>/** reverse elements of an array between start and end (inclusive)*/</com><def><br />
reverse</def> <sym>::</sym> <def>JIntArray</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt; ();</sym><br />
<def>reverse</def> <sym>!</sym><def>array</def> <sym>!</sym><def>start</def> <sym>!</sym><def>end</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa><br />
<def>        swapHelper</def> <sym>::</sym> <def>JIntArray</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def><sym>;</sym><br />
<def>        swapHelper</def> <sym>!</sym><def>array</def> <sym>!</sym><def>i</def> <sym>!</sym><def>j</def> <sym>!</sym><def>iValue</def> <sym>!</sym><def>jValue</def> <sym>=</sym><br />
<def>            update array i jValue</def><br />
            <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>            update array j iValue</def><br />
            <sym>;</sym><br />
<def></def>    <kwa>in</kwa><br />
<def></def>        <kwa>if</kwa> <def>start</def> <sym>&lt;</sym> <def>end</def> <kwa>then</kwa><br />
<def>            swapHelper<br />
                array<br />
                start<br />
                end</def><br />
                <sym>(</sym><def>array</def> <sym>`</sym><def>subscript</def><sym>`</sym> <def>start</def><sym>)</sym><br />
<def></def>                <sym>(</sym><def>array</def> <sym>`</sym><def>subscript</def><sym>`</sym> <def>end</def><sym>)</sym><br />
<def></def>            <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>            reverse array</def> <sym>(</sym><def>start</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>) (</sym><def>end</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>        <kwa>else</kwa><br />
<def></def>            <sym>()</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<com>/** count the 'flips' until 1 is at the head of the array*/</com><def><br />
countFlips</def> <sym>::</sym> <def>JIntArray</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def><sym>;</sym><br />
<def>countFlips</def> <sym>!</sym><def>array</def> <sym>!</sym><def>count</def> <sym>!</sym><def>m</def> <sym>=</sym><br />
<def></def>    <kwa>if</kwa> <def>subscript array</def> <num>0</num> <def></def><sym>==</sym> <def></def><num>0</num> <def></def><kwa>then</kwa><br />
<def>        count</def><br />
    <kwa>else</kwa><br />
<def>        reverse array</def> <num>0</num> <def></def><sym>(</sym><def>array</def> <sym>`</sym><def>subscript</def><sym>`</sym> <def></def><num>0</num><def></def><sym>)</sym><br />
<def></def>        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>        countFlips array</def> <sym>(</sym><def>count</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>)</sym> <def>m</def><br />
    <sym>;</sym><br />
<def></def><br />
<com>/** set counts for controlling next permutations*/</com><def><br />
setCount</def> <sym>::</sym> <def>JIntArray</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def><sym>;</sym><br />
<def>setCount</def> <sym>!</sym><def>array</def> <sym>!</sym><def>r</def> <sym>=</sym><br />
<def></def>    <kwa>if</kwa> <def>r</def> <sym>==</sym> <def></def><num>1</num> <def></def><kwa>then</kwa><br />
<def>        r</def><br />
    <kwa>else</kwa><br />
<def>        update array</def> <sym>(</sym><def>r</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>)</sym> <def>r</def><br />
        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>        setCount array</def> <sym>(</sym><def>r</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<com>/** compute the next permuation - return -1 if there are no more*/</com><def><br />
nextPerm</def> <sym>::</sym> <def>JIntArray</def> <sym>-&gt;</sym> <def>JIntArray</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def><sym>;</sym><br />
<def>nextPerm</def> <sym>!</sym><def>perm</def> <sym>!</sym><def>counts</def> <sym>!</sym><def>r</def> <sym>!</sym><def>n</def> <sym>=</sym><br />
<def></def>    <kwa>if</kwa> <def>r</def> <sym>==</sym> <def>n</def> <kwa>then</kwa><br />
<def></def>        <sym>-</sym><def></def><num>1</num><br />
<def></def>    <kwa>else</kwa><br />
<def>        rotateL perm r</def><br />
        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def></def>        <sym>(</sym><br />
<def></def>            <kwa>if</kwa> <def>update counts r</def> <sym>(</sym><def>counts</def> <sym>`</sym><def>subscript</def><sym>`</sym> <def>r</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>) &gt;</sym> <def></def><num>0</num> <def></def><kwa>then</kwa><br />
<def>                r</def><br />
            <kwa>else</kwa><br />
<def>                nextPerm perm counts</def> <sym>(</sym><def>r</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>)</sym> <def>n</def><br />
        <sym>)</sym><br />
<def></def>    <sym>;</sym><br />
<def><br />
fannkuch</def> <sym>::</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def><sym>;</sym><br />
<def>fannkuch</def> <sym>!</sym><def>n</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa><br />
<def>        loop</def> <sym>::</sym><br />
<def>            JIntArray</def> <sym>-&gt;</sym> <def>JIntArray</def> <sym>-&gt;</sym> <def>JIntArray</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def><sym>;</sym><br />
<def>        loop</def> <sym>!</sym><def>perm</def> <sym>!</sym><def>permCopy</def> <sym>!</sym><def>count</def> <sym>!</sym><def>r</def> <sym>!</sym><def>maxFlips</def> <sym>!</sym><def>dispCount</def> <sym>=</sym><br />
<def></def>            <kwa>if</kwa> <def>r</def> <sym>== -</sym><def></def><num>1</num> <def></def><kwa>then</kwa><br />
<def>                maxFlips</def><br />
            <kwa>else</kwa><br />
<def>                copyArray</def> <num>0</num> <def>n permCopy perm</def><br />
                <sym>`</sym><def>seq</def><sym>`</sym><br />
<def></def>                <sym>(</sym><br />
<def></def>                    <slc>//we want to display the first 30 sequences</slc><br />
<def></def>                    <kwa>if</kwa> <def>dispCount</def> <sym>&lt; (</sym><def></def><num>30</num> <def></def><sym>::</sym> <def>Int</def><sym>)</sym> <def></def><kwa>then</kwa><br />
<def>                        printSeq perm</def> <num>0</num> <def>n</def><br />
                        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                        loop<br />
                            perm<br />
                            permCopy<br />
                            count</def><br />
                            <sym>(</sym><def>nextPerm perm count</def> <sym>(</sym><def>setCount count r</def><sym>)</sym> <def>n</def><sym>)</sym><br />
<def></def>                            <sym>(</sym><def>max maxFlips</def> <sym>(</sym><def>countFlips permCopy</def> <num>0</num> <def></def><sym>(</sym><def>n</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>)))</sym><br />
<def></def>                            <sym>(</sym><def>dispCount</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>                    <kwa>else</kwa><br />
<def><br />
                        loop<br />
                            perm<br />
                            permCopy<br />
                            count</def><br />
                            <sym>(</sym><def>nextPerm perm count</def> <sym>(</sym><def>setCount count r</def><sym>)</sym> <def>n</def><sym>)</sym><br />
<def></def>                            <sym>(</sym><def>max maxFlips</def> <sym>(</sym><def>countFlips permCopy</def> <num>0</num> <def></def><sym>(</sym><def>n</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>)))</sym><br />
<def>                            dispCount</def><br />
                <sym>)</sym><br />
<def></def>            <sym>;</sym><br />
<def></def>    <kwa>in</kwa><br />
<def>        loop</def> <sym>(</sym><def>initSeq n</def><sym>) (</sym><def>newArray n</def><sym>) (</sym><def>newArray n</def><sym>)</sym> <def>n</def> <num>0 0</num><br />
<def></def>    <sym>;</sym><br />
<def><br />
main</def> <sym>:: [</sym><def>String</def><sym>] -&gt; ();</sym><br />
<def></def><kwa>public</kwa> <def>main</def> <sym>!</sym><def>args</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa><br />
<def>        n</def> <sym>=</sym> <def>eager $ stringToInt</def> <sym>(</sym><def>head args</def><sym>);</sym><br />
<def></def>    <kwa>in</kwa><br />
<def>        print</def><br />
            <sym>(</sym><br />
<def></def>                <str>&quot;Pfannkuchen(&quot;</str><def></def><br />
                <sym>++</sym> <def>show n</def><br />
                <sym>++</sym> <def></def><str>&quot;) = &quot;</str><def></def><br />
                <sym>++</sym> <def>show</def> <sym>(</sym><def>fannkuch n</def><sym>)</sym><br />
<def></def>                <sym>++</sym> <def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><br />
            <sym>)</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
</source>
