<source>
<def></def><com>/* The Computer Language Benchmarks Game</com><br />
<com>   http://shootout.alioth.debian.org</com><br />
<com>   contributed by Arek Bochinski</com><br />
<com>*/</com><def></def><br />
<br />
<br />
<dir>#define _GNU_SOURCE 1</dir><br />
<def></def><dir>#include &lt;stdio.h&gt;</dir><br />
<def></def><dir>#include &lt;string.h&gt;</dir><br />
<def></def><dir>#include &lt;limits.h&gt;</dir><br />
<def></def><br />
<slc>//conversion table</slc><br />
<def></def><kwb>static const char</kwb> <def>FtoCOMP</def><sym>[</sym><def></def><num>128</num><def></def><sym>] = {</sym><br />
<def></def>   <num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><br />
<def></def>   <num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><br />
<def></def>   <num>0</num><def></def><sym>,</sym><def></def><str>'T'</str><def></def><sym>,</sym><def></def><str>'V'</str><def></def><sym>,</sym><def></def><str>'G'</str><def></def><sym>,</sym><def></def><str>'H'</str><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><str>'C'</str><def></def><sym>,</sym><def></def><str>'D'</str><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><str>'M'</str><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><str>'K'</str><def></def><sym>,</sym><def></def><str>'N'</str><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><br />
<def></def>   <num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><str>'Y'</str><def></def><sym>,</sym><def></def><str>'S'</str><def></def><sym>,</sym><def></def><str>'A'</str><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><str>'B'</str><def></def><sym>,</sym><def></def><str>'W'</str><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><str>'R'</str><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><br />
<def></def>   <num>0</num><def></def><sym>,</sym><def></def><str>'T'</str><def></def><sym>,</sym><def></def><str>'V'</str><def></def><sym>,</sym><def></def><str>'G'</str><def></def><sym>,</sym><def></def><str>'H'</str><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><str>'C'</str><def></def><sym>,</sym><def></def><str>'D'</str><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><str>'M'</str><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><str>'K'</str><def></def><sym>,</sym><def></def><str>'N'</str><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><br />
<def></def>   <num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><str>'Y'</str><def></def><sym>,</sym><def></def><str>'S'</str><def></def><sym>,</sym><def></def><str>'A'</str><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><str>'B'</str><def></def><sym>,</sym><def></def><str>'W'</str><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><str>'R'</str><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><br />
<def></def><sym>};</sym><br />
<def></def><br />
<kwb>int</kwb> <def></def><kwd>main</kwd> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>argc</def><sym>,</sym> <def></def><kwb>char</kwb> <def></def><sym>*</sym> <def>argv</def><sym>[]) {</sym><br />
<def></def>    <kwb>char</kwb> <def>buffer</def><sym>[</sym><def></def><num>10240</num><def></def><sym>];</sym><br />
<def></def>    <kwb>int</kwb> <def>itotal</def><sym>=</sym><def></def><num>0</num><def></def><sym>,</sym><def>forward</def><sym>=</sym><def></def><num>0</num><def></def><sym>,</sym><def>end</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>    <kwb>char</kwb> <def>peek</def><sym>;</sym><br />
<def></def>    <slc>//print header</slc><br />
<def></def>   <kwd>printf</kwd><def></def><sym>(</sym><def></def><str>&quot;%s&quot;</str><def></def><sym>,</sym><def></def><kwd>fgets_unlocked</kwd><def></def><sym>(</sym><def>buffer</def><sym>,</sym><def></def><num>61</num><def></def><sym>,</sym><def>stdin</def><sym>));</sym><br />
<def></def>   <kwa>while</kwa><def></def><sym>(</sym><def></def><kwd>fgets_unlocked</kwd><def></def><sym>(</sym><def>buffer</def><sym>+</sym><def>itotal</def><sym>,</sym><def></def><num>10239</num><def></def><sym>,</sym><def>stdin</def><sym>))</sym><br />
<def></def>   <sym>{</sym><br />
<def></def>      <slc>//if header is next</slc><br />
<def></def>      <kwa>if</kwa><def></def><sym>((</sym><def>peek</def><sym>=</sym><def></def><kwd>fgetc_unlocked</kwd><def></def><sym>(</sym><def>stdin</def><sym>))==</sym><def></def><str>'&gt;'</str><def></def><sym>)</sym><br />
<def></def>      <sym>{</sym><br />
<def></def>         <slc>//get total</slc><br />
<def>         itotal</def><sym>+=</sym><def></def><kwd>strlen</kwd><def></def><sym>(</sym><def>buffer</def><sym>+</sym><def>itotal</def><sym>);</sym><br />
<def></def>         <slc>//set the reverse indexes</slc><br />
<def>         forward</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym><br />
<def>         end</def><sym>=</sym><def>itotal</def><sym>-</sym><def></def><num>2</num><def></def><sym>;</sym><br />
<def></def>         <slc>//reverse the buffer and complement it</slc><br />
<def></def>         <kwa>while</kwa><def></def><sym>(</sym><def>forward</def><sym>&lt;</sym><def>end</def><sym>)</sym><br />
<def></def>         <sym>{</sym><br />
<def></def>            <kwa>if</kwa><def></def><sym>(</sym><def>buffer</def><sym>[</sym><def>forward</def><sym>]==</sym><def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>)++</sym><def>forward</def><sym>;</sym><br />
<def></def>            <kwa>if</kwa><def></def><sym>(</sym><def>buffer</def><sym>[</sym><def>end</def><sym>]==</sym><def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>)--</sym><def>end</def><sym>;</sym><br />
<def>            buffer</def><sym>[</sym><def>forward</def><sym>]</sym><def>^</def><sym>=</sym><def>buffer</def><sym>[</sym><def>end</def><sym>];</sym><br />
<def>            buffer</def><sym>[</sym><def>end</def><sym>]</sym><def>^</def><sym>=</sym><def>buffer</def><sym>[</sym><def>forward</def><sym>];</sym><br />
<def>            buffer</def><sym>[</sym><def>forward</def><sym>]</sym><def>^</def><sym>=</sym><def>buffer</def><sym>[</sym><def>end</def><sym>];</sym><br />
<def>            buffer</def><sym>[</sym><def>end</def><sym>]=</sym><def>FtoCOMP</def><sym>[</sym><def>buffer</def><sym>[</sym><def>end</def><sym>]];</sym><br />
<def>            buffer</def><sym>[</sym><def>forward</def><sym>]=</sym><def>FtoCOMP</def><sym>[</sym><def>buffer</def><sym>[</sym><def>forward</def><sym>]];</sym><br />
<def></def>            <sym>++</sym><def>forward</def><sym>;</sym><br />
<def></def>            <sym>--</sym><def>end</def><sym>;</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>         <slc>//print it out</slc><br />
<def></def>         <kwd>puts</kwd><def></def><sym>(</sym><def>buffer</def><sym>);</sym><br />
<def></def>         <slc>//print out the next header if there</slc><br />
<def></def>         <kwd>printf</kwd><def></def><sym>(</sym><def></def><str>&quot;%c%s&quot;</str><def></def><sym>,</sym><def></def><str>'&gt;'</str><def></def><sym>,</sym><def></def><kwd>fgets_unlocked</kwd><def></def><sym>(</sym><def>buffer</def><sym>,</sym><def></def><num>10239</num><def></def><sym>,</sym><def>stdin</def><sym>));</sym><br />
<def></def>         <slc>//reset total</slc><br />
<def>         itotal</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>      <kwa>else</kwa><def></def><sym>{</sym><br />
<def></def>         <slc>//header is not next, plase character back into stdin</slc><br />
<def></def>         <kwd>ungetc</kwd><def></def><sym>(</sym><def>peek</def><sym>,</sym><def>stdin</def><sym>);</sym><br />
<def></def>         <slc>//sum up the total lenght of characters in the buffer</slc><br />
<def>         itotal</def><sym>+=</sym><def></def><kwd>strlen</kwd><def></def><sym>(</sym><def>buffer</def><sym>+</sym><def>itotal</def><sym>);</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def></def>   <slc>//print last sequence at end of stdin</slc><br />
<def>   itotal</def><sym>+=</sym><def></def><kwd>strlen</kwd><def></def><sym>(</sym><def>buffer</def><sym>+</sym><def>itotal</def><sym>);</sym><br />
<def></def>   <slc>//set the reverse indexes</slc><br />
<def>   forward</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym><br />
<def>   end</def><sym>=</sym><def>itotal</def><sym>-</sym><def></def><num>2</num><def></def><sym>;</sym><br />
<def></def>   <slc>//reverse the buffer and complement it</slc><br />
<def></def>   <kwa>while</kwa><def></def><sym>(</sym><def>forward</def><sym>&lt;</sym><def>end</def><sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def></def>      <kwa>if</kwa><def></def><sym>(</sym><def>buffer</def><sym>[</sym><def>forward</def><sym>]==</sym><def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>)++</sym><def>forward</def><sym>;</sym><br />
<def></def>      <kwa>if</kwa><def></def><sym>(</sym><def>buffer</def><sym>[</sym><def>end</def><sym>]==</sym><def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>)--</sym><def>end</def><sym>;</sym><br />
<def>      buffer</def><sym>[</sym><def>forward</def><sym>]</sym><def>^</def><sym>=</sym><def>buffer</def><sym>[</sym><def>end</def><sym>];</sym><br />
<def>      buffer</def><sym>[</sym><def>end</def><sym>]</sym><def>^</def><sym>=</sym><def>buffer</def><sym>[</sym><def>forward</def><sym>];</sym><br />
<def>      buffer</def><sym>[</sym><def>forward</def><sym>]</sym><def>^</def><sym>=</sym><def>buffer</def><sym>[</sym><def>end</def><sym>];</sym><br />
<def>      buffer</def><sym>[</sym><def>end</def><sym>]=</sym><def>FtoCOMP</def><sym>[</sym><def>buffer</def><sym>[</sym><def>end</def><sym>]];</sym><br />
<def>      buffer</def><sym>[</sym><def>forward</def><sym>]=</sym><def>FtoCOMP</def><sym>[</sym><def>buffer</def><sym>[</sym><def>forward</def><sym>]];</sym><br />
<def></def>      <sym>++</sym><def>forward</def><sym>;</sym><br />
<def></def>      <sym>--</sym><def>end</def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def>   <kwd>puts</kwd><def></def><sym>(</sym><def>buffer</def><sym>);</sym><br />
<def></def>   <kwa>return</kwa> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
