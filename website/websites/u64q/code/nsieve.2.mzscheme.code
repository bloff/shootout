<span class="hl slc">;;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;</span>
<span class="hl slc">;; contributed Dima Dorfman, 2004</span>
<span class="hl slc">;; modified by Brent Fulgham</span>
<span class="hl slc">;; modified by Matthew Flatt</span>

#lang scheme<span class="hl sym">/</span>base
<span class="hl sym">(</span>require scheme<span class="hl sym">/</span>cmdline<span class="hl sym">)</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>nsieve m<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>a <span class="hl sym">(</span>make<span class="hl sym">-</span>vector m #t<span class="hl sym">)))</span>
    <span class="hl sym">(</span>let loop <span class="hl sym">((</span>i <span class="hl num">2</span><span class="hl sym">) (</span>n <span class="hl num">0</span><span class="hl sym">))</span>
      <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(&lt;</span> i m<span class="hl sym">)</span>
          <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>vector<span class="hl sym">-</span>ref a i<span class="hl sym">)</span>
              <span class="hl sym">(</span>begin
                <span class="hl sym">(</span>let clear <span class="hl sym">((</span>j <span class="hl sym">(+</span> i i<span class="hl sym">)))</span>
                  <span class="hl sym">(</span>when <span class="hl sym">(&lt;</span> j m<span class="hl sym">)</span>
                    <span class="hl sym">(</span>vector<span class="hl sym">-</span><span class="hl kwa">set</span><span class="hl sym">!</span> a j #f<span class="hl sym">)</span>
                    <span class="hl sym">(</span>clear <span class="hl sym">(+</span> j i<span class="hl sym">))))</span>
                <span class="hl sym">(</span>loop <span class="hl sym">(+</span> <span class="hl num">1</span> i<span class="hl sym">) (+</span> <span class="hl num">1</span> n<span class="hl sym">)))</span>
              <span class="hl sym">(</span>loop <span class="hl sym">(+</span> <span class="hl num">1</span> i<span class="hl sym">)</span> n<span class="hl sym">))</span>
          n<span class="hl sym">))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>string<span class="hl sym">-</span>pad s len<span class="hl sym">)</span>
  <span class="hl sym">(</span>string<span class="hl sym">-</span><span class="hl kwa">append</span> <span class="hl sym">(</span>make<span class="hl sym">-</span>string <span class="hl sym">(-</span> len <span class="hl sym">(</span>string<span class="hl sym">-</span><span class="hl kwa">length</span> s<span class="hl sym">))</span> #\space<span class="hl sym">)</span>
                 s<span class="hl sym">))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>test n<span class="hl sym">)</span>
  <span class="hl sym">(</span>let<span class="hl sym">* ((</span>m <span class="hl sym">(* (</span><span class="hl kwa">expt</span> <span class="hl num">2</span> n<span class="hl sym">)</span> <span class="hl num">10000</span><span class="hl sym">))</span>
         <span class="hl sym">(</span>count <span class="hl sym">(</span>nsieve m<span class="hl sym">)))</span>
    <span class="hl sym">(</span>printf <span class="hl str">&quot;Primes up to ~a ~a</span><span class="hl esc">\</span><span class="hl str">n&quot;</span>
            <span class="hl sym">(</span>string<span class="hl sym">-</span>pad <span class="hl sym">(</span>number<span class="hl sym">-&gt;</span>string m<span class="hl sym">)</span> <span class="hl num">8</span><span class="hl sym">)</span>
            <span class="hl sym">(</span>string<span class="hl sym">-</span>pad <span class="hl sym">(</span>number<span class="hl sym">-&gt;</span>string count<span class="hl sym">)</span> <span class="hl num">8</span><span class="hl sym">))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>main n<span class="hl sym">)</span>
  <span class="hl sym">(</span>when <span class="hl sym">(&gt;=</span> n <span class="hl num">0</span><span class="hl sym">) (</span>test n<span class="hl sym">))</span>
  <span class="hl sym">(</span>when <span class="hl sym">(&gt;=</span> n <span class="hl num">1</span><span class="hl sym">) (</span>test <span class="hl sym">(-</span> n <span class="hl num">1</span><span class="hl sym">)))</span>
  <span class="hl sym">(</span>when <span class="hl sym">(&gt;=</span> n <span class="hl num">2</span><span class="hl sym">) (</span>test <span class="hl sym">(-</span> n <span class="hl num">2</span><span class="hl sym">))))</span>

<span class="hl sym">(</span><span class="hl kwa">command</span><span class="hl sym">-</span><span class="hl kwa">line</span> #<span class="hl sym">:</span>args <span class="hl sym">(</span>n<span class="hl sym">) (</span>main <span class="hl sym">(</span>string<span class="hl sym">-&gt;</span>number n<span class="hl sym">)))</span>
