<span class="hl com">{-# OPTIONS -fbang-patterns -funbox-strict-fields #-}</span>
<span class="hl slc">--</span>
<span class="hl slc">-- The Computer Language Shootout</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Contributed by Don Stewart</span>
<span class="hl slc">--</span>

import System
import Data.Bits
import Text.Printf

<span class="hl slc">--</span>
<span class="hl slc">-- an artificially strict tree.</span>
<span class="hl slc">--</span>
<span class="hl slc">-- normally you would ensure the branches are lazy, but this benchmark</span>
<span class="hl slc">-- requires strict allocation.</span>
<span class="hl slc">--</span>
data Tree <span class="hl sym">=</span> Nil <span class="hl sym">|</span> Node <span class="hl sym">!</span>Int <span class="hl sym">!</span>Tree <span class="hl sym">!</span>Tree

minN <span class="hl sym">=</span> <span class="hl num">4</span>

io s n t <span class="hl sym">=</span> printf <span class="hl str">&quot;%s of depth %d\t check: %d\n&quot;</span> s n t

main <span class="hl sym">=</span> do
    n <span class="hl sym">&lt;-</span> getArgs <span class="hl sym">&gt;&gt;=</span> readIO . head
    let maxN     <span class="hl sym">=</span> max <span class="hl sym">(</span>minN <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">)</span> n
        stretchN <span class="hl sym">=</span> maxN <span class="hl sym">+</span> <span class="hl num">1</span>

    <span class="hl slc">-- stretch memory tree</span>
    let c <span class="hl sym">=</span> check <span class="hl sym">(</span>make <span class="hl num">0</span> stretchN<span class="hl sym">)</span>
    io <span class="hl str">&quot;stretch tree&quot;</span> stretchN c

    <span class="hl slc">-- allocate a long lived tree</span>
    let <span class="hl sym">!</span>long    <span class="hl sym">=</span> make <span class="hl num">0</span> maxN

    <span class="hl slc">-- allocate, walk, and deallocate many bottom-up binary trees</span>
    let vs <span class="hl sym">=</span> depth minN maxN
    mapM_ <span class="hl sym">(</span>\<span class="hl sym">((</span>m<span class="hl sym">,</span>d<span class="hl sym">,</span>i<span class="hl sym">)) -&gt;</span> io <span class="hl sym">(</span>show m <span class="hl sym">++</span> <span class="hl str">&quot;\t trees&quot;</span><span class="hl sym">)</span> d i<span class="hl sym">)</span> vs

    <span class="hl slc">-- confirm the the long-lived binary tree still exists</span>
    io <span class="hl str">&quot;long lived tree&quot;</span> maxN <span class="hl sym">(</span>check long<span class="hl sym">)</span>

<span class="hl slc">-- generate many trees</span>
depth <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt; [(</span>Int<span class="hl sym">,</span>Int<span class="hl sym">,</span>Int<span class="hl sym">)]</span>
depth d m
    <span class="hl sym">|</span> d <span class="hl sym">&lt;=</span> m    <span class="hl sym">= (</span><span class="hl num">2</span><span class="hl sym">*</span>n<span class="hl sym">,</span>d<span class="hl sym">,</span>sumT d n <span class="hl num">0</span><span class="hl sym">) :</span> depth <span class="hl sym">(</span>d<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">)</span> m
    <span class="hl sym">|</span> otherwise <span class="hl sym">= []</span>
  where n <span class="hl sym">=</span> <span class="hl num">1</span> `shiftL` <span class="hl sym">(</span>m <span class="hl sym">-</span> d <span class="hl sym">+</span> minN<span class="hl sym">)</span>

<span class="hl slc">-- allocate and check lots of trees</span>
sumT <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int
sumT d <span class="hl num">0</span> t <span class="hl sym">=</span> t
sumT  d i t <span class="hl sym">=</span> sumT d <span class="hl sym">(</span>i<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">) (</span>t <span class="hl sym">+</span> a <span class="hl sym">+</span> b<span class="hl sym">)</span>
  where a <span class="hl sym">=</span> check <span class="hl sym">(</span>make i    d<span class="hl sym">)</span>
        b <span class="hl sym">=</span> check <span class="hl sym">(</span>make <span class="hl sym">(-</span>i<span class="hl sym">)</span> d<span class="hl sym">)</span>

<span class="hl slc">-- traverse the tree, counting up the nodes</span>
check <span class="hl sym">::</span> Tree <span class="hl sym">-&gt;</span> Int
check Nil          <span class="hl sym">=</span> <span class="hl num">0</span>
check <span class="hl sym">(</span>Node i l r<span class="hl sym">) =</span> i <span class="hl sym">+</span> check l <span class="hl sym">-</span> check r

<span class="hl slc">-- build a tree</span>
make <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Tree
make i <span class="hl num">0</span> <span class="hl sym">=</span> Node i Nil Nil
make i d <span class="hl sym">=</span> Node i <span class="hl sym">(</span>make <span class="hl sym">(</span>i2<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span> d2<span class="hl sym">) (</span>make i2 d2<span class="hl sym">)</span>
  where i2 <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">*</span>i<span class="hl sym">;</span> d2 <span class="hl sym">=</span> d<span class="hl sym">-</span><span class="hl num">1</span>
