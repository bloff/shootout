<source>
<def></def><slc>//  The Computer Language Shootout</slc><br />
<def></def><slc>//  http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>//  contributed by Greg Buchholz</slc><br />
<def></def><slc>//</slc><br />
<def></def><slc>//  compile with:  -O3 -msse2 -lm</slc><br />
<def></def><br />
<dir>#include&lt;math.h&gt;</dir><br />
<def></def><dir>#include&lt;stdio.h&gt;</dir><br />
<def></def><br />
<kwc>typedef</kwc> <def></def><kwb>double</kwb> <def>v2df</def> <kwd>__attribute__</kwd> <def></def><sym>((</sym><def></def><kwd>vector_size</kwd> <def></def><sym>(</sym><def></def><num>16</num><def></def><sym>)));</sym><br />
<def><br />
v2df</def> <kwd>make_vec</kwd><def></def><sym>(</sym><def></def><kwb>double</kwb> <def>a</def><sym>,</sym> <def></def><kwb>double</kwb> <def>b</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def>    v2df v</def><sym>;</sym><br />
<def></def>    <kwb>double</kwb> <def></def><sym>*</sym><def>tmp</def><sym>;</sym><br />
<def>    tmp</def> <sym>= (</sym><def></def><kwb>double</kwb> <def></def><sym>*)&amp;</sym><def>v</def><sym>; *(</sym><def>tmp</def><sym>) =</sym> <def>a</def><sym>; *(</sym><def>tmp</def><sym>+</sym><def></def><num>1</num><def></def><sym>) =</sym> <def>b</def><sym>;</sym><br />
<def></def>    <kwa>return</kwa> <def>v</def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>double</kwb> <def></def><kwd>sum_vec</kwd><def></def><sym>(</sym><def>v2df x</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>    <kwb>double</kwb> <def></def><sym>*</sym><def>tmp</def> <sym>= (</sym><def></def><kwb>double</kwb> <def></def><sym>*)&amp;</sym><def>x</def><sym>;</sym><br />
<def></def>    <kwa>return</kwa> <def></def><sym>*(</sym><def>tmp</def><sym>) + *(</sym><def>tmp</def><sym>+</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>int</kwb> <def></def><kwd>main</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>argc</def><sym>,</sym> <def></def><kwb>char</kwb><def></def><sym>*</sym> <def>argv</def><sym>[])</sym><br />
<def></def><sym>{</sym><br />
<def></def>    <kwb>double</kwb>  <def>twoThrd</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>sqrts</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>Flint</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>Cookson</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>    v2df    Harmonic</def><sym>,</sym> <def>zeta</def><sym>,</sym> <def>poly</def><sym>,</sym> <def>alt</def><sym>,</sym> <def>Gregory</def><sym>;</sym><br />
<def>    v2df    zero</def><sym>,</sym> <def>one</def><sym>,</sym> <def>two</def><sym>,</sym> <def>init</def><sym>,</sym> <def>m_one</def><sym>,</sym> <def>kv</def><sym>,</sym> <def>av</def><sym>;</sym><br />
<def></def><br />
    <kwb>double</kwb>  <def>k</def><sym>,</sym> <def>k3</def><sym>,</sym> <def>s</def><sym>,</sym> <def>c</def><sym>;</sym><br />
<def></def>    <kwb>int</kwb> <def>n</def><sym>;</sym>  <def>n</def> <sym>=</sym> <def></def><kwd>atoi</kwd><def></def><sym>(</sym><def>argv</def><sym>[</sym><def></def><num>1</num><def></def><sym>]);</sym><br />
<def><br />
    zero</def>  <sym>=</sym> <def></def><kwd>make_vec</kwd><def></def><sym>(</sym> <def></def><num>0.0</num><def></def><sym>,</sym>  <def></def><num>0.0</num><def></def><sym>);</sym>  <def>one</def>   <sym>=</sym> <def></def><kwd>make_vec</kwd><def></def><sym>(</sym> <def></def><num>1.0</num><def></def><sym>,</sym>  <def></def><num>1.0</num><def></def><sym>);</sym><br />
<def>    two</def>   <sym>=</sym> <def></def><kwd>make_vec</kwd><def></def><sym>(</sym> <def></def><num>2.0</num><def></def><sym>,</sym>  <def></def><num>2.0</num><def></def><sym>);</sym>  <def>m_one</def> <sym>=</sym> <def></def><kwd>make_vec</kwd><def></def><sym>(-</sym><def></def><num>1.0</num><def></def><sym>, -</sym><def></def><num>1.0</num><def></def><sym>);</sym><br />
<def>    init</def>  <sym>=</sym> <def></def><kwd>make_vec</kwd><def></def><sym>(</sym> <def></def><num>1.0</num><def></def><sym>,</sym>  <def></def><num>2.0</num><def></def><sym>);</sym>  <def>av</def>    <sym>=</sym> <def></def><kwd>make_vec</kwd><def></def><sym>(</sym> <def></def><num>1.0</num><def></def><sym>, -</sym><def></def><num>1.0</num><def></def><sym>);</sym><br />
<def><br />
    Harmonic</def> <sym>=</sym> <def>zeta</def> <sym>=</sym> <def>poly</def> <sym>=</sym> <def>alt</def> <sym>=</sym> <def>Gregory</def> <sym>=</sym> <def>zero</def><sym>;</sym><br />
<def></def><br />
    <kwa>for</kwa> <def></def><sym>(</sym><def>k</def><sym>=</sym><def></def><num>1</num><def></def><sym>;</sym> <def>k</def><sym>&lt;=</sym><def>n</def><sym>;</sym> <def>k</def><sym>++)</sym><br />
<def></def>    <sym>{</sym><br />
<def>        twoThrd</def> <sym>+=</sym> <def></def><kwd>pow</kwd><def></def><sym>(</sym><def></def><num>2.0</num><def></def><sym>/</sym><def></def><num>3.0</num><def></def><sym>,</sym> <def>k</def><sym>-</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def>        sqrts</def>   <sym>+=</sym> <def></def><num>1.0</num><def></def><sym>/</sym><def></def><kwd>sqrt</kwd><def></def><sym>(</sym><def>k</def><sym>);</sym><br />
<def>              k3</def> <sym>=</sym> <def>k</def><sym>*</sym><def>k</def><sym>*</sym><def>k</def><sym>;</sym><br />
<def>              s</def>  <sym>=</sym> <def></def><kwd>sin</kwd><def></def><sym>(</sym><def>k</def><sym>);</sym> <def>c</def> <sym>=</sym> <def></def><kwd>cos</kwd><def></def><sym>(</sym><def>k</def><sym>);</sym><br />
<def>        Flint</def>   <sym>+=</sym> <def></def><num>1.0</num><def></def><sym>/(</sym><def>k3</def> <sym>*</sym> <def>s</def><sym>*</sym><def>s</def><sym>);</sym><br />
<def>        Cookson</def> <sym>+=</sym> <def></def><num>1.0</num><def></def><sym>/(</sym><def>k3</def> <sym>*</sym> <def>c</def><sym>*</sym><def>c</def><sym>);</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <kwa>for</kwa> <def></def><sym>(</sym><def>kv</def><sym>=</sym><def>init</def><sym>; *(</sym><def></def><kwb>double</kwb> <def></def><sym>*)(&amp;</sym><def>kv</def><sym>)&lt;=</sym><def>n</def><sym>;</sym> <def>kv</def><sym>+=</sym><def>two</def><sym>)</sym><br />
<def></def>    <sym>{</sym><br />
<def>        poly</def>    <sym>+=</sym> <def>one</def> <sym>/(</sym><def>kv</def><sym>*(</sym><def>kv</def><sym>+</sym><def>one</def><sym>));</sym><br />
<def>        Harmonic</def><sym>+=</sym> <def>one</def> <sym>/</sym> <def>kv</def><sym>;</sym><br />
<def>        zeta</def>    <sym>+=</sym> <def>one</def> <sym>/(</sym><def>kv</def><sym>*</sym><def>kv</def><sym>);</sym><br />
<def>        alt</def>     <sym>+=</sym>  <def>av</def> <sym>/</sym> <def>kv</def><sym>;</sym><br />
<def>        Gregory</def> <sym>+=</sym>  <def>av</def> <sym>/(</sym><def>two</def><sym>*</sym><def>kv</def> <sym>-</sym> <def>one</def><sym>);</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
<dir>#define psum(name,num) printf(</dir><dstr>&quot;%.9f</dstr><esc>\t</esc><dstr>%s</dstr><esc>\n</esc><dstr>&quot;</dstr><dir>,num,name)</dir><br />
<def></def>    <kwd>psum</kwd><def></def><sym>(</sym><def></def><str>&quot;(2/3)^k&quot;</str><def></def><sym>,</sym>           <def>twoThrd</def><sym>);</sym> <def></def><kwd>psum</kwd><def></def><sym>(</sym><def></def><str>&quot;k^-0.5&quot;</str><def></def><sym>,</sym>      <def>sqrts</def><sym>);</sym><br />
<def></def>    <kwd>psum</kwd><def></def><sym>(</sym><def></def><str>&quot;1/k(k+1)&quot;</str><def></def><sym>,</sym>    <def></def><kwd>sum_vec</kwd><def></def><sym>(</sym><def>poly</def><sym>));</sym> <def></def><kwd>psum</kwd><def></def><sym>(</sym><def></def><str>&quot;Flint Hills&quot;</str><def></def><sym>,</sym> <def>Flint</def><sym>);</sym><br />
<def></def>    <kwd>psum</kwd><def></def><sym>(</sym><def></def><str>&quot;Cookson Hills&quot;</str><def></def><sym>,</sym>     <def>Cookson</def><sym>);</sym> <def></def><kwd>psum</kwd><def></def><sym>(</sym><def></def><str>&quot;Harmonic&quot;</str><def></def><sym>,</sym> <def></def><kwd>sum_vec</kwd><def></def><sym>(</sym><def>Harmonic</def><sym>));</sym><br />
<def></def>    <kwd>psum</kwd><def></def><sym>(</sym><def></def><str>&quot;Riemann Zeta&quot;</str><def></def><sym>,</sym><def></def><kwd>sum_vec</kwd><def></def><sym>(</sym><def>zeta</def><sym>));</sym> <def></def><kwd>psum</kwd><def></def><sym>(</sym><def></def><str>&quot;Alternating Harmonic&quot;</str><def></def><sym>,</sym><def></def><kwd>sum_vec</kwd><def></def><sym>(</sym><def>alt</def><sym>));</sym><br />
<def></def>    <kwd>psum</kwd><def></def><sym>(</sym><def></def><str>&quot;Gregory&quot;</str><def></def><sym>,</sym>  <def></def><kwd>sum_vec</kwd><def></def><sym>(</sym><def>Gregory</def><sym>));</sym><br />
<def></def><br />
    <kwa>return</kwa> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
