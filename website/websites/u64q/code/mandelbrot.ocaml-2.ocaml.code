<source>
<def></def><com>(*								-*tuareg-*-</com><br />
<com> * The Great Computer Language Shootout</com><br />
<com> * http://shootout.alioth.debian.org/</com><br />
<com> *</com><br />
<com> * Contributed by Christophe TROESTLER</com><br />
<com> * Enhanced by Christian Szegedy &lt;szegedy@t-online.de&gt;</com><br />
<com> *             Yaron Minsky &lt;yminsky-guest&gt;</com><br />
<com> * Modified by Brian Hurt &lt;bhurt@spnz.org&gt;</com><br />
<com> *)</com><def></def><br />
<br />
<kwa>let</kwa> <def>niter</def> <sym>=</sym> <def></def><num>50</num><br />
<def></def><kwa>let</kwa> <def>limit</def> <sym>=</sym> <def></def><num>2</num><def></def><sym>.</sym><br />
<def></def><br />
<kwa>let</kwa> <def>limit2</def> <sym>=</sym> <def>limit</def> <sym>*.</sym> <def>limit</def><br />
<br />
<kwa>type</kwa> <def>complex</def> <sym>= {</sym> <def></def><kwa>mutable</kwa> <def>r</def><sym>:</sym> <def></def><kwb>float</kwb><def></def><sym>;</sym> <def></def><kwa>mutable</kwa> <def>i</def><sym>:</sym> <def></def><kwb>float</kwb> <def></def><sym>}</sym><br />
<def></def><br />
<kwa>let</kwa> <def>add_bit0 c</def> <sym>=</sym><br />
<def></def>  <kwa>let rec</kwa> <def>loop i zr zi c</def> <sym>=</sym><br />
<def></def>	<kwa>if</kwa> <def>i</def> <sym>&gt;=</sym> <def>niter</def> <kwa>then</kwa><br />
<def></def>      <num>1</num><br />
<def></def>	<kwa>else if</kwa> <def></def><sym>(</sym><def>zr</def> <sym>*.</sym> <def>zr</def> <sym>+.</sym> <def>zi</def> <sym>*.</sym> <def>zi</def><sym>) &gt;</sym> <def>limit2</def> <kwa>then</kwa><br />
<def></def>      <num>0</num><br />
<def></def>	<kwa>else</kwa> <def>loop</def> <sym>(</sym><def>i</def><sym>+</sym><def></def><num>1</num><def></def><sym>) (</sym><def>zr</def> <sym>*.</sym> <def>zr</def> <sym>-.</sym> <def>zi</def> <sym>*.</sym> <def>zi</def> <sym>+.</sym> <def>c</def><sym>.</sym><def>r</def><sym>) (</sym><def></def><num>2</num><def></def><sym>. *.</sym> <def>zr</def> <sym>*.</sym> <def>zi</def> <sym>+.</sym> <def>c</def><sym>.</sym><def>i</def><sym>)</sym> <def>c</def><br />
  <kwa>in</kwa><br />
<def>  loop</def> <num>0 0</num><def></def><sym>.</sym> <def></def><num>0</num><def></def><sym>.</sym> <def>c</def><br />
<br />
<kwa>let</kwa> <def></def><sym>() =</sym><br />
<def></def>  <kwa>let</kwa> <def>w</def> <sym>=</sym> <def>int_of_string</def><sym>(</sym><def></def><kwc>Array</kwc><def></def><sym>.</sym><def>get</def> <kwc>Sys</kwc><def></def><sym>.</sym><def>argv</def> <num>1</num><def></def><sym>)</sym> <def></def><kwa>in</kwa><br />
<def></def>  <kwa>let</kwa> <def>h</def> <sym>=</sym> <def>w</def> <kwa>in</kwa><br />
<def></def>  <kwa>let</kwa> <def>fw</def> <sym>=</sym> <def></def><kwb>float</kwb> <def>w</def><br />
  <kwa>and</kwa> <def>fh</def> <sym>=</sym> <def></def><kwb>float</kwb> <def>h</def> <kwa>in</kwa><br />
<def></def>  <kwc>Printf</kwc><def></def><sym>.</sym><def>printf</def> <str>&quot;P4</str><esc>\n</esc><str>%i %i</str><esc>\n</esc><str>&quot;</str><def> w h</def><sym>;</sym><br />
<def></def>  <kwa>let rec</kwa> <def>yloop c y</def> <sym>=</sym><br />
<def></def>    <kwa>if</kwa> <def>y</def> <sym>&gt;=</sym> <def>h</def> <kwa>then</kwa><br />
<def></def>      <sym>()</sym><br />
<def></def>    <kwa>else</kwa><br />
<def></def>      <kwa>let rec</kwa> <def>xloop c x byte b</def> <sym>=</sym><br />
<def></def>        <kwa>if</kwa> <def>x</def> <sym>&gt;=</sym> <def>w</def> <kwa>then</kwa><br />
<def></def>          <kwa>if</kwa> <def>b</def> <sym>&gt;</sym> <def></def><num>1</num> <def></def><kwa>then</kwa><br />
<def>            output_byte stdout</def> <sym>(</sym><def>byte</def> <kwa>lsl</kwa> <def></def><sym>(</sym><def></def><num>9</num> <def></def><sym>-</sym> <def>b</def><sym>))</sym><br />
<def></def>          <kwa>else</kwa><br />
<def></def>            <sym>()</sym><br />
<def></def>        <kwa>else</kwa><br />
<def></def>          <kwa>let</kwa> <def></def><sym>() =</sym> <def>c</def><sym>.</sym><def>r</def> <sym>&lt;-</sym> <def></def><num>2</num><def></def><sym>. *.</sym> <def></def><kwb>float</kwb> <def>x</def> <sym>/.</sym> <def>fw</def> <sym>-.</sym> <def></def><num>1.5</num> <def></def><kwa>in</kwa><br />
<def></def>          <kwa>let</kwa> <def>byte</def> <sym>= (</sym><def>byte</def> <kwa>lsl</kwa> <def></def><num>1</num><def></def><sym>)</sym> <def></def><kwa>lor</kwa> <def></def><sym>(</sym><def>add_bit0 c</def><sym>)</sym> <def></def><kwa>in</kwa><br />
<def></def>          <kwa>if</kwa> <def></def><sym>(</sym><def>b</def> <sym>&lt;</sym> <def></def><num>8</num><def></def><sym>)</sym> <def></def><kwa>then</kwa><br />
<def>            xloop c</def> <sym>(</sym><def>x</def><sym>+</sym><def></def><num>1</num><def></def><sym>)</sym> <def>byte</def> <sym>(</sym><def>b</def><sym>+</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>          <kwa>else</kwa><br />
<def></def>            <kwa>let</kwa> <def></def><sym>() =</sym> <def>output_byte stdout byte</def> <kwa>in</kwa><br />
<def>            xloop c</def> <sym>(</sym><def>x</def><sym>+</sym><def></def><num>1</num><def></def><sym>)</sym> <def></def><num>0 1</num><br />
<def></def>      <kwa>in</kwa><br />
<def>      c</def><sym>.</sym><def>i</def> <sym>&lt;-</sym> <def></def><num>2</num><def></def><sym>. *.</sym> <def></def><kwb>float</kwb> <def>y</def> <sym>/.</sym> <def>fh</def> <sym>-.</sym> <def></def><num>1</num><def></def><sym>.;</sym><br />
<def>      xloop c</def> <num>0 0 1</num><def></def><sym>;</sym><br />
<def>      yloop c</def> <sym>(</sym><def>y</def><sym>+</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>  <kwa>in</kwa><br />
<def>  yloop</def> <sym>{</sym><def>r</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>.;</sym> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>.}</sym> <def></def><num>0</num><br />
<def></def><br />
</source>
