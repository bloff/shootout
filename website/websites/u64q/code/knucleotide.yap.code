<source>
<def></def><slc>% ----------------------------------------------------------------------</slc><br />
<def></def><slc>% The Computer Language Benchmarks Game</slc><br />
<def></def><slc>% http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>%</slc><br />
<def></def><slc>% contributed by Anthony Borla</slc><br />
<def></def><slc>% modified to run with YAP by Glendon Holst</slc><br />
<def></def><slc>% ----------------------------------------------------------------------</slc><br />
<def></def><br />
<sym>:-</sym> <def>yap_flag</def><sym>(</sym><def>unknown</def><sym>,</sym><def>error</def><sym>).</sym><br />
<def></def><br />
<sym>:-</sym> <def>use_module</def><sym>(</sym><def>library</def><sym>(</sym><def>readutil</def><sym>)).</sym><br />
<def></def><sym>:-</sym> <def>use_module</def><sym>(</sym><def>library</def><sym>(</sym><def>lists</def><sym>)).</sym><br />
<def></def><sym>:-</sym> <def>use_module</def><sym>(</sym><def>library</def><sym>(</sym><def>assoc</def><sym>)).</sym><br />
<def></def><br />
<sym>:-</sym> <def>initialization</def><sym>(</sym><def>main</def><sym>).</sym><br />
<def><br />
main</def> <sym>:-</sym><br />
<def></def>   <kwb>current_input</kwb><def></def><sym>(</sym><def>Cin</def><sym>),</sym><br />
<def>   load_sequence</def><sym>(</sym><def>Cin</def><sym>,</sym> <def>Seq</def><sym>),</sym><br />
<def><br />
   FragmentLengths</def> <sym>= [</sym><def></def><num>1</num><def></def><sym>,</sym> <def></def><num>2</num><def></def><sym>],</sym><br />
<def>   forall</def><sym>(</sym><def>member</def><sym>(</sym><def>E</def><sym>,</sym> <def>FragmentLengths</def><sym>), (</sym><def>print_frequencies</def><sym>(</sym><def>Seq</def><sym>,</sym> <def>E</def><sym>),</sym> <def></def><kwa>nl</kwa><def></def><sym>)),</sym><br />
<def><br />
   Fragments</def> <sym>= [</sym><def></def><str>&quot;GGT&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;GGTA&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;GGTATT&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;GGTATTTTAATT&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;GGTATTTTAATTTATAGT&quot;</str><def></def><sym>],</sym><br />
<def>   forall</def><sym>(</sym><def>member</def><sym>(</sym><def>E</def><sym>,</sym> <def>Fragments</def><sym>),</sym> <def>print_count</def><sym>(</sym><def>Seq</def><sym>,</sym> <def>E</def><sym>)).</sym><br />
<def></def><br />
<slc>% ------------------------------- %</slc><br />
<def><br />
print_frequencies</def><sym>(</sym><def>Seq</def><sym>,</sym> <def>KeyLen</def><sym>) :-</sym><br />
<def>   generate_counts</def><sym>(</sym><def>Seq</def><sym>,</sym> <def>KeyLen</def><sym>,</sym> <def>CountTable</def><sym>),</sym><br />
<def>   sum_counts_</def><sym>(</sym><def>CountTable</def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>SumCounts</def><sym>),</sym><br />
<def>   make_freq_table_</def><sym>(</sym><def>CountTable</def><sym>,</sym> <def>SumCounts</def><sym>, [],</sym> <def>FTable</def><sym>),</sym><br />
<def>   keysort</def><sym>(</sym><def>FTable</def><sym>,</sym> <def>SFTable</def><sym>),</sym> <def>reverse</def><sym>(</sym><def>SFTable</def><sym>,</sym> <def>FreqTable</def><sym>),</sym><br />
<def>   print_freq_table_</def><sym>(</sym><def>FreqTable</def><sym>).</sym><br />
<def></def><br />
<slc>% ------------- %</slc><br />
<def><br />
sum_counts_</def><sym>([</sym><def>_</def><sym>-</sym><def>C</def><sym>|</sym><def>T</def><sym>],</sym> <def>Acc</def><sym>,</sym> <def>Sum</def><sym>) :-</sym> <def>Acc1</def> <kwa>is</kwa> <def>Acc</def> <sym>+</sym> <def>C</def><sym>, !,</sym> <def>sum_counts_</def><sym>(</sym><def>T</def><sym>,</sym> <def>Acc1</def><sym>,</sym> <def>Sum</def><sym>).</sym><br />
<def>sum_counts_</def><sym>([],</sym> <def>Acc</def><sym>,</sym> <def>Acc</def><sym>).</sym><br />
<def></def><br />
<slc>% ------------- %</slc><br />
<def><br />
make_freq_table_</def><sym>([</sym><def>K</def><sym>-</sym><def>C</def><sym>|</sym><def>T</def><sym>],</sym> <def>SumCounts</def><sym>,</sym> <def>FTA</def><sym>,</sym> <def>FreqTable</def><sym>) :-</sym><br />
<def>   F</def> <kwa>is</kwa> <def>C</def> <sym>/</sym> <def>SumCounts</def> <sym>*</sym> <def></def><num>100.0</num><def></def><sym>,</sym> <def>append</def><sym>([</sym><def>F</def><sym>-</sym><def>K</def><sym>],</sym> <def>FTA</def><sym>,</sym> <def>FTA1</def><sym>),</sym><br />
<def></def>   <sym>!,</sym> <def>make_freq_table_</def><sym>(</sym><def>T</def><sym>,</sym> <def>SumCounts</def><sym>,</sym> <def>FTA1</def><sym>,</sym> <def>FreqTable</def><sym>).</sym><br />
<def>make_freq_table_</def><sym>([],</sym> <def>_</def><sym>,</sym> <def>FTA</def><sym>,</sym> <def>FTA</def><sym>).</sym><br />
<def></def><br />
<slc>% ------------- %</slc><br />
<def><br />
print_freq_table_</def><sym>([</sym><def>F</def><sym>-</sym><def>K</def><sym>|</sym><def>T</def><sym>]) :-</sym><br />
<def>   format</def><sym>(</sym><def></def><str>'~w ~3f</str><esc>\n</esc><str>'</str><def></def><sym>, [</sym><def>K</def><sym>,</sym> <def>F</def><sym>]),</sym><br />
<def></def>   <sym>!,</sym> <def>print_freq_table_</def><sym>(</sym><def>T</def><sym>).</sym><br />
<def>print_freq_table_</def><sym>([]).</sym><br />
<def></def><br />
<slc>% ------------------------------- %</slc><br />
<def><br />
print_count</def><sym>(</sym><def>Seq</def><sym>,</sym> <def>Fragment</def><sym>) :-</sym><br />
<def>   length</def><sym>(</sym><def>Fragment</def><sym>,</sym> <def>FragLen</def><sym>),</sym><br />
<def>   generate_counts</def><sym>(</sym><def>Seq</def><sym>,</sym> <def>FragLen</def><sym>,</sym> <def>CountTable</def><sym>),</sym><br />
<def></def>   <kwb>atom_codes</kwb><def></def><sym>(</sym><def>FragKey</def><sym>,</sym> <def>Fragment</def><sym>),</sym><br />
<def></def>   <sym>(</sym><br />
<def>      select</def><sym>(</sym><def>FragKey</def><sym>-</sym><def>Count</def><sym>,</sym> <def>CountTable</def><sym>,</sym> <def>_</def><sym>)</sym><br />
<def></def>   <sym>;</sym><br />
<def>      Count</def> <sym>=</sym> <def></def><num>0</num><br />
<def></def>   <sym>), !,</sym><br />
<def>   format</def><sym>(</sym><def></def><str>'~d</str><esc>\t</esc><str>~s</str><esc>\n</esc><str>'</str><def></def><sym>, [</sym><def>Count</def><sym>,</sym> <def>Fragment</def><sym>]).</sym><br />
<def></def><br />
<slc>% ------------- %</slc><br />
<def><br />
generate_counts</def><sym>(</sym><def>Seq</def><sym>,</sym> <def>Length</def><sym>,</sym> <def>CountTable</def><sym>) :-</sym><br />
<def>   length</def><sym>(</sym><def>Seq</def><sym>,</sym> <def>SeqLen</def><sym>),</sym> <def>Last</def> <kwa>is</kwa> <def>SeqLen</def> <sym>-</sym> <def>Length</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>,</sym><br />
<def>   make_count_table</def><sym>(</sym><def>Length</def><sym>,</sym> <def>Last</def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>CountTable</def><sym>).</sym><br />
<def></def><br />
<slc>% ------------------------------- %</slc><br />
<def><br />
make_count_table</def><sym>(</sym><def>Length</def><sym>,</sym> <def>Last</def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>CountTable</def><sym>) :-</sym><br />
<def>   empty_assoc</def><sym>(</sym><def>A</def><sym>),</sym><br />
<def>   mct_i_loop_</def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def>Length</def><sym>,</sym> <def>Last</def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>A</def><sym>,</sym> <def>ACT</def><sym>),</sym><br />
<def>   assoc_to_list</def><sym>(</sym><def>ACT</def><sym>,</sym> <def>CountTable</def><sym>).</sym><br />
<def></def><br />
<slc>% ------------- %</slc><br />
<def><br />
mct_i_loop_</def><sym>(</sym><def>I</def><sym>,</sym> <def>Length</def><sym>,</sym> <def>Last</def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>CTA</def><sym>,</sym> <def>CountTable</def><sym>) :-</sym><br />
<def>   I</def> <sym>&lt;</sym> <def>Length</def><sym>, !,</sym><br />
<def>   mct_j_loop_</def><sym>(</sym><def>Last</def><sym>,</sym> <def>Length</def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>CTA</def><sym>,</sym> <def>CTA1</def><sym>),</sym><br />
<def>   I1</def> <kwa>is</kwa> <def>I</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>, !,</sym><br />
<def>   Seq</def> <sym>= [</sym><def>_</def><sym>|</sym><def>Ss</def><sym>],</sym> <def>Last1</def> <kwa>is</kwa> <def>Last</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>,</sym><br />
<def>   mct_i_loop_</def><sym>(</sym><def>I1</def><sym>,</sym> <def>Length</def><sym>,</sym> <def>Last1</def><sym>,</sym> <def>Ss</def><sym>,</sym> <def>CTA1</def><sym>,</sym> <def>CountTable</def><sym>).</sym><br />
<def>mct_i_loop_</def><sym>(</sym><def>Length</def><sym>,</sym> <def>Length</def><sym>,</sym> <def>_</def><sym>,</sym> <def>_</def><sym>,</sym> <def>CTA</def><sym>,</sym> <def>CTA</def><sym>).</sym><br />
<def></def><br />
<br />
<slc>% ------------- %</slc><br />
<def><br />
mct_j_loop_</def><sym>(</sym><def>Last</def><sym>,</sym> <def>Length</def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>CTA</def><sym>,</sym> <def>CountTable</def><sym>) :-</sym><br />
<def>   Last</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>, !,</sym><br />
<def>   sub_list_</def><sym>(</sym><def>Seq</def><sym>,</sym> <def>Length</def><sym>,</sym> <def>KeyString</def><sym>,</sym> <def>Rest</def><sym>),</sym> <def></def><kwb>atom_codes</kwb><def></def><sym>(</sym><def>Key</def><sym>,</sym> <def>KeyString</def><sym>),</sym><br />
<def></def>   <sym>(</sym><br />
<def>      get_assoc</def><sym>(</sym><def>Key</def><sym>,</sym> <def>CTA</def><sym>,</sym> <def>Value</def><sym>) -&gt;</sym><br />
<def>      V1</def> <kwa>is</kwa> <def>Value</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>put_assoc</def><sym>(</sym><def>Key</def><sym>,</sym> <def>CTA</def><sym>,</sym> <def>V1</def><sym>,</sym> <def>CTA1</def><sym>)</sym><br />
<def></def>   <sym>;</sym><br />
<def>      put_assoc</def><sym>(</sym><def>Key</def><sym>,</sym> <def>CTA</def><sym>,</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>CTA1</def><sym>)</sym><br />
<def></def>   <sym>),</sym><br />
<def></def>   <sym>!,</sym> <def>Last1</def> <kwa>is</kwa> <def>Last</def> <sym>-</sym> <def>Length</def><sym>,</sym><br />
<def>   mct_j_loop_</def><sym>(</sym><def>Last1</def><sym>,</sym> <def>Length</def><sym>,</sym> <def>Rest</def><sym>,</sym> <def>CTA1</def><sym>,</sym> <def>CountTable</def><sym>).</sym><br />
<def>mct_j_loop_</def><sym>(</sym><def>Last</def><sym>,</sym> <def>_</def><sym>,</sym> <def>_</def><sym>,</sym> <def>CTA</def><sym>,</sym> <def>CTA</def><sym>) :-</sym> <def>Last</def> <sym>=&lt;</sym> <def></def><num>0</num><def></def><sym>, !.</sym><br />
<def></def><br />
<slc>% ------------------------------- %</slc><br />
<def><br />
load_sequence</def><sym>(</sym><def>S</def><sym>,</sym> <def>Seq</def><sym>) :-</sym> <def>load_sequence_</def><sym>(</sym><def>S</def><sym>,</sym> <def></def><kwa>fail</kwa><def></def><sym>,</sym> <def></def><str>&quot;&quot;</str><def></def><sym>,</sym> <def>Seq</def><sym>).</sym><br />
<def></def><br />
<slc>% ------------- %</slc><br />
<def><br />
load_sequence_</def><sym>(</sym><def>S</def><sym>,</sym> <def>Loading</def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>RetSeq</def><sym>) :-</sym><br />
<def></def>   <kwb>catch</kwb><def></def><sym>(</sym><def>read_line_to_codes</def><sym>(</sym><def>S</def><sym>,</sym> <def>L</def><sym>),</sym> <def>_</def><sym>,</sym> <def></def><kwa>fail</kwa><def></def><sym>),</sym> <def>is_list</def><sym>(</sym><def>L</def><sym>), !,</sym><br />
<def></def>   <sym>(</sym><br />
<def>      Loading</def> <sym>-&gt;</sym><br />
<def>      process_sequence</def><sym>(</sym><def>L</def><sym>,</sym> <def>S</def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>RetSeq</def><sym>)</sym><br />
<def></def>   <sym>;</sym><br />
<def>      ignore_sequence</def><sym>(</sym><def>L</def><sym>,</sym> <def>S</def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>RetSeq</def><sym>)</sym><br />
<def></def>   <sym>).</sym><br />
<def>load_sequence_</def><sym>(</sym><def>S</def><sym>,</sym> <def>_</def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>Seq</def><sym>).</sym><br />
<def></def><br />
<slc>% ------------- %</slc><br />
<def><br />
ignore_sequence</def><sym>([</sym><def></def><num>62</num><def></def><sym>,</sym><def></def><num>84</num><def></def><sym>,</sym><def></def><num>72</num><def></def><sym>,</sym><def></def><num>82</num><def></def><sym>,</sym><def></def><num>69</num><def></def><sym>,</sym><def></def><num>69</num><def></def><sym>|</sym><def>_</def><sym>],</sym> <def>S</def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>RetSeq</def><sym>) :- !,</sym><br />
<def>   load_sequence_</def><sym>(</sym><def>S</def><sym>,</sym> <def></def><kwa>true</kwa><def></def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>RetSeq</def><sym>).</sym><br />
<def>ignore_sequence</def><sym>(</sym><def>_</def><sym>,</sym> <def>S</def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>RetSeq</def><sym>) :- !,</sym><br />
<def>   load_sequence_</def><sym>(</sym><def>S</def><sym>,</sym> <def></def><kwa>fail</kwa><def></def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>RetSeq</def><sym>).</sym><br />
<def><br />
process_sequence</def><sym>([</sym><def></def><num>62</num><def></def><sym>|</sym><def>_</def><sym>],</sym> <def>_</def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>Seq</def><sym>) :- !.</sym><br />
<def>process_sequence</def><sym>([</sym><def></def><num>59</num><def></def><sym>|</sym><def>_</def><sym>],</sym> <def>S</def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>RetSeq</def><sym>) :- !,</sym><br />
<def>   load_sequence_</def><sym>(</sym><def>S</def><sym>,</sym> <def></def><kwa>true</kwa><def></def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>RetSeq</def><sym>).</sym><br />
<def><br />
process_sequence</def><sym>(</sym><def>L</def><sym>,</sym> <def>S</def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>RetSeq</def><sym>) :-</sym><br />
<def>   to_upper</def><sym>(</sym><def>L</def><sym>,</sym> <def>UL</def><sym>),</sym><br />
<def>   append</def><sym>(</sym><def>Seq</def><sym>,</sym> <def>UL</def><sym>,</sym> <def>NewSeq</def><sym>),</sym><br />
<def></def>   <sym>!,</sym> <def>load_sequence_</def><sym>(</sym><def>S</def><sym>,</sym> <def></def><kwa>true</kwa><def></def><sym>,</sym> <def>NewSeq</def><sym>,</sym> <def>RetSeq</def><sym>).</sym><br />
<def></def><br />
<slc>% ------------------------------- %</slc><br />
<def><br />
to_upper</def><sym>(</sym><def>L</def><sym>,</sym> <def>U</def><sym>) :-</sym> <def>to_upper_</def><sym>(</sym><def>L</def><sym>, [],</sym> <def>U</def><sym>).</sym><br />
<def></def><br />
<slc>% ------------- %</slc><br />
<def><br />
to_upper_</def><sym>([],</sym> <def>UA</def><sym>,</sym> <def>U</def><sym>) :-</sym> <def>reverse</def><sym>(</sym><def>UA</def><sym>,</sym> <def>U</def><sym>), !.</sym><br />
<def><br />
to_upper_</def><sym>([</sym><def>C</def><sym>|</sym><def>T</def><sym>],</sym> <def>UA</def><sym>,</sym> <def>U</def><sym>) :-</sym><br />
<def>   is_lower</def><sym>(</sym><def>C</def><sym>),</sym> <def>C1</def> <kwa>is</kwa> <def>C</def> <sym>-</sym> <def></def><num>32</num><def></def><sym>,</sym><br />
<def></def>   <sym>!,</sym> <def>to_upper_</def><sym>(</sym><def>T</def><sym>, [</sym><def>C1</def><sym>|</sym><def>UA</def><sym>],</sym> <def>U</def><sym>).</sym><br />
<def><br />
to_upper_</def><sym>([</sym><def>C</def><sym>|</sym><def>T</def><sym>],</sym> <def>UA</def><sym>,</sym> <def>U</def><sym>) :-</sym><br />
<def></def>   <sym>!,</sym> <def>to_upper_</def><sym>(</sym><def>T</def><sym>, [</sym><def>C</def><sym>|</sym><def>UA</def><sym>],</sym> <def>U</def><sym>).</sym><br />
<def></def><br />
<slc>% ------------- %</slc><br />
<def><br />
is_lower</def><sym>(</sym><def>C</def><sym>) :-</sym> <def>C</def> <sym>&gt;=</sym> <def></def><num>97</num><def></def><sym>,</sym> <def>C</def> <sym>=&lt;</sym> <def></def><num>122</num><def></def><sym>.</sym><br />
<def></def><br />
<slc>% ------------------------------- %</slc><br />
<def><br />
forall</def><sym>(</sym><def>Gen</def><sym>,</sym> <def>Proc</def><sym>) :-</sym> <def></def><kwb>findall</kwb><def></def><sym>(</sym><def>_</def><sym>,(</sym><def>Gen</def><sym>,</sym> <def>Proc</def><sym>),</sym> <def>_</def><sym>).</sym><br />
<def></def><br />
<slc>% ------------- %</slc><br />
<def><br />
sub_list_</def><sym>([</sym><def>S</def><sym>|</sym><def>Seq</def><sym>],</sym> <def>L</def><sym>, [</sym><def>S</def><sym>|</sym><def>Ks</def><sym>],</sym> <def>Rs</def><sym>) :-</sym> <def>L</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>, !,</sym><br />
<def>   L1</def> <kwa>is</kwa> <def>L</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>,</sym><br />
<def>   sub_list_</def><sym>(</sym><def>Seq</def><sym>,</sym> <def>L1</def><sym>,</sym> <def>Ks</def><sym>,</sym> <def>Rs</def><sym>).</sym><br />
<def>sub_list_</def><sym>(</sym><def>Rs</def><sym>,</sym> <def></def><num>0</num><def></def><sym>, [],</sym> <def>Rs</def><sym>).</sym><br />
<def></def><br />
<slc>% ------------------------------- %</slc><def></def><br />
</source>
