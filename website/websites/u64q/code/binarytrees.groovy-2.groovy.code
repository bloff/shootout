<source>
<def></def><com>/* The Computer Language Benchmarks Game</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com>   contributed by Jochen Hinrichsen</com><br />
<com>   modified by Marko Kocic</com><br />
<com>*/</com><def></def><br />
<br />
<kwa>final class</kwa> <def></def><kwc>TreeNode</kwc> <def></def><sym>{</sym><br />
<def></def>   <kwa>private final</kwa> <def>left</def><sym>,</sym> <def>right</def><sym>,</sym> <def>item</def><br />
<br />
   <kwc>TreeNode</kwc><def></def><sym>(</sym><def>item</def><sym>){</sym><br />
<def></def>      <kwa>this</kwa><def></def><sym>.</sym><def>item</def> <sym>=</sym> <def>item</def><br />
   <sym>}</sym><br />
<def></def><br />
   <kwa>private static</kwa> <def></def><kwd>bottomUpTree</kwd><def></def><sym>(</sym><def>item</def><sym>,</sym> <def>depth</def><sym>) {</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>depth</def><sym>&gt;</sym><def></def><num>0</num><def></def><sym>) {</sym><br />
<def></def>      <kwa>return new</kwa> <def></def><kwc>TreeNode</kwc><def></def><sym>(</sym><br />
<def></def>           <kwd>bottomUpTree</kwd><def></def><sym>(</sym><def></def><num>2</num><def></def><sym>*</sym><def>item</def><sym>-</sym><def></def><num>1</num><def></def><sym>,</sym> <def>depth</def><sym>-</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>         <sym>,</sym> <def></def><kwd>bottomUpTree</kwd><def></def><sym>(</sym><def></def><num>2</num><def></def><sym>*</sym><def>item</def><sym>,</sym> <def>depth</def><sym>-</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>         <sym>,</sym> <def>item</def><br />
         <sym>)</sym><br />
<def></def>      <sym>}</sym> <def></def><kwa>else</kwa> <def></def><sym>{</sym><br />
<def></def>      	<kwa>return new</kwa> <def></def><kwc>TreeNode</kwc><def></def><sym>(</sym><def>item</def><sym>)</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwc>TreeNode</kwc><def></def><sym>(</sym><def>left</def><sym>,</sym> <def>right</def><sym>,</sym> <def>item</def><sym>){</sym><br />
<def></def>      <kwa>this</kwa><def></def><sym>.</sym><def>left</def> <sym>=</sym> <def>left</def><br />
      <kwa>this</kwa><def></def><sym>.</sym><def>right</def> <sym>=</sym> <def>right</def><br />
      <kwa>this</kwa><def></def><sym>.</sym><def>item</def> <sym>=</sym> <def>item</def><br />
   <sym>}</sym><br />
<def></def><br />
   <kwa>private</kwa> <def></def><kwd>itemCheck</kwd><def></def><sym>(){</sym><br />
<def></def>      <slc>// if necessary deallocate here</slc><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>left</def><sym>==</sym><def>null</def><sym>)</sym> <def></def><kwa>return</kwa> <def>item</def><br />
      <kwa>else return</kwa> <def>item</def> <sym>+</sym> <def>left</def><sym>.</sym><def></def><kwd>itemCheck</kwd><def></def><sym>() -</sym> <def>right</def><sym>.</sym><def></def><kwd>itemCheck</kwd><def></def><sym>()</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def><br />
<br />
def n</def> <sym>= (</sym><def>args</def><sym>.</sym><def>length</def> <sym>==</sym> <def></def><num>0</num><def></def><sym>)</sym> <def>?</def> <num>10</num> <def></def><sym>:</sym> <def>args</def><sym>[</sym><def></def><num>0</num><def></def><sym>].</sym><def></def><kwd>toInteger</kwd><def></def><sym>()</sym><br />
<def>def minDepth</def> <sym>=</sym> <def></def><num>4</num><br />
<def>def maxDepth</def> <sym>= [</sym> <def>minDepth</def> <sym>+</sym> <def></def><num>2</num><def></def><sym>,</sym> <def>n</def><sym>].</sym><def></def><kwd>max</kwd><def></def><sym>()</sym><br />
<def>def stretchDepth</def> <sym>=</sym> <def>maxDepth</def> <sym>+</sym> <def></def><num>1</num><br />
<def><br />
def check</def> <sym>= (</sym><def></def><kwc>TreeNode</kwc><def></def><sym>.</sym><def></def><kwd>bottomUpTree</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym><def>stretchDepth</def><sym>)).</sym><def></def><kwd>itemCheck</kwd><def></def><sym>()</sym><br />
<def>println</def> <str>&quot;stretch tree of depth ${stretchDepth}</str><esc>\t</esc> <str>check: ${check}&quot;</str><def><br />
<br />
def longLivedTree</def> <sym>=</sym> <def></def><kwc>TreeNode</kwc><def></def><sym>.</sym><def></def><kwd>bottomUpTree</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym><def>maxDepth</def><sym>)</sym><br />
<def><br />
def depth</def><sym>=</sym><def>minDepth</def><br />
<kwa>while</kwa> <def></def><sym>(</sym><def>depth</def><sym>&lt;=</sym><def>maxDepth</def><sym>) {</sym><br />
<def>   def iterations</def> <sym>=</sym> <def></def><num>1</num> <def></def><sym>&lt;&lt; (</sym><def>maxDepth</def> <sym>-</sym> <def>depth</def> <sym>+</sym> <def>minDepth</def><sym>)</sym><br />
<def>   check</def> <sym>=</sym> <def></def><num>0</num><br />
<def></def>   <kwa>for</kwa> <def></def><sym>(</sym><def>i in</def> <num>1</num><def></def><sym>..</sym><def>iterations</def><sym>) {</sym><br />
<def>      check</def> <sym>+= (</sym><def></def><kwc>TreeNode</kwc><def></def><sym>.</sym><def></def><kwd>bottomUpTree</kwd><def></def><sym>(</sym><def>i</def><sym>,</sym><def>depth</def><sym>)).</sym><def></def><kwd>itemCheck</kwd><def></def><sym>()</sym><br />
<def>      check</def> <sym>+= (</sym><def></def><kwc>TreeNode</kwc><def></def><sym>.</sym><def></def><kwd>bottomUpTree</kwd><def></def><sym>(-</sym><def>i</def><sym>,</sym><def>depth</def><sym>)).</sym><def></def><kwd>itemCheck</kwd><def></def><sym>()</sym><br />
<def></def>   <sym>}</sym><br />
<def><br />
   println</def> <str>&quot;${iterations*2}</str><esc>\t</esc> <str>trees of depth ${depth}</str><esc>\t</esc> <str>check: ${check}&quot;</str><def><br />
   depth</def><sym>+=</sym><def></def><num>2</num><br />
<def></def><sym>}</sym><br />
<def><br />
println</def> <str>&quot;long lived tree of depth ${maxDepth}</str><esc>\t</esc> <str>check: ${longLivedTree.itemCheck()}&quot;</str><def></def><br />
</source>
