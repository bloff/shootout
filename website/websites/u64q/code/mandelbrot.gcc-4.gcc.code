<source>
<def></def><com>/*The Computer Language Benchmarks Game</com><br />
<com>  http://shootout.alioth.debian.org/</com><br />
<com></com><br />
<com>  contributed by Paolo Bonzini</com><br />
<com>*/</com><def></def><br />
<br />
<br />
<dir>#include &lt;stdio.h&gt;</dir><br />
<def></def><dir>#include &lt;stdlib.h&gt;</dir><br />
<def></def><br />
<kwc>typedef</kwc> <def></def><kwb>double</kwb> <def>v2df</def> <kwd>__attribute__</kwd> <def></def><sym>((</sym><def></def><kwd>vector_size</kwd><def></def><sym>(</sym><def></def><num>16</num><def></def><sym>)));</sym> <def></def><slc>// vector of two double floats</slc><br />
<def></def><kwc>typedef</kwc> <def></def><kwb>int</kwb> <def>v4si</def> <kwd>__attribute__</kwd> <def></def><sym>((</sym><def></def><kwd>vector_size</kwd><def></def><sym>(</sym><def></def><num>16</num><def></def><sym>)));</sym> <def></def><slc>// vector of four 32-bit ints</slc><br />
<def></def><br />
<kwb>int</kwb> <def></def><kwd>main</kwd> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>argc</def><sym>,</sym> <def></def><kwb>char</kwb> <def></def><sym>**</sym><def>argv</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>    <kwb>int</kwb> <def>w</def><sym>,</sym> <def>h</def><sym>,</sym> <def>bit_num</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>    <kwb>char</kwb> <def>byte_acc</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>    <kwb>int</kwb> <def>i</def><sym>,</sym> <def>iter</def> <sym>=</sym> <def></def><num>50</num><def></def><sym>;</sym><br />
<def></def>    <kwb>double</kwb> <def>x</def><sym>,</sym> <def>y</def><sym>;</sym><br />
<def>    v2df zero</def> <sym>= {</sym> <def></def><num>0.0</num><def></def><sym>,</sym> <def></def><num>0.0</num> <def></def><sym>};</sym><br />
<def>    v2df four</def> <sym>= {</sym> <def></def><num>4.0</num><def></def><sym>,</sym> <def></def><num>4.0</num> <def></def><sym>};</sym><br />
<def>    v2df nzero</def> <sym>= -</sym><def>zero</def><sym>;</sym><br />
<def></def><br />
    <com>/* Detect endianness.  */</com><def><br />
    v4si mask</def> <sym>= (</sym><def>v4si</def><sym>)</sym><def>nzero</def><sym>;</sym><br />
<def></def>    <kwb>int</kwb> <def></def><sym>*</sym><def>pmask</def> <sym>= (</sym><def></def><kwb>int</kwb> <def></def><sym>*) &amp;</sym><def>mask</def><sym>;</sym><br />
<def></def>    <kwa>if</kwa> <def></def><sym>(</sym><def>pmask</def><sym>[</sym><def></def><num>1</num><def></def><sym>])</sym> <def>pmask</def><sym>++;</sym><br />
<def><br />
    w</def> <sym>=</sym> <def>h</def> <sym>=</sym> <def></def><kwd>atoi</kwd><def></def><sym>(</sym><def>argv</def><sym>[</sym><def></def><num>1</num><def></def><sym>]);</sym><br />
<def></def><br />
    <kwd>printf</kwd><def></def><sym>(</sym><def></def><str>&quot;P4</str><esc>\n</esc><str>%d %d</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym><def>w</def><sym>,</sym><def>h</def><sym>);</sym><br />
<def></def><br />
    <kwa>for</kwa><def></def><sym>(</sym><def>y</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym><def>y</def><sym>&lt;</sym><def>h</def><sym>;++</sym><def>y</def><sym>)</sym><br />
<def></def>    <sym>{</sym><br />
<def></def>        <kwa>for</kwa><def></def><sym>(</sym><def>x</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym><def>x</def><sym>&lt;</sym><def>w</def><sym>;</sym><def>x</def><sym>+=</sym><def></def><num>2</num><def></def><sym>)</sym><br />
<def></def>        <sym>{</sym><br />
<def>	    v2df Crv</def> <sym>= {</sym> <def></def><num>2</num><def></def><sym>*</sym><def>x</def><sym>/</sym><def>w</def><sym>-</sym><def></def><num>1.5</num><def></def><sym>,</sym> <def></def><num>2</num><def></def><sym>*(</sym><def>x</def><sym>+</sym><def></def><num>1.0</num><def></def><sym>)/</sym><def>w</def><sym>-</sym><def></def><num>1.5</num> <def></def><sym>};</sym><br />
<def>	    v2df Civ</def> <sym>= {</sym> <def></def><num>2</num><def></def><sym>*</sym><def>y</def><sym>/</sym><def>h</def><sym>-</sym><def></def><num>1.0</num><def></def><sym>,</sym> <def></def><num>2</num><def></def><sym>*</sym><def>y</def><sym>/</sym><def>h</def><sym>-</sym><def></def><num>1.0</num> <def></def><sym>};</sym><br />
<def>	    v2df Zrv</def> <sym>= {</sym> <def></def><num>0.0</num><def></def><sym>,</sym> <def></def><num>0.0</num> <def></def><sym>};</sym><br />
<def>	    v2df Ziv</def> <sym>= {</sym> <def></def><num>0.0</num><def></def><sym>,</sym> <def></def><num>0.0</num> <def></def><sym>};</sym><br />
<def>            v2df Trv</def> <sym>= {</sym> <def></def><num>0.0</num><def></def><sym>,</sym> <def></def><num>0.0</num> <def></def><sym>};</sym><br />
<def>	    v2df Tiv</def> <sym>= {</sym> <def></def><num>0.0</num><def></def><sym>,</sym> <def></def><num>0.0</num> <def></def><sym>};</sym><br />
<def><br />
            i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>            <kwa>do</kwa> <def></def><sym>{</sym><br />
<def>                Ziv</def> <sym>= (</sym><def>Zrv</def><sym>*</sym><def>Ziv</def><sym>) + (</sym><def>Zrv</def><sym>*</sym><def>Ziv</def><sym>) +</sym> <def>Civ</def><sym>;</sym><br />
<def>                Zrv</def> <sym>=</sym> <def>Trv</def> <sym>-</sym> <def>Tiv</def> <sym>+</sym> <def>Crv</def><sym>;</sym><br />
<def>                Trv</def> <sym>=</sym> <def>Zrv</def> <sym>*</sym> <def>Zrv</def><sym>;</sym><br />
<def>                Tiv</def> <sym>=</sym> <def>Ziv</def> <sym>*</sym> <def>Ziv</def><sym>;</sym><br />
<def></def><br />
		<com>/* sign bit zeroed if 4.0 - Trv - Tiv &gt;= 0.0 (i.e. |Z| &lt;= 4.0).  */</com><def><br />
		v2df delta</def> <sym>=</sym> <def>four</def> <sym>-</sym> <def>Trv</def> <sym>-</sym> <def>Tiv</def><sym>;</sym><br />
<def>		mask</def> <sym>= (</sym><def>v4si</def><sym>)</sym><def>delta</def> <sym>&amp; (</sym><def>v4si</def><sym>)</sym><def>nzero</def><sym>;</sym><br />
<def></def>            <sym>}</sym> <def></def><kwa>while</kwa> <def></def><sym>(++</sym><def>i</def> <sym>&lt;</sym> <def>iter</def> <sym>&amp;&amp; !(</sym><def>pmask</def><sym>[</sym><def></def><num>0</num><def></def><sym>] &amp;&amp;</sym> <def>pmask</def><sym>[</sym><def></def><num>2</num><def></def><sym>]));</sym><br />
<def><br />
            byte_acc</def> <sym>&lt;&lt;=</sym> <def></def><num>2</num><def></def><sym>;</sym><br />
<def></def>            <kwa>if</kwa><def></def><sym>(!</sym><def>pmask</def><sym>[</sym><def></def><num>0</num><def></def><sym>])</sym><br />
<def>                byte_acc</def> <sym>|=</sym> <def></def><num>0x02</num><def></def><sym>;</sym><br />
<def></def>            <kwa>if</kwa><def></def><sym>(!</sym><def>pmask</def><sym>[</sym><def></def><num>2</num><def></def><sym>])</sym><br />
<def>                byte_acc</def> <sym>|=</sym> <def></def><num>0x01</num><def></def><sym>;</sym><br />
<def>            bit_num</def><sym>+=</sym><def></def><num>2</num><def></def><sym>;</sym><br />
<def></def><br />
            <kwa>if</kwa><def></def><sym>(</sym><def>bit_num</def> <sym>==</sym> <def></def><num>8</num><def></def><sym>) {</sym><br />
<def></def>                <kwd>fputc</kwd><def></def><sym>(</sym><def>byte_acc</def><sym>,</sym><def>stdout</def><sym>);</sym><br />
<def>                byte_acc</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>                bit_num</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>        <sym>}</sym><br />
<def></def><br />
        <kwa>if</kwa><def></def><sym>(</sym><def>bit_num</def> <sym>!=</sym> <def></def><num>0</num><def></def><sym>) {</sym><br />
<def>            byte_acc</def> <sym>&lt;&lt;= (</sym><def></def><num>8</num><def></def><sym>-</sym><def>w</def><sym>%</sym><def></def><num>8</num><def></def><sym>);</sym><br />
<def></def>            <kwd>fputc</kwd><def></def><sym>(</sym><def>byte_acc</def><sym>,</sym><def>stdout</def><sym>);</sym><br />
<def>            byte_acc</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>            bit_num</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>        <sym>}</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
</source>
