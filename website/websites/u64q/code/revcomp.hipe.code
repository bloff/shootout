<source>
<def></def><sym>-</sym><def></def><kwa>module</kwa><def></def><sym>(</sym><def>revcomp</def><sym>).</sym><br />
<def></def><br />
<slc>%% The Computer Language Benchmarks Game</slc><br />
<def></def><slc>%% http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>%%</slc><br />
<def></def><slc>%% contributed by Vlad Balin</slc><br />
<def></def><br />
<sym>-</sym><def></def><kwd>compile</kwd><def></def><sym>( [</sym> <def>native</def><sym>, {</sym> <def>hipe</def><sym>,</sym> <def>o3</def> <sym>} ] ).</sym><br />
<def></def><sym>-</sym><def></def><kwd>compile</kwd><def></def><sym>( [</sym> <def>inline</def><sym>, {</sym> <def>inline_size</def><sym>,</sym> <def></def><num>100</num> <def></def><sym>} ] ).</sym><br />
<def></def><br />
<sym>-</sym><def></def><kwa>export</kwa><def></def><sym>([</sym><def>main</def><sym>/</sym><def></def><num>1</num><def></def><sym>]).</sym><br />
<def></def><br />
<kwd>main</kwd><def></def><sym>([</sym><def>_Args</def><sym>]) -&gt;</sym><br />
<def>    io</def><sym>:</sym><def></def><kwd>setopts</kwd><def></def><sym>( [</sym> <def></def><kwb>binary</kwb> <def></def><sym>] ),</sym><br />
<def></def>    <kwd>loop</kwd><def></def><sym>(),</sym><br />
<def></def>    <kwb>halt</kwb><def></def><sym>().</sym><br />
<def></def><br />
<kwd>loop</kwd><def></def><sym>() -&gt;</sym> <def></def><kwd>loop</kwd><def></def><sym>( [] ).</sym><br />
<def></def><br />
<slc>%% Buffer = iolist()</slc><br />
<def></def><kwd>loop</kwd><def></def><sym>(</sym> <def>Buffer</def> <sym>) -&gt;</sym><br />
<def></def>    <kwa>case</kwa> <def>io</def><sym>:</sym><def></def><kwd>get_line</kwd><def></def><sym>(</sym><def></def><str>''</str><def></def><sym>)</sym> <def></def><kwa>of</kwa><br />
<def>        eof</def> <sym>-&gt;</sym> <def></def><kwd>flush</kwd><def></def><sym>(</sym> <def>Buffer</def><sym>, &lt;&lt; &gt;&gt; );</sym><br />
<def></def>        <sym>&lt;&lt;</sym> <def></def><str>&quot;&gt;&quot;</str><def></def><sym>,</sym> <def>_</def><sym>/</sym><def>bytes</def> <sym>&gt;&gt; =</sym> <def>Head</def> <sym>-&gt;</sym><br />
<def></def>            <kwd>flush</kwd><def></def><sym>(</sym> <def>Buffer</def><sym>,</sym> <def>Head</def> <sym>),</sym><br />
<def></def>            <kwd>loop</kwd><def></def><sym>( [] );</sym><br />
<def>        Line</def> <sym>-&gt;</sym> <def></def><kwd>loop</kwd><def></def><sym>(</sym> <def></def><kwd>rev_comp_line</kwd><def></def><sym>(</sym> <def>Line</def><sym>,</sym> <def>Buffer</def> <sym>) )</sym><br />
<def></def>    <kwa>end</kwa><def></def><sym>.</sym><br />
<def></def><br />
<slc>%% Buffer, Suffix ) -&gt; iolist().</slc><br />
<def></def><slc>%% Buffer = Suffix = iolist().</slc><br />
<def></def><slc>%% Format and write Buffer with sequence followed by Suffix text</slc><br />
<def></def><kwd>flush</kwd><def></def><sym>(</sym> <def>Buffer</def><sym>,</sym> <def>Suffix</def> <sym>) -&gt;</sym><br />
<def>    Text</def> <sym>=</sym> <def></def><kwd>format</kwd><def></def><sym>(</sym> <def></def><kwb>list_to_binary</kwb><def></def><sym>(</sym> <def>Buffer</def> <sym>),</sym> <def>Suffix</def> <sym>),</sym><br />
<def>    io</def><sym>:</sym><def></def><kwd>put_chars</kwd><def></def><sym>(</sym> <def>Text</def> <sym>).</sym><br />
<def></def><br />
<slc>%% format( Buffer, Suffix ) -&gt; iolist().</slc><br />
<def></def><slc>%% Buffer = bytes(), Suffix = iolist().</slc><br />
<def></def><slc>%% Split Buffer into 60-char lines, append Suffix to the end of buffer.</slc><br />
<def></def><kwd>format</kwd><def></def><sym>( &lt;&lt;</sym> <def>Line</def><sym>:</sym><def></def><num>60</num><def></def><sym>/</sym><def>bytes</def><sym>,</sym> <def>Rest</def><sym>/</sym><def>bytes</def> <sym>&gt;&gt;,</sym> <def>Suffix</def> <sym>) -&gt; [</sym> <def>Line</def><sym>,</sym> <def></def><num>10</num> <def></def><sym>|</sym> <def></def><kwd>format</kwd><def></def><sym>(</sym> <def>Rest</def><sym>,</sym> <def>Suffix</def> <sym>) ];</sym><br />
<def></def><kwd>format</kwd><def></def><sym>( &lt;&lt; &gt;&gt;,</sym> <def>Suffix</def> <sym>) -&gt;</sym> <def>Suffix</def><sym>;</sym><br />
<def></def><kwd>format</kwd><def></def><sym>(</sym> <def>Line</def><sym>,</sym> <def>Suffix</def> <sym>) -&gt; [</sym> <def>Line</def><sym>,</sym> <def></def><num>10</num><def></def><sym>,</sym> <def>Suffix</def> <sym>].</sym><br />
<def></def><br />
<slc>%% rev_comp( Line, Buffer ) -&gt; Buffer.</slc><br />
<def></def><slc>%% Line = bytes().</slc><br />
<def></def><slc>%% Buffer = string().</slc><br />
<def></def><kwd>rev_comp_line</kwd><def></def><sym>( &lt;&lt;</sym> <def>_</def><sym>:</sym><def></def><num>8</num> <def></def><sym>&gt;&gt;,</sym> <def>Buffer</def> <sym>) -&gt;</sym> <def>Buffer</def><sym>;</sym><br />
<def></def><kwd>rev_comp_line</kwd><def></def><sym>( &lt;&lt;</sym> <def>H</def><sym>,</sym> <def>Rest</def><sym>/</sym><def>bytes</def> <sym>&gt;&gt;,</sym> <def>Buffer</def> <sym>) -&gt;</sym> <def></def><kwd>rev_comp_line</kwd><def></def><sym>(</sym> <def>Rest</def><sym>, [</sym> <def></def><kwd>rev_comp</kwd><def></def><sym>(</sym> <def>H</def> <sym>) |</sym> <def>Buffer</def> <sym>] ).</sym><br />
<def></def><br />
<slc>%% rev_comp( char() ) -&gt; char().</slc><br />
<def></def><kwd>rev_comp</kwd><def></def><sym>(</sym> <def>$A</def> <sym>) -&gt;</sym> <def>$T</def><sym>;</sym><br />
<def></def><kwd>rev_comp</kwd><def></def><sym>(</sym> <def>$C</def> <sym>) -&gt;</sym> <def>$G</def><sym>;</sym><br />
<def></def><kwd>rev_comp</kwd><def></def><sym>(</sym> <def>$G</def> <sym>) -&gt;</sym> <def>$C</def><sym>;</sym><br />
<def></def><kwd>rev_comp</kwd><def></def><sym>(</sym> <def>$T</def> <sym>) -&gt;</sym> <def>$A</def><sym>;</sym><br />
<def></def><kwd>rev_comp</kwd><def></def><sym>(</sym> <def>$U</def> <sym>) -&gt;</sym> <def>$A</def><sym>;</sym><br />
<def></def><kwd>rev_comp</kwd><def></def><sym>(</sym> <def>$M</def> <sym>) -&gt;</sym> <def>$K</def><sym>;</sym><br />
<def></def><kwd>rev_comp</kwd><def></def><sym>(</sym> <def>$R</def> <sym>) -&gt;</sym> <def>$Y</def><sym>;</sym><br />
<def></def><kwd>rev_comp</kwd><def></def><sym>(</sym> <def>$Y</def> <sym>) -&gt;</sym> <def>$R</def><sym>;</sym><br />
<def></def><kwd>rev_comp</kwd><def></def><sym>(</sym> <def>$K</def> <sym>) -&gt;</sym> <def>$M</def><sym>;</sym><br />
<def></def><kwd>rev_comp</kwd><def></def><sym>(</sym> <def>$V</def> <sym>) -&gt;</sym> <def>$B</def><sym>;</sym><br />
<def></def><kwd>rev_comp</kwd><def></def><sym>(</sym> <def>$H</def> <sym>) -&gt;</sym> <def>$D</def><sym>;</sym><br />
<def></def><kwd>rev_comp</kwd><def></def><sym>(</sym> <def>$D</def> <sym>) -&gt;</sym> <def>$H</def><sym>;</sym><br />
<def></def><kwd>rev_comp</kwd><def></def><sym>(</sym> <def>$B</def> <sym>) -&gt;</sym> <def>$V</def><sym>;</sym><br />
<def></def><kwd>rev_comp</kwd><def></def><sym>(</sym> <def>$a</def> <sym>) -&gt;</sym> <def>$T</def><sym>;</sym><br />
<def></def><kwd>rev_comp</kwd><def></def><sym>(</sym> <def>$c</def> <sym>) -&gt;</sym> <def>$G</def><sym>;</sym><br />
<def></def><kwd>rev_comp</kwd><def></def><sym>(</sym> <def>$g</def> <sym>) -&gt;</sym> <def>$C</def><sym>;</sym><br />
<def></def><kwd>rev_comp</kwd><def></def><sym>(</sym> <def>$t</def> <sym>) -&gt;</sym> <def>$A</def><sym>;</sym><br />
<def></def><kwd>rev_comp</kwd><def></def><sym>(</sym> <def>$u</def> <sym>) -&gt;</sym> <def>$A</def><sym>;</sym><br />
<def></def><kwd>rev_comp</kwd><def></def><sym>(</sym> <def>$m</def> <sym>) -&gt;</sym> <def>$K</def><sym>;</sym><br />
<def></def><kwd>rev_comp</kwd><def></def><sym>(</sym> <def>$r</def> <sym>) -&gt;</sym> <def>$Y</def><sym>;</sym><br />
<def></def><kwd>rev_comp</kwd><def></def><sym>(</sym> <def>$y</def> <sym>) -&gt;</sym> <def>$R</def><sym>;</sym><br />
<def></def><kwd>rev_comp</kwd><def></def><sym>(</sym> <def>$k</def> <sym>) -&gt;</sym> <def>$M</def><sym>;</sym><br />
<def></def><kwd>rev_comp</kwd><def></def><sym>(</sym> <def>$v</def> <sym>) -&gt;</sym> <def>$B</def><sym>;</sym><br />
<def></def><kwd>rev_comp</kwd><def></def><sym>(</sym> <def>$h</def> <sym>) -&gt;</sym> <def>$D</def><sym>;</sym><br />
<def></def><kwd>rev_comp</kwd><def></def><sym>(</sym> <def>$d</def> <sym>) -&gt;</sym> <def>$H</def><sym>;</sym><br />
<def></def><kwd>rev_comp</kwd><def></def><sym>(</sym> <def>$b</def> <sym>) -&gt;</sym> <def>$V</def><sym>;</sym><br />
<def></def><kwd>rev_comp</kwd><def></def><sym>(</sym> <def>$N</def> <sym>) -&gt;</sym> <def>$N</def><sym>;</sym><br />
<def></def><kwd>rev_comp</kwd><def></def><sym>(</sym> <def>$S</def> <sym>) -&gt;</sym> <def>$S</def><sym>;</sym><br />
<def></def><kwd>rev_comp</kwd><def></def><sym>(</sym> <def>$W</def> <sym>) -&gt;</sym> <def>$W</def><sym>;</sym><br />
<def></def><kwd>rev_comp</kwd><def></def><sym>(</sym> <def>$n</def> <sym>) -&gt;</sym> <def>$N</def><sym>;</sym><br />
<def></def><kwd>rev_comp</kwd><def></def><sym>(</sym> <def>$s</def> <sym>) -&gt;</sym> <def>$S</def><sym>;</sym><br />
<def></def><kwd>rev_comp</kwd><def></def><sym>(</sym> <def>$w</def> <sym>) -&gt;</sym> <def>$W</def><sym>.</sym><def></def><br />
</source>
