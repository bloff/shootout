<source>
<def></def><com>&quot;* The Computer Language Shootout</com><br />
<com>    http://shootout.alioth.debian.org/</com><br />
<com>    contributed by Paolo Bonzini *&quot;</com><def>!<br />
<br />
!</def><kwc>Tests</kwc> <def></def><kwb>class methodsFor:</kwb> <def></def><str>'benchmarking'</str><def>!</def><kwb>mandelbrot2:</kwb> <def>extent</def> <kwb>to:</kwb> <def>output</def>   <kwd>| limit2 m bits zr zi cr ci i tr stepr stepi |</kwd>   <def>limit2</def> <sym>:=</sym> <def></def><num>4.0</num><def>d0</def><sym>.</sym><br />
<def>   m</def> <sym>:=</sym> <def></def><num>50</num><def></def><sym>.</sym><br />
<def>   stepr</def> <sym>:=</sym> <def></def><num>2.0</num><def>d0</def> <kwb>/</kwb> <def>extent</def><sym>.</sym><br />
<def>   stepi</def> <sym>:=</sym> <def></def><num>2.0</num><def>d0</def> <kwb>/</kwb> <def>extent</def><sym>.</sym><br />
<def></def><br />
   <num>0</num> <def></def><kwb>to:</kwb> <def>extent</def> <kwb>-</kwb> <def></def><num>1</num> <def></def><kwb>do:</kwb> <def></def><sym>[</sym> <def></def><kwd>:y</kwd> <def></def><sym>|</sym><br />
<def>       bits</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>.</sym><br />
<def>       ci</def> <sym>:=</sym> <def>stepi</def> <kwb>*</kwb> <def>y</def> <kwb>asFloat -</kwb> <def></def><num>1.0</num><def>d0</def><sym>.</sym><br />
<def></def>       <num>0</num> <def></def><kwb>to:</kwb> <def>extent</def> <kwb>-</kwb> <def></def><num>1</num> <def></def><kwb>do:</kwb> <def></def><sym>[</sym> <def></def><kwd>:x</kwd> <def></def><sym>|</sym><br />
<def>           cr</def> <sym>:=</sym> <def>stepr</def> <kwb>*</kwb> <def>x</def> <kwb>asFloat -</kwb> <def></def><num>1.5</num><def>d0</def><sym>.</sym><br />
<def>           zr</def> <sym>:=</sym> <def>cr</def><sym>.</sym> <def>zi</def> <sym>:=</sym> <def>ci</def><sym>.</sym><br />
<def><br />
           bits</def> <sym>:=</sym> <def>bits</def> <kwb>bitShift:</kwb> <def></def><num>1</num><def></def><sym>.</sym><br />
<def>           i</def> <sym>:=</sym> <def></def><num>1</num><def></def><sym>.</sym><br />
<def></def>           <sym>[</sym><br />
<def>               tr</def> <sym>:= (</sym><def>zr</def><kwb>*</kwb><def>zr</def><sym>)</sym> <def></def><kwb>-</kwb> <def></def><sym>(</sym><def>zi</def><kwb>*</kwb><def>zi</def><sym>)</sym> <def></def><kwb>+</kwb> <def>cr</def><sym>.</sym><br />
<def>               zi</def> <sym>:=</sym> <def></def><num>2.0</num><def>d0</def> <kwb>*</kwb> <def>zr</def> <kwb>*</kwb> <def>zi</def> <kwb>+</kwb> <def>ci</def><sym>.</sym><br />
<def>               zr</def> <sym>:=</sym> <def>tr</def><sym>.</sym><br />
<def></def>               <sym>(</sym><def>zr</def><kwb>*</kwb><def>zr</def><sym>)</sym> <def></def><kwb>+</kwb> <def></def><sym>(</sym><def>zi</def><kwb>*</kwb><def>zi</def><sym>)</sym> <def>&lt;</def> <kwb>limit</kwb><def></def><num>2</num> <def></def><kwb>and:</kwb> <def></def><sym>[ (</sym><def>i</def> <sym>:=</sym> <def>i</def> <kwb>+</kwb> <def></def><num>1</num><def></def><sym>)</sym> <def>&lt;</def> <kwb>m</kwb> <def></def><sym>]</sym><br />
<def></def>           <sym>]</sym> <def></def><kwb>whileTrue</kwb><def></def><sym>.</sym><br />
<def><br />
           i</def> <kwb>=</kwb> <def>m</def> <kwb>ifTrue:</kwb> <def></def><sym>[</sym> <def>bits</def> <sym>:=</sym> <def>bits</def> <kwb>+</kwb> <def></def><num>1</num> <def></def><sym>].</sym><br />
<def></def>           <sym>(</sym><def>x</def> <kwb>bitAnd:</kwb> <def></def><num>7</num><def></def><sym>)</sym> <def></def><kwb>==</kwb> <def></def><num>7</num> <def></def><kwb>ifTrue:</kwb> <def></def><sym>[</sym><br />
<def>               output</def> <kwb>nextPutByte:</kwb> <def>bits</def><sym>.</sym><br />
<def>               bits</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>.</sym><br />
<def></def>           <sym>]</sym><br />
<def></def>       <sym>].</sym><br />
<def></def>       <sym>(</sym><def>extent</def> <kwb>bitAnd:</kwb> <def></def><num>7</num><def></def><sym>)</sym> <def></def><kwb>==</kwb> <def></def><num>0</num> <def></def><kwb>ifFalse:</kwb> <def></def><sym>[</sym><br />
<def>           bits</def> <sym>:=</sym> <def>bits</def> <kwb>bitShift:</kwb> <def></def><num>8</num> <def></def><kwb>-</kwb> <def></def><sym>(</sym><def>extent</def> <kwb>bitAnd:</kwb> <def></def><num>7</num><def></def><sym>).</sym><br />
<def>           output</def> <kwb>nextPutByte:</kwb> <def>bits</def><sym>.</sym><br />
<def></def>       <sym>]</sym><br />
<def></def>   <sym>]</sym><def>! !<br />
<br />
!</def><kwc>Tests</kwc> <def></def><kwb>class methodsFor:</kwb> <def></def><str>'benchmark scripts'</str><def>!mandelbrot2</def>   <kwd>| n output |</kwd>    <def>n</def> <sym>:=</sym> <def></def><kwa>self</kwa> <def></def><kwb>arg</kwb><def></def><sym>.    (</sym><def>output</def> <sym>:=</sym> <def></def><kwa>self</kwa> <def></def><kwb>stdout</kwb><def></def><sym>)</sym>      <def></def><kwb>nextPutAll:</kwb> <def></def><str>'P4'</str><def></def><sym>;</sym> <def></def><kwb>nl</kwb><def></def><sym>;</sym> <def></def><kwb>print:</kwb> <def>n</def><sym>;</sym> <def></def><kwb>space</kwb><def></def><sym>;</sym> <def></def><kwb>print:</kwb> <def>n</def><sym>;</sym> <def></def><kwb>nl</kwb><def></def><sym>.</sym>   <def></def><kwa>self</kwa> <def></def><kwb>mandelbrot2:</kwb> <def>n</def> <kwb>to:</kwb> <def>output</def><sym>.   ^</sym><def></def><str>''</str><def>! !</def><br />
<br />
<kwc>Tests</kwc> <def></def><kwb>mandelbrot</kwb><def></def><num>2</num><def>!</def><br />
</source>
