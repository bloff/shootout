<source>
<def></def><com>{-# OPTIONS -fvia-C -O2 -optc-O3 -fglasgow-exts #-}</com><def></def><br />
<slc>--</slc><br />
<def></def><slc>-- The Computer Language Benchmarks Game</slc><br />
<def></def><slc>-- http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>--</slc><br />
<def></def><slc>-- Contributed by Sterling Clover</slc><br />
<def></def><slc>-- Heavily inspired by contribution from Don Stewart</slc><br />
<def></def><slc>-- Suggested flags: -funfolding-use-threshold=32 -O2 -optc-O3</slc><br />
<def></def><slc>--</slc><br />
<def></def><br />
<kwa>import qualified</kwa> <def>Data.ByteString.Char8</def> <kwa>as</kwa> <def>S</def><br />
<kwa>import</kwa> <def>Data.ByteString.Internal</def><br />
<kwa>import</kwa> <def>Data.ByteString.Unsafe</def><br />
<kwa>import</kwa> <def>Foreign</def><br />
<kwa>import</kwa> <def>Control.Arrow</def><br />
<kwa>import</kwa> <def>GHC.Base</def><br />
<kwa>import</kwa> <def>GHC.Ptr</def><br />
<kwa>import</kwa> <def>GHC.IOBase<br />
<br />
main</def> <sym>=</sym> <def>uncurry proc</def> <sym>=&lt;&lt;</sym> <def>clines `fmap` S.getContents<br />
<br />
proc</def> <sym>[]</sym> <def>_</def> <sym>=</sym> <def>return</def> <sym>()</sym><br />
<def>proc</def> <sym>(</sym><def>h</def><sym>:</sym><def>hs</def><sym>) (</sym><def>b</def><sym>:</sym><def>bs</def><sym>) =</sym> <def>S.putStrLn h</def> <sym>&gt;&gt;</sym> <def>revcomp b</def> <sym>&gt;&gt;</sym> <def>writeFasta b</def> <sym>&gt;&gt;</sym> <def>proc hs bs<br />
<br />
writeFasta t</def><br />
    <sym>|</sym> <def>S.null t</def> <sym>=</sym><def>return</def> <sym>()</sym><br />
<def></def>    <sym>|</sym> <def>otherwise</def> <sym>=</sym> <def>S.putStrLn l</def> <sym>&gt;&gt;</sym> <def>writeFasta r</def><br />
    <kwa>where</kwa> <def></def><sym>(</sym><def>l</def><sym>,</sym><def>r</def><sym>) =</sym> <def>S.splitAt</def> <num>60</num> <def>t<br />
<br />
clines</def> <sym>::</sym> <def>ByteString</def> <sym>-&gt; ([</sym><def>ByteString</def><sym>],[</sym><def>ByteString</def><sym>])</sym><br />
<def>clines ps</def> <sym>=</sym> <def>clines' ps</def> <sym>([],[])</sym><br />
<def></def>    <kwa>where</kwa><br />
<def>      clines' ps accum</def><sym>@(</sym><def>f</def><sym>,</sym><def>s</def><sym>)</sym><br />
<def></def>          <sym>|</sym> <def>otherwise</def> <sym>=</sym> <def></def><kwa>case</kwa> <def>S.elemIndex '\n' ps</def> <kwa>of</kwa><br />
<def>                          Just n</def>  <sym>-&gt;</sym> <def>clines''</def> <sym>(</sym><def>S.drop</def> <sym>(</sym><def>n</def><sym>+</sym><def></def><num>1</num><def></def><sym>)</sym> <def>ps</def><sym>) (</sym><def>f</def><sym>++[</sym><def>S.take n ps</def><sym>],</sym><def>s</def><sym>)</sym><br />
<def>      clines'' ps accum</def><sym>@(</sym><def>f</def><sym>,</sym><def>s</def><sym>)</sym><br />
<def></def>          <sym>|</sym> <def>otherwise</def> <sym>=</sym> <def></def><kwa>case</kwa> <def>S.elemIndex '</def><sym>&gt;</sym><def>' ps</def> <kwa>of</kwa><br />
<def>                      Nothing</def> <sym>-&gt; (</sym><def>f</def><sym>,</sym><def>s</def><sym>++[</sym><def>S.filter</def> <sym>(/=</sym><def>'\n'</def><sym>)</sym> <def>ps</def><sym>])</sym><br />
<def>                      Just n</def>  <sym>-&gt;</sym> <def>clines'</def> <sym>(</sym><def>S.drop n ps</def><sym>) (</sym><def>f</def><sym>,</sym><def>s</def><sym>++[</sym><def>S.filter</def> <sym>(/=</sym><def>'\n'</def><sym>)</sym> <def>. S.take n $ ps</def><sym>])</sym><br />
<def><br />
comps</def> <sym>=</sym> <def>map</def> <sym>(</sym><def>ord</def> <sym>***</sym> <def>c2w</def><sym>) [</sym><br />
<def></def>    <sym>(</sym><def>'A'</def> <sym>,</sym> <def>'T'</def><sym>), (</sym> <def>'a'</def> <sym>,</sym> <def>'T'</def><sym>), (</sym> <def>'C'</def> <sym>,</sym> <def>'G'</def><sym>), (</sym> <def>'c'</def> <sym>,</sym> <def>'G'</def><sym>), (</sym> <def>'G'</def> <sym>,</sym> <def>'C'</def><sym>),</sym><br />
<def></def>    <sym>(</sym><def>'g'</def> <sym>,</sym> <def>'C'</def><sym>), (</sym> <def>'T'</def> <sym>,</sym> <def>'A'</def><sym>), (</sym> <def>'t'</def> <sym>,</sym> <def>'A'</def><sym>), (</sym> <def>'U'</def> <sym>,</sym> <def>'A'</def><sym>), (</sym> <def>'u'</def> <sym>,</sym> <def>'A'</def><sym>),</sym><br />
<def></def>    <sym>(</sym><def>'M'</def> <sym>,</sym> <def>'K'</def><sym>), (</sym> <def>'m'</def> <sym>,</sym> <def>'K'</def><sym>), (</sym> <def>'R'</def> <sym>,</sym> <def>'Y'</def><sym>), (</sym> <def>'r'</def> <sym>,</sym> <def>'Y'</def><sym>), (</sym> <def>'Y'</def> <sym>,</sym> <def>'R'</def><sym>),</sym><br />
<def></def>    <sym>(</sym><def>'y'</def> <sym>,</sym> <def>'R'</def><sym>), (</sym> <def>'K'</def> <sym>,</sym> <def>'M'</def><sym>), (</sym> <def>'k'</def> <sym>,</sym> <def>'M'</def><sym>), (</sym> <def>'V'</def> <sym>,</sym> <def>'B'</def><sym>), (</sym> <def>'v'</def> <sym>,</sym> <def>'B'</def><sym>),</sym><br />
<def></def>    <sym>(</sym><def>'H'</def> <sym>,</sym> <def>'D'</def><sym>), (</sym> <def>'h'</def> <sym>,</sym> <def>'D'</def><sym>), (</sym> <def>'D'</def> <sym>,</sym> <def>'H'</def><sym>), (</sym> <def>'d'</def> <sym>,</sym> <def>'H'</def><sym>), (</sym> <def>'B'</def> <sym>,</sym> <def>'V'</def><sym>), (</sym> <def>'b'</def> <sym>,</sym> <def>'V'</def><sym>)]</sym><br />
<def></def><br />
<com>{- NOINLINE -}</com><def><br />
ca</def> <sym>::</sym> <def>Ptr Word8<br />
ca</def> <sym>=</sym> <def>inlinePerformIO $</def> <kwa>do</kwa><br />
<def>       a</def> <sym>&lt;-</sym> <def>mallocArray</def> <num>200</num><br />
<def>       mapM_</def> <sym>(</sym><def>uncurry</def> <sym>(</sym><def>pokeByteOff a</def><sym>))</sym> <def>$ zip</def> <sym>[</sym><def></def><num>0</num><def>.</def><num>.199</num><def></def><sym>::</sym><def></def><kwb>Int</kwb><def></def><sym>] [</sym><def></def><num>0</num><def>.</def><num>.199</num><def></def><sym>::</sym><def>Word8</def><sym>]</sym><br />
<def>       mapM_</def> <sym>(</sym><def>uncurry</def> <sym>(</sym><def>pokeByteOff a</def><sym>))</sym> <def>comps<br />
       return a<br />
<br />
comp</def> <sym>::</sym> <def>Word#</def> <sym>-&gt;</sym> <def>Word#<br />
comp c</def> <sym>=</sym> <def>rw8 ca</def> <sym>(</sym><def>word2Int# c</def><sym>)</sym><br />
<def><br />
revcomp</def> <sym>(</sym><def>PS fp s</def> <sym>(</sym><def>I# l</def><sym>)) =</sym> <def>withForeignPtr fp $ \p</def> <sym>-&gt;</sym> <def>rc</def> <sym>(</sym><def>p `plusPtr` s</def><sym>)</sym> <def></def><num>0</num><def>#</def> <sym>(</sym><def>l</def> <sym>-</sym><def>#</def> <num>1</num><def>#</def><sym>)</sym><br />
<def></def>  <kwa>where</kwa><br />
<def>    rc</def> <sym>::</sym> <def>Ptr Word8</def> <sym>-&gt;</sym> <def></def><kwb>Int</kwb><def>#</def> <sym>-&gt;</sym> <def></def><kwb>Int</kwb><def>#</def> <sym>-&gt;</sym> <def>IO</def> <sym>()</sym><br />
<def>    rc p i j</def>  <sym>=</sym> <def>rc' i j</def><br />
        <kwa>where</kwa><br />
<def>          rc' i j</def><br />
              <sym>|</sym> <def>i</def> <sym>&lt;</sym><def># j</def> <sym>=</sym> <def></def><kwa>do</kwa><br />
<def></def>                          <kwa>let</kwa> <def>x</def> <sym>=</sym> <def>rw8 p i<br />
                          ww8 p i</def> <sym>(</sym><def>comp</def> <sym>(</sym><def>rw8 p j</def><sym>))</sym><br />
<def>                          ww8 p j</def> <sym>(</sym><def>comp x</def><sym>)</sym><br />
<def>                          rc'</def> <sym>(</sym><def>i</def> <sym>+</sym><def>#</def> <num>1</num><def>#</def><sym>) (</sym><def>j</def> <sym>-</sym><def>#</def> <num>1</num><def>#</def><sym>)</sym><br />
<def></def>              <sym>|</sym> <def>i</def> <sym>==</sym><def># j</def> <sym>=</sym> <def>ww8 p i</def> <sym>(</sym><def>comp</def> <sym>(</sym><def>rw8 p i</def><sym>))</sym><br />
<def></def>              <sym>|</sym> <def>otherwise</def> <sym>=</sym>  <def>return</def> <sym>()</sym><br />
<def><br />
rw8</def> <sym>::</sym> <def>Ptr Word8</def> <sym>-&gt;</sym> <def></def><kwb>Int</kwb><def>#</def> <sym>-&gt;</sym> <def>Word#<br />
rw8</def> <sym>(</sym><def>Ptr a</def><sym>)</sym> <def>i</def> <sym>=</sym> <def></def><kwa>case</kwa> <def>readWord8OffAddr# a i realWorld#</def>  <kwa>of</kwa> <def></def><sym>(</sym><def># _</def><sym>,</sym> <def>x #</def><sym>) -&gt;</sym>  <def>x<br />
<br />
ww8</def> <sym>::</sym> <def>Ptr Word8</def> <sym>-&gt;</sym> <def></def><kwb>Int</kwb><def>#</def> <sym>-&gt;</sym> <def>Word#</def> <sym>-&gt;</sym> <def>IO</def> <sym>()</sym><br />
<def>ww8</def> <sym>(</sym><def>Ptr a</def><sym>)</sym> <def>i x</def>  <sym>=</sym> <def>IO $ \s</def> <sym>-&gt;</sym> <def></def><kwa>case</kwa> <def>writeWord8OffAddr# a i x s</def> <kwa>of</kwa> <def>s2</def> <sym>-&gt; (</sym><def># s2</def><sym>, ()</sym> <def>#</def><sym>)</sym><def></def><br />
</source>
