<span class="hl com">/**</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * Based on the CAL Open Quark version</span>
<span class="hl com"> * Contributed by Magnus Byne.</span>
<span class="hl com"> */</span>

<span class="hl kwa">module</span> Threadring<span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Prelude <span class="hl kwa">using</span>
    <span class="hl kwa">typeConstructor</span> <span class="hl sym">=</span> Int<span class="hl sym">,</span> JObject<span class="hl sym">,</span> String<span class="hl sym">;</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span>
        eager<span class="hl sym">,</span> error<span class="hl sym">,</span> input<span class="hl sym">,</span> intToString<span class="hl sym">,</span> output<span class="hl sym">,</span> seq<span class="hl sym">,</span> stringToInt<span class="hl sym">,</span> toCalValue<span class="hl sym">,</span>
        unsafeFromCalValue<span class="hl sym">,</span> upFromTo<span class="hl sym">;</span>
    <span class="hl sym">;</span>
<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>IO<span class="hl sym">.</span>Console <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> printLine<span class="hl sym">;</span>
    <span class="hl sym">;</span>
<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Experimental<span class="hl sym">.</span>Concurrent<span class="hl sym">.</span>Parallel <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> par<span class="hl sym">,</span> parallelMap<span class="hl sym">;</span>
    <span class="hl sym">;</span>
<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Collections<span class="hl sym">.</span>List <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> cycle<span class="hl sym">,</span> head<span class="hl sym">,</span> map<span class="hl sym">,</span> replicate<span class="hl sym">,</span> tail<span class="hl sym">,</span> zip3<span class="hl sym">;</span>
    <span class="hl sym">;</span>
<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>System <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> concurrentRuntime<span class="hl sym">;</span>
    <span class="hl sym">;</span>


ringSize <span class="hl sym">::</span> Int<span class="hl sym">;</span>
ringSize <span class="hl sym">=</span> <span class="hl num">503</span><span class="hl sym">;</span>

<span class="hl com">/**</span>
<span class="hl com"> * this implements the thread body, taking tokens form its input queue,</span>
<span class="hl com"> * decrementing the token, and then putting it on the output queue.</span>
<span class="hl com"> * When the token is zero, the id is printed, and exit is called.</span>
<span class="hl com"> */</span>
threadBody <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> SynchronousQueue Int <span class="hl sym">-&gt;</span> SynchronousQueue Int <span class="hl sym">-&gt; ();</span>
threadBody <span class="hl sym">!</span>id <span class="hl sym">!</span>input <span class="hl sym">!</span>output <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        token <span class="hl sym">::</span> Int<span class="hl sym">;</span>
        token <span class="hl sym">=</span> eager $ <span class="hl sym">(</span>take input<span class="hl sym">);</span>
    <span class="hl kwa">in</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>token <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">then</span>
            printLine <span class="hl sym">(</span>intToString id<span class="hl sym">) `</span>seq<span class="hl sym">`</span>
            exit <span class="hl num">0</span>
        <span class="hl kwa">else</span>
            put output <span class="hl sym">(</span>token <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">) `</span>seq<span class="hl sym">`</span>
            threadBody id input output
    <span class="hl sym">;</span>


startThreads <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt; [()];</span>
startThreads <span class="hl sym">!</span>ringSize <span class="hl sym">!</span>token <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        queues <span class="hl sym">:: [</span>SynchronousQueue a<span class="hl sym">];</span>
        queues <span class="hl sym">=</span> map makeSynchronousQueue <span class="hl sym">(</span>replicate ringSize <span class="hl sym">());</span>

        ids <span class="hl sym">:: [</span>Int<span class="hl sym">];</span>
        ids <span class="hl sym">=</span> upFromTo <span class="hl num">1</span> ringSize<span class="hl sym">;</span>
    <span class="hl kwa">in</span>
        <span class="hl slc">//feed the token into the first queue</span>
        put <span class="hl sym">(</span>head queues<span class="hl sym">)</span> token
        <span class="hl sym">`</span>par<span class="hl sym">`</span>
        <span class="hl slc">//create threads running the threadBody func, with ids [1 .. ringSize]</span>
        parallelMap
            <span class="hl sym">(</span>\<span class="hl sym">!</span>args <span class="hl sym">-&gt;</span> threadBody args<span class="hl sym">.</span>#<span class="hl num">1</span> args<span class="hl sym">.</span>#<span class="hl num">2</span> args<span class="hl sym">.</span>#<span class="hl num">3</span><span class="hl sym">)</span>
            <span class="hl sym">(</span>zip3 ids queues <span class="hl sym">(</span>tail $ cycle queues<span class="hl sym">))</span>
    <span class="hl sym">;</span>

main <span class="hl sym">:: [</span>String<span class="hl sym">] -&gt; ();</span>
<span class="hl kwa">public</span> main <span class="hl sym">!</span>args <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        n <span class="hl sym">::</span> Int<span class="hl sym">;</span>
        n <span class="hl sym">=</span> stringToInt <span class="hl sym">(</span>head args<span class="hl sym">);</span>
    <span class="hl kwa">in</span>

        <span class="hl kwa">if</span> concurrentRuntime <span class="hl kwa">then</span>
            List<span class="hl sym">.</span>strictList <span class="hl sym">(</span>startThreads ringSize n<span class="hl sym">)</span>
            <span class="hl sym">`</span>seq<span class="hl sym">`</span>
            <span class="hl sym">()</span>
        <span class="hl kwa">else</span>
            error
                <span class="hl str">&quot;You must define the VM arg org.openquark.cal.machine.lecc.concurrent_runtime to run this program&quot;</span>
    <span class="hl sym">;</span>


<span class="hl com">/**</span>
<span class="hl com"> * A Synchronous queue has no storage. There must always be a matching put for</span>
<span class="hl com"> * every take and visa versa</span>
<span class="hl com"> */</span>
<span class="hl kwa">data public</span> SynchronousQueue a <span class="hl sym">=</span>
    <span class="hl kwa">private</span> SynchronousQueue jqueue <span class="hl sym">:: !</span>JSynchronousQueue
    <span class="hl sym">;</span>

<span class="hl com">/**</span>
<span class="hl com"> * This creates a Synchronous queue. Whenever you attempt to put an element</span>
<span class="hl com"> * into the queue it will block if there is not already a thread waiting on</span>
<span class="hl com"> * take. Get will block unless there is already a thread waiting on put.</span>
<span class="hl com"> */</span>
makeSynchronousQueue <span class="hl sym">:: () -&gt;</span> SynchronousQueue a<span class="hl sym">;</span>
<span class="hl kwa">public</span> makeSynchronousQueue <span class="hl sym">!</span>unused <span class="hl sym">=</span> SynchronousQueue <span class="hl sym">(</span>jmakeQueue<span class="hl sym">);</span>

<span class="hl com">/**</span>
<span class="hl com"> * Puts an element into the queue. This will block unless there is already a</span>
<span class="hl com"> * thread waiting on take.</span>
<span class="hl com"> *</span>
<span class="hl com"> * &#64;arg queue the queue to add to</span>
<span class="hl com"> * &#64;arg item the item to add</span>
<span class="hl com"> */</span>
put <span class="hl sym">::</span> SynchronousQueue a <span class="hl sym">-&gt;</span> a <span class="hl sym">-&gt; ();</span>
<span class="hl kwa">public</span> put <span class="hl sym">!</span>queue item <span class="hl sym">=</span>
    jput queue<span class="hl sym">.</span>SynchronousQueue<span class="hl sym">.</span>jqueue <span class="hl sym">(</span>output $ toCalValue item<span class="hl sym">);</span>

<span class="hl com">/**</span>
<span class="hl com"> * Takes an item from a queue. This will block, unless there is already a</span>
<span class="hl com"> * thread waiting on put.</span>
<span class="hl com"> *</span>
<span class="hl com"> * &#64;arg queue the queue to take an item from.</span>
<span class="hl com"> */</span>
take <span class="hl sym">::</span> SynchronousQueue a <span class="hl sym">-&gt;</span> a<span class="hl sym">;</span>
<span class="hl kwa">public</span> take <span class="hl sym">!</span>queue <span class="hl sym">=</span>
    unsafeFromCalValue $ input $ jtake queue<span class="hl sym">.</span>SynchronousQueue<span class="hl sym">.</span>jqueue<span class="hl sym">;</span>

<span class="hl kwa">data foreign unsafe import jvm</span> <span class="hl str">&quot;java.util.concurrent.SynchronousQueue&quot;</span>
    <span class="hl kwa">private</span> JSynchronousQueue<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;constructor&quot;</span>
    <span class="hl kwa">private</span> jmakeQueue <span class="hl sym">::</span> JSynchronousQueue<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;method put&quot;</span>
    <span class="hl kwa">private</span> jput <span class="hl sym">::</span> JSynchronousQueue <span class="hl sym">-&gt;</span> JObject <span class="hl sym">-&gt; ();</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;method take&quot;</span>
    <span class="hl kwa">private</span> jtake <span class="hl sym">::</span> JSynchronousQueue <span class="hl sym">-&gt;</span> JObject<span class="hl sym">;</span>


<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;static method java.lang.System.exit&quot;</span>
    <span class="hl kwa">private</span> exit <span class="hl sym">::</span> Int <span class="hl sym">-&gt; ();</span>
