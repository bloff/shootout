<source>
<def></def><slc>-- The Computer Language Benchmarks Game</slc><br />
<def></def><slc>-- http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>-- contributed by Sam Roberts</slc><br />
<def><br />
require</def><str>&quot;coroutine&quot;</str><def></def><br />
<br />
<slc>-- first and only argument is number of token passes</slc><br />
<def></def><kwa>local</kwa> <def>N</def> <sym>=</sym> <def></def><kwb>assert</kwb><def></def><sym>(</sym><def></def><kwb>tonumber</kwb><def></def><sym>(</sym><def>arg</def><sym>[</sym><def></def><num>1</num><def></def><sym>]))</sym><br />
<def></def><br />
<slc>-- fixed size pool</slc><br />
<def></def><kwa>local</kwa> <def>poolsize</def> <sym>=</sym> <def></def><num>503</num><br />
<def></def><br />
<slc>-- cache these to avoid global environment lookups</slc><br />
<def></def><kwa>local</kwa> <def>resume</def> <sym>=</sym> <def>coroutine</def><sym>.</sym><def>resume</def><br />
<kwa>local</kwa> <def>yield</def> <sym>=</sym> <def>coroutine</def><sym>.</sym><def>yield</def><br />
<br />
<kwa>local</kwa> <def>threads</def> <sym>= {}</sym><br />
<def></def><br />
<kwa>function</kwa> <def></def><kwd>body</kwd><def></def><sym>(</sym><def>token</def><sym>)</sym><br />
<def></def>  <kwa>while true do</kwa><br />
<def>    token</def> <sym>=</sym> <def></def><kwd>yield</kwd><def></def><sym>(</sym><def>token</def><sym>+</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>  <kwa>end</kwa><br />
<def></def><kwa>end</kwa><br />
<def></def><br />
<kwa>for</kwa> <def>id</def> <sym>=</sym> <def></def><num>1</num><def></def><sym>,</sym><def>poolsize</def> <kwa>do</kwa><br />
<def>  threads</def><sym>[</sym><def>id</def><sym>] =</sym> <def>coroutine</def><sym>.</sym><def></def><kwd>create</kwd><def></def><sym>(</sym><def>body</def><sym>)</sym><br />
<def></def><kwa>end</kwa><br />
<def></def><br />
<kwa>local</kwa> <def>id</def> <sym>=</sym> <def></def><num>0</num><br />
<def></def><kwa>local</kwa> <def>ok</def><br />
<kwa>local</kwa> <def>token</def> <sym>=</sym> <def></def><num>0</num><br />
<def></def><kwa>repeat</kwa><br />
<def>  id</def> <sym>= (</sym><def>id</def><sym>%</sym><def>poolsize</def><sym>)+</sym><def></def><num>1</num><br />
<def>  ok</def><sym>,</sym> <def>token</def> <sym>=</sym> <def></def><kwd>resume</kwd><def></def><sym>(</sym><def>threads</def><sym>[</sym><def>id</def><sym>],</sym> <def>token</def><sym>)</sym><br />
<def></def>  <slc>-- skip check for whether body raised exception</slc><br />
<def></def>  <slc>--assert(ok)</slc><br />
<def></def><kwa>until</kwa> <def>token</def> <sym>==</sym> <def>N</def><br />
<br />
<kwb>print</kwb><def></def><sym>(</sym><def>id</def><sym>)</sym><br />
<def></def><br />
</source>
