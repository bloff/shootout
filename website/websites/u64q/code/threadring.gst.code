<source>
<def></def><com>&quot;* The Computer Language Benchmarks Game</com><br />
<com>    http://shootout.alioth.debian.org/</com><br />
<com>    adapted from a program by Paolo Bonzini</com><br />
<com>    contributed by Isaac Gouy *&quot;</com><def>!</def><br />
<br />
<kwc>Object</kwc> <def></def><kwb>subclass:</kwb> <def></def><kwd>#Thread</kwd>   <def></def><kwb>instanceVariableNames:</kwb> <def></def><str>'name nextThread token semaphore done'</str><def></def>   <kwb>classVariableNames:</kwb> <def></def><str>''</str><def></def>   <kwb>poolDictionaries:</kwb> <def></def><str>''</str><def></def>   <kwb>category:</kwb> <def></def><str>'BenchmarksGame'</str><def> !<br />
<br />
!</def><kwc>Thread</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'accessing'</str><def>!</def><br />
<kwb>name:</kwb> <def>anInteger   name</def> <sym>:=</sym> <def>anInteger ! !<br />
<br />
!</def><kwc>Thread</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'accessing'</str><def>!</def><br />
<kwb>nextThread:</kwb> <def>aThread   nextThread</def> <sym>:=</sym> <def>aThread ! !<br />
<br />
!</def><kwc>Thread</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'accessing'</str><def>!tokenNotDone   semaphore</def> <kwb>wait</kwb><def></def><sym>.   ^</sym><def>token &gt;</def> <num>0</num> <def>! !<br />
<br />
!</def><kwc>Thread</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'accessing'</str><def>!</def><kwb>semaphore:</kwb> <def>aSemaphore   semaphore</def> <sym>:=</sym> <def>aSemaphore ! !<br />
<br />
!</def><kwc>Thread</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'accessing'</str><def>!</def><kwb>done:</kwb> <def>aSemaphore   done</def> <sym>:=</sym> <def>aSemaphore ! !<br />
<br />
!</def><kwc>Thread</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'accessing'</str><def>!<br />
fork</def>   <sym>[</sym> <def></def><kwa>self</kwa> <def></def><kwb>run</kwb> <def></def><sym>]</sym> <def></def><kwb>fork</kwb> <def>! !<br />
<br />
!</def><kwc>Thread</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'accessing'</str><def>!</def><br />
<kwb>run</kwb><br />
<def></def>   <sym>[</sym> <def></def><kwa>self</kwa> <def></def><kwb>tokenNotDone</kwb> <def></def><sym>]</sym> <def></def><kwb>whileTrue:</kwb> <def></def><sym>[</sym> <def>nextThread</def> <kwb>takeToken:</kwb> <def>token</def> <kwb>-</kwb> <def></def><num>1</num> <def></def><sym>].</sym><br />
<def></def>   <kwc>Tests</kwc> <def></def><kwb>stdout print:</kwb> <def>name</def><sym>;</sym> <def></def><kwb>nl</kwb><def></def><sym>.</sym><br />
<def>   done</def> <kwb>signal</kwb> <def>! !<br />
<br />
!</def><kwc>Thread</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'accessing'</str><def>!</def><kwb>takeToken:</kwb> <def>x   token</def> <sym>:=</sym> <def>x</def><sym>.</sym>   <def>semaphore</def> <kwb>signal</kwb> <def>! !<br />
<br />
<br />
!</def><kwc>Thread</kwc> <def></def><kwb>class methodsFor:</kwb> <def></def><str>'instance creation'</str><def>!new</def><br />
   <sym>^</sym><def></def><kwa>self</kwa> <def></def><kwb>basicNew semaphore:</kwb> <def></def><kwc>Semaphore</kwc> <def></def><kwb>new</kwb> <def>! !<br />
<br />
!</def><kwc>Thread</kwc> <def></def><kwb>class methodsFor:</kwb> <def></def><str>'instance creation'</str><def>!</def><kwb>named:</kwb> <def>anInteger</def> <kwb>next:</kwb> <def>aThread</def> <kwb>done:</kwb> <def>aSemaphore</def>   <sym>^</sym><def></def><kwa>self</kwa> <def></def><kwb>new name:</kwb> <def>anInteger</def><sym>;</sym> <def></def><kwb>nextThread:</kwb> <def>aThread</def><sym>;</sym> <def></def><kwb>done:</kwb> <def>aSemaphore</def><sym>;</sym> <def></def><kwb>fork</kwb> <def>! !<br />
<br />
<br />
!</def><kwc>Tests</kwc> <def></def><kwb>class methodsFor:</kwb> <def></def><str>'benchmarking'</str><def>!</def><kwb>threadRing:</kwb> <def>aSemaphore</def>   <kwd>| first last |</kwd><br />
<def></def>   <num>503</num> <def></def><kwb>to:</kwb> <def></def><num>1</num> <def></def><kwb>by: -</kwb><def></def><num>1</num> <def></def><kwb>do:</kwb> <def></def><sym>[</sym><def></def><kwd>:i</kwd><def></def><sym>|</sym><br />
<def>      first</def> <sym>:=</sym> <def></def><kwc>Thread</kwc> <def></def><kwb>named:</kwb> <def>i</def> <kwb>next:</kwb> <def>first</def> <kwb>done:</kwb> <def>aSemaphore</def><sym>.</sym><br />
<def>      last</def> <kwb>isNil ifTrue:</kwb> <def></def><sym>[</sym> <def>last</def> <sym>:=</sym> <def>first</def> <sym>].</sym><br />
<def></def>   <sym>].</sym><br />
<def>   last</def> <kwb>nextThread:</kwb> <def>first</def><sym>.   ^</sym><def>first ! !<br />
<br />
!</def><kwc>Tests</kwc> <def></def><kwb>class methodsFor:</kwb> <def></def><str>'benchmarking'</str><def>!threadring</def><br />
   <kwd>| done |</kwd>   <def></def><sym>(</sym><def></def><kwa>self</kwa> <def></def><kwb>threadRing:</kwb> <def></def><sym>(</sym><def>done</def> <sym>:=</sym> <def></def><kwc>Semaphore</kwc> <def></def><kwb>new</kwb><def></def><sym>))</sym> <def></def><kwb>takeToken:</kwb> <def></def><kwa>self</kwa> <def></def><kwb>arg</kwb><def></def><sym>.</sym><br />
<def>   done</def> <kwb>wait</kwb><def></def><sym>.   ^</sym><def></def><str>''</str><def>! !</def><br />
<br />
<br />
<br />
<kwc>Tests</kwc> <def></def><kwb>threadring</kwb><def>!</def><br />
</source>
