<source>
<def></def><com>/*   The Computer Language Shootout</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com>   C version by Greg Buchholz</com><br />
<com>   converted to C++ and modified by Paul Kitchin</com><br />
<com>*/</com><def></def><br />
<br />
<dir>#include &lt;complex&gt;</dir><br />
<def></def><dir>#include &lt;iostream&gt;</dir><br />
<def></def><dir>#include &lt;sstream&gt;</dir><br />
<def></def><dir>#include &lt;emmintrin.h&gt;</dir><br />
<def></def><br />
<kwc>typedef</kwc> <def>__m128d sse_packed_doubles_t</def><sym>;</sym><br />
<def></def><br />
<kwb>struct</kwb> <def>sse_packed_doubles</def><br />
<sym>{</sym><br />
<def></def>   <kwd>sse_packed_doubles</kwd><def></def><sym>()</sym><br />
<def></def>   <sym>{</sym><br />
<def></def>   <sym>}</sym><br />
<def></def>   <kwd>sse_packed_doubles</kwd><def></def><sym>(</sym><def></def><kwb>double</kwb> <def>first</def><sym>,</sym> <def></def><kwb>double</kwb> <def>second</def><sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def></def>      <kwb>double</kwb> <def>packed_values</def><sym>[</sym><def></def><num>2</num><def></def><sym>]</sym> <def></def><kwd>__attribute__</kwd><def></def><sym>((</sym><def></def><kwd>aligned</kwd><def></def><sym>(</sym><def></def><num>16</num><def></def><sym>))) = {</sym><def>first</def><sym>,</sym> <def>second</def><sym>};</sym><br />
<def>      values</def> <sym>=</sym> <def></def><kwd>_mm_load_pd</kwd><def></def><sym>(</sym><def>packed_values</def><sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def>   sse_packed_doubles</def> <sym>&amp;</sym> <def></def><kwd>assign</kwd><def></def><sym>(</sym><def></def><kwb>double</kwb> <def>first</def><sym>,</sym> <def></def><kwb>double</kwb> <def>second</def><sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def></def>      <kwb>double</kwb> <def>packed_values</def><sym>[</sym><def></def><num>2</num><def></def><sym>]</sym> <def></def><kwd>__attribute__</kwd><def></def><sym>((</sym><def></def><kwd>aligned</kwd><def></def><sym>(</sym><def></def><num>16</num><def></def><sym>))) = {</sym><def>first</def><sym>,</sym> <def>second</def><sym>};</sym><br />
<def>      values</def> <sym>=</sym> <def></def><kwd>_mm_load_pd</kwd><def></def><sym>(</sym><def>packed_values</def><sym>);</sym><br />
<def></def>      <kwa>return</kwa> <def></def><sym>*</sym><def></def><kwa>this</kwa><def></def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def>   sse_packed_doubles</def> <sym>&amp;</sym> <def></def><kwd>assign_multiplied</kwd><def></def><sym>(</sym><def>sse_packed_doubles</def> <kwb>const</kwb> <def></def><sym>&amp;</sym> <def>lhs</def><sym>,</sym> <def>sse_packed_doubles</def> <kwb>const</kwb> <def></def><sym>&amp;</sym> <def>rhs</def><sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def>      values</def> <sym>=</sym> <def></def><kwd>_mm_mul_pd</kwd><def></def><sym>(</sym><def>lhs</def><sym>.</sym><def>values</def><sym>,</sym> <def>rhs</def><sym>.</sym><def>values</def><sym>);</sym><br />
<def></def>      <kwa>return</kwa> <def></def><sym>*</sym><def></def><kwa>this</kwa><def></def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def>   sse_packed_doubles</def> <sym>&amp;</sym> <def></def><kwd>assign_subtracted</kwd><def></def><sym>(</sym><def>sse_packed_doubles</def> <kwb>const</kwb> <def></def><sym>&amp;</sym> <def>lhs</def><sym>,</sym> <def>sse_packed_doubles</def> <kwb>const</kwb> <def></def><sym>&amp;</sym> <def>rhs</def><sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def>      values</def> <sym>=</sym> <def></def><kwd>_mm_sub_pd</kwd><def></def><sym>(</sym><def>lhs</def><sym>.</sym><def>values</def><sym>,</sym> <def>rhs</def><sym>.</sym><def>values</def><sym>);</sym><br />
<def></def>      <kwa>return</kwa> <def></def><sym>*</sym><def></def><kwa>this</kwa><def></def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def>   sse_packed_doubles_t values</def><sym>;</sym><br />
<def></def><sym>};</sym><br />
<def><br />
sse_packed_doubles</def> <sym>&amp;</sym> <def></def><kwc>operator</kwc><def></def><sym>+=(</sym><def>sse_packed_doubles</def> <sym>&amp;</sym> <def>lhs</def><sym>,</sym> <def>sse_packed_doubles</def> <kwb>const</kwb> <def></def><sym>&amp;</sym> <def>rhs</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def>   lhs</def><sym>.</sym><def>values</def> <sym>=</sym> <def></def><kwd>_mm_add_pd</kwd><def></def><sym>(</sym><def>lhs</def><sym>.</sym><def>values</def><sym>,</sym> <def>rhs</def><sym>.</sym><def>values</def><sym>);</sym><br />
<def></def>   <kwa>return</kwa> <def>lhs</def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def><br />
sse_packed_doubles</def> <sym>&amp;</sym> <def></def><kwc>operator</kwc><def></def><sym>-=(</sym><def>sse_packed_doubles</def> <sym>&amp;</sym> <def>lhs</def><sym>,</sym> <def>sse_packed_doubles</def> <kwb>const</kwb> <def></def><sym>&amp;</sym> <def>rhs</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def>   lhs</def><sym>.</sym><def>values</def> <sym>=</sym> <def></def><kwd>_mm_sub_pd</kwd><def></def><sym>(</sym><def>lhs</def><sym>.</sym><def>values</def><sym>,</sym> <def>rhs</def><sym>.</sym><def>values</def><sym>);</sym><br />
<def></def>   <kwa>return</kwa> <def>lhs</def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def><br />
sse_packed_doubles</def> <sym>&amp;</sym> <def></def><kwc>operator</kwc><def></def><sym>*=(</sym><def>sse_packed_doubles</def> <sym>&amp;</sym> <def>lhs</def><sym>,</sym> <def>sse_packed_doubles</def> <kwb>const</kwb> <def></def><sym>&amp;</sym> <def>rhs</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def>   lhs</def><sym>.</sym><def>values</def> <sym>=</sym> <def></def><kwd>_mm_mul_pd</kwd><def></def><sym>(</sym><def>lhs</def><sym>.</sym><def>values</def><sym>,</sym> <def>rhs</def><sym>.</sym><def>values</def><sym>);</sym><br />
<def></def>   <kwa>return</kwa> <def>lhs</def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>struct</kwb> <def>sse_packed_complex</def><br />
<sym>{</sym><br />
<def></def>   <kwb>void</kwb> <def></def><kwd>values</kwd><def></def><sym>(</sym><def></def><kwb>double</kwb> <def></def><sym>*</sym> <def></def><kwb>const</kwb> <def>values</def><sym>)</sym> <def></def><kwb>const</kwb><br />
<def></def>   <sym>{</sym><br />
<def></def>      <kwd>_mm_store_pd</kwd><def></def><sym>(</sym><def>values</def><sym>,</sym> <def>real</def><sym>.</sym><def>values</def><sym>);</sym><br />
<def></def>      <kwd>_mm_store_pd</kwd><def></def><sym>(</sym><def>values</def> <sym>+</sym> <def></def><num>2</num><def></def><sym>,</sym> <def>imaginary</def><sym>.</sym><def>values</def><sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def>   sse_packed_doubles real</def><sym>;</sym><br />
<def>   sse_packed_doubles imaginary</def><sym>;</sym><br />
<def></def><sym>};</sym><br />
<def></def><br />
<kwb>int</kwb> <def></def><kwd>main</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>argc</def><sym>,</sym> <def></def><kwb>char</kwb> <def></def><sym>* *</sym> <def>argv</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>   <kwb>char</kwb> <def>bit_number</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>   <kwb>char</kwb> <def>byte_accumulator</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>   <kwb>unsigned int const</kwb> <def>iterations</def> <sym>=</sym> <def></def><num>50</num><def></def><sym>;</sym><br />
<def></def>   <kwb>double const</kwb> <def>limit</def> <sym>=</sym> <def></def><num>2.0</num> <def></def><sym>*</sym> <def></def><num>2.0</num><def></def><sym>;</sym><br />
<def><br />
   std</def><sym>::</sym><def>ios_base</def><sym>::</sym><def></def><kwd>sync_with_stdio</kwd><def></def><sym>(</sym><def></def><kwa>false</kwa><def></def><sym>);</sym><br />
<def></def>   <kwa>if</kwa> <def></def><sym>(</sym><def>argc</def> <sym>!=</sym> <def></def><num>2</num><def></def><sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def>      std</def><sym>::</sym><def>cerr</def> <sym>&lt;&lt;</sym> <def></def><str>&quot;usage: mandlebrot &lt;n&gt;</str><esc>\n</esc><str>&quot;</str><def></def><sym>;</sym><br />
<def></def>      <kwa>return</kwa> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def>   <kwb>unsigned int</kwb> <def>dimension</def><sym>;</sym><br />
<def></def>   <sym>{</sym><br />
<def>      std</def><sym>::</sym><def>stringstream</def> <kwd>convertor</kwd><def></def><sym>(</sym><def>argv</def><sym>[</sym><def></def><num>1</num><def></def><sym>]);</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(!(</sym><def>convertor</def> <sym>&gt;&gt;</sym> <def>dimension</def><sym>) || !</sym><def>convertor</def><sym>.</sym><def></def><kwd>eof</kwd><def></def><sym>())</sym><br />
<def></def>      <sym>{</sym><br />
<def>         std</def><sym>::</sym><def>cerr</def> <sym>&lt;&lt;</sym> <def></def><str>&quot;usage: mandlebrot &lt;n&gt;</str><esc>\n</esc><str>&quot;</str><def></def><sym>;</sym><br />
<def>         std</def><sym>::</sym><def>cerr</def> <sym>&lt;&lt;</sym> <def></def><str>&quot;   n must be an integer</str><esc>\n</esc><str>&quot;</str><def></def><sym>;</sym><br />
<def></def>         <kwa>return</kwa> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def><br />
   std</def><sym>::</sym><def>cout</def> <sym>&lt;&lt;</sym> <def></def><str>&quot;P4</str><esc>\n</esc><str>&quot;</str><def></def> <sym>&lt;&lt;</sym> <def>dimension</def> <sym>&lt;&lt;</sym> <def></def><str>&quot; &quot;</str><def></def> <sym>&lt;&lt;</sym> <def>dimension</def> <sym>&lt;&lt;</sym> <def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>;</sym><br />
<def><br />
   sse_packed_complex Z</def><sym>;</sym><br />
<def>   sse_packed_complex C</def><sym>;</sym><br />
<def>   sse_packed_complex Z_components_squared</def><sym>;</sym><br />
<def>   sse_packed_doubles</def> <kwd>one</kwd><def></def><sym>(</sym><def></def><num>1.0</num><def></def><sym>,</sym> <def></def><num>1.0</num><def></def><sym>);</sym><br />
<def>   sse_packed_doubles</def> <kwd>one_point_five</kwd><def></def><sym>(</sym><def></def><num>1.5</num><def></def><sym>,</sym> <def></def><num>1.5</num><def></def><sym>);</sym><br />
<def>   sse_packed_doubles</def> <kwd>two</kwd><def></def><sym>(</sym><def></def><num>2.0</num><def></def><sym>,</sym> <def></def><num>2.0</num><def></def><sym>);</sym><br />
<def></def>   <kwb>double</kwb> <def>Z_squared_values</def><sym>[</sym><def></def><num>4</num><def></def><sym>]</sym> <def></def><kwd>__attribute__</kwd><def></def><sym>((</sym><def></def><kwd>aligned</kwd><def></def><sym>(</sym><def></def><num>16</num><def></def><sym>)));</sym><br />
<def></def>   <kwa>for</kwa>  <def></def><sym>(</sym><def></def><kwb>double</kwb> <def>y</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>y</def> <sym>&lt;</sym> <def>dimension</def><sym>; ++</sym><def>y</def><sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def>      C</def><sym>.</sym><def>imaginary</def><sym>.</sym><def></def><kwd>assign</kwd><def></def><sym>(</sym><def>y</def> <sym>/ (</sym><def>dimension</def> <sym>/</sym> <def></def><num>2</num><def></def><sym>),</sym> <def>y</def> <sym>/ (</sym><def>dimension</def> <sym>/</sym> <def></def><num>2</num><def></def><sym>));</sym><br />
<def>      C</def><sym>.</sym><def>imaginary</def> <sym>-=</sym> <def>one</def><sym>;</sym><br />
<def></def>      <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>double</kwb> <def>x</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>x</def> <sym>&lt;</sym> <def>dimension</def><sym>;</sym> <def>x</def> <sym>+=</sym> <def></def><num>2</num><def></def><sym>)</sym><br />
<def></def>      <sym>{</sym><br />
<def>         C</def><sym>.</sym><def>real</def><sym>.</sym><def></def><kwd>assign</kwd><def></def><sym>(</sym><def>x</def> <sym>/ (</sym><def>dimension</def> <sym>/</sym> <def></def><num>2</num><def></def><sym>), (</sym><def>x</def> <sym>+</sym> <def></def><num>1.0</num><def></def><sym>) / (</sym><def>dimension</def> <sym>/</sym> <def></def><num>2</num><def></def><sym>));</sym><br />
<def>         C</def><sym>.</sym><def>real</def> <sym>-=</sym> <def>one_point_five</def><sym>;</sym><br />
<def>         Z</def><sym>.</sym><def>imaginary</def> <sym>=</sym> <def>C</def><sym>.</sym><def>imaginary</def><sym>;</sym><br />
<def>         Z</def><sym>.</sym><def>real</def> <sym>=</sym> <def>C</def><sym>.</sym><def>real</def><sym>;</sym><br />
<def>         Z_components_squared</def><sym>.</sym><def>imaginary</def><sym>.</sym><def></def><kwd>assign_multiplied</kwd><def></def><sym>(</sym><def>Z</def><sym>.</sym><def>imaginary</def><sym>,</sym> <def>Z</def><sym>.</sym><def>imaginary</def><sym>);</sym><br />
<def>         Z_components_squared</def><sym>.</sym><def>real</def><sym>.</sym><def></def><kwd>assign_multiplied</kwd><def></def><sym>(</sym><def>Z</def><sym>.</sym><def>real</def><sym>,</sym> <def>Z</def><sym>.</sym><def>real</def><sym>);</sym><br />
<def>         Z_components_squared</def><sym>.</sym><def></def><kwd>values</kwd><def></def><sym>(</sym><def>Z_squared_values</def><sym>);</sym><br />
<def></def><br />
         <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>unsigned int</kwb> <def>i</def> <sym>=</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>            <sym>(</sym><def>Z_squared_values</def><sym>[</sym><def></def><num>0</num><def></def><sym>] +</sym> <def>Z_squared_values</def><sym>[</sym><def></def><num>2</num><def></def><sym>] &lt;=</sym> <def>limit</def> <sym>||</sym><br />
<def>               Z_squared_values</def><sym>[</sym><def></def><num>1</num><def></def><sym>] +</sym> <def>Z_squared_values</def><sym>[</sym><def></def><num>3</num><def></def><sym>] &lt;=</sym> <def>limit</def><sym>) &amp;&amp;</sym><br />
<def>            i</def> <sym>&lt;</sym> <def>iterations</def><sym>; ++</sym><def>i</def><sym>)</sym><br />
<def></def>         <sym>{</sym><br />
<def>            Z</def><sym>.</sym><def>imaginary</def> <sym>*=</sym> <def>Z</def><sym>.</sym><def>real</def><sym>;</sym><br />
<def>            Z</def><sym>.</sym><def>imaginary</def> <sym>*=</sym> <def>two</def><sym>;</sym><br />
<def>            Z</def><sym>.</sym><def>imaginary</def> <sym>+=</sym> <def>C</def><sym>.</sym><def>imaginary</def><sym>;</sym><br />
<def>            Z</def><sym>.</sym><def>real</def><sym>.</sym><def></def><kwd>assign_subtracted</kwd><def></def><sym>(</sym><def>Z_components_squared</def><sym>.</sym><def>real</def><sym>,</sym> <def>Z_components_squared</def><sym>.</sym><def>imaginary</def><sym>);</sym><br />
<def>            Z</def><sym>.</sym><def>real</def> <sym>+=</sym> <def>C</def><sym>.</sym><def>real</def><sym>;</sym><br />
<def>            Z_components_squared</def><sym>.</sym><def>imaginary</def><sym>.</sym><def></def><kwd>assign_multiplied</kwd><def></def><sym>(</sym><def>Z</def><sym>.</sym><def>imaginary</def><sym>,</sym> <def>Z</def><sym>.</sym><def>imaginary</def><sym>);</sym><br />
<def>            Z_components_squared</def><sym>.</sym><def>real</def><sym>.</sym><def></def><kwd>assign_multiplied</kwd><def></def><sym>(</sym><def>Z</def><sym>.</sym><def>real</def><sym>,</sym> <def>Z</def><sym>.</sym><def>real</def><sym>);</sym><br />
<def>            Z_components_squared</def><sym>.</sym><def></def><kwd>values</kwd><def></def><sym>(</sym><def>Z_squared_values</def><sym>);</sym><br />
<def></def>         <sym>}</sym><br />
<def>         byte_accumulator</def> <sym>= (</sym><def>byte_accumulator</def> <sym>*</sym> <def></def><num>4</num><def></def><sym>) |</sym><br />
<def></def>            <sym>((</sym><def>Z_squared_values</def><sym>[</sym><def></def><num>0</num><def></def><sym>] +</sym> <def>Z_squared_values</def><sym>[</sym><def></def><num>2</num><def></def><sym>] &lt;=</sym> <def>limit</def><sym>) *</sym> <def></def><num>2</num><def></def><sym>) |</sym><br />
<def></def>            <sym>(</sym><def>Z_squared_values</def><sym>[</sym><def></def><num>1</num><def></def><sym>] +</sym> <def>Z_squared_values</def><sym>[</sym><def></def><num>3</num><def></def><sym>] &lt;=</sym> <def>limit</def><sym>);</sym><br />
<def><br />
         bit_number</def> <sym>+=</sym> <def></def><num>2</num><def></def><sym>;</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def></def><kwd>__builtin_expect</kwd><def></def><sym>(</sym><def>bit_number</def> <sym>==</sym> <def></def><num>8</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>))</sym><br />
<def></def>         <sym>{</sym><br />
<def>            std</def><sym>::</sym><def>cout</def> <sym>&lt;&lt;</sym> <def>byte_accumulator</def><sym>;</sym><br />
<def>            bit_number</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>            byte_accumulator</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>         <kwa>else if</kwa> <def></def><sym>(</sym><def></def><kwd>__builtin_expect</kwd><def></def><sym>(</sym><def>x</def> <sym>==</sym> <def>dimension</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>))</sym><br />
<def></def>         <sym>{</sym><br />
<def>            byte_accumulator</def> <sym>&lt;&lt;=</sym> <def></def><num>8</num> <def></def><sym>- (</sym><def>dimension</def> <sym>&amp;</sym> <def></def><num>7</num><def></def><sym>);</sym><br />
<def>            std</def><sym>::</sym><def>cout</def> <sym>&lt;&lt;</sym> <def>byte_accumulator</def><sym>;</sym><br />
<def>            bit_number</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>            byte_accumulator</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
