<source>
<def></def><com>/* The Computer Language Benchmarks Game</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com></com><br />
<com>   Contributed by Vincent Kraeutler</com><br />
<com>*/</com><def></def><br />
<kwa>import</kwa> <def>scala</def><sym>.</sym><def>actors</def><sym>.</sym><def>Actor</def><br />
<kwa>import</kwa> <def>scala</def><sym>.</sym><def>actors</def><sym>.</sym><def>Actor</def><sym>.</sym><def>_</def><br />
<br />
<kwa>object</kwa> <def>threadring</def> <sym>{</sym><br />
<def></def><br />
    <kwa>class</kwa> <def></def><kwc>Thread</kwc><def></def><sym>(</sym><def>_label</def><sym>:</sym> <def></def><kwb>int</kwb><def></def><sym>)</sym> <def></def><kwa>extends</kwa> <def>Actor</def> <sym>{</sym><br />
<def></def><br />
        <kwa>val</kwa> <def>label</def> <sym>=</sym> <def>_label</def><br />
        <kwa>var</kwa> <def>next</def> <sym>:</sym> <def></def><kwc>Thread</kwc> <def></def><sym>=</sym> <def>null</def><br />
<br />
        <kwa>def</kwa> <def>act</def><sym>() {</sym> <def>loop</def> <sym>{</sym> <def>react</def> <sym>{</sym><br />
<def></def>                        <kwa>case</kwa> <def></def><num>0</num> <def></def><sym>=&gt; {</sym><br />
<def>                                println</def><sym>(</sym><def>label</def><sym>)</sym><br />
<def></def>                                <kwc>System</kwc><def></def><sym>.</sym><def>exit</def><sym>(</sym><def></def><num>0</num><def></def><sym>)</sym><br />
<def></def>                        <sym>}</sym><br />
<def></def>                        <kwa>case</kwa> <def></def><sym>(</sym><def>n</def><sym>:</sym> <def></def><kwb>int</kwb><def></def><sym>) =&gt; {</sym><br />
<def>                                next</def> <sym>!</sym> <def>n</def> <sym>-</sym> <def></def><num>1</num><br />
<def></def>                        <sym>}</sym><br />
<def></def>                <sym>}}}</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <slc>// create the threads</slc><br />
<def></def>    <kwa>var</kwa> <def>ring</def> <sym>=</sym> <def></def><kwc>List</kwc><def></def><sym>.</sym><def>range</def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def></def><num>503</num><def></def><sym>).</sym><def>map</def> <sym>{</sym> <def>i</def> <sym>=&gt;</sym> <def></def><kwa>new</kwa> <def></def><kwc>Thread</kwc><def></def><sym>(</sym><def>i</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>) }.</sym><def>toArray</def><br />
<br />
    <slc>// hook them up</slc><br />
<def>    ring</def><sym>.</sym><def>foreach</def><sym>{</sym><def>t</def> <sym>=&gt; {</sym><br />
<def></def>                    <kwa>val</kwa> <def>nextIndex</def> <sym>= (</sym><def>t</def><sym>.</sym><def>label</def><sym>) %</sym> <def>ring</def><sym>.</sym><def>length<br />
                    t</def><sym>.</sym><def>next</def> <sym>=</sym> <def>ring</def><sym>(</sym><def>nextIndex</def><sym>)</sym><br />
<def>                    t</def><sym>.</sym><def>start</def><br />
                 <sym>}}</sym><br />
<def></def><br />
    <kwa>def</kwa> <def>main</def><sym>(</sym><def>args</def> <sym>:</sym> <def></def><kwc>Array</kwc><def></def><sym>[</sym><def></def><kwc>String</kwc><def></def><sym>]) :</sym> <def>Unit</def> <sym>= {</sym><br />
<def></def>           <kwa>val</kwa> <def>nHops</def> <sym>=</sym> <def></def><kwc>Integer</kwc><def></def><sym>.</sym><def>parseInt</def><sym>(</sym><def>args</def><sym>(</sym><def></def><num>0</num><def></def><sym>))</sym><br />
<def>           ring</def><sym>(</sym><def></def><num>0</num><def></def><sym>) !</sym> <def>nHops</def><br />
    <sym>}</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
