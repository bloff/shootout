<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by The Go Authors.</span>
<span class="hl com"> * Based on spectral-norm.c by Sebastien Loisel</span>
<span class="hl com"> * flag.Arg hack by Isaac Gouy</span>
<span class="hl com"> */</span>

<span class="hl kwa">package</span> main

<span class="hl kwa">import</span> <span class="hl sym">(</span>
   <span class="hl str">&quot;flag&quot;</span><span class="hl sym">;</span>
   <span class="hl str">&quot;fmt&quot;</span><span class="hl sym">;</span>
   <span class="hl str">&quot;math&quot;</span><span class="hl sym">;</span>
   <span class="hl str">&quot;runtime&quot;</span><span class="hl sym">;</span>
   <span class="hl str">&quot;strconv&quot;</span><span class="hl sym">;</span>
<span class="hl sym">)</span>

<span class="hl kwa">var</span> n <span class="hl sym">=</span> <span class="hl num">0</span>    <span class="hl sym">//</span> <span class="hl kwa">var</span> n <span class="hl sym">=</span> flag<span class="hl sym">.</span>Int<span class="hl sym">(</span><span class="hl str">&quot;n&quot;</span><span class="hl sym">,</span> <span class="hl num">2000</span><span class="hl sym">,</span> <span class="hl str">&quot;count&quot;</span><span class="hl sym">)</span>
<span class="hl kwa">var</span> nCPU <span class="hl sym">=</span> <span class="hl num">4</span> <span class="hl sym">//</span> <span class="hl kwa">var</span> nCPU <span class="hl sym">=</span> flag<span class="hl sym">.</span>Int<span class="hl sym">(</span><span class="hl str">&quot;ncpu&quot;</span><span class="hl sym">,</span> <span class="hl num">4</span><span class="hl sym">,</span> <span class="hl str">&quot;number of cpus&quot;</span><span class="hl sym">)</span>

<span class="hl kwa">func</span> evalA<span class="hl sym">(</span>i<span class="hl sym">,</span> j int<span class="hl sym">)</span> float64 <span class="hl sym">{</span>
   <span class="hl kwa">return</span> <span class="hl num">1</span> <span class="hl sym">/</span> float64<span class="hl sym">(((</span>i <span class="hl sym">+</span> j<span class="hl sym">)*(</span>i <span class="hl sym">+</span> j <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)/</span><span class="hl num">2</span> <span class="hl sym">+</span> i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">));</span>
<span class="hl sym">}</span>

<span class="hl kwa">type</span> Vec <span class="hl sym">[]</span>float64

<span class="hl kwa">func</span> <span class="hl sym">(</span>v Vec<span class="hl sym">)</span> Times<span class="hl sym">(</span>i<span class="hl sym">,</span> n int<span class="hl sym">,</span> u Vec<span class="hl sym">,</span> c <span class="hl kwa">chan</span> int<span class="hl sym">) {</span>
   <span class="hl kwa">for</span> <span class="hl sym">;</span> i <span class="hl sym">&lt;</span> n<span class="hl sym">;</span> i<span class="hl sym">++ {</span>
      v<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwa">for</span> j <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span> j <span class="hl sym">&lt;</span> len<span class="hl sym">(</span>u<span class="hl sym">);</span> j<span class="hl sym">++ {</span>
         v<span class="hl sym">[</span>i<span class="hl sym">] +=</span> evalA<span class="hl sym">(</span>i<span class="hl sym">,</span> j<span class="hl sym">)*</span>u<span class="hl sym">[</span>j<span class="hl sym">];</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
   c <span class="hl sym">&lt;-</span> <span class="hl num">1</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwa">func</span> <span class="hl sym">(</span>v Vec<span class="hl sym">)</span> TimesTransp<span class="hl sym">(</span>i<span class="hl sym">,</span> n int<span class="hl sym">,</span> u Vec<span class="hl sym">,</span> c <span class="hl kwa">chan</span> int<span class="hl sym">) {</span>
   <span class="hl kwa">for</span> <span class="hl sym">;</span> i <span class="hl sym">&lt;</span> n<span class="hl sym">;</span> i<span class="hl sym">++ {</span>
      v<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwa">for</span> j <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span> j <span class="hl sym">&lt;</span> len<span class="hl sym">(</span>u<span class="hl sym">);</span> j<span class="hl sym">++ {</span>
         v<span class="hl sym">[</span>i<span class="hl sym">] +=</span> evalA<span class="hl sym">(</span>j<span class="hl sym">,</span> i<span class="hl sym">)*</span>u<span class="hl sym">[</span>j<span class="hl sym">];</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
   c <span class="hl sym">&lt;-</span> <span class="hl num">1</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwa">func</span> wait<span class="hl sym">(</span>c <span class="hl kwa">chan</span> int<span class="hl sym">) {</span>
   <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> nCPU<span class="hl sym">;</span> i<span class="hl sym">++ {</span>
      <span class="hl sym">&lt;-</span>c
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwa">func</span> <span class="hl sym">(</span>v Vec<span class="hl sym">)</span> ATimesTransp<span class="hl sym">(</span>u Vec<span class="hl sym">) {</span>
   x <span class="hl sym">:=</span> make<span class="hl sym">(</span>Vec<span class="hl sym">,</span> len<span class="hl sym">(</span>u<span class="hl sym">));</span>
   c <span class="hl sym">:=</span> make<span class="hl sym">(</span><span class="hl kwa">chan</span> int<span class="hl sym">,</span> nCPU<span class="hl sym">);</span>
   <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> nCPU<span class="hl sym">;</span> i<span class="hl sym">++ {</span>
      <span class="hl kwa">go</span> x<span class="hl sym">.</span>Times<span class="hl sym">(</span>i<span class="hl sym">*</span>len<span class="hl sym">(</span>v<span class="hl sym">) /</span> nCPU<span class="hl sym">, (</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)*</span>len<span class="hl sym">(</span>v<span class="hl sym">) /</span> nCPU<span class="hl sym">,</span> u<span class="hl sym">,</span> c<span class="hl sym">);</span>
   <span class="hl sym">}</span>
   wait<span class="hl sym">(</span>c<span class="hl sym">);</span>
   <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> nCPU<span class="hl sym">;</span> i<span class="hl sym">++ {</span>
      <span class="hl kwa">go</span> v<span class="hl sym">.</span>TimesTransp<span class="hl sym">(</span>i<span class="hl sym">*</span>len<span class="hl sym">(</span>v<span class="hl sym">) /</span> nCPU<span class="hl sym">, (</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)*</span>len<span class="hl sym">(</span>v<span class="hl sym">) /</span> nCPU<span class="hl sym">,</span> x<span class="hl sym">,</span> c<span class="hl sym">);</span>
   <span class="hl sym">}</span>
   wait<span class="hl sym">(</span>c<span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwa">func</span> main<span class="hl sym">() {</span>
   flag<span class="hl sym">.</span>Parse<span class="hl sym">();</span>
   <span class="hl kwa">if</span> flag<span class="hl sym">.</span>NArg<span class="hl sym">() &gt;</span> <span class="hl num">0</span> <span class="hl sym">{</span> n<span class="hl sym">,</span>_ <span class="hl sym">=</span> strconv<span class="hl sym">.</span>Atoi<span class="hl sym">(</span> flag<span class="hl sym">.</span>Arg<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">) ) }</span>
   runtime<span class="hl sym">.</span>GOMAXPROCS<span class="hl sym">(</span>nCPU<span class="hl sym">);</span>

   N <span class="hl sym">:=</span> n<span class="hl sym">;</span>
   u <span class="hl sym">:=</span> make<span class="hl sym">(</span>Vec<span class="hl sym">,</span> N<span class="hl sym">);</span>
   <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> N<span class="hl sym">;</span> i<span class="hl sym">++ {</span>
      u<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl num">1</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>
   v <span class="hl sym">:=</span> make<span class="hl sym">(</span>Vec<span class="hl sym">,</span> N<span class="hl sym">);</span>
   <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">10</span><span class="hl sym">;</span> i<span class="hl sym">++ {</span>
      v<span class="hl sym">.</span>ATimesTransp<span class="hl sym">(</span>u<span class="hl sym">);</span>
      u<span class="hl sym">.</span>ATimesTransp<span class="hl sym">(</span>v<span class="hl sym">);</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">var</span> vBv<span class="hl sym">,</span> vv float64<span class="hl sym">;</span>
   <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> N<span class="hl sym">;</span> i<span class="hl sym">++ {</span>
      vBv <span class="hl sym">+=</span> u<span class="hl sym">[</span>i<span class="hl sym">]*</span>v<span class="hl sym">[</span>i<span class="hl sym">];</span>
      vv <span class="hl sym">+=</span> v<span class="hl sym">[</span>i<span class="hl sym">]*</span>v<span class="hl sym">[</span>i<span class="hl sym">];</span>
   <span class="hl sym">}</span>
   fmt<span class="hl sym">.</span>Printf<span class="hl sym">(</span><span class="hl str">&quot;%0.9f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> math<span class="hl sym">.</span>Sqrt<span class="hl sym">(</span>vBv<span class="hl sym">/</span>vv<span class="hl sym">));</span>
<span class="hl sym">}</span>
