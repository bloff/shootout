<source>
<def></def><slc>;; ---------------------------------------------------------------------</slc><br />
<def></def><slc>;; The Great Computer Language Shootout</slc><br />
<def></def><slc>;; http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>;;</slc><br />
<def></def><slc>;; Tested with PCRE [compiler must be built with PCRE already installed</slc><br />
<def></def><slc>;; else other regex routines (with different behaviours) will be used].</slc><br />
<def></def><slc>;; Regex performance appears reasonable, but file loading [of 'large'</slc><br />
<def></def><slc>;; files] performance requires tweaking to effect a significant improvement.</slc><br />
<def></def><slc>;;</slc><br />
<def></def><slc>;; Contributed by Anthony Borla</slc><br />
<def></def><slc>;; ---------------------------------------------------------------------</slc><br />
<def></def><br />
<sym>(</sym><def>module regexdna mzscheme</def><br />
<br />
  <sym>(</sym><def>require</def> <sym>(</sym><def>lib</def> <str>&quot;port.ss&quot;</str><def></def><sym>))</sym><br />
<def></def><br />
  <slc>;; -------------------------------</slc><br />
<def></def><br />
  <sym>(</sym><def>define VARIANTS</def><br />
    <sym>'(</sym><def>#</def><str>&quot;agggtaaa|tttaccct&quot;</str><def> #</def><str>&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</str><def> #</def><str>&quot;a[act]ggtaaa|tttacc[agt]t&quot;</str><def><br />
      #</def><str>&quot;ag[act]gtaaa|tttac[agt]ct&quot;</str><def> #</def><str>&quot;agg[act]taaa|ttta[agt]cct&quot;</str><def> #</def><str>&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</str><def><br />
      #</def><str>&quot;agggt[cgt]aa|tt[acg]accct&quot;</str><def> #</def><str>&quot;agggta[cgt]a|t[acg]taccct&quot;</str><def> #</def><str>&quot;agggtaa[cgt]|[acg]ttaccct&quot;</str><def></def><sym>))</sym><br />
<def></def><br />
<br />
  <sym>(</sym><def>define IUBS</def><br />
    <sym>'((</sym><def>#</def><str>&quot;B&quot;</str><def> #</def><str>&quot;(c|g|t)&quot;</str><def></def><sym>) (</sym><def>#</def><str>&quot;D&quot;</str><def> #</def><str>&quot;(a|g|t)&quot;</str><def></def><sym>) (</sym><def>#</def><str>&quot;H&quot;</str><def> #</def><str>&quot;(a|c|t)&quot;</str><def></def><sym>)</sym><br />
<def></def>      <sym>(</sym><def>#</def><str>&quot;K&quot;</str><def> #</def><str>&quot;(g|t)&quot;</str><def></def><sym>) (</sym><def>#</def><str>&quot;M&quot;</str><def> #</def><str>&quot;(a|c)&quot;</str><def></def><sym>) (</sym><def>#</def><str>&quot;N&quot;</str><def> #</def><str>&quot;(a|c|g|t)&quot;</str><def></def><sym>)</sym><br />
<def></def>      <sym>(</sym><def>#</def><str>&quot;R&quot;</str><def> #</def><str>&quot;(a|g)&quot;</str><def></def><sym>) (</sym><def>#</def><str>&quot;S&quot;</str><def> #</def><str>&quot;(c|g)&quot;</str><def></def><sym>) (</sym><def>#</def><str>&quot;V&quot;</str><def> #</def><str>&quot;(a|c|g)&quot;</str><def></def><sym>)</sym><br />
<def></def>      <sym>(</sym><def>#</def><str>&quot;W&quot;</str><def> #</def><str>&quot;(a|t)&quot;</str><def></def><sym>) (</sym><def>#</def><str>&quot;Y&quot;</str><def> #</def><str>&quot;(c|t)&quot;</str><def></def><sym>)))</sym><br />
<def></def><br />
  <slc>;; -------------------------------</slc><br />
<def></def><br />
  <sym>(</sym><def>define</def> <sym>(</sym><def>ci</def><sym>-</sym><def>byte</def><sym>-</sym><def>regexp s</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def>byte</def><sym>-</sym><def>regexp</def> <sym>(</sym><def>ci</def><sym>-</sym><def>pattern s</def><sym>)))</sym><br />
<def></def>  <sym>(</sym><def>define</def> <sym>(</sym><def>ci</def><sym>-</sym><def>pattern s</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def>let</def> <sym>([</sym><def>m</def> <sym>(</sym><def>regexp</def><sym>-</sym><def>match #rx#</def><str>&quot;^(.*)</str><esc>\\</esc><str>[([^]]*)</str><esc>\\</esc><str>](.*)$&quot;</str><def> s</def><sym>)])</sym><br />
<def></def>      <sym>(</sym><def></def><kwa>if</kwa> <def>m</def><br />
	  <sym>(</sym><def>bytes</def><sym>-</sym><def></def><kwa>append</kwa> <def></def><sym>(</sym><def>ci</def><sym>-</sym><def>pattern</def> <sym>(</sym><def></def><kwa>cadr</kwa> <def>m</def><sym>))</sym><br />
<def>			#</def><str>&quot;[&quot;</str><def></def><br />
			<sym>(</sym><def>regexp</def><sym>-</sym><def>replace</def><sym>*</sym> <def>#rx#</def><str>&quot;[a-zA-Z]&quot;</str><def></def> <sym>(</sym><def></def><kwa>caddr</kwa> <def>m</def><sym>)</sym> <def>both</def><sym>-</sym><def>cases</def><sym>)</sym><br />
<def>			#</def><str>&quot;]&quot;</str><def></def><br />
			<sym>(</sym><def>ci</def><sym>-</sym><def>pattern</def> <sym>(</sym><def></def><kwa>cadddr</kwa> <def>m</def><sym>)))</sym><br />
<def></def>	  <sym>(</sym><def>regexp</def><sym>-</sym><def>replace</def><sym>*</sym> <def>#rx#</def><str>&quot;[a-zA-Z]&quot;</str><def> s</def> <sym>(</sym><def></def><kwa>lambda</kwa> <def></def><sym>(</sym><def>s</def><sym>)</sym><br />
<def></def>					      <sym>(</sym><def>string</def><sym>-&gt;</sym><def>bytes</def><sym>/</sym><def>latin</def><sym>-</sym><def></def><num>1</num><br />
<def></def>					       <sym>(</sym><def>format</def> <str>&quot;[~a]&quot;</str><def></def> <sym>(</sym><def>both</def><sym>-</sym><def>cases s</def><sym>))))))))</sym><br />
<def></def>  <sym>(</sym><def>define</def> <sym>(</sym><def>both</def><sym>-</sym><def>cases s</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def>string</def><sym>-&gt;</sym><def>bytes</def><sym>/</sym><def>latin</def><sym>-</sym><def></def><num>1</num><br />
<def></def>     <sym>(</sym><def>format</def> <str>&quot;~a~a&quot;</str><def></def><br />
	     <sym>(</sym><def>string</def><sym>-</sym><def>downcase</def> <sym>(</sym><def>bytes</def><sym>-&gt;</sym><def>string</def><sym>/</sym><def>latin</def><sym>-</sym><def></def><num>1</num> <def>s</def><sym>))</sym><br />
<def></def>	     <sym>(</sym><def>string</def><sym>-</sym><def>upcase</def> <sym>(</sym><def>bytes</def><sym>-&gt;</sym><def>string</def><sym>/</sym><def>latin</def><sym>-</sym><def></def><num>1</num> <def>s</def><sym>)))))</sym><br />
<def></def><br />
  <slc>;; -------------------------------</slc><br />
<def></def><br />
  <sym>(</sym><def>define</def> <sym>(</sym><def>match</def><sym>-</sym><def>count str rx offset cnt</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def>let</def> <sym>([</sym><def>m</def> <sym>(</sym><def>regexp</def><sym>-</sym><def>match</def><sym>-</sym><def>positions rx str offset</def><sym>)])</sym><br />
<def></def>      <sym>(</sym><def></def><kwa>if</kwa> <def>m</def><br />
	  <sym>(</sym><def>match</def><sym>-</sym><def>count str rx</def> <sym>(</sym><def>cdar m</def><sym>) (</sym><def>add1 cnt</def><sym>))</sym><br />
<def>	  cnt</def><sym>)))</sym><br />
<def></def><br />
  <slc>;; --------------</slc><br />
<def></def><br />
  <sym>(</sym><def>define</def> <sym>(</sym><def>replace</def><sym>-</sym><def>all rx str new</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def>let</def> <sym>([</sym><def>out</def> <sym>(</sym><def></def><kwa>open</kwa><def></def><sym>-</sym><def>output</def><sym>-</sym><def>bytes</def><sym>)])</sym><br />
<def></def>      <sym>(</sym><def>let loop</def> <sym>([</sym><def>pos</def> <num>0</num><def></def><sym>])</sym><br />
<def></def>      	<sym>(</sym><def>let</def> <sym>([</sym><def>m</def> <sym>(</sym><def>regexp</def><sym>-</sym><def>match</def><sym>-</sym><def>positions rx str pos</def><sym>)])</sym><br />
<def></def>	  <sym>(</sym><def></def><kwa>if</kwa> <def>m</def><br />
	      <sym>(</sym><def>begin</def><br />
		<sym>(</sym><def>write</def><sym>-</sym><def>bytes str out pos</def> <sym>(</sym><def></def><kwa>caar</kwa> <def>m</def><sym>))</sym><br />
<def></def>		<sym>(</sym><def>write</def><sym>-</sym><def>bytes new out</def><sym>)</sym><br />
<def></def>		<sym>(</sym><def>loop</def> <sym>(</sym><def>cdar m</def><sym>)))</sym><br />
<def></def>	      <sym>(</sym><def>write</def><sym>-</sym><def>bytes str out pos</def><sym>))))</sym><br />
<def></def>      <sym>(</sym><def>get</def><sym>-</sym><def>output</def><sym>-</sym><def>bytes out</def><sym>)))</sym><br />
<def></def><br />
  <slc>;; -------------------------------</slc><br />
<def></def><br />
  <sym>(</sym><def>define</def> <sym>(</sym><def>input</def><sym>-&gt;</sym><def>bytes</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def>let</def> <sym>([</sym><def>b</def> <sym>(</sym><def></def><kwa>open</kwa><def></def><sym>-</sym><def>output</def><sym>-</sym><def>bytes</def><sym>)])</sym><br />
<def></def>      <sym>(</sym><def>copy</def><sym>-</sym><def>port</def> <sym>(</sym><def>current</def><sym>-</sym><def>input</def><sym>-</sym><def>port</def><sym>)</sym> <def>b</def><sym>)</sym><br />
<def></def>      <sym>(</sym><def>get</def><sym>-</sym><def>output</def><sym>-</sym><def>bytes b</def><sym>)))</sym><br />
<def></def><br />
  <slc>;; -------------------------------</slc><br />
<def></def><br />
  <slc>;; Load sequence and record its length</slc><br />
<def></def>  <sym>(</sym><def>let</def><sym>* ([</sym><def>orig</def> <sym>(</sym><def>input</def><sym>-&gt;</sym><def>bytes</def><sym>)]</sym><br />
<def></def>	 <sym>[</sym><def>filtered</def> <sym>(</sym><def>replace</def><sym>-</sym><def>all #rx#</def><str>&quot;(&gt;.*?</str><esc>\</esc><str>n)|</str><esc>\</esc><str>n&quot;</str><def> orig #</def><str>&quot;&quot;</str><def></def><sym>)])</sym><br />
<def></def><br />
    <slc>;; Perform regexp counts</slc><br />
<def></def>    <sym>(</sym><def>for</def><sym>-</sym><def>each</def><br />
     <sym>(</sym><def></def><kwa>lambda</kwa> <def></def><sym>(</sym><def>i</def><sym>)</sym><br />
<def></def>       <sym>(</sym><def>printf</def> <str>&quot;~a ~a</str><esc>\</esc><str>n&quot;</str><def> i</def> <sym>(</sym><def>match</def><sym>-</sym><def>count filtered</def> <sym>(</sym><def>ci</def><sym>-</sym><def>byte</def><sym>-</sym><def>regexp i</def><sym>)</sym> <def></def><num>0 0</num><def></def><sym>)))</sym><br />
<def>     VARIANTS</def><sym>)</sym><br />
<def></def><br />
    <slc>;; Perform regexp replacements, and record sequence length</slc><br />
<def></def>    <sym>(</sym><def>let</def> <sym>([</sym><def>replaced</def><br />
	   <sym>(</sym><def>let loop</def> <sym>([</sym><def>sequence filtered</def><sym>]</sym><br />
<def></def>		      <sym>[</sym><def>IUBS IUBS</def><sym>])</sym><br />
<def></def>	     <sym>(</sym><def></def><kwa>if</kwa> <def></def><sym>(</sym><def></def><kwa>null</kwa><def>? IUBS</def><sym>)</sym><br />
<def>		 sequence</def><br />
		 <sym>(</sym><def>loop</def> <sym>(</sym><def>replace</def><sym>-</sym><def>all</def> <sym>(</sym><def>byte</def><sym>-</sym><def>regexp</def> <sym>(</sym><def></def><kwa>caar</kwa> <def>IUBS</def><sym>))</sym> <def>sequence</def> <sym>(</sym><def>cadar IUBS</def><sym>))</sym><br />
<def></def>		       <sym>(</sym><def></def><kwa>cdr</kwa> <def>IUBS</def><sym>))))])</sym><br />
<def></def>      <slc>;; Print statistics</slc><br />
<def></def>      <sym>(</sym><def>printf</def> <str>&quot;~%~A~%~A~%~A~%&quot;</str><def></def><br />
	      <sym>(</sym><def>bytes</def><sym>-</sym><def></def><kwa>length</kwa> <def>orig</def><sym>)</sym><br />
<def></def>	      <sym>(</sym><def>bytes</def><sym>-</sym><def></def><kwa>length</kwa> <def>filtered</def><sym>)</sym><br />
<def></def>	      <sym>(</sym><def>bytes</def><sym>-</sym><def></def><kwa>length</kwa> <def>replaced</def><sym>)))))</sym><def></def><br />
</source>
