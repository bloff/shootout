<source>
<def></def><com>{ The Computer Language Benchmarks Game</com><br />
<com>  http://shootout.alioth.debian.org</com><br />
<com></com><br />
<com>  contributed by Ales Katona</com><br />
<com>  modified by Vincent Snijders</com><br />
<com>}</com><def></def><br />
<br />
<kwa>program</kwa> <def>mandelbrot</def><sym>;</sym><br />
<def></def><br />
<com>{$FPUTYPE SSE2}</com><def></def><com>{$I-}</com><def></def><br />
<br />
<kwa>var</kwa> <def>n</def><sym>:</sym> <def></def><kwb>longint</kwb><def></def><sym>;</sym><br />
<def>    TextBuf</def><sym>:</sym> <def></def><kwa>array</kwa><def></def><sym>[</sym><def></def><num>0</num><def></def><sym>..</sym><def></def><num>$FFF</num><def></def><sym>]</sym> <def></def><kwa>of</kwa> <def></def><kwb>byte</kwb><def></def><sym>;</sym><br />
<def>    OutFile</def><sym>:</sym> <def>PText</def><sym>;</sym><br />
<def></def><br />
<br />
<kwa>procedure</kwa> <def>run</def><sym>;</sym><br />
<def></def><kwa>var</kwa><br />
<def>  Cy</def><sym>,</sym> <def>Step</def><sym>:</sym> <def></def><kwb>double</kwb><def></def><sym>;</sym><br />
<def>  x</def><sym>,</sym> <def>y</def><sym>,</sym> <def>bits</def><sym>,</sym><def>bit</def><sym>:</sym> <def></def><kwb>Longint</kwb><def></def><sym>;</sym><br />
<def></def>  <kwa>function</kwa> <def></def><kwd>CalculatePoint</kwd><def></def><sym>(</sym><def>Cx</def><sym>,</sym> <def>Cy</def><sym>:</sym> <def></def><kwb>double</kwb><def></def><sym>):</sym> <def></def><kwb>boolean</kwb><def></def><sym>;</sym> <def>nostackframe</def><sym>;</sym> <def></def><kwa>inline</kwa><def></def><sym>;</sym><br />
<def></def>  <kwa>const</kwa><br />
<def>    Limit</def> <sym>=</sym> <def></def><num>4</num><def></def><sym>;</sym><br />
<def></def>  <kwa>var</kwa><br />
<def>    i</def><sym>:</sym> <def></def><kwb>longint</kwb><def></def><sym>;</sym><br />
<def>    Zr</def><sym>,</sym> <def>Zi</def><sym>,</sym> <def>Ti</def><sym>,</sym> <def>Tr</def><sym>:</sym> <def></def><kwb>Double</kwb><def></def><sym>;</sym><br />
<def></def><br />
  <kwa>begin</kwa><br />
<def>    Zr</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym>  <def>Zi</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>Tr</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>Ti</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>    <kwa>for</kwa> <def>i</def> <sym>:=</sym> <def></def><num>1</num> <def></def><kwa>to</kwa> <def></def><num>50</num> <def></def><kwa>do begin</kwa><br />
<def>      Zi</def> <sym>:=</sym> <def></def><num>2</num><def></def><sym>*</sym><def>Zr</def><sym>*</sym><def>Zi</def> <sym>+</sym> <def>Cy</def><sym>;</sym><br />
<def>      Zr</def> <sym>:=</sym> <def>Tr</def> <sym>-</sym> <def>Ti</def> <sym>+</sym> <def>Cx</def><sym>;</sym><br />
<def>      Ti</def> <sym>:=</sym> <def>Zi</def> <sym>*</sym> <def>Zi</def><sym>;</sym><br />
<def>      Tr</def> <sym>:=</sym> <def>Zr</def> <sym>*</sym> <def>Zr</def><sym>;</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>Tr</def> <sym>+</sym> <def>Ti</def><sym>&gt;=</sym><def>limit</def><sym>)</sym> <def></def><kwa>then</kwa> <def></def><kwd>exit</kwd><def></def><sym>(</sym><def></def><kwb>true</kwb><def></def><sym>);</sym><br />
<def></def>    <kwa>end</kwa><def></def><sym>;</sym><br />
<def><br />
    CalculatePoint</def> <sym>:=</sym> <def></def><kwb>false</kwb><def></def><sym>;</sym><br />
<def></def>  <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def>  Step</def> <sym>:=</sym> <def></def><num>2</num><def></def><sym>/</sym><def>n</def><sym>;</sym><br />
<def></def>  <kwa>for</kwa> <def>y</def> <sym>:=</sym> <def></def><num>0</num> <def></def><kwa>to</kwa> <def>n</def><sym>-</sym><def></def><num>1</num> <def></def><kwa>do</kwa><br />
<def></def>  <kwa>begin</kwa><br />
<def>    Cy</def> <sym>:=</sym> <def>y</def> <sym>*</sym> <def>Step</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def>    bits</def> <sym>:=</sym> <def></def><num>255</num><def></def><sym>;</sym>  <def>bit</def> <sym>:=</sym> <def></def><num>128</num><def></def><sym>;</sym><br />
<def></def>    <kwa>for</kwa> <def>x</def> <sym>:=</sym> <def></def><num>0</num> <def></def><kwa>to</kwa> <def>n</def><sym>-</sym><def></def><num>1</num> <def></def><kwa>do</kwa><br />
<def></def>    <kwa>begin</kwa><br />
<def></def>      <kwa>if</kwa> <def></def><kwd>CalculatePoint</kwd><def></def><sym>(</sym><def>x</def> <sym>*</sym> <def>Step</def>  <sym>-</sym> <def></def><num>1.5</num><def></def><sym>,</sym> <def>Cy</def><sym>)</sym> <def></def><kwa>then</kwa><br />
<def>        bits</def> <sym>:=</sym> <def>bits</def> <kwa>xor</kwa> <def>bit</def><sym>;</sym><br />
<def></def><br />
      <kwa>if</kwa> <def>bit</def> <sym>&gt;</sym> <def></def><num>1</num> <def></def><kwa>then</kwa><br />
<def>        bit</def> <sym>:=</sym> <def>bit</def> <kwa>shr</kwa> <def></def><num>1</num><br />
<def></def>      <kwa>else</kwa><br />
<def></def>      <kwa>begin</kwa><br />
<def></def>        <kwd>write</kwd><def></def><sym>(</sym><def>OutFile</def><sym>^,</sym> <def></def><kwd>chr</kwd><def></def><sym>(</sym><def>bits</def><sym>));</sym><br />
<def>        bits</def> <sym>:=</sym> <def></def><num>255</num><def></def><sym>;</sym>  <def>bit</def> <sym>:=</sym> <def></def><num>128</num><def></def><sym>;</sym><br />
<def></def>      <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>    <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>    <kwa>if</kwa> <def>bit</def> <sym>&lt;</sym> <def></def><num>128</num> <def></def><kwa>then</kwa> <def></def><kwd>write</kwd><def></def><sym>(</sym><def>OutFile</def><sym>^,</sym> <def></def><kwd>chr</kwd><def></def><sym>(</sym><def>bits</def> <kwa>xor</kwa><def></def><sym>((</sym><def>bit</def> <kwa>shl</kwa> <def></def><num>1</num><def></def><sym>)-</sym><def></def><num>1</num><def></def><sym>)));</sym><br />
<def></def>  <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def>  OutFile</def> <sym>:= @</sym><def>Output</def><sym>;</sym><br />
<def></def>  <kwd>SetTextBuf</kwd><def></def><sym>(</sym><def>OutFile</def><sym>^,</sym> <def>TextBuf</def><sym>);</sym><br />
<def></def><br />
  <kwd>Val</kwd><def></def><sym>(</sym><def></def><kwd>ParamStr</kwd><def></def><sym>(</sym><def></def><num>1</num><def></def><sym>),</sym> <def>n</def><sym>);</sym><br />
<def></def>  <kwd>writeln</kwd><def></def><sym>(</sym><def>OutFile</def><sym>^,</sym> <def></def><str>'P4'</str><def></def><sym>);</sym><br />
<def></def>  <kwd>writeln</kwd><def></def><sym>(</sym><def>OutFile</def><sym>^,</sym> <def>n</def><sym>,</sym><def></def><str>' '</str><def></def><sym>,</sym><def>n</def><sym>);</sym><br />
<def>  run</def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>.</sym><def></def><br />
</source>
