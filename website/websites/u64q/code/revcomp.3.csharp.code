<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Isaac Gouy</span>
<span class="hl com">   modified by Robert F. Tobler to perform actual computations on byte arrays</span>
<span class="hl com">   modified again by Robert F. Tobler to use BinaryWriter with larger buffers</span>
<span class="hl com">*/</span>

<span class="hl kwa">using</span> System<span class="hl sym">;</span>
<span class="hl kwa">using</span> System<span class="hl sym">.</span>IO<span class="hl sym">;</span>
<span class="hl kwa">using</span> System<span class="hl sym">.</span>Text<span class="hl sym">;</span>
<span class="hl kwa">using</span> System<span class="hl sym">.</span>Collections<span class="hl sym">.</span>Generic<span class="hl sym">;</span>

<span class="hl kwa">class</span> revcomp
<span class="hl sym">{</span>
   <span class="hl kwa">static</span> <span class="hl kwb">byte</span><span class="hl sym">[]</span> <span class="hl kwd">ByteArray</span><span class="hl sym">(</span><span class="hl kwb">string</span> line<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwb">byte</span><span class="hl sym">[]</span> array <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl sym">[</span>line<span class="hl sym">.</span>Length<span class="hl sym">];</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> line<span class="hl sym">.</span>Length<span class="hl sym">;</span> i<span class="hl sym">++)</span>
         array<span class="hl sym">[</span>i<span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span>line<span class="hl sym">[</span>i<span class="hl sym">];</span>
      <span class="hl kwa">return</span> array<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwb">const byte</span> Gt <span class="hl sym">= (</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'&gt;'</span><span class="hl sym">;</span>

   <span class="hl kwa">static</span> <span class="hl kwb">void</span> <span class="hl kwd">Main</span><span class="hl sym">(</span><span class="hl kwb">string</span><span class="hl sym">[]</span> args<span class="hl sym">){</span>
      <span class="hl kwd">InitializeComplements</span><span class="hl sym">();</span>

      List<span class="hl sym">&lt;</span><span class="hl kwb">byte</span><span class="hl sym">[]&gt;</span> builder <span class="hl sym">=</span> <span class="hl kwa">new</span> List<span class="hl sym">&lt;</span><span class="hl kwb">byte</span><span class="hl sym">[]&gt;();</span>
      <span class="hl kwb">string</span> line<span class="hl sym">;</span>
      <span class="hl kwb">byte</span><span class="hl sym">[]</span> array<span class="hl sym">,</span> desc <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>

      <span class="hl kwa">using</span> <span class="hl sym">(</span>StreamReader r <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">StreamReader</span><span class="hl sym">(</span>Console<span class="hl sym">.</span><span class="hl kwd">OpenStandardInput</span><span class="hl sym">())) {</span>
         <span class="hl kwa">using</span> <span class="hl sym">(</span>BinaryWriter w <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BinaryWriter</span><span class="hl sym">(</span>Console<span class="hl sym">.</span><span class="hl kwd">OpenStandardOutput</span><span class="hl sym">())) {</span>
            <span class="hl kwa">while</span> <span class="hl sym">((</span>line <span class="hl sym">=</span> r<span class="hl sym">.</span><span class="hl kwd">ReadLine</span><span class="hl sym">()) !=</span> <span class="hl kwa">null</span><span class="hl sym">) {</span>
               array <span class="hl sym">=</span> <span class="hl kwd">ByteArray</span><span class="hl sym">(</span>line<span class="hl sym">);</span>
               <span class="hl kwb">byte</span> c <span class="hl sym">=</span> array<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
               <span class="hl kwa">if</span> <span class="hl sym">(</span>c <span class="hl sym">==</span> Gt<span class="hl sym">) {</span>
                  <span class="hl kwa">if</span> <span class="hl sym">(</span>desc<span class="hl sym">.</span>Length <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">) {</span>
                     <span class="hl kwd">WriteReverseFasta</span><span class="hl sym">(</span>desc<span class="hl sym">,</span> builder<span class="hl sym">,</span> w<span class="hl sym">);</span>
                     builder<span class="hl sym">.</span><span class="hl kwd">Clear</span><span class="hl sym">();</span>
                  <span class="hl sym">}</span>
                  desc <span class="hl sym">=</span> array<span class="hl sym">;</span>
               <span class="hl sym">}</span>
               <span class="hl kwa">else if</span> <span class="hl sym">(</span>c <span class="hl sym">!=</span> <span class="hl str">';'</span><span class="hl sym">) {</span>
                  builder<span class="hl sym">.</span><span class="hl kwd">Add</span><span class="hl sym">(</span>array<span class="hl sym">);</span>
               <span class="hl sym">}</span>
            <span class="hl sym">}</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>builder<span class="hl sym">.</span>Count <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">) {</span>
               <span class="hl kwd">WriteReverseFasta</span><span class="hl sym">(</span>desc<span class="hl sym">,</span> builder<span class="hl sym">,</span> w<span class="hl sym">);</span>
            <span class="hl sym">}</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">static</span> <span class="hl kwb">byte</span><span class="hl sym">[]</span> iubComp <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl sym">[</span><span class="hl num">256</span><span class="hl sym">];</span>
   <span class="hl kwa">static</span> <span class="hl kwb">void</span> <span class="hl kwd">InitializeComplements</span><span class="hl sym">(){</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">byte</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">255</span><span class="hl sym">;</span> i<span class="hl sym">++)</span> iubComp<span class="hl sym">[</span>i<span class="hl sym">] =</span> i<span class="hl sym">;</span>

      iubComp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'A'</span><span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'T'</span><span class="hl sym">;</span> iubComp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'a'</span><span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'T'</span><span class="hl sym">;</span>
      iubComp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'B'</span><span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'V'</span><span class="hl sym">;</span> iubComp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'b'</span><span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'V'</span><span class="hl sym">;</span>
      iubComp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'C'</span><span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'G'</span><span class="hl sym">;</span> iubComp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'c'</span><span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'G'</span><span class="hl sym">;</span>
      iubComp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'D'</span><span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'H'</span><span class="hl sym">;</span> iubComp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'d'</span><span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'H'</span><span class="hl sym">;</span>
      iubComp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'G'</span><span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'C'</span><span class="hl sym">;</span> iubComp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'g'</span><span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'C'</span><span class="hl sym">;</span>
      iubComp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'H'</span><span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'D'</span><span class="hl sym">;</span> iubComp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'h'</span><span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'D'</span><span class="hl sym">;</span>
      iubComp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'K'</span><span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'M'</span><span class="hl sym">;</span> iubComp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'k'</span><span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'M'</span><span class="hl sym">;</span>
      iubComp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'M'</span><span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'K'</span><span class="hl sym">;</span> iubComp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'m'</span><span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'K'</span><span class="hl sym">;</span>
      iubComp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'R'</span><span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'Y'</span><span class="hl sym">;</span> iubComp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'r'</span><span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'Y'</span><span class="hl sym">;</span>
      iubComp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'T'</span><span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'A'</span><span class="hl sym">;</span> iubComp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'t'</span><span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'A'</span><span class="hl sym">;</span>
      iubComp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'V'</span><span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'B'</span><span class="hl sym">;</span> iubComp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'v'</span><span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'B'</span><span class="hl sym">;</span>
      iubComp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'Y'</span><span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'R'</span><span class="hl sym">;</span> iubComp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'y'</span><span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'R'</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwb">const byte</span> Lf <span class="hl sym">= (</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">;</span>
   <span class="hl kwb">const int</span> LineLength <span class="hl sym">=</span> <span class="hl num">61</span><span class="hl sym">;</span>
   <span class="hl kwb">const int</span> BufferSize <span class="hl sym">=</span> LineLength <span class="hl sym">*</span> <span class="hl num">269</span><span class="hl sym">;</span> <span class="hl slc">// about 16k</span>
   <span class="hl kwa">static</span> <span class="hl kwb">byte</span><span class="hl sym">[]</span> buffer <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl sym">[</span>BufferSize<span class="hl sym">];</span>

   <span class="hl kwa">static</span> <span class="hl kwb">void</span> <span class="hl kwd">WriteReverseFasta</span><span class="hl sym">(</span><span class="hl kwb">byte</span><span class="hl sym">[]</span> desc<span class="hl sym">,</span> List<span class="hl sym">&lt;</span><span class="hl kwb">byte</span><span class="hl sym">[]&gt;</span> b<span class="hl sym">,</span> BinaryWriter w<span class="hl sym">) {</span>
      w<span class="hl sym">.</span><span class="hl kwd">Write</span><span class="hl sym">(</span>desc<span class="hl sym">);</span> w<span class="hl sym">.</span><span class="hl kwd">Write</span><span class="hl sym">(</span>Lf<span class="hl sym">);</span>
      <span class="hl kwb">int</span> bi <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwb">int</span> trigger <span class="hl sym">=</span> LineLength <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> rli <span class="hl sym">=</span> b<span class="hl sym">.</span>Count<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">;</span> rli <span class="hl sym">&gt;=</span> <span class="hl num">0</span><span class="hl sym">;</span> rli<span class="hl sym">--) {</span>
         <span class="hl kwb">byte</span><span class="hl sym">[]</span> line <span class="hl sym">=</span> b<span class="hl sym">[</span>rli<span class="hl sym">];</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> rci <span class="hl sym">=</span> line<span class="hl sym">.</span>Length<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">;</span> rci <span class="hl sym">&gt;=</span> <span class="hl num">0</span><span class="hl sym">;</span> rci<span class="hl sym">--) {</span>
            buffer<span class="hl sym">[</span>bi<span class="hl sym">++] =</span> iubComp<span class="hl sym">[</span>line<span class="hl sym">[</span>rci<span class="hl sym">]];</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>bi <span class="hl sym">==</span> trigger<span class="hl sym">) {</span>
               buffer<span class="hl sym">[</span>bi<span class="hl sym">++] =</span> Lf<span class="hl sym">;</span> trigger <span class="hl sym">+=</span> LineLength<span class="hl sym">;</span>
               <span class="hl kwa">if</span> <span class="hl sym">(</span>bi <span class="hl sym">&gt;=</span> BufferSize<span class="hl sym">) {</span>
                  w<span class="hl sym">.</span><span class="hl kwd">Write</span><span class="hl sym">(</span>buffer<span class="hl sym">);</span> bi <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> trigger <span class="hl sym">=</span> LineLength <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>
               <span class="hl sym">}</span>
            <span class="hl sym">}</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>bi <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">) {</span>
          <span class="hl kwa">if</span> <span class="hl sym">(</span>buffer<span class="hl sym">[</span>bi<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">] !=</span> Lf<span class="hl sym">)</span> buffer<span class="hl sym">[</span>bi<span class="hl sym">++] =</span> Lf<span class="hl sym">;</span>
          w<span class="hl sym">.</span><span class="hl kwd">Write</span><span class="hl sym">(</span>buffer<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> bi<span class="hl sym">);</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>
