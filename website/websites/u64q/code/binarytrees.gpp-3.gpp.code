<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by Calum Grant</span>
<span class="hl com"> */</span>

<span class="hl dir">#include &lt;iostream&gt;</span>
<span class="hl dir">#include &lt;memory&gt;</span>

<span class="hl kwc">template</span><span class="hl sym">&lt;</span>typename Item<span class="hl sym">,</span> typename Left<span class="hl sym">,</span> typename Right<span class="hl sym">&gt;</span> <span class="hl kwb">struct</span> node
<span class="hl sym">{</span>
   <span class="hl kwc">template</span><span class="hl sym">&lt;</span>typename I<span class="hl sym">,</span> typename L<span class="hl sym">,</span> typename R<span class="hl sym">&gt;</span>
      <span class="hl kwd">node</span><span class="hl sym">(</span>I i<span class="hl sym">,</span> L l<span class="hl sym">,</span> R r<span class="hl sym">) :</span> <span class="hl kwd">item</span><span class="hl sym">(</span>i<span class="hl sym">),</span> <span class="hl kwd">left</span><span class="hl sym">(</span>l<span class="hl sym">),</span> <span class="hl kwd">right</span><span class="hl sym">(</span>r<span class="hl sym">) { }</span>
   <span class="hl kwb">const</span> Item item<span class="hl sym">;</span>
   <span class="hl kwb">const</span> Left left<span class="hl sym">;</span>
   <span class="hl kwb">const</span> Right right<span class="hl sym">;</span>
<span class="hl sym">};</span>

<span class="hl kwc">template</span><span class="hl sym">&lt;</span>typename Item<span class="hl sym">&gt;</span> <span class="hl kwb">struct</span> leaf_node
<span class="hl sym">{</span>
   <span class="hl kwc">template</span><span class="hl sym">&lt;</span>typename I<span class="hl sym">&gt;</span> <span class="hl kwd">leaf_node</span><span class="hl sym">(</span>I i<span class="hl sym">) :</span> <span class="hl kwd">item</span><span class="hl sym">(</span>i<span class="hl sym">) { }</span>
   <span class="hl kwb">const</span> Item item<span class="hl sym">;</span>
<span class="hl sym">};</span>

<span class="hl kwc">template</span><span class="hl sym">&lt;</span>typename Item<span class="hl sym">&gt;</span> <span class="hl kwb">int</span> <span class="hl kwd">check</span><span class="hl sym">(</span><span class="hl kwb">const</span> leaf_node<span class="hl sym">&lt;</span>Item<span class="hl sym">&gt; &amp;</span> node<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwa">return</span> node<span class="hl sym">.</span>item<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwc">template</span><span class="hl sym">&lt;</span>typename Item<span class="hl sym">,</span> typename Left<span class="hl sym">,</span> typename Right<span class="hl sym">&gt;</span>
   <span class="hl kwb">int</span> <span class="hl kwd">check</span><span class="hl sym">(</span><span class="hl kwb">const</span> node<span class="hl sym">&lt;</span>Item<span class="hl sym">,</span>Left<span class="hl sym">,</span>Right<span class="hl sym">&gt; &amp;</span> node<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwa">return</span> node<span class="hl sym">.</span>item <span class="hl sym">+</span> <span class="hl kwd">check</span><span class="hl sym">(</span>node<span class="hl sym">.</span>left<span class="hl sym">) -</span> <span class="hl kwd">check</span><span class="hl sym">(</span>node<span class="hl sym">.</span>right<span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwc">template</span><span class="hl sym">&lt;</span><span class="hl kwb">int</span> Depth<span class="hl sym">&gt;</span> <span class="hl kwb">struct</span> make <span class="hl sym">:</span> <span class="hl kwc">public</span> node<span class="hl sym">&lt;</span><span class="hl kwb">int</span><span class="hl sym">,</span> make<span class="hl sym">&lt;</span>Depth<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">&gt;,</span> make<span class="hl sym">&lt;</span>Depth<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">&gt; &gt;</span>
<span class="hl sym">{</span>
   <span class="hl kwd">make</span><span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">) :</span> node<span class="hl sym">&lt;</span> <span class="hl kwb">int</span><span class="hl sym">,</span> make<span class="hl sym">&lt;</span>Depth<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">&gt;,</span> make<span class="hl sym">&lt;</span>Depth<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">&gt; &gt;(</span>i<span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">*</span>i<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">*</span>i<span class="hl sym">) { }</span>
<span class="hl sym">};</span>

<span class="hl kwc">template</span><span class="hl sym">&lt;&gt;</span> <span class="hl kwb">struct</span> make<span class="hl sym">&lt;</span><span class="hl num">0</span><span class="hl sym">&gt; :</span> <span class="hl kwc">public</span> leaf_node<span class="hl sym">&lt;</span><span class="hl kwb">int</span><span class="hl sym">&gt;</span>
<span class="hl sym">{</span>
   <span class="hl kwd">make</span><span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">) :</span> leaf_node<span class="hl sym">&lt;</span><span class="hl kwb">int</span><span class="hl sym">&gt;(</span>i<span class="hl sym">) { }</span>
<span class="hl sym">};</span>

<span class="hl kwc">template</span><span class="hl sym">&lt;</span><span class="hl kwb">int</span> Depth<span class="hl sym">&gt;</span> std<span class="hl sym">::</span>auto_ptr<span class="hl sym">&lt;</span>make<span class="hl sym">&lt;</span>Depth<span class="hl sym">&gt; &gt;</span> <span class="hl kwd">make_tree</span><span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwa">return</span> std<span class="hl sym">::</span>auto_ptr<span class="hl sym">&lt;</span> make<span class="hl sym">&lt;</span>Depth<span class="hl sym">&gt; &gt;(</span><span class="hl kwa">new</span> make<span class="hl sym">&lt;</span>Depth<span class="hl sym">&gt;(</span>i<span class="hl sym">));</span>
<span class="hl sym">}</span>

<span class="hl kwc">template</span><span class="hl sym">&lt;</span><span class="hl kwb">int</span> MinDepth<span class="hl sym">,</span> <span class="hl kwb">int</span> MaxDepth<span class="hl sym">=</span><span class="hl num">24</span><span class="hl sym">&gt;</span> <span class="hl kwb">struct</span> test
<span class="hl sym">{</span>
   <span class="hl kwc">template</span><span class="hl sym">&lt;</span><span class="hl kwb">int</span> D<span class="hl sym">=</span>MinDepth<span class="hl sym">,</span> <span class="hl kwb">bool</span><span class="hl sym">=</span>D<span class="hl sym">&lt;=</span>MaxDepth<span class="hl sym">&gt;</span> <span class="hl kwb">struct</span> loop
   <span class="hl sym">{</span>
      <span class="hl kwd">loop</span><span class="hl sym">()</span>
      <span class="hl sym">{</span>
         <span class="hl kwb">const int</span> iterations <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>MaxDepth <span class="hl sym">-</span> D <span class="hl sym">+</span> MinDepth<span class="hl sym">);</span>
         <span class="hl kwb">int</span> c<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span>

         <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">;</span> i<span class="hl sym">&lt;=</span>iterations<span class="hl sym">; ++</span>i<span class="hl sym">)</span>
         <span class="hl sym">{</span>
            c <span class="hl sym">+=</span> <span class="hl kwd">check</span><span class="hl sym">(*</span>make_tree<span class="hl sym">&lt;</span>D<span class="hl sym">&gt;(</span>i<span class="hl sym">)) +</span> <span class="hl kwd">check</span><span class="hl sym">(*</span>make_tree<span class="hl sym">&lt;</span>D<span class="hl sym">&gt;(-</span>i<span class="hl sym">));</span>
         <span class="hl sym">}</span>

         std<span class="hl sym">::</span>cout <span class="hl sym">&lt;&lt; (</span><span class="hl num">2</span><span class="hl sym">*</span>iterations<span class="hl sym">) &lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">trees of depth &quot;</span> <span class="hl sym">&lt;&lt;</span> D <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">&quot;</span>
            <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;check: &quot;</span> <span class="hl sym">&lt;&lt;</span> c <span class="hl sym">&lt;&lt;</span> std<span class="hl sym">::</span>endl<span class="hl sym">;</span>

         loop<span class="hl sym">&lt;</span>D<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">&gt;();</span>
      <span class="hl sym">}</span>
   <span class="hl sym">};</span>

   <span class="hl kwc">template</span><span class="hl sym">&lt;</span><span class="hl kwb">int</span> D<span class="hl sym">&gt;</span> <span class="hl kwb">struct</span> loop<span class="hl sym">&lt;</span>D<span class="hl sym">,</span> <span class="hl kwa">false</span><span class="hl sym">&gt; { };</span>

   <span class="hl kwb">static void</span> <span class="hl kwd">run</span><span class="hl sym">(</span><span class="hl kwb">int</span> max_depth<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">if</span><span class="hl sym">(</span>max_depth <span class="hl sym">&lt;</span> MaxDepth<span class="hl sym">)</span>
      <span class="hl sym">{</span>
         test<span class="hl sym">&lt;</span>MinDepth<span class="hl sym">,</span> MaxDepth<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">&gt;::</span><span class="hl kwd">run</span><span class="hl sym">(</span>max_depth<span class="hl sym">);</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">else</span>
      <span class="hl sym">{</span>
         <span class="hl kwb">const int</span> stretch_depth <span class="hl sym">=</span> MaxDepth<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">;</span>
          std<span class="hl sym">::</span>cout <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;stretch tree of depth &quot;</span> <span class="hl sym">&lt;&lt;</span> stretch_depth <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">&quot;</span>
            <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;check: &quot;</span> <span class="hl sym">&lt;&lt;</span> <span class="hl kwd">check</span><span class="hl sym">(*</span>make_tree<span class="hl sym">&lt;</span>stretch_depth<span class="hl sym">&gt;(</span><span class="hl num">0</span><span class="hl sym">)) &lt;&lt;</span> std<span class="hl sym">::</span>endl<span class="hl sym">;</span>

         std<span class="hl sym">::</span>auto_ptr<span class="hl sym">&lt;</span> make<span class="hl sym">&lt;</span>MaxDepth<span class="hl sym">&gt; &gt;</span> long_lived_tree <span class="hl sym">=</span> make_tree<span class="hl sym">&lt;</span>MaxDepth<span class="hl sym">&gt;(</span><span class="hl num">0</span><span class="hl sym">);</span>

         loop<span class="hl sym">&lt;&gt;();</span>

         std<span class="hl sym">::</span>cout <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;long lived tree of depth &quot;</span> <span class="hl sym">&lt;&lt;</span> MaxDepth <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">&quot;</span>
            <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;check: &quot;</span> <span class="hl sym">&lt;&lt;</span> <span class="hl kwd">check</span><span class="hl sym">(*</span>long_lived_tree<span class="hl sym">) &lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
<span class="hl sym">};</span>

<span class="hl kwc">template</span><span class="hl sym">&lt;</span><span class="hl kwb">int</span> MinDepth<span class="hl sym">&gt;</span> <span class="hl kwb">struct</span> test<span class="hl sym">&lt;</span>MinDepth<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">&gt;</span>
<span class="hl sym">{</span>
   <span class="hl kwb">static void</span> <span class="hl kwd">run</span><span class="hl sym">(</span><span class="hl kwb">int</span><span class="hl sym">) { }</span>
<span class="hl sym">};</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">*</span>argv<span class="hl sym">[])</span>
<span class="hl sym">{</span>
   <span class="hl kwb">const int</span> min_depth<span class="hl sym">=</span><span class="hl num">4</span><span class="hl sym">;</span>
    <span class="hl kwb">int</span> max_depth <span class="hl sym">=</span> std<span class="hl sym">::</span><span class="hl kwd">max</span><span class="hl sym">(</span>min_depth<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">, (</span>argc <span class="hl sym">==</span> <span class="hl num">2</span> ? <span class="hl kwd">atoi</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]) :</span> <span class="hl num">10</span><span class="hl sym">));</span>
   test<span class="hl sym">&lt;</span>min_depth<span class="hl sym">&gt;::</span><span class="hl kwd">run</span><span class="hl sym">(</span>max_depth<span class="hl sym">);</span>
   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>
