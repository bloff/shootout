<source>
<def></def><com>/*The Computer Language Shootout</com><br />
<com>  http://shootout.alioth.debian.org/</com><br />
<com></com><br />
<com>  contributed by Greg Buchholz</com><br />
<com></com><br />
<com>  Uses SSE packed doubles to run the inner loop computations in parallel.</com><br />
<com>  I don't have a machine with SSE to test with, but the assembly looks</com><br />
<com>  pretty nice.  With gcc-3.4.2 there's no difference in the assembly</com><br />
<com>  between -msse2 and -msse3, YMMV.  It uses gcc's vector extentions</com><br />
<com>  ( http://gcc.gnu.org/onlinedocs/gcc-4.0.0/gcc/Vector-Extensions.html ),</com><br />
<com>  so it will run (slowly) on hardware without SSE.</com><br />
<com></com><br />
<com>  compile (AMD):</com><br />
<com>  gcc -D_ISOC9X_SOURCE -O3 -mfpmath=sse -msse2 -march=athlon-xp</com><br />
<com>      -ffast-math -funroll-loops -o mandelbrot.gcc-3.gcc_run mandelbrot.c -lm</com><br />
<com></com><br />
<com>  compile (INTEL):</com><br />
<com>  gcc -D_ISOC9X_SOURCE -O3 -mfpmath=sse -msse2 -march=pentium4</com><br />
<com>      -ffast-math -funroll-loops -o mandelbrot.gcc-3.gcc_run mandelbrot.c -lm</com><br />
<com>*/</com><def></def><br />
<br />
<dir>#include&lt;stdio.h&gt;</dir><br />
<def></def><dir>#include&lt;math.h&gt;</dir><br />
<def></def><dir>#include&lt;fenv.h&gt;</dir><br />
<def></def><kwc>typedef</kwc> <def></def><kwb>double</kwb> <def>v2df</def> <kwd>__attribute__</kwd> <def></def><sym>((</sym><def></def><kwd>mode</kwd><def></def><sym>(</sym><def>V2DF</def><sym>)));</sym> <def></def><slc>// vector of two double floats</slc><br />
<def></def><br />
<kwb>int</kwb> <def></def><kwd>main</kwd> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>argc</def><sym>,</sym> <def></def><kwb>char</kwb> <def></def><sym>**</sym><def>argv</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>    <kwb>int</kwb> <def>w</def><sym>,</sym> <def>h</def><sym>,</sym> <def>bit_num</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>    <kwb>char</kwb> <def>byte_acc</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>    <kwb>int</kwb> <def>i</def><sym>,</sym> <def>iter</def> <sym>=</sym> <def></def><num>50</num><def></def><sym>;</sym><br />
<def></def>    <kwb>double</kwb> <def>x</def><sym>,</sym> <def>y</def><sym>,</sym> <def>limit_sqr</def> <sym>=</sym> <def></def><num>4.0</num><def></def><sym>;</sym><br />
<def>    v2df Zrv</def><sym>,</sym> <def>Ziv</def><sym>,</sym> <def>Crv</def><sym>,</sym> <def>Civ</def><sym>,</sym> <def>Trv</def><sym>,</sym> <def>Tiv</def><sym>;</sym><br />
<def>    v2df zero</def><sym>,</sym> <def>one</def><sym>,</sym> <def>_1p5</def><sym>,</sym> <def>two</def><sym>;</sym><br />
<def></def>    <kwb>double</kwb> <def></def><sym>*</sym><def>Zr</def> <sym>= (</sym><def></def><kwb>double</kwb><def></def><sym>*)&amp;</sym><def>Zrv</def><sym>, *</sym><def>Zi</def> <sym>= (</sym><def></def><kwb>double</kwb><def></def><sym>*)&amp;</sym><def>Ziv</def><sym>,</sym><br />
<def></def>           <sym>*</sym><def>Cr</def> <sym>= (</sym><def></def><kwb>double</kwb><def></def><sym>*)&amp;</sym><def>Crv</def><sym>, *</sym><def>Ci</def> <sym>= (</sym><def></def><kwb>double</kwb><def></def><sym>*)&amp;</sym><def>Civ</def><sym>,</sym><br />
<def></def>           <sym>*</sym><def>Tr</def> <sym>= (</sym><def></def><kwb>double</kwb><def></def><sym>*)&amp;</sym><def>Trv</def><sym>, *</sym><def>Ti</def> <sym>= (</sym><def></def><kwb>double</kwb><def></def><sym>*)&amp;</sym><def>Tiv</def><sym>;</sym><br />
<def></def><br />
<dir>#define initv(name, val) *((double*)&amp;name)   = (double) val; \</dir><br />
<dir>                         *((double*)&amp;name+1) = (double) val</dir><br />
<def></def>    <kwd>initv</kwd><def></def><sym>(</sym><def>zero</def><sym>,</sym><def></def><num>0.0</num><def></def><sym>);</sym> <def></def><kwd>initv</kwd><def></def><sym>(</sym><def>one</def><sym>,</sym><def></def><num>1.0</num><def></def><sym>);</sym> <def></def><kwd>initv</kwd><def></def><sym>(</sym><def>_1p5</def><sym>,</sym><def></def><num>1.5</num><def></def><sym>);</sym> <def></def><kwd>initv</kwd><def></def><sym>(</sym><def>two</def><sym>,</sym><def></def><num>2.0</num><def></def><sym>);</sym><br />
<def><br />
    w</def> <sym>=</sym> <def>h</def> <sym>=</sym> <def></def><kwd>atoi</kwd><def></def><sym>(</sym><def>argv</def><sym>[</sym><def></def><num>1</num><def></def><sym>]);</sym><br />
<def></def><br />
    <kwd>printf</kwd><def></def><sym>(</sym><def></def><str>&quot;P4</str><esc>\n</esc><str>%d %d</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym><def>w</def><sym>,</sym><def>h</def><sym>);</sym><br />
<def></def><br />
    <kwa>for</kwa><def></def><sym>(</sym><def>y</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym><def>y</def><sym>&lt;</sym><def>h</def><sym>;++</sym><def>y</def><sym>)</sym><br />
<def></def>    <sym>{</sym><br />
<def></def>        <kwa>for</kwa><def></def><sym>(</sym><def>x</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym><def>x</def><sym>&lt;</sym><def>w</def><sym>;</sym><def>x</def><sym>+=</sym><def></def><num>2</num><def></def><sym>)</sym><br />
<def></def>        <sym>{</sym><br />
<def>            Zrv</def> <sym>=</sym> <def>Ziv</def> <sym>=</sym> <def>Trv</def> <sym>=</sym> <def>Tiv</def> <sym>=</sym> <def>zero</def><sym>;</sym><br />
<def></def>            <sym>*</sym><def>Cr</def> <sym>=</sym> <def>x</def><sym>/</sym><def>w</def><sym>;  *(</sym><def>Cr</def><sym>+</sym><def></def><num>1</num><def></def><sym>) = (</sym><def>x</def><sym>+</sym><def></def><num>1.0</num><def></def><sym>)/</sym><def>w</def><sym>;</sym><br />
<def></def>            <sym>*</sym><def>Ci</def> <sym>=</sym> <def>y</def><sym>/</sym><def>h</def><sym>;  *(</sym><def>Ci</def><sym>+</sym><def></def><num>1</num><def></def><sym>) = *</sym><def>Ci</def><sym>;</sym><br />
<def>            Crv</def> <sym>=</sym> <def>two</def> <sym>*</sym> <def>Crv</def> <sym>-</sym> <def>_1p5</def><sym>;</sym><br />
<def>            Civ</def> <sym>=</sym> <def>two</def> <sym>*</sym> <def>Civ</def> <sym>-</sym> <def>one</def><sym>;</sym><br />
<def></def><br />
            <kwa>for</kwa> <def></def><sym>(</sym><def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym><def>i</def><sym>&lt;</sym><def>iter</def> <sym>&amp;&amp; (</sym><def></def><kwd>islessequal</kwd><def></def><sym>( *</sym><def>Tr</def>    <sym>+  *</sym><def>Ti</def><sym>,</sym>   <def>limit_sqr</def><sym>) ||</sym><br />
<def></def>                                <kwd>islessequal</kwd><def></def><sym>(*(</sym><def>Tr</def><sym>+</sym><def></def><num>1</num><def></def><sym>) + *(</sym><def>Ti</def><sym>+</sym><def></def><num>1</num><def></def><sym>),</sym><def>limit_sqr</def><sym>)   ); ++</sym><def>i</def><sym>)</sym><br />
<def></def>            <sym>{</sym><br />
<def>                Ziv</def> <sym>=</sym> <def>two</def><sym>*</sym><def>Zrv</def><sym>*</sym><def>Ziv</def> <sym>+</sym> <def>Civ</def><sym>;</sym><br />
<def>                Zrv</def> <sym>=</sym> <def>Trv</def> <sym>-</sym> <def>Tiv</def> <sym>+</sym> <def>Crv</def><sym>;</sym><br />
<def>                Trv</def> <sym>=</sym> <def>Zrv</def> <sym>*</sym> <def>Zrv</def><sym>;</sym><br />
<def>                Tiv</def> <sym>=</sym> <def>Ziv</def> <sym>*</sym> <def>Ziv</def><sym>;</sym><br />
<def></def>            <sym>}</sym><br />
<def><br />
            byte_acc</def> <sym>&lt;&lt;=</sym> <def></def><num>2</num><def></def><sym>;</sym><br />
<def></def>            <kwa>if</kwa><def></def><sym>(</sym><def></def><kwd>islessequal</kwd><def></def><sym>(*</sym><def>Tr</def> <sym>+ *</sym><def>Ti</def><sym>,</sym> <def>limit_sqr</def><sym>))</sym><br />
<def>                byte_acc</def> <sym>|=</sym> <def></def><num>0x02</num><def></def><sym>;</sym><br />
<def></def><br />
            <kwa>if</kwa><def></def><sym>(</sym><def></def><kwd>islessequal</kwd><def></def><sym>(*(</sym><def>Tr</def><sym>+</sym><def></def><num>1</num><def></def><sym>) + *(</sym><def>Ti</def><sym>+</sym><def></def><num>1</num><def></def><sym>),</sym> <def>limit_sqr</def><sym>))</sym><br />
<def>                byte_acc</def> <sym>|=</sym> <def></def><num>0x01</num><def></def><sym>;</sym><br />
<def><br />
            bit_num</def><sym>+=</sym><def></def><num>2</num><def></def><sym>;</sym><br />
<def></def><br />
            <kwa>if</kwa><def></def><sym>(</sym><def>bit_num</def> <sym>==</sym> <def></def><num>8</num><def></def><sym>)</sym><br />
<def></def>            <sym>{</sym><br />
<def></def>                <kwd>putc</kwd><def></def><sym>(</sym><def>byte_acc</def><sym>,</sym><def>stdout</def><sym>);</sym><br />
<def>                byte_acc</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>                bit_num</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>            <kwa>else if</kwa><def></def><sym>(</sym><def>x</def> <sym>==</sym> <def>w</def><sym>-</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>            <sym>{</sym><br />
<def>                byte_acc</def> <sym>&lt;&lt;= (</sym><def></def><num>8</num><def></def><sym>-</sym><def>w</def><sym>%</sym><def></def><num>8</num><def></def><sym>);</sym><br />
<def></def>                <kwd>putc</kwd><def></def><sym>(</sym><def>byte_acc</def><sym>,</sym><def>stdout</def><sym>);</sym><br />
<def>                byte_acc</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>                bit_num</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>        <sym>}</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
</source>
