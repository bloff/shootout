<source>
<def></def><com>/* The Great Computer Language Shootout</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com></com><br />
<com>   contributed by Isaac Gouy</com><br />
<com>*/</com><def></def><br />
<br />
<kwa>import</kwa> <def>java</def><sym>.</sym><def>math</def><sym>.</sym><def></def><kwc>BigInteger</kwc><def></def><sym>;</sym><br />
<def></def><br />
<kwa>public class</kwa> <def>pidigits</def> <sym>{</sym><br />
<def></def>   <kwa>static final</kwa> <def></def><kwb>int</kwb> <def>L</def> <sym>=</sym> <def></def><num>10</num><def></def><sym>;</sym><br />
<def></def><br />
   <kwa>public static</kwa> <def></def><kwb>void</kwb> <def></def><kwd>main</kwd><def></def><sym>(</sym><def></def><kwc>String</kwc> <def>args</def><sym>[]) {</sym><br />
<def></def>      <kwb>int</kwb> <def>n</def> <sym>=</sym> <def></def><kwc>Integer</kwc><def></def><sym>.</sym><def></def><kwd>parseInt</kwd><def></def><sym>(</sym><def>args</def><sym>[</sym><def></def><num>0</num><def></def><sym>]);</sym><br />
<def></def>      <kwb>int</kwb> <def>j</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def><br />
      PiDigitSpigot digits</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>PiDigitSpigot</kwd><def></def><sym>();</sym><br />
<def></def><br />
      <kwa>while</kwa> <def></def><sym>(</sym><def>n</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>){</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>n</def> <sym>&gt;=</sym> <def>L</def><sym>){</sym><br />
<def></def>            <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>i</def><sym>&lt;</sym><def>L</def><sym>;</sym> <def>i</def><sym>++)</sym> <def></def><kwc>System</kwc><def></def><sym>.</sym><def>out</def><sym>.</sym><def></def><kwd>print</kwd><def></def><sym>(</sym> <def>digits</def><sym>.</sym><def></def><kwd>next</kwd><def></def><sym>() );</sym><br />
<def>            j</def> <sym>+=</sym> <def>L</def><sym>;</sym><br />
<def></def>         <sym>}</sym> <def></def><kwa>else</kwa> <def></def><sym>{</sym><br />
<def></def>            <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>i</def><sym>&lt;</sym><def>n</def><sym>;</sym> <def>i</def><sym>++)</sym> <def></def><kwc>System</kwc><def></def><sym>.</sym><def>out</def><sym>.</sym><def></def><kwd>print</kwd><def></def><sym>(</sym> <def>digits</def><sym>.</sym><def></def><kwd>next</kwd><def></def><sym>() );</sym><br />
<def></def>            <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def><sym>=</sym><def>n</def><sym>;</sym> <def>i</def><sym>&lt;</sym><def>L</def><sym>;</sym> <def>i</def><sym>++)</sym> <def></def><kwc>System</kwc><def></def><sym>.</sym><def>out</def><sym>.</sym><def></def><kwd>print</kwd><def></def><sym>(</sym><def></def><str>&quot; &quot;</str><def></def><sym>);</sym><br />
<def>            j</def> <sym>+=</sym> <def>n</def><sym>;</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>         <kwc>System</kwc><def></def><sym>.</sym><def>out</def><sym>.</sym><def></def><kwd>print</kwd><def></def><sym>(</sym><def></def><str>&quot;</str><esc>\t</esc><str>:&quot;</str><def></def><sym>);</sym> <def></def><kwc>System</kwc><def></def><sym>.</sym><def>out</def><sym>.</sym><def></def><kwd>println</kwd><def></def><sym>(</sym><def>j</def><sym>);</sym><br />
<def>         n</def> <sym>-=</sym> <def>L</def><sym>;</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<br />
<kwa>class</kwa> <def>PiDigitSpigot</def> <sym>{</sym><br />
<def>   Transformation z</def><sym>,</sym> <def>x</def><sym>,</sym> <def>inverse</def><sym>;</sym><br />
<def></def><br />
   <kwa>public</kwa> <def></def><kwd>PiDigitSpigot</kwd><def></def><sym>(){</sym><br />
<def>      z</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>Transformation</kwd><def></def><sym>(</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def>      x</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>Transformation</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>);</sym><br />
<def>      inverse</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>Transformation</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>public</kwa> <def></def><kwb>int</kwb> <def></def><kwd>next</kwd><def></def><sym>(){</sym><br />
<def></def>      <kwb>int</kwb> <def>y</def> <sym>=</sym> <def></def><kwd>digit</kwd><def></def><sym>();</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def></def><kwd>isSafe</kwd><def></def><sym>(</sym><def>y</def><sym>)){</sym><br />
<def>         z</def> <sym>=</sym> <def></def><kwd>produce</kwd><def></def><sym>(</sym><def>y</def><sym>);</sym> <def></def><kwa>return</kwa> <def>y</def><sym>;</sym><br />
<def></def>      <sym>}</sym> <def></def><kwa>else</kwa> <def></def><sym>{</sym><br />
<def>         z</def> <sym>=</sym> <def></def><kwd>consume</kwd><def></def><sym>(</sym> <def>x</def><sym>.</sym><def></def><kwd>next</kwd><def></def><sym>() );</sym> <def></def><kwa>return</kwa> <def></def><kwd>next</kwd><def></def><sym>();</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>public</kwa> <def></def><kwb>int</kwb> <def></def><kwd>digit</kwd><def></def><sym>(){</sym><br />
<def></def>      <kwa>return</kwa> <def>z</def><sym>.</sym><def></def><kwd>extract</kwd><def></def><sym>(</sym><def></def><num>3</num><def></def><sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>public</kwa> <def></def><kwb>boolean</kwb> <def></def><kwd>isSafe</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>digit</def><sym>){</sym><br />
<def></def>      <kwa>return</kwa> <def>digit</def> <sym>==</sym> <def>z</def><sym>.</sym><def></def><kwd>extract</kwd><def></def><sym>(</sym><def></def><num>4</num><def></def><sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>public</kwa> <def>Transformation</def> <kwd>produce</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def><sym>){</sym><br />
<def></def>      <kwa>return</kwa> <def></def><sym>(</sym> <def>inverse</def><sym>.</sym><def></def><kwd>qrst</kwd><def></def><sym>(</sym><def></def><num>10</num><def></def><sym>,-</sym><def></def><num>10</num><def></def><sym>*</sym><def>i</def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>1</num><def></def><sym>) ).</sym><def></def><kwd>compose</kwd><def></def><sym>(</sym><def>z</def><sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>public</kwa> <def>Transformation</def> <kwd>consume</kwd><def></def><sym>(</sym><def>Transformation a</def><sym>){</sym><br />
<def></def>      <kwa>return</kwa> <def>z</def><sym>.</sym><def></def><kwd>compose</kwd><def></def><sym>(</sym><def>a</def><sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<br />
<kwa>class</kwa> <def>Transformation</def> <sym>{</sym><br />
<def></def>   <kwc>BigInteger</kwc> <def>q</def><sym>,</sym> <def>r</def><sym>,</sym> <def>s</def><sym>,</sym> <def>t</def><sym>;</sym><br />
<def></def>   <kwb>int</kwb> <def>k</def><sym>;</sym><br />
<def></def><br />
   <kwa>public</kwa> <def></def><kwd>Transformation</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>q</def><sym>,</sym> <def></def><kwb>int</kwb> <def>r</def><sym>,</sym> <def></def><kwb>int</kwb> <def>s</def><sym>,</sym> <def></def><kwb>int</kwb> <def>t</def><sym>){</sym><br />
<def></def>      <kwa>this</kwa><def></def><sym>.</sym><def>q</def> <sym>=</sym> <def></def><kwc>BigInteger</kwc><def></def><sym>.</sym><def></def><kwd>valueOf</kwd><def></def><sym>(</sym><def>q</def><sym>);</sym><br />
<def></def>      <kwa>this</kwa><def></def><sym>.</sym><def>r</def> <sym>=</sym> <def></def><kwc>BigInteger</kwc><def></def><sym>.</sym><def></def><kwd>valueOf</kwd><def></def><sym>(</sym><def>r</def><sym>);</sym><br />
<def></def>      <kwa>this</kwa><def></def><sym>.</sym><def>s</def> <sym>=</sym> <def></def><kwc>BigInteger</kwc><def></def><sym>.</sym><def></def><kwd>valueOf</kwd><def></def><sym>(</sym><def>s</def><sym>);</sym><br />
<def></def>      <kwa>this</kwa><def></def><sym>.</sym><def>t</def> <sym>=</sym> <def></def><kwc>BigInteger</kwc><def></def><sym>.</sym><def></def><kwd>valueOf</kwd><def></def><sym>(</sym><def>t</def><sym>);</sym><br />
<def>      k</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>public</kwa> <def></def><kwd>Transformation</kwd><def></def><sym>(</sym><def></def><kwc>BigInteger</kwc> <def>q</def><sym>,</sym> <def></def><kwc>BigInteger</kwc> <def>r</def><sym>,</sym> <def></def><kwc>BigInteger</kwc> <def>s</def><sym>,</sym> <def></def><kwc>BigInteger</kwc> <def>t</def><sym>){</sym><br />
<def></def>      <kwa>this</kwa><def></def><sym>.</sym><def>q</def> <sym>=</sym> <def>q</def><sym>;</sym><br />
<def></def>      <kwa>this</kwa><def></def><sym>.</sym><def>r</def> <sym>=</sym> <def>r</def><sym>;</sym><br />
<def></def>      <kwa>this</kwa><def></def><sym>.</sym><def>s</def> <sym>=</sym> <def>s</def><sym>;</sym><br />
<def></def>      <kwa>this</kwa><def></def><sym>.</sym><def>t</def> <sym>=</sym> <def>t</def><sym>;</sym><br />
<def>      k</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>public</kwa> <def>Transformation</def> <kwd>next</kwd><def></def><sym>(){</sym><br />
<def>      k</def><sym>++;</sym><br />
<def>      q</def> <sym>=</sym> <def></def><kwc>BigInteger</kwc><def></def><sym>.</sym><def></def><kwd>valueOf</kwd><def></def><sym>(</sym><def>k</def><sym>);</sym><br />
<def>      r</def> <sym>=</sym> <def></def><kwc>BigInteger</kwc><def></def><sym>.</sym><def></def><kwd>valueOf</kwd><def></def><sym>(</sym><def></def><num>4</num> <def></def><sym>*</sym> <def>k</def> <sym>+</sym> <def></def><num>2</num><def></def><sym>);</sym><br />
<def>      s</def> <sym>=</sym> <def></def><kwc>BigInteger</kwc><def></def><sym>.</sym><def></def><kwd>valueOf</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>);</sym><br />
<def>      t</def> <sym>=</sym> <def></def><kwc>BigInteger</kwc><def></def><sym>.</sym><def></def><kwd>valueOf</kwd><def></def><sym>(</sym><def></def><num>2</num> <def></def><sym>*</sym> <def>k</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>      <kwa>return this</kwa><def></def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>public</kwa> <def></def><kwb>int</kwb> <def></def><kwd>extract</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>j</def><sym>){</sym><br />
<def></def>      <kwc>BigInteger</kwc> <def>bigj</def> <sym>=</sym> <def></def><kwc>BigInteger</kwc><def></def><sym>.</sym><def></def><kwd>valueOf</kwd><def></def><sym>(</sym><def>j</def><sym>);</sym><br />
<def></def>      <kwc>BigInteger</kwc> <def>numerator</def> <sym>= (</sym><def>q</def><sym>.</sym><def></def><kwd>multiply</kwd><def></def><sym>(</sym><def>bigj</def><sym>)).</sym><def></def><kwd>add</kwd><def></def><sym>(</sym><def>r</def><sym>);</sym><br />
<def></def>      <kwc>BigInteger</kwc> <def>denominator</def> <sym>= (</sym><def>s</def><sym>.</sym><def></def><kwd>multiply</kwd><def></def><sym>(</sym><def>bigj</def><sym>)).</sym><def></def><kwd>add</kwd><def></def><sym>(</sym><def>t</def><sym>);</sym><br />
<def></def>      <kwa>return</kwa> <def></def><sym>(</sym> <def>numerator</def><sym>.</sym><def></def><kwd>divide</kwd><def></def><sym>(</sym><def>denominator</def><sym>) ).</sym><def></def><kwd>intValue</kwd><def></def><sym>();</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>public</kwa> <def>Transformation</def> <kwd>qrst</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>q</def><sym>,</sym> <def></def><kwb>int</kwb> <def>r</def><sym>,</sym> <def></def><kwb>int</kwb> <def>s</def><sym>,</sym> <def></def><kwb>int</kwb> <def>t</def><sym>){</sym><br />
<def></def>      <kwa>this</kwa><def></def><sym>.</sym><def>q</def> <sym>=</sym> <def></def><kwc>BigInteger</kwc><def></def><sym>.</sym><def></def><kwd>valueOf</kwd><def></def><sym>(</sym><def>q</def><sym>);</sym><br />
<def></def>      <kwa>this</kwa><def></def><sym>.</sym><def>r</def> <sym>=</sym> <def></def><kwc>BigInteger</kwc><def></def><sym>.</sym><def></def><kwd>valueOf</kwd><def></def><sym>(</sym><def>r</def><sym>);</sym><br />
<def></def>      <kwa>this</kwa><def></def><sym>.</sym><def>s</def> <sym>=</sym> <def></def><kwc>BigInteger</kwc><def></def><sym>.</sym><def></def><kwd>valueOf</kwd><def></def><sym>(</sym><def>s</def><sym>);</sym><br />
<def></def>      <kwa>this</kwa><def></def><sym>.</sym><def>t</def> <sym>=</sym> <def></def><kwc>BigInteger</kwc><def></def><sym>.</sym><def></def><kwd>valueOf</kwd><def></def><sym>(</sym><def>t</def><sym>);</sym><br />
<def>      k</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>      <kwa>return this</kwa><def></def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>public</kwa> <def>Transformation</def> <kwd>compose</kwd><def></def><sym>(</sym><def>Transformation a</def><sym>){</sym><br />
<def></def>      <kwa>return new</kwa> <def></def><kwd>Transformation</kwd><def></def><sym>(</sym><br />
<def>         q</def><sym>.</sym><def></def><kwd>multiply</kwd><def></def><sym>(</sym><def>a</def><sym>.</sym><def>q</def><sym>)</sym><br />
<def></def>         <sym>,(</sym><def>q</def><sym>.</sym><def></def><kwd>multiply</kwd><def></def><sym>(</sym><def>a</def><sym>.</sym><def>r</def><sym>)).</sym><def></def><kwd>add</kwd><def></def><sym>( (</sym><def>r</def><sym>.</sym><def></def><kwd>multiply</kwd><def></def><sym>(</sym><def>a</def><sym>.</sym><def>t</def><sym>)) )</sym><br />
<def></def>         <sym>,(</sym><def>s</def><sym>.</sym><def></def><kwd>multiply</kwd><def></def><sym>(</sym><def>a</def><sym>.</sym><def>q</def><sym>)).</sym><def></def><kwd>add</kwd><def></def><sym>( (</sym><def>t</def><sym>.</sym><def></def><kwd>multiply</kwd><def></def><sym>(</sym><def>a</def><sym>.</sym><def>s</def><sym>)) )</sym><br />
<def></def>         <sym>,(</sym><def>s</def><sym>.</sym><def></def><kwd>multiply</kwd><def></def><sym>(</sym><def>a</def><sym>.</sym><def>r</def><sym>)).</sym><def></def><kwd>add</kwd><def></def><sym>( (</sym><def>t</def><sym>.</sym><def></def><kwd>multiply</kwd><def></def><sym>(</sym><def>a</def><sym>.</sym><def>t</def><sym>)) )</sym><br />
<def></def>         <sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<br />
<br />
</source>
