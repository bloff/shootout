<source>
<def></def><slc>-- The Great Computer Language Shootout</slc><br />
<def></def><slc>-- http://shootout.alioth.debian.org</slc><br />
<def></def><slc>--</slc><br />
<def></def><slc>-- Contributed by Pascal Obry on 2005/04/07</slc><br />
<def></def><br />
<kwa>package</kwa> <def>Fasta_Pck</def> <kwa>is</kwa><br />
<def></def><br />
   <kwa>type</kwa> <def>Real</def> <kwa>is new</kwa> <def></def><kwb>Long_Float</kwb><def></def><sym>;</sym><br />
<def></def><br />
   <kwa>type</kwa> <def>Aminoacid</def> <kwa>is record</kwa><br />
<def>      C</def> <sym>:</sym> <def></def><kwb>Character</kwb><def></def><sym>;</sym><br />
<def>      P</def> <sym>:</sym> <def>Real</def><sym>;</sym><br />
<def></def>   <kwa>end record</kwa><def></def><sym>;</sym><br />
<def></def><br />
   <kwa>type</kwa> <def>Aminoacid_Set</def> <kwa>is array</kwa> <def></def><sym>(</sym><def></def><kwb>Positive</kwb> <def></def><kwa>range</kwa> <def></def><sym>&lt;&gt;)</sym> <def></def><kwa>of</kwa> <def>Aminoacid</def><sym>;</sym><br />
<def></def><br />
   <kwa>procedure</kwa> <def>Make_Cumulative</def> <sym>(</sym><def>Gene_List</def> <sym>:</sym> <def></def><kwa>in out</kwa> <def>Aminoacid_Set</def><sym>);</sym><br />
<def></def><br />
   <kwa>function</kwa> <def>Select_Random</def> <sym>(</sym><def>Gene_List</def> <sym>:</sym> <def></def><kwa>in</kwa> <def>Aminoacid_Set</def><sym>)</sym> <def></def><kwa>return</kwa> <def></def><kwb>Character</kwb><def></def><sym>;</sym><br />
<def></def><br />
   <kwa>procedure</kwa> <def>Make_Random_Fasta</def><br />
     <sym>(</sym><def>Id</def><sym>,</sym> <def>Desc</def> <sym>:</sym> <def></def><kwa>in</kwa> <def></def><kwb>String</kwb><def></def><sym>;</sym> <def>Gene_List</def> <sym>:</sym> <def></def><kwa>in</kwa> <def>Aminoacid_Set</def><sym>;</sym> <def>N</def> <sym>:</sym> <def></def><kwa>in</kwa> <def></def><kwb>Positive</kwb><def></def><sym>);</sym><br />
<def></def><br />
   <kwa>procedure</kwa> <def>Make_Repeat_Fasta</def> <sym>(</sym><def>Id</def><sym>,</sym> <def>Desc</def><sym>,</sym> <def>S</def> <sym>:</sym> <def></def><kwa>in</kwa> <def></def><kwb>String</kwb><def></def><sym>;</sym> <def>N</def> <sym>:</sym> <def></def><kwa>in</kwa> <def></def><kwb>Positive</kwb><def></def><sym>);</sym><br />
<def></def><br />
<kwa>end</kwa> <def>Fasta_Pck</def><sym>;</sym><br />
<def></def><br />
<kwa>with</kwa> <def>Ada.Text_IO</def><sym>;</sym> <def></def><kwa>use</kwa> <def>Ada.Text_IO</def><sym>;</sym><br />
<def></def><br />
<kwa>package body</kwa> <def>Fasta_Pck</def> <kwa>is</kwa><br />
<def><br />
   Line_Length</def> <sym>:</sym> <def></def><kwa>constant</kwa> <def></def><sym>:=</sym> <def></def><num>60</num><def></def><sym>;</sym><br />
<def><br />
   Last</def>        <sym>:</sym> <def></def><kwb>Natural</kwb> <def></def><sym>:=</sym> <def></def><num>42</num><def></def><sym>;</sym><br />
<def></def><br />
   <kwa>function</kwa> <def>Gen_Random</def> <sym>(</sym><def>Max</def> <sym>:</sym> <def></def><kwa>in</kwa> <def>Real</def><sym>)</sym> <def></def><kwa>return</kwa> <def>Real</def><sym>;</sym><br />
<def></def>   <kwa>pragma</kwa> <def>Inline</def> <sym>(</sym><def>Gen_Random</def><sym>);</sym><br />
<def></def><br />
   <kwa>function</kwa> <def>Gen_Random</def> <sym>(</sym><def>Max</def> <sym>:</sym> <def></def><kwa>in</kwa> <def>Real</def><sym>)</sym> <def></def><kwa>return</kwa> <def>Real</def> <kwa>is</kwa><br />
<def>      IM</def> <sym>:</sym> <def></def><kwa>constant</kwa> <def></def><sym>:=</sym> <def></def><num>139</num><def>_968</def><sym>;</sym><br />
<def>      IA</def> <sym>:</sym> <def></def><kwa>constant</kwa> <def></def><sym>:=</sym>   <def></def><num>3</num><def>_877</def><sym>;</sym><br />
<def>      IC</def> <sym>:</sym> <def></def><kwa>constant</kwa> <def></def><sym>:=</sym>  <def></def><num>29</num><def>_573</def><sym>;</sym><br />
<def></def>   <kwa>begin</kwa><br />
<def>      Last</def> <sym>:= (</sym><def>Last</def> <sym>*</sym> <def>IA</def> <sym>+</sym> <def>IC</def><sym>)</sym> <def></def><kwa>mod</kwa> <def>IM</def><sym>;</sym><br />
<def></def>      <kwa>return</kwa> <def></def><sym>(</sym><def>Max</def> <sym>*</sym> <def>Real</def> <sym>(</sym><def>Last</def><sym>)) /</sym> <def>Real</def> <sym>(</sym><def>IM</def><sym>);</sym><br />
<def></def>   <kwa>end</kwa> <def>Gen_Random</def><sym>;</sym><br />
<def></def><br />
   <kwa>procedure</kwa> <def>Make_Cumulative</def> <sym>(</sym><def>Gene_List</def> <sym>:</sym> <def></def><kwa>in out</kwa> <def>Aminoacid_Set</def><sym>)</sym> <def></def><kwa>is</kwa><br />
<def>      C</def> <sym>:</sym> <def>Real</def> <sym>:=</sym> <def>Gene_List</def> <sym>(</sym><def>Gene_List</def><sym>'</sym><def>First</def><sym>)</sym><def>.P</def><sym>;</sym><br />
<def></def>   <kwa>begin</kwa><br />
<def></def>      <kwa>for</kwa> <def>K</def> <kwa>in</kwa> <def>Gene_List</def><sym>'</sym><def>First</def> <sym>+</sym> <def></def><num>1</num> <def>.. Gene_List</def><sym>'</sym><def>Last</def> <kwa>loop</kwa><br />
<def>         C</def> <sym>:=</sym> <def>C</def> <sym>+</sym> <def>Gene_List</def> <sym>(</sym><def>K</def><sym>)</sym><def>.P</def><sym>;</sym><br />
<def>         Gene_List</def> <sym>(</sym><def>K</def><sym>)</sym><def>.P</def> <sym>:=</sym> <def>C</def><sym>;</sym><br />
<def></def>      <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def></def>   <kwa>end</kwa> <def>Make_Cumulative</def><sym>;</sym><br />
<def></def><br />
   <kwa>function</kwa> <def>Select_Random</def> <sym>(</sym><def>Gene_List</def> <sym>:</sym> <def></def><kwa>in</kwa> <def>Aminoacid_Set</def><sym>)</sym> <def></def><kwa>return</kwa> <def></def><kwb>Character</kwb> <def></def><kwa>is</kwa><br />
<def>      R</def>         <sym>:</sym> <def>Real</def> <sym>:=</sym> <def>Gen_Random</def> <sym>(</sym><def></def><num>1.0</num><def></def><sym>);</sym><br />
<def>      I</def><sym>,</sym> <def>Lo</def><sym>,</sym> <def>Hi</def> <sym>:</sym> <def></def><kwb>Integer</kwb><def></def><sym>;</sym><br />
<def></def>   <kwa>begin</kwa><br />
<def></def>      <kwa>if</kwa> <def>R</def> <sym>&lt;</sym> <def>Gene_List</def> <sym>(</sym><def>Gene_List</def><sym>'</sym><def>First</def><sym>)</sym><def>.P</def> <kwa>then</kwa><br />
<def></def>         <kwa>return</kwa> <def>Gene_List</def> <sym>(</sym><def>Gene_List</def><sym>'</sym><def>First</def><sym>)</sym><def>.C</def><sym>;</sym><br />
<def></def>      <kwa>end if</kwa><def></def><sym>;</sym><br />
<def><br />
      Lo</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>      Hi</def> <sym>:=</sym> <def>Gene_List</def><sym>'</sym><def>Last</def><sym>;</sym><br />
<def></def><br />
      <kwa>while</kwa> <def>Hi</def> <sym>&gt;</sym> <def>Lo</def> <sym>+</sym> <def></def><num>1</num> <def></def><kwa>loop</kwa><br />
<def>         I</def> <sym>:= (</sym><def>Hi</def> <sym>+</sym> <def>Lo</def><sym>) /</sym> <def></def><num>2</num><def></def><sym>;</sym><br />
<def></def>         <kwa>if</kwa> <def>R</def> <sym>&lt;</sym> <def>Gene_List</def> <sym>(</sym><def>I</def><sym>)</sym><def>.P</def> <kwa>then</kwa><br />
<def>            Hi</def> <sym>:=</sym> <def>I</def><sym>;</sym><br />
<def></def>         <kwa>else</kwa><br />
<def>            Lo</def> <sym>:=</sym> <def>I</def><sym>;</sym><br />
<def></def>         <kwa>end if</kwa><def></def><sym>;</sym><br />
<def></def>      <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def></def><br />
      <kwa>return</kwa> <def>Gene_List</def> <sym>(</sym><def>Hi</def><sym>)</sym><def>.C</def><sym>;</sym><br />
<def></def>   <kwa>end</kwa> <def>Select_Random</def><sym>;</sym><br />
<def></def><br />
   <kwa>procedure</kwa> <def>Make_Random_Fasta</def><br />
     <sym>(</sym><def>Id</def><sym>,</sym> <def>Desc</def> <sym>:</sym> <def></def><kwa>in</kwa> <def></def><kwb>String</kwb><def></def><sym>;</sym> <def>Gene_List</def> <sym>:</sym> <def></def><kwa>in</kwa> <def>Aminoacid_Set</def><sym>;</sym> <def>N</def> <sym>:</sym> <def></def><kwa>in</kwa> <def></def><kwb>Positive</kwb><def></def><sym>)</sym><br />
<def></def>   <kwa>is</kwa><br />
<def>      Todo</def> <sym>:</sym> <def></def><kwb>Integer</kwb> <def></def><sym>:=</sym> <def>N</def><sym>;</sym><br />
<def>      M</def>    <sym>:</sym> <def></def><kwb>Integer</kwb><def></def><sym>;</sym><br />
<def>      Pick</def> <sym>:</sym> <def></def><kwb>String</kwb> <def></def><sym>(</sym><def></def><num>1</num> <def>.. Line_Length</def><sym>);</sym><br />
<def></def>   <kwa>begin</kwa><br />
<def>      Put_Line</def> <sym>(</sym><def></def><str>&quot;&gt;&quot;</str><def></def> <sym>&amp;</sym> <def>Id</def> <sym>&amp; ' ' &amp;</sym> <def>Desc</def><sym>);</sym><br />
<def></def><br />
      <kwa>while</kwa> <def>Todo</def> <sym>&gt;</sym> <def></def><num>0</num> <def></def><kwa>loop</kwa><br />
<def>         M</def> <sym>:=</sym> <def></def><kwb>Natural</kwb><def></def><sym>'</sym><def>Min</def> <sym>(</sym><def>Todo</def><sym>,</sym> <def>Line_Length</def><sym>);</sym><br />
<def></def><br />
         <kwa>for</kwa> <def>K</def> <kwa>in</kwa> <def></def><num>1</num> <def>.. M</def> <kwa>loop</kwa><br />
<def>            Pick</def> <sym>(</sym><def>K</def><sym>) :=</sym> <def>Select_Random</def> <sym>(</sym><def>Gene_List</def><sym>);</sym><br />
<def></def>         <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def><br />
         Put_Line</def> <sym>(</sym><def>Pick</def> <sym>(</sym><def></def><num>1</num> <def>.. M</def><sym>));</sym><br />
<def>         Todo</def> <sym>:=</sym> <def>Todo</def> <sym>-</sym> <def>Line_Length</def><sym>;</sym><br />
<def></def>      <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def></def>   <kwa>end</kwa> <def>Make_Random_Fasta</def><sym>;</sym><br />
<def></def><br />
   <kwa>procedure</kwa> <def>Make_Repeat_Fasta</def> <sym>(</sym><def>Id</def><sym>,</sym> <def>Desc</def><sym>,</sym> <def>S</def> <sym>:</sym> <def></def><kwa>in</kwa> <def></def><kwb>String</kwb><def></def><sym>;</sym> <def>N</def> <sym>:</sym> <def></def><kwa>in</kwa> <def></def><kwb>Positive</kwb><def></def><sym>)</sym> <def></def><kwa>is</kwa><br />
<def>      Todo</def> <sym>:</sym> <def></def><kwb>Integer</kwb> <def></def><sym>:=</sym> <def>N</def><sym>;</sym><br />
<def>      K</def>    <sym>:</sym> <def></def><kwb>Positive</kwb> <def></def><sym>:=</sym> <def>S</def><sym>'</sym><def>First</def><sym>;</sym><br />
<def>      M</def>    <sym>:</sym> <def></def><kwb>Natural</kwb><def></def><sym>;</sym><br />
<def></def>   <kwa>begin</kwa><br />
<def>      Put_Line</def> <sym>(</sym><def></def><str>&quot;&gt;&quot;</str><def></def> <sym>&amp;</sym> <def>Id</def> <sym>&amp; ' ' &amp;</sym> <def>Desc</def><sym>);</sym><br />
<def></def><br />
      <kwa>while</kwa> <def>Todo</def> <sym>&gt;</sym> <def></def><num>0</num> <def></def><kwa>loop</kwa><br />
<def>         M</def> <sym>:=</sym> <def></def><kwb>Natural</kwb><def></def><sym>'</sym><def>Min</def> <sym>(</sym><def>Todo</def><sym>,</sym> <def>Line_Length</def><sym>);</sym><br />
<def></def><br />
         <kwa>while</kwa> <def>M</def> <sym>&gt;=</sym> <def>S</def><sym>'</sym><def>Length</def> <sym>-</sym> <def>K</def> <sym>+</sym> <def>S</def><sym>'</sym><def>First</def> <kwa>loop</kwa><br />
<def>            Put</def> <sym>(</sym><def>S</def> <sym>(</sym><def>K .. S</def><sym>'</sym><def>Last</def><sym>));</sym><br />
<def>            M</def> <sym>:=</sym> <def>M</def> <sym>- (</sym><def>S</def><sym>'</sym><def>Length</def> <sym>-</sym> <def>K</def> <sym>+</sym> <def>S</def><sym>'</sym><def>First</def><sym>);</sym><br />
<def>            K</def> <sym>:=</sym> <def>S</def><sym>'</sym><def>First</def><sym>;</sym><br />
<def></def>         <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def><br />
         Put_Line</def> <sym>(</sym><def>S</def> <sym>(</sym><def>K .. K</def> <sym>+</sym> <def>M</def> <sym>-</sym> <def>S</def><sym>'</sym><def>First</def><sym>));</sym><br />
<def>         K</def> <sym>:=</sym> <def>K</def> <sym>+</sym> <def>M</def> <sym>-</sym> <def>S</def><sym>'</sym><def>First</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def><br />
         Todo</def> <sym>:=</sym> <def>Todo</def> <sym>-</sym> <def>Line_Length</def><sym>;</sym><br />
<def></def>      <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def></def>   <kwa>end</kwa> <def>Make_Repeat_Fasta</def><sym>;</sym><br />
<def></def><br />
<kwa>end</kwa> <def>Fasta_Pck</def><sym>;</sym><br />
<def></def><br />
<kwa>with</kwa> <def>Ada.Command_Line</def><sym>;</sym> <def></def><kwa>use</kwa> <def>Ada.Command_Line</def><sym>;</sym><br />
<def></def><kwa>with</kwa> <def>Fasta_Pck</def><sym>;</sym>        <def></def><kwa>use</kwa> <def>Fasta_Pck</def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def>Fasta</def> <kwa>is</kwa><br />
<def>   Homosapiens</def> <sym>:</sym> <def>Aminoacid_Set</def> <sym>:=</sym><br />
<def></def>                   <sym>(('</sym><def>a</def><sym>',</sym> <def></def><num>0.3029549426680</num><def></def><sym>), ('</sym><def>c</def><sym>',</sym> <def></def><num>0.1979883004921</num><def></def><sym>),</sym><br />
<def></def>                    <sym>('</sym><def>g</def><sym>',</sym> <def></def><num>0.1975473066391</num><def></def><sym>), ('</sym><def>t</def><sym>',</sym> <def></def><num>0.3015094502008</num><def></def><sym>));</sym><br />
<def>   Iub</def>         <sym>:</sym> <def>Aminoacid_Set</def> <sym>:=</sym><br />
<def></def>                   <sym>(('</sym><def>a</def><sym>',</sym> <def></def><num>0.27</num><def></def><sym>), ('</sym><def>c</def><sym>',</sym> <def></def><num>0.12</num><def></def><sym>), ('</sym><def>g</def><sym>',</sym> <def></def><num>0.12</num><def></def><sym>), ('</sym><def>t</def><sym>',</sym> <def></def><num>0.27</num><def></def><sym>),</sym><br />
<def></def>                    <sym>('</sym><def>B</def><sym>',</sym> <def></def><num>0.02</num><def></def><sym>), ('</sym><def>D</def><sym>',</sym> <def></def><num>0.02</num><def></def><sym>), ('</sym><def>H</def><sym>',</sym> <def></def><num>0.02</num><def></def><sym>), ('</sym><def>K</def><sym>',</sym> <def></def><num>0.02</num><def></def><sym>),</sym><br />
<def></def>                    <sym>('</sym><def>M</def><sym>',</sym> <def></def><num>0.02</num><def></def><sym>), ('</sym><def>N</def><sym>',</sym> <def></def><num>0.02</num><def></def><sym>), ('</sym><def>R</def><sym>',</sym> <def></def><num>0.02</num><def></def><sym>), ('</sym><def>S</def><sym>',</sym> <def></def><num>0.02</num><def></def><sym>),</sym><br />
<def></def>                    <sym>('</sym><def>V</def><sym>',</sym> <def></def><num>0.02</num><def></def><sym>), ('</sym><def>W</def><sym>',</sym> <def></def><num>0.02</num><def></def><sym>), ('</sym><def>Y</def><sym>',</sym> <def></def><num>0.02</num><def></def><sym>));</sym><br />
<def>   Alu</def>         <sym>:</sym> <def></def><kwa>constant</kwa> <def></def><kwb>String</kwb> <def></def><sym>:=</sym><br />
<def></def>                    <str>&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</str><def></def> <sym>&amp;</sym><br />
<def></def>                    <str>&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</str><def></def> <sym>&amp;</sym><br />
<def></def>                    <str>&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</str><def></def> <sym>&amp;</sym><br />
<def></def>                    <str>&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</str><def></def> <sym>&amp;</sym><br />
<def></def>                    <str>&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</str><def></def> <sym>&amp;</sym><br />
<def></def>                    <str>&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</str><def></def> <sym>&amp;</sym><br />
<def></def>                    <str>&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</str><def></def><sym>;</sym><br />
<def><br />
   N</def>           <sym>:</sym> <def></def><kwa>constant</kwa> <def></def><kwb>Positive</kwb> <def></def><sym>:=</sym> <def></def><kwb>Positive</kwb><def></def><sym>'</sym><def>Value</def> <sym>(</sym><def>Argument</def> <sym>(</sym><def></def><num>1</num><def></def><sym>));</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def>   Make_Cumulative</def> <sym>(</sym><def>Iub</def><sym>);</sym><br />
<def>   Make_Cumulative</def> <sym>(</sym><def>Homosapiens</def><sym>);</sym><br />
<def><br />
   Make_Repeat_Fasta</def> <sym>(</sym><def></def><str>&quot;ONE&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;Homo sapiens alu&quot;</str><def></def><sym>,</sym> <def>alu</def><sym>,</sym> <def>N</def> <sym>*</sym> <def></def><num>2</num><def></def><sym>);</sym><br />
<def>   Make_Random_Fasta</def> <sym>(</sym><def></def><str>&quot;TWO&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;IUB ambiguity codes&quot;</str><def></def><sym>,</sym> <def>Iub</def><sym>,</sym> <def>N</def> <sym>*</sym> <def></def><num>3</num><def></def><sym>);</sym><br />
<def>   Make_Random_Fasta</def><br />
     <sym>(</sym><def></def><str>&quot;THREE&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;Homo sapiens frequency&quot;</str><def></def><sym>,</sym> <def>Homosapiens</def><sym>,</sym> <def>N</def> <sym>*</sym> <def></def><num>5</num><def></def><sym>);</sym><br />
<def></def><kwa>end</kwa> <def>Fasta</def><sym>;</sym><def></def><br />
</source>
