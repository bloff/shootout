<source>
<def></def><sym>&lt;</sym><def>?</def> <com>/* The Great Computer Language Shootout</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com></com><br />
<com>   contributed by Isaac Gouy</com><br />
<com></com><br />
<com>   php -q fannkuch.php 7</com><br />
<com>*/</com><def></def><br />
<br />
<br />
<kwa>function</kwa> <def></def><kwd>Fannkuch</kwd><def></def><sym>(</sym><def></def><kwc>$n</kwc><def></def><sym>){</sym><br />
<def></def>   <kwc>$check</kwc> <def></def><sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>   <kwc>$perm</kwc> <def></def><sym>=</sym> <def></def><kwa>array</kwa><def></def><sym>();</sym><br />
<def></def>   <kwc>$perm1</kwc> <def></def><sym>=</sym> <def></def><kwa>array</kwa><def></def><sym>();</sym><br />
<def></def>   <kwc>$count</kwc> <def></def><sym>=</sym> <def></def><kwa>array</kwa><def></def><sym>();</sym><br />
<def></def>   <kwc>$maxPerm</kwc> <def></def><sym>=</sym> <def></def><kwa>array</kwa><def></def><sym>();</sym><br />
<def></def>   <kwc>$maxFlipsCount</kwc> <def></def><sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>   <kwc>$m</kwc> <def></def><sym>=</sym> <def></def><kwc>$n</kwc> <def></def><sym>-</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def><br />
   <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwc>$i</kwc><def></def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def></def><kwc>$i</kwc><def></def><sym>&lt;</sym><def></def><kwc>$n</kwc><def></def><sym>;</sym> <def></def><kwc>$i</kwc><def></def><sym>++)</sym> <def></def><kwc>$perm1</kwc><def></def><sym>[</sym><def></def><kwc>$i</kwc><def></def><sym>] =</sym> <def></def><kwc>$i</kwc><def></def><sym>;</sym><br />
<def></def>   <kwc>$r</kwc> <def></def><sym>=</sym> <def></def><kwc>$n</kwc><def></def><sym>;</sym><br />
<def></def><br />
   <kwa>while</kwa> <def></def><sym>(</sym><def>TRUE</def><sym>) {</sym><br />
<def></def>      <slc>// write-out the first 30 permutations</slc><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def></def><kwc>$check</kwc> <def></def><sym>&lt;</sym> <def></def><num>30</num><def></def><sym>){</sym><br />
<def></def>        <kwa>for</kwa><def></def><sym>(</sym><def></def><kwc>$i</kwc><def></def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def></def><kwc>$i</kwc><def></def><sym>&lt;</sym><def></def><kwc>$n</kwc><def></def><sym>;</sym> <def></def><kwc>$i</kwc><def></def><sym>++)</sym> <def></def><kwa>echo</kwa> <def></def><kwc>$perm1</kwc><def></def><sym>[</sym><def></def><kwc>$i</kwc><def></def><sym>]+</sym><def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>        <kwa>echo</kwa> <def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>;</sym><br />
<def></def>        <kwc>$check</kwc><def></def><sym>++;</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><br />
      <kwa>while</kwa> <def></def><sym>(</sym><def></def><kwc>$r</kwc> <def></def><sym>!=</sym> <def></def><num>1</num><def></def><sym>){</sym> <def></def><kwc>$count</kwc><def></def><sym>[</sym><def></def><kwc>$r</kwc><def></def><sym>-</sym><def></def><num>1</num><def></def><sym>] =</sym> <def></def><kwc>$r</kwc><def></def><sym>;</sym> <def></def><kwc>$r</kwc><def></def><sym>--; }</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(! (</sym><def></def><kwc>$perm1</kwc><def></def><sym>[</sym><def></def><num>0</num><def></def><sym>]==</sym><def></def><num>0</num> <def></def><sym>||</sym> <def></def><kwc>$perm1</kwc><def></def><sym>[</sym><def></def><kwc>$m</kwc><def></def><sym>] ==</sym> <def></def><kwc>$m</kwc><def></def><sym>)){</sym><br />
<def></def>         <kwa>for</kwa><def></def><sym>(</sym><def></def><kwc>$i</kwc><def></def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def></def><kwc>$i</kwc><def></def><sym>&lt;</sym><def></def><kwc>$n</kwc><def></def><sym>;</sym> <def></def><kwc>$i</kwc><def></def><sym>++)</sym> <def></def><kwc>$perm</kwc><def></def><sym>[</sym><def></def><kwc>$i</kwc><def></def><sym>] =</sym> <def></def><kwc>$perm1</kwc><def></def><sym>[</sym><def></def><kwc>$i</kwc><def></def><sym>];</sym><br />
<def></def>         <kwc>$flipsCount</kwc> <def></def><sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><br />
         <kwa>while</kwa> <def></def><sym>( !((</sym><def></def><kwc>$k</kwc><def></def><sym>=</sym><def></def><kwc>$perm</kwc><def></def><sym>[</sym><def></def><num>0</num><def></def><sym>]) ==</sym> <def></def><num>0</num><def></def><sym>) ) {</sym><br />
<def></def>            <kwc>$k2</kwc> <def></def><sym>= (</sym><def></def><kwc>$k</kwc><def></def><sym>+</sym><def></def><num>1</num><def></def><sym>) &gt;&gt;</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>            <kwa>for</kwa><def></def><sym>(</sym><def></def><kwc>$i</kwc><def></def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def></def><kwc>$i</kwc><def></def><sym>&lt;</sym><def></def><kwc>$k2</kwc><def></def><sym>;</sym> <def></def><kwc>$i</kwc><def></def><sym>++) {</sym><br />
<def></def>               <kwc>$temp</kwc> <def></def><sym>=</sym> <def></def><kwc>$perm</kwc><def></def><sym>[</sym><def></def><kwc>$i</kwc><def></def><sym>];</sym> <def></def><kwc>$perm</kwc><def></def><sym>[</sym><def></def><kwc>$i</kwc><def></def><sym>] =</sym> <def></def><kwc>$perm</kwc><def></def><sym>[</sym><def></def><kwc>$k</kwc><def></def><sym>-</sym><def></def><kwc>$i</kwc><def></def><sym>];</sym> <def></def><kwc>$perm</kwc><def></def><sym>[</sym><def></def><kwc>$k</kwc><def></def><sym>-</sym><def></def><kwc>$i</kwc><def></def><sym>] =</sym> <def></def><kwc>$temp</kwc><def></def><sym>;</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>            <kwc>$flipsCount</kwc><def></def><sym>++;</sym><br />
<def></def>         <sym>}</sym><br />
<def></def><br />
         <kwa>if</kwa> <def></def><sym>(</sym><def></def><kwc>$flipsCount</kwc> <def></def><sym>&gt;</sym> <def></def><kwc>$maxFlipsCount</kwc><def></def><sym>) {</sym><br />
<def></def>            <kwc>$maxFlipsCount</kwc> <def></def><sym>=</sym> <def></def><kwc>$flipsCount</kwc><def></def><sym>;</sym><br />
<def></def>            <kwa>for</kwa><def></def><sym>(</sym><def></def><kwc>$i</kwc><def></def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def></def><kwc>$i</kwc><def></def><sym>&lt;</sym><def></def><kwc>$n</kwc><def></def><sym>;</sym> <def></def><kwc>$i</kwc><def></def><sym>++)</sym> <def></def><kwc>$maxPerm</kwc><def></def><sym>[</sym><def></def><kwc>$i</kwc><def></def><sym>] =</sym> <def></def><kwc>$perm1</kwc><def></def><sym>[</sym><def></def><kwc>$i</kwc><def></def><sym>];</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><br />
      <kwa>while</kwa> <def></def><sym>(</sym><def>TRUE</def><sym>) {</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def></def><kwc>$r</kwc> <def></def><sym>==</sym> <def></def><kwc>$n</kwc><def></def><sym>)</sym> <def></def><kwa>return</kwa> <def></def><kwc>$maxFlipsCount</kwc><def></def><sym>;</sym><br />
<def></def>         <kwc>$perm0</kwc> <def></def><sym>=</sym> <def></def><kwc>$perm1</kwc><def></def><sym>[</sym><def></def><num>0</num><def></def><sym>];</sym><br />
<def></def>         <kwc>$i</kwc> <def></def><sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>         <kwa>while</kwa> <def></def><sym>(</sym><def></def><kwc>$i</kwc> <def></def><sym>&lt;</sym> <def></def><kwc>$r</kwc><def></def><sym>) {</sym><br />
<def></def>            <kwc>$j</kwc> <def></def><sym>=</sym> <def></def><kwc>$i</kwc> <def></def><sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>            <kwc>$perm1</kwc><def></def><sym>[</sym><def></def><kwc>$i</kwc><def></def><sym>] =</sym> <def></def><kwc>$perm1</kwc><def></def><sym>[</sym><def></def><kwc>$j</kwc><def></def><sym>];</sym><br />
<def></def>            <kwc>$i</kwc> <def></def><sym>=</sym> <def></def><kwc>$j</kwc><def></def><sym>;</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>         <kwc>$perm1</kwc><def></def><sym>[</sym><def></def><kwc>$r</kwc><def></def><sym>] =</sym> <def></def><kwc>$perm0</kwc><def></def><sym>;</sym><br />
<def></def><br />
         <kwc>$count</kwc><def></def><sym>[</sym><def></def><kwc>$r</kwc><def></def><sym>] =</sym> <def></def><kwc>$count</kwc><def></def><sym>[</sym><def></def><kwc>$r</kwc><def></def><sym>] -</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def></def><kwc>$count</kwc><def></def><sym>[</sym><def></def><kwc>$r</kwc><def></def><sym>] &gt;</sym> <def></def><num>0</num><def></def><sym>)</sym> <def></def><kwa>break</kwa><def></def><sym>;</sym><br />
<def></def>         <kwc>$r</kwc><def></def><sym>++;</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwc>$n</kwc> <def></def><sym>=</sym> <def></def><kwc>$argv</kwc><def></def><sym>[</sym><def></def><num>1</num><def></def><sym>];</sym><br />
<def></def><kwa>printf</kwa><def></def><sym>(</sym><def></def><str>&quot;Pfannkuchen(%d) = %d</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def></def><kwc>$n</kwc><def></def><sym>,</sym> <def></def><kwd>Fannkuch</kwd><def></def><sym>(</sym><def></def><kwc>$n</kwc><def></def><sym>));</sym><br />
<def>?</def><sym>&gt;</sym><def></def><br />
</source>
