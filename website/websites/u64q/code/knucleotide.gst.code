<source>
<def></def><com>&quot;* The Computer Language Shootout</com><br />
<com>    http://shootout.alioth.debian.org/</com><br />
<com>    contributed by Isaac Gouy *&quot;</com><def>!<br />
<br />
<br />
!</def><kwc>SequenceableCollection</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'computer language shootout'</str><def>!</def><br />
<kwb>substringFrequencies:</kwb> <def>aLength</def> <kwb>using:</kwb> <def>aDictionary</def><br />
   <num>1</num> <def></def><kwb>to:</kwb> <def></def><kwa>self</kwa> <def></def><kwb>size -</kwb> <def>aLength</def> <kwb>+</kwb> <def></def><num>1</num> <def></def><kwb>do:</kwb><br />
<def></def>      <sym>[</sym><def></def><kwd>:i</kwd> <def></def><sym>|</sym> <def></def><kwd>| fragment assoc |</kwd><br />
<def>      fragment</def> <sym>:=</sym> <def></def><kwa>self</kwa> <def></def><kwb>copyFrom:</kwb> <def>i</def> <kwb>to:</kwb> <def>i</def> <kwb>+</kwb> <def>aLength</def> <kwb>-</kwb> <def></def><num>1</num><def></def><sym>.</sym><br />
<def></def><br />
      <sym>(</sym><def>assoc</def> <sym>:=</sym> <def>aDictionary</def> <kwb>associationAt:</kwb> <def>fragment</def> <kwb>ifAbsent:</kwb> <def></def><sym>[])</sym> <def></def><kwb>isNil</kwb><br />
<def></def>         <kwb>ifTrue:</kwb> <def></def><sym>[</sym><def>aDictionary</def> <kwb>at:</kwb> <def>fragment</def> <kwb>put:</kwb> <def></def><num>1</num><def></def><sym>]</sym><br />
<def></def>         <kwb>ifFalse:</kwb> <def></def><sym>[</sym><def>assoc</def> <kwb>value:</kwb> <def>assoc</def> <kwb>value +</kwb> <def></def><num>1</num><def></def><sym>] ].</sym><br />
<def></def>   <sym>^</sym><def>aDictionary ! !<br />
<br />
<br />
!</def><kwc>Tests</kwc> <def></def><kwb>class methodsFor:</kwb> <def></def><str>'benchmarking'</str><def>!</def><br />
<kwb>readFasta:</kwb> <def>sequenceName</def> <kwb>from:</kwb> <def>input</def><br />
   <kwd>| prefix newline buffer description line char |</kwd><br />
<def>   prefix</def> <sym>:=</sym> <def></def><str>'&gt;'</str><def>,sequenceName</def><sym>.</sym><br />
<def>   newline</def> <sym>:=</sym> <def></def><kwc>Character</kwc> <def></def><kwb>lf</kwb><def></def><sym>.</sym><br />
<def></def><br />
   <com>&quot;* find start of particular fasta sequence *&quot;</com><def></def><br />
   <sym>[(</sym><def>input</def> <kwb>atEnd</kwb><def></def><sym>)</sym> <def></def><kwb>or:</kwb> <def></def><sym>[</sym><br />
<def></def>         <sym>(</sym><def>input</def> <kwb>peek =</kwb> <def>$&gt;</def><sym>)</sym><br />
<def></def>            <kwb>ifTrue:</kwb> <def></def><sym>[((</sym><def>line</def> <sym>:=</sym> <def>input</def> <kwb>upTo:</kwb> <def>newline</def><sym>)</sym><br />
<def></def>               <kwb>indexOfSubCollection:</kwb> <def>prefix</def> <kwb>startingAt:</kwb> <def></def><num>1</num><def></def><sym>)</sym> <def></def><kwb>=</kwb> <def></def><num>1</num><def></def><sym>]</sym><br />
<def></def>            <kwb>ifFalse:</kwb> <def></def><sym>[</sym><def>input</def> <kwb>skipTo:</kwb> <def>newline</def><sym>.</sym> <def></def><kwa>false</kwa><def></def><sym>]]</sym><br />
<def></def>      <sym>]</sym> <def></def><kwb>whileFalse</kwb><def></def><sym>.</sym><br />
<def></def><br />
   <com>&quot;* line-by-line read - it would be a lot faster to block read *&quot;</com><def><br />
   description</def> <sym>:=</sym> <def>line</def><sym>.</sym><br />
<def>   buffer</def> <sym>:=</sym> <def></def><kwc>ReadWriteStream</kwc> <def></def><kwb>on:</kwb> <def></def><sym>(</sym><def></def><kwc>String</kwc> <def></def><kwb>new:</kwb> <def></def><num>1028</num><def></def><sym>).</sym><br />
<def></def>   <sym>[(</sym><def>input</def> <kwb>atEnd</kwb><def></def><sym>)</sym> <def></def><kwb>or:</kwb> <def></def><sym>[(</sym><def>char</def> <sym>:=</sym> <def>input</def> <kwb>peek</kwb><def></def><sym>)</sym> <def></def><kwb>=</kwb> <def>$&gt;</def><sym>]]</sym> <def></def><kwb>whileFalse:</kwb> <def></def><sym>[</sym><br />
<def></def>      <sym>(</sym><def>char</def> <kwb>=</kwb> <def>$</def><sym>;)</sym><br />
<def></def>         <kwb>ifTrue:</kwb> <def></def><sym>[</sym><def>input</def> <kwb>upTo:</kwb> <def>newline</def><sym>]</sym><br />
<def></def>         <kwb>ifFalse:</kwb> <def></def><sym>[</sym><def>buffer</def> <kwb>nextPutAll:</kwb> <def></def><sym>(</sym><def>input</def> <kwb>upTo:</kwb> <def>newline</def><sym>)]</sym><br />
<def></def>      <sym>].</sym><br />
<def></def>   <sym>^</sym><def></def><kwc>Association</kwc> <def></def><kwb>key:</kwb> <def>description</def> <kwb>value:</kwb> <def>buffer</def> <kwb>contents</kwb> <def>! !<br />
<br />
!</def><kwc>Tests</kwc> <def></def><kwb>class methodsFor:</kwb> <def></def><str>'benchmarking'</str><def>!</def><br />
<kwb>knucleotideFrom:</kwb> <def>input</def> <kwb>to:</kwb> <def>output</def><br />
   <kwd>| sequence newline writeFrequencies writeCount |</kwd><br />
<def><br />
   sequence</def> <sym>:= (</sym><def></def><kwa>self</kwa> <def></def><kwb>readFasta:</kwb> <def></def><str>'THREE'</str><def></def> <kwb>from:</kwb> <def>input</def><sym>)</sym> <def></def><kwb>value asUppercase</kwb><def></def><sym>.</sym><br />
<def>   newline</def> <sym>:=</sym> <def></def><kwc>Character</kwc> <def></def><kwb>lf</kwb><def></def><sym>.</sym><br />
<def><br />
   writeFrequencies</def> <sym>:=</sym><br />
<def></def>      <sym>[</sym><def></def><kwd>:k</kwd> <def></def><sym>|</sym> <def></def><kwd>| frequencies count |</kwd><br />
<def>      frequencies</def> <sym>:=</sym> <def></def><kwc>SortedCollection</kwc> <def></def><kwb>sortBlock:</kwb> <def></def><sym>[</sym><def></def><kwd>:a :b</kwd><def></def><sym>|</sym><br />
<def></def>         <sym>(</sym><def>a</def> <kwb>value =</kwb> <def>b</def> <kwb>value</kwb><def></def><sym>)</sym> <def></def><kwb>ifTrue:</kwb> <def></def><sym>[</sym><def>b</def> <kwb>key</kwb> <def>&lt;</def> <kwb>a key</kwb><def></def><sym>]</sym> <def></def><kwb>ifFalse:</kwb> <def></def><sym>[</sym><def>b</def> <kwb>value</kwb> <def>&lt;</def> <kwb>a value</kwb><def></def><sym>]].</sym><br />
<def><br />
      count</def> <sym>:=</sym> <def></def><num>0.0</num><def></def><sym>.</sym><br />
<def></def>      <sym>(</sym><def>sequence</def> <kwb>substringFrequencies:</kwb> <def>k</def> <kwb>using:</kwb> <def></def><kwc>Dictionary</kwc> <def></def><kwb>new</kwb><def></def><sym>)</sym><br />
<def></def>         <kwb>associationsDo:</kwb> <def></def><sym>[</sym><def></def><kwd>:each</kwd><def></def><sym>|</sym><br />
<def>            frequencies</def> <kwb>add:</kwb> <def>each</def><sym>.</sym> <def>count</def> <sym>:=</sym> <def>count</def> <kwb>+</kwb> <def>each</def> <kwb>value</kwb><def></def><sym>].</sym><br />
<def><br />
      frequencies</def> <kwb>do:</kwb> <def></def><sym>[</sym><def></def><kwd>:each</kwd> <def></def><sym>|</sym> <def></def><kwd>| percentage |</kwd><br />
<def>         percentage</def> <sym>:= (</sym><def>each</def> <kwb>value /</kwb> <def>count</def><sym>)</sym> <def></def><kwb>*</kwb> <def></def><num>100.0</num><def></def><sym>.</sym><br />
<def>         output</def><br />
            <kwb>nextPutAll:</kwb> <def>each</def> <kwb>key</kwb><def></def><sym>;</sym> <def></def><kwb>space</kwb><def></def><sym>;</sym><br />
<def></def>            <kwb>print:</kwb> <def>percentage</def> <kwb>digits:</kwb> <def></def><num>3</num><def></def><sym>;</sym> <def></def><kwb>nl</kwb><def></def><sym>]].</sym><br />
<def><br />
   writeCount</def> <sym>:= [</sym><def></def><kwd>:nucleotideFragment</kwd> <def></def><sym>|</sym> <def></def><kwd>| frequencies count |</kwd><br />
<def>      frequencies</def> <sym>:=</sym> <def>sequence</def> <kwb>substringFrequencies:</kwb> <def>nucleotideFragment</def> <kwb>size</kwb><br />
<def></def>         <kwb>using:</kwb> <def></def><kwc>Dictionary</kwc> <def></def><kwb>new</kwb><def></def><sym>.</sym><br />
<def>      count</def> <sym>:=</sym> <def>frequencies</def> <kwb>at:</kwb> <def>nucleotideFragment</def> <kwb>ifAbsent:</kwb> <def></def><sym>[</sym><def></def><num>0</num><def></def><sym>].</sym><br />
<def>      output</def> <kwb>print:</kwb> <def>count</def><sym>;</sym> <def></def><kwb>tab</kwb><def></def><sym>;</sym> <def></def><kwb>nextPutAll:</kwb> <def>nucleotideFragment</def><sym>;</sym> <def></def><kwb>nl</kwb><def></def><sym>].</sym><br />
<def><br />
   writeFrequencies</def> <kwb>value:</kwb> <def></def><num>1</num><def></def><sym>.</sym> <def>output</def> <kwb>nl</kwb><def></def><sym>.</sym><br />
<def>   writeFrequencies</def> <kwb>value:</kwb> <def></def><num>2</num><def></def><sym>.</sym> <def>output</def> <kwb>nl</kwb><def></def><sym>.</sym><br />
<def><br />
   writeCount</def> <kwb>value:</kwb> <def></def><str>'GGT'</str><def></def><sym>.</sym><br />
<def>   writeCount</def> <kwb>value:</kwb> <def></def><str>'GGTA'</str><def></def><sym>.</sym><br />
<def>   writeCount</def> <kwb>value:</kwb> <def></def><str>'GGTATT'</str><def></def><sym>.</sym><br />
<def>   writeCount</def> <kwb>value:</kwb> <def></def><str>'GGTATTTTAATT'</str><def></def><sym>.</sym><br />
<def>   writeCount</def> <kwb>value:</kwb> <def></def><str>'GGTATTTTAATTTATAGT'</str><def></def><sym>.</sym><def>! !<br />
!</def><kwc>Tests</kwc> <def></def><kwb>class methodsFor:</kwb> <def></def><str>'benchmark scripts'</str><def>!<br />
knucleotide</def>   <kwa>self</kwa> <def></def><kwb>knucleotideFrom:</kwb> <def></def><kwa>self</kwa> <def></def><kwb>stdinSpecial to:</kwb> <def></def><kwa>self</kwa> <def></def><kwb>stdout</kwb><def></def><sym>.   ^</sym><def></def><str>''</str><def>! !</def><br />
<br />
<kwc>Tests</kwc> <def></def><kwb>knucleotide</kwb><def>!</def><br />
</source>
