<source>
<def></def><slc>-----------------------------------------------------------------------</slc><br />
<def></def><slc>-- The Computer Language Shootout</slc><br />
<def></def><slc>-- http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>--</slc><br />
<def></def><slc>-- Contributed by Jim Rogers</slc><br />
<def></def><slc>-- Modified by Georg Bauhaus</slc><br />
<def></def><slc>--</slc><br />
<def></def><slc>-- This version uses the GNAT Spitbol Pattern matching libraries</slc><br />
<def></def><slc>-- rather than the more commonly used Unix-style regex libraries</slc><br />
<def></def><slc>-----------------------------------------------------------------------</slc><br />
<def></def><br />
<kwa>with</kwa> <def>Ada.Text_Io</def><sym>;</sym> <def></def><kwa>use</kwa> <def>Ada.Text_Io</def><sym>;</sym><br />
<def></def><kwa>with</kwa> <def>Ada.Integer_Text_IO</def><sym>;</sym> <def></def><kwa>use</kwa> <def>Ada.Integer_Text_IO</def><sym>;</sym><br />
<def></def><kwa>with</kwa> <def>Ada.Strings.Unbounded</def><sym>;</sym> <def></def><kwa>use</kwa> <def>Ada.Strings.Unbounded</def><sym>;</sym><br />
<def></def><kwa>with</kwa> <def>Gnat.Spitbol.Patterns</def><sym>;</sym> <def></def><kwa>use</kwa> <def>Gnat.Spitbol.Patterns</def><sym>;</sym><br />
<def></def><kwa>use</kwa> <def>Gnat.Spitbol</def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def>Regexdna</def> <kwa>is</kwa><br />
<def>   Variant_Labels</def> <sym>:</sym> <def></def><kwa>constant array</kwa> <def></def><sym>(</sym><def></def><kwb>Positive</kwb> <def></def><kwa>range</kwa> <def></def><num>1</num><def>.</def><num>.9</num><def></def><sym>)</sym> <def></def><kwa>of</kwa> <def>Vstring</def> <sym>:= (</sym><br />
<def>      To_Unbounded_String</def><sym>(</sym><def></def><str>&quot;agggtaaa|tttaccct&quot;</str><def></def><sym>),</sym><br />
<def>      To_Unbounded_String</def><sym>(</sym><def></def><str>&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</str><def></def><sym>),</sym><br />
<def>      To_Unbounded_String</def><sym>(</sym><def></def><str>&quot;a[act]ggtaaa|tttacc[agt]t&quot;</str><def></def><sym>),</sym><br />
<def>      To_Unbounded_String</def><sym>(</sym><def></def><str>&quot;ag[act]gtaaa|tttac[agt]ct&quot;</str><def></def><sym>),</sym><br />
<def>      To_Unbounded_String</def><sym>(</sym><def></def><str>&quot;agg[act]taaa|ttta[agt]cct&quot;</str><def></def><sym>),</sym><br />
<def>      To_Unbounded_String</def><sym>(</sym><def></def><str>&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</str><def></def><sym>),</sym><br />
<def>      To_Unbounded_String</def><sym>(</sym><def></def><str>&quot;agggt[cgt]aa|tt[acg]accct&quot;</str><def></def><sym>),</sym><br />
<def>      To_Unbounded_String</def><sym>(</sym><def></def><str>&quot;agggta[cgt]a|t[acg]taccct&quot;</str><def></def><sym>),</sym><br />
<def>      To_Unbounded_String</def><sym>(</sym><def></def><str>&quot;agggtaa[cgt]|[acg]ttaccct&quot;</str><def></def><sym>));</sym><br />
<def><br />
   Variant_Patterns</def> <sym>:</sym> <def></def><kwa>constant array</kwa><def></def><sym>(</sym><def></def><kwb>Positive</kwb> <def></def><kwa>range</kwa> <def></def><num>1</num><def>.</def><num>.9</num><def></def><sym>)</sym> <def></def><kwa>of</kwa> <def>Pattern</def> <sym>:= (</sym><br />
<def></def>      <str>&quot;agggtaaa&quot;</str><def></def> <kwa>or</kwa> <def></def><str>&quot;tttaccct&quot;</str><def></def><sym>,</sym><br />
<def></def>      <sym>(</sym><def>Any</def><sym>(</sym><def></def><str>&quot;cgt&quot;</str><def></def><sym>) &amp;</sym> <def></def><str>&quot;gggtaaa&quot;</str><def></def><sym>)</sym> <def></def><kwa>or</kwa> <def></def><sym>(</sym><def></def><str>&quot;tttaccc&quot;</str><def></def> <sym>&amp;</sym> <def>Any</def><sym>(</sym><def></def><str>&quot;acg&quot;</str><def></def><sym>)),</sym><br />
<def></def>      <sym>(</sym><def></def><str>&quot;a&quot;</str><def></def> <sym>&amp;</sym> <def>Any</def><sym>(</sym><def></def><str>&quot;act&quot;</str><def></def><sym>) &amp;</sym> <def></def><str>&quot;ggtaaa&quot;</str><def></def><sym>)</sym> <def></def><kwa>or</kwa> <def></def><sym>(</sym><def></def><str>&quot;tttacc&quot;</str><def></def> <sym>&amp;</sym> <def>Any</def><sym>(</sym><def></def><str>&quot;agt&quot;</str><def></def><sym>) &amp;</sym> <def></def><str>&quot;t&quot;</str><def></def><sym>),</sym><br />
<def></def>      <sym>(</sym><def></def><str>&quot;ag&quot;</str><def></def> <sym>&amp;</sym> <def>Any</def><sym>(</sym><def></def><str>&quot;act&quot;</str><def></def><sym>) &amp;</sym> <def></def><str>&quot;gtaaa&quot;</str><def></def><sym>)</sym> <def></def><kwa>or</kwa> <def></def><sym>(</sym><def></def><str>&quot;tttac&quot;</str><def></def> <sym>&amp;</sym> <def>Any</def><sym>(</sym><def></def><str>&quot;agt&quot;</str><def></def><sym>) &amp;</sym> <def></def><str>&quot;ct&quot;</str><def></def><sym>),</sym><br />
<def></def>      <sym>(</sym><def></def><str>&quot;agg&quot;</str><def></def> <sym>&amp;</sym> <def>Any</def><sym>(</sym><def></def><str>&quot;act&quot;</str><def></def><sym>) &amp;</sym> <def></def><str>&quot;taaa&quot;</str><def></def><sym>)</sym> <def></def><kwa>or</kwa> <def></def><sym>(</sym><def></def><str>&quot;ttta&quot;</str><def></def> <sym>&amp;</sym> <def>Any</def><sym>(</sym><def></def><str>&quot;agt&quot;</str><def></def><sym>) &amp;</sym> <def></def><str>&quot;cct&quot;</str><def></def><sym>),</sym><br />
<def></def>      <sym>(</sym><def></def><str>&quot;aggg&quot;</str><def></def> <sym>&amp;</sym> <def>Any</def><sym>(</sym><def></def><str>&quot;acg&quot;</str><def></def><sym>) &amp;</sym> <def></def><str>&quot;aaa&quot;</str><def></def><sym>)</sym> <def></def><kwa>or</kwa> <def></def><sym>(</sym><def></def><str>&quot;ttt&quot;</str><def></def> <sym>&amp;</sym> <def>Any</def><sym>(</sym><def></def><str>&quot;cgt&quot;</str><def></def><sym>) &amp;</sym> <def></def><str>&quot;ccct&quot;</str><def></def><sym>),</sym><br />
<def></def>      <sym>(</sym><def></def><str>&quot;agggt&quot;</str><def></def> <sym>&amp;</sym> <def>Any</def><sym>(</sym><def></def><str>&quot;cgt&quot;</str><def></def><sym>) &amp;</sym> <def></def><str>&quot;aa&quot;</str><def></def><sym>)</sym> <def></def><kwa>or</kwa> <def></def><sym>(</sym><def></def><str>&quot;tt&quot;</str><def></def> <sym>&amp;</sym> <def>Any</def><sym>(</sym><def></def><str>&quot;acg&quot;</str><def></def><sym>) &amp;</sym> <def></def><str>&quot;accct&quot;</str><def></def><sym>),</sym><br />
<def></def>      <sym>(</sym><def></def><str>&quot;agggta&quot;</str><def></def> <sym>&amp;</sym> <def>Any</def><sym>(</sym><def></def><str>&quot;cgt&quot;</str><def></def><sym>) &amp;</sym> <def></def><str>&quot;a&quot;</str><def></def><sym>)</sym> <def></def><kwa>or</kwa> <def></def><sym>(</sym><def></def><str>&quot;t&quot;</str><def></def> <sym>&amp;</sym> <def>Any</def><sym>(</sym><def></def><str>&quot;acg&quot;</str><def></def><sym>) &amp;</sym> <def></def><str>&quot;taccct&quot;</str><def></def><sym>),</sym><br />
<def></def>      <sym>(</sym><def></def><str>&quot;agggtaa&quot;</str><def></def> <sym>&amp;</sym> <def>Any</def><sym>(</sym><def></def><str>&quot;cgt&quot;</str><def></def><sym>))</sym> <def></def><kwa>or</kwa> <def></def><sym>(</sym><def>Any</def><sym>(</sym><def></def><str>&quot;acg&quot;</str><def></def><sym>) &amp;</sym> <def></def><str>&quot;ttaccct&quot;</str><def></def><sym>));</sym><br />
<def></def><br />
   <kwa>type</kwa> <def>Iub</def> <kwa>is</kwa><br />
<def></def>      <kwa>record</kwa><br />
<def>         Code</def>         <sym>:</sym> <def>Pattern</def><sym>;</sym><br />
<def>         Alternatives</def> <sym>:</sym> <def>Unbounded_String</def><sym>;</sym><br />
<def></def>   <kwa>end record</kwa><def></def><sym>;</sym><br />
<def></def>   <kwa>subtype</kwa> <def>Codes_Index</def> <kwa>is</kwa> <def></def><kwb>Natural</kwb> <def></def><kwa>range</kwa> <def></def><num>0</num><def>.</def><num>.10</num><def></def><sym>;</sym><br />
<def></def>   <kwa>type</kwa> <def>Codes_Array</def> <kwa>is array</kwa> <def></def><sym>(</sym><def>Codes_Index</def><sym>)</sym> <def></def><kwa>of</kwa> <def>Iub</def><sym>;</sym><br />
<def>   Codes</def> <sym>:</sym> <def></def><kwa>constant</kwa> <def>Codes_Array</def> <sym>:= (</sym><br />
<def></def>      <sym>(</sym><def>Any</def><sym>(</sym><def></def><str>&quot;B&quot;</str><def></def><sym>),</sym> <def>To_Unbounded_String</def> <sym>(</sym><def></def><str>&quot;(c|g|t)&quot;</str><def></def><sym>)),</sym><br />
<def></def>      <sym>(</sym><def>Any</def><sym>(</sym><def></def><str>&quot;D&quot;</str><def></def><sym>),</sym> <def>To_Unbounded_String</def> <sym>(</sym><def></def><str>&quot;(a|g|t)&quot;</str><def></def><sym>)),</sym><br />
<def></def>      <sym>(</sym><def>Any</def><sym>(</sym><def></def><str>&quot;H&quot;</str><def></def><sym>),</sym> <def>To_Unbounded_String</def> <sym>(</sym><def></def><str>&quot;(a|c|t)&quot;</str><def></def><sym>)),</sym><br />
<def></def>      <sym>(</sym><def>Any</def><sym>(</sym><def></def><str>&quot;K&quot;</str><def></def><sym>),</sym> <def>To_Unbounded_String</def> <sym>(</sym><def></def><str>&quot;(g|t)&quot;</str><def></def><sym>)),</sym><br />
<def></def>      <sym>(</sym><def>Any</def><sym>(</sym><def></def><str>&quot;M&quot;</str><def></def><sym>),</sym> <def>To_Unbounded_String</def> <sym>(</sym><def></def><str>&quot;(a|c)&quot;</str><def></def><sym>)),</sym><br />
<def></def>      <sym>(</sym><def>Any</def><sym>(</sym><def></def><str>&quot;N&quot;</str><def></def><sym>),</sym> <def>To_Unbounded_String</def> <sym>(</sym><def></def><str>&quot;(a|c|g|t)&quot;</str><def></def><sym>)),</sym><br />
<def></def>      <sym>(</sym><def>Any</def><sym>(</sym><def></def><str>&quot;R&quot;</str><def></def><sym>),</sym> <def>To_Unbounded_String</def> <sym>(</sym><def></def><str>&quot;(a|g)&quot;</str><def></def><sym>)),</sym><br />
<def></def>      <sym>(</sym><def>Any</def><sym>(</sym><def></def><str>&quot;S&quot;</str><def></def><sym>),</sym> <def>To_Unbounded_String</def> <sym>(</sym><def></def><str>&quot;(c|g)&quot;</str><def></def><sym>)),</sym><br />
<def></def>      <sym>(</sym><def>Any</def><sym>(</sym><def></def><str>&quot;V&quot;</str><def></def><sym>),</sym> <def>To_Unbounded_String</def> <sym>(</sym><def></def><str>&quot;(a|c|g)&quot;</str><def></def><sym>)),</sym><br />
<def></def>      <sym>(</sym><def>Any</def><sym>(</sym><def></def><str>&quot;W&quot;</str><def></def><sym>),</sym> <def>To_Unbounded_String</def> <sym>(</sym><def></def><str>&quot;(a|t)&quot;</str><def></def><sym>)),</sym><br />
<def></def>      <sym>(</sym><def>Any</def><sym>(</sym><def></def><str>&quot;Y&quot;</str><def></def><sym>),</sym> <def>To_Unbounded_String</def> <sym>(</sym><def></def><str>&quot;(c|t)&quot;</str><def></def><sym>)));</sym><br />
<def></def><br />
   <kwa>type</kwa> <def>Dna_Lines</def> <kwa>is array</kwa><def></def><sym>(</sym><def></def><kwb>Positive</kwb> <def></def><kwa>range</kwa> <def></def><sym>&lt;&gt;)</sym> <def></def><kwa>of</kwa> <def>Vstring</def><sym>;</sym><br />
<def></def>   <kwa>function</kwa> <def>Length</def><sym>(</sym><def>Item</def> <sym>:</sym> <def></def><kwa>in</kwa> <def>Dna_Lines</def><sym>)</sym> <def></def><kwa>return</kwa> <def></def><kwb>Natural</kwb> <def></def><kwa>is</kwa><br />
<def>      Sum</def> <sym>:</sym> <def></def><kwb>Natural</kwb> <def></def><sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>   <kwa>begin</kwa><br />
<def></def>      <kwa>for</kwa> <def>I</def> <kwa>in</kwa> <def>Item</def><sym>'</sym><def></def><kwa>range loop</kwa><br />
<def>         Sum</def> <sym>:=</sym> <def>Sum</def> <sym>+</sym> <def>Length</def><sym>(</sym><def>Item</def><sym>(</sym><def>I</def><sym>));</sym><br />
<def></def>      <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def></def>      <kwa>return</kwa> <def>Sum</def><sym>;</sym><br />
<def></def>   <kwa>end</kwa> <def>Length</def><sym>;</sym><br />
<def><br />
   Initial_Length</def> <sym>:</sym> <def></def><kwb>Natural</kwb> <def></def><sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>   Code_Length</def> <sym>:</sym> <def></def><kwb>Natural</kwb><def></def><sym>;</sym><br />
<def>   Line</def> <sym>:</sym> <def></def><kwb>String</kwb><def></def><sym>(</sym><def></def><num>1</num><def>.</def><num>.80</num><def></def><sym>);</sym><br />
<def>   Var_Line</def> <sym>:</sym> <def>Vstring_Var</def><sym>;</sym><br />
<def>   Line_Length</def> <sym>:</sym> <def></def><kwb>Natural</kwb><def></def><sym>;</sym><br />
<def>   Sequence</def> <sym>:</sym> <def>Vstring_Var</def><sym>;</sym><br />
<def>   Fasta_Description</def> <sym>:</sym> <def></def><kwa>constant</kwa> <def>Pattern</def> <sym>:=</sym> <def>Pos</def><sym>(</sym><def></def><num>0</num><def></def><sym>) &amp;</sym> <def></def><str>&quot;&gt;&quot;</str><def></def> <sym>&amp;</sym> <def>Rest</def><sym>;</sym><br />
<def>   Descrip_Pattern</def> <sym>:</sym> <def></def><kwa>constant</kwa> <def>Pattern</def> <sym>:= (</sym><def>Fasta_Description</def><sym>);</sym><br />
<def>   Num_Lines</def> <sym>:</sym> <def></def><kwb>Natural</kwb><def></def><sym>;</sym><br />
<def>   Match_Found</def> <sym>:</sym> <def></def><kwb>Boolean</kwb><def></def><sym>;</sym><br />
<def></def><kwa>begin</kwa><br />
<def></def><br />
   <slc>-- Read FASTA Sequence</slc><br />
<def></def>   <slc>-- Record length and remove the unwanted elements</slc><br />
<def></def><br />
   <kwa>while not</kwa> <def>End_Of_File</def> <kwa>loop</kwa><br />
<def>      Get_Line</def><sym>(</sym><def>Item</def> <sym>=&gt;</sym> <def>Line</def><sym>,</sym> <def>Last</def> <sym>=&gt;</sym> <def>Line_Length</def><sym>);</sym><br />
<def>      Var_Line</def> <sym>:=</sym> <def>To_Unbounded_String</def><sym>(</sym><def>Line</def><sym>(</sym><def></def><num>1</num><def>..Line_Length</def><sym>));</sym><br />
<def>      Initial_Length</def> <sym>:=</sym> <def>Initial_Length</def> <sym>+</sym> <def>Length</def><sym>(</sym><def>Var_Line</def><sym>) +</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def>      Match</def><sym>(</sym><def>Subject</def> <sym>=&gt;</sym> <def>Var_Line</def><sym>,</sym><br />
<def>         Pat</def> <sym>=&gt;</sym> <def>Descrip_Pattern</def><sym>,</sym> <def>Replace</def> <sym>=&gt;</sym> <def></def><str>&quot;&quot;</str><def></def><sym>);</sym><br />
<def>      Append</def><sym>(</sym><def>Source</def> <sym>=&gt;</sym> <def>Sequence</def><sym>,</sym> <def>New_Item</def> <sym>=&gt;</sym> <def>Var_Line</def><sym>);</sym><br />
<def></def>   <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def>   Code_Length</def> <sym>:=</sym> <def>Length</def><sym>(</sym><def>Sequence</def><sym>);</sym><br />
<def></def><br />
   <slc>-- regex match</slc><br />
<def></def>   <kwa>declare</kwa><br />
<def>      Count</def> <sym>:</sym> <def></def><kwb>Natural</kwb> <def></def><sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>      <kwa>function</kwa> <def>Inc_Count</def> <kwa>return</kwa> <def></def><kwb>Boolean</kwb> <def></def><kwa>is</kwa><br />
<def></def>      <kwa>begin</kwa><br />
<def>         Count</def> <sym>:=</sym> <def>Count</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>         <kwa>return</kwa> <def>False</def><sym>;</sym><br />
<def></def>      <kwa>end</kwa> <def>Inc_Count</def><sym>;</sym><br />
<def></def>   <kwa>begin</kwa><br />
<def></def>      <kwa>for</kwa> <def>I</def> <kwa>in</kwa> <def>Variant_Labels</def><sym>'</sym><def></def><kwa>range loop</kwa><br />
<def>         Count</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>         Match</def><sym>(</sym><def>Subject</def> <sym>=&gt;</sym> <def>Sequence</def><sym>,</sym><br />
<def>            Pat</def> <sym>=&gt;</sym> <def>Variant_Patterns</def><sym>(</sym><def>I</def><sym>) &amp; (+</sym><def>Inc_Count</def><sym>'</sym><def>unrestricted_access</def><sym>));</sym><br />
<def>         Put</def><sym>(</sym><def>To_String</def><sym>(</sym><def>Variant_Labels</def><sym>(</sym><def>I</def><sym>)) &amp;</sym> <def></def><str>&quot; &quot;</str><def></def><sym>);</sym><br />
<def>         Put</def><sym>(</sym><def>Item</def> <sym>=&gt;</sym> <def>Count</def><sym>,</sym> <def>Width</def> <sym>=&gt;</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def>         New_Line</def><sym>;</sym><br />
<def></def>      <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def>      New_Line</def><sym>;</sym><br />
<def></def>   <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
   <slc>-- regex substitution</slc><br />
<def><br />
   Num_Lines</def> <sym>:=</sym> <def>Length</def><sym>(</sym><def>Sequence</def><sym>) /</sym> <def></def><num>80</num><def></def><sym>;</sym><br />
<def></def>   <kwa>if</kwa> <def>Length</def><sym>(</sym><def>Sequence</def><sym>)</sym> <def></def><kwa>mod</kwa> <def></def><num>80</num> <def></def><sym>&gt;</sym> <def></def><num>1</num> <def></def><kwa>then</kwa><br />
<def>      Num_Lines</def> <sym>:=</sym> <def>Num_Lines</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>   <kwa>end if</kwa><def></def><sym>;</sym><br />
<def></def>   <kwa>declare</kwa><br />
<def>      Sequence_Lines</def> <sym>:</sym> <def>Dna_Lines</def><sym>(</sym><def></def><num>1</num><def>..Num_Lines</def><sym>);</sym><br />
<def>      Low</def><sym>,</sym> <def>Sub_Len</def> <sym>:</sym> <def></def><kwb>Natural</kwb><def></def><sym>;</sym><br />
<def></def>   <kwa>begin</kwa><br />
<def></def>      <slc>-- Distribute Sequence to Sequence_Lines</slc><br />
<def>      Low</def> <sym>:=</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def>      Sub_Len</def> <sym>:=</sym> <def></def><num>80</num><def></def><sym>;</sym><br />
<def></def>      <kwa>for</kwa> <def>I</def> <kwa>in</kwa> <def>Sequence_Lines</def><sym>'</sym><def></def><kwa>range loop</kwa><br />
<def>         Sequence_Lines</def><sym>(</sym><def>I</def><sym>) :=</sym> <def>Substr</def><sym>(</sym><def>Str</def> <sym>=&gt;</sym> <def>Sequence</def> <sym>,</sym><br />
<def>            Start</def> <sym>=&gt;</sym> <def>Low</def><sym>,</sym> <def>Len</def> <sym>=&gt;</sym> <def>Sub_Len</def> <sym>);</sym><br />
<def>         Low</def> <sym>:=</sym> <def>Low</def> <sym>+</sym> <def>Sub_Len</def><sym>;</sym><br />
<def></def>         <kwa>if</kwa> <def>Low</def> <sym>+</sym> <def>Sub_Len</def> <sym>&gt;</sym> <def>Length</def><sym>(</sym><def>Sequence</def><sym>)</sym> <def></def><kwa>then</kwa><br />
<def>            Sub_Len</def> <sym>:=</sym> <def>Length</def><sym>(</sym><def>Sequence</def><sym>) -</sym> <def>Low</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>         <kwa>end if</kwa><def></def><sym>;</sym><br />
<def></def>      <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def></def><br />
      <slc>-- Perform the regex substitution</slc><br />
<def></def>      <kwa>for</kwa> <def>I</def> <kwa>in</kwa> <def>Sequence_Lines</def><sym>'</sym><def></def><kwa>range loop</kwa><br />
<def></def>         <kwa>for</kwa> <def>C</def> <kwa>in</kwa> <def>Codes_Index</def> <kwa>loop</kwa><br />
<def></def>            <kwa>loop</kwa><br />
<def>               Match_Found</def> <sym>:=</sym> <def>Match</def><sym>(</sym><def>Subject</def> <sym>=&gt;</sym> <def>Sequence_Lines</def><sym>(</sym><def>I</def><sym>),</sym><br />
<def>                  Pat</def> <sym>=&gt;</sym> <def>Codes</def><sym>(</sym><def>C</def><sym>)</sym><def>.Code</def><sym>,</sym> <def>Replace</def> <sym>=&gt;</sym> <def>Codes</def><sym>(</sym><def>C</def><sym>)</sym><def>.Alternatives</def><sym>);</sym><br />
<def></def>               <kwa>exit when not</kwa> <def>Match_Found</def><sym>;</sym><br />
<def></def>            <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def></def>         <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def></def>      <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def>      Put</def><sym>(</sym><def>Item</def> <sym>=&gt;</sym> <def>Initial_Length</def><sym>,</sym> <def>Width</def> <sym>=&gt;</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def>      New_Line</def><sym>;</sym><br />
<def>      Put</def><sym>(</sym><def>Item</def> <sym>=&gt;</sym> <def>Code_Length</def><sym>,</sym> <def>Width</def> <sym>=&gt;</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def>      New_Line</def><sym>;</sym><br />
<def>      Put</def><sym>(</sym><def>Item</def> <sym>=&gt;</sym> <def>Length</def><sym>(</sym><def>Sequence_Lines</def><sym>),</sym> <def>Width</def> <sym>=&gt;</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def>      New_Line</def><sym>;</sym><br />
<def></def>   <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<br />
<kwa>end</kwa> <def>Regexdna</def><sym>;</sym><def></def><br />
</source>
