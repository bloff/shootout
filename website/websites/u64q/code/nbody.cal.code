<source>
<def></def><com>/**</com><br />
<com> * The Computer Language Benchmarks Game</com><br />
<com> * Based on the CAL Open Quark version</com><br />
<com> * Contributed by Joseph Wong.</com><br />
<com> */</com><def></def><br />
<kwa>module</kwa> <def>Nbody</def><sym>;</sym><br />
<def></def><br />
<kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Core</def><sym>.</sym><def>Prelude</def> <kwa>using</kwa><br />
<def></def>    <kwa>typeClass</kwa> <def></def><sym>=</sym> <def>Inputable</def><sym>,</sym> <def>Outputable</def><sym>;</sym><br />
<def></def>    <kwa>typeConstructor</kwa> <def></def><sym>=</sym> <def>CalValue</def><sym>,</sym> <def>Double</def><sym>,</sym> <def>Int</def><sym>,</sym> <def>JObject</def><sym>,</sym> <def>String</def><sym>;</sym><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>eager</def><sym>,</sym> <def>input</def><sym>,</sym> <def>output</def><sym>,</sym> <def>seq</def><sym>,</sym> <def>stringToInt</def><sym>,</sym> <def>unsafeCoerce</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Collections</def><sym>.</sym><def>Array</def><sym>;</sym><br />
<def></def><kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Collections</def><sym>.</sym><def>List</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>head</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Utilities</def><sym>.</sym><def>Math</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>sqrt</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Utilities</def><sym>.</sym><def>MessageFormat</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>formatWithPattern</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Utilities</def><sym>.</sym><def>Locale</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>invariantLocale</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><kwa>import</kwa> <def>Cal</def><sym>.</sym><def>IO</def><sym>.</sym><def>Console</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>printLine</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<kwa>data foreign unsafe import jvm</kwa> <def></def><str>&quot;double[]&quot;</str><def> JVector</def> <kwa>deriving</kwa> <def>Inputable</def><sym>,</sym> <def>Outputable</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;newArray&quot;</str><def> newVector</def> <sym>::</sym> <def>Int</def> <sym>-&gt;</sym> <def>JVector</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;subscriptArray&quot;</str><def> get</def> <sym>::</sym> <def>JVector</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Double</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;updateArray&quot;</str><def><br />
    set</def> <sym>::</sym> <def>JVector</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Double</def> <sym>-&gt;</sym> <def>Double</def><sym>;</sym><br />
<def></def><br />
<com>/** a body is represented by position, velocity and mass*/</com><def></def><br />
<kwa>data public</kwa> <def>Body</def> <sym>=</sym><br />
<def>    Body<br />
        position</def> <sym>:: !</sym><def>JVector<br />
        velocity</def> <sym>:: !</sym><def>JVector<br />
        mass</def> <sym>:: !</sym><def>Double</def><br />
    <sym>;</sym><br />
<def></def><br />
<com>/** construct a vector from three doubles*/</com><def><br />
makeVector</def> <sym>::</sym> <def>Double</def> <sym>-&gt;</sym> <def>Double</def> <sym>-&gt;</sym> <def>Double</def> <sym>-&gt;</sym> <def>JVector</def><sym>;</sym><br />
<def>makeVector</def> <sym>!</sym><def>x</def> <sym>!</sym><def>y</def> <sym>!</sym><def>z</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa><br />
<def>        v</def> <sym>::</sym> <def>JVector</def><sym>;</sym><br />
<def>        v</def> <sym>=</sym> <def>newVector</def> <num>3</num><def></def><sym>;</sym><br />
<def></def>    <kwa>in</kwa><br />
<def>        set v</def> <num>0</num> <def>x</def><br />
        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>        set v</def> <num>1</num> <def>y</def><br />
        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>        set v</def> <num>2</num> <def>z</def><br />
        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>        v</def><br />
    <sym>;</sym><br />
<def><br />
daysPerYear</def> <sym>::</sym> <def>Double</def><sym>;</sym><br />
<def>daysPerYear</def> <sym>=</sym> <def></def><num>365.24</num><def></def><sym>;</sym><br />
<def><br />
pi</def> <sym>::</sym> <def>Double</def><sym>;</sym><br />
<def>pi</def> <sym>=</sym> <def></def><num>3.141592653589793</num><def></def><sym>;</sym><br />
<def><br />
solarMass</def> <sym>::</sym> <def>Double</def><sym>;</sym><br />
<def>solarMass</def> <sym>=</sym> <def></def><num>4</num> <def></def><sym>*</sym> <def>pi</def> <sym>*</sym> <def>pi</def><sym>;</sym><br />
<def></def><br />
<com>/** calculate the initial offset moment for the sun*/</com><def><br />
computeOffsetMomentum</def> <sym>::</sym> <def>BodyArray</def> <sym>-&gt;</sym> <def>Double</def><sym>;</sym><br />
<def>computeOffsetMomentum bodies</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa><br />
<def>        offset</def> <sym>::</sym> <def>JVector</def><sym>;</sym><br />
<def>        offset</def> <sym>=</sym> <def>makeVector</def> <num>0 0 0</num><def></def><sym>;</sym><br />
<def><br />
        sun</def> <sym>::</sym> <def>Body</def><sym>;</sym><br />
<def>        sun</def> <sym>=</sym> <def>eager</def> <sym>(</sym><def>bodies</def> <sym>`</sym><def>subscriptBodyArray</def><sym>`</sym> <def></def><num>0</num><def></def><sym>);</sym><br />
<def><br />
        length</def> <sym>::</sym> <def>Int</def><sym>;</sym><br />
<def>        length</def> <sym>=</sym> <def>eager $ lengthBodyArray bodies</def><sym>;</sym><br />
<def><br />
        updateOffsetForBodies</def> <sym>::</sym> <def>Int</def> <sym>-&gt; ();</sym><br />
<def>        updateOffsetForBodies</def> <sym>!</sym><def>i</def> <sym>=</sym><br />
<def></def>            <kwa>if</kwa> <def>i</def> <sym>&lt;</sym> <def>length</def> <kwa>then</kwa><br />
<def></def>                <sym>(</sym><br />
<def></def>                    <kwa>case</kwa> <def>bodies</def> <sym>`</sym><def>subscriptBodyArray</def><sym>`</sym> <def>i</def> <kwa>of</kwa><br />
<def>                    Body position velocity mass</def> <sym>-&gt;</sym><br />
<def>                        set offset</def> <num>0</num> <def></def><sym>(</sym><def>get offset</def> <num>0</num> <def></def><sym>+</sym> <def>get velocity</def> <num>0</num> <def></def><sym>*</sym> <def>mass</def><sym>)</sym><br />
<def></def>                        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                        set offset</def> <num>1</num> <def></def><sym>(</sym><def>get offset</def> <num>1</num> <def></def><sym>+</sym> <def>get velocity</def> <num>1</num> <def></def><sym>*</sym> <def>mass</def><sym>)</sym><br />
<def></def>                        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                        set offset</def> <num>2</num> <def></def><sym>(</sym><def>get offset</def> <num>2</num> <def></def><sym>+</sym> <def>get velocity</def> <num>2</num> <def></def><sym>*</sym> <def>mass</def><sym>)</sym><br />
<def></def>                        <sym>;</sym><br />
<def></def>                <sym>)</sym><br />
<def></def>                <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                updateOffsetForBodies</def> <sym>(</sym><def>i</def><sym>+</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>            <kwa>else</kwa><br />
<def></def>                <sym>();</sym><br />
<def></def><br />
    <kwa>in</kwa><br />
<def>        updateOffsetForBodies</def> <num>0</num><br />
<def></def>        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def></def>        <sym>(</sym><br />
<def></def>            <kwa>case</kwa> <def>sun</def> <kwa>of</kwa><br />
<def>            Body pos velocity mass</def> <sym>-&gt;</sym><br />
<def>                set velocity</def> <num>0</num> <def></def><sym>(-</sym><def>get offset</def> <num>0</num> <def></def><sym>/</sym> <def>solarMass</def><sym>)</sym><br />
<def></def>                <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                set velocity</def> <num>1</num> <def></def><sym>(-</sym><def>get offset</def> <num>1</num> <def></def><sym>/</sym> <def>solarMass</def><sym>)</sym><br />
<def></def>                <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                set velocity</def> <num>2</num> <def></def><sym>(-</sym><def>get offset</def> <num>2</num> <def></def><sym>/</sym> <def>solarMass</def><sym>)</sym><br />
<def></def>                <sym>;</sym><br />
<def></def>        <sym>)</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<com>/** calcualte the potential and kenetic energy*/</com><def><br />
energy</def> <sym>::</sym> <def>BodyArray</def> <sym>-&gt;</sym> <def>Double</def><sym>;</sym><br />
<def>energy</def> <sym>!</sym><def>bodies</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa><br />
<def>        numBodies</def> <sym>::</sym> <def>Int</def><sym>;</sym><br />
<def>        numBodies</def> <sym>=</sym> <def>eager $ lengthBodyArray bodies</def><sym>;</sym><br />
<def><br />
        loop</def> <sym>::</sym> <def>Double</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Double</def><sym>;</sym><br />
<def>        loop</def> <sym>!</sym><def>energy</def> <sym>!</sym><def>i</def> <sym>!</sym><def>j</def> <sym>=</sym><br />
<def></def>            <kwa>if</kwa> <def>j</def> <sym>&lt;</sym> <def>numBodies</def> <kwa>then</kwa><br />
<def></def>                <kwa>case</kwa> <def>bodies</def> <sym>`</sym><def>subscriptBodyArray</def><sym>`</sym> <def>i</def> <kwa>of</kwa><br />
<def>                Body pos1 vel1 mass1</def> <sym>-&gt;</sym><br />
<def></def>                    <kwa>case</kwa> <def>bodies</def> <sym>`</sym><def>subscriptBodyArray</def><sym>`</sym> <def>j</def> <kwa>of</kwa><br />
<def>                    Body pos2 vel2 mass2</def> <sym>-&gt;</sym><br />
<def></def>                        <kwa>let</kwa><br />
<def>                            dx</def> <sym>::</sym> <def>Double</def><sym>;</sym><br />
<def>                            dx</def> <sym>=</sym> <def>eager $ get pos1</def> <num>0</num> <def></def><sym>-</sym> <def>get pos2</def> <num>0</num><def></def><sym>;</sym><br />
<def><br />
                            dy</def> <sym>::</sym> <def>Double</def><sym>;</sym><br />
<def>                            dy</def> <sym>=</sym> <def>eager $ get pos1</def> <num>1</num> <def></def><sym>-</sym> <def>get pos2</def> <num>1</num><def></def><sym>;</sym><br />
<def><br />
                            dz</def> <sym>::</sym> <def>Double</def><sym>;</sym><br />
<def>                            dz</def> <sym>=</sym> <def>eager $ get pos1</def> <num>2</num> <def></def><sym>-</sym> <def>get pos2</def> <num>2</num><def></def><sym>;</sym><br />
<def><br />
                            distance</def> <sym>::</sym> <def>Double</def><sym>;</sym><br />
<def>                            distance</def> <sym>=</sym><br />
<def>                                eager $ sqrt</def> <sym>(</sym><def>dx</def> <sym>*</sym> <def>dx</def> <sym>+</sym> <def>dy</def> <sym>*</sym> <def>dy</def> <sym>+</sym> <def>dz</def> <sym>*</sym> <def>dz</def><sym>);</sym><br />
<def></def>                        <kwa>in</kwa><br />
<def>                            loop</def><br />
                                <sym>(</sym><def>energy</def> <sym>-</sym> <def>mass1</def> <sym>*</sym> <def>mass2</def> <sym>/</sym> <def>distance</def><sym>)</sym><br />
<def>                                i</def><br />
                                <sym>(</sym><def>j</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>                        <sym>;</sym><br />
<def></def>                    <sym>;</sym><br />
<def></def>            <kwa>else if</kwa> <def>i</def> <sym>&lt;</sym> <def>numBodies</def> <kwa>then</kwa><br />
<def></def>                <kwa>case</kwa> <def>bodies</def> <sym>`</sym><def>subscriptBodyArray</def><sym>`</sym> <def>i</def> <kwa>of</kwa><br />
<def>                Body pos vel mass</def> <sym>-&gt;</sym><br />
<def>                    loop</def><br />
                        <sym>(</sym><br />
<def>                            energy</def><br />
                            <sym>+</sym> <def></def><num>0.5</num> <def></def><sym>*</sym> <def>mass</def><br />
                                <sym>*</sym><br />
<def></def>                                <sym>(</sym><br />
<def>                                    get vel</def> <num>0</num> <def></def><sym>*</sym> <def>get vel</def> <num>0</num><br />
<def></def>                                    <sym>+</sym> <def>get vel</def> <num>1</num> <def></def><sym>*</sym> <def>get vel</def> <num>1</num><br />
<def></def>                                    <sym>+</sym> <def>get vel</def> <num>2</num> <def></def><sym>*</sym> <def>get vel</def> <num>2</num><br />
<def></def>                                <sym>)</sym><br />
<def></def>                        <sym>)</sym><br />
<def></def>                        <sym>(</sym><def>i</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>                        <sym>(</sym><def>i</def> <sym>+</sym> <def></def><num>2</num><def></def><sym>)</sym><br />
<def></def>                    <sym>;</sym><br />
<def></def>            <kwa>else</kwa><br />
<def>                energy</def><br />
            <sym>;</sym><br />
<def></def>    <kwa>in</kwa><br />
<def>        loop</def> <num>0.0 0 1</num><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<com>/** advance state of the bodies by time delta*/</com><def><br />
advance</def> <sym>::</sym> <def>Double</def> <sym>-&gt;</sym> <def>BodyArray</def> <sym>-&gt; ();</sym><br />
<def>advance</def> <sym>!</sym><def>dt</def> <sym>!</sym><def>bodies</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa><br />
<def>        numBodies</def> <sym>::</sym> <def>Int</def><sym>;</sym><br />
<def>        numBodies</def> <sym>=</sym> <def>eager $ lengthBodyArray bodies</def><sym>;</sym><br />
<def><br />
        updateVelocity</def> <sym>::</sym><br />
<def>            JVector</def> <sym>-&gt;</sym> <def>JVector</def> <sym>-&gt;</sym> <def>JVector</def> <sym>-&gt;</sym> <def>JVector</def> <sym>-&gt;</sym> <def>Double</def> <sym>-&gt;</sym> <def>Double</def> <sym>-&gt; ();</sym><br />
<def>        updateVelocity</def> <sym>!</sym><def>pos1</def> <sym>!</sym><def>pos2</def> <sym>!</sym><def>vel1</def> <sym>!</sym><def>vel2</def> <sym>!</sym><def>mass1</def> <sym>!</sym><def>mass2</def> <sym>=</sym><br />
<def></def>            <kwa>let</kwa><br />
<def>                dx</def> <sym>::</sym> <def>Double</def><sym>;</sym><br />
<def>                dx</def> <sym>=</sym> <def>eager $ get pos1</def> <num>0</num> <def></def><sym>-</sym> <def>get pos2</def> <num>0</num><def></def><sym>;</sym><br />
<def><br />
                dy</def> <sym>::</sym> <def>Double</def><sym>;</sym><br />
<def>                dy</def> <sym>=</sym> <def>eager $ get pos1</def> <num>1</num> <def></def><sym>-</sym> <def>get pos2</def> <num>1</num><def></def><sym>;</sym><br />
<def><br />
                dz</def> <sym>::</sym> <def>Double</def><sym>;</sym><br />
<def>                dz</def> <sym>=</sym> <def>eager $ get pos1</def> <num>2</num> <def></def><sym>-</sym> <def>get pos2</def> <num>2</num><def></def><sym>;</sym><br />
<def><br />
                mag</def> <sym>::</sym> <def>Double</def><sym>;</sym><br />
<def>                mag</def> <sym>=</sym><br />
<def>                    eager</def><br />
                        <sym>(</sym><br />
<def></def>                            <kwa>let</kwa><br />
<def>                                distance</def> <sym>::</sym> <def>Double</def><sym>;</sym><br />
<def>                                distance</def> <sym>=</sym><br />
<def>                                    eager<br />
                                    $ sqrt</def> <sym>(</sym><def>dx</def> <sym>*</sym> <def>dx</def> <sym>+</sym> <def>dy</def> <sym>*</sym> <def>dy</def> <sym>+</sym> <def>dz</def> <sym>*</sym> <def>dz</def><sym>)</sym><br />
<def></def>                                    <sym>;</sym><br />
<def></def>                            <kwa>in</kwa><br />
<def>                                dt</def> <sym>/ (</sym><def>distance</def> <sym>*</sym> <def>distance</def> <sym>*</sym> <def>distance</def><sym>)</sym><br />
<def></def>                        <sym>)</sym><br />
<def></def>                    <sym>;</sym><br />
<def></def>            <kwa>in</kwa><br />
<def>                set vel1</def> <num>0</num> <def></def><sym>(</sym><def>get vel1</def> <num>0</num> <def></def><sym>-</sym> <def>dx</def> <sym>*</sym> <def>mass2</def> <sym>*</sym> <def>mag</def><sym>)</sym><br />
<def></def>                <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                set vel1</def> <num>1</num> <def></def><sym>(</sym><def>get vel1</def> <num>1</num> <def></def><sym>-</sym> <def>dy</def> <sym>*</sym> <def>mass2</def> <sym>*</sym> <def>mag</def><sym>)</sym><br />
<def></def>                <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                set vel1</def> <num>2</num> <def></def><sym>(</sym><def>get vel1</def> <num>2</num> <def></def><sym>-</sym> <def>dz</def> <sym>*</sym> <def>mass2</def> <sym>*</sym> <def>mag</def><sym>)</sym><br />
<def></def>                <sym>`</sym><def>seq</def><sym>`</sym><br />
<def><br />
                set vel2</def> <num>0</num> <def></def><sym>(</sym><def>get vel2</def> <num>0</num> <def></def><sym>+</sym> <def>dx</def> <sym>*</sym> <def>mass1</def> <sym>*</sym> <def>mag</def><sym>)</sym><br />
<def></def>                <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                set vel2</def> <num>1</num> <def></def><sym>(</sym><def>get vel2</def> <num>1</num> <def></def><sym>+</sym> <def>dy</def> <sym>*</sym> <def>mass1</def> <sym>*</sym> <def>mag</def><sym>)</sym><br />
<def></def>                <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                set vel2</def> <num>2</num> <def></def><sym>(</sym><def>get vel2</def> <num>2</num> <def></def><sym>+</sym> <def>dz</def> <sym>*</sym> <def>mass1</def> <sym>*</sym> <def>mag</def><sym>)</sym><br />
<def></def>                <sym>`</sym><def>seq</def><sym>`</sym><br />
<def></def>                <sym>()</sym><br />
<def></def>            <sym>;</sym><br />
<def><br />
        updateVelocities</def> <sym>::</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt; ();</sym><br />
<def>        updateVelocities</def> <sym>!</sym><def>i</def> <sym>!</sym><def>j</def> <sym>=</sym><br />
<def></def>            <kwa>if</kwa> <def>j</def> <sym>&lt;</sym> <def>numBodies</def> <kwa>then</kwa><br />
<def></def>                <sym>(</sym><br />
<def></def>                    <kwa>case</kwa> <def>bodies</def> <sym>`</sym><def>subscriptBodyArray</def><sym>`</sym> <def>i</def> <kwa>of</kwa><br />
<def>                    Body pos1 vel1 mass1</def> <sym>-&gt;</sym><br />
<def></def>                        <kwa>case</kwa> <def>bodies</def> <sym>`</sym><def>subscriptBodyArray</def><sym>`</sym> <def>j</def> <kwa>of</kwa><br />
<def>                        Body pos2 vel2 mass2</def> <sym>-&gt;</sym><br />
<def>                            updateVelocity pos1 pos2 vel1 vel2 mass1 mass2</def><sym>;</sym><br />
<def></def>                        <sym>;</sym><br />
<def></def>                <sym>)</sym><br />
<def></def>                <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                updateVelocities i</def> <sym>(</sym><def>j</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>            <kwa>else if</kwa> <def>i</def> <sym>&lt;</sym> <def>numBodies</def> <kwa>then</kwa><br />
<def>                updateVelocities</def> <sym>(</sym><def>i</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>) (</sym><def>i</def> <sym>+</sym> <def></def><num>2</num><def></def><sym>)</sym><br />
<def></def>            <kwa>else</kwa><br />
<def></def>                <sym>()</sym><br />
<def></def>            <sym>;</sym><br />
<def><br />
        updatePosition</def> <sym>::</sym> <def>Double</def> <sym>-&gt;</sym> <def>Body</def> <sym>-&gt;</sym> <def>Double</def><sym>;</sym><br />
<def>        updatePosition</def> <sym>!</sym><def>dt</def> <sym>!</sym><def>body</def> <sym>=</sym><br />
<def></def>            <kwa>case</kwa> <def>body</def> <kwa>of</kwa><br />
<def>            Body pos velocity mass</def> <sym>-&gt;</sym><br />
<def>                set pos</def> <num>0</num> <def></def><sym>(</sym><def>get pos</def> <num>0</num> <def></def><sym>+</sym> <def>dt</def> <sym>*</sym> <def>get velocity</def> <num>0</num><def></def><sym>)</sym><br />
<def></def>                <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                set pos</def> <num>1</num> <def></def><sym>(</sym><def>get pos</def> <num>1</num> <def></def><sym>+</sym> <def>dt</def> <sym>*</sym> <def>get velocity</def> <num>1</num><def></def><sym>)</sym><br />
<def></def>                <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                set pos</def> <num>2</num> <def></def><sym>(</sym><def>get pos</def> <num>2</num> <def></def><sym>+</sym> <def>dt</def> <sym>*</sym> <def>get velocity</def> <num>2</num><def></def><sym>)</sym><br />
<def></def>                <sym>;</sym><br />
<def></def>            <sym>;</sym><br />
<def><br />
        updatePositions</def> <sym>::</sym> <def>Int</def> <sym>-&gt; ();</sym><br />
<def>        updatePositions</def> <sym>!</sym><def>i</def> <sym>=</sym><br />
<def></def>            <kwa>if</kwa> <def>i</def> <sym>==</sym> <def>numBodies</def> <kwa>then</kwa><br />
<def></def>                <sym>()</sym><br />
<def></def>            <kwa>else</kwa><br />
<def>                updatePosition dt</def> <sym>(</sym><def>eager</def> <sym>(</sym><def>bodies</def> <sym>`</sym><def>subscriptBodyArray</def><sym>`</sym> <def>i</def><sym>))</sym><br />
<def></def>                <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                updatePositions</def> <sym>(</sym><def>i</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>            <sym>;</sym><br />
<def></def>    <kwa>in</kwa><br />
<def><br />
        updateVelocities</def> <num>0 1</num><br />
<def></def>        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>        updatePositions</def> <num>0</num><br />
<def></def>    <sym>;</sym><br />
<def><br />
main</def> <sym>:: [</sym><def>String</def><sym>] -&gt; ();</sym><br />
<def></def><kwa>public</kwa> <def>main</def> <sym>!</sym><def>args</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa><br />
<def>        n</def> <sym>::</sym> <def>Int</def><sym>;</sym><br />
<def>        n</def> <sym>=</sym> <def>eager $ stringToInt</def> <sym>(</sym><def>head args</def><sym>);</sym><br />
<def>        bodies</def> <sym>::</sym> <def>BodyArray</def><sym>;</sym><br />
<def>        bodies</def> <sym>=</sym><br />
<def>            bodyArrayFromList</def><br />
                <sym>[</sym><br />
<def></def>                    <slc>//the sun</slc><br />
<def>                    Body</def> <sym>(</sym><def>makeVector</def> <num>0 0 0</num><def></def><sym>) (</sym><def>makeVector</def> <num>0 0 0</num><def></def><sym>)</sym> <def>solarMass</def><sym>,</sym><br />
<def></def>                    <slc>//jupiter</slc><br />
<def>                    Body</def><br />
                        <sym>(</sym><def>makeVector</def><br />
                            <num>4.841431442464721</num><br />
<def></def>                            <sym>(-</sym><def></def><num>1.1603200440274284</num><def></def><sym>)</sym><br />
<def></def>                            <sym>(-</sym><def></def><num>0.10362204447112311</num><def></def><sym>)</sym><br />
<def></def>                        <sym>)</sym><br />
<def></def>                        <sym>(</sym><def>makeVector</def><br />
                            <sym>(</sym><def></def><num>0.001660076642744037</num> <def></def><sym>*</sym> <def>daysPerYear</def><sym>)</sym><br />
<def></def>                            <sym>(</sym><def></def><num>0.007699011184197404</num> <def></def><sym>*</sym> <def>daysPerYear</def><sym>)</sym><br />
<def></def>                            <sym>(-</sym><def></def><num>6.90460016972063E-5</num> <def></def><sym>*</sym> <def>daysPerYear</def><sym>)</sym><br />
<def></def>                        <sym>)</sym><br />
<def></def>                        <sym>(</sym><def></def><num>9.547919384243266E-4</num> <def></def><sym>*</sym> <def>solarMass</def><sym>),</sym><br />
<def></def>                    <slc>//saturn</slc><br />
<def>                    Body</def><br />
                        <sym>(</sym><def>makeVector</def><br />
                            <num>8.34336671824458</num><br />
<def></def>                            <num>4.124798564124305</num><br />
<def></def>                            <sym>(-</sym><def></def><num>0.4035234171143214</num><def></def><sym>)</sym><br />
<def></def>                        <sym>)</sym><br />
<def></def>                        <sym>(</sym><def>makeVector</def><br />
                            <sym>(-</sym><def></def><num>0.002767425107268624</num> <def></def><sym>*</sym> <def>daysPerYear</def><sym>)</sym><br />
<def></def>                            <sym>(</sym><def></def><num>0.004998528012349172</num> <def></def><sym>*</sym> <def>daysPerYear</def><sym>)</sym><br />
<def></def>                            <sym>(</sym><def></def><num>2.3041729757376393E-5</num> <def></def><sym>*</sym> <def>daysPerYear</def><sym>)</sym><br />
<def></def>                        <sym>)</sym><br />
<def></def>                        <sym>(</sym><def></def><num>2.858859806661308E-4</num> <def></def><sym>*</sym> <def>solarMass</def><sym>),</sym><br />
<def></def>                    <slc>//uranus</slc><br />
<def>                    Body</def><br />
                        <sym>(</sym><def>makeVector</def><br />
                            <num>12.894369562139131</num><br />
<def></def>                            <sym>(-</sym><def></def><num>15.111151401698631</num><def></def><sym>)</sym><br />
<def></def>                            <sym>(-</sym><def></def><num>0.22330757889265573</num><def></def><sym>)</sym><br />
<def></def>                        <sym>)</sym><br />
<def></def>                        <sym>(</sym><def>makeVector</def><br />
                            <sym>(</sym><def></def><num>0.002964601375647616</num> <def></def><sym>*</sym> <def>daysPerYear</def><sym>)</sym><br />
<def></def>                            <sym>(</sym><def></def><num>0.0023784717395948095</num> <def></def><sym>*</sym> <def>daysPerYear</def><sym>)</sym><br />
<def></def>                            <sym>(-</sym><def></def><num>2.9658956854023756E-5</num> <def></def><sym>*</sym> <def>daysPerYear</def><sym>)</sym><br />
<def></def>                        <sym>)</sym><br />
<def></def>                        <sym>(</sym><def></def><num>4.366244043351563E-5</num> <def></def><sym>*</sym> <def>solarMass</def><sym>),</sym><br />
<def></def>                    <slc>//neptune</slc><br />
<def>                    Body</def><br />
                        <sym>(</sym><def>makeVector</def><br />
                            <num>15.379697114850917</num><br />
<def></def>                            <sym>(-</sym><def></def><num>25.919314609987964</num><def></def><sym>)</sym><br />
<def></def>                            <num>0.17925877295037118</num><br />
<def></def>                        <sym>)</sym><br />
<def></def>                        <sym>(</sym><def>makeVector</def><br />
                            <sym>(</sym><def></def><num>0.0026806777249038932</num> <def></def><sym>*</sym> <def>daysPerYear</def><sym>)</sym><br />
<def></def>                            <sym>(</sym><def></def><num>0.001628241700382423</num> <def></def><sym>*</sym> <def>daysPerYear</def><sym>)</sym><br />
<def></def>                            <sym>(-</sym><def></def><num>9.515922545197159E-5</num> <def></def><sym>*</sym> <def>daysPerYear</def><sym>)</sym><br />
<def></def>                        <sym>)</sym><br />
<def></def>                        <sym>(</sym><def></def><num>5.1513890204661145E-5</num> <def></def><sym>*</sym> <def>solarMass</def><sym>)</sym><br />
<def></def>                <sym>]</sym><br />
<def></def>            <sym>;</sym><br />
<def><br />
        loop</def> <sym>::</sym> <def>Int</def> <sym>-&gt; ();</sym><br />
<def>        loop</def> <sym>!</sym><def>n</def> <sym>=</sym><br />
<def></def>            <kwa>if</kwa> <def>n</def> <sym>&gt;</sym> <def></def><num>0</num> <def></def><kwa>then</kwa><br />
<def>                advance</def> <num>0.01</num> <def>bodies</def><br />
                <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                loop</def> <sym>(</sym><def>n</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>            <kwa>else</kwa><br />
<def></def>                <sym>()</sym><br />
<def></def>            <sym>;</sym><br />
<def></def>        <com>/** function to display energy in specified format*/</com><def><br />
        showEnergy</def> <sym>::</sym> <def>Double</def> <sym>-&gt; ();</sym><br />
<def>        showEnergy</def> <sym>!</sym><def>e</def> <sym>=</sym><br />
<def>            printLine</def><br />
                <sym>(</sym><def>formatWithPattern</def><br />
                    <str>&quot;{0,number,0.000000000}&quot;</str><def><br />
                    invariantLocale</def><br />
                    <sym>{</sym><def>#</def><num>1</num> <def></def><sym>=</sym> <def>e</def><sym>}</sym><br />
<def></def>                <sym>)</sym><br />
<def></def>            <sym>;</sym><br />
<def></def>    <kwa>in</kwa><br />
<def><br />
        computeOffsetMomentum bodies</def><br />
        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>        showEnergy</def> <sym>(</sym><def>energy bodies</def><sym>)</sym><br />
<def></def>        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>        loop n</def><br />
        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>        showEnergy</def> <sym>(</sym><def>energy bodies</def><sym>)</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<br />
<com>/** A {@link typeConstructor=Body@} array implemented as a Java array. */</com><def></def><br />
<kwa>data foreign unsafe import jvm</kwa> <def></def><str>&quot;java.lang.Object[]&quot;</str><def> BodyArray</def> <kwa>deriving</kwa> <def>Inputable</def><sym>,</sym> <def>Outputable</def><sym>;</sym><br />
<def></def><br />
<com>/** Constructs a {@link BodyArray@} from a list. */</com><def><br />
bodyArrayFromList</def> <sym>:: [</sym><def>Body</def><sym>] -&gt;</sym> <def>BodyArray</def><sym>;</sym><br />
<def>bodyArrayFromList</def> <sym>!</sym><def>bodies</def> <sym>=</sym><br />
<def>    jObjectToBodyArray $ Array</def><sym>.</sym><def>outputPrimitive $ Array</def><sym>.</sym><def>fromList bodies</def><sym>;</sym><br />
<def></def><br />
<kwa>instance</kwa> <def>Outputable Body</def> <kwa>where</kwa><br />
<def>    output</def> <sym>=</sym> <def>outputBodyAsCalValue</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def><br />
outputBodyAsCalValue</def> <sym>::</sym> <def>Body</def> <sym>-&gt;</sym> <def>JObject</def><sym>;</sym><br />
<def>outputBodyAsCalValue</def> <sym>!</sym><def>body</def> <sym>=</sym> <def>output</def> <sym>((</sym><def>unsafeCoerce body</def><sym>) ::</sym> <def>CalValue</def><sym>);</sym><br />
<def></def><br />
<kwa>instance</kwa> <def>Inputable Body</def> <kwa>where</kwa><br />
<def>    input</def> <sym>=</sym> <def>inputBodyAsCalValue</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def><br />
inputBodyAsCalValue</def> <sym>::</sym> <def>JObject</def> <sym>-&gt;</sym> <def>Body</def><sym>;</sym><br />
<def>inputBodyAsCalValue</def> <sym>!</sym><def>object</def> <sym>=</sym> <def>unsafeCoerce</def> <sym>((</sym><def>input object</def><sym>) ::</sym> <def>CalValue</def><sym>);</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;cast&quot;</str><def> jObjectToBodyArray</def> <sym>::</sym> <def>JObject</def> <sym>-&gt;</sym> <def>BodyArray</def><sym>;</sym><br />
<def></def><br />
<com>/** @return the i{@sup th@} element in the array. */</com><def><br />
subscriptBodyArray</def> <sym>::</sym> <def>BodyArray</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Body</def><sym>;</sym><br />
<def>subscriptBodyArray</def> <sym>!</sym><def>bodies</def> <sym>!</sym><def>i</def> <sym>=</sym><br />
<def>    input</def> <sym>(</sym><def>eager $ jSubscriptBodyArray bodies i</def><sym>);</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;subscriptArray&quot;</str><def> jSubscriptBodyArray</def> <sym>::</sym> <def>BodyArray</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>JObject</def><sym>;</sym><br />
<def></def><br />
<com>/** @return the length of the array. */</com><def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;lengthArray&quot;</str><def> lengthBodyArray</def> <sym>::</sym> <def>BodyArray</def> <sym>-&gt;</sym> <def>Int</def><sym>;</sym><def></def><br />
</source>
