<source>
<def></def><slc>-- The Computer Language Benchmarks Game</slc><br />
<def></def><slc>-- http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>-- contributed by Jim Rogers</slc><br />
<def></def><br />
<kwa>with</kwa> <def>Ada.Command_Line</def><sym>;</sym> <def></def><kwa>use</kwa> <def>Ada.Command_Line</def><sym>;</sym><br />
<def></def><kwa>with</kwa> <def>Ada.Text_Io</def><sym>;</sym> <def></def><kwa>use</kwa> <def>Ada.Text_Io</def><sym>;</sym><br />
<def></def><kwa>with</kwa> <def>Ada.Strings.Unbounded</def><sym>;</sym> <def></def><kwa>use</kwa> <def>Ada.Strings.Unbounded</def><sym>;</sym><br />
<def></def><kwa>with</kwa> <def>Ada.Characters.Handling</def><sym>;</sym> <def></def><kwa>use</kwa> <def>Ada.Characters.Handling</def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def>ChameneosRedux</def> <kwa>is</kwa><br />
<def>   N</def> <sym>:</sym> <def></def><kwb>Natural</kwb><def></def><sym>;</sym><br />
<def></def><br />
   <kwa>type</kwa> <def>Numbers</def> <kwa>is</kwa> <def></def><sym>(</sym><def>Zero</def><sym>,</sym> <def>One</def><sym>,</sym> <def>Two</def><sym>,</sym> <def>Three</def><sym>,</sym> <def>Four</def><sym>,</sym> <def>Five</def><sym>,</sym><br />
<def>      Six</def><sym>,</sym> <def>Seven</def><sym>,</sym> <def>Eight</def><sym>,</sym> <def>Nine</def><sym>);</sym><br />
<def></def><br />
   <kwa>type</kwa> <def>Colors</def> <kwa>is</kwa> <def></def><sym>(</sym><def>Blue</def><sym>,</sym> <def>Red</def><sym>,</sym> <def>Yellow</def><sym>);</sym><br />
<def></def><br />
   <kwa>type</kwa> <def>Colors_Complements</def> <kwa>is array</kwa><def></def><sym>(</sym><def>Colors</def><sym>,</sym> <def>Colors</def><sym>)</sym> <def></def><kwa>of</kwa> <def>Colors</def><sym>;</sym><br />
<def><br />
   Complement_Color</def> <sym>:</sym> <def></def><kwa>constant</kwa> <def>Colors_Complements</def> <sym>:=</sym><br />
<def></def>      <sym>(</sym><def>Blue</def> <sym>=&gt; (</sym><def>Blue</def> <sym>=&gt;</sym> <def>Blue</def><sym>,</sym><br />
<def>                Red</def>  <sym>=&gt;</sym> <def>Yellow</def><sym>,</sym><br />
<def>                Yellow</def> <sym>=&gt;</sym> <def>Red</def><sym>),</sym><br />
<def>      Red</def> <sym>=&gt;  (</sym><def>Red</def> <sym>=&gt;</sym> <def>Red</def><sym>,</sym><br />
<def>               Blue</def> <sym>=&gt;</sym> <def>Yellow</def><sym>,</sym><br />
<def>               Yellow</def> <sym>=&gt;</sym> <def>Blue</def><sym>),</sym><br />
<def>      Yellow</def> <sym>=&gt; (</sym><def>Yellow</def> <sym>=&gt;</sym> <def>Yellow</def><sym>,</sym><br />
<def>                  Blue</def>  <sym>=&gt;</sym> <def>Red</def><sym>,</sym><br />
<def>                  Red</def>  <sym>=&gt;</sym> <def>Blue</def><sym>));</sym><br />
<def></def>   <kwa>function</kwa> <def>To_Lower</def><sym>(</sym><def>Item</def> <sym>:</sym> <def></def><kwb>String</kwb><def></def><sym>)</sym> <def></def><kwa>return</kwa> <def></def><kwb>String</kwb> <def></def><kwa>is</kwa><br />
<def>      Temp</def> <sym>:</sym> <def></def><kwb>String</kwb> <def></def><sym>:=</sym> <def>Item</def><sym>;</sym><br />
<def></def>   <kwa>begin</kwa><br />
<def></def>      <kwa>for</kwa> <def>I</def> <kwa>in</kwa> <def>Temp</def><sym>'</sym><def></def><kwa>range loop</kwa><br />
<def>         Temp</def><sym>(</sym><def>I</def><sym>) :=</sym> <def>To_Lower</def><sym>(</sym><def>Temp</def><sym>(</sym><def>I</def><sym>));</sym><br />
<def></def>      <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def></def>      <kwa>return</kwa> <def>Temp</def><sym>;</sym><br />
<def></def>   <kwa>end</kwa> <def>To_Lower</def><sym>;</sym><br />
<def></def><br />
   <kwa>procedure</kwa> <def>Printcolorchanges</def> <kwa>is</kwa><br />
<def></def>   <kwa>begin</kwa><br />
<def></def>      <kwa>for</kwa> <def>Self</def> <kwa>in</kwa> <def>Colors</def> <kwa>loop</kwa><br />
<def></def>         <kwa>for</kwa> <def>Other</def> <kwa>in</kwa> <def>Colors</def> <kwa>loop</kwa><br />
<def>            Put_Line</def><sym>(</sym><def>To_lower</def><sym>(</sym><def>Colors</def><sym>'</sym><def>Image</def><sym>(</sym><def>Self</def><sym>)) &amp;</sym> <def></def><str>&quot; + &quot;</str><def></def> <sym>&amp;</sym><br />
<def>               To_Lower</def><sym>(</sym><def>Colors</def><sym>'</sym><def>Image</def><sym>(</sym><def>Other</def><sym>)) &amp;</sym> <def></def><str>&quot; -&gt; &quot;</str><def></def> <sym>&amp;</sym><br />
<def>               To_Lower</def><sym>(</sym><def>Colors</def><sym>'</sym><def>Image</def><sym>(</sym><def>Complement_Color</def><sym>(</sym><def>Self</def><sym>,</sym> <def>Other</def><sym>))));</sym><br />
<def></def>         <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def></def>      <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def>      New_Line</def><sym>;</sym><br />
<def></def>   <kwa>end</kwa> <def>Printcolorchanges</def><sym>;</sym><br />
<def></def><br />
<br />
   <kwa>protected type</kwa> <def>Meeting_Place</def><sym>(</sym><def>N</def> <sym>:</sym> <def></def><kwb>Natural</kwb><def></def><sym>)</sym> <def></def><kwa>is</kwa><br />
<def></def>      <kwa>entry</kwa> <def>Exchange</def><sym>(</sym><def>Me</def> <sym>:</sym> <def></def><kwa>in</kwa> <def>Colors</def><sym>;</sym> <def>My_Id</def> <sym>:</sym> <def></def><kwa>in</kwa> <def></def><kwb>Positive</kwb><def></def><sym>;</sym> <def>Other</def> <sym>:</sym> <def></def><kwa>out</kwa> <def>Colors</def><sym>;</sym> <def>Other_Id</def> <sym>:</sym> <def></def><kwa>out</kwa> <def></def><kwb>Positive</kwb><def></def><sym>);</sym><br />
<def></def>      <kwa>entry</kwa> <def>Wait_N_Meetings</def><sym>;</sym><br />
<def></def>   <kwa>private</kwa><br />
<def>      First_Call</def> <sym>:</sym> <def></def><kwb>Boolean</kwb> <def></def><sym>:=</sym> <def>True</def><sym>;</sym><br />
<def>      First_Color</def> <sym>:</sym> <def>Colors</def><sym>;</sym><br />
<def>      Second_Color</def> <sym>:</sym> <def>Colors</def><sym>;</sym><br />
<def>      Count</def> <sym>:</sym> <def></def><kwb>Natural</kwb> <def></def><sym>:=</sym> <def>N</def><sym>;</sym><br />
<def>      First_Id</def> <sym>:</sym> <def></def><kwb>Positive</kwb><def></def><sym>;</sym><br />
<def>      Second_Id</def> <sym>:</sym> <def></def><kwb>Positive</kwb><def></def><sym>;</sym><br />
<def></def>      <kwa>entry</kwa> <def>Wait_Others</def><sym>(</sym><def>Me</def> <sym>:</sym> <def></def><kwa>in</kwa> <def>Colors</def><sym>;</sym> <def>My_Id</def> <sym>:</sym> <def></def><kwa>in</kwa> <def></def><kwb>Positive</kwb><def></def><sym>;</sym> <def>Other</def> <sym>:</sym> <def></def><kwa>out</kwa> <def>Colors</def><sym>;</sym> <def>Other_id</def> <sym>:</sym> <def></def><kwa>out</kwa> <def></def><kwb>Positive</kwb><def></def><sym>);</sym><br />
<def></def>   <kwa>end</kwa> <def>Meeting_Place</def><sym>;</sym><br />
<def></def><br />
   <kwa>protected body</kwa> <def>Meeting_Place</def> <kwa>is</kwa><br />
<def></def>      <kwa>entry</kwa> <def>Exchange</def><sym>(</sym><def>Me</def> <sym>:</sym> <def></def><kwa>in</kwa> <def>Colors</def><sym>;</sym> <def>My_Id</def> <sym>:</sym> <def></def><kwa>in</kwa> <def></def><kwb>Positive</kwb><def></def><sym>;</sym> <def>Other</def> <sym>:</sym> <def></def><kwa>out</kwa> <def>Colors</def><sym>;</sym> <def>Other_Id</def> <sym>:</sym> <def></def><kwa>out</kwa> <def></def><kwb>Positive</kwb><def></def><sym>)</sym> <def></def><kwa>when</kwa> <def>Count</def> <sym>&gt;</sym> <def></def><num>0</num> <def></def><kwa>is</kwa><br />
<def></def>      <kwa>begin</kwa><br />
<def></def>         <kwa>if</kwa> <def>First_Call</def> <kwa>then</kwa><br />
<def>            First_Call</def> <sym>:=</sym> <def>False</def><sym>;</sym><br />
<def>            First_Color</def> <sym>:=</sym> <def>Me</def><sym>;</sym><br />
<def>            First_Id</def> <sym>:=</sym> <def>My_id</def><sym>;</sym><br />
<def></def>            <kwa>requeue</kwa> <def>Wait_Others</def><sym>;</sym><br />
<def></def>         <kwa>else</kwa><br />
<def>            Second_Color</def> <sym>:=</sym> <def>Me</def><sym>;</sym><br />
<def>            second_Id</def> <sym>:=</sym> <def>My_Id</def><sym>;</sym><br />
<def>            Other</def> <sym>:=</sym> <def>First_Color</def><sym>;</sym><br />
<def>            Other_Id</def> <sym>:=</sym> <def>First_Id</def><sym>;</sym><br />
<def>            First_Call</def> <sym>:=</sym> <def>True</def><sym>;</sym><br />
<def>            Count</def> <sym>:=</sym> <def>Count</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>         <kwa>end if</kwa><def></def><sym>;</sym><br />
<def></def>      <kwa>end</kwa> <def>Exchange</def><sym>;</sym><br />
<def></def><br />
      <kwa>entry</kwa> <def>Wait_Others</def><sym>(</sym><def>Me</def> <sym>:</sym> <def></def><kwa>in</kwa> <def>Colors</def><sym>;</sym> <def>My_Id</def> <sym>:</sym> <def></def><kwa>in</kwa> <def></def><kwb>Positive</kwb><def></def><sym>;</sym> <def>Other</def> <sym>:</sym> <def></def><kwa>out</kwa> <def>Colors</def><sym>;</sym> <def>Other_id</def> <sym>:</sym> <def></def><kwa>out</kwa> <def></def><kwb>Positive</kwb><def></def><sym>)</sym> <def></def><kwa>when</kwa> <def>First_Call</def> <kwa>is</kwa><br />
<def></def>      <kwa>begin</kwa><br />
<def>         Other</def> <sym>:=</sym> <def>Second_Color</def><sym>;</sym><br />
<def>         Other_Id</def> <sym>:=</sym> <def>Second_Id</def><sym>;</sym><br />
<def></def>      <kwa>end</kwa> <def>Wait_Others</def><sym>;</sym><br />
<def></def><br />
      <kwa>entry</kwa> <def>Wait_N_Meetings</def> <kwa>when</kwa> <def>Count</def> <sym>=</sym> <def></def><num>0</num> <def></def><kwa>is</kwa><br />
<def></def>      <kwa>begin</kwa><br />
<def></def>         <kwa>null</kwa><def></def><sym>;</sym><br />
<def></def>      <kwa>end</kwa> <def>Wait_N_Meetings</def><sym>;</sym><br />
<def></def>   <kwa>end</kwa> <def>Meeting_Place</def><sym>;</sym><br />
<def></def><br />
   <kwa>type</kwa> <def>Meeting_Ref</def> <kwa>is access</kwa> <def>Meeting_Place</def><sym>;</sym><br />
<def></def><br />
   <kwa>task type</kwa> <def>Creature</def><sym>(</sym><def>My_Color</def> <sym>:</sym> <def>Colors</def><sym>;</sym> <def>Place</def> <sym>:</sym> <def>Meeting_Ref</def><sym>;</sym> <def>Id</def> <sym>:</sym> <def></def><kwb>Positive</kwb><def></def><sym>)</sym> <def></def><kwa>is</kwa><br />
<def></def>      <kwa>entry</kwa> <def>Report</def><sym>(</sym><def>Count</def> <sym>:</sym> <def></def><kwa>out</kwa> <def></def><kwb>Natural</kwb><def></def><sym>;</sym> <def>Self</def> <sym>:</sym> <def></def><kwa>out</kwa> <def></def><kwb>Natural</kwb><def></def><sym>);</sym><br />
<def></def>   <kwa>end</kwa> <def>Creature</def><sym>;</sym><br />
<def></def><br />
   <kwa>task body</kwa> <def>Creature</def> <kwa>is</kwa><br />
<def>      Meeting_Count</def> <sym>:</sym> <def></def><kwb>Natural</kwb> <def></def><sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>      Self_Count</def> <sym>:</sym> <def></def><kwb>Natural</kwb> <def></def><sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>      Me</def> <sym>:</sym> <def>Colors</def> <sym>:=</sym> <def>My_Color</def><sym>;</sym><br />
<def></def><br />
      <kwa>procedure</kwa> <def>Meet_Other_Creature</def> <kwa>is</kwa><br />
<def>         Other</def> <sym>:</sym> <def>Colors</def><sym>;</sym><br />
<def>         Foreign</def> <sym>:</sym> <def></def><kwb>Positive</kwb><def></def><sym>;</sym><br />
<def></def>      <kwa>begin</kwa><br />
<def>         Place.Exchange</def><sym>(</sym><def>Me</def><sym>,</sym> <def>Id</def><sym>,</sym> <def>Other</def><sym>,</sym> <def>Foreign</def><sym>);</sym><br />
<def></def>         <kwa>if</kwa> <def>Id</def> <sym>=</sym> <def>Foreign</def> <kwa>then</kwa><br />
<def>            Self_Count</def> <sym>:=</sym> <def>Self_Count</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>         <kwa>end if</kwa><def></def><sym>;</sym><br />
<def>         Meeting_Count</def> <sym>:=</sym> <def>Meeting_Count</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def>         Me</def> <sym>:=</sym> <def>Complement_Color</def><sym>(</sym><def>Me</def><sym>,</sym> <def>Other</def><sym>);</sym><br />
<def></def>      <kwa>end</kwa> <def>Meet_Other_Creature</def><sym>;</sym><br />
<def></def><br />
   <kwa>begin</kwa><br />
<def></def>      <kwa>loop</kwa><br />
<def></def>         <kwa>select</kwa><br />
<def></def>            <kwa>accept</kwa> <def>Report</def><sym>(</sym><def>Count</def> <sym>:</sym> <def></def><kwa>out</kwa> <def></def><kwb>Natural</kwb><def></def><sym>;</sym> <def>Self</def> <sym>:</sym> <def></def><kwa>out</kwa> <def></def><kwb>natural</kwb><def></def><sym>)</sym> <def></def><kwa>do</kwa><br />
<def>               Count</def> <sym>:=</sym> <def>Meeting_Count</def><sym>;</sym><br />
<def>               Self</def> <sym>:=</sym> <def>Self_Count</def><sym>;</sym><br />
<def></def>            <kwa>end</kwa> <def>Report</def><sym>;</sym><br />
<def></def>            <kwa>exit</kwa><def></def><sym>;</sym><br />
<def></def>         <kwa>else</kwa><br />
<def></def>            <kwa>select</kwa><br />
<def></def>               <kwa>delay</kwa> <def></def><num>0.02</num><def></def><sym>;</sym><br />
<def></def>            <kwa>then abort</kwa><br />
<def>               Meet_Other_Creature</def><sym>;</sym><br />
<def></def>            <kwa>end select</kwa><def></def><sym>;</sym><br />
<def></def>         <kwa>end select</kwa><def></def><sym>;</sym><br />
<def></def>      <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def></def>   <kwa>end</kwa> <def>Creature</def><sym>;</sym><br />
<def></def><br />
   <kwa>type</kwa> <def>Creature_Ref</def> <kwa>is access</kwa> <def>Creature</def><sym>;</sym><br />
<def></def><br />
   <kwa>type</kwa> <def>Color_List</def> <kwa>is array</kwa><def></def><sym>(</sym><def></def><kwb>Positive</kwb> <def></def><kwa>range</kwa> <def></def><sym>&lt;&gt;)</sym> <def></def><kwa>of</kwa> <def>Colors</def><sym>;</sym><br />
<def></def><br />
   <kwa>function</kwa> <def>Spell_Out</def><sym>(</sym><def>Item</def> <sym>:</sym> <def></def><kwb>Natural</kwb><def></def><sym>)</sym> <def></def><kwa>return</kwa> <def></def><kwb>String</kwb> <def></def><kwa>is</kwa><br />
<def>      Temp_Str</def> <sym>:</sym> <def></def><kwb>String</kwb> <def></def><sym>:=</sym> <def></def><kwb>Natural</kwb><def></def><sym>'</sym><def>Image</def><sym>(</sym><def>Item</def><sym>);</sym><br />
<def>      Words</def> <sym>:</sym> <def>Unbounded_String</def> <sym>:=</sym> <def>Null_Unbounded_String</def><sym>;</sym><br />
<def></def>   <kwa>begin</kwa><br />
<def></def>      <kwa>for</kwa> <def>I</def> <kwa>in</kwa> <def></def><num>2</num><def>..Temp_Str</def><sym>'</sym><def>Last</def> <kwa>loop</kwa><br />
<def>         Append</def><sym>(</sym><def>Words</def><sym>,</sym> <def></def><str>&quot; &quot;</str><def></def> <sym>&amp;</sym> <def>To_Lower</def><sym>(</sym><def>Numbers</def><sym>'</sym><def>Image</def><sym>(</sym><def>Numbers</def><sym>'</sym><def>Val</def><sym>(</sym><def></def><kwb>Character</kwb><def></def><sym>'</sym><def>Pos</def><sym>(</sym><def>Temp_Str</def><sym>(</sym><def>I</def><sym>)) -</sym> <def></def><num>48</num><def></def><sym>))));</sym><br />
<def></def>      <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def></def>      <kwa>return</kwa> <def>To_String</def><sym>(</sym><def>Words</def><sym>);</sym><br />
<def></def>   <kwa>end</kwa> <def>Spell_Out</def><sym>;</sym><br />
<def></def><br />
   <kwa>procedure</kwa> <def>Start_Creatures</def><sym>(</sym><def>List</def> <sym>:</sym> <def>Color_List</def><sym>)</sym> <def></def><kwa>is</kwa><br />
<def></def>      <kwa>package</kwa> <def>Int_Io</def> <kwa>is new</kwa> <def>Ada.Text_Io.Integer_Io</def><sym>(</sym><def></def><kwb>Integer</kwb><def></def><sym>);</sym><br />
<def></def>      <kwa>use</kwa> <def>Int_Io</def><sym>;</sym><br />
<def></def><br />
      <kwa>subtype</kwa> <def>Creature_Index</def> <kwa>is</kwa> <def></def><kwb>Positive</kwb> <def></def><kwa>range</kwa> <def>List</def><sym>'</sym><def></def><kwa>range</kwa><def></def><sym>;</sym><br />
<def></def>      <kwa>type</kwa> <def>Creature_List</def> <kwa>is array</kwa><def></def><sym>(</sym><def>Creature_Index</def><sym>)</sym> <def></def><kwa>of</kwa> <def>Creature_Ref</def><sym>;</sym><br />
<def>      Creatures</def> <sym>:</sym> <def>Creature_List</def><sym>;</sym><br />
<def>      Rendezvous</def> <sym>:</sym> <def>Meeting_Ref</def> <sym>:=</sym> <def></def><kwa>new</kwa> <def>Meeting_Place</def><sym>(</sym><def>N</def><sym>);</sym><br />
<def>      Tid</def> <sym>:</sym> <def></def><kwb>Positive</kwb> <def></def><sym>:=</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def>      Sum</def> <sym>:</sym> <def></def><kwb>Natural</kwb> <def></def><sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>      Self_Met</def> <sym>:</sym> <def></def><kwb>Natural</kwb><def></def><sym>;</sym><br />
<def>      Tot_Met</def> <sym>:</sym> <def></def><kwb>Natural</kwb><def></def><sym>;</sym><br />
<def></def>   <kwa>begin</kwa><br />
<def></def>      <kwa>for</kwa> <def>I</def> <kwa>in</kwa> <def>List</def><sym>'</sym><def></def><kwa>range loop</kwa><br />
<def>         Put</def><sym>(</sym><def></def><str>&quot; &quot;</str><def></def> <sym>&amp;</sym> <def>To_Lower</def><sym>(</sym><def>Colors</def><sym>'</sym><def>Image</def><sym>(</sym><def>List</def><sym>(</sym><def>I</def><sym>))));</sym><br />
<def>         Creatures</def><sym>(</sym><def>I</def><sym>) :=</sym> <def></def><kwa>new</kwa> <def>Creature</def><sym>(</sym><def>List</def><sym>(</sym><def>I</def><sym>),</sym> <def>Rendezvous</def><sym>,</sym> <def>Tid</def><sym>);</sym><br />
<def>         Tid</def> <sym>:=</sym> <def>Tid</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>      <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def>      New_Line</def><sym>;</sym><br />
<def>      Rendezvous.Wait_N_Meetings</def><sym>;</sym><br />
<def></def>      <kwa>for</kwa> <def>I</def> <kwa>in</kwa> <def>Creatures</def><sym>'</sym><def></def><kwa>range loop</kwa><br />
<def>         Creatures</def><sym>(</sym><def>I</def><sym>)</sym><def>.Report</def><sym>(</sym><def>Tot_Met</def><sym>,</sym> <def>Self_Met</def><sym>);</sym><br />
<def>         Sum</def> <sym>:=</sym> <def>Sum</def> <sym>+</sym> <def>Tot_Met</def><sym>;</sym><br />
<def>         Put</def><sym>(</sym><def>Item</def> <sym>=&gt;</sym> <def>Tot_Met</def><sym>,</sym> <def>Width</def> <sym>=&gt;</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def>         Put_Line</def><sym>(</sym><def>Spell_Out</def><sym>(</sym><def>Self_Met</def><sym>));</sym><br />
<def></def>      <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def>      Put_Line</def><sym>(</sym><def>Spell_Out</def><sym>(</sym><def>Sum</def><sym>));</sym><br />
<def></def>   <kwa>end</kwa> <def>Start_Creatures</def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def></def>   <kwa>if</kwa> <def>Argument_Count</def> <sym>&lt;</sym> <def></def><num>1</num> <def></def><kwa>then</kwa><br />
<def>      N</def> <sym>:=</sym> <def></def><num>600</num><def></def><sym>;</sym><br />
<def></def>   <kwa>else</kwa><br />
<def>      N</def> <sym>:=</sym> <def></def><kwb>Natural</kwb><def></def><sym>'</sym><def>Value</def><sym>(</sym><def>Argument</def><sym>(</sym><def></def><num>1</num><def></def><sym>));</sym><br />
<def></def>   <kwa>end if</kwa><def></def><sym>;</sym><br />
<def><br />
   Printcolorchanges</def><sym>;</sym><br />
<def><br />
   Start_Creatures</def><sym>((</sym><def>Blue</def><sym>,</sym> <def>Red</def><sym>,</sym> <def>Yellow</def><sym>));</sym><br />
<def>   New_Line</def><sym>;</sym><br />
<def>   Start_Creatures</def><sym>((</sym><def>blue</def><sym>,</sym> <def>red</def><sym>,</sym> <def>yellow</def><sym>,</sym> <def>red</def><sym>,</sym> <def>yellow</def><sym>,</sym> <def>blue</def><sym>,</sym> <def>red</def><sym>,</sym> <def>yellow</def><sym>,</sym> <def>red</def><sym>,</sym> <def>blue</def><sym>));</sym><br />
<def>   New_Line</def><sym>;</sym><br />
<def></def><kwa>end</kwa> <def>ChameneosRedux</def><sym>;</sym><def></def><br />
</source>
