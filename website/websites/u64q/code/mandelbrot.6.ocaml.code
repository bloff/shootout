<span class="hl com">(*</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Contributed by Paolo Ribeca</span>
<span class="hl com"> *</span>
<span class="hl com"> * (Very loosely based on previous version Ocaml #3,</span>
<span class="hl com"> *  which had been contributed by</span>
<span class="hl com"> *   Christophe TROESTLER</span>
<span class="hl com"> *  and enhanced by</span>
<span class="hl com"> *   Christian Szegedy and Yaron Minsky)</span>
<span class="hl com"> *)</span>

<span class="hl kwa">let</span> niter <span class="hl sym">=</span> <span class="hl num">50</span>
<span class="hl kwa">let</span> limit <span class="hl sym">=</span> <span class="hl num">4</span><span class="hl sym">.</span>

<span class="hl kwa">let</span> <span class="hl sym">() =</span>
  <span class="hl kwa">let</span> w <span class="hl sym">=</span> int_of_string <span class="hl sym">(</span><span class="hl kwc">Array</span><span class="hl sym">.</span>get <span class="hl kwc">Sys</span><span class="hl sym">.</span>argv <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> h <span class="hl sym">=</span> w <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> fw <span class="hl sym">=</span> <span class="hl kwb">float</span> w <span class="hl sym">/.</span> <span class="hl num">2</span><span class="hl sym">.</span> <span class="hl kwa">and</span> fh <span class="hl sym">=</span> <span class="hl kwb">float</span> h <span class="hl sym">/.</span> <span class="hl num">2</span><span class="hl sym">.</span> <span class="hl kwa">in</span>
  <span class="hl kwc">Printf</span><span class="hl sym">.</span>printf <span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">%i %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> w h<span class="hl sym">;</span>
  <span class="hl kwa">let</span> red_h <span class="hl sym">=</span> h <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl kwa">and</span> red_w <span class="hl sym">=</span> w <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl kwa">and</span> byte <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">in</span>
  <span class="hl kwa">for</span> y <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> red_h <span class="hl kwa">do</span>
    <span class="hl kwa">let</span> ci <span class="hl sym">=</span> <span class="hl kwb">float</span> y <span class="hl sym">/.</span> fh <span class="hl sym">-.</span> <span class="hl num">1</span><span class="hl sym">.</span> <span class="hl kwa">in</span>
    <span class="hl kwa">for</span> x <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> red_w <span class="hl kwa">do</span>
      <span class="hl kwa">let</span> cr <span class="hl sym">=</span> <span class="hl kwb">float</span> x <span class="hl sym">/.</span> fw <span class="hl sym">-.</span> <span class="hl num">1.5</span>
      <span class="hl kwa">and</span> zr <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span><span class="hl sym">.</span> <span class="hl kwa">and</span> zi <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span><span class="hl sym">.</span> <span class="hl kwa">and</span> trmti <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span><span class="hl sym">.</span> <span class="hl kwa">and</span> n <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">in</span>
      <span class="hl kwa">begin try</span>
	<span class="hl kwa">while true do</span>
	  zi <span class="hl sym">:=</span> <span class="hl num">2</span><span class="hl sym">. *. !</span>zr <span class="hl sym">*. !</span>zi <span class="hl sym">+.</span> ci<span class="hl sym">;</span>
	  zr <span class="hl sym">:= !</span>trmti <span class="hl sym">+.</span> cr<span class="hl sym">;</span>
	  <span class="hl kwa">let</span> tr <span class="hl sym">= !</span>zr <span class="hl sym">*. !</span>zr <span class="hl kwa">and</span> ti <span class="hl sym">= !</span>zi <span class="hl sym">*. !</span>zi <span class="hl kwa">in</span>
	  <span class="hl kwa">if</span> tr <span class="hl sym">+.</span> ti <span class="hl sym">&gt;</span> limit <span class="hl kwa">then begin</span>
	    byte <span class="hl sym">:= !</span>byte <span class="hl kwa">lsl</span> <span class="hl num">1</span><span class="hl sym">;</span>
	    raise <span class="hl kwd">Exit</span>
	  <span class="hl kwa">end else if</span> incr n<span class="hl sym">; !</span>n <span class="hl sym">=</span> niter <span class="hl kwa">then begin</span>
	    byte <span class="hl sym">:= (!</span>byte <span class="hl kwa">lsl</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">lor</span> <span class="hl num">0x01</span><span class="hl sym">;</span>
	    raise <span class="hl kwd">Exit</span>
	  <span class="hl kwa">end else</span>
	    trmti <span class="hl sym">:=</span> tr <span class="hl sym">-.</span> ti
	<span class="hl kwa">done</span>
      <span class="hl kwa">with</span> <span class="hl kwd">Exit</span> <span class="hl sym">-&gt; ()</span>
      <span class="hl kwa">end</span><span class="hl sym">;</span>
      <span class="hl kwa">if</span> x <span class="hl kwa">mod</span> <span class="hl num">8</span> <span class="hl sym">=</span> <span class="hl num">7</span> <span class="hl kwa">then</span> output_byte stdout <span class="hl sym">!</span>byte
    <span class="hl kwa">done</span><span class="hl sym">;</span>
    <span class="hl kwa">let</span> rem <span class="hl sym">=</span> w <span class="hl kwa">mod</span> <span class="hl num">8</span> <span class="hl kwa">in</span>
    <span class="hl kwa">if</span> rem <span class="hl sym">!=</span> <span class="hl num">0</span> <span class="hl kwa">then</span> <span class="hl com">(* the row doesnt divide evenly by 8 *)</span>
      output_byte stdout <span class="hl sym">(!</span>byte <span class="hl kwa">lsl</span> <span class="hl sym">(</span><span class="hl num">8</span> <span class="hl sym">-</span> rem<span class="hl sym">))</span> <span class="hl com">(* output last few bits *)</span>
  <span class="hl kwa">done</span>
