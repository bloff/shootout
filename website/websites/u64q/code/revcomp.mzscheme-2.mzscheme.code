<source>
<def></def><slc>;;; The Computer Language Benchmarks Game</slc><br />
<def></def><slc>;;; http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>;;; contributed by Matthew Flatt</slc><br />
<def><br />
#lang scheme</def><sym>/</sym><def>base</def><br />
<sym>(</sym><def>require scheme</def><sym>/</sym><def>cmdline</def><sym>)</sym><br />
<def></def><br />
<sym>(</sym><def>define translation</def> <sym>(</sym><def>make</def><sym>-</sym><def>vector</def> <num>128</num><def></def><sym>))</sym><br />
<def></def><br />
<sym>(</sym><def>for</def><sym>-</sym><def>each</def> <sym>(</sym><def></def><kwa>lambda</kwa> <def></def><sym>(</sym><def>from</def><sym>-</sym><def>to</def><sym>)</sym><br />
<def></def>            <sym>(</sym><def>let</def> <sym>([</sym><def>char</def> <sym>(</sym><def></def><kwa>lambda</kwa> <def></def><sym>(</sym><def>sym</def><sym>)</sym><br />
<def></def>                          <sym>(</sym><def>string</def><sym>-</sym><def>ref</def> <sym>(</sym><def>symbol</def><sym>-&gt;</sym><def>string sym</def><sym>)</sym> <def></def><num>0</num><def></def><sym>))])</sym><br />
<def></def>              <sym>(</sym><def>let</def> <sym>([</sym><def>from</def> <sym>(</sym><def>char</def> <sym>(</sym><def></def><kwa>car</kwa> <def>from</def><sym>-</sym><def>to</def><sym>))]</sym><br />
<def></def>                    <sym>[</sym><def>to</def> <sym>(</sym><def>char</def><sym>-&gt;</sym><def>integer</def> <sym>(</sym><def>char</def><sym>-</sym><def>upcase</def> <sym>(</sym><def>char</def> <sym>(</sym><def></def><kwa>cadr</kwa> <def>from</def><sym>-</sym><def>to</def><sym>))))])</sym><br />
<def></def>                <sym>(</sym><def>vector</def><sym>-</sym><def></def><kwa>set</kwa><def></def><sym>!</sym> <def>translation</def> <sym>(</sym><def>char</def><sym>-&gt;</sym><def>integer from</def><sym>)</sym> <def>to</def><sym>)</sym><br />
<def></def>                <sym>(</sym><def>vector</def><sym>-</sym><def></def><kwa>set</kwa><def></def><sym>!</sym> <def>translation</def> <sym>(</sym><def>char</def><sym>-&gt;</sym><def>integer</def> <sym>(</sym><def>char</def><sym>-</sym><def>upcase from</def><sym>))</sym> <def>to</def><sym>))))</sym><br />
<def></def>          <sym>'([</sym><def>a t</def><sym>]</sym><br />
<def></def>            <sym>[</sym><def>c g</def><sym>]</sym><br />
<def></def>            <sym>[</sym><def>g c</def><sym>]</sym><br />
<def></def>            <sym>[</sym><def>t a</def><sym>]</sym><br />
<def></def>            <sym>[</sym><def>u a</def><sym>]</sym><br />
<def></def>            <sym>[</sym><def>m k</def><sym>]</sym><br />
<def></def>            <sym>[</sym><def>r y</def><sym>]</sym><br />
<def></def>            <sym>[</sym><def>w w</def><sym>]</sym><br />
<def></def>            <sym>[</sym><def>s s</def><sym>]</sym><br />
<def></def>            <sym>[</sym><def>y R</def><sym>]</sym><br />
<def></def>            <sym>[</sym><def>k M</def><sym>]</sym><br />
<def></def>            <sym>[</sym><def>v b</def><sym>]</sym><br />
<def></def>            <sym>[</sym><def>h d</def><sym>]</sym><br />
<def></def>            <sym>[</sym><def>d h</def><sym>]</sym><br />
<def></def>            <sym>[</sym><def>b v</def><sym>]</sym><br />
<def></def>            <sym>[</sym><def>n n</def><sym>]))</sym><br />
<def></def><br />
<sym>(</sym><def>define</def> <sym>(</sym><def>output lines</def><sym>)</sym><br />
<def></def>  <sym>(</sym><def>let</def><sym>* ([</sym><def>str</def> <sym>(</sym><def></def><kwa>apply</kwa> <def>bytes</def><sym>-</sym><def></def><kwa>append</kwa> <def>lines</def><sym>)]</sym><br />
<def></def>         <sym>[</sym><def>o</def> <sym>(</sym><def>current</def><sym>-</sym><def>output</def><sym>-</sym><def>port</def><sym>)]</sym><br />
<def></def>         <sym>[</sym><def>len</def> <sym>(</sym><def>bytes</def><sym>-</sym><def></def><kwa>length</kwa> <def>str</def><sym>)])</sym><br />
<def></def>    <sym>(</sym><def>for</def> <sym>([</sym><def>offset</def> <sym>(</sym><def>in</def><sym>-</sym><def>range</def> <num>0</num> <def>len</def> <num>60</num><def></def><sym>)])</sym><br />
<def></def>      <sym>(</sym><def>write</def><sym>-</sym><def>bytes str o offset</def> <sym>(</sym><def></def><kwa>min</kwa> <def>len</def> <sym>(+</sym> <def>offset</def> <num>60</num><def></def><sym>)))</sym><br />
<def></def>      <sym>(</sym><def>newline o</def><sym>))))</sym><br />
<def></def><br />
<sym>(</sym><def>let</def> <sym>([</sym><def>in</def> <sym>(</sym><def>current</def><sym>-</sym><def>input</def><sym>-</sym><def>port</def><sym>)])</sym><br />
<def></def>  <sym>(</sym><def>let loop</def> <sym>([</sym><def>accum</def> <kwa>null</kwa><def></def><sym>])</sym><br />
<def></def>    <sym>(</sym><def>let</def> <sym>([</sym><def>l</def> <sym>(</sym><def></def><kwa>read</kwa><def></def><sym>-</sym><def>bytes</def><sym>-</sym><def></def><kwa>line</kwa> <def>in</def><sym>)])</sym><br />
<def></def>      <sym>(</sym><def></def><kwa>if</kwa> <def></def><sym>(</sym><def>eof</def><sym>-</sym><def>object? l</def><sym>)</sym><br />
<def></def>          <sym>(</sym><def>output accum</def><sym>)</sym><br />
<def></def>          <sym>(</sym><def></def><kwa>cond</kwa><br />
<def></def>           <sym>[(</sym><def>regexp</def><sym>-</sym><def>match? #rx#</def><str>&quot;^&gt;&quot;</str><def> l</def><sym>)</sym><br />
<def></def>            <sym>(</sym><def>output accum</def><sym>)</sym><br />
<def></def>            <sym>(</sym><def>printf</def> <str>&quot;~a</str><esc>\</esc><str>n&quot;</str><def> l</def><sym>)</sym><br />
<def></def>            <sym>(</sym><def>loop</def> <kwa>null</kwa><def></def><sym>)]</sym><br />
<def></def>           <sym>[</sym><def>else</def><br />
            <sym>(</sym><def>let</def><sym>* ([</sym><def>len</def> <sym>(</sym><def>bytes</def><sym>-</sym><def></def><kwa>length</kwa> <def>l</def><sym>)]</sym><br />
<def></def>                   <sym>[</sym><def>dest</def> <sym>(</sym><def>make</def><sym>-</sym><def>bytes len</def><sym>)])</sym><br />
<def></def>              <sym>(</sym><def>for</def> <sym>([</sym><def>i</def> <sym>(</sym><def>in</def><sym>-</sym><def>range len</def><sym>)])</sym><br />
<def></def>                <sym>(</sym><def>bytes</def><sym>-</sym><def></def><kwa>set</kwa><def></def><sym>!</sym> <def>dest</def><br />
                            <sym>(- (-</sym> <def>len i</def><sym>)</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>                            <sym>(</sym><def>vector</def><sym>-</sym><def>ref translation</def> <sym>(</sym><def>bytes</def><sym>-</sym><def>ref l i</def><sym>))))</sym><br />
<def></def>              <sym>(</sym><def>loop</def> <sym>(</sym><def></def><kwa>cons</kwa> <def>dest accum</def><sym>)))])))))</sym><def></def><br />
</source>
