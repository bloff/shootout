<span class="hl com">{-# OPTIONS -fbang-patterns #-}</span>
<span class="hl slc">--</span>
<span class="hl slc">-- The Computer Language Shootout</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Contributed by Don Stewart</span>
<span class="hl slc">-- Nsieve over a Bool array</span>
<span class="hl slc">--</span>

<span class="hl kwa">import</span> Data.Array.IO
<span class="hl kwa">import</span> Data.Array.Base
<span class="hl kwa">import</span> System
<span class="hl kwa">import</span> Text.Printf

main <span class="hl sym">=</span> <span class="hl kwa">do</span>
    n <span class="hl sym">&lt;-</span> getArgs <span class="hl sym">&gt;&gt;=</span> readIO . head <span class="hl sym">::</span> IO <span class="hl kwb">Int</span>
    mapM_ <span class="hl sym">(</span>sieve . <span class="hl sym">(</span><span class="hl num">10000</span> <span class="hl sym">*)</span> . <span class="hl sym">(</span><span class="hl num">2</span> ^<span class="hl sym">)) [</span>n<span class="hl sym">,</span> n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> n<span class="hl sym">-</span><span class="hl num">2</span><span class="hl sym">]</span>

sieve n <span class="hl sym">=</span> <span class="hl kwa">do</span>
    a <span class="hl sym">&lt;-</span> newArray <span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">,</span>n<span class="hl sym">)</span> <span class="hl kwa">True</span> <span class="hl sym">::</span> IO <span class="hl sym">(</span>IOUArray <span class="hl kwb">Int Bool</span><span class="hl sym">)</span> <span class="hl slc">-- an array of Bool</span>
    r <span class="hl sym">&lt;-</span> go a n <span class="hl num">2 0</span>
    printf <span class="hl str">&quot;Primes up to %8d %8d\n&quot;</span> <span class="hl sym">(</span>n<span class="hl sym">::</span><span class="hl kwb">Int</span><span class="hl sym">) (</span>r<span class="hl sym">::</span><span class="hl kwb">Int</span><span class="hl sym">) ::</span> IO <span class="hl sym">()</span>

go <span class="hl sym">!</span>a <span class="hl sym">!</span>m <span class="hl sym">!</span>n <span class="hl sym">!</span>c
    <span class="hl sym">|</span> n <span class="hl sym">==</span> m    <span class="hl sym">=</span> return c
    <span class="hl sym">|</span> otherwise <span class="hl sym">=</span> <span class="hl kwa">do</span>
            e <span class="hl sym">&lt;-</span> unsafeRead a n
            if e
                <span class="hl kwa">then let</span> loop <span class="hl sym">!</span>j
                            <span class="hl sym">|</span> j <span class="hl sym">&lt;=</span> m    <span class="hl sym">=</span> unsafeWrite a j <span class="hl kwa">False</span> <span class="hl sym">&gt;&gt;</span> loop <span class="hl sym">(</span>j<span class="hl sym">+</span>n<span class="hl sym">)</span>
                            <span class="hl sym">|</span> otherwise <span class="hl sym">=</span> go a m <span class="hl sym">(</span>n<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) (</span>c<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>
                     <span class="hl kwa">in</span> loop <span class="hl sym">(</span>n<span class="hl sym">+</span>n<span class="hl sym">)</span>
                <span class="hl kwa">else</span> go a m <span class="hl sym">(</span>n<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span> c
