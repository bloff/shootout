<source>
<def></def><com>/*</com><br />
<com>	The Computer Language Shootout</com><br />
<com>	http://shootout.alioth.debian.org/</com><br />
<com></com><br />
<com>	contributed by Jochen Hinrichsen</com><br />
<com>*/</com><def></def><br />
<br />
<kwb>double</kwb> <def>Cr</def><sym>,</sym> <def>Ci</def><sym>,</sym> <def>Tr</def><sym>,</sym> <def>Ti</def><sym>,</sym> <def>Zr</def><sym>=</sym><def></def><num>0</num><def></def><sym>,</sym> <def>Zi</def><sym>=</sym><def></def><num>0</num><def></def><sym>,</sym> <def>limit_sq</def> <sym>=</sym> <def></def><num>4.0</num><br />
<def></def><kwb>int</kwb> <def>res</def><sym>,</sym> <def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>,</sym> <def>x</def><sym>=</sym><def></def><num>0</num><def></def><sym>,</sym> <def>y</def><sym>=</sym><def></def><num>0</num><def></def><sym>,</sym> <def>pos</def><sym>=</sym><def></def><num>0</num><def></def><sym>,</sym> <def>acc</def><sym>=</sym><def></def><num>1</num><def></def><sym>,</sym> <def>iter</def> <sym>=</sym> <def></def><num>50</num><br />
<def>res</def> <sym>= (</sym><def>args</def><sym>.</sym><def>length</def> <sym>&gt;=</sym> <def></def><num>1</num><def></def><sym>)</sym> <def>?</def> <kwc>Integer</kwc><def></def><sym>.</sym><def></def><kwd>parseInt</kwd><def></def><sym>(</sym><def>args</def><sym>[</sym><def></def><num>0</num><def></def><sym>],</sym> <def></def><num>10</num><def></def><sym>) :</sym> <def></def><num>200</num><br />
<def></def><kwb>int</kwb> <def>max</def> <sym>= (</sym><def>res</def> <sym>*</sym> <def>res</def><sym>) &gt;&gt;&gt;</sym> <def></def><num>3</num><br />
<def>def pbm_data</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwb>byte</kwb><def></def><sym>[</sym> <def>max</def> <sym>]</sym><br />
<def></def><kwc>String</kwc> <def>pbm_header</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwc>String</kwc><def></def><sym>(</sym><def></def><str>&quot;P4&quot;</str><def></def> <sym>+ ((</sym><def></def><kwb>char</kwb><def></def><sym>)</sym> <def></def><num>012</num><def></def><sym>) +</sym> <def>res</def> <sym>+</sym> <def></def><str>&quot; &quot;</str><def></def> <sym>+</sym> <def>res</def> <sym>+ ((</sym><def></def><kwb>char</kwb><def></def><sym>)</sym> <def></def><num>012</num><def></def><sym>))</sym><br />
<def></def><br />
<kwc>System</kwc><def></def><sym>.</sym><def>out</def><sym>.</sym><def></def><kwd>write</kwd><def></def><sym>(</sym><def>pbm_header</def><sym>.</sym><def></def><kwd>getBytes</kwd><def></def><sym>(),</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>pbm_header</def><sym>.</sym><def></def><kwd>length</kwd><def></def><sym>())</sym><br />
<def></def><br />
<slc>// for ( ; pos &lt; max; x%=res, Zr=Zi=i=0) {</slc><br />
<def></def><kwa>while</kwa> <def></def><sym>(</sym><def>pos</def> <sym>&lt;</sym> <def>max</def><sym>) {</sym><br />
<def>	Cr</def> <sym>= (</sym><def></def><num>2</num><def></def><sym>*((</sym><def></def><kwb>double</kwb><def></def><sym>)</sym><def>x</def><sym>++)/</sym><def>res</def> <sym>-</sym> <def></def><num>1.5</num><def></def><sym>);</sym><br />
<def>	Ci</def><sym>=(</sym><def></def><num>2</num><def></def><sym>*((</sym><def></def><kwb>double</kwb><def></def><sym>)</sym><def>y</def><sym>)/</sym><def>res</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def><br />
	<slc>// for(acc&lt;&lt;=1; (acc&amp;1)==0 &amp;&amp; i++ &lt; iter; acc |= Zr*Zr+Zi*Zi &gt; limit_sq ? 1 : 0) {</slc><br />
<def>	acc</def><sym>&lt;&lt;=</sym><def></def><num>1</num><br />
<def></def>	<kwa>while</kwa> <def></def><sym>(((</sym><def>acc</def><sym>&amp;</sym><def></def><num>1</num><def></def><sym>)==</sym><def></def><num>0</num><def></def><sym>) &amp;&amp; (</sym><def>i</def><sym>++ &lt;</sym> <def>iter</def><sym>)) {</sym><br />
<def>		Tr</def> <sym>=</sym> <def>Zr</def><sym>*</sym><def>Zr</def> <sym>-</sym> <def>Zi</def><sym>*</sym><def>Zi</def> <sym>+</sym> <def>Cr<br />
		Ti</def> <sym>=</sym> <def></def><num>2</num><def></def><sym>*</sym><def>Zr</def><sym>*</sym><def>Zi</def> <sym>+</sym> <def>Ci<br />
		Zr</def> <sym>=</sym> <def>Tr<br />
		Zi</def> <sym>=</sym> <def>Ti</def><br />
<br />
		<slc>// println &quot;Zr^2 + Zi^2 = ${Zr*Zr+Zi*Zi}&quot;</slc><br />
<def>		acc</def> <sym>|= (</sym><def>Zr</def><sym>*</sym><def>Zr</def><sym>+</sym><def>Zi</def><sym>*</sym><def>Zi</def> <sym>&gt;</sym> <def>limit_sq</def><sym>)</sym> <def>?</def> <num>1</num> <def></def><sym>:</sym> <def></def><num>0</num><br />
<def></def>		<slc>// println &quot;acc = ${acc}&quot;</slc><br />
<def></def>	<sym>}</sym><br />
<def></def><br />
	<kwa>if</kwa> <def></def><sym>(</sym><def>x</def><sym>==</sym><def>res</def><sym>) {</sym><br />
<def>		y</def><sym>++</sym><br />
<def></def>		<kwa>if</kwa> <def></def><sym>(</sym><def>acc</def><sym>&lt;</sym><def></def><num>256</num><def></def><sym>)</sym> <def>acc</def> <sym>&lt;&lt;= (</sym><def></def><num>8</num><def></def><sym>-</sym><def>res</def><sym>%</sym><def></def><num>8</num><def></def><sym>)</sym><br />
<def></def>	<sym>}</sym><br />
<def></def>	<kwa>if</kwa> <def></def><sym>(</sym><def>acc</def><sym>&gt;</sym><def></def><num>255</num><def></def><sym>) {</sym><br />
<def>		pbm_data</def> <sym>[</sym> <def>pos</def><sym>++ ] = (</sym><def></def><kwb>byte</kwb><def></def><sym>) (</sym><def>acc^</def><sym>=</sym><def></def><num>255</num><def></def><sym>)</sym><br />
<def>		acc</def> <sym>=</sym> <def></def><num>1</num><br />
<def></def>	<sym>}</sym><br />
<def><br />
	x</def><sym>%=</sym><def>res<br />
	Zr</def><sym>=</sym><def>Zi</def><sym>=</sym><def>i</def><sym>=</sym><def></def><num>0</num><br />
<def></def><br />
	<slc>// println &quot;acc = ${acc}&quot;</slc><br />
<def></def>	<slc>// println &quot;pos = ${pos}&quot;</slc><br />
<def></def>	<slc>// println &quot;--------------------------------------&quot;</slc><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwc>System</kwc><def></def><sym>.</sym><def>out</def><sym>.</sym><def></def><kwd>write</kwd><def></def><sym>(</sym> <def>pbm_data</def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>pos</def><sym>);</sym><br />
<def></def><br />
<slc>// EOF</slc><br />
<def></def><br />
</source>
