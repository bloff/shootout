<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> * contributed by  Robert Brandner</span>
<span class="hl com"> * based on the Java version by Jarkko Miettinen</span>
<span class="hl com"> */</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">array</span><span class="hl sym">(</span><span class="hl kwb">string</span><span class="hl sym">)</span> argv<span class="hl sym">) {</span>

	<span class="hl kwb">int</span> minDepth <span class="hl sym">=</span> <span class="hl num">4</span><span class="hl sym">;</span>

	<span class="hl kwb">int</span> n <span class="hl sym">=</span> argc <span class="hl sym">&gt;</span> <span class="hl num">1</span> ? <span class="hl sym">(</span><span class="hl kwb">int</span><span class="hl sym">)</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">] :</span> <span class="hl num">10</span><span class="hl sym">;</span>

	<span class="hl kwb">int</span> maxDepth <span class="hl sym">= (</span>minDepth <span class="hl sym">+</span> <span class="hl num">2</span> <span class="hl sym">&gt;</span> n<span class="hl sym">)</span> ? minDepth <span class="hl sym">+</span> <span class="hl num">2</span> <span class="hl sym">:</span> n<span class="hl sym">;</span>
	<span class="hl kwb">int</span> stretchDepth <span class="hl sym">=</span> maxDepth <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>

	<span class="hl kwa">write</span><span class="hl sym">(</span><span class="hl str">&quot;stretch tree of depth &quot;</span> <span class="hl sym">+</span> stretchDepth <span class="hl sym">+</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">check: &quot;</span> <span class="hl sym">+</span> <span class="hl kwd">itemCheck</span><span class="hl sym">(</span><span class="hl kwd">bottomUpTree</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span>stretchDepth<span class="hl sym">)) +</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">);</span>

	TreeNode longLivedTree <span class="hl sym">=</span> <span class="hl kwd">bottomUpTree</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span>maxDepth<span class="hl sym">);</span>

	<span class="hl kwd">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> depth<span class="hl sym">=</span>minDepth<span class="hl sym">;</span> depth<span class="hl sym">&lt;=</span>maxDepth<span class="hl sym">;</span> depth<span class="hl sym">+=</span><span class="hl num">2</span><span class="hl sym">){</span>
		<span class="hl kwb">int</span> iterations <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>maxDepth <span class="hl sym">-</span> depth <span class="hl sym">+</span> minDepth<span class="hl sym">);</span>
		<span class="hl kwb">int</span> check <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
		<span class="hl kwd">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">;</span> i<span class="hl sym">&lt;=</span>iterations<span class="hl sym">;</span> i<span class="hl sym">++){</span>
			check <span class="hl sym">+=</span> <span class="hl kwd">itemCheck</span><span class="hl sym">(</span><span class="hl kwd">bottomUpTree</span><span class="hl sym">(</span>i<span class="hl sym">,</span>depth<span class="hl sym">));</span>
			check <span class="hl sym">+=</span> <span class="hl kwd">itemCheck</span><span class="hl sym">(</span><span class="hl kwd">bottomUpTree</span><span class="hl sym">(-</span>i<span class="hl sym">,</span>depth<span class="hl sym">));</span>
		<span class="hl sym">}</span>
		<span class="hl kwa">write</span><span class="hl sym">((</span>iterations<span class="hl sym">*</span><span class="hl num">2</span><span class="hl sym">) +</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">trees of depth &quot;</span> <span class="hl sym">+</span> depth <span class="hl sym">+</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">check: &quot;</span> <span class="hl sym">+</span> check<span class="hl sym">+</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">);</span>
	<span class="hl sym">}</span>
	<span class="hl kwa">write</span><span class="hl sym">(</span><span class="hl str">&quot;long lived tree of depth &quot;</span> <span class="hl sym">+</span> maxDepth <span class="hl sym">+</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">check: &quot;</span><span class="hl sym">+</span> <span class="hl kwd">itemCheck</span><span class="hl sym">(</span>longLivedTree<span class="hl sym">)+</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">);</span>
<span class="hl sym">}</span>

TreeNode <span class="hl kwd">bottomUpTree</span><span class="hl sym">(</span><span class="hl kwb">int</span> item<span class="hl sym">,</span> <span class="hl kwb">int</span> depth<span class="hl sym">) {</span>
	<span class="hl kwd">if</span> <span class="hl sym">(</span>depth<span class="hl sym">&gt;</span><span class="hl num">0</span><span class="hl sym">) {</span>
		return <span class="hl kwd">TreeNode</span><span class="hl sym">(</span>item<span class="hl sym">,</span> <span class="hl kwd">bottomUpTree</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>item<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> depth<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">),</span> <span class="hl kwd">bottomUpTree</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>item<span class="hl sym">,</span> depth<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">));</span>
	<span class="hl sym">}</span>
	else <span class="hl sym">{</span>
		return <span class="hl kwd">TreeNode</span><span class="hl sym">(</span>item<span class="hl sym">);</span>
	<span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">itemCheck</span><span class="hl sym">(</span>TreeNode t<span class="hl sym">) {</span>
	<span class="hl kwd">if</span> <span class="hl sym">(</span>t<span class="hl sym">-&gt;</span>left<span class="hl sym">==</span><span class="hl num">0</span><span class="hl sym">) {</span>return t<span class="hl sym">-&gt;</span>item<span class="hl sym">;}</span>
	else <span class="hl sym">{</span>return t<span class="hl sym">-&gt;</span>item <span class="hl sym">+</span> <span class="hl kwd">itemCheck</span><span class="hl sym">(</span>t<span class="hl sym">-&gt;</span>left<span class="hl sym">) -</span> <span class="hl kwd">itemCheck</span><span class="hl sym">(</span>t<span class="hl sym">-&gt;</span>right<span class="hl sym">);}</span>
<span class="hl sym">}</span>

class TreeNode <span class="hl sym">{</span>
	TreeNode left<span class="hl sym">,</span> right<span class="hl sym">;</span>
	<span class="hl kwb">int</span> item<span class="hl sym">;</span>

	<span class="hl kwb">void</span> <span class="hl kwd">create</span><span class="hl sym">(</span><span class="hl kwb">int</span> it<span class="hl sym">,</span> TreeNode<span class="hl sym">|</span><span class="hl kwb">void</span> l<span class="hl sym">,</span> TreeNode<span class="hl sym">|</span><span class="hl kwb">void</span> r<span class="hl sym">) {</span>
		item <span class="hl sym">=</span> it<span class="hl sym">;</span>
		left <span class="hl sym">=</span> l<span class="hl sym">;</span>
		right <span class="hl sym">=</span> r<span class="hl sym">;</span>
	<span class="hl sym">}</span>
<span class="hl sym">}</span>
