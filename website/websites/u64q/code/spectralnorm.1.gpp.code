<span class="hl slc">// -*- mode: c++ -*-</span>
<span class="hl slc">//</span>
<span class="hl slc">// The Great Computer Language Shootout</span>
<span class="hl slc">// http://shootout.alioth.debian.org/</span>
<span class="hl slc">//</span>
<span class="hl slc">// Original C contributed by Sebastien Loisel</span>
<span class="hl slc">// Conversion to C++ by Jon Harrop</span>
<span class="hl slc">// Compile: g++ -O3 -o spectralnorm spectralnorm.cpp</span>

<span class="hl dir">#include &lt;cmath&gt;</span>
<span class="hl dir">#include &lt;vector&gt;</span>
<span class="hl dir">#include &lt;iostream&gt;</span>
<span class="hl dir">#include &lt;iomanip&gt;</span>

<span class="hl kwa">using namespace</span> std<span class="hl sym">;</span>

<span class="hl kwb">double</span> <span class="hl kwd">eval_A</span><span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">,</span> <span class="hl kwb">int</span> j<span class="hl sym">) {</span> <span class="hl kwa">return</span> <span class="hl num">1.0</span> <span class="hl sym">/ ((</span>i<span class="hl sym">+</span>j<span class="hl sym">)*(</span>i<span class="hl sym">+</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)/</span><span class="hl num">2</span> <span class="hl sym">+</span> i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">); }</span>

<span class="hl kwb">void</span> <span class="hl kwd">eval_A_times_u</span><span class="hl sym">(</span><span class="hl kwb">const</span> vector<span class="hl sym">&lt;</span><span class="hl kwb">double</span><span class="hl sym">&gt; &amp;</span>u<span class="hl sym">,</span> vector<span class="hl sym">&lt;</span><span class="hl kwb">double</span><span class="hl sym">&gt; &amp;</span>Au<span class="hl sym">)</span>
<span class="hl sym">{</span>
  <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>u<span class="hl sym">.</span><span class="hl kwd">size</span><span class="hl sym">();</span> i<span class="hl sym">++)</span>
    <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwb">int</span> j<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> j<span class="hl sym">&lt;</span>u<span class="hl sym">.</span><span class="hl kwd">size</span><span class="hl sym">();</span> j<span class="hl sym">++)</span> Au<span class="hl sym">[</span>i<span class="hl sym">] +=</span> <span class="hl kwd">eval_A</span><span class="hl sym">(</span>i<span class="hl sym">,</span>j<span class="hl sym">) *</span> u<span class="hl sym">[</span>j<span class="hl sym">];</span>
<span class="hl sym">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">eval_At_times_u</span><span class="hl sym">(</span><span class="hl kwb">const</span> vector<span class="hl sym">&lt;</span><span class="hl kwb">double</span><span class="hl sym">&gt; &amp;</span>u<span class="hl sym">,</span> vector<span class="hl sym">&lt;</span><span class="hl kwb">double</span><span class="hl sym">&gt; &amp;</span>Au<span class="hl sym">)</span>
<span class="hl sym">{</span>
  <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>u<span class="hl sym">.</span><span class="hl kwd">size</span><span class="hl sym">();</span> i<span class="hl sym">++)</span>
    <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwb">int</span> j<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> j<span class="hl sym">&lt;</span>u<span class="hl sym">.</span><span class="hl kwd">size</span><span class="hl sym">();</span> j<span class="hl sym">++)</span> Au<span class="hl sym">[</span>i<span class="hl sym">] +=</span> <span class="hl kwd">eval_A</span><span class="hl sym">(</span>j<span class="hl sym">,</span>i<span class="hl sym">) *</span> u<span class="hl sym">[</span>j<span class="hl sym">];</span>
<span class="hl sym">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">eval_AtA_times_u</span><span class="hl sym">(</span><span class="hl kwb">const</span> vector<span class="hl sym">&lt;</span><span class="hl kwb">double</span><span class="hl sym">&gt; &amp;</span>u<span class="hl sym">,</span> vector<span class="hl sym">&lt;</span><span class="hl kwb">double</span><span class="hl sym">&gt; &amp;</span>AtAu<span class="hl sym">)</span>
<span class="hl sym">{</span> vector<span class="hl sym">&lt;</span><span class="hl kwb">double</span><span class="hl sym">&gt;</span> <span class="hl kwd">v</span><span class="hl sym">(</span>u<span class="hl sym">.</span><span class="hl kwd">size</span><span class="hl sym">());</span> <span class="hl kwd">eval_A_times_u</span><span class="hl sym">(</span>u<span class="hl sym">,</span> v<span class="hl sym">);</span> <span class="hl kwd">eval_At_times_u</span><span class="hl sym">(</span>v<span class="hl sym">,</span> AtAu<span class="hl sym">); }</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">*</span>argv<span class="hl sym">[])</span>
<span class="hl sym">{</span>
  <span class="hl kwb">int</span> N <span class="hl sym">= ((</span>argc <span class="hl sym">==</span> <span class="hl num">2</span><span class="hl sym">)</span> ? <span class="hl kwd">atoi</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]) :</span> <span class="hl num">2000</span><span class="hl sym">);</span>
  vector<span class="hl sym">&lt;</span><span class="hl kwb">double</span><span class="hl sym">&gt;</span> <span class="hl kwd">u</span><span class="hl sym">(</span>N<span class="hl sym">),</span> <span class="hl kwd">v</span><span class="hl sym">(</span>N<span class="hl sym">);</span>

  <span class="hl kwd">fill</span><span class="hl sym">(</span>u<span class="hl sym">.</span><span class="hl kwd">begin</span><span class="hl sym">(),</span> u<span class="hl sym">.</span><span class="hl kwd">end</span><span class="hl sym">(),</span> <span class="hl num">1</span><span class="hl sym">);</span>

  <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span><span class="hl num">10</span><span class="hl sym">;</span> i<span class="hl sym">++) {</span>
    <span class="hl kwd">eval_AtA_times_u</span><span class="hl sym">(</span>u<span class="hl sym">,</span> v<span class="hl sym">);</span>
    <span class="hl kwd">fill</span><span class="hl sym">(</span>u<span class="hl sym">.</span><span class="hl kwd">begin</span><span class="hl sym">(),</span> u<span class="hl sym">.</span><span class="hl kwd">end</span><span class="hl sym">(),</span> <span class="hl num">0</span><span class="hl sym">);</span>
    <span class="hl kwd">eval_AtA_times_u</span><span class="hl sym">(</span>v<span class="hl sym">,</span> u<span class="hl sym">);</span>
  <span class="hl sym">}</span>

  <span class="hl kwb">double</span> vBv<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">,</span> vv<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span>
  <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>N<span class="hl sym">;</span> i<span class="hl sym">++) {</span> vBv <span class="hl sym">+=</span> u<span class="hl sym">[</span>i<span class="hl sym">]*</span>v<span class="hl sym">[</span>i<span class="hl sym">];</span> vv <span class="hl sym">+=</span> v<span class="hl sym">[</span>i<span class="hl sym">]*</span>v<span class="hl sym">[</span>i<span class="hl sym">]; }</span>

  cout <span class="hl sym">&lt;&lt;</span> <span class="hl kwd">setprecision</span><span class="hl sym">(</span><span class="hl num">10</span><span class="hl sym">) &lt;&lt;</span> <span class="hl kwd">sqrt</span><span class="hl sym">(</span>vBv<span class="hl sym">/</span>vv<span class="hl sym">) &lt;&lt;</span> endl<span class="hl sym">;</span>

  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>
