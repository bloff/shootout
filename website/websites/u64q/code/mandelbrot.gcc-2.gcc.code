<source>
<def></def><com>/* The Computer Language Shootout</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com></com><br />
<com>   contributed by Greg Buchholz</com><br />
<com></com><br />
<com>   for the debian (AMD) machine...</com><br />
<com>   compile flags:  -O3 -ffast-math -march=athlon-xp -funroll-loops</com><br />
<com></com><br />
<com>   for the gp4 (Intel) machine...</com><br />
<com>   compile flags:  -O3 -ffast-math -march=pentium4 -funroll-loops</com><br />
<com>*/</com><def></def><br />
<br />
<dir>#include&lt;stdio.h&gt;</dir><br />
<def></def><br />
<kwb>int</kwb> <def></def><kwd>main</kwd> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>argc</def><sym>,</sym> <def></def><kwb>char</kwb> <def></def><sym>**</sym><def>argv</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>    <kwb>int</kwb> <def>w</def><sym>,</sym> <def>h</def><sym>,</sym> <def>bit_num</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>    <kwb>char</kwb> <def>byte_acc</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>    <kwb>int</kwb> <def>i</def><sym>,</sym> <def>iter</def> <sym>=</sym> <def></def><num>50</num><def></def><sym>;</sym><br />
<def></def>    <kwb>double</kwb> <def>x</def><sym>,</sym> <def>y</def><sym>,</sym> <def>limit</def> <sym>=</sym> <def></def><num>2.0</num><def></def><sym>;</sym><br />
<def></def>    <kwb>double</kwb> <def>Zr</def><sym>,</sym> <def>Zi</def><sym>,</sym> <def>Cr</def><sym>,</sym> <def>Ci</def><sym>,</sym> <def>Tr</def><sym>,</sym> <def>Ti</def><sym>;</sym><br />
<def><br />
    w</def> <sym>=</sym> <def>h</def> <sym>=</sym> <def></def><kwd>atoi</kwd><def></def><sym>(</sym><def>argv</def><sym>[</sym><def></def><num>1</num><def></def><sym>]);</sym><br />
<def></def><br />
    <kwd>printf</kwd><def></def><sym>(</sym><def></def><str>&quot;P4</str><esc>\n</esc><str>%d %d</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym><def>w</def><sym>,</sym><def>h</def><sym>);</sym><br />
<def></def><br />
    <kwa>for</kwa><def></def><sym>(</sym><def>y</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym><def>y</def><sym>&lt;</sym><def>h</def><sym>;++</sym><def>y</def><sym>)</sym><br />
<def></def>    <sym>{</sym><br />
<def></def>        <kwa>for</kwa><def></def><sym>(</sym><def>x</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym><def>x</def><sym>&lt;</sym><def>w</def><sym>;++</sym><def>x</def><sym>)</sym><br />
<def></def>        <sym>{</sym><br />
<def>            Zr</def> <sym>=</sym> <def>Zi</def> <sym>=</sym> <def>Tr</def> <sym>=</sym> <def>Ti</def> <sym>=</sym> <def></def><num>0.0</num><def></def><sym>;</sym><br />
<def>            Cr</def> <sym>= (</sym><def></def><num>2.0</num><def></def><sym>*</sym><def>x</def><sym>/</sym><def>w</def> <sym>-</sym> <def></def><num>1.5</num><def></def><sym>);</sym> <def>Ci</def><sym>=(</sym><def></def><num>2.0</num><def></def><sym>*</sym><def>y</def><sym>/</sym><def>h</def> <sym>-</sym> <def></def><num>1.0</num><def></def><sym>);</sym><br />
<def></def><br />
            <kwa>for</kwa> <def></def><sym>(</sym><def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym><def>i</def><sym>&lt;</sym><def>iter</def> <sym>&amp;&amp; (</sym><def>Tr</def><sym>+</sym><def>Ti</def> <sym>&lt;=</sym> <def>limit</def><sym>*</sym><def>limit</def><sym>);++</sym><def>i</def><sym>)</sym><br />
<def></def>            <sym>{</sym><br />
<def>                Zi</def> <sym>=</sym> <def></def><num>2.0</num><def></def><sym>*</sym><def>Zr</def><sym>*</sym><def>Zi</def> <sym>+</sym> <def>Ci</def><sym>;</sym><br />
<def>                Zr</def> <sym>=</sym> <def>Tr</def> <sym>-</sym> <def>Ti</def> <sym>+</sym> <def>Cr</def><sym>;</sym><br />
<def>                Tr</def> <sym>=</sym> <def>Zr</def> <sym>*</sym> <def>Zr</def><sym>;</sym><br />
<def>                Ti</def> <sym>=</sym> <def>Zi</def> <sym>*</sym> <def>Zi</def><sym>;</sym><br />
<def></def>            <sym>}</sym><br />
<def><br />
            byte_acc</def> <sym>&lt;&lt;=</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>            <kwa>if</kwa><def></def><sym>(</sym><def>Tr</def><sym>+</sym><def>Ti</def> <sym>&lt;=</sym> <def>limit</def><sym>*</sym><def>limit</def><sym>)</sym> <def>byte_acc</def> <sym>|=</sym> <def></def><num>0x01</num><def></def><sym>;</sym><br />
<def></def><br />
            <sym>++</sym><def>bit_num</def><sym>;</sym><br />
<def></def><br />
            <kwa>if</kwa><def></def><sym>(</sym><def>bit_num</def> <sym>==</sym> <def></def><num>8</num><def></def><sym>)</sym><br />
<def></def>            <sym>{</sym><br />
<def></def>                <kwd>putc</kwd><def></def><sym>(</sym><def>byte_acc</def><sym>,</sym><def>stdout</def><sym>);</sym><br />
<def>                byte_acc</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>                bit_num</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>            <kwa>else if</kwa><def></def><sym>(</sym><def>x</def> <sym>==</sym> <def>w</def><sym>-</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>            <sym>{</sym><br />
<def>                byte_acc</def> <sym>&lt;&lt;= (</sym><def></def><num>8</num><def></def><sym>-</sym><def>w</def><sym>%</sym><def></def><num>8</num><def></def><sym>);</sym><br />
<def></def>                <kwd>putc</kwd><def></def><sym>(</sym><def>byte_acc</def><sym>,</sym><def>stdout</def><sym>);</sym><br />
<def>                byte_acc</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>                bit_num</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>        <sym>}</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
</source>
