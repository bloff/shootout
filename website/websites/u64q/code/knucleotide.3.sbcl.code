<span class="hl slc">;;   The Computer Language Benchmarks Game</span>
<span class="hl slc">;;   http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;   contributed by Vsevolod Dyomkin</span>


<span class="hl sym">(</span>defun slice<span class="hl sym">-</span>and<span class="hl sym">-</span>dice <span class="hl sym">(</span>gene k ht<span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>optimize <span class="hl sym">(</span>speed <span class="hl num">3</span><span class="hl sym">) (</span>safety <span class="hl num">0</span><span class="hl sym">) (</span>debug <span class="hl num">0</span><span class="hl sym">))</span>
	   <span class="hl sym">(</span>type simple<span class="hl sym">-</span>base<span class="hl sym">-</span>string gene<span class="hl sym">)</span>
	   <span class="hl sym">(</span>type fixnum k<span class="hl sym">))</span>
  <span class="hl sym">(</span>clrhash ht<span class="hl sym">)</span>
<span class="hl slc">;  (setf ht (make-hash-table :size (expt 2 k)))</span>
  <span class="hl sym">(</span>if <span class="hl sym">(=</span> k <span class="hl num">1</span><span class="hl sym">)</span>
      <span class="hl sym">(</span>dotimes <span class="hl sym">(</span>i <span class="hl sym">(</span>the fixnum <span class="hl sym">(- (</span>length gene<span class="hl sym">)</span> k<span class="hl sym">)))</span>
        <span class="hl sym">(</span>incf <span class="hl sym">(</span>the fixnum <span class="hl sym">(</span>gethash <span class="hl sym">(</span>schar gene i<span class="hl sym">)</span> ht <span class="hl num">0</span><span class="hl sym">))))</span>
      <span class="hl sym">(</span>loop for i from <span class="hl num">0</span> to <span class="hl sym">(</span>the fixnum <span class="hl sym">(- (</span>length gene<span class="hl sym">)</span> k<span class="hl sym">))</span>
         with gene<span class="hl sym">-</span>num <span class="hl sym">=</span> <span class="hl num">0</span> and mask <span class="hl sym">= (</span><span class="hl num">1</span><span class="hl sym">- (</span>expt <span class="hl num">4</span> k<span class="hl sym">))</span> do
           <span class="hl sym">(</span>setf gene<span class="hl sym">-</span>num <span class="hl sym">(</span>logand mask <span class="hl sym">(</span>letter<span class="hl sym">-</span>to<span class="hl sym">-</span>num gene i gene<span class="hl sym">-</span>num<span class="hl sym">)))</span>
           <span class="hl sym">(</span>unless <span class="hl sym">(&lt;</span> i <span class="hl sym">(</span>the fixnum <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">-</span> k<span class="hl sym">)))</span>
             <span class="hl sym">(</span>incf <span class="hl sym">(</span>the fixnum <span class="hl sym">(</span>gethash gene<span class="hl sym">-</span>num ht <span class="hl num">0</span><span class="hl sym">))))))</span>
  ht<span class="hl sym">)</span>

<span class="hl sym">(</span>declaim <span class="hl sym">(</span>inline letter<span class="hl sym">-</span>to<span class="hl sym">-</span>num<span class="hl sym">))</span>
<span class="hl sym">(</span>defun letter<span class="hl sym">-</span>to<span class="hl sym">-</span>num <span class="hl sym">(</span>gene i idx<span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>optimize <span class="hl sym">(</span>speed <span class="hl num">3</span><span class="hl sym">) (</span>safety <span class="hl num">0</span><span class="hl sym">) (</span>debug <span class="hl num">0</span><span class="hl sym">))</span>
           <span class="hl sym">(</span>type fixnum i<span class="hl sym">))</span>
  <span class="hl sym">(</span>ecase <span class="hl sym">(</span>schar gene i<span class="hl sym">)</span>
    <span class="hl sym">(</span>#\A <span class="hl sym">(</span>ash idx <span class="hl num">2</span><span class="hl sym">))</span>
    <span class="hl sym">(</span>#\C <span class="hl sym">(</span>logxor <span class="hl sym">(</span>ash idx <span class="hl num">2</span><span class="hl sym">)</span> <span class="hl num">1</span><span class="hl sym">))</span>
    <span class="hl sym">(</span>#\G <span class="hl sym">(</span>logxor <span class="hl sym">(</span>ash idx <span class="hl num">2</span><span class="hl sym">)</span> <span class="hl num">2</span><span class="hl sym">))</span>
    <span class="hl sym">(</span>#\T <span class="hl sym">(</span>logxor <span class="hl sym">(</span>ash idx <span class="hl num">2</span><span class="hl sym">)</span> <span class="hl num">3</span><span class="hl sym">))))</span>

<span class="hl sym">(</span>declaim <span class="hl sym">(</span>inline gene<span class="hl sym">-</span>to<span class="hl sym">-</span>num<span class="hl sym">))</span>
<span class="hl sym">(</span>defun gene<span class="hl sym">-</span>to<span class="hl sym">-</span>num <span class="hl sym">(</span>gene<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>gene<span class="hl sym">-</span>num <span class="hl num">0</span><span class="hl sym">))</span>
    <span class="hl sym">(</span>dotimes <span class="hl sym">(</span>i <span class="hl sym">(</span>length gene<span class="hl sym">))</span>
      <span class="hl sym">(</span>declare <span class="hl sym">(</span>fixnum i<span class="hl sym">))</span>
      <span class="hl sym">(</span>setf gene<span class="hl sym">-</span>num <span class="hl sym">(</span>letter<span class="hl sym">-</span>to<span class="hl sym">-</span>num gene i gene<span class="hl sym">-</span>num<span class="hl sym">)))</span>
    gene<span class="hl sym">-</span>num<span class="hl sym">))</span>

<span class="hl sym">(</span>declaim <span class="hl sym">(</span>inline num<span class="hl sym">-</span>to<span class="hl sym">-</span>gene<span class="hl sym">))</span>
<span class="hl sym">(</span>defun num<span class="hl sym">-</span>to<span class="hl sym">-</span>gene <span class="hl sym">(</span>num k<span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>optimize <span class="hl sym">(</span>speed <span class="hl num">3</span><span class="hl sym">) (</span>safety <span class="hl num">0</span><span class="hl sym">) (</span>debug <span class="hl num">0</span><span class="hl sym">))</span>
           <span class="hl sym">(</span>type fixnum num<span class="hl sym">)</span>
           <span class="hl sym">(</span>type fixnum k<span class="hl sym">))</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>gene <span class="hl sym">(</span>make<span class="hl sym">-</span>array k <span class="hl sym">:</span>element<span class="hl sym">-</span>type <span class="hl sym">'</span>base<span class="hl sym">-</span>char<span class="hl sym">))</span>
        <span class="hl sym">(</span>acgt #<span class="hl sym">(</span>#\A #\C #\G #\T<span class="hl sym">)))</span>
    <span class="hl sym">(</span>dotimes <span class="hl sym">(</span>i k<span class="hl sym">)</span>
      <span class="hl sym">(</span>let <span class="hl sym">((</span>pos <span class="hl sym">(*</span> i <span class="hl num">2</span><span class="hl sym">)))</span>
        <span class="hl sym">(</span>declare <span class="hl sym">(</span>type fixnum pos<span class="hl sym">))</span>
        <span class="hl sym">(</span>setf <span class="hl sym">(</span>aref gene <span class="hl sym">(-</span> k i <span class="hl num">1</span><span class="hl sym">))</span>
              <span class="hl sym">(</span>aref acgt <span class="hl sym">(+ (</span>if <span class="hl sym">(</span>logbitp pos num<span class="hl sym">)</span> <span class="hl num">1 0</span><span class="hl sym">)</span>
                            <span class="hl sym">(</span>if <span class="hl sym">(</span>logbitp <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">+</span> pos<span class="hl sym">)</span> num<span class="hl sym">)</span> <span class="hl num">2 0</span><span class="hl sym">))))))</span>
    gene<span class="hl sym">))</span>

<span class="hl sym">(</span>defun discard<span class="hl sym">-</span>data<span class="hl sym">-</span>header <span class="hl sym">(</span>stream<span class="hl sym">)</span>
  <span class="hl sym">(</span>loop for line <span class="hl sym">= (</span>read<span class="hl sym">-</span>line stream nil nil<span class="hl sym">)</span>
	while <span class="hl sym">(</span>and line <span class="hl sym">(</span>string<span class="hl sym">/=</span> <span class="hl str">&quot;&gt;THREE&quot;</span> line <span class="hl sym">:</span>end2 <span class="hl num">6</span><span class="hl sym">))))</span>

<span class="hl sym">(</span>defun read<span class="hl sym">-</span>data <span class="hl sym">(</span>stream<span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>optimize <span class="hl sym">(</span>speed <span class="hl num">3</span><span class="hl sym">) (</span>safety <span class="hl num">0</span><span class="hl sym">) (</span>debug <span class="hl num">0</span><span class="hl sym">)))</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>data <span class="hl sym">(</span>make<span class="hl sym">-</span>array <span class="hl num">0</span> <span class="hl sym">:</span>element<span class="hl sym">-</span>type <span class="hl sym">'</span>base<span class="hl sym">-</span>char <span class="hl sym">:</span>adjustable t <span class="hl sym">:</span>fill<span class="hl sym">-</span>pointer <span class="hl num">0</span><span class="hl sym">)))</span>
    <span class="hl sym">(</span>do <span class="hl sym">((</span>line <span class="hl sym">(</span>read<span class="hl sym">-</span>line stream nil <span class="hl sym">'</span>eof<span class="hl sym">) (</span>read<span class="hl sym">-</span>line stream nil <span class="hl sym">'</span>eof<span class="hl sym">)))</span>
        <span class="hl sym">((</span>or <span class="hl sym">(</span>eq line <span class="hl sym">'</span>eof<span class="hl sym">) (</span>char<span class="hl sym">= (</span>schar line <span class="hl num">0</span><span class="hl sym">)</span> #\<span class="hl sym">&gt;)))</span>
      <span class="hl sym">(</span>if <span class="hl sym">(</span>not <span class="hl sym">(</span>char<span class="hl sym">= (</span>schar line <span class="hl num">0</span><span class="hl sym">)</span> #\<span class="hl slc">;))</span>
          <span class="hl sym">(</span>dotimes <span class="hl sym">(</span>char<span class="hl sym">-</span>index <span class="hl sym">(</span>length line<span class="hl sym">))</span>
            <span class="hl sym">(</span>vector<span class="hl sym">-</span>push<span class="hl sym">-</span>extend <span class="hl sym">(</span>char<span class="hl sym">-</span>upcase <span class="hl sym">(</span>the base<span class="hl sym">-</span>char <span class="hl sym">(</span>schar line char<span class="hl sym">-</span>index<span class="hl sym">)))</span> data<span class="hl sym">))))</span>
    <span class="hl sym">(</span>coerce data <span class="hl sym">'</span>simple<span class="hl sym">-</span>base<span class="hl sym">-</span>string<span class="hl sym">)))</span>

<span class="hl sym">(</span>defun print<span class="hl sym">-</span>precentages <span class="hl sym">(</span>gene k ht<span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>type simple<span class="hl sym">-</span>base<span class="hl sym">-</span>string gene<span class="hl sym">)</span>
	   <span class="hl sym">(</span>type fixnum k<span class="hl sym">))</span>
  <span class="hl sym">(</span>let<span class="hl sym">* ((</span>gene<span class="hl sym">-</span>table <span class="hl sym">(</span>slice<span class="hl sym">-</span>and<span class="hl sym">-</span>dice gene k ht<span class="hl sym">))</span>
	 sorted<span class="hl sym">-</span>frequencies
	 <span class="hl sym">(</span>sum <span class="hl num">0</span><span class="hl sym">))</span>
    <span class="hl sym">(</span>maphash <span class="hl sym">(</span>lambda <span class="hl sym">(</span>key v<span class="hl sym">)</span>
	       <span class="hl sym">(</span>incf sum v<span class="hl sym">)</span>
	       <span class="hl sym">(</span>push <span class="hl sym">(</span>cons key v<span class="hl sym">)</span>
                     sorted<span class="hl sym">-</span>frequencies<span class="hl sym">))</span>
	     gene<span class="hl sym">-</span>table<span class="hl sym">)</span>
    <span class="hl sym">(</span>setf sorted<span class="hl sym">-</span>frequencies
	  <span class="hl sym">(</span>sort sorted<span class="hl sym">-</span>frequencies
		<span class="hl sym">(</span>lambda <span class="hl sym">(</span>v1 v2<span class="hl sym">)</span>
                  <span class="hl sym">(</span>cond <span class="hl sym">((&gt; (</span>cdr v1<span class="hl sym">) (</span>cdr v2<span class="hl sym">))</span> t<span class="hl sym">)</span>
                        <span class="hl sym">((&lt; (</span>cdr v1<span class="hl sym">) (</span>cdr v2<span class="hl sym">))</span> nil<span class="hl sym">)</span>
                        <span class="hl sym">(</span>t <span class="hl sym">(&lt; (</span>car v1<span class="hl sym">) (</span>car v2<span class="hl sym">)))))))</span>
    <span class="hl sym">(</span>dolist <span class="hl sym">(</span>entry sorted<span class="hl sym">-</span>frequencies<span class="hl sym">)</span>
      <span class="hl sym">(</span>format t <span class="hl str">&quot;~a ~,3F~%&quot;</span>
	      <span class="hl sym">(</span>if <span class="hl sym">(=</span> k <span class="hl num">1</span><span class="hl sym">) (</span>car entry<span class="hl sym">)</span>
                  <span class="hl sym">(</span>num<span class="hl sym">-</span>to<span class="hl sym">-</span>gene <span class="hl sym">(</span>car entry<span class="hl sym">)</span> k<span class="hl sym">))</span>
	      <span class="hl sym">(* (/ (</span>cdr entry<span class="hl sym">) (</span>float sum<span class="hl sym">))</span> <span class="hl num">100.0</span><span class="hl sym">)))</span>
    <span class="hl sym">(</span>terpri<span class="hl sym">)))</span>

<span class="hl sym">(</span>defun print<span class="hl sym">-</span>occurence <span class="hl sym">(</span>slice gene k ht<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>gene<span class="hl sym">-</span>table <span class="hl sym">(</span>slice<span class="hl sym">-</span>and<span class="hl sym">-</span>dice gene k ht<span class="hl sym">)))</span>
    <span class="hl sym">(</span>format t <span class="hl str">&quot;~A~C~A~%&quot;</span>
            <span class="hl sym">(</span>gethash <span class="hl sym">(</span>gene<span class="hl sym">-</span>to<span class="hl sym">-</span>num slice<span class="hl sym">)</span> gene<span class="hl sym">-</span>table <span class="hl num">0</span><span class="hl sym">)</span>
            #\Tab
            slice<span class="hl sym">)))</span>

<span class="hl sym">(</span>defun main <span class="hl sym">()</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>optimize <span class="hl sym">(</span>speed <span class="hl num">0</span><span class="hl sym">) (</span>safety <span class="hl num">1</span><span class="hl sym">)))</span>
  <span class="hl sym">(</span>discard<span class="hl sym">-</span>data<span class="hl sym">-</span>header <span class="hl sym">*</span>standard<span class="hl sym">-</span>input<span class="hl sym">*)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>gene <span class="hl sym">(</span>read<span class="hl sym">-</span>data <span class="hl sym">*</span>standard<span class="hl sym">-</span>input<span class="hl sym">*))</span>
        <span class="hl sym">(</span>ht <span class="hl sym">(</span>make<span class="hl sym">-</span>hash<span class="hl sym">-</span>table <span class="hl sym">:</span>rehash<span class="hl sym">-</span>size <span class="hl num">5.0</span><span class="hl sym">)))</span>
    <span class="hl sym">(</span>print<span class="hl sym">-</span>precentages gene <span class="hl num">1</span> ht<span class="hl sym">)</span>
    <span class="hl sym">(</span>print<span class="hl sym">-</span>precentages gene <span class="hl num">2</span> ht<span class="hl sym">)</span>
    <span class="hl sym">(</span>print<span class="hl sym">-</span>occurence <span class="hl str">&quot;GGT&quot;</span> gene <span class="hl num">3</span> ht<span class="hl sym">)</span>
    <span class="hl sym">(</span>print<span class="hl sym">-</span>occurence <span class="hl str">&quot;GGTA&quot;</span> gene <span class="hl num">4</span> ht<span class="hl sym">)</span>
    <span class="hl sym">(</span>print<span class="hl sym">-</span>occurence <span class="hl str">&quot;GGTATT&quot;</span> gene <span class="hl num">6</span> ht<span class="hl sym">)</span>
    <span class="hl sym">(</span>print<span class="hl sym">-</span>occurence <span class="hl str">&quot;GGTATTTTAATT&quot;</span> gene <span class="hl num">12</span> ht<span class="hl sym">)</span>
    <span class="hl sym">(</span>print<span class="hl sym">-</span>occurence <span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span> gene <span class="hl num">18</span> ht<span class="hl sym">)))</span>


<span class="hl sym">(</span>defun test <span class="hl sym">()</span>
  <span class="hl sym">(</span>with<span class="hl sym">-</span>open<span class="hl sym">-</span>file <span class="hl sym">(*</span>standard<span class="hl sym">-</span>input<span class="hl sym">*</span> <span class="hl str">&quot;knucleotide-input.txt&quot;</span>
				    <span class="hl sym">:</span>direction <span class="hl sym">:</span>input<span class="hl sym">)</span>
    <span class="hl sym">(</span>with<span class="hl sym">-</span>open<span class="hl sym">-</span>file <span class="hl sym">(*</span>standard<span class="hl sym">-</span>output<span class="hl sym">*</span> <span class="hl str">&quot;knucleotide-output.txt&quot;</span>
				       <span class="hl sym">:</span>direction <span class="hl sym">:</span>output
				       <span class="hl sym">:</span>if<span class="hl sym">-</span>does<span class="hl sym">-</span>not<span class="hl sym">-</span>exist <span class="hl sym">:</span>create
				       <span class="hl sym">:</span>if<span class="hl sym">-</span>exists <span class="hl sym">:</span>supersede<span class="hl sym">)</span>
      <span class="hl sym">(</span>main<span class="hl sym">))))</span>
