<span class="hl slc">% ----------------------------------------------------------------------</span>
<span class="hl slc">% The Computer Language Benchmarks Game</span>
<span class="hl slc">% http://shootout.alioth.debian.org/</span>
<span class="hl slc">%</span>
<span class="hl slc">% This is a slightly-modified version of the exising nsieve implementation</span>
<span class="hl slc">% differing only in the mechanism used to mimic array creation and</span>
<span class="hl slc">% access. This version [when compared to existing version]:</span>
<span class="hl slc">%</span>
<span class="hl slc">% * Makes only modest demands of the global stack, so should execute using</span>
<span class="hl slc">%   default values, at least up to a load of N = 9. However, its heap</span>
<span class="hl slc">%   memory demands make it prone to thrashing [existing version is more</span>
<span class="hl slc">%   stable as long as a sufficiently large stack size is specified]</span>
<span class="hl slc">%</span>
<span class="hl slc">% * Execution times are on par at up to N = 6, then diverge quite</span>
<span class="hl slc">%   dramatically [e.g. at N = 8 this version is roughly twice as fast as</span>
<span class="hl slc">%   existing version]</span>
<span class="hl slc">%</span>
<span class="hl slc">% Contributed by Anthony Borla</span>
<span class="hl slc">% Modified to run with YAP by Glendon Holst</span>
<span class="hl slc">% ----------------------------------------------------------------------</span>

<span class="hl sym">:-</span> yap_flag<span class="hl sym">(</span>unknown<span class="hl sym">,</span>error<span class="hl sym">).</span>

<span class="hl sym">:-</span> initialization<span class="hl sym">(</span>main<span class="hl sym">).</span>

main <span class="hl sym">:-</span>
   unix<span class="hl sym">(</span> argv<span class="hl sym">([</span>H<span class="hl sym">|</span>_<span class="hl sym">]) ),</span> number_atom<span class="hl sym">(</span>N<span class="hl sym">,</span>H<span class="hl sym">),</span>

   N1 <span class="hl kwa">is</span> <span class="hl num">10000</span> <span class="hl sym">&lt;&lt;</span> N<span class="hl sym">,</span>
   N2 <span class="hl kwa">is</span> <span class="hl num">10000</span> <span class="hl sym">&lt;&lt; (</span>N <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">),</span>
   N3 <span class="hl kwa">is</span> <span class="hl num">10000</span> <span class="hl sym">&lt;&lt; (</span>N <span class="hl sym">-</span> <span class="hl num">2</span><span class="hl sym">),</span>

   calcAndshowSieve<span class="hl sym">(</span>N1<span class="hl sym">),</span>
   calcAndshowSieve<span class="hl sym">(</span>N2<span class="hl sym">),</span>
   calcAndshowSieve<span class="hl sym">(</span>N3<span class="hl sym">).</span>

<span class="hl slc">% ------------------------------- %</span>

calcAndshowSieve<span class="hl sym">(</span>N<span class="hl sym">) :-</span>
   make_array<span class="hl sym">(</span>N<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">),</span>
   nsieve<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">,</span> N<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> R<span class="hl sym">),</span>
   format<span class="hl sym">(</span><span class="hl str">'Primes up to~t~w~21|~t~w~30|~n'</span><span class="hl sym">, [</span>N<span class="hl sym">,</span> R<span class="hl sym">]).</span>

<span class="hl slc">% ------------------------------- %</span>

nsieve<span class="hl sym">(</span>ASize<span class="hl sym">,</span> ASize<span class="hl sym">,</span> R<span class="hl sym">,</span> R<span class="hl sym">) :- !.</span>
nsieve<span class="hl sym">(</span>N<span class="hl sym">,</span> ASize<span class="hl sym">,</span> A<span class="hl sym">,</span> R<span class="hl sym">) :-</span>
   <span class="hl sym">(</span>
      is_slot<span class="hl sym">(</span>N<span class="hl sym">) -&gt;</span>
      clear_sieve<span class="hl sym">(</span>N<span class="hl sym">,</span> N<span class="hl sym">,</span> ASize<span class="hl sym">),</span> A1 <span class="hl kwa">is</span> A <span class="hl sym">+</span> <span class="hl num">1</span>
   <span class="hl sym">;</span>
      A1 <span class="hl kwa">is</span> A
   <span class="hl sym">),</span>
   N1 <span class="hl kwa">is</span> N <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">, !,</span>
   nsieve<span class="hl sym">(</span>N1<span class="hl sym">,</span> ASize<span class="hl sym">,</span> A1<span class="hl sym">,</span> R<span class="hl sym">).</span>

<span class="hl slc">% ------------- %</span>

clear_sieve<span class="hl sym">(</span>N<span class="hl sym">,</span> M<span class="hl sym">,</span> ASize<span class="hl sym">) :-</span>
   N1 <span class="hl kwa">is</span> N <span class="hl sym">+</span> M<span class="hl sym">,</span> clear_sieve_<span class="hl sym">(</span>N1<span class="hl sym">,</span> M<span class="hl sym">,</span> ASize<span class="hl sym">).</span>

<span class="hl slc">% ------------- %</span>

clear_sieve_<span class="hl sym">(</span>N<span class="hl sym">,</span> _<span class="hl sym">,</span> ASize<span class="hl sym">) :-</span> ASize <span class="hl sym">&lt;</span> N<span class="hl sym">, !.</span>

clear_sieve_<span class="hl sym">(</span>N<span class="hl sym">,</span> M<span class="hl sym">,</span> ASize<span class="hl sym">) :-</span>
   clear_slot<span class="hl sym">(</span>N<span class="hl sym">),</span>
   N1 <span class="hl kwa">is</span> N <span class="hl sym">+</span> M<span class="hl sym">, !,</span> clear_sieve_<span class="hl sym">(</span>N1<span class="hl sym">,</span> M<span class="hl sym">,</span> ASize<span class="hl sym">).</span>

<span class="hl slc">% ------------------------------- %</span>

make_array<span class="hl sym">(</span>N<span class="hl sym">,</span> V<span class="hl sym">) :-</span> fill_array<span class="hl sym">(</span>N<span class="hl sym">,</span> V<span class="hl sym">).</span>

<span class="hl slc">% ------------- %</span>

fill_array<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> _<span class="hl sym">) :- !.</span>
fill_array<span class="hl sym">(</span>N<span class="hl sym">,</span> V<span class="hl sym">) :-</span> bb_put<span class="hl sym">(</span>N<span class="hl sym">,</span> V<span class="hl sym">),</span> N1 <span class="hl kwa">is</span> N <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">, !,</span> fill_array<span class="hl sym">(</span>N1<span class="hl sym">,</span> V<span class="hl sym">).</span>

<span class="hl slc">% ------------- %</span>

set_slot<span class="hl sym">(</span>N<span class="hl sym">) :-</span> bb_put<span class="hl sym">(</span>N<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">).</span>
clear_slot<span class="hl sym">(</span>N<span class="hl sym">) :-</span> bb_put<span class="hl sym">(</span>N<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">).</span>
is_slot<span class="hl sym">(</span>N<span class="hl sym">) :-</span> bb_get<span class="hl sym">(</span>N<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">).</span>

<span class="hl slc">% ------------------------------- %</span>

