<source>
<def></def><com>/**</com><br />
<com> * The Computer Language Benchmarks Game</com><br />
<com> * Based on the CAL Open Quark version</com><br />
<com> * Contributed by Magnus Byne.</com><br />
<com> */</com><def></def><br />
<kwa>module</kwa> <def>Knucleotide</def><sym>;</sym><br />
<def></def><br />
<kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Core</def><sym>.</sym><def>Prelude</def> <kwa>using</kwa><br />
<def></def>    <kwa>typeConstructor</kwa> <def></def><sym>=</sym> <def>Boolean</def><sym>,</sym> <def>Int</def><sym>,</sym> <def>JObject</def><sym>,</sym> <def>String</def><sym>;</sym><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym><br />
<def>        combineComparators</def><sym>,</sym> <def>eager</def><sym>,</sym> <def>fromInt</def><sym>,</sym> <def>fst</def><sym>,</sym> <def>induceComparator</def><sym>,</sym> <def>input</def><sym>,</sym> <def>not</def><sym>,</sym><br />
<def>        reverseComparator</def><sym>,</sym> <def>seq</def><sym>,</sym> <def>snd</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Core</def><sym>.</sym><def>Debug</def> <kwa>using</kwa><br />
<def></def>    <kwa>typeClass</kwa> <def></def><sym>=</sym> <def>Show</def><sym>;</sym><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>show</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Core</def><sym>.</sym><def>String</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>length</def><sym>,</sym> <def>startsWith</def><sym>,</sym> <def>subscript</def><sym>,</sym> <def>substring</def><sym>,</sym> <def>toUpperCase</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Collections</def><sym>.</sym><def>List</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>foldLeftStrict</def><sym>,</sym> <def>map</def><sym>,</sym> <def>sortBy</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Utilities</def><sym>.</sym><def>MessageFormat</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>formatWithPattern</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Utilities</def><sym>.</sym><def>Locale</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>invariantLocale</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<kwa>import</kwa> <def>Cal</def><sym>.</sym><def>IO</def><sym>.</sym><def>Console</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>isNullString</def><sym>,</sym> <def>makeBufferedReader</def><sym>,</sym> <def>print</def><sym>,</sym> <def>readLine</def><sym>,</sym> <def>stdin</def><sym>;</sym><br />
<def></def>    <kwa>typeConstructor</kwa> <def></def><sym>=</sym> <def>JBufferedReader</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<br />
<kwa>data foreign unsafe import jvm</kwa> <def></def><str>&quot;java.lang.StringBuffer&quot;</str><def></def><br />
    <kwa>private</kwa> <def>JStringBuffer</def> <kwa>deriving</kwa> <def>Show</def><sym>;</sym><br />
<def></def><br />
<kwa>data foreign unsafe import jvm</kwa> <def></def><str>&quot;java.util.Collection&quot;</str><def></def> <kwa>private</kwa> <def>JCollection</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;constructor&quot;</str><def></def><br />
    <kwa>private</kwa> <def>createStringBuffer</def> <sym>::</sym> <def>JStringBuffer</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;method append&quot;</str><def></def><br />
    <kwa>private</kwa> <def>append</def> <sym>::</sym> <def>JStringBuffer</def> <sym>-&gt;</sym> <def>String</def> <sym>-&gt;</sym> <def>JStringBuffer</def><sym>;</sym><br />
<def></def><br />
<kwa>data foreign unsafe import jvm</kwa> <def></def><str>&quot;int[]&quot;</str><def> JIntArray</def><sym>;</sym><br />
<def></def><br />
<slc>//Import Java integer arrays</slc><br />
<def></def><kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;newArray&quot;</str><def> newArray</def> <sym>::</sym> <def>Int</def> <sym>-&gt;</sym> <def>JIntArray</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;subscriptArray&quot;</str><def><br />
    subscriptArray</def> <sym>::</sym> <def>JIntArray</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;updateArray&quot;</str><def><br />
    updateArray</def> <sym>::</sym> <def>JIntArray</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def><sym>;</sym><br />
<def></def><br />
<kwa>data foreign unsafe import jvm</kwa> <def></def><str>&quot;java.util.HashMap&quot;</str><def></def><br />
    <kwa>private</kwa> <def>JHashMap</def> <kwa>deriving</kwa> <def>Show</def><sym>;</sym><br />
<def></def><br />
<kwa>data foreign unsafe import jvm</kwa> <def></def><str>&quot;java.util.Set&quot;</str><def></def> <kwa>private</kwa> <def>JSet</def><sym>;</sym><br />
<def></def><br />
<slc>//Import mutable Java Hash Maps</slc><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;constructor&quot;</str><def></def> <kwa>private</kwa> <def>createHashMap</def> <sym>::</sym> <def>JHashMap</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;isNull&quot;</str><def></def> <kwa>private</kwa> <def>isArrayNull</def> <sym>::</sym> <def>JIntArray</def> <sym>-&gt;</sym> <def>Boolean</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;method get&quot;</str><def></def><br />
    <kwa>private</kwa> <def>lookup</def> <sym>::</sym> <def>JHashMap</def> <sym>-&gt;</sym> <def>JObject</def> <sym>-&gt;</sym> <def>JObject</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;method keySet&quot;</str><def></def> <kwa>private</kwa> <def>keySet</def> <sym>::</sym> <def>JHashMap</def> <sym>-&gt;</sym> <def>JSet</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;method put&quot;</str><def></def><br />
    <kwa>private</kwa> <def>insert</def> <sym>::</sym> <def>JHashMap</def> <sym>-&gt;</sym> <def>JObject</def> <sym>-&gt;</sym> <def>JObject</def> <sym>-&gt;</sym> <def>JObject</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;cast&quot;</str><def> stringToObject</def> <sym>::</sym> <def>String</def> <sym>-&gt;</sym> <def>JObject</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;cast&quot;</str><def> objectToJIntArray</def> <sym>::</sym> <def>JObject</def> <sym>-&gt;</sym> <def>JIntArray</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;cast&quot;</str><def> jIntArrayToJObject</def> <sym>::</sym> <def>JIntArray</def> <sym>-&gt;</sym> <def>JObject</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;cast&quot;</str><def> jSetToJObject</def> <sym>::</sym> <def>JSet</def> <sym>-&gt;</sym> <def>JObject</def><sym>;</sym><br />
<def></def><br />
<com>/**</com><br />
<com> * update the count for a given key in the map</com><br />
<com> * if the key is not in the map, it is added with value 1.</com><br />
<com> */</com><def><br />
update</def> <sym>::</sym> <def>JHashMap</def> <sym>-&gt;</sym> <def>String</def> <sym>-&gt;</sym> <def>Int</def><sym>;</sym><br />
<def>update</def> <sym>!</sym><def>map</def> <sym>!</sym><def>string</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa><br />
<def>        value</def> <sym>::</sym> <def>JIntArray</def><sym>;</sym><br />
<def>        value</def> <sym>=</sym><br />
<def>            eager $ objectToJIntArray</def> <sym>(</sym><def>lookup map</def> <sym>(</sym><def>stringToObject string</def><sym>));</sym><br />
<def></def>    <kwa>in</kwa><br />
<def></def>        <kwa>if</kwa> <def>not</def> <sym>(</sym><def>isArrayNull value</def><sym>)</sym> <def></def><kwa>then</kwa><br />
<def>            updateArray value</def> <num>0</num> <def></def><sym>(</sym><def></def><num>1</num> <def></def><sym>+</sym> <def>value</def> <sym>`</sym><def>subscriptArray</def><sym>`</sym> <def></def><num>0</num><def></def><sym>)</sym><br />
<def></def>        <kwa>else</kwa><br />
<def></def>            <kwa>let</kwa><br />
<def>                array</def> <sym>::</sym> <def>JIntArray</def><sym>;</sym><br />
<def>                array</def> <sym>=</sym> <def>eager</def> <sym>(</sym><def>newArray</def> <num>1</num><def></def><sym>);</sym><br />
<def></def>            <kwa>in</kwa><br />
<def>                insert map</def> <sym>(</sym><def>stringToObject string</def><sym>) (</sym><def>jIntArrayToJObject array</def><sym>)</sym><br />
<def></def>                <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                updateArray array</def> <num>0 1</num><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<com>/**</com><br />
<com> * Lookup a value in a hashmap.</com><br />
<com> * Return 0 if the key is not in the hashmap</com><br />
<com> */</com><def><br />
getValue</def> <sym>::</sym> <def>JHashMap</def> <sym>-&gt;</sym> <def>String</def> <sym>-&gt;</sym> <def>Int</def><sym>;</sym><br />
<def>getValue</def> <sym>!</sym><def>map</def> <sym>!</sym><def>string</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa><br />
<def>        value</def> <sym>::</sym> <def>JIntArray</def><sym>;</sym><br />
<def>        value</def> <sym>=</sym><br />
<def>            eager $ objectToJIntArray</def> <sym>(</sym><def>lookup map</def> <sym>(</sym><def>stringToObject string</def><sym>));</sym><br />
<def></def>    <kwa>in</kwa><br />
<def></def>        <kwa>if</kwa> <def>not</def> <sym>(</sym><def>isArrayNull value</def><sym>)</sym> <def></def><kwa>then</kwa><br />
<def>            value</def> <sym>`</sym><def>subscriptArray</def><sym>`</sym> <def></def><num>0</num><br />
<def></def>        <kwa>else</kwa><br />
<def></def>            <slc>//the key is not in the map</slc><br />
<def></def>            <num>0</num><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<com>/** convert a JhashMap to a list of key, value pairs.*/</com><def><br />
hashMapToPairs</def> <sym>::</sym> <def>JHashMap</def> <sym>-&gt; [(</sym><def>String</def><sym>,</sym> <def>Int</def><sym>)];</sym><br />
<def>hashMapToPairs</def> <sym>!</sym><def>jmap</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa><br />
<def>        keys</def> <sym>:: [</sym><def>String</def><sym>];</sym><br />
<def>        keys</def> <sym>=</sym> <def>input</def> <sym>(</sym><def>jSetToJObject</def> <sym>(</sym><def>keySet jmap</def><sym>));</sym><br />
<def></def>    <kwa>in</kwa><br />
<def>        map</def> <sym>(</sym><def>\</def><sym>!</sym><def>key</def> <sym>-&gt; (</sym><def>key</def><sym>,</sym> <def>getValue jmap key</def><sym>))</sym> <def>keys</def><br />
    <sym>;</sym><br />
<def></def><br />
<com>/** compute the frequency table for a specified fragment length*/</com><def><br />
calculateFrequencies</def> <sym>::</sym> <def>String</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>JHashMap</def><sym>;</sym><br />
<def>calculateFrequencies</def> <sym>!</sym><def>sequence</def> <sym>!</sym><def>fragmentLength</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa><br />
<def>        len</def> <sym>::</sym> <def>Int</def><sym>;</sym><br />
<def>        len</def> <sym>=</sym> <def>eager $ length sequence</def> <sym>-</sym> <def>fragmentLength</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def><br />
        freqMap</def> <sym>::</sym> <def>JHashMap</def><sym>;</sym><br />
<def>        freqMap</def> <sym>=</sym> <def>eager createHashMap</def><sym>;</sym><br />
<def><br />
        process</def> <sym>::</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>JHashMap</def><sym>;</sym><br />
<def>        process</def> <sym>!</sym><def>offset</def> <sym>!</sym><def>index</def> <sym>=</sym><br />
<def></def>            <kwa>if</kwa> <def>index</def> <sym>&lt;</sym> <def>len</def> <kwa>then</kwa><br />
<def>                update<br />
                    freqMap</def><br />
                    <sym>(</sym><def>substring sequence index</def> <sym>(</sym><def>index</def> <sym>+</sym> <def>fragmentLength</def><sym>))</sym><br />
<def></def>                <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                process offset</def> <sym>(</sym><def>index</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>            <kwa>else</kwa><br />
<def>                freqMap</def><br />
            <sym>;</sym><br />
<def></def>    <kwa>in</kwa><br />
<def>        process</def> <num>0 0</num><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<com>/**read dna seq from stdin*/</com><def><br />
read</def> <sym>::</sym> <def>JBufferedReader</def> <sym>-&gt;</sym> <def>String</def><sym>;</sym><br />
<def>read</def> <sym>!</sym><def>reader</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa><br />
<def>        skipTill3</def> <sym>::</sym> <def>JBufferedReader</def> <sym>-&gt; ();</sym><br />
<def>        skipTill3</def> <sym>!</sym><def>reader</def> <sym>=</sym><br />
<def></def>            <kwa>let</kwa><br />
<def>                line</def> <sym>::</sym> <def>String</def><sym>;</sym><br />
<def>                line</def> <sym>=</sym> <def>eager $ readLine reader</def><sym>;</sym><br />
<def></def>            <kwa>in</kwa><br />
<def></def>                <kwa>if</kwa> <def>not</def> <sym>(</sym><def>startsWith</def> <str>&quot;&gt;THREE&quot;</str><def> line</def><sym>)</sym> <def></def><kwa>then</kwa><br />
<def>                    skipTill3 reader</def><br />
                <kwa>else</kwa><br />
<def></def>                    <sym>()</sym><br />
<def></def>            <sym>;</sym><br />
<def><br />
        stringBuffer</def> <sym>::</sym> <def>JStringBuffer</def><sym>;</sym><br />
<def>        stringBuffer</def> <sym>=</sym> <def>eager $ createStringBuffer</def><sym>;</sym><br />
<def><br />
        readSeq</def> <sym>::</sym> <def>JBufferedReader</def> <sym>-&gt; ();</sym><br />
<def>        readSeq</def> <sym>!</sym><def>reader</def> <sym>=</sym><br />
<def></def>            <kwa>let</kwa><br />
<def>                line</def> <sym>::</sym> <def>String</def><sym>;</sym><br />
<def>                line</def> <sym>=</sym> <def>eager $ readLine reader</def><sym>;</sym><br />
<def></def>            <kwa>in</kwa><br />
<def></def>                <kwa>if</kwa> <def>isNullString line</def> <kwa>then</kwa><br />
<def></def>                    <sym>()</sym><br />
<def></def>                <kwa>else if</kwa> <def>subscript line</def> <num>0</num> <def></def><sym>==</sym> <def></def><str>'&gt;'</str><def></def> <kwa>then</kwa><br />
<def></def>                    <sym>()</sym><br />
<def></def>                <kwa>else if</kwa> <def>subscript line</def> <num>0</num> <def></def><sym>!=</sym> <def></def><str>';'</str><def></def> <kwa>then</kwa><br />
<def>                    append stringBuffer</def> <sym>(</sym><def>toUpperCase line</def><sym>)</sym><br />
<def></def>                    <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                    readSeq reader</def><br />
                <kwa>else</kwa><br />
<def>                    readSeq reader</def><br />
            <sym>;</sym><br />
<def></def>    <kwa>in</kwa><br />
<def>        skipTill3 reader</def><br />
        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>        readSeq reader</def><br />
        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>        show stringBuffer</def><br />
    <sym>;</sym><br />
<def><br />
showFreq</def> <sym>:: [(</sym><def>String</def><sym>,</sym> <def>Int</def><sym>)] -&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>String</def><sym>;</sym><br />
<def>showFreq</def> <sym>!</sym><def>freqList</def> <sym>!</sym><def>total</def> <sym>=</sym><br />
<def>    foldLeftStrict</def><br />
        <sym>(</sym><br />
<def>            \</def><sym>!</sym><def>str</def> <sym>!</sym><def>item</def> <sym>-&gt;</sym><br />
<def></def>                <kwa>case</kwa> <def>item</def> <kwa>of</kwa><br />
<def></def>                <sym>(</sym><def>name</def><sym>,</sym> <def>freq</def><sym>)</sym><br />
<def></def>                <sym>-&gt;</sym><br />
<def>                    formatWithPattern</def><br />
                        <str>&quot;{0}{1} {2,number,0.000}</str><esc>\n</esc><str>&quot;</str><def><br />
                        invariantLocale</def><br />
                        <sym>(</sym><def>str</def><sym>,</sym> <def>name</def><sym>,</sym> <def>fromInt freq</def> <sym>/</sym> <def>fromInt total</def> <sym>*</sym> <def></def><num>100.0</num><def></def><sym>)</sym><br />
<def></def>                    <sym>;</sym><br />
<def></def>        <sym>)</sym><br />
<def></def>        <str>&quot;&quot;</str><def></def><br />
        <sym>(</sym><def>sortBy</def><br />
            <sym>(</sym><def>combineComparators</def><br />
                <sym>(</sym><def>reverseComparator</def> <sym>(</sym><def>induceComparator snd</def><sym>))</sym><br />
<def></def>                <sym>(</sym><def>induceComparator fst</def><sym>)</sym><br />
<def></def>            <sym>)</sym><br />
<def>            freqList</def><br />
        <sym>)</sym><br />
<def></def>    <sym>++</sym> <def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><br />
    <sym>;</sym><br />
<def><br />
showCount</def> <sym>::</sym> <def>JHashMap</def> <sym>-&gt;</sym> <def>String</def> <sym>-&gt;</sym> <def>String</def><sym>;</sym><br />
<def>showCount</def> <sym>!</sym><def>hashmap</def> <sym>!</sym><def>nucleotide</def> <sym>=</sym><br />
<def>    show</def> <sym>(</sym><def>getValue hashmap nucleotide</def><sym>) ++</sym> <def></def><str>&quot;</str><esc>\t</esc><str>&quot;</str><def></def> <sym>++</sym> <def>nucleotide</def> <sym>++</sym> <def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>;</sym><br />
<def><br />
main</def> <sym>:: [</sym><def>String</def><sym>] -&gt; ();</sym><br />
<def></def><kwa>public</kwa> <def>main</def> <sym>!</sym><def>args</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa><br />
<def>        sq</def> <sym>::</sym> <def>String</def><sym>;</sym><br />
<def>        sq</def> <sym>=</sym> <def>eager $ read</def> <sym>(</sym><def>makeBufferedReader stdin</def><sym>);</sym><br />
<def></def><br />
        <slc>//sequence (readLines (makeBufferedReader stdin));</slc><br />
<def></def><br />
        <slc>//build freqnece map for length 1 nucledotides</slc><br />
<def>        freq1</def> <sym>:: [(</sym><def>String</def><sym>,</sym> <def>Int</def><sym>)];</sym><br />
<def>        freq1</def> <sym>=</sym> <def>hashMapToPairs</def> <sym>(</sym><def>calculateFrequencies sq</def> <num>1</num><def></def><sym>);</sym><br />
<def></def><br />
        <slc>//build freqnece map for length 2 nucledotides</slc><br />
<def>        freq2</def> <sym>:: [(</sym><def>String</def><sym>,</sym> <def>Int</def><sym>)];</sym><br />
<def>        freq2</def> <sym>=</sym> <def>hashMapToPairs</def> <sym>(</sym><def>calculateFrequencies sq</def> <num>2</num><def></def><sym>);</sym><br />
<def><br />
        seqLength</def> <sym>::</sym> <def>Int</def><sym>;</sym><br />
<def>        seqLength</def> <sym>=</sym> <def>length sq</def><sym>;</sym><br />
<def></def><br />
        <slc>//build 3,4,6,12,18 nucledotide maps and get counts for some specific instances.</slc><br />
<def>        counts</def> <sym>::</sym> <def>String</def><sym>;</sym><br />
<def>        counts</def> <sym>=</sym><br />
<def>            foldLeftStrict</def><br />
                <sym>(</sym><br />
<def>                    \</def><sym>!</sym><def>str</def> <sym>!</sym><def>item</def> <sym>-&gt;</sym><br />
<def>                        str</def><br />
                        <sym>++</sym> <def>showCount</def><br />
                            <sym>(</sym><def>calculateFrequencies sq</def> <sym>(</sym><def>length item</def><sym>))</sym><br />
<def>                            item</def><br />
                <sym>)</sym><br />
<def></def>                <str>&quot;&quot;</str><def></def><br />
                <sym>[</sym><br />
<def></def>                    <str>&quot;GGT&quot;</str><def></def><sym>,</sym><br />
<def></def>                    <str>&quot;GGTA&quot;</str><def></def><sym>,</sym><br />
<def></def>                    <str>&quot;GGTATT&quot;</str><def></def><sym>,</sym><br />
<def></def>                    <str>&quot;GGTATTTTAATT&quot;</str><def></def><sym>,</sym><br />
<def></def>                    <str>&quot;GGTATTTTAATTTATAGT&quot;</str><def></def><br />
                <sym>]</sym><br />
<def></def>            <sym>;</sym><br />
<def></def>    <kwa>in</kwa><br />
<def><br />
        print</def> <sym>(</sym><def>showFreq freq1 seqLength</def><sym>)</sym><br />
<def></def>        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>        print</def> <sym>(</sym><def>showFreq freq2</def> <sym>(</sym><def>seqLength</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>))</sym><br />
<def></def>        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>        print counts</def><br />
    <sym>;</sym><br />
<def></def><br />
</source>
