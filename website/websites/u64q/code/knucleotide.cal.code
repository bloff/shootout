<span class="hl com">/**</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * Based on the CAL Open Quark version</span>
<span class="hl com"> * Contributed by Magnus Byne.</span>
<span class="hl com"> */</span>
<span class="hl kwa">module</span> Knucleotide<span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Prelude <span class="hl kwa">using</span>
    <span class="hl kwa">typeConstructor</span> <span class="hl sym">=</span> Boolean<span class="hl sym">,</span> Int<span class="hl sym">,</span> JObject<span class="hl sym">,</span> String<span class="hl sym">;</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span>
        combineComparators<span class="hl sym">,</span> eager<span class="hl sym">,</span> fromInt<span class="hl sym">,</span> fst<span class="hl sym">,</span> induceComparator<span class="hl sym">,</span> input<span class="hl sym">,</span> not<span class="hl sym">,</span>
        reverseComparator<span class="hl sym">,</span> seq<span class="hl sym">,</span> snd<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Debug <span class="hl kwa">using</span>
    <span class="hl kwa">typeClass</span> <span class="hl sym">=</span> Show<span class="hl sym">;</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> show<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>String <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> length<span class="hl sym">,</span> startsWith<span class="hl sym">,</span> subscript<span class="hl sym">,</span> substring<span class="hl sym">,</span> toUpperCase<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Collections<span class="hl sym">.</span>List <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> foldLeftStrict<span class="hl sym">,</span> map<span class="hl sym">,</span> sortBy<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Utilities<span class="hl sym">.</span>MessageFormat <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> formatWithPattern<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Utilities<span class="hl sym">.</span>Locale <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> invariantLocale<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>IO<span class="hl sym">.</span>Console <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> isNullString<span class="hl sym">,</span> makeBufferedReader<span class="hl sym">,</span> print<span class="hl sym">,</span> readLine<span class="hl sym">,</span> stdin<span class="hl sym">;</span>
    <span class="hl kwa">typeConstructor</span> <span class="hl sym">=</span> JBufferedReader<span class="hl sym">;</span>
    <span class="hl sym">;</span>


<span class="hl kwa">data foreign unsafe import jvm</span> <span class="hl str">&quot;java.lang.StringBuffer&quot;</span>
    <span class="hl kwa">private</span> JStringBuffer <span class="hl kwa">deriving</span> Show<span class="hl sym">;</span>

<span class="hl kwa">data foreign unsafe import jvm</span> <span class="hl str">&quot;java.util.Collection&quot;</span> <span class="hl kwa">private</span> JCollection<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;constructor&quot;</span>
    <span class="hl kwa">private</span> createStringBuffer <span class="hl sym">::</span> JStringBuffer<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;method append&quot;</span>
    <span class="hl kwa">private</span> append <span class="hl sym">::</span> JStringBuffer <span class="hl sym">-&gt;</span> String <span class="hl sym">-&gt;</span> JStringBuffer<span class="hl sym">;</span>

<span class="hl kwa">data foreign unsafe import jvm</span> <span class="hl str">&quot;int[]&quot;</span> JIntArray<span class="hl sym">;</span>

<span class="hl slc">//Import Java integer arrays</span>
<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;newArray&quot;</span> newArray <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> JIntArray<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;subscriptArray&quot;</span>
    subscriptArray <span class="hl sym">::</span> JIntArray <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;updateArray&quot;</span>
    updateArray <span class="hl sym">::</span> JIntArray <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>

<span class="hl kwa">data foreign unsafe import jvm</span> <span class="hl str">&quot;java.util.HashMap&quot;</span>
    <span class="hl kwa">private</span> JHashMap <span class="hl kwa">deriving</span> Show<span class="hl sym">;</span>

<span class="hl kwa">data foreign unsafe import jvm</span> <span class="hl str">&quot;java.util.Set&quot;</span> <span class="hl kwa">private</span> JSet<span class="hl sym">;</span>

<span class="hl slc">//Import mutable Java Hash Maps</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;constructor&quot;</span> <span class="hl kwa">private</span> createHashMap <span class="hl sym">::</span> JHashMap<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;isNull&quot;</span> <span class="hl kwa">private</span> isArrayNull <span class="hl sym">::</span> JIntArray <span class="hl sym">-&gt;</span> Boolean<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;method get&quot;</span>
    <span class="hl kwa">private</span> lookup <span class="hl sym">::</span> JHashMap <span class="hl sym">-&gt;</span> JObject <span class="hl sym">-&gt;</span> JObject<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;method keySet&quot;</span> <span class="hl kwa">private</span> keySet <span class="hl sym">::</span> JHashMap <span class="hl sym">-&gt;</span> JSet<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;method put&quot;</span>
    <span class="hl kwa">private</span> insert <span class="hl sym">::</span> JHashMap <span class="hl sym">-&gt;</span> JObject <span class="hl sym">-&gt;</span> JObject <span class="hl sym">-&gt;</span> JObject<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;cast&quot;</span> stringToObject <span class="hl sym">::</span> String <span class="hl sym">-&gt;</span> JObject<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;cast&quot;</span> objectToJIntArray <span class="hl sym">::</span> JObject <span class="hl sym">-&gt;</span> JIntArray<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;cast&quot;</span> jIntArrayToJObject <span class="hl sym">::</span> JIntArray <span class="hl sym">-&gt;</span> JObject<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;cast&quot;</span> jSetToJObject <span class="hl sym">::</span> JSet <span class="hl sym">-&gt;</span> JObject<span class="hl sym">;</span>

<span class="hl com">/**</span>
<span class="hl com"> * update the count for a given key in the map</span>
<span class="hl com"> * if the key is not in the map, it is added with value 1.</span>
<span class="hl com"> */</span>
update <span class="hl sym">::</span> JHashMap <span class="hl sym">-&gt;</span> String <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>
update <span class="hl sym">!</span>map <span class="hl sym">!</span>string <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        value <span class="hl sym">::</span> JIntArray<span class="hl sym">;</span>
        value <span class="hl sym">=</span>
            eager $ objectToJIntArray <span class="hl sym">(</span>lookup map <span class="hl sym">(</span>stringToObject string<span class="hl sym">));</span>
    <span class="hl kwa">in</span>
        <span class="hl kwa">if</span> not <span class="hl sym">(</span>isArrayNull value<span class="hl sym">)</span> <span class="hl kwa">then</span>
            updateArray value <span class="hl num">0</span> <span class="hl sym">(</span><span class="hl num">1</span> <span class="hl sym">+</span> value <span class="hl sym">`</span>subscriptArray<span class="hl sym">`</span> <span class="hl num">0</span><span class="hl sym">)</span>
        <span class="hl kwa">else</span>
            <span class="hl kwa">let</span>
                array <span class="hl sym">::</span> JIntArray<span class="hl sym">;</span>
                array <span class="hl sym">=</span> eager <span class="hl sym">(</span>newArray <span class="hl num">1</span><span class="hl sym">);</span>
            <span class="hl kwa">in</span>
                insert map <span class="hl sym">(</span>stringToObject string<span class="hl sym">) (</span>jIntArrayToJObject array<span class="hl sym">)</span>
                <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                updateArray array <span class="hl num">0 1</span>
    <span class="hl sym">;</span>

<span class="hl com">/**</span>
<span class="hl com"> * Lookup a value in a hashmap.</span>
<span class="hl com"> * Return 0 if the key is not in the hashmap</span>
<span class="hl com"> */</span>
getValue <span class="hl sym">::</span> JHashMap <span class="hl sym">-&gt;</span> String <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>
getValue <span class="hl sym">!</span>map <span class="hl sym">!</span>string <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        value <span class="hl sym">::</span> JIntArray<span class="hl sym">;</span>
        value <span class="hl sym">=</span>
            eager $ objectToJIntArray <span class="hl sym">(</span>lookup map <span class="hl sym">(</span>stringToObject string<span class="hl sym">));</span>
    <span class="hl kwa">in</span>
        <span class="hl kwa">if</span> not <span class="hl sym">(</span>isArrayNull value<span class="hl sym">)</span> <span class="hl kwa">then</span>
            value <span class="hl sym">`</span>subscriptArray<span class="hl sym">`</span> <span class="hl num">0</span>
        <span class="hl kwa">else</span>
            <span class="hl slc">//the key is not in the map</span>
            <span class="hl num">0</span>
    <span class="hl sym">;</span>

<span class="hl com">/** convert a JhashMap to a list of key, value pairs.*/</span>
hashMapToPairs <span class="hl sym">::</span> JHashMap <span class="hl sym">-&gt; [(</span>String<span class="hl sym">,</span> Int<span class="hl sym">)];</span>
hashMapToPairs <span class="hl sym">!</span>jmap <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        keys <span class="hl sym">:: [</span>String<span class="hl sym">];</span>
        keys <span class="hl sym">=</span> input <span class="hl sym">(</span>jSetToJObject <span class="hl sym">(</span>keySet jmap<span class="hl sym">));</span>
    <span class="hl kwa">in</span>
        map <span class="hl sym">(</span>\<span class="hl sym">!</span>key <span class="hl sym">-&gt; (</span>key<span class="hl sym">,</span> getValue jmap key<span class="hl sym">))</span> keys
    <span class="hl sym">;</span>

<span class="hl com">/** compute the frequency table for a specified fragment length*/</span>
calculateFrequencies <span class="hl sym">::</span> String <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> JHashMap<span class="hl sym">;</span>
calculateFrequencies <span class="hl sym">!</span>sequence <span class="hl sym">!</span>fragmentLength <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        len <span class="hl sym">::</span> Int<span class="hl sym">;</span>
        len <span class="hl sym">=</span> eager $ length sequence <span class="hl sym">-</span> fragmentLength <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>

        freqMap <span class="hl sym">::</span> JHashMap<span class="hl sym">;</span>
        freqMap <span class="hl sym">=</span> eager createHashMap<span class="hl sym">;</span>

        process <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> JHashMap<span class="hl sym">;</span>
        process <span class="hl sym">!</span>offset <span class="hl sym">!</span>index <span class="hl sym">=</span>
            <span class="hl kwa">if</span> index <span class="hl sym">&lt;</span> len <span class="hl kwa">then</span>
                update
                    freqMap
                    <span class="hl sym">(</span>substring sequence index <span class="hl sym">(</span>index <span class="hl sym">+</span> fragmentLength<span class="hl sym">))</span>
                <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                process offset <span class="hl sym">(</span>index <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
            <span class="hl kwa">else</span>
                freqMap
            <span class="hl sym">;</span>
    <span class="hl kwa">in</span>
        process <span class="hl num">0 0</span>
    <span class="hl sym">;</span>

<span class="hl com">/**read dna seq from stdin*/</span>
read <span class="hl sym">::</span> JBufferedReader <span class="hl sym">-&gt;</span> String<span class="hl sym">;</span>
read <span class="hl sym">!</span>reader <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        skipTill3 <span class="hl sym">::</span> JBufferedReader <span class="hl sym">-&gt; ();</span>
        skipTill3 <span class="hl sym">!</span>reader <span class="hl sym">=</span>
            <span class="hl kwa">let</span>
                line <span class="hl sym">::</span> String<span class="hl sym">;</span>
                line <span class="hl sym">=</span> eager $ readLine reader<span class="hl sym">;</span>
            <span class="hl kwa">in</span>
                <span class="hl kwa">if</span> not <span class="hl sym">(</span>startsWith <span class="hl str">&quot;&gt;THREE&quot;</span> line<span class="hl sym">)</span> <span class="hl kwa">then</span>
                    skipTill3 reader
                <span class="hl kwa">else</span>
                    <span class="hl sym">()</span>
            <span class="hl sym">;</span>

        stringBuffer <span class="hl sym">::</span> JStringBuffer<span class="hl sym">;</span>
        stringBuffer <span class="hl sym">=</span> eager $ createStringBuffer<span class="hl sym">;</span>

        readSeq <span class="hl sym">::</span> JBufferedReader <span class="hl sym">-&gt; ();</span>
        readSeq <span class="hl sym">!</span>reader <span class="hl sym">=</span>
            <span class="hl kwa">let</span>
                line <span class="hl sym">::</span> String<span class="hl sym">;</span>
                line <span class="hl sym">=</span> eager $ readLine reader<span class="hl sym">;</span>
            <span class="hl kwa">in</span>
                <span class="hl kwa">if</span> isNullString line <span class="hl kwa">then</span>
                    <span class="hl sym">()</span>
                <span class="hl kwa">else if</span> subscript line <span class="hl num">0</span> <span class="hl sym">==</span> <span class="hl str">'&gt;'</span> <span class="hl kwa">then</span>
                    <span class="hl sym">()</span>
                <span class="hl kwa">else if</span> subscript line <span class="hl num">0</span> <span class="hl sym">!=</span> <span class="hl str">';'</span> <span class="hl kwa">then</span>
                    append stringBuffer <span class="hl sym">(</span>toUpperCase line<span class="hl sym">)</span>
                    <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                    readSeq reader
                <span class="hl kwa">else</span>
                    readSeq reader
            <span class="hl sym">;</span>
    <span class="hl kwa">in</span>
        skipTill3 reader
        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
        readSeq reader
        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
        show stringBuffer
    <span class="hl sym">;</span>

showFreq <span class="hl sym">:: [(</span>String<span class="hl sym">,</span> Int<span class="hl sym">)] -&gt;</span> Int <span class="hl sym">-&gt;</span> String<span class="hl sym">;</span>
showFreq <span class="hl sym">!</span>freqList <span class="hl sym">!</span>total <span class="hl sym">=</span>
    foldLeftStrict
        <span class="hl sym">(</span>
            \<span class="hl sym">!</span>str <span class="hl sym">!</span>item <span class="hl sym">-&gt;</span>
                <span class="hl kwa">case</span> item <span class="hl kwa">of</span>
                <span class="hl sym">(</span>name<span class="hl sym">,</span> freq<span class="hl sym">)</span>
                <span class="hl sym">-&gt;</span>
                    formatWithPattern
                        <span class="hl str">&quot;{0}{1} {2,number,0.000}</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
                        invariantLocale
                        <span class="hl sym">(</span>str<span class="hl sym">,</span> name<span class="hl sym">,</span> fromInt freq <span class="hl sym">/</span> fromInt total <span class="hl sym">*</span> <span class="hl num">100.0</span><span class="hl sym">)</span>
                    <span class="hl sym">;</span>
        <span class="hl sym">)</span>
        <span class="hl str">&quot;&quot;</span>
        <span class="hl sym">(</span>sortBy
            <span class="hl sym">(</span>combineComparators
                <span class="hl sym">(</span>reverseComparator <span class="hl sym">(</span>induceComparator snd<span class="hl sym">))</span>
                <span class="hl sym">(</span>induceComparator fst<span class="hl sym">)</span>
            <span class="hl sym">)</span>
            freqList
        <span class="hl sym">)</span>
    <span class="hl sym">++</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
    <span class="hl sym">;</span>

showCount <span class="hl sym">::</span> JHashMap <span class="hl sym">-&gt;</span> String <span class="hl sym">-&gt;</span> String<span class="hl sym">;</span>
showCount <span class="hl sym">!</span>hashmap <span class="hl sym">!</span>nucleotide <span class="hl sym">=</span>
    show <span class="hl sym">(</span>getValue hashmap nucleotide<span class="hl sym">) ++</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">&quot;</span> <span class="hl sym">++</span> nucleotide <span class="hl sym">++</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>

main <span class="hl sym">:: [</span>String<span class="hl sym">] -&gt; ();</span>
<span class="hl kwa">public</span> main <span class="hl sym">!</span>args <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        sq <span class="hl sym">::</span> String<span class="hl sym">;</span>
        sq <span class="hl sym">=</span> eager $ read <span class="hl sym">(</span>makeBufferedReader stdin<span class="hl sym">);</span>

        <span class="hl slc">//sequence (readLines (makeBufferedReader stdin));</span>

        <span class="hl slc">//build freqnece map for length 1 nucledotides</span>
        freq1 <span class="hl sym">:: [(</span>String<span class="hl sym">,</span> Int<span class="hl sym">)];</span>
        freq1 <span class="hl sym">=</span> hashMapToPairs <span class="hl sym">(</span>calculateFrequencies sq <span class="hl num">1</span><span class="hl sym">);</span>

        <span class="hl slc">//build freqnece map for length 2 nucledotides</span>
        freq2 <span class="hl sym">:: [(</span>String<span class="hl sym">,</span> Int<span class="hl sym">)];</span>
        freq2 <span class="hl sym">=</span> hashMapToPairs <span class="hl sym">(</span>calculateFrequencies sq <span class="hl num">2</span><span class="hl sym">);</span>

        seqLength <span class="hl sym">::</span> Int<span class="hl sym">;</span>
        seqLength <span class="hl sym">=</span> length sq<span class="hl sym">;</span>

        <span class="hl slc">//build 3,4,6,12,18 nucledotide maps and get counts for some specific instances.</span>
        counts <span class="hl sym">::</span> String<span class="hl sym">;</span>
        counts <span class="hl sym">=</span>
            foldLeftStrict
                <span class="hl sym">(</span>
                    \<span class="hl sym">!</span>str <span class="hl sym">!</span>item <span class="hl sym">-&gt;</span>
                        str
                        <span class="hl sym">++</span> showCount
                            <span class="hl sym">(</span>calculateFrequencies sq <span class="hl sym">(</span>length item<span class="hl sym">))</span>
                            item
                <span class="hl sym">)</span>
                <span class="hl str">&quot;&quot;</span>
                <span class="hl sym">[</span>
                    <span class="hl str">&quot;GGT&quot;</span><span class="hl sym">,</span>
                    <span class="hl str">&quot;GGTA&quot;</span><span class="hl sym">,</span>
                    <span class="hl str">&quot;GGTATT&quot;</span><span class="hl sym">,</span>
                    <span class="hl str">&quot;GGTATTTTAATT&quot;</span><span class="hl sym">,</span>
                    <span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span>
                <span class="hl sym">]</span>
            <span class="hl sym">;</span>
    <span class="hl kwa">in</span>

        print <span class="hl sym">(</span>showFreq freq1 seqLength<span class="hl sym">)</span>
        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
        print <span class="hl sym">(</span>showFreq freq2 <span class="hl sym">(</span>seqLength <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">))</span>
        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
        print counts
    <span class="hl sym">;</span>

