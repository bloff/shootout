<source>
<def></def><com>/*</com><br />
<com>** The Computer Language Shootout</com><br />
<com>** http://shootout.alioth.debian.org/</com><br />
<com>** contributed by Mike Pall</com><br />
<com>**</com><br />
<com>** regex-dna benchmark using PCRE</com><br />
<com>**</com><br />
<com>** compile with:</com><br />
<com>**   gcc -O3 -fomit-frame-pointer -o regexdna regexdna.c -lpcre</com><br />
<com>*/</com><def></def><br />
<br />
<dir>#define __USE_STRING_INLINES</dir><br />
<def></def><dir>#include &lt;stdio.h&gt;</dir><br />
<def></def><dir>#include &lt;string.h&gt;</dir><br />
<def></def><dir>#include &lt;stdlib.h&gt;</dir><br />
<def></def><dir>#include &lt;pcre.h&gt;</dir><br />
<def></def><br />
<kwc>typedef</kwc> <def></def><kwb>struct</kwb> <def>fbuf</def> <sym>{</sym><br />
<def></def>  <kwb>char</kwb> <def></def><sym>*</sym><def>buf</def><sym>;</sym><br />
<def></def>  <kwb>size_t</kwb> <def>size</def><sym>,</sym> <def>len</def><sym>;</sym><br />
<def></def><sym>}</sym> <def>fbuf_t</def><sym>;</sym><br />
<def></def><br />
<kwb>static void</kwb> <def></def><kwd>fb_init</kwd><def></def><sym>(</sym><def>fbuf_t</def> <sym>*</sym><def>b</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def>  b</def><sym>-&gt;</sym><def>buf</def> <sym>=</sym> <def>NULL</def><sym>;</sym><br />
<def>  b</def><sym>-&gt;</sym><def>len</def> <sym>=</sym> <def>b</def><sym>-&gt;</sym><def>size</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>static char</kwb> <def></def><sym>*</sym><def></def><kwd>fb_need</kwd><def></def><sym>(</sym><def>fbuf_t</def> <sym>*</sym><def>b</def><sym>,</sym> <def></def><kwb>size_t</kwb> <def>need</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def>  need</def> <sym>+=</sym> <def>b</def><sym>-&gt;</sym><def>len</def><sym>;</sym><br />
<def></def>  <kwa>if</kwa> <def></def><sym>(</sym><def>need</def> <sym>&gt;</sym> <def>b</def><sym>-&gt;</sym><def>size</def><sym>) {</sym><br />
<def></def>    <kwa>if</kwa> <def></def><sym>(</sym><def>b</def><sym>-&gt;</sym><def>size</def> <sym>==</sym> <def></def><num>0</num><def></def><sym>)</sym> <def>b</def><sym>-&gt;</sym><def>size</def> <sym>=</sym> <def>need</def><sym>;</sym><br />
<def></def>    <kwa>else while</kwa> <def></def><sym>(</sym><def>need</def> <sym>&gt;</sym> <def>b</def><sym>-&gt;</sym><def>size</def><sym>)</sym> <def>b</def><sym>-&gt;</sym><def>size</def> <sym>+=</sym> <def>b</def><sym>-&gt;</sym><def>size</def><sym>;</sym><br />
<def></def>    <kwa>if</kwa> <def></def><sym>(!(</sym><def>b</def><sym>-&gt;</sym><def>buf</def> <sym>=</sym> <def></def><kwd>realloc</kwd><def></def><sym>(</sym><def>b</def><sym>-&gt;</sym><def>buf</def><sym>,</sym> <def>b</def><sym>-&gt;</sym><def>size</def><sym>)))</sym> <def></def><kwd>exit</kwd><def></def><sym>(</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>  <sym>}</sym><br />
<def></def>  <kwa>return</kwa> <def>b</def><sym>-&gt;</sym><def>buf</def><sym>+</sym><def>b</def><sym>-&gt;</sym><def>len</def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<dir>#define FB_MINREAD	(3&lt;&lt;16)</dir><br />
<def></def><br />
<com>/* Read all of a stdio stream into dst buffer. */</com><def></def><br />
<kwb>static size_t</kwb> <def></def><kwd>fb_readall</kwd><def></def><sym>(</sym><def>fbuf_t</def> <sym>*</sym><def>dst</def><sym>,</sym> <def></def><kwb>FILE</kwb> <def></def><sym>*</sym><def>fp</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>  <kwb>char</kwb> <def></def><sym>*</sym><def>dp</def><sym>;</sym><br />
<def></def>  <kwb>int</kwb> <def>n</def><sym>;</sym><br />
<def></def>  <kwa>for</kwa> <def></def><sym>(</sym><def>dp</def> <sym>=</sym> <def></def><kwd>fb_need</kwd><def></def><sym>(</sym><def>dst</def><sym>,</sym> <def>FB_MINREAD</def><sym>);</sym><br />
<def></def>       <sym>(</sym><def>n</def> <sym>=</sym> <def></def><kwd>fread</kwd><def></def><sym>(</sym><def>dp</def><sym>,</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>dst</def><sym>-&gt;</sym><def>size</def><sym>-</sym><def>dst</def><sym>-&gt;</sym><def>len</def><sym>,</sym> <def>fp</def><sym>)) &gt;</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>       dp</def> <sym>=</sym> <def></def><kwd>fb_need</kwd><def></def><sym>(</sym><def>dst</def><sym>,</sym> <def>FB_MINREAD</def><sym>))</sym> <def>dst</def><sym>-&gt;</sym><def>len</def> <sym>+=</sym> <def>n</def><sym>;</sym><br />
<def></def>  <kwa>if</kwa> <def></def><sym>(</sym><def></def><kwd>ferror</kwd><def></def><sym>(</sym><def>fp</def><sym>))</sym> <def></def><kwd>exit</kwd><def></def><sym>(</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>  <kwa>return</kwa> <def>dst</def><sym>-&gt;</sym><def>len</def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<com>/* Substitute pattern p with replacement r, copying from src to dst buffer. */</com><def></def><br />
<kwb>static size_t</kwb> <def></def><kwd>fb_subst</kwd><def></def><sym>(</sym><def>fbuf_t</def> <sym>*</sym><def>dst</def><sym>,</sym> <def>fbuf_t</def> <sym>*</sym><def>src</def><sym>,</sym> <def></def><kwb>const char</kwb> <def></def><sym>*</sym><def>p</def><sym>,</sym> <def></def><kwb>const char</kwb> <def></def><sym>*</sym><def>r</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def>  pcre</def> <sym>*</sym><def>re</def><sym>;</sym><br />
<def>  pcre_extra</def> <sym>*</sym><def>re_ex</def><sym>;</sym><br />
<def></def>  <kwb>const char</kwb> <def></def><sym>*</sym><def>re_e</def><sym>;</sym><br />
<def></def>  <kwb>char</kwb> <def></def><sym>*</sym><def>dp</def><sym>;</sym><br />
<def></def>  <kwb>int</kwb> <def>re_eo</def><sym>,</sym> <def>m</def><sym>[</sym><def></def><num>3</num><def></def><sym>],</sym> <def>pos</def><sym>,</sym> <def>rlen</def><sym>,</sym> <def>clen</def><sym>;</sym><br />
<def></def>  <kwa>if</kwa> <def></def><sym>(!(</sym><def>re</def> <sym>=</sym> <def></def><kwd>pcre_compile</kwd><def></def><sym>(</sym><def>p</def><sym>,</sym> <def>PCRE_CASELESS</def><sym>, &amp;</sym><def>re_e</def><sym>, &amp;</sym><def>re_eo</def><sym>,</sym> <def>NULL</def><sym>)))</sym> <def></def><kwd>exit</kwd><def></def><sym>(</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def>  re_ex</def> <sym>=</sym> <def></def><kwd>pcre_study</kwd><def></def><sym>(</sym><def>re</def><sym>,</sym> <def></def><num>0</num><def></def><sym>, &amp;</sym><def>re_e</def><sym>);</sym><br />
<def></def>  <kwa>for</kwa> <def></def><sym>(</sym><def>dst</def><sym>-&gt;</sym><def>len</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>rlen</def> <sym>=</sym> <def></def><kwd>strlen</kwd><def></def><sym>(</sym><def>r</def><sym>),</sym> <def>pos</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>       <kwd>pcre_exec</kwd><def></def><sym>(</sym><def>re</def><sym>,</sym> <def>re_ex</def><sym>,</sym> <def>src</def><sym>-&gt;</sym><def>buf</def><sym>,</sym> <def>src</def><sym>-&gt;</sym><def>len</def><sym>,</sym> <def>pos</def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>m</def><sym>,</sym> <def></def><num>3</num><def></def><sym>) &gt;=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>       pos</def> <sym>=</sym> <def>m</def><sym>[</sym><def></def><num>1</num><def></def><sym>]) {</sym><br />
<def>    clen</def> <sym>=</sym> <def>m</def><sym>[</sym><def></def><num>0</num><def></def><sym>]-</sym><def>pos</def><sym>;</sym><br />
<def>    dp</def> <sym>=</sym> <def></def><kwd>fb_need</kwd><def></def><sym>(</sym><def>dst</def><sym>,</sym> <def>clen</def><sym>+</sym><def>rlen</def><sym>);</sym><br />
<def>    dst</def><sym>-&gt;</sym><def>len</def> <sym>+=</sym> <def>clen</def><sym>+</sym><def>rlen</def><sym>;</sym><br />
<def></def>    <kwd>memcpy</kwd><def></def><sym>(</sym><def>dp</def><sym>,</sym> <def>src</def><sym>-&gt;</sym><def>buf</def><sym>+</sym><def>pos</def><sym>,</sym> <def>clen</def><sym>);</sym><br />
<def></def>    <kwd>memcpy</kwd><def></def><sym>(</sym><def>dp</def><sym>+</sym><def>clen</def><sym>,</sym> <def>r</def><sym>,</sym> <def>rlen</def><sym>);</sym><br />
<def></def>  <sym>}</sym><br />
<def>  clen</def> <sym>=</sym> <def>src</def><sym>-&gt;</sym><def>len</def><sym>-</sym><def>pos</def><sym>;</sym><br />
<def>  dp</def> <sym>=</sym> <def></def><kwd>fb_need</kwd><def></def><sym>(</sym><def>dst</def><sym>,</sym> <def>clen</def><sym>);</sym><br />
<def>  dst</def><sym>-&gt;</sym><def>len</def> <sym>+=</sym> <def>clen</def><sym>;</sym><br />
<def></def>  <kwd>memcpy</kwd><def></def><sym>(</sym><def>dp</def><sym>,</sym> <def>src</def><sym>-&gt;</sym><def>buf</def><sym>+</sym><def>pos</def><sym>,</sym> <def>clen</def><sym>);</sym><br />
<def></def>  <kwa>return</kwa> <def>dst</def><sym>-&gt;</sym><def>len</def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<com>/* Count all matches with pattern p in src buffer. */</com><def></def><br />
<kwb>static int</kwb> <def></def><kwd>fb_countmatches</kwd><def></def><sym>(</sym><def>fbuf_t</def> <sym>*</sym><def>src</def><sym>,</sym> <def></def><kwb>const char</kwb> <def></def><sym>*</sym><def>p</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def>  pcre</def> <sym>*</sym><def>re</def><sym>;</sym><br />
<def>  pcre_extra</def> <sym>*</sym><def>re_ex</def><sym>;</sym><br />
<def></def>  <kwb>const char</kwb> <def></def><sym>*</sym><def>re_e</def><sym>;</sym><br />
<def></def>  <kwb>int</kwb> <def>re_eo</def><sym>,</sym> <def>m</def><sym>[</sym><def></def><num>3</num><def></def><sym>],</sym> <def>pos</def><sym>,</sym> <def>count</def><sym>;</sym><br />
<def></def>  <kwa>if</kwa> <def></def><sym>(!(</sym><def>re</def> <sym>=</sym> <def></def><kwd>pcre_compile</kwd><def></def><sym>(</sym><def>p</def><sym>,</sym> <def>PCRE_CASELESS</def><sym>, &amp;</sym><def>re_e</def><sym>, &amp;</sym><def>re_eo</def><sym>,</sym> <def>NULL</def><sym>)))</sym> <def></def><kwd>exit</kwd><def></def><sym>(</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def>  re_ex</def> <sym>=</sym> <def></def><kwd>pcre_study</kwd><def></def><sym>(</sym><def>re</def><sym>,</sym> <def></def><num>0</num><def></def><sym>, &amp;</sym><def>re_e</def><sym>);</sym><br />
<def></def>  <kwa>for</kwa> <def></def><sym>(</sym><def>count</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>pos</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>       <kwd>pcre_exec</kwd><def></def><sym>(</sym><def>re</def><sym>,</sym> <def>re_ex</def><sym>,</sym> <def>src</def><sym>-&gt;</sym><def>buf</def><sym>,</sym> <def>src</def><sym>-&gt;</sym><def>len</def><sym>,</sym> <def>pos</def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>m</def><sym>,</sym> <def></def><num>3</num><def></def><sym>) &gt;=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>       pos</def> <sym>=</sym> <def>m</def><sym>[</sym><def></def><num>1</num><def></def><sym>])</sym> <def>count</def><sym>++;</sym><br />
<def></def>  <kwa>return</kwa> <def>count</def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>static const char</kwb> <def></def><sym>*</sym><def>variants</def><sym>[] = {</sym><br />
<def></def>  <str>&quot;agggtaaa|tttaccct&quot;</str><def></def><sym>,</sym>         <def></def><str>&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</str><def></def><sym>,</sym><br />
<def></def>  <str>&quot;a[act]ggtaaa|tttacc[agt]t&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;ag[act]gtaaa|tttac[agt]ct&quot;</str><def></def><sym>,</sym><br />
<def></def>  <str>&quot;agg[act]taaa|ttta[agt]cct&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</str><def></def><sym>,</sym><br />
<def></def>  <str>&quot;agggt[cgt]aa|tt[acg]accct&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;agggta[cgt]a|t[acg]taccct&quot;</str><def></def><sym>,</sym><br />
<def></def>  <str>&quot;agggtaa[cgt]|[acg]ttaccct&quot;</str><def></def><sym>,</sym> <def>NULL</def><br />
<sym>};</sym><br />
<def></def><br />
<kwb>static const char</kwb> <def></def><sym>*</sym><def>subst</def><sym>[] = {</sym><br />
<def></def>  <str>&quot;B&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(c|g|t)&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;D&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(a|g|t)&quot;</str><def></def><sym>,</sym>   <def></def><str>&quot;H&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(a|c|t)&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;K&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(g|t)&quot;</str><def></def><sym>,</sym><br />
<def></def>  <str>&quot;M&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(a|c)&quot;</str><def></def><sym>,</sym>   <def></def><str>&quot;N&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(a|c|g|t)&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;R&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(a|g)&quot;</str><def></def><sym>,</sym>   <def></def><str>&quot;S&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(c|g)&quot;</str><def></def><sym>,</sym><br />
<def></def>  <str>&quot;V&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(a|c|g)&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;W&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(a|t)&quot;</str><def></def><sym>,</sym>     <def></def><str>&quot;Y&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(c|t)&quot;</str><def></def><sym>,</sym>   <def>NULL</def><br />
<sym>};</sym><br />
<def></def><br />
<kwb>int</kwb> <def></def><kwd>main</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>argc</def><sym>,</sym> <def></def><kwb>char</kwb> <def></def><sym>**</sym><def>argv</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def>  fbuf_t seq</def><sym>[</sym><def></def><num>2</num><def></def><sym>];</sym><br />
<def></def>  <kwb>const char</kwb> <def></def><sym>**</sym><def>pp</def><sym>;</sym><br />
<def></def>  <kwb>size_t</kwb> <def>ilen</def><sym>,</sym> <def>clen</def><sym>,</sym> <def>slen</def><sym>;</sym><br />
<def></def>  <kwb>int</kwb> <def>flip</def><sym>;</sym><br />
<def></def>  <kwd>fb_init</kwd><def></def><sym>(&amp;</sym><def>seq</def><sym>[</sym><def></def><num>0</num><def></def><sym>]);</sym><br />
<def></def>  <kwd>fb_init</kwd><def></def><sym>(&amp;</sym><def>seq</def><sym>[</sym><def></def><num>1</num><def></def><sym>]);</sym><br />
<def>  ilen</def> <sym>=</sym> <def></def><kwd>fb_readall</kwd><def></def><sym>(&amp;</sym><def>seq</def><sym>[</sym><def></def><num>0</num><def></def><sym>],</sym> <def>stdin</def><sym>);</sym><br />
<def>  clen</def> <sym>=</sym> <def></def><kwd>fb_subst</kwd><def></def><sym>(&amp;</sym><def>seq</def><sym>[</sym><def></def><num>1</num><def></def><sym>], &amp;</sym><def>seq</def><sym>[</sym><def></def><num>0</num><def></def><sym>],</sym> <def></def><str>&quot;&gt;.*|</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;&quot;</str><def></def><sym>);</sym><br />
<def></def>  <kwa>for</kwa> <def></def><sym>(</sym><def>pp</def> <sym>=</sym> <def>variants</def><sym>; *</sym><def>pp</def><sym>;</sym> <def>pp</def><sym>++)</sym><br />
<def></def>    <kwd>printf</kwd><def></def><sym>(</sym><def></def><str>&quot;%s %d</str><esc>\n</esc><str>&quot;</str><def></def><sym>, *</sym><def>pp</def><sym>,</sym> <def></def><kwd>fb_countmatches</kwd><def></def><sym>(&amp;</sym><def>seq</def><sym>[</sym><def></def><num>1</num><def></def><sym>], *</sym><def>pp</def><sym>));</sym><br />
<def></def>  <kwa>for</kwa> <def></def><sym>(</sym><def>slen</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>flip</def> <sym>=</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>pp</def> <sym>=</sym> <def>subst</def><sym>; *</sym><def>pp</def><sym>;</sym> <def>pp</def> <sym>+=</sym> <def></def><num>2</num><def></def><sym>,</sym> <def>flip</def> <sym>=</sym> <def></def><num>1</num><def></def><sym>-</sym><def>flip</def><sym>)</sym><br />
<def>    slen</def> <sym>=</sym> <def></def><kwd>fb_subst</kwd><def></def><sym>(&amp;</sym><def>seq</def><sym>[</sym><def></def><num>1</num><def></def><sym>-</sym><def>flip</def><sym>], &amp;</sym><def>seq</def><sym>[</sym><def>flip</def><sym>], *</sym><def>pp</def><sym>,</sym> <def>pp</def><sym>[</sym><def></def><num>1</num><def></def><sym>]);</sym><br />
<def></def>  <kwd>printf</kwd><def></def><sym>(</sym><def></def><str>&quot;</str><esc>\n</esc><str>%zu</str><esc>\n</esc><str>%zu</str><esc>\n</esc><str>%zu</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def>ilen</def><sym>,</sym> <def>clen</def><sym>,</sym> <def>slen</def><sym>);</sym><br />
<def></def>  <kwa>return</kwa> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
</source>
