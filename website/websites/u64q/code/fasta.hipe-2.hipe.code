<source>
<def></def><slc>% The Computer Language Benchmarks Game</slc><br />
<def></def><slc>% http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>% contributed by Fredrik Svahn</slc><br />
<def></def><br />
<sym>-</sym><def></def><kwa>module</kwa><def></def><sym>(</sym><def>fasta</def><sym>).</sym><br />
<def></def><sym>-</sym><def></def><kwa>export</kwa><def></def><sym>([</sym><def>main</def><sym>/</sym><def></def><num>1</num><def></def><sym>]).</sym><br />
<def></def><br />
<sym>-</sym><def></def><kwa>define</kwa><def></def><sym>(</sym><def>LINELEN</def><sym>,</sym> <def></def><num>60</num><def></def><sym>).</sym><br />
<def></def><sym>-</sym><def></def><kwa>define</kwa><def></def><sym>(</sym><def>PREC</def><sym>,</sym><def></def><num>10000000</num><def></def><sym>).</sym><br />
<def></def><br />
<sym>-</sym><def></def><kwa>define</kwa><def></def><sym>(</sym><def>IM</def><sym>,</sym> <def></def><num>139968</num><def></def><sym>).</sym><br />
<def></def><sym>-</sym><def></def><kwa>define</kwa><def></def><sym>(</sym><def>IC</def><sym>,</sym> <def></def><num>29573</num><def></def><sym>).</sym><br />
<def></def><sym>-</sym><def></def><kwa>define</kwa><def></def><sym>(</sym><def>IA</def><sym>,</sym> <def></def><num>3877</num><def></def><sym>).</sym><br />
<def></def><br />
<sym>-</sym><def></def><kwa>define</kwa><def></def><sym>(</sym><def>ALU</def><sym>,&lt;&lt;</sym><def></def><str>&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</str><def></def><sym>&gt;&gt;).</sym><br />
<def></def><br />
<sym>-</sym><def></def><kwa>define</kwa><def></def><sym>(</sym><def>IUB</def><sym>, [{</sym><def>$a</def><sym>,</sym> <def></def><num>0.27</num><def></def><sym>}, {</sym><def>$c</def><sym>,</sym> <def></def><num>0.12</num><def></def><sym>}, {</sym><def>$g</def><sym>,</sym> <def></def><num>0.12</num><def></def><sym>}, {</sym><def>$t</def><sym>,</sym> <def></def><num>0.27</num><def></def><sym>}, {</sym><def>$B</def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>}, {</sym><def>$D</def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>}, {</sym><def>$H</def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>}, {</sym><def>$K</def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>}, {</sym><def>$M</def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>}, {</sym><def>$N</def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>}, {</sym><def>$R</def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>}, {</sym><def>$S</def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>}, {</sym><def>$V</def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>}, {</sym><def>$W</def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>}, {</sym><def>$Y</def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>}]).</sym><br />
<def></def><br />
<sym>-</sym><def></def><kwa>define</kwa><def></def><sym>(</sym><def>HS</def><sym>, [{</sym><def>$a</def><sym>,</sym> <def></def><num>0.3029549426680</num><def></def><sym>}, {</sym><def>$c</def><sym>,</sym> <def></def><num>0.1979883004921</num><def></def><sym>}, {</sym><def>$g</def><sym>,</sym> <def></def><num>0.1975473066391</num><def></def><sym>}, {</sym><def>$t</def><sym>,</sym> <def></def><num>0.3015094502008</num><def></def><sym>}]).</sym><br />
<def></def><br />
<kwd>main</kwd><def></def><sym>([</sym><def>Arg</def><sym>]) -&gt;</sym><br />
<def></def>    <kwb>put</kwb><def></def><sym>(</sym><def>port</def><sym>,</sym> <def></def><kwb>open_port</kwb><def></def><sym>({</sym><def>fd</def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>1</num><def></def><sym>}, [</sym><def>out</def><sym>,</sym> <def></def><kwb>binary</kwb><def></def><sym>])),</sym><br />
<def><br />
    Seed</def> <sym>=</sym> <def></def><num>42</num><def></def><sym>,</sym><br />
<def>    N</def> <sym>=</sym> <def></def><kwb>list_to_integer</kwb><def></def><sym>(</sym><def>Arg</def><sym>),</sym><br />
<def></def><br />
    <kwd>print</kwd><def></def><sym>(&lt;&lt;</sym><def></def><str>&quot;&gt;ONE Homo sapiens alu</str><esc>\</esc><str>n&quot;</str><def></def><sym>&gt;&gt;),</sym><br />
<def></def>    <kwd>cycle</kwd><def></def><sym>(?</sym><def>ALU</def><sym>,</sym> <def>N</def><sym>*</sym><def></def><num>2</num><def></def><sym>, [],</sym> <def></def><num>0</num><def></def><sym>),</sym><br />
<def></def><br />
    <kwd>print</kwd><def></def><sym>(&lt;&lt;</sym><def></def><str>&quot;&gt;TWO IUB ambiguity codes</str><esc>\</esc><str>n&quot;</str><def></def><sym>&gt;&gt;),</sym><br />
<def>    NewSeed</def> <sym>=</sym> <def></def><kwd>rand</kwd><def></def><sym>(</sym><def></def><kwd>mk_list</kwd><def></def><sym>(?</sym><def>IUB</def><sym>), ?</sym><def>LINELEN</def><sym>,</sym> <def>N</def><sym>*</sym><def></def><num>3</num><def></def><sym>, [],</sym> <def>Seed</def><sym>, [],</sym> <def></def><num>0</num><def></def><sym>),</sym><br />
<def></def><br />
    <kwd>print</kwd><def></def><sym>(&lt;&lt;</sym><def></def><str>&quot;&gt;THREE Homo sapiens frequency</str><esc>\</esc><str>n&quot;</str><def></def><sym>&gt;&gt;),</sym><br />
<def></def>    <kwd>rand</kwd><def></def><sym>(</sym><def></def><kwd>mk_list</kwd><def></def><sym>(?</sym><def>HS</def><sym>), ?</sym><def>LINELEN</def><sym>,</sym> <def>N</def><sym>*</sym><def></def><num>5</num><def></def><sym>, [],</sym> <def>NewSeed</def><sym>, [],</sym><def></def><num>0</num><def></def><sym>),</sym><br />
<def></def>    <kwb>halt</kwb><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>).</sym><br />
<def></def><br />
<slc>%Newline every LINELEN char, however io is expensive so we want to buffer</slc><br />
<def></def><slc>%up a few lines before printing. 16 lines in buffer seem to be fastest.</slc><br />
<def></def><kwd>cycle</kwd><def></def><sym>(</sym><def>Seq</def><sym>,</sym> <def>Total</def><sym>,</sym> <def>RowBuf</def><sym>,</sym> <def>_</def><sym>)</sym> <def></def><kwa>when</kwa> <def>Total</def> <sym>&lt; ?</sym><def>LINELEN</def> <sym>-&gt;</sym><br />
<def></def>    <sym>&lt;&lt;</sym><def>Seq1</def><sym>:</sym><def>Total</def><sym>/</sym><def></def><kwb>binary</kwb><def></def><sym>,</sym> <def>_</def><sym>/</sym><def></def><kwb>binary</kwb><def></def><sym>&gt;&gt; = &lt;&lt;</sym><def>Seq</def><sym>/</sym><def></def><kwb>binary</kwb><def></def><sym>, ?</sym><def>ALU</def><sym>/</sym><def></def><kwb>binary</kwb><def></def><sym>&gt;&gt;,</sym><br />
<def></def>    <kwd>reverse_print</kwd><def></def><sym>(</sym><def>RowBuf</def><sym>),</sym><br />
<def></def>    <kwd>print</kwd><def></def><sym>(&lt;&lt;</sym><def>Seq1</def><sym>/</sym><def></def><kwb>binary</kwb><def></def><sym>,</sym> <def></def><str>&quot;</str><esc>\</esc><str>n&quot;</str><def></def><sym>&gt;&gt;);</sym><br />
<def></def><br />
<kwd>cycle</kwd><def></def><sym>(</sym><def>Seq</def><sym>,</sym> <def>Total</def><sym>,</sym> <def>RowBuf</def><sym>,</sym> <def>RowBufSize</def><sym>)</sym> <def></def><kwa>when</kwa> <def>RowBufSize</def> <sym>==</sym> <def></def><num>16</num> <def></def><sym>-&gt;</sym><br />
<def></def>    <kwd>reverse_print</kwd><def></def><sym>(</sym><def>RowBuf</def><sym>),</sym><br />
<def></def>    <kwd>cycle</kwd><def></def><sym>(</sym><def>Seq</def><sym>,</sym> <def>Total</def><sym>, [],</sym> <def></def><num>0</num><def></def><sym>);</sym><br />
<def></def><br />
<kwd>cycle</kwd><def></def><sym>(</sym><def>Seq</def><sym>,</sym> <def>Total</def><sym>,</sym> <def>RowBuf</def><sym>,</sym> <def>RowBufSize</def> <sym>)</sym> <def></def><kwa>when</kwa> <def></def><kwb>size</kwb><def></def><sym>(</sym><def>Seq</def><sym>) &lt; ?</sym><def>LINELEN</def> <sym>-&gt;</sym><br />
<def></def>    <sym>&lt;&lt;</sym><def>Seq1</def><sym>:?</sym><def>LINELEN</def><sym>/</sym><def></def><kwb>binary</kwb><def></def><sym>,</sym> <def>Seq2</def><sym>/</sym><def></def><kwb>binary</kwb><def></def><sym>&gt;&gt; = &lt;&lt;</sym><def>Seq</def><sym>/</sym><def></def><kwb>binary</kwb><def></def><sym>, ?</sym><def>ALU</def><sym>/</sym><def></def><kwb>binary</kwb><def></def><sym>&gt;&gt;,</sym><br />
<def></def>    <kwd>cycle</kwd><def></def><sym>(</sym><def>Seq2</def><sym>,</sym> <def>Total</def><sym>-?</sym><def>LINELEN</def><sym>, [&lt;&lt;</sym><def>Seq1</def><sym>/</sym><def></def><kwb>binary</kwb><def></def><sym>,</sym><def></def><str>&quot;</str><esc>\</esc><str>n&quot;</str><def></def><sym>&gt;&gt;|</sym> <def>RowBuf</def><sym>],</sym> <def>RowBufSize</def><sym>+</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def></def><br />
<kwd>cycle</kwd><def></def><sym>(</sym><def>Seq</def><sym>,</sym> <def>Total</def><sym>,</sym> <def>RowBuf</def><sym>,</sym> <def>RowBufSize</def><sym>) -&gt;</sym><br />
<def></def>    <sym>&lt;&lt;</sym><def>Seq1</def><sym>:?</sym><def>LINELEN</def><sym>/</sym><def></def><kwb>binary</kwb><def></def><sym>,</sym> <def>Seq2</def><sym>/</sym><def></def><kwb>binary</kwb><def></def><sym>&gt;&gt; =</sym> <def>Seq</def><sym>,</sym><br />
<def></def>    <kwd>cycle</kwd><def></def><sym>(</sym><def>Seq2</def><sym>,</sym> <def>Total</def><sym>-?</sym><def>LINELEN</def><sym>, [&lt;&lt;</sym><def>Seq1</def><sym>/</sym><def></def><kwb>binary</kwb><def></def><sym>,</sym><def></def><str>&quot;</str><esc>\</esc><str>n&quot;</str><def></def><sym>&gt;&gt;|</sym> <def>RowBuf</def><sym>],</sym> <def>RowBufSize</def><sym>+</sym><def></def><num>1</num><def></def><sym>).</sym><br />
<def></def><br />
<kwd>rand</kwd><def></def><sym>(</sym><def>_</def><sym>,</sym> <def>_</def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>List</def><sym>,</sym> <def>Seed</def><sym>,</sym> <def>RowBuf</def><sym>,</sym> <def>_</def><sym>) -&gt;</sym><br />
<def>    LastLine</def> <sym>=</sym> <def>lists</def><sym>:</sym><def></def><kwd>reverse</kwd><def></def><sym>([</sym><def></def><str>&quot;</str><esc>\</esc><str>n&quot;</str><def></def> <sym>|</sym> <def>List</def><sym>]),</sym><br />
<def></def>    <kwd>reverse_print</kwd><def></def><sym>([</sym><def>LastLine</def> <sym>|</sym> <def>RowBuf</def><sym>]),</sym><br />
<def>    Seed</def><sym>;</sym><br />
<def></def><br />
<kwd>rand</kwd><def></def><sym>(</sym><def>Freq</def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>Total</def><sym>,</sym> <def>List</def><sym>,</sym> <def>Seed</def><sym>,</sym> <def>RowBuf</def><sym>,</sym> <def>RowBufSize</def><sym>)</sym> <def></def><kwa>when</kwa> <def>RowBufSize</def> <sym>==</sym> <def></def><num>16</num> <def></def><sym>-&gt;</sym><br />
<def>    Line</def> <sym>=</sym> <def>lists</def><sym>:</sym><def></def><kwd>reverse</kwd><def></def><sym>([</sym><def></def><str>&quot;</str><esc>\</esc><str>n&quot;</str><def></def> <sym>|</sym> <def>List</def><sym>]),</sym><br />
<def></def>    <kwd>reverse_print</kwd><def></def><sym>([</sym><def>Line</def> <sym>|</sym> <def>RowBuf</def><sym>]),</sym><br />
<def></def>    <kwd>rand</kwd><def></def><sym>(</sym><def>Freq</def><sym>, ?</sym><def>LINELEN</def><sym>,</sym> <def>Total</def><sym>, [],</sym> <def>Seed</def><sym>, [],</sym> <def></def><num>0</num><def></def><sym>);</sym><br />
<def></def><br />
<kwd>rand</kwd><def></def><sym>(</sym><def>Freq</def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>Total</def><sym>,</sym> <def>List</def><sym>,</sym> <def>Seed</def><sym>,</sym> <def>RowBuf</def><sym>,</sym> <def>RowBufSize</def><sym>) -&gt;</sym><br />
<def>    Line</def> <sym>=</sym> <def>lists</def><sym>:</sym><def></def><kwd>reverse</kwd><def></def><sym>([</sym><def></def><str>&quot;</str><esc>\</esc><str>n&quot;</str><def></def> <sym>|</sym> <def>List</def><sym>]),</sym><br />
<def></def>    <kwd>rand</kwd><def></def><sym>(</sym><def>Freq</def><sym>, ?</sym><def>LINELEN</def><sym>,</sym> <def>Total</def><sym>, [],</sym> <def>Seed</def><sym>, [</sym> <def>Line</def> <sym>|</sym> <def>RowBuf</def><sym>],</sym> <def>RowBufSize</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def></def><br />
<kwd>rand</kwd><def></def><sym>(</sym><def>Freq</def><sym>,</sym> <def>LineLen</def><sym>,</sym> <def>Total</def><sym>,</sym> <def>List</def><sym>,</sym> <def>Seed</def><sym>,</sym> <def>RowBuf</def><sym>,</sym> <def>RowBufSize</def><sym>) -&gt;</sym><br />
<def></def>    <sym>{</sym><def>Rand</def><sym>,</sym> <def>NewSeed</def><sym>} =</sym> <def></def><kwd>random</kwd><def></def><sym>(</sym><def>Seed</def><sym>),</sym><br />
<def>    Base</def> <sym>=</sym> <def></def><kwd>get_base</kwd><def></def><sym>(</sym><def>Freq</def><sym>,</sym> <def>Rand</def><sym>),</sym><br />
<def></def>    <kwd>rand</kwd><def></def><sym>(</sym><def>Freq</def><sym>,</sym> <def>LineLen</def><sym>-</sym><def></def><num>1</num><def></def><sym>,</sym> <def>Total</def><sym>-</sym><def></def><num>1</num><def></def><sym>, [</sym><def>Base</def> <sym>|</sym> <def>List</def><sym>],</sym> <def>NewSeed</def><sym>,</sym> <def>RowBuf</def><sym>,</sym> <def>RowBufSize</def><sym>).</sym><br />
<def></def><br />
<kwd>random</kwd><def></def><sym>(</sym><def>Seed</def><sym>) -&gt;</sym><br />
<def>    NewSeed</def> <sym>= (</sym><def>Seed</def> <sym>* ?</sym><def>IA</def> <sym>+ ?</sym><def>IC</def><sym>)</sym> <def></def><kwa>rem</kwa> <def></def><sym>?</sym><def>IM</def><sym>,</sym><br />
<def></def>    <sym>{</sym><def></def><kwb>trunc</kwb><def></def><sym>(</sym><def>NewSeed</def> <sym>/ ?</sym><def>IM</def> <sym>* ?</sym><def>PREC</def><sym>),</sym> <def>NewSeed</def><sym>}.</sym><br />
<def></def><br />
<kwd>get_base</kwd><def></def><sym>([{</sym><def>Base</def><sym>,</sym> <def>_</def><sym>}],</sym> <def>_P</def><sym>) -&gt;</sym> <def>Base</def><sym>;</sym><br />
<def></def><kwd>get_base</kwd><def></def><sym>([{</sym><def>Base</def><sym>,</sym> <def>Freq</def><sym>}|</sym><def>_</def><sym>],</sym> <def>P</def><sym>)</sym> <def></def><kwa>when</kwa> <def>P</def> <sym>&lt;</sym> <def>Freq</def> <sym>-&gt;</sym> <def>Base</def><sym>;</sym><br />
<def></def><kwd>get_base</kwd><def></def><sym>([{</sym><def>_</def><sym>,</sym> <def>_</def><sym>} |</sym> <def>Rest</def><sym>],</sym> <def>P</def><sym>) -&gt;</sym> <def></def><kwd>get_base</kwd><def></def><sym>(</sym><def>Rest</def><sym>,</sym> <def>P</def><sym>).</sym><br />
<def></def><br />
<slc>%Floats are expensive and we want to avoid dealing with floats in get_base/1.</slc><br />
<def></def><slc>%Precalculate list of accumulated integers</slc><br />
<def></def><kwd>mk_list</kwd><def></def><sym>(</sym><def>Probs</def><sym>)-&gt;</sym> <def>lists</def><sym>:</sym><def></def><kwd>reverse</kwd><def></def><sym>(</sym><def></def><kwd>mk_list</kwd><def></def><sym>(</sym><def>Probs</def><sym>,</sym> <def></def><num>0</num><def></def><sym>, [])).</sym><br />
<def></def><kwd>mk_list</kwd><def></def><sym>([{</sym><def>B</def><sym>,</sym> <def>P</def><sym>}],</sym> <def>AccP</def><sym>,</sym> <def>AccL</def><sym>)-&gt; [{</sym><def>B</def><sym>,</sym> <def>AccP</def> <sym>+</sym> <def></def><kwb>trunc</kwb><def></def><sym>(</sym><def>P</def><sym>*?</sym><def>PREC</def><sym>)}|</sym> <def>AccL</def><sym>];</sym><br />
<def></def><kwd>mk_list</kwd><def></def><sym>([{</sym><def>B</def><sym>,</sym> <def>P</def><sym>}|</sym><def>T</def><sym>],</sym> <def>AccP</def><sym>,</sym> <def>AccL</def><sym>)-&gt;</sym><br />
<def></def>    <kwd>mk_list</kwd><def></def><sym>(</sym><def>T</def><sym>,</sym> <def>AccP</def> <sym>+</sym> <def></def><kwb>trunc</kwb><def></def><sym>(</sym><def>P</def><sym>*?</sym><def>PREC</def><sym>), [{</sym><def>B</def><sym>,</sym> <def>AccP</def> <sym>+</sym> <def></def><kwb>trunc</kwb><def></def><sym>(</sym><def>P</def><sym>*?</sym><def>PREC</def><sym>)}|</sym> <def>AccL</def><sym>]).</sym><br />
<def></def><br />
<kwd>print</kwd><def></def><sym>(</sym><def>List</def><sym>) -&gt;</sym> <def></def><kwd>port_command</kwd><def></def><sym>(</sym><def></def><kwb>get</kwb><def></def><sym>(</sym><def>port</def><sym>),</sym> <def>List</def><sym>).</sym><br />
<def></def><kwd>reverse_print</kwd><def></def><sym>(</sym><def>List</def><sym>) -&gt;</sym> <def></def><kwd>port_command</kwd><def></def><sym>(</sym><def></def><kwb>get</kwb><def></def><sym>(</sym><def>port</def><sym>),</sym> <def>lists</def><sym>:</sym><def></def><kwd>reverse</kwd><def></def><sym>(</sym><def>List</def><sym>)).</sym><def></def><br />
</source>
