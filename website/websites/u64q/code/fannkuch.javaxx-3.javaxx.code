<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Klaus Friedel</span>
<span class="hl com"></span>
<span class="hl com">   will only shine on a 64Bit JVM</span>
<span class="hl com">*/</span>

<span class="hl kwa">public class</span> fannkuch <span class="hl sym">{</span>
  <span class="hl kwa">final static class</span> Permutation<span class="hl sym">{</span>
    <span class="hl kwa">private</span> <span class="hl kwb">long</span> p<span class="hl sym">;</span>
    <span class="hl kwa">private</span> <span class="hl kwb">int</span> n<span class="hl sym">;</span>

    <span class="hl kwd">Permutation</span><span class="hl sym">(</span><span class="hl kwb">int</span> n<span class="hl sym">) {</span>
      <span class="hl kwa">this</span><span class="hl sym">.</span>n <span class="hl sym">=</span> n<span class="hl sym">;</span>
    <span class="hl sym">}</span>

    <span class="hl kwb">void</span> <span class="hl kwd">copyTo</span><span class="hl sym">(</span>Permutation p2<span class="hl sym">){</span>
      p2<span class="hl sym">.</span>n <span class="hl sym">=</span> n<span class="hl sym">;</span>
      p2<span class="hl sym">.</span>p <span class="hl sym">=</span> p<span class="hl sym">;</span>
    <span class="hl sym">}</span>

    <span class="hl kwb">void</span> <span class="hl kwd">init</span><span class="hl sym">(){</span>
      <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> n<span class="hl sym">;</span> i<span class="hl sym">++)</span> <span class="hl kwd">set</span><span class="hl sym">(</span>i<span class="hl sym">,</span> i<span class="hl sym">);</span>
    <span class="hl sym">}</span>

    <span class="hl kwb">void</span> <span class="hl kwd">set</span><span class="hl sym">(</span><span class="hl kwb">int</span> idx<span class="hl sym">,</span> <span class="hl kwb">int</span> value<span class="hl sym">){</span>
      <span class="hl kwb">int</span> shift <span class="hl sym">=</span> idx <span class="hl sym">*</span> <span class="hl num">4</span><span class="hl sym">;</span>
      p <span class="hl sym">&amp;=</span> ~<span class="hl sym">(</span><span class="hl num">0xF</span>L <span class="hl sym">&lt;&lt;</span> shift<span class="hl sym">);</span>
      p <span class="hl sym">|= ((</span><span class="hl kwb">long</span><span class="hl sym">)</span>value<span class="hl sym">) &lt;&lt;</span> shift<span class="hl sym">;</span>
    <span class="hl sym">}</span>

    <span class="hl kwb">int</span> <span class="hl kwd">get</span><span class="hl sym">(</span><span class="hl kwb">int</span> idx<span class="hl sym">){</span>
      <span class="hl kwb">int</span> shift <span class="hl sym">=</span> idx <span class="hl sym">*</span> <span class="hl num">4</span><span class="hl sym">;</span>
      <span class="hl kwa">return</span> <span class="hl sym">(</span><span class="hl kwb">int</span><span class="hl sym">)(</span>p <span class="hl sym">&gt;&gt;</span> shift<span class="hl sym">) &amp;</span> <span class="hl num">0xF</span><span class="hl sym">;</span>
    <span class="hl sym">}</span>

    <span class="hl kwb">int</span> <span class="hl kwd">first</span><span class="hl sym">(){</span>
      <span class="hl kwa">return</span> <span class="hl sym">(</span><span class="hl kwb">int</span><span class="hl sym">)</span>p <span class="hl sym">&amp;</span> <span class="hl num">0xF</span><span class="hl sym">;</span>
    <span class="hl sym">}</span>

    <span class="hl slc">// rotate digit 0...r by one</span>
    <span class="hl kwb">void</span> <span class="hl kwd">rotate</span><span class="hl sym">(</span><span class="hl kwa">final</span> <span class="hl kwb">int</span> r<span class="hl sym">){</span>
      <span class="hl kwa">final</span> <span class="hl kwb">long</span> mask <span class="hl sym">= (</span><span class="hl num">16L</span> <span class="hl sym">&lt;&lt;</span> <span class="hl num">4</span><span class="hl sym">*</span>r<span class="hl sym">) -</span> <span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl kwb">long</span> x <span class="hl sym">= (</span>p <span class="hl sym">&amp;</span> mask<span class="hl sym">) &gt;&gt;&gt;</span> <span class="hl num">4</span><span class="hl sym">;</span>
      x <span class="hl sym">|= (</span>p <span class="hl sym">&amp;</span> <span class="hl num">0xF</span>L<span class="hl sym">) &lt;&lt; (</span><span class="hl num">4</span><span class="hl sym">*</span>r<span class="hl sym">);</span>
      p <span class="hl sym">= (</span>p <span class="hl sym">&amp;</span> ~mask<span class="hl sym">) |</span> x<span class="hl sym">;</span>
    <span class="hl sym">}</span>

    <span class="hl kwb">void</span> <span class="hl kwd">reverse</span><span class="hl sym">(</span><span class="hl kwa">final</span> <span class="hl kwb">int</span> count<span class="hl sym">){</span>
      <span class="hl slc">// do a complete reversal first</span>
      <span class="hl kwb">long</span> r <span class="hl sym">=</span> p<span class="hl sym">;</span>
      r <span class="hl sym">= (</span>r <span class="hl sym">&amp;</span> <span class="hl num">0x0F0F0F0F0F0F0F0F</span>L<span class="hl sym">) &lt;&lt;</span> <span class="hl num">4</span>  <span class="hl sym">| (</span>r <span class="hl sym">&amp;</span> <span class="hl num">0xF0F0F0F0F0F0F0F0</span>L<span class="hl sym">) &gt;&gt;&gt;</span> <span class="hl num">4</span><span class="hl sym">;</span>
      r <span class="hl sym">= (</span>r <span class="hl sym">&amp;</span> <span class="hl num">0x00FF00FF00FF00FF</span>L<span class="hl sym">) &lt;&lt;</span> <span class="hl num">8</span>  <span class="hl sym">| (</span>r <span class="hl sym">&amp;</span> <span class="hl num">0xFF00FF00FF00FF00</span>L<span class="hl sym">) &gt;&gt;&gt;</span> <span class="hl num">8</span><span class="hl sym">;</span>
      r <span class="hl sym">= (</span>r <span class="hl sym">&amp;</span> <span class="hl num">0x0000FFFF0000FFFF</span>L<span class="hl sym">) &lt;&lt;</span> <span class="hl num">16</span> <span class="hl sym">| (</span>r <span class="hl sym">&amp;</span> <span class="hl num">0xFFFF0000FFFF0000</span>L<span class="hl sym">) &gt;&gt;&gt;</span> <span class="hl num">16</span><span class="hl sym">;</span>
      r <span class="hl sym">= (</span>r <span class="hl sym">&amp;</span> <span class="hl num">0x00000000FFFFFFFF</span>L<span class="hl sym">) &lt;&lt;</span> <span class="hl num">32</span> <span class="hl sym">| (</span>r <span class="hl sym">&amp;</span> <span class="hl num">0xFFFFFFFF00000000</span>L<span class="hl sym">) &gt;&gt;&gt;</span> <span class="hl num">32</span><span class="hl sym">;</span>
      <span class="hl slc">// select the relevant part:</span>
      <span class="hl kwa">final</span> <span class="hl kwb">int</span> shift <span class="hl sym">=</span> <span class="hl num">4</span><span class="hl sym">*(</span><span class="hl num">16</span> <span class="hl sym">-</span> count<span class="hl sym">);</span>
      r <span class="hl sym">&gt;&gt;=</span> shift<span class="hl sym">;</span>
      <span class="hl slc">// replace count of them:</span>
      <span class="hl kwa">final</span> <span class="hl kwb">long</span> mask <span class="hl sym">= (</span><span class="hl num">1L</span> <span class="hl sym">&lt;&lt;</span> <span class="hl num">4</span><span class="hl sym">*</span>count<span class="hl sym">) -</span> <span class="hl num">1</span><span class="hl sym">;</span>
      p <span class="hl sym">= (</span>p <span class="hl sym">&amp;</span> ~mask<span class="hl sym">) | (</span>r <span class="hl sym">&amp;</span> mask<span class="hl sym">);</span>
    <span class="hl sym">}</span>

    <span class="hl kwb">int</span> <span class="hl kwd">flipUntilDone</span><span class="hl sym">(){</span>
      <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwb">int</span> flips <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;;</span>flips<span class="hl sym">++){</span>
        <span class="hl kwa">final</span> <span class="hl kwb">int</span> f <span class="hl sym">=</span> <span class="hl kwd">first</span><span class="hl sym">();</span>
        <span class="hl kwa">if</span><span class="hl sym">(</span>f <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">return</span> flips<span class="hl sym">;</span>
        <span class="hl kwd">reverse</span><span class="hl sym">(</span>f <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">);</span>
      <span class="hl sym">}</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">public</span> <span class="hl kwc">String</span> <span class="hl kwd">toString</span><span class="hl sym">() {</span>
      <span class="hl kwc">StringBuilder</span> s <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">StringBuilder</span><span class="hl sym">();</span>
      <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> n<span class="hl sym">;</span> i<span class="hl sym">++){</span>
        s<span class="hl sym">.</span><span class="hl kwd">append</span><span class="hl sym">(</span><span class="hl kwd">get</span><span class="hl sym">(</span>i<span class="hl sym">) +</span> <span class="hl num">1</span><span class="hl sym">);</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">return</span> s<span class="hl sym">.</span><span class="hl kwd">toString</span><span class="hl sym">();</span>
    <span class="hl sym">}</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">static</span> <span class="hl kwb">long</span> <span class="hl kwd">fannkuch</span><span class="hl sym">(</span><span class="hl kwa">final</span> <span class="hl kwb">int</span> n<span class="hl sym">) {</span>
    Permutation perm <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Permutation</span><span class="hl sym">(</span>n<span class="hl sym">);</span>
    Permutation perm1 <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Permutation</span><span class="hl sym">(</span>n<span class="hl sym">);</span>
    <span class="hl kwb">int</span><span class="hl sym">[]</span> count <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">int</span><span class="hl sym">[</span>n<span class="hl sym">];</span>
    <span class="hl kwa">final</span> <span class="hl kwb">int</span> n1 <span class="hl sym">=</span> n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>

    <span class="hl kwa">if</span> <span class="hl sym">(</span>n <span class="hl sym">&lt;</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
    perm1<span class="hl sym">.</span><span class="hl kwd">init</span><span class="hl sym">();</span>

    <span class="hl kwb">int</span> r <span class="hl sym">=</span> n<span class="hl sym">;</span>
    <span class="hl kwb">int</span> didpr <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl kwb">int</span> flipsMax <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl kwa">for</span> <span class="hl sym">(; ;) {</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>didpr <span class="hl sym">&lt;</span> <span class="hl num">30</span><span class="hl sym">) {</span>
        <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span>perm1<span class="hl sym">.</span><span class="hl kwd">toString</span><span class="hl sym">());</span>
        didpr<span class="hl sym">++;</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">for</span> <span class="hl sym">(;</span> r <span class="hl sym">!=</span> <span class="hl num">1</span><span class="hl sym">; --</span>r<span class="hl sym">)</span> count<span class="hl sym">[</span>r <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">] =</span> r<span class="hl sym">;</span>

      <span class="hl kwa">if</span> <span class="hl sym">(!(</span>perm1<span class="hl sym">.</span><span class="hl kwd">first</span><span class="hl sym">() ==</span> <span class="hl num">0</span> <span class="hl sym">||</span> perm1<span class="hl sym">.</span><span class="hl kwd">get</span><span class="hl sym">(</span>n1<span class="hl sym">) ==</span> n1<span class="hl sym">)) {</span>
        perm1<span class="hl sym">.</span><span class="hl kwd">copyTo</span><span class="hl sym">(</span>perm<span class="hl sym">);</span>
        <span class="hl kwb">int</span> flips <span class="hl sym">=</span> perm<span class="hl sym">.</span><span class="hl kwd">flipUntilDone</span><span class="hl sym">();</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>flipsMax <span class="hl sym">&lt;</span> flips<span class="hl sym">) {</span>
          flipsMax <span class="hl sym">=</span> flips<span class="hl sym">;</span>
        <span class="hl sym">}</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">for</span> <span class="hl sym">(; ;</span>r<span class="hl sym">++) {</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>r <span class="hl sym">==</span> n<span class="hl sym">)</span> <span class="hl kwa">return</span> flipsMax<span class="hl sym">;</span>
        <span class="hl com">/* rotate down perm1[0..r] by one */</span>
        perm1<span class="hl sym">.</span><span class="hl kwd">rotate</span><span class="hl sym">(</span>r<span class="hl sym">);</span>
        count<span class="hl sym">[</span>r<span class="hl sym">]--;</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>count<span class="hl sym">[</span>r<span class="hl sym">] &gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">break</span><span class="hl sym">;</span>
      <span class="hl sym">}</span>
    <span class="hl sym">}</span>
  <span class="hl sym">}</span>


  <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">) {</span>
    <span class="hl kwb">int</span> n <span class="hl sym">=</span> <span class="hl num">11</span><span class="hl sym">;</span>
    <span class="hl kwa">if</span><span class="hl sym">(</span>args<span class="hl sym">.</span>length <span class="hl sym">==</span> <span class="hl num">1</span><span class="hl sym">)</span> n <span class="hl sym">=</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span><span class="hl kwd">parseInt</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>
    <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;Pfannkuchen(%d) = %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl kwd">fannkuch</span><span class="hl sym">(</span>n<span class="hl sym">));</span>
  <span class="hl sym">}</span>
<span class="hl sym">}</span>
