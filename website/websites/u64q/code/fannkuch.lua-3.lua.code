<source>
<def></def><slc>-- The Computer Language Shootout</slc><br />
<def></def><slc>-- http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>-- contributed by Mike Pall</slc><br />
<def></def><br />
<kwa>local function</kwa> <def></def><kwd>fannkuch</kwd><def></def><sym>(</sym><def>n</def><sym>)</sym><br />
<def></def>  <kwa>local</kwa> <def>p</def><sym>,</sym> <def>q</def><sym>,</sym> <def>s</def><sym>,</sym> <def>odd</def><sym>,</sym> <def>check</def><sym>,</sym> <def>maxflips</def> <sym>= {}, {}, {},</sym> <def></def><kwa>true</kwa><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>0</num><br />
<def></def>  <kwa>for</kwa> <def>i</def><sym>=</sym><def></def><num>1</num><def></def><sym>,</sym><def>n</def> <kwa>do</kwa> <def>p</def><sym>[</sym><def>i</def><sym>] =</sym> <def>i</def><sym>;</sym> <def>s</def><sym>[</sym><def>i</def><sym>] =</sym> <def>i</def> <kwa>end</kwa><br />
<def></def>  <kwa>repeat</kwa><br />
<def></def>    <slc>-- Print max. 30 permutations.</slc><br />
<def></def>    <kwa>if</kwa> <def>check</def> <sym>&lt;</sym> <def></def><num>30</num> <def></def><kwa>then</kwa><br />
<def></def>      <kwa>if not</kwa> <def>p</def><sym>[</sym><def>n</def><sym>]</sym> <def></def><kwa>then return</kwa> <def>maxflips</def> <kwa>end</kwa>	<def></def><slc>-- Catch n = 0, 1, 2.</slc><br />
<def></def>      <kwa>for</kwa> <def>i</def><sym>=</sym><def></def><num>1</num><def></def><sym>,</sym><def>n</def> <kwa>do</kwa> <def>io</def><sym>.</sym><def></def><kwb>write</kwb><def></def><sym>(</sym><def>p</def><sym>[</sym><def>i</def><sym>])</sym> <def></def><kwa>end</kwa><def></def><sym>;</sym> <def>io</def><sym>.</sym><def></def><kwb>write</kwb><def></def><sym>(</sym><def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>)</sym><br />
<def>      check</def> <sym>=</sym> <def>check</def> <sym>+</sym> <def></def><num>1</num><br />
<def></def>    <kwa>end</kwa><br />
<def></def>    <slc>-- Copy and flip.</slc><br />
<def></def>    <kwa>local</kwa> <def>q1</def> <sym>=</sym> <def>p</def><sym>[</sym><def></def><num>1</num><def></def><sym>]</sym>				<def></def><slc>-- Cache 1st element.</slc><br />
<def></def>    <kwa>if</kwa> <def>p</def><sym>[</sym><def>n</def><sym>]</sym> <def>~</def><sym>=</sym> <def>n</def> <kwa>and</kwa> <def>q1 ~</def><sym>=</sym> <def></def><num>1</num> <def></def><kwa>then</kwa>		<def></def><slc>-- Avoid useless work.</slc><br />
<def></def>      <kwa>for</kwa> <def>i</def><sym>=</sym><def></def><num>2</num><def></def><sym>,</sym><def>n</def> <kwa>do</kwa> <def>q</def><sym>[</sym><def>i</def><sym>] =</sym> <def>p</def><sym>[</sym><def>i</def><sym>]</sym> <def></def><kwa>end</kwa>		<def></def><slc>-- Work on a copy.</slc><br />
<def></def>      <kwa>for</kwa> <def>flips</def><sym>=</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>1000000</num> <def></def><kwa>do</kwa>			<def></def><slc>-- Flip ...</slc><br />
<def></def>	<kwa>local</kwa> <def>j</def> <sym>=</sym> <def>q1</def> <sym>-</sym> <def></def><num>1</num><br />
<def></def>	<kwa>for</kwa> <def>i</def><sym>=</sym><def></def><num>2</num><def></def><sym>,</sym><def>q1</def><sym>/</sym><def></def><num>2</num> <def></def><kwa>do</kwa> <def>q</def><sym>[</sym><def>i</def><sym>],</sym> <def>q</def><sym>[</sym><def>j</def><sym>] =</sym> <def>q</def><sym>[</sym><def>j</def><sym>],</sym> <def>q</def><sym>[</sym><def>i</def><sym>];</sym> <def>j</def> <sym>=</sym> <def>j</def> <sym>-</sym> <def></def><num>1</num> <def></def><kwa>end</kwa><br />
<def></def>	<kwa>local</kwa> <def>qq</def> <sym>=</sym> <def>q</def><sym>[</sym><def>q1</def><sym>]</sym><br />
<def></def>	<kwa>if</kwa> <def>qq</def> <sym>==</sym> <def></def><num>1</num> <def></def><kwa>then</kwa>				<def></def><slc>-- ... until 1st element is 1.</slc><br />
<def></def>	  <kwa>if</kwa> <def>flips</def> <sym>&gt;</sym> <def>maxflips</def> <kwa>then</kwa> <def>maxflips</def> <sym>=</sym> <def>flips</def> <kwa>end</kwa> <def></def><slc>-- New maximum?</slc><br />
<def></def>	  <kwa>break</kwa><br />
<def></def>	<kwa>end</kwa><br />
<def>	q</def><sym>[</sym><def>q1</def><sym>] =</sym> <def>q1<br />
	q1</def> <sym>=</sym> <def>qq</def><br />
      <kwa>end</kwa><br />
<def></def>    <kwa>end</kwa><br />
<def></def>    <slc>-- Permute.</slc><br />
<def></def>    <kwa>if</kwa> <def>odd</def> <kwa>then</kwa><br />
<def>      p</def><sym>[</sym><def></def><num>2</num><def></def><sym>],</sym> <def>p</def><sym>[</sym><def></def><num>1</num><def></def><sym>] =</sym> <def>p</def><sym>[</sym><def></def><num>1</num><def></def><sym>],</sym> <def>p</def><sym>[</sym><def></def><num>2</num><def></def><sym>];</sym> <def>odd</def> <sym>=</sym> <def></def><kwa>false</kwa>	<def></def><slc>-- Rotate 1&lt;-2.</slc><br />
<def></def>    <kwa>else</kwa><br />
<def>      p</def><sym>[</sym><def></def><num>2</num><def></def><sym>],</sym> <def>p</def><sym>[</sym><def></def><num>3</num><def></def><sym>] =</sym> <def>p</def><sym>[</sym><def></def><num>3</num><def></def><sym>],</sym> <def>p</def><sym>[</sym><def></def><num>2</num><def></def><sym>];</sym> <def>odd</def> <sym>=</sym> <def></def><kwa>true</kwa>	<def></def><slc>-- Rotate 1&lt;-2 and 1&lt;-2&lt;-3.</slc><br />
<def></def>      <kwa>for</kwa> <def>i</def><sym>=</sym><def></def><num>3</num><def></def><sym>,</sym><def>n</def> <kwa>do</kwa><br />
<def></def>	<kwa>local</kwa> <def>sx</def> <sym>=</sym> <def>s</def><sym>[</sym><def>i</def><sym>]</sym><br />
<def></def>	<kwa>if</kwa> <def>sx ~</def><sym>=</sym> <def></def><num>1</num> <def></def><kwa>then</kwa> <def>sx</def> <sym>=</sym> <def>sx</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>;</sym> <def>s</def><sym>[</sym><def>i</def><sym>] =</sym> <def>sx</def><sym>;</sym> <def></def><kwa>break end</kwa><br />
<def></def>	<kwa>if</kwa> <def>i</def> <sym>==</sym> <def>n</def> <kwa>then return</kwa> <def>maxflips</def> <kwa>end</kwa>	<def></def><slc>-- Out of permutations.</slc><br />
<def>	s</def><sym>[</sym><def>i</def><sym>] =</sym> <def>i</def><br />
	<slc>-- Rotate 1&lt;-...&lt;-i+1.</slc><br />
<def></def>	<kwa>local</kwa> <def>t</def> <sym>=</sym> <def>p</def><sym>[</sym><def></def><num>1</num><def></def><sym>];</sym> <def></def><kwa>for</kwa> <def>j</def><sym>=</sym><def></def><num>1</num><def></def><sym>,</sym><def>i</def> <kwa>do</kwa> <def>p</def><sym>[</sym><def>j</def><sym>] =</sym> <def>p</def><sym>[</sym><def>j</def><sym>+</sym><def></def><num>1</num><def></def><sym>]</sym> <def></def><kwa>end</kwa><def></def><sym>;</sym> <def>p</def><sym>[</sym><def>i</def><sym>+</sym><def></def><num>1</num><def></def><sym>] =</sym> <def>t</def><br />
      <kwa>end</kwa><br />
<def></def>    <kwa>end</kwa><br />
<def></def>  <kwa>until false</kwa><br />
<def></def><kwa>end</kwa><br />
<def></def><br />
<kwa>local</kwa> <def>n</def> <sym>=</sym> <def></def><kwb>tonumber</kwb><def></def><sym>(</sym><def>arg</def> <kwa>and</kwa> <def>arg</def><sym>[</sym><def></def><num>1</num><def></def><sym>])</sym> <def></def><kwa>or</kwa> <def></def><num>1</num><br />
<def>io</def><sym>.</sym><def></def><kwb>write</kwb><def></def><sym>(</sym><def></def><str>&quot;Pfannkuchen(&quot;</str><def></def><sym>,</sym> <def>n</def><sym>,</sym> <def></def><str>&quot;) = &quot;</str><def></def><sym>,</sym> <def></def><kwd>fannkuch</kwd><def></def><sym>(</sym><def>n</def><sym>),</sym> <def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>)</sym><def></def><br />
</source>
