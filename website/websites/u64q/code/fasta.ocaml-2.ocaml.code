<source>
<def></def><com>(* fasta.ml</com><br />
<com> *</com><br />
<com> * The Great Computer Language Shootout</com><br />
<com> * http://shootout.alioth.debian.org/</com><br />
<com> *</com><br />
<com> * Contributed by Troestler Christophe</com><br />
<com> *)</com><def></def><br />
<br />
<com>(* Random number generator (Shootout version) *)</com><def></def><br />
<kwa>let</kwa> <def>im</def> <sym>=</sym> <def></def><num>139968</num><br />
<def></def><kwa>and</kwa> <def>ia</def> <sym>=</sym> <def></def><num>3877</num><br />
<def></def><kwa>and</kwa> <def>ic</def> <sym>=</sym> <def></def><num>29573</num><br />
<def></def><br />
<kwa>let</kwa> <def>last</def> <sym>=</sym> <def></def><kwb>ref</kwb> <def></def><num>42</num> <def></def><kwa>and</kwa> <def>inv_im</def> <sym>=</sym> <def></def><num>1</num><def></def><sym>. /.</sym> <def></def><kwb>float</kwb> <def>im</def><br />
<kwa>let</kwa> <def>gen_random  max</def> <sym>=</sym><br />
<def>  last</def> <sym>:= (!</sym><def>last</def> <sym>*</sym> <def>ia</def> <sym>+</sym> <def>ic</def><sym>)</sym> <def></def><kwa>mod</kwa> <def>im</def><sym>;</sym><br />
<def>  max</def> <sym>*.</sym> <def></def><kwb>float</kwb> <def></def><sym>!</sym><def>last</def> <sym>*.</sym> <def>inv_im</def><br />
<br />
<br />
<kwa>let</kwa> <def>make_cumulative table</def> <sym>=</sym><br />
<def></def>  <kwa>let</kwa> <def>prob</def> <sym>=</sym> <def></def><kwb>ref</kwb> <def></def><num>0.0</num> <def></def><kwa>in</kwa><br />
<def></def>  <kwc>Array</kwc><def></def><sym>.</sym><def>map</def> <sym>(</sym><def></def><kwa>fun</kwa> <def></def><sym>(</sym><def>c</def><sym>,</sym> <def>p</def><sym>) -&gt;</sym> <def>prob</def> <sym>:= !</sym><def>prob</def> <sym>+.</sym> <def>p</def><sym>; (</sym><def>c</def><sym>, !</sym><def>prob</def><sym>))</sym> <def>table</def><br />
<br />
<kwa>let</kwa> <def>rand_char cumul</def> <sym>=</sym><br />
<def></def>  <kwa>let</kwa> <def>prob</def> <sym>=</sym> <def>gen_random</def> <num>1.0</num> <def></def><kwa>in</kwa><br />
<def></def>  <kwa>let</kwa> <def>i</def> <sym>=</sym> <def></def><kwb>ref</kwb> <def></def><num>0</num> <def></def><kwa>in</kwa><br />
<def></def>  <kwa>while</kwa> <def>prob</def> <sym>&gt;=</sym> <def>snd cumul</def><sym>.(!</sym><def>i</def><sym>)</sym> <def></def><kwa>do</kwa> <def>incr i</def> <kwa>done</kwa><def></def><sym>;</sym><br />
<def>  fst cumul</def><sym>.(!</sym><def>i</def><sym>)</sym><br />
<def></def><br />
<br />
<kwa>let</kwa> <def>width</def> <sym>=</sym> <def></def><num>60</num><br />
<def></def><br />
<kwa>let</kwa> <def>make_random_fasta id desc table n</def> <sym>=</sym><br />
<def></def>  <kwc>Printf</kwc><def></def><sym>.</sym><def>printf</def> <str>&quot;&gt;%s %s</str><esc>\n</esc><str>&quot;</str><def> id desc</def><sym>;</sym><br />
<def></def>  <kwa>let</kwa> <def>table</def> <sym>=</sym> <def>make_cumulative table</def> <kwa>in</kwa><br />
<def></def>  <kwa>let</kwa> <def>line</def> <sym>=</sym> <def></def><kwc>String</kwc><def></def><sym>.</sym><def>make</def> <sym>(</sym><def>width</def><sym>+</sym><def></def><num>1</num><def></def><sym>)</sym> <def></def><str>'</str><esc>\n</esc><str>'</str><def></def> <kwa>in</kwa><br />
<def></def>  <kwa>for</kwa> <def>i</def> <sym>=</sym> <def></def><num>1</num> <def></def><kwa>to</kwa> <def>n</def> <sym>/</sym> <def>width</def> <kwa>do</kwa><br />
<def></def>    <kwa>for</kwa> <def>j</def> <sym>=</sym> <def></def><num>0</num> <def></def><kwa>to</kwa> <def>width</def> <sym>-</sym> <def></def><num>1</num> <def></def><kwa>do</kwa> <def>line</def><sym>.[</sym><def>j</def><sym>] &lt;-</sym> <def>rand_char table</def> <kwa>done</kwa><def></def><sym>;</sym><br />
<def>    print_string line</def><sym>;</sym><br />
<def></def>  <kwa>done</kwa><def></def><sym>;</sym><br />
<def></def>  <kwa>let</kwa> <def>w</def> <sym>=</sym> <def>n</def> <kwa>mod</kwa> <def>width</def> <kwa>in</kwa><br />
<def></def>  <kwa>if</kwa> <def>w</def> <sym>&gt;</sym> <def></def><num>0</num> <def></def><kwa>then</kwa> <def></def><sym>(</sym><br />
<def></def>    <kwa>for</kwa> <def>j</def> <sym>=</sym> <def></def><num>1</num> <def></def><kwa>to</kwa> <def>w</def> <kwa>do</kwa> <def>print_char</def><sym>(</sym><def>rand_char table</def><sym>);</sym> <def></def><kwa>done</kwa><def></def><sym>;</sym><br />
<def>    print_char</def> <str>'</str><esc>\n</esc><str>'</str><def></def><br />
  <sym>)</sym><br />
<def></def><br />
<com>(* [write s i0 l w] outputs [w] chars of [s.[0 .. l]], followed by a</com><br />
<com>   newline, starting with [s.[i0]] and considering the substring [s.[0</com><br />
<com>   .. l]] as a &quot;circle&quot;.</com><br />
<com>   One assumes [0 &lt;= i0 &lt;= l &lt;= String.length s].</com><br />
<com>   @return [i0] needed for subsequent writes.  *)</com><def></def><br />
<kwa>let rec</kwa> <def>write s i0 l w</def> <sym>=</sym><br />
<def></def>  <kwa>let</kwa> <def>len</def> <sym>=</sym> <def>l</def> <sym>-</sym> <def>i0</def> <kwa>in</kwa><br />
<def></def>  <kwa>if</kwa> <def>w</def> <sym>&lt;=</sym> <def>len</def> <kwa>then</kwa> <def></def><sym>(</sym><def>output stdout s i0 w</def><sym>;</sym> <def>print_char</def> <str>'</str><esc>\n</esc><str>'</str><def></def><sym>;</sym> <def>i0</def> <sym>+</sym> <def>w</def><sym>)</sym><br />
<def></def>  <kwa>else</kwa> <def></def><sym>(</sym><def>output stdout s i0 len</def><sym>;</sym> <def>write s</def> <num>0</num> <def>l</def> <sym>(</sym><def>w</def> <sym>-</sym> <def>len</def><sym>))</sym><br />
<def></def><br />
<kwa>let</kwa> <def>make_repeat_fasta id desc src n</def> <sym>=</sym><br />
<def></def>  <kwc>Printf</kwc><def></def><sym>.</sym><def>printf</def> <str>&quot;&gt;%s %s</str><esc>\n</esc><str>&quot;</str><def> id desc</def><sym>;</sym><br />
<def></def>  <kwa>let</kwa> <def>l</def> <sym>=</sym> <def></def><kwc>String</kwc><def></def><sym>.</sym><def>length src</def><br />
  <kwa>and</kwa> <def>i0</def> <sym>=</sym> <def></def><kwb>ref</kwb> <def></def><num>0</num> <def></def><kwa>in</kwa><br />
<def></def>  <kwa>for</kwa> <def>i</def> <sym>=</sym> <def></def><num>1</num> <def></def><kwa>to</kwa> <def>n</def> <sym>/</sym> <def>width</def> <kwa>do</kwa><br />
<def>    i0</def> <sym>:=</sym> <def>write src</def> <sym>!</sym><def>i0 l width</def><sym>;</sym><br />
<def></def>  <kwa>done</kwa><def></def><sym>;</sym><br />
<def></def>  <kwa>let</kwa> <def>w</def> <sym>=</sym> <def>n</def> <kwa>mod</kwa> <def>width</def> <kwa>in</kwa><br />
<def></def>  <kwa>if</kwa> <def>w</def> <sym>&gt;</sym> <def></def><num>0</num> <def></def><kwa>then</kwa> <def>ignore</def><sym>(</sym><def>write src</def> <sym>!</sym><def>i0 l w</def><sym>)</sym><br />
<def></def><br />
<br />
<kwa>let</kwa> <def>alu</def> <sym>=</sym> <def></def><str>&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG\</str><br />
<str>GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA\</str><br />
<str>CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT\</str><br />
<str>ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA\</str><br />
<str>GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG\</str><br />
<str>AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC\</str><br />
<str>AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</str><def></def><br />
<br />
<kwa>let</kwa> <def>iub</def> <sym>= [| (</sym><def></def><kwb>'a'</kwb><def></def><sym>,</sym> <def></def><num>0.27</num><def></def><sym>);  (</sym><def></def><kwb>'c'</kwb><def></def><sym>,</sym> <def></def><num>0.12</num><def></def><sym>);  (</sym><def></def><kwb>'g'</kwb><def></def><sym>,</sym> <def></def><num>0.12</num><def></def><sym>);  (</sym><def></def><kwb>'t'</kwb><def></def><sym>,</sym> <def></def><num>0.27</num><def></def><sym>);</sym><br />
<def></def>	     <sym>(</sym><def></def><kwb>'B'</kwb><def></def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>);  (</sym><def></def><kwb>'D'</kwb><def></def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>);  (</sym><def></def><kwb>'H'</kwb><def></def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>);  (</sym><def></def><kwb>'K'</kwb><def></def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>);</sym><br />
<def></def>	     <sym>(</sym><def></def><kwb>'M'</kwb><def></def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>);  (</sym><def></def><kwb>'N'</kwb><def></def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>);  (</sym><def></def><kwb>'R'</kwb><def></def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>);  (</sym><def></def><kwb>'S'</kwb><def></def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>);</sym><br />
<def></def>	     <sym>(</sym><def></def><kwb>'V'</kwb><def></def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>);  (</sym><def></def><kwb>'W'</kwb><def></def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>);  (</sym><def></def><kwb>'Y'</kwb><def></def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>);  |]</sym><br />
<def></def><br />
<kwa>let</kwa> <def>homosapiens</def> <sym>= [| (</sym><def></def><kwb>'a'</kwb><def></def><sym>,</sym> <def></def><num>0.3029549426680</num><def></def><sym>);    (</sym><def></def><kwb>'c'</kwb><def></def><sym>,</sym> <def></def><num>0.1979883004921</num><def></def><sym>);</sym><br />
<def></def>		     <sym>(</sym><def></def><kwb>'g'</kwb><def></def><sym>,</sym> <def></def><num>0.1975473066391</num><def></def><sym>);    (</sym><def></def><kwb>'t'</kwb><def></def><sym>,</sym> <def></def><num>0.3015094502008</num><def></def><sym>);  |]</sym><br />
<def></def><br />
<kwa>let</kwa> <def></def><sym>() =</sym><br />
<def></def>  <kwa>let</kwa> <def>n</def> <sym>=</sym> <def></def><kwa>try</kwa> <def>int_of_string</def><sym>(</sym><def></def><kwc>Array</kwc><def></def><sym>.</sym><def>get</def> <kwc>Sys</kwc><def></def><sym>.</sym><def>argv</def> <num>1</num><def></def><sym>)</sym> <def></def><kwa>with</kwa> <def>_</def> <sym>-&gt;</sym> <def></def><num>1000</num> <def></def><kwa>in</kwa><br />
<def>  make_repeat_fasta</def> <str>&quot;ONE&quot;</str><def></def> <str>&quot;Homo sapiens alu&quot;</str><def> alu</def> <sym>(</sym><def>n</def><sym>*</sym><def></def><num>2</num><def></def><sym>);</sym><br />
<def>  make_random_fasta</def> <str>&quot;TWO&quot;</str><def></def> <str>&quot;IUB ambiguity codes&quot;</str><def> iub</def> <sym>(</sym><def>n</def><sym>*</sym><def></def><num>3</num><def></def><sym>);</sym><br />
<def>  make_random_fasta</def> <str>&quot;THREE&quot;</str><def></def> <str>&quot;Homo sapiens frequency&quot;</str><def> homosapiens</def> <sym>(</sym><def>n</def><sym>*</sym><def></def><num>5</num><def></def><sym>)</sym><def></def><br />
</source>
