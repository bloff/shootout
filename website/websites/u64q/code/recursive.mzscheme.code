<source>
<def></def><slc>;; The Computer Language Benchmarks Game</slc><br />
<def></def><slc>;; http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>;;</slc><br />
<def></def><slc>;; Code based on / inspired by existing, relevant Shootout submissions</slc><br />
<def></def><slc>;;</slc><br />
<def></def><slc>;; Derived from the Chicken variant, which was</slc><br />
<def></def><slc>;; Contributed by Anthony Borla</slc><br />
<def></def><br />
<sym>(</sym><def>module recursive mzscheme</def><br />
<br />
  <slc>;; -------------------------------</slc><br />
<def></def><br />
  <sym>(</sym><def>define</def> <sym>(</sym><def>ack m n</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def></def><kwa>cond</kwa> <def></def><sym>((</sym><def>zero? m</def><sym>) (+</sym> <def>n</def> <num>1</num><def></def><sym>))</sym><br />
<def></def>	  <sym>((</sym><def>zero? n</def><sym>) (</sym><def>ack</def> <sym>(-</sym> <def>m</def> <num>1</num><def></def><sym>)</sym> <def></def><num>1</num><def></def><sym>))</sym><br />
<def></def>	  <sym>(</sym><def>else</def> <sym>(</sym><def>ack</def> <sym>(-</sym> <def>m</def> <num>1</num><def></def><sym>) (</sym><def>ack m</def> <sym>(-</sym> <def>n</def> <num>1</num><def></def><sym>))))))</sym><br />
<def></def><br />
  <slc>;; --------------</slc><br />
<def></def><br />
  <sym>(</sym><def>define</def> <sym>(</sym><def>fib n</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def></def><kwa>cond</kwa> <def></def><sym>((&lt;</sym> <def>n</def> <num>2</num><def></def><sym>)</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>	  <sym>(</sym><def>else</def> <sym>(+ (</sym><def>fib</def> <sym>(-</sym> <def>n</def> <num>2</num><def></def><sym>)) (</sym><def>fib</def> <sym>(-</sym> <def>n</def> <num>1</num><def></def><sym>))))))</sym><br />
<def></def><br />
  <sym>(</sym><def>define</def> <sym>(</sym><def>fibflt n</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def></def><kwa>cond</kwa> <def></def><sym>((&lt;</sym> <def>n</def> <num>2.0</num><def></def><sym>)</sym> <def></def><num>1.0</num><def></def><sym>)</sym><br />
<def></def>	  <sym>(</sym><def>else</def> <sym>(+ (</sym><def>fibflt</def> <sym>(-</sym> <def>n</def> <num>2.0</num><def></def><sym>)) (</sym><def>fibflt</def> <sym>(-</sym> <def>n</def> <num>1.0</num><def></def><sym>))))))</sym><br />
<def></def><br />
  <slc>;; --------------</slc><br />
<def></def><br />
  <sym>(</sym><def>define</def> <sym>(</sym><def>tak x y z</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def></def><kwa>cond</kwa> <def></def><sym>((</sym><def></def><kwa>not</kwa> <def></def><sym>(&lt;</sym> <def>y x</def><sym>))</sym> <def>z</def><sym>)</sym><br />
<def></def>	  <sym>(</sym><def>else</def> <sym>(</sym><def>tak</def> <sym>(</sym><def>tak</def> <sym>(-</sym> <def>x</def> <num>1</num><def></def><sym>)</sym> <def>y z</def><sym>) (</sym><def>tak</def> <sym>(-</sym> <def>y</def> <num>1</num><def></def><sym>)</sym> <def>z x</def><sym>) (</sym><def>tak</def> <sym>(-</sym> <def>z</def> <num>1</num><def></def><sym>)</sym> <def>x y</def><sym>)))))</sym><br />
<def></def><br />
  <sym>(</sym><def>define</def> <sym>(</sym><def>takflt x y z</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def></def><kwa>cond</kwa> <def></def><sym>((</sym><def></def><kwa>not</kwa> <def></def><sym>(&lt;</sym> <def>y x</def><sym>))</sym> <def>z</def><sym>)</sym><br />
<def></def>	  <sym>(</sym><def>else</def> <sym>(</sym><def>takflt</def> <sym>(</sym><def>takflt</def> <sym>(-</sym> <def>x</def> <num>1.0</num><def></def><sym>)</sym> <def>y z</def><sym>) (</sym><def>takflt</def> <sym>(-</sym> <def>y</def> <num>1.0</num><def></def><sym>)</sym> <def>z x</def><sym>) (</sym><def>takflt</def> <sym>(-</sym> <def>z</def> <num>1.0</num><def></def><sym>)</sym> <def>x y</def><sym>)))))</sym><br />
<def></def><br />
  <slc>;; -------------------------------</slc><br />
<def></def><br />
  <slc>;;; Stupid boiler-plate for formatting floating point value</slc><br />
<def></def>  <sym>(</sym><def>define</def> <sym>(</sym><def>roundto digits n</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def>let</def><sym>* ([</sym><def>e</def> <sym>(</sym><def></def><kwa>expt</kwa> <def></def><num>10</num> <def>digits</def><sym>)]</sym><br />
<def></def>           <sym>[</sym><def>num</def> <sym>(</sym><def>round</def> <sym>(</sym><def></def><kwa>abs</kwa> <def></def><sym>(*</sym> <def>e</def> <sym>(</sym><def>inexact</def><sym>-&gt;</sym><def>exact n</def><sym>))))]</sym><br />
<def></def>           <sym>[</sym><def>str</def> <sym>(</sym><def>number</def><sym>-&gt;</sym><def>string</def> <sym>(</sym><def>remainder num e</def><sym>))])</sym><br />
<def></def>      <sym>(</sym><def>format</def> <str>&quot;~a~a.~a~a&quot;</str><def></def><br />
              <sym>(</sym><def></def><kwa>if</kwa> <def></def><sym>(</sym><def>negative? n</def><sym>)</sym> <def></def><str>&quot;-&quot;</str><def></def> <str>&quot;&quot;</str><def></def><sym>)</sym><br />
<def></def>              <sym>(</sym><def>quotient num e</def><sym>)</sym><br />
<def></def>              <sym>(</sym><def>make</def><sym>-</sym><def>string</def> <sym>(-</sym> <def>digits</def> <sym>(</sym><def>string</def><sym>-</sym><def></def><kwa>length</kwa> <def>str</def><sym>))</sym> <def>#\</def><num>0</num><def></def><sym>)</sym><br />
<def>              str</def><sym>)))</sym><br />
<def></def><br />
  <sym>(</sym><def>define</def> <sym>(</sym><def>main args</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def>let</def> <sym>((</sym><def>n</def> <sym>(</sym><def>string</def><sym>-&gt;</sym><def>number</def> <sym>(</sym><def>vector</def><sym>-</sym><def>ref args</def> <num>0</num><def></def><sym>))))</sym><br />
<def></def><br />
      <sym>(</sym><def>printf</def> <str>&quot;Ack(3,~A): ~A~%&quot;</str><def> n</def> <sym>(</sym><def>ack</def> <num>3</num> <def>n</def><sym>))</sym><br />
<def></def>      <sym>(</sym><def>printf</def> <str>&quot;Fib(~a): ~a~%&quot;</str><def></def> <sym>(</sym><def>roundto</def> <num>1</num> <def></def><sym>(+</sym> <def></def><num>27.0</num> <def>n</def><sym>)) (</sym><def>roundto</def> <num>1</num> <def></def><sym>(</sym><def>fibflt</def> <sym>(+</sym> <def></def><num>27.0</num> <def>n</def><sym>))))</sym><br />
<def></def><br />
      <sym>(</sym><def></def><kwa>set</kwa><def></def><sym>!</sym> <def>n</def> <sym>(-</sym> <def>n</def> <num>1</num><def></def><sym>))</sym><br />
<def></def>      <sym>(</sym><def>printf</def> <str>&quot;Tak(~A,~A,~A): ~A~%&quot;</str><def></def> <sym>(*</sym> <def>n</def> <num>3</num><def></def><sym>) (*</sym> <def>n</def> <num>2</num><def></def><sym>)</sym> <def>n</def> <sym>(</sym><def>tak</def> <sym>(*</sym> <def>n</def> <num>3</num><def></def><sym>) (*</sym> <def>n</def> <num>2</num><def></def><sym>)</sym> <def>n</def><sym>))</sym><br />
<def></def><br />
      <sym>(</sym><def>printf</def> <str>&quot;Fib(3): ~A~%&quot;</str><def></def> <sym>(</sym><def>fib</def> <num>3</num><def></def><sym>))</sym><br />
<def></def>      <sym>(</sym><def>printf</def> <str>&quot;Tak(3.0,2.0,1.0): ~a~%&quot;</str><def></def> <sym>(</sym><def>roundto</def> <num>1</num> <def></def><sym>(</sym><def>takflt</def> <num>3.0 2.0 1.0</num><def></def><sym>)))))</sym><br />
<def></def><br />
  <slc>;; -------------------------------</slc><br />
<def></def><br />
  <sym>(</sym><def>main</def> <sym>(</sym><def>current</def><sym>-</sym><def></def><kwa>command</kwa><def></def><sym>-</sym><def></def><kwa>line</kwa><def></def><sym>-</sym><def>arguments</def><sym>)))</sym><def></def><br />
</source>
