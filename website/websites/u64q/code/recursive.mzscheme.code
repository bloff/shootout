<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;</span>
<span class="hl slc">;; Code based on / inspired by existing, relevant Shootout submissions</span>
<span class="hl slc">;;</span>
<span class="hl slc">;; Derived from the Chicken variant, which was</span>
<span class="hl slc">;; Contributed by Anthony Borla</span>

<span class="hl sym">(</span>module recursive mzscheme

  <span class="hl slc">;; -------------------------------</span>

  <span class="hl sym">(</span>define <span class="hl sym">(</span>ack m n<span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl kwa">cond</span> <span class="hl sym">((</span>zero? m<span class="hl sym">) (+</span> n <span class="hl num">1</span><span class="hl sym">))</span>
	  <span class="hl sym">((</span>zero? n<span class="hl sym">) (</span>ack <span class="hl sym">(-</span> m <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl num">1</span><span class="hl sym">))</span>
	  <span class="hl sym">(</span>else <span class="hl sym">(</span>ack <span class="hl sym">(-</span> m <span class="hl num">1</span><span class="hl sym">) (</span>ack m <span class="hl sym">(-</span> n <span class="hl num">1</span><span class="hl sym">))))))</span>

  <span class="hl slc">;; --------------</span>

  <span class="hl sym">(</span>define <span class="hl sym">(</span>fib n<span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl kwa">cond</span> <span class="hl sym">((&lt;</span> n <span class="hl num">2</span><span class="hl sym">)</span> <span class="hl num">1</span><span class="hl sym">)</span>
	  <span class="hl sym">(</span>else <span class="hl sym">(+ (</span>fib <span class="hl sym">(-</span> n <span class="hl num">2</span><span class="hl sym">)) (</span>fib <span class="hl sym">(-</span> n <span class="hl num">1</span><span class="hl sym">))))))</span>

  <span class="hl sym">(</span>define <span class="hl sym">(</span>fibflt n<span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl kwa">cond</span> <span class="hl sym">((&lt;</span> n <span class="hl num">2.0</span><span class="hl sym">)</span> <span class="hl num">1.0</span><span class="hl sym">)</span>
	  <span class="hl sym">(</span>else <span class="hl sym">(+ (</span>fibflt <span class="hl sym">(-</span> n <span class="hl num">2.0</span><span class="hl sym">)) (</span>fibflt <span class="hl sym">(-</span> n <span class="hl num">1.0</span><span class="hl sym">))))))</span>

  <span class="hl slc">;; --------------</span>

  <span class="hl sym">(</span>define <span class="hl sym">(</span>tak x y z<span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl kwa">cond</span> <span class="hl sym">((</span><span class="hl kwa">not</span> <span class="hl sym">(&lt;</span> y x<span class="hl sym">))</span> z<span class="hl sym">)</span>
	  <span class="hl sym">(</span>else <span class="hl sym">(</span>tak <span class="hl sym">(</span>tak <span class="hl sym">(-</span> x <span class="hl num">1</span><span class="hl sym">)</span> y z<span class="hl sym">) (</span>tak <span class="hl sym">(-</span> y <span class="hl num">1</span><span class="hl sym">)</span> z x<span class="hl sym">) (</span>tak <span class="hl sym">(-</span> z <span class="hl num">1</span><span class="hl sym">)</span> x y<span class="hl sym">)))))</span>

  <span class="hl sym">(</span>define <span class="hl sym">(</span>takflt x y z<span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl kwa">cond</span> <span class="hl sym">((</span><span class="hl kwa">not</span> <span class="hl sym">(&lt;</span> y x<span class="hl sym">))</span> z<span class="hl sym">)</span>
	  <span class="hl sym">(</span>else <span class="hl sym">(</span>takflt <span class="hl sym">(</span>takflt <span class="hl sym">(-</span> x <span class="hl num">1.0</span><span class="hl sym">)</span> y z<span class="hl sym">) (</span>takflt <span class="hl sym">(-</span> y <span class="hl num">1.0</span><span class="hl sym">)</span> z x<span class="hl sym">) (</span>takflt <span class="hl sym">(-</span> z <span class="hl num">1.0</span><span class="hl sym">)</span> x y<span class="hl sym">)))))</span>

  <span class="hl slc">;; -------------------------------</span>

  <span class="hl slc">;;; Stupid boiler-plate for formatting floating point value</span>
  <span class="hl sym">(</span>define <span class="hl sym">(</span>roundto digits n<span class="hl sym">)</span>
    <span class="hl sym">(</span>let<span class="hl sym">* ([</span>e <span class="hl sym">(</span><span class="hl kwa">expt</span> <span class="hl num">10</span> digits<span class="hl sym">)]</span>
           <span class="hl sym">[</span>num <span class="hl sym">(</span>round <span class="hl sym">(</span><span class="hl kwa">abs</span> <span class="hl sym">(*</span> e <span class="hl sym">(</span>inexact<span class="hl sym">-&gt;</span>exact n<span class="hl sym">))))]</span>
           <span class="hl sym">[</span>str <span class="hl sym">(</span>number<span class="hl sym">-&gt;</span>string <span class="hl sym">(</span>remainder num e<span class="hl sym">))])</span>
      <span class="hl sym">(</span>format <span class="hl str">&quot;~a~a.~a~a&quot;</span>
              <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>negative? n<span class="hl sym">)</span> <span class="hl str">&quot;-&quot;</span> <span class="hl str">&quot;&quot;</span><span class="hl sym">)</span>
              <span class="hl sym">(</span>quotient num e<span class="hl sym">)</span>
              <span class="hl sym">(</span>make<span class="hl sym">-</span>string <span class="hl sym">(-</span> digits <span class="hl sym">(</span>string<span class="hl sym">-</span><span class="hl kwa">length</span> str<span class="hl sym">))</span> #\<span class="hl num">0</span><span class="hl sym">)</span>
              str<span class="hl sym">)))</span>

  <span class="hl sym">(</span>define <span class="hl sym">(</span>main args<span class="hl sym">)</span>
    <span class="hl sym">(</span>let <span class="hl sym">((</span>n <span class="hl sym">(</span>string<span class="hl sym">-&gt;</span>number <span class="hl sym">(</span>vector<span class="hl sym">-</span>ref args <span class="hl num">0</span><span class="hl sym">))))</span>

      <span class="hl sym">(</span>printf <span class="hl str">&quot;Ack(3,~A): ~A~%&quot;</span> n <span class="hl sym">(</span>ack <span class="hl num">3</span> n<span class="hl sym">))</span>
      <span class="hl sym">(</span>printf <span class="hl str">&quot;Fib(~a): ~a~%&quot;</span> <span class="hl sym">(</span>roundto <span class="hl num">1</span> <span class="hl sym">(+</span> <span class="hl num">27.0</span> n<span class="hl sym">)) (</span>roundto <span class="hl num">1</span> <span class="hl sym">(</span>fibflt <span class="hl sym">(+</span> <span class="hl num">27.0</span> n<span class="hl sym">))))</span>

      <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> n <span class="hl sym">(-</span> n <span class="hl num">1</span><span class="hl sym">))</span>
      <span class="hl sym">(</span>printf <span class="hl str">&quot;Tak(~A,~A,~A): ~A~%&quot;</span> <span class="hl sym">(*</span> n <span class="hl num">3</span><span class="hl sym">) (*</span> n <span class="hl num">2</span><span class="hl sym">)</span> n <span class="hl sym">(</span>tak <span class="hl sym">(*</span> n <span class="hl num">3</span><span class="hl sym">) (*</span> n <span class="hl num">2</span><span class="hl sym">)</span> n<span class="hl sym">))</span>

      <span class="hl sym">(</span>printf <span class="hl str">&quot;Fib(3): ~A~%&quot;</span> <span class="hl sym">(</span>fib <span class="hl num">3</span><span class="hl sym">))</span>
      <span class="hl sym">(</span>printf <span class="hl str">&quot;Tak(3.0,2.0,1.0): ~a~%&quot;</span> <span class="hl sym">(</span>roundto <span class="hl num">1</span> <span class="hl sym">(</span>takflt <span class="hl num">3.0 2.0 1.0</span><span class="hl sym">)))))</span>

  <span class="hl slc">;; -------------------------------</span>

  <span class="hl sym">(</span>main <span class="hl sym">(</span>current<span class="hl sym">-</span><span class="hl kwa">command</span><span class="hl sym">-</span><span class="hl kwa">line</span><span class="hl sym">-</span>arguments<span class="hl sym">)))</span>
