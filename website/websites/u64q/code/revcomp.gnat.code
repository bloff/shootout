<source>
<def></def><slc>-- $Id: revcomp.gnat.code,v 1.1 2008-08-05 04:40:19 igouy-guest Exp $</slc><br />
<def></def><slc>-- http://dada.perl.it/shootout/</slc><br />
<def></def><slc>-- Contributed by Pascal Obry on 2005/03/19</slc><br />
<def></def><slc>-- Optimized by Bill Findlay on 2005/04/04</slc><br />
<def></def><br />
<kwa>with</kwa> <def>Ada.Text_IO</def><sym>;</sym>                <def></def><kwa>use</kwa> <def>Ada.Text_IO</def><sym>;</sym><br />
<def></def><kwa>with</kwa> <def>Ada.Unchecked_Deallocation</def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def>Revcomp</def> <kwa>is</kwa><br />
<def><br />
   Complement</def> <sym>:</sym> <def></def><kwa>constant array</kwa> <def></def><sym>(</sym><def></def><kwb>Character</kwb><def></def><sym>)</sym> <def></def><kwa>of</kwa> <def></def><kwb>Character</kwb> <def></def><sym>:=</sym><br />
<def></def>                  <sym>('</sym><def>A</def><sym>' =&gt; '</sym><def>T</def><sym>', '</sym><def>C</def><sym>' =&gt; '</sym><def>G</def><sym>', '</sym><def>G</def><sym>' =&gt; '</sym><def>C</def><sym>', '</sym><def>T</def><sym>' =&gt; '</sym><def>A</def><sym>', '</sym><def>U</def><sym>' =&gt; '</sym><def>A</def><sym>',</sym><br />
<def></def>                   <sym>'</sym><def>M</def><sym>' =&gt; '</sym><def>K</def><sym>', '</sym><def>R</def><sym>' =&gt; '</sym><def>Y</def><sym>', '</sym><def>W</def><sym>' =&gt; '</sym><def>W</def><sym>', '</sym><def>S</def><sym>' =&gt; '</sym><def>S</def><sym>', '</sym><def>Y</def><sym>' =&gt; '</sym><def>R</def><sym>',</sym><br />
<def></def>                   <sym>'</sym><def>K</def><sym>' =&gt; '</sym><def>M</def><sym>', '</sym><def>V</def><sym>' =&gt; '</sym><def>B</def><sym>', '</sym><def>H</def><sym>' =&gt; '</sym><def>D</def><sym>', '</sym><def>D</def><sym>' =&gt; '</sym><def>H</def><sym>', '</sym><def>B</def><sym>' =&gt; '</sym><def>V</def><sym>',</sym><br />
<def></def>                   <sym>'</sym><def>N</def><sym>' =&gt; '</sym><def>N</def><sym>',</sym><br />
<def></def>                   <sym>'</sym><def>a</def><sym>' =&gt; '</sym><def>T</def><sym>', '</sym><def>c</def><sym>' =&gt; '</sym><def>G</def><sym>', '</sym><def>g</def><sym>' =&gt; '</sym><def>C</def><sym>', '</sym><def>t</def><sym>' =&gt; '</sym><def>A</def><sym>', '</sym><def>u</def><sym>' =&gt; '</sym><def>A</def><sym>',</sym><br />
<def></def>                   <sym>'</sym><def>m</def><sym>' =&gt; '</sym><def>K</def><sym>', '</sym><def>r</def><sym>' =&gt; '</sym><def>Y</def><sym>', '</sym><def>w</def><sym>' =&gt; '</sym><def>W</def><sym>', '</sym><def>s</def><sym>' =&gt; '</sym><def>S</def><sym>', '</sym><def>y</def><sym>' =&gt; '</sym><def>R</def><sym>',</sym><br />
<def></def>                   <sym>'</sym><def>k</def><sym>' =&gt; '</sym><def>M</def><sym>', '</sym><def>v</def><sym>' =&gt; '</sym><def>B</def><sym>', '</sym><def>h</def><sym>' =&gt; '</sym><def>D</def><sym>', '</sym><def>d</def><sym>' =&gt; '</sym><def>H</def><sym>', '</sym><def>b</def><sym>' =&gt; '</sym><def>V</def><sym>',</sym><br />
<def></def>                   <sym>'</sym><def>n</def><sym>' =&gt; '</sym><def>N</def><sym>',</sym><br />
<def></def>                   <kwa>others</kwa> <def></def><sym>=&gt; '</sym><def>?</def><sym>');</sym><br />
<def><br />
   Max_Length</def> <sym>:</sym> <def></def><kwa>constant</kwa> <def></def><sym>:=</sym> <def></def><num>60</num><def></def><sym>;</sym><br />
<def></def><br />
   <kwa>type</kwa> <def>String_Access</def> <kwa>is access</kwa> <def></def><kwb>String</kwb><def></def><sym>;</sym><br />
<def></def><br />
   <kwa>procedure</kwa> <def>Free</def> <kwa>is new</kwa> <def>Ada.Unchecked_Deallocation</def> <sym>(</sym><def></def><kwb>String</kwb><def></def><sym>,</sym> <def>String_Access</def><sym>);</sym><br />
<def></def><br />
   <kwa>procedure</kwa> <def>Get_Fasta</def> <sym>(</sym><def>Seq</def> <sym>:</sym> <def></def><kwa>in out</kwa> <def>String_Access</def><sym>;</sym> <def>Length</def> <sym>:</sym> <def></def><kwa>out</kwa> <def></def><kwb>Natural</kwb><def></def><sym>)</sym> <def></def><kwa>is</kwa><br />
<def>      Ptr</def>  <sym>:</sym> <def>String_Access</def><sym>;</sym><br />
<def>      J</def><sym>,</sym> <def>K</def> <sym>:</sym> <def></def><kwb>Natural</kwb> <def></def><sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>      C</def>    <sym>:</sym> <def></def><kwb>Character</kwb><def></def><sym>;</sym><br />
<def>      EOL</def>  <sym>:</sym> <def></def><kwb>Boolean</kwb><def></def><sym>;</sym><br />
<def></def>   <kwa>begin</kwa><br />
<def>      Length</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><br />
      <kwa>loop</kwa><br />
<def>         Look_Ahead</def> <sym>(</sym><def>C</def><sym>,</sym> <def>EOL</def><sym>);</sym><br />
<def></def>         <kwa>exit when</kwa> <def>C</def> <sym>/= '&gt;'</sym> <def></def><kwa>and</kwa> <def>C</def> <sym>/= ';' ;</sym><br />
<def>         Get_Line</def> <sym>(</sym><def>Seq</def> <sym>(</sym><def></def><num>1</num> <def>.. Seq</def><sym>'</sym><def>Length</def><sym>),</sym> <def>J</def><sym>);</sym><br />
<def></def>         <kwa>if</kwa> <def>Seq</def> <sym>(</sym><def></def><num>1</num><def></def><sym>) = '&gt;'</sym> <def></def><kwa>then</kwa><br />
<def>            Put_Line</def> <sym>(</sym><def>Seq</def> <sym>(</sym><def></def><num>1</num> <def>.. J</def><sym>));</sym><br />
<def></def>         <kwa>end if</kwa><def></def><sym>;</sym><br />
<def></def>      <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def></def><br />
      <kwa>loop</kwa><br />
<def></def>         <kwa>if</kwa> <def>Length</def> <sym>+</sym> <def>Max_Length</def> <sym>&gt;</sym> <def>Seq</def><sym>'</sym><def>Length</def> <kwa>then</kwa><br />
<def>            Ptr</def> <sym>:=</sym> <def>Seq</def><sym>;</sym><br />
<def>            Seq</def> <sym>:=</sym> <def></def><kwa>new</kwa> <def></def><kwb>String</kwb> <def></def><sym>(</sym><def></def><num>1</num> <def>..</def> <num>2</num> <def></def><sym>*</sym> <def>Seq</def><sym>'</sym><def>Length</def><sym>);</sym><br />
<def>            Seq</def> <sym>(</sym><def></def><num>1</num> <def>.. Length</def><sym>) :=</sym> <def>Ptr</def> <sym>(</sym><def></def><num>1</num> <def>.. Length</def><sym>);</sym><br />
<def>            Free</def> <sym>(</sym><def>Ptr</def><sym>);</sym><br />
<def></def>         <kwa>end if</kwa><def></def><sym>;</sym><br />
<def><br />
         Get_Line</def> <sym>(</sym><def>Seq</def> <sym>(</sym><def>Length</def> <sym>+</sym> <def></def><num>1</num> <def>.. Length</def> <sym>+</sym> <def>Max_Length</def><sym>),</sym> <def>J</def><sym>);</sym><br />
<def>         K</def> <sym>:=</sym> <def>J</def> <sym>-</sym> <def>Length</def><sym>;</sym><br />
<def>         Length</def> <sym>:=</sym> <def>J</def><sym>;</sym><br />
<def></def><br />
         <kwa>if</kwa> <def>K</def> <sym>=</sym> <def>Max_Length</def> <kwa>then</kwa><br />
<def>            Skip_Line</def><sym>;</sym><br />
<def></def>         <kwa>end if</kwa><def></def><sym>;</sym><br />
<def><br />
         Look_Ahead</def> <sym>(</sym><def>C</def><sym>,</sym> <def>EOL</def><sym>);</sym><br />
<def></def><br />
         <kwa>if</kwa> <def>K</def> <sym>&lt;</sym> <def>Max_Length</def> <kwa>or else</kwa> <def>C</def> <sym>= '&gt;'</sym> <def></def><kwa>or else</kwa> <def>C</def> <sym>= ';'</sym> <def></def><kwa>then</kwa><br />
<def></def>            <kwa>return</kwa><def></def><sym>;</sym><br />
<def></def>         <kwa>end if</kwa><def></def><sym>;</sym><br />
<def></def>      <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def></def>   <kwa>exception</kwa><br />
<def></def>      <kwa>when</kwa> <def>End_Error</def> <sym>=&gt;</sym><br />
<def></def>         <kwa>return</kwa><def></def><sym>;</sym><br />
<def></def>   <kwa>end</kwa> <def>Get_Fasta</def><sym>;</sym><br />
<def></def><br />
   <kwa>procedure</kwa> <def>Reverse_Fasta</def> <sym>(</sym><def>Fasta</def> <sym>:</sym> <def></def><kwa>in out</kwa> <def></def><kwb>String</kwb><def></def><sym>)</sym> <def></def><kwa>is</kwa><br />
<def>      C</def>    <sym>:</sym> <def></def><kwb>Character</kwb><def></def><sym>;</sym><br />
<def>      L</def><sym>,</sym> <def>R</def> <sym>:</sym> <def></def><kwb>Natural</kwb><def></def><sym>;</sym><br />
<def></def>   <kwa>begin</kwa><br />
<def></def>      <kwa>for</kwa> <def>I</def> <kwa>in</kwa> <def></def><num>0</num> <def>.. Fasta</def><sym>'</sym><def>Length</def> <kwa>loop</kwa><br />
<def>         L</def> <sym>:=</sym> <def>Fasta</def><sym>'</sym><def>First</def> <sym>+</sym> <def>I</def><sym>;</sym><br />
<def>         R</def> <sym>:=</sym> <def>Fasta</def><sym>'</sym><def>Last</def> <sym>-</sym> <def>I</def><sym>;</sym><br />
<def></def>         <kwa>exit when</kwa> <def>L</def> <sym>&gt;</sym> <def>R</def><sym>;</sym><br />
<def>         C</def> <sym>:=</sym> <def>Fasta</def> <sym>(</sym><def>L</def><sym>);</sym><br />
<def>         Fasta</def> <sym>(</sym><def>L</def><sym>) :=</sym> <def>Complement</def> <sym>(</sym><def>Fasta</def> <sym>(</sym><def>R</def><sym>));</sym><br />
<def>         Fasta</def> <sym>(</sym><def>R</def><sym>) :=</sym> <def>Complement</def> <sym>(</sym><def>C</def><sym>);</sym><br />
<def></def>      <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def></def>   <kwa>end</kwa> <def>Reverse_Fasta</def><sym>;</sym><br />
<def></def><br />
   <kwa>procedure</kwa> <def>Put_Reversed_Fasta</def> <sym>(</sym><def>Fasta</def> <sym>:</sym> <def></def><kwa>in out</kwa> <def></def><kwb>String</kwb><def></def><sym>)</sym> <def></def><kwa>is</kwa><br />
<def>      L</def> <sym>:</sym> <def></def><kwb>Natural</kwb> <def></def><sym>:=</sym> <def>Fasta</def><sym>'</sym><def>Last</def><sym>;</sym><br />
<def></def>   <kwa>begin</kwa><br />
<def></def>      <kwa>while</kwa> <def>L</def> <sym>&gt;=</sym> <def>Max_Length</def> <kwa>loop</kwa><br />
<def>         Reverse_Fasta</def> <sym>(</sym><def>Fasta</def> <sym>(</sym><def>L</def> <sym>-</sym> <def>Max_Length</def> <sym>+</sym> <def></def><num>1</num> <def>.. L</def><sym>));</sym><br />
<def>         Put_Line</def> <sym>(</sym><def>Fasta</def> <sym>(</sym><def>L</def> <sym>-</sym> <def>Max_Length</def> <sym>+</sym> <def></def><num>1</num> <def>.. L</def><sym>));</sym><br />
<def>         L</def> <sym>:=</sym> <def>L</def> <sym>-</sym> <def>Max_Length</def><sym>;</sym><br />
<def></def>      <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def></def>      <kwa>if</kwa> <def>L</def> <sym>&gt;</sym> <def></def><num>0</num> <def></def><kwa>then</kwa><br />
<def>         Reverse_Fasta</def> <sym>(</sym><def>Fasta</def> <sym>(</sym><def></def><num>1</num> <def>.. L</def><sym>));</sym><br />
<def>         Put_Line</def> <sym>(</sym><def>Fasta</def> <sym>(</sym><def></def><num>1</num> <def>.. L</def><sym>));</sym><br />
<def></def>      <kwa>end if</kwa><def></def><sym>;</sym><br />
<def></def>   <kwa>end</kwa> <def>Put_Reversed_Fasta</def><sym>;</sym><br />
<def><br />
   Seq</def>    <sym>:</sym> <def>String_Access</def> <sym>:=</sym> <def></def><kwa>new</kwa> <def></def><kwb>String</kwb> <def></def><sym>(</sym><def></def><num>1</num> <def>..</def> <num>1</num><def>_024</def><sym>);</sym><br />
<def>   Length</def> <sym>:</sym> <def></def><kwb>Natural</kwb><def></def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def></def>   <kwa>loop</kwa><br />
<def>      Get_Fasta</def> <sym>(</sym><def>Seq</def><sym>,</sym> <def>Length</def><sym>);</sym><br />
<def></def>      <kwa>exit when</kwa> <def>Length</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>      Put_Reversed_Fasta</def> <sym>(</sym><def>Seq</def> <sym>(</sym><def></def><num>1</num> <def>.. Length</def><sym>));</sym><br />
<def></def>   <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def></def><kwa>end</kwa> <def>Revcomp</def><sym>;</sym><def></def><br />
</source>
