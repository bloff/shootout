<span class="hl slc">// The Computer Language Benchmarks Game</span>
<span class="hl slc">// http://shootout.alioth.debian.org/</span>
<span class="hl slc">//</span>
<span class="hl slc">// Original C contributed by Sebastien Loisel</span>
<span class="hl slc">// Conversion to C++ by Jon Harrop</span>
<span class="hl slc">// OpenMP parallelize by The Anh Tran</span>

<span class="hl dir">#include &lt;cmath&gt;</span>
<span class="hl dir">#include &lt;stdlib.h&gt;</span>
<span class="hl dir">#include &lt;stdio.h&gt;</span>

<span class="hl slc">// Use OpenMP. Supported from GCC &gt;= v4.2.xx</span>
<span class="hl slc">// need &quot;-fopenmp&quot; flag when compile</span>
<span class="hl dir">#include &lt;omp.h&gt;</span>

<span class="hl kwa">using namespace</span> std<span class="hl sym">;</span>


<span class="hl kwd">__attribute__</span><span class="hl sym">((</span><span class="hl kwb">const</span><span class="hl sym">,</span> nothrow<span class="hl sym">))</span>
<span class="hl kwb">static</span> <span class="hl kwc">inline</span>
<span class="hl kwb">double</span> <span class="hl kwd">eval_A</span><span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">,</span> <span class="hl kwb">int</span> j<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl slc">// 1.0 / (i + j) * (i + j +1) / 2 + i + 1;</span>
   <span class="hl slc">// n * (n+1) is even number. Therefore, just (&gt;&gt; 1) for (/2)</span>
   <span class="hl kwb">int</span> d <span class="hl sym">= (   ( (</span>i <span class="hl sym">+</span> j<span class="hl sym">) * (</span>i <span class="hl sym">+</span> <span class="hl num">1</span> <span class="hl sym">+</span>j<span class="hl sym">) ) &gt;&gt;</span> <span class="hl num">1</span>   <span class="hl sym">)    +</span> i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>

   <span class="hl kwa">return</span> <span class="hl num">1.0</span> <span class="hl sym">/</span> d<span class="hl sym">;</span>
<span class="hl sym">}</span>



<span class="hl kwd">__attribute__</span><span class="hl sym">((</span>nothrow<span class="hl sym">))</span>
<span class="hl kwb">static</span> <span class="hl kwc">inline</span>
<span class="hl kwb">void</span> <span class="hl kwd">eval_A_times_u</span> <span class="hl sym">(</span><span class="hl kwb">const double</span> u<span class="hl sym">[],</span> <span class="hl kwb">int</span> inRange<span class="hl sym">,</span> <span class="hl kwb">double</span> Au<span class="hl sym">[],</span> <span class="hl kwb">int</span> outRange1<span class="hl sym">,</span> <span class="hl kwb">int</span> outRange2<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span>outRange1<span class="hl sym">;</span> i <span class="hl sym">&lt;</span> outRange2<span class="hl sym">;</span> i<span class="hl sym">++)</span>
   <span class="hl sym">{</span>
      <span class="hl kwb">double</span> sum <span class="hl sym">=</span> <span class="hl num">0.0</span><span class="hl sym">;</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> j <span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> j <span class="hl sym">&lt;</span> inRange<span class="hl sym">;</span> j<span class="hl sym">++)</span>
         sum <span class="hl sym">+=</span> <span class="hl kwd">eval_A</span><span class="hl sym">(</span> i<span class="hl sym">,</span> j <span class="hl sym">) *</span> u<span class="hl sym">[</span>j<span class="hl sym">];</span>
      Au<span class="hl sym">[</span>i<span class="hl sym">] =</span> sum<span class="hl sym">;</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>


<span class="hl kwd">__attribute__</span><span class="hl sym">((</span>nothrow<span class="hl sym">))</span>
<span class="hl kwb">static</span> <span class="hl kwc">inline</span>
<span class="hl kwb">void</span> <span class="hl kwd">eval_At_times_u</span><span class="hl sym">(</span><span class="hl kwb">const double</span> u<span class="hl sym">[],</span> <span class="hl kwb">int</span> inRange<span class="hl sym">,</span> <span class="hl kwb">double</span> Au<span class="hl sym">[],</span> <span class="hl kwb">int</span> outRange1<span class="hl sym">,</span> <span class="hl kwb">int</span> outRange2<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span>outRange1<span class="hl sym">;</span> i <span class="hl sym">&lt;</span> outRange2<span class="hl sym">;</span> i<span class="hl sym">++)</span>
   <span class="hl sym">{</span>
      <span class="hl kwb">double</span> sum <span class="hl sym">=</span> <span class="hl num">0.0</span><span class="hl sym">;</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> j <span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> j <span class="hl sym">&lt;</span> inRange<span class="hl sym">;</span> j<span class="hl sym">++)</span>
         sum <span class="hl sym">+=</span> <span class="hl kwd">eval_A</span><span class="hl sym">(</span>j<span class="hl sym">,</span>i<span class="hl sym">) *</span> u<span class="hl sym">[</span>j<span class="hl sym">];</span>
      Au<span class="hl sym">[</span>i<span class="hl sym">] =</span> sum<span class="hl sym">;</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>


<span class="hl slc">// This function is executed by N threads.</span>
<span class="hl slc">// Each thread will fill its chunk only [range1 .. range2)</span>
<span class="hl kwd">__attribute__</span><span class="hl sym">((</span>nothrow<span class="hl sym">))</span>
<span class="hl kwb">static</span> <span class="hl kwc">inline</span>
<span class="hl kwb">void</span> <span class="hl kwd">eval_AtA_times_u</span><span class="hl sym">(</span><span class="hl kwb">const double</span> u<span class="hl sym">[],</span> <span class="hl kwb">double</span> AtAu<span class="hl sym">[],</span> <span class="hl kwb">double</span> v<span class="hl sym">[],</span> <span class="hl kwb">int</span> inRange<span class="hl sym">,</span> <span class="hl kwb">int</span> range1<span class="hl sym">,</span> <span class="hl kwb">int</span> range2<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwd">eval_A_times_u</span><span class="hl sym">(</span> u<span class="hl sym">,</span> inRange<span class="hl sym">,</span> v<span class="hl sym">,</span> range1<span class="hl sym">,</span> range2 <span class="hl sym">);</span>

   <span class="hl slc">// synchronize at completion of array &quot;v&quot; before going to fill AtAu.</span>
   <span class="hl slc">// Because each element of AtAu reading all elements of &quot;v&quot;</span>
   <span class="hl dir">#pragma omp barrier</span>

   <span class="hl kwd">eval_At_times_u</span><span class="hl sym">(</span> v<span class="hl sym">,</span> inRange<span class="hl sym">,</span> AtAu<span class="hl sym">,</span> range1<span class="hl sym">,</span> range2 <span class="hl sym">);</span>

   <span class="hl slc">// syn on array AtAu</span>
   <span class="hl dir">#pragma omp barrier</span>
<span class="hl sym">}</span>


<span class="hl kwb">double</span> <span class="hl kwd">spectral_game</span><span class="hl sym">(</span><span class="hl kwb">int</span> N<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwd">__attribute__</span><span class="hl sym">((</span><span class="hl kwd">aligned</span><span class="hl sym">(</span><span class="hl num">16</span><span class="hl sym">)))</span> <span class="hl kwb">double</span> u<span class="hl sym">[</span>N<span class="hl sym">];</span>
   <span class="hl kwd">__attribute__</span><span class="hl sym">((</span><span class="hl kwd">aligned</span><span class="hl sym">(</span><span class="hl num">16</span><span class="hl sym">)))</span> <span class="hl kwb">double</span> tmp<span class="hl sym">[</span>N<span class="hl sym">];</span>
   <span class="hl kwd">__attribute__</span><span class="hl sym">((</span><span class="hl kwd">aligned</span><span class="hl sym">(</span><span class="hl num">16</span><span class="hl sym">)))</span> <span class="hl kwb">double</span> v<span class="hl sym">[</span>N<span class="hl sym">];</span>

   <span class="hl kwb">double</span> vBv   <span class="hl sym">=</span> <span class="hl num">0.0</span><span class="hl sym">;</span>
   <span class="hl kwb">double</span> vv   <span class="hl sym">=</span> <span class="hl num">0.0</span><span class="hl sym">;</span>

   <span class="hl slc">// filling 1.0   only 44kB, not parallel worthy</span>
   <span class="hl slc">//#pragma omp for schedule(static)</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> N<span class="hl sym">;</span> i<span class="hl sym">++)</span>
      u<span class="hl sym">[</span> i <span class="hl sym">] =</span> <span class="hl num">1.0</span><span class="hl sym">;</span>

   <span class="hl dir">#pragma omp parallel default(shared)</span>
   <span class="hl sym">{</span>
      <span class="hl slc">// this block will be executed by NUM_THREADS</span>
      <span class="hl slc">// variable declared in this block is private for each thread</span>
      <span class="hl kwb">int</span> threadid      <span class="hl sym">=</span> <span class="hl kwd">omp_get_thread_num</span><span class="hl sym">();</span>
      <span class="hl kwb">int</span> threadcount   <span class="hl sym">=</span> <span class="hl kwd">omp_get_num_threads</span><span class="hl sym">();</span>
      <span class="hl kwb">int</span> chunk   <span class="hl sym">=</span> N <span class="hl sym">/</span> threadcount<span class="hl sym">;</span>

      <span class="hl slc">// calculate each thread's working range [range1 .. range2)   --&gt; static schedule here</span>
      <span class="hl kwb">int</span> myRange1 <span class="hl sym">=</span> threadid <span class="hl sym">*</span> chunk<span class="hl sym">;</span>
      <span class="hl kwb">int</span> myRange2 <span class="hl sym">= (</span> threadid <span class="hl sym">&lt; (</span>threadcount <span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">) )</span> ? <span class="hl sym">(</span>myRange1 <span class="hl sym">+</span> chunk<span class="hl sym">) :</span> N<span class="hl sym">;</span>

      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> ite <span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> ite <span class="hl sym">&lt;</span> <span class="hl num">10</span><span class="hl sym">;</span> ite<span class="hl sym">++)</span>
      <span class="hl sym">{</span>
         <span class="hl kwd">eval_AtA_times_u</span><span class="hl sym">(</span>u<span class="hl sym">,</span> v<span class="hl sym">,</span> tmp<span class="hl sym">,</span> N<span class="hl sym">,</span> myRange1<span class="hl sym">,</span> myRange2<span class="hl sym">);</span>
         <span class="hl kwd">eval_AtA_times_u</span><span class="hl sym">(</span>v<span class="hl sym">,</span> u<span class="hl sym">,</span> tmp<span class="hl sym">,</span> N<span class="hl sym">,</span> myRange1<span class="hl sym">,</span> myRange2<span class="hl sym">);</span>
      <span class="hl sym">}</span>

      <span class="hl slc">// multi thread adding</span>
      <span class="hl dir">#pragma omp for schedule(static) reduction( + : vBv, vv ) nowait</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> N<span class="hl sym">;</span> i<span class="hl sym">++)</span>
      <span class="hl sym">{</span>
         vv <span class="hl sym">+=</span> v<span class="hl sym">[</span> i <span class="hl sym">] *</span> v<span class="hl sym">[</span> i <span class="hl sym">];</span>
         vBv <span class="hl sym">+=</span> u<span class="hl sym">[</span> i <span class="hl sym">] *</span> v<span class="hl sym">[</span> i <span class="hl sym">];</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span> <span class="hl slc">// end parallel region</span>

   <span class="hl kwa">return</span> <span class="hl kwd">sqrt</span><span class="hl sym">(</span> vBv <span class="hl sym">/</span> vv <span class="hl sym">);</span>
<span class="hl sym">}</span>


<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">*</span>argv<span class="hl sym">[])</span>
<span class="hl sym">{</span>
   <span class="hl kwb">int</span> N <span class="hl sym">= ((</span>argc <span class="hl sym">==</span> <span class="hl num">2</span><span class="hl sym">)</span> ? <span class="hl kwd">atoi</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]) :</span> <span class="hl num">2000</span><span class="hl sym">);</span>

   <span class="hl slc">// main calculation</span>
   <span class="hl kwb">double</span> result <span class="hl sym">=</span> <span class="hl kwd">spectral_game</span><span class="hl sym">(</span>N<span class="hl sym">);</span>

   <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;%.9f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> result<span class="hl sym">);</span>
   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

