<source>
<def></def><com>(* fannkuch.ml</com><br />
<com> *</com><br />
<com> * The Great Computer Language Shootout</com><br />
<com> * http://shootout.alioth.debian.org/</com><br />
<com> *</com><br />
<com> * Contributed by Troestler Christophe</com><br />
<com> * Translated to SML by sweeks@sweeks.com.</com><br />
<com> * Modified for new output requirements based on C# solution by</com><br />
<com> *   sweeks@sweeks.com.</com><br />
<com> *)</com><def></def><br />
<br />
<kwa>val</kwa> <def>sub</def> <sym>=</sym> <def>Array.sub</def><br />
<kwa>val</kwa> <def>update</def> <sym>=</sym> <def>Array.update</def><br />
<br />
<kwa>fun</kwa> <def>countFlips perm</def> <sym>=</sym><br />
<def></def>   <kwa>let</kwa><br />
<def></def>      <kwa>fun</kwa> <def>loop c</def> <sym>=</sym><br />
<def></def>	 <kwa>let</kwa><br />
<def></def>	    <kwa>val</kwa> <def>k</def> <sym>=</sym> <def>sub</def> <sym>(</sym><def>perm</def><sym>,</sym> <def></def><num>0</num><def></def><sym>)</sym><br />
<def></def>	 <kwa>in</kwa><br />
<def></def>	    <kwa>if</kwa> <def>k</def> <sym>=</sym> <def></def><num>0</num> <def></def><kwa>then</kwa> <def>c</def><br />
	    <kwa>else</kwa><br />
<def></def>	       <kwa>let</kwa><br />
<def></def>		  <kwa>val</kwa> <def></def><sym>() =</sym><br />
<def>		     for</def> <sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def>k div</def> <num>2</num> <def></def><sym>+</sym> <def></def><num>1</num><def></def><sym>,</sym> <def></def><kwa>fn</kwa> <def>i</def> <sym>=&gt;</sym><br />
<def></def>			  <kwa>let</kwa><br />
<def></def>			     <kwa>val</kwa> <def>k_i</def> <sym>=</sym> <def>k</def> <sym>-</sym> <def>i</def><br />
			     <kwa>val</kwa> <def>perm_i</def> <sym>=</sym> <def>sub</def> <sym>(</sym><def>perm</def><sym>,</sym> <def>i</def><sym>)</sym><br />
<def></def>			  <kwa>in</kwa><br />
<def>			     update</def> <sym>(</sym><def>perm</def><sym>,</sym> <def>i</def><sym>,</sym> <def>sub</def> <sym>(</sym><def>perm</def><sym>,</sym> <def>k_i</def><sym>))</sym><br />
<def></def>			     <sym>;</sym> <def>update</def> <sym>(</sym><def>perm</def><sym>,</sym> <def>k_i</def><sym>,</sym> <def>perm_i</def><sym>)</sym><br />
<def></def>			  <kwa>end</kwa><def></def><sym>)</sym><br />
<def></def>	       <kwa>in</kwa><br />
<def>		  loop</def> <sym>(</sym><def>c</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>	       <kwa>end</kwa><br />
<def></def>	 <kwa>end</kwa><br />
<def></def>   <kwa>in</kwa><br />
<def>      loop</def> <num>0</num><br />
<def></def>   <kwa>end</kwa><br />
<def></def><br />
<kwa>fun</kwa> <def>pfannkuchen n</def> <sym>=</sym><br />
<def></def>  <kwa>let</kwa><br />
<def></def>     <kwa>val</kwa> <def>perm</def> <sym>=</sym> <def>Array.array</def> <sym>(</sym><def>n</def><sym>,</sym> <def></def><num>0</num><def></def><sym>)</sym><br />
<def></def>     <kwa>val</kwa> <def>perm1</def> <sym>=</sym> <def>Array.tabulate</def> <sym>(</sym><def>n</def><sym>,</sym> <def></def><kwa>fn</kwa> <def>i</def> <sym>=&gt;</sym> <def>i</def><sym>)</sym><br />
<def></def>     <kwa>val</kwa> <def>count</def> <sym>=</sym> <def>Array.array</def> <sym>(</sym><def>n</def><sym>,</sym> <def></def><num>0</num><def></def><sym>)</sym><br />
<def></def>     <kwa>val</kwa> <def>maxFlips</def> <sym>=</sym> <def>ref</def> <num>0</num><br />
<def></def>     <kwa>val</kwa> <def>m</def> <sym>=</sym> <def>n</def> <sym>-</sym> <def></def><num>1</num><br />
<def></def>     <kwa>val</kwa> <def>check</def> <sym>=</sym> <def>ref</def> <num>30</num><br />
<def></def>     <kwa>fun</kwa> <def>loop r</def> <sym>=</sym><br />
<def></def>        <kwa>let</kwa><br />
<def></def>           <kwa>val</kwa> <def></def><sym>() =</sym><br />
<def></def>              <kwa>if</kwa> <def></def><num>0</num> <def></def><sym>= !</sym><def>check</def> <kwa>then</kwa> <def></def><sym>()</sym><br />
<def></def>              <kwa>else</kwa><br />
<def></def>                 <sym>(</sym><def>for</def> <sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def>n</def><sym>,</sym> <def></def><kwa>fn</kwa> <def>i</def> <sym>=&gt;</sym><br />
<def>                       print</def> <sym>(</sym><def></def><kwa>Int</kwa><def>.toString</def> <sym>(</sym><def>sub</def> <sym>(</sym><def>perm1</def><sym>,</sym> <def>i</def><sym>) +</sym> <def></def><num>1</num><def></def><sym>)));</sym><br />
<def>                  print</def> <str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>;</sym><br />
<def></def>                  <kwa>Int</kwa><def>.dec check</def><sym>)</sym><br />
<def></def>           <kwa>val</kwa> <def></def><sym>() =</sym> <def>for</def> <sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def>r</def><sym>,</sym> <def></def><kwa>fn</kwa> <def>i</def> <sym>=&gt;</sym> <def>update</def> <sym>(</sym><def>count</def><sym>,</sym> <def>i</def><sym>,</sym> <def>i</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>))</sym><br />
<def></def>           <kwa>val</kwa> <def></def><sym>() =</sym><br />
<def></def>              <kwa>if</kwa> <def>sub</def> <sym>(</sym><def>perm1</def><sym>,</sym> <def></def><num>0</num><def></def><sym>) =</sym> <def></def><num>0</num> <def></def><kwa>orelse</kwa> <def>sub</def> <sym>(</sym><def>perm1</def><sym>,</sym> <def>m</def><sym>) =</sym> <def>m</def> <kwa>then</kwa> <def></def><sym>()</sym><br />
<def></def>              <kwa>else</kwa><br />
<def></def>                 <kwa>let</kwa><br />
<def></def>                    <kwa>val</kwa> <def></def><sym>() =</sym><br />
<def>                       for</def> <sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def>n</def><sym>,</sym> <def></def><kwa>fn</kwa> <def>i</def> <sym>=&gt;</sym> <def>update</def> <sym>(</sym><def>perm</def><sym>,</sym> <def>i</def><sym>,</sym> <def>sub</def> <sym>(</sym><def>perm1</def><sym>,</sym> <def>i</def><sym>)))</sym><br />
<def></def>                    <kwa>val</kwa> <def>flips</def> <sym>=</sym> <def>countFlips perm</def><br />
                 <kwa>in</kwa><br />
<def></def>                    <kwa>if</kwa> <def>flips</def> <sym>&gt; !</sym><def>maxFlips</def> <kwa>then</kwa> <def>maxFlips</def> <sym>:=</sym> <def>flips</def> <kwa>else</kwa> <def></def><sym>()</sym><br />
<def></def>                 <kwa>end</kwa><br />
<def></def>           <kwa>fun</kwa> <def>loop' r</def> <sym>=</sym><br />
<def></def>              <kwa>if</kwa> <def>r</def> <sym>=</sym> <def>n</def> <kwa>then</kwa> <def></def><sym>()</sym><br />
<def></def>              <kwa>else</kwa><br />
<def></def>                 <kwa>let</kwa><br />
<def></def>                    <kwa>val</kwa> <def>perm0</def> <sym>=</sym> <def>sub</def> <sym>(</sym><def>perm1</def><sym>,</sym> <def></def><num>0</num><def></def><sym>)</sym><br />
<def></def>                    <kwa>val</kwa> <def></def><sym>() =</sym> <def>for</def> <sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def>r</def><sym>,</sym> <def></def><kwa>fn</kwa> <def>i</def> <sym>=&gt;</sym><br />
<def>                                  update</def> <sym>(</sym><def>perm1</def><sym>,</sym> <def>i</def><sym>,</sym> <def>sub</def> <sym>(</sym><def>perm1</def><sym>,</sym> <def>i</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>)))</sym><br />
<def></def>                    <kwa>val</kwa> <def></def><sym>() =</sym> <def>update</def> <sym>(</sym><def>perm1</def><sym>,</sym> <def>r</def><sym>,</sym> <def>perm0</def><sym>)</sym><br />
<def></def>                    <kwa>val</kwa> <def></def><sym>() =</sym> <def>update</def> <sym>(</sym><def>count</def><sym>,</sym> <def>r</def><sym>,</sym> <def>sub</def> <sym>(</sym><def>count</def><sym>,</sym> <def>r</def><sym>) -</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>                 <kwa>in</kwa><br />
<def></def>                    <kwa>if</kwa> <def></def><num>0</num> <def></def><sym>&lt;</sym> <def>sub</def> <sym>(</sym><def>count</def><sym>,</sym> <def>r</def><sym>)</sym> <def></def><kwa>then</kwa> <def>loop r</def> <kwa>else</kwa> <def>loop'</def> <sym>(</sym><def>r</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>                 <kwa>end</kwa><br />
<def></def>        <kwa>in</kwa><br />
<def>           loop'</def> <num>1</num><br />
<def></def>        <kwa>end</kwa><br />
<def></def>     <kwa>val</kwa> <def></def><sym>() =</sym> <def>loop n</def><br />
  <kwa>in</kwa><br />
<def></def>     <sym>!</sym><def>maxFlips</def><br />
  <kwa>end</kwa><br />
<def></def><br />
<kwa>val</kwa> <def>n</def> <sym>=</sym> <def>valOf</def> <sym>(</sym><def></def><kwa>Int</kwa><def>.fromString</def> <sym>(</sym><def>hd</def> <sym>(</sym><def>CommandLine.arguments</def> <sym>())))</sym> <def></def><kwa>handle</kwa> <def>_</def> <sym>=&gt;</sym> <def></def><num>1</num><br />
<def></def><br />
<kwa>val</kwa> <def></def><sym>() =</sym> <def>print</def> <sym>(</sym><def>concat</def> <sym>[</sym><def></def><str>&quot;Pfannkuchen(&quot;</str><def></def><sym>,</sym> <def></def><kwa>Int</kwa><def>.toString n</def><sym>,</sym> <def></def><str>&quot;) = &quot;</str><def></def><sym>,</sym><br />
<def></def>			<kwa>Int</kwa><def>.toString</def> <sym>(</sym><def>pfannkuchen n</def><sym>),</sym> <def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>])</sym><def></def><br />
</source>
