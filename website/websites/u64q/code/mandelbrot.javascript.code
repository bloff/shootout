<source>
<def></def><br />
<com>/* The Computer Language Benchmarks Game</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com>   contributed by Thomas GODART (based on Greg Buchholz's C program) */</com><def></def><br />
<br />
<kwa>var</kwa> <def>w</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def></def><kwa>var</kwa> <def>h</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def></def><kwa>var</kwa> <def>bit_num</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><kwa>var</kwa> <def>byte_acc</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><kwa>var</kwa> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def></def><kwa>var</kwa> <def>iter</def> <sym>=</sym> <def></def><num>50</num><def></def><sym>;</sym><br />
<def></def><kwa>var</kwa> <def>x</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def></def><kwa>var</kwa> <def>y</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def></def><kwa>var</kwa> <def>limit2</def> <sym>=</sym> <def></def><num>4</num><def></def><sym>;</sym><br />
<def></def><kwa>var</kwa> <def>Zr</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def></def><kwa>var</kwa> <def>Zi</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def></def><kwa>var</kwa> <def>Cr</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def></def><kwa>var</kwa> <def>Ci</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def></def><kwa>var</kwa> <def>Tr</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def></def><kwa>var</kwa> <def>Ti</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><br />
<kwa>var</kwa> <def>h</def> <sym>=</sym> <def></def><num>3000</num><def></def><sym>;</sym><br />
<def></def><kwa>var</kwa> <def>w</def> <sym>=</sym> <def>h</def><sym>;</sym><br />
<def></def><br />
<kwc>document</kwc><def></def><sym>.</sym><def></def><kwc>write</kwc> <def></def><sym>(</sym><def></def><str>&quot;P4</str><esc>\n</esc><str>&quot;</str><def></def> <sym>+</sym> <def>w</def> <sym>+</sym> <def></def><str>&quot; &quot;</str><def></def> <sym>+</sym> <def>h</def> <sym>+</sym> <def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>);</sym><br />
<def></def><br />
<kwa>for</kwa> <def></def><sym>(</sym><def>y</def> <sym>=</sym> <def></def><num>0</num> <def></def><sym>;</sym> <def>y</def> <sym>&lt;</sym> <def>h</def> <sym>;</sym> <def>y</def><sym>++)</sym><br />
<def></def><sym>{</sym><br />
<def></def>   <kwa>for</kwa> <def></def><sym>(</sym><def>x</def> <sym>=</sym> <def></def><num>0</num> <def></def><sym>;</sym> <def>x</def> <sym>&lt;</sym> <def>w</def> <sym>;</sym> <def>x</def><sym>++)</sym><br />
<def></def>   <sym>{</sym><br />
<def>      Zr</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>Zi</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>Tr</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>Ti</def> <sym>=</sym> <def></def><num>0.0</num><def></def><sym>;</sym><br />
<def><br />
      Cr</def> <sym>= (</sym><def></def><num>2.0</num> <def></def><sym>*</sym> <def>x</def> <sym>/</sym> <def>w</def> <sym>-</sym> <def></def><num>1.5</num><def></def><sym>);</sym> <def>Ci</def> <sym>= (</sym><def></def><num>2.0</num> <def></def><sym>*</sym> <def>y</def> <sym>/</sym> <def>h</def> <sym>-</sym> <def></def><num>1.0</num><def></def><sym>);</sym><br />
<def></def><br />
      <kwa>for</kwa> <def></def><sym>(</sym><def>i</def> <sym>=</sym> <def></def><num>0</num> <def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>iter</def> <sym>&amp;&amp; (</sym><def>Tr</def> <sym>+</sym> <def>Ti</def> <sym>&lt;=</sym> <def>limit2</def><sym>) ;</sym> <def>i</def><sym>++)</sym><br />
<def></def>      <sym>{</sym><br />
<def>         Zi</def> <sym>=</sym> <def></def><num>2.0</num> <def></def><sym>*</sym> <def>Zr</def> <sym>*</sym> <def>Zi</def> <sym>+</sym> <def>Ci</def><sym>;</sym><br />
<def>         Zr</def> <sym>=</sym> <def>Tr</def> <sym>-</sym> <def>Ti</def> <sym>+</sym> <def>Cr</def><sym>;</sym><br />
<def>         Tr</def> <sym>=</sym> <def>Zr</def> <sym>*</sym> <def>Zr</def><sym>;</sym><br />
<def>         Ti</def> <sym>=</sym> <def>Zi</def> <sym>*</sym> <def>Zi</def><sym>;</sym><br />
<def></def>      <sym>}</sym><br />
<def><br />
      byte_acc</def> <sym>=</sym> <def>byte_acc</def> <sym>&lt;&lt;</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>Tr</def> <sym>+</sym> <def>Ti</def> <sym>&lt;=</sym> <def>limit2</def><sym>)</sym> <def>byte_acc</def> <sym>=</sym> <def>byte_acc</def> <sym>|</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def><br />
      bit_num</def><sym>++;</sym><br />
<def></def><br />
      <kwa>if</kwa> <def></def><sym>(</sym><def>bit_num</def> <sym>==</sym> <def></def><num>8</num><def></def><sym>)</sym><br />
<def></def>      <sym>{</sym><br />
<def></def>         <kwc>document</kwc><def></def><sym>.</sym><def></def><kwc>write</kwc> <def></def><sym>(</sym><def></def><kwc>String</kwc><def></def><sym>.</sym><def></def><kwc>fromCharCode</kwc><def></def><sym>(</sym><def>byte_acc</def><sym>));</sym><br />
<def>         byte_acc</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>         bit_num</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>      <kwa>else if</kwa> <def></def><sym>(</sym><def>x</def> <sym>==</sym> <def>w</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>      <sym>{</sym><br />
<def>         byte_acc</def> <sym>=</sym> <def>byte_acc</def> <sym>&lt;&lt; (</sym><def></def><num>8</num> <def></def><sym>-</sym> <def>w</def> <sym>%</sym> <def></def><num>8</num><def></def><sym>);</sym><br />
<def></def>         <kwc>document</kwc><def></def><sym>.</sym><def></def><kwc>write</kwc> <def></def><sym>(</sym><def></def><kwc>String</kwc><def></def><sym>.</sym><def></def><kwc>fromCharCode</kwc><def></def><sym>(</sym><def>byte_acc</def><sym>));</sym><br />
<def>         byte_acc</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>         bit_num</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
