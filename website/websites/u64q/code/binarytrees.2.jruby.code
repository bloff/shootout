<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://shootout.alioth.debian.org</span>
<span class="hl slc">#</span>
<span class="hl slc"># contributed by Jesse Millikan</span>
<span class="hl slc"># Modified by Wesley Moxam and Michael Klaus</span>


<span class="hl kwa">def</span> <span class="hl kwd">item_check</span><span class="hl sym">(</span>left<span class="hl sym">,</span> item<span class="hl sym">,</span> right<span class="hl sym">)</span>
  <span class="hl kwa">return</span> item <span class="hl kwa">if</span> left<span class="hl sym">.</span><span class="hl kwa">nil</span><span class="hl sym">?</span>
  item <span class="hl sym">+</span> <span class="hl kwd">item_check</span><span class="hl sym">(*</span>left<span class="hl sym">) -</span> <span class="hl kwd">item_check</span><span class="hl sym">(*</span>right<span class="hl sym">)</span>
<span class="hl kwa">end</span>

<span class="hl kwa">def</span> <span class="hl kwd">bottom_up_tree</span><span class="hl sym">(</span>item<span class="hl sym">,</span> depth<span class="hl sym">)</span>
  <span class="hl kwa">return</span> <span class="hl sym">[</span><span class="hl kwa">nil</span><span class="hl sym">,</span> item<span class="hl sym">,</span> <span class="hl kwa">nil</span><span class="hl sym">]</span> <span class="hl kwa">if</span> depth <span class="hl sym">==</span> <span class="hl num">0</span>
  item_item <span class="hl sym">=</span> <span class="hl num">2</span> <span class="hl sym">*</span> item
  depth <span class="hl sym">-=</span> <span class="hl num">1</span>
  <span class="hl sym">[</span><span class="hl kwd">bottom_up_tree</span><span class="hl sym">(</span>item_item <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> depth<span class="hl sym">),</span> item<span class="hl sym">,</span> <span class="hl kwd">bottom_up_tree</span><span class="hl sym">(</span>item_item<span class="hl sym">,</span> depth<span class="hl sym">)]</span>
<span class="hl kwa">end</span>

max_depth <span class="hl sym">=</span> <span class="hl kwc">ARGV</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">].</span>to_i
min_depth <span class="hl sym">=</span> <span class="hl num">4</span>

max_depth <span class="hl sym">= [</span>min_depth <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">,</span> max_depth<span class="hl sym">].</span>max

stretch_depth <span class="hl sym">=</span> max_depth <span class="hl sym">+</span> <span class="hl num">1</span>
stretch_tree <span class="hl sym">=</span> <span class="hl kwd">bottom_up_tree</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> stretch_depth<span class="hl sym">)</span>

puts <span class="hl str">&quot;stretch tree of depth #{stretch_depth}</span><span class="hl esc">\t</span> <span class="hl str">check: #{item_check(*stretch_tree)}&quot;</span>
stretch_tree <span class="hl sym">=</span> <span class="hl kwa">nil</span>

long_lived_tree <span class="hl sym">=</span> <span class="hl kwd">bottom_up_tree</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> max_depth<span class="hl sym">)</span>

base_depth <span class="hl sym">=</span> max_depth <span class="hl sym">+</span> min_depth
min_depth<span class="hl sym">.</span><span class="hl kwd">step</span><span class="hl sym">(</span>max_depth <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">)</span> <span class="hl kwa">do</span> <span class="hl sym">|</span>depth<span class="hl sym">|</span>
  iterations <span class="hl sym">=</span> <span class="hl num">2</span> <span class="hl sym">** (</span>base_depth <span class="hl sym">-</span> depth<span class="hl sym">)</span>

  check <span class="hl sym">=</span> <span class="hl num">0</span>

  <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl num">1</span><span class="hl sym">..</span>iterations
    temp_tree <span class="hl sym">=</span> <span class="hl kwd">bottom_up_tree</span><span class="hl sym">(</span>i<span class="hl sym">,</span> depth<span class="hl sym">)</span>
    check <span class="hl sym">+=</span> <span class="hl kwd">item_check</span><span class="hl sym">(*</span>temp_tree<span class="hl sym">)</span>

    temp_tree <span class="hl sym">=</span> <span class="hl kwd">bottom_up_tree</span><span class="hl sym">(-</span>i<span class="hl sym">,</span> depth<span class="hl sym">)</span>
    check <span class="hl sym">+=</span> <span class="hl kwd">item_check</span><span class="hl sym">(*</span>temp_tree<span class="hl sym">)</span>
  <span class="hl kwa">end</span>

  puts <span class="hl str">&quot;#{iterations * 2}</span><span class="hl esc">\t</span> <span class="hl str">trees of depth #{depth}</span><span class="hl esc">\t</span> <span class="hl str">check: #{check}&quot;</span>
<span class="hl kwa">end</span>

puts <span class="hl str">&quot;long lived tree of depth #{max_depth}</span><span class="hl esc">\t</span> <span class="hl str">check: #{item_check(*long_lived_tree)}&quot;</span>


