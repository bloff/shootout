<span class="hl slc">;;   The Computer Language Benchmarks Game</span>
<span class="hl slc">;;   http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; From: Manuel Giraud</span>
<span class="hl slc">;;; Nicer rewrite: Nicolas Neuss</span>
<span class="hl slc">;;; Modified by Juho Snellman 2005-10-26</span>
<span class="hl slc">;;;  * Change the node representation from a struct to an improper list</span>
<span class="hl slc">;;;    (saves 8 bytes for each node on SBCL/CMUCL)</span>
<span class="hl slc">;;;  * Use NIL for leaf nodes, as in the Haskell solution</span>
<span class="hl slc">;;;  * Add command-line parsing for non-CMUCL implementations</span>
<span class="hl slc">;;; De-optimized by Isaac Gouy</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; Modified by Witali Kusnezow 2009-01-20</span>
<span class="hl slc">;;;  * simplified structure of leaf nodes</span>
<span class="hl slc">;;;  * optimize GC usage</span>
<span class="hl slc">;;;  * optimize all functions</span>

<span class="hl slc">;;; Node is either (DATA) (for leaf nodes) or an improper list (DATA LEFT . RIGHT)</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> build<span class="hl sym">-</span>btree <span class="hl sym">(</span>item depth<span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>fixnum item depth<span class="hl sym">))</span>
  <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">zerop</span> depth<span class="hl sym">) (</span><span class="hl kwa">list</span> item<span class="hl sym">)</span>
      <span class="hl sym">(</span>let <span class="hl sym">((</span>item2 <span class="hl sym">(+</span> item item<span class="hl sym">))</span>
            <span class="hl sym">(</span>depth<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">-</span> depth<span class="hl sym">)))</span>
        <span class="hl sym">(</span>declare <span class="hl sym">(</span>fixnum item2 depth<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">))</span>
        <span class="hl sym">(</span><span class="hl kwa">cons</span> item
              <span class="hl sym">(</span><span class="hl kwa">cons</span> <span class="hl sym">(</span>build<span class="hl sym">-</span>btree <span class="hl sym">(</span>the fixnum <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">-</span> item2<span class="hl sym">))</span> depth<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
                    <span class="hl sym">(</span>build<span class="hl sym">-</span>btree item2 depth<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">))))))</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> check<span class="hl sym">-</span>node <span class="hl sym">(</span>node<span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>values fixnum<span class="hl sym">))</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>data <span class="hl sym">(</span><span class="hl kwa">car</span> node<span class="hl sym">))</span>
        <span class="hl sym">(</span>kids <span class="hl sym">(</span><span class="hl kwa">cdr</span> node<span class="hl sym">)))</span>
    <span class="hl sym">(</span>declare <span class="hl sym">(</span>fixnum data<span class="hl sym">))</span>
    <span class="hl sym">(</span><span class="hl kwa">if</span> kids
        <span class="hl sym">(- (+</span> data <span class="hl sym">(</span>check<span class="hl sym">-</span>node <span class="hl sym">(</span><span class="hl kwa">car</span> kids<span class="hl sym">)))</span>
           <span class="hl sym">(</span>check<span class="hl sym">-</span>node <span class="hl sym">(</span><span class="hl kwa">cdr</span> kids<span class="hl sym">)))</span>
        data<span class="hl sym">)))</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> loop<span class="hl sym">-</span>depths <span class="hl sym">(</span><span class="hl kwa">max</span><span class="hl sym">-</span>depth <span class="hl sym">&amp;</span>key <span class="hl sym">(</span><span class="hl kwa">min</span><span class="hl sym">-</span>depth <span class="hl num">4</span><span class="hl sym">))</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">type</span> fixnum <span class="hl kwa">max</span><span class="hl sym">-</span>depth <span class="hl kwa">min</span><span class="hl sym">-</span>depth<span class="hl sym">))</span>
  <span class="hl sym">(</span>loop for d of<span class="hl sym">-</span><span class="hl kwa">type</span> fixnum from <span class="hl kwa">min</span><span class="hl sym">-</span>depth by <span class="hl num">2</span> upto <span class="hl kwa">max</span><span class="hl sym">-</span>depth do
       <span class="hl sym">(</span>loop with iterations of<span class="hl sym">-</span><span class="hl kwa">type</span> fixnum <span class="hl sym">= (</span>ash <span class="hl num">1</span> <span class="hl sym">(+</span> <span class="hl kwa">max</span><span class="hl sym">-</span>depth <span class="hl kwa">min</span><span class="hl sym">-</span>depth <span class="hl sym">(-</span> d<span class="hl sym">)))</span>
          for i of<span class="hl sym">-</span><span class="hl kwa">type</span> fixnum from <span class="hl num">1</span> upto iterations
          do <span class="hl sym">(</span><span class="hl kwa">gc</span><span class="hl sym">-</span>on<span class="hl sym">)(</span><span class="hl kwa">gc</span><span class="hl sym">-</span>off<span class="hl sym">)</span>
          sum <span class="hl sym">(+ (</span>the fixnum <span class="hl sym">(</span>check<span class="hl sym">-</span>node <span class="hl sym">(</span>build<span class="hl sym">-</span>btree i d<span class="hl sym">)))</span>
                 <span class="hl sym">(</span>the fixnum <span class="hl sym">(</span>check<span class="hl sym">-</span>node <span class="hl sym">(</span>build<span class="hl sym">-</span>btree <span class="hl sym">(-</span> i<span class="hl sym">)</span> d<span class="hl sym">))))</span>
          into result of<span class="hl sym">-</span><span class="hl kwa">type</span> fixnum
          finally
            <span class="hl sym">(</span>format t <span class="hl str">&quot;~D	 trees of depth ~D	 check: ~D~%&quot;</span>
                    <span class="hl sym">(</span>the fixnum <span class="hl sym">(+</span> iterations iterations <span class="hl sym">))</span> d result<span class="hl sym">)</span>
            <span class="hl sym">(</span><span class="hl kwa">gc</span><span class="hl sym">-</span>on<span class="hl sym">))))</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> main <span class="hl sym">(&amp;</span>optional <span class="hl sym">(</span>n <span class="hl sym">(</span>parse<span class="hl sym">-</span>integer
                           <span class="hl sym">(</span><span class="hl kwa">or</span> <span class="hl sym">(</span><span class="hl kwa">car</span> <span class="hl sym">(</span><span class="hl kwa">last</span> #<span class="hl sym">+</span>sbcl sb<span class="hl sym">-</span>ext<span class="hl sym">:*</span>posix<span class="hl sym">-</span>argv<span class="hl sym">*</span>
                                          #<span class="hl sym">+</span>cmu  extensions<span class="hl sym">:*</span><span class="hl kwa">command</span><span class="hl sym">-</span><span class="hl kwa">line</span><span class="hl sym">-</span>strings<span class="hl sym">*</span>
                                          #<span class="hl sym">+</span>gcl  si<span class="hl sym">::*</span><span class="hl kwa">command</span><span class="hl sym">-</span>args<span class="hl sym">*))</span>
                               <span class="hl str">&quot;1&quot;</span><span class="hl sym">))))</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">type</span> <span class="hl sym">(</span>integer <span class="hl num">0 255</span><span class="hl sym">)</span> n<span class="hl sym">))</span>
  <span class="hl sym">(</span>format t <span class="hl str">&quot;stretch tree of depth ~D	 check: ~D~%&quot;</span> <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">+</span> n<span class="hl sym">) (</span>check<span class="hl sym">-</span>node <span class="hl sym">(</span>build<span class="hl sym">-</span>btree <span class="hl num">0</span> <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">+</span> n<span class="hl sym">))))</span>
  <span class="hl sym">(</span>let <span class="hl sym">((*</span><span class="hl kwa">print</span><span class="hl sym">-</span>pretty<span class="hl sym">*</span> nil<span class="hl sym">) (</span>long<span class="hl sym">-</span>lived<span class="hl sym">-</span>tree <span class="hl sym">(</span>build<span class="hl sym">-</span>btree <span class="hl num">0</span> n<span class="hl sym">)))</span>
    <span class="hl sym">(</span>sb<span class="hl sym">-</span>ext<span class="hl sym">:</span>purify<span class="hl sym">)</span>
    <span class="hl sym">(</span>loop<span class="hl sym">-</span>depths n<span class="hl sym">)</span>
    <span class="hl sym">(</span>format t <span class="hl str">&quot;long lived tree of depth ~D	 check: ~D~%&quot;</span> n <span class="hl sym">(</span>check<span class="hl sym">-</span>node long<span class="hl sym">-</span>lived<span class="hl sym">-</span>tree<span class="hl sym">))))</span>
