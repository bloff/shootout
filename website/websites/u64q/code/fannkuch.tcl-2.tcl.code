<source>
<def></def><slc>#!/usr/bin/tclsh</slc><br />
<def></def><slc>##</slc><br />
<def></def><slc>## The Computer Lannguage Shootout</slc><br />
<def></def><slc>## http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>## Contributed by Heiner Marxen</slc><br />
<def></def><slc>##</slc><br />
<def></def><slc>## &quot;fannkuch&quot;	for Tcl</slc><br />
<def></def><slc>## Call:	tclsh fannkuch.tcl 9</slc><br />
<def></def><slc>##</slc><br />
<def></def><slc>## $Id: fannkuch.tcl-2.tcl.code,v 1.1 2008-08-05 04:40:15 igouy-guest Exp $</slc><br />
<def></def><br />
<kwa>proc</kwa> <def>fannkuch</def> <sym>{</sym><def>n</def><sym>} {</sym><br />
<def></def>    <kwa>if</kwa> <def></def><sym>{</sym><def></def><kwb>$n</kwb> <def></def><sym>&lt;</sym> <def></def><num>1</num><def></def><sym>} {</sym><br />
<def></def>	<kwa>return</kwa> <def></def><num>0</num><br />
<def></def>    <sym>}</sym><br />
<def></def>    <kwa>set</kwa> <def>n1</def> <sym>[</sym><def></def><kwa>expr</kwa> <def></def><sym>{</sym><def></def><kwb>$n</kwb> <def></def><sym>-</sym> <def></def><num>1</num><def></def><sym>}]		;</sym><def></def><slc># just caches n-1</slc><br />
<def></def><br />
    <kwa>set</kwa> <def>nL</def> <sym>[</sym><def></def><kwa>list</kwa><def></def><sym>]			;</sym><def></def><slc># caches list &lt; $n</slc><br />
<def></def>    <kwa>for</kwa> <def></def><sym>{</sym><def></def><kwa>set</kwa> <def>i</def> <num>0</num><def></def><sym>} {</sym><def></def><kwb>$i</kwb> <def></def><sym>&lt;</sym> <def></def><kwb>$n</kwb><def></def><sym>} {</sym><def></def><kwa>incr</kwa> <def>i</def><sym>} {</sym><br />
<def></def>	<kwa>lappend</kwa> <def>nL</def> <kwb>$i</kwb><br />
<def></def>    <sym>}</sym><br />
<def></def>    <kwa>foreach</kwa> <def>j</def> <kwb>$nL</kwb> <def></def><sym>{</sym><br />
<def></def>	<kwa>set</kwa> <def>L</def> <sym>[</sym><def></def><kwa>list</kwa><def></def><sym>]</sym><br />
<def></def>	<kwa>set</kwa> <def>k</def> <kwb>$j</kwb><br />
<def></def>	<kwa>for</kwa> <def></def><sym>{</sym><def></def><kwa>set</kwa> <def>i</def> <num>0</num><def></def><sym>} {</sym><def></def><kwb>$i</kwb> <def></def><sym>&lt;</sym> <def></def><kwb>$k</kwb><def></def><sym>} {</sym><def></def><kwa>incr</kwa> <def>i</def><sym>;</sym> <def></def><kwa>incr</kwa> <def>k</def> <kwc>-1</kwc><def></def><sym>} {</sym><br />
<def></def>	    <kwa>lappend</kwa> <def>L</def> <kwb>$i $k</kwb><br />
<def></def>	<sym>}</sym><br />
<def></def>	<kwa>set</kwa> <def>IK</def><sym>(</sym><def></def><kwb>$j</kwb><def></def><sym>)</sym> <def></def><kwb>$L</kwb>		<def></def><sym>;</sym><def></def><slc># caches inner loop as above</slc><br />
<def></def>	<sym>;</sym><def></def><slc># quadratic overhead is ok for factorial usage</slc><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <kwa>foreach</kwa> <def>i</def> <kwb>$nL</kwb> <def></def><sym>{</sym><br />
<def></def>	<kwa>set</kwa> <def>perm1</def><sym>(</sym><def></def><kwb>$i</kwb><def></def><sym>)</sym> <def></def><kwb>$i</kwb>		<def></def><sym>;</sym><def></def><slc># initial (trivial) permu</slc><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <kwa>set</kwa> <def>r</def>        <kwb>$n</kwb><br />
<def></def>    <kwa>set</kwa> <def>didpr</def>    <num>0</num><br />
<def></def>    <kwa>set</kwa> <def>flipsMax</def> <num>0</num><br />
<def></def>    <kwa>while</kwa> <def></def><num>1</num> <def></def><sym>{</sym><br />
<def></def>	<kwa>if</kwa> <def></def><sym>{</sym><def></def><kwb>$didpr</kwb> <def></def><sym>&lt;</sym> <def></def><num>30</num><def></def><sym>} {</sym><br />
<def></def>	    <kwa>foreach</kwa> <def>i</def> <kwb>$nL</kwb> <def></def><sym>{</sym><br />
<def></def>		<kwa>puts</kwa> <def></def><kwc>-nonewline</kwc> <def></def><str>&quot;[expr {1 + $perm1($i)}]&quot;</str><def></def><br />
	    <sym>}</sym><br />
<def></def>	    <kwa>puts</kwa> <def></def><str>&quot;&quot;</str><def></def><br />
	    <kwa>incr</kwa> <def>didpr</def><br />
	<sym>}</sym><br />
<def></def>	<kwa>for</kwa> <def></def><sym>{} {</sym><def></def><kwb>$r</kwb> <def></def><sym>!=</sym> <def></def><num>1</num><def></def><sym>} {</sym><def></def><kwa>incr</kwa> <def>r</def> <kwc>-1</kwc><def></def><sym>} {</sym><br />
<def></def>	    <kwa>set</kwa> <def>count</def><sym>([</sym><def></def><kwa>expr</kwa> <def></def><sym>{</sym><def></def><kwb>$r</kwb><def></def><kwc>-1</kwc><def></def><sym>}])</sym> <def></def><kwb>$r</kwb><br />
<def></def>	<sym>}</sym><br />
<def></def><br />
	<kwa>if</kwa> <def></def><sym>{! (</sym><def></def><kwb>$perm1</kwb><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>) ==</sym> <def></def><num>0</num>  <def></def><sym>||</sym>  <def></def><kwb>$perm1</kwb><def></def><sym>(</sym><def></def><kwb>$n1</kwb><def></def><sym>) ==</sym> <def></def><kwb>$n1</kwb><def></def><sym>)} {</sym><br />
<def></def>	    <kwa>set</kwa> <def>flips</def> <num>0</num><br />
<def></def><br />
	    <sym>;</sym><def></def><slc>#array set perm [array get perm1]	;# is slower</slc><br />
<def></def>	    <kwa>foreach</kwa> <def>i</def> <kwb>$nL</kwb> <def></def><sym>{</sym><br />
<def></def>		<kwa>set</kwa> <def>perm</def><sym>(</sym><def></def><kwb>$i</kwb><def></def><sym>)</sym> <def></def><kwb>$perm1</kwb><def></def><sym>(</sym><def></def><kwb>$i</kwb><def></def><sym>)		;</sym><def></def><slc># perm = perm1</slc><br />
<def></def>	    <sym>}</sym><br />
<def></def>	    <kwa>for</kwa> <def></def><sym>{</sym><def></def><kwa>set</kwa> <def>k</def> <kwb>$perm</kwb><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>)} {</sym><def></def><kwb>$k</kwb><def></def><sym>} {</sym><def></def><kwa>set</kwa> <def>k</def> <kwb>$perm</kwb><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>)} {</sym><br />
<def></def>		<sym>;</sym><def></def><slc>#for {set i 0} {$i &lt; $k} {incr i; incr k -1}</slc><br />
<def></def>		<kwa>foreach</kwa> <def></def><sym>{</sym><def>i k</def><sym>}</sym> <def></def><kwb>$IK</kwb><def></def><sym>(</sym><def></def><kwb>$k</kwb><def></def><sym>) {</sym><br />
<def></def>		    <kwa>set</kwa> <def>t</def> <kwb>$perm</kwb><def></def><sym>(</sym><def></def><kwb>$i</kwb><def></def><sym>)</sym><br />
<def></def>		    <kwa>set</kwa>    <def>perm</def><sym>(</sym><def></def><kwb>$i</kwb><def></def><sym>)</sym> <def></def><kwb>$perm</kwb><def></def><sym>(</sym><def></def><kwb>$k</kwb><def></def><sym>)</sym><br />
<def></def>		    <kwa>set</kwa>              <def>perm</def><sym>(</sym><def></def><kwb>$k</kwb><def></def><sym>)</sym> <def></def><kwb>$t</kwb><br />
<def></def>		    <sym>;</sym><def></def><slc># the foreach exchange approach is much slower, here</slc><br />
<def></def>		<sym>}</sym><br />
<def></def>		<kwa>incr</kwa> <def>flips</def><br />
	    <sym>}</sym><br />
<def></def><br />
	    <kwa>if</kwa> <def></def><sym>{</sym><def></def><kwb>$flipsMax</kwb> <def></def><sym>&lt;</sym> <def></def><kwb>$flips</kwb><def></def><sym>} {</sym><br />
<def></def>		<kwa>set</kwa> <def>flipsMax</def> <kwb>$flips</kwb><br />
<def></def>	    <sym>}</sym><br />
<def></def>	<sym>}</sym><br />
<def></def><br />
	<kwa>while</kwa> <def></def><num>1</num> <def></def><sym>{</sym><br />
<def></def>	    <kwa>if</kwa> <def></def><sym>{</sym><def></def><kwb>$r</kwb> <def></def><sym>==</sym> <def></def><kwb>$n</kwb><def></def><sym>} {</sym><br />
<def></def>		<kwa>return</kwa> <def></def><kwb>$flipsMax</kwb><br />
<def></def>	    <sym>}</sym><br />
<def></def>	    <sym>;</sym><def></def><slc># rotate down perm[0..r] by one</slc><br />
<def></def>	    <kwa>set</kwa> <def>perm0</def> <kwb>$perm1</kwb><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>)</sym><br />
<def></def>	    <kwa>for</kwa> <def></def><sym>{</sym><def></def><kwa>set</kwa> <def>i</def> <num>0</num><def></def><sym>} {</sym><def></def><kwb>$i</kwb> <def></def><sym>&lt;</sym> <def></def><kwb>$r</kwb><def></def><sym>} {} {</sym><br />
<def></def>		<kwa>set</kwa> <def>perm1</def><sym>(</sym><def></def><kwb>$i</kwb><def></def><sym>)</sym> <def></def><kwb>$perm1</kwb><def></def><sym>([</sym><def></def><kwa>incr</kwa> <def>i</def><sym>])	;</sym><def></def><slc># tricky: increment embedded</slc><br />
<def></def>	    <sym>}</sym><br />
<def></def>	    <kwa>set</kwa> <def>perm1</def><sym>(</sym><def></def><kwb>$r</kwb><def></def><sym>)</sym> <def></def><kwb>$perm0</kwb><br />
<def></def>	    <kwa>if</kwa> <def></def><sym>{[</sym><def></def><kwa>incr</kwa> <def>count</def><sym>(</sym><def></def><kwb>$r</kwb><def></def><sym>)</sym> <def></def><kwc>-1</kwc><def></def><sym>] &gt;</sym> <def></def><num>0</num><def></def><sym>} {</sym><br />
<def></def>		<kwa>break</kwa><br />
<def></def>	    <sym>}</sym><br />
<def></def>	    <kwa>incr</kwa> <def>r</def><br />
	<sym>}</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwa>proc</kwa> <def>main</def> <sym>{</sym><def>argv</def><sym>} {</sym><br />
<def></def>    <kwa>set</kwa> <def>n</def> <num>0</num><br />
<def></def>    <kwa>if</kwa> <def></def><sym>{[</sym><def></def><kwa>llength</kwa> <def></def><kwb>$argv</kwb><def></def><sym>]} {</sym><br />
<def></def>	<kwa>set</kwa> <def>n</def> <sym>[</sym><def></def><kwa>lindex</kwa> <def></def><kwb>$argv</kwb> <def></def><num>0</num><def></def><sym>]</sym><br />
<def></def>    <sym>}</sym><br />
<def></def>    <kwa>puts</kwa> <def></def><str>&quot;Pfannkuchen($n) = [fannkuch $n]&quot;</str><def></def><br />
    <kwa>return</kwa> <def></def><num>0</num><br />
<def></def><sym>}</sym><br />
<def><br />
main</def> <kwb>$argv</kwb><def></def><br />
</source>
