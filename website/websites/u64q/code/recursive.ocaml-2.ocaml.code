<source>
<def></def><com>(* recursive.ml</com><br />
<com> *</com><br />
<com> * The Great Computer Language Shootout</com><br />
<com> * http://shootout.alioth.debian.org/</com><br />
<com> *</com><br />
<com> * Contributed by Christophe TROESTLER</com><br />
<com> *)</com><def></def><br />
<br />
<kwa>let rec</kwa> <def>ack x y</def> <sym>=</sym><br />
<def></def>  <kwa>if</kwa> <def>x</def> <sym>=</sym> <def></def><num>0</num> <def></def><kwa>then</kwa> <def>y</def> <sym>+</sym> <def></def><num>1</num><br />
<def></def>  <kwa>else if</kwa> <def>y</def> <sym>=</sym> <def></def><num>0</num> <def></def><kwa>then</kwa> <def>ack</def> <sym>(</sym><def>x</def><sym>-</sym><def></def><num>1</num><def></def><sym>)</sym> <def></def><num>1</num><br />
<def></def>  <kwa>else</kwa> <def>ack</def> <sym>(</sym><def>x</def><sym>-</sym><def></def><num>1</num><def></def><sym>) (</sym><def>ack x</def> <sym>(</sym><def>y</def><sym>-</sym><def></def><num>1</num><def></def><sym>))</sym><br />
<def></def><br />
<kwa>let rec</kwa> <def>fib n</def> <sym>=</sym> <def></def><kwa>if</kwa> <def>n</def> <sym>&lt;</sym> <def></def><num>2</num> <def></def><kwa>then</kwa> <def></def><num>1</num> <def></def><kwa>else</kwa> <def>fib</def><sym>(</sym><def>n</def><sym>-</sym><def></def><num>2</num><def></def><sym>) +</sym> <def>fib</def><sym>(</sym><def>n</def><sym>-</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def></def><br />
<kwa>let rec</kwa> <def>fib_fp n</def> <sym>=</sym><br />
<def></def> <kwa>if</kwa> <def>n</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>. ||</sym> <def>n</def> <sym>=</sym> <def></def><num>1</num><def></def><sym>.</sym> <def></def><kwa>then</kwa> <def></def><num>1</num><def></def><sym>.</sym> <def></def><kwa>else</kwa> <def>fib_fp</def><sym>(</sym><def>n</def> <sym>-.</sym> <def></def><num>2</num><def></def><sym>.) +.</sym> <def>fib_fp</def><sym>(</sym><def>n</def> <sym>-.</sym> <def></def><num>1</num><def></def><sym>.)</sym><br />
<def></def><br />
<kwa>let rec</kwa> <def>tak x y z</def> <sym>=</sym><br />
<def></def>  <kwa>if</kwa> <def>y</def> <sym>&lt;</sym> <def>x</def> <kwa>then</kwa> <def>tak</def> <sym>(</sym><def>tak</def> <sym>(</sym><def>x</def><sym>-</sym><def></def><num>1</num><def></def><sym>)</sym> <def>y z</def><sym>) (</sym><def>tak</def> <sym>(</sym><def>y</def><sym>-</sym><def></def><num>1</num><def></def><sym>)</sym> <def>z x</def><sym>) (</sym><def>tak</def> <sym>(</sym><def>z</def><sym>-</sym><def></def><num>1</num><def></def><sym>)</sym> <def>x y</def><sym>)</sym> <def></def><kwa>else</kwa> <def>z</def><br />
<br />
<kwa>let rec</kwa> <def>tak_fp x y z</def> <sym>=</sym><br />
<def></def>  <kwa>if</kwa> <def>y</def> <sym>&gt;=</sym> <def>x</def> <kwa>then</kwa> <def>z</def> <kwa>else</kwa><br />
<def>    tak_fp</def> <sym>(</sym><def>tak_fp</def> <sym>(</sym><def>x</def> <sym>-.</sym> <def></def><num>1</num><def></def><sym>.)</sym> <def>y z</def><sym>) (</sym><def>tak_fp</def> <sym>(</sym><def>y</def> <sym>-.</sym> <def></def><num>1</num><def></def><sym>.)</sym> <def>z x</def><sym>) (</sym><def>tak_fp</def> <sym>(</sym><def>z</def> <sym>-.</sym> <def></def><num>1</num><def></def><sym>.)</sym> <def>x y</def><sym>)</sym><br />
<def></def><br />
<br />
<kwa>let</kwa> <def></def><sym>() =</sym><br />
<def></def>  <kwa>let</kwa> <def>n</def> <sym>=</sym> <def>int_of_string</def><sym>(</sym><def></def><kwc>Array</kwc><def></def><sym>.</sym><def>get</def> <kwc>Sys</kwc><def></def><sym>.</sym><def>argv</def> <num>1</num><def></def><sym>) -</sym> <def></def><num>1</num> <def></def><kwa>in</kwa><br />
<def></def>  <kwc>Printf</kwc><def></def><sym>.</sym><def>printf</def> <str>&quot;Ack(3,%d): %d</str><esc>\n</esc><str>&quot;</str><def></def> <sym>(</sym><def>n</def><sym>+</sym><def></def><num>1</num><def></def><sym>) (</sym><def>ack</def> <num>3</num> <def></def><sym>(</sym><def>n</def><sym>+</sym><def></def><num>1</num><def></def><sym>));</sym><br />
<def></def>  <kwc>Printf</kwc><def></def><sym>.</sym><def>printf</def> <str>&quot;Fib(%.1f): %.1f</str><esc>\n</esc><str>&quot;</str><def></def> <sym>(</sym><def></def><num>28</num><def></def><sym>. +.</sym> <def></def><kwb>float</kwb> <def>n</def><sym>) (</sym><def>fib_fp</def> <sym>(</sym><def></def><num>28</num><def></def><sym>. +.</sym> <def></def><kwb>float</kwb> <def>n</def><sym>));</sym><br />
<def></def>  <kwc>Printf</kwc><def></def><sym>.</sym><def>printf</def> <str>&quot;Tak(%d,%d,%d): %d</str><esc>\n</esc><str>&quot;</str><def></def> <sym>(</sym><def></def><num>3</num><def></def><sym>*</sym><def>n</def><sym>) (</sym><def></def><num>2</num><def></def><sym>*</sym><def>n</def><sym>)</sym> <def>n</def> <sym>(</sym><def>tak</def> <sym>(</sym><def></def><num>3</num><def></def><sym>*</sym><def>n</def><sym>) (</sym><def></def><num>2</num><def></def><sym>*</sym><def>n</def><sym>)</sym> <def>n</def><sym>);</sym><br />
<def></def>  <kwc>Printf</kwc><def></def><sym>.</sym><def>printf</def> <str>&quot;Fib(3): %d</str><esc>\n</esc><str>&quot;</str><def></def> <sym>(</sym><def>fib</def> <num>3</num><def></def><sym>);</sym><br />
<def></def>  <kwc>Printf</kwc><def></def><sym>.</sym><def>printf</def> <str>&quot;Tak(3.0,2.0,1.0): %.1f</str><esc>\n</esc><str>&quot;</str><def></def> <sym>(</sym><def>tak_fp</def> <num>3.0 2.0 1.0</num><def></def><sym>)</sym><def></def><br />
</source>
