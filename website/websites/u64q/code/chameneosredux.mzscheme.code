<source>
<def></def><slc>;;; The Computer Language Benchmarks Game</slc><br />
<def></def><slc>;;; http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>;;; contributed by Matthew Flatt</slc><br />
<def><br />
#lang scheme</def><sym>/</sym><def>base</def><br />
<sym>(</sym><def>require scheme</def><sym>/</sym><def>cmdline<br />
         scheme</def><sym>/</sym><def>match</def><sym>)</sym><br />
<def></def><br />
<sym>(</sym><def>define</def> <sym>(</sym><def>change c1 c2</def><sym>)</sym><br />
<def></def>  <sym>(</sym><def>case c1</def><br />
    <sym>[(</sym><def>red</def><sym>)</sym><br />
<def></def>     <sym>(</sym><def>case c2</def> <sym>[(</sym><def>blue</def><sym>) '</sym><def>yellow</def><sym>] [(</sym><def>yellow</def><sym>) '</sym><def>blue</def><sym>] [</sym><def>else c1</def><sym>])]</sym><br />
<def></def>    <sym>[(</sym><def>yellow</def><sym>)</sym><br />
<def></def>     <sym>(</sym><def>case c2</def> <sym>[(</sym><def>blue</def><sym>) '</sym><def>red</def><sym>] [(</sym><def>red</def><sym>) '</sym><def>blue</def><sym>] [</sym><def>else c1</def><sym>])]</sym><br />
<def></def>    <sym>[(</sym><def>blue</def><sym>)</sym><br />
<def></def>     <sym>(</sym><def>case c2</def> <sym>[(</sym><def>yellow</def><sym>) '</sym><def>red</def><sym>] [(</sym><def>red</def><sym>) '</sym><def>yellow</def><sym>] [</sym><def>else c1</def><sym>])]))</sym><br />
<def></def><br />
<sym>(</sym><def>let</def> <sym>([</sym><def>colors</def> <sym>'(</sym><def>blue red yellow</def><sym>)])</sym><br />
<def></def>  <sym>(</sym><def>for</def><sym>* ([</sym><def>a colors</def><sym>][</sym><def>b colors</def><sym>])</sym><br />
<def></def>    <sym>(</sym><def>printf</def> <str>&quot;~a + ~a -&gt; ~a</str><esc>\</esc><str>n&quot;</str><def> a b</def> <sym>(</sym><def>change a b</def><sym>))))</sym><br />
<def></def><br />
<sym>(</sym><def>define</def> <sym>(</sym><def>place meeting</def><sym>-</sym><def>ch n</def><sym>)</sym><br />
<def></def>  <sym>(</sym><def>thread</def><br />
   <sym>(</sym><def></def><kwa>lambda</kwa> <def></def><sym>()</sym><br />
<def></def>     <sym>(</sym><def>let loop</def> <sym>([</sym><def>n n</def><sym>])</sym><br />
<def></def>       <sym>(</sym><def></def><kwa>if</kwa> <def></def><sym>(</sym><def>zero? n</def><sym>)</sym><br />
<def></def>           <slc>;; Fade all:</slc><br />
<def></def>           <sym>(</sym><def>let loop</def> <sym>()</sym><br />
<def></def>             <sym>(</sym><def>let</def> <sym>([</sym><def>c</def> <sym>(</sym><def>channel</def><sym>-</sym><def>get meeting</def><sym>-</sym><def>ch</def><sym>)])</sym><br />
<def></def>               <sym>(</sym><def>channel</def><sym>-</sym><def>put</def> <sym>(</sym><def></def><kwa>car</kwa> <def>c</def><sym>)</sym> <def>#f</def><sym>)</sym><br />
<def></def>               <sym>(</sym><def>loop</def><sym>)))</sym><br />
<def></def>           <slc>;; Let two meet:</slc><br />
<def></def>           <sym>(</sym><def>match</def><sym>-</sym><def>let</def> <sym>([(</sym><def></def><kwa>cons</kwa> <def>ch1 v1</def><sym>) (</sym><def>channel</def><sym>-</sym><def>get meeting</def><sym>-</sym><def>ch</def><sym>)]</sym><br />
<def></def>                       <sym>[(</sym><def></def><kwa>cons</kwa> <def>ch2 v2</def><sym>) (</sym><def>channel</def><sym>-</sym><def>get meeting</def><sym>-</sym><def>ch</def><sym>)])</sym><br />
<def></def>             <sym>(</sym><def>channel</def><sym>-</sym><def>put ch1 v2</def><sym>)</sym><br />
<def></def>             <sym>(</sym><def>channel</def><sym>-</sym><def>put ch2 v1</def><sym>)</sym><br />
<def></def>             <sym>(</sym><def>loop</def> <sym>(</sym><def>sub1 n</def><sym>))))))))</sym><br />
<def></def><br />
<sym>(</sym><def>define</def> <sym>(</sym><def>creature color meeting</def><sym>-</sym><def>ch result</def><sym>-</sym><def>ch</def><sym>)</sym><br />
<def></def>  <sym>(</sym><def>thread</def><br />
   <sym>(</sym><def></def><kwa>lambda</kwa> <def></def><sym>()</sym><br />
<def></def>     <sym>(</sym><def>let</def> <sym>([</sym><def>ch</def> <sym>(</sym><def>make</def><sym>-</sym><def>channel</def><sym>)]</sym><br />
<def></def>           <sym>[</sym><def>name</def> <sym>(</sym><def>gensym</def><sym>)])</sym><br />
<def></def>       <sym>(</sym><def>let loop</def> <sym>([</sym><def>color color</def><sym>][</sym><def>met</def> <num>0</num><def></def><sym>][</sym><def>same</def> <num>0</num><def></def><sym>])</sym><br />
<def></def>         <sym>(</sym><def>channel</def><sym>-</sym><def>put meeting</def><sym>-</sym><def>ch</def> <sym>(</sym><def></def><kwa>cons</kwa> <def>ch</def> <sym>(</sym><def></def><kwa>cons</kwa> <def>color name</def><sym>)))</sym><br />
<def></def>         <sym>(</sym><def>match</def> <sym>(</sym><def>channel</def><sym>-</sym><def>get ch</def><sym>)</sym><br />
<def></def>           <sym>[(</sym><def></def><kwa>cons</kwa> <def>other</def><sym>-</sym><def>color other</def><sym>-</sym><def>name</def><sym>)</sym><br />
<def></def>            <slc>;; Meet:</slc><br />
<def></def>            <sym>(</sym><def>sleep</def><sym>)</sym> <def></def><slc>; avoid imbalance from weak fairness</slc><br />
<def></def>            <sym>(</sym><def>loop</def> <sym>(</sym><def>change color other</def><sym>-</sym><def>color</def><sym>)</sym><br />
<def></def>                  <sym>(</sym><def>add1 met</def><sym>)</sym><br />
<def></def>                  <sym>(+</sym> <def>same</def> <sym>(</sym><def></def><kwa>if</kwa> <def></def><sym>(</sym><def></def><kwa>eq</kwa><def>? name other</def><sym>-</sym><def>name</def><sym>)</sym><br />
<def></def>                              <num>1</num><br />
<def></def>                              <num>0</num><def></def><sym>)))]</sym><br />
<def></def>           <sym>[</sym><def>#f</def><br />
            <slc>;; Done:</slc><br />
<def></def>            <sym>(</sym><def>channel</def><sym>-</sym><def>put result</def><sym>-</sym><def>ch</def> <sym>(</sym><def></def><kwa>cons</kwa> <def>met same</def><sym>))]))))))</sym><br />
<def></def><br />
<sym>(</sym><def>define</def> <sym>(</sym><def>spell n</def><sym>)</sym><br />
<def></def>  <sym>(</sym><def>for</def> <sym>([</sym><def>i</def> <sym>(</sym><def>number</def><sym>-&gt;</sym><def>string n</def><sym>)])</sym><br />
<def></def>    <sym>(</sym><def>display</def> <str>&quot; &quot;</str><def></def><sym>)</sym><br />
<def></def>    <sym>(</sym><def>display</def> <sym>(</sym><def>hash</def><sym>-</sym><def>ref digits i</def><sym>))))</sym><br />
<def></def><br />
<sym>(</sym><def>define digits<br />
  #hash</def><sym>((</sym><def>#\</def><num>0</num> <def>.</def> <str>&quot;zero&quot;</str><def></def><sym>)</sym><br />
<def></def>        <sym>(</sym><def>#\</def><num>1</num> <def>.</def> <str>&quot;one&quot;</str><def></def><sym>)</sym><br />
<def></def>        <sym>(</sym><def>#\</def><num>2</num> <def>.</def> <str>&quot;two&quot;</str><def></def><sym>)</sym><br />
<def></def>        <sym>(</sym><def>#\</def><num>3</num> <def>.</def> <str>&quot;three&quot;</str><def></def><sym>)</sym><br />
<def></def>        <sym>(</sym><def>#\</def><num>4</num> <def>.</def> <str>&quot;four&quot;</str><def></def><sym>)</sym><br />
<def></def>        <sym>(</sym><def>#\</def><num>5</num> <def>.</def> <str>&quot;five&quot;</str><def></def><sym>)</sym><br />
<def></def>        <sym>(</sym><def>#\</def><num>6</num> <def>.</def> <str>&quot;six&quot;</str><def></def><sym>)</sym><br />
<def></def>        <sym>(</sym><def>#\</def><num>7</num> <def>.</def> <str>&quot;seven&quot;</str><def></def><sym>)</sym><br />
<def></def>        <sym>(</sym><def>#\</def><num>8</num> <def>.</def> <str>&quot;eight&quot;</str><def></def><sym>)</sym><br />
<def></def>        <sym>(</sym><def>#\</def><num>9</num> <def>.</def> <str>&quot;nine&quot;</str><def></def><sym>)))</sym><br />
<def></def><br />
<sym>(</sym><def>define</def> <sym>(</sym><def>go n inits</def><sym>)</sym><br />
<def></def>  <sym>(</sym><def>let</def> <sym>([</sym><def>result</def><sym>-</sym><def>ch</def> <sym>(</sym><def>make</def><sym>-</sym><def>channel</def><sym>)]</sym><br />
<def></def>        <sym>[</sym><def>meeting</def><sym>-</sym><def>ch</def> <sym>(</sym><def>make</def><sym>-</sym><def>channel</def><sym>)])</sym><br />
<def></def>    <sym>(</sym><def>place meeting</def><sym>-</sym><def>ch n</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def>newline</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def>for</def> <sym>([</sym><def>init inits</def><sym>])</sym><br />
<def></def>      <sym>(</sym><def>printf</def> <str>&quot; ~a&quot;</str><def> init</def><sym>)</sym><br />
<def></def>      <sym>(</sym><def>creature init meeting</def><sym>-</sym><def>ch result</def><sym>-</sym><def>ch</def><sym>))</sym><br />
<def></def>    <sym>(</sym><def>newline</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def>let</def> <sym>([</sym><def>results</def> <sym>(</sym><def>for</def><sym>/</sym><def></def><kwa>list</kwa> <def></def><sym>([</sym><def>i inits</def><sym>])</sym><br />
<def></def>                     <sym>(</sym><def>channel</def><sym>-</sym><def>get result</def><sym>-</sym><def>ch</def><sym>))])</sym><br />
<def></def>      <sym>(</sym><def>for</def> <sym>([</sym><def>r results</def><sym>])</sym><br />
<def></def>        <sym>(</sym><def>display</def> <sym>(</sym><def></def><kwa>car</kwa> <def>r</def><sym>))</sym><br />
<def></def>        <sym>(</sym><def>spell</def> <sym>(</sym><def></def><kwa>cdr</kwa> <def>r</def><sym>))</sym><br />
<def></def>        <sym>(</sym><def>newline</def><sym>))</sym><br />
<def></def>      <sym>(</sym><def>spell</def> <sym>(</sym><def></def><kwa>apply</kwa> <def></def><sym>+ (</sym><def>map</def> <kwa>car</kwa> <def>results</def><sym>)))</sym><br />
<def></def>      <sym>(</sym><def>newline</def><sym>))))</sym><br />
<def></def><br />
<sym>(</sym><def>let</def> <sym>([</sym><def>n</def> <sym>(</sym><def></def><kwa>command</kwa><def></def><sym>-</sym><def></def><kwa>line</kwa> <def>#</def><sym>:</sym><def>args</def> <sym>(</sym><def>n</def><sym>) (</sym><def>string</def><sym>-&gt;</sym><def>number n</def><sym>))])</sym><br />
<def></def>  <sym>(</sym><def>go n</def> <sym>'(</sym><def>blue red yellow</def><sym>))</sym><br />
<def></def>  <sym>(</sym><def>go n</def> <sym>'(</sym><def>blue red yellow red yellow blue red yellow red blue</def><sym>))</sym><br />
<def></def>  <sym>(</sym><def>newline</def><sym>))</sym><br />
<def></def><br />
<br />
</source>
