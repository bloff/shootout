<span class="hl com">/*</span>
<span class="hl com">  The Computer Language Benchmarks Game</span>
<span class="hl com">  http://shootout.alioth.debian.org/</span>
<span class="hl com">  Modifications to Josh Goldfoot version by Byron Foster by Miguel de Icaza</span>
<span class="hl com">  fixes by Uffe Seerup</span>
<span class="hl com">*/</span>
<span class="hl kwa">using</span> System<span class="hl sym">;</span>
<span class="hl kwa">using</span> System<span class="hl sym">.</span>Text<span class="hl sym">;</span>
<span class="hl kwa">using</span> System<span class="hl sym">.</span>Text<span class="hl sym">.</span>RegularExpressions<span class="hl sym">;</span>

<span class="hl kwa">public class</span> regexdna
<span class="hl sym">{</span>

    <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">Main</span><span class="hl sym">(</span>String<span class="hl sym">[]</span> args<span class="hl sym">)</span>
    <span class="hl sym">{</span>
        StringBuilder sb <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">StringBuilder</span><span class="hl sym">();</span>
        <span class="hl kwb">int</span> initialLength <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
        <span class="hl kwa">for</span> <span class="hl sym">(</span>String line<span class="hl sym">; (</span>line <span class="hl sym">=</span> Console<span class="hl sym">.</span><span class="hl kwd">ReadLine</span><span class="hl sym">()) !=</span> <span class="hl kwa">null</span><span class="hl sym">;  )</span>
        <span class="hl sym">{</span>
            initialLength <span class="hl sym">+=</span> line<span class="hl sym">.</span>Length <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>line<span class="hl sym">.</span><span class="hl kwd">StartsWith</span><span class="hl sym">(</span><span class="hl str">&quot;&gt;&quot;</span><span class="hl sym">))</span> <span class="hl kwa">continue</span><span class="hl sym">;</span>
            sb<span class="hl sym">.</span><span class="hl kwd">Append</span><span class="hl sym">(</span>line<span class="hl sym">);</span>
        <span class="hl sym">}</span>

        String sequence <span class="hl sym">=</span> sb<span class="hl sym">.</span><span class="hl kwd">ToString</span><span class="hl sym">();</span>
        <span class="hl kwb">int</span> codeLength <span class="hl sym">=</span> sequence<span class="hl sym">.</span>Length<span class="hl sym">;</span>

        String<span class="hl sym">[]</span> variants <span class="hl sym">=</span>
      <span class="hl sym">{</span>
        <span class="hl str">&quot;agggtaaa|tttaccct&quot;</span> <span class="hl sym">,</span><span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="hl sym">,</span>
        <span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span> <span class="hl sym">,</span><span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="hl sym">,</span>
        <span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="hl sym">,</span>
        <span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="hl sym">,</span>
        <span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span>
      <span class="hl sym">};</span>


        <span class="hl kwb">int</span> count<span class="hl sym">;</span>
        <span class="hl kwa">foreach</span> <span class="hl sym">(</span><span class="hl kwb">string</span> v <span class="hl kwa">in</span> variants<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            Regex r <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Regex</span><span class="hl sym">(</span>v<span class="hl sym">,</span> RegexOptions<span class="hl sym">.</span>Compiled<span class="hl sym">);</span>

            <span class="hl kwa">for</span> <span class="hl sym">(</span>Match m <span class="hl sym">=</span> r<span class="hl sym">.</span><span class="hl kwd">Match</span><span class="hl sym">(</span>sequence<span class="hl sym">);</span> m<span class="hl sym">.</span>Success<span class="hl sym">;</span> m <span class="hl sym">=</span> m<span class="hl sym">.</span><span class="hl kwd">NextMatch</span><span class="hl sym">())</span> count<span class="hl sym">++;</span>
            Console<span class="hl sym">.</span><span class="hl kwd">WriteLine</span><span class="hl sym">(</span><span class="hl str">&quot;{0} {1}&quot;</span><span class="hl sym">,</span> v<span class="hl sym">,</span> count<span class="hl sym">);</span>
        <span class="hl sym">}</span>

        sb <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">StringBuilder</span><span class="hl sym">(</span><span class="hl num">4096</span><span class="hl sym">);</span>
        <span class="hl kwa">foreach</span> <span class="hl sym">(</span><span class="hl kwb">char</span> c <span class="hl kwa">in</span> sequence<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            <span class="hl kwa">switch</span> <span class="hl sym">(</span>c<span class="hl sym">)</span>
            <span class="hl sym">{</span>
                <span class="hl kwa">case</span> <span class="hl str">'B'</span><span class="hl sym">:</span> sb<span class="hl sym">.</span><span class="hl kwd">Append</span><span class="hl sym">(</span><span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl sym">);</span> <span class="hl kwa">break</span><span class="hl sym">;</span>
                <span class="hl kwa">case</span> <span class="hl str">'D'</span><span class="hl sym">:</span> sb<span class="hl sym">.</span><span class="hl kwd">Append</span><span class="hl sym">(</span><span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl sym">);</span> <span class="hl kwa">break</span><span class="hl sym">;</span>
                <span class="hl kwa">case</span> <span class="hl str">'H'</span><span class="hl sym">:</span> sb<span class="hl sym">.</span><span class="hl kwd">Append</span><span class="hl sym">(</span><span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl sym">);</span> <span class="hl kwa">break</span><span class="hl sym">;</span>
                <span class="hl kwa">case</span> <span class="hl str">'K'</span><span class="hl sym">:</span> sb<span class="hl sym">.</span><span class="hl kwd">Append</span><span class="hl sym">(</span><span class="hl str">&quot;(g|t)&quot;</span><span class="hl sym">);</span> <span class="hl kwa">break</span><span class="hl sym">;</span>
                <span class="hl kwa">case</span> <span class="hl str">'M'</span><span class="hl sym">:</span> sb<span class="hl sym">.</span><span class="hl kwd">Append</span><span class="hl sym">(</span><span class="hl str">&quot;(a|c)&quot;</span><span class="hl sym">);</span> <span class="hl kwa">break</span><span class="hl sym">;</span>
                <span class="hl kwa">case</span> <span class="hl str">'N'</span><span class="hl sym">:</span> sb<span class="hl sym">.</span><span class="hl kwd">Append</span><span class="hl sym">(</span><span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl sym">);</span> <span class="hl kwa">break</span><span class="hl sym">;</span>
                <span class="hl kwa">case</span> <span class="hl str">'R'</span><span class="hl sym">:</span> sb<span class="hl sym">.</span><span class="hl kwd">Append</span><span class="hl sym">(</span><span class="hl str">&quot;(a|g)&quot;</span><span class="hl sym">);</span> <span class="hl kwa">break</span><span class="hl sym">;</span>
                <span class="hl kwa">case</span> <span class="hl str">'S'</span><span class="hl sym">:</span> sb<span class="hl sym">.</span><span class="hl kwd">Append</span><span class="hl sym">(</span><span class="hl str">&quot;(c|g)&quot;</span><span class="hl sym">);</span> <span class="hl kwa">break</span><span class="hl sym">;</span>
                <span class="hl kwa">case</span> <span class="hl str">'V'</span><span class="hl sym">:</span> sb<span class="hl sym">.</span><span class="hl kwd">Append</span><span class="hl sym">(</span><span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl sym">);</span> <span class="hl kwa">break</span><span class="hl sym">;</span>
                <span class="hl kwa">case</span> <span class="hl str">'W'</span><span class="hl sym">:</span> sb<span class="hl sym">.</span><span class="hl kwd">Append</span><span class="hl sym">(</span><span class="hl str">&quot;(a|t)&quot;</span><span class="hl sym">);</span> <span class="hl kwa">break</span><span class="hl sym">;</span>
                <span class="hl kwa">case</span> <span class="hl str">'Y'</span><span class="hl sym">:</span> sb<span class="hl sym">.</span><span class="hl kwd">Append</span><span class="hl sym">(</span><span class="hl str">&quot;(c|t)&quot;</span><span class="hl sym">);</span> <span class="hl kwa">break</span><span class="hl sym">;</span>
                <span class="hl kwa">default</span><span class="hl sym">:</span> sb<span class="hl sym">.</span><span class="hl kwd">Append</span><span class="hl sym">(</span>c<span class="hl sym">);</span> <span class="hl kwa">break</span><span class="hl sym">;</span>
            <span class="hl sym">}</span>
        <span class="hl sym">}</span>

        Console<span class="hl sym">.</span><span class="hl kwd">WriteLine</span><span class="hl sym">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">{0}</span><span class="hl esc">\n</span><span class="hl str">{1}</span><span class="hl esc">\n</span><span class="hl str">{2}&quot;</span><span class="hl sym">,</span>
           initialLength<span class="hl sym">,</span> codeLength<span class="hl sym">,</span> sb<span class="hl sym">.</span>Length<span class="hl sym">);</span>

    <span class="hl sym">}</span>
<span class="hl sym">}</span>
