#<span class="hl sym">!/</span>usr<span class="hl sym">/</span>bin<span class="hl sym">/</span>mzscheme <span class="hl sym">-</span>r
<span class="hl slc">;; fannkuch benchmark for The Computer Language Shootout</span>
<span class="hl slc">;; Written by Dima Dorfman, 2004</span>
<span class="hl slc">;; Slightly improved by Sven Hartrumpf, 2005-2006</span>
<span class="hl slc">;;</span>
<span class="hl slc">;; Ever-so-slightly tweaked for MzScheme by Brent Fulgham</span>

<span class="hl sym">(</span>module fannkuch mzscheme
  <span class="hl sym">(</span>define vector<span class="hl sym">-</span>for<span class="hl sym">-</span>each <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>pred v<span class="hl sym">)</span>
    <span class="hl sym">(</span>do <span class="hl sym">((</span>i <span class="hl num">0</span> <span class="hl sym">(</span>add1 i<span class="hl sym">))</span>
       <span class="hl sym">(</span>v<span class="hl sym">-</span><span class="hl kwa">length</span> <span class="hl sym">(</span>vector<span class="hl sym">-</span><span class="hl kwa">length</span> v<span class="hl sym">)))</span>
      <span class="hl sym">((&gt;=</span> i v<span class="hl sym">-</span><span class="hl kwa">length</span><span class="hl sym">))</span>
    <span class="hl sym">(</span>pred <span class="hl sym">(</span>vector<span class="hl sym">-</span>ref v i<span class="hl sym">)))))</span>

  <span class="hl sym">(</span>define <span class="hl sym">(</span>vector<span class="hl sym">-</span><span class="hl kwa">reverse</span><span class="hl sym">-</span>slice<span class="hl sym">!</span> v i j<span class="hl sym">)</span>
    <span class="hl sym">(</span>do <span class="hl sym">((</span>i i <span class="hl sym">(</span>add1 i<span class="hl sym">))</span>
       <span class="hl sym">(</span>j <span class="hl sym">(</span>sub1 j<span class="hl sym">) (</span>sub1 j<span class="hl sym">)))</span> <span class="hl slc">; exclude position j</span>
      <span class="hl sym">((&lt;=</span> j i<span class="hl sym">))</span>
    <span class="hl sym">(</span>vector<span class="hl sym">-</span>swap<span class="hl sym">!</span> v i j<span class="hl sym">)))</span>

  <span class="hl sym">(</span>define <span class="hl sym">(</span>vector<span class="hl sym">-</span>swap<span class="hl sym">!</span> v i j<span class="hl sym">)</span>
    <span class="hl sym">(</span>let <span class="hl sym">((</span>t <span class="hl sym">(</span>vector<span class="hl sym">-</span>ref v i<span class="hl sym">)))</span>
      <span class="hl sym">(</span>vector<span class="hl sym">-</span><span class="hl kwa">set</span><span class="hl sym">!</span> v i <span class="hl sym">(</span>vector<span class="hl sym">-</span>ref v j<span class="hl sym">))</span>
      <span class="hl sym">(</span>vector<span class="hl sym">-</span><span class="hl kwa">set</span><span class="hl sym">!</span> v j t<span class="hl sym">)))</span>

  <span class="hl sym">(</span>define <span class="hl sym">(</span>count<span class="hl sym">-</span>flips pi<span class="hl sym">)</span>
    <span class="hl sym">(</span>do <span class="hl sym">((</span>rho <span class="hl sym">(</span>vector<span class="hl sym">-</span>copy pi<span class="hl sym">))</span>
         <span class="hl sym">(</span>i <span class="hl num">0</span> <span class="hl sym">(</span>add1 i<span class="hl sym">)))</span>
        <span class="hl sym">((= (</span>vector<span class="hl sym">-</span>ref rho <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl num">0</span><span class="hl sym">)</span> i<span class="hl sym">)</span>
      <span class="hl sym">(</span>vector<span class="hl sym">-</span><span class="hl kwa">reverse</span><span class="hl sym">-</span>slice<span class="hl sym">!</span> rho <span class="hl num">0</span> <span class="hl sym">(</span>add1 <span class="hl sym">(</span>vector<span class="hl sym">-</span>ref rho <span class="hl num">0</span><span class="hl sym">)))))</span>

  <span class="hl sym">(</span>define <span class="hl sym">(</span>vector<span class="hl sym">-</span>copy source<span class="hl sym">)</span>
    <span class="hl sym">(</span>do <span class="hl sym">((</span>vec <span class="hl sym">(</span>make<span class="hl sym">-</span>vector <span class="hl sym">(</span>vector<span class="hl sym">-</span><span class="hl kwa">length</span> source<span class="hl sym">)))</span>
         <span class="hl sym">(</span>i <span class="hl num">0</span> <span class="hl sym">(</span>add1 i<span class="hl sym">)))</span>
        <span class="hl sym">((=</span> i <span class="hl sym">(</span>vector<span class="hl sym">-</span><span class="hl kwa">length</span> source<span class="hl sym">))</span> vec<span class="hl sym">)</span>
      <span class="hl sym">(</span>vector<span class="hl sym">-</span><span class="hl kwa">set</span><span class="hl sym">!</span> vec i <span class="hl sym">(</span>vector<span class="hl sym">-</span>ref source i<span class="hl sym">))))</span>

  <span class="hl sym">(</span>define <span class="hl sym">(</span>fannkuch n<span class="hl sym">)</span>
    <span class="hl sym">(</span>let <span class="hl sym">((</span>pi <span class="hl sym">(</span>do <span class="hl sym">((</span>pi <span class="hl sym">(</span>make<span class="hl sym">-</span>vector n<span class="hl sym">))</span>
                   <span class="hl sym">(</span>i <span class="hl num">0</span> <span class="hl sym">(</span>add1 i<span class="hl sym">)))</span>
                <span class="hl sym">((=</span> i n<span class="hl sym">)</span> pi<span class="hl sym">)</span>
                <span class="hl sym">(</span>vector<span class="hl sym">-</span><span class="hl kwa">set</span><span class="hl sym">!</span> pi i i<span class="hl sym">)))</span>
          <span class="hl sym">(</span>r n<span class="hl sym">)</span>
          <span class="hl sym">(</span>count <span class="hl sym">(</span>make<span class="hl sym">-</span>vector n<span class="hl sym">)))</span>
      <span class="hl sym">(</span>let loop <span class="hl sym">((</span>flips <span class="hl num">0</span><span class="hl sym">)</span>
                 <span class="hl sym">(</span>perms <span class="hl num">0</span><span class="hl sym">))</span>
        <span class="hl sym">(</span><span class="hl kwa">cond</span> <span class="hl sym">((&lt;</span> perms <span class="hl num">30</span><span class="hl sym">)</span>
               <span class="hl sym">(</span>vector<span class="hl sym">-</span>for<span class="hl sym">-</span>each <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>x<span class="hl sym">)</span>
                                  <span class="hl sym">(</span>display <span class="hl sym">(</span>add1 x<span class="hl sym">)))</span>
                                pi<span class="hl sym">)</span>
               <span class="hl sym">(</span>newline<span class="hl sym">)))</span>
        <span class="hl sym">(</span>do <span class="hl sym">()</span>
          <span class="hl sym">((=</span> r <span class="hl num">1</span><span class="hl sym">))</span>
          <span class="hl sym">(</span>vector<span class="hl sym">-</span><span class="hl kwa">set</span><span class="hl sym">!</span> count <span class="hl sym">(</span>sub1 r<span class="hl sym">)</span> r<span class="hl sym">)</span>
          <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> r <span class="hl sym">(</span>sub1 r<span class="hl sym">)))</span>
        <span class="hl sym">(</span>let <span class="hl sym">((</span>flips2 <span class="hl sym">(</span><span class="hl kwa">max</span> <span class="hl sym">(</span>count<span class="hl sym">-</span>flips pi<span class="hl sym">)</span> flips<span class="hl sym">)))</span>
          <span class="hl sym">(</span>let <span class="hl sym">((</span>result
                  <span class="hl sym">(</span>let loop2 <span class="hl sym">()</span>
                    <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(=</span> r n<span class="hl sym">)</span>
                      flips2
                      <span class="hl sym">(</span>let <span class="hl sym">((</span>perm0 <span class="hl sym">(</span>vector<span class="hl sym">-</span>ref pi <span class="hl num">0</span><span class="hl sym">)))</span>
                        <span class="hl sym">(</span>do <span class="hl sym">((</span>i <span class="hl num">0</span><span class="hl sym">))</span>
                          <span class="hl sym">((&gt;=</span> i r<span class="hl sym">))</span>
                          <span class="hl sym">(</span>let <span class="hl sym">((</span>j <span class="hl sym">(</span>add1 i<span class="hl sym">)))</span>
                            <span class="hl sym">(</span>vector<span class="hl sym">-</span><span class="hl kwa">set</span><span class="hl sym">!</span> pi i <span class="hl sym">(</span>vector<span class="hl sym">-</span>ref pi j<span class="hl sym">))</span>
                            <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> i j<span class="hl sym">)))</span>
                        <span class="hl sym">(</span>vector<span class="hl sym">-</span><span class="hl kwa">set</span><span class="hl sym">!</span> pi r perm0<span class="hl sym">)</span>
                        <span class="hl sym">(</span>vector<span class="hl sym">-</span><span class="hl kwa">set</span><span class="hl sym">!</span> count r <span class="hl sym">(</span>sub1 <span class="hl sym">(</span>vector<span class="hl sym">-</span>ref count r<span class="hl sym">)))</span>
                        <span class="hl sym">(</span><span class="hl kwa">cond</span> <span class="hl sym">((&lt;= (</span>vector<span class="hl sym">-</span>ref count r<span class="hl sym">)</span> <span class="hl num">0</span><span class="hl sym">)</span>
                               <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> r <span class="hl sym">(</span>add1 r<span class="hl sym">))</span>
                               <span class="hl sym">(</span>loop2<span class="hl sym">))</span>
                              <span class="hl sym">(</span>else
                                #f<span class="hl sym">)))))))</span>
            <span class="hl sym">(</span><span class="hl kwa">or</span> result
                <span class="hl sym">(</span>loop flips2 <span class="hl sym">(</span>add1 perms<span class="hl sym">)))</span>
            <span class="hl sym">)))))</span>

  <span class="hl sym">(</span>define <span class="hl sym">(</span>main args<span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(&lt; (</span>vector<span class="hl sym">-</span><span class="hl kwa">length</span> args<span class="hl sym">)</span> <span class="hl num">1</span><span class="hl sym">)</span>
      <span class="hl sym">(</span>begin <span class="hl sym">(</span>display <span class="hl str">&quot;An argument is required&quot;</span><span class="hl sym">) (</span>newline<span class="hl sym">)</span> <span class="hl num">2</span><span class="hl sym">)</span>
      <span class="hl sym">(</span>let <span class="hl sym">((</span>n <span class="hl sym">(</span>string<span class="hl sym">-&gt;</span>number <span class="hl sym">(</span>vector<span class="hl sym">-</span>ref args <span class="hl num">0</span><span class="hl sym">))))</span>
        <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">not</span> <span class="hl sym">(</span>integer? n<span class="hl sym">))</span>
          <span class="hl sym">(</span>begin <span class="hl sym">(</span>display <span class="hl str">&quot;An integer is required&quot;</span><span class="hl sym">) (</span>newline<span class="hl sym">)</span> <span class="hl num">2</span><span class="hl sym">)</span>
          <span class="hl sym">(</span>printf <span class="hl str">&quot;Pfannkuchen(~S) = ~S~%&quot;</span> n <span class="hl sym">(</span>fannkuch n<span class="hl sym">))))))</span>

  <span class="hl sym">(</span>main <span class="hl sym">(</span>current<span class="hl sym">-</span><span class="hl kwa">command</span><span class="hl sym">-</span><span class="hl kwa">line</span><span class="hl sym">-</span>arguments<span class="hl sym">)))</span>
