<source>
<def>#</def><sym>!/</sym><def>usr</def><sym>/</sym><def>bin</def><sym>/</sym><def>mzscheme</def> <sym>-</sym><def>r</def><br />
<slc>;; fannkuch benchmark for The Computer Language Shootout</slc><br />
<def></def><slc>;; Written by Dima Dorfman, 2004</slc><br />
<def></def><slc>;; Slightly improved by Sven Hartrumpf, 2005-2006</slc><br />
<def></def><slc>;;</slc><br />
<def></def><slc>;; Ever-so-slightly tweaked for MzScheme by Brent Fulgham</slc><br />
<def></def><br />
<sym>(</sym><def>module fannkuch mzscheme</def><br />
  <sym>(</sym><def>define vector</def><sym>-</sym><def>for</def><sym>-</sym><def>each</def> <sym>(</sym><def></def><kwa>lambda</kwa> <def></def><sym>(</sym><def>pred v</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def>do</def> <sym>((</sym><def>i</def> <num>0</num> <def></def><sym>(</sym><def>add1 i</def><sym>))</sym><br />
<def></def>       <sym>(</sym><def>v</def><sym>-</sym><def></def><kwa>length</kwa> <def></def><sym>(</sym><def>vector</def><sym>-</sym><def></def><kwa>length</kwa> <def>v</def><sym>)))</sym><br />
<def></def>      <sym>((&gt;=</sym> <def>i v</def><sym>-</sym><def></def><kwa>length</kwa><def></def><sym>))</sym><br />
<def></def>    <sym>(</sym><def>pred</def> <sym>(</sym><def>vector</def><sym>-</sym><def>ref v i</def><sym>)))))</sym><br />
<def></def><br />
  <sym>(</sym><def>define</def> <sym>(</sym><def>vector</def><sym>-</sym><def></def><kwa>reverse</kwa><def></def><sym>-</sym><def>slice</def><sym>!</sym> <def>v i j</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def>do</def> <sym>((</sym><def>i i</def> <sym>(</sym><def>add1 i</def><sym>))</sym><br />
<def></def>       <sym>(</sym><def>j</def> <sym>(</sym><def>sub1 j</def><sym>) (</sym><def>sub1 j</def><sym>)))</sym> <def></def><slc>; exclude position j</slc><br />
<def></def>      <sym>((&lt;=</sym> <def>j i</def><sym>))</sym><br />
<def></def>    <sym>(</sym><def>vector</def><sym>-</sym><def>swap</def><sym>!</sym> <def>v i j</def><sym>)))</sym><br />
<def></def><br />
  <sym>(</sym><def>define</def> <sym>(</sym><def>vector</def><sym>-</sym><def>swap</def><sym>!</sym> <def>v i j</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def>let</def> <sym>((</sym><def>t</def> <sym>(</sym><def>vector</def><sym>-</sym><def>ref v i</def><sym>)))</sym><br />
<def></def>      <sym>(</sym><def>vector</def><sym>-</sym><def></def><kwa>set</kwa><def></def><sym>!</sym> <def>v i</def> <sym>(</sym><def>vector</def><sym>-</sym><def>ref v j</def><sym>))</sym><br />
<def></def>      <sym>(</sym><def>vector</def><sym>-</sym><def></def><kwa>set</kwa><def></def><sym>!</sym> <def>v j t</def><sym>)))</sym><br />
<def></def><br />
  <sym>(</sym><def>define</def> <sym>(</sym><def>count</def><sym>-</sym><def>flips pi</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def>do</def> <sym>((</sym><def>rho</def> <sym>(</sym><def>vector</def><sym>-</sym><def>copy pi</def><sym>))</sym><br />
<def></def>         <sym>(</sym><def>i</def> <num>0</num> <def></def><sym>(</sym><def>add1 i</def><sym>)))</sym><br />
<def></def>        <sym>((= (</sym><def>vector</def><sym>-</sym><def>ref rho</def> <num>0</num><def></def><sym>)</sym> <def></def><num>0</num><def></def><sym>)</sym> <def>i</def><sym>)</sym><br />
<def></def>      <sym>(</sym><def>vector</def><sym>-</sym><def></def><kwa>reverse</kwa><def></def><sym>-</sym><def>slice</def><sym>!</sym> <def>rho</def> <num>0</num> <def></def><sym>(</sym><def>add1</def> <sym>(</sym><def>vector</def><sym>-</sym><def>ref rho</def> <num>0</num><def></def><sym>)))))</sym><br />
<def></def><br />
  <sym>(</sym><def>define</def> <sym>(</sym><def>vector</def><sym>-</sym><def>copy source</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def>do</def> <sym>((</sym><def>vec</def> <sym>(</sym><def>make</def><sym>-</sym><def>vector</def> <sym>(</sym><def>vector</def><sym>-</sym><def></def><kwa>length</kwa> <def>source</def><sym>)))</sym><br />
<def></def>         <sym>(</sym><def>i</def> <num>0</num> <def></def><sym>(</sym><def>add1 i</def><sym>)))</sym><br />
<def></def>        <sym>((=</sym> <def>i</def> <sym>(</sym><def>vector</def><sym>-</sym><def></def><kwa>length</kwa> <def>source</def><sym>))</sym> <def>vec</def><sym>)</sym><br />
<def></def>      <sym>(</sym><def>vector</def><sym>-</sym><def></def><kwa>set</kwa><def></def><sym>!</sym> <def>vec i</def> <sym>(</sym><def>vector</def><sym>-</sym><def>ref source i</def><sym>))))</sym><br />
<def></def><br />
  <sym>(</sym><def>define</def> <sym>(</sym><def>fannkuch n</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def>let</def> <sym>((</sym><def>pi</def> <sym>(</sym><def>do</def> <sym>((</sym><def>pi</def> <sym>(</sym><def>make</def><sym>-</sym><def>vector n</def><sym>))</sym><br />
<def></def>                   <sym>(</sym><def>i</def> <num>0</num> <def></def><sym>(</sym><def>add1 i</def><sym>)))</sym><br />
<def></def>                <sym>((=</sym> <def>i n</def><sym>)</sym> <def>pi</def><sym>)</sym><br />
<def></def>                <sym>(</sym><def>vector</def><sym>-</sym><def></def><kwa>set</kwa><def></def><sym>!</sym> <def>pi i i</def><sym>)))</sym><br />
<def></def>          <sym>(</sym><def>r n</def><sym>)</sym><br />
<def></def>          <sym>(</sym><def>count</def> <sym>(</sym><def>make</def><sym>-</sym><def>vector n</def><sym>)))</sym><br />
<def></def>      <sym>(</sym><def>let loop</def> <sym>((</sym><def>flips</def> <num>0</num><def></def><sym>)</sym><br />
<def></def>                 <sym>(</sym><def>perms</def> <num>0</num><def></def><sym>))</sym><br />
<def></def>        <sym>(</sym><def></def><kwa>cond</kwa> <def></def><sym>((&lt;</sym> <def>perms</def> <num>30</num><def></def><sym>)</sym><br />
<def></def>               <sym>(</sym><def>vector</def><sym>-</sym><def>for</def><sym>-</sym><def>each</def> <sym>(</sym><def></def><kwa>lambda</kwa> <def></def><sym>(</sym><def>x</def><sym>)</sym><br />
<def></def>                                  <sym>(</sym><def>display</def> <sym>(</sym><def>add1 x</def><sym>)))</sym><br />
<def>                                pi</def><sym>)</sym><br />
<def></def>               <sym>(</sym><def>newline</def><sym>)))</sym><br />
<def></def>        <sym>(</sym><def>do</def> <sym>()</sym><br />
<def></def>          <sym>((=</sym> <def>r</def> <num>1</num><def></def><sym>))</sym><br />
<def></def>          <sym>(</sym><def>vector</def><sym>-</sym><def></def><kwa>set</kwa><def></def><sym>!</sym> <def>count</def> <sym>(</sym><def>sub1 r</def><sym>)</sym> <def>r</def><sym>)</sym><br />
<def></def>          <sym>(</sym><def></def><kwa>set</kwa><def></def><sym>!</sym> <def>r</def> <sym>(</sym><def>sub1 r</def><sym>)))</sym><br />
<def></def>        <sym>(</sym><def>let</def> <sym>((</sym><def>flips2</def> <sym>(</sym><def></def><kwa>max</kwa> <def></def><sym>(</sym><def>count</def><sym>-</sym><def>flips pi</def><sym>)</sym> <def>flips</def><sym>)))</sym><br />
<def></def>          <sym>(</sym><def>let</def> <sym>((</sym><def>result</def><br />
                  <sym>(</sym><def>let loop2</def> <sym>()</sym><br />
<def></def>                    <sym>(</sym><def></def><kwa>if</kwa> <def></def><sym>(=</sym> <def>r n</def><sym>)</sym><br />
<def>                      flips2</def><br />
                      <sym>(</sym><def>let</def> <sym>((</sym><def>perm0</def> <sym>(</sym><def>vector</def><sym>-</sym><def>ref pi</def> <num>0</num><def></def><sym>)))</sym><br />
<def></def>                        <sym>(</sym><def>do</def> <sym>((</sym><def>i</def> <num>0</num><def></def><sym>))</sym><br />
<def></def>                          <sym>((&gt;=</sym> <def>i r</def><sym>))</sym><br />
<def></def>                          <sym>(</sym><def>let</def> <sym>((</sym><def>j</def> <sym>(</sym><def>add1 i</def><sym>)))</sym><br />
<def></def>                            <sym>(</sym><def>vector</def><sym>-</sym><def></def><kwa>set</kwa><def></def><sym>!</sym> <def>pi i</def> <sym>(</sym><def>vector</def><sym>-</sym><def>ref pi j</def><sym>))</sym><br />
<def></def>                            <sym>(</sym><def></def><kwa>set</kwa><def></def><sym>!</sym> <def>i j</def><sym>)))</sym><br />
<def></def>                        <sym>(</sym><def>vector</def><sym>-</sym><def></def><kwa>set</kwa><def></def><sym>!</sym> <def>pi r perm0</def><sym>)</sym><br />
<def></def>                        <sym>(</sym><def>vector</def><sym>-</sym><def></def><kwa>set</kwa><def></def><sym>!</sym> <def>count r</def> <sym>(</sym><def>sub1</def> <sym>(</sym><def>vector</def><sym>-</sym><def>ref count r</def><sym>)))</sym><br />
<def></def>                        <sym>(</sym><def></def><kwa>cond</kwa> <def></def><sym>((&lt;= (</sym><def>vector</def><sym>-</sym><def>ref count r</def><sym>)</sym> <def></def><num>0</num><def></def><sym>)</sym><br />
<def></def>                               <sym>(</sym><def></def><kwa>set</kwa><def></def><sym>!</sym> <def>r</def> <sym>(</sym><def>add1 r</def><sym>))</sym><br />
<def></def>                               <sym>(</sym><def>loop2</def><sym>))</sym><br />
<def></def>                              <sym>(</sym><def>else<br />
                                #f</def><sym>)))))))</sym><br />
<def></def>            <sym>(</sym><def></def><kwa>or</kwa> <def>result</def><br />
                <sym>(</sym><def>loop flips2</def> <sym>(</sym><def>add1 perms</def><sym>)))</sym><br />
<def></def>            <sym>)))))</sym><br />
<def></def><br />
  <sym>(</sym><def>define</def> <sym>(</sym><def>main args</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def></def><kwa>if</kwa> <def></def><sym>(&lt; (</sym><def>vector</def><sym>-</sym><def></def><kwa>length</kwa> <def>args</def><sym>)</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>      <sym>(</sym><def>begin</def> <sym>(</sym><def>display</def> <str>&quot;An argument is required&quot;</str><def></def><sym>) (</sym><def>newline</def><sym>)</sym> <def></def><num>2</num><def></def><sym>)</sym><br />
<def></def>      <sym>(</sym><def>let</def> <sym>((</sym><def>n</def> <sym>(</sym><def>string</def><sym>-&gt;</sym><def>number</def> <sym>(</sym><def>vector</def><sym>-</sym><def>ref args</def> <num>0</num><def></def><sym>))))</sym><br />
<def></def>        <sym>(</sym><def></def><kwa>if</kwa> <def></def><sym>(</sym><def></def><kwa>not</kwa> <def></def><sym>(</sym><def>integer? n</def><sym>))</sym><br />
<def></def>          <sym>(</sym><def>begin</def> <sym>(</sym><def>display</def> <str>&quot;An integer is required&quot;</str><def></def><sym>) (</sym><def>newline</def><sym>)</sym> <def></def><num>2</num><def></def><sym>)</sym><br />
<def></def>          <sym>(</sym><def>printf</def> <str>&quot;Pfannkuchen(~S) = ~S~%&quot;</str><def> n</def> <sym>(</sym><def>fannkuch n</def><sym>))))))</sym><br />
<def></def><br />
  <sym>(</sym><def>main</def> <sym>(</sym><def>current</def><sym>-</sym><def></def><kwa>command</kwa><def></def><sym>-</sym><def></def><kwa>line</kwa><def></def><sym>-</sym><def>arguments</def><sym>)))</sym><def></def><br />
</source>
