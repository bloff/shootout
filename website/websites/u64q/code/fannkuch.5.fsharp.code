<span class="hl com">(* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> * contributed by Alex Peake</span>
<span class="hl com"> * Literal translation of Andrei Formiga's Scala solution</span>
<span class="hl com">*)</span>

#light

<span class="hl sym">[&lt;</span><span class="hl kwd">EntryPoint</span><span class="hl sym">&gt;]</span>
<span class="hl kwa">let</span> main<span class="hl sym">(</span>args<span class="hl sym">) =</span>
    <span class="hl kwa">let</span> n <span class="hl sym">=</span> <span class="hl kwa">if</span> args<span class="hl sym">.</span><span class="hl kwd">Length</span> <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span> <span class="hl kwb">int</span> args<span class="hl sym">.[</span><span class="hl num">0</span><span class="hl sym">]</span> <span class="hl kwa">else</span> <span class="hl num">7</span>
    <span class="hl sym">//</span>printfn <span class="hl str">&quot;Pfannkuchen(%d) = %d&quot;</span> x <span class="hl sym">(</span>fannkuch x<span class="hl sym">)</span>

    <span class="hl kwa">let mutable</span> maxFlips <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">let mutable</span> permN <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">let mutable</span> j <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">let mutable</span> k <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">let mutable</span> temp <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">let mutable</span> first <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">let mutable</span> flips <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">let mutable</span> perm0 <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>create n <span class="hl num">0</span>
    <span class="hl kwa">let mutable</span> perm <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>create n <span class="hl num">0</span>
    <span class="hl kwa">let mutable</span> rot <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>create n <span class="hl num">0</span>

    <span class="hl kwa">while</span> <span class="hl sym">(</span>k <span class="hl sym">&lt;</span> n<span class="hl sym">)</span> <span class="hl kwa">do</span>
        perm<span class="hl sym">.[</span>k<span class="hl sym">] &lt;-</span> k <span class="hl sym">+</span> <span class="hl num">1</span>
        rot<span class="hl sym">.[</span>k<span class="hl sym">] &lt;-</span> <span class="hl num">0</span>
        k <span class="hl sym">&lt;-</span> k <span class="hl sym">+</span> <span class="hl num">1</span>
    <span class="hl kwa">while</span> <span class="hl sym">(</span>rot<span class="hl sym">.[</span>n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">] &lt;</span> n<span class="hl sym">)</span> <span class="hl kwa">do</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>permN <span class="hl sym">&lt;</span> <span class="hl num">30</span><span class="hl sym">)</span> <span class="hl kwa">then</span>
            k <span class="hl sym">&lt;-</span> <span class="hl num">0</span>
            <span class="hl kwa">while</span> <span class="hl sym">(</span>k <span class="hl sym">&lt;</span> n<span class="hl sym">)</span> <span class="hl kwa">do</span>
                printf <span class="hl str">&quot;%d&quot;</span> perm<span class="hl sym">.[</span>k<span class="hl sym">]</span>
                k <span class="hl sym">&lt;-</span> k <span class="hl sym">+</span> <span class="hl num">1</span>
            printf <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
            permN <span class="hl sym">&lt;-</span> permN <span class="hl sym">+</span> <span class="hl num">1</span>

        flips <span class="hl sym">&lt;-</span> <span class="hl num">0</span>
        k <span class="hl sym">&lt;-</span> <span class="hl num">0</span>
        <span class="hl kwa">while</span> <span class="hl sym">(</span>k <span class="hl sym">&lt;</span> n<span class="hl sym">)</span> <span class="hl kwa">do</span>
            perm0<span class="hl sym">.[</span>k<span class="hl sym">] &lt;-</span> perm<span class="hl sym">.[</span>k<span class="hl sym">]</span>
            k <span class="hl sym">&lt;-</span> k <span class="hl sym">+</span> <span class="hl num">1</span>
        first <span class="hl sym">&lt;-</span> perm0<span class="hl sym">.[</span><span class="hl num">0</span><span class="hl sym">]</span>
        <span class="hl kwa">while</span> <span class="hl sym">(</span>first <span class="hl sym">&lt;&gt;</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">do</span>
            k <span class="hl sym">&lt;-</span> <span class="hl num">0</span>
            <span class="hl kwa">while</span> <span class="hl sym">(</span>k <span class="hl sym">&lt; (</span>first <span class="hl sym">&gt;&gt;&gt;</span> <span class="hl num">1</span><span class="hl sym">))</span> <span class="hl kwa">do</span>
                temp <span class="hl sym">&lt;-</span> perm0<span class="hl sym">.[</span>k<span class="hl sym">]</span>
                perm0<span class="hl sym">.[</span>k<span class="hl sym">] &lt;-</span> perm0<span class="hl sym">.[</span>first <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl sym">-</span> k<span class="hl sym">]</span>
                perm0<span class="hl sym">.[</span>first <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl sym">-</span> k<span class="hl sym">] &lt;-</span> temp<span class="hl sym">;</span>
                k <span class="hl sym">&lt;-</span> k <span class="hl sym">+</span> <span class="hl num">1</span>

            first <span class="hl sym">&lt;-</span> perm0<span class="hl sym">.[</span><span class="hl num">0</span><span class="hl sym">]</span>
            flips <span class="hl sym">&lt;-</span> flips <span class="hl sym">+</span> <span class="hl num">1</span>

        <span class="hl kwa">if</span> <span class="hl sym">(</span>flips <span class="hl sym">&gt;</span> maxFlips<span class="hl sym">)</span> <span class="hl kwa">then</span> maxFlips <span class="hl sym">&lt;-</span> flips

        temp <span class="hl sym">&lt;-</span> perm<span class="hl sym">.[</span><span class="hl num">0</span><span class="hl sym">]</span>
        perm<span class="hl sym">.[</span><span class="hl num">0</span><span class="hl sym">] &lt;-</span> perm<span class="hl sym">.[</span><span class="hl num">1</span><span class="hl sym">]</span>
        perm<span class="hl sym">.[</span><span class="hl num">1</span><span class="hl sym">] &lt;-</span> temp
        rot<span class="hl sym">.[</span><span class="hl num">1</span><span class="hl sym">] &lt;-</span> rot<span class="hl sym">.[</span><span class="hl num">1</span><span class="hl sym">] +</span> <span class="hl num">1</span>
        j <span class="hl sym">&lt;-</span> <span class="hl num">1</span>
        <span class="hl kwa">while</span> <span class="hl sym">(</span>j <span class="hl sym">&lt;</span> n <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl sym">&amp;&amp;</span> rot<span class="hl sym">.[</span>j<span class="hl sym">] &gt;</span> j<span class="hl sym">)</span> <span class="hl kwa">do</span>
            rot<span class="hl sym">.[</span>j<span class="hl sym">] &lt;-</span> <span class="hl num">0</span>
            j <span class="hl sym">&lt;-</span> j <span class="hl sym">+</span> <span class="hl num">1</span>

            k <span class="hl sym">&lt;-</span> <span class="hl num">0</span>
            <span class="hl kwa">while</span> <span class="hl sym">(</span>k <span class="hl sym">&lt;</span> j<span class="hl sym">)</span> <span class="hl kwa">do</span>
                temp <span class="hl sym">&lt;-</span> perm<span class="hl sym">.[</span>k<span class="hl sym">]</span>
                perm<span class="hl sym">.[</span>k<span class="hl sym">] &lt;-</span> perm<span class="hl sym">.[</span>k <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">]</span>
                perm<span class="hl sym">.[</span>k <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">] &lt;-</span> temp
                k <span class="hl sym">&lt;-</span> k <span class="hl sym">+</span> <span class="hl num">1</span>

            rot<span class="hl sym">.[</span>j<span class="hl sym">] &lt;-</span> rot<span class="hl sym">.[</span>j<span class="hl sym">] +</span> <span class="hl num">1</span>

    printfn <span class="hl str">&quot;Pfannkuchen(%d) = %d&quot;</span> n maxFlips
    <span class="hl num">0</span>
