<span class="hl slc">;;   The Computer Language Benchmarks Game</span>
<span class="hl slc">;;   http://shootout.alioth.debian.org/</span>

<span class="hl slc">;; contributed by Andy Fingerhut</span>

<span class="hl slc">;; The function 'dot' is based on suggestions and improvements made by</span>
<span class="hl slc">;; these people posting to the Clojure Google group in April, 2009:</span>
<span class="hl slc">;; dmitri.sotnikov, William D. Lipe, Paul Stadig, michael.messinides</span>
<span class="hl slc">;; David Sletten, John Harrop</span>

<span class="hl sym">(</span>import <span class="hl sym">'(</span>java.io BufferedOutputStream<span class="hl sym">))</span>

<span class="hl sym">(</span>def <span class="hl sym">*</span>default<span class="hl sym">-</span>modified<span class="hl sym">-</span>pmap<span class="hl sym">-</span>num<span class="hl sym">-</span>threads<span class="hl sym">*</span>
     <span class="hl sym">(+</span> <span class="hl num">2</span> <span class="hl sym">(</span>.. Runtime getRuntime availableProcessors<span class="hl sym">)))</span>

<span class="hl sym">(</span>defn usage <span class="hl sym">[</span>exit<span class="hl sym">-</span>code<span class="hl sym">]</span>
  <span class="hl sym">(</span>println <span class="hl sym">(</span>format <span class="hl str">&quot;usage: %s size [num-threads]&quot;</span>
                   <span class="hl sym">*</span>file<span class="hl sym">*))</span>
  <span class="hl sym">(</span>println <span class="hl sym">(</span>format <span class="hl str">&quot;    size must be a positive integer&quot;</span><span class="hl sym">))</span>
  <span class="hl sym">(</span>println <span class="hl sym">(</span>format <span class="hl str">&quot;    num-threads is the maximum threads to use at once&quot;</span><span class="hl sym">))</span>
  <span class="hl sym">(</span>println <span class="hl sym">(</span>format <span class="hl str">&quot;        during the computation.  If 0 or not given, it&quot;</span><span class="hl sym">))</span>
  <span class="hl sym">(</span>println <span class="hl sym">(</span>format <span class="hl str">&quot;        defaults to the number of available cores plus 2,&quot;</span><span class="hl sym">))</span>
  <span class="hl sym">(</span>println <span class="hl sym">(</span>format <span class="hl str">&quot;        which is %d&quot;</span>
                   <span class="hl sym">*</span>default<span class="hl sym">-</span>modified<span class="hl sym">-</span>pmap<span class="hl sym">-</span>num<span class="hl sym">-</span>threads<span class="hl sym">*))</span>
  <span class="hl sym">(</span>. System <span class="hl sym">(</span>exit exit<span class="hl sym">-</span>code<span class="hl sym">)))</span>

<span class="hl sym">(</span>when <span class="hl sym">(</span>or <span class="hl sym">(&lt; (</span>count <span class="hl sym">*</span>command<span class="hl sym">-</span>line<span class="hl sym">-</span>args<span class="hl sym">*)</span> <span class="hl num">1</span><span class="hl sym">) (&gt; (</span>count <span class="hl sym">*</span>command<span class="hl sym">-</span>line<span class="hl sym">-</span>args<span class="hl sym">*)</span> <span class="hl num">2</span><span class="hl sym">))</span>
  <span class="hl sym">(</span>usage <span class="hl num">1</span><span class="hl sym">))</span>
<span class="hl sym">(</span>when <span class="hl sym">(</span>not <span class="hl sym">(</span>re<span class="hl sym">-</span>matches #<span class="hl str">&quot;^</span><span class="hl esc">\</span><span class="hl str">d+$&quot;</span> <span class="hl sym">(</span>nth <span class="hl sym">*</span>command<span class="hl sym">-</span>line<span class="hl sym">-</span>args<span class="hl sym">*</span> <span class="hl num">0</span><span class="hl sym">)))</span>
  <span class="hl sym">(</span>usage <span class="hl num">1</span><span class="hl sym">))</span>
<span class="hl sym">(</span>def size <span class="hl sym">(</span>. Integer valueOf <span class="hl sym">(</span>nth <span class="hl sym">*</span>command<span class="hl sym">-</span>line<span class="hl sym">-</span>args<span class="hl sym">*</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl num">10</span><span class="hl sym">))</span>
<span class="hl sym">(</span>when <span class="hl sym">(&lt;</span> size <span class="hl num">1</span><span class="hl sym">)</span>
  <span class="hl sym">(</span>usage <span class="hl num">1</span><span class="hl sym">))</span>
<span class="hl sym">(</span>def num<span class="hl sym">-</span>threads
     <span class="hl sym">(</span>if <span class="hl sym">(&gt;= (</span>count <span class="hl sym">*</span>command<span class="hl sym">-</span>line<span class="hl sym">-</span>args<span class="hl sym">*)</span> <span class="hl num">2</span><span class="hl sym">)</span>
       <span class="hl sym">(</span>do
         <span class="hl sym">(</span>when <span class="hl sym">(</span>not <span class="hl sym">(</span>re<span class="hl sym">-</span>matches #<span class="hl str">&quot;^</span><span class="hl esc">\</span><span class="hl str">d+$&quot;</span> <span class="hl sym">(</span>nth <span class="hl sym">*</span>command<span class="hl sym">-</span>line<span class="hl sym">-</span>args<span class="hl sym">*</span> <span class="hl num">1</span><span class="hl sym">)))</span>
           <span class="hl sym">(</span>usage <span class="hl num">1</span><span class="hl sym">))</span>
         <span class="hl sym">(</span>let <span class="hl sym">[</span>n <span class="hl sym">(</span>. Integer valueOf <span class="hl sym">(</span>nth <span class="hl sym">*</span>command<span class="hl sym">-</span>line<span class="hl sym">-</span>args<span class="hl sym">*</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl num">10</span><span class="hl sym">)]</span>
           <span class="hl sym">(</span>if <span class="hl sym">(==</span> n <span class="hl num">0</span><span class="hl sym">)</span>
             <span class="hl sym">*</span>default<span class="hl sym">-</span>modified<span class="hl sym">-</span>pmap<span class="hl sym">-</span>num<span class="hl sym">-</span>threads<span class="hl sym">*</span>
             n<span class="hl sym">)))</span>
       <span class="hl sym">*</span>default<span class="hl sym">-</span>modified<span class="hl sym">-</span>pmap<span class="hl sym">-</span>num<span class="hl sym">-</span>threads<span class="hl sym">*))</span>


<span class="hl sym">(</span>def max<span class="hl sym">-</span>iterations <span class="hl num">50</span><span class="hl sym">)</span>
<span class="hl sym">(</span>def limit<span class="hl sym">-</span>square <span class="hl sym">(</span>double <span class="hl num">4.0</span><span class="hl sym">))</span>

<span class="hl sym">(</span>defn dot <span class="hl sym">[</span>r i<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>f2 <span class="hl sym">(</span>double <span class="hl num">2.0</span><span class="hl sym">)</span>
        limit<span class="hl sym">-</span>square <span class="hl sym">(</span>double limit<span class="hl sym">-</span>square<span class="hl sym">)</span>
        iterations<span class="hl sym">-</span>remaining <span class="hl sym">(</span>int max<span class="hl sym">-</span>iterations<span class="hl sym">)</span>
        pr <span class="hl sym">(</span>double r<span class="hl sym">)</span>
        pi <span class="hl sym">(</span>double i<span class="hl sym">)]</span>
    <span class="hl slc">;; The loop below is similar to the one in the Perl subroutine dot</span>
    <span class="hl slc">;; in mandelbrot.perl, with these name correspondences:</span>
    <span class="hl slc">;; pr &lt;-&gt; Cr, pi &lt;-&gt; Ci, zi &lt;-&gt; Zi, zr &lt;-&gt; Zr, zr2 &lt;-&gt; Tr, zi2 &lt;-&gt; Ti</span>
    <span class="hl sym">(</span>loop <span class="hl sym">[</span>zr <span class="hl sym">(</span>double <span class="hl num">0.0</span><span class="hl sym">)</span>
           zi <span class="hl sym">(</span>double <span class="hl num">0.0</span><span class="hl sym">)</span>
           i <span class="hl sym">(</span>int <span class="hl sym">(</span>inc iterations<span class="hl sym">-</span>remaining<span class="hl sym">))]</span>
      <span class="hl sym">(</span>let <span class="hl sym">[</span>zr2 <span class="hl sym">(*</span> zr zr<span class="hl sym">)</span>
            zi2 <span class="hl sym">(*</span> zi zi<span class="hl sym">)]</span>
        <span class="hl sym">(</span>if <span class="hl sym">(</span>and <span class="hl sym">(</span>not <span class="hl sym">(</span>zero? i<span class="hl sym">))</span>
                 <span class="hl sym">(&lt; (+</span> zr2 zi2<span class="hl sym">)</span> limit<span class="hl sym">-</span>square<span class="hl sym">))</span>
          <span class="hl sym">(</span>recur <span class="hl sym">(+ (-</span> zr2 zi2<span class="hl sym">)</span> pr<span class="hl sym">)</span>
                 <span class="hl sym">(+ (* (*</span> f2 zr<span class="hl sym">)</span> zi<span class="hl sym">)</span> pi<span class="hl sym">)</span>
                 <span class="hl sym">(</span>unchecked<span class="hl sym">-</span>dec i<span class="hl sym">))</span>
          <span class="hl sym">(</span>zero? i<span class="hl sym">))))))</span>


<span class="hl sym">(</span>defn index<span class="hl sym">-</span>to<span class="hl sym">-</span>val <span class="hl sym">[</span>i scale<span class="hl sym">-</span>fac offset<span class="hl sym">]</span>
  <span class="hl sym">(+ (*</span> i scale<span class="hl sym">-</span>fac<span class="hl sym">)</span> offset<span class="hl sym">))</span>


<span class="hl sym">(</span>defn ubyte
  <span class="hl sym">[</span>val<span class="hl sym">]</span>
  <span class="hl sym">(</span>if <span class="hl sym">(&gt;=</span> val <span class="hl num">128</span><span class="hl sym">)</span>
    <span class="hl sym">(</span>byte <span class="hl sym">(-</span> val <span class="hl num">256</span><span class="hl sym">))</span>
    <span class="hl sym">(</span>byte val<span class="hl sym">)))</span>


<span class="hl sym">(</span>defn compute<span class="hl sym">-</span>row
  <span class="hl sym">[</span>x<span class="hl sym">-</span>vals y<span class="hl sym">]</span>
    <span class="hl sym">(</span>loop <span class="hl sym">[</span>b <span class="hl sym">(</span>int <span class="hl num">0</span><span class="hl sym">)</span>
           num<span class="hl sym">-</span>filled<span class="hl sym">-</span>bits <span class="hl sym">(</span>int <span class="hl num">0</span><span class="hl sym">)</span>
           result <span class="hl sym">(</span>transient <span class="hl sym">[])</span>
           x<span class="hl sym">-</span>vals x<span class="hl sym">-</span>vals<span class="hl sym">]</span>
      <span class="hl sym">(</span>if<span class="hl sym">-</span>let <span class="hl sym">[</span>s <span class="hl sym">(</span>seq x<span class="hl sym">-</span>vals<span class="hl sym">)]</span>
        <span class="hl slc">;; then</span>
        <span class="hl sym">(</span>let <span class="hl sym">[</span>new<span class="hl sym">-</span>bit <span class="hl sym">(</span>int <span class="hl sym">(</span>if <span class="hl sym">(</span>dot <span class="hl sym">(</span>first s<span class="hl sym">)</span> y<span class="hl sym">)</span> <span class="hl num">1 0</span><span class="hl sym">))</span>
              new<span class="hl sym">-</span>b <span class="hl sym">(</span>int <span class="hl sym">(+ (</span>bit<span class="hl sym">-</span>shift<span class="hl sym">-</span>left b <span class="hl num">1</span><span class="hl sym">)</span> new<span class="hl sym">-</span>bit<span class="hl sym">))]</span>
          <span class="hl sym">(</span>if <span class="hl sym">(==</span> num<span class="hl sym">-</span>filled<span class="hl sym">-</span>bits <span class="hl num">7</span><span class="hl sym">)</span>
            <span class="hl sym">(</span>recur <span class="hl sym">(</span>int <span class="hl num">0</span><span class="hl sym">)</span>
                   <span class="hl sym">(</span>int <span class="hl num">0</span><span class="hl sym">)</span>
                   <span class="hl sym">(</span>conj<span class="hl sym">!</span> result <span class="hl sym">(</span>ubyte new<span class="hl sym">-</span>b<span class="hl sym">))</span>
                   <span class="hl sym">(</span>rest s<span class="hl sym">))</span>
            <span class="hl sym">(</span>recur new<span class="hl sym">-</span>b
                   <span class="hl sym">(</span>int <span class="hl sym">(</span>inc num<span class="hl sym">-</span>filled<span class="hl sym">-</span>bits<span class="hl sym">))</span>
                   result
                   <span class="hl sym">(</span>rest s<span class="hl sym">))))</span>
        <span class="hl slc">;; else</span>
        <span class="hl sym">(</span>if <span class="hl sym">(</span>zero? num<span class="hl sym">-</span>filled<span class="hl sym">-</span>bits<span class="hl sym">)</span>
          <span class="hl sym">(</span>persistent<span class="hl sym">!</span> result<span class="hl sym">)</span>
          <span class="hl sym">(</span>persistent<span class="hl sym">! (</span>conj<span class="hl sym">!</span> result
                              <span class="hl sym">(</span>ubyte <span class="hl sym">(</span>bit<span class="hl sym">-</span>shift<span class="hl sym">-</span>left b <span class="hl sym">(-</span> <span class="hl num">8</span> num<span class="hl sym">-</span>filled<span class="hl sym">-</span>bits<span class="hl sym">)))))</span>
          <span class="hl sym">))))</span>


<span class="hl sym">(</span>defn my<span class="hl sym">-</span>lazy<span class="hl sym">-</span>map
  <span class="hl sym">[</span>f coll<span class="hl sym">]</span>
  <span class="hl sym">(</span>lazy<span class="hl sym">-</span>seq
    <span class="hl sym">(</span>when<span class="hl sym">-</span>let <span class="hl sym">[</span>s <span class="hl sym">(</span>seq coll<span class="hl sym">)]</span>
      <span class="hl sym">(</span>cons <span class="hl sym">(</span>f <span class="hl sym">(</span>first s<span class="hl sym">)) (</span>my<span class="hl sym">-</span>lazy<span class="hl sym">-</span>map f <span class="hl sym">(</span>rest s<span class="hl sym">))))))</span>


<span class="hl sym">(</span>defn modified<span class="hl sym">-</span>pmap
  <span class="hl str">&quot;Like pmap from Clojure 1.1, but with only as much parallelism as</span>
<span class="hl str">  there are available processors.  Uses my-lazy-map instead of map</span>
<span class="hl str">  from core.clj, since that version of map can use unwanted additional</span>
<span class="hl str">  parallelism for chunked collections, like ranges.&quot;</span>
  <span class="hl sym">([</span>num<span class="hl sym">-</span>threads f coll<span class="hl sym">]</span>
     <span class="hl sym">(</span>if <span class="hl sym">(==</span> num<span class="hl sym">-</span>threads <span class="hl num">1</span><span class="hl sym">)</span>
       <span class="hl sym">(</span>map f coll<span class="hl sym">)</span>
       <span class="hl sym">(</span>let <span class="hl sym">[</span>n <span class="hl sym">(</span>if <span class="hl sym">(&gt;=</span> num<span class="hl sym">-</span>threads <span class="hl num">2</span><span class="hl sym">) (</span>dec num<span class="hl sym">-</span>threads<span class="hl sym">)</span> <span class="hl num">1</span><span class="hl sym">)</span>
             rets <span class="hl sym">(</span>my<span class="hl sym">-</span>lazy<span class="hl sym">-</span>map #<span class="hl sym">(</span>future <span class="hl sym">(</span>f %<span class="hl sym">))</span> coll<span class="hl sym">)</span>
             step <span class="hl sym">(</span>fn step <span class="hl sym">[[</span>x <span class="hl sym">&amp;</span> xs <span class="hl sym">:</span>as vs<span class="hl sym">]</span> fs<span class="hl sym">]</span>
                    <span class="hl sym">(</span>lazy<span class="hl sym">-</span>seq
                      <span class="hl sym">(</span>if<span class="hl sym">-</span>let <span class="hl sym">[</span>s <span class="hl sym">(</span>seq fs<span class="hl sym">)]</span>
                        <span class="hl sym">(</span>cons <span class="hl sym">(</span>deref x<span class="hl sym">) (</span>step xs <span class="hl sym">(</span>rest s<span class="hl sym">)))</span>
                        <span class="hl sym">(</span>map deref vs<span class="hl sym">))))]</span>
         <span class="hl sym">(</span>step rets <span class="hl sym">(</span>drop n rets<span class="hl sym">)))))</span>
  <span class="hl sym">([</span>num<span class="hl sym">-</span>threads f coll <span class="hl sym">&amp;</span> colls<span class="hl sym">]</span>
     <span class="hl sym">(</span>let <span class="hl sym">[</span>step <span class="hl sym">(</span>fn step <span class="hl sym">[</span>cs<span class="hl sym">]</span>
                  <span class="hl sym">(</span>lazy<span class="hl sym">-</span>seq
                    <span class="hl sym">(</span>let <span class="hl sym">[</span>ss <span class="hl sym">(</span>my<span class="hl sym">-</span>lazy<span class="hl sym">-</span>map seq cs<span class="hl sym">)]</span>
                      <span class="hl sym">(</span>when <span class="hl sym">(</span>every? identity ss<span class="hl sym">)</span>
                        <span class="hl sym">(</span>cons <span class="hl sym">(</span>my<span class="hl sym">-</span>lazy<span class="hl sym">-</span>map first ss<span class="hl sym">)</span>
                              <span class="hl sym">(</span>step <span class="hl sym">(</span>my<span class="hl sym">-</span>lazy<span class="hl sym">-</span>map rest ss<span class="hl sym">)))))))]</span>
       <span class="hl sym">(</span>modified<span class="hl sym">-</span>pmap num<span class="hl sym">-</span>threads #<span class="hl sym">(</span>apply f %<span class="hl sym">) (</span>step <span class="hl sym">(</span>cons coll colls<span class="hl sym">))))))</span>


<span class="hl sym">(</span>defn compute<span class="hl sym">-</span>rows <span class="hl sym">[</span>size num<span class="hl sym">-</span>threads<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>two<span class="hl sym">-</span>over<span class="hl sym">-</span>size <span class="hl sym">(</span>double <span class="hl sym">(/</span> <span class="hl num">2.0</span> size<span class="hl sym">))</span>
        x<span class="hl sym">-</span>offset <span class="hl sym">(</span>double <span class="hl sym">-</span><span class="hl num">1.5</span><span class="hl sym">)</span>
        y<span class="hl sym">-</span>offset <span class="hl sym">(</span>double <span class="hl sym">-</span><span class="hl num">1.0</span><span class="hl sym">)</span>
        x<span class="hl sym">-</span>vals <span class="hl sym">(</span>map #<span class="hl sym">(</span>index<span class="hl sym">-</span>to<span class="hl sym">-</span>val % two<span class="hl sym">-</span>over<span class="hl sym">-</span>size x<span class="hl sym">-</span>offset<span class="hl sym">) (</span>range size<span class="hl sym">))]</span>
    <span class="hl sym">(</span>modified<span class="hl sym">-</span>pmap num<span class="hl sym">-</span>threads
                   #<span class="hl sym">(</span>compute<span class="hl sym">-</span>row x<span class="hl sym">-</span>vals
                                 <span class="hl sym">(</span>index<span class="hl sym">-</span>to<span class="hl sym">-</span>val % two<span class="hl sym">-</span>over<span class="hl sym">-</span>size y<span class="hl sym">-</span>offset<span class="hl sym">))</span>
                   <span class="hl sym">(</span>range size<span class="hl sym">))))</span>


<span class="hl sym">(</span>defn main <span class="hl sym">[</span>size num<span class="hl sym">-</span>threads<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>rows <span class="hl sym">(</span>compute<span class="hl sym">-</span>rows size num<span class="hl sym">-</span>threads<span class="hl sym">)]</span>
    <span class="hl sym">(</span>println <span class="hl str">&quot;P4&quot;</span><span class="hl sym">)</span>
    <span class="hl sym">(</span>println <span class="hl sym">(</span>format <span class="hl str">&quot;%d %d&quot;</span> size size<span class="hl sym">))</span>
    <span class="hl sym">(</span>let <span class="hl sym">[</span>ostream <span class="hl sym">(</span>BufferedOutputStream. System<span class="hl sym">/</span>out<span class="hl sym">)]</span>
      <span class="hl sym">(</span>doseq <span class="hl sym">[</span>r rows<span class="hl sym">]</span>
        <span class="hl sym">(</span>. ostream write <span class="hl sym">(</span>into<span class="hl sym">-</span>array Byte<span class="hl sym">/</span>TYPE r<span class="hl sym">)</span> <span class="hl num">0</span> <span class="hl sym">(</span>count r<span class="hl sym">)))</span>
      <span class="hl sym">(</span>. ostream close<span class="hl sym">))</span>
    <span class="hl sym">(</span>flush<span class="hl sym">)))</span>


<span class="hl sym">(</span>main size num<span class="hl sym">-</span>threads<span class="hl sym">)</span>
