<source>
<def></def><slc>%%%-------------------------------------------------------------------</slc><br />
<def></def><slc>%%% File    : fannkuch.erl</slc><br />
<def></def><slc>%%% Author  : Mats Cronqvist &lt;locmacr@mwlx084&gt;</slc><br />
<def></def><slc>%%% Description :</slc><br />
<def></def><slc>%%%</slc><br />
<def></def><slc>%%% Created : 25 Apr 2006 by Mats Cronqvist &lt;locmacr@mwlx084&gt;</slc><br />
<def></def><slc>%%%-------------------------------------------------------------------</slc><br />
<def></def><sym>-</sym><def></def><kwa>module</kwa><def></def><sym>(</sym><def>fannkuch</def><sym>).</sym><br />
<def></def><br />
<sym>-</sym><def></def><kwa>export</kwa><def></def><sym>([</sym><def>main</def><sym>/</sym><def></def><num>1</num><def></def><sym>]).</sym><br />
<def></def><br />
<kwd>main</kwd><def></def><sym>([</sym><def>Arg</def><sym>]) -&gt;</sym><br />
<def>    N</def> <sym>=</sym> <def></def><kwb>list_to_integer</kwb><def></def><sym>(</sym><def>Arg</def><sym>),</sym><br />
<def></def>    <kwd>main</kwd><def></def><sym>(</sym><def>N</def><sym>),</sym><br />
<def>    erlang</def><sym>:</sym><def></def><kwb>halt</kwb><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>);</sym><br />
<def></def><kwd>main</kwd><def></def><sym>(</sym><def>N</def><sym>)</sym> <def></def><kwa>when</kwa> <def>N</def> <sym>&gt;</sym> <def></def><num>0</num> <def></def><sym>-&gt;</sym><br />
<def></def>    <kwb>put</kwb><def></def><sym>(</sym><def>max</def><sym>,</sym><def></def><num>0</num><def></def><sym>),</sym><br />
<def></def>    <kwb>put</kwb><def></def><sym>(</sym><def>print</def><sym>,</sym><def></def><num>30</num><def></def><sym>),</sym><br />
<def></def>    <kwd>perm</kwd><def></def><sym>(</sym><def>N</def><sym>,</sym><def></def><kwd>init</kwd><def></def><sym>(</sym><def>N</def><sym>)),</sym><br />
<def>    io</def><sym>:</sym><def></def><kwd>fwrite</kwd><def></def><sym>(</sym><def></def><str>&quot;Pfannkuchen(~p) = ~p~n&quot;</str><def></def><sym>, [</sym><def>N</def><sym>,</sym> <def></def><kwb>get</kwb><def></def><sym>(</sym><def>max</def><sym>)]).</sym><br />
<def></def><br />
<slc>%% perm and prot generates the permutations in the right order and</slc><br />
<def></def><slc>%% calls x/1 for each one</slc><br />
<def></def><br />
<kwd>perm</kwd><def></def><sym>(</sym><def>N</def><sym>,</sym><def>Data</def><sym>)</sym> <def></def><kwa>when</kwa> <def></def><kwb>length</kwb><def></def><sym>(</sym><def>Data</def><sym>) &lt;</sym> <def>N</def> <sym>-&gt;</sym> <def>Data</def><sym>;</sym><br />
<def></def><kwd>perm</kwd><def></def><sym>(</sym><def></def><num>3</num><def></def><sym>,</sym><def>Data</def><sym>) -&gt;</sym> <def></def><kwd>x</kwd><def></def><sym>(</sym><def></def><kwd>flip</kwd><def></def><sym>(</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><kwd>x</kwd><def></def><sym>(</sym><def></def><kwd>flip</kwd><def></def><sym>(</sym><def></def><num>2</num><def></def><sym>,</sym><def></def><kwd>x</kwd><def></def><sym>(</sym><def></def><kwd>flip</kwd><def></def><sym>(</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><kwd>x</kwd><def></def><sym>(</sym><def></def><kwd>flip</kwd><def></def><sym>(</sym><def></def><num>2</num><def></def><sym>,</sym><def></def><kwd>x</kwd><def></def><sym>(</sym><def></def><kwd>flip</kwd><def></def><sym>(</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><kwd>x</kwd><def></def><sym>(</sym><def>Data</def><sym>)))))))))));</sym><br />
<def></def><kwd>perm</kwd><def></def><sym>(</sym><def>N</def><sym>,</sym><def>Data</def><sym>) -&gt;</sym> <def></def><kwd>prot</kwd><def></def><sym>(</sym><def>N</def><sym>,</sym><def>N</def><sym>,</sym><def>Data</def><sym>).</sym><br />
<def></def><br />
<kwd>prot</kwd><def></def><sym>(</sym><def>_N</def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def>Data</def><sym>) -&gt;</sym> <def>Data</def><sym>;</sym><br />
<def></def><kwd>prot</kwd><def></def><sym>(</sym><def>N</def><sym>,</sym><def>M</def><sym>,</sym><def>Data</def><sym>) -&gt;</sym> <def></def><kwd>perm</kwd><def></def><sym>(</sym><def>N</def><sym>-</sym><def></def><num>1</num><def></def><sym>,</sym><def>Data</def><sym>),</sym> <def></def><kwd>prot</kwd><def></def><sym>(</sym><def>N</def><sym>,</sym><def>M</def><sym>-</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><kwd>rotate</kwd><def></def><sym>(</sym><def>N</def><sym>,</sym><def>Data</def><sym>)).</sym><br />
<def></def><br />
<slc>%% x/1 is the action function. called once for each permutation. calls</slc><br />
<def></def><slc>%% kuch/1 to get the number of flips</slc><br />
<def></def><kwd>x</kwd><def></def><sym>(</sym><def>Data</def><sym>) -&gt;</sym><br />
<def></def>    <kwa>case</kwa> <def></def><kwb>get</kwb><def></def><sym>(</sym><def>print</def><sym>)</sym> <def></def><kwa>of</kwa><br />
<def></def> 	<num>0</num> <def></def><sym>-&gt;</sym> <def>ok</def><sym>;</sym><br />
<def> 	N</def> <sym>-&gt;</sym> <def></def><kwd>flush</kwd><def></def><sym>(</sym><def>Data</def><sym>),</sym><def></def><kwb>put</kwb><def></def><sym>(</sym><def>print</def><sym>,</sym><def>N</def><sym>-</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>    <kwa>end</kwa><def></def><sym>,</sym><br />
<def></def>    <kwa>case</kwa> <def></def><kwb>get</kwb><def></def><sym>(</sym><def>max</def><sym>) &lt; (</sym><def>K</def> <sym>=</sym> <def></def><kwd>kuch</kwd><def></def><sym>(</sym><def>Data</def><sym>,</sym><def></def><num>0</num><def></def><sym>))</sym> <def></def><kwa>of</kwa><br />
<def> 	true</def> <sym>-&gt;</sym> <def></def><kwb>put</kwb><def></def><sym>(</sym><def>max</def><sym>,</sym><def>K</def><sym>);</sym><br />
<def> 	false</def> <sym>-&gt;</sym> <def>ok</def><br />
    <kwa>end</kwa><def></def><sym>,</sym><br />
<def>    Data</def><sym>.</sym><br />
<def></def><br />
<slc>%% this is the actual flipping function. return number of flips</slc><br />
<def></def><kwd>kuch</kwd><def></def><sym>(</sym><def>Data</def><sym>,</sym><def>N</def><sym>) -&gt;</sym><br />
<def></def>    <kwa>case</kwa> <def></def><kwd>head</kwd><def></def><sym>(</sym><def>Data</def><sym>)</sym> <def></def><kwa>of</kwa><br />
<def></def>	<num>1</num> <def></def><sym>-&gt;</sym> <def>N</def><sym>;</sym><br />
<def>	M</def> <sym>-&gt;</sym> <def></def><kwd>kuch</kwd><def></def><sym>(</sym><def></def><kwd>reverse</kwd><def></def><sym>(</sym><def>M</def><sym>,</sym><def>Data</def><sym>),</sym><def>N</def><sym>+</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>    <kwa>end</kwa><def></def><sym>.</sym><br />
<def></def><br />
<br />
<slc>%% primitives for our data model</slc><br />
<def></def><slc>%%</slc><br />
<def></def><slc>%% init(Length) - create new struct</slc><br />
<def></def><slc>%% head(Data) - return first element</slc><br />
<def></def><slc>%% reverse(N, Data) - reverse first N elements</slc><br />
<def></def><slc>%% rotate(N, Data) - rotate first N elements</slc><br />
<def></def><slc>%% flip(N, Data) - exchange N:th and N+1:th element</slc><br />
<def></def><slc>%% flush(Data) - flush to screen</slc><br />
<def></def><br />
<kwd>init</kwd><def></def><sym>(</sym><def>N</def><sym>) -&gt;</sym> <def>lists</def><sym>:</sym><def></def><kwd>seq</kwd><def></def><sym>(</sym><def></def><num>1</num><def></def><sym>,</sym><def>N</def><sym>).</sym><br />
<def></def><br />
<kwd>head</kwd><def></def><sym>(</sym><def>L</def><sym>) -&gt;</sym> <def></def><kwb>hd</kwb><def></def><sym>(</sym><def>L</def><sym>).</sym><br />
<def></def><br />
<kwd>reverse</kwd><def></def><sym>(</sym><def></def><num>2</num><def></def><sym>,[</sym><def>H1</def><sym>,</sym><def>H2</def><sym>|</sym><def>L</def><sym>]) -&gt;</sym><br />
<def></def>    <sym>[</sym><def>H2</def><sym>,</sym><def>H1</def><sym>|</sym><def>L</def><sym>];</sym><br />
<def></def><kwd>reverse</kwd><def></def><sym>(</sym><def></def><num>3</num><def></def><sym>,[</sym><def>H1</def><sym>,</sym><def>H2</def><sym>,</sym><def>H3</def><sym>|</sym><def>L</def><sym>]) -&gt;</sym><br />
<def></def>    <sym>[</sym><def>H3</def><sym>,</sym><def>H2</def><sym>,</sym><def>H1</def><sym>|</sym><def>L</def><sym>];</sym><br />
<def></def><kwd>reverse</kwd><def></def><sym>(</sym><def></def><num>4</num><def></def><sym>,[</sym><def>H1</def><sym>,</sym><def>H2</def><sym>,</sym><def>H3</def><sym>,</sym><def>H4</def><sym>|</sym><def>L</def><sym>]) -&gt;</sym><br />
<def></def>    <sym>[</sym><def>H4</def><sym>,</sym><def>H3</def><sym>,</sym><def>H2</def><sym>,</sym><def>H1</def><sym>|</sym><def>L</def><sym>];</sym><br />
<def></def><kwd>reverse</kwd><def></def><sym>(</sym><def></def><num>5</num><def></def><sym>,[</sym><def>H1</def><sym>,</sym><def>H2</def><sym>,</sym><def>H3</def><sym>,</sym><def>H4</def><sym>,</sym><def>H5</def><sym>|</sym><def>L</def><sym>]) -&gt;</sym><br />
<def></def>    <sym>[</sym><def>H5</def><sym>,</sym><def>H4</def><sym>,</sym><def>H3</def><sym>,</sym><def>H2</def><sym>,</sym><def>H1</def><sym>|</sym><def>L</def><sym>];</sym><br />
<def></def><kwd>reverse</kwd><def></def><sym>(</sym><def></def><num>6</num><def></def><sym>,[</sym><def>H1</def><sym>,</sym><def>H2</def><sym>,</sym><def>H3</def><sym>,</sym><def>H4</def><sym>,</sym><def>H5</def><sym>,</sym><def>H6</def><sym>|</sym><def>L</def><sym>]) -&gt;</sym><br />
<def></def>    <sym>[</sym><def>H6</def><sym>,</sym><def>H5</def><sym>,</sym><def>H4</def><sym>,</sym><def>H3</def><sym>,</sym><def>H2</def><sym>,</sym><def>H1</def><sym>|</sym><def>L</def><sym>];</sym><br />
<def></def><kwd>reverse</kwd><def></def><sym>(</sym><def></def><num>7</num><def></def><sym>,[</sym><def>H1</def><sym>,</sym><def>H2</def><sym>,</sym><def>H3</def><sym>,</sym><def>H4</def><sym>,</sym><def>H5</def><sym>,</sym><def>H6</def><sym>,</sym><def>H7</def><sym>|</sym><def>L</def><sym>]) -&gt;</sym><br />
<def></def>    <sym>[</sym><def>H7</def><sym>,</sym><def>H6</def><sym>,</sym><def>H5</def><sym>,</sym><def>H4</def><sym>,</sym><def>H3</def><sym>,</sym><def>H2</def><sym>,</sym><def>H1</def><sym>|</sym><def>L</def><sym>];</sym><br />
<def></def><kwd>reverse</kwd><def></def><sym>(</sym><def></def><num>8</num><def></def><sym>,[</sym><def>H1</def><sym>,</sym><def>H2</def><sym>,</sym><def>H3</def><sym>,</sym><def>H4</def><sym>,</sym><def>H5</def><sym>,</sym><def>H6</def><sym>,</sym><def>H7</def><sym>,</sym><def>H8</def><sym>|</sym><def>L</def><sym>]) -&gt;</sym><br />
<def></def>    <sym>[</sym><def>H8</def><sym>,</sym><def>H7</def><sym>,</sym><def>H6</def><sym>,</sym><def>H5</def><sym>,</sym><def>H4</def><sym>,</sym><def>H3</def><sym>,</sym><def>H2</def><sym>,</sym><def>H1</def><sym>|</sym><def>L</def><sym>];</sym><br />
<def></def><kwd>reverse</kwd><def></def><sym>(</sym><def></def><num>9</num><def></def><sym>,[</sym><def>H1</def><sym>,</sym><def>H2</def><sym>,</sym><def>H3</def><sym>,</sym><def>H4</def><sym>,</sym><def>H5</def><sym>,</sym><def>H6</def><sym>,</sym><def>H7</def><sym>,</sym><def>H8</def><sym>,</sym><def>H9</def><sym>|</sym><def>L</def><sym>]) -&gt;</sym><br />
<def></def>    <sym>[</sym><def>H9</def><sym>,</sym><def>H8</def><sym>,</sym><def>H7</def><sym>,</sym><def>H6</def><sym>,</sym><def>H5</def><sym>,</sym><def>H4</def><sym>,</sym><def>H3</def><sym>,</sym><def>H2</def><sym>,</sym><def>H1</def><sym>|</sym><def>L</def><sym>];</sym><br />
<def></def><kwd>reverse</kwd><def></def><sym>(</sym><def></def><num>10</num><def></def><sym>,[</sym><def>H1</def><sym>,</sym><def>H2</def><sym>,</sym><def>H3</def><sym>,</sym><def>H4</def><sym>,</sym><def>H5</def><sym>,</sym><def>H6</def><sym>,</sym><def>H7</def><sym>,</sym><def>H8</def><sym>,</sym><def>H9</def><sym>,</sym><def>H0</def><sym>|</sym><def>L</def><sym>]) -&gt;</sym><br />
<def></def>    <sym>[</sym><def>H0</def><sym>,</sym><def>H9</def><sym>,</sym><def>H8</def><sym>,</sym><def>H7</def><sym>,</sym><def>H6</def><sym>,</sym><def>H5</def><sym>,</sym><def>H4</def><sym>,</sym><def>H3</def><sym>,</sym><def>H2</def><sym>,</sym><def>H1</def><sym>|</sym><def>L</def><sym>];</sym><br />
<def></def><kwd>reverse</kwd><def></def><sym>(</sym><def>M</def><sym>,</sym><def>L</def><sym>) -&gt;</sym><br />
<def></def>    <sym>{</sym><def>H</def><sym>,</sym><def>T</def><sym>} =</sym> <def>lists</def><sym>:</sym><def></def><kwd>split</kwd><def></def><sym>(</sym><def>M</def><sym>,</sym><def>L</def><sym>),</sym><br />
<def>    lists</def><sym>:</sym><def></def><kwd>reverse</kwd><def></def><sym>(</sym><def>H</def><sym>)++</sym><def>T</def><sym>.</sym><br />
<def></def><br />
<kwd>rotate</kwd><def></def><sym>(</sym><def></def><num>4</num><def></def><sym>,[</sym><def>H1</def><sym>,</sym><def>H2</def><sym>,</sym><def>H3</def><sym>,</sym><def>H4</def><sym>|</sym><def>T</def><sym>]) -&gt; [</sym><def>H2</def><sym>,</sym><def>H3</def><sym>,</sym><def>H4</def><sym>,</sym><def>H1</def><sym>|</sym><def>T</def><sym>];</sym><br />
<def></def><kwd>rotate</kwd><def></def><sym>(</sym><def></def><num>5</num><def></def><sym>,[</sym><def>H1</def><sym>,</sym><def>H2</def><sym>,</sym><def>H3</def><sym>,</sym><def>H4</def><sym>,</sym><def>H5</def><sym>|</sym><def>T</def><sym>]) -&gt; [</sym><def>H2</def><sym>,</sym><def>H3</def><sym>,</sym><def>H4</def><sym>,</sym><def>H5</def><sym>,</sym><def>H1</def><sym>|</sym><def>T</def><sym>];</sym><br />
<def></def><kwd>rotate</kwd><def></def><sym>(</sym><def>N</def><sym>,</sym><def>L</def><sym>) -&gt; {[</sym><def>H</def><sym>|</sym><def>Hs</def><sym>],</sym><def>Ts</def><sym>} =</sym> <def>lists</def><sym>:</sym><def></def><kwd>split</kwd><def></def><sym>(</sym><def>N</def><sym>,</sym><def>L</def><sym>),</sym> <def>Hs</def><sym>++[</sym><def>H</def><sym>|</sym><def>Ts</def><sym>].</sym><br />
<def></def><br />
<kwd>flip</kwd><def></def><sym>(</sym><def></def><num>1</num><def></def><sym>,[</sym><def>H1</def><sym>,</sym><def>H2</def><sym>|</sym><def>T</def><sym>]) -&gt; [</sym><def>H2</def><sym>,</sym><def>H1</def><sym>|</sym><def>T</def><sym>];</sym><br />
<def></def><kwd>flip</kwd><def></def><sym>(</sym><def></def><num>2</num><def></def><sym>,[</sym><def>H</def><sym>,</sym><def>H1</def><sym>,</sym><def>H2</def><sym>|</sym><def>T</def><sym>]) -&gt; [</sym><def>H</def><sym>,</sym><def>H2</def><sym>,</sym><def>H1</def><sym>|</sym><def>T</def><sym>].</sym><br />
<def></def><br />
<kwd>flush</kwd><def></def><sym>(</sym><def>Data</def><sym>) -&gt;</sym><br />
<def>    lists</def><sym>:</sym><def></def><kwd>foreach</kwd><def></def><sym>(</sym><def></def><kwa>fun</kwa><def></def><sym>(</sym><def>I</def><sym>)-&gt;</sym><def>io</def><sym>:</sym><def></def><kwd>fwrite</kwd><def></def><sym>(</sym><def></def><str>&quot;~p&quot;</str><def></def><sym>,[</sym><def>I</def><sym>])</sym> <def></def><kwa>end</kwa><def></def><sym>,</sym> <def>Data</def><sym>),</sym><br />
<def>    io</def><sym>:</sym><def></def><kwd>fwrite</kwd><def></def><sym>(</sym><def></def><str>&quot;~n&quot;</str><def></def><sym>).</sym><def></def><br />
</source>
