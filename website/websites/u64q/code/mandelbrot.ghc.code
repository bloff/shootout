<source>
<def></def><com>{-# OPTIONS -O2 -fvia-C -fexcess-precision #-}</com><def></def><br />
<slc>--</slc><br />
<def></def><slc>-- The Computer Language Benchmarks Game</slc><br />
<def></def><slc>-- http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>--</slc><br />
<def></def><slc>-- Contributed by Spencer Janssen, Trevor McCort, Christophe Poucet and Don Stewart</slc><br />
<def></def><slc>--</slc><br />
<def></def><slc>-- Must be compiled with the -fexcess-precision flag as a pragma. GHC</slc><br />
<def></def><slc>-- currently doesn't recognise the -fexcess-precision flag on the command</slc><br />
<def></def><slc>-- line (!).</slc><br />
<def></def><slc>--</slc><br />
<def></def><slc>-- The following flags are suggested when compiling:</slc><br />
<def></def><slc>--</slc><br />
<def></def><slc>--      -O -fglasgow-exts -optc-march=pentium4</slc><br />
<def></def><slc>--      -fbang-patterns -funbox-strict-fields -optc-O2 -optc-mfpmath=sse -optc-msse2</slc><br />
<def></def><slc>--</slc><br />
<def></def><br />
<kwa>import</kwa> <def>System</def><br />
<kwa>import</kwa> <def>System.IO</def><br />
<kwa>import</kwa> <def>Foreign</def><br />
<kwa>import</kwa> <def>Foreign.Marshal.Array<br />
<br />
main</def> <sym>=</sym> <def></def><kwa>do</kwa><br />
<def>    w</def> <sym>&lt;-</sym> <def>getArgs</def> <sym>&gt;&gt;=</sym> <def>readIO . head</def><br />
    <kwa>let</kwa> <def>n</def>      <sym>=</sym> <def>w `div`</def> <num>8</num><br />
<def>        m</def>  <sym>=</sym> <def></def><num>2</num> <def></def><sym>/</sym> <def>fromIntegral w<br />
    putStrLn</def> <sym>(</sym><def></def><str>&quot;P4\n&quot;</str><def></def><sym>++</sym><def>show w</def><sym>++</sym><def></def><str>&quot; &quot;</str><def></def><sym>++</sym><def>show w</def><sym>)</sym><br />
<def>    p</def> <sym>&lt;-</sym> <def>mallocArray0 n<br />
    unfold n</def> <sym>(</sym><def>next_x w m n</def><sym>)</sym> <def>p</def> <sym>(</sym><def>T</def> <num>1 0 0</num> <def></def><sym>(-</sym><def></def><num>1</num><def></def><sym>))</sym><br />
<def><br />
unfold</def> <sym>::</sym> <def></def><kwb>Int</kwb> <def></def><sym>-&gt; (</sym><def>T</def> <sym>-&gt;</sym> <def>Maybe</def> <sym>(</sym><def>Word8</def><sym>,</sym><def>T</def><sym>)) -&gt;</sym> <def>Ptr Word8</def> <sym>-&gt;</sym> <def>T</def> <sym>-&gt;</sym> <def>IO</def> <sym>()</sym><br />
<def>unfold</def> <sym>!</sym><def>i</def> <sym>!</sym><def>f</def> <sym>!</sym><def>ptr</def> <sym>!</sym><def>x0</def> <sym>=</sym> <def>loop x0</def><br />
  <kwa>where</kwa><br />
<def>    loop</def> <sym>!</sym><def>x</def> <sym>=</sym> <def>go ptr</def> <num>0</num> <def>x<br />
<br />
    go</def> <sym>!</sym><def>p</def> <sym>!</sym><def>n</def> <sym>!</sym><def>x</def> <sym>=</sym> <def></def><kwa>case</kwa> <def>f x</def> <kwa>of</kwa><br />
<def>        Just</def> <sym>(</sym><def>w</def><sym>,</sym><def>y</def><sym>) |</sym> <def>n</def> <sym>/=</sym> <def>i</def> <sym>-&gt;</sym> <def>poke p w</def> <sym>&gt;&gt;</sym> <def>go</def> <sym>(</sym><def>p `plusPtr`</def> <num>1</num><def></def><sym>) (</sym><def>n</def><sym>+</sym><def></def><num>1</num><def></def><sym>)</sym> <def>y<br />
        Nothing</def>             <sym>-&gt;</sym> <def>hPutBuf stdout ptr i<br />
        _</def>                   <sym>-&gt;</sym> <def>hPutBuf stdout ptr i</def> <sym>&gt;&gt;</sym> <def>loop x</def><br />
<br />
<kwa>data</kwa> <def>T</def> <sym>=</sym> <def>T</def> <sym>!</sym><def></def><kwb>Int</kwb> <def></def><sym>!</sym><def></def><kwb>Int</kwb> <def></def><sym>!</sym><def></def><kwb>Int</kwb> <def></def><sym>!</sym><def></def><kwb>Double</kwb><br />
<def><br />
next_x</def> <sym>!</sym><def>w</def> <sym>!</sym><def>iw</def> <sym>!</sym><def>bw</def> <sym>(</sym><def>T bx x y ci</def><sym>)</sym><br />
<def></def>    <sym>|</sym> <def>y</def>  <sym>==</sym> <def>w</def>   <sym>=</sym> <def>Nothing</def><br />
    <sym>|</sym> <def>bx</def> <sym>==</sym> <def>bw</def>  <sym>=</sym> <def>Just</def> <sym>(</sym><def>loop_x w x</def> <num>8</num> <def>iw ci</def> <num>0</num><def></def><sym>,</sym> <def>T</def> <num>1 0</num>    <def></def><sym>(</sym><def>y</def><sym>+</sym><def></def><num>1</num><def></def><sym>)   (</sym><def>iw</def><sym>+</sym><def>ci</def><sym>))</sym><br />
<def></def>    <sym>|</sym> <def>otherwise</def> <sym>=</sym> <def>Just</def> <sym>(</sym><def>loop_x w x</def> <num>8</num> <def>iw ci</def> <num>0</num><def></def><sym>,</sym> <def>T</def> <sym>(</sym><def>bx</def><sym>+</sym><def></def><num>1</num><def></def><sym>) (</sym><def>x</def><sym>+</sym><def></def><num>8</num><def></def><sym>)</sym> <def>y ci</def><sym>)</sym><br />
<def><br />
loop_x</def> <sym>!</sym><def>w</def> <sym>!</sym><def>x</def> <sym>!</sym><def>n</def> <sym>!</sym><def>iw</def> <sym>!</sym><def>ci</def> <sym>!</sym><def>b</def><br />
    <sym>|</sym> <def>x</def> <sym>&lt;</sym> <def>w</def> <sym>=</sym> <def>if n</def> <sym>==</sym> <def></def><num>0</num><br />
<def></def>                    <kwa>then</kwa> <def>b</def><br />
                    <kwa>else</kwa> <def>loop_x w</def> <sym>(</sym><def>x</def><sym>+</sym><def></def><num>1</num><def></def><sym>) (</sym><def>n</def><sym>-</sym><def></def><num>1</num><def></def><sym>)</sym> <def>iw ci</def> <sym>(</sym><def>b</def><sym>+</sym><def>b</def><sym>+</sym><def>v</def><sym>)</sym><br />
<def></def>    <sym>|</sym> <def>otherwise</def> <sym>=</sym> <def>b `shiftL` n</def><br />
  <kwa>where</kwa><br />
<def>    v</def> <sym>=</sym> <def>fractal</def> <num>0 0</num> <def></def><sym>(</sym><def>fromIntegral x</def> <sym>*</sym> <def>iw</def> <sym>-</sym> <def></def><num>1.5</num><def></def><sym>)</sym> <def>ci</def> <num>50</num><br />
<def><br />
fractal</def> <sym>::</sym> <def></def><kwb>Double</kwb> <def></def><sym>-&gt;</sym> <def></def><kwb>Double</kwb> <def></def><sym>-&gt;</sym> <def></def><kwb>Double</kwb> <def></def><sym>-&gt;</sym> <def></def><kwb>Double</kwb> <def></def><sym>-&gt;</sym> <def></def><kwb>Int</kwb> <def></def><sym>-&gt;</sym> <def>Word8<br />
fractal</def> <sym>!</sym><def>r</def> <sym>!</sym><def>i</def> <sym>!</sym><def>cr</def> <sym>!</sym><def>ci</def> <sym>!</sym><def>k</def><br />
    <sym>|</sym> <def>r2</def> <sym>+</sym> <def>i2</def> <sym>&gt;</sym> <def></def><num>4</num> <def></def><sym>=</sym> <def></def><num>0</num><br />
<def></def>    <sym>|</sym> <def>k</def> <sym>==</sym> <def></def><num>0</num>      <def></def><sym>=</sym> <def></def><num>1</num><br />
<def></def>    <sym>|</sym> <def>otherwise</def>   <sym>=</sym> <def>fractal</def> <sym>(</sym><def>r2</def><sym>-</sym><def>i2</def><sym>+</sym><def>cr</def><sym>) ((</sym><def>r</def><sym>+</sym><def>r</def><sym>)*</sym><def>i</def><sym>+</sym><def>ci</def><sym>)</sym> <def>cr ci</def> <sym>(</sym><def>k</def><sym>-</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>  <kwa>where</kwa><br />
<def></def>    <sym>(!</sym><def>r2</def><sym>,!</sym><def>i2</def><sym>) = (</sym><def>r</def><sym>*</sym><def>r</def><sym>,</sym><def>i</def><sym>*</sym><def>i</def><sym>)</sym><def></def><br />
</source>
