<source>
<def></def><slc># The Computer Language Benchmarks Game</slc><br />
<def></def><slc># http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>#</slc><br />
<def></def><slc># contributed by - not known -</slc><br />
<def></def><slc># modified by Pilho Kim (first GMP version)</slc><br />
<def></def><slc># modified by Dani Nanz (2007-09-14)</slc><br />
<def></def><br />
<kwa>import</kwa> <def>sys</def><br />
<kwa>import</kwa> <def>itertools</def><br />
<kwa>import</kwa> <def>gmpy<br />
<br />
<br />
mpz0</def><sym>,</sym> <def>mpz1</def> <sym>=</sym> <def>gmpy</def><sym>.</sym><def></def><kwd>mpz</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>),</sym> <def>gmpy</def><sym>.</sym><def></def><kwd>mpz</kwd><def></def><sym>(</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def>mpz2</def><sym>,</sym> <def>mpz3</def> <sym>=</sym> <def>gmpy</def><sym>.</sym><def></def><kwd>mpz</kwd><def></def><sym>(</sym><def></def><num>2</num><def></def><sym>),</sym> <def>gmpy</def><sym>.</sym><def></def><kwd>mpz</kwd><def></def><sym>(</sym><def></def><num>3</num><def></def><sym>)</sym><br />
<def>mpz4</def><sym>,</sym> <def>mpz10</def> <sym>=</sym> <def>gmpy</def><sym>.</sym><def></def><kwd>mpz</kwd><def></def><sym>(</sym><def></def><num>4</num><def></def><sym>),</sym> <def>gmpy</def><sym>.</sym><def></def><kwd>mpz</kwd><def></def><sym>(</sym><def></def><num>10</num><def></def><sym>)</sym><br />
<def></def><br />
<br />
<kwa>def</kwa> <def></def><kwd>gen_x</kwd><def></def><sym>(</sym><def>k</def><sym>=</sym><def>mpz0</def><sym>):</sym><br />
<def></def><br />
    <kwa>while</kwa> <def></def><num>1</num><def></def><sym>:</sym><br />
<def>        k</def> <sym>+=</sym> <def>mpz1</def><br />
        <kwa>yield</kwa> <def></def><sym>(</sym><def>k</def><sym>,</sym> <def>mpz4</def> <sym>*</sym> <def>k</def> <sym>+</sym> <def>mpz2</def><sym>,</sym> <def>mpz0</def><sym>,</sym> <def>mpz2</def> <sym>*</sym> <def>k</def> <sym>+</sym> <def>mpz1</def><sym>)</sym><br />
<def></def><br />
<br />
<kwa>def</kwa> <def></def><kwd>compose</kwd><def></def><sym>((</sym><def>a</def><sym>,</sym> <def>b</def><sym>,</sym> <def>c</def><sym>,</sym> <def>d</def><sym>), (</sym><def>e</def><sym>,</sym> <def>f</def><sym>,</sym> <def>g</def><sym>,</sym> <def>h</def><sym>)):</sym><br />
<def></def><br />
    <kwa>return</kwa> <def></def><sym>(</sym><def>a</def> <sym>*</sym> <def>e</def><sym>,</sym><br />
<def>            a</def> <sym>*</sym> <def>f</def> <sym>+</sym> <def>b</def> <sym>*</sym> <def>h</def><sym>,</sym><br />
<def>            c</def> <sym>*</sym> <def>e</def> <sym>+</sym> <def>d</def> <sym>*</sym> <def>g</def><sym>,</sym><br />
<def>            c</def> <sym>*</sym> <def>f</def> <sym>+</sym> <def>d</def> <sym>*</sym> <def>h</def><sym>)</sym><br />
<def></def><br />
<br />
<kwa>def</kwa> <def></def><kwd>extract</kwd><def></def><sym>((</sym><def>a</def><sym>,</sym> <def>b</def><sym>,</sym> <def>c</def><sym>,</sym> <def>d</def><sym>),</sym> <def>j</def><sym>):</sym><br />
<def></def>    <kwa>return</kwa> <def></def><sym>(</sym><def>a</def> <sym>*</sym> <def>j</def> <sym>+</sym> <def>b</def><sym>) // (</sym><def>c</def> <sym>*</sym> <def>j</def> <sym>+</sym> <def>d</def><sym>)</sym><br />
<def></def><br />
<br />
<kwa>def</kwa> <def></def><kwd>pi_digits</kwd><def></def><sym>():</sym><br />
<def><br />
    z</def> <sym>= (</sym><def>mpz1</def><sym>,</sym> <def>mpz0</def><sym>,</sym> <def>mpz0</def><sym>,</sym> <def>mpz1</def><sym>)</sym><br />
<def>    x</def> <sym>=</sym> <def></def><kwd>gen_x</kwd><def></def><sym>()</sym><br />
<def></def>    <kwa>while</kwa> <def></def><num>1</num><def></def><sym>:</sym><br />
<def>        y</def> <sym>=</sym> <def></def><kwd>extract</kwd><def></def><sym>(</sym><def>z</def><sym>,</sym> <def>mpz3</def><sym>)</sym><br />
<def></def>        <kwa>while</kwa> <def>y</def> <sym>!=</sym> <def></def><kwd>extract</kwd><def></def><sym>(</sym><def>z</def><sym>,</sym> <def>mpz4</def><sym>):</sym><br />
<def>            z</def> <sym>=</sym> <def></def><kwd>compose</kwd><def></def><sym>(</sym><def>z</def><sym>,</sym> <def>x</def><sym>.</sym><def></def><kwd>next</kwd><def></def><sym>())</sym><br />
<def>            y</def> <sym>=</sym> <def></def><kwd>extract</kwd><def></def><sym>(</sym><def>z</def><sym>,</sym> <def>mpz3</def><sym>)</sym><br />
<def>        z</def> <sym>=</sym> <def></def><kwd>compose</kwd><def></def><sym>((</sym><def>mpz10</def><sym>, -</sym><def>mpz10</def> <sym>*</sym> <def>y</def><sym>,</sym> <def>mpz0</def><sym>,</sym> <def>mpz1</def><sym>),</sym> <def>z</def><sym>)</sym><br />
<def></def>        <kwa>yield</kwa> <def></def><kwb>str</kwb><def></def><sym>(</sym><def>y</def><sym>)</sym><br />
<def></def><br />
<br />
<kwa>def</kwa> <def></def><kwd>main</kwd><def></def><sym>(</sym><def>islice</def><sym>=</sym><def>itertools</def><sym>.</sym><def>islice</def><sym>):</sym><br />
<def><br />
    n</def> <sym>=</sym> <def></def><kwb>int</kwb><def></def><sym>(</sym><def>sys</def><sym>.</sym><def>argv</def><sym>[</sym><def></def><num>1</num><def></def><sym>])</sym><br />
<def>    digits</def> <sym>=</sym> <def></def><kwd>pi_digits</kwd><def></def><sym>()</sym><br />
<def>    w</def> <sym>=</sym> <def></def><num>10</num><br />
<def>    out</def> <sym>= []</sym><br />
<def></def>    <kwa>for</kwa> <def>i</def> <kwa>in</kwa> <def></def><kwb>xrange</kwb><def></def><sym>(</sym><def>w</def><sym>,</sym> <def>n</def><sym>+</sym><def></def><num>1</num><def></def><sym>,</sym> <def>w</def><sym>):</sym><br />
<def>        out</def><sym>.</sym><def></def><kwd>extend</kwd><def></def><sym>([</sym><def></def><str>''</str><def></def><sym>.</sym><def></def><kwd>join</kwd><def></def><sym>(</sym><def></def><kwd>islice</kwd><def></def><sym>(</sym><def>digits</def><sym>,</sym> <def>w</def><sym>)),</sym> <def>i</def><sym>])</sym><br />
<def></def>    <kwa>print</kwa> <def></def><sym>(</sym><def></def><str>'%s</str><esc>\t</esc><str>:%d</str><esc>\n</esc><str>'</str><def></def> <sym>* (</sym><def></def><kwb>len</kwb><def></def><sym>(</sym><def>out</def><sym>) /</sym> <def></def><num>2</num><def></def><sym>)) %</sym> <def></def><kwb>tuple</kwb><def></def><sym>(</sym><def>out</def><sym>),</sym><br />
<def></def>    <kwa>if</kwa> <def>n</def> <sym>%</sym> <def>w</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>:</sym><br />
<def></def>        <kwa>print</kwa> <def></def><str>&quot;%s</str><esc>\t</esc><str>:%d&quot;</str><def></def> <sym>% (</sym><def></def><str>''</str><def></def><sym>.</sym><def></def><kwd>join</kwd><def></def><sym>(</sym><def></def><kwd>islice</kwd><def></def><sym>(</sym><def>digits</def><sym>,</sym> <def>n</def> <sym>%</sym> <def>w</def><sym>)).</sym><def></def><kwd>ljust</kwd><def></def><sym>(</sym><def>w</def><sym>),</sym> <def>n</def><sym>)</sym><br />
<def></def><br />
<br />
<kwd>main</kwd><def></def><sym>()</sym><def></def><br />
</source>
