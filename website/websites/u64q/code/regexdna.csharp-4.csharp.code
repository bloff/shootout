<source>
<def>ï»¿</def><com>/*</com><br />
<com>  The Computer Language Benchmarks Game</com><br />
<com>  http://shootout.alioth.debian.org/</com><br />
<com>  Modifications to Josh Goldfoot version by Byron Foster by Miguel de Icaza</com><br />
<com>  fixes by Uffe Seerup</com><br />
<com>*/</com><def></def><br />
<kwa>using</kwa> <def>System</def><sym>;</sym><br />
<def></def><kwa>using</kwa> <def>System</def><sym>.</sym><def>Text</def><sym>;</sym><br />
<def></def><kwa>using</kwa> <def>System</def><sym>.</sym><def>Text</def><sym>.</sym><def>RegularExpressions</def><sym>;</sym><br />
<def></def><br />
<kwa>public class</kwa> <def>regexdna</def><br />
<sym>{</sym><br />
<def></def><br />
    <kwa>public static</kwa> <def></def><kwb>void</kwb> <def></def><kwd>Main</kwd><def></def><sym>(</sym><def>String</def><sym>[]</sym> <def>args</def><sym>)</sym><br />
<def></def>    <sym>{</sym><br />
<def>        StringBuilder sb</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>StringBuilder</kwd><def></def><sym>();</sym><br />
<def></def>        <kwb>int</kwb> <def>initialLength</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>        <kwa>for</kwa> <def></def><sym>(</sym><def>String line</def><sym>; (</sym><def>line</def> <sym>=</sym> <def>Console</def><sym>.</sym><def></def><kwd>ReadLine</kwd><def></def><sym>()) !=</sym> <def></def><kwa>null</kwa><def></def><sym>;  )</sym><br />
<def></def>        <sym>{</sym><br />
<def>            initialLength</def> <sym>+=</sym> <def>line</def><sym>.</sym><def>Length</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>line</def><sym>.</sym><def></def><kwd>StartsWith</kwd><def></def><sym>(</sym><def></def><str>&quot;&gt;&quot;</str><def></def><sym>))</sym> <def></def><kwa>continue</kwa><def></def><sym>;</sym><br />
<def>            sb</def><sym>.</sym><def></def><kwd>Append</kwd><def></def><sym>(</sym><def>line</def><sym>);</sym><br />
<def></def>        <sym>}</sym><br />
<def><br />
        String sequence</def> <sym>=</sym> <def>sb</def><sym>.</sym><def></def><kwd>ToString</kwd><def></def><sym>();</sym><br />
<def></def>        <kwb>int</kwb> <def>codeLength</def> <sym>=</sym> <def>sequence</def><sym>.</sym><def>Length</def><sym>;</sym><br />
<def><br />
        String</def><sym>[]</sym> <def>variants</def> <sym>=</sym><br />
<def></def>      <sym>{</sym><br />
<def></def>        <str>&quot;agggtaaa|tttaccct&quot;</str><def></def> <sym>,</sym><def></def><str>&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</str><def></def><sym>,</sym><br />
<def></def>        <str>&quot;a[act]ggtaaa|tttacc[agt]t&quot;</str><def></def> <sym>,</sym><def></def><str>&quot;ag[act]gtaaa|tttac[agt]ct&quot;</str><def></def><sym>,</sym><br />
<def></def>        <str>&quot;agg[act]taaa|ttta[agt]cct&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</str><def></def><sym>,</sym><br />
<def></def>        <str>&quot;agggt[cgt]aa|tt[acg]accct&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;agggta[cgt]a|t[acg]taccct&quot;</str><def></def><sym>,</sym><br />
<def></def>        <str>&quot;agggtaa[cgt]|[acg]ttaccct&quot;</str><def></def><br />
      <sym>};</sym><br />
<def></def><br />
<br />
        <kwb>int</kwb> <def>count</def><sym>;</sym><br />
<def></def>        <kwa>foreach</kwa> <def></def><sym>(</sym><def></def><kwb>string</kwb> <def>v in variants</def><sym>)</sym><br />
<def></def>        <sym>{</sym><br />
<def>            count</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>            Regex r</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>Regex</kwd><def></def><sym>(</sym><def>v</def><sym>,</sym> <def>RegexOptions</def><sym>.</sym><def>Compiled</def><sym>);</sym><br />
<def></def><br />
            <kwa>for</kwa> <def></def><sym>(</sym><def>Match m</def> <sym>=</sym> <def>r</def><sym>.</sym><def></def><kwd>Match</kwd><def></def><sym>(</sym><def>sequence</def><sym>);</sym> <def>m</def><sym>.</sym><def>Success</def><sym>;</sym> <def>m</def> <sym>=</sym> <def>m</def><sym>.</sym><def></def><kwd>NextMatch</kwd><def></def><sym>())</sym> <def>count</def><sym>++;</sym><br />
<def>            Console</def><sym>.</sym><def></def><kwd>WriteLine</kwd><def></def><sym>(</sym><def></def><str>&quot;{0} {1}&quot;</str><def></def><sym>,</sym> <def>v</def><sym>,</sym> <def>count</def><sym>);</sym><br />
<def></def>        <sym>}</sym><br />
<def><br />
        sb</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>StringBuilder</kwd><def></def><sym>(</sym><def></def><num>4096</num><def></def><sym>);</sym><br />
<def></def>        <kwa>foreach</kwa> <def></def><sym>(</sym><def></def><kwb>char</kwb> <def>c in sequence</def><sym>)</sym><br />
<def></def>        <sym>{</sym><br />
<def></def>            <kwa>switch</kwa> <def></def><sym>(</sym><def>c</def><sym>)</sym><br />
<def></def>            <sym>{</sym><br />
<def></def>                <kwa>case</kwa> <def></def><str>'B'</str><def></def><sym>:</sym> <def>sb</def><sym>.</sym><def></def><kwd>Append</kwd><def></def><sym>(</sym><def></def><str>&quot;(c|g|t)&quot;</str><def></def><sym>);</sym> <def></def><kwa>break</kwa><def></def><sym>;</sym><br />
<def></def>                <kwa>case</kwa> <def></def><str>'D'</str><def></def><sym>:</sym> <def>sb</def><sym>.</sym><def></def><kwd>Append</kwd><def></def><sym>(</sym><def></def><str>&quot;(a|g|t)&quot;</str><def></def><sym>);</sym> <def></def><kwa>break</kwa><def></def><sym>;</sym><br />
<def></def>                <kwa>case</kwa> <def></def><str>'H'</str><def></def><sym>:</sym> <def>sb</def><sym>.</sym><def></def><kwd>Append</kwd><def></def><sym>(</sym><def></def><str>&quot;(a|c|t)&quot;</str><def></def><sym>);</sym> <def></def><kwa>break</kwa><def></def><sym>;</sym><br />
<def></def>                <kwa>case</kwa> <def></def><str>'K'</str><def></def><sym>:</sym> <def>sb</def><sym>.</sym><def></def><kwd>Append</kwd><def></def><sym>(</sym><def></def><str>&quot;(g|t)&quot;</str><def></def><sym>);</sym> <def></def><kwa>break</kwa><def></def><sym>;</sym><br />
<def></def>                <kwa>case</kwa> <def></def><str>'M'</str><def></def><sym>:</sym> <def>sb</def><sym>.</sym><def></def><kwd>Append</kwd><def></def><sym>(</sym><def></def><str>&quot;(a|c)&quot;</str><def></def><sym>);</sym> <def></def><kwa>break</kwa><def></def><sym>;</sym><br />
<def></def>                <kwa>case</kwa> <def></def><str>'N'</str><def></def><sym>:</sym> <def>sb</def><sym>.</sym><def></def><kwd>Append</kwd><def></def><sym>(</sym><def></def><str>&quot;(a|c|g|t)&quot;</str><def></def><sym>);</sym> <def></def><kwa>break</kwa><def></def><sym>;</sym><br />
<def></def>                <kwa>case</kwa> <def></def><str>'R'</str><def></def><sym>:</sym> <def>sb</def><sym>.</sym><def></def><kwd>Append</kwd><def></def><sym>(</sym><def></def><str>&quot;(a|g)&quot;</str><def></def><sym>);</sym> <def></def><kwa>break</kwa><def></def><sym>;</sym><br />
<def></def>                <kwa>case</kwa> <def></def><str>'S'</str><def></def><sym>:</sym> <def>sb</def><sym>.</sym><def></def><kwd>Append</kwd><def></def><sym>(</sym><def></def><str>&quot;(c|g)&quot;</str><def></def><sym>);</sym> <def></def><kwa>break</kwa><def></def><sym>;</sym><br />
<def></def>                <kwa>case</kwa> <def></def><str>'V'</str><def></def><sym>:</sym> <def>sb</def><sym>.</sym><def></def><kwd>Append</kwd><def></def><sym>(</sym><def></def><str>&quot;(a|c|g)&quot;</str><def></def><sym>);</sym> <def></def><kwa>break</kwa><def></def><sym>;</sym><br />
<def></def>                <kwa>case</kwa> <def></def><str>'W'</str><def></def><sym>:</sym> <def>sb</def><sym>.</sym><def></def><kwd>Append</kwd><def></def><sym>(</sym><def></def><str>&quot;(a|t)&quot;</str><def></def><sym>);</sym> <def></def><kwa>break</kwa><def></def><sym>;</sym><br />
<def></def>                <kwa>case</kwa> <def></def><str>'Y'</str><def></def><sym>:</sym> <def>sb</def><sym>.</sym><def></def><kwd>Append</kwd><def></def><sym>(</sym><def></def><str>&quot;(c|t)&quot;</str><def></def><sym>);</sym> <def></def><kwa>break</kwa><def></def><sym>;</sym><br />
<def></def>                <kwa>default</kwa><def></def><sym>:</sym> <def>sb</def><sym>.</sym><def></def><kwd>Append</kwd><def></def><sym>(</sym><def>c</def><sym>);</sym> <def></def><kwa>break</kwa><def></def><sym>;</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>        <sym>}</sym><br />
<def><br />
        Console</def><sym>.</sym><def></def><kwd>WriteLine</kwd><def></def><sym>(</sym><def></def><str>&quot;</str><esc>\n</esc><str>{0}</str><esc>\n</esc><str>{1}</str><esc>\n</esc><str>{2}&quot;</str><def></def><sym>,</sym><br />
<def>           initialLength</def><sym>,</sym> <def>codeLength</def><sym>,</sym> <def>sb</def><sym>.</sym><def>Length</def><sym>);</sym><br />
<def></def><br />
    <sym>}</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
