<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Isaac Gouy</span>
<span class="hl com">   parallel by The Anh Tran</span>
<span class="hl com">*/</span>

<span class="hl kwa">using</span> System<span class="hl sym">;</span>
<span class="hl kwa">using</span> System<span class="hl sym">.</span>Threading<span class="hl sym">;</span>

<span class="hl kwa">class</span> SpectralNorm
<span class="hl sym">{</span>
   <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">Main</span><span class="hl sym">(</span>String<span class="hl sym">[]</span> args<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwb">int</span> n <span class="hl sym">=</span> <span class="hl num">100</span><span class="hl sym">;</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>args<span class="hl sym">.</span>Length <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
         n <span class="hl sym">=</span> Int32<span class="hl sym">.</span><span class="hl kwd">Parse</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>

      Console<span class="hl sym">.</span><span class="hl kwd">WriteLine</span><span class="hl sym">(</span><span class="hl str">&quot;{0:f9}&quot;</span><span class="hl sym">,</span> <span class="hl kwd">RunGame</span><span class="hl sym">(</span>n<span class="hl sym">));</span>
   <span class="hl sym">}</span>

    <span class="hl kwa">private static</span> <span class="hl kwb">int</span> <span class="hl kwd">GetThreadCount</span><span class="hl sym">()</span>
    <span class="hl sym">{</span>
        <span class="hl kwb">int</span> affinity <span class="hl sym">=</span> System<span class="hl sym">.</span>Diagnostics<span class="hl sym">.</span>Process<span class="hl sym">.</span><span class="hl kwd">GetCurrentProcess</span><span class="hl sym">().</span>ProcessorAffinity<span class="hl sym">.</span><span class="hl kwd">ToInt32</span><span class="hl sym">();</span>

        <span class="hl kwb">int</span> count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">8</span><span class="hl sym">;</span> i<span class="hl sym">++)</span>
        <span class="hl sym">{</span>
            <span class="hl kwa">if</span> <span class="hl sym">((</span>affinity <span class="hl sym">&amp; (</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> i<span class="hl sym">)) !=</span> <span class="hl num">0</span><span class="hl sym">)</span>
                count<span class="hl sym">++;</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">return</span> count<span class="hl sym">;</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">private static</span> <span class="hl kwb">double</span> <span class="hl kwd">RunGame</span><span class="hl sym">(</span><span class="hl kwb">int</span> n<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl slc">// create unit vector</span>
      <span class="hl kwb">double</span><span class="hl sym">[]</span> u <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">double</span><span class="hl sym">[</span>n<span class="hl sym">];</span>
      <span class="hl kwb">double</span><span class="hl sym">[]</span> tmp <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">double</span><span class="hl sym">[</span>n<span class="hl sym">];</span>
      <span class="hl kwb">double</span><span class="hl sym">[]</span> v <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">double</span><span class="hl sym">[</span>n<span class="hl sym">];</span>

      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> n<span class="hl sym">;</span> i<span class="hl sym">++)</span>
         u<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl num">1.0</span><span class="hl sym">;</span>

        <span class="hl kwb">int</span> nthread <span class="hl sym">=</span> <span class="hl kwd">GetThreadCount</span><span class="hl sym">();</span>
        <span class="hl slc">// set correct value to barrier</span>
        Approximate<span class="hl sym">.</span>barrier <span class="hl sym">=</span> Approximate<span class="hl sym">.</span>nthread <span class="hl sym">=</span> nthread<span class="hl sym">;</span>

        <span class="hl slc">// objects contain result of each thread</span>
        Approximate<span class="hl sym">[]</span> apx <span class="hl sym">=</span> <span class="hl kwa">new</span> Approximate<span class="hl sym">[</span>nthread<span class="hl sym">];</span>

        <span class="hl slc">// thread handle for waiting/joining</span>
        Thread<span class="hl sym">[]</span> threads <span class="hl sym">=</span> <span class="hl kwa">new</span> Thread<span class="hl sym">[</span>nthread<span class="hl sym">];</span>

        <span class="hl slc">// create thread and hand out tasks</span>
        <span class="hl kwb">int</span> chunk <span class="hl sym">=</span> n <span class="hl sym">/</span> nthread<span class="hl sym">;</span>
        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> nthread<span class="hl sym">;</span> i<span class="hl sym">++ )</span>
        <span class="hl sym">{</span>
            <span class="hl kwb">int</span> r1 <span class="hl sym">=</span> i <span class="hl sym">*</span> chunk<span class="hl sym">;</span>
            <span class="hl kwb">int</span> r2 <span class="hl sym">= (</span>i <span class="hl sym">&lt; (</span>nthread <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">))</span> ? r1 <span class="hl sym">+</span> chunk <span class="hl sym">:</span> n<span class="hl sym">;</span>

            apx<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">Approximate</span><span class="hl sym">(</span>u<span class="hl sym">,</span> v<span class="hl sym">,</span> tmp<span class="hl sym">,</span> r1<span class="hl sym">,</span> r2<span class="hl sym">);</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>nthread <span class="hl sym">&gt;</span> <span class="hl num">1</span><span class="hl sym">)</span>
            <span class="hl sym">{</span>
                threads<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">Thread</span><span class="hl sym">(</span><span class="hl kwa">new</span> <span class="hl kwd">ThreadStart</span><span class="hl sym">(</span>apx<span class="hl sym">[</span>i<span class="hl sym">].</span>Evaluate<span class="hl sym">));</span>
                threads<span class="hl sym">[</span>i<span class="hl sym">].</span><span class="hl kwd">Start</span><span class="hl sym">();</span>
            <span class="hl sym">}</span>
            <span class="hl kwa">else</span>
                apx<span class="hl sym">[</span>i<span class="hl sym">].</span><span class="hl kwd">EvaluateSingleThread</span><span class="hl sym">();</span>
        <span class="hl sym">}</span>

      <span class="hl slc">// collect results</span>
        <span class="hl kwb">double</span> vBv <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> vv <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> nthread<span class="hl sym">;</span> i<span class="hl sym">++)</span>
        <span class="hl sym">{</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>threads<span class="hl sym">[</span>i<span class="hl sym">] !=</span> <span class="hl kwa">null</span><span class="hl sym">)</span>
                threads<span class="hl sym">[</span>i<span class="hl sym">].</span><span class="hl kwd">Join</span><span class="hl sym">();</span>

            vBv <span class="hl sym">+=</span> apx<span class="hl sym">[</span>i<span class="hl sym">].</span>m_vBv<span class="hl sym">;</span>
            vv <span class="hl sym">+=</span> apx<span class="hl sym">[</span>i<span class="hl sym">].</span>m_vv<span class="hl sym">;</span>
        <span class="hl sym">}</span>

      <span class="hl kwa">return</span> Math<span class="hl sym">.</span><span class="hl kwd">Sqrt</span><span class="hl sym">(</span>vBv <span class="hl sym">/</span> vv<span class="hl sym">);</span>
   <span class="hl sym">}</span>

    <span class="hl kwa">private class</span> Approximate
    <span class="hl sym">{</span>
        <span class="hl kwa">private</span> <span class="hl kwb">double</span><span class="hl sym">[]</span> m_u<span class="hl sym">;</span>
        <span class="hl kwa">private</span> <span class="hl kwb">double</span><span class="hl sym">[]</span> m_v<span class="hl sym">;</span>
        <span class="hl kwa">private</span> <span class="hl kwb">double</span><span class="hl sym">[]</span> m_tmp<span class="hl sym">;</span>
        <span class="hl kwa">private</span> <span class="hl kwb">int</span> m_range_begin<span class="hl sym">,</span> m_range_end<span class="hl sym">;</span>

        <span class="hl kwa">public</span> <span class="hl kwb">double</span> m_vBv <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> m_vv <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

        <span class="hl slc">// re-invent the wheel: barrier</span>
        <span class="hl kwa">public static</span> <span class="hl kwb">int</span> barrier<span class="hl sym">;</span>
        <span class="hl kwa">public static</span> <span class="hl kwb">int</span> nthread<span class="hl sym">;</span>


        <span class="hl kwa">public</span> <span class="hl kwd">Approximate</span><span class="hl sym">(</span><span class="hl kwb">double</span><span class="hl sym">[]</span> u<span class="hl sym">,</span> <span class="hl kwb">double</span><span class="hl sym">[]</span> v<span class="hl sym">,</span> <span class="hl kwb">double</span><span class="hl sym">[]</span> tmp<span class="hl sym">,</span> <span class="hl kwb">int</span> rbegin<span class="hl sym">,</span> <span class="hl kwb">int</span> rend<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            m_u <span class="hl sym">=</span> u<span class="hl sym">;</span>
            m_v <span class="hl sym">=</span> v<span class="hl sym">;</span>
            m_tmp <span class="hl sym">=</span> tmp<span class="hl sym">;</span>

            m_range_begin <span class="hl sym">=</span> rbegin<span class="hl sym">;</span>
            m_range_end <span class="hl sym">=</span> rend<span class="hl sym">;</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">Evaluate</span><span class="hl sym">()</span>
        <span class="hl sym">{</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">10</span><span class="hl sym">;</span> i<span class="hl sym">++)</span>
            <span class="hl sym">{</span>
                <span class="hl kwd">MultiplyAtAv</span><span class="hl sym">(</span>m_u<span class="hl sym">,</span> m_tmp<span class="hl sym">,</span> m_v<span class="hl sym">);</span>
                <span class="hl kwd">MultiplyAtAv</span><span class="hl sym">(</span>m_v<span class="hl sym">,</span> m_tmp<span class="hl sym">,</span> m_u<span class="hl sym">);</span>
            <span class="hl sym">}</span>

            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> m_range_begin<span class="hl sym">;</span> i <span class="hl sym">&lt;</span> m_range_end<span class="hl sym">;</span> i<span class="hl sym">++)</span>
            <span class="hl sym">{</span>
                m_vBv <span class="hl sym">+=</span> m_u<span class="hl sym">[</span>i<span class="hl sym">] *</span> m_v<span class="hl sym">[</span>i<span class="hl sym">];</span>
                m_vv <span class="hl sym">+=</span> m_v<span class="hl sym">[</span>i<span class="hl sym">] *</span> m_v<span class="hl sym">[</span>i<span class="hl sym">];</span>
            <span class="hl sym">}</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">EvaluateSingleThread</span><span class="hl sym">()</span>
        <span class="hl sym">{</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">10</span><span class="hl sym">;</span> i<span class="hl sym">++)</span>
            <span class="hl sym">{</span>
                <span class="hl kwd">MultiplyAtAv_ST</span><span class="hl sym">(</span>m_u<span class="hl sym">,</span> m_tmp<span class="hl sym">,</span> m_v<span class="hl sym">);</span>
                <span class="hl kwd">MultiplyAtAv_ST</span><span class="hl sym">(</span>m_v<span class="hl sym">,</span> m_tmp<span class="hl sym">,</span> m_u<span class="hl sym">);</span>
            <span class="hl sym">}</span>

            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> m_range_begin<span class="hl sym">;</span> i <span class="hl sym">&lt;</span> m_range_end<span class="hl sym">;</span> i<span class="hl sym">++)</span>
            <span class="hl sym">{</span>
                m_vBv <span class="hl sym">+=</span> m_u<span class="hl sym">[</span>i<span class="hl sym">] *</span> m_v<span class="hl sym">[</span>i<span class="hl sym">];</span>
                m_vv <span class="hl sym">+=</span> m_v<span class="hl sym">[</span>i<span class="hl sym">] *</span> m_v<span class="hl sym">[</span>i<span class="hl sym">];</span>
            <span class="hl sym">}</span>
        <span class="hl sym">}</span>

        <span class="hl com">/* return element i,j of infinite matrix A */</span>
        <span class="hl kwa">private static</span> <span class="hl kwb">double</span> <span class="hl kwd">eval_A</span><span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">,</span> <span class="hl kwb">int</span> j<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            <span class="hl kwb">int</span> div <span class="hl sym">= (((</span>i <span class="hl sym">+</span> j<span class="hl sym">) * (</span>i <span class="hl sym">+</span> j <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">) &gt;&gt;</span> <span class="hl num">1</span><span class="hl sym">) +</span> i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">);</span>
            <span class="hl kwa">return</span> <span class="hl num">1.0</span> <span class="hl sym">/</span> div<span class="hl sym">;</span>
        <span class="hl sym">}</span>

        <span class="hl com">/* multiply vector v by matrix A */</span>
        <span class="hl kwa">private</span> <span class="hl kwb">void</span> <span class="hl kwd">MultiplyAv</span><span class="hl sym">(</span><span class="hl kwb">double</span><span class="hl sym">[]</span> v<span class="hl sym">,</span> <span class="hl kwb">double</span><span class="hl sym">[]</span> Av<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> m_range_begin<span class="hl sym">;</span> i <span class="hl sym">&lt;</span> m_range_end<span class="hl sym">;</span> i<span class="hl sym">++)</span>
            <span class="hl sym">{</span>
                <span class="hl kwb">double</span> sum <span class="hl sym">=</span> <span class="hl num">0.0</span><span class="hl sym">;</span>
                <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> j <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> j <span class="hl sym">&lt;</span> v<span class="hl sym">.</span>Length<span class="hl sym">;</span> j<span class="hl sym">++)</span>
                    sum <span class="hl sym">+=</span> <span class="hl kwd">eval_A</span><span class="hl sym">(</span>i<span class="hl sym">,</span> j<span class="hl sym">) *</span> v<span class="hl sym">[</span>j<span class="hl sym">];</span>
                Av<span class="hl sym">[</span>i<span class="hl sym">] =</span> sum<span class="hl sym">;</span>
            <span class="hl sym">}</span>
        <span class="hl sym">}</span>

        <span class="hl com">/* multiply vector v by matrix A transposed */</span>
        <span class="hl kwa">private</span> <span class="hl kwb">void</span> <span class="hl kwd">MultiplyAtv</span><span class="hl sym">(</span><span class="hl kwb">double</span><span class="hl sym">[]</span> v<span class="hl sym">,</span> <span class="hl kwb">double</span><span class="hl sym">[]</span> Atv<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> m_range_begin<span class="hl sym">;</span> i <span class="hl sym">&lt;</span> m_range_end<span class="hl sym">;</span> i<span class="hl sym">++)</span>
            <span class="hl sym">{</span>
                <span class="hl kwb">double</span> sum <span class="hl sym">=</span> <span class="hl num">0.0</span><span class="hl sym">;</span>
                <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> j <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> j <span class="hl sym">&lt;</span> v<span class="hl sym">.</span>Length<span class="hl sym">;</span> j<span class="hl sym">++)</span>
                    sum <span class="hl sym">+=</span> <span class="hl kwd">eval_A</span><span class="hl sym">(</span>j<span class="hl sym">,</span> i<span class="hl sym">) *</span> v<span class="hl sym">[</span>j<span class="hl sym">];</span>
                Atv<span class="hl sym">[</span>i<span class="hl sym">] =</span> sum<span class="hl sym">;</span>
            <span class="hl sym">}</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">private</span> <span class="hl kwb">void</span> <span class="hl kwd">MultiplyAtAv_ST</span><span class="hl sym">(</span><span class="hl kwb">double</span><span class="hl sym">[]</span> v<span class="hl sym">,</span> <span class="hl kwb">double</span><span class="hl sym">[]</span> tmp<span class="hl sym">,</span> <span class="hl kwb">double</span><span class="hl sym">[]</span> AtAv<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            <span class="hl kwd">MultiplyAv</span><span class="hl sym">(</span>v<span class="hl sym">,</span> tmp<span class="hl sym">);</span>
            <span class="hl kwd">MultiplyAtv</span><span class="hl sym">(</span>tmp<span class="hl sym">,</span> AtAv<span class="hl sym">);</span>
        <span class="hl sym">}</span>

        <span class="hl com">/* multiply vector v by matrix A and then by matrix A transposed */</span>
        <span class="hl kwa">private</span> <span class="hl kwb">void</span> <span class="hl kwd">MultiplyAtAv</span><span class="hl sym">(</span><span class="hl kwb">double</span><span class="hl sym">[]</span> v<span class="hl sym">,</span> <span class="hl kwb">double</span><span class="hl sym">[]</span> tmp<span class="hl sym">,</span> <span class="hl kwb">double</span><span class="hl sym">[]</span> AtAv<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            <span class="hl kwd">MultiplyAv</span><span class="hl sym">(</span>v<span class="hl sym">,</span> tmp<span class="hl sym">);</span>
            <span class="hl kwd">BarrierSyn</span><span class="hl sym">();</span>
            <span class="hl kwd">MultiplyAtv</span><span class="hl sym">(</span>tmp<span class="hl sym">,</span> AtAv<span class="hl sym">);</span>
            <span class="hl kwd">BarrierSyn</span><span class="hl sym">();</span>
        <span class="hl sym">}</span>

      <span class="hl slc">// this is BarrierSpin. With large array size, timing difference between</span>
      <span class="hl slc">// threads is small -&gt; avoid context switch cost</span>
        <span class="hl kwa">private</span> <span class="hl kwb">void</span> <span class="hl kwd">BarrierSyn</span><span class="hl sym">()</span>
        <span class="hl sym">{</span>
            Interlocked<span class="hl sym">.</span><span class="hl kwd">Decrement</span><span class="hl sym">(</span>ref barrier<span class="hl sym">);</span>

            <span class="hl kwb">int</span> spin <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span>
            <span class="hl kwa">while</span> <span class="hl sym">((</span><span class="hl num">0</span> <span class="hl sym">&lt;</span> barrier<span class="hl sym">) &amp;&amp; (</span>barrier <span class="hl sym">&lt;</span> nthread<span class="hl sym">))</span> <span class="hl slc">// terminate condition</span>
            <span class="hl sym">{</span>
                Thread<span class="hl sym">.</span><span class="hl kwd">SpinWait</span><span class="hl sym">(</span>spin<span class="hl sym">);</span>
                spin <span class="hl sym">+=</span> spin<span class="hl sym">;</span>
            <span class="hl sym">}</span>

         <span class="hl slc">// reset barrier value</span>
            barrier <span class="hl sym">=</span> nthread<span class="hl sym">;</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>
