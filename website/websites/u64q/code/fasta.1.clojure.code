<span class="hl slc">;;   The Computer Language Benchmarks Game</span>
<span class="hl slc">;;   http://shootout.alioth.debian.org/</span>

<span class="hl slc">;; contributed by Andy Fingerhut</span>

<span class="hl sym">(</span>ns fasta
  <span class="hl sym">(:</span>gen<span class="hl sym">-</span>class<span class="hl sym">))</span>

<span class="hl sym">(</span>set<span class="hl sym">! *</span>warn<span class="hl sym">-</span>on<span class="hl sym">-</span>reflection<span class="hl sym">*</span> true<span class="hl sym">)</span>


<span class="hl sym">(</span>defn make<span class="hl sym">-</span>repeat<span class="hl sym">-</span>fasta <span class="hl sym">[</span>#^java.io.BufferedWriter wrtr
                         line<span class="hl sym">-</span>length id desc s n<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>descstr <span class="hl sym">(</span>str <span class="hl str">&quot;&gt;&quot;</span> id <span class="hl str">&quot; &quot;</span> desc <span class="hl str">&quot;</span><span class="hl esc">\</span><span class="hl str">n&quot;</span><span class="hl sym">)]</span>
    <span class="hl sym">(</span>.write wrtr descstr<span class="hl sym">))</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>s<span class="hl sym">-</span>len <span class="hl sym">(</span>int <span class="hl sym">(</span>count s<span class="hl sym">))</span>
        line<span class="hl sym">-</span>length <span class="hl sym">(</span>int line<span class="hl sym">-</span>length<span class="hl sym">)</span>
        min<span class="hl sym">-</span>buf<span class="hl sym">-</span>len <span class="hl sym">(</span>int <span class="hl sym">(+</span> s<span class="hl sym">-</span>len line<span class="hl sym">-</span>length<span class="hl sym">))</span>
        repeat<span class="hl sym">-</span>count <span class="hl sym">(</span>int <span class="hl sym">(</span>inc <span class="hl sym">(</span>quot min<span class="hl sym">-</span>buf<span class="hl sym">-</span>len s<span class="hl sym">-</span>len<span class="hl sym">)))</span>
        buf <span class="hl sym">(</span>apply str <span class="hl sym">(</span>repeat repeat<span class="hl sym">-</span>count s<span class="hl sym">))</span>
        <span class="hl slc">;; Precompute all strings that we might want to print, one at</span>
        <span class="hl slc">;; each possible offset in the string s to be repeated.</span>
        line<span class="hl sym">-</span>strings <span class="hl sym">(</span>vec <span class="hl sym">(</span>map <span class="hl sym">(</span>fn <span class="hl sym">[</span>i<span class="hl sym">]</span>
                                 <span class="hl sym">(</span>str <span class="hl sym">(</span>subs buf i <span class="hl sym">(+</span> i line<span class="hl sym">-</span>length<span class="hl sym">))</span> <span class="hl str">&quot;</span><span class="hl esc">\</span><span class="hl str">n&quot;</span><span class="hl sym">))</span>
                               <span class="hl sym">(</span>range <span class="hl num">0</span> s<span class="hl sym">-</span>len<span class="hl sym">)))</span>
        num<span class="hl sym">-</span>full<span class="hl sym">-</span>lines <span class="hl sym">(</span>int <span class="hl sym">(</span>quot n line<span class="hl sym">-</span>length<span class="hl sym">))]</span>
    <span class="hl sym">(</span>loop <span class="hl sym">[</span>j <span class="hl sym">(</span>int <span class="hl num">0</span><span class="hl sym">)</span>
           s<span class="hl sym">-</span>offset <span class="hl sym">(</span>int <span class="hl num">0</span><span class="hl sym">)]</span>
      <span class="hl sym">(</span>if <span class="hl sym">(==</span> j num<span class="hl sym">-</span>full<span class="hl sym">-</span>lines<span class="hl sym">)</span>
        <span class="hl slc">;; Write out the left over part of length n, if any.</span>
        <span class="hl sym">(</span>when <span class="hl sym">(</span>not<span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl sym">(</span>rem n line<span class="hl sym">-</span>length<span class="hl sym">))</span>
          <span class="hl sym">(</span>.write wrtr <span class="hl sym">(</span>str <span class="hl sym">(</span>subs buf s<span class="hl sym">-</span>offset <span class="hl sym">(+</span> s<span class="hl sym">-</span>offset <span class="hl sym">(</span>rem n line<span class="hl sym">-</span>length<span class="hl sym">)))</span>
                            <span class="hl str">&quot;</span><span class="hl esc">\</span><span class="hl str">n&quot;</span><span class="hl sym">)))</span>
        <span class="hl sym">(</span>do
          <span class="hl sym">(</span>.write wrtr #^String <span class="hl sym">(</span>line<span class="hl sym">-</span>strings s<span class="hl sym">-</span>offset<span class="hl sym">))</span>
          <span class="hl sym">(</span>recur <span class="hl sym">(</span>inc j<span class="hl sym">) (</span>int <span class="hl sym">(</span>rem <span class="hl sym">(+</span> s<span class="hl sym">-</span>offset line<span class="hl sym">-</span>length<span class="hl sym">)</span> s<span class="hl sym">-</span>len<span class="hl sym">))))))))</span>


<span class="hl sym">(</span>definterface IPRNG
  <span class="hl sym">(</span>gen_random_BANG_ <span class="hl sym">[</span>^double max<span class="hl sym">-</span>val<span class="hl sym">]))</span>


<span class="hl sym">(</span>deftype PRNG <span class="hl sym">[</span>^<span class="hl sym">{:</span>unsynchronized<span class="hl sym">-</span>mutable true <span class="hl sym">:</span>tag int<span class="hl sym">}</span> rand<span class="hl sym">-</span>state<span class="hl sym">]</span>
  IPRNG
  <span class="hl sym">(</span>gen<span class="hl sym">-</span>random<span class="hl sym">! [</span>this max<span class="hl sym">-</span>val<span class="hl sym">]</span>
    <span class="hl sym">(</span>let <span class="hl sym">[</span>IM <span class="hl sym">(</span>int <span class="hl num">139968</span><span class="hl sym">)</span>
          IA <span class="hl sym">(</span>int <span class="hl num">3877</span><span class="hl sym">)</span>
          IC <span class="hl sym">(</span>int <span class="hl num">29573</span><span class="hl sym">)</span>
          max <span class="hl sym">(</span>double max<span class="hl sym">-</span>val<span class="hl sym">)</span>
          last<span class="hl sym">-</span>state <span class="hl sym">(</span>int rand<span class="hl sym">-</span>state<span class="hl sym">)</span>
          next<span class="hl sym">-</span>state <span class="hl sym">(</span>int <span class="hl sym">(</span>rem <span class="hl sym">(+ (*</span> last<span class="hl sym">-</span>state IA<span class="hl sym">)</span> IC<span class="hl sym">)</span> IM<span class="hl sym">))]</span>
      <span class="hl sym">(</span>set<span class="hl sym">!</span> rand<span class="hl sym">-</span>state next<span class="hl sym">-</span>state<span class="hl sym">)</span>
      <span class="hl sym">(/ (*</span> max next<span class="hl sym">-</span>state<span class="hl sym">)</span> IM<span class="hl sym">))))</span>


<span class="hl slc">;; Find desired gene from cdf using binary search.</span>

<span class="hl sym">(</span>defmacro lookup<span class="hl sym">-</span>gene <span class="hl sym">[</span>n gene<span class="hl sym">-</span>chars gene<span class="hl sym">-</span>cdf rand<span class="hl sym">-</span>frac<span class="hl sym">]</span>
  <span class="hl sym">`(</span>let <span class="hl sym">[</span>x# <span class="hl sym">(</span>double ~rand<span class="hl sym">-</span>frac<span class="hl sym">)]</span>
     <span class="hl sym">(</span>loop <span class="hl sym">[</span>lo# <span class="hl sym">(</span>int <span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
            hi# <span class="hl sym">(</span>int <span class="hl sym">(</span>dec ~n<span class="hl sym">))]</span>
       <span class="hl sym">(</span>if <span class="hl sym">(== (</span>inc lo#<span class="hl sym">)</span> hi#<span class="hl sym">)</span>
         <span class="hl sym">(</span>aget ~gene<span class="hl sym">-</span>chars hi#<span class="hl sym">)</span>
         <span class="hl sym">(</span>let <span class="hl sym">[</span>mid# <span class="hl sym">(</span>int <span class="hl sym">(</span>quot <span class="hl sym">(+</span> lo# hi#<span class="hl sym">)</span> <span class="hl num">2</span><span class="hl sym">))]</span>
           <span class="hl sym">(</span>if <span class="hl sym">(&lt;</span> x# <span class="hl sym">(</span>aget ~gene<span class="hl sym">-</span>cdf mid#<span class="hl sym">))</span>
             <span class="hl sym">(</span>recur lo# mid#<span class="hl sym">)</span>
             <span class="hl sym">(</span>recur mid# hi#<span class="hl sym">)))))))</span>


<span class="hl sym">(</span>let <span class="hl sym">[</span>my<span class="hl sym">-</span>prng <span class="hl sym">(</span>PRNG. <span class="hl sym">(</span>int <span class="hl num">42</span><span class="hl sym">))]</span>
  <span class="hl sym">(</span>defn fill<span class="hl sym">-</span>random<span class="hl sym">! [</span>#^chars gene<span class="hl sym">-</span>chars #^doubles gene<span class="hl sym">-</span>cdf n #^chars buf<span class="hl sym">]</span>
    <span class="hl sym">(</span>let <span class="hl sym">[</span>num<span class="hl sym">-</span>genes <span class="hl sym">(</span>int <span class="hl sym">(</span>alength gene<span class="hl sym">-</span>cdf<span class="hl sym">))]</span>
      <span class="hl sym">(</span>dotimes <span class="hl sym">[</span>i n<span class="hl sym">]</span>
        <span class="hl sym">(</span>aset buf i <span class="hl sym">(</span>char <span class="hl sym">(</span>lookup<span class="hl sym">-</span>gene num<span class="hl sym">-</span>genes gene<span class="hl sym">-</span>chars gene<span class="hl sym">-</span>cdf
                                       <span class="hl sym">(</span>.gen<span class="hl sym">-</span>random<span class="hl sym">!</span> my<span class="hl sym">-</span>prng <span class="hl num">1.0</span><span class="hl sym">))))))))</span>


<span class="hl sym">(</span>defn make<span class="hl sym">-</span>random<span class="hl sym">-</span>fasta <span class="hl sym">[</span>#^java.io.BufferedWriter wrtr
                         line<span class="hl sym">-</span>length id desc n gene<span class="hl sym">-</span>chars gene<span class="hl sym">-</span>cdf<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>descstr <span class="hl sym">(</span>str <span class="hl str">&quot;&gt;&quot;</span> id <span class="hl str">&quot; &quot;</span> desc <span class="hl str">&quot;</span><span class="hl esc">\</span><span class="hl str">n&quot;</span><span class="hl sym">)]</span>
    <span class="hl sym">(</span>.write wrtr descstr<span class="hl sym">))</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>line<span class="hl sym">-</span>length <span class="hl sym">(</span>int line<span class="hl sym">-</span>length<span class="hl sym">)</span>
        len<span class="hl sym">-</span>with<span class="hl sym">-</span>newline <span class="hl sym">(</span>int <span class="hl sym">(</span>inc line<span class="hl sym">-</span>length<span class="hl sym">))</span>
        num<span class="hl sym">-</span>full<span class="hl sym">-</span>lines <span class="hl sym">(</span>int <span class="hl sym">(</span>quot n line<span class="hl sym">-</span>length<span class="hl sym">))</span>
        line<span class="hl sym">-</span>buf <span class="hl sym">(</span>char<span class="hl sym">-</span>array len<span class="hl sym">-</span>with<span class="hl sym">-</span>newline<span class="hl sym">)]</span>
    <span class="hl sym">(</span>aset line<span class="hl sym">-</span>buf line<span class="hl sym">-</span>length \newline<span class="hl sym">)</span>
    <span class="hl sym">(</span>dotimes <span class="hl sym">[</span>i num<span class="hl sym">-</span>full<span class="hl sym">-</span>lines<span class="hl sym">]</span>
      <span class="hl sym">(</span>fill<span class="hl sym">-</span>random<span class="hl sym">!</span> gene<span class="hl sym">-</span>chars gene<span class="hl sym">-</span>cdf line<span class="hl sym">-</span>length line<span class="hl sym">-</span>buf<span class="hl sym">)</span>
      <span class="hl sym">(</span>.write wrtr line<span class="hl sym">-</span>buf <span class="hl sym">(</span>int <span class="hl num">0</span><span class="hl sym">)</span> len<span class="hl sym">-</span>with<span class="hl sym">-</span>newline<span class="hl sym">))</span>
    <span class="hl sym">(</span>let <span class="hl sym">[</span>remaining<span class="hl sym">-</span>len <span class="hl sym">(</span>int <span class="hl sym">(</span>rem n line<span class="hl sym">-</span>length<span class="hl sym">))]</span>
      <span class="hl sym">(</span>when <span class="hl sym">(</span>not<span class="hl sym">=</span> <span class="hl num">0</span> remaining<span class="hl sym">-</span>len<span class="hl sym">)</span>
        <span class="hl sym">(</span>fill<span class="hl sym">-</span>random<span class="hl sym">!</span> gene<span class="hl sym">-</span>chars gene<span class="hl sym">-</span>cdf remaining<span class="hl sym">-</span>len line<span class="hl sym">-</span>buf<span class="hl sym">)</span>
        <span class="hl sym">(</span>.write wrtr line<span class="hl sym">-</span>buf <span class="hl num">0</span> remaining<span class="hl sym">-</span>len<span class="hl sym">)</span>
        <span class="hl sym">(</span>.write wrtr <span class="hl str">&quot;</span><span class="hl esc">\</span><span class="hl str">n&quot;</span><span class="hl sym">)))))</span>


<span class="hl sym">(</span>def alu <span class="hl sym">(</span>str <span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>
              <span class="hl str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>
              <span class="hl str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>
              <span class="hl str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>
              <span class="hl str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>
              <span class="hl str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>
              <span class="hl str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="hl sym">))</span>

<span class="hl sym">(</span>def iub <span class="hl sym">[[</span>\a <span class="hl num">0.27</span><span class="hl sym">]</span>
          <span class="hl sym">[</span>\c <span class="hl num">0.12</span><span class="hl sym">]</span>
          <span class="hl sym">[</span>\g <span class="hl num">0.12</span><span class="hl sym">]</span>
          <span class="hl sym">[</span>\t <span class="hl num">0.27</span><span class="hl sym">]</span>
          <span class="hl sym">[</span>\B <span class="hl num">0.02</span><span class="hl sym">]</span>
          <span class="hl sym">[</span>\D <span class="hl num">0.02</span><span class="hl sym">]</span>
          <span class="hl sym">[</span>\H <span class="hl num">0.02</span><span class="hl sym">]</span>
          <span class="hl sym">[</span>\K <span class="hl num">0.02</span><span class="hl sym">]</span>
          <span class="hl sym">[</span>\M <span class="hl num">0.02</span><span class="hl sym">]</span>
          <span class="hl sym">[</span>\N <span class="hl num">0.02</span><span class="hl sym">]</span>
          <span class="hl sym">[</span>\R <span class="hl num">0.02</span><span class="hl sym">]</span>
          <span class="hl sym">[</span>\S <span class="hl num">0.02</span><span class="hl sym">]</span>
          <span class="hl sym">[</span>\V <span class="hl num">0.02</span><span class="hl sym">]</span>
          <span class="hl sym">[</span>\W <span class="hl num">0.02</span><span class="hl sym">]</span>
          <span class="hl sym">[</span>\Y <span class="hl num">0.02</span><span class="hl sym">]])</span>

<span class="hl sym">(</span>def homosapiens <span class="hl sym">[[</span>\a <span class="hl num">0.3029549426680</span><span class="hl sym">]</span>
                  <span class="hl sym">[</span>\c <span class="hl num">0.1979883004921</span><span class="hl sym">]</span>
                  <span class="hl sym">[</span>\g <span class="hl num">0.1975473066391</span><span class="hl sym">]</span>
                  <span class="hl sym">[</span>\t <span class="hl num">0.3015094502008</span><span class="hl sym">]])</span>


<span class="hl sym">(</span>defn prefix<span class="hl sym">-</span>sums<span class="hl sym">-</span>helper <span class="hl sym">[</span>x coll<span class="hl sym">]</span>
  <span class="hl sym">(</span>lazy<span class="hl sym">-</span>seq
   <span class="hl sym">(</span>when<span class="hl sym">-</span>let <span class="hl sym">[</span>s <span class="hl sym">(</span>seq coll<span class="hl sym">)]</span>
     <span class="hl sym">(</span>let <span class="hl sym">[</span>sum <span class="hl sym">(+</span> x <span class="hl sym">(</span>first s<span class="hl sym">))]</span>
       <span class="hl sym">(</span>cons sum <span class="hl sym">(</span>prefix<span class="hl sym">-</span>sums<span class="hl sym">-</span>helper sum <span class="hl sym">(</span>rest s<span class="hl sym">)))))))</span>


<span class="hl sym">(</span>defn prefix<span class="hl sym">-</span>sums <span class="hl sym">[</span>coll<span class="hl sym">]</span>
  <span class="hl sym">(</span>prefix<span class="hl sym">-</span>sums<span class="hl sym">-</span>helper <span class="hl num">0</span> coll<span class="hl sym">))</span>


<span class="hl sym">(</span>defn make<span class="hl sym">-</span>genelist <span class="hl sym">[</span>pdf<span class="hl sym">-</span>map<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>n <span class="hl sym">(</span>count pdf<span class="hl sym">-</span>map<span class="hl sym">)</span>
        chars <span class="hl sym">(</span>char<span class="hl sym">-</span>array n <span class="hl sym">(</span>map first pdf<span class="hl sym">-</span>map<span class="hl sym">))</span>
        cdf <span class="hl sym">(</span>double<span class="hl sym">-</span>array n <span class="hl sym">(</span>prefix<span class="hl sym">-</span>sums <span class="hl sym">(</span>map #<span class="hl sym">(</span>nth % <span class="hl num">1</span><span class="hl sym">)</span> pdf<span class="hl sym">-</span>map<span class="hl sym">)))]</span>
    <span class="hl sym">[</span>chars cdf<span class="hl sym">]))</span>


<span class="hl sym">(</span>defn <span class="hl sym">-</span>main <span class="hl sym">[&amp;</span> args<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>n <span class="hl sym">(</span>if <span class="hl sym">(</span>and <span class="hl sym">(&gt;= (</span>count args<span class="hl sym">)</span> <span class="hl num">1</span><span class="hl sym">)</span>
                   <span class="hl sym">(</span>re<span class="hl sym">-</span>matches #<span class="hl str">&quot;^</span><span class="hl esc">\</span><span class="hl str">d+$&quot;</span> <span class="hl sym">(</span>nth args <span class="hl num">0</span><span class="hl sym">)))</span>
            <span class="hl sym">(</span>. Integer valueOf <span class="hl sym">(</span>nth args <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl num">10</span><span class="hl sym">))</span>
        line<span class="hl sym">-</span>length <span class="hl num">60</span>
        wrtr <span class="hl sym">(</span>java.io.BufferedWriter. <span class="hl sym">*</span>out<span class="hl sym">*)</span>
        <span class="hl sym">[</span>iub<span class="hl sym">-</span>chars iub<span class="hl sym">-</span>cdf<span class="hl sym">] (</span>make<span class="hl sym">-</span>genelist iub<span class="hl sym">)</span>
        <span class="hl sym">[</span>homosapiens<span class="hl sym">-</span>chars homosapiens<span class="hl sym">-</span>cdf<span class="hl sym">] (</span>make<span class="hl sym">-</span>genelist homosapiens<span class="hl sym">)]</span>
    <span class="hl sym">(</span>make<span class="hl sym">-</span>repeat<span class="hl sym">-</span>fasta wrtr line<span class="hl sym">-</span>length <span class="hl str">&quot;ONE&quot;</span> <span class="hl str">&quot;Homo sapiens alu&quot;</span> alu <span class="hl sym">(*</span> <span class="hl num">2</span> n<span class="hl sym">))</span>
    <span class="hl sym">(</span>make<span class="hl sym">-</span>random<span class="hl sym">-</span>fasta wrtr line<span class="hl sym">-</span>length <span class="hl str">&quot;TWO&quot;</span> <span class="hl str">&quot;IUB ambiguity codes&quot;</span>
                       <span class="hl sym">(*</span> <span class="hl num">3</span> n<span class="hl sym">)</span> iub<span class="hl sym">-</span>chars iub<span class="hl sym">-</span>cdf<span class="hl sym">)</span>
    <span class="hl sym">(</span>make<span class="hl sym">-</span>random<span class="hl sym">-</span>fasta wrtr line<span class="hl sym">-</span>length <span class="hl str">&quot;THREE&quot;</span> <span class="hl str">&quot;Homo sapiens frequency&quot;</span>
                       <span class="hl sym">(*</span> <span class="hl num">5</span> n<span class="hl sym">)</span> homosapiens<span class="hl sym">-</span>chars homosapiens<span class="hl sym">-</span>cdf<span class="hl sym">)</span>
    <span class="hl sym">(</span>.flush wrtr<span class="hl sym">))</span>
  <span class="hl sym">(</span>. System <span class="hl sym">(</span>exit <span class="hl num">0</span><span class="hl sym">)))</span>
