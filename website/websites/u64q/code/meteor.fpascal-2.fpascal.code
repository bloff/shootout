<source>
<def></def><kwa>program</kwa> <def>meteor</def><sym>;</sym><br />
<def></def><br />
<com>{The Computer Language Benchmarks Game</com><br />
<com> http://shootout.alioth.debian.org/</com><br />
<com></com><br />
<com> contributed by Daniel Mantione</com><br />
<com> mostly based on Ben St. John's implementation.}</com><def></def><br />
<br />
<com>{$Q-}</com><def></def><br />
<br />
<kwa>uses</kwa> <def>dos</def><sym>;</sym><br />
<def></def><br />
<kwa>const</kwa> <def>N_COL</def> <sym>=</sym> <def></def><num>5</num><def></def><sym>;</sym><br />
<def>      N_ROW</def> <sym>=</sym> <def></def><num>10</num><def></def><sym>;</sym><br />
<def>      N_CELL</def> <sym>=</sym> <def>N_COL</def> <sym>*</sym> <def>N_ROW</def><sym>;</sym><br />
<def>      N_PIECE_TYPE</def> <sym>=</sym> <def></def><num>10</num><def></def><sym>;</sym><br />
<def><br />
      N_ELEM</def><sym>=</sym><def></def><num>5</num><def></def><sym>;</sym><br />
<def>      N_ORIENT</def><sym>=</sym><def></def><num>12</num><def></def><sym>;</sym><br />
<def>      ALL_PIECE_MASK</def><sym>=[</sym><def></def><num>0</num><def></def><sym>..</sym><def>N_PIECE_TYPE</def><sym>-</sym><def></def><num>1</num><def></def><sym>];</sym><br />
<def>      SKIP_PIECE</def><sym>=</sym><def></def><num>5</num><def></def><sym>;</sym><br />
<def><br />
      no_piece</def><sym>=</sym><def></def><kwd>high</kwd><def></def><sym>(</sym><def></def><kwb>byte</kwb><def></def><sym>);</sym><br />
<def><br />
      L_EDGE_MASK</def><sym>=[</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>5</num><def></def><sym>,</sym><def></def><num>10</num><def></def><sym>,</sym><def></def><num>15</num><def></def><sym>,</sym><def></def><num>20</num><def></def><sym>,</sym><def></def><num>25</num><def></def><sym>,</sym><def></def><num>30</num><def></def><sym>];</sym><br />
<def>      R_EDGE_MASK</def><sym>=[</sym><def></def><num>4</num><def></def><sym>,</sym><def></def><num>9</num><def></def><sym>,</sym><def></def><num>14</num><def></def><sym>,</sym><def></def><num>19</num><def></def><sym>,</sym><def></def><num>24</num><def></def><sym>,</sym><def></def><num>29</num><def></def><sym>];</sym><br />
<def>      TOP_ROW</def>    <sym>= [</sym><def></def><num>0</num><def></def><sym>*</sym><def>N_COL</def><sym>.</sym><def></def><num>.1</num><def></def><sym>*</sym><def>N_COL</def><sym>-</sym><def></def><num>1</num><def></def><sym>];</sym><br />
<def>      SECOND_ROW</def> <sym>= [</sym><def></def><num>1</num><def></def><sym>*</sym><def>N_COL</def><sym>.</sym><def></def><num>.2</num><def></def><sym>*</sym><def>N_COL</def><sym>-</sym><def></def><num>1</num><def></def><sym>];</sym><br />
<def>      THIRD_ROW</def>  <sym>= [</sym><def></def><num>2</num><def></def><sym>*</sym><def>N_COL</def><sym>.</sym><def></def><num>.3</num><def></def><sym>*</sym><def>N_COL</def><sym>-</sym><def></def><num>1</num><def></def><sym>];</sym><br />
<def>      FOURTH_ROW</def> <sym>= [</sym><def></def><num>3</num><def></def><sym>*</sym><def>N_COL</def><sym>.</sym><def></def><num>.4</num><def></def><sym>*</sym><def>N_COL</def><sym>-</sym><def></def><num>1</num><def></def><sym>];</sym><br />
<def>      FIFTH_ROW</def>  <sym>= [</sym><def></def><num>4</num><def></def><sym>*</sym><def>N_COL</def><sym>.</sym><def></def><num>.5</num><def></def><sym>*</sym><def>N_COL</def><sym>-</sym><def></def><num>1</num><def></def><sym>];</sym><br />
<def>      SIXTH_ROW</def>  <sym>= [</sym><def></def><num>5</num><def></def><sym>*</sym><def>N_COL</def><sym>.</sym><def></def><num>.6</num><def></def><sym>*</sym><def>N_COL</def><sym>-</sym><def></def><num>1</num><def></def><sym>];</sym><br />
<def>      LAST_ROW</def>   <sym>=</sym> <def>SIXTH_ROW</def><sym>;</sym><br />
<def>      ROW_0_MASK</def><sym>=[</sym><def></def><num>0</num><def></def><sym>..</sym><def>N_COL</def><sym>-</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>10</num><def></def><sym>..</sym><def>N_COL</def><sym>+</sym><def></def><num>10</num><def></def><sym>-</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>20</num><def></def><sym>..</sym><def>N_COL</def><sym>+</sym><def></def><num>20</num><def></def><sym>-</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>30</num><def></def><sym>,</sym><def></def><num>31</num><def></def><sym>];</sym><br />
<def>      ROW_1_MASK</def><sym>=[</sym><def></def><num>5</num><def></def><sym>..</sym><def>N_COL</def><sym>+</sym><def></def><num>5</num><def></def><sym>-</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>15</num><def></def><sym>..</sym><def>N_COL</def><sym>+</sym><def></def><num>15</num><def></def><sym>-</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>25</num><def></def><sym>..</sym><def>N_COL</def><sym>+</sym><def></def><num>25</num><def></def><sym>-</sym><def></def><num>1</num><def></def><sym>];</sym><br />
<def>      BOARD_MASK</def><sym>=[</sym><def></def><num>0</num><def></def><sym>.</sym><def></def><num>.29</num><def></def><sym>];</sym><br />
<def></def><br />
<br />
<kwa>type</kwa>  <def>bitvec</def><sym>=</sym><def></def><kwa>set of</kwa> <def></def><num>0</num><def></def><sym>.</sym><def></def><num>.31</num><def></def><sym>;</sym><br />
<def>      dimensions</def><sym>=(</sym><def>dimx</def><sym>,</sym><def>dimy</def><sym>);</sym><br />
<def>      parity</def><sym>=(</sym><def>even</def><sym>,</sym><def>odd</def><sym>);</sym><br />
<def>      goodbad</def><sym>=(</sym><def>good</def><sym>,</sym><def>bad</def><sym>,</sym><def>always_bad</def><sym>);</sym><br />
<def>      piecenr</def><sym>=</sym><def></def><kwa>type</kwa> <def></def><num>0</num><def></def><sym>..</sym><def>N_PIECE_TYPE</def><sym>-</sym><def></def><num>1</num><def></def><sym>;</sym><br />
<def>      orientation</def><sym>=</sym><def></def><kwa>type</kwa> <def></def><num>0</num><def></def><sym>..</sym><def>N_ORIENT</def><sym>-</sym><def></def><num>1</num><def></def><sym>;</sym><br />
<def><br />
      piece_placement</def><sym>=</sym><def></def><kwa>record</kwa><br />
<def>        vec</def><sym>:</sym><def>bitvec</def><sym>;</sym><br />
<def>        ipiece</def><sym>:</sym><def>piecenr</def><sym>;</sym><br />
<def>        row</def><sym>:</sym><def></def><kwb>byte</kwb><def></def><sym>;</sym><br />
<def></def>      <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>type</kwa> <def>Soln</def><sym>=</sym><def></def><kwa>object</kwa><br />
<def>       m_pieces</def><sym>:</sym><def></def><kwa>array</kwa><def></def><sym>[</sym><def>piecenr</def><sym>]</sym> <def></def><kwa>of</kwa> <def>piece_placement</def><sym>;</sym><br />
<def>       m_npiece</def><sym>:</sym><def></def><kwb>byte</kwb><def></def><sym>;</sym><br />
<def>       m_cells</def><sym>:</sym><def></def><kwa>array</kwa><def></def><sym>[</sym><def></def><num>0</num><def></def><sym>..</sym><def>N_ROW</def><sym>-</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>..</sym><def>N_COL</def><sym>-</sym><def></def><num>1</num><def></def><sym>]</sym> <def></def><kwa>of</kwa> <def>piecenr</def><sym>;</sym><br />
<def>       m_synched</def><sym>:</sym><def></def><kwb>boolean</kwb><def></def><sym>;</sym><br />
<def></def>       <kwa>constructor</kwa> <def></def><kwd>init</kwd><def></def><sym>(</sym><def>fillval</def><sym>:</sym><def></def><kwb>byte</kwb><def></def><sym>);</sym><br />
<def></def>       <kwa>procedure</kwa> <def>setCells</def><sym>;</sym><br />
<def></def>       <kwa>function</kwa> <def></def><kwd>lessThan</kwd><def></def><sym>(</sym><def></def><kwa>var</kwa> <def>r</def><sym>:</sym><def>Soln</def><sym>):</sym><def></def><kwb>boolean</kwb><def></def><sym>;</sym><br />
<def></def>       <kwa>procedure</kwa> <def></def><kwd>write</kwd><def></def><sym>(</sym><def></def><kwa>var</kwa> <def>f</def><sym>:</sym><def></def><kwb>text</kwb><def></def><sym>);</sym><br />
<def></def>       <kwa>procedure</kwa> <def></def><kwd>fill</kwd><def></def><sym>(</sym><def>value</def><sym>:</sym><def></def><kwb>byte</kwb><def></def><sym>);</sym><br />
<def></def>       <kwa>procedure</kwa> <def></def><kwd>spin</kwd><def></def><sym>(</sym><def></def><kwa>var</kwa> <def>spun</def><sym>:</sym><def>Soln</def><sym>);</sym><br />
<def></def><br />
       <kwa>function</kwa> <def>isEmpty</def><sym>:</sym><def></def><kwb>boolean</kwb><def></def><sym>;</sym><br />
<def></def>       <kwa>procedure</kwa> <def>popPiece</def><sym>;</sym><def></def><kwa>inline</kwa><def></def><sym>;</sym><br />
<def></def>       <kwa>procedure</kwa> <def></def><kwd>pushPiece</kwd><def></def><sym>(</sym><def>Avec</def><sym>:</sym><def>bitvec</def><sym>;</sym><def>AiPiece</def><sym>:</sym><def>piecenr</def><sym>;</sym><def>Arow</def><sym>:</sym><def></def><kwb>byte</kwb><def></def><sym>);</sym><br />
<def></def>     <kwa>end</kwa><def></def><sym>;</sym><br />
<def><br />
     instance</def><sym>=</sym><def></def><kwa>record</kwa><br />
<def>       m_allowed</def><sym>:</sym><def></def><kwa>set of</kwa> <def></def><kwb>byte</kwb><def></def><sym>;</sym><br />
<def>       m_vec</def><sym>:</sym><def>bitvec</def><sym>;</sym><br />
<def>       m_offset</def><sym>:</sym><def></def><kwb>longint</kwb><def></def><sym>;</sym><br />
<def></def>     <kwa>end</kwa><def></def><sym>;</sym><br />
<def><br />
     TPts</def><sym>=</sym><def></def><kwa>array</kwa><def></def><sym>[</sym><def></def><num>0</num><def></def><sym>..</sym><def>N_ELEM</def><sym>-</sym><def></def><num>1</num><def></def><sym>,</sym><def>dimensions</def><sym>]</sym> <def></def><kwa>of</kwa> <def>shortint</def><sym>;</sym><br />
<def>     piece</def><sym>=</sym><def></def><kwa>object</kwa><br />
<def>       m_instance</def><sym>:</sym><def></def><kwa>array</kwa><def></def><sym>[</sym><def>parity</def><sym>]</sym> <def></def><kwa>of</kwa> <def>instance</def><sym>;</sym><br />
<def></def>       <kwa>procedure</kwa> <def></def><kwd>set_ok_positions</kwd><def></def><sym>(</sym><def>isOdd</def><sym>:</sym><def>parity</def><sym>;</sym><def>w</def><sym>,</sym><def>h</def><sym>:</sym><def></def><kwb>longint</kwb><def></def><sym>);</sym><br />
<def></def>     <kwa>end</kwa><def></def><sym>;</sym><br />
<def><br />
     OkPieces</def><sym>=</sym><def></def><kwa>record</kwa><br />
<def>       nPieces</def><sym>:</sym><def></def><kwa>array</kwa><def></def><sym>[</sym><def>piecenr</def><sym>]</sym> <def></def><kwa>of</kwa> <def></def><kwb>byte</kwb><def></def><sym>;</sym><br />
<def>       pieceVec</def><sym>:</sym><def></def><kwa>array</kwa><def></def><sym>[</sym><def>piecenr</def><sym>,</sym><def>orientation</def><sym>]</sym> <def></def><kwa>of</kwa> <def>bitvec</def><sym>;</sym><br />
<def></def>     <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<br />
<kwa>type</kwa>  <def>fixed</def><sym>=(</sym><def>OPEN</def><sym>,</sym> <def>CLOSED</def><sym>);</sym><br />
<def>      islandinfo</def><sym>=</sym><def></def><kwa>record</kwa><br />
<def>        has_bad</def><sym>:</sym><def></def><kwa>array</kwa><def></def><sym>[</sym><def>fixed</def><sym>,</sym><def>parity</def><sym>]</sym> <def></def><kwa>of</kwa> <def>bitvec</def><sym>;</sym><br />
<def>        is_known</def><sym>:</sym><def></def><kwa>array</kwa><def></def><sym>[</sym><def>fixed</def><sym>,</sym><def>parity</def><sym>]</sym> <def></def><kwa>of</kwa> <def>bitvec</def><sym>;</sym><br />
<def>        alwaysBad</def><sym>:</sym><def></def><kwa>array</kwa><def></def><sym>[</sym><def>parity</def><sym>]</sym> <def></def><kwa>of</kwa> <def>bitvec</def><sym>;</sym><br />
<def></def>      <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>const</kwa> <def>MAX_ISLAND_OFFSET</def><sym>=</sym><def></def><num>1024</num><def></def><sym>;</sym><br />
<def></def><br />
<kwa>type</kwa> <def>cacherec</def><sym>=</sym><def></def><kwa>record</kwa><br />
<def>       krow</def><sym>,</sym><def>kpiecevec</def><sym>:</sym><def></def><kwb>word</kwb><def></def><sym>;</sym><br />
<def>       kboardvec</def><sym>:</sym><def>bitvec</def><sym>;</sym><br />
<def></def>     <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>var</kwa> <def>s_basePiece</def><sym>:</sym><def></def><kwa>array</kwa><def></def><sym>[</sym><def>piecenr</def><sym>,</sym><def>orientation</def><sym>]</sym> <def></def><kwa>of</kwa> <def>piece</def><sym>;</sym><br />
<def>    g_okPieces</def><sym>:</sym><def></def><kwa>array</kwa><def></def><sym>[</sym><def></def><num>0</num><def></def><sym>..</sym><def>N_ROW</def><sym>-</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>..</sym><def>N_COL</def><sym>-</sym><def></def><num>1</num><def></def><sym>]</sym> <def></def><kwa>of</kwa> <def>OkPieces</def><sym>;</sym><br />
<def>    g_islandInfo</def><sym>:</sym><def></def><kwa>array</kwa><def></def><sym>[</sym><def></def><num>0</num><def></def><sym>..</sym><def>MAX_ISLAND_OFFSET</def><sym>-</sym><def></def><num>1</num><def></def><sym>]</sym> <def></def><kwa>of</kwa> <def>islandinfo</def><sym>;</sym><br />
<def>    g_nIslandInfo</def><sym>:</sym><def></def><kwb>cardinal</kwb><def></def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym><br />
<def>    cache</def><sym>:</sym><def></def><kwa>array</kwa><def></def><sym>[</sym><def></def><num>0</num><def></def><sym>.</sym><def></def><num>.1024</num><def></def><sym>*</sym><def></def><num>128</num><def></def><sym>-</sym><def></def><num>1</num><def></def><sym>]</sym> <def></def><kwa>of</kwa> <def>cacherec</def><sym>;</sym><br />
<def><br />
    m_curSoln</def><sym>,</sym><def>m_minSoln</def><sym>,</sym><def>m_maxSoln</def><sym>:</sym><def>Soln</def><sym>;</sym><br />
<def>    m_nSoln</def><sym>:</sym><def></def><kwb>cardinal</kwb><def></def><sym>;</sym><br />
<def></def><br />
<kwa>const</kwa> <def>basevecs</def><sym>:</sym><def></def><kwa>array</kwa> <def></def><sym>[</sym><def></def><num>0</num><def></def><sym>.</sym><def></def><num>.9</num><def></def><sym>]</sym> <def></def><kwa>of</kwa> <def>bitvec</def><sym>= (</sym><br />
<def></def>        <sym>[</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>2</num><def></def><sym>,</sym><def></def><num>3</num><def></def><sym>,</sym><def></def><num>8</num><def></def><sym>],</sym><br />
<def></def>        <sym>[</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>3</num><def></def><sym>,</sym><def></def><num>6</num><def></def><sym>,</sym><def></def><num>7</num><def></def><sym>],</sym><br />
<def></def>        <sym>[</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>2</num><def></def><sym>,</sym><def></def><num>7</num><def></def><sym>,</sym><def></def><num>12</num><def></def><sym>],</sym><br />
<def></def>        <sym>[</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>2</num><def></def><sym>,</sym><def></def><num>5</num><def></def><sym>,</sym><def></def><num>10</num><def></def><sym>],</sym><br />
<def></def>        <sym>[</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>2</num><def></def><sym>,</sym><def></def><num>5</num><def></def><sym>,</sym><def></def><num>6</num><def></def><sym>,</sym><def></def><num>10</num><def></def><sym>],</sym><br />
<def></def>        <sym>[</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>2</num><def></def><sym>,</sym><def></def><num>6</num><def></def><sym>,</sym><def></def><num>7</num><def></def><sym>],</sym><br />
<def></def>        <sym>[</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>5</num><def></def><sym>,</sym><def></def><num>10</num><def></def><sym>,</sym><def></def><num>15</num><def></def><sym>],</sym><br />
<def></def>        <sym>[</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>2</num><def></def><sym>,</sym><def></def><num>5</num><def></def><sym>,</sym><def></def><num>7</num><def></def><sym>],</sym><br />
<def></def>        <sym>[</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>2</num><def></def><sym>,</sym><def></def><num>7</num><def></def><sym>,</sym><def></def><num>8</num><def></def><sym>],</sym><br />
<def></def>        <sym>[</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>2</num><def></def><sym>,</sym><def></def><num>3</num><def></def><sym>,</sym><def></def><num>7</num><def></def><sym>]</sym><br />
<def></def>      <sym>);</sym><br />
<def></def><br />
<br />
<kwa>constructor</kwa> <def>soln</def><sym>.</sym><def></def><kwd>init</kwd><def></def><sym>(</sym><def>fillval</def><sym>:</sym><def></def><kwb>byte</kwb><def></def><sym>);</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def></def>  <kwd>fill</kwd><def></def><sym>(</sym><def>fillval</def><sym>);</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def>Soln</def><sym>.</sym><def></def><kwd>fill</kwd><def></def><sym>(</sym><def>value</def><sym>:</sym><def></def><kwb>byte</kwb><def></def><sym>);</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def>   m_synched</def><sym>:=</sym><def></def><kwb>false</kwb><def></def><sym>;</sym><br />
<def></def>   <kwd>fillchar</kwd><def></def><sym>(</sym><def>m_cells</def><sym>,</sym><def>N_CELL</def><sym>,</sym><def>value</def><sym>);</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>function</kwa> <def>soln</def><sym>.</sym><def>isEmpty</def><sym>:</sym><def></def><kwb>boolean</kwb><def></def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def>  isempty</def><sym>:=</sym><def>m_nPiece</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def>soln</def><sym>.</sym><def></def><kwd>pushPiece</kwd><def></def><sym>(</sym><def>Avec</def><sym>:</sym><def>bitvec</def><sym>;</sym><def>AiPiece</def><sym>:</sym><def>piecenr</def><sym>;</sym><def>Arow</def><sym>:</sym><def></def><kwb>byte</kwb><def></def><sym>);</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def></def>  <kwa>with</kwa> <def>m_pieces</def><sym>[</sym><def>m_npiece</def><sym>]</sym> <def></def><kwa>do</kwa><br />
<def></def>    <kwa>begin</kwa><br />
<def>      vec</def><sym>:=</sym><def>Avec</def><sym>;</sym><br />
<def>      iPiece</def><sym>:=</sym><def>AiPiece</def><sym>;</sym><br />
<def>      row</def><sym>:=</sym><def>Arow</def><sym>;</sym><br />
<def></def>    <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>  <kwd>inc</kwd><def></def><sym>(</sym><def>m_npiece</def><sym>);</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def>soln</def><sym>.</sym><def>popPiece</def><sym>;</sym><def></def><kwa>inline</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def></def>  <kwd>dec</kwd><def></def><sym>(</sym><def>m_nPiece</def><sym>);</sym><br />
<def>  m_synched</def> <sym>:=</sym> <def></def><kwb>false</kwb><def></def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def>soln</def><sym>.</sym><def></def><kwd>write</kwd><def></def><sym>(</sym><def></def><kwa>var</kwa> <def>f</def><sym>:</sym><def></def><kwb>text</kwb><def></def><sym>);</sym><br />
<def></def><br />
<kwa>var</kwa> <def>x</def><sym>,</sym><def>y</def><sym>:</sym><def></def><kwb>byte</kwb><def></def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def></def>  <kwa>for</kwa> <def>y</def><sym>:=</sym><def></def><num>0</num> <def></def><kwa>to</kwa> <def>N_ROW</def><sym>-</sym><def></def><num>1</num> <def></def><kwa>do</kwa><br />
<def></def>    <kwa>begin</kwa><br />
<def></def>      <com>{indent every second line}</com><def></def><br />
      <kwa>if</kwa> <def>y</def> <kwa>mod</kwa> <def></def><num>2</num><def></def><sym>=</sym><def></def><num>1</num> <def></def><kwa>then</kwa><br />
<def>        system</def><sym>.</sym><def></def><kwd>write</kwd><def></def><sym>(</sym><def>f</def><sym>,</sym><def></def><str>' '</str><def></def><sym>);</sym><br />
<def></def>      <kwa>for</kwa> <def>x</def><sym>:=</sym><def></def><num>0</num> <def></def><kwa>to</kwa> <def>N_COL</def><sym>-</sym><def></def><num>1</num> <def></def><kwa>do</kwa><br />
<def></def>        <kwa>if</kwa> <def>m_cells</def><sym>[</sym><def>y</def><sym>,</sym><def>x</def><sym>]=</sym><def>no_piece</def> <kwa>then</kwa><br />
<def>          system</def><sym>.</sym><def></def><kwd>write</kwd><def></def><sym>(</sym><def>f</def><sym>,</sym><def></def><str>'. '</str><def></def><sym>)</sym><br />
<def></def>        <kwa>else</kwa><br />
<def>          system</def><sym>.</sym><def></def><kwd>write</kwd><def></def><sym>(</sym><def>f</def><sym>,</sym><def></def><kwb>char</kwb><def></def><sym>(</sym><def></def><kwb>byte</kwb><def></def><sym>(</sym><def></def><str>'0'</str><def></def><sym>)+</sym><def>m_cells</def><sym>[</sym><def>y</def><sym>,</sym><def>x</def><sym>]),</sym><def></def><str>' '</str><def></def><sym>);</sym><br />
<def></def>      <kwd>writeln</kwd><def></def><sym>(</sym><def>f</def><sym>);</sym><br />
<def></def>    <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<br />
<kwa>procedure</kwa> <def>Soln</def><sym>.</sym><def>setCells</def><sym>;</sym><br />
<def></def><br />
<kwa>var</kwa> <def>c</def><sym>,</sym><def>i</def><sym>,</sym><def>x</def><sym>,</sym><def>y</def><sym>,</sym><def>newcells</def><sym>:</sym><def></def><kwb>byte</kwb><def></def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def></def>   <kwa>if</kwa> <def>m_synched</def> <kwa>then</kwa><br />
<def>     exit</def><sym>;</sym><br />
<def></def>   <kwa>for</kwa> <def>i</def><sym>:=</sym><def></def><num>1</num> <def></def><kwa>to</kwa> <def>m_nPiece</def> <kwa>do</kwa><br />
<def></def>     <kwa>with</kwa> <def>m_pieces</def><sym>[</sym><def>i</def><sym>-</sym><def></def><num>1</num><def></def><sym>]</sym> <def></def><kwa>do</kwa><br />
<def></def>       <kwa>begin</kwa><br />
<def>         newcells</def><sym>:=</sym><def></def><num>0</num><def></def><sym>;</sym><br />
<def>         c</def><sym>:=</sym><def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>         <kwa>for</kwa> <def>y</def><sym>:=</sym><def>row</def> <kwa>to</kwa> <def>N_ROW</def> <kwa>do</kwa><br />
<def></def>           <kwa>begin</kwa><br />
<def></def>             <kwa>for</kwa> <def>x</def><sym>:=</sym><def></def><num>0</num> <def></def><kwa>to</kwa> <def>N_COL</def><sym>-</sym><def></def><num>1</num> <def></def><kwa>do</kwa><br />
<def></def>               <kwa>begin</kwa><br />
<def></def>                 <kwa>if</kwa> <def>c</def> <kwa>in</kwa> <def>vec</def> <kwa>then</kwa><br />
<def></def>                   <kwa>begin</kwa><br />
<def>                     m_cells</def><sym>[</sym><def>y</def><sym>,</sym><def>x</def><sym>]:=</sym><def>ipiece</def><sym>;</sym><br />
<def></def>                     <kwd>inc</kwd><def></def><sym>(</sym><def>NewCells</def><sym>);</sym><br />
<def></def>                   <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>                 <kwd>inc</kwd><def></def><sym>(</sym><def>c</def><sym>);</sym><br />
<def></def>               <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>             <kwa>if</kwa> <def>NewCells</def><sym>=</sym><def>N_ELEM</def> <kwa>then</kwa><br />
<def>               break</def><sym>;</sym><br />
<def></def>           <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>       <kwa>end</kwa><def></def><sym>;</sym><br />
<def>   m_synched</def><sym>:=</sym><def></def><kwb>true</kwb><def></def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>function</kwa> <def>Soln</def><sym>.</sym><def></def><kwd>lessThan</kwd><def></def><sym>(</sym><def></def><kwa>var</kwa> <def>r</def><sym>:</sym><def>Soln</def><sym>):</sym><def></def><kwb>boolean</kwb><def></def><sym>;</sym><br />
<def></def><br />
<kwa>var</kwa> <def>x</def><sym>,</sym><def>y</def><sym>,</sym><def>lval</def><sym>,</sym><def>rval</def><sym>:</sym><def></def><kwb>byte</kwb><def></def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def></def>   <kwa>if</kwa> <def>m_pieces</def><sym>[</sym><def></def><num>0</num><def></def><sym>].</sym><def>iPiece</def><sym>&lt;&gt;</sym><def>r</def><sym>.</sym><def>m_pieces</def><sym>[</sym><def></def><num>0</num><def></def><sym>].</sym><def>iPiece</def> <kwa>then</kwa><br />
<def></def>     <kwa>begin</kwa><br />
<def>       lessthan</def><sym>:=</sym><def>m_pieces</def><sym>[</sym><def></def><num>0</num><def></def><sym>].</sym><def>iPiece</def> <sym>&lt;</sym> <def>r</def><sym>.</sym><def>m_pieces</def><sym>[</sym><def></def><num>0</num><def></def><sym>].</sym><def>iPiece</def><sym>;</sym><br />
<def>       exit</def><sym>;</sym><br />
<def></def>     <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
   <kwd>setCells</kwd><def></def><sym>();</sym><br />
<def>   r</def><sym>.</sym><def></def><kwd>setCells</kwd><def></def><sym>();</sym><br />
<def></def><br />
   <kwa>for</kwa> <def>y</def><sym>:=</sym><def></def><num>0</num> <def></def><kwa>to</kwa> <def>N_ROW</def><sym>-</sym><def></def><num>1</num> <def></def><kwa>do</kwa><br />
<def></def>      <kwa>for</kwa> <def>x</def><sym>:=</sym><def></def><num>0</num> <def></def><kwa>to</kwa> <def>N_COL</def><sym>-</sym><def></def><num>1</num> <def></def><kwa>do</kwa><br />
<def></def>        <kwa>begin</kwa><br />
<def>         lval</def><sym>:=</sym><def>m_cells</def><sym>[</sym><def>y</def><sym>,</sym><def>x</def><sym>];</sym><br />
<def>         rval</def><sym>:=</sym><def>r</def><sym>.</sym><def>m_cells</def><sym>[</sym><def>y</def><sym>,</sym><def>x</def><sym>];</sym><br />
<def></def><br />
         <kwa>if</kwa> <def>lval</def> <sym>&lt;&gt;</sym> <def>rval</def> <kwa>then</kwa><br />
<def></def>           <kwa>begin</kwa><br />
<def>             lessthan</def><sym>:=</sym><def>lval</def><sym>&lt;</sym><def>rval</def><sym>;</sym><br />
<def>             exit</def><sym>;</sym><br />
<def></def>           <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>        <kwa>end</kwa><def></def><sym>;</sym><br />
<def><br />
   lessthan</def><sym>:=</sym><def></def><kwb>false</kwb><def></def><sym>;</sym> <def></def><com>{solutions are equal}</com><def></def><br />
<kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def>Soln</def><sym>.</sym><def></def><kwd>spin</kwd><def></def><sym>(</sym><def></def><kwa>var</kwa> <def>spun</def><sym>:</sym><def>Soln</def><sym>);</sym><br />
<def></def><br />
<kwa>var</kwa> <def>x</def><sym>,</sym><def>y</def><sym>:</sym><def></def><kwb>byte</kwb><def></def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def>   setCells</def><sym>;</sym><br />
<def></def>   <com>{swap cells}</com><def></def><br />
   <kwa>for</kwa> <def>y</def><sym>:=</sym><def></def><num>0</num> <def></def><kwa>to</kwa> <def>N_ROW</def><sym>-</sym><def></def><num>1</num> <def></def><kwa>do</kwa><br />
<def></def>      <kwa>for</kwa> <def>x</def><sym>:=</sym><def></def><num>0</num> <def></def><kwa>to</kwa> <def>N_COL</def><sym>-</sym><def></def><num>1</num> <def></def><kwa>do</kwa><br />
<def>        spun</def><sym>.</sym><def>m_cells</def><sym>[</sym><def>y</def><sym>,</sym><def>x</def><sym>]:=</sym><def>m_cells</def><sym>[</sym><def>N_ROW</def><sym>-</sym><def>y</def><sym>-</sym><def></def><num>1</num><def></def><sym>,</sym><def>N_COL</def><sym>-</sym><def>x</def><sym>-</sym><def></def><num>1</num><def></def><sym>];</sym><br />
<def></def><br />
   <com>{swap first and last pieces (the rest aren't used)}</com><def><br />
   spun</def><sym>.</sym><def>m_pieces</def><sym>[</sym><def></def><num>0</num><def></def><sym>].</sym><def>iPiece</def><sym>:=</sym><def>m_pieces</def><sym>[</sym><def>N_PIECE_TYPE</def><sym>-</sym><def></def><num>1</num><def></def><sym>].</sym><def>iPiece</def><sym>;</sym><br />
<def>   spun</def><sym>.</sym><def>m_synched</def><sym>:=</sym><def></def><kwb>true</kwb><def></def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>function</kwa> <def></def><kwd>floor</kwd><def></def><sym>(</sym><def>top</def><sym>,</sym><def>bot</def><sym>:</sym><def></def><kwb>longint</kwb><def></def><sym>):</sym><def></def><kwb>longint</kwb><def></def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def>   floor</def><sym>:=</sym><def>top</def> <kwa>div</kwa> <def>bot</def><sym>;</sym><br />
<def></def>   <com>{negative numbers should be rounded down, not towards zero}</com><def></def><br />
   <kwa>if</kwa> <def></def><sym>(</sym><def>floor</def><sym>*</sym><def>bot</def><sym>&lt;&gt;</sym><def>top</def><sym>)</sym> <def></def><kwa>and</kwa> <def></def><sym>((</sym><def>top</def><sym>&lt;</sym><def></def><num>0</num><def></def><sym>)</sym> <def></def><kwa>xor</kwa> <def></def><sym>(</sym><def>bot</def><sym>&lt;=</sym><def></def><num>0</num><def></def><sym>))</sym> <def></def><kwa>then</kwa><br />
<def></def>      <kwd>dec</kwd><def></def><sym>(</sym><def>floor</def><sym>);</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>const</kwa> <def>s_firstOne</def><sym>:</sym><def></def><kwa>array</kwa><def></def><sym>[</sym><def></def><num>0</num><def></def><sym>.</sym><def></def><num>.31</num><def></def><sym>]</sym> <def></def><kwa>of</kwa> <def></def><kwb>byte</kwb><def></def><sym>=(</sym><br />
<def></def>   <num>0</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>1</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym>   <def></def><num>2</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>1</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym><br />
<def></def>   <num>3</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>1</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym>   <def></def><num>2</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>1</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym><br />
<def></def><br />
   <num>4</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>1</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym>   <def></def><num>2</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>1</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym><br />
<def></def>   <num>3</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>1</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym>   <def></def><num>2</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>1</num><def></def><sym>,</sym> <def></def><num>0</num><br />
<def></def><sym>);</sym><br />
<def></def><br />
<kwa>function</kwa> <def></def><kwd>first_set_bit</kwd><def></def><sym>(</sym><def>v</def><sym>:</sym><def>bitvec</def><sym>):</sym><def></def><kwb>cardinal</kwb><def></def><sym>;</sym><def></def><kwa>inline</kwa><def></def><sym>;</sym><br />
<def></def><br />
<com>{$ifdef endian_little}</com><def></def><br />
<kwa>const</kwa> <def>l</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym><br />
<def>      h</def><sym>=</sym><def></def><num>1</num><def></def><sym>;</sym><br />
<def></def><com>{$else}</com><def></def><br />
<kwa>const</kwa> <def>l</def><sym>=</sym><def></def><num>1</num><def></def><sym>;</sym><br />
<def>      h</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><com>{$endif}</com><def></def><br />
<br />
<kwa>var</kwa> <def>d</def><sym>:</sym><def></def><kwb>double</kwb><def></def><sym>;</sym><br />
<def>    u</def><sym>:</sym><def></def><kwa>array</kwa><def></def><sym>[</sym><def></def><num>0</num><def></def><sym>.</sym><def></def><num>.1</num><def></def><sym>]</sym> <def></def><kwa>of</kwa> <def>bitvec</def> <kwa>absolute</kwa> <def>d</def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def>  first_set_bit</def><sym>:=</sym><def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>  <kwa>if</kwa> <def>v</def><sym>&lt;&gt;[]</sym> <def></def><kwa>then</kwa><br />
<def></def>    <kwa>begin</kwa><br />
<def>      u</def><sym>[</sym><def>l</def><sym>]:=</sym><def>v</def><sym>;</sym><br />
<def>      u</def><sym>[</sym><def>h</def><sym>]:=[</sym><def></def><num>30</num><def></def><sym>,</sym><def></def><num>25</num><def></def><sym>,</sym><def></def><num>24</num><def></def><sym>,</sym><def></def><num>21</num><def></def><sym>,</sym><def></def><num>20</num><def></def><sym>];</sym><br />
<def>      d</def><sym>:=</sym><def>d</def><sym>-</sym><def></def><num>4503599627370496</num><def></def><sym>;</sym><br />
<def>      first_set_bit</def><sym>:=</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>u</def><sym>[</sym><def>h</def><sym>])</sym> <def></def><kwa>shr</kwa> <def></def><num>20</num><def></def><sym>-</sym><def></def><num>$3ff</num><def></def><sym>;</sym><br />
<def></def>    <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>function</kwa> <def></def><kwd>count_ones</kwd><def></def><sym>(</sym><def>v</def><sym>:</sym><def>bitvec</def><sym>):</sym><def></def><kwb>cardinal</kwb><def></def><sym>;</sym><def></def><kwa>inline</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def>   count_ones</def><sym>:=</sym><def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>   <kwa>while</kwa> <def>v</def><sym>&lt;&gt;[]</sym> <def></def><kwa>do</kwa><br />
<def></def>     <kwa>begin</kwa><br />
<def></def>       <kwd>inc</kwd><def></def><sym>(</sym><def>count_ones</def><sym>);</sym><br />
<def></def>       <kwb>cardinal</kwb><def></def><sym>(</sym><def>v</def><sym>):=</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>v</def><sym>)</sym> <def></def><kwa>and</kwa> <def></def><sym>(</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>v</def><sym>)-</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>     <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def></def><kwd>setCoordList</kwd><def></def><sym>(</sym><def>vec</def><sym>:</sym><def>bitvec</def><sym>;</sym><def></def><kwa>var</kwa> <def>pts</def><sym>:</sym><def>Tpts</def><sym>);</sym><br />
<def></def><br />
<kwa>var</kwa> <def>iPt</def><sym>,</sym><def>n</def><sym>:</sym><def></def><kwb>longint</kwb><def></def><sym>;</sym><br />
<def>    x</def><sym>,</sym><def>y</def><sym>:</sym><def></def><kwb>byte</kwb><def></def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def>   iPt</def><sym>:=</sym><def></def><num>0</num><def></def><sym>;</sym><br />
<def>   n</def><sym>:=</sym><def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>   <kwa>for</kwa> <def>y</def><sym>:=</sym><def></def><num>0</num> <def></def><kwa>to</kwa> <def>N_ROW</def><sym>-</sym><def></def><num>1</num> <def></def><kwa>do</kwa><br />
<def></def>     <kwa>for</kwa> <def>x</def><sym>:=</sym><def></def><num>0</num> <def></def><kwa>to</kwa> <def>N_COL</def><sym>-</sym><def></def><num>1</num> <def></def><kwa>do</kwa><br />
<def></def>       <kwa>begin</kwa><br />
<def></def>         <kwa>if</kwa> <def>n</def> <kwa>in</kwa> <def>vec</def> <kwa>then</kwa><br />
<def></def>           <kwa>begin</kwa><br />
<def>             pts</def><sym>[</sym><def>iPt</def><sym>,</sym><def>dimx</def><sym>]:=</sym><def>x</def><sym>;</sym><br />
<def>             pts</def><sym>[</sym><def>iPt</def><sym>,</sym><def>dimy</def><sym>]:=</sym><def>y</def><sym>;</sym><br />
<def></def>             <kwd>inc</kwd><def></def><sym>(</sym><def>iPt</def><sym>);</sym><br />
<def></def>           <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>         <kwd>inc</kwd><def></def><sym>(</sym><def>n</def><sym>);</sym><br />
<def></def>         <kwa>if</kwa> <def>n</def><sym>=</sym><def></def><num>32</num> <def></def><kwa>then</kwa><br />
<def>           exit</def><sym>;</sym><br />
<def></def>       <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>function</kwa> <def></def><kwd>toBitVector</kwd><def></def><sym>(</sym><def></def><kwa>const</kwa> <def>pts</def><sym>:</sym><def>Tpts</def><sym>):</sym><def>bitvec</def><sym>;</sym><br />
<def></def><br />
<kwa>var</kwa> <def>x</def><sym>,</sym><def>y</def><sym>,</sym><def>iPt</def><sym>:</sym><def></def><kwb>byte</kwb><def></def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def>   tobitvector</def><sym>:=[];</sym><br />
<def></def>   <kwa>for</kwa> <def>iPt</def><sym>:=</sym><def></def><kwd>low</kwd><def></def><sym>(</sym><def>pts</def><sym>)</sym> <def></def><kwa>to</kwa> <def></def><kwd>high</kwd><def></def><sym>(</sym><def>pts</def><sym>)</sym> <def></def><kwa>do</kwa><br />
<def></def>     <kwa>begin</kwa><br />
<def>       x</def><sym>:=</sym><def>pts</def><sym>[</sym><def>iPt</def><sym>,</sym><def>dimx</def><sym>];</sym><br />
<def>       y</def><sym>:=</sym><def>pts</def><sym>[</sym><def>iPt</def><sym>,</sym><def>dimy</def><sym>];</sym><br />
<def></def>       <kwd>include</kwd><def></def><sym>(</sym><def>tobitvector</def><sym>,</sym><def>y</def><sym>*</sym><def>N_COL</def><sym>+</sym><def>x</def><sym>);</sym><br />
<def></def>     <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def></def><kwd>shiftUpLines</kwd><def></def><sym>(</sym><def></def><kwa>var</kwa> <def>pts</def><sym>:</sym><def>Tpts</def><sym>;</sym><def>shift</def><sym>:</sym><def></def><kwb>longint</kwb><def></def><sym>);</sym><br />
<def></def><br />
<kwa>var</kwa> <def>iPt</def><sym>:</sym><def></def><kwb>byte</kwb><def></def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def></def>   <com>{vertical shifts have a twist}</com><def></def><br />
   <kwa>for</kwa> <def>iPt</def><sym>:=</sym><def></def><kwd>low</kwd><def></def><sym>(</sym><def>pts</def><sym>)</sym> <def></def><kwa>to</kwa> <def></def><kwd>high</kwd><def></def><sym>(</sym><def>pts</def><sym>)</sym> <def></def><kwa>do</kwa><br />
<def></def>     <kwa>begin</kwa><br />
<def></def>       <kwa>if</kwa> <def>pts</def><sym>[</sym><def>iPt</def><sym>,</sym><def>dimy</def><sym>]</sym> <def></def><kwa>and</kwa> <def>shift</def> <kwa>and</kwa> <def></def><num>1</num><def></def><sym>&lt;&gt;</sym><def></def><num>0</num> <def></def><kwa>then</kwa><br />
<def></def>         <kwd>inc</kwd><def></def><sym>(</sym><def>pts</def><sym>[</sym><def>iPt</def><sym>,</sym><def>dimx</def><sym>]);</sym><br />
<def></def>       <kwd>dec</kwd><def></def><sym>(</sym><def>pts</def><sym>[</sym><def>iPt</def><sym>,</sym><def>dimy</def><sym>],</sym><def>shift</def><sym>);</sym><br />
<def></def>     <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>function</kwa> <def></def><kwd>shiftToX0</kwd><def></def><sym>(</sym><def></def><kwa>var</kwa> <def>pts</def><sym>:</sym><def>Tpts</def><sym>;</sym><def></def><kwa>var</kwa> <def>Ainstance</def><sym>:</sym><def>instance</def><sym>;</sym><def>offsetRow</def><sym>:</sym><def></def><kwb>longint</kwb><def></def><sym>):</sym><def>shortint</def><sym>;</sym><br />
<def></def><br />
<kwa>var</kwa> <def>x</def><sym>,</sym><def>y</def><sym>,</sym><def>xmin</def><sym>,</sym><def>xmax</def><sym>,</sym><def>iPt</def><sym>,</sym><def>offset</def><sym>:</sym><def>shortint</def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def></def>   <com>{ .. determine shift}</com><def><br />
   xMin</def><sym>:=</sym><def>pts</def><sym>[</sym><def></def><num>0</num><def></def><sym>,</sym><def>dimx</def><sym>];</sym><br />
<def>   xMax</def><sym>:=</sym><def>xMin</def><sym>;</sym><br />
<def></def>   <kwa>for</kwa> <def>iPt</def><sym>:=</sym><def></def><kwd>low</kwd><def></def><sym>(</sym><def>pts</def><sym>)+</sym><def></def><num>1</num> <def></def><kwa>to</kwa> <def></def><kwd>high</kwd><def></def><sym>(</sym><def>pts</def><sym>)</sym> <def></def><kwa>do</kwa><br />
<def></def>     <kwa>begin</kwa><br />
<def>       x</def><sym>:=</sym><def>pts</def><sym>[</sym><def>iPt</def><sym>,</sym><def>dimx</def><sym>];</sym><br />
<def>       y</def><sym>:=</sym><def>pts</def><sym>[</sym><def>iPt</def><sym>,</sym><def>dimy</def><sym>];</sym><br />
<def></def>       <kwa>if</kwa> <def>x</def><sym>&lt;</sym><def>xMin</def> <kwa>then</kwa><br />
<def>         xMin</def><sym>:=</sym><def>x</def><br />
       <kwa>else if</kwa> <def>x</def> <sym>&gt;</sym> <def>xMax</def> <kwa>then</kwa><br />
<def>         xMax</def><sym>:=</sym><def>x</def><sym>;</sym><br />
<def></def>     <kwa>end</kwa><def></def><sym>;</sym><br />
<def><br />
   offset</def><sym>:=</sym><def>N_ELEM</def><sym>;</sym><br />
<def></def>   <kwa>for</kwa> <def>iPt</def><sym>:=</sym><def></def><kwd>low</kwd><def></def><sym>(</sym><def>pts</def><sym>)</sym> <def></def><kwa>to</kwa> <def></def><kwd>high</kwd><def></def><sym>(</sym><def>pts</def><sym>)</sym> <def></def><kwa>do</kwa><br />
<def></def>     <kwa>begin</kwa><br />
<def></def>      <kwd>dec</kwd><def></def><sym>(</sym><def>pts</def><sym>[</sym><def>iPt</def><sym>,</sym><def>dimx</def><sym>],</sym><def>xMin</def><sym>);</sym><br />
<def></def>      <com>{check offset -- leftmost cell on top line}</com><def></def><br />
      <kwa>if</kwa> <def></def><sym>(</sym><def>pts</def><sym>[</sym><def>iPt</def><sym>,</sym><def>dimy</def><sym>]=</sym><def>offsetRow</def><sym>)</sym> <def></def><kwa>and</kwa> <def></def><sym>(</sym><def>pts</def><sym>[</sym><def>iPt</def><sym>,</sym><def>dimx</def><sym>]&lt;</sym><def>offset</def><sym>)</sym> <def></def><kwa>then</kwa><br />
<def>         offset</def><sym>:=</sym><def>pts</def><sym>[</sym><def>iPt</def><sym>,</sym><def>dimx</def><sym>];</sym><br />
<def></def>   <kwa>end</kwa><def></def><sym>;</sym><br />
<def><br />
   Ainstance</def><sym>.</sym><def>m_offset</def> <sym>:=</sym> <def>offset</def><sym>;</sym><br />
<def>   Ainstance</def><sym>.</sym><def>m_vec</def> <sym>:=</sym> <def></def><kwd>toBitVector</kwd><def></def><sym>(</sym><def>pts</def><sym>);</sym><br />
<def>   shifttox0</def><sym>:=</sym><def>xMax</def> <sym>-</sym> <def>xMin</def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>function</kwa> <def></def><kwd>badregion</kwd><def></def><sym>(</sym><def></def><kwa>var</kwa> <def>to_fill</def><sym>:</sym><def>bitvec</def><sym>;</sym><def>rnew</def><sym>:</sym><def>bitvec</def><sym>):</sym><def></def><kwb>boolean</kwb><def></def><sym>;</sym><br />
<def></def><br />
<kwa>var</kwa> <def>region</def><sym>,</sym><def>even_region</def><sym>,</sym><def>odd_region</def><sym>:</sym><def>bitvec</def><sym>;</sym><br />
<def>    cell_count</def><sym>:</sym><def></def><kwb>cardinal</kwb><def></def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def></def>   <com>{Grow empty region, until it doesn't change any more.}</com><def></def><br />
   <kwa>repeat</kwa><br />
<def>      region</def><sym>:=</sym><def>rnew</def><sym>;</sym><br />
<def>      even_region</def><sym>:=</sym><def>region</def><sym>*(</sym><def>ROW_0_MASK</def><sym>*([</sym><def></def><num>0</num><def></def><sym>.</sym><def></def><num>.31</num><def></def><sym>]-</sym><def>L_EDGE_MASK</def><sym>));</sym><br />
<def>      odd_region</def><sym>:=</sym><def>region</def><sym>*(</sym><def>ROW_1_MASK</def><sym>*([</sym><def></def><num>0</num><def></def><sym>.</sym><def></def><num>.31</num><def></def><sym>]-</sym><def>R_EDGE_MASK</def><sym>));</sym><br />
<def><br />
      rnew</def><sym>:=</sym><def>to_fill</def><sym>*(</sym><def>rnew</def><br />
                    <com>{simple grow up/down}</com><def></def><br />
                    <sym>+</sym><def></def><kwd>bitvec</kwd><def></def><sym>(</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>region</def><sym>)</sym> <def></def><kwa>shr</kwa> <def>N_COL</def><sym>)</sym><br />
<def></def>                    <sym>+</sym><def></def><kwd>bitvec</kwd><def></def><sym>(</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>region</def><sym>)</sym> <def></def><kwa>shl</kwa> <def>N_COL</def><sym>)</sym><br />
<def></def>                    <com>{grow right/left}</com><def></def><br />
                    <sym>+</sym><def></def><kwd>bitvec</kwd><def></def><sym>(</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>region</def><sym>)</sym> <def></def><kwa>and not</kwa> <def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>L_EDGE_MASK</def><sym>)</sym> <def></def><kwa>shr</kwa> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>                    <sym>+</sym><def></def><kwd>bitvec</kwd><def></def><sym>(</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>region</def><sym>)</sym> <def></def><kwa>and not</kwa> <def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>R_EDGE_MASK</def><sym>)</sym> <def></def><kwa>shl</kwa> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>                    <com>{tricky growth}</com><def></def><br />
                    <sym>+</sym><def></def><kwd>bitvec</kwd><def></def><sym>(</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>even_Region</def><sym>)</sym> <def></def><kwa>shr</kwa> <def></def><sym>(</sym><def>N_COL</def><sym>+</sym><def></def><num>1</num><def></def><sym>))</sym><br />
<def></def>                    <sym>+</sym><def></def><kwd>bitvec</kwd><def></def><sym>(</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>even_Region</def><sym>)</sym> <def></def><kwa>shl</kwa> <def></def><sym>(</sym><def>N_COL</def><sym>-</sym><def></def><num>1</num><def></def><sym>))</sym><br />
<def></def>                    <sym>+</sym><def></def><kwd>bitvec</kwd><def></def><sym>(</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>odd_Region</def><sym>)</sym> <def></def><kwa>shr</kwa> <def></def><sym>(</sym><def>N_COL</def><sym>-</sym><def></def><num>1</num><def></def><sym>))</sym><br />
<def></def>                    <sym>+</sym><def></def><kwd>bitvec</kwd><def></def><sym>(</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>odd_Region</def><sym>)</sym> <def></def><kwa>shl</kwa> <def></def><sym>(</sym><def>N_COL</def><sym>+</sym><def></def><num>1</num><def></def><sym>))</sym><br />
<def></def>                    <sym>);</sym><br />
<def></def>   <kwa>until</kwa> <def></def><sym>(</sym><def>rnew</def><sym>=</sym><def>to_fill</def><sym>)</sym> <def></def><kwa>or</kwa> <def></def><sym>(</sym><def>rnew</def><sym>=</sym><def>region</def><sym>);</sym><br />
<def></def><br />
   <com>{Subtract empty region from board.}</com><def><br />
   to_fill</def><sym>:=</sym><def>to_fill</def><sym>-</sym><def>rnew</def><sym>;</sym><br />
<def><br />
   cell_count</def><sym>:=</sym><def></def><kwd>count_ones</kwd><def></def><sym>(</sym><def>to_fill</def><sym>);</sym><br />
<def></def>   <com>{Optimize 'cell_count mod 5&lt;&gt;0' by hand...}</com><def><br />
   badregion</def><sym>:=</sym><def>cell_count</def><sym>&lt;&gt;((</sym><def>cell_count</def><sym>*</sym><def></def><num>$cccd</num><def></def><sym>)</sym> <def></def><kwa>shr</kwa> <def></def><num>18</num><def></def><sym>)*</sym><def></def><num>5</num><def></def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>function</kwa> <def></def><kwd>has_bad_islands_single</kwd><def></def><sym>(</sym><def>boardVec</def><sym>:</sym><def>bitvec</def><sym>;</sym><def>row</def><sym>:</sym><def></def><kwb>longint</kwb><def></def><sym>):</sym><def></def><kwb>boolean</kwb><def></def><sym>;</sym><br />
<def></def><br />
<kwa>var</kwa> <def>tofill</def><sym>,</sym><def>startregion</def><sym>,</sym><def>bmask</def><sym>:</sym><def>bitvec</def><sym>;</sym><br />
<def>    isodd</def><sym>:</sym><def></def><kwb>boolean</kwb><def></def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def>   tofill</def><sym>:=[</sym><def></def><num>0</num><def></def><sym>.</sym><def></def><num>.31</num><def></def><sym>]-</sym><def>boardvec</def><sym>;</sym><br />
<def>   isOdd</def><sym>:=</sym><def>row</def> <kwa>and</kwa> <def></def><num>1</num><def></def><sym>&lt;&gt;</sym><def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>   <kwa>if</kwa> <def>isOdd</def> <kwa>then</kwa><br />
<def></def>     <kwa>begin</kwa><br />
<def></def>       <kwd>dec</kwd><def></def><sym>(</sym><def>row</def><sym>);</sym><br />
<def>       toFill</def><sym>:=</sym><def></def><kwd>bitvec</kwd><def></def><sym>(</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>tofill</def><sym>)</sym> <def></def><kwa>shl</kwa> <def>N_COL</def><sym>);</sym> <def></def><com>{shift to even aligned}</com><def><br />
       toFill</def><sym>:=</sym> <def>tofill</def> <sym>+</sym> <def>TOP_ROW</def><sym>;</sym><br />
<def></def>     <kwa>end</kwa><def></def><sym>;</sym><br />
<def><br />
   startRegion</def> <sym>:=</sym> <def>TOP_ROW</def><sym>;</sym><br />
<def>   bMask</def> <sym>:=</sym> <def>BOARD_MASK</def><sym>;</sym> <def></def><com>{all but the first two bits}</com><def></def><br />
   <kwa>if</kwa> <def>row</def><sym>&gt;=</sym><def></def><num>4</num> <def></def><kwa>then</kwa><br />
<def></def>      <kwb>cardinal</kwb><def></def><sym>(</sym><def>bMask</def><sym>):=</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>bmask</def><sym>)</sym> <def></def><kwa>shr</kwa> <def></def><sym>((</sym><def>row</def><sym>-</sym><def></def><num>4</num><def></def><sym>)*</sym><def>N_COL</def><sym>)</sym><br />
<def></def>   <kwa>else if</kwa> <def>isOdd</def> <kwa>or</kwa> <def></def><sym>(</sym><def>row</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>)</sym> <def></def><kwa>then</kwa><br />
<def>      startRegion</def> <sym>:=</sym> <def>LAST_ROW</def><sym>;</sym><br />
<def><br />
   toFill</def><sym>:=</sym><def>tofill</def><sym>*</sym><def>bMask</def><sym>;</sym><br />
<def>   startRegion</def><sym>:=</sym><def>startregion</def><sym>*</sym><def>toFill</def><sym>;</sym><br />
<def><br />
   has_bad_islands_single</def><sym>:=</sym><def></def><kwb>true</kwb><def></def><sym>;</sym><br />
<def></def>   <kwa>while</kwa> <def>toFill</def><sym>&lt;&gt;[]</sym> <def></def><kwa>do</kwa><br />
<def></def>     <kwa>begin</kwa><br />
<def></def>       <kwa>if</kwa> <def></def><kwd>badRegion</kwd><def></def><sym>(</sym><def>toFill</def><sym>,</sym> <def>startRegion</def><sym>)</sym> <def></def><kwa>then</kwa><br />
<def>         exit</def><sym>;</sym><br />
<def>       startRegion</def><sym>:=[</sym><def></def><kwd>first_set_bit</kwd><def></def><sym>(</sym><def>toFill</def><sym>)];</sym><br />
<def></def>     <kwa>end</kwa><def></def><sym>;</sym><br />
<def>   has_bad_islands_single</def><sym>:=</sym><def></def><kwb>false</kwb><def></def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<br />
<kwa>procedure</kwa> <def>piece</def><sym>.</sym><def></def><kwd>set_ok_positions</kwd><def></def><sym>(</sym><def>isOdd</def><sym>:</sym><def>parity</def><sym>;</sym><def>w</def><sym>,</sym><def>h</def><sym>:</sym><def></def><kwb>longint</kwb><def></def><sym>);</sym><br />
<def></def><br />
<kwa>var</kwa> <def>x</def><sym>,</sym><def>y</def><sym>,</sym><def>xpos</def><sym>,</sym><def>pos</def><sym>:</sym><def></def><kwb>byte</kwb><def></def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def>   pos</def><sym>:=</sym><def></def><kwb>byte</kwb><def></def><sym>(</sym><def>isodd</def><sym>)*</sym><def>N_COL</def><sym>;</sym><br />
<def></def>   <kwa>with</kwa> <def>m_instance</def><sym>[</sym><def>isOdd</def><sym>]</sym> <def></def><kwa>do</kwa><br />
<def></def>     <kwa>begin</kwa><br />
<def>       m_allowed</def><sym>:=[];</sym><br />
<def>       y</def><sym>:=</sym><def></def><kwb>byte</kwb><def></def><sym>(</sym><def>isOdd</def><sym>);</sym><br />
<def></def>       <kwa>while</kwa> <def>y</def><sym>&lt;</sym><def>N_ROW</def><sym>-</sym><def>h</def> <kwa>do</kwa><br />
<def></def>         <kwa>begin</kwa><br />
<def></def>           <kwa>if</kwa> <def>m_offset</def><sym>&lt;&gt;</sym><def></def><num>0</num> <def></def><kwa>then</kwa><br />
<def></def>             <kwd>inc</kwd><def></def><sym>(</sym><def>pos</def><sym>,</sym><def>m_offset</def><sym>);</sym><br />
<def></def>           <kwa>for</kwa> <def>xPos</def><sym>:=</sym><def></def><num>0</num> <def></def><kwa>to</kwa> <def>N_COL</def><sym>-</sym><def></def><num>1</num><def></def><sym>-</sym><def>m_offset</def> <kwa>do</kwa><br />
<def></def>             <kwa>begin</kwa><br />
<def></def>               <com>{check if the new position is on the board}</com><def></def><br />
               <kwa>if</kwa> <def></def><sym>(</sym><def>xPos</def><sym>&lt;</sym><def>N_COL</def><sym>-</sym><def>w</def><sym>)</sym> <def></def><kwa>and not</kwa> <def></def><kwd>has_bad_islands_single</kwd><def></def><sym>(</sym><def></def><kwd>bitvec</kwd><def></def><sym>(</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>m_vec</def><sym>)</sym> <def></def><kwa>shl</kwa> <def>xPos</def><sym>),</sym><def>y</def><sym>)</sym> <def></def><kwa>then</kwa><br />
<def></def>                 <kwa>begin</kwa><br />
<def></def>                   <com>{position is allowed}</com><def></def><br />
                   <kwd>include</kwd><def></def><sym>(</sym><def>m_allowed</def><sym>,</sym><def>pos</def><sym>);</sym><br />
<def></def>                 <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>               <kwd>inc</kwd><def></def><sym>(</sym><def>pos</def><sym>);</sym><br />
<def></def>             <kwa>end</kwa><def></def><sym>;</sym><br />
<def>           y</def><sym>:=</sym><def>y</def><sym>+</sym><def></def><num>2</num><def></def><sym>;</sym><br />
<def></def>           <com>{Skip row with wrong parity:}</com><def></def><br />
           <kwd>inc</kwd><def></def><sym>(</sym><def>pos</def><sym>,</sym><def>N_COL</def><sym>);</sym><br />
<def></def>         <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>   <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def></def><kwd>gen_orientation</kwd><def></def><sym>(</sym><def>vec</def><sym>:</sym><def>bitvec</def><sym>;</sym><def>iOrient</def><sym>:</sym><def></def><kwb>cardinal</kwb><def></def><sym>;</sym><def></def><kwa>var</kwa> <def>target</def><sym>:</sym><def>Piece</def><sym>);</sym><br />
<def></def><br />
<kwa>var</kwa> <def>pts</def><sym>:</sym><def>Tpts</def><sym>;</sym><br />
<def>    x</def><sym>,</sym><def>y</def><sym>,</sym><def>ymin</def><sym>,</sym><def>ymax</def><sym>,</sym><def>h</def><sym>,</sym><def>w</def><sym>:</sym><def>shortint</def><sym>;</sym><br />
<def>    rot</def><sym>,</sym><def>iPt</def><sym>:</sym><def></def><kwb>byte</kwb><def></def><sym>;</sym><br />
<def>    flip</def><sym>:</sym><def></def><kwb>boolean</kwb><def></def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def></def>   <com>{get (x,y) coordinates}</com><def></def><br />
   <kwd>setCoordList</kwd><def></def><sym>(</sym><def>vec</def><sym>,</sym> <def>pts</def><sym>);</sym><br />
<def><br />
   rot</def> <sym>:=</sym> <def>iOrient</def> <kwa>mod</kwa> <def></def><num>6</num><def></def><sym>;</sym><br />
<def>   flip</def> <sym>:=</sym> <def>iOrient</def> <sym>&gt;=</sym> <def></def><num>6</num><def></def><sym>;</sym><br />
<def></def>   <kwa>if</kwa> <def>flip</def> <kwa>then</kwa><br />
<def></def>     <kwa>for</kwa> <def>iPt</def><sym>:=</sym><def></def><num>0</num> <def></def><kwa>to</kwa> <def>N_ELEM</def><sym>-</sym><def></def><num>1</num> <def></def><kwa>do</kwa><br />
<def>       pts</def><sym>[</sym><def>iPt</def><sym>,</sym><def>dimy</def><sym>]:=-</sym><def>pts</def><sym>[</sym><def>iPt</def><sym>,</sym><def>dimy</def><sym>];</sym><br />
<def></def><br />
   <com>{rotate as necessary}</com><def></def><br />
   <kwa>while</kwa> <def>rot</def><sym>&gt;</sym><def></def><num>0</num> <def></def><kwa>do</kwa><br />
<def></def>     <kwa>begin</kwa><br />
<def></def>       <kwa>for</kwa> <def>iPt</def><sym>:=</sym><def></def><num>0</num> <def></def><kwa>to</kwa> <def>N_ELEM</def><sym>-</sym><def></def><num>1</num> <def></def><kwa>do</kwa><br />
<def></def>         <kwa>begin</kwa><br />
<def>           x</def><sym>:=</sym><def>pts</def><sym>[</sym><def>iPt</def><sym>,</sym><def>dimx</def><sym>];</sym><br />
<def>           y</def><sym>:=</sym><def>pts</def><sym>[</sym><def>iPt</def><sym>,</sym><def>dimy</def><sym>];</sym><br />
<def>           pts</def><sym>[</sym><def>iPt</def><sym>,</sym><def>dimx</def><sym>]:=</sym><def></def><kwd>floor</kwd><def></def><sym>(</sym><def></def><num>2</num><def></def><sym>*</sym><def>x</def><sym>-</sym><def></def><num>3</num><def></def><sym>*</sym><def>y</def><sym>+</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>4</num><def></def><sym>);</sym><br />
<def>           pts</def><sym>[</sym><def>iPt</def><sym>,</sym><def>dimy</def><sym>]:=</sym><def></def><kwd>floor</kwd><def></def><sym>(</sym><def></def><num>2</num><def></def><sym>*</sym><def>x</def><sym>+</sym><def>y</def><sym>+</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>2</num><def></def><sym>);</sym><br />
<def></def>         <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>      <kwd>dec</kwd><def></def><sym>(</sym><def>rot</def><sym>);</sym><br />
<def></def>   <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
   <com>{determine vertical shift}</com><def><br />
   yMin</def> <sym>:=</sym> <def>pts</def><sym>[</sym><def></def><num>0</num><def></def><sym>,</sym><def>dimy</def><sym>];</sym><br />
<def>   yMax</def> <sym>:=</sym> <def>yMin</def><sym>;</sym><br />
<def></def>   <kwa>for</kwa> <def>iPt</def><sym>:=</sym> <def></def><num>1</num> <def></def><kwa>to</kwa> <def>N_ELEM</def><sym>-</sym><def></def><num>1</num> <def></def><kwa>do</kwa><br />
<def></def>     <kwa>begin</kwa><br />
<def>       y</def> <sym>:=</sym> <def>pts</def><sym>[</sym><def>iPt</def><sym>,</sym><def>dimy</def><sym>];</sym><br />
<def></def><br />
       <kwa>if</kwa> <def>y</def> <sym>&lt;</sym> <def>yMin</def> <kwa>then</kwa><br />
<def>         yMin</def> <sym>:=</sym> <def>y</def><br />
       <kwa>else if</kwa> <def>y</def> <sym>&gt;</sym> <def>yMax</def> <kwa>then</kwa><br />
<def>         yMax</def> <sym>:=</sym> <def>y</def><sym>;</sym><br />
<def></def>     <kwa>end</kwa><def></def><sym>;</sym><br />
<def>   h</def><sym>:=</sym><def>yMax</def><sym>-</sym><def>yMin</def><sym>;</sym><br />
<def></def><br />
   <kwd>shiftUpLines</kwd><def></def><sym>(</sym><def>pts</def><sym>,</sym> <def>yMin</def><sym>);</sym><br />
<def>   w</def> <sym>:=</sym> <def></def><kwd>shiftToX0</kwd><def></def><sym>(</sym><def>pts</def><sym>,</sym> <def>target</def><sym>.</sym><def>m_instance</def><sym>[</sym><def>EVEN</def><sym>],</sym> <def></def><num>0</num><def></def><sym>);</sym><br />
<def>   target</def><sym>.</sym><def></def><kwd>set_ok_positions</kwd><def></def><sym>(</sym><def>EVEN</def><sym>,</sym> <def>w</def><sym>,</sym> <def>h</def><sym>);</sym><br />
<def></def>   <kwb>cardinal</kwb><def></def><sym>(</sym><def>target</def><sym>.</sym><def>m_instance</def><sym>[</sym><def>EVEN</def><sym>].</sym><def>m_vec</def><sym>) :=</sym> <def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>target</def><sym>.</sym><def>m_instance</def><sym>[</sym><def>EVEN</def><sym>].</sym><def>m_vec</def><sym>)</sym> <def></def><kwa>shr</kwa> <def>target</def><sym>.</sym><def>m_instance</def><sym>[</sym><def>EVEN</def><sym>].</sym><def>m_offset</def><sym>;</sym><br />
<def></def><br />
   <com>{shift down one line}</com><def></def><br />
   <kwd>shiftUpLines</kwd><def></def><sym>(</sym><def>pts</def><sym>, -</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def>   w</def> <sym>:=</sym> <def></def><kwd>shiftToX0</kwd><def></def><sym>(</sym><def>pts</def><sym>,</sym> <def>target</def><sym>.</sym><def>m_instance</def><sym>[</sym><def>ODD</def><sym>],</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>   <com>{shift the bitmask back one line}</com><def></def><br />
   <kwb>cardinal</kwb><def></def><sym>(</sym><def>target</def><sym>.</sym><def>m_instance</def><sym>[</sym><def>ODD</def><sym>].</sym><def>m_vec</def><sym>) :=</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>target</def><sym>.</sym><def>m_instance</def><sym>[</sym><def>ODD</def><sym>].</sym><def>m_vec</def><sym>)</sym> <def></def><kwa>shr</kwa> <def>N_COL</def><sym>;</sym><br />
<def>   target</def><sym>.</sym><def></def><kwd>set_ok_positions</kwd><def></def><sym>(</sym><def>ODD</def><sym>,</sym> <def>w</def><sym>,</sym> <def>h</def><sym>);</sym><br />
<def></def>   <kwb>cardinal</kwb><def></def><sym>(</sym><def>target</def><sym>.</sym><def>m_instance</def><sym>[</sym><def>ODD</def><sym>].</sym><def>m_vec</def><sym>):=</sym> <def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>target</def><sym>.</sym><def>m_instance</def><sym>[</sym><def>ODD</def><sym>].</sym><def>m_vec</def><sym>)</sym> <def></def><kwa>shr</kwa> <def>target</def><sym>.</sym><def>m_instance</def><sym>[</sym><def>ODD</def><sym>].</sym><def>m_offset</def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>function</kwa> <def></def><kwd>getPiece</kwd><def></def><sym>(</sym><def>iPiece</def><sym>,</sym><def>iOrient</def><sym>:</sym><def></def><kwb>cardinal</kwb><def></def><sym>;</sym><def>iParity</def><sym>:</sym><def>parity</def><sym>):</sym><def>instance</def><sym>;</sym><def></def><kwa>inline</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def>  getpiece</def><sym>:=</sym><def>s_basePiece</def><sym>[</sym><def>iPiece</def><sym>][</sym><def>iOrient</def><sym>].</sym><def>m_instance</def><sym>[</sym><def>iParity</def><sym>];</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def>gen_all_orientations</def><sym>;</sym><br />
<def></def><br />
<kwa>var</kwa> <def>ipiece</def><sym>:</sym><def>piecenr</def><sym>;</sym><br />
<def>    iorient</def><sym>:</sym><def>orientation</def><sym>;</sym><br />
<def>    irow</def><sym>,</sym><def>icol</def><sym>:</sym><def></def><kwb>byte</kwb><def></def><sym>;</sym><br />
<def>    refpiece</def><sym>:</sym><def>bitvec</def><sym>;</sym><br />
<def>    n</def><sym>,</sym><def>npiece</def><sym>:</sym><def></def><kwb>byte</kwb><def></def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def></def>   <kwa>for</kwa> <def>iPiece</def><sym>:=</sym><def></def><kwd>low</kwd><def></def><sym>(</sym><def>ipiece</def><sym>)</sym> <def></def><kwa>to</kwa> <def></def><kwd>high</kwd><def></def><sym>(</sym><def>ipiece</def><sym>)</sym> <def></def><kwa>do</kwa><br />
<def></def>     <kwa>begin</kwa><br />
<def>       refPiece</def><sym>:=</sym><def>BaseVecs</def><sym>[</sym><def>iPiece</def><sym>];</sym><br />
<def></def>       <kwa>for</kwa> <def>iOrient</def><sym>:=</sym><def></def><kwd>low</kwd><def></def><sym>(</sym><def>iorient</def><sym>)</sym> <def></def><kwa>to</kwa> <def></def><kwd>high</kwd><def></def><sym>(</sym><def>iorient</def><sym>)</sym> <def></def><kwa>do</kwa><br />
<def></def>         <kwa>begin</kwa><br />
<def></def>           <kwd>gen_orientation</kwd><def></def><sym>(</sym><def>refPiece</def><sym>,</sym> <def>iOrient</def><sym>,</sym> <def>s_basePiece</def><sym>[</sym><def>iPiece</def><sym>,</sym><def>iOrient</def><sym>]);</sym><br />
<def></def>           <kwa>with</kwa> <def>s_basePiece</def><sym>[</sym><def>iPiece</def><sym>,</sym><def>iOrient</def><sym>]</sym> <def></def><kwa>do</kwa><br />
<def></def>             <kwa>begin</kwa><br />
<def></def>               <kwa>if</kwa> <def></def><sym>(</sym><def>iPiece</def><sym>=</sym><def>SKIP_PIECE</def><sym>)</sym> <def></def><kwa>and</kwa> <def></def><sym>(</sym><def>iOrient</def> <kwa>in</kwa> <def></def><sym>[</sym><def></def><num>3</num><def></def><sym>.</sym><def></def><num>.5</num><def></def><sym>,</sym><def></def><num>9</num><def></def><sym>.</sym><def></def><num>.11</num><def></def><sym>])</sym> <def></def><kwa>then</kwa><br />
<def></def>                 <kwa>begin</kwa><br />
<def>                   m_instance</def><sym>[</sym><def>odd</def><sym>].</sym><def>m_allowed</def> <sym>:= [];</sym><br />
<def>                   m_instance</def><sym>[</sym><def>even</def><sym>].</sym><def>m_allowed</def> <sym>:= [];</sym><br />
<def></def>                 <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>             <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>         <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>     <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
   <kwa>for</kwa> <def>iPiece</def><sym>:=</sym><def></def><kwd>low</kwd><def></def><sym>(</sym><def>ipiece</def><sym>)</sym> <def></def><kwa>to</kwa> <def></def><kwd>high</kwd><def></def><sym>(</sym><def>ipiece</def><sym>)</sym> <def></def><kwa>do</kwa><br />
<def></def>     <kwa>begin</kwa><br />
<def></def>      <kwa>for</kwa> <def>iOrient</def><sym>:=</sym><def></def><kwd>low</kwd><def></def><sym>(</sym><def>iorient</def><sym>)</sym> <def></def><kwa>to</kwa> <def></def><kwd>high</kwd><def></def><sym>(</sym><def>iorient</def><sym>)</sym> <def></def><kwa>do</kwa><br />
<def></def>        <kwa>begin</kwa><br />
<def>         n</def><sym>:=</sym><def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>         <kwa>for</kwa> <def>iRow</def><sym>:=</sym><def></def><num>0</num> <def></def><kwa>to</kwa> <def>N_ROW</def><sym>-</sym><def></def><num>1</num> <def></def><kwa>do</kwa><br />
<def></def>           <kwa>begin</kwa><br />
<def></def>            <kwa>with</kwa> <def></def><kwd>getPiece</kwd><def></def><sym>(</sym><def>iPiece</def><sym>,</sym> <def>iOrient</def><sym>,</sym> <def></def><kwd>parity</kwd><def></def><sym>(</sym><def>iRow</def> <kwa>and</kwa> <def></def><num>1</num><def></def><sym>))</sym> <def></def><kwa>do</kwa><br />
<def></def>              <kwa>for</kwa> <def>iCol</def><sym>:=</sym><def></def><num>0</num> <def></def><kwa>to</kwa> <def>N_COL</def><sym>-</sym><def></def><num>1</num> <def></def><kwa>do</kwa><br />
<def></def>                <kwa>begin</kwa><br />
<def></def>                  <kwa>if</kwa> <def>n</def> <kwa>in</kwa> <def>m_allowed</def> <kwa>then</kwa><br />
<def></def>                    <kwa>begin</kwa><br />
<def>                      nPiece</def><sym>:=</sym><def>g_okPieces</def><sym>[</sym><def>iRow</def><sym>,</sym><def>iCol</def><sym>].</sym><def>nPieces</def><sym>[</sym><def>iPiece</def><sym>];</sym><br />
<def>                      g_okPieces</def><sym>[</sym><def>iRow</def><sym>,</sym><def>iCol</def><sym>].</sym><def>pieceVec</def><sym>[</sym><def>iPiece</def><sym>,</sym><def>nPiece</def><sym>]:=</sym><def></def><kwd>bitvec</kwd><def></def><sym>(</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>m_vec</def><sym>)</sym> <def></def><kwa>shl</kwa> <def>iCol</def><sym>);</sym><br />
<def></def>                      <kwd>inc</kwd><def></def><sym>(</sym><def>g_okPieces</def><sym>[</sym><def>iRow</def><sym>,</sym><def>iCol</def><sym>].</sym><def>nPieces</def><sym>[</sym><def>iPiece</def><sym>]);</sym><br />
<def></def>                    <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>                  <kwd>inc</kwd><def></def><sym>(</sym><def>n</def><sym>);</sym><br />
<def></def>                <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>          <kwa>end</kwa><br />
<def></def>      <kwa>end</kwa><br />
<def></def>   <kwa>end</kwa><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def>init_board</def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def>  m_cursoln</def><sym>.</sym><def></def><kwd>init</kwd><def></def><sym>(</sym><def>NO_PIECE</def><sym>);</sym><br />
<def>  m_minsoln</def><sym>.</sym><def></def><kwd>init</kwd><def></def><sym>(</sym><def>NO_PIECE</def><sym>);</sym><br />
<def>  m_maxsoln</def><sym>.</sym><def></def><kwd>init</kwd><def></def><sym>(</sym><def>NO_PIECE</def><sym>);</sym><br />
<def>  m_nsoln</def><sym>:=</sym><def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>const</kwa> <def>g_firstRegion</def><sym>:</sym><def></def><kwa>array</kwa><def></def><sym>[</sym><def></def><num>0</num><def></def><sym>.</sym><def></def><num>.31</num><def></def><sym>]</sym> <def></def><kwa>of</kwa> <def>bitvec</def><sym>=(</sym><br />
<def></def>        <sym>[],      [</sym><def></def><num>0</num><def></def><sym>],      [</sym><def></def><num>1</num><def></def><sym>],       [</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>1</num><def></def><sym>],</sym><br />
<def></def>        <sym>[</sym><def></def><num>2</num><def></def><sym>],     [</sym><def></def><num>0</num><def></def><sym>],      [</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>2</num><def></def><sym>],     [</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>2</num><def></def><sym>],</sym><br />
<def></def>        <sym>[</sym><def></def><num>3</num><def></def><sym>],     [</sym><def></def><num>0</num><def></def><sym>],      [</sym><def></def><num>1</num><def></def><sym>],       [</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>1</num><def></def><sym>],</sym><br />
<def></def>        <sym>[</sym><def></def><num>2</num><def></def><sym>,</sym><def></def><num>3</num><def></def><sym>],   [</sym><def></def><num>0</num><def></def><sym>],      [</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>2</num><def></def><sym>,</sym><def></def><num>3</num><def></def><sym>],   [</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>2</num><def></def><sym>,</sym><def></def><num>3</num><def></def><sym>],</sym><br />
<def></def>        <sym>[</sym><def></def><num>4</num><def></def><sym>],     [</sym><def></def><num>0</num><def></def><sym>],      [</sym><def></def><num>1</num><def></def><sym>],       [</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>1</num><def></def><sym>],</sym><br />
<def></def>        <sym>[</sym><def></def><num>2</num><def></def><sym>],     [</sym><def></def><num>0</num><def></def><sym>],      [</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>2</num><def></def><sym>],     [</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>2</num><def></def><sym>],</sym><br />
<def></def>        <sym>[</sym><def></def><num>3</num><def></def><sym>,</sym><def></def><num>4</num><def></def><sym>],   [</sym><def></def><num>0</num><def></def><sym>],      [</sym><def></def><num>1</num><def></def><sym>],       [</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>2</num><def></def><sym>],</sym><br />
<def></def>        <sym>[</sym><def></def><num>2</num><def></def><sym>,</sym><def></def><num>3</num><def></def><sym>,</sym><def></def><num>4</num><def></def><sym>], [</sym><def></def><num>0</num><def></def><sym>],      [</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>2</num><def></def><sym>,</sym><def></def><num>3</num><def></def><sym>,</sym><def></def><num>4</num><def></def><sym>], [</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>2</num><def></def><sym>,</sym><def></def><num>3</num><def></def><sym>,</sym><def></def><num>4</num><def></def><sym>]</sym><br />
<def></def><sym>);</sym><br />
<def></def><br />
<kwa>function</kwa> <def></def><kwd>calc_bad_islands</kwd><def></def><sym>(</sym><def>boardVec</def><sym>:</sym><def>bitvec</def><sym>;</sym><def>row</def><sym>:</sym><def></def><kwb>longint</kwb><def></def><sym>):</sym><def>goodbad</def><sym>;</sym><br />
<def></def><br />
<kwa>var</kwa> <def>tofill</def><sym>,</sym><def>boardmask</def><sym>,</sym><def>bottom</def><sym>,</sym><def>startregion</def><sym>:</sym><def>bitvec</def><sym>;</sym><br />
<def>    filled</def><sym>:</sym><def></def><kwb>boolean</kwb><def></def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def>   toFill</def><sym>:=[</sym><def></def><num>0</num><def></def><sym>.</sym><def></def><num>.31</num><def></def><sym>]-</sym><def>boardVec</def><sym>;</sym><br />
<def></def>   <com>{Compensate for odd rows.}</com><def></def><br />
   <kwa>if</kwa> <def>row</def> <kwa>and</kwa> <def></def><num>1</num><def></def><sym>&lt;&gt;</sym><def></def><num>0</num> <def></def><kwa>then</kwa><br />
<def></def>     <kwa>begin</kwa><br />
<def></def>       <kwd>dec</kwd><def></def><sym>(</sym><def>row</def><sym>);</sym><br />
<def></def>       <kwb>cardinal</kwb><def></def><sym>(</sym><def>toFill</def><sym>):=</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>tofill</def><sym>)</sym> <def></def><kwa>shl</kwa> <def>N_COL</def><sym>;</sym><br />
<def></def>     <kwa>end</kwa><def></def><sym>;</sym><br />
<def><br />
   boardMask</def> <sym>:=</sym> <def>BOARD_MASK</def><sym>;</sym> <def></def><com>{all but the first two bits}</com><def></def><br />
   <kwa>if</kwa> <def>row</def><sym>&gt;</sym><def></def><num>4</num> <def></def><kwa>then</kwa><br />
<def></def>      <kwb>cardinal</kwb><def></def><sym>(</sym><def>boardMask</def><sym>):=</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>boardmask</def><sym>)</sym> <def></def><kwa>shr</kwa> <def></def><sym>((</sym><def>row</def><sym>-</sym><def></def><num>4</num><def></def><sym>)*</sym><def>N_COL</def><sym>);</sym><br />
<def>   toFill</def><sym>:=</sym><def>tofill</def><sym>*</sym><def>boardMask</def><sym>;</sym><br />
<def></def><br />
   <com>{a little pre-work to speed things up}</com><def><br />
   filled</def><sym>:=</sym><def>toFill</def><sym>*</sym><def>LAST_ROW</def><sym>=</sym><def>LAST_ROW</def><sym>;</sym><br />
<def>   bottom</def><sym>:=</sym><def>LAST_ROW</def><sym>;</sym><br />
<def></def>   <kwa>while</kwa> <def>bottom</def><sym>*</sym><def>toFill</def><sym>=</sym><def>bottom</def> <kwa>do</kwa><br />
<def></def>     <kwa>begin</kwa><br />
<def>       toFill</def><sym>:=</sym><def>tofill</def><sym>-</sym><def>bottom</def><sym>;</sym><br />
<def></def>       <kwb>cardinal</kwb><def></def><sym>(</sym><def>bottom</def><sym>):=</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>bottom</def><sym>)</sym> <def></def><kwa>shr</kwa> <def>N_COL</def><sym>;</sym><br />
<def></def>     <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
   <kwa>if</kwa> <def>filled</def> <kwa>or</kwa> <def></def><sym>(</sym><def>row</def><sym>&lt;</sym><def></def><num>4</num><def></def><sym>)</sym> <def></def><kwa>then</kwa><br />
<def>      startRegion</def> <sym>:=</sym> <def>bottom</def> <sym>*</sym> <def>toFill</def><br />
   <kwa>else</kwa><br />
<def></def>     <kwa>begin</kwa><br />
<def>       startRegion</def> <sym>:=</sym> <def>g_firstRegion</def><sym>[</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>toFill</def><sym>*</sym><def>TOP_ROW</def><sym>)];</sym><br />
<def></def>       <kwa>if</kwa> <def>startRegion</def><sym>=[]</sym> <def></def><kwa>then</kwa><br />
<def></def>          <kwa>begin</kwa><br />
<def>            startRegion</def> <sym>:=</sym> <def></def><kwd>bitvec</kwd><def></def><sym>(</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>toFill</def><sym>)</sym> <def></def><kwa>shr</kwa> <def>N_COL</def><sym>)*</sym><def>TOP_ROW</def><sym>;</sym><br />
<def>            startRegion</def> <sym>:=</sym> <def>g_firstRegion</def><sym>[</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>startRegion</def><sym>)];</sym><br />
<def></def>            <kwb>cardinal</kwb><def></def><sym>(</sym><def>startRegion</def><sym>) :=</sym> <def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>startregion</def><sym>)</sym> <def></def><kwa>shl</kwa> <def>N_COL</def><sym>;</sym><br />
<def></def>          <kwa>end</kwa><def></def><sym>;</sym><br />
<def>        startRegion</def><sym>:=</sym><def>startregion</def><sym>+</sym><def></def><kwd>bitvec</kwd><def></def><sym>(</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>startRegion</def><sym>)</sym> <def></def><kwa>shl</kwa> <def>N_COL</def><sym>)*</sym><def>toFill</def><sym>;</sym><br />
<def></def>     <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
   <kwa>while</kwa> <def>toFill</def><sym>&lt;&gt;[]</sym> <def></def><kwa>do</kwa><br />
<def></def>     <kwa>begin</kwa><br />
<def></def>       <kwa>if</kwa> <def></def><kwd>badRegion</kwd><def></def><sym>(</sym><def>toFill</def><sym>,</sym> <def>startRegion</def><sym>)</sym> <def></def><kwa>then</kwa><br />
<def></def>          <kwa>begin</kwa><br />
<def></def>            <kwa>if</kwa> <def>toFill</def><sym>&lt;&gt;[]</sym> <def></def><kwa>then</kwa><br />
<def>              calc_bad_islands</def><sym>:=</sym><def>ALWAYS_BAD</def><br />
            <kwa>else</kwa><br />
<def>              calc_bad_islands</def><sym>:=</sym><def>BAD</def><sym>;</sym><br />
<def>            exit</def><sym>;</sym><br />
<def></def>          <kwa>end</kwa><def></def><sym>;</sym><br />
<def>       startRegion</def> <sym>:= [</sym><def></def><kwd>first_set_bit</kwd><def></def><sym>(</sym><def>toFill</def><sym>)];</sym><br />
<def></def>     <kwa>end</kwa><def></def><sym>;</sym><br />
<def><br />
   calc_bad_islands</def><sym>:=</sym><def>GOOD</def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<br />
<kwa>function</kwa> <def></def><kwd>has_bad_islands</kwd><def></def><sym>(</sym><def>boardvec</def><sym>:</sym><def>bitvec</def><sym>;</sym><def>row</def><sym>:</sym><def></def><kwb>longint</kwb><def></def><sym>):</sym><def>goodbad</def><sym>;</sym><br />
<def></def><br />
<kwa>var</kwa> <def>last_row</def><sym>:</sym><def>bitvec</def><sym>;</sym><br />
<def>    isodd</def><sym>:</sym><def>parity</def><sym>;</sym><br />
<def>    isclosed</def><sym>:</sym><def>fixed</def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def></def>   <com>{skip over any filled rows}</com><def></def><br />
   <kwa>while</kwa> <def>boardVec</def><sym>*</sym><def>TOP_ROW</def><sym>=</sym><def>TOP_ROW</def> <kwa>do</kwa><br />
<def></def>     <kwa>begin</kwa><br />
<def></def>       <kwb>cardinal</kwb><def></def><sym>(</sym><def>boardVec</def><sym>):=</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>boardvec</def><sym>)</sym> <def></def><kwa>shr</kwa> <def>N_COL</def><sym>;</sym><br />
<def></def>       <kwd>inc</kwd><def></def><sym>(</sym><def>row</def><sym>);</sym><br />
<def></def>     <kwa>end</kwa><def></def><sym>;</sym><br />
<def><br />
   has_bad_islands</def><sym>:=</sym><def>bad</def><sym>;</sym><br />
<def></def>   <kwa>with</kwa> <def>g_islandInfo</def><sym>[</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>boardvec</def><sym>*(</sym><def>TOP_ROW</def><sym>+</sym><def>SECOND_ROW</def><sym>))]</sym> <def></def><kwa>do</kwa><br />
<def></def>     <kwa>begin</kwa><br />
<def>       last_row</def><sym>:=</sym><def></def><kwd>bitvec</kwd><def></def><sym>(</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>boardvec</def><sym>)</sym> <def></def><kwa>shr</kwa> <def></def><sym>(</sym><def></def><num>2</num><def></def><sym>*</sym><def>N_COL</def><sym>))*</sym><def>TOP_ROW</def><sym>;</sym><br />
<def>       isOdd</def><sym>:=</sym><def></def><kwd>parity</kwd><def></def><sym>(</sym><def>row</def> <kwa>and</kwa> <def></def><num>1</num><def></def><sym>);</sym><br />
<def></def><br />
       <kwa>if not</kwa><def></def><sym>(</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>last_row</def><sym>)</sym> <def></def><kwa>in</kwa> <def>alwaysBad</def><sym>[</sym><def></def><kwd>parity</kwd><def></def><sym>(</sym><def>row</def> <kwa>and</kwa> <def></def><num>1</num><def></def><sym>)])</sym> <def></def><kwa>then</kwa><br />
<def></def>         <kwa>if</kwa> <def>boardVec</def><sym>*</sym><def></def><kwd>bitvec</kwd><def></def><sym>(</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>TOP_ROW</def><sym>)</sym> <def></def><kwa>shl</kwa> <def>N_COL</def><sym>*</sym><def></def><num>3</num><def></def><sym>)=[]</sym> <def></def><kwa>then</kwa><br />
<def></def>           <kwa>begin</kwa><br />
<def>             isClosed</def><sym>:=</sym><def></def><kwd>fixed</kwd><def></def><sym>(</sym><def>row</def><sym>&gt;</sym><def></def><num>6</num><def></def><sym>);</sym> <def></def><com>{because we track 3 rows}</com><def></def><br />
               <kwa>if not</kwa><def></def><sym>(</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>last_row</def><sym>)</sym> <def></def><kwa>in</kwa> <def>is_known</def><sym>[</sym><def>isClosed</def><sym>,</sym><def>isOdd</def><sym>])</sym> <def></def><kwa>then</kwa><br />
<def></def>                 <kwa>if</kwa> <def>boardVec</def><sym>&lt;&gt;[]</sym> <def></def><kwa>then</kwa><br />
<def></def>                   <kwa>begin</kwa><br />
<def>                     has_bad_islands</def><sym>:=</sym><def></def><kwd>calc_bad_islands</kwd><def></def><sym>(</sym><def>boardvec</def><sym>,</sym><def>row</def><sym>);</sym><br />
<def></def>                     <kwd>include</kwd><def></def><sym>(</sym><def>is_known</def><sym>[</sym><def>isClosed</def><sym>,</sym><def>isOdd</def><sym>],</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>last_row</def><sym>));</sym><br />
<def></def>                     <kwa>if</kwa> <def>has_bad_islands</def><sym>&lt;&gt;</sym><def>good</def> <kwa>then</kwa><br />
<def></def>                       <kwd>include</kwd><def></def><sym>(</sym><def>is_known</def><sym>[</sym><def>isClosed</def><sym>,</sym><def>isOdd</def><sym>],</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>last_row</def><sym>));</sym><br />
<def></def>                   <kwa>end</kwa><br />
<def></def>                 <kwa>else</kwa><br />
<def>                   has_bad_islands</def><sym>:=</sym><def>good</def><br />
               <kwa>else</kwa><br />
<def></def>                 <kwa>if not</kwa><def></def><sym>(</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>last_row</def><sym>)</sym> <def></def><kwa>in</kwa> <def>has_bad</def><sym>[</sym><def>isClosed</def><sym>,</sym><def>isOdd</def><sym>])</sym> <def></def><kwa>then</kwa><br />
<def>                   has_bad_islands</def><sym>:=</sym><def>good</def><sym>;</sym><br />
<def></def>           <kwa>end</kwa><br />
<def></def>         <kwa>else</kwa><br />
<def>           has_bad_islands</def><sym>:=</sym><def></def><kwd>calc_bad_islands</kwd><def></def><sym>(</sym><def>boardvec</def><sym>,</sym><def>row</def><sym>);</sym><br />
<def></def>     <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>const</kwa> <def>g_flip</def><sym>:</sym><def></def><kwa>array</kwa><def></def><sym>[</sym><def></def><num>0</num><def></def><sym>.</sym><def></def><num>.31</num><def></def><sym>]</sym> <def></def><kwa>of</kwa> <def>bitvec</def><sym>=(</sym><br />
<def></def>        <sym>[],        [</sym><def></def><num>4</num><def></def><sym>],        [</sym><def></def><num>3</num><def></def><sym>],        [</sym><def></def><num>3</num><def></def><sym>,</sym><def></def><num>4</num><def></def><sym>],</sym><br />
<def></def>        <sym>[</sym><def></def><num>2</num><def></def><sym>],       [</sym><def></def><num>2</num><def></def><sym>,</sym><def></def><num>4</num><def></def><sym>],      [</sym><def></def><num>2</num><def></def><sym>,</sym><def></def><num>3</num><def></def><sym>],      [</sym><def></def><num>2</num><def></def><sym>,</sym><def></def><num>3</num><def></def><sym>,</sym><def></def><num>4</num><def></def><sym>],</sym><br />
<def></def>        <sym>[</sym><def></def><num>1</num><def></def><sym>],       [</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>4</num><def></def><sym>],      [</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>3</num><def></def><sym>],      [</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>3</num><def></def><sym>,</sym><def></def><num>4</num><def></def><sym>],</sym><br />
<def></def>        <sym>[</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>2</num><def></def><sym>],     [</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>2</num><def></def><sym>,</sym><def></def><num>4</num><def></def><sym>],    [</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>2</num><def></def><sym>,</sym><def></def><num>3</num><def></def><sym>],    [</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>2</num><def></def><sym>,</sym><def></def><num>3</num><def></def><sym>,</sym><def></def><num>4</num><def></def><sym>],</sym><br />
<def></def>        <sym>[</sym><def></def><num>0</num><def></def><sym>],       [</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>4</num><def></def><sym>],      [</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>3</num><def></def><sym>],      [</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>3</num><def></def><sym>,</sym><def></def><num>4</num><def></def><sym>],</sym><br />
<def></def>        <sym>[</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>2</num><def></def><sym>],     [</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>2</num><def></def><sym>,</sym><def></def><num>4</num><def></def><sym>],    [</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>2</num><def></def><sym>,</sym><def></def><num>3</num><def></def><sym>],    [</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>2</num><def></def><sym>,</sym><def></def><num>3</num><def></def><sym>,</sym><def></def><num>4</num><def></def><sym>],</sym><br />
<def></def>        <sym>[</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>1</num><def></def><sym>],     [</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>4</num><def></def><sym>],    [</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>3</num><def></def><sym>],    [</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>3</num><def></def><sym>,</sym><def></def><num>4</num><def></def><sym>],</sym><br />
<def></def>        <sym>[</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>2</num><def></def><sym>],   [</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>2</num><def></def><sym>,</sym><def></def><num>4</num><def></def><sym>],  [</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>2</num><def></def><sym>,</sym><def></def><num>3</num><def></def><sym>],  [</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>2</num><def></def><sym>,</sym><def></def><num>3</num><def></def><sym>,</sym><def></def><num>4</num><def></def><sym>]</sym><br />
<def></def><sym>);</sym><br />
<def></def><br />
<kwa>function</kwa> <def></def><kwd>flipTwoRows</kwd><def></def><sym>(</sym><def>bits</def><sym>:</sym><def>bitvec</def><sym>):</sym><def>bitvec</def><sym>;</sym><def></def><kwa>inline</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>var</kwa> <def>flipped</def><sym>:</sym><def></def><kwb>cardinal</kwb><def></def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def>   flipped</def><sym>:=</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>g_flip</def><sym>[</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>bits</def><sym>)</sym> <def></def><kwa>shr</kwa> <def>N_COL</def><sym>])</sym> <def></def><kwa>shl</kwa> <def>N_COL</def><sym>;</sym><br />
<def>   fliptworows</def><sym>:=</sym><def></def><kwd>bitvec</kwd><def></def><sym>(</sym><def>flipped</def> <kwa>or</kwa> <def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>g_flip</def><sym>[</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>bits</def><sym>*</sym><def>TOP_ROW</def><sym>)]));</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def></def><kwd>mark_bad</kwd><def></def><sym>(</sym><def></def><kwa>var</kwa> <def>info</def><sym>:</sym><def>IslandInfo</def><sym>;</sym><def>n</def><sym>:</sym><def></def><kwb>byte</kwb><def></def><sym>;</sym><def>eo</def><sym>:</sym><def>parity</def><sym>;</sym><def>always</def><sym>:</sym><def></def><kwb>boolean</kwb><def></def><sym>);</sym><def></def><kwa>inline</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def></def>  <kwa>with</kwa> <def>info</def> <kwa>do</kwa><br />
<def></def>   <kwa>begin</kwa><br />
<def></def>     <kwd>include</kwd><def></def><sym>(</sym><def>has_bad</def><sym>[</sym><def>OPEN</def><sym>,</sym><def>eo</def><sym>],</sym><def>n</def><sym>);</sym><br />
<def></def>     <kwd>include</kwd><def></def><sym>(</sym><def>has_bad</def><sym>[</sym><def>CLOSED</def><sym>,</sym><def>eo</def><sym>],</sym><def>n</def><sym>);</sym><br />
<def></def><br />
     <kwa>if</kwa> <def>always</def> <kwa>then</kwa><br />
<def></def>       <kwd>include</kwd><def></def><sym>(</sym><def>alwaysBad</def><sym>[</sym><def>eo</def><sym>],</sym><def>n</def><sym>);</sym><br />
<def></def>   <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def>calc_always_bad</def><sym>;</sym><br />
<def></def><br />
<kwa>var</kwa> <def>i</def><sym>,</sym><def>iWord</def><sym>:</sym><def></def><kwb>cardinal</kwb><def></def><sym>;</sym><br />
<def>    boardvec</def><sym>:</sym><def>bitvec</def><sym>;</sym><br />
<def>    hasbad</def><sym>:</sym><def>goodbad</def><sym>;</sym><br />
<def>    always</def><sym>:</sym><def></def><kwb>boolean</kwb><def></def><sym>;</sym><br />
<def>    flipped</def><sym>:^</sym><def>islandinfo</def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def></def>   <kwa>for</kwa> <def>iWord</def><sym>:=</sym><def></def><num>1</num> <def></def><kwa>to</kwa> <def>MAX_ISLAND_OFFSET</def><sym>-</sym><def></def><num>1</num> <def></def><kwa>do</kwa><br />
<def></def>     <kwa>begin</kwa><br />
<def>      flipped</def> <sym>:= @</sym><def>g_islandInfo</def><sym>[</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def></def><kwd>flipTwoRows</kwd><def></def><sym>(</sym><def></def><kwd>bitvec</kwd><def></def><sym>(</sym><def>iWord</def><sym>)))];</sym><br />
<def></def>      <kwa>for</kwa> <def>i</def><sym>:=</sym><def></def><num>0</num> <def></def><kwa>to</kwa> <def></def><num>31</num> <def></def><kwa>do</kwa><br />
<def></def>        <kwa>begin</kwa><br />
<def>          boardvec</def><sym>:=</sym><def></def><kwd>bitvec</kwd><def></def><sym>((</sym><def>i</def> <kwa>shl</kwa> <def></def><sym>(</sym><def></def><num>2</num><def></def><sym>*</sym><def>N_COL</def><sym>))</sym> <def></def><kwa>or</kwa> <def>iWord</def><sym>);</sym><br />
<def></def>          <kwa>if not</kwa><def></def><sym>(</sym><def>i</def> <kwa>in</kwa> <def>g_islandInfo</def><sym>[</sym><def>iWord</def><sym>].</sym><def>is_known</def><sym>[</sym><def>OPEN</def><sym>,</sym><def>EVEN</def><sym>])</sym> <def></def><kwa>then</kwa><br />
<def></def>            <kwa>begin</kwa><br />
<def>              hasBad</def><sym>:=</sym><def></def><kwd>calc_bad_islands</kwd><def></def><sym>(</sym><def>boardvec</def><sym>,</sym><def></def><num>0</num><def></def><sym>);</sym><br />
<def></def>              <kwa>if</kwa> <def>hasBad</def><sym>&lt;&gt;</sym><def>good</def> <kwa>then</kwa><br />
<def></def>                <kwa>begin</kwa><br />
<def>                 always</def><sym>:=</sym><def>hasBad</def><sym>=</sym><def>ALWAYS_BAD</def><sym>;</sym><br />
<def></def>                 <kwd>mark_bad</kwd><def></def><sym>(</sym><def>g_islandInfo</def><sym>[</sym><def>iWord</def><sym>],</sym> <def>i</def><sym>,</sym> <def>EVEN</def><sym>,</sym> <def>always</def><sym>);</sym><br />
<def></def>                 <kwd>mark_bad</kwd><def></def><sym>(</sym><def>flipped</def><sym>^,</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>g_flip</def><sym>[</sym><def>i</def><sym>]),</sym> <def>ODD</def><sym>,</sym> <def>always</def><sym>);</sym><br />
<def></def>              <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>            <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>      <kwa>end</kwa><def></def><sym>;</sym><br />
<def>      flipped</def><sym>^.</sym><def>is_known</def><sym>[</sym><def>OPEN</def><sym>,</sym><def>odd</def><sym>]:=[</sym><def></def><num>0</num><def></def><sym>.</sym><def></def><num>.31</num><def></def><sym>];</sym><br />
<def>      g_islandInfo</def><sym>[</sym><def>iWord</def><sym>].</sym><def>is_known</def><sym>[</sym><def>OPEN</def><sym>,</sym><def>even</def><sym>]:=[</sym><def></def><num>0</num><def></def><sym>.</sym><def></def><num>.31</num><def></def><sym>];</sym><br />
<def></def>   <kwa>end</kwa><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def></def><kwd>record_solution</kwd><def></def><sym>(</sym><def></def><kwa>var</kwa> <def>s</def><sym>:</sym><def>Soln</def><sym>);</sym><br />
<def></def><br />
<kwa>var</kwa> <def>spun</def><sym>:</sym><def>soln</def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def>   s</def><sym>.</sym><def>setcells</def><sym>;</sym><br />
<def></def>   <kwd>inc</kwd><def></def><sym>(</sym><def>m_nSoln</def><sym>,</sym><def></def><num>2</num><def></def><sym>);</sym> <def></def><com>{add solution and its rotation}</com><def></def><br />
<br />
   <kwa>if</kwa> <def>m_minSoln</def><sym>.</sym><def>isEmpty</def> <kwa>then</kwa><br />
<def></def>     <kwa>begin</kwa><br />
<def>       m_minSoln</def> <sym>:=</sym> <def>s</def><sym>;</sym><br />
<def>       m_maxSoln</def> <sym>:=</sym> <def>s</def><sym>;</sym><br />
<def>       exit</def><sym>;</sym><br />
<def></def>     <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
   <kwa>if</kwa> <def>s</def><sym>.</sym><def></def><kwd>lessThan</kwd><def></def><sym>(</sym><def>m_minSoln</def><sym>)</sym> <def></def><kwa>then</kwa><br />
<def>      m_minSoln</def> <sym>:=</sym> <def>s</def><br />
   <kwa>else if</kwa> <def>m_maxSoln</def><sym>.</sym><def></def><kwd>lessThan</kwd><def></def><sym>(</sym><def>s</def><sym>)</sym> <def></def><kwa>then</kwa><br />
<def>      m_maxSoln</def> <sym>:=</sym> <def>s</def><sym>;</sym><br />
<def><br />
   s</def><sym>.</sym><def></def><kwd>spin</kwd><def></def><sym>(</sym><def>spun</def><sym>);</sym><br />
<def></def>   <kwa>if</kwa> <def>spun</def><sym>.</sym><def></def><kwd>lessThan</kwd><def></def><sym>(</sym><def>m_minSoln</def><sym>)</sym> <def></def><kwa>then</kwa><br />
<def>      m_minSoln</def> <sym>:=</sym> <def>spun</def><br />
   <kwa>else if</kwa> <def>m_maxSoln</def><sym>.</sym><def></def><kwd>lessThan</kwd><def></def><sym>(</sym><def>spun</def><sym>)</sym> <def></def><kwa>then</kwa><br />
<def>      m_maxSoln</def> <sym>:=</sym> <def>spun</def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>function</kwa> <def></def><kwd>gen_all_solutions</kwd><def></def><sym>(</sym><def>boardVec</def><sym>,</sym><def>placedPieces</def><sym>:</sym><def>bitvec</def><sym>;</sym><def>row</def><sym>:</sym><def></def><kwb>byte</kwb><def></def><sym>):</sym><def></def><kwb>cardinal</kwb><def></def><sym>;</sym><br />
<def></def><br />
<kwa>var</kwa> <def>ipiece</def><sym>:</sym><def>piecenr</def><sym>;</sym><br />
<def>    iorient</def><sym>:</sym><def></def><kwb>byte</kwb><def></def><sym>;</sym><br />
<def>    piece</def><sym>:</sym><def>bitvec</def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def></def>   <kwa>while</kwa> <def>boardVec</def><sym>*</sym><def>TOP_ROW</def><sym>=</sym><def>TOP_ROW</def> <kwa>do</kwa><br />
<def></def>     <kwa>begin</kwa><br />
<def></def>       <kwb>cardinal</kwb><def></def><sym>(</sym><def>boardVec</def><sym>):=</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>boardvec</def><sym>)</sym> <def></def><kwa>shr</kwa> <def>N_COL</def><sym>;</sym><br />
<def></def>       <kwd>inc</kwd><def></def><sym>(</sym><def>row</def><sym>);</sym><br />
<def></def>     <kwa>end</kwa><def></def><sym>;</sym><br />
<def>   gen_all_solutions</def><sym>:=</sym><def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>   <kwa>with</kwa> <def>cache</def><sym>[((</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>boardvec</def><sym>)*</sym><br />
<def></def>              <sym>(</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>placedpieces</def><sym>)</sym> <def></def><com>{shl 3}</com><def></def> <sym>+</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>              <kwa>xor</kwa> <def>row</def> <kwa>shl</kwa> <def></def><num>5</num><def></def><sym>))</sym> <def></def><kwa>mod</kwa> <def></def><num>131071</num><def></def><sym>]</sym> <def></def><kwa>do</kwa><br />
<def></def>     <kwa>if</kwa> <def></def><sym>(</sym><def>krow</def><sym>&lt;&gt;</sym><def>row</def><sym>)</sym> <def></def><kwa>or</kwa> <def></def><sym>(</sym><def></def><kwd>bitvec</kwd><def></def><sym>(</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>kpiecevec</def><sym>))&lt;&gt;</sym><def>placedpieces</def><sym>)</sym> <def></def><kwa>or</kwa> <def></def><sym>(</sym><def>kboardvec</def><sym>&lt;&gt;</sym><def>boardvec</def><sym>)</sym> <def></def><kwa>then</kwa><br />
<def></def>       <kwa>begin</kwa><br />
<def></def>         <kwa>with</kwa> <def>g_okpieces</def><sym>[</sym><def>row</def><sym>,</sym><def>s_firstOne</def><sym>[</sym><def></def><kwb>cardinal</kwb><def></def><sym>([</sym><def></def><num>0</num><def></def><sym>..</sym><def>N_COL</def><sym>-</sym><def></def><num>1</num><def></def><sym>]-</sym><def>boardVec</def><sym>)]]</sym> <def></def><kwa>do</kwa><br />
<def></def>           <kwa>for</kwa> <def>ipiece</def><sym>:=</sym><def></def><num>0</num> <def></def><kwa>to</kwa> <def>N_PIECE_TYPE</def><sym>-</sym><def></def><num>1</num> <def></def><kwa>do</kwa><br />
<def></def>             <kwa>if not</kwa><def></def><sym>(</sym><def>ipiece</def> <kwa>in</kwa> <def>placedpieces</def><sym>)</sym> <def></def><kwa>then</kwa><br />
<def></def>               <kwa>for</kwa> <def>iorient</def><sym>:=</sym><def></def><num>1</num> <def></def><kwa>to</kwa> <def>npieces</def><sym>[</sym><def>ipiece</def><sym>]</sym> <def></def><kwa>do</kwa> <def></def><com>{start with 1, npieces[x] can be zero}</com><def></def><br />
                 <kwa>begin</kwa><br />
<def>                   piece</def><sym>:=</sym><def>pieceVec</def><sym>[</sym><def>iPiece</def><sym>,</sym><def>iOrient</def><sym>-</sym><def></def><num>1</num><def></def><sym>];</sym><br />
<def></def>                   <com>{check if piece conflicts with other pieces or if we get a bad island.}</com><def></def><br />
                   <kwa>if</kwa> <def></def><sym>(</sym><def>piece</def><sym>*</sym><def>boardVec</def><sym>=[])</sym> <def></def><kwa>and</kwa> <def></def><sym>(</sym><def></def><kwd>has_bad_islands</kwd><def></def><sym>(</sym><def>boardVec</def><sym>+</sym><def>piece</def><sym>,</sym><def>row</def><sym>)=</sym><def>good</def><sym>)</sym> <def></def><kwa>then</kwa><br />
<def></def>                     <kwa>begin</kwa><br />
<def>                       m_curSoln</def><sym>.</sym><def></def><kwd>pushPiece</kwd><def></def><sym>(</sym><def>piece</def><sym>,</sym><def>iPiece</def><sym>,</sym><def>row</def><sym>);</sym><br />
<def></def>                       <com>{recurse or record solution}</com><def></def><br />
                       <kwa>if</kwa> <def>placedPieces</def><sym>+[</sym><def>ipiece</def><sym>]&lt;&gt;</sym><def>ALL_PIECE_MASK</def> <kwa>then</kwa><br />
<def></def>                         <kwd>inc</kwd><def></def><sym>(</sym><def>gen_all_solutions</def><sym>,</sym><def></def><kwd>gen_all_solutions</kwd><def></def><sym>(</sym><def>boardVec</def><sym>+</sym><def>piece</def><sym>,</sym><def>placedPieces</def><sym>+[</sym><def>ipiece</def><sym>],</sym><def>row</def><sym>))</sym><br />
<def></def>                       <kwa>else</kwa><br />
<def></def>                         <kwa>begin</kwa><br />
<def></def>                           <kwd>record_solution</kwd><def></def><sym>(</sym><def>m_curSoln</def><sym>);</sym><br />
<def></def>                           <kwd>inc</kwd><def></def><sym>(</sym><def>gen_all_solutions</def><sym>);</sym><br />
<def></def>                         <kwa>end</kwa><def></def><sym>;</sym><br />
<def>                       m_curSoln</def><sym>.</sym><def></def><kwd>popPiece</kwd><def></def><sym>();</sym><br />
<def></def>                     <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>                <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>         <kwa>if</kwa> <def>gen_all_solutions</def><sym>=</sym><def></def><num>0</num> <def></def><kwa>then</kwa><br />
<def></def>           <kwa>begin</kwa><br />
<def>             krow</def><sym>:=</sym><def>row</def><sym>;</sym><br />
<def>             kpiecevec</def><sym>:=</sym><def></def><kwb>word</kwb><def></def><sym>(</sym><def></def><kwb>cardinal</kwb><def></def><sym>(</sym><def>placedpieces</def><sym>));</sym><br />
<def>             kboardvec</def><sym>:=</sym><def>boardvec</def><sym>;</sym><br />
<def></def>           <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>      <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def></def>   <kwa>if</kwa> <def>paramcount</def> <sym>&gt;</sym> <def></def><num>2</num> <def></def><kwa>then</kwa><br />
<def></def>     <kwd>halt</kwd><def></def><sym>(</sym><def></def><num>1</num><def></def><sym>);</sym> <def></def><com>{spec says this is an error}</com><def></def><br />
<br />
   <kwd>textrec</kwd><def></def><sym>(</sym><def>output</def><sym>).</sym><def>flushfunc</def><sym>:=</sym><def></def><kwa>nil</kwa><def></def><sym>;</sym><br />
<def><br />
   gen_all_orientations</def><sym>;</sym><br />
<def>   calc_always_bad</def><sym>;</sym><br />
<def>   init_board</def><sym>;</sym><br />
<def></def>   <kwd>filldword</kwd><def></def><sym>(</sym><def>cache</def><sym>,</sym><def></def><kwd>sizeof</kwd><def></def><sym>(</sym><def>cache</def><sym>)</sym> <def></def><kwa>shr</kwa> <def></def><num>2</num><def></def><sym>,</sym><def></def><num>$ffffffff</num><def></def><sym>);</sym><br />
<def></def>   <kwd>gen_all_solutions</kwd><def></def><sym>([], [],</sym> <def></def><num>0</num><def></def><sym>);</sym><br />
<def></def><br />
   <kwd>writeln</kwd><def></def><sym>(</sym><def>m_nSoln</def><sym>,</sym><def></def><str>' solutions found'</str><def></def><sym>);</sym><br />
<def>   writeln</def><sym>;</sym><br />
<def>   m_minSoln</def><sym>.</sym><def></def><kwd>write</kwd><def></def><sym>(</sym><def>output</def><sym>);</sym><br />
<def>   writeln</def><sym>;</sym><br />
<def>   m_maxSoln</def><sym>.</sym><def></def><kwd>write</kwd><def></def><sym>(</sym><def>output</def><sym>);</sym><br />
<def>   writeln</def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>.</sym><def></def><br />
</source>
