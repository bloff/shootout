<source>
<def></def><dir>#include &lt;stdio.h&gt;</dir><br />
<def></def><dir>#include &lt;string.h&gt;</dir><br />
<def></def><dir>#include &lt;limits.h&gt;</dir><br />
<def></def><br />
<kwb>static unsigned char</kwb> <def>iubpairs</def><sym>[][</sym><def></def><num>2</num><def></def><sym>] = {</sym><br />
<def></def>    <sym>{</sym>    <def></def><str>'A'</str><def></def><sym>,</sym>    <def></def><str>'T'</str><def></def>    <sym>},</sym><br />
<def></def>    <sym>{</sym>    <def></def><str>'C'</str><def></def><sym>,</sym>    <def></def><str>'G'</str><def></def>    <sym>},</sym><br />
<def></def>    <sym>{</sym>    <def></def><str>'B'</str><def></def><sym>,</sym>    <def></def><str>'V'</str><def></def>    <sym>},</sym><br />
<def></def>    <sym>{</sym>    <def></def><str>'D'</str><def></def><sym>,</sym>    <def></def><str>'H'</str><def></def>    <sym>},</sym><br />
<def></def>    <sym>{</sym>    <def></def><str>'K'</str><def></def><sym>,</sym>    <def></def><str>'M'</str><def></def>    <sym>},</sym><br />
<def></def>    <sym>{</sym>    <def></def><str>'R'</str><def></def><sym>,</sym>    <def></def><str>'Y'</str><def></def>    <sym>},</sym><br />
<def></def>    <sym>{</sym>    <def></def><str>'\0'</str><def></def><sym>,</sym>   <def></def><str>'\0'</str><def></def>   <sym>}</sym><br />
<def></def><sym>};</sym><br />
<def></def><br />
<kwb>static unsigned char</kwb> <def>iubComplement</def><sym>[</sym><def></def><num>1</num><def></def><sym>+</sym><def>UCHAR_MAX</def><sym>];</sym><br />
<def></def><br />
<kwb>static void</kwb> <def></def><kwd>buildIubComplement</kwd> <def></def><sym>(</sym><def></def><kwb>void</kwb><def></def><sym>) {</sym><br />
<def></def>    <kwb>int</kwb> <def>i</def><sym>;</sym><br />
<def></def>    <kwa>for</kwa> <def></def><sym>(</sym><def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;=</sym> <def>UCHAR_MAX</def><sym>;</sym> <def>i</def><sym>++)</sym> <def>iubComplement</def><sym>[</sym><def>i</def><sym>] = (</sym><def></def><kwb>unsigned char</kwb><def></def><sym>)</sym> <def>i</def><sym>;</sym><br />
<def></def>    <kwa>for</kwa> <def></def><sym>(</sym><def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>iubpairs</def><sym>[</sym><def>i</def><sym>][</sym><def></def><num>0</num><def></def><sym>] !=</sym> <def></def><str>'\0'</str><def></def><sym>;</sym> <def>i</def><sym>++) {</sym><br />
<def>    	iubComplement</def><sym>[</sym><def>iubpairs</def><sym>[</sym><def>i</def><sym>][</sym><def></def><num>0</num><def></def><sym>]] =</sym> <def>iubpairs</def><sym>[</sym><def>i</def><sym>][</sym><def></def><num>1</num><def></def><sym>];</sym><br />
<def>    	iubComplement</def><sym>[</sym><def>iubpairs</def><sym>[</sym><def>i</def><sym>][</sym><def></def><num>1</num><def></def><sym>]] =</sym> <def>iubpairs</def><sym>[</sym><def>i</def><sym>][</sym><def></def><num>0</num><def></def><sym>];</sym><br />
<def>    	iubComplement</def><sym>[</sym><def></def><kwd>tolower</kwd> <def></def><sym>(</sym><def>iubpairs</def><sym>[</sym><def>i</def><sym>][</sym><def></def><num>0</num><def></def><sym>])] =</sym> <def>iubpairs</def><sym>[</sym><def>i</def><sym>][</sym><def></def><num>1</num><def></def><sym>];</sym><br />
<def>    	iubComplement</def><sym>[</sym><def></def><kwd>tolower</kwd> <def></def><sym>(</sym><def>iubpairs</def><sym>[</sym><def>i</def><sym>][</sym><def></def><num>1</num><def></def><sym>])] =</sym> <def>iubpairs</def><sym>[</sym><def>i</def><sym>][</sym><def></def><num>0</num><def></def><sym>];</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>static void</kwb> <def></def><kwd>inPlaceReverse</kwd> <def></def><sym>(</sym><def></def><kwb>unsigned char</kwb> <def></def><sym>*</sym> <def>strand</def><sym>,</sym> <def></def><kwb>int</kwb> <def>len</def><sym>) {</sym><br />
<def></def>    <kwb>int</kwb> <def>i</def><sym>;</sym><br />
<def></def>    <kwa>for</kwa> <def></def><sym>(</sym><def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>,</sym> <def>len</def><sym>--;</sym> <def>i</def> <sym>&lt;</sym> <def>len</def><sym>;</sym> <def>i</def><sym>++,</sym><def>len</def><sym>--) {</sym><br />
<def></def>    	<kwb>unsigned char</kwb> <def>c</def> <sym>=</sym> <def>strand</def><sym>[</sym><def>i</def><sym>];</sym><br />
<def>    	strand</def><sym>[</sym><def>i</def><sym>] =</sym> <def>iubComplement</def><sym>[</sym><def>strand</def><sym>[</sym><def>len</def><sym>]];</sym><br />
<def>    	strand</def><sym>[</sym><def>len</def><sym>] =</sym> <def>iubComplement</def><sym>[</sym><def>c</def><sym>];</sym><br />
<def></def>    <sym>}</sym><br />
<def></def>    <kwa>if</kwa> <def></def><sym>(</sym><def>i</def> <sym>==</sym> <def>len</def><sym>)</sym> <def>strand</def><sym>[</sym><def>i</def><sym>] =</sym> <def>iubComplement</def><sym>[</sym><def>strand</def><sym>[</sym><def>i</def><sym>]];</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>static void</kwb> <def></def><kwd>process</kwd> <def></def><sym>(</sym><def></def><kwb>char</kwb> <def></def><sym>*</sym> <def>strand</def><sym>,</sym> <def></def><kwb>int</kwb> <def>len</def><sym>) {</sym><br />
<def></def>    <kwb>char</kwb> <def></def><sym>*</sym> <def>s</def><sym>,</sym> <def>c</def><sym>;</sym><br />
<def></def><br />
    <kwd>inPlaceReverse</kwd> <def></def><sym>((</sym><def></def><kwb>unsigned char</kwb> <def></def><sym>*)</sym> <def>strand</def><sym>,</sym> <def>len</def><sym>);</sym><br />
<def>    s</def> <sym>=</sym> <def>strand</def><sym>;</sym><br />
<def></def><br />
    <kwa>while</kwa> <def></def><sym>(</sym><def>len</def> <sym>&gt;</sym> <def></def><num>60</num><def></def><sym>) {</sym><br />
<def>    	c</def> <sym>=</sym> <def>s</def><sym>[</sym><def></def><num>60</num><def></def><sym>];</sym><br />
<def>    	s</def><sym>[</sym><def></def><num>60</num><def></def><sym>] =</sym> <def></def><str>'\0'</str><def></def><sym>;</sym><br />
<def></def>    	<kwd>puts</kwd> <def></def><sym>(</sym><def>s</def><sym>);</sym><br />
<def>    	s</def><sym>[</sym><def></def><num>60</num><def></def><sym>] =</sym> <def>c</def><sym>;</sym><br />
<def>    	s</def> <sym>+=</sym> <def></def><num>60</num><def></def><sym>;</sym><br />
<def>    	len</def> <sym>-=</sym> <def></def><num>60</num><def></def><sym>;</sym><br />
<def></def>    <sym>}</sym><br />
<def><br />
    s</def><sym>[</sym><def>len</def><sym>] =</sym> <def></def><str>'\0'</str><def></def><sym>;</sym><br />
<def></def>    <kwd>puts</kwd> <def></def><sym>(</sym><def>s</def><sym>);</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>int</kwb> <def></def><kwd>main</kwd> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>argc</def><sym>,</sym> <def></def><kwb>char</kwb> <def></def><sym>*</sym> <def>argv</def><sym>[]) {</sym><br />
<def></def>    <kwb>static char</kwb> <def>buffer</def><sym>[</sym><def></def><num>1024</num><def></def><sym>];</sym><br />
<def></def>    <kwb>char</kwb> <def></def><sym>*</sym> <def>inp</def> <sym>= (</sym><def></def><kwb>char</kwb> <def></def><sym>*)</sym> <def></def><kwd>malloc</kwd> <def></def><sym>(</sym><def></def><num>129</num><def></def><sym>);</sym><br />
<def></def>    <kwb>int</kwb> <def>mlen</def> <sym>=</sym> <def></def><num>128</num><def></def><sym>;</sym><br />
<def></def>    <kwb>int</kwb> <def>slen</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><br />
    <kwd>buildIubComplement</kwd> <def></def><sym>();</sym><br />
<def></def><br />
    <kwa>while</kwa> <def></def><sym>(</sym><def>NULL</def> <sym>!=</sym> <def></def><kwd>fgets</kwd> <def></def><sym>(</sym><def>buffer</def><sym>,</sym> <def></def><num>1023</num><def></def><sym>,</sym> <def>stdin</def><sym>)) {</sym><br />
<def></def>    	<kwa>if</kwa> <def></def><sym>(</sym><def>buffer</def><sym>[</sym><def></def><num>0</num><def></def><sym>] ==</sym> <def></def><str>'&gt;'</str><def></def><sym>) {</sym><br />
<def></def>    	    <kwa>if</kwa> <def></def><sym>(</sym><def>slen</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>) {</sym><br />
<def></def>    	    	<kwd>process</kwd> <def></def><sym>(</sym><def>inp</def><sym>,</sym> <def>slen</def><sym>);</sym><br />
<def>    	    	slen</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>    	    <sym>}</sym><br />
<def></def>    	    <kwd>printf</kwd> <def></def><sym>(</sym><def></def><str>&quot;%s&quot;</str><def></def><sym>,</sym> <def>buffer</def><sym>);</sym><br />
<def></def>    	<sym>}</sym> <def></def><kwa>else</kwa> <def></def><sym>{</sym><br />
<def></def>    	    <kwb>int</kwb> <def>l</def> <sym>=</sym> <def></def><kwd>strlen</kwd> <def></def><sym>(</sym><def>buffer</def><sym>);</sym><br />
<def></def>    	    <kwa>while</kwa> <def></def><sym>(</sym><def>l</def> <sym>&gt;</sym> <def></def><num>0</num> <def></def><sym>&amp;&amp; !</sym><def></def><kwd>isalpha</kwd> <def></def><sym>(</sym><def>buffer</def><sym>[</sym><def>l</def><sym>-</sym><def></def><num>1</num><def></def><sym>]))</sym> <def>l</def><sym>--;</sym><br />
<def></def>    	    <kwa>while</kwa> <def></def><sym>(</sym><def>slen</def> <sym>+</sym> <def>l</def> <sym>&gt;</sym> <def>mlen</def><sym>) {</sym><br />
<def>    	    	mlen</def> <sym>+=</sym> <def>mlen</def><sym>;</sym><br />
<def>    	    	inp</def> <sym>= (</sym><def></def><kwb>char</kwb> <def></def><sym>*)</sym> <def></def><kwd>realloc</kwd> <def></def><sym>(</sym><def>inp</def><sym>,</sym> <def>mlen</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>    	    <sym>}</sym><br />
<def></def><br />
    	    <kwd>memcpy</kwd> <def></def><sym>(</sym><def>inp</def> <sym>+</sym> <def>slen</def><sym>,</sym> <def>buffer</def><sym>,</sym> <def>l</def><sym>);</sym><br />
<def>    	    slen</def> <sym>+=</sym> <def>l</def><sym>;</sym><br />
<def></def>    	<sym>}</sym><br />
<def></def>    <sym>}</sym><br />
<def></def>    <kwa>if</kwa> <def></def><sym>(</sym><def>slen</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>)</sym> <def></def><kwd>process</kwd> <def></def><sym>(</sym><def>inp</def><sym>,</sym> <def>slen</def><sym>);</sym><br />
<def></def>    <kwd>free</kwd> <def></def><sym>(</sym><def>inp</def><sym>);</sym><br />
<def></def>    <kwa>return</kwa> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
</source>
