<span class="hl slc">// The Computer Language Benchmarks Game</span>
<span class="hl slc">// http://shootout.alioth.debian.org/</span>
<span class="hl slc">//</span>
<span class="hl slc">// Based on C contribution of Mike Pall</span>
<span class="hl slc">// Contributed by The Anh Tran</span>

<span class="hl dir">#define _GNU_SOURCE</span>
<span class="hl dir">#include &lt;omp.h&gt;</span>
<span class="hl dir">#include &lt;sched.h&gt;</span>
<span class="hl dir">#include &lt;pcre.h&gt;</span>

<span class="hl dir">#include &lt;assert.h&gt;</span>

<span class="hl dir">#include &lt;stdio.h&gt;</span>
<span class="hl dir">#include &lt;stdlib.h&gt;</span>
<span class="hl dir">#include &lt;memory.h&gt;</span>


<span class="hl slc">// read all redirected data from stdin</span>
<span class="hl slc">// strip DNA headers and newline characters</span>
<span class="hl kwb">char</span><span class="hl sym">*</span>
<span class="hl kwd">ReadInput_StripHeader</span><span class="hl sym">(</span>   <span class="hl kwb">size_t</span> <span class="hl sym">*</span>file_size<span class="hl sym">,</span> <span class="hl kwb">size_t</span> <span class="hl sym">*</span>strip_size <span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl slc">// get input size</span>
   <span class="hl sym">*</span>file_size <span class="hl sym">=</span> <span class="hl kwd">ftell</span><span class="hl sym">(</span>stdin<span class="hl sym">);</span>
   <span class="hl kwd">fseek</span><span class="hl sym">(</span>stdin<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> SEEK_END<span class="hl sym">);</span>
   <span class="hl sym">*</span>file_size <span class="hl sym">=</span> <span class="hl kwd">ftell</span><span class="hl sym">(</span>stdin<span class="hl sym">) - *</span>file_size<span class="hl sym">;</span>
   <span class="hl kwd">fseek</span><span class="hl sym">(</span>stdin<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> SEEK_SET<span class="hl sym">);</span>
    <span class="hl sym">*</span>strip_size <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

   <span class="hl slc">// load original content into memory</span>
   <span class="hl kwb">char</span><span class="hl sym">*</span> input <span class="hl sym">= (</span><span class="hl kwb">char</span><span class="hl sym">*)</span><span class="hl kwd">malloc</span><span class="hl sym">(*</span>file_size <span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">);</span>
   <span class="hl kwd">assert</span><span class="hl sym">(</span>input <span class="hl sym">!=</span> <span class="hl num">0</span><span class="hl sym">);</span>
   <span class="hl sym">{</span>
      <span class="hl kwb">size_t</span> sz <span class="hl sym">=</span> <span class="hl kwd">fread</span><span class="hl sym">(</span>input<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">, *</span>file_size<span class="hl sym">,</span> stdin<span class="hl sym">);</span>
      <span class="hl kwd">assert</span><span class="hl sym">(</span>sz <span class="hl sym">== *</span>file_size<span class="hl sym">);</span>
      input<span class="hl sym">[*</span>file_size<span class="hl sym">] =</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl slc">// alloc space for regex_replace</span>
   <span class="hl kwb">char</span><span class="hl sym">*</span> output <span class="hl sym">= (</span><span class="hl kwb">char</span><span class="hl sym">*)</span><span class="hl kwd">malloc</span><span class="hl sym">(*</span>file_size<span class="hl sym">);</span>
   <span class="hl kwd">assert</span><span class="hl sym">(</span>output <span class="hl sym">!=</span> <span class="hl num">0</span><span class="hl sym">);</span>


   <span class="hl kwb">const char</span><span class="hl sym">*</span>   re_error<span class="hl sym">;</span>
   <span class="hl kwb">int</span>         re_erroff<span class="hl sym">;</span>

   <span class="hl slc">// compile pattern</span>
   pcre<span class="hl sym">*</span> re <span class="hl sym">=</span> <span class="hl kwd">pcre_compile</span><span class="hl sym">(</span><span class="hl str">&quot;&gt;.*</span><span class="hl esc">\\</span><span class="hl str">n|</span><span class="hl esc">\\</span><span class="hl str">n&quot;</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">, &amp;</span>re_error<span class="hl sym">, &amp;</span>re_erroff<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">);</span>
   pcre_extra<span class="hl sym">*</span>   re_extra <span class="hl sym">=</span> <span class="hl kwd">pcre_study</span><span class="hl sym">(</span>re<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">, &amp;</span>re_error<span class="hl sym">);</span>
   <span class="hl kwd">assert</span><span class="hl sym">(</span>re <span class="hl sym">!=</span> <span class="hl num">0</span><span class="hl sym">);</span>

   <span class="hl kwb">int</span>         position<span class="hl sym">;</span>
   <span class="hl kwb">int</span>         match<span class="hl sym">[</span><span class="hl num">3</span><span class="hl sym">];</span>

   <span class="hl slc">// regex_replace</span>
   <span class="hl kwa">for</span><span class="hl sym">(</span>   position <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         <span class="hl kwd">pcre_exec</span><span class="hl sym">(</span>re<span class="hl sym">,</span> re_extra<span class="hl sym">,</span> input<span class="hl sym">, *</span>file_size<span class="hl sym">,</span> position<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> match<span class="hl sym">,</span> <span class="hl num">3</span><span class="hl sym">) &gt;=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         position <span class="hl sym">=</span> match<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]   )</span>
   <span class="hl sym">{</span>
      <span class="hl kwb">int</span> char_to_copy <span class="hl sym">=</span> match<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] -</span> position<span class="hl sym">;</span>
      <span class="hl kwd">memcpy</span><span class="hl sym">(</span>output <span class="hl sym">+ (*</span>strip_size<span class="hl sym">),</span> input <span class="hl sym">+</span> position<span class="hl sym">,</span> char_to_copy<span class="hl sym">);</span>
      <span class="hl sym">*</span>strip_size <span class="hl sym">+=</span> char_to_copy<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl slc">// copy remain part</span>
   <span class="hl kwb">int</span> char_to_copy <span class="hl sym">= *</span>file_size <span class="hl sym">-</span> position<span class="hl sym">;</span>
   <span class="hl kwd">memcpy</span><span class="hl sym">(</span>output <span class="hl sym">+ (*</span>strip_size<span class="hl sym">),</span> input <span class="hl sym">+</span> position<span class="hl sym">,</span> char_to_copy<span class="hl sym">);</span>
   <span class="hl sym">*</span>strip_size <span class="hl sym">+=</span> char_to_copy<span class="hl sym">;</span>

   <span class="hl kwd">free</span><span class="hl sym">(</span>input<span class="hl sym">);</span>
   <span class="hl kwd">pcre_free</span><span class="hl sym">(</span>re_extra<span class="hl sym">);</span>
   <span class="hl kwd">pcre_free</span><span class="hl sym">(</span>re<span class="hl sym">);</span>

   <span class="hl kwa">return</span> output<span class="hl sym">;</span>
<span class="hl sym">}</span>



<span class="hl kwb">void</span>
<span class="hl kwd">Count_Patterns</span><span class="hl sym">(</span><span class="hl kwb">char const</span><span class="hl sym">*</span> input<span class="hl sym">,</span> <span class="hl kwb">size_t</span> input_len<span class="hl sym">,</span> <span class="hl kwb">char</span><span class="hl sym">*</span> result<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwb">static char const</span><span class="hl sym">*</span> ptns<span class="hl sym">[] =</span>
   <span class="hl sym">{</span>
      <span class="hl str">&quot;agggtaaa|tttaccct&quot;</span><span class="hl sym">,</span>
      <span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="hl sym">,</span>
      <span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="hl sym">,</span>
      <span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="hl sym">,</span>
      <span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="hl sym">,</span>
      <span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="hl sym">,</span>
      <span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="hl sym">,</span>
      <span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="hl sym">,</span>
      <span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span>
   <span class="hl sym">};</span>
   <span class="hl kwb">static const int</span> n_ptns <span class="hl sym">=</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span>ptns<span class="hl sym">) /</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span>ptns<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>
   <span class="hl kwb">static size_t</span> counters<span class="hl sym">[</span><span class="hl num">9</span><span class="hl sym">];</span>

   <span class="hl kwb">int</span> i<span class="hl sym">;</span>
   <span class="hl dir">#pragma omp for schedule(dynamic, 1) nowait</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> n_ptns<span class="hl sym">; ++</span>i<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwb">const char</span><span class="hl sym">*</span>   re_error   <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwb">int</span>         re_erroff   <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

      pcre<span class="hl sym">*</span>       re          <span class="hl sym">=</span> <span class="hl kwd">pcre_compile</span><span class="hl sym">(</span>ptns<span class="hl sym">[</span>i<span class="hl sym">],</span> <span class="hl num">0</span><span class="hl sym">, &amp;</span>re_error<span class="hl sym">, &amp;</span>re_erroff<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">);</span>
      pcre_extra<span class="hl sym">*</span>   re_extra    <span class="hl sym">=</span> <span class="hl kwd">pcre_study</span><span class="hl sym">(</span>re<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">, &amp;</span>re_error<span class="hl sym">);</span>
      <span class="hl kwd">assert</span><span class="hl sym">(</span>re <span class="hl sym">!=</span> <span class="hl num">0</span><span class="hl sym">);</span>

      <span class="hl kwb">int</span>         position<span class="hl sym">,</span> count<span class="hl sym">;</span>
      <span class="hl kwb">int</span>         match<span class="hl sym">[</span><span class="hl num">3</span><span class="hl sym">];</span>

      <span class="hl slc">// regex_search</span>
      <span class="hl kwa">for</span><span class="hl sym">(</span>   position <span class="hl sym">=</span> count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl kwd">pcre_exec</span><span class="hl sym">(</span>re<span class="hl sym">,</span> re_extra<span class="hl sym">,</span> input<span class="hl sym">,</span> input_len<span class="hl sym">,</span> position<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> match<span class="hl sym">,</span> <span class="hl num">3</span><span class="hl sym">) &gt;=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            position <span class="hl sym">=</span> match<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]   )</span>
         <span class="hl sym">++</span>count<span class="hl sym">;</span>

      counters<span class="hl sym">[</span>i<span class="hl sym">] =</span> count<span class="hl sym">;</span>
      <span class="hl kwd">pcre_free</span><span class="hl sym">(</span>re_extra<span class="hl sym">);</span>
      <span class="hl kwd">pcre_free</span><span class="hl sym">(</span>re<span class="hl sym">);</span>
   <span class="hl sym">}</span>

   <span class="hl slc">// we want the last thread, reaching this code block, to print result</span>
   <span class="hl kwb">static size_t</span> thread_passed <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">__sync_add_and_fetch</span><span class="hl sym">(&amp;</span>thread_passed<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">) == (</span><span class="hl kwb">size_t</span><span class="hl sym">)</span><span class="hl kwd">omp_get_num_threads</span><span class="hl sym">() )</span>
   <span class="hl sym">{</span>
      <span class="hl kwb">int</span> plen <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwb">int</span> i<span class="hl sym">;</span>

      <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> n_ptns<span class="hl sym">; ++</span>i<span class="hl sym">)</span>
         plen <span class="hl sym">+=</span> <span class="hl kwd">sprintf</span><span class="hl sym">(</span>result <span class="hl sym">+</span> plen<span class="hl sym">,</span> <span class="hl str">&quot;%s %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> ptns<span class="hl sym">[</span>i<span class="hl sym">],</span> counters<span class="hl sym">[</span>i<span class="hl sym">]);</span>

      thread_passed <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>


<span class="hl kwc">typedef</span> <span class="hl kwb">struct</span> IUB_T
<span class="hl sym">{</span>
   <span class="hl kwb">const char</span><span class="hl sym">*</span>   iub<span class="hl sym">;</span>
   <span class="hl kwb">int</span>         len<span class="hl sym">;</span>
<span class="hl sym">}</span> IUB<span class="hl sym">;</span>


IUB <span class="hl kwb">const</span> iub_table<span class="hl sym">[] =</span>
<span class="hl sym">{</span>
   <span class="hl sym">{</span><span class="hl num">0</span><span class="hl sym">},</span>
   <span class="hl sym">{</span><span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl sym">,</span>   <span class="hl num">7</span><span class="hl sym">},</span>
   <span class="hl sym">{</span><span class="hl num">0</span><span class="hl sym">},</span>
   <span class="hl sym">{</span><span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl sym">,</span>   <span class="hl num">7</span><span class="hl sym">},</span>
   <span class="hl sym">{</span><span class="hl num">0</span><span class="hl sym">}, {</span><span class="hl num">0</span><span class="hl sym">}, {</span><span class="hl num">0</span><span class="hl sym">},</span>
   <span class="hl sym">{</span><span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl sym">,</span>   <span class="hl num">7</span><span class="hl sym">},</span>
   <span class="hl sym">{</span><span class="hl num">0</span><span class="hl sym">}, {</span><span class="hl num">0</span><span class="hl sym">},</span>
   <span class="hl sym">{</span><span class="hl str">&quot;(g|t)&quot;</span><span class="hl sym">,</span>   <span class="hl num">5</span><span class="hl sym">},</span>
   <span class="hl sym">{</span><span class="hl num">0</span><span class="hl sym">},</span>
   <span class="hl sym">{</span><span class="hl str">&quot;(a|c)&quot;</span><span class="hl sym">,</span>   <span class="hl num">5</span><span class="hl sym">},</span>
   <span class="hl sym">{</span><span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl sym">,</span>   <span class="hl num">9</span><span class="hl sym">},</span>
   <span class="hl sym">{</span><span class="hl num">0</span><span class="hl sym">}, {</span><span class="hl num">0</span><span class="hl sym">}, {</span><span class="hl num">0</span><span class="hl sym">},</span>
   <span class="hl sym">{</span><span class="hl str">&quot;(a|g)&quot;</span><span class="hl sym">,</span>   <span class="hl num">5</span><span class="hl sym">},</span>
   <span class="hl sym">{</span><span class="hl str">&quot;(c|t)&quot;</span><span class="hl sym">,</span>   <span class="hl num">5</span><span class="hl sym">},</span>
   <span class="hl sym">{</span><span class="hl num">0</span><span class="hl sym">}, {</span><span class="hl num">0</span><span class="hl sym">},</span>
   <span class="hl sym">{</span><span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl sym">,</span>   <span class="hl num">7</span><span class="hl sym">},</span>
   <span class="hl sym">{</span><span class="hl str">&quot;(a|t)&quot;</span><span class="hl sym">,</span>   <span class="hl num">5</span><span class="hl sym">},</span>
   <span class="hl sym">{</span><span class="hl num">0</span><span class="hl sym">},</span>
   <span class="hl sym">{</span><span class="hl str">&quot;(c|t)&quot;</span><span class="hl sym">,</span>   <span class="hl num">5</span><span class="hl sym">}</span>
<span class="hl sym">};</span>
<span class="hl kwb">int const</span> n_iub <span class="hl sym">=</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span>iub_table<span class="hl sym">)/</span><span class="hl kwa">sizeof</span><span class="hl sym">(</span>iub_table<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>


<span class="hl kwb">void</span>
<span class="hl kwd">Replace_Patterns</span><span class="hl sym">(</span><span class="hl kwb">char const</span><span class="hl sym">*</span> input<span class="hl sym">,</span> <span class="hl kwb">size_t</span> input_len<span class="hl sym">,</span> <span class="hl kwb">size_t</span><span class="hl sym">*</span> repl_len<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl dir">#pragma omp single nowait</span>
   <span class="hl sym">{</span>
      <span class="hl slc">// input_len * 1.5</span>
      <span class="hl kwb">char</span><span class="hl sym">*</span>      output       <span class="hl sym">= (</span><span class="hl kwb">char</span><span class="hl sym">*)</span><span class="hl kwd">malloc</span><span class="hl sym">(</span>input_len <span class="hl sym">+ (</span>input_len <span class="hl sym">&gt;&gt;</span> <span class="hl num">1</span><span class="hl sym">));</span>
      <span class="hl kwd">assert</span><span class="hl sym">(</span>output <span class="hl sym">!=</span> <span class="hl num">0</span><span class="hl sym">);</span>

      <span class="hl kwb">const char</span><span class="hl sym">*</span>   re_error   <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwb">int</span>         re_erroff   <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

      pcre<span class="hl sym">*</span>       re          <span class="hl sym">=</span> <span class="hl kwd">pcre_compile</span><span class="hl sym">(</span><span class="hl str">&quot;[BDHKMNRSVWY]&quot;</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">, &amp;</span>re_error<span class="hl sym">, &amp;</span>re_erroff<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">);</span>
      pcre_extra<span class="hl sym">*</span>   re_extra    <span class="hl sym">=</span> <span class="hl kwd">pcre_study</span><span class="hl sym">(</span>re<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">, &amp;</span>re_error<span class="hl sym">);</span>
      <span class="hl kwd">assert</span><span class="hl sym">(</span>re <span class="hl sym">!=</span> <span class="hl num">0</span><span class="hl sym">);</span>

      <span class="hl kwb">int</span>         position<span class="hl sym">;</span>
      <span class="hl kwb">int</span>         match<span class="hl sym">[</span><span class="hl num">3</span><span class="hl sym">];</span>
      <span class="hl kwb">int</span>         replace_len   <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

      <span class="hl slc">// regex_replace</span>
      <span class="hl kwa">for</span><span class="hl sym">(</span>   position <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl kwd">pcre_exec</span><span class="hl sym">(</span>re<span class="hl sym">,</span> re_extra<span class="hl sym">,</span> input<span class="hl sym">,</span> input_len<span class="hl sym">,</span> position<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> match<span class="hl sym">,</span> <span class="hl num">3</span><span class="hl sym">) &gt;=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            position <span class="hl sym">=</span> match<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]   )</span>
      <span class="hl sym">{</span>
         <span class="hl kwb">int</span> char_to_copy <span class="hl sym">=</span> match<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] -</span> position<span class="hl sym">;</span>
         <span class="hl kwd">memcpy</span><span class="hl sym">(</span>output <span class="hl sym">+</span> replace_len<span class="hl sym">,</span> input <span class="hl sym">+</span> position<span class="hl sym">,</span> char_to_copy<span class="hl sym">);</span>
         replace_len <span class="hl sym">+=</span> char_to_copy<span class="hl sym">;</span>

         IUB <span class="hl kwb">const</span><span class="hl sym">*</span> i_r <span class="hl sym">=</span> iub_table <span class="hl sym">+ (</span>input<span class="hl sym">[</span>match<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]] -</span> <span class="hl str">'A'</span><span class="hl sym">);</span>

         char_to_copy <span class="hl sym">=</span> i_r<span class="hl sym">-&gt;</span>len<span class="hl sym">;</span>
         <span class="hl kwd">memcpy</span><span class="hl sym">(</span>output <span class="hl sym">+</span> replace_len<span class="hl sym">,</span> i_r<span class="hl sym">-&gt;</span>iub<span class="hl sym">,</span> char_to_copy<span class="hl sym">);</span>
         replace_len <span class="hl sym">+=</span> char_to_copy<span class="hl sym">;</span>

      <span class="hl sym">}</span>

      <span class="hl slc">// copy remain part</span>
      <span class="hl kwb">int</span> char_to_copy <span class="hl sym">=</span> input_len <span class="hl sym">-</span> position<span class="hl sym">;</span>
      <span class="hl kwd">memcpy</span><span class="hl sym">(</span>output <span class="hl sym">+</span> replace_len<span class="hl sym">,</span> input <span class="hl sym">+</span> position<span class="hl sym">,</span> char_to_copy<span class="hl sym">);</span>
      replace_len <span class="hl sym">+=</span> char_to_copy<span class="hl sym">;</span>

      <span class="hl kwd">free</span><span class="hl sym">(</span>output<span class="hl sym">);</span>
      <span class="hl kwd">pcre_free</span><span class="hl sym">(</span>re_extra<span class="hl sym">);</span>
      <span class="hl kwd">pcre_free</span><span class="hl sym">(</span>re<span class="hl sym">);</span>

      <span class="hl sym">*</span>repl_len <span class="hl sym">=</span> replace_len<span class="hl sym">;</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>



<span class="hl slc">// Detect single - multi thread benchmark</span>
<span class="hl kwb">int</span>
<span class="hl kwd">GetThreadCount</span><span class="hl sym">()</span>
<span class="hl sym">{</span>
   cpu_set_t cs<span class="hl sym">;</span>
   <span class="hl kwb">int</span> count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwb">int</span> i<span class="hl sym">;</span>

   <span class="hl kwd">CPU_ZERO</span><span class="hl sym">(&amp;</span>cs<span class="hl sym">);</span>
   <span class="hl kwd">sched_getaffinity</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span>cs<span class="hl sym">), &amp;</span>cs<span class="hl sym">);</span>

   <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> CPU_SETSIZE<span class="hl sym">; ++</span>i<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">CPU_ISSET</span><span class="hl sym">(</span>i<span class="hl sym">, &amp;</span>cs<span class="hl sym">))</span>
      <span class="hl sym">++</span>count<span class="hl sym">;</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">return</span> count<span class="hl sym">;</span>
<span class="hl sym">}</span>


<span class="hl kwb">int</span>
<span class="hl kwd">main</span><span class="hl sym">()</span>
<span class="hl sym">{</span>
   <span class="hl kwb">size_t</span> initial_length <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwb">size_t</span> striped_length <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwb">size_t</span> replace_length <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

   <span class="hl kwb">char</span><span class="hl sym">*</span> input <span class="hl sym">=</span> <span class="hl kwd">ReadInput_StripHeader</span> <span class="hl sym">(&amp;</span>initial_length<span class="hl sym">, &amp;</span>striped_length<span class="hl sym">);</span>


   <span class="hl kwb">char</span> match_result<span class="hl sym">[</span><span class="hl num">1024</span><span class="hl sym">];</span>
   <span class="hl dir">#pragma omp parallel default(shared) num_threads(GetThreadCount())</span>
   <span class="hl sym">{</span>
      <span class="hl kwd">Count_Patterns</span>   <span class="hl sym">(</span>input<span class="hl sym">,</span> striped_length<span class="hl sym">,</span> match_result<span class="hl sym">);</span>
      <span class="hl kwd">Replace_Patterns</span><span class="hl sym">(</span>input<span class="hl sym">,</span> striped_length<span class="hl sym">, &amp;</span>replace_length<span class="hl sym">);</span>
   <span class="hl sym">}</span>

   <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;%s</span><span class="hl esc">\n</span><span class="hl str">%d</span><span class="hl esc">\n</span><span class="hl str">%d</span><span class="hl esc">\n</span><span class="hl str">%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span>
      match_result<span class="hl sym">,</span>
      initial_length<span class="hl sym">,</span>
      striped_length<span class="hl sym">,</span>
      replace_length <span class="hl sym">);</span>

   <span class="hl kwd">free</span><span class="hl sym">(</span>input<span class="hl sym">);</span>
   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

