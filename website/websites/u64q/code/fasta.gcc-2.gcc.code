<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> * contributed by Joern Inge Vestgaarden</span>
<span class="hl com"> * Compile with gcc -O3 -fomit-frame-pointer -march=pentium4 -mfpmath=sse -msse2 -o fasta fasta.c</span>
<span class="hl com"> */</span>

<span class="hl dir">#include &lt;stdio.h&gt;</span>
<span class="hl dir">#include &lt;stdlib.h&gt;</span>
<span class="hl dir">#include &lt;string.h&gt;</span>

<span class="hl dir">#define MIN(a,b) ((a) &lt;= (b) ? (a) : (b))</span>
<span class="hl dir">#define LINE_LEN 60</span>

<span class="hl dir">#define IM 139968</span>
<span class="hl dir">#define IA   3877</span>
<span class="hl dir">#define IC  29573</span>
<span class="hl kwb">int</span> global_last <span class="hl sym">=</span> <span class="hl num">42</span><span class="hl sym">;</span>
<span class="hl dir">#define gen_random(max) (max*((global_last = (global_last * IA + IC) % IM) / ((float)(IM))))</span>

<span class="hl kwb">struct</span> aminoacids <span class="hl sym">{</span>
  <span class="hl kwb">float</span> p<span class="hl sym">;</span>
  <span class="hl kwb">char</span> c<span class="hl sym">;</span>
<span class="hl sym">};</span>

<span class="hl kwb">void</span> <span class="hl kwd">make_cumulative</span> <span class="hl sym">(</span><span class="hl kwb">struct</span> aminoacids <span class="hl sym">*</span> genelist<span class="hl sym">,</span> <span class="hl kwb">int</span> count<span class="hl sym">) {</span>
    <span class="hl kwb">float</span> cp <span class="hl sym">=</span> <span class="hl num">0.0</span><span class="hl sym">;</span>
    <span class="hl kwb">int</span> i<span class="hl sym">;</span>
    <span class="hl kwa">for</span> <span class="hl sym">(</span>i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> count<span class="hl sym">;</span> i<span class="hl sym">++) {</span>
        cp <span class="hl sym">+=</span> genelist<span class="hl sym">[</span>i<span class="hl sym">].</span>p<span class="hl sym">;</span>
        genelist<span class="hl sym">[</span>i<span class="hl sym">].</span>p <span class="hl sym">=</span> cp<span class="hl sym">;</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">repeat_fasta</span> <span class="hl sym">(</span><span class="hl kwb">const char</span> <span class="hl sym">*</span>s<span class="hl sym">,</span> <span class="hl kwb">int</span> n<span class="hl sym">) {</span>
  <span class="hl kwb">int</span> len <span class="hl sym">=</span> <span class="hl kwd">strlen</span><span class="hl sym">(</span>s<span class="hl sym">);</span>
  <span class="hl kwb">int</span> pos <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
  <span class="hl kwa">while</span> <span class="hl sym">(</span>n <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">) {</span>
    <span class="hl kwb">const int</span> line <span class="hl sym">=</span> <span class="hl kwd">MIN</span><span class="hl sym">(</span>LINE_LEN<span class="hl sym">,</span> n<span class="hl sym">);</span>
    <span class="hl kwb">const int</span> left <span class="hl sym">=</span> len<span class="hl sym">-</span>pos<span class="hl sym">;</span>
    n <span class="hl sym">-=</span> line<span class="hl sym">;</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>left <span class="hl sym">&gt;=</span> line<span class="hl sym">) {</span>     <span class="hl com">/* Line not broken */</span>
      <span class="hl kwd">fwrite</span><span class="hl sym">(</span>s<span class="hl sym">+</span>pos<span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">,</span>line<span class="hl sym">,</span>stdout<span class="hl sym">);</span>
      <span class="hl kwd">putc</span><span class="hl sym">(</span><span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">,</span> stdout<span class="hl sym">);</span>
      pos <span class="hl sym">+=</span> line<span class="hl sym">;</span>
    <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>                <span class="hl com">/* Line broken */</span>
      <span class="hl kwd">fwrite</span><span class="hl sym">(</span>s<span class="hl sym">+</span>pos<span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">,</span>left<span class="hl sym">,</span>stdout<span class="hl sym">);</span>
      pos <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwd">fwrite</span><span class="hl sym">(</span>s<span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">,</span>line<span class="hl sym">-</span>left<span class="hl sym">,</span>stdout<span class="hl sym">);</span>
      pos <span class="hl sym">+=</span> line <span class="hl sym">-</span> left<span class="hl sym">;</span>
      <span class="hl kwd">putc</span><span class="hl sym">(</span><span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">,</span> stdout<span class="hl sym">);</span>
    <span class="hl sym">}</span>
  <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">random_fasta</span> <span class="hl sym">(</span><span class="hl kwb">struct</span> aminoacids <span class="hl sym">*</span> genelist<span class="hl sym">,</span> <span class="hl kwb">int</span> n<span class="hl sym">) {</span>
  <span class="hl kwb">char</span> buf<span class="hl sym">[</span>LINE_LEN<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">];</span>
  <span class="hl kwb">char</span> <span class="hl sym">*</span>s <span class="hl sym">=</span> NULL<span class="hl sym">;</span>
  <span class="hl kwb">struct</span> aminoacids <span class="hl sym">*</span>a <span class="hl sym">=</span> genelist<span class="hl sym">;</span>
  <span class="hl kwb">float</span> r<span class="hl sym">;</span>
  <span class="hl kwa">while</span> <span class="hl sym">(</span>n <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">) {</span>
    <span class="hl kwb">const int</span> line <span class="hl sym">=</span> <span class="hl kwd">MIN</span><span class="hl sym">(</span>LINE_LEN<span class="hl sym">,</span> n<span class="hl sym">);</span>
    <span class="hl kwb">const char</span> <span class="hl sym">*</span>end <span class="hl sym">= (</span><span class="hl kwb">char</span> <span class="hl sym">*)</span>buf <span class="hl sym">+</span> line<span class="hl sym">;</span>
    n <span class="hl sym">-=</span> line<span class="hl sym">;</span>
    s <span class="hl sym">=</span> buf<span class="hl sym">;</span>
    <span class="hl kwa">while</span> <span class="hl sym">(</span>s <span class="hl sym">&lt;</span> end<span class="hl sym">) {</span>
      r <span class="hl sym">=</span> <span class="hl kwd">gen_random</span><span class="hl sym">(</span><span class="hl num">1.0</span><span class="hl sym">);</span>
      a <span class="hl sym">=</span> genelist<span class="hl sym">;</span>
      <span class="hl kwa">while</span> <span class="hl sym">(*((</span><span class="hl kwb">float</span> <span class="hl sym">*)</span>a<span class="hl sym">) &lt;</span> r<span class="hl sym">) ++</span>a<span class="hl sym">;</span> <span class="hl com">/* Linear search */</span>
      <span class="hl sym">*</span>s<span class="hl sym">++ =</span> a<span class="hl sym">-&gt;</span>c<span class="hl sym">;</span>
    <span class="hl sym">}</span>
    <span class="hl sym">*</span>s <span class="hl sym">=</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">;</span>
    <span class="hl kwd">fwrite</span><span class="hl sym">(</span>buf<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> line<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> stdout<span class="hl sym">);</span>
  <span class="hl sym">}</span>
<span class="hl sym">}</span>


<span class="hl com">/* Main -- define alphabets, make 3 fragments */</span>

<span class="hl kwb">static struct</span> aminoacids iub<span class="hl sym">[] = {</span>
    <span class="hl sym">{</span> <span class="hl num">0.27</span><span class="hl sym">,</span> <span class="hl str">'a'</span> <span class="hl sym">},</span>
    <span class="hl sym">{</span> <span class="hl num">0.12</span><span class="hl sym">,</span> <span class="hl str">'c'</span> <span class="hl sym">},</span>
    <span class="hl sym">{</span> <span class="hl num">0.12</span><span class="hl sym">,</span> <span class="hl str">'g'</span> <span class="hl sym">},</span>
    <span class="hl sym">{</span> <span class="hl num">0.27</span><span class="hl sym">,</span> <span class="hl str">'t'</span> <span class="hl sym">},</span>
    <span class="hl sym">{</span> <span class="hl num">0.02</span><span class="hl sym">,</span> <span class="hl str">'B'</span> <span class="hl sym">},</span>
    <span class="hl sym">{</span> <span class="hl num">0.02</span><span class="hl sym">,</span> <span class="hl str">'D'</span> <span class="hl sym">},</span>
    <span class="hl sym">{</span> <span class="hl num">0.02</span><span class="hl sym">,</span> <span class="hl str">'H'</span> <span class="hl sym">},</span>
    <span class="hl sym">{</span> <span class="hl num">0.02</span><span class="hl sym">,</span> <span class="hl str">'K'</span> <span class="hl sym">},</span>
    <span class="hl sym">{</span> <span class="hl num">0.02</span><span class="hl sym">,</span> <span class="hl str">'M'</span> <span class="hl sym">},</span>
    <span class="hl sym">{</span> <span class="hl num">0.02</span><span class="hl sym">,</span> <span class="hl str">'N'</span> <span class="hl sym">},</span>
    <span class="hl sym">{</span> <span class="hl num">0.02</span><span class="hl sym">,</span> <span class="hl str">'R'</span> <span class="hl sym">},</span>
    <span class="hl sym">{</span> <span class="hl num">0.02</span><span class="hl sym">,</span> <span class="hl str">'S'</span> <span class="hl sym">},</span>
    <span class="hl sym">{</span> <span class="hl num">0.02</span><span class="hl sym">,</span> <span class="hl str">'V'</span> <span class="hl sym">},</span>
    <span class="hl sym">{</span> <span class="hl num">0.02</span><span class="hl sym">,</span> <span class="hl str">'W'</span> <span class="hl sym">},</span>
    <span class="hl sym">{</span> <span class="hl num">0.02</span><span class="hl sym">,</span> <span class="hl str">'Y'</span> <span class="hl sym">}</span>
<span class="hl sym">};</span>

<span class="hl dir">#define IUB_LEN (sizeof (iub) / sizeof (struct aminoacids))</span>

<span class="hl kwb">static struct</span> aminoacids homosapiens<span class="hl sym">[] = {</span>
    <span class="hl sym">{</span> <span class="hl num">0.3029549426680</span><span class="hl sym">,</span> <span class="hl str">'a'</span> <span class="hl sym">},</span>
    <span class="hl sym">{</span> <span class="hl num">0.1979883004921</span><span class="hl sym">,</span> <span class="hl str">'c'</span> <span class="hl sym">},</span>
    <span class="hl sym">{</span> <span class="hl num">0.1975473066391</span><span class="hl sym">,</span> <span class="hl str">'g'</span> <span class="hl sym">},</span>
    <span class="hl sym">{</span> <span class="hl num">0.3015094502008</span><span class="hl sym">,</span> <span class="hl str">'t'</span> <span class="hl sym">},</span>
<span class="hl sym">};</span>

<span class="hl dir">#define HOMOSAPIENS_LEN (sizeof (homosapiens) / sizeof (struct aminoacids))</span>

<span class="hl kwb">static char</span> <span class="hl sym">*</span> alu <span class="hl sym">=</span>
   <span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span> \
   <span class="hl str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span> \
   <span class="hl str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span> \
   <span class="hl str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span> \
   <span class="hl str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span> \
   <span class="hl str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span> \
   <span class="hl str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="hl sym">;</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span> <span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">*</span> argv<span class="hl sym">[]) {</span>
    <span class="hl kwb">int</span> n <span class="hl sym">=</span> <span class="hl num">1000</span><span class="hl sym">;</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>argc <span class="hl sym">&gt;</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwd">sscanf</span> <span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">],</span> <span class="hl str">&quot;%d&quot;</span><span class="hl sym">, &amp;</span>n<span class="hl sym">);</span>
    <span class="hl kwd">make_cumulative</span> <span class="hl sym">(</span>iub<span class="hl sym">,</span> IUB_LEN<span class="hl sym">);</span>
    <span class="hl kwd">make_cumulative</span> <span class="hl sym">(</span>homosapiens<span class="hl sym">,</span> HOMOSAPIENS_LEN<span class="hl sym">);</span>

    <span class="hl kwd">printf</span> <span class="hl sym">(</span><span class="hl str">&quot;&gt;ONE Homo sapiens alu</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">);</span>
    <span class="hl kwd">repeat_fasta</span> <span class="hl sym">(</span> alu<span class="hl sym">,</span> n<span class="hl sym">*</span><span class="hl num">2</span><span class="hl sym">);</span>
    <span class="hl kwd">printf</span> <span class="hl sym">(</span><span class="hl str">&quot;&gt;TWO IUB ambiguity codes</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">);</span>
    <span class="hl kwd">random_fasta</span> <span class="hl sym">(</span> iub<span class="hl sym">,</span>   n<span class="hl sym">*</span><span class="hl num">3</span><span class="hl sym">);</span>
    <span class="hl kwd">printf</span> <span class="hl sym">(</span><span class="hl str">&quot;&gt;THREE Homo sapiens frequency</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">);</span>
    <span class="hl kwd">random_fasta</span> <span class="hl sym">(</span> homosapiens<span class="hl sym">,</span>  n<span class="hl sym">*</span><span class="hl num">5</span><span class="hl sym">);</span>

    <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

