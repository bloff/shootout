<source>
<def></def><com>/* The Computer Language Shootout</com><br />
<com> * http://shootout.alioth.debian.org/</com><br />
<com> * contributed by Joern Inge Vestgaarden</com><br />
<com> * Compile with gcc -O3 -fomit-frame-pointer -march=pentium4 -mfpmath=sse -msse2 -o fasta fasta.c</com><br />
<com> */</com><def></def><br />
<br />
<dir>#include &lt;stdio.h&gt;</dir><br />
<def></def><dir>#include &lt;stdlib.h&gt;</dir><br />
<def></def><dir>#include &lt;string.h&gt;</dir><br />
<def></def><br />
<dir>#define MIN(a,b) ((a) &lt;= (b) ? (a) : (b))</dir><br />
<def></def><dir>#define LINE_LEN 60</dir><br />
<def></def><br />
<dir>#define IM 139968</dir><br />
<def></def><dir>#define IA   3877</dir><br />
<def></def><dir>#define IC  29573</dir><br />
<def></def><kwb>int</kwb> <def>global_last</def> <sym>=</sym> <def></def><num>42</num><def></def><sym>;</sym><br />
<def></def><dir>#define gen_random(max) (max*((global_last = (global_last * IA + IC) % IM) / ((float)(IM))))</dir><br />
<def></def><br />
<kwb>struct</kwb> <def>aminoacids</def> <sym>{</sym><br />
<def></def>  <kwb>float</kwb> <def>p</def><sym>;</sym><br />
<def></def>  <kwb>char</kwb> <def>c</def><sym>;</sym><br />
<def></def><sym>};</sym><br />
<def></def><br />
<kwb>void</kwb> <def></def><kwd>make_cumulative</kwd> <def></def><sym>(</sym><def></def><kwb>struct</kwb> <def>aminoacids</def> <sym>*</sym> <def>genelist</def><sym>,</sym> <def></def><kwb>int</kwb> <def>count</def><sym>) {</sym><br />
<def></def>    <kwb>float</kwb> <def>cp</def> <sym>=</sym> <def></def><num>0.0</num><def></def><sym>;</sym><br />
<def></def>    <kwb>int</kwb> <def>i</def><sym>;</sym><br />
<def></def>    <kwa>for</kwa> <def></def><sym>(</sym><def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>count</def><sym>;</sym> <def>i</def><sym>++) {</sym><br />
<def>        cp</def> <sym>+=</sym> <def>genelist</def><sym>[</sym><def>i</def><sym>].</sym><def>p</def><sym>;</sym><br />
<def>        genelist</def><sym>[</sym><def>i</def><sym>].</sym><def>p</def> <sym>=</sym> <def>cp</def><sym>;</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>void</kwb> <def></def><kwd>repeat_fasta</kwd> <def></def><sym>(</sym><def></def><kwb>const char</kwb> <def></def><sym>*</sym><def>s</def><sym>,</sym> <def></def><kwb>int</kwb> <def>n</def><sym>) {</sym><br />
<def></def>  <kwb>int</kwb> <def>len</def> <sym>=</sym> <def></def><kwd>strlen</kwd><def></def><sym>(</sym><def>s</def><sym>);</sym><br />
<def></def>  <kwb>int</kwb> <def>pos</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>  <kwa>while</kwa> <def></def><sym>(</sym><def>n</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>) {</sym><br />
<def></def>    <kwb>const int</kwb> <def>line</def> <sym>=</sym> <def></def><kwd>MIN</kwd><def></def><sym>(</sym><def>LINE_LEN</def><sym>,</sym> <def>n</def><sym>);</sym><br />
<def></def>    <kwb>const int</kwb> <def>left</def> <sym>=</sym> <def>len</def><sym>-</sym><def>pos</def><sym>;</sym><br />
<def>    n</def> <sym>-=</sym> <def>line</def><sym>;</sym><br />
<def></def>    <kwa>if</kwa> <def></def><sym>(</sym><def>left</def> <sym>&gt;=</sym> <def>line</def><sym>) {</sym>     <def></def><com>/* Line not broken */</com><def></def><br />
      <kwd>fwrite</kwd><def></def><sym>(</sym><def>s</def><sym>+</sym><def>pos</def><sym>,</sym><def></def><num>1</num><def></def><sym>,</sym><def>line</def><sym>,</sym><def>stdout</def><sym>);</sym><br />
<def></def>      <kwd>putc</kwd><def></def><sym>(</sym><def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>,</sym> <def>stdout</def><sym>);</sym><br />
<def>      pos</def> <sym>+=</sym> <def>line</def><sym>;</sym><br />
<def></def>    <sym>}</sym> <def></def><kwa>else</kwa> <def></def><sym>{</sym>                <def></def><com>/* Line broken */</com><def></def><br />
      <kwd>fwrite</kwd><def></def><sym>(</sym><def>s</def><sym>+</sym><def>pos</def><sym>,</sym><def></def><num>1</num><def></def><sym>,</sym><def>left</def><sym>,</sym><def>stdout</def><sym>);</sym><br />
<def>      pos</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>      <kwd>fwrite</kwd><def></def><sym>(</sym><def>s</def><sym>,</sym><def></def><num>1</num><def></def><sym>,</sym><def>line</def><sym>-</sym><def>left</def><sym>,</sym><def>stdout</def><sym>);</sym><br />
<def>      pos</def> <sym>+=</sym> <def>line</def> <sym>-</sym> <def>left</def><sym>;</sym><br />
<def></def>      <kwd>putc</kwd><def></def><sym>(</sym><def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>,</sym> <def>stdout</def><sym>);</sym><br />
<def></def>    <sym>}</sym><br />
<def></def>  <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>void</kwb> <def></def><kwd>random_fasta</kwd> <def></def><sym>(</sym><def></def><kwb>struct</kwb> <def>aminoacids</def> <sym>*</sym> <def>genelist</def><sym>,</sym> <def></def><kwb>int</kwb> <def>n</def><sym>) {</sym><br />
<def></def>  <kwb>char</kwb> <def>buf</def><sym>[</sym><def>LINE_LEN</def><sym>+</sym><def></def><num>1</num><def></def><sym>];</sym><br />
<def></def>  <kwb>char</kwb> <def></def><sym>*</sym><def>s</def> <sym>=</sym> <def>NULL</def><sym>;</sym><br />
<def></def>  <kwb>struct</kwb> <def>aminoacids</def> <sym>*</sym><def>a</def> <sym>=</sym> <def>genelist</def><sym>;</sym><br />
<def></def>  <kwb>float</kwb> <def>r</def><sym>;</sym><br />
<def></def>  <kwa>while</kwa> <def></def><sym>(</sym><def>n</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>) {</sym><br />
<def></def>    <kwb>const int</kwb> <def>line</def> <sym>=</sym> <def></def><kwd>MIN</kwd><def></def><sym>(</sym><def>LINE_LEN</def><sym>,</sym> <def>n</def><sym>);</sym><br />
<def></def>    <kwb>const char</kwb> <def></def><sym>*</sym><def>end</def> <sym>= (</sym><def></def><kwb>char</kwb> <def></def><sym>*)</sym><def>buf</def> <sym>+</sym> <def>line</def><sym>;</sym><br />
<def>    n</def> <sym>-=</sym> <def>line</def><sym>;</sym><br />
<def>    s</def> <sym>=</sym> <def>buf</def><sym>;</sym><br />
<def></def>    <kwa>while</kwa> <def></def><sym>(</sym><def>s</def> <sym>&lt;</sym> <def>end</def><sym>) {</sym><br />
<def>      r</def> <sym>=</sym> <def></def><kwd>gen_random</kwd><def></def><sym>(</sym><def></def><num>1.0</num><def></def><sym>);</sym><br />
<def>      a</def> <sym>=</sym> <def>genelist</def><sym>;</sym><br />
<def></def>      <kwa>while</kwa> <def></def><sym>(*((</sym><def></def><kwb>float</kwb> <def></def><sym>*)</sym><def>a</def><sym>) &lt;</sym> <def>r</def><sym>) ++</sym><def>a</def><sym>;</sym> <def></def><com>/* Linear search */</com><def></def><br />
      <sym>*</sym><def>s</def><sym>++ =</sym> <def>a</def><sym>-&gt;</sym><def>c</def><sym>;</sym><br />
<def></def>    <sym>}</sym><br />
<def></def>    <sym>*</sym><def>s</def> <sym>=</sym> <def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>;</sym><br />
<def></def>    <kwd>fwrite</kwd><def></def><sym>(</sym><def>buf</def><sym>,</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>line</def><sym>+</sym><def></def><num>1</num><def></def><sym>,</sym> <def>stdout</def><sym>);</sym><br />
<def></def>  <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<br />
<com>/* Main -- define alphabets, make 3 fragments */</com><def></def><br />
<br />
<kwb>static struct</kwb> <def>aminoacids iub</def><sym>[] = {</sym><br />
<def></def>    <sym>{</sym> <def></def><num>0.27</num><def></def><sym>,</sym> <def></def><str>'a'</str><def></def> <sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><num>0.12</num><def></def><sym>,</sym> <def></def><str>'c'</str><def></def> <sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><num>0.12</num><def></def><sym>,</sym> <def></def><str>'g'</str><def></def> <sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><num>0.27</num><def></def><sym>,</sym> <def></def><str>'t'</str><def></def> <sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><num>0.02</num><def></def><sym>,</sym> <def></def><str>'B'</str><def></def> <sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><num>0.02</num><def></def><sym>,</sym> <def></def><str>'D'</str><def></def> <sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><num>0.02</num><def></def><sym>,</sym> <def></def><str>'H'</str><def></def> <sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><num>0.02</num><def></def><sym>,</sym> <def></def><str>'K'</str><def></def> <sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><num>0.02</num><def></def><sym>,</sym> <def></def><str>'M'</str><def></def> <sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><num>0.02</num><def></def><sym>,</sym> <def></def><str>'N'</str><def></def> <sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><num>0.02</num><def></def><sym>,</sym> <def></def><str>'R'</str><def></def> <sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><num>0.02</num><def></def><sym>,</sym> <def></def><str>'S'</str><def></def> <sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><num>0.02</num><def></def><sym>,</sym> <def></def><str>'V'</str><def></def> <sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><num>0.02</num><def></def><sym>,</sym> <def></def><str>'W'</str><def></def> <sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><num>0.02</num><def></def><sym>,</sym> <def></def><str>'Y'</str><def></def> <sym>}</sym><br />
<def></def><sym>};</sym><br />
<def></def><br />
<dir>#define IUB_LEN (sizeof (iub) / sizeof (struct aminoacids))</dir><br />
<def></def><br />
<kwb>static struct</kwb> <def>aminoacids homosapiens</def><sym>[] = {</sym><br />
<def></def>    <sym>{</sym> <def></def><num>0.3029549426680</num><def></def><sym>,</sym> <def></def><str>'a'</str><def></def> <sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><num>0.1979883004921</num><def></def><sym>,</sym> <def></def><str>'c'</str><def></def> <sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><num>0.1975473066391</num><def></def><sym>,</sym> <def></def><str>'g'</str><def></def> <sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><num>0.3015094502008</num><def></def><sym>,</sym> <def></def><str>'t'</str><def></def> <sym>},</sym><br />
<def></def><sym>};</sym><br />
<def></def><br />
<dir>#define HOMOSAPIENS_LEN (sizeof (homosapiens) / sizeof (struct aminoacids))</dir><br />
<def></def><br />
<kwb>static char</kwb> <def></def><sym>*</sym> <def>alu</def> <sym>=</sym><br />
<def></def>   <str>&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</str><def> \</def><br />
   <str>&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</str><def> \</def><br />
   <str>&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</str><def> \</def><br />
   <str>&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</str><def> \</def><br />
   <str>&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</str><def> \</def><br />
   <str>&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</str><def> \</def><br />
   <str>&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</str><def></def><sym>;</sym><br />
<def></def><br />
<kwb>int</kwb> <def></def><kwd>main</kwd> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>argc</def><sym>,</sym> <def></def><kwb>char</kwb> <def></def><sym>*</sym> <def>argv</def><sym>[]) {</sym><br />
<def></def>    <kwb>int</kwb> <def>n</def> <sym>=</sym> <def></def><num>1000</num><def></def><sym>;</sym><br />
<def></def>    <kwa>if</kwa> <def></def><sym>(</sym><def>argc</def> <sym>&gt;</sym> <def></def><num>1</num><def></def><sym>)</sym> <def></def><kwd>sscanf</kwd> <def></def><sym>(</sym><def>argv</def><sym>[</sym><def></def><num>1</num><def></def><sym>],</sym> <def></def><str>&quot;%d&quot;</str><def></def><sym>, &amp;</sym><def>n</def><sym>);</sym><br />
<def></def>    <kwd>make_cumulative</kwd> <def></def><sym>(</sym><def>iub</def><sym>,</sym> <def>IUB_LEN</def><sym>);</sym><br />
<def></def>    <kwd>make_cumulative</kwd> <def></def><sym>(</sym><def>homosapiens</def><sym>,</sym> <def>HOMOSAPIENS_LEN</def><sym>);</sym><br />
<def></def><br />
    <kwd>printf</kwd> <def></def><sym>(</sym><def></def><str>&quot;&gt;ONE Homo sapiens alu</str><esc>\n</esc><str>&quot;</str><def></def><sym>);</sym><br />
<def></def>    <kwd>repeat_fasta</kwd> <def></def><sym>(</sym> <def>alu</def><sym>,</sym> <def>n</def><sym>*</sym><def></def><num>2</num><def></def><sym>);</sym><br />
<def></def>    <kwd>printf</kwd> <def></def><sym>(</sym><def></def><str>&quot;&gt;TWO IUB ambiguity codes</str><esc>\n</esc><str>&quot;</str><def></def><sym>);</sym><br />
<def></def>    <kwd>random_fasta</kwd> <def></def><sym>(</sym> <def>iub</def><sym>,</sym>   <def>n</def><sym>*</sym><def></def><num>3</num><def></def><sym>);</sym><br />
<def></def>    <kwd>printf</kwd> <def></def><sym>(</sym><def></def><str>&quot;&gt;THREE Homo sapiens frequency</str><esc>\n</esc><str>&quot;</str><def></def><sym>);</sym><br />
<def></def>    <kwd>random_fasta</kwd> <def></def><sym>(</sym> <def>homosapiens</def><sym>,</sym>  <def>n</def><sym>*</sym><def></def><num>5</num><def></def><sym>);</sym><br />
<def></def><br />
    <kwa>return</kwa> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
</source>
