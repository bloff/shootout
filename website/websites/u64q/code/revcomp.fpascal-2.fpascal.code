<source>
<def></def><com>{  The Computer Language Shootout</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com>   contributed by Marco van de Voort</com><br />
<com>}</com><def></def><br />
<br />
<kwa>program</kwa> <def>reverse_complement</def><sym>;</sym><br />
<def></def><br />
<com>{$mode delphi}</com><def></def><br />
<br />
<kwa>var</kwa> <def>lookupComplement</def> <sym>:</sym> <def></def><kwa>array</kwa><def></def><sym>[</sym><def></def><esc>#0</esc><def></def><sym>..</sym><def></def><esc>#255</esc><def></def><sym>]</sym> <def></def><kwa>of</kwa> <def></def><kwb>char</kwb><def></def><sym>;</sym><br />
<def></def><br />
<kwa>Const</kwa> <def>FASTAXLAT</def> <sym>:</sym> <def></def><kwa>array</kwa><def></def><sym>[</sym><def></def><num>0</num><def></def><sym>.</sym><def></def><num>.11</num><def></def><sym>]</sym> <def></def><kwa>of array</kwa><def></def><sym>[</sym><def></def><num>0</num><def></def><sym>.</sym><def></def><num>.1</num><def></def><sym>]</sym> <def></def><kwa>of</kwa> <def></def><kwb>char</kwb> <def></def><sym>= (</sym><br />
<def></def>		  <sym>(</sym> <def></def><str>'A'</str><def></def><sym>,</sym> <def></def><str>'T'</str><def></def> <sym>), (</sym> <def></def><str>'C'</str><def></def><sym>,</sym> <def></def><str>'G'</str><def></def> <sym>),</sym><br />
<def></def>		  <sym>(</sym> <def></def><str>'B'</str><def></def><sym>,</sym> <def></def><str>'V'</str><def></def> <sym>), (</sym> <def></def><str>'D'</str><def></def><sym>,</sym> <def></def><str>'H'</str><def></def> <sym>),</sym><br />
<def></def>	          <sym>(</sym> <def></def><str>'K'</str><def></def><sym>,</sym> <def></def><str>'M'</str><def></def> <sym>), (</sym> <def></def><str>'R'</str><def></def><sym>,</sym> <def></def><str>'Y'</str><def></def> <sym>),</sym><br />
<def></def>		  <sym>(</sym> <def></def><str>'a'</str><def></def><sym>,</sym> <def></def><str>'t'</str><def></def> <sym>), (</sym> <def></def><str>'c'</str><def></def><sym>,</sym> <def></def><str>'g'</str><def></def> <sym>),</sym><br />
<def></def>		  <sym>(</sym> <def></def><str>'b'</str><def></def><sym>,</sym> <def></def><str>'v'</str><def></def> <sym>), (</sym> <def></def><str>'d'</str><def></def><sym>,</sym> <def></def><str>'h'</str><def></def> <sym>),</sym><br />
<def></def>	          <sym>(</sym> <def></def><str>'k'</str><def></def><sym>,</sym> <def></def><str>'m'</str><def></def> <sym>), (</sym> <def></def><str>'r'</str><def></def><sym>,</sym> <def></def><str>'y'</str><def></def> <sym>));</sym><br />
<def><br />
      BufferIncrement</def> <sym>=</sym> <def></def><num>1024</num><def></def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def></def><kwd>flushbuffer</kwd><def></def><sym>(</sym><def>buffer</def><sym>:</sym><def>pchar</def><sym>;</sym><def>inbuf</def><sym>:</sym><def></def><kwb>longint</kwb><def></def><sym>);</sym><br />
<def></def><br />
<kwa>var</kwa> <def>p</def><sym>,</sym><def>p2</def> <sym>:</sym> <def>pchar</def><sym>;</sym><br />
<def>    c</def>  <sym>:</sym> <def></def><kwb>char</kwb><def></def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def></def>  <kwa>if</kwa> <def>inbuf</def><sym>&gt;</sym><def></def><num>0</num> <def></def><kwa>then</kwa><br />
<def></def>   <kwa>begin</kwa><br />
<def>     p</def><sym>:=</sym><def>buffer</def><sym>;</sym><br />
<def>     p2</def><sym>:=@</sym><def>buffer</def><sym>[</sym><def>inbuf</def><sym>-</sym><def></def><num>1</num><def></def><sym>];</sym><br />
<def></def>     <kwa>while</kwa> <def>p</def><sym>&lt;</sym><def>p2</def> <kwa>do</kwa><br />
<def></def>      <kwa>begin</kwa><br />
<def>       c</def><sym>:=</sym><def>lookupcomplement</def><sym>[</sym><def>p</def><sym>^];</sym><br />
<def>       p</def><sym>^:=</sym><def>lookupcomplement</def><sym>[</sym><def>p2</def><sym>^];</sym><br />
<def>       p2</def><sym>^:=</sym><def>c</def><sym>;</sym><br />
<def></def>       <kwd>inc</kwd><def></def><sym>(</sym><def>p</def><sym>);</sym><br />
<def></def>       <kwd>dec</kwd><def></def><sym>(</sym><def>p2</def><sym>);</sym><br />
<def></def>     <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>    <kwa>if</kwa> <def>p2</def><sym>=</sym><def>p</def> <kwa>then</kwa><br />
<def>      p</def><sym>^:=</sym><def>lookupcomplement</def><sym>[</sym><def>p</def><sym>^];</sym><br />
<def><br />
    p</def><sym>:=</sym><def>buffer</def><sym>;</sym><br />
<def>    p</def><sym>[</sym><def>inbuf</def><sym>]:=</sym><def></def><esc>#0</esc><def></def><sym>;</sym><br />
<def></def><br />
   <kwa>while</kwa> <def></def><sym>(</sym><def>inbuf</def> <sym>&gt;</sym> <def></def><num>60</num><def></def><sym>)</sym> <def></def><kwa>do</kwa><br />
<def></def>     <kwa>begin</kwa><br />
<def>    	c</def> <sym>:=</sym> <def>p</def><sym>[</sym><def></def><num>60</num><def></def><sym>];</sym><br />
<def>	p</def><sym>[</sym><def></def><num>60</num><def></def><sym>]:=</sym><def></def><esc>#0</esc><def></def><sym>;</sym><br />
<def></def>        <kwd>writeln</kwd><def></def><sym>(</sym><def>p</def><sym>);</sym><br />
<def>        p</def><sym>[</sym><def></def><num>60</num><def></def><sym>]:=</sym><def>c</def><sym>;</sym><br />
<def></def>	<kwd>inc</kwd><def></def><sym>(</sym><def>p</def><sym>,</sym><def></def><num>60</num><def></def><sym>);</sym><br />
<def></def>	<kwd>dec</kwd><def></def><sym>(</sym><def>inbuf</def><sym>,</sym><def></def><num>60</num><def></def><sym>);</sym><br />
<def></def>     <kwa>end</kwa><def></def><sym>;</sym><br />
<def>     p</def><sym>[</sym><def>inbuf</def><sym>]:=</sym><def></def><esc>#0</esc><def></def><sym>;</sym><br />
<def></def>     <kwd>writeln</kwd><def></def><sym>(</sym><def>p</def><sym>);</sym><br />
<def></def>  <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>const</kwa> <def>initialincrement</def><sym>=</sym><def></def><num>1024</num><def></def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def>run</def><sym>;</sym><br />
<def></def><br />
<kwa>var</kwa> <def>s</def>  <sym>:</sym> <def></def><kwa>string</kwa><def></def><sym>;</sym><br />
<def>    c</def>  <sym>:</sym> <def></def><kwb>char</kwb><def></def><sym>;</sym><br />
<def>    buffersize</def><sym>,</sym><br />
<def>    bufferptr</def><sym>,</sym><br />
<def>    len</def>		<sym>:</sym> <def></def><kwb>longint</kwb><def></def><sym>;</sym><br />
<def>    p</def>  <sym>:</sym><def>pchar</def><sym>;</sym><br />
<def>    line</def> <sym>:</sym> <def></def><kwb>integer</kwb><def></def><sym>;</sym><br />
<def>    bufin</def><sym>,</sym><def>bufout</def> <sym>:</sym> <def></def><kwa>array</kwa><def></def><sym>[</sym><def></def><num>0</num><def></def><sym>.</sym><def></def><num>.8191</num><def></def><sym>]</sym> <def></def><kwa>of</kwa> <def></def><kwb>char</kwb><def></def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def></def>  <kwd>settextbuf</kwd><def></def><sym>(</sym><def>input</def><sym>,</sym><def>bufin</def><sym>);</sym><br />
<def></def>  <kwd>settextbuf</kwd><def></def><sym>(</sym><def>output</def><sym>,</sym><def>bufout</def><sym>);</sym><br />
<def></def>  <kwa>for</kwa> <def>c</def><sym>:=</sym><def></def><esc>#0</esc>  <def></def><kwa>to</kwa> <def></def><esc>#255</esc>  <def></def><kwa>do</kwa><br />
<def>    lookupcomplement</def><sym>[</sym><def>c</def><sym>]:=</sym><def>c</def><sym>;</sym><br />
<def></def>  <kwa>for</kwa> <def>len</def><sym>:=</sym><def></def><num>0</num> <def></def><kwa>to</kwa> <def></def><kwd>high</kwd><def></def><sym>(</sym><def>FASTAXLAT</def><sym>)</sym> <def></def><kwa>do</kwa><br />
<def></def>    <kwa>begin</kwa><br />
<def>      lookupcomplement</def><sym>[</sym><def>FASTAXLAT</def><sym>[</sym><def>len</def><sym>][</sym><def></def><num>0</num><def></def><sym>]]:=</sym><def></def><kwd>upcase</kwd><def></def><sym>(</sym><def>FASTAXLAT</def><sym>[</sym><def>len</def><sym>][</sym><def></def><num>1</num><def></def><sym>]);</sym><br />
<def>      lookupcomplement</def><sym>[</sym><def>FASTAXLAT</def><sym>[</sym><def>len</def><sym>][</sym><def></def><num>1</num><def></def><sym>]]:=</sym><def></def><kwd>upcase</kwd><def></def><sym>(</sym><def>FASTAXLAT</def><sym>[</sym><def>len</def><sym>][</sym><def></def><num>0</num><def></def><sym>]);</sym><br />
<def></def>    <kwa>end</kwa><def></def><sym>;</sym><br />
<def>  buffersize</def><sym>:=</sym><def>initialincrement</def><sym>;</sym><br />
<def>  bufferptr</def> <sym>:=</sym><def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>  <kwd>getmem</kwd><def></def><sym>(</sym><def>p</def><sym>,</sym><def>buffersize</def><sym>);</sym><br />
<def>  line</def><sym>:=</sym><def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>  <kwa>while not</kwa> <def>eof</def> <kwa>do</kwa><br />
<def></def>    <kwa>begin</kwa><br />
<def></def>      <kwd>readln</kwd><def></def><sym>(</sym><def>s</def><sym>);</sym><br />
<def></def>      <kwd>inc</kwd><def></def><sym>(</sym><def>line</def><sym>);</sym><br />
<def>      len</def><sym>:=</sym><def></def><kwd>length</kwd><def></def><sym>(</sym><def>s</def><sym>);</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>len</def><sym>&gt;</sym><def></def><num>0</num><def></def><sym>)</sym> <def></def><kwa>and</kwa> <def></def><sym>(</sym><def>s</def><sym>[</sym><def></def><num>1</num><def></def><sym>]=</sym><def></def><str>'&gt;'</str><def></def><sym>)</sym> <def></def><kwa>then</kwa><br />
<def></def>          <kwa>begin</kwa><br />
<def></def>	    <kwd>flushbuffer</kwd><def></def><sym>(</sym><def>p</def><sym>,</sym><def>bufferptr</def><sym>);</sym><br />
<def></def> 	    <kwd>writeln</kwd><def></def><sym>(</sym><def>s</def><sym>);</sym><br />
<def>	    bufferptr</def><sym>:=</sym><def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>	  <kwa>end</kwa><br />
<def></def>       <kwa>else</kwa><br />
<def></def>         <kwa>begin</kwa><br />
<def></def>           <kwa>if</kwa> <def></def><sym>(</sym><def>bufferptr</def><sym>+</sym><def>len</def><sym>+</sym><def></def><num>1</num><def></def><sym>)&gt;</sym><def>buffersize</def> <kwa>then</kwa><br />
<def></def>	     <kwa>begin</kwa><br />
<def></def>	        <kwd>inc</kwd><def></def><sym>(</sym><def>buffersize</def><sym>,</sym><def>buffersize</def><sym>);</sym><br />
<def></def><slc>//	        inc(buffersize,initialincrement);</slc><br />
<def></def>                <kwd>reallocmem</kwd><def></def><sym>(</sym><def>p</def><sym>,</sym><def>buffersize</def><sym>);</sym><br />
<def></def>	     <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>	   <kwd>move</kwd> <def></def><sym>(</sym><def>s</def><sym>[</sym><def></def><num>1</num><def></def><sym>],</sym><def>p</def><sym>[</sym><def>bufferptr</def><sym>],</sym><def>len</def><sym>);</sym><br />
<def></def>	   <kwd>inc</kwd><def></def><sym>(</sym><def>bufferptr</def><sym>,</sym><def>len</def><sym>);</sym><br />
<def></def>	 <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>    <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>    <kwd>flushbuffer</kwd><def></def><sym>(</sym><def>p</def><sym>,</sym><def>bufferptr</def><sym>);</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def>  run</def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>.</sym><def></def><br />
</source>
