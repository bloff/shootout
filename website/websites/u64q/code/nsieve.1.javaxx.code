<span class="hl com">/* The Great Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Alexei Svitkine</span>
<span class="hl com">*/</span>

<span class="hl kwa">public class</span> nsieve
<span class="hl sym">{</span>
   <span class="hl kwa">static</span> <span class="hl kwb">int</span> <span class="hl kwd">nsieve</span><span class="hl sym">(</span><span class="hl kwb">int</span> m<span class="hl sym">,</span> <span class="hl kwb">boolean</span><span class="hl sym">[]</span> isPrime<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">2</span><span class="hl sym">;</span> i <span class="hl sym">&lt;=</span> m<span class="hl sym">;</span> i<span class="hl sym">++)</span> isPrime<span class="hl sym">[</span>i<span class="hl sym">] =</span> true<span class="hl sym">;</span>
      <span class="hl kwb">int</span> count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">2</span><span class="hl sym">;</span> i <span class="hl sym">&lt;=</span> m<span class="hl sym">;</span> i<span class="hl sym">++) {</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>isPrime<span class="hl sym">[</span>i<span class="hl sym">]) {</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> k<span class="hl sym">=</span>i<span class="hl sym">+</span>i<span class="hl sym">;</span> k <span class="hl sym">&lt;=</span> m<span class="hl sym">;</span> k<span class="hl sym">+=</span>i<span class="hl sym">)</span> isPrime<span class="hl sym">[</span>k<span class="hl sym">] =</span> false<span class="hl sym">;</span>
            count<span class="hl sym">++;</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">return</span> count<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">public static</span> <span class="hl kwc">String</span> <span class="hl kwd">padNumber</span><span class="hl sym">(</span><span class="hl kwb">int</span> number<span class="hl sym">,</span> <span class="hl kwb">int</span> fieldLen<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwc">StringBuffer</span> sb <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">StringBuffer</span><span class="hl sym">();</span>
      <span class="hl kwc">String</span> bareNumber <span class="hl sym">=</span> <span class="hl str">&quot;&quot;</span> <span class="hl sym">+</span> number<span class="hl sym">;</span>
      <span class="hl kwb">int</span> numSpaces <span class="hl sym">=</span> fieldLen <span class="hl sym">-</span> bareNumber<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">();</span>

      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> numSpaces<span class="hl sym">;</span> i<span class="hl sym">++)</span>
         sb<span class="hl sym">.</span><span class="hl kwd">append</span><span class="hl sym">(</span><span class="hl str">&quot; &quot;</span><span class="hl sym">);</span>

      sb<span class="hl sym">.</span><span class="hl kwd">append</span><span class="hl sym">(</span>bareNumber<span class="hl sym">);</span>

      <span class="hl kwa">return</span> sb<span class="hl sym">.</span><span class="hl kwd">toString</span><span class="hl sym">();</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwb">int</span> n <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">;</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>args<span class="hl sym">.</span>length <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> n <span class="hl sym">=</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span><span class="hl kwd">parseInt</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>n <span class="hl sym">&lt;</span> <span class="hl num">2</span><span class="hl sym">)</span> n <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">;</span>

      <span class="hl kwb">int</span> m <span class="hl sym">= (</span><span class="hl num">1</span><span class="hl sym">&lt;&lt;</span>n<span class="hl sym">)*</span><span class="hl num">10000</span><span class="hl sym">;</span>
      <span class="hl kwb">boolean</span><span class="hl sym">[]</span> flags <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">boolean</span><span class="hl sym">[</span>m<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">];</span>

      <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span><span class="hl str">&quot;Primes up to &quot;</span> <span class="hl sym">+</span> <span class="hl kwd">padNumber</span><span class="hl sym">(</span>m<span class="hl sym">,</span> <span class="hl num">8</span><span class="hl sym">) +</span> <span class="hl str">&quot; &quot;</span> <span class="hl sym">+</span> <span class="hl kwd">padNumber</span><span class="hl sym">(</span><span class="hl kwd">nsieve</span><span class="hl sym">(</span>m<span class="hl sym">,</span>flags<span class="hl sym">),</span> <span class="hl num">8</span><span class="hl sym">));</span>
      m <span class="hl sym">= (</span><span class="hl num">1</span><span class="hl sym">&lt;&lt;</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)*</span><span class="hl num">10000</span><span class="hl sym">;</span>
      <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span><span class="hl str">&quot;Primes up to &quot;</span> <span class="hl sym">+</span> <span class="hl kwd">padNumber</span><span class="hl sym">(</span>m<span class="hl sym">,</span> <span class="hl num">8</span><span class="hl sym">) +</span> <span class="hl str">&quot; &quot;</span> <span class="hl sym">+</span> <span class="hl kwd">padNumber</span><span class="hl sym">(</span><span class="hl kwd">nsieve</span><span class="hl sym">(</span>m<span class="hl sym">,</span>flags<span class="hl sym">),</span> <span class="hl num">8</span><span class="hl sym">));</span>
      m <span class="hl sym">= (</span><span class="hl num">1</span><span class="hl sym">&lt;&lt;</span>n<span class="hl sym">-</span><span class="hl num">2</span><span class="hl sym">)*</span><span class="hl num">10000</span><span class="hl sym">;</span>
      <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span><span class="hl str">&quot;Primes up to &quot;</span> <span class="hl sym">+</span> <span class="hl kwd">padNumber</span><span class="hl sym">(</span>m<span class="hl sym">,</span> <span class="hl num">8</span><span class="hl sym">) +</span> <span class="hl str">&quot; &quot;</span> <span class="hl sym">+</span> <span class="hl kwd">padNumber</span><span class="hl sym">(</span><span class="hl kwd">nsieve</span><span class="hl sym">(</span>m<span class="hl sym">,</span>flags<span class="hl sym">),</span> <span class="hl num">8</span><span class="hl sym">));</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>
