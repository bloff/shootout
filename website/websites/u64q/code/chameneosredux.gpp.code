<source>
<def></def><com>/* The Computer Language Benchmarks Game</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com></com><br />
<com>   contributed by Michael Barker</com><br />
<com>   based on a Java contribution by Luzius Meisser</com><br />
<com>   Convert to c++ by dualamd</com><br />
<com>*/</com><def></def><br />
<br />
<dir>#include &lt;iostream&gt;</dir><br />
<def></def><dir>#include &lt;pthread.h&gt;</dir><br />
<def></def><br />
<kwb>enum</kwb> <def>Colour</def><br />
<sym>{</sym><br />
<def>   blue</def>      <sym>=</sym> <def></def><num>0</num><def></def><sym>,</sym><br />
<def>   red</def>      <sym>=</sym> <def></def><num>1</num><def></def><sym>,</sym><br />
<def>   yellow</def>   <sym>=</sym> <def></def><num>2</num><def></def><sym>,</sym><br />
<def>   Invalid</def>   <sym>=</sym> <def></def><num>3</num><br />
<def></def><sym>};</sym><br />
<def></def><br />
<kwb>const char</kwb><def></def><sym>*</sym> <def>ColourName</def><sym>[] = {</sym><def></def><str>&quot;blue&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;red&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;yellow&quot;</str><def></def><sym>};</sym><br />
<def><br />
<br />
Colour</def> <kwd>doCompliment</kwd><def></def><sym>(</sym><def>Colour c1</def><sym>,</sym> <def>Colour c2</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>   <kwa>switch</kwa> <def></def><sym>(</sym><def>c1</def><sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def></def>   <kwa>case</kwa> <def>blue</def><sym>:</sym><br />
<def></def>      <kwa>switch</kwa> <def></def><sym>(</sym><def>c2</def><sym>)</sym><br />
<def></def>      <sym>{</sym><br />
<def></def>      <kwa>case</kwa> <def>blue</def><sym>:</sym><br />
<def></def>         <kwa>return</kwa> <def>blue</def><sym>;</sym><br />
<def></def>      <kwa>case</kwa> <def>red</def><sym>:</sym><br />
<def></def>         <kwa>return</kwa> <def>yellow</def><sym>;</sym><br />
<def></def>      <kwa>case</kwa> <def>yellow</def><sym>:</sym><br />
<def></def>         <kwa>return</kwa> <def>red</def><sym>;</sym><br />
<def></def>      <kwa>default</kwa><def></def><sym>:</sym><br />
<def></def>         <kwa>goto</kwa> <def>errlb</def><sym>;</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>   <kwa>case</kwa> <def>red</def><sym>:</sym><br />
<def></def>      <kwa>switch</kwa> <def></def><sym>(</sym><def>c2</def><sym>)</sym><br />
<def></def>      <sym>{</sym><br />
<def></def>      <kwa>case</kwa> <def>blue</def><sym>:</sym><br />
<def></def>         <kwa>return</kwa> <def>yellow</def><sym>;</sym><br />
<def></def>      <kwa>case</kwa> <def>red</def><sym>:</sym><br />
<def></def>         <kwa>return</kwa> <def>red</def><sym>;</sym><br />
<def></def>      <kwa>case</kwa> <def>yellow</def><sym>:</sym><br />
<def></def>         <kwa>return</kwa> <def>blue</def><sym>;</sym><br />
<def></def>      <kwa>default</kwa><def></def><sym>:</sym><br />
<def></def>         <kwa>goto</kwa> <def>errlb</def><sym>;</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>   <kwa>case</kwa> <def>yellow</def><sym>:</sym><br />
<def></def>      <kwa>switch</kwa> <def></def><sym>(</sym><def>c2</def><sym>)</sym><br />
<def></def>      <sym>{</sym><br />
<def></def>      <kwa>case</kwa> <def>blue</def><sym>:</sym><br />
<def></def>         <kwa>return</kwa> <def>red</def><sym>;</sym><br />
<def></def>      <kwa>case</kwa> <def>red</def><sym>:</sym><br />
<def></def>         <kwa>return</kwa> <def>blue</def><sym>;</sym><br />
<def></def>      <kwa>case</kwa> <def>yellow</def><sym>:</sym><br />
<def></def>         <kwa>return</kwa> <def>yellow</def><sym>;</sym><br />
<def></def>      <kwa>default</kwa><def></def><sym>:</sym><br />
<def></def>         <kwa>goto</kwa> <def>errlb</def><sym>;</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>   <kwa>default</kwa><def></def><sym>:</sym><br />
<def></def>      <kwa>break</kwa><def></def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def><br />
errlb</def><sym>:</sym><br />
<def>   std</def><sym>::</sym><def>cerr</def> <sym>&lt;&lt;</sym> <def></def><str>&quot;Invalid colour&quot;</str><def></def> <sym>&lt;&lt;</sym> <def>std</def><sym>::</sym><def>endl</def><sym>;</sym><br />
<def></def>   <kwd>exit</kwd><def></def><sym>(</sym> <def></def><num>1</num> <def></def><sym>);</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>char</kwb><def></def><sym>*</sym> <def></def><kwd>getNumber</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>n</def><sym>,</sym> <def></def><kwb>char</kwb><def></def><sym>*</sym> <def>outbuf</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>   <kwb>static const char</kwb><def></def><sym>*</sym> <def>NUMBERS</def><sym>[] =</sym><br />
<def></def>   <sym>{</sym><br />
<def></def>      <str>&quot;zero&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;one&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;two&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;three&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;four&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;five&quot;</str><def></def><sym>,</sym><br />
<def></def>      <str>&quot;six&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;seven&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;eight&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;nine&quot;</str><def></def><br />
   <sym>};</sym><br />
<def></def><br />
   <kwb>char</kwb> <def>tmp</def><sym>[</sym><def></def><num>64</num><def></def><sym>];</sym><br />
<def></def>   <kwb>int</kwb> <def>ichar</def> <sym>=</sym> <def></def><kwd>sprintf</kwd><def></def><sym>(</sym><def>tmp</def><sym>,</sym> <def></def><str>&quot;%d&quot;</str><def></def><sym>,</sym> <def>n</def><sym>);</sym><br />
<def></def>   <kwb>int</kwb> <def>ochar</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><br />
   <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>ichar</def><sym>;</sym> <def>i</def><sym>++)</sym><br />
<def>      ochar</def> <sym>+=</sym> <def></def><kwd>sprintf</kwd><def></def><sym>(</sym> <def>outbuf</def> <sym>+</sym> <def>ochar</def><sym>,</sym> <def></def><str>&quot; %s&quot;</str><def></def><sym>,</sym> <def>NUMBERS</def><sym>[</sym> <def>tmp</def><sym>[</sym><def>i</def><sym>] -</sym><def></def><str>'0'</str><def></def> <sym>] );</sym><br />
<def></def><br />
   <kwa>return</kwa> <def>outbuf</def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwc>class</kwc> <def>Pair</def><br />
<sym>{</sym><br />
<def></def><kwc>public</kwc><def></def><sym>:</sym><br />
<def></def>   <kwb>bool</kwb>   <def>two_met</def><sym>;</sym><br />
<def></def>   <kwb>bool</kwb>    <def>sameid</def><sym>;</sym><br />
<def>   Colour    colour</def><sym>;</sym><br />
<def></def><br />
   <kwb>void</kwb> <def></def><kwd>Copy</kwd><def></def><sym>(</sym><def></def><kwb>const</kwb> <def>Pair</def> <sym>&amp;</sym><def>p</def><sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def>      sameid</def>   <sym>=</sym> <def>p</def><sym>.</sym><def>sameid</def><sym>;</sym><br />
<def>      colour</def>   <sym>=</sym> <def>p</def><sym>.</sym><def>colour</def><sym>;</sym><br />
<def>      two_met</def>   <sym>=</sym> <def>p</def><sym>.</sym><def>two_met</def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwb>void</kwb> <def></def><kwd>Meet</kwd><def></def><sym>(</sym><def></def><kwb>bool</kwb> <def>sameid</def><sym>,</sym> <def>Colour c</def><sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def></def>      <kwa>this</kwa><def></def><sym>-&gt;</sym><def>sameid</def> <sym>=</sym> <def>sameid</def><sym>;</sym><br />
<def></def>      <kwa>this</kwa><def></def><sym>-&gt;</sym><def>colour</def> <sym>=</sym> <def>c</def><sym>;</sym><br />
<def>      two_met</def> <sym>=</sym> <def></def><kwa>true</kwa><def></def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwd>Pair</kwd><def></def><sym>()   {</sym>   <def>two_met</def> <sym>=</sym> <def></def><kwa>false</kwa><def></def><sym>;   }</sym><br />
<def></def><br />
<sym>};</sym><br />
<def></def><br />
<kwc>class</kwc> <def>MeetingPlace</def><br />
<sym>{</sym><br />
<def></def><kwc>private</kwc><def></def><sym>:</sym><br />
<def>   pthread_mutex_t   mutex</def><sym>;</sym><br />
<def></def><br />
   <kwb>int</kwb> <def>meetingsLeft</def><sym>;</sym><br />
<def>   Colour firstColour</def><sym>;</sym><br />
<def></def>   <kwb>int</kwb> <def>firstId</def><sym>;</sym><br />
<def><br />
   Pair</def><sym>*</sym> <def>current</def><sym>;</sym><br />
<def></def><br />
<kwc>public</kwc><def></def><sym>:</sym><br />
<def></def>   <kwd>MeetingPlace</kwd><def></def><sym>(</sym> <def></def><kwb>int</kwb> <def>meetings</def> <sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def></def>      <kwd>pthread_mutex_init</kwd><def></def><sym>( &amp;</sym><def>mutex</def><sym>,</sym> <def></def><num>0</num> <def></def><sym>);</sym><br />
<def>      meetingsLeft</def> <sym>=</sym> <def>meetings</def><sym>;</sym><br />
<def>      firstColour</def> <sym>=</sym> <def>Invalid</def><sym>;</sym><br />
<def>      firstId</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def>   <sym>~</sym><def></def><kwd>MeetingPlace</kwd><def></def><sym>()</sym><br />
<def></def>   <sym>{</sym><br />
<def></def>      <kwd>pthread_mutex_destroy</kwd><def></def><sym>( &amp;</sym><def>mutex</def> <sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwb>bool</kwb> <def></def><kwd>meet</kwd><def></def><sym>(</sym> <def></def><kwb>int</kwb> <def>id</def><sym>,</sym> <def>Colour c</def><sym>,</sym> <def>Pair</def><sym>*</sym> <def>rp</def> <sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def></def>      <kwd>pthread_mutex_lock</kwd><def></def><sym>( &amp;</sym><def>mutex</def> <sym>);</sym><br />
<def></def>      <kwb>bool</kwb> <def>retval</def> <sym>=</sym> <def></def><kwa>true</kwa><def></def><sym>;</sym><br />
<def></def><br />
      <kwa>if</kwa> <def></def><sym>(</sym> <def>meetingsLeft</def> <sym>&gt;</sym> <def></def><num>0</num> <def></def><sym>)</sym><br />
<def></def>      <sym>{</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym> <def>firstColour</def> <sym>==</sym> <def>Invalid</def> <sym>)</sym><br />
<def></def>         <sym>{</sym><br />
<def>            firstColour</def> <sym>=</sym> <def>c</def><sym>;</sym><br />
<def>            firstId</def> <sym>=</sym> <def>id</def><sym>;</sym><br />
<def><br />
            rp</def><sym>-&gt;</sym><def>two_met</def> <sym>=</sym> <def></def><kwa>false</kwa><def></def><sym>;</sym><br />
<def>            current</def> <sym>=</sym> <def>rp</def><sym>;</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>         <kwa>else</kwa><br />
<def></def>         <sym>{</sym><br />
<def>            Colour newColour</def> <sym>=</sym> <def></def><kwd>doCompliment</kwd><def></def><sym>(</sym> <def>c</def><sym>,</sym> <def>firstColour</def> <sym>);</sym><br />
<def><br />
            rp</def><sym>-&gt;</sym><def></def><kwd>Meet</kwd><def></def><sym>( (</sym><def>id</def> <sym>==</sym> <def>firstId</def><sym>),</sym> <def>newColour</def> <sym>);</sym><br />
<def>            current</def><sym>-&gt;</sym><def></def><kwd>Copy</kwd><def></def><sym>( *</sym><def>rp</def> <sym>);</sym><br />
<def><br />
            firstColour</def> <sym>=</sym> <def>Invalid</def><sym>;</sym><br />
<def>            meetingsLeft</def><sym>--;</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>      <kwa>else</kwa><br />
<def>         retval</def> <sym>=</sym> <def></def><kwa>false</kwa><def></def><sym>;</sym><br />
<def></def><br />
      <kwd>pthread_mutex_unlock</kwd><def></def><sym>( &amp;</sym><def>mutex</def> <sym>);</sym><br />
<def></def>      <kwa>return</kwa> <def>retval</def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>};</sym><br />
<def></def><br />
<br />
<br />
<kwc>class</kwc> <def>Creature</def><br />
<sym>{</sym><br />
<def></def><kwc>private</kwc><def></def><sym>:</sym><br />
<def>   pthread_t ht</def><sym>;</sym><br />
<def>   pthread_attr_t stack_att</def><sym>;</sym><br />
<def><br />
   MeetingPlace</def><sym>*</sym> <def>place</def><sym>;</sym><br />
<def></def>   <kwb>int</kwb> <def>count</def><sym>;</sym><br />
<def></def>   <kwb>int</kwb> <def>sameCount</def><sym>;</sym><br />
<def><br />
   Colour colour</def><sym>;</sym><br />
<def></def>   <kwb>int</kwb> <def>id</def><sym>;</sym><br />
<def></def><br />
   <kwb>static int</kwb> <def>creatureID</def><sym>;</sym><br />
<def></def>   <kwb>static const int</kwb> <def>STACK_SIZE</def>   <sym>=</sym> <def></def><num>32</num><def></def><sym>*</sym><def></def><num>1024</num><def></def><sym>;</sym><br />
<def></def><br />
<kwc>public</kwc><def></def><sym>:</sym><br />
<def></def>   <kwd>Creature</kwd><def></def><sym>(</sym> <def>MeetingPlace</def><sym>*</sym> <def>place</def><sym>,</sym> <def>Colour colour</def> <sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def></def>      <kwa>this</kwa><def></def><sym>-&gt;</sym><def>place</def> <sym>=</sym> <def>place</def><sym>;</sym><br />
<def></def>      <kwa>this</kwa><def></def><sym>-&gt;</sym><def>id</def> <sym>= ++</sym><def>creatureID</def><sym>;</sym><br />
<def></def>      <kwa>this</kwa><def></def><sym>-&gt;</sym><def>colour</def> <sym>=</sym> <def>colour</def><sym>;</sym><br />
<def>      count</def> <sym>=</sym> <def>sameCount</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><br />
      <kwd>pthread_attr_init</kwd><def></def><sym>( &amp;</sym><def>stack_att</def> <sym>);</sym><br />
<def></def>      <kwd>pthread_attr_setstacksize</kwd><def></def><sym>( &amp;</sym><def>stack_att</def><sym>,</sym> <def>STACK_SIZE</def> <sym>);</sym><br />
<def></def>      <kwd>pthread_create</kwd><def></def><sym>( &amp;</sym><def>ht</def><sym>, &amp;</sym><def>stack_att</def><sym>, &amp;</sym><def>Creature</def><sym>::</sym><def>ThreadRun</def><sym>, (</sym><def></def><kwb>void</kwb><def></def><sym>*)</sym><def></def><kwa>this</kwa> <def></def><sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwb>static void</kwb><def></def><sym>*</sym> <def></def><kwd>ThreadRun</kwd><def></def><sym>(</sym><def></def><kwb>void</kwb><def></def><sym>*</sym> <def>param</def><sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def>      Creature</def><sym>*</sym> <def>cr</def> <sym>= (</sym><def>Creature</def><sym>*)</sym><def>param</def><sym>;</sym><br />
<def>      cr</def><sym>-&gt;</sym><def></def><kwd>run</kwd><def></def><sym>();</sym><br />
<def></def>      <kwa>return</kwa> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwb>void</kwb> <def></def><kwd>run</kwd><def></def><sym>()</sym><br />
<def></def>   <sym>{</sym><br />
<def>      Pair</def><sym>*</sym> <def>pr</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>Pair</kwd><def></def><sym>();</sym><br />
<def></def><br />
      <kwa>while</kwa> <def></def><sym>(</sym><def></def><kwa>true</kwa><def></def><sym>)</sym><br />
<def></def>      <sym>{</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym> <def>place</def><sym>-&gt;</sym><def></def><kwd>meet</kwd><def></def><sym>(</sym> <def>id</def><sym>,</sym> <def>colour</def><sym>,</sym> <def>pr</def> <sym>) )</sym><br />
<def></def>         <sym>{</sym><br />
<def></def>            <kwa>while</kwa> <def></def><sym>(</sym><def>pr</def><sym>-&gt;</sym><def>two_met</def> <sym>==</sym> <def></def><kwa>false</kwa><def></def><sym>)</sym><br />
<def></def>               <kwd>sched_yield</kwd><def></def><sym>();</sym><br />
<def><br />
            colour</def> <sym>=</sym> <def>pr</def><sym>-&gt;</sym><def>colour</def><sym>;</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>pr</def><sym>-&gt;</sym><def>sameid</def><sym>)</sym><br />
<def>               sameCount</def><sym>++;</sym><br />
<def>            count</def><sym>++;</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>         <kwa>else</kwa><br />
<def></def>            <kwa>break</kwa><def></def><sym>;</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><br />
      <kwa>delete</kwa> <def>pr</def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwb>int</kwb> <def></def><kwd>getCount</kwd><def></def><sym>()</sym><br />
<def></def>   <sym>{</sym>   <def></def><kwa>return</kwa> <def>count</def><sym>;   }</sym><br />
<def></def><br />
   <kwb>char</kwb><def></def><sym>*</sym> <def></def><kwd>getResult</kwd><def></def><sym>(</sym><def></def><kwb>char</kwb><def></def><sym>*</sym> <def>str</def><sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def></def>      <kwb>char</kwb> <def>numstr</def><sym>[</sym><def></def><num>512</num><def></def><sym>];</sym><br />
<def></def>      <kwd>getNumber</kwd><def></def><sym>(</sym><def>sameCount</def><sym>,</sym> <def>numstr</def><sym>);</sym><br />
<def></def><br />
      <kwd>sprintf</kwd><def></def><sym>(</sym> <def>str</def><sym>,</sym> <def></def><str>&quot;%u%s&quot;</str><def></def><sym>,</sym> <def>count</def><sym>,</sym> <def>numstr</def> <sym>);</sym><br />
<def></def>      <kwa>return</kwa> <def>str</def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwb>void</kwb> <def></def><kwd>wait</kwd><def></def><sym>()</sym><br />
<def></def>   <sym>{</sym>   <def></def><kwd>pthread_join</kwd><def></def><sym>(</sym> <def>ht</def><sym>,</sym> <def></def><num>0</num> <def></def><sym>);   }</sym><br />
<def></def><sym>};</sym><br />
<def></def><br />
<kwb>int</kwb> <def>Creature</def><sym>::</sym><def>creatureID</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><br />
<br />
<kwb>void</kwb> <def></def><kwd>runGame</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>n</def><sym>,</sym> <def></def><kwb>int</kwb> <def>ncolor</def><sym>,</sym> <def></def><kwb>const</kwb> <def>Colour</def><sym>*</sym> <def>colours</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def>   MeetingPlace</def><sym>*</sym> <def>place</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>MeetingPlace</kwd><def></def><sym>(</sym><def>n</def><sym>);</sym><br />
<def>   Creature</def> <sym>**</sym><def>creatures</def> <sym>= (</sym><def>Creature</def><sym>**)</sym><def></def><kwd>calloc</kwd><def></def><sym>(</sym><def>ncolor</def><sym>,</sym> <def></def><kwa>sizeof</kwa><def></def><sym>(</sym><def>Creature</def><sym>*));</sym><br />
<def></def><br />
   <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>ncolor</def><sym>;</sym> <def>i</def><sym>++)</sym><br />
<def></def>   <sym>{</sym><br />
<def>      std</def><sym>::</sym><def>cout</def> <sym>&lt;&lt;</sym> <def>ColourName</def><sym>[</sym> <def>colours</def><sym>[</sym><def>i</def><sym>] ] &lt;&lt;</sym> <def></def><str>&quot; &quot;</str><def></def><sym>;</sym><br />
<def>      creatures</def><sym>[</sym><def>i</def><sym>] =</sym> <def></def><kwa>new</kwa> <def></def><kwd>Creature</kwd><def></def><sym>(</sym> <def>place</def><sym>,</sym> <def>colours</def><sym>[</sym><def>i</def><sym>] );</sym><br />
<def></def>   <sym>}</sym><br />
<def>   std</def><sym>::</sym><def>cout</def> <sym>&lt;&lt;</sym> <def>std</def><sym>::</sym><def>endl</def><sym>;</sym><br />
<def></def><br />
<br />
   <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>ncolor</def><sym>;</sym> <def>i</def><sym>++)</sym><br />
<def>      creatures</def><sym>[</sym><def>i</def><sym>]-&gt;</sym><def></def><kwd>wait</kwd><def></def><sym>();</sym><br />
<def></def><br />
   <kwb>int</kwb> <def>total</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>   <kwb>char</kwb> <def>str</def><sym>[</sym><def></def><num>256</num><def></def><sym>];</sym><br />
<def></def><br />
   <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>ncolor</def><sym>;</sym> <def>i</def><sym>++)</sym><br />
<def></def>   <sym>{</sym><br />
<def>      std</def><sym>::</sym><def>cout</def> <sym>&lt;&lt;</sym>  <def>creatures</def><sym>[</sym><def>i</def><sym>]-&gt;</sym><def></def><kwd>getResult</kwd><def></def><sym>(</sym><def>str</def><sym>)  &lt;&lt;</sym> <def>std</def><sym>::</sym><def>endl</def><sym>;</sym><br />
<def>      total</def> <sym>+=</sym> <def>creatures</def><sym>[</sym><def>i</def><sym>]-&gt;</sym><def></def><kwd>getCount</kwd><def></def><sym>();</sym><br />
<def></def>   <sym>}</sym><br />
<def><br />
   std</def><sym>::</sym><def>cout</def> <sym>&lt;&lt;</sym> <def></def><kwd>getNumber</kwd><def></def><sym>(</sym><def>total</def><sym>,</sym> <def>str</def><sym>) &lt;&lt;</sym> <def>std</def><sym>::</sym><def>endl</def> <sym>&lt;&lt;</sym> <def>std</def><sym>::</sym><def>endl</def><sym>;</sym><br />
<def></def><br />
   <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>ncolor</def><sym>;</sym> <def>i</def><sym>++)</sym><br />
<def></def>      <kwa>delete</kwa> <def>creatures</def><sym>[</sym><def>i</def><sym>];</sym><br />
<def></def>   <kwd>free</kwd><def></def><sym>(</sym><def>creatures</def><sym>);</sym><br />
<def></def>   <kwa>delete</kwa> <def>place</def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<br />
<kwb>void</kwb> <def></def><kwd>printColours</kwd><def></def><sym>(</sym><def>Colour c1</def><sym>,</sym> <def>Colour c2</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def>   std</def><sym>::</sym><def>cout</def> <sym>&lt;&lt;</sym> <def>ColourName</def><sym>[</sym><def>c1</def><sym>] &lt;&lt;</sym> <def></def><str>&quot; + &quot;</str><def></def> <sym>&lt;&lt;</sym> <def>ColourName</def><sym>[</sym><def>c2</def><sym>]</sym><br />
<def></def>         <sym>&lt;&lt;</sym> <def></def><str>&quot; -&gt; &quot;</str><def></def> <sym>&lt;&lt;</sym> <def>ColourName</def><sym>[</sym><def></def><kwd>doCompliment</kwd><def></def><sym>(</sym><def>c1</def><sym>,</sym> <def>c2</def><sym>)]</sym><br />
<def></def>         <sym>&lt;&lt;</sym> <def>std</def><sym>::</sym><def>endl</def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>void</kwb> <def></def><kwd>printColours</kwd><def></def><sym>()</sym><br />
<def></def><sym>{</sym><br />
<def></def>   <kwd>printColours</kwd><def></def><sym>(</sym><def>blue</def><sym>,</sym> <def>blue</def><sym>);</sym><br />
<def></def>   <kwd>printColours</kwd><def></def><sym>(</sym><def>blue</def><sym>,</sym> <def>red</def><sym>);</sym><br />
<def></def>   <kwd>printColours</kwd><def></def><sym>(</sym><def>blue</def><sym>,</sym> <def>yellow</def><sym>);</sym><br />
<def></def>   <kwd>printColours</kwd><def></def><sym>(</sym><def>red</def><sym>,</sym> <def>blue</def><sym>);</sym><br />
<def></def>   <kwd>printColours</kwd><def></def><sym>(</sym><def>red</def><sym>,</sym> <def>red</def><sym>);</sym><br />
<def></def>   <kwd>printColours</kwd><def></def><sym>(</sym><def>red</def><sym>,</sym> <def>yellow</def><sym>);</sym><br />
<def></def>   <kwd>printColours</kwd><def></def><sym>(</sym><def>yellow</def><sym>,</sym> <def>blue</def><sym>);</sym><br />
<def></def>   <kwd>printColours</kwd><def></def><sym>(</sym><def>yellow</def><sym>,</sym> <def>red</def><sym>);</sym><br />
<def></def>   <kwd>printColours</kwd><def></def><sym>(</sym><def>yellow</def><sym>,</sym> <def>yellow</def><sym>);</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>int</kwb> <def></def><kwd>main</kwd><def></def><sym>(</sym><def></def><kwb>char</kwb> <def>argc</def><sym>,</sym> <def></def><kwb>char</kwb><def></def><sym>**</sym> <def>argv</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>   <kwb>int</kwb> <def>n</def> <sym>= (</sym><def>argc</def> <sym>==</sym> <def></def><num>2</num><def></def><sym>)</sym> <def>?</def> <kwd>atoi</kwd><def></def><sym>(</sym><def>argv</def><sym>[</sym><def></def><num>1</num><def></def><sym>]) :</sym> <def></def><num>600</num><def></def><sym>;</sym><br />
<def></def><br />
   <kwd>printColours</kwd><def></def><sym>();</sym><br />
<def>   std</def><sym>::</sym><def>cout</def> <sym>&lt;&lt;</sym> <def>std</def><sym>::</sym><def>endl</def><sym>;</sym><br />
<def></def><br />
   <kwb>const</kwb> <def>Colour r1</def><sym>[] = {</sym>   <def>blue</def><sym>,</sym> <def>red</def><sym>,</sym> <def>yellow</def>   <sym>};</sym><br />
<def></def>   <kwb>const</kwb> <def>Colour r2</def><sym>[] = {</sym>   <def>blue</def><sym>,</sym> <def>red</def><sym>,</sym> <def>yellow</def><sym>,</sym><br />
<def>            red</def><sym>,</sym> <def>yellow</def><sym>,</sym> <def>blue</def><sym>,</sym><br />
<def>            red</def><sym>,</sym> <def>yellow</def><sym>,</sym> <def>red</def><sym>,</sym> <def>blue</def>   <sym>};</sym><br />
<def></def><br />
   <kwd>runGame</kwd><def></def><sym>(</sym> <def>n</def><sym>,</sym> <def></def><kwa>sizeof</kwa><def></def><sym>(</sym><def>r1</def><sym>) /</sym> <def></def><kwa>sizeof</kwa><def></def><sym>(</sym><def>r1</def><sym>[</sym><def></def><num>0</num><def></def><sym>]),</sym> <def>r1</def> <sym>);</sym><br />
<def></def>   <kwd>runGame</kwd><def></def><sym>(</sym> <def>n</def><sym>,</sym> <def></def><kwa>sizeof</kwa><def></def><sym>(</sym><def>r2</def><sym>) /</sym> <def></def><kwa>sizeof</kwa><def></def><sym>(</sym><def>r2</def><sym>[</sym><def></def><num>0</num><def></def><sym>]),</sym> <def>r2</def> <sym>);</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
