<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by James Durbin</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> java<span class="hl sym">.</span>io<span class="hl sym">.*;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>nio<span class="hl sym">.*;</span>


<span class="hl slc">// Disable line buffering.</span>
<span class="hl slc">// By default, System.out flushes the buffer every time a newline is encountered,</span>
<span class="hl slc">// which is somewhat expensive in this case.  Here we disable this and use a nice</span>
<span class="hl slc">// big buffer instead. It makes a few seconds difference, but is obviously</span>
<span class="hl slc">// quite ugly.</span>

def <span class="hl kwd">disableStdOutLineBuffering</span><span class="hl sym">(){</span>
   <span class="hl kwc">FileOutputStream</span> fdout <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">FileOutputStream</span><span class="hl sym">(</span>FileDescriptor<span class="hl sym">.</span>out<span class="hl sym">);</span>
   <span class="hl kwc">BufferedOutputStream</span> bos <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">BufferedOutputStream</span><span class="hl sym">(</span>fdout<span class="hl sym">,</span><span class="hl num">262144</span><span class="hl sym">);</span>
   <span class="hl kwc">PrintStream</span> ps <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">PrintStream</span><span class="hl sym">(</span>bos<span class="hl sym">,</span>false<span class="hl sym">);</span>
   <span class="hl kwc">System</span><span class="hl sym">.</span><span class="hl kwd">setOut</span><span class="hl sym">(</span>ps<span class="hl sym">);</span>
<span class="hl sym">}</span>
<span class="hl kwd">disableStdOutLineBuffering</span><span class="hl sym">()</span>


<span class="hl slc">// Define a complement array...</span>
comp<span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">char</span><span class="hl sym">[</span><span class="hl num">128</span><span class="hl sym">];</span>
comp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'A'</span><span class="hl sym">]=</span>comp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'a'</span><span class="hl sym">]=(</span><span class="hl kwb">char</span><span class="hl sym">)</span><span class="hl str">'T'</span><span class="hl sym">;</span>
comp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'C'</span><span class="hl sym">]=</span>comp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'c'</span><span class="hl sym">]=(</span><span class="hl kwb">char</span><span class="hl sym">)</span><span class="hl str">'G'</span><span class="hl sym">;</span>
comp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'G'</span><span class="hl sym">]=</span>comp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'g'</span><span class="hl sym">]=(</span><span class="hl kwb">char</span><span class="hl sym">)</span><span class="hl str">'C'</span><span class="hl sym">;</span>
comp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'T'</span><span class="hl sym">]=</span>comp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'t'</span><span class="hl sym">]=(</span><span class="hl kwb">char</span><span class="hl sym">)</span><span class="hl str">'A'</span><span class="hl sym">;</span>
comp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'V'</span><span class="hl sym">]=</span>comp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'v'</span><span class="hl sym">]=(</span><span class="hl kwb">char</span><span class="hl sym">)</span><span class="hl str">'B'</span><span class="hl sym">;</span>
comp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'H'</span><span class="hl sym">]=</span>comp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'h'</span><span class="hl sym">]=(</span><span class="hl kwb">char</span><span class="hl sym">)</span><span class="hl str">'D'</span><span class="hl sym">;</span>
comp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'R'</span><span class="hl sym">]=</span>comp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'r'</span><span class="hl sym">]=(</span><span class="hl kwb">char</span><span class="hl sym">)</span><span class="hl str">'Y'</span><span class="hl sym">;</span>
comp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'M'</span><span class="hl sym">]=</span>comp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'m'</span><span class="hl sym">]=(</span><span class="hl kwb">char</span><span class="hl sym">)</span><span class="hl str">'K'</span><span class="hl sym">;</span>
comp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'Y'</span><span class="hl sym">]=</span>comp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'y'</span><span class="hl sym">]=(</span><span class="hl kwb">char</span><span class="hl sym">)</span><span class="hl str">'R'</span><span class="hl sym">;</span>
comp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'K'</span><span class="hl sym">]=</span>comp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'k'</span><span class="hl sym">]=(</span><span class="hl kwb">char</span><span class="hl sym">)</span><span class="hl str">'M'</span><span class="hl sym">;</span>
comp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'B'</span><span class="hl sym">]=</span>comp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'b'</span><span class="hl sym">]=(</span><span class="hl kwb">char</span><span class="hl sym">)</span><span class="hl str">'V'</span><span class="hl sym">;</span>
comp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'D'</span><span class="hl sym">]=</span>comp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'d'</span><span class="hl sym">]=(</span><span class="hl kwb">char</span><span class="hl sym">)</span><span class="hl str">'H'</span><span class="hl sym">;</span>
comp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'U'</span><span class="hl sym">]=</span>comp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'u'</span><span class="hl sym">]=(</span><span class="hl kwb">char</span><span class="hl sym">)</span><span class="hl str">'A'</span><span class="hl sym">;</span>
comp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'N'</span><span class="hl sym">]=</span>comp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'n'</span><span class="hl sym">]=(</span><span class="hl kwb">char</span><span class="hl sym">)</span><span class="hl str">'N'</span><span class="hl sym">;</span>
comp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'W'</span><span class="hl sym">]=</span>comp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'w'</span><span class="hl sym">]=(</span><span class="hl kwb">char</span><span class="hl sym">)</span><span class="hl str">'W'</span><span class="hl sym">;</span>
comp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'S'</span><span class="hl sym">]=</span>comp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'s'</span><span class="hl sym">]=(</span><span class="hl kwb">char</span><span class="hl sym">)</span><span class="hl str">'S'</span><span class="hl sym">;</span>


def <span class="hl kwd">reverseComplement</span><span class="hl sym">(</span>buf<span class="hl sym">) {</span>
   buf<span class="hl sym">.</span><span class="hl kwd">reverse</span><span class="hl sym">();</span>
   <span class="hl kwb">int</span> buflen <span class="hl sym">=</span> buf<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">();</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>i <span class="hl sym">&lt;</span> buflen<span class="hl sym">;</span>i<span class="hl sym">++) {</span>
      buf<span class="hl sym">.</span><span class="hl kwd">setCharAt</span><span class="hl sym">(</span>i<span class="hl sym">,</span>comp<span class="hl sym">[(</span><span class="hl kwb">byte</span><span class="hl sym">)</span>buf<span class="hl sym">.</span><span class="hl kwd">charAt</span><span class="hl sym">(</span>i<span class="hl sym">)]);</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">return</span><span class="hl sym">(</span>buf<span class="hl sym">);</span>
<span class="hl sym">}</span>

def <span class="hl kwd">writeSeq</span><span class="hl sym">(</span>buf<span class="hl sym">) {</span>

   <span class="hl kwb">int</span> stop <span class="hl sym">=</span> buf<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">()/</span><span class="hl num">60</span><span class="hl sym">;</span>
   <span class="hl kwb">int</span> lineNum <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span>j<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">while</span> <span class="hl sym">(</span>lineNum <span class="hl sym">&lt;</span> stop<span class="hl sym">) {</span>
      <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span>buf<span class="hl sym">.</span><span class="hl kwd">subSequence</span><span class="hl sym">(</span>j<span class="hl sym">,</span>j<span class="hl sym">+</span><span class="hl num">60</span><span class="hl sym">));</span>
      j<span class="hl sym">+=</span><span class="hl num">60</span><span class="hl sym">;</span>
      lineNum<span class="hl sym">++;</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span>j <span class="hl sym">&lt;</span> buf<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">()) {</span>
      <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span>buf<span class="hl sym">.</span><span class="hl kwd">subSequence</span><span class="hl sym">(</span>j<span class="hl sym">,</span>buf<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">()));</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>


def buf <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">StringBuffer</span><span class="hl sym">();</span>
def i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl kwc">System</span><span class="hl sym">.</span>in<span class="hl sym">.</span><span class="hl kwd">readLines</span><span class="hl sym">().</span>each<span class="hl sym">{</span>line<span class="hl sym">-&gt;</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span>line<span class="hl sym">.</span><span class="hl kwd">startsWith</span><span class="hl sym">(</span><span class="hl str">&quot;&gt;&quot;</span><span class="hl sym">)) {</span>
      buf <span class="hl sym">=</span> <span class="hl kwd">reverseComplement</span><span class="hl sym">(</span>buf<span class="hl sym">);</span>
      <span class="hl kwd">writeSeq</span><span class="hl sym">(</span>buf<span class="hl sym">);</span>
      <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span>line<span class="hl sym">);</span>
      buf <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">StringBuffer</span><span class="hl sym">();</span>
   <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
      buf<span class="hl sym">.</span><span class="hl kwd">append</span><span class="hl sym">(</span>line<span class="hl sym">);</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>
buf <span class="hl sym">=</span> <span class="hl kwd">reverseComplement</span><span class="hl sym">(</span>buf<span class="hl sym">);</span>
<span class="hl kwd">writeSeq</span><span class="hl sym">(</span>buf<span class="hl sym">);</span>
<span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">flush</span><span class="hl sym">();</span>  <span class="hl slc">// Groovy bug? No auto-flush on exit.</span>
