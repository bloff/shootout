<source>
<def></def><slc>#!/usr/bin/tclsh</slc><br />
<def></def><slc>##</slc><br />
<def></def><slc>## The Computer Lannguage Shootout</slc><br />
<def></def><slc>## http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>## Contributed by Heiner Marxen</slc><br />
<def></def><slc>##</slc><br />
<def></def><slc>## &quot;binary-trees&quot;	for Tcl</slc><br />
<def></def><slc>## Call:	tclsh binarytrees.tcl 16</slc><br />
<def></def><slc>##</slc><br />
<def></def><slc>## $Id: binarytrees.tcl.code,v 1.1 2008-08-05 04:40:15 igouy-guest Exp $</slc><br />
<def></def><br />
<slc>## A tree node is implemented as a [list] with 3 elements:</slc><br />
<def></def><slc>##	[0] left  subtree</slc><br />
<def></def><slc>##	[1] right subtree</slc><br />
<def></def><slc>##	[2] item</slc><br />
<def></def><slc>## An empty tree is an empty list {}, an thus has [llength] 0.</slc><br />
<def></def><br />
<kwa>proc</kwa> <def>ItemCheck</def> <sym>{</sym><def>tree</def><sym>} {</sym><br />
<def></def>    <kwa>if</kwa> <def></def><sym>{![</sym><def></def><kwa>llength</kwa> <def></def><sym>[</sym><def></def><kwa>lindex</kwa> <def></def><kwb>$tree</kwb> <def></def><num>0</num><def></def><sym>]]} {</sym><br />
<def></def>	<kwa>return</kwa> <def></def><sym>[</sym><def></def><kwa>lindex</kwa> <def></def><kwb>$tree</kwb> <def></def><num>2</num><def></def><sym>]</sym><br />
<def></def>    <sym>}</sym> <def>else</def> <sym>{</sym><br />
<def></def>	<kwa>return</kwa> <def></def><sym>[</sym><def></def><kwa>expr</kwa> <def></def><sym>{             [</sym><def></def><kwa>lindex</kwa> <def></def><kwb>$tree</kwb> <def></def><num>2</num><def></def><sym>]</sym><br />
<def></def>		      <sym>+ [</sym><def>ItemCheck</def> <sym>[</sym><def></def><kwa>lindex</kwa> <def></def><kwb>$tree</kwb> <def></def><num>0</num><def></def><sym>]]</sym><br />
<def></def>		      <sym>- [</sym><def>ItemCheck</def> <sym>[</sym><def></def><kwa>lindex</kwa> <def></def><kwb>$tree</kwb> <def></def><num>1</num><def></def><sym>]]}]</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwa>proc</kwa> <def>BottomUpTree</def> <sym>{</sym><def>item depth</def><sym>} {</sym><br />
<def></def>    <kwa>if</kwa> <def></def><sym>{</sym><def></def><kwb>$depth</kwb> <def></def><sym>&gt;</sym> <def></def><num>0</num><def></def><sym>} {</sym><br />
<def></def>	<kwa>set</kwa> <def>ndepth</def> <sym>[</sym><def></def><kwa>expr</kwa> <def></def><sym>{</sym><def></def><kwb>$depth</kwb> <def></def><sym>-</sym> <def></def><num>1</num><def></def><sym>}]</sym><br />
<def></def>	<kwa>return</kwa> <def></def><sym>[</sym><def></def><kwa>list</kwa> <def></def><sym>[</sym><def>BottomUpTree</def> <sym>[</sym><def></def><kwa>expr</kwa> <def></def><sym>{</sym><def></def><num>2</num> <def></def><sym>*</sym> <def></def><kwb>$item</kwb> <def></def><sym>-</sym> <def></def><num>1</num><def></def><sym>}]</sym> <def></def><kwb>$ndepth</kwb><def></def><sym>]</sym> <def>\</def><br />
		     <sym>[</sym><def>BottomUpTree</def> <sym>[</sym><def></def><kwa>expr</kwa> <def></def><sym>{</sym><def></def><num>2</num> <def></def><sym>*</sym> <def></def><kwb>$item</kwb>    <def></def><sym>}]</sym> <def></def><kwb>$ndepth</kwb><def></def><sym>]</sym> <def>\</def><br />
		     <kwb>$item</kwb><br />
<def></def>	       <sym>]</sym><br />
<def></def>    <sym>}</sym> <def>else</def> <sym>{</sym><br />
<def></def>	<kwa>return</kwa> <def></def><sym>[</sym><def></def><kwa>list</kwa> <def></def><sym>{} {}</sym> <def></def><kwb>$item</kwb><def></def><sym>]</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwa>proc</kwa> <def>tellTree</def> <sym>{</sym><def>typ depth check</def><sym>} {</sym><br />
<def></def>    <kwa>puts</kwa> <def></def><str>&quot;$typ tree of depth $depth</str><esc>\t</esc> <str>check: $check&quot;</str><def></def><br />
<sym>}</sym><br />
<def></def><br />
<kwa>proc</kwa> <def>main</def> <sym>{</sym><def>argv</def><sym>} {</sym><br />
<def></def>    <kwa>set</kwa> <def>N</def> <sym>[</sym><def></def><kwa>lindex</kwa> <def></def><kwb>$argv</kwb> <def></def><num>0</num><def></def><sym>]</sym><br />
<def></def><br />
    <kwa>set</kwa> <def>minDepth</def> <num>4</num><br />
<def></def><br />
    <kwa>if</kwa> <def></def><sym>{(</sym><def></def><kwb>$minDepth</kwb> <def></def><sym>+</sym> <def></def><num>2</num><def></def><sym>) &gt;</sym> <def></def><kwb>$N</kwb><def></def><sym>} {</sym><br />
<def></def>	<kwa>set</kwa> <def>maxDepth</def> <sym>[</sym><def></def><kwa>expr</kwa> <def></def><sym>{</sym><def></def><kwb>$minDepth</kwb> <def></def><sym>+</sym> <def></def><num>2</num><def></def><sym>}]</sym><br />
<def></def>    <sym>}</sym> <def>else</def> <sym>{</sym><br />
<def></def>	<kwa>set</kwa> <def>maxDepth</def> <kwb>$N</kwb><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <kwa>set</kwa> <def>stretchDepth</def> <sym>[</sym><def></def><kwa>expr</kwa> <def></def><sym>{</sym><def></def><kwb>$maxDepth</kwb> <def></def><sym>+</sym> <def></def><num>1</num><def></def><sym>}]</sym><br />
<def></def><br />
    <kwa>set</kwa> <def>stretchTree</def> <sym>[</sym><def>BottomUpTree</def> <num>0</num> <def></def><kwb>$stretchDepth</kwb><def></def><sym>]</sym><br />
<def>    tellTree</def> <str>&quot;stretch&quot;</str><def></def> <kwb>$stretchDepth</kwb> <def></def><sym>[</sym><def>ItemCheck</def> <kwb>$stretchTree</kwb><def></def><sym>]</sym><br />
<def></def>    <kwa>set</kwa> <def>stretchTree</def> <sym>{}</sym><br />
<def></def><br />
    <kwa>set</kwa> <def>longLivedTree</def> <sym>[</sym><def>BottomUpTree</def> <num>0</num> <def></def><kwb>$maxDepth</kwb><def></def><sym>]</sym><br />
<def></def><br />
    <kwa>for</kwa> <def></def><sym>{</sym><def></def><kwa>set</kwa> <def>dep</def> <kwb>$minDepth</kwb><def></def><sym>} {</sym><def></def><kwb>$dep</kwb> <def></def><sym>&lt;=</sym> <def></def><kwb>$maxDepth</kwb><def></def><sym>} {</sym><def></def><kwa>incr</kwa> <def>dep</def> <num>2</num><def></def><sym>} {</sym><br />
<def></def>	<kwa>set</kwa> <def>iterations</def> <sym>[</sym><def></def><kwa>expr</kwa> <def></def><sym>{</sym><def></def><num>1</num> <def></def><sym>&lt;&lt; (</sym><def></def><kwb>$maxDepth</kwb> <def></def><sym>-</sym> <def></def><kwb>$dep</kwb> <def></def><sym>+</sym> <def></def><kwb>$minDepth</kwb><def></def><sym>)}]</sym><br />
<def></def>	<kwa>set</kwa> <def>check</def> <num>0</num><br />
<def></def>	<kwa>for</kwa> <def></def><sym>{</sym><def></def><kwa>set</kwa> <def>i</def> <num>1</num><def></def><sym>} {</sym><def></def><kwb>$i</kwb> <def></def><sym>&lt;=</sym> <def></def><kwb>$iterations</kwb><def></def><sym>} {</sym><def></def><kwa>incr</kwa> <def>i</def><sym>} {</sym><br />
<def></def>	    <kwa>set</kwa> <def>tempTree</def> <sym>[</sym><def>BottomUpTree</def> <kwb>$i $dep</kwb><def></def><sym>]</sym><br />
<def></def>	    <kwa>set</kwa> <def>check</def> <sym>[</sym><def></def><kwa>expr</kwa> <def></def><sym>{</sym><def></def><kwb>$check</kwb> <def></def><sym>+ [</sym><def>ItemCheck</def> <kwb>$tempTree</kwb><def></def><sym>]}]</sym><br />
<def></def>	    <kwa>set</kwa> <def>tempTree</def> <sym>{}</sym><br />
<def></def><br />
	    <kwa>set</kwa> <def>tempTree</def> <sym>[</sym><def>BottomUpTree</def> <sym>[</sym><def></def><kwa>expr</kwa> <def></def><sym>{-</sym><def></def><kwb>$i</kwb><def></def><sym>}]</sym> <def></def><kwb>$dep</kwb><def></def><sym>]</sym><br />
<def></def>	    <kwa>set</kwa> <def>check</def> <sym>[</sym><def></def><kwa>expr</kwa> <def></def><sym>{</sym><def></def><kwb>$check</kwb> <def></def><sym>+ [</sym><def>ItemCheck</def> <kwb>$tempTree</kwb><def></def><sym>]}]</sym><br />
<def></def>	    <kwa>set</kwa> <def>tempTree</def> <sym>{}</sym><br />
<def></def>	<sym>}</sym><br />
<def></def><br />
	<kwa>puts</kwa> <def></def><str>&quot;[expr {$iterations * 2}]</str><esc>\t</esc> <str>trees of depth $dep</str><esc>\t</esc> <str>check: $check&quot;</str><def></def><br />
    <sym>}</sym><br />
<def><br />
    tellTree</def> <str>&quot;long lived&quot;</str><def></def> <kwb>$maxDepth</kwb> <def></def><sym>[</sym><def>ItemCheck</def> <kwb>$longLivedTree</kwb><def></def><sym>]</sym><br />
<def></def><br />
    <kwa>return</kwa> <def></def><num>0</num><br />
<def></def><sym>}</sym><br />
<def><br />
main</def> <kwb>$argv</kwb><def></def><br />
</source>
