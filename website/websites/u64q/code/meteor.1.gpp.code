<span class="hl slc">// The Computer Language Benchmarks Game</span>
<span class="hl slc">//  http://shootout.alioth.debian.org</span>
<span class="hl slc">//  contributed by Kevin Barnes</span>

<span class="hl dir">#include &lt;stdio.h&gt;</span>
<span class="hl dir">#include &lt;stdlib.h&gt;</span>
<span class="hl dir">#include &lt;time.h&gt;</span>
<span class="hl dir">#include &lt;iostream.h&gt;</span>
<span class="hl dir">#include &lt;vector.h&gt;</span>
<span class="hl dir">#include &lt;string.h&gt;</span>
<span class="hl dir">#include &lt;set.h&gt;</span>

<span class="hl kwa">using namespace</span> std<span class="hl sym">;</span>

<span class="hl dir">#define WEST 0</span>
<span class="hl dir">#define EAST 1</span>
<span class="hl dir">#define SW 2</span>
<span class="hl dir">#define SE 3</span>
<span class="hl dir">#define NW 4</span>
<span class="hl dir">#define NE 5</span>

<span class="hl dir">#define BIT ((long long)1)</span>

<span class="hl slc">// constant masks</span>
<span class="hl kwb">const long long</span> row_mask <span class="hl sym">= (</span><span class="hl kwb">long long</span><span class="hl sym">)</span><span class="hl num">31</span><span class="hl sym">;</span>
<span class="hl kwb">const long long</span> full_mask <span class="hl sym">= (</span>BIT <span class="hl sym">&lt;&lt;</span> <span class="hl num">50</span><span class="hl sym">) -</span> <span class="hl num">1</span><span class="hl sym">;</span>
<span class="hl kwb">const long long</span> row_masks<span class="hl sym">[] = {</span> row_mask<span class="hl sym">,</span> row_mask <span class="hl sym">&lt;&lt;</span> <span class="hl num">5</span><span class="hl sym">,</span> row_mask <span class="hl sym">&lt;&lt;</span> <span class="hl num">10</span><span class="hl sym">,</span> row_mask <span class="hl sym">&lt;&lt;</span> <span class="hl num">15</span><span class="hl sym">,</span> row_mask <span class="hl sym">&lt;&lt;</span> <span class="hl num">20</span><span class="hl sym">,</span> row_mask <span class="hl sym">&lt;&lt;</span> <span class="hl num">25</span><span class="hl sym">,</span> row_mask <span class="hl sym">&lt;&lt;</span> <span class="hl num">30</span><span class="hl sym">,</span>
      row_mask <span class="hl sym">&lt;&lt;</span> <span class="hl num">35</span><span class="hl sym">,</span> row_mask <span class="hl sym">&lt;&lt;</span> <span class="hl num">40</span><span class="hl sym">,</span> row_mask <span class="hl sym">&lt;&lt;</span> <span class="hl num">45</span> <span class="hl sym">};</span>
<span class="hl kwb">const long long</span> all_even_rows <span class="hl sym">=</span> row_masks<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] |</span> row_masks<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">] |</span> row_masks<span class="hl sym">[</span><span class="hl num">4</span><span class="hl sym">] |</span> row_masks<span class="hl sym">[</span><span class="hl num">6</span><span class="hl sym">] |</span> row_masks<span class="hl sym">[</span><span class="hl num">8</span><span class="hl sym">];</span>
<span class="hl kwb">const long long</span> all_odd_rows <span class="hl sym">=</span> row_masks<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">] |</span> row_masks<span class="hl sym">[</span><span class="hl num">3</span><span class="hl sym">] |</span> row_masks<span class="hl sym">[</span><span class="hl num">5</span><span class="hl sym">] |</span> row_masks<span class="hl sym">[</span><span class="hl num">7</span><span class="hl sym">] |</span> row_masks<span class="hl sym">[</span><span class="hl num">9</span><span class="hl sym">];</span>
<span class="hl kwb">const long long</span> all_rows<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">] = {</span> all_even_rows<span class="hl sym">,</span> all_odd_rows <span class="hl sym">};</span>

<span class="hl kwb">const long long</span> even_left_edges <span class="hl sym">=</span> BIT <span class="hl sym">| (</span>BIT <span class="hl sym">&lt;&lt;</span> <span class="hl num">10</span><span class="hl sym">) | (</span>BIT <span class="hl sym">&lt;&lt;</span> <span class="hl num">20</span><span class="hl sym">) | (</span>BIT <span class="hl sym">&lt;&lt;</span> <span class="hl num">30</span> <span class="hl sym">| (</span>BIT <span class="hl sym">&lt;&lt;</span> <span class="hl num">40</span><span class="hl sym">));</span>
<span class="hl kwb">const long long</span> odd_left_edges <span class="hl sym">= (</span>BIT <span class="hl sym">&lt;&lt;</span> <span class="hl num">5</span><span class="hl sym">) | (</span>BIT <span class="hl sym">&lt;&lt;</span> <span class="hl num">15</span><span class="hl sym">) | (</span>BIT <span class="hl sym">&lt;&lt;</span> <span class="hl num">25</span><span class="hl sym">) | (</span>BIT <span class="hl sym">&lt;&lt;</span> <span class="hl num">35</span><span class="hl sym">) | (</span>BIT <span class="hl sym">&lt;&lt;</span> <span class="hl num">45</span><span class="hl sym">);</span>
<span class="hl kwb">const long long</span> left_edges <span class="hl sym">=</span> even_left_edges <span class="hl sym">|</span> odd_left_edges<span class="hl sym">;</span>
<span class="hl kwb">const long long</span> even_right_edges <span class="hl sym">=</span> even_left_edges <span class="hl sym">&lt;&lt;</span> <span class="hl num">4</span><span class="hl sym">;</span>
<span class="hl kwb">const long long</span> odd_right_edges <span class="hl sym">=</span> odd_left_edges <span class="hl sym">&lt;&lt;</span> <span class="hl num">4</span><span class="hl sym">;</span>
<span class="hl kwb">const long long</span> right_edges <span class="hl sym">=</span> left_edges <span class="hl sym">&lt;&lt;</span> <span class="hl num">4</span><span class="hl sym">;</span>
<span class="hl kwb">const long long</span> top_edge <span class="hl sym">=</span> row_masks<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
<span class="hl kwb">const long long</span> bottom_edge <span class="hl sym">=</span> row_masks<span class="hl sym">[</span><span class="hl num">9</span><span class="hl sym">];</span>

<span class="hl kwb">const long long</span> illegal_move_masks<span class="hl sym">[</span><span class="hl num">6</span><span class="hl sym">] = {</span>
   left_edges<span class="hl sym">,</span> right_edges<span class="hl sym">,</span>
   bottom_edge <span class="hl sym">|</span> even_left_edges<span class="hl sym">,</span> bottom_edge <span class="hl sym">|</span> odd_right_edges<span class="hl sym">,</span>
   top_edge <span class="hl sym">|</span> even_left_edges<span class="hl sym">,</span> top_edge <span class="hl sym">|</span> odd_right_edges <span class="hl sym">};</span>

<span class="hl slc">// mapping and bit manipulation</span>
<span class="hl kwc">inline</span> <span class="hl kwb">int</span> <span class="hl kwd">location_of</span><span class="hl sym">(</span> <span class="hl kwb">int</span> row<span class="hl sym">,</span> <span class="hl kwb">int</span> col<span class="hl sym">) {</span> <span class="hl kwa">return</span> row <span class="hl sym">*</span> <span class="hl num">5</span> <span class="hl sym">+</span> col<span class="hl sym">; }</span>
<span class="hl kwc">inline</span> <span class="hl kwb">int</span> <span class="hl kwd">row_of</span><span class="hl sym">(</span> <span class="hl kwb">int</span> location<span class="hl sym">) {</span> <span class="hl kwa">return</span> location <span class="hl sym">/</span> <span class="hl num">5</span><span class="hl sym">; }</span>
<span class="hl kwc">inline</span> <span class="hl kwb">int</span> <span class="hl kwd">col_of</span><span class="hl sym">(</span> <span class="hl kwb">int</span> location<span class="hl sym">) {</span> <span class="hl kwa">return</span> location <span class="hl sym">%</span> <span class="hl num">5</span><span class="hl sym">; }</span>
<span class="hl kwc">inline</span> <span class="hl kwb">long long</span> <span class="hl kwd">get_bit</span><span class="hl sym">(</span> <span class="hl kwb">long long</span> value<span class="hl sym">,</span> <span class="hl kwb">int</span> pos<span class="hl sym">) {</span> <span class="hl kwa">return</span> value <span class="hl sym">&amp; (</span>BIT <span class="hl sym">&lt;&lt;</span> pos<span class="hl sym">); }</span>
<span class="hl kwc">inline</span> <span class="hl kwb">long long</span> <span class="hl kwd">get_bit</span><span class="hl sym">(</span> <span class="hl kwb">long long</span> value<span class="hl sym">,</span> <span class="hl kwb">int</span> row<span class="hl sym">,</span> <span class="hl kwb">int</span> col<span class="hl sym">) {</span> <span class="hl kwa">return</span> value <span class="hl sym">&amp; (</span>BIT <span class="hl sym">&lt;&lt;</span> <span class="hl kwd">location_of</span><span class="hl sym">(</span>row<span class="hl sym">,</span> col<span class="hl sym">)); }</span>
<span class="hl kwc">inline</span> <span class="hl kwb">long long</span> <span class="hl kwd">has_bit</span><span class="hl sym">(</span> <span class="hl kwb">long long</span> value<span class="hl sym">,</span> <span class="hl kwb">int</span> pos<span class="hl sym">) {</span> <span class="hl kwa">return</span> <span class="hl kwd">get_bit</span><span class="hl sym">(</span>value<span class="hl sym">,</span> pos<span class="hl sym">)</span> ? <span class="hl kwa">true</span> <span class="hl sym">:</span> <span class="hl kwa">false</span><span class="hl sym">; }</span>
<span class="hl kwc">inline</span> <span class="hl kwb">long long</span> <span class="hl kwd">has_bit</span><span class="hl sym">(</span> <span class="hl kwb">long long</span> value<span class="hl sym">,</span> <span class="hl kwb">int</span> row<span class="hl sym">,</span> <span class="hl kwb">int</span> col<span class="hl sym">) {</span> <span class="hl kwa">return</span> <span class="hl kwd">get_bit</span><span class="hl sym">(</span>value<span class="hl sym">,</span> row<span class="hl sym">,</span> col<span class="hl sym">)</span> ? <span class="hl kwa">true</span> <span class="hl sym">:</span> <span class="hl kwa">false</span><span class="hl sym">;  }</span>
<span class="hl kwc">inline</span> <span class="hl kwb">void</span> <span class="hl kwd">set_bit</span><span class="hl sym">(</span> <span class="hl kwb">long long</span> <span class="hl sym">&amp;</span>value<span class="hl sym">,</span> <span class="hl kwb">int</span> pos<span class="hl sym">) {</span> value <span class="hl sym">|= (</span>BIT <span class="hl sym">&lt;&lt;</span> pos<span class="hl sym">); }</span>
<span class="hl kwc">inline</span> <span class="hl kwb">void</span> <span class="hl kwd">set_bit</span><span class="hl sym">(</span> <span class="hl kwb">long long</span> <span class="hl sym">&amp;</span>value<span class="hl sym">,</span> <span class="hl kwb">int</span> row<span class="hl sym">,</span> <span class="hl kwb">int</span> col<span class="hl sym">) {</span> value <span class="hl sym">|= (</span>BIT <span class="hl sym">&lt;&lt;</span> <span class="hl kwd">location_of</span><span class="hl sym">(</span>row<span class="hl sym">,</span> col<span class="hl sym">)); }</span>
<span class="hl kwc">inline</span> <span class="hl kwb">int</span> <span class="hl kwd">get_row</span><span class="hl sym">(</span> <span class="hl kwb">long long</span> mask<span class="hl sym">,</span> <span class="hl kwb">int</span> row<span class="hl sym">) {</span> <span class="hl kwa">return</span> <span class="hl sym">(</span><span class="hl kwb">int</span><span class="hl sym">)((</span>mask <span class="hl sym">&gt;&gt; (</span>row <span class="hl sym">*</span> <span class="hl num">5</span><span class="hl sym">)) &amp;</span> row_mask<span class="hl sym">); }</span>

<span class="hl kwc">inline</span> <span class="hl kwb">long long</span> <span class="hl kwd">shift_east</span><span class="hl sym">(</span> <span class="hl kwb">const long long</span> mask<span class="hl sym">) {</span> <span class="hl kwa">return</span> mask <span class="hl sym">&lt;&lt;</span> <span class="hl num">1</span><span class="hl sym">; }</span>
<span class="hl kwc">inline</span> <span class="hl kwb">long long</span> <span class="hl kwd">shift_west</span><span class="hl sym">(</span> <span class="hl kwb">const long long</span> mask<span class="hl sym">) {</span> <span class="hl kwa">return</span> mask <span class="hl sym">&gt;&gt;</span> <span class="hl num">1</span><span class="hl sym">; }</span>
<span class="hl kwc">inline</span> <span class="hl kwb">long long</span> <span class="hl kwd">shift_nw</span><span class="hl sym">(</span> <span class="hl kwb">const long long</span> mask<span class="hl sym">) {</span> <span class="hl kwa">return</span> <span class="hl sym">((</span>mask <span class="hl sym">&amp;</span> all_even_rows<span class="hl sym">) &gt;&gt;</span> <span class="hl num">6</span><span class="hl sym">) | ((</span>mask <span class="hl sym">&amp;</span> all_odd_rows<span class="hl sym">) &gt;&gt;</span> <span class="hl num">5</span><span class="hl sym">); }</span>
<span class="hl kwc">inline</span> <span class="hl kwb">long long</span> <span class="hl kwd">shift_ne</span><span class="hl sym">(</span> <span class="hl kwb">const long long</span> mask<span class="hl sym">) {</span> <span class="hl kwa">return</span> <span class="hl sym">((</span>mask <span class="hl sym">&amp;</span> all_even_rows<span class="hl sym">) &gt;&gt;</span> <span class="hl num">5</span><span class="hl sym">) | ((</span>mask <span class="hl sym">&amp;</span> all_odd_rows<span class="hl sym">) &gt;&gt;</span> <span class="hl num">4</span><span class="hl sym">); }</span>
<span class="hl kwc">inline</span> <span class="hl kwb">long long</span> <span class="hl kwd">shift_sw</span><span class="hl sym">(</span> <span class="hl kwb">const long long</span> mask<span class="hl sym">) {</span> <span class="hl kwa">return</span> <span class="hl sym">((</span>mask <span class="hl sym">&amp;</span> all_even_rows<span class="hl sym">) &lt;&lt;</span> <span class="hl num">4</span><span class="hl sym">) | ((</span>mask <span class="hl sym">&amp;</span> all_odd_rows<span class="hl sym">) &lt;&lt;</span> <span class="hl num">5</span><span class="hl sym">); }</span>
<span class="hl kwc">inline</span> <span class="hl kwb">long long</span> <span class="hl kwd">shift_se</span><span class="hl sym">(</span> <span class="hl kwb">const long long</span> mask<span class="hl sym">) {</span> <span class="hl kwa">return</span> <span class="hl sym">((</span>mask <span class="hl sym">&amp;</span> all_even_rows<span class="hl sym">) &lt;&lt;</span> <span class="hl num">5</span><span class="hl sym">) | ((</span>mask <span class="hl sym">&amp;</span> all_odd_rows<span class="hl sym">) &lt;&lt;</span> <span class="hl num">6</span><span class="hl sym">); }</span>
<span class="hl kwc">inline</span> <span class="hl kwb">long long</span> <span class="hl kwd">shift_mask</span><span class="hl sym">(</span> <span class="hl kwb">int</span> direction<span class="hl sym">,</span> <span class="hl kwb">const long long</span> mask<span class="hl sym">) {</span>
   <span class="hl kwa">switch</span> <span class="hl sym">(</span>direction<span class="hl sym">) {</span>
      <span class="hl kwa">case</span> WEST<span class="hl sym">:</span> <span class="hl kwa">return</span> <span class="hl kwd">shift_west</span><span class="hl sym">(</span>mask<span class="hl sym">);</span>
      <span class="hl kwa">case</span> EAST<span class="hl sym">:</span> <span class="hl kwa">return</span> <span class="hl kwd">shift_east</span><span class="hl sym">(</span>mask<span class="hl sym">);</span>
      <span class="hl kwa">case</span> SW<span class="hl sym">:</span> <span class="hl kwa">return</span> <span class="hl kwd">shift_sw</span><span class="hl sym">(</span>mask<span class="hl sym">);</span>
      <span class="hl kwa">case</span> SE<span class="hl sym">:</span> <span class="hl kwa">return</span> <span class="hl kwd">shift_se</span><span class="hl sym">(</span>mask<span class="hl sym">);</span>
      <span class="hl kwa">case</span> NW<span class="hl sym">:</span> <span class="hl kwa">return</span> <span class="hl kwd">shift_nw</span><span class="hl sym">(</span>mask<span class="hl sym">);</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">return</span> <span class="hl kwd">shift_ne</span><span class="hl sym">(</span>mask<span class="hl sym">);</span>
<span class="hl sym">}</span>


<span class="hl kwb">char</span> <span class="hl sym">*</span>dir_texts<span class="hl sym">[</span><span class="hl num">6</span><span class="hl sym">] =       {</span><span class="hl str">&quot;WEST&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;EAST&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;SW&quot;</span><span class="hl sym">,</span>  <span class="hl str">&quot;SE&quot;</span><span class="hl sym">,</span>  <span class="hl str">&quot;NW&quot;</span><span class="hl sym">,</span>  <span class="hl str">&quot;NE&quot;</span>  <span class="hl sym">};</span>
<span class="hl kwb">int</span> rotation_adder<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">][</span><span class="hl num">6</span><span class="hl sym">] = {</span>
                     <span class="hl sym">{ -</span><span class="hl num">1</span><span class="hl sym">,</span>    <span class="hl num">1</span><span class="hl sym">,</span>     <span class="hl num">4</span><span class="hl sym">,</span>     <span class="hl num">5</span><span class="hl sym">,     -</span><span class="hl num">6</span><span class="hl sym">,    -</span><span class="hl num">5</span>   <span class="hl sym">},</span>
                      <span class="hl sym">{ -</span><span class="hl num">1</span><span class="hl sym">,</span>    <span class="hl num">1</span><span class="hl sym">,</span>     <span class="hl num">5</span><span class="hl sym">,</span>     <span class="hl num">6</span><span class="hl sym">,     -</span><span class="hl num">5</span><span class="hl sym">,    -</span><span class="hl num">4</span>   <span class="hl sym">} };</span>

<span class="hl kwb">int</span> flip_transform<span class="hl sym">[</span><span class="hl num">6</span><span class="hl sym">] =    {</span> WEST<span class="hl sym">,</span>  EAST<span class="hl sym">,</span>  NW<span class="hl sym">,</span>    NE<span class="hl sym">,</span>    SW<span class="hl sym">,</span>    SE   <span class="hl sym">};</span>
<span class="hl kwb">int</span> rotate_transform<span class="hl sym">[</span><span class="hl num">6</span><span class="hl sym">] =  {</span> NW<span class="hl sym">,</span>    SE<span class="hl sym">,</span>    WEST<span class="hl sym">,</span>  SW<span class="hl sym">,</span>    NE<span class="hl sym">,</span>    EAST <span class="hl sym">};</span>
<span class="hl kwb">int</span> opposite_transform<span class="hl sym">[</span><span class="hl num">6</span><span class="hl sym">] ={</span> EAST<span class="hl sym">,</span>  WEST<span class="hl sym">,</span>  NE<span class="hl sym">,</span>    NW<span class="hl sym">,</span>    SE<span class="hl sym">,</span>    SW   <span class="hl sym">};</span>

<span class="hl kwb">int</span> two_row_mask <span class="hl sym">=</span> <span class="hl num">1024</span><span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">;</span>
<span class="hl kwb">int</span> bit_counts<span class="hl sym">[</span><span class="hl num">32</span><span class="hl sym">];</span>
<span class="hl kwb">int</span> first_bits<span class="hl sym">[</span><span class="hl num">32</span><span class="hl sym">];</span>


<span class="hl kwc">typedef</span> <span class="hl kwb">struct</span> MaskInfo <span class="hl sym">{</span>
   <span class="hl kwb">bool</span> is_legal<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">];</span>
   <span class="hl kwb">int</span> start<span class="hl sym">;</span>

   <span class="hl kwd">MaskInfo</span><span class="hl sym">() {</span> is_legal<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] =</span> is_legal<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">] =</span> <span class="hl kwa">true</span><span class="hl sym">; }</span>
   <span class="hl slc">// bool piece_allowed[10];</span>
<span class="hl sym">};</span>

MaskInfo big_map<span class="hl sym">[</span><span class="hl num">1024</span><span class="hl sym">];</span>

<span class="hl kwb">long long</span> <span class="hl kwd">flood_fill_actual</span><span class="hl sym">(</span> <span class="hl kwb">long long</span> <span class="hl sym">&amp;</span>mask<span class="hl sym">,</span> <span class="hl kwb">const int</span> pos<span class="hl sym">) {</span>
   <span class="hl kwd">set_bit</span><span class="hl sym">(</span>mask<span class="hl sym">,</span> pos<span class="hl sym">);</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span>pos <span class="hl sym">%</span> <span class="hl num">5</span> <span class="hl sym">&amp;&amp; !</span><span class="hl kwd">has_bit</span><span class="hl sym">(</span> mask<span class="hl sym">,</span> pos <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">))</span> <span class="hl kwd">flood_fill_actual</span><span class="hl sym">(</span> mask<span class="hl sym">,</span> pos <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">);</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span>pos <span class="hl sym">%</span> <span class="hl num">5</span> <span class="hl sym">&lt;</span> <span class="hl num">4</span> <span class="hl sym">&amp;&amp; !</span><span class="hl kwd">has_bit</span><span class="hl sym">(</span> mask<span class="hl sym">,</span> pos <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">))</span> <span class="hl kwd">flood_fill_actual</span><span class="hl sym">(</span> mask<span class="hl sym">,</span> pos <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">);</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span>pos <span class="hl sym">&gt;=</span> <span class="hl num">5</span><span class="hl sym">) {</span>
      <span class="hl kwa">if</span> <span class="hl sym">(!</span><span class="hl kwd">has_bit</span><span class="hl sym">(</span> mask<span class="hl sym">,</span> pos <span class="hl sym">-</span> <span class="hl num">5</span><span class="hl sym">))</span> <span class="hl kwd">flood_fill_actual</span><span class="hl sym">(</span> mask<span class="hl sym">,</span> pos <span class="hl sym">-</span> <span class="hl num">5</span><span class="hl sym">);</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>pos <span class="hl sym">/</span> <span class="hl num">10</span> <span class="hl sym">&lt;</span> <span class="hl num">5</span><span class="hl sym">) {</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>pos <span class="hl sym">%</span> <span class="hl num">5</span> <span class="hl sym">&amp;&amp; !</span><span class="hl kwd">has_bit</span><span class="hl sym">(</span> mask<span class="hl sym">,</span> mask<span class="hl sym">,</span> pos <span class="hl sym">-</span> <span class="hl num">6</span><span class="hl sym">))</span> <span class="hl kwd">flood_fill_actual</span><span class="hl sym">(</span> mask<span class="hl sym">,</span> pos <span class="hl sym">-</span> <span class="hl num">6</span><span class="hl sym">);</span>
      <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>pos <span class="hl sym">%</span> <span class="hl num">5</span> <span class="hl sym">&lt;</span> <span class="hl num">4</span> <span class="hl sym">&amp;&amp; !</span><span class="hl kwd">has_bit</span><span class="hl sym">(</span> mask<span class="hl sym">,</span> mask<span class="hl sym">,</span> pos <span class="hl sym">-</span> <span class="hl num">4</span><span class="hl sym">))</span> <span class="hl kwd">flood_fill_actual</span><span class="hl sym">(</span> mask<span class="hl sym">,</span> pos <span class="hl sym">-</span> <span class="hl num">4</span><span class="hl sym">);</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span>pos <span class="hl sym">&lt;</span> <span class="hl num">45</span><span class="hl sym">) {</span>
      <span class="hl kwa">if</span> <span class="hl sym">(!</span><span class="hl kwd">has_bit</span><span class="hl sym">(</span> mask<span class="hl sym">,</span> pos <span class="hl sym">+</span> <span class="hl num">5</span><span class="hl sym">))</span> <span class="hl kwd">flood_fill_actual</span><span class="hl sym">(</span> mask<span class="hl sym">,</span> pos <span class="hl sym">+</span> <span class="hl num">5</span><span class="hl sym">);</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>pos <span class="hl sym">/</span> <span class="hl num">10</span> <span class="hl sym">&lt;</span> <span class="hl num">5</span><span class="hl sym">) {</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>pos <span class="hl sym">%</span> <span class="hl num">5</span> <span class="hl sym">&amp;&amp; !</span><span class="hl kwd">has_bit</span><span class="hl sym">(</span> mask<span class="hl sym">,</span> pos <span class="hl sym">+</span> <span class="hl num">4</span><span class="hl sym">))</span> <span class="hl kwd">flood_fill_actual</span><span class="hl sym">(</span> mask<span class="hl sym">,</span> pos <span class="hl sym">+</span> <span class="hl num">4</span><span class="hl sym">);</span>
      <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>pos <span class="hl sym">%</span> <span class="hl num">5</span> <span class="hl sym">&lt;</span> <span class="hl num">4</span> <span class="hl sym">&amp;&amp; !</span><span class="hl kwd">has_bit</span><span class="hl sym">(</span> mask<span class="hl sym">,</span> pos <span class="hl sym">+</span> <span class="hl num">6</span><span class="hl sym">))</span> <span class="hl kwd">flood_fill_actual</span><span class="hl sym">(</span> mask<span class="hl sym">,</span> pos <span class="hl sym">+</span> <span class="hl num">6</span><span class="hl sym">);</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">return</span> mask<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">long long</span> <span class="hl kwd">flood_fill_down</span><span class="hl sym">(</span> <span class="hl kwb">long long</span> mask<span class="hl sym">,</span> <span class="hl kwb">int</span> row<span class="hl sym">,</span> <span class="hl kwb">int</span> col<span class="hl sym">) {</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span>row <span class="hl sym">&amp;</span> row_masks<span class="hl sym">[</span>row<span class="hl sym">]) {</span>
      <span class="hl kwd">flood_fill_actual</span><span class="hl sym">(</span> mask<span class="hl sym">,</span> <span class="hl kwd">location_of</span><span class="hl sym">(</span>row<span class="hl sym">,</span> col<span class="hl sym">));</span>
      <span class="hl kwa">return</span> mask<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">while</span> <span class="hl sym">(</span>row <span class="hl sym">&lt;</span> <span class="hl num">10</span> <span class="hl sym">&amp;&amp; !(</span>mask <span class="hl sym">&amp;</span> row_masks<span class="hl sym">[</span>row<span class="hl sym">])) {</span>
      mask <span class="hl sym">|=</span> row_masks<span class="hl sym">[</span>row<span class="hl sym">];</span>
      row<span class="hl sym">++;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">if</span> <span class="hl sym">(</span>row <span class="hl sym">&lt;</span> <span class="hl num">10</span><span class="hl sym">)</span> <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> row <span class="hl sym">*</span> <span class="hl num">5</span><span class="hl sym">;</span> i <span class="hl sym">&lt; (</span>row <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">) *</span> <span class="hl num">5</span><span class="hl sym">;</span> i<span class="hl sym">++) {</span>
      <span class="hl kwa">if</span> <span class="hl sym">(!</span><span class="hl kwd">has_bit</span><span class="hl sym">(</span> mask<span class="hl sym">,</span> i<span class="hl sym">))</span> <span class="hl kwd">flood_fill_actual</span><span class="hl sym">(</span> mask<span class="hl sym">,</span> i<span class="hl sym">);</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">return</span> mask<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">long long</span> <span class="hl kwd">flood_fill_up</span><span class="hl sym">(</span> <span class="hl kwb">long long</span> mask<span class="hl sym">,</span> <span class="hl kwb">int</span> row<span class="hl sym">,</span> <span class="hl kwb">int</span> col<span class="hl sym">) {</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span>row <span class="hl sym">&amp;</span> row_masks<span class="hl sym">[</span>row<span class="hl sym">]) {</span>
      <span class="hl kwd">flood_fill_actual</span><span class="hl sym">(</span> mask<span class="hl sym">,</span> <span class="hl kwd">location_of</span><span class="hl sym">(</span>row<span class="hl sym">,</span> col<span class="hl sym">));</span>
      <span class="hl kwa">return</span> mask<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">while</span> <span class="hl sym">(</span>row <span class="hl sym">&gt;=</span> <span class="hl num">0</span> <span class="hl sym">&amp;&amp; !(</span>mask <span class="hl sym">&amp;</span> row_masks<span class="hl sym">[</span>row<span class="hl sym">])) {</span>
      mask <span class="hl sym">|=</span> row_masks<span class="hl sym">[</span>row<span class="hl sym">];</span>
      row<span class="hl sym">--;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">if</span> <span class="hl sym">(</span>row <span class="hl sym">&gt;=</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> row <span class="hl sym">*</span> <span class="hl num">5</span><span class="hl sym">;</span> i <span class="hl sym">&lt; (</span>row <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">) *</span> <span class="hl num">5</span><span class="hl sym">;</span> i<span class="hl sym">++) {</span>
      <span class="hl kwa">if</span> <span class="hl sym">(!</span><span class="hl kwd">has_bit</span><span class="hl sym">(</span> mask<span class="hl sym">,</span> i<span class="hl sym">))</span> <span class="hl kwd">flood_fill_actual</span><span class="hl sym">(</span> mask<span class="hl sym">,</span> i<span class="hl sym">);</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">return</span> mask<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwc">typedef</span> <span class="hl kwb">struct</span> MaskData <span class="hl sym">{</span>
   <span class="hl kwb">long long</span> mask<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">];</span>
   <span class="hl kwb">int</span> height<span class="hl sym">;</span>
   <span class="hl kwb">int</span> min_col<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">];</span>
   <span class="hl kwb">int</span> max_col<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">];</span>

   <span class="hl kwd">MaskData</span><span class="hl sym">() {</span>
      mask<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] =</span> <span class="hl num">0</span><span class="hl sym">;</span>
      mask<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">] =</span> <span class="hl num">0</span><span class="hl sym">;</span>
      height <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      min_col<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] =</span> <span class="hl num">0</span><span class="hl sym">;</span>
      min_col<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">] =</span> <span class="hl num">0</span><span class="hl sym">;</span>
      max_col<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] =</span> <span class="hl num">0</span><span class="hl sym">;</span>
      max_col<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">] =</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>
<span class="hl sym">};</span>

<span class="hl kwc">typedef</span> <span class="hl kwb">struct</span> RotationData <span class="hl sym">{</span>
   <span class="hl kwb">int</span> mask<span class="hl sym">;</span>
   <span class="hl kwb">int</span> iMask<span class="hl sym">;</span>
   <span class="hl kwb">int</span> cMask<span class="hl sym">;</span>
   <span class="hl kwb">int</span> row<span class="hl sym">;</span>
   <span class="hl kwb">int</span> positions<span class="hl sym">[</span><span class="hl num">5</span><span class="hl sym">];</span>
   <span class="hl kwb">int</span> number<span class="hl sym">;</span>
<span class="hl sym">};</span>

<span class="hl kwb">void</span> <span class="hl kwd">print_mask</span><span class="hl sym">(</span> <span class="hl kwb">long long</span> mask<span class="hl sym">) {</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> row <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> row <span class="hl sym">&lt;</span> <span class="hl num">10</span><span class="hl sym">;</span> row<span class="hl sym">++) {</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>row <span class="hl sym">%</span> <span class="hl num">2</span><span class="hl sym">)</span> cout <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot; &quot;</span><span class="hl sym">;</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> col <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> col <span class="hl sym">&lt;</span> <span class="hl num">5</span><span class="hl sym">;</span> col<span class="hl sym">++) {</span>
         cout <span class="hl sym">&lt;&lt; (</span><span class="hl kwd">get_bit</span><span class="hl sym">(</span> mask<span class="hl sym">,</span> row<span class="hl sym">,</span> col<span class="hl sym">)</span>?<span class="hl str">&quot;1&quot;</span><span class="hl sym">:</span><span class="hl str">&quot;0&quot;</span><span class="hl sym">) &lt;&lt;</span> <span class="hl str">&quot; &quot;</span><span class="hl sym">;</span>
      <span class="hl sym">}</span>
      cout <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>
   cout <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwc">class</span> LList <span class="hl sym">{</span>
   <span class="hl kwc">public</span><span class="hl sym">:</span>
      LList <span class="hl sym">*</span>next<span class="hl sym">;</span>
      <span class="hl kwd">LList</span><span class="hl sym">() {</span> next <span class="hl sym">=</span> NULL<span class="hl sym">; }</span>
<span class="hl sym">};</span>

<span class="hl kwb">struct</span> RotationSet <span class="hl sym">{</span>
   <span class="hl kwb">int</span> size<span class="hl sym">;</span>
   RotationData rotations<span class="hl sym">[</span><span class="hl num">12</span><span class="hl sym">];</span>

   <span class="hl kwd">RotationSet</span><span class="hl sym">() {</span> size <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">; }</span>

   <span class="hl kwb">void</span> <span class="hl kwd">add</span><span class="hl sym">(</span> RotationData <span class="hl sym">&amp;</span>data<span class="hl sym">) {</span> rotations<span class="hl sym">[</span> size<span class="hl sym">] =</span> data<span class="hl sym">;</span> size<span class="hl sym">++; }</span>
<span class="hl sym">};</span>

<span class="hl kwc">class</span> PieceData <span class="hl sym">:</span> <span class="hl kwc">public</span> LList <span class="hl sym">{</span>
   <span class="hl kwc">private</span><span class="hl sym">:</span>
      <span class="hl kwb">void</span> <span class="hl kwd">transform</span><span class="hl sym">(</span> <span class="hl kwb">const int</span> matrix <span class="hl sym">[],</span> vector<span class="hl sym">&lt;</span><span class="hl kwb">int</span><span class="hl sym">&gt; &amp;</span>list <span class="hl sym">) {</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> list<span class="hl sym">.</span><span class="hl kwd">size</span><span class="hl sym">();</span> i<span class="hl sym">++) {</span>
            list<span class="hl sym">[</span>i<span class="hl sym">] =</span> matrix<span class="hl sym">[</span>list<span class="hl sym">[</span>i<span class="hl sym">]];</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>

      <span class="hl kwb">int</span> <span class="hl kwd">get_offset</span><span class="hl sym">(</span> vector<span class="hl sym">&lt;</span><span class="hl kwb">int</span><span class="hl sym">&gt; &amp;</span>directions <span class="hl sym">) {</span>
         <span class="hl kwb">int</span> offset <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> directions<span class="hl sym">.</span><span class="hl kwd">size</span><span class="hl sym">();</span> i<span class="hl sym">++) {</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>directions<span class="hl sym">[</span>i<span class="hl sym">] ==</span> SW <span class="hl sym">||</span> directions<span class="hl sym">[</span>i<span class="hl sym">] ==</span> NW <span class="hl sym">||</span> directions<span class="hl sym">[</span>i<span class="hl sym">] ==</span> WEST<span class="hl sym">)</span> offset<span class="hl sym">++;</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>directions<span class="hl sym">[</span>i<span class="hl sym">] ==</span> NW <span class="hl sym">||</span> directions<span class="hl sym">[</span>i<span class="hl sym">] ==</span> NE<span class="hl sym">)</span> offset <span class="hl sym">+=</span> <span class="hl num">5</span><span class="hl sym">;</span>
         <span class="hl sym">}</span>
         <span class="hl kwa">return</span> offset<span class="hl sym">;</span>
      <span class="hl sym">}</span>

      MaskData <span class="hl kwd">mask_for_directions</span><span class="hl sym">(</span> vector<span class="hl sym">&lt;</span><span class="hl kwb">int</span><span class="hl sym">&gt; &amp;</span>directions<span class="hl sym">) {</span>
         MaskData data<span class="hl sym">;</span>

         <span class="hl kwb">long long</span> mask <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         <span class="hl kwb">int</span> start_offset <span class="hl sym">=</span> <span class="hl kwd">get_offset</span><span class="hl sym">(</span> directions<span class="hl sym">);</span>
         <span class="hl kwb">int</span> location <span class="hl sym">=</span> start_offset<span class="hl sym">;</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> directions<span class="hl sym">.</span><span class="hl kwd">size</span><span class="hl sym">();</span> i<span class="hl sym">++) {</span>
             <span class="hl kwd">set_bit</span><span class="hl sym">(</span> mask<span class="hl sym">,</span> location<span class="hl sym">);</span>
             <span class="hl kwb">int</span> addition <span class="hl sym">=</span> rotation_adder<span class="hl sym">[ (</span>location <span class="hl sym">/</span> <span class="hl num">5</span><span class="hl sym">) %</span> <span class="hl num">2</span> <span class="hl sym">][</span> directions<span class="hl sym">[</span>i<span class="hl sym">] ];</span>
<span class="hl slc">//             int row = location / 5;</span>
<span class="hl slc">//             int other_row = (location + addition) / 5;</span>
<span class="hl slc">//             char * error = NULL;</span>
<span class="hl slc">//             if ((directions[i] == SW || directions[i] == SE) &amp;&amp; other_row != row + 1) error = &quot;ERROR moving down!&quot;;</span>
<span class="hl slc">//             if ((directions[i] == NW || directions[i] == NE) &amp;&amp; other_row != row - 1) error =  &quot;ERROR moving up!&quot;;</span>
<span class="hl slc">//             if ((directions[i] == EAST || directions[i] == WEST) &amp;&amp;row != other_row) error = &quot;ERROR moving to the side!&quot;;</span>
<span class="hl slc">//             if (error != NULL) {</span>
<span class="hl slc">//               int opposite = opposite_transform[directions[i]];</span>
<span class="hl slc">//               if (illegal_move_masks[opposite] &amp; mask) {</span>
<span class="hl slc">//                  cout &lt;&lt; error &lt;&lt; &quot; directions = &quot;;</span>
<span class="hl slc">//                  for (int j = 0; j &lt; directions.size(); j++) cout &lt;&lt; dir_texts[directions[j]] &lt;&lt; &quot; &quot;;</span>
<span class="hl slc">//                  cout &lt;&lt; &quot; [[[ current direction = &quot; &lt;&lt; dir_texts[directions[i]] &lt;&lt; &quot;]]]&quot; &lt;&lt; &quot; opposite unavailable: &quot; &lt;&lt; dir_texts[opposite] &lt;&lt; &quot;\n&quot;;</span>
<span class="hl slc">//                  cout &lt;&lt; &quot;row = &quot; &lt;&lt; row &lt;&lt; &quot;, other row = &quot; &lt;&lt; other_row &lt;&lt;&quot;\n&quot;;</span>
<span class="hl slc">//                  print_mask( mask);</span>
<span class="hl slc">//               } else {</span>
<span class="hl slc">//                  addition = 0;</span>
<span class="hl slc">//                  mask = shift_mask( opposite, mask);</span>
<span class="hl slc">//               }</span>
<span class="hl slc">//             }</span>
             location <span class="hl sym">+=</span> addition<span class="hl sym">;</span>
         <span class="hl sym">}</span>
         <span class="hl kwd">set_bit</span><span class="hl sym">(</span> mask<span class="hl sym">,</span> location<span class="hl sym">);</span>

         <span class="hl kwa">while</span> <span class="hl sym">(!(</span>mask <span class="hl sym">&amp;</span> top_edge<span class="hl sym">)) {</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>illegal_move_masks<span class="hl sym">[</span>NW<span class="hl sym">] &amp;</span> mask<span class="hl sym">) {</span>
               <span class="hl kwa">if</span> <span class="hl sym">(</span>illegal_move_masks<span class="hl sym">[</span>NE<span class="hl sym">] &amp;</span> mask<span class="hl sym">)</span> cout <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;ERROR SHIFTING UPWARD</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
               <span class="hl kwa">else</span> mask <span class="hl sym">=</span> <span class="hl kwd">shift_ne</span><span class="hl sym">(</span>mask<span class="hl sym">);</span>
            <span class="hl sym">}</span> <span class="hl kwa">else</span> mask <span class="hl sym">=</span> <span class="hl kwd">shift_nw</span><span class="hl sym">(</span>mask<span class="hl sym">);</span>
         <span class="hl sym">}</span>

         <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> row <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> mask <span class="hl sym">&amp;</span> row_masks<span class="hl sym">[</span>row<span class="hl sym">];</span> row<span class="hl sym">++)</span> data<span class="hl sym">.</span>height<span class="hl sym">++;</span>
         <span class="hl kwa">while</span> <span class="hl sym">(!(</span>mask <span class="hl sym">&amp;</span> right_edges<span class="hl sym">))</span> mask <span class="hl sym">=</span> <span class="hl kwd">shift_east</span><span class="hl sym">(</span>mask<span class="hl sym">);</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> col_on <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">; !</span><span class="hl kwd">has_bit</span><span class="hl sym">(</span>mask<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> col_on<span class="hl sym">);</span> col_on<span class="hl sym">++)</span> data<span class="hl sym">.</span>max_col<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]++;</span>
         <span class="hl kwa">while</span> <span class="hl sym">(!(</span>mask <span class="hl sym">&amp;</span> left_edges<span class="hl sym">))</span> mask <span class="hl sym">=</span> <span class="hl kwd">shift_west</span><span class="hl sym">(</span>mask<span class="hl sym">);</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> col_on <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">; !</span><span class="hl kwd">has_bit</span><span class="hl sym">(</span>mask<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> col_on<span class="hl sym">);</span> col_on<span class="hl sym">++)</span> data<span class="hl sym">.</span>min_col<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]++;</span>
         data<span class="hl sym">.</span>mask<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] =</span> mask <span class="hl sym">&gt;&gt;</span> data<span class="hl sym">.</span>min_col<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>

         <span class="hl kwa">if</span> <span class="hl sym">(</span>mask <span class="hl sym">&amp;</span> illegal_move_masks<span class="hl sym">[</span>SE<span class="hl sym">]) {</span>
            cout <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;ERROR SHIFTING DOWNWARD</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
         <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
            mask <span class="hl sym">=</span> <span class="hl kwd">shift_se</span><span class="hl sym">(</span> mask<span class="hl sym">);</span>
            <span class="hl kwa">while</span> <span class="hl sym">(!(</span>mask <span class="hl sym">&amp;</span> right_edges<span class="hl sym">))</span> mask <span class="hl sym">=</span> <span class="hl kwd">shift_east</span><span class="hl sym">(</span>mask<span class="hl sym">);</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> col_on <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">; !</span><span class="hl kwd">get_bit</span><span class="hl sym">(</span>mask<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> col_on<span class="hl sym">);</span> col_on<span class="hl sym">++)</span> data<span class="hl sym">.</span>max_col<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]++;</span>
            <span class="hl kwa">while</span> <span class="hl sym">(!(</span>mask <span class="hl sym">&amp;</span> left_edges<span class="hl sym">))</span> mask <span class="hl sym">=</span> <span class="hl kwd">shift_west</span><span class="hl sym">(</span>mask<span class="hl sym">);</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> col_on <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">; !</span><span class="hl kwd">get_bit</span><span class="hl sym">(</span>mask<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> col_on<span class="hl sym">);</span> col_on<span class="hl sym">++)</span> data<span class="hl sym">.</span>min_col<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]++;</span>
            data<span class="hl sym">.</span>mask<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">] =</span> mask <span class="hl sym">&gt;&gt; (</span>data<span class="hl sym">.</span>min_col<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">] +</span> <span class="hl num">5</span><span class="hl sym">);</span>
         <span class="hl sym">}</span>

         <span class="hl slc">//cout &lt;&lt; &quot;\nDIRECTIONS: &quot; &lt;&lt; directions[0] &lt;&lt; directions[1] &lt;&lt; directions[2] &lt;&lt; directions[3] &lt;&lt; &quot; [&quot; &lt;&lt; start_offset &lt;&lt; &quot;]\n&quot;;</span>
         <span class="hl slc">//cout &lt;&lt; &quot;height = &quot; &lt;&lt; data.height &lt;&lt; &quot;, min[0] = &quot; &lt;&lt; data.min_col[0] &lt;&lt; &quot;, max[0] = &quot; &lt;&lt; data.max_col[0] &lt;&lt;</span>
         <span class="hl slc">//   &quot;, min[1] = &quot; &lt;&lt; data.min_col[1] &lt;&lt; &quot;, max[1] = &quot; &lt;&lt; data.max_col[1] &lt;&lt; &quot;\n&quot;;</span>
         <span class="hl slc">//print_mask( data.mask[1]);</span>
         <span class="hl slc">//exit(0);</span>

         <span class="hl kwa">return</span> data<span class="hl sym">;</span>
      <span class="hl sym">}</span>

      <span class="hl kwb">void</span> <span class="hl kwd">compute_rotation_positions</span><span class="hl sym">(</span> <span class="hl kwb">long long</span> board<span class="hl sym">,</span> RotationData <span class="hl sym">&amp;</span>rotation<span class="hl sym">) {</span>
          <span class="hl kwb">int</span> pos <span class="hl sym">=</span> rotation<span class="hl sym">.</span>row <span class="hl sym">*</span> <span class="hl num">5</span><span class="hl sym">;</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> num <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> num <span class="hl sym">&lt;</span> <span class="hl num">5</span><span class="hl sym">;</span> pos<span class="hl sym">++) {</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">has_bit</span><span class="hl sym">(</span>board<span class="hl sym">,</span> pos<span class="hl sym">)) {</span>
               rotation<span class="hl sym">.</span>positions<span class="hl sym">[</span>num<span class="hl sym">] =</span> pos<span class="hl sym">;</span>
               num<span class="hl sym">++;</span>
            <span class="hl sym">}</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>

      <span class="hl kwb">void</span> <span class="hl kwd">add_rotation</span><span class="hl sym">(</span> <span class="hl kwb">long long</span> mask<span class="hl sym">,</span> <span class="hl kwb">int</span> row<span class="hl sym">,</span> <span class="hl kwb">int</span> col<span class="hl sym">) {</span>
         RotationData rotation<span class="hl sym">;</span>
         rotation<span class="hl sym">.</span>row <span class="hl sym">=</span> row<span class="hl sym">;</span>
         rotation<span class="hl sym">.</span>mask <span class="hl sym">= (</span><span class="hl kwb">int</span><span class="hl sym">)(</span>mask <span class="hl sym">&gt;&gt; (</span><span class="hl num">5</span> <span class="hl sym">*</span> row<span class="hl sym">));</span>
         rotation<span class="hl sym">.</span>number <span class="hl sym">=</span> number<span class="hl sym">;</span>
         <span class="hl kwb">long long</span> board <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> row<span class="hl sym">;</span> i<span class="hl sym">++)</span> board <span class="hl sym">|=</span> row_masks<span class="hl sym">[</span>i<span class="hl sym">];</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> col<span class="hl sym">;</span> i<span class="hl sym">++)</span> <span class="hl kwd">set_bit</span><span class="hl sym">(</span> board<span class="hl sym">,</span> row<span class="hl sym">,</span> i<span class="hl sym">);</span>
         board <span class="hl sym">|=</span> mask<span class="hl sym">;</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">4</span><span class="hl sym">;</span> i <span class="hl sym">&gt;=</span> <span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">--) {</span>
            <span class="hl kwa">if</span> <span class="hl sym">(!</span><span class="hl kwd">has_bit</span><span class="hl sym">(</span> board<span class="hl sym">,</span> <span class="hl num">9</span><span class="hl sym">,</span> i<span class="hl sym">)) {</span>
               board <span class="hl sym">=</span> <span class="hl kwd">flood_fill_up</span><span class="hl sym">(</span> board<span class="hl sym">,</span> <span class="hl num">9</span><span class="hl sym">,</span> i<span class="hl sym">);</span>
               <span class="hl kwa">break</span><span class="hl sym">;</span>
            <span class="hl sym">}</span>
         <span class="hl sym">}</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>board <span class="hl sym">==</span> full_mask<span class="hl sym">) {</span>
            rotation<span class="hl sym">.</span>iMask <span class="hl sym">=</span> rotation<span class="hl sym">.</span>mask<span class="hl sym">;</span>
            rotation<span class="hl sym">.</span>cMask <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
            <span class="hl kwb">int</span> count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl kwb">long long</span> cMask <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> pos <span class="hl sym">=</span> <span class="hl kwd">location_of</span><span class="hl sym">(</span>row<span class="hl sym">,</span> col<span class="hl sym">);</span> pos <span class="hl sym">&lt;</span> <span class="hl num">50</span><span class="hl sym">;</span> pos<span class="hl sym">++) {</span>
               <span class="hl kwa">if</span> <span class="hl sym">(!</span><span class="hl kwd">has_bit</span><span class="hl sym">(</span>board<span class="hl sym">,</span>pos<span class="hl sym">)) {</span>
                  <span class="hl kwd">set_bit</span><span class="hl sym">(</span>cMask<span class="hl sym">,</span> pos<span class="hl sym">);</span>
                  count<span class="hl sym">++;</span>
               <span class="hl sym">}</span>
               <span class="hl kwa">if</span> <span class="hl sym">(</span>count <span class="hl sym">&gt;=</span> <span class="hl num">5</span><span class="hl sym">) {</span>
                  cMask <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
                  <span class="hl kwa">break</span><span class="hl sym">;</span>
               <span class="hl sym">}</span>
            <span class="hl sym">}</span>
            rotation<span class="hl sym">.</span>cMask <span class="hl sym">= (</span><span class="hl kwb">int</span><span class="hl sym">)(</span>cMask <span class="hl sym">&gt;&gt; (</span><span class="hl num">5</span> <span class="hl sym">*</span> row<span class="hl sym">));</span>
            rotation<span class="hl sym">.</span>iMask <span class="hl sym">=</span> rotation<span class="hl sym">.</span>mask <span class="hl sym">|</span> rotation<span class="hl sym">.</span>cMask<span class="hl sym">;</span>
         <span class="hl sym">}</span>

         <span class="hl kwd">compute_rotation_positions</span><span class="hl sym">(</span> mask<span class="hl sym">,</span> rotation<span class="hl sym">);</span>
         rotation_sets<span class="hl sym">[</span>row<span class="hl sym">][</span>col<span class="hl sym">].</span><span class="hl kwd">add</span><span class="hl sym">(</span> rotation<span class="hl sym">);</span>
      <span class="hl sym">}</span>

      <span class="hl kwb">void</span> <span class="hl kwd">build_piece</span><span class="hl sym">(</span> vector<span class="hl sym">&lt;</span><span class="hl kwb">int</span><span class="hl sym">&gt; &amp;</span>directions<span class="hl sym">) {</span>
         vector<span class="hl sym">&lt;</span>MaskData<span class="hl sym">&gt;</span> base_masks<span class="hl sym">;</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">2</span><span class="hl sym">;</span> i<span class="hl sym">++) {</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> j <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> j <span class="hl sym">&lt;</span> <span class="hl num">6</span><span class="hl sym">;</span> j<span class="hl sym">++) {</span>
               base_masks<span class="hl sym">.</span><span class="hl kwd">push_back</span><span class="hl sym">(</span><span class="hl kwd">mask_for_directions</span><span class="hl sym">(</span>directions<span class="hl sym">));</span>
               <span class="hl kwd">transform</span><span class="hl sym">(</span> rotate_transform<span class="hl sym">,</span> directions<span class="hl sym">);</span>
            <span class="hl sym">}</span>
            <span class="hl kwd">transform</span><span class="hl sym">(</span> flip_transform<span class="hl sym">,</span> directions<span class="hl sym">);</span>
         <span class="hl sym">}</span>

         <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> mask_on <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> mask_on <span class="hl sym">&lt;</span> base_masks<span class="hl sym">.</span><span class="hl kwd">size</span><span class="hl sym">();</span> mask_on<span class="hl sym">++) {</span>
            MaskData data <span class="hl sym">=</span> base_masks<span class="hl sym">[</span>mask_on<span class="hl sym">];</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> row <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> row <span class="hl sym">&lt;= (</span><span class="hl num">10</span> <span class="hl sym">-</span> data<span class="hl sym">.</span>height<span class="hl sym">);</span> row<span class="hl sym">++) {</span>
               <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> col <span class="hl sym">=</span> data<span class="hl sym">.</span>min_col<span class="hl sym">[</span>row <span class="hl sym">%</span> <span class="hl num">2</span><span class="hl sym">];</span> col <span class="hl sym">&lt;=</span> data<span class="hl sym">.</span>max_col<span class="hl sym">[</span>row <span class="hl sym">%</span> <span class="hl num">2</span><span class="hl sym">];</span> col<span class="hl sym">++) {</span>
                  <span class="hl kwb">long long</span> mask <span class="hl sym">=</span> data<span class="hl sym">.</span>mask<span class="hl sym">[</span>row <span class="hl sym">%</span> <span class="hl num">2</span><span class="hl sym">] &lt;&lt; (</span>row <span class="hl sym">*</span> <span class="hl num">5</span> <span class="hl sym">+</span> col<span class="hl sym">);</span>
                  <span class="hl kwb">long long</span> board <span class="hl sym">=</span> mask<span class="hl sym">;</span>
                  <span class="hl kwa">if</span> <span class="hl sym">(</span> row <span class="hl sym">&gt;=</span> <span class="hl num">3</span><span class="hl sym">)</span> board <span class="hl sym">=</span> <span class="hl kwd">flood_fill_down</span><span class="hl sym">(</span> board<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">);</span>
                  <span class="hl kwa">else</span> board <span class="hl sym">=</span> <span class="hl kwd">flood_fill_up</span><span class="hl sym">(</span> board<span class="hl sym">,</span> <span class="hl num">9</span><span class="hl sym">,</span> <span class="hl num">4</span><span class="hl sym">);</span>
                  <span class="hl kwa">if</span> <span class="hl sym">(</span>board <span class="hl sym">==</span> full_mask<span class="hl sym">) {</span>
                     <span class="hl kwd">add_rotation</span><span class="hl sym">(</span> mask<span class="hl sym">,</span> row<span class="hl sym">,</span> col<span class="hl sym">);</span>
                  <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
                     <span class="hl kwb">int</span> count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
                     <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> t <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> t <span class="hl sym">&lt;</span> <span class="hl num">10</span><span class="hl sym">;</span> t<span class="hl sym">++)</span> count <span class="hl sym">+=</span> bit_counts<span class="hl sym">[ (</span><span class="hl kwb">int</span><span class="hl sym">)((</span>board <span class="hl sym">&gt;&gt; (</span>t <span class="hl sym">*</span> <span class="hl num">5</span><span class="hl sym">)) &amp;</span> row_masks<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">])];</span>
                     <span class="hl kwa">if</span> <span class="hl sym">(</span>count <span class="hl sym">%</span> <span class="hl num">5</span> <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">) {</span>
                        <span class="hl kwd">add_rotation</span><span class="hl sym">(</span> mask<span class="hl sym">,</span> row<span class="hl sym">,</span> col<span class="hl sym">);</span>
                     <span class="hl sym">}</span>
                  <span class="hl sym">}</span>
               <span class="hl sym">}</span>
            <span class="hl sym">}</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>

   <span class="hl kwc">public</span><span class="hl sym">:</span>
      <span class="hl kwb">int</span> number<span class="hl sym">;</span>
      RotationSet rotation_sets<span class="hl sym">[</span><span class="hl num">10</span><span class="hl sym">][</span><span class="hl num">5</span><span class="hl sym">];</span>

      <span class="hl kwd">PieceData</span><span class="hl sym">(</span> <span class="hl kwb">int</span> d1<span class="hl sym">,</span> <span class="hl kwb">int</span> d2<span class="hl sym">,</span> <span class="hl kwb">int</span> d3<span class="hl sym">,</span> <span class="hl kwb">int</span> d4<span class="hl sym">,</span> <span class="hl kwb">int</span> piece_number <span class="hl sym">) :</span> <span class="hl kwd">LList</span><span class="hl sym">()  {</span>
         number <span class="hl sym">=</span> piece_number<span class="hl sym">;</span>
         vector<span class="hl sym">&lt;</span><span class="hl kwb">int</span><span class="hl sym">&gt;</span> directions<span class="hl sym">;</span>
         directions<span class="hl sym">.</span><span class="hl kwd">push_back</span><span class="hl sym">(</span>d1<span class="hl sym">);</span>
         directions<span class="hl sym">.</span><span class="hl kwd">push_back</span><span class="hl sym">(</span>d2<span class="hl sym">);</span>
         directions<span class="hl sym">.</span><span class="hl kwd">push_back</span><span class="hl sym">(</span>d3<span class="hl sym">);</span>
         directions<span class="hl sym">.</span><span class="hl kwd">push_back</span><span class="hl sym">(</span>d4<span class="hl sym">);</span>
         <span class="hl kwd">build_piece</span><span class="hl sym">(</span> directions<span class="hl sym">);</span>
      <span class="hl sym">}</span>

      <span class="hl kwd">PieceData</span><span class="hl sym">(</span> <span class="hl kwb">int</span> d1<span class="hl sym">,</span> <span class="hl kwb">int</span> d2<span class="hl sym">,</span> <span class="hl kwb">int</span> d3<span class="hl sym">,</span> <span class="hl kwb">int</span> d4<span class="hl sym">,</span> <span class="hl kwb">int</span> d5<span class="hl sym">,</span> <span class="hl kwb">int</span> piece_number <span class="hl sym">) :</span> <span class="hl kwd">LList</span><span class="hl sym">() {</span>
         number <span class="hl sym">=</span> piece_number<span class="hl sym">;</span>
         vector<span class="hl sym">&lt;</span><span class="hl kwb">int</span><span class="hl sym">&gt;</span> directions<span class="hl sym">;</span>
         directions<span class="hl sym">.</span><span class="hl kwd">push_back</span><span class="hl sym">(</span>d1<span class="hl sym">);</span>
         directions<span class="hl sym">.</span><span class="hl kwd">push_back</span><span class="hl sym">(</span>d2<span class="hl sym">);</span>
         directions<span class="hl sym">.</span><span class="hl kwd">push_back</span><span class="hl sym">(</span>d3<span class="hl sym">);</span>
         directions<span class="hl sym">.</span><span class="hl kwd">push_back</span><span class="hl sym">(</span>d4<span class="hl sym">);</span>
         directions<span class="hl sym">.</span><span class="hl kwd">push_back</span><span class="hl sym">(</span>d5<span class="hl sym">);</span>
         <span class="hl kwd">build_piece</span><span class="hl sym">(</span> directions<span class="hl sym">);</span>
      <span class="hl sym">}</span>
<span class="hl sym">};</span>

<span class="hl slc">// GOLBAL VARIABLES MUH-HA-HA-HA</span>
LList <span class="hl sym">*</span>head<span class="hl sym">;</span>
LList <span class="hl sym">*</span>tail<span class="hl sym">;</span>

<span class="hl kwb">int</span> num_placed <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl kwb">int</span> num_found <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl kwb">int</span> num_to_find <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl kwb">int</span> tries<span class="hl sym">[</span><span class="hl num">10</span><span class="hl sym">] = {</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span> <span class="hl sym">};</span>
RotationData <span class="hl sym">*</span>active_rotations<span class="hl sym">[</span><span class="hl num">10</span><span class="hl sym">];</span>
set<span class="hl sym">&lt;</span>string<span class="hl sym">&gt;</span> found_boards<span class="hl sym">;</span>

<span class="hl kwb">void</span> <span class="hl kwd">create_piece_maps</span><span class="hl sym">() {</span>
   tail <span class="hl sym">=</span> head <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">PieceData</span><span class="hl sym">(</span> NW<span class="hl sym">,</span> NE<span class="hl sym">,</span> EAST<span class="hl sym">,</span> EAST<span class="hl sym">,</span>  <span class="hl num">2</span><span class="hl sym">);</span>
   tail<span class="hl sym">-&gt;</span>next <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">PieceData</span><span class="hl sym">(</span> NE<span class="hl sym">,</span> SE<span class="hl sym">,</span> EAST<span class="hl sym">,</span> NE<span class="hl sym">,</span>  <span class="hl num">7</span><span class="hl sym">);</span>
   tail <span class="hl sym">=</span> tail<span class="hl sym">-&gt;</span>next<span class="hl sym">;</span>
   tail<span class="hl sym">-&gt;</span>next <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">PieceData</span><span class="hl sym">(</span> NE<span class="hl sym">,</span> EAST<span class="hl sym">,</span> NE<span class="hl sym">,</span> NW<span class="hl sym">,</span>  <span class="hl num">1</span><span class="hl sym">);</span>
   tail <span class="hl sym">=</span> tail<span class="hl sym">-&gt;</span>next<span class="hl sym">;</span>
   tail<span class="hl sym">-&gt;</span>next <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">PieceData</span><span class="hl sym">(</span> EAST<span class="hl sym">,</span> SW<span class="hl sym">,</span> SW<span class="hl sym">,</span> SE<span class="hl sym">,</span>  <span class="hl num">6</span><span class="hl sym">);</span>
   tail <span class="hl sym">=</span> tail<span class="hl sym">-&gt;</span>next<span class="hl sym">;</span>
   tail<span class="hl sym">-&gt;</span>next <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">PieceData</span><span class="hl sym">(</span> EAST<span class="hl sym">,</span> NE<span class="hl sym">,</span> SE<span class="hl sym">,</span> NE<span class="hl sym">,</span>  <span class="hl num">5</span><span class="hl sym">);</span>
   tail <span class="hl sym">=</span> tail<span class="hl sym">-&gt;</span>next<span class="hl sym">;</span>
   tail<span class="hl sym">-&gt;</span>next <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">PieceData</span><span class="hl sym">(</span> EAST<span class="hl sym">,</span> EAST<span class="hl sym">,</span> EAST<span class="hl sym">,</span> SE<span class="hl sym">,</span>  <span class="hl num">0</span><span class="hl sym">);</span>
   tail <span class="hl sym">=</span> tail<span class="hl sym">-&gt;</span>next<span class="hl sym">;</span>
   tail<span class="hl sym">-&gt;</span>next <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">PieceData</span><span class="hl sym">(</span> NE<span class="hl sym">,</span> NW<span class="hl sym">,</span> SE<span class="hl sym">,</span> EAST<span class="hl sym">,</span> SE<span class="hl sym">,</span>  <span class="hl num">4</span><span class="hl sym">);</span>
   tail <span class="hl sym">=</span> tail<span class="hl sym">-&gt;</span>next<span class="hl sym">;</span>
   tail<span class="hl sym">-&gt;</span>next <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">PieceData</span><span class="hl sym">(</span> SE<span class="hl sym">,</span> SE<span class="hl sym">,</span> SE<span class="hl sym">,</span> WEST<span class="hl sym">,</span>  <span class="hl num">9</span><span class="hl sym">);</span>
   tail <span class="hl sym">=</span> tail<span class="hl sym">-&gt;</span>next<span class="hl sym">;</span>
   tail<span class="hl sym">-&gt;</span>next <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">PieceData</span><span class="hl sym">(</span> SE<span class="hl sym">,</span> SE<span class="hl sym">,</span> EAST<span class="hl sym">,</span> SE<span class="hl sym">,</span>  <span class="hl num">8</span><span class="hl sym">);</span>
   tail <span class="hl sym">=</span> tail<span class="hl sym">-&gt;</span>next<span class="hl sym">;</span>
   tail<span class="hl sym">-&gt;</span>next <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">PieceData</span><span class="hl sym">(</span> EAST<span class="hl sym">,</span> EAST<span class="hl sym">,</span> SW<span class="hl sym">,</span> SE<span class="hl sym">,</span>  <span class="hl num">3</span><span class="hl sym">);</span>
   tail <span class="hl sym">=</span> tail<span class="hl sym">-&gt;</span>next<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">print_board</span><span class="hl sym">(</span> string board_string<span class="hl sym">) {</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> row <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> row <span class="hl sym">&lt;</span> <span class="hl num">10</span><span class="hl sym">;</span> row<span class="hl sym">++) {</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>row <span class="hl sym">%</span> <span class="hl num">2</span><span class="hl sym">)</span> cout <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot; &quot;</span><span class="hl sym">;</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> col <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> col <span class="hl sym">&lt;</span> <span class="hl num">5</span><span class="hl sym">;</span> col<span class="hl sym">++)</span> cout <span class="hl sym">&lt;&lt;</span> board_string<span class="hl sym">[</span>row <span class="hl sym">*</span> <span class="hl num">5</span> <span class="hl sym">+</span> col<span class="hl sym">] &lt;&lt;</span> <span class="hl str">&quot; &quot;</span><span class="hl sym">;</span>
      cout <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>
   cout <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">print_results</span><span class="hl sym">() {</span>
   cout <span class="hl sym">&lt;&lt;</span> num_found <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot; solutions found</span><span class="hl esc">\n\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
   <span class="hl kwd">print_board</span><span class="hl sym">( *</span>found_boards<span class="hl sym">.</span><span class="hl kwd">begin</span><span class="hl sym">());</span>
   <span class="hl kwd">print_board</span><span class="hl sym">( *</span>found_boards<span class="hl sym">.</span><span class="hl kwd">rbegin</span><span class="hl sym">());</span>
<span class="hl sym">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">add_board_string</span><span class="hl sym">(</span> <span class="hl kwb">const char</span> <span class="hl sym">*</span> board_string<span class="hl sym">) {</span>
   string s <span class="hl sym">=</span> board_string<span class="hl sym">;</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span>found_boards<span class="hl sym">.</span><span class="hl kwd">count</span><span class="hl sym">(</span>s<span class="hl sym">) ==</span> <span class="hl num">0</span><span class="hl sym">) {</span>
      found_boards<span class="hl sym">.</span><span class="hl kwd">insert</span><span class="hl sym">(</span>s<span class="hl sym">);</span>
      num_found<span class="hl sym">++;</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>num_to_find <span class="hl sym">==</span> num_found<span class="hl sym">) {</span>
         <span class="hl kwd">print_results</span><span class="hl sym">();</span>
         <span class="hl kwd">exit</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>


<span class="hl kwb">void</span> <span class="hl kwd">board_found</span><span class="hl sym">() {</span>
   <span class="hl kwb">char</span> board_string<span class="hl sym">[</span><span class="hl num">51</span><span class="hl sym">];</span>
   <span class="hl kwd">memset</span><span class="hl sym">(</span>board_string<span class="hl sym">,</span><span class="hl str">'x'</span><span class="hl sym">,</span><span class="hl num">51</span><span class="hl sym">);</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">10</span><span class="hl sym">;</span> i<span class="hl sym">++) {</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> j <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> j <span class="hl sym">&lt;</span> <span class="hl num">5</span><span class="hl sym">;</span> j<span class="hl sym">++) {</span>
         board_string<span class="hl sym">[</span>active_rotations<span class="hl sym">[</span>i<span class="hl sym">]-&gt;</span>positions<span class="hl sym">[</span>j<span class="hl sym">]] =</span> <span class="hl str">'0'</span> <span class="hl sym">+</span> active_rotations<span class="hl sym">[</span>i<span class="hl sym">]-&gt;</span>number<span class="hl sym">;</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
   board_string<span class="hl sym">[</span><span class="hl num">50</span><span class="hl sym">] =</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwd">add_board_string</span><span class="hl sym">(</span> board_string<span class="hl sym">);</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">25</span><span class="hl sym">;</span> i<span class="hl sym">++) {</span> <span class="hl kwb">char</span> c <span class="hl sym">=</span> board_string<span class="hl sym">[</span>i<span class="hl sym">];</span> board_string<span class="hl sym">[</span>i<span class="hl sym">] =</span> board_string<span class="hl sym">[</span><span class="hl num">49</span> <span class="hl sym">-</span> i<span class="hl sym">];</span> board_string<span class="hl sym">[</span><span class="hl num">49</span><span class="hl sym">-</span>i<span class="hl sym">] =</span> c<span class="hl sym">; }</span>
   <span class="hl kwd">add_board_string</span><span class="hl sym">(</span> board_string<span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">find</span><span class="hl sym">(</span> <span class="hl kwb">int</span> row<span class="hl sym">,</span> <span class="hl kwb">int</span> board<span class="hl sym">) {</span>
   <span class="hl kwa">while</span> <span class="hl sym">((</span>board <span class="hl sym">&amp;</span> <span class="hl num">31</span><span class="hl sym">) ==</span> <span class="hl num">31</span><span class="hl sym">) {</span>
      row<span class="hl sym">++;</span>
      board <span class="hl sym">&gt;&gt;=</span> <span class="hl num">5</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>
   MaskInfo <span class="hl sym">&amp;</span>info <span class="hl sym">=</span> big_map<span class="hl sym">[</span>board <span class="hl sym">&amp;</span> two_row_mask<span class="hl sym">];</span>
   <span class="hl kwa">if</span> <span class="hl sym">(!</span>info<span class="hl sym">.</span>is_legal<span class="hl sym">[</span>row <span class="hl sym">%</span> <span class="hl num">2</span><span class="hl sym">])</span> <span class="hl kwa">return</span><span class="hl sym">;</span>
   <span class="hl kwb">int</span> col <span class="hl sym">=</span> info<span class="hl sym">.</span>start<span class="hl sym">;</span>


   PieceData <span class="hl sym">*</span>start <span class="hl sym">= (</span>PieceData <span class="hl sym">*)</span>head<span class="hl sym">;</span>
   <span class="hl kwa">do</span> <span class="hl sym">{</span>
      PieceData <span class="hl sym">*</span>piece <span class="hl sym">= (</span>PieceData <span class="hl sym">*)</span>head<span class="hl sym">;</span>
      head <span class="hl sym">=</span> piece<span class="hl sym">-&gt;</span>next<span class="hl sym">;</span>
      piece<span class="hl sym">-&gt;</span>next <span class="hl sym">=</span> NULL<span class="hl sym">;</span>
      RotationSet <span class="hl sym">*</span>rotations <span class="hl sym">= &amp;(</span>piece<span class="hl sym">-&gt;</span>rotation_sets<span class="hl sym">[</span>row<span class="hl sym">][</span>col<span class="hl sym">]);</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> rotations<span class="hl sym">-&gt;</span>size<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">;</span> i <span class="hl sym">&gt;=</span> <span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">--) {</span>
         <span class="hl slc">//tries[num_placed]++;</span>
         RotationData <span class="hl sym">*</span>rotation <span class="hl sym">= &amp;</span>rotations<span class="hl sym">-&gt;</span>rotations<span class="hl sym">[</span>i<span class="hl sym">];</span>
         <span class="hl kwa">if</span> <span class="hl sym">((</span>board <span class="hl sym">&amp;</span> rotation<span class="hl sym">-&gt;</span>iMask<span class="hl sym">) ==</span> rotation<span class="hl sym">-&gt;</span>cMask<span class="hl sym">) {</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>num_placed <span class="hl sym">==</span> <span class="hl num">9</span><span class="hl sym">) {</span>
               active_rotations<span class="hl sym">[</span>num_placed<span class="hl sym">] =</span> rotation<span class="hl sym">;</span>
               <span class="hl kwd">board_found</span><span class="hl sym">();</span>
            <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
               active_rotations<span class="hl sym">[</span>num_placed<span class="hl sym">] =</span> rotation<span class="hl sym">;</span>
               num_placed<span class="hl sym">++;</span>
               <span class="hl kwd">find</span><span class="hl sym">(</span> row<span class="hl sym">,</span> board <span class="hl sym">|</span> rotation<span class="hl sym">-&gt;</span>mask<span class="hl sym">);</span>
               num_placed<span class="hl sym">--;</span>
            <span class="hl sym">}</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>head <span class="hl sym">==</span> NULL<span class="hl sym">)</span> head <span class="hl sym">=</span> piece<span class="hl sym">;</span>
      <span class="hl kwa">else</span> tail<span class="hl sym">-&gt;</span>next <span class="hl sym">=</span> piece<span class="hl sym">;</span>
      tail <span class="hl sym">=</span> piece<span class="hl sym">;</span>
   <span class="hl sym">}</span> <span class="hl kwa">while</span> <span class="hl sym">(</span>start <span class="hl sym">!=</span> head<span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">find_all</span><span class="hl sym">() {</span>
   num_found <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   num_placed <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span>
   found_boards<span class="hl sym">.</span><span class="hl kwd">clear</span><span class="hl sym">();</span>
   PieceData <span class="hl sym">*</span>start <span class="hl sym">= (</span>PieceData <span class="hl sym">*)</span>head<span class="hl sym">;</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> odd <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> odd <span class="hl sym">&lt;</span> <span class="hl num">2</span><span class="hl sym">;</span> odd<span class="hl sym">++) {</span>
      <span class="hl kwa">do</span> <span class="hl sym">{</span>
         PieceData <span class="hl sym">*</span>piece <span class="hl sym">= (</span>PieceData <span class="hl sym">*)</span>head<span class="hl sym">;</span>
         head <span class="hl sym">=</span> piece<span class="hl sym">-&gt;</span>next<span class="hl sym">;</span>
         piece<span class="hl sym">-&gt;</span>next <span class="hl sym">=</span> NULL<span class="hl sym">;</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>head <span class="hl sym">!=</span> start<span class="hl sym">) {</span>
            RotationSet <span class="hl sym">*</span>rotations <span class="hl sym">= &amp;(</span>piece<span class="hl sym">-&gt;</span>rotation_sets<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">][</span><span class="hl num">0</span><span class="hl sym">]);</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> rotations<span class="hl sym">-&gt;</span>size<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">;</span> i <span class="hl sym">&gt;=</span> <span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">--) {</span>
               <span class="hl kwa">if</span> <span class="hl sym">(</span>i <span class="hl sym">%</span> <span class="hl num">2</span> <span class="hl sym">==</span> odd<span class="hl sym">) {</span>
                  RotationData <span class="hl sym">*</span>rotation <span class="hl sym">= &amp;</span>rotations<span class="hl sym">-&gt;</span>rotations<span class="hl sym">[</span>i<span class="hl sym">];</span>
                  active_rotations<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] =</span> rotation<span class="hl sym">;</span>
                  <span class="hl kwd">find</span><span class="hl sym">(</span> <span class="hl num">0</span><span class="hl sym">,</span> rotation<span class="hl sym">-&gt;</span>mask<span class="hl sym">);</span>
               <span class="hl sym">}</span>
            <span class="hl sym">}</span>
         <span class="hl sym">}</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>head <span class="hl sym">==</span> NULL<span class="hl sym">)</span> head <span class="hl sym">=</span> piece<span class="hl sym">;</span>
         <span class="hl kwa">else</span> tail<span class="hl sym">-&gt;</span>next <span class="hl sym">=</span> piece<span class="hl sym">;</span>
         tail <span class="hl sym">=</span> piece<span class="hl sym">;</span>
      <span class="hl sym">}</span> <span class="hl kwa">while</span> <span class="hl sym">(</span>start <span class="hl sym">!=</span> head<span class="hl sym">);</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>


<span class="hl kwb">void</span> <span class="hl kwd">create_utlity_maps</span><span class="hl sym">() {</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">32</span><span class="hl sym">;</span> i<span class="hl sym">++) {</span>
      bit_counts<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> j <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> j <span class="hl sym">&lt;</span> <span class="hl num">5</span><span class="hl sym">;</span> j<span class="hl sym">++)</span> <span class="hl kwa">if</span> <span class="hl sym">((</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> j<span class="hl sym">) &amp;</span> i<span class="hl sym">)</span> bit_counts<span class="hl sym">[</span>i<span class="hl sym">]++;</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span>first_bits<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl num">0</span><span class="hl sym">; (</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> first_bits<span class="hl sym">[</span>i<span class="hl sym">]) &amp;</span> i<span class="hl sym">;</span> first_bits<span class="hl sym">[</span>i<span class="hl sym">]++);</span>
   <span class="hl sym">}</span>

   <span class="hl slc">// build starts</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">1024</span><span class="hl sym">;</span> i<span class="hl sym">++)</span> big_map<span class="hl sym">[</span>i<span class="hl sym">].</span>start <span class="hl sym">=</span> first_bits<span class="hl sym">[</span>i <span class="hl sym">&amp;</span> <span class="hl num">31</span><span class="hl sym">];</span>

   <span class="hl slc">// build legality</span>
   <span class="hl kwb">int</span> legal_count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">1024</span><span class="hl sym">;</span> i<span class="hl sym">++) {</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> odd <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> odd <span class="hl sym">&lt;</span> <span class="hl num">2</span><span class="hl sym">;</span> odd<span class="hl sym">++) {</span>
         <span class="hl kwb">int</span> legal <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">;</span>
         <span class="hl kwb">int</span> bit <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span>
         <span class="hl kwa">while</span> <span class="hl sym">(</span>legal <span class="hl sym">&amp;&amp;</span> bit <span class="hl sym">&lt;</span> <span class="hl num">32</span><span class="hl sym">) {</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>i <span class="hl sym">&amp;</span> bit<span class="hl sym">) {</span>
               <span class="hl kwa">if</span> <span class="hl sym">(</span>legal <span class="hl sym">==</span> <span class="hl num">2</span> <span class="hl sym">&amp;&amp;</span> bit <span class="hl sym">&gt;</span> <span class="hl num">1</span> <span class="hl sym">&amp;&amp; ((</span>bit <span class="hl sym">&gt;&gt;</span> <span class="hl num">1</span><span class="hl sym">) &amp;</span> i<span class="hl sym">) ==</span> <span class="hl num">0</span><span class="hl sym">)</span> legal <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
               <span class="hl kwa">else</span> legal <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">;</span>
            <span class="hl sym">}</span> <span class="hl kwa">else if</span> <span class="hl sym">(</span>legal <span class="hl sym">==</span> <span class="hl num">2</span><span class="hl sym">) {</span>
               <span class="hl kwa">if</span> <span class="hl sym">(((</span>bit <span class="hl sym">&lt;&lt;</span> <span class="hl num">5</span><span class="hl sym">) &amp;</span> i<span class="hl sym">) ==</span> <span class="hl num">0</span><span class="hl sym">)</span> legal <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span>
               <span class="hl kwa">else</span> <span class="hl sym">{</span>
                  <span class="hl kwa">if</span> <span class="hl sym">(</span>odd<span class="hl sym">) {</span>
                     <span class="hl kwa">if</span> <span class="hl sym">( (</span>bit <span class="hl sym">&lt;</span> <span class="hl num">16</span><span class="hl sym">) &amp;&amp; (((</span>bit <span class="hl sym">&lt;&lt;</span> <span class="hl num">6</span><span class="hl sym">) &amp;</span> i<span class="hl sym">) ==</span> <span class="hl num">0</span><span class="hl sym">))</span> legal <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span>
                  <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
                     <span class="hl kwa">if</span> <span class="hl sym">( (</span>bit <span class="hl sym">&gt;</span> <span class="hl num">1</span><span class="hl sym">) &amp;&amp; (((</span>bit <span class="hl sym">&lt;&lt;</span> <span class="hl num">4</span><span class="hl sym">) &amp;</span> i<span class="hl sym">) ==</span> <span class="hl num">0</span><span class="hl sym">))</span> legal <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span>
                  <span class="hl sym">}</span>
               <span class="hl sym">}</span>
            <span class="hl sym">}</span>
            bit <span class="hl sym">&lt;&lt;=</span> <span class="hl num">1</span><span class="hl sym">;</span>
         <span class="hl sym">}</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>legal <span class="hl sym">==</span> <span class="hl num">2</span> <span class="hl sym">&amp;&amp; ((</span>bit <span class="hl sym">&gt;&gt;</span> <span class="hl num">1</span><span class="hl sym">) &amp;</span> i<span class="hl sym">) ==</span> <span class="hl num">0</span><span class="hl sym">)</span> legal <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         big_map<span class="hl sym">[</span>i<span class="hl sym">].</span>is_legal<span class="hl sym">[</span>odd<span class="hl sym">] =</span> legal ? <span class="hl kwa">true</span> <span class="hl sym">:</span> <span class="hl kwa">false</span><span class="hl sym">;</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>legal<span class="hl sym">)</span> legal_count<span class="hl sym">++;</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span> <span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">*</span> <span class="hl kwb">const</span> argv<span class="hl sym">[]) {</span>
    num_to_find <span class="hl sym">=</span> <span class="hl num">2098</span><span class="hl sym">;</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span>argc <span class="hl sym">&gt;</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwd">sscanf</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">],</span><span class="hl str">&quot;%d&quot;</span><span class="hl sym">, &amp;</span>num_to_find<span class="hl sym">);</span>

   <span class="hl kwd">create_piece_maps</span><span class="hl sym">();</span>
   <span class="hl kwd">create_utlity_maps</span><span class="hl sym">();</span>
   <span class="hl kwd">find_all</span><span class="hl sym">();</span>
   <span class="hl kwd">print_results</span><span class="hl sym">();</span>

   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>
