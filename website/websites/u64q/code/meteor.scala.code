<source>
<def></def><com>/* The Computer Language Shootout</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com>   contributed by Isaac Gouy</com><br />
<com>*/</com><def></def><br />
<br />
<slc>// This is an un-optimised example implementation</slc><br />
<def></def><br />
<br />
<kwa>import</kwa> <def>scala</def><sym>.</sym><def>collection</def><sym>.</sym><def>mutable</def><sym>.</sym><def>_</def><br />
<br />
<kwa>object</kwa> <def>meteor</def> <sym>{</sym><br />
<def></def>   <kwa>def</kwa> <def>main</def><sym>(</sym><def>args</def><sym>:</sym> <def></def><kwc>Array</kwc><def></def><sym>[</sym><def></def><kwc>String</kwc><def></def><sym>]) = {</sym><br />
<def></def>      <kwa>val</kwa> <def>solver</def> <sym>=</sym> <def></def><kwa>new</kwa> <def>Solver</def><sym>(</sym> <def></def><kwc>Integer</kwc><def></def><sym>.</sym><def>parseInt</def><sym>(</sym><def>args</def><sym>(</sym><def></def><num>0</num><def></def><sym>)) )</sym><br />
<def>      solver</def><sym>.</sym><def>findSolutions<br />
      solver</def><sym>.</sym><def>printSolutions</def><br />
   <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<br />
<br />
<br />
<slc>// Solver.scala</slc><br />
<def></def><slc>// import scala.collection.mutable._</slc><br />
<def></def><br />
<kwa>final class</kwa> <def>Solver</def> <sym>(</sym><def>n</def><sym>:</sym> <def>Int</def><sym>) {</sym><br />
<def></def>   <kwa>private var</kwa> <def>countdown</def> <sym>=</sym> <def>n</def><br />
   <kwa>private var</kwa> <def>first</def><sym>:</sym> <def></def><kwc>String</kwc> <def></def><sym>=</sym> <def>_</def><br />
   <kwa>private var</kwa> <def>last</def><sym>:</sym> <def></def><kwc>String</kwc> <def></def><sym>=</sym> <def>_</def><br />
<br />
   <kwa>private val</kwa> <def>board</def> <sym>=</sym> <def></def><kwa>new</kwa> <def>Board</def><sym>()</sym><br />
<def></def><br />
   <kwa>val</kwa> <def>pieces</def> <sym>=</sym> <def></def><kwc>Array</kwc><def></def><sym>(</sym><br />
<def></def>      <kwa>new</kwa> <def>Piece</def><sym>(</sym><def></def><num>0</num><def></def><sym>),</sym> <def></def><kwa>new</kwa> <def>Piece</def><sym>(</sym><def></def><num>1</num><def></def><sym>),</sym> <def></def><kwa>new</kwa> <def>Piece</def><sym>(</sym><def></def><num>2</num><def></def><sym>),</sym> <def></def><kwa>new</kwa> <def>Piece</def><sym>(</sym><def></def><num>3</num><def></def><sym>),</sym> <def></def><kwa>new</kwa> <def>Piece</def><sym>(</sym><def></def><num>4</num><def></def><sym>),</sym><br />
<def></def>      <kwa>new</kwa> <def>Piece</def><sym>(</sym><def></def><num>5</num><def></def><sym>),</sym> <def></def><kwa>new</kwa> <def>Piece</def><sym>(</sym><def></def><num>6</num><def></def><sym>),</sym> <def></def><kwa>new</kwa> <def>Piece</def><sym>(</sym><def></def><num>7</num><def></def><sym>),</sym> <def></def><kwa>new</kwa> <def>Piece</def><sym>(</sym><def></def><num>8</num><def></def><sym>),</sym> <def></def><kwa>new</kwa> <def>Piece</def><sym>(</sym><def></def><num>9</num><def></def><sym>) )</sym><br />
<def></def><br />
   <kwa>val</kwa> <def>unplaced</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwc>BitSet</kwc><def></def><sym>(</sym><def>pieces</def><sym>.</sym><def>length</def><sym>)</sym><br />
<def></def><br />
   <sym>{</sym> <def>unplaced</def> <sym>++=</sym> <def></def><kwc>Iterator</kwc><def></def><sym>.</sym><def>range</def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym><def>unplaced</def><sym>.</sym><def>capacity</def><sym>) }</sym><br />
<def></def><br />
<br />
   <kwa>def</kwa> <def>findSolutions</def><sym>():</sym> <def>Unit</def> <sym>= {</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>countdown</def> <sym>==</sym> <def></def><num>0</num><def></def><sym>)</sym> <def></def><kwa>return</kwa><br />
<def></def><br />
      <kwa>if</kwa> <def></def><sym>(</sym><def>unplaced</def><sym>.</sym><def>size</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>){</sym><br />
<def></def>         <kwa>val</kwa> <def>emptyCellIndex</def> <sym>=</sym> <def>board</def><sym>.</sym><def>firstEmptyCellIndex</def><br />
<br />
         <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwa>val</kwa> <def>k</def> <sym>&lt;-</sym> <def></def><kwc>Iterator</kwc><def></def><sym>.</sym><def>range</def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym><def>pieces</def><sym>.</sym><def>length</def><sym>)){</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>unplaced</def><sym>.</sym><def>contains</def><sym>(</sym><def>k</def><sym>)){</sym><br />
<def>               unplaced</def> <sym>-=</sym> <def>k</def><br />
<br />
               <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwa>val</kwa> <def>i</def> <sym>&lt;-</sym> <def></def><kwc>Iterator</kwc><def></def><sym>.</sym><def>range</def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym><def>Piece</def><sym>.</sym><def>orientations</def><sym>)){</sym><br />
<def></def>                  <kwa>val</kwa> <def>piece</def> <sym>=</sym> <def>pieces</def><sym>(</sym><def>k</def><sym>).</sym><def>nextOrientation</def><br />
<br />
                  <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwa>val</kwa> <def>j</def> <sym>&lt;-</sym> <def></def><kwc>Iterator</kwc><def></def><sym>.</sym><def>range</def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym><def>Piece</def><sym>.</sym><def>size</def><sym>)){</sym><br />
<def></def>                     <kwa>if</kwa> <def></def><sym>(</sym><def>board</def><sym>.</sym><def>add</def><sym>(</sym><def>j</def><sym>,</sym><def>emptyCellIndex</def><sym>,</sym><def>piece</def><sym>)) {</sym><br />
<def></def><br />
                        <kwa>if</kwa> <def></def><sym>(!</sym><def>shouldPrune</def><sym>)</sym> <def>findSolutions<br />
<br />
                        board</def><sym>.</sym><def>remove</def><sym>(</sym><def>piece</def><sym>)</sym><br />
<def></def>                     <sym>}</sym><br />
<def></def>                  <sym>}</sym><br />
<def></def>               <sym>}</sym><br />
<def>               unplaced</def> <sym>+=</sym> <def>k</def><br />
            <sym>}</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>      <kwa>else</kwa> <def></def><sym>{</sym><br />
<def>         puzzleSolved</def><br />
      <sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>private def</kwa> <def>puzzleSolved</def><sym>() = {</sym><br />
<def></def>      <kwa>val</kwa> <def>b</def> <sym>=</sym> <def>board</def><sym>.</sym><def>asString</def><br />
      <kwa>if</kwa> <def></def><sym>(</sym><def>first</def> <sym>==</sym> <def>null</def><sym>){</sym><br />
<def>         first</def> <sym>=</sym> <def>b</def><sym>;</sym> <def>last</def> <sym>=</sym> <def>b</def><br />
      <sym>}</sym> <def></def><kwa>else</kwa> <def></def><sym>{</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>b</def> <sym>&lt;</sym> <def>first</def><sym>){</sym> <def>first</def> <sym>=</sym> <def>b</def> <sym>}</sym> <def></def><kwa>else</kwa> <def></def><sym>{</sym> <def></def><kwa>if</kwa> <def></def><sym>(</sym><def>b</def> <sym>&gt;</sym> <def>last</def><sym>){</sym> <def>last</def> <sym>=</sym> <def>b</def> <sym>} }</sym><br />
<def></def>      <sym>}</sym><br />
<def>      countdown</def> <sym>=</sym> <def>countdown</def> <sym>-</sym> <def></def><num>1</num><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>private def</kwa> <def>shouldPrune</def><sym>() = {</sym><br />
<def>      board</def><sym>.</sym><def>unmark</def><br />
      <sym>!</sym><def>board</def><sym>.</sym><def>cells</def><sym>.</sym><def>forall</def><sym>(</sym><def>c</def> <sym>=&gt;</sym> <def>c</def><sym>.</sym><def>contiguousEmptyCells</def> <sym>%</sym> <def>Piece</def><sym>.</sym><def>size</def> <sym>==</sym> <def></def><num>0</num><def></def><sym>)</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
<br />
   <kwa>def</kwa> <def>printSolutions</def><sym>() = {</sym><br />
<def></def><br />
      <kwa>def</kwa> <def>printBoard</def><sym>(</sym><def>s</def><sym>:</sym> <def></def><kwc>String</kwc><def></def><sym>) = {</sym><br />
<def></def>         <kwa>var</kwa> <def>indent</def> <sym>=</sym> <def>false</def><br />
         <kwa>var</kwa> <def>i</def> <sym>=</sym> <def></def><num>0</num><br />
<def></def>         <kwa>while</kwa> <def></def><sym>(</sym><def>i</def> <sym>&lt;</sym> <def>s</def><sym>.</sym><def>length</def><sym>){</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>indent</def><sym>)</sym> <def>Console</def><sym>.</sym><def>print</def><sym>(</sym><def></def><str>' '</str><def></def><sym>)</sym><br />
<def></def>            <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwa>val</kwa> <def>j</def> <sym>&lt;-</sym> <def></def><kwc>Iterator</kwc><def></def><sym>.</sym><def>range</def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym><def>Board</def><sym>.</sym><def>cols</def><sym>)){</sym><br />
<def>               Console</def><sym>.</sym><def>print</def><sym>(</sym><def>s</def><sym>.</sym><def>charAt</def><sym>(</sym><def>i</def><sym>));</sym> <def>Console</def><sym>.</sym><def>print</def><sym>(</sym><def></def><str>' '</str><def></def><sym>)</sym><br />
<def>               i</def> <sym>=</sym> <def>i</def> <sym>+</sym> <def></def><num>1</num><br />
<def></def>            <sym>}</sym><br />
<def>            Console</def><sym>.</sym><def>print</def><sym>(</sym><def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>)</sym><br />
<def>            indent</def> <sym>= !</sym><def>indent</def><br />
         <sym>}</sym><br />
<def>         Console</def><sym>.</sym><def>print</def><sym>(</sym><def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>)</sym><br />
<def></def>      <sym>}</sym><br />
<def><br />
      Console</def><sym>.</sym><def>print</def><sym>(</sym><def>n</def> <sym>+</sym> <def></def><str>&quot; solutions found</str><esc>\n\n</esc><str>&quot;</str><def></def><sym>)</sym><br />
<def>      printBoard</def><sym>(</sym><def>first</def><sym>)</sym><br />
<def>      printBoard</def><sym>(</sym><def>last</def><sym>)</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
<com>/*</com><br />
<com>   def printPieces() =</com><br />
<com>      for (val i &lt;- Iterator.range(0,Board.pieces)) pieces(i).print</com><br />
<com>*/</com><def></def><br />
<br />
<sym>}</sym><br />
<def></def><br />
<br />
<br />
<br />
<slc>// Board.scala</slc><br />
<def></def><slc>// import scala.collection.mutable._</slc><br />
<def></def><br />
<kwa>object</kwa> <def>Board</def> <sym>{</sym><br />
<def></def>   <kwa>val</kwa> <def>cols</def> <sym>=</sym> <def></def><num>5</num><br />
<def></def>   <kwa>val</kwa> <def>rows</def> <sym>=</sym> <def></def><num>10</num><br />
<def></def>   <kwa>val</kwa> <def>size</def> <sym>=</sym> <def>rows</def> <sym>*</sym> <def>cols</def><br />
<sym>}</sym><br />
<def></def><br />
<kwa>final class</kwa> <def>Board</def> <sym>{</sym><br />
<def></def>   <kwa>val</kwa> <def>cells</def> <sym>=</sym> <def>boardCells</def><sym>()</sym><br />
<def></def><br />
   <kwa>val</kwa> <def>cellsPieceWillFill</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwc>Array</kwc><def></def><sym>[</sym><def>BoardCell</def><sym>](</sym><def>Piece</def><sym>.</sym><def>size</def><sym>)</sym><br />
<def></def>   <kwa>var</kwa> <def>cellCount</def> <sym>=</sym> <def></def><num>0</num><br />
<def></def><br />
   <kwa>def</kwa> <def>unmark</def><sym>() =</sym> <def></def><kwa>for</kwa> <def></def><sym>(</sym><def></def><kwa>val</kwa> <def>c</def> <sym>&lt;-</sym> <def>cells</def><sym>)</sym> <def>c</def><sym>.</sym><def>unmark</def><br />
<br />
   <kwa>def</kwa> <def>asString</def><sym>() =</sym><br />
<def></def>      <kwa>new</kwa> <def></def><kwc>String</kwc><def></def><sym>(</sym> <def>cells map</def><sym>(</sym><br />
<def>         c</def> <sym>=&gt;</sym> <def></def><kwa>if</kwa> <def></def><sym>(</sym><def>c</def><sym>.</sym><def>piece</def> <sym>==</sym> <def>null</def><sym>)</sym> <def></def><str>'-'</str><def></def><sym>.</sym><def>toByte</def><br />
              <kwa>else</kwa> <def></def><sym>(</sym><def>c</def><sym>.</sym><def>piece</def><sym>.</sym><def>number</def> <sym>+</sym> <def></def><num>48</num><def></def><sym>).</sym><def>toByte</def> <sym>))</sym><br />
<def></def><br />
   <kwa>def</kwa> <def>firstEmptyCellIndex</def><sym>() =</sym> <def>cells</def><sym>.</sym><def>findIndexOf</def><sym>(</sym><def>c</def> <sym>=&gt;</sym> <def>c</def><sym>.</sym><def>isEmpty</def><sym>)</sym><br />
<def></def><br />
   <kwa>def</kwa> <def>add</def><sym>(</sym><def>pieceIndex</def><sym>:</sym> <def>Int</def><sym>,</sym> <def>boardIndex</def><sym>:</sym> <def>Int</def><sym>,</sym> <def>p</def><sym>:</sym> <def>Piece</def><sym>) = {</sym><br />
<def>      cellCount</def> <sym>=</sym> <def></def><num>0</num><br />
<def>      p</def><sym>.</sym><def>unmark<br />
<br />
      find</def><sym>(</sym> <def>p</def><sym>.</sym><def>cells</def><sym>(</sym><def>pieceIndex</def><sym>),</sym> <def>cells</def><sym>(</sym><def>boardIndex</def><sym>))</sym><br />
<def></def><br />
      <kwa>val</kwa> <def>boardHasSpace</def> <sym>=</sym> <def>cellCount</def> <sym>==</sym> <def>Piece</def><sym>.</sym><def>size</def> <sym>&amp;&amp;</sym><br />
<def>         cellsPieceWillFill</def><sym>.</sym><def>forall</def><sym>(</sym><def>c</def> <sym>=&gt;</sym> <def>c</def><sym>.</sym><def>isEmpty</def><sym>)</sym><br />
<def></def><br />
      <kwa>if</kwa> <def></def><sym>(</sym><def>boardHasSpace</def><sym>)</sym> <def>cellsPieceWillFill</def><sym>.</sym><def>foreach</def><sym>(</sym><def>c</def> <sym>=&gt;</sym> <def>c</def><sym>.</sym><def>piece</def> <sym>=</sym> <def>p</def><sym>)</sym><br />
<def><br />
      boardHasSpace</def><br />
   <sym>}</sym><br />
<def></def><br />
   <kwa>def</kwa> <def>remove</def><sym>(</sym><def>piece</def><sym>:</sym> <def>Piece</def><sym>) =</sym> <def></def><kwa>for</kwa> <def></def><sym>(</sym><def></def><kwa>val</kwa> <def>c</def> <sym>&lt;-</sym> <def>cells</def><sym>;</sym> <def>c</def><sym>.</sym><def>piece</def> <sym>==</sym> <def>piece</def><sym>)</sym> <def>c</def><sym>.</sym><def>empty</def><br />
<br />
<br />
   <kwa>private def</kwa> <def>find</def><sym>(</sym><def>p</def><sym>:</sym> <def>PieceCell</def><sym>,</sym> <def>b</def><sym>:</sym> <def>BoardCell</def><sym>):</sym> <def>Unit</def> <sym>= {</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>p</def> <sym>!=</sym> <def>null</def> <sym>&amp;&amp; !</sym><def>p</def><sym>.</sym><def>marked</def> <sym>&amp;&amp;</sym> <def>b</def> <sym>!=</sym> <def>null</def><sym>){</sym><br />
<def>         cellsPieceWillFill</def><sym>(</sym><def>cellCount</def><sym>) =</sym> <def>b<br />
         cellCount</def> <sym>=</sym> <def>cellCount</def> <sym>+</sym> <def></def><num>1</num><br />
<def>         p</def><sym>.</sym><def>mark</def><br />
         <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwa>val</kwa> <def>i</def> <sym>&lt;-</sym> <def></def><kwc>Iterator</kwc><def></def><sym>.</sym><def>range</def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym><def>Cell</def><sym>.</sym><def>sides</def><sym>))</sym> <def>find</def><sym>(</sym><def>p</def><sym>.</sym><def>next</def><sym>(</sym><def>i</def><sym>),</sym> <def>b</def><sym>.</sym><def>next</def><sym>(</sym><def>i</def><sym>))</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
<br />
   <kwa>private def</kwa> <def>boardCells</def><sym>() = {</sym><br />
<def></def>      <kwa>val</kwa> <def>a</def> <sym>=</sym> <def></def><kwa>for</kwa> <def></def><sym>(</sym><def></def><kwa>val</kwa> <def>i</def> <sym>&lt;-</sym> <def></def><kwc>Array</kwc><def></def><sym>.</sym><def>range</def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym><def>Board</def><sym>.</sym><def>size</def><sym>))</sym> <def></def><kwa>yield new</kwa> <def>BoardCell</def><sym>(</sym><def>i</def><sym>)</sym><br />
<def></def>      <kwa>val</kwa> <def>m</def> <sym>= (</sym><def>Board</def><sym>.</sym><def>size</def> <sym>/</sym> <def>Board</def><sym>.</sym><def>cols</def><sym>) -</sym> <def></def><num>1</num><br />
<def></def><br />
      <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwa>val</kwa> <def>i</def> <sym>&lt;-</sym> <def></def><kwc>Iterator</kwc><def></def><sym>.</sym><def>range</def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym><def>a</def><sym>.</sym><def>length</def><sym>)){</sym><br />
<def></def>         <kwa>val</kwa> <def>row</def> <sym>=</sym> <def>i</def> <sym>/</sym> <def>Board</def><sym>.</sym><def>cols</def><br />
         <kwa>val</kwa> <def>isFirst</def> <sym>=</sym> <def>i</def> <sym>%</sym> <def>Board</def><sym>.</sym><def>cols</def> <sym>==</sym> <def></def><num>0</num><br />
<def></def>         <kwa>val</kwa> <def>isLast</def> <sym>= (</sym><def>i</def><sym>+</sym><def></def><num>1</num><def></def><sym>) %</sym> <def>Board</def><sym>.</sym><def>cols</def> <sym>==</sym> <def></def><num>0</num><br />
<def></def>         <kwa>val</kwa> <def>c</def> <sym>=</sym> <def>a</def><sym>(</sym><def>i</def><sym>)</sym><br />
<def></def><br />
         <kwa>if</kwa> <def></def><sym>(</sym><def>row</def> <sym>%</sym> <def></def><num>2</num> <def></def><sym>==</sym> <def></def><num>1</num><def></def><sym>) {</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(!</sym><def>isLast</def><sym>)</sym> <def>c</def><sym>.</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NE</def><sym>) =</sym> <def>a</def><sym>(</sym><def>i</def><sym>-(</sym><def>Board</def><sym>.</sym><def>cols</def><sym>-</sym><def></def><num>1</num><def></def><sym>))</sym><br />
<def>            c</def><sym>.</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NW</def><sym>) =</sym> <def>a</def><sym>(</sym><def>i</def><sym>-</sym><def>Board</def><sym>.</sym><def>cols</def><sym>)</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>row</def> <sym>!=</sym> <def>m</def><sym>) {</sym><br />
<def></def>               <kwa>if</kwa> <def></def><sym>(!</sym><def>isLast</def><sym>)</sym> <def>c</def><sym>.</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SE</def><sym>) =</sym> <def>a</def><sym>(</sym><def>i</def><sym>+(</sym><def>Board</def><sym>.</sym><def>cols</def><sym>+</sym><def></def><num>1</num><def></def><sym>))</sym><br />
<def>               c</def><sym>.</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SW</def><sym>) =</sym> <def>a</def><sym>(</sym><def>i</def><sym>+</sym><def>Board</def><sym>.</sym><def>cols</def><sym>)</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>         <sym>}</sym> <def></def><kwa>else</kwa> <def></def><sym>{</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>row</def> <sym>!=</sym> <def></def><num>0</num><def></def><sym>) {</sym><br />
<def></def>               <kwa>if</kwa> <def></def><sym>(!</sym><def>isFirst</def><sym>)</sym> <def>c</def><sym>.</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NW</def><sym>) =</sym> <def>a</def><sym>(</sym><def>i</def><sym>-(</sym><def>Board</def><sym>.</sym><def>cols</def><sym>+</sym><def></def><num>1</num><def></def><sym>))</sym><br />
<def>               c</def><sym>.</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NE</def><sym>) =</sym> <def>a</def><sym>(</sym><def>i</def><sym>-</sym><def>Board</def><sym>.</sym><def>cols</def><sym>)</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>row</def> <sym>!=</sym> <def>m</def><sym>) {</sym><br />
<def></def>               <kwa>if</kwa> <def></def><sym>(!</sym><def>isFirst</def><sym>)</sym> <def>c</def><sym>.</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SW</def><sym>) =</sym> <def>a</def><sym>(</sym><def>i</def><sym>+(</sym><def>Board</def><sym>.</sym><def>cols</def><sym>-</sym><def></def><num>1</num><def></def><sym>))</sym><br />
<def>               c</def><sym>.</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SE</def><sym>) =</sym> <def>a</def><sym>(</sym><def>i</def><sym>+</sym><def>Board</def><sym>.</sym><def>cols</def><sym>)</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(!</sym><def>isFirst</def><sym>)</sym> <def>c</def><sym>.</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>W</def><sym>) =</sym> <def>a</def><sym>(</sym><def>i</def><sym>-</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(!</sym><def>isLast</def><sym>)</sym> <def>c</def><sym>.</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>E</def><sym>) =</sym> <def>a</def><sym>(</sym><def>i</def><sym>+</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>      <sym>}</sym><br />
<def>      a</def><br />
   <sym>}</sym><br />
<def></def><br />
<br />
<com>/*</com><br />
<com>// Printing all the board cells and their neighbours</com><br />
<com>// helps check that they are connected properly</com><br />
<com></com><br />
<com>   def printBoardCellsAndNeighbours() = {</com><br />
<com>      Console.println(&quot;cell\tNW NE W  E  SW SE&quot;)</com><br />
<com>      for (val i &lt;- Iterator.range(0,Board.size)){</com><br />
<com>         Console.print(i + &quot;\t&quot;)</com><br />
<com>         for (val j &lt;- Iterator.range(0,Cell.sides)){</com><br />
<com>            val c = cells(i).next(j)</com><br />
<com>            if (c == null)</com><br />
<com>               Console.print(&quot;-- &quot;)</com><br />
<com>            else</com><br />
<com>               Console.printf(&quot;{0,number,00} &quot;)(c.number)</com><br />
<com>         }</com><br />
<com>         Console.println(&quot;&quot;)</com><br />
<com>      }</com><br />
<com>      Console.println(&quot;&quot;)</com><br />
<com>   }</com><br />
<com>*/</com><def></def><br />
<br />
<sym>}</sym><br />
<def></def><br />
<br />
<br />
<br />
<slc>// Piece.scala</slc><br />
<def></def><br />
<kwa>object</kwa> <def>Piece</def> <sym>{</sym><br />
<def></def>   <kwa>val</kwa> <def>size</def> <sym>=</sym> <def></def><num>5</num><br />
<def></def>   <kwa>val</kwa> <def>rotations</def> <sym>=</sym> <def>Cell</def><sym>.</sym><def>sides</def><br />
   <kwa>val</kwa> <def>flips</def> <sym>=</sym> <def></def><num>2</num><br />
<def></def>   <kwa>val</kwa> <def>orientations</def> <sym>=</sym> <def>rotations</def> <sym>*</sym> <def>flips</def><br />
<sym>}</sym><br />
<def></def><br />
<kwa>final class</kwa> <def>Piece</def><sym>(</sym><def>_number</def><sym>:</sym> <def>Int</def><sym>) {</sym><br />
<def></def>   <kwa>val</kwa> <def>number</def> <sym>=</sym> <def>_number</def><br />
   <kwa>val</kwa> <def>cells</def> <sym>=</sym> <def></def><kwa>for</kwa> <def></def><sym>(</sym><def></def><kwa>val</kwa> <def>i</def> <sym>&lt;-</sym> <def></def><kwc>Array</kwc><def></def><sym>.</sym><def>range</def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym><def>Piece</def><sym>.</sym><def>size</def><sym>))</sym> <def></def><kwa>yield new</kwa> <def>PieceCell</def><sym>()</sym><br />
<def></def><br />
   <sym>{</sym><br />
<def>      number match</def> <sym>{</sym><br />
<def></def>         <kwa>case</kwa> <def></def><num>0</num> <def></def><sym>=&gt;</sym> <def>make0</def><br />
         <kwa>case</kwa> <def></def><num>1</num> <def></def><sym>=&gt;</sym> <def>make1</def><br />
         <kwa>case</kwa> <def></def><num>2</num> <def></def><sym>=&gt;</sym> <def>make2</def><br />
         <kwa>case</kwa> <def></def><num>3</num> <def></def><sym>=&gt;</sym> <def>make3</def><br />
         <kwa>case</kwa> <def></def><num>4</num> <def></def><sym>=&gt;</sym> <def>make4</def><br />
         <kwa>case</kwa> <def></def><num>5</num> <def></def><sym>=&gt;</sym> <def>make5</def><br />
         <kwa>case</kwa> <def></def><num>6</num> <def></def><sym>=&gt;</sym> <def>make6</def><br />
         <kwa>case</kwa> <def></def><num>7</num> <def></def><sym>=&gt;</sym> <def>make7</def><br />
         <kwa>case</kwa> <def></def><num>8</num> <def></def><sym>=&gt;</sym> <def>make8</def><br />
         <kwa>case</kwa> <def></def><num>9</num> <def></def><sym>=&gt;</sym> <def>make9</def><br />
      <sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>def</kwa> <def>flip</def><sym>() =</sym> <def></def><kwa>for</kwa> <def></def><sym>(</sym><def></def><kwa>val</kwa> <def>c</def> <sym>&lt;-</sym> <def>cells</def><sym>)</sym> <def>c</def><sym>.</sym><def>flip</def><br />
   <kwa>def</kwa> <def>rotate</def><sym>() =</sym> <def></def><kwa>for</kwa> <def></def><sym>(</sym><def></def><kwa>val</kwa> <def>c</def> <sym>&lt;-</sym> <def>cells</def><sym>)</sym> <def>c</def><sym>.</sym><def>rotate</def><br />
   <kwa>def</kwa> <def>unmark</def><sym>() =</sym> <def></def><kwa>for</kwa> <def></def><sym>(</sym><def></def><kwa>val</kwa> <def>c</def> <sym>&lt;-</sym> <def>cells</def><sym>)</sym> <def>c</def><sym>.</sym><def>unmark</def><br />
<br />
<br />
   <kwa>private var</kwa> <def>orientation</def> <sym>=</sym> <def></def><num>0</num><br />
<def></def><br />
   <kwa>def</kwa> <def>nextOrientation</def><sym>() = {</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>orientation</def> <sym>==</sym> <def>Piece</def><sym>.</sym><def>orientations</def><sym>)</sym> <def>orientation</def> <sym>=</sym> <def></def><num>0</num><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>orientation</def> <sym>%</sym> <def>Piece</def><sym>.</sym><def>rotations</def> <sym>==</sym> <def></def><num>0</num><def></def><sym>)</sym> <def>flip</def> <kwa>else</kwa> <def>rotate<br />
      orientation</def> <sym>=</sym> <def>orientation</def> <sym>+</sym> <def></def><num>1</num><br />
<def></def>      <kwa>this</kwa><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
<br />
   <kwa>private def</kwa> <def>make0</def><sym>() = {</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>0</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>E</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>W</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>0</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>E</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>W</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>E</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>W</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SE</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>4</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>4</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NW</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>)</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>private def</kwa> <def>make1</def><sym>() = {</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>0</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SE</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NW</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>0</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SW</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NE</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>W</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>E</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SW</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>4</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>4</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NE</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>)</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>private def</kwa> <def>make2</def><sym>() = {</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>0</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>W</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>E</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>0</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SW</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NE</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SE</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NW</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SE</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>4</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>4</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NW</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>)</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>private def</kwa> <def>make3</def><sym>() = {</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>0</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SW</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NE</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>0</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>W</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>E</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SW</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NE</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SE</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NW</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SE</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>4</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>4</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NW</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>)</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>private def</kwa> <def>make4</def><sym>() = {</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>0</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SE</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NW</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>0</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SW</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NE</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>E</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>W</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SE</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>4</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>4</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NW</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>)</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>private def</kwa> <def>make5</def><sym>() = {</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>0</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SW</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NE</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>0</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>0</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SE</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NW</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>0</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SE</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NW</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SW</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NE</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SW</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>4</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>4</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NE</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>)</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>private def</kwa> <def>make6</def><sym>() = {</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>0</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SW</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NE</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>0</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SE</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NW</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SE</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NW</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SW</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>4</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>4</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NE</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>)</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>private def</kwa> <def>make7</def><sym>() = {</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>0</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SE</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NW</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>0</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>0</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SW</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NE</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>0</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SW</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NE</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SE</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>4</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>4</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NW</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>)</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>private def</kwa> <def>make8</def><sym>() = {</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>0</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>E</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>W</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>0</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>E</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>W</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NE</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SW</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>E</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>4</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>4</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>W</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>)</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>private def</kwa> <def>make9</def><sym>() = {</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>0</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>E</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>W</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>0</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>E</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>W</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NE</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SW</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>E</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>4</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>4</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>W</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>2</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>4</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NW</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>)</sym><br />
<def>      cells</def><sym>(</sym><def></def><num>3</num><def></def><sym>).</sym><def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SE</def><sym>) =</sym> <def>cells</def><sym>(</sym><def></def><num>4</num><def></def><sym>)</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
<com>/*</com><br />
<com>   def print() = {</com><br />
<com>      Console.println(&quot;Piece # &quot; + number)</com><br />
<com>      Console.println(&quot;cell\tNW NE W  E  SW SE&quot;)</com><br />
<com>      for (val i &lt;- Iterator.range(0,Piece.size)){</com><br />
<com>         Console.print(i + &quot;\t&quot;)</com><br />
<com>         for (val j &lt;- Iterator.range(0,Cell.sides)){</com><br />
<com>            val c = cells(i).next(j)</com><br />
<com>            if (c == null)</com><br />
<com>               Console.print(&quot;-- &quot;)</com><br />
<com>            else</com><br />
<com>               for (val k &lt;- Iterator.range(0,Piece.size)){</com><br />
<com>                  if (cells(k) == c) Console.printf(&quot; {0,number,0} &quot;)(k)</com><br />
<com>               }</com><br />
<com>         }</com><br />
<com>         Console.println(&quot;&quot;)</com><br />
<com>      }</com><br />
<com>      Console.println(&quot;&quot;)</com><br />
<com>   }</com><br />
<com>*/</com><def></def><br />
<br />
<sym>}</sym><br />
<def></def><br />
<br />
<br />
<br />
<slc>// Cell.scala</slc><br />
<def></def><br />
<kwa>object</kwa> <def>Cell</def> <sym>{</sym><br />
<def></def>   <kwa>val</kwa> <def>NW</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def></def><kwa>val</kwa> <def>NE</def> <sym>=</sym> <def></def><num>1</num><br />
<def></def>   <kwa>val</kwa> <def>W</def>  <sym>=</sym> <def></def><num>2</num><def></def><sym>;</sym> <def></def><kwa>val</kwa> <def>E</def>  <sym>=</sym> <def></def><num>3</num><br />
<def></def>   <kwa>val</kwa> <def>SW</def> <sym>=</sym> <def></def><num>4</num><def></def><sym>;</sym> <def></def><kwa>val</kwa> <def>SE</def> <sym>=</sym> <def></def><num>5</num><br />
<def></def><br />
   <kwa>val</kwa> <def>sides</def> <sym>=</sym> <def></def><num>6</num><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwa>abstract class</kwa> <def>Cell</def> <sym>{</sym><br />
<def></def>   <kwa>type</kwa> <def>T</def><br />
   <kwa>val</kwa> <def>next</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwc>Array</kwc><def></def><sym>[</sym><def>T</def><sym>](</sym><def>Cell</def><sym>.</sym><def>sides</def><sym>)</sym><br />
<def></def>   <kwa>var</kwa> <def>marked</def> <sym>=</sym> <def>false</def><br />
<br />
   <kwa>def</kwa> <def>mark</def><sym>() =</sym> <def>marked</def> <sym>=</sym> <def>true</def><br />
   <kwa>def</kwa> <def>unmark</def><sym>() =</sym> <def>marked</def> <sym>=</sym> <def>false</def><br />
<sym>}</sym><br />
<def></def><br />
<br />
<br />
<br />
<slc>// BoardCell.scala</slc><br />
<def></def><br />
<kwa>final class</kwa> <def>BoardCell</def><sym>(</sym><def>_number</def><sym>:</sym> <def>Int</def><sym>)</sym> <def></def><kwa>extends</kwa> <def>Cell</def> <sym>{</sym><br />
<def></def>   <kwa>type</kwa> <def>T</def> <sym>=</sym> <def>BoardCell</def><br />
   <kwa>val</kwa> <def>number</def> <sym>=</sym> <def>_number</def><br />
   <kwa>var</kwa> <def>piece</def><sym>:</sym> <def>Piece</def> <sym>=</sym> <def>_</def><br />
<br />
   <kwa>def</kwa> <def>isEmpty</def><sym>() =</sym> <def>piece</def> <sym>==</sym> <def>null</def><br />
   <kwa>def</kwa> <def>empty</def><sym>() =</sym> <def>piece</def> <sym>=</sym> <def>null</def><br />
<br />
   <kwa>def</kwa> <def>contiguousEmptyCells</def><sym>():</sym> <def>Int</def> <sym>= {</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(!</sym><def>marked</def> <sym>&amp;&amp;</sym> <def>isEmpty</def><sym>){</sym><br />
<def>         mark</def><br />
         <kwa>var</kwa> <def>count</def> <sym>=</sym> <def></def><num>1</num><br />
<def></def><br />
         <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwa>val</kwa> <def>neighbour</def> <sym>&lt;-</sym> <def>next</def><sym>)</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>neighbour</def> <sym>!=</sym> <def>null</def> <sym>&amp;&amp;</sym> <def>neighbour</def><sym>.</sym><def>isEmpty</def><sym>)</sym><br />
<def>               count</def> <sym>=</sym> <def>count</def> <sym>+</sym> <def>neighbour</def><sym>.</sym><def>contiguousEmptyCells<br />
<br />
         count</def> <sym>}</sym> <def></def><kwa>else</kwa> <def></def><sym>{</sym> <def></def><num>0</num> <def></def><sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<br />
<br />
<br />
<slc>// PieceCell.scala</slc><br />
<def></def><br />
<kwa>final class</kwa> <def>PieceCell</def> <kwa>extends</kwa> <def>Cell</def> <sym>{</sym><br />
<def></def>   <kwa>type</kwa> <def>T</def> <sym>=</sym> <def>PieceCell</def><br />
<br />
   <kwa>def</kwa> <def>flip</def> <sym>= {</sym><br />
<def></def>      <kwa>var</kwa> <def>swap</def> <sym>=</sym> <def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NE</def><sym>)</sym><br />
<def>      next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NE</def><sym>) =</sym> <def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NW</def><sym>)</sym><br />
<def>      next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NW</def><sym>) =</sym> <def>swap<br />
<br />
      swap</def> <sym>=</sym> <def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>E</def><sym>)</sym><br />
<def>      next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>E</def><sym>) =</sym> <def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>W</def><sym>)</sym><br />
<def>      next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>W</def><sym>) =</sym> <def>swap<br />
<br />
      swap</def> <sym>=</sym> <def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SE</def><sym>)</sym><br />
<def>      next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SE</def><sym>) =</sym> <def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SW</def><sym>)</sym><br />
<def>      next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SW</def><sym>) =</sym> <def>swap</def><br />
   <sym>}</sym><br />
<def></def><br />
   <kwa>def</kwa> <def>rotate</def> <sym>= {</sym><br />
<def></def>      <kwa>var</kwa> <def>swap</def> <sym>=</sym> <def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>E</def><sym>)</sym><br />
<def>      next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>E</def><sym>) =</sym> <def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NE</def><sym>)</sym><br />
<def>      next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NE</def><sym>) =</sym> <def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NW</def><sym>)</sym><br />
<def>      next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>NW</def><sym>) =</sym> <def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>W</def><sym>)</sym><br />
<def>      next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>W</def><sym>) =</sym> <def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SW</def><sym>)</sym><br />
<def>      next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SW</def><sym>) =</sym> <def>next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SE</def><sym>)</sym><br />
<def>      next</def><sym>(</sym><def>Cell</def><sym>.</sym><def>SE</def><sym>) =</sym> <def>swap</def><br />
   <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<br />
<br />
<br />
</source>
