<source>
<def></def><com>{- The Computer Language Benchmarks Game</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com>   Written by Tom Pledger, 13 Nov 2006. modified by Don Stewart</com><br />
<com>   Updated for chameneos-redux by Spencer Janssen, 27 Nov 2007 -}</com><def></def><br />
<br />
<kwa>import</kwa> <def>Control.Concurrent</def><br />
<kwa>import</kwa> <def>Control.Monad</def><br />
<kwa>import</kwa> <def>Data.</def><kwb>Char</kwb><br />
<def></def><kwa>import</kwa> <def>System.Environment</def><br />
<kwa>import</kwa> <def>System.IO</def><br />
<br />
<kwa>default</kwa><def></def><sym>(</sym><def></def><kwb>Int</kwb><def></def><sym>)</sym><br />
<def></def><br />
<kwa>data</kwa> <def>Colour</def> <sym>=</sym> <def>Blue</def> <sym>|</sym> <def>Red</def> <sym>|</sym> <def>Yellow</def> <kwa>deriving</kwa> <def></def><sym>(</sym><def>Show</def><sym>,</sym> <def>Eq</def><sym>,</sym> <def>Enum</def><sym>)</sym><br />
<def><br />
complement a b</def> <sym>|</sym> <def>a</def> <sym>==</sym> <def>b</def> <sym>=</sym> <def>a<br />
complement a b</def> <sym>=</sym> <def></def><kwa>case</kwa> <def>a</def> <kwa>of</kwa><br />
<def>    Blue</def>   <sym>-&gt;</sym> <def></def><kwa>case</kwa> <def>b</def> <kwa>of</kwa> <def>Red</def>  <sym>-&gt;</sym> <def>Yellow</def><sym>;</sym> <def>_</def> <sym>-&gt;</sym> <def>Red<br />
    Red</def>    <sym>-&gt;</sym> <def></def><kwa>case</kwa> <def>b</def> <kwa>of</kwa> <def>Blue</def> <sym>-&gt;</sym> <def>Yellow</def><sym>;</sym> <def>_</def> <sym>-&gt;</sym> <def>Blue<br />
    Yellow</def> <sym>-&gt;</sym> <def></def><kwa>case</kwa> <def>b</def> <kwa>of</kwa> <def>Blue</def> <sym>-&gt;</sym> <def>Red</def><sym>;</sym>    <def>_</def> <sym>-&gt;</sym> <def>Blue</def><br />
<br />
<kwa>data</kwa> <def>MP</def> <sym>=</sym> <def>MP</def> <sym>!</sym><def></def><kwb>Int</kwb> <def></def><sym>!(</sym><def>Maybe</def> <sym>(</sym><def>Colour</def><sym>,</sym> <def>ThreadId</def><sym>,</sym> <def>MVar</def> <sym>(</sym><def>Colour</def><sym>,</sym> <def>ThreadId</def><sym>)))</sym><br />
<def><br />
arrive mpv finish c0</def> <sym>=</sym> <def></def><kwa>do</kwa><br />
<def>    tid</def> <sym>&lt;-</sym> <def>myThreadId</def><br />
    <kwa>let</kwa> <def>inc x</def> <sym>= (</sym><def>fromEnum</def> <sym>(</sym><def>tid</def> <sym>==</sym> <def>x</def><sym>) +)</sym><br />
<def>        go</def> <sym>!</sym><def>c</def> <sym>!</sym><def>t</def> <sym>!</sym><def>b</def> <sym>=</sym> <def></def><kwa>do</kwa><br />
<def>            MP q w</def> <sym>&lt;-</sym> <def>takeMVar mpv</def><br />
            <kwa>case</kwa> <def>w</def> <kwa>of</kwa><br />
<def>                _</def> <sym>|</sym> <def>q</def> <sym>==</sym> <def></def><num>0</num> <def></def><sym>-&gt;</sym> <def></def><kwa>do</kwa><br />
<def>                    putMVar mpv $ MP</def> <num>0</num> <def>w<br />
                    putMVar finish</def> <sym>(</sym><def>t</def><sym>,</sym> <def>b</def><sym>)</sym><br />
<def><br />
                Nothing</def> <sym>-&gt;</sym> <def></def><kwa>do</kwa><br />
<def>                     waker</def> <sym>&lt;-</sym> <def>newEmptyMVar<br />
                     putMVar mpv $ MP q</def> <sym>(</sym><def>Just</def> <sym>(</sym><def>c</def><sym>,</sym> <def>tid</def><sym>,</sym> <def>waker</def><sym>))</sym><br />
<def></def>                     <sym>(</sym><def>c'</def><sym>,</sym> <def>tid'</def><sym>) &lt;-</sym> <def>takeMVar waker<br />
                     go c'</def> <sym>(</sym><def>t</def><sym>+</sym><def></def><num>1</num><def></def><sym>)</sym> <def>$ inc tid' b<br />
<br />
                Just</def> <sym>(</sym><def>k</def><sym>,</sym> <def>tid'</def><sym>,</sym> <def>waker</def><sym>) -&gt;</sym> <def></def><kwa>do</kwa><br />
<def></def>                    <kwa>let</kwa> <def></def><sym>!</sym><def>c'</def> <sym>=</sym> <def>complement k c<br />
                    putMVar waker</def> <sym>(</sym><def>c'</def><sym>,</sym> <def>tid</def><sym>)</sym><br />
<def>                    putMVar mpv $ MP</def> <sym>(</sym><def>q</def><sym>-</sym><def></def><num>1</num><def></def><sym>)</sym> <def>Nothing<br />
                    go c'</def> <sym>(</sym><def>t</def><sym>+</sym><def></def><num>1</num><def></def><sym>)</sym> <def>$ inc tid' b<br />
    go c0</def> <num>0 0</num><br />
<def><br />
showN</def> <sym>=</sym> <def>unwords . map</def> <sym>((</sym><def>digits</def> <sym>!!)</sym> <def>. digitToInt</def><sym>)</sym> <def>. show<br />
<br />
digits</def> <sym>=</sym> <def>words</def> <str>&quot;zero one two three four five six seven eight nine&quot;</str><def><br />
<br />
run n cs</def> <sym>=</sym> <def></def><kwa>do</kwa><br />
<def>    fs</def>    <sym>&lt;-</sym> <def>replicateM</def> <sym>(</sym><def>length cs</def><sym>)</sym> <def>newEmptyMVar<br />
    mpv</def>   <sym>&lt;-</sym> <def>newMVar $ MP n Nothing<br />
    zipWithM</def> <sym>((</sym><def>forkIO .</def><sym>)</sym> <def>. arrive mpv</def><sym>)</sym> <def>fs cs<br />
    ns</def>    <sym>&lt;-</sym> <def>mapM takeMVar fs<br />
<br />
    putStrLn . map toLower . unwords .</def> <sym>([]:)</sym> <def>. map show $ cs<br />
    putStr . map toLower . unlines $</def> <sym>[</sym><def>unwords</def> <sym>[</sym><def>show n</def><sym>,</sym> <def>showN b</def><sym>] | (</sym><def>n</def><sym>,</sym> <def>b</def><sym>) &lt;-</sym> <def>ns</def><sym>]</sym><br />
<def>    putStrLn .</def> <sym>(</sym><def></def><str>&quot; &quot;</str><def></def><sym>++)</sym> <def>. showN . sum . map fst $ ns<br />
    putStrLn</def> <str>&quot;&quot;</str><def><br />
<br />
main</def> <sym>=</sym> <def></def><kwa>do</kwa><br />
<def>    putStrLn . map toLower . unlines $</def><br />
        <sym>[</sym><def>unwords</def> <sym>[</sym><def>show a</def><sym>,</sym> <def></def><str>&quot;+&quot;</str><def></def><sym>,</sym> <def>show b</def><sym>,</sym> <def></def><str>&quot;-&gt;&quot;</str><def></def><sym>,</sym> <def>show $ complement a b</def><sym>]</sym><br />
<def></def>            <sym>|</sym> <def>a</def> <sym>&lt;- [</sym><def>Blue ..</def><sym>],</sym> <def>b</def> <sym>&lt;- [</sym><def>Blue ..</def><sym>]]</sym><br />
<def><br />
    n</def> <sym>&lt;-</sym> <def>readIO . head</def> <sym>=&lt;&lt;</sym> <def>getArgs<br />
    run n</def> <sym>[</sym><def>Blue ..</def><sym>]</sym><br />
<def>    run n</def> <sym>[</sym><def>Blue</def><sym>,</sym> <def>Red</def><sym>,</sym> <def>Yellow</def><sym>,</sym> <def>Red</def><sym>,</sym> <def>Yellow</def><sym>,</sym> <def>Blue</def><sym>,</sym> <def>Red</def><sym>,</sym> <def>Yellow</def><sym>,</sym> <def>Red</def><sym>,</sym> <def>Blue</def><sym>]</sym><def></def><br />
</source>
