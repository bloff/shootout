<source>
<def></def><com>/* The Computer Language Benchmarks Game</com><br />
<com> * http://shootout.alioth.debian.org/</com><br />
<com> * Contributed by Joern Inge Vestgaarden</com><br />
<com> * Modified by Jorge Peixoto de Morais Neto</com><br />
<com> * Modified by Ryan Flynn</com><br />
<com> */</com><def></def><br />
<br />
<dir>#include &lt;stdio.h&gt;</dir><br />
<def></def><dir>#include &lt;stdlib.h&gt;</dir><br />
<def></def><dir>#include &lt;string.h&gt;</dir><br />
<def></def><dir>#include &lt;err.h&gt;</dir><br />
<def></def><br />
<dir>#define WIDTH 60</dir><br />
<def></def><dir>#define MIN(a,b) ((a) &lt;= (b) ? (a) : (b))</dir><br />
<def></def><dir>#define NELEMENTS(x) (sizeof (x) / sizeof ((x)[0]))</dir><br />
<def></def><br />
<kwc>typedef</kwc> <def></def><kwb>struct</kwb> <def></def><sym>{</sym><br />
<def></def>    <kwb>float</kwb> <def>p</def><sym>;</sym><br />
<def></def>    <kwb>char</kwb> <def>c</def><sym>;</sym><br />
<def></def><sym>}</sym> <def>aminoacid_t</def><sym>;</sym><br />
<def></def><br />
<kwb>static</kwb> <def></def><kwc>inline</kwc> <def></def><kwb>float</kwb> <def></def><kwd>myrandom</kwd> <def></def><sym>(</sym><def></def><kwb>float</kwb> <def>max</def><sym>) {</sym><br />
<def></def>    <kwb>unsigned long const</kwb> <def>IM</def> <sym>=</sym> <def></def><num>139968</num><def></def><sym>;</sym><br />
<def></def>    <kwb>unsigned long const</kwb> <def>IA</def> <sym>=</sym> <def></def><num>3877</num><def></def><sym>;</sym><br />
<def></def>    <kwb>unsigned long const</kwb> <def>IC</def> <sym>=</sym> <def></def><num>29573</num><def></def><sym>;</sym><br />
<def></def>    <kwb>static unsigned long</kwb> <def>last</def> <sym>=</sym> <def></def><num>42</num><def></def><sym>;</sym><br />
<def>    last</def> <sym>= (</sym><def>last</def> <sym>*</sym> <def>IA</def> <sym>+</sym> <def>IC</def><sym>) %</sym> <def>IM</def><sym>;</sym><br />
<def></def>    <com>/*Integer to float conversions are faster if the integer is signed*/</com><def></def><br />
    <kwa>return</kwa> <def>max</def> <sym>* (</sym><def></def><kwb>long</kwb><def></def><sym>)</sym> <def>last</def> <sym>/</sym> <def>IM</def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>static</kwb> <def></def><kwc>inline</kwc> <def></def><kwb>void</kwb> <def></def><kwd>accumulate_probabilities</kwd> <def></def><sym>(</sym><def>aminoacid_t</def> <sym>*</sym><def>genelist</def><sym>,</sym> <def></def><kwb>size_t</kwb> <def>len</def><sym>) {</sym><br />
<def></def>    <kwb>float</kwb> <def>cp</def> <sym>=</sym> <def></def><num>0.0</num><def></def><sym>;</sym><br />
<def></def>    <kwb>size_t</kwb> <def>i</def><sym>;</sym><br />
<def></def>    <kwa>for</kwa> <def></def><sym>(</sym><def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>len</def><sym>;</sym> <def>i</def><sym>++) {</sym><br />
<def>        cp</def> <sym>+=</sym> <def>genelist</def><sym>[</sym><def>i</def><sym>].</sym><def>p</def><sym>;</sym><br />
<def>        genelist</def><sym>[</sym><def>i</def><sym>].</sym><def>p</def> <sym>=</sym> <def>cp</def><sym>;</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<com>/* This function prints the characters of the string s. When it */</com><def></def><br />
<com>/* reaches the end of the string, it goes back to the beginning */</com><def></def><br />
<com>/* It stops when the total number of characters printed is count. */</com><def></def><br />
<com>/* Between each WIDTH consecutive characters it prints a newline */</com><def></def><br />
<com>/* This function assumes that WIDTH &lt;= strlen (s) + 1 */</com><def></def><br />
<kwb>static void</kwb> <def></def><kwd>repeat_fasta</kwd> <def></def><sym>(</sym><def></def><kwb>char const</kwb> <def></def><sym>*</sym><def>s</def><sym>,</sym> <def></def><kwb>size_t</kwb> <def>count</def><sym>) {</sym><br />
<def></def>    <kwb>size_t</kwb> <def>pos</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>    <kwb>size_t</kwb> <def>len</def> <sym>=</sym> <def></def><kwd>strlen</kwd> <def></def><sym>(</sym><def>s</def><sym>);</sym><br />
<def></def>    <kwb>char</kwb> <def></def><sym>*</sym><def>s2</def> <sym>=</sym> <def></def><kwd>malloc</kwd> <def></def><sym>(</sym><def>len</def> <sym>+</sym> <def>WIDTH</def><sym>);</sym><br />
<def></def>    <kwd>memcpy</kwd> <def></def><sym>(</sym><def>s2</def><sym>,</sym> <def>s</def><sym>,</sym> <def>len</def><sym>);</sym><br />
<def></def>    <kwd>memcpy</kwd> <def></def><sym>(</sym><def>s2</def> <sym>+</sym> <def>len</def><sym>,</sym> <def>s</def><sym>,</sym> <def>WIDTH</def><sym>);</sym><br />
<def></def>    <kwa>do</kwa> <def></def><sym>{</sym><br />
<def></def>     	<kwb>size_t</kwb> <def>line</def> <sym>=</sym> <def></def><kwd>MIN</kwd><def></def><sym>(</sym><def>WIDTH</def><sym>,</sym> <def>count</def><sym>);</sym><br />
<def></def>     	<kwd>fwrite_unlocked</kwd> <def></def><sym>(</sym><def>s2</def> <sym>+</sym> <def>pos</def><sym>,</sym><def></def><num>1</num><def></def><sym>,</sym><def>line</def><sym>,</sym><def>stdout</def><sym>);</sym><br />
<def></def>     	<kwd>putchar_unlocked</kwd> <def></def><sym>(</sym><def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>);</sym><br />
<def>     	pos</def> <sym>+=</sym> <def>line</def><sym>;</sym><br />
<def></def>     	<kwa>if</kwa> <def></def><sym>(</sym><def>pos</def> <sym>&gt;=</sym> <def>len</def><sym>)</sym> <def>pos</def> <sym>-=</sym> <def>len</def><sym>;</sym><br />
<def>     	count</def> <sym>-=</sym> <def>line</def><sym>;</sym><br />
<def></def>    <sym>}</sym> <def></def><kwa>while</kwa> <def></def><sym>(</sym><def>count</def><sym>);</sym><br />
<def></def>    <kwd>free</kwd> <def></def><sym>(</sym><def>s2</def><sym>);</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<com>/* This function takes a pointer to the first element of an array */</com><def></def><br />
<com>/* Each element of the array is a struct with a character and */</com><def></def><br />
<com>/* a float number p between 0 and 1. */</com><def></def><br />
<com>/* The function generates a random float number r and */</com><def></def><br />
<com>/* finds the first array element such that p &gt;= r. */</com><def></def><br />
<com>/* This is a weighted random selection. */</com><def></def><br />
<com>/* The function then prints the character of the array element. */</com><def></def><br />
<com>/* This is done count times. */</com><def></def><br />
<com>/* Between each WIDTH consecutive characters, the function prints a newline */</com><def></def><br />
<kwb>static void</kwb> <def></def><kwd>random_fasta</kwd> <def></def><sym>(</sym><def>aminoacid_t</def> <kwb>const</kwb> <def></def><sym>*</sym><def>genelist</def><sym>,</sym> <def></def><kwb>size_t</kwb> <def>count</def><sym>) {</sym><br />
<def></def>    <kwa>do</kwa> <def></def><sym>{</sym><br />
<def></def>	<kwb>size_t</kwb> <def>line</def> <sym>=</sym> <def></def><kwd>MIN</kwd><def></def><sym>(</sym><def>WIDTH</def><sym>,</sym> <def>count</def><sym>);</sym><br />
<def></def>	<kwb>size_t</kwb> <def>pos</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>	<kwb>char</kwb> <def>buf</def><sym>[</sym><def>WIDTH</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>];</sym><br />
<def></def>	<kwa>do</kwa> <def></def><sym>{</sym><br />
<def></def>	    <kwb>float</kwb> <def>r</def> <sym>=</sym> <def></def><kwd>myrandom</kwd> <def></def><sym>(</sym><def></def><num>1.0</num><def></def><sym>);</sym><br />
<def></def>	    <kwb>size_t</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>	    <kwa>while</kwa> <def></def><sym>(</sym><def>genelist</def><sym>[</sym><def>i</def><sym>].</sym><def>p</def> <sym>&lt;</sym> <def>r</def><sym>)</sym><br />
<def></def>		<sym>++</sym><def>i</def><sym>;</sym> <def></def><com>/* Linear search */</com><def><br />
	    buf</def><sym>[</sym><def>pos</def><sym>++] =</sym> <def>genelist</def><sym>[</sym><def>i</def><sym>].</sym><def>c</def><sym>;</sym><br />
<def></def>	<sym>}</sym> <def></def><kwa>while</kwa> <def></def><sym>(</sym><def>pos</def> <sym>&lt;</sym> <def>line</def><sym>);</sym><br />
<def>	buf</def><sym>[</sym><def>line</def><sym>] =</sym> <def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>;</sym><br />
<def></def>	<kwd>fwrite_unlocked</kwd> <def></def><sym>(</sym><def>buf</def><sym>,</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>line</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>stdout</def><sym>);</sym><br />
<def>	count</def> <sym>-=</sym> <def>line</def><sym>;</sym><br />
<def></def>    <sym>}</sym> <def></def><kwa>while</kwa> <def></def><sym>(</sym><def>count</def><sym>);</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>int</kwb> <def></def><kwd>main</kwd> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>argc</def><sym>,</sym> <def></def><kwb>char</kwb> <def></def><sym>**</sym><def>argv</def><sym>) {</sym><br />
<def></def>    <kwb>static char</kwb> <def>OutBuf</def><sym>[</sym><def></def><num>128</num> <def></def><sym>*</sym> <def></def><num>1024</num><def></def><sym>];</sym><br />
<def></def>    <kwb>size_t</kwb> <def>n</def><sym>;</sym><br />
<def></def>    <kwa>if</kwa> <def></def><sym>(</sym><def>argc</def> <sym>&gt;</sym> <def></def><num>1</num><def></def><sym>) {</sym><br />
<def></def>	<kwb>char const</kwb> <def></def><sym>*</sym><def>arg</def> <sym>=</sym> <def>argv</def><sym>[</sym><def></def><num>1</num><def></def><sym>];</sym><br />
<def></def> 	<kwb>char</kwb> <def></def><sym>*</sym><def>tail</def><sym>;</sym><br />
<def> 	n</def> <sym>=</sym> <def></def><kwd>strtoul</kwd> <def></def><sym>(</sym><def>arg</def><sym>, &amp;</sym><def>tail</def><sym>,</sym> <def></def><num>0</num><def></def><sym>);</sym><br />
<def></def> 	<kwa>if</kwa> <def></def><sym>(</sym><def>tail</def> <sym>==</sym> <def>arg</def><sym>)</sym><br />
<def></def>	    <kwd>errx</kwd> <def></def><sym>(</sym><def></def><num>1</num><def></def><sym>,</sym> <def></def><str>&quot;Could not convert</str> <esc>\&quot;</esc><str>%s</str><esc>\&quot;</esc> <str>to an unsigned long integer&quot;</str><def></def><sym>,</sym> <def>arg</def><sym>);</sym><br />
<def></def>    <sym>}</sym> <def></def><kwa>else</kwa> <def>n</def> <sym>=</sym> <def></def><num>1000</num><def></def><sym>;</sym><br />
<def></def><br />
    <kwb>static</kwb> <def>aminoacid_t iub</def><sym>[] = {</sym><br />
<def></def>	<sym>{</sym> <def></def><num>0.27</num><def></def><sym>,</sym> <def></def><str>'a'</str><def></def> <sym>},</sym><br />
<def></def>	<sym>{</sym> <def></def><num>0.12</num><def></def><sym>,</sym> <def></def><str>'c'</str><def></def> <sym>},</sym><br />
<def></def>	<sym>{</sym> <def></def><num>0.12</num><def></def><sym>,</sym> <def></def><str>'g'</str><def></def> <sym>},</sym><br />
<def></def>	<sym>{</sym> <def></def><num>0.27</num><def></def><sym>,</sym> <def></def><str>'t'</str><def></def> <sym>},</sym><br />
<def></def>	<sym>{</sym> <def></def><num>0.02</num><def></def><sym>,</sym> <def></def><str>'B'</str><def></def> <sym>},</sym><br />
<def></def>	<sym>{</sym> <def></def><num>0.02</num><def></def><sym>,</sym> <def></def><str>'D'</str><def></def> <sym>},</sym><br />
<def></def>	<sym>{</sym> <def></def><num>0.02</num><def></def><sym>,</sym> <def></def><str>'H'</str><def></def> <sym>},</sym><br />
<def></def>	<sym>{</sym> <def></def><num>0.02</num><def></def><sym>,</sym> <def></def><str>'K'</str><def></def> <sym>},</sym><br />
<def></def>	<sym>{</sym> <def></def><num>0.02</num><def></def><sym>,</sym> <def></def><str>'M'</str><def></def> <sym>},</sym><br />
<def></def>	<sym>{</sym> <def></def><num>0.02</num><def></def><sym>,</sym> <def></def><str>'N'</str><def></def> <sym>},</sym><br />
<def></def>	<sym>{</sym> <def></def><num>0.02</num><def></def><sym>,</sym> <def></def><str>'R'</str><def></def> <sym>},</sym><br />
<def></def>	<sym>{</sym> <def></def><num>0.02</num><def></def><sym>,</sym> <def></def><str>'S'</str><def></def> <sym>},</sym><br />
<def></def>	<sym>{</sym> <def></def><num>0.02</num><def></def><sym>,</sym> <def></def><str>'V'</str><def></def> <sym>},</sym><br />
<def></def>	<sym>{</sym> <def></def><num>0.02</num><def></def><sym>,</sym> <def></def><str>'W'</str><def></def> <sym>},</sym><br />
<def></def>	<sym>{</sym> <def></def><num>0.02</num><def></def><sym>,</sym> <def></def><str>'Y'</str><def></def> <sym>}};</sym><br />
<def></def><br />
    <kwb>static</kwb> <def>aminoacid_t homosapiens</def><sym>[] = {</sym><br />
<def></def>	<sym>{</sym> <def></def><num>0.3029549426680</num><def></def><sym>,</sym> <def></def><str>'a'</str><def></def> <sym>},</sym><br />
<def></def>	<sym>{</sym> <def></def><num>0.1979883004921</num><def></def><sym>,</sym> <def></def><str>'c'</str><def></def> <sym>},</sym><br />
<def></def>	<sym>{</sym> <def></def><num>0.1975473066391</num><def></def><sym>,</sym> <def></def><str>'g'</str><def></def> <sym>},</sym><br />
<def></def>	<sym>{</sym> <def></def><num>0.3015094502008</num><def></def><sym>,</sym> <def></def><str>'t'</str><def></def> <sym>}};</sym><br />
<def></def><br />
    <kwd>accumulate_probabilities</kwd> <def></def><sym>(</sym><def>iub</def><sym>,</sym> <def></def><kwd>NELEMENTS</kwd><def></def><sym>(</sym><def>iub</def><sym>));</sym><br />
<def></def>    <kwd>accumulate_probabilities</kwd> <def></def><sym>(</sym><def>homosapiens</def><sym>,</sym> <def></def><kwd>NELEMENTS</kwd><def></def><sym>(</sym><def>homosapiens</def><sym>));</sym><br />
<def></def><br />
    <kwb>static char const</kwb> <def></def><sym>*</sym><def></def><kwb>const</kwb> <def>alu</def> <sym>=</sym><def></def><str>&quot;\</str><br />
<str>GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG\</str><br />
<str>GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA\</str><br />
<str>CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT\</str><br />
<str>ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA\</str><br />
<str>GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG\</str><br />
<str>AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC\</str><br />
<str>AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</str><def></def><sym>;</sym><br />
<def></def><br />
    <kwd>setvbuf</kwd><def></def><sym>(</sym><def>stdout</def><sym>,</sym> <def>OutBuf</def><sym>,</sym> <def>_IOFBF</def><sym>,</sym> <def></def><kwa>sizeof</kwa> <def>OutBuf</def><sym>);</sym> <def></def><com>/* buffer output */</com><def></def><br />
    <kwd>fputs_unlocked</kwd> <def></def><sym>(</sym><def></def><str>&quot;&gt;ONE Homo sapiens alu</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def>stdout</def><sym>);</sym><br />
<def></def>    <kwd>repeat_fasta</kwd> <def></def><sym>(</sym><def>alu</def><sym>,</sym> <def></def><num>2</num> <def></def><sym>*</sym> <def>n</def><sym>);</sym><br />
<def></def>    <kwd>fputs_unlocked</kwd> <def></def><sym>(</sym><def></def><str>&quot;&gt;TWO IUB ambiguity codes</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def>stdout</def><sym>);</sym><br />
<def></def>    <kwd>random_fasta</kwd> <def></def><sym>(</sym><def>iub</def><sym>,</sym> <def></def><num>3</num> <def></def><sym>*</sym> <def>n</def><sym>);</sym><br />
<def></def>    <kwd>fputs_unlocked</kwd> <def></def><sym>(</sym><def></def><str>&quot;&gt;THREE Homo sapiens frequency</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def>stdout</def><sym>);</sym><br />
<def></def>    <kwd>random_fasta</kwd> <def></def><sym>(</sym><def>homosapiens</def><sym>,</sym> <def></def><num>5</num> <def></def><sym>*</sym> <def>n</def><sym>);</sym><br />
<def></def>    <kwa>return</kwa> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
</source>
