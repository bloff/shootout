<source>
<def></def><slc>-- The Computer Language Shootout</slc><br />
<def></def><slc>-- http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>-- contributed by Mike Pall</slc><br />
<def></def><slc>-- modified by Sokolov yura</slc><br />
<def></def><br />
<kwb>collectgarbage</kwb><def></def><sym>(</sym><def></def><str>&quot;setstepmul&quot;</str><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>)</sym> <def></def><slc>-- sometimes it helps much. For this benchmark ~ 10%</slc><br />
<def></def><br />
<kwa>local function</kwa> <def></def><kwd>BottomUpTree</kwd><def></def><sym>(</sym><def>item</def><sym>,</sym> <def>depth</def><sym>)</sym><br />
<def></def>  <kwa>if</kwa> <def>depth</def> <sym>&gt;</sym> <def></def><num>0</num> <def></def><kwa>then</kwa><br />
<def></def>    <kwa>local</kwa> <def>i</def> <sym>=</sym> <def>item</def> <sym>+</sym> <def>item<br />
    depth</def> <sym>=</sym> <def>depth</def> <sym>-</sym> <def></def><num>1</num><br />
<def></def>    <kwa>local</kwa> <def>left</def><sym>,</sym> <def>right</def> <sym>=</sym> <def></def><kwd>BottomUpTree</kwd><def></def><sym>(</sym><def>i</def><sym>-</sym><def></def><num>1</num><def></def><sym>,</sym> <def>depth</def><sym>),</sym> <def></def><kwd>BottomUpTree</kwd><def></def><sym>(</sym><def>i</def><sym>,</sym> <def>depth</def><sym>)</sym><br />
<def></def>    <kwa>return</kwa> <def></def><sym>{</sym> <def>item</def><sym>,</sym> <def>left</def><sym>,</sym> <def>right</def> <sym>}</sym><br />
<def></def>  <kwa>else</kwa><br />
<def></def>    <kwa>return</kwa> <def></def><sym>{</sym> <def>item</def> <sym>}</sym> <def></def><slc>-- Faster for LuaJIT: return { item, false }</slc><br />
<def></def>  <kwa>end</kwa><br />
<def></def><kwa>end</kwa><br />
<def></def><br />
<kwa>local function</kwa> <def></def><kwd>ItemCheck</kwd><def></def><sym>(</sym><def>tree</def><sym>)</sym><br />
<def></def>  <kwa>if</kwa> <def></def><slc>#tree == 3 then -- Faster for LuaJIT: if tree[2] then</slc><br />
<def></def>    <kwa>return</kwa> <def>tree</def><sym>[</sym><def></def><num>1</num><def></def><sym>] +</sym> <def></def><kwd>ItemCheck</kwd><def></def><sym>(</sym><def>tree</def><sym>[</sym><def></def><num>2</num><def></def><sym>]) -</sym> <def></def><kwd>ItemCheck</kwd><def></def><sym>(</sym><def>tree</def><sym>[</sym><def></def><num>3</num><def></def><sym>])</sym><br />
<def></def>  <kwa>else</kwa><br />
<def></def>    <kwa>return</kwa> <def>tree</def><sym>[</sym><def></def><num>1</num><def></def><sym>]</sym><br />
<def></def>  <kwa>end</kwa><br />
<def></def><kwa>end</kwa><br />
<def></def><br />
<kwa>local</kwa> <def>N</def> <sym>=</sym> <def></def><kwb>tonumber</kwb><def></def><sym>(</sym><def>arg</def> <kwa>and</kwa> <def>arg</def><sym>[</sym><def></def><num>1</num><def></def><sym>])</sym> <def></def><kwa>or</kwa> <def></def><num>0</num><br />
<def></def><kwa>local</kwa> <def>mindepth</def> <sym>=</sym> <def></def><num>4</num><br />
<def></def><kwa>local</kwa> <def>maxdepth</def> <sym>=</sym> <def>mindepth</def> <sym>+</sym> <def></def><num>2</num><br />
<def></def><kwa>if</kwa> <def>maxdepth</def> <sym>&lt;</sym> <def>N</def> <kwa>then</kwa> <def>maxdepth</def> <sym>=</sym> <def>N</def> <kwa>end</kwa><br />
<def></def><br />
<kwa>do</kwa><br />
<def></def>  <kwa>local</kwa> <def>stretchdepth</def> <sym>=</sym> <def>maxdepth</def> <sym>+</sym> <def></def><num>1</num><br />
<def></def>  <kwa>local</kwa> <def>stretchtree</def> <sym>=</sym> <def></def><kwd>BottomUpTree</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def>stretchdepth</def><sym>)</sym><br />
<def>  io</def><sym>.</sym><def></def><kwb>write</kwb><def></def><sym>(</sym><def></def><kwb>string</kwb><def></def><sym>.</sym><def></def><kwb>format</kwb><def></def><sym>(</sym><def></def><str>&quot;stretch tree of depth %d</str><esc>\t</esc> <str>check: %d</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym><br />
<def>    stretchdepth</def><sym>,</sym> <def></def><kwd>ItemCheck</kwd><def></def><sym>(</sym><def>stretchtree</def><sym>)))</sym><br />
<def></def><kwa>end</kwa><br />
<def></def><br />
<kwa>local</kwa> <def>longlivedtree</def> <sym>=</sym> <def></def><kwd>BottomUpTree</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def>maxdepth</def><sym>)</sym><br />
<def></def><br />
<kwa>for</kwa> <def>depth</def><sym>=</sym><def>mindepth</def><sym>,</sym><def>maxdepth</def><sym>,</sym><def></def><num>2</num> <def></def><kwa>do</kwa><br />
<def></def>  <kwa>local</kwa> <def>iterations</def> <sym>=</sym> <def></def><num>2</num> <def>^</def> <sym>(</sym><def>maxdepth</def> <sym>-</sym> <def>depth</def> <sym>+</sym> <def>mindepth</def><sym>)</sym><br />
<def></def>  <kwa>local</kwa> <def>check</def> <sym>=</sym> <def></def><num>0</num><br />
<def></def>  <kwa>for</kwa> <def>i</def><sym>=</sym><def></def><num>1</num><def></def><sym>,</sym><def>iterations</def> <kwa>do</kwa><br />
<def>    check</def> <sym>=</sym> <def>check</def> <sym>+</sym> <def></def><kwd>ItemCheck</kwd><def></def><sym>(</sym><def></def><kwd>BottomUpTree</kwd><def></def><sym>(</sym><def></def><num>1</num><def></def><sym>,</sym> <def>depth</def><sym>)) +</sym><br />
<def></def>            <kwd>ItemCheck</kwd><def></def><sym>(</sym><def></def><kwd>BottomUpTree</kwd><def></def><sym>(-</sym><def></def><num>1</num><def></def><sym>,</sym> <def>depth</def><sym>))</sym><br />
<def></def>  <kwa>end</kwa><br />
<def>  io</def><sym>.</sym><def></def><kwb>write</kwb><def></def><sym>(</sym><def></def><kwb>string</kwb><def></def><sym>.</sym><def></def><kwb>format</kwb><def></def><sym>(</sym><def></def><str>&quot;%d</str><esc>\t</esc> <str>trees of depth %d</str><esc>\t</esc> <str>check: %d</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym><br />
<def>    iterations</def><sym>*</sym><def></def><num>2</num><def></def><sym>,</sym> <def>depth</def><sym>,</sym> <def>check</def><sym>))</sym><br />
<def></def><kwa>end</kwa><br />
<def><br />
io</def><sym>.</sym><def></def><kwb>write</kwb><def></def><sym>(</sym><def></def><kwb>string</kwb><def></def><sym>.</sym><def></def><kwb>format</kwb><def></def><sym>(</sym><def></def><str>&quot;long lived tree of depth %d</str><esc>\t</esc> <str>check: %d</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym><br />
<def>  maxdepth</def><sym>,</sym> <def></def><kwd>ItemCheck</kwd><def></def><sym>(</sym><def>longlivedtree</def><sym>)))</sym><br />
<def></def><br />
</source>
