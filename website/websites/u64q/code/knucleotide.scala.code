<source>
<def></def><com>/* The Computer Language Benchmarks Game</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com>   contributed by Isaac Gouy</com><br />
<com>   fixed by Iulian Dragos</com><br />
<com>   fixed by Meiko Rachimow</com><br />
<com>*/</com><def></def><br />
<br />
<kwa>import</kwa> <def>java</def><sym>.</sym><def>io</def><sym>.</sym><def>_</def><br />
<kwa>import</kwa> <def>scala</def><sym>.</sym><def>collection</def><sym>.</sym><def>mutable</def><sym>.{</sym><def>HashTable</def><sym>,</sym> <def>HashEntry</def><sym>}</sym><br />
<def></def><kwa>import</kwa> <def>scala</def><sym>.</sym><def>Console</def><br />
<br />
<kwa>object</kwa> <def>knucleotide</def> <sym>{</sym><br />
<def></def><br />
   <kwa>var</kwa> <def>sequence</def><sym>:</sym> <def></def><kwc>String</kwc> <def></def><sym>=</sym> <def>_</def><br />
<br />
   <kwa>def</kwa> <def>main</def><sym>(</sym><def>args</def><sym>:</sym> <def></def><kwc>Array</kwc><def></def><sym>[</sym><def></def><kwc>String</kwc><def></def><sym>]) = {</sym><br />
<def></def>      <kwa>val</kwa> <def>r</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwc>BufferedReader</kwc><def></def><sym>(</sym><def></def><kwa>new</kwa> <def></def><kwc>InputStreamReader</kwc><def></def><sym>(</sym><def></def><kwc>System</kwc><def></def><sym>.</sym><def>in</def><sym>))</sym><br />
<def>      findSequence</def><sym>(</sym><def></def><str>&quot;&gt;THREE&quot;</str><def></def><sym>,</sym> <def>r</def><sym>)</sym><br />
<def>      sequence</def> <sym>=</sym> <def>nextSequence</def><sym>(</sym><def>r</def><sym>)</sym><br />
<def>      r</def><sym>.</sym><def>close<br />
<br />
      writeFrequencies</def><sym>(</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def>      writeFrequencies</def><sym>(</sym><def></def><num>2</num><def></def><sym>)</sym><br />
<def><br />
      writeCount</def><sym>(</sym><def></def><str>&quot;GGT&quot;</str><def></def><sym>)</sym><br />
<def>      writeCount</def><sym>(</sym><def></def><str>&quot;GGTA&quot;</str><def></def><sym>)</sym><br />
<def>      writeCount</def><sym>(</sym><def></def><str>&quot;GGTATT&quot;</str><def></def><sym>)</sym><br />
<def>      writeCount</def><sym>(</sym><def></def><str>&quot;GGTATTTTAATT&quot;</str><def></def><sym>)</sym><br />
<def>      writeCount</def><sym>(</sym><def></def><str>&quot;GGTATTTTAATTTATAGT&quot;</str><def></def><sym>)</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>def</kwa> <def>findSequence</def><sym>(</sym><def>id</def><sym>:</sym> <def></def><kwc>String</kwc><def></def><sym>,</sym> <def>r</def><sym>:</sym> <def></def><kwc>BufferedReader</kwc><def></def><sym>):</sym> <def>Unit</def> <sym>= {</sym><br />
<def></def>      <kwa>var</kwa> <def>line</def> <sym>=</sym> <def>r</def><sym>.</sym><def>readLine</def><br />
      <kwa>while</kwa> <def></def><sym>(</sym><def>line</def> <sym>!=</sym> <def>null</def><sym>) {</sym><br />
<def></def>         <kwa>val</kwa> <def>c</def> <sym>=</sym> <def>line</def><sym>.</sym><def>charAt</def><sym>(</sym><def></def><num>0</num><def></def><sym>)</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>c</def> <sym>==</sym> <def></def><str>'&gt;'</str><def></def> <sym>&amp;&amp;</sym> <def>line</def><sym>.</sym><def>startsWith</def><sym>(</sym><def>id</def><sym>))</sym> <def></def><kwa>return</kwa><br />
<def>         line</def> <sym>=</sym> <def>r</def><sym>.</sym><def>readLine</def><br />
      <sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>def</kwa> <def>nextSequence</def><sym>(</sym><def>r</def><sym>:</sym> <def></def><kwc>BufferedReader</kwc><def></def><sym>):</sym> <def></def><kwc>String</kwc> <def></def><sym>= {</sym><br />
<def></def>      <kwa>val</kwa> <def>b</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwc>StringBuffer</kwc><def></def><sym>()</sym><br />
<def></def><br />
      <kwa>var</kwa> <def>line</def> <sym>=</sym> <def>r</def><sym>.</sym><def>readLine</def><br />
      <kwa>while</kwa> <def></def><sym>(</sym><def>line</def> <sym>!=</sym> <def>null</def><sym>) {</sym><br />
<def></def>         <kwa>val</kwa> <def>c</def> <sym>=</sym> <def>line</def><sym>.</sym><def>charAt</def><sym>(</sym><def></def><num>0</num><def></def><sym>)</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>c</def> <sym>==</sym> <def></def><str>'&gt;'</str><def></def><sym>) {</sym><br />
<def></def>            <kwa>return</kwa> <def>b</def><sym>.</sym><def>toString</def><br />
         <sym>}</sym> <def></def><kwa>else</kwa> <def></def><sym>{</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>c</def> <sym>!=</sym> <def></def><str>';'</str><def></def><sym>)</sym> <def>b</def><sym>.</sym><def>append</def><sym>(</sym><def>line</def><sym>.</sym><def>toUpperCase</def><sym>)</sym><br />
<def></def>         <sym>}</sym><br />
<def>         line</def> <sym>=</sym> <def>r</def><sym>.</sym><def>readLine</def><br />
      <sym>}</sym><br />
<def>      b</def><sym>.</sym><def>toString</def><br />
   <sym>}</sym><br />
<def></def><br />
   <kwa>def</kwa> <def>generateFrequencies</def><sym>(</sym><def>length</def><sym>:</sym> <def></def><kwb>int</kwb><def></def><sym>) = {</sym><br />
<def></def>      <kwa>val</kwa> <def>bag</def><sym>:</sym> <def>HashBag</def><sym>[</sym><def></def><kwc>String</kwc><def></def><sym>] =</sym> <def></def><kwa>new</kwa> <def>HashBag</def><sym>()</sym><br />
<def></def><br />
      <kwa>def</kwa> <def>kFrequency</def><sym>(</sym><def>offset</def><sym>:</sym> <def></def><kwb>int</kwb><def></def><sym>,</sym> <def>j</def><sym>:</sym> <def></def><kwb>int</kwb><def></def><sym>) = {</sym><br />
<def></def>         <kwa>val</kwa> <def>n</def> <sym>=</sym> <def>sequence</def><sym>.</sym><def>length</def> <sym>-</sym> <def>j</def> <sym>+</sym> <def></def><num>1</num><br />
<def></def>         <kwa>var</kwa> <def>i</def> <sym>=</sym> <def>offset</def><br />
         <kwa>while</kwa> <def></def><sym>(</sym><def>i</def> <sym>&lt;</sym> <def>n</def><sym>){</sym> <def>bag</def> <sym>+=</sym> <def>sequence</def><sym>.</sym><def>substring</def><sym>(</sym><def>i</def><sym>,</sym><def>i</def><sym>+</sym><def>j</def><sym>);</sym> <def>i</def> <sym>=</sym> <def>i</def><sym>+</sym><def>j</def> <sym>}</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><br />
      <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwa>val</kwa> <def>o</def> <sym>&lt;-</sym> <def></def><kwc>Iterator</kwc><def></def><sym>.</sym><def>range</def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym><def>length</def><sym>))</sym> <def>kFrequency</def><sym>(</sym><def>o</def><sym>,</sym><def>length</def><sym>)</sym><br />
<def>      bag</def><br />
   <sym>}</sym><br />
<def></def><br />
   <kwa>def</kwa> <def>writeFrequencies</def><sym>(</sym><def>j</def><sym>:</sym> <def></def><kwb>int</kwb><def></def><sym>) = {</sym><br />
<def></def>      <kwa>val</kwa> <def>bag</def> <sym>=</sym> <def>generateFrequencies</def><sym>(</sym><def>j</def><sym>)</sym><br />
<def></def>      <kwa>val</kwa> <def>n</def> <sym>=</sym> <def>sequence</def><sym>.</sym><def>length</def> <sym>-</sym> <def>j</def> <sym>+</sym> <def></def><num>1.0</num><br />
<def></def>      <kwa>val</kwa> <def>sortedValues</def> <sym>=</sym> <def>bag</def><sym>.</sym><def>elements</def><sym>.</sym><def>toList</def><sym>.</sym><def>sort</def><sym>(</sym><br />
<def></def>         <sym>(</sym><def>a</def><sym>,</sym><def>b</def><sym>) =&gt;</sym> <def></def><kwa>if</kwa> <def></def><sym>(</sym><def>a</def><sym>.</sym><def>value</def> <sym>==</sym> <def>b</def><sym>.</sym><def>value</def><sym>)</sym> <def>a</def><sym>.</sym><def>key</def> <sym>&gt;</sym> <def>b</def><sym>.</sym><def>key</def><br />
                  <kwa>else</kwa> <def>a</def><sym>.</sym><def>value</def> <sym>&gt;</sym> <def>b</def><sym>.</sym><def>value</def> <sym>)</sym><br />
<def></def><br />
      <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwa>val</kwa> <def>a</def> <sym>&lt;-</sym> <def>sortedValues</def><sym>)</sym><br />
<def>         Console</def><sym>.</sym><def>printf</def><sym>(</sym><def></def><str>&quot;%s %.3f</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def>a</def><sym>.</sym><def>key</def><sym>,</sym> <def>a</def><sym>.</sym><def>value</def> <sym>/</sym> <def>n</def> <sym>*</sym> <def></def><num>100.0</num><def></def><sym>)</sym><br />
<def><br />
      Console</def><sym>.</sym><def>println</def><br />
   <sym>}</sym><br />
<def></def><br />
   <kwa>def</kwa> <def>writeCount</def><sym>(</sym><def>fragment</def><sym>:</sym> <def></def><kwc>String</kwc><def></def><sym>) = {</sym><br />
<def></def>      <kwa>val</kwa> <def>bag</def> <sym>=</sym> <def>generateFrequencies</def><sym>(</sym><def>fragment</def><sym>.</sym><def>length</def><sym>)</sym><br />
<def>      Console</def><sym>.</sym><def>println</def><sym>(</sym> <def>bag</def><sym>.</sym><def>findOccurrences</def><sym>(</sym><def>fragment</def><sym>) +</sym> <def></def><str>&quot;</str><esc>\t</esc><str>&quot;</str><def></def> <sym>+</sym> <def>fragment</def> <sym>)</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<br />
<kwa>class</kwa> <def>HashBag</def><sym>[</sym><def>A</def><sym>]</sym> <def></def><kwa>extends</kwa> <def>HashTable</def><sym>[</sym><def>A</def><sym>] {</sym><br />
<def></def>   <kwa>protected type</kwa> <def>Entry</def> <sym>=</sym> <def>Counter</def><sym>[</sym><def>A</def><sym>]</sym><br />
<def></def>   <kwa>protected def</kwa> <def>entryKey</def><sym>(</sym><def>e</def><sym>:</sym> <def>Entry</def><sym>) =</sym> <def>e</def><sym>.</sym><def>key</def><br />
   <kwa>def</kwa> <def>elements</def> <sym>=</sym> <def>entries</def><br />
<br />
   <kwa>def</kwa> <def></def><sym>+=(</sym><def>elem</def><sym>:</sym> <def>A</def><sym>):</sym> <def>Unit</def> <sym>= {</sym><br />
<def></def>      <kwa>var</kwa> <def>bucket</def> <sym>=</sym> <def>table</def><sym>(</sym><def>index</def><sym>(</sym><def>elemHashCode</def><sym>(</sym><def>elem</def><sym>)))</sym><br />
<def></def>      <kwa>while</kwa> <def></def><sym>(</sym><def>bucket ne null</def><sym>) {</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>elemEquals</def><sym>(</sym><def>entryKey</def><sym>(</sym><def>bucket</def><sym>),</sym> <def>elem</def><sym>)){</sym><br />
<def>            bucket</def><sym>.</sym><def>inc</def><br />
            <kwa>return</kwa><br />
<def></def>         <sym>}</sym><br />
<def>         bucket</def> <sym>=</sym> <def>bucket</def><sym>.</sym><def>next</def><br />
      <sym>}</sym><br />
<def>      addEntry</def><sym>(</sym><def></def><kwa>new</kwa> <def>Entry</def><sym>(</sym><def>elem</def><sym>,</sym> <def></def><num>1</num><def></def><sym>))</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>def</kwa> <def>findOccurrences</def><sym>(</sym><def>elem</def><sym>:</sym> <def>A</def><sym>):</sym> <def></def><kwb>int</kwb> <def></def><sym>= {</sym><br />
<def></def>      <kwa>var</kwa> <def>bucket</def> <sym>=</sym> <def>table</def><sym>(</sym><def>index</def><sym>(</sym><def>elemHashCode</def><sym>(</sym><def>elem</def><sym>)))</sym><br />
<def></def>      <kwa>while</kwa> <def></def><sym>(</sym><def>bucket ne null</def><sym>) {</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>elemEquals</def><sym>(</sym><def>entryKey</def><sym>(</sym><def>bucket</def><sym>),</sym> <def>elem</def><sym>)){</sym><br />
<def></def>            <kwa>return</kwa> <def>bucket</def><sym>.</sym><def>value</def><br />
         <sym>}</sym><br />
<def>         bucket</def> <sym>=</sym> <def>bucket</def><sym>.</sym><def>next</def><br />
      <sym>}</sym><br />
<def></def>      <kwa>return</kwa> <def></def><num>0</num><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
<com>/*</com><br />
<com>   def -=(elem: A): Unit = {</com><br />
<com>      var bucket = table(index(elemHashCode(elem)))</com><br />
<com>      while (!bucket.isEmpty) {</com><br />
<com>         if (elemEquals(entryKey(bucket.head), elem)){</com><br />
<com>            bucket.head.dec</com><br />
<com>            if (bucket.head.value == 0) removeEntry(elem)</com><br />
<com>            return</com><br />
<com>         }</com><br />
<com>         bucket = bucket.tail</com><br />
<com>      }</com><br />
<com>  }</com><br />
<com>*/</com><def></def><br />
<sym>}</sym><br />
<def></def><br />
<kwa>protected class</kwa> <def>Counter</def><sym>[</sym><def>A</def><sym>](</sym><def>k</def><sym>:</sym> <def>A</def><sym>,</sym> <def>v</def><sym>:</sym> <def></def><kwb>int</kwb><def></def><sym>)</sym> <def></def><kwa>extends</kwa> <def>AnyRef with HashEntry</def><sym>[</sym><def>A</def><sym>,</sym> <def>Counter</def><sym>[</sym><def>A</def><sym>]] {</sym><br />
<def></def>   <kwa>val</kwa> <def>key</def> <sym>=</sym> <def>k</def><br />
   <kwa>var</kwa> <def>value</def> <sym>=</sym> <def>v</def><br />
   <kwa>def</kwa> <def>inc</def> <sym>= {</sym> <def>value</def> <sym>=</sym> <def>value</def> <sym>+</sym> <def></def><num>1</num> <def></def><sym>}</sym><br />
<def></def>   <kwa>def</kwa> <def>dec</def> <sym>= {</sym> <def>value</def> <sym>=</sym> <def>value</def> <sym>-</sym> <def></def><num>1</num> <def></def><sym>}</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
