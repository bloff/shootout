<span class="hl slc">%% The Computer Language Benchmarks Game</span>
<span class="hl slc">%% http://shootout.alioth.debian.org/</span>
<span class="hl slc">%% Contributed by Fredrik Svahn based on Per Gustafsson's mandelbrot program</span>

<span class="hl sym">-</span><span class="hl kwa">module</span><span class="hl sym">(</span>mandelbrot<span class="hl sym">).</span>
<span class="hl sym">-</span><span class="hl kwa">export</span><span class="hl sym">([</span>main<span class="hl sym">/</span><span class="hl num">1</span><span class="hl sym">]).</span>
<span class="hl sym">-</span><span class="hl kwa">define</span><span class="hl sym">(</span>LIM_SQR<span class="hl sym">,</span> <span class="hl num">4.0</span><span class="hl sym">).</span>
<span class="hl sym">-</span><span class="hl kwa">define</span><span class="hl sym">(</span>ITER<span class="hl sym">,</span> <span class="hl num">50</span><span class="hl sym">).</span>
<span class="hl sym">-</span><span class="hl kwa">define</span><span class="hl sym">(</span><span class="hl kwd">F</span><span class="hl sym">(</span>X<span class="hl sym">),</span><span class="hl kwd">is_float</span><span class="hl sym">(</span>X<span class="hl sym">)).</span>
<span class="hl sym">-</span><span class="hl kwa">define</span><span class="hl sym">(</span>SR<span class="hl sym">, -</span><span class="hl num">1.5</span><span class="hl sym">).</span>
<span class="hl sym">-</span><span class="hl kwa">define</span><span class="hl sym">(</span>SI<span class="hl sym">, -</span><span class="hl num">1</span><span class="hl sym">).</span>

<span class="hl kwd">main</span><span class="hl sym">([</span>Arg<span class="hl sym">]) -&gt;</span>
    N <span class="hl sym">=</span> <span class="hl kwb">list_to_integer</span><span class="hl sym">(</span>Arg<span class="hl sym">),</span>
    <span class="hl kwb">put</span><span class="hl sym">(</span>port<span class="hl sym">,</span> <span class="hl kwb">open_port</span><span class="hl sym">({</span>fd<span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">}, [</span>out<span class="hl sym">])),</span>
    <span class="hl kwd">port_command</span><span class="hl sym">(</span><span class="hl kwb">get</span><span class="hl sym">(</span>port<span class="hl sym">),[</span><span class="hl str">&quot;P4</span><span class="hl esc">\</span><span class="hl str">n&quot;</span><span class="hl sym">,</span> Arg<span class="hl sym">,</span> <span class="hl str">&quot; &quot;</span><span class="hl sym">,</span> Arg<span class="hl sym">,</span> <span class="hl str">&quot;</span><span class="hl esc">\</span><span class="hl str">n&quot;</span><span class="hl sym">]),</span>
    <span class="hl kwd">calc_bits</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> N<span class="hl sym">, []),</span>
    <span class="hl kwb">halt</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">).</span>

<span class="hl slc">%Loop over all bits to calculate and print</span>
<span class="hl kwd">calc_bits</span><span class="hl sym">(</span>N<span class="hl sym">,</span> N<span class="hl sym">,</span> N<span class="hl sym">,</span> Bits<span class="hl sym">) -&gt;</span>
    <span class="hl kwd">print_bytes</span><span class="hl sym">(</span>Bits<span class="hl sym">),</span> done<span class="hl sym">;</span>
<span class="hl kwd">calc_bits</span><span class="hl sym">(</span>N<span class="hl sym">,</span> Y<span class="hl sym">,</span> N<span class="hl sym">,</span> Bits<span class="hl sym">) -&gt;</span>
    <span class="hl kwd">print_bytes</span><span class="hl sym">(</span>Bits<span class="hl sym">),</span> <span class="hl kwd">calc_bits</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> Y <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span> N<span class="hl sym">, []);</span>
<span class="hl kwd">calc_bits</span><span class="hl sym">(</span>X<span class="hl sym">,</span> Y<span class="hl sym">,</span> N<span class="hl sym">,</span> Bits<span class="hl sym">) -&gt;</span>
    <span class="hl kwd">calc_bits</span><span class="hl sym">(</span>X <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span> Y<span class="hl sym">,</span> N<span class="hl sym">, [</span><span class="hl kwd">m</span><span class="hl sym">(?</span>ITER<span class="hl sym">, ?</span>SR<span class="hl sym">+(</span>N<span class="hl sym">-</span>X<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)*</span><span class="hl num">2</span><span class="hl sym">/</span>N<span class="hl sym">, ?</span>SI<span class="hl sym">+(</span>Y<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)*</span><span class="hl num">2</span><span class="hl sym">/</span>N<span class="hl sym">) |</span> Bits<span class="hl sym">]).</span>

<span class="hl slc">%Mandelbrot algorithm</span>
<span class="hl kwd">m</span><span class="hl sym">(</span>Iter<span class="hl sym">,</span> CR<span class="hl sym">,</span>CI<span class="hl sym">) -&gt;</span> <span class="hl kwd">m</span><span class="hl sym">(</span>Iter <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> CR<span class="hl sym">,</span> CI<span class="hl sym">,</span> CR<span class="hl sym">,</span> CI<span class="hl sym">).</span>

<span class="hl kwd">m</span><span class="hl sym">(</span>Iter<span class="hl sym">,</span> R<span class="hl sym">,</span> I<span class="hl sym">,</span> CR<span class="hl sym">,</span> CI<span class="hl sym">)</span> <span class="hl kwa">when</span> <span class="hl sym">?</span><span class="hl kwd">F</span><span class="hl sym">(</span>R<span class="hl sym">), ?</span><span class="hl kwd">F</span><span class="hl sym">(</span>I<span class="hl sym">), ?</span><span class="hl kwd">F</span><span class="hl sym">(</span>CR<span class="hl sym">), ?</span><span class="hl kwd">F</span><span class="hl sym">(</span>CI<span class="hl sym">),</span> Iter <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl sym">-&gt;</span>
    <span class="hl kwa">case</span> <span class="hl sym">(</span>R<span class="hl sym">*</span>R<span class="hl sym">+</span>I<span class="hl sym">*</span>I<span class="hl sym">)</span> <span class="hl kwa">of</span>
	Lim <span class="hl kwa">when</span> Lim <span class="hl sym">=&lt; ?</span>LIM_SQR <span class="hl sym">-&gt;</span> <span class="hl kwd">m</span><span class="hl sym">(</span>Iter<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> R<span class="hl sym">*</span>R<span class="hl sym">-</span>I<span class="hl sym">*</span>I<span class="hl sym">+</span>CR<span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">*</span>R<span class="hl sym">*</span>I<span class="hl sym">+</span>CI<span class="hl sym">,</span> CR<span class="hl sym">,</span> CI<span class="hl sym">);</span>
	_ <span class="hl sym">-&gt;</span> <span class="hl num">0</span>
    <span class="hl kwa">end</span><span class="hl sym">;</span>
<span class="hl kwd">m</span><span class="hl sym">(</span>_<span class="hl sym">,</span>R<span class="hl sym">,</span>I<span class="hl sym">,</span>_<span class="hl sym">,</span>_<span class="hl sym">)</span> <span class="hl kwa">when</span> <span class="hl sym">?</span><span class="hl kwd">F</span><span class="hl sym">(</span>R<span class="hl sym">), ?</span><span class="hl kwd">F</span><span class="hl sym">(</span>I<span class="hl sym">) -&gt;</span>
    <span class="hl kwa">case</span> <span class="hl sym">(</span>R<span class="hl sym">*</span>R<span class="hl sym">+</span>I<span class="hl sym">*</span>I<span class="hl sym">)</span> <span class="hl kwa">of</span>
	Lim <span class="hl kwa">when</span> Lim <span class="hl sym">=&lt; ?</span>LIM_SQR <span class="hl sym">-&gt;</span> <span class="hl num">1</span><span class="hl sym">;</span>
	_ <span class="hl sym">-&gt;</span> <span class="hl num">0</span>
    <span class="hl kwa">end</span><span class="hl sym">.</span>

<span class="hl slc">%Print bytes one at a time.</span>
<span class="hl kwd">print_bytes</span><span class="hl sym">(</span>Bytes<span class="hl sym">)-&gt;</span>
    <span class="hl kwd">print_bytes</span><span class="hl sym">(</span><span class="hl kwb">get</span><span class="hl sym">(</span>port<span class="hl sym">),</span> Bytes<span class="hl sym">).</span>
<span class="hl kwd">print_bytes</span><span class="hl sym">(</span>_<span class="hl sym">, []) -&gt;</span> done<span class="hl sym">;</span>
<span class="hl kwd">print_bytes</span><span class="hl sym">(</span>Port<span class="hl sym">, [</span>B1<span class="hl sym">,</span> B2<span class="hl sym">,</span> B3<span class="hl sym">,</span> B4<span class="hl sym">,</span> B5<span class="hl sym">,</span> B6<span class="hl sym">,</span> B7<span class="hl sym">,</span> B8 <span class="hl sym">|</span> RemBytes<span class="hl sym">]) -&gt;</span>
    <span class="hl kwd">port_command</span><span class="hl sym">(</span>Port<span class="hl sym">, &lt;&lt;</span>B1<span class="hl sym">:</span><span class="hl num">1</span><span class="hl sym">,</span>B2<span class="hl sym">:</span><span class="hl num">1</span><span class="hl sym">,</span>B3<span class="hl sym">:</span><span class="hl num">1</span><span class="hl sym">,</span>B4<span class="hl sym">:</span><span class="hl num">1</span><span class="hl sym">,</span>B5<span class="hl sym">:</span><span class="hl num">1</span><span class="hl sym">,</span>B6<span class="hl sym">:</span><span class="hl num">1</span><span class="hl sym">,</span>B7<span class="hl sym">:</span><span class="hl num">1</span><span class="hl sym">,</span>B8<span class="hl sym">:</span><span class="hl num">1</span><span class="hl sym">&gt;&gt;),</span>
    <span class="hl kwd">print_bytes</span><span class="hl sym">(</span>Port<span class="hl sym">,</span> RemBytes<span class="hl sym">);</span>
<span class="hl kwd">print_bytes</span><span class="hl sym">(</span>Port<span class="hl sym">,</span> RemBytes<span class="hl sym">) -&gt;</span>
    <span class="hl kwd">print_bytes</span><span class="hl sym">(</span>Port<span class="hl sym">,</span> RemBytes<span class="hl sym">++[</span><span class="hl num">0</span><span class="hl sym">]).</span>
