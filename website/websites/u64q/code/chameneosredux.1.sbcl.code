<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;   http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;</span>
<span class="hl slc">;;   contributed by Alexey Voznyuk</span>
<span class="hl slc">;;</span>

<span class="hl sym">(</span>defpackage #<span class="hl sym">:</span>chameneos<span class="hl sym">-</span>redux
  <span class="hl sym">(:</span>use <span class="hl sym">:</span>cl<span class="hl sym">))</span>

<span class="hl sym">(</span>in<span class="hl sym">-</span>package <span class="hl sym">:</span>chameneos<span class="hl sym">-</span>redux<span class="hl sym">)</span>

<span class="hl slc">;;</span>
<span class="hl slc">;; Game DSL compiler</span>
<span class="hl slc">;;</span>

<span class="hl sym">(</span>defmacro defun<span class="hl sym">/</span>fast <span class="hl sym">(</span>name typed<span class="hl sym">-</span>args <span class="hl sym">&amp;</span>body body<span class="hl sym">)</span>
  <span class="hl sym">`(</span>defun <span class="hl sym">,</span>name <span class="hl sym">,(</span>mapcar #<span class="hl sym">'</span>first typed<span class="hl sym">-</span>args<span class="hl sym">)</span>
     <span class="hl sym">(</span>declare <span class="hl sym">(</span>optimize <span class="hl sym">(</span>speed <span class="hl num">3</span><span class="hl sym">) (</span>safety <span class="hl num">0</span><span class="hl sym">) (</span>debug <span class="hl num">0</span><span class="hl sym">))</span>
              <span class="hl sym">,</span>&#64;<span class="hl sym">(</span>loop <span class="hl sym">:</span>for <span class="hl sym">(</span>arg type<span class="hl sym">) :</span>in typed<span class="hl sym">-</span>args
                   <span class="hl sym">:</span>collect <span class="hl sym">`(</span>type <span class="hl sym">,</span>type <span class="hl sym">,</span>arg<span class="hl sym">)))</span>
     <span class="hl sym">,</span>&#64;body<span class="hl sym">))</span>

<span class="hl sym">(</span>defmacro declare<span class="hl sym">-</span>colors<span class="hl sym">-</span>map <span class="hl sym">(&amp;</span>rest transformations<span class="hl sym">)</span>
  <span class="hl sym">`(</span>progn
     <span class="hl sym">(</span>defun<span class="hl sym">/</span>fast complement<span class="hl sym">-</span>color <span class="hl sym">((</span>color<span class="hl sym">-</span>a symbol<span class="hl sym">) (</span>color<span class="hl sym">-</span>b symbol<span class="hl sym">))</span>
       <span class="hl sym">(</span>cond
         <span class="hl sym">,</span>&#64;<span class="hl sym">(</span>loop
              <span class="hl sym">:</span>for <span class="hl sym">(</span>test<span class="hl sym">-</span>a kw<span class="hl sym">-</span>plus test<span class="hl sym">-</span>b kw<span class="hl sym">-</span>arrow test<span class="hl sym">-</span>result<span class="hl sym">) :</span>in transformations
              <span class="hl sym">:</span>do <span class="hl sym">(</span>assert <span class="hl sym">(</span>and <span class="hl sym">(</span>eq kw<span class="hl sym">-</span>plus <span class="hl sym">'+) (</span>eq kw<span class="hl sym">-</span>arrow <span class="hl sym">'-&gt;)))</span>
              <span class="hl sym">:</span>collect <span class="hl sym">`((</span>and <span class="hl sym">(</span>eq color<span class="hl sym">-</span>a <span class="hl sym">',</span>test<span class="hl sym">-</span>a<span class="hl sym">) (</span>eq color<span class="hl sym">-</span>b <span class="hl sym">',</span>test<span class="hl sym">-</span>b<span class="hl sym">))</span>
                         <span class="hl sym">',</span>test<span class="hl sym">-</span>result<span class="hl sym">))</span>
         <span class="hl sym">(</span>t <span class="hl sym">(</span>error <span class="hl str">&quot;Invalid colors combinations&quot;</span><span class="hl sym">))))</span>
     <span class="hl sym">(</span>defun<span class="hl sym">/</span>fast print<span class="hl sym">-</span>colors <span class="hl sym">()</span>
       <span class="hl sym">(</span>format t <span class="hl str">&quot;~{~{~a + ~a -&gt; ~a~%~}~}~%&quot;</span>
               <span class="hl sym">(</span>list <span class="hl sym">,</span>&#64;<span class="hl sym">(</span>loop
                          <span class="hl sym">:</span>for <span class="hl sym">(</span>test<span class="hl sym">-</span>a kw<span class="hl sym">-</span>plus test<span class="hl sym">-</span>b<span class="hl sym">) :</span>in transformations
                          <span class="hl sym">:</span>collect <span class="hl sym">`(</span>list <span class="hl sym">,(</span>string<span class="hl sym">-</span>downcase <span class="hl sym">(</span>string test<span class="hl sym">-</span>a<span class="hl sym">))</span>
                                          <span class="hl sym">,(</span>string<span class="hl sym">-</span>downcase <span class="hl sym">(</span>string test<span class="hl sym">-</span>b<span class="hl sym">))</span>
                                          <span class="hl sym">(</span>string<span class="hl sym">-</span>downcase
                                           <span class="hl sym">(</span>string <span class="hl sym">(</span>complement<span class="hl sym">-</span>color <span class="hl sym">',</span>test<span class="hl sym">-</span>a
                                                                     <span class="hl sym">',</span>test<span class="hl sym">-</span>b<span class="hl sym">))))))))))</span>

<span class="hl sym">(</span>defun<span class="hl sym">/</span>fast spell<span class="hl sym">-</span>number <span class="hl sym">((</span>number fixnum<span class="hl sym">))</span>
  <span class="hl sym">(</span>with<span class="hl sym">-</span>output<span class="hl sym">-</span>to<span class="hl sym">-</span>string <span class="hl sym">(</span>result<span class="hl sym">-</span>string<span class="hl sym">)</span>
    <span class="hl sym">(</span>loop
       <span class="hl sym">:</span>for char <span class="hl sym">:</span>across <span class="hl sym">(</span>the simple<span class="hl sym">-</span>string <span class="hl sym">(</span>format nil <span class="hl str">&quot;~a&quot;</span> number<span class="hl sym">))</span>
       <span class="hl sym">:</span>do <span class="hl sym">(</span>format result<span class="hl sym">-</span>string <span class="hl str">&quot; ~r&quot;</span> <span class="hl sym">(- (</span>char<span class="hl sym">-</span>code char<span class="hl sym">) (</span>char<span class="hl sym">-</span>code #\<span class="hl num">0</span><span class="hl sym">))))))</span>

<span class="hl sym">(</span>defmacro with<span class="hl sym">-</span>threads<span class="hl sym">-</span>pool <span class="hl sym">((</span>thread<span class="hl sym">-</span>maker <span class="hl sym">&amp;</span>rest colors<span class="hl sym">) &amp;</span>body body<span class="hl sym">)</span>
  <span class="hl sym">`(</span>let <span class="hl sym">(</span>threads<span class="hl sym">)</span>
     <span class="hl sym">(</span>declare <span class="hl sym">(</span>type list threads<span class="hl sym">))</span>
     <span class="hl sym">(</span>unwind<span class="hl sym">-</span>protect
          <span class="hl sym">(</span>progn <span class="hl sym">,</span>&#64;<span class="hl sym">(</span>loop
                      <span class="hl sym">:</span>for color <span class="hl sym">:</span>in colors
                      <span class="hl sym">:</span>for thread<span class="hl sym">-</span>index <span class="hl sym">:</span>from <span class="hl num">0</span>
                      <span class="hl sym">:</span>collect <span class="hl sym">`(</span>push <span class="hl sym">(</span>sb<span class="hl sym">-</span>thread<span class="hl sym">:</span>make<span class="hl sym">-</span>thread
                                       <span class="hl sym">(,</span>thread<span class="hl sym">-</span>maker <span class="hl sym">,</span>thread<span class="hl sym">-</span>index <span class="hl sym">',</span>color<span class="hl sym">)</span>
                                       <span class="hl sym">:</span>name <span class="hl sym">,(</span>format nil <span class="hl str">&quot;chameneos-worker-~a-~a&quot;</span>
                                                      thread<span class="hl sym">-</span>index
                                                      <span class="hl sym">(</span>string<span class="hl sym">-</span>downcase <span class="hl sym">(</span>string color<span class="hl sym">))))</span>
                                      threads<span class="hl sym">))</span>
                 <span class="hl sym">,</span>&#64;body<span class="hl sym">)</span>
       <span class="hl sym">(</span>loop
          <span class="hl sym">:</span>for thread <span class="hl sym">:</span>in threads
          <span class="hl sym">:</span>do <span class="hl sym">(</span>sb<span class="hl sym">-</span>thread<span class="hl sym">:</span>join<span class="hl sym">-</span>thread thread<span class="hl sym">)))</span>
     nil<span class="hl sym">))</span>

<span class="hl sym">(</span>defmacro spin<span class="hl sym">-</span>wait <span class="hl sym">(</span>condition<span class="hl sym">)</span>
  <span class="hl sym">`(</span>loop
      <span class="hl sym">:</span>repeat <span class="hl num">16384</span>
      <span class="hl sym">:</span>do <span class="hl sym">(</span>when <span class="hl sym">,</span>condition
            <span class="hl sym">(</span>return<span class="hl sym">))</span>
      <span class="hl sym">:</span>finally <span class="hl sym">(</span>loop <span class="hl sym">:</span>until <span class="hl sym">,</span>condition <span class="hl sym">:</span>do <span class="hl sym">(</span>sb<span class="hl sym">-</span>thread<span class="hl sym">:</span>thread<span class="hl sym">-</span>yield<span class="hl sym">))))</span>

#<span class="hl sym">+</span>x86<span class="hl sym">-</span><span class="hl num">64</span>
<span class="hl sym">(</span>defstruct atomic
  <span class="hl sym">(</span>counter <span class="hl num">0</span> <span class="hl sym">:</span>type <span class="hl sym">(</span>unsigned<span class="hl sym">-</span>byte <span class="hl num">64</span><span class="hl sym">)))</span>
#<span class="hl sym">+</span>x86
<span class="hl sym">(</span>defstruct atomic
  <span class="hl sym">(</span>counter <span class="hl num">0</span> <span class="hl sym">:</span>type <span class="hl sym">(</span>unsigned<span class="hl sym">-</span>byte <span class="hl num">32</span><span class="hl sym">)))</span>

<span class="hl sym">(</span>defmacro defgame <span class="hl sym">(</span>game<span class="hl sym">-</span>name <span class="hl sym">(</span>count <span class="hl sym">&amp;</span>rest colors<span class="hl sym">))</span>
  <span class="hl sym">(</span>let<span class="hl sym">* ((</span>colors<span class="hl sym">-</span>count <span class="hl sym">(</span>length colors<span class="hl sym">))</span>
         <span class="hl sym">(</span>colors<span class="hl sym">-</span>type <span class="hl sym">`(</span>integer <span class="hl num">0</span> <span class="hl sym">,</span>colors<span class="hl sym">-</span>count<span class="hl sym">)))</span>
    <span class="hl sym">`(</span>defun<span class="hl sym">/</span>fast <span class="hl sym">,</span>game<span class="hl sym">-</span>name <span class="hl sym">((,</span>count fixnum<span class="hl sym">))</span>
       <span class="hl sym">(</span>format t <span class="hl sym">,(</span>format nil <span class="hl str">&quot;~{ ~a~}~~%&quot;</span>
                          <span class="hl sym">(</span>loop <span class="hl sym">:</span>for color <span class="hl sym">:</span>in colors
                             <span class="hl sym">:</span>collect <span class="hl sym">(</span>string<span class="hl sym">-</span>downcase <span class="hl sym">(</span>string color<span class="hl sym">)))))</span>
       <span class="hl sym">(</span>let <span class="hl sym">((</span>meet<span class="hl sym">-</span>counts <span class="hl sym">(</span>make<span class="hl sym">-</span>array <span class="hl sym">,</span>colors<span class="hl sym">-</span>count
                                      <span class="hl sym">:</span>element<span class="hl sym">-</span>type <span class="hl sym">'</span>fixnum <span class="hl sym">:</span>initial<span class="hl sym">-</span>element <span class="hl num">0</span><span class="hl sym">))</span>
             <span class="hl sym">(</span>same<span class="hl sym">-</span>counts <span class="hl sym">(</span>make<span class="hl sym">-</span>array <span class="hl sym">,</span>colors<span class="hl sym">-</span>count
                                      <span class="hl sym">:</span>element<span class="hl sym">-</span>type <span class="hl sym">'</span>fixnum <span class="hl sym">:</span>initial<span class="hl sym">-</span>element <span class="hl num">0</span><span class="hl sym">))</span>
             <span class="hl sym">(</span>action<span class="hl sym">-</span>cas <span class="hl sym">(</span>list #<span class="hl sym">'</span>identity<span class="hl sym">))</span>
             <span class="hl sym">(</span>counter <span class="hl sym">(</span>make<span class="hl sym">-</span>atomic<span class="hl sym">)))</span>
         <span class="hl sym">(</span>declare <span class="hl sym">(</span>type <span class="hl sym">(</span>simple<span class="hl sym">-</span>array fixnum <span class="hl sym">(,</span>colors<span class="hl sym">-</span>count<span class="hl sym">))</span> meet<span class="hl sym">-</span>counts same<span class="hl sym">-</span>counts<span class="hl sym">)</span>
                  <span class="hl sym">(</span>type cons action<span class="hl sym">-</span>cas<span class="hl sym">)</span>
                  <span class="hl sym">(</span>type atomic counter<span class="hl sym">))</span>
         <span class="hl sym">(</span>labels <span class="hl sym">((</span>incf<span class="hl sym">-</span>counter <span class="hl sym">()</span>
                    <span class="hl sym">(</span>sb<span class="hl sym">-</span>ext<span class="hl sym">:</span>atomic<span class="hl sym">-</span>incf <span class="hl sym">(</span>atomic<span class="hl sym">-</span>counter counter<span class="hl sym">)))</span>
                  <span class="hl sym">(</span>in<span class="hl sym">-</span>progress <span class="hl sym">()</span>
                     <span class="hl sym">(&lt; (</span>the fixnum <span class="hl sym">(</span>atomic<span class="hl sym">-</span>counter counter<span class="hl sym">)) ,</span>count<span class="hl sym">))</span>
                  <span class="hl sym">(</span>color<span class="hl sym">-</span>worker <span class="hl sym">(</span>id color<span class="hl sym">)</span>
                    <span class="hl sym">(</span>declare <span class="hl sym">(</span>type <span class="hl sym">,</span>colors<span class="hl sym">-</span>type id<span class="hl sym">) (</span>type symbol color<span class="hl sym">))</span>
                    <span class="hl sym">(</span>lambda <span class="hl sym">()</span>
                      <span class="hl sym">(</span>let <span class="hl sym">((</span>meet<span class="hl sym">-</span>wait nil<span class="hl sym">))</span>
                        <span class="hl sym">(</span>declare <span class="hl sym">(</span>type boolean meet<span class="hl sym">-</span>wait<span class="hl sym">))</span>
                        <span class="hl sym">(</span>labels <span class="hl sym">((</span>clear<span class="hl sym">-</span>meet<span class="hl sym">-</span>wait <span class="hl sym">()</span>
                                   <span class="hl sym">(</span>setf meet<span class="hl sym">-</span>wait t<span class="hl sym">))</span>
                                 <span class="hl sym">(</span>promise <span class="hl sym">(</span>second<span class="hl sym">-</span>color<span class="hl sym">)</span>
                                   <span class="hl sym">(</span>setf color <span class="hl sym">(</span>complement<span class="hl sym">-</span>color color second<span class="hl sym">-</span>color<span class="hl sym">))</span>
                                   <span class="hl sym">(</span>values id color #<span class="hl sym">'</span>clear<span class="hl sym">-</span>meet<span class="hl sym">-</span>wait<span class="hl sym">)))</span>
                          <span class="hl sym">(</span>loop
                             <span class="hl sym">:</span>while <span class="hl sym">(</span>in<span class="hl sym">-</span>progress<span class="hl sym">)</span>
                             <span class="hl sym">:</span>do <span class="hl sym">(</span>let <span class="hl sym">((</span>action <span class="hl sym">(</span>car action<span class="hl sym">-</span>cas<span class="hl sym">)))</span>
                                   <span class="hl sym">(</span>declare <span class="hl sym">(</span>type function action<span class="hl sym">))</span>
                                   <span class="hl sym">(</span>if <span class="hl sym">(</span>eq action #<span class="hl sym">'</span>identity<span class="hl sym">)</span>
                                       <span class="hl sym">(</span>when <span class="hl sym">(</span>eq <span class="hl sym">(</span>sb<span class="hl sym">-</span>ext<span class="hl sym">:</span>compare<span class="hl sym">-</span>and<span class="hl sym">-</span>swap <span class="hl sym">(</span>car action<span class="hl sym">-</span>cas<span class="hl sym">)</span>
                                                                          action
                                                                          #<span class="hl sym">'</span>promise<span class="hl sym">)</span>
                                                 action<span class="hl sym">)</span>
                                         <span class="hl sym">(</span>spin<span class="hl sym">-</span>wait <span class="hl sym">(</span>or <span class="hl sym">(</span>not <span class="hl sym">(</span>in<span class="hl sym">-</span>progress<span class="hl sym">))</span> meet<span class="hl sym">-</span>wait<span class="hl sym">))</span>
                                         <span class="hl sym">(</span>setf meet<span class="hl sym">-</span>wait nil<span class="hl sym">))</span>
                                       <span class="hl sym">(</span>when <span class="hl sym">(</span>eq <span class="hl sym">(</span>sb<span class="hl sym">-</span>ext<span class="hl sym">:</span>compare<span class="hl sym">-</span>and<span class="hl sym">-</span>swap <span class="hl sym">(</span>car action<span class="hl sym">-</span>cas<span class="hl sym">)</span>
                                                                          action
                                                                          #<span class="hl sym">'</span>identity<span class="hl sym">)</span>
                                                 action<span class="hl sym">)</span>
                                         <span class="hl sym">(</span>multiple<span class="hl sym">-</span>value<span class="hl sym">-</span>bind <span class="hl sym">(</span>second<span class="hl sym">-</span>id
                                                               second<span class="hl sym">-</span>color
                                                               break<span class="hl sym">-</span>spin<span class="hl sym">-</span>wait<span class="hl sym">)</span>
                                             <span class="hl sym">(</span>funcall action color<span class="hl sym">)</span>
                                           <span class="hl sym">(</span>declare <span class="hl sym">(</span>type <span class="hl sym">,</span>colors<span class="hl sym">-</span>type second<span class="hl sym">-</span>id<span class="hl sym">)</span>
                                                    <span class="hl sym">(</span>type symbol second<span class="hl sym">-</span>color<span class="hl sym">)</span>
                                                    <span class="hl sym">(</span>type function break<span class="hl sym">-</span>spin<span class="hl sym">-</span>wait<span class="hl sym">))</span>
                                           <span class="hl sym">(</span>setf color second<span class="hl sym">-</span>color<span class="hl sym">)</span>
                                           <span class="hl sym">(</span>when <span class="hl sym">(</span>in<span class="hl sym">-</span>progress<span class="hl sym">)</span>
                                             <span class="hl sym">(</span>when <span class="hl sym">(=</span> id second<span class="hl sym">-</span>id<span class="hl sym">)</span>
                                               <span class="hl sym">(</span>incf <span class="hl sym">(</span>elt same<span class="hl sym">-</span>counts id<span class="hl sym">))</span>
                                               <span class="hl sym">(</span>incf <span class="hl sym">(</span>elt same<span class="hl sym">-</span>counts second<span class="hl sym">-</span>id<span class="hl sym">)))</span>
                                             <span class="hl sym">(</span>incf <span class="hl sym">(</span>elt meet<span class="hl sym">-</span>counts id<span class="hl sym">))</span>
                                             <span class="hl sym">(</span>incf <span class="hl sym">(</span>elt meet<span class="hl sym">-</span>counts second<span class="hl sym">-</span>id<span class="hl sym">))</span>
                                             <span class="hl sym">(</span>incf<span class="hl sym">-</span>counter<span class="hl sym">))</span>
                                           <span class="hl sym">(</span>funcall break<span class="hl sym">-</span>spin<span class="hl sym">-</span>wait<span class="hl sym">)))))))))))</span>
           <span class="hl sym">(</span>with<span class="hl sym">-</span>threads<span class="hl sym">-</span>pool <span class="hl sym">(</span>color<span class="hl sym">-</span>worker <span class="hl sym">,</span>&#64;colors<span class="hl sym">)</span>
             nil<span class="hl sym">)</span>
           <span class="hl sym">(</span>loop
              <span class="hl sym">:</span>for i <span class="hl sym">:</span>from <span class="hl num">0</span> <span class="hl sym">:</span>below <span class="hl sym">,</span>colors<span class="hl sym">-</span>count
              <span class="hl sym">:</span>summing <span class="hl sym">(</span>elt meet<span class="hl sym">-</span>counts i<span class="hl sym">) :</span>into total <span class="hl sym">:</span>of<span class="hl sym">-</span>type fixnum
              <span class="hl sym">:</span>do <span class="hl sym">(</span>format t <span class="hl str">&quot;~a~a~%&quot;</span> <span class="hl sym">(</span>elt meet<span class="hl sym">-</span>counts i<span class="hl sym">) (</span>spell<span class="hl sym">-</span>number <span class="hl sym">(</span>elt same<span class="hl sym">-</span>counts i<span class="hl sym">)))</span>
              <span class="hl sym">:</span>finally <span class="hl sym">(</span>format t <span class="hl str">&quot;~a~%~%&quot;</span> <span class="hl sym">(</span>spell<span class="hl sym">-</span>number total<span class="hl sym">))))))))</span>

<span class="hl slc">;;</span>
<span class="hl slc">;; Game contents</span>
<span class="hl slc">;;</span>

<span class="hl sym">(</span>progn
  <span class="hl sym">(</span>declare<span class="hl sym">-</span>colors<span class="hl sym">-</span>map
   <span class="hl sym">(</span>blue <span class="hl sym">+</span> blue <span class="hl sym">-&gt;</span> blue<span class="hl sym">)</span>
   <span class="hl sym">(</span>blue <span class="hl sym">+</span> red <span class="hl sym">-&gt;</span> yellow<span class="hl sym">)</span>
   <span class="hl sym">(</span>blue <span class="hl sym">+</span> yellow <span class="hl sym">-&gt;</span> red<span class="hl sym">)</span>
   <span class="hl sym">(</span>red <span class="hl sym">+</span> blue <span class="hl sym">-&gt;</span> yellow<span class="hl sym">)</span>
   <span class="hl sym">(</span>red <span class="hl sym">+</span> red <span class="hl sym">-&gt;</span> red<span class="hl sym">)</span>
   <span class="hl sym">(</span>red <span class="hl sym">+</span> yellow <span class="hl sym">-&gt;</span> blue<span class="hl sym">)</span>
   <span class="hl sym">(</span>yellow <span class="hl sym">+</span> blue <span class="hl sym">-&gt;</span> red<span class="hl sym">)</span>
   <span class="hl sym">(</span>yellow <span class="hl sym">+</span> red <span class="hl sym">-&gt;</span> blue<span class="hl sym">)</span>
   <span class="hl sym">(</span>yellow <span class="hl sym">+</span> yellow <span class="hl sym">-&gt;</span> yellow<span class="hl sym">))</span>

  <span class="hl sym">(</span>defgame game<span class="hl sym">-</span>a <span class="hl sym">(</span>count blue red yellow<span class="hl sym">))</span>
  <span class="hl sym">(</span>defgame game<span class="hl sym">-</span>b <span class="hl sym">(</span>count blue red yellow red yellow blue red yellow red blue<span class="hl sym">))</span>

  <span class="hl sym">(</span>defun main <span class="hl sym">(&amp;</span>optional force<span class="hl sym">-</span>count<span class="hl sym">)</span>
    <span class="hl sym">(</span>let<span class="hl sym">* ((</span>args <span class="hl sym">(</span>cdr sb<span class="hl sym">-</span>ext<span class="hl sym">:*</span>posix<span class="hl sym">-</span>argv<span class="hl sym">*))</span>
           <span class="hl sym">(</span>count <span class="hl sym">(</span>or force<span class="hl sym">-</span>count <span class="hl sym">(</span>if args <span class="hl sym">(</span>parse<span class="hl sym">-</span>integer <span class="hl sym">(</span>car args<span class="hl sym">))</span> <span class="hl num">600</span><span class="hl sym">))))</span>
      <span class="hl sym">(</span>print<span class="hl sym">-</span>colors<span class="hl sym">)</span>
      <span class="hl sym">(</span>game<span class="hl sym">-</span>a count<span class="hl sym">)</span>
      <span class="hl sym">(</span>game<span class="hl sym">-</span>b count<span class="hl sym">))))</span>

<span class="hl sym">(</span>in<span class="hl sym">-</span>package <span class="hl sym">:</span>cl<span class="hl sym">-</span>user<span class="hl sym">)</span>

<span class="hl sym">(</span>defun main <span class="hl sym">()</span>
  <span class="hl sym">(</span>chameneos<span class="hl sym">-</span>redux<span class="hl sym">::</span>main<span class="hl sym">))</span>

