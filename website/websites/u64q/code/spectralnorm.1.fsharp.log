
Tue, 09 Sep 2008 01:51:21 GMT

MAKE:
mv spectralnorm.fsharp spectralnorm.fs
/usr/local/bin/mono /usr/local/src/FSharp-1.9.6.2/bin/fsc.exe -r FSharp.PowerPack.dll --platform x86 -O  -o spectralnorm.fsharp_run.exe spectralnorm.fs
Microsoft F# Compiler, (c) Microsoft Corporation, All Rights Reserved
F# Version 1.9.6.2, compiling for .NET Framework Version v2.0.50727

spectralnorm.fs(13,5): warning FS0062: This construct is for compatibility with OCaml. The expression form 'expr.(expr)' is for use when OCaml compatibility is enabled. In F# code you may use 'expr.[expr]'. A type annotation may be required to indicate the first expression is an array. This warning can be disabled using '--mlcompatibility', '--nowarn 62' or '#nowarn "62"'

spectralnorm.fs(15,9): warning FS0062: This construct is for compatibility with OCaml. The expression form 'expr.(expr)' is for use when OCaml compatibility is enabled. In F# code you may use 'expr.[expr]'. A type annotation may be required to indicate the first expression is an array. This warning can be disabled using '--mlcompatibility', '--nowarn 62' or '#nowarn "62"'

spectralnorm.fs(15,18): warning FS0062: This construct is for compatibility with OCaml. The expression form 'expr.(expr)' is for use when OCaml compatibility is enabled. In F# code you may use 'expr.[expr]'. A type annotation may be required to indicate the first expression is an array. This warning can be disabled using '--mlcompatibility', '--nowarn 62' or '#nowarn "62"'

spectralnorm.fs(15,39): warning FS0062: This construct is for compatibility with OCaml. The expression form 'expr.(expr)' is for use when OCaml compatibility is enabled. In F# code you may use 'expr.[expr]'. A type annotation may be required to indicate the first expression is an array. This warning can be disabled using '--mlcompatibility', '--nowarn 62' or '#nowarn "62"'

spectralnorm.fs(20,5): warning FS0062: This construct is for compatibility with OCaml. The expression form 'expr.(expr)' is for use when OCaml compatibility is enabled. In F# code you may use 'expr.[expr]'. A type annotation may be required to indicate the first expression is an array. This warning can be disabled using '--mlcompatibility', '--nowarn 62' or '#nowarn "62"'

spectralnorm.fs(22,9): warning FS0062: This construct is for compatibility with OCaml. The expression form 'expr.(expr)' is for use when OCaml compatibility is enabled. In F# code you may use 'expr.[expr]'. A type annotation may be required to indicate the first expression is an array. This warning can be disabled using '--mlcompatibility', '--nowarn 62' or '#nowarn "62"'

spectralnorm.fs(22,18): warning FS0062: This construct is for compatibility with OCaml. The expression form 'expr.(expr)' is for use when OCaml compatibility is enabled. In F# code you may use 'expr.[expr]'. A type annotation may be required to indicate the first expression is an array. This warning can be disabled using '--mlcompatibility', '--nowarn 62' or '#nowarn "62"'

spectralnorm.fs(22,39): warning FS0062: This construct is for compatibility with OCaml. The expression form 'expr.(expr)' is for use when OCaml compatibility is enabled. In F# code you may use 'expr.[expr]'. A type annotation may be required to indicate the first expression is an array. This warning can be disabled using '--mlcompatibility', '--nowarn 62' or '#nowarn "62"'

spectralnorm.fs(41,16): warning FS0062: This construct is for compatibility with OCaml. The expression form 'expr.(expr)' is for use when OCaml compatibility is enabled. In F# code you may use 'expr.[expr]'. A type annotation may be required to indicate the first expression is an array. This warning can be disabled using '--mlcompatibility', '--nowarn 62' or '#nowarn "62"'

spectralnorm.fs(41,24): warning FS0062: This construct is for compatibility with OCaml. The expression form 'expr.(expr)' is for use when OCaml compatibility is enabled. In F# code you may use 'expr.[expr]'. A type annotation may be required to indicate the first expression is an array. This warning can be disabled using '--mlcompatibility', '--nowarn 62' or '#nowarn "62"'

spectralnorm.fs(42,18): warning FS0062: This construct is for compatibility with OCaml. The expression form 'expr.(expr)' is for use when OCaml compatibility is enabled. In F# code you may use 'expr.[expr]'. A type annotation may be required to indicate the first expression is an array. This warning can be disabled using '--mlcompatibility', '--nowarn 62' or '#nowarn "62"'

spectralnorm.fs(42,26): warning FS0062: This construct is for compatibility with OCaml. The expression form 'expr.(expr)' is for use when OCaml compatibility is enabled. In F# code you may use 'expr.[expr]'. A type annotation may be required to indicate the first expression is an array. This warning can be disabled using '--mlcompatibility', '--nowarn 62' or '#nowarn "62"'

spectralnorm.fs(13,5): warning FS0062: This construct is for compatibility with OCaml. Consider using 'arr.[idx] <- v' instead. This warning can be disabled using '--mlcompatibility', '--nowarn 62' or '#nowarn "62"'

spectralnorm.fs(15,9): warning FS0062: This construct is for compatibility with OCaml. Consider using 'arr.[idx] <- v' instead. This warning can be disabled using '--mlcompatibility', '--nowarn 62' or '#nowarn "62"'

spectralnorm.fs(15,18): warning FS0062: This construct is for compatibility with OCaml. Consider using 'arr.[idx]' instead. This warning can be disabled using '--mlcompatibility', '--nowarn 62' or '#nowarn "62"'

spectralnorm.fs(15,39): warning FS0062: This construct is for compatibility with OCaml. Consider using 'arr.[idx]' instead. This warning can be disabled using '--mlcompatibility', '--nowarn 62' or '#nowarn "62"'

spectralnorm.fs(18,11): error FS0003: This value is not a function and cannot be applied

spectralnorm.fs(20,5): warning FS0062: This construct is for compatibility with OCaml. Consider using 'arr.[idx] <- v' instead. This warning can be disabled using '--mlcompatibility', '--nowarn 62' or '#nowarn "62"'

spectralnorm.fs(22,9): warning FS0062: This construct is for compatibility with OCaml. Consider using 'arr.[idx] <- v' instead. This warning can be disabled using '--mlcompatibility', '--nowarn 62' or '#nowarn "62"'

spectralnorm.fs(22,18): warning FS0062: This construct is for compatibility with OCaml. Consider using 'arr.[idx]' instead. This warning can be disabled using '--mlcompatibility', '--nowarn 62' or '#nowarn "62"'

spectralnorm.fs(22,39): warning FS0062: This construct is for compatibility with OCaml. Consider using 'arr.[idx]' instead. This warning can be disabled using '--mlcompatibility', '--nowarn 62' or '#nowarn "62"'

spectralnorm.fs(31,15): warning FS0062: This construct is for compatibility with OCaml. Consider using the overloaded operator 'int' instead. This warning can be disabled using '--mlcompatibility', '--nowarn 62' or '#nowarn "62"'

spectralnorm.fs(41,16): warning FS0062: This construct is for compatibility with OCaml. Consider using 'arr.[idx]' instead. This warning can be disabled using '--mlcompatibility', '--nowarn 62' or '#nowarn "62"'

spectralnorm.fs(41,24): warning FS0062: This construct is for compatibility with OCaml. Consider using 'arr.[idx]' instead. This warning can be disabled using '--mlcompatibility', '--nowarn 62' or '#nowarn "62"'

spectralnorm.fs(42,18): warning FS0062: This construct is for compatibility with OCaml. Consider using 'arr.[idx]' instead. This warning can be disabled using '--mlcompatibility', '--nowarn 62' or '#nowarn "62"'

spectralnorm.fs(42,26): warning FS0062: This construct is for compatibility with OCaml. Consider using 'arr.[idx]' instead. This warning can be disabled using '--mlcompatibility', '--nowarn 62' or '#nowarn "62"'
make: [spectralnorm.fsharp_run] Error 1 (ignored)
rm spectralnorm.fs

COMMAND LINE:
/usr/local/bin/mono spectralnorm.fsharp_run.exe 500

PROGRAM FAILED 


PROGRAM OUTPUT:

Cannot open assembly 'spectralnorm.fsharp_run.exe': No such file or directory.
