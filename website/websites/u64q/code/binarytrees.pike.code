<source>
<def></def><com>/* The Computer Language Shootout</com><br />
<com> * http://shootout.alioth.debian.org/</com><br />
<com> * contributed by  Robert Brandner</com><br />
<com> * based on the Java version by Jarkko Miettinen</com><br />
<com> */</com><def></def><br />
<br />
<kwb>int</kwb> <def></def><kwd>main</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>argc</def><sym>,</sym> <def></def><kwb>array</kwb><def></def><sym>(</sym><def></def><kwb>string</kwb><def></def><sym>)</sym> <def>argv</def><sym>) {</sym><br />
<def></def><br />
	<kwb>int</kwb> <def>minDepth</def> <sym>=</sym> <def></def><num>4</num><def></def><sym>;</sym><br />
<def></def><br />
	<kwb>int</kwb> <def>n</def> <sym>=</sym> <def>argc</def> <sym>&gt;</sym> <def></def><num>1</num> <def>?</def> <sym>(</sym><def></def><kwb>int</kwb><def></def><sym>)</sym><def>argv</def><sym>[</sym><def></def><num>1</num><def></def><sym>] :</sym> <def></def><num>10</num><def></def><sym>;</sym><br />
<def></def><br />
	<kwb>int</kwb> <def>maxDepth</def> <sym>= (</sym><def>minDepth</def> <sym>+</sym> <def></def><num>2</num> <def></def><sym>&gt;</sym> <def>n</def><sym>)</sym> <def>? minDepth</def> <sym>+</sym> <def></def><num>2</num> <def></def><sym>:</sym> <def>n</def><sym>;</sym><br />
<def></def>	<kwb>int</kwb> <def>stretchDepth</def> <sym>=</sym> <def>maxDepth</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def><br />
	<kwa>write</kwa><def></def><sym>(</sym><def></def><str>&quot;stretch tree of depth &quot;</str><def></def> <sym>+</sym> <def>stretchDepth</def> <sym>+</sym> <def></def><str>&quot;</str><esc>\t</esc> <str>check: &quot;</str><def></def> <sym>+</sym> <def></def><kwd>itemCheck</kwd><def></def><sym>(</sym><def></def><kwd>bottomUpTree</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym><def>stretchDepth</def><sym>)) +</sym> <def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>);</sym><br />
<def><br />
	TreeNode longLivedTree</def> <sym>=</sym> <def></def><kwd>bottomUpTree</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym><def>maxDepth</def><sym>);</sym><br />
<def></def><br />
	<kwd>for</kwd> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>depth</def><sym>=</sym><def>minDepth</def><sym>;</sym> <def>depth</def><sym>&lt;=</sym><def>maxDepth</def><sym>;</sym> <def>depth</def><sym>+=</sym><def></def><num>2</num><def></def><sym>){</sym><br />
<def></def>		<kwb>int</kwb> <def>iterations</def> <sym>=</sym> <def></def><num>1</num> <def></def><sym>&lt;&lt; (</sym><def>maxDepth</def> <sym>-</sym> <def>depth</def> <sym>+</sym> <def>minDepth</def><sym>);</sym><br />
<def></def>		<kwb>int</kwb> <def>check</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>		<kwd>for</kwd> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def><sym>=</sym><def></def><num>1</num><def></def><sym>;</sym> <def>i</def><sym>&lt;=</sym><def>iterations</def><sym>;</sym> <def>i</def><sym>++){</sym><br />
<def>			check</def> <sym>+=</sym> <def></def><kwd>itemCheck</kwd><def></def><sym>(</sym><def></def><kwd>bottomUpTree</kwd><def></def><sym>(</sym><def>i</def><sym>,</sym><def>depth</def><sym>));</sym><br />
<def>			check</def> <sym>+=</sym> <def></def><kwd>itemCheck</kwd><def></def><sym>(</sym><def></def><kwd>bottomUpTree</kwd><def></def><sym>(-</sym><def>i</def><sym>,</sym><def>depth</def><sym>));</sym><br />
<def></def>		<sym>}</sym><br />
<def></def>		<kwa>write</kwa><def></def><sym>((</sym><def>iterations</def><sym>*</sym><def></def><num>2</num><def></def><sym>) +</sym> <def></def><str>&quot;</str><esc>\t</esc> <str>trees of depth &quot;</str><def></def> <sym>+</sym> <def>depth</def> <sym>+</sym> <def></def><str>&quot;</str><esc>\t</esc> <str>check: &quot;</str><def></def> <sym>+</sym> <def>check</def><sym>+</sym><def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>);</sym><br />
<def></def>	<sym>}</sym><br />
<def></def>	<kwa>write</kwa><def></def><sym>(</sym><def></def><str>&quot;long lived tree of depth &quot;</str><def></def> <sym>+</sym> <def>maxDepth</def> <sym>+</sym> <def></def><str>&quot;</str><esc>\t</esc> <str>check: &quot;</str><def></def><sym>+</sym> <def></def><kwd>itemCheck</kwd><def></def><sym>(</sym><def>longLivedTree</def><sym>)+</sym><def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>);</sym><br />
<def></def><sym>}</sym><br />
<def><br />
TreeNode</def> <kwd>bottomUpTree</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>item</def><sym>,</sym> <def></def><kwb>int</kwb> <def>depth</def><sym>) {</sym><br />
<def></def>	<kwd>if</kwd> <def></def><sym>(</sym><def>depth</def><sym>&gt;</sym><def></def><num>0</num><def></def><sym>) {</sym><br />
<def>		return</def> <kwd>TreeNode</kwd><def></def><sym>(</sym><def>item</def><sym>,</sym> <def></def><kwd>bottomUpTree</kwd><def></def><sym>(</sym><def></def><num>2</num><def></def><sym>*</sym><def>item</def><sym>-</sym><def></def><num>1</num><def></def><sym>,</sym> <def>depth</def><sym>-</sym><def></def><num>1</num><def></def><sym>),</sym> <def></def><kwd>bottomUpTree</kwd><def></def><sym>(</sym><def></def><num>2</num><def></def><sym>*</sym><def>item</def><sym>,</sym> <def>depth</def><sym>-</sym><def></def><num>1</num><def></def><sym>));</sym><br />
<def></def>	<sym>}</sym><br />
<def>	else</def> <sym>{</sym><br />
<def>		return</def> <kwd>TreeNode</kwd><def></def><sym>(</sym><def>item</def><sym>);</sym><br />
<def></def>	<sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>int</kwb> <def></def><kwd>itemCheck</kwd><def></def><sym>(</sym><def>TreeNode t</def><sym>) {</sym><br />
<def></def>	<kwd>if</kwd> <def></def><sym>(</sym><def>t</def><sym>-&gt;</sym><def>left</def><sym>==</sym><def></def><num>0</num><def></def><sym>) {</sym><def>return t</def><sym>-&gt;</sym><def>item</def><sym>;}</sym><br />
<def>	else</def> <sym>{</sym><def>return t</def><sym>-&gt;</sym><def>item</def> <sym>+</sym> <def></def><kwd>itemCheck</kwd><def></def><sym>(</sym><def>t</def><sym>-&gt;</sym><def>left</def><sym>) -</sym> <def></def><kwd>itemCheck</kwd><def></def><sym>(</sym><def>t</def><sym>-&gt;</sym><def>right</def><sym>);}</sym><br />
<def></def><sym>}</sym><br />
<def><br />
class TreeNode</def> <sym>{</sym><br />
<def>	TreeNode left</def><sym>,</sym> <def>right</def><sym>;</sym><br />
<def></def>	<kwb>int</kwb> <def>item</def><sym>;</sym><br />
<def></def><br />
	<kwb>void</kwb> <def></def><kwd>create</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>it</def><sym>,</sym> <def>TreeNode</def><sym>|</sym><def></def><kwb>void</kwb> <def>l</def><sym>,</sym> <def>TreeNode</def><sym>|</sym><def></def><kwb>void</kwb> <def>r</def><sym>) {</sym><br />
<def>		item</def> <sym>=</sym> <def>it</def><sym>;</sym><br />
<def>		left</def> <sym>=</sym> <def>l</def><sym>;</sym><br />
<def>		right</def> <sym>=</sym> <def>r</def><sym>;</sym><br />
<def></def>	<sym>}</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
