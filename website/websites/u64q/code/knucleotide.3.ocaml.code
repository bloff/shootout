<span class="hl com">(* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by Troestler Christophe</span>
<span class="hl com"> * modified by Mauricio Fernandez</span>
<span class="hl com"> * optimized by Fabrice Le Fessant</span>
<span class="hl com"> *)</span>

<span class="hl kwa">let</span> tab <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>create <span class="hl num">256 0</span>
<span class="hl kwa">let</span> _ <span class="hl sym">=</span>
  tab<span class="hl sym">.(</span><span class="hl kwc">Char</span><span class="hl sym">.</span>code <span class="hl kwb">'A'</span><span class="hl sym">) &lt;-</span> <span class="hl num">0</span><span class="hl sym">;</span>
  tab<span class="hl sym">.(</span><span class="hl kwc">Char</span><span class="hl sym">.</span>code <span class="hl kwb">'a'</span><span class="hl sym">) &lt;-</span> <span class="hl num">0</span><span class="hl sym">;</span>
  tab<span class="hl sym">.(</span><span class="hl kwc">Char</span><span class="hl sym">.</span>code <span class="hl kwb">'T'</span><span class="hl sym">) &lt;-</span> <span class="hl num">1</span><span class="hl sym">;</span>
  tab<span class="hl sym">.(</span><span class="hl kwc">Char</span><span class="hl sym">.</span>code <span class="hl kwb">'t'</span><span class="hl sym">) &lt;-</span> <span class="hl num">1</span><span class="hl sym">;</span>
  tab<span class="hl sym">.(</span><span class="hl kwc">Char</span><span class="hl sym">.</span>code <span class="hl kwb">'C'</span><span class="hl sym">) &lt;-</span> <span class="hl num">2</span><span class="hl sym">;</span>
  tab<span class="hl sym">.(</span><span class="hl kwc">Char</span><span class="hl sym">.</span>code <span class="hl kwb">'c'</span><span class="hl sym">) &lt;-</span> <span class="hl num">2</span><span class="hl sym">;</span>
  tab<span class="hl sym">.(</span><span class="hl kwc">Char</span><span class="hl sym">.</span>code <span class="hl kwb">'g'</span><span class="hl sym">) &lt;-</span> <span class="hl num">3</span><span class="hl sym">;</span>
  tab<span class="hl sym">.(</span><span class="hl kwc">Char</span><span class="hl sym">.</span>code <span class="hl kwb">'G'</span><span class="hl sym">) &lt;-</span> <span class="hl num">3</span>

<span class="hl kwa">let</span> uppercase line <span class="hl sym">=</span>
  <span class="hl kwa">let</span> len <span class="hl sym">=</span> <span class="hl kwc">String</span><span class="hl sym">.</span>length line <span class="hl kwa">in</span>
    <span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> len<span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl kwa">do</span>
      <span class="hl kwa">let</span> c <span class="hl sym">=</span>  line<span class="hl sym">.[</span>i<span class="hl sym">]</span> <span class="hl kwa">in</span>
	line<span class="hl sym">.[</span>i<span class="hl sym">] &lt;-</span> <span class="hl kwc">Char</span><span class="hl sym">.</span>unsafe_chr tab<span class="hl sym">.(</span><span class="hl kwc">Char</span><span class="hl sym">.</span>code c<span class="hl sym">)</span>
    <span class="hl kwa">done</span>

    <span class="hl com">(* Extract DNA sequence &quot;THREE&quot; from stdin *)</span>
    <span class="hl kwa">let</span> dna <span class="hl sym">=</span>
      <span class="hl kwa">let</span> is_not_three s <span class="hl sym">=</span> <span class="hl kwc">String</span><span class="hl sym">.</span>length s <span class="hl sym">&lt;</span> <span class="hl num">6</span> <span class="hl sym">||</span> <span class="hl kwc">String</span><span class="hl sym">.</span>sub s <span class="hl num">0 6</span> <span class="hl sym">&lt;&gt;</span> <span class="hl str">&quot;&gt;THREE&quot;</span> <span class="hl kwa">in</span>
	<span class="hl kwa">while</span> is_not_three<span class="hl sym">(</span>input_line stdin<span class="hl sym">)</span> <span class="hl kwa">do</span> <span class="hl sym">()</span> <span class="hl kwa">done</span><span class="hl sym">;</span>
	<span class="hl kwa">let</span> buf <span class="hl sym">=</span> <span class="hl kwc">Buffer</span><span class="hl sym">.</span>create <span class="hl num">130000000</span> <span class="hl kwa">in</span>
	  <span class="hl com">(* Skip possible comment *)</span>
	  <span class="hl sym">(</span><span class="hl kwa">try</span>
	     <span class="hl kwa">while true do</span>
	       <span class="hl kwa">let</span> line <span class="hl sym">=</span> input_line stdin <span class="hl kwa">in</span>
		 <span class="hl kwa">if</span> line<span class="hl sym">.[</span><span class="hl num">0</span><span class="hl sym">] &lt;&gt;</span> '<span class="hl sym">;</span>' <span class="hl kwa">then begin</span>
		   uppercase line<span class="hl sym">;</span>
		   <span class="hl kwc">Buffer</span><span class="hl sym">.</span>add_string buf line<span class="hl sym">;</span>
		   raise <span class="hl kwd">Exit</span>
		 <span class="hl kwa">end</span>
	     <span class="hl kwa">done with</span> _ <span class="hl sym">-&gt; ());</span>
	  <span class="hl com">(* Read the DNA sequence *)</span>
	  <span class="hl sym">(</span><span class="hl kwa">try while true do</span>
	     <span class="hl kwa">let</span> line <span class="hl sym">=</span> input_line stdin <span class="hl kwa">in</span>
	       <span class="hl kwa">if</span> line<span class="hl sym">.[</span><span class="hl num">0</span><span class="hl sym">] =</span> '<span class="hl sym">&gt;</span>' <span class="hl kwa">then</span> raise <span class="hl kwd">End_of_file</span><span class="hl sym">;</span>
	       uppercase line<span class="hl sym">;</span>
	       <span class="hl kwc">Buffer</span><span class="hl sym">.</span>add_string buf line
	   <span class="hl kwa">done with</span> <span class="hl kwd">End_of_file</span> <span class="hl sym">-&gt; ());</span>
	  <span class="hl kwc">Buffer</span><span class="hl sym">.</span>contents buf


    <span class="hl kwa">module</span> <span class="hl kwd">K31</span> <span class="hl sym">=</span> <span class="hl kwa">struct</span>
      <span class="hl kwa">type</span> t <span class="hl sym">=</span> <span class="hl kwb">int</span>
      <span class="hl kwa">let</span> equal k1 k2 <span class="hl sym">=</span> k1 <span class="hl sym">=</span> k2
      <span class="hl kwa">let</span> hash n <span class="hl sym">=</span> n
    <span class="hl kwa">end</span>

    <span class="hl kwa">module</span> <span class="hl kwd">K32</span> <span class="hl sym">=</span> <span class="hl kwa">struct</span>
      <span class="hl kwa">type</span> t <span class="hl sym">=</span> <span class="hl kwb">int</span> <span class="hl sym">*</span> <span class="hl kwb">int</span>
      <span class="hl kwa">let</span> equal <span class="hl sym">(</span>a1<span class="hl sym">,</span>a2<span class="hl sym">) (</span>b1<span class="hl sym">,</span>b2<span class="hl sym">) =</span> a1 <span class="hl sym">=</span> b1 <span class="hl sym">&amp;&amp;</span> a2 <span class="hl sym">=</span> b2
      <span class="hl kwa">let</span> hash <span class="hl sym">(</span>a1<span class="hl sym">,</span> _<span class="hl sym">) =</span> a1
    <span class="hl kwa">end</span>

    <span class="hl kwa">type</span> entry <span class="hl sym">= {</span>
      <span class="hl kwa">mutable</span> count <span class="hl sym">:</span> <span class="hl kwb">int</span><span class="hl sym">;</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">let</span> c <span class="hl sym">=</span> <span class="hl num">0x40000</span> <span class="hl sym">-</span> <span class="hl num">1</span>
    <span class="hl kwa">module</span> <span class="hl kwd">H31</span> <span class="hl sym">=</span> <span class="hl kwc">Hashtbl</span><span class="hl sym">.</span><span class="hl kwd">Make</span><span class="hl sym">(</span><span class="hl kwd">K31</span><span class="hl sym">)</span>
    <span class="hl kwa">module</span> <span class="hl kwd">H32</span> <span class="hl sym">=</span> <span class="hl kwc">Hashtbl</span><span class="hl sym">.</span><span class="hl kwd">Make</span><span class="hl sym">(</span><span class="hl kwd">K32</span><span class="hl sym">)</span>
    <span class="hl kwa">let</span> h31 <span class="hl sym">=</span> <span class="hl kwc">H31</span><span class="hl sym">.</span>create c
    <span class="hl kwa">let</span> h32 <span class="hl sym">=</span> <span class="hl kwc">H32</span><span class="hl sym">.</span>create c

    <span class="hl kwa">let rec</span> pack_word n k h <span class="hl sym">=</span>
      <span class="hl kwa">let</span> b <span class="hl sym">=</span> <span class="hl kwc">Char</span><span class="hl sym">.</span>code dna<span class="hl sym">.[</span>n<span class="hl sym">]</span> <span class="hl kwa">in</span>
      <span class="hl kwa">let</span> h <span class="hl sym">=</span> h <span class="hl sym">*</span> <span class="hl num">4</span> <span class="hl sym">+</span> b <span class="hl kwa">in</span>
	<span class="hl kwa">if</span> k <span class="hl sym">&gt;</span> <span class="hl num">1</span> <span class="hl kwa">then</span>
	  pack_word <span class="hl sym">(</span>n<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) (</span>k<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span> h
	<span class="hl kwa">else</span> h

    <span class="hl kwa">let</span> pack31 k n <span class="hl sym">=</span>
      pack_word n k <span class="hl num">0</span>

    <span class="hl kwa">let</span> pack32 k n <span class="hl sym">=</span>
      <span class="hl kwa">let</span> h1 <span class="hl sym">=</span> pack_word n <span class="hl num">31 0</span> <span class="hl kwa">in</span>
      <span class="hl kwa">let</span> h2 <span class="hl sym">=</span> pack_word <span class="hl sym">(</span>n<span class="hl sym">+</span><span class="hl num">31</span><span class="hl sym">) (</span>k<span class="hl sym">-</span><span class="hl num">31</span><span class="hl sym">)</span> <span class="hl num">0</span> <span class="hl kwa">in</span>
	<span class="hl sym">(</span>h1<span class="hl sym">,</span> h2<span class="hl sym">)</span>

    <span class="hl kwa">let rec</span> pack_word_in dna n k h <span class="hl sym">=</span>
      <span class="hl kwa">let</span> b <span class="hl sym">=</span> dna<span class="hl sym">.[</span>n<span class="hl sym">]</span> <span class="hl kwa">in</span>
      <span class="hl kwa">let</span> b <span class="hl sym">=</span> tab<span class="hl sym">.(</span><span class="hl kwc">Char</span><span class="hl sym">.</span>code b<span class="hl sym">)</span> <span class="hl kwa">in</span>
      <span class="hl kwa">let</span> h <span class="hl sym">=</span> h <span class="hl sym">*</span> <span class="hl num">4</span> <span class="hl sym">+</span> b <span class="hl kwa">in</span>
	<span class="hl kwa">if</span> k <span class="hl sym">&gt;</span> <span class="hl num">1</span> <span class="hl kwa">then</span>
	  pack_word_in dna <span class="hl sym">(</span>n<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) (</span>k<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span> h
	<span class="hl kwa">else</span> h

    <span class="hl kwa">let</span> pack_key31 seq <span class="hl sym">=</span>
      <span class="hl kwa">let</span> k <span class="hl sym">=</span> <span class="hl kwc">String</span><span class="hl sym">.</span>length seq <span class="hl kwa">in</span>
	pack_word_in seq <span class="hl num">0</span> k <span class="hl num">0</span>

    <span class="hl kwa">let</span> pack_key32 seq <span class="hl sym">=</span>
      <span class="hl kwa">let</span> k <span class="hl sym">=</span> <span class="hl kwc">String</span><span class="hl sym">.</span>length seq <span class="hl kwa">in</span>
      <span class="hl kwa">let</span> h1 <span class="hl sym">=</span> pack_word_in seq <span class="hl num">0 31 0</span> <span class="hl kwa">in</span>
      <span class="hl kwa">let</span> h2 <span class="hl sym">=</span> pack_word_in seq <span class="hl num">31</span> <span class="hl sym">(</span>k<span class="hl sym">-</span><span class="hl num">31</span><span class="hl sym">)</span> <span class="hl num">0</span> <span class="hl kwa">in</span>
	<span class="hl sym">(</span>h1<span class="hl sym">,</span> h2<span class="hl sym">)</span>

    <span class="hl kwa">let</span> char <span class="hl sym">= [|</span> <span class="hl kwb">'A'</span><span class="hl sym">;</span> <span class="hl kwb">'T'</span><span class="hl sym">;</span> <span class="hl kwb">'C'</span><span class="hl sym">;</span> <span class="hl kwb">'G'</span> <span class="hl sym">|]</span>

    <span class="hl kwa">let rec</span> unpack h s pos k <span class="hl sym">=</span>
      <span class="hl kwa">let</span> pos <span class="hl sym">=</span> pos <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl kwa">in</span>
	s<span class="hl sym">.[</span>pos<span class="hl sym">] &lt;-</span> char<span class="hl sym">.(</span>h <span class="hl kwa">land</span> <span class="hl num">3</span><span class="hl sym">);</span>
	<span class="hl kwa">if</span> k <span class="hl sym">&gt;</span> <span class="hl num">1</span> <span class="hl kwa">then</span>
	  unpack <span class="hl sym">(</span>h <span class="hl kwa">lsr</span> <span class="hl num">2</span><span class="hl sym">)</span> s pos <span class="hl sym">(</span>k<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>

    <span class="hl kwa">let</span> unpack31 k h1 <span class="hl sym">=</span>
      <span class="hl kwa">let</span> s <span class="hl sym">=</span> <span class="hl kwc">String</span><span class="hl sym">.</span>create k <span class="hl kwa">in</span>
	unpack h1 s k k<span class="hl sym">;</span>
	s

    <span class="hl kwa">let</span> unpack32 k <span class="hl sym">(</span>h1<span class="hl sym">,</span> h2<span class="hl sym">) =</span>
      <span class="hl kwa">let</span> s <span class="hl sym">=</span> <span class="hl kwc">String</span><span class="hl sym">.</span>create k <span class="hl kwa">in</span>
	unpack h1 s <span class="hl num">31 31</span><span class="hl sym">;</span>
	unpack h2 s k <span class="hl sym">(</span>k<span class="hl sym">-</span><span class="hl num">31</span><span class="hl sym">);</span>
	s

    <span class="hl kwa">let</span> count31 k <span class="hl sym">=</span>
      <span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> <span class="hl kwc">String</span><span class="hl sym">.</span>length dna <span class="hl sym">-</span> k <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl kwa">do</span>
	<span class="hl kwa">let</span> packed <span class="hl sym">=</span> pack31 k i <span class="hl kwa">in</span>
	  <span class="hl kwa">try</span>
	    <span class="hl kwa">let</span> key <span class="hl sym">=</span> <span class="hl kwc">H31</span><span class="hl sym">.</span>find h31 packed <span class="hl kwa">in</span>
	      key<span class="hl sym">.</span>count <span class="hl sym">&lt;-</span> key<span class="hl sym">.</span>count <span class="hl sym">+</span> <span class="hl num">1</span>
	  <span class="hl kwa">with</span> <span class="hl kwd">Not_found</span> <span class="hl sym">-&gt;</span>
	    <span class="hl kwc">H31</span><span class="hl sym">.</span>add h31 packed <span class="hl sym">{</span> count <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">}</span>
      <span class="hl kwa">done</span>

    <span class="hl kwa">let</span> count32 k <span class="hl sym">=</span>
      <span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> <span class="hl kwc">String</span><span class="hl sym">.</span>length dna <span class="hl sym">-</span> k <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl kwa">do</span>
	<span class="hl kwa">let</span> packed <span class="hl sym">=</span> pack32 k i <span class="hl kwa">in</span>
	  <span class="hl kwa">try</span>
	    <span class="hl kwa">let</span> key <span class="hl sym">=</span> <span class="hl kwc">H32</span><span class="hl sym">.</span>find h32 packed <span class="hl kwa">in</span>
	      key<span class="hl sym">.</span>count <span class="hl sym">&lt;-</span> key<span class="hl sym">.</span>count <span class="hl sym">+</span> <span class="hl num">1</span>
	  <span class="hl kwa">with</span> <span class="hl kwd">Not_found</span> <span class="hl sym">-&gt;</span>
	    <span class="hl kwc">H32</span><span class="hl sym">.</span>add h32 packed <span class="hl sym">{</span> count <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">}</span>
      <span class="hl kwa">done</span>

    <span class="hl kwa">let</span> count k <span class="hl sym">=</span>
      <span class="hl kwa">if</span> k <span class="hl sym">&lt;</span> <span class="hl num">32</span> <span class="hl kwa">then</span> count31 k <span class="hl kwa">else</span> count32 k

    <span class="hl kwa">let</span> compare_freq <span class="hl sym">((</span>k1<span class="hl sym">:</span><span class="hl kwb">string</span><span class="hl sym">),(</span>f1<span class="hl sym">:</span><span class="hl kwb">float</span><span class="hl sym">)) (</span>k2<span class="hl sym">,</span> f2<span class="hl sym">) =</span>
      <span class="hl kwa">if</span> f1 <span class="hl sym">&gt;</span> f2 <span class="hl kwa">then</span> <span class="hl sym">-</span><span class="hl num">1</span> <span class="hl kwa">else if</span> f1 <span class="hl sym">&lt;</span> f2 <span class="hl kwa">then</span> <span class="hl num">1</span> <span class="hl kwa">else</span> <span class="hl kwc">String</span><span class="hl sym">.</span>compare k1 k2

    <span class="hl kwa">let</span> write_frequencies31 k <span class="hl sym">=</span>
      count31 k<span class="hl sym">;</span>
      <span class="hl kwa">let</span> tot <span class="hl sym">=</span> <span class="hl kwb">float</span><span class="hl sym">(</span><span class="hl kwc">H31</span><span class="hl sym">.</span>fold <span class="hl sym">(</span><span class="hl kwa">fun</span> _ n t <span class="hl sym">-&gt;</span> n<span class="hl sym">.</span>count <span class="hl sym">+</span> t<span class="hl sym">)</span> h31 <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">in</span>
      <span class="hl kwa">let</span> frq <span class="hl sym">=</span>
	<span class="hl kwc">H31</span><span class="hl sym">.</span>fold <span class="hl sym">(</span><span class="hl kwa">fun</span> h n l <span class="hl sym">-&gt;</span>
		  <span class="hl sym">(</span>unpack31 k h<span class="hl sym">,</span> <span class="hl num">100</span><span class="hl sym">. *.</span> <span class="hl kwb">float</span> n<span class="hl sym">.</span>count <span class="hl sym">/.</span> tot<span class="hl sym">) ::</span> l<span class="hl sym">)</span> h31 <span class="hl sym">[]</span> <span class="hl kwa">in</span>
      <span class="hl kwa">let</span> frq <span class="hl sym">=</span> <span class="hl kwc">List</span><span class="hl sym">.</span>sort compare_freq frq <span class="hl kwa">in</span>
	<span class="hl kwc">String</span><span class="hl sym">.</span>concat <span class="hl str">&quot;&quot;</span>
	  <span class="hl sym">(</span><span class="hl kwc">List</span><span class="hl sym">.</span>map <span class="hl sym">(</span><span class="hl kwa">fun</span> <span class="hl sym">(</span>k<span class="hl sym">,</span>f<span class="hl sym">) -&gt;</span> <span class="hl kwc">Printf</span><span class="hl sym">.</span>sprintf <span class="hl str">&quot;%s %.3f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> k f<span class="hl sym">)</span> frq<span class="hl sym">)</span>

    <span class="hl kwa">let</span> write_frequencies32 k <span class="hl sym">=</span>
      count32 k<span class="hl sym">;</span>
      <span class="hl kwa">let</span> tot <span class="hl sym">=</span> <span class="hl kwb">float</span><span class="hl sym">(</span><span class="hl kwc">H32</span><span class="hl sym">.</span>fold <span class="hl sym">(</span><span class="hl kwa">fun</span> _ n t <span class="hl sym">-&gt;</span> n<span class="hl sym">.</span>count <span class="hl sym">+</span> t<span class="hl sym">)</span> h32 <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">in</span>
      <span class="hl kwa">let</span> frq <span class="hl sym">=</span>
	<span class="hl kwc">H32</span><span class="hl sym">.</span>fold <span class="hl sym">(</span><span class="hl kwa">fun</span> h n l <span class="hl sym">-&gt;</span>
		  <span class="hl sym">(</span>unpack32 k h<span class="hl sym">,</span> <span class="hl num">100</span><span class="hl sym">. *.</span> <span class="hl kwb">float</span> n<span class="hl sym">.</span>count <span class="hl sym">/.</span> tot<span class="hl sym">) ::</span> l<span class="hl sym">)</span> h32 <span class="hl sym">[]</span> <span class="hl kwa">in</span>
      <span class="hl kwa">let</span> frq <span class="hl sym">=</span> <span class="hl kwc">List</span><span class="hl sym">.</span>sort compare_freq frq <span class="hl kwa">in</span>
	<span class="hl kwc">String</span><span class="hl sym">.</span>concat <span class="hl str">&quot;&quot;</span>
	  <span class="hl sym">(</span><span class="hl kwc">List</span><span class="hl sym">.</span>map <span class="hl sym">(</span><span class="hl kwa">fun</span> <span class="hl sym">(</span>k<span class="hl sym">,</span>f<span class="hl sym">) -&gt;</span> <span class="hl kwc">Printf</span><span class="hl sym">.</span>sprintf <span class="hl str">&quot;%s %.3f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> k f<span class="hl sym">)</span> frq<span class="hl sym">)</span>

    <span class="hl kwa">let</span> write_count31 k seq <span class="hl sym">=</span>
	count31 k<span class="hl sym">;</span>
	<span class="hl kwc">Printf</span><span class="hl sym">.</span>sprintf <span class="hl str">&quot;%d</span><span class="hl esc">\t</span><span class="hl str">%s&quot;</span> <span class="hl sym">(</span><span class="hl kwa">try</span> <span class="hl sym">(</span><span class="hl kwc">H31</span><span class="hl sym">.</span>find h31 <span class="hl sym">(</span>pack_key31 seq<span class="hl sym">)).</span>count <span class="hl kwa">with</span> <span class="hl kwd">Not_found</span> <span class="hl sym">-&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> seq

    <span class="hl kwa">let</span> write_count32 k seq <span class="hl sym">=</span>
	count32 k<span class="hl sym">;</span>
	<span class="hl kwc">Printf</span><span class="hl sym">.</span>sprintf <span class="hl str">&quot;%d</span><span class="hl esc">\t</span><span class="hl str">%s&quot;</span> <span class="hl sym">(</span><span class="hl kwa">try</span> <span class="hl sym">(</span><span class="hl kwc">H32</span><span class="hl sym">.</span>find h32 <span class="hl sym">(</span>pack_key32 seq<span class="hl sym">)).</span>count <span class="hl kwa">with</span> <span class="hl kwd">Not_found</span> <span class="hl sym">-&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> seq

    <span class="hl kwa">let</span> write_frequencies k <span class="hl sym">=</span>
	<span class="hl kwa">if</span> k <span class="hl sym">&lt;</span> <span class="hl num">32</span> <span class="hl kwa">then</span> write_frequencies31 k
	<span class="hl kwa">else</span> write_frequencies32 k

    <span class="hl kwa">let</span> write_count seq <span class="hl sym">=</span>
      <span class="hl kwa">let</span> k <span class="hl sym">=</span> <span class="hl kwc">String</span><span class="hl sym">.</span>length seq <span class="hl kwa">in</span>
	<span class="hl kwa">if</span> k <span class="hl sym">&lt;</span> <span class="hl num">32</span> <span class="hl kwa">then</span> write_count31 k seq
	<span class="hl kwa">else</span> write_count32 k seq

    <span class="hl kwa">type</span> t <span class="hl sym">=</span> <span class="hl kwd">Size</span> <span class="hl kwa">of</span> <span class="hl kwb">int</span> <span class="hl sym">|</span> <span class="hl kwd">Dna</span> <span class="hl kwa">of</span> <span class="hl kwb">string</span>

<span class="hl kwa">let</span> invoke <span class="hl sym">(</span>f <span class="hl sym">:</span> t <span class="hl sym">-&gt;</span> <span class="hl kwb">string</span><span class="hl sym">)</span> x <span class="hl sym">:</span> <span class="hl kwb">unit</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">string</span> <span class="hl sym">=</span>
  <span class="hl kwa">let</span> input<span class="hl sym">,</span> output <span class="hl sym">=</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>pipe<span class="hl sym">()</span> <span class="hl kwa">in</span>
  <span class="hl kwa">match</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>fork<span class="hl sym">()</span> <span class="hl kwa">with</span>
  <span class="hl sym">| -</span><span class="hl num">1</span> <span class="hl sym">-&gt;</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>close input<span class="hl sym">;</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>close output<span class="hl sym">; (</span><span class="hl kwa">let</span> v <span class="hl sym">=</span> f x <span class="hl kwa">in fun</span> <span class="hl sym">() -&gt;</span> v<span class="hl sym">)</span>
  <span class="hl sym">|</span> <span class="hl num">0</span> <span class="hl sym">-&gt;</span>
      <span class="hl kwc">Unix</span><span class="hl sym">.</span>close input<span class="hl sym">;</span>
      <span class="hl kwa">let</span> output <span class="hl sym">=</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>out_channel_of_descr output <span class="hl kwa">in</span>
        <span class="hl kwc">Marshal</span><span class="hl sym">.</span>to_channel output <span class="hl sym">(</span>f x<span class="hl sym">) [];</span>
        close_out output<span class="hl sym">;</span>
        exit <span class="hl num">0</span>
  <span class="hl sym">|</span> pid <span class="hl sym">-&gt;</span>
      <span class="hl kwc">Unix</span><span class="hl sym">.</span>close output<span class="hl sym">;</span>
      <span class="hl kwa">let</span> input <span class="hl sym">=</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>in_channel_of_descr input <span class="hl kwa">in fun</span> <span class="hl sym">() -&gt;</span>
        <span class="hl kwa">let</span> v <span class="hl sym">=</span> <span class="hl kwc">Marshal</span><span class="hl sym">.</span>from_channel input <span class="hl kwa">in</span>
        ignore <span class="hl sym">(</span><span class="hl kwc">Unix</span><span class="hl sym">.</span>waitpid <span class="hl sym">[]</span> pid<span class="hl sym">);</span>
        close_in input<span class="hl sym">;</span>
	v

<span class="hl kwa">let</span> parallelize f l <span class="hl sym">=</span>
  <span class="hl kwa">let</span> list <span class="hl sym">=</span> <span class="hl kwc">List</span><span class="hl sym">.</span>map <span class="hl sym">(</span>invoke f<span class="hl sym">) (</span><span class="hl kwc">List</span><span class="hl sym">.</span>rev l<span class="hl sym">)</span> <span class="hl kwa">in</span>
  <span class="hl kwc">List</span><span class="hl sym">.</span>iter <span class="hl sym">(</span><span class="hl kwa">fun</span> g <span class="hl sym">-&gt;</span> print_endline <span class="hl sym">(</span>g <span class="hl sym">())) (</span><span class="hl kwc">List</span><span class="hl sym">.</span>rev list<span class="hl sym">)</span>

<span class="hl kwa">let</span> <span class="hl sym">() =</span>
  parallelize
    <span class="hl sym">(</span><span class="hl kwa">fun</span> i <span class="hl sym">-&gt;</span>
       <span class="hl kwa">match</span> i <span class="hl kwa">with</span>
	   <span class="hl kwd">Size</span> i <span class="hl sym">-&gt;</span>
             write_frequencies i
	 <span class="hl sym">|</span> <span class="hl kwd">Dna</span> k <span class="hl sym">-&gt;</span>
             write_count k
    <span class="hl sym">) [</span><span class="hl kwd">Size</span> <span class="hl num">1</span><span class="hl sym">;</span>
       <span class="hl kwd">Size</span> <span class="hl num">2</span><span class="hl sym">;</span>
       <span class="hl kwd">Dna</span> <span class="hl str">&quot;GGT&quot;</span><span class="hl sym">;</span>
       <span class="hl kwd">Dna</span> <span class="hl str">&quot;GGTA&quot;</span><span class="hl sym">;</span>
       <span class="hl kwd">Dna</span> <span class="hl str">&quot;GGTATT&quot;</span><span class="hl sym">;</span>
       <span class="hl kwd">Dna</span> <span class="hl str">&quot;GGTATTTTAATT&quot;</span><span class="hl sym">;</span>
       <span class="hl kwd">Dna</span> <span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl sym">]</span>
