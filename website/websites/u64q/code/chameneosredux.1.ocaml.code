<span class="hl com">(* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Milan Stanojevic, Jul 12 2009</span>
<span class="hl com">*)</span>

<span class="hl kwa">module</span> <span class="hl kwd">List</span> <span class="hl sym">=</span> <span class="hl kwd">ListLabels</span>
<span class="hl kwa">module</span> <span class="hl kwd">String</span> <span class="hl sym">=</span> <span class="hl kwd">StringLabels</span>

<span class="hl kwa">open</span> <span class="hl kwd">Printf</span>

<span class="hl kwa">module</span> <span class="hl kwd">Color</span> <span class="hl sym">=</span> <span class="hl kwa">struct</span>
  <span class="hl kwa">type</span> t <span class="hl sym">=</span>
  <span class="hl sym">|</span> <span class="hl kwd">Blue</span>
  <span class="hl sym">|</span> <span class="hl kwd">Red</span>
  <span class="hl sym">|</span> <span class="hl kwd">Yellow</span>

  <span class="hl kwa">let</span> complement t t' <span class="hl sym">=</span>
  <span class="hl kwa">match</span> t<span class="hl sym">,</span> t' <span class="hl kwa">with</span>
    <span class="hl sym">|</span> <span class="hl kwd">Blue</span><span class="hl sym">,</span> <span class="hl kwd">Blue</span> <span class="hl sym">-&gt;</span> <span class="hl kwd">Blue</span>
    <span class="hl sym">|</span> <span class="hl kwd">Blue</span><span class="hl sym">,</span> <span class="hl kwd">Red</span> <span class="hl sym">-&gt;</span> <span class="hl kwd">Yellow</span>
    <span class="hl sym">|</span> <span class="hl kwd">Blue</span><span class="hl sym">,</span> <span class="hl kwd">Yellow</span> <span class="hl sym">-&gt;</span> <span class="hl kwd">Red</span>
    <span class="hl sym">|</span> <span class="hl kwd">Red</span><span class="hl sym">,</span> <span class="hl kwd">Blue</span> <span class="hl sym">-&gt;</span> <span class="hl kwd">Yellow</span>
    <span class="hl sym">|</span> <span class="hl kwd">Red</span><span class="hl sym">,</span> <span class="hl kwd">Red</span> <span class="hl sym">-&gt;</span> <span class="hl kwd">Red</span>
    <span class="hl sym">|</span> <span class="hl kwd">Red</span><span class="hl sym">,</span> <span class="hl kwd">Yellow</span> <span class="hl sym">-&gt;</span> <span class="hl kwd">Blue</span>
    <span class="hl sym">|</span> <span class="hl kwd">Yellow</span><span class="hl sym">,</span> <span class="hl kwd">Blue</span> <span class="hl sym">-&gt;</span> <span class="hl kwd">Red</span>
    <span class="hl sym">|</span> <span class="hl kwd">Yellow</span><span class="hl sym">,</span> <span class="hl kwd">Red</span> <span class="hl sym">-&gt;</span> <span class="hl kwd">Blue</span>
    <span class="hl sym">|</span> <span class="hl kwd">Yellow</span><span class="hl sym">,</span> <span class="hl kwd">Yellow</span> <span class="hl sym">-&gt;</span> <span class="hl kwd">Yellow</span>

  <span class="hl kwa">let</span> to_string <span class="hl sym">=</span> <span class="hl kwa">function</span>
    <span class="hl sym">|</span> <span class="hl kwd">Blue</span> <span class="hl sym">-&gt;</span> <span class="hl str">&quot;blue&quot;</span>
    <span class="hl sym">|</span> <span class="hl kwd">Red</span> <span class="hl sym">-&gt;</span> <span class="hl str">&quot;red&quot;</span>
    <span class="hl sym">|</span> <span class="hl kwd">Yellow</span> <span class="hl sym">-&gt;</span> <span class="hl str">&quot;yellow&quot;</span>

  <span class="hl kwa">let</span> all <span class="hl sym">= [</span> <span class="hl kwd">Blue</span><span class="hl sym">;</span> <span class="hl kwd">Red</span><span class="hl sym">;</span> <span class="hl kwd">Yellow</span> <span class="hl sym">]</span>
<span class="hl kwa">end</span>

<span class="hl kwa">module</span> <span class="hl kwd">Meeting_place</span> <span class="hl sym">=</span> <span class="hl kwa">struct</span>

  <span class="hl kwa">type</span> <span class="hl kwb">'chameneos</span> t <span class="hl sym">= {</span>
    <span class="hl kwa">mutable</span> state <span class="hl sym">: [</span> `<span class="hl kwd">Empty</span> <span class="hl sym">|</span> `<span class="hl kwd">First</span> <span class="hl kwa">of</span> <span class="hl kwb">'chameneos</span> <span class="hl sym">|</span> `<span class="hl kwd">Second</span> <span class="hl kwa">of</span> <span class="hl kwb">'chameneos</span> <span class="hl sym">];</span>
    <span class="hl kwa">mutable</span> meetings_left <span class="hl sym">:</span> <span class="hl kwb">int</span><span class="hl sym">;</span>
    mutex <span class="hl sym">:</span> <span class="hl kwc">Mutex</span><span class="hl sym">.</span>t<span class="hl sym">;</span>
    wait_for_second <span class="hl sym">:</span> <span class="hl kwc">Condition</span><span class="hl sym">.</span>t<span class="hl sym">;</span>
    wait_for_empty <span class="hl sym">:</span> <span class="hl kwc">Condition</span><span class="hl sym">.</span>t<span class="hl sym">;</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">let</span> create n <span class="hl sym">= {</span>
    state <span class="hl sym">=</span> `<span class="hl kwd">Empty</span><span class="hl sym">;</span>
    meetings_left <span class="hl sym">=</span> n<span class="hl sym">;</span>
    mutex <span class="hl sym">=</span> <span class="hl kwc">Mutex</span><span class="hl sym">.</span>create <span class="hl sym">();</span>
    wait_for_second <span class="hl sym">=</span> <span class="hl kwc">Condition</span><span class="hl sym">.</span>create <span class="hl sym">();</span>
    wait_for_empty <span class="hl sym">=</span> <span class="hl kwc">Condition</span><span class="hl sym">.</span>create <span class="hl sym">();</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">let</span> meet t c <span class="hl sym">=</span>
    <span class="hl kwa">let rec</span> loop <span class="hl sym">() =</span>
      <span class="hl kwa">if</span> t<span class="hl sym">.</span>meetings_left <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">then begin</span>
        <span class="hl kwc">Condition</span><span class="hl sym">.</span>broadcast t<span class="hl sym">.</span>wait_for_empty<span class="hl sym">;</span>
        <span class="hl kwd">None</span>
      <span class="hl kwa">end</span>
      <span class="hl kwa">else</span>
	<span class="hl kwa">match</span> t<span class="hl sym">.</span>state <span class="hl kwa">with</span>
	<span class="hl sym">|</span> `<span class="hl kwd">Empty</span> <span class="hl sym">-&gt;</span>
	    t<span class="hl sym">.</span>state <span class="hl sym">&lt;-</span> `<span class="hl kwd">First</span> c<span class="hl sym">;</span>
	    <span class="hl kwc">Condition</span><span class="hl sym">.</span>wait t<span class="hl sym">.</span>wait_for_second t<span class="hl sym">.</span>mutex<span class="hl sym">;</span>
	    <span class="hl kwa">begin</span>
	      <span class="hl kwa">match</span> t<span class="hl sym">.</span>state <span class="hl kwa">with</span>
	      <span class="hl sym">|</span> `<span class="hl kwd">Empty</span>
	      <span class="hl sym">|</span> `<span class="hl kwd">First</span> _ <span class="hl sym">-&gt;</span>
		  <span class="hl kwa">assert false</span>
	      <span class="hl sym">|</span> `<span class="hl kwd">Second</span> c <span class="hl sym">-&gt;</span>
		  t<span class="hl sym">.</span>state <span class="hl sym">&lt;-</span> `<span class="hl kwd">Empty</span><span class="hl sym">;</span>
                  <span class="hl kwc">Condition</span><span class="hl sym">.</span>signal t<span class="hl sym">.</span>wait_for_empty<span class="hl sym">;</span>
                  <span class="hl kwc">Condition</span><span class="hl sym">.</span>signal t<span class="hl sym">.</span>wait_for_empty<span class="hl sym">;</span>
		  <span class="hl kwd">Some</span> c
	    <span class="hl kwa">end</span>
	<span class="hl sym">|</span> `<span class="hl kwd">First</span> c1 <span class="hl sym">-&gt;</span>
	    t<span class="hl sym">.</span>state <span class="hl sym">&lt;-</span> `<span class="hl kwd">Second</span> c<span class="hl sym">;</span>
	    t<span class="hl sym">.</span>meetings_left <span class="hl sym">&lt;-</span> t<span class="hl sym">.</span>meetings_left <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>
	    <span class="hl kwc">Condition</span><span class="hl sym">.</span>signal t<span class="hl sym">.</span>wait_for_second<span class="hl sym">;</span>
	    <span class="hl kwd">Some</span> c1
	<span class="hl sym">|</span> `<span class="hl kwd">Second</span> _ <span class="hl sym">-&gt;</span>
	    <span class="hl kwc">Condition</span><span class="hl sym">.</span>wait t<span class="hl sym">.</span>wait_for_empty t<span class="hl sym">.</span>mutex<span class="hl sym">;</span>
	    loop <span class="hl sym">()</span>
    <span class="hl kwa">in</span>
    <span class="hl kwc">Mutex</span><span class="hl sym">.</span>lock t<span class="hl sym">.</span>mutex<span class="hl sym">;</span>
    <span class="hl kwa">let</span> res <span class="hl sym">=</span> loop <span class="hl sym">()</span> <span class="hl kwa">in</span>
    <span class="hl kwc">Mutex</span><span class="hl sym">.</span>unlock t<span class="hl sym">.</span>mutex<span class="hl sym">;</span>
    res
  <span class="hl sym">;;</span>
<span class="hl kwa">end</span>

<span class="hl kwa">module</span> <span class="hl kwd">Chameneos</span> <span class="hl sym">=</span> <span class="hl kwa">struct</span>

  <span class="hl kwa">type</span> t <span class="hl sym">= {</span>
    id <span class="hl sym">:</span> <span class="hl kwb">int</span><span class="hl sym">;</span>
    <span class="hl kwa">mutable</span> color <span class="hl sym">:</span> <span class="hl kwc">Color</span><span class="hl sym">.</span>t<span class="hl sym">;</span>
    <span class="hl kwa">mutable</span> meetings <span class="hl sym">:</span> <span class="hl kwb">int</span><span class="hl sym">;</span>
    <span class="hl kwa">mutable</span> meetings_with_self <span class="hl sym">:</span> <span class="hl kwb">int</span><span class="hl sym">;</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">let</span> create <span class="hl sym">=</span>
    <span class="hl kwa">let</span> id <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">in</span>
    <span class="hl kwa">let</span> new_id <span class="hl sym">() =</span>
      <span class="hl kwa">let</span> r <span class="hl sym">= !</span>id <span class="hl kwa">in</span>
      id <span class="hl sym">:=</span> r <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
      r
    <span class="hl kwa">in</span>
    <span class="hl kwa">fun</span> color <span class="hl sym">-&gt;</span>
      <span class="hl sym">{</span> id <span class="hl sym">=</span> new_id <span class="hl sym">();</span>
	color <span class="hl sym">=</span> color<span class="hl sym">;</span>
	meetings <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
	meetings_with_self <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl sym">}</span>

  <span class="hl kwa">let</span> run t place <span class="hl sym">=</span>
    <span class="hl kwa">let rec</span> loop <span class="hl sym">() =</span>
      <span class="hl kwa">match</span> <span class="hl kwc">Meeting_place</span><span class="hl sym">.</span>meet place t <span class="hl kwa">with</span>
      <span class="hl sym">|</span> <span class="hl kwd">None</span> <span class="hl sym">-&gt; ()</span>
      <span class="hl sym">|</span> <span class="hl kwd">Some</span> other <span class="hl sym">-&gt;</span>
	  t<span class="hl sym">.</span>meetings <span class="hl sym">&lt;-</span> t<span class="hl sym">.</span>meetings <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
	  <span class="hl kwa">if</span> t<span class="hl sym">.</span>id <span class="hl sym">=</span> other<span class="hl sym">.</span>id <span class="hl kwa">then</span> t<span class="hl sym">.</span>meetings_with_self <span class="hl sym">&lt;-</span> t<span class="hl sym">.</span>meetings_with_self <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
	  t<span class="hl sym">.</span>color <span class="hl sym">&lt;-</span> <span class="hl kwc">Color</span><span class="hl sym">.</span>complement t<span class="hl sym">.</span>color other<span class="hl sym">.</span>color<span class="hl sym">;</span>
	  loop <span class="hl sym">()</span>
    <span class="hl kwa">in</span>
    <span class="hl kwc">Thread</span><span class="hl sym">.</span>create loop <span class="hl sym">()</span>
<span class="hl kwa">end</span>

<span class="hl kwa">let</span> print_complements <span class="hl sym">() =</span>
  <span class="hl kwc">List</span><span class="hl sym">.</span>iter <span class="hl kwc">Color</span><span class="hl sym">.</span>all ~f<span class="hl sym">:(</span><span class="hl kwa">fun</span> c1 <span class="hl sym">-&gt;</span>
    <span class="hl kwc">List</span><span class="hl sym">.</span>iter <span class="hl kwc">Color</span><span class="hl sym">.</span>all ~f<span class="hl sym">:(</span><span class="hl kwa">fun</span> c2 <span class="hl sym">-&gt;</span>
      printf <span class="hl str">&quot;%s + %s -&gt; %s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
	<span class="hl sym">(</span><span class="hl kwc">Color</span><span class="hl sym">.</span>to_string c1<span class="hl sym">)</span>
	<span class="hl sym">(</span><span class="hl kwc">Color</span><span class="hl sym">.</span>to_string c2<span class="hl sym">)</span>
	<span class="hl sym">(</span><span class="hl kwc">Color</span><span class="hl sym">.</span>to_string <span class="hl sym">(</span><span class="hl kwc">Color</span><span class="hl sym">.</span>complement c1 c2<span class="hl sym">))));</span>
  printf <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
<span class="hl sym">;;</span>

<span class="hl kwa">let</span> spell_int i <span class="hl sym">=</span>
  <span class="hl kwa">let</span> spell_char <span class="hl sym">=</span> <span class="hl kwa">function</span>
    <span class="hl sym">|</span> <span class="hl kwb">'0'</span> <span class="hl sym">-&gt;</span> <span class="hl str">&quot;zero&quot;</span>
    <span class="hl sym">|</span> <span class="hl kwb">'1'</span> <span class="hl sym">-&gt;</span> <span class="hl str">&quot;one&quot;</span>
    <span class="hl sym">|</span> <span class="hl kwb">'2'</span> <span class="hl sym">-&gt;</span> <span class="hl str">&quot;two&quot;</span>
    <span class="hl sym">|</span> <span class="hl kwb">'3'</span> <span class="hl sym">-&gt;</span> <span class="hl str">&quot;three&quot;</span>
    <span class="hl sym">|</span> <span class="hl kwb">'4'</span> <span class="hl sym">-&gt;</span> <span class="hl str">&quot;four&quot;</span>
    <span class="hl sym">|</span> <span class="hl kwb">'5'</span> <span class="hl sym">-&gt;</span> <span class="hl str">&quot;five&quot;</span>
    <span class="hl sym">|</span> <span class="hl kwb">'6'</span> <span class="hl sym">-&gt;</span> <span class="hl str">&quot;six&quot;</span>
    <span class="hl sym">|</span> <span class="hl kwb">'7'</span> <span class="hl sym">-&gt;</span> <span class="hl str">&quot;seven&quot;</span>
    <span class="hl sym">|</span> <span class="hl kwb">'8'</span> <span class="hl sym">-&gt;</span> <span class="hl str">&quot;eight&quot;</span>
    <span class="hl sym">|</span> <span class="hl kwb">'9'</span> <span class="hl sym">-&gt;</span> <span class="hl str">&quot;nine&quot;</span>
    <span class="hl sym">|</span> x <span class="hl sym">-&gt;</span> failwith <span class="hl str">&quot;unexpected char&quot;</span>
  <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> s <span class="hl sym">=</span> string_of_int i <span class="hl kwa">in</span>
  <span class="hl kwc">String</span><span class="hl sym">.</span>iter s ~f<span class="hl sym">:(</span><span class="hl kwa">fun</span> c <span class="hl sym">-&gt;</span> printf <span class="hl str">&quot; %s&quot;</span> <span class="hl sym">(</span>spell_char c<span class="hl sym">));</span>
<span class="hl sym">;;</span>

<span class="hl kwa">let</span> work colors n <span class="hl sym">=</span>
  <span class="hl kwa">let module</span> <span class="hl kwd">C</span> <span class="hl sym">=</span> <span class="hl kwd">Chameneos</span> <span class="hl kwa">in</span>
  <span class="hl kwc">List</span><span class="hl sym">.</span>iter colors ~f<span class="hl sym">:(</span><span class="hl kwa">fun</span> c <span class="hl sym">-&gt;</span> printf <span class="hl str">&quot; %s&quot;</span> <span class="hl sym">(</span><span class="hl kwc">Color</span><span class="hl sym">.</span>to_string c<span class="hl sym">));</span> printf <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
  <span class="hl kwa">let</span> place <span class="hl sym">=</span> <span class="hl kwc">Meeting_place</span><span class="hl sym">.</span>create n <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> cs <span class="hl sym">=</span> <span class="hl kwc">List</span><span class="hl sym">.</span>map colors ~f<span class="hl sym">:</span><span class="hl kwc">Chameneos</span><span class="hl sym">.</span>create <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> threads <span class="hl sym">=</span> <span class="hl kwc">List</span><span class="hl sym">.</span>map cs ~f<span class="hl sym">:(</span><span class="hl kwa">fun</span> c <span class="hl sym">-&gt;</span> <span class="hl kwc">Chameneos</span><span class="hl sym">.</span>run c place<span class="hl sym">)</span> <span class="hl kwa">in</span>
  <span class="hl kwc">List</span><span class="hl sym">.</span>iter threads ~f<span class="hl sym">:</span><span class="hl kwc">Thread</span><span class="hl sym">.</span>join<span class="hl sym">;</span>
  <span class="hl kwa">let</span> sum_meets <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">in</span>
  <span class="hl kwc">List</span><span class="hl sym">.</span>iter cs ~f<span class="hl sym">:(</span><span class="hl kwa">fun</span> c <span class="hl sym">-&gt;</span>
    printf <span class="hl str">&quot;%d&quot;</span> c<span class="hl sym">.</span><span class="hl kwc">C</span><span class="hl sym">.</span>meetings<span class="hl sym">;</span> spell_int c<span class="hl sym">.</span><span class="hl kwc">C</span><span class="hl sym">.</span>meetings_with_self<span class="hl sym">;</span> printf <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
    sum_meets <span class="hl sym">:= !</span>sum_meets <span class="hl sym">+</span> c<span class="hl sym">.</span><span class="hl kwc">C</span><span class="hl sym">.</span>meetings<span class="hl sym">);</span>
  spell_int <span class="hl sym">!</span>sum_meets<span class="hl sym">;</span> printf <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
<span class="hl sym">;;</span>


<span class="hl kwa">let</span> main <span class="hl sym">() =</span>
  <span class="hl kwa">let</span> n <span class="hl sym">=</span>
    <span class="hl kwa">try</span>
      int_of_string <span class="hl sym">(</span><span class="hl kwc">Sys</span><span class="hl sym">.</span>argv<span class="hl sym">.(</span><span class="hl num">1</span><span class="hl sym">))</span>
    <span class="hl kwa">with</span>
    <span class="hl sym">|</span> _ <span class="hl sym">-&gt;</span> <span class="hl num">600</span>
  <span class="hl kwa">in</span>
  print_complements <span class="hl sym">();</span>
  <span class="hl kwa">let module</span> <span class="hl kwd">C</span> <span class="hl sym">=</span> <span class="hl kwd">Color</span> <span class="hl kwa">in</span>
  work <span class="hl sym">[</span> <span class="hl kwc">C</span><span class="hl sym">.</span><span class="hl kwd">Blue</span><span class="hl sym">;</span> <span class="hl kwc">C</span><span class="hl sym">.</span><span class="hl kwd">Red</span><span class="hl sym">;</span> <span class="hl kwc">C</span><span class="hl sym">.</span><span class="hl kwd">Yellow</span> <span class="hl sym">]</span> n<span class="hl sym">;</span>
  printf <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
  work <span class="hl sym">[</span> <span class="hl kwc">C</span><span class="hl sym">.</span><span class="hl kwd">Blue</span><span class="hl sym">;</span> <span class="hl kwc">C</span><span class="hl sym">.</span><span class="hl kwd">Red</span><span class="hl sym">;</span> <span class="hl kwc">C</span><span class="hl sym">.</span><span class="hl kwd">Yellow</span><span class="hl sym">;</span> <span class="hl kwc">C</span><span class="hl sym">.</span><span class="hl kwd">Red</span><span class="hl sym">;</span> <span class="hl kwc">C</span><span class="hl sym">.</span><span class="hl kwd">Yellow</span><span class="hl sym">;</span> <span class="hl kwc">C</span><span class="hl sym">.</span><span class="hl kwd">Blue</span><span class="hl sym">;</span> <span class="hl kwc">C</span><span class="hl sym">.</span><span class="hl kwd">Red</span><span class="hl sym">;</span> <span class="hl kwc">C</span><span class="hl sym">.</span><span class="hl kwd">Yellow</span><span class="hl sym">;</span> <span class="hl kwc">C</span><span class="hl sym">.</span><span class="hl kwd">Red</span><span class="hl sym">;</span> <span class="hl kwc">C</span><span class="hl sym">.</span><span class="hl kwd">Blue</span> <span class="hl sym">]</span> n<span class="hl sym">;</span>
  printf <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
<span class="hl sym">;;</span>

<span class="hl kwa">let</span> <span class="hl sym">() =</span> main <span class="hl sym">()</span>
