<span class="hl com">{-  The Computer Language Benchmarks Game</span>
<span class="hl com">    http://shootout.alioth.debian.org/</span>
<span class="hl com">    contributed by Miha Vučkovič</span>
<span class="hl com">-}</span>

import System
import Control.Applicative

flop <span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">:</span>x1<span class="hl sym">:</span>t<span class="hl sym">) =</span> x1<span class="hl sym">:</span><span class="hl num">2</span><span class="hl sym">:</span>t
flop <span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">:</span>x1<span class="hl sym">:</span>x2<span class="hl sym">:</span>t<span class="hl sym">) =</span> x2<span class="hl sym">:</span>x1<span class="hl sym">:</span><span class="hl num">3</span><span class="hl sym">:</span>t
flop <span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">:</span>x1<span class="hl sym">:</span>x2<span class="hl sym">:</span>x3<span class="hl sym">:</span>t<span class="hl sym">) =</span> x3<span class="hl sym">:</span>x2<span class="hl sym">:</span>x1<span class="hl sym">:</span><span class="hl num">4</span><span class="hl sym">:</span>t
flop <span class="hl sym">(</span><span class="hl num">5</span><span class="hl sym">:</span>x1<span class="hl sym">:</span>x2<span class="hl sym">:</span>x3<span class="hl sym">:</span>x4<span class="hl sym">:</span>t<span class="hl sym">) =</span> x4<span class="hl sym">:</span>x3<span class="hl sym">:</span>x2<span class="hl sym">:</span>x1<span class="hl sym">:</span><span class="hl num">5</span><span class="hl sym">:</span>t
flop <span class="hl sym">(</span><span class="hl num">6</span><span class="hl sym">:</span>x1<span class="hl sym">:</span>x2<span class="hl sym">:</span>x3<span class="hl sym">:</span>x4<span class="hl sym">:</span>x5<span class="hl sym">:</span>t<span class="hl sym">) =</span> x5<span class="hl sym">:</span>x4<span class="hl sym">:</span>x3<span class="hl sym">:</span>x2<span class="hl sym">:</span>x1<span class="hl sym">:</span><span class="hl num">6</span><span class="hl sym">:</span>t
flop <span class="hl sym">(</span><span class="hl num">7</span><span class="hl sym">:</span>x1<span class="hl sym">:</span>x2<span class="hl sym">:</span>x3<span class="hl sym">:</span>x4<span class="hl sym">:</span>x5<span class="hl sym">:</span>x6<span class="hl sym">:</span>t<span class="hl sym">) =</span> x6<span class="hl sym">:</span>x5<span class="hl sym">:</span>x4<span class="hl sym">:</span>x3<span class="hl sym">:</span>x2<span class="hl sym">:</span>x1<span class="hl sym">:</span><span class="hl num">7</span><span class="hl sym">:</span>t

flop lst<span class="hl sym">&#64;(</span>h<span class="hl sym">:</span>_<span class="hl sym">) =</span> r where
	<span class="hl sym">(</span>t<span class="hl sym">,</span> r<span class="hl sym">) =</span> flop' h <span class="hl sym">(</span>lst<span class="hl sym">,</span> t<span class="hl sym">)</span>
	flop' <span class="hl num">0</span> <span class="hl sym">(</span>t<span class="hl sym">,</span> r<span class="hl sym">) = (</span>t<span class="hl sym">,</span> r<span class="hl sym">)</span>
	flop' n <span class="hl sym">((</span>h<span class="hl sym">:</span>t<span class="hl sym">),</span> r<span class="hl sym">) =</span> flop' <span class="hl sym">(</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">) (</span>t<span class="hl sym">,</span> h<span class="hl sym">:</span>r<span class="hl sym">)</span>

flopS <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">:</span>_<span class="hl sym">) =</span> <span class="hl num">0</span>
flopS lst <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">+</span> flopS <span class="hl sym">(</span>flop lst<span class="hl sym">)</span>

rotate n <span class="hl sym">(</span>h<span class="hl sym">:</span>t<span class="hl sym">) =</span> rotate' <span class="hl sym">(</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span> t where
	rotate' <span class="hl num">0</span> l <span class="hl sym">=</span> h<span class="hl sym">:</span>l
	rotate' n <span class="hl sym">(</span>f<span class="hl sym">:</span>t<span class="hl sym">) =</span> f<span class="hl sym">:(</span>rotate' <span class="hl sym">(</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span> t<span class="hl sym">)</span>

checksum i f
   <span class="hl sym">|</span> mod i <span class="hl num">2</span> <span class="hl sym">==</span> <span class="hl num">0</span> <span class="hl sym">=</span> f
   <span class="hl sym">|</span> True <span class="hl sym">= -</span>f

pfold r <span class="hl sym">[] =</span> r
pfold <span class="hl sym">(</span>ac<span class="hl sym">,</span> af<span class="hl sym">) ((</span>c<span class="hl sym">,</span> f<span class="hl sym">):</span>t<span class="hl sym">)  =</span> seq sc $ seq sf $ pfold <span class="hl sym">(</span>sc<span class="hl sym">,</span> sf<span class="hl sym">)</span> t where 
	sc <span class="hl sym">=</span> ac<span class="hl sym">+</span>c
	sf <span class="hl sym">=</span> max af f

permut n <span class="hl sym">=</span> foldr perm <span class="hl sym">[[</span><span class="hl num">1</span>..n<span class="hl sym">]] [</span><span class="hl num">2</span>..n<span class="hl sym">]</span> where
   perm x lst <span class="hl sym">=</span> concat <span class="hl sym">[</span>take x $ iterate <span class="hl sym">(</span>rotate x<span class="hl sym">)</span> l <span class="hl sym">|</span> l <span class="hl sym">&lt;-</span> lst<span class="hl sym">]</span>

main <span class="hl sym">=</span> do
   n <span class="hl sym">&lt;-</span> read.head <span class="hl sym">&lt;</span>$<span class="hl sym">&gt;</span> getArgs
   let <span class="hl sym">(</span>chksm<span class="hl sym">,</span> mflops<span class="hl sym">) =</span> pfold <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">)</span> $ map <span class="hl sym">(</span>\<span class="hl sym">(</span>i<span class="hl sym">,</span> p<span class="hl sym">) -&gt;</span> let flops <span class="hl sym">=</span> flopS p in <span class="hl sym">(</span>checksum i flops<span class="hl sym">,</span> flops<span class="hl sym">))</span> $ zip <span class="hl sym">[</span><span class="hl num">0</span>..<span class="hl sym">] (</span>permut n<span class="hl sym">)</span>
   putStrLn $ <span class="hl sym">(</span>show chksm<span class="hl sym">) ++</span> <span class="hl str">&quot;\nPfannkuchen(&quot;</span> <span class="hl sym">++ (</span>show n<span class="hl sym">) ++</span> <span class="hl str">&quot;) = &quot;</span> <span class="hl sym">++ (</span>show $ mflops<span class="hl sym">)</span>
