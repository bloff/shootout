<source>
<def></def><com>{ The Computer Language Shootout</com><br />
<com>  http://shootout.alioth.debian.org</com><br />
<com>  Calculate digits of pi using the</com><br />
<com>  Unbounded Spigot Algorithms</com><br />
<com></com><br />
<com>  contributed by Vincent Snijders</com><br />
<com>  gmp headers by Karl-Michael Schindler</com><br />
<com>}</com><def></def><br />
<kwa>program</kwa> <def>pidigits</def><sym>;</sym><br />
<def></def><com>{$linklib libgmp.so}</com><def></def><br />
<com>{$mode objfpc}</com><def></def><br />
<br />
<kwa>uses</kwa><br />
<def>  ctypes</def><sym>;</sym><br />
<def></def><br />
<kwa>type</kwa><br />
<def><br />
mp_limb_t</def>        <sym>=</sym> <def>cuint</def><sym>;</sym><br />
<def>mp_ptr</def>           <sym>= ^</sym><def>mp_limb_t</def><sym>;</sym><br />
<def><br />
mpz_t</def> <sym>=</sym> <def></def><kwa>record</kwa><br />
<def>  mp_alloc</def><sym>,</sym> <def>mp_size</def> <sym>:</sym> <def>cint</def><sym>;</sym><br />
<def>  mp_d</def>    <sym>:</sym> <def>mp_ptr</def><br />
<kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def></def><kwd>mpz_init</kwd> <def></def><sym>(</sym><def></def><kwa>var</kwa> <def>Dest</def><sym>:</sym> <def>mpz_t</def><sym>);</sym><br />
<def></def> <kwa>cdecl</kwa><def></def><sym>;</sym> <def></def><kwa>external</kwa> <def>name</def> <str>'__gmpz_init'</str><def></def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def></def><kwd>mpz_init_set_ui</kwd> <def></def><sym>(</sym><def></def><kwa>var</kwa> <def>Dest</def><sym>:</sym> <def>mpz_t</def><sym>;</sym> <def>Src</def><sym>:</sym> <def>culong</def><sym>);</sym><br />
<def></def> <kwa>cdecl</kwa><def></def><sym>;</sym> <def></def><kwa>external</kwa> <def>name</def> <str>'__gmpz_init_set_ui'</str><def></def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def></def><kwd>mpz_mul_ui</kwd> <def></def><sym>(</sym><def></def><kwa>var</kwa> <def>Dest</def><sym>:</sym> <def>mpz_t</def><sym>;</sym> <def></def><kwa>var</kwa> <def>Src1</def><sym>:</sym> <def>mpz_t</def><sym>;</sym> <def>Src2</def><sym>:</sym> <def>culong</def><sym>);</sym><br />
<def></def> <kwa>cdecl</kwa><def></def><sym>;</sym> <def></def><kwa>external</kwa> <def>name</def> <str>'__gmpz_mul_ui'</str><def></def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def></def><kwd>mpz_mul_si</kwd> <def></def><sym>(</sym><def></def><kwa>var</kwa> <def>Dest</def><sym>:</sym> <def>mpz_t</def><sym>;</sym> <def></def><kwa>var</kwa> <def>Src1</def><sym>:</sym> <def>mpz_t</def><sym>;</sym> <def>Src2</def><sym>:</sym> <def>cint</def><sym>);</sym><br />
<def></def> <kwa>cdecl</kwa><def></def><sym>;</sym> <def></def><kwa>external</kwa> <def>name</def> <str>'__gmpz_mul_si'</str><def></def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def></def><kwd>mpz_add</kwd> <def></def><sym>(</sym><def></def><kwa>var</kwa> <def>Dest</def><sym>:</sym> <def>mpz_t</def><sym>;</sym> <def></def><kwa>var</kwa> <def>Src1</def><sym>,</sym> <def>Src2</def><sym>:</sym> <def>mpz_t</def><sym>);</sym><br />
<def></def> <kwa>cdecl</kwa><def></def><sym>;</sym> <def></def><kwa>external</kwa> <def>name</def> <str>'__gmpz_add'</str><def></def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def></def><kwd>mpz_tdiv_q</kwd> <def></def><sym>(</sym><def></def><kwa>var</kwa> <def>Dest</def><sym>:</sym> <def>mpz_t</def><sym>;</sym> <def></def><kwa>var</kwa> <def>Src1</def><sym>,</sym> <def>Src2</def><sym>:</sym> <def>mpz_t</def><sym>);</sym><br />
<def></def> <kwa>cdecl</kwa><def></def><sym>;</sym> <def></def><kwa>external</kwa> <def>name</def> <str>'__gmpz_tdiv_q'</str><def></def><sym>;</sym><br />
<def></def><br />
<kwa>function</kwa>  <def></def><kwd>mpz_get_ui</kwd> <def></def><sym>(</sym><def></def><kwa>var</kwa> <def>Src</def><sym>:</sym> <def>mpz_t</def><sym>):</sym> <def>culong</def><sym>;</sym><br />
<def></def> <kwa>cdecl</kwa><def></def><sym>;</sym> <def></def><kwa>external</kwa> <def>name</def> <str>'__gmpz_get_ui'</str><def></def><sym>;</sym><br />
<def></def><br />
<br />
<kwa>procedure</kwa> <def></def><kwd>PrintPiDigits</kwd><def></def><sym>(</sym><def>NumDigits</def><sym>:</sym> <def></def><kwb>integer</kwb><def></def><sym>);</sym><br />
<def></def><kwa>var</kwa><br />
<def>  q</def><sym>,</sym> <def>r</def><sym>,</sym> <def>s</def><sym>,</sym> <def>t</def><sym>:</sym> <def>mpz_t</def><sym>;</sym> <def></def><slc>// Transformation matrix components.</slc><br />
<def>  u</def><sym>,</sym> <def>v</def><sym>,</sym> <def>w</def><sym>:</sym> <def>mpz_t</def><sym>;</sym> <def></def><slc>// Temporary variables</slc><br />
<def>  i</def><sym>,</sym> <def>k</def><sym>,</sym> <def>digit</def><sym>,</sym> <def>c</def><sym>:</sym> <def></def><kwb>integer</kwb><def></def><sym>;</sym><br />
<def>  line</def><sym>:</sym> <def></def><kwa>string</kwa><def></def><sym>[</sym><def></def><num>10</num><def></def><sym>];</sym><br />
<def></def><br />
  <kwa>function</kwa> <def></def><kwd>Extract</kwd><def></def><sym>(</sym><def>x</def><sym>:</sym><def></def><kwb>cardinal</kwb><def></def><sym>) :</sym> <def></def><kwb>integer</kwb><def></def><sym>;</sym><br />
<def></def>  <kwa>begin</kwa><br />
<def></def>    <kwd>mpz_mul_ui</kwd><def></def><sym>(</sym><def>u</def><sym>,</sym> <def>q</def><sym>,</sym> <def>x</def><sym>);</sym><br />
<def></def>    <kwd>mpz_add</kwd><def></def><sym>(</sym><def>u</def><sym>,</sym> <def>u</def><sym>,</sym> <def>r</def><sym>);</sym><br />
<def></def>    <kwd>mpz_mul_ui</kwd><def></def><sym>(</sym><def>v</def><sym>,</sym> <def>s</def><sym>,</sym> <def>x</def><sym>);</sym><br />
<def></def>    <kwd>mpz_add</kwd><def></def><sym>(</sym><def>v</def><sym>,</sym> <def>v</def><sym>,</sym> <def>t</def><sym>);</sym><br />
<def></def>    <kwd>mpz_tdiv_q</kwd><def></def><sym>(</sym><def>w</def><sym>,</sym> <def>u</def><sym>,</sym> <def>v</def><sym>);</sym><br />
<def>    result</def> <sym>:=</sym> <def></def><kwd>mpz_get_ui</kwd><def></def><sym>(</sym><def>w</def><sym>);</sym><br />
<def></def>  <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
  <kwa>function</kwa> <def>IsSafe</def> <sym>:</sym> <def></def><kwb>boolean</kwb><def></def><sym>;</sym><br />
<def></def>  <kwa>begin</kwa><br />
<def>    result</def> <sym>:=</sym> <def>digit</def> <sym>=</sym> <def></def><kwd>Extract</kwd><def></def><sym>(</sym><def></def><num>4</num><def></def><sym>);</sym><br />
<def></def>  <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
  <kwa>procedure</kwa> <def>Produce</def><sym>;</sym><br />
<def></def>  <kwa>begin</kwa><br />
<def></def>    <kwd>mpz_mul_si</kwd><def></def><sym>(</sym><def>r</def><sym>,</sym> <def>r</def><sym>,</sym> <def></def><num>10</num><def></def><sym>);</sym><br />
<def></def>    <kwd>mpz_mul_si</kwd><def></def><sym>(</sym><def>v</def><sym>,</sym> <def>t</def><sym>, -</sym><def></def><num>10</num> <def></def><sym>*</sym> <def>digit</def><sym>);</sym><br />
<def></def>    <kwd>mpz_add</kwd><def></def><sym>(</sym><def>r</def><sym>,</sym> <def>r</def><sym>,</sym> <def>v</def><sym>);</sym><br />
<def></def>    <kwd>mpz_mul_si</kwd><def></def><sym>(</sym><def>q</def><sym>,</sym> <def>q</def><sym>,</sym> <def></def><num>10</num><def></def><sym>);</sym><br />
<def></def>  <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
  <kwa>procedure</kwa> <def>Consume</def><sym>;</sym><br />
<def></def>  <kwa>begin</kwa><br />
<def></def>    <kwd>inc</kwd><def></def><sym>(</sym><def>k</def><sym>);</sym><br />
<def></def>    <kwd>mpz_mul_si</kwd><def></def><sym>(</sym><def>r</def><sym>,</sym> <def>r</def><sym>,</sym> <def></def><num>2</num><def></def><sym>*</sym><def>k</def><sym>+</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>    <kwd>mpz_mul_si</kwd><def></def><sym>(</sym><def>u</def><sym>,</sym> <def>q</def><sym>,</sym> <def></def><num>4</num><def></def><sym>*</sym><def>k</def><sym>+</sym><def></def><num>2</num><def></def><sym>);</sym><br />
<def></def>    <kwd>mpz_add</kwd><def></def><sym>(</sym><def>r</def><sym>,</sym> <def>r</def><sym>,</sym> <def>u</def><sym>);</sym><br />
<def></def>    <kwd>mpz_mul_si</kwd><def></def><sym>(</sym><def>t</def><sym>,</sym> <def>t</def><sym>,</sym> <def></def><num>2</num><def></def><sym>*</sym><def>k</def><sym>+</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>    <kwd>mpz_mul_si</kwd><def></def><sym>(</sym><def>v</def><sym>,</sym> <def>s</def><sym>,</sym> <def></def><num>4</num><def></def><sym>*</sym><def>k</def><sym>+</sym><def></def><num>2</num><def></def><sym>);</sym><br />
<def></def>    <kwd>mpz_add</kwd><def></def><sym>(</sym><def>t</def><sym>,</sym> <def>t</def><sym>,</sym> <def>v</def><sym>);</sym><br />
<def></def>    <kwd>mpz_mul_si</kwd><def></def><sym>(</sym><def>s</def><sym>,</sym> <def>s</def><sym>,</sym> <def>k</def><sym>);</sym><br />
<def></def>    <kwd>mpz_mul_si</kwd><def></def><sym>(</sym><def>q</def><sym>,</sym> <def>q</def><sym>,</sym> <def>k</def><sym>);</sym><br />
<def></def>  <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def>  k</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>  i</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>  c</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>  <kwd>setlength</kwd><def></def><sym>(</sym><def>line</def><sym>,</sym> <def></def><num>10</num><def></def><sym>);</sym><br />
<def></def>  <kwd>mpz_init_set_ui</kwd><def></def><sym>(</sym><def>q</def><sym>,</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>  <kwd>mpz_init_set_ui</kwd><def></def><sym>(</sym><def>r</def><sym>,</sym> <def></def><num>0</num><def></def><sym>);</sym><br />
<def></def>  <kwd>mpz_init_set_ui</kwd><def></def><sym>(</sym><def>s</def><sym>,</sym> <def></def><num>0</num><def></def><sym>);</sym><br />
<def></def>  <kwd>mpz_init_set_ui</kwd><def></def><sym>(</sym><def>t</def><sym>,</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>  <kwd>mpz_init</kwd><def></def><sym>(</sym><def>u</def><sym>);</sym><br />
<def></def>  <kwd>mpz_init</kwd><def></def><sym>(</sym><def>v</def><sym>);</sym><br />
<def></def>  <kwd>mpz_init</kwd><def></def><sym>(</sym><def>w</def><sym>);</sym><br />
<def></def>  <kwa>while</kwa> <def></def><sym>(</sym><def>i</def><sym>&lt;</sym><def>NumDigits</def><sym>)</sym> <def></def><kwa>do begin</kwa><br />
<def>    digit</def> <sym>:=</sym> <def></def><kwd>Extract</kwd><def></def><sym>(</sym><def></def><num>3</num><def></def><sym>);</sym><br />
<def></def>    <kwa>while not</kwa> <def>IsSafe</def> <kwa>do begin</kwa><br />
<def>      Consume</def><sym>;</sym><br />
<def>      digit</def><sym>:=</sym> <def></def><kwd>Extract</kwd><def></def><sym>(</sym><def></def><num>3</num><def></def><sym>);</sym><br />
<def></def>    <kwa>end</kwa><def></def><sym>;</sym><br />
<def>    Produce</def><sym>;</sym><br />
<def></def>    <kwd>inc</kwd><def></def><sym>(</sym><def>c</def><sym>);</sym><br />
<def>    line</def><sym>[</sym><def>c</def><sym>] :=</sym> <def></def><kwd>chr</kwd><def></def><sym>(</sym><def></def><kwd>ord</kwd><def></def><sym>(</sym><def></def><str>'0'</str><def></def><sym>)+</sym><def>digit</def><sym>);</sym><br />
<def></def>    <kwd>inc</kwd><def></def><sym>(</sym><def>i</def><sym>);</sym><br />
<def></def>    <kwa>if</kwa> <def>c</def><sym>=</sym><def></def><num>10</num> <def></def><kwa>then begin</kwa><br />
<def></def>      <kwd>writeln</kwd><def></def><sym>(</sym><def>line</def><sym>,</sym> <def></def><esc>#9</esc><def></def><str>':'</str><def></def><sym>,</sym> <def>i</def><sym>);</sym><br />
<def>      c</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>    <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>  <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>  <kwa>if</kwa> <def>c</def><sym>&lt;&gt;</sym><def></def><num>0</num> <def></def><kwa>then begin</kwa><br />
<def></def>    <kwd>SetLength</kwd><def></def><sym>(</sym><def>line</def><sym>,</sym> <def>c</def><sym>);</sym><br />
<def></def>    <kwd>writeln</kwd><def></def><sym>(</sym><def>line</def><sym>);</sym><br />
<def></def>  <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>var</kwa><br />
<def>  n</def><sym>:</sym> <def></def><kwb>integer</kwb> <def></def><sym>=</sym> <def></def><num>27</num><def></def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def></def>  <kwa>if</kwa> <def></def><sym>(</sym><def>ParamCount</def><sym>=</sym><def></def><num>1</num><def></def><sym>)</sym> <def></def><kwa>then</kwa><br />
<def></def>    <kwd>val</kwd><def></def><sym>(</sym><def></def><kwd>ParamStr</kwd><def></def><sym>(</sym><def></def><num>1</num><def></def><sym>),</sym> <def>n</def><sym>);</sym><br />
<def></def>  <kwd>PrintPiDigits</kwd><def></def><sym>(</sym><def>n</def><sym>);</sym><br />
<def></def><kwa>end</kwa><def></def><sym>.</sym><br />
<def></def><br />
</source>
