<source>
<def></def><slc># The Computer Language Benchmarks Game</slc><br />
<def></def><slc># http://shootout.alioth.debian.org/</slc><br />
<def></def><slc># contributed by Danny Sauer</slc><br />
<def></def><slc># completely rewritten and</slc><br />
<def></def><slc># cleaned up for speed and fun by Mirco Wahab</slc><br />
<def></def><slc># improved STDIN read, regex clean up by Jake Berner</slc><br />
<def></def><br />
<kwa>use</kwa> <def></def><kwd>strict</kwd><def></def><sym>;</sym><br />
<def></def><kwa>use</kwa> <def></def><kwd>warnings</kwd><def></def><sym>;</sym><br />
<def></def><br />
<kwc>my</kwc> <def></def><kwb>$l_file</kwb>  <def></def><sym>= -</sym><def>s</def> <kwd>STDIN</kwd><def></def><sym>;</sym><br />
<def></def><kwc>my</kwc> <def></def><kwb>$content</kwb><def></def><sym>;</sym> <def>read STDIN</def><sym>,</sym> <def></def><kwb>$content</kwb><def></def><sym>,</sym> <def></def><kwb>$l_file</kwb><def></def><sym>;</sym><br />
<def></def><slc># this is significantly faster than using &lt;&gt; in this case</slc><br />
<def></def><br />
<kwc>my</kwc> <def></def><kwb>$dispose</kwb> <def></def><sym>=</sym>  <def>qr</def><sym>/(^&gt;.*)</sym><def>?</def><esc>\n</esc><def></def><sym>/</sym><def></def><kwd>m</kwd><def></def><sym>;</sym> <def></def><slc># slight performance gain here</slc><br />
<def></def>   <kwb>$content</kwb> <def></def><sym>=~</sym> <def>s</def><sym>/</sym><def></def><kwb>$dispose</kwb><def></def><sym>//</sym><def></def><kwd>g</kwd><def></def><sym>;</sym><br />
<def></def><kwc>my</kwc> <def></def><kwb>$l_code</kwb>  <def></def><sym>=</sym>  <def>length</def> <kwb>$content</kwb><def></def><sym>;</sym><br />
<def></def><br />
<kwc>my</kwc> <def></def><kwb>@seq</kwb> <def></def><sym>= (</sym> <def></def><str>'agggtaaa|tttaccct'</str><def></def><sym>,</sym><br />
<def></def>        <str>'[cgt]gggtaaa|tttaccc[acg]'</str><def></def><sym>,</sym><br />
<def></def>        <str>'a[act]ggtaaa|tttacc[agt]t'</str><def></def><sym>,</sym><br />
<def></def>        <str>'ag[act]gtaaa|tttac[agt]ct'</str><def></def><sym>,</sym><br />
<def></def>        <str>'agg[act]taaa|ttta[agt]cct'</str><def></def><sym>,</sym><br />
<def></def>        <str>'aggg[acg]aaa|ttt[cgt]ccct'</str><def></def><sym>,</sym><br />
<def></def>        <str>'agggt[cgt]aa|tt[acg]accct'</str><def></def><sym>,</sym><br />
<def></def>        <str>'agggta[cgt]a|t[acg]taccct'</str><def></def><sym>,</sym><br />
<def></def>        <str>'agggtaa[cgt]|[acg]ttaccct'</str><def></def> <sym>);</sym><br />
<def></def><br />
<kwc>my</kwc> <def></def><kwb>@cnt</kwb> <def></def><sym>= (</sym><def></def><num>0</num><def></def><sym>)</sym> <def>x</def> <kwb>@seq</kwb><def></def><sym>;</sym><br />
<def></def><kwa>for</kwa> <def></def><kwc>my</kwc> <def></def><kwb>$k</kwb> <def></def><sym>(</sym><def></def><num>0</num><def></def><sym>..</sym><def></def><kwb>$#seq</kwb><def></def><sym>) {</sym><br />
<def></def>  <sym>++</sym><def></def><kwb>$cnt</kwb><def></def><sym>[</sym><def></def><kwb>$k</kwb><def></def><sym>]</sym> <def></def><kwa>while</kwa> <def></def><kwb>$content</kwb><def></def><sym>=~/</sym><def></def><kwb>$seq</kwb><def></def><sym>[</sym><def></def><kwb>$k</kwb><def></def><sym>]/</sym><def></def><kwd>gi</kwd><def></def><sym>;</sym><br />
<def>  printf</def> <str>&quot;$seq[$k] $cnt[$k]</str><esc>\n</esc><str>&quot;</str><def></def><br />
<sym>}</sym><br />
<def></def><br />
<kwc>my</kwc> <def></def><kwb>%iub</kwb> <def></def><sym>= (</sym>         <def>B</def> <sym>=&gt;</sym> <def></def><str>'(c|g|t)'</str><def></def><sym>,</sym>  <def>D</def> <sym>=&gt;</sym> <def></def><str>'(a|g|t)'</str><def></def><sym>,</sym><br />
<def>  H</def> <sym>=&gt;</sym> <def></def><str>'(a|c|t)'</str><def></def><sym>,</sym>   <def>K</def> <sym>=&gt;</sym> <def></def><str>'(g|t)'</str><def></def><sym>,</sym>    <def>M</def> <sym>=&gt;</sym> <def></def><str>'(a|c)'</str><def></def><sym>,</sym><br />
<def>  N</def> <sym>=&gt;</sym> <def></def><str>'(a|c|g|t)'</str><def></def><sym>,</sym> <def>R</def> <sym>=&gt;</sym> <def></def><str>'(a|g)'</str><def></def><sym>,</sym>    <def>S</def> <sym>=&gt;</sym> <def></def><str>'(c|g)'</str><def></def><sym>,</sym><br />
<def>  V</def> <sym>=&gt;</sym> <def></def><str>'(a|c|g)'</str><def></def><sym>,</sym>   <def>W</def> <sym>=&gt;</sym> <def></def><str>'(a|t)'</str><def></def><sym>,</sym>    <def>Y</def> <sym>=&gt;</sym> <def></def><str>'(c|t)'</str><def></def> <sym>);</sym><br />
<def></def><br />
<slc># using $&amp; and no submatch marginally improves the</slc><br />
<def></def><slc># speed here, but mentioning $&amp; causes perl to</slc><br />
<def></def><slc># define that value for the @seq patterns too, which</slc><br />
<def></def><slc># slows those down considerably. No change.</slc><br />
<def></def><br />
<kwc>my</kwc> <def></def><kwb>$findiub</kwb> <def></def><sym>=</sym> <def></def><str>'(['</str><def></def><sym>.(</sym><def>join</def> <str>''</str><def></def><sym>,</sym> <def>keys</def> <kwb>%iub</kwb><def></def><sym>).</sym><def></def><str>'])'</str><def></def><sym>;</sym><br />
<def></def><br />
<kwb>$content</kwb> <def></def><sym>=~</sym> <def>s</def><sym>/</sym><def></def><kwb>$findiub</kwb><def></def><sym>/</sym><def></def><kwb>$iub</kwb><def></def><sym>{</sym><def></def><kwb>$1</kwb><def></def><sym>}/</sym><def></def><kwd>g</kwd><def></def><sym>;</sym><br />
<def><br />
printf</def> <str>&quot;</str><esc>\n</esc><str>%d</str><esc>\n</esc><str>%d</str><esc>\n</esc><str>%d</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def></def><kwb>$l_file</kwb><def></def><sym>,</sym> <def></def><kwb>$l_code</kwb><def></def><sym>,</sym> <def>length</def> <kwb>$content</kwb><def></def><sym>;</sym><def></def><br />
</source>
