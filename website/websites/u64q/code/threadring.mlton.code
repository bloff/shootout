<span class="hl com">(*</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> * contributed by kaustuv Chaudhuri</span>
<span class="hl com"> *)</span>

<span class="hl kwa">fun</span> setup nThreads N <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
      <span class="hl kwa">val</span> res <span class="hl sym">=</span> CML.channel <span class="hl sym">()</span>

      <span class="hl kwa">fun</span> ringT <span class="hl sym">((</span>inn<span class="hl sym">,</span> inc<span class="hl sym">), (</span>oun<span class="hl sym">,</span> ouc<span class="hl sym">)) =</span>
          <span class="hl kwa">let</span>
            <span class="hl kwa">fun</span> loop <span class="hl sym">() =</span>
                <span class="hl sym">(</span><span class="hl kwa">case</span> CML.recv inc <span class="hl kwa">of</span>
                   <span class="hl num">0</span> <span class="hl sym">=&gt;</span> CML.send <span class="hl sym">(</span>res<span class="hl sym">,</span> inn<span class="hl sym">)</span>
                 <span class="hl sym">|</span> n <span class="hl sym">=&gt; (</span>CML.send <span class="hl sym">(</span>ouc<span class="hl sym">,</span> n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">);</span>
                         loop <span class="hl sym">()))</span>
          <span class="hl kwa">in</span>
            CML.spawn loop
          <span class="hl kwa">end</span>

      <span class="hl kwa">val</span> chans <span class="hl kwa">as</span> c0 <span class="hl sym">::</span> c1s <span class="hl sym">=</span>
            <span class="hl kwa">List</span>.tabulate <span class="hl sym">(</span>nThreads<span class="hl sym">,</span> <span class="hl kwa">fn</span> n <span class="hl sym">=&gt; (</span>n <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span> CML.channel <span class="hl sym">()))</span>

      <span class="hl kwa">val</span> threads <span class="hl sym">=</span> <span class="hl kwa">ListPair</span>.map ringT <span class="hl sym">(</span>chans<span class="hl sym">,</span> c1s &#64; <span class="hl sym">[</span>c0<span class="hl sym">])</span>
    <span class="hl kwa">in</span>
      CML.send <span class="hl sym">(</span>#<span class="hl num">2</span> c0<span class="hl sym">,</span> N<span class="hl sym">);</span>
      <span class="hl kwa">TextIO</span>.print <span class="hl sym">(</span><span class="hl kwa">Int</span>.toString <span class="hl sym">(</span>CML.recv res<span class="hl sym">)</span> ^ <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span>
    <span class="hl kwa">end</span>

<span class="hl kwa">fun</span> doit N <span class="hl sym">=</span> RunCML.doit <span class="hl sym">(</span><span class="hl kwa">fn</span> <span class="hl sym">() =&gt;</span> setup <span class="hl num">503</span> N<span class="hl sym">,</span> NONE<span class="hl sym">)</span>

<span class="hl kwa">val</span> _ <span class="hl sym">= (</span>doit <span class="hl kwa">o</span> Option.valOf <span class="hl kwa">o Int</span>.fromString <span class="hl kwa">o List</span>.hd <span class="hl kwa">o</span> CommandLine.arguments<span class="hl sym">) ()</span>
