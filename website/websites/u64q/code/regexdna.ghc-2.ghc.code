<source>
<def></def><slc>-- The Computer Language Benchmarks Game</slc><br />
<def></def><slc>-- http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>-- Contributed by: Sergei Matusevich 2007</slc><br />
<def></def><br />
<kwa>import</kwa> <def>List</def><br />
<kwa>import</kwa> <def>Text.Regex.Posix</def><br />
<kwa>import qualified</kwa> <def>Data.ByteString.Char8</def> <kwa>as</kwa> <def>B<br />
<br />
variants</def> <sym>= [</sym><br />
<def></def>  <str>&quot;agggtaaa|tttaccct&quot;</str><def></def><sym>,</sym><br />
<def></def>  <str>&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</str><def></def><sym>,</sym><br />
<def></def>  <str>&quot;a[act]ggtaaa|tttacc[agt]t&quot;</str><def></def><sym>,</sym><br />
<def></def>  <str>&quot;ag[act]gtaaa|tttac[agt]ct&quot;</str><def></def><sym>,</sym><br />
<def></def>  <str>&quot;agg[act]taaa|ttta[agt]cct&quot;</str><def></def><sym>,</sym><br />
<def></def>  <str>&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</str><def></def><sym>,</sym><br />
<def></def>  <str>&quot;agggt[cgt]aa|tt[acg]accct&quot;</str><def></def><sym>,</sym><br />
<def></def>  <str>&quot;agggta[cgt]a|t[acg]taccct&quot;</str><def></def><sym>,</sym><br />
<def></def>  <str>&quot;agggtaa[cgt]|[acg]ttaccct&quot;</str><def></def> <sym>]</sym><br />
<def><br />
main</def> <sym>=</sym> <def></def><kwa>do</kwa><br />
<def>  file</def> <sym>&lt;-</sym> <def>B.getContents</def><br />
  <kwa>let</kwa> <def></def><sym>[</sym><def>s1</def><sym>,</sym><def>s2</def><sym>,</sym><def>s3</def><sym>] =</sym> <def>map</def> <sym>(</sym><def>B.concat . tail</def><sym>)</sym> <def>$ groupBy notHeader $ B.split '\n' file<br />
  mapM_</def> <sym>(</sym><def>printVars s2 s3</def><sym>)</sym> <def>variants<br />
  putChar '\n'<br />
  print</def> <sym>(</sym><def>B.length file</def><sym>)</sym><br />
<def>  print</def> <sym>(</sym><def>B.length s1</def> <sym>+</sym> <def>B.length s2</def> <sym>+</sym> <def>B.length s3</def><sym>)</sym><br />
<def>  print</def> <sym>(</sym><def>B.length s1</def> <sym>+</sym> <def>B.length s3</def> <sym>+</sym> <def>length</def> <sym>(</sym><def>B.unpack s2</def> <sym>&gt;&gt;=</sym> <def>substCh</def><sym>))</sym><br />
<def></def>  <kwa>where</kwa> <def>notHeader _ s</def> <sym>=</sym> <def>B.null s</def> <sym>||</sym> <def>B.head s</def> <sym>/=</sym> <def>'</def><sym>&gt;</sym><def>'<br />
        substCh 'B'</def> <sym>=</sym> <def></def><str>&quot;(c|g|t)&quot;</str><def><br />
        substCh 'D'</def> <sym>=</sym> <def></def><str>&quot;(a|g|t)&quot;</str><def><br />
        substCh 'H'</def> <sym>=</sym> <def></def><str>&quot;(a|c|t)&quot;</str><def><br />
        substCh 'K'</def> <sym>=</sym> <def></def><str>&quot;(g|t)&quot;</str><def><br />
        substCh 'M'</def> <sym>=</sym> <def></def><str>&quot;(a|c)&quot;</str><def><br />
        substCh 'N'</def> <sym>=</sym> <def></def><str>&quot;(a|c|g|t)&quot;</str><def><br />
        substCh 'R'</def> <sym>=</sym> <def></def><str>&quot;(a|g)&quot;</str><def><br />
        substCh 'S'</def> <sym>=</sym> <def></def><str>&quot;(c|g)&quot;</str><def><br />
        substCh 'V'</def> <sym>=</sym> <def></def><str>&quot;(a|c|g)&quot;</str><def><br />
        substCh 'W'</def> <sym>=</sym> <def></def><str>&quot;(a|t)&quot;</str><def><br />
        substCh 'Y'</def> <sym>=</sym> <def></def><str>&quot;(c|t)&quot;</str><def><br />
        substCh etc</def> <sym>= [</sym><def>etc</def><sym>]</sym><br />
<def>        printVars s2 s3 r</def> <sym>=</sym> <def></def><kwa>do</kwa><br />
<def>                            putStr r<br />
                            putChar ' '<br />
                            print</def> <sym>((</sym><def>s2</def> <sym>=~</sym> <def>r</def> <sym>::</sym> <def></def><kwb>Int</kwb><def></def><sym>) + (</sym><def>s3</def> <sym>=~</sym> <def>r</def> <sym>::</sym> <def></def><kwb>Int</kwb><def></def><sym>))</sym><br />
<def></def><br />
</source>
