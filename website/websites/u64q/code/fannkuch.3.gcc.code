<span class="hl com">/*</span>
<span class="hl com"> * The Computer Lannguage Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> * Contributed by Erik Søe Sørensen</span>
<span class="hl com"> */</span>

<span class="hl dir">#include &lt;stdlib.h&gt;</span>
<span class="hl dir">#include &lt;stdio.h&gt;</span>

<span class="hl kwb">static int</span><span class="hl sym">*</span> count<span class="hl sym">;</span>
<span class="hl kwb">static int</span><span class="hl sym">*</span> perm<span class="hl sym">;</span>
<span class="hl kwb">static int</span> r<span class="hl sym">;</span>
<span class="hl kwb">static int</span> N<span class="hl sym">;</span>

<span class="hl kwb">static int</span> <span class="hl kwd">succ</span><span class="hl sym">() {</span>
    <span class="hl kwa">while</span> <span class="hl sym">(</span>r<span class="hl sym">&gt;</span><span class="hl num">1</span><span class="hl sym">) {</span>r<span class="hl sym">--;</span> count<span class="hl sym">[</span>r<span class="hl sym">]=</span>r<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">;}</span>
    <span class="hl kwa">do</span> <span class="hl sym">{</span>
	<span class="hl kwa">if</span> <span class="hl sym">(</span>r<span class="hl sym">&gt;=</span>N<span class="hl sym">)</span> <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl sym">;</span> <span class="hl com">/* Done. */</span>

	<span class="hl com">/* Rotate lower r elements downwards: */</span>
	<span class="hl kwb">int</span> tmp <span class="hl sym">=</span> perm<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
	<span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>r<span class="hl sym">;</span> i<span class="hl sym">++)</span>
	    perm<span class="hl sym">[</span>i<span class="hl sym">] =</span> perm<span class="hl sym">[</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">];</span>
	perm<span class="hl sym">[</span>r<span class="hl sym">] =</span> tmp<span class="hl sym">;</span>

	<span class="hl com">/* Register the rotation</span>
<span class="hl com">	 * - repeat with higher r if the rotation was completed: */</span>
    <span class="hl sym">}</span> <span class="hl kwa">while</span> <span class="hl sym">(--</span>count<span class="hl sym">[</span>r<span class="hl sym">++] ==</span> <span class="hl num">0</span><span class="hl sym">);</span>
    r<span class="hl sym">--;</span>
    <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>


<span class="hl kwb">void</span> <span class="hl kwd">printperm</span><span class="hl sym">(</span><span class="hl kwb">int</span> p<span class="hl sym">[]) {</span>
    <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>N<span class="hl sym">;</span> i<span class="hl sym">++)</span>
	<span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;%d&quot;</span><span class="hl sym">,</span> p<span class="hl sym">[</span>i<span class="hl sym">]);</span>
    <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">testperm</span><span class="hl sym">(</span><span class="hl kwb">int</span> a<span class="hl sym">[]) {</span>
    <span class="hl kwb">int</span> flips <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

    <span class="hl kwb">int</span> k<span class="hl sym">;</span>
    <span class="hl kwa">while</span> <span class="hl sym">((</span>k<span class="hl sym">=</span>a<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]) &gt;</span> <span class="hl num">1</span><span class="hl sym">) {</span>
	<span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">,</span> j<span class="hl sym">=</span>k<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">;</span>
	<span class="hl kwa">while</span> <span class="hl sym">(</span>i<span class="hl sym">&lt;</span>j<span class="hl sym">) {</span>
	    <span class="hl kwb">int</span> tmp <span class="hl sym">=</span> a<span class="hl sym">[</span>i<span class="hl sym">];</span> a<span class="hl sym">[</span>i<span class="hl sym">] =</span> a<span class="hl sym">[</span>j<span class="hl sym">];</span> a<span class="hl sym">[</span>j<span class="hl sym">] =</span> tmp<span class="hl sym">;</span>
	    i<span class="hl sym">++;</span> j<span class="hl sym">--;</span>
	<span class="hl sym">}</span>
	<span class="hl sym">++</span>flips<span class="hl sym">;</span>
    <span class="hl sym">}</span>
    <span class="hl kwa">return</span> flips<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">const char</span><span class="hl sym">**</span> argv<span class="hl sym">) {</span>
    <span class="hl kwb">int</span> n <span class="hl sym">= (</span>argc<span class="hl sym">&gt;</span><span class="hl num">1</span><span class="hl sym">)</span>? <span class="hl kwd">atoi</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]) :</span> <span class="hl num">0</span><span class="hl sym">;</span>

    N <span class="hl sym">=</span> r <span class="hl sym">=</span> n<span class="hl sym">;</span>
    perm  <span class="hl sym">=</span> <span class="hl kwd">calloc</span><span class="hl sym">(</span>n<span class="hl sym">,</span> <span class="hl kwa">sizeof</span><span class="hl sym">(*</span>perm<span class="hl sym">));</span>
    count <span class="hl sym">=</span> <span class="hl kwd">calloc</span><span class="hl sym">(</span>n<span class="hl sym">,</span> <span class="hl kwa">sizeof</span><span class="hl sym">(*</span>count<span class="hl sym">));</span>

    <span class="hl com">/* Init permutation: */</span>
    <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>N<span class="hl sym">;</span> i<span class="hl sym">++)</span> perm<span class="hl sym">[</span>i<span class="hl sym">]=</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">;</span>

    <span class="hl kwb">int</span> maxFlips <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">0</span> <span class="hl sym">;;</span> i<span class="hl sym">++) {</span>
	<span class="hl kwa">if</span> <span class="hl sym">(</span>i<span class="hl sym">&lt;</span><span class="hl num">30</span><span class="hl sym">)</span> <span class="hl kwd">printperm</span><span class="hl sym">(</span>perm<span class="hl sym">);</span>
	<span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">succ</span><span class="hl sym">())</span> <span class="hl kwa">break</span><span class="hl sym">;</span>

	<span class="hl kwa">if</span> <span class="hl sym">(</span>perm<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]==</span><span class="hl num">1</span> <span class="hl sym">||</span> perm<span class="hl sym">[</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">]==</span>n<span class="hl sym">)</span> <span class="hl kwa">continue</span><span class="hl sym">;</span> <span class="hl com">/* Shortcut */</span>

	<span class="hl com">/* Make a copy: */</span>
	<span class="hl kwb">int</span> tmp<span class="hl sym">[</span>N<span class="hl sym">];</span>
	<span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> j<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> j<span class="hl sym">&lt;</span>N<span class="hl sym">;</span> j<span class="hl sym">++)</span> tmp<span class="hl sym">[</span>j<span class="hl sym">]=</span>perm<span class="hl sym">[</span>j<span class="hl sym">];</span>

	<span class="hl com">/* Try it out: */</span>
	<span class="hl kwb">int</span> flips <span class="hl sym">=</span> <span class="hl kwd">testperm</span><span class="hl sym">(</span>tmp<span class="hl sym">);</span>
	<span class="hl kwa">if</span> <span class="hl sym">(</span>flips <span class="hl sym">&gt;</span> maxFlips<span class="hl sym">)</span> maxFlips <span class="hl sym">=</span> flips<span class="hl sym">;</span>
    <span class="hl sym">}</span>

    <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;Pfannkuchen(%d) = %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> n<span class="hl sym">,</span> maxFlips<span class="hl sym">);</span>
<span class="hl sym">}</span>
