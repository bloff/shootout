<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">  http://shootout.alioth.debian.org/</span>
<span class="hl com">  contributed by Rex Kerr</span>
<span class="hl com">  based on Scala version by Isaac Gouy</span>
<span class="hl com">  with optimization tricks from C version by Petr Prokhorenkov</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> java<span class="hl sym">.</span>io<span class="hl sym">.</span>_

<span class="hl kwa">object</span> fasta <span class="hl sym">{</span>
  <span class="hl kwa">val</span> ALU <span class="hl sym">=</span>
    <span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span> <span class="hl sym">+</span>
    <span class="hl str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span> <span class="hl sym">+</span>
    <span class="hl str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span> <span class="hl sym">+</span>
    <span class="hl str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span> <span class="hl sym">+</span>
    <span class="hl str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span> <span class="hl sym">+</span>
    <span class="hl str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span> <span class="hl sym">+</span>
    <span class="hl str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>

  <span class="hl kwa">val</span> IUBs <span class="hl sym">=</span> <span class="hl str">&quot;acgtBDHKMNRSVWY&quot;</span>
  <span class="hl kwa">val</span> IUBp <span class="hl sym">= (</span>
    <span class="hl kwc">Array</span><span class="hl sym">(</span><span class="hl num">0.27</span><span class="hl sym">,</span><span class="hl num">0.12</span><span class="hl sym">,</span><span class="hl num">0.12</span><span class="hl sym">,</span><span class="hl num">0.27</span><span class="hl sym">) ++</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>fill<span class="hl sym">(</span><span class="hl num">11</span><span class="hl sym">)(</span><span class="hl num">0.02</span><span class="hl sym">)</span>
  <span class="hl sym">).</span>scanLeft<span class="hl sym">(</span><span class="hl num">0.0</span><span class="hl sym">)(</span>_ <span class="hl sym">+</span> _<span class="hl sym">).</span>tail

  <span class="hl kwa">val</span> HSs <span class="hl sym">=</span> <span class="hl str">&quot;acgt&quot;</span>
  <span class="hl kwa">val</span> HSp <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">(</span>
    <span class="hl num">0.3029549426680</span><span class="hl sym">,</span> <span class="hl num">0.1979883004921</span><span class="hl sym">,</span> <span class="hl num">0.1975473066391</span><span class="hl sym">,</span> <span class="hl num">0.3015094502008</span>
  <span class="hl sym">).</span>scanLeft<span class="hl sym">(</span><span class="hl num">0.0</span><span class="hl sym">)(</span>_ <span class="hl sym">+</span> _<span class="hl sym">).</span>tail

  <span class="hl kwa">def</span> main<span class="hl sym">(</span>args<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">String</span><span class="hl sym">]) = {</span>
    <span class="hl kwa">val</span> n <span class="hl sym">=</span> args<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">).</span>toInt
    <span class="hl kwa">val</span> s <span class="hl sym">=</span> <span class="hl kwa">new</span> FastaOutputStream<span class="hl sym">(</span><span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">)</span>

    s<span class="hl sym">.</span>writeRepeating<span class="hl sym">(</span>ALU<span class="hl sym">,</span> n<span class="hl sym">*</span><span class="hl num">2</span><span class="hl sym">,</span> <span class="hl str">&quot;ONE Homo sapiens alu&quot;</span><span class="hl sym">)</span>
    s<span class="hl sym">.</span>writeRandom<span class="hl sym">(</span>IUBs<span class="hl sym">,</span> IUBp<span class="hl sym">,</span> n<span class="hl sym">*</span><span class="hl num">3</span><span class="hl sym">,</span> <span class="hl str">&quot;TWO IUB ambiguity codes&quot;</span><span class="hl sym">)</span>
    s<span class="hl sym">.</span>writeRandom<span class="hl sym">(</span>HSs<span class="hl sym">,</span> HSp<span class="hl sym">,</span> n<span class="hl sym">*</span><span class="hl num">5</span><span class="hl sym">,</span> <span class="hl str">&quot;THREE Homo sapiens frequency&quot;</span><span class="hl sym">)</span>

    s<span class="hl sym">.</span>close
  <span class="hl sym">}</span>
<span class="hl sym">}</span>


<span class="hl slc">// extend the Java BufferedOutputStream class</span>
<span class="hl kwa">class</span> FastaOutputStream<span class="hl sym">(</span>out<span class="hl sym">:</span> <span class="hl kwc">OutputStream</span><span class="hl sym">)</span> <span class="hl kwa">extends</span> <span class="hl kwc">BufferedOutputStream</span><span class="hl sym">(</span>out<span class="hl sym">) {</span>
  <span class="hl kwa">private val</span> TableSize <span class="hl sym">=</span> <span class="hl num">4096</span>
  <span class="hl kwa">private val</span> N <span class="hl sym">=</span> <span class="hl num">60</span>
  <span class="hl kwa">private val</span> chunk <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">Byte</span><span class="hl sym">](</span>N<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>
  <span class="hl kwa">private val</span> nl <span class="hl sym">=</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">.</span>toByte

  <span class="hl slc">// Tail-recursive; can check by prepending &#64;annotation.tailrec</span>
  <span class="hl kwa">private def</span> writeRep<span class="hl sym">(</span>seq<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">Byte</span><span class="hl sym">],</span> n<span class="hl sym">:</span> Int<span class="hl sym">,</span> off<span class="hl sym">:</span> Int <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">) {</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>n <span class="hl sym">&gt;</span> N<span class="hl sym">) {</span>
      <span class="hl kwa">val</span> remains <span class="hl sym">=</span> seq<span class="hl sym">.</span>length <span class="hl sym">-</span> off
      <span class="hl slc">// Assume seq.length &gt;= N!</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>remains<span class="hl sym">&gt;=</span>N<span class="hl sym">) {</span>
        write<span class="hl sym">(</span>seq<span class="hl sym">,</span>off<span class="hl sym">,</span>N<span class="hl sym">);</span> write<span class="hl sym">(</span>nl<span class="hl sym">)</span>
        writeRep<span class="hl sym">(</span>seq<span class="hl sym">,</span> n<span class="hl sym">-</span>N<span class="hl sym">,</span> <span class="hl kwa">if</span> <span class="hl sym">(</span>remains<span class="hl sym">==</span>N<span class="hl sym">)</span> <span class="hl num">0</span> <span class="hl kwa">else</span> off<span class="hl sym">+</span>N<span class="hl sym">)</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">else</span> <span class="hl sym">{</span>
        write<span class="hl sym">(</span>seq<span class="hl sym">,</span>off<span class="hl sym">,</span>remains<span class="hl sym">);</span> write<span class="hl sym">(</span>seq<span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span>N<span class="hl sym">-</span>remains<span class="hl sym">);</span> write<span class="hl sym">(</span>nl<span class="hl sym">)</span>
        writeRep<span class="hl sym">(</span>seq<span class="hl sym">,</span> n<span class="hl sym">-</span>N<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">+</span>N<span class="hl sym">-</span>remains<span class="hl sym">)</span>
      <span class="hl sym">}</span>
    <span class="hl sym">}</span>
    <span class="hl kwa">else</span> <span class="hl sym">{</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;-</span> <span class="hl num">0</span> until n<span class="hl sym">)</span> write<span class="hl sym">(</span>seq<span class="hl sym">((</span>i<span class="hl sym">+</span>off<span class="hl sym">)%</span>seq<span class="hl sym">.</span>length<span class="hl sym">))</span>
      write<span class="hl sym">(</span>nl<span class="hl sym">)</span>
    <span class="hl sym">}</span>
  <span class="hl sym">}</span>
  <span class="hl kwa">def</span> writeRepeating<span class="hl sym">(</span>seq<span class="hl sym">:</span> <span class="hl kwc">String</span><span class="hl sym">,</span> n<span class="hl sym">:</span> Int<span class="hl sym">,</span> desc<span class="hl sym">:</span> <span class="hl kwc">String</span><span class="hl sym">) {</span>
    write<span class="hl sym">( (</span><span class="hl str">&quot;&gt;&quot;</span><span class="hl sym">+</span>desc<span class="hl sym">+</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">).</span>getBytes <span class="hl sym">)</span>
    writeRep<span class="hl sym">(</span>seq<span class="hl sym">.</span>getBytes<span class="hl sym">,</span>n<span class="hl sym">)</span>
  <span class="hl sym">}</span>

  <span class="hl slc">// Tail-recursive (check with &#64;annotation.tailrec)</span>
  <span class="hl kwa">private def</span> writeRand<span class="hl sym">(</span>tab<span class="hl sym">:</span> Table<span class="hl sym">,</span> n<span class="hl sym">:</span> Int<span class="hl sym">) {</span>
    <span class="hl kwa">val</span> m <span class="hl sym">=</span> <span class="hl kwa">if</span> <span class="hl sym">(</span>n <span class="hl sym">&lt;</span> N<span class="hl sym">) {</span> chunk<span class="hl sym">(</span>n<span class="hl sym">) =</span> nl<span class="hl sym">;</span> n <span class="hl sym">}</span> <span class="hl kwa">else</span> N
    <span class="hl kwa">var</span> i <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">while</span> <span class="hl sym">(</span>i<span class="hl sym">&lt;</span>m<span class="hl sym">) {</span>
      chunk<span class="hl sym">(</span>i<span class="hl sym">) =</span> tab<span class="hl sym">.</span>next
      i <span class="hl sym">+=</span> <span class="hl num">1</span>
    <span class="hl sym">}</span>
    write<span class="hl sym">(</span>chunk<span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span>m<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>n <span class="hl sym">&gt;</span> N<span class="hl sym">)</span> writeRand<span class="hl sym">(</span>tab<span class="hl sym">,</span> n<span class="hl sym">-</span>N<span class="hl sym">)</span>
  <span class="hl sym">}</span>
  <span class="hl kwa">def</span> writeRandom<span class="hl sym">(</span>seq<span class="hl sym">:</span> <span class="hl kwc">String</span><span class="hl sym">,</span> dist<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">Double</span><span class="hl sym">],</span> n<span class="hl sym">:</span> Int<span class="hl sym">,</span> desc<span class="hl sym">:</span> <span class="hl kwc">String</span><span class="hl sym">) {</span>
    write<span class="hl sym">( (</span><span class="hl str">&quot;&gt;&quot;</span><span class="hl sym">+</span>desc<span class="hl sym">+</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">).</span>getBytes <span class="hl sym">)</span>
    chunk<span class="hl sym">(</span>N<span class="hl sym">) =</span> nl
    <span class="hl kwa">val</span> tab <span class="hl sym">=</span> <span class="hl kwa">new</span> Table<span class="hl sym">(</span>seq<span class="hl sym">.</span>getBytes<span class="hl sym">,</span> dist<span class="hl sym">,</span> TableSize<span class="hl sym">)</span>
    writeRand<span class="hl sym">(</span>tab<span class="hl sym">,</span>n<span class="hl sym">)</span>
  <span class="hl sym">}</span>

  <span class="hl slc">// Constant time lookup table, assumes (1/size) &lt; p(rarest entry)</span>
  <span class="hl kwa">private class</span> Table<span class="hl sym">(</span>bytes<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">Byte</span><span class="hl sym">],</span> dist<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">Double</span><span class="hl sym">],</span> size<span class="hl sym">:</span> Int<span class="hl sym">) {</span>
    <span class="hl kwa">abstract class</span> X <span class="hl sym">{</span> <span class="hl kwa">def</span> pick<span class="hl sym">(</span>d<span class="hl sym">:</span> <span class="hl kwc">Double</span><span class="hl sym">):</span> <span class="hl kwc">Byte</span> <span class="hl sym">}</span>
    <span class="hl kwa">class</span> B<span class="hl sym">(</span>b<span class="hl sym">:</span> <span class="hl kwc">Byte</span><span class="hl sym">)</span> <span class="hl kwa">extends</span> X <span class="hl sym">{</span> <span class="hl kwa">def</span> pick<span class="hl sym">(</span>d<span class="hl sym">:</span> <span class="hl kwc">Double</span><span class="hl sym">) =</span> b <span class="hl sym">}</span>
    <span class="hl kwa">class</span> P<span class="hl sym">(</span>b0 <span class="hl sym">:</span> <span class="hl kwc">Byte</span><span class="hl sym">,</span> p<span class="hl sym">:</span> <span class="hl kwc">Double</span><span class="hl sym">,</span> b1<span class="hl sym">:</span> <span class="hl kwc">Byte</span><span class="hl sym">)</span> <span class="hl kwa">extends</span> X <span class="hl sym">{</span>
      <span class="hl kwa">def</span> pick<span class="hl sym">(</span>d<span class="hl sym">:</span> <span class="hl kwc">Double</span><span class="hl sym">) =</span> <span class="hl kwa">if</span> <span class="hl sym">(</span>d <span class="hl sym">&lt;</span> p<span class="hl sym">)</span> b0 <span class="hl kwa">else</span> b1
    <span class="hl sym">}</span>

    <span class="hl kwa">def</span> seek<span class="hl sym">(</span>p<span class="hl sym">:</span> <span class="hl kwc">Double</span><span class="hl sym">):</span> Int <span class="hl sym">= {</span>
      <span class="hl kwa">var</span> i <span class="hl sym">=</span> <span class="hl num">0</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">&lt;</span>dist<span class="hl sym">.</span>length <span class="hl sym">&amp;&amp;</span> p <span class="hl sym">&gt;=</span> dist<span class="hl sym">(</span>i<span class="hl sym">))</span> i <span class="hl sym">+=</span> <span class="hl num">1</span>
      i
    <span class="hl sym">}</span>
    <span class="hl kwa">var</span> lastj <span class="hl sym">= -</span><span class="hl num">1</span>
    <span class="hl kwa">var</span> lastX <span class="hl sym">=</span> null<span class="hl sym">:</span>X
    <span class="hl kwa">val</span> lookup<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span>X<span class="hl sym">] = (</span><span class="hl num">0</span> until size<span class="hl sym">).</span>map<span class="hl sym">(</span>i <span class="hl sym">=&gt; {</span>
      <span class="hl kwa">val</span> <span class="hl sym">(</span>j0<span class="hl sym">,</span>j1<span class="hl sym">) = (</span>seek<span class="hl sym">(</span>i<span class="hl sym">.</span>toDouble<span class="hl sym">/</span>size<span class="hl sym">),</span> seek<span class="hl sym">((</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">).</span>toDouble<span class="hl sym">/</span>size<span class="hl sym">))</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>j0<span class="hl sym">==</span>j1<span class="hl sym">) {</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>lastj<span class="hl sym">==</span>j0<span class="hl sym">)</span> lastX
        <span class="hl kwa">else</span> <span class="hl sym">{</span>
          lastX <span class="hl sym">=</span> <span class="hl kwa">new</span> B<span class="hl sym">(</span>bytes<span class="hl sym">(</span>j0<span class="hl sym">))</span>
          lastj <span class="hl sym">=</span> j0
          lastX
        <span class="hl sym">}</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">else</span> <span class="hl sym">{</span>
        lastj <span class="hl sym">= -</span><span class="hl num">1</span>
        <span class="hl kwa">new</span> P<span class="hl sym">(</span>bytes<span class="hl sym">(</span>j0<span class="hl sym">),</span>dist<span class="hl sym">(</span>j0<span class="hl sym">),</span>bytes<span class="hl sym">(</span>j1<span class="hl sym">))</span>
      <span class="hl sym">}</span>
    <span class="hl sym">}).</span>toArray
    
    <span class="hl kwa">def</span> next <span class="hl sym">= {</span>
      <span class="hl kwa">val</span> p <span class="hl sym">=</span> RandomNumber<span class="hl sym">.</span>next
      lookup<span class="hl sym">((</span>p<span class="hl sym">*</span>size<span class="hl sym">).</span>toInt<span class="hl sym">).</span>pick<span class="hl sym">(</span>p<span class="hl sym">)</span>
    <span class="hl sym">}</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">private object</span> RandomNumber <span class="hl sym">{</span>
    <span class="hl kwa">val</span> <span class="hl sym">(</span>im<span class="hl sym">,</span>ia<span class="hl sym">,</span>ic<span class="hl sym">) = (</span><span class="hl num">139968</span><span class="hl sym">,</span><span class="hl num">3877</span><span class="hl sym">,</span><span class="hl num">29573</span><span class="hl sym">)</span>
    <span class="hl kwa">val</span> scale <span class="hl sym">=</span> <span class="hl num">1.0</span><span class="hl sym">/</span>im
    <span class="hl kwa">var</span> seed <span class="hl sym">=</span> <span class="hl num">42</span>
    <span class="hl kwa">def</span> next <span class="hl sym">= {</span> seed <span class="hl sym">= (</span>seed <span class="hl sym">*</span> ia <span class="hl sym">+</span> ic<span class="hl sym">) %</span> im<span class="hl sym">;</span> seed<span class="hl sym">*</span>scale <span class="hl sym">}</span>
  <span class="hl sym">}</span>
<span class="hl sym">}</span>
