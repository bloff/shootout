<source>
<def></def><sym>&lt;</sym><def>?php</def><br />
<com>/* The Computer Language Shootout</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com></com><br />
<com>   contributed by Peter Baltruschat</com><br />
<com>*/</com><def></def><br />
<br />
<kwa>function</kwa> <def></def><kwd>bottomUpTree</kwd><def></def><sym>(</sym><def></def><kwc>$item</kwc><def></def><sym>,</sym> <def></def><kwc>$depth</kwc><def></def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>   <kwa>if</kwa><def></def><sym>(</sym><def></def><kwc>$depth</kwc><def></def><sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def></def>      <sym>--</sym><def></def><kwc>$depth</kwc><def></def><sym>;</sym><br />
<def></def>      <kwc>$newItem</kwc> <def></def><sym>=</sym> <def></def><kwc>$item</kwc><def></def><sym>&lt;&lt;</sym><def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>      <kwa>return array</kwa><def></def><sym>(</sym><br />
<def></def>         <kwd>bottomUpTree</kwd><def></def><sym>(</sym><def></def><kwc>$newItem</kwc> <def></def><sym>-</sym> <def></def><num>1</num><def></def><sym>,</sym> <def></def><kwc>$depth</kwc><def></def><sym>),</sym><br />
<def></def>         <kwd>bottomUpTree</kwd><def></def><sym>(</sym><def></def><kwc>$newItem</kwc><def></def><sym>,</sym> <def></def><kwc>$depth</kwc><def></def><sym>),</sym><br />
<def></def>         <kwc>$item</kwc><br />
<def></def>      <sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def></def>   <kwa>return array</kwa><def></def><sym>(</sym><def>NULL</def><sym>,</sym> <def>NULL</def><sym>,</sym> <def></def><kwc>$item</kwc><def></def><sym>);</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwa>function</kwa> <def></def><kwd>itemCheck</kwd><def></def><sym>(</sym><def></def><kwc>$treeNode</kwc><def></def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>   <kwc>$check</kwc> <def></def><sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>   do</def><br />
   <sym>{</sym><br />
<def></def>      <kwc>$check</kwc> <def></def><sym>+=</sym> <def></def><kwc>$treeNode</kwc><def></def><sym>[</sym><def></def><num>2</num><def></def><sym>];</sym><br />
<def></def>      <kwa>if</kwa><def></def><sym>(</sym><def>NULL</def> <sym>==</sym> <def></def><kwc>$treeNode</kwc><def></def><sym>[</sym><def></def><num>0</num><def></def><sym>])</sym><br />
<def></def>      <sym>{</sym><br />
<def></def>         <kwa>return</kwa> <def></def><kwc>$check</kwc><def></def><sym>;</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>      <kwc>$check</kwc> <def></def><sym>-=</sym> <def></def><kwd>itemCheck</kwd><def></def><sym>(</sym><def></def><kwc>$treeNode</kwc><def></def><sym>[</sym><def></def><num>1</num><def></def><sym>]);</sym><br />
<def></def>      <kwc>$treeNode</kwc> <def></def><sym>=</sym> <def></def><kwc>$treeNode</kwc><def></def><sym>[</sym><def></def><num>0</num><def></def><sym>];</sym><br />
<def></def>   <sym>}</sym><br />
<def></def>   <kwa>while</kwa><def></def><sym>(</sym><def>TRUE</def><sym>);</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwc>$minDepth</kwc> <def></def><sym>=</sym> <def></def><num>4</num><def></def><sym>;</sym><br />
<def></def><br />
<kwc>$n</kwc> <def></def><sym>= (</sym><def></def><kwc>$argc</kwc> <def></def><sym>==</sym> <def></def><num>2</num><def></def><sym>)</sym> <def>?</def> <kwc>$argv</kwc><def></def><sym>[</sym><def></def><num>1</num><def></def><sym>] :</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def><kwc>$maxDepth</kwc> <def></def><sym>=</sym> <def></def><kwa>max</kwa><def></def><sym>(</sym><def></def><kwc>$minDepth</kwc> <def></def><sym>+</sym> <def></def><num>2</num><def></def><sym>,</sym> <def></def><kwc>$n</kwc><def></def><sym>);</sym><br />
<def></def><kwc>$stretchDepth</kwc> <def></def><sym>=</sym> <def></def><kwc>$maxDepth</kwc> <def></def><sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def><br />
<kwc>$stretchTree</kwc> <def></def><sym>=</sym> <def></def><kwd>bottomUpTree</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def></def><kwc>$stretchDepth</kwc><def></def><sym>);</sym><br />
<def></def><kwa>printf</kwa><def></def><sym>(</sym><def></def><str>&quot;stretch tree of depth %d</str><esc>\t</esc> <str>check: %d</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym><br />
<def></def><kwc>$stretchDepth</kwc><def></def><sym>,</sym> <def></def><kwd>itemCheck</kwd><def></def><sym>(</sym><def></def><kwc>$stretchTree</kwc><def></def><sym>));</sym><br />
<def></def><kwa>unset</kwa><def></def><sym>(</sym><def></def><kwc>$stretchTree</kwc><def></def><sym>);</sym><br />
<def></def><br />
<kwc>$longLivedTree</kwc> <def></def><sym>=</sym> <def></def><kwd>bottomUpTree</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def></def><kwc>$maxDepth</kwc><def></def><sym>);</sym><br />
<def></def><br />
<kwc>$iterations</kwc> <def></def><sym>=</sym> <def></def><num>1</num> <def></def><sym>&lt;&lt; (</sym><def></def><kwc>$maxDepth</kwc><def></def><sym>);</sym><br />
<def>do</def><br />
<sym>{</sym><br />
<def></def>   <kwc>$check</kwc> <def></def><sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>   <kwa>for</kwa><def></def><sym>(</sym><def></def><kwc>$i</kwc> <def></def><sym>=</sym> <def></def><num>1</num><def></def><sym>;</sym> <def></def><kwc>$i</kwc> <def></def><sym>&lt;=</sym> <def></def><kwc>$iterations</kwc><def></def><sym>; ++</sym><def></def><kwc>$i</kwc><def></def><sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def></def>      <kwc>$t</kwc> <def></def><sym>=</sym> <def></def><kwd>bottomUpTree</kwd><def></def><sym>(</sym><def></def><kwc>$i</kwc><def></def><sym>,</sym> <def></def><kwc>$minDepth</kwc><def></def><sym>);</sym><br />
<def></def>      <kwc>$check</kwc> <def></def><sym>+=</sym> <def></def><kwd>itemCheck</kwd><def></def><sym>(</sym><def></def><kwc>$t</kwc><def></def><sym>);</sym><br />
<def></def>      <kwa>unset</kwa><def></def><sym>(</sym><def></def><kwc>$t</kwc><def></def><sym>);</sym><br />
<def></def>      <kwc>$t</kwc> <def></def><sym>=</sym> <def></def><kwd>bottomUpTree</kwd><def></def><sym>(-</sym><def></def><kwc>$i</kwc><def></def><sym>,</sym> <def></def><kwc>$minDepth</kwc><def></def><sym>);</sym><br />
<def></def>      <kwc>$check</kwc> <def></def><sym>+=</sym> <def></def><kwd>itemCheck</kwd><def></def><sym>(</sym><def></def><kwc>$t</kwc><def></def><sym>);</sym><br />
<def></def>      <kwa>unset</kwa><def></def><sym>(</sym><def></def><kwc>$t</kwc><def></def><sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>printf</kwa><def></def><sym>(</sym><def></def><str>&quot;%d</str><esc>\t</esc> <str>trees of depth %d</str><esc>\t</esc> <str>check: %d</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym><br />
<def></def><kwc>$iterations</kwc><def></def><sym>&lt;&lt;</sym><def></def><num>1</num><def></def><sym>,</sym> <def></def><kwc>$minDepth</kwc><def></def><sym>,</sym> <def></def><kwc>$check</kwc><def></def><sym>);</sym><br />
<def></def><br />
   <kwc>$minDepth</kwc> <def></def><sym>+=</sym> <def></def><num>2</num><def></def><sym>;</sym><br />
<def></def>   <kwc>$iterations</kwc> <def></def><sym>&gt;&gt;=</sym> <def></def><num>2</num><def></def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><kwa>while</kwa><def></def><sym>(</sym><def></def><kwc>$minDepth</kwc> <def></def><sym>&lt;=</sym> <def></def><kwc>$maxDepth</kwc><def></def><sym>);</sym><br />
<def></def><br />
<kwa>printf</kwa><def></def><sym>(</sym><def></def><str>&quot;long lived tree of depth %d</str><esc>\t</esc> <str>check: %d</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym><br />
<def></def><kwc>$maxDepth</kwc><def></def><sym>,</sym> <def></def><kwd>itemCheck</kwd><def></def><sym>(</sym><def></def><kwc>$longLivedTree</kwc><def></def><sym>));</sym><br />
<def>?</def><sym>&gt;</sym><def></def><br />
</source>
