<source>
<def></def><com>/* The Computer Language Shootout Benchmarks</com><br />
<com>http://shootout.alioth.debian.org/</com><br />
<com></com><br />
<com>contributed by Benoit Hudson based on a contribution of Kevin Carson</com><br />
<com>compilation:</com><br />
<com>gcc -O3 -fomit-frame-pointer binary-trees-2.c</com><br />
<com> */</com><def></def><br />
<br />
<dir>#include &lt;stdlib.h&gt;</dir><br />
<def></def><dir>#include &lt;stdio.h&gt;</dir><br />
<def></def><br />
<kwc>typedef</kwc> <def></def><kwb>struct</kwb> <def>tn</def> <sym>{</sym><br />
<def></def>  <kwb>struct</kwb> <def>tn</def><sym>*</sym>    <def>left</def><sym>;</sym><br />
<def></def>  <kwb>struct</kwb> <def>tn</def><sym>*</sym>    <def>right</def><sym>;</sym><br />
<def></def>  <kwb>long</kwb>          <def>item</def><sym>;</sym><br />
<def></def><sym>}</sym> <def>treeNode</def><sym>;</sym><br />
<def></def><br />
<kwb>static</kwb> <def>treeNode</def> <sym>*</sym><def>freelist</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def><br />
treeNode</def><sym>*</sym> <def></def><kwd>NewTreeNode</kwd><def></def><sym>(</sym><def>treeNode</def><sym>*</sym> <def>left</def><sym>,</sym> <def>treeNode</def><sym>*</sym> <def>right</def><sym>,</sym> <def></def><kwb>long</kwb> <def>item</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def>  treeNode</def><sym>*</sym>    <def></def><kwa>new</kwa><def></def><sym>;</sym><br />
<def></def><br />
  <kwa>if</kwa> <def></def><sym>(</sym><def>NULL</def> <sym>==</sym> <def>freelist</def><sym>) {</sym><br />
<def></def>    <kwa>new</kwa> <def></def><sym>= (</sym><def>treeNode</def><sym>*)</sym><def></def><kwd>malloc</kwd><def></def><sym>(</sym><def></def><kwa>sizeof</kwa><def></def><sym>(</sym><def>treeNode</def><sym>));</sym><br />
<def></def>  <sym>}</sym> <def></def><kwa>else</kwa> <def></def><sym>{</sym><br />
<def></def>    <kwa>new</kwa> <def></def><sym>=</sym> <def>freelist</def><sym>;</sym><br />
<def>    freelist</def> <sym>=</sym> <def>freelist</def> <sym>-&gt;</sym> <def>left</def><sym>;</sym><br />
<def></def>  <sym>}</sym><br />
<def></def><br />
  <kwa>new</kwa><def></def><sym>-&gt;</sym><def>left</def> <sym>=</sym> <def>left</def><sym>;</sym><br />
<def></def>  <kwa>new</kwa><def></def><sym>-&gt;</sym><def>right</def> <sym>=</sym> <def>right</def><sym>;</sym><br />
<def></def>  <kwa>new</kwa><def></def><sym>-&gt;</sym><def>item</def> <sym>=</sym> <def>item</def><sym>;</sym><br />
<def></def><br />
  <kwa>return new</kwa><def></def><sym>;</sym><br />
<def></def><sym>}</sym> <def></def><com>/* NewTreeNode() */</com><def></def><br />
<br />
<br />
<kwb>long</kwb> <def></def><kwd>ItemCheck</kwd><def></def><sym>(</sym><def>treeNode</def><sym>*</sym> <def>tree</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>  <kwa>if</kwa> <def></def><sym>(</sym><def>tree</def><sym>-&gt;</sym><def>left</def> <sym>==</sym> <def>NULL</def><sym>)</sym><br />
<def></def>    <kwa>return</kwa> <def>tree</def><sym>-&gt;</sym><def>item</def><sym>;</sym><br />
<def></def>  <kwa>else</kwa><br />
<def></def>    <kwa>return</kwa> <def>tree</def><sym>-&gt;</sym><def>item</def> <sym>+</sym> <def></def><kwd>ItemCheck</kwd><def></def><sym>(</sym><def>tree</def><sym>-&gt;</sym><def>left</def><sym>) -</sym> <def></def><kwd>ItemCheck</kwd><def></def><sym>(</sym><def>tree</def><sym>-&gt;</sym><def>right</def><sym>);</sym><br />
<def></def><sym>}</sym> <def></def><com>/* ItemCheck() */</com><def><br />
<br />
<br />
treeNode</def><sym>*</sym> <def></def><kwd>BottomUpTree</kwd><def></def><sym>(</sym><def></def><kwb>long</kwb> <def>item</def><sym>,</sym> <def></def><kwb>unsigned</kwb> <def>depth</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>  <kwa>if</kwa> <def></def><sym>(</sym><def>depth</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>)</sym><br />
<def></def>    <kwa>return</kwa> <def>NewTreeNode</def><br />
      <sym>(</sym><br />
<def></def>       <kwd>BottomUpTree</kwd><def></def><sym>(</sym><def></def><num>2</num> <def></def><sym>*</sym> <def>item</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>depth</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>),</sym><br />
<def></def>       <kwd>BottomUpTree</kwd><def></def><sym>(</sym><def></def><num>2</num> <def></def><sym>*</sym> <def>item</def><sym>,</sym> <def>depth</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>),</sym><br />
<def>       item</def><br />
      <sym>);</sym><br />
<def></def>  <kwa>else</kwa><br />
<def></def>    <kwa>return</kwa> <def></def><kwd>NewTreeNode</kwd><def></def><sym>(</sym><def>NULL</def><sym>,</sym> <def>NULL</def><sym>,</sym> <def>item</def><sym>);</sym><br />
<def></def><sym>}</sym> <def></def><com>/* BottomUpTree() */</com><def></def><br />
<br />
<br />
<kwb>void</kwb> <def></def><kwd>DeleteTree</kwd><def></def><sym>(</sym><def>treeNode</def><sym>*</sym> <def>tree</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>  <kwa>if</kwa> <def></def><sym>(</sym><def>tree</def><sym>-&gt;</sym><def>left</def> <sym>!=</sym> <def>NULL</def><sym>)</sym><br />
<def></def>  <sym>{</sym><br />
<def></def>    <kwd>DeleteTree</kwd><def></def><sym>(</sym><def>tree</def><sym>-&gt;</sym><def>left</def><sym>);</sym><br />
<def></def>    <kwd>DeleteTree</kwd><def></def><sym>(</sym><def>tree</def><sym>-&gt;</sym><def>right</def><sym>);</sym><br />
<def></def>  <sym>}</sym><br />
<def><br />
  tree</def> <sym>-&gt;</sym> <def>left</def> <sym>=</sym> <def>freelist</def><sym>;</sym><br />
<def>  freelist</def> <sym>=</sym> <def>tree</def><sym>;</sym><br />
<def></def><sym>}</sym> <def></def><com>/* DeleteTree() */</com><def></def><br />
<br />
<br />
<kwb>int</kwb> <def></def><kwd>main</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>argc</def><sym>,</sym> <def></def><kwb>char</kwb><def></def><sym>*</sym> <def>argv</def><sym>[])</sym><br />
<def></def><sym>{</sym><br />
<def></def>  <kwb>unsigned</kwb>   <def>N</def><sym>,</sym> <def>depth</def><sym>,</sym> <def>minDepth</def><sym>,</sym> <def>maxDepth</def><sym>,</sym> <def>stretchDepth</def><sym>;</sym><br />
<def>  treeNode</def>   <sym>*</sym><def>stretchTree</def><sym>, *</sym><def>longLivedTree</def><sym>, *</sym><def>tempTree</def><sym>;</sym><br />
<def><br />
  N</def> <sym>=</sym> <def></def><kwd>atol</kwd><def></def><sym>(</sym><def>argv</def><sym>[</sym><def></def><num>1</num><def></def><sym>]);</sym><br />
<def><br />
  minDepth</def> <sym>=</sym> <def></def><num>4</num><def></def><sym>;</sym><br />
<def></def><br />
  <kwa>if</kwa> <def></def><sym>((</sym><def>minDepth</def> <sym>+</sym> <def></def><num>2</num><def></def><sym>) &gt;</sym> <def>N</def><sym>)</sym><br />
<def>    maxDepth</def> <sym>=</sym> <def>minDepth</def> <sym>+</sym> <def></def><num>2</num><def></def><sym>;</sym><br />
<def></def>  <kwa>else</kwa><br />
<def>    maxDepth</def> <sym>=</sym> <def>N</def><sym>;</sym><br />
<def><br />
  stretchDepth</def> <sym>=</sym> <def>maxDepth</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def><br />
  stretchTree</def> <sym>=</sym> <def></def><kwd>BottomUpTree</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def>stretchDepth</def><sym>);</sym><br />
<def>  printf</def><br />
    <sym>(</sym><br />
<def></def>     <str>&quot;stretch tree of depth %u</str><esc>\t</esc> <str>check: %li</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym><br />
<def>     stretchDepth</def><sym>,</sym><br />
<def></def>     <kwd>ItemCheck</kwd><def></def><sym>(</sym><def>stretchTree</def><sym>)</sym><br />
<def></def>    <sym>);</sym><br />
<def></def><br />
  <kwd>DeleteTree</kwd><def></def><sym>(</sym><def>stretchTree</def><sym>);</sym><br />
<def><br />
  longLivedTree</def> <sym>=</sym> <def></def><kwd>BottomUpTree</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def>maxDepth</def><sym>);</sym><br />
<def></def><br />
  <kwa>for</kwa> <def></def><sym>(</sym><def>depth</def> <sym>=</sym> <def>minDepth</def><sym>;</sym> <def>depth</def> <sym>&lt;=</sym> <def>maxDepth</def><sym>;</sym> <def>depth</def> <sym>+=</sym> <def></def><num>2</num><def></def><sym>)</sym><br />
<def></def>  <sym>{</sym><br />
<def></def>    <kwb>long</kwb>    <def>i</def><sym>,</sym> <def>iterations</def><sym>,</sym> <def>check</def><sym>;</sym><br />
<def><br />
    iterations</def> <sym>=</sym> <def></def><num>1</num> <def></def><sym>&lt;&lt; (</sym><def>maxDepth</def> <sym>-</sym> <def>depth</def> <sym>+</sym> <def>minDepth</def><sym>);</sym><br />
<def><br />
    check</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><br />
    <kwa>for</kwa> <def></def><sym>(</sym><def>i</def> <sym>=</sym> <def></def><num>1</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;=</sym> <def>iterations</def><sym>;</sym> <def>i</def><sym>++)</sym><br />
<def></def>    <sym>{</sym><br />
<def>      tempTree</def> <sym>=</sym> <def></def><kwd>BottomUpTree</kwd><def></def><sym>(</sym><def>i</def><sym>,</sym> <def>depth</def><sym>);</sym><br />
<def>      check</def> <sym>+=</sym> <def></def><kwd>ItemCheck</kwd><def></def><sym>(</sym><def>tempTree</def><sym>);</sym><br />
<def></def>      <kwd>DeleteTree</kwd><def></def><sym>(</sym><def>tempTree</def><sym>);</sym><br />
<def><br />
      tempTree</def> <sym>=</sym> <def></def><kwd>BottomUpTree</kwd><def></def><sym>(-</sym><def>i</def><sym>,</sym> <def>depth</def><sym>);</sym><br />
<def>      check</def> <sym>+=</sym> <def></def><kwd>ItemCheck</kwd><def></def><sym>(</sym><def>tempTree</def><sym>);</sym><br />
<def></def>      <kwd>DeleteTree</kwd><def></def><sym>(</sym><def>tempTree</def><sym>);</sym><br />
<def></def>    <sym>}</sym> <def></def><com>/* for(i = 1...) */</com><def><br />
<br />
    printf</def><br />
      <sym>(</sym><br />
<def></def>       <str>&quot;%li</str><esc>\t</esc> <str>trees of depth %u</str><esc>\t</esc> <str>check: %li</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym><br />
<def>       iterations</def> <sym>*</sym> <def></def><num>2</num><def></def><sym>,</sym><br />
<def>       depth</def><sym>,</sym><br />
<def>       check</def><br />
      <sym>);</sym><br />
<def></def>  <sym>}</sym> <def></def><com>/* for(depth = minDepth...) */</com><def><br />
<br />
  printf</def><br />
    <sym>(</sym><br />
<def></def>     <str>&quot;long lived tree of depth %u</str><esc>\t</esc> <str>check: %li</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym><br />
<def>     maxDepth</def><sym>,</sym><br />
<def></def>     <kwd>ItemCheck</kwd><def></def><sym>(</sym><def>longLivedTree</def><sym>)</sym><br />
<def></def>    <sym>);</sym><br />
<def></def><br />
  <kwa>return</kwa> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><sym>}</sym> <def></def><com>/* main() */</com><def></def><br />
<br />
</source>
