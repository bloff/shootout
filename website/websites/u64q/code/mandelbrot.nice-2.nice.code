<source>
<def></def><com>/* The Computer Language Shootout</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com>   contributed by Isaac Gouy</com><br />
<com>*/</com><def></def><br />
<br />
<kwa>import</kwa> <def>java</def><sym>.</sym><def>io</def><sym>.*;</sym><br />
<def></def><br />
<kwb>void</kwb> <def>main</def><sym>(</sym><def>String</def><sym>[]</sym> <def>args</def><sym>){</sym><br />
<def></def>   <kwa>let</kwa> <def>width</def> <sym>=</sym> <def>Integer</def><sym>.</sym><def>parseInt</def><sym>(</sym><def>args</def><sym>[</sym><def></def><num>0</num><def></def><sym>]);</sym><br />
<def></def>   <kwa>let</kwa> <def>height</def> <sym>=</sym> <def>width</def><sym>;</sym><br />
<def>   println</def><sym>(</sym><def></def><str>&quot;P4\n&quot;</str><def></def> <sym>+</sym> <def>width</def> <sym>+</sym> <def></def><str>&quot; &quot;</str><def></def> <sym>+</sym> <def>height</def><sym>);</sym><br />
<def></def><br />
   <kwa>let</kwa> <def>s</def> <sym>=</sym> <def></def><kwa>new</kwa> <def>BufferedOutputStream</def><sym>(</sym><def>System</def><sym>.</sym><def>out</def><sym>);</sym><br />
<def></def>   <kwa>let</kwa> <def>limitSquared</def> <sym>=</sym> <def></def><num>4.0</num><def></def><sym>;</sym><br />
<def></def>   <kwa>let</kwa> <def>iterations</def> <sym>=</sym> <def></def><num>50</num><def></def><sym>;</sym><br />
<def></def>   <kwa>var</kwa> <def>isOverLimit</def> <sym>=</sym> <def>false</def><sym>;</sym><br />
<def></def>   <kwa>var</kwa> <def>bits</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def></def><kwa>var</kwa> <def>bitnum</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><br />
   <kwa>for</kwa><def></def><sym>(</sym><def></def><kwa>var</kwa> <def>y</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>y</def><sym>&lt;</sym><def>height</def><sym>;</sym> <def>y</def><sym>++){</sym><br />
<def></def>      <kwa>for</kwa><def></def><sym>(</sym><def></def><kwa>var</kwa> <def>x</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>x</def><sym>&lt;</sym><def>width</def><sym>;</sym> <def>x</def><sym>++){</sym><br />
<def></def><br />
         <kwa>var</kwa> <def>Zr</def> <sym>=</sym> <def></def><num>0.0</num><def></def><sym>;</sym> <def></def><kwa>var</kwa> <def>Zi</def> <sym>=</sym> <def></def><num>0.0</num><def></def><sym>;</sym><br />
<def></def>         <kwa>let</kwa> <def>Cr</def> <sym>= (</sym><def></def><num>2.0</num><def></def><sym>*</sym><def>x</def><sym>/</sym><def>width</def> <sym>-</sym> <def></def><num>1.5</num><def></def><sym>);</sym> <def></def><kwa>let</kwa> <def>Ci</def> <sym>= (</sym><def></def><num>2.0</num><def></def><sym>*</sym><def>y</def><sym>/</sym><def>height</def> <sym>-</sym> <def></def><num>1.0</num><def></def><sym>);</sym><br />
<def></def><br />
         <kwa>var</kwa> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>         <kwa>do</kwa> <def></def><sym>{</sym><br />
<def></def>            <kwa>let</kwa> <def>Tr</def> <sym>=</sym> <def>Zr</def><sym>*</sym><def>Zr</def> <sym>-</sym> <def>Zi</def><sym>*</sym><def>Zi</def> <sym>+</sym> <def>Cr</def><sym>;</sym><br />
<def></def>            <kwa>let</kwa> <def>Ti</def> <sym>=</sym> <def></def><num>2.0</num><def></def><sym>*</sym><def>Zr</def><sym>*</sym><def>Zi</def> <sym>+</sym> <def>Ci</def><sym>;</sym><br />
<def>            Zr</def> <sym>=</sym> <def>Tr</def><sym>;</sym> <def>Zi</def> <sym>=</sym> <def>Ti</def><sym>;</sym><br />
<def>            isOverLimit</def> <sym>=</sym> <def>Zr</def><sym>*</sym><def>Zr</def> <sym>+</sym> <def>Zi</def><sym>*</sym><def>Zi</def> <sym>&gt;</sym> <def>limitSquared</def><sym>;</sym><br />
<def></def>         <sym>}</sym> <def></def><kwa>while</kwa> <def></def><sym>(!</sym><def>isOverLimit</def> <sym>&amp;&amp; (++</sym><def>i</def> <sym>&lt;</sym> <def>iterations</def><sym>));</sym><br />
<def><br />
         bits</def> <sym>=</sym> <def>bits</def> <sym>&lt;&lt;</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(!</sym><def>isOverLimit</def><sym>)</sym> <def>bits</def><sym>++;</sym><br />
<def>         bitnum</def><sym>++;</sym><br />
<def></def><br />
         <kwa>if</kwa> <def></def><sym>(</sym><def>x</def> <sym>==</sym> <def>width</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>) {</sym><br />
<def>            bits</def> <sym>=</sym> <def>bits</def> <sym>&lt;&lt; (</sym><def></def><num>8</num> <def></def><sym>-</sym> <def>bitnum</def><sym>);</sym><br />
<def>            bitnum</def> <sym>=</sym> <def></def><num>8</num><def></def><sym>;</sym><br />
<def></def>         <sym>}</sym><br />
<def></def><br />
         <kwa>if</kwa> <def></def><sym>(</sym><def>bitnum</def> <sym>==</sym> <def></def><num>8</num><def></def><sym>){</sym><br />
<def></def>            <kwa>let</kwa> <def></def><kwb>byte</kwb> <def>b</def> <sym>=</sym> <def>cast</def><sym>(</sym><def>bits</def><sym>);</sym> <def>s</def><sym>.</sym><def>write</def><sym>(</sym><def>b</def><sym>);</sym><br />
<def>            bits</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>bitnum</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def>   s</def><sym>.</sym><def>close</def><sym>;</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
