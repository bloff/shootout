<source>
<def></def><slc>-----------------------------------------------------------------------</slc><br />
<def></def><slc>-- The Computer Language Benchmarks Game</slc><br />
<def></def><slc>-- http://shootout.alioth.debian.org</slc><br />
<def></def><slc>-- contributed by Jim Rogers and Gautier de Montmollin</slc><br />
<def></def><slc>-----------------------------------------------------------------------</slc><br />
<def></def><br />
<kwa>with</kwa> <def>Ada.Text_Io</def><sym>;</sym> <def></def><kwa>use</kwa> <def>Ada.Text_Io</def><sym>;</sym><br />
<def></def><kwa>with</kwa> <def>Ada.Command_Line</def><sym>;</sym> <def></def><kwa>use</kwa> <def>Ada.Command_Line</def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def>Recursive</def> <kwa>is</kwa><br />
<def></def>   <kwa>type</kwa> <def>Real</def> <kwa>is digits</kwa> <def></def><num>15</num><def></def><sym>;</sym><br />
<def></def>   <kwa>package</kwa> <def>Real_Io</def> <kwa>is new</kwa> <def>Ada.Text_Io.Float_Io</def><sym>(</sym><def>Real</def><sym>);</sym><br />
<def></def>   <kwa>use</kwa> <def>Real_Io</def><sym>;</sym><br />
<def></def>   <kwa>package</kwa> <def>Int_Io</def> <kwa>is new</kwa> <def>Ada.Text_Io.Integer_Io</def><sym>(</sym><def></def><kwb>Long_Integer</kwb><def></def><sym>);</sym><br />
<def></def>   <kwa>use</kwa> <def>Int_Io</def><sym>;</sym><br />
<def><br />
   N</def> <sym>:</sym> <def></def><kwb>Long_Integer</kwb><def></def><sym>;</sym><br />
<def></def><br />
   <kwa>function</kwa> <def>Ack</def> <sym>(</sym><def>M</def><sym>,</sym> <def>N</def> <sym>:</sym> <def></def><kwb>Long_Integer</kwb><def></def><sym>)</sym> <def></def><kwa>return</kwa> <def></def><kwb>Long_Integer</kwb> <def></def><kwa>is</kwa><br />
<def></def>   <kwa>begin</kwa><br />
<def></def>      <kwa>if</kwa> <def>M</def> <sym>=</sym> <def></def><num>0</num> <def></def><kwa>then</kwa><br />
<def></def>         <kwa>return</kwa> <def>N</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>      <kwa>end if</kwa><def></def><sym>;</sym><br />
<def></def>      <kwa>if</kwa> <def>N</def> <sym>=</sym> <def></def><num>0</num> <def></def><kwa>then</kwa><br />
<def></def>         <kwa>return</kwa> <def>Ack</def><sym>(</sym><def>M</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>,</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>      <kwa>end if</kwa><def></def><sym>;</sym><br />
<def></def>      <kwa>return</kwa> <def>Ack</def><sym>(</sym><def>M</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>Ack</def><sym>(</sym><def>M</def><sym>,</sym> <def>N</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>));</sym><br />
<def></def>   <kwa>end</kwa> <def>Ack</def><sym>;</sym><br />
<def></def>   <kwa>function</kwa> <def>Fib</def><sym>(</sym><def>N</def> <sym>:</sym> <def></def><kwb>Long_Integer</kwb><def></def><sym>)</sym> <def></def><kwa>return</kwa> <def></def><kwb>Long_Integer</kwb> <def></def><kwa>is</kwa><br />
<def></def>   <kwa>begin</kwa><br />
<def></def>      <kwa>if</kwa> <def>N</def> <sym>&lt;</sym> <def></def><num>2</num> <def></def><kwa>then</kwa><br />
<def></def>         <kwa>return</kwa> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>      <kwa>else</kwa><br />
<def></def>         <kwa>return</kwa> <def>Fib</def><sym>(</sym><def>N</def> <sym>-</sym> <def></def><num>2</num><def></def><sym>) +</sym> <def>Fib</def><sym>(</sym><def>N</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>      <kwa>end if</kwa><def></def><sym>;</sym><br />
<def></def>   <kwa>end</kwa> <def>Fib</def><sym>;</sym><br />
<def></def>   <kwa>function</kwa> <def>Tak</def><sym>(</sym><def>X</def><sym>,</sym> <def>Y</def><sym>,</sym> <def>Z</def> <sym>:</sym> <def></def><kwb>Long_Integer</kwb><def></def><sym>)</sym> <def></def><kwa>return</kwa> <def></def><kwb>Long_Integer</kwb> <def></def><kwa>is</kwa><br />
<def></def>   <kwa>begin</kwa><br />
<def></def>      <kwa>if</kwa> <def>Y</def> <sym>&lt;</sym> <def>X</def> <kwa>then</kwa><br />
<def></def>         <kwa>return</kwa> <def>Tak</def><sym>(</sym><def>Tak</def><sym>(</sym><def>X</def> <sym>-</sym><def></def><num>1</num><def></def><sym>,</sym> <def>Y</def><sym>,</sym> <def>Z</def><sym>),</sym> <def>Tak</def><sym>(</sym><def>Y</def><sym>-</sym><def></def><num>1</num><def></def><sym>,</sym> <def>Z</def><sym>,</sym> <def>X</def><sym>),</sym> <def>Tak</def><sym>(</sym><def>Z</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>X</def><sym>,</sym> <def>Y</def><sym>));</sym><br />
<def></def>      <kwa>else</kwa><br />
<def></def>         <kwa>return</kwa> <def>Z</def><sym>;</sym><br />
<def></def>      <kwa>end if</kwa><def></def><sym>;</sym><br />
<def></def>   <kwa>end</kwa> <def>Tak</def><sym>;</sym><br />
<def></def>   <kwa>function</kwa> <def>Fib</def><sym>(</sym><def>N</def> <sym>:</sym> <def>Real</def><sym>)</sym> <def></def><kwa>return</kwa> <def>Real</def> <kwa>is</kwa><br />
<def></def>   <kwa>begin</kwa><br />
<def></def>      <kwa>if</kwa> <def>N</def> <sym>&lt;</sym> <def></def><num>2.0</num> <def></def><kwa>then</kwa><br />
<def></def>         <kwa>return</kwa> <def></def><num>1.0</num><def></def><sym>;</sym><br />
<def></def>      <kwa>else</kwa><br />
<def></def>         <kwa>return</kwa> <def>Fib</def><sym>(</sym><def>N</def> <sym>-</sym> <def></def><num>2.0</num><def></def><sym>) +</sym> <def>Fib</def><sym>(</sym><def>N</def> <sym>-</sym> <def></def><num>1.0</num><def></def><sym>);</sym><br />
<def></def>      <kwa>end if</kwa><def></def><sym>;</sym><br />
<def></def>   <kwa>end</kwa> <def>Fib</def><sym>;</sym><br />
<def></def>   <kwa>function</kwa> <def>Tak</def><sym>(</sym><def>X</def><sym>,</sym> <def>Y</def><sym>,</sym> <def>Z</def> <sym>:</sym> <def>Real</def><sym>)</sym> <def></def><kwa>return</kwa> <def>Real</def> <kwa>is</kwa><br />
<def></def>   <kwa>begin</kwa><br />
<def></def>      <kwa>if</kwa> <def>Y</def> <sym>&lt;</sym> <def>X</def> <kwa>then</kwa><br />
<def></def>         <kwa>return</kwa> <def>Tak</def><sym>(</sym><def>Tak</def><sym>(</sym><def>X</def> <sym>-</sym> <def></def><num>1.0</num><def></def><sym>,</sym> <def>Y</def><sym>,</sym> <def>X</def><sym>),</sym> <def>Tak</def><sym>(</sym><def>Y</def> <sym>-</sym> <def></def><num>1.0</num><def></def><sym>,</sym> <def>Z</def><sym>,</sym> <def>X</def><sym>),</sym> <def>Tak</def><sym>(</sym><def>Z</def> <sym>-</sym> <def></def><num>1.0</num><def></def><sym>,</sym> <def>X</def><sym>,</sym> <def>Y</def><sym>));</sym><br />
<def></def>      <kwa>else</kwa><br />
<def></def>         <kwa>return</kwa> <def>Z</def><sym>;</sym><br />
<def></def>      <kwa>end if</kwa><def></def><sym>;</sym><br />
<def></def>   <kwa>end</kwa> <def>Tak</def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def>   N</def> <sym>:=</sym> <def></def><kwb>Long_Integer</kwb><def></def><sym>'</sym><def>Value</def><sym>(</sym><def>Argument</def><sym>(</sym><def></def><num>1</num><def></def><sym>));</sym><br />
<def><br />
   Put</def><sym>(</sym><def></def><str>&quot;Ack(3,&quot;</str><def></def><sym>);</sym> <def>Put</def><sym>(</sym><def>Item</def> <sym>=&gt;</sym> <def>N</def><sym>,</sym> <def>Width</def> <sym>=&gt;</sym> <def></def><num>1</num><def></def><sym>);</sym> <def>Put</def><sym>(</sym><def></def><str>&quot;): &quot;</str><def></def><sym>);</sym><br />
<def>   Put</def><sym>(</sym><def>Item</def> <sym>=&gt;</sym> <def>Ack</def><sym>(</sym><def></def><num>3</num><def></def><sym>,</sym> <def>N</def><sym>),</sym> <def>Width</def> <sym>=&gt;</sym> <def></def><num>1</num><def></def><sym>);</sym> <def>New_Line</def><sym>;</sym><br />
<def><br />
   Put</def><sym>(</sym><def></def><str>&quot;Fib(&quot;</str><def></def><sym>);</sym> <def>Put</def><sym>(</sym><def>Item</def> <sym>=&gt;</sym> <def>Real</def><sym>(</sym><def>N</def><sym>)+</sym><def></def><num>27.0</num><def></def><sym>,</sym> <def>Fore</def> <sym>=&gt;</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>Aft</def> <sym>=&gt;</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>Exp</def> <sym>=&gt;</sym> <def></def><num>0</num><def></def><sym>);</sym><br />
<def>   Put</def><sym>(</sym><def></def><str>&quot;): &quot;</str><def></def><sym>);</sym> <def>Put</def><sym>(</sym><def>Item</def> <sym>=&gt;</sym> <def>Fib</def><sym>(</sym><def>Real</def><sym>(</sym><def>N</def><sym>) +</sym> <def></def><num>27.0</num><def></def><sym>),</sym> <def>Fore</def> <sym>=&gt;</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>Aft</def> <sym>=&gt;</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>Exp</def> <sym>=&gt;</sym> <def></def><num>0</num><def></def><sym>);</sym><br />
<def>   New_Line</def><sym>;</sym><br />
<def><br />
   N</def> <sym>:=</sym> <def>N</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def>   Put</def><sym>(</sym><def></def><str>&quot;Tak(&quot;</str><def></def><sym>);</sym> <def>Put</def><sym>(</sym><def>Item</def> <sym>=&gt;</sym> <def>N</def><sym>*</sym><def></def><num>3</num><def></def><sym>,</sym> <def>Width</def> <sym>=&gt;</sym> <def></def><num>1</num><def></def><sym>);</sym> <def>Put</def><sym>(</sym><def></def><str>&quot;,&quot;</str><def></def><sym>);</sym><br />
<def>   Put</def><sym>(</sym><def>Item</def> <sym>=&gt;</sym> <def>N</def><sym>*</sym><def></def><num>2</num><def></def><sym>,</sym> <def>Width</def> <sym>=&gt;</sym> <def></def><num>1</num><def></def><sym>);</sym> <def>Put</def><sym>(</sym><def></def><str>&quot;,&quot;</str><def></def><sym>);</sym> <def>Put</def><sym>(</sym><def>Item</def> <sym>=&gt;</sym> <def>N</def><sym>,</sym> <def>Width</def> <sym>=&gt;</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def>   Put</def><sym>(</sym><def></def><str>&quot;): &quot;</str><def></def><sym>);</sym> <def>Put</def><sym>(</sym><def>Item</def> <sym>=&gt;</sym> <def>Tak</def><sym>(</sym><def>N</def><sym>*</sym><def></def><num>3</num><def></def><sym>,</sym> <def>N</def><sym>*</sym><def></def><num>2</num><def></def><sym>,</sym> <def>N</def><sym>),</sym> <def>Width</def> <sym>=&gt;</sym> <def></def><num>1</num><def></def><sym>);</sym> <def>New_Line</def><sym>;</sym><br />
<def><br />
   Put</def><sym>(</sym><def></def><str>&quot;Fib(3): &quot;</str><def></def><sym>);</sym> <def>Put</def><sym>(</sym><def>Item</def> <sym>=&gt;</sym> <def>Fib</def><sym>(</sym><def></def><num>3</num><def></def><sym>),</sym> <def>Width</def> <sym>=&gt;</sym> <def></def><num>0</num><def></def><sym>);</sym> <def>New_Line</def><sym>;</sym><br />
<def>   Put</def><sym>(</sym><def></def><str>&quot;Tak(3.0,2.0,1.0): &quot;</str><def></def><sym>);</sym> <def>Put</def><sym>(</sym><def>Item</def> <sym>=&gt;</sym> <def>Tak</def><sym>(</sym><def></def><num>3.0</num><def></def><sym>,</sym><def></def><num>2.0</num><def></def><sym>,</sym><def></def><num>1.0</num><def></def><sym>),</sym> <def>Aft</def> <sym>=&gt;</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>Exp</def> <sym>=&gt;</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>Fore</def> <sym>=&gt;</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def>   New_Line</def><sym>;</sym><br />
<def></def><br />
<kwa>end</kwa> <def>Recursive</def><sym>;</sym><def></def><br />
</source>
