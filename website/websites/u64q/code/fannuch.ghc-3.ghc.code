<source>
<def></def><kwa>import</kwa> <def>System</def><br />
<kwa>import</kwa> <def>Data.List</def><sym>(</sym><def>foldl'</def><sym>)</sym><br />
<def></def><kwa>import</kwa> <def>GHC.Base</def><br />
<br />
<com>{-  The Computer Language Shootout</com><br />
<com>    http://shootout.alioth.debian.org/</com><br />
<com>    contributed by Sebastian Sylvan</com><br />
<com>-}</com><def></def><br />
<br />
<com>{-# INLINE rotate #-}</com><def><br />
rotate n</def> <sym>(</sym><def>x</def><sym>:</sym><def>xs</def><sym>) =</sym> <def></def><kwa>let</kwa> <def></def><sym>(</sym><def>a</def><sym>,</sym><def>b</def><sym>) =</sym> <def>splitAt</def> <sym>(</sym><def>n</def><sym>-</sym><def></def><num>1</num><def></def><sym>)</sym> <def>xs</def> <kwa>in</kwa> <def>a</def> <sym>++</sym> <def>x</def> <sym>:</sym> <def>b</def><br />
<br />
<com>{-# INLINE perms #-}</com><def><br />
perms l</def> <sym>=</sym> <def>foldr perm'</def> <sym>[</sym><def>l</def><sym>] [</sym><def></def><num>2</num><def>..length l</def><sym>]</sym><br />
<def></def>    <kwa>where</kwa> <def>perm' n ls</def> <sym>=</sym> <def>concat</def> <sym>[</sym><def>take n</def> <sym>(</sym><def>iterate</def> <sym>(</sym><def>rotate n</def><sym>)</sym> <def>l</def><sym>) |</sym> <def>l</def> <sym>&lt;-</sym> <def>ls</def><sym>]</sym><br />
<def></def><br />
<com>{-# INLINE flop #-}</com><def><br />
flop</def> <sym>(</sym><def></def><num>1</num><def></def><sym>:</sym><def>_</def><sym>) =</sym> <def></def><num>0</num><br />
<def>flop xs</def> <sym>=</sym> <def></def><num>1</num> <def></def><sym>+</sym> <def>flop</def> <sym>(</sym><def>rev xs</def><sym>)</sym><br />
<def></def><br />
<com>{-# INLINE rev #-}</com><def><br />
rev</def> <sym>(</sym><def>x</def><sym>:</sym><def>xs</def><sym>) =</sym> <def>reverse a</def> <sym>++</sym> <def>x</def> <sym>:</sym> <def>b</def><br />
      <kwa>where</kwa> <def></def><sym>(</sym><def>a</def><sym>,</sym><def>b</def><sym>) =</sym> <def>splitAt</def> <sym>(</sym><def>x</def><sym>-</sym><def></def><num>1</num><def></def><sym>)</sym> <def>xs<br />
<br />
fannuch xs</def> <sym>=</sym> <def>foldl' max</def> <num>0</num> <def>$ map flop xs<br />
<br />
main</def> <sym>=</sym> <def></def><kwa>do</kwa> <def></def><sym>[</sym><def>n</def><sym>] &lt;-</sym> <def>getArgs</def><br />
          <kwa>let</kwa> <def>xs</def> <sym>=</sym> <def>perms</def> <sym>[</sym><def></def><num>1</num><def>..read n</def><sym>]</sym><br />
<def>          putStr $ unlines $ map</def> <sym>(</sym><def>concatMap show</def><sym>)</sym> <def>$ take</def> <num>30</num> <def>xs<br />
          putStr $</def> <str>&quot;Pfannkuchen(&quot;</str><def></def> <sym>++</sym> <def>n</def> <sym>++</sym> <def></def><str>&quot;) = &quot;</str><def></def> <sym>++</sym> <def>show</def> <sym>(</sym><def>fannuch xs</def><sym>)</sym><def></def><br />
</source>
