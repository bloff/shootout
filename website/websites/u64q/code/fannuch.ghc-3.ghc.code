<span class="hl kwa">import</span> System
<span class="hl kwa">import</span> Data.List<span class="hl sym">(</span>foldl'<span class="hl sym">)</span>
<span class="hl kwa">import</span> GHC.Base

<span class="hl com">{-  The Computer Language Shootout</span>
<span class="hl com">    http://shootout.alioth.debian.org/</span>
<span class="hl com">    contributed by Sebastian Sylvan</span>
<span class="hl com">-}</span>

<span class="hl com">{-# INLINE rotate #-}</span>
rotate n <span class="hl sym">(</span>x<span class="hl sym">:</span>xs<span class="hl sym">) =</span> <span class="hl kwa">let</span> <span class="hl sym">(</span>a<span class="hl sym">,</span>b<span class="hl sym">) =</span> splitAt <span class="hl sym">(</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span> xs <span class="hl kwa">in</span> a <span class="hl sym">++</span> x <span class="hl sym">:</span> b

<span class="hl com">{-# INLINE perms #-}</span>
perms l <span class="hl sym">=</span> foldr perm' <span class="hl sym">[</span>l<span class="hl sym">] [</span><span class="hl num">2</span>..length l<span class="hl sym">]</span>
    <span class="hl kwa">where</span> perm' n ls <span class="hl sym">=</span> concat <span class="hl sym">[</span>take n <span class="hl sym">(</span>iterate <span class="hl sym">(</span>rotate n<span class="hl sym">)</span> l<span class="hl sym">) |</span> l <span class="hl sym">&lt;-</span> ls<span class="hl sym">]</span>

<span class="hl com">{-# INLINE flop #-}</span>
flop <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">:</span>_<span class="hl sym">) =</span> <span class="hl num">0</span>
flop xs <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">+</span> flop <span class="hl sym">(</span>rev xs<span class="hl sym">)</span>

<span class="hl com">{-# INLINE rev #-}</span>
rev <span class="hl sym">(</span>x<span class="hl sym">:</span>xs<span class="hl sym">) =</span> reverse a <span class="hl sym">++</span> x <span class="hl sym">:</span> b
      <span class="hl kwa">where</span> <span class="hl sym">(</span>a<span class="hl sym">,</span>b<span class="hl sym">) =</span> splitAt <span class="hl sym">(</span>x<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span> xs

fannuch xs <span class="hl sym">=</span> foldl' max <span class="hl num">0</span> $ map flop xs

main <span class="hl sym">=</span> <span class="hl kwa">do</span> <span class="hl sym">[</span>n<span class="hl sym">] &lt;-</span> getArgs
          <span class="hl kwa">let</span> xs <span class="hl sym">=</span> perms <span class="hl sym">[</span><span class="hl num">1</span>..read n<span class="hl sym">]</span>
          putStr $ unlines $ map <span class="hl sym">(</span>concatMap show<span class="hl sym">)</span> $ take <span class="hl num">30</span> xs
          putStr $ <span class="hl str">&quot;Pfannkuchen(&quot;</span> <span class="hl sym">++</span> n <span class="hl sym">++</span> <span class="hl str">&quot;) = &quot;</span> <span class="hl sym">++</span> show <span class="hl sym">(</span>fannuch xs<span class="hl sym">)</span>
