<source>
<def></def><slc># The Computer Language Shootout</slc><br />
<def></def><slc># http://shootout.alioth.debian.org/</slc><br />
<def></def><slc># recursive test, by Andreas Koenig, Sep 24 2006</slc><br />
<def></def><br />
<slc>### Uses temp variables to help perl free memory earlier</slc><br />
<def></def><br />
<kwa>use</kwa> <def></def><kwd>strict</kwd><def></def><sym>;</sym><br />
<def></def><br />
<kwa>sub</kwa> <def>Ack</def><br />
<sym>{</sym><br />
<def></def>	<kwc>my</kwc> <def></def><sym>(</sym><def></def><kwb>$x</kwb><def></def><sym>,</sym> <def></def><kwb>$y</kwb><def></def><sym>) =</sym> <def></def><kwb>@_</kwb><def></def><sym>;</sym><br />
<def></def><br />
	<kwa>return</kwa> <def></def><kwb>$y</kwb> <def></def><sym>+</sym> <def></def><num>1</num>         <def></def><kwa>if</kwa> <def></def><kwb>$x</kwb> <def></def><sym>==</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>	<kwa>return</kwa> <def></def><kwd>Ack</kwd><def></def><sym>(</sym><def></def><kwb>$x</kwb> <def></def><sym>-</sym> <def></def><num>1</num><def></def><sym>,</sym> <def></def><num>1</num><def></def><sym>)</sym> <def></def><kwa>if</kwa> <def></def><kwb>$y</kwb> <def></def><sym>==</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><br />
        <kwc>my</kwc> <def></def><kwb>$y2</kwb> <def></def><sym>=</sym> <def></def><kwd>Ack</kwd><def></def><sym>(</sym><def></def><kwb>$x</kwb><def></def><sym>,</sym> <def></def><kwb>$y</kwb> <def></def><sym>-</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>	<kwc>my</kwc> <def></def><kwb>$ret</kwb> <def></def><sym>=</sym> <def></def><kwd>Ack</kwd><def></def><sym>(</sym><def></def><kwb>$x</kwb> <def></def><sym>-</sym> <def></def><num>1</num><def></def><sym>,</sym> <def></def><kwb>$y2</kwb><def></def><sym>);</sym><br />
<def></def>        <kwa>return</kwa> <def></def><kwb>$ret</kwb><def></def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwa>sub</kwa> <def>Fib</def><br />
<sym>{</sym><br />
<def></def>	<kwc>my</kwc> <def></def><sym>(</sym><def></def><kwb>$n</kwb><def></def><sym>) =</sym> <def></def><kwb>@_</kwb><def></def><sym>;</sym><br />
<def></def><br />
	<kwa>return</kwa> <def></def><num>1</num> <def></def><kwa>if</kwa> <def></def><kwb>$n</kwb> <def></def><sym>&lt;</sym> <def></def><num>2</num><def></def><sym>;</sym><br />
<def></def><br />
        <kwc>my</kwc> <def></def><kwb>$f1</kwb> <def></def><sym>=</sym> <def></def><kwd>Fib</kwd><def></def><sym>(</sym><def></def><kwb>$n</kwb> <def></def><sym>-</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>        <kwc>my</kwc> <def></def><kwb>$f2</kwb> <def></def><sym>=</sym> <def></def><kwd>Fib</kwd><def></def><sym>(</sym><def></def><kwb>$n</kwb> <def></def><sym>-</sym> <def></def><num>2</num><def></def><sym>);</sym><br />
<def></def>	<kwa>return</kwa> <def></def><kwb>$f2</kwb> <def></def><sym>+</sym> <def></def><kwb>$f1</kwb><def></def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwa>sub</kwa> <def>Tak</def><br />
<sym>{</sym><br />
<def></def>	<kwc>my</kwc> <def></def><sym>(</sym><def></def><kwb>$x</kwb><def></def><sym>,</sym> <def></def><kwb>$y</kwb><def></def><sym>,</sym> <def></def><kwb>$z</kwb><def></def><sym>) =</sym> <def></def><kwb>@_</kwb><def></def><sym>;</sym><br />
<def></def><br />
        <kwa>if</kwa> <def></def><sym>(</sym><def></def><kwb>$y</kwb> <def></def><sym>&lt;</sym> <def></def><kwb>$x</kwb><def></def><sym>) {</sym><br />
<def></def>          <kwc>my</kwc> <def></def><kwb>$z1</kwb> <def></def><sym>=</sym> <def></def><kwd>Tak</kwd><def></def><sym>(</sym><def></def><kwb>$x</kwb> <def></def><sym>-</sym> <def></def><num>1.0</num><def></def><sym>,</sym> <def></def><kwb>$y</kwb><def></def><sym>,</sym> <def></def><kwb>$z</kwb><def></def><sym>);</sym><br />
<def></def>          <kwc>my</kwc> <def></def><kwb>$z2</kwb> <def></def><sym>=</sym> <def></def><kwd>Tak</kwd><def></def><sym>(</sym><def></def><kwb>$y</kwb> <def></def><sym>-</sym> <def></def><num>1.0</num><def></def><sym>,</sym> <def></def><kwb>$z</kwb><def></def><sym>,</sym> <def></def><kwb>$x</kwb><def></def><sym>);</sym><br />
<def></def>          <kwc>my</kwc> <def></def><kwb>$z3</kwb> <def></def><sym>=</sym> <def></def><kwd>Tak</kwd><def></def><sym>(</sym><def></def><kwb>$z</kwb> <def></def><sym>-</sym> <def></def><num>1.0</num><def></def><sym>,</sym> <def></def><kwb>$x</kwb><def></def><sym>,</sym> <def></def><kwb>$y</kwb><def></def><sym>);</sym><br />
<def></def>          <kwc>my</kwc> <def></def><kwb>$ret</kwb> <def></def><sym>=</sym> <def></def><kwd>Tak</kwd><def></def><sym>(</sym><def></def><kwb>$z1</kwb><def></def><sym>,</sym> <def></def><kwb>$z2</kwb><def></def><sym>,</sym> <def></def><kwb>$z3</kwb><def></def><sym>);</sym><br />
<def></def>          <kwa>return</kwa> <def></def><kwb>$ret</kwb><def></def><sym>;</sym><br />
<def></def>        <sym>}</sym> <def></def><kwa>else</kwa> <def></def><sym>{</sym><br />
<def></def>          <kwa>return</kwa> <def></def><kwb>$z</kwb><def></def><sym>;</sym><br />
<def></def>        <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwc>my</kwc> <def></def><kwb>$n</kwb> <def></def><sym>= (</sym><def></def><kwb>$ARGV</kwb><def></def><sym>[</sym><def></def><num>0</num><def></def><sym>] ||</sym> <def></def><num>0</num><def></def><sym>) -</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def>printf</def> <str>&quot;Ack(%d,%d): %d</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym><br />
<def></def>	<num>3</num><def></def><sym>,</sym> <def></def><kwb>$n</kwb> <def></def><sym>+</sym> <def></def><num>1</num><def></def><sym>,</sym> <def></def><kwd>Ack</kwd><def></def><sym>(</sym><def></def><num>3</num><def></def><sym>,</sym> <def></def><kwb>$n</kwb> <def></def><sym>+</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def>printf</def> <str>&quot;Fib(%.1f): %.1f</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym><br />
<def></def>	<num>28.0</num> <def></def><sym>+</sym> <def></def><kwb>$n</kwb><def></def><sym>,</sym> <def></def><kwd>Fib</kwd><def></def><sym>(</sym><def></def><num>28.0</num> <def></def><sym>+</sym> <def></def><kwb>$n</kwb><def></def><sym>);</sym><br />
<def>printf</def> <str>&quot;Tak(%d,%d,%d): %d</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym><br />
<def></def>	<kwb>$n</kwb> <def></def><sym>*</sym> <def></def><num>3</num><def></def><sym>,</sym> <def></def><kwb>$n</kwb> <def></def><sym>*</sym> <def></def><num>2</num><def></def><sym>,</sym> <def></def><kwb>$n</kwb><def></def><sym>,</sym> <def></def><kwd>Tak</kwd><def></def><sym>(</sym><def></def><kwb>$n</kwb> <def></def><sym>*</sym> <def></def><num>3</num><def></def><sym>,</sym> <def></def><kwb>$n</kwb> <def></def><sym>*</sym> <def></def><num>2</num><def></def><sym>,</sym> <def></def><kwb>$n</kwb><def></def><sym>);</sym><br />
<def>printf</def> <str>&quot;Fib(%d): %d</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym><br />
<def></def>	<num>3</num><def></def><sym>,</sym> <def></def><kwd>Fib</kwd><def></def><sym>(</sym><def></def><num>3</num><def></def><sym>);</sym><br />
<def>printf</def> <str>&quot;Tak(%.1f,%.1f,%.1f): %.1f</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym><br />
<def></def>	<num>3.0</num><def></def><sym>,</sym><def></def><num>2.0</num><def></def><sym>,</sym><def></def><num>1.0</num><def></def><sym>,</sym> <def></def><kwd>Tak</kwd><def></def><sym>(</sym><def></def><num>3.0</num><def></def><sym>,</sym><def></def><num>2.0</num><def></def><sym>,</sym><def></def><num>1.0</num><def></def><sym>);</sym><def></def><br />
</source>
