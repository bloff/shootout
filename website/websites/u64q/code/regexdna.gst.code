<source>
<def></def><com>&quot;* The Computer Language Shootout</com><br />
<com>    http://shootout.alioth.debian.org/</com><br />
<com>    contributed by Isaac Gouy</com><br />
<com>    modified by Paolo Bonzini *&quot;</com><def><br />
<br />
<br />
!</def><kwc>Tests</kwc> <def></def><kwb>class methodsFor:</kwb> <def></def><str>'benchmarking'</str><def>!matchPatterns</def><br />
   <sym>^#(</sym>   <def></def><str>'agggtaaa|tttaccct'</str><def></def><br />
         <str>'[cgt]gggtaaa|tttaccc[acg]'</str><def></def><br />
         <str>'a[act]ggtaaa|tttacc[agt]t'</str><def></def><br />
         <str>'ag[act]gtaaa|tttac[agt]ct'</str><def></def><br />
         <str>'agg[act]taaa|ttta[agt]cct'</str><def></def><br />
         <str>'aggg[acg]aaa|ttt[cgt]ccct'</str><def></def><br />
         <str>'agggt[cgt]aa|tt[acg]accct'</str><def></def><br />
         <str>'agggta[cgt]a|t[acg]taccct'</str><def></def><br />
         <str>'agggtaa[cgt]|[acg]ttaccct'</str><def></def><br />
   <sym>)</sym><def>! !<br />
<br />
!</def><kwc>Tests</kwc> <def></def><kwb>class methodsFor:</kwb> <def></def><str>'benchmarking'</str><def>!substitutionPatterns</def><br />
   <sym>^#(   #(</sym><def></def><str>'B'</str><def></def> <str>'(c|g|t)'</str><def></def><sym>)</sym><br />
<def></def>         <sym>#(</sym><def></def><str>'D'</str><def></def> <str>'(a|g|t)'</str><def></def><sym>)</sym><br />
<def></def>         <sym>#(</sym><def></def><str>'H'</str><def></def> <str>'(a|c|t)'</str><def></def><sym>)</sym><br />
<def></def>         <sym>#(</sym><def></def><str>'K'</str><def></def> <str>'(g|t)'</str><def></def><sym>)</sym><br />
<def></def>         <sym>#(</sym><def></def><str>'M'</str><def></def> <str>'(a|c)'</str><def></def><sym>)</sym><br />
<def></def>         <sym>#(</sym><def></def><str>'N'</str><def></def> <str>'(a|c|g|t)'</str><def></def><sym>)</sym><br />
<def></def>         <sym>#(</sym><def></def><str>'R'</str><def></def> <str>'(a|g)'</str><def></def><sym>)</sym><br />
<def></def>         <sym>#(</sym><def></def><str>'S'</str><def></def> <str>'(c|g)'</str><def></def><sym>)</sym><br />
<def></def>         <sym>#(</sym><def></def><str>'V'</str><def></def> <str>'(a|c|g)'</str><def></def><sym>)</sym><br />
<def></def>         <sym>#(</sym><def></def><str>'W'</str><def></def> <str>'(a|t)'</str><def></def><sym>)</sym><br />
<def></def>         <sym>#(</sym><def></def><str>'Y'</str><def></def> <str>'(c|t)'</str><def></def><sym>))</sym><def>! !<br />
<br />
<br />
!</def><kwc>Tests</kwc> <def></def><kwb>class methodsFor:</kwb> <def></def><str>'benchmarking'</str><def>!</def><kwb>regexDNA:</kwb> <def>sequence</def> <kwb>to:</kwb> <def>output</def><br />
   <kwd>| s size1 size2 |</kwd><br />
<def>   size1</def> <sym>:=</sym> <def>sequence</def> <kwb>size</kwb><def></def><sym>.</sym><br />
<def></def><br />
   <com>&quot;* remove FASTA sequence descriptions and new-lines *&quot;</com><def><br />
   s</def> <sym>:=</sym> <def>sequence</def> <kwb>copyReplacingAllRegex:</kwb> <def></def><str>'&gt;.*\n|\n'</str><def></def> <kwb>with:</kwb> <def></def><str>''</str><def></def><sym>.</sym><br />
<def>   size2</def> <sym>:=</sym> <def>s</def> <kwb>size</kwb><def></def><sym>.</sym><br />
<def></def><br />
   <kwa>self</kwa> <def></def><kwb>matchPatterns do:</kwb> <def></def><sym>[</sym><def></def><kwd>:each</kwd><def></def><sym>|</sym><br />
<def>      output</def><br />
         <kwb>nextPutAll:</kwb> <def>each</def><sym>;</sym> <def></def><kwb>space</kwb><def></def><sym>;</sym><br />
<def></def>         <kwb>print:</kwb> <def></def><sym>(</sym><def>s</def> <kwb>occurrencesOfRegex:</kwb> <def>each</def><sym>);</sym> <def></def><kwb>nl</kwb><br />
<def></def>      <sym>].</sym><br />
<def></def><br />
   <kwa>self</kwa> <def></def><kwb>substitutionPatterns do:</kwb> <def></def><sym>[</sym><def></def><kwd>:each</kwd><def></def><sym>|</sym><br />
<def>      s</def> <sym>:=</sym> <def>s</def> <kwb>copyReplacingAllRegex:</kwb> <def>each</def> <kwb>first with:</kwb> <def>each</def> <kwb>last</kwb><def></def><sym>].</sym><br />
<def><br />
   output<br />
      nl</def><sym>;</sym><br />
<def></def>      <kwb>print:</kwb> <def>size1</def><sym>;</sym> <def></def><kwb>nl</kwb><def></def><sym>;</sym><br />
<def></def>      <kwb>print:</kwb> <def>size2</def><sym>;</sym> <def></def><kwb>nl</kwb><def></def><sym>;</sym><br />
<def></def>      <kwb>print:</kwb> <def>s</def> <kwb>size</kwb><def></def><sym>;</sym> <def></def><kwb>nl</kwb><def>! !!</def><kwc>Tests</kwc> <def></def><kwb>class methodsFor:</kwb> <def></def><str>'benchmark scripts'</str><def>!regexdna</def><br />
   <kwa>self</kwa> <def></def><kwb>regexDNA:</kwb> <def></def><kwa>self</kwa> <def></def><kwb>stdinSpecial contents to:</kwb> <def></def><kwa>self</kwa> <def></def><kwb>stdout</kwb><def></def><sym>.</sym><br />
<def></def>   <sym>^</sym><def></def><str>''</str><def> ! !</def><br />
<br />
<kwc>Tests</kwc> <def></def><kwb>regexdna</kwb><def>!</def><br />
</source>
