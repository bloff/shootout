<source>
<def></def><com>/* The Computer Language Benchmarks Game</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com>   contributed by Stefan Krause</com><br />
<com>*/</com><def></def><br />
<br />
<kwa>import</kwa> <def>java</def><sym>.</sym><def>io</def><sym>.</sym><def></def><kwc>BufferedOutputStream</kwc><def></def><sym>;</sym><br />
<def></def><kwa>import</kwa> <def>java</def><sym>.</sym><def>io</def><sym>.</sym><def></def><kwc>IOException</kwc><def></def><sym>;</sym><br />
<def></def><br />
<kwa>class</kwa> <def>mandelbrot</def> <sym>{</sym><br />
<def></def><br />
   <kwa>final static</kwa> <def></def><kwb>double</kwb> <def>limitSquared</def> <sym>=</sym> <def></def><num>4.0</num><def></def><sym>;</sym><br />
<def></def>   <kwa>final static</kwa> <def></def><kwb>int</kwb> <def>iterations</def> <sym>=</sym> <def></def><num>50</num><def></def><sym>;</sym><br />
<def></def><br />
   <kwa>public static</kwa> <def></def><kwb>void</kwb> <def></def><kwd>main</kwd><def></def><sym>(</sym><def></def><kwc>String</kwc><def></def><sym>[]</sym> <def>args</def><sym>)</sym> <def></def><kwa>throws</kwa> <def></def><kwc>Exception</kwc> <def></def><sym>{</sym><br />
<def></def>      <kwb>int</kwb> <def>size</def> <sym>=</sym> <def></def><kwc>Integer</kwc><def></def><sym>.</sym><def></def><kwd>parseInt</kwd><def></def><sym>(</sym><def>args</def><sym>[</sym><def></def><num>0</num><def></def><sym>]);</sym><br />
<def>      Mandelbrot m</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>Mandelbrot</kwd><def></def><sym>(</sym><def>size</def><sym>);</sym><br />
<def>      m</def><sym>.</sym><def></def><kwd>compute</kwd><def></def><sym>();</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>public static class</kwa> <def>Mandelbrot</def> <sym>{</sym><br />
<def></def>      <kwa>public</kwa> <def></def><kwd>Mandelbrot</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>size</def><sym>)</sym><br />
<def></def>      <sym>{</sym><br />
<def></def>         <kwa>this</kwa><def></def><sym>.</sym><def>size</def> <sym>=</sym> <def>size</def><sym>;</sym><br />
<def>         fac</def> <sym>=</sym> <def></def><num>2.0</num> <def></def><sym>/</sym> <def>size</def><sym>;</sym><br />
<def>         out</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwc>BufferedOutputStream</kwc><def></def><sym>(</sym><def></def><kwc>System</kwc><def></def><sym>.</sym><def>out</def><sym>);</sym><br />
<def></def><br />
         <kwb>int</kwb> <def>offset</def> <sym>=</sym> <def>size</def> <sym>%</sym> <def></def><num>8</num><def></def><sym>;</sym><br />
<def>         shift</def> <sym>=</sym> <def>offset</def> <sym>==</sym> <def></def><num>0</num> <def>?</def> <num>0</num> <def></def><sym>: (</sym><def></def><num>8</num><def></def><sym>-</sym><def>offset</def><sym>);</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>      <kwa>final</kwa> <def></def><kwb>int</kwb> <def>size</def><sym>;</sym><br />
<def></def>      <kwa>final</kwa> <def></def><kwc>BufferedOutputStream</kwc> <def>out</def><sym>;</sym><br />
<def></def>      <kwa>final</kwa> <def></def><kwb>double</kwb> <def>fac</def><sym>;</sym><br />
<def></def>      <kwa>final</kwa> <def></def><kwb>int</kwb> <def>shift</def><sym>;</sym><br />
<def></def><br />
      <kwa>public</kwa> <def></def><kwb>void</kwb> <def></def><kwd>compute</kwd><def></def><sym>()</sym> <def></def><kwa>throws</kwa> <def></def><kwc>IOException</kwc><br />
<def></def>      <sym>{</sym><br />
<def></def>         <kwc>System</kwc><def></def><sym>.</sym><def>out</def><sym>.</sym><def></def><kwd>format</kwd><def></def><sym>(</sym><def></def><str>&quot;P4</str><esc>\n</esc><str>%d %d</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym><def>size</def><sym>,</sym><def>size</def><sym>);</sym><br />
<def></def>         <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>y</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>y</def><sym>&lt;</sym><def>size</def><sym>;</sym> <def>y</def><sym>++)</sym><br />
<def></def>            <kwd>computeRow</kwd><def></def><sym>(</sym><def>y</def><sym>);</sym><br />
<def>         out</def><sym>.</sym><def></def><kwd>close</kwd><def></def><sym>();</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><br />
      <kwa>private</kwa> <def></def><kwb>void</kwb> <def></def><kwd>computeRow</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>y</def><sym>)</sym> <def></def><kwa>throws</kwa> <def></def><kwc>IOException</kwc><br />
<def></def>      <sym>{</sym><br />
<def></def>         <kwb>int</kwb> <def>bits</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><br />
         <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>x</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>x</def><sym>&lt;</sym><def>size</def><sym>;</sym><def>x</def><sym>++) {</sym><br />
<def></def>            <kwb>double</kwb> <def>Zr</def> <sym>=</sym> <def></def><num>0.0</num><def></def><sym>;</sym><br />
<def></def>            <kwb>double</kwb> <def>Zi</def> <sym>=</sym> <def></def><num>0.0</num><def></def><sym>;</sym><br />
<def></def>            <kwb>double</kwb> <def>Cr</def> <sym>= (</sym><def>x</def><sym>*</sym><def>fac</def> <sym>-</sym> <def></def><num>1.5</num><def></def><sym>);</sym><br />
<def></def>            <kwb>double</kwb> <def>Ci</def> <sym>= (</sym><def>y</def><sym>*</sym><def>fac</def> <sym>-</sym> <def></def><num>1.0</num><def></def><sym>);</sym><br />
<def></def><br />
            <kwb>int</kwb> <def>i</def> <sym>=</sym> <def>iterations</def><sym>;</sym><br />
<def></def>            <kwb>double</kwb> <def>ZrN</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>            <kwb>double</kwb> <def>ZiN</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>            <kwa>do</kwa> <def></def><sym>{</sym><br />
<def>               Zi</def> <sym>=</sym> <def></def><num>2.0</num> <def></def><sym>*</sym> <def>Zr</def> <sym>*</sym> <def>Zi</def> <sym>+</sym> <def>Ci</def><sym>;</sym><br />
<def>               Zr</def> <sym>=</sym> <def>ZrN</def> <sym>-</sym> <def>ZiN</def> <sym>+</sym> <def>Cr</def><sym>;</sym><br />
<def>               ZiN</def> <sym>=</sym> <def>Zi</def> <sym>*</sym> <def>Zi</def><sym>;</sym><br />
<def>               ZrN</def> <sym>=</sym> <def>Zr</def> <sym>*</sym> <def>Zr</def><sym>;</sym><br />
<def></def>            <sym>}</sym> <def></def><kwa>while</kwa> <def></def><sym>(!(</sym><def>ZiN</def> <sym>+</sym> <def>ZrN</def> <sym>&gt;</sym> <def>limitSquared</def><sym>) &amp;&amp; --</sym><def>i</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>);</sym><br />
<def><br />
            bits</def> <sym>=</sym> <def>bits</def> <sym>&lt;&lt;</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>i</def> <sym>==</sym> <def></def><num>0</num><def></def><sym>)</sym> <def>bits</def><sym>++;</sym><br />
<def></def><br />
            <kwa>if</kwa> <def></def><sym>(</sym><def>x</def><sym>%</sym><def></def><num>8</num> <def></def><sym>==</sym> <def></def><num>7</num><def></def><sym>) {</sym><br />
<def>               out</def><sym>.</sym><def></def><kwd>write</kwd><def></def><sym>((</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def>bits</def><sym>);</sym><br />
<def>               bits</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>shift</def><sym>!=</sym><def></def><num>0</num><def></def><sym>) {</sym><br />
<def>            bits</def> <sym>=</sym> <def>bits</def> <sym>&lt;&lt;</sym> <def>shift</def><sym>;</sym><br />
<def>            out</def><sym>.</sym><def></def><kwd>write</kwd><def></def><sym>((</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def>bits</def><sym>);</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
