<source>
<def></def><com>/* -*- mode: c -*-</com><br />
<com> * $Id: fasta.gcc.code,v 1.1 2008-08-05 04:40:15 igouy-guest Exp $</com><br />
<com> * http://shootout.alioth.debian.org/</com><br />
<com> *</com><br />
<com> * by Paul Hsieh</com><br />
<com> */</com><def></def><br />
<br />
<dir>#include &lt;stdio.h&gt;</dir><br />
<def></def><dir>#include &lt;stdlib.h&gt;</dir><br />
<def></def><br />
<dir>#define IM 139968</dir><br />
<def></def><dir>#define IA   3877</dir><br />
<def></def><dir>#define IC  29573</dir><br />
<def></def><br />
<kwb>double</kwb> <def></def><kwd>gen_random</kwd> <def></def><sym>(</sym><def></def><kwb>double</kwb> <def>max</def><sym>) {</sym><br />
<def></def>    <kwb>static long</kwb> <def>last</def> <sym>=</sym> <def></def><num>42</num><def></def><sym>;</sym><br />
<def></def>    <kwa>return</kwa> <def>max</def> <sym>* (</sym><def>last</def> <sym>= (</sym><def>last</def> <sym>*</sym> <def>IA</def> <sym>+</sym> <def>IC</def><sym>) %</sym> <def>IM</def><sym>) /</sym> <def>IM</def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>struct</kwb> <def>aminoacids</def> <sym>{</sym><br />
<def></def>    <kwb>char</kwb> <def>c</def><sym>;</sym><br />
<def></def>    <kwb>double</kwb> <def>p</def><sym>;</sym><br />
<def></def><sym>};</sym><br />
<def></def><br />
<com>/* Weighted selection from alphabet */</com><def></def><br />
<br />
<kwb>void</kwb> <def></def><kwd>makeCumulative</kwd> <def></def><sym>(</sym><def></def><kwb>struct</kwb> <def>aminoacids</def> <sym>*</sym> <def>genelist</def><sym>,</sym> <def></def><kwb>int</kwb> <def>count</def><sym>) {</sym><br />
<def></def>    <kwb>double</kwb> <def>cp</def> <sym>=</sym> <def></def><num>0.0</num><def></def><sym>;</sym><br />
<def></def>    <kwb>int</kwb> <def>i</def><sym>;</sym><br />
<def></def><br />
    <kwa>for</kwa> <def></def><sym>(</sym><def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>count</def><sym>;</sym> <def>i</def><sym>++) {</sym><br />
<def>        cp</def> <sym>+=</sym> <def>genelist</def><sym>[</sym><def>i</def><sym>].</sym><def>p</def><sym>;</sym><br />
<def>        genelist</def><sym>[</sym><def>i</def><sym>].</sym><def>p</def> <sym>=</sym> <def>cp</def><sym>;</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>char</kwb> <def></def><kwd>selectRandom</kwd> <def></def><sym>(</sym><def></def><kwb>const struct</kwb> <def>aminoacids</def> <sym>*</sym> <def>genelist</def><sym>,</sym> <def></def><kwb>int</kwb> <def>count</def><sym>) {</sym><br />
<def></def>    <kwb>double</kwb> <def>r</def> <sym>=</sym> <def></def><kwd>gen_random</kwd> <def></def><sym>(</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>    <kwb>int</kwb> <def>i</def><sym>,</sym> <def>lo</def><sym>,</sym> <def>hi</def><sym>;</sym><br />
<def></def><br />
    <kwa>if</kwa> <def></def><sym>(</sym><def>r</def> <sym>&lt;</sym> <def>genelist</def><sym>[</sym><def></def><num>0</num><def></def><sym>].</sym><def>p</def><sym>)</sym> <def></def><kwa>return</kwa> <def>genelist</def><sym>[</sym><def></def><num>0</num><def></def><sym>].</sym><def>c</def><sym>;</sym><br />
<def><br />
    lo</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>    hi</def> <sym>=</sym> <def>count</def><sym>-</sym><def></def><num>1</num><def></def><sym>;</sym><br />
<def></def><br />
    <kwa>while</kwa> <def></def><sym>(</sym><def>hi</def> <sym>&gt;</sym> <def>lo</def><sym>+</sym><def></def><num>1</num><def></def><sym>) {</sym><br />
<def>        i</def> <sym>= (</sym><def>hi</def> <sym>+</sym> <def>lo</def><sym>) /</sym> <def></def><num>2</num><def></def><sym>;</sym><br />
<def></def>        <kwa>if</kwa> <def></def><sym>(</sym><def>r</def> <sym>&lt;</sym> <def>genelist</def><sym>[</sym><def>i</def><sym>].</sym><def>p</def><sym>)</sym> <def>hi</def> <sym>=</sym> <def>i</def><sym>;</sym> <def></def><kwa>else</kwa> <def>lo</def> <sym>=</sym> <def>i</def><sym>;</sym><br />
<def></def>    <sym>}</sym><br />
<def></def>    <kwa>return</kwa> <def>genelist</def><sym>[</sym><def>hi</def><sym>].</sym><def>c</def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<com>/* Generate and write FASTA format */</com><def></def><br />
<br />
<dir>#define LINE_LENGTH (60)</dir><br />
<def></def><br />
<kwb>void</kwb> <def></def><kwd>makeRandomFasta</kwd> <def></def><sym>(</sym><def></def><kwb>const char</kwb> <def></def><sym>*</sym> <def>id</def><sym>,</sym> <def></def><kwb>const char</kwb> <def></def><sym>*</sym> <def>desc</def><sym>,</sym> <def></def><kwb>const struct</kwb><br />
<def>aminoacids</def> <sym>*</sym> <def>genelist</def><sym>,</sym> <def></def><kwb>int</kwb> <def>count</def><sym>,</sym> <def></def><kwb>int</kwb> <def>n</def><sym>) {</sym><br />
<def></def>   <kwb>int</kwb> <def>todo</def> <sym>=</sym> <def>n</def><sym>;</sym><br />
<def></def>   <kwb>int</kwb> <def>i</def><sym>,</sym> <def>m</def><sym>;</sym><br />
<def></def><br />
   <kwd>printf</kwd> <def></def><sym>(</sym><def></def><str>&quot;&gt;%s %s</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def>id</def><sym>,</sym> <def>desc</def><sym>);</sym><br />
<def></def><br />
   <kwa>for</kwa> <def></def><sym>(;</sym> <def>todo</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>todo</def> <sym>-=</sym> <def>LINE_LENGTH</def><sym>) {</sym><br />
<def></def>       <kwb>char</kwb> <def>pick</def><sym>[</sym><def>LINE_LENGTH</def><sym>+</sym><def></def><num>1</num><def></def><sym>];</sym><br />
<def></def>       <kwa>if</kwa> <def></def><sym>(</sym><def>todo</def> <sym>&lt;</sym> <def>LINE_LENGTH</def><sym>)</sym> <def>m</def> <sym>=</sym> <def>todo</def><sym>;</sym> <def></def><kwa>else</kwa> <def>m</def> <sym>=</sym> <def>LINE_LENGTH</def><sym>;</sym><br />
<def></def>       <kwa>for</kwa> <def></def><sym>(</sym><def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>m</def><sym>;</sym> <def>i</def><sym>++)</sym> <def>pick</def><sym>[</sym><def>i</def><sym>] =</sym> <def></def><kwd>selectRandom</kwd> <def></def><sym>(</sym><def>genelist</def><sym>,</sym> <def>count</def><sym>);</sym><br />
<def>       pick</def><sym>[</sym><def>m</def><sym>] =</sym> <def></def><str>'\0'</str><def></def><sym>;</sym><br />
<def></def>       <kwd>puts</kwd> <def></def><sym>(</sym><def>pick</def><sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>void</kwb> <def></def><kwd>makeRepeatFasta</kwd> <def></def><sym>(</sym><def></def><kwb>const char</kwb> <def></def><sym>*</sym> <def>id</def><sym>,</sym> <def></def><kwb>const char</kwb> <def></def><sym>*</sym> <def>desc</def><sym>,</sym> <def></def><kwb>const char</kwb> <def></def><sym>*</sym><br />
<def>s</def><sym>,</sym> <def></def><kwb>int</kwb> <def>n</def><sym>) {</sym><br />
<def></def>   <kwb>char</kwb> <def></def><sym>*</sym> <def>ss</def><sym>;</sym><br />
<def></def>   <kwb>int</kwb> <def>todo</def> <sym>=</sym> <def>n</def><sym>,</sym> <def>k</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>kn</def> <sym>=</sym> <def></def><kwd>strlen</kwd> <def></def><sym>(</sym><def>s</def><sym>);</sym><br />
<def></def>   <kwb>int</kwb> <def>m</def><sym>;</sym><br />
<def><br />
   ss</def> <sym>= (</sym><def></def><kwb>char</kwb> <def></def><sym>*)</sym> <def></def><kwd>malloc</kwd> <def></def><sym>(</sym><def>kn</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>   <kwd>memcpy</kwd> <def></def><sym>(</sym><def>ss</def><sym>,</sym> <def>s</def><sym>,</sym> <def>kn</def><sym>+</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def></def><br />
   <kwd>printf</kwd> <def></def><sym>(</sym><def></def><str>&quot;&gt;%s %s</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def>id</def><sym>,</sym> <def>desc</def><sym>);</sym><br />
<def></def><br />
   <kwa>for</kwa> <def></def><sym>(;</sym> <def>todo</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>todo</def> <sym>-=</sym> <def>LINE_LENGTH</def><sym>) {</sym><br />
<def></def>       <kwa>if</kwa> <def></def><sym>(</sym><def>todo</def> <sym>&lt;</sym> <def>LINE_LENGTH</def><sym>)</sym> <def>m</def> <sym>=</sym> <def>todo</def><sym>;</sym> <def></def><kwa>else</kwa> <def>m</def> <sym>=</sym> <def>LINE_LENGTH</def><sym>;</sym><br />
<def></def><br />
       <kwa>while</kwa> <def></def><sym>(</sym><def>m</def> <sym>&gt;=</sym> <def>kn</def> <sym>-</sym> <def>k</def><sym>) {</sym><br />
<def></def>           <kwd>printf</kwd> <def></def><sym>(</sym><def></def><str>&quot;%s&quot;</str><def></def><sym>,</sym> <def>s</def><sym>+</sym><def>k</def><sym>);</sym><br />
<def>           m</def> <sym>-=</sym> <def>kn</def> <sym>-</sym> <def>k</def><sym>;</sym><br />
<def>           k</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>       <sym>}</sym><br />
<def><br />
       ss</def><sym>[</sym><def>k</def> <sym>+</sym> <def>m</def><sym>] =</sym> <def></def><str>'\0'</str><def></def><sym>;</sym><br />
<def></def>       <kwd>puts</kwd> <def></def><sym>(</sym><def>ss</def><sym>+</sym><def>k</def><sym>);</sym><br />
<def>       ss</def><sym>[</sym><def>k</def> <sym>+</sym> <def>m</def><sym>] =</sym> <def>s</def><sym>[</sym><def>m</def><sym>+</sym><def>k</def><sym>];</sym><br />
<def>       k</def> <sym>+=</sym> <def>m</def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwd>free</kwd> <def></def><sym>(</sym><def>ss</def><sym>);</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<com>/* Main -- define alphabets, make 3 fragments */</com><def></def><br />
<br />
<kwb>struct</kwb> <def>aminoacids iub</def><sym>[] = {</sym><br />
<def></def>    <sym>{</sym> <def></def><str>'a'</str><def></def><sym>,</sym> <def></def><num>0.27</num> <def></def><sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><str>'c'</str><def></def><sym>,</sym> <def></def><num>0.12</num> <def></def><sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><str>'g'</str><def></def><sym>,</sym> <def></def><num>0.12</num> <def></def><sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><str>'t'</str><def></def><sym>,</sym> <def></def><num>0.27</num> <def></def><sym>},</sym><br />
<def></def><br />
    <sym>{</sym> <def></def><str>'B'</str><def></def><sym>,</sym> <def></def><num>0.02</num> <def></def><sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><str>'D'</str><def></def><sym>,</sym> <def></def><num>0.02</num> <def></def><sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><str>'H'</str><def></def><sym>,</sym> <def></def><num>0.02</num> <def></def><sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><str>'K'</str><def></def><sym>,</sym> <def></def><num>0.02</num> <def></def><sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><str>'M'</str><def></def><sym>,</sym> <def></def><num>0.02</num> <def></def><sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><str>'N'</str><def></def><sym>,</sym> <def></def><num>0.02</num> <def></def><sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><str>'R'</str><def></def><sym>,</sym> <def></def><num>0.02</num> <def></def><sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><str>'S'</str><def></def><sym>,</sym> <def></def><num>0.02</num> <def></def><sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><str>'V'</str><def></def><sym>,</sym> <def></def><num>0.02</num> <def></def><sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><str>'W'</str><def></def><sym>,</sym> <def></def><num>0.02</num> <def></def><sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><str>'Y'</str><def></def><sym>,</sym> <def></def><num>0.02</num> <def></def><sym>}</sym><br />
<def></def><sym>};</sym><br />
<def></def><br />
<dir>#define IUB_LEN (sizeof (iub) / sizeof (struct aminoacids))</dir><br />
<def></def><br />
<kwb>struct</kwb> <def>aminoacids homosapiens</def><sym>[] = {</sym><br />
<def></def>    <sym>{</sym> <def></def><str>'a'</str><def></def><sym>,</sym> <def></def><num>0.3029549426680</num> <def></def><sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><str>'c'</str><def></def><sym>,</sym> <def></def><num>0.1979883004921</num> <def></def><sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><str>'g'</str><def></def><sym>,</sym> <def></def><num>0.1975473066391</num> <def></def><sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><str>'t'</str><def></def><sym>,</sym> <def></def><num>0.3015094502008</num> <def></def><sym>},</sym><br />
<def></def><sym>};</sym><br />
<def></def><br />
<dir>#define HOMOSAPIENS_LEN (sizeof (homosapiens) / sizeof (struct aminoacids))</dir><br />
<def></def><br />
<kwb>char</kwb> <def></def><sym>*</sym> <def>alu</def> <sym>=</sym><br />
<def></def>   <str>&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</str><def> \</def><br />
   <str>&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</str><def> \</def><br />
   <str>&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</str><def> \</def><br />
   <str>&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</str><def> \</def><br />
   <str>&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</str><def> \</def><br />
   <str>&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</str><def> \</def><br />
   <str>&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</str><def></def><sym>;</sym><br />
<def></def><br />
<kwb>int</kwb> <def></def><kwd>main</kwd> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>argc</def><sym>,</sym> <def></def><kwb>char</kwb> <def></def><sym>*</sym> <def>argv</def><sym>[]) {</sym><br />
<def></def>    <kwb>int</kwb> <def>n</def> <sym>=</sym> <def></def><num>1000</num><def></def><sym>;</sym><br />
<def></def><br />
    <kwa>if</kwa> <def></def><sym>(</sym><def>argc</def> <sym>&gt;</sym> <def></def><num>1</num><def></def><sym>)</sym> <def></def><kwd>sscanf</kwd> <def></def><sym>(</sym><def>argv</def><sym>[</sym><def></def><num>1</num><def></def><sym>],</sym> <def></def><str>&quot;%d&quot;</str><def></def><sym>, &amp;</sym><def>n</def><sym>);</sym><br />
<def></def><br />
    <kwd>makeCumulative</kwd> <def></def><sym>(</sym><def>iub</def><sym>,</sym> <def>IUB_LEN</def><sym>);</sym><br />
<def></def>    <kwd>makeCumulative</kwd> <def></def><sym>(</sym><def>homosapiens</def><sym>,</sym> <def>HOMOSAPIENS_LEN</def><sym>);</sym><br />
<def></def><br />
    <kwd>makeRepeatFasta</kwd> <def></def><sym>(</sym><def></def><str>&quot;ONE&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;Homo sapiens alu&quot;</str><def></def><sym>,</sym> <def>alu</def><sym>,</sym> <def>n</def><sym>*</sym><def></def><num>2</num><def></def><sym>);</sym><br />
<def></def>    <kwd>makeRandomFasta</kwd> <def></def><sym>(</sym><def></def><str>&quot;TWO&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;IUB ambiguity codes&quot;</str><def></def><sym>,</sym> <def>iub</def><sym>,</sym> <def>IUB_LEN</def><sym>,</sym> <def>n</def><sym>*</sym><def></def><num>3</num><def></def><sym>);</sym><br />
<def></def>    <kwd>makeRandomFasta</kwd> <def></def><sym>(</sym><def></def><str>&quot;THREE&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;Homo sapiens frequency&quot;</str><def></def><sym>,</sym> <def>homosapiens</def><sym>,</sym><br />
<def>HOMOSAPIENS_LEN</def><sym>,</sym> <def>n</def><sym>*</sym><def></def><num>5</num><def></def><sym>);</sym><br />
<def></def><br />
    <kwa>return</kwa> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
</source>
