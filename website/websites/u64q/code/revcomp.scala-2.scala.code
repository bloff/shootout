<source>
<def></def><com>/* The Computer Language Shootout</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com>   contributed by Isaac Gouy</com><br />
<com>*/</com><def></def><br />
<br />
<kwa>import</kwa> <def>java</def><sym>.</sym><def>io</def><sym>.</sym><def>_</def><br />
<kwa>import</kwa> <def>scala</def><sym>.</sym><def>collection</def><sym>.</sym><def>mutable</def><sym>.</sym><def></def><kwc>Stack</kwc><br />
<def></def><br />
<kwa>object</kwa> <def>revcomp</def> <sym>{</sym><br />
<def></def><br />
   <kwa>val</kwa> <def>IUB</def> <sym>=</sym> <def>IUBCodeComplements</def><br />
<br />
   <kwa>def</kwa> <def>IUBCodeComplements</def><sym>() = {</sym><br />
<def></def>      <kwa>val</kwa> <def>code</def> <sym>=</sym> <def></def><str>&quot;ABCDGHKMNRSTVWYabcdghkmnrstvwy&quot;</str><def></def><sym>.</sym><def>getBytes</def><br />
      <kwa>val</kwa> <def>comp</def> <sym>=</sym> <def></def><str>&quot;TVGHCDMKNYSABWRTVGHCDMKNYSABWR&quot;</str><def></def><sym>.</sym><def>getBytes</def><br />
      <kwa>val</kwa> <def>a</def><sym>:</sym> <def></def><kwc>Array</kwc><def></def><sym>[</sym><def></def><kwb>byte</kwb><def></def><sym>] =</sym> <def></def><kwa>new</kwa> <def></def><kwc>Array</kwc><def></def><sym>(</sym> <def></def><str>'z'</str><def></def><sym>.</sym><def>toByte</def> <sym>)</sym><br />
<def></def><br />
      <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwa>val</kwa> <def>indexValue</def> <sym>&lt;-</sym> <def>code zip comp</def><sym>)</sym><br />
<def>         indexValue match</def> <sym>{</sym> <def></def><kwa>case</kwa> <def>Pair</def><sym>(</sym><def>i</def><sym>,</sym><def>v</def><sym>) =&gt;</sym> <def>a</def><sym>(</sym><def>i</def><sym>) =</sym> <def>v</def> <sym>}</sym><br />
<def><br />
      a</def><br />
   <sym>}</sym><br />
<def></def><br />
<br />
   <kwa>type</kwa> <def>LineStack</def> <sym>=</sym> <def></def><kwc>Stack</kwc><def></def><sym>[</sym><def></def><kwc>Array</kwc><def></def><sym>[</sym><def></def><kwb>byte</kwb><def></def><sym>]]</sym><br />
<def></def><br />
   <kwa>def</kwa> <def>main</def><sym>(</sym><def>args</def><sym>:</sym> <def></def><kwc>Array</kwc><def></def><sym>[</sym><def></def><kwc>String</kwc><def></def><sym>]) = {</sym><br />
<def></def>      <kwa>val</kwa> <def>r</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwc>BufferedReader</kwc><def></def><sym>(</sym><def></def><kwa>new</kwa> <def></def><kwc>InputStreamReader</kwc><def></def><sym>(</sym><def></def><kwc>System</kwc><def></def><sym>.</sym><def>in</def><sym>))</sym><br />
<def></def>      <kwa>val</kwa> <def>w</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwc>BufferedOutputStream</kwc><def></def><sym>(</sym><def></def><kwc>System</kwc><def></def><sym>.</sym><def>out</def><sym>)</sym><br />
<def></def><br />
      <kwa>var</kwa> <def>lines</def><sym>:</sym> <def>LineStack</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwc>Stack</kwc><br />
<def></def>      <kwa>var</kwa> <def>desc</def> <sym>=</sym> <def></def><str>&quot;&quot;</str><def></def><br />
<br />
      <kwa>var</kwa> <def>line</def> <sym>=</sym> <def>r</def><sym>.</sym><def>readLine</def><br />
      <kwa>while</kwa> <def></def><sym>(</sym><def>line</def> <sym>!=</sym> <def>null</def><sym>) {</sym><br />
<def></def>         <kwa>val</kwa> <def>c</def> <sym>=</sym> <def>line</def><sym>.</sym><def>charAt</def><sym>(</sym><def></def><num>0</num><def></def><sym>)</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>c</def> <sym>==</sym> <def></def><str>'&gt;'</str><def></def><sym>){</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>desc</def><sym>.</sym><def>length</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>){</sym><br />
<def>               complementReverseWrite</def><sym>(</sym><def>desc</def><sym>,</sym> <def>lines</def><sym>,</sym> <def>w</def><sym>)</sym><br />
<def>               lines</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwc>Stack</kwc><br />
<def></def>            <sym>}</sym><br />
<def>            desc</def> <sym>=</sym> <def>line</def><br />
         <sym>}</sym> <def></def><kwa>else</kwa> <def></def><sym>{</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>c</def> <sym>!=</sym> <def></def><str>';'</str><def></def><sym>)</sym> <def>lines</def> <sym>+=</sym> <def>line</def><sym>.</sym><def>getBytes</def><br />
         <sym>}</sym><br />
<def>         line</def> <sym>=</sym> <def>r</def><sym>.</sym><def>readLine</def><br />
      <sym>}</sym><br />
<def>      r</def><sym>.</sym><def>close</def><br />
<br />
      <kwa>if</kwa> <def></def><sym>(</sym><def>desc</def><sym>.</sym><def>length</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>)</sym> <def>complementReverseWrite</def><sym>(</sym><def>desc</def><sym>,</sym> <def>lines</def><sym>,</sym> <def>w</def><sym>)</sym><br />
<def>      w</def><sym>.</sym><def>close</def><br />
   <sym>}</sym><br />
<def></def><br />
<br />
   <kwa>def</kwa> <def>complementReverseWrite</def><sym>(</sym><def>desc</def><sym>:</sym> <def></def><kwc>String</kwc><def></def><sym>,</sym> <def>lines</def><sym>:</sym> <def>LineStack</def><sym>,</sym><br />
<def>         w</def><sym>:</sym> <def></def><kwc>BufferedOutputStream</kwc><def></def><sym>) = {</sym><br />
<def></def><br />
      <kwa>def</kwa> <def>inplaceComplementReverse</def><sym>(</sym><def>b</def><sym>:</sym> <def></def><kwc>Array</kwc><def></def><sym>[</sym><def></def><kwb>byte</kwb><def></def><sym>]) = {</sym><br />
<def></def>         <kwa>var</kwa> <def>i</def> <sym>=</sym> <def></def><num>0</num><br />
<def></def>         <kwa>var</kwa> <def>j</def> <sym>=</sym> <def>b</def><sym>.</sym><def>length</def> <sym>-</sym> <def></def><num>1</num><br />
<def></def>         <kwa>while</kwa> <def></def><sym>(</sym><def>i</def> <sym>&lt;</sym> <def>j</def><sym>){</sym><br />
<def></def>            <kwa>val</kwa> <def>swap</def> <sym>=</sym> <def>b</def><sym>(</sym><def>i</def><sym>)</sym><br />
<def>            b</def><sym>(</sym><def>i</def><sym>) =</sym> <def>IUB</def><sym>(</sym> <def>b</def><sym>(</sym><def>j</def><sym>) )</sym><br />
<def>            b</def><sym>(</sym><def>j</def><sym>) =</sym> <def>IUB</def><sym>(</sym> <def>swap</def> <sym>)</sym><br />
<def>            i</def> <sym>=</sym> <def>i</def> <sym>+</sym> <def></def><num>1</num><br />
<def>            j</def> <sym>=</sym> <def>j</def> <sym>-</sym> <def></def><num>1</num><br />
<def></def>         <sym>}</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>i</def> <sym>==</sym> <def>j</def><sym>)</sym> <def>b</def><sym>(</sym><def>i</def><sym>) =</sym> <def>IUB</def><sym>(</sym> <def>b</def><sym>(</sym><def>i</def><sym>) )</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><br />
      <kwa>val</kwa> <def>nl</def> <sym>=</sym> <def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>.</sym><def>toByte<br />
      w</def><sym>.</sym><def>write</def><sym>(</sym><def>desc</def><sym>.</sym><def>getBytes</def><sym>);</sym> <def>w</def><sym>.</sym><def>write</def><sym>(</sym><def>nl</def><sym>)</sym><br />
<def></def><br />
      <kwa>val</kwa> <def>n</def> <sym>=</sym> <def></def><num>60</num><br />
<def></def>      <kwa>val</kwa> <def>k</def> <sym>=</sym> <def></def><kwa>if</kwa> <def></def><sym>(</sym><def>lines</def><sym>.</sym><def>isEmpty</def><sym>)</sym> <def></def><num>0</num> <def></def><kwa>else</kwa> <def>lines</def><sym>.</sym><def>top</def><sym>.</sym><def>length</def><br />
      <kwa>val</kwa> <def>isSplitLine</def> <sym>=</sym> <def>k</def> <sym>&lt;</sym> <def>n</def><br />
      <kwa>var</kwa> <def>isFirstLine</def> <sym>=</sym> <def>true</def><br />
<br />
      <kwa>while</kwa> <def></def><sym>(!</sym><def>lines</def><sym>.</sym><def>isEmpty</def><sym>) {</sym><br />
<def></def>        <kwa>val</kwa> <def>line</def> <sym>=</sym> <def>lines</def><sym>.</sym><def>pop<br />
        inplaceComplementReverse</def><sym>(</sym><def>line</def><sym>)</sym><br />
<def></def><br />
        <kwa>if</kwa> <def></def><sym>(</sym><def>isSplitLine</def><sym>){</sym><br />
<def></def>           <kwa>if</kwa> <def></def><sym>(</sym><def>isFirstLine</def><sym>){</sym> <def>w</def><sym>.</sym><def>write</def><sym>(</sym><def>line</def><sym>);</sym> <def>isFirstLine</def> <sym>=</sym> <def>false</def> <sym>}</sym><br />
<def></def>           <kwa>else</kwa> <def></def><sym>{</sym> <def>w</def><sym>.</sym><def>write</def><sym>(</sym><def>line</def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def>n</def><sym>-</sym><def>k</def><sym>);</sym> <def>w</def><sym>.</sym><def>write</def><sym>(</sym><def>nl</def><sym>);</sym> <def>w</def><sym>.</sym><def>write</def><sym>(</sym><def>line</def><sym>,</sym><def>n</def><sym>-</sym><def>k</def><sym>,</sym><def>k</def><sym>) }</sym><br />
<def></def>        <sym>}</sym><br />
<def></def>        <kwa>else</kwa> <def></def><sym>{</sym> <def>w</def><sym>.</sym><def>write</def><sym>(</sym><def>line</def><sym>);</sym> <def>w</def><sym>.</sym><def>write</def><sym>(</sym><def>nl</def><sym>) }</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>isSplitLine</def> <sym>&amp;&amp; !</sym><def>isFirstLine</def><sym>)</sym> <def>w</def><sym>.</sym><def>write</def><sym>(</sym><def>nl</def><sym>)</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
<sym>}</sym><def></def><br />
</source>
