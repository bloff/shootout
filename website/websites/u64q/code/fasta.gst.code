<source>
<def></def><com>&quot;* The Computer Language Shootout</com><br />
<com>    http://shootout.alioth.debian.org/</com><br />
<com>    contributed by Isaac Gouy</com><br />
<com>    modified by Paolo Bonzini</com><br />
<com>    modified by Eliot Miranda *&quot;</com><def>!</def><br />
<br />
<kwc>Object</kwc> <def></def><kwb>subclass:</kwb> <def></def><kwd>#RandomNumber</kwd>   <def></def><kwb>instanceVariableNames:</kwb> <def></def><str>'seed scale'</str><def></def>   <kwb>classVariableNames:</kwb> <def></def><str>'FModulus Increment Modulus Multiplier'</str><def></def>   <kwb>poolDictionaries:</kwb> <def></def><str>''</str><def></def>   <kwb>category:</kwb> <def></def><str>'Shootout'</str><def>!</def><br />
<br />
<kwc>ReadStream</kwc> <def></def><kwb>subclass:</kwb> <def></def><kwd>#RepeatStream</kwd>   <def></def><kwb>instanceVariableNames:</kwb> <def></def><str>'repeatPtr repeatLimit'</str><def></def>   <kwb>classVariableNames:</kwb> <def></def><str>''</str><def></def>   <kwb>poolDictionaries:</kwb> <def></def><str>''</str><def></def>   <kwb>category:</kwb> <def></def><str>'Shootout'</str><def>!</def><br />
<br />
<kwc>RepeatStream</kwc> <def></def><kwb>subclass:</kwb> <def></def><kwd>#RandomStream</kwd>   <def></def><kwb>instanceVariableNames:</kwb> <def></def><str>'random percentages'</str><def></def>   <kwb>classVariableNames:</kwb> <def></def><str>''</str><def></def>   <kwb>poolDictionaries:</kwb> <def></def><str>''</str><def></def>   <kwb>category:</kwb> <def></def><str>'Shootout'</str><def>!!</def><kwc>RandomNumber</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'private'</str><def>!</def><kwb>to:</kwb> <def>anInteger   seed</def> <sym>:=</sym> <def></def><num>42</num><def></def><sym>.</sym>   <def>scale</def> <sym>:=</sym> <def>anInteger! !!</def><kwc>RandomNumber</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'accessing'</str><def>!next   seed</def> <sym>:= (</sym><def>seed</def> <kwb>*</kwb> <def></def><kwc>Multiplier</kwc> <def></def><kwb>+</kwb> <def></def><kwc>Increment</kwc><def></def><sym>)</sym> <def>\\</def> <kwc>Modulus</kwc><def></def><sym>.   ^(</sym><def>seed</def> <kwb>*</kwb> <def>scale</def><sym>)</sym> <def></def><kwb>/</kwb> <def></def><kwc>FModulus</kwc><def>! !!</def><kwc>RandomNumber</kwc> <def></def><kwb>class methodsFor:</kwb> <def></def><str>'class initialization'</str><def>!initialize</def>   <kwc>FModulus</kwc> <def></def><sym>:=</sym> <def></def><num>139968.0</num><def>d0</def><sym>.</sym>   <def></def><kwc>Increment</kwc> <def></def><sym>:=</sym> <def></def><num>29573</num><def></def><sym>.</sym>   <def></def><kwc>Modulus</kwc> <def></def><sym>:=</sym> <def></def><num>139968</num><def></def><sym>.</sym>   <def></def><kwc>Multiplier</kwc> <def></def><sym>:=</sym> <def></def><num>3877</num><def></def><sym>.</sym><def>! !!</def><kwc>RandomNumber</kwc> <def></def><kwb>class methodsFor:</kwb> <def></def><str>'initialize-release'</str><def>!</def><kwb>to:</kwb> <def>anInteger</def>   <sym>^</sym><def></def><kwa>self</kwa> <def></def><kwb>basicNew to:</kwb> <def>anInteger! !!</def><kwc>RepeatStream</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'accessing'</str><def>!next</def>   <kwd>| element |</kwd><br />
<def>   ptr &gt;</def> <kwb>endPtr ifTrue:</kwb> <def></def><sym>[</sym> <def></def><kwa>self</kwa> <def></def><kwb>position:</kwb> <def></def><num>0</num> <def></def><sym>].</sym><br />
<def>   element</def> <sym>:=</sym> <def>collection</def> <kwb>at:</kwb> <def>ptr</def><sym>.</sym><br />
<def>   ptr</def> <sym>:=</sym> <def>ptr</def> <kwb>+</kwb> <def></def><num>1</num><def></def><sym>.</sym> <def>repeatPtr</def> <sym>:=</sym> <def>repeatPtr</def> <kwb>+</kwb> <def></def><num>1</num><def></def><sym>.</sym><br />
<def></def>   <sym>^</sym><def>element! !!</def><kwc>RepeatStream</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'testing'</str><def>!atEnd</def>   <sym>^</sym><def>repeatPtr</def> <kwb>&gt;=</kwb> <def>repeatLimit! !!</def><kwc>RepeatStream</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'initialize-release'</str><def>!</def><kwb>to:</kwb> <def>anInteger   repeatPtr</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>.</sym>   <def>repeatLimit</def> <sym>:=</sym> <def>anInteger! !!</def><kwc>RandomStream</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'accessing'</str><def>!next</def>   <kwd>| r |</kwd>   <def>r</def> <sym>:=</sym> <def>random</def> <kwb>next</kwb><def></def><sym>.</sym>   <def>repeatPtr</def> <sym>:=</sym> <def>repeatPtr</def> <kwb>+</kwb> <def></def><num>1</num><def></def><sym>.</sym>   <def></def><num>1</num> <def></def><kwb>to:</kwb> <def>percentages</def> <kwb>size do:</kwb> <def></def><sym>[</sym><def></def><kwd>:i</kwd><def></def><sym>|      (</sym><def>r &lt;</def> <sym>(</sym><def>percentages</def> <kwb>at:</kwb> <def>i</def><sym>))</sym> <def></def><kwb>ifTrue:</kwb> <def></def><sym>[^</sym><def>collection</def> <kwb>at:</kwb> <def>i</def><sym>]]</sym><def>! !!</def><kwc>RandomStream</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'accessing'</str><def>!</def><kwb>random:</kwb> <def>aRandomNumber</def><com>&quot;* Share the random number generator so we can get the expected results. *&quot;</com><def>   random</def> <sym>:=</sym> <def>aRandomNumber! !!</def><kwc>RandomStream</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'private methods'</str><def>!</def><kwb>initCollection:</kwb> <def>aCollection</def> <kwb>limit:</kwb> <def>size</def>   <kwd>| cp |</kwd>   <def>repeatPtr</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>.</sym>   <def>random</def> <sym>:=</sym> <def></def><kwc>RandomNumber</kwc> <def></def><kwb>to:</kwb> <def></def><num>1.0</num><def>d0</def><sym>.</sym>   <def>percentages</def> <sym>:=</sym> <def></def><kwc>Array</kwc> <def></def><kwb>new:</kwb> <def>size</def><sym>.</sym>   <def>collection</def> <sym>:=</sym> <def></def><kwc>Array</kwc> <def></def><kwb>new:</kwb> <def>size</def><sym>.</sym>   <def>cp</def> <sym>:=</sym> <def></def><num>0.0</num><def>d0</def><sym>.</sym><br />
<def></def>   <num>1</num> <def></def><kwb>to:</kwb> <def>size</def> <kwb>do:</kwb> <def></def><sym>[</sym><def></def><kwd>:i</kwd><def></def><sym>|</sym>      <def>collection</def> <kwb>at:</kwb> <def>i</def> <kwb>put:</kwb> <def></def><sym>(</sym><def>aCollection</def> <kwb>at:</kwb> <def>i</def><sym>)</sym> <def></def><kwb>first</kwb><def></def><sym>.</sym>      <def>percentages</def> <kwb>at:</kwb> <def>i</def> <kwb>put:</kwb> <def></def><sym>(</sym><def>cp</def> <sym>:=</sym> <def>cp</def> <kwb>+</kwb> <def></def><sym>(</sym><def>aCollection</def> <kwb>at:</kwb> <def>i</def><sym>)</sym> <def></def><kwb>last</kwb><def></def><sym>).</sym><br />
<def></def>   <sym>]</sym><def>! !!</def><kwc>RepeatStream</kwc> <def></def><kwb>class methodsFor:</kwb> <def></def><str>'instance creation'</str><def>!</def><kwb>to:</kwb> <def>anInteger</def> <kwb>on:</kwb> <def>aCollection</def>   <sym>^(</sym><def></def><kwa>super</kwa> <def></def><kwb>on:</kwb> <def>aCollection</def><sym>)</sym> <def></def><kwb>to:</kwb> <def>anInteger! !<br />
<br />
<br />
!</def><kwc>Tests</kwc> <def></def><kwb>class methodsFor:</kwb> <def></def><str>'benchmarking'</str><def>!</def><br />
<kwb>writeFasta:</kwb> <def>aString</def> <kwb>from:</kwb> <def>inStream</def> <kwb>to:</kwb> <def>outStream</def> <kwb>lineLength:</kwb> <def>lineLength</def><br />
   <kwd>| i |</kwd><br />
<def>   outStream</def> <kwb>nextPut:</kwb> <def>$&gt;</def><sym>;</sym> <def></def><kwb>nextPutAll:</kwb> <def>aString</def><sym>;</sym> <def></def><kwb>nl</kwb><def></def><sym>.</sym><br />
<def>   i</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>.</sym><br />
<def></def>   <sym>[</sym><def>inStream</def> <kwb>atEnd</kwb><def></def><sym>]</sym> <def></def><kwb>whileFalse:</kwb><br />
<def></def>      <sym>[</sym><def>i</def> <kwb>==</kwb> <def>lineLength</def> <kwb>ifTrue:</kwb> <def></def><sym>[</sym><def>outStream</def> <kwb>nl</kwb><def></def><sym>.</sym> <def>i</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>].</sym><br />
<def>      outStream</def> <kwb>nextPut:</kwb> <def>inStream</def> <kwb>next</kwb><def></def><sym>.</sym><br />
<def>      i</def> <sym>:=</sym> <def>i</def> <kwb>+</kwb> <def></def><num>1</num><def></def><sym>].</sym><br />
<def>   outStream</def> <kwb>nl</kwb><def>! !<br />
<br />
!</def><kwc>Tests</kwc> <def></def><kwb>class methodsFor:</kwb> <def></def><str>'benchmarking'</str><def>!</def><br />
<kwb>fasta:</kwb> <def>n</def> <kwb>to:</kwb> <def>out</def><br />
   <kwd>| r lineLength |</kwd><br />
<def>   lineLength</def> <sym>:=</sym> <def></def><num>60</num><def></def><sym>.</sym><br />
<def></def><br />
   <kwa>self</kwa><br />
<def></def>      <kwb>writeFasta:</kwb> <def></def><str>'ONE Homo sapiens alu'</str><def></def><br />
      <kwb>from:</kwb><br />
<def></def>         <sym>(</sym> <def></def><kwc>RepeatStream</kwc><br />
<def></def>            <kwb>to:</kwb> <def>n</def><kwb>*</kwb><def></def><num>2</num><br />
<def></def>            <kwb>on:</kwb><def></def><str>'GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG'</str><def>,</def><br />
               <str>'GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA'</str><def>,</def><br />
               <str>'CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT'</str><def>,</def><br />
               <str>'ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA'</str><def>,</def><br />
               <str>'GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG'</str><def>,</def><br />
               <str>'AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC'</str><def>,</def><br />
               <str>'AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA'</str><def></def> <sym>)</sym><br />
<def></def>      <kwb>to:</kwb> <def>out</def><br />
      <kwb>lineLength:</kwb> <def>lineLength</def><sym>.</sym><br />
<def><br />
   r</def> <sym>:=</sym> <def></def><kwc>RandomNumber</kwc> <def></def><kwb>to:</kwb> <def></def><num>1</num><def></def><sym>.</sym> <def></def><com>&quot;Shared random sequence&quot;</com><def></def><br />
<br />
   <kwa>self</kwa><br />
<def></def>      <kwb>writeFasta:</kwb> <def></def><str>'TWO IUB ambiguity codes'</str><def></def><br />
      <kwb>from:</kwb><br />
<def></def>         <sym>((</sym> <def></def><kwc>RandomStream</kwc><br />
<def></def>            <kwb>to:</kwb> <def>n</def><kwb>*</kwb><def></def><num>3</num><br />
<def></def>            <kwb>on:</kwb> <def></def><sym>#(   #(</sym><def></def><num>$a 0.27</num><def>d0</def><sym>)</sym><br />
<def></def>                  <sym>#(</sym><def></def><num>$c 0.12</num><def>d0</def><sym>)</sym><br />
<def></def>                  <sym>#(</sym><def></def><num>$g 0.12</num><def>d0</def><sym>)</sym><br />
<def></def>                  <sym>#(</sym><def></def><num>$t 0.27</num><def>d0</def><sym>)</sym><br />
<def></def><br />
                  <sym>#(</sym><def></def><num>$B 0.02</num><def>d0</def><sym>)</sym><br />
<def></def>                  <sym>#(</sym><def></def><num>$D 0.02</num><def>d0</def><sym>)</sym><br />
<def></def>                  <sym>#(</sym><def></def><num>$H 0.02</num><def>d0</def><sym>)</sym><br />
<def></def>                  <sym>#(</sym><def></def><num>$K 0.02</num><def>d0</def><sym>)</sym><br />
<def></def>                  <sym>#(</sym><def></def><num>$M 0.02</num><def>d0</def><sym>)</sym><br />
<def></def>                  <sym>#(</sym><def></def><num>$N 0.02</num><def>d0</def><sym>)</sym><br />
<def></def>                  <sym>#(</sym><def></def><num>$R 0.02</num><def>d0</def><sym>)</sym><br />
<def></def>                  <sym>#(</sym><def></def><num>$S 0.02</num><def>d0</def><sym>)</sym><br />
<def></def>                  <sym>#(</sym><def></def><num>$V 0.02</num><def>d0</def><sym>)</sym><br />
<def></def>                  <sym>#(</sym><def></def><num>$W 0.02</num><def>d0</def><sym>)</sym><br />
<def></def>                  <sym>#(</sym><def></def><num>$Y 0.02</num><def>d0</def><sym>)))</sym><br />
<def></def>         <kwb>random:</kwb> <def>r</def><sym>;</sym><br />
<def>         yourself</def><sym>)</sym><br />
<def></def>      <kwb>to:</kwb> <def>out</def><br />
      <kwb>lineLength:</kwb> <def>lineLength</def><sym>.</sym><br />
<def></def><br />
   <kwa>self</kwa><br />
<def></def>      <kwb>writeFasta:</kwb> <def></def><str>'THREE Homo sapiens frequency'</str><def></def><br />
      <kwb>from:</kwb><br />
<def></def>         <sym>((</sym> <def></def><kwc>RandomStream</kwc><br />
<def></def>            <kwb>to:</kwb> <def>n</def><kwb>*</kwb><def></def><num>5</num><br />
<def></def>            <kwb>on:</kwb> <def></def><sym>#(   #(</sym><def></def><num>$a 0.3029549426680</num><def>d0</def><sym>)</sym><br />
<def></def>                  <sym>#(</sym><def></def><num>$c 0.1979883004921</num><def>d0</def><sym>)</sym><br />
<def></def>                  <sym>#(</sym><def></def><num>$g 0.1975473066391</num><def>d0</def><sym>)</sym><br />
<def></def>                  <sym>#(</sym><def></def><num>$t 0.3015094502008</num><def>d0</def><sym>)))</sym><br />
<def></def>            <kwb>random:</kwb> <def>r</def><sym>;</sym><br />
<def>            yourself</def><sym>)</sym><br />
<def></def>      <kwb>to:</kwb> <def>out</def><br />
      <kwb>lineLength:</kwb> <def>lineLength</def><sym>.</sym><br />
<def><br />
   out</def> <kwb>flush</kwb><def></def><sym>.</sym> <def>! !<br />
!</def><kwc>Tests</kwc> <def></def><kwb>class methodsFor:</kwb> <def></def><str>'benchmark scripts'</str><def>!<br />
fasta</def>   <kwa>self</kwa> <def></def><kwb>fasta:</kwb> <def></def><kwa>self</kwa> <def></def><kwb>arg to:</kwb> <def></def><kwa>self</kwa> <def></def><kwb>stdout</kwb><def></def><sym>.   ^</sym><def></def><str>''</str><def>! !</def><br />
<br />
<kwc>RandomNumber</kwc> <def></def><kwb>initialize</kwb><def>!</def><br />
<br />
<br />
<kwc>Tests</kwc> <def></def><kwb>fasta</kwb><def>!</def><br />
</source>
