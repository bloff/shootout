<span class="hl com">(* nsieve.ml -- naïve Sieve of Eratosthenes</span>
<span class="hl com"> *</span>
<span class="hl com"> * The Great Computer Language Shootout</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Contributed by Christophe TROESTLER</span>
<span class="hl com"> * Modified by Vladimir Silyaev</span>
<span class="hl com"> *)</span>

<span class="hl kwa">let</span> max_array_length <span class="hl sym">=</span> <span class="hl num">16</span><span class="hl sym">*(</span><span class="hl num">4194303</span><span class="hl sym">/</span><span class="hl num">16</span><span class="hl sym">)</span>

<span class="hl kwa">let</span> array_make_true n <span class="hl sym">=</span>
  <span class="hl sym">(</span><span class="hl kwc">Array</span><span class="hl sym">.</span>create <span class="hl sym">(</span>min n max_array_length<span class="hl sym">)</span> <span class="hl kwa">true</span><span class="hl sym">),(</span><span class="hl kwc">Array</span><span class="hl sym">.</span>create <span class="hl sym">(</span>max <span class="hl num">0</span> <span class="hl sym">(</span>n <span class="hl sym">-</span> max_array_length<span class="hl sym">))</span> <span class="hl kwa">true</span><span class="hl sym">)</span>

<span class="hl kwa">let</span> clear <span class="hl sym">(</span>a1<span class="hl sym">,</span>a2<span class="hl sym">)</span> n <span class="hl sym">=</span>
  <span class="hl kwa">if</span> n <span class="hl sym">&lt;</span> max_array_length <span class="hl kwa">then</span> <span class="hl sym">(</span><span class="hl kwa">if</span> a1<span class="hl sym">.(</span>n<span class="hl sym">)</span> <span class="hl kwa">then</span> a1<span class="hl sym">.(</span>n<span class="hl sym">) &lt;-</span> <span class="hl kwa">false</span><span class="hl sym">)</span>
  <span class="hl kwa">else if</span> a2<span class="hl sym">.(</span>n<span class="hl sym">-</span>max_array_length<span class="hl sym">)</span> <span class="hl kwa">then</span> a2<span class="hl sym">.(</span>n<span class="hl sym">-</span>max_array_length<span class="hl sym">) &lt;-</span> <span class="hl kwa">false</span>

<span class="hl kwa">let</span> get <span class="hl sym">(</span>a1<span class="hl sym">,</span>a2<span class="hl sym">)</span> n <span class="hl sym">:</span><span class="hl kwb">bool</span> <span class="hl sym">=</span>
  <span class="hl kwa">if</span> n <span class="hl sym">&lt;</span> max_array_length <span class="hl kwa">then</span> a1<span class="hl sym">.(</span>n<span class="hl sym">)</span> <span class="hl kwa">else</span> a2<span class="hl sym">.(</span>n<span class="hl sym">-</span>max_array_length<span class="hl sym">)</span>


<span class="hl kwa">let</span> nsieve m <span class="hl sym">=</span>
  <span class="hl kwa">let</span> a <span class="hl sym">=</span> array_make_true m <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> count <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">in</span>
  <span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">2</span> <span class="hl kwa">to</span> m <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl kwa">do</span>
    <span class="hl kwa">if</span> get a i <span class="hl kwa">then</span> <span class="hl sym">(</span>
      incr count<span class="hl sym">;</span>
      <span class="hl kwa">let</span> j <span class="hl sym">=</span> <span class="hl kwb">ref</span><span class="hl sym">(</span>i <span class="hl kwa">lsl</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">in while</span> <span class="hl sym">!</span>j <span class="hl sym">&lt;</span> m <span class="hl kwa">do</span> clear a <span class="hl sym">!</span>j <span class="hl sym">;</span> j <span class="hl sym">:= !</span>j<span class="hl sym">+</span>i <span class="hl kwa">done</span><span class="hl sym">;</span>
    <span class="hl sym">)</span>
  <span class="hl kwa">done</span><span class="hl sym">;</span>
  <span class="hl kwc">Printf</span><span class="hl sym">.</span>printf <span class="hl str">&quot;Primes up to %8u %8u</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> m <span class="hl sym">!</span>count


<span class="hl kwa">let</span> <span class="hl sym">() =</span>
  <span class="hl com">(* Use [Array.get] so it raises an exception even if compiled with -unsafe *)</span>
  <span class="hl kwa">let</span> n <span class="hl sym">=</span> <span class="hl kwa">try</span> int_of_string <span class="hl sym">(</span><span class="hl kwc">Array</span><span class="hl sym">.</span>get <span class="hl kwc">Sys</span><span class="hl sym">.</span>argv <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">with</span> _ <span class="hl sym">-&gt;</span> <span class="hl num">2</span> <span class="hl kwa">in</span>
  <span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> <span class="hl num">2</span> <span class="hl kwa">do</span> nsieve<span class="hl sym">(</span><span class="hl num">10000</span> <span class="hl kwa">lsl</span> <span class="hl sym">(</span>n<span class="hl sym">-</span>i<span class="hl sym">))</span> <span class="hl kwa">done</span>
