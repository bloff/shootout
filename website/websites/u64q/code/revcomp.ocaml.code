<source>
<def></def><com>(* reverse-complement.ml</com><br />
<com> *</com><br />
<com> * The Great Computer Language Shootout</com><br />
<com> * http://shootout.alioth.debian.org/</com><br />
<com> *</com><br />
<com> * Contributed by Troestler Christophe</com><br />
<com> *)</com><def></def><br />
<br />
<br />
<kwa>let</kwa> <def>complement</def> <sym>=</sym><br />
<def></def>  <kwa>let</kwa> <def>cplt</def> <sym>=</sym> <def></def><kwc>Array</kwc><def></def><sym>.</sym><def>init</def> <num>256</num> <def></def><sym>(</sym><def></def><kwa>fun</kwa> <def>i</def> <sym>-&gt;</sym> <def></def><kwc>Char</kwc><def></def><sym>.</sym><def>chr i</def><sym>)</sym> <def></def><kwa>in</kwa><br />
<def></def>  <kwc>List</kwc><def></def><sym>.</sym><def>iter</def> <sym>(</sym><def></def><kwa>fun</kwa> <def></def><sym>(</sym><def>c1</def><sym>,</sym> <def>c2</def><sym>) -&gt;</sym><br />
<def>	       cplt</def><sym>.(</sym><def></def><kwc>Char</kwc><def></def><sym>.</sym><def>code c1</def><sym>) &lt;-</sym> <def>c2</def><sym>;</sym><br />
<def>	       cplt</def><sym>.(</sym><def></def><kwc>Char</kwc><def></def><sym>.</sym><def>code c2</def><sym>) &lt;-</sym> <def>c1</def><sym>;</sym><br />
<def>	       cplt</def><sym>.(</sym><def></def><kwc>Char</kwc><def></def><sym>.</sym><def>code</def><sym>(</sym><def></def><kwc>Char</kwc><def></def><sym>.</sym><def>lowercase c1</def><sym>)) &lt;-</sym> <def>c2</def><sym>;</sym><br />
<def>	       cplt</def><sym>.(</sym><def></def><kwc>Char</kwc><def></def><sym>.</sym><def>code</def><sym>(</sym><def></def><kwc>Char</kwc><def></def><sym>.</sym><def>lowercase c2</def><sym>)) &lt;-</sym> <def>c1</def><sym>;  )</sym><br />
<def></def>    <sym>[ (</sym><def></def><kwb>'A'</kwb><def></def><sym>,</sym><def></def><kwb>'T'</kwb><def></def><sym>); (</sym><def></def><kwb>'C'</kwb><def></def><sym>,</sym><def></def><kwb>'G'</kwb><def></def><sym>); (</sym><def></def><kwb>'B'</kwb><def></def><sym>,</sym><def></def><kwb>'V'</kwb><def></def><sym>); (</sym><def></def><kwb>'D'</kwb><def></def><sym>,</sym><def></def><kwb>'H'</kwb><def></def><sym>); (</sym><def></def><kwb>'K'</kwb><def></def><sym>,</sym><def></def><kwb>'M'</kwb><def></def><sym>); (</sym><def></def><kwb>'R'</kwb><def></def><sym>,</sym><def></def><kwb>'Y'</kwb><def></def><sym>) ];</sym><br />
<def>  cplt</def><br />
<br />
<com>(* [reverse s] reverse-complement the string [s] in place. *)</com><def></def><br />
<kwa>let</kwa> <def>reverse s</def> <sym>=</sym><br />
<def></def>  <kwa>let rec</kwa> <def>rev i j</def> <sym>=</sym><br />
<def></def>    <kwa>if</kwa> <def>i</def> <sym>&lt;</sym> <def>j</def> <kwa>then</kwa> <def></def><sym>(</sym><br />
<def></def>      <kwa>let</kwa> <def>si</def> <sym>=</sym> <def>s</def><sym>.[</sym><def>i</def><sym>]</sym> <def></def><kwa>in</kwa><br />
<def>      s</def><sym>.[</sym><def>i</def><sym>] &lt;-</sym> <def>complement</def><sym>.(</sym><def></def><kwc>Char</kwc><def></def><sym>.</sym><def>code s</def><sym>.[</sym><def>j</def><sym>]);</sym><br />
<def>      s</def><sym>.[</sym><def>j</def><sym>] &lt;-</sym> <def>complement</def><sym>.(</sym><def></def><kwc>Char</kwc><def></def><sym>.</sym><def>code si</def><sym>);</sym><br />
<def>      rev</def> <sym>(</sym><def>i</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>) (</sym><def>j</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>    <sym>)</sym> <def></def><kwa>in</kwa><br />
<def>  rev</def> <num>0</num> <def></def><sym>(</sym><def></def><kwc>String</kwc><def></def><sym>.</sym><def>length s</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def>  s</def><br />
<br />
<kwa>let</kwa> <def>print_fasta</def> <sym>=</sym><br />
<def></def>  <kwa>let rec</kwa> <def>print60 pos len dna</def> <sym>=</sym><br />
<def></def>    <kwa>if</kwa> <def>len</def> <sym>&gt;</sym> <def></def><num>60</num> <def></def><kwa>then</kwa> <def></def><sym>(</sym><br />
<def>      output stdout dna pos</def> <num>60</num><def></def><sym>;</sym> <def>print_string</def> <str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>;</sym><br />
<def>      print60</def> <sym>(</sym><def>pos</def> <sym>+</sym> <def></def><num>60</num><def></def><sym>) (</sym><def>len</def> <sym>-</sym> <def></def><num>60</num><def></def><sym>)</sym> <def>dna</def><br />
    <sym>)</sym><br />
<def></def>    <kwa>else</kwa> <def></def><sym>(</sym><def>output stdout dna pos len</def><sym>;</sym> <def>print_string</def> <str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>)</sym> <def></def><kwa>in</kwa><br />
<def></def>  <kwa>fun</kwa> <def>dna</def> <sym>-&gt;</sym> <def>print60</def> <num>0</num> <def></def><sym>(</sym><def></def><kwc>String</kwc><def></def><sym>.</sym><def>length dna</def><sym>)</sym> <def>dna</def><br />
<br />
<br />
<kwa>let</kwa> <def></def><sym>() =</sym><br />
<def></def>  <kwa>let</kwa> <def>buf</def> <sym>=</sym> <def></def><kwc>Buffer</kwc><def></def><sym>.</sym><def>create</def> <num>4096</num> <def></def><kwa>in</kwa><br />
<def></def>  <kwa>try while true do</kwa><br />
<def></def>    <kwa>let</kwa> <def>line</def> <sym>=</sym> <def>input_line stdin</def> <kwa>in</kwa><br />
<def></def>    <kwa>if</kwa> <def></def><kwc>String</kwc><def></def><sym>.</sym><def>length line</def> <sym>&gt;</sym> <def></def><num>0</num> <def></def><sym>&amp;&amp;</sym> <def>line</def><sym>.[</sym><def></def><num>0</num><def></def><sym>] =</sym> <def></def><str>'&gt;'</str><def></def> <kwa>then</kwa> <def></def><sym>(</sym><br />
<def></def>      <kwa>if</kwa> <def></def><kwc>Buffer</kwc><def></def><sym>.</sym><def>length buf</def> <sym>&gt;</sym> <def></def><num>0</num> <def></def><kwa>then</kwa> <def>print_fasta</def><sym>(</sym><def>reverse</def><sym>(</sym><def></def><kwc>Buffer</kwc><def></def><sym>.</sym><def>contents buf</def><sym>));</sym><br />
<def></def>      <kwc>Buffer</kwc><def></def><sym>.</sym><def>clear buf</def><sym>;</sym><br />
<def>      print_endline line</def><br />
    <sym>)</sym><br />
<def></def>    <kwa>else</kwa> <def></def><kwc>Buffer</kwc><def></def><sym>.</sym><def>add_string buf line</def><br />
  <kwa>done with</kwa> <def></def><kwd>End_of_file</kwd> <def></def><sym>-&gt;</sym> <def>print_fasta</def><sym>(</sym><def>reverse</def><sym>(</sym><def></def><kwc>Buffer</kwc><def></def><sym>.</sym><def>contents buf</def><sym>))</sym><br />
<def></def><br />
</source>
