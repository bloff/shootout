<source>
<def></def><com>/**</com><br />
<com> * The Computer Language Benchmarks Game</com><br />
<com> * Based on the CAL Open Quark version</com><br />
<com> * Contributed by Magnus Byne.</com><br />
<com> */</com><def></def><br />
<kwa>module</kwa> <def>Spectralnorm</def><sym>;</sym><br />
<def></def><br />
<kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Core</def><sym>.</sym><def>Prelude</def> <kwa>using</kwa><br />
<def></def>    <kwa>typeClass</kwa> <def></def><sym>=</sym> <def>Inputable</def><sym>,</sym> <def>Outputable</def><sym>;</sym><br />
<def></def>    <kwa>typeConstructor</kwa> <def></def><sym>=</sym> <def>Double</def><sym>,</sym> <def>Int</def><sym>,</sym> <def>String</def><sym>;</sym><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>eager</def><sym>,</sym> <def>fromInt</def><sym>,</sym> <def>seq</def><sym>,</sym> <def>stringToInt</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Utilities</def><sym>.</sym><def>Math</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>sqrt</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Collections</def><sym>.</sym><def>List</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>head</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Utilities</def><sym>.</sym><def>MessageFormat</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>formatWithPattern</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Utilities</def><sym>.</sym><def>Locale</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>invariantLocale</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><kwa>import</kwa> <def>Cal</def><sym>.</sym><def>IO</def><sym>.</sym><def>Console</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>printLine</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<kwa>data foreign unsafe import jvm</kwa> <def></def><str>&quot;double[]&quot;</str><def> JVector</def> <kwa>deriving</kwa> <def>Inputable</def><sym>,</sym> <def>Outputable</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;newArray&quot;</str><def> newVector</def> <sym>::</sym> <def>Int</def> <sym>-&gt;</sym> <def>JVector</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;subscriptArray&quot;</str><def> subscript</def> <sym>::</sym> <def>JVector</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Double</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;updateArray&quot;</str><def><br />
    update</def> <sym>::</sym> <def>JVector</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Double</def> <sym>-&gt;</sym> <def>Double</def><sym>;</sym><br />
<def></def><br />
<com>/** get element i,j of infinite matrix A*/</com><def><br />
matrixA</def> <sym>::</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Double</def><sym>;</sym><br />
<def>matrixA</def> <sym>!</sym><def>i</def> <sym>!</sym><def>j</def> <sym>=</sym> <def></def><num>1.0</num> <def></def><sym>/</sym> <def>fromInt</def> <sym>((</sym><def>i</def> <sym>+</sym> <def>j</def><sym>) * (</sym><def>i</def> <sym>+</sym> <def>j</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>) /</sym> <def></def><num>2</num> <def></def><sym>+</sym> <def>i</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def></def><br />
<com>/** multiply A by v*/</com><def><br />
multiplyAv</def> <sym>::</sym> <def>Int</def> <sym>-&gt;</sym> <def>JVector</def> <sym>-&gt;</sym> <def>JVector</def> <sym>-&gt; ();</sym><br />
<def>multiplyAv</def> <sym>!</sym><def>n</def> <sym>!</sym><def>v</def> <sym>!</sym><def>av</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa><br />
<def>        go</def> <sym>::</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt; ();</sym><br />
<def>        go</def> <sym>!</sym><def>i</def> <sym>!</sym><def>j</def> <sym>=</sym><br />
<def></def>            <kwa>if</kwa> <def>j</def> <sym>&lt;</sym> <def>n</def> <kwa>then</kwa><br />
<def>                update<br />
                    av<br />
                    i</def><br />
                    <sym>(</sym><def>av</def> <sym>`</sym><def>subscript</def><sym>`</sym> <def>i</def> <sym>+</sym> <def>matrixA i j</def> <sym>*</sym> <def>v</def> <sym>`</sym><def>subscript</def><sym>`</sym> <def>j</def><sym>)</sym><br />
<def></def>                <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                go i</def> <sym>(</sym><def>j</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>            <kwa>else</kwa><br />
<def></def>                <kwa>let</kwa><br />
<def>                    inc</def> <sym>::</sym> <def>Int</def><sym>;</sym><br />
<def>                    inc</def> <sym>=</sym> <def>i</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>                <kwa>in</kwa><br />
<def></def>                    <kwa>if</kwa> <def>inc</def> <sym>&lt;</sym> <def>n</def> <kwa>then</kwa><br />
<def>                        update av inc</def> <num>0.0</num><br />
<def></def>                        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                        go inc</def> <num>0</num><br />
<def></def>                    <kwa>else</kwa><br />
<def></def>                        <sym>()</sym><br />
<def></def>            <sym>;</sym><br />
<def></def>    <kwa>in</kwa><br />
<def>        go</def> <sym>(-</sym><def></def><num>1</num><def></def><sym>)</sym> <def>n</def><br />
    <sym>;</sym><br />
<def></def><br />
<com>/** multiply (Transpose A) by v*/</com><def><br />
multiplyAtv</def> <sym>::</sym> <def>Int</def> <sym>-&gt;</sym> <def>JVector</def> <sym>-&gt;</sym> <def>JVector</def> <sym>-&gt; ();</sym><br />
<def>multiplyAtv</def> <sym>!</sym><def>n</def> <sym>!</sym><def>v</def> <sym>!</sym><def>av</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa><br />
<def>        go</def> <sym>::</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt; ();</sym><br />
<def>        go</def> <sym>!</sym><def>i</def> <sym>!</sym><def>j</def> <sym>=</sym><br />
<def></def>            <kwa>if</kwa> <def>j</def> <sym>&lt;</sym> <def>n</def> <kwa>then</kwa><br />
<def>                update<br />
                    av<br />
                    i</def><br />
                    <sym>(</sym><def>av</def> <sym>`</sym><def>subscript</def><sym>`</sym> <def>i</def> <sym>+</sym> <def>matrixA j i</def> <sym>*</sym> <def>v</def> <sym>`</sym><def>subscript</def><sym>`</sym> <def>j</def><sym>)</sym><br />
<def></def>                <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                go i</def> <sym>(</sym><def>j</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>            <kwa>else</kwa><br />
<def></def>                <kwa>let</kwa><br />
<def>                    inc</def> <sym>::</sym> <def>Int</def><sym>;</sym><br />
<def>                    inc</def> <sym>=</sym> <def>i</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>                <kwa>in</kwa><br />
<def></def>                    <kwa>if</kwa> <def>inc</def> <sym>&lt;</sym> <def>n</def> <kwa>then</kwa><br />
<def>                        update av inc</def> <num>0.0</num><br />
<def></def>                        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                        go inc</def> <num>0</num><br />
<def></def>                    <kwa>else</kwa><br />
<def></def>                        <sym>()</sym><br />
<def></def>            <sym>;</sym><br />
<def></def>    <kwa>in</kwa><br />
<def>        go</def> <sym>(-</sym><def></def><num>1</num><def></def><sym>)</sym> <def>n</def><br />
    <sym>;</sym><br />
<def></def><br />
<com>/**(transpose A) * A * v*/</com><def><br />
multiplyAtAv</def> <sym>::</sym> <def>Int</def> <sym>-&gt;</sym> <def>JVector</def> <sym>-&gt;</sym> <def>JVector</def> <sym>-&gt;</sym> <def>JVector</def> <sym>-&gt; ();</sym><br />
<def>multiplyAtAv</def> <sym>!</sym><def>n</def> <sym>!</sym><def>temp</def> <sym>!</sym><def>v</def> <sym>!</sym><def>result</def> <sym>=</sym><br />
<def>    multiplyAv n v temp</def><br />
    <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>    multiplyAtv n temp result</def><br />
    <sym>;</sym><br />
<def></def><br />
<com>/**run n steps of the approximation*/</com><def><br />
approximate</def> <sym>::</sym> <def>Int</def> <sym>-&gt;</sym> <def>Double</def><sym>;</sym><br />
<def>approximate</def> <sym>!</sym><def>n</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa><br />
<def>        u</def> <sym>::</sym> <def>JVector</def><sym>;</sym><br />
<def>        u</def> <sym>=</sym> <def>eager $ newVector n</def><sym>;</sym><br />
<def><br />
        v</def> <sym>::</sym> <def>JVector</def><sym>;</sym><br />
<def>        v</def> <sym>=</sym> <def>eager $ newVector n</def><sym>;</sym><br />
<def><br />
        temp</def> <sym>::</sym> <def>JVector</def><sym>;</sym><br />
<def>        temp</def> <sym>=</sym> <def>eager $ newVector n</def><sym>;</sym><br />
<def><br />
        doStep</def> <sym>::</sym> <def>Int</def> <sym>-&gt; ();</sym><br />
<def>        doStep</def> <sym>!</sym><def>i</def> <sym>=</sym><br />
<def></def>            <kwa>if</kwa> <def>i</def> <sym>==</sym> <def></def><num>0</num> <def></def><kwa>then</kwa><br />
<def></def>                <sym>()</sym><br />
<def></def>            <kwa>else</kwa><br />
<def>                multiplyAtAv n temp u v</def><br />
                <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                multiplyAtAv n temp v u</def><br />
                <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                doStep</def> <sym>(</sym><def>i</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>            <sym>;</sym><br />
<def><br />
        vbv</def> <sym>::</sym> <def>Int</def> <sym>-&gt;</sym> <def>Double</def> <sym>-&gt;</sym> <def>Double</def><sym>;</sym><br />
<def>        vbv</def> <sym>!</sym><def>i</def> <sym>!</sym><def>sum</def> <sym>=</sym><br />
<def></def>            <kwa>if</kwa> <def>i</def> <sym>==</sym> <def>n</def> <kwa>then</kwa><br />
<def>                sum</def><br />
            <kwa>else</kwa><br />
<def>                vbv</def> <sym>(</sym><def>i</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>) (</sym><def>sum</def> <sym>+</sym> <def>u</def> <sym>`</sym><def>subscript</def><sym>`</sym> <def>i</def> <sym>*</sym> <def>v</def> <sym>`</sym><def>subscript</def><sym>`</sym> <def>i</def><sym>)</sym><br />
<def></def>            <sym>;</sym><br />
<def><br />
        vv</def> <sym>::</sym> <def>Int</def> <sym>-&gt;</sym> <def>Double</def> <sym>-&gt;</sym> <def>Double</def><sym>;</sym><br />
<def>        vv</def> <sym>!</sym><def>i</def> <sym>!</sym><def>sum</def> <sym>=</sym><br />
<def></def>            <kwa>if</kwa> <def>i</def> <sym>==</sym> <def>n</def> <kwa>then</kwa><br />
<def>                sum</def><br />
            <kwa>else</kwa><br />
<def>                vv</def> <sym>(</sym><def>i</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>) (</sym><def>sum</def> <sym>+</sym> <def>v</def> <sym>`</sym><def>subscript</def><sym>`</sym> <def>i</def> <sym>*</sym> <def>v</def> <sym>`</sym><def>subscript</def><sym>`</sym> <def>i</def><sym>)</sym><br />
<def></def>            <sym>;</sym><br />
<def><br />
        initVector</def> <sym>::</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>JVector</def> <sym>-&gt; ();</sym><br />
<def>        initVector</def> <sym>!</sym><def>i</def> <sym>!</sym><def>size</def> <sym>!</sym><def>v</def> <sym>=</sym><br />
<def></def>            <kwa>if</kwa> <def>i</def> <sym>==</sym> <def>size</def> <kwa>then</kwa><br />
<def></def>                <sym>()</sym><br />
<def></def>            <kwa>else</kwa><br />
<def>                update v i</def> <num>1.0</num><br />
<def></def>                <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                initVector</def> <sym>(</sym><def>i</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>)</sym> <def>size v</def><br />
            <sym>;</sym><br />
<def></def>    <kwa>in</kwa><br />
<def><br />
        initVector</def> <num>0</num> <def>n u</def><br />
        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>        doStep</def> <num>10</num><br />
<def></def>        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>        sqrt</def> <sym>(</sym><def>vbv</def> <num>0 0.0</num> <def></def><sym>/</sym> <def>vv</def> <num>0 0.0</num><def></def><sym>)</sym><br />
<def></def>    <sym>;</sym><br />
<def><br />
main</def> <sym>:: [</sym><def>String</def><sym>] -&gt; ();</sym><br />
<def></def><kwa>public</kwa> <def>main</def> <sym>!</sym><def>args</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa><br />
<def>        n</def> <sym>::</sym> <def>Int</def><sym>;</sym><br />
<def>        n</def> <sym>=</sym> <def>eager $ stringToInt</def> <sym>(</sym><def>head args</def><sym>);</sym><br />
<def></def>    <kwa>in</kwa><br />
<def>        printLine</def><br />
            <sym>(</sym><def>formatWithPattern</def><br />
                <str>&quot;{0,number,#.000000000}&quot;</str><def><br />
                invariantLocale</def><br />
                <sym>{</sym><def>#</def><num>1</num> <def></def><sym>=</sym> <def>approximate n</def><sym>}</sym><br />
<def></def>            <sym>)</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
</source>
