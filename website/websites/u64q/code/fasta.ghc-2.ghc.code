<source>
<def></def><com>{-# OPTIONS -fvia-C -O2 -optc-O2 -optc-ffast-math -fbang-patterns -fexcess-precision #-}</com><def></def><br />
<slc>--</slc><br />
<def></def><slc>-- The Computer Language Benchmarks Game</slc><br />
<def></def><slc>-- http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>--</slc><br />
<def></def><slc>-- Contributed by Don Stewart</slc><br />
<def></def><slc>-- A lazy bytestring solution.</slc><br />
<def></def><slc>-- Unnecessary strictness annotations removed by Sterling Clover 2/08</slc><br />
<def></def><slc>--</slc><br />
<def></def><slc>-- Add:</slc><br />
<def></def><slc>-- -optc-mfpmath=sse -optc-msse2</slc><br />
<def></def><slc>--</slc><br />
<def></def><br />
<kwa>import</kwa> <def>System</def><br />
<kwa>import</kwa> <def>Data.Word</def><br />
<kwa>import</kwa> <def>Control.Arrow</def><br />
<br />
<kwa>import qualified</kwa> <def>Data.ByteString.Lazy</def> <kwa>as</kwa> <def>L</def><br />
<kwa>import qualified</kwa> <def>Data.ByteString.Lazy.Char8</def> <kwa>as</kwa> <def>C</def> <sym>(</sym><def>pack</def><sym>,</sym><def>unfoldr</def><sym>)</sym><br />
<def></def><kwa>import qualified</kwa> <def>Data.ByteString</def> <kwa>as</kwa> <def>S</def><br />
<kwa>import</kwa> <def>Data.ByteString.Internal</def><br />
<kwa>import</kwa> <def>Data.ByteString.Unsafe<br />
<br />
main</def> <sym>=</sym> <def></def><kwa>do</kwa><br />
<def>    n</def> <sym>&lt;-</sym> <def>getArgs</def> <sym>&gt;&gt;=</sym> <def>readIO . head<br />
    writeFasta</def>  <str>&quot;ONE&quot;</str><def></def>   <str>&quot;Homo sapiens alu&quot;</str><def></def>       <sym>(</sym><def>n</def><sym>*</sym><def></def><num>2</num><def></def><sym>) (</sym><def>L.cycle alu</def><sym>)</sym><br />
<def>    g</def> <sym>&lt;-</sym> <def>unfold</def> <str>&quot;TWO&quot;</str><def></def>   <str>&quot;IUB ambiguity codes&quot;</str><def></def>    <sym>(</sym><def>n</def><sym>*</sym><def></def><num>3</num><def></def><sym>) (</sym><def>look iubs</def><sym>)</sym> <def></def><num>42</num><br />
<def>    unfold</def>      <str>&quot;THREE&quot;</str><def></def> <str>&quot;Homo sapiens frequency&quot;</str><def></def> <sym>(</sym><def>n</def><sym>*</sym><def></def><num>5</num><def></def><sym>) (</sym><def>look homs</def><sym>)</sym> <def>g</def><br />
<br />
<slc>------------------------------------------------------------------------</slc><br />
<def></def><slc>--</slc><br />
<def></def><slc>-- lazily unfold the randomised dna sequences</slc><br />
<def></def><slc>--</slc><br />
<def><br />
unfold l t n f g</def> <sym>=</sym> <def>putStrLn</def> <sym>(</sym><def></def><str>&quot;&gt;&quot;</str><def></def> <sym>++</sym> <def>l</def> <sym>++</sym> <def></def><str>&quot; &quot;</str><def></def> <sym>++</sym> <def>t</def><sym>) &gt;&gt;</sym> <def>unroll f g n<br />
<br />
unroll</def> <sym>:: (</sym><def></def><kwb>Int</kwb> <def></def><sym>-&gt; (</sym><def>Word8</def><sym>,</sym> <def></def><kwb>Int</kwb><def></def><sym>)) -&gt;</sym> <def></def><kwb>Int</kwb> <def></def><sym>-&gt;</sym> <def></def><kwb>Int</kwb> <def></def><sym>-&gt;</sym> <def>IO</def> <kwb>Int</kwb><br />
<def>unroll f</def> <sym>=</sym> <def>loop</def><br />
    <kwa>where</kwa><br />
<def>        loop r</def> <num>0</num>   <def></def><sym>=</sym> <def>return r<br />
        loop</def> <sym>!</sym><def>r i</def> <sym>=</sym> <def></def><kwa>case</kwa> <def>S.unfoldrN m</def> <sym>(</sym><def>Just . f</def><sym>)</sym> <def>r</def> <kwa>of</kwa><br />
<def></def>                        <sym>(!</sym><def>s</def><sym>,</sym> <def>Just r'</def><sym>) -&gt;</sym> <def></def><kwa>do</kwa><br />
<def>                            S.putStrLn s<br />
                            loop r'</def> <sym>(</sym><def>i</def><sym>-</sym><def>m</def><sym>)</sym><br />
<def></def>          <kwa>where</kwa> <def>m</def> <sym>=</sym> <def>min i</def> <num>60</num><br />
<def><br />
look ds k</def> <sym>= (</sym><def>choose ds d</def><sym>,</sym> <def>j</def><sym>)</sym><br />
<def></def>  <kwa>where</kwa> <def></def><sym>(</sym><def>d</def><sym>,</sym><def>j</def><sym>) =</sym> <def>rand k<br />
<br />
choose</def> <sym>:: [(</sym><def>Word8</def><sym>,</sym><def></def><kwb>Float</kwb><def></def><sym>)] -&gt;</sym> <def></def><kwb>Float</kwb> <def></def><sym>-&gt;</sym> <def>Word8<br />
choose</def> <sym>[(</sym><def>b</def><sym>,</sym><def>_</def><sym>)]</sym>       <def>_</def> <sym>=</sym> <def>b<br />
choose</def> <sym>((</sym><def>b</def><sym>,</sym><def>f</def><sym>):</sym><def>xs</def><sym>)</sym> <def>p</def> <sym>=</sym> <def>if p</def> <sym>&lt;</sym> <def>f</def> <kwa>then</kwa> <def>b</def> <kwa>else</kwa> <def>choose xs</def> <sym>(</sym><def>p</def><sym>-</sym><def>f</def><sym>)</sym><br />
<def></def><br />
<slc>------------------------------------------------------------------------</slc><br />
<def></def><slc>--</slc><br />
<def></def><slc>-- only demand as much of the infinite sequence as we require</slc><br />
<def><br />
writeFasta label title n s</def> <sym>=</sym> <def></def><kwa>do</kwa><br />
<def>     putStrLn $</def> <str>&quot;&gt;&quot;</str><def></def> <sym>++</sym> <def>label</def> <sym>++</sym> <def></def><str>&quot; &quot;</str><def></def> <sym>++</sym> <def>title</def><br />
     <kwa>let</kwa> <def></def><sym>(</sym><def>t</def><sym>:</sym><def>ts</def><sym>) =</sym> <def>L.toChunks s<br />
     go ts t n</def><br />
  <kwa>where</kwa><br />
<def>     go ss s n</def><br />
        <sym>|</sym> <def>l60</def> <sym>&amp;&amp;</sym> <def>n60</def> <sym>=</sym> <def>S.putStrLn l</def>               <sym>&gt;&gt;</sym> <def>go ss        r</def> <sym>(</sym><def>n</def><sym>-</sym><def></def><num>60</num><def></def><sym>)</sym><br />
<def></def>        <sym>|</sym>        <def>n60</def> <sym>=</sym> <def>S.putStr s</def> <sym>&gt;&gt;</sym> <def>S.putStrLn a</def> <sym>&gt;&gt;</sym> <def>go</def> <sym>(</sym><def>tail ss</def><sym>)</sym> <def>b</def> <sym>(</sym><def>n</def><sym>-</sym><def></def><num>60</num><def></def><sym>)</sym><br />
<def></def>        <sym>|</sym> <def>n</def> <sym>&lt;=</sym> <def>ln</def>    <sym>=</sym> <def>S.putStrLn</def> <sym>(</sym><def>S.take n s</def><sym>)</sym><br />
<def></def>        <sym>|</sym> <def>otherwise</def>  <sym>=</sym> <def>S.putStr s</def> <sym>&gt;&gt;</sym> <def>S.putStrLn</def> <sym>(</sym><def>S.take</def> <sym>(</sym><def>n</def><sym>-</sym><def>ln</def><sym>) (</sym><def>head ss</def><sym>))</sym><br />
<def></def>        <kwa>where</kwa><br />
<def>            ln</def>   <sym>=</sym> <def>S.length s<br />
            l60</def>  <sym>=</sym> <def>ln</def> <sym>&gt;=</sym> <def></def><num>60</num><br />
<def>            n60</def>  <sym>=</sym> <def>n</def>  <sym>&gt;=</sym> <def></def><num>60</num><br />
<def></def>            <sym>(</sym><def>l</def><sym>,</sym><def>r</def><sym>) =</sym> <def>S.splitAt</def> <num>60</num> <def>s</def><br />
            <sym>(</sym><def>a</def><sym>,</sym><def>b</def><sym>) =</sym> <def>S.splitAt</def> <sym>(</sym><def></def><num>60</num><def></def><sym>-</sym><def>ln</def><sym>) (</sym><def>head ss</def><sym>)</sym><br />
<def></def><br />
<slc>------------------------------------------------------------------------</slc><br />
<def><br />
im</def>  <sym>=</sym> <def></def><num>139968</num><br />
<def>ia</def>  <sym>=</sym> <def></def><num>3877</num><br />
<def>ic</def>  <sym>=</sym> <def></def><num>29573</num><br />
<def><br />
rand</def> <sym>::</sym> <def></def><kwb>Int</kwb> <def></def><sym>-&gt; (</sym><def></def><kwb>Float</kwb><def></def><sym>,</sym> <def></def><kwb>Int</kwb><def></def><sym>)</sym><br />
<def>rand seed</def> <sym>= (</sym><def>newran</def><sym>,</sym><def>newseed</def><sym>)</sym><br />
<def></def>    <kwa>where</kwa><br />
<def>        newseed</def> <sym>= (</sym><def>seed</def> <sym>*</sym> <def>ia</def> <sym>+</sym> <def>ic</def><sym>)</sym> <def>`rem` im<br />
        newran</def>  <sym>=</sym>  <def></def><num>1.0</num> <def></def><sym>*</sym> <def>fromIntegral newseed</def> <sym>/</sym> <def>imd<br />
        imd</def>      <sym>=</sym> <def>fromIntegral im</def><br />
<br />
<slc>------------------------------------------------------------------------</slc><br />
<def><br />
alu</def> <sym>=</sym> <def>C.pack</def><br />
        <str>&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG\</str><br />
<str>        \GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA\</str><br />
<str>        \CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT\</str><br />
<str>        \ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA\</str><br />
<str>        \GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG\</str><br />
<str>        \AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC\</str><br />
<str>        \AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</str><def><br />
<br />
iubs</def> <sym>=</sym> <def>map</def> <sym>(</sym><def>c2w</def> <sym>***</sym> <def>id</def><sym>)</sym><br />
<def></def>        <sym>[(</sym><def>'a'</def><sym>,</sym><def></def><num>0.27</num><def></def><sym>),(</sym><def>'c'</def><sym>,</sym><def></def><num>0.12</num><def></def><sym>),(</sym><def>'g'</def><sym>,</sym><def></def><num>0.12</num><def></def><sym>),(</sym><def>'t'</def><sym>,</sym><def></def><num>0.27</num><def></def><sym>),(</sym><def>'B'</def><sym>,</sym><def></def><num>0.02</num><def></def><sym>)</sym><br />
<def></def>        <sym>,(</sym><def>'D'</def><sym>,</sym><def></def><num>0.02</num><def></def><sym>),(</sym><def>'H'</def><sym>,</sym><def></def><num>0.02</num><def></def><sym>),(</sym><def>'K'</def><sym>,</sym><def></def><num>0.02</num><def></def><sym>),(</sym><def>'M'</def><sym>,</sym><def></def><num>0.02</num><def></def><sym>),(</sym><def>'N'</def><sym>,</sym><def></def><num>0.02</num><def></def><sym>)</sym><br />
<def></def>        <sym>,(</sym><def>'R'</def><sym>,</sym><def></def><num>0.02</num><def></def><sym>),(</sym><def>'S'</def><sym>,</sym><def></def><num>0.02</num><def></def><sym>),(</sym><def>'V'</def><sym>,</sym><def></def><num>0.02</num><def></def><sym>),(</sym><def>'W'</def><sym>,</sym><def></def><num>0.02</num><def></def><sym>),(</sym><def>'Y'</def><sym>,</sym><def></def><num>0.02</num><def></def><sym>)]</sym><br />
<def><br />
homs</def> <sym>=</sym> <def>map</def> <sym>(</sym><def>c2w</def> <sym>***</sym> <def>id</def><sym>)</sym><br />
<def></def>        <sym>[(</sym><def>'a'</def><sym>,</sym><def></def><num>0.3029549426680</num><def></def><sym>),(</sym><def>'c'</def><sym>,</sym><def></def><num>0.1979883004921</num><def></def><sym>)</sym><br />
<def></def>        <sym>,(</sym><def>'g'</def><sym>,</sym><def></def><num>0.1975473066391</num><def></def><sym>),(</sym><def>'t'</def><sym>,</sym><def></def><num>0.3015094502008</num><def></def><sym>)]</sym><def></def><br />
</source>
