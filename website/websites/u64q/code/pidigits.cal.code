<source>
<def></def><com>/**</com><br />
<com> * The Computer Language Benchmarks Game</com><br />
<com> * Based on the CAL Open Quark version</com><br />
<com> * Contributed by Magnus Byne.</com><br />
<com> */</com><def></def><br />
<kwa>module</kwa> <def>Pidigits</def><sym>;</sym><br />
<def></def><br />
<kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Core</def><sym>.</sym><def>Prelude</def> <kwa>using</kwa><br />
<def></def>    <kwa>typeConstructor</kwa> <def></def><sym>=</sym> <def>Int</def><sym>,</sym> <def>Integer</def><sym>,</sym> <def>String</def><sym>;</sym><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>eager</def><sym>,</sym> <def>fromInteger</def><sym>,</sym> <def>seq</def><sym>,</sym> <def>stringToInt</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Core</def><sym>.</sym><def>Debug</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>show</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Collections</def><sym>.</sym><def>List</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>head</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Core</def><sym>.</sym><def>String</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>replicate</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<kwa>import</kwa> <def>Cal</def><sym>.</sym><def>IO</def><sym>.</sym><def>Console</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>print</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<kwa>data</kwa> <def>F</def> <sym>=</sym><br />
<def>    F<br />
        w</def> <sym>:: !</sym><def>Integer<br />
        x</def> <sym>:: !</sym><def>Integer<br />
        y</def> <sym>:: !</sym><def>Integer<br />
        z</def> <sym>:: !</sym><def>Integer</def><br />
    <sym>;</sym><br />
<def><br />
lfts</def> <sym>::</sym> <def>Integer</def> <sym>-&gt; [</sym><def>F</def><sym>];</sym><br />
<def>lfts</def> <sym>!</sym><def>k</def> <sym>=</sym> <def>F k</def> <sym>(</sym><def></def><num>4</num> <def></def><sym>*</sym> <def>k</def> <sym>+</sym> <def></def><num>2</num><def></def><sym>)</sym> <def></def><num>0</num> <def></def><sym>(</sym><def></def><num>2</num> <def></def><sym>*</sym> <def>k</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>) :</sym> <def>lfts</def> <sym>(</sym><def>k</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def><br />
floor</def> <sym>::</sym> <def>Integer</def> <sym>-&gt;</sym> <def>F</def> <sym>-&gt;</sym> <def>Integer</def><sym>;</sym><br />
<def>floor</def> <sym>!</sym><def>x</def> <sym>!</sym><def>m</def> <sym>=</sym><br />
<def></def>    <kwa>case</kwa> <def>m</def> <kwa>of</kwa><br />
<def>    F q r s t</def> <sym>-&gt; (</sym><def>q</def> <sym>*</sym> <def>x</def> <sym>+</sym> <def>r</def><sym>) / (</sym><def>s</def> <sym>*</sym> <def>x</def> <sym>+</sym> <def>t</def><sym>);</sym><br />
<def></def>    <sym>;</sym><br />
<def><br />
complement1</def> <sym>::</sym> <def>F</def> <sym>-&gt;</sym> <def>F</def> <sym>-&gt;</sym> <def>F</def><sym>;</sym><br />
<def>complement1</def> <sym>!</sym><def>m</def> <sym>!</sym><def>n</def> <sym>=</sym><br />
<def></def>    <kwa>case</kwa> <def>m</def> <kwa>of</kwa><br />
<def>    F q r s t</def> <sym>-&gt;</sym><br />
<def></def>        <kwa>case</kwa> <def>n</def> <kwa>of</kwa><br />
<def>        F u v w x</def> <sym>-&gt;</sym><br />
<def>            F</def> <sym>(</sym><def>q</def> <sym>*</sym> <def>u</def> <sym>+</sym> <def>r</def> <sym>*</sym> <def>w</def><sym>) (</sym><def>q</def> <sym>*</sym> <def>v</def> <sym>+</sym> <def>r</def> <sym>*</sym> <def>x</def><sym>) (</sym><def>t</def> <sym>*</sym> <def>w</def><sym>) (</sym><def>t</def> <sym>*</sym> <def>x</def><sym>);</sym><br />
<def></def>        <sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def><br />
complement2</def> <sym>::</sym> <def>F</def> <sym>-&gt;</sym> <def>F</def> <sym>-&gt;</sym> <def>F</def><sym>;</sym><br />
<def>complement2</def> <sym>!</sym><def>m</def> <sym>!</sym><def>n</def> <sym>=</sym><br />
<def></def>    <kwa>case</kwa> <def>m</def> <kwa>of</kwa><br />
<def>    F q r s t</def> <sym>-&gt;</sym><br />
<def></def>        <kwa>case</kwa> <def>n</def> <kwa>of</kwa><br />
<def>        F u v w x</def> <sym>-&gt;</sym><br />
<def>            F</def> <sym>(</sym><def>q</def> <sym>*</sym> <def>u</def><sym>) (</sym><def>q</def> <sym>*</sym> <def>v</def> <sym>+</sym> <def>r</def> <sym>*</sym> <def>x</def><sym>) (</sym><def>s</def> <sym>*</sym> <def>u</def><sym>) (</sym><def>s</def> <sym>*</sym> <def>v</def> <sym>+</sym> <def>t</def> <sym>*</sym> <def>x</def><sym>);</sym><br />
<def></def>        <sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def><br />
main</def> <sym>:: [</sym><def>String</def><sym>] -&gt; ();</sym><br />
<def></def><kwa>public</kwa> <def>main</def> <sym>!</sym><def>args</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa><br />
<def>        pidigits</def> <sym>:: [</sym><def>Int</def><sym>];</sym><br />
<def>        pidigits</def> <sym>=</sym><br />
<def></def>            <kwa>let</kwa><br />
<def>                stream</def> <sym>::</sym> <def>F</def> <sym>-&gt; [</sym><def>F</def><sym>] -&gt; [</sym><def>Int</def><sym>];</sym><br />
<def>                stream</def> <sym>!</sym><def>z</def> <sym>!</sym><def>l</def> <sym>=</sym><br />
<def></def>                    <kwa>let</kwa><br />
<def>                        y</def> <sym>::</sym> <def>Integer</def><sym>;</sym><br />
<def>                        y</def> <sym>=</sym> <def>eager $ floor</def> <num>3</num> <def>z</def><sym>;</sym><br />
<def></def>                    <kwa>in</kwa><br />
<def></def>                        <kwa>case</kwa> <def>l</def> <kwa>of</kwa><br />
<def>                        x</def> <sym>:</sym> <def>xs</def> <sym>-&gt;</sym><br />
<def></def>                            <kwa>if</kwa> <def>y</def> <sym>==</sym> <def>floor</def> <num>4</num> <def>z</def> <kwa>then</kwa><br />
<def>                                fromInteger y</def><br />
                                <sym>:</sym> <def>stream</def><br />
                                    <sym>(</sym><def>complement1</def> <sym>(</sym><def>F</def> <num>10</num> <def></def><sym>(-</sym><def></def><num>10</num> <def></def><sym>*</sym> <def>y</def><sym>)</sym> <def></def><num>0 1</num><def></def><sym>)</sym> <def>z</def><sym>)</sym><br />
<def></def>                                    <sym>(</sym><def>x</def> <sym>:</sym> <def>xs</def><sym>)</sym><br />
<def></def>                            <kwa>else</kwa><br />
<def>                                stream</def> <sym>(</sym><def>complement2 z x</def><sym>)</sym> <def>xs</def><br />
                            <sym>;</sym><br />
<def></def>                    <sym>;</sym><br />
<def></def>            <kwa>in</kwa><br />
<def>                stream</def> <sym>(</sym><def>F</def> <num>1 0 0 1</num><def></def><sym>) (</sym><def>lfts</def> <num>1</num><def></def><sym>)</sym><br />
<def></def>            <sym>;</sym><br />
<def><br />
        n</def> <sym>::</sym> <def>Int</def><sym>;</sym><br />
<def>        n</def> <sym>=</sym> <def>eager $ stringToInt</def> <sym>(</sym><def>head args</def><sym>);</sym><br />
<def><br />
        lineLength</def> <sym>::</sym> <def>Int</def><sym>;</sym><br />
<def>        lineLength</def> <sym>=</sym> <def></def><num>10</num><def></def><sym>;</sym><br />
<def></def><br />
        <slc>//print digits in accordance with the benchmark spec</slc><br />
<def>        printDigits</def> <sym>:: [</sym><def>Int</def><sym>] -&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt; ();</sym><br />
<def>        printDigits</def> <sym>!</sym><def>digits</def> <sym>!</sym><def>digitsPrinted</def> <sym>!</sym><def>digitsPrintedOnLine</def> <sym>=</sym><br />
<def></def>            <kwa>if</kwa> <def>digitsPrinted</def> <sym>==</sym> <def>n</def> <kwa>then</kwa><br />
<def>                print</def><br />
                    <sym>(</sym><br />
<def>                        replicate</def> <sym>(</sym><def>lineLength</def> <sym>-</sym> <def>digitsPrintedOnLine</def><sym>)</sym> <def></def><str>' '</str><def></def><br />
                        <sym>++</sym> <def></def><str>&quot;</str><esc>\t</esc><str>:&quot;</str><def></def><br />
                        <sym>++</sym> <def>show digitsPrinted</def><br />
                        <sym>++</sym> <def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><br />
                    <sym>)</sym><br />
<def></def>            <kwa>else if</kwa> <def>digitsPrintedOnLine</def> <sym>==</sym> <def>lineLength</def> <kwa>then</kwa><br />
<def>                print</def> <sym>(</sym><def></def><str>&quot;</str><esc>\t</esc><str>:&quot;</str><def></def> <sym>++</sym> <def>show digitsPrinted</def> <sym>++</sym> <def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>)</sym><br />
<def></def>                <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                printDigits digits digitsPrinted</def> <num>0</num><br />
<def></def>            <kwa>else</kwa><br />
<def></def>                <kwa>case</kwa> <def>digits</def> <kwa>of</kwa><br />
<def>                digit</def> <sym>:</sym> <def>remainingDigits</def> <sym>-&gt;</sym><br />
<def>                    print</def> <sym>(</sym><def>show digit</def><sym>)</sym><br />
<def></def>                    <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                    printDigits<br />
                        remainingDigits</def><br />
                        <sym>(</sym><def>digitsPrinted</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>                        <sym>(</sym><def>digitsPrintedOnLine</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>                    <sym>;</sym><br />
<def></def>            <sym>;</sym><br />
<def></def>    <kwa>in</kwa><br />
<def>        printDigits pidigits</def> <num>0 0</num><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
</source>
