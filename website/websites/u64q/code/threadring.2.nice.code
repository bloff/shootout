<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> * following an idea by Klaus Friedel</span>
<span class="hl com"> * contributed by Isaac Gouy</span>
<span class="hl com"> */</span>

<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span>concurrent<span class="hl sym">.</span>locks<span class="hl sym">.*;</span>

<span class="hl kwa">let</span> <span class="hl kwb">int</span> numberOfThreads <span class="hl sym">=</span> <span class="hl num">503</span><span class="hl sym">;</span>

<span class="hl kwa">let</span> NamedThread<span class="hl sym">[]</span> threadRing <span class="hl sym">=</span>
   fill<span class="hl sym">(</span><span class="hl kwa">new</span> NamedThread<span class="hl sym">[</span>numberOfThreads<span class="hl sym">],</span> <span class="hl kwb">int</span> i <span class="hl sym">=&gt;</span> <span class="hl kwa">new</span> NamedThread<span class="hl sym">(</span>name<span class="hl sym">:</span> i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">));</span>

<span class="hl kwb">void</span> main<span class="hl sym">(</span>String<span class="hl sym">[]</span> args<span class="hl sym">){</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span>t <span class="hl sym">:</span> threadRing<span class="hl sym">)</span> t<span class="hl sym">.</span>start<span class="hl sym">();</span>
   threadRing<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">].</span>takeToken<span class="hl sym">(</span> Integer<span class="hl sym">.</span>parseInt<span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]) );</span>
<span class="hl sym">}</span>


<span class="hl kwa">class</span> NamedThread <span class="hl kwa">extends</span> Thread <span class="hl sym">{</span>
   <span class="hl kwa">private</span> <span class="hl kwb">int</span> name<span class="hl sym">;</span>
   <span class="hl kwa">private</span> <span class="hl kwb">int</span> token <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

   override <span class="hl kwb">void</span> run<span class="hl sym">() {</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span> this<span class="hl sym">.</span>tokenNotDone<span class="hl sym">() )</span>
         this<span class="hl sym">.</span>nextThread<span class="hl sym">().</span>takeToken<span class="hl sym">(</span>token<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">);</span>

      println<span class="hl sym">(</span>name<span class="hl sym">);</span>
      System<span class="hl sym">.</span>exit<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span>
   <span class="hl sym">}</span>

   <span class="hl kwb">boolean</span> tokenNotDone<span class="hl sym">() {</span>
      LockSupport<span class="hl sym">.</span>park<span class="hl sym">();</span>
      <span class="hl kwa">return</span> token <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwb">void</span> takeToken<span class="hl sym">(</span><span class="hl kwb">int</span> x<span class="hl sym">) {</span>
      token <span class="hl sym">=</span> x<span class="hl sym">;</span>
      LockSupport<span class="hl sym">.</span>unpark<span class="hl sym">(</span>this<span class="hl sym">);</span>
   <span class="hl sym">}</span>

   NamedThread nextThread<span class="hl sym">() =</span> threadRing<span class="hl sym">[</span> name <span class="hl sym">%</span> numberOfThreads <span class="hl sym">];</span>
<span class="hl sym">}</span>

