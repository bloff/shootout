<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">-- contributed by Pilho Kim</span>

<span class="hl slc">-- requires LGMP &quot;A GMP package for Lua 5.1&quot;</span>
<span class="hl slc">-- http://members.chello.nl/~w.couwenberg/lgmp.htm</span>


require <span class="hl str">'gmp'</span>

<span class="hl slc">-- Transformation</span>

<span class="hl kwa">local</span> T <span class="hl sym">= {}</span>

<span class="hl kwa">function</span> T<span class="hl sym">.</span><span class="hl kwd">bigzero</span><span class="hl sym">()</span> <span class="hl kwa">return</span> gmp<span class="hl sym">.</span><span class="hl kwd">z</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">end</span>
<span class="hl kwa">function</span> T<span class="hl sym">.</span><span class="hl kwd">bigone</span><span class="hl sym">()</span> <span class="hl kwa">return</span> gmp<span class="hl sym">,</span><span class="hl kwd">z</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">end</span>
<span class="hl kwa">function</span> T<span class="hl sym">.</span><span class="hl kwd">bigten</span><span class="hl sym">()</span> <span class="hl kwa">return</span> gmp<span class="hl sym">.</span><span class="hl kwd">z</span><span class="hl sym">(</span><span class="hl num">10</span><span class="hl sym">)</span> <span class="hl kwa">end</span>

<span class="hl kwa">function</span> T<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">(</span>q1<span class="hl sym">,</span>r1<span class="hl sym">,</span>s1<span class="hl sym">,</span>t1<span class="hl sym">)</span>
   <span class="hl kwa">return</span> <span class="hl sym">{</span>
       q <span class="hl sym">=</span> q1
      <span class="hl sym">,</span>r <span class="hl sym">=</span> r1
      <span class="hl sym">,</span>s <span class="hl sym">=</span> s1
      <span class="hl sym">,</span>t <span class="hl sym">=</span> t1
      <span class="hl sym">,</span>k <span class="hl sym">=</span> gmp<span class="hl sym">.</span><span class="hl kwd">z</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
      <span class="hl sym">}</span>
<span class="hl kwa">end</span>

<span class="hl kwa">function</span> T<span class="hl sym">.</span><span class="hl kwd">newInt</span><span class="hl sym">(</span>q<span class="hl sym">,</span>r<span class="hl sym">,</span>s<span class="hl sym">,</span>t<span class="hl sym">)</span>
   <span class="hl kwa">return</span> <span class="hl sym">{</span>
       q <span class="hl sym">=</span> gmp<span class="hl sym">.</span><span class="hl kwd">z</span><span class="hl sym">(</span>q<span class="hl sym">)</span>
      <span class="hl sym">,</span>r <span class="hl sym">=</span> gmp<span class="hl sym">.</span><span class="hl kwd">z</span><span class="hl sym">(</span>r<span class="hl sym">)</span>
      <span class="hl sym">,</span>s <span class="hl sym">=</span> gmp<span class="hl sym">.</span><span class="hl kwd">z</span><span class="hl sym">(</span>s<span class="hl sym">)</span>
      <span class="hl sym">,</span>t <span class="hl sym">=</span> gmp<span class="hl sym">.</span><span class="hl kwd">z</span><span class="hl sym">(</span>t<span class="hl sym">)</span>
      <span class="hl sym">,</span>k <span class="hl sym">=</span> gmp<span class="hl sym">.</span><span class="hl kwd">z</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
      <span class="hl sym">}</span>
<span class="hl kwa">end</span>

<span class="hl kwa">function</span> T<span class="hl sym">.</span><span class="hl kwd">unity</span><span class="hl sym">()</span> <span class="hl kwa">return</span> T<span class="hl sym">.</span><span class="hl kwd">newInt</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">end</span>
<span class="hl kwa">function</span> T<span class="hl sym">.</span><span class="hl kwd">zero</span><span class="hl sym">()</span> <span class="hl kwa">return</span> T<span class="hl sym">.</span><span class="hl kwd">newInt</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">end</span>

<span class="hl kwa">function</span> T<span class="hl sym">.</span><span class="hl kwd">compose</span><span class="hl sym">(</span>a<span class="hl sym">,</span>b<span class="hl sym">)</span>
   <span class="hl kwa">local</span> qq<span class="hl sym">,</span> qrrt<span class="hl sym">,</span> sqts<span class="hl sym">,</span> srtt
   qq <span class="hl sym">=</span> a<span class="hl sym">.</span>q <span class="hl sym">*</span> b<span class="hl sym">.</span>q
   qrrt <span class="hl sym">=</span> a<span class="hl sym">.</span>q <span class="hl sym">*</span> b<span class="hl sym">.</span>r <span class="hl sym">+</span> a<span class="hl sym">.</span>r <span class="hl sym">*</span> b<span class="hl sym">.</span>t
   sqts <span class="hl sym">=</span> T<span class="hl sym">.</span><span class="hl kwd">bigzero</span><span class="hl sym">()</span>
   srtt <span class="hl sym">=</span> a<span class="hl sym">.</span>t <span class="hl sym">*</span> b<span class="hl sym">.</span>t
   <span class="hl kwa">return</span> T<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">(</span>qq<span class="hl sym">,</span> qrrt<span class="hl sym">,</span> sqts<span class="hl sym">,</span> srtt<span class="hl sym">)</span>
<span class="hl kwa">end</span>


<span class="hl kwa">function</span> T<span class="hl sym">.</span><span class="hl kwd">extract</span><span class="hl sym">(</span>a<span class="hl sym">,</span>j<span class="hl sym">)</span>
   <span class="hl kwa">local</span> bigj <span class="hl sym">=</span> gmp<span class="hl sym">.</span><span class="hl kwd">z</span><span class="hl sym">(</span>j<span class="hl sym">)</span>
   <span class="hl kwa">local</span> qjr<span class="hl sym">,</span> sjt
   qjr <span class="hl sym">=</span> a<span class="hl sym">.</span>q <span class="hl sym">*</span> bigj <span class="hl sym">+</span> a<span class="hl sym">.</span>r
   sjt <span class="hl sym">=</span> a<span class="hl sym">.</span>t
   <span class="hl kwa">return</span> qjr <span class="hl sym">/</span> sjt
<span class="hl kwa">end</span>

<span class="hl kwa">function</span> T<span class="hl sym">.</span><span class="hl kwb">next</span><span class="hl sym">(</span>a<span class="hl sym">)</span>
   a<span class="hl sym">.</span>k <span class="hl sym">=</span> a<span class="hl sym">.</span>k <span class="hl sym">+</span> <span class="hl num">1</span>
   a<span class="hl sym">.</span>q <span class="hl sym">=</span> a<span class="hl sym">.</span>k
   a<span class="hl sym">.</span>t <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">*</span>a<span class="hl sym">.</span>k <span class="hl sym">+</span> <span class="hl num">1</span>
   a<span class="hl sym">.</span>r <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">*</span>a<span class="hl sym">.</span>t
   <span class="hl kwa">return</span> a
<span class="hl kwa">end</span>


<span class="hl slc">-- Pi Digit Stream</span>

<span class="hl kwa">local</span> P <span class="hl sym">= {}</span>

<span class="hl kwa">function</span> P<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">()</span>
   <span class="hl kwa">return</span> <span class="hl sym">{</span>
       z <span class="hl sym">=</span> T<span class="hl sym">.</span><span class="hl kwd">unity</span><span class="hl sym">()</span>
       <span class="hl sym">,</span>x <span class="hl sym">=</span> T<span class="hl sym">.</span><span class="hl kwd">zero</span><span class="hl sym">()</span>
      <span class="hl sym">,</span>inverse <span class="hl sym">=</span> T<span class="hl sym">.</span><span class="hl kwd">newInt</span><span class="hl sym">(</span><span class="hl num">10</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">)</span>
      <span class="hl sym">}</span>
<span class="hl kwa">end</span>

<span class="hl kwa">function</span> P<span class="hl sym">.</span><span class="hl kwd">produce</span><span class="hl sym">(</span>a<span class="hl sym">,</span>j<span class="hl sym">)</span>
   <span class="hl kwa">local</span> i <span class="hl sym">=</span> a<span class="hl sym">.</span>inverse
   i<span class="hl sym">.</span>r <span class="hl sym">=</span> T<span class="hl sym">.</span><span class="hl kwd">bigzero</span><span class="hl sym">() -</span> T<span class="hl sym">.</span><span class="hl kwd">bigten</span><span class="hl sym">()*</span>j
   <span class="hl kwa">return</span> T<span class="hl sym">.</span><span class="hl kwd">compose</span><span class="hl sym">(</span>i<span class="hl sym">,</span>a<span class="hl sym">.</span>z<span class="hl sym">)</span>
<span class="hl kwa">end</span>

<span class="hl kwa">function</span> P<span class="hl sym">.</span><span class="hl kwd">consume</span><span class="hl sym">(</span>a<span class="hl sym">,</span>b<span class="hl sym">)</span>
   <span class="hl kwa">return</span> T<span class="hl sym">.</span><span class="hl kwd">compose</span><span class="hl sym">(</span>a<span class="hl sym">.</span>z<span class="hl sym">,</span>b<span class="hl sym">)</span>
<span class="hl kwa">end</span>

<span class="hl kwa">function</span> P<span class="hl sym">.</span><span class="hl kwd">digit</span><span class="hl sym">(</span>a<span class="hl sym">)</span>
   <span class="hl kwa">return</span> T<span class="hl sym">.</span><span class="hl kwd">extract</span><span class="hl sym">(</span>a<span class="hl sym">.</span>z<span class="hl sym">,</span><span class="hl num">3</span><span class="hl sym">)</span>
<span class="hl kwa">end</span>

<span class="hl kwa">function</span> P<span class="hl sym">.</span><span class="hl kwd">isSafe</span><span class="hl sym">(</span>a<span class="hl sym">,</span>j<span class="hl sym">)</span>
   <span class="hl kwa">return</span> j <span class="hl sym">==</span> T<span class="hl sym">.</span><span class="hl kwd">extract</span><span class="hl sym">(</span>a<span class="hl sym">.</span>z<span class="hl sym">,</span><span class="hl num">4</span><span class="hl sym">)</span>
<span class="hl kwa">end</span>

<span class="hl kwa">function</span> P<span class="hl sym">.</span><span class="hl kwb">next</span><span class="hl sym">(</span>a<span class="hl sym">)</span>
   <span class="hl kwa">local</span> y
   y <span class="hl sym">=</span> P<span class="hl sym">.</span><span class="hl kwd">digit</span><span class="hl sym">(</span>a<span class="hl sym">)</span>
   <span class="hl kwa">if</span> P<span class="hl sym">.</span><span class="hl kwd">isSafe</span><span class="hl sym">(</span>a<span class="hl sym">,</span>y<span class="hl sym">)</span> <span class="hl kwa">then</span>
      a<span class="hl sym">.</span>z <span class="hl sym">=</span> P<span class="hl sym">.</span><span class="hl kwd">produce</span><span class="hl sym">(</span>a<span class="hl sym">,</span>y<span class="hl sym">)</span>
      <span class="hl kwa">return</span> <span class="hl kwb">tostring</span><span class="hl sym">(</span>y<span class="hl sym">)</span>
   <span class="hl kwa">else</span>
      a<span class="hl sym">.</span>z <span class="hl sym">=</span> P<span class="hl sym">.</span><span class="hl kwd">consume</span><span class="hl sym">(</span>a<span class="hl sym">,</span>T<span class="hl sym">.</span><span class="hl kwb">next</span><span class="hl sym">(</span>a<span class="hl sym">.</span>x<span class="hl sym">))</span>
      <span class="hl kwa">return</span> P<span class="hl sym">.</span><span class="hl kwb">next</span><span class="hl sym">(</span>a<span class="hl sym">)</span>
   <span class="hl kwa">end</span>
<span class="hl kwa">end</span>


<span class="hl slc">-- Main</span>
n <span class="hl sym">=</span> <span class="hl kwb">tonumber</span><span class="hl sym">(</span>arg <span class="hl kwa">and</span> arg<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">])</span> <span class="hl kwa">or</span> <span class="hl num">27</span>

i <span class="hl sym">=</span> <span class="hl num">0</span>
length <span class="hl sym">=</span> <span class="hl num">10</span>
pidigit <span class="hl sym">=</span> P<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">()</span>

<span class="hl kwa">while</span> n <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">do</span>
   <span class="hl kwa">if</span> n <span class="hl sym">&lt;</span> length <span class="hl kwa">then</span>
      <span class="hl kwa">for</span> _ <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">,</span>n <span class="hl kwa">do</span> io<span class="hl sym">.</span><span class="hl kwb">write</span><span class="hl sym">(</span> P<span class="hl sym">.</span><span class="hl kwb">next</span><span class="hl sym">(</span>pidigit<span class="hl sym">) )</span> <span class="hl kwa">end</span>
      <span class="hl kwa">for</span> _ <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">,</span>length <span class="hl sym">-</span> n <span class="hl kwa">do</span> io<span class="hl sym">.</span><span class="hl kwb">write</span><span class="hl sym">(</span> <span class="hl str">' '</span> <span class="hl sym">)</span> <span class="hl kwa">end</span>
      i <span class="hl sym">=</span> i <span class="hl sym">+</span> n
   <span class="hl kwa">else</span>
      <span class="hl kwa">for</span> _ <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">,</span>length <span class="hl kwa">do</span> io<span class="hl sym">.</span><span class="hl kwb">write</span><span class="hl sym">(</span> P<span class="hl sym">.</span><span class="hl kwb">next</span><span class="hl sym">(</span>pidigit<span class="hl sym">) )</span> <span class="hl kwa">end</span>
      i <span class="hl sym">=</span> i <span class="hl sym">+</span> length
   <span class="hl kwa">end</span>
   io<span class="hl sym">.</span><span class="hl kwb">write</span><span class="hl sym">(</span><span class="hl str">'</span><span class="hl esc">\t</span><span class="hl str">:'</span><span class="hl sym">,</span> i<span class="hl sym">,</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">)</span>
   n <span class="hl sym">=</span> n <span class="hl sym">-</span> length
<span class="hl kwa">end</span>

<span class="hl slc">-- eof</span>

