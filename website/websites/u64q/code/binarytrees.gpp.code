<source>
<def></def><com>/* The Computer Language Shootout</com><br />
<com> * http://shootout.alioth.debian.org/</com><br />
<com> * Contributed by Paul Kitchin</com><br />
<com> */</com><def></def><br />
<br />
<br />
<dir>#include &lt;iostream&gt;</dir><br />
<def></def><dir>#include &lt;sstream&gt;</dir><br />
<def></def><br />
<kwc>class</kwc> <def>Tree</def><br />
<sym>{</sym><br />
<def></def><br />
      <kwb>struct</kwb> <def>Node</def><br />
      <sym>{</sym><br />
<def></def><br />
         <kwd>Node</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>value</def><sym>,</sym> <def>std</def><sym>::</sym><def></def><kwb>size_t</kwb> <def>depth</def><sym>,</sym> <def>std</def><sym>::</sym><def></def><kwb>size_t</kwb> <def>index</def><sym>,</sym> <def>Node</def> <sym>*</sym> <def>nodes</def><sym>,</sym> <def>std</def><sym>::</sym><def></def><kwb>size_t</kwb> <def>max</def><sym>)</sym><br />
<def></def>            <sym>:</sym><br />
<def></def>            <kwd>value</kwd><def></def><sym>(</sym><def>value</def><sym>)</sym><br />
<def></def>         <sym>{</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>index</def> <sym>*</sym> <def></def><num>2</num> <def></def><sym>+</sym> <def></def><num>2</num> <def></def><sym>&lt;</sym> <def>max</def><sym>)</sym><br />
<def></def>            <sym>{</sym><br />
<def></def>               <kwa>new</kwa> <def></def><sym>(</sym><def>nodes</def> <sym>+</sym> <def>index</def> <sym>*</sym> <def></def><num>2</num> <def></def><sym>+</sym> <def></def><num>1</num><def></def><sym>)</sym> <def></def><kwd>Node</kwd><def></def><sym>(</sym><def></def><num>2</num> <def></def><sym>*</sym> <def>value</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>depth</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>index</def> <sym>*</sym> <def></def><num>2</num> <def></def><sym>+</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>nodes</def><sym>,</sym> <def>max</def><sym>);</sym><br />
<def></def>               <kwa>new</kwa> <def></def><sym>(</sym><def>nodes</def> <sym>+</sym> <def>index</def> <sym>*</sym> <def></def><num>2</num> <def></def><sym>+</sym> <def></def><num>2</num><def></def><sym>)</sym> <def></def><kwd>Node</kwd><def></def><sym>(</sym><def></def><num>2</num> <def></def><sym>*</sym> <def>value</def><sym>,</sym> <def>depth</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>index</def> <sym>*</sym> <def></def><num>2</num> <def></def><sym>+</sym> <def></def><num>2</num><def></def><sym>,</sym> <def>nodes</def><sym>,</sym> <def>max</def><sym>);</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>         <sym>}</sym><br />
<def></def><br />
         <kwb>int</kwb> <def></def><kwd>check</kwd><def></def><sym>(</sym><def>std</def><sym>::</sym><def></def><kwb>size_t</kwb> <def>index</def><sym>,</sym> <def>Node</def> <sym>*</sym> <def>nodes</def><sym>,</sym> <def>std</def><sym>::</sym><def></def><kwb>size_t</kwb> <def>max</def><sym>)</sym> <def></def><kwb>const</kwb><br />
<def></def>         <sym>{</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>index</def> <sym>*</sym> <def></def><num>2</num> <def></def><sym>+</sym> <def></def><num>2</num> <def></def><sym>&lt;</sym> <def>max</def><sym>)</sym><br />
<def></def>            <sym>{</sym><br />
<def></def>               <kwa>return</kwa> <def>nodes</def><sym>[</sym><def>index</def> <sym>*</sym> <def></def><num>2</num> <def></def><sym>+</sym> <def></def><num>1</num><def></def><sym>].</sym><def></def><kwd>check</kwd><def></def><sym>(</sym><def>index</def> <sym>*</sym> <def></def><num>2</num> <def></def><sym>+</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>nodes</def><sym>,</sym> <def>max</def><sym>) +</sym> <def>value</def> <sym>-</sym> <def>nodes</def><sym>[</sym><def>index</def> <sym>*</sym> <def></def><num>2</num> <def></def><sym>+</sym> <def></def><num>2</num><def></def><sym>].</sym><def></def><kwd>check</kwd><def></def><sym>(</sym><def>index</def> <sym>*</sym> <def></def><num>2</num> <def></def><sym>+</sym> <def></def><num>2</num><def></def><sym>,</sym> <def>nodes</def><sym>,</sym> <def>max</def><sym>);</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>            <kwa>return</kwa> <def>value</def><sym>;</sym><br />
<def></def>         <sym>}</sym><br />
<def></def><br />
         <kwb>int</kwb> <def>value</def><sym>;</sym><br />
<def></def><br />
      <sym>};</sym><br />
<def></def><br />
   <kwc>public</kwc><def></def><sym>:</sym><br />
<def></def><br />
      <kwd>Tree</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>value</def><sym>,</sym> <def>std</def><sym>::</sym><def></def><kwb>size_t</kwb> <def>depth</def><sym>)</sym><br />
<def></def>         <sym>:</sym><br />
<def></def>         <kwd>size</kwd><def></def><sym>((</sym><def></def><num>2</num> <def></def><sym>&lt;&lt;</sym> <def>depth</def><sym>) -</sym> <def></def><num>1</num><def></def><sym>),</sym><br />
<def></def>         <kwd>nodes</kwd><def></def><sym>(</sym><def></def><kwa>static_cast</kwa><def></def><sym>&lt;</sym> <def>Node</def> <sym>* &gt;(</sym><def></def><kwc>operator</kwc> <def></def><kwa>new</kwa><def></def><sym>(</sym><def>size</def> <sym>*</sym> <def></def><kwa>sizeof</kwa><def></def><sym>(</sym><def>Node</def><sym>))))</sym><br />
<def></def>      <sym>{</sym><br />
<def></def>         <kwa>new</kwa> <def></def><sym>(</sym><def>nodes</def><sym>)</sym> <def></def><kwd>Node</kwd><def></def><sym>(</sym><def>value</def><sym>,</sym> <def>depth</def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>nodes</def><sym>,</sym> <def>size</def><sym>);</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><br />
      <sym>~</sym><def></def><kwd>Tree</kwd><def></def><sym>()</sym><br />
<def></def>      <sym>{</sym><br />
<def></def>         <kwc>operator</kwc> <def></def><kwa>delete</kwa><def></def><sym>(</sym><def>nodes</def><sym>);</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><br />
      <kwb>int</kwb> <def></def><kwd>check</kwd><def></def><sym>()</sym> <def></def><kwb>const</kwb><br />
<def></def>      <sym>{</sym><br />
<def></def>         <kwa>return</kwa> <def>nodes</def><sym>-&gt;</sym><def></def><kwd>check</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def>nodes</def><sym>,</sym> <def>size</def><sym>);</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><br />
   <kwc>private</kwc><def></def><sym>:</sym><br />
<def><br />
      std</def><sym>::</sym><def></def><kwb>size_t</kwb> <def>size</def><sym>;</sym><br />
<def>      Node</def> <sym>*</sym> <def>nodes</def><sym>;</sym><br />
<def></def><br />
<sym>};</sym><br />
<def></def><br />
<kwb>int</kwb> <def></def><kwd>main</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>argc</def><sym>,</sym> <def></def><kwb>char</kwb> <def></def><sym>* *</sym> <def>argv</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def>   std</def><sym>::</sym><def></def><kwb>size_t</kwb> <def>user_depth</def> <sym>=</sym> <def></def><num>10</num><def></def><sym>;</sym><br />
<def></def>   <kwa>if</kwa> <def></def><sym>(</sym><def>argc</def> <sym>==</sym> <def></def><num>2</num><def></def><sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def>      std</def><sym>::</sym><def>istringstream</def> <kwd>convertor</kwd><def></def><sym>(</sym><def>argv</def><sym>[</sym><def></def><num>1</num><def></def><sym>]);</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(!(</sym><def>convertor</def> <sym>&gt;&gt;</sym> <def>user_depth</def><sym>) || !</sym><def>convertor</def><sym>.</sym><def></def><kwd>eof</kwd><def></def><sym>())</sym><br />
<def></def>      <sym>{</sym><br />
<def>         std</def><sym>::</sym><def>cerr</def> <sym>&lt;&lt;</sym> <def></def><str>&quot;Usage: &quot;</str><def></def> <sym>&lt;&lt;</sym> <def>argv</def><sym>[</sym><def></def><num>0</num><def></def><sym>] &lt;&lt;</sym> <def></def><str>&quot; [n]</str><esc>\n</esc><str>&quot;</str><def></def><sym>;</sym><br />
<def>         std</def><sym>::</sym><def>cerr</def> <sym>&lt;&lt;</sym> <def></def><str>&quot;</str><esc>\t</esc><str>n must be an integer</str><esc>\n</esc><str>&quot;</str><def></def><sym>;</sym><br />
<def></def>         <kwa>return</kwa> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def>   std</def><sym>::</sym><def></def><kwb>size_t</kwb> <def>minimum_depth</def> <sym>=</sym> <def></def><num>4</num><def></def><sym>;</sym><br />
<def>   std</def><sym>::</sym><def></def><kwb>size_t</kwb> <def>maximum_depth</def> <sym>=</sym> <def>std</def><sym>::</sym><def></def><kwd>max</kwd><def></def><sym>(</sym><def>minimum_depth</def> <sym>+</sym> <def></def><num>2</num><def></def><sym>,</sym> <def>user_depth</def><sym>);</sym><br />
<def></def>   <sym>{</sym><br />
<def>      Tree</def> <kwd>tree</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def>maximum_depth</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def>      std</def><sym>::</sym><def>cout</def> <sym>&lt;&lt;</sym> <def></def><str>&quot;stretch tree of depth &quot;</str><def></def> <sym>&lt;&lt; (</sym><def>maximum_depth</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>) &lt;&lt;</sym> <def></def><str>&quot;</str><esc>\t</esc> <str>check: &quot;</str><def></def> <sym>&lt;&lt;</sym> <def>tree</def><sym>.</sym><def></def><kwd>check</kwd><def></def><sym>() &lt;&lt;</sym> <def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def>   Tree</def> <kwd>long_lived_tree</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def>maximum_depth</def><sym>);</sym><br />
<def></def>   <kwa>for</kwa> <def></def><sym>(</sym><def>std</def><sym>::</sym><def></def><kwb>size_t</kwb> <def>depth</def> <sym>=</sym> <def>minimum_depth</def><sym>;</sym> <def>depth</def> <sym>&lt;=</sym> <def>maximum_depth</def><sym>;</sym> <def>depth</def> <sym>+=</sym> <def></def><num>2</num><def></def><sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def></def>      <kwb>int</kwb> <def>iterations</def> <sym>=</sym> <def></def><num>1</num> <def></def><sym>&lt;&lt; (</sym><def>maximum_depth</def> <sym>-</sym> <def>depth</def> <sym>+</sym> <def>minimum_depth</def><sym>);</sym><br />
<def></def>      <kwb>int</kwb> <def>check</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>      <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>iteration</def> <sym>=</sym> <def></def><num>1</num><def></def><sym>;</sym> <def>iteration</def> <sym>&lt;=</sym> <def>iterations</def><sym>; ++</sym><def>iteration</def><sym>)</sym><br />
<def></def>      <sym>{</sym><br />
<def>         Tree</def> <kwd>first</kwd><def></def><sym>(</sym><def>iteration</def><sym>,</sym> <def>depth</def><sym>);</sym><br />
<def>         Tree</def> <kwd>second</kwd><def></def><sym>(-</sym><def>iteration</def><sym>,</sym> <def>depth</def><sym>);</sym><br />
<def>         check</def> <sym>+=</sym> <def>first</def><sym>.</sym><def></def><kwd>check</kwd><def></def><sym>() +</sym> <def>second</def><sym>.</sym><def></def><kwd>check</kwd><def></def><sym>();</sym><br />
<def></def>      <sym>}</sym><br />
<def>      std</def><sym>::</sym><def>cout</def> <sym>&lt;&lt; (</sym><def></def><num>2</num> <def></def><sym>*</sym> <def>iterations</def><sym>) &lt;&lt;</sym> <def></def><str>&quot;</str><esc>\t</esc> <str>trees of depth &quot;</str><def></def> <sym>&lt;&lt;</sym> <def>depth</def> <sym>&lt;&lt;</sym> <def></def><str>&quot;</str><esc>\t</esc> <str>check: &quot;</str><def></def> <sym>&lt;&lt;</sym> <def>check</def> <sym>&lt;&lt;</sym> <def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def>   std</def><sym>::</sym><def>cout</def> <sym>&lt;&lt;</sym> <def></def><str>&quot;long lived tree of depth &quot;</str><def></def> <sym>&lt;&lt;</sym> <def>maximum_depth</def> <sym>&lt;&lt;</sym> <def></def><str>&quot;</str><esc>\t</esc> <str>check: &quot;</str><def></def> <sym>&lt;&lt;</sym> <def>long_lived_tree</def><sym>.</sym><def></def><kwd>check</kwd><def></def><sym>() &lt;&lt;</sym> <def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>;</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
