<source>
<def></def><com>(* The Great Computer Language Shootout</com><br />
<com> * http://shootout.alioth.debian.org/</com><br />
<com> *</com><br />
<com> * Contributed by Sebastien Loisel</com><br />
<com> * Cleanup by Troestler Christophe</com><br />
<com> *)</com><def></def><br />
<br />
<kwa>let</kwa> <def>eval_A i j</def> <sym>=</sym> <def></def><num>1</num><def></def><sym>. /.</sym> <def></def><kwb>float</kwb><def></def><sym>((</sym><def>i</def><sym>+</sym><def>j</def><sym>)*(</sym><def>i</def><sym>+</sym><def>j</def><sym>+</sym><def></def><num>1</num><def></def><sym>)/</sym><def></def><num>2</num><def></def><sym>+</sym><def>i</def><sym>+</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def></def><br />
<kwa>let</kwa> <def>eval_A_times_u u v</def> <sym>=</sym><br />
<def></def>  <kwa>let</kwa> <def>n</def> <sym>=</sym> <def></def><kwc>Array</kwc><def></def><sym>.</sym><def>length v</def> <sym>-</sym> <def></def><num>1</num> <def></def><kwa>in</kwa><br />
<def></def>  <kwa>for</kwa> <def>i</def> <sym>=</sym> <def></def><num>0</num> <def></def><kwa>to</kwa>  <def>n</def> <kwa>do</kwa><br />
<def>    v</def><sym>.(</sym><def>i</def><sym>) &lt;-</sym> <def></def><num>0.0</num><def></def><sym>;</sym><br />
<def></def>    <kwa>for</kwa> <def>j</def> <sym>=</sym> <def></def><num>0</num> <def></def><kwa>to</kwa> <def>n</def> <kwa>do</kwa> <def>v</def><sym>.(</sym><def>i</def><sym>) &lt;-</sym> <def>v</def><sym>.(</sym><def>i</def><sym>) +.</sym> <def>eval_A i j</def> <sym>*.</sym> <def>u</def><sym>.(</sym><def>j</def><sym>)</sym> <def></def><kwa>done</kwa><def></def><sym>;</sym><br />
<def></def>  <kwa>done</kwa><br />
<def></def><br />
<kwa>let</kwa> <def>eval_At_times_u u v</def> <sym>=</sym><br />
<def></def>  <kwa>let</kwa> <def>n</def> <sym>=</sym> <def></def><kwc>Array</kwc><def></def><sym>.</sym><def>length v</def> <sym>-</sym><def></def><num>1</num> <def></def><kwa>in</kwa><br />
<def></def>  <kwa>for</kwa> <def>i</def> <sym>=</sym> <def></def><num>0</num> <def></def><kwa>to</kwa> <def>n</def> <kwa>do</kwa><br />
<def>    v</def><sym>.(</sym><def>i</def><sym>) &lt;-</sym> <def></def><num>0.0</num><def></def><sym>;</sym><br />
<def></def>    <kwa>for</kwa> <def>j</def> <sym>=</sym> <def></def><num>0</num> <def></def><kwa>to</kwa> <def>n</def> <kwa>do</kwa> <def>v</def><sym>.(</sym><def>i</def><sym>) &lt;-</sym> <def>v</def><sym>.(</sym><def>i</def><sym>) +.</sym> <def>eval_A j i</def> <sym>*.</sym> <def>u</def><sym>.(</sym><def>j</def><sym>)</sym> <def></def><kwa>done</kwa><def></def><sym>;</sym><br />
<def></def>  <kwa>done</kwa><br />
<def></def><br />
<kwa>let</kwa> <def>eval_AtA_times_u u v</def> <sym>=</sym><br />
<def></def>  <kwa>let</kwa> <def>w</def> <sym>=</sym> <def></def><kwc>Array</kwc><def></def><sym>.</sym><def>make</def> <sym>(</sym><def></def><kwc>Array</kwc><def></def><sym>.</sym><def>length u</def><sym>)</sym> <def></def><num>0.0</num> <def></def><kwa>in</kwa><br />
<def>  eval_A_times_u u w</def><sym>;</sym> <def>eval_At_times_u w v</def><br />
<br />
<br />
<kwa>let</kwa> <def></def><sym>() =</sym><br />
<def></def>  <kwa>let</kwa> <def>n</def> <sym>=</sym> <def></def><kwa>try</kwa> <def>int_of_string</def><sym>(</sym><def></def><kwc>Array</kwc><def></def><sym>.</sym><def>get</def> <kwc>Sys</kwc><def></def><sym>.</sym><def>argv</def> <num>1</num><def></def><sym>)</sym> <def></def><kwa>with</kwa> <def>_</def> <sym>-&gt;</sym>  <def></def><num>2000</num> <def></def><kwa>in</kwa><br />
<def></def>  <kwa>let</kwa> <def>u</def> <sym>=</sym> <def></def><kwc>Array</kwc><def></def><sym>.</sym><def>make n</def> <num>1.0</num>  <def></def><kwa>and</kwa>  <def>v</def> <sym>=</sym> <def></def><kwc>Array</kwc><def></def><sym>.</sym><def>make n</def> <num>0.0</num> <def></def><kwa>in</kwa><br />
<def></def>  <kwa>for</kwa> <def>i</def> <sym>=</sym> <def></def><num>0</num> <def></def><kwa>to</kwa> <def></def><num>9</num> <def></def><kwa>do</kwa><br />
<def>    eval_AtA_times_u u v</def><sym>;</sym> <def>eval_AtA_times_u v u</def><br />
  <kwa>done</kwa><def></def><sym>;</sym><br />
<def></def><br />
  <kwa>let</kwa> <def>vv</def> <sym>=</sym> <def></def><kwb>ref</kwb> <def></def><num>0.0</num>  <def></def><kwa>and</kwa>  <def>vBv</def> <sym>=</sym> <def></def><kwb>ref</kwb> <def></def><num>0.0</num> <def></def><kwa>in</kwa><br />
<def></def>  <kwa>for</kwa> <def>i</def><sym>=</sym><def></def><num>0</num> <def></def><kwa>to</kwa> <def>n</def><sym>-</sym><def></def><num>1</num> <def></def><kwa>do</kwa><br />
<def>    vv</def> <sym>:= !</sym><def>vv</def> <sym>+.</sym> <def>v</def><sym>.(</sym><def>i</def><sym>) *.</sym> <def>v</def><sym>.(</sym><def>i</def><sym>);</sym><br />
<def>    vBv</def> <sym>:= !</sym><def>vBv</def> <sym>+.</sym> <def>u</def><sym>.(</sym><def>i</def><sym>) *.</sym> <def>v</def><sym>.(</sym><def>i</def><sym>)</sym><br />
<def></def>  <kwa>done</kwa><def></def><sym>;</sym><br />
<def></def>  <kwc>Printf</kwc><def></def><sym>.</sym><def>printf</def> <str>&quot;%0.9f</str><esc>\n</esc><str>&quot;</str><def></def> <sym>(</sym><def>sqrt</def><sym>(!</sym><def>vBv</def> <sym>/. !</sym><def>vv</def><sym>))</sym><def></def><br />
</source>
