<span class="hl slc">#  The Computer Language Benchmarks Game</span>
<span class="hl slc">#  http://shootout.alioth.debian.org/</span>
<span class="hl slc">#</span>
<span class="hl slc">#  contributed by Karl von Laudermann</span>
<span class="hl slc">#  modified by Jeremy Echols</span>
<span class="hl slc">#  modified by Detlef Reichl</span>
<span class="hl slc">#  modified by Joseph LaFata</span>
<span class="hl slc">#  modified by Peter Zotov</span>

size <span class="hl sym">=</span> <span class="hl kwc">ARGV</span><span class="hl sym">.</span>shift<span class="hl sym">.</span>to_i

puts <span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">#{size} #{size}&quot;</span>

byte_acc <span class="hl sym">=</span> <span class="hl num">0</span>
bit_num <span class="hl sym">=</span> <span class="hl num">0</span>

y <span class="hl sym">=</span> <span class="hl num">0</span>
<span class="hl kwa">while</span> y <span class="hl sym">&lt;</span> size
  ci <span class="hl sym">= (</span><span class="hl num">2.0</span><span class="hl sym">*</span>y<span class="hl sym">/</span>size<span class="hl sym">)-</span><span class="hl num">1.0</span>

  x <span class="hl sym">=</span> <span class="hl num">0</span>
  <span class="hl kwa">while</span> x <span class="hl sym">&lt;</span> size
    z <span class="hl sym">=</span> <span class="hl kwd">Complex</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">)</span>
    c <span class="hl sym">=</span> <span class="hl kwd">Complex</span><span class="hl sym">(</span><span class="hl num">2.0</span><span class="hl sym">*</span>x<span class="hl sym">/</span>size-1<span class="hl sym">.</span>5<span class="hl sym">,</span> ci<span class="hl sym">)</span>
    escape <span class="hl sym">=</span> <span class="hl num">0b1</span>

    n <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">while</span> n <span class="hl sym">&lt;</span> <span class="hl num">50</span>
      z <span class="hl sym">=</span> z<span class="hl sym">*</span>z <span class="hl sym">+</span> c
      <span class="hl kwa">if</span> z<span class="hl sym">.</span>abs <span class="hl sym">&gt;</span> <span class="hl num">4.0</span>
        escape <span class="hl sym">=</span> <span class="hl num">0b0</span>
        <span class="hl kwa">break</span>
      <span class="hl kwa">end</span>
      n <span class="hl sym">+=</span> <span class="hl num">1</span>
    <span class="hl kwa">end</span>

    byte_acc <span class="hl sym">= (</span>byte_acc <span class="hl sym">&lt;&lt;</span> <span class="hl num">1</span><span class="hl sym">) |</span> escape
    bit_num <span class="hl sym">+=</span> <span class="hl num">1</span>

    <span class="hl slc"># Code is very similar for these cases, but using separate blocks</span>
    <span class="hl slc"># ensures we skip the shifting when it's unnecessary, which is most cases.</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>bit_num <span class="hl sym">==</span> <span class="hl num">8</span><span class="hl sym">)</span>
      print byte_acc<span class="hl sym">.</span>chr
      byte_acc <span class="hl sym">=</span> <span class="hl num">0</span>
      bit_num <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">elsif</span> <span class="hl sym">(</span>x <span class="hl sym">==</span> size <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span>
      byte_acc <span class="hl sym">&lt;&lt;= (</span><span class="hl num">8</span> <span class="hl sym">-</span> bit_num<span class="hl sym">)</span>
      print byte_acc<span class="hl sym">.</span>chr
      byte_acc <span class="hl sym">=</span> <span class="hl num">0</span>
      bit_num <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">end</span>
    x <span class="hl sym">+=</span> <span class="hl num">1</span>
  <span class="hl kwa">end</span>
  y <span class="hl sym">+=</span> <span class="hl num">1</span>
<span class="hl kwa">end</span>
