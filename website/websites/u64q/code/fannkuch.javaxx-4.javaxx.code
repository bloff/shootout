<source>
<def></def><com>/* The Computer Language Benchmarks Game</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com>   C program contributed by Heiner Marxen</com><br />
<com>   Transliterated to Java by Amir K aka Razii</com><br />
<com>*/</com><def></def><br />
<br />
<br />
<kwa>public final class</kwa> <def>fannkuch</def><br />
<sym>{</sym><br />
<def></def> <kwa>public static</kwa> <def></def><kwb>void</kwb> <def></def><kwd>main</kwd><def></def><sym>(</sym><def></def><kwc>String</kwc><def></def><sym>[]</sym> <def>args</def><sym>)</sym><br />
<def></def> <sym>{</sym><br />
<def></def>  <kwb>int</kwb> <def>n</def> <sym>=</sym> <def></def><num>11</num><def></def><sym>;</sym><br />
<def></def>  <kwa>if</kwa><def></def><sym>(</sym><def>args</def><sym>.</sym><def>length</def> <sym>==</sym> <def></def><num>1</num><def></def><sym>)</sym> <def>n</def> <sym>=</sym> <def></def><kwc>Integer</kwc><def></def><sym>.</sym><def></def><kwd>parseInt</kwd><def></def><sym>(</sym><def>args</def><sym>[</sym><def></def><num>0</num><def></def><sym>]);</sym><br />
<def></def>  <kwc>System</kwc><def></def><sym>.</sym><def>out</def><sym>.</sym><def></def><kwd>println</kwd><def></def><sym>(</sym><def></def><str>&quot;Pfannkuchen(&quot;</str><def></def> <sym>+</sym> <def>n</def> <sym>+</sym> <def></def><str>&quot;) = &quot;</str><def></def> <sym>+</sym> <def></def><kwd>fannkuch</kwd><def></def><sym>(</sym><def>n</def><sym>));</sym><br />
<def></def> <sym>}</sym><br />
<def></def><br />
 <kwa>static</kwa> <def></def><kwb>int</kwb> <def></def><kwd>fannkuch</kwd><def></def><sym>(</sym><def></def><kwa>final</kwa> <def></def><kwb>int</kwb> <def>n</def><sym>)</sym><br />
<def></def> <sym>{</sym><br />
<def></def>  <kwb>int</kwb><def></def><sym>[]</sym> <def>perm</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwb>int</kwb><def></def><sym>[</sym><def>n</def><sym>];</sym><br />
<def></def>  <kwb>int</kwb><def></def><sym>[]</sym> <def>perm1</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwb>int</kwb><def></def><sym>[</sym><def>n</def><sym>];</sym><br />
<def></def>  <kwb>int</kwb><def></def><sym>[]</sym> <def>count</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwb>int</kwb><def></def><sym>[</sym><def>n</def><sym>];</sym><br />
<def></def>  <kwb>int</kwb> <def>flips</def><sym>;</sym><br />
<def></def>  <kwb>int</kwb> <def>flipsMax</def><sym>;</sym><br />
<def></def>  <kwb>int</kwb> <def>r</def><sym>;</sym><br />
<def></def>  <kwb>int</kwb> <def>i</def><sym>;</sym><br />
<def></def>  <kwb>int</kwb> <def>k</def><sym>;</sym><br />
<def></def>  <kwb>int</kwb> <def>didpr</def><sym>;</sym><br />
<def></def>  <kwa>final</kwa> <def></def><kwb>int</kwb> <def>n1</def> <sym>=</sym> <def>n</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>  <kwa>if</kwa><def></def><sym>(</sym> <def>n</def> <sym>&lt;</sym> <def></def><num>1</num> <def></def><sym>)</sym> <def></def><kwa>return</kwa> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><br />
  <kwa>for</kwa><def></def><sym>(</sym> <def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym><def>i</def><sym>&lt;</sym><def>n</def><sym>;++</sym><def>i</def> <sym>)</sym> <def>perm1</def><sym>[</sym><def>i</def><sym>] =</sym> <def>i</def><sym>;</sym><br />
<def></def>  <com>/* initial (trivial) permu */</com><def><br />
  r</def> <sym>=</sym> <def>n</def><sym>;</sym><br />
<def>  didpr</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>  flipsMax</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>  <kwa>for</kwa><def></def><sym>(;;)</sym><br />
<def></def>  <sym>{</sym><br />
<def></def>   <kwa>if</kwa><def></def><sym>(</sym> <def>didpr</def> <sym>&lt;</sym> <def></def><num>30</num> <def></def><sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def></def>    <kwa>for</kwa><def></def><sym>(</sym> <def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym><def>i</def><sym>&lt;</sym><def>n</def><sym>;++</sym><def>i</def> <sym>)</sym> <def></def><kwc>System</kwc><def></def><sym>.</sym><def>out</def><sym>.</sym><def></def><kwd>print</kwd> <def></def><sym>(</sym><def></def><num>1</num><def></def><sym>+</sym><def>perm1</def><sym>[</sym><def>i</def><sym>]);</sym><br />
<def></def>    <kwc>System</kwc><def></def><sym>.</sym><def>out</def><sym>.</sym><def></def><kwd>print</kwd><def></def><sym>(</sym><def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>);</sym><br />
<def></def>    <sym>++</sym><def>didpr</def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def>   <kwa>for</kwa><def></def><sym>(;</sym><def>r</def><sym>!=</sym><def></def><num>1</num><def></def><sym>;--</sym><def>r</def><sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def>    count</def><sym>[</sym><def>r</def><sym>-</sym><def></def><num>1</num><def></def><sym>] =</sym> <def>r</def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def>   <kwa>if</kwa><def></def><sym>(!(</sym><def>perm1</def><sym>[</sym><def></def><num>0</num><def></def><sym>]==</sym><def></def><num>0</num> <def></def><sym>||</sym> <def>perm1</def><sym>[</sym><def>n1</def><sym>]==</sym><def>n1</def><sym>) )</sym><br />
<def></def>   <sym>{</sym><br />
<def>    flips</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>    <kwa>for</kwa><def></def><sym>(</sym> <def>i</def><sym>=</sym><def></def><num>1</num><def></def><sym>;</sym><def>i</def><sym>&lt;</sym><def>n</def><sym>;++</sym><def>i</def> <sym>)</sym><br />
<def></def>    <sym>{</sym><br />
<def>     perm</def><sym>[</sym><def>i</def><sym>] =</sym> <def>perm1</def><sym>[</sym><def>i</def><sym>];</sym><br />
<def></def>    <sym>}</sym><br />
<def>    k</def> <sym>=</sym> <def>perm1</def><sym>[</sym><def></def><num>0</num><def></def><sym>];</sym><br />
<def></def><br />
    <com>/* cache perm[0] in k */</com><def></def><br />
    <kwa>do</kwa><br />
<def></def>    <sym>{</sym><br />
<def></def>     <com>/* k!=0 ==&gt; k&gt;0 */</com><def></def><br />
     <kwb>int</kwb> <def>j</def><sym>;</sym><br />
<def></def>     <kwa>for</kwa><def></def><sym>(</sym> <def>i</def><sym>=</sym><def></def><num>1</num><def></def><sym>,</sym> <def>j</def><sym>=</sym><def>k</def><sym>-</sym><def></def><num>1</num><def></def><sym>;</sym><def>i</def><sym>&lt;</sym><def>j</def><sym>;++</sym><def>i</def><sym>, --</sym><def>j</def> <sym>)</sym><br />
<def></def>     <sym>{</sym><br />
<def></def>      <kwb>int</kwb> <def>t_mp</def> <sym>=</sym> <def>perm</def><sym>[</sym><def>i</def><sym>];</sym><br />
<def>      perm</def><sym>[</sym><def>i</def><sym>] =</sym> <def>perm</def><sym>[</sym><def>j</def><sym>];</sym><br />
<def>      perm</def><sym>[</sym><def>j</def><sym>] =</sym> <def>t_mp</def><sym>;</sym><br />
<def></def>     <sym>}</sym><br />
<def></def>     <sym>++</sym><def>flips</def><sym>;</sym><br />
<def></def>     <com>/* * Now exchange k (caching perm[0]) and perm[k] */</com><def><br />
     j</def><sym>=</sym><def>perm</def><sym>[</sym><def>k</def><sym>];</sym><br />
<def>     perm</def><sym>[</sym><def>k</def><sym>]=</sym><def>k</def><sym>;</sym><br />
<def>     k</def><sym>=</sym><def>j</def><sym>;</sym><br />
<def></def>    <sym>}</sym><br />
<def></def>    <kwa>while</kwa><def></def><sym>(</sym><def>k</def> <sym>!=</sym> <def></def><num>0</num><def></def><sym>);</sym><br />
<def></def>    <kwa>if</kwa><def></def><sym>(</sym> <def>flipsMax</def> <sym>&lt;</sym> <def>flips</def> <sym>)</sym><br />
<def></def>    <sym>{</sym><br />
<def>     flipsMax</def> <sym>=</sym> <def>flips</def><sym>;</sym><br />
<def></def>    <sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def></def>   <kwa>for</kwa><def></def><sym>(;;)</sym><br />
<def></def>   <sym>{</sym><br />
<def></def>    <kwa>if</kwa><def></def><sym>(</sym> <def>r</def> <sym>==</sym> <def>n</def> <sym>)</sym><br />
<def></def>    <sym>{</sym><br />
<def></def>     <kwa>return</kwa> <def>flipsMax</def><sym>;</sym><br />
<def></def>    <sym>}</sym><br />
<def></def>    <com>/* rotate down perm[0..r] by one */</com><def></def><br />
     <kwb>int</kwb> <def>perm0</def> <sym>=</sym> <def>perm1</def><sym>[</sym><def></def><num>0</num><def></def><sym>];</sym><br />
<def>     i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>     <kwa>while</kwa><def></def><sym>(</sym> <def>i</def> <sym>&lt;</sym> <def>r</def> <sym>)</sym><br />
<def></def>     <sym>{</sym><br />
<def>      k</def> <sym>=</sym> <def>i</def><sym>+</sym><def></def><num>1</num><def></def><sym>;</sym><br />
<def>      perm1</def><sym>[</sym><def>i</def><sym>] =</sym> <def>perm1</def><sym>[</sym><def>k</def><sym>];</sym><br />
<def>      i</def> <sym>=</sym> <def>k</def><sym>;</sym><br />
<def></def>     <sym>}</sym><br />
<def>     perm1</def><sym>[</sym><def>r</def><sym>] =</sym> <def>perm0</def><sym>;</sym><br />
<def></def><br />
    <kwa>if</kwa><def></def><sym>( (</sym><def>count</def><sym>[</sym><def>r</def><sym>] -=</sym> <def></def><num>1</num><def></def><sym>) &gt;</sym> <def></def><num>0</num> <def></def><sym>)</sym><br />
<def></def>    <sym>{</sym><br />
<def></def>     <kwa>break</kwa><def></def><sym>;</sym><br />
<def></def>    <sym>}</sym><br />
<def></def>    <sym>++</sym><def>r</def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def>  <sym>}</sym><br />
<def></def> <sym>}</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
