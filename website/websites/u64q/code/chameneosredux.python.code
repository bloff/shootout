<source>
<def></def><slc># The Computer Language Benchmarks Game</slc><br />
<def></def><slc># http://shootout.alioth.debian.org/</slc><br />
<def></def><slc># contributed by Tupteq</slc><br />
<def></def><slc>#</slc><br />
<def></def><slc># Based on codes from PDF and Nice #3 version.</slc><br />
<def></def><slc># Before use of threading.Condition I tried semaphores (code similar to</slc><br />
<def></def><slc># C code from PDF), but it was slower.</slc><br />
<def></def><br />
<kwa>from</kwa> <def>__future__</def> <kwa>import</kwa> <def>with_statement</def>  <slc># Required until Python 2.6</slc><br />
<def></def><br />
<kwa>import</kwa> <def>sys</def><br />
<kwa>from</kwa> <def>threading</def> <kwa>import</kwa> <def>Thread</def><sym>,</sym> <def>Condition</def><br />
<br />
<slc># Constatnts</slc><br />
<def>all_colors</def> <sym>=</sym> <def>blue</def><sym>,</sym> <def>red</def><sym>,</sym> <def>yellow</def> <sym>=</sym> <def></def><str>&quot;blue&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;red&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;yellow&quot;</str><def><br />
stop</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>blue</def>  <slc># Stop condition</slc><br />
<def></def><br />
<br />
<kwa>def</kwa> <def></def><kwd>complement</kwd><def></def><sym>(</sym><def>c1</def><sym>,</sym> <def>c2</def><sym>):</sym><br />
<def></def>    <slc># I used 'is' except '==' here, it's faster</slc><br />
<def></def>    <kwa>return</kwa> <def></def><sym>(</sym><def>c1</def> <kwa>if</kwa> <def>c1</def> <kwa>is</kwa> <def>c2</def><br />
        <kwa>else</kwa> <def></def><sym>(</sym><def>yellow</def> <kwa>if</kwa> <def>c2</def> <kwa>is</kwa> <def>red</def> <kwa>else</kwa> <def>red</def><sym>)</sym> <def></def><kwa>if</kwa> <def>c1</def> <kwa>is</kwa> <def>blue</def><br />
        <kwa>else</kwa> <def></def><sym>(</sym><def>yellow</def> <kwa>if</kwa> <def>c2</def> <kwa>is</kwa> <def>blue</def> <kwa>else</kwa> <def>blue</def><sym>)</sym> <def></def><kwa>if</kwa> <def>c1</def> <kwa>is</kwa> <def>red</def><br />
        <kwa>else</kwa> <def></def><sym>(</sym><def>red</def> <kwa>if</kwa> <def>c2</def> <kwa>is</kwa> <def>blue</def> <kwa>else</kwa> <def>blue</def><sym>))</sym><br />
<def></def><br />
<br />
<kwa>def</kwa> <def></def><kwd>print_color_changes</kwd><def></def><sym>():</sym><br />
<def></def>    <slc># Print complement for each combination</slc><br />
<def></def>    <kwa>for</kwa> <def>c1</def> <kwa>in</kwa> <def>all_colors</def><sym>:</sym><br />
<def></def>        <kwa>for</kwa> <def>c2</def> <kwa>in</kwa> <def>all_colors</def><sym>:</sym><br />
<def></def>            <kwa>print</kwa> <def></def><str>&quot;%s + %s -&gt; %s&quot;</str><def></def> <sym>% (</sym><def>c1</def><sym>,</sym> <def>c2</def><sym>,</sym> <def></def><kwd>complement</kwd><def></def><sym>(</sym><def>c1</def><sym>,</sym> <def>c2</def><sym>))</sym><br />
<def></def><br />
<br />
<kwa>class</kwa> <def>Mall</def><sym>:</sym><br />
<def></def>    <kwa>def</kwa> <def></def><kwd>__init__</kwd><def></def><sym>(</sym><def>self</def><sym>,</sym> <def>n</def><sym>):</sym><br />
<def>        self</def><sym>.</sym><def>first</def> <sym>=</sym> <def></def><kwa>True</kwa><br />
<def>        self</def><sym>.</sym><def>must_wait</def> <sym>=</sym> <def></def><kwa>False</kwa><br />
<def>        self</def><sym>.</sym><def>counter</def> <sym>=</sym> <def>n<br />
        self</def><sym>.</sym><def>cond</def> <sym>=</sym> <def></def><kwd>Condition</kwd><def></def><sym>()</sym><br />
<def></def><br />
    <kwa>def</kwa> <def></def><kwd>notify</kwd><def></def><sym>(</sym><def>self</def><sym>,</sym> <def>me</def><sym>):</sym><br />
<def></def>        <slc># &quot;with&quot; makes all the job (no acquire() and release() needed)</slc><br />
<def>        with self</def><sym>.</sym><def>cond</def><sym>:</sym><br />
<def></def>            <kwa>while</kwa> <def>self</def><sym>.</sym><def>must_wait</def> <kwa>and</kwa> <def>self</def><sym>.</sym><def>counter</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>:</sym><br />
<def>                self</def><sym>.</sym><def>cond</def><sym>.</sym><def></def><kwd>wait</kwd><def></def><sym>()</sym><br />
<def></def><br />
            <kwa>if</kwa> <def>self</def><sym>.</sym><def>first</def><sym>:</sym><br />
<def></def>                <slc># Creature is first</slc><br />
<def>                self</def><sym>.</sym><def>a</def> <sym>=</sym> <def>me<br />
                self</def><sym>.</sym><def>first</def> <sym>=</sym> <def></def><kwa>False</kwa><br />
<def></def><br />
                <kwa>while not</kwa> <def>self</def><sym>.</sym><def>first</def> <kwa>and</kwa> <def>self</def><sym>.</sym><def>counter</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>:</sym><br />
<def>                    self</def><sym>.</sym><def>cond</def><sym>.</sym><def></def><kwd>wait</kwd><def></def><sym>()</sym><br />
<def><br />
                he</def> <sym>=</sym> <def>self</def><sym>.</sym><def>b<br />
                self</def><sym>.</sym><def>must_wait</def> <sym>=</sym> <def></def><kwa>False</kwa><br />
<def>                self</def><sym>.</sym><def>cond</def><sym>.</sym><def></def><kwd>notifyAll</kwd><def></def><sym>()</sym><br />
<def><br />
                self</def><sym>.</sym><def>counter</def> <sym>-=</sym> <def></def><num>1</num><br />
<def></def>            <kwa>else</kwa><def></def><sym>:</sym><br />
<def></def>                <slc># Creature is second</slc><br />
<def>                self</def><sym>.</sym><def>b</def> <sym>=</sym> <def>me<br />
                he</def> <sym>=</sym> <def>self</def><sym>.</sym><def>a<br />
                self</def><sym>.</sym><def>first</def> <sym>=</sym> <def></def><kwa>True</kwa><br />
<def>                self</def><sym>.</sym><def>must_wait</def> <sym>=</sym> <def></def><kwa>True</kwa><br />
<def>                self</def><sym>.</sym><def>cond</def><sym>.</sym><def></def><kwd>notifyAll</kwd><def></def><sym>()</sym><br />
<def></def><br />
            <kwa>return</kwa> <def>he</def> <kwa>if</kwa> <def>self</def><sym>.</sym><def>counter</def> <sym>&gt;=</sym> <def></def><num>0</num> <def></def><kwa>else</kwa> <def>stop</def><br />
<br />
<br />
<kwa>class</kwa> <def></def><kwd>Creature</kwd><def></def><sym>(</sym><def>Thread</def><sym>):</sym><br />
<def></def>    <kwa>def</kwa> <def></def><kwd>__init__</kwd><def></def><sym>(</sym><def>self</def><sym>,</sym> <def>name</def><sym>,</sym> <def>color</def><sym>,</sym> <def>mall</def><sym>):</sym><br />
<def></def>        <slc># Thread initialization, thread built in name is not used</slc><br />
<def>        Thread</def><sym>.</sym><def></def><kwd>__init__</kwd><def></def><sym>(</sym><def>self</def><sym>)</sym><br />
<def>        self</def><sym>.</sym><def>name</def> <sym>=</sym> <def>name<br />
        self</def><sym>.</sym><def>color</def> <sym>=</sym> <def>color<br />
        self</def><sym>.</sym><def>mall</def> <sym>=</sym> <def>mall<br />
        self</def><sym>.</sym><def>self_met</def> <sym>=</sym> <def></def><num>0</num><br />
<def>        self</def><sym>.</sym><def>met</def> <sym>=</sym> <def></def><num>0</num><br />
<def></def><br />
    <kwa>def</kwa> <def></def><kwd>run</kwd><def></def><sym>(</sym><def>self</def><sym>):</sym><br />
<def></def>        <kwa>while</kwa> <def></def><num>1</num><def></def><sym>:</sym><br />
<def></def>            <slc># Go to meeting place</slc><br />
<def>            his_name</def><sym>,</sym> <def>his_color</def> <sym>=</sym> <def>self</def><sym>.</sym><def>mall</def><sym>.</sym><def></def><kwd>notify</kwd><def></def><sym>((</sym><def>self</def><sym>.</sym><def>name</def><sym>,</sym> <def>self</def><sym>.</sym><def>color</def><sym>))</sym><br />
<def></def>            <kwa>if</kwa> <def>his_name</def> <sym>==</sym> <def></def><num>0</num><def></def><sym>:</sym><br />
<def></def>                <kwa>break</kwa><br />
<def></def><br />
            <slc># Change color and increment counters</slc><br />
<def>            self</def><sym>.</sym><def>color</def> <sym>=</sym> <def></def><kwd>complement</kwd><def></def><sym>(</sym><def>self</def><sym>.</sym><def>color</def><sym>,</sym> <def>his_color</def><sym>)</sym><br />
<def></def>            <kwa>if</kwa> <def>self</def><sym>.</sym><def>name</def> <kwa>is</kwa> <def>his_name</def><sym>:</sym><br />
<def>                self</def><sym>.</sym><def>self_met</def> <sym>+=</sym> <def></def><num>1</num><br />
<def>            self</def><sym>.</sym><def>met</def> <sym>+=</sym> <def></def><num>1</num><br />
<def></def><br />
<br />
<kwa>def</kwa> <def></def><kwd>simulate</kwd><def></def><sym>(</sym><def>colors</def><sym>,</sym> <def>n</def><sym>):</sym><br />
<def></def>    <slc># Prepare and execute simulation</slc><br />
<def>    r</def> <sym>=</sym> <def></def><kwd>Mall</kwd><def></def><sym>(</sym><def>n</def><sym>)</sym><br />
<def>    creatures</def> <sym>= [</sym><def></def><kwd>Creature</kwd><def></def><sym>(</sym><def>i</def><sym>+</sym><def></def><num>1</num><def></def><sym>,</sym> <def>color</def><sym>,</sym> <def>r</def><sym>)</sym> <def></def><kwa>for</kwa> <def>i</def><sym>,</sym> <def>color</def> <kwa>in</kwa> <def></def><kwb>enumerate</kwb><def></def><sym>(</sym><def>colors</def><sym>)]</sym><br />
<def></def>    <kwa>for</kwa> <def>c</def> <kwa>in</kwa> <def>creatures</def><sym>:</sym><br />
<def>        c</def><sym>.</sym><def></def><kwd>start</kwd><def></def><sym>()</sym><br />
<def></def>    <kwa>for</kwa> <def>c</def> <kwa>in</kwa> <def>creatures</def><sym>:</sym><br />
<def>        c</def><sym>.</sym><def></def><kwd>join</kwd><def></def><sym>()</sym><br />
<def></def><br />
    <slc># Prepare spellout function</slc><br />
<def>    numbers</def> <sym>= (</sym><def></def><str>&quot;zero&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;one&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;two&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;three&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;four&quot;</str><def></def><sym>,</sym><br />
<def></def>        <str>&quot;five&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;six&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;seven&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;eight&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;nine&quot;</str><def></def><sym>)</sym><br />
<def></def>    <kwa>def</kwa> <def></def><kwd>spellout</kwd><def></def><sym>(</sym><def>i</def><sym>):</sym><br />
<def></def>        <kwa>return</kwa> <def></def><str>&quot; &quot;</str><def></def> <sym>+</sym> <def></def><str>&quot; &quot;</str><def></def><sym>.</sym><def></def><kwd>join</kwd><def></def><sym>(</sym><def>numbers</def><sym>[</sym><def></def><kwb>int</kwb><def></def><sym>(</sym><def>x</def><sym>)]</sym> <def></def><kwa>for</kwa> <def>x</def> <kwa>in</kwa> <def></def><kwb>str</kwb><def></def><sym>(</sym><def>i</def><sym>))</sym><br />
<def></def><br />
    <slc># Print results</slc><br />
<def></def>    <kwa>print</kwa><br />
<def></def>    <kwa>print</kwa> <def></def><str>&quot; &quot;</str><def></def> <sym>+</sym> <def></def><str>&quot; &quot;</str><def></def><sym>.</sym><def></def><kwd>join</kwd><def></def><sym>(</sym><def>colors</def><sym>)</sym><br />
<def></def>    <kwb>sum</kwb> <def></def><sym>=</sym> <def></def><num>0</num><br />
<def></def>    <kwa>for</kwa> <def>c</def> <kwa>in</kwa> <def>creatures</def><sym>:</sym><br />
<def></def>        <kwb>sum</kwb> <def></def><sym>+=</sym> <def>c</def><sym>.</sym><def>met</def><br />
        <kwa>print</kwa> <def></def><kwb>str</kwb><def></def><sym>(</sym><def>c</def><sym>.</sym><def>met</def><sym>) +</sym> <def></def><kwd>spellout</kwd><def></def><sym>(</sym><def>c</def><sym>.</sym><def>self_met</def><sym>)</sym><br />
<def></def>    <kwa>print</kwa> <def></def><kwd>spellout</kwd><def></def><sym>(</sym><def></def><kwb>sum</kwb><def></def><sym>)</sym><br />
<def></def><br />
<br />
<kwa>def</kwa> <def></def><kwd>main</kwd><def></def><sym>():</sym><br />
<def>    n</def> <sym>=</sym> <def></def><kwb>int</kwb><def></def><sym>(</sym><def>sys</def><sym>.</sym><def>argv</def><sym>[</sym><def></def><num>1</num><def></def><sym>])</sym><br />
<def></def>    <kwd>print_color_changes</kwd><def></def><sym>()</sym><br />
<def></def>    <kwd>simulate</kwd><def></def><sym>([</sym><def>blue</def><sym>,</sym> <def>red</def><sym>,</sym> <def>yellow</def><sym>],</sym> <def>n</def><sym>)</sym><br />
<def></def>    <kwd>simulate</kwd><def></def><sym>([</sym><def>blue</def><sym>,</sym> <def>red</def><sym>,</sym> <def>yellow</def><sym>,</sym> <def>red</def><sym>,</sym> <def>yellow</def><sym>,</sym> <def>blue</def><sym>,</sym> <def>red</def><sym>,</sym> <def>yellow</def><sym>,</sym> <def>red</def><sym>,</sym> <def>blue</def><sym>],</sym> <def>n</def><sym>)</sym><br />
<def></def><br />
<kwd>main</kwd><def></def><sym>()</sym><def></def><br />
</source>
