<source>
<def></def><com>/* The Computer Language Shootout</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com>   contributed by Isaac Gouy</com><br />
<com>*/</com><def></def><br />
<br />
<kwa>import</kwa> <def>java</def><sym>.</sym><def>io</def><sym>.*;</sym><br />
<def></def><br />
<kwb>void</kwb> <def>main</def><sym>(</sym><def>String</def><sym>[]</sym> <def>args</def><sym>){</sym><br />
<def></def><br />
   <kwa>let</kwa> <def>ALU</def> <sym>=</sym><br />
<def></def>      <str>&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</str><def></def> <sym>+</sym><br />
<def></def>      <str>&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</str><def></def> <sym>+</sym><br />
<def></def>      <str>&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</str><def></def> <sym>+</sym><br />
<def></def>      <str>&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</str><def></def> <sym>+</sym><br />
<def></def>      <str>&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</str><def></def> <sym>+</sym><br />
<def></def>      <str>&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</str><def></def> <sym>+</sym><br />
<def></def>      <str>&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</str><def></def><sym>;</sym><br />
<def></def><br />
   <kwa>let</kwa> <def>IUB</def> <sym>= [</sym><br />
<def></def>      <kwa>new</kwa> <def>Frequency</def><sym>(</sym><def>code</def><sym>:</sym> <def></def><str>&quot;a&quot;</str><def></def><sym>,</sym> <def>percent</def><sym>:</sym> <def></def><num>0.27</num><def></def><sym>),</sym><br />
<def></def>      <kwa>new</kwa> <def>Frequency</def><sym>(</sym><def>code</def><sym>:</sym> <def></def><str>&quot;c&quot;</str><def></def><sym>,</sym> <def>percent</def><sym>:</sym> <def></def><num>0.12</num><def></def><sym>),</sym><br />
<def></def>      <kwa>new</kwa> <def>Frequency</def><sym>(</sym><def>code</def><sym>:</sym> <def></def><str>&quot;g&quot;</str><def></def><sym>,</sym> <def>percent</def><sym>:</sym> <def></def><num>0.12</num><def></def><sym>),</sym><br />
<def></def>      <kwa>new</kwa> <def>Frequency</def><sym>(</sym><def>code</def><sym>:</sym> <def></def><str>&quot;t&quot;</str><def></def><sym>,</sym> <def>percent</def><sym>:</sym> <def></def><num>0.27</num><def></def><sym>),</sym><br />
<def></def><br />
      <kwa>new</kwa> <def>Frequency</def><sym>(</sym><def>code</def><sym>:</sym> <def></def><str>&quot;B&quot;</str><def></def><sym>,</sym> <def>percent</def><sym>:</sym> <def></def><num>0.02</num><def></def><sym>),</sym><br />
<def></def>      <kwa>new</kwa> <def>Frequency</def><sym>(</sym><def>code</def><sym>:</sym> <def></def><str>&quot;D&quot;</str><def></def><sym>,</sym> <def>percent</def><sym>:</sym> <def></def><num>0.02</num><def></def><sym>),</sym><br />
<def></def>      <kwa>new</kwa> <def>Frequency</def><sym>(</sym><def>code</def><sym>:</sym> <def></def><str>&quot;H&quot;</str><def></def><sym>,</sym> <def>percent</def><sym>:</sym> <def></def><num>0.02</num><def></def><sym>),</sym><br />
<def></def>      <kwa>new</kwa> <def>Frequency</def><sym>(</sym><def>code</def><sym>:</sym> <def></def><str>&quot;K&quot;</str><def></def><sym>,</sym> <def>percent</def><sym>:</sym> <def></def><num>0.02</num><def></def><sym>),</sym><br />
<def></def>      <kwa>new</kwa> <def>Frequency</def><sym>(</sym><def>code</def><sym>:</sym> <def></def><str>&quot;M&quot;</str><def></def><sym>,</sym> <def>percent</def><sym>:</sym> <def></def><num>0.02</num><def></def><sym>),</sym><br />
<def></def>      <kwa>new</kwa> <def>Frequency</def><sym>(</sym><def>code</def><sym>:</sym> <def></def><str>&quot;N&quot;</str><def></def><sym>,</sym> <def>percent</def><sym>:</sym> <def></def><num>0.02</num><def></def><sym>),</sym><br />
<def></def>      <kwa>new</kwa> <def>Frequency</def><sym>(</sym><def>code</def><sym>:</sym> <def></def><str>&quot;R&quot;</str><def></def><sym>,</sym> <def>percent</def><sym>:</sym> <def></def><num>0.02</num><def></def><sym>),</sym><br />
<def></def>      <kwa>new</kwa> <def>Frequency</def><sym>(</sym><def>code</def><sym>:</sym> <def></def><str>&quot;S&quot;</str><def></def><sym>,</sym> <def>percent</def><sym>:</sym> <def></def><num>0.02</num><def></def><sym>),</sym><br />
<def></def>      <kwa>new</kwa> <def>Frequency</def><sym>(</sym><def>code</def><sym>:</sym> <def></def><str>&quot;V&quot;</str><def></def><sym>,</sym> <def>percent</def><sym>:</sym> <def></def><num>0.02</num><def></def><sym>),</sym><br />
<def></def>      <kwa>new</kwa> <def>Frequency</def><sym>(</sym><def>code</def><sym>:</sym> <def></def><str>&quot;W&quot;</str><def></def><sym>,</sym> <def>percent</def><sym>:</sym> <def></def><num>0.02</num><def></def><sym>),</sym><br />
<def></def>      <kwa>new</kwa> <def>Frequency</def><sym>(</sym><def>code</def><sym>:</sym> <def></def><str>&quot;Y&quot;</str><def></def><sym>,</sym> <def>percent</def><sym>:</sym> <def></def><num>0.02</num><def></def><sym>)</sym><br />
<def></def>   <sym>];</sym><br />
<def></def><br />
   <kwa>let</kwa> <def>HomoSapiens</def> <sym>= [</sym><br />
<def></def>      <kwa>new</kwa> <def>Frequency</def><sym>(</sym><def>code</def><sym>:</sym> <def></def><str>&quot;a&quot;</str><def></def><sym>,</sym> <def>percent</def><sym>:</sym> <def></def><num>0.3029549426680</num><def></def><sym>),</sym><br />
<def></def>      <kwa>new</kwa> <def>Frequency</def><sym>(</sym><def>code</def><sym>:</sym> <def></def><str>&quot;c&quot;</str><def></def><sym>,</sym> <def>percent</def><sym>:</sym> <def></def><num>0.1979883004921</num><def></def><sym>),</sym><br />
<def></def>      <kwa>new</kwa> <def>Frequency</def><sym>(</sym><def>code</def><sym>:</sym> <def></def><str>&quot;g&quot;</str><def></def><sym>,</sym> <def>percent</def><sym>:</sym> <def></def><num>0.1975473066391</num><def></def><sym>),</sym><br />
<def></def>      <kwa>new</kwa> <def>Frequency</def><sym>(</sym><def>code</def><sym>:</sym> <def></def><str>&quot;t&quot;</str><def></def><sym>,</sym> <def>percent</def><sym>:</sym> <def></def><num>0.3015094502008</num><def></def><sym>)</sym><br />
<def></def>   <sym>];</sym><br />
<def><br />
<br />
   makeCumulative</def><sym>(</sym><def>HomoSapiens</def><sym>);</sym><br />
<def>   makeCumulative</def><sym>(</sym><def>IUB</def><sym>);</sym><br />
<def></def><br />
   <kwa>var</kwa> <def>n</def> <sym>=</sym> <def>Integer</def><sym>.</sym><def>parseInt</def><sym>(</sym><def>args</def><sym>[</sym><def></def><num>0</num><def></def><sym>]);</sym><br />
<def></def>   <kwa>let</kwa> <def>w</def> <sym>=</sym> <def></def><kwa>new</kwa> <def>BufferedWriter</def><sym>(</sym><def></def><kwa>new</kwa> <def>OutputStreamWriter</def><sym>(</sym><def>System</def><sym>.</sym><def>out</def><sym>));</sym><br />
<def><br />
   makeRepeatFasta</def><sym>(</sym><def></def><str>&quot;ONE&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;Homo sapiens alu&quot;</str><def></def><sym>,</sym> <def>ALU</def><sym>,</sym> <def>n</def><sym>*</sym><def></def><num>2</num><def></def><sym>,</sym> <def>w</def><sym>);</sym><br />
<def>   makeRandomFasta</def><sym>(</sym><def></def><str>&quot;TWO&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;IUB ambiguity codes&quot;</str><def></def><sym>,</sym> <def>IUB</def><sym>,</sym> <def>n</def><sym>*</sym><def></def><num>3</num><def></def><sym>,</sym> <def>w</def><sym>);</sym><br />
<def>   makeRandomFasta</def><sym>(</sym><def></def><str>&quot;THREE&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;Homo sapiens frequency&quot;</str><def></def><sym>,</sym> <def>HomoSapiens</def><sym>,</sym> <def>n</def><sym>*</sym><def></def><num>5</num><def></def><sym>,</sym> <def>w</def><sym>);</sym><br />
<def><br />
   w</def><sym>.</sym><def>close</def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<br />
<kwa>class</kwa> <def>Frequency</def> <sym>{</sym> <def>String code</def><sym>;</sym> <def></def><kwb>double</kwb> <def>percent</def><sym>; }</sym><br />
<def></def><br />
<kwb>void</kwb> <def>makeCumulative</def><sym>(</sym><def>Frequency</def><sym>[]</sym> <def>array</def><sym>) {</sym><br />
<def></def>   <kwa>var</kwa> <def>cp</def> <sym>=</sym> <def></def><num>0.0</num><def></def><sym>;</sym><br />
<def></def>   <kwa>for</kwa> <def></def><sym>(</sym><def>frequency</def> <sym>:</sym> <def>array</def><sym>) {</sym><br />
<def>      cp</def> <sym>+=</sym> <def>frequency</def><sym>.</sym><def>percent</def><sym>;</sym><br />
<def>      frequency</def><sym>.</sym><def>percent</def> <sym>=</sym> <def>cp</def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def><br />
String selectRandom</def><sym>(</sym><def>Frequency</def><sym>[]</sym> <def>a</def><sym>) {</sym><br />
<def></def>   <kwa>let</kwa> <def>r</def> <sym>=</sym> <def>randomNumber</def><sym>(</sym><def></def><num>1.0</num><def></def><sym>);</sym><br />
<def></def>   <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>a</def><sym>.</sym><def>length</def><sym>;</sym> <def>i</def><sym>++)</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>r</def> <sym>&lt;</sym> <def>a</def><sym>[</sym><def>i</def><sym>].</sym><def>percent</def><sym>)</sym> <def></def><kwa>return</kwa> <def>a</def><sym>[</sym><def>i</def><sym>].</sym><def>code</def><sym>;</sym><br />
<def></def>   <kwa>return</kwa> <def>a</def><sym>[</sym><def>a</def><sym>.</sym><def>length</def><sym>-</sym><def></def><num>1</num><def></def><sym>].</sym><def>code</def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<br />
<kwa>let</kwa> <def></def><kwb>int</kwb> <def>LineLength</def> <sym>=</sym> <def></def><num>60</num><def></def><sym>;</sym><br />
<def></def><br />
<kwb>void</kwb> <def>makeRandomFasta</def><sym>(</sym><def>String id</def><sym>,</sym> <def>String desc</def><sym>,</sym> <def>Frequency</def><sym>[]</sym> <def>a</def><sym>,</sym> <def></def><kwb>int</kwb> <def>n</def><sym>,</sym> <def>BufferedWriter w</def><sym>) {</sym><br />
<def></def>   <kwa>var</kwa> <def>m</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>   w</def><sym>.</sym><def>write</def><sym>(</sym><def></def><str>&quot;&gt;&quot;</str><def></def> <sym>+</sym> <def>id</def> <sym>+</sym> <def></def><str>&quot; &quot;</str><def></def> <sym>+</sym> <def>desc</def> <sym>+</sym> <def></def><str>&quot;\n&quot;</str><def></def><sym>);</sym><br />
<def></def><br />
   <kwa>while</kwa> <def></def><sym>(</sym><def>n</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>) {</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>n</def> <sym>&lt;</sym> <def>LineLength</def><sym>)</sym> <def>m</def> <sym>=</sym> <def>n</def><sym>;</sym> <def></def><kwa>else</kwa> <def>m</def> <sym>=</sym> <def>LineLength</def><sym>;</sym><br />
<def></def>      <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>i</def><sym>&lt;</sym><def>m</def><sym>;</sym> <def>i</def><sym>++)</sym> <def>w</def><sym>.</sym><def>write</def><sym>(</sym><def>selectRandom</def><sym>(</sym><def>a</def><sym>));</sym><br />
<def>      w</def><sym>.</sym><def>newLine</def><sym>();</sym><br />
<def>      n</def> <sym>-=</sym> <def>LineLength</def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>void</kwb> <def>makeRepeatFasta</def><sym>(</sym><def>String id</def><sym>,</sym> <def>String desc</def><sym>,</sym> <def>String alu</def><sym>,</sym> <def></def><kwb>int</kwb> <def>n</def><sym>,</sym> <def>BufferedWriter w</def><sym>) {</sym><br />
<def></def>   <kwa>var</kwa> <def>m</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def></def><kwa>var</kwa> <def>k</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def></def><kwa>let</kwa> <def>kn</def> <sym>=</sym> <def>alu</def><sym>.</sym><def>length</def><sym>;</sym><br />
<def>   w</def><sym>.</sym><def>write</def><sym>(</sym><def></def><str>&quot;&gt;&quot;</str><def></def> <sym>+</sym> <def>id</def> <sym>+</sym> <def></def><str>&quot; &quot;</str><def></def> <sym>+</sym> <def>desc</def> <sym>+</sym> <def></def><str>&quot;\n&quot;</str><def></def><sym>);</sym><br />
<def></def><br />
   <kwa>while</kwa> <def></def><sym>(</sym><def>n</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>) {</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>n</def> <sym>&lt;</sym> <def>LineLength</def><sym>)</sym> <def>m</def> <sym>=</sym> <def>n</def><sym>;</sym> <def></def><kwa>else</kwa> <def>m</def> <sym>=</sym> <def>LineLength</def><sym>;</sym><br />
<def></def>      <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>i</def><sym>&lt;</sym><def>m</def><sym>;</sym> <def>i</def><sym>++){</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>k</def> <sym>==</sym> <def>kn</def><sym>)</sym> <def>k</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>         w</def><sym>.</sym><def>write</def><sym>(</sym><def>alu</def><sym>,</sym><def>k</def><sym>,</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def>         k</def><sym>++;</sym><br />
<def></def>      <sym>}</sym><br />
<def>      w</def><sym>.</sym><def>newLine</def><sym>();</sym><br />
<def>      n</def> <sym>-=</sym> <def>LineLength</def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<br />
<slc>// random numbers</slc><br />
<def></def><br />
<kwa>let</kwa> <def></def><kwb>int</kwb> <def>IM</def> <sym>=</sym> <def></def><num>139968</num><def></def><sym>;</sym><br />
<def></def><kwa>let</kwa> <def></def><kwb>int</kwb> <def>IA</def> <sym>=</sym> <def></def><num>3877</num><def></def><sym>;</sym><br />
<def></def><kwa>let</kwa> <def></def><kwb>int</kwb> <def>IC</def> <sym>=</sym> <def></def><num>29573</num><def></def><sym>;</sym><br />
<def></def><kwa>var</kwa> <def></def><kwb>int</kwb> <def>seed</def> <sym>=</sym> <def></def><num>42</num><def></def><sym>;</sym><br />
<def></def><br />
<kwb>double</kwb> <def>randomNumber</def><sym>(</sym><def></def><kwb>double</kwb> <def>max</def><sym>) {</sym><br />
<def>   seed</def> <sym>= (</sym><def>seed</def> <sym>*</sym> <def>IA</def> <sym>+</sym> <def>IC</def><sym>) %</sym> <def>IM</def><sym>;</sym><br />
<def></def>   <kwa>return</kwa><def></def><sym>(</sym> <def>max</def> <sym>*</sym> <def>seed</def> <sym>/</sym> <def>IM</def> <sym>);</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
