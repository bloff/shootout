<source>
<def></def><com>{ The Computer Language Benchmarks Game</com><br />
<com>  http://shootout.alioth.debian.org</com><br />
<com></com><br />
<com>  contributed by Steve Fisher</com><br />
<com>  modified by Peter Vreman</com><br />
<com>  modified by Steve Fisher</com><br />
<com>}</com><def></def><br />
<br />
<slc>// This version allows * search.</slc><br />
<def></def><br />
<br />
<kwa>const</kwa><br />
<def>  patterns</def> <sym>:</sym> <def></def><kwa>array</kwa><def></def><sym>[</sym><def></def><num>1</num><def></def><sym>.</sym><def></def><num>.9</num><def></def><sym>]</sym> <def></def><kwa>of string</kwa><def></def><sym>[</sym><def></def><num>255</num><def></def><sym>] =</sym><br />
<def></def>    <sym>(</sym><br />
<def></def>      <str>'agggtaaa|tttaccct'</str><def></def><sym>,</sym><br />
<def></def>      <str>'[cgt]gggtaaa|tttaccc[acg]'</str><def></def><sym>,</sym><br />
<def></def>      <str>'a[act]ggtaaa|tttacc[agt]t'</str><def></def><sym>,</sym><br />
<def></def>      <str>'ag[act]gtaaa|tttac[agt]ct'</str><def></def><sym>,</sym><br />
<def></def>      <str>'agg[act]taaa|ttta[agt]cct'</str><def></def><sym>,</sym><br />
<def></def>      <str>'aggg[acg]aaa|ttt[cgt]ccct'</str><def></def><sym>,</sym><br />
<def></def>      <str>'agggt[cgt]aa|tt[acg]accct'</str><def></def><sym>,</sym><br />
<def></def>      <str>'agggta[cgt]a|t[acg]taccct'</str><def></def><sym>,</sym><br />
<def></def>      <str>'agggtaa[cgt]|[acg]ttaccct'</str><def></def><br />
    <sym>);</sym><br />
<def>  replacements</def> <sym>:</sym> <def></def><kwa>array</kwa><def></def><sym>[</sym><def></def><num>0</num><def></def><sym>.</sym><def></def><num>.10</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>.</sym><def></def><num>.1</num><def></def><sym>]</sym> <def></def><kwa>of string</kwa><def></def><sym>[</sym><def></def><num>15</num><def></def><sym>] =</sym><br />
<def></def>  <sym>(</sym><br />
<def></def>    <sym>(</sym><def></def><str>'B'</str><def></def><sym>,</sym> <def></def><str>'(c|g|t)'</str><def></def><sym>), (</sym><def></def><str>'D'</str><def></def><sym>,</sym> <def></def><str>'(a|g|t)'</str><def></def><sym>), (</sym><def></def><str>'H'</str><def></def><sym>,</sym> <def></def><str>'(a|c|t)'</str><def></def><sym>), (</sym><def></def><str>'K'</str><def></def><sym>,</sym> <def></def><str>'(g|t)'</str><def></def><sym>),</sym><br />
<def></def>    <sym>(</sym><def></def><str>'M'</str><def></def><sym>,</sym> <def></def><str>'(a|c)'</str><def></def><sym>), (</sym><def></def><str>'N'</str><def></def><sym>,</sym> <def></def><str>'(a|c|g|t)'</str><def></def><sym>), (</sym><def></def><str>'R'</str><def></def><sym>,</sym> <def></def><str>'(a|g)'</str><def></def><sym>), (</sym><def></def><str>'S'</str><def></def><sym>,</sym> <def></def><str>'(c|t)'</str><def></def><sym>),</sym><br />
<def></def>    <sym>(</sym><def></def><str>'V'</str><def></def><sym>,</sym> <def></def><str>'(a|c|g)'</str><def></def><sym>), (</sym><def></def><str>'W'</str><def></def><sym>,</sym> <def></def><str>'(a|t)'</str><def></def><sym>), (</sym><def></def><str>'Y'</str><def></def><sym>,</sym> <def></def><str>'(c|t)'</str><def></def><sym>)</sym><br />
<def></def>  <sym>);</sym><br />
<def></def><br />
<br />
<kwa>type</kwa><br />
<def>  skip_type</def> <sym>=</sym> <def></def><kwa>array</kwa><def></def><sym>[</sym><def></def><kwd>low</kwd><def></def><sym>(</sym><def></def><kwb>char</kwb><def></def><sym>) ..</sym> <def></def><kwd>high</kwd><def></def><sym>(</sym><def></def><kwb>char</kwb><def></def><sym>)]</sym> <def></def><kwa>of</kwa> <def></def><kwb>integer</kwb><def></def><sym>;</sym><br />
<def>  TRegexEngine</def> <sym>=</sym> <def></def><kwa>record</kwa><br />
<def>    left</def><sym>,</sym> <def>right</def><sym>,</sym> <def>starred</def><sym>:</sym> <def></def><kwa>string</kwa><def></def><sym>[</sym><def></def><num>255</num><def></def><sym>];</sym><br />
<def>    size</def><sym>:</sym> <def></def><kwb>longint</kwb><def></def><sym>;</sym><br />
<def>    cclass</def><sym>:</sym> <def></def><kwa>set of</kwa> <def></def><kwb>char</kwb><def></def><sym>;</sym><br />
<def>    skip</def><sym>:</sym> <def>skip_type</def><sym>;</sym><br />
<def>    simple</def><sym>:</sym> <def></def><kwb>boolean</kwb><def></def><sym>;</sym><br />
<def></def>  <kwa>end</kwa><def></def><sym>;</sym><br />
<def>  t_escaped</def> <sym>=</sym> <def></def><kwa>array</kwa><def></def><sym>[</sym><def></def><num>1</num><def></def><sym>.</sym><def></def><num>.255</num><def></def><sym>]</sym> <def></def><kwa>of</kwa> <def></def><kwb>boolean</kwb><def></def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def></def><kwd>rx_mark_escapes</kwd><def></def><sym>(</sym> <def></def><kwa>const</kwa> <def>str</def><sym>:</sym><def></def><kwa>string</kwa><def></def><sym>[</sym><def></def><num>255</num><def></def><sym>];</sym> <def></def><kwa>var</kwa> <def>dest</def><sym>:</sym> <def></def><kwa>string</kwa><def></def><sym>[</sym><def></def><num>255</num><def></def><sym>];</sym><br />
<def></def>                  <kwa>var</kwa> <def>escaped</def><sym>:</sym> <def>t_escaped</def><sym>);</sym><br />
<def></def><kwa>var</kwa><br />
<def>  i</def><sym>:</sym> <def></def><kwb>longint</kwb><def></def><sym>;</sym><br />
<def>  flag</def><sym>:</sym> <def></def><kwb>boolean</kwb><def></def><sym>;</sym><br />
<def></def><kwa>begin</kwa><br />
<def>  dest</def> <sym>:=</sym> <def></def><str>''</str><def></def><sym>;</sym>   <def>flag</def> <sym>:=</sym> <def></def><kwb>false</kwb><def></def><sym>;</sym>   <def>i</def> <sym>:=</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>  <kwa>while</kwa> <def>i</def> <sym>&lt;=</sym> <def></def><kwd>length</kwd><def></def><sym>(</sym><def>str</def><sym>)</sym> <def></def><kwa>do</kwa><br />
<def></def>  <kwa>begin</kwa><br />
<def></def>    <kwa>if</kwa>  <def></def><sym>(</sym><def></def><str>'\'</str><def></def> <sym>=</sym> <def>str</def><sym>[</sym><def>i</def><sym>])</sym> <def></def><kwa>and</kwa> <def></def><sym>(</sym><def>i</def> <sym>&lt;</sym> <def></def><kwd>length</kwd><def></def><sym>(</sym><def>str</def><sym>))</sym> <def></def><kwa>then</kwa><br />
<def></def>      <kwa>begin</kwa>   <def></def><kwd>inc</kwd><def></def><sym>(</sym><def>i</def><sym>);</sym>   <def>flag</def> <sym>:=</sym> <def></def><kwb>true</kwb>   <def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def>    dest</def> <sym>+=</sym> <def>str</def><sym>[</sym><def>i</def><sym>];</sym><br />
<def>    escaped</def><sym>[</sym> <def></def><kwd>length</kwd><def></def><sym>(</sym><def>dest</def><sym>) ] :=</sym> <def>flag</def><sym>;</sym><br />
<def>    flag</def> <sym>:=</sym> <def></def><kwb>false</kwb><def></def><sym>;</sym><br />
<def></def>    <kwd>inc</kwd><def></def><sym>(</sym><def>i</def><sym>)</sym><br />
<def></def>  <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def></def><kwd>rx_parse_pat</kwd><def></def><sym>(</sym> <def></def><kwa>const</kwa> <def>str</def><sym>:</sym> <def></def><kwa>string</kwa><def></def><sym>[</sym><def></def><num>255</num><def></def><sym>];</sym><br />
<def></def>                        <kwa>var</kwa> <def>left</def><sym>,</sym> <def>middle</def><sym>,</sym> <def>right</def><sym>:</sym> <def></def><kwa>string</kwa><def></def><sym>[</sym><def></def><num>255</num><def></def><sym>]);</sym><br />
<def></def><kwa>var</kwa><br />
<def>  temp</def><sym>:</sym> <def></def><kwa>string</kwa><def></def><sym>[</sym><def></def><num>255</num><def></def><sym>];</sym><br />
<def>  escaped</def><sym>:</sym> <def>t_escaped</def><sym>;</sym><br />
<def>  i</def><sym>,</sym><def>j</def><sym>:</sym> <def></def><kwb>longint</kwb><def></def><sym>;</sym><br />
<def></def><kwa>begin</kwa><br />
<def></def>  <kwd>rx_mark_escapes</kwd><def></def><sym>(</sym> <def>str</def><sym>,</sym> <def>temp</def><sym>,</sym> <def>escaped</def> <sym>);</sym><br />
<def>  left</def> <sym>:=</sym> <def>temp</def><sym>;</sym>   <def>middle</def> <sym>:=</sym> <def></def><str>''</str><def></def><sym>;</sym>   <def>right</def> <sym>:=</sym> <def></def><str>''</str><def></def><sym>;</sym><br />
<def></def>  <kwa>for</kwa> <def>i</def> <sym>:=</sym> <def></def><num>1</num> <def></def><kwa>to</kwa> <def></def><kwd>length</kwd><def></def><sym>(</sym><def>temp</def><sym>)</sym> <def></def><kwa>do</kwa><br />
<def></def>    <kwa>if not</kwa> <def>escaped</def><sym>[</sym><def>i</def><sym>]</sym> <def></def><kwa>then</kwa><br />
<def></def>      <kwa>if</kwa> <def></def><str>'['</str><def></def> <sym>=</sym> <def>temp</def><sym>[</sym><def>i</def><sym>]</sym> <def></def><kwa>then</kwa><br />
<def></def>      <kwa>begin</kwa><br />
<def>        j</def> <sym>:=</sym> <def>i</def><sym>+</sym><def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>        <kwa>while not</kwa> <def></def><sym>((</sym><def>temp</def><sym>[</sym><def>j</def><sym>]=</sym><def></def><str>']'</str><def></def><sym>)</sym> <def></def><kwa>and not</kwa> <def>escaped</def><sym>[</sym><def>j</def><sym>])</sym> <def></def><kwa>do</kwa><br />
<def></def>          <kwd>inc</kwd><def></def><sym>(</sym><def>j</def><sym>);</sym><br />
<def>        left</def> <sym>:=</sym> <def></def><kwd>copy</kwd><def></def><sym>(</sym><def>temp</def><sym>,</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>i</def><sym>-</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def>        right</def> <sym>:=</sym> <def></def><kwd>copy</kwd><def></def><sym>(</sym><def>temp</def><sym>,</sym> <def>j</def><sym>+</sym><def></def><num>1</num><def></def><sym>,</sym> <def></def><kwd>length</kwd><def></def><sym>(</sym><def>temp</def><sym>) -</sym> <def>j</def><sym>);</sym><br />
<def>        middle</def> <sym>:=</sym> <def></def><kwd>copy</kwd><def></def><sym>(</sym><def>temp</def><sym>,</sym> <def>i</def><sym>,</sym> <def>j</def> <sym>-</sym> <def>i</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def>        break</def><sym>;</sym><br />
<def></def>      <kwa>end</kwa><br />
<def></def>      <kwa>else if</kwa> <def></def><sym>(</sym><def></def><str>'*'</str><def></def> <sym>=</sym> <def>temp</def><sym>[</sym><def>i</def><sym>])</sym> <def></def><kwa>and</kwa> <def></def><sym>(</sym><def>i</def><sym>&gt;</sym><def></def><num>1</num><def></def><sym>)</sym> <def></def><kwa>then</kwa><br />
<def></def>      <kwa>begin</kwa><br />
<def>        left</def> <sym>:=</sym> <def></def><kwd>copy</kwd><def></def><sym>(</sym><def>temp</def><sym>,</sym><def></def><num>1</num><def></def><sym>,</sym> <def>i</def><sym>-</sym><def></def><num>2</num><def></def><sym>);</sym><br />
<def>        right</def> <sym>:=</sym> <def></def><kwd>copy</kwd><def></def><sym>(</sym><def>temp</def><sym>,</sym> <def>i</def><sym>+</sym><def></def><num>1</num><def></def><sym>,</sym> <def></def><kwd>length</kwd><def></def><sym>(</sym><def>temp</def><sym>) -</sym> <def>i</def><sym>);</sym><br />
<def></def>        <kwa>if</kwa> <def>escaped</def><sym>[</sym><def>i</def><sym>-</sym><def></def><num>1</num><def></def><sym>]</sym> <def></def><kwa>then</kwa>  <def>middle</def> <sym>:=</sym> <def></def><str>'\'</str><def></def><sym>;</sym><br />
<def>        middle</def> <sym>+=</sym> <def>temp</def><sym>[</sym><def>i</def><sym>-</sym><def></def><num>1</num><def></def><sym>];</sym><br />
<def>        break</def><sym>;</sym><br />
<def></def>      <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<br />
<kwa>function</kwa> <def></def><kwd>RegexCreate</kwd><def></def><sym>(</sym> <def>pat</def><sym>:</sym> <def>pchar</def> <sym>):</sym> <def>TRegexEngine</def><sym>;</sym><br />
<def></def><kwa>var</kwa><br />
<def>  i</def><sym>:</sym> <def></def><kwb>longint</kwb><def></def><sym>;</sym><br />
<def>  str</def><sym>,</sym> <def>middle</def> <sym>:</sym> <def></def><kwa>string</kwa><def></def><sym>[</sym><def></def><num>255</num><def></def><sym>];</sym><br />
<def>  ch</def><sym>:</sym> <def></def><kwb>char</kwb><def></def><sym>;</sym><br />
<def></def><kwa>begin</kwa><br />
<def></def>  <kwa>with</kwa> <def>RegexCreate</def> <kwa>do</kwa><br />
<def></def>  <kwa>begin</kwa><br />
<def>    cclass</def> <sym>:= [];</sym><br />
<def>    str</def> <sym>:=</sym> <def>pat</def><sym>;</sym><br />
<def></def>    <kwd>rx_parse_pat</kwd><def></def><sym>(</sym> <def>str</def><sym>,</sym> <def>left</def><sym>,</sym> <def>middle</def><sym>,</sym> <def>right</def> <sym>);</sym><br />
<def></def>    <kwa>if</kwa> <def></def><sym>(</sym><def></def><str>'['</str><def></def> <sym>=</sym> <def>middle</def><sym>[</sym><def></def><num>1</num><def></def><sym>])</sym> <def></def><kwa>and</kwa> <def></def><sym>(</sym><def></def><str>']'</str><def></def> <sym>=</sym> <def>middle</def><sym>[</sym><def></def><kwd>length</kwd><def></def><sym>(</sym><def>middle</def><sym>)])</sym> <def></def><kwa>then</kwa><br />
<def></def>    <kwa>begin</kwa><br />
<def></def>      <kwa>for</kwa> <def>i</def> <sym>:=</sym> <def></def><num>2</num> <def></def><kwa>to</kwa> <def></def><kwd>length</kwd><def></def><sym>(</sym><def>middle</def><sym>) -</sym> <def></def><num>1</num> <def></def><kwa>do</kwa><br />
<def>        cclass</def> <sym>:=</sym> <def>cclass</def> <sym>+ [</sym> <def>middle</def><sym>[</sym><def>i</def><sym>] ];</sym><br />
<def>      size</def> <sym>:=</sym> <def></def><kwd>length</kwd><def></def><sym>(</sym><def>left</def><sym>) +</sym> <def></def><num>1</num> <def></def><sym>+</sym> <def></def><kwd>length</kwd><def></def><sym>(</sym><def>right</def><sym>);</sym><br />
<def>      simple</def> <sym>:=</sym> <def></def><kwb>false</kwb><def></def><sym>;</sym><br />
<def></def>    <kwa>end</kwa><br />
<def></def>    <kwa>else if</kwa> <def>middle</def> <sym>&lt;&gt;</sym> <def></def><str>''</str><def></def> <kwa>then</kwa><br />
<def></def>    <kwa>begin</kwa><br />
<def>      simple</def> <sym>:=</sym> <def></def><kwb>false</kwb><def></def><sym>;</sym><br />
<def>      size</def> <sym>:=</sym> <def></def><kwd>length</kwd><def></def><sym>(</sym><def>left</def><sym>) +</sym> <def></def><kwd>length</kwd><def></def><sym>(</sym><def>right</def><sym>);</sym><br />
<def></def>      <kwa>if</kwa> <def></def><str>'\'</str><def></def> <sym>=</sym> <def>middle</def><sym>[</sym><def></def><num>1</num><def></def><sym>]</sym> <def></def><kwa>then</kwa><br />
<def>        starred</def> <sym>:=</sym> <def>middle</def><sym>[</sym><def></def><num>2</num><def></def><sym>]</sym><br />
<def></def>      <kwa>else if</kwa> <def></def><str>'.'</str><def></def> <sym>=</sym> <def>middle</def> <kwa>then</kwa><br />
<def>        starred</def> <sym>:=</sym> <def></def><str>''</str><def></def><br />
      <kwa>else</kwa><br />
<def>        starred</def> <sym>:=</sym> <def>middle</def><br />
    <kwa>end</kwa><br />
<def></def>    <kwa>else</kwa><br />
<def></def>    <kwa>begin</kwa><br />
<def>      simple</def> <sym>:=</sym> <def></def><kwb>true</kwb><def></def><sym>;</sym><br />
<def>      size</def> <sym>:=</sym> <def></def><kwd>length</kwd><def></def><sym>(</sym> <def>left</def> <sym>);</sym><br />
<def></def>    <kwa>end</kwa><def></def><sym>;</sym><br />
<def>    str</def> <sym>:=</sym> <def>left</def><sym>;</sym><br />
<def></def>    <kwa>if</kwa> <def>simple</def> <kwa>or</kwa> <def></def><sym>(</sym><def>cclass</def> <sym>&lt;&gt; [])</sym> <def></def><kwa>then</kwa><br />
<def></def>      <kwa>if</kwa> <def></def><kwd>length</kwd><def></def><sym>(</sym><def>str</def><sym>) &lt;</sym> <def></def><kwd>length</kwd><def></def><sym>(</sym><def>right</def><sym>)</sym> <def></def><kwa>then</kwa>   <def>str</def> <sym>:=</sym> <def>right</def><sym>;</sym><br />
<def></def>    <kwa>if</kwa> <def>str</def> <sym>&lt;&gt;</sym> <def></def><str>''</str><def></def> <kwa>then</kwa><br />
<def></def>    <kwa>begin</kwa><br />
<def></def>      <slc>// Set up Boyer-Moore table for longer string.</slc><br />
<def></def>      <kwa>for</kwa> <def>ch</def> <sym>:=</sym> <def></def><kwd>low</kwd><def></def><sym>(</sym><def></def><kwb>char</kwb><def></def><sym>)</sym> <def></def><kwa>to</kwa> <def></def><kwd>high</kwd><def></def><sym>(</sym><def></def><kwb>char</kwb><def></def><sym>)</sym> <def></def><kwa>do</kwa><br />
<def>        skip</def><sym>[</sym><def>ch</def><sym>] :=</sym> <def></def><kwd>length</kwd><def></def><sym>(</sym><def>str</def><sym>);</sym><br />
<def></def>      <kwa>for</kwa> <def>i</def> <sym>:=</sym> <def></def><num>1</num> <def></def><kwa>to</kwa> <def></def><kwd>length</kwd><def></def><sym>(</sym><def>str</def><sym>) -</sym> <def></def><num>1</num> <def></def><kwa>do</kwa><br />
<def>        skip</def><sym>[</sym> <def>str</def><sym>[</sym><def>i</def><sym>] ] :=</sym> <def></def><kwd>length</kwd><def></def><sym>(</sym><def>str</def><sym>) -</sym> <def>i</def><sym>;</sym><br />
<def></def>    <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>  <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>function</kwa> <def></def><kwd>bm_search</kwd><def></def><sym>(</sym> <def></def><kwa>const</kwa> <def>pat</def><sym>:</sym> <def></def><kwa>string</kwa><def></def><sym>;</sym> <def></def><kwa>const</kwa> <def>skip</def><sym>:</sym> <def>skip_type</def><sym>;</sym><br />
<def>                    str</def><sym>:</sym> <def>pchar</def><sym>;</sym> <def>len</def><sym>:</sym> <def></def><kwb>longint</kwb> <def></def><sym>):</sym> <def>pchar</def><sym>;</sym><br />
<def></def><kwa>var</kwa><br />
<def>  i</def><sym>,</sym> <def>size</def><sym>:</sym> <def></def><kwb>longint</kwb><def></def><sym>;</sym><br />
<def>  where</def><sym>,</sym> <def>top</def><sym>,</sym> <def>p</def><sym>:</sym> <def>pchar</def><sym>;</sym><br />
<def></def><kwa>begin</kwa><br />
<def>  size</def> <sym>:=</sym> <def></def><kwd>length</kwd><def></def><sym>(</sym><def>pat</def><sym>);</sym><br />
<def></def>  <kwa>if</kwa> <def>size</def> <sym>=</sym> <def></def><num>0</num> <def></def><kwa>then</kwa><br />
<def></def>    <kwd>exit</kwd><def></def><sym>(</sym> <def>str</def> <sym>);</sym><br />
<def><br />
  where</def> <sym>:=</sym> <def>str</def> <sym>+</sym> <def>size</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def>  top</def> <sym>:=</sym> <def>str</def> <sym>+</sym> <def>len</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>  <kwa>while</kwa> <def>where</def> <sym>&lt;=</sym> <def>top</def> <kwa>do</kwa><br />
<def></def>  <kwa>begin</kwa><br />
<def>    p</def> <sym>:=</sym> <def>where</def><sym>;</sym><br />
<def>    i</def> <sym>:=</sym> <def>size</def><sym>;</sym><br />
<def></def>    <kwa>while</kwa> <def>i</def> <sym>&gt;</sym> <def></def><num>0</num> <def></def><kwa>do</kwa><br />
<def></def>      <kwa>if</kwa> <def>p</def><sym>^ =</sym> <def>pat</def><sym>[</sym><def>i</def><sym>]</sym> <def></def><kwa>then</kwa><br />
<def></def>      <kwa>begin</kwa><br />
<def></def>        <kwd>dec</kwd><def></def><sym>(</sym><def>i</def><sym>);</sym><br />
<def></def>        <kwd>dec</kwd><def></def><sym>(</sym><def>p</def><sym>);</sym><br />
<def></def>      <kwa>end</kwa><br />
<def></def>      <kwa>else</kwa><br />
<def>        break</def><sym>;</sym><br />
<def></def>    <kwa>if</kwa> <def>i</def> <sym>=</sym> <def></def><num>0</num> <def></def><kwa>then</kwa><br />
<def></def>      <kwd>exit</kwd><def></def><sym>(</sym> <def>p</def><sym>+</sym><def></def><num>1</num> <def></def><sym>);</sym><br />
<def>    where</def> <sym>+=</sym> <def>skip</def><sym>[</sym> <def>where</def><sym>^ ];</sym><br />
<def></def>  <kwa>end</kwa><def></def><sym>;</sym> <def></def><slc>// while</slc><br />
<def></def>  <kwd>exit</kwd><def></def><sym>(</sym> <def></def><kwa>nil</kwa> <def></def><sym>)</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<br />
<kwa>function</kwa> <def></def><kwd>str_eq</kwd><def></def><sym>(</sym> <def></def><kwa>const</kwa> <def>str</def><sym>:</sym> <def></def><kwa>string</kwa><def></def><sym>;</sym> <def>p</def><sym>:</sym> <def>pchar</def><sym>):</sym> <def></def><kwb>boolean</kwb><def></def><sym>;</sym> <def></def><kwa>inline</kwa><def></def><sym>;</sym><br />
<def></def><kwa>var</kwa> <def>i</def><sym>:</sym> <def></def><kwb>longint</kwb><def></def><sym>;</sym><br />
<def></def><kwa>begin</kwa><br />
<def></def>  <kwa>for</kwa> <def>i</def> <sym>:=</sym> <def></def><num>1</num> <def></def><kwa>to</kwa> <def></def><kwd>length</kwd><def></def><sym>(</sym><def>str</def><sym>)</sym> <def></def><kwa>do</kwa><br />
<def></def>  <kwa>begin</kwa><br />
<def></def>    <kwa>if</kwa> <def>str</def><sym>[</sym><def>i</def><sym>] &lt;&gt;</sym> <def>p</def><sym>^</sym> <def></def><kwa>then</kwa><br />
<def></def>      <kwd>exit</kwd><def></def><sym>(</sym> <def></def><kwb>false</kwb> <def></def><sym>);</sym><br />
<def></def>    <kwd>inc</kwd><def></def><sym>(</sym> <def>p</def> <sym>)</sym><br />
<def></def>  <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>  <kwd>exit</kwd><def></def><sym>(</sym> <def></def><kwb>true</kwb> <def></def><sym>)</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<br />
<slc>// Non-greedy.</slc><br />
<def></def><kwa>function</kwa> <def></def><kwd>rx_wild_match</kwd><def></def><sym>(</sym> <def></def><kwa>const</kwa> <def>skip_this</def><sym>,</sym> <def>stop_at</def><sym>:</sym> <def></def><kwa>string</kwa><def></def><sym>[</sym><def></def><num>255</num><def></def><sym>];</sym> <def>p</def><sym>:</sym> <def>pchar</def> <sym>):</sym> <def>pchar</def><sym>;</sym><br />
<def></def><kwa>var</kwa> <def>i</def><sym>:</sym> <def></def><kwb>longint</kwb><def></def><sym>;</sym><br />
<def></def><kwa>begin</kwa><br />
<def></def>  <kwa>while</kwa> <def></def><sym>(</sym><def>p</def> <sym>&lt;&gt;</sym> <def></def><kwa>nil</kwa><def></def><sym>)</sym> <def></def><kwa>and</kwa> <def></def><sym>(</sym> <def>p</def><sym>^ &lt;&gt;</sym> <def></def><esc>#0</esc> <def></def><sym>)</sym> <def></def><kwa>do</kwa><br />
<def></def>  <kwa>begin</kwa><br />
<def></def>    <kwa>if</kwa> <def></def><kwd>str_eq</kwd><def></def><sym>(</sym> <def>stop_at</def><sym>,</sym> <def>p</def> <sym>)</sym> <def></def><kwa>then</kwa><br />
<def></def>      <kwd>exit</kwd><def></def><sym>(</sym> <def>p</def> <sym>+</sym> <def></def><kwd>length</kwd><def></def><sym>(</sym><def>stop_at</def><sym>) )</sym><br />
<def></def>    <kwa>else if</kwa> <def></def><str>''</str><def></def> <sym>=</sym> <def>skip_this</def> <kwa>then</kwa><br />
<def></def>      <kwd>inc</kwd><def></def><sym>(</sym> <def>p</def> <sym>)</sym><br />
<def></def>    <kwa>else if</kwa> <def></def><kwd>str_eq</kwd><def></def><sym>(</sym> <def>skip_this</def><sym>,</sym> <def>p</def> <sym>)</sym> <def></def><kwa>then</kwa><br />
<def></def>      <kwa>for</kwa> <def>i</def> <sym>:=</sym> <def></def><num>1</num> <def></def><kwa>to</kwa> <def></def><kwd>length</kwd><def></def><sym>(</sym> <def>skip_this</def><sym>)</sym> <def></def><kwa>do</kwa><br />
<def></def>      <kwa>begin</kwa><br />
<def></def>        <kwd>inc</kwd><def></def><sym>(</sym><def>p</def><sym>);</sym><br />
<def></def>        <kwa>if</kwa> <def>p</def><sym>^ =</sym> <def></def><esc>#0</esc> <def></def><kwa>then</kwa><br />
<def></def>          <kwd>exit</kwd><def></def><sym>(</sym> <def></def><kwa>nil</kwa> <def></def><sym>);</sym><br />
<def></def>      <kwa>end</kwa><br />
<def></def>    <kwa>else</kwa><br />
<def></def>      <kwd>exit</kwd><def></def><sym>(</sym> <def></def><kwa>nil</kwa> <def></def><sym>);</sym><br />
<def></def>  <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>  <kwa>if</kwa> <def>stop_at</def> <sym>=</sym> <def></def><str>''</str><def></def> <kwa>then</kwa>  <def></def><kwd>exit</kwd><def></def><sym>(</sym> <def>p</def> <sym>);</sym><br />
<def></def>  <kwd>exit</kwd><def></def><sym>(</sym> <def></def><kwa>nil</kwa> <def></def><sym>)</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<br />
<br />
<kwa>function</kwa> <def></def><kwd>Regex_search</kwd><def></def><sym>(</sym> <def></def><kwa>const</kwa> <def>rx</def><sym>:</sym> <def>TRegexEngine</def><sym>;</sym> <def></def><kwa>const</kwa> <def>str</def><sym>:</sym> <def>ansistring</def><sym>;</sym><br />
<def>                       start</def><sym>:</sym> <def></def><kwb>longint</kwb><def></def><sym>;</sym>  <def></def><kwa>var</kwa> <def>index</def><sym>,</sym> <def>len</def><sym>:</sym> <def></def><kwb>longint</kwb><def></def><sym>):</sym> <def></def><kwb>boolean</kwb><def></def><sym>;</sym><br />
<def></def><kwa>var</kwa><br />
<def>  p</def><sym>,</sym> <def>last_p</def><sym>,</sym> <def>ceiling</def><sym>,</sym> <def>found_at</def><sym>,</sym> <def>just_past</def><sym>:</sym> <def>pchar</def><sym>;</sym><br />
<def>  remainder</def><sym>:</sym> <def></def><kwb>longint</kwb><def></def><sym>;</sym><br />
<def></def><kwa>begin</kwa><br />
<def>  p</def> <sym>:= @</sym><def>str</def><sym>[</sym><def>start</def><sym>];</sym><br />
<def>  last_p</def> <sym>:= @</sym><def>str</def><sym>[</sym><def></def><kwd>length</kwd><def></def><sym>(</sym><def>str</def><sym>)];</sym><br />
<def></def><br />
  <kwa>if</kwa> <def>rx</def><sym>.</sym><def>simple</def> <kwa>then</kwa><br />
<def></def>  <kwa>begin</kwa><br />
<def>    found_at</def> <sym>:=</sym> <def></def><kwd>bm_search</kwd><def></def><sym>(</sym> <def>rx</def><sym>.</sym><def>left</def><sym>,</sym> <def>rx</def><sym>.</sym><def>skip</def><sym>,</sym> <def>p</def><sym>,</sym> <def>last_p</def> <sym>-</sym> <def>p</def> <sym>+</sym> <def></def><num>1</num> <def></def><sym>);</sym><br />
<def></def>    <kwa>if</kwa> <def>found_at</def> <sym>&lt;&gt;</sym> <def></def><kwa>nil then</kwa><br />
<def></def>    <kwa>begin</kwa><br />
<def>      index</def> <sym>:=</sym> <def>found_at</def> <sym>- @</sym><def>str</def><sym>[</sym><def></def><num>1</num><def></def><sym>] +</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def>      len</def> <sym>:=</sym> <def>rx</def><sym>.</sym><def>size</def><sym>;</sym><br />
<def></def>      <kwd>exit</kwd><def></def><sym>(</sym> <def></def><kwb>true</kwb> <def></def><sym>);</sym><br />
<def></def>    <kwa>end</kwa><br />
<def></def>    <kwa>else</kwa><br />
<def></def>      <kwd>exit</kwd><def></def><sym>(</sym><def></def><kwb>false</kwb><def></def><sym>);</sym><br />
<def></def>  <kwa>end</kwa><def></def><sym>;</sym><br />
<def><br />
  ceiling</def> <sym>:=</sym> <def>last_p</def> <sym>-</sym> <def>rx</def><sym>.</sym><def>size</def> <sym>+</sym> <def></def><num>2</num><def></def><sym>;</sym><br />
<def></def><br />
  <slc>// Do a * search?</slc><br />
<def></def>  <kwa>if</kwa> <def>rx</def><sym>.</sym><def>cclass</def> <sym>= []</sym> <def></def><kwa>then</kwa><br />
<def></def>  <kwa>begin</kwa><br />
<def></def>    <kwa>while</kwa> <def>p</def> <sym>&lt;</sym> <def>ceiling</def> <kwa>do</kwa><br />
<def></def>    <kwa>begin</kwa><br />
<def>      found_at</def> <sym>:=</sym> <def></def><kwd>bm_search</kwd><def></def><sym>(</sym> <def>rx</def><sym>.</sym><def>left</def><sym>,</sym> <def>rx</def><sym>.</sym><def>skip</def><sym>,</sym> <def>p</def><sym>,</sym> <def>last_p</def> <sym>-</sym> <def>p</def> <sym>+</sym> <def></def><num>1</num> <def></def><sym>);</sym><br />
<def></def>      <kwa>if</kwa> <def>found_at</def> <sym>=</sym> <def></def><kwa>nil then</kwa><br />
<def></def>        <kwd>exit</kwd><def></def><sym>(</sym> <def></def><kwb>false</kwb> <def></def><sym>);</sym><br />
<def>      just_past</def> <sym>:=</sym> <def></def><kwd>rx_wild_match</kwd><def></def><sym>(</sym><br />
<def>        rx</def><sym>.</sym><def>starred</def><sym>,</sym> <def>rx</def><sym>.</sym><def>right</def><sym>,</sym> <def>found_at</def> <sym>+</sym> <def></def><kwd>length</kwd><def></def><sym>(</sym><def>rx</def><sym>.</sym><def>left</def><sym>) );</sym><br />
<def></def>      <kwa>if</kwa> <def>just_past</def> <sym>=</sym> <def></def><kwa>nil then</kwa><br />
<def>        p</def> <sym>:=</sym> <def>found_at</def> <sym>+</sym> <def></def><num>1</num><br />
<def></def>      <kwa>else</kwa><br />
<def></def>      <kwa>begin</kwa><br />
<def>        index</def> <sym>:=</sym> <def>found_at</def> <sym>-</sym> <def></def><kwd>pchar</kwd><def></def><sym>(</sym><def>str</def><sym>) +</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def>        len</def> <sym>:=</sym> <def>just_past</def> <sym>-</sym> <def>found_at</def><sym>;</sym><br />
<def></def>        <kwd>exit</kwd><def></def><sym>(</sym> <def></def><kwb>true</kwb> <def></def><sym>)</sym><br />
<def></def>      <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>    <kwa>end</kwa><def></def><sym>;</sym> <def></def><slc>// while</slc><br />
<def></def>    <kwd>exit</kwd><def></def><sym>(</sym> <def></def><kwb>false</kwb> <def></def><sym>);</sym><br />
<def></def>  <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
  <slc>// Do a character-class search.</slc><br />
<def></def>  <slc>// If right string is longer than left, look for it.</slc><br />
<def></def>  <kwa>if</kwa> <def></def><kwd>length</kwd><def></def><sym>(</sym><def>rx</def><sym>.</sym><def>left</def><sym>) &lt;</sym> <def></def><kwd>length</kwd><def></def><sym>(</sym><def>rx</def><sym>.</sym><def>right</def><sym>)</sym> <def></def><kwa>then</kwa><br />
<def></def>  <kwa>begin</kwa><br />
<def>    remainder</def> <sym>:=</sym> <def>rx</def><sym>.</sym><def>size</def> <sym>-</sym> <def></def><kwd>length</kwd><def></def><sym>(</sym><def>rx</def><sym>.</sym><def>right</def><sym>);</sym><br />
<def></def>    <kwd>inc</kwd><def></def><sym>(</sym> <def>p</def><sym>,</sym> <def>remainder</def> <sym>);</sym><br />
<def></def>    <kwd>inc</kwd><def></def><sym>(</sym> <def>ceiling</def><sym>,</sym> <def>remainder</def> <sym>);</sym><br />
<def></def>    <kwa>while</kwa> <def>p</def> <sym>&lt;</sym> <def>ceiling</def> <kwa>do</kwa><br />
<def></def>    <kwa>begin</kwa><br />
<def>      found_at</def> <sym>:=</sym> <def></def><kwd>bm_search</kwd><def></def><sym>(</sym> <def>rx</def><sym>.</sym><def>right</def><sym>,</sym> <def>rx</def><sym>.</sym><def>skip</def><sym>,</sym> <def>p</def><sym>,</sym> <def>last_p</def> <sym>-</sym> <def>p</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>      <kwa>if</kwa> <def>found_at</def> <sym>&lt;&gt;</sym> <def></def><kwa>nil then</kwa><br />
<def></def>        <kwa>if</kwa> <def></def><sym>((</sym><def>found_at</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>)^</sym> <def></def><kwa>in</kwa> <def>rx</def><sym>.</sym><def>cclass</def><sym>)</sym> <def></def><kwa>and</kwa><br />
<def></def>          <kwd>str_eq</kwd><def></def><sym>(</sym><def>rx</def><sym>.</sym><def>left</def><sym>,</sym> <def>found_at</def> <sym>-</sym> <def>remainder</def><sym>)</sym> <def></def><kwa>then</kwa><br />
<def></def>        <kwa>begin</kwa><br />
<def>          index</def> <sym>:=</sym> <def>found_at</def> <sym>-</sym> <def>remainder</def> <sym>- @</sym><def>str</def><sym>[</sym><def></def><num>1</num><def></def><sym>];</sym><br />
<def>          len</def> <sym>:=</sym> <def>rx</def><sym>.</sym><def>size</def><sym>;</sym><br />
<def></def>          <kwd>exit</kwd><def></def><sym>(</sym> <def></def><kwb>true</kwb> <def></def><sym>);</sym><br />
<def></def>        <kwa>end</kwa><br />
<def></def>        <kwa>else</kwa><br />
<def>          p</def> <sym>:=</sym> <def>found_at</def> <sym>+</sym> <def></def><num>1</num><br />
<def></def>      <kwa>else</kwa><br />
<def></def>        <kwd>exit</kwd><def></def><sym>(</sym> <def></def><kwb>false</kwb> <def></def><sym>);</sym><br />
<def></def>    <kwa>end</kwa><def></def><sym>;</sym> <def></def><slc>// while</slc><br />
<def></def>    <kwd>exit</kwd><def></def><sym>(</sym> <def></def><kwb>false</kwb> <def></def><sym>)</sym><br />
<def></def>  <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
  <kwa>while</kwa> <def>p</def> <sym>&lt;</sym> <def>ceiling</def> <kwa>do</kwa><br />
<def></def>  <kwa>begin</kwa><br />
<def>    found_at</def> <sym>:=</sym> <def></def><kwd>bm_search</kwd><def></def><sym>(</sym> <def>rx</def><sym>.</sym><def>left</def><sym>,</sym> <def>rx</def><sym>.</sym><def>skip</def><sym>,</sym> <def>p</def><sym>,</sym> <def>last_p</def> <sym>-</sym> <def>p</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>    <kwa>if</kwa> <def>found_at</def> <sym>&lt;&gt;</sym> <def></def><kwa>nil then</kwa><br />
<def></def>    <kwa>begin</kwa><br />
<def>      p</def> <sym>:=</sym> <def>found_at</def> <sym>+</sym> <def></def><kwd>length</kwd><def></def><sym>(</sym><def>rx</def><sym>.</sym><def>left</def><sym>);</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>p</def><sym>^</sym> <def></def><kwa>in</kwa> <def>rx</def><sym>.</sym><def>cclass</def><sym>)</sym> <def></def><kwa>and</kwa> <def></def><kwd>str_eq</kwd><def></def><sym>(</sym> <def>rx</def><sym>.</sym><def>right</def><sym>,</sym> <def>p</def><sym>+</sym><def></def><num>1</num> <def></def><sym>)</sym> <def></def><kwa>then</kwa><br />
<def></def>      <kwa>begin</kwa><br />
<def>        index</def> <sym>:=</sym> <def>found_at</def> <sym>- @</sym><def>str</def><sym>[</sym><def></def><num>1</num><def></def><sym>] +</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>        <kwd>exit</kwd><def></def><sym>(</sym> <def></def><kwb>true</kwb> <def></def><sym>);</sym><br />
<def></def>      <kwa>end</kwa><br />
<def></def>      <kwa>else</kwa><br />
<def>        p</def> <sym>:=</sym> <def>found_at</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>    <kwa>end</kwa><br />
<def></def>    <kwa>else</kwa><br />
<def></def>      <kwd>exit</kwd><def></def><sym>(</sym> <def></def><kwb>false</kwb> <def></def><sym>);</sym><br />
<def></def>  <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
  <kwd>exit</kwd><def></def><sym>(</sym> <def></def><kwb>false</kwb> <def></def><sym>)</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<br />
<br />
<slc>// Append 2 strings to an ansistring rapidly.  Note: the ansistring's</slc><br />
<def></def><slc>// length will be increased by a more than sufficient amount.</slc><br />
<def></def><kwa>function</kwa> <def></def><kwd>append2</kwd><def></def><sym>(</sym> <def></def><kwa>var</kwa> <def>dest</def><sym>:</sym> <def>ansistring</def><sym>;</sym> <def>len0</def><sym>:</sym> <def></def><kwb>longint</kwb><def></def><sym>;</sym><br />
<def>                  s1</def><sym>:</sym> <def>pchar</def><sym>;</sym> <def>len1</def><sym>:</sym> <def></def><kwb>longint</kwb><def></def><sym>;</sym><br />
<def>                  s2</def><sym>:</sym> <def>pchar</def><sym>;</sym> <def>len2</def><sym>:</sym> <def></def><kwb>longint</kwb><def></def><sym>):</sym> <def></def><kwb>longint</kwb><def></def><sym>;</sym> <def></def><kwa>inline</kwa><def></def><sym>;</sym><br />
<def></def><kwa>const</kwa>  <def>quantum</def> <sym>=</sym> <def></def><num>599000</num><def></def><sym>;</sym><br />
<def></def><kwa>var</kwa>  <def>newlength</def><sym>:</sym> <def></def><kwb>longint</kwb><def></def><sym>;</sym><br />
<def></def><kwa>begin</kwa><br />
<def>  newlength</def> <sym>:=</sym> <def>len0</def> <sym>+</sym> <def>len1</def> <sym>+</sym> <def>len2</def><sym>;</sym><br />
<def></def>  <slc>// Since setlength() is somewhat costly, we'll do it less</slc><br />
<def></def>  <slc>// often than you would think.</slc><br />
<def></def>  <kwa>if</kwa> <def></def><kwd>length</kwd><def></def><sym>(</sym> <def>dest</def> <sym>) &lt;</sym> <def>newlength</def> <kwa>then</kwa><br />
<def></def>    <kwd>setlength</kwd><def></def><sym>(</sym> <def>dest</def><sym>,</sym> <def>newlength</def> <sym>+</sym> <def>quantum</def> <sym>);</sym><br />
<def></def>  <kwd>move</kwd><def></def><sym>(</sym> <def>s1</def><sym>^,</sym> <def>dest</def><sym>[</sym><def>len0</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>],</sym> <def>len1</def> <sym>);</sym><br />
<def></def>  <kwd>move</kwd><def></def><sym>(</sym> <def>s2</def><sym>^,</sym> <def>dest</def><sym>[</sym><def>len0</def> <sym>+</sym> <def></def><num>1</num> <def></def><sym>+</sym> <def>len1</def><sym>],</sym> <def>len2</def> <sym>);</sym><br />
<def></def>  <kwd>exit</kwd><def></def><sym>(</sym> <def>newlength</def> <sym>);</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def></def><kwd>rx_gsub</kwd><def></def><sym>(</sym><def></def><kwa>const</kwa> <def>this</def><sym>,</sym> <def>that</def><sym>:</sym> <def></def><kwa>string</kwa><def></def><sym>[</sym><def></def><num>255</num><def></def><sym>];</sym><br />
<def></def>                  <kwa>const</kwa> <def>str</def><sym>:</sym> <def>ansistring</def><sym>;</sym>  <def></def><kwa>var</kwa> <def>dest</def><sym>:</sym> <def>ansistring</def> <sym>);</sym><br />
<def></def><kwa>var</kwa><br />
<def>  engine</def> <sym>:</sym> <def>TRegexEngine</def><sym>;</sym><br />
<def>  starti</def><sym>,</sym> <def>index</def><sym>,</sym> <def>foundsize</def><sym>,</sym> <def>truelength</def><sym>:</sym> <def></def><kwb>longint</kwb><def></def><sym>;</sym><br />
<def>  temp</def><sym>:</sym> <def></def><kwa>string</kwa><def></def><sym>[</sym><def></def><num>255</num><def></def><sym>];</sym><br />
<def></def><kwa>begin</kwa><br />
<def>  temp</def> <sym>:=</sym> <def>this</def> <sym>+</sym> <def></def><esc>#0</esc><def></def><sym>;</sym><br />
<def>  engine</def> <sym>:=</sym> <def></def><kwd>RegexCreate</kwd><def></def><sym>( @</sym><def>temp</def><sym>[</sym><def></def><num>1</num><def></def><sym>] );</sym><br />
<def>  dest</def> <sym>:=</sym> <def></def><str>''</str><def></def><sym>;</sym>   <def>truelength</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>  starti</def> <sym>:=</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>  <kwa>while</kwa> <def>starti</def> <sym>&lt;=</sym> <def></def><kwd>length</kwd><def></def><sym>(</sym><def>str</def><sym>)</sym> <def></def><kwa>do</kwa><br />
<def></def>    <kwa>if</kwa> <def></def><kwd>Regex_search</kwd><def></def><sym>(</sym><def>engine</def><sym>,</sym> <def>str</def><sym>,</sym> <def>starti</def><sym>,</sym> <def>index</def><sym>,</sym> <def>foundsize</def><sym>)</sym> <def></def><kwa>then</kwa><br />
<def></def>    <kwa>begin</kwa><br />
<def>      truelength</def> <sym>:=</sym> <def></def><kwd>append2</kwd><def></def><sym>(</sym><br />
<def>        dest</def><sym>,</sym> <def>truelength</def><sym>,  @</sym><def>str</def><sym>[</sym><def>starti</def><sym>],</sym> <def>index</def><sym>-</sym><def>starti</def><sym>,  @</sym><def>that</def><sym>[</sym><def></def><num>1</num><def></def><sym>],</sym> <def></def><kwd>length</kwd><def></def><sym>(</sym><def>that</def><sym>) );</sym><br />
<def>      starti</def> <sym>:=</sym> <def>index</def> <sym>+</sym> <def>foundsize</def><sym>;</sym><br />
<def></def>    <kwa>end</kwa><br />
<def></def>    <kwa>else</kwa><br />
<def>      break</def><sym>;</sym><br />
<def></def>  <kwd>setlength</kwd><def></def><sym>(</sym> <def>dest</def><sym>,</sym> <def>truelength</def> <sym>);</sym><br />
<def>  dest</def> <sym>:=</sym> <def>dest</def> <sym>+</sym> <def></def><kwd>Copy</kwd><def></def><sym>(</sym> <def>str</def><sym>,</sym> <def>starti</def><sym>,</sym> <def></def><kwd>length</kwd><def></def><sym>(</sym><def>str</def><sym>)-</sym><def>starti</def><sym>+</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<br />
<kwa>procedure</kwa> <def></def><kwd>replace_matches</kwd><def></def><sym>(</sym> <def></def><kwa>const</kwa> <def>str</def><sym>:</sym> <def>ansistring</def><sym>;</sym>  <def></def><kwa>var</kwa> <def>dest</def><sym>:</sym> <def>ansistring</def> <sym>);</sym><br />
<def></def><kwa>var</kwa><br />
<def>  engine</def> <sym>:</sym> <def>TRegexEngine</def><sym>;</sym><br />
<def>  starti</def><sym>,</sym> <def>index</def><sym>,</sym> <def>foundsize</def><sym>,</sym> <def>truelength</def><sym>,</sym> <def>i</def> <sym>:</sym> <def></def><kwb>longint</kwb><def></def><sym>;</sym><br />
<def>  target</def><sym>,</sym> <def>repl</def><sym>:</sym> <def></def><kwa>string</kwa><def></def><sym>[</sym><def></def><num>255</num><def></def><sym>];</sym><br />
<def></def><kwa>begin</kwa><br />
<def></def>  <slc>// Instead of looking for one letter at a time, lump them all</slc><br />
<def></def>  <slc>// together in a character-class.</slc><br />
<def>  target</def> <sym>:=</sym> <def></def><str>'['</str><def></def><sym>;</sym><br />
<def></def>  <kwa>for</kwa> <def>i</def> <sym>:=</sym> <def></def><num>0</num> <def></def><kwa>to</kwa> <def></def><kwd>high</kwd><def></def><sym>(</sym><def>replacements</def><sym>)</sym> <def></def><kwa>do</kwa><br />
<def>    target</def> <sym>+=</sym> <def>replacements</def><sym>[</sym><def>i</def><sym>,</sym><def></def><num>0</num><def></def><sym>];</sym><br />
<def>  target</def> <sym>+=</sym> <def></def><str>']'</str><def></def> <sym>+</sym> <def></def><kwb>char</kwb><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>);</sym><br />
<def>  engine</def> <sym>:=</sym> <def></def><kwd>RegexCreate</kwd><def></def><sym>( @</sym><def>target</def><sym>[</sym><def></def><num>1</num><def></def><sym>] );</sym><br />
<def><br />
  dest</def> <sym>:=</sym> <def></def><str>''</str><def></def><sym>;</sym>   <def>truelength</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>  starti</def> <sym>:=</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>  <kwa>while</kwa> <def>starti</def> <sym>&lt;=</sym> <def></def><kwd>length</kwd><def></def><sym>(</sym><def>str</def><sym>)</sym> <def></def><kwa>do</kwa><br />
<def></def>    <kwa>if</kwa> <def></def><kwd>Regex_search</kwd><def></def><sym>(</sym><def>engine</def><sym>,</sym> <def>str</def><sym>,</sym> <def>starti</def><sym>,</sym> <def>index</def><sym>,</sym> <def>foundsize</def><sym>)</sym> <def></def><kwa>then</kwa><br />
<def></def>    <kwa>begin</kwa><br />
<def>      repl</def> <sym>:=</sym> <def>replacements</def><sym>[</sym> <def></def><kwd>pos</kwd><def></def><sym>(</sym> <def>str</def><sym>[</sym><def>index</def><sym>],</sym> <def>target</def><sym>) -</sym> <def></def><num>2</num><def></def><sym>,</sym> <def></def><num>1</num> <def></def><sym>];</sym><br />
<def>      truelength</def> <sym>:=</sym> <def></def><kwd>append2</kwd><def></def><sym>(</sym><br />
<def>        dest</def><sym>,</sym> <def>truelength</def><sym>,  @</sym><def>str</def><sym>[</sym><def>starti</def><sym>],</sym> <def>index</def><sym>-</sym><def>starti</def><sym>,  @</sym><def>repl</def><sym>[</sym><def></def><num>1</num><def></def><sym>],</sym> <def></def><kwd>length</kwd><def></def><sym>(</sym><def>repl</def><sym>) );</sym><br />
<def>      starti</def> <sym>:=</sym> <def>index</def> <sym>+</sym> <def>engine</def><sym>.</sym><def>size</def><sym>;</sym><br />
<def></def>    <kwa>end</kwa><br />
<def></def>    <kwa>else</kwa><br />
<def>      break</def><sym>;</sym><br />
<def></def>  <kwd>setlength</kwd><def></def><sym>(</sym> <def>dest</def><sym>,</sym> <def>truelength</def> <sym>);</sym><br />
<def>  dest</def> <sym>:=</sym> <def>dest</def> <sym>+</sym> <def></def><kwd>Copy</kwd><def></def><sym>(</sym> <def>str</def><sym>,</sym> <def>starti</def><sym>,</sym> <def></def><kwd>length</kwd><def></def><sym>(</sym><def>str</def><sym>)-</sym><def>starti</def><sym>+</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>type</kwa> <def>t_cc</def> <sym>=</sym> <def></def><kwa>set of</kwa> <def></def><kwb>char</kwb><def></def><sym>;</sym><br />
<def></def><kwa>function</kwa> <def></def><kwd>cclass2str</kwd><def></def><sym>(</sym> <def>cc</def><sym>:</sym> <def>t_cc</def><sym>):</sym> <def></def><kwa>string</kwa><def></def><sym>;</sym><br />
<def></def><kwa>var</kwa><br />
<def>  s</def><sym>:</sym> <def></def><kwa>string</kwa><def></def><sym>;</sym><br />
<def>  ch</def><sym>:</sym> <def></def><kwb>char</kwb><def></def><sym>;</sym><br />
<def></def><kwa>begin</kwa><br />
<def>  s</def> <sym>:=</sym> <def></def><str>''</str><def></def><sym>;</sym><br />
<def></def>  <kwa>for</kwa> <def>ch</def> <sym>:=</sym> <def></def><kwb>char</kwb><def></def><sym>(</sym><def></def><num>32</num><def></def><sym>)</sym> <def></def><kwa>to</kwa> <def></def><kwb>char</kwb><def></def><sym>(</sym><def></def><num>127</num><def></def><sym>)</sym> <def></def><kwa>do</kwa><br />
<def></def>    <kwa>if</kwa> <def>ch</def> <kwa>in</kwa> <def>cc</def> <kwa>then</kwa><br />
<def>      s</def> <sym>+=</sym> <def>ch</def><sym>;</sym><br />
<def></def>  <kwd>exit</kwd><def></def><sym>(</sym><def>s</def><sym>)</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>function</kwa> <def></def><kwd>count_matches_simple</kwd><def></def><sym>(</sym> <def>pattern</def><sym>:</sym> <def>pchar</def><sym>;</sym> <def></def><kwa>const</kwa> <def>str</def><sym>:</sym> <def>ansistring</def> <sym>):</sym> <def></def><kwb>longint</kwb><def></def><sym>;</sym><br />
<def></def><kwa>var</kwa><br />
<def>  engine</def> <sym>:</sym> <def>TRegexEngine</def><sym>;</sym><br />
<def>  start</def><sym>,</sym> <def>ceiling</def><sym>,</sym> <def>count</def><sym>,</sym> <def>index</def><sym>,</sym> <def>foundsize</def> <sym>:</sym> <def></def><kwb>longint</kwb><def></def><sym>;</sym><br />
<def></def><kwa>begin</kwa><br />
<def>  engine</def> <sym>:=</sym> <def></def><kwd>RegexCreate</kwd><def></def><sym>(</sym> <def>pattern</def> <sym>);</sym><br />
<def></def><br />
  <com>{</com><br />
<com>  with engine do</com><br />
<com>  begin</com><br />
<com>    if pos('[', pattern) &gt; 0 then</com><br />
<com>    begin</com><br />
<com>      writeln('Pattern: ', pattern );</com><br />
<com>      writeln('Left: ', left , '&lt;&lt;');</com><br />
<com>      writeln('cclass: ', cclass2str( cclass ), '&lt;&lt;');</com><br />
<com>      writeln('Right: ', right, '&lt;&lt;' );</com><br />
<com>      writeln('Starred: ', starred, '&lt;&lt;' );</com><br />
<com>      halt;</com><br />
<com>    end;</com><br />
<com>  end;</com><br />
<com>  }</com><def><br />
<br />
  ceiling</def> <sym>:=</sym> <def></def><kwd>length</kwd><def></def><sym>(</sym><def>str</def><sym>) -</sym> <def>engine</def><sym>.</sym><def>size</def> <sym>+</sym> <def></def><num>2</num><def></def><sym>;</sym><br />
<def>  count</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>  start</def> <sym>:=</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>  <kwa>while</kwa> <def>start</def> <sym>&lt;</sym> <def>ceiling</def> <kwa>do</kwa><br />
<def></def>    <kwa>if</kwa> <def></def><kwd>Regex_search</kwd><def></def><sym>(</sym><def>engine</def><sym>,</sym> <def>str</def><sym>,</sym> <def>start</def><sym>,</sym> <def>index</def><sym>,</sym> <def>foundsize</def> <sym>)</sym> <def></def><kwa>then</kwa><br />
<def></def>    <kwa>begin</kwa><br />
<def></def>      <kwd>inc</kwd><def></def><sym>(</sym><def>count</def><sym>);</sym><br />
<def></def>      <slc>// start := index + engine.size;</slc><br />
<def>      start</def> <sym>:=</sym> <def>index</def> <sym>+</sym> <def>foundsize</def><sym>;</sym><br />
<def></def>    <kwa>end</kwa><br />
<def></def>    <kwa>else</kwa><br />
<def>      break</def><sym>;</sym><br />
<def></def><br />
  <kwd>exit</kwd><def></def><sym>(</sym><def>count</def><sym>)</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>function</kwa> <def></def><kwd>count_matches</kwd><def></def><sym>(</sym> <def>pattern</def><sym>:</sym> <def></def><kwa>string</kwa><def></def><sym>[</sym><def></def><num>255</num><def></def><sym>];</sym> <def></def><kwa>const</kwa> <def>str</def><sym>:</sym> <def>ansistring</def> <sym>):</sym> <def></def><kwb>longint</kwb><def></def><sym>;</sym><br />
<def></def><kwa>var</kwa><br />
<def>  count</def><sym>,</sym> <def>p</def><sym>:</sym> <def></def><kwb>longint</kwb><def></def><sym>;</sym><br />
<def></def><kwa>begin</kwa><br />
<def>  pattern</def> <sym>+=</sym> <def></def><kwb>char</kwb><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>);</sym><br />
<def>  p</def> <sym>:=</sym> <def></def><kwd>pos</kwd><def></def><sym>(</sym> <def></def><str>'|'</str><def></def><sym>,</sym> <def>pattern</def> <sym>);</sym><br />
<def>  pattern</def><sym>[</sym><def>p</def><sym>] :=</sym> <def></def><kwb>char</kwb><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>);</sym><br />
<def>  count</def> <sym>:=</sym> <def></def><kwd>count_matches_simple</kwd><def></def><sym>( @</sym><def>pattern</def><sym>[</sym><def></def><num>1</num><def></def><sym>],</sym> <def>str</def> <sym>);</sym><br />
<def>  count</def> <sym>+=</sym> <def></def><kwd>count_matches_simple</kwd><def></def><sym>( @</sym><def>pattern</def><sym>[</sym><def>p</def><sym>+</sym><def></def><num>1</num><def></def><sym>],</sym> <def>str</def> <sym>);</sym><br />
<def></def>  <kwd>exit</kwd><def></def><sym>(</sym> <def>count</def> <sym>)</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<br />
<kwa>var</kwa><br />
<def>  dirty_sequence</def><sym>,</sym> <def>sequence</def><sym>,</sym> <def>new_seq</def><sym>,</sym> <def>temp</def> <sym>:</sym> <def>ansiString</def><sym>;</sym><br />
<def>  line</def><sym>,</sym> <def>linefeed</def><sym>:</sym> <def></def><kwa>string</kwa><def></def><sym>[</sym><def></def><num>255</num><def></def><sym>];</sym><br />
<def>  truelength</def><sym>,</sym> <def>i</def><sym>,</sym> <def>count</def><sym>:</sym> <def></def><kwb>longint</kwb><def></def><sym>;</sym><br />
<def>  inbuf</def> <sym>:</sym> <def></def><kwa>array</kwa><def></def><sym>[</sym><def></def><num>1</num><def></def><sym>.</sym><def></def><num>.64</num><def></def><sym>*</sym><def></def><num>1024</num><def></def><sym>]</sym> <def></def><kwa>of</kwa> <def></def><kwb>char</kwb><def></def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def></def>  <kwd>settextbuf</kwd><def></def><sym>(</sym><def>input</def><sym>,</sym> <def>inbuf</def><sym>);</sym><br />
<def>  linefeed</def> <sym>:=</sym> <def></def><esc>#10</esc><def></def><sym>;</sym><br />
<def>  dirty_sequence</def> <sym>:=</sym> <def></def><str>''</str><def></def><sym>;</sym><br />
<def>  truelength</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>  <kwa>while not</kwa> <def>eof</def> <kwa>do</kwa><br />
<def></def>  <kwa>begin</kwa><br />
<def></def>    <kwd>readln</kwd><def></def><sym>(</sym> <def>line</def> <sym>);</sym><br />
<def>    truelength</def> <sym>:=</sym> <def></def><kwd>append2</kwd><def></def><sym>(</sym><def>dirty_sequence</def><sym>,</sym><def>truelength</def><sym>,</sym><br />
<def></def>        <sym>@</sym><def>line</def><sym>[</sym><def></def><num>1</num><def></def><sym>],</sym><def></def><kwd>length</kwd><def></def><sym>(</sym><def>line</def><sym>), @</sym><def>linefeed</def><sym>[</sym><def></def><num>1</num><def></def><sym>],</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>  <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>  <kwd>setlength</kwd><def></def><sym>(</sym> <def>dirty_sequence</def><sym>,</sym> <def>truelength</def> <sym>);</sym><br />
<def></def><br />
  <kwd>rx_gsub</kwd><def></def><sym>(</sym> <def></def><str>'&gt;.*'</str><def></def> <sym>+</sym> <def>linefeed</def><sym>,</sym> <def></def><str>''</str><def></def><sym>,</sym> <def>dirty_sequence</def><sym>,</sym> <def>temp</def> <sym>);</sym><br />
<def></def>  <kwd>rx_gsub</kwd><def></def><sym>(</sym> <def>linefeed</def><sym>,</sym> <def></def><str>''</str><def></def><sym>,</sym> <def>temp</def><sym>,</sym> <def>sequence</def> <sym>);</sym><br />
<def></def><br />
<br />
  <slc>// Count pattern-matches.</slc><br />
<def>  temp</def> <sym>:=</sym> <def></def><kwd>lowercase</kwd><def></def><sym>(</sym> <def>sequence</def> <sym>);</sym><br />
<def></def>  <kwa>for</kwa> <def>i</def> <sym>:=</sym> <def></def><kwd>low</kwd><def></def><sym>(</sym><def>patterns</def><sym>)</sym> <def></def><kwa>to</kwa> <def></def><kwd>high</kwd><def></def><sym>(</sym><def>patterns</def><sym>)</sym> <def></def><kwa>do</kwa><br />
<def></def>  <kwa>begin</kwa><br />
<def>    count</def> <sym>:=</sym> <def></def><kwd>count_matches</kwd><def></def><sym>(</sym> <def>patterns</def><sym>[</sym><def>i</def><sym>],</sym> <def>temp</def> <sym>);</sym><br />
<def></def>    <kwd>writeln</kwd><def></def><sym>(</sym> <def>patterns</def><sym>[</sym><def>i</def><sym>],</sym> <def></def><str>' '</str><def></def><sym>,</sym> <def>count</def><sym>);</sym><br />
<def></def>  <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<br />
  <slc>//  Replace.</slc><br />
<def></def>  <kwd>replace_matches</kwd><def></def><sym>(</sym><def>sequence</def><sym>,</sym> <def>new_seq</def><sym>);</sym><br />
<def><br />
<br />
  writeln</def><sym>;</sym><br />
<def></def>  <kwd>writeln</kwd><def></def><sym>(</sym> <def></def><kwd>length</kwd><def></def><sym>(</sym> <def>dirty_sequence</def> <sym>) );</sym><br />
<def></def>  <kwd>writeln</kwd><def></def><sym>(</sym> <def></def><kwd>length</kwd><def></def><sym>(</sym> <def>sequence</def> <sym>) );</sym><br />
<def></def>  <kwd>writeln</kwd><def></def><sym>(</sym> <def></def><kwd>length</kwd><def></def><sym>(</sym><def>new_seq</def><sym>) );</sym><br />
<def></def><kwa>end</kwa><def></def><sym>.</sym><def></def><br />
</source>
