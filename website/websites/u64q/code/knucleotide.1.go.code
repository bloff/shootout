<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by The Go Authors.</span>
<span class="hl com"> */</span>

<span class="hl kwa">package</span> main

<span class="hl kwa">import</span> <span class="hl sym">(</span>
   <span class="hl str">&quot;bufio&quot;</span>
   <span class="hl str">&quot;bytes&quot;</span>
   <span class="hl str">&quot;fmt&quot;</span>
   <span class="hl str">&quot;io/ioutil&quot;</span>
   <span class="hl str">&quot;os&quot;</span>
   <span class="hl str">&quot;runtime&quot;</span>
   <span class="hl str">&quot;sort&quot;</span>
<span class="hl sym">)</span>

<span class="hl kwa">func</span> count<span class="hl sym">(</span>data string<span class="hl sym">,</span> n int<span class="hl sym">)</span> <span class="hl kwa">map</span><span class="hl sym">[</span>string<span class="hl sym">]</span>int <span class="hl sym">{</span>
   counts <span class="hl sym">:=</span> make<span class="hl sym">(</span><span class="hl kwa">map</span><span class="hl sym">[</span>string<span class="hl sym">]</span>int<span class="hl sym">)</span>
   top <span class="hl sym">:=</span> len<span class="hl sym">(</span>data<span class="hl sym">) -</span> n
   <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;=</span> top<span class="hl sym">;</span> i<span class="hl sym">++ {</span>
      s <span class="hl sym">:=</span> data<span class="hl sym">[</span>i <span class="hl sym">:</span> i<span class="hl sym">+</span>n<span class="hl sym">]</span>
      counts<span class="hl sym">[</span>s<span class="hl sym">]++</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">return</span> counts
<span class="hl sym">}</span>

<span class="hl kwa">func</span> countOne<span class="hl sym">(</span>data string<span class="hl sym">,</span> s string<span class="hl sym">)</span> int <span class="hl sym">{</span>
   <span class="hl kwa">return</span> count<span class="hl sym">(</span>data<span class="hl sym">,</span> len<span class="hl sym">(</span>s<span class="hl sym">))[</span>s<span class="hl sym">]</span>
<span class="hl sym">}</span>

<span class="hl kwa">type</span> kNuc <span class="hl kwa">struct</span> <span class="hl sym">{</span>
   name  string
   count int
<span class="hl sym">}</span>

<span class="hl kwa">type</span> kNucArray <span class="hl sym">[]</span>kNuc

<span class="hl kwa">func</span> <span class="hl sym">(</span>kn kNucArray<span class="hl sym">)</span> Len<span class="hl sym">()</span> int      <span class="hl sym">{</span> <span class="hl kwa">return</span> len<span class="hl sym">(</span>kn<span class="hl sym">) }</span>
<span class="hl kwa">func</span> <span class="hl sym">(</span>kn kNucArray<span class="hl sym">)</span> Swap<span class="hl sym">(</span>i<span class="hl sym">,</span> j int<span class="hl sym">) {</span> kn<span class="hl sym">[</span>i<span class="hl sym">],</span> kn<span class="hl sym">[</span>j<span class="hl sym">] =</span> kn<span class="hl sym">[</span>j<span class="hl sym">],</span> kn<span class="hl sym">[</span>i<span class="hl sym">] }</span>
<span class="hl kwa">func</span> <span class="hl sym">(</span>kn kNucArray<span class="hl sym">)</span> Less<span class="hl sym">(</span>i<span class="hl sym">,</span> j int<span class="hl sym">)</span> bool <span class="hl sym">{</span>
   <span class="hl kwa">if</span> kn<span class="hl sym">[</span>i<span class="hl sym">].</span>count <span class="hl sym">==</span> kn<span class="hl sym">[</span>j<span class="hl sym">].</span>count <span class="hl sym">{</span>
      <span class="hl kwa">return</span> kn<span class="hl sym">[</span>i<span class="hl sym">].</span>name <span class="hl sym">&gt;</span> kn<span class="hl sym">[</span>j<span class="hl sym">].</span>name <span class="hl slc">// sort down</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">return</span> kn<span class="hl sym">[</span>i<span class="hl sym">].</span>count <span class="hl sym">&gt;</span> kn<span class="hl sym">[</span>j<span class="hl sym">].</span>count
<span class="hl sym">}</span>

<span class="hl kwa">func</span> sortedArray<span class="hl sym">(</span>m <span class="hl kwa">map</span><span class="hl sym">[</span>string<span class="hl sym">]</span>int<span class="hl sym">)</span> kNucArray <span class="hl sym">{</span>
   kn <span class="hl sym">:=</span> make<span class="hl sym">(</span>kNucArray<span class="hl sym">,</span> len<span class="hl sym">(</span>m<span class="hl sym">))</span>
   i <span class="hl sym">:=</span> <span class="hl num">0</span>
   <span class="hl kwa">for</span> k<span class="hl sym">,</span> v <span class="hl sym">:=</span> <span class="hl kwa">range</span> m <span class="hl sym">{</span>
      kn<span class="hl sym">[</span>i<span class="hl sym">] =</span> kNuc<span class="hl sym">{</span>k<span class="hl sym">,</span> v<span class="hl sym">}</span>
      i<span class="hl sym">++</span>
   <span class="hl sym">}</span>
   sort<span class="hl sym">.</span>Sort<span class="hl sym">(</span>kn<span class="hl sym">)</span>
   <span class="hl kwa">return</span> kn
<span class="hl sym">}</span>

<span class="hl kwa">func</span> printKnucs<span class="hl sym">(</span>a kNucArray<span class="hl sym">) {</span>
   sum <span class="hl sym">:=</span> <span class="hl num">0</span>
   <span class="hl kwa">for</span> _<span class="hl sym">,</span> kn <span class="hl sym">:=</span> <span class="hl kwa">range</span> a <span class="hl sym">{</span>
      sum <span class="hl sym">+=</span> kn<span class="hl sym">.</span>count
   <span class="hl sym">}</span>
   <span class="hl kwa">for</span> _<span class="hl sym">,</span> kn <span class="hl sym">:=</span> <span class="hl kwa">range</span> a <span class="hl sym">{</span>
      fmt<span class="hl sym">.</span>Printf<span class="hl sym">(</span><span class="hl str">&quot;%s %.3f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> kn<span class="hl sym">.</span>name<span class="hl sym">,</span> <span class="hl num">100</span><span class="hl sym">*</span>float64<span class="hl sym">(</span>kn<span class="hl sym">.</span>count<span class="hl sym">)/</span>float64<span class="hl sym">(</span>sum<span class="hl sym">))</span>
   <span class="hl sym">}</span>
   fmt<span class="hl sym">.</span>Print<span class="hl sym">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span>
<span class="hl sym">}</span>

<span class="hl kwa">func</span> main<span class="hl sym">() {</span>
   runtime<span class="hl sym">.</span>GOMAXPROCS<span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">)</span>
   in <span class="hl sym">:=</span> bufio<span class="hl sym">.</span>NewReader<span class="hl sym">(</span>os<span class="hl sym">.</span>Stdin<span class="hl sym">)</span>
   three <span class="hl sym">:= []</span>byte<span class="hl sym">(</span><span class="hl str">&quot;&gt;THREE &quot;</span><span class="hl sym">)</span>
   <span class="hl kwa">for</span> <span class="hl sym">{</span>
      line<span class="hl sym">,</span> err <span class="hl sym">:=</span> in<span class="hl sym">.</span>ReadSlice<span class="hl sym">(</span>'\n'<span class="hl sym">)</span>
      <span class="hl kwa">if</span> err <span class="hl sym">!=</span> nil <span class="hl sym">{</span>
         fmt<span class="hl sym">.</span>Fprintln<span class="hl sym">(</span>os<span class="hl sym">.</span>Stderr<span class="hl sym">,</span> <span class="hl str">&quot;ReadLine err:&quot;</span><span class="hl sym">,</span> err<span class="hl sym">)</span>
         os<span class="hl sym">.</span>Exit<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">)</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">if</span> line<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] ==</span> '<span class="hl sym">&gt;</span>' <span class="hl sym">&amp;&amp;</span> bytes<span class="hl sym">.</span>Equal<span class="hl sym">(</span>line<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">:</span>len<span class="hl sym">(</span>three<span class="hl sym">)],</span> three<span class="hl sym">) {</span>
         <span class="hl kwa">break</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
   data<span class="hl sym">,</span> err <span class="hl sym">:=</span> ioutil<span class="hl sym">.</span>ReadAll<span class="hl sym">(</span>in<span class="hl sym">)</span>
   <span class="hl kwa">if</span> err <span class="hl sym">!=</span> nil <span class="hl sym">{</span>
      fmt<span class="hl sym">.</span>Fprintln<span class="hl sym">(</span>os<span class="hl sym">.</span>Stderr<span class="hl sym">,</span> <span class="hl str">&quot;ReadAll err:&quot;</span><span class="hl sym">,</span> err<span class="hl sym">)</span>
      os<span class="hl sym">.</span>Exit<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">)</span>
   <span class="hl sym">}</span>
   <span class="hl slc">// delete the newlines and convert to upper case</span>
   j <span class="hl sym">:=</span> <span class="hl num">0</span>
   <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> len<span class="hl sym">(</span>data<span class="hl sym">);</span> i<span class="hl sym">++ {</span>
      <span class="hl kwa">if</span> data<span class="hl sym">[</span>i<span class="hl sym">] !=</span> '\n' <span class="hl sym">{</span>
         data<span class="hl sym">[</span>j<span class="hl sym">] =</span> data<span class="hl sym">[</span>i<span class="hl sym">] &amp;^</span> ' ' <span class="hl slc">// upper case</span>
         j<span class="hl sym">++</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
   str <span class="hl sym">:=</span> string<span class="hl sym">(</span>data<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">:</span>j<span class="hl sym">])</span>

   <span class="hl kwa">var</span> arr1<span class="hl sym">,</span> arr2 kNucArray
   countsdone <span class="hl sym">:=</span> make<span class="hl sym">(</span><span class="hl kwa">chan</span> bool<span class="hl sym">)</span>
   <span class="hl kwa">go func</span><span class="hl sym">() {</span>
      arr1 <span class="hl sym">=</span> sortedArray<span class="hl sym">(</span>count<span class="hl sym">(</span>str<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">))</span>
      countsdone <span class="hl sym">&lt;-</span> true
   <span class="hl sym">}()</span>
   <span class="hl kwa">go func</span><span class="hl sym">() {</span>
      arr2 <span class="hl sym">=</span> sortedArray<span class="hl sym">(</span>count<span class="hl sym">(</span>str<span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">))</span>
      countsdone <span class="hl sym">&lt;-</span> true
   <span class="hl sym">}()</span>

   interests <span class="hl sym">:= []</span>string<span class="hl sym">{</span><span class="hl str">&quot;GGT&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;GGTA&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;GGTATT&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;GGTATTTTAATT&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl sym">}</span>
   results <span class="hl sym">:=</span> make<span class="hl sym">([]</span><span class="hl kwa">chan</span> string<span class="hl sym">,</span> len<span class="hl sym">(</span>interests<span class="hl sym">))</span>
   <span class="hl kwa">for</span> i<span class="hl sym">,</span> s <span class="hl sym">:=</span> <span class="hl kwa">range</span> interests <span class="hl sym">{</span>
      ch <span class="hl sym">:=</span> make<span class="hl sym">(</span><span class="hl kwa">chan</span> string<span class="hl sym">)</span>
      results<span class="hl sym">[</span>i<span class="hl sym">] =</span> ch
      <span class="hl kwa">go func</span><span class="hl sym">(</span>result <span class="hl kwa">chan</span> string<span class="hl sym">,</span> ss string<span class="hl sym">) {</span>
         result <span class="hl sym">&lt;-</span> fmt<span class="hl sym">.</span>Sprintf<span class="hl sym">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\t</span><span class="hl str">%s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> countOne<span class="hl sym">(</span>str<span class="hl sym">,</span> ss<span class="hl sym">),</span> ss<span class="hl sym">)</span>
      <span class="hl sym">}(</span>ch<span class="hl sym">,</span> s<span class="hl sym">)</span>
   <span class="hl sym">}</span>
   <span class="hl sym">&lt;-</span>countsdone
   <span class="hl sym">&lt;-</span>countsdone
   printKnucs<span class="hl sym">(</span>arr1<span class="hl sym">)</span>
   printKnucs<span class="hl sym">(</span>arr2<span class="hl sym">)</span>
   <span class="hl kwa">for</span> _<span class="hl sym">,</span> rc <span class="hl sym">:=</span> <span class="hl kwa">range</span> results <span class="hl sym">{</span>
      fmt<span class="hl sym">.</span>Print<span class="hl sym">(&lt;-</span>rc<span class="hl sym">)</span>
   <span class="hl sym">}</span>

<span class="hl sym">}</span>
