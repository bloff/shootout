<source>
<def></def><com>/* The Computer Language Benchmarks Game</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com></com><br />
<com>   contributed by Greg Buchholz (original iterative version)</com><br />
<com>   modified by Yannick Gingras (made tail recursive)</com><br />
<com>*/</com><def></def><br />
<br />
<dir>#include&lt;stdio.h&gt;</dir><br />
<def></def><dir>#include&lt;stdlib.h&gt;</dir><br />
<def></def><br />
<dir>#define _ISOC99_SOURCE</dir><br />
<def></def><br />
<kwd>__attribute__</kwd><def></def><sym>((</sym><def>pure</def><sym>,</sym> <def></def><kwb>const</kwb><def></def><sym>,</sym> <def>nothrow</def><sym>,</sym> <def>sseregparm</def><sym>,</sym> <def>hot</def><sym>))</sym><br />
<def></def><kwb>int</kwb> <def></def><kwd>iterate</kwd><def></def><sym>(</sym><def></def><kwb>double</kwb> <def>Zr</def><sym>,</sym> <def></def><kwb>double</kwb> <def>Zi</def><sym>,</sym><br />
<def></def>	    <kwb>double</kwb> <def>Tr</def><sym>,</sym> <def></def><kwb>double</kwb> <def>Ti</def><sym>,</sym><br />
<def></def>	    <kwb>double</kwb> <def>Cr</def><sym>,</sym> <def></def><kwb>double</kwb> <def>Ci</def><sym>,</sym><br />
<def></def>	    <kwb>int</kwb> <def>iter</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def><br />
  <kwa>if</kwa> <def></def><sym>(</sym><def>iter</def> <sym>==</sym> <def></def><num>0</num><def></def><sym>)</sym><br />
<def></def>    <kwa>return</kwa> <def></def><num>1</num><def></def><sym>;</sym><br />
<def><br />
  Zi</def> <sym>=</sym> <def></def><num>2.0</num> <def></def><sym>*</sym> <def>Zr</def> <sym>*</sym> <def>Zi</def> <sym>+</sym> <def>Ci</def><sym>;</sym><br />
<def>  Zr</def> <sym>=</sym> <def>Tr</def> <sym>-</sym> <def>Ti</def> <sym>+</sym> <def>Cr</def><sym>;</sym><br />
<def>  Tr</def> <sym>=</sym> <def>Zr</def> <sym>*</sym> <def>Zr</def><sym>;</sym><br />
<def>  Ti</def> <sym>=</sym> <def>Zi</def> <sym>*</sym> <def>Zi</def><sym>;</sym><br />
<def></def><br />
  <kwa>if</kwa> <def></def><sym>(</sym><def>Tr</def> <sym>+</sym> <def>Ti</def> <sym>&gt;</sym> <def></def><num>4.0</num><def></def><sym>)</sym><br />
<def></def>    <kwa>return</kwa> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><br />
  <kwa>return</kwa> <def></def><kwd>iterate</kwd> <def></def><sym>(</sym><def>Zr</def><sym>,</sym> <def>Zi</def><sym>,</sym> <def>Tr</def><sym>,</sym> <def>Ti</def><sym>,</sym> <def>Cr</def><sym>,</sym> <def>Ci</def><sym>,</sym> <def>iter</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<br />
<br />
<kwb>int</kwb> <def></def><kwd>main</kwd> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>argc</def><sym>,</sym> <def></def><kwb>char</kwb> <def></def><sym>**</sym><def>argv</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>  <kwb>int</kwb> <def>w</def><sym>,</sym> <def>h</def><sym>,</sym> <def>buflen</def><sym>,</sym> <def>bit_num</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>  <kwb>char</kwb> <def>byte_acc</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>  <kwb>char</kwb> <def></def><sym>*</sym><def>buf</def><sym>, *</sym><def>pbuf</def><sym>;</sym><br />
<def></def>  <kwb>double</kwb> <def>x</def><sym>,</sym> <def>y</def><sym>,</sym> <def>wrat</def><sym>,</sym> <def>hrat</def><sym>;</sym><br />
<def></def>  <kwb>double</kwb> <def>Cr</def><sym>,</sym> <def>Ci</def><sym>;</sym><br />
<def><br />
  w</def> <sym>=</sym> <def>h</def> <sym>=</sym> <def></def><kwd>atoi</kwd> <def></def><sym>(</sym><def>argv</def><sym>[</sym><def></def><num>1</num><def></def><sym>]);</sym><br />
<def>  wrat</def> <sym>=</sym> <def></def><num>2.0</num> <def></def><sym>/</sym> <def>w</def><sym>;</sym><br />
<def>  hrat</def> <sym>=</sym> <def></def><num>2.0</num> <def></def><sym>/</sym> <def>h</def><sym>;</sym><br />
<def>  buflen</def> <sym>= (</sym><def>w</def> <sym>/</sym> <def></def><num>8</num> <def></def><sym>+ (</sym><def>w</def> <sym>%</sym> <def></def><num>8</num> <def>?</def> <num>1</num> <def></def><sym>:</sym> <def></def><num>0</num><def></def><sym>)) *</sym> <def>h</def><sym>;</sym><br />
<def>  buf</def> <sym>= (</sym><def></def><kwb>char</kwb> <def></def><sym>*)</sym> <def></def><kwd>malloc</kwd> <def></def><sym>(</sym><def>buflen</def><sym>);</sym><br />
<def>  pbuf</def> <sym>=</sym> <def>buf</def><sym>;</sym><br />
<def></def><br />
  <kwd>printf</kwd> <def></def><sym>(</sym><def></def><str>&quot;P4</str><esc>\n</esc><str>%d %d</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def>w</def><sym>,</sym> <def>h</def><sym>);</sym><br />
<def></def><br />
<br />
  <kwa>for</kwa> <def></def><sym>(</sym><def>y</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>y</def> <sym>&lt;</sym> <def>h</def><sym>; ++</sym><def>y</def><sym>)</sym><br />
<def></def>    <sym>{</sym><br />
<def>      Ci</def> <sym>=</sym> <def>y</def> <sym>*</sym> <def>hrat</def> <sym>-</sym> <def></def><num>1.0</num><def></def><sym>;</sym><br />
<def></def><br />
      <kwa>for</kwa> <def></def><sym>(</sym><def>x</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>x</def> <sym>&lt;</sym> <def>w</def><sym>; ++</sym><def>x</def><sym>)</sym><br />
<def></def>	<sym>{</sym><br />
<def>	  Cr</def> <sym>=</sym> <def>x</def> <sym>*</sym> <def>wrat</def> <sym>-</sym> <def></def><num>1.5</num><def></def><sym>;</sym><br />
<def><br />
	  byte_acc</def> <sym>&lt;&lt;=</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>	  <kwa>if</kwa> <def></def><sym>(</sym><def></def><kwd>iterate</kwd> <def></def><sym>(</sym><def></def><num>0.0</num><def></def><sym>,</sym> <def></def><num>0.0</num><def></def><sym>,</sym> <def></def><num>0.0</num><def></def><sym>,</sym> <def></def><num>0.0</num><def></def><sym>,</sym> <def>Cr</def><sym>,</sym> <def>Ci</def><sym>,</sym> <def></def><num>50</num><def></def><sym>))</sym><br />
<def>	    byte_acc</def> <sym>|=</sym> <def></def><num>0x01</num><def></def><sym>;</sym><br />
<def></def><br />
	  <kwa>if</kwa> <def></def><sym>(++</sym><def>bit_num</def> <sym>==</sym> <def></def><num>8</num><def></def><sym>)</sym><br />
<def></def>	    <sym>{</sym><br />
<def></def>	      <sym>*(</sym><def>pbuf</def><sym>++) =</sym> <def>byte_acc</def><sym>;</sym><br />
<def>	      bit_num</def> <sym>=</sym> <def>byte_acc</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>	    <sym>}</sym><br />
<def></def>	<sym>}</sym><br />
<def></def><br />
      <kwa>if</kwa> <def></def><sym>(</sym><def>bit_num</def><sym>)</sym><br />
<def></def>	<sym>{</sym><br />
<def>	  byte_acc</def> <sym>&lt;&lt;= (</sym><def></def><num>8</num> <def></def><sym>-</sym> <def>w</def> <sym>%</sym> <def></def><num>8</num><def></def><sym>);</sym><br />
<def></def><br />
	  <sym>*(</sym><def>pbuf</def><sym>++) =</sym> <def>byte_acc</def><sym>;</sym><br />
<def>	  bit_num</def> <sym>=</sym> <def>byte_acc</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>	<sym>}</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
  <kwd>fwrite</kwd> <def></def><sym>(</sym><def>buf</def><sym>,</sym> <def>buflen</def><sym>,</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>stdout</def><sym>);</sym><br />
<def></def>  <kwa>return</kwa> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
