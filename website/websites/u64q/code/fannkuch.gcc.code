<source>
<def></def><com>/*</com><br />
<com> * The Computer Lannguage Shootout</com><br />
<com> * http://shootout.alioth.debian.org/</com><br />
<com> * Contributed by Heiner Marxen</com><br />
<com> *</com><br />
<com> * &quot;fannkuch&quot;	for C gcc</com><br />
<com> *</com><br />
<com> * $Id: fannkuch.gcc.code,v 1.1 2008-08-05 04:40:15 igouy-guest Exp $</com><br />
<com> */</com><def></def><br />
<br />
<dir>#include &lt;stdio.h&gt;</dir><br />
<def></def><dir>#include &lt;stdlib.h&gt;</dir><br />
<def></def><br />
<dir>#define Int	int</dir><br />
<def></def><dir>#define Aint	int</dir><br />
<def></def><br />
    <kwb>static long</kwb><br />
<def></def><kwd>fannkuch</kwd><def></def><sym>(</sym> <def></def><kwb>int</kwb> <def>n</def> <sym>)</sym><br />
<def></def><sym>{</sym><br />
<def>    Aint</def><sym>*</sym>	<def>perm</def><sym>;</sym><br />
<def>    Aint</def><sym>*</sym>	<def>perm1</def><sym>;</sym><br />
<def>    Aint</def><sym>*</sym>	<def>count</def><sym>;</sym><br />
<def></def>    <kwb>long</kwb>	<def>flips</def><sym>;</sym><br />
<def></def>    <kwb>long</kwb>	<def>flipsMax</def><sym>;</sym><br />
<def>    Int		r</def><sym>;</sym><br />
<def>    Int		i</def><sym>;</sym><br />
<def>    Int		k</def><sym>;</sym><br />
<def>    Int		didpr</def><sym>;</sym><br />
<def></def>    <kwb>const</kwb> <def>Int	n1</def>	<sym>=</sym> <def>n</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def><br />
    <kwa>if</kwa><def></def><sym>(</sym> <def>n</def> <sym>&lt;</sym> <def></def><num>1</num> <def></def><sym>)</sym> <def></def><kwa>return</kwa> <def></def><num>0</num><def></def><sym>;</sym><br />
<def><br />
    perm</def>  <sym>=</sym> <def></def><kwd>calloc</kwd><def></def><sym>(</sym><def>n</def><sym>,</sym> <def></def><kwa>sizeof</kwa><def></def><sym>(*</sym><def>perm</def> <sym>));</sym><br />
<def>    perm1</def> <sym>=</sym> <def></def><kwd>calloc</kwd><def></def><sym>(</sym><def>n</def><sym>,</sym> <def></def><kwa>sizeof</kwa><def></def><sym>(*</sym><def>perm1</def><sym>));</sym><br />
<def>    count</def> <sym>=</sym> <def></def><kwd>calloc</kwd><def></def><sym>(</sym><def>n</def><sym>,</sym> <def></def><kwa>sizeof</kwa><def></def><sym>(*</sym><def>count</def><sym>));</sym><br />
<def></def><br />
    <kwa>for</kwa><def></def><sym>(</sym> <def>i</def><sym>=</sym><def></def><num>0</num> <def></def><sym>;</sym> <def>i</def><sym>&lt;</sym><def>n</def> <sym>; ++</sym><def>i</def> <sym>)</sym> <def>perm1</def><sym>[</sym><def>i</def><sym>] =</sym> <def>i</def><sym>;</sym>	<def></def><com>/* initial (trivial) permu */</com><def><br />
<br />
    r</def> <sym>=</sym> <def>n</def><sym>;</sym> <def>didpr</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>flipsMax</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>    <kwa>for</kwa><def></def><sym>(;;) {</sym><br />
<def></def>	<kwa>if</kwa><def></def><sym>(</sym> <def>didpr</def> <sym>&lt;</sym> <def></def><num>30</num> <def></def><sym>) {</sym><br />
<def></def>	    <kwa>for</kwa><def></def><sym>(</sym> <def>i</def><sym>=</sym><def></def><num>0</num> <def></def><sym>;</sym> <def>i</def><sym>&lt;</sym><def>n</def> <sym>; ++</sym><def>i</def> <sym>)</sym> <def></def><kwd>printf</kwd><def></def><sym>(</sym><def></def><str>&quot;%d&quot;</str><def></def><sym>, (</sym><def></def><kwb>int</kwb><def></def><sym>)(</sym><def></def><num>1</num><def></def><sym>+</sym><def>perm1</def><sym>[</sym><def>i</def><sym>]));</sym><br />
<def></def>	    <kwd>printf</kwd><def></def><sym>(</sym><def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>);</sym><br />
<def></def>	    <sym>++</sym><def>didpr</def><sym>;</sym><br />
<def></def>	<sym>}</sym><br />
<def></def>	<kwa>for</kwa><def></def><sym>( ;</sym> <def>r</def><sym>!=</sym><def></def><num>1</num> <def></def><sym>; --</sym><def>r</def> <sym>) {</sym><br />
<def>	    count</def><sym>[</sym><def>r</def><sym>-</sym><def></def><num>1</num><def></def><sym>] =</sym> <def>r</def><sym>;</sym><br />
<def></def>	<sym>}</sym><br />
<def></def><br />
<dir>#define XCH(x,y)	{ Aint t_mp; t_mp=(x); (x)=(y); (y)=t_mp; }</dir><br />
<def></def><br />
	<kwa>if</kwa><def></def><sym>( ! (</sym><def>perm1</def><sym>[</sym><def></def><num>0</num><def></def><sym>]==</sym><def></def><num>0</num> <def></def><sym>||</sym> <def>perm1</def><sym>[</sym><def>n1</def><sym>]==</sym><def>n1</def><sym>) ) {</sym><br />
<def>	    flips</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>	    <kwa>for</kwa><def></def><sym>(</sym> <def>i</def><sym>=</sym><def></def><num>1</num> <def></def><sym>;</sym> <def>i</def><sym>&lt;</sym><def>n</def> <sym>; ++</sym><def>i</def> <sym>) {</sym>	<def></def><com>/* perm = perm1 */</com><def><br />
		perm</def><sym>[</sym><def>i</def><sym>] =</sym> <def>perm1</def><sym>[</sym><def>i</def><sym>];</sym><br />
<def></def>	    <sym>}</sym><br />
<def>	    k</def> <sym>=</sym> <def>perm1</def><sym>[</sym><def></def><num>0</num><def></def><sym>];</sym>		<def></def><com>/* cache perm[0] in k */</com><def></def><br />
	    <kwa>do</kwa> <def></def><sym>{</sym>			<def></def><com>/* k!=0 ==&gt; k&gt;0 */</com><def><br />
		Int	j</def><sym>;</sym><br />
<def></def>		<kwa>for</kwa><def></def><sym>(</sym> <def>i</def><sym>=</sym><def></def><num>1</num><def></def><sym>,</sym> <def>j</def><sym>=</sym><def>k</def><sym>-</sym><def></def><num>1</num> <def></def><sym>;</sym> <def>i</def><sym>&lt;</sym><def>j</def> <sym>; ++</sym><def>i</def><sym>, --</sym><def>j</def> <sym>) {</sym><br />
<def></def>		    <kwd>XCH</kwd><def></def><sym>(</sym><def>perm</def><sym>[</sym><def>i</def><sym>],</sym> <def>perm</def><sym>[</sym><def>j</def><sym>])</sym><br />
<def></def>		<sym>}</sym><br />
<def></def>		<sym>++</sym><def>flips</def><sym>;</sym><br />
<def></def>		<com>/*</com><br />
<com>		 * Now exchange k (caching perm[0]) and perm[k]... with care!</com><br />
<com>		 * XCH(k, perm[k]) does NOT work!</com><br />
<com>		 */</com><def><br />
		j</def><sym>=</sym><def>perm</def><sym>[</sym><def>k</def><sym>];</sym> <def>perm</def><sym>[</sym><def>k</def><sym>]=</sym><def>k</def> <sym>;</sym> <def>k</def><sym>=</sym><def>j</def><sym>;</sym><br />
<def></def>	    <sym>}</sym><def></def><kwa>while</kwa><def></def><sym>(</sym> <def>k</def> <sym>);</sym><br />
<def></def>	    <kwa>if</kwa><def></def><sym>(</sym> <def>flipsMax</def> <sym>&lt;</sym> <def>flips</def> <sym>) {</sym><br />
<def>		flipsMax</def> <sym>=</sym> <def>flips</def><sym>;</sym><br />
<def></def>	    <sym>}</sym><br />
<def></def>	<sym>}</sym><br />
<def></def><br />
	<kwa>for</kwa><def></def><sym>(;;) {</sym><br />
<def></def>	    <kwa>if</kwa><def></def><sym>(</sym> <def>r</def> <sym>==</sym> <def>n</def> <sym>) {</sym><br />
<def></def>		<kwa>return</kwa> <def>flipsMax</def><sym>;</sym><br />
<def></def>	    <sym>}</sym><br />
<def></def>	    <com>/* rotate down perm[0..r] by one */</com><def></def><br />
	    <sym>{</sym><br />
<def>		Int	perm0</def> <sym>=</sym> <def>perm1</def><sym>[</sym><def></def><num>0</num><def></def><sym>];</sym><br />
<def>		i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>		<kwa>while</kwa><def></def><sym>(</sym> <def>i</def> <sym>&lt;</sym> <def>r</def> <sym>) {</sym><br />
<def>		    k</def> <sym>=</sym> <def>i</def><sym>+</sym><def></def><num>1</num><def></def><sym>;</sym><br />
<def>		    perm1</def><sym>[</sym><def>i</def><sym>] =</sym> <def>perm1</def><sym>[</sym><def>k</def><sym>];</sym><br />
<def>		    i</def> <sym>=</sym> <def>k</def><sym>;</sym><br />
<def></def>		<sym>}</sym><br />
<def>		perm1</def><sym>[</sym><def>r</def><sym>] =</sym> <def>perm0</def><sym>;</sym><br />
<def></def>	    <sym>}</sym><br />
<def></def>	    <kwa>if</kwa><def></def><sym>( (</sym><def>count</def><sym>[</sym><def>r</def><sym>] -=</sym> <def></def><num>1</num><def></def><sym>) &gt;</sym> <def></def><num>0</num> <def></def><sym>) {</sym><br />
<def></def>		<kwa>break</kwa><def></def><sym>;</sym><br />
<def></def>	    <sym>}</sym><br />
<def></def>	    <sym>++</sym><def>r</def><sym>;</sym><br />
<def></def>	<sym>}</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
    <kwb>int</kwb><br />
<def></def><kwd>main</kwd><def></def><sym>(</sym> <def></def><kwb>int</kwb> <def>argc</def><sym>,</sym> <def></def><kwb>char</kwb><def></def><sym>*</sym> <def>argv</def><sym>[] )</sym><br />
<def></def><sym>{</sym><br />
<def></def>    <kwb>int</kwb>		<def>n</def> <sym>= (</sym><def>argc</def><sym>&gt;</sym><def></def><num>1</num><def></def><sym>)</sym> <def>?</def> <kwd>atoi</kwd><def></def><sym>(</sym><def>argv</def><sym>[</sym><def></def><num>1</num><def></def><sym>]) :</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><br />
    <kwd>printf</kwd><def></def><sym>(</sym><def></def><str>&quot;Pfannkuchen(%d) = %ld</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def>n</def><sym>,</sym> <def></def><kwd>fannkuch</kwd><def></def><sym>(</sym><def>n</def><sym>));</sym><br />
<def></def>    <kwa>return</kwa> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
