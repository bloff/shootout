<span class="hl com">/* The Computer Language Shootout Benchmarks</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Kevin Carson</span>
<span class="hl com">   modified by CÃ©dric Krier</span>
<span class="hl com">   compilation:</span>
<span class="hl com">       gcc -O3 -fomit-frame-pointer -funroll-loops -fopenmp -static binarytrees.c -lpthread</span>
<span class="hl com">*/</span>

<span class="hl dir">#define _GNU_SOURCE</span>
<span class="hl dir">#include &lt;malloc.h&gt;</span>
<span class="hl dir">#include &lt;stdio.h&gt;</span>
<span class="hl dir">#include &lt;stdlib.h&gt;</span>
<span class="hl dir">#include &lt;pthread.h&gt;</span>
<span class="hl dir">#include &lt;sched.h&gt;</span>
<span class="hl dir">#include &lt;omp.h&gt;</span>


<span class="hl kwc">typedef</span> <span class="hl kwb">struct</span> tn <span class="hl sym">{</span>
    <span class="hl kwb">struct</span> tn<span class="hl sym">*</span>    left<span class="hl sym">;</span>
    <span class="hl kwb">struct</span> tn<span class="hl sym">*</span>    right<span class="hl sym">;</span>
    <span class="hl kwb">long</span>          item<span class="hl sym">;</span>
<span class="hl sym">}</span> treeNode<span class="hl sym">;</span>

<span class="hl kwc">typedef</span> <span class="hl kwb">struct</span> pt <span class="hl sym">{</span>
    treeNode<span class="hl sym">*</span>     pool<span class="hl sym">;</span>
    treeNode<span class="hl sym">*</span>     <span class="hl kwa">new</span><span class="hl sym">;</span>
<span class="hl sym">}</span> poolTree<span class="hl sym">;</span>

<span class="hl kwc">typedef</span> <span class="hl kwb">struct</span> tc <span class="hl sym">{</span>
    <span class="hl kwb">long</span> iterations<span class="hl sym">;</span>
    <span class="hl kwb">long</span> depth<span class="hl sym">;</span>
    <span class="hl kwb">long</span> check<span class="hl sym">;</span>
<span class="hl sym">}</span> treeCheck<span class="hl sym">;</span>


treeNode<span class="hl sym">*</span> <span class="hl kwd">NewTreeNode</span><span class="hl sym">(</span>treeNode<span class="hl sym">*</span> left<span class="hl sym">,</span> treeNode<span class="hl sym">*</span> right<span class="hl sym">,</span> <span class="hl kwb">long</span> item<span class="hl sym">,</span> poolTree<span class="hl sym">*</span> pool<span class="hl sym">)</span>
<span class="hl sym">{</span>
    treeNode<span class="hl sym">*</span> <span class="hl kwa">new</span> <span class="hl sym">=</span> pool<span class="hl sym">-&gt;</span><span class="hl kwa">new</span><span class="hl sym">++;</span>

    <span class="hl kwa">new</span><span class="hl sym">-&gt;</span>left <span class="hl sym">=</span> left<span class="hl sym">;</span>
    <span class="hl kwa">new</span><span class="hl sym">-&gt;</span>right <span class="hl sym">=</span> right<span class="hl sym">;</span>
    <span class="hl kwa">new</span><span class="hl sym">-&gt;</span>item <span class="hl sym">=</span> item<span class="hl sym">;</span>

    <span class="hl kwa">return new</span><span class="hl sym">;</span>
<span class="hl sym">}</span> <span class="hl com">/* NewTreeNode() */</span>


<span class="hl kwb">long</span> <span class="hl kwd">ItemCheck</span><span class="hl sym">(</span>treeNode<span class="hl sym">*</span> tree<span class="hl sym">)</span>
<span class="hl sym">{</span>
    <span class="hl kwb">long</span> result<span class="hl sym">;</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>tree<span class="hl sym">-&gt;</span>left <span class="hl sym">==</span> NULL<span class="hl sym">)</span>
        result <span class="hl sym">=</span> tree<span class="hl sym">-&gt;</span>item<span class="hl sym">;</span>
    <span class="hl kwa">else</span>
        result <span class="hl sym">=</span> tree<span class="hl sym">-&gt;</span>item <span class="hl sym">+</span> <span class="hl kwd">ItemCheck</span><span class="hl sym">(</span>tree<span class="hl sym">-&gt;</span>left<span class="hl sym">) -</span> <span class="hl kwd">ItemCheck</span><span class="hl sym">(</span>tree<span class="hl sym">-&gt;</span>right<span class="hl sym">);</span>
    <span class="hl kwa">return</span> result<span class="hl sym">;</span>
<span class="hl sym">}</span> <span class="hl com">/* ItemCheck() */</span>


treeNode<span class="hl sym">*</span> <span class="hl kwd">BottomUpTree</span><span class="hl sym">(</span><span class="hl kwb">long</span> item<span class="hl sym">,</span> <span class="hl kwb">unsigned</span> depth<span class="hl sym">,</span> poolTree<span class="hl sym">*</span> pool<span class="hl sym">)</span>
<span class="hl sym">{</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>depth <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
        <span class="hl kwa">return</span> NewTreeNode
        <span class="hl sym">(</span>
            <span class="hl kwd">BottomUpTree</span><span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> item <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> depth <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> pool<span class="hl sym">),</span>
            <span class="hl kwd">BottomUpTree</span><span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> item<span class="hl sym">,</span> depth <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> pool<span class="hl sym">),</span>
            item<span class="hl sym">,</span>
            pool
        <span class="hl sym">);</span>
    <span class="hl kwa">else</span>
        <span class="hl kwa">return</span> <span class="hl kwd">NewTreeNode</span><span class="hl sym">(</span>NULL<span class="hl sym">,</span> NULL<span class="hl sym">,</span> item<span class="hl sym">,</span> pool<span class="hl sym">);</span>
<span class="hl sym">}</span> <span class="hl com">/* BottomUpTree() */</span>


poolTree<span class="hl sym">*</span> <span class="hl kwd">NewPoolTree</span><span class="hl sym">(</span><span class="hl kwb">long</span> size<span class="hl sym">)</span>
<span class="hl sym">{</span>
    poolTree<span class="hl sym">*</span> <span class="hl kwa">new</span><span class="hl sym">;</span>

    <span class="hl kwa">new</span> <span class="hl sym">= (</span>poolTree<span class="hl sym">*)</span><span class="hl kwd">malloc</span><span class="hl sym">(</span><span class="hl kwa">sizeof</span><span class="hl sym">(</span>poolTree<span class="hl sym">));</span>

    <span class="hl kwa">new</span><span class="hl sym">-&gt;</span>pool <span class="hl sym">= (</span>treeNode<span class="hl sym">*)</span><span class="hl kwd">malloc</span><span class="hl sym">(</span>size <span class="hl sym">*</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span>treeNode<span class="hl sym">));</span>
    <span class="hl kwa">new</span><span class="hl sym">-&gt;</span><span class="hl kwa">new</span> <span class="hl sym">=</span> <span class="hl kwa">new</span><span class="hl sym">-&gt;</span>pool<span class="hl sym">;</span>

   <span class="hl kwa">return new</span><span class="hl sym">;</span>
<span class="hl sym">}</span> <span class="hl com">/* NewPoolTree() */</span>


<span class="hl kwb">void</span> <span class="hl kwd">DeletePoolTree</span><span class="hl sym">(</span>poolTree<span class="hl sym">*</span> pool<span class="hl sym">)</span>
<span class="hl sym">{</span>
    <span class="hl kwd">free</span><span class="hl sym">(</span>pool<span class="hl sym">-&gt;</span>pool<span class="hl sym">);</span>
    <span class="hl kwd">free</span><span class="hl sym">(</span>pool<span class="hl sym">);</span>
<span class="hl sym">}</span> <span class="hl com">/* DeletePoolTree() */</span>


<span class="hl kwb">int</span> <span class="hl kwd">GetMaxThread</span><span class="hl sym">()</span>
<span class="hl sym">{</span>
    <span class="hl kwb">unsigned</span> i<span class="hl sym">,</span> count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    cpu_set_t cpuset<span class="hl sym">;</span>
    <span class="hl kwd">CPU_ZERO</span><span class="hl sym">(&amp;</span>cpuset<span class="hl sym">);</span>
    <span class="hl kwd">sched_getaffinity</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span>cpuset<span class="hl sym">), &amp;</span>cpuset<span class="hl sym">);</span>

    <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">8</span><span class="hl sym">;</span> i<span class="hl sym">++)</span>
    <span class="hl sym">{</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">CPU_ISSET</span><span class="hl sym">(</span>i<span class="hl sym">, &amp;</span>cpuset<span class="hl sym">))</span>
            count<span class="hl sym">++;</span>
    <span class="hl sym">}</span>
    <span class="hl kwa">return</span> count<span class="hl sym">;</span>
<span class="hl sym">}</span> <span class="hl com">/* GetMaxThread() */</span>


<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span><span class="hl sym">*</span> argv<span class="hl sym">[])</span>
<span class="hl sym">{</span>
    <span class="hl kwb">unsigned</span>   N<span class="hl sym">,</span> minDepth<span class="hl sym">,</span> maxDepth<span class="hl sym">,</span> stretchDepth<span class="hl sym">;</span>
    <span class="hl kwb">long</span> depth<span class="hl sym">;</span>
    treeNode   <span class="hl sym">*</span>stretchTree<span class="hl sym">, *</span>longLivedTree<span class="hl sym">;</span>
    poolTree <span class="hl sym">*</span>pool<span class="hl sym">;</span>

    N <span class="hl sym">=</span> <span class="hl kwd">atol</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]);</span>

    minDepth <span class="hl sym">=</span> <span class="hl num">4</span><span class="hl sym">;</span>

    <span class="hl kwa">if</span> <span class="hl sym">((</span>minDepth <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">) &gt;</span> N<span class="hl sym">)</span>
        maxDepth <span class="hl sym">=</span> minDepth <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">;</span>
    <span class="hl kwa">else</span>
        maxDepth <span class="hl sym">=</span> N<span class="hl sym">;</span>

    stretchDepth <span class="hl sym">=</span> maxDepth <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>

    pool <span class="hl sym">=</span> <span class="hl kwd">NewPoolTree</span><span class="hl sym">((</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>stretchDepth <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)) -</span><span class="hl num">1</span><span class="hl sym">);</span>
    stretchTree <span class="hl sym">=</span> <span class="hl kwd">BottomUpTree</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> stretchDepth<span class="hl sym">,</span> pool<span class="hl sym">);</span>
    printf
    <span class="hl sym">(</span>
        <span class="hl str">&quot;stretch tree of depth %u</span><span class="hl esc">\t</span> <span class="hl str">check: %li</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span>
        stretchDepth<span class="hl sym">,</span>
        <span class="hl kwd">ItemCheck</span><span class="hl sym">(</span>stretchTree<span class="hl sym">)</span>
    <span class="hl sym">);</span>
    <span class="hl kwd">DeletePoolTree</span><span class="hl sym">(</span>pool<span class="hl sym">);</span>

    pool <span class="hl sym">=</span> <span class="hl kwd">NewPoolTree</span><span class="hl sym">((</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>maxDepth <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)) -</span><span class="hl num">1</span><span class="hl sym">);</span>
    longLivedTree <span class="hl sym">=</span> <span class="hl kwd">BottomUpTree</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> maxDepth<span class="hl sym">,</span> pool<span class="hl sym">);</span>

    treeCheck <span class="hl sym">*</span>treeChecks <span class="hl sym">= (</span>treeCheck<span class="hl sym">*)</span><span class="hl kwd">malloc</span><span class="hl sym">(</span>stretchDepth <span class="hl sym">*</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span>treeCheck<span class="hl sym">));</span>

<span class="hl dir">#pragma omp parallel for default(shared) num_threads(GetMaxThread()) schedule(dynamic, 1)</span>
    <span class="hl kwa">for</span> <span class="hl sym">(</span>depth <span class="hl sym">=</span> minDepth<span class="hl sym">;</span> depth <span class="hl sym">&lt;=</span> maxDepth<span class="hl sym">;</span> depth <span class="hl sym">+=</span> <span class="hl num">2</span><span class="hl sym">)</span>
    <span class="hl sym">{</span>
        <span class="hl kwb">long</span>    i<span class="hl sym">,</span> iterations<span class="hl sym">,</span> check<span class="hl sym">;</span>
        poolTree <span class="hl sym">*</span>ompPool<span class="hl sym">;</span>

        iterations <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>maxDepth <span class="hl sym">-</span> depth <span class="hl sym">+</span> minDepth<span class="hl sym">);</span>

        check <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

        <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span> i <span class="hl sym">&lt;=</span> iterations<span class="hl sym">;</span> i<span class="hl sym">++)</span>
        <span class="hl sym">{</span>
            ompPool <span class="hl sym">=</span> <span class="hl kwd">NewPoolTree</span><span class="hl sym">((</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>depth <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)) -</span><span class="hl num">1</span><span class="hl sym">);</span>
            check <span class="hl sym">+=</span> <span class="hl kwd">ItemCheck</span><span class="hl sym">(</span><span class="hl kwd">BottomUpTree</span><span class="hl sym">(</span>i<span class="hl sym">,</span> depth<span class="hl sym">,</span> ompPool<span class="hl sym">));</span>
            <span class="hl kwd">DeletePoolTree</span><span class="hl sym">(</span>ompPool<span class="hl sym">);</span>
            ompPool <span class="hl sym">=</span> <span class="hl kwd">NewPoolTree</span><span class="hl sym">((</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>depth <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)) -</span><span class="hl num">1</span><span class="hl sym">);</span>
            check <span class="hl sym">+=</span> <span class="hl kwd">ItemCheck</span><span class="hl sym">(</span><span class="hl kwd">BottomUpTree</span><span class="hl sym">(-</span>i<span class="hl sym">,</span> depth<span class="hl sym">,</span> ompPool<span class="hl sym">));</span>
            <span class="hl kwd">DeletePoolTree</span><span class="hl sym">(</span>ompPool<span class="hl sym">);</span>
        <span class="hl sym">}</span> <span class="hl com">/* for(i = 1...) */</span>

        treeChecks<span class="hl sym">[</span>depth<span class="hl sym">].</span>iterations <span class="hl sym">=</span> iterations <span class="hl sym">*</span> <span class="hl num">2</span><span class="hl sym">;</span>
        treeChecks<span class="hl sym">[</span>depth<span class="hl sym">].</span>depth <span class="hl sym">=</span> depth<span class="hl sym">;</span>
        treeChecks<span class="hl sym">[</span>depth<span class="hl sym">].</span>check <span class="hl sym">=</span> check<span class="hl sym">;</span>
    <span class="hl sym">}</span> <span class="hl com">/* for(depth = minDepth...) */</span>

    <span class="hl kwa">for</span> <span class="hl sym">(</span>depth <span class="hl sym">=</span> minDepth<span class="hl sym">;</span> depth <span class="hl sym">&lt;=</span> maxDepth<span class="hl sym">;</span> depth <span class="hl sym">+=</span> <span class="hl num">2</span><span class="hl sym">)</span>
    <span class="hl sym">{</span>
        printf
        <span class="hl sym">(</span>
            <span class="hl str">&quot;%li</span><span class="hl esc">\t</span> <span class="hl str">trees of depth %li</span><span class="hl esc">\t</span> <span class="hl str">check: %li</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span>
            treeChecks<span class="hl sym">[</span>depth<span class="hl sym">].</span>iterations<span class="hl sym">,</span>
            treeChecks<span class="hl sym">[</span>depth<span class="hl sym">].</span>depth<span class="hl sym">,</span>
            treeChecks<span class="hl sym">[</span>depth<span class="hl sym">].</span>check
        <span class="hl sym">);</span>
    <span class="hl sym">}</span> <span class="hl com">/* for (depth = minDepth...) */</span>
    <span class="hl kwd">free</span><span class="hl sym">(</span>treeChecks<span class="hl sym">);</span>

    printf
    <span class="hl sym">(</span>
        <span class="hl str">&quot;long lived tree of depth %u</span><span class="hl esc">\t</span> <span class="hl str">check: %li</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span>
        maxDepth<span class="hl sym">,</span>
        <span class="hl kwd">ItemCheck</span><span class="hl sym">(</span>longLivedTree<span class="hl sym">)</span>
    <span class="hl sym">);</span>
    <span class="hl kwd">DeletePoolTree</span><span class="hl sym">(</span>pool<span class="hl sym">);</span>

    <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span> <span class="hl com">/* main() */</span>

