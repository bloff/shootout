<source>
<def></def><slc>#   The Computer Language Shootout</slc><br />
<def></def><slc>#   http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>#</slc><br />
<def></def><slc>#   contributed by: Olof Kraigher</slc><br />
<def></def><br />
<kwa>from</kwa> <def>sys</def> <kwa>import</kwa> <def>argv<br />
<br />
width</def> <sym>=</sym> <def></def><num>5</num><br />
<def>height</def> <sym>=</sym> <def></def><num>10</num><br />
<def><br />
directions</def>  <sym>= {</sym> <def></def><str>&quot;E&quot;</str><def></def> <sym>:</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><str>&quot;NE&quot;</str><def></def> <sym>:</sym> <def></def><num>1</num><def></def><sym>,</sym> <def></def><str>&quot;NW&quot;</str><def></def> <sym>:</sym> <def></def><num>2</num><def></def><sym>,</sym> <def></def><str>&quot;W&quot;</str><def></def> <sym>:</sym> <def></def><num>3</num><def></def><sym>,</sym> <def></def><str>&quot;SW&quot;</str><def></def> <sym>:</sym> <def></def><num>4</num><def></def><sym>,</sym> <def></def><str>&quot;SE&quot;</str><def></def> <sym>:</sym> <def></def><num>5</num><def></def><sym>}</sym><br />
<def>rotate</def>      <sym>= {</sym> <def></def><str>&quot;E&quot;</str><def></def> <sym>:</sym> <def></def><str>&quot;NE&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;NE&quot;</str><def></def> <sym>:</sym> <def></def><str>&quot;NW&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;NW&quot;</str><def></def> <sym>:</sym> <def></def><str>&quot;W&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;W&quot;</str><def></def> <sym>:</sym> <def></def><str>&quot;SW&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;SW&quot;</str><def></def> <sym>:</sym> <def></def><str>&quot;SE&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;SE&quot;</str><def></def> <sym>:</sym> <def></def><str>&quot;E&quot;</str><def></def><sym>}</sym><br />
<def>flip</def>        <sym>= {</sym> <def></def><str>&quot;E&quot;</str><def></def> <sym>:</sym> <def></def><str>&quot;W&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;NE&quot;</str><def></def> <sym>:</sym> <def></def><str>&quot;NW&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;NW&quot;</str><def></def> <sym>:</sym> <def></def><str>&quot;NE&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;W&quot;</str><def></def> <sym>:</sym> <def></def><str>&quot;E&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;SW&quot;</str><def></def> <sym>:</sym> <def></def><str>&quot;SE&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;SE&quot;</str><def></def> <sym>:</sym> <def></def><str>&quot;SW&quot;</str><def></def><sym>}</sym><br />
<def>move</def>        <sym>= {</sym> <def></def><str>&quot;E&quot;</str><def></def> <sym>:</sym> <def></def><kwa>lambda</kwa> <def>x</def><sym>,</sym><def>y</def><sym>: (</sym><def>x</def><sym>+</sym><def></def><num>1</num><def></def><sym>,</sym><def>y</def><sym>),</sym><br />
<def></def>                <str>&quot;W&quot;</str><def></def> <sym>:</sym> <def></def><kwa>lambda</kwa> <def>x</def><sym>,</sym><def>y</def><sym>: (</sym><def>x</def><sym>-</sym><def></def><num>1</num><def></def><sym>,</sym><def>y</def><sym>),</sym><br />
<def></def>                <str>&quot;NE&quot;</str><def></def> <sym>:</sym> <def></def><kwa>lambda</kwa> <def>x</def><sym>,</sym><def>y</def><sym>: (</sym><def>x</def><sym>+(</sym><def>y</def><sym>%</sym><def></def><num>2</num><def></def><sym>),</sym><def>y</def><sym>-</sym><def></def><num>1</num><def></def><sym>),</sym><br />
<def></def>                <str>&quot;NW&quot;</str><def></def> <sym>:</sym> <def></def><kwa>lambda</kwa> <def>x</def><sym>,</sym><def>y</def><sym>: (</sym><def>x</def><sym>+(</sym><def>y</def><sym>%</sym><def></def><num>2</num><def></def><sym>)-</sym><def></def><num>1</num><def></def><sym>,</sym><def>y</def><sym>-</sym><def></def><num>1</num><def></def><sym>),</sym><br />
<def></def>                <str>&quot;SE&quot;</str><def></def> <sym>:</sym> <def></def><kwa>lambda</kwa> <def>x</def><sym>,</sym><def>y</def><sym>: (</sym><def>x</def><sym>+(</sym><def>y</def><sym>%</sym><def></def><num>2</num><def></def><sym>),</sym><def>y</def><sym>+</sym><def></def><num>1</num><def></def><sym>),</sym><br />
<def></def>                <str>&quot;SW&quot;</str><def></def> <sym>:</sym> <def></def><kwa>lambda</kwa> <def>x</def><sym>,</sym><def>y</def><sym>: (</sym><def>x</def><sym>+(</sym><def>y</def><sym>%</sym><def></def><num>2</num><def></def><sym>)-</sym><def></def><num>1</num><def></def><sym>,</sym><def>y</def><sym>+</sym><def></def><num>1</num><def></def><sym>)}</sym><br />
<def><br />
pieces</def> <sym>=   [    [</sym><def></def><str>&quot;E&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;E&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;E&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;SE&quot;</str><def></def><sym>],</sym><br />
<def></def>                <sym>[</sym><def></def><str>&quot;SE&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;SW&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;W&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;SW&quot;</str><def></def><sym>],</sym><br />
<def></def>                <sym>[</sym><def></def><str>&quot;W&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;W&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;SW&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;SE&quot;</str><def></def><sym>],</sym><br />
<def></def>                <sym>[</sym><def></def><str>&quot;E&quot;</str><def></def><sym>,</sym>  <def></def><str>&quot;E&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;SW&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;SE&quot;</str><def></def><sym>],</sym><br />
<def></def>                <sym>[</sym><def></def><str>&quot;NW&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;W&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;NW&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;SE&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;SW&quot;</str><def></def><sym>],</sym><br />
<def></def>                <sym>[</sym><def></def><str>&quot;E&quot;</str><def></def><sym>,</sym>  <def></def><str>&quot;E&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;NE&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;W&quot;</str><def></def><sym>],</sym><br />
<def></def>                <sym>[</sym><def></def><str>&quot;NW&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;NE&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;NE&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;W&quot;</str><def></def><sym>],</sym><br />
<def></def>                <sym>[</sym><def></def><str>&quot;NE&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;SE&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;E&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;NE&quot;</str><def></def><sym>],</sym><br />
<def></def>                <sym>[</sym><def></def><str>&quot;SE&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;SE&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;E&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;SE&quot;</str><def></def><sym>],</sym><br />
<def></def>                <sym>[</sym><def></def><str>&quot;E&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;NW&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;NW&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;NW&quot;</str><def></def><sym>]]</sym><br />
<def><br />
solutions</def> <sym>= []</sym><br />
<def>masks</def> <sym>= [</sym><def></def><num>0</num> <def></def><kwa>for</kwa> <def>i</def> <kwa>in</kwa> <def></def><kwb>xrange</kwb><def></def><sym>(</sym><def></def><num>10</num><def></def><sym>)]</sym><br />
<def><br />
valid</def> <sym>=</sym> <def></def><kwa>lambda</kwa> <def>x</def><sym>,</sym><def>y</def><sym>: (</sym><def></def><num>0</num> <def></def><sym>&lt;=</sym> <def>x</def><sym>)</sym> <def></def><kwa>and</kwa> <def></def><sym>(</sym><def>x</def> <sym>&lt;</sym> <def>width</def><sym>)</sym> <def></def><kwa>and</kwa> <def></def><sym>(</sym><def></def><num>0</num> <def></def><sym>&lt;=</sym> <def>y</def><sym>)</sym> <def></def><kwa>and</kwa> <def></def><sym>(</sym><def>y</def> <sym>&lt;</sym> <def>height</def><sym>)</sym><br />
<def>legal</def> <sym>=</sym> <def></def><kwa>lambda</kwa> <def>mask</def><sym>,</sym><def>board</def><sym>: (</sym><def>mask</def> <sym>&amp;</sym> <def>board</def><sym>) ==</sym> <def></def><num>0</num><br />
<def>zerocount</def> <sym>=</sym> <def></def><kwa>lambda</kwa> <def>mask</def><sym>:</sym> <def></def><kwb>sum</kwb><def></def><sym>(</sym><def></def><kwb>map</kwb><def></def><sym>(</sym><def></def><kwa>lambda</kwa> <def>x</def><sym>: ((</sym><def></def><num>1</num><def></def><sym>&lt;&lt;</sym><def>x</def><sym>) &amp;</sym> <def>mask</def><sym>) ==</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><kwb>xrange</kwb><def></def><sym>(</sym><def></def><num>50</num><def></def><sym>)))</sym><br />
<def></def><br />
<kwa>def</kwa> <def></def><kwd>findFreeCell</kwd><def></def><sym>(</sym><def>board</def><sym>):</sym><br />
<def></def>    <kwa>for</kwa> <def>y</def> <kwa>in</kwa> <def></def><kwb>xrange</kwb><def></def><sym>(</sym><def>height</def><sym>):</sym><br />
<def></def>        <kwa>for</kwa> <def>x</def> <kwa>in</kwa> <def></def><kwb>xrange</kwb><def></def><sym>(</sym><def>width</def><sym>):</sym><br />
<def></def>            <kwa>if</kwa> <def>board</def> <sym>&amp; (</sym><def></def><num>1</num> <def></def><sym>&lt;&lt; (</sym><def>x</def> <sym>+</sym> <def>width</def><sym>*</sym><def>y</def><sym>)) ==</sym> <def></def><num>0</num><def></def><sym>:</sym><br />
<def></def>                <kwa>return</kwa> <def>x</def><sym>,</sym><def>y</def><br />
<br />
<br />
<kwa>def</kwa> <def></def><kwd>floodFill</kwd><def></def><sym>(</sym><def>board</def><sym>, (</sym><def>x</def><sym>,</sym> <def>y</def><sym>)):</sym><br />
<def></def>    <kwa>if not</kwa> <def></def><kwd>valid</kwd><def></def><sym>(</sym><def>x</def><sym>,</sym><def>y</def><sym>):</sym><br />
<def></def>        <kwa>return</kwa> <def>board</def><br />
    <kwa>if</kwa> <def>board</def> <sym>&amp; (</sym><def></def><num>1</num> <def></def><sym>&lt;&lt; (</sym><def>x</def> <sym>+</sym> <def>width</def><sym>*</sym><def>y</def><sym>)) !=</sym> <def></def><num>0</num><def></def><sym>:</sym><br />
<def></def>        <kwa>return</kwa> <def>board<br />
<br />
    board</def> <sym>=</sym> <def>board</def> <sym>| (</sym><def></def><num>1</num> <def></def><sym>&lt;&lt; (</sym><def>x</def> <sym>+</sym> <def>width</def><sym>*</sym><def>y</def><sym>))</sym><br />
<def></def><br />
    <kwa>for</kwa> <def>f</def> <kwa>in</kwa> <def>move</def><sym>.</sym><def></def><kwd>values</kwd><def></def><sym>():</sym><br />
<def>        board</def> <sym>=</sym> <def>board</def> <sym>|</sym> <def></def><kwd>floodFill</kwd><def></def><sym>(</sym><def>board</def><sym>,</sym> <def></def><kwd>f</kwd><def></def><sym>(</sym><def>x</def><sym>,</sym><def>y</def><sym>))</sym><br />
<def></def><br />
    <kwa>return</kwa> <def>board</def><br />
<br />
<kwa>def</kwa> <def></def><kwd>noIslands</kwd><def></def><sym>(</sym><def>mask</def><sym>):</sym><br />
<def>    zeroes</def> <sym>=</sym> <def></def><kwd>zerocount</kwd><def></def><sym>(</sym><def>mask</def><sym>)</sym><br />
<def></def><br />
    <kwa>if</kwa> <def>zeroes</def> <sym>&lt;</sym> <def></def><num>5</num><def></def><sym>:</sym><br />
<def></def>        <kwa>return False</kwa><br />
<def></def><br />
    <kwa>while</kwa> <def>mask</def> <sym>!=</sym> <def></def><num>0x3FFFFFFFFFFFF</num><def></def><sym>:</sym><br />
<def>        mask</def> <sym>=</sym> <def></def><kwd>floodFill</kwd><def></def><sym>(</sym><def>mask</def><sym>,</sym> <def></def><kwd>findFreeCell</kwd><def></def><sym>(</sym><def>mask</def><sym>))</sym><br />
<def>        new_zeroes</def> <sym>=</sym> <def></def><kwd>zerocount</kwd><def></def><sym>(</sym><def>mask</def><sym>)</sym><br />
<def></def><br />
        <kwa>if</kwa> <def>zeroes</def> <sym>-</sym> <def>new_zeroes</def> <sym>&lt;</sym> <def></def><num>5</num><def></def><sym>:</sym><br />
<def></def>            <kwa>return False</kwa><br />
<def><br />
        zeroes</def> <sym>=</sym> <def>new_zeroes</def><br />
<br />
    <kwa>return True</kwa><br />
<def></def><br />
<kwa>def</kwa> <def></def><kwd>getBitmask</kwd><def></def><sym>(</sym><def>x</def><sym>,</sym><def>y</def><sym>,</sym><def>piece</def><sym>):</sym><br />
<def>    mask</def> <sym>= (</sym><def></def><num>1</num> <def></def><sym>&lt;&lt; (</sym><def>x</def> <sym>+</sym> <def>width</def><sym>*</sym><def>y</def><sym>))</sym><br />
<def></def><br />
    <kwa>for</kwa> <def>cell</def> <kwa>in</kwa> <def>piece</def><sym>:</sym><br />
<def>        x</def><sym>,</sym><def>y</def> <sym>=</sym> <def>move</def><sym>[</sym><def>cell</def><sym>](</sym><def>x</def><sym>,</sym><def>y</def><sym>)</sym><br />
<def></def>        <kwa>if</kwa> <def></def><kwd>valid</kwd><def></def><sym>(</sym><def>x</def><sym>,</sym><def>y</def><sym>):</sym><br />
<def>            mask</def> <sym>=</sym> <def>mask</def> <sym>| (</sym><def></def><num>1</num> <def></def><sym>&lt;&lt; (</sym><def>x</def> <sym>+</sym> <def>width</def><sym>*</sym><def>y</def><sym>))</sym><br />
<def></def>        <kwa>else</kwa><def></def><sym>:</sym><br />
<def></def>            <kwa>return False</kwa><def></def><sym>,</sym> <def></def><num>0</num><br />
<def></def><br />
    <kwa>return True</kwa><def></def><sym>,</sym> <def>mask</def><br />
<br />
<kwa>def</kwa> <def></def><kwd>allBitmasks</kwd><def></def><sym>(</sym><def>piece</def><sym>,</sym> <def>color</def><sym>):</sym><br />
<def>    bitmasks</def> <sym>= []</sym><br />
<def></def>    <kwa>for</kwa> <def>orientations</def> <kwa>in</kwa> <def></def><kwb>xrange</kwb><def></def><sym>(</sym><def></def><num>2</num><def></def><sym>):</sym><br />
<def></def>        <kwa>for</kwa> <def>rotations</def> <kwa>in</kwa> <def></def><kwb>xrange</kwb><def></def><sym>(</sym><def></def><num>6</num> <def></def><sym>-</sym> <def></def><num>3</num><def></def><sym>*(</sym><def>color</def> <sym>==</sym> <def></def><num>4</num><def></def><sym>)):</sym><br />
<def></def>            <kwa>for</kwa> <def>y</def> <kwa>in</kwa> <def></def><kwb>xrange</kwb><def></def><sym>(</sym><def>height</def><sym>):</sym><br />
<def></def>                <kwa>for</kwa> <def>x</def> <kwa>in</kwa> <def></def><kwb>xrange</kwb><def></def><sym>(</sym><def>width</def><sym>):</sym><br />
<def>                    isValid</def><sym>,</sym> <def>mask</def> <sym>=</sym> <def></def><kwd>getBitmask</kwd><def></def><sym>(</sym><def>x</def><sym>,</sym><def>y</def><sym>,</sym><def>piece</def><sym>)</sym><br />
<def></def>                    <kwa>if</kwa> <def>isValid</def> <kwa>and</kwa> <def></def><kwd>noIslands</kwd><def></def><sym>(</sym><def>mask</def><sym>):</sym><br />
<def>                        bitmasks</def><sym>.</sym><def></def><kwd>append</kwd><def></def><sym>(</sym><def>mask</def><sym>)</sym><br />
<def><br />
            piece</def> <sym>=</sym> <def></def><kwb>map</kwb><def></def><sym>(</sym><def></def><kwa>lambda</kwa> <def>cell</def><sym>:</sym> <def>rotate</def><sym>[</sym><def>cell</def><sym>],</sym> <def>piece</def><sym>)</sym><br />
<def>        piece</def> <sym>=</sym> <def></def><kwb>map</kwb><def></def><sym>(</sym><def></def><kwa>lambda</kwa> <def>cell</def><sym>:</sym> <def>flip</def><sym>[</sym><def>cell</def><sym>],</sym> <def>piece</def><sym>)</sym><br />
<def></def><br />
<br />
    <kwa>return</kwa> <def>bitmasks</def><br />
<br />
<kwa>def</kwa> <def></def><kwd>generateBitmasks</kwd><def></def><sym>():</sym><br />
<def></def><br />
    <kwa>global</kwa> <def>masksAtCell<br />
<br />
    masksAtCell</def> <sym>= [[[]</sym> <def></def><kwa>for</kwa> <def>j</def> <kwa>in</kwa> <def></def><kwb>xrange</kwb><def></def><sym>(</sym><def></def><num>10</num><def></def><sym>)]</sym> <def></def><kwa>for</kwa> <def>i</def> <kwa>in</kwa> <def></def><kwb>xrange</kwb><def></def><sym>(</sym><def>width</def><sym>*</sym><def>height</def><sym>)]</sym><br />
<def><br />
    color</def> <sym>=</sym> <def></def><num>0</num><br />
<def></def>    <kwa>for</kwa> <def>piece</def> <kwa>in</kwa> <def>pieces</def><sym>:</sym><br />
<def>        masks</def> <sym>=</sym> <def></def><kwd>allBitmasks</kwd><def></def><sym>(</sym><def>piece</def><sym>,</sym> <def>color</def><sym>)</sym><br />
<def>        masks</def><sym>.</sym><def></def><kwd>sort</kwd><def></def><sym>()</sym><br />
<def>        cellMask</def> <sym>=</sym> <def></def><num>1</num> <def></def><sym>&lt;&lt; (</sym><def>width</def><sym>*</sym><def>height</def><sym>-</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def>        cellCounter</def> <sym>=</sym> <def>width</def><sym>*</sym><def>height</def><sym>-</sym><def></def><num>1</num><br />
<def><br />
        j</def> <sym>=</sym> <def></def><kwb>len</kwb><def></def><sym>(</sym><def>masks</def><sym>)-</sym><def></def><num>1</num><br />
<def></def><br />
        <kwa>while</kwa> <def></def><sym>(</sym><def>j</def> <sym>&gt;=</sym> <def></def><num>0</num><def></def><sym>):</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>masks</def><sym>[</sym><def>j</def><sym>] &amp;</sym> <def>cellMask</def><sym>) ==</sym> <def>cellMask</def><sym>:</sym><br />
<def>                masksAtCell</def><sym>[</sym><def>cellCounter</def><sym>][</sym><def>color</def><sym>].</sym><def></def><kwd>append</kwd><def></def><sym>(</sym><def>masks</def><sym>[</sym><def>j</def><sym>])</sym><br />
<def>                j</def> <sym>=</sym> <def>j</def><sym>-</sym><def></def><num>1</num><br />
<def></def>            <kwa>else</kwa><def></def><sym>:</sym><br />
<def>                cellMask</def> <sym>=</sym> <def>cellMask</def> <sym>&gt;&gt;</sym> <def></def><num>1</num><br />
<def>                cellCounter</def> <sym>-=</sym> <def></def><num>1</num><br />
<def>        color</def> <sym>+=</sym> <def></def><num>1</num><br />
<def></def><br />
<br />
<kwa>def</kwa> <def></def><kwd>solveCell</kwd><def></def><sym>(</sym><def>cell</def><sym>,</sym> <def>board</def><sym>,</sym> <def>n</def><sym>):</sym><br />
<def></def><br />
    <kwa>global</kwa> <def>solutions</def><sym>,</sym> <def>masks</def><sym>,</sym> <def>masksAtCell</def><br />
<br />
    <kwa>if</kwa> <def></def><kwb>len</kwb><def></def><sym>(</sym><def>solutions</def><sym>) &gt;=</sym> <def>n</def><sym>:</sym><br />
<def></def>    	<kwa>return</kwa><br />
<def></def><br />
    <kwa>if</kwa> <def>board</def> <sym>==</sym> <def></def><num>0x3FFFFFFFFFFFF</num><def></def><sym>:</sym><br />
<def></def>        <slc># Solved</slc><br />
<def>        s</def> <sym>=</sym> <def></def><kwd>stringOfMasks</kwd><def></def><sym>(</sym><def>masks</def><sym>)</sym><br />
<def>    	solutions</def><sym>.</sym><def></def><kwd>append</kwd><def></def><sym>(</sym><def>s</def><sym>);</sym><br />
<def>    	solutions</def><sym>.</sym><def></def><kwd>append</kwd><def></def><sym>(</sym><def></def><kwd>inverse</kwd><def></def><sym>(</sym><def>s</def><sym>));</sym><br />
<def></def>    	<kwa>return</kwa><br />
<def></def><br />
    <kwa>if</kwa> <def>board</def> <sym>&amp; (</sym><def></def><num>1</num> <def></def><sym>&lt;&lt;</sym> <def>cell</def><sym>) !=</sym> <def></def><num>0</num><def></def><sym>:</sym><br />
<def></def>        <slc># Cell full</slc><br />
<def></def>    	<kwd>solveCell</kwd><def></def><sym>(</sym><def>cell</def><sym>-</sym><def></def><num>1</num><def></def><sym>,</sym> <def>board</def><sym>,</sym> <def>n</def><sym>)</sym><br />
<def></def>    	<kwa>return</kwa><br />
<def></def><br />
    <kwa>if</kwa> <def>cell</def> <sym>&lt;</sym> <def></def><num>0</num><def></def><sym>:</sym><br />
<def></def>    	<slc># Out of board</slc><br />
<def></def>    	<kwa>return</kwa><br />
<def></def><br />
    <kwa>for</kwa> <def>color</def> <kwa>in</kwa> <def></def><kwb>xrange</kwb><def></def><sym>(</sym><def></def><num>10</num><def></def><sym>):</sym><br />
<def></def>    	<kwa>if</kwa> <def>masks</def><sym>[</sym><def>color</def><sym>] ==</sym> <def></def><num>0</num><def></def><sym>:</sym><br />
<def></def>            <kwa>for</kwa> <def>mask</def> <kwa>in</kwa> <def>masksAtCell</def><sym>[</sym><def>cell</def><sym>][</sym><def>color</def><sym>]:</sym><br />
<def></def>                <kwa>if</kwa> <def></def><kwd>legal</kwd><def></def><sym>(</sym><def>mask</def><sym>,</sym> <def>board</def><sym>):</sym><br />
<def>                    masks</def><sym>[</sym><def>color</def><sym>] =</sym> <def>mask</def><br />
                    <kwd>solveCell</kwd><def></def><sym>(</sym><def>cell</def><sym>-</sym><def></def><num>1</num><def></def><sym>,</sym> <def>board</def> <sym>|</sym> <def>mask</def><sym>,</sym> <def>n</def><sym>);</sym><br />
<def>                    masks</def><sym>[</sym><def>color</def><sym>] =</sym> <def></def><num>0</num><br />
<def></def><br />
<kwa>def</kwa> <def></def><kwd>solve</kwd><def></def><sym>(</sym><def>n</def><sym>):</sym><br />
<def></def>    <kwd>generateBitmasks</kwd><def></def><sym>()</sym><br />
<def></def>    <kwd>solveCell</kwd><def></def><sym>(</sym><def>width</def><sym>*</sym><def>height</def><sym>-</sym><def></def><num>1</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>n</def><sym>)</sym><br />
<def></def><br />
<br />
<kwa>def</kwa> <def></def><kwd>stringOfMasks</kwd><def></def><sym>(</sym><def>masks</def><sym>):</sym><br />
<def>    s</def> <sym>=</sym> <def></def><str>&quot;&quot;</str><def><br />
    mask</def> <sym>=</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>    <kwa>for</kwa> <def>y</def> <kwa>in</kwa> <def></def><kwb>xrange</kwb><def></def><sym>(</sym><def>height</def><sym>):</sym><br />
<def></def>        <kwa>for</kwa> <def>x</def> <kwa>in</kwa> <def></def><kwb>xrange</kwb><def></def><sym>(</sym><def>width</def><sym>):</sym><br />
<def></def>            <kwa>for</kwa> <def>color</def> <kwa>in</kwa> <def></def><kwb>xrange</kwb><def></def><sym>(</sym><def></def><num>10</num><def></def><sym>):</sym><br />
<def></def>                <kwa>if</kwa> <def></def><sym>(</sym><def>masks</def><sym>[</sym><def>color</def><sym>] &amp;</sym> <def>mask</def><sym>) !=</sym> <def></def><num>0</num><def></def><sym>:</sym><br />
<def>                    s</def> <sym>+=</sym> <def></def><kwb>str</kwb><def></def><sym>(</sym><def>color</def><sym>)</sym><br />
<def></def>                    <kwa>break</kwa><br />
<def></def>                <kwa>elif</kwa> <def>color</def> <sym>==</sym> <def></def><num>9</num><def></def><sym>:</sym><br />
<def>                    s</def> <sym>+=</sym> <def></def><str>&quot;.&quot;</str><def><br />
            mask</def> <sym>=</sym> <def>mask</def> <sym>&lt;&lt;</sym> <def></def><num>1</num><br />
<def></def>    <kwa>return</kwa> <def>s</def><br />
<br />
<kwa>def</kwa> <def></def><kwd>inverse</kwd><def></def><sym>(</sym><def>s</def><sym>):</sym><br />
<def>    ns</def> <sym>=</sym> <def></def><kwb>map</kwb><def></def><sym>(</sym><def></def><kwa>lambda</kwa> <def>x</def><sym>:</sym><def>x</def><sym>,</sym><def>s</def><sym>)</sym><br />
<def></def><br />
    <kwa>for</kwa> <def>x</def> <kwa>in</kwa> <def></def><kwb>xrange</kwb><def></def><sym>(</sym><def>width</def><sym>):</sym><br />
<def></def>        <kwa>for</kwa> <def>y</def> <kwa>in</kwa> <def></def><kwb>xrange</kwb><def></def><sym>(</sym><def>height</def><sym>):</sym><br />
<def>            ns</def><sym>[</sym><def>x</def> <sym>+</sym> <def>y</def><sym>*</sym><def>width</def><sym>] =</sym> <def>s</def><sym>[</sym><def>width</def><sym>-</sym><def>x</def><sym>-</sym><def></def><num>1</num> <def></def><sym>+ (</sym><def>width</def> <sym>-</sym> <def>y</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>)*</sym><def>width</def><sym>]</sym><br />
<def></def><br />
    <kwa>return</kwa> <def>s</def><br />
<br />
<kwa>def</kwa> <def></def><kwd>printSolution</kwd><def></def><sym>(</sym><def>solution</def><sym>):</sym><br />
<def></def>    <kwa>for</kwa> <def>y</def> <kwa>in</kwa> <def></def><kwb>xrange</kwb><def></def><sym>(</sym><def>height</def><sym>):</sym><br />
<def></def>        <kwa>for</kwa> <def>x</def> <kwa>in</kwa> <def></def><kwb>xrange</kwb><def></def><sym>(</sym><def>width</def><sym>):</sym><br />
<def></def>            <kwa>print</kwa> <def>solution</def><sym>[</sym><def>x</def> <sym>+</sym> <def>y</def><sym>*</sym><def>width</def><sym>],</sym><br />
<def></def><br />
        <kwa>if</kwa> <def></def><sym>(</sym><def>y</def><sym>%</sym><def></def><num>2</num><def></def><sym>) ==</sym> <def></def><num>0</num><def></def><sym>:</sym><br />
<def></def>            <kwa>print</kwa> <def></def><str>&quot;&quot;</str><def></def><br />
            <kwa>print</kwa> <def></def><str>&quot;&quot;</str><def></def><sym>,</sym><br />
<def></def>        <kwa>else</kwa><def></def><sym>:</sym><br />
<def></def>            <kwa>print</kwa> <def></def><str>&quot;&quot;</str><def></def><br />
<br />
<kwa>if</kwa> <def>__name__</def> <sym>==</sym> <def></def><str>&quot;__main__&quot;</str><def></def><sym>:</sym><br />
<def></def><br />
    <kwa>if not</kwa> <def></def><kwb>len</kwb><def></def><sym>(</sym><def>argv</def><sym>) &gt;</sym> <def></def><num>1</num><def></def><sym>:</sym><br />
<def></def>        <kwd>exit</kwd><def></def><sym>()</sym><br />
<def></def><br />
    <kwd>solve</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb><def></def><sym>(</sym><def>argv</def><sym>[</sym><def></def><num>1</num><def></def><sym>]))</sym><br />
<def></def>    <kwa>print</kwa> <def></def><kwb>len</kwb><def></def><sym>(</sym><def>solutions</def><sym>),</sym> <def></def><str>&quot;solutions found&quot;</str><def></def><br />
    <kwa>print</kwa><br />
<def></def>    <kwd>printSolution</kwd><def></def><sym>(</sym><def></def><kwb>min</kwb><def></def><sym>(</sym><def>solutions</def><sym>))</sym><br />
<def></def>    <kwa>print</kwa><br />
<def></def>    <kwd>printSolution</kwd><def></def><sym>(</sym><def></def><kwb>max</kwb><def></def><sym>(</sym><def>solutions</def><sym>))</sym><br />
<def></def>    <kwa>print</kwa><def></def><br />
</source>
