<source>
<def>#</def><sym>!/</sym><def>usr</def><sym>/</sym><def>bin</def><sym>/</sym><def>mzscheme</def> <sym>-</sym><def>r</def><br />
<slc>; The Computer Language Shootout</slc><br />
<def></def><slc>; http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>; Sven Hartrumpf 2005-04-12</slc><br />
<def></def><slc>; Implements 'Spigot' algorithm origionally due to Stanly Rabinowitz.</slc><br />
<def></def><slc>; This program is based on an implementation for SCM by Aubrey Jaffer and</slc><br />
<def></def><slc>; Jerry D. Hedden.</slc><br />
<def></def><br />
<sym>(</sym><def>module pidigits mzscheme</def><br />
<br />
  <sym>(</sym><def>define</def> <sym>(</sym><def>pi n d</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def>let</def><sym>* ((</sym><def>r</def> <sym>(</sym><def>inexact</def><sym>-&gt;</sym><def>exact</def> <sym>(</sym><def>floor</def> <sym>(</sym><def></def><kwa>exp</kwa> <def></def><sym>(*</sym> <def>d</def> <sym>(</sym><def></def><kwa>log</kwa> <def></def><num>10</num><def></def><sym>))))))</sym> <def></def><slc>; 10^d</slc><br />
<def></def>           <sym>(</sym><def>p</def> <sym>(+ (</sym><def>quotient n d</def><sym>)</sym> <def></def><num>1</num><def></def><sym>))</sym><br />
<def></def>           <sym>(</sym><def>m</def> <sym>(</sym><def>quotient</def> <sym>(*</sym> <def>p d</def> <num>3322</num><def></def><sym>)</sym> <def></def><num>1000</num><def></def><sym>))</sym><br />
<def></def>           <sym>(</sym><def>a</def> <sym>(</sym><def>make</def><sym>-</sym><def>vector</def> <sym>(+</sym> <def>m</def> <num>1</num><def></def><sym>)</sym> <def></def><num>2</num><def></def><sym>))</sym><br />
<def></def>	   <sym>(</sym><def>out</def> <sym>(</sym><def>current</def><sym>-</sym><def>output</def><sym>-</sym><def>port</def><sym>)))</sym><br />
<def></def>      <sym>(</sym><def>vector</def><sym>-</sym><def></def><kwa>set</kwa><def></def><sym>!</sym> <def>a m</def> <num>4</num><def></def><sym>)</sym><br />
<def></def>      <sym>(</sym><def>let j</def><sym>-</sym><def>loop</def> <sym>([</sym><def>b</def> <num>2</num><def></def><sym>][</sym><def>digits</def> <num>0</num><def></def><sym>])</sym><br />
<def></def>	<sym>(</sym><def></def><kwa>if</kwa> <def></def><sym>(=</sym> <def>digits n</def><sym>)</sym><br />
<def></def>	    <slc>;; Add whitespace for ungenerated digits</slc><br />
<def></def>	    <sym>(</sym><def>let</def> <sym>([</sym><def>left</def> <sym>(</sym><def>modulo digits</def> <num>10</num><def></def><sym>)])</sym><br />
<def></def>	      <sym>(</sym><def>unless</def> <sym>(</sym><def>zero? left</def><sym>)</sym><br />
<def></def>		<sym>(</sym><def>fprintf out</def> <str>&quot;~a</str><esc>\</esc><str>t:~a</str><esc>\</esc><str>n&quot;</str><def></def> <sym>(</sym><def>make</def><sym>-</sym><def>string</def> <sym>(-</sym> <def></def><num>10</num> <def>left</def><sym>)</sym> <def>#\space</def><sym>)</sym> <def>n</def><sym>)))</sym><br />
<def></def>	    <slc>;; Compute more digits</slc><br />
<def></def>	    <sym>(</sym><def>let loop</def> <sym>([</sym><def>k m</def><sym>][</sym><def>q</def> <num>0</num><def></def><sym>])</sym><br />
<def></def>	      <sym>(</sym><def></def><kwa>if</kwa> <def></def><sym>(</sym><def>zero? k</def><sym>)</sym><br />
<def></def>		  <sym>(</sym><def>let</def><sym>* ((</sym><def>s</def> <sym>(</sym><def>let</def> <sym>([</sym><def>s</def> <sym>(</sym><def>number</def><sym>-&gt;</sym><def>string</def> <sym>(+</sym> <def>b</def> <sym>(</sym><def>quotient q r</def><sym>)))])</sym><br />
<def></def>			      <sym>(</sym><def></def><kwa>if</kwa> <def></def><sym>(</sym><def>zero? digits</def><sym>)</sym><br />
<def>				  s</def><br />
				  <sym>(</sym><def>string</def><sym>-</sym><def></def><kwa>append</kwa> <def></def><sym>(</sym><def>make</def><sym>-</sym><def>string</def> <sym>(-</sym> <def>d</def> <sym>(</sym><def>string</def><sym>-</sym><def></def><kwa>length</kwa> <def>s</def><sym>))</sym> <def>#\</def><num>0</num><def></def><sym>)</sym> <def>s</def><sym>)))))</sym><br />
<def></def>		    <sym>(</sym><def>j</def><sym>-</sym><def>loop</def> <sym>(</sym><def>remainder q r</def><sym>)</sym><br />
<def></def>			    <sym>(</sym><def></def><kwa>print</kwa><def></def><sym>-</sym><def>digits out s</def> <num>0</num> <def></def><sym>(</sym><def>string</def><sym>-</sym><def></def><kwa>length</kwa> <def>s</def><sym>)</sym> <def>digits n</def><sym>)))</sym><br />
<def></def>		  <sym>(</sym><def>let</def> <sym>([</sym><def>q</def> <sym>(+</sym> <def>q</def> <sym>(* (</sym><def>vector</def><sym>-</sym><def>ref a k</def><sym>)</sym> <def>r</def><sym>))])</sym><br />
<def></def>		    <sym>(</sym><def>let</def> <sym>((</sym><def>t</def> <sym>(+ (*</sym> <def>k</def> <num>2</num><def></def><sym>)</sym> <def></def><num>1</num><def></def><sym>)))</sym><br />
<def></def>		      <sym>(</sym><def>let</def><sym>-</sym><def>values</def> <sym>([(</sym><def>qt rr</def><sym>) (</sym><def>quotient</def><sym>/</sym><def>remainder q t</def><sym>)])</sym><br />
<def></def>			<sym>(</sym><def>vector</def><sym>-</sym><def></def><kwa>set</kwa><def></def><sym>!</sym> <def>a k rr</def><sym>)</sym><br />
<def></def>			<sym>(</sym><def>loop</def> <sym>(</sym><def>sub1 k</def><sym>) (*</sym> <def>k qt</def><sym>)))))))))))</sym><br />
<def></def><br />
  <sym>(</sym><def>define</def> <sym>(</sym><def></def><kwa>print</kwa><def></def><sym>-</sym><def>digits out s start end digits n</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def>let</def><sym>* ([</sym><def>len</def> <sym>(-</sym> <def>end start</def><sym>)]</sym><br />
<def></def>	   <sym>[</sym><def>cnt</def> <sym>(</sym><def></def><kwa>min</kwa> <def>len</def> <sym>(-</sym> <def>n digits</def><sym>) (-</sym> <def></def><num>10</num> <def></def><sym>(</sym><def>modulo digits</def> <num>10</num><def></def><sym>))</sym> <def>len</def><sym>)])</sym><br />
<def></def>      <sym>(</sym><def></def><kwa>if</kwa> <def></def><sym>(</sym><def>zero? cnt</def><sym>)</sym><br />
<def>	  digits</def><br />
	  <sym>(</sym><def>begin</def><br />
	    <sym>(</sym><def>write</def><sym>-</sym><def>string s out start</def> <sym>(+</sym> <def>start cnt</def><sym>))</sym><br />
<def></def>	    <sym>(</sym><def>let</def> <sym>([</sym><def>digits</def> <sym>(+</sym> <def>digits cnt</def><sym>)])</sym><br />
<def></def>	      <sym>(</sym><def>when</def> <sym>(</sym><def>zero?</def> <sym>(</sym><def>modulo digits</def> <num>10</num><def></def><sym>))</sym><br />
<def></def>		<sym>(</sym><def>fprintf out</def> <str>&quot;</str><esc>\</esc><str>t:~a</str><esc>\</esc><str>n&quot;</str><def> digits</def><sym>))</sym><br />
<def></def>	      <sym>(</sym><def></def><kwa>print</kwa><def></def><sym>-</sym><def>digits out s</def> <sym>(+</sym> <def>start cnt</def><sym>)</sym> <def>end digits n</def><sym>))))))</sym><br />
<def></def><br />
  <sym>(</sym><def>define</def> <sym>(</sym><def>main args</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def>let</def> <sym>((</sym><def>n</def> <sym>(</sym><def></def><kwa>if</kwa> <def></def><sym>(= (</sym><def>vector</def><sym>-</sym><def></def><kwa>length</kwa> <def>args</def><sym>)</sym> <def></def><num>0</num><def></def><sym>)</sym><br />
<def></def>                 <num>1</num><br />
<def></def>                 <sym>(</sym><def>string</def><sym>-&gt;</sym><def>number</def> <sym>(</sym><def>vector</def><sym>-</sym><def>ref args</def> <num>0</num><def></def><sym>)))))</sym><br />
<def></def>      <sym>(</sym><def>pi n</def> <num>10</num><def></def><sym>)))</sym><br />
<def></def><br />
  <sym>(</sym><def>main</def> <sym>(</sym><def>current</def><sym>-</sym><def></def><kwa>command</kwa><def></def><sym>-</sym><def></def><kwa>line</kwa><def></def><sym>-</sym><def>arguments</def><sym>)))</sym><def></def><br />
</source>
