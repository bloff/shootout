<span class="hl slc">;;   The Computer Language Benchmarks Game</span>
<span class="hl slc">;;   http://shootout.alioth.debian.org/</span>

<span class="hl slc">;; contributed by Andy Fingerhut</span>

<span class="hl sym">(</span>ns knucleotide
  <span class="hl sym">(:</span>gen<span class="hl sym">-</span>class<span class="hl sym">))</span>

<span class="hl sym">(</span>set<span class="hl sym">! *</span>warn<span class="hl sym">-</span>on<span class="hl sym">-</span>reflection<span class="hl sym">*</span> true<span class="hl sym">)</span>


<span class="hl sym">(</span>defn fasta<span class="hl sym">-</span>description<span class="hl sym">-</span>line
<span class="hl slc">;   &quot;Return true when the line l is a FASTA description line&quot;</span>
  <span class="hl sym">[</span>l<span class="hl sym">]</span>
  <span class="hl sym">(=</span> \<span class="hl sym">&gt; (</span>first <span class="hl sym">(</span>seq l<span class="hl sym">))))</span>


<span class="hl sym">(</span>defn fasta<span class="hl sym">-</span>description<span class="hl sym">-</span>line<span class="hl sym">-</span>beginning
<span class="hl slc">;   &quot;Return true when the line l is a FASTA description line that begins</span>
<span class="hl slc">; with the string desc-str.&quot;</span>
  <span class="hl sym">[</span>desc<span class="hl sym">-</span>str l<span class="hl sym">]</span>
  <span class="hl sym">(</span>and <span class="hl sym">(</span>fasta<span class="hl sym">-</span>description<span class="hl sym">-</span>line l<span class="hl sym">)</span>
       <span class="hl sym">(=</span> desc<span class="hl sym">-</span>str <span class="hl sym">(</span>subs l <span class="hl num">1</span> <span class="hl sym">(</span>min <span class="hl sym">(</span>count l<span class="hl sym">) (</span>inc <span class="hl sym">(</span>count desc<span class="hl sym">-</span>str<span class="hl sym">)))))))</span>


<span class="hl sym">(</span>defn fasta<span class="hl sym">-</span>dna<span class="hl sym">-</span>str<span class="hl sym">-</span>with<span class="hl sym">-</span>desc<span class="hl sym">-</span>beginning
<span class="hl slc">;   &quot;Take a sequence of lines from a FASTA format file, and a string</span>
<span class="hl slc">; desc-str.  Look for a FASTA record with a description that begins with</span>
<span class="hl slc">; desc-str, and if one is found, return its DNA sequence as a</span>
<span class="hl slc">; single (potentially quite long) string.  If input file is big, you'll</span>
<span class="hl slc">; save lots of memory if you call this function in a with-open for the</span>
<span class="hl slc">; file, and don't hold on to the head of the lines parameter.&quot;</span>
  <span class="hl sym">[</span>desc<span class="hl sym">-</span>str lines<span class="hl sym">]</span>
  <span class="hl sym">(</span>when<span class="hl sym">-</span>let <span class="hl sym">[</span>x <span class="hl sym">(</span>drop<span class="hl sym">-</span>while <span class="hl sym">(</span>fn <span class="hl sym">[</span>l<span class="hl sym">]</span>
                             <span class="hl sym">(</span>not <span class="hl sym">(</span>fasta<span class="hl sym">-</span>description<span class="hl sym">-</span>line<span class="hl sym">-</span>beginning desc<span class="hl sym">-</span>str
                                                                    l<span class="hl sym">)))</span>
                           lines<span class="hl sym">)]</span>
    <span class="hl sym">(</span>when<span class="hl sym">-</span>let <span class="hl sym">[</span>x <span class="hl sym">(</span>seq x<span class="hl sym">)]</span>
      <span class="hl sym">(</span>let <span class="hl sym">[</span>y <span class="hl sym">(</span>take<span class="hl sym">-</span>while <span class="hl sym">(</span>fn <span class="hl sym">[</span>l<span class="hl sym">] (</span>not <span class="hl sym">(</span>fasta<span class="hl sym">-</span>description<span class="hl sym">-</span>line l<span class="hl sym">)))</span>
                          <span class="hl sym">(</span>map <span class="hl sym">(</span>fn <span class="hl sym">[</span>#^java.lang.String s<span class="hl sym">] (</span>.toUpperCase s<span class="hl sym">))</span>
                               <span class="hl sym">(</span>rest x<span class="hl sym">)))]</span>
        <span class="hl sym">(</span>apply str y<span class="hl sym">)))))</span>


<span class="hl sym">(</span>defn all<span class="hl sym">-</span>equal<span class="hl sym">-</span>len<span class="hl sym">-</span>subs
<span class="hl slc">;   &quot;Returns a sequence of all length len substrings of the string s,</span>
<span class="hl slc">; if (count s) &gt;= len, otherwise nil.&quot;</span>
  <span class="hl sym">[</span>len s<span class="hl sym">]</span>
  <span class="hl sym">(</span>when <span class="hl sym">(&gt;= (</span>count s<span class="hl sym">)</span> len<span class="hl sym">)</span>
    <span class="hl sym">(</span>map #<span class="hl sym">(</span>subs s % <span class="hl sym">(+</span> % len<span class="hl sym">)) (</span>range <span class="hl sym">(</span>inc <span class="hl sym">(- (</span>count s<span class="hl sym">)</span> len<span class="hl sym">))))))</span>


<span class="hl sym">(</span>defn tally<span class="hl sym">-</span>helper
  <span class="hl sym">[</span>h things<span class="hl sym">]</span>
  <span class="hl sym">(</span>if<span class="hl sym">-</span>let <span class="hl sym">[</span>r <span class="hl sym">(</span>seq things<span class="hl sym">)]</span>
    <span class="hl sym">(</span>let <span class="hl sym">[</span>key <span class="hl sym">(</span>first r<span class="hl sym">)]</span>
      <span class="hl sym">(</span>recur <span class="hl sym">(</span>assoc<span class="hl sym">!</span> h key <span class="hl sym">(</span>inc <span class="hl sym">(</span>get h key <span class="hl num">0</span><span class="hl sym">))) (</span>rest r<span class="hl sym">)))</span>
    h<span class="hl sym">))</span>


<span class="hl sym">(</span>defn tally
<span class="hl slc">;   &quot;Take a sequence things, and return a hash map h whose keys are the</span>
<span class="hl slc">; set of unique objects in the sequence, and where (h obj) is equal to</span>
<span class="hl slc">; the number of times obj occurs in the sequence.  Splitting it into</span>
<span class="hl slc">; this and a helper function is a little odd, but when I had a more</span>
<span class="hl slc">; straightforward single function for this in Clojure 1.1 alpha, it</span>
<span class="hl slc">; 'kept the head' of the sequence and used excessive memory.&quot;</span>
  <span class="hl sym">[</span>things<span class="hl sym">]</span>
  <span class="hl sym">(</span>persistent<span class="hl sym">! (</span>tally<span class="hl sym">-</span>helper <span class="hl sym">(</span>transient <span class="hl sym">{})</span> things<span class="hl sym">)))</span>


<span class="hl sym">(</span>defn all<span class="hl sym">-</span>tally<span class="hl sym">-</span>to<span class="hl sym">-</span>str
  <span class="hl sym">[</span>tally<span class="hl sym">]</span>
  <span class="hl sym">(</span>with<span class="hl sym">-</span>out<span class="hl sym">-</span>str
    <span class="hl sym">(</span>let <span class="hl sym">[</span>total <span class="hl sym">(</span>reduce <span class="hl sym">+ (</span>vals tally<span class="hl sym">))]</span>
      <span class="hl sym">(</span>doseq <span class="hl sym">[</span>k <span class="hl sym">(</span>sort #<span class="hl sym">(&gt;= (</span>tally %<span class="hl num">1</span><span class="hl sym">) (</span>tally %<span class="hl num">2</span><span class="hl sym">))</span> <span class="hl slc">; sort by tally, largest first</span>
                      <span class="hl sym">(</span>keys tally<span class="hl sym">))]</span>
        <span class="hl sym">(</span>println <span class="hl sym">(</span>format <span class="hl str">&quot;%s %.3f&quot;</span> k
                         <span class="hl sym">(</span>double <span class="hl sym">(*</span> <span class="hl num">100</span> <span class="hl sym">(/ (</span>tally k<span class="hl sym">)</span> total<span class="hl sym">)))))))))</span>


<span class="hl sym">(</span>defn one<span class="hl sym">-</span>tally<span class="hl sym">-</span>to<span class="hl sym">-</span>str
  <span class="hl sym">[</span>key tally<span class="hl sym">]</span>
  <span class="hl sym">(</span>format <span class="hl str">&quot;%d</span><span class="hl esc">\</span><span class="hl str">t%s&quot;</span> <span class="hl sym">(</span>get tally key <span class="hl num">0</span><span class="hl sym">)</span> key<span class="hl sym">))</span>


<span class="hl sym">(</span>defn <span class="hl sym">-</span>main <span class="hl sym">[&amp;</span> args<span class="hl sym">]</span>
  <span class="hl sym">(</span>with<span class="hl sym">-</span>open <span class="hl sym">[</span>br <span class="hl sym">(</span>java.io.BufferedReader. <span class="hl sym">*</span>in<span class="hl sym">*)]</span>
    <span class="hl sym">(</span>let <span class="hl sym">[</span>dna<span class="hl sym">-</span>str <span class="hl sym">(</span>fasta<span class="hl sym">-</span>dna<span class="hl sym">-</span>str<span class="hl sym">-</span>with<span class="hl sym">-</span>desc<span class="hl sym">-</span>beginning <span class="hl str">&quot;THREE&quot;</span> <span class="hl sym">(</span>line<span class="hl sym">-</span>seq br<span class="hl sym">))]</span>
      <span class="hl sym">(</span>flush<span class="hl sym">)</span>
      <span class="hl sym">(</span>let <span class="hl sym">[</span>tally1 <span class="hl sym">(</span>all<span class="hl sym">-</span>tally<span class="hl sym">-</span>to<span class="hl sym">-</span>str <span class="hl sym">(</span>tally <span class="hl sym">(</span>all<span class="hl sym">-</span>equal<span class="hl sym">-</span>len<span class="hl sym">-</span>subs <span class="hl num">1</span> dna<span class="hl sym">-</span>str<span class="hl sym">)))]</span>
        <span class="hl sym">(</span>println tally1<span class="hl sym">))</span>
      <span class="hl sym">(</span>flush<span class="hl sym">)</span>
      <span class="hl sym">(</span>let <span class="hl sym">[</span>tally2 <span class="hl sym">(</span>all<span class="hl sym">-</span>tally<span class="hl sym">-</span>to<span class="hl sym">-</span>str <span class="hl sym">(</span>tally <span class="hl sym">(</span>all<span class="hl sym">-</span>equal<span class="hl sym">-</span>len<span class="hl sym">-</span>subs <span class="hl num">2</span> dna<span class="hl sym">-</span>str<span class="hl sym">)))]</span>
        <span class="hl sym">(</span>println tally2<span class="hl sym">))</span>
      <span class="hl sym">(</span>flush<span class="hl sym">)</span>
      <span class="hl sym">(</span>let <span class="hl sym">[</span>tally3 <span class="hl sym">(</span>one<span class="hl sym">-</span>tally<span class="hl sym">-</span>to<span class="hl sym">-</span>str <span class="hl str">&quot;GGT&quot;</span>
                                     <span class="hl sym">(</span>tally <span class="hl sym">(</span>all<span class="hl sym">-</span>equal<span class="hl sym">-</span>len<span class="hl sym">-</span>subs <span class="hl num">3</span> dna<span class="hl sym">-</span>str<span class="hl sym">)))]</span>
        <span class="hl sym">(</span>println tally3<span class="hl sym">))</span>
      <span class="hl sym">(</span>flush<span class="hl sym">)</span>
      <span class="hl sym">(</span>let <span class="hl sym">[</span>tally4 <span class="hl sym">(</span>one<span class="hl sym">-</span>tally<span class="hl sym">-</span>to<span class="hl sym">-</span>str <span class="hl str">&quot;GGTA&quot;</span>
                                     <span class="hl sym">(</span>tally <span class="hl sym">(</span>all<span class="hl sym">-</span>equal<span class="hl sym">-</span>len<span class="hl sym">-</span>subs <span class="hl num">4</span> dna<span class="hl sym">-</span>str<span class="hl sym">)))]</span>
        <span class="hl sym">(</span>println tally4<span class="hl sym">))</span>
      <span class="hl sym">(</span>flush<span class="hl sym">)</span>
      <span class="hl sym">(</span>let <span class="hl sym">[</span>tally6 <span class="hl sym">(</span>one<span class="hl sym">-</span>tally<span class="hl sym">-</span>to<span class="hl sym">-</span>str <span class="hl str">&quot;GGTATT&quot;</span>
                                     <span class="hl sym">(</span>tally <span class="hl sym">(</span>all<span class="hl sym">-</span>equal<span class="hl sym">-</span>len<span class="hl sym">-</span>subs <span class="hl num">6</span> dna<span class="hl sym">-</span>str<span class="hl sym">)))]</span>
        <span class="hl sym">(</span>println tally6<span class="hl sym">))</span>
      <span class="hl sym">(</span>flush<span class="hl sym">)</span>
      <span class="hl sym">(</span>let <span class="hl sym">[</span>tally12 <span class="hl sym">(</span>one<span class="hl sym">-</span>tally<span class="hl sym">-</span>to<span class="hl sym">-</span>str <span class="hl str">&quot;GGTATTTTAATT&quot;</span>
                                      <span class="hl sym">(</span>tally <span class="hl sym">(</span>all<span class="hl sym">-</span>equal<span class="hl sym">-</span>len<span class="hl sym">-</span>subs <span class="hl num">12</span> dna<span class="hl sym">-</span>str<span class="hl sym">)))]</span>
        <span class="hl sym">(</span>println tally12<span class="hl sym">))</span>
      <span class="hl sym">(</span>flush<span class="hl sym">)</span>
      <span class="hl sym">(</span>let <span class="hl sym">[</span>tally18 <span class="hl sym">(</span>one<span class="hl sym">-</span>tally<span class="hl sym">-</span>to<span class="hl sym">-</span>str <span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span>
                                      <span class="hl sym">(</span>tally <span class="hl sym">(</span>all<span class="hl sym">-</span>equal<span class="hl sym">-</span>len<span class="hl sym">-</span>subs <span class="hl num">18</span> dna<span class="hl sym">-</span>str<span class="hl sym">)))]</span>
        <span class="hl sym">(</span>println tally18<span class="hl sym">))</span>
      <span class="hl sym">(</span>flush<span class="hl sym">)))</span>
  <span class="hl sym">(</span>. System <span class="hl sym">(</span>exit <span class="hl num">0</span><span class="hl sym">)))</span>
