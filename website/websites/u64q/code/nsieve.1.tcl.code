<span class="hl slc"># The Great Computer Language Shootout</span>
<span class="hl slc"># http://shootout.alioth.debian.org/</span>
<span class="hl slc">#</span>
<span class="hl slc"># contributed by Robert Seeger and Simon Geard</span>


<span class="hl kwa">package</span> require <span class="hl kwa">Tcl</span> <span class="hl num">8.4</span>

<span class="hl kwa">proc</span> main <span class="hl sym">{</span>n<span class="hl sym">} {</span>
    <span class="hl kwa">foreach</span> value <span class="hl sym">[</span><span class="hl kwa">list</span> <span class="hl kwb">$n</span> <span class="hl sym">[</span><span class="hl kwa">incr</span> n <span class="hl kwc">-1</span><span class="hl sym">] [</span><span class="hl kwa">incr</span> n <span class="hl kwc">-1</span><span class="hl sym">]] {</span>
        <span class="hl kwa">set</span> num <span class="hl sym">[</span><span class="hl kwa">expr</span> <span class="hl sym">{</span> int<span class="hl sym">(</span>pow<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">,</span> <span class="hl kwb">$value</span><span class="hl sym">) *</span> <span class="hl num">10000</span><span class="hl sym">) }]</span>
        <span class="hl kwa">puts</span> <span class="hl sym">[</span><span class="hl kwa">format</span> <span class="hl str">&quot;Primes up to %8d %8d&quot;</span> <span class="hl kwb">$num</span> <span class="hl sym">[</span>nsieve <span class="hl kwb">$num</span><span class="hl sym">]]</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwa">proc</span> nsieve <span class="hl sym">{</span>n<span class="hl sym">} {</span>
    <span class="hl kwa">set</span> data <span class="hl sym">{}</span>
    <span class="hl kwa">for</span> <span class="hl sym">{</span><span class="hl kwa">set</span> i <span class="hl num">0</span><span class="hl sym">} {</span><span class="hl kwb">$i</span> <span class="hl sym">&lt;=</span> <span class="hl kwb">$n</span><span class="hl sym">} {</span><span class="hl kwa">incr</span> i<span class="hl sym">} {</span>
        <span class="hl kwa">lappend</span> data <span class="hl num">1</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">set</span> count <span class="hl num">0</span>
    <span class="hl kwa">for</span> <span class="hl sym">{</span><span class="hl kwa">set</span> i <span class="hl num">2</span><span class="hl sym">} {</span><span class="hl kwb">$i</span> <span class="hl sym">&lt;=</span> <span class="hl kwb">$n</span><span class="hl sym">} {</span><span class="hl kwa">incr</span> i<span class="hl sym">} {</span>
        <span class="hl kwa">if</span> <span class="hl sym">{ [</span><span class="hl kwa">lindex</span> <span class="hl kwb">$data $i</span><span class="hl sym">] } {</span>
            <span class="hl kwa">for</span> <span class="hl sym">{</span><span class="hl kwa">set</span> j <span class="hl sym">[</span><span class="hl kwa">expr</span> <span class="hl sym">{</span><span class="hl kwb">$i</span> <span class="hl sym">+</span> <span class="hl kwb">$i</span><span class="hl sym">}]} {</span><span class="hl kwb">$j</span> <span class="hl sym">&lt;=</span> <span class="hl kwb">$n</span><span class="hl sym">} {</span><span class="hl kwa">incr</span> j <span class="hl kwb">$i</span><span class="hl sym">} {</span>
                <span class="hl kwa">lset</span> data <span class="hl kwb">$j</span> <span class="hl num">0</span>
            <span class="hl sym">}</span>
            <span class="hl kwa">incr</span> count
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">return</span> <span class="hl kwb">$count</span>
<span class="hl sym">}</span>

main <span class="hl sym">[</span><span class="hl kwa">lindex</span> <span class="hl kwb">$argv</span> <span class="hl num">0</span><span class="hl sym">]</span>
