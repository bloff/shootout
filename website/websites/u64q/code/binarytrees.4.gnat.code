<span class="hl slc">--  The Computer Language Benchmarks Game</span>
<span class="hl slc">--  http://shootout.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">--  Based on Ada versions created by</span>
<span class="hl slc">--    Jim Rogers and Brian Drummons as well as the</span>
<span class="hl slc">--    C version by Francesco Abbate</span>
<span class="hl slc">--</span>
<span class="hl slc">--  Contributed by Brad Moore</span>

<span class="hl kwa">with</span> Trees<span class="hl sym">;</span>                  <span class="hl kwa">use</span> Trees<span class="hl sym">;</span>
<span class="hl kwa">with</span> Ada<span class="hl sym">.</span>Text_IO<span class="hl sym">;</span>            <span class="hl kwa">use</span> Ada<span class="hl sym">.</span>Text_IO<span class="hl sym">;</span>
<span class="hl kwa">with</span> Ada<span class="hl sym">.</span>Integer_Text_IO<span class="hl sym">;</span>    <span class="hl kwa">use</span> Ada<span class="hl sym">.</span>Integer_Text_IO<span class="hl sym">;</span>
<span class="hl kwa">with</span> Ada<span class="hl sym">.</span>Command_Line<span class="hl sym">;</span>       <span class="hl kwa">use</span> Ada<span class="hl sym">.</span>Command_Line<span class="hl sym">;</span>
<span class="hl kwa">with</span> Ada<span class="hl sym">.</span>Characters<span class="hl sym">.</span>Latin_1<span class="hl sym">;</span> <span class="hl kwa">use</span> Ada<span class="hl sym">.</span>Characters<span class="hl sym">.</span>Latin_1<span class="hl sym">;</span>

<span class="hl kwa">procedure</span> Binarytrees <span class="hl kwa">is</span>

   <span class="hl kwa">function</span> Get_Depth <span class="hl kwa">return</span> <span class="hl kwb">Positive</span> <span class="hl kwa">is</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">if</span> Argument_Count <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
         <span class="hl kwa">return</span> <span class="hl kwb">Positive</span>'Value <span class="hl sym">(</span>Argument <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">));</span>
      <span class="hl kwa">else</span>
         <span class="hl kwa">return</span> <span class="hl num">10</span><span class="hl sym">;</span>
      <span class="hl kwa">end if</span><span class="hl sym">;</span>
   <span class="hl kwa">end</span> Get_Depth<span class="hl sym">;</span>

   Min_Depth     <span class="hl sym">:</span> <span class="hl kwa">constant</span> <span class="hl sym">:=</span> <span class="hl num">4</span><span class="hl sym">;</span>
   Requested_Depth <span class="hl sym">:</span> <span class="hl kwa">constant</span> <span class="hl kwb">Positive</span> <span class="hl sym">:=</span> Get_Depth<span class="hl sym">;</span>
   Max_Depth     <span class="hl sym">:</span> <span class="hl kwa">constant</span> <span class="hl kwb">Positive</span> <span class="hl sym">:=</span> <span class="hl kwb">Positive</span>'Max <span class="hl sym">(</span>Min_Depth <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">,</span>
                                                      Requested_Depth<span class="hl sym">);</span>
   Depth_Iterations <span class="hl sym">:</span> <span class="hl kwa">constant</span> <span class="hl kwb">Positive</span> <span class="hl sym">:= (</span>Max_Depth <span class="hl sym">-</span> Min_Depth<span class="hl sym">) /</span> <span class="hl num">2</span> <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>

   <span class="hl kwa">function</span> Get_Worker_Count <span class="hl kwa">return</span> <span class="hl kwb">Positive</span> <span class="hl kwa">is</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">if</span> Argument_Count <span class="hl sym">&gt;</span> <span class="hl num">1</span> <span class="hl kwa">then</span>
         <span class="hl kwa">return</span> <span class="hl kwb">Positive</span>'Value <span class="hl sym">(</span>Argument <span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">));</span>
      <span class="hl kwa">else</span>
         <span class="hl slc">--  This seems to be the sweet spot assuming max depth of 20</span>
         <span class="hl kwa">return</span> <span class="hl num">5</span><span class="hl sym">;</span>
      <span class="hl kwa">end if</span><span class="hl sym">;</span>
   <span class="hl kwa">end</span> Get_Worker_Count<span class="hl sym">;</span>

   Worker_Count     <span class="hl sym">:</span> <span class="hl kwa">constant</span> <span class="hl kwb">Positive</span> <span class="hl sym">:=</span> Get_Worker_Count<span class="hl sym">;</span>

   <span class="hl kwa">task type</span> Depth_Worker
     <span class="hl sym">(</span>Start<span class="hl sym">,</span> Finish <span class="hl sym">:</span> <span class="hl kwb">Positive</span> <span class="hl sym">:=</span> <span class="hl kwb">Positive</span>'Last<span class="hl sym">)</span> <span class="hl kwa">is</span>
      <span class="hl kwa">pragma</span> Storage_Size <span class="hl sym">(</span><span class="hl num">16</span>#<span class="hl num">100</span>#<span class="hl sym">);</span>
   <span class="hl kwa">end</span> Depth_Worker<span class="hl sym">;</span>

   Results <span class="hl sym">:</span> <span class="hl kwa">array</span> <span class="hl sym">(</span><span class="hl num">1</span> <span class="hl sym">..</span> Depth_Iterations<span class="hl sym">)</span> <span class="hl kwa">of</span> <span class="hl kwb">Integer</span><span class="hl sym">;</span>
   Iteration_Tracking <span class="hl sym">:</span> <span class="hl kwa">array</span> <span class="hl sym">(</span><span class="hl num">1</span> <span class="hl sym">..</span> Depth_Iterations<span class="hl sym">)</span> <span class="hl kwa">of</span> <span class="hl kwb">Positive</span><span class="hl sym">;</span>

   <span class="hl kwa">task body</span> Depth_Worker
   <span class="hl kwa">is</span>
      Depth         <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span>
      Check         <span class="hl sym">:</span> <span class="hl kwb">Integer</span><span class="hl sym">;</span>
      Iterations    <span class="hl sym">:</span> <span class="hl kwb">Positive</span><span class="hl sym">;</span>
   <span class="hl kwa">begin</span>

      <span class="hl kwa">for</span> Depth_Iter <span class="hl kwa">in</span> Start <span class="hl sym">..</span> Finish <span class="hl kwa">loop</span>

         Depth <span class="hl sym">:=</span> Min_Depth <span class="hl sym">+ (</span>Depth_Iter <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">) *</span> <span class="hl num">2</span><span class="hl sym">;</span>
         Iterations <span class="hl sym">:=</span> <span class="hl num">2</span> <span class="hl sym">** (</span>Max_Depth <span class="hl sym">-</span> Depth <span class="hl sym">+</span> Min_Depth<span class="hl sym">);</span>
         Iteration_Tracking <span class="hl sym">(</span>Depth_Iter<span class="hl sym">) :=</span> Iterations<span class="hl sym">;</span>

         Check      <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>

         <span class="hl kwa">for</span> I <span class="hl kwa">in</span> <span class="hl num">1</span> <span class="hl sym">..</span> Iterations <span class="hl kwa">loop</span>
            <span class="hl kwa">declare</span>
               Short_Lived_Pool <span class="hl sym">:</span> Node_Pool<span class="hl sym">;</span>
               Short_Lived_Tree_1<span class="hl sym">,</span> Short_Lived_Tree_2 <span class="hl sym">:</span> Tree_Node<span class="hl sym">;</span>
            <span class="hl kwa">begin</span>

               Short_Lived_Tree_1 <span class="hl sym">:=</span>
                 Create
                   <span class="hl sym">(</span>Short_Lived_Pool<span class="hl sym">,</span>
                    Item  <span class="hl sym">=&gt;</span> I<span class="hl sym">,</span>
                    Depth <span class="hl sym">=&gt;</span> Depth<span class="hl sym">);</span>

               Short_Lived_Tree_2 <span class="hl sym">:=</span>
                  Create
                    <span class="hl sym">(</span>Short_Lived_Pool<span class="hl sym">,</span>
                     Item  <span class="hl sym">=&gt; -</span>I<span class="hl sym">,</span>
                     Depth <span class="hl sym">=&gt;</span> Depth<span class="hl sym">);</span>

               Check <span class="hl sym">:=</span> Check <span class="hl sym">+</span>
                 Item_Check <span class="hl sym">(</span>Short_Lived_Tree_1<span class="hl sym">) +</span>
                 Item_Check <span class="hl sym">(</span>Short_Lived_Tree_2<span class="hl sym">);</span>
            <span class="hl kwa">end</span><span class="hl sym">;</span>
         <span class="hl kwa">end loop</span><span class="hl sym">;</span>

         Results <span class="hl sym">(</span>Depth_Iter<span class="hl sym">) :=</span> Check<span class="hl sym">;</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>

   <span class="hl kwa">end</span> Depth_Worker<span class="hl sym">;</span>

   <span class="hl kwa">subtype</span> Worker_Id <span class="hl kwa">is</span> <span class="hl kwb">Positive</span> <span class="hl kwa">range</span> <span class="hl num">1</span> <span class="hl sym">..</span> Worker_Count<span class="hl sym">;</span>

   Start_Index         <span class="hl sym">:</span> <span class="hl kwb">Positive</span> <span class="hl sym">:=</span> <span class="hl num">1</span><span class="hl sym">;</span>
   End_Index           <span class="hl sym">:</span> <span class="hl kwb">Positive</span> <span class="hl sym">:=</span> Depth_Iterations<span class="hl sym">;</span>

   Iterations_Per_Task <span class="hl sym">:</span> <span class="hl kwa">constant</span> <span class="hl kwb">Positive</span> <span class="hl sym">:=</span>
     Depth_Iterations <span class="hl sym">/</span> Worker_Count<span class="hl sym">;</span>

   Remainder           <span class="hl sym">:</span> <span class="hl kwb">Natural</span> <span class="hl sym">:=</span>
     Depth_Iterations <span class="hl kwa">rem</span> Worker_Count<span class="hl sym">;</span>

   <span class="hl kwa">function</span> Create_Worker <span class="hl kwa">return</span> Depth_Worker <span class="hl kwa">is</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">if</span> Remainder <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
         End_Index <span class="hl sym">:=</span> Start_Index <span class="hl sym">+</span> Iterations_Per_Task <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl kwa">else</span>
         End_Index <span class="hl sym">:=</span> Start_Index <span class="hl sym">+</span> Iterations_Per_Task<span class="hl sym">;</span>
         Remainder <span class="hl sym">:=</span> Remainder <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl kwa">end if</span><span class="hl sym">;</span>

      <span class="hl kwa">return</span> New_Worker <span class="hl sym">:</span> Depth_Worker
        <span class="hl sym">(</span>Start <span class="hl sym">=&gt;</span> Start_Index<span class="hl sym">,</span>
         Finish <span class="hl sym">=&gt;</span> End_Index<span class="hl sym">)</span>
      <span class="hl kwa">do</span>
         Start_Index <span class="hl sym">:=</span> End_Index <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl kwa">end return</span><span class="hl sym">;</span>
   <span class="hl kwa">end</span> Create_Worker<span class="hl sym">;</span>

   Long_Lived_Node_Pool <span class="hl sym">:</span> Node_Pool<span class="hl sym">;</span>

   Long_Lived_Tree      <span class="hl sym">:</span> Tree_Node<span class="hl sym">;</span>

   Check <span class="hl sym">:</span> <span class="hl kwb">Integer</span><span class="hl sym">;</span>

<span class="hl kwa">begin</span>

   <span class="hl kwa">declare</span>
      <span class="hl kwa">task</span> Stretch_Depth_Task <span class="hl kwa">is</span>
      <span class="hl kwa">end</span> Stretch_Depth_Task<span class="hl sym">;</span>

      <span class="hl kwa">task body</span> Stretch_Depth_Task <span class="hl kwa">is</span>
         Stretch_Depth <span class="hl sym">:</span> <span class="hl kwa">constant</span> <span class="hl kwb">Positive</span> <span class="hl sym">:=</span> Max_Depth <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>

         Pool <span class="hl sym">:</span> Trees<span class="hl sym">.</span>Node_Pool<span class="hl sym">;</span>
         Stretch_Tree <span class="hl sym">:</span> <span class="hl kwa">constant</span> Tree_Node <span class="hl sym">:=</span>
           Trees<span class="hl sym">.</span>Create <span class="hl sym">(</span>Pool  <span class="hl sym">=&gt;</span> Pool<span class="hl sym">,</span>
                         Item  <span class="hl sym">=&gt;</span> <span class="hl num">0</span><span class="hl sym">,</span>
                         Depth <span class="hl sym">=&gt;</span> Stretch_Depth<span class="hl sym">);</span>
      <span class="hl kwa">begin</span>
         Check        <span class="hl sym">:=</span> Item_Check <span class="hl sym">(</span>Stretch_Tree<span class="hl sym">);</span>
         Put <span class="hl sym">(</span><span class="hl str">&quot;stretch tree of depth &quot;</span><span class="hl sym">);</span>
         Put <span class="hl sym">(</span>Item <span class="hl sym">=&gt;</span> Stretch_Depth<span class="hl sym">,</span> Width <span class="hl sym">=&gt;</span> <span class="hl num">1</span><span class="hl sym">);</span>
         Put <span class="hl sym">(</span>HT <span class="hl sym">&amp;</span> <span class="hl str">&quot; check: &quot;</span><span class="hl sym">);</span>
         Put <span class="hl sym">(</span>Item <span class="hl sym">=&gt;</span> Check<span class="hl sym">,</span> Width <span class="hl sym">=&gt;</span> <span class="hl num">1</span><span class="hl sym">);</span>
         New_Line<span class="hl sym">;</span>
      <span class="hl kwa">end</span> Stretch_Depth_Task<span class="hl sym">;</span>

      <span class="hl kwa">task</span> Create_Long_Lived_Tree_Task <span class="hl kwa">is</span>
      <span class="hl kwa">end</span> Create_Long_Lived_Tree_Task<span class="hl sym">;</span>

      <span class="hl kwa">task body</span> Create_Long_Lived_Tree_Task <span class="hl kwa">is</span>
      <span class="hl kwa">begin</span>
         Long_Lived_Tree <span class="hl sym">:=</span> Create <span class="hl sym">(</span>Long_Lived_Node_Pool<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> Max_Depth<span class="hl sym">);</span>
      <span class="hl kwa">end</span> Create_Long_Lived_Tree_Task<span class="hl sym">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">null</span><span class="hl sym">;</span>
   <span class="hl kwa">end</span><span class="hl sym">;</span>

   <span class="hl kwa">declare</span>
      Workers <span class="hl sym">:</span> <span class="hl kwa">array</span> <span class="hl sym">(</span>Worker_Id<span class="hl sym">)</span> <span class="hl kwa">of</span> Depth_Worker
        <span class="hl sym">:= (</span><span class="hl kwa">others</span> <span class="hl sym">=&gt;</span> Create_Worker<span class="hl sym">);</span>
      <span class="hl kwa">pragma</span> Unreferenced <span class="hl sym">(</span>Workers<span class="hl sym">);</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">null</span><span class="hl sym">;</span>
   <span class="hl kwa">end</span><span class="hl sym">;</span>

   <span class="hl kwa">for</span> I <span class="hl kwa">in</span> Results'<span class="hl kwa">Range loop</span>
      Put <span class="hl sym">(</span>Item <span class="hl sym">=&gt;</span> Iteration_Tracking <span class="hl sym">(</span>I<span class="hl sym">) *</span> <span class="hl num">2</span><span class="hl sym">,</span> Width <span class="hl sym">=&gt;</span> <span class="hl num">0</span><span class="hl sym">);</span>
      Put <span class="hl sym">(</span>HT <span class="hl sym">&amp;</span> <span class="hl str">&quot; trees of depth &quot;</span><span class="hl sym">);</span>
      Put <span class="hl sym">(</span>Item <span class="hl sym">=&gt;</span> Min_Depth <span class="hl sym">+</span> <span class="hl num">2</span> <span class="hl sym">* (</span>I <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">),</span> Width <span class="hl sym">=&gt;</span> <span class="hl num">0</span><span class="hl sym">);</span>
      Put <span class="hl sym">(</span>HT <span class="hl sym">&amp;</span> <span class="hl str">&quot; check: &quot;</span><span class="hl sym">);</span>
      Put <span class="hl sym">(</span>Item <span class="hl sym">=&gt;</span> Results <span class="hl sym">(</span>I<span class="hl sym">),</span> Width <span class="hl sym">=&gt;</span> <span class="hl num">0</span><span class="hl sym">);</span>
      New_Line<span class="hl sym">;</span>
   <span class="hl kwa">end loop</span><span class="hl sym">;</span>

   Put <span class="hl sym">(</span><span class="hl str">&quot;long lived tree of depth &quot;</span><span class="hl sym">);</span>
   Put <span class="hl sym">(</span>Item <span class="hl sym">=&gt;</span> Max_Depth<span class="hl sym">,</span> Width <span class="hl sym">=&gt;</span> <span class="hl num">0</span><span class="hl sym">);</span>
   Put <span class="hl sym">(</span>HT <span class="hl sym">&amp;</span> <span class="hl str">&quot; check: &quot;</span><span class="hl sym">);</span>
   Check <span class="hl sym">:=</span> Item_Check <span class="hl sym">(</span>Long_Lived_Tree<span class="hl sym">);</span>
   Put <span class="hl sym">(</span>Item <span class="hl sym">=&gt;</span> Check<span class="hl sym">,</span> Width <span class="hl sym">=&gt;</span> <span class="hl num">0</span><span class="hl sym">);</span>
   New_Line<span class="hl sym">;</span>

<span class="hl kwa">end</span> Binarytrees<span class="hl sym">;</span>

<span class="hl slc">--  The Computer Language Benchmarks Game</span>
<span class="hl slc">--  http://shootout.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">--  Based on Ada versions created by</span>
<span class="hl slc">--    Jim Rogers and Brian Drummond as well as</span>
<span class="hl slc">--    C version by Francesco Abbate</span>
<span class="hl slc">--</span>
<span class="hl slc">--  Contributed by Brad Moore</span>

<span class="hl kwa">private with</span> Ada<span class="hl sym">.</span>Finalization<span class="hl sym">;</span>
<span class="hl kwa">private with</span> Apache_Runtime<span class="hl sym">.</span>Pools<span class="hl sym">;</span>

<span class="hl kwa">package</span> Trees <span class="hl kwa">is</span>

   <span class="hl kwa">type</span> Tree_Node <span class="hl kwa">is private</span><span class="hl sym">;</span>
   <span class="hl kwa">function</span> Item_Check <span class="hl sym">(</span>Item <span class="hl sym">:</span> Tree_Node<span class="hl sym">)</span> <span class="hl kwa">return</span> <span class="hl kwb">Integer</span><span class="hl sym">;</span>

   <span class="hl kwa">type</span> Node_Pool <span class="hl kwa">is limited private</span><span class="hl sym">;</span>

   <span class="hl kwa">function</span> Create
     <span class="hl sym">(</span>Pool <span class="hl sym">:</span> Node_Pool<span class="hl sym">;</span>
      Item <span class="hl sym">:</span> <span class="hl kwb">Integer</span><span class="hl sym">;</span>
      Depth <span class="hl sym">:</span> <span class="hl kwb">Integer</span><span class="hl sym">)</span> <span class="hl kwa">return</span> Tree_Node<span class="hl sym">;</span>

<span class="hl kwa">private</span>

   <span class="hl kwa">use</span> Apache_Runtime<span class="hl sym">;</span>

   <span class="hl kwa">type</span> Node<span class="hl sym">;</span>
   <span class="hl kwa">type</span> Tree_Node <span class="hl kwa">is access all</span> Node<span class="hl sym">;</span>

   <span class="hl kwa">type</span> Node <span class="hl kwa">is record</span>
      Left  <span class="hl sym">:</span> Tree_Node<span class="hl sym">;</span>
      Right <span class="hl sym">:</span> Tree_Node<span class="hl sym">;</span>
      Value  <span class="hl sym">:</span> <span class="hl kwb">Integer</span><span class="hl sym">;</span>
   <span class="hl kwa">end record</span><span class="hl sym">;</span>

   <span class="hl kwa">type</span> Node_Pool <span class="hl kwa">is</span>
     <span class="hl kwa">new</span> Ada<span class="hl sym">.</span>Finalization<span class="hl sym">.</span>Limited_Controlled <span class="hl kwa">with</span>
      <span class="hl kwa">record</span>
         Pool <span class="hl sym">:</span> <span class="hl kwa">aliased</span> Pools<span class="hl sym">.</span>Pool_Type<span class="hl sym">;</span>
      <span class="hl kwa">end record</span><span class="hl sym">;</span>

   overriding <span class="hl kwa">procedure</span> Initialize <span class="hl sym">(</span>Item <span class="hl sym">:</span> <span class="hl kwa">in out</span> Node_Pool<span class="hl sym">);</span>
   overriding <span class="hl kwa">procedure</span> Finalize   <span class="hl sym">(</span>Item <span class="hl sym">:</span> <span class="hl kwa">in out</span> Node_Pool<span class="hl sym">);</span>

<span class="hl kwa">end</span> Trees<span class="hl sym">;</span>

<span class="hl slc">--  The Computer Language Benchmarks Game</span>
<span class="hl slc">--  http://shootout.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">--  Based on Ada versions created by</span>
<span class="hl slc">--    Jim Rogers and Brian Drummond as well as the</span>
<span class="hl slc">--    C version by Francesco Abbate</span>
<span class="hl slc">--</span>
<span class="hl slc">--  Contributed by Brad Moore</span>

<span class="hl kwa">with</span> Ada<span class="hl sym">.</span>Unchecked_Conversion<span class="hl sym">;</span>
<span class="hl kwa">with</span> Interfaces<span class="hl sym">;</span>
<span class="hl kwa">with</span> System<span class="hl sym">;</span>

<span class="hl kwa">package body</span> Trees <span class="hl kwa">is</span>

   Pools_Status <span class="hl sym">:</span> <span class="hl kwa">constant</span> Apache_Runtime<span class="hl sym">.</span>Apr_Status <span class="hl sym">:=</span>
     Apache_Runtime<span class="hl sym">.</span>Pools<span class="hl sym">.</span>Initialize<span class="hl sym">;</span>
   <span class="hl kwa">pragma</span> Unreferenced <span class="hl sym">(</span>Pools_Status<span class="hl sym">);</span>

   <span class="hl kwa">function</span> New_Node <span class="hl sym">(</span>Pool <span class="hl sym">:</span> Node_Pool<span class="hl sym">)</span> <span class="hl kwa">return</span> Tree_Node<span class="hl sym">;</span>

   <span class="hl kwa">function</span> Create
     <span class="hl sym">(</span>Pool <span class="hl sym">:</span> Node_Pool<span class="hl sym">;</span>
      Item <span class="hl sym">:</span> <span class="hl kwb">Integer</span><span class="hl sym">;</span>
      Depth <span class="hl sym">:</span> <span class="hl kwb">Integer</span><span class="hl sym">)</span> <span class="hl kwa">return</span> Tree_Node
   <span class="hl kwa">is</span>
      Result <span class="hl sym">:</span> <span class="hl kwa">constant</span> Tree_Node <span class="hl sym">:=</span> New_Node <span class="hl sym">(</span>Pool<span class="hl sym">);</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">if</span> Depth <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
         Result<span class="hl sym">.</span><span class="hl kwa">all</span> <span class="hl sym">:= (</span>Left <span class="hl sym">=&gt;</span> Create <span class="hl sym">(</span>Pool<span class="hl sym">,</span> <span class="hl num">2</span> <span class="hl sym">*</span> Item <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> Depth <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">),</span>
                        Right <span class="hl sym">=&gt;</span> Create <span class="hl sym">(</span>Pool<span class="hl sym">,</span> <span class="hl num">2</span> <span class="hl sym">*</span> Item<span class="hl sym">,</span> Depth <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">),</span>
                        Value <span class="hl sym">=&gt;</span> Item<span class="hl sym">);</span>
      <span class="hl kwa">else</span>
         Result<span class="hl sym">.</span><span class="hl kwa">all</span> <span class="hl sym">:= (</span>Left <span class="hl sym">|</span> Right <span class="hl sym">=&gt;</span> <span class="hl kwa">null</span><span class="hl sym">,</span> Value <span class="hl sym">=&gt;</span> Item<span class="hl sym">);</span>
      <span class="hl kwa">end if</span><span class="hl sym">;</span>

      <span class="hl kwa">return</span> Result<span class="hl sym">;</span>

   <span class="hl kwa">end</span> Create<span class="hl sym">;</span>

   overriding <span class="hl kwa">procedure</span> Finalize   <span class="hl sym">(</span>Item <span class="hl sym">:</span> <span class="hl kwa">in out</span> Node_Pool<span class="hl sym">)</span> <span class="hl kwa">is</span>
   <span class="hl kwa">begin</span>
      Pools<span class="hl sym">.</span>Destroy <span class="hl sym">(</span>Item<span class="hl sym">.</span>Pool<span class="hl sym">);</span>
   <span class="hl kwa">end</span> Finalize<span class="hl sym">;</span>

   overriding <span class="hl kwa">procedure</span> Initialize <span class="hl sym">(</span>Item <span class="hl sym">:</span> <span class="hl kwa">in out</span> Node_Pool<span class="hl sym">)</span> <span class="hl kwa">is</span>
      Status <span class="hl sym">:</span> <span class="hl kwa">constant</span> Apr_Status <span class="hl sym">:=</span>
        Pools<span class="hl sym">.</span>Create
          <span class="hl sym">(</span>New_Pool <span class="hl sym">=&gt;</span> Item<span class="hl sym">.</span>Pool'Address<span class="hl sym">,</span>
           Parent   <span class="hl sym">=&gt;</span> System<span class="hl sym">.</span>Null_Address<span class="hl sym">);</span>
      <span class="hl kwa">pragma</span> Unreferenced <span class="hl sym">(</span>Status<span class="hl sym">);</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">null</span><span class="hl sym">;</span>
   <span class="hl kwa">end</span> Initialize<span class="hl sym">;</span>

   <span class="hl kwa">function</span> Item_Check <span class="hl sym">(</span>Item <span class="hl sym">:</span> Tree_Node<span class="hl sym">)</span> <span class="hl kwa">return</span> <span class="hl kwb">Integer</span> <span class="hl kwa">is</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">if</span> Item<span class="hl sym">.</span>Left <span class="hl sym">=</span> <span class="hl kwa">null then</span>
         <span class="hl kwa">return</span> Item<span class="hl sym">.</span>Value<span class="hl sym">;</span>
      <span class="hl kwa">else</span>
         <span class="hl kwa">return</span> Item<span class="hl sym">.</span>Value <span class="hl sym">+</span> Item_Check <span class="hl sym">(</span>Item<span class="hl sym">.</span>Left<span class="hl sym">) -</span> Item_Check <span class="hl sym">(</span>Item<span class="hl sym">.</span>Right<span class="hl sym">);</span>
      <span class="hl kwa">end if</span><span class="hl sym">;</span>
   <span class="hl kwa">end</span> Item_Check<span class="hl sym">;</span>

   <span class="hl kwa">function</span> New_Node <span class="hl sym">(</span>Pool <span class="hl sym">:</span> Node_Pool<span class="hl sym">)</span> <span class="hl kwa">return</span> Tree_Node
   <span class="hl kwa">is</span>
      <span class="hl kwa">function</span> Node_Convert <span class="hl kwa">is new</span> Ada<span class="hl sym">.</span>Unchecked_Conversion
        <span class="hl sym">(</span>Source <span class="hl sym">=&gt;</span> System<span class="hl sym">.</span>Address<span class="hl sym">,</span>
         Target <span class="hl sym">=&gt;</span> Tree_Node<span class="hl sym">);</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">return</span> Node_Convert
        <span class="hl sym">(</span>Pools<span class="hl sym">.</span>Allocate <span class="hl sym">(</span>Pool <span class="hl sym">=&gt;</span> Pool<span class="hl sym">.</span>Pool<span class="hl sym">,</span>
                         Size <span class="hl sym">=&gt;</span> Node'Size <span class="hl sym">/</span> Interfaces<span class="hl sym">.</span>Unsigned_8'Size<span class="hl sym">));</span>
   <span class="hl kwa">end</span> New_Node<span class="hl sym">;</span>
<span class="hl kwa">end</span> Trees<span class="hl sym">;</span>

<span class="hl slc">--  The Computer Language Benchmarks Game</span>
<span class="hl slc">--  http://shootout.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">--  Contributed by Brad Moore</span>

<span class="hl kwa">package</span> Apache_Runtime <span class="hl kwa">is</span>
   <span class="hl kwa">pragma</span> Pure<span class="hl sym">;</span>

   <span class="hl kwa">type</span> Apr_Status <span class="hl kwa">is new</span> <span class="hl kwb">Integer</span><span class="hl sym">;</span>

   <span class="hl kwa">type</span> Apr_Size <span class="hl kwa">is new</span> <span class="hl kwb">Integer</span><span class="hl sym">;</span>

<span class="hl kwa">end</span> Apache_Runtime<span class="hl sym">;</span>

<span class="hl slc">--  The Computer Language Benchmarks Game</span>
<span class="hl slc">--  http://shootout.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">--  Contributed by Brad Moore</span>

<span class="hl kwa">with</span> System<span class="hl sym">;</span>

<span class="hl kwa">package</span> Apache_Runtime<span class="hl sym">.</span>Pools <span class="hl kwa">is</span>

   <span class="hl kwa">subtype</span> Pool_Type <span class="hl kwa">is</span> System<span class="hl sym">.</span>Address<span class="hl sym">;</span>
   <span class="hl kwa">subtype</span> Pool_Access <span class="hl kwa">is</span> System<span class="hl sym">.</span>Address<span class="hl sym">;</span>

   <span class="hl kwa">function</span> Initialize <span class="hl kwa">return</span> Apr_Status<span class="hl sym">;</span>

   <span class="hl kwa">function</span> Create
     <span class="hl sym">(</span>New_Pool <span class="hl sym">:</span> Pool_Access<span class="hl sym">;</span>
      Parent <span class="hl sym">:</span> Pool_Type<span class="hl sym">)</span> <span class="hl kwa">return</span> Apr_Status<span class="hl sym">;</span>

   <span class="hl kwa">procedure</span> Destroy <span class="hl sym">(</span>Pool <span class="hl sym">:</span> Pool_Type<span class="hl sym">);</span>

   <span class="hl kwa">function</span> Allocate <span class="hl sym">(</span>Pool <span class="hl sym">:</span> Pool_Type<span class="hl sym">;</span> Size <span class="hl sym">:</span> Apr_Size<span class="hl sym">)</span> <span class="hl kwa">return</span> System<span class="hl sym">.</span>Address<span class="hl sym">;</span>

<span class="hl kwa">private</span>

   <span class="hl kwa">pragma</span> Import <span class="hl sym">(</span>C<span class="hl sym">,</span> Initialize<span class="hl sym">,</span> <span class="hl str">&quot;apr_initialize&quot;</span><span class="hl sym">);</span>
   <span class="hl kwa">pragma</span> Import <span class="hl sym">(</span>C<span class="hl sym">,</span> Destroy<span class="hl sym">,</span> <span class="hl str">&quot;apr_pool_destroy&quot;</span><span class="hl sym">);</span>
   <span class="hl kwa">pragma</span> Import <span class="hl sym">(</span>C<span class="hl sym">,</span> Allocate<span class="hl sym">,</span> <span class="hl str">&quot;apr_palloc&quot;</span><span class="hl sym">);</span>

<span class="hl kwa">end</span> Apache_Runtime<span class="hl sym">.</span>Pools<span class="hl sym">;</span>

<span class="hl slc">--  The Computer Language Benchmarks Game</span>
<span class="hl slc">--  http://shootout.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">--  Contributed by Brad Moore</span>

<span class="hl kwa">package body</span> Apache_Runtime<span class="hl sym">.</span>Pools <span class="hl kwa">is</span>

   <span class="hl kwa">function</span> Create_Ex
     <span class="hl sym">(</span>New_Pool <span class="hl sym">:</span> Pool_Access<span class="hl sym">;</span>
      Parent <span class="hl sym">:</span> Pool_Type<span class="hl sym">;</span>
      Reserved_1<span class="hl sym">,</span> Reserved_2 <span class="hl sym">:</span> System<span class="hl sym">.</span>Address<span class="hl sym">)</span> <span class="hl kwa">return</span> Apr_Status<span class="hl sym">;</span>
   <span class="hl kwa">pragma</span> Import <span class="hl sym">(</span>C<span class="hl sym">,</span> Create_Ex<span class="hl sym">,</span> <span class="hl str">&quot;apr_pool_create_ex&quot;</span><span class="hl sym">);</span>

   <span class="hl slc">------------</span>
   <span class="hl slc">-- Create --</span>
   <span class="hl slc">------------</span>

   <span class="hl kwa">function</span> Create
     <span class="hl sym">(</span>New_Pool <span class="hl sym">:</span> Pool_Access<span class="hl sym">;</span>
      Parent <span class="hl sym">:</span> Pool_Type<span class="hl sym">)</span>
      <span class="hl kwa">return</span> Apr_Status
   <span class="hl kwa">is</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">return</span> Create_Ex
        <span class="hl sym">(</span>New_Pool<span class="hl sym">,</span>
         Parent<span class="hl sym">,</span>
         System<span class="hl sym">.</span>Null_Address<span class="hl sym">,</span>
         System<span class="hl sym">.</span>Null_Address<span class="hl sym">);</span>
   <span class="hl kwa">end</span> Create<span class="hl sym">;</span>

<span class="hl kwa">end</span> Apache_Runtime<span class="hl sym">.</span>Pools<span class="hl sym">;</span>
