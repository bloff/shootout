<span class="hl com">/*</span>
<span class="hl com">  The Computer Language Shootout</span>
<span class="hl com">  http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">  - tree: disjoint union type</span>
<span class="hl com">  - loop: &quot;for&quot; loop over iterator range</span>
<span class="hl com"></span>
<span class="hl com">  Contributed by Kannan Goundan</span>
<span class="hl com">  De-optimized by Isaac Gouy</span>
<span class="hl com">*/</span>

<span class="hl kwa">object</span> binarytrees <span class="hl sym">{</span>

  <span class="hl kwa">abstract class</span> Tree<span class="hl sym">;</span>
  <span class="hl kwa">case class</span> <span class="hl kwc">Node</span><span class="hl sym">(</span>i<span class="hl sym">:</span> Int<span class="hl sym">,</span> left<span class="hl sym">:</span> Tree<span class="hl sym">,</span> right<span class="hl sym">:</span> Tree<span class="hl sym">)</span> <span class="hl kwa">extends</span> Tree
  <span class="hl kwa">case class</span> Empty<span class="hl sym">()</span> <span class="hl kwa">extends</span> Tree

  <span class="hl kwa">def</span> check<span class="hl sym">(</span>tree<span class="hl sym">:</span> Tree<span class="hl sym">) :</span> Int <span class="hl sym">=</span> tree match <span class="hl sym">{</span>
    <span class="hl kwa">case</span> <span class="hl kwc">Node</span><span class="hl sym">(</span>i<span class="hl sym">,</span> left<span class="hl sym">,</span> right<span class="hl sym">) =&gt;</span> i <span class="hl sym">+</span> check<span class="hl sym">(</span>left<span class="hl sym">) -</span> check<span class="hl sym">(</span>right<span class="hl sym">)</span>
    <span class="hl kwa">case</span> Empty<span class="hl sym">() =&gt;</span> <span class="hl num">0</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">def</span> make<span class="hl sym">(</span>i<span class="hl sym">:</span> Int<span class="hl sym">,</span> depth<span class="hl sym">:</span> Int<span class="hl sym">) :</span> Tree <span class="hl sym">=</span> depth match <span class="hl sym">{</span>
<span class="hl com">/*  case 0 =&gt; Empty() */</span>
    <span class="hl kwa">case</span> <span class="hl num">0</span> <span class="hl sym">=&gt;</span> <span class="hl kwc">Node</span><span class="hl sym">(</span>i<span class="hl sym">,</span> Empty<span class="hl sym">(),</span> Empty<span class="hl sym">())</span>
    <span class="hl kwa">case</span> _ <span class="hl sym">=&gt;</span> <span class="hl kwc">Node</span><span class="hl sym">(</span>i<span class="hl sym">,</span> make<span class="hl sym">((</span><span class="hl num">2</span><span class="hl sym">*</span>i<span class="hl sym">)-</span><span class="hl num">1</span><span class="hl sym">,</span> depth<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">),</span> make<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>i<span class="hl sym">,</span> depth<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">))</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">def</span> main<span class="hl sym">(</span>args<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">String</span><span class="hl sym">]) = {</span>
    <span class="hl kwa">val</span> n <span class="hl sym">=</span> <span class="hl kwa">try</span> <span class="hl sym">{</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span>parseInt<span class="hl sym">(</span>args<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)) }</span> <span class="hl kwa">catch</span> <span class="hl sym">{</span> <span class="hl kwa">case</span> _ <span class="hl sym">=&gt;</span> <span class="hl num">1</span> <span class="hl sym">}</span>
    <span class="hl kwa">val</span> minDepth <span class="hl sym">=</span> <span class="hl num">4</span>
    <span class="hl kwa">val</span> maxDepth <span class="hl sym">=</span> <span class="hl kwc">Math</span><span class="hl sym">.</span>max<span class="hl sym">(</span>minDepth<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">,</span> n<span class="hl sym">)</span>

    print<span class="hl sym">(</span><span class="hl str">&quot;stretch tree&quot;</span><span class="hl sym">,</span> maxDepth<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> check<span class="hl sym">(</span>make<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> maxDepth<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)))</span>

    <span class="hl kwa">val</span> longLived <span class="hl sym">=</span> make<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> maxDepth<span class="hl sym">)</span>

    <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">val</span> depth <span class="hl sym">&lt;-</span> <span class="hl kwc">Iterator</span><span class="hl sym">.</span>range<span class="hl sym">(</span>minDepth<span class="hl sym">,</span> maxDepth<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">)) {</span>
      <span class="hl kwa">val</span> iterations <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>maxDepth <span class="hl sym">-</span> depth <span class="hl sym">+</span> minDepth<span class="hl sym">)</span>

      <span class="hl kwa">var</span> sum <span class="hl sym">=</span> <span class="hl num">0</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">val</span> i <span class="hl sym">&lt;-</span> <span class="hl kwc">Iterator</span><span class="hl sym">.</span>range<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> iterations<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">))</span>
        sum <span class="hl sym">=</span> sum <span class="hl sym">+</span> check<span class="hl sym">(</span>make<span class="hl sym">(</span>i<span class="hl sym">,</span> depth<span class="hl sym">)) +</span> check<span class="hl sym">(</span>make<span class="hl sym">(-</span>i<span class="hl sym">,</span> depth<span class="hl sym">))</span>

      print<span class="hl sym">(</span>iterations<span class="hl sym">*</span><span class="hl num">2</span> <span class="hl sym">+</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">trees&quot;</span><span class="hl sym">,</span> depth<span class="hl sym">,</span> sum<span class="hl sym">)</span>
    <span class="hl sym">}</span>

    print<span class="hl sym">(</span><span class="hl str">&quot;long lived tree&quot;</span><span class="hl sym">,</span> maxDepth<span class="hl sym">,</span> check<span class="hl sym">(</span>longLived<span class="hl sym">))</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">def</span> print<span class="hl sym">(</span>name<span class="hl sym">:</span> <span class="hl kwc">String</span><span class="hl sym">,</span> depth<span class="hl sym">:</span> Int<span class="hl sym">,</span> check<span class="hl sym">:</span> Int<span class="hl sym">) =</span>
    Console<span class="hl sym">.</span>println<span class="hl sym">(</span>name <span class="hl sym">+</span> <span class="hl str">&quot; of depth &quot;</span> <span class="hl sym">+</span> depth <span class="hl sym">+</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">check: &quot;</span> <span class="hl sym">+</span> check<span class="hl sym">)</span>
<span class="hl sym">}</span>
