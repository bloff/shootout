<source>
<def></def><com>&quot;* The Computer Language Shootout</com><br />
<com>    http://shootout.alioth.debian.org/</com><br />
<com>    contributed by Isaac Gouy</com><br />
<com>    modified by Eliot Miranda *&quot;</com><def>!</def><br />
<br />
<kwc>Object</kwc> <def></def><kwb>subclass:</kwb> <def></def><kwd>#PiDigitSpigot</kwd>   <def></def><kwb>instanceVariableNames:</kwb> <def></def><str>'z x inverse'</str><def></def>   <kwb>classVariableNames:</kwb> <def></def><str>''</str><def></def>   <kwb>poolDictionaries:</kwb> <def></def><str>''</str><def></def>   <kwb>category:</kwb> <def></def><str>'Shootout'</str><def>!</def><br />
<br />
<kwc>Object</kwc> <def></def><kwb>subclass:</kwb> <def></def><kwd>#Transformation</kwd>   <def></def><kwb>instanceVariableNames:</kwb> <def></def><str>'q r s t k'</str><def></def>   <kwb>classVariableNames:</kwb> <def></def><str>''</str><def></def>   <kwb>poolDictionaries:</kwb> <def></def><str>''</str><def></def>   <kwb>category:</kwb> <def></def><str>'Shootout'</str><def>!!</def><kwc>PiDigitSpigot</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'private'</str><def>!</def><kwb>consume:</kwb> <def>aTransformation</def>   <sym>^</sym><def>z</def> <kwb>*</kwb> <def>aTransformation! !!</def><kwc>PiDigitSpigot</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'private'</str><def>!digit</def>   <sym>^(</sym><def>z</def> <kwb>extract:</kwb> <def></def><num>3</num><def></def><sym>)</sym> <def></def><kwb>floor</kwb><def>! !!</def><kwc>PiDigitSpigot</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'private'</str><def>!</def><kwb>isSafe:</kwb> <def>aDigit</def>   <sym>^</sym><def>aDigit</def> <kwb>=</kwb> <def></def><sym>(</sym><def>z</def> <kwb>extract:</kwb> <def></def><num>4</num><def></def><sym>)</sym> <def></def><kwb>floor</kwb><def>! !!</def><kwc>PiDigitSpigot</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'private'</str><def>!</def><kwb>produce:</kwb> <def>anInteger   inverse</def> <kwb>q:</kwb> <def></def><num>10</num> <def></def><kwb>r: -</kwb><def></def><num>10</num> <def></def><kwb>*</kwb> <def>anInteger</def> <kwb>s:</kwb> <def></def><num>0</num> <def></def><kwb>t:</kwb> <def></def><num>1</num><def></def><sym>.   ^</sym><def>inverse</def> <kwb>*</kwb> <def>z! !!</def><kwc>PiDigitSpigot</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'accessing'</str><def>!next</def>   <kwd>| y |</kwd>   <def></def><sym>^(</sym><def></def><kwa>self</kwa> <def></def><kwb>isSafe:</kwb> <def></def><sym>(</sym><def>y</def> <sym>:=</sym> <def></def><kwa>self</kwa> <def></def><kwb>digit</kwb><def></def><sym>))</sym>      <def></def><kwb>ifTrue:</kwb> <def></def><sym>[</sym><def>z</def> <sym>:=</sym> <def></def><kwa>self</kwa> <def></def><kwb>produce:</kwb> <def>y</def><sym>.</sym> <def>y</def><sym>]</sym>      <def></def><kwb>ifFalse:</kwb> <def></def><sym>[</sym><def>z</def> <sym>:=</sym> <def></def><kwa>self</kwa> <def></def><kwb>consume:</kwb> <def>x</def> <kwb>next</kwb><def></def><sym>.</sym> <def></def><kwa>self</kwa> <def></def><kwb>next</kwb><def></def><sym>]</sym><def>! !!</def><kwc>PiDigitSpigot</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'initialize-release'</str><def>!initialize   z</def> <sym>:=</sym> <def></def><kwc>Transformation</kwc> <def></def><kwb>unity</kwb><def></def><sym>.</sym>   <def>x</def> <sym>:=</sym> <def></def><kwc>Transformation</kwc> <def></def><kwb>new</kwb><def></def><sym>.</sym>   <def>inverse</def> <sym>:=</sym> <def></def><kwc>Transformation</kwc> <def></def><kwb>new</kwb><def></def><sym>.</sym><def>! !!</def><kwc>PiDigitSpigot</kwc> <def></def><kwb>class methodsFor:</kwb> <def></def><str>'instance creation'</str><def>!new</def>   <sym>^</sym><def></def><kwa>super</kwa> <def></def><kwb>new initialize</kwb><def>! !!</def><kwc>Tests</kwc> <def></def><kwb>class methodsFor:</kwb> <def></def><str>'benchmarking'</str><def>!</def><kwb>pidigitsTo:</kwb> <def>v</def> <kwb>width:</kwb> <def>width</def> <kwb>to:</kwb> <def>output</def>   <kwd>| n i pidigits |</kwd>   <def>n</def> <sym>:=</sym> <def>v</def><sym>.</sym>   <def>i</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>.</sym>   <def>pidigits</def> <sym>:=</sym> <def></def><kwc>PiDigitSpigot</kwc> <def></def><kwb>new</kwb><def></def><sym>.   [</sym><def>n &gt;</def> <num>0</num><def></def><sym>]</sym> <def></def><kwb>whileTrue:</kwb>      <def></def><sym>[</sym><def>n &lt;</def> <kwb>width         ifTrue:</kwb>            <def></def><sym>[</sym><def>n</def> <kwb>timesRepeat:</kwb> <def></def><sym>[</sym><def>output</def> <kwb>nextPut:</kwb> <def></def><sym>(</sym><def></def><kwc>Character</kwc> <def></def><kwb>digitValue:</kwb> <def>pidigits</def> <kwb>next</kwb><def></def><sym>)].</sym>            <def>n</def> <kwb>to:</kwb> <def>width</def> <kwb>do:</kwb> <def></def><sym>[</sym><def></def><kwd>:each</kwd> <def></def><sym>|</sym> <def>output</def> <kwb>space</kwb><def></def><sym>].</sym>            <def>i</def> <sym>:=</sym> <def>i</def> <kwb>+</kwb> <def>n</def><sym>]</sym>         <def></def><kwb>ifFalse:</kwb>            <def></def><sym>[</sym><def>width</def> <kwb>timesRepeat:</kwb> <def></def><sym>[</sym><def>output</def> <kwb>nextPut:</kwb> <def></def><sym>(</sym><def></def><kwc>Character</kwc> <def></def><kwb>digitValue:</kwb> <def>pidigits</def> <kwb>next</kwb><def></def><sym>)].</sym>            <def>i</def> <sym>:=</sym> <def>i</def> <kwb>+</kwb> <def>width</def><sym>].</sym><br />
<def>      output</def> <kwb>tab</kwb><def></def><sym>;</sym> <def></def><kwb>nextPut:</kwb> <def>$:</def><sym>;</sym> <def></def><kwb>print:</kwb> <def>i</def><sym>;</sym> <def></def><kwb>nl</kwb><def></def><sym>.</sym><br />
<def>      n</def> <sym>:=</sym> <def>n</def> <kwb>-</kwb> <def>width</def><sym>]</sym><def>! !!</def><kwc>Tests</kwc> <def></def><kwb>class methodsFor:</kwb> <def></def><str>'benchmark scripts'</str><def>!pidigits</def>   <kwa>self</kwa> <def></def><kwb>pidigitsTo:</kwb> <def></def><kwa>self</kwa> <def></def><kwb>arg width:</kwb> <def></def><num>10</num> <def></def><kwb>to:</kwb> <def></def><kwa>self</kwa> <def></def><kwb>stdout</kwb><def></def><sym>.   ^</sym><def></def><str>''</str><def>! !!</def><kwc>Transformation</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'accessing'</str><def>!</def><kwb>*</kwb> <def>aTransformation</def>   <sym>^</sym><def></def><kwa>self</kwa> <def></def><kwb>species       q:</kwb> <def>q</def> <kwb>*</kwb> <def>aTransformation</def> <kwb>q      r:</kwb> <def>q</def> <kwb>*</kwb> <def>aTransformation</def> <kwb>r +</kwb> <def></def><sym>(</sym><def>r</def> <kwb>*</kwb> <def>aTransformation</def> <kwb>t</kwb><def></def><sym>)</sym>      <def></def><kwb>s:</kwb> <def>s</def> <kwb>*</kwb> <def>aTransformation</def> <kwb>q +</kwb> <def></def><sym>(</sym><def>t</def> <kwb>*</kwb> <def>aTransformation</def> <kwb>s</kwb><def></def><sym>)</sym>      <def></def><kwb>t:</kwb> <def>s</def> <kwb>*</kwb> <def>aTransformation</def> <kwb>r +</kwb> <def></def><sym>(</sym><def>t</def> <kwb>*</kwb> <def>aTransformation</def> <kwb>t</kwb><def></def><sym>)</sym><def>! !!</def><kwc>Transformation</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'accessing'</str><def>!</def><kwb>extract:</kwb> <def>anInteger</def>   <sym>^(</sym><def>q</def> <kwb>*</kwb> <def>anInteger</def> <kwb>+</kwb> <def>r</def><sym>)</sym> <def></def><kwb>//</kwb> <def></def><sym>(</sym><def>s</def> <kwb>*</kwb> <def>anInteger</def> <kwb>+</kwb> <def>t</def><sym>)</sym><def>! !!</def><kwc>Transformation</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'accessing'</str><def>!next   k</def> <sym>:=</sym> <def>k</def> <kwb>+</kwb><def></def><num>1</num><def></def><sym>.</sym>   <def>q</def> <sym>:=</sym> <def>k</def><sym>.</sym>   <def>r</def> <sym>:=</sym> <def></def><num>4</num> <def></def><kwb>*</kwb> <def>k</def> <kwb>+</kwb> <def></def><num>2</num><def></def><sym>.</sym>   <def>s</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>.</sym>   <def>t</def> <sym>:=</sym> <def></def><num>2</num> <def></def><kwb>*</kwb> <def>k</def> <kwb>+</kwb> <def></def><num>1</num><def></def><sym>.</sym><def>! !!</def><kwc>Transformation</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'accessing'</str><def>!q</def>   <sym>^</sym><def>q! !!</def><kwc>Transformation</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'accessing'</str><def>!</def><kwb>q:</kwb> <def>anInteger1</def> <kwb>r:</kwb> <def>anInteger2</def> <kwb>s:</kwb> <def>anInteger3</def> <kwb>t:</kwb> <def>anInteger4   q</def> <sym>:=</sym> <def>anInteger1</def><sym>.</sym>   <def>r</def> <sym>:=</sym> <def>anInteger2</def><sym>.</sym>   <def>s</def> <sym>:=</sym> <def>anInteger3</def><sym>.</sym>   <def>t</def> <sym>:=</sym> <def>anInteger4</def><sym>.</sym>   <def>k</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>.</sym><def>! !!</def><kwc>Transformation</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'accessing'</str><def>!r</def>   <sym>^</sym><def>r! !!</def><kwc>Transformation</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'accessing'</str><def>!s</def>   <sym>^</sym><def>s! !!</def><kwc>Transformation</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'accessing'</str><def>!t</def>   <sym>^</sym><def>t! !!</def><kwc>Transformation</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'initialize-release'</str><def>!initialize   q</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>.</sym>   <def>r</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>.</sym>   <def>s</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>.</sym>   <def>t</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>.</sym>   <def>k</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>.</sym><def>! !!</def><kwc>Transformation</kwc> <def></def><kwb>class methodsFor:</kwb> <def></def><str>'instance creation'</str><def>!new</def>   <sym>^</sym><def></def><kwa>super</kwa> <def></def><kwb>new initialize</kwb><def>! !!</def><kwc>Transformation</kwc> <def></def><kwb>class methodsFor:</kwb> <def></def><str>'instance creation'</str><def>!</def><kwb>q:</kwb> <def>anInteger1</def> <kwb>r:</kwb> <def>anInteger2</def> <kwb>s:</kwb> <def>anInteger3</def> <kwb>t:</kwb> <def>anInteger4</def>   <sym>^(</sym><def></def><kwa>super</kwa> <def></def><kwb>new</kwb><def></def><sym>)</sym> <def></def><kwb>q:</kwb> <def>anInteger1</def> <kwb>r:</kwb> <def>anInteger2</def> <kwb>s:</kwb> <def>anInteger3</def> <kwb>t:</kwb> <def>anInteger4! !!</def><kwc>Transformation</kwc> <def></def><kwb>class methodsFor:</kwb> <def></def><str>'instance creation'</str><def>!unity</def>   <sym>^</sym><def></def><kwa>self</kwa> <def></def><kwb>q:</kwb> <def></def><num>1</num> <def></def><kwb>r:</kwb> <def></def><num>0</num> <def></def><kwb>s:</kwb> <def></def><num>0</num> <def></def><kwb>t:</kwb> <def></def><num>1</num><def>! !</def><br />
<br />
<kwc>Tests</kwc> <def></def><kwb>pidigits</kwb><def>!</def><br />
</source>
