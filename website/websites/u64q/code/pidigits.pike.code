<source>
<def></def><slc>// The Great Computer Language Shootout</slc><br />
<def></def><slc>// http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>//</slc><br />
<def></def><slc>// contributed by Marcus Comstedt</slc><br />
<def></def><br />
<kwb>int</kwb> <def>k</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><kwb>array</kwb><def></def><sym>(</sym><def></def><kwb>int</kwb><def></def><sym>)</sym> <def>z</def> <sym>= ({</sym> <def></def><num>1</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>1</num> <def></def><sym>});</sym><br />
<def></def><br />
<kwb>array</kwb><def></def><sym>(</sym><def></def><kwb>int</kwb><def></def><sym>)</sym> <def></def><kwd>compose</kwd><def></def><sym>(</sym><def></def><kwb>array</kwb><def></def><sym>(</sym><def></def><kwb>int</kwb><def></def><sym>)</sym> <def>a</def><sym>,</sym> <def></def><kwb>array</kwb><def></def><sym>(</sym><def></def><kwb>int</kwb><def></def><sym>)</sym> <def>b</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>  <kwd>return</kwd> <def></def><sym>({</sym> <def>a</def><sym>[</sym><def></def><num>0</num><def></def><sym>]*</sym><def>b</def><sym>[</sym><def></def><num>0</num><def></def><sym>],</sym> <def>a</def><sym>[</sym><def></def><num>0</num><def></def><sym>]*</sym><def>b</def><sym>[</sym><def></def><num>1</num><def></def><sym>]+</sym><def>a</def><sym>[</sym><def></def><num>1</num><def></def><sym>]*</sym><def>b</def><sym>[</sym><def></def><num>3</num><def></def><sym>],</sym><br />
<def>	    a</def><sym>[</sym><def></def><num>2</num><def></def><sym>]*</sym><def>b</def><sym>[</sym><def></def><num>0</num><def></def><sym>]+</sym><def>a</def><sym>[</sym><def></def><num>3</num><def></def><sym>]*</sym><def>b</def><sym>[</sym><def></def><num>2</num><def></def><sym>],</sym> <def>a</def><sym>[</sym><def></def><num>2</num><def></def><sym>]*</sym><def>b</def><sym>[</sym><def></def><num>1</num><def></def><sym>]+</sym><def>a</def><sym>[</sym><def></def><num>3</num><def></def><sym>]*</sym><def>b</def><sym>[</sym><def></def><num>3</num><def></def><sym>] });</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>int</kwb> <def></def><kwd>extract</kwd><def></def><sym>(</sym><def></def><kwb>array</kwb><def></def><sym>(</sym><def></def><kwb>int</kwb><def></def><sym>)</sym> <def>a</def><sym>,</sym> <def></def><kwb>int</kwb> <def>j</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>  <kwd>return</kwd> <def></def><sym>(</sym><def>a</def><sym>[</sym><def></def><num>0</num><def></def><sym>]*</sym><def>j</def><sym>+</sym><def>a</def><sym>[</sym><def></def><num>1</num><def></def><sym>]) / (</sym><def>a</def><sym>[</sym><def></def><num>2</num><def></def><sym>]*</sym><def>j</def><sym>+</sym><def>a</def><sym>[</sym><def></def><num>3</num><def></def><sym>]);</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>array</kwb><def></def><sym>(</sym><def></def><kwb>int</kwb><def></def><sym>)</sym> <def></def><kwd>pi_digits</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>c</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>  <kwb>array</kwb><def></def><sym>(</sym><def></def><kwb>int</kwb><def></def><sym>)</sym> <def>r</def> <sym>=</sym> <def></def><kwa>allocate</kwa><def></def><sym>(</sym><def>c</def><sym>);</sym><br />
<def></def>  <kwd>for</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>i</def><sym>&lt;</sym><def>c</def><sym>;</sym> <def>i</def><sym>++) {</sym><br />
<def></def>    <kwb>int</kwb> <def>y</def><sym>;</sym><br />
<def></def>    <kwd>while</kwd><def></def><sym>((</sym><def>y</def> <sym>=</sym> <def></def><kwd>extract</kwd><def></def><sym>(</sym><def>z</def><sym>,</sym> <def></def><num>3</num><def></def><sym>)) !=</sym> <def></def><kwd>extract</kwd><def></def><sym>(</sym><def>z</def><sym>,</sym> <def></def><num>4</num><def></def><sym>)) {</sym><br />
<def></def>      <sym>++</sym><def>k</def><sym>;</sym><br />
<def>      z</def> <sym>=</sym> <def></def><kwd>compose</kwd><def></def><sym>(</sym><def>z</def><sym>, ({</sym><def>k</def><sym>,</sym> <def></def><num>4</num><def></def><sym>*</sym><def>k</def><sym>+</sym><def></def><num>2</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>2</num><def></def><sym>*</sym><def>k</def><sym>+</sym><def></def><num>1</num><def></def><sym>}));</sym><br />
<def></def>    <sym>}</sym><br />
<def>    z</def> <sym>=</sym> <def></def><kwd>compose</kwd><def></def><sym>(({</sym><def></def><num>10</num><def></def><sym>, -</sym><def></def><num>10</num><def></def><sym>*</sym><def>y</def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>1</num><def></def><sym>}),</sym> <def>z</def><sym>);</sym><br />
<def>    r</def><sym>[</sym><def>i</def><sym>] =</sym> <def>y</def><sym>;</sym><br />
<def></def>  <sym>}</sym><br />
<def>  return r</def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>int</kwb> <def></def><kwd>main</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>argc</def><sym>,</sym> <def></def><kwb>array</kwb><def></def><sym>(</sym><def></def><kwb>string</kwb><def></def><sym>)</sym> <def>argv</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>  <kwb>int</kwb> <def>i</def><sym>,</sym> <def>n</def> <sym>= (</sym><def></def><kwb>int</kwb><def></def><sym>)</sym><def>argv</def><sym>[</sym><def></def><num>1</num><def></def><sym>];</sym><br />
<def></def>  <kwd>for</kwd><def></def><sym>(</sym><def>i</def><sym>=</sym><def></def><num>10</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;=</sym> <def>n</def><sym>;</sym> <def>i</def><sym>+=</sym><def></def><num>10</num><def></def><sym>)</sym><br />
<def></def>    <kwa>write</kwa><def></def><sym>(</sym><def></def><str>&quot;%@d</str><esc>\t</esc><str>:%d</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def></def><kwd>pi_digits</kwd><def></def><sym>(</sym><def></def><num>10</num><def></def><sym>),</sym> <def>i</def><sym>);</sym><br />
<def></def>  <kwd>if</kwd><def></def><sym>((</sym><def>i</def><sym>-=</sym><def></def><num>10</num><def></def><sym>) &lt;</sym> <def>n</def><sym>)</sym><br />
<def></def>    <kwa>write</kwa><def></def><sym>(</sym><def></def><str>&quot;%-10{%d%}</str><esc>\t</esc><str>:%d</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def></def><kwd>pi_digits</kwd><def></def><sym>(</sym><def>n</def><sym>-</sym><def>i</def><sym>)/</sym><def></def><num>1</num><def></def><sym>,</sym> <def>n</def><sym>);</sym><br />
<def>  return</def> <num>0</num><def></def><sym>;</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
