<span class="hl slc">// The Great Computer Language Shootout</span>
<span class="hl slc">// http://shootout.alioth.debian.org/</span>
<span class="hl slc">//</span>
<span class="hl slc">// contributed by Marcus Comstedt</span>

<span class="hl kwb">int</span> k <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl kwb">array</span><span class="hl sym">(</span><span class="hl kwb">int</span><span class="hl sym">)</span> z <span class="hl sym">= ({</span> <span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">1</span> <span class="hl sym">});</span>

<span class="hl kwb">array</span><span class="hl sym">(</span><span class="hl kwb">int</span><span class="hl sym">)</span> <span class="hl kwd">compose</span><span class="hl sym">(</span><span class="hl kwb">array</span><span class="hl sym">(</span><span class="hl kwb">int</span><span class="hl sym">)</span> a<span class="hl sym">,</span> <span class="hl kwb">array</span><span class="hl sym">(</span><span class="hl kwb">int</span><span class="hl sym">)</span> b<span class="hl sym">)</span>
<span class="hl sym">{</span>
  <span class="hl kwd">return</span> <span class="hl sym">({</span> a<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]*</span>b<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">],</span> a<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]*</span>b<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]+</span>a<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]*</span>b<span class="hl sym">[</span><span class="hl num">3</span><span class="hl sym">],</span>
	    a<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">]*</span>b<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]+</span>a<span class="hl sym">[</span><span class="hl num">3</span><span class="hl sym">]*</span>b<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">],</span> a<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">]*</span>b<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]+</span>a<span class="hl sym">[</span><span class="hl num">3</span><span class="hl sym">]*</span>b<span class="hl sym">[</span><span class="hl num">3</span><span class="hl sym">] });</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">extract</span><span class="hl sym">(</span><span class="hl kwb">array</span><span class="hl sym">(</span><span class="hl kwb">int</span><span class="hl sym">)</span> a<span class="hl sym">,</span> <span class="hl kwb">int</span> j<span class="hl sym">)</span>
<span class="hl sym">{</span>
  <span class="hl kwd">return</span> <span class="hl sym">(</span>a<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]*</span>j<span class="hl sym">+</span>a<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]) / (</span>a<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">]*</span>j<span class="hl sym">+</span>a<span class="hl sym">[</span><span class="hl num">3</span><span class="hl sym">]);</span>
<span class="hl sym">}</span>

<span class="hl kwb">array</span><span class="hl sym">(</span><span class="hl kwb">int</span><span class="hl sym">)</span> <span class="hl kwd">pi_digits</span><span class="hl sym">(</span><span class="hl kwb">int</span> c<span class="hl sym">)</span>
<span class="hl sym">{</span>
  <span class="hl kwb">array</span><span class="hl sym">(</span><span class="hl kwb">int</span><span class="hl sym">)</span> r <span class="hl sym">=</span> <span class="hl kwa">allocate</span><span class="hl sym">(</span>c<span class="hl sym">);</span>
  <span class="hl kwd">for</span><span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>c<span class="hl sym">;</span> i<span class="hl sym">++) {</span>
    <span class="hl kwb">int</span> y<span class="hl sym">;</span>
    <span class="hl kwd">while</span><span class="hl sym">((</span>y <span class="hl sym">=</span> <span class="hl kwd">extract</span><span class="hl sym">(</span>z<span class="hl sym">,</span> <span class="hl num">3</span><span class="hl sym">)) !=</span> <span class="hl kwd">extract</span><span class="hl sym">(</span>z<span class="hl sym">,</span> <span class="hl num">4</span><span class="hl sym">)) {</span>
      <span class="hl sym">++</span>k<span class="hl sym">;</span>
      z <span class="hl sym">=</span> <span class="hl kwd">compose</span><span class="hl sym">(</span>z<span class="hl sym">, ({</span>k<span class="hl sym">,</span> <span class="hl num">4</span><span class="hl sym">*</span>k<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">*</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">}));</span>
    <span class="hl sym">}</span>
    z <span class="hl sym">=</span> <span class="hl kwd">compose</span><span class="hl sym">(({</span><span class="hl num">10</span><span class="hl sym">, -</span><span class="hl num">10</span><span class="hl sym">*</span>y<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">}),</span> z<span class="hl sym">);</span>
    r<span class="hl sym">[</span>i<span class="hl sym">] =</span> y<span class="hl sym">;</span>
  <span class="hl sym">}</span>
  return r<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">array</span><span class="hl sym">(</span><span class="hl kwb">string</span><span class="hl sym">)</span> argv<span class="hl sym">)</span>
<span class="hl sym">{</span>
  <span class="hl kwb">int</span> i<span class="hl sym">,</span> n <span class="hl sym">= (</span><span class="hl kwb">int</span><span class="hl sym">)</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">];</span>
  <span class="hl kwd">for</span><span class="hl sym">(</span>i<span class="hl sym">=</span><span class="hl num">10</span><span class="hl sym">;</span> i <span class="hl sym">&lt;=</span> n<span class="hl sym">;</span> i<span class="hl sym">+=</span><span class="hl num">10</span><span class="hl sym">)</span>
    <span class="hl kwa">write</span><span class="hl sym">(</span><span class="hl str">&quot;%&#64;d</span><span class="hl esc">\t</span><span class="hl str">:%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> <span class="hl kwd">pi_digits</span><span class="hl sym">(</span><span class="hl num">10</span><span class="hl sym">),</span> i<span class="hl sym">);</span>
  <span class="hl kwd">if</span><span class="hl sym">((</span>i<span class="hl sym">-=</span><span class="hl num">10</span><span class="hl sym">) &lt;</span> n<span class="hl sym">)</span>
    <span class="hl kwa">write</span><span class="hl sym">(</span><span class="hl str">&quot;%-10{%d%}</span><span class="hl esc">\t</span><span class="hl str">:%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> <span class="hl kwd">pi_digits</span><span class="hl sym">(</span>n<span class="hl sym">-</span>i<span class="hl sym">)/</span><span class="hl num">1</span><span class="hl sym">,</span> n<span class="hl sym">);</span>
  return <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>
