<span class="hl com">/*   The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   convert from c++ version by The Anh Tran</span>
<span class="hl com">*/</span>

<span class="hl kwa">using</span> System<span class="hl sym">;</span>
<span class="hl kwa">using</span> System<span class="hl sym">.</span>Threading<span class="hl sym">;</span>
<span class="hl kwa">using</span> System<span class="hl sym">.</span>Text<span class="hl sym">;</span>

<span class="hl kwa">public class</span> chame
<span class="hl sym">{</span>
   <span class="hl kwa">internal</span> <span class="hl kwb">enum</span> Color
   <span class="hl sym">{</span>
      blue<span class="hl sym">,</span>
      red<span class="hl sym">,</span>
      yellow<span class="hl sym">,</span>
      invalid
   <span class="hl sym">}</span>

   <span class="hl kwa">private static</span> Color <span class="hl kwd">ColorCompliment</span><span class="hl sym">(</span>Color c1<span class="hl sym">,</span> Color c2<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">switch</span> <span class="hl sym">(</span>c1<span class="hl sym">)</span>
      <span class="hl sym">{</span>
         <span class="hl kwa">case</span> Color<span class="hl sym">.</span>blue<span class="hl sym">:</span>
            <span class="hl kwa">switch</span> <span class="hl sym">(</span>c2<span class="hl sym">)</span>
            <span class="hl sym">{</span>
               <span class="hl kwa">case</span> Color<span class="hl sym">.</span>blue<span class="hl sym">:</span>
                  <span class="hl kwa">return</span> Color<span class="hl sym">.</span>blue<span class="hl sym">;</span>
               <span class="hl kwa">case</span> Color<span class="hl sym">.</span>red<span class="hl sym">:</span>
                  <span class="hl kwa">return</span> Color<span class="hl sym">.</span>yellow<span class="hl sym">;</span>
               <span class="hl kwa">case</span> Color<span class="hl sym">.</span>yellow<span class="hl sym">:</span>
                  <span class="hl kwa">return</span> Color<span class="hl sym">.</span>red<span class="hl sym">;</span>
            <span class="hl sym">}</span>
            <span class="hl kwa">break</span><span class="hl sym">;</span>
         <span class="hl kwa">case</span> Color<span class="hl sym">.</span>red<span class="hl sym">:</span>
            <span class="hl kwa">switch</span> <span class="hl sym">(</span>c2<span class="hl sym">)</span>
            <span class="hl sym">{</span>
               <span class="hl kwa">case</span> Color<span class="hl sym">.</span>blue<span class="hl sym">:</span>
                  <span class="hl kwa">return</span> Color<span class="hl sym">.</span>yellow<span class="hl sym">;</span>
               <span class="hl kwa">case</span> Color<span class="hl sym">.</span>red<span class="hl sym">:</span>
                  <span class="hl kwa">return</span> Color<span class="hl sym">.</span>red<span class="hl sym">;</span>
               <span class="hl kwa">case</span> Color<span class="hl sym">.</span>yellow<span class="hl sym">:</span>
                  <span class="hl kwa">return</span> Color<span class="hl sym">.</span>blue<span class="hl sym">;</span>
            <span class="hl sym">}</span>
            <span class="hl kwa">break</span><span class="hl sym">;</span>
         <span class="hl kwa">case</span> Color<span class="hl sym">.</span>yellow<span class="hl sym">:</span>
            <span class="hl kwa">switch</span> <span class="hl sym">(</span>c2<span class="hl sym">)</span>
            <span class="hl sym">{</span>
               <span class="hl kwa">case</span> Color<span class="hl sym">.</span>blue<span class="hl sym">:</span>
                  <span class="hl kwa">return</span> Color<span class="hl sym">.</span>red<span class="hl sym">;</span>
               <span class="hl kwa">case</span> Color<span class="hl sym">.</span>red<span class="hl sym">:</span>
                  <span class="hl kwa">return</span> Color<span class="hl sym">.</span>blue<span class="hl sym">;</span>
               <span class="hl kwa">case</span> Color<span class="hl sym">.</span>yellow<span class="hl sym">:</span>
                  <span class="hl kwa">return</span> Color<span class="hl sym">.</span>yellow<span class="hl sym">;</span>
            <span class="hl sym">}</span>
            <span class="hl kwa">break</span><span class="hl sym">;</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">return</span> Color<span class="hl sym">.</span>invalid<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">private static</span> String<span class="hl sym">[]</span> NUMBERS <span class="hl sym">=</span>
   <span class="hl sym">{</span>
      <span class="hl str">&quot;zero&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;one&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;two&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;three&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;four&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;five&quot;</span><span class="hl sym">,</span>
      <span class="hl str">&quot;six&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;seven&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;eight&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;nine&quot;</span>
   <span class="hl sym">};</span>

   <span class="hl kwa">private static</span> String <span class="hl kwd">SpellNumber</span><span class="hl sym">(</span><span class="hl kwb">int</span> n<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      StringBuilder sb <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">StringBuilder</span><span class="hl sym">();</span>
      <span class="hl kwb">string</span> nStr <span class="hl sym">=</span> n<span class="hl sym">.</span><span class="hl kwd">ToString</span><span class="hl sym">();</span>

      <span class="hl kwa">foreach</span> <span class="hl sym">(</span><span class="hl kwb">char</span> c in nStr<span class="hl sym">)</span>
         sb<span class="hl sym">.</span><span class="hl kwd">AppendFormat</span><span class="hl sym">(</span><span class="hl str">&quot; {0}&quot;</span><span class="hl sym">,</span> NUMBERS<span class="hl sym">[</span>c <span class="hl sym">-</span> <span class="hl str">'0'</span><span class="hl sym">]);</span>

      <span class="hl kwa">return</span> sb<span class="hl sym">.</span><span class="hl kwd">ToString</span><span class="hl sym">();</span>
   <span class="hl sym">}</span>


   <span class="hl kwa">private sealed class</span> MeetingPlace
   <span class="hl sym">{</span>
      <span class="hl kwa">internal</span> volatile <span class="hl kwb">int</span> meetings_left<span class="hl sym">;</span>
      <span class="hl kwa">private</span> volatile Creature waiting_creature<span class="hl sym">;</span>
      <span class="hl kwa">private</span> <span class="hl kwb">int</span> spin_lock<span class="hl sym">;</span>

      <span class="hl kwa">public</span> <span class="hl kwd">MeetingPlace</span><span class="hl sym">(</span><span class="hl kwb">int</span> meetings<span class="hl sym">)</span>
      <span class="hl sym">{</span>
         meetings_left <span class="hl sym">=</span> meetings<span class="hl sym">;</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">private</span> <span class="hl kwb">void</span> <span class="hl kwd">Lock</span><span class="hl sym">()</span>
      <span class="hl sym">{</span>
         <span class="hl kwb">int</span> spin <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         <span class="hl kwa">while</span> <span class="hl sym">(</span>Interlocked<span class="hl sym">.</span><span class="hl kwd">CompareExchange</span><span class="hl sym">(</span>ref spin_lock<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">) !=</span> <span class="hl num">0</span><span class="hl sym">)</span>
            Thread<span class="hl sym">.</span><span class="hl kwd">SpinWait</span><span class="hl sym">(++</span>spin<span class="hl sym">);</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">private</span> <span class="hl kwb">void</span> <span class="hl kwd">Unlock</span><span class="hl sym">()</span>
      <span class="hl sym">{</span>
         Interlocked<span class="hl sym">.</span><span class="hl kwd">CompareExchange</span><span class="hl sym">(</span>ref spin_lock<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">);</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">public</span> Creature <span class="hl kwd">Meet</span><span class="hl sym">(</span>Creature current_creature<span class="hl sym">)</span>
      <span class="hl sym">{</span>
         <span class="hl kwd">Lock</span><span class="hl sym">();</span>
         <span class="hl kwa">try</span>
         <span class="hl sym">{</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>meetings_left <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
            <span class="hl sym">{</span>
               <span class="hl kwa">if</span> <span class="hl sym">(</span>waiting_creature <span class="hl sym">==</span> <span class="hl kwa">null</span><span class="hl sym">)</span>  <span class="hl slc">// first arrive</span>
               <span class="hl sym">{</span>
                  waiting_creature <span class="hl sym">=</span> current_creature<span class="hl sym">;</span>
                  <span class="hl kwa">return null</span><span class="hl sym">;</span>
               <span class="hl sym">}</span>
               <span class="hl kwa">else</span> <span class="hl slc">// second arrive</span>
               <span class="hl sym">{</span>
                  <span class="hl slc">// store ref to first creature</span>
                  Creature first_creature <span class="hl sym">=</span> waiting_creature<span class="hl sym">;</span>
                  waiting_creature <span class="hl sym">=</span> <span class="hl kwa">null</span><span class="hl sym">;</span>

                  meetings_left<span class="hl sym">--;</span>
                  <span class="hl kwa">return</span> first_creature<span class="hl sym">;</span>
               <span class="hl sym">}</span>
            <span class="hl sym">}</span>
            <span class="hl kwa">return null</span><span class="hl sym">;</span>
         <span class="hl sym">}</span>
         <span class="hl kwa">finally</span>
         <span class="hl sym">{</span>
            <span class="hl kwd">Unlock</span><span class="hl sym">();</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">private sealed class</span> Creature
   <span class="hl sym">{</span>
      <span class="hl kwa">private</span> MeetingPlace place<span class="hl sym">;</span>

      <span class="hl kwa">internal</span> <span class="hl kwb">int</span> count<span class="hl sym">;</span>     <span class="hl slc">// = 0;</span>
      <span class="hl kwa">internal</span> <span class="hl kwb">int</span> sameCount<span class="hl sym">;</span> <span class="hl slc">// = 0;</span>
      <span class="hl kwa">private</span> volatile <span class="hl kwb">bool</span> met<span class="hl sym">;</span><span class="hl slc">// = false;</span>

      <span class="hl kwa">private</span> Color color<span class="hl sym">;</span>
      <span class="hl kwa">private</span> <span class="hl kwb">long</span> id<span class="hl sym">;</span>
        <span class="hl kwa">private</span> AutoResetEvent wait<span class="hl sym">;</span>

      <span class="hl kwa">public</span> <span class="hl kwd">Creature</span><span class="hl sym">(</span>MeetingPlace place<span class="hl sym">,</span> Color c<span class="hl sym">)</span>
      <span class="hl sym">{</span>
         <span class="hl kwa">this</span><span class="hl sym">.</span>place <span class="hl sym">=</span> place<span class="hl sym">;</span>
         color <span class="hl sym">=</span> c<span class="hl sym">;</span>
            wait <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">AutoResetEvent</span><span class="hl sym">(</span><span class="hl kwa">false</span><span class="hl sym">);</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">run</span><span class="hl sym">()</span>
      <span class="hl sym">{</span>
         id <span class="hl sym">=</span> <span class="hl kwd">GetHashCode</span><span class="hl sym">();</span>

         <span class="hl kwa">while</span> <span class="hl sym">(</span>place<span class="hl sym">.</span>meetings_left <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
         <span class="hl sym">{</span>
            met <span class="hl sym">=</span> <span class="hl kwa">false</span><span class="hl sym">;</span>
            Creature other <span class="hl sym">=</span> place<span class="hl sym">.</span><span class="hl kwd">Meet</span><span class="hl sym">(</span><span class="hl kwa">this</span><span class="hl sym">);</span>

            <span class="hl kwa">if</span> <span class="hl sym">(</span>other <span class="hl sym">!=</span> <span class="hl kwa">null</span><span class="hl sym">)</span>
               <span class="hl kwa">this</span><span class="hl sym">.</span><span class="hl kwd">Meet</span><span class="hl sym">(</span>other<span class="hl sym">);</span>
            <span class="hl kwa">else</span>
            <span class="hl sym">{</span>
               <span class="hl kwa">while</span> <span class="hl sym">(</span><span class="hl kwa">this</span><span class="hl sym">.</span>met <span class="hl sym">==</span> <span class="hl kwa">false</span><span class="hl sym">)</span>
                  wait<span class="hl sym">.</span><span class="hl kwd">WaitOne</span><span class="hl sym">();</span>
            <span class="hl sym">}</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">private</span> <span class="hl kwb">void</span> <span class="hl kwd">Meet</span><span class="hl sym">(</span>Creature other<span class="hl sym">)</span>
      <span class="hl sym">{</span>
         Color newcolor <span class="hl sym">=</span> <span class="hl kwd">ColorCompliment</span><span class="hl sym">(</span><span class="hl kwa">this</span><span class="hl sym">.</span>color<span class="hl sym">,</span> other<span class="hl sym">.</span>color<span class="hl sym">);</span>
         <span class="hl kwa">this</span><span class="hl sym">.</span>color <span class="hl sym">=</span> other<span class="hl sym">.</span>color <span class="hl sym">=</span> newcolor<span class="hl sym">;</span>

         <span class="hl kwa">this</span><span class="hl sym">.</span>count<span class="hl sym">++;</span>
         other<span class="hl sym">.</span>count<span class="hl sym">++;</span>

         <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">this</span><span class="hl sym">.</span>id <span class="hl sym">==</span> other<span class="hl sym">.</span>id<span class="hl sym">)</span>
         <span class="hl sym">{</span>
            <span class="hl kwa">this</span><span class="hl sym">.</span>sameCount<span class="hl sym">++;</span>
            other<span class="hl sym">.</span>sameCount<span class="hl sym">++;</span>
         <span class="hl sym">}</span>

         <span class="hl kwa">this</span><span class="hl sym">.</span>met <span class="hl sym">=</span> other<span class="hl sym">.</span>met <span class="hl sym">=</span> <span class="hl kwa">true</span><span class="hl sym">;</span>
            other<span class="hl sym">.</span>wait<span class="hl sym">.</span><span class="hl kwd">Set</span><span class="hl sym">();</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">private static</span> <span class="hl kwb">void</span> <span class="hl kwd">RunGame</span><span class="hl sym">(</span><span class="hl kwb">int</span> n<span class="hl sym">,</span> params Color<span class="hl sym">[]</span> colors<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      MeetingPlace place <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">MeetingPlace</span><span class="hl sym">(</span>n<span class="hl sym">);</span>

      Creature<span class="hl sym">[]</span> creatures <span class="hl sym">=</span> <span class="hl kwa">new</span> Creature<span class="hl sym">[</span>colors<span class="hl sym">.</span>Length<span class="hl sym">];</span>
      Thread<span class="hl sym">[]</span> cr_threads <span class="hl sym">=</span> <span class="hl kwa">new</span> Thread<span class="hl sym">[</span>colors<span class="hl sym">.</span>Length<span class="hl sym">];</span>

      StringBuilder sb <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">StringBuilder</span><span class="hl sym">();</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> colors<span class="hl sym">.</span>Length<span class="hl sym">;</span> i<span class="hl sym">++)</span>
      <span class="hl sym">{</span>
         sb<span class="hl sym">.</span><span class="hl kwd">AppendFormat</span><span class="hl sym">(</span><span class="hl str">&quot; {0}&quot;</span><span class="hl sym">,</span> colors<span class="hl sym">[</span>i<span class="hl sym">]);</span>

         creatures<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">Creature</span><span class="hl sym">(</span>place<span class="hl sym">,</span> colors<span class="hl sym">[</span>i<span class="hl sym">]);</span>

         cr_threads<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">Thread</span><span class="hl sym">(</span>creatures<span class="hl sym">[</span>i<span class="hl sym">].</span>run<span class="hl sym">);</span>
         cr_threads<span class="hl sym">[</span>i<span class="hl sym">].</span><span class="hl kwd">Start</span><span class="hl sym">();</span>
      <span class="hl sym">}</span>
      sb<span class="hl sym">.</span><span class="hl kwd">AppendLine</span><span class="hl sym">();</span>

      <span class="hl kwa">foreach</span> <span class="hl sym">(</span>Thread t in cr_threads<span class="hl sym">)</span>
         t<span class="hl sym">.</span><span class="hl kwd">Join</span><span class="hl sym">();</span>

      <span class="hl kwb">int</span> total <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwa">foreach</span> <span class="hl sym">(</span>Creature creature in creatures<span class="hl sym">)</span>
      <span class="hl sym">{</span>
            total <span class="hl sym">+=</span> creature<span class="hl sym">.</span>count<span class="hl sym">;</span>
            sb<span class="hl sym">.</span><span class="hl kwd">AppendFormat</span><span class="hl sym">(</span><span class="hl str">&quot;{0}{1}</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> creature<span class="hl sym">.</span>count<span class="hl sym">,</span> <span class="hl kwd">SpellNumber</span><span class="hl sym">(</span>creature<span class="hl sym">.</span>sameCount<span class="hl sym">));</span>
      <span class="hl sym">}</span>

      sb<span class="hl sym">.</span><span class="hl kwd">AppendFormat</span><span class="hl sym">(</span><span class="hl str">&quot;{0}</span><span class="hl esc">\n\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> <span class="hl kwd">SpellNumber</span><span class="hl sym">(</span>total<span class="hl sym">));</span>
      Console<span class="hl sym">.</span>Out<span class="hl sym">.</span><span class="hl kwd">Write</span><span class="hl sym">(</span>sb<span class="hl sym">);</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">Main</span><span class="hl sym">(</span>String<span class="hl sym">[]</span> args<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwb">int</span> n <span class="hl sym">=</span> <span class="hl num">600</span><span class="hl sym">;</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>args<span class="hl sym">.</span>Length <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
         n <span class="hl sym">=</span> Int32<span class="hl sym">.</span><span class="hl kwd">Parse</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>

      <span class="hl kwd">PrintColors</span><span class="hl sym">();</span>
      Console<span class="hl sym">.</span>Out<span class="hl sym">.</span><span class="hl kwd">WriteLine</span><span class="hl sym">();</span>

      <span class="hl kwd">RunGame</span><span class="hl sym">(</span>n<span class="hl sym">,</span> Color<span class="hl sym">.</span>blue<span class="hl sym">,</span> Color<span class="hl sym">.</span>red<span class="hl sym">,</span> Color<span class="hl sym">.</span>yellow<span class="hl sym">);</span>
      <span class="hl kwd">RunGame</span><span class="hl sym">(</span>n<span class="hl sym">,</span> Color<span class="hl sym">.</span>blue<span class="hl sym">,</span> Color<span class="hl sym">.</span>red<span class="hl sym">,</span> Color<span class="hl sym">.</span>yellow<span class="hl sym">,</span> Color<span class="hl sym">.</span>red<span class="hl sym">,</span> Color<span class="hl sym">.</span>yellow<span class="hl sym">,</span>
            Color<span class="hl sym">.</span>blue<span class="hl sym">,</span> Color<span class="hl sym">.</span>red<span class="hl sym">,</span> Color<span class="hl sym">.</span>yellow<span class="hl sym">,</span> Color<span class="hl sym">.</span>red<span class="hl sym">,</span> Color<span class="hl sym">.</span>blue<span class="hl sym">);</span>
   <span class="hl sym">}</span>


   <span class="hl kwa">private static</span> <span class="hl kwb">void</span> <span class="hl kwd">PrintColors</span><span class="hl sym">()</span>
   <span class="hl sym">{</span>
      Color<span class="hl sym">[]</span> c <span class="hl sym">= {</span> Color<span class="hl sym">.</span>blue<span class="hl sym">,</span> Color<span class="hl sym">.</span>red<span class="hl sym">,</span> Color<span class="hl sym">.</span>yellow <span class="hl sym">};</span>

      <span class="hl kwa">foreach</span> <span class="hl sym">(</span>Color c1 in c<span class="hl sym">)</span>
      <span class="hl sym">{</span>
         <span class="hl kwa">foreach</span> <span class="hl sym">(</span>Color c2 in c<span class="hl sym">)</span>
            Console<span class="hl sym">.</span>Out<span class="hl sym">.</span><span class="hl kwd">WriteLine</span><span class="hl sym">(</span><span class="hl str">&quot;{0} + {1} -&gt; {2}&quot;</span><span class="hl sym">,</span> c1<span class="hl sym">,</span> c2<span class="hl sym">,</span> <span class="hl kwd">ColorCompliment</span><span class="hl sym">(</span>c1<span class="hl sym">,</span> c2<span class="hl sym">));</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

