<source>
<def></def><com>/*</com><br />
<com>	The Computer Language Shootout</com><br />
<com>	http://shootout.alioth.debian.org/</com><br />
<com></com><br />
<com>	contributed by Jochen Hinrichsen</com><br />
<com></com><br />
<com>	Trailing 'G' stands for BigInteger (unrestricted size) in groovy</com><br />
<com>*/</com><def></def><br />
<br />
<kwa>class</kwa> <def>T</def> <sym>{</sym><br />
<def></def><br />
	<kwa>public</kwa> <def>q</def><sym>,</sym> <def>r</def><sym>,</sym> <def>s</def><sym>,</sym> <def>t</def><sym>,</sym> <def>k</def> <sym>=</sym> <def></def><num>0</num><def>G<br />
<br />
	def</def> <kwd>compose</kwd><def></def><sym>(</sym><def>t2</def><sym>) {</sym><br />
<def></def>		<kwa>new</kwa> <def></def><kwd>T</kwd><def></def><sym>(</sym><def>q</def><sym>:</sym> <def>q</def> <sym>*</sym> <def>t2</def><sym>.</sym><def>q</def><sym>,</sym><br />
<def>			r</def><sym>:</sym> <def>q</def> <sym>*</sym> <def>t2</def><sym>.</sym><def>r</def> <sym>+</sym> <def>r</def> <sym>*</sym> <def>t2</def><sym>.</sym><def>t</def><sym>,</sym><br />
<def>			s</def><sym>:</sym> <def>s</def> <sym>*</sym> <def>t2</def><sym>.</sym><def>q</def> <sym>+</sym> <def>t</def> <sym>*</sym> <def>t2</def><sym>.</sym><def>s</def><sym>,</sym><br />
<def>			t</def><sym>:</sym> <def>s</def> <sym>*</sym> <def>t2</def><sym>.</sym><def>r</def> <sym>+</sym> <def>t</def> <sym>*</sym> <def>t2</def><sym>.</sym><def>t</def><sym>)</sym><br />
<def></def>	<sym>}</sym><br />
<def><br />
	def</def> <kwd>extract</kwd><def></def><sym>(</sym><def>j</def><sym>) {</sym><br />
<def></def>		<slc>// groovy does not support integer division using /</slc><br />
<def></def>		<sym>(</sym><def>q</def><sym>*</sym><def>j</def> <sym>+</sym> <def>r</def><sym>).</sym><def></def><kwd>divide</kwd><def></def><sym>(</sym><def>s</def><sym>*</sym><def>j</def> <sym>+</sym> <def>t</def><sym>)</sym><br />
<def></def>	<sym>}</sym><br />
<def><br />
	def</def> <kwd>next</kwd><def></def><sym>() {</sym><br />
<def>		k</def><sym>++</sym><br />
<def>		q</def> <sym>=</sym> <def>k<br />
		r</def> <sym>=</sym> <def></def><num>4</num><def>G</def><sym>*</sym><def>k</def><sym>+</sym><def></def><num>2</num><def>G<br />
		s</def> <sym>=</sym> <def></def><num>0</num><def>G<br />
		t</def> <sym>=</sym> <def></def><num>2</num><def>G</def><sym>*</sym><def>k</def><sym>+</sym><def></def><num>1</num><def>G</def><br />
<br />
		<kwa>this</kwa><br />
<def></def>	<sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwa>class</kwa> <def>Digits</def> <sym>{</sym><br />
<def><br />
    def x</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>T</kwd><def></def><sym>(</sym><def>q</def><sym>:</sym><def></def><num>0</num><def>G</def><sym>,</sym> <def>r</def><sym>:</sym><def></def><num>0</num><def>G</def><sym>,</sym> <def>s</def><sym>:</sym><def></def><num>0</num><def>G</def><sym>,</sym> <def>t</def><sym>:</sym><def></def><num>0</num><def>G</def><sym>)</sym><br />
<def>    def z</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>T</kwd><def></def><sym>(</sym><def>q</def><sym>:</sym><def></def><num>1</num><def>G</def><sym>,</sym> <def>r</def><sym>:</sym><def></def><num>0</num><def>G</def><sym>,</sym> <def>s</def><sym>:</sym><def></def><num>0</num><def>G</def><sym>,</sym> <def>t</def><sym>:</sym><def></def><num>1</num><def>G</def><sym>)</sym><br />
<def></def><br />
	<kwa>private</kwa> <def></def><kwd>consume</kwd><def></def><sym>(</sym><def>T t</def><sym>) {</sym><br />
<def>		z</def><sym>.</sym><def></def><kwd>compose</kwd><def></def><sym>(</sym><def>t</def><sym>)</sym><br />
<def></def>	<sym>}</sym><br />
<def></def><br />
	<kwa>private</kwa> <def></def><kwd>digit</kwd><def></def><sym>() {</sym><br />
<def>		z</def><sym>.</sym><def></def><kwd>extract</kwd><def></def><sym>(</sym><def></def><num>3</num><def>G</def><sym>)</sym><br />
<def></def>	<sym>}</sym><br />
<def></def><br />
	<kwa>private</kwa> <def></def><kwd>isSafe</kwd><def></def><sym>(</sym><def>digit</def><sym>) {</sym><br />
<def>		digit</def> <sym>==</sym> <def>z</def><sym>.</sym><def></def><kwd>extract</kwd><def></def><sym>(</sym><def></def><num>4</num><def>G</def><sym>)</sym><br />
<def></def>	<sym>}</sym><br />
<def><br />
	def</def> <kwd>next</kwd><def></def><sym>() {</sym><br />
<def>		def y</def> <sym>=</sym> <def></def><kwd>digit</kwd><def></def><sym>()</sym><br />
<def></def>		<kwa>if</kwa> <def></def><sym>(</sym><def></def><kwd>isSafe</kwd><def></def><sym>(</sym><def>y</def><sym>)) {</sym><br />
<def>			z</def> <sym>=</sym> <def></def><kwd>produce</kwd><def></def><sym>(</sym><def>y</def><sym>)</sym><br />
<def></def>			<kwa>return</kwa> <def>y</def><br />
		<sym>}</sym> <def></def><kwa>else</kwa> <def></def><sym>{</sym><br />
<def>			z</def> <sym>=</sym> <def></def><kwd>consume</kwd><def></def><sym>(</sym><def>x</def><sym>.</sym><def></def><kwd>next</kwd><def></def><sym>())</sym><br />
<def></def>			<kwa>return</kwa> <def></def><kwd>next</kwd><def></def><sym>()</sym><br />
<def></def>		<sym>}</sym><br />
<def></def>	<sym>}</sym><br />
<def></def><br />
	<kwa>private</kwa> <def></def><kwd>produce</kwd><def></def><sym>(</sym><def>y</def><sym>) {</sym><br />
<def></def>        <kwa>new</kwa> <def></def><kwd>T</kwd><def></def><sym>(</sym><def>q</def><sym>:</sym><def></def><num>10</num><def>G</def><sym>,</sym> <def>r</def><sym>:-</sym><def></def><num>10</num><def>G</def><sym>*</sym><def>y</def><sym>,</sym> <def>s</def><sym>:</sym><def></def><num>0</num><def>G</def><sym>,</sym> <def>t</def><sym>:</sym><def></def><num>1</num><def>G</def><sym>).</sym><def></def><kwd>compose</kwd><def></def><sym>(</sym><def>z</def><sym>)</sym><br />
<def></def>	<sym>}</sym><br />
<def></def><sym>}</sym><br />
<def><br />
def L</def> <sym>=</sym> <def></def><num>10</num><br />
<def>def n</def> <sym>= (</sym><def>args</def><sym>.</sym><def>length</def> <sym>==</sym> <def></def><num>0</num><def></def><sym>)</sym> <def>?</def> <num>10</num> <def></def><sym>:</sym> <def>args</def><sym>[</sym><def></def><num>0</num><def></def><sym>].</sym><def></def><kwd>toInteger</kwd><def></def><sym>()</sym><br />
<def>def digits</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>Digits</kwd><def></def><sym>()</sym><br />
<def>def j</def> <sym>=</sym> <def></def><num>0</num><br />
<def></def><kwa>while</kwa> <def></def><sym>(</sym><def>n</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>){</sym><br />
<def></def>	<kwa>if</kwa> <def></def><sym>(</sym><def>n</def> <sym>&gt;=</sym> <def>L</def><sym>) {</sym><br />
<def></def>		<kwa>for</kwa> <def></def><sym>(</sym><def>i in</def> <num>0</num><def></def><sym>..&lt;</sym><def>L</def><sym>)</sym> <def>print digits</def><sym>.</sym><def></def><kwd>next</kwd><def></def><sym>()</sym><br />
<def>		j</def> <sym>+=</sym> <def>L</def><br />
	<sym>}</sym> <def></def><kwa>else</kwa> <def></def><sym>{</sym><br />
<def></def>		<kwa>for</kwa> <def></def><sym>(</sym><def>i in</def> <num>0</num><def></def><sym>..&lt;</sym><def>n</def><sym>)</sym> <def>print digits</def><sym>.</sym><def></def><kwd>next</kwd><def></def><sym>()</sym><br />
<def></def>		<kwd>print</kwd><def></def><sym>(</sym><def></def><str>&quot; &quot;</str><def></def> <sym>* (</sym><def>L</def><sym>-</sym><def>n</def><sym>-</sym><def></def><num>1</num><def></def><sym>))</sym><br />
<def>		j</def> <sym>+=</sym> <def>n</def><sym>;</sym><br />
<def></def>	<sym>}</sym><br />
<def></def>	<kwd>print</kwd><def></def><sym>(</sym><def></def><str>&quot;</str><esc>\t</esc><str>:&quot;</str><def></def><sym>);</sym><br />
<def>	println j<br />
	n</def> <sym>-=</sym> <def>L</def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<slc>// EOF</slc><br />
<def></def><br />
</source>
