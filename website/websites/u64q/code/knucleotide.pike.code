<source>
<def></def><com>/* The Computer Language Shootout</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com>  contributed by - Lance Dillon</com><br />
<com>*/</com><def><br />
<br />
class KNucleotide</def> <sym>{</sym><br />
<def></def>  <kwb>string</kwb> <def>sequence</def><sym>;</sym><br />
<def></def>  <kwb>int</kwb> <def>count</def><sym>=</sym><def></def><num>1</num><def></def><sym>;</sym><br />
<def></def><br />
  <kwb>void</kwb> <def></def><kwd>create</kwd><def></def><sym>(</sym><def></def><kwb>string</kwb> <def>s</def><sym>) {</sym><br />
<def>    sequence</def><sym>=</sym><def>s</def><sym>;</sym><br />
<def></def>  <sym>}</sym><br />
<def></def><br />
  <kwb>void</kwb> <def></def><kwd>writeFrequencies</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>k</def><sym>) {</sym><br />
<def></def>    <kwb>mapping</kwb><def></def><sym>(</sym><def></def><kwb>string</kwb><def></def><sym>:</sym><def>KNucleotide</def><sym>)</sym> <def>frequencies</def><sym>=</sym><def></def><kwd>generateFrequencies</kwd><def></def><sym>(</sym><def>k</def><sym>);</sym><br />
<def></def>    <kwb>array</kwb><def></def><sym>(</sym><def>KNucleotide</def><sym>)</sym> <def>list</def><sym>=</sym><def></def><kwa>values</kwa><def></def><sym>(</sym><def>frequencies</def><sym>);</sym><br />
<def>    list</def><sym>=</sym><def></def><kwa>reverse</kwa><def></def><sym>(</sym><def>Array.</def><kwd>sort_array</kwd><def></def><sym>(</sym><def>list</def><sym>,</sym><def></def><kwd>lambda</kwd><def></def><sym>(</sym><def>KNucleotide a</def><sym>,</sym> <def>KNucleotide b</def><sym>) {</sym><br />
<def></def>			<kwd>if</kwd> <def></def><sym>(</sym><def>a</def><sym>-&gt;</sym><def>count</def><sym>&gt;</sym><def>b</def><sym>-&gt;</sym><def>count</def><sym>)</sym><br />
<def>			  return</def> <num>1</num><def></def><sym>;</sym><br />
<def></def>			<kwd>if</kwd> <def></def><sym>(</sym><def>a</def><sym>-&gt;</sym><def>count</def><sym>&lt;</sym><def>b</def><sym>-&gt;</sym><def>count</def><sym>)</sym><br />
<def>			  return</def> <sym>-</sym><def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>			<kwd>if</kwd> <def></def><sym>(</sym><def>a</def><sym>-&gt;</sym><def>sequence</def><sym>&gt;</sym><def>b</def><sym>-&gt;</sym><def>sequence</def><sym>)</sym><br />
<def>			  return</def> <num>1</num><def></def><sym>;</sym><br />
<def></def>			<kwd>if</kwd> <def></def><sym>(</sym><def>a</def><sym>-&gt;</sym><def>sequence</def><sym>&lt;</sym><def>b</def><sym>-&gt;</sym><def>sequence</def><sym>)</sym><br />
<def>			  return</def> <sym>-</sym><def></def><num>1</num><def></def><sym>;</sym><br />
<def>			return</def> <num>0</num><def></def><sym>; } ));</sym><br />
<def></def>    <kwb>int</kwb> <def>sum</def><sym>=</sym><def></def><kwa>sizeof</kwa><def></def><sym>(</sym><def>sequence</def><sym>)-</sym><def>k</def><sym>+</sym><def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>    <kwd>foreach</kwd> <def></def><sym>(</sym><def>list</def><sym>;</sym> <def></def><kwb>int</kwb> <def>ind</def><sym>;</sym> <def></def><kwb>object</kwb> <def>kn</def><sym>) {</sym><br />
<def>      predef</def><sym>::</sym><def></def><kwa>write</kwa><def></def><sym>(</sym><def></def><str>&quot;%s %03.3f</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym><def>kn</def><sym>-&gt;</sym><def>sequence</def><sym>,((</sym><def></def><kwb>float</kwb><def></def><sym>)</sym><def>kn</def><sym>-&gt;</sym><def>count</def><sym>/(</sym><def></def><kwb>float</kwb><def></def><sym>)</sym><def>sum</def><sym>*</sym><def></def><num>100.0</num><def></def><sym>));</sym><br />
<def></def>    <sym>}</sym><br />
<def>    predef</def><sym>::</sym><def></def><kwa>write</kwa><def></def><sym>(</sym><def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>);</sym><br />
<def></def>  <sym>}</sym><br />
<def></def><br />
  <kwb>void</kwb> <def></def><kwd>writeCount</kwd><def></def><sym>(</sym><def></def><kwb>string</kwb> <def>nucleotideFragment</def><sym>) {</sym><br />
<def></def>    <kwb>mapping</kwb><def></def><sym>(</sym><def></def><kwb>string</kwb><def></def><sym>:</sym><def>KNucleotide</def><sym>)</sym> <def>frequencies</def><sym>=</sym><def></def><kwd>generateFrequencies</kwd><def></def><sym>(</sym><def></def><kwa>sizeof</kwa><def></def><sym>(</sym><def>nucleotideFragment</def><sym>));</sym><br />
<def></def>    <kwb>int</kwb> <def>count</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym><br />
<def>    KNucleotide item</def><sym>=</sym><def>frequencies</def><sym>[</sym><def>nucleotideFragment</def><sym>];</sym><br />
<def></def>    <kwd>if</kwd> <def></def><sym>(</sym><def>item</def><sym>)</sym><br />
<def>      count</def><sym>=</sym><def>item</def><sym>-&gt;</sym><def>count</def><sym>;</sym><br />
<def>    predef</def><sym>::</sym><def></def><kwa>write</kwa><def></def><sym>(</sym><def></def><str>&quot;%d</str><esc>\t</esc><str>%s</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym><def>count</def><sym>,</sym><def>nucleotideFragment</def><sym>);</sym><br />
<def></def>  <sym>}</sym><br />
<def></def><br />
<br />
  <kwb>mapping</kwb><def></def><sym>(</sym><def></def><kwb>string</kwb><def></def><sym>:</sym><def>KNucleotide</def><sym>)</sym> <def></def><kwd>generateFrequencies</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>length</def><sym>) {</sym><br />
<def></def>    <kwb>mapping</kwb><def></def><sym>(</sym><def></def><kwb>string</kwb><def></def><sym>:</sym><def>KNucleotide</def><sym>)</sym> <def>frequencies</def><sym>=([]);</sym><br />
<def></def><br />
    <kwb>void</kwb> <def></def><kwd>kFrequency</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>offset</def><sym>,</sym> <def></def><kwb>int</kwb> <def>k</def><sym>) {</sym><br />
<def></def>      <kwb>int</kwb> <def>n</def><sym>=</sym><def></def><kwa>sizeof</kwa><def></def><sym>(</sym><def>sequence</def><sym>)-</sym><def>k</def><sym>+</sym><def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>      <kwd>for</kwd> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def><sym>=</sym><def>offset</def><sym>;</sym> <def>i</def><sym>&lt;</sym><def>n</def><sym>;</sym> <def>i</def><sym>+=</sym><def>k</def><sym>) {</sym><br />
<def></def>	<kwb>string</kwb> <def>fragment</def><sym>=</sym><def>sequence</def><sym>[</sym><def>i..i</def><sym>+</sym><def>k</def><sym>-</sym><def></def><num>1</num><def></def><sym>];</sym><br />
<def></def>	<kwb>object</kwb> <def>item</def><sym>=</sym><def>frequencies</def><sym>[</sym><def>fragment</def><sym>];</sym><br />
<def></def>	<kwd>if</kwd> <def></def><sym>(</sym><def>item</def><sym>) {</sym><br />
<def>	  item</def><sym>-&gt;</sym><def>count</def><sym>++;</sym><br />
<def></def>	<sym>}</sym> <def>else</def> <sym>{</sym><br />
<def>	  frequencies</def><sym>[</sym><def>fragment</def><sym>]=</sym><def></def><kwd>KNucleotide</kwd><def></def><sym>(</sym><def>fragment</def><sym>);</sym><br />
<def></def>	<sym>}</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>    <sym>};</sym><br />
<def></def><br />
    <kwd>for</kwd> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>offset</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>offset</def><sym>&lt;</sym><def>length</def><sym>;</sym> <def>offset</def><sym>++)</sym><br />
<def></def>      <kwd>kFrequency</kwd><def></def><sym>(</sym><def>offset</def><sym>,</sym><def>length</def><sym>);</sym><br />
<def>    return frequencies</def><sym>;</sym><br />
<def></def>  <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>int</kwb> <def></def><kwd>main</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>argc</def><sym>,</sym> <def></def><kwb>array</kwb> <def>argv</def><sym>) {</sym><br />
<def>  Stdio.FILE r</def><sym>=</sym><def>Stdio.stdin</def><sym>;</sym><br />
<def></def>  <kwb>string</kwb> <def>line</def><sym>;</sym><br />
<def>  String.Buffer buffer</def><sym>=</sym><def>String.</def><kwd>Buffer</kwd><def></def><sym>();</sym><br />
<def></def><br />
  <kwd>while</kwd> <def></def><sym>(</sym><def>line</def><sym>=</sym><def>r</def><sym>-&gt;</sym><def></def><kwd>gets</kwd><def></def><sym>()) {</sym><br />
<def></def>    <kwd>if</kwd> <def></def><sym>(</sym><def>line</def><sym>[</sym><def>.</def><num>.5</num><def></def><sym>]==</sym><def></def><str>&quot;&gt;THREE&quot;</str><def></def><sym>)</sym><br />
<def>      break</def><sym>;</sym><br />
<def></def>  <sym>}</sym><br />
<def></def><br />
  <kwd>while</kwd> <def></def><sym>(</sym><def>line</def><sym>=</sym><def>r</def><sym>-&gt;</sym><def></def><kwd>gets</kwd><def></def><sym>()) {</sym><br />
<def></def>    <kwd>if</kwd> <def></def><sym>(</sym><def>line</def><sym>[</sym><def></def><num>0</num><def></def><sym>]==</sym><def></def><str>'&gt;'</str><def></def><sym>)</sym><br />
<def>      break</def><sym>;</sym><br />
<def></def>    <kwd>if</kwd> <def></def><sym>(</sym><def>line</def><sym>[</sym><def></def><num>0</num><def></def><sym>]!=</sym><def></def><str>';'</str><def></def><sym>)</sym><br />
<def>      buffer</def><sym>+=</sym><def></def><kwa>upper_case</kwa><def></def><sym>(</sym><def>line</def><sym>);</sym><br />
<def></def>  <sym>}</sym><br />
<def></def><br />
  <kwb>object</kwb> <def>kn</def><sym>=</sym><def></def><kwd>KNucleotide</kwd><def></def><sym>(</sym><def>buffer</def><sym>-&gt;</sym><def></def><kwd>get</kwd><def></def><sym>());</sym><br />
<def>  kn</def><sym>-&gt;</sym><def></def><kwd>writeFrequencies</kwd><def></def><sym>(</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def>  kn</def><sym>-&gt;</sym><def></def><kwd>writeFrequencies</kwd><def></def><sym>(</sym><def></def><num>2</num><def></def><sym>);</sym><br />
<def><br />
  kn</def><sym>-&gt;</sym><def></def><kwd>writeCount</kwd><def></def><sym>(</sym><def></def><str>&quot;GGT&quot;</str><def></def><sym>);</sym><br />
<def>  kn</def><sym>-&gt;</sym><def></def><kwd>writeCount</kwd><def></def><sym>(</sym><def></def><str>&quot;GGTA&quot;</str><def></def><sym>);</sym><br />
<def>  kn</def><sym>-&gt;</sym><def></def><kwd>writeCount</kwd><def></def><sym>(</sym><def></def><str>&quot;GGTATT&quot;</str><def></def><sym>);</sym><br />
<def>  kn</def><sym>-&gt;</sym><def></def><kwd>writeCount</kwd><def></def><sym>(</sym><def></def><str>&quot;GGTATTTTAATT&quot;</str><def></def><sym>);</sym><br />
<def>  kn</def><sym>-&gt;</sym><def></def><kwd>writeCount</kwd><def></def><sym>(</sym><def></def><str>&quot;GGTATTTTAATTTATAGT&quot;</str><def></def><sym>);</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
