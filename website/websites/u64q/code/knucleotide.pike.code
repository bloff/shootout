<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">  contributed by - Lance Dillon</span>
<span class="hl com">*/</span>

class KNucleotide <span class="hl sym">{</span>
  <span class="hl kwb">string</span> sequence<span class="hl sym">;</span>
  <span class="hl kwb">int</span> count<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">;</span>

  <span class="hl kwb">void</span> <span class="hl kwd">create</span><span class="hl sym">(</span><span class="hl kwb">string</span> s<span class="hl sym">) {</span>
    sequence<span class="hl sym">=</span>s<span class="hl sym">;</span>
  <span class="hl sym">}</span>

  <span class="hl kwb">void</span> <span class="hl kwd">writeFrequencies</span><span class="hl sym">(</span><span class="hl kwb">int</span> k<span class="hl sym">) {</span>
    <span class="hl kwb">mapping</span><span class="hl sym">(</span><span class="hl kwb">string</span><span class="hl sym">:</span>KNucleotide<span class="hl sym">)</span> frequencies<span class="hl sym">=</span><span class="hl kwd">generateFrequencies</span><span class="hl sym">(</span>k<span class="hl sym">);</span>
    <span class="hl kwb">array</span><span class="hl sym">(</span>KNucleotide<span class="hl sym">)</span> list<span class="hl sym">=</span><span class="hl kwa">values</span><span class="hl sym">(</span>frequencies<span class="hl sym">);</span>
    list<span class="hl sym">=</span><span class="hl kwa">reverse</span><span class="hl sym">(</span>Array.<span class="hl kwd">sort_array</span><span class="hl sym">(</span>list<span class="hl sym">,</span><span class="hl kwd">lambda</span><span class="hl sym">(</span>KNucleotide a<span class="hl sym">,</span> KNucleotide b<span class="hl sym">) {</span>
			<span class="hl kwd">if</span> <span class="hl sym">(</span>a<span class="hl sym">-&gt;</span>count<span class="hl sym">&gt;</span>b<span class="hl sym">-&gt;</span>count<span class="hl sym">)</span>
			  return <span class="hl num">1</span><span class="hl sym">;</span>
			<span class="hl kwd">if</span> <span class="hl sym">(</span>a<span class="hl sym">-&gt;</span>count<span class="hl sym">&lt;</span>b<span class="hl sym">-&gt;</span>count<span class="hl sym">)</span>
			  return <span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">;</span>
			<span class="hl kwd">if</span> <span class="hl sym">(</span>a<span class="hl sym">-&gt;</span>sequence<span class="hl sym">&gt;</span>b<span class="hl sym">-&gt;</span>sequence<span class="hl sym">)</span>
			  return <span class="hl num">1</span><span class="hl sym">;</span>
			<span class="hl kwd">if</span> <span class="hl sym">(</span>a<span class="hl sym">-&gt;</span>sequence<span class="hl sym">&lt;</span>b<span class="hl sym">-&gt;</span>sequence<span class="hl sym">)</span>
			  return <span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">;</span>
			return <span class="hl num">0</span><span class="hl sym">; } ));</span>
    <span class="hl kwb">int</span> sum<span class="hl sym">=</span><span class="hl kwa">sizeof</span><span class="hl sym">(</span>sequence<span class="hl sym">)-</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">;</span>
    <span class="hl kwd">foreach</span> <span class="hl sym">(</span>list<span class="hl sym">;</span> <span class="hl kwb">int</span> ind<span class="hl sym">;</span> <span class="hl kwb">object</span> kn<span class="hl sym">) {</span>
      predef<span class="hl sym">::</span><span class="hl kwa">write</span><span class="hl sym">(</span><span class="hl str">&quot;%s %03.3f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span>kn<span class="hl sym">-&gt;</span>sequence<span class="hl sym">,((</span><span class="hl kwb">float</span><span class="hl sym">)</span>kn<span class="hl sym">-&gt;</span>count<span class="hl sym">/(</span><span class="hl kwb">float</span><span class="hl sym">)</span>sum<span class="hl sym">*</span><span class="hl num">100.0</span><span class="hl sym">));</span>
    <span class="hl sym">}</span>
    predef<span class="hl sym">::</span><span class="hl kwa">write</span><span class="hl sym">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">);</span>
  <span class="hl sym">}</span>

  <span class="hl kwb">void</span> <span class="hl kwd">writeCount</span><span class="hl sym">(</span><span class="hl kwb">string</span> nucleotideFragment<span class="hl sym">) {</span>
    <span class="hl kwb">mapping</span><span class="hl sym">(</span><span class="hl kwb">string</span><span class="hl sym">:</span>KNucleotide<span class="hl sym">)</span> frequencies<span class="hl sym">=</span><span class="hl kwd">generateFrequencies</span><span class="hl sym">(</span><span class="hl kwa">sizeof</span><span class="hl sym">(</span>nucleotideFragment<span class="hl sym">));</span>
    <span class="hl kwb">int</span> count<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span>
    KNucleotide item<span class="hl sym">=</span>frequencies<span class="hl sym">[</span>nucleotideFragment<span class="hl sym">];</span>
    <span class="hl kwd">if</span> <span class="hl sym">(</span>item<span class="hl sym">)</span>
      count<span class="hl sym">=</span>item<span class="hl sym">-&gt;</span>count<span class="hl sym">;</span>
    predef<span class="hl sym">::</span><span class="hl kwa">write</span><span class="hl sym">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\t</span><span class="hl str">%s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span>count<span class="hl sym">,</span>nucleotideFragment<span class="hl sym">);</span>
  <span class="hl sym">}</span>


  <span class="hl kwb">mapping</span><span class="hl sym">(</span><span class="hl kwb">string</span><span class="hl sym">:</span>KNucleotide<span class="hl sym">)</span> <span class="hl kwd">generateFrequencies</span><span class="hl sym">(</span><span class="hl kwb">int</span> length<span class="hl sym">) {</span>
    <span class="hl kwb">mapping</span><span class="hl sym">(</span><span class="hl kwb">string</span><span class="hl sym">:</span>KNucleotide<span class="hl sym">)</span> frequencies<span class="hl sym">=([]);</span>

    <span class="hl kwb">void</span> <span class="hl kwd">kFrequency</span><span class="hl sym">(</span><span class="hl kwb">int</span> offset<span class="hl sym">,</span> <span class="hl kwb">int</span> k<span class="hl sym">) {</span>
      <span class="hl kwb">int</span> n<span class="hl sym">=</span><span class="hl kwa">sizeof</span><span class="hl sym">(</span>sequence<span class="hl sym">)-</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl kwd">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span>offset<span class="hl sym">;</span> i<span class="hl sym">&lt;</span>n<span class="hl sym">;</span> i<span class="hl sym">+=</span>k<span class="hl sym">) {</span>
	<span class="hl kwb">string</span> fragment<span class="hl sym">=</span>sequence<span class="hl sym">[</span>i..i<span class="hl sym">+</span>k<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">];</span>
	<span class="hl kwb">object</span> item<span class="hl sym">=</span>frequencies<span class="hl sym">[</span>fragment<span class="hl sym">];</span>
	<span class="hl kwd">if</span> <span class="hl sym">(</span>item<span class="hl sym">) {</span>
	  item<span class="hl sym">-&gt;</span>count<span class="hl sym">++;</span>
	<span class="hl sym">}</span> else <span class="hl sym">{</span>
	  frequencies<span class="hl sym">[</span>fragment<span class="hl sym">]=</span><span class="hl kwd">KNucleotide</span><span class="hl sym">(</span>fragment<span class="hl sym">);</span>
	<span class="hl sym">}</span>
      <span class="hl sym">}</span>
    <span class="hl sym">};</span>

    <span class="hl kwd">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> offset<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> offset<span class="hl sym">&lt;</span>length<span class="hl sym">;</span> offset<span class="hl sym">++)</span>
      <span class="hl kwd">kFrequency</span><span class="hl sym">(</span>offset<span class="hl sym">,</span>length<span class="hl sym">);</span>
    return frequencies<span class="hl sym">;</span>
  <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">array</span> argv<span class="hl sym">) {</span>
  Stdio.FILE r<span class="hl sym">=</span>Stdio.stdin<span class="hl sym">;</span>
  <span class="hl kwb">string</span> line<span class="hl sym">;</span>
  String.Buffer buffer<span class="hl sym">=</span>String.<span class="hl kwd">Buffer</span><span class="hl sym">();</span>

  <span class="hl kwd">while</span> <span class="hl sym">(</span>line<span class="hl sym">=</span>r<span class="hl sym">-&gt;</span><span class="hl kwd">gets</span><span class="hl sym">()) {</span>
    <span class="hl kwd">if</span> <span class="hl sym">(</span>line<span class="hl sym">[</span>.<span class="hl num">.5</span><span class="hl sym">]==</span><span class="hl str">&quot;&gt;THREE&quot;</span><span class="hl sym">)</span>
      break<span class="hl sym">;</span>
  <span class="hl sym">}</span>

  <span class="hl kwd">while</span> <span class="hl sym">(</span>line<span class="hl sym">=</span>r<span class="hl sym">-&gt;</span><span class="hl kwd">gets</span><span class="hl sym">()) {</span>
    <span class="hl kwd">if</span> <span class="hl sym">(</span>line<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]==</span><span class="hl str">'&gt;'</span><span class="hl sym">)</span>
      break<span class="hl sym">;</span>
    <span class="hl kwd">if</span> <span class="hl sym">(</span>line<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]!=</span><span class="hl str">';'</span><span class="hl sym">)</span>
      buffer<span class="hl sym">+=</span><span class="hl kwa">upper_case</span><span class="hl sym">(</span>line<span class="hl sym">);</span>
  <span class="hl sym">}</span>

  <span class="hl kwb">object</span> kn<span class="hl sym">=</span><span class="hl kwd">KNucleotide</span><span class="hl sym">(</span>buffer<span class="hl sym">-&gt;</span><span class="hl kwd">get</span><span class="hl sym">());</span>
  kn<span class="hl sym">-&gt;</span><span class="hl kwd">writeFrequencies</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">);</span>
  kn<span class="hl sym">-&gt;</span><span class="hl kwd">writeFrequencies</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">);</span>

  kn<span class="hl sym">-&gt;</span><span class="hl kwd">writeCount</span><span class="hl sym">(</span><span class="hl str">&quot;GGT&quot;</span><span class="hl sym">);</span>
  kn<span class="hl sym">-&gt;</span><span class="hl kwd">writeCount</span><span class="hl sym">(</span><span class="hl str">&quot;GGTA&quot;</span><span class="hl sym">);</span>
  kn<span class="hl sym">-&gt;</span><span class="hl kwd">writeCount</span><span class="hl sym">(</span><span class="hl str">&quot;GGTATT&quot;</span><span class="hl sym">);</span>
  kn<span class="hl sym">-&gt;</span><span class="hl kwd">writeCount</span><span class="hl sym">(</span><span class="hl str">&quot;GGTATTTTAATT&quot;</span><span class="hl sym">);</span>
  kn<span class="hl sym">-&gt;</span><span class="hl kwd">writeCount</span><span class="hl sym">(</span><span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl sym">);</span>
<span class="hl sym">}</span>
