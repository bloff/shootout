<span class="hl com">(*</span>
<span class="hl com">** The Computer Language Benchmarks Game</span>
<span class="hl com">** http://shootout.alioth.debian.org/</span>
<span class="hl com">**</span>
<span class="hl com">** contributed by Hongwei Xi</span>
<span class="hl com">**</span>
<span class="hl com">** compilation command:</span>
<span class="hl com">**   atscc -O3 -fomit-frame-pointer revcomp.dats -o revcomp</span>
<span class="hl com">**)</span>

staload <span class="hl str">&quot;libc/SATS/stdio.sats&quot;</span>

<span class="hl kwa">extern fun</span> iub_comp <span class="hl sym">(</span>b<span class="hl sym">:</span> byte<span class="hl sym">):</span> byte <span class="hl sym">=</span> <span class="hl str">&quot;iub_comp&quot;</span>
<span class="hl kwa">extern fun</span> iub_comp_build <span class="hl sym">():</span> void <span class="hl sym">=</span> <span class="hl str">&quot;iub_comp_build&quot;</span>

<span class="hl com">(* [reverse buf] reverse-complement the string [buf] in place. *)</span>
<span class="hl kwa">fn</span> reverse_buf <span class="hl sym">{</span>pos<span class="hl sym">,</span>bsz<span class="hl sym">:</span>nat <span class="hl sym">|</span> pos <span class="hl sym">&lt;=</span> bsz<span class="hl sym">} {</span>l_buf<span class="hl sym">:</span>addr<span class="hl sym">}</span>
  <span class="hl sym">(</span>pf<span class="hl sym">: !</span>bytes_v <span class="hl sym">(</span>bsz<span class="hl sym">,</span> l_buf<span class="hl sym">) |</span> buf<span class="hl sym">:</span> ptr l_buf<span class="hl sym">,</span> pos<span class="hl sym">:</span> int pos<span class="hl sym">)</span>
  <span class="hl sym">:</span> void <span class="hl sym">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">fun</span> rev <span class="hl sym">{</span>i<span class="hl sym">:</span>nat <span class="hl sym">|</span> i <span class="hl sym">&lt;=</span> pos<span class="hl sym">} .&lt;</span>pos<span class="hl sym">-</span>i<span class="hl sym">&gt;. (</span>
      pf<span class="hl sym">: !</span>bytes_v <span class="hl sym">(</span>bsz<span class="hl sym">,</span> l_buf<span class="hl sym">) |</span> i<span class="hl sym">:</span> int i<span class="hl sym">,</span> j<span class="hl sym">:</span> int <span class="hl sym">(</span>pos<span class="hl sym">-</span>i<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
    <span class="hl sym">) :&lt;</span>cloptr1<span class="hl sym">&gt;</span> void <span class="hl sym">=</span> <span class="hl kwa">begin</span>
      <span class="hl kwa">if</span> i <span class="hl sym">&lt;</span> j <span class="hl kwa">then let</span>
        <span class="hl kwa">val</span> bufi <span class="hl sym">=</span> buf<span class="hl sym">[</span>i<span class="hl sym">]</span>
      <span class="hl kwa">in</span>
        buf<span class="hl sym">[</span>i<span class="hl sym">] :=</span> iub_comp buf<span class="hl sym">[</span>j<span class="hl sym">];</span> buf<span class="hl sym">[</span>j<span class="hl sym">] :=</span> iub_comp bufi<span class="hl sym">;</span>
        rev <span class="hl sym">(</span>pf <span class="hl sym">|</span> i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> j<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
      <span class="hl kwa">end</span>
  <span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>rev<span class="hl sym">]</span>
<span class="hl kwa">in</span>
  rev <span class="hl sym">(</span>pf <span class="hl sym">|</span> <span class="hl num">0</span><span class="hl sym">,</span> pos<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
<span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>reverse_buf<span class="hl sym">]</span>

<span class="hl dir">#define BUFSZ 1024</span>
<span class="hl dir">#define WIDTH 60</span>
<span class="hl dir">#define LINE 128</span>

<span class="hl sym">%{</span>^

static inline
ats_void_type fasta_fputc
  <span class="hl sym">(</span>ats_char_type c<span class="hl sym">,</span> ats_ptr_type out<span class="hl sym">) {</span>
  fputc <span class="hl sym">((</span>char<span class="hl sym">)</span>c<span class="hl sym">, (</span>FILE*)out<span class="hl sym">) ;</span> return <span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl sym">%}</span>

<span class="hl kwa">extern</span>
<span class="hl kwa">fun</span> fwrite_buf <span class="hl sym">{</span>pos<span class="hl sym">,</span>len<span class="hl sym">,</span>bsz<span class="hl sym">:</span>nat <span class="hl sym">|</span> pos <span class="hl sym">+</span> len <span class="hl sym">&lt;=</span> bsz<span class="hl sym">} {</span>l_buf<span class="hl sym">:</span>addr<span class="hl sym">}</span>
  <span class="hl sym">(</span>pf_buf<span class="hl sym">: !</span>bytes_v <span class="hl sym">(</span>bsz<span class="hl sym">,</span> l_buf<span class="hl sym">) |</span>
   buf<span class="hl sym">:</span> ptr l_buf<span class="hl sym">,</span> pos<span class="hl sym">:</span> int pos<span class="hl sym">,</span> len<span class="hl sym">:</span> int len<span class="hl sym">,</span> file<span class="hl sym">: &amp;</span>FILE w<span class="hl sym">)</span>
  <span class="hl sym">:</span> void <span class="hl sym">=</span> <span class="hl str">&quot;fwrite_buf&quot;</span>

<span class="hl kwa">extern fun</span> fputc <span class="hl sym">{</span>m<span class="hl sym">:</span>file_mode<span class="hl sym">}</span>
  <span class="hl sym">(</span>pf<span class="hl sym">:</span> file_mode_lte <span class="hl sym">(</span>m<span class="hl sym">,</span> w<span class="hl sym">) |</span> c<span class="hl sym">:</span> char<span class="hl sym">,</span> out<span class="hl sym">: &amp;</span>FILE m<span class="hl sym">)</span>
  <span class="hl sym">:</span> void <span class="hl sym">=</span> <span class="hl str">&quot;fasta_fputc&quot;</span>

<span class="hl kwa">fn</span> print_fasta <span class="hl sym">{</span>n<span class="hl sym">,</span>sz<span class="hl sym">:</span>nat <span class="hl sym">|</span> n <span class="hl sym">&lt;=</span> sz<span class="hl sym">} {</span>l_buf<span class="hl sym">:</span>addr<span class="hl sym">}</span>
  <span class="hl sym">(</span>pf_buf<span class="hl sym">: !</span>bytes_v <span class="hl sym">(</span>sz<span class="hl sym">,</span> l_buf<span class="hl sym">) |</span> buf<span class="hl sym">:</span> ptr l_buf<span class="hl sym">,</span> n<span class="hl sym">:</span> int n<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">fun</span> pr <span class="hl sym">{</span>pos<span class="hl sym">:</span>nat <span class="hl sym">|</span> pos <span class="hl sym">&lt;=</span> n<span class="hl sym">}</span>
    <span class="hl sym">(</span>pf_buf<span class="hl sym">: !</span>bytes_v <span class="hl sym">(</span>sz<span class="hl sym">,</span> l_buf<span class="hl sym">) |</span>
     file<span class="hl sym">: &amp;</span>FILE w<span class="hl sym">,</span> pos<span class="hl sym">:</span> int pos<span class="hl sym">,</span> left<span class="hl sym">:</span> int <span class="hl sym">(</span>n<span class="hl sym">-</span>pos<span class="hl sym">)):&lt;</span>cloptr1<span class="hl sym">&gt;</span> void <span class="hl sym">=</span>
    <span class="hl kwa">if</span> left <span class="hl sym">&gt;</span> WIDTH <span class="hl kwa">then begin</span>
      fwrite_buf <span class="hl sym">(</span>pf_buf <span class="hl sym">|</span> buf<span class="hl sym">,</span> pos<span class="hl sym">,</span> WIDTH<span class="hl sym">,</span> file<span class="hl sym">);</span>
      fputc <span class="hl sym">(</span>file_mode_lte_w_w <span class="hl sym">|</span> '\n'<span class="hl sym">,</span> file<span class="hl sym">);</span>
      pr <span class="hl sym">(</span>pf_buf <span class="hl sym">|</span> file<span class="hl sym">,</span> pos<span class="hl sym">+</span>WIDTH<span class="hl sym">,</span> left<span class="hl sym">-</span>WIDTH<span class="hl sym">)</span>
    <span class="hl kwa">end else begin</span>
      fwrite_buf <span class="hl sym">(</span>pf_buf <span class="hl sym">|</span> buf<span class="hl sym">,</span> pos<span class="hl sym">,</span> left<span class="hl sym">,</span> file<span class="hl sym">);</span>
      fputc <span class="hl sym">(</span>file_mode_lte_w_w <span class="hl sym">|</span> '\n'<span class="hl sym">,</span> file<span class="hl sym">)</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">val</span> <span class="hl sym">(</span>pf_stdout <span class="hl sym">|</span> stdout<span class="hl sym">) =</span> stdout_get <span class="hl sym">()</span>
<span class="hl kwa">in</span>
  pr <span class="hl sym">(</span>pf_buf <span class="hl sym">| !</span>stdout<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> n<span class="hl sym">);</span> stdout_view_set <span class="hl sym">(</span>pf_stdout <span class="hl sym">|</span> <span class="hl com">(*none*)</span><span class="hl sym">)</span>
<span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>print_fasta<span class="hl sym">]</span>

<span class="hl kwa">extern fun</span> fread_buf_line
  <span class="hl sym">{</span>pos<span class="hl sym">,</span>len<span class="hl sym">,</span>bsz<span class="hl sym">:</span>nat <span class="hl sym">|</span> pos <span class="hl sym">+</span> len <span class="hl sym">&lt;=</span> bsz<span class="hl sym">} {</span>l_buf<span class="hl sym">:</span>addr<span class="hl sym">}</span>
  <span class="hl sym">(</span>pf_buf<span class="hl sym">: !</span>bytes_v <span class="hl sym">(</span>bsz<span class="hl sym">,</span> l_buf<span class="hl sym">) |</span>
   buf<span class="hl sym">:</span> ptr l_buf<span class="hl sym">,</span> pos<span class="hl sym">:</span> int pos<span class="hl sym">,</span> len<span class="hl sym">:</span> int len<span class="hl sym">,</span> file<span class="hl sym">: &amp;</span>FILE r<span class="hl sym">)</span>
  <span class="hl sym">: [</span>pos_new<span class="hl sym">:</span>int <span class="hl sym">|</span> pos <span class="hl sym">&lt;=</span> pos_new<span class="hl sym">;</span> pos_new <span class="hl sym">&lt;</span> pos<span class="hl sym">+</span>len<span class="hl sym">]</span> int pos_new
  <span class="hl sym">=</span> <span class="hl str">&quot;fread_buf_line&quot;</span>

<span class="hl dir">#define c2b byte_of_char</span>

<span class="hl kwa">implement</span> main <span class="hl sym">(</span>argc<span class="hl sym">,</span> argv<span class="hl sym">) =</span> <span class="hl kwa">let</span>

<span class="hl kwa">fun</span> loop <span class="hl sym">{</span>pos<span class="hl sym">,</span>bsz<span class="hl sym">:</span>nat <span class="hl sym">|</span> bsz <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">} {</span>l_buf<span class="hl sym">:</span>addr<span class="hl sym">} (</span>
    pf_ngc<span class="hl sym">:</span> free_ngc_v l_buf
  <span class="hl sym">,</span> pf_buf<span class="hl sym">:</span> bytes_v <span class="hl sym">(</span>bsz<span class="hl sym">,</span> l_buf<span class="hl sym">)</span>
  <span class="hl sym">|</span> inp<span class="hl sym">: &amp;</span>FILE r<span class="hl sym">,</span> buf<span class="hl sym">:</span> ptr l_buf<span class="hl sym">,</span> bsz<span class="hl sym">:</span> int bsz<span class="hl sym">,</span> pos<span class="hl sym">:</span> int pos
  <span class="hl sym">) :</span> void <span class="hl sym">=</span> <span class="hl kwa">begin</span>
  <span class="hl kwa">if</span> pos <span class="hl sym">+</span> LINE <span class="hl sym">&lt;=</span> bsz <span class="hl kwa">then let</span>
    <span class="hl kwa">val</span> pos_new <span class="hl sym">=</span> fread_buf_line <span class="hl sym">(</span>pf_buf <span class="hl sym">|</span> buf<span class="hl sym">,</span> pos<span class="hl sym">,</span> LINE<span class="hl sym">,</span> inp<span class="hl sym">)</span>
  <span class="hl kwa">in</span>
    <span class="hl kwa">if</span> pos_new <span class="hl sym">&gt;</span> pos <span class="hl kwa">then</span>
      <span class="hl kwa">if</span> buf<span class="hl sym">[</span>pos<span class="hl sym">] =</span> c2b '<span class="hl sym">&gt;</span>' <span class="hl kwa">then begin</span>
        <span class="hl kwa">if</span> pos <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then begin</span>
          reverse_buf <span class="hl sym">(</span>pf_buf <span class="hl sym">|</span> buf<span class="hl sym">,</span> pos<span class="hl sym">);</span> print_fasta <span class="hl sym">(</span>pf_buf <span class="hl sym">|</span> buf<span class="hl sym">,</span> pos<span class="hl sym">)</span>
        <span class="hl kwa">end</span><span class="hl sym">;</span>

        <span class="hl kwa">let val</span> <span class="hl sym">(</span>pf_stdout <span class="hl sym">|</span> stdout<span class="hl sym">) =</span> stdout_get <span class="hl sym">()</span> <span class="hl kwa">in</span>
          fwrite_buf <span class="hl sym">(</span>pf_buf <span class="hl sym">|</span> buf<span class="hl sym">,</span> pos<span class="hl sym">,</span> pos_new<span class="hl sym">-</span>pos<span class="hl sym">, !</span>stdout<span class="hl sym">);</span>
          fputc <span class="hl sym">(</span>file_mode_lte_w_w <span class="hl sym">|</span> '\n'<span class="hl sym">, !</span>stdout<span class="hl sym">);</span>
          stdout_view_set <span class="hl sym">(</span>pf_stdout <span class="hl sym">|</span> <span class="hl com">(*none*)</span><span class="hl sym">)</span>
        <span class="hl kwa">end</span><span class="hl sym">;</span>

        loop <span class="hl sym">(</span>pf_ngc<span class="hl sym">,</span> pf_buf <span class="hl sym">|</span> inp<span class="hl sym">,</span> buf<span class="hl sym">,</span> bsz<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">)</span>
      <span class="hl kwa">end else begin</span>
        loop <span class="hl sym">(</span>pf_ngc<span class="hl sym">,</span> pf_buf <span class="hl sym">|</span> inp<span class="hl sym">,</span> buf<span class="hl sym">,</span> bsz<span class="hl sym">,</span> pos_new<span class="hl sym">)</span>
      <span class="hl kwa">end</span>
    <span class="hl kwa">else begin</span>
      <span class="hl kwa">if</span> pos <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then begin</span>
        reverse_buf <span class="hl sym">(</span>pf_buf <span class="hl sym">|</span> buf<span class="hl sym">,</span> pos<span class="hl sym">);</span>
        print_fasta <span class="hl sym">(</span>pf_buf <span class="hl sym">|</span> buf<span class="hl sym">,</span> pos<span class="hl sym">);</span>
        free_ngc <span class="hl sym">(</span>pf_ngc<span class="hl sym">,</span> pf_buf <span class="hl sym">|</span> buf<span class="hl sym">)</span>
      <span class="hl kwa">end else begin</span>
        free_ngc <span class="hl sym">(</span>pf_ngc<span class="hl sym">,</span> pf_buf <span class="hl sym">|</span> buf<span class="hl sym">)</span>
      <span class="hl kwa">end</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">end else let</span>
    <span class="hl kwa">val</span> bsz <span class="hl sym">=</span> bsz <span class="hl sym">+</span> bsz
    <span class="hl kwa">val</span> <span class="hl sym">(</span>pf_ngc<span class="hl sym">,</span> pf_buf <span class="hl sym">|</span> buf<span class="hl sym">) =</span> realloc_ngc <span class="hl sym">(</span>pf_ngc<span class="hl sym">,</span> pf_buf <span class="hl sym">|</span> buf<span class="hl sym">,</span> bsz<span class="hl sym">)</span>
  <span class="hl kwa">in</span>
    loop <span class="hl sym">(</span>pf_ngc<span class="hl sym">,</span> pf_buf <span class="hl sym">|</span> inp<span class="hl sym">,</span> buf<span class="hl sym">,</span> bsz<span class="hl sym">,</span> pos<span class="hl sym">)</span>
  <span class="hl kwa">end</span>
<span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>loop<span class="hl sym">]</span>

<span class="hl kwa">val</span> <span class="hl sym">() =</span> iub_comp_build <span class="hl sym">()</span>
<span class="hl kwa">val</span> <span class="hl sym">(</span>pf_stdin <span class="hl sym">|</span> stdin<span class="hl sym">) =</span> stdin_get <span class="hl sym">()</span>
<span class="hl kwa">val</span> <span class="hl sym">(</span>pf_ngc<span class="hl sym">,</span> pf_buf <span class="hl sym">|</span> buf<span class="hl sym">) =</span> malloc_ngc <span class="hl sym">(</span>BUFSZ<span class="hl sym">)</span>

<span class="hl kwa">in</span>
  loop <span class="hl sym">(</span>pf_ngc<span class="hl sym">,</span> pf_buf <span class="hl sym">| !</span>stdin<span class="hl sym">,</span> buf<span class="hl sym">,</span> BUFSZ<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">);</span>
  stdin_view_set <span class="hl sym">(</span>pf_stdin <span class="hl sym">|</span> <span class="hl com">(*none*)</span><span class="hl sym">)</span>
<span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>main<span class="hl sym">]</span>

<span class="hl sym">//</span>

<span class="hl sym">%{</span>^

<span class="hl dir">#include &lt;errno.h&gt;</span>
<span class="hl dir">#include &lt;limits.h&gt;</span>

static unsigned char iubpairs<span class="hl sym">[][</span><span class="hl num">2</span><span class="hl sym">] = {</span>
    <span class="hl sym">{</span>    'A'<span class="hl sym">,</span>    'T'    <span class="hl sym">},</span>
    <span class="hl sym">{</span>    'C'<span class="hl sym">,</span>    'G'    <span class="hl sym">},</span>
    <span class="hl sym">{</span>    'B'<span class="hl sym">,</span>    'V'    <span class="hl sym">},</span>
    <span class="hl sym">{</span>    'D'<span class="hl sym">,</span>    'H'    <span class="hl sym">},</span>
    <span class="hl sym">{</span>    'K'<span class="hl sym">,</span>    'M'    <span class="hl sym">},</span>
    <span class="hl sym">{</span>    'R'<span class="hl sym">,</span>    'Y'    <span class="hl sym">},</span>
    <span class="hl sym">{</span>    '\<span class="hl num">0</span>'<span class="hl sym">,</span>   '\<span class="hl num">0</span>'   <span class="hl sym">}</span>
<span class="hl sym">};</span>

static unsigned char _iub_comp<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">+</span>UCHAR_MAX<span class="hl sym">];</span>

static inline
ats_void_type iub_comp_build <span class="hl sym">() {</span>
  int i<span class="hl sym">;</span>
  <span class="hl kwa">for</span> <span class="hl sym">(</span>i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;=</span> UCHAR_MAX<span class="hl sym">;</span> i<span class="hl sym">++) {</span>
    _iub_comp<span class="hl sym">[</span>i<span class="hl sym">] = (</span>unsigned char<span class="hl sym">)</span> i<span class="hl sym">;</span>
  <span class="hl sym">}</span>
  <span class="hl kwa">for</span> <span class="hl sym">(</span>i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> iubpairs<span class="hl sym">[</span>i<span class="hl sym">][</span><span class="hl num">0</span><span class="hl sym">] !=</span> '\<span class="hl num">0</span>'<span class="hl sym">;</span> i<span class="hl sym">++) {</span>
    _iub_comp<span class="hl sym">[</span>iubpairs<span class="hl sym">[</span>i<span class="hl sym">][</span><span class="hl num">0</span><span class="hl sym">]] =</span> iubpairs<span class="hl sym">[</span>i<span class="hl sym">][</span><span class="hl num">1</span><span class="hl sym">];</span>
    _iub_comp<span class="hl sym">[</span>iubpairs<span class="hl sym">[</span>i<span class="hl sym">][</span><span class="hl num">1</span><span class="hl sym">]] =</span> iubpairs<span class="hl sym">[</span>i<span class="hl sym">][</span><span class="hl num">0</span><span class="hl sym">];</span>
    _iub_comp<span class="hl sym">[</span>tolower <span class="hl sym">(</span>iubpairs<span class="hl sym">[</span>i<span class="hl sym">][</span><span class="hl num">0</span><span class="hl sym">])] =</span> iubpairs<span class="hl sym">[</span>i<span class="hl sym">][</span><span class="hl num">1</span><span class="hl sym">];</span>
    _iub_comp<span class="hl sym">[</span>tolower <span class="hl sym">(</span>iubpairs<span class="hl sym">[</span>i<span class="hl sym">][</span><span class="hl num">1</span><span class="hl sym">])] =</span> iubpairs<span class="hl sym">[</span>i<span class="hl sym">][</span><span class="hl num">0</span><span class="hl sym">];</span>
  <span class="hl sym">}</span>
<span class="hl sym">}</span>

static inline
ats_byte_type
iub_comp <span class="hl sym">(</span>ats_byte_type b<span class="hl sym">) {</span> return _iub_comp<span class="hl sym">[</span>b<span class="hl sym">] ; }</span>

ats_int_type fread_buf_line
  <span class="hl sym">(</span>ats_ptr_type buf<span class="hl sym">,</span> ats_int_type pos<span class="hl sym">,</span> ats_int_type len<span class="hl sym">,</span> ats_ptr_type file<span class="hl sym">)</span>
<span class="hl sym">{</span>
  char <span class="hl sym">*</span>src<span class="hl sym">, *</span>res<span class="hl sym">;</span> int n<span class="hl sym">;</span>

  src <span class="hl sym">= (</span>char *)buf<span class="hl sym">+</span>pos <span class="hl sym">;</span>
  res <span class="hl sym">=</span> fgets <span class="hl sym">(</span>src<span class="hl sym">, (</span>int<span class="hl sym">)</span>len<span class="hl sym">, (</span>FILE *)file<span class="hl sym">) ;</span>
  <span class="hl kwa">if</span> <span class="hl sym">(!</span>res<span class="hl sym">) {</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>feof<span class="hl sym">((</span>FILE *)file<span class="hl sym">))</span> return pos <span class="hl sym">;</span>
    <span class="hl kwa">else</span> <span class="hl sym">{</span>
      ats_exit_errmsg <span class="hl sym">(</span>errno<span class="hl sym">,</span> <span class="hl str">&quot;Exit: [fread_buf_line] failed.</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">) ;</span>
    <span class="hl sym">}</span>
  <span class="hl sym">}</span>
  n <span class="hl sym">=</span> strlen <span class="hl sym">(</span>src<span class="hl sym">) ;</span>
  <span class="hl kwa">if</span> <span class="hl sym">(</span>n<span class="hl sym">&gt;</span><span class="hl num">0</span><span class="hl sym">) {</span>
    return src<span class="hl sym">[</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">] ==</span> '\n' ? <span class="hl sym">(</span>pos<span class="hl sym">+</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">) : (</span>pos<span class="hl sym">+</span>n<span class="hl sym">) ;</span>
  <span class="hl sym">}</span>
  return pos <span class="hl sym">;</span>
<span class="hl sym">}</span>

ats_void_type fwrite_buf
  <span class="hl sym">(</span>ats_ptr_type buf<span class="hl sym">,</span> ats_int_type pos<span class="hl sym">,</span> ats_int_type len<span class="hl sym">,</span> ats_ptr_type file<span class="hl sym">)</span>
<span class="hl sym">{</span>
  int n<span class="hl sym">;</span>
  char <span class="hl sym">*</span>src <span class="hl sym">;</span>
  src <span class="hl sym">= (</span>char *)buf <span class="hl sym">+</span> pos <span class="hl sym">;</span>
  n <span class="hl sym">=</span> fwrite <span class="hl sym">(</span>src<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> len<span class="hl sym">,</span> file<span class="hl sym">);</span>
  <span class="hl kwa">if</span> <span class="hl sym">(</span>n <span class="hl sym">&lt;</span> len<span class="hl sym">) {</span>
    ats_exit_errmsg <span class="hl sym">(</span>errno<span class="hl sym">,</span> <span class="hl str">&quot;Exit: [fwrite_buf] failed.</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">) ;</span>
  <span class="hl sym">}</span>
  return <span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl sym">%}</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl com">(* end of [reverse-complement.dats] *)</span>
