<source>
<def></def><com>/**</com><br />
<com> * The Computer Language Benchmarks Game</com><br />
<com> * http://shootout.alioth.debian.org/</com><br />
<com> *</com><br />
<com> * Port of the Java port that uses native GMP to use native GMP with C#</com><br />
<com> * contributed by Miguel de Icaza, based on the Java version, that was:</com><br />
<com> * 	contributed by Mike Pall</com><br />
<com> * 	java port by Stefan Krause</com><br />
<com>*/</com><def></def><br />
<kwa>using</kwa> <def>System</def><sym>;</sym><br />
<def></def><kwa>using</kwa> <def>System</def><sym>.</sym><def>Text</def><sym>;</sym><br />
<def></def><kwa>using</kwa> <def>System</def><sym>.</sym><def>Runtime</def><sym>.</sym><def>InteropServices</def><sym>;</sym><br />
<def></def><br />
<kwa>public class</kwa> <def>pidigits</def> <sym>{</sym><br />
<def><br />
   GmpInteger q</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>GmpInteger</kwd><def></def><sym>(),</sym> <def>r</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>GmpInteger</kwd><def></def><sym>(),</sym> <def>s</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>GmpInteger</kwd><def></def><sym>(),</sym> <def>t</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>GmpInteger</kwd><def></def><sym>();</sym><br />
<def>   GmpInteger u</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>GmpInteger</kwd><def></def><sym>(),</sym> <def>v</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>GmpInteger</kwd><def></def><sym>(),</sym> <def>w</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>GmpInteger</kwd><def></def><sym>();</sym><br />
<def></def><br />
   <kwb>int</kwb> <def>i</def><sym>;</sym><br />
<def>   StringBuilder strBuf</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>StringBuilder</kwd> <def></def><sym>(</sym><def></def><num>40</num><def></def><sym>);</sym><br />
<def></def>   <kwb>int</kwb> <def>n</def><sym>;</sym><br />
<def></def><br />
   <kwd>pidigits</kwd> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>n</def><sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def></def>      <kwa>this</kwa><def></def><sym>.</sym><def>n</def><sym>=</sym><def>n</def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>private</kwa> <def></def><kwb>void</kwb> <def></def><kwd>compose_r</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>bq</def><sym>,</sym> <def></def><kwb>int</kwb> <def>br</def><sym>,</sym> <def></def><kwb>int</kwb> <def>bs</def><sym>,</sym> <def></def><kwb>int</kwb> <def>bt</def><sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def>     u</def><sym>.</sym><def></def><kwd>mul</kwd><def></def><sym>(</sym><def>r</def><sym>,</sym> <def>bs</def><sym>);</sym><br />
<def>     r</def><sym>.</sym><def></def><kwd>mul</kwd><def></def><sym>(</sym><def>r</def><sym>,</sym> <def>bq</def><sym>);</sym><br />
<def>     v</def><sym>.</sym><def></def><kwd>mul</kwd><def></def><sym>(</sym><def>t</def><sym>,</sym> <def>br</def><sym>);</sym><br />
<def>     r</def><sym>.</sym><def></def><kwa>add</kwa><def></def><sym>(</sym><def>r</def><sym>,</sym> <def>v</def><sym>);</sym><br />
<def>     t</def><sym>.</sym><def></def><kwd>mul</kwd><def></def><sym>(</sym><def>t</def><sym>,</sym> <def>bt</def><sym>);</sym><br />
<def>     t</def><sym>.</sym><def></def><kwa>add</kwa><def></def><sym>(</sym><def>t</def><sym>,</sym> <def>u</def><sym>);</sym><br />
<def>     s</def><sym>.</sym><def></def><kwd>mul</kwd><def></def><sym>(</sym><def>s</def><sym>,</sym> <def>bt</def><sym>);</sym><br />
<def>     u</def><sym>.</sym><def></def><kwd>mul</kwd><def></def><sym>(</sym><def>q</def><sym>,</sym> <def>bs</def><sym>);</sym><br />
<def>     s</def><sym>.</sym><def></def><kwa>add</kwa><def></def><sym>(</sym><def>s</def><sym>,</sym> <def>u</def><sym>);</sym><br />
<def>     q</def><sym>.</sym><def></def><kwd>mul</kwd><def></def><sym>(</sym><def>q</def><sym>,</sym> <def>bq</def><sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <com>/* Compose matrix with numbers on the left. */</com><def></def><br />
   <kwa>private</kwa> <def></def><kwb>void</kwb> <def></def><kwd>compose_l</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>bq</def><sym>,</sym> <def></def><kwb>int</kwb> <def>br</def><sym>,</sym> <def></def><kwb>int</kwb> <def>bs</def><sym>,</sym> <def></def><kwb>int</kwb> <def>bt</def><sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def>     r</def><sym>.</sym><def></def><kwd>mul</kwd><def></def><sym>(</sym><def>r</def><sym>,</sym> <def>bt</def><sym>);</sym><br />
<def>     u</def><sym>.</sym><def></def><kwd>mul</kwd><def></def><sym>(</sym><def>q</def><sym>,</sym> <def>br</def><sym>);</sym><br />
<def>     r</def><sym>.</sym><def></def><kwa>add</kwa><def></def><sym>(</sym><def>r</def><sym>,</sym> <def>u</def><sym>);</sym><br />
<def>     u</def><sym>.</sym><def></def><kwd>mul</kwd><def></def><sym>(</sym><def>t</def><sym>,</sym> <def>bs</def><sym>);</sym><br />
<def>     t</def><sym>.</sym><def></def><kwd>mul</kwd><def></def><sym>(</sym><def>t</def><sym>,</sym> <def>bt</def><sym>);</sym><br />
<def>     v</def><sym>.</sym><def></def><kwd>mul</kwd><def></def><sym>(</sym><def>s</def><sym>,</sym> <def>br</def><sym>);</sym><br />
<def>     t</def><sym>.</sym><def></def><kwa>add</kwa><def></def><sym>(</sym><def>t</def><sym>,</sym> <def>v</def><sym>);</sym><br />
<def>     s</def><sym>.</sym><def></def><kwd>mul</kwd><def></def><sym>(</sym><def>s</def><sym>,</sym> <def>bq</def><sym>);</sym><br />
<def>     s</def><sym>.</sym><def></def><kwa>add</kwa><def></def><sym>(</sym><def>s</def><sym>,</sym> <def>u</def><sym>);</sym><br />
<def>     q</def><sym>.</sym><def></def><kwd>mul</kwd><def></def><sym>(</sym><def>q</def><sym>,</sym> <def>bq</def><sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <com>/* Extract one digit. */</com><def></def><br />
   <kwa>private</kwa> <def></def><kwb>int</kwb> <def></def><kwd>extract</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>j</def><sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def>     u</def><sym>.</sym><def></def><kwd>mul</kwd><def></def><sym>(</sym><def>q</def><sym>,</sym> <def>j</def><sym>);</sym><br />
<def>     u</def><sym>.</sym><def></def><kwa>add</kwa><def></def><sym>(</sym><def>u</def><sym>,</sym> <def>r</def><sym>);</sym><br />
<def>     v</def><sym>.</sym><def></def><kwd>mul</kwd><def></def><sym>(</sym><def>s</def><sym>,</sym> <def>j</def><sym>);</sym><br />
<def>     v</def><sym>.</sym><def></def><kwa>add</kwa><def></def><sym>(</sym><def>v</def><sym>,</sym> <def>t</def><sym>);</sym><br />
<def>     w</def><sym>.</sym><def></def><kwd>div</kwd><def></def><sym>(</sym><def>u</def><sym>,</sym> <def>v</def><sym>);</sym><br />
<def></def>     <kwa>return</kwa> <def>w</def><sym>.</sym><def></def><kwd>intValue</kwd><def></def><sym>();</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <com>/* Print one digit. Returns 1 for the last digit. */</com><def></def><br />
   <kwa>private</kwa> <def></def><kwb>bool</kwb> <def></def><kwd>prdigit</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>y</def><sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def>      strBuf</def><sym>.</sym><def></def><kwd>Append</kwd><def></def><sym>(</sym><def>y</def><sym>);</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(++</sym><def>i</def> <sym>%</sym> <def></def><num>10</num> <def></def><sym>==</sym> <def></def><num>0</num> <def></def><sym>||</sym> <def>i</def> <sym>==</sym> <def>n</def><sym>) {</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>i</def><sym>%</sym><def></def><num>10</num><def></def><sym>!=</sym><def></def><num>0</num><def></def><sym>)</sym> <def></def><kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>j</def><sym>=</sym><def></def><num>10</num><def></def><sym>-(</sym><def>i</def><sym>%</sym><def></def><num>10</num><def></def><sym>);</sym><def>j</def><sym>&gt;</sym><def></def><num>0</num><def></def><sym>;</sym><def>j</def><sym>--) {</sym> <def>strBuf</def><sym>.</sym><def></def><kwd>Append</kwd><def></def><sym>(</sym><def></def><str>&quot; &quot;</str><def></def><sym>); }</sym><br />
<def>         strBuf</def><sym>.</sym><def></def><kwd>Append</kwd><def></def><sym>(</sym><def></def><str>&quot;</str><esc>\t</esc><str>:&quot;</str><def></def><sym>);</sym><br />
<def>         strBuf</def><sym>.</sym><def></def><kwd>Append</kwd><def></def><sym>(</sym><def>i</def><sym>);</sym><br />
<def>         Console</def><sym>.</sym><def></def><kwd>WriteLine</kwd><def></def><sym>(</sym><def>strBuf</def><sym>);</sym><br />
<def>         strBuf</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>StringBuilder</kwd><def></def><sym>(</sym><def></def><num>40</num><def></def><sym>);</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>      <kwa>return</kwa> <def>i</def> <sym>==</sym> <def>n</def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <com>/* Generate successive digits of PI. */</com><def></def><br />
   <kwb>void</kwb> <def></def><kwd>Run</kwd><def></def><sym>()</sym><br />
<def></def>   <sym>{</sym><br />
<def></def>     <kwb>int</kwb> <def>k</def> <sym>=</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def>     i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>     q</def><sym>.</sym><def></def><kwa>set</kwa><def></def><sym>(</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def>     r</def><sym>.</sym><def></def><kwa>set</kwa><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>);</sym><br />
<def>     s</def><sym>.</sym><def></def><kwa>set</kwa><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>);</sym><br />
<def>     t</def><sym>.</sym><def></def><kwa>set</kwa><def></def><sym>(</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>     <kwa>for</kwa> <def></def><sym>(;;) {</sym><br />
<def></def>       <kwb>int</kwb> <def>y</def> <sym>=</sym> <def></def><kwd>extract</kwd><def></def><sym>(</sym><def></def><num>3</num><def></def><sym>);</sym><br />
<def></def>       <kwa>if</kwa> <def></def><sym>(</sym><def>y</def> <sym>==</sym> <def></def><kwd>extract</kwd><def></def><sym>(</sym><def></def><num>4</num><def></def><sym>)) {</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def></def><kwd>prdigit</kwd><def></def><sym>(</sym><def>y</def><sym>))</sym> <def></def><kwa>return</kwa><def></def><sym>;</sym><br />
<def></def>         <kwd>compose_r</kwd><def></def><sym>(</sym><def></def><num>10</num><def></def><sym>, -</sym><def></def><num>10</num><def></def><sym>*</sym><def>y</def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>       <sym>}</sym> <def></def><kwa>else</kwa> <def></def><sym>{</sym><br />
<def></def>         <kwd>compose_l</kwd><def></def><sym>(</sym><def>k</def><sym>,</sym> <def></def><num>4</num><def></def><sym>*</sym><def>k</def><sym>+</sym><def></def><num>2</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>2</num><def></def><sym>*</sym><def>k</def><sym>+</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def>         k</def><sym>++;</sym><br />
<def></def>       <sym>}</sym><br />
<def></def>     <sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>public static</kwa> <def></def><kwb>void</kwb> <def></def><kwd>Main</kwd><def></def><sym>(</sym><def>String</def><sym>[]</sym> <def>args</def><sym>) {</sym><br />
<def>       pidigits m</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>pidigits</kwd><def></def><sym>(</sym><def>Int32</def><sym>.</sym><def></def><kwd>Parse</kwd> <def></def><sym>(</sym><def>args</def><sym>[</sym><def></def><num>0</num><def></def><sym>]));</sym><br />
<def>       m</def><sym>.</sym><def></def><kwd>Run</kwd><def></def><sym>();</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<sym>[</sym><def></def><kwd>StructLayout</kwd> <def></def><sym>(</sym><def>LayoutKind</def><sym>.</sym><def>Sequential</def><sym>)]</sym><br />
<def></def><kwb>struct</kwb> <def>mpz_t</def> <sym>{</sym><br />
<def></def>    <kwa>public</kwa> <def></def><kwb>int</kwb> <def>_mp_alloc</def><sym>;</sym><br />
<def></def>    <kwa>public</kwa> <def></def><kwb>int</kwb> <def>_mp_size</def><sym>;</sym><br />
<def></def>    <kwa>public</kwa> <def>IntPtr ptr</def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwa>class</kwa> <def>GmpInteger</def> <sym>{</sym><br />
<def></def><br />
   <slc>// Public methods</slc><br />
<def></def><br />
   <kwa>public</kwa> <def></def><kwd>GmpInteger</kwd><def></def><sym>() {</sym><br />
<def></def>      <kwd>mpz_init</kwd><def></def><sym>(</sym><def>ref pointer</def><sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>public</kwa> <def></def><kwd>GmpInteger</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def></def><kwa>value</kwa><def></def><sym>) {</sym><br />
<def></def>      <kwd>mpz_set_si</kwd><def></def><sym>(</sym><def>ref pointer</def><sym>,</sym> <def></def><kwa>value</kwa><def></def><sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>public</kwa> <def></def><kwb>void</kwb> <def></def><kwa>set</kwa><def></def><sym>(</sym><def></def><kwb>int</kwb> <def></def><kwa>value</kwa><def></def><sym>) {</sym> <def></def><kwd>mpz_set_si</kwd><def></def><sym>(</sym><def>ref pointer</def><sym>,</sym> <def></def><kwa>value</kwa><def></def><sym>); }</sym><br />
<def></def><br />
   <kwa>public</kwa> <def></def><kwb>void</kwb> <def></def><kwd>mul</kwd><def></def><sym>(</sym><def>GmpInteger src</def><sym>,</sym> <def></def><kwb>int</kwb> <def>val</def><sym>) {</sym> <def></def><kwd>mpz_mul_si</kwd><def></def><sym>(</sym><def>ref pointer</def><sym>,</sym> <def>ref src</def><sym>.</sym><def>pointer</def><sym>,</sym> <def>val</def><sym>); }</sym><br />
<def></def><br />
   <kwa>public</kwa> <def></def><kwb>void</kwb> <def></def><kwa>add</kwa><def></def><sym>(</sym><def>GmpInteger op1</def><sym>,</sym> <def>GmpInteger op2</def><sym>) {</sym> <def></def><kwd>mpz_add</kwd><def></def><sym>(</sym><def>ref pointer</def><sym>,</sym> <def>ref op1</def><sym>.</sym><def>pointer</def><sym>,</sym> <def>ref op2</def><sym>.</sym><def>pointer</def><sym>); }</sym><br />
<def></def><br />
   <kwa>public</kwa> <def></def><kwb>void</kwb> <def></def><kwd>div</kwd><def></def><sym>(</sym><def>GmpInteger op1</def><sym>,</sym> <def>GmpInteger op2</def><sym>) {</sym> <def></def><kwd>mpz_tdiv_q</kwd><def></def><sym>(</sym><def>ref pointer</def><sym>,</sym> <def>ref op1</def><sym>.</sym><def>pointer</def><sym>,</sym> <def>ref op2</def><sym>.</sym><def>pointer</def><sym>); }</sym><br />
<def></def><br />
   <kwa>public</kwa> <def></def><kwb>int</kwb> <def></def><kwd>intValue</kwd><def></def><sym>() {</sym> <def></def><kwa>return</kwa> <def></def><kwd>mpz_get_si</kwd><def></def><sym>(</sym><def>ref pointer</def><sym>); }</sym><br />
<def></def><br />
   <kwa>public</kwa> <def></def><kwb>double</kwb> <def></def><kwd>doubleValue</kwd><def></def><sym>() {</sym> <def></def><kwa>return</kwa> <def></def><kwd>mpz_get_d</kwd><def></def><sym>(</sym><def>ref pointer</def><sym>); }</sym><br />
<def></def><br />
   <slc>// Non public stuff</slc><br />
<def><br />
   mpz_t pointer</def><sym>;</sym><br />
<def></def><br />
    <sym>[</sym><def></def><kwd>DllImport</kwd> <def></def><sym>(</sym><def></def><str>&quot;gmp&quot;</str><def></def><sym>,</sym> <def>EntryPoint</def><sym>=</sym><def></def><str>&quot;__gmpz_init&quot;</str><def></def><sym>)]</sym><br />
<def>    extern</def> <kwa>static</kwa> <def></def><kwb>void</kwb> <def></def><kwd>mpz_init</kwd><def></def><sym>(</sym><def>ref mpz_t</def> <kwa>value</kwa><def></def><sym>);</sym><br />
<def></def><br />
    <sym>[</sym><def></def><kwd>DllImport</kwd> <def></def><sym>(</sym><def></def><str>&quot;gmp&quot;</str><def></def><sym>,</sym> <def>EntryPoint</def><sym>=</sym><def></def><str>&quot;__gmpz_mul_si&quot;</str><def></def><sym>)]</sym><br />
<def>    extern</def> <kwa>static</kwa> <def></def><kwb>void</kwb> <def></def><kwd>mpz_mul_si</kwd><def></def><sym>(</sym><def>ref mpz_t dest</def><sym>,</sym> <def>ref mpz_t src</def><sym>,</sym> <def></def><kwb>int</kwb> <def>val</def><sym>);</sym><br />
<def></def><br />
    <sym>[</sym><def></def><kwd>DllImport</kwd> <def></def><sym>(</sym><def></def><str>&quot;gmp&quot;</str><def></def><sym>,</sym> <def>EntryPoint</def><sym>=</sym><def></def><str>&quot;__gmpz_add&quot;</str><def></def><sym>)]</sym><br />
<def>    extern</def> <kwa>static</kwa> <def></def><kwb>void</kwb> <def></def><kwd>mpz_add</kwd><def></def><sym>(</sym><def>ref mpz_t dest</def><sym>,</sym> <def>ref mpz_t src</def><sym>,</sym> <def>ref mpz_t src2</def><sym>);</sym><br />
<def></def><br />
    <sym>[</sym><def></def><kwd>DllImport</kwd> <def></def><sym>(</sym><def></def><str>&quot;gmp&quot;</str><def></def><sym>,</sym> <def>EntryPoint</def><sym>=</sym><def></def><str>&quot;__gmpz_tdiv_q&quot;</str><def></def><sym>)]</sym><br />
<def>    extern</def> <kwa>static</kwa> <def></def><kwb>void</kwb> <def></def><kwd>mpz_tdiv_q</kwd><def></def><sym>(</sym><def>ref mpz_t dest</def><sym>,</sym> <def>ref mpz_t src</def><sym>,</sym> <def>ref mpz_t src2</def><sym>);</sym><br />
<def></def><br />
    <sym>[</sym><def></def><kwd>DllImport</kwd> <def></def><sym>(</sym><def></def><str>&quot;gmp&quot;</str><def></def><sym>,</sym> <def>EntryPoint</def><sym>=</sym><def></def><str>&quot;__gmpz_set_si&quot;</str><def></def><sym>)]</sym><br />
<def>    extern</def> <kwa>static</kwa> <def></def><kwb>void</kwb> <def></def><kwd>mpz_set_si</kwd><def></def><sym>(</sym><def>ref mpz_t src</def><sym>,</sym> <def></def><kwb>int</kwb> <def></def><kwa>value</kwa><def></def><sym>);</sym><br />
<def></def><br />
    <sym>[</sym><def></def><kwd>DllImport</kwd> <def></def><sym>(</sym><def></def><str>&quot;gmp&quot;</str><def></def><sym>,</sym> <def>EntryPoint</def><sym>=</sym><def></def><str>&quot;__gmpz_get_si&quot;</str><def></def><sym>)]</sym><br />
<def>    extern</def> <kwa>static</kwa> <def></def><kwb>int</kwb> <def></def><kwd>mpz_get_si</kwd><def></def><sym>(</sym><def>ref mpz_t src</def><sym>);</sym><br />
<def></def><br />
    <sym>[</sym><def></def><kwd>DllImport</kwd> <def></def><sym>(</sym><def></def><str>&quot;gmp&quot;</str><def></def><sym>,</sym> <def>EntryPoint</def><sym>=</sym><def></def><str>&quot;__gmpz_get_d&quot;</str><def></def><sym>)]</sym><br />
<def>    extern</def> <kwa>static</kwa> <def></def><kwb>double</kwb> <def></def><kwd>mpz_get_d</kwd><def></def><sym>(</sym><def>ref mpz_t src</def><sym>);</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
