<source>
<def></def><com>/*</com><br />
<com> * The Computer Lannguage Benchmarks Game</com><br />
<com> * http://shootout.alioth.debian.org/</com><br />
<com> *</com><br />
<com> * Originial c version contributed by Heiner Marxen</com><br />
<com> * slightly adapted by Marc Halbruegge</com><br />
<com> */</com><def></def><br />
<br />
<dir>#include &lt;iostream&gt;</dir><br />
<def></def><dir>#include &lt;vector&gt;</dir><br />
<def></def><dir>#include &lt;algorithm&gt;</dir><br />
<def></def><br />
<kwa>using namespace</kwa> <def>std</def><sym>;</sym><br />
<def></def><br />
<kwb>int</kwb> <def></def><kwd>fannkuch</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>n</def><sym>,</sym> <def>ostream</def> <sym>&amp;</sym><def>o</def><sym>) {</sym><br />
<def></def>    <kwa>if</kwa> <def></def><sym>(</sym><def>n</def> <sym>&lt;</sym> <def></def><num>1</num><def></def><sym>)</sym> <def></def><kwa>return</kwa> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><br />
    <kwb>int</kwb> <def>flipsMax</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>    <kwb>int</kwb>	<def>r</def><sym>=</sym><def>n</def><sym>;</sym><br />
<def></def>    <kwb>int</kwb>	<def>numPermutationsPrinted</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym><br />
<def><br />
    vector</def><sym>&lt;</sym><def></def><kwb>int</kwb><def></def><sym>&gt;</sym> <def></def><kwd>permutation</kwd><def></def><sym>(</sym><def>n</def><sym>);</sym><br />
<def>    vector</def><sym>&lt;</sym><def></def><kwb>int</kwb><def></def><sym>&gt;</sym> <def></def><kwd>permForFlipping</kwd><def></def><sym>(</sym><def>n</def><sym>);</sym><br />
<def>    vector</def><sym>&lt;</sym><def></def><kwb>int</kwb><def></def><sym>&gt;</sym> <def></def><kwd>count</kwd><def></def><sym>(</sym><def>n</def><sym>);</sym><br />
<def></def><br />
    <com>/* initial (trivial) permu */</com><def></def><br />
    <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>i</def><sym>&lt;</sym><def>n</def><sym>; ++</sym><def>i</def><sym>)</sym> <def>permutation</def><sym>[</sym><def>i</def><sym>] =</sym> <def>i</def><sym>;</sym><br />
<def></def><br />
    <kwa>for</kwa> <def></def><sym>(;;) {</sym><br />
<def></def>        <kwa>if</kwa> <def></def><sym>(</sym><def>numPermutationsPrinted</def><sym>++ &lt;</sym> <def></def><num>30</num><def></def><sym>) {</sym><br />
<def></def>            <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>i</def><sym>&lt;</sym><def>n</def><sym>; ++</sym><def>i</def><sym>) {</sym><br />
<def>                o</def> <sym>&lt;&lt; (</sym><def></def><num>1</num><def></def><sym>+</sym><def>permutation</def><sym>[</sym><def>i</def><sym>]);</sym><br />
<def></def>            <sym>}</sym><br />
<def>            o</def> <sym>&lt;&lt;</sym> <def>endl</def><sym>;</sym><br />
<def></def>	<sym>}</sym><br />
<def></def>	<kwa>for</kwa> <def></def><sym>( ;</sym> <def>r</def><sym>!=</sym><def></def><num>1</num><def></def><sym>; --</sym><def>r</def><sym>) {</sym><br />
<def>	    count</def><sym>[</sym><def>r</def><sym>-</sym><def></def><num>1</num><def></def><sym>] =</sym> <def>r</def><sym>;</sym><br />
<def></def>	<sym>}</sym><br />
<def></def><br />
	<kwa>if</kwa> <def></def><sym>(!(</sym><def>permutation</def><sym>[</sym><def></def><num>0</num><def></def><sym>]==</sym><def></def><num>0</num> <def></def><sym>||</sym> <def>permutation</def><sym>[</sym><def>n</def><sym>-</sym><def></def><num>1</num><def></def><sym>]==</sym><def>n</def><sym>-</sym><def></def><num>1</num><def></def><sym>)) {</sym><br />
<def></def>	    <kwb>int</kwb> <def>flips</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>	    <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def><sym>=</sym><def></def><num>1</num><def></def><sym>;</sym> <def>i</def><sym>&lt;</sym><def>n</def><sym>; ++</sym><def>i</def><sym>)</sym> <def>permForFlipping</def><sym>[</sym><def>i</def><sym>] =</sym> <def>permutation</def><sym>[</sym><def>i</def><sym>];</sym><br />
<def></def><br />
            <com>/* cache perm[0] in k */</com><def></def><br />
	    <kwb>int</kwb> <def>k</def> <sym>=</sym> <def>permutation</def><sym>[</sym><def></def><num>0</num><def></def><sym>];</sym><br />
<def></def><br />
	    <kwa>do</kwa> <def></def><sym>{</sym><br />
<def></def>		<kwb>int</kwb> <def>i</def><sym>,</sym><def>j</def><sym>;</sym><br />
<def></def>		<kwa>for</kwa> <def></def><sym>(</sym><def>i</def><sym>=</sym><def></def><num>1</num><def></def><sym>,</sym> <def>j</def><sym>=</sym><def>k</def><sym>-</sym><def></def><num>1</num><def></def><sym>;</sym> <def>i</def><sym>&lt;</sym><def>j</def><sym>; ++</sym><def>i</def><sym>, --</sym><def>j</def><sym>) {</sym><br />
<def></def>                    <kwd>swap</kwd><def></def><sym>(</sym><def>permForFlipping</def><sym>[</sym><def>i</def><sym>],</sym> <def>permForFlipping</def><sym>[</sym><def>j</def><sym>]);</sym><br />
<def></def>		<sym>}</sym><br />
<def></def>                <kwd>swap</kwd><def></def><sym>(</sym><def>permForFlipping</def><sym>[</sym><def>k</def><sym>],</sym> <def>k</def><sym>);</sym><br />
<def></def><br />
		<sym>++</sym><def>flips</def><sym>;</sym><br />
<def></def>	    <sym>}</sym> <def></def><kwa>while</kwa> <def></def><sym>(</sym><def>k</def><sym>);</sym><br />
<def></def><br />
	    <kwa>if</kwa> <def></def><sym>(</sym><def>flipsMax</def> <sym>&lt;</sym> <def>flips</def><sym>) {</sym><br />
<def>		flipsMax</def> <sym>=</sym> <def>flips</def><sym>;</sym><br />
<def></def>	    <sym>}</sym><br />
<def></def>	<sym>}</sym><br />
<def></def><br />
	<kwa>for</kwa> <def></def><sym>(;;) {</sym><br />
<def></def>	    <kwa>if</kwa> <def></def><sym>(</sym><def>r</def> <sym>==</sym> <def>n</def><sym>) {</sym><br />
<def></def>		<kwa>return</kwa> <def>flipsMax</def><sym>;</sym><br />
<def></def>	    <sym>}</sym><br />
<def></def><br />
	    <com>/* rotate down perm[0..r] by one */</com><def></def><br />
            <kwb>int</kwb> <def>perm0</def> <sym>=</sym> <def>permutation</def><sym>[</sym><def></def><num>0</num><def></def><sym>];</sym><br />
<def></def>            <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>i</def><sym>&lt;</sym><def>r</def><sym>; ++</sym><def>i</def><sym>) {</sym><br />
<def>                permutation</def><sym>[</sym><def>i</def><sym>] =</sym> <def>permutation</def><sym>[</sym><def>i</def><sym>+</sym><def></def><num>1</num><def></def><sym>];</sym><br />
<def></def>            <sym>}</sym><br />
<def>            permutation</def><sym>[</sym><def>r</def><sym>] =</sym> <def>perm0</def><sym>;</sym><br />
<def></def><br />
	    <kwa>if</kwa> <def></def><sym>(--</sym><def>count</def><sym>[</sym><def>r</def><sym>] &gt;</sym> <def></def><num>0</num><def></def><sym>)</sym> <def></def><kwa>break</kwa><def></def><sym>;</sym><br />
<def></def><br />
	    <sym>++</sym><def>r</def><sym>;</sym><br />
<def></def>	<sym>}</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<br />
<kwb>int</kwb> <def></def><kwd>main</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>argc</def><sym>,</sym> <def></def><kwb>const char</kwb> <def></def><sym>**</sym><def>argv</def><sym>) {</sym><br />
<def></def><br />
    <kwb>int</kwb>	<def>n</def> <sym>= (</sym><def>argc</def><sym>&gt;</sym><def></def><num>1</num><def></def><sym>)</sym> <def>?</def> <kwd>atoi</kwd><def></def><sym>(</sym><def>argv</def><sym>[</sym><def></def><num>1</num><def></def><sym>]) :</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def><br />
    cout</def> <sym>&lt;&lt;</sym> <def></def><str>&quot;Pfannkuchen(&quot;</str><def></def> <sym>&lt;&lt;</sym> <def>n</def> <sym>&lt;&lt;</sym> <def></def><str>&quot;) = &quot;</str><def></def><br />
	 <sym>&lt;&lt;</sym> <def></def><kwd>fannkuch</kwd><def></def><sym>(</sym><def>n</def><sym>,</sym> <def>cout</def><sym>) &lt;&lt;</sym> <def>endl</def><sym>;</sym><br />
<def></def><br />
    <kwa>return</kwa> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
