<source>
<def></def><slc>#  The Computer Language Benchmarks Game</slc><br />
<def></def><slc>#  http://shootout.alioth.debian.org/</slc><br />
<def></def><br />
<slc>#  contributed by Richard Cottrill</slc><br />
<def></def><br />
<br />
<kwa>use</kwa> <def></def><kwd>strict</kwd><def></def><sym>;</sym><br />
<def></def><kwa>use</kwa> <def></def><kwd>warnings</kwd><def></def><sym>;</sym><br />
<def></def><kwa>use</kwa> <def></def><kwd>threads</kwd><def></def><sym>;</sym><br />
<def></def><kwa>use</kwa> <def>threads</def><sym>::</sym><def></def><kwd>shared</kwd><def></def><sym>;</sym><br />
<def></def><kwa>use</kwa> <def>Thread</def><sym>::</sym><def></def><kwd>Semaphore</kwd><def></def><sym>;</sym><br />
<def></def><br />
<kwc>my</kwc> <def></def><kwb>$numThreads</kwb>	<def></def><sym>:</sym><def></def><kwd>shared</kwd><def></def><sym>;</sym><br />
<def></def><kwc>my</kwc> <def></def><kwb>$data</kwb>	<def></def><sym>:</sym><def></def><kwd>shared</kwd><def></def><sym>;</sym><br />
<def></def><kwc>my</kwc> <def></def><kwb>$result</kwb>	<def></def><sym>:</sym><def></def><kwd>shared</kwd><def></def><sym>;</sym><br />
<def></def><kwc>my</kwc> <def></def><kwb>@mutex</kwb>	<def></def><sym>:</sym><def></def><kwd>shared</kwd><def></def><sym>;</sym><br />
<def></def><br />
<kwb>$numThreads</kwb> <def></def><sym>=</sym> <def></def><num>503</num><def></def><sym>;</sym><br />
<def></def><br />
<kwa>sub</kwa> <def>thr_func</def> <sym>{</sym><br />
<def></def>  <kwc>my</kwc> <def></def><sym>(</sym><def></def><kwb>$nextThread</kwb><def></def><sym>,</sym> <def></def><kwb>$thr_name</kwb><def></def><sym>);</sym><br />
<def></def>  <kwb>$thr_name</kwb> <def></def><sym>=</sym> <def>threads</def><sym>-&gt;</sym><def></def><kwd>tid</kwd><def></def><sym>();</sym><br />
<def>  threads</def><sym>-&gt;</sym><def></def><kwd>detach</kwd><def></def><sym>();</sym><br />
<def></def>  <kwa>if</kwa> <def></def><sym>(</sym><def></def><kwb>$thr_name</kwb> <def></def><sym>==</sym> <def></def><kwb>$numThreads</kwb><def></def><sym>) {</sym><br />
<def></def>    <kwb>$nextThread</kwb> <def></def><sym>=</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>  <sym>}</sym><br />
<def></def>  <kwa>else</kwa> <def></def><sym>{</sym><br />
<def></def>    <kwb>$nextThread</kwb> <def></def><sym>=</sym> <def></def><kwb>$thr_name</kwb> <def></def><sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>  <sym>}</sym><br />
<def></def>  <kwa>while</kwa> <def></def><sym>(</sym><def></def><num>1</num><def></def><sym>) {</sym><br />
<def></def>    <kwb>$mutex</kwb><def></def><sym>[</sym><def></def><kwb>$thr_name</kwb><def></def><sym>]-&gt;</sym><def></def><kwd>down</kwd><def></def><sym>();</sym><br />
<def></def>    <kwa>if</kwa> <def></def><sym>(</sym><def></def><kwb>$data</kwb><def></def><sym>) {</sym><br />
<def></def>      <kwb>$data</kwb> <def></def><sym>= --</sym><def></def><kwb>$data</kwb><def></def><sym>;</sym><br />
<def></def>      <kwb>$mutex</kwb><def></def><sym>[</sym><def></def><kwb>$nextThread</kwb><def></def><sym>]-&gt;</sym><def></def><kwd>up</kwd><def></def><sym>();</sym><br />
<def></def>    <sym>}</sym><br />
<def></def>    <kwa>else</kwa> <def></def><sym>{</sym><br />
<def></def>      <kwb>$result</kwb> <def></def><sym>=</sym> <def></def><kwb>$thr_name</kwb><def></def><sym>;</sym><br />
<def></def>      <kwb>$mutex</kwb><def></def><sym>[</sym><def></def><num>0</num><def></def><sym>]-&gt;</sym><def></def><kwd>up</kwd><def></def><sym>();</sym><br />
<def></def>    <sym>}</sym><br />
<def></def>  <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>$data</kwb> <def></def><sym>=</sym> <def></def><kwb>$ARGV</kwb><def></def><sym>[</sym><def></def><num>0</num><def></def><sym>];</sym><br />
<def></def><br />
<kwb>$mutex</kwb><def></def><sym>[</sym><def></def><num>0</num><def></def><sym>] =</sym> <def>new Thread</def><sym>::</sym><def></def><kwd>Semaphore</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>);</sym><br />
<def></def><sym>{</sym><br />
<def></def>  <kwa>for</kwa> <def></def><sym>(</sym><def></def><num>1</num> <def></def><sym>..</sym> <def></def><kwb>$numThreads</kwb><def></def><sym>) {</sym><br />
<def></def>    <kwb>$mutex</kwb><def></def><sym>[</sym><def></def><kwb>$_</kwb><def></def><sym>] =</sym> <def>new Thread</def><sym>::</sym><def></def><kwd>Semaphore</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>);</sym><br />
<def>    threads</def><sym>-&gt;</sym><def></def><kwd>create</kwd><def></def><sym>(</sym><def>\</def><sym>&amp;</sym><def>thr_func</def><sym>);</sym><br />
<def></def>  <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><kwb>$mutex</kwb><def></def><sym>[</sym><def></def><num>1</num><def></def><sym>]-&gt;</sym><def></def><kwd>up</kwd><def></def><sym>();</sym><br />
<def></def><kwb>$mutex</kwb><def></def><sym>[</sym><def></def><num>0</num><def></def><sym>]-&gt;</sym><def></def><kwd>down</kwd><def></def><sym>();</sym><br />
<def></def><kwc>print</kwc> <def></def><str>&quot;$result</str><esc>\n</esc><str>&quot;</str><def></def><sym>;</sym><br />
<def></def><kwd>exit</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>);</sym><def></def><br />
</source>
