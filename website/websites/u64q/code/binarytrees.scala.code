<source>
<def></def><com>/*</com><br />
<com>  The Computer Language Shootout</com><br />
<com>  http://shootout.alioth.debian.org/</com><br />
<com></com><br />
<com>  - tree: disjoint union type</com><br />
<com>  - loop: &quot;for&quot; loop over iterator range</com><br />
<com></com><br />
<com>  Contributed by Kannan Goundan</com><br />
<com>  De-optimized by Isaac Gouy</com><br />
<com>*/</com><def></def><br />
<br />
<kwa>object</kwa> <def>binarytrees</def> <sym>{</sym><br />
<def></def><br />
  <kwa>abstract class</kwa> <def>Tree</def><sym>;</sym><br />
<def></def>  <kwa>case class</kwa> <def></def><kwc>Node</kwc><def></def><sym>(</sym><def>i</def><sym>:</sym> <def>Int</def><sym>,</sym> <def>left</def><sym>:</sym> <def>Tree</def><sym>,</sym> <def>right</def><sym>:</sym> <def>Tree</def><sym>)</sym> <def></def><kwa>extends</kwa> <def>Tree</def><br />
  <kwa>case class</kwa> <def>Empty</def><sym>()</sym> <def></def><kwa>extends</kwa> <def>Tree</def><br />
<br />
  <kwa>def</kwa> <def>check</def><sym>(</sym><def>tree</def><sym>:</sym> <def>Tree</def><sym>) :</sym> <def>Int</def> <sym>=</sym> <def>tree match</def> <sym>{</sym><br />
<def></def>    <kwa>case</kwa> <def></def><kwc>Node</kwc><def></def><sym>(</sym><def>i</def><sym>,</sym> <def>left</def><sym>,</sym> <def>right</def><sym>) =&gt;</sym> <def>i</def> <sym>+</sym> <def>check</def><sym>(</sym><def>left</def><sym>) -</sym> <def>check</def><sym>(</sym><def>right</def><sym>)</sym><br />
<def></def>    <kwa>case</kwa> <def>Empty</def><sym>() =&gt;</sym> <def></def><num>0</num><br />
<def></def>  <sym>}</sym><br />
<def></def><br />
  <kwa>def</kwa> <def>make</def><sym>(</sym><def>i</def><sym>:</sym> <def>Int</def><sym>,</sym> <def>depth</def><sym>:</sym> <def>Int</def><sym>) :</sym> <def>Tree</def> <sym>=</sym> <def>depth match</def> <sym>{</sym><br />
<def></def><com>/*  case 0 =&gt; Empty() */</com><def></def><br />
    <kwa>case</kwa> <def></def><num>0</num> <def></def><sym>=&gt;</sym> <def></def><kwc>Node</kwc><def></def><sym>(</sym><def>i</def><sym>,</sym> <def>Empty</def><sym>(),</sym> <def>Empty</def><sym>())</sym><br />
<def></def>    <kwa>case</kwa> <def>_</def> <sym>=&gt;</sym> <def></def><kwc>Node</kwc><def></def><sym>(</sym><def>i</def><sym>,</sym> <def>make</def><sym>((</sym><def></def><num>2</num><def></def><sym>*</sym><def>i</def><sym>)-</sym><def></def><num>1</num><def></def><sym>,</sym> <def>depth</def><sym>-</sym><def></def><num>1</num><def></def><sym>),</sym> <def>make</def><sym>(</sym><def></def><num>2</num><def></def><sym>*</sym><def>i</def><sym>,</sym> <def>depth</def><sym>-</sym><def></def><num>1</num><def></def><sym>))</sym><br />
<def></def>  <sym>}</sym><br />
<def></def><br />
  <kwa>def</kwa> <def>main</def><sym>(</sym><def>args</def><sym>:</sym> <def></def><kwc>Array</kwc><def></def><sym>[</sym><def></def><kwc>String</kwc><def></def><sym>]) = {</sym><br />
<def></def>    <kwa>val</kwa> <def>n</def> <sym>=</sym> <def></def><kwa>try</kwa> <def></def><sym>{</sym> <def></def><kwc>Integer</kwc><def></def><sym>.</sym><def>parseInt</def><sym>(</sym><def>args</def><sym>(</sym><def></def><num>0</num><def></def><sym>)) }</sym> <def></def><kwa>catch</kwa> <def></def><sym>{</sym> <def></def><kwa>case</kwa> <def>_</def> <sym>=&gt;</sym> <def></def><num>1</num> <def></def><sym>}</sym><br />
<def></def>    <kwa>val</kwa> <def>minDepth</def> <sym>=</sym> <def></def><num>4</num><br />
<def></def>    <kwa>val</kwa> <def>maxDepth</def> <sym>=</sym> <def></def><kwc>Math</kwc><def></def><sym>.</sym><def>max</def><sym>(</sym><def>minDepth</def><sym>+</sym><def></def><num>2</num><def></def><sym>,</sym> <def>n</def><sym>)</sym><br />
<def><br />
    print</def><sym>(</sym><def></def><str>&quot;stretch tree&quot;</str><def></def><sym>,</sym> <def>maxDepth</def><sym>+</sym><def></def><num>1</num><def></def><sym>,</sym> <def>check</def><sym>(</sym><def>make</def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def>maxDepth</def><sym>+</sym><def></def><num>1</num><def></def><sym>)))</sym><br />
<def></def><br />
    <kwa>val</kwa> <def>longLived</def> <sym>=</sym> <def>make</def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def>maxDepth</def><sym>)</sym><br />
<def></def><br />
    <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwa>val</kwa> <def>depth</def> <sym>&lt;-</sym> <def></def><kwc>Iterator</kwc><def></def><sym>.</sym><def>range</def><sym>(</sym><def>minDepth</def><sym>,</sym> <def>maxDepth</def><sym>+</sym><def></def><num>1</num><def></def><sym>,</sym> <def></def><num>2</num><def></def><sym>)) {</sym><br />
<def></def>      <kwa>val</kwa> <def>iterations</def> <sym>=</sym> <def></def><num>1</num> <def></def><sym>&lt;&lt; (</sym><def>maxDepth</def> <sym>-</sym> <def>depth</def> <sym>+</sym> <def>minDepth</def><sym>)</sym><br />
<def></def><br />
      <kwa>var</kwa> <def>sum</def> <sym>=</sym> <def></def><num>0</num><br />
<def></def>      <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwa>val</kwa> <def>i</def> <sym>&lt;-</sym> <def></def><kwc>Iterator</kwc><def></def><sym>.</sym><def>range</def><sym>(</sym><def></def><num>1</num><def></def><sym>,</sym> <def>iterations</def><sym>+</sym><def></def><num>1</num><def></def><sym>))</sym><br />
<def>        sum</def> <sym>=</sym> <def>sum</def> <sym>+</sym> <def>check</def><sym>(</sym><def>make</def><sym>(</sym><def>i</def><sym>,</sym> <def>depth</def><sym>)) +</sym> <def>check</def><sym>(</sym><def>make</def><sym>(-</sym><def>i</def><sym>,</sym> <def>depth</def><sym>))</sym><br />
<def><br />
      print</def><sym>(</sym><def>iterations</def><sym>*</sym><def></def><num>2</num> <def></def><sym>+</sym> <def></def><str>&quot;</str><esc>\t</esc> <str>trees&quot;</str><def></def><sym>,</sym> <def>depth</def><sym>,</sym> <def>sum</def><sym>)</sym><br />
<def></def>    <sym>}</sym><br />
<def><br />
    print</def><sym>(</sym><def></def><str>&quot;long lived tree&quot;</str><def></def><sym>,</sym> <def>maxDepth</def><sym>,</sym> <def>check</def><sym>(</sym><def>longLived</def><sym>))</sym><br />
<def></def>  <sym>}</sym><br />
<def></def><br />
  <kwa>def</kwa> <def>print</def><sym>(</sym><def>name</def><sym>:</sym> <def></def><kwc>String</kwc><def></def><sym>,</sym> <def>depth</def><sym>:</sym> <def>Int</def><sym>,</sym> <def>check</def><sym>:</sym> <def>Int</def><sym>) =</sym><br />
<def>    Console</def><sym>.</sym><def>println</def><sym>(</sym><def>name</def> <sym>+</sym> <def></def><str>&quot; of depth &quot;</str><def></def> <sym>+</sym> <def>depth</def> <sym>+</sym> <def></def><str>&quot;</str><esc>\t</esc> <str>check: &quot;</str><def></def> <sym>+</sym> <def>check</def><sym>)</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
