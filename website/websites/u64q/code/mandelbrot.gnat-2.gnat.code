<source>
<def></def><slc>-- The Great Computer Language Shootout</slc><br />
<def></def><slc>-- http://shootout.alioth.debian.org</slc><br />
<def></def><slc>--</slc><br />
<def></def><slc>-- Contributed by Jim Rogers</slc><br />
<def></def><slc>-- Fixed by Pascal Obry on 2005/03/21</slc><br />
<def></def><slc>-- Modified Experimental version suggested by Pascal Obry</slc><br />
<def></def><br />
<kwa>with</kwa> <def>GNAT.IO</def><sym>;</sym>          <def></def><kwa>use</kwa> <def>GNAT.IO</def><sym>;</sym><br />
<def></def><kwa>with</kwa> <def>Ada.Command_Line</def><sym>;</sym> <def></def><kwa>use</kwa> <def>Ada.Command_Line</def><sym>;</sym><br />
<def></def><kwa>with</kwa> <def>Interfaces</def><sym>;</sym>       <def></def><kwa>use</kwa> <def>Interfaces</def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def>Mandelbrot</def> <kwa>is</kwa><br />
<def></def>   <kwa>type</kwa> <def>Real</def> <kwa>is digits</kwa> <def></def><num>15</num><def></def><sym>;</sym><br />
<def>   Iter</def>                   <sym>:</sym> <def></def><kwa>constant</kwa> <def></def><sym>:=</sym> <def></def><num>50</num><def></def><sym>;</sym><br />
<def>   Limit</def>                  <sym>:</sym> <def></def><kwa>constant</kwa> <def></def><sym>:=</sym> <def></def><num>4.0</num><def></def><sym>;</sym><br />
<def>   Width</def><sym>,</sym> <def>Height</def>          <sym>:</sym> <def></def><kwb>Positive</kwb><def></def><sym>;</sym><br />
<def>   Bit_Num</def>                <sym>:</sym> <def></def><kwb>Natural</kwb>    <def></def><sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>   Byte_Acc</def>               <sym>:</sym> <def>Unsigned_8</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>   Zr</def><sym>,</sym> <def>Zi</def><sym>,</sym> <def>Cr</def><sym>,</sym> <def>Ci</def><sym>,</sym> <def>Tr</def><sym>,</sym> <def>Ti</def><sym>,</sym> <def>Zr2</def><sym>,</sym> <def>Zi2</def> <sym>:</sym> <def>Real</def><sym>;</sym><br />
<def></def><kwa>begin</kwa><br />
<def>   Width</def> <sym>:=</sym> <def></def><kwb>Positive</kwb><def></def><sym>'</sym><def>Value</def> <sym>(</sym><def>Argument</def> <sym>(</sym><def></def><num>1</num><def></def><sym>));</sym><br />
<def><br />
   Height</def> <sym>:=</sym> <def>Width</def><sym>;</sym><br />
<def><br />
   Put_Line</def> <sym>(</sym><def></def><str>&quot;P4&quot;</str><def></def><sym>);</sym><br />
<def>   Put_Line</def> <sym>(</sym><def>Argument</def> <sym>(</sym><def></def><num>1</num><def></def><sym>) &amp;</sym> <def></def><str>&quot; &quot;</str><def></def> <sym>&amp;</sym> <def>Argument</def> <sym>(</sym><def></def><num>1</num><def></def><sym>));</sym><br />
<def></def><br />
   <kwa>for</kwa> <def>Y</def> <kwa>in</kwa> <def></def><num>0</num> <def>.. Height</def> <sym>-</sym> <def></def><num>1</num> <def></def><kwa>loop</kwa><br />
<def></def>      <kwa>for</kwa> <def>X</def> <kwa>in</kwa> <def></def><num>0</num> <def>.. Width</def> <sym>-</sym> <def></def><num>1</num> <def></def><kwa>loop</kwa><br />
<def>         Zr</def> <sym>:=</sym> <def></def><num>0.0</num><def></def><sym>;</sym><br />
<def>         Zi</def> <sym>:=</sym> <def></def><num>0.0</num><def></def><sym>;</sym><br />
<def>         Cr</def> <sym>:=</sym> <def></def><num>2.0</num> <def></def><sym>*</sym> <def>Real</def> <sym>(</sym><def>X</def><sym>) /</sym> <def>Real</def> <sym>(</sym><def>Width</def><sym>) -</sym> <def></def><num>1.5</num><def></def><sym>;</sym><br />
<def>         Ci</def> <sym>:=</sym> <def></def><num>2.0</num> <def></def><sym>*</sym> <def>Real</def> <sym>(</sym><def>Y</def><sym>) /</sym> <def>Real</def> <sym>(</sym><def>Height</def><sym>) -</sym> <def></def><num>1.0</num><def></def><sym>;</sym><br />
<def></def><br />
         <kwa>for</kwa> <def>I</def> <kwa>in</kwa> <def></def><num>1</num> <def>.. Iter</def> <sym>+</sym> <def></def><num>1</num> <def></def><kwa>loop</kwa><br />
<def>            Zr2</def> <sym>:=</sym> <def>Zr</def> <sym>**</sym> <def></def><num>2</num><def></def><sym>;</sym><br />
<def>            Zi2</def> <sym>:=</sym> <def>Zi</def> <sym>**</sym> <def></def><num>2</num><def></def><sym>;</sym><br />
<def>            Tr</def>  <sym>:=</sym> <def>Zr2</def> <sym>-</sym> <def>Zi2</def> <sym>+</sym> <def>Cr</def><sym>;</sym><br />
<def>            Ti</def>  <sym>:=</sym> <def></def><num>2.0</num> <def></def><sym>*</sym> <def>Zr</def> <sym>*</sym> <def>Zi</def> <sym>+</sym> <def>Ci</def><sym>;</sym><br />
<def>            Zr</def>  <sym>:=</sym> <def>Tr</def><sym>;</sym><br />
<def>            Zi</def>  <sym>:=</sym> <def>Ti</def><sym>;</sym><br />
<def></def><br />
            <kwa>exit when</kwa> <def>Zr2</def> <sym>+</sym> <def>Zi2</def> <sym>&gt;</sym> <def>Limit</def><sym>;</sym><br />
<def></def>         <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def></def><br />
         <kwa>if</kwa> <def>Zr2</def> <sym>+</sym> <def>Zi2</def> <sym>&gt;</sym> <def>Limit</def> <kwa>then</kwa><br />
<def>            Byte_Acc</def> <sym>:=</sym> <def>Shift_Left</def> <sym>(</sym><def>Byte_Acc</def><sym>,</sym> <def></def><num>1</num><def></def><sym>)</sym> <def></def><kwa>or</kwa> <def></def><num>16</num><def>#</def><num>00</num><def>#</def><sym>;</sym><br />
<def></def>         <kwa>else</kwa><br />
<def>            Byte_Acc</def> <sym>:=</sym> <def>Shift_Left</def> <sym>(</sym><def>Byte_Acc</def><sym>,</sym> <def></def><num>1</num><def></def><sym>)</sym> <def></def><kwa>or</kwa> <def></def><num>16</num><def>#</def><num>01</num><def>#</def><sym>;</sym><br />
<def></def>         <kwa>end if</kwa><def></def><sym>;</sym><br />
<def><br />
         Bit_Num</def> <sym>:=</sym> <def>Bit_Num</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def><br />
         <kwa>if</kwa> <def>Bit_Num</def> <sym>=</sym> <def></def><num>8</num> <def></def><kwa>then</kwa><br />
<def>            Put</def> <sym>(</sym><def></def><kwb>Character</kwb><def></def><sym>'</sym><def>Val</def> <sym>(</sym><def>Byte_Acc</def><sym>));</sym><br />
<def>            Byte_Acc</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>            Bit_Num</def>  <sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>         <kwa>elsif</kwa> <def>X</def> <sym>=</sym> <def>Width</def> <sym>-</sym> <def></def><num>1</num> <def></def><kwa>then</kwa><br />
<def>            Byte_Acc</def> <sym>:=</sym> <def>Shift_Left</def> <sym>(</sym><def>Byte_Acc</def><sym>,</sym> <def></def><num>8</num> <def></def><sym>- (</sym><def>Width</def> <kwa>mod</kwa> <def></def><num>8</num><def></def><sym>));</sym><br />
<def>            Put</def> <sym>(</sym><def></def><kwb>Character</kwb><def></def><sym>'</sym><def>Val</def> <sym>(</sym><def>Byte_Acc</def><sym>));</sym><br />
<def>            Byte_Acc</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>            Bit_Num</def>  <sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>         <kwa>end if</kwa><def></def><sym>;</sym><br />
<def></def>      <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def></def>   <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def></def><kwa>end</kwa> <def>Mandelbrot</def><sym>;</sym><br />
<def></def><br />
</source>
