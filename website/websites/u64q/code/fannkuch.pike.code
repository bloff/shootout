<source>
<def></def><com>/**</com><br />
<com> * fannkuch.pike by Robert Brandner</com><br />
<com> * heavily based on the Java JDK-client version by Paul Lofte</com><br />
<com> */</com><def></def><br />
<kwb>int</kwb> <def></def><kwd>main</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>argc</def><sym>,</sym> <def></def><kwb>array</kwb><def></def><sym>(</sym><def></def><kwb>string</kwb><def></def><sym>)</sym> <def>argv</def><sym>) {</sym><br />
<def></def>	<kwb>int</kwb> <def>n</def> <sym>= (</sym><def></def><kwb>int</kwb><def></def><sym>)</sym><def>argv</def><sym>[</sym><def></def><num>1</num><def></def><sym>];</sym><br />
<def></def>	<kwa>write</kwa><def></def><sym>(</sym><def></def><str>&quot;Pfannkuchen(&quot;</str><def></def> <sym>+</sym> <def>n</def> <sym>+</sym> <def></def><str>&quot;) = &quot;</str><def></def> <sym>+</sym> <def></def><kwd>fannkuch</kwd><def></def><sym>(</sym><def>n</def><sym>)+</sym><def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>);</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>int</kwb> <def></def><kwd>fannkuch</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>n</def><sym>) {</sym><br />
<def></def>    <kwb>int</kwb> <def>check</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>    <kwb>array</kwb><def></def><sym>(</sym><def></def><kwb>int</kwb><def></def><sym>)</sym> <def>perm</def> <sym>=</sym> <def></def><kwa>allocate</kwa><def></def><sym>(</sym><def>n</def><sym>);</sym><br />
<def></def>    <kwb>array</kwb><def></def><sym>(</sym><def></def><kwb>int</kwb><def></def><sym>)</sym> <def>perm1</def> <sym>=</sym> <def></def><kwa>allocate</kwa><def></def><sym>(</sym><def>n</def><sym>);</sym><br />
<def></def>    <kwb>array</kwb><def></def><sym>(</sym><def></def><kwb>int</kwb><def></def><sym>)</sym> <def>count</def> <sym>=</sym> <def></def><kwa>allocate</kwa><def></def><sym>(</sym><def>n</def><sym>);</sym><br />
<def></def>    <kwb>array</kwb><def></def><sym>(</sym><def></def><kwb>int</kwb><def></def><sym>)</sym> <def>maxPerm</def> <sym>=</sym> <def></def><kwa>allocate</kwa><def></def><sym>(</sym><def>n</def><sym>);</sym><br />
<def></def>    <kwb>int</kwb> <def>maxFlipsCount</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>    <kwb>int</kwb> <def>m</def> <sym>=</sym> <def>n</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def><br />
    <kwd>for</kwd> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>n</def><sym>;</sym> <def>i</def><sym>++)</sym> <def>perm1</def><sym>[</sym><def>i</def><sym>] =</sym> <def>i</def><sym>;</sym><br />
<def></def>    <kwb>int</kwb> <def>r</def> <sym>=</sym> <def>n</def><sym>;</sym><br />
<def></def><br />
    <kwd>while</kwd> <def></def><sym>(</sym><def></def><num>1</num><def></def><sym>) {</sym><br />
<def></def>        <slc>// write-out the first 30 permutations</slc><br />
<def></def>        <kwd>if</kwd> <def></def><sym>(</sym><def>check</def> <sym>&lt;</sym> <def></def><num>30</num><def></def><sym>){</sym><br />
<def></def>          <kwd>for</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>i</def><sym>&lt;</sym><def>n</def><sym>;</sym> <def>i</def><sym>++)</sym> <def></def><kwa>write</kwa><def></def><sym>((</sym><def></def><kwb>string</kwb><def></def><sym>)(</sym><def>perm1</def><sym>[</sym><def>i</def><sym>]+</sym><def></def><num>1</num><def></def><sym>));</sym><br />
<def></def>          <kwa>write</kwa><def></def><sym>(</sym><def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>);</sym><br />
<def>          check</def><sym>++;</sym><br />
<def></def>        <sym>}</sym><br />
<def></def><br />
        <kwd>while</kwd> <def></def><sym>(</sym><def>r</def> <sym>!=</sym> <def></def><num>1</num><def></def><sym>) {</sym> <def>count</def><sym>[</sym><def>r</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>] =</sym> <def>r</def><sym>;</sym> <def>r</def><sym>--; }</sym><br />
<def></def>        <kwd>if</kwd> <def></def><sym>(!(</sym><def>perm1</def><sym>[</sym><def></def><num>0</num><def></def><sym>] ==</sym> <def></def><num>0</num> <def></def><sym>||</sym> <def>perm1</def><sym>[</sym><def>m</def><sym>] ==</sym> <def>m</def><sym>)) {</sym><br />
<def></def>            <kwd>for</kwd> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>n</def><sym>;</sym> <def>i</def><sym>++)</sym> <def>perm</def><sym>[</sym><def>i</def><sym>] =</sym> <def>perm1</def><sym>[</sym><def>i</def><sym>];</sym><br />
<def></def><br />
            <kwb>int</kwb> <def>flipsCount</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>            <kwb>int</kwb> <def>k</def><sym>;</sym><br />
<def></def><br />
            <kwd>while</kwd> <def></def><sym>(!((</sym><def>k</def> <sym>=</sym> <def>perm</def><sym>[</sym><def></def><num>0</num><def></def><sym>]) ==</sym> <def></def><num>0</num><def></def><sym>)) {</sym><br />
<def></def>                <kwb>int</kwb> <def>k2</def> <sym>= (</sym><def>k</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>) &gt;&gt;</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>                <kwd>for</kwd> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>k2</def><sym>;</sym> <def>i</def><sym>++) {</sym><br />
<def></def>                    <kwb>int</kwb> <def>temp</def> <sym>=</sym> <def>perm</def><sym>[</sym><def>i</def><sym>];</sym> <def>perm</def><sym>[</sym><def>i</def><sym>] =</sym> <def>perm</def><sym>[</sym><def>k</def> <sym>-</sym> <def>i</def><sym>];</sym> <def>perm</def><sym>[</sym><def>k</def> <sym>-</sym> <def>i</def><sym>] =</sym> <def>temp</def><sym>;</sym><br />
<def></def>                <sym>}</sym><br />
<def>                flipsCount</def><sym>++;</sym><br />
<def></def>            <sym>}</sym><br />
<def></def><br />
            <kwd>if</kwd> <def></def><sym>(</sym><def>flipsCount</def> <sym>&gt;</sym> <def>maxFlipsCount</def><sym>) {</sym><br />
<def>                maxFlipsCount</def> <sym>=</sym> <def>flipsCount</def><sym>;</sym><br />
<def></def>                <kwd>for</kwd> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>n</def><sym>;</sym> <def>i</def><sym>++)</sym> <def>maxPerm</def><sym>[</sym><def>i</def><sym>] =</sym> <def>perm1</def><sym>[</sym><def>i</def><sym>];</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>        <sym>}</sym><br />
<def></def><br />
        <kwd>while</kwd> <def></def><sym>(</sym><def></def><num>1</num><def></def><sym>) {</sym><br />
<def></def>            <kwd>if</kwd> <def></def><sym>(</sym><def>r</def> <sym>==</sym> <def>n</def><sym>)</sym> <def>return maxFlipsCount</def><sym>;</sym><br />
<def></def>            <kwb>int</kwb> <def>perm0</def> <sym>=</sym> <def>perm1</def><sym>[</sym><def></def><num>0</num><def></def><sym>];</sym><br />
<def></def>            <kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>            <kwd>while</kwd> <def></def><sym>(</sym><def>i</def> <sym>&lt;</sym> <def>r</def><sym>) {</sym><br />
<def></def>                <kwb>int</kwb> <def>j</def> <sym>=</sym> <def>i</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def>                perm1</def><sym>[</sym><def>i</def><sym>] =</sym> <def>perm1</def><sym>[</sym><def>j</def><sym>];</sym><br />
<def>                i</def> <sym>=</sym> <def>j</def><sym>;</sym><br />
<def></def>            <sym>}</sym><br />
<def>            perm1</def><sym>[</sym><def>r</def><sym>] =</sym> <def>perm0</def><sym>;</sym><br />
<def><br />
            count</def><sym>[</sym><def>r</def><sym>] =</sym> <def>count</def><sym>[</sym><def>r</def><sym>] -</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>            <kwd>if</kwd> <def></def><sym>(</sym><def>count</def><sym>[</sym><def>r</def><sym>] &gt;</sym> <def></def><num>0</num><def></def><sym>)</sym> <def>break</def><sym>;</sym><br />
<def>            r</def><sym>++;</sym><br />
<def></def>        <sym>}</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
</source>
