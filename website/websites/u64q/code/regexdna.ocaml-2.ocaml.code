<source>
<def></def><com>(* regexdna.ml</com><br />
<com> *</com><br />
<com> * The Great Computer Language Shootout</com><br />
<com> * http://shootout.alioth.debian.org/</com><br />
<com> *</com><br />
<com> * Contributed by Christophe TROESTLER</com><br />
<com> *)</com><def></def><br />
<br />
<kwa>open</kwa> <def></def><kwd>Printf</kwd><br />
<def></def><br />
<kwa>let</kwa> <def>variants</def> <sym>= [</sym><def></def><str>&quot;agggtaaa</str><esc>\\</esc><str>|tttaccct&quot;</str><def></def><sym>;</sym>          <def></def><str>&quot;[cgt]gggtaaa</str><esc>\\</esc><str>|tttaccc[acg]&quot;</str><def></def><sym>;</sym><br />
<def></def>                <str>&quot;a[act]ggtaaa</str><esc>\\</esc><str>|tttacc[agt]t&quot;</str><def></def><sym>;</sym>  <def></def><str>&quot;ag[act]gtaaa</str><esc>\\</esc><str>|tttac[agt]ct&quot;</str><def></def><sym>;</sym><br />
<def></def>                <str>&quot;agg[act]taaa</str><esc>\\</esc><str>|ttta[agt]cct&quot;</str><def></def><sym>;</sym>  <def></def><str>&quot;aggg[acg]aaa</str><esc>\\</esc><str>|ttt[cgt]ccct&quot;</str><def></def><sym>;</sym><br />
<def></def>                <str>&quot;agggt[cgt]aa</str><esc>\\</esc><str>|tt[acg]accct&quot;</str><def></def><sym>;</sym>  <def></def><str>&quot;agggta[cgt]a</str><esc>\\</esc><str>|t[acg]taccct&quot;</str><def></def><sym>;</sym><br />
<def></def>                <str>&quot;agggtaa[cgt]</str><esc>\\</esc><str>|[acg]ttaccct&quot;</str><def></def><sym>]</sym><br />
<def></def><br />
<com>(* Remove the &quot;\\&quot; which is mandatory in OCaml regex. *)</com><def></def><br />
<kwa>let</kwa> <def>re_bs</def> <sym>=</sym> <def></def><kwc>Str</kwc><def></def><sym>.</sym><def>regexp_string</def> <str>&quot;</str><esc>\\</esc><str>&quot;</str><def></def><br />
<kwa>let</kwa> <def>to_string</def> <sym>=</sym> <def></def><kwc>Str</kwc><def></def><sym>.</sym><def>global_replace re_bs</def> <str>&quot;&quot;</str><def></def><br />
<br />
<kwa>let</kwa> <def>subst</def> <sym>= [</sym><def></def><str>&quot;B&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(c|g|t)&quot;</str><def></def><sym>;</sym> <def></def><str>&quot;D&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(a|g|t)&quot;</str><def></def><sym>;</sym>   <def></def><str>&quot;H&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(a|c|t)&quot;</str><def></def><sym>;</sym> <def></def><str>&quot;K&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(g|t)&quot;</str><def></def><sym>;</sym><br />
<def></def>             <str>&quot;M&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(a|c)&quot;</str><def></def><sym>;</sym>   <def></def><str>&quot;N&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(a|c|g|t)&quot;</str><def></def><sym>;</sym> <def></def><str>&quot;R&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(a|g)&quot;</str><def></def><sym>;</sym>   <def></def><str>&quot;S&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(c|g)&quot;</str><def></def><sym>;</sym><br />
<def></def>             <str>&quot;V&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(a|c|g)&quot;</str><def></def><sym>;</sym> <def></def><str>&quot;W&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(a|t)&quot;</str><def></def><sym>;</sym>     <def></def><str>&quot;Y&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(c|t)&quot;</str><def></def><sym>]</sym><br />
<def></def><br />
<com>(* Read all of a redirected FASTA format file from stdin. *)</com><def></def><br />
<kwa>let</kwa> <def>file_data</def><sym>,</sym> <def>file_length</def> <sym>=</sym><br />
<def></def>  <kwa>let</kwa> <def>b</def> <sym>=</sym> <def></def><kwc>Buffer</kwc><def></def><sym>.</sym><def>create</def> <num>0xFFFF</num> <def></def><kwa>and</kwa> <def>s</def> <sym>=</sym> <def></def><kwc>String</kwc><def></def><sym>.</sym><def>create</def> <num>0xFFF</num> <def></def><kwa>and</kwa> <def>r</def> <sym>=</sym> <def></def><kwb>ref</kwb> <def></def><num>1</num> <def></def><kwa>in</kwa><br />
<def></def>  <kwa>while</kwa> <def></def><sym>!</sym><def>r</def> <sym>&gt;</sym> <def></def><num>0</num> <def></def><kwa>do</kwa><br />
<def>    r</def> <sym>:=</sym> <def>input stdin s</def> <num>0 0xFFF</num><def></def><sym>;</sym>   <def></def><kwc>Buffer</kwc><def></def><sym>.</sym><def>add_substring b s</def> <num>0</num> <def></def><sym>!</sym><def>r</def><br />
  <kwa>done</kwa><def></def><sym>;</sym><br />
<def></def>  <kwc>Buffer</kwc><def></def><sym>.</sym><def>contents b</def><sym>,</sym> <def></def><kwc>Buffer</kwc><def></def><sym>.</sym><def>length b</def><br />
<br />
<com>(* Remove FASTA sequence descriptions and all linefeed characters.  *)</com><def></def><br />
<kwa>let</kwa> <def>dna</def> <sym>=</sym> <def></def><kwc>Str</kwc><def></def><sym>.</sym><def>global_replace</def> <sym>(</sym><def></def><kwc>Str</kwc><def></def><sym>.</sym><def>regexp</def> <str>&quot;^&gt;.*$</str><esc>\\</esc><str>|</str><esc>\n</esc><str>&quot;</str><def></def><sym>)</sym> <def></def><str>&quot;&quot;</str><def> file_data</def><br />
<kwa>let</kwa> <def>code_length</def> <sym>=</sym> <def></def><kwc>String</kwc><def></def><sym>.</sym><def>length dna</def><br />
<br />
<com>(* Count matches of [re]. *)</com><def></def><br />
<kwa>let</kwa> <def>count re s</def> <sym>=</sym><br />
<def></def>  <kwa>let</kwa> <def>re</def> <sym>=</sym> <def></def><kwc>Str</kwc><def></def><sym>.</sym><def>regexp_case_fold re</def> <kwa>and</kwa> <def>i</def> <sym>=</sym> <def></def><kwb>ref</kwb> <def></def><num>0</num> <def></def><kwa>and</kwa> <def>n</def> <sym>=</sym> <def></def><kwb>ref</kwb> <def></def><num>0</num> <def></def><kwa>in</kwa><br />
<def></def>  <kwa>try</kwa><br />
<def></def>    <kwa>while true do</kwa> <def>i</def> <sym>:=</sym> <def></def><num>1</num> <def></def><sym>+</sym> <def></def><kwc>Str</kwc><def></def><sym>.</sym><def>search_forward re s</def> <sym>!</sym><def>i</def><sym>;</sym> <def>incr n</def> <kwa>done</kwa><def></def><sym>;</sym> <def></def><kwa>assert false</kwa><br />
<def></def>  <kwa>with</kwa> <def></def><kwd>Not_found</kwd> <def></def><sym>-&gt; !</sym><def>n</def><br />
<br />
<br />
<kwa>let</kwa> <def></def><sym>() =</sym><br />
<def></def>  <kwc>List</kwc><def></def><sym>.</sym><def>iter</def> <sym>(</sym><def></def><kwa>fun</kwa> <def>re</def> <sym>-&gt;</sym> <def>printf</def> <str>&quot;%s %i</str><esc>\n</esc><str>&quot;</str><def></def> <sym>(</sym><def>to_string re</def><sym>) (</sym><def>count re dna</def><sym>))</sym> <def>variants</def><sym>;</sym><br />
<def></def>  <kwa>let</kwa> <def>b</def> <sym>=</sym> <def></def><kwb>ref</kwb> <def>dna</def> <kwa>in</kwa><br />
<def></def>  <kwc>List</kwc><def></def><sym>.</sym><def>iter</def> <sym>(</sym><def></def><kwa>fun</kwa> <def></def><sym>(</sym><def>re</def><sym>,</sym> <def>s</def><sym>) -&gt;</sym><br />
<def>               b</def> <sym>:=</sym> <def></def><kwc>Str</kwc><def></def><sym>.</sym><def>global_replace</def> <sym>(</sym><def></def><kwc>Str</kwc><def></def><sym>.</sym><def>regexp_case_fold re</def><sym>)</sym> <def>s</def> <sym>!</sym><def>b</def><sym>)</sym> <def>subst</def><sym>;</sym><br />
<def>  printf</def> <str>&quot;</str><esc>\n</esc><str>%i</str><esc>\n</esc><str>%i</str><esc>\n</esc><str>%i</str><esc>\n</esc><str>&quot;</str><def> file_length code_length</def> <sym>(</sym><def></def><kwc>String</kwc><def></def><sym>.</sym><def>length</def> <sym>!</sym><def>b</def><sym>)</sym><def></def><br />
</source>
