<source>
<def></def><slc>;;; The Computer Language Benchmarks Game</slc><br />
<def></def><slc>;;; http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>;;; contributed by Fabien D.</slc><br />
<def></def><br />
<sym>(</sym><def>define</def> <sym>(</sym><def>make</def><sym>-</sym><def>tree item depth</def><sym>)</sym><br />
<def></def>   <sym>(</sym><def></def><kwa>if</kwa> <def></def><sym>(=</sym> <def>depth</def> <num>0</num><def></def><sym>)</sym><br />
<def></def>      <sym>(</sym><def></def><kwa>list</kwa> <def>item</def> <sym>'() '())</sym><br />
<def></def>      <sym>(</sym><def>let</def> <sym>((</sym><def>new</def><sym>-</sym><def>depth</def> <sym>(-</sym> <def>depth</def> <num>1</num><def></def><sym>))</sym><br />
<def></def>            <sym>(</sym><def>new</def><sym>-</sym><def>item</def> <sym>(*</sym> <def>item</def> <num>2</num><def></def><sym>)))</sym><br />
<def></def>         <sym>(</sym><def></def><kwa>list</kwa> <def>item</def> <sym>(</sym><def>make</def><sym>-</sym><def>tree</def> <sym>(-</sym> <def>new</def><sym>-</sym><def>item</def> <num>1</num><def></def><sym>)</sym> <def>new</def><sym>-</sym><def>depth</def><sym>) (</sym><def>make</def><sym>-</sym><def>tree new</def><sym>-</sym><def>item new</def><sym>-</sym><def>depth</def><sym>)))))</sym><br />
<def></def><br />
<br />
<sym>(</sym><def>define</def> <sym>(</sym><def>check</def><sym>-</sym><def>tree tree</def><sym>)</sym><br />
<def></def>   <sym>(</sym><def>let</def> <sym>((</sym><def>item</def> <sym>(</sym><def></def><kwa>car</kwa> <def>tree</def><sym>))</sym><br />
<def></def>         <sym>(</sym><def>left</def> <sym>(</sym><def></def><kwa>cadr</kwa> <def>tree</def><sym>))</sym><br />
<def></def>         <sym>(</sym><def>right</def> <sym>(</sym><def></def><kwa>caddr</kwa> <def>tree</def><sym>)))</sym><br />
<def></def><br />
      <sym>(</sym><def></def><kwa>if</kwa> <def></def><sym>(</sym><def></def><kwa>null</kwa><def>? left</def><sym>)</sym><br />
<def>         item</def><br />
         <sym>(+</sym> <def>item</def> <sym>(- (</sym><def>check</def><sym>-</sym><def>tree left</def><sym>) (</sym><def>check</def><sym>-</sym><def>tree right</def><sym>))))))</sym><br />
<def></def><br />
<br />
<br />
<sym>(</sym><def>define</def> <sym>(</sym><def>iterate depth</def> <kwa>min</kwa><def></def><sym>-</sym><def>depth</def> <kwa>max</kwa><def></def><sym>-</sym><def>depth</def><sym>)</sym><br />
<def></def>   <sym>(</sym><def>let</def><sym>* ((</sym><def>iterations</def> <sym>(</sym><def></def><kwa>expt</kwa> <def></def><num>2</num> <def></def><sym>(- (+</sym> <def></def><kwa>max</kwa><def></def><sym>-</sym><def>depth</def> <kwa>min</kwa><def></def><sym>-</sym><def>depth</def><sym>)</sym> <def>depth</def><sym>)))</sym><br />
<def></def>               <sym>(</sym><def>check</def> <sym>(</sym><def>do</def> <sym>((</sym><def>i</def> <num>1</num> <def></def><sym>(+</sym> <def>i</def> <num>1</num><def></def><sym>)) (</sym><def>check</def> <num>0</num><def></def><sym>))</sym><br />
<def></def>                          <sym>((&gt;=</sym> <def>i</def> <sym>(+</sym> <def>iterations</def> <num>1</num><def></def><sym>))</sym> <def>check</def><sym>)</sym><br />
<def></def>                          <sym>(</sym><def></def><kwa>set</kwa><def></def><sym>!</sym> <def>check</def> <sym>(+</sym> <def>check</def> <sym>(</sym><def>check</def><sym>-</sym><def>tree</def> <sym>(</sym><def>make</def><sym>-</sym><def>tree i depth</def><sym>)) (</sym><def>check</def><sym>-</sym><def>tree</def> <sym>(</sym><def>make</def><sym>-</sym><def>tree</def> <sym>(-</sym> <def>i</def><sym>)</sym> <def>depth</def><sym>)))))))</sym><br />
<def></def><br />
                          <sym>(</sym><def>begin</def><br />
                              <sym>(</sym><def>display</def> <sym>(*</sym> <def>iterations</def> <num>2</num><def></def><sym>))</sym><br />
<def></def>                              <sym>(</sym><def>display</def> <str>&quot;    trees of depth &quot;</str><def></def><sym>)</sym><br />
<def></def>                              <sym>(</sym><def>display depth</def><sym>)</sym><br />
<def></def>                              <sym>(</sym><def>display</def> <str>&quot;    check: &quot;</str><def></def><sym>)</sym><br />
<def></def>                              <sym>(</sym><def>display check</def><sym>)</sym><br />
<def></def>                              <sym>(</sym><def>newline</def><sym>))))</sym><br />
<def></def><br />
<br />
<br />
<sym>(</sym><def>define</def> <sym>(</sym><def>main user</def><sym>-</sym><def>depth</def><sym>)</sym><br />
<def></def>   <sym>(</sym><def>let</def><sym>* ((</sym><def></def><kwa>min</kwa><def></def><sym>-</sym><def>depth</def> <num>4</num><def></def><sym>)</sym><br />
<def></def>          <sym>(</sym><def></def><kwa>max</kwa><def></def><sym>-</sym><def>depth</def> <sym>(</sym><def></def><kwa>max</kwa> <def></def><sym>(+</sym> <def></def><kwa>min</kwa><def></def><sym>-</sym><def>depth</def> <num>2</num><def></def><sym>)</sym> <def>user</def><sym>-</sym><def>depth</def><sym>))</sym><br />
<def></def>          <sym>(</sym><def>stretch</def><sym>-</sym><def>depth</def> <sym>(+</sym> <def></def><kwa>max</kwa><def></def><sym>-</sym><def>depth</def> <num>1</num><def></def><sym>))</sym><br />
<def></def>          <sym>(</sym><def>long</def><sym>-</sym><def>lived</def> <sym>(</sym><def>make</def><sym>-</sym><def>tree</def> <num>0</num> <def></def><kwa>max</kwa><def></def><sym>-</sym><def>depth</def><sym>)))</sym><br />
<def></def><br />
      <sym>(</sym><def>begin</def><br />
         <sym>(</sym><def>display</def> <str>&quot;stretch tree of depth &quot;</str><def></def><sym>)</sym><br />
<def></def>         <sym>(</sym><def>display stretch</def><sym>-</sym><def>depth</def><sym>)</sym><br />
<def></def>         <sym>(</sym><def>display</def> <str>&quot;    check: &quot;</str><def></def><sym>)</sym><br />
<def></def>         <sym>(</sym><def>display</def> <sym>(</sym><def>check</def><sym>-</sym><def>tree</def> <sym>(</sym><def>make</def><sym>-</sym><def>tree</def> <num>0</num> <def>stretch</def><sym>-</sym><def>depth</def><sym>)))</sym><br />
<def></def>         <sym>(</sym><def>newline</def><sym>)</sym><br />
<def></def><br />
         <sym>(</sym><def>do</def> <sym>((</sym><def>depth</def> <kwa>min</kwa><def></def><sym>-</sym><def>depth</def> <sym>(+</sym> <def>depth</def> <num>2</num><def></def><sym>)))</sym><br />
<def></def>             <sym>((&gt;=</sym> <def>depth stretch</def><sym>-</sym><def>depth</def><sym>))</sym><br />
<def></def>             <sym>(</sym><def>iterate depth</def> <kwa>min</kwa><def></def><sym>-</sym><def>depth</def> <kwa>max</kwa><def></def><sym>-</sym><def>depth</def><sym>))</sym><br />
<def></def><br />
         <sym>(</sym><def>display</def> <str>&quot;long lived tree of depth &quot;</str><def></def><sym>)</sym><br />
<def></def>         <sym>(</sym><def>display</def> <kwa>max</kwa><def></def><sym>-</sym><def>depth</def><sym>)</sym><br />
<def></def>         <sym>(</sym><def>display</def> <str>&quot;    check: &quot;</str><def></def><sym>)</sym><br />
<def></def>         <sym>(</sym><def>display</def> <sym>(</sym><def>check</def><sym>-</sym><def>tree long</def><sym>-</sym><def>lived</def><sym>))</sym><br />
<def></def>         <sym>(</sym><def>newline</def><sym>)</sym><br />
<def></def>         <sym>(</sym><def>newline</def><sym>))))</sym><br />
<def></def><br />
<br />
<sym>(</sym><def>main</def> <sym>(</sym><def>string</def><sym>-&gt;</sym><def>number</def> <sym>(</sym><def>vector</def><sym>-</sym><def>ref argv</def> <num>1</num><def></def><sym>)))</sym><def></def><br />
</source>
