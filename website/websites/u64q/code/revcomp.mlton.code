<source>
<def></def><com>(* reverse-complement.mlton</com><br />
<com> *</com><br />
<com> * The Great Computer Language Shootout</com><br />
<com> * http://shootout.alioth.debian.org/</com><br />
<com> *</com><br />
<com> * contributed by Troestler Christophe</com><br />
<com> * translated by sweeks@sweeks.com for MLton/SML from the OCaml version</com><br />
<com> *)</com><def></def><br />
<br />
<kwa>val</kwa> <def>complement</def> <sym>=</sym><br />
<def></def>  <kwa>let</kwa><br />
<def></def>     <kwa>val</kwa> <def>cplt</def> <sym>=</sym> <def>Array.tabulate</def> <sym>(</sym><def></def><num>256</num><def></def><sym>,</sym> <def>chr</def><sym>)</sym><br />
<def></def>     <kwa>fun</kwa> <def>u</def> <sym>(</sym><def>c</def><sym>,</sym> <def>c'</def><sym>) =</sym> <def>Array.update</def> <sym>(</sym><def>cplt</def><sym>,</sym> <def>ord c</def><sym>,</sym> <def>c'</def><sym>)</sym><br />
<def></def>     <kwa>val</kwa> <def></def><sym>() =</sym><br />
<def></def>	<kwa>List</kwa><def>.app</def><br />
	<sym>(</sym><def></def><kwa>fn</kwa> <def></def><sym>(</sym><def>c1</def><sym>,</sym> <def>c2</def><sym>) =&gt;</sym><br />
<def></def>	 <sym>(</sym><def>u</def> <sym>(</sym><def>c1</def><sym>,</sym> <def>c2</def><sym>);</sym> <def>u</def> <sym>(</sym><def>c2</def><sym>,</sym> <def>c1</def><sym>)</sym><br />
<def></def>	  <sym>;</sym> <def>u</def> <sym>(</sym><def></def><kwa>Char</kwa><def>.toLower c1</def><sym>,</sym> <def>c2</def><sym>);</sym> <def>u</def> <sym>(</sym><def></def><kwa>Char</kwa><def>.toLower c2</def><sym>,</sym> <def>c1</def><sym>)))</sym><br />
<def></def>	<sym>[(</sym><def>#</def><str>&quot;A&quot;</str><def></def><sym>,</sym><def>#</def><str>&quot;T&quot;</str><def></def><sym>), (</sym><def>#</def><str>&quot;C&quot;</str><def></def><sym>,</sym><def>#</def><str>&quot;G&quot;</str><def></def><sym>), (</sym><def>#</def><str>&quot;B&quot;</str><def></def><sym>,</sym><def>#</def><str>&quot;V&quot;</str><def></def><sym>), (</sym><def>#</def><str>&quot;D&quot;</str><def></def><sym>,</sym><def>#</def><str>&quot;H&quot;</str><def></def><sym>), (</sym><def>#</def><str>&quot;K&quot;</str><def></def><sym>,</sym><def>#</def><str>&quot;M&quot;</str><def></def><sym>),</sym><br />
<def></def>	 <sym>(</sym><def>#</def><str>&quot;R&quot;</str><def></def><sym>,</sym><def>#</def><str>&quot;Y&quot;</str><def></def><sym>)]</sym><br />
<def></def>  <kwa>in</kwa><br />
<def></def>     <kwa>fn</kwa> <def>c</def> <sym>=&gt;</sym> <def>Array.sub</def> <sym>(</sym><def>cplt</def><sym>,</sym> <def>ord c</def><sym>)</sym><br />
<def></def>  <kwa>end</kwa><br />
<def></def><br />
<com>(* [reverse s] reverse-complement the string [s] in place. *)</com><def></def><br />
<kwa>fun</kwa> <def>reverse</def> <sym>(</sym><def>s</def><sym>:</sym> <def>char array</def><sym>):</sym> <def>unit</def> <sym>=</sym><br />
<def></def>  <kwa>let</kwa><br />
<def></def>     <kwa>fun</kwa> <def>rev</def> <sym>(</sym><def>i</def><sym>,</sym> <def>j</def><sym>) =</sym><br />
<def></def>	<kwa>if</kwa> <def>i</def> <sym>&gt;=</sym> <def>j</def><br />
	   <kwa>then</kwa> <def></def><sym>()</sym><br />
<def></def>	<kwa>else</kwa><br />
<def></def>	   <kwa>let</kwa><br />
<def></def>	      <kwa>val</kwa> <def>si</def> <sym>=</sym> <def>Array.sub</def> <sym>(</sym><def>s</def><sym>,</sym> <def>i</def><sym>)</sym><br />
<def></def>	      <kwa>val</kwa> <def></def><sym>() =</sym> <def>Array.update</def> <sym>(</sym><def>s</def><sym>,</sym> <def>i</def><sym>,</sym> <def>complement</def> <sym>(</sym><def>Array.sub</def> <sym>(</sym><def>s</def><sym>,</sym> <def>j</def><sym>)))</sym><br />
<def></def>	      <kwa>val</kwa> <def></def><sym>() =</sym> <def>Array.update</def> <sym>(</sym><def>s</def><sym>,</sym> <def>j</def><sym>,</sym> <def>complement si</def><sym>)</sym><br />
<def></def>	   <kwa>in</kwa><br />
<def>	      rev</def> <sym>(</sym><def>i</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>j</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>	   <kwa>end</kwa><br />
<def></def>  <kwa>in</kwa><br />
<def>     rev</def> <sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def>Array.length s</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>  <kwa>end</kwa><br />
<def></def><br />
<kwa>fun</kwa> <def>printFasta</def> <sym>(</sym><def>dna</def><sym>:</sym> <def>char array</def><sym>):</sym> <def>unit</def> <sym>=</sym><br />
<def></def>  <kwa>let</kwa><br />
<def></def>     <kwa>fun</kwa> <def>output1 c</def> <sym>=</sym> <def></def><kwa>TextIO</kwa><def>.output1</def> <sym>(</sym><def></def><kwa>TextIO</kwa><def>.stdOut</def><sym>,</sym> <def>c</def><sym>)</sym><br />
<def></def>     <kwa>val</kwa> <def>n</def> <sym>=</sym> <def>Array.length dna</def><br />
     <kwa>fun</kwa> <def>grab i</def> <sym>=</sym><br />
<def></def>	<kwa>if</kwa> <def>i</def> <sym>=</sym> <def>n</def><br />
	   <kwa>then</kwa> <def></def><sym>()</sym><br />
<def></def>	<kwa>else</kwa><br />
<def></def>	   <kwa>let</kwa><br />
<def></def>	      <kwa>fun</kwa> <def>loop</def> <sym>(</sym><def>i</def><sym>,</sym> <def>count</def><sym>) =</sym><br />
<def></def>		 <kwa>if</kwa> <def></def><num>0</num> <def></def><sym>=</sym> <def>count</def><br />
		    <kwa>then</kwa> <def></def><sym>(</sym><def>output1 #</def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>;</sym> <def>grab i</def><sym>)</sym><br />
<def></def>		 <kwa>else</kwa> <def></def><sym>(</sym><def>output1</def> <sym>(</sym><def>Array.sub</def> <sym>(</sym><def>dna</def><sym>,</sym> <def>i</def><sym>));</sym> <def>loop</def> <sym>(</sym><def>i</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>count</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>))</sym><br />
<def></def>	   <kwa>in</kwa><br />
<def>	      loop</def> <sym>(</sym><def>i</def><sym>,</sym> <def></def><kwa>Int</kwa><def>.min</def> <sym>(</sym><def>n</def> <sym>-</sym> <def>i</def><sym>,</sym> <def></def><num>60</num><def></def><sym>))</sym><br />
<def></def>	   <kwa>end</kwa><br />
<def></def>  <kwa>in</kwa><br />
<def>     grab</def> <num>0</num><br />
<def></def>  <kwa>end</kwa><br />
<def></def><br />
<kwa>structure</kwa> <def>Buffer</def><sym>:</sym><br />
<def></def>   <kwa>sig</kwa><br />
<def></def>      <kwa>type</kwa> <def>t</def><br />
<br />
      <kwa>val</kwa> <def>addLine</def><sym>:</sym> <def>t</def> <sym>*</sym> <def></def><kwb>string</kwb> <def></def><sym>-&gt;</sym> <def>t</def><br />
      <kwa>val</kwa> <def>contents</def><sym>:</sym> <def>t</def> <sym>-&gt;</sym> <def>char array</def><br />
      <kwa>val</kwa> <def>empty</def><sym>:</sym> <def>t</def><br />
   <kwa>end</kwa> <def></def><sym>=</sym><br />
<def></def>   <kwa>struct</kwa><br />
<def></def>      <kwa>datatype</kwa> <def>t</def> <sym>=</sym> <def>T</def> <kwa>of</kwa> <def></def><kwb>string</kwb> <def>list</def><br />
<br />
      <kwa>val</kwa> <def>empty</def><sym>:</sym> <def>t</def> <sym>=</sym> <def>T</def> <sym>[]</sym><br />
<def></def><br />
      <kwa>fun</kwa> <def>addLine</def> <sym>(</sym><def>T xs</def><sym>,</sym> <def>x</def><sym>) =</sym> <def>T</def> <sym>(</sym><def>x</def> <sym>::</sym> <def>xs</def><sym>)</sym><br />
<def></def><br />
      <kwa>fun</kwa> <def>contents</def> <sym>(</sym><def>T lines</def><sym>) =</sym><br />
<def></def>	 <kwa>let</kwa><br />
<def></def>	    <kwa>val</kwa> <def>n</def> <sym>=</sym> <def>foldl</def> <sym>(</sym><def></def><kwa>fn</kwa> <def></def><sym>(</sym><def>s</def><sym>,</sym> <def>n</def><sym>) =&gt;</sym> <def>n</def> <sym>+</sym> <def>size s</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>)</sym> <def></def><num>0</num> <def>lines</def><br />
	    <kwa>val</kwa> <def>a</def> <sym>=</sym> <def>Array.array</def> <sym>(</sym><def>n</def><sym>,</sym> <def>#</def><str>&quot;</str><esc>\000</esc><str>&quot;</str><def></def><sym>)</sym><br />
<def></def>	    <kwa>val</kwa> <def>_</def> <sym>=</sym><br />
<def>	       foldl</def> <sym>(</sym><def></def><kwa>fn</kwa> <def></def><sym>(</sym><def>s</def><sym>,</sym> <def>i</def><sym>) =&gt;</sym><br />
<def></def>		      <kwa>let</kwa><br />
<def></def>			 <kwa>fun</kwa> <def>loop</def> <sym>(</sym><def>i</def><sym>,</sym> <def>j</def><sym>)  =</sym><br />
<def></def>			    <kwa>if</kwa> <def>j</def> <sym>&lt;</sym> <def></def><num>0</num><br />
<def></def>			       <kwa>then</kwa> <def>i</def><br />
			    <kwa>else</kwa> <def></def><sym>(</sym><def>Array.update</def> <sym>(</sym><def>a</def><sym>,</sym> <def>i</def><sym>,</sym> <def></def><kwa>String</kwa><def>.sub</def> <sym>(</sym><def>s</def><sym>,</sym> <def>j</def><sym>))</sym><br />
<def></def>				  <sym>;</sym> <def>loop</def> <sym>(</sym><def>i</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>j</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>))</sym><br />
<def></def>		      <kwa>in</kwa><br />
<def>			 loop</def> <sym>(</sym><def>i</def><sym>,</sym> <def></def><kwa>String</kwa><def>.size s</def> <sym>-</sym> <def></def><num>2</num><def></def><sym>)</sym><br />
<def></def>		      <kwa>end</kwa><def></def><sym>)</sym><br />
<def></def>	       <sym>(</sym><def>n</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>)</sym> <def>lines</def><br />
	 <kwa>in</kwa><br />
<def>	    a</def><br />
	 <kwa>end</kwa><br />
<def></def>   <kwa>end</kwa><br />
<def></def><br />
<kwa>fun</kwa> <def>one</def> <sym>(</sym><def>b</def><sym>:</sym> <def>Buffer.t</def><sym>):</sym> <def>unit</def> <sym>=</sym><br />
<def></def>   <kwa>let</kwa><br />
<def></def>      <kwa>val</kwa> <def>a</def> <sym>=</sym> <def>Buffer.contents b</def><br />
      <kwa>val</kwa> <def></def><sym>() =</sym> <def>reverse a</def><br />
   <kwa>in</kwa><br />
<def>      printFasta a</def><br />
   <kwa>end</kwa><br />
<def></def><br />
<kwa>fun</kwa> <def>loop</def> <sym>(</sym><def>b</def><sym>:</sym> <def>Buffer.t</def><sym>) =</sym><br />
<def></def>   <kwa>case TextIO</kwa><def>.inputLine</def> <kwa>TextIO</kwa><def>.stdIn</def> <kwa>of</kwa><br />
<def>      NONE</def> <sym>=&gt;</sym> <def>one b</def><br />
    <sym>|</sym> <def>SOME line</def> <sym>=&gt;</sym><br />
<def></def>	 <kwa>if</kwa> <def>size line</def> <sym>&gt;</sym> <def></def><num>0</num> <def></def><kwa>andalso String</kwa><def>.sub</def> <sym>(</sym><def>line</def><sym>,</sym> <def></def><num>0</num><def></def><sym>) =</sym> <def>#</def><str>&quot;&gt;&quot;</str><def></def><br />
	    <kwa>then</kwa> <def></def><sym>(</sym><def>one b</def><sym>;</sym> <def>print line</def><sym>;</sym> <def>loop Buffer.empty</def><sym>)</sym><br />
<def></def>	 <kwa>else</kwa> <def>loop</def> <sym>(</sym><def>Buffer.addLine</def> <sym>(</sym><def>b</def><sym>,</sym> <def>line</def><sym>))</sym><br />
<def></def><br />
<kwa>val</kwa> <def></def><sym>() =</sym> <def>loop Buffer.empty</def><br />
<br />
<br />
</source>
