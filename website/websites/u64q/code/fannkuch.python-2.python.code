<source>
<def></def><slc># The Computer Language Benchmarks Game</slc><br />
<def></def><slc># http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>#</slc><br />
<def></def><slc># contributed by Sokolov Yura</slc><br />
<def></def><slc># modified by Tupteq</slc><br />
<def></def><br />
<kwa>def</kwa> <def></def><kwd>fannkuch</kwd><def></def><sym>(</sym><def>n</def><sym>):</sym><br />
<def>    count</def> <sym>=</sym> <def></def><kwb>range</kwb><def></def><sym>(</sym><def></def><num>1</num><def></def><sym>,</sym> <def>n</def><sym>+</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def>    max_flips</def> <sym>=</sym> <def></def><num>0</num><br />
<def>    m</def> <sym>=</sym> <def>n</def><sym>-</sym><def></def><num>1</num><br />
<def>    r</def> <sym>=</sym> <def>n<br />
    check</def> <sym>=</sym> <def></def><num>0</num><br />
<def>    perm1</def> <sym>=</sym> <def></def><kwb>range</kwb><def></def><sym>(</sym><def>n</def><sym>)</sym><br />
<def>    perm</def> <sym>=</sym> <def></def><kwb>range</kwb><def></def><sym>(</sym><def>n</def><sym>)</sym><br />
<def>    perm1_ins</def> <sym>=</sym> <def>perm1</def><sym>.</sym><def>insert<br />
    perm1_pop</def> <sym>=</sym> <def>perm1</def><sym>.</sym><def>pop</def><br />
<br />
    <kwa>while</kwa> <def></def><num>1</num><def></def><sym>:</sym><br />
<def></def>        <kwa>if</kwa> <def>check</def> <sym>&lt;</sym> <def></def><num>30</num><def></def><sym>:</sym><br />
<def></def>            <kwa>print</kwa> <def></def><str>&quot;&quot;</str><def></def><sym>.</sym><def></def><kwd>join</kwd><def></def><sym>(</sym><def></def><kwb>str</kwb><def></def><sym>(</sym><def>i</def><sym>+</sym><def></def><num>1</num><def></def><sym>)</sym> <def></def><kwa>for</kwa> <def>i</def> <kwa>in</kwa> <def>perm1</def><sym>)</sym><br />
<def>            check</def> <sym>+=</sym> <def></def><num>1</num><br />
<def></def><br />
        <kwa>while</kwa> <def>r</def> <sym>!=</sym> <def></def><num>1</num><def></def><sym>:</sym><br />
<def>            count</def><sym>[</sym><def>r</def><sym>-</sym><def></def><num>1</num><def></def><sym>] =</sym> <def>r<br />
            r</def> <sym>-=</sym> <def></def><num>1</num><br />
<def></def><br />
        <kwa>if</kwa> <def>perm1</def><sym>[</sym><def></def><num>0</num><def></def><sym>] !=</sym> <def></def><num>0</num> <def></def><kwa>and</kwa> <def>perm1</def><sym>[</sym><def>m</def><sym>] !=</sym> <def>m</def><sym>:</sym><br />
<def>            perm</def> <sym>=</sym> <def>perm1</def><sym>[:]</sym><br />
<def>            flips_count</def> <sym>=</sym> <def></def><num>0</num><br />
<def>            k</def> <sym>=</sym> <def>perm</def><sym>[</sym><def></def><num>0</num><def></def><sym>]</sym><br />
<def></def>            <kwa>while</kwa> <def>k</def><sym>:</sym><br />
<def>                perm</def><sym>[:</sym><def>k</def><sym>+</sym><def></def><num>1</num><def></def><sym>] =</sym> <def>perm</def><sym>[</sym><def>k</def><sym>::-</sym><def></def><num>1</num><def></def><sym>]</sym><br />
<def>                flips_count</def> <sym>+=</sym> <def></def><num>1</num><br />
<def>                k</def> <sym>=</sym> <def>perm</def><sym>[</sym><def></def><num>0</num><def></def><sym>]</sym><br />
<def></def><br />
            <kwa>if</kwa> <def>flips_count</def> <sym>&gt;</sym> <def>max_flips</def><sym>:</sym><br />
<def>                max_flips</def> <sym>=</sym> <def>flips_count</def><br />
<br />
        <kwa>while</kwa> <def>r</def> <sym>!=</sym> <def>n</def><sym>:</sym><br />
<def></def>            <kwd>perm1_ins</kwd><def></def><sym>(</sym><def>r</def><sym>,</sym> <def></def><kwd>perm1_pop</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>))</sym><br />
<def>            count</def><sym>[</sym><def>r</def><sym>] -=</sym> <def></def><num>1</num><br />
<def></def>            <kwa>if</kwa> <def>count</def><sym>[</sym><def>r</def><sym>] &gt;</sym> <def></def><num>0</num><def></def><sym>:</sym><br />
<def></def>                <kwa>break</kwa><br />
<def>            r</def> <sym>+=</sym> <def></def><num>1</num><br />
<def></def>        <kwa>else</kwa><def></def><sym>:</sym><br />
<def></def>            <kwa>return</kwa> <def>max_flips</def><br />
<br />
<kwa>def</kwa> <def></def><kwd>main</kwd><def></def><sym>():</sym><br />
<def></def>    <kwa>from</kwa> <def>sys</def> <kwa>import</kwa> <def>argv<br />
    n</def> <sym>=</sym> <def></def><kwb>int</kwb><def></def><sym>(</sym><def>argv</def> <kwa>and</kwa> <def>argv</def><sym>[</sym><def></def><num>1</num><def></def><sym>]</sym> <def></def><kwa>or</kwa> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>    <kwa>print</kwa> <def></def><str>&quot;Pfannkuchen(%d) = %d</str><esc>\n</esc><str>&quot;</str><def></def> <sym>% (</sym><def>n</def><sym>,</sym> <def></def><kwd>fannkuch</kwd><def></def><sym>(</sym><def>n</def><sym>)),</sym><br />
<def></def><br />
<kwa>if</kwa> <def>__name__</def><sym>==</sym><def></def><str>&quot;__main__&quot;</str><def></def><sym>:</sym><br />
<def></def>    <kwd>main</kwd><def></def><sym>()</sym><def></def><br />
</source>
