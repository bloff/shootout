<span class="hl com">/* The Great Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Adam Montague</span>
<span class="hl com">*/</span>

<span class="hl kwb">int</span> <span class="hl kwd">nsieve</span><span class="hl sym">(</span><span class="hl kwb">int</span> m<span class="hl sym">)</span>
<span class="hl sym">{</span>
	<span class="hl kwb">array</span><span class="hl sym">(</span><span class="hl kwb">int</span><span class="hl sym">)</span> flags <span class="hl sym">=</span> <span class="hl kwa">allocate</span><span class="hl sym">(</span>m <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">);</span>
	<span class="hl kwb">int</span> count<span class="hl sym">;</span>

	<span class="hl kwd">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">;</span> i <span class="hl sym">&lt;=</span> m<span class="hl sym">;</span> i<span class="hl sym">++) {</span>
		<span class="hl kwd">if</span> <span class="hl sym">(</span>flags<span class="hl sym">[</span>i<span class="hl sym">]) {</span>
			<span class="hl kwd">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> j <span class="hl sym">=</span> i <span class="hl sym">+</span> i<span class="hl sym">;</span> j <span class="hl sym">&lt;=</span> m<span class="hl sym">;</span> j <span class="hl sym">+=</span> i<span class="hl sym">) {</span>
				flags<span class="hl sym">[</span>j<span class="hl sym">] =</span> <span class="hl num">0</span><span class="hl sym">;</span>
			<span class="hl sym">}</span>
			count<span class="hl sym">++;</span>
		<span class="hl sym">}</span>
	<span class="hl sym">}</span>
	<span class="hl kwd">return</span> <span class="hl sym">(</span>count<span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">array</span><span class="hl sym">(</span><span class="hl kwb">string</span><span class="hl sym">)</span> argv<span class="hl sym">)</span>
<span class="hl sym">{</span>
	<span class="hl kwb">int</span> n <span class="hl sym">= (</span><span class="hl kwb">int</span><span class="hl sym">)</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">];</span>
	<span class="hl kwd">if</span> <span class="hl sym">(</span>n <span class="hl sym">&lt;</span> <span class="hl num">2</span><span class="hl sym">)</span>
		n <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">;</span>
	<span class="hl kwb">int</span> m<span class="hl sym">;</span>

	m <span class="hl sym">= (</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> n<span class="hl sym">) *</span> <span class="hl num">10000</span><span class="hl sym">;</span>
	<span class="hl kwa">write</span><span class="hl sym">(</span><span class="hl str">&quot;Primes up to %8d %8d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> m<span class="hl sym">,</span> <span class="hl kwd">nsieve</span><span class="hl sym">(</span>m<span class="hl sym">));</span>

	m <span class="hl sym">= (</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">) *</span> <span class="hl num">10000</span><span class="hl sym">;</span>
	<span class="hl kwa">write</span><span class="hl sym">(</span><span class="hl str">&quot;Primes up to %8d %8d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> m<span class="hl sym">,</span> <span class="hl kwd">nsieve</span><span class="hl sym">(</span>m<span class="hl sym">));</span>

	m <span class="hl sym">= (</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> n <span class="hl sym">-</span> <span class="hl num">2</span><span class="hl sym">) *</span> <span class="hl num">10000</span><span class="hl sym">;</span>
	<span class="hl kwa">write</span><span class="hl sym">(</span><span class="hl str">&quot;Primes up to %8d %8d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> m<span class="hl sym">,</span> <span class="hl kwd">nsieve</span><span class="hl sym">(</span>m<span class="hl sym">));</span>
<span class="hl sym">}</span>
