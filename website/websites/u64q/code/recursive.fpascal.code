<source>
<def></def><com>(* The Computer Language Benchmarks Game</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com></com><br />
<com>   contributed by Josh Goldfoot</com><br />
<com>   modified by Vincent Snijders</com><br />
<com>*)</com><def></def><br />
<br />
<kwa>program</kwa> <def>recursive</def><sym>;</sym><br />
<def></def><br />
<com>{$mode objfpc}</com><def></def><com>{$I-}</com><def></def><com>{$OPTIMIZATION TAILREC}</com><def></def><br />
<br />
<kwa>var</kwa><br />
<def>   n</def> <sym>:</sym> <def></def><kwb>longint</kwb><def></def><sym>;</sym><br />
<def></def><br />
<kwa>function</kwa> <def></def><kwd>Ack</kwd><def></def><sym>(</sym><def>x</def> <sym>:</sym> <def></def><kwb>longint</kwb><def></def><sym>;</sym> <def>y</def> <sym>:</sym> <def></def><kwb>longint</kwb><def></def><sym>):</sym> <def></def><kwb>longint</kwb><def></def><sym>;</sym><br />
<def></def><kwa>begin</kwa><br />
<def></def>   <kwa>if</kwa> <def>x</def> <sym>=</sym> <def></def><num>0</num> <def></def><kwa>then</kwa><br />
<def>      Ack</def> <sym>:=</sym> <def>y</def> <sym>+</sym> <def></def><num>1</num><br />
<def></def>   <kwa>else if</kwa> <def>y</def> <sym>=</sym> <def></def><num>0</num> <def></def><kwa>then</kwa><br />
<def>      Ack</def> <sym>:=</sym> <def></def><kwd>Ack</kwd><def></def><sym>(</sym><def>x</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>,</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>   <kwa>else</kwa> <def>Ack</def> <sym>:=</sym> <def></def><kwd>Ack</kwd><def></def><sym>(</sym><def>x</def><sym>-</sym><def></def><num>1</num><def></def><sym>,</sym> <def></def><kwd>Ack</kwd><def></def><sym>(</sym><def>x</def><sym>,</sym> <def>y</def><sym>-</sym><def></def><num>1</num><def></def><sym>));</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym> <def></def><com>{ Ack }</com><def></def><br />
<br />
<kwa>function</kwa> <def></def><kwd>Fib</kwd><def></def><sym>(</sym><def>n</def> <sym>:</sym> <def></def><kwb>longint</kwb><def></def><sym>):</sym> <def></def><kwb>longint</kwb><def></def><sym>;</sym><br />
<def></def><kwa>begin</kwa><br />
<def></def>   <kwa>if</kwa> <def>n</def> <sym>&lt;</sym> <def></def><num>2</num> <def></def><kwa>then</kwa><br />
<def>      Fib</def> <sym>:=</sym> <def></def><num>1</num><br />
<def></def>   <kwa>else</kwa> <def>Fib</def> <sym>:=</sym> <def></def><kwd>Fib</kwd><def></def><sym>(</sym><def>n</def> <sym>-</sym> <def></def><num>2</num><def></def><sym>) +</sym> <def></def><kwd>Fib</kwd><def></def><sym>(</sym><def>n</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym> <def></def><com>{ Fib }</com><def></def><br />
<br />
<kwa>function</kwa> <def></def><kwd>FibFP</kwd><def></def><sym>(</sym><def>n</def> <sym>:</sym> <def></def><kwb>double</kwb><def></def><sym>):</sym> <def></def><kwb>double</kwb><def></def><sym>;</sym> <def></def><kwa>inline</kwa><def></def><sym>;</sym><br />
<def></def><kwa>begin</kwa><br />
<def></def>   <kwa>if</kwa> <def>n</def> <sym>&lt;</sym> <def></def><num>2</num> <def></def><kwa>then</kwa><br />
<def>      FibFP</def> <sym>:=</sym> <def></def><num>1</num><br />
<def></def>   <kwa>else</kwa> <def>FibFP</def> <sym>:=</sym> <def></def><kwd>FibFP</kwd><def></def><sym>(</sym><def>n</def> <sym>-</sym> <def></def><num>2</num><def></def><sym>) +</sym> <def></def><kwd>FibFP</kwd><def></def><sym>(</sym><def>n</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym> <def></def><com>{ FibFP }</com><def></def><br />
<br />
<kwa>function</kwa> <def></def><kwd>Tak</kwd><def></def><sym>(</sym><def>x</def> <sym>:</sym> <def></def><kwb>longint</kwb><def></def><sym>;</sym> <def>y</def><sym>:</sym> <def></def><kwb>longint</kwb><def></def><sym>;</sym> <def>z</def> <sym>:</sym> <def></def><kwb>longint</kwb><def></def><sym>):</sym> <def></def><kwb>longint</kwb><def></def><sym>;</sym><br />
<def></def><kwa>begin</kwa><br />
<def></def>   <kwa>if</kwa> <def>y</def> <sym>&lt;</sym> <def>x</def> <kwa>then</kwa><br />
<def>      Tak</def> <sym>:=</sym> <def></def><kwd>Tak</kwd><def></def><sym>(</sym> <def></def><kwd>Tak</kwd><def></def><sym>(</sym><def>x</def><sym>-</sym><def></def><num>1</num><def></def><sym>,</sym> <def>y</def><sym>,</sym> <def>z</def><sym>),</sym> <def></def><kwd>Tak</kwd><def></def><sym>(</sym><def>y</def><sym>-</sym><def></def><num>1</num><def></def><sym>,</sym> <def>z</def><sym>,</sym> <def>x</def><sym>),</sym> <def></def><kwd>Tak</kwd><def></def><sym>(</sym><def>z</def><sym>-</sym><def></def><num>1</num><def></def><sym>,</sym> <def>x</def><sym>,</sym> <def>y</def><sym>) )</sym><br />
<def></def>   <kwa>else</kwa> <def>Tak</def> <sym>:=</sym> <def>z</def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym> <def></def><com>{ Tak }</com><def></def><br />
<br />
<kwa>function</kwa> <def></def><kwd>TakFP</kwd><def></def><sym>(</sym><def>x</def> <sym>:</sym> <def></def><kwb>double</kwb><def></def><sym>;</sym> <def>y</def><sym>:</sym> <def></def><kwb>double</kwb><def></def><sym>;</sym> <def>z</def> <sym>:</sym> <def></def><kwb>double</kwb><def></def><sym>):</sym> <def></def><kwb>double</kwb><def></def><sym>;</sym><br />
<def></def><kwa>begin</kwa><br />
<def></def>   <kwa>if</kwa> <def>y</def> <sym>&lt;</sym> <def>x</def> <kwa>then</kwa><br />
<def>      TakFP</def> <sym>:=</sym> <def></def><kwd>TakFP</kwd><def></def><sym>(</sym> <def></def><kwd>TakFP</kwd><def></def><sym>(</sym><def>x</def><sym>-</sym><def></def><num>1</num><def></def><sym>,</sym> <def>y</def><sym>,</sym> <def>z</def><sym>),</sym> <def></def><kwd>TakFP</kwd><def></def><sym>(</sym><def>y</def><sym>-</sym><def></def><num>1</num><def></def><sym>,</sym> <def>z</def><sym>,</sym> <def>x</def><sym>),</sym> <def></def><kwd>TakFP</kwd><def></def><sym>(</sym><def>z</def><sym>-</sym><def></def><num>1</num><def></def><sym>,</sym> <def>x</def><sym>,</sym> <def>y</def><sym>) )</sym><br />
<def></def>   <kwa>else</kwa> <def>TakFP</def> <sym>:=</sym> <def>z</def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym> <def></def><com>{ TakFP }</com><def></def><br />
<br />
<kwa>begin</kwa><br />
<def></def>   <kwa>if</kwa> <def>ParamCount</def> <sym>=</sym> <def></def><num>1</num> <def></def><kwa>then begin</kwa><br />
<def></def>      <kwd>Val</kwd><def></def><sym>(</sym><def></def><kwd>ParamStr</kwd><def></def><sym>(</sym><def></def><num>1</num><def></def><sym>),</sym> <def>n</def><sym>);</sym><br />
<def>      n</def> <sym>:=</sym> <def>n</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>   <kwa>end</kwa><br />
<def></def>      <kwa>else</kwa> <def>n</def> <sym>:=</sym> <def></def><num>2</num><def></def><sym>;</sym><br />
<def></def><br />
   <kwd>writeLn</kwd><def></def><sym>(</sym><def></def><str>'Ack(3,'</str><def></def><sym>,</sym> <def>n</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>,</sym> <def></def><str>'): '</str><def></def><sym>,</sym> <def></def><kwd>Ack</kwd><def></def><sym>(</sym><def></def><num>3</num><def></def><sym>,</sym> <def>n</def><sym>+</sym><def></def><num>1</num><def></def><sym>));</sym><br />
<def></def>   <kwd>writeLn</kwd><def></def><sym>(</sym><def></def><str>'Fib('</str><def></def><sym>, (</sym><def></def><num>28.0</num> <def></def><sym>+</sym> <def>n</def><sym>):</sym><def></def><num>1</num><def></def><sym>:</sym><def></def><num>1</num><def></def><sym>,</sym> <def></def><str>'): '</str><def></def><sym>,</sym> <def></def><kwd>FibFP</kwd><def></def><sym>(</sym><def></def><num>28.0</num> <def></def><sym>+</sym> <def>n</def><sym>):</sym><def></def><num>1</num><def></def><sym>:</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>   <kwd>writeLn</kwd><def></def><sym>(</sym><def></def><str>'Tak('</str><def></def><sym>,</sym> <def></def><num>3</num> <def></def><sym>*</sym> <def>n</def><sym>,</sym><def></def><str>','</str><def></def><sym>,</sym> <def></def><num>2</num> <def></def><sym>*</sym> <def>n</def><sym>,</sym> <def></def><str>','</str><def></def><sym>,</sym> <def>n</def><sym>,</sym> <def></def><str>'): '</str><def></def><sym>,</sym> <def></def><kwd>Tak</kwd><def></def><sym>(</sym><def></def><num>3</num><def></def><sym>*</sym><def>n</def><sym>,</sym> <def></def><num>2</num><def></def><sym>*</sym><def>n</def><sym>,</sym> <def>n</def><sym>));</sym><br />
<def></def>   <kwd>writeLn</kwd><def></def><sym>(</sym><def></def><str>'Fib(3): '</str><def></def><sym>,</sym> <def></def><kwd>Fib</kwd><def></def><sym>(</sym><def></def><num>3</num><def></def><sym>));</sym><br />
<def></def>   <kwd>writeLn</kwd><def></def><sym>(</sym><def></def><str>'Tak(3.0,2.0,1.0): '</str><def></def><sym>,</sym> <def></def><kwd>TakFP</kwd><def></def><sym>(</sym><def></def><num>3.0</num><def></def><sym>,</sym><def></def><num>2.0</num><def></def><sym>,</sym><def></def><num>1.0</num><def></def><sym>):</sym><def></def><num>1</num><def></def><sym>:</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def></def><kwa>end</kwa><def></def><sym>.</sym><def></def><br />
</source>
