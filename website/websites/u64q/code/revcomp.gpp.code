<source>
<def></def><com>/* ------------------------------------------------------------------ */</com><def></def><br />
<com>/* The Computer Language Shootout                               */</com><def></def><br />
<com>/* http://shootout.alioth.debian.org/                                 */</com><def></def><br />
<com>/*                                                                    */</com><def></def><br />
<com>/* Contributed by Anthony Borla                                       */</com><def></def><br />
<com>/* Modified by Vaclav Haisman                                         */</com><def></def><br />
<com>/* Changed to match style of Perl example: Greg Buchholz              */</com><def></def><br />
<com>/* ------------------------------------------------------------------ */</com><def></def><br />
<br />
<dir>#include &lt;cctype&gt;</dir><br />
<def></def><dir>#include &lt;string&gt;</dir><br />
<def></def><dir>#include &lt;algorithm&gt;</dir><br />
<def></def><dir>#include &lt;iterator&gt;</dir><br />
<def></def><dir>#include &lt;iostream&gt;</dir><br />
<def></def><kwa>using namespace</kwa> <def>std</def><sym>;</sym><br />
<def></def><br />
<kwb>const int</kwb> <def>LINELENGTH</def> <sym>=</sym> <def></def><num>60</num><def></def><sym>;</sym><br />
<def></def><br />
<kwc>typedef</kwc> <def>string Header</def><sym>;</sym><br />
<def></def><kwc>typedef</kwc> <def>string Segment</def><sym>;</sym><br />
<def></def><br />
<kwc>inline</kwc> <def></def><kwb>char</kwb> <def></def><kwd>complement</kwd><def></def><sym>(</sym><def></def><kwb>char</kwb> <def>element</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>  <kwb>static const char</kwb> <def>charMap</def><sym>[] =</sym><br />
<def></def>    <sym>{</sym><br />
<def></def>      <str>'T'</str><def></def><sym>,</sym> <def></def><str>'V'</str><def></def><sym>,</sym> <def></def><str>'G'</str><def></def><sym>,</sym> <def></def><str>'H'</str><def></def><sym>,</sym> <def></def><str>'\0'</str><def></def><sym>,</sym> <def></def><str>'\0'</str><def></def><sym>,</sym> <def></def><str>'C'</str><def></def><sym>,</sym> <def></def><str>'D'</str><def></def><sym>,</sym> <def></def><str>'\0'</str><def></def><sym>,</sym> <def></def><str>'\0'</str><def></def><sym>,</sym> <def></def><str>'M'</str><def></def><sym>,</sym> <def></def><str>'\0'</str><def></def><sym>,</sym> <def></def><str>'K'</str><def></def><sym>,</sym><br />
<def></def>      <str>'N'</str><def></def><sym>,</sym> <def></def><str>'\0'</str><def></def><sym>,</sym> <def></def><str>'\0'</str><def></def><sym>,</sym> <def></def><str>'\0'</str><def></def><sym>,</sym> <def></def><str>'Y'</str><def></def><sym>,</sym> <def></def><str>'S'</str><def></def><sym>,</sym> <def></def><str>'A'</str><def></def><sym>,</sym> <def></def><str>'A'</str><def></def><sym>,</sym> <def></def><str>'B'</str><def></def><sym>,</sym> <def></def><str>'W'</str><def></def><sym>,</sym> <def></def><str>'\0'</str><def></def><sym>,</sym> <def></def><str>'R'</str><def></def><sym>,</sym> <def></def><str>'\0'</str><def></def><br />
    <sym>};</sym><br />
<def></def><br />
  <kwa>return</kwa> <def>charMap</def><sym>[</sym><def></def><kwd>toupper</kwd><def></def><sym>(</sym><def>element</def><sym>) -</sym> <def></def><str>'A'</str><def></def><sym>];</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>void</kwb> <def></def><kwd>print_revcomp</kwd><def></def><sym>(</sym><def>Header</def> <kwb>const</kwb><def></def><sym>&amp;</sym> <def>header</def><sym>,</sym> <def>Segment</def> <kwb>const</kwb><def></def><sym>&amp;</sym> <def>seg</def><sym>,</sym> <def>ostream</def><sym>&amp;</sym> <def>out</def> <sym>=</sym> <def>std</def><sym>::</sym><def>cout</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def>    out</def> <sym>&lt;&lt;</sym> <def>header</def> <sym>&lt;&lt;</sym> <def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>;</sym><br />
<def><br />
    Segment</def> <kwd>comp</kwd><def></def><sym>(</sym><def>seg</def><sym>.</sym><def></def><kwd>rbegin</kwd><def></def><sym>(),</sym><def>seg</def><sym>.</sym><def></def><kwd>rend</kwd><def></def><sym>());</sym><br />
<def></def>    <kwd>transform</kwd><def></def><sym>(</sym><def>comp</def><sym>.</sym><def></def><kwd>begin</kwd><def></def><sym>(),</sym><def>comp</def><sym>.</sym><def></def><kwd>end</kwd><def></def><sym>(),</sym> <def>comp</def><sym>.</sym><def></def><kwd>begin</kwd><def></def><sym>(),</sym> <def>complement</def><sym>);</sym><br />
<def></def><br />
    <kwb>size_t</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>    <kwb>size_t</kwb> <def>stop</def> <sym>=</sym> <def>comp</def><sym>.</sym><def></def><kwd>length</kwd><def></def><sym>()/</sym><def>LINELENGTH</def> <sym>+ ((</sym><def>comp</def><sym>.</sym><def></def><kwd>length</kwd><def></def><sym>()%</sym><def>LINELENGTH</def><sym>)</sym><def>?</def><num>1</num><def></def><sym>:</sym><def></def><num>0</num><def></def><sym>);</sym><br />
<def></def><br />
    <kwa>while</kwa><def></def><sym>(</sym><def>i</def> <sym>&lt;</sym> <def>stop</def><sym>)</sym><br />
<def>        out</def> <sym>&lt;&lt;</sym> <def>comp</def><sym>.</sym><def></def><kwd>substr</kwd><def></def><sym>(</sym><def>i</def><sym>++*</sym><def>LINELENGTH</def><sym>,</sym><def>LINELENGTH</def><sym>) &lt;&lt;</sym> <def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>int</kwb> <def></def><kwd>main</kwd> <def></def><sym>()</sym><br />
<def></def><sym>{</sym><br />
<def>  ios_base</def><sym>::</sym><def></def><kwd>sync_with_stdio</kwd><def></def><sym>(</sym><def></def><kwa>false</kwa><def></def><sym>);</sym><br />
<def><br />
  Segment line</def><sym>,</sym> <def>segment</def><sym>;</sym><br />
<def>  Header header</def><sym>;</sym><br />
<def></def><br />
  <kwa>while</kwa> <def></def><sym>(</sym><def></def><kwd>getline</kwd><def></def><sym>(</sym><def>cin</def><sym>,</sym> <def>line</def><sym>))</sym><br />
<def></def>  <sym>{</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>line</def><sym>[</sym><def></def><num>0</num><def></def><sym>] ==</sym> <def></def><str>'&gt;'</str><def></def><sym>)</sym><br />
<def></def>      <sym>{</sym><br />
<def></def>          <kwa>if</kwa> <def></def><sym>(!</sym> <def>segment</def><sym>.</sym><def></def><kwd>empty</kwd><def></def><sym>())</sym><br />
<def></def>            <kwd>print_revcomp</kwd><def></def><sym>(</sym><def>header</def><sym>,</sym> <def>segment</def><sym>);</sym><br />
<def>          header</def> <sym>=</sym> <def>line</def><sym>;</sym><br />
<def>          segment</def><sym>.</sym><def></def><kwd>clear</kwd><def></def><sym>();</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>      <kwa>else</kwa><br />
<def>          segment</def> <sym>+=</sym> <def>line</def><sym>;</sym><br />
<def></def>  <sym>}</sym><br />
<def></def>  <kwd>print_revcomp</kwd><def></def><sym>(</sym><def>header</def><sym>,</sym> <def>segment</def><sym>);</sym><br />
<def></def><br />
  <kwa>return</kwa> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
</source>
