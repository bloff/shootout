<source>
<def></def><com>/*</com><br />
<com>	The Computer Language Shootout</com><br />
<com>	http://shootout.alioth.debian.org/</com><br />
<com></com><br />
<com>	contributed by Jochen Hinrichsen</com><br />
<com>*/</com><def><br />
<br />
def</def> <kwd>approximate</kwd><def></def><sym>(</sym><def>n</def><sym>) {</sym><br />
<def></def>    <slc>// create unit vector</slc><br />
<def>	def u</def> <sym>= [</sym><def></def><num>1.0</num><def>D</def><sym>] *</sym> <def>n</def><br />
<br />
    <slc>// 20 steps of the power method</slc><br />
<def>	def v</def> <sym>= [</sym><def></def><num>0.0</num><def>D</def><sym>] *</sym> <def>n</def><br />
<br />
    <kwa>for</kwa> <def></def><sym>(</sym><def>i in</def> <num>1</num><def></def><sym>.</sym><def></def><num>.10</num><def></def><sym>) {</sym><br />
<def></def>        <kwd>MultiplyAtAv</kwd><def></def><sym>(</sym><def>n</def><sym>,</sym><def>u</def><sym>,</sym><def>v</def><sym>)</sym><br />
<def></def>        <kwd>MultiplyAtAv</kwd><def></def><sym>(</sym><def>n</def><sym>,</sym><def>v</def><sym>,</sym><def>u</def><sym>)</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <slc>// B=AtA         A multiplied by A transposed</slc><br />
<def></def>    <slc>// v.Bv /(v.v)   eigenvalue of v</slc><br />
<def></def>    <kwb>double</kwb> <def>vBv</def> <sym>=</sym> <def>vv</def> <sym>=</sym> <def></def><num>0.0</num><def>D</def><br />
    <kwa>for</kwa> <def></def><sym>(</sym><def>i in</def> <num>0</num><def></def><sym>..&lt;</sym><def>n</def><sym>) {</sym><br />
<def>        vBv</def> <sym>+=</sym> <def>u</def><sym>[</sym><def>i</def><sym>]*</sym><def>v</def><sym>[</sym><def>i</def><sym>]</sym><br />
<def>        vv</def>  <sym>+=</sym> <def>v</def><sym>[</sym><def>i</def><sym>]*</sym><def>v</def><sym>[</sym><def>i</def><sym>]</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <kwa>return</kwa> <def></def><kwc>Math</kwc><def></def><sym>.</sym><def></def><kwd>sqrt</kwd><def></def><sym>(</sym><def>vBv</def><sym>/</sym><def>vv</def><sym>)</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<br />
<com>/* return element i,j of infinite matrix A */</com><def><br />
def</def> <kwd>A</kwd><def></def><sym>(</sym><def>i</def><sym>,</sym> <def>j</def><sym>) {</sym><br />
<def></def>    <kwa>return</kwa> <def></def><sym>(</sym><def></def><num>1.0</num><def>D</def><sym>) / ((</sym><def>i</def><sym>+</sym><def>j</def><sym>)*(</sym><def>i</def><sym>+</sym><def>j</def><sym>+(</sym><def></def><num>1.0</num><def>D</def><sym>))/(</sym><def></def><num>2.0</num><def>D</def><sym>) +</sym><def>i</def><sym>+(</sym><def></def><num>1.0</num><def>D</def><sym>))</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<com>/* multiply vector v by matrix A */</com><def><br />
def</def> <kwd>MultiplyAv</kwd><def></def><sym>(</sym><def>n</def><sym>,</sym> <def>v</def><sym>,</sym> <def>Av</def><sym>){</sym><br />
<def></def>    <kwa>for</kwa> <def></def><sym>(</sym><def>i in</def> <num>0</num><def></def><sym>..&lt;</sym><def>n</def><sym>) {</sym><br />
<def>        Av</def><sym>[</sym><def>i</def><sym>] =</sym> <def></def><num>0.0</num><def>D</def><br />
        <kwa>for</kwa> <def></def><sym>(</sym><def>j in</def> <num>0</num><def></def><sym>..&lt;</sym><def>n</def><sym>)</sym> <def>Av</def><sym>[</sym><def>i</def><sym>] +=</sym> <def></def><kwd>A</kwd><def></def><sym>(</sym><def>i</def><sym>,</sym><def>j</def><sym>)*</sym><def>v</def><sym>[</sym><def>j</def><sym>]</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<com>/* multiply vector v by matrix A transposed */</com><def><br />
def</def> <kwd>MultiplyAtv</kwd><def></def><sym>(</sym><def>n</def><sym>,</sym> <def>v</def><sym>,</sym> <def>Atv</def><sym>){</sym><br />
<def></def>    <kwa>for</kwa> <def></def><sym>(</sym><def>i in</def> <num>0</num><def></def><sym>..&lt;</sym><def>n</def><sym>) {</sym><br />
<def>        Atv</def><sym>[</sym><def>i</def><sym>] =</sym> <def></def><num>0.0</num><def>D</def><br />
        <kwa>for</kwa> <def></def><sym>(</sym><def>j in</def> <num>0</num><def></def><sym>..&lt;</sym><def>n</def><sym>)</sym> <def>Atv</def><sym>[</sym><def>i</def><sym>] +=</sym> <def></def><kwd>A</kwd><def></def><sym>(</sym><def>j</def><sym>,</sym><def>i</def><sym>)*</sym><def>v</def><sym>[</sym><def>j</def><sym>]</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<com>/* multiply vector v by matrix A and then by matrix A transposed */</com><def><br />
def</def> <kwd>MultiplyAtAv</kwd><def></def><sym>(</sym><def>n</def><sym>,</sym> <def>v</def><sym>,</sym> <def>AtAv</def><sym>){</sym><br />
<def></def>    <kwb>double</kwb><def></def><sym>[]</sym> <def>u</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwb>double</kwb><def></def><sym>[</sym><def>n</def><sym>]</sym><br />
<def></def>    <kwd>MultiplyAv</kwd><def></def><sym>(</sym><def>n</def><sym>,</sym> <def>v</def><sym>,</sym> <def>u</def><sym>)</sym><br />
<def></def>    <kwd>MultiplyAtv</kwd><def></def><sym>(</sym><def>n</def><sym>,</sym> <def>u</def><sym>,</sym> <def>AtAv</def><sym>)</sym><br />
<def></def><sym>}</sym><br />
<def><br />
def n</def> <sym>= (</sym><def>args</def><sym>.</sym><def>length</def> <sym>==</sym> <def></def><num>0</num> <def>?</def> <num>100</num> <def></def><sym>:</sym> <def>args</def><sym>[</sym><def></def><num>0</num><def></def><sym>].</sym><def></def><kwd>toInteger</kwd><def></def><sym>())</sym><br />
<def>def nf</def> <sym>=</sym> <def>java</def><sym>.</sym><def>text</def><sym>.</sym><def></def><kwc>NumberFormat</kwc><def></def><sym>.</sym><def></def><kwd>getInstance</kwd><def></def><sym>()</sym><br />
<def>nf</def><sym>.</sym><def></def><kwd>setMaximumFractionDigits</kwd><def></def><sym>(</sym><def></def><num>9</num><def></def><sym>)</sym><br />
<def>nf</def><sym>.</sym><def></def><kwd>setMinimumFractionDigits</kwd><def></def><sym>(</sym><def></def><num>9</num><def></def><sym>)</sym><br />
<def>nf</def><sym>.</sym><def></def><kwd>setGroupingUsed</kwd><def></def><sym>(</sym><def>false</def><sym>)</sym><br />
<def></def><kwd>println</kwd><def></def><sym>(</sym><def>nf</def><sym>.</sym><def></def><kwd>format</kwd><def></def><sym>(</sym><def></def><kwd>approximate</kwd><def></def><sym>(</sym><def>n</def><sym>)))</sym><br />
<def></def><br />
<slc>// EOF</slc><br />
<def></def><br />
</source>
