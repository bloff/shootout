<source>
<def></def><slc>-----------------------------------------------------------------------</slc><br />
<def></def><slc>-- The Computer Language Shootout</slc><br />
<def></def><slc>-- http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>--</slc><br />
<def></def><slc>-- contributed by Jim Rogers</slc><br />
<def></def><slc>-- modified by Björn Persson</slc><br />
<def></def><slc>-----------------------------------------------------------------------</slc><br />
<def></def><kwa>with</kwa> <def>Ada.Text_Io</def><sym>;</sym><br />
<def></def><kwa>use</kwa> <def>Ada.Text_Io</def><sym>;</sym><br />
<def></def><kwa>with</kwa> <def>Ada.Integer_Text_Io</def><sym>;</sym><br />
<def></def><kwa>use</kwa> <def>Ada.Integer_Text_Io</def><sym>;</sym><br />
<def></def><kwa>with</kwa> <def>Ada.Strings.Unbounded</def><sym>;</sym><br />
<def></def><kwa>use</kwa> <def>Ada.Strings.Unbounded</def><sym>;</sym><br />
<def></def><kwa>with</kwa> <def>Gnat.Regpat</def><sym>;</sym><br />
<def></def><kwa>use</kwa> <def>Gnat.Regpat</def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def>Regexdna</def> <kwa>is</kwa><br />
<def></def><br />
   <kwa>type</kwa> <def>Sequence_Lines</def> <kwa>is array</kwa> <def></def><sym>(</sym><def></def><kwb>Positive</kwb> <def></def><kwa>range</kwa> <def></def><sym>&lt;&gt;)</sym> <def></def><kwa>of</kwa> <def>Unbounded_String</def><sym>;</sym><br />
<def></def>   <kwa>function</kwa> <def>Length</def> <sym>(</sym><br />
<def>         Item</def> <sym>:</sym> <def></def><kwa>in</kwa>     <def>Sequence_Lines</def><sym>)</sym><br />
<def></def>     <kwa>return</kwa> <def></def><kwb>Natural</kwb> <def></def><kwa>is</kwa><br />
<def>      Sum</def> <sym>:</sym> <def></def><kwb>Natural</kwb> <def></def><sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>   <kwa>begin</kwa><br />
<def></def>      <kwa>for</kwa> <def>I</def> <kwa>in</kwa> <def>Item</def><sym>'</sym><def></def><kwa>range loop</kwa><br />
<def>         Sum</def> <sym>:=</sym> <def>Sum</def> <sym>+</sym> <def>Length</def><sym>(</sym><def>Item</def><sym>(</sym><def>I</def><sym>));</sym><br />
<def></def>      <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def></def>      <kwa>return</kwa> <def>Sum</def><sym>;</sym><br />
<def></def>   <kwa>end</kwa> <def>Length</def><sym>;</sym><br />
<def><br />
   Variants</def> <sym>:</sym> <def></def><kwa>constant</kwa><br />
<def></def>   <kwa>array</kwa> <def></def><sym>(</sym><def></def><kwb>Natural</kwb> <def></def><kwa>range</kwa> <def></def><sym>&lt;&gt;)</sym> <def></def><kwa>of</kwa> <def>Unbounded_String</def> <sym>:= (</sym><br />
<def>      To_Unbounded_String</def><sym>(</sym><def></def><str>&quot;agggtaaa|tttaccct&quot;</str><def></def><sym>),</sym><br />
<def>      To_Unbounded_String</def><sym>(</sym><def></def><str>&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</str><def></def><sym>),</sym><br />
<def>      To_Unbounded_String</def><sym>(</sym><def></def><str>&quot;a[act]ggtaaa|tttacc[agt]t&quot;</str><def></def><sym>),</sym><br />
<def>      To_Unbounded_String</def><sym>(</sym><def></def><str>&quot;ag[act]gtaaa|tttac[agt]ct&quot;</str><def></def><sym>),</sym><br />
<def>      To_Unbounded_String</def><sym>(</sym><def></def><str>&quot;agg[act]taaa|ttta[agt]cct&quot;</str><def></def><sym>),</sym><br />
<def>      To_Unbounded_String</def><sym>(</sym><def></def><str>&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</str><def></def><sym>),</sym><br />
<def>      To_Unbounded_String</def><sym>(</sym><def></def><str>&quot;agggt[cgt]aa|tt[acg]accct&quot;</str><def></def><sym>),</sym><br />
<def>      To_Unbounded_String</def><sym>(</sym><def></def><str>&quot;agggta[cgt]a|t[acg]taccct&quot;</str><def></def><sym>),</sym><br />
<def>      To_Unbounded_String</def><sym>(</sym><def></def><str>&quot;agggtaa[cgt]|[acg]ttaccct&quot;</str><def></def><sym>));</sym><br />
<def>   Count</def> <sym>:</sym> <def></def><kwb>Natural</kwb><def></def><sym>;</sym><br />
<def></def><br />
   <kwa>type</kwa> <def>Iub</def> <kwa>is</kwa><br />
<def></def>      <kwa>record</kwa><br />
<def>         Code</def>         <sym>:</sym> <def>Unbounded_String</def><sym>;</sym><br />
<def>         Alternatives</def> <sym>:</sym> <def>Unbounded_String</def><sym>;</sym><br />
<def></def>   <kwa>end record</kwa><def></def><sym>;</sym><br />
<def></def>   <kwa>subtype</kwa> <def>Codes_Index</def> <kwa>is</kwa> <def></def><kwb>Natural</kwb> <def></def><kwa>range</kwa> <def></def><num>0</num><def>.</def><num>.10</num><def></def><sym>;</sym><br />
<def></def>   <kwa>type</kwa> <def>Codes_Array</def> <kwa>is array</kwa> <def></def><sym>(</sym><def>Codes_Index</def><sym>)</sym> <def></def><kwa>of</kwa> <def>Iub</def><sym>;</sym><br />
<def>   Codes</def> <sym>:</sym> <def></def><kwa>constant</kwa> <def>Codes_Array</def> <sym>:= (</sym><br />
<def></def>      <sym>(</sym><def>To_Unbounded_String</def> <sym>(</sym><def></def><str>&quot;B&quot;</str><def></def><sym>),</sym> <def>To_Unbounded_String</def> <sym>(</sym><def></def><str>&quot;(c|g|t)&quot;</str><def></def><sym>)),</sym><br />
<def></def>      <sym>(</sym><def>To_Unbounded_String</def> <sym>(</sym><def></def><str>&quot;D&quot;</str><def></def><sym>),</sym> <def>To_Unbounded_String</def> <sym>(</sym><def></def><str>&quot;(a|g|t)&quot;</str><def></def><sym>)),</sym><br />
<def></def>      <sym>(</sym><def>To_Unbounded_String</def> <sym>(</sym><def></def><str>&quot;H&quot;</str><def></def><sym>),</sym> <def>To_Unbounded_String</def> <sym>(</sym><def></def><str>&quot;(a|c|t)&quot;</str><def></def><sym>)),</sym><br />
<def></def>      <sym>(</sym><def>To_Unbounded_String</def> <sym>(</sym><def></def><str>&quot;K&quot;</str><def></def><sym>),</sym> <def>To_Unbounded_String</def> <sym>(</sym><def></def><str>&quot;(g|t)&quot;</str><def></def><sym>)),</sym><br />
<def></def>      <sym>(</sym><def>To_Unbounded_String</def> <sym>(</sym><def></def><str>&quot;M&quot;</str><def></def><sym>),</sym> <def>To_Unbounded_String</def> <sym>(</sym><def></def><str>&quot;(a|c)&quot;</str><def></def><sym>)),</sym><br />
<def></def>      <sym>(</sym><def>To_Unbounded_String</def> <sym>(</sym><def></def><str>&quot;N&quot;</str><def></def><sym>),</sym> <def>To_Unbounded_String</def> <sym>(</sym><def></def><str>&quot;(a|c|g|t)&quot;</str><def></def><sym>)),</sym><br />
<def></def>      <sym>(</sym><def>To_Unbounded_String</def> <sym>(</sym><def></def><str>&quot;R&quot;</str><def></def><sym>),</sym> <def>To_Unbounded_String</def> <sym>(</sym><def></def><str>&quot;(a|g)&quot;</str><def></def><sym>)),</sym><br />
<def></def>      <sym>(</sym><def>To_Unbounded_String</def> <sym>(</sym><def></def><str>&quot;S&quot;</str><def></def><sym>),</sym> <def>To_Unbounded_String</def> <sym>(</sym><def></def><str>&quot;(c|g)&quot;</str><def></def><sym>)),</sym><br />
<def></def>      <sym>(</sym><def>To_Unbounded_String</def> <sym>(</sym><def></def><str>&quot;V&quot;</str><def></def><sym>),</sym> <def>To_Unbounded_String</def> <sym>(</sym><def></def><str>&quot;(a|c|g)&quot;</str><def></def><sym>)),</sym><br />
<def></def>      <sym>(</sym><def>To_Unbounded_String</def> <sym>(</sym><def></def><str>&quot;W&quot;</str><def></def><sym>),</sym> <def>To_Unbounded_String</def> <sym>(</sym><def></def><str>&quot;(a|t)&quot;</str><def></def><sym>)),</sym><br />
<def></def>      <sym>(</sym><def>To_Unbounded_String</def> <sym>(</sym><def></def><str>&quot;Y&quot;</str><def></def><sym>),</sym> <def>To_Unbounded_String</def> <sym>(</sym><def></def><str>&quot;(c|t)&quot;</str><def></def><sym>)));</sym><br />
<def></def><br />
   <kwa>type</kwa> <def>Matcher_Array</def> <kwa>is array</kwa><def></def><sym>(</sym><def>Codes_Index</def><sym>)</sym> <def></def><kwa>of</kwa> <def>Pattern_Matcher</def><sym>(</sym><def></def><num>1024</num><def></def><sym>);</sym><br />
<def>   Compiled_Codes</def> <sym>:</sym> <def>Matcher_Array</def><sym>;</sym><br />
<def><br />
   Sequence</def>       <sym>:</sym> <def>Sequence_Lines</def> <sym>(</sym><def></def><num>1</num> <def>..</def> <num>1</num><def>_000_000</def><sym>) := (</sym><def></def><kwa>others</kwa> <def></def><sym>=&gt;</sym> <def>Null_Unbounded_String</def><sym>);</sym><br />
<def>   Continuous</def>     <sym>:</sym> <def>Unbounded_String</def><sym>;</sym><br />
<def>   Initial_Length</def> <sym>:</sym> <def></def><kwb>Natural</kwb><def></def><sym>;</sym><br />
<def>   Line_Length</def>    <sym>:</sym> <def></def><kwb>Natural</kwb><def></def><sym>;</sym><br />
<def>   Line</def>           <sym>:</sym> <def></def><kwb>String</kwb> <def></def><sym>(</sym><def></def><num>1</num> <def>..</def> <num>80</num><def></def><sym>);</sym><br />
<def>   Num_Lines</def>      <sym>:</sym> <def></def><kwb>Natural</kwb> <def></def><sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>   R</def>              <sym>:</sym> <def>Pattern_Matcher</def> <sym>(</sym><def></def><num>1024</num><def></def><sym>);</sym><br />
<def>   Code_Length</def>    <sym>:</sym> <def></def><kwb>Natural</kwb><def></def><sym>;</sym><br />
<def>   Position</def>       <sym>:</sym> <def></def><kwb>Natural</kwb><def></def><sym>;</sym><br />
<def></def><kwa>begin</kwa><br />
<def></def>   <slc>-- Read FASTA Sequence</slc><br />
<def></def>   <kwa>while not</kwa> <def>End_Of_File</def> <kwa>loop</kwa><br />
<def>      Ada.Text_Io.Get_Line</def><sym>(</sym><br />
<def>         Item</def> <sym>=&gt;</sym> <def>Line</def><sym>,</sym><br />
<def>         Last</def> <sym>=&gt;</sym> <def>Line_Length</def><sym>);</sym><br />
<def>      Num_Lines</def> <sym>:=</sym> <def>Num_Lines</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def>      Append</def><sym>(</sym><br />
<def>         Source</def>   <sym>=&gt;</sym> <def>Sequence</def> <sym>(</sym><def>Num_Lines</def><sym>),</sym><br />
<def>         New_Item</def> <sym>=&gt;</sym> <def>Line</def> <sym>(</sym><def></def><num>1</num> <def>.. Line_Length</def><sym>));</sym><br />
<def></def>   <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def>   Initial_Length</def> <sym>:=</sym> <def>Length</def><sym>(</sym><def>Sequence</def><sym>(</sym><def></def><num>1</num><def>..Num_Lines</def><sym>)) +</sym> <def>Num_Lines</def><sym>;</sym><br />
<def></def><br />
   <slc>-- remove FASTA descriptions</slc><br />
<def>   Compile</def><sym>(</sym><br />
<def>      Matcher</def>    <sym>=&gt;</sym> <def>R</def><sym>,</sym><br />
<def>      Expression</def> <sym>=&gt;</sym> <def></def><str>&quot;&gt;.*&quot;</str><def></def><sym>,</sym><br />
<def>      Flags</def>      <sym>=&gt;</sym> <def>Case_Insensitive</def><sym>);</sym><br />
<def></def>   <kwa>for</kwa> <def>I</def> <kwa>in</kwa> <def></def><num>1</num><def>..Num_Lines</def> <kwa>loop</kwa><br />
<def></def>      <kwa>if</kwa> <def>Match</def><sym>(</sym><def>R</def><sym>,</sym> <def>To_String</def><sym>(</sym><def>Sequence</def><sym>(</sym><def>I</def><sym>)))</sym> <def></def><kwa>then</kwa><br />
<def>         Sequence</def><sym>(</sym><def>I</def><sym>) :=</sym> <def>Null_Unbounded_String</def><sym>;</sym><br />
<def></def>      <kwa>end if</kwa><def></def><sym>;</sym><br />
<def>      Append</def><sym>(</sym><br />
<def>         Source</def>   <sym>=&gt;</sym> <def>Continuous</def><sym>,</sym><br />
<def>         New_Item</def> <sym>=&gt;</sym> <def>Sequence</def> <sym>(</sym><def>I</def><sym>));</sym><br />
<def></def>   <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def>   Code_Length</def> <sym>:=</sym> <def>Length</def><sym>(</sym><def>Sequence</def><sym>);</sym><br />
<def></def><br />
   <kwa>declare</kwa><br />
<def>      Fixed_Sequence</def> <sym>:</sym> <def></def><kwb>String</kwb> <def></def><sym>:=</sym> <def>To_String</def><sym>(</sym><def>Continuous</def><sym>);</sym><br />
<def></def>   <kwa>begin</kwa><br />
<def></def>      <slc>-- regex match</slc><br />
<def></def>      <kwa>for</kwa> <def>I</def> <kwa>in</kwa> <def>Variants</def><sym>'</sym><def></def><kwa>range loop</kwa><br />
<def>         Count</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>         Position</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>         Compile</def><sym>(</sym><br />
<def>            Matcher</def>    <sym>=&gt;</sym> <def>R</def><sym>,</sym><br />
<def>            Expression</def> <sym>=&gt;</sym> <def>To_String</def> <sym>(</sym><def>Variants</def> <sym>(</sym><def>I</def><sym>)),</sym><br />
<def>            Flags</def>      <sym>=&gt;</sym> <def>Case_Insensitive</def><sym>);</sym><br />
<def></def>         <kwa>loop</kwa><br />
<def>            Position</def> <sym>:=</sym> <def>Match</def><sym>(</sym><br />
<def>               Self</def>       <sym>=&gt;</sym> <def>R</def><sym>,</sym><br />
<def>               Data</def>       <sym>=&gt;</sym> <def>Fixed_Sequence</def><sym>,</sym><br />
<def>               Data_First</def> <sym>=&gt;</sym> <def>Position</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>            <kwa>exit when</kwa> <def>Position</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>            Count</def> <sym>:=</sym> <def>Count</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>         <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def>         Put</def><sym>(</sym><def>To_String</def><sym>(</sym><def>Variants</def><sym>(</sym><def>I</def><sym>) &amp;</sym> <def></def><str>&quot; &quot;</str><def></def><sym>));</sym><br />
<def>         Put</def><sym>(</sym><br />
<def>            Item</def>  <sym>=&gt;</sym> <def>Count</def><sym>,</sym><br />
<def>            Width</def> <sym>=&gt;</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def>         New_Line</def><sym>;</sym><br />
<def></def>      <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def></def>   <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
   <slc>-- regex substitution</slc><br />
<def></def>   <kwa>for</kwa> <def>I</def> <kwa>in</kwa> <def>Codes_Index</def> <kwa>loop</kwa><br />
<def>      Compile</def><sym>(</sym><def>Matcher</def> <sym>=&gt;</sym> <def>Compiled_Codes</def><sym>(</sym><def>I</def><sym>),</sym><br />
<def>         Expression</def> <sym>=&gt;</sym> <def>To_String</def><sym>(</sym><def>Codes</def><sym>(</sym><def>I</def><sym>)</sym><def>.Code</def><sym>),</sym><br />
<def>         Flags</def> <sym>=&gt;</sym> <def>No_Flags</def><sym>);</sym><br />
<def></def>   <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def><br />
   Continuous</def> <sym>:=</sym> <def>Null_Unbounded_String</def><sym>;</sym><br />
<def></def><br />
   <kwa>for</kwa> <def>J</def> <kwa>in</kwa> <def></def><num>1</num><def>..Num_Lines</def> <kwa>loop</kwa><br />
<def></def>      <kwa>for</kwa> <def>I</def> <kwa>in</kwa> <def>Codes_Index</def><sym>'</sym><def></def><kwa>range loop</kwa><br />
<def>         Position</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>         <kwa>loop</kwa><br />
<def>            Position</def> <sym>:=</sym> <def>Match</def><sym>(</sym><br />
<def>               Self</def>       <sym>=&gt;</sym> <def>Compiled_Codes</def><sym>(</sym><def>I</def><sym>),</sym><br />
<def>               Data</def>       <sym>=&gt;</sym> <def>To_String</def> <sym>(</sym><def>Sequence</def><sym>(</sym><def>J</def><sym>)),</sym><br />
<def>               Data_First</def> <sym>=&gt;</sym> <def>Position</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>            <kwa>exit when</kwa> <def>Position</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>            Replace_Slice</def><sym>(</sym><br />
<def>               Source</def> <sym>=&gt;</sym> <def>Sequence</def><sym>(</sym><def>J</def><sym>),</sym><br />
<def>               Low</def>    <sym>=&gt;</sym> <def>Position</def><sym>,</sym><br />
<def>               High</def>   <sym>=&gt;</sym> <def>Position</def><sym>,</sym><br />
<def>               By</def>     <sym>=&gt;</sym> <def>To_String</def><sym>(</sym><def>Codes</def><sym>(</sym><def>I</def><sym>)</sym><def>.Alternatives</def><sym>));</sym><br />
<def></def>         <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def></def>      <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def>      Append</def><sym>(</sym><def>Source</def> <sym>=&gt;</sym> <def>Continuous</def><sym>,</sym> <def>New_Item</def> <sym>=&gt;</sym> <def>Sequence</def><sym>(</sym><def>J</def><sym>));</sym><br />
<def></def>   <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def><br />
   New_Line</def><sym>;</sym><br />
<def>   Put</def><sym>(</sym><br />
<def>      Item</def>  <sym>=&gt;</sym> <def>Initial_Length</def><sym>,</sym><br />
<def>      Width</def> <sym>=&gt;</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def>   New_Line</def><sym>;</sym><br />
<def>   Put</def><sym>(</sym><br />
<def>      Item</def>  <sym>=&gt;</sym> <def>Code_Length</def><sym>,</sym><br />
<def>      Width</def> <sym>=&gt;</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def>   New_Line</def><sym>;</sym><br />
<def>   Put</def><sym>(</sym><br />
<def>      Item</def>  <sym>=&gt;</sym> <def>Length</def> <sym>(</sym><def>Continuous</def><sym>),</sym><br />
<def>      Width</def> <sym>=&gt;</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def></def><kwa>end</kwa> <def>Regexdna</def><sym>;</sym><def></def><br />
</source>
