<source>
<def></def><com>/* The Computer Language Shootout</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com>   contributed by Isaac Gouy</com><br />
<com>*/</com><def></def><br />
<br />
<kwa>import</kwa> <def>Include</def><sym>;</sym><br />
<def></def><br />
<kwb>void</kwb> <def>main</def><sym>(</sym><def>String</def><sym>[]</sym> <def>args</def><sym>){</sym><br />
<def></def>   <kwa>let</kwa> <def>n</def> <sym>=</sym> <def>Integer</def><sym>.</sym><def>parseInt</def><sym>(</sym><def>args</def><sym>[</sym><def></def><num>0</num><def></def><sym>]);</sym><br />
<def></def><br />
   <slc>// create unit vector</slc><br />
<def></def>   <kwa>let</kwa> <def>u</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwb>double</kwb><def></def><sym>[</sym><def>n</def><sym>];</sym><br />
<def></def>   <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwa>var</kwa> <def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>i</def><sym>&lt;</sym><def>n</def><sym>;</sym> <def>i</def><sym>++)</sym> <def>u</def><sym>[</sym><def>i</def><sym>] =</sym>  <def></def><num>1.0</num><def></def><sym>;</sym><br />
<def></def><br />
   <slc>// 20 steps of the power method</slc><br />
<def></def>   <kwa>let</kwa> <def>v</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwb>double</kwb><def></def><sym>[</sym><def>n</def><sym>];</sym><br />
<def></def>   <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwa>var</kwa> <def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>i</def><sym>&lt;</sym><def></def><num>10</num><def></def><sym>;</sym> <def>i</def><sym>++) {</sym><br />
<def>      MultiplyAtAv</def><sym>(</sym><def>n</def><sym>,</sym><def>u</def><sym>,</sym><def>v</def><sym>);</sym><br />
<def>      MultiplyAtAv</def><sym>(</sym><def>n</def><sym>,</sym><def>v</def><sym>,</sym><def>u</def><sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <slc>// B=AtA         A multiplied by A transposed</slc><br />
<def></def>   <slc>// v.Bv /(v.v)   eigenvalue of v</slc><br />
<def></def>   <kwa>var</kwa> <def>vBv</def> <sym>=</sym> <def></def><num>0.0</num><def></def><sym>,</sym> <def>vv</def> <sym>=</sym> <def></def><num>0.0</num><def></def><sym>;</sym><br />
<def></def>   <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwa>var</kwa> <def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>i</def><sym>&lt;</sym><def>n</def><sym>;</sym> <def>i</def><sym>++) {</sym><br />
<def>      vBv</def> <sym>+=</sym> <def>u</def><sym>[</sym><def>i</def><sym>]*</sym><def>v</def><sym>[</sym><def>i</def><sym>];</sym><br />
<def>      vv</def>  <sym>+=</sym> <def>v</def><sym>[</sym><def>i</def><sym>]*</sym><def>v</def><sym>[</sym><def>i</def><sym>];</sym><br />
<def></def>   <sym>}</sym><br />
<def><br />
   println</def><sym>(</sym> <def>Math</def><sym>.</sym><def>sqrt</def><sym>(</sym><def>vBv</def><sym>/</sym><def>vv</def><sym>).</sym><def>toStringWith</def><sym>(</sym><def></def><num>9</num><def></def><sym>) );</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<br />
<com>/* return element i,j of infinite matrix A */</com><def></def><br />
<kwb>double</kwb> <def>A</def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def><sym>,</sym> <def></def><kwb>int</kwb> <def>j</def><sym>){</sym><br />
<def></def>   <kwa>return</kwa> <def></def><num>1.0</num><def></def><sym>/((</sym><def>i</def><sym>+</sym><def>j</def><sym>)*(</sym><def>i</def><sym>+</sym><def>j</def><sym>+</sym><def></def><num>1</num><def></def><sym>) /</sym><def></def><num>2</num> <def></def><sym>+</sym><def>i</def><sym>+</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<com>/* multiply vector v by matrix A */</com><def></def><br />
<kwb>void</kwb> <def>MultiplyAv</def><sym>(</sym><def></def><kwb>int</kwb> <def>n</def><sym>,</sym> <def></def><kwb>double</kwb><def></def><sym>[]</sym> <def>v</def><sym>,</sym> <def></def><kwb>double</kwb><def></def><sym>[]</sym> <def>Av</def><sym>){</sym><br />
<def></def>   <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwa>var</kwa> <def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>i</def><sym>&lt;</sym><def>n</def><sym>;</sym> <def>i</def><sym>++){</sym><br />
<def>      Av</def><sym>[</sym><def>i</def><sym>] =</sym> <def></def><num>0.0</num><def></def><sym>;</sym><br />
<def></def>      <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwa>var</kwa> <def>j</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>j</def><sym>&lt;</sym><def>n</def><sym>;</sym> <def>j</def><sym>++)</sym> <def>Av</def><sym>[</sym><def>i</def><sym>] +=</sym> <def>A</def><sym>(</sym><def>i</def><sym>,</sym><def>j</def><sym>)*</sym><def>v</def><sym>[</sym><def>j</def><sym>];</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<com>/* multiply vector v by matrix A transposed */</com><def></def><br />
<kwb>void</kwb> <def>MultiplyAtv</def><sym>(</sym><def></def><kwb>int</kwb> <def>n</def><sym>,</sym> <def></def><kwb>double</kwb><def></def><sym>[]</sym> <def>v</def><sym>,</sym> <def></def><kwb>double</kwb><def></def><sym>[]</sym> <def>Atv</def><sym>){</sym><br />
<def></def>   <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwa>var</kwa> <def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym><def>i</def><sym>&lt;</sym><def>n</def><sym>;</sym><def>i</def><sym>++){</sym><br />
<def>      Atv</def><sym>[</sym><def>i</def><sym>] =</sym> <def></def><num>0.0</num><def></def><sym>;</sym><br />
<def></def>      <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwa>var</kwa> <def>j</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>j</def><sym>&lt;</sym><def>n</def><sym>;</sym> <def>j</def><sym>++)</sym> <def>Atv</def><sym>[</sym><def>i</def><sym>] +=</sym> <def>A</def><sym>(</sym><def>j</def><sym>,</sym><def>i</def><sym>)*</sym><def>v</def><sym>[</sym><def>j</def><sym>];</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<com>/* multiply vector v by matrix A and then by matrix A transposed */</com><def></def><br />
<kwb>void</kwb> <def>MultiplyAtAv</def><sym>(</sym><def></def><kwb>int</kwb> <def>n</def><sym>,</sym> <def></def><kwb>double</kwb><def></def><sym>[]</sym> <def>v</def><sym>,</sym> <def></def><kwb>double</kwb><def></def><sym>[]</sym> <def>AtAv</def><sym>){</sym><br />
<def></def>   <kwa>let</kwa> <def>u</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwb>double</kwb><def></def><sym>[</sym><def>n</def><sym>];</sym><br />
<def>   MultiplyAv</def><sym>(</sym><def>n</def><sym>,</sym><def>v</def><sym>,</sym><def>u</def><sym>);</sym><br />
<def>   MultiplyAtv</def><sym>(</sym><def>n</def><sym>,</sym><def>u</def><sym>,</sym><def>AtAv</def><sym>);</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
