<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   C program contributed by Heiner Marxen</span>
<span class="hl com">   Transliterated to Java by Amir K aka Razii</span>
<span class="hl com">*/</span>


<span class="hl kwa">public final class</span> fannkuch
<span class="hl sym">{</span>
 <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">)</span>
 <span class="hl sym">{</span>
  <span class="hl kwb">int</span> n <span class="hl sym">=</span> <span class="hl num">11</span><span class="hl sym">;</span>
  <span class="hl kwa">if</span><span class="hl sym">(</span>args<span class="hl sym">.</span>length <span class="hl sym">==</span> <span class="hl num">1</span><span class="hl sym">)</span> n <span class="hl sym">=</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span><span class="hl kwd">parseInt</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>
  <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span><span class="hl str">&quot;Pfannkuchen(&quot;</span> <span class="hl sym">+</span> n <span class="hl sym">+</span> <span class="hl str">&quot;) = &quot;</span> <span class="hl sym">+</span> <span class="hl kwd">fannkuch</span><span class="hl sym">(</span>n<span class="hl sym">));</span>
 <span class="hl sym">}</span>

 <span class="hl kwa">static</span> <span class="hl kwb">int</span> <span class="hl kwd">fannkuch</span><span class="hl sym">(</span><span class="hl kwa">final</span> <span class="hl kwb">int</span> n<span class="hl sym">)</span>
 <span class="hl sym">{</span>
  <span class="hl kwb">int</span><span class="hl sym">[]</span> perm <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">int</span><span class="hl sym">[</span>n<span class="hl sym">];</span>
  <span class="hl kwb">int</span><span class="hl sym">[]</span> perm1 <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">int</span><span class="hl sym">[</span>n<span class="hl sym">];</span>
  <span class="hl kwb">int</span><span class="hl sym">[]</span> count <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">int</span><span class="hl sym">[</span>n<span class="hl sym">];</span>
  <span class="hl kwb">int</span> flips<span class="hl sym">;</span>
  <span class="hl kwb">int</span> flipsMax<span class="hl sym">;</span>
  <span class="hl kwb">int</span> r<span class="hl sym">;</span>
  <span class="hl kwb">int</span> i<span class="hl sym">;</span>
  <span class="hl kwb">int</span> k<span class="hl sym">;</span>
  <span class="hl kwb">int</span> didpr<span class="hl sym">;</span>
  <span class="hl kwa">final</span> <span class="hl kwb">int</span> n1 <span class="hl sym">=</span> n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>
  <span class="hl kwa">if</span><span class="hl sym">(</span> n <span class="hl sym">&lt;</span> <span class="hl num">1</span> <span class="hl sym">)</span> <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>

  <span class="hl kwa">for</span><span class="hl sym">(</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span>i<span class="hl sym">&lt;</span>n<span class="hl sym">;++</span>i <span class="hl sym">)</span> perm1<span class="hl sym">[</span>i<span class="hl sym">] =</span> i<span class="hl sym">;</span>
  <span class="hl com">/* initial (trivial) permu */</span>
  r <span class="hl sym">=</span> n<span class="hl sym">;</span>
  didpr <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
  flipsMax <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
  <span class="hl kwa">for</span><span class="hl sym">(;;)</span>
  <span class="hl sym">{</span>
   <span class="hl kwa">if</span><span class="hl sym">(</span> didpr <span class="hl sym">&lt;</span> <span class="hl num">30</span> <span class="hl sym">)</span>
   <span class="hl sym">{</span>
    <span class="hl kwa">for</span><span class="hl sym">(</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span>i<span class="hl sym">&lt;</span>n<span class="hl sym">;++</span>i <span class="hl sym">)</span> <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">print</span> <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">+</span>perm1<span class="hl sym">[</span>i<span class="hl sym">]);</span>
    <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">print</span><span class="hl sym">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">);</span>
    <span class="hl sym">++</span>didpr<span class="hl sym">;</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">for</span><span class="hl sym">(;</span>r<span class="hl sym">!=</span><span class="hl num">1</span><span class="hl sym">;--</span>r<span class="hl sym">)</span>
   <span class="hl sym">{</span>
    count<span class="hl sym">[</span>r<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">] =</span> r<span class="hl sym">;</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">if</span><span class="hl sym">(!(</span>perm1<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]==</span><span class="hl num">0</span> <span class="hl sym">||</span> perm1<span class="hl sym">[</span>n1<span class="hl sym">]==</span>n1<span class="hl sym">) )</span>
   <span class="hl sym">{</span>
    flips <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl kwa">for</span><span class="hl sym">(</span> i<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">;</span>i<span class="hl sym">&lt;</span>n<span class="hl sym">;++</span>i <span class="hl sym">)</span>
    <span class="hl sym">{</span>
     perm<span class="hl sym">[</span>i<span class="hl sym">] =</span> perm1<span class="hl sym">[</span>i<span class="hl sym">];</span>
    <span class="hl sym">}</span>
    k <span class="hl sym">=</span> perm1<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>

    <span class="hl com">/* cache perm[0] in k */</span>
    <span class="hl kwa">do</span>
    <span class="hl sym">{</span>
     <span class="hl com">/* k!=0 ==&gt; k&gt;0 */</span>
     <span class="hl kwb">int</span> j<span class="hl sym">;</span>
     <span class="hl kwa">for</span><span class="hl sym">(</span> i<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">,</span> j<span class="hl sym">=</span>k<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">;</span>i<span class="hl sym">&lt;</span>j<span class="hl sym">;++</span>i<span class="hl sym">, --</span>j <span class="hl sym">)</span>
     <span class="hl sym">{</span>
      <span class="hl kwb">int</span> t_mp <span class="hl sym">=</span> perm<span class="hl sym">[</span>i<span class="hl sym">];</span>
      perm<span class="hl sym">[</span>i<span class="hl sym">] =</span> perm<span class="hl sym">[</span>j<span class="hl sym">];</span>
      perm<span class="hl sym">[</span>j<span class="hl sym">] =</span> t_mp<span class="hl sym">;</span>
     <span class="hl sym">}</span>
     <span class="hl sym">++</span>flips<span class="hl sym">;</span>
     <span class="hl com">/* * Now exchange k (caching perm[0]) and perm[k] */</span>
     j<span class="hl sym">=</span>perm<span class="hl sym">[</span>k<span class="hl sym">];</span>
     perm<span class="hl sym">[</span>k<span class="hl sym">]=</span>k<span class="hl sym">;</span>
     k<span class="hl sym">=</span>j<span class="hl sym">;</span>
    <span class="hl sym">}</span>
    <span class="hl kwa">while</span><span class="hl sym">(</span>k <span class="hl sym">!=</span> <span class="hl num">0</span><span class="hl sym">);</span>
    <span class="hl kwa">if</span><span class="hl sym">(</span> flipsMax <span class="hl sym">&lt;</span> flips <span class="hl sym">)</span>
    <span class="hl sym">{</span>
     flipsMax <span class="hl sym">=</span> flips<span class="hl sym">;</span>
    <span class="hl sym">}</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">for</span><span class="hl sym">(;;)</span>
   <span class="hl sym">{</span>
    <span class="hl kwa">if</span><span class="hl sym">(</span> r <span class="hl sym">==</span> n <span class="hl sym">)</span>
    <span class="hl sym">{</span>
     <span class="hl kwa">return</span> flipsMax<span class="hl sym">;</span>
    <span class="hl sym">}</span>
    <span class="hl com">/* rotate down perm[0..r] by one */</span>
     <span class="hl kwb">int</span> perm0 <span class="hl sym">=</span> perm1<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
     i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
     <span class="hl kwa">while</span><span class="hl sym">(</span> i <span class="hl sym">&lt;</span> r <span class="hl sym">)</span>
     <span class="hl sym">{</span>
      k <span class="hl sym">=</span> i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">;</span>
      perm1<span class="hl sym">[</span>i<span class="hl sym">] =</span> perm1<span class="hl sym">[</span>k<span class="hl sym">];</span>
      i <span class="hl sym">=</span> k<span class="hl sym">;</span>
     <span class="hl sym">}</span>
     perm1<span class="hl sym">[</span>r<span class="hl sym">] =</span> perm0<span class="hl sym">;</span>

    <span class="hl kwa">if</span><span class="hl sym">( (</span>count<span class="hl sym">[</span>r<span class="hl sym">] -=</span> <span class="hl num">1</span><span class="hl sym">) &gt;</span> <span class="hl num">0</span> <span class="hl sym">)</span>
    <span class="hl sym">{</span>
     <span class="hl kwa">break</span><span class="hl sym">;</span>
    <span class="hl sym">}</span>
    <span class="hl sym">++</span>r<span class="hl sym">;</span>
   <span class="hl sym">}</span>
  <span class="hl sym">}</span>
 <span class="hl sym">}</span>
<span class="hl sym">}</span>
