<source>
<def></def><slc>-----------------------------------------------------------------------</slc><br />
<def></def><slc>-- The Computer Language Shootout</slc><br />
<def></def><slc>-- http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>--</slc><br />
<def></def><slc>-- converted to Ada by Jim Rogers</slc><br />
<def></def><slc>-- compile: gcc -c -gnatwu -O2 -gnatn -funroll-loops -gnatp fannkuch.adb</slc><br />
<def></def><slc>-----------------------------------------------------------------------</slc><br />
<def></def><kwa>with</kwa> <def>Ada.Command_Line</def><sym>;</sym> <def></def><kwa>use</kwa> <def>Ada.Command_Line</def><sym>;</sym><br />
<def></def><kwa>with</kwa> <def>Ada.Text_Io</def><sym>;</sym> <def></def><kwa>use</kwa> <def>Ada.Text_Io</def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def>Fannkuch</def> <kwa>is</kwa><br />
<def></def>   <kwa>package</kwa> <def>Pos_Io</def> <kwa>is new</kwa> <def>Ada.Text_Io.Integer_Io</def><sym>(</sym><def></def><kwb>Positive</kwb><def></def><sym>);</sym><br />
<def></def>   <kwa>use</kwa> <def>Pos_IO</def><sym>;</sym><br />
<def></def>   <kwa>type</kwa> <def>Perm_Array</def> <kwa>is array</kwa><def></def><sym>(</sym><def></def><kwb>Natural</kwb> <def></def><kwa>range</kwa> <def></def><sym>&lt;&gt;)</sym> <def></def><kwa>of</kwa> <def></def><kwb>Natural</kwb><def></def><sym>;</sym><br />
<def></def>   <kwa>procedure</kwa> <def>Swap</def><sym>(</sym><def>A</def><sym>,</sym> <def>B</def> <sym>:</sym> <def></def><kwa>in out</kwa> <def></def><kwb>Natural</kwb><def></def><sym>)</sym> <def></def><kwa>is</kwa><br />
<def>      Temp</def> <sym>:</sym> <def></def><kwb>Natural</kwb> <def></def><sym>:=</sym> <def>A</def><sym>;</sym><br />
<def></def>   <kwa>begin</kwa><br />
<def>      A</def> <sym>:=</sym> <def>B</def><sym>;</sym><br />
<def>      B</def> <sym>:=</sym> <def>Temp</def><sym>;</sym><br />
<def></def>   <kwa>end</kwa> <def>Swap</def><sym>;</sym><br />
<def></def><br />
   <kwa>function</kwa> <def>Fann</def><sym>(</sym><def>N</def> <sym>:</sym> <def></def><kwb>Positive</kwb><def></def><sym>)</sym> <def></def><kwa>return</kwa> <def></def><kwb>Natural</kwb> <def></def><kwa>is</kwa><br />
<def>      M</def>        <sym>:</sym> <def></def><kwb>Natural</kwb> <def></def><sym>:=</sym> <def>N</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def>      Perm</def>     <sym>:</sym> <def>Perm_Array</def><sym>(</sym><def></def><num>0</num><def>..M</def><sym>);</sym><br />
<def>      Perm1</def>    <sym>:</sym> <def>Perm_Array</def><sym>(</sym><def></def><num>0</num><def>..M</def><sym>);</sym><br />
<def>      Count</def>    <sym>:</sym> <def>Perm_Array</def><sym>(</sym><def></def><num>0</num><def>..M</def><sym>);</sym><br />
<def>      Max_Flips_Count</def> <sym>:</sym> <def></def><kwb>Natural</kwb><def></def><sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>      R</def>        <sym>:</sym> <def></def><kwb>Natural</kwb> <def></def><sym>:=</sym> <def>N</def><sym>;</sym><br />
<def>      Check</def>    <sym>:</sym> <def></def><kwb>Natural</kwb> <def></def><sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>   <kwa>begin</kwa><br />
<def></def>      <kwa>for</kwa> <def>I</def> <kwa>in</kwa> <def>Perm1</def><sym>'</sym><def></def><kwa>range loop</kwa><br />
<def>         Perm1</def><sym>(</sym><def>I</def><sym>) :=</sym> <def>I</def><sym>;</sym><br />
<def></def>      <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def></def>      <kwa>loop</kwa><br />
<def></def>         <kwa>if</kwa> <def>Check</def> <sym>&lt;</sym> <def></def><num>30</num> <def></def><kwa>then</kwa><br />
<def></def>            <kwa>for</kwa> <def>I</def> <kwa>in</kwa> <def>Perm1</def><sym>'</sym><def></def><kwa>range loop</kwa><br />
<def>               Put</def><sym>(</sym><def>Item</def> <sym>=&gt;</sym> <def>Perm1</def><sym>(</sym><def>I</def><sym>) +</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>Width</def> <sym>=&gt;</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>            <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def>            New_Line</def><sym>;</sym><br />
<def>            Check</def> <sym>:=</sym> <def>Check</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>         <kwa>end if</kwa><def></def><sym>;</sym><br />
<def></def>         <kwa>while</kwa> <def>R</def> <sym>/=</sym> <def></def><num>1</num> <def></def><kwa>loop</kwa><br />
<def>            Count</def><sym>(</sym><def>R</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>) :=</sym> <def>R</def><sym>;</sym><br />
<def>            R</def> <sym>:=</sym> <def>R</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>         <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def></def>         <kwa>if not</kwa> <def></def><sym>(</sym><def>Perm1</def><sym>(</sym><def></def><num>0</num><def></def><sym>) =</sym> <def></def><num>0</num> <def></def><kwa>or</kwa> <def>Perm1</def><sym>(</sym><def>M</def><sym>) =</sym> <def>M</def><sym>)</sym> <def></def><kwa>then</kwa><br />
<def>            Perm</def> <sym>:=</sym> <def>Perm1</def><sym>;</sym><br />
<def></def>            <kwa>declare</kwa><br />
<def>               Flips_Count</def> <sym>:</sym> <def></def><kwb>Natural</kwb> <def></def><sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>               K</def>           <sym>:</sym> <def></def><kwb>Natural</kwb><def></def><sym>;</sym><br />
<def></def>            <kwa>begin</kwa><br />
<def></def>               <kwa>loop</kwa><br />
<def>                  K</def> <sym>:=</sym> <def>Perm</def><sym>(</sym><def></def><num>0</num><def></def><sym>);</sym><br />
<def></def>                  <kwa>exit when</kwa> <def>K</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>                  <kwa>for</kwa> <def>I</def> <kwa>in</kwa> <def></def><num>0</num><def>..</def><sym>((</sym><def>K</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>)/</sym><def></def><num>2</num> <def></def><sym>-</sym><def></def><num>1</num><def></def><sym>)</sym> <def></def><kwa>loop</kwa><br />
<def>                     Swap</def><sym>(</sym><def>Perm</def><sym>(</sym><def>I</def><sym>),</sym> <def>Perm</def><sym>(</sym><def>K</def> <sym>-</sym> <def>I</def><sym>));</sym><br />
<def></def>                  <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def>                  Flips_Count</def> <sym>:=</sym> <def>Flips_Count</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>               <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def></def>               <kwa>if</kwa> <def>Flips_Count</def> <sym>&gt;</sym> <def>Max_Flips_Count</def> <kwa>then</kwa><br />
<def>                  Max_Flips_Count</def> <sym>:=</sym> <def>Flips_Count</def><sym>;</sym><br />
<def></def>               <kwa>end if</kwa><def></def><sym>;</sym><br />
<def></def>            <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>         <kwa>end if</kwa><def></def><sym>;</sym><br />
<def></def>         <kwa>loop</kwa><br />
<def></def>            <kwa>if</kwa> <def>R</def> <sym>=</sym> <def>N</def> <kwa>then</kwa><br />
<def></def>               <kwa>return</kwa> <def>Max_Flips_Count</def><sym>;</sym><br />
<def></def>            <kwa>end if</kwa><def></def><sym>;</sym><br />
<def></def>            <kwa>declare</kwa><br />
<def>               Perm0</def> <sym>:</sym> <def></def><kwb>Natural</kwb> <def></def><sym>:=</sym> <def>Perm1</def><sym>(</sym><def></def><num>0</num><def></def><sym>);</sym><br />
<def>               J</def> <sym>:</sym> <def></def><kwb>Natural</kwb><def></def><sym>;</sym><br />
<def>               I</def> <sym>:</sym> <def></def><kwb>Natural</kwb> <def></def><sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>            <kwa>begin</kwa><br />
<def></def>               <kwa>while</kwa> <def>I</def> <sym>&lt;</sym> <def>R</def> <kwa>loop</kwa><br />
<def>                  J</def> <sym>:=</sym> <def>I</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def>                  Perm1</def><sym>(</sym><def>I</def><sym>) :=</sym> <def>Perm1</def><sym>(</sym><def>J</def><sym>);</sym><br />
<def>                  I</def> <sym>:=</sym> <def>J</def><sym>;</sym><br />
<def></def>               <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def>               Perm1</def><sym>(</sym><def>r</def><sym>) :=</sym> <def>Perm0</def><sym>;</sym><br />
<def></def>            <kwa>end</kwa><def></def><sym>;</sym><br />
<def>            Count</def><sym>(</sym><def>R</def><sym>) :=</sym> <def>Count</def><sym>(</sym><def>R</def><sym>) -</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>            <kwa>exit when</kwa> <def>Count</def><sym>(</sym><def>R</def><sym>) &gt;</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>            r</def> <sym>:=</sym> <def>R</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>         <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def></def>      <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def></def>   <kwa>end</kwa> <def>Fann</def><sym>;</sym><br />
<def>   Num</def> <sym>:</sym> <def></def><kwb>Positive</kwb> <def></def><sym>:=</sym> <def></def><num>7</num><def></def><sym>;</sym><br />
<def>   Result</def> <sym>:</sym> <def></def><kwb>Positive</kwb><def></def><sym>;</sym><br />
<def></def><kwa>begin</kwa><br />
<def></def>   <kwa>if</kwa> <def>Argument_Count</def> <sym>&gt;</sym> <def></def><num>0</num> <def></def><kwa>then</kwa><br />
<def>      Num</def> <sym>:=</sym> <def></def><kwb>Positive</kwb><def></def><sym>'</sym><def>Value</def><sym>(</sym><def>Argument</def><sym>(</sym><def></def><num>1</num><def></def><sym>));</sym><br />
<def></def>   <kwa>end if</kwa><def></def><sym>;</sym><br />
<def>   Result</def> <sym>:=</sym> <def>Fann</def><sym>(</sym><def>Num</def><sym>);</sym><br />
<def>   Put</def><sym>(</sym><def></def><str>&quot;Pfannkuchen(&quot;</str><def></def> <sym>);</sym><br />
<def>   Put</def><sym>(</sym><def>Item</def> <sym>=&gt;</sym> <def>Num</def><sym>,</sym> <def>Width</def> <sym>=&gt;</sym> <def></def><num>0</num><def></def><sym>);</sym><br />
<def>   Put</def><sym>(</sym><def></def><str>&quot;) = &quot;</str><def></def><sym>);</sym><br />
<def>   Put</def><sym>(</sym><def>Item</def> <sym>=&gt;</sym> <def>Result</def><sym>,</sym> <def>Width</def> <sym>=&gt;</sym> <def></def><num>0</num><def></def><sym>);</sym><br />
<def>   New_Line</def><sym>;</sym><br />
<def></def><kwa>end</kwa> <def>Fannkuch</def><sym>;</sym><br />
<def></def><br />
</source>
