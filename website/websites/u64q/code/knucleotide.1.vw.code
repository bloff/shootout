<span class="hl com">&quot;* The Computer Language Benchmarks Game</span>
<span class="hl com">    http://shootout.alioth.debian.org/</span>
<span class="hl com">    contributed by Andres Valloud *&quot;</span>!


!<span class="hl kwc">SequenceableCollection</span> <span class="hl kwb">methodsFor:</span> <span class="hl str">'computer language shootout'</span>!
<span class="hl kwb">substringFrequencies3a:</span> aLength <span class="hl kwb">using:</span> aDictionary

   <span class="hl kwd">| buffer |</span>
   buffer <span class="hl sym">:=</span> <span class="hl kwc">String</span> <span class="hl kwb">new:</span> aLength<span class="hl sym">.</span>
   <span class="hl num">1</span> <span class="hl kwb">to:</span> <span class="hl kwa">self</span> <span class="hl kwb">size -</span> aLength <span class="hl kwb">+</span> <span class="hl num">1</span> <span class="hl kwb">do:</span>
      <span class="hl sym">[</span><span class="hl kwd">:i</span> <span class="hl sym">|</span>
         <span class="hl kwd">| answer |</span>
         buffer <span class="hl kwb">replaceFrom:</span> <span class="hl num">1</span> <span class="hl kwb">to:</span> aLength <span class="hl kwb">with:</span> <span class="hl kwa">self</span> <span class="hl kwb">startingAt:</span> i<span class="hl sym">.</span>
         answer <span class="hl sym">:=</span> aDictionary
            <span class="hl kwb">at:</span> buffer
            <span class="hl kwb">putValueOf:</span> <span class="hl sym">[</span><span class="hl kwd">:sum</span> <span class="hl sym">|</span> sum <span class="hl kwb">+</span> <span class="hl num">1</span><span class="hl sym">]</span>
            <span class="hl kwb">ifAbsentPutValueOf:</span> <span class="hl num">1</span><span class="hl sym">.</span>
         answer <span class="hl kwb">=</span> <span class="hl num">1</span> <span class="hl kwb">ifTrue:</span> <span class="hl sym">[</span>buffer <span class="hl sym">:=</span> <span class="hl kwc">String</span> <span class="hl kwb">new:</span> aLength<span class="hl sym">].</span>
      <span class="hl sym">].</span>
   <span class="hl sym">^</span>aDictionary! !


!<span class="hl kwc">Dictionary</span> <span class="hl kwb">methodsFor:</span> <span class="hl str">'computer language shootout'</span>!
<span class="hl kwb">at:</span> key <span class="hl kwb">putValueOf:</span> putBlock <span class="hl kwb">ifAbsentPutValueOf:</span> absentBlock
   <span class="hl com">&quot;* Set the value at key to be the value of evaluating putBlock</span>
<span class="hl com">    with the existing value. If key is not found, create a new</span>
<span class="hl com">    entry for key and set is value to the evaluation of</span>
<span class="hl com">    absentBlock. Answer the result of evaluating either block. *&quot;</span>

   <span class="hl kwd">| index element anObject |</span>
   key <span class="hl kwb">==</span> <span class="hl kwa">nil</span> <span class="hl kwb">ifTrue:</span>
      <span class="hl sym">[^</span><span class="hl kwa">self</span>
         <span class="hl kwb">subscriptBoundsErrorFor:</span> <span class="hl kwd">#at:putValueOf:ifAbsentPutValueOf:</span>
         <span class="hl kwb">index:</span> key
         <span class="hl kwb">value:</span> absentBlock <span class="hl kwb">value</span><span class="hl sym">].</span>
   index <span class="hl sym">:=</span> <span class="hl kwa">self</span> <span class="hl kwb">findKeyOrNil:</span> key<span class="hl sym">.</span>
   element <span class="hl sym">:=</span> <span class="hl kwa">self</span> <span class="hl kwb">basicAt:</span> index<span class="hl sym">.</span>
   element <span class="hl kwb">==</span> <span class="hl kwa">nil</span>
      <span class="hl kwb">ifTrue:</span> <span class="hl sym">[</span><span class="hl kwa">self</span> <span class="hl kwb">atNewIndex:</span> index <span class="hl kwb">put:</span>
         <span class="hl sym">(</span><span class="hl kwa">self</span> <span class="hl kwb">createKey:</span> key <span class="hl kwb">value:</span> <span class="hl sym">(</span>anObject <span class="hl sym">:=</span> absentBlock <span class="hl kwb">value</span><span class="hl sym">))]</span>
      <span class="hl kwb">ifFalse:</span> <span class="hl sym">[</span>element <span class="hl kwb">value:</span> <span class="hl sym">(</span>anObject <span class="hl sym">:=</span> putBlock <span class="hl kwb">value:</span> element <span class="hl kwb">value</span><span class="hl sym">)].</span>
   <span class="hl sym">^</span>anObject ! !


!<span class="hl kwc">Tests</span> <span class="hl kwb">class methodsFor:</span> <span class="hl str">'benchmarking'</span>!
<span class="hl kwb">readFasta:</span> sequenceName <span class="hl kwb">from:</span> input
   <span class="hl kwd">| prefix newline buffer description line char |</span>
   prefix <span class="hl sym">:=</span> <span class="hl str">'&gt;'</span>,sequenceName<span class="hl sym">.</span>
   newline <span class="hl sym">:=</span> <span class="hl kwc">Character</span> <span class="hl kwb">cr</span><span class="hl sym">.</span>

   <span class="hl com">&quot;* find start of particular fasta sequence *&quot;</span>
   <span class="hl sym">[(</span>input <span class="hl kwb">atEnd</span><span class="hl sym">)</span> <span class="hl kwb">or:</span> <span class="hl sym">[</span>
         <span class="hl sym">(</span>input <span class="hl kwb">peek =</span> $&gt;<span class="hl sym">)</span>
            <span class="hl kwb">ifTrue:</span> <span class="hl sym">[((</span>line <span class="hl sym">:=</span> input <span class="hl kwb">upTo:</span> newline<span class="hl sym">)</span>
               <span class="hl kwb">indexOfSubCollection:</span> prefix <span class="hl kwb">startingAt:</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwb">=</span> <span class="hl num">1</span><span class="hl sym">]</span>
            <span class="hl kwb">ifFalse:</span> <span class="hl sym">[</span>input <span class="hl kwb">skipThrough:</span> newline<span class="hl sym">.</span> <span class="hl kwa">false</span><span class="hl sym">]]</span>
      <span class="hl sym">]</span> <span class="hl kwb">whileFalse</span><span class="hl sym">.</span>

   <span class="hl com">&quot;* line-by-line read - it would be a lot faster to block read *&quot;</span>
   description <span class="hl sym">:=</span> line<span class="hl sym">.</span>
   buffer <span class="hl sym">:=</span> <span class="hl kwc">ReadWriteStream</span> <span class="hl kwb">on:</span> <span class="hl sym">(</span><span class="hl kwc">String</span> <span class="hl kwb">new:</span> <span class="hl num">1028</span><span class="hl sym">).</span>
   <span class="hl sym">[(</span>input <span class="hl kwb">atEnd</span><span class="hl sym">)</span> <span class="hl kwb">or:</span> <span class="hl sym">[(</span>char <span class="hl sym">:=</span> input <span class="hl kwb">peek</span><span class="hl sym">)</span> <span class="hl kwb">=</span> $&gt;<span class="hl sym">]]</span> <span class="hl kwb">whileFalse:</span> <span class="hl sym">[</span>
      <span class="hl sym">(</span>char <span class="hl kwb">=</span> $<span class="hl sym">;)</span>
         <span class="hl kwb">ifTrue:</span> <span class="hl sym">[</span>input <span class="hl kwb">upTo:</span> newline<span class="hl sym">]</span>
         <span class="hl kwb">ifFalse:</span> <span class="hl sym">[</span>buffer <span class="hl kwb">nextPutAll:</span> <span class="hl sym">(</span>input <span class="hl kwb">upTo:</span> newline<span class="hl sym">)]</span>
      <span class="hl sym">].</span>
   <span class="hl sym">^</span><span class="hl kwc">Association</span> <span class="hl kwb">key:</span> description <span class="hl kwb">value:</span> buffer <span class="hl kwb">contents</span> ! !


!<span class="hl kwc">Tests</span> <span class="hl kwb">class methodsFor:</span> <span class="hl str">'benchmarking'</span>!
<span class="hl kwb">knucleotide3bFrom:</span> input <span class="hl kwb">to:</span> output
   <span class="hl com">&quot;Same as 3a, but presize the frequency dictionary better&quot;</span>

   <span class="hl kwd">| sequence writeFrequencies writeCount |</span>

   sequence <span class="hl sym">:= (</span><span class="hl kwa">self</span> <span class="hl kwb">readFasta:</span> <span class="hl str">'THREE'</span> <span class="hl kwb">from:</span> input<span class="hl sym">)</span> <span class="hl kwb">value asUppercase</span><span class="hl sym">.</span>

   writeFrequencies <span class="hl sym">:=</span>
      <span class="hl sym">[</span><span class="hl kwd">:k</span> <span class="hl sym">|</span> <span class="hl kwd">| frequencies count |</span>
      frequencies <span class="hl sym">:=</span> <span class="hl kwc">SortedCollection</span> <span class="hl kwb">sortBlock:</span> <span class="hl sym">[</span><span class="hl kwd">:a :b</span><span class="hl sym">|</span>
      <span class="hl sym">(</span>a <span class="hl kwb">value =</span> b <span class="hl kwb">value</span><span class="hl sym">)</span> <span class="hl kwb">ifTrue:</span> <span class="hl sym">[</span>b <span class="hl kwb">key</span> &lt; <span class="hl kwb">a key</span><span class="hl sym">]</span> <span class="hl kwb">ifFalse:</span> <span class="hl sym">[</span>b <span class="hl kwb">value</span> &lt; <span class="hl kwb">a value</span><span class="hl sym">]].</span>

   count <span class="hl sym">:=</span> <span class="hl num">0.0</span><span class="hl sym">.</span>
   <span class="hl sym">(</span>sequence <span class="hl kwb">substringFrequencies3a:</span> k <span class="hl kwb">using:</span> <span class="hl sym">(</span><span class="hl kwc">Dictionary</span> <span class="hl kwb">new:</span> <span class="hl sym">((</span><span class="hl num">4</span> <span class="hl kwb">raisedToInteger:</span> k<span class="hl sym">)</span> <span class="hl kwb">min:</span> sequence <span class="hl kwb">size</span><span class="hl sym">)</span> <span class="hl kwb">*</span> <span class="hl num">3</span> <span class="hl kwb">//</span> <span class="hl num">2</span><span class="hl sym">))</span>
      <span class="hl kwb">associationsDo:</span> <span class="hl sym">[</span><span class="hl kwd">:each</span><span class="hl sym">|</span>
         frequencies <span class="hl kwb">add:</span> each<span class="hl sym">.</span> count <span class="hl sym">:=</span> count <span class="hl kwb">+</span> each <span class="hl kwb">value</span><span class="hl sym">].</span>

   frequencies <span class="hl kwb">do:</span> <span class="hl sym">[</span><span class="hl kwd">:each</span> <span class="hl sym">|</span> <span class="hl kwd">| percentage |</span>
      percentage <span class="hl sym">:= (</span>each <span class="hl kwb">value /</span> count<span class="hl sym">)</span> <span class="hl kwb">*</span> <span class="hl num">100.0</span><span class="hl sym">.</span>
      output
         <span class="hl kwb">nextPutAll:</span> each <span class="hl kwb">key</span><span class="hl sym">;</span> <span class="hl kwb">space</span><span class="hl sym">;</span>
         <span class="hl kwb">print:</span> percentage <span class="hl kwb">digits:</span> <span class="hl num">3</span><span class="hl sym">;</span> <span class="hl kwb">nl</span><span class="hl sym">]].</span>

   writeCount <span class="hl sym">:= [</span><span class="hl kwd">:nucleotideFragment</span> <span class="hl sym">|</span> <span class="hl kwd">| frequencies count |</span>
      frequencies <span class="hl sym">:=</span> sequence <span class="hl kwb">substringFrequencies3a:</span> nucleotideFragment <span class="hl kwb">size</span>
         <span class="hl kwb">using:</span> <span class="hl sym">(</span><span class="hl kwc">Dictionary</span> <span class="hl kwb">new:</span> <span class="hl sym">((</span><span class="hl num">4</span> <span class="hl kwb">raisedToInteger:</span> nucleotideFragment <span class="hl kwb">size</span><span class="hl sym">)</span> <span class="hl kwb">min:</span> sequence <span class="hl kwb">size</span><span class="hl sym">)</span> <span class="hl kwb">*</span> <span class="hl num">3</span> <span class="hl kwb">//</span> <span class="hl num">2</span><span class="hl sym">).</span>
      count <span class="hl sym">:=</span> frequencies <span class="hl kwb">at:</span> nucleotideFragment <span class="hl kwb">ifAbsent:</span> <span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">].</span>
      output <span class="hl kwb">print:</span> count<span class="hl sym">;</span> <span class="hl kwb">tab</span><span class="hl sym">;</span> <span class="hl kwb">nextPutAll:</span> nucleotideFragment<span class="hl sym">;</span> <span class="hl kwb">nl</span><span class="hl sym">].</span>

   writeFrequencies <span class="hl kwb">value:</span> <span class="hl num">1</span><span class="hl sym">.</span> output <span class="hl kwb">nl</span><span class="hl sym">.</span>
   writeFrequencies <span class="hl kwb">value:</span> <span class="hl num">2</span><span class="hl sym">.</span> output <span class="hl kwb">nl</span><span class="hl sym">.</span>

   writeCount <span class="hl kwb">value:</span> <span class="hl str">'GGT'</span><span class="hl sym">.</span>
   writeCount <span class="hl kwb">value:</span> <span class="hl str">'GGTA'</span><span class="hl sym">.</span>
   writeCount <span class="hl kwb">value:</span> <span class="hl str">'GGTATT'</span><span class="hl sym">.</span>
   writeCount <span class="hl kwb">value:</span> <span class="hl str">'GGTATTTTAATT'</span><span class="hl sym">.</span>
   writeCount <span class="hl kwb">value:</span> <span class="hl str">'GGTATTTTAATTTATAGT'</span><span class="hl sym">.</span>! !


!<span class="hl kwc">Tests</span> <span class="hl kwb">class methodsFor:</span> <span class="hl str">'benchmark scripts'</span>!
<span class="hl kwb">knucleotide</span>

   <span class="hl kwa">self</span> <span class="hl kwb">knucleotide3bFrom:</span> <span class="hl kwa">self</span> <span class="hl kwb">stdinSpecial to:</span> <span class="hl kwa">self</span> <span class="hl kwb">stdout</span><span class="hl sym">.</span>
   <span class="hl sym">^</span><span class="hl str">''</span>! !
