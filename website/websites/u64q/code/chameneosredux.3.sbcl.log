
Wed, 06 Oct 2010 03:18:14 GMT

MAKE:
cp: `chameneosredux.sbcl-3.sbcl' and `./chameneosredux.sbcl-3.sbcl' are the same file
SBCL built with: /usr/local/bin/sbcl --userinit /dev/null --batch --eval '(load "chameneosredux.sbcl-3.sbcl_compile")'
### START chameneosredux.sbcl-3.sbcl_compile
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(handler-bind ((sb-ext:defconstant-uneql      (lambda (c) (abort c))))      (load (compile-file "chameneosredux.sbcl-3.sbcl" ))) (save-lisp-and-die "sbcl.core" :purify t)
### END chameneosredux.sbcl-3.sbcl_compile


; compiling file "/home/dunham/shootout/bench/chameneosredux/chameneosredux.sbcl-3.sbcl" (written 05 OCT 2010 08:12:03 PM):
; compiling (DEFPACKAGE #:SMP-UTILS ...)
; compiling (IN-PACKAGE :SMP-UTILS)
; compiling (DEFUN CPUSET->LIST ...)
; file: /home/dunham/shootout/bench/chameneosredux/chameneosredux.sbcl-3.sbcl
; in: DEFUN CPUSET->LIST
;     (ELT SMP-UTILS::CPUSET (TRUNCATE SMP-UTILS::I 8))
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY * (*)).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a LIST.

;     (LDB (BYTE 1 (MOD SMP-UTILS::I 8))
;          (ELT SMP-UTILS::CPUSET (TRUNCATE SMP-UTILS::I 8)))
; --> SB-KERNEL:%LDB LOGAND 
; ==>
;   (ASH INT (- SB-C::POSN))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       The second argument is a (INTEGER -7 0), not a (UNSIGNED-BYTE 60).
;       The result is a (VALUES INTEGER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       The second argument is a (INTEGER -7 0), not a (UNSIGNED-BYTE 60).
;       The result is a (VALUES INTEGER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

; --> SB-KERNEL:%LDB 
; ==>
;   (LOGAND (ASH INT (- SB-C::POSN)) (ASH 18446744073709551615 (- SB-C::SIZE 64)))
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; compiling (DEFUN LIST->CPUSET ...)
; file: /home/dunham/shootout/bench/chameneosredux/chameneosredux.sbcl-3.sbcl
; in: DEFUN LIST->CPUSET
;     (FIND SMP-UTILS::I SMP-UTILS::CPUSET-LIST :TEST #'=)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The second argument is a SEQUENCE, not a (OR CONS NULL VECTOR).

; compiling (DEFUN AFFINITY ...)
; compiling (DEFUN (SETF AFFINITY) ...)
; compiling (DEFUN APIC-CORE-MAP ...)
; file: /home/dunham/shootout/bench/chameneosredux/chameneosredux.sbcl-3.sbcl
; in: DEFUN APIC-CORE-MAP
;     (LENGTH SMP-UTILS::LINE)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY * (*)).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a VECTOR.

;     (POSITION #\: SMP-UTILS::LINE :START (LENGTH SMP-UTILS::KEY))
; --> NTH-VALUE MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; ==>
;   (SB-KERNEL:%FIND-POSITION SB-C::ITEM SEQUENCE SB-C::FROM-END SB-C::START
;                             SB-C::END
;                             (SB-KERNEL:EFFECTIVE-FIND-POSITION-KEY SB-C::KEY)
;                             (SB-KERNEL:EFFECTIVE-FIND-POSITION-TEST SB-C::TEST
;                                                                     SB-C::TEST-NOT))
; 
; note: unable to
;   expand inline
; due to type uncertainty:
;   The second argument is a (OR (VECTOR CHARACTER) (VECTOR NIL) BASE-STRING
;                                NULL), not a LIST.
; 
; note: unable to
;   expand inline
; due to type uncertainty:
;   The second argument is a (OR (VECTOR CHARACTER) (VECTOR NIL) BASE-STRING
;                                NULL), not a VECTOR.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The second argument is a (OR (VECTOR CHARACTER) (VECTOR NIL) BASE-STRING
;                                NULL), not a STRING.

;     (FLET ((SMP-UTILS::PARSE-KEY-VALUE (SMP-UTILS::LINE SMP-UTILS::KEY)
;              (WHEN (AND # #)
;                (LET #
;                  #))))
;       (LOOP :WITH SMP-UTILS::CURRENT-CPU = NIL
;             :FOR SMP-UTILS::LINE = (READ-LINE SMP-UTILS::CPUINFO NIL NIL)
;             :WHILE SMP-UTILS::LINE
;             :DO ...))
; 
; note: Return type not fixed values, so can't use known return convention:
;   (VALUES (OR INTEGER NULL) &OPTIONAL (MOD 1152921504606846973))

;     (FIND SMP-UTILS::CURRENT-CPU SMP-UTILS::DEFAULT-MAP :KEY #'FIRST)
; --> NTH-VALUE MULTIPLE-VALUE-BIND LET SB-KERNEL:%FIND-POSITION 
; --> SB-KERNEL:%FIND-POSITION-IF LET LAMBDA FUNCTION FUNCALL SB-C::%FUNCALL 
; --> EQL IF EQL EQL IF 
; ==>
;   (EQL SB-C::Y SB-C::X)
; 
; note: forced to do GENERIC-EQL (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a T, not a FIXNUM.
;       The second argument is a INTEGER, not a FIXNUM.

; --> NTH-VALUE MULTIPLE-VALUE-BIND LET SB-KERNEL:%FIND-POSITION 
; --> SB-KERNEL:%FIND-POSITION-IF LET FLET IF DO BLOCK LET TAGBODY PSETQ PSETF 
; --> LET* MULTIPLE-VALUE-BIND LET LET* MULTIPLE-VALUE-BIND LET LET* 
; --> MULTIPLE-VALUE-BIND LET 
; ==>
;   (+ SB-INT:INDEX 1)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       The result is a (VALUES (INTEGER 1) &OPTIONAL), not a (VALUES FIXNUM
;                                                                     &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       The result is a (VALUES (INTEGER 1) &OPTIONAL), not a (VALUES FIXNUM
;                                                                     &REST T).
;       etc.

; compiling (DEFPACKAGE #:CHAMENEOS-REDUX ...)
; compiling (IN-PACKAGE :CHAMENEOS-REDUX)
; compiling (DEFMACRO DECLARE-COLORS-MAP ...)
; compiling (DEFUN SPELL-NUMBER ...)
; compiling (DEFMACRO SPIN-WAIT ...)
; compiling (DEFSTRUCT CHAMENEO ...)
; compiling (DEFMACRO WITH-GAMES ...)
; file: /home/dunham/shootout/bench/chameneosredux/chameneosredux.sbcl-3.sbcl
; in: DEFMACRO WITH-GAMES
;     (LENGTH CHAMENEOS-REDUX::COLORS)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY * (*)).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a VECTOR.

;     (ELT CHAMENEOS-REDUX::WORKER-BINDS CHAMENEOS-REDUX::THREAD-INDEX)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY * (*)).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a LIST.

;     (ELT CHAMENEOS-REDUX::WORKER-BINDS CHAMENEOS-REDUX::I)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY * (*)).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a LIST.

;     (LOOP :REPEAT CHAMENEOS-REDUX::COLORS-COUNT
;           :COLLECT '(CHAMENEOS-REDUX::MAKE-CHAMENEO))
; --> BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; ==>
;   (TRUNCATE NUMBER SB-KERNEL::DIVISOR)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a SINGLE-FLOAT.
;   The second argument is a REAL, not a (OR SINGLE-FLOAT INTEGER).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a DOUBLE-FLOAT.
;   The second argument is a REAL, not a (OR DOUBLE-FLOAT SINGLE-FLOAT INTEGER).
; 
; note: unable to
;   convert division by 2^k to shift
; due to type uncertainty:
;   The first argument is a REAL, not a INTEGER.
;   The second argument is a REAL, not a INTEGER.

; --> BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; --> FUNCTION IF AND IF NOT IF ZEROP 
; ==>
;   (= REM 0)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.
; 
; note: unable to open code because: The operands might not be the same type.

; --> BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; --> FUNCTION IF AND IF AND THE IF MINUSP 
; ==>
;   (< SB-KERNEL::DIVISOR 0)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.

; ==>
;   (< NUMBER 0)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.

; --> BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; --> FUNCTION IF AND IF AND THE IF PLUSP 
; ==>
;   (> NUMBER 0)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.

; --> BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; --> FUNCTION IF VALUES 
; ==>
;   (- REM SB-KERNEL::DIVISOR)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a RATIONAL.
;   The second argument is a REAL, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.
;   The second argument is a REAL, not a RATIONAL.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a SINGLE-FLOAT.
;   The second argument is a REAL, not a DOUBLE-FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a DOUBLE-FLOAT.
;   The second argument is a REAL, not a SINGLE-FLOAT.

; --> BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; --> FUNCTION IF AND IF AND THE IF MINUSP 
; ==>
;   (< SB-KERNEL::DIVISOR 0)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a REAL, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a REAL, not a FIXNUM.
;       etc.

; --> BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; --> FUNCTION IF AND IF AND THE IF PLUSP 
; ==>
;   (> NUMBER 0)
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a REAL, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a REAL, not a FIXNUM.
;       etc.

; --> BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; --> FUNCTION IF AND IF AND THE IF MINUSP 
; ==>
;   (< NUMBER 0)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a REAL, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a REAL, not a FIXNUM.
;       etc.

; --> BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; --> FUNCTION IF VALUES 
; ==>
;   (+ SB-KERNEL::TRU 1)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       The result is a (VALUES INTEGER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       The result is a (VALUES INTEGER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

; ==>
;   (- REM SB-KERNEL::DIVISOR)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline float arithmetic (cost 2) because:
;       The first argument is a REAL, not a DOUBLE-FLOAT.
;       The second argument is a REAL, not a DOUBLE-FLOAT.
;       The result is a (VALUES REAL &OPTIONAL), not a (VALUES DOUBLE-FLOAT &REST
;                                                              T).
;       unable to do inline float arithmetic (cost 2) because:
;       The first argument is a REAL, not a SINGLE-FLOAT.
;       The second argument is a REAL, not a SINGLE-FLOAT.
;       The result is a (VALUES REAL &OPTIONAL), not a (VALUES SINGLE-FLOAT &REST
;                                                              T).
;       etc.

;     (LOOP :REPEAT CHAMENEOS-REDUX::COLORS-COUNT
;           :COLLECT (GENSYM))
; --> BLOCK LET SB-LOOP::WITH-LOOP-LIST-COLLECTION-HEAD LET* SB-LOOP::LOOP-BODY 
; --> TAGBODY IF <= IF 
; ==>
;   (> SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

;     (LOOP :REPEAT CHAMENEOS-REDUX::COLORS-COUNT
;           :COLLECT '(CHAMENEOS-REDUX::MAKE-CHAMENEO))
; --> BLOCK LET SB-LOOP::WITH-LOOP-LIST-COLLECTION-HEAD LET* SB-LOOP::LOOP-BODY 
; --> TAGBODY IF <= IF 
; ==>
;   (> SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> BLOCK LET SB-LOOP::WITH-LOOP-LIST-COLLECTION-HEAD LET* SB-LOOP::LOOP-BODY 
; --> TAGBODY IF DECF LET* 
; ==>
;   (- #:LOOP-REPEAT-574 #:G578)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (INTEGER 1), not a FIXNUM.
;       The result is a (VALUES UNSIGNED-BYTE &OPTIONAL), not a (VALUES FIXNUM
;                                                                       &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (INTEGER 1), not a FIXNUM.
;       The result is a (VALUES UNSIGNED-BYTE &OPTIONAL), not a (VALUES FIXNUM
;                                                                       &REST T).
;       etc.

;     (LOOP :REPEAT CHAMENEOS-REDUX::COLORS-COUNT
;           :COLLECT (GENSYM))
; --> BLOCK LET SB-LOOP::WITH-LOOP-LIST-COLLECTION-HEAD LET* SB-LOOP::LOOP-BODY 
; --> TAGBODY IF DECF LET* 
; ==>
;   (- #:LOOP-REPEAT-603 #:G607)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (INTEGER 1), not a FIXNUM.
;       The result is a (VALUES UNSIGNED-BYTE &OPTIONAL), not a (VALUES FIXNUM
;                                                                       &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (INTEGER 1), not a FIXNUM.
;       The result is a (VALUES UNSIGNED-BYTE &OPTIONAL), not a (VALUES FIXNUM
;                                                                       &REST T).
;       etc.

;     `(- CHAMENEOS-REDUX::STATE CHAMENEOS-REDUX::PEER-ID
;         ,(ASH 1 (INTEGER-LENGTH (1+ CHAMENEOS-REDUX::COLORS-COUNT))))
; 
; note: doing signed word to integer coercion (cost 20)

; compiling (DECLARE-COLORS-MAP (BLUE + ...) ...)
; compiling (DEFUN RUN-GAMES ...)
; file: /home/dunham/shootout/bench/chameneosredux/chameneosredux.sbcl-3.sbcl
; in: DEFMACRO WITH-GAMES
;     (CHAMENEOS-REDUX::SPIN-WAIT
;      (CHAMENEOS-REDUX::CHAMENEO-MEET-WAIT CHAMENEOS-REDUX::SELF))
; --> LOOP BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL 
; ==>
;   (TRUNCATE NUMBER SB-KERNEL::DIVISOR)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a SINGLE-FLOAT.
;   The second argument is a REAL, not a (OR SINGLE-FLOAT INTEGER).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a DOUBLE-FLOAT.
;   The second argument is a REAL, not a (OR DOUBLE-FLOAT SINGLE-FLOAT INTEGER).
; 
; note: unable to
;   convert division by 2^k to shift
; due to type uncertainty:
;   The first argument is a REAL, not a INTEGER.
;   The second argument is a REAL, not a INTEGER.

; --> LOOP BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL FUNCTION IF AND IF NOT IF ZEROP 
; ==>
;   (= REM 0)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.
; 
; note: unable to open code because: The operands might not be the same type.

; --> LOOP BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL FUNCTION IF AND IF AND THE IF MINUSP 
; ==>
;   (< SB-KERNEL::DIVISOR 0)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.

; ==>
;   (< NUMBER 0)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.

; --> LOOP BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL FUNCTION IF AND IF AND THE IF PLUSP 
; ==>
;   (> NUMBER 0)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.

; --> LOOP BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL FUNCTION IF VALUES 
; ==>
;   (- REM SB-KERNEL::DIVISOR)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a RATIONAL.
;   The second argument is a REAL, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.
;   The second argument is a REAL, not a RATIONAL.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a SINGLE-FLOAT.
;   The second argument is a REAL, not a DOUBLE-FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a DOUBLE-FLOAT.
;   The second argument is a REAL, not a SINGLE-FLOAT.

; --> LOOP BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL FUNCTION IF AND IF AND THE IF MINUSP 
; ==>
;   (< SB-KERNEL::DIVISOR 0)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a REAL, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a REAL, not a FIXNUM.
;       etc.

; --> LOOP BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL FUNCTION IF AND IF AND THE IF PLUSP 
; ==>
;   (> NUMBER 0)
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a REAL, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a REAL, not a FIXNUM.
;       etc.

; --> LOOP BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL FUNCTION IF AND IF AND THE IF MINUSP 
; ==>
;   (< NUMBER 0)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a REAL, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a REAL, not a FIXNUM.
;       etc.

; --> LOOP BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL FUNCTION IF VALUES 
; ==>
;   (+ SB-KERNEL::TRU 1)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       The result is a (VALUES INTEGER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       The result is a (VALUES INTEGER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

; ==>
;   (- REM SB-KERNEL::DIVISOR)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline float arithmetic (cost 2) because:
;       The first argument is a REAL, not a DOUBLE-FLOAT.
;       The second argument is a REAL, not a DOUBLE-FLOAT.
;       The result is a (VALUES REAL &OPTIONAL), not a (VALUES DOUBLE-FLOAT &REST
;                                                              T).
;       unable to do inline float arithmetic (cost 2) because:
;       The first argument is a REAL, not a SINGLE-FLOAT.
;       The second argument is a REAL, not a SINGLE-FLOAT.
;       The result is a (VALUES REAL &OPTIONAL), not a (VALUES SINGLE-FLOAT &REST
;                                                              T).
;       etc.

; --> LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY IF <= IF 
; ==>
;   (> SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY IF DECF LET* 
; ==>
;   (- #:LOOP-REPEAT-719 #:G721)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (INTEGER 1), not a FIXNUM.
;       The result is a (VALUES UNSIGNED-BYTE &OPTIONAL), not a (VALUES FIXNUM
;                                                                       &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (INTEGER 1), not a FIXNUM.
;       The result is a (VALUES UNSIGNED-BYTE &OPTIONAL), not a (VALUES FIXNUM
;                                                                       &REST T).
;       etc.

; --> LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY IF <= IF 
; ==>
;   (> SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY IF DECF LET* 
; ==>
;   (- #:LOOP-REPEAT-782 #:G784)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (INTEGER 1), not a FIXNUM.
;       The result is a (VALUES UNSIGNED-BYTE &OPTIONAL), not a (VALUES FIXNUM
;                                                                       &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (INTEGER 1), not a FIXNUM.
;       The result is a (VALUES UNSIGNED-BYTE &OPTIONAL), not a (VALUES FIXNUM
;                                                                       &REST T).
;       etc.

; compiling (DEFUN MAIN ...)
; compiling (IN-PACKAGE :CL-USER)
; compiling (DEFUN MAIN ...); 
; compilation unit finished
;   printed 62 notes


; /home/dunham/benchmarksgame/chameneosredux/tmp/chameneosredux.sbcl-3.fasl written
; compilation finished in 0:00:01.332
[undoing binding stack and other enclosing state... done]
[saving current Lisp image into sbcl.core:
writing 6352 bytes from the read-only space at 0x20000000
writing 4064 bytes from the static space at 0x20100000
writing 47173632 bytes from the dynamic space at 0x1000000000
done]
### START chameneosredux.sbcl-3.sbcl_run
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(main) (quit)
### END chameneosredux.sbcl-3.sbcl_run

4.99s to complete and log all make actions

COMMAND LINE:
/usr/local/bin/sbcl  --noinform --core sbcl.core --userinit /dev/null --load chameneosredux.sbcl-3.sbcl_run 6000000

PROGRAM OUTPUT:
blue + blue -> blue
blue + red -> yellow
blue + yellow -> red
red + blue -> yellow
red + red -> red
red + yellow -> blue
yellow + blue -> red
yellow + red -> blue
yellow + yellow -> yellow

 blue red yellow
3386341 zero
5992662 zero
2620997 zero
 one two zero zero zero zero zero zero

 blue red yellow red yellow blue red yellow red blue
818093 zero
852876 zero
870290 zero
695994 zero
2025521 zero
975795 zero
2085260 zero
1886820 zero
872876 zero
916475 zero
 one two zero zero zero zero zero zero

