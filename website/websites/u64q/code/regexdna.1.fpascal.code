<span class="hl com">(*</span>
<span class="hl com">  The Computer Language Benchmarks Game</span>
<span class="hl com">  http://shootout.alioth.debian.org</span>
<span class="hl com"></span>
<span class="hl com">  contributed by Vitaly Trifonov</span>
<span class="hl com">*)</span>

<span class="hl com">{$mode objfpc}</span>


<span class="hl kwa">uses</span> sysutils<span class="hl sym">;</span>

<span class="hl com">(******************************    pcre wrap   *****************************)</span>

<span class="hl kwa">const</span>
  libpcre <span class="hl sym">=</span> <span class="hl str">'pcre'</span><span class="hl sym">;</span>
  PCRE_CASELESS <span class="hl sym">=</span> <span class="hl num">$00000001</span><span class="hl sym">;</span>

<span class="hl kwa">type</span>
  pcre <span class="hl sym">=</span> <span class="hl kwb">Pointer</span><span class="hl sym">;</span>
  pcre_extra <span class="hl sym">=</span> <span class="hl kwb">Pointer</span><span class="hl sym">;</span>
  PPChar <span class="hl sym">= ^</span>PChar<span class="hl sym">;</span>


<span class="hl kwa">function</span> <span class="hl kwd">pcre_compile</span><span class="hl sym">(</span> <span class="hl kwa">const</span> pattern<span class="hl sym">:</span> PChar<span class="hl sym">;</span>
                       options<span class="hl sym">:</span> <span class="hl kwb">Integer</span><span class="hl sym">;</span>
                       <span class="hl kwa">const</span> errptr<span class="hl sym">:</span> PPChar<span class="hl sym">;</span>
                       erroffset<span class="hl sym">:</span> PInteger<span class="hl sym">;</span>
                       <span class="hl kwa">const</span> tableptr<span class="hl sym">:</span> PChar <span class="hl sym">):</span> pcre<span class="hl sym">;</span> <span class="hl kwa">cdecl</span><span class="hl sym">;</span> <span class="hl kwa">external</span> libpcre<span class="hl sym">;</span>

<span class="hl kwa">function</span> <span class="hl kwd">pcre_exec</span><span class="hl sym">(</span> <span class="hl kwa">const</span> code<span class="hl sym">:</span> pcre<span class="hl sym">;</span>
                    <span class="hl kwa">const</span> extra<span class="hl sym">:</span> pcre_extra<span class="hl sym">;</span>
                    <span class="hl kwa">const</span> subject<span class="hl sym">:</span> PChar<span class="hl sym">;</span>
                    length<span class="hl sym">,</span> startoffset<span class="hl sym">,</span> options<span class="hl sym">:</span> <span class="hl kwb">Integer</span><span class="hl sym">;</span>
                    ovector<span class="hl sym">:</span> PInteger<span class="hl sym">;</span>
                    ovecsize<span class="hl sym">:</span> <span class="hl kwb">Integer</span> <span class="hl sym">):</span> <span class="hl kwb">Integer</span><span class="hl sym">;</span> <span class="hl kwa">cdecl</span><span class="hl sym">;</span> <span class="hl kwa">external</span> libpcre<span class="hl sym">;</span>

<span class="hl kwa">function</span> <span class="hl kwd">pcre_study</span><span class="hl sym">(</span> <span class="hl kwa">const</span> external_re<span class="hl sym">:</span> pcre<span class="hl sym">;</span>
                     options<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">;</span>
                     errorptr<span class="hl sym">:</span> PPChar <span class="hl sym">):</span> pcre_extra<span class="hl sym">;</span> <span class="hl kwa">cdecl</span><span class="hl sym">;</span> <span class="hl kwa">external</span> libpcre<span class="hl sym">;</span>

<span class="hl com">(***************************************************************************)</span>

<span class="hl kwa">const</span>
  patt<span class="hl sym">:</span> <span class="hl kwa">array</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">.</span><span class="hl num">.10</span><span class="hl sym">]</span> <span class="hl kwa">of</span> PChar <span class="hl sym">= (</span><span class="hl str">'B'</span><span class="hl sym">,</span><span class="hl str">'D'</span><span class="hl sym">,</span><span class="hl str">'H'</span><span class="hl sym">,</span><span class="hl str">'K'</span><span class="hl sym">,</span><span class="hl str">'M'</span><span class="hl sym">,</span><span class="hl str">'N'</span><span class="hl sym">,</span><span class="hl str">'R'</span><span class="hl sym">,</span><span class="hl str">'S'</span><span class="hl sym">,</span><span class="hl str">'V'</span><span class="hl sym">,</span><span class="hl str">'W'</span><span class="hl sym">,</span><span class="hl str">'Y'</span><span class="hl sym">);</span>
  repl<span class="hl sym">:</span> <span class="hl kwa">array</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">.</span><span class="hl num">.10</span><span class="hl sym">]</span> <span class="hl kwa">of</span> PChar <span class="hl sym">= (</span><span class="hl str">'(c|g|t)'</span><span class="hl sym">,</span> <span class="hl str">'(a|g|t)'</span><span class="hl sym">,</span> <span class="hl str">'(a|c|t)'</span><span class="hl sym">,</span> <span class="hl str">'(g|t)'</span><span class="hl sym">,</span>
      <span class="hl str">'(a|c)'</span><span class="hl sym">,</span><span class="hl str">'(a|c|g|t)'</span><span class="hl sym">,</span> <span class="hl str">'(a|g)'</span><span class="hl sym">,</span> <span class="hl str">'(c|g)'</span><span class="hl sym">,</span> <span class="hl str">'(a|c|g)'</span><span class="hl sym">,</span> <span class="hl str">'(a|t)'</span><span class="hl sym">,</span> <span class="hl str">'(c|t)'</span><span class="hl sym">);</span>

<span class="hl kwa">var</span>
  patterns<span class="hl sym">:</span> <span class="hl kwa">array</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">.</span><span class="hl num">.8</span><span class="hl sym">]</span> <span class="hl kwa">of</span> PChar <span class="hl sym">=</span>
    <span class="hl sym">(</span>
      <span class="hl str">'agggtaaa|tttaccct'</span><span class="hl sym">,</span>
      <span class="hl str">'[cgt]gggtaaa|tttaccc[acg]'</span><span class="hl sym">,</span>
      <span class="hl str">'a[act]ggtaaa|tttacc[agt]t'</span><span class="hl sym">,</span>
      <span class="hl str">'ag[act]gtaaa|tttac[agt]ct'</span><span class="hl sym">,</span>
      <span class="hl str">'agg[act]taaa|ttta[agt]cct'</span><span class="hl sym">,</span>
      <span class="hl str">'aggg[acg]aaa|ttt[cgt]ccct'</span><span class="hl sym">,</span>
      <span class="hl str">'agggt[cgt]aa|tt[acg]accct'</span><span class="hl sym">,</span>
      <span class="hl str">'agggta[cgt]a|t[acg]taccct'</span><span class="hl sym">,</span>
      <span class="hl str">'agggtaa[cgt]|[acg]ttaccct'</span>
    <span class="hl sym">);</span>


<span class="hl com">(* Count match with pattern of regexp in seq buffer. *)</span>
<span class="hl kwa">function</span> <span class="hl kwd">count</span><span class="hl sym">(</span> <span class="hl kwa">const</span> pattern<span class="hl sym">,</span> seq<span class="hl sym">:</span> PChar<span class="hl sym">;</span> len<span class="hl sym">:</span> <span class="hl kwb">Integer</span> <span class="hl sym">):</span> <span class="hl kwb">Longint</span><span class="hl sym">;</span>
<span class="hl kwa">var</span>
  cre<span class="hl sym">:</span> pcre<span class="hl sym">;</span>
  cre_ex<span class="hl sym">:</span> pcre_extra<span class="hl sym">;</span>
  err<span class="hl sym">:</span> PChar<span class="hl sym">;</span>
  ofs<span class="hl sym">:</span> <span class="hl kwb">Integer</span><span class="hl sym">;</span>
  ind<span class="hl sym">:</span> <span class="hl kwb">Longint</span> <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
  m<span class="hl sym">:</span> <span class="hl kwa">array</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">.</span><span class="hl num">.2</span><span class="hl sym">]</span> <span class="hl kwa">of</span> <span class="hl kwb">Integer</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  cre <span class="hl sym">:=</span> <span class="hl kwd">pcre_compile</span><span class="hl sym">(</span>pattern<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">, &#64;</span>err<span class="hl sym">, &#64;</span>ofs<span class="hl sym">,</span> <span class="hl kwa">nil</span><span class="hl sym">);</span>
  cre_ex <span class="hl sym">:=</span> <span class="hl kwd">pcre_study</span><span class="hl sym">(</span>cre<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">, &#64;</span>err<span class="hl sym">);</span>
  m<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">] :=</span> <span class="hl num">0</span><span class="hl sym">;</span>

  <span class="hl kwa">while</span> <span class="hl kwd">pcre_exec</span><span class="hl sym">(</span>cre<span class="hl sym">,</span>   cre_ex<span class="hl sym">,</span> seq<span class="hl sym">,</span> len<span class="hl sym">,</span>   m<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">],</span> <span class="hl num">0</span><span class="hl sym">,</span> m<span class="hl sym">,</span> <span class="hl num">3</span><span class="hl sym">) &gt;=</span> <span class="hl num">0</span> <span class="hl kwa">do</span>
    ind <span class="hl sym">+=</span> <span class="hl num">1</span><span class="hl sym">;</span>

  count <span class="hl sym">:=</span> ind
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">function</span> <span class="hl kwd">split_count</span> <span class="hl sym">(</span> <span class="hl kwa">const</span> pattern<span class="hl sym">,</span> seq<span class="hl sym">:</span> PChar<span class="hl sym">;</span> len<span class="hl sym">:</span> <span class="hl kwb">Integer</span> <span class="hl sym">):</span> <span class="hl kwb">Longint</span><span class="hl sym">;</span> <span class="hl kwa">inline</span><span class="hl sym">;</span>
<span class="hl kwa">var</span>
  split<span class="hl sym">:</span> PChar<span class="hl sym">;</span>
  vcount<span class="hl sym">:</span> <span class="hl kwb">Longint</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  split <span class="hl sym">:=</span> <span class="hl kwd">strscan</span><span class="hl sym">(</span>pattern<span class="hl sym">,</span> <span class="hl str">'|'</span><span class="hl sym">);</span>
  <span class="hl kwb">Byte</span><span class="hl sym">(</span>split<span class="hl sym">^) :=</span> <span class="hl num">0</span><span class="hl sym">;</span>

  vcount <span class="hl sym">:=</span> <span class="hl kwd">count</span><span class="hl sym">(</span>pattern<span class="hl sym">,</span> seq<span class="hl sym">,</span> len<span class="hl sym">);</span>
  vcount <span class="hl sym">+=</span> <span class="hl kwd">count</span><span class="hl sym">(&#64;</span>split<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">],</span> seq<span class="hl sym">,</span> len<span class="hl sym">);</span>

  split<span class="hl sym">^ :=</span> <span class="hl str">'|'</span><span class="hl sym">;</span>
  split_count <span class="hl sym">:=</span> vcount
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl com">(* Substitute pattern of regexp with repl, return new length. *)</span>
<span class="hl kwa">function</span> <span class="hl kwd">subst</span><span class="hl sym">(</span> <span class="hl kwa">const</span> pattern<span class="hl sym">,</span> repl<span class="hl sym">:</span> PChar<span class="hl sym">;</span> <span class="hl kwa">var</span> seq<span class="hl sym">:</span> PChar<span class="hl sym">;</span> len<span class="hl sym">:</span> <span class="hl kwb">Integer</span> <span class="hl sym">):</span> <span class="hl kwb">Longint</span><span class="hl sym">;</span>
<span class="hl kwa">var</span>
  cre<span class="hl sym">:</span> pcre<span class="hl sym">;</span>
  cre_ex<span class="hl sym">:</span> pcre_extra<span class="hl sym">;</span>
  err<span class="hl sym">:</span> PChar<span class="hl sym">;</span>
  ofs<span class="hl sym">:</span> <span class="hl kwb">Integer</span><span class="hl sym">;</span>
  size_repl<span class="hl sym">,</span> size<span class="hl sym">,</span> bsize<span class="hl sym">,</span> pos<span class="hl sym">:</span> <span class="hl kwb">Longint</span><span class="hl sym">;</span>
  m<span class="hl sym">:</span> <span class="hl kwa">array</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">.</span><span class="hl num">.2</span><span class="hl sym">]</span> <span class="hl kwa">of</span> <span class="hl kwb">Integer</span><span class="hl sym">;</span>
  newSeq<span class="hl sym">,</span> otmpseq<span class="hl sym">:</span> PChar<span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  cre <span class="hl sym">:=</span> <span class="hl kwd">pcre_compile</span><span class="hl sym">(</span>pattern<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">, &#64;</span>err<span class="hl sym">, &#64;</span>ofs<span class="hl sym">,</span> <span class="hl kwa">nil</span><span class="hl sym">);</span>
  cre_ex <span class="hl sym">:=</span> <span class="hl kwd">pcre_study</span><span class="hl sym">(</span>cre<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">, &#64;</span>err<span class="hl sym">);</span>
  size_repl <span class="hl sym">:=</span> <span class="hl kwd">strlen</span><span class="hl sym">(</span>repl<span class="hl sym">);</span>
  m<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">] :=</span> <span class="hl num">0</span><span class="hl sym">;</span> size <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>

<span class="hl com">(* Calculate required size for malloc. *)</span>
  <span class="hl kwa">while</span> <span class="hl kwd">pcre_exec</span><span class="hl sym">(</span>cre<span class="hl sym">,</span>   cre_ex<span class="hl sym">,</span> seq<span class="hl sym">,</span> len<span class="hl sym">,</span>   m<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">],</span> <span class="hl num">0</span><span class="hl sym">,</span> m<span class="hl sym">,</span> <span class="hl num">3</span><span class="hl sym">) &gt;=</span> <span class="hl num">0</span> <span class="hl kwa">do</span>
    size <span class="hl sym">+=</span> size_repl <span class="hl sym">-</span> m<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">] +</span> m<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
  size <span class="hl sym">+=</span> len<span class="hl sym">;</span>

  <span class="hl kwd">GetMem</span><span class="hl sym">(</span>newSeq<span class="hl sym">,</span> <span class="hl kwd">SizeOf</span><span class="hl sym">(</span><span class="hl kwb">Char</span><span class="hl sym">)*</span>size<span class="hl sym">);</span>

<span class="hl com">(* Do substitute. *)</span>
  m<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">] :=</span> <span class="hl num">0</span><span class="hl sym">;</span> pos <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
  otmpseq <span class="hl sym">:=</span> newSeq<span class="hl sym">;</span>


  <span class="hl kwa">if</span> size_repl <span class="hl sym">&lt;&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
    <span class="hl kwa">while</span> <span class="hl kwd">pcre_exec</span><span class="hl sym">(</span>cre<span class="hl sym">,</span>   cre_ex<span class="hl sym">,</span> seq<span class="hl sym">,</span> len<span class="hl sym">,</span>   m<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">],</span> <span class="hl num">0</span><span class="hl sym">,</span> m<span class="hl sym">,</span> <span class="hl num">3</span><span class="hl sym">) &gt;=</span> <span class="hl num">0</span> <span class="hl kwa">do</span>
    <span class="hl kwa">begin</span>
      bsize <span class="hl sym">:=</span> m<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] -</span> pos<span class="hl sym">;</span>
      <span class="hl kwd">strlcopy</span><span class="hl sym">(</span>otmpseq<span class="hl sym">, &#64;</span>seq<span class="hl sym">[</span>pos<span class="hl sym">],</span> bsize<span class="hl sym">);</span>

      otmpseq <span class="hl sym">:= &#64;</span>otmpseq<span class="hl sym">[</span>bsize<span class="hl sym">];</span>
      pos <span class="hl sym">:=</span> m<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">];</span>

      otmpseq <span class="hl sym">:=</span> <span class="hl kwd">strecopy</span><span class="hl sym">(</span>otmpseq<span class="hl sym">,</span> repl<span class="hl sym">);</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">else</span>
    <span class="hl kwa">while</span> <span class="hl kwd">pcre_exec</span><span class="hl sym">(</span>cre<span class="hl sym">,</span>   cre_ex<span class="hl sym">,</span> seq<span class="hl sym">,</span> len<span class="hl sym">,</span>   m<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">],</span> <span class="hl num">0</span><span class="hl sym">,</span> m<span class="hl sym">,</span> <span class="hl num">3</span><span class="hl sym">) &gt;=</span> <span class="hl num">0</span> <span class="hl kwa">do</span>
    <span class="hl kwa">begin</span>
      bsize <span class="hl sym">:=</span> m<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] -</span> pos<span class="hl sym">;</span>
      <span class="hl kwd">strlcopy</span><span class="hl sym">(</span>otmpseq<span class="hl sym">, &#64;</span>seq<span class="hl sym">[</span>pos<span class="hl sym">],</span> bsize<span class="hl sym">);</span>

      otmpseq <span class="hl sym">:= &#64;</span>otmpseq<span class="hl sym">[</span>bsize<span class="hl sym">];</span>
      pos <span class="hl sym">:=</span> m<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">];</span>
    <span class="hl kwa">end</span><span class="hl sym">;</span>

  <span class="hl kwd">strcopy</span><span class="hl sym">(</span>otmpseq<span class="hl sym">, &#64;</span>seq<span class="hl sym">[</span>pos<span class="hl sym">]);</span>

  <span class="hl kwd">FreeMem</span><span class="hl sym">(</span>seq<span class="hl sym">);</span>
  seq <span class="hl sym">:=</span> newSeq<span class="hl sym">;</span>

  subst <span class="hl sym">:=</span> size
<span class="hl kwa">end</span><span class="hl sym">;</span>


<span class="hl kwa">var</span>
  readLen<span class="hl sym">:</span> <span class="hl kwb">Longint</span> <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
  maxSeqLen<span class="hl sym">:</span> <span class="hl kwb">Longint</span> <span class="hl sym">=</span> <span class="hl num">6000000</span><span class="hl sym">;</span>
  seqLen<span class="hl sym">:</span> <span class="hl kwb">Longint</span> <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
  seq<span class="hl sym">,</span> newSeq<span class="hl sym">:</span> PChar<span class="hl sym">;</span>
  ch<span class="hl sym">:</span> <span class="hl kwb">Char</span><span class="hl sym">;</span>
  i<span class="hl sym">:</span> <span class="hl kwb">Longint</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  <span class="hl kwd">GetMem</span><span class="hl sym">(</span>seq<span class="hl sym">,</span> <span class="hl kwd">SizeOf</span><span class="hl sym">(</span><span class="hl kwb">Char</span><span class="hl sym">)*(</span>maxSeqLen<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">));</span>

<span class="hl com">(* Read FASTA format file from stdin and count length. *)</span>
  <span class="hl kwa">while not</span> eof <span class="hl kwa">do</span>
  <span class="hl kwa">begin</span>
    <span class="hl kwa">if</span> readLen <span class="hl sym">=</span> maxSeqLen <span class="hl kwa">then</span>
    <span class="hl kwa">begin</span>
      maxSeqLen <span class="hl sym">+=</span> <span class="hl num">3000000</span><span class="hl sym">;</span>
      seq <span class="hl sym">:=</span> <span class="hl kwd">ReAllocMem</span><span class="hl sym">(</span>seq<span class="hl sym">,</span> <span class="hl kwd">SizeOf</span><span class="hl sym">(</span><span class="hl kwb">Char</span><span class="hl sym">)*(</span>maxSeqLen<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">));</span>
    <span class="hl kwa">end</span><span class="hl sym">;</span>
    <span class="hl kwd">read</span><span class="hl sym">(</span>seq<span class="hl sym">[</span>readLen<span class="hl sym">]);</span>
    readLen <span class="hl sym">+=</span> <span class="hl num">1</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>
  <span class="hl kwb">Byte</span><span class="hl sym">(</span>seq<span class="hl sym">[</span>readLen<span class="hl sym">]) :=</span> <span class="hl num">0</span><span class="hl sym">;</span> <span class="hl slc">//end read data</span>


<span class="hl com">(* Remove FASTA sequence descriptions and all linefeed characters.  *)</span>
  seqLen <span class="hl sym">:=</span> <span class="hl kwd">subst</span><span class="hl sym">(</span><span class="hl str">'&gt;.*|\n'</span><span class="hl sym">,</span> <span class="hl str">''</span><span class="hl sym">,</span> seq<span class="hl sym">,</span> readLen<span class="hl sym">);</span>


<span class="hl com">(* Count all matches of patterns[i] in  seq buffer. *)</span>
  <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> <span class="hl num">8</span> <span class="hl kwa">do</span>
    <span class="hl kwd">writeln</span><span class="hl sym">(</span>patterns<span class="hl sym">[</span>i<span class="hl sym">],</span> <span class="hl str">' '</span><span class="hl sym">,</span> <span class="hl kwd">split_count</span><span class="hl sym">(</span>patterns<span class="hl sym">[</span>i<span class="hl sym">],</span> seq<span class="hl sym">,</span> seqLen<span class="hl sym">));</span>
    <span class="hl slc">//writeln(patterns[i], ' ', count(patterns[i], seq, seqLen));</span>

  writeln<span class="hl sym">;</span>
  <span class="hl kwd">writeln</span><span class="hl sym">(</span>readLen<span class="hl sym">);</span>

  <span class="hl kwd">writeln</span><span class="hl sym">(</span>seqLen<span class="hl sym">);</span>
  <span class="hl slc">//writeln(strlen(seq));</span>

<span class="hl com">(* All IUB substitutes. *)</span>
  <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> <span class="hl num">10</span> <span class="hl kwa">do</span>
    seqLen <span class="hl sym">:=</span> <span class="hl kwd">subst</span><span class="hl sym">(</span>patt<span class="hl sym">[</span>i<span class="hl sym">],</span> repl<span class="hl sym">[</span>i<span class="hl sym">],</span> seq<span class="hl sym">,</span> seqLen<span class="hl sym">);</span>

  <span class="hl kwd">writeln</span><span class="hl sym">(</span>seqLen<span class="hl sym">);</span>
  <span class="hl slc">//writeln(strlen(seq));</span>

  <span class="hl kwd">FreeMem</span><span class="hl sym">(</span>seq<span class="hl sym">);</span>
<span class="hl kwa">end</span><span class="hl sym">.</span>
