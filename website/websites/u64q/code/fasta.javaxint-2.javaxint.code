<source>
<def></def><com>/*</com><br />
<com> * The Great Computer Language Shootout</com><br />
<com> * http://shootout.alioth.debian.org/</com><br />
<com> *</com><br />
<com> * modified by Mehmet D. AKIN</com><br />
<com> *</com><br />
<com> */</com><def></def><br />
<br />
<kwa>import</kwa> <def>java</def><sym>.</sym><def>io</def><sym>.</sym><def></def><kwc>IOException</kwc><def></def><sym>;</sym><br />
<def></def><kwa>import</kwa> <def>java</def><sym>.</sym><def>io</def><sym>.</sym><def></def><kwc>OutputStream</kwc><def></def><sym>;</sym><br />
<def></def><br />
<kwa>class</kwa> <def>fasta</def> <sym>{</sym><br />
<def></def>    <kwa>public static final</kwa> <def></def><kwb>int</kwb> <def>IM</def> <sym>=</sym> <def></def><num>139968</num><def></def><sym>;</sym><br />
<def></def>    <kwa>public static final</kwa> <def></def><kwb>int</kwb> <def>IA</def> <sym>=</sym> <def></def><num>3877</num><def></def><sym>;</sym><br />
<def></def>    <kwa>public static final</kwa> <def></def><kwb>int</kwb> <def>IC</def> <sym>=</sym> <def></def><num>29573</num><def></def><sym>;</sym><br />
<def></def>    <kwa>public static</kwa> <def></def><kwb>int</kwb> <def>last</def> <sym>=</sym> <def></def><num>42</num><def></def><sym>;</sym><br />
<def></def><br />
    <kwa>public static final</kwa> <def></def><kwb>int</kwb> <def>LINE_LENGTH</def> <sym>=</sym> <def></def><num>60</num><def></def><sym>;</sym><br />
<def></def><br />
    <slc>// pseudo-random number generator</slc><br />
<def></def>    <kwa>public static final</kwa> <def></def><kwb>double</kwb> <def></def><kwd>random</kwd><def></def><sym>(</sym><def></def><kwb>double</kwb> <def>max</def><sym>) {</sym><br />
<def>        last</def> <sym>= (</sym><def>last</def> <sym>*</sym> <def>IA</def> <sym>+</sym> <def>IC</def><sym>) %</sym> <def>IM</def><sym>;</sym><br />
<def></def>        <kwa>return</kwa> <def>max</def> <sym>*</sym> <def>last</def> <sym>/</sym> <def>IM</def><sym>;</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <slc>// Weighted selection from alphabet</slc><br />
<def></def>    <kwa>public static</kwa> <def></def><kwc>String</kwc> <def>ALU</def> <sym>=</sym><br />
<def></def>              <str>&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</str><def></def><br />
            <sym>+</sym> <def></def><str>&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</str><def></def><br />
            <sym>+</sym> <def></def><str>&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</str><def></def><br />
            <sym>+</sym> <def></def><str>&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</str><def></def><br />
            <sym>+</sym> <def></def><str>&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</str><def></def><br />
            <sym>+</sym> <def></def><str>&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</str><def></def><br />
            <sym>+</sym> <def></def><str>&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</str><def></def><sym>;</sym><br />
<def></def>    <kwa>public static</kwa> <def></def><kwb>byte</kwb><def></def><sym>[]</sym> <def>ALUB</def> <sym>=</sym> <def>ALU</def><sym>.</sym><def></def><kwd>getBytes</kwd><def></def><sym>();</sym><br />
<def></def><br />
    <kwa>public static final</kwa> <def>frequency</def><sym>[]</sym> <def>IUB</def> <sym>=</sym> <def></def><kwa>new</kwa> <def>frequency</def><sym>[] {</sym><br />
<def></def>            <kwa>new</kwa> <def></def><kwd>frequency</kwd><def></def><sym>(</sym><def></def><str>'a'</str><def></def><sym>,</sym> <def></def><num>0.27</num><def></def><sym>),</sym><br />
<def></def>            <kwa>new</kwa> <def></def><kwd>frequency</kwd><def></def><sym>(</sym><def></def><str>'c'</str><def></def><sym>,</sym> <def></def><num>0.12</num><def></def><sym>),</sym><br />
<def></def>            <kwa>new</kwa> <def></def><kwd>frequency</kwd><def></def><sym>(</sym><def></def><str>'g'</str><def></def><sym>,</sym> <def></def><num>0.12</num><def></def><sym>),</sym><br />
<def></def>            <kwa>new</kwa> <def></def><kwd>frequency</kwd><def></def><sym>(</sym><def></def><str>'t'</str><def></def><sym>,</sym> <def></def><num>0.27</num><def></def><sym>),</sym><br />
<def></def><br />
            <kwa>new</kwa> <def></def><kwd>frequency</kwd><def></def><sym>(</sym><def></def><str>'B'</str><def></def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>),</sym><br />
<def></def>            <kwa>new</kwa> <def></def><kwd>frequency</kwd><def></def><sym>(</sym><def></def><str>'D'</str><def></def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>),</sym><br />
<def></def>            <kwa>new</kwa> <def></def><kwd>frequency</kwd><def></def><sym>(</sym><def></def><str>'H'</str><def></def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>),</sym><br />
<def></def>            <kwa>new</kwa> <def></def><kwd>frequency</kwd><def></def><sym>(</sym><def></def><str>'K'</str><def></def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>),</sym><br />
<def></def>            <kwa>new</kwa> <def></def><kwd>frequency</kwd><def></def><sym>(</sym><def></def><str>'M'</str><def></def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>),</sym><br />
<def></def>            <kwa>new</kwa> <def></def><kwd>frequency</kwd><def></def><sym>(</sym><def></def><str>'N'</str><def></def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>),</sym><br />
<def></def>            <kwa>new</kwa> <def></def><kwd>frequency</kwd><def></def><sym>(</sym><def></def><str>'R'</str><def></def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>),</sym><br />
<def></def>            <kwa>new</kwa> <def></def><kwd>frequency</kwd><def></def><sym>(</sym><def></def><str>'S'</str><def></def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>),</sym><br />
<def></def>            <kwa>new</kwa> <def></def><kwd>frequency</kwd><def></def><sym>(</sym><def></def><str>'V'</str><def></def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>),</sym><br />
<def></def>            <kwa>new</kwa> <def></def><kwd>frequency</kwd><def></def><sym>(</sym><def></def><str>'W'</str><def></def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>),</sym><br />
<def></def>            <kwa>new</kwa> <def></def><kwd>frequency</kwd><def></def><sym>(</sym><def></def><str>'Y'</str><def></def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>) };</sym><br />
<def></def><br />
    <kwa>public static final</kwa> <def>frequency</def><sym>[]</sym> <def>HomoSapiens</def> <sym>=</sym> <def></def><kwa>new</kwa> <def>frequency</def><sym>[] {</sym><br />
<def></def>            <kwa>new</kwa> <def></def><kwd>frequency</kwd><def></def><sym>(</sym><def></def><str>'a'</str><def></def><sym>,</sym> <def></def><num>0.3029549426680</num><def>d</def><sym>),</sym><br />
<def></def>            <kwa>new</kwa> <def></def><kwd>frequency</kwd><def></def><sym>(</sym><def></def><str>'c'</str><def></def><sym>,</sym> <def></def><num>0.1979883004921</num><def>d</def><sym>),</sym><br />
<def></def>            <kwa>new</kwa> <def></def><kwd>frequency</kwd><def></def><sym>(</sym><def></def><str>'g'</str><def></def><sym>,</sym> <def></def><num>0.1975473066391</num><def>d</def><sym>),</sym><br />
<def></def>            <kwa>new</kwa> <def></def><kwd>frequency</kwd><def></def><sym>(</sym><def></def><str>'t'</str><def></def><sym>,</sym> <def></def><num>0.3015094502008</num><def>d</def><sym>)};</sym><br />
<def></def><br />
    <kwa>public static</kwa> <def></def><kwb>void</kwb> <def></def><kwd>makeCumulative</kwd><def></def><sym>(</sym><def>frequency</def><sym>[]</sym> <def>a</def><sym>) {</sym><br />
<def></def>        <kwb>double</kwb> <def>cp</def> <sym>=</sym> <def></def><num>0.0</num><def></def><sym>;</sym><br />
<def></def>        <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>a</def><sym>.</sym><def>length</def><sym>;</sym> <def>i</def><sym>++) {</sym><br />
<def>            cp</def> <sym>+=</sym> <def>a</def><sym>[</sym><def>i</def><sym>].</sym><def>p</def><sym>;</sym><br />
<def>            a</def><sym>[</sym><def>i</def><sym>].</sym><def>p</def> <sym>=</sym> <def>cp</def><sym>;</sym><br />
<def></def>        <sym>}</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <slc>// naive</slc><br />
<def></def>    <kwa>public final static</kwa> <def></def><kwb>byte</kwb> <def></def><kwd>selectRandom</kwd><def></def><sym>(</sym><def>frequency</def><sym>[]</sym> <def>a</def><sym>) {</sym><br />
<def></def>        <kwb>int</kwb> <def>len</def> <sym>=</sym> <def>a</def><sym>.</sym><def>length</def><sym>;</sym><br />
<def></def>        <kwb>double</kwb> <def>r</def> <sym>=</sym> <def></def><kwd>random</kwd><def></def><sym>(</sym><def></def><num>1.0</num><def></def><sym>);</sym><br />
<def></def>        <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>len</def><sym>;</sym> <def>i</def><sym>++)</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>r</def> <sym>&lt;</sym> <def>a</def><sym>[</sym><def>i</def><sym>].</sym><def>p</def><sym>)</sym><br />
<def></def>                <kwa>return</kwa> <def>a</def><sym>[</sym><def>i</def><sym>].</sym><def>c</def><sym>;</sym><br />
<def></def>        <kwa>return</kwa> <def>a</def><sym>[</sym><def>len</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>].</sym><def>c</def><sym>;</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <kwa>static</kwa> <def></def><kwb>int</kwb> <def>BUFFER_SIZE</def> <sym>=</sym> <def></def><num>1024</num><def></def><sym>;</sym><br />
<def></def>    <kwa>static</kwa> <def></def><kwb>int</kwb> <def>index</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>    <kwa>static</kwa> <def></def><kwb>byte</kwb><def></def><sym>[]</sym> <def>bbuffer</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwb>byte</kwb><def></def><sym>[</sym><def>BUFFER_SIZE</def><sym>];</sym><br />
<def></def>    <kwa>static final</kwa> <def></def><kwb>void</kwb> <def></def><kwd>makeRandomFasta</kwd><def></def><sym>(</sym><def></def><kwc>String</kwc> <def>id</def><sym>,</sym> <def></def><kwc>String</kwc> <def>desc</def><sym>,</sym><def>frequency</def><sym>[]</sym> <def>a</def><sym>,</sym> <def></def><kwb>int</kwb> <def>n</def><sym>,</sym> <def></def><kwc>OutputStream</kwc> <def>writer</def><sym>)</sym> <def></def><kwa>throws</kwa> <def></def><kwc>IOException</kwc><br />
<def></def>    <sym>{</sym><br />
<def>        index</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>        <kwb>int</kwb> <def>m</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>        <kwc>String</kwc> <def>descStr</def> <sym>=</sym> <def></def><str>&quot;&gt;&quot;</str><def></def> <sym>+</sym> <def>id</def> <sym>+</sym> <def></def><str>&quot; &quot;</str><def></def> <sym>+</sym> <def>desc</def> <sym>+</sym> <def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>;</sym><br />
<def>        writer</def><sym>.</sym><def></def><kwd>write</kwd><def></def><sym>(</sym><def>descStr</def><sym>.</sym><def></def><kwd>getBytes</kwd><def></def><sym>());</sym><br />
<def></def>        <kwa>while</kwa> <def></def><sym>(</sym><def>n</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>) {</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>n</def> <sym>&lt;</sym> <def>LINE_LENGTH</def><sym>)</sym> <def>m</def> <sym>=</sym> <def>n</def><sym>;</sym>  <def></def><kwa>else</kwa> <def>m</def> <sym>=</sym> <def>LINE_LENGTH</def><sym>;</sym><br />
<def></def>            <kwa>if</kwa><def></def><sym>(</sym><def>BUFFER_SIZE</def> <sym>-</sym> <def>index</def> <sym>&lt;</sym> <def>m</def><sym>){</sym><br />
<def>                writer</def><sym>.</sym><def></def><kwd>write</kwd><def></def><sym>(</sym><def>bbuffer</def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>index</def><sym>);</sym><br />
<def>                index</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>            <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>m</def><sym>;</sym> <def>i</def><sym>++) {</sym><br />
<def>                bbuffer</def><sym>[</sym><def>index</def><sym>++] =</sym> <def></def><kwd>selectRandom</kwd><def></def><sym>(</sym><def>a</def><sym>);</sym><br />
<def></def>            <sym>}</sym><br />
<def>            bbuffer</def><sym>[</sym><def>index</def><sym>++] =</sym> <def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>;</sym><br />
<def>            n</def> <sym>-=</sym> <def>LINE_LENGTH</def><sym>;</sym><br />
<def></def>        <sym>}</sym><br />
<def></def>        <kwa>if</kwa><def></def><sym>(</sym><def>index</def> <sym>!=</sym> <def></def><num>0</num><def></def><sym>)</sym> <def>writer</def><sym>.</sym><def></def><kwd>write</kwd><def></def><sym>(</sym><def>bbuffer</def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>index</def><sym>);</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <kwa>static final</kwa> <def></def><kwb>void</kwb> <def></def><kwd>makeRepeatFasta</kwd><def></def><sym>(</sym><def></def><kwc>String</kwc> <def>id</def><sym>,</sym> <def></def><kwc>String</kwc> <def>desc</def><sym>,</sym> <def></def><kwc>String</kwc> <def>alu</def><sym>,</sym> <def></def><kwb>int</kwb> <def>n</def><sym>,</sym> <def></def><kwc>OutputStream</kwc> <def>writer</def><sym>)</sym> <def></def><kwa>throws</kwa> <def></def><kwc>IOException</kwc><br />
<def></def>    <sym>{</sym><br />
<def>        index</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>        <kwb>int</kwb> <def>m</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>        <kwb>int</kwb> <def>k</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>        <kwb>int</kwb> <def>kn</def> <sym>=</sym> <def>ALUB</def><sym>.</sym><def>length</def><sym>;</sym><br />
<def></def>        <kwc>String</kwc> <def>descStr</def> <sym>=</sym> <def></def><str>&quot;&gt;&quot;</str><def></def> <sym>+</sym> <def>id</def> <sym>+</sym> <def></def><str>&quot; &quot;</str><def></def> <sym>+</sym> <def>desc</def> <sym>+</sym> <def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>;</sym><br />
<def>        writer</def><sym>.</sym><def></def><kwd>write</kwd><def></def><sym>(</sym><def>descStr</def><sym>.</sym><def></def><kwd>getBytes</kwd><def></def><sym>());</sym><br />
<def></def>        <kwa>while</kwa> <def></def><sym>(</sym><def>n</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>) {</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>n</def> <sym>&lt;</sym> <def>LINE_LENGTH</def><sym>)</sym> <def>m</def> <sym>=</sym> <def>n</def><sym>;</sym> <def></def><kwa>else</kwa> <def>m</def> <sym>=</sym> <def>LINE_LENGTH</def><sym>;</sym><br />
<def></def>            <kwa>if</kwa><def></def><sym>(</sym><def>BUFFER_SIZE</def> <sym>-</sym> <def>index</def> <sym>&lt;</sym> <def>m</def><sym>){</sym><br />
<def>                writer</def><sym>.</sym><def></def><kwd>write</kwd><def></def><sym>(</sym><def>bbuffer</def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>index</def><sym>);</sym><br />
<def>                index</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>            <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>m</def><sym>;</sym> <def>i</def><sym>++) {</sym><br />
<def></def>                <kwa>if</kwa> <def></def><sym>(</sym><def>k</def> <sym>==</sym> <def>kn</def><sym>)</sym> <def>k</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>                bbuffer</def><sym>[</sym><def>index</def><sym>++] =</sym> <def>ALUB</def><sym>[</sym><def>k</def><sym>];</sym><br />
<def>                k</def><sym>++;</sym><br />
<def></def>            <sym>}</sym><br />
<def>            bbuffer</def><sym>[</sym><def>index</def><sym>++] =</sym> <def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>;</sym><br />
<def>            n</def> <sym>-=</sym> <def>LINE_LENGTH</def><sym>;</sym><br />
<def></def>        <sym>}</sym><br />
<def></def>        <kwa>if</kwa><def></def><sym>(</sym><def>index</def> <sym>!=</sym> <def></def><num>0</num><def></def><sym>)</sym> <def>writer</def><sym>.</sym><def></def><kwd>write</kwd><def></def><sym>(</sym><def>bbuffer</def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>index</def><sym>);</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <kwa>public static</kwa> <def></def><kwb>void</kwb> <def></def><kwd>main</kwd><def></def><sym>(</sym><def></def><kwc>String</kwc><def></def><sym>[]</sym> <def>args</def><sym>)</sym> <def></def><kwa>throws</kwa> <def></def><kwc>IOException</kwc> <def></def><sym>{</sym><br />
<def></def>        <kwd>makeCumulative</kwd><def></def><sym>(</sym><def>HomoSapiens</def><sym>);</sym><br />
<def></def>        <kwd>makeCumulative</kwd><def></def><sym>(</sym><def>IUB</def><sym>);</sym><br />
<def></def>        <kwb>int</kwb> <def>n</def> <sym>=</sym> <def></def><num>2500000</num><def></def><sym>;</sym><br />
<def></def>        <kwa>if</kwa> <def></def><sym>(</sym><def>args</def><sym>.</sym><def>length</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>)</sym><br />
<def>            n</def> <sym>=</sym> <def></def><kwc>Integer</kwc><def></def><sym>.</sym><def></def><kwd>parseInt</kwd><def></def><sym>(</sym><def>args</def><sym>[</sym><def></def><num>0</num><def></def><sym>]);</sym><br />
<def></def>        <kwc>OutputStream</kwc> <def>out</def> <sym>=</sym> <def></def><kwc>System</kwc><def></def><sym>.</sym><def>out</def><sym>;</sym><br />
<def></def>        <kwd>makeRepeatFasta</kwd><def></def><sym>(</sym><def></def><str>&quot;ONE&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;Homo sapiens alu&quot;</str><def></def><sym>,</sym> <def>ALU</def><sym>,</sym> <def>n</def> <sym>*</sym> <def></def><num>2</num><def></def><sym>,</sym> <def>out</def><sym>);</sym><br />
<def></def>        <kwd>makeRandomFasta</kwd><def></def><sym>(</sym><def></def><str>&quot;TWO&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;IUB ambiguity codes&quot;</str><def></def><sym>,</sym> <def>IUB</def><sym>,</sym> <def>n</def> <sym>*</sym> <def></def><num>3</num><def></def><sym>,</sym> <def>out</def><sym>);</sym><br />
<def></def>        <kwd>makeRandomFasta</kwd><def></def><sym>(</sym><def></def><str>&quot;THREE&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;Homo sapiens frequency&quot;</str><def></def><sym>,</sym> <def>HomoSapiens</def><sym>,</sym> <def>n</def> <sym>*</sym> <def></def><num>5</num><def></def><sym>,</sym> <def>out</def><sym>);</sym><br />
<def>        out</def><sym>.</sym><def></def><kwd>close</kwd><def></def><sym>();</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <kwa>public static class</kwa> <def>frequency</def> <sym>{</sym><br />
<def></def>        <kwa>public</kwa> <def></def><kwb>byte</kwb> <def>c</def><sym>;</sym><br />
<def></def>        <kwa>public</kwa> <def></def><kwb>double</kwb> <def>p</def><sym>;</sym><br />
<def></def><br />
        <kwa>public</kwa> <def></def><kwd>frequency</kwd><def></def><sym>(</sym><def></def><kwb>char</kwb> <def>c</def><sym>,</sym> <def></def><kwb>double</kwb> <def>p</def><sym>) {</sym><br />
<def></def>            <kwa>this</kwa><def></def><sym>.</sym><def>c</def> <sym>= (</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def>c</def><sym>;</sym><br />
<def></def>            <kwa>this</kwa><def></def><sym>.</sym><def>p</def> <sym>=</sym> <def>p</def><sym>;</sym><br />
<def></def>        <sym>}</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
