<source>
<def></def><com>/* The Computer Language Benchmarks Game</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com></com><br />
<com>   contributed by Michael Barker</com><br />
<com>   based on a contribution by Luzius Meisser</com><br />
<com> */</com><def></def><br />
<br />
<br />
<com>/**</com><br />
<com> * This implementation uses standard Java threading (native threads).  The</com><br />
<com> * interesting part is that if you remove the Thread.yeild() from the</com><br />
<com> * Future&lt;T&gt;.getItem() method the program slows by up to a factor 10.</com><br />
<com> *</com><br />
<com> * This implementation uses the basic design by Luzius Meisser from the orginal</com><br />
<com> * chameneos shootout, but instead of spinning while waiting for the other</com><br />
<com> * creature to arrive it blocks the thread.</com><br />
<com> */</com><def></def><br />
<kwa>public class</kwa> <def>chameneosredux</def> <sym>{</sym><br />
<def><br />
    enum Colour</def> <sym>{</sym><br />
<def>        blue</def><sym>,</sym><br />
<def>        red</def><sym>,</sym><br />
<def>        yellow</def><br />
    <sym>}</sym><br />
<def></def><br />
    <kwa>private static</kwa> <def>Colour</def> <kwd>doCompliment</kwd><def></def><sym>(</sym><def>Colour c1</def><sym>,</sym> <def>Colour c2</def><sym>) {</sym><br />
<def></def>        <kwa>switch</kwa> <def></def><sym>(</sym><def>c1</def><sym>) {</sym><br />
<def></def>        <kwa>case</kwa> <def>blue</def><sym>:</sym><br />
<def></def>            <kwa>switch</kwa> <def></def><sym>(</sym><def>c2</def><sym>) {</sym><br />
<def></def>            <kwa>case</kwa> <def>blue</def><sym>:</sym><br />
<def></def>                <kwa>return</kwa> <def>Colour</def><sym>.</sym><def>blue</def><sym>;</sym><br />
<def></def>            <kwa>case</kwa> <def>red</def><sym>:</sym><br />
<def></def>                <kwa>return</kwa> <def>Colour</def><sym>.</sym><def>yellow</def><sym>;</sym><br />
<def></def>            <kwa>case</kwa> <def>yellow</def><sym>:</sym><br />
<def></def>                <kwa>return</kwa> <def>Colour</def><sym>.</sym><def>red</def><sym>;</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>        <kwa>case</kwa> <def>red</def><sym>:</sym><br />
<def></def>            <kwa>switch</kwa> <def></def><sym>(</sym><def>c2</def><sym>) {</sym><br />
<def></def>            <kwa>case</kwa> <def>blue</def><sym>:</sym><br />
<def></def>                <kwa>return</kwa> <def>Colour</def><sym>.</sym><def>yellow</def><sym>;</sym><br />
<def></def>            <kwa>case</kwa> <def>red</def><sym>:</sym><br />
<def></def>                <kwa>return</kwa> <def>Colour</def><sym>.</sym><def>red</def><sym>;</sym><br />
<def></def>            <kwa>case</kwa> <def>yellow</def><sym>:</sym><br />
<def></def>                <kwa>return</kwa> <def>Colour</def><sym>.</sym><def>blue</def><sym>;</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>        <kwa>case</kwa> <def>yellow</def><sym>:</sym><br />
<def></def>            <kwa>switch</kwa> <def></def><sym>(</sym><def>c2</def><sym>) {</sym><br />
<def></def>            <kwa>case</kwa> <def>blue</def><sym>:</sym><br />
<def></def>                <kwa>return</kwa> <def>Colour</def><sym>.</sym><def>red</def><sym>;</sym><br />
<def></def>            <kwa>case</kwa> <def>red</def><sym>:</sym><br />
<def></def>                <kwa>return</kwa> <def>Colour</def><sym>.</sym><def>blue</def><sym>;</sym><br />
<def></def>            <kwa>case</kwa> <def>yellow</def><sym>:</sym><br />
<def></def>                <kwa>return</kwa> <def>Colour</def><sym>.</sym><def>yellow</def><sym>;</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>        <sym>}</sym><br />
<def></def><br />
        <kwa>throw new</kwa> <def></def><kwc>RuntimeException</kwc><def></def><sym>(</sym><def></def><str>&quot;Error&quot;</str><def></def><sym>);</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <kwa>static class</kwa> <def>MeetingPlace</def> <sym>{</sym><br />
<def></def><br />
        <kwa>private</kwa> <def></def><kwb>int</kwb> <def>meetingsLeft</def><sym>;</sym><br />
<def></def><br />
        <kwa>public</kwa> <def></def><kwd>MeetingPlace</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>meetings</def><sym>) {</sym><br />
<def></def>            <kwa>this</kwa><def></def><sym>.</sym><def>meetingsLeft</def> <sym>=</sym> <def>meetings</def><sym>;</sym><br />
<def></def>        <sym>}</sym><br />
<def></def><br />
        <kwa>private</kwa> <def>Colour firstColour</def> <sym>=</sym> <def>null</def><sym>;</sym><br />
<def></def>        <kwa>private</kwa> <def></def><kwb>int</kwb> <def>firstId</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>        <kwc>Future</kwc><def></def><sym>&lt;</sym><def>Pair</def><sym>&gt;</sym> <def>current</def><sym>;</sym><br />
<def></def><br />
        <kwa>public</kwa> <def>Pair</def> <kwd>meet</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>id</def><sym>,</sym> <def>Colour c</def><sym>)</sym> <def></def><kwa>throws</kwa> <def></def><kwc>Exception</kwc> <def></def><sym>{</sym><br />
<def></def>            <kwc>Future</kwc><def></def><sym>&lt;</sym><def>Pair</def><sym>&gt;</sym> <def>newPair</def><sym>;</sym><br />
<def></def>            <kwa>synchronized</kwa> <def></def><sym>(</sym><def></def><kwa>this</kwa><def></def><sym>) {</sym><br />
<def></def>                <kwa>if</kwa> <def></def><sym>(</sym><def>meetingsLeft</def> <sym>==</sym> <def></def><num>0</num><def></def><sym>) {</sym><br />
<def></def>                    <kwa>throw new</kwa> <def></def><kwc>Exception</kwc><def></def><sym>(</sym><def></def><str>&quot;Finished&quot;</str><def></def><sym>);</sym><br />
<def></def>                <sym>}</sym> <def></def><kwa>else</kwa> <def></def><sym>{</sym><br />
<def></def>                    <kwa>if</kwa> <def></def><sym>(</sym><def>firstColour</def> <sym>==</sym> <def>null</def><sym>) {</sym><br />
<def>                        firstColour</def> <sym>=</sym> <def>c</def><sym>;</sym><br />
<def>                        firstId</def> <sym>=</sym> <def>id</def><sym>;</sym><br />
<def>                        current</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwc>Future</kwc><def></def><sym>&lt;</sym><def>Pair</def><sym>&gt;();</sym><br />
<def></def>                    <sym>}</sym> <def></def><kwa>else</kwa> <def></def><sym>{</sym><br />
<def>                        Colour newColour</def> <sym>=</sym> <def></def><kwd>doCompliment</kwd><def></def><sym>(</sym><def>c</def><sym>,</sym> <def>firstColour</def><sym>);</sym><br />
<def>                        current</def><sym>.</sym><def></def><kwd>setItem</kwd><def></def><sym>(</sym><def></def><kwa>new</kwa> <def></def><kwd>Pair</kwd><def></def><sym>(</sym><def>id</def> <sym>==</sym> <def>firstId</def><sym>,</sym> <def>newColour</def><sym>));</sym><br />
<def>                        firstColour</def> <sym>=</sym> <def>null</def><sym>;</sym><br />
<def>                        meetingsLeft</def><sym>--;</sym><br />
<def></def>                    <sym>}</sym><br />
<def>                    newPair</def> <sym>=</sym> <def>current</def><sym>;</sym><br />
<def></def>                <sym>}</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>            <kwa>return</kwa> <def>newPair</def><sym>.</sym><def></def><kwd>getItem</kwd><def></def><sym>();</sym><br />
<def></def><br />
        <sym>}</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <kwa>public static class</kwa> <def></def><kwc>Future</kwc><def></def><sym>&lt;</sym><def>T</def><sym>&gt; {</sym><br />
<def></def><br />
        <kwa>private volatile</kwa> <def>T t</def><sym>;</sym><br />
<def></def><br />
        <kwa>public</kwa> <def>T</def> <kwd>getItem</kwd><def></def><sym>()</sym> <def></def><kwa>throws</kwa> <def></def><kwc>InterruptedException</kwc> <def></def><sym>{</sym><br />
<def></def>            <slc>// Without this yield statement, performance suffers.</slc><br />
<def></def>            <kwc>Thread</kwc><def></def><sym>.</sym><def></def><kwd>yield</kwd><def></def><sym>();</sym><br />
<def></def>            <kwa>synchronized</kwa> <def></def><sym>(</sym><def></def><kwa>this</kwa><def></def><sym>) {</sym><br />
<def></def>                <kwa>while</kwa> <def></def><sym>(</sym><def>t</def> <sym>==</sym> <def>null</def><sym>) {</sym><br />
<def></def>                    <kwd>wait</kwd><def></def><sym>();</sym><br />
<def></def>                <sym>}</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>            <kwa>return</kwa> <def>t</def><sym>;</sym><br />
<def></def>        <sym>}</sym><br />
<def></def><br />
        <kwa>public</kwa> <def></def><kwb>void</kwb> <def></def><kwd>setItem</kwd><def></def><sym>(</sym><def>T t</def><sym>) {</sym><br />
<def></def>            <kwa>synchronized</kwa> <def></def><sym>(</sym><def></def><kwa>this</kwa><def></def><sym>) {</sym><br />
<def></def>                <kwa>this</kwa><def></def><sym>.</sym><def>t</def> <sym>=</sym> <def>t</def><sym>;</sym><br />
<def></def>                <kwd>notify</kwd><def></def><sym>();</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>        <sym>}</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
<br />
    <kwa>static class</kwa> <def>Creature</def> <kwa>implements</kwa> <def></def><kwc>Runnable</kwc> <def></def><sym>{</sym><br />
<def></def><br />
        <kwa>private final</kwa> <def>MeetingPlace place</def><sym>;</sym><br />
<def></def>        <kwa>private</kwa> <def></def><kwb>int</kwb> <def>count</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>        <kwa>private</kwa> <def></def><kwb>int</kwb> <def>sameCount</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>        <kwa>private</kwa> <def>Colour colour</def><sym>;</sym><br />
<def></def>        <kwa>private</kwa> <def></def><kwb>int</kwb> <def>id</def><sym>;</sym><br />
<def></def><br />
        <kwa>public</kwa> <def></def><kwd>Creature</kwd><def></def><sym>(</sym><def>MeetingPlace place</def><sym>,</sym> <def>Colour colour</def><sym>) {</sym><br />
<def></def>            <kwa>this</kwa><def></def><sym>.</sym><def>place</def> <sym>=</sym> <def>place</def><sym>;</sym><br />
<def></def>            <kwa>this</kwa><def></def><sym>.</sym><def>id</def> <sym>=</sym> <def></def><kwc>System</kwc><def></def><sym>.</sym><def></def><kwd>identityHashCode</kwd><def></def><sym>(</sym><def></def><kwa>this</kwa><def></def><sym>);</sym><br />
<def></def>            <kwa>this</kwa><def></def><sym>.</sym><def>colour</def> <sym>=</sym> <def>colour</def><sym>;</sym><br />
<def></def>        <sym>}</sym><br />
<def></def><br />
        <kwa>public</kwa> <def></def><kwb>void</kwb> <def></def><kwd>run</kwd><def></def><sym>() {</sym><br />
<def></def>            <kwa>try</kwa> <def></def><sym>{</sym><br />
<def></def><br />
                <kwa>while</kwa> <def></def><sym>(</sym><def>true</def><sym>) {</sym><br />
<def>                    Pair p</def> <sym>=</sym> <def>place</def><sym>.</sym><def></def><kwd>meet</kwd><def></def><sym>(</sym><def>id</def><sym>,</sym> <def>colour</def><sym>);</sym><br />
<def>                    colour</def> <sym>=</sym> <def>p</def><sym>.</sym><def>colour</def><sym>;</sym><br />
<def></def>                    <kwa>if</kwa> <def></def><sym>(</sym><def>p</def><sym>.</sym><def>sameId</def><sym>) {</sym><br />
<def>                        sameCount</def><sym>++;</sym><br />
<def></def>                    <sym>}</sym><br />
<def>                    count</def><sym>++;</sym><br />
<def></def>                <sym>}</sym><br />
<def></def><br />
            <sym>}</sym> <def></def><kwa>catch</kwa> <def></def><sym>(</sym><def></def><kwc>Exception</kwc> <def>e</def><sym>) {}</sym><br />
<def></def>        <sym>}</sym><br />
<def></def><br />
        <kwa>public</kwa> <def></def><kwb>int</kwb> <def></def><kwd>getCount</kwd><def></def><sym>() {</sym><br />
<def></def>            <kwa>return</kwa> <def>count</def><sym>;</sym><br />
<def></def>        <sym>}</sym><br />
<def></def><br />
        <kwa>public</kwa> <def></def><kwc>String</kwc> <def></def><kwd>toString</kwd><def></def><sym>() {</sym><br />
<def></def>            <kwa>return</kwa> <def></def><kwc>String</kwc><def></def><sym>.</sym><def></def><kwd>valueOf</kwd><def></def><sym>(</sym><def>count</def><sym>) +</sym> <def></def><kwd>getNumber</kwd><def></def><sym>(</sym><def>sameCount</def><sym>);</sym><br />
<def></def>        <sym>}</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <kwa>private static</kwa> <def></def><kwb>void</kwb> <def></def><kwd>run</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>n</def><sym>,</sym> <def>Colour</def><sym>...</sym><def>colours</def><sym>) {</sym><br />
<def>        MeetingPlace place</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>MeetingPlace</kwd><def></def><sym>(</sym><def>n</def><sym>);</sym><br />
<def>        Creature</def><sym>[]</sym> <def>creatures</def> <sym>=</sym> <def></def><kwa>new</kwa> <def>Creature</def><sym>[</sym><def>colours</def><sym>.</sym><def>length</def><sym>];</sym><br />
<def></def>        <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>colours</def><sym>.</sym><def>length</def><sym>;</sym> <def>i</def><sym>++) {</sym><br />
<def></def>            <kwc>System</kwc><def></def><sym>.</sym><def>out</def><sym>.</sym><def></def><kwd>print</kwd><def></def><sym>(</sym><def></def><str>&quot; &quot;</str><def></def> <sym>+</sym> <def>colours</def><sym>[</sym><def>i</def><sym>]);</sym><br />
<def>            creatures</def><sym>[</sym><def>i</def><sym>] =</sym> <def></def><kwa>new</kwa> <def></def><kwd>Creature</kwd><def></def><sym>(</sym><def>place</def><sym>,</sym> <def>colours</def><sym>[</sym><def>i</def><sym>]);</sym><br />
<def></def>        <sym>}</sym><br />
<def></def>        <kwc>System</kwc><def></def><sym>.</sym><def>out</def><sym>.</sym><def></def><kwd>println</kwd><def></def><sym>();</sym><br />
<def></def>        <kwc>Thread</kwc><def></def><sym>[]</sym> <def>ts</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwc>Thread</kwc><def></def><sym>[</sym><def>colours</def><sym>.</sym><def>length</def><sym>];</sym><br />
<def></def>        <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>colours</def><sym>.</sym><def>length</def><sym>;</sym> <def>i</def><sym>++) {</sym><br />
<def>            ts</def><sym>[</sym><def>i</def><sym>] =</sym> <def></def><kwa>new</kwa> <def></def><kwc>Thread</kwc><def></def><sym>(</sym><def>creatures</def><sym>[</sym><def>i</def><sym>]);</sym><br />
<def>            ts</def><sym>[</sym><def>i</def><sym>].</sym><def></def><kwd>start</kwd><def></def><sym>();</sym><br />
<def></def>        <sym>}</sym><br />
<def></def><br />
        <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwc>Thread</kwc> <def>t</def> <sym>:</sym> <def>ts</def><sym>) {</sym><br />
<def></def>            <kwa>try</kwa> <def></def><sym>{</sym><br />
<def>                t</def><sym>.</sym><def></def><kwd>join</kwd><def></def><sym>();</sym><br />
<def></def>            <sym>}</sym> <def></def><kwa>catch</kwa> <def></def><sym>(</sym><def></def><kwc>InterruptedException</kwc> <def>e</def><sym>) {</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>        <sym>}</sym><br />
<def></def><br />
        <kwb>int</kwb> <def>total</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>        <kwa>for</kwa> <def></def><sym>(</sym><def>Creature creature</def> <sym>:</sym> <def>creatures</def><sym>) {</sym><br />
<def></def>            <kwc>System</kwc><def></def><sym>.</sym><def>out</def><sym>.</sym><def></def><kwd>println</kwd><def></def><sym>(</sym><def>creature</def><sym>);</sym><br />
<def>            total</def> <sym>+=</sym> <def>creature</def><sym>.</sym><def></def><kwd>getCount</kwd><def></def><sym>();</sym><br />
<def></def>        <sym>}</sym><br />
<def></def>        <kwc>System</kwc><def></def><sym>.</sym><def>out</def><sym>.</sym><def></def><kwd>println</kwd><def></def><sym>(</sym><def></def><kwd>getNumber</kwd><def></def><sym>(</sym><def>total</def><sym>));</sym><br />
<def></def>        <kwc>System</kwc><def></def><sym>.</sym><def>out</def><sym>.</sym><def></def><kwd>println</kwd><def></def><sym>();</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <kwa>public static</kwa> <def></def><kwb>void</kwb> <def></def><kwd>main</kwd><def></def><sym>(</sym><def></def><kwc>String</kwc><def></def><sym>[]</sym> <def>args</def><sym>) {</sym><br />
<def></def><br />
        <kwb>int</kwb> <def>n</def> <sym>=</sym> <def></def><num>600</num><def></def><sym>;</sym><br />
<def></def>        <kwa>try</kwa> <def></def><sym>{</sym><br />
<def>            n</def> <sym>=</sym> <def></def><kwc>Integer</kwc><def></def><sym>.</sym><def></def><kwd>parseInt</kwd><def></def><sym>(</sym><def>args</def><sym>[</sym><def></def><num>0</num><def></def><sym>]);</sym><br />
<def></def>        <sym>}</sym> <def></def><kwa>catch</kwa> <def></def><sym>(</sym><def></def><kwc>Exception</kwc> <def>e</def><sym>) {</sym><br />
<def></def>        <sym>}</sym><br />
<def></def><br />
        <kwd>printColours</kwd><def></def><sym>();</sym><br />
<def></def>        <kwc>System</kwc><def></def><sym>.</sym><def>out</def><sym>.</sym><def></def><kwd>println</kwd><def></def><sym>();</sym><br />
<def></def>        <kwd>run</kwd><def></def><sym>(</sym><def>n</def><sym>,</sym> <def>Colour</def><sym>.</sym><def>blue</def><sym>,</sym> <def>Colour</def><sym>.</sym><def>red</def><sym>,</sym> <def>Colour</def><sym>.</sym><def>yellow</def><sym>);</sym><br />
<def></def>        <kwd>run</kwd><def></def><sym>(</sym><def>n</def><sym>,</sym> <def>Colour</def><sym>.</sym><def>blue</def><sym>,</sym> <def>Colour</def><sym>.</sym><def>red</def><sym>,</sym> <def>Colour</def><sym>.</sym><def>yellow</def><sym>,</sym> <def>Colour</def><sym>.</sym><def>red</def><sym>,</sym> <def>Colour</def><sym>.</sym><def>yellow</def><sym>,</sym><br />
<def>                Colour</def><sym>.</sym><def>blue</def><sym>,</sym> <def>Colour</def><sym>.</sym><def>red</def><sym>,</sym> <def>Colour</def><sym>.</sym><def>yellow</def><sym>,</sym> <def>Colour</def><sym>.</sym><def>red</def><sym>,</sym> <def>Colour</def><sym>.</sym><def>blue</def><sym>);</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <kwa>public static class</kwa> <def>Pair</def> <sym>{</sym><br />
<def></def>        <kwa>public final</kwa> <def></def><kwb>boolean</kwb> <def>sameId</def><sym>;</sym><br />
<def></def>        <kwa>public final</kwa> <def>Colour colour</def><sym>;</sym><br />
<def></def><br />
        <kwa>public</kwa> <def></def><kwd>Pair</kwd><def></def><sym>(</sym><def></def><kwb>boolean</kwb> <def>sameId</def><sym>,</sym> <def>Colour c</def><sym>) {</sym><br />
<def></def>            <kwa>this</kwa><def></def><sym>.</sym><def>sameId</def> <sym>=</sym> <def>sameId</def><sym>;</sym><br />
<def></def>            <kwa>this</kwa><def></def><sym>.</sym><def>colour</def> <sym>=</sym> <def>c</def><sym>;</sym><br />
<def></def>        <sym>}</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <kwa>private static final</kwa> <def></def><kwc>String</kwc><def></def><sym>[]</sym> <def>NUMBERS</def> <sym>= {</sym><br />
<def></def>        <str>&quot;zero&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;one&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;two&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;three&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;four&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;five&quot;</str><def></def><sym>,</sym><br />
<def></def>        <str>&quot;six&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;seven&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;eight&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;nine&quot;</str><def></def><br />
    <sym>};</sym><br />
<def></def><br />
    <kwa>private static</kwa> <def></def><kwc>String</kwc> <def></def><kwd>getNumber</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>n</def><sym>) {</sym><br />
<def></def>        <kwc>StringBuilder</kwc> <def>sb</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwc>StringBuilder</kwc><def></def><sym>();</sym><br />
<def></def>        <kwc>String</kwc> <def>nStr</def> <sym>=</sym> <def></def><kwc>String</kwc><def></def><sym>.</sym><def></def><kwd>valueOf</kwd><def></def><sym>(</sym><def>n</def><sym>);</sym><br />
<def></def>        <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>nStr</def><sym>.</sym><def></def><kwd>length</kwd><def></def><sym>();</sym> <def>i</def><sym>++) {</sym><br />
<def>            sb</def><sym>.</sym><def></def><kwd>append</kwd><def></def><sym>(</sym><def></def><str>&quot; &quot;</str><def></def><sym>);</sym><br />
<def>            sb</def><sym>.</sym><def></def><kwd>append</kwd><def></def><sym>(</sym><def>NUMBERS</def><sym>[</sym><def></def><kwc>Character</kwc><def></def><sym>.</sym><def></def><kwd>getNumericValue</kwd><def></def><sym>(</sym><def>nStr</def><sym>.</sym><def></def><kwd>charAt</kwd><def></def><sym>(</sym><def>i</def><sym>))]);</sym><br />
<def></def>        <sym>}</sym><br />
<def></def><br />
        <kwa>return</kwa> <def>sb</def><sym>.</sym><def></def><kwd>toString</kwd><def></def><sym>();</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <kwa>private static</kwa> <def></def><kwb>void</kwb> <def></def><kwd>printColours</kwd><def></def><sym>() {</sym><br />
<def></def>        <kwd>printColours</kwd><def></def><sym>(</sym><def>Colour</def><sym>.</sym><def>blue</def><sym>,</sym> <def>Colour</def><sym>.</sym><def>blue</def><sym>);</sym><br />
<def></def>        <kwd>printColours</kwd><def></def><sym>(</sym><def>Colour</def><sym>.</sym><def>blue</def><sym>,</sym> <def>Colour</def><sym>.</sym><def>red</def><sym>);</sym><br />
<def></def>        <kwd>printColours</kwd><def></def><sym>(</sym><def>Colour</def><sym>.</sym><def>blue</def><sym>,</sym> <def>Colour</def><sym>.</sym><def>yellow</def><sym>);</sym><br />
<def></def>        <kwd>printColours</kwd><def></def><sym>(</sym><def>Colour</def><sym>.</sym><def>red</def><sym>,</sym> <def>Colour</def><sym>.</sym><def>blue</def><sym>);</sym><br />
<def></def>        <kwd>printColours</kwd><def></def><sym>(</sym><def>Colour</def><sym>.</sym><def>red</def><sym>,</sym> <def>Colour</def><sym>.</sym><def>red</def><sym>);</sym><br />
<def></def>        <kwd>printColours</kwd><def></def><sym>(</sym><def>Colour</def><sym>.</sym><def>red</def><sym>,</sym> <def>Colour</def><sym>.</sym><def>yellow</def><sym>);</sym><br />
<def></def>        <kwd>printColours</kwd><def></def><sym>(</sym><def>Colour</def><sym>.</sym><def>yellow</def><sym>,</sym> <def>Colour</def><sym>.</sym><def>blue</def><sym>);</sym><br />
<def></def>        <kwd>printColours</kwd><def></def><sym>(</sym><def>Colour</def><sym>.</sym><def>yellow</def><sym>,</sym> <def>Colour</def><sym>.</sym><def>red</def><sym>);</sym><br />
<def></def>        <kwd>printColours</kwd><def></def><sym>(</sym><def>Colour</def><sym>.</sym><def>yellow</def><sym>,</sym> <def>Colour</def><sym>.</sym><def>yellow</def><sym>);</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <kwa>private static</kwa> <def></def><kwb>void</kwb> <def></def><kwd>printColours</kwd><def></def><sym>(</sym><def>Colour c1</def><sym>,</sym> <def>Colour c2</def><sym>) {</sym><br />
<def></def>        <kwc>System</kwc><def></def><sym>.</sym><def>out</def><sym>.</sym><def></def><kwd>println</kwd><def></def><sym>(</sym><def>c1</def> <sym>+</sym> <def></def><str>&quot; + &quot;</str><def></def> <sym>+</sym> <def>c2</def> <sym>+</sym> <def></def><str>&quot; -&gt; &quot;</str><def></def> <sym>+</sym> <def></def><kwd>doCompliment</kwd><def></def><sym>(</sym><def>c1</def><sym>,</sym> <def>c2</def><sym>));</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
<br />
<sym>}</sym><def></def><br />
</source>
