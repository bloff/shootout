<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   converted to C++ from D by Rafal Rusin</span>
<span class="hl com">   modified by Vaclav Haisman</span>
<span class="hl com">   compile: g++ -O2 -o fasta fasta.cpp</span>
<span class="hl com">*/</span>

<span class="hl dir">#include &lt;algorithm&gt;</span>
<span class="hl dir">#include &lt;memory&gt;</span>
<span class="hl dir">#include &lt;vector&gt;</span>
<span class="hl dir">#include &lt;numeric&gt;</span>
<span class="hl dir">#include &lt;cstdio&gt;</span>

<span class="hl kwa">using namespace</span> std<span class="hl sym">;</span>

<span class="hl kwb">static int const</span> IM <span class="hl sym">=</span> <span class="hl num">139968</span><span class="hl sym">,</span> IA <span class="hl sym">=</span> <span class="hl num">3877</span><span class="hl sym">,</span> IC <span class="hl sym">=</span> <span class="hl num">29573</span><span class="hl sym">;</span>
<span class="hl kwb">static int</span> last <span class="hl sym">=</span> <span class="hl num">42</span><span class="hl sym">;</span>

<span class="hl kwc">inline</span>
<span class="hl kwb">double</span>
<span class="hl kwd">genRandom</span><span class="hl sym">(</span><span class="hl kwb">double</span> max<span class="hl sym">)</span>
<span class="hl sym">{</span>
  <span class="hl kwa">return</span><span class="hl sym">(</span>max <span class="hl sym">* (</span>last <span class="hl sym">= (</span>last <span class="hl sym">*</span> IA <span class="hl sym">+</span> IC<span class="hl sym">) %</span> IM<span class="hl sym">) /</span> IM<span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwb">struct</span> IUB
<span class="hl sym">{</span>
  <span class="hl kwb">char</span> c<span class="hl sym">;</span>
  <span class="hl kwb">double</span> p<span class="hl sym">;</span>
<span class="hl sym">};</span>

<span class="hl kwb">struct</span> IUB_accum
  <span class="hl sym">:</span> <span class="hl kwc">public</span> binary_function<span class="hl sym">&lt;</span>IUB <span class="hl kwb">const</span> <span class="hl sym">&amp;,</span> IUB<span class="hl sym">,</span> IUB<span class="hl sym">&gt;</span>
<span class="hl sym">{</span>
  result_type
  <span class="hl kwc">operator</span> <span class="hl sym">() (</span>first_argument_type a<span class="hl sym">,</span> second_argument_type b<span class="hl sym">)</span> <span class="hl kwb">const</span>
  <span class="hl sym">{</span>
    b<span class="hl sym">.</span>p <span class="hl sym">+=</span> a<span class="hl sym">.</span>p<span class="hl sym">;</span>
    <span class="hl kwa">return</span> b<span class="hl sym">;</span>
  <span class="hl sym">}</span>
<span class="hl sym">};</span>

<span class="hl kwc">template</span> <span class="hl sym">&lt;</span>typename Iter<span class="hl sym">&gt;</span>
<span class="hl kwb">static</span> <span class="hl kwc">inline</span>
<span class="hl kwb">void</span>
<span class="hl kwd">makeCumulative</span><span class="hl sym">(</span>Iter <span class="hl kwb">const</span> start<span class="hl sym">,</span> Iter <span class="hl kwb">const</span> end<span class="hl sym">)</span>
<span class="hl sym">{</span>
  <span class="hl kwd">partial_sum</span> <span class="hl sym">(</span>start<span class="hl sym">,</span> end<span class="hl sym">,</span> start<span class="hl sym">,</span> <span class="hl kwd">IUB_accum</span> <span class="hl sym">());</span>
<span class="hl sym">}</span>

<span class="hl kwb">static const char</span> alu<span class="hl sym">[] =</span>
<span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>
<span class="hl str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>
<span class="hl str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>
<span class="hl str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>
<span class="hl str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>
<span class="hl str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>
<span class="hl str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="hl sym">;</span>

<span class="hl kwb">static const unsigned</span> length <span class="hl sym">=</span> <span class="hl num">60</span><span class="hl sym">,</span> alu_size <span class="hl sym">=</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span>alu<span class="hl sym">) -</span> <span class="hl num">1</span><span class="hl sym">;</span>

<span class="hl kwb">static</span> <span class="hl kwc">inline</span>
<span class="hl kwb">void</span>
<span class="hl kwd">makeRepeatFasta</span><span class="hl sym">(</span><span class="hl kwb">char const</span> <span class="hl sym">*</span> <span class="hl kwb">const</span> id<span class="hl sym">,</span> <span class="hl kwb">char const</span> <span class="hl sym">*</span> <span class="hl kwb">const</span> desc<span class="hl sym">,</span> <span class="hl kwb">unsigned</span> n<span class="hl sym">)</span>
<span class="hl sym">{</span>
  <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;&gt;%s %s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> id<span class="hl sym">,</span> desc<span class="hl sym">);</span>
  <span class="hl kwb">char</span> line<span class="hl sym">[</span>length<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">];</span>
  <span class="hl kwb">unsigned</span> alu_index <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
  <span class="hl kwa">while</span><span class="hl sym">(</span>n <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
    <span class="hl sym">{</span>
      <span class="hl kwb">unsigned const</span> m <span class="hl sym">=</span> <span class="hl kwd">min</span> <span class="hl sym">(</span>n<span class="hl sym">,</span> length<span class="hl sym">);</span>
      line<span class="hl sym">[</span>m<span class="hl sym">] =</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">;</span>
      n <span class="hl sym">-=</span> m<span class="hl sym">;</span>
      <span class="hl kwb">unsigned</span> line_index <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>m <span class="hl sym">-</span> line_index <span class="hl sym">!=</span> <span class="hl num">0</span><span class="hl sym">)</span>
        <span class="hl sym">{</span>
          <span class="hl kwb">unsigned const</span> copy_count <span class="hl sym">=</span> <span class="hl kwd">min</span> <span class="hl sym">(</span>m <span class="hl sym">-</span> line_index<span class="hl sym">,</span> alu_size <span class="hl sym">-</span> alu_index<span class="hl sym">);</span>
          <span class="hl kwd">copy</span> <span class="hl sym">(</span>alu <span class="hl sym">+</span> alu_index<span class="hl sym">,</span> alu <span class="hl sym">+</span> alu_index <span class="hl sym">+</span> copy_count<span class="hl sym">,</span> line <span class="hl sym">+</span> line_index<span class="hl sym">);</span>
          alu_index <span class="hl sym">+=</span> copy_count<span class="hl sym">;</span>
          line_index <span class="hl sym">+=</span> copy_count<span class="hl sym">;</span>
          <span class="hl kwa">if</span> <span class="hl sym">(</span>alu_index <span class="hl sym">==</span> alu_size<span class="hl sym">)</span>
            alu_index <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
        <span class="hl sym">}</span>
      <span class="hl kwd">fwrite</span> <span class="hl sym">(</span>line<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> m <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span> stdout<span class="hl sym">);</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwc">template</span> <span class="hl sym">&lt;</span>typename Iter<span class="hl sym">&gt;</span>
<span class="hl kwb">static</span> <span class="hl kwc">inline</span>
<span class="hl kwb">void</span>
<span class="hl kwd">makeRandomFasta</span><span class="hl sym">(</span><span class="hl kwb">char const</span> <span class="hl sym">*</span> <span class="hl kwb">const</span> id<span class="hl sym">,</span> <span class="hl kwb">char const</span> <span class="hl sym">*</span> <span class="hl kwb">const</span> desc<span class="hl sym">,</span> <span class="hl kwb">unsigned</span> n<span class="hl sym">,</span> Iter start<span class="hl sym">,</span> Iter end<span class="hl sym">)</span>
<span class="hl sym">{</span>
  <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;&gt;%s %s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> id<span class="hl sym">,</span> desc<span class="hl sym">);</span>
  <span class="hl kwd">makeCumulative</span><span class="hl sym">(</span>start<span class="hl sym">,</span> end<span class="hl sym">);</span>
  <span class="hl kwb">char</span> line<span class="hl sym">[</span>length <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">];</span>
  <span class="hl kwa">while</span><span class="hl sym">(</span>n <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
    <span class="hl sym">{</span>
      <span class="hl kwb">unsigned const</span> m <span class="hl sym">=</span> <span class="hl kwd">min</span> <span class="hl sym">(</span>n<span class="hl sym">,</span> length<span class="hl sym">);</span>
      n <span class="hl sym">-=</span> m<span class="hl sym">;</span>
      <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwb">size_t</span> j <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> j <span class="hl sym">&lt;</span> m<span class="hl sym">; ++</span>j<span class="hl sym">)</span>
        <span class="hl sym">{</span>
          <span class="hl kwb">double const</span> rval <span class="hl sym">=</span> <span class="hl kwd">genRandom</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">);</span>
          Iter it<span class="hl sym">;</span>
          <span class="hl kwa">for</span> <span class="hl sym">(</span>it <span class="hl sym">=</span> start<span class="hl sym">;</span> it <span class="hl sym">!=</span> end<span class="hl sym">; ++</span>it<span class="hl sym">)</span>
            <span class="hl sym">{</span>
              <span class="hl kwa">if</span> <span class="hl sym">(</span>rval <span class="hl sym">&lt;</span> it<span class="hl sym">-&gt;</span>p<span class="hl sym">)</span>
                  <span class="hl kwa">break</span><span class="hl sym">;</span>
            <span class="hl sym">}</span>
          line<span class="hl sym">[</span>j<span class="hl sym">] =</span> it<span class="hl sym">-&gt;</span>c<span class="hl sym">;</span>
         <span class="hl sym">}</span>
      line<span class="hl sym">[</span>m<span class="hl sym">] =</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">;</span>
      <span class="hl kwd">fwrite</span> <span class="hl sym">(</span>line<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> m <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span> stdout<span class="hl sym">);</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwb">static</span> IUB iub<span class="hl sym">[] =</span>
  <span class="hl sym">{</span>
    <span class="hl sym">{</span> <span class="hl str">'a'</span><span class="hl sym">,</span> <span class="hl num">0.27</span> <span class="hl sym">},</span>
    <span class="hl sym">{</span> <span class="hl str">'c'</span><span class="hl sym">,</span> <span class="hl num">0.12</span> <span class="hl sym">},</span>
    <span class="hl sym">{</span> <span class="hl str">'g'</span><span class="hl sym">,</span> <span class="hl num">0.12</span> <span class="hl sym">},</span>
    <span class="hl sym">{</span> <span class="hl str">'t'</span><span class="hl sym">,</span> <span class="hl num">0.27</span> <span class="hl sym">},</span>

    <span class="hl sym">{</span> <span class="hl str">'B'</span><span class="hl sym">,</span> <span class="hl num">0.02</span> <span class="hl sym">},</span>
    <span class="hl sym">{</span> <span class="hl str">'D'</span><span class="hl sym">,</span> <span class="hl num">0.02</span> <span class="hl sym">},</span>
    <span class="hl sym">{</span> <span class="hl str">'H'</span><span class="hl sym">,</span> <span class="hl num">0.02</span> <span class="hl sym">},</span>
    <span class="hl sym">{</span> <span class="hl str">'K'</span><span class="hl sym">,</span> <span class="hl num">0.02</span> <span class="hl sym">},</span>
    <span class="hl sym">{</span> <span class="hl str">'M'</span><span class="hl sym">,</span> <span class="hl num">0.02</span> <span class="hl sym">},</span>
    <span class="hl sym">{</span> <span class="hl str">'N'</span><span class="hl sym">,</span> <span class="hl num">0.02</span> <span class="hl sym">},</span>
    <span class="hl sym">{</span> <span class="hl str">'R'</span><span class="hl sym">,</span> <span class="hl num">0.02</span> <span class="hl sym">},</span>
    <span class="hl sym">{</span> <span class="hl str">'S'</span><span class="hl sym">,</span> <span class="hl num">0.02</span> <span class="hl sym">},</span>
    <span class="hl sym">{</span> <span class="hl str">'V'</span><span class="hl sym">,</span> <span class="hl num">0.02</span> <span class="hl sym">},</span>
    <span class="hl sym">{</span> <span class="hl str">'W'</span><span class="hl sym">,</span> <span class="hl num">0.02</span> <span class="hl sym">},</span>
    <span class="hl sym">{</span> <span class="hl str">'Y'</span><span class="hl sym">,</span> <span class="hl num">0.02</span> <span class="hl sym">}</span>
  <span class="hl sym">};</span>

<span class="hl kwb">static</span> IUB homosapiens<span class="hl sym">[] =</span>
  <span class="hl sym">{</span>
    <span class="hl sym">{</span> <span class="hl str">'a'</span><span class="hl sym">,</span> <span class="hl num">0.3029549426680</span> <span class="hl sym">},</span>
    <span class="hl sym">{</span> <span class="hl str">'c'</span><span class="hl sym">,</span> <span class="hl num">0.1979883004921</span> <span class="hl sym">},</span>
    <span class="hl sym">{</span> <span class="hl str">'g'</span><span class="hl sym">,</span> <span class="hl num">0.1975473066391</span> <span class="hl sym">},</span>
    <span class="hl sym">{</span> <span class="hl str">'t'</span><span class="hl sym">,</span> <span class="hl num">0.3015094502008</span> <span class="hl sym">}</span>
  <span class="hl sym">};</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">*</span>argv<span class="hl sym">[])</span>
<span class="hl sym">{</span>
  <span class="hl kwb">unsigned const</span> n <span class="hl sym">=</span> argc <span class="hl sym">&gt;</span> <span class="hl num">1</span> ? <span class="hl kwd">atoi</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]) :</span> <span class="hl num">1</span><span class="hl sym">;</span>

  <span class="hl kwd">makeRepeatFasta</span><span class="hl sym">(</span><span class="hl str">&quot;ONE&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;Homo sapiens alu&quot;</span><span class="hl sym">,</span> n<span class="hl sym">*</span><span class="hl num">2</span><span class="hl sym">);</span>
  <span class="hl kwd">makeRandomFasta</span><span class="hl sym">(</span><span class="hl str">&quot;TWO&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;IUB ambiguity codes&quot;</span><span class="hl sym">,</span> n<span class="hl sym">*</span><span class="hl num">3</span><span class="hl sym">,</span> iub<span class="hl sym">,</span>
                  iub <span class="hl sym">+</span> <span class="hl kwa">sizeof</span> <span class="hl sym">(</span>iub<span class="hl sym">) /</span> <span class="hl kwa">sizeof</span> <span class="hl sym">(</span>IUB<span class="hl sym">));</span>
  <span class="hl kwd">makeRandomFasta</span><span class="hl sym">(</span><span class="hl str">&quot;THREE&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;Homo sapiens frequency&quot;</span><span class="hl sym">,</span> n<span class="hl sym">*</span><span class="hl num">5</span><span class="hl sym">,</span> homosapiens<span class="hl sym">,</span>
                  homosapiens <span class="hl sym">+</span> <span class="hl kwa">sizeof</span> <span class="hl sym">(</span>homosapiens<span class="hl sym">) /</span> <span class="hl kwa">sizeof</span> <span class="hl sym">(</span>IUB<span class="hl sym">));</span>
<span class="hl sym">}</span>
