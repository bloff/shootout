<source>
<def></def><com>/* The Computer Language Shootout</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com></com><br />
<com>   converted to C++ from D by Rafal Rusin</com><br />
<com>   modified by Vaclav Haisman</com><br />
<com>   compile: g++ -O2 -o fasta fasta.cpp</com><br />
<com>*/</com><def></def><br />
<br />
<dir>#include &lt;algorithm&gt;</dir><br />
<def></def><dir>#include &lt;memory&gt;</dir><br />
<def></def><dir>#include &lt;vector&gt;</dir><br />
<def></def><dir>#include &lt;numeric&gt;</dir><br />
<def></def><dir>#include &lt;cstdio&gt;</dir><br />
<def></def><br />
<kwa>using namespace</kwa> <def>std</def><sym>;</sym><br />
<def></def><br />
<kwb>static int const</kwb> <def>IM</def> <sym>=</sym> <def></def><num>139968</num><def></def><sym>,</sym> <def>IA</def> <sym>=</sym> <def></def><num>3877</num><def></def><sym>,</sym> <def>IC</def> <sym>=</sym> <def></def><num>29573</num><def></def><sym>;</sym><br />
<def></def><kwb>static int</kwb> <def>last</def> <sym>=</sym> <def></def><num>42</num><def></def><sym>;</sym><br />
<def></def><br />
<kwc>inline</kwc><br />
<def></def><kwb>double</kwb><br />
<def></def><kwd>genRandom</kwd><def></def><sym>(</sym><def></def><kwb>double</kwb> <def>max</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>  <kwa>return</kwa><def></def><sym>(</sym><def>max</def> <sym>* (</sym><def>last</def> <sym>= (</sym><def>last</def> <sym>*</sym> <def>IA</def> <sym>+</sym> <def>IC</def><sym>) %</sym> <def>IM</def><sym>) /</sym> <def>IM</def><sym>);</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>struct</kwb> <def>IUB</def><br />
<sym>{</sym><br />
<def></def>  <kwb>char</kwb> <def>c</def><sym>;</sym><br />
<def></def>  <kwb>double</kwb> <def>p</def><sym>;</sym><br />
<def></def><sym>};</sym><br />
<def></def><br />
<kwb>struct</kwb> <def>IUB_accum</def><br />
  <sym>:</sym> <def></def><kwc>public</kwc> <def>binary_function</def><sym>&lt;</sym><def>IUB</def> <kwb>const</kwb> <def></def><sym>&amp;,</sym> <def>IUB</def><sym>,</sym> <def>IUB</def><sym>&gt;</sym><br />
<def></def><sym>{</sym><br />
<def>  result_type</def><br />
  <kwc>operator</kwc> <def></def><sym>() (</sym><def>first_argument_type a</def><sym>,</sym> <def>second_argument_type b</def><sym>)</sym> <def></def><kwb>const</kwb><br />
<def></def>  <sym>{</sym><br />
<def>    b</def><sym>.</sym><def>p</def> <sym>+=</sym> <def>a</def><sym>.</sym><def>p</def><sym>;</sym><br />
<def></def>    <kwa>return</kwa> <def>b</def><sym>;</sym><br />
<def></def>  <sym>}</sym><br />
<def></def><sym>};</sym><br />
<def></def><br />
<kwc>template</kwc> <def></def><sym>&lt;</sym><def>typename Iter</def><sym>&gt;</sym><br />
<def></def><kwb>static</kwb> <def></def><kwc>inline</kwc><br />
<def></def><kwb>void</kwb><br />
<def></def><kwd>makeCumulative</kwd><def></def><sym>(</sym><def>Iter</def> <kwb>const</kwb> <def>start</def><sym>,</sym> <def>Iter</def> <kwb>const</kwb> <def>end</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>  <kwd>partial_sum</kwd> <def></def><sym>(</sym><def>start</def><sym>,</sym> <def>end</def><sym>,</sym> <def>start</def><sym>,</sym> <def></def><kwd>IUB_accum</kwd> <def></def><sym>());</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>static const char</kwb> <def>alu</def><sym>[] =</sym><br />
<def></def><str>&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</str><def></def><br />
<str>&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</str><def></def><br />
<str>&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</str><def></def><br />
<str>&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</str><def></def><br />
<str>&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</str><def></def><br />
<str>&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</str><def></def><br />
<str>&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</str><def></def><sym>;</sym><br />
<def></def><br />
<kwb>static const unsigned</kwb> <def>length</def> <sym>=</sym> <def></def><num>60</num><def></def><sym>,</sym> <def>alu_size</def> <sym>=</sym> <def></def><kwa>sizeof</kwa><def></def><sym>(</sym><def>alu</def><sym>) -</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def><br />
<kwb>static</kwb> <def></def><kwc>inline</kwc><br />
<def></def><kwb>void</kwb><br />
<def></def><kwd>makeRepeatFasta</kwd><def></def><sym>(</sym><def></def><kwb>char const</kwb> <def></def><sym>*</sym> <def></def><kwb>const</kwb> <def>id</def><sym>,</sym> <def></def><kwb>char const</kwb> <def></def><sym>*</sym> <def></def><kwb>const</kwb> <def>desc</def><sym>,</sym> <def></def><kwb>unsigned</kwb> <def>n</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>  <kwd>printf</kwd><def></def><sym>(</sym><def></def><str>&quot;&gt;%s %s</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def>id</def><sym>,</sym> <def>desc</def><sym>);</sym><br />
<def></def>  <kwb>char</kwb> <def>line</def><sym>[</sym><def>length</def><sym>+</sym><def></def><num>1</num><def></def><sym>];</sym><br />
<def></def>  <kwb>unsigned</kwb> <def>alu_index</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>  <kwa>while</kwa><def></def><sym>(</sym><def>n</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>)</sym><br />
<def></def>    <sym>{</sym><br />
<def></def>      <kwb>unsigned const</kwb> <def>m</def> <sym>=</sym> <def></def><kwd>min</kwd> <def></def><sym>(</sym><def>n</def><sym>,</sym> <def>length</def><sym>);</sym><br />
<def>      line</def><sym>[</sym><def>m</def><sym>] =</sym> <def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>;</sym><br />
<def>      n</def> <sym>-=</sym> <def>m</def><sym>;</sym><br />
<def></def>      <kwb>unsigned</kwb> <def>line_index</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>      <kwa>while</kwa> <def></def><sym>(</sym><def>m</def> <sym>-</sym> <def>line_index</def> <sym>!=</sym> <def></def><num>0</num><def></def><sym>)</sym><br />
<def></def>        <sym>{</sym><br />
<def></def>          <kwb>unsigned const</kwb> <def>copy_count</def> <sym>=</sym> <def></def><kwd>min</kwd> <def></def><sym>(</sym><def>m</def> <sym>-</sym> <def>line_index</def><sym>,</sym> <def>alu_size</def> <sym>-</sym> <def>alu_index</def><sym>);</sym><br />
<def></def>          <kwd>copy</kwd> <def></def><sym>(</sym><def>alu</def> <sym>+</sym> <def>alu_index</def><sym>,</sym> <def>alu</def> <sym>+</sym> <def>alu_index</def> <sym>+</sym> <def>copy_count</def><sym>,</sym> <def>line</def> <sym>+</sym> <def>line_index</def><sym>);</sym><br />
<def>          alu_index</def> <sym>+=</sym> <def>copy_count</def><sym>;</sym><br />
<def>          line_index</def> <sym>+=</sym> <def>copy_count</def><sym>;</sym><br />
<def></def>          <kwa>if</kwa> <def></def><sym>(</sym><def>alu_index</def> <sym>==</sym> <def>alu_size</def><sym>)</sym><br />
<def>            alu_index</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>        <sym>}</sym><br />
<def></def>      <kwd>fwrite</kwd> <def></def><sym>(</sym><def>line</def><sym>,</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>m</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>stdout</def><sym>);</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwc>template</kwc> <def></def><sym>&lt;</sym><def>typename Iter</def><sym>&gt;</sym><br />
<def></def><kwb>static</kwb> <def></def><kwc>inline</kwc><br />
<def></def><kwb>void</kwb><br />
<def></def><kwd>makeRandomFasta</kwd><def></def><sym>(</sym><def></def><kwb>char const</kwb> <def></def><sym>*</sym> <def></def><kwb>const</kwb> <def>id</def><sym>,</sym> <def></def><kwb>char const</kwb> <def></def><sym>*</sym> <def></def><kwb>const</kwb> <def>desc</def><sym>,</sym> <def></def><kwb>unsigned</kwb> <def>n</def><sym>,</sym> <def>Iter start</def><sym>,</sym> <def>Iter end</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>  <kwd>printf</kwd><def></def><sym>(</sym><def></def><str>&quot;&gt;%s %s</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def>id</def><sym>,</sym> <def>desc</def><sym>);</sym><br />
<def></def>  <kwd>makeCumulative</kwd><def></def><sym>(</sym><def>start</def><sym>,</sym> <def>end</def><sym>);</sym><br />
<def></def>  <kwb>char</kwb> <def>line</def><sym>[</sym><def>length</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>];</sym><br />
<def></def>  <kwa>while</kwa><def></def><sym>(</sym><def>n</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>)</sym><br />
<def></def>    <sym>{</sym><br />
<def></def>      <kwb>unsigned const</kwb> <def>m</def> <sym>=</sym> <def></def><kwd>min</kwd> <def></def><sym>(</sym><def>n</def><sym>,</sym> <def>length</def><sym>);</sym><br />
<def>      n</def> <sym>-=</sym> <def>m</def><sym>;</sym><br />
<def></def>      <kwa>for</kwa><def></def><sym>(</sym><def></def><kwb>size_t</kwb> <def>j</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>j</def> <sym>&lt;</sym> <def>m</def><sym>; ++</sym><def>j</def><sym>)</sym><br />
<def></def>        <sym>{</sym><br />
<def></def>          <kwb>double const</kwb> <def>rval</def> <sym>=</sym> <def></def><kwd>genRandom</kwd><def></def><sym>(</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def>          Iter it</def><sym>;</sym><br />
<def></def>          <kwa>for</kwa> <def></def><sym>(</sym><def>it</def> <sym>=</sym> <def>start</def><sym>;</sym> <def>it</def> <sym>!=</sym> <def>end</def><sym>; ++</sym><def>it</def><sym>)</sym><br />
<def></def>            <sym>{</sym><br />
<def></def>              <kwa>if</kwa> <def></def><sym>(</sym><def>rval</def> <sym>&lt;</sym> <def>it</def><sym>-&gt;</sym><def>p</def><sym>)</sym><br />
<def></def>                  <kwa>break</kwa><def></def><sym>;</sym><br />
<def></def>            <sym>}</sym><br />
<def>          line</def><sym>[</sym><def>j</def><sym>] =</sym> <def>it</def><sym>-&gt;</sym><def>c</def><sym>;</sym><br />
<def></def>         <sym>}</sym><br />
<def>      line</def><sym>[</sym><def>m</def><sym>] =</sym> <def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>;</sym><br />
<def></def>      <kwd>fwrite</kwd> <def></def><sym>(</sym><def>line</def><sym>,</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>m</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>stdout</def><sym>);</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>static</kwb> <def>IUB iub</def><sym>[] =</sym><br />
<def></def>  <sym>{</sym><br />
<def></def>    <sym>{</sym> <def></def><str>'a'</str><def></def><sym>,</sym> <def></def><num>0.27</num> <def></def><sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><str>'c'</str><def></def><sym>,</sym> <def></def><num>0.12</num> <def></def><sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><str>'g'</str><def></def><sym>,</sym> <def></def><num>0.12</num> <def></def><sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><str>'t'</str><def></def><sym>,</sym> <def></def><num>0.27</num> <def></def><sym>},</sym><br />
<def></def><br />
    <sym>{</sym> <def></def><str>'B'</str><def></def><sym>,</sym> <def></def><num>0.02</num> <def></def><sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><str>'D'</str><def></def><sym>,</sym> <def></def><num>0.02</num> <def></def><sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><str>'H'</str><def></def><sym>,</sym> <def></def><num>0.02</num> <def></def><sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><str>'K'</str><def></def><sym>,</sym> <def></def><num>0.02</num> <def></def><sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><str>'M'</str><def></def><sym>,</sym> <def></def><num>0.02</num> <def></def><sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><str>'N'</str><def></def><sym>,</sym> <def></def><num>0.02</num> <def></def><sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><str>'R'</str><def></def><sym>,</sym> <def></def><num>0.02</num> <def></def><sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><str>'S'</str><def></def><sym>,</sym> <def></def><num>0.02</num> <def></def><sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><str>'V'</str><def></def><sym>,</sym> <def></def><num>0.02</num> <def></def><sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><str>'W'</str><def></def><sym>,</sym> <def></def><num>0.02</num> <def></def><sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><str>'Y'</str><def></def><sym>,</sym> <def></def><num>0.02</num> <def></def><sym>}</sym><br />
<def></def>  <sym>};</sym><br />
<def></def><br />
<kwb>static</kwb> <def>IUB homosapiens</def><sym>[] =</sym><br />
<def></def>  <sym>{</sym><br />
<def></def>    <sym>{</sym> <def></def><str>'a'</str><def></def><sym>,</sym> <def></def><num>0.3029549426680</num> <def></def><sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><str>'c'</str><def></def><sym>,</sym> <def></def><num>0.1979883004921</num> <def></def><sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><str>'g'</str><def></def><sym>,</sym> <def></def><num>0.1975473066391</num> <def></def><sym>},</sym><br />
<def></def>    <sym>{</sym> <def></def><str>'t'</str><def></def><sym>,</sym> <def></def><num>0.3015094502008</num> <def></def><sym>}</sym><br />
<def></def>  <sym>};</sym><br />
<def></def><br />
<kwb>int</kwb> <def></def><kwd>main</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>argc</def><sym>,</sym> <def></def><kwb>char</kwb> <def></def><sym>*</sym><def>argv</def><sym>[])</sym><br />
<def></def><sym>{</sym><br />
<def></def>  <kwb>unsigned const</kwb> <def>n</def> <sym>=</sym> <def>argc</def> <sym>&gt;</sym> <def></def><num>1</num> <def>?</def> <kwd>atoi</kwd><def></def><sym>(</sym><def>argv</def><sym>[</sym><def></def><num>1</num><def></def><sym>]) :</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def><br />
  <kwd>makeRepeatFasta</kwd><def></def><sym>(</sym><def></def><str>&quot;ONE&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;Homo sapiens alu&quot;</str><def></def><sym>,</sym> <def>n</def><sym>*</sym><def></def><num>2</num><def></def><sym>);</sym><br />
<def></def>  <kwd>makeRandomFasta</kwd><def></def><sym>(</sym><def></def><str>&quot;TWO&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;IUB ambiguity codes&quot;</str><def></def><sym>,</sym> <def>n</def><sym>*</sym><def></def><num>3</num><def></def><sym>,</sym> <def>iub</def><sym>,</sym><br />
<def>                  iub</def> <sym>+</sym> <def></def><kwa>sizeof</kwa> <def></def><sym>(</sym><def>iub</def><sym>) /</sym> <def></def><kwa>sizeof</kwa> <def></def><sym>(</sym><def>IUB</def><sym>));</sym><br />
<def></def>  <kwd>makeRandomFasta</kwd><def></def><sym>(</sym><def></def><str>&quot;THREE&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;Homo sapiens frequency&quot;</str><def></def><sym>,</sym> <def>n</def><sym>*</sym><def></def><num>5</num><def></def><sym>,</sym> <def>homosapiens</def><sym>,</sym><br />
<def>                  homosapiens</def> <sym>+</sym> <def></def><kwa>sizeof</kwa> <def></def><sym>(</sym><def>homosapiens</def><sym>) /</sym> <def></def><kwa>sizeof</kwa> <def></def><sym>(</sym><def>IUB</def><sym>));</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
