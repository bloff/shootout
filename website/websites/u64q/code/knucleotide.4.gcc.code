<span class="hl com">/*</span>
<span class="hl com">   The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   Based on C contribution of Josh Goldfoot. And modified by Cedric Bail.</span>
<span class="hl com">   Based on bit encoding idea of C++ contribution of Andrew Moon</span>
<span class="hl com">   Contributed by The Anh Tran</span>
<span class="hl com">*/</span>

<span class="hl dir">#define _GNU_SOURCE</span>
<span class="hl dir">#include &lt;omp.h&gt;</span>
<span class="hl dir">#include &lt;sched.h&gt;</span>

<span class="hl dir">#include &lt;assert.h&gt;</span>

<span class="hl dir">#include &lt;stdio.h&gt;</span>
<span class="hl dir">#include &lt;stdlib.h&gt;</span>
<span class="hl dir">#include &lt;memory.h&gt;</span>
<span class="hl dir">#include &lt;stdint.h&gt;</span>

<span class="hl slc">//#define HT_DEBUG</span>
<span class="hl slc">//#include &quot;simple_hash.h&quot;</span>


<span class="hl dir">#define BIT_PER_CODE    2</span>
<span class="hl dir">#define MAX_THREADS    16</span>
<span class="hl dir">#define HT_SIZE       (2*1024*1024)</span>


<span class="hl kwb">void</span>
<span class="hl kwd">ReadAll</span><span class="hl sym">(</span><span class="hl kwb">char</span><span class="hl sym">* *</span>input<span class="hl sym">,</span> <span class="hl kwb">size_t</span> <span class="hl sym">*</span>length<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl slc">// get input size</span>
   <span class="hl sym">*</span>length <span class="hl sym">=</span> <span class="hl kwd">ftell</span><span class="hl sym">(</span>stdin<span class="hl sym">);</span>
   <span class="hl kwd">fseek</span><span class="hl sym">(</span>stdin<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> SEEK_END<span class="hl sym">);</span>
   <span class="hl sym">*</span>length <span class="hl sym">=</span> <span class="hl kwd">ftell</span><span class="hl sym">(</span>stdin<span class="hl sym">) - *</span>length<span class="hl sym">;</span>
   <span class="hl kwd">fseek</span><span class="hl sym">(</span>stdin<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> SEEK_SET<span class="hl sym">);</span>

   <span class="hl sym">*</span>input <span class="hl sym">= (</span><span class="hl kwb">char</span><span class="hl sym">*)</span><span class="hl kwd">malloc</span><span class="hl sym">(*</span>length<span class="hl sym">);</span>

   <span class="hl slc">// rule: read line-by-line</span>
   <span class="hl kwb">char</span> buffer<span class="hl sym">[</span><span class="hl num">64</span><span class="hl sym">];</span>
   <span class="hl kwa">while</span> <span class="hl sym">(</span><span class="hl kwd">fgets_unlocked</span><span class="hl sym">(</span>buffer<span class="hl sym">,</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span>buffer<span class="hl sym">),</span> stdin<span class="hl sym">))</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">if</span> <span class="hl sym">((</span>buffer<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] ==</span> <span class="hl str">'&gt;'</span><span class="hl sym">) &amp;&amp; (</span><span class="hl kwd">strncmp</span><span class="hl sym">(</span>buffer<span class="hl sym">,</span> <span class="hl str">&quot;&gt;THREE&quot;</span><span class="hl sym">,</span> <span class="hl num">6</span><span class="hl sym">) ==</span> <span class="hl num">0</span><span class="hl sym">))</span>
         <span class="hl kwa">break</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwb">size_t const</span> LL <span class="hl sym">=</span> <span class="hl num">60</span><span class="hl sym">;</span>
   buffer<span class="hl sym">[</span>LL<span class="hl sym">] =</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwb">size_t</span> byte_read <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

   <span class="hl kwa">while</span> <span class="hl sym">(</span><span class="hl kwd">fgets_unlocked</span><span class="hl sym">(</span>buffer<span class="hl sym">,</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span>buffer<span class="hl sym">),</span> stdin<span class="hl sym">))</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>buffer<span class="hl sym">[</span>LL<span class="hl sym">] ==</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">)</span>
      <span class="hl sym">{</span>
         <span class="hl kwd">memcpy</span><span class="hl sym">(*</span>input <span class="hl sym">+</span> byte_read<span class="hl sym">,</span> buffer<span class="hl sym">,</span> LL<span class="hl sym">);</span>
         byte_read <span class="hl sym">+=</span> LL<span class="hl sym">;</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">else</span>
      <span class="hl sym">{</span>
         <span class="hl kwb">size_t</span> sz <span class="hl sym">=</span> <span class="hl kwd">strlen</span><span class="hl sym">(</span>buffer<span class="hl sym">);</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>buffer<span class="hl sym">[</span>sz <span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">] ==</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">)</span>
            <span class="hl sym">--</span>sz<span class="hl sym">;</span>

         <span class="hl kwd">memcpy</span><span class="hl sym">(*</span>input <span class="hl sym">+</span> byte_read<span class="hl sym">,</span> buffer<span class="hl sym">,</span> sz<span class="hl sym">);</span>
         byte_read <span class="hl sym">+=</span> sz<span class="hl sym">;</span>
      <span class="hl sym">}</span>

      buffer<span class="hl sym">[</span>LL<span class="hl sym">] =</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl sym">*</span>length <span class="hl sym">=</span> byte_read<span class="hl sym">;</span>
   <span class="hl sym">(*</span>input<span class="hl sym">)[</span> byte_read <span class="hl sym">] =</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>


<span class="hl kwc">typedef</span> <span class="hl kwb">struct</span>
<span class="hl sym">{</span>
   <span class="hl kwb">struct</span> ht_ht   <span class="hl sym">*</span>hash_table<span class="hl sym">[</span>MAX_THREADS<span class="hl sym">];</span>

   <span class="hl kwb">size_t</span>         stride_processed<span class="hl sym">;</span>
   <span class="hl kwb">size_t</span>         thread_passed<span class="hl sym">;</span>
   <span class="hl kwb">char</span>         str_output<span class="hl sym">[</span><span class="hl num">256</span><span class="hl sym">];</span>
<span class="hl sym">}</span>   Result_t<span class="hl sym">;</span>

Result_t result_list<span class="hl sym">[</span><span class="hl num">7</span><span class="hl sym">] = {</span><span class="hl num">0</span><span class="hl sym">};</span>



uint
<span class="hl kwd">CodeToBit</span><span class="hl sym">(</span>uint c<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwa">switch</span> <span class="hl sym">(</span>c<span class="hl sym">)</span>
   <span class="hl sym">{</span>
   <span class="hl kwa">case</span> <span class="hl str">'a'</span><span class="hl sym">:</span>   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">case</span> <span class="hl str">'t'</span><span class="hl sym">:</span>   <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl sym">;</span>
   <span class="hl kwa">case</span> <span class="hl str">'c'</span><span class="hl sym">:</span>   <span class="hl kwa">return</span> <span class="hl num">2</span><span class="hl sym">;</span>
   <span class="hl kwa">case</span> <span class="hl str">'g'</span><span class="hl sym">:</span>   <span class="hl kwa">return</span> <span class="hl num">3</span><span class="hl sym">;</span>

   <span class="hl kwa">case</span> <span class="hl str">'A'</span><span class="hl sym">:</span>   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">case</span> <span class="hl str">'T'</span><span class="hl sym">:</span>   <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl sym">;</span>
   <span class="hl kwa">case</span> <span class="hl str">'C'</span><span class="hl sym">:</span>   <span class="hl kwa">return</span> <span class="hl num">2</span><span class="hl sym">;</span>
   <span class="hl kwa">case</span> <span class="hl str">'G'</span><span class="hl sym">:</span>   <span class="hl kwa">return</span> <span class="hl num">3</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwd">assert</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span>
   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>


<span class="hl kwb">char</span>
<span class="hl kwd">BitToCode</span><span class="hl sym">(</span>uint bit<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwb">static</span>
   <span class="hl kwb">char const</span> tb<span class="hl sym">[</span><span class="hl num">4</span><span class="hl sym">] = {</span><span class="hl str">'A'</span><span class="hl sym">,</span> <span class="hl str">'T'</span><span class="hl sym">,</span> <span class="hl str">'C'</span><span class="hl sym">,</span> <span class="hl str">'G'</span><span class="hl sym">};</span>

   <span class="hl kwd">assert</span><span class="hl sym">(</span>bit <span class="hl sym">&lt;</span> <span class="hl num">4</span><span class="hl sym">);</span>
   <span class="hl kwa">return</span> tb<span class="hl sym">[</span>bit<span class="hl sym">];</span>
<span class="hl sym">}</span>

<span class="hl dir">#define EK_Imp(hash_length)   \</span>
<span class="hl dir">ui64   \</span>
<span class="hl dir">EncodeKey##hash_length(char const* data)   \</span>
<span class="hl dir">{   \</span>
<span class="hl dir">   ui64 key = 0;   \</span>
<span class="hl dir">   size_t index = 0;\</span>
<span class="hl dir">   size_t shift = 0;\</span>
<span class="hl dir">   \</span>
<span class="hl dir">   for (; index &lt; hash_length; ++index   )   \</span>
<span class="hl dir">   {\</span>
<span class="hl dir">      key      |= (ui64)CodeToBit(data[index]) &lt;&lt; shift;   \</span>
<span class="hl dir">      shift   += BIT_PER_CODE;   \</span>
<span class="hl dir">   }\</span>
<span class="hl dir">   \</span>
<span class="hl dir">   return key;\</span>
<span class="hl dir">}</span>

<span class="hl kwd">EK_Imp</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">);</span> <span class="hl kwd">EK_Imp</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">);</span> <span class="hl kwd">EK_Imp</span><span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">);</span> <span class="hl kwd">EK_Imp</span><span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">);</span> <span class="hl kwd">EK_Imp</span><span class="hl sym">(</span><span class="hl num">6</span><span class="hl sym">);</span> <span class="hl kwd">EK_Imp</span><span class="hl sym">(</span><span class="hl num">12</span><span class="hl sym">);</span> <span class="hl kwd">EK_Imp</span><span class="hl sym">(</span><span class="hl num">18</span><span class="hl sym">);</span>

<span class="hl dir">#define EncodeKey(len, data)   EncodeKey##len(data)</span>


<span class="hl kwb">char</span><span class="hl sym">*</span>
<span class="hl kwd">DecodeKey</span><span class="hl sym">(</span><span class="hl kwb">char</span><span class="hl sym">*</span> buffer<span class="hl sym">,</span> <span class="hl kwb">size_t</span> frame_size<span class="hl sym">,</span> ui64 key<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwb">size_t</span> index <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   ui64 extract_mask <span class="hl sym">=</span> <span class="hl num">3</span><span class="hl sym">;</span>

   <span class="hl kwa">for</span> <span class="hl sym">(;</span> index <span class="hl sym">&lt;</span> frame_size<span class="hl sym">; ++</span>index<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      uint extract_value <span class="hl sym">= ((</span>key <span class="hl sym">&amp;</span> extract_mask<span class="hl sym">) &gt;&gt; (</span>index <span class="hl sym">*</span> BIT_PER_CODE<span class="hl sym">));</span>
      buffer<span class="hl sym">[</span>index<span class="hl sym">] =</span> <span class="hl kwd">BitToCode</span><span class="hl sym">(</span>extract_value<span class="hl sym">);</span>

      extract_mask <span class="hl sym">&lt;&lt;=</span> BIT_PER_CODE<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   buffer<span class="hl sym">[</span>index<span class="hl sym">] =</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">return</span> buffer<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">void</span>
<span class="hl kwd">MergeTable</span><span class="hl sym">(</span><span class="hl kwb">struct</span> ht_ht <span class="hl sym">*</span>des<span class="hl sym">,</span> <span class="hl kwb">struct</span> ht_ht<span class="hl sym">*</span> src<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwb">struct</span> ht_node<span class="hl sym">*</span> src_node<span class="hl sym">;</span>

   <span class="hl kwa">for</span> <span class="hl sym">(</span>src_node <span class="hl sym">=</span> <span class="hl kwd">ht_first</span><span class="hl sym">(</span>src<span class="hl sym">);</span> src_node <span class="hl sym">!=</span> <span class="hl num">0</span><span class="hl sym">;</span> src_node <span class="hl sym">=</span> <span class="hl kwd">ht_next</span><span class="hl sym">(</span>src<span class="hl sym">))</span>
   <span class="hl sym">{</span>
      <span class="hl kwb">struct</span> ht_node<span class="hl sym">*</span> des_node <span class="hl sym">=</span> <span class="hl kwd">ht_find_new</span><span class="hl sym">(</span>des<span class="hl sym">,</span> src_node<span class="hl sym">-&gt;</span>key<span class="hl sym">);</span>
      des_node<span class="hl sym">-&gt;</span>val <span class="hl sym">+=</span> src_node<span class="hl sym">-&gt;</span>val<span class="hl sym">;</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>


<span class="hl dir">#define BHT_Imp(frame_size)\</span>
<span class="hl dir">void    \</span>
<span class="hl dir">BuildHashTable##frame_size(char const* data, size_t data_length, Result_t *result)\</span>
<span class="hl dir">{\</span>
<span class="hl dir">   struct ht_ht* local_table = ht_create(HT_SIZE);\</span>
<span class="hl dir">   result-&gt;hash_table[omp_get_thread_num()] = local_table;\</span>
<span class="hl dir">\</span>
<span class="hl dir">   size_t offset;</span> <span class="hl com">/* each thread pick up task here */</span><span class="hl dir">\</span>
<span class="hl dir">   while ((offset = __sync_fetch_and_add(&amp;result-&gt;stride_processed, 1)) &lt; frame_size)   \</span>
<span class="hl dir">   {\</span>
<span class="hl dir">      size_t i_begin = offset;   \</span>
<span class="hl dir">      size_t i_end = data_length - frame_size + 1;   \</span>
<span class="hl dir">      \</span>
<span class="hl dir">      ui64 key = 0;   \</span>
<span class="hl dir">      for(; i_begin &lt; i_end; i_begin += frame_size)   \</span>
<span class="hl dir">      {\</span>
<span class="hl dir">         key = EncodeKey(frame_size, data + i_begin);\</span>
<span class="hl dir">         ht_find_new(local_table, key)-&gt;val += 1;\</span>
<span class="hl dir">      }\</span>
<span class="hl dir">   }\</span>
<span class="hl dir">}</span>

<span class="hl kwd">BHT_Imp</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">);</span> <span class="hl kwd">BHT_Imp</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">);</span> <span class="hl kwd">BHT_Imp</span><span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">);</span> <span class="hl kwd">BHT_Imp</span><span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">);</span> <span class="hl kwd">BHT_Imp</span><span class="hl sym">(</span><span class="hl num">6</span><span class="hl sym">);</span> <span class="hl kwd">BHT_Imp</span><span class="hl sym">(</span><span class="hl num">12</span><span class="hl sym">);</span> <span class="hl kwd">BHT_Imp</span><span class="hl sym">(</span><span class="hl num">18</span><span class="hl sym">);</span>

<span class="hl dir">#define BuildHashTable(frame_size, data, data_length, result)   \</span>
<span class="hl dir">      BuildHashTable##frame_size(data, data_length, result)</span>


<span class="hl kwc">typedef</span> <span class="hl kwb">struct</span>
<span class="hl sym">{</span>
   ui64   key<span class="hl sym">;</span>
   <span class="hl kwb">int</span>      value<span class="hl sym">;</span>
<span class="hl sym">}</span> KVPair<span class="hl sym">;</span>


<span class="hl kwb">int</span>
<span class="hl kwd">DescCompFunc</span><span class="hl sym">(</span><span class="hl kwb">void const</span><span class="hl sym">*</span>p1<span class="hl sym">,</span> <span class="hl kwb">void const</span><span class="hl sym">*</span> p2<span class="hl sym">)</span>
<span class="hl sym">{</span>
   KVPair <span class="hl kwb">const</span><span class="hl sym">*</span> k1 <span class="hl sym">= (</span>KVPair <span class="hl kwb">const</span><span class="hl sym">*)</span>p1<span class="hl sym">;</span>
   KVPair <span class="hl kwb">const</span><span class="hl sym">*</span> k2 <span class="hl sym">= (</span>KVPair <span class="hl kwb">const</span><span class="hl sym">*)</span>p2<span class="hl sym">;</span>

   <span class="hl kwa">return</span> <span class="hl sym">-(</span>k1<span class="hl sym">-&gt;</span>value <span class="hl sym">-</span> k2<span class="hl sym">-&gt;</span>value<span class="hl sym">);</span>
<span class="hl sym">}</span>



<span class="hl dir">#define WF_Imp(frame_size) \</span>
<span class="hl dir">void \</span>
<span class="hl dir">WriteFreq##frame_size(char* data, size_t length, Result_t * result) \</span>
<span class="hl dir">{ \</span>
<span class="hl dir">   BuildHashTable(frame_size, data, length, result); \</span>
<span class="hl dir">\</span>
<span class="hl dir">   if (__sync_add_and_fetch(&amp;result-&gt;thread_passed, 1) == (size_t)omp_get_num_threads()) \</span>
<span class="hl dir">   { \</span>
<span class="hl dir">      int i = 1; \</span>
<span class="hl dir">      for (; i &lt; omp_get_num_threads(); ++i) \</span>
<span class="hl dir">      { \</span>
<span class="hl dir">         MergeTable(result-&gt;hash_table[0], result-&gt;hash_table[i]); \</span>
<span class="hl dir">         ht_destroy(result-&gt;hash_table[i]); \</span>
<span class="hl dir">      } \</span>
<span class="hl dir">\</span>
<span class="hl dir">      struct ht_ht* ht = result-&gt;hash_table[0]; \</span>
<span class="hl dir">      uint n_elements = ht_count(ht); \</span>
<span class="hl dir">      KVPair* sorted_list = (KVPair*)calloc(n_elements, sizeof(KVPair)); \</span>
<span class="hl dir">\</span>
<span class="hl dir">      struct ht_node * node; \</span>
<span class="hl dir">      uint index = 0; \</span>
<span class="hl dir">\</span>
<span class="hl dir">      for (node = ht_first(ht); node != 0; node = ht_next(ht), ++index) \</span>
<span class="hl dir">      {\</span>
<span class="hl dir">         sorted_list[index].key      = node-&gt;key; \</span>
<span class="hl dir">         sorted_list[index].value   = node-&gt;val; \</span>
<span class="hl dir">      } \</span>
<span class="hl dir">\</span>
<span class="hl dir">      n_elements = index;\</span>
<span class="hl dir">      qsort(sorted_list, n_elements, sizeof(KVPair), DescCompFunc);\</span>
<span class="hl dir">\</span>
<span class="hl dir">      char buffer[64];\</span>
<span class="hl dir">      int char_count = 0;\</span>
<span class="hl dir">      float total = length - frame_size +1;\</span>
<span class="hl dir">\</span>
<span class="hl dir">      for (index = 0; index &lt; n_elements; ++index)\</span>
<span class="hl dir">      {\</span>
<span class="hl dir">         buffer[frame_size] = 0;\</span>
<span class="hl dir">\</span>
<span class="hl dir">         char_count += sprintf(result-&gt;str_output + char_count,\</span>
<span class="hl dir"></span>            <span class="hl dstr">&quot;%s %.3f</span><span class="hl esc">\n</span><span class="hl dstr">&quot;</span><span class="hl dir">, \</span>
<span class="hl dir">            DecodeKey(buffer, frame_size, sorted_list[index].key), \</span>
<span class="hl dir">            sorted_list[index].value * 100.0f / total);\</span>
<span class="hl dir">      }\</span>
<span class="hl dir">\</span>
<span class="hl dir">      sprintf(result-&gt;str_output + char_count,</span> <span class="hl dstr">&quot;</span><span class="hl esc">\n</span><span class="hl dstr">&quot;</span><span class="hl dir">);\</span>
<span class="hl dir">\</span>
<span class="hl dir">      free(sorted_list);\</span>
<span class="hl dir">      ht_destroy(result-&gt;hash_table[0]); \</span>
<span class="hl dir">   }\</span>
<span class="hl dir">}</span>

<span class="hl kwd">WF_Imp</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">);</span>   <span class="hl kwd">WF_Imp</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">);</span>

<span class="hl dir">#define WriteFreq(frame_size, data, length, result) \</span>
<span class="hl dir">WriteFreq##frame_size(data, length, result)</span>



<span class="hl dir">#define WC_Imp(frame_size) \</span>
<span class="hl dir">void \</span>
<span class="hl dir">WriteCount##frame_size(char* data, size_t length, Result_t* result, char const* pattern) \</span>
<span class="hl dir">{ \</span>
<span class="hl dir">   BuildHashTable(frame_size, data, length, result); \</span>
<span class="hl dir">\</span>
<span class="hl dir">   if (__sync_add_and_fetch(&amp;result-&gt;thread_passed, 1) == (size_t)omp_get_num_threads()) \</span>
<span class="hl dir">   { \</span>
<span class="hl dir">      int i = 1; \</span>
<span class="hl dir">      for (; i &lt; omp_get_num_threads(); ++i) \</span>
<span class="hl dir">      { \</span>
<span class="hl dir">         MergeTable(result-&gt;hash_table[0], result-&gt;hash_table[i]); \</span>
<span class="hl dir">         ht_destroy(result-&gt;hash_table[i]); \</span>
<span class="hl dir">      } \</span>
<span class="hl dir">\</span>
<span class="hl dir">      ui64 key = EncodeKey(frame_size, pattern); \</span>
<span class="hl dir">      struct ht_node const* node = ht_find(result-&gt;hash_table[0], key); \</span>
<span class="hl dir">\</span>
<span class="hl dir">      sprintf(result-&gt;str_output,</span> <span class="hl dstr">&quot;%d</span><span class="hl esc">\t</span><span class="hl dstr">%s</span><span class="hl esc">\n</span><span class="hl dstr">&quot;</span><span class="hl dir">, (node != 0) ? node-&gt;val : 0, pattern); \</span>
<span class="hl dir">      ht_destroy(result-&gt;hash_table[0]); \</span>
<span class="hl dir">   }\</span>
<span class="hl dir">}</span>

<span class="hl kwd">WC_Imp</span><span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">);</span> <span class="hl kwd">WC_Imp</span><span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">);</span> <span class="hl kwd">WC_Imp</span><span class="hl sym">(</span><span class="hl num">6</span><span class="hl sym">);</span> <span class="hl kwd">WC_Imp</span><span class="hl sym">(</span><span class="hl num">12</span><span class="hl sym">);</span> <span class="hl kwd">WC_Imp</span><span class="hl sym">(</span><span class="hl num">18</span><span class="hl sym">);</span>

<span class="hl dir">#define WriteCount(frame_size, data, len, rs, pt) WriteCount##frame_size(data, len, rs, pt)</span>

<span class="hl kwb">int</span>
<span class="hl kwd">GetThreadCount</span><span class="hl sym">()</span>
<span class="hl sym">{</span>
   cpu_set_t cs<span class="hl sym">;</span>
   <span class="hl kwd">CPU_ZERO</span><span class="hl sym">(&amp;</span>cs<span class="hl sym">);</span>
   <span class="hl kwd">sched_getaffinity</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span>cs<span class="hl sym">), &amp;</span>cs<span class="hl sym">);</span>

   <span class="hl kwb">int</span> count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwb">int</span> i<span class="hl sym">;</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> MAX_THREADS<span class="hl sym">; ++</span>i<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">CPU_ISSET</span><span class="hl sym">(</span>i<span class="hl sym">, &amp;</span>cs<span class="hl sym">))</span>
         <span class="hl sym">++</span>count<span class="hl sym">;</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">return</span> count<span class="hl sym">;</span>
<span class="hl sym">}</span>


<span class="hl kwb">int</span>
<span class="hl kwd">main</span><span class="hl sym">()</span>
<span class="hl sym">{</span>
   <span class="hl kwb">char</span><span class="hl sym">*</span>   input<span class="hl sym">;</span>
   <span class="hl kwb">size_t</span>   length<span class="hl sym">;</span>
   <span class="hl kwd">ReadAll</span><span class="hl sym">(&amp;</span>input<span class="hl sym">, &amp;</span>length<span class="hl sym">);</span>

   <span class="hl dir">#pragma omp parallel num_threads(GetThreadCount()) default(shared)</span>
   <span class="hl sym">{</span>
      <span class="hl kwd">WriteCount</span><span class="hl sym">(</span><span class="hl num">18</span><span class="hl sym">,</span>   input<span class="hl sym">,</span> length<span class="hl sym">, &amp;</span>result_list<span class="hl sym">[</span><span class="hl num">6</span><span class="hl sym">],</span> <span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl sym">);</span>
      <span class="hl kwd">WriteCount</span><span class="hl sym">(</span><span class="hl num">12</span><span class="hl sym">,</span>   input<span class="hl sym">,</span> length<span class="hl sym">, &amp;</span>result_list<span class="hl sym">[</span><span class="hl num">5</span><span class="hl sym">],</span> <span class="hl str">&quot;GGTATTTTAATT&quot;</span><span class="hl sym">);</span>
      <span class="hl kwd">WriteCount</span><span class="hl sym">(</span><span class="hl num">6</span><span class="hl sym">,</span>   input<span class="hl sym">,</span> length<span class="hl sym">, &amp;</span>result_list<span class="hl sym">[</span><span class="hl num">4</span><span class="hl sym">],</span> <span class="hl str">&quot;GGTATT&quot;</span><span class="hl sym">);</span>
      <span class="hl kwd">WriteCount</span><span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">,</span>   input<span class="hl sym">,</span> length<span class="hl sym">, &amp;</span>result_list<span class="hl sym">[</span><span class="hl num">3</span><span class="hl sym">],</span> <span class="hl str">&quot;GGTA&quot;</span><span class="hl sym">);</span>
      <span class="hl kwd">WriteCount</span><span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">,</span>   input<span class="hl sym">,</span> length<span class="hl sym">, &amp;</span>result_list<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">],</span> <span class="hl str">&quot;GGT&quot;</span><span class="hl sym">);</span>
      <span class="hl kwd">WriteFreq</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">,</span>   input<span class="hl sym">,</span> length<span class="hl sym">, &amp;</span>result_list<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]);</span>
      <span class="hl kwd">WriteFreq</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span>   input<span class="hl sym">,</span> length<span class="hl sym">, &amp;</span>result_list<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>
   <span class="hl sym">}</span>

   <span class="hl kwd">free</span><span class="hl sym">(</span>input<span class="hl sym">);</span>

   <span class="hl kwb">int</span> i<span class="hl sym">;</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">7</span><span class="hl sym">; ++</span>i<span class="hl sym">)</span>
      <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;%s&quot;</span><span class="hl sym">,</span> result_list<span class="hl sym">[</span>i<span class="hl sym">].</span>str_output<span class="hl sym">);</span>

   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

