<source>
<def></def><com>/* The Computer Language Benchmarks Game</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com>   contributed by Isaac Gouy</com><br />
<com></com><br />
<com>   RendezvousServer and Creature follow the same synchronization</com><br />
<com>   approach as Mall and Chameneos in ANNEX A: JAVA SOLUTION</com><br />
<com>   &quot;Chameneos, a Concurrency Game for Java, Ada and Others&quot;</com><br />
<com></com><br />
<com>   except that Creature has an explicit yield</com><br />
<com>*/</com><def><br />
<br />
<br />
enum Colour</def> <sym>{</sym> <def>blue</def><sym>,</sym> <def>red</def><sym>,</sym> <def>yellow</def> <sym>}</sym><br />
<def><br />
Colour complementColour</def><sym>(</sym><def>Colour self</def><sym>,</sym> <def>Colour other</def><sym>){</sym><br />
<def></def>   <kwa>if</kwa> <def></def><sym>(</sym><def>self</def> <sym>==</sym> <def>other</def><sym>) {</sym><br />
<def></def>      <kwa>return</kwa> <def>self</def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def>   <kwa>else if</kwa> <def></def><sym>(</sym><def>self</def> <sym>==</sym> <def>blue</def><sym>) {</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>other</def> <sym>==</sym> <def>red</def><sym>)</sym> <def></def><kwa>return</kwa> <def>yellow</def><sym>;</sym> <def></def><kwa>else return</kwa> <def>red</def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def>   <kwa>else if</kwa> <def></def><sym>(</sym><def>self</def> <sym>==</sym> <def>red</def><sym>) {</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>other</def> <sym>==</sym> <def>blue</def><sym>)</sym> <def></def><kwa>return</kwa> <def>yellow</def><sym>;</sym> <def></def><kwa>else return</kwa> <def>blue</def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def>   <kwa>else</kwa> <def></def><sym>{</sym><br />
<def></def>       <kwa>if</kwa> <def></def><sym>(</sym><def>other</def> <sym>==</sym> <def>blue</def><sym>)</sym> <def></def><kwa>return</kwa> <def>red</def><sym>;</sym> <def></def><kwa>else return</kwa> <def>blue</def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>void</kwb> <def>checkCreatureColourChanges</def><sym>() {</sym><br />
<def></def>   <kwa>let</kwa> <def>colours</def> <sym>= [</sym><def>blue</def><sym>,</sym><def>red</def><sym>,</sym><def>yellow</def><sym>];</sym><br />
<def></def>   <kwa>for</kwa> <def></def><sym>(</sym><def>self</def> <sym>:</sym> <def>colours</def><sym>)</sym><br />
<def></def>      <kwa>for</kwa> <def></def><sym>(</sym><def>other</def> <sym>:</sym> <def>colours</def><sym>)</sym><br />
<def>         println</def><sym>(</sym><def>self</def> <sym>+</sym> <def></def><str>&quot; + &quot;</str><def></def> <sym>+</sym> <def>other</def> <sym>+</sym> <def></def><str>&quot; -&gt; &quot;</str><def></def> <sym>+</sym> <def>complementColour</def><sym>(</sym><def>self</def><sym>,</sym><def>other</def><sym>));</sym><br />
<def>   println</def><sym>();</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<br />
<br />
<kwa>let</kwa> <def>Token stopToken</def> <sym>=</sym> <def></def><kwa>new</kwa> <def>Token</def><sym>();</sym><br />
<def></def><br />
<kwa>class</kwa> <def>RendezvousServer</def> <sym>{</sym><br />
<def></def>   <kwa>private</kwa> <def>Token a</def> <sym>=</sym> <def>stopToken</def><sym>;</sym><br />
<def></def>   <kwa>private</kwa> <def>Token b</def> <sym>=</sym> <def>stopToken</def><sym>;</sym><br />
<def></def><br />
   <kwa>private</kwa> <def></def><kwb>boolean</kwb> <def>firstCall</def> <sym>=</sym> <def>true</def><sym>;</sym><br />
<def></def>   <kwa>private</kwa> <def></def><kwb>boolean</kwb> <def>mustWait</def> <sym>=</sym> <def>false</def><sym>;</sym><br />
<def></def><br />
   <kwa>private</kwa> <def></def><kwb>int</kwb> <def>countdown</def> <sym>=</sym> <def>n</def><sym>;</sym><br />
<def><br />
<br />
   Token notify</def><sym>(</sym><def>Token token</def><sym>) {</sym><br />
<def></def><br />
      <kwa>synchronized</kwa><def></def><sym>(</sym><def>this</def><sym>) {</sym><br />
<def></def><br />
         <kwa>var</kwa> <def>other</def> <sym>=</sym> <def>stopToken</def><sym>;</sym><br />
<def></def><br />
         <kwa>while</kwa> <def></def><sym>(</sym> <def>mustWait</def> <sym>&amp;&amp;</sym> <def>countdown</def> <sym>&gt;</sym> <def></def><num>0</num> <def></def><sym>)</sym> <def>this</def><sym>.</sym><def>wait</def><sym>();</sym><br />
<def></def><br />
         <kwa>if</kwa> <def></def><sym>(</sym> <def>firstCall</def> <sym>) {</sym><br />
<def>            a</def> <sym>=</sym> <def>token</def><sym>;</sym><br />
<def>            firstCall</def> <sym>=</sym> <def>false</def><sym>;</sym><br />
<def></def><br />
            <kwa>while</kwa> <def></def><sym>( !</sym> <def>firstCall</def> <sym>&amp;&amp;</sym> <def>countdown</def> <sym>&gt;</sym> <def></def><num>0</num> <def></def><sym>)</sym> <def>this</def><sym>.</sym><def>wait</def><sym>();</sym><br />
<def>            other</def> <sym>=</sym> <def>b</def><sym>;</sym><br />
<def>            mustWait</def> <sym>=</sym> <def>false</def><sym>;</sym><br />
<def>            this</def><sym>.</sym><def>notifyAll</def><sym>();</sym><br />
<def></def><br />
            <sym>--</sym><def>countdown</def><sym>;</sym><br />
<def></def>         <sym>}</sym><br />
<def></def><br />
         <kwa>else</kwa> <def></def><sym>{</sym><br />
<def>            b</def> <sym>=</sym> <def>token</def><sym>;</sym><br />
<def>            other</def> <sym>=</sym> <def>a</def><sym>;</sym><br />
<def>            firstCall</def> <sym>=</sym> <def>true</def><sym>;</sym><br />
<def>            mustWait</def> <sym>=</sym> <def>true</def><sym>;</sym><br />
<def>            this</def><sym>.</sym><def>notifyAll</def><sym>();</sym><br />
<def></def>         <sym>}</sym><br />
<def></def><br />
         <kwa>return</kwa> <def>countdown</def> <sym>&gt;=</sym> <def></def><num>0</num> <def></def><sym>?</sym> <def>other</def> <sym>:</sym> <def>stopToken</def><sym>;</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
<sym>}</sym><br />
<def></def><br />
<br />
<kwa>class</kwa> <def>Creature</def> <kwa>extends</kwa> <def>Thread</def> <sym>{</sym><br />
<def></def>   <kwa>private</kwa> <def></def><kwb>int</kwb> <def>name</def><sym>;</sym><br />
<def>   Colour colour</def><sym>;</sym><br />
<def></def>   <kwb>int</kwb> <def>selfMet</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>   <kwb>int</kwb> <def>creaturesMet</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>   <kwa>private</kwa> <def>RendezvousServer rendezvous</def><sym>;</sym><br />
<def><br />
   override</def> <kwb>void</kwb> <def>run</def><sym>(){</sym><br />
<def></def>      <kwa>let</kwa> <def>token</def> <sym>=</sym> <def></def><kwa>new</kwa> <def>Token</def><sym>(</sym><def>_name</def><sym>:</sym> <def>name</def><sym>,</sym> <def>_colour</def><sym>:</sym> <def>colour</def><sym>);</sym><br />
<def></def><br />
      <kwa>while</kwa> <def></def><sym>(</sym><def>true</def><sym>) {</sym><br />
<def></def>         <kwa>let</kwa> <def>other</def> <sym>=</sym> <def>rendezvous</def><sym>.</sym><def>notify</def><sym>(</sym><def>token</def><sym>);</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>other</def> <sym>==</sym> <def>stopToken</def><sym>)</sym> <def></def><kwa>break</kwa><def></def><sym>;</sym><br />
<def><br />
         colour</def> <sym>=</sym> <def>complementColour</def><sym>(</sym><def>colour</def><sym>,</sym><def>other</def><sym>.</sym><def>colour</def><sym>);</sym><br />
<def>         token</def><sym>.</sym><def>colour</def><sym>(</sym><def>colour</def><sym>);</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>other</def><sym>.</sym><def>name</def> <sym>==</sym> <def>name</def><sym>)</sym> <def>selfMet</def><sym>++;</sym><br />
<def>         creaturesMet</def><sym>++;</sym><br />
<def><br />
         Thread</def><sym>.</sym><def>yield</def><sym>();</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
<sym>}</sym><br />
<def></def><br />
<br />
<kwa>class</kwa> <def>Token</def> <sym>{</sym><br />
<def></def>   <kwa>private</kwa> <def></def><kwb>int</kwb> <def>_name</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>   <kwa>private</kwa> <def>Colour _colour</def> <sym>=</sym> <def>blue</def><sym>;</sym><br />
<def></def><br />
   <kwb>int</kwb> <def>name</def><sym>() =</sym> <def>_name</def><sym>;</sym><br />
<def>   Colour colour</def><sym>() =</sym> <def>_colour</def><sym>;</sym><br />
<def></def>   <kwb>void</kwb> <def>colour</def><sym>(</sym><def>Colour c</def><sym>) {</sym> <def>_colour</def> <sym>=</sym> <def>c</def><sym>; }</sym><br />
<def></def><sym>}</sym><br />
<def><br />
<br />
<br />
<br />
List</def><sym>&lt;</sym><def>Creature</def><sym>&gt;</sym> <def>startRendezvousCreaturesWith</def><sym>(</sym><def>List</def><sym>&lt;</sym><def>Colour</def><sym>&gt;</sym> <def>colourList</def><sym>){</sym><br />
<def></def>   <kwa>let</kwa> <def>r</def> <sym>=</sym> <def></def><kwa>new</kwa> <def>RendezvousServer</def><sym>();</sym><br />
<def></def>   <kwa>var</kwa> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>   <kwa>let</kwa> <def>rendezvousCreatures</def> <sym>=</sym> <def>colourList</def> <sym>.</sym><def>map</def><sym>(</sym><br />
<def>      Colour c</def> <sym>=&gt;</sym> <def></def><kwa>new</kwa> <def>Creature</def><sym>(</sym><def>name</def><sym>: ++</sym><def>i</def><sym>,</sym> <def>colour</def><sym>:</sym> <def>c</def><sym>,</sym> <def>rendezvous</def><sym>:</sym> <def>r</def><sym>));</sym><br />
<def></def><br />
   <kwa>for</kwa> <def></def><sym>(</sym><def>c</def> <sym>:</sym> <def>rendezvousCreatures</def><sym>)</sym> <def>c</def><sym>.</sym><def>start</def><sym>();</sym><br />
<def></def>   <kwa>for</kwa> <def></def><sym>(</sym><def>c</def> <sym>:</sym> <def>rendezvousCreatures</def><sym>)</sym> <def>c</def><sym>.</sym><def>join</def><sym>();</sym><br />
<def></def><br />
   <kwa>return</kwa> <def>rendezvousCreatures</def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<br />
<kwb>void</kwb> <def>reportRendezvouses</def><sym>(</sym><def>List</def><sym>&lt;</sym><def>Colour</def><sym>&gt;</sym> <def>colourList</def><sym>){</sym><br />
<def></def>   <kwa>let</kwa> <def>numbers</def> <sym>= [</sym><def></def><str>&quot;zero&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;one&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;two&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;three&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;four&quot;</str><def></def><sym>,</sym><br />
<def></def>                  <str>&quot;five&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;six&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;seven&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;eight&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;nine&quot;</str><def></def><sym>];</sym><br />
<def><br />
   String spellout</def><sym>(</sym><def></def><kwb>int</kwb> <def>k</def><sym>) =</sym><br />
<def>      k</def> <sym>.</sym><def>toString</def> <sym>.</sym><def>toCharArray</def> <sym>.</sym><def>foldLeft</def><sym>(</sym><br />
<def></def>         <sym>(</sym><def>String s</def><sym>,</sym> <def></def><kwb>char</kwb> <def>c</def><sym>) =&gt;</sym><br />
<def>            s</def> <sym>+</sym> <def></def><str>&quot; &quot;</str><def></def> <sym>+</sym> <def>numbers</def><sym>[</sym> <def>Character</def><sym>.</sym><def>getNumericValue</def><sym>(</sym><def>c</def><sym>) ],</sym> <def></def><str>&quot;&quot;</str><def></def><sym>);</sym><br />
<def></def><br />
<br />
   <kwa>for</kwa> <def></def><sym>(</sym><def>c</def> <sym>:</sym> <def>colourList</def><sym>)</sym> <def>print</def><sym>(</sym><def></def><str>&quot; &quot;</str><def></def> <sym>+</sym> <def>c</def><sym>);</sym> <def>println</def><sym>();</sym><br />
<def></def><br />
   <kwa>let</kwa> <def>rendezvousCreatures</def> <sym>=</sym> <def>startRendezvousCreaturesWith</def><sym>(</sym><def>colourList</def><sym>);</sym><br />
<def></def><br />
   <kwa>var</kwa> <def>sum</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>   <kwa>for</kwa> <def></def><sym>(</sym><def>c</def> <sym>:</sym> <def>rendezvousCreatures</def><sym>){</sym><br />
<def>      sum</def> <sym>+=</sym> <def>c</def><sym>.</sym><def>creaturesMet</def><sym>;</sym><br />
<def>      println</def><sym>(</sym><def>c</def><sym>.</sym><def>creaturesMet</def> <sym>+</sym> <def>spellout</def><sym>(</sym><def>c</def><sym>.</sym><def>selfMet</def><sym>) );</sym><br />
<def></def>   <sym>}</sym><br />
<def>   println</def><sym>(</sym> <def>spellout</def><sym>(</sym><def>sum</def><sym>) );</sym><br />
<def>   println</def><sym>();</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<br />
<kwa>var</kwa> <def></def><kwb>int</kwb> <def>n</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><br />
<kwb>void</kwb> <def>main</def><sym>(</sym><def>String</def><sym>[]</sym> <def>args</def><sym>){</sym><br />
<def>   n</def> <sym>=</sym> <def>Integer</def><sym>.</sym><def>parseInt</def><sym>(</sym><def>args</def><sym>[</sym><def></def><num>0</num><def></def><sym>]);</sym><br />
<def><br />
   checkCreatureColourChanges</def><sym>();</sym><br />
<def>   reportRendezvouses</def><sym>([</sym><def>blue</def><sym>,</sym><def>red</def><sym>,</sym><def>yellow</def><sym>]);</sym><br />
<def>   reportRendezvouses</def><sym>([</sym><def>blue</def><sym>,</sym><def>red</def><sym>,</sym><def>yellow</def><sym>,</sym><def>red</def><sym>,</sym><def>yellow</def><sym>,</sym><def>blue</def><sym>,</sym><def>red</def><sym>,</sym><def>yellow</def><sym>,</sym><def>red</def><sym>,</sym><def>blue</def><sym>]);</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
