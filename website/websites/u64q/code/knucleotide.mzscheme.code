<source>
<def></def><slc>;;   The Computer Language Shootout</slc><br />
<def></def><slc>;;   http://shootout.alioth.debian.org/</slc><br />
<def></def><br />
<sym>(</sym><def>module knucleotide mzscheme</def><br />
  <sym>(</sym><def>require</def> <sym>(</sym><def>lib</def> <str>&quot;list.ss&quot;</str><def></def><sym>)</sym><br />
<def></def>           <sym>(</sym><def>lib</def> <str>&quot;string.ss&quot;</str><def></def><sym>)</sym><br />
<def></def>           <sym>(</sym><def>only</def> <sym>(</sym><def>lib</def> <str>&quot;13.ss&quot;</str><def></def> <str>&quot;srfi&quot;</str><def></def><sym>)</sym> <def>string</def><sym>-</sym><def>pad</def><sym>-</sym><def>right</def><sym>))</sym><br />
<def></def><br />
  <sym>(</sym><def>define</def> <sym>(</sym><def>all</def><sym>-</sym><def>counts len dna</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def>let</def> <sym>([</sym><def>table</def> <sym>(</sym><def>make</def><sym>-</sym><def>hash</def><sym>-</sym><def>table</def><sym>)]</sym><br />
<def></def>          <sym>[</sym><def>seq</def> <sym>(</sym><def>make</def><sym>-</sym><def>string len</def><sym>)])</sym><br />
<def></def>      <sym>(</sym><def>let loop</def> <sym>([</sym><def>s</def> <sym>(- (</sym><def>string</def><sym>-</sym><def></def><kwa>length</kwa> <def>dna</def><sym>)</sym> <def>len</def><sym>)])</sym><br />
<def></def>        <sym>(</sym><def>string</def><sym>-</sym><def>copy</def><sym>!</sym> <def>seq</def> <num>0</num> <def>dna s</def> <sym>(+</sym> <def>s len</def><sym>))</sym><br />
<def></def>        <sym>(</sym><def>let</def> <sym>([</sym><def>key</def> <sym>(</sym><def>string</def><sym>-&gt;</sym><def>symbol seq</def><sym>)])</sym><br />
<def></def>          <sym>(</sym><def>let</def> <sym>([</sym><def>cnt</def> <sym>(</sym><def>hash</def><sym>-</sym><def>table</def><sym>-</sym><def>get table key</def> <num>0</num><def></def><sym>)])</sym><br />
<def></def>            <sym>(</sym><def>hash</def><sym>-</sym><def>table</def><sym>-</sym><def>put</def><sym>!</sym> <def>table key</def> <sym>(</sym><def>add1 cnt</def><sym>))))</sym><br />
<def></def>        <sym>(</sym><def>unless</def> <sym>(</sym><def>zero? s</def><sym>)</sym><br />
<def></def>          <sym>(</sym><def>loop</def> <sym>(</sym><def>sub1 s</def><sym>))))</sym><br />
<def>      table</def><sym>))</sym><br />
<def></def><br />
  <sym>(</sym><def>define</def> <sym>(</sym><def>write</def><sym>-</sym><def>freqs table</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def>let</def><sym>* ([</sym><def>content</def> <sym>(</sym><def>hash</def><sym>-</sym><def>table</def><sym>-</sym><def>map table</def> <kwa>cons</kwa><def></def><sym>)]</sym><br />
<def></def>           <sym>[</sym><def>total</def> <sym>(</sym><def>exact</def><sym>-&gt;</sym><def>inexact</def> <sym>(</sym><def></def><kwa>apply</kwa> <def></def><sym>+ (</sym><def>map</def> <kwa>cdr</kwa> <def>content</def><sym>)))])</sym><br />
<def></def>      <sym>(</sym><def>for</def><sym>-</sym><def>each</def><br />
       <sym>(</sym><def></def><kwa>lambda</kwa> <def></def><sym>(</sym><def>a</def><sym>)</sym><br />
<def></def>         <sym>(</sym><def>printf</def> <str>&quot;~a ~a</str><esc>\</esc><str>n&quot;</str><def></def><br />
                 <sym>(</sym><def></def><kwa>car</kwa> <def>a</def><sym>)</sym><br />
<def></def>                 <sym>(</sym><def>real</def><sym>-&gt;</sym><def>decimal</def><sym>-</sym><def>string</def> <sym>(*</sym> <def></def><num>100</num> <def></def><sym>(/ (</sym><def></def><kwa>cdr</kwa> <def>a</def><sym>)</sym> <def>total</def><sym>))</sym> <def></def><num>3</num><def></def><sym>)))</sym><br />
<def></def>       <sym>(</sym><def>sort content</def> <sym>(</sym><def></def><kwa>lambda</kwa> <def></def><sym>(</sym><def>a b</def><sym>) (&gt; (</sym><def></def><kwa>cdr</kwa> <def>a</def><sym>) (</sym><def></def><kwa>cdr</kwa> <def>b</def><sym>)))))))</sym><br />
<def></def><br />
  <sym>(</sym><def>define</def> <sym>(</sym><def>write</def><sym>-</sym><def>one</def><sym>-</sym><def>freq table key</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def>let</def> <sym>([</sym><def>cnt</def> <sym>(</sym><def>hash</def><sym>-</sym><def>table</def><sym>-</sym><def>get table key</def> <num>0</num><def></def><sym>)])</sym><br />
<def></def>      <sym>(</sym><def>printf</def> <str>&quot;~a</str><esc>\</esc><str>t~a</str><esc>\</esc><str>n&quot;</str><def> cnt key</def><sym>)))</sym><br />
<def></def><br />
  <sym>(</sym><def>define dna</def><br />
    <sym>(</sym><def>begin</def><br />
      <slc>;; Skip to &quot;&gt;THREE ...&quot;</slc><br />
<def></def>      <sym>(</sym><def>regexp</def><sym>-</sym><def>match #rx#</def><str>&quot;(?m:^&gt;THREE.*$)&quot;</str><def></def> <sym>(</sym><def>current</def><sym>-</sym><def>input</def><sym>-</sym><def>port</def><sym>))</sym><br />
<def></def>      <sym>(</sym><def>let</def> <sym>([</sym><def>s</def> <sym>(</sym><def></def><kwa>open</kwa><def></def><sym>-</sym><def>output</def><sym>-</sym><def>string</def><sym>)])</sym><br />
<def></def>        <slc>;; Copy everything but newlines to s:</slc><br />
<def></def>        <sym>(</sym><def>let loop</def> <sym>()</sym><br />
<def></def>          <sym>(</sym><def>when</def> <sym>(</sym><def>regexp</def><sym>-</sym><def>match #rx#</def><str>&quot;</str><esc>\</esc><str>n&quot;</str><def></def> <sym>(</sym><def>current</def><sym>-</sym><def>input</def><sym>-</sym><def>port</def><sym>)</sym> <def></def><num>0</num> <def>#f s</def><sym>)</sym><br />
<def></def>            <sym>(</sym><def>loop</def><sym>)))</sym><br />
<def></def>        <slc>;; Extract the string from s:</slc><br />
<def></def>        <sym>(</sym><def>string</def><sym>-</sym><def>upcase</def> <sym>(</sym><def>get</def><sym>-</sym><def>output</def><sym>-</sym><def>string s</def><sym>)))))</sym><br />
<def></def><br />
  <slc>;; 1-nucleotide counts:</slc><br />
<def></def>  <sym>(</sym><def>write</def><sym>-</sym><def>freqs</def> <sym>(</sym><def>all</def><sym>-</sym><def>counts</def> <num>1</num> <def>dna</def><sym>))</sym><br />
<def></def>  <sym>(</sym><def>newline</def><sym>)</sym><br />
<def></def><br />
  <slc>;; 2-nucleotide counts:</slc><br />
<def></def>  <sym>(</sym><def>write</def><sym>-</sym><def>freqs</def> <sym>(</sym><def>all</def><sym>-</sym><def>counts</def> <num>2</num> <def>dna</def><sym>))</sym><br />
<def></def>  <sym>(</sym><def>newline</def><sym>)</sym><br />
<def></def><br />
  <slc>;; Specific sequences:</slc><br />
<def></def>  <sym>(</sym><def>for</def><sym>-</sym><def>each</def> <sym>(</sym><def></def><kwa>lambda</kwa> <def></def><sym>(</sym><def>seq</def><sym>)</sym><br />
<def></def>              <sym>(</sym><def>write</def><sym>-</sym><def>one</def><sym>-</sym><def>freq</def> <sym>(</sym><def>all</def><sym>-</sym><def>counts</def> <sym>(</sym><def>string</def><sym>-</sym><def></def><kwa>length</kwa> <def>seq</def><sym>)</sym> <def>dna</def><sym>)</sym><br />
<def></def>                              <sym>(</sym><def>string</def><sym>-&gt;</sym><def>symbol seq</def><sym>)))</sym><br />
<def></def>            <sym>'(</sym><def></def><str>&quot;GGT&quot;</str><def></def> <str>&quot;GGTA&quot;</str><def></def> <str>&quot;GGTATT&quot;</str><def></def> <str>&quot;GGTATTTTAATT&quot;</str><def></def> <str>&quot;GGTATTTTAATTTATAGT&quot;</str><def></def><sym>))</sym><br />
<def></def><br />
  <sym>)</sym><br />
<def></def><br />
<br />
<br />
</source>
