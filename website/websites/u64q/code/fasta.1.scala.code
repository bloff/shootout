<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Isaac Gouy</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> java<span class="hl sym">.</span>io<span class="hl sym">.</span>_

<span class="hl kwa">object</span> fasta <span class="hl sym">{</span>
   <span class="hl kwa">def</span> main<span class="hl sym">(</span>args<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">String</span><span class="hl sym">]) = {</span>

      <span class="hl kwa">val</span> ALU <span class="hl sym">=</span>
         <span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span> <span class="hl sym">+</span>
         <span class="hl str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span> <span class="hl sym">+</span>
         <span class="hl str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span> <span class="hl sym">+</span>
         <span class="hl str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span> <span class="hl sym">+</span>
         <span class="hl str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span> <span class="hl sym">+</span>
         <span class="hl str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span> <span class="hl sym">+</span>
         <span class="hl str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>

      <span class="hl kwa">val</span> _IUB <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">(</span>
         Pair<span class="hl sym">(</span><span class="hl str">'a'</span><span class="hl sym">,</span> <span class="hl num">0.27</span><span class="hl sym">),</span>
         Pair<span class="hl sym">(</span><span class="hl str">'c'</span><span class="hl sym">,</span> <span class="hl num">0.12</span><span class="hl sym">),</span>
         Pair<span class="hl sym">(</span><span class="hl str">'g'</span><span class="hl sym">,</span> <span class="hl num">0.12</span><span class="hl sym">),</span>
         Pair<span class="hl sym">(</span><span class="hl str">'t'</span><span class="hl sym">,</span> <span class="hl num">0.27</span><span class="hl sym">),</span>

         Pair<span class="hl sym">(</span><span class="hl str">'B'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">),</span>
         Pair<span class="hl sym">(</span><span class="hl str">'D'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">),</span>
         Pair<span class="hl sym">(</span><span class="hl str">'H'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">),</span>
         Pair<span class="hl sym">(</span><span class="hl str">'K'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">),</span>
         Pair<span class="hl sym">(</span><span class="hl str">'M'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">),</span>
         Pair<span class="hl sym">(</span><span class="hl str">'N'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">),</span>
         Pair<span class="hl sym">(</span><span class="hl str">'R'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">),</span>
         Pair<span class="hl sym">(</span><span class="hl str">'S'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">),</span>
         Pair<span class="hl sym">(</span><span class="hl str">'V'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">),</span>
         Pair<span class="hl sym">(</span><span class="hl str">'W'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">),</span>
         Pair<span class="hl sym">(</span><span class="hl str">'Y'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">)</span>
      <span class="hl sym">)</span>

      <span class="hl kwa">val</span> IUB <span class="hl sym">=</span> makeCumulative<span class="hl sym">(</span>_IUB<span class="hl sym">)</span>

      <span class="hl kwa">val</span> _HomoSapiens <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">(</span>
         Pair<span class="hl sym">(</span><span class="hl str">'a'</span><span class="hl sym">,</span> <span class="hl num">0.3029549426680</span><span class="hl sym">),</span>
         Pair<span class="hl sym">(</span><span class="hl str">'c'</span><span class="hl sym">,</span> <span class="hl num">0.1979883004921</span><span class="hl sym">),</span>
         Pair<span class="hl sym">(</span><span class="hl str">'g'</span><span class="hl sym">,</span> <span class="hl num">0.1975473066391</span><span class="hl sym">),</span>
         Pair<span class="hl sym">(</span><span class="hl str">'t'</span><span class="hl sym">,</span> <span class="hl num">0.3015094502008</span><span class="hl sym">)</span>
      <span class="hl sym">)</span>

      <span class="hl kwa">val</span> HomoSapiens <span class="hl sym">=</span> makeCumulative<span class="hl sym">(</span>_HomoSapiens<span class="hl sym">)</span>


      <span class="hl kwa">val</span> n <span class="hl sym">=</span> <span class="hl kwc">Integer</span> parseInt<span class="hl sym">(</span>args<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">))</span>
      <span class="hl kwa">val</span> s <span class="hl sym">=</span> <span class="hl kwa">new</span> FastaOutputStream<span class="hl sym">(</span><span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">)</span>

      s<span class="hl sym">.</span>writeDescription<span class="hl sym">(</span><span class="hl str">&quot;ONE Homo sapiens alu&quot;</span><span class="hl sym">)</span>
      s<span class="hl sym">.</span>writeRepeatingSequence<span class="hl sym">(</span>ALU<span class="hl sym">,</span>n<span class="hl sym">*</span><span class="hl num">2</span><span class="hl sym">)</span>

      s<span class="hl sym">.</span>writeDescription<span class="hl sym">(</span><span class="hl str">&quot;TWO IUB ambiguity codes&quot;</span><span class="hl sym">)</span>
      s<span class="hl sym">.</span>writeRandomSequence<span class="hl sym">(</span>IUB<span class="hl sym">,</span>n<span class="hl sym">*</span><span class="hl num">3</span><span class="hl sym">)</span>

      s<span class="hl sym">.</span>writeDescription<span class="hl sym">(</span><span class="hl str">&quot;THREE Homo sapiens frequency&quot;</span><span class="hl sym">)</span>
      s<span class="hl sym">.</span>writeRandomSequence<span class="hl sym">(</span>HomoSapiens<span class="hl sym">,</span>n<span class="hl sym">*</span><span class="hl num">5</span><span class="hl sym">)</span>

      s<span class="hl sym">.</span>close
   <span class="hl sym">}</span>

   <span class="hl kwa">def</span> makeCumulative<span class="hl sym">(</span>a<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span>Pair<span class="hl sym">[</span>Char<span class="hl sym">,</span><span class="hl kwb">double</span><span class="hl sym">]]) = {</span>
      <span class="hl kwa">var</span> cp <span class="hl sym">=</span> <span class="hl num">0.0</span>
      a map <span class="hl sym">(</span>frequency <span class="hl sym">=&gt;</span>
         frequency match <span class="hl sym">{</span>
            <span class="hl kwa">case</span> Pair<span class="hl sym">(</span>code<span class="hl sym">,</span>percent<span class="hl sym">) =&gt;</span>
               cp <span class="hl sym">=</span> cp <span class="hl sym">+</span> percent<span class="hl sym">;</span> <span class="hl kwa">new</span> Frequency<span class="hl sym">(</span>code<span class="hl sym">.</span>toByte<span class="hl sym">,</span>cp<span class="hl sym">)</span>
         <span class="hl sym">}</span>
      <span class="hl sym">)</span>
   <span class="hl sym">}</span>

<span class="hl sym">}</span>


<span class="hl slc">// We could use instances of Pair or Tuple2 but specific labels</span>
<span class="hl slc">// make the code more readable than index numbers</span>

<span class="hl kwa">class</span> Frequency<span class="hl sym">(</span>_code<span class="hl sym">:</span> <span class="hl kwb">byte</span><span class="hl sym">,</span> _percent<span class="hl sym">:</span> <span class="hl kwb">double</span><span class="hl sym">){</span>
   <span class="hl kwa">var</span> code <span class="hl sym">=</span> _code<span class="hl sym">;</span> <span class="hl kwa">var</span> percent <span class="hl sym">=</span> _percent<span class="hl sym">;</span>
<span class="hl sym">}</span>


<span class="hl slc">// extend the Java BufferedOutputStream class</span>

<span class="hl kwa">class</span> FastaOutputStream<span class="hl sym">(</span>out<span class="hl sym">:</span> <span class="hl kwc">OutputStream</span><span class="hl sym">)</span> <span class="hl kwa">extends</span> <span class="hl kwc">BufferedOutputStream</span><span class="hl sym">(</span>out<span class="hl sym">) {</span>

   <span class="hl kwa">private val</span> LineLength <span class="hl sym">=</span> <span class="hl num">60</span>
   <span class="hl kwa">private val</span> nl <span class="hl sym">=</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">.</span>toByte

   <span class="hl kwa">def</span> writeDescription<span class="hl sym">(</span>desc<span class="hl sym">:</span> <span class="hl kwc">String</span><span class="hl sym">) = {</span> write<span class="hl sym">( (</span><span class="hl str">&quot;&gt;&quot;</span> <span class="hl sym">+</span> desc <span class="hl sym">+</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">).</span>getBytes <span class="hl sym">) }</span>

   <span class="hl kwa">def</span> writeRepeatingSequence<span class="hl sym">(</span>_alu<span class="hl sym">:</span> <span class="hl kwc">String</span><span class="hl sym">,</span> length<span class="hl sym">:</span> <span class="hl kwb">int</span><span class="hl sym">) = {</span>
      <span class="hl kwa">val</span> alu <span class="hl sym">=</span> _alu<span class="hl sym">.</span>getBytes
      <span class="hl kwa">var</span> n <span class="hl sym">=</span> length<span class="hl sym">;</span> <span class="hl kwa">var</span> k <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> <span class="hl kwa">val</span> kn <span class="hl sym">=</span> alu<span class="hl sym">.</span>length<span class="hl sym">;</span>

      <span class="hl kwa">while</span> <span class="hl sym">(</span>n <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">) {</span>
         <span class="hl kwa">val</span> m <span class="hl sym">=</span> <span class="hl kwa">if</span> <span class="hl sym">(</span>n <span class="hl sym">&lt;</span> LineLength<span class="hl sym">)</span> n <span class="hl kwa">else</span> LineLength

         <span class="hl kwa">var</span> i <span class="hl sym">=</span> <span class="hl num">0</span>
         <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> m<span class="hl sym">){</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>k <span class="hl sym">==</span> kn<span class="hl sym">)</span> k <span class="hl sym">=</span> <span class="hl num">0</span>
            <span class="hl kwa">val</span> b <span class="hl sym">=</span> alu<span class="hl sym">(</span>k<span class="hl sym">)</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>count <span class="hl sym">&lt;</span> buf<span class="hl sym">.</span>length<span class="hl sym">){</span> buf<span class="hl sym">(</span>count<span class="hl sym">) =</span> b<span class="hl sym">;</span> count <span class="hl sym">=</span> count <span class="hl sym">+</span> <span class="hl num">1</span> <span class="hl sym">}</span>
            <span class="hl kwa">else</span> <span class="hl sym">{</span> write<span class="hl sym">(</span>b<span class="hl sym">) }</span> <span class="hl slc">// flush buffer</span>
            k <span class="hl sym">=</span> k<span class="hl sym">+</span><span class="hl num">1</span>
            i <span class="hl sym">=</span> i<span class="hl sym">+</span><span class="hl num">1</span>
         <span class="hl sym">}</span>

         write<span class="hl sym">(</span>nl<span class="hl sym">)</span>
         n <span class="hl sym">=</span> n <span class="hl sym">-</span> LineLength
      <span class="hl sym">}</span>

   <span class="hl sym">}</span>

   <span class="hl kwa">def</span> writeRandomSequence<span class="hl sym">(</span>distribution<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span>Frequency<span class="hl sym">],</span> length<span class="hl sym">:</span> <span class="hl kwb">int</span><span class="hl sym">) = {</span>
      <span class="hl kwa">var</span> n <span class="hl sym">=</span> length
      <span class="hl kwa">while</span> <span class="hl sym">(</span>n <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">) {</span>
         <span class="hl kwa">val</span> m <span class="hl sym">=</span> <span class="hl kwa">if</span> <span class="hl sym">(</span>n <span class="hl sym">&lt;</span> LineLength<span class="hl sym">)</span> n <span class="hl kwa">else</span> LineLength

         <span class="hl kwa">var</span> i <span class="hl sym">=</span> <span class="hl num">0</span>
         <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> m<span class="hl sym">){</span>
            <span class="hl kwa">val</span> b <span class="hl sym">=</span> selectRandom<span class="hl sym">(</span>distribution<span class="hl sym">)</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>count <span class="hl sym">&lt;</span> buf<span class="hl sym">.</span>length<span class="hl sym">){</span> buf<span class="hl sym">(</span>count<span class="hl sym">) =</span> b<span class="hl sym">;</span> count <span class="hl sym">=</span> count <span class="hl sym">+</span> <span class="hl num">1</span> <span class="hl sym">}</span>
            <span class="hl kwa">else</span> <span class="hl sym">{</span> write<span class="hl sym">(</span>b<span class="hl sym">) }</span> <span class="hl slc">// flush buffer</span>
            i <span class="hl sym">=</span> i<span class="hl sym">+</span><span class="hl num">1</span>
         <span class="hl sym">}</span>

         <span class="hl kwa">if</span> <span class="hl sym">(</span>count <span class="hl sym">&lt;</span> buf<span class="hl sym">.</span>length<span class="hl sym">){</span> buf<span class="hl sym">(</span>count<span class="hl sym">) =</span> nl<span class="hl sym">;</span> count <span class="hl sym">=</span> count <span class="hl sym">+</span> <span class="hl num">1</span> <span class="hl sym">}</span>
         <span class="hl kwa">else</span> <span class="hl sym">{</span> write<span class="hl sym">(</span>nl<span class="hl sym">) }</span> <span class="hl slc">// flush buffer</span>
         n <span class="hl sym">=</span> n <span class="hl sym">-</span> LineLength
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">private def</span> selectRandom<span class="hl sym">(</span>distribution<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span>Frequency<span class="hl sym">]):</span> <span class="hl kwc">Byte</span> <span class="hl sym">= {</span>
      <span class="hl kwa">val</span> n <span class="hl sym">=</span> distribution<span class="hl sym">.</span>length
      <span class="hl kwa">val</span> r <span class="hl sym">=</span> RandomNumber scaledTo<span class="hl sym">(</span><span class="hl num">1.0</span><span class="hl sym">)</span>

      <span class="hl kwa">var</span> i <span class="hl sym">=</span> <span class="hl num">0</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> n<span class="hl sym">) {</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>r <span class="hl sym">&lt;</span> distribution<span class="hl sym">(</span>i<span class="hl sym">).</span>percent<span class="hl sym">)</span> <span class="hl kwa">return</span> distribution<span class="hl sym">(</span>i<span class="hl sym">).</span>code
         i <span class="hl sym">=</span> i<span class="hl sym">+</span><span class="hl num">1</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">return</span> distribution<span class="hl sym">(</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">).</span>code
   <span class="hl sym">}</span>
<span class="hl sym">}</span>


<span class="hl kwa">object</span> RandomNumber <span class="hl sym">{</span>
   <span class="hl kwa">private val</span> IM <span class="hl sym">=</span> <span class="hl num">139968</span>
   <span class="hl kwa">private val</span> IA <span class="hl sym">=</span> <span class="hl num">3877</span>
   <span class="hl kwa">private val</span> IC <span class="hl sym">=</span> <span class="hl num">29573</span>
   <span class="hl kwa">private var</span> seed <span class="hl sym">=</span> <span class="hl num">42</span>

   <span class="hl kwa">def</span> scaledTo<span class="hl sym">(</span>max<span class="hl sym">:</span> <span class="hl kwb">double</span><span class="hl sym">) = {</span>
      seed <span class="hl sym">= (</span>seed <span class="hl sym">*</span> IA <span class="hl sym">+</span> IC<span class="hl sym">) %</span> IM
      max <span class="hl sym">*</span> seed <span class="hl sym">/</span> IM
   <span class="hl sym">}</span>
<span class="hl sym">}</span>
