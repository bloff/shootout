<source>
<def></def><com>/* The Computer Language Shootout</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com>   contributed by Isaac Gouy</com><br />
<com>*/</com><def></def><br />
<br />
<kwa>import</kwa> <def>java</def><sym>.</sym><def>io</def><sym>.*;</sym><br />
<def></def><br />
<kwb>void</kwb> <def>main</def><sym>(</sym><def>String</def><sym>[]</sym> <def>args</def><sym>){</sym><br />
<def></def><br />
   <kwb>byte</kwb><def></def><sym>[]</sym> <def>IUBCodeComplements</def><sym>(){</sym><br />
<def></def>      <kwa>let</kwa> <def>code</def> <sym>=</sym> <def></def><str>&quot;ABCDGHKMNRSTVWYabcdghkmnrstvwy&quot;</str><def></def><sym>.</sym><def>getBytes</def><sym>;</sym><br />
<def></def>      <kwa>let</kwa> <def>comp</def> <sym>=</sym> <def></def><str>&quot;TVGHCDMKNYSABWRTVGHCDMKNYSABWR&quot;</str><def></def><sym>.</sym><def>getBytes</def><sym>;</sym><br />
<def></def>      <kwa>let</kwa> <def></def><kwb>byte</kwb><def></def><sym>[]</sym> <def>a</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwb>byte</kwb><def></def><sym>[</sym> <def></def><str>&quot;z&quot;</str><def></def><sym>.</sym><def>getBytes</def><sym>[</sym><def></def><num>0</num><def></def><sym>] ];</sym><br />
<def></def><br />
      <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwa>var</kwa> <def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>i</def><sym>&lt;</sym><def>code</def><sym>.</sym><def>length</def><sym>;</sym> <def>i</def><sym>++)</sym> <def>a</def><sym>[</sym> <def>code</def><sym>[</sym><def>i</def><sym>] ] =</sym> <def>comp</def><sym>[</sym><def>i</def><sym>];</sym><br />
<def></def>      <kwa>return</kwa> <def>a</def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>let</kwa> <def>IUB</def> <sym>=</sym> <def>IUBCodeComplements</def><sym>();</sym><br />
<def></def><br />
<br />
   <kwb>void</kwb> <def>complementReverseWrite</def><sym>(</sym><def>String desc</def><sym>,</sym> <def>Stack</def><sym>&lt;</sym><def></def><kwb>byte</kwb><def></def><sym>[]&gt;</sym> <def>lines</def><sym>,</sym><br />
<def>         BufferedOutputStream w</def><sym>){</sym><br />
<def></def><br />
      <kwb>void</kwb> <def>inplaceComplementReverse</def><sym>(</sym><def></def><kwb>byte</kwb><def></def><sym>[]</sym> <def>b</def><sym>){</sym><br />
<def></def>         <kwa>var</kwa> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>         <kwa>var</kwa> <def>j</def> <sym>=</sym> <def>b</def><sym>.</sym><def>length</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>         <kwa>while</kwa> <def></def><sym>(</sym><def>i</def> <sym>&lt;</sym> <def>j</def><sym>){</sym><br />
<def></def>            <kwa>let</kwa> <def>swap</def> <sym>=</sym> <def>b</def><sym>[</sym><def>i</def><sym>];</sym><br />
<def>            b</def><sym>[</sym><def>i</def><sym>] =</sym> <def>IUB</def><sym>[</sym> <def>b</def><sym>[</sym><def>j</def><sym>] ];</sym><br />
<def>            b</def><sym>[</sym><def>j</def><sym>] =</sym> <def>IUB</def><sym>[</sym> <def>swap</def> <sym>];</sym><br />
<def>            i</def> <sym>=</sym> <def>i</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def>            j</def> <sym>=</sym> <def>j</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>i</def> <sym>==</sym> <def>j</def><sym>)</sym> <def>b</def><sym>[</sym><def>i</def><sym>] =</sym> <def>IUB</def><sym>[</sym> <def>b</def><sym>[</sym><def>i</def><sym>] ];</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><br />
      <kwa>let</kwa> <def>nl</def> <sym>=</sym> <def></def><str>&quot;\n&quot;</str><def></def><sym>.</sym><def>getBytes</def><sym>[</sym><def></def><num>0</num><def></def><sym>];</sym><br />
<def>      w</def><sym>.</sym><def>write</def><sym>(</sym><def>desc</def><sym>.</sym><def>getBytes</def><sym>);</sym> <def>w</def><sym>.</sym><def>write</def><sym>(</sym><def>nl</def><sym>);</sym><br />
<def></def><br />
      <kwa>let</kwa> <def>n</def> <sym>=</sym> <def></def><num>60</num><def></def><sym>;</sym><br />
<def></def>      <kwa>var</kwa> <def>k</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(!</sym><def>lines</def><sym>.</sym><def>empty</def><sym>)</sym> <def>k</def> <sym>=</sym> <def>lines</def><sym>.</sym><def>peek</def><sym>.</sym><def>length</def><sym>;</sym><br />
<def></def>      <kwa>let</kwa> <def>isSplitLine</def> <sym>=</sym> <def>k</def> <sym>&lt;</sym> <def>n</def><sym>;</sym><br />
<def></def>      <kwa>var</kwa> <def>isFirstLine</def> <sym>=</sym> <def>true</def><sym>;</sym><br />
<def></def><br />
      <kwa>while</kwa> <def></def><sym>(!</sym><def>lines</def><sym>.</sym><def>empty</def><sym>) {</sym><br />
<def></def>        <kwa>let</kwa> <def>line</def> <sym>=</sym> <def>lines</def><sym>.</sym><def>pop</def><sym>;</sym><br />
<def>        inplaceComplementReverse</def><sym>(</sym><def>line</def><sym>);</sym><br />
<def></def><br />
        <kwa>if</kwa> <def></def><sym>(</sym><def>isSplitLine</def><sym>){</sym><br />
<def></def>           <kwa>if</kwa> <def></def><sym>(</sym><def>isFirstLine</def><sym>){</sym> <def>w</def><sym>.</sym><def>write</def><sym>(</sym><def>line</def><sym>);</sym> <def>isFirstLine</def> <sym>=</sym> <def>false</def><sym>; }</sym><br />
<def></def>           <kwa>else</kwa> <def></def><sym>{</sym> <def>w</def><sym>.</sym><def>write</def><sym>(</sym><def>line</def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def>n</def><sym>-</sym><def>k</def><sym>);</sym> <def>w</def><sym>.</sym><def>write</def><sym>(</sym><def>nl</def><sym>);</sym> <def>w</def><sym>.</sym><def>write</def><sym>(</sym><def>line</def><sym>,</sym><def>n</def><sym>-</sym><def>k</def><sym>,</sym><def>k</def><sym>); }</sym><br />
<def></def>        <sym>}</sym><br />
<def></def>        <kwa>else</kwa> <def></def><sym>{</sym> <def>w</def><sym>.</sym><def>write</def><sym>(</sym><def>line</def><sym>);</sym> <def>w</def><sym>.</sym><def>write</def><sym>(</sym><def>nl</def><sym>); }</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>isSplitLine</def> <sym>&amp;&amp; !</sym><def>isFirstLine</def><sym>)</sym> <def>w</def><sym>.</sym><def>write</def><sym>(</sym><def>nl</def><sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
<br />
<br />
   <kwa>let</kwa> <def>r</def> <sym>=</sym> <def></def><kwa>new</kwa> <def>BufferedReader</def><sym>(</sym><def></def><kwa>new</kwa> <def>InputStreamReader</def><sym>(</sym><def>System</def><sym>.</sym><def>in</def><sym>));</sym><br />
<def></def>   <kwa>let</kwa> <def>w</def> <sym>=</sym> <def></def><kwa>new</kwa> <def>BufferedOutputStream</def><sym>(</sym><def>System</def><sym>.</sym><def>out</def><sym>);</sym><br />
<def></def><br />
   <kwa>var</kwa> <def>lines</def> <sym>=</sym> <def></def><kwa>new</kwa> <def>Stack</def><sym>();</sym><br />
<def></def>   <kwa>var</kwa> <def>desc</def> <sym>=</sym> <def></def><str>&quot;&quot;</str><def></def><sym>;</sym><br />
<def></def><br />
   <kwa>var</kwa> <def></def><sym>?</sym><def>String line</def><sym>;</sym><br />
<def></def>   <kwa>while</kwa> <def></def><sym>((</sym><def>line</def> <sym>=</sym> <def>r</def><sym>.</sym><def>readLine</def><sym>()) !=</sym> <def></def><kwa>null</kwa><def></def><sym>) {</sym><br />
<def></def>      <kwa>let</kwa> <def>c</def> <sym>=</sym> <def>line</def><sym>[</sym><def></def><num>0</num><def></def><sym>];</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>c</def> <sym>==</sym> <def></def><str>'&gt;'</str><def></def><sym>){</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>desc</def><sym>.</sym><def>length</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>){</sym><br />
<def>            complementReverseWrite</def><sym>(</sym><def>desc</def><sym>,</sym> <def>lines</def><sym>,</sym> <def>w</def><sym>);</sym><br />
<def>            lines</def> <sym>=</sym> <def></def><kwa>new</kwa> <def>Stack</def><sym>();</sym><br />
<def></def>         <sym>}</sym><br />
<def>         desc</def> <sym>=</sym> <def>line</def><sym>;</sym><br />
<def></def>      <sym>}</sym> <def></def><kwa>else</kwa> <def></def><sym>{</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>c</def> <sym>!=</sym> <def></def><str>';'</str><def></def><sym>)</sym> <def>lines</def><sym>.</sym><def>push</def><sym>(</sym><def>line</def><sym>.</sym><def>getBytes</def><sym>);</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>      <sym>}</sym><br />
<def>   r</def><sym>.</sym><def>close</def><sym>;</sym><br />
<def></def><br />
   <kwa>if</kwa> <def></def><sym>(</sym><def>desc</def><sym>.</sym><def>length</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>)</sym> <def>complementReverseWrite</def><sym>(</sym><def>desc</def><sym>,</sym> <def>lines</def><sym>,</sym> <def>w</def><sym>);</sym><br />
<def>   w</def><sym>.</sym><def>close</def><sym>;</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
