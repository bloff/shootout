<source>
<def></def><slc># The Computer Language Benchmarks Game</slc><br />
<def></def><slc># http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>#</slc><br />
<def></def><slc># contributed by Heinrich Acker</slc><br />
<def></def><br />
<kwa>import</kwa> <def>sys</def><br />
<kwa>import</kwa> <def>numpy<br />
<br />
limit</def> <sym>=</sym> <def></def><num>2</num><def></def><sym>.</sym><br />
<def>size</def> <sym>=</sym> <def></def><kwb>int</kwb><def></def><sym>(</sym><def>sys</def><sym>.</sym><def>argv</def><sym>[</sym><def></def><num>1</num><def></def><sym>])</sym><br />
<def></def><br />
<slc># create an array of NxN complex constants</slc><br />
<def>grid</def> <sym>=</sym> <def>numpy</def><sym>.</sym><def></def><kwd>arange</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def></def><num>2</num><def></def><sym>,</sym> <def></def><num>2</num><def></def><sym>./</sym><def>size</def><sym>)</sym><br />
<def>c</def> <sym>= (</sym><def>grid</def><sym>-</sym><def></def><num>1.5</num><def></def><sym>).</sym><def></def><kwd>reshape</kwd><def></def><sym>(</sym><def></def><num>1</num><def></def><sym>,</sym> <def>size</def><sym>).</sym><def></def><kwd>repeat</kwd><def></def><sym>(</sym><def>size</def><sym>,</sym> <def></def><num>0</num><def></def><sym>) +</sym> <def>\</def><br />
     <num>1</num><def>j</def><sym>*(</sym><def>grid</def><sym>-</sym><def></def><num>1</num><def></def><sym>).</sym><def></def><kwd>reshape</kwd><def></def><sym>(</sym><def>size</def><sym>,</sym> <def></def><num>1</num><def></def><sym>).</sym><def></def><kwd>repeat</kwd><def></def><sym>(</sym><def>size</def><sym>,</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def><br />
<slc># create NxN arrays for iteration and results</slc><br />
<def>z</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>*</sym><def>c<br />
mask</def> <sym>=</sym> <def>z</def><sym>==</sym><def></def><num>0</num><br />
<def></def><br />
<slc># compute the mandelbrot set vectorized</slc><br />
<def></def><kwa>for</kwa> <def>i</def> <kwa>in</kwa> <def></def><kwb>range</kwb><def></def><sym>(</sym><def></def><num>50</num><def></def><sym>):</sym><br />
<def>    z</def> <sym>=</sym> <def>mask</def> <sym>* (</sym><def>z</def> <sym>*</sym> <def>z</def> <sym>+</sym> <def>c</def><sym>)</sym><br />
<def>    mask</def> <sym>=</sym> <def>numpy</def><sym>.</sym><def></def><kwd>logical_and</kwd><def></def><sym>(</sym><def>mask</def><sym>,</sym> <def>numpy</def><sym>.</sym><def></def><kwb>abs</kwb><def></def><sym>(</sym><def>z</def><sym>)&lt;</sym><def>limit</def><sym>)</sym><br />
<def></def><br />
<slc># map the bool results to their binary value</slc><br />
<def>mask</def> <sym>=</sym> <def>mask</def><sym>.</sym><def></def><kwd>reshape</kwd><def></def><sym>(-</sym><def></def><num>1</num><def></def><sym>,</sym> <def></def><num>8</num><def></def><sym>).</sym><def></def><kwd>astype</kwd><def></def><sym>(</sym><def></def><str>'uint8'</str><def></def><sym>)</sym><br />
<def></def><kwa>for</kwa> <def>bit</def> <kwa>in</kwa> <def></def><kwb>range</kwb><def></def><sym>(</sym><def></def><num>8</num><def></def><sym>):</sym><br />
<def>    mask</def><sym>[:,</sym> <def></def><num>7</num><def></def><sym>-</sym><def>bit</def><sym>] *=</sym> <def></def><num>1</num> <def></def><sym>&lt;&lt;</sym> <def>bit</def><br />
<br />
<slc># pack the results into bytes</slc><br />
<def>mask</def> <sym>=</sym> <def>mask</def><sym>.</sym><def></def><kwb>sum</kwb><def></def><sym>(</sym><def></def><num>1</num><def></def><sym>,</sym> <def></def><str>'uint8'</str><def></def><sym>)</sym><br />
<def></def><br />
<slc># write image data</slc><br />
<def>sys</def><sym>.</sym><def>stdout</def><sym>.</sym><def></def><kwd>write</kwd><def></def><sym>(</sym><def></def><str>&quot;P4</str><esc>\n</esc><str>%d %d</str><esc>\n</esc><str>%s&quot;</str><def></def> <sym>% (</sym><def>size</def><sym>,</sym> <def>size</def><sym>,</sym> <def>mask</def><sym>.</sym><def></def><kwd>tostring</kwd><def></def><sym>()))</sym><def></def><br />
</source>
