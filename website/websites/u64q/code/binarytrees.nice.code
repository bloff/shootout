<source>
<def></def><com>/* The Computer Language Shootout</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com>   contributed by Isaac Gouy</com><br />
<com>   cribbed from Kannan Goundan's Scala #2 program</com><br />
<com>*/</com><def></def><br />
<br />
<kwa>class</kwa> <def>TreeNode</def> <sym>{</sym><br />
<def></def>   <sym>?</sym><def>TreeNode left</def> <sym>=</sym> <def></def><kwa>null</kwa><def></def><sym>;</sym><br />
<def></def>   <sym>?</sym><def>TreeNode right</def> <sym>=</sym> <def></def><kwa>null</kwa><def></def><sym>;</sym><br />
<def></def>   <kwb>int</kwb> <def>item</def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>int</kwb> <def>check</def><sym>(?</sym><def>TreeNode tree</def><sym>) =</sym><br />
<def>   tree</def> <sym>==</sym> <def></def><kwa>null</kwa> <def></def><sym>?</sym> <def></def><num>0</num> <def></def><sym>:</sym> <def>tree</def><sym>.</sym><def>item</def> <sym>+</sym> <def>check</def><sym>(</sym><def>tree</def><sym>.</sym><def>left</def><sym>) -</sym> <def>check</def><sym>(</sym><def>tree</def><sym>.</sym><def>right</def><sym>);</sym><br />
<def></def><br />
<sym>?</sym><def>TreeNode makeTree</def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def><sym>,</sym> <def></def><kwb>int</kwb> <def>depth</def><sym>) =</sym><br />
<def>   depth</def> <sym>==</sym> <def></def><num>0</num><br />
<def></def>      <sym>?</sym> <def></def><kwa>new</kwa> <def>TreeNode</def><sym>(</sym><def>item</def><sym>:</sym> <def>i</def><sym>)</sym><br />
<def></def>      <sym>:</sym> <def></def><kwa>new</kwa> <def>TreeNode</def><sym>(</sym><br />
<def>         left</def><sym>:</sym> <def>makeTree</def><sym>(</sym><def></def><num>2</num><def></def><sym>*</sym><def>i</def><sym>-</sym><def></def><num>1</num><def></def><sym>,</sym> <def>depth</def><sym>-</sym><def></def><num>1</num><def></def><sym>),</sym><br />
<def>         right</def><sym>:</sym> <def>makeTree</def><sym>(</sym><def></def><num>2</num><def></def><sym>*</sym><def>i</def><sym>,</sym> <def>depth</def><sym>-</sym><def></def><num>1</num><def></def><sym>),</sym><br />
<def>         item</def><sym>:</sym> <def>i</def><sym>);</sym><br />
<def></def><br />
<br />
<kwa>let</kwa> <def></def><kwb>int</kwb> <def>minDepth</def> <sym>=</sym> <def></def><num>4</num><def></def><sym>;</sym><br />
<def></def><br />
<kwb>void</kwb> <def>main</def><sym>(</sym><def>String</def><sym>[]</sym> <def>args</def><sym>){</sym><br />
<def></def>   <kwa>let</kwa> <def>n</def> <sym>=</sym> <def>Integer</def><sym>.</sym><def>parseInt</def><sym>(</sym><def>args</def><sym>[</sym><def></def><num>0</num><def></def><sym>]);</sym><br />
<def></def>   <kwa>let</kwa> <def>maxDepth</def> <sym>=</sym> <def>Math</def><sym>.</sym><def>max</def><sym>(</sym><def>minDepth</def> <sym>+</sym> <def></def><num>2</num><def></def><sym>,</sym> <def>n</def><sym>);</sym><br />
<def></def>   <kwa>let</kwa> <def>stretchDepth</def> <sym>=</sym> <def>maxDepth</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def><br />
   print</def><sym>(</sym><def></def><str>&quot;stretch tree&quot;</str><def></def><sym>,</sym> <def>stretchDepth</def><sym>,</sym> <def>makeTree</def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym><def>stretchDepth</def><sym>).</sym><def>check</def><sym>);</sym><br />
<def></def><br />
   <kwa>let</kwa> <def>longLivedTree</def> <sym>=</sym> <def>makeTree</def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym><def>maxDepth</def><sym>);</sym><br />
<def></def><br />
   <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>depth</def><sym>=</sym><def>minDepth</def><sym>;</sym> <def>depth</def><sym>&lt;=</sym><def>maxDepth</def><sym>;</sym> <def>depth</def><sym>+=</sym><def></def><num>2</num><def></def><sym>){</sym><br />
<def></def>      <kwa>let</kwa> <def>iterations</def> <sym>=</sym> <def></def><num>1</num> <def></def><sym>&lt;&lt; (</sym><def>maxDepth</def> <sym>-</sym> <def>depth</def> <sym>+</sym> <def>minDepth</def><sym>);</sym><br />
<def></def><br />
      <kwa>var</kwa> <def>sum</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>      <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def><sym>=</sym><def></def><num>1</num><def></def><sym>;</sym> <def>i</def><sym>&lt;=</sym><def>iterations</def><sym>;</sym> <def>i</def><sym>++)</sym><br />
<def>         sum</def> <sym>+=</sym> <def>makeTree</def><sym>(</sym><def>i</def><sym>,</sym><def>depth</def><sym>).</sym><def>check</def> <sym>+</sym> <def>makeTree</def><sym>(-</sym><def>i</def><sym>,</sym><def>depth</def><sym>).</sym><def>check</def><sym>;</sym><br />
<def><br />
      print</def><sym>(</sym><def>iterations</def><sym>*</sym><def></def><num>2</num> <def></def><sym>+</sym> <def></def><str>&quot;\t trees&quot;</str><def></def><sym>,</sym> <def>depth</def><sym>,</sym> <def>sum</def><sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def><br />
   print</def><sym>(</sym><def></def><str>&quot;long lived tree&quot;</str><def></def><sym>,</sym> <def>maxDepth</def><sym>,</sym> <def>longLivedTree</def><sym>.</sym><def>check</def><sym>);</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>void</kwb> <def>print</def><sym>(</sym><def>String name</def><sym>,</sym> <def></def><kwb>int</kwb> <def>depth</def><sym>,</sym> <def></def><kwb>int</kwb> <def>check</def><sym>) =</sym><br />
<def>   println</def><sym>(</sym><def>name</def> <sym>+</sym> <def></def><str>&quot; of depth &quot;</str><def></def> <sym>+</sym> <def>depth</def> <sym>+</sym> <def></def><str>&quot;\t check: &quot;</str><def></def> <sym>+</sym> <def>check</def><sym>);</sym><def></def><br />
</source>
