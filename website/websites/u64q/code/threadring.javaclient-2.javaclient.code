<source>
<def></def><com>/**</com><br />
<com> * The Computer Language Benchmarks Game</com><br />
<com> * http://shootout.alioth.debian.org/</com><br />
<com> * contributed by Klaus Friedel</com><br />
<com> */</com><def></def><br />
<br />
<kwa>import</kwa> <def>java</def><sym>.</sym><def>util</def><sym>.*;</sym><br />
<def></def><br />
<kwa>public class</kwa> <def>threadring</def> <sym>{</sym><br />
<def></def><br />
  <kwa>public static</kwa> <def></def><kwb>long</kwb> <def>startTime</def><sym>;</sym><br />
<def></def>  <kwa>public static final</kwa> <def></def><kwb>int</kwb> <def>THREAD_COUNT</def> <sym>=</sym> <def></def><num>503</num><def></def><sym>;</sym><br />
<def></def><br />
  <slc>// The scheduler for cooperative Multithreading</slc><br />
<def></def>  <kwa>static class</kwa> <def>Scheduler</def> <kwa>extends</kwa> <def></def><kwc>Thread</kwc><def></def><sym>{</sym><br />
<def></def>    <kwa>private final</kwa> <def></def><kwc>List</kwc><def></def><sym>&lt;</sym><def>CooperativeThread</def><sym>&gt;</sym> <def>threads</def> <sym>=</sym> <def></def><kwc>Collections</kwc><def></def><sym>.</sym><def></def><kwd>synchronizedList</kwd><def></def><sym>(</sym><def></def><kwa>new</kwa> <def></def><kwc>ArrayList</kwc><def></def><sym>&lt;</sym><def>CooperativeThread</def><sym>&gt;());</sym><br />
<def></def>    <kwa>private</kwa> <def></def><kwb>int</kwb> <def>rrIndex</def> <sym>= -</sym><def></def><num>1</num><def></def><sym>;</sym><br />
<def></def><br />
    <kwa>public</kwa> <def></def><kwb>void</kwb> <def></def><kwd>start</kwd><def></def><sym>(</sym><def>CooperativeThread t</def><sym>){</sym><br />
<def>      threads</def><sym>.</sym><def></def><kwd>add</kwd><def></def><sym>(</sym><def>t</def><sym>);</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <kwa>public</kwa> <def></def><kwb>void</kwb> <def></def><kwd>run</kwd><def></def><sym>() {</sym><br />
<def></def>      <kwa>for</kwa><def></def><sym>(;;){</sym> <def></def><slc>// Scheduler will run foerever</slc><br />
<def>        CooperativeThread nextThread</def><sym>;</sym><br />
<def></def>        <kwa>synchronized</kwa> <def></def><sym>(</sym><def>threads</def><sym>){</sym><br />
<def>          rrIndex</def><sym>++;</sym><br />
<def></def>          <kwa>if</kwa><def></def><sym>(</sym><def>rrIndex</def> <sym>&gt;=</sym> <def>threads</def><sym>.</sym><def></def><kwd>size</kwd><def></def><sym>())</sym> <def>rrIndex</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>          nextThread</def> <sym>=</sym> <def>threads</def><sym>.</sym><def></def><kwd>get</kwd><def></def><sym>(</sym><def>rrIndex</def><sym>);</sym><br />
<def></def>        <sym>}</sym><br />
<def>        nextThread</def><sym>.</sym><def></def><kwd>handleMessage</kwd><def></def><sym>();</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>    <sym>}</sym><br />
<def></def>  <sym>}</sym><br />
<def></def><br />
  <kwa>static abstract class</kwa> <def>CooperativeThread</def><sym>{</sym><br />
<def></def>    <kwa>public abstract</kwa> <def></def><kwb>void</kwb> <def></def><kwd>handleMessage</kwd><def></def><sym>();</sym><br />
<def></def>  <sym>}</sym><br />
<def></def><br />
  <kwa>static class</kwa> <def>MessageThread</def> <kwa>extends</kwa> <def>CooperativeThread</def><sym>{</sym><br />
<def>      MessageThread nextThread</def><sym>;</sym><br />
<def></def>      <kwc>String</kwc> <def>name</def><sym>;</sym><br />
<def></def>      <kwc>Integer</kwc> <def>msg</def><sym>;</sym><br />
<def></def><br />
      <kwa>public</kwa> <def></def><kwd>MessageThread</kwd><def></def><sym>(</sym><def>MessageThread nextThread</def><sym>,</sym> <def></def><kwb>int</kwb> <def>name</def><sym>) {</sym><br />
<def></def>        <kwa>this</kwa><def></def><sym>.</sym><def>name</def> <sym>=</sym> <def></def><str>&quot;&quot;</str><def></def> <sym>+</sym> <def>name</def><sym>;</sym><br />
<def></def>        <kwa>this</kwa><def></def><sym>.</sym><def>nextThread</def> <sym>=</sym> <def>nextThread</def><sym>;</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><br />
      <kwa>public</kwa> <def></def><kwb>void</kwb> <def></def><kwd>handleMessage</kwd><def></def><sym>(){</sym><br />
<def></def>        <kwa>if</kwa><def></def><sym>(</sym><def>msg</def> <sym>==</sym> <def>null</def><sym>)</sym> <def></def><kwa>return</kwa><def></def><sym>;</sym><br />
<def></def>        <kwa>if</kwa><def></def><sym>(</sym><def>msg</def> <sym>==</sym> <def></def><num>0</num><def></def><sym>){</sym><br />
<def></def>          <kwc>System</kwc><def></def><sym>.</sym><def>out</def><sym>.</sym><def></def><kwd>println</kwd><def></def><sym>(</sym><def></def><kwd>getName</kwd><def></def><sym>());</sym><br />
<def></def>          <kwc>System</kwc><def></def><sym>.</sym><def></def><kwd>exit</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>);</sym><br />
<def></def>        <sym>}</sym><br />
<def>        nextThread</def><sym>.</sym><def></def><kwd>put</kwd><def></def><sym>(</sym><def>msg</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def>        msg</def> <sym>=</sym> <def>null</def><sym>;</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><br />
      <kwb>void</kwb> <def></def><kwd>put</kwd><def></def><sym>(</sym><def></def><kwc>Integer</kwc> <def>message</def><sym>){</sym><br />
<def>        msg</def> <sym>=</sym> <def>message</def><sym>;</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><br />
      <kwc>String</kwc> <def></def><kwd>getName</kwd><def></def><sym>() {</sym><br />
<def></def>        <kwa>return</kwa> <def>name</def><sym>;</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
<br />
  <kwa>public static</kwa> <def></def><kwb>void</kwb> <def></def><kwd>main</kwd><def></def><sym>(</sym><def></def><kwc>String</kwc> <def>args</def><sym>[])</sym> <def></def><kwa>throws</kwa> <def></def><kwc>Exception</kwc><def></def><sym>{</sym><br />
<def></def>    <kwb>int</kwb> <def>hopCount</def> <sym>=</sym> <def></def><kwc>Integer</kwc><def></def><sym>.</sym><def></def><kwd>parseInt</kwd><def></def><sym>(</sym><def>args</def><sym>[</sym><def></def><num>0</num><def></def><sym>]);</sym><br />
<def><br />
    MessageThread thread</def> <sym>=</sym> <def>null</def><sym>;</sym><br />
<def>    MessageThread last</def> <sym>=</sym> <def>null</def><sym>;</sym><br />
<def></def>    <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def>THREAD_COUNT</def><sym>;</sym> <def>i</def> <sym>&gt;=</sym> <def></def><num>1</num> <def></def><sym>;</sym> <def>i</def><sym>--) {</sym><br />
<def>      thread</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>MessageThread</kwd><def></def><sym>(</sym><def>thread</def><sym>,</sym> <def>i</def><sym>);</sym><br />
<def></def>      <kwa>if</kwa><def></def><sym>(</sym><def>i</def> <sym>==</sym> <def>THREAD_COUNT</def><sym>)</sym> <def>last</def> <sym>=</sym> <def>thread</def><sym>;</sym><br />
<def></def>    <sym>}</sym><br />
<def></def>    <slc>// close the ring:</slc><br />
<def>    last</def><sym>.</sym><def>nextThread</def> <sym>=</sym> <def>thread</def><sym>;</sym><br />
<def><br />
    Scheduler scheduler</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>Scheduler</kwd><def></def><sym>();</sym><br />
<def></def>    <slc>// start all Threads</slc><br />
<def>    MessageThread t</def> <sym>=</sym> <def>thread</def><sym>;</sym><br />
<def></def>    <kwa>do</kwa><def></def><sym>{</sym><br />
<def>      scheduler</def><sym>.</sym><def></def><kwd>start</kwd><def></def><sym>(</sym><def>t</def><sym>);</sym><br />
<def>      t</def> <sym>=</sym> <def>t</def><sym>.</sym><def>nextThread</def><sym>;</sym><br />
<def></def>    <sym>}</sym><def></def><kwa>while</kwa><def></def><sym>(</sym><def>t</def> <sym>!=</sym> <def>thread</def><sym>);</sym><br />
<def>    scheduler</def><sym>.</sym><def></def><kwd>start</kwd><def></def><sym>();</sym><br />
<def></def><br />
    <slc>// inject message</slc><br />
<def>    thread</def><sym>.</sym><def></def><kwd>put</kwd><def></def><sym>(</sym><def>hopCount</def><sym>);</sym><br />
<def></def>  <sym>}</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
