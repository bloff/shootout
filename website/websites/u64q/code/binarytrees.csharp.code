<source>
<def></def><com>/* The Great Computer Language Shootout</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com></com><br />
<com>   unoptimised reference implementation</com><br />
<com></com><br />
<com>   contributed by Isaac Gouy</com><br />
<com>*/</com><def></def><br />
<br />
<kwa>using</kwa> <def>System</def><sym>;</sym><br />
<def></def><br />
<kwa>class</kwa> <def>BinaryTrees</def><br />
<sym>{</sym><br />
<def></def>   <kwb>const int</kwb> <def>minDepth</def> <sym>=</sym> <def></def><num>4</num><def></def><sym>;</sym><br />
<def></def><br />
   <kwa>public static</kwa> <def></def><kwb>void</kwb> <def></def><kwd>Main</kwd><def></def><sym>(</sym><def>String</def><sym>[]</sym> <def>args</def><sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def></def>      <kwb>int</kwb> <def>n</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>args</def><sym>.</sym><def>Length</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>)</sym> <def>n</def> <sym>=</sym> <def>Int32</def><sym>.</sym><def></def><kwd>Parse</kwd><def></def><sym>(</sym><def>args</def><sym>[</sym><def></def><num>0</num><def></def><sym>]);</sym><br />
<def></def><br />
      <kwb>int</kwb> <def>maxDepth</def> <sym>=</sym> <def>Math</def><sym>.</sym><def></def><kwd>Max</kwd><def></def><sym>(</sym><def>minDepth</def> <sym>+</sym> <def></def><num>2</num><def></def><sym>,</sym> <def>n</def><sym>);</sym><br />
<def></def>      <kwb>int</kwb> <def>stretchDepth</def> <sym>=</sym> <def>maxDepth</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def><br />
      <kwb>int</kwb> <def>check</def> <sym>= (</sym><def>TreeNode</def><sym>.</sym><def></def><kwd>bottomUpTree</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym><def>stretchDepth</def><sym>)).</sym><def></def><kwd>itemCheck</kwd><def></def><sym>();</sym><br />
<def>      Console</def><sym>.</sym><def></def><kwd>WriteLine</kwd><def></def><sym>(</sym><def></def><str>&quot;stretch tree of depth {0}</str><esc>\t</esc> <str>check: {1}&quot;</str><def></def><sym>,</sym> <def>stretchDepth</def><sym>,</sym> <def>check</def><sym>);</sym><br />
<def><br />
      TreeNode longLivedTree</def> <sym>=</sym> <def>TreeNode</def><sym>.</sym><def></def><kwd>bottomUpTree</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym><def>maxDepth</def><sym>);</sym><br />
<def></def><br />
      <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>depth</def><sym>=</sym><def>minDepth</def><sym>;</sym> <def>depth</def><sym>&lt;=</sym><def>maxDepth</def><sym>;</sym> <def>depth</def><sym>+=</sym><def></def><num>2</num><def></def><sym>){</sym><br />
<def></def>         <kwb>int</kwb> <def>iterations</def> <sym>=</sym> <def></def><num>1</num> <def></def><sym>&lt;&lt; (</sym><def>maxDepth</def> <sym>-</sym> <def>depth</def> <sym>+</sym> <def>minDepth</def><sym>);</sym><br />
<def><br />
         check</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>         <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def><sym>=</sym><def></def><num>1</num><def></def><sym>;</sym> <def>i</def><sym>&lt;=</sym><def>iterations</def><sym>;</sym> <def>i</def><sym>++)</sym><br />
<def></def>         <sym>{</sym><br />
<def>            check</def> <sym>+= (</sym><def>TreeNode</def><sym>.</sym><def></def><kwd>bottomUpTree</kwd><def></def><sym>(</sym><def>i</def><sym>,</sym><def>depth</def><sym>)).</sym><def></def><kwd>itemCheck</kwd><def></def><sym>();</sym><br />
<def>            check</def> <sym>+= (</sym><def>TreeNode</def><sym>.</sym><def></def><kwd>bottomUpTree</kwd><def></def><sym>(-</sym><def>i</def><sym>,</sym><def>depth</def><sym>)).</sym><def></def><kwd>itemCheck</kwd><def></def><sym>();</sym><br />
<def></def>         <sym>}</sym><br />
<def><br />
         Console</def><sym>.</sym><def></def><kwd>WriteLine</kwd><def></def><sym>(</sym><def></def><str>&quot;{0}</str><esc>\t</esc> <str>trees of depth {1}</str><esc>\t</esc> <str>check: {2}&quot;</str><def></def><sym>,</sym><br />
<def>            iterations</def><sym>*</sym><def></def><num>2</num><def></def><sym>,</sym> <def>depth</def><sym>,</sym> <def>check</def><sym>);</sym><br />
<def></def>      <sym>}</sym><br />
<def><br />
      Console</def><sym>.</sym><def></def><kwd>WriteLine</kwd><def></def><sym>(</sym><def></def><str>&quot;long lived tree of depth {0}</str><esc>\t</esc> <str>check: {1}&quot;</str><def></def><sym>,</sym><br />
<def>         maxDepth</def><sym>,</sym> <def>longLivedTree</def><sym>.</sym><def></def><kwd>itemCheck</kwd><def></def><sym>());</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
<br />
   <kwa>class</kwa> <def>TreeNode</def><br />
   <sym>{</sym><br />
<def></def>      <kwa>private</kwa> <def>TreeNode left</def><sym>,</sym> <def>right</def><sym>;</sym><br />
<def></def>      <kwa>private</kwa> <def></def><kwb>int</kwb> <def>item</def><sym>;</sym><br />
<def></def><br />
      <kwd>TreeNode</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>item</def><sym>){</sym><br />
<def></def>         <kwa>this</kwa><def></def><sym>.</sym><def>item</def> <sym>=</sym> <def>item</def><sym>;</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><br />
      <kwa>internal static</kwa> <def>TreeNode</def> <kwd>bottomUpTree</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>item</def><sym>,</sym> <def></def><kwb>int</kwb> <def>depth</def><sym>){</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>depth</def><sym>&gt;</sym><def></def><num>0</num><def></def><sym>){</sym><br />
<def></def>            <kwa>return new</kwa> <def></def><kwd>TreeNode</kwd><def></def><sym>(</sym><br />
<def></def>                 <kwd>bottomUpTree</kwd><def></def><sym>(</sym><def></def><num>2</num><def></def><sym>*</sym><def>item</def><sym>-</sym><def></def><num>1</num><def></def><sym>,</sym> <def>depth</def><sym>-</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>               <sym>,</sym> <def></def><kwd>bottomUpTree</kwd><def></def><sym>(</sym><def></def><num>2</num><def></def><sym>*</sym><def>item</def><sym>,</sym> <def>depth</def><sym>-</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>               <sym>,</sym> <def>item</def><br />
               <sym>);</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>         <kwa>else</kwa> <def></def><sym>{</sym><br />
<def></def>            <kwa>return new</kwa> <def></def><kwd>TreeNode</kwd><def></def><sym>(</sym><def>item</def><sym>);</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><br />
      <kwd>TreeNode</kwd><def></def><sym>(</sym><def>TreeNode left</def><sym>,</sym> <def>TreeNode right</def><sym>,</sym> <def></def><kwb>int</kwb> <def>item</def><sym>){</sym><br />
<def></def>         <kwa>this</kwa><def></def><sym>.</sym><def>left</def> <sym>=</sym> <def>left</def><sym>;</sym><br />
<def></def>         <kwa>this</kwa><def></def><sym>.</sym><def>right</def> <sym>=</sym> <def>right</def><sym>;</sym><br />
<def></def>         <kwa>this</kwa><def></def><sym>.</sym><def>item</def> <sym>=</sym> <def>item</def><sym>;</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><br />
      <kwa>internal</kwa> <def></def><kwb>int</kwb> <def></def><kwd>itemCheck</kwd><def></def><sym>(){</sym><br />
<def></def>         <slc>// if necessary deallocate here</slc><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>left</def><sym>==</sym><def></def><kwa>null</kwa><def></def><sym>)</sym> <def></def><kwa>return</kwa> <def>item</def><sym>;</sym><br />
<def></def>         <kwa>else return</kwa> <def>item</def> <sym>+</sym> <def>left</def><sym>.</sym><def></def><kwd>itemCheck</kwd><def></def><sym>() -</sym> <def>right</def><sym>.</sym><def></def><kwd>itemCheck</kwd><def></def><sym>();</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
