<source>
<def></def><com>(*</com><br />
<com> * The Computer Language Shootout</com><br />
<com> * http://shootout.alioth.debian.org/</com><br />
<com> *</com><br />
<com> * contributed by Christophe TROESTLER</com><br />
<com> * modified by Matías Giovannini</com><br />
<com> *)</com><def></def><br />
<kwa>open</kwa> <def></def><kwd>Printf</kwd><br />
<def></def><kwa>open</kwa> <def></def><kwd>Big_int</kwd><br />
<def></def><br />
<kwa>let</kwa> <def></def><sym>( +</sym><def>$</def> <sym>) =</sym> <def>add_big_int</def><br />
<kwa>let</kwa> <def></def><sym>( *</sym><def>$</def> <sym>) =</sym> <def>mult_int_big_int</def><br />
<kwa>let</kwa> <def></def><sym>( /</sym><def>$</def> <sym>) =</sym> <def>div_big_int</def><br />
<br />
<com>(* Entier part of the linear fractional transform qrst of x *)</com><def></def><br />
<kwa>let</kwa> <def>ext</def> <sym>(</sym><def>q</def><sym>,</sym><def>r</def><sym>,</sym><def>s</def><sym>,</sym><def>t</def><sym>)</sym> <def>x</def> <sym>=</sym> <def>int_of_big_int</def> <sym>((</sym><def>x</def> <sym>*</sym><def>$ q</def> <sym>+</sym><def>$ r</def><sym>) /</sym><def>$</def> <sym>(</sym><def>x</def> <sym>*</sym><def>$ s</def> <sym>+</sym><def>$ t</def><sym>))</sym><br />
<def></def><br />
<com>(* Multiply small int matrix qrst by big int matrix qrst' (small on left) *)</com><def></def><br />
<kwa>let</kwa> <def>mml</def> <sym>(</sym><def>q</def><sym>,</sym><def>r</def><sym>,</sym><def>s</def><sym>,</sym><def>t</def><sym>) (</sym><def>q</def><str>',r'</str><def></def><sym>,</sym><def>s</def><str>',t'</str><def></def><sym>) =</sym><br />
<def>  q</def> <sym>*</sym><def>$ q</def><str>'  +$  r *$ s'</str><def></def><sym>,</sym>  <def>q</def> <sym>*</sym><def>$ r</def><str>'  +$  r *$ t'</str><def></def><sym>,</sym><br />
<def>  s</def> <sym>*</sym><def>$ q</def><str>'  +$  t *$ s'</str><def></def><sym>,</sym>  <def>s</def> <sym>*</sym><def>$ r</def><str>'  +$  t *$ t'</str><def></def><br />
<br />
<com>(* Multiply big int matrix qrst by small int matrix qrst' (small on right) *)</com><def></def><br />
<kwa>let</kwa> <def>mmr</def> <sym>(</sym><def>q</def><sym>,</sym><def>r</def><sym>,</sym><def>s</def><sym>,</sym><def>t</def><sym>) (</sym><def>q</def><str>',r'</str><def></def><sym>,</sym><def>s</def><str>',t'</str><def></def><sym>) =</sym><br />
<def>  q</def><str>' *$ q  +$  s'</str><def></def> <sym>*</sym><def>$ r</def><sym>,</sym>  <def>r</def><str>' *$ q  +$  t'</str><def></def> <sym>*</sym><def>$ r</def><sym>,</sym><br />
<def>  q</def><str>' *$ s  +$  s'</str><def></def> <sym>*</sym><def>$ t</def><sym>,</sym>  <def>r</def><str>' *$ s  +$  t'</str><def></def> <sym>*</sym><def>$ t</def><br />
<br />
<kwa>let</kwa> <def></def><kwb>unit</kwb> <def></def><sym>= (</sym><def>unit_big_int</def><sym>,</sym><def>zero_big_int</def><sym>,</sym><def>zero_big_int</def><sym>,</sym><def>unit_big_int</def><sym>)</sym><br />
<def></def><br />
<kwa>let</kwa> <def>next z</def>   <sym>=</sym> <def>ext z</def> <num>3</num><br />
<def></def><kwa>and</kwa> <def>safe z n</def> <sym>=</sym> <def>ext z</def> <num>4</num> <def></def><sym>==</sym> <def>n</def><br />
<kwa>and</kwa> <def>prod z n</def> <sym>=</sym> <def>mml</def> <sym>(</sym><def></def><num>10</num><def></def><sym>, -</sym><def></def><num>10</num><def></def><sym>*</sym><def>n</def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>1</num><def></def><sym>)</sym> <def>z</def><br />
<kwa>and</kwa> <def>cons z k</def> <sym>=</sym><br />
<def></def>  <kwa>let</kwa> <def>den</def> <sym>=</sym> <def></def><num>2</num><def></def><sym>*</sym><def>k</def> <sym>+</sym> <def></def><num>1</num> <def></def><kwa>in</kwa><br />
<def>  mmr z</def> <sym>(</sym><def>k</def><sym>,</sym> <def></def><num>2</num><def></def><sym>*</sym><def>den</def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>den</def><sym>)</sym><br />
<def></def><br />
<kwa>let rec</kwa> <def>digit k z n row col</def> <sym>=</sym><br />
<def></def>  <kwa>if</kwa> <def>n</def> <sym>==</sym> <def></def><num>0</num> <def></def><kwa>then</kwa> <def>printf</def> <str>&quot;%*s</str><esc>\t</esc><str>:%i</str><esc>\n</esc><str>&quot;</str><def></def> <sym>(</sym><def></def><num>10</num><def></def><sym>-</sym><def>col</def><sym>)</sym> <def></def><str>&quot;&quot;</str><def></def> <sym>(</sym><def>row</def><sym>+</sym><def>col</def><sym>)</sym> <def></def><kwa>else</kwa><br />
<def></def>  <kwa>let</kwa> <def>d</def> <sym>=</sym> <def>next z</def> <kwa>in</kwa><br />
<def></def>  <kwa>if</kwa> <def>safe z d</def> <kwa>then</kwa><br />
<def></def>    <kwa>if</kwa> <def>col</def> <sym>=</sym> <def></def><num>10</num> <def></def><kwa>then begin</kwa><br />
<def></def>      <kwa>let</kwa> <def>row</def> <sym>=</sym> <def>row</def> <sym>+</sym> <def></def><num>10</num> <def></def><kwa>in</kwa><br />
<def>      printf</def> <str>&quot;</str><esc>\t</esc><str>:%i</str><esc>\n</esc><str>%i&quot;</str><def> row d</def><sym>;</sym><br />
<def>      digit k</def> <sym>(</sym><def>prod z d</def><sym>) (</sym><def>n</def><sym>-</sym><def></def><num>1</num><def></def><sym>)</sym> <def>row</def> <num>1</num><br />
<def></def>    <kwa>end else begin</kwa><br />
<def>      print_int d</def><sym>;</sym><br />
<def>      digit k</def> <sym>(</sym><def>prod z d</def><sym>) (</sym><def>n</def><sym>-</sym><def></def><num>1</num><def></def><sym>)</sym> <def>row</def> <sym>(</sym><def>col</def><sym>+</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>    <kwa>end</kwa><br />
<def></def>  <kwa>else</kwa> <def>digit</def> <sym>(</sym><def>k</def><sym>+</sym><def></def><num>1</num><def></def><sym>) (</sym><def>cons z k</def><sym>)</sym> <def>n row col</def><br />
<br />
<kwa>let</kwa> <def>digits n</def> <sym>=</sym> <def>digit</def> <num>1</num> <def></def><kwb>unit</kwb> <def>n</def> <num>0 0</num><br />
<def></def><br />
<kwa>let</kwa> <def></def><sym>() =</sym> <def>digits</def> <sym>(</sym><def></def><kwa>try</kwa> <def>int_of_string</def> <sym>(</sym><def></def><kwc>Array</kwc><def></def><sym>.</sym><def>get</def> <kwc>Sys</kwc><def></def><sym>.</sym><def>argv</def> <num>1</num><def></def><sym>)</sym> <def></def><kwa>with</kwa> <def>_</def> <sym>-&gt;</sym> <def></def><num>27</num><def></def><sym>)</sym><def></def><br />
</source>
