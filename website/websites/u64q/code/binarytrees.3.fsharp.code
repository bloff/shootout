<span class="hl sym">//</span> <span class="hl kwd">The Computer Language Benchmarks Game</span>
<span class="hl sym">//</span> http<span class="hl sym">://</span>shootout<span class="hl sym">.</span>alioth<span class="hl sym">.</span>debian<span class="hl sym">.</span>org<span class="hl sym">/</span>
<span class="hl sym">//</span>
<span class="hl sym">//</span> <span class="hl kwd">Modification</span> by <span class="hl kwd">Don Syme</span> <span class="hl sym">&amp;</span> <span class="hl kwd">Jomo Fisher</span> <span class="hl kwa">to</span> use null <span class="hl kwa">as</span> representation
<span class="hl sym">//</span> <span class="hl kwa">of</span> <span class="hl kwd">Empty</span> node <span class="hl kwa">and to</span> use a single <span class="hl kwd">Next</span> element<span class="hl sym">.</span>
<span class="hl sym">//</span> <span class="hl kwd">Based</span> on <span class="hl kwd">F</span># version by <span class="hl kwd">Robert Pickering</span>
<span class="hl sym">//</span> <span class="hl kwd">Based</span> on ocaml version by <span class="hl kwd">Troestler Christophe</span> <span class="hl sym">&amp;</span> <span class="hl kwd">Isaac Gouy</span>

<span class="hl kwa">open</span> <span class="hl kwd">System</span>
<span class="hl kwa">open</span> <span class="hl kwd">Unchecked</span>

<span class="hl kwa">type</span> <span class="hl kwd">Next</span> <span class="hl sym">= {</span> <span class="hl kwd">Left</span><span class="hl sym">:</span> <span class="hl kwd">Tree</span><span class="hl sym">;</span> <span class="hl kwd">Right</span><span class="hl sym">:</span> <span class="hl kwd">Tree</span> <span class="hl sym">}</span>
<span class="hl kwa">and</span> <span class="hl sym">[&lt;</span><span class="hl kwd">Struct</span><span class="hl sym">&gt;]</span> <span class="hl kwd">Tree</span><span class="hl sym">(</span>next<span class="hl sym">:</span><span class="hl kwd">Next</span><span class="hl sym">,</span>item<span class="hl sym">:</span><span class="hl kwb">int</span><span class="hl sym">) =</span>
    member t<span class="hl sym">.</span><span class="hl kwd">Check</span><span class="hl sym">() =</span>
        <span class="hl kwa">match</span> box next <span class="hl kwa">with</span>
        <span class="hl sym">|</span> null <span class="hl sym">-&gt;</span> item
        <span class="hl sym">|</span> _ <span class="hl sym">-&gt;</span> item <span class="hl sym">+</span> next<span class="hl sym">.</span><span class="hl kwc">Left</span><span class="hl sym">.</span><span class="hl kwd">Check</span><span class="hl sym">() -</span> next<span class="hl sym">.</span><span class="hl kwc">Right</span><span class="hl sym">.</span><span class="hl kwd">Check</span><span class="hl sym">()</span>

<span class="hl kwa">let rec</span> make item depth <span class="hl sym">=</span>
    <span class="hl kwa">if</span> depth <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span> <span class="hl kwd">Tree</span><span class="hl sym">({</span><span class="hl kwd">Left</span> <span class="hl sym">=</span> make <span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>item<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">) (</span>depth<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">);</span> <span class="hl kwd">Right</span><span class="hl sym">=</span>make <span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>item<span class="hl sym">) (</span>depth<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)},</span> item<span class="hl sym">)</span>
    <span class="hl kwa">else</span> <span class="hl kwd">Tree</span><span class="hl sym">(</span>defaultof<span class="hl sym">&lt;</span>_<span class="hl sym">&gt;,</span>item<span class="hl sym">)</span>

<span class="hl kwa">let</span> inline check <span class="hl sym">(</span>tree<span class="hl sym">:</span><span class="hl kwd">Tree</span><span class="hl sym">) =</span> tree<span class="hl sym">.</span><span class="hl kwd">Check</span><span class="hl sym">()</span>

<span class="hl kwa">let rec</span> loopDepths maxDepth minDepth d <span class="hl sym">=</span>
    <span class="hl kwa">if</span> d <span class="hl sym">&lt;=</span> maxDepth <span class="hl kwa">then</span>
        <span class="hl kwa">let</span> niter <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">&lt;&lt;&lt; (</span>maxDepth <span class="hl sym">-</span> d <span class="hl sym">+</span> minDepth<span class="hl sym">)</span>
        <span class="hl kwa">let mutable</span> c <span class="hl sym">=</span> <span class="hl num">0</span>
        <span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl kwa">to</span> niter <span class="hl kwa">do</span>
            c <span class="hl sym">&lt;-</span> c <span class="hl sym">+</span> check <span class="hl sym">(</span>make i d<span class="hl sym">) +</span> check <span class="hl sym">(</span>make <span class="hl sym">(-</span>i<span class="hl sym">)</span> d<span class="hl sym">)</span>
        <span class="hl kwc">Console</span><span class="hl sym">.</span><span class="hl kwd">WriteLine</span><span class="hl sym">(</span><span class="hl str">&quot;{0}</span><span class="hl esc">\t</span> <span class="hl str">trees of depth {1}</span><span class="hl esc">\t</span> <span class="hl str">check: {2}&quot;</span><span class="hl sym">,</span><span class="hl num">2</span> <span class="hl sym">*</span> niter<span class="hl sym">,</span>d<span class="hl sym">,</span>c<span class="hl sym">)</span>
        loopDepths maxDepth minDepth <span class="hl sym">(</span>d <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">)</span>

<span class="hl sym">[&lt;</span><span class="hl kwd">EntryPoint</span><span class="hl sym">&gt;]</span>
<span class="hl kwa">let</span> main args <span class="hl sym">=</span>
    <span class="hl kwa">let</span> minDepth <span class="hl sym">=</span> <span class="hl num">4</span>
    <span class="hl kwa">let</span> maxDepth <span class="hl sym">=</span>
        <span class="hl kwa">let</span> n <span class="hl sym">=</span> <span class="hl kwa">if</span> args<span class="hl sym">.</span><span class="hl kwd">Length</span> <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span> <span class="hl kwb">int</span> args<span class="hl sym">.[</span><span class="hl num">0</span><span class="hl sym">]</span> <span class="hl kwa">else</span> <span class="hl num">10</span>
        max <span class="hl sym">(</span>minDepth <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">)</span> n
    <span class="hl kwa">let</span> stretchDepth <span class="hl sym">=</span> maxDepth <span class="hl sym">+</span> <span class="hl num">1</span>

    <span class="hl kwa">let</span> c <span class="hl sym">=</span> check <span class="hl sym">(</span>make <span class="hl num">0</span> stretchDepth<span class="hl sym">)</span>
    <span class="hl kwc">Console</span><span class="hl sym">.</span><span class="hl kwd">WriteLine</span><span class="hl sym">(</span><span class="hl str">&quot;stretch tree of depth {0}</span><span class="hl esc">\t</span> <span class="hl str">check: {1}&quot;</span><span class="hl sym">,</span>stretchDepth<span class="hl sym">,</span>c<span class="hl sym">)</span>
    <span class="hl kwa">let</span> longLivedTree <span class="hl sym">=</span> make <span class="hl num">0</span> maxDepth
    loopDepths maxDepth minDepth minDepth
    <span class="hl kwc">Console</span><span class="hl sym">.</span><span class="hl kwd">WriteLine</span><span class="hl sym">(</span><span class="hl str">&quot;long lived tree of depth {0}</span><span class="hl esc">\t</span> <span class="hl str">check: {1}&quot;</span><span class="hl sym">,</span>maxDepth<span class="hl sym">,(</span>check longLivedTree<span class="hl sym">))</span>
    exit <span class="hl num">0</span>
