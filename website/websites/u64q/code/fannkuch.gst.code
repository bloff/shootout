<source>
<def></def><com>&quot;* The Computer Language Shootout</com><br />
<com>    http://shootout.alioth.debian.org/</com><br />
<com>    contributed by Paolo Bonzini *&quot;</com><def>!</def><br />
<br />
<br />
<kwc>Object</kwc> <def></def><kwb>subclass:</kwb> <def></def><kwd>#PermGenerator</kwd><br />
<def></def>   <kwb>instanceVariableNames:</kwb> <def></def><str>'timesRotated perm atEnd'</str><def></def><br />
   <kwb>classVariableNames:</kwb> <def></def><str>''</str><def></def><br />
   <kwb>poolDictionaries:</kwb> <def></def><str>''</str><def></def><br />
   <kwb>category:</kwb> <def></def><str>'Shootout'</str><def>!<br />
<br />
<br />
!</def><kwc>Array</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'benchmarking'</str><def>!</def><br />
<kwb>pfannkuchen</kwb><br />
<def></def>   <kwd>| first complement a b k |</kwd><br />
<def>   k</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>.</sym><br />
<def></def>   <sym>[ (</sym><def>first</def> <sym>:=</sym> <def></def><kwa>self</kwa> <def></def><kwb>at:</kwb> <def></def><num>1</num><def></def><sym>)</sym> <def></def><kwb>==</kwb> <def></def><num>1</num> <def></def><sym>]</sym> <def></def><kwb>whileFalse:</kwb> <def></def><sym>[</sym><br />
<def>      k</def> <sym>:=</sym> <def>k</def> <kwb>+</kwb> <def></def><num>1</num><def></def><sym>.</sym><br />
<def>      complement</def> <sym>:=</sym> <def>first</def> <kwb>+</kwb> <def></def><num>1</num><def></def><sym>.</sym><br />
<def></def>      <num>1</num> <def></def><kwb>to:</kwb> <def>first</def> <kwb>//</kwb> <def></def><num>2</num> <def></def><kwb>do:</kwb> <def></def><sym>[</sym> <def></def><kwd>:i</kwd> <def></def><sym>|</sym><br />
<def>         a</def> <sym>:=</sym> <def></def><kwa>self</kwa> <def></def><kwb>at:</kwb> <def>i</def><sym>.</sym><br />
<def>         b</def> <sym>:=</sym> <def></def><kwa>self</kwa> <def></def><kwb>at:</kwb> <def>complement</def> <kwb>-</kwb> <def>i</def><sym>.</sym><br />
<def></def>         <kwa>self</kwa> <def></def><kwb>at:</kwb> <def>i</def> <kwb>put:</kwb> <def>b</def><sym>.</sym><br />
<def></def>         <kwa>self</kwa> <def></def><kwb>at:</kwb> <def>complement</def> <kwb>-</kwb> <def>i</def> <kwb>put:</kwb> <def>a</def><sym>.</sym><br />
<def></def>      <sym>]</sym><br />
<def></def>   <sym>].</sym><br />
<def></def>   <sym>^</sym><def>k! !<br />
<br />
<br />
<br />
!</def><kwc>PermGenerator</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'initialize-release'</str><def>!</def><br />
<kwb>initialize:</kwb> <def>size<br />
   perm</def> <sym>:= (</sym><def></def><num>1</num> <def></def><kwb>to:</kwb> <def>size</def><sym>)</sym> <def></def><kwb>asArray</kwb><def></def><sym>.</sym><br />
<def>   timesRotated</def> <sym>:=</sym> <def></def><kwc>Array</kwc> <def></def><kwb>new:</kwb> <def>size</def> <kwb>withAll:</kwb> <def></def><num>0</num><def></def><sym>.</sym><br />
<def>   atEnd</def> <sym>:=</sym> <def></def><kwa>false</kwa><def>! !<br />
<br />
<br />
<br />
!</def><kwc>PermGenerator</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'initialize-release'</str><def>!</def><br />
<kwb>makeNext</kwb><br />
<def></def>   <kwd>| temp remainder |</kwd><br />
<def></def>   <com>&quot;* Generate the next permutation. *&quot;</com><def></def><br />
   <num>2</num> <def></def><kwb>to:</kwb> <def>perm</def> <kwb>size do:</kwb> <def></def><sym>[</sym> <def></def><kwd>:r</kwd> <def></def><sym>|</sym><br />
<def></def>      <com>&quot;* Rotate the first r items to the left. *&quot;</com><def><br />
      temp</def> <sym>:=</sym> <def>perm</def> <kwb>at:</kwb> <def></def><num>1</num><def></def><sym>.</sym><br />
<def></def>      <num>1</num> <def></def><kwb>to:</kwb> <def>r</def> <kwb>-</kwb> <def></def><num>1</num> <def></def><kwb>do:</kwb> <def></def><sym>[</sym> <def></def><kwd>:i</kwd> <def></def><sym>|</sym> <def>perm</def> <kwb>at:</kwb> <def>i</def> <kwb>put:</kwb> <def></def><sym>(</sym><def>perm</def> <kwb>at:</kwb> <def>i</def> <kwb>+</kwb> <def></def><num>1</num><def></def><sym>) ].</sym><br />
<def>      perm</def> <kwb>at:</kwb> <def>r</def> <kwb>put:</kwb> <def>temp</def><sym>.</sym><br />
<def><br />
      remainder</def> <sym>:=</sym> <def>timesRotated</def> <kwb>at:</kwb> <def>r</def> <kwb>put:</kwb> <def></def><sym>((</sym><def>timesRotated</def> <kwb>at:</kwb> <def>r</def><sym>)</sym> <def></def><kwb>+</kwb> <def></def><num>1</num><def></def><sym>)</sym> <def>\\</def> <kwb>r</kwb><def></def><sym>.</sym><br />
<def>      remainder</def> <kwb>=</kwb> <def></def><num>0</num> <def></def><kwb>ifFalse:</kwb> <def></def><sym>[ ^</sym><def></def><kwa>self</kwa> <def></def><sym>].</sym><br />
<def></def><br />
      <com>&quot;* After r rotations, the first r items are in their original positions.</com><br />
<com>      Go on rotating the first r+1 items. *&quot;</com><def></def><br />
   <sym>].</sym><br />
<def></def><br />
   <com>&quot;* We are past the final permutation. *&quot;</com><def><br />
   atEnd</def> <sym>:=</sym> <def></def><kwa>true</kwa><def>! !<br />
<br />
<br />
<br />
!</def><kwc>PermGenerator</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'benchmarks'</str><def>!</def><br />
<kwb>maxPfannkuchenTo:</kwb> <def>output</def><br />
   <kwd>| max permutation check |</kwd><br />
<def>   max</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>.</sym><br />
<def>   check</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>.</sym><br />
<def></def>   <sym>[</sym><def></def><kwa>self</kwa> <def></def><kwb>atEnd</kwb><def></def><sym>]</sym> <def></def><kwb>whileFalse:</kwb><br />
<def></def>      <sym>[</sym><def>permutation</def> <sym>:=</sym> <def></def><kwa>self</kwa> <def></def><kwb>next</kwb><def></def><sym>.</sym><br />
<def>      check &lt;</def> <num>30</num> <def></def><kwb>ifTrue:</kwb><br />
<def></def>         <sym>[</sym><def>permutation</def> <kwb>do:</kwb> <def></def><sym>[</sym><def></def><kwd>:each</kwd> <def></def><sym>|</sym> <def>output</def> <kwb>print:</kwb> <def>each</def><sym>].</sym><br />
<def>         output</def> <kwb>nl</kwb><def></def><sym>.</sym><br />
<def>         check</def> <sym>:=</sym> <def>check</def> <kwb>+</kwb> <def></def><num>1</num><def></def><sym>].</sym><br />
<def>      max</def> <sym>:=</sym> <def>max</def> <kwb>max:</kwb> <def>permutation</def> <kwb>pfannkuchen</kwb><def></def><sym>].</sym><br />
<def></def>   <sym>^</sym><def>max! !<br />
<br />
<br />
<br />
!</def><kwc>PermGenerator</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'accessing'</str><def>!</def><br />
<kwb>atEnd</kwb><br />
<def></def>   <sym>^</sym><def>atEnd! !<br />
<br />
<br />
<br />
!</def><kwc>PermGenerator</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'accessing'</str><def>!</def><br />
<kwb>next</kwb><br />
<def></def>   <kwd>| result |</kwd><br />
<def>   result</def> <sym>:=</sym> <def>perm</def> <kwb>copy</kwb><def></def><sym>.</sym><br />
<def></def>   <kwa>self</kwa> <def></def><kwb>makeNext</kwb><def></def><sym>.</sym><br />
<def></def>   <sym>^</sym><def>result! !<br />
<br />
<br />
<br />
!</def><kwc>PermGenerator</kwc> <def></def><kwb>class methodsFor:</kwb> <def></def><str>'instance creation'</str><def>!</def><br />
<kwb>new:</kwb> <def>size</def><br />
   <sym>^</sym><def></def><kwa>self</kwa> <def></def><kwb>new</kwb><br />
<def></def>      <kwb>initialize:</kwb> <def>size</def><sym>;</sym><br />
<def>      yourself! !<br />
<br />
<br />
<br />
!</def><kwc>Tests</kwc> <def></def><kwb>class methodsFor:</kwb> <def></def><str>'benchmarking'</str><def>!</def><br />
<kwb>fannkuch:</kwb> <def>n</def> <kwb>to:</kwb> <def>output</def><br />
   <sym>^(</sym><def></def><kwc>PermGenerator</kwc> <def></def><kwb>new:</kwb> <def>n</def><sym>)</sym> <def></def><kwb>maxPfannkuchenTo:</kwb> <def>output! !<br />
<br />
<br />
<br />
!</def><kwc>Tests</kwc> <def></def><kwb>class methodsFor:</kwb> <def></def><str>'benchmark scripts'</str><def>!</def><br />
<kwb>fannkuch</kwb><br />
<def></def>   <kwd>| n f |</kwd><br />
<def>   n</def> <sym>:=</sym> <def></def><kwa>self</kwa> <def></def><kwb>arg</kwb><def></def><sym>.</sym><br />
<def>   f</def> <sym>:=</sym> <def></def><kwa>self</kwa> <def></def><kwb>fannkuch:</kwb> <def>n</def> <kwb>to:</kwb> <def></def><kwa>self</kwa> <def></def><kwb>stdout</kwb><def></def><sym>.</sym><br />
<def></def>   <kwa>self</kwa> <def></def><kwb>stdout</kwb><br />
<def></def>      <kwb>nextPutAll:</kwb> <def></def><str>'Pfannkuchen('</str><def>,</def> <kwb>n printString</kwb><def>,</def> <str>') = '</str><def></def><sym>;</sym><br />
<def></def>      <kwb>print:</kwb> <def>f</def><sym>;</sym> <def></def><kwb>nl</kwb><def></def><sym>.</sym><br />
<def></def>   <sym>^</sym><def></def><str>''</str><def>! !</def><br />
<br />
<kwc>Tests</kwc> <def></def><kwb>fannkuch</kwb><def>!</def><br />
</source>
