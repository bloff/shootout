<span class="hl com">/*</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> * contributed by Rex Kerr</span>
<span class="hl com"> * based on version by John Nilsson as modified by Geoff Reedy</span>
<span class="hl com"> * GMP wrapping based on Java version by Pall, Kraus, &amp; Sassa</span>
<span class="hl com">*/</span>

<span class="hl kwa">object</span> pidigits <span class="hl sym">{</span>
  <span class="hl kwa">import</span> Gmp<span class="hl sym">.</span>_

  <span class="hl kwa">class</span> LFT<span class="hl sym">(</span>q<span class="hl sym">:</span>I<span class="hl sym">,</span> r<span class="hl sym">:</span>I<span class="hl sym">,</span> <span class="hl kwa">val</span> t<span class="hl sym">:</span>I<span class="hl sym">) {</span>
    <span class="hl kwa">def</span> use<span class="hl sym">(</span>z<span class="hl sym">:</span> LFT<span class="hl sym">) = {</span> ~q<span class="hl sym">;</span> ~r<span class="hl sym">;</span> <span class="hl kwa">if</span> <span class="hl sym">(</span>t ne z<span class="hl sym">.</span>t<span class="hl sym">)</span> ~t<span class="hl sym">;</span> z <span class="hl sym">}</span>
    <span class="hl kwa">def</span> compose<span class="hl sym">(</span>k<span class="hl sym">:</span> Int<span class="hl sym">) =</span> use<span class="hl sym">(</span><span class="hl kwa">new</span> LFT<span class="hl sym">(</span>q<span class="hl sym">*</span>k<span class="hl sym">!, (</span>q<span class="hl sym">*(</span><span class="hl num">4</span><span class="hl sym">*</span>k<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">))+*=(</span>r<span class="hl sym">,(</span><span class="hl num">2</span><span class="hl sym">*</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">))!,</span> t<span class="hl sym">*(</span><span class="hl num">2</span><span class="hl sym">*</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)!))</span>
    <span class="hl kwa">def</span> extract <span class="hl sym">= {</span>
      <span class="hl kwa">val</span> <span class="hl sym">(</span>y<span class="hl sym">,</span>rem<span class="hl sym">) = (</span>r <span class="hl sym">+</span> q<span class="hl sym">*</span><span class="hl num">3</span><span class="hl sym">) /%</span> t <span class="hl sym">!!</span>
      <span class="hl kwa">val</span> x <span class="hl sym">=</span> <span class="hl kwa">if</span><span class="hl sym">((</span>rem <span class="hl sym">+</span> q<span class="hl sym">) &lt;</span> t<span class="hl sym">)</span> Some<span class="hl sym">(</span>y<span class="hl sym">.</span>toInt<span class="hl sym">)</span> <span class="hl kwa">else</span> None
      ~y<span class="hl sym">;</span> ~rem
      x
    <span class="hl sym">}</span>
    <span class="hl kwa">def</span> next<span class="hl sym">(</span>y<span class="hl sym">:</span> Int<span class="hl sym">) =</span> use<span class="hl sym">(</span><span class="hl kwa">new</span> LFT<span class="hl sym">(</span>q<span class="hl sym">*</span><span class="hl num">10</span><span class="hl sym">!, (</span>r<span class="hl sym">*</span><span class="hl num">10</span> <span class="hl sym">-*= (</span>t<span class="hl sym">,</span><span class="hl num">10</span><span class="hl sym">*</span>y<span class="hl sym">))!,</span> t<span class="hl sym">))</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">def</span> pi_digits <span class="hl sym">= {</span>
    <span class="hl kwa">def</span> digits<span class="hl sym">(</span>z<span class="hl sym">:</span> LFT<span class="hl sym">,</span> k<span class="hl sym">:</span> Int<span class="hl sym">):</span> Stream<span class="hl sym">[</span>Int<span class="hl sym">] =</span> z extract match <span class="hl sym">{</span>
      <span class="hl kwa">case</span> Some<span class="hl sym">(</span>y<span class="hl sym">) =&gt;</span> Stream<span class="hl sym">.</span>cons<span class="hl sym">(</span>y<span class="hl sym">,</span>digits<span class="hl sym">(</span>z next y<span class="hl sym">,</span>k<span class="hl sym">))</span>
      <span class="hl kwa">case</span> None    <span class="hl sym">=&gt;</span> digits<span class="hl sym">(</span>z compose k<span class="hl sym">,</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>
    <span class="hl sym">}</span>
    digits<span class="hl sym">(</span><span class="hl kwa">new</span> LFT<span class="hl sym">(</span>I<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">),</span>I<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">),</span>I<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)),</span><span class="hl num">1</span><span class="hl sym">)</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">def</span> by<span class="hl sym">[</span>T<span class="hl sym">](</span>s<span class="hl sym">:</span> Stream<span class="hl sym">[</span>T<span class="hl sym">],</span> n<span class="hl sym">:</span> Int<span class="hl sym">):</span> Stream<span class="hl sym">[</span>Stream<span class="hl sym">[</span>T<span class="hl sym">]] =</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>s<span class="hl sym">.</span>isEmpty<span class="hl sym">)</span> Stream<span class="hl sym">.</span>empty
    <span class="hl kwa">else</span> Stream<span class="hl sym">.</span>cons<span class="hl sym">(</span>s take n<span class="hl sym">,</span> by<span class="hl sym">(</span>s drop n<span class="hl sym">,</span> n<span class="hl sym">))</span>

  <span class="hl kwa">def</span> main<span class="hl sym">(</span>args<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">String</span><span class="hl sym">]):</span> Unit <span class="hl sym">=</span>
    <span class="hl kwa">for</span> <span class="hl sym">((</span>d<span class="hl sym">,</span>n<span class="hl sym">) &lt;-</span> by<span class="hl sym">(</span>pi_digits take args<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">).</span>toInt<span class="hl sym">,</span> <span class="hl num">10</span><span class="hl sym">).</span>zipWithIndex<span class="hl sym">)</span>
      printf<span class="hl sym">(</span><span class="hl str">&quot;%-10s</span><span class="hl esc">\t</span><span class="hl str">:%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span>d<span class="hl sym">.</span>mkString<span class="hl sym">,</span><span class="hl num">10</span><span class="hl sym">*</span>n<span class="hl sym">+</span>d<span class="hl sym">.</span>length<span class="hl sym">)</span>
<span class="hl sym">}</span>

<span class="hl com">/*</span>
<span class="hl com"> * Partial GMP wrapper for Scala.</span>
<span class="hl com"> * Write math like normal.</span>
<span class="hl com"> * Use ! to pull the result off the temporary stack</span>
<span class="hl com"> * Use ~ to return a value to the temporary stack</span>
<span class="hl com"> * Be careful with weird +*= GMP functions that destroy argument</span>
<span class="hl com">*/</span>
<span class="hl kwa">class</span> GmpUtil <span class="hl sym">{</span>
  <span class="hl kwc">System</span><span class="hl sym">.</span>loadLibrary<span class="hl sym">(</span><span class="hl str">&quot;jpargmp&quot;</span><span class="hl sym">)</span>
  &#64;<span class="hl kwa">native def</span> mpz_init<span class="hl sym">():</span> <span class="hl kwc">Long</span>
  &#64;<span class="hl kwa">native def</span> mpz_clear<span class="hl sym">(</span>src<span class="hl sym">:</span> <span class="hl kwc">Long</span><span class="hl sym">)</span>
  &#64;<span class="hl kwa">native def</span> mpz_set_si<span class="hl sym">(</span>lhs<span class="hl sym">:</span> <span class="hl kwc">Long</span><span class="hl sym">,</span> a<span class="hl sym">:</span> Int<span class="hl sym">)</span>
  &#64;<span class="hl kwa">native def</span> mpz_get_si<span class="hl sym">(</span>a<span class="hl sym">:</span> <span class="hl kwc">Long</span><span class="hl sym">):</span> Int
  &#64;<span class="hl kwa">native def</span> mpz_cmp<span class="hl sym">(</span>a<span class="hl sym">:</span> <span class="hl kwc">Long</span><span class="hl sym">,</span> b<span class="hl sym">:</span> <span class="hl kwc">Long</span><span class="hl sym">):</span> Int
  &#64;<span class="hl kwa">native def</span> mpz_add<span class="hl sym">(</span>sum<span class="hl sym">:</span> <span class="hl kwc">Long</span><span class="hl sym">,</span> a<span class="hl sym">:</span> <span class="hl kwc">Long</span><span class="hl sym">,</span> b<span class="hl sym">:</span> <span class="hl kwc">Long</span><span class="hl sym">)</span>
  &#64;<span class="hl kwa">native def</span> mpz_sub<span class="hl sym">(</span>sum<span class="hl sym">:</span> <span class="hl kwc">Long</span><span class="hl sym">,</span> a<span class="hl sym">:</span> <span class="hl kwc">Long</span><span class="hl sym">,</span> b<span class="hl sym">:</span> <span class="hl kwc">Long</span><span class="hl sym">)</span>
  &#64;<span class="hl kwa">native def</span> mpz_mul_si<span class="hl sym">(</span>prod<span class="hl sym">:</span> <span class="hl kwc">Long</span><span class="hl sym">,</span> a<span class="hl sym">:</span> <span class="hl kwc">Long</span><span class="hl sym">,</span> b<span class="hl sym">:</span> Int<span class="hl sym">)</span>
  &#64;<span class="hl kwa">native def</span> mpz_addmul_ui<span class="hl sym">(</span>lhs<span class="hl sym">:</span> <span class="hl kwc">Long</span><span class="hl sym">,</span> a<span class="hl sym">:</span> <span class="hl kwc">Long</span><span class="hl sym">,</span> b<span class="hl sym">:</span> Int<span class="hl sym">)</span>
  &#64;<span class="hl kwa">native def</span> mpz_submul_ui<span class="hl sym">(</span>lhs<span class="hl sym">:</span> <span class="hl kwc">Long</span><span class="hl sym">,</span> a<span class="hl sym">:</span> <span class="hl kwc">Long</span><span class="hl sym">,</span> b<span class="hl sym">:</span> Int<span class="hl sym">)</span>
  &#64;<span class="hl kwa">native def</span> mpz_tdiv_qr<span class="hl sym">(</span>quot<span class="hl sym">:</span> <span class="hl kwc">Long</span><span class="hl sym">,</span> rem<span class="hl sym">:</span> <span class="hl kwc">Long</span><span class="hl sym">,</span> n<span class="hl sym">:</span> <span class="hl kwc">Long</span><span class="hl sym">,</span> d<span class="hl sym">:</span> <span class="hl kwc">Long</span><span class="hl sym">)</span>
<span class="hl sym">}</span>
<span class="hl kwa">object</span> Gmp <span class="hl sym">{</span>
  <span class="hl kwa">val</span> gmp <span class="hl sym">=</span> <span class="hl kwa">new</span> GmpUtil
  <span class="hl kwa">private var</span> stack <span class="hl sym">=</span> Nil<span class="hl sym">:</span><span class="hl kwc">List</span><span class="hl sym">[</span>I<span class="hl sym">]</span>
  <span class="hl kwa">private var</span> defunct <span class="hl sym">=</span> Nil<span class="hl sym">:</span><span class="hl kwc">List</span><span class="hl sym">[</span>I<span class="hl sym">]</span>
  <span class="hl kwa">class</span> I <span class="hl sym">{</span>
    <span class="hl kwa">private val</span> z <span class="hl sym">=</span> gmp<span class="hl sym">.</span>mpz_init<span class="hl sym">()</span>
    <span class="hl kwa">def</span> <span class="hl sym">!() =</span> stack match <span class="hl sym">{</span>
      <span class="hl kwa">case</span> i <span class="hl sym">::</span> rest <span class="hl kwa">if</span> <span class="hl sym">(</span>i eq <span class="hl kwa">this</span><span class="hl sym">) =&gt;</span>
        stack <span class="hl sym">=</span> Nil
        defunct <span class="hl sym">=</span> rest <span class="hl sym">:::</span> defunct
        i
      <span class="hl kwa">case</span> _ <span class="hl sym">=&gt;</span> I<span class="hl sym">.</span>die
    <span class="hl sym">}</span>
    <span class="hl kwa">def</span> <span class="hl sym">!!() =</span> stack match <span class="hl sym">{</span>
      <span class="hl kwa">case</span> i <span class="hl sym">::</span> j <span class="hl sym">::</span> rest <span class="hl kwa">if</span> <span class="hl sym">(</span>i eq <span class="hl kwa">this</span><span class="hl sym">) =&gt;</span>
        stack <span class="hl sym">=</span> Nil
        defunct <span class="hl sym">=</span> rest <span class="hl sym">:::</span> defunct
        <span class="hl sym">(</span>i<span class="hl sym">,</span>j<span class="hl sym">)</span>
      <span class="hl kwa">case</span> _ <span class="hl sym">=&gt;</span> I<span class="hl sym">.</span>die
    <span class="hl sym">}</span>
    <span class="hl kwa">def</span> toInt <span class="hl sym">=</span> gmp<span class="hl sym">.</span>mpz_get_si<span class="hl sym">(</span>z<span class="hl sym">)</span>
    <span class="hl kwa">def</span> <span class="hl sym">&lt;(</span>i<span class="hl sym">:</span> I<span class="hl sym">) =</span> gmp<span class="hl sym">.</span>mpz_cmp<span class="hl sym">(</span>z<span class="hl sym">,</span> i<span class="hl sym">.</span>z<span class="hl sym">) &lt;</span> <span class="hl num">0</span>
    <span class="hl kwa">def</span> <span class="hl sym">+(</span>i<span class="hl sym">:</span> I<span class="hl sym">) = {</span> gmp<span class="hl sym">.</span>mpz_add<span class="hl sym">(</span>I<span class="hl sym">.</span>ans<span class="hl sym">.</span>z<span class="hl sym">,</span> z<span class="hl sym">,</span> i<span class="hl sym">.</span>z<span class="hl sym">);</span> I<span class="hl sym">.</span>get <span class="hl sym">}</span>
    <span class="hl kwa">def</span> <span class="hl sym">-(</span>i<span class="hl sym">:</span> I<span class="hl sym">) = {</span> gmp<span class="hl sym">.</span>mpz_sub<span class="hl sym">(</span>I<span class="hl sym">.</span>ans<span class="hl sym">.</span>z<span class="hl sym">,</span> z<span class="hl sym">,</span> i<span class="hl sym">.</span>z<span class="hl sym">);</span> I<span class="hl sym">.</span>get <span class="hl sym">}</span>
    <span class="hl kwa">def</span> <span class="hl sym">*(</span>n<span class="hl sym">:</span> Int<span class="hl sym">) = {</span> gmp<span class="hl sym">.</span>mpz_mul_si<span class="hl sym">(</span>I<span class="hl sym">.</span>ans<span class="hl sym">.</span>z<span class="hl sym">,</span> z<span class="hl sym">,</span> n<span class="hl sym">);</span> I<span class="hl sym">.</span>get <span class="hl sym">}</span>
    <span class="hl kwa">def</span> <span class="hl sym">+*=(</span>i<span class="hl sym">:</span> I<span class="hl sym">,</span> n<span class="hl sym">:</span> Int<span class="hl sym">) = {</span> gmp<span class="hl sym">.</span>mpz_addmul_ui<span class="hl sym">(</span>z<span class="hl sym">,</span> i<span class="hl sym">.</span>z<span class="hl sym">,</span> n<span class="hl sym">);</span> <span class="hl kwa">this</span> <span class="hl sym">}</span>
    <span class="hl kwa">def</span> <span class="hl sym">-*=(</span>i<span class="hl sym">:</span> I<span class="hl sym">,</span> n<span class="hl sym">:</span> Int<span class="hl sym">) = {</span> gmp<span class="hl sym">.</span>mpz_submul_ui<span class="hl sym">(</span>z<span class="hl sym">,</span> i<span class="hl sym">.</span>z<span class="hl sym">,</span> n<span class="hl sym">);</span> <span class="hl kwa">this</span> <span class="hl sym">}</span>
    <span class="hl kwa">def</span> <span class="hl sym">/%(</span>i<span class="hl sym">:</span> I<span class="hl sym">) = {</span> <span class="hl kwa">val</span> r <span class="hl sym">=</span> I<span class="hl sym">.</span>ans<span class="hl sym">.</span>z<span class="hl sym">;</span> gmp<span class="hl sym">.</span>mpz_tdiv_qr<span class="hl sym">(</span>I<span class="hl sym">.</span>ans<span class="hl sym">.</span>z<span class="hl sym">,</span> r<span class="hl sym">,</span> z<span class="hl sym">,</span> i<span class="hl sym">.</span>z<span class="hl sym">);</span> I<span class="hl sym">.</span>get <span class="hl sym">}</span>
    <span class="hl kwa">def</span> unary_~<span class="hl sym">() = {</span> defunct <span class="hl sym">::=</span> <span class="hl kwa">this</span> <span class="hl sym">}</span>
    <span class="hl kwa">override def</span> finalize<span class="hl sym">() {</span> gmp<span class="hl sym">.</span>mpz_clear<span class="hl sym">(</span>z<span class="hl sym">);</span> <span class="hl kwa">super</span><span class="hl sym">.</span>finalize <span class="hl sym">}</span>
  <span class="hl sym">}</span>
  <span class="hl kwa">object</span> I <span class="hl sym">{</span>
    <span class="hl kwa">def</span> apply<span class="hl sym">(</span>n<span class="hl sym">:</span>Int<span class="hl sym">) =</span> defunct match <span class="hl sym">{</span>
      <span class="hl kwa">case</span> i <span class="hl sym">::</span> rest <span class="hl sym">=&gt;</span>
        defunct <span class="hl sym">=</span> rest
        gmp<span class="hl sym">.</span>mpz_set_si<span class="hl sym">(</span>i<span class="hl sym">.</span>z<span class="hl sym">,</span>n<span class="hl sym">)</span>
        i
      <span class="hl kwa">case</span> _ <span class="hl sym">=&gt;</span>
        <span class="hl kwa">val</span> i <span class="hl sym">=</span> <span class="hl kwa">new</span> I
        <span class="hl kwa">if</span> <span class="hl sym">(</span>n <span class="hl sym">!=</span> <span class="hl num">0</span><span class="hl sym">)</span> gmp<span class="hl sym">.</span>mpz_set_si<span class="hl sym">(</span>i<span class="hl sym">.</span>z<span class="hl sym">,</span>n<span class="hl sym">)</span>
        i
    <span class="hl sym">}</span>
    <span class="hl kwa">def</span> ans<span class="hl sym">() = {</span> <span class="hl kwa">val</span> i <span class="hl sym">=</span> I<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span> stack <span class="hl sym">::=</span> i<span class="hl sym">;</span> i <span class="hl sym">}</span>
    <span class="hl kwa">def</span> die<span class="hl sym">:</span> Nothing <span class="hl sym">=</span> <span class="hl kwa">throw new</span> <span class="hl kwc">IndexOutOfBoundsException</span>
    <span class="hl kwa">def</span> get<span class="hl sym">() =</span> stack match <span class="hl sym">{</span> <span class="hl kwa">case</span> i <span class="hl sym">::</span> rest <span class="hl sym">=&gt;</span> i <span class="hl sym">;</span> <span class="hl kwa">case</span> _ <span class="hl sym">=&gt;</span> die <span class="hl sym">}</span>
  <span class="hl sym">}</span>
<span class="hl sym">}</span>
