<source>
<def></def><com>/**</com><br />
<com> * The Computer Language Benchmarks Game</com><br />
<com> * Based on the CAL Open Quark version</com><br />
<com> * Contributed by Magnus Byne.</com><br />
<com> */</com><def></def><br />
<kwa>module</kwa> <def>Revcomp</def><sym>;</sym><br />
<def></def><br />
<kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Core</def><sym>.</sym><def>Prelude</def> <kwa>using</kwa><br />
<def></def>    <kwa>typeConstructor</kwa> <def></def><sym>=</sym> <def>Boolean</def><sym>,</sym> <def>Byte</def><sym>,</sym> <def>Char</def><sym>,</sym> <def>Int</def><sym>,</sym> <def>JObject</def><sym>,</sym> <def>String</def><sym>;</sym><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>eager</def><sym>,</sym> <def>seq</def><sym>,</sym> <def>toByte</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Core</def><sym>.</sym><def>Char</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>toInt</def><sym>,</sym> <def>toLowerCase</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Core</def><sym>.</sym><def>String</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>subscript</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Collections</def><sym>.</sym><def>List</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>foldLeftStrict</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><kwa>import</kwa> <def>Cal</def><sym>.</sym><def>IO</def><sym>.</sym><def>Console</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>printLine</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<br />
<kwa>data foreign unsafe import jvm</kwa> <def></def><str>&quot;java.io.BufferedReader&quot;</str><def></def> <kwa>private</kwa> <def>JBufferedReader</def><sym>;</sym><br />
<def></def><br />
<kwa>data foreign unsafe import jvm</kwa> <def></def><str>&quot;java.io.InputStream&quot;</str><def></def> <kwa>private</kwa> <def>JInputStream</def><sym>;</sym><br />
<def></def><br />
<kwa>data foreign unsafe import jvm</kwa> <def></def><str>&quot;java.io.InputStreamReader&quot;</str><def></def><br />
    <kwa>private</kwa> <def>JInputStreamReader</def><sym>;</sym><br />
<def></def><br />
<kwa>data foreign unsafe import jvm</kwa> <def></def><str>&quot;java.io.Reader&quot;</str><def></def> <kwa>private</kwa> <def>JReader</def><sym>;</sym><br />
<def></def><br />
<kwa>data foreign unsafe import jvm</kwa> <def></def><str>&quot;java.io.FileReader&quot;</str><def></def> <kwa>private</kwa> <def>JFileReader</def><sym>;</sym><br />
<def></def><br />
<kwa>data foreign unsafe import jvm</kwa> <def></def><str>&quot;java.io.PrintStream&quot;</str><def></def> <kwa>private</kwa> <def>JPrintStream</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;constructor&quot;</str><def></def><br />
    <kwa>private</kwa> <def>createBufferedReader</def> <sym>::</sym> <def>JReader</def> <sym>-&gt;</sym> <def>JBufferedReader</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;constructor&quot;</str><def></def><br />
    <kwa>private</kwa> <def>createInputStreamReaderStream</def> <sym>::</sym> <def>JInputStream</def> <sym>-&gt;</sym> <def>JInputStreamReader</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;method readLine&quot;</str><def></def><br />
    <kwa>private</kwa> <def>readLine</def> <sym>::</sym> <def>JBufferedReader</def> <sym>-&gt;</sym> <def>String</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;static field java.lang.System.out&quot;</str><def></def><br />
    <kwa>private</kwa> <def>stdout</def> <sym>::</sym> <def>JPrintStream</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;static field java.lang.System.in&quot;</str><def></def><br />
    <kwa>private</kwa> <def>stdin</def> <sym>::</sym> <def>JInputStream</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;isNull&quot;</str><def></def> <kwa>private</kwa> <def>isNull</def> <sym>::</sym> <def>String</def> <sym>-&gt;</sym> <def>Boolean</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;method write&quot;</str><def></def><br />
    <kwa>private</kwa> <def>write</def> <sym>::</sym> <def>JPrintStream</def> <sym>-&gt;</sym> <def>JByteArray</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt; ();</sym><br />
<def></def><br />
<kwa>data foreign unsafe import jvm</kwa> <def></def><str>&quot;byte[]&quot;</str><def> JByteArray</def><sym>;</sym><br />
<def></def><br />
<slc>//Import Java byte arrays</slc><br />
<def></def><kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;newArray&quot;</str><def> byteArray_new</def> <sym>::</sym> <def>Int</def> <sym>-&gt;</sym> <def>JByteArray</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;subscriptArray&quot;</str><def><br />
    byteArray_subscript</def> <sym>::</sym> <def>JByteArray</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Byte</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;lengthArray&quot;</str><def> byteArray_length</def> <sym>::</sym> <def>JByteArray</def> <sym>-&gt;</sym> <def>Int</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;updateArray&quot;</str><def><br />
    byteArray_update</def> <sym>::</sym> <def>JByteArray</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Byte</def> <sym>-&gt;</sym> <def>Byte</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;cast&quot;</str><def><br />
    jInputStreamReaderToJReader</def> <sym>::</sym> <def>JInputStreamReader</def> <sym>-&gt;</sym> <def>JReader</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;cast&quot;</str><def> cast</def> <sym>::</sym> <def>JByteArray</def> <sym>-&gt;</sym> <def>JObject</def><sym>;</sym><br />
<def></def><br />
<kwa>data</kwa> <def>Chunk</def> <sym>=</sym><br />
<def>    Chunk<br />
        dataChunk</def> <sym>:: !</sym><def>JByteArray<br />
        length</def> <sym>:: !</sym><def>Int</def><br />
    <sym>;</sym><br />
<def><br />
charToByte</def> <sym>::</sym> <def>Char</def> <sym>-&gt;</sym> <def>Byte</def><sym>;</sym><br />
<def>charToByte</def> <sym>!</sym><def>c</def> <sym>=</sym> <def>toByte</def> <sym>(</sym><def>Char</def><sym>.</sym><def>toInt c</def><sym>);</sym><br />
<def><br />
initCharMap</def> <sym>::</sym> <def>JByteArray</def> <sym>-&gt; ();</sym><br />
<def>initCharMap</def> <sym>!</sym><def>charMap</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa><br />
<def>        loop</def> <sym>::</sym> <def>Int</def> <sym>-&gt; ();</sym><br />
<def>        loop</def> <sym>!</sym><def>i</def> <sym>=</sym><br />
<def></def>            <kwa>if</kwa> <def>i</def> <sym>&lt;</sym> <def></def><num>128</num> <def></def><kwa>then</kwa><br />
<def>                byteArray_update charMap i</def> <sym>(</sym><def>toByte i</def><sym>)</sym><br />
<def></def>                <sym>`</sym><def>seq</def><sym>`</sym><br />
<def></def>                <sym>()</sym><br />
<def></def>            <kwa>else</kwa><br />
<def></def>                <sym>()</sym><br />
<def></def>            <sym>;</sym><br />
<def><br />
        mappings</def> <sym>:: [(</sym><def>Char</def><sym>,</sym> <def>Char</def><sym>)];</sym><br />
<def>        mappings</def> <sym>=</sym><br />
<def></def>            <sym>[</sym><br />
<def></def>                <sym>(</sym><def></def><str>'A'</str><def></def><sym>,</sym> <def></def><str>'T'</str><def></def><sym>),</sym><br />
<def></def>                <sym>(</sym><def></def><str>'C'</str><def></def><sym>,</sym> <def></def><str>'G'</str><def></def><sym>),</sym><br />
<def></def>                <sym>(</sym><def></def><str>'G'</str><def></def><sym>,</sym> <def></def><str>'C'</str><def></def><sym>),</sym><br />
<def></def>                <sym>(</sym><def></def><str>'T'</str><def></def><sym>,</sym> <def></def><str>'A'</str><def></def><sym>),</sym><br />
<def></def>                <sym>(</sym><def></def><str>'U'</str><def></def><sym>,</sym> <def></def><str>'A'</str><def></def><sym>),</sym><br />
<def></def>                <sym>(</sym><def></def><str>'M'</str><def></def><sym>,</sym> <def></def><str>'K'</str><def></def><sym>),</sym><br />
<def></def>                <sym>(</sym><def></def><str>'R'</str><def></def><sym>,</sym> <def></def><str>'Y'</str><def></def><sym>),</sym><br />
<def></def>                <sym>(</sym><def></def><str>'W'</str><def></def><sym>,</sym> <def></def><str>'W'</str><def></def><sym>),</sym><br />
<def></def>                <sym>(</sym><def></def><str>'S'</str><def></def><sym>,</sym> <def></def><str>'S'</str><def></def><sym>),</sym><br />
<def></def>                <sym>(</sym><def></def><str>'Y'</str><def></def><sym>,</sym> <def></def><str>'R'</str><def></def><sym>),</sym><br />
<def></def>                <sym>(</sym><def></def><str>'K'</str><def></def><sym>,</sym> <def></def><str>'M'</str><def></def><sym>),</sym><br />
<def></def>                <sym>(</sym><def></def><str>'V'</str><def></def><sym>,</sym> <def></def><str>'B'</str><def></def><sym>),</sym><br />
<def></def>                <sym>(</sym><def></def><str>'H'</str><def></def><sym>,</sym> <def></def><str>'D'</str><def></def><sym>),</sym><br />
<def></def>                <sym>(</sym><def></def><str>'D'</str><def></def><sym>,</sym> <def></def><str>'H'</str><def></def><sym>),</sym><br />
<def></def>                <sym>(</sym><def></def><str>'B'</str><def></def><sym>,</sym> <def></def><str>'V'</str><def></def><sym>),</sym><br />
<def></def>                <sym>(</sym><def></def><str>'N'</str><def></def><sym>,</sym> <def></def><str>'N'</str><def></def><sym>)</sym><br />
<def></def>            <sym>]</sym><br />
<def></def>            <sym>;</sym><br />
<def></def>    <kwa>in</kwa><br />
<def>        loop</def> <num>0</num><br />
<def></def>        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>        foldLeftStrict</def><br />
            <sym>(</sym><br />
<def>                \</def><sym>!</sym><def>a</def> <sym>!</sym><def>mapping</def> <sym>-&gt;</sym><br />
<def>                    byteArray_update<br />
                        charMap</def><br />
                        <sym>(</sym><def>Char</def><sym>.</sym><def>toInt mapping</def><sym>.</sym><def>#</def><num>1</num><def></def><sym>)</sym><br />
<def></def>                        <sym>(</sym><def>charToByte mapping</def><sym>.</sym><def>#</def><num>2</num><def></def><sym>)</sym><br />
<def></def>                    <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                    byteArray_update<br />
                        charMap</def><br />
                        <sym>(</sym><def>Char</def><sym>.</sym><def>toInt</def> <sym>(</sym><def>toLowerCase mapping</def><sym>.</sym><def>#</def><num>1</num><def></def><sym>))</sym><br />
<def></def>                        <sym>(</sym><def>charToByte mapping</def><sym>.</sym><def>#</def><num>2</num><def></def><sym>)</sym><br />
<def></def>                    <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                    a</def><br />
            <sym>)</sym><br />
<def></def>            <sym>()</sym><br />
<def>            mappings</def><br />
    <sym>;</sym><br />
<def></def><br />
<slc>//this includes the CR</slc><br />
<def>outputLineLength</def> <sym>::</sym> <def>Int</def><sym>;</sym><br />
<def>outputLineLength</def> <sym>=</sym> <def></def><num>61</num><def></def><sym>;</sym><br />
<def><br />
printChunks</def> <sym>:: [</sym><def>Chunk</def><sym>] -&gt; ();</sym><br />
<def>printChunks chunks</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa><br />
<def>        outputBuffer</def> <sym>::</sym> <def>JByteArray</def><sym>;</sym><br />
<def>        outputBuffer</def> <sym>=</sym><br />
<def>            eager $ byteArray_new</def> <sym>(</sym><def>chunkSize</def> <sym>*</sym> <def>List</def><sym>.</sym><def>length chunks</def> <sym>*</sym> <def></def><num>61</num> <def></def><sym>/</sym> <def></def><num>60</num><def></def><sym>)</sym><br />
<def></def>            <sym>;</sym><br />
<def><br />
        eol</def> <sym>::</sym> <def>Byte</def><sym>;</sym><br />
<def>        eol</def> <sym>=</sym> <def>eager $ toByte</def> <sym>(</sym><def>eager $ Char</def><sym>.</sym><def>toInt</def> <str>'</str><esc>\n</esc><str>'</str><def></def><sym>);</sym><br />
<def><br />
        appendChunk</def> <sym>::</sym> <def>JByteArray</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def><sym>;</sym><br />
<def>        appendChunk</def> <sym>!</sym><def>chunk</def> <sym>!</sym><def>i</def> <sym>!</sym><def>charsOnLine</def> <sym>!</sym><def>ptr</def> <sym>=</sym><br />
<def></def>            <kwa>if</kwa> <def>i</def> <sym>&gt;=</sym> <def></def><num>0</num> <def></def><kwa>then</kwa><br />
<def>                byteArray_update<br />
                    outputBuffer<br />
                    ptr</def><br />
                    <sym>(</sym><def>byteArray_subscript chunk i</def><sym>)</sym><br />
<def></def>                <sym>`</sym><def>seq</def><sym>`</sym><br />
<def></def>                <sym>(</sym><br />
<def></def>                    <kwa>if</kwa> <def></def><sym>(</sym><def>ptr</def> <sym>+</sym> <def></def><num>2</num><def></def><sym>) %</sym> <def>outputLineLength</def> <sym>==</sym> <def></def><num>0</num> <def></def><kwa>then</kwa><br />
<def>                        byteArray_update outputBuffer</def> <sym>(</sym><def>ptr</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>)</sym> <def>eol</def><br />
                        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                        appendChunk chunk</def> <sym>(</sym><def>i</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>)</sym> <def></def><num>0</num> <def></def><sym>(</sym><def>ptr</def> <sym>+</sym> <def></def><num>2</num><def></def><sym>)</sym><br />
<def></def>                    <kwa>else</kwa><br />
<def>                        appendChunk<br />
                            chunk</def><br />
                            <sym>(</sym><def>i</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>                            <sym>(</sym><def>charsOnLine</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>                            <sym>(</sym><def>ptr</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>                <sym>)</sym><br />
<def></def>            <kwa>else</kwa><br />
<def>                ptr</def><br />
            <sym>;</sym><br />
<def><br />
        appendChunks</def> <sym>:: [</sym><def>Chunk</def><sym>] -&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def><sym>;</sym><br />
<def>        appendChunks</def> <sym>!</sym><def>chunks</def> <sym>!</sym><def>ptr</def> <sym>=</sym><br />
<def></def>            <kwa>case</kwa> <def>chunks</def> <kwa>of</kwa><br />
<def></def>            <sym>[] -&gt;</sym><br />
<def></def>                <kwa>if</kwa> <def>ptr</def> <sym>%</sym> <def>outputLineLength</def> <sym>!=</sym> <def></def><num>0</num> <def></def><kwa>then</kwa><br />
<def>                    byteArray_update outputBuffer ptr eol</def><br />
                    <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                    ptr</def> <sym>+</sym> <def></def><num>1</num><br />
<def></def>                <kwa>else</kwa><br />
<def>                    ptr</def><br />
                <sym>;</sym><br />
<def>            first</def> <sym>:</sym> <def>rest</def> <sym>-&gt;</sym><br />
<def></def>                <kwa>case</kwa> <def>first</def> <kwa>of</kwa><br />
<def>                Chunk buffer bytes</def> <sym>-&gt;</sym><br />
<def>                    appendChunks<br />
                        rest</def><br />
                        <sym>(</sym><def>appendChunk buffer</def> <sym>(</sym><def>bytes</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>) (</sym><def></def><num>0</num> <def></def><sym>::</sym> <def>Int</def><sym>)</sym> <def>ptr</def><sym>)</sym><br />
<def></def>                    <sym>;</sym><br />
<def></def>                <sym>;</sym><br />
<def></def>            <sym>;</sym><br />
<def></def>    <kwa>in</kwa><br />
<def>        write stdout outputBuffer</def> <num>0</num> <def></def><sym>(</sym><def>appendChunks chunks</def> <num>0</num><def></def><sym>)</sym><br />
<def></def>    <sym>;</sym><br />
<def><br />
appendToChunk</def> <sym>::</sym> <def>JByteArray</def> <sym>-&gt;</sym> <def>String</def> <sym>-&gt;</sym> <def>JByteArray</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt; ();</sym><br />
<def>appendToChunk</def> <sym>!</sym><def>charMap</def> <sym>!</sym><def>line</def> <sym>!</sym><def>buffer</def> <sym>!</sym><def>offset</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa><br />
<def>        helper</def> <sym>::</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt; ();</sym><br />
<def>        helper</def> <sym>!</sym><def>i</def> <sym>!</sym><def>end</def> <sym>=</sym><br />
<def></def>            <kwa>if</kwa> <def>i</def> <sym>&lt;</sym> <def>end</def> <kwa>then</kwa><br />
<def>                byteArray_update<br />
                    buffer</def><br />
                    <sym>(</sym><def>offset</def> <sym>+</sym> <def>i</def><sym>)</sym><br />
<def></def>                    <sym>(</sym><def>byteArray_subscript<br />
                        charMap</def><br />
                        <sym>(</sym><def>toInt</def> <sym>(</sym><def>String</def><sym>.</sym><def>subscript line i</def><sym>))</sym><br />
<def></def>                    <sym>)</sym><br />
<def></def>                <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                helper</def> <sym>(</sym><def>i</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>)</sym> <def>end</def><br />
            <kwa>else</kwa><br />
<def></def>                <sym>()</sym><br />
<def></def>            <sym>;</sym><br />
<def></def>    <kwa>in</kwa><br />
<def>        helper</def> <num>0</num> <def></def><sym>(</sym><def>String</def><sym>.</sym><def>length line</def><sym>)</sym><br />
<def></def>    <sym>;</sym><br />
<def><br />
chunkSize</def> <sym>::</sym> <def>Int</def><sym>;</sym><br />
<def>chunkSize</def> <sym>=</sym> <def></def><num>10240</num><def></def><sym>;</sym><br />
<def><br />
main</def> <sym>:: [</sym><def>String</def><sym>] -&gt; ();</sym><br />
<def></def><kwa>public</kwa> <def>main</def> <sym>!</sym><def>args</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa><br />
<def>        charMap</def> <sym>::</sym> <def>JByteArray</def><sym>;</sym><br />
<def>        charMap</def> <sym>=</sym> <def>eager $ byteArray_new</def> <num>128</num><def></def><sym>;</sym><br />
<def><br />
        reader</def> <sym>::</sym> <def>JBufferedReader</def><sym>;</sym><br />
<def>        reader</def> <sym>=</sym><br />
<def>            eager<br />
            $ createBufferedReader</def><br />
                <sym>(</sym><def>jInputStreamReaderToJReader</def><br />
                    <sym>(</sym><def>createInputStreamReaderStream stdin</def><sym>)</sym><br />
<def></def>                <sym>)</sym><br />
<def></def>            <sym>;</sym><br />
<def><br />
        readLines</def> <sym>::</sym> <def>JBufferedReader</def> <sym>-&gt; [</sym><def>Chunk</def><sym>] -&gt;</sym> <def>JByteArray</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt; ();</sym><br />
<def>        readLines</def> <sym>!</sym><def>reader</def> <sym>!</sym><def>chunks</def> <sym>!</sym><def>buffer</def> <sym>!</sym><def>bytesInBuffer</def> <sym>=</sym><br />
<def></def>            <kwa>let</kwa><br />
<def>                line</def> <sym>::</sym> <def>String</def><sym>;</sym><br />
<def>                line</def> <sym>=</sym> <def>eager $ readLine reader</def><sym>;</sym><br />
<def></def>            <kwa>in</kwa><br />
<def></def><br />
                <kwa>if</kwa> <def>isNull line</def> <kwa>then</kwa><br />
<def>                    printChunks</def> <sym>(</sym><def>Chunk buffer bytesInBuffer</def> <sym>:</sym> <def>chunks</def><sym>)</sym><br />
<def></def>                <kwa>else if</kwa> <def>subscript line</def> <num>0</num> <def></def><sym>==</sym> <def></def><str>'&gt;'</str><def></def> <kwa>then</kwa><br />
<def>                    printChunks</def> <sym>(</sym><def>Chunk buffer bytesInBuffer</def> <sym>:</sym> <def>chunks</def><sym>)</sym><br />
<def></def>                    <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                    printLine line</def><br />
                    <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                    readLines reader</def> <sym>[] (</sym><def>byteArray_new chunkSize</def><sym>)</sym> <def></def><num>0</num><br />
<def></def>                <kwa>else if</kwa> <def>bytesInBuffer</def> <sym>+</sym> <def>String</def><sym>.</sym><def>length line</def> <sym>&lt;</sym> <def>chunkSize</def> <kwa>then</kwa><br />
<def>                    appendToChunk charMap line buffer bytesInBuffer</def><br />
                    <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                    readLines<br />
                        reader<br />
                        chunks<br />
                        buffer</def><br />
                        <sym>(</sym><def>bytesInBuffer</def> <sym>+</sym> <def>String</def><sym>.</sym><def>length line</def><sym>)</sym><br />
<def></def>                <kwa>else</kwa><br />
<def></def>                    <kwa>let</kwa><br />
<def>                        newBuffer</def> <sym>::</sym> <def>JByteArray</def><sym>;</sym><br />
<def>                        newBuffer</def> <sym>=</sym> <def>eager $ byteArray_new chunkSize</def><sym>;</sym><br />
<def><br />
                        len</def> <sym>::</sym> <def>Int</def><sym>;</sym><br />
<def>                        len</def> <sym>=</sym> <def>eager $ String</def><sym>.</sym><def>length line</def><sym>;</sym><br />
<def></def>                    <kwa>in</kwa><br />
<def>                        appendToChunk charMap line newBuffer</def> <num>0</num><br />
<def></def>                        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                        readLines<br />
                            reader</def><br />
                            <sym>(</sym><def>Chunk buffer bytesInBuffer</def> <sym>:</sym> <def>chunks</def><sym>)</sym><br />
<def>                            newBuffer<br />
                            len</def><br />
            <sym>;</sym><br />
<def></def>    <kwa>in</kwa><br />
<def><br />
        initCharMap charMap</def><br />
        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>        readLines reader</def> <sym>[] (</sym><def>byteArray_new chunkSize</def><sym>)</sym> <def></def><num>0</num><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
</source>
