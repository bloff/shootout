<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Jochen Hinrichsen</span>
<span class="hl com">*/</span>

<span class="hl kwa">class</span> <span class="hl kwc">TreeNode</span> <span class="hl sym">{</span>
   <span class="hl kwa">private</span> left<span class="hl sym">,</span> right
   <span class="hl kwa">private</span> item

   <span class="hl kwc">TreeNode</span><span class="hl sym">(</span><span class="hl kwb">int</span> item<span class="hl sym">){</span>
      <span class="hl kwa">this</span><span class="hl sym">.</span>item <span class="hl sym">=</span> item
   <span class="hl sym">}</span>

   <span class="hl kwa">private static</span> <span class="hl kwc">TreeNode</span> <span class="hl kwd">bottomUpTree</span><span class="hl sym">(</span><span class="hl kwb">int</span> item<span class="hl sym">,</span> <span class="hl kwb">int</span> depth<span class="hl sym">) {</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>depth<span class="hl sym">&gt;</span><span class="hl num">0</span><span class="hl sym">) {</span>
      <span class="hl kwa">return new</span> <span class="hl kwc">TreeNode</span><span class="hl sym">(</span>
           <span class="hl kwd">bottomUpTree</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>item<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> depth<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
         <span class="hl sym">,</span> <span class="hl kwd">bottomUpTree</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>item<span class="hl sym">,</span> depth<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
         <span class="hl sym">,</span> item
         <span class="hl sym">)</span>
      <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
      <span class="hl kwa">return new</span> <span class="hl kwc">TreeNode</span><span class="hl sym">(</span>item<span class="hl sym">)</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   <span class="hl kwc">TreeNode</span><span class="hl sym">(</span><span class="hl kwc">TreeNode</span> left<span class="hl sym">,</span> <span class="hl kwc">TreeNode</span> right<span class="hl sym">,</span> <span class="hl kwb">int</span> item<span class="hl sym">){</span>
      <span class="hl kwa">this</span><span class="hl sym">.</span>left <span class="hl sym">=</span> left
      <span class="hl kwa">this</span><span class="hl sym">.</span>right <span class="hl sym">=</span> right
      <span class="hl kwa">this</span><span class="hl sym">.</span>item <span class="hl sym">=</span> item
   <span class="hl sym">}</span>

   <span class="hl kwa">private</span> <span class="hl kwb">int</span> <span class="hl kwd">itemCheck</span><span class="hl sym">(){</span>
      <span class="hl slc">// if necessary deallocate here</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>left<span class="hl sym">==</span>null<span class="hl sym">)</span> <span class="hl kwa">return</span> item
      <span class="hl kwa">else return</span> item <span class="hl sym">+</span> left<span class="hl sym">.</span><span class="hl kwd">itemCheck</span><span class="hl sym">() -</span> right<span class="hl sym">.</span><span class="hl kwd">itemCheck</span><span class="hl sym">()</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>


def n <span class="hl sym">= (</span>args<span class="hl sym">.</span>length <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span> ? <span class="hl num">10</span> <span class="hl sym">:</span> args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">].</span><span class="hl kwd">toInteger</span><span class="hl sym">()</span>
def minDepth <span class="hl sym">=</span> <span class="hl num">4</span>
def maxDepth <span class="hl sym">= [</span> minDepth <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">,</span> n<span class="hl sym">].</span><span class="hl kwd">max</span><span class="hl sym">()</span>
def stretchDepth <span class="hl sym">=</span> maxDepth <span class="hl sym">+</span> <span class="hl num">1</span>

def check <span class="hl sym">= (</span><span class="hl kwc">TreeNode</span><span class="hl sym">.</span><span class="hl kwd">bottomUpTree</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span>stretchDepth<span class="hl sym">)).</span><span class="hl kwd">itemCheck</span><span class="hl sym">()</span>
println <span class="hl str">&quot;stretch tree of depth ${stretchDepth}</span><span class="hl esc">\t</span> <span class="hl str">check: ${check}&quot;</span>

def longLivedTree <span class="hl sym">=</span> <span class="hl kwc">TreeNode</span><span class="hl sym">.</span><span class="hl kwd">bottomUpTree</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span>maxDepth<span class="hl sym">)</span>

def depth<span class="hl sym">=</span>minDepth
<span class="hl kwa">while</span> <span class="hl sym">(</span>depth<span class="hl sym">&lt;=</span>maxDepth<span class="hl sym">) {</span>
   def iterations <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>maxDepth <span class="hl sym">-</span> depth <span class="hl sym">+</span> minDepth<span class="hl sym">)</span>
   check <span class="hl sym">=</span> <span class="hl num">0</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span>i in <span class="hl num">1</span><span class="hl sym">..</span>iterations<span class="hl sym">) {</span>
      check <span class="hl sym">+= (</span><span class="hl kwc">TreeNode</span><span class="hl sym">.</span><span class="hl kwd">bottomUpTree</span><span class="hl sym">(</span>i<span class="hl sym">,</span>depth<span class="hl sym">)).</span><span class="hl kwd">itemCheck</span><span class="hl sym">()</span>
      check <span class="hl sym">+= (</span><span class="hl kwc">TreeNode</span><span class="hl sym">.</span><span class="hl kwd">bottomUpTree</span><span class="hl sym">(-</span>i<span class="hl sym">,</span>depth<span class="hl sym">)).</span><span class="hl kwd">itemCheck</span><span class="hl sym">()</span>
   <span class="hl sym">}</span>

   println <span class="hl str">&quot;${iterations*2}</span><span class="hl esc">\t</span> <span class="hl str">trees of depth ${depth}</span><span class="hl esc">\t</span> <span class="hl str">check: ${check}&quot;</span>
   depth<span class="hl sym">+=</span><span class="hl num">2</span>
<span class="hl sym">}</span>

println <span class="hl str">&quot;long lived tree of depth ${maxDepth}</span><span class="hl esc">\t</span> <span class="hl str">check: ${longLivedTree.itemCheck()}&quot;</span>

