<span class="hl com">/*</span>
<span class="hl com">-- The Computer Language Shootout</span>
<span class="hl com">-- http://shootout.alioth.debian.org/</span>
<span class="hl com">--</span>
<span class="hl com">-- contributed by Daniel Skiles</span>
<span class="hl com">-- modified by Vaclav Haisman</span>
<span class="hl com">*/</span>

<span class="hl dir">#include &lt;iostream&gt;</span>
<span class="hl dir">#include &lt;iomanip&gt;</span>
<span class="hl dir">#include &lt;vector&gt;</span>
<span class="hl dir">#include &lt;algorithm&gt;</span>
<span class="hl dir">#include &lt;cstdlib&gt;</span>


<span class="hl kwa">using namespace</span> std<span class="hl sym">;</span>


<span class="hl kwb">unsigned</span> <span class="hl kwd">nsieve</span> <span class="hl sym">(</span>vector<span class="hl sym">&lt;</span><span class="hl kwb">bool</span><span class="hl sym">&gt; &amp;</span> isPrime<span class="hl sym">)</span>
<span class="hl sym">{</span>
  <span class="hl kwb">unsigned</span> count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
  <span class="hl kwb">size_t const</span> m <span class="hl sym">=</span> isPrime<span class="hl sym">.</span><span class="hl kwd">size</span> <span class="hl sym">();</span>

  <span class="hl kwd">fill</span> <span class="hl sym">(</span>isPrime<span class="hl sym">.</span><span class="hl kwd">begin</span> <span class="hl sym">() +</span> <span class="hl num">2</span><span class="hl sym">,</span> isPrime<span class="hl sym">.</span><span class="hl kwd">end</span> <span class="hl sym">(),</span> <span class="hl kwa">true</span><span class="hl sym">);</span>

  <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">size_t</span> i<span class="hl sym">=</span><span class="hl num">2</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>m<span class="hl sym">; ++</span>i<span class="hl sym">)</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>isPrime<span class="hl sym">[</span>i<span class="hl sym">])</span>
      <span class="hl sym">{</span>
        <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwb">size_t</span> k<span class="hl sym">=</span>i<span class="hl sym">*</span><span class="hl num">2</span><span class="hl sym">;</span> k<span class="hl sym">&lt;</span>m<span class="hl sym">;</span> k<span class="hl sym">+=</span>i<span class="hl sym">)</span>
          isPrime<span class="hl sym">[</span>k<span class="hl sym">] =</span> <span class="hl kwa">false</span><span class="hl sym">;</span>
        <span class="hl sym">++</span>count<span class="hl sym">;</span>
      <span class="hl sym">}</span>
  <span class="hl kwa">return</span> count<span class="hl sym">;</span>
<span class="hl sym">}</span>


<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">*</span>argv<span class="hl sym">[])</span>
<span class="hl sym">{</span>
  <span class="hl kwb">int</span> n <span class="hl sym">= (</span>argc <span class="hl sym">==</span> <span class="hl num">2</span><span class="hl sym">)</span> ? <span class="hl kwd">atoi</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]) :</span> <span class="hl num">2</span><span class="hl sym">;</span>
  <span class="hl kwb">unsigned</span> m<span class="hl sym">;</span>

  m <span class="hl sym">= (</span><span class="hl num">1</span><span class="hl sym">&lt;&lt;</span>n<span class="hl sym">)*</span><span class="hl num">10000</span><span class="hl sym">;</span>
  vector<span class="hl sym">&lt;</span><span class="hl kwb">bool</span><span class="hl sym">&gt;</span> <span class="hl kwd">flags</span> <span class="hl sym">(</span>m<span class="hl sym">);</span>
  cout <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;Primes up to &quot;</span> <span class="hl sym">&lt;&lt;</span> <span class="hl kwd">setw</span><span class="hl sym">(</span><span class="hl num">8</span><span class="hl sym">) &lt;&lt;</span> m <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot; &quot;</span> <span class="hl sym">&lt;&lt;</span> <span class="hl kwd">setw</span><span class="hl sym">(</span><span class="hl num">8</span><span class="hl sym">) &lt;&lt;</span> <span class="hl kwd">nsieve</span><span class="hl sym">(</span>flags<span class="hl sym">) &lt;&lt;</span> endl<span class="hl sym">;</span>

  m <span class="hl sym">= (</span><span class="hl num">1</span><span class="hl sym">&lt;&lt;</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)*</span><span class="hl num">10000</span><span class="hl sym">;</span>
  flags<span class="hl sym">.</span><span class="hl kwd">resize</span> <span class="hl sym">(</span>m<span class="hl sym">);</span>
  cout <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;Primes up to &quot;</span> <span class="hl sym">&lt;&lt;</span> <span class="hl kwd">setw</span><span class="hl sym">(</span><span class="hl num">8</span><span class="hl sym">) &lt;&lt;</span> m <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot; &quot;</span> <span class="hl sym">&lt;&lt;</span> <span class="hl kwd">setw</span><span class="hl sym">(</span><span class="hl num">8</span><span class="hl sym">) &lt;&lt;</span> <span class="hl kwd">nsieve</span><span class="hl sym">(</span>flags<span class="hl sym">) &lt;&lt;</span> endl<span class="hl sym">;</span>

  m <span class="hl sym">= (</span><span class="hl num">1</span><span class="hl sym">&lt;&lt;</span>n<span class="hl sym">-</span><span class="hl num">2</span><span class="hl sym">)*</span><span class="hl num">10000</span><span class="hl sym">;</span>
  flags<span class="hl sym">.</span><span class="hl kwd">resize</span> <span class="hl sym">(</span>m<span class="hl sym">);</span>
  cout <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;Primes up to &quot;</span> <span class="hl sym">&lt;&lt;</span> <span class="hl kwd">setw</span><span class="hl sym">(</span><span class="hl num">8</span><span class="hl sym">) &lt;&lt;</span> m <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot; &quot;</span> <span class="hl sym">&lt;&lt;</span> <span class="hl kwd">setw</span><span class="hl sym">(</span><span class="hl num">8</span><span class="hl sym">) &lt;&lt;</span> <span class="hl kwd">nsieve</span><span class="hl sym">(</span>flags<span class="hl sym">) &lt;&lt;</span> endl<span class="hl sym">;</span>
<span class="hl sym">}</span>
