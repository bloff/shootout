<source>
<def></def><kwa>program</kwa> <def>fannkuch</def><sym>;</sym><br />
<def></def><com>{ The Computer Language Benchmarks Game</com><br />
<com>  http://shootout.alioth.debian.org/</com><br />
<com></com><br />
<com>  contributed by Florian Klaempfl</com><br />
<com>  modified by Micha Nelissen</com><br />
<com>  modified by Vincent Snijders</com><br />
<com>  modified by Steve Fisher</com><br />
<com></com><br />
<com>  Compile with</com><br />
<com>  fpc -O3 fannkuch.pp</com><br />
<com>}</com><def></def><br />
<br />
<com>{$INLINE ON}</com><def></def><br />
<com>{$OVERFLOWCHECKS OFF}</com><def></def><br />
<com>{$RANGECHECKS OFF}</com><def></def><br />
<br />
<kwa>type</kwa><br />
<def>    TIntegerArray</def> <sym>=</sym> <def></def><kwa>Array</kwa><def></def><sym>[</sym><def></def><num>0</num><def></def><sym>.</sym><def></def><num>.99</num><def></def><sym>]</sym> <def></def><kwa>of</kwa> <def></def><kwb>longint</kwb><def></def><sym>;</sym><br />
<def></def><br />
<kwa>var</kwa><br />
<def>   permu</def><sym>,</sym> <def>permu_copy</def><sym>,</sym> <def>count</def><sym>:</sym> <def>TIntegerArray</def><sym>;</sym><br />
<def>   r</def><sym>,</sym> <def>n</def><sym>,</sym> <def>answer</def><sym>:</sym> <def></def><kwb>longint</kwb><def></def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def></def><kwd>swap</kwd><def></def><sym>(</sym><def></def><kwa>var</kwa> <def>a</def><sym>,</sym> <def>b</def><sym>:</sym> <def></def><kwb>longint</kwb><def></def><sym>);</sym> <def></def><kwa>inline</kwa><def></def><sym>;</sym><br />
<def></def><kwa>var</kwa>  <def>tmp</def><sym>:</sym> <def></def><kwb>longint</kwb><def></def><sym>;</sym><br />
<def></def><kwa>begin</kwa>  <def>tmp</def> <sym>:=</sym> <def>a</def><sym>;</sym>  <def>a</def> <sym>:=</sym> <def>b</def><sym>;</sym>  <def>b</def> <sym>:=</sym> <def>tmp</def>   <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def></def><kwd>reverse</kwd><def></def><sym>(</sym> <def>k</def><sym>:</sym> <def></def><kwb>longint</kwb><def></def><sym>);</sym> <def></def><kwa>inline</kwa><def></def><sym>;</sym><br />
<def></def><kwa>var</kwa><br />
<def>  pi</def><sym>,</sym> <def>pj</def> <sym>:</sym> <def>pLongint</def><sym>;</sym><br />
<def></def><kwa>begin</kwa><br />
<def>  pi</def> <sym>:= @</sym><def>permu_copy</def><sym>[</sym><def></def><num>1</num><def></def><sym>];</sym><br />
<def>  pj</def> <sym>:= @</sym><def>permu_copy</def><sym>[</sym><def>k</def><sym>-</sym><def></def><num>1</num><def></def><sym>];</sym><br />
<def></def>  <kwa>while</kwa> <def>pi</def><sym>&lt;</sym><def>pj</def> <kwa>do</kwa><br />
<def></def>  <kwa>begin</kwa><br />
<def></def>    <kwd>swap</kwd><def></def><sym>(</sym><def>pi</def><sym>^,</sym> <def>pj</def><sym>^);</sym><br />
<def></def>    <kwd>inc</kwd><def></def><sym>(</sym><def>pi</def><sym>);</sym><br />
<def></def>    <kwd>dec</kwd><def></def><sym>(</sym><def>pj</def><sym>);</sym><br />
<def></def>  <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>function</kwa> <def>countflips</def><sym>:</sym> <def></def><kwb>longint</kwb><def></def><sym>;</sym> <def></def><kwa>inline</kwa><def></def><sym>;</sym><br />
<def></def><kwa>var</kwa><br />
<def>  last</def><sym>:</sym> <def></def><kwb>LongInt</kwb><def></def><sym>;</sym><br />
<def>  tmp</def><sym>:</sym> <def></def><kwb>LongInt</kwb><def></def><sym>;</sym><br />
<def></def><kwa>begin</kwa><br />
<def>  countflips</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>  last</def> <sym>:=</sym> <def>permu_copy</def><sym>[</sym><def></def><num>0</num><def></def><sym>];</sym><br />
<def></def>  <kwa>repeat</kwa><br />
<def></def>    <slc>// Reverse part of the array.</slc><br />
<def></def>    <kwd>reverse</kwd><def></def><sym>(</sym><def>last</def><sym>);</sym><br />
<def><br />
    tmp</def> <sym>:=</sym> <def>permu_copy</def><sym>[</sym><def>last</def><sym>];</sym><br />
<def>    permu_copy</def><sym>[</sym><def>last</def><sym>] :=</sym> <def>last</def><sym>;</sym><br />
<def>    last</def> <sym>:=</sym> <def>tmp</def><sym>;</sym><br />
<def></def>    <kwd>inc</kwd><def></def><sym>(</sym><def>countflips</def><sym>);</sym><br />
<def></def>  <kwa>until</kwa> <def>last</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>function</kwa> <def>NextPermutation</def><sym>:</sym> <def></def><kwb>boolean</kwb><def></def><sym>;</sym><br />
<def></def><kwa>var</kwa><br />
<def>  tmp</def><sym>:</sym> <def></def><kwb>LongInt</kwb><def></def><sym>;</sym><br />
<def>  i</def> <sym>:</sym> <def></def><kwb>longint</kwb><def></def><sym>;</sym><br />
<def></def><kwa>begin</kwa><br />
<def>  NextPermutation</def> <sym>:=</sym> <def></def><kwb>true</kwb><def></def><sym>;</sym><br />
<def></def>  <kwa>repeat</kwa><br />
<def></def>    <kwa>if</kwa> <def>r</def> <sym>=</sym> <def>n</def> <kwa>then</kwa><br />
<def></def>    <kwa>begin</kwa><br />
<def>      NextPermutation</def> <sym>:=</sym> <def></def><kwb>false</kwb><def></def><sym>;</sym><br />
<def>      break</def><sym>;</sym><br />
<def></def>    <kwa>end</kwa><def></def><sym>;</sym><br />
<def>    tmp</def> <sym>:=</sym> <def>permu</def><sym>[</sym><def></def><num>0</num><def></def><sym>];</sym><br />
<def></def>    <kwa>for</kwa> <def>i</def> <sym>:=</sym> <def></def><num>1</num> <def></def><kwa>to</kwa> <def>r</def> <kwa>do</kwa><br />
<def>      permu</def><sym>[</sym><def>i</def><sym>-</sym><def></def><num>1</num><def></def><sym>] :=</sym> <def>permu</def><sym>[</sym><def>i</def><sym>];</sym><br />
<def>    permu</def><sym>[</sym><def>r</def><sym>] :=</sym> <def>tmp</def><sym>;</sym><br />
<def></def><br />
    <kwd>dec</kwd><def></def><sym>(</sym><def>count</def><sym>[</sym><def>r</def><sym>]);</sym><br />
<def></def>    <kwa>if</kwa> <def>count</def><sym>[</sym><def>r</def><sym>] &gt;</sym> <def></def><num>0</num> <def></def><kwa>then</kwa><br />
<def>      break</def><sym>;</sym><br />
<def></def>    <kwd>inc</kwd><def></def><sym>(</sym><def>r</def><sym>);</sym><br />
<def></def>  <kwa>until</kwa> <def></def><kwb>false</kwb><def></def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>function</kwa> <def>fannkuch</def><sym>:</sym> <def></def><kwb>longint</kwb><def></def><sym>;</sym><br />
<def></def><kwa>var</kwa><br />
<def>  print30</def><sym>,</sym> <def>m</def><sym>,</sym> <def>i</def><sym>,</sym> <def>flips</def><sym>:</sym> <def></def><kwb>longint</kwb><def></def><sym>;</sym><br />
<def></def><kwa>begin</kwa><br />
<def>  print30</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>  fannkuch</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>  m</def> <sym>:=</sym> <def>n</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def><br />
  <slc>// Initial permutation.</slc><br />
<def></def>  <kwa>for</kwa> <def>i</def> <sym>:=</sym> <def></def><num>0</num> <def></def><kwa>to</kwa> <def>m</def> <kwa>do</kwa>   <def>permu</def><sym>[</sym><def>i</def><sym>] :=</sym> <def>i</def><sym>;</sym><br />
<def><br />
  r</def> <sym>:=</sym> <def>n</def><sym>;</sym><br />
<def></def>  <kwa>repeat</kwa><br />
<def></def>    <kwa>if</kwa> <def>print30</def> <sym>&lt;</sym> <def></def><num>30</num> <def></def><kwa>then</kwa><br />
<def></def>    <kwa>begin</kwa><br />
<def></def>      <kwa>for</kwa> <def>i</def> <sym>:=</sym> <def></def><num>0</num> <def></def><kwa>to</kwa> <def>m</def> <kwa>do</kwa><br />
<def></def>        <kwd>write</kwd><def></def><sym>(</sym><def>permu</def><sym>[</sym><def>i</def><sym>] +</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def>      writeln</def><sym>;</sym><br />
<def></def>      <kwd>inc</kwd><def></def><sym>(</sym><def>print30</def><sym>);</sym><br />
<def></def>    <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>    <kwa>while</kwa> <def>r</def> <sym>&lt;&gt;</sym> <def></def><num>1</num> <def></def><kwa>do</kwa><br />
<def></def>    <kwa>begin</kwa><br />
<def>      count</def><sym>[</sym><def>r</def><sym>-</sym><def></def><num>1</num><def></def><sym>] :=</sym> <def>r</def><sym>;</sym><br />
<def></def>      <kwd>dec</kwd><def></def><sym>(</sym><def>r</def><sym>);</sym><br />
<def></def>    <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>    <kwa>if</kwa> <def></def><sym>(</sym><def>permu</def><sym>[</sym><def></def><num>0</num><def></def><sym>]&lt;&gt;</sym><def></def><num>0</num><def></def><sym>)</sym> <def></def><kwa>and</kwa> <def></def><sym>(</sym><def>permu</def><sym>[</sym><def>m</def><sym>]&lt;&gt;</sym><def>m</def><sym>)</sym> <def></def><kwa>then</kwa><br />
<def></def>    <kwa>begin</kwa><br />
<def></def>      <kwd>move</kwd><def></def><sym>(</sym><def>permu</def><sym>[</sym><def></def><num>0</num><def></def><sym>],</sym> <def>permu_copy</def><sym>[</sym><def></def><num>0</num><def></def><sym>],</sym> <def></def><kwd>sizeof</kwd><def></def><sym>(</sym><def></def><kwb>longint</kwb><def></def><sym>)*</sym><def>n</def><sym>);</sym><br />
<def>      flips</def> <sym>:=</sym> <def>countflips</def><sym>;</sym><br />
<def></def>      <kwa>if</kwa> <def>flips</def> <sym>&gt;</sym> <def>fannkuch</def> <kwa>then</kwa><br />
<def>        fannkuch</def> <sym>:=</sym> <def>flips</def><sym>;</sym><br />
<def></def>    <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>  <kwa>until not</kwa> <def>NextPermutation</def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def>  n</def> <sym>:=</sym> <def></def><num>7</num><def></def><sym>;</sym><br />
<def></def>  <kwa>if</kwa> <def></def><kwd>paramCount</kwd><def></def><sym>() =</sym> <def></def><num>1</num> <def></def><kwa>then</kwa><br />
<def></def>    <kwd>Val</kwd><def></def><sym>(</sym><def></def><kwd>ParamStr</kwd><def></def><sym>(</sym><def></def><num>1</num><def></def><sym>),</sym> <def>n</def><sym>);</sym><br />
<def>  answer</def> <sym>:=</sym> <def>fannkuch</def><sym>;</sym><br />
<def></def>  <kwd>writeln</kwd><def></def><sym>(</sym><def></def><str>'Pfannkuchen('</str><def></def><sym>,</sym> <def>n</def><sym>,</sym> <def></def><str>') = '</str><def></def><sym>,</sym> <def>answer</def><sym>);</sym><br />
<def></def><kwa>end</kwa><def></def><sym>.</sym><def></def><br />
</source>
