<source>
<def></def><com>/* The Computer Language Shootout</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com>   contributed by Isaac Gouy</com><br />
<com>*/</com><def></def><br />
<br />
<kwa>import</kwa> <def>java</def><sym>.</sym><def>io</def><sym>.</sym><def></def><kwc>InputStreamReader</kwc><def></def><sym>,</sym> <def>java</def><sym>.</sym><def>util</def><sym>.</sym><def>regex</def><sym>.</sym><def>_</def><br />
<br />
<kwa>object</kwa> <def>regexdna</def> <sym>{</sym><br />
<def></def>   <kwa>def</kwa> <def>main</def><sym>(</sym><def>args</def><sym>:</sym> <def></def><kwc>Array</kwc><def></def><sym>[</sym><def></def><kwc>String</kwc><def></def><sym>]) = {</sym><br />
<def></def><br />
      <kwa>var</kwa> <def>sequence</def> <sym>=</sym> <def>readFully</def><sym>()</sym><br />
<def></def>      <kwa>val</kwa> <def>initialLength</def> <sym>=</sym> <def>sequence</def><sym>.</sym><def>length</def><br />
<br />
      <slc>// remove FASTA sequence descriptions and new-lines</slc><br />
<def></def>      <kwa>var</kwa> <def>m</def> <sym>=</sym> <def></def><kwc>Pattern</kwc><def></def><sym>.</sym><def>compile</def><sym>(</sym><def></def><str>&quot;&gt;.*</str><esc>\n</esc><str>|</str><esc>\n</esc><str>&quot;</str><def></def><sym>).</sym><def>matcher</def><sym>(</sym><def>sequence</def><sym>)</sym><br />
<def>      sequence</def> <sym>=</sym> <def>m</def><sym>.</sym><def>replaceAll</def><sym>(</sym><def></def><str>&quot;&quot;</str><def></def><sym>)</sym><br />
<def></def>      <kwa>val</kwa> <def>codeLength</def> <sym>=</sym> <def>sequence</def><sym>.</sym><def>length</def><br />
<br />
      <slc>// regex match</slc><br />
<def></def>      <kwa>val</kwa> <def>variants</def> <sym>=</sym> <def></def><kwc>Array</kwc> <def></def><sym>(</sym><br />
<def></def>         <str>&quot;agggtaaa|tttaccct&quot;</str><def></def><br />
         <sym>,</sym><def></def><str>&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</str><def></def><br />
         <sym>,</sym><def></def><str>&quot;a[act]ggtaaa|tttacc[agt]t&quot;</str><def></def><br />
         <sym>,</sym><def></def><str>&quot;ag[act]gtaaa|tttac[agt]ct&quot;</str><def></def><br />
         <sym>,</sym><def></def><str>&quot;agg[act]taaa|ttta[agt]cct&quot;</str><def></def><br />
         <sym>,</sym><def></def><str>&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</str><def></def><br />
         <sym>,</sym><def></def><str>&quot;agggt[cgt]aa|tt[acg]accct&quot;</str><def></def><br />
         <sym>,</sym><def></def><str>&quot;agggta[cgt]a|t[acg]taccct&quot;</str><def></def><br />
         <sym>,</sym><def></def><str>&quot;agggtaa[cgt]|[acg]ttaccct&quot;</str><def></def><br />
         <sym>)</sym><br />
<def></def><br />
      <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwa>val</kwa> <def>v</def> <sym>&lt;-</sym> <def>variants</def><sym>){</sym><br />
<def></def>         <kwa>var</kwa> <def>count</def> <sym>=</sym> <def></def><num>0</num><br />
<def>         m</def> <sym>=</sym> <def></def><kwc>Pattern</kwc><def></def><sym>.</sym><def>compile</def><sym>(</sym><def>v</def><sym>).</sym><def>matcher</def><sym>(</sym><def>sequence</def><sym>)</sym><br />
<def></def>         <kwa>while</kwa> <def></def><sym>(</sym><def>m</def><sym>.</sym><def>find</def><sym>())</sym> <def>count</def> <sym>=</sym> <def>count</def> <sym>+</sym> <def></def><num>1</num><br />
<def>         Console</def><sym>.</sym><def>println</def><sym>(</sym><def>v</def> <sym>+</sym> <def></def><str>&quot; &quot;</str><def></def> <sym>+</sym> <def>count</def><sym>)</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><br />
      <slc>// regex substitution</slc><br />
<def></def>      <kwa>val</kwa> <def>codes</def> <sym>=</sym> <def></def><kwc>Array</kwc> <def></def><sym>(</sym><br />
<def>             Pair</def><sym>(</sym><def></def><str>&quot;B&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(c|g|t)&quot;</str><def></def><sym>)</sym><br />
<def></def>            <sym>,</sym><def>Pair</def><sym>(</sym><def></def><str>&quot;D&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(a|g|t)&quot;</str><def></def><sym>)</sym><br />
<def></def>            <sym>,</sym><def>Pair</def><sym>(</sym><def></def><str>&quot;H&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(a|c|t)&quot;</str><def></def><sym>)</sym><br />
<def></def>            <sym>,</sym><def>Pair</def><sym>(</sym><def></def><str>&quot;K&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(g|t)&quot;</str><def></def><sym>)</sym><br />
<def></def>            <sym>,</sym><def>Pair</def><sym>(</sym><def></def><str>&quot;M&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(a|c)&quot;</str><def></def><sym>)</sym><br />
<def></def>            <sym>,</sym><def>Pair</def><sym>(</sym><def></def><str>&quot;N&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(a|c|g|t)&quot;</str><def></def><sym>)</sym><br />
<def></def>            <sym>,</sym><def>Pair</def><sym>(</sym><def></def><str>&quot;R&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(a|g)&quot;</str><def></def><sym>)</sym><br />
<def></def>            <sym>,</sym><def>Pair</def><sym>(</sym><def></def><str>&quot;S&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(c|g)&quot;</str><def></def><sym>)</sym><br />
<def></def>            <sym>,</sym><def>Pair</def><sym>(</sym><def></def><str>&quot;V&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(a|c|g)&quot;</str><def></def><sym>)</sym><br />
<def></def>            <sym>,</sym><def>Pair</def><sym>(</sym><def></def><str>&quot;W&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(a|t)&quot;</str><def></def><sym>)</sym><br />
<def></def>            <sym>,</sym><def>Pair</def><sym>(</sym><def></def><str>&quot;Y&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(c|t)&quot;</str><def></def><sym>)</sym><br />
<def></def>         <sym>)</sym><br />
<def></def><br />
      <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwa>val</kwa> <def>iub</def> <sym>&lt;-</sym> <def>codes</def><sym>){</sym><br />
<def>         iub match</def> <sym>{</sym><br />
<def></def>            <kwa>case</kwa> <def>Pair</def><sym>(</sym><def>code</def><sym>,</sym><def>alternative</def><sym>) =&gt;</sym><br />
<def>               sequence</def> <sym>=</sym> <def></def><kwc>Pattern</kwc><def></def><sym>.</sym><def>compile</def><sym>(</sym><def>code</def><sym>).</sym><def>matcher</def><sym>(</sym><def>sequence</def><sym>).</sym><def>replaceAll</def><sym>(</sym><def>alternative</def><sym>)</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>      <sym>}</sym><br />
<def><br />
      Console</def><sym>.</sym><def>println</def><sym>(</sym><def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def> <sym>+</sym> <def>initialLength</def> <sym>+</sym> <def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def> <sym>+</sym> <def>codeLength</def> <sym>+</sym> <def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def> <sym>+</sym> <def>sequence</def><sym>.</sym><def>length</def><sym>)</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
<br />
   <kwa>def</kwa> <def>readFully</def><sym>() = {</sym><br />
<def></def>      <kwa>val</kwa> <def>blockSize</def> <sym>=</sym> <def></def><num>10240</num><br />
<def></def>      <kwa>val</kwa> <def>block</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwc>Array</kwc><def></def><sym>[</sym><def></def><kwb>char</kwb><def></def><sym>](</sym><def>blockSize</def><sym>)</sym><br />
<def></def>      <kwa>val</kwa> <def>buffer</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwc>StringBuffer</kwc><def></def><sym>(</sym><def>blockSize</def><sym>)</sym><br />
<def></def>      <kwa>val</kwa> <def>r</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwc>InputStreamReader</kwc><def></def><sym>(</sym><def></def><kwc>System</kwc><def></def><sym>.</sym><def>in</def><sym>)</sym><br />
<def></def><br />
      <kwa>var</kwa> <def>charsRead</def> <sym>=</sym> <def>r</def><sym>.</sym><def>read</def><sym>(</sym><def>block</def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>blockSize</def><sym>)</sym><br />
<def></def>      <kwa>while</kwa> <def></def><sym>(</sym><def>charsRead</def> <sym>&gt; -</sym><def></def><num>1</num><def></def><sym>){</sym><br />
<def>         buffer</def><sym>.</sym><def>append</def><sym>(</sym><def>block</def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def>charsRead</def><sym>)</sym><br />
<def>         charsRead</def> <sym>=</sym> <def>r</def><sym>.</sym><def>read</def><sym>(</sym><def>block</def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>blockSize</def><sym>)</sym><br />
<def></def>      <sym>}</sym><br />
<def><br />
      r</def><sym>.</sym><def>close<br />
      buffer</def><sym>.</sym><def>toString</def><br />
   <sym>}</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
