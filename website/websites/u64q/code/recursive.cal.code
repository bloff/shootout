<source>
<def></def><com>/**</com><br />
<com> * The Computer Language Benchmarks Game</com><br />
<com> * Based on the CAL Open Quark version</com><br />
<com> * Contributed by Magnus Byne.</com><br />
<com> */</com><def></def><br />
<kwa>module</kwa> <def>Recursive</def><sym>;</sym><br />
<def></def><br />
<kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Core</def><sym>.</sym><def>Prelude</def> <kwa>using</kwa><br />
<def></def>    <kwa>typeConstructor</kwa> <def></def><sym>=</sym> <def>Double</def><sym>,</sym> <def>Int</def><sym>,</sym> <def>String</def><sym>;</sym><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>eager</def><sym>,</sym> <def>fromInt</def><sym>,</sym> <def>seq</def><sym>,</sym> <def>stringToInt</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Core</def><sym>.</sym><def>Debug</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>show</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Collections</def><sym>.</sym><def>List</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>head</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Utilities</def><sym>.</sym><def>MessageFormat</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>formatWithPattern</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Utilities</def><sym>.</sym><def>Locale</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>invariantLocale</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<kwa>import</kwa> <def>Cal</def><sym>.</sym><def>IO</def><sym>.</sym><def>Console</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>printLine</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def><br />
main</def> <sym>:: [</sym><def>String</def><sym>] -&gt; ();</sym><br />
<def></def><kwa>public</kwa> <def>main</def> <sym>!</sym><def>args</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa><br />
<def>        n</def> <sym>=</sym> <def>eager $ stringToInt</def> <sym>(</sym><def>head args</def><sym>);</sym><br />
<def>        m</def> <sym>=</sym> <def>n</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def>        f</def> <sym>=</sym> <def>n</def> <sym>+</sym> <def></def><num>27</num><def></def><sym>;</sym><br />
<def></def>    <kwa>in</kwa><br />
<def>        printLine</def> <sym>(</sym><def></def><str>&quot;Ack(3,&quot;</str><def></def> <sym>++</sym> <def>show n</def> <sym>++</sym> <def></def><str>&quot;): &quot;</str><def></def> <sym>++</sym> <def>show</def> <sym>(</sym><def>ack</def> <num>3</num> <def>n</def><sym>))</sym><br />
<def></def>        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>        printLine</def><br />
            <sym>(</sym><def>formatWithPattern</def><br />
                <str>&quot;Fib({0,number,#.0}): {1,number,#.0}&quot;</str><def><br />
                invariantLocale</def><br />
                <sym>(</sym><def>f</def><sym>,</sym> <def>fibDouble</def> <sym>(</sym><def>fromInt f</def><sym>))</sym><br />
<def></def>            <sym>)</sym><br />
<def></def>        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>        printLine</def><br />
            <sym>(</sym><def>formatWithPattern</def><br />
                <str>&quot;Tak({0},{1},{2}): {3}&quot;</str><def><br />
                invariantLocale</def><br />
                <sym>(</sym><def>m</def> <sym>*</sym> <def></def><num>3</num><def></def><sym>,</sym> <def>m</def> <sym>*</sym> <def></def><num>2</num><def></def><sym>,</sym> <def>m</def><sym>,</sym> <def>tak</def> <sym>(</sym><def>m</def> <sym>*</sym> <def></def><num>3</num><def></def><sym>) (</sym><def>m</def> <sym>*</sym> <def></def><num>2</num><def></def><sym>)</sym> <def>m</def><sym>)</sym><br />
<def></def>            <sym>)</sym><br />
<def></def>        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>        printLine</def> <sym>(</sym><def></def><str>&quot;Fib(3): &quot;</str><def></def> <sym>++</sym> <def>show</def> <sym>(</sym><def>fib</def> <num>3</num><def></def><sym>))</sym><br />
<def></def>        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>        printLine</def><br />
            <sym>(</sym><def></def><str>&quot;Tak(3.0,2.0,1.0): &quot;</str><def></def> <sym>++</sym> <def>show</def> <sym>(</sym><def>takDouble</def> <num>3.0 2.0 1.0</num><def></def><sym>))</sym><br />
<def></def>    <sym>;</sym><br />
<def><br />
fib</def> <sym>::</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def><sym>;</sym><br />
<def>fib</def> <sym>!</sym><def>n</def> <sym>=</sym><br />
<def></def>    <kwa>if</kwa> <def>n</def> <sym>&lt;</sym> <def></def><num>2</num> <def></def><kwa>then</kwa><br />
<def></def>        <num>1</num><br />
<def></def>    <kwa>else</kwa><br />
<def>        fib</def> <sym>(</sym><def>n</def> <sym>-</sym> <def></def><num>2</num><def></def><sym>) +</sym> <def>fib</def> <sym>(</sym><def>n</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>    <sym>;</sym><br />
<def><br />
fibDouble</def> <sym>::</sym> <def>Double</def> <sym>-&gt;</sym> <def>Double</def><sym>;</sym><br />
<def>fibDouble</def> <sym>!</sym><def>n</def> <sym>=</sym><br />
<def></def>    <kwa>if</kwa> <def>n</def> <sym>&lt;</sym> <def></def><num>2</num> <def></def><kwa>then</kwa><br />
<def></def>        <num>1</num><br />
<def></def>    <kwa>else</kwa><br />
<def>        fibDouble</def> <sym>(</sym><def>n</def> <sym>-</sym> <def></def><num>2</num><def></def><sym>) +</sym> <def>fibDouble</def> <sym>(</sym><def>n</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>    <sym>;</sym><br />
<def><br />
ack</def> <sym>::</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def><sym>;</sym><br />
<def>ack</def> <sym>!</sym><def>x</def> <sym>!</sym><def>y</def> <sym>=</sym><br />
<def></def>    <kwa>if</kwa> <def>x</def> <sym>==</sym> <def></def><num>0</num> <def></def><kwa>then</kwa><br />
<def>        y</def> <sym>+</sym> <def></def><num>1</num><br />
<def></def>    <kwa>else if</kwa> <def>y</def> <sym>==</sym> <def></def><num>0</num> <def></def><kwa>then</kwa><br />
<def>        ack</def> <sym>(</sym><def>x</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>)</sym> <def></def><num>1</num><br />
<def></def>    <kwa>else</kwa><br />
<def>        ack</def> <sym>(</sym><def>x</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>) (</sym><def>eager $ ack x</def> <sym>(</sym><def>y</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>))</sym><br />
<def></def>    <sym>;</sym><br />
<def><br />
tak</def> <sym>::</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def><sym>;</sym><br />
<def>tak</def> <sym>!</sym><def>x</def> <sym>!</sym><def>y</def> <sym>!</sym><def>z</def> <sym>=</sym><br />
<def></def>    <kwa>if</kwa> <def>y</def> <sym>&gt;=</sym> <def>x</def> <kwa>then</kwa><br />
<def>        z</def><br />
    <kwa>else</kwa><br />
<def>        tak</def><br />
            <sym>(</sym><def>eager $ tak</def> <sym>(</sym><def>x</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>)</sym> <def>y z</def><sym>)</sym><br />
<def></def>            <sym>(</sym><def>eager $ tak</def> <sym>(</sym><def>y</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>)</sym> <def>z x</def><sym>)</sym><br />
<def></def>            <sym>(</sym><def>eager $ tak</def> <sym>(</sym><def>z</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>)</sym> <def>x y</def><sym>)</sym><br />
<def></def>    <sym>;</sym><br />
<def><br />
takDouble</def> <sym>::</sym> <def>Double</def> <sym>-&gt;</sym> <def>Double</def> <sym>-&gt;</sym> <def>Double</def> <sym>-&gt;</sym> <def>Double</def><sym>;</sym><br />
<def>takDouble</def> <sym>!</sym><def>x</def> <sym>!</sym><def>y</def> <sym>!</sym><def>z</def> <sym>=</sym><br />
<def></def>    <kwa>if</kwa> <def>y</def> <sym>&gt;=</sym> <def>x</def> <kwa>then</kwa><br />
<def>        z</def><br />
    <kwa>else</kwa><br />
<def>        takDouble</def><br />
            <sym>(</sym><def>eager $ takDouble</def> <sym>(</sym><def>x</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>)</sym> <def>y z</def><sym>)</sym><br />
<def></def>            <sym>(</sym><def>eager $ takDouble</def> <sym>(</sym><def>y</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>)</sym> <def>z x</def><sym>)</sym><br />
<def></def>            <sym>(</sym><def>eager $ takDouble</def> <sym>(</sym><def>z</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>)</sym> <def>x y</def><sym>)</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
</source>
