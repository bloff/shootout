<source>
<def></def><com>/*</com><br />
<com>** The Great Computer Language Shootout</com><br />
<com>** http://shootout.alioth.debian.org/</com><br />
<com>** contributed by Mike Pall</com><br />
<com>**</com><br />
<com>** compile with:</com><br />
<com>**   gcc -O3 -fomit-frame-pointer -ffast-math -o partialsums partialsums.c -lm</com><br />
<com>**   Adding -march=&lt;yourcpu&gt; may help, too.</com><br />
<com>**   On a P4/K8 or later try adding: --march=&lt;yourcpu&gt; -mfpmath=sse -msse2</com><br />
<com>*/</com><def></def><br />
<br />
<dir>#include &lt;stdio.h&gt;</dir><br />
<def></def><dir>#include &lt;stdlib.h&gt;</dir><br />
<def></def><dir>#include &lt;math.h&gt;</dir><br />
<def></def><br />
<kwb>int</kwb> <def></def><kwd>main</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>argc</def><sym>,</sym> <def></def><kwb>char</kwb> <def></def><sym>**</sym><def>argv</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>  <kwb>int</kwb> <def>k</def><sym>,</sym> <def>n</def> <sym>=</sym> <def></def><kwd>atoi</kwd><def></def><sym>(</sym><def>argv</def><sym>[</sym><def></def><num>1</num><def></def><sym>]);</sym><br />
<def></def>  <kwb>double</kwb> <def>sum</def><sym>;</sym><br />
<def></def><br />
<com>/*</com><br />
<com>** Yes, I tried using a double as a primary or secondary loop variable.</com><br />
<com>** But the x86 ABI requires a cleared x87 FPU stack before every call</com><br />
<com>** (e.g. to sin()) which nullifies any performance gains.</com><br />
<com>**</com><br />
<com>** Combining all loops does not pay off because the x87 FPU has to shuffle</com><br />
<com>** stack slots and/or runs out of registers. This may not be entirely true</com><br />
<com>** for SSE2 with fully inlined FPU code (-ffast-math required). Dito for</com><br />
<com>** other CPUs with a register-based FPU and a sane FP ABI.</com><br />
<com>**</com><br />
<com>** Auto vectorization may be a bit easier with separate loops, too.</com><br />
<com>*/</com><def></def><br />
<dir>#define kd ((double)k)</dir><br />
<def><br />
  sum</def> <sym>=</sym> <def></def><num>0.0</num><def></def><sym>;</sym><br />
<def></def>  <kwa>for</kwa> <def></def><sym>(</sym><def>k</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>k</def> <sym>&lt;=</sym> <def>n</def><sym>;</sym> <def>k</def><sym>++) {</sym>  <def></def><com>/* pow(2.0/3.0, kd) inlined */</com><def></def><br />
    <kwb>double</kwb> <def>x</def> <sym>=</sym> <def></def><num>1.0</num><def></def><sym>,</sym> <def>q</def> <sym>=</sym> <def></def><num>2.0</num><def></def><sym>/</sym><def></def><num>3.0</num><def></def><sym>;</sym><br />
<def></def>    <kwb>int</kwb> <def>j</def> <sym>=</sym> <def>k</def><sym>;</sym><br />
<def></def>    <kwa>for</kwa> <def></def><sym>(;;) {</sym> <def></def><kwa>if</kwa> <def></def><sym>(</sym><def>j</def> <sym>&amp;</sym> <def></def><num>1</num><def></def><sym>)</sym> <def>x</def> <sym>*=</sym> <def>q</def><sym>;</sym> <def></def><kwa>if</kwa> <def></def><sym>((</sym><def>j</def> <sym>&gt;&gt;=</sym> <def></def><num>1</num><def></def><sym>) ==</sym> <def></def><num>0</num><def></def><sym>)</sym> <def></def><kwa>break</kwa><def></def><sym>;</sym> <def>q</def> <sym>=</sym> <def>q</def><sym>*</sym><def>q</def><sym>; }</sym><br />
<def>    sum</def> <sym>+=</sym> <def>x</def><sym>;</sym><br />
<def></def>  <sym>}</sym><br />
<def></def>  <kwd>printf</kwd><def></def><sym>(</sym><def></def><str>&quot;%.9f</str><esc>\t</esc><str>(2/3)^k</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def>sum</def><sym>);</sym><br />
<def><br />
  sum</def> <sym>=</sym> <def></def><num>0.0</num><def></def><sym>;</sym><br />
<def></def>  <kwa>for</kwa> <def></def><sym>(</sym><def>k</def> <sym>=</sym> <def></def><num>1</num> <def></def><sym>;</sym> <def>k</def> <sym>&lt;=</sym> <def>n</def><sym>;</sym> <def>k</def><sym>++)</sym> <def>sum</def> <sym>+=</sym> <def></def><num>1</num><def></def><sym>/</sym><def></def><kwd>sqrt</kwd><def></def><sym>(</sym><def>kd</def><sym>);</sym>  <def></def><com>/* aka pow(kd, -0.5) */</com><def></def><br />
  <kwd>printf</kwd><def></def><sym>(</sym><def></def><str>&quot;%.9f</str><esc>\t</esc><str>k^-0.5</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def>sum</def><sym>);</sym><br />
<def><br />
  sum</def> <sym>=</sym> <def></def><num>0.0</num><def></def><sym>;</sym><br />
<def></def>  <kwa>for</kwa> <def></def><sym>(</sym><def>k</def> <sym>=</sym> <def></def><num>1</num><def></def><sym>;</sym> <def>k</def> <sym>&lt;=</sym> <def>n</def><sym>;</sym> <def>k</def><sym>++)</sym> <def>sum</def> <sym>+=</sym> <def></def><num>1.0</num><def></def><sym>/(</sym><def>kd</def><sym>*(</sym><def>kd</def><sym>+</sym><def></def><num>1.0</num><def></def><sym>));</sym><br />
<def></def>  <kwd>printf</kwd><def></def><sym>(</sym><def></def><str>&quot;%.9f</str><esc>\t</esc><str>1/k(k+1)</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def>sum</def><sym>);</sym><br />
<def><br />
  sum</def> <sym>=</sym> <def></def><num>0.0</num><def></def><sym>;</sym><br />
<def></def>  <kwa>for</kwa> <def></def><sym>(</sym><def>k</def> <sym>=</sym> <def></def><num>1</num><def></def><sym>;</sym> <def>k</def> <sym>&lt;=</sym> <def>n</def><sym>;</sym> <def>k</def><sym>++) {</sym><br />
<def></def>    <kwb>double</kwb> <def>sk</def> <sym>=</sym> <def></def><kwd>sin</kwd><def></def><sym>(</sym><def>kd</def><sym>);</sym><br />
<def>    sum</def> <sym>+=</sym> <def></def><num>1.0</num><def></def><sym>/(</sym><def>kd</def><sym>*</sym><def>kd</def><sym>*</sym><def>kd</def><sym>*</sym><def>sk</def><sym>*</sym><def>sk</def><sym>);</sym><br />
<def></def>  <sym>}</sym><br />
<def></def>  <kwd>printf</kwd><def></def><sym>(</sym><def></def><str>&quot;%.9f</str><esc>\t</esc><str>Flint Hills</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def>sum</def><sym>);</sym><br />
<def><br />
  sum</def> <sym>=</sym> <def></def><num>0.0</num><def></def><sym>;</sym><br />
<def></def>  <kwa>for</kwa> <def></def><sym>(</sym><def>k</def> <sym>=</sym> <def></def><num>1</num><def></def><sym>;</sym> <def>k</def> <sym>&lt;=</sym> <def>n</def><sym>;</sym> <def>k</def><sym>++) {</sym><br />
<def></def>    <kwb>double</kwb> <def>ck</def> <sym>=</sym> <def></def><kwd>cos</kwd><def></def><sym>(</sym><def>kd</def><sym>);</sym><br />
<def>    sum</def> <sym>+=</sym> <def></def><num>1.0</num><def></def><sym>/((</sym><def>kd</def><sym>*</sym><def>kd</def><sym>)*</sym><def>kd</def><sym>*</sym><def>ck</def><sym>*</sym><def>ck</def><sym>);</sym><br />
<def></def>  <sym>}</sym><br />
<def></def>  <kwd>printf</kwd><def></def><sym>(</sym><def></def><str>&quot;%.9f</str><esc>\t</esc><str>Cookson Hills</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def>sum</def><sym>);</sym><br />
<def><br />
  sum</def> <sym>=</sym> <def></def><num>0.0</num><def></def><sym>;</sym><br />
<def></def>  <kwa>for</kwa> <def></def><sym>(</sym><def>k</def> <sym>=</sym> <def></def><num>1</num><def></def><sym>;</sym> <def>k</def> <sym>&lt;=</sym> <def>n</def><sym>;</sym> <def>k</def><sym>++)</sym> <def>sum</def> <sym>+=</sym> <def></def><num>1.0</num><def></def><sym>/</sym><def>kd</def><sym>;</sym><br />
<def></def>  <kwd>printf</kwd><def></def><sym>(</sym><def></def><str>&quot;%.9f</str><esc>\t</esc><str>Harmonic</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def>sum</def><sym>);</sym><br />
<def><br />
  sum</def> <sym>=</sym> <def></def><num>0.0</num><def></def><sym>;</sym><br />
<def></def>  <kwa>for</kwa> <def></def><sym>(</sym><def>k</def> <sym>=</sym> <def></def><num>1</num><def></def><sym>;</sym> <def>k</def> <sym>&lt;=</sym> <def>n</def><sym>;</sym> <def>k</def><sym>++)</sym> <def>sum</def> <sym>+=</sym> <def></def><num>1.0</num><def></def><sym>/(</sym><def>kd</def><sym>*</sym><def>kd</def><sym>);</sym><br />
<def></def>  <kwd>printf</kwd><def></def><sym>(</sym><def></def><str>&quot;%.9f</str><esc>\t</esc><str>Riemann Zeta</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def>sum</def><sym>);</sym><br />
<def><br />
  sum</def> <sym>=</sym> <def></def><num>0.0</num><def></def><sym>;</sym><br />
<def></def>  <kwa>for</kwa> <def></def><sym>(</sym><def>k</def> <sym>=</sym> <def></def><num>1</num><def></def><sym>;</sym> <def>k</def> <sym>&lt;=</sym> <def>n</def><sym>-</sym><def></def><num>1</num><def></def><sym>;</sym> <def>k</def> <sym>+=</sym> <def></def><num>2</num><def></def><sym>)</sym> <def>sum</def> <sym>+=</sym> <def></def><num>1.0</num><def></def><sym>/</sym><def>kd</def><sym>;</sym><br />
<def></def>  <kwa>for</kwa> <def></def><sym>(</sym><def>k</def> <sym>=</sym> <def></def><num>2</num><def></def><sym>;</sym> <def>k</def> <sym>&lt;=</sym> <def>n</def><sym>;</sym> <def>k</def> <sym>+=</sym> <def></def><num>2</num><def></def><sym>)</sym> <def>sum</def> <sym>-=</sym> <def></def><num>1.0</num><def></def><sym>/</sym><def>kd</def><sym>;</sym><br />
<def></def>  <kwd>printf</kwd><def></def><sym>(</sym><def></def><str>&quot;%.9f</str><esc>\t</esc><str>Alternating Harmonic</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def>sum</def><sym>);</sym><br />
<def><br />
  sum</def> <sym>=</sym> <def></def><num>0.0</num><def></def><sym>;</sym><br />
<def></def>  <kwa>for</kwa> <def></def><sym>(</sym><def>k</def> <sym>=</sym> <def></def><num>1</num><def></def><sym>;</sym> <def>k</def> <sym>&lt;=</sym> <def></def><num>2</num><def></def><sym>*</sym><def>n</def><sym>-</sym><def></def><num>1</num><def></def><sym>;</sym> <def>k</def> <sym>+=</sym> <def></def><num>4</num><def></def><sym>)</sym> <def>sum</def> <sym>+=</sym> <def></def><num>1.0</num><def></def><sym>/</sym><def>kd</def><sym>;</sym><br />
<def></def>  <kwa>for</kwa> <def></def><sym>(</sym><def>k</def> <sym>=</sym> <def></def><num>3</num><def></def><sym>;</sym> <def>k</def> <sym>&lt;=</sym> <def></def><num>2</num><def></def><sym>*</sym><def>n</def><sym>;</sym> <def>k</def> <sym>+=</sym> <def></def><num>4</num><def></def><sym>)</sym> <def>sum</def> <sym>-=</sym> <def></def><num>1.0</num><def></def><sym>/</sym><def>kd</def><sym>;</sym><br />
<def></def>  <kwd>printf</kwd><def></def><sym>(</sym><def></def><str>&quot;%.9f</str><esc>\t</esc><str>Gregory</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def>sum</def><sym>);</sym><br />
<def></def><br />
  <kwa>return</kwa> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
</source>
