<source>
<def></def><com>(* The Computer Language Benchmarks Game</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com>   contributed by Tomasz bla Fortuna *)</com><def></def><br />
<br />
<kwa>let</kwa> <def>size</def><sym>,</sym> <def>n</def> <sym>=</sym> <def></def><num>503</num><def></def><sym>,</sym> <def>int_of_string</def> <kwc>Sys</kwc><def></def><sym>.</sym><def>argv</def><sym>.(</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def></def><kwa>let</kwa> <def>mutex</def> <sym>=</sym><br />
<def></def>  <kwa>let</kwa> <def>f _</def> <sym>=</sym> <def></def><kwa>let</kwa> <def>m</def> <sym>=</sym> <def></def><kwc>Mutex</kwc><def></def><sym>.</sym><def>create</def> <sym>()</sym> <def></def><kwa>in</kwa> <def></def><kwc>Mutex</kwc><def></def><sym>.</sym><def>lock m</def><sym>;</sym> <def>m</def> <kwa>in</kwa><br />
<def></def>  <kwc>Array</kwc><def></def><sym>.</sym><def>init size f</def><br />
<kwa>and</kwa> <def>data</def> <sym>=</sym> <def></def><kwc>Array</kwc><def></def><sym>.</sym><def>create size</def> <num>0</num><br />
<def></def><br />
<kwa>let</kwa> <def>run id idata odata</def> <sym>=</sym><br />
<def></def>  <kwa>let rec</kwa> <def>loop</def> <sym>() =</sym><br />
<def></def>    <kwc>Mutex</kwc><def></def><sym>.</sym><def>lock mutex</def><sym>.(</sym><def>idata</def><sym>);</sym><br />
<def></def>    <kwa>if</kwa> <def>data</def><sym>.(</sym><def>idata</def><sym>) =</sym> <def>n</def> <kwa>then</kwa> <def></def><sym>(</sym><br />
<def>      print_int id</def><sym>;</sym> <def>print_newline</def> <sym>();</sym> <def>exit</def> <num>0</num><def></def><sym>;</sym><br />
<def></def>    <sym>)</sym> <def></def><kwa>else</kwa> <def></def><sym>(</sym><br />
<def>      data</def><sym>.(</sym><def>odata</def><sym>) &lt;-</sym> <def>data</def><sym>.(</sym><def>idata</def><sym>) +</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>      <kwc>Mutex</kwc><def></def><sym>.</sym><def>unlock mutex</def><sym>.(</sym><def>odata</def><sym>);</sym><br />
<def>      loop</def> <sym>();</sym><br />
<def></def>    <sym>)</sym><br />
<def></def>  <kwa>in</kwa> <def></def><kwc>Thread</kwc><def></def><sym>.</sym><def>create loop</def> <sym>()</sym><br />
<def></def><br />
<kwa>let</kwa> <def>_</def> <sym>=</sym><br />
<def></def>  <kwa>let</kwa> <def>thread</def> <sym>=</sym><br />
<def></def>    <kwc>Array</kwc><def></def><sym>.</sym><def>init size</def><br />
      <sym>(</sym><def></def><kwa>fun</kwa> <def>i</def> <sym>-&gt;</sym> <def>run</def> <sym>(</sym><def>i</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>)</sym> <def>i</def> <sym>((</sym><def>i</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>)</sym> <def></def><kwa>mod</kwa> <def>size</def><sym>))</sym> <def></def><kwa>in</kwa><br />
<def></def>  <kwc>Mutex</kwc><def></def><sym>.</sym><def>unlock mutex</def><sym>.(</sym><def></def><num>0</num><def></def><sym>);</sym><br />
<def></def>  <kwc>Thread</kwc><def></def><sym>.</sym><def>join thread</def><sym>.(</sym><def></def><num>0</num><def></def><sym>)</sym><br />
<def></def><br />
<br />
<br />
</source>
