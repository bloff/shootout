<source>
<def></def><com>/*</com><br />
<com> * The Computer Language Shootout</com><br />
<com> * http://shootout.alioth.debian.org/</com><br />
<com> *</com><br />
<com> * contributed by Andrei Formiga</com><br />
<com> */</com><def></def><br />
<br />
<kwa>object</kwa> <def>fannkuch</def><br />
<sym>{</sym><br />
<def></def>  <kwa>def</kwa> <def>main</def><sym>(</sym><def>args</def><sym>:</sym> <def></def><kwc>Array</kwc><def></def><sym>[</sym><def></def><kwc>String</kwc><def></def><sym>]) = {</sym><br />
<def></def>    <kwa>val</kwa> <def>n</def> <sym>=</sym> <def></def><kwc>Integer</kwc><def></def><sym>.</sym><def>parseInt</def><sym>(</sym><def>args</def><sym>(</sym><def></def><num>0</num><def></def><sym>))</sym><br />
<def></def>    <kwa>var</kwa> <def>maxFlips</def> <sym>=</sym> <def></def><num>0</num><br />
<def></def>    <kwa>var</kwa> <def>permN</def> <sym>=</sym> <def></def><num>0</num><br />
<def></def>    <kwa>var</kwa> <def>k</def><sym>:</sym> <def></def><kwb>int</kwb> <def></def><sym>=</sym> <def></def><num>0</num><br />
<def></def>    <kwa>var</kwa> <def>temp</def><sym>:</sym> <def></def><kwb>int</kwb> <def></def><sym>=</sym> <def></def><num>0</num><br />
<def></def>    <kwa>var</kwa> <def>first</def><sym>:</sym> <def></def><kwb>int</kwb> <def></def><sym>=</sym> <def></def><num>0</num><br />
<def></def>    <kwa>var</kwa> <def>flips</def><sym>:</sym> <def></def><kwb>int</kwb> <def></def><sym>=</sym> <def></def><num>0</num><br />
<def></def>    <kwa>var</kwa> <def>perm0</def><sym>:</sym> <def></def><kwc>Array</kwc><def></def><sym>[</sym><def></def><kwb>int</kwb><def></def><sym>] =</sym> <def></def><kwa>new</kwa> <def></def><kwc>Array</kwc><def></def><sym>[</sym><def></def><kwb>int</kwb><def></def><sym>](</sym><def>n</def><sym>)</sym><br />
<def></def>    <kwa>var</kwa> <def>perm</def><sym>:</sym> <def></def><kwc>Array</kwc><def></def><sym>[</sym><def></def><kwb>int</kwb><def></def><sym>] =</sym> <def></def><kwa>new</kwa> <def></def><kwc>Array</kwc><def></def><sym>[</sym><def></def><kwb>int</kwb><def></def><sym>](</sym><def>n</def><sym>)</sym><br />
<def></def>    <kwa>var</kwa> <def>rot</def><sym>:</sym> <def></def><kwc>Array</kwc><def></def><sym>[</sym><def></def><kwb>int</kwb><def></def><sym>] =</sym> <def></def><kwa>new</kwa> <def></def><kwc>Array</kwc><def></def><sym>[</sym><def></def><kwb>int</kwb><def></def><sym>](</sym><def>n</def><sym>)</sym><br />
<def></def><br />
    <kwa>while</kwa> <def></def><sym>(</sym><def>k</def> <sym>&lt;</sym> <def>n</def><sym>) {</sym> <def>perm</def><sym>(</sym><def>k</def><sym>) =</sym> <def>k</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym> <def>rot</def><sym>(</sym><def>k</def><sym>) =</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>k</def> <sym>=</sym> <def>k</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>; }</sym><br />
<def></def>    <kwa>while</kwa> <def></def><sym>(</sym><def>rot</def><sym>(</sym><def>n</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>) &lt;</sym> <def>n</def><sym>) {</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>permN</def> <sym>&lt;</sym> <def></def><num>30</num><def></def><sym>) {</sym><br />
<def>	k</def> <sym>=</sym> <def></def><num>0</num><br />
<def></def>	<kwa>while</kwa> <def></def><sym>(</sym><def>k</def> <sym>&lt;</sym> <def>n</def><sym>) {</sym><br />
<def>	  Console</def><sym>.</sym><def>print</def><sym>(</sym><def>perm</def><sym>(</sym><def>k</def><sym>).</sym><def>toString</def><sym>())</sym><br />
<def>	  k</def> <sym>=</sym> <def>k</def> <sym>+</sym> <def></def><num>1</num><br />
<def></def>	<sym>}</sym><br />
<def>	Console</def><sym>.</sym><def>println<br />
	permN</def> <sym>=</sym> <def>permN</def> <sym>+</sym> <def></def><num>1</num><br />
<def></def>      <sym>}</sym><br />
<def><br />
      flips</def> <sym>=</sym> <def></def><num>0</num><br />
<def>      k</def> <sym>=</sym> <def></def><num>0</num><br />
<def></def>      <kwa>while</kwa> <def></def><sym>(</sym><def>k</def> <sym>&lt;</sym> <def>n</def><sym>) {</sym> <def>perm0</def><sym>(</sym><def>k</def><sym>) =</sym> <def>perm</def><sym>(</sym><def>k</def><sym>);</sym> <def>k</def> <sym>=</sym> <def>k</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>; }</sym><br />
<def>      first</def> <sym>=</sym> <def>perm0</def><sym>(</sym><def></def><num>0</num><def></def><sym>)</sym><br />
<def></def>      <kwa>while</kwa><def></def><sym>(</sym><def>first</def> <sym>!=</sym> <def></def><num>1</num><def></def><sym>) {</sym><br />
<def>	k</def> <sym>=</sym> <def></def><num>0</num><br />
<def></def>	<kwa>while</kwa> <def></def><sym>(</sym><def>k</def> <sym>&lt;</sym> <def>first</def> <sym>/</sym> <def></def><num>2</num><def></def><sym>) {</sym><br />
<def>	  temp</def> <sym>=</sym> <def>perm0</def><sym>(</sym><def>k</def><sym>);</sym> <def>perm0</def><sym>(</sym><def>k</def><sym>) =</sym> <def>perm0</def><sym>(</sym><def>first</def> <sym>-</sym> <def></def><num>1</num> <def></def><sym>-</sym> <def>k</def><sym>);</sym> <def>perm0</def><sym>(</sym><def>first</def> <sym>-</sym> <def></def><num>1</num> <def></def><sym>-</sym> <def>k</def><sym>) =</sym> <def>temp</def><sym>;</sym><br />
<def>	  k</def> <sym>=</sym> <def>k</def> <sym>+</sym> <def></def><num>1</num><br />
<def></def>	<sym>}</sym><br />
<def>	first</def> <sym>=</sym> <def>perm0</def><sym>(</sym><def></def><num>0</num><def></def><sym>)</sym><br />
<def>	flips</def> <sym>=</sym> <def>flips</def> <sym>+</sym> <def></def><num>1</num><br />
<def></def>      <sym>}</sym><br />
<def></def><br />
      <kwa>if</kwa> <def></def><sym>(</sym><def>flips</def> <sym>&gt;</sym> <def>maxFlips</def><sym>)</sym> <def>maxFlips</def> <sym>=</sym> <def>flips<br />
<br />
      temp</def> <sym>=</sym> <def>perm</def><sym>(</sym><def></def><num>0</num><def></def><sym>);</sym> <def>perm</def><sym>(</sym><def></def><num>0</num><def></def><sym>) =</sym> <def>perm</def><sym>(</sym><def></def><num>1</num><def></def><sym>);</sym> <def>perm</def><sym>(</sym><def></def><num>1</num><def></def><sym>) =</sym> <def>temp</def><sym>;</sym><br />
<def>      rot</def><sym>(</sym><def></def><num>1</num><def></def><sym>) =</sym> <def>rot</def><sym>(</sym><def></def><num>1</num><def></def><sym>) +</sym> <def></def><num>1</num><br />
<def></def>      <kwa>var</kwa> <def>j</def> <sym>=</sym> <def></def><num>1</num><br />
<def></def>      <kwa>while</kwa> <def></def><sym>(</sym><def>j</def> <sym>&lt;</sym> <def>n</def> <sym>-</sym> <def></def><num>1</num> <def></def><sym>&amp;&amp;</sym> <def>rot</def><sym>(</sym><def>j</def><sym>) &gt;</sym> <def>j</def><sym>) {</sym><br />
<def>	rot</def><sym>(</sym><def>j</def><sym>) =</sym> <def></def><num>0</num><br />
<def>	j</def> <sym>=</sym> <def>j</def> <sym>+</sym> <def></def><num>1</num><br />
<def><br />
	k</def> <sym>=</sym> <def></def><num>0</num><br />
<def></def>  	<kwa>while</kwa> <def></def><sym>(</sym><def>k</def> <sym>&lt;</sym> <def>j</def><sym>) {</sym><br />
<def>	  temp</def> <sym>=</sym> <def>perm</def><sym>(</sym><def>k</def><sym>);</sym> <def>perm</def><sym>(</sym><def>k</def><sym>) =</sym> <def>perm</def><sym>(</sym><def>k</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>);</sym> <def>perm</def><sym>(</sym><def>k</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>) =</sym> <def>temp</def><sym>;</sym><br />
<def>	  k</def> <sym>=</sym> <def>k</def> <sym>+</sym> <def></def><num>1</num><br />
<def></def>	<sym>}</sym><br />
<def>	rot</def><sym>(</sym><def>j</def><sym>) =</sym> <def>rot</def><sym>(</sym><def>j</def><sym>) +</sym> <def></def><num>1</num><br />
<def></def>      <sym>}</sym><br />
<def></def>    <sym>}</sym><br />
<def><br />
    Console</def><sym>.</sym><def>println</def><sym>(</sym><def></def><str>&quot;Pfannkuchen(&quot;</str><def></def> <sym>+</sym> <def>n</def> <sym>+</sym> <def></def><str>&quot;) = &quot;</str><def></def> <sym>+</sym> <def>maxFlips</def><sym>)</sym><br />
<def></def>  <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
</source>
