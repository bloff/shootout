<source>
<def></def><slc>;; The Computer Language Shootout</slc><br />
<def></def><slc>;; http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>;; Based on the MLton version of the benchmark</slc><br />
<def></def><slc>;; contributed by Scott Cruzen</slc><br />
<def></def><br />
<slc>;; Note: as of version 350, this benchmark spends most of</slc><br />
<def></def><slc>;;  its time GCing; it runs 3 times as fast in mzscheme3m.</slc><br />
<def></def><br />
<sym>(</sym><def>module pidigits mzscheme</def><br />
<br />
  <sym>(</sym><def>define</def> <sym>(</sym><def>floor_ev q r s t x</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def>quotient</def> <sym>(+ (*</sym> <def>q x</def><sym>)</sym> <def>r</def><sym>) (+ (*</sym> <def>s x</def><sym>)</sym> <def>t</def><sym>)))</sym><br />
<def></def><br />
  <sym>(</sym><def>define</def> <sym>(</sym><def>comp q r s t  q2 r2 s2 t2</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def>values</def> <sym>(+ (*</sym> <def>q q2</def><sym>) (*</sym> <def>r s2</def><sym>))</sym><br />
<def></def>	    <sym>(+ (*</sym> <def>q r2</def><sym>) (*</sym> <def>r t2</def><sym>))</sym><br />
<def></def>	    <sym>(+ (*</sym> <def>s q2</def><sym>) (*</sym> <def>t s2</def><sym>))</sym><br />
<def></def>	    <sym>(+ (*</sym> <def>s r2</def><sym>) (*</sym> <def>t t2</def><sym>))))</sym><br />
<def></def><br />
  <sym>(</sym><def>define</def> <sym>(</sym><def>next q r s t</def><sym>) (</sym><def>floor_ev q r s t</def> <num>3</num><def></def><sym>))</sym><br />
<def></def>  <sym>(</sym><def>define</def> <sym>(</sym><def>safe? q r s t n</def><sym>) (=</sym> <def>n</def> <sym>(</sym><def>floor_ev q r s t</def> <num>4</num><def></def><sym>)))</sym><br />
<def></def>  <sym>(</sym><def>define</def> <sym>(</sym><def>prod q r s t n</def><sym>) (</sym><def>comp</def> <num>10</num> <def></def><sym>(* -</sym><def></def><num>10</num> <def>n</def><sym>)</sym> <def></def><num>0 1</num>  <def>q r s t</def><sym>))</sym><br />
<def></def>  <sym>(</sym><def>define</def> <sym>(</sym><def>mk q r s t k</def><sym>) (</sym><def>comp q r s t k</def> <sym>(*</sym> <def></def><num>2</num> <def></def><sym>(</sym><def>add1</def> <sym>(*</sym> <def></def><num>2</num> <def>k</def><sym>)))</sym> <def></def><num>0</num> <def></def><sym>(</sym><def>add1</def> <sym>(*</sym> <def></def><num>2</num> <def>k</def><sym>))))</sym><br />
<def></def><br />
  <sym>(</sym><def>define</def> <sym>(</sym><def>digit k  q r s t  n row col</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def></def><kwa>if</kwa> <def></def><sym>(&gt;</sym> <def>n</def> <num>0</num><def></def><sym>)</sym><br />
<def></def>	<sym>(</sym><def>let</def> <sym>([</sym><def>y</def> <sym>(</sym><def>next q r s t</def><sym>)])</sym><br />
<def></def>	  <sym>(</sym><def></def><kwa>if</kwa> <def></def><sym>(</sym><def>safe? q r s t y</def><sym>)</sym><br />
<def></def>	      <sym>(</sym><def>let</def><sym>-</sym><def>values</def> <sym>([(</sym><def>q r s t</def><sym>) (</sym><def>prod q r s t y</def><sym>)])</sym><br />
<def></def>		<sym>(</sym><def></def><kwa>if</kwa> <def></def><sym>(=</sym> <def>col</def> <num>10</num><def></def><sym>)</sym><br />
<def></def>		    <sym>(</sym><def>let</def> <sym>([</sym><def>row</def> <sym>(+</sym> <def>row</def> <num>10</num><def></def><sym>)])</sym><br />
<def></def>		      <sym>(</sym><def>printf</def> <str>&quot;</str><esc>\</esc><str>t:~a</str><esc>\</esc><str>n~a&quot;</str><def> row y</def><sym>)</sym><br />
<def></def>		      <sym>(</sym><def>digit k q r s t</def> <sym>(</sym><def>sub1 n</def><sym>)</sym> <def>row</def> <num>1</num><def></def><sym>))</sym><br />
<def></def>		    <sym>(</sym><def>begin</def><br />
		      <sym>(</sym><def>printf</def> <str>&quot;~a&quot;</str><def> y</def><sym>)</sym><br />
<def></def>		      <sym>(</sym><def>digit k q r s t</def><sym>(</sym><def>sub1 n</def><sym>)</sym> <def>row</def> <sym>(</sym><def>add1 col</def><sym>)))))</sym><br />
<def></def>	      <sym>(</sym><def>let</def><sym>-</sym><def>values</def> <sym>([(</sym><def>q r s t</def><sym>) (</sym><def>mk q r s t k</def><sym>)])</sym><br />
<def></def>		<sym>(</sym><def>digit</def> <sym>(</sym><def>add1 k</def><sym>)</sym> <def>q r s t n row col</def><sym>))))</sym><br />
<def></def>	<sym>(</sym><def>printf</def> <str>&quot;~a</str><esc>\</esc><str>t:~a</str><esc>\</esc><str>n&quot;</str><def></def><br />
		<sym>(</sym><def>make</def><sym>-</sym><def>string</def> <sym>(-</sym> <def></def><num>10</num> <def>col</def><sym>)</sym> <def>#\space</def><sym>)</sym><br />
<def></def>		<sym>(+</sym> <def>row col</def><sym>))))</sym><br />
<def></def><br />
  <sym>(</sym><def>define</def> <sym>(</sym><def>digits n</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def>digit</def> <num>1  1 0 0 1</num>  <def>n</def> <num>0 0</num><def></def><sym>))</sym><br />
<def></def><br />
  <sym>(</sym><def>digits</def> <sym>(</sym><def>string</def><sym>-&gt;</sym><def>number</def> <sym>(</sym><def>vector</def><sym>-</sym><def>ref</def> <sym>(</sym><def>current</def><sym>-</sym><def></def><kwa>command</kwa><def></def><sym>-</sym><def></def><kwa>line</kwa><def></def><sym>-</sym><def>arguments</def><sym>)</sym> <def></def><num>0</num><def></def><sym>))))</sym><def></def><br />
</source>
