<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;   http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;</span>
<span class="hl slc">;;   contributed by Alexey Voznyuk</span>
<span class="hl slc">;;</span>

<span class="hl sym">(</span>defpackage #<span class="hl sym">:</span>smp<span class="hl sym">-</span>utils
  <span class="hl sym">(:</span>use <span class="hl sym">:</span>cl <span class="hl sym">:</span>sb<span class="hl sym">-</span>alien <span class="hl sym">:</span>sb<span class="hl sym">-</span>thread<span class="hl sym">)</span>
  <span class="hl sym">(:</span>export #<span class="hl sym">:</span>affinity #<span class="hl sym">:</span>apic<span class="hl sym">-</span>core<span class="hl sym">-</span>map<span class="hl sym">))</span>

<span class="hl sym">(</span>in<span class="hl sym">-</span>package <span class="hl sym">:</span>smp<span class="hl sym">-</span>utils<span class="hl sym">)</span>

<span class="hl sym">(</span>defun cpuset<span class="hl sym">-&gt;</span>list <span class="hl sym">(</span>cpuset<span class="hl sym">)</span>
  <span class="hl sym">(</span>loop <span class="hl sym">:</span>for i <span class="hl sym">:</span>from <span class="hl num">0</span> <span class="hl sym">:</span>below <span class="hl num">128</span>
     <span class="hl sym">:</span>unless <span class="hl sym">(</span>zerop <span class="hl sym">(</span>ldb <span class="hl sym">(</span>byte <span class="hl num">1</span> <span class="hl sym">(</span>mod i <span class="hl num">8</span><span class="hl sym">)) (</span>elt cpuset <span class="hl sym">(</span>truncate i <span class="hl num">8</span><span class="hl sym">))))</span>
     <span class="hl sym">:</span>collect i<span class="hl sym">))</span>

<span class="hl sym">(</span>defun list<span class="hl sym">-&gt;</span>cpuset <span class="hl sym">(</span>cpuset<span class="hl sym">-</span>list<span class="hl sym">)</span>
  <span class="hl sym">(</span>loop <span class="hl sym">:</span>with cpuset <span class="hl sym">= (</span>make<span class="hl sym">-</span>array <span class="hl num">16</span> <span class="hl sym">:</span>element<span class="hl sym">-</span>type <span class="hl sym">'(</span>unsigned<span class="hl sym">-</span>byte <span class="hl num">8</span><span class="hl sym">))</span>
     <span class="hl sym">:</span>for i <span class="hl sym">:</span>from <span class="hl num">0</span> <span class="hl sym">:</span>below <span class="hl num">128</span>
     <span class="hl sym">:</span>when <span class="hl sym">(</span>find i cpuset<span class="hl sym">-</span>list <span class="hl sym">:</span>test #<span class="hl sym">'=)</span>
     <span class="hl sym">:</span>do <span class="hl sym">(</span>setf <span class="hl sym">(</span>ldb <span class="hl sym">(</span>byte <span class="hl num">1</span> <span class="hl sym">(</span>mod i <span class="hl num">8</span><span class="hl sym">)) (</span>elt cpuset <span class="hl sym">(</span>truncate i <span class="hl num">8</span><span class="hl sym">)))</span> <span class="hl num">1</span><span class="hl sym">)</span>
     <span class="hl sym">:</span>finally <span class="hl sym">(</span>return cpuset<span class="hl sym">)))</span>

<span class="hl sym">(</span>defun affinity <span class="hl sym">(</span>thread<span class="hl sym">)</span>
  <span class="hl sym">(</span>with<span class="hl sym">-</span>alien <span class="hl sym">((</span>alien<span class="hl sym">-</span>cpuset <span class="hl sym">(</span>array unsigned<span class="hl sym">-</span>char <span class="hl num">16</span><span class="hl sym">)))</span>
    <span class="hl sym">(</span>let <span class="hl sym">((</span>retcode <span class="hl sym">(</span>alien<span class="hl sym">-</span>funcall <span class="hl sym">(</span>extern<span class="hl sym">-</span>alien <span class="hl str">&quot;pthread_getaffinity_np&quot;</span>
                                                <span class="hl sym">(</span>function int
                                                          unsigned<span class="hl sym">-</span>long
                                                          unsigned<span class="hl sym">-</span>long
                                                          <span class="hl sym">(*</span> unsigned<span class="hl sym">-</span>char<span class="hl sym">)))</span>
                                  <span class="hl sym">(</span>sb<span class="hl sym">-</span>thread<span class="hl sym">::</span>thread<span class="hl sym">-</span>os<span class="hl sym">-</span>thread thread<span class="hl sym">)</span>
                                  <span class="hl num">16</span>
                                  <span class="hl sym">(</span>cast alien<span class="hl sym">-</span>cpuset <span class="hl sym">(*</span> unsigned<span class="hl sym">-</span>char<span class="hl sym">)))))</span>
      <span class="hl sym">(</span>when <span class="hl sym">(</span>zerop retcode<span class="hl sym">)</span>
        <span class="hl sym">(</span>values t <span class="hl sym">(</span>loop <span class="hl sym">:</span>with cpuset <span class="hl sym">= (</span>make<span class="hl sym">-</span>array <span class="hl num">16</span> <span class="hl sym">:</span>element<span class="hl sym">-</span>type <span class="hl sym">'(</span>unsigned<span class="hl sym">-</span>byte <span class="hl num">8</span><span class="hl sym">))</span>
                     <span class="hl sym">:</span>for i <span class="hl sym">:</span>from <span class="hl num">0</span> <span class="hl sym">:</span>below <span class="hl num">16</span>
                     <span class="hl sym">:</span>do <span class="hl sym">(</span>setf <span class="hl sym">(</span>elt cpuset i<span class="hl sym">) (</span>deref alien<span class="hl sym">-</span>cpuset i<span class="hl sym">))</span>
                     <span class="hl sym">:</span>finally <span class="hl sym">(</span>return <span class="hl sym">(</span>cpuset<span class="hl sym">-&gt;</span>list cpuset<span class="hl sym">))))))))</span>

<span class="hl sym">(</span>defun <span class="hl sym">(</span>setf affinity<span class="hl sym">) (</span>affinity thread<span class="hl sym">)</span>
  <span class="hl sym">(</span>with<span class="hl sym">-</span>alien <span class="hl sym">((</span>alien<span class="hl sym">-</span>cpuset <span class="hl sym">(</span>array unsigned<span class="hl sym">-</span>char <span class="hl num">16</span><span class="hl sym">)))</span>
    <span class="hl sym">(</span>loop <span class="hl sym">:</span>with cpuset <span class="hl sym">= (</span>list<span class="hl sym">-&gt;</span>cpuset affinity<span class="hl sym">)</span>
       <span class="hl sym">:</span>for i <span class="hl sym">:</span>from <span class="hl num">0</span> <span class="hl sym">:</span>below <span class="hl num">16</span>
       <span class="hl sym">:</span>do <span class="hl sym">(</span>setf <span class="hl sym">(</span>deref alien<span class="hl sym">-</span>cpuset i<span class="hl sym">) (</span>elt cpuset i<span class="hl sym">)))</span>
    <span class="hl sym">(</span>zerop <span class="hl sym">(</span>alien<span class="hl sym">-</span>funcall <span class="hl sym">(</span>extern<span class="hl sym">-</span>alien <span class="hl str">&quot;pthread_setaffinity_np&quot;</span>
                                        <span class="hl sym">(</span>function int
                                                  unsigned<span class="hl sym">-</span>long
                                                  unsigned<span class="hl sym">-</span>long
                                                  <span class="hl sym">(*</span> unsigned<span class="hl sym">-</span>char<span class="hl sym">)))</span>
                          <span class="hl sym">(</span>sb<span class="hl sym">-</span>thread<span class="hl sym">::</span>thread<span class="hl sym">-</span>os<span class="hl sym">-</span>thread thread<span class="hl sym">)</span>
                          <span class="hl num">16</span>
                          <span class="hl sym">(</span>cast alien<span class="hl sym">-</span>cpuset <span class="hl sym">(*</span> unsigned<span class="hl sym">-</span>char<span class="hl sym">))))))</span>

<span class="hl sym">(</span>defun apic<span class="hl sym">-</span>core<span class="hl sym">-</span>map <span class="hl sym">(</span>cpuset<span class="hl sym">-</span>list<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>default<span class="hl sym">-</span>map <span class="hl sym">(</span>mapcar #<span class="hl sym">'</span>list cpuset<span class="hl sym">-</span>list cpuset<span class="hl sym">-</span>list<span class="hl sym">)))</span>
    <span class="hl sym">(</span>unless <span class="hl sym">(</span>probe<span class="hl sym">-</span>file #p<span class="hl str">&quot;/proc/cpuinfo&quot;</span><span class="hl sym">)</span>
      <span class="hl sym">(</span>return<span class="hl sym">-</span>from apic<span class="hl sym">-</span>core<span class="hl sym">-</span>map default<span class="hl sym">-</span>map<span class="hl sym">))</span>
    <span class="hl sym">(</span>with<span class="hl sym">-</span>open<span class="hl sym">-</span>file <span class="hl sym">(</span>cpuinfo #p<span class="hl str">&quot;/proc/cpuinfo&quot;</span><span class="hl sym">)</span>
      <span class="hl sym">(</span>flet <span class="hl sym">((</span>parse<span class="hl sym">-</span>key<span class="hl sym">-</span>value <span class="hl sym">(</span>line key<span class="hl sym">)</span>
               <span class="hl sym">(</span>when <span class="hl sym">(</span>and <span class="hl sym">(&gt; (</span>length line<span class="hl sym">) (</span>length key<span class="hl sym">))</span>
                          <span class="hl sym">(</span>string<span class="hl sym">=</span> line key <span class="hl sym">:</span>end1 <span class="hl sym">(</span>length key<span class="hl sym">)))</span>
                 <span class="hl sym">(</span>let <span class="hl sym">((</span>value<span class="hl sym">-</span>offset <span class="hl sym">(</span>position #\<span class="hl sym">:</span> line <span class="hl sym">:</span>start <span class="hl sym">(</span>length key<span class="hl sym">))))</span>
                   <span class="hl sym">(</span>when value<span class="hl sym">-</span>offset
                     <span class="hl sym">(</span>parse<span class="hl sym">-</span>integer line <span class="hl sym">:</span>start <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">+</span> value<span class="hl sym">-</span>offset<span class="hl sym">) :</span>junk<span class="hl sym">-</span>allowed t<span class="hl sym">))))))</span>
        <span class="hl sym">(</span>loop <span class="hl sym">:</span>with current<span class="hl sym">-</span>cpu <span class="hl sym">=</span> nil
           <span class="hl sym">:</span>for line <span class="hl sym">= (</span>read<span class="hl sym">-</span>line cpuinfo nil nil<span class="hl sym">)</span>
           <span class="hl sym">:</span>while line
           <span class="hl sym">:</span>do <span class="hl sym">(</span>multiple<span class="hl sym">-</span>value<span class="hl sym">-</span>bind <span class="hl sym">(</span>processor apicid<span class="hl sym">)</span>
                   <span class="hl sym">(</span>values <span class="hl sym">(</span>parse<span class="hl sym">-</span>key<span class="hl sym">-</span>value line <span class="hl str">&quot;processor&quot;</span><span class="hl sym">)</span>
                           <span class="hl sym">(</span>parse<span class="hl sym">-</span>key<span class="hl sym">-</span>value line <span class="hl str">&quot;apicid&quot;</span><span class="hl sym">))</span>
                 <span class="hl sym">(</span>cond <span class="hl sym">((</span>and current<span class="hl sym">-</span>cpu apicid<span class="hl sym">) (</span>setf <span class="hl sym">(</span>first <span class="hl sym">(</span>find current<span class="hl sym">-</span>cpu default<span class="hl sym">-</span>map <span class="hl sym">:</span>key #<span class="hl sym">'</span>second<span class="hl sym">))</span> apicid
                                                       current<span class="hl sym">-</span>cpu nil<span class="hl sym">))</span>
                       <span class="hl sym">(</span>processor <span class="hl sym">(</span>setf current<span class="hl sym">-</span>cpu processor<span class="hl sym">))))</span>
           <span class="hl sym">:</span>finally <span class="hl sym">(</span>return <span class="hl sym">(</span>sort default<span class="hl sym">-</span>map #<span class="hl sym">'&lt; :</span>key #<span class="hl sym">'</span>first<span class="hl sym">)))))))</span>


<span class="hl sym">(</span>defpackage #<span class="hl sym">:</span>chameneos<span class="hl sym">-</span>redux
  <span class="hl sym">(:</span>use <span class="hl sym">:</span>cl <span class="hl sym">:</span>smp<span class="hl sym">-</span>utils<span class="hl sym">))</span>

<span class="hl sym">(</span>in<span class="hl sym">-</span>package <span class="hl sym">:</span>chameneos<span class="hl sym">-</span>redux<span class="hl sym">)</span>

<span class="hl slc">;;</span>
<span class="hl slc">;; Game DSL compiler</span>
<span class="hl slc">;;</span>

<span class="hl sym">(</span>defmacro declare<span class="hl sym">-</span>colors<span class="hl sym">-</span>map <span class="hl sym">(&amp;</span>rest transformations<span class="hl sym">)</span>
  <span class="hl sym">`(</span>progn
     <span class="hl sym">(</span>defun complement<span class="hl sym">-</span>color <span class="hl sym">(</span>color<span class="hl sym">-</span>a color<span class="hl sym">-</span>b<span class="hl sym">)</span>
       <span class="hl sym">(</span>cond
         <span class="hl sym">,</span>&#64;<span class="hl sym">(</span>loop
              <span class="hl sym">:</span>for <span class="hl sym">(</span>test<span class="hl sym">-</span>a kw<span class="hl sym">-</span>plus test<span class="hl sym">-</span>b kw<span class="hl sym">-</span>arrow test<span class="hl sym">-</span>result<span class="hl sym">) :</span>in transformations
              <span class="hl sym">:</span>do <span class="hl sym">(</span>assert <span class="hl sym">(</span>and <span class="hl sym">(</span>eq kw<span class="hl sym">-</span>plus <span class="hl sym">'+) (</span>eq kw<span class="hl sym">-</span>arrow <span class="hl sym">'-&gt;)))</span>
              <span class="hl sym">:</span>collect <span class="hl sym">`((</span>and <span class="hl sym">(</span>eq color<span class="hl sym">-</span>a <span class="hl sym">',</span>test<span class="hl sym">-</span>a<span class="hl sym">) (</span>eq color<span class="hl sym">-</span>b <span class="hl sym">',</span>test<span class="hl sym">-</span>b<span class="hl sym">))</span>
                         <span class="hl sym">',</span>test<span class="hl sym">-</span>result<span class="hl sym">))</span>
         <span class="hl sym">(</span>t <span class="hl sym">(</span>error <span class="hl str">&quot;Invalid colors combinations&quot;</span><span class="hl sym">))))</span>
     <span class="hl sym">(</span>defun print<span class="hl sym">-</span>colors <span class="hl sym">()</span>
       <span class="hl sym">(</span>format t <span class="hl str">&quot;~{~{~a + ~a -&gt; ~a~%~}~}~%&quot;</span>
               <span class="hl sym">(</span>list <span class="hl sym">,</span>&#64;<span class="hl sym">(</span>loop
                          <span class="hl sym">:</span>for <span class="hl sym">(</span>test<span class="hl sym">-</span>a kw<span class="hl sym">-</span>plus test<span class="hl sym">-</span>b<span class="hl sym">) :</span>in transformations
                          <span class="hl sym">:</span>collect <span class="hl sym">`(</span>list <span class="hl sym">,(</span>string<span class="hl sym">-</span>downcase <span class="hl sym">(</span>string test<span class="hl sym">-</span>a<span class="hl sym">))</span>
                                          <span class="hl sym">,(</span>string<span class="hl sym">-</span>downcase <span class="hl sym">(</span>string test<span class="hl sym">-</span>b<span class="hl sym">))</span>
                                          <span class="hl sym">(</span>string<span class="hl sym">-</span>downcase
                                           <span class="hl sym">(</span>string <span class="hl sym">(</span>complement<span class="hl sym">-</span>color <span class="hl sym">',</span>test<span class="hl sym">-</span>a
                                                                     <span class="hl sym">',</span>test<span class="hl sym">-</span>b<span class="hl sym">))))))))))</span>

<span class="hl sym">(</span>defun spell<span class="hl sym">-</span>number <span class="hl sym">(</span>number<span class="hl sym">)</span>
  <span class="hl sym">(</span>with<span class="hl sym">-</span>output<span class="hl sym">-</span>to<span class="hl sym">-</span>string <span class="hl sym">(</span>result<span class="hl sym">-</span>string<span class="hl sym">)</span>
    <span class="hl sym">(</span>loop
       <span class="hl sym">:</span>for char <span class="hl sym">:</span>across <span class="hl sym">(</span>the simple<span class="hl sym">-</span>string <span class="hl sym">(</span>format nil <span class="hl str">&quot;~a&quot;</span> number<span class="hl sym">))</span>
       <span class="hl sym">:</span>do <span class="hl sym">(</span>format result<span class="hl sym">-</span>string <span class="hl str">&quot; ~r&quot;</span> <span class="hl sym">(- (</span>char<span class="hl sym">-</span>code char<span class="hl sym">) (</span>char<span class="hl sym">-</span>code #\<span class="hl num">0</span><span class="hl sym">))))))</span>

<span class="hl sym">(</span>defmacro spin<span class="hl sym">-</span>wait <span class="hl sym">(</span>condition <span class="hl sym">&amp;</span>key no<span class="hl sym">-</span>spin<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>yield<span class="hl sym">-</span>spin <span class="hl sym">`(</span>loop <span class="hl sym">:</span>until <span class="hl sym">,</span>condition <span class="hl sym">:</span>do <span class="hl sym">(</span>sb<span class="hl sym">-</span>thread<span class="hl sym">:</span>thread<span class="hl sym">-</span>yield<span class="hl sym">))))</span>
    <span class="hl sym">(</span>if no<span class="hl sym">-</span>spin
        yield<span class="hl sym">-</span>spin
        <span class="hl sym">`(</span>loop
            <span class="hl sym">:</span>repeat <span class="hl num">16384</span>
            <span class="hl sym">:</span>do <span class="hl sym">(</span>when <span class="hl sym">,</span>condition
                  <span class="hl sym">(</span>return<span class="hl sym">))</span>
            <span class="hl sym">:</span>finally <span class="hl sym">,</span>yield<span class="hl sym">-</span>spin<span class="hl sym">))))</span>

<span class="hl sym">(</span>defstruct chameneo
  <span class="hl sym">(</span>color <span class="hl sym">'</span>none <span class="hl sym">:</span>type symbol<span class="hl sym">)</span>
  <span class="hl sym">(</span>meet<span class="hl sym">-</span>count <span class="hl num">0</span> <span class="hl sym">:</span>type fixnum<span class="hl sym">)</span>
  <span class="hl sym">(</span>same<span class="hl sym">-</span>count <span class="hl num">0</span> <span class="hl sym">:</span>type fixnum<span class="hl sym">)</span>
  <span class="hl sym">(</span>meet<span class="hl sym">-</span>wait nil <span class="hl sym">:</span>type boolean<span class="hl sym">))</span>

<span class="hl sym">(</span>defmacro with<span class="hl sym">-</span>games <span class="hl sym">((&amp;</span>rest descriptions<span class="hl sym">) &amp;</span>body body<span class="hl sym">)</span>
  <span class="hl sym">(</span>if <span class="hl sym">(</span>null descriptions<span class="hl sym">)</span>
      <span class="hl sym">`(</span>progn <span class="hl sym">,</span>&#64;body<span class="hl sym">)</span>
      <span class="hl sym">(</span>destructuring<span class="hl sym">-</span>bind <span class="hl sym">(</span>game<span class="hl sym">-</span>name <span class="hl sym">&amp;</span>rest colors<span class="hl sym">)</span>
          <span class="hl sym">(</span>car descriptions<span class="hl sym">)</span>
        <span class="hl sym">(</span>let<span class="hl sym">* ((</span>colors<span class="hl sym">-</span>count <span class="hl sym">(</span>length colors<span class="hl sym">))</span>
               <span class="hl sym">(</span>worker<span class="hl sym">-</span>binds <span class="hl sym">(</span>loop <span class="hl sym">:</span>repeat colors<span class="hl sym">-</span>count <span class="hl sym">:</span>collect <span class="hl sym">(</span>gensym<span class="hl sym">)))</span>
               <span class="hl sym">(</span>chameneos <span class="hl sym">(</span>gensym <span class="hl str">&quot;CHAMENEOS&quot;</span><span class="hl sym">))</span>
               <span class="hl sym">(</span>action<span class="hl sym">-</span>cas <span class="hl sym">(</span>gensym <span class="hl str">&quot;ACTION-CAS&quot;</span><span class="hl sym">)))</span>
          <span class="hl sym">`(</span>let <span class="hl sym">((,</span>chameneos <span class="hl sym">(</span>coerce <span class="hl sym">(</span>list <span class="hl sym">,</span>&#64;<span class="hl sym">(</span>loop <span class="hl sym">:</span>repeat colors<span class="hl sym">-</span>count <span class="hl sym">:</span>collect <span class="hl sym">`(</span>make<span class="hl sym">-</span>chameneo<span class="hl sym">)))</span>
                                     <span class="hl sym">'</span>simple<span class="hl sym">-</span>vector<span class="hl sym">))</span>
                 <span class="hl sym">(,</span>action<span class="hl sym">-</span>cas <span class="hl sym">(</span>list <span class="hl num">0</span><span class="hl sym">))</span>
                 <span class="hl sym">,</span>&#64;worker<span class="hl sym">-</span>binds<span class="hl sym">)</span>
             <span class="hl sym">(</span>declare <span class="hl sym">(</span>type <span class="hl sym">(</span>simple<span class="hl sym">-</span>vector <span class="hl sym">,</span>colors<span class="hl sym">-</span>count<span class="hl sym">) ,</span>chameneos<span class="hl sym">)</span>
                      <span class="hl sym">(</span>type cons <span class="hl sym">,</span>action<span class="hl sym">-</span>cas<span class="hl sym">)</span>
                      <span class="hl sym">(</span>type <span class="hl sym">(</span>or null sb<span class="hl sym">-</span>thread<span class="hl sym">:</span>thread<span class="hl sym">) ,</span>&#64;worker<span class="hl sym">-</span>binds<span class="hl sym">))</span>
             <span class="hl sym">(</span>flet <span class="hl sym">((,(</span>intern <span class="hl sym">(</span>format nil <span class="hl str">&quot;RUN-~a&quot;</span> game<span class="hl sym">-</span>name<span class="hl sym">)) (</span>count threads<span class="hl sym">-</span>affinity smp<span class="hl sym">-</span>p<span class="hl sym">)</span>
                      <span class="hl sym">(</span>declare <span class="hl sym">(</span>type fixnum count<span class="hl sym">) (</span>type list threads<span class="hl sym">-</span>affinity<span class="hl sym">) (</span>type boolean smp<span class="hl sym">-</span>p<span class="hl sym">))</span>
                      <span class="hl sym">(</span>setf <span class="hl sym">(</span>car <span class="hl sym">,</span>action<span class="hl sym">-</span>cas<span class="hl sym">) (</span>the fixnum <span class="hl sym">(</span>ash count <span class="hl sym">,(</span>integer<span class="hl sym">-</span>length <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">+</span> colors<span class="hl sym">-</span>count<span class="hl sym">)))))</span>
                      <span class="hl sym">(</span>flet <span class="hl sym">((</span>color<span class="hl sym">-</span>worker <span class="hl sym">(</span>id color<span class="hl sym">)</span>
                               <span class="hl sym">(</span>declare <span class="hl sym">(</span>type <span class="hl sym">(</span>integer <span class="hl num">0</span> <span class="hl sym">,(</span><span class="hl num">1</span><span class="hl sym">-</span> colors<span class="hl sym">-</span>count<span class="hl sym">))</span> id<span class="hl sym">) (</span>type symbol color<span class="hl sym">))</span>
                               <span class="hl sym">(</span>lambda <span class="hl sym">()</span>
                                 <span class="hl sym">(</span>setf <span class="hl sym">(</span>affinity sb<span class="hl sym">-</span>thread<span class="hl sym">:*</span>current<span class="hl sym">-</span>thread<span class="hl sym">*)</span> threads<span class="hl sym">-</span>affinity<span class="hl sym">)</span>
                                 <span class="hl sym">(</span>let <span class="hl sym">((</span>state <span class="hl sym">(</span>car <span class="hl sym">,</span>action<span class="hl sym">-</span>cas<span class="hl sym">))</span>
                                       <span class="hl sym">(</span>self <span class="hl sym">(</span>elt <span class="hl sym">,</span>chameneos id<span class="hl sym">)))</span>
                                   <span class="hl sym">(</span>declare <span class="hl sym">(</span>type <span class="hl sym">(</span>integer <span class="hl num">0</span> <span class="hl sym">,</span>most<span class="hl sym">-</span>positive<span class="hl sym">-</span>fixnum<span class="hl sym">)</span> state<span class="hl sym">)</span>
                                            <span class="hl sym">(</span>type chameneo self<span class="hl sym">))</span>
                                   <span class="hl sym">(</span>setf <span class="hl sym">(</span>chameneo<span class="hl sym">-</span>color self<span class="hl sym">)</span> color<span class="hl sym">)</span>
                                   <span class="hl sym">(</span>loop
                                      <span class="hl sym">(</span>when <span class="hl sym">(</span>zerop state<span class="hl sym">)</span>
                                        <span class="hl sym">(</span>return<span class="hl sym">))</span>
                                      <span class="hl sym">(</span>let<span class="hl sym">* ((</span>peer<span class="hl sym">-</span>id <span class="hl sym">(</span>logand state <span class="hl sym">,(</span><span class="hl num">1</span><span class="hl sym">- (</span>ash <span class="hl num">1</span> <span class="hl sym">(</span>integer<span class="hl sym">-</span>length <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">+</span> colors<span class="hl sym">-</span>count<span class="hl sym">))))))</span>
                                             <span class="hl sym">(</span>new<span class="hl sym">-</span>state <span class="hl sym">(</span>if <span class="hl sym">(</span>zerop peer<span class="hl sym">-</span>id<span class="hl sym">)</span>
                                                            <span class="hl sym">(</span>logior state <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">+</span> id<span class="hl sym">))</span>
                                                            <span class="hl sym">(-</span> state peer<span class="hl sym">-</span>id <span class="hl sym">,(</span>ash <span class="hl num">1</span> <span class="hl sym">(</span>integer<span class="hl sym">-</span>length <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">+</span> colors<span class="hl sym">-</span>count<span class="hl sym">)))))))</span>
                                        <span class="hl sym">(</span>declare <span class="hl sym">(</span>type <span class="hl sym">(</span>integer <span class="hl num">0</span> <span class="hl sym">,(</span><span class="hl num">1</span><span class="hl sym">+</span> colors<span class="hl sym">-</span>count<span class="hl sym">))</span> peer<span class="hl sym">-</span>id<span class="hl sym">)</span>
                                                 <span class="hl sym">(</span>type <span class="hl sym">(</span>integer <span class="hl num">0</span> <span class="hl sym">,</span>most<span class="hl sym">-</span>positive<span class="hl sym">-</span>fixnum<span class="hl sym">)</span> new<span class="hl sym">-</span>state<span class="hl sym">))</span>
                                        <span class="hl sym">(</span>let <span class="hl sym">((</span>prev<span class="hl sym">-</span>state <span class="hl sym">(</span>sb<span class="hl sym">-</span>ext<span class="hl sym">:</span>compare<span class="hl sym">-</span>and<span class="hl sym">-</span>swap <span class="hl sym">(</span>car <span class="hl sym">,</span>action<span class="hl sym">-</span>cas<span class="hl sym">)</span> state new<span class="hl sym">-</span>state<span class="hl sym">)))</span>
                                          <span class="hl sym">(</span>declare <span class="hl sym">(</span>type <span class="hl sym">(</span>integer <span class="hl num">0</span> <span class="hl sym">,</span>most<span class="hl sym">-</span>positive<span class="hl sym">-</span>fixnum<span class="hl sym">)</span> prev<span class="hl sym">-</span>state<span class="hl sym">))</span>
                                          <span class="hl sym">(</span>if <span class="hl sym">(=</span> prev<span class="hl sym">-</span>state state<span class="hl sym">)</span>
                                              <span class="hl sym">(</span>progn
                                                <span class="hl sym">(</span>if <span class="hl sym">(</span>zerop peer<span class="hl sym">-</span>id<span class="hl sym">)</span>
                                                    <span class="hl sym">(</span>progn
                                                      <span class="hl sym">(</span>if smp<span class="hl sym">-</span>p
                                                          <span class="hl sym">(</span>spin<span class="hl sym">-</span>wait <span class="hl sym">(</span>chameneo<span class="hl sym">-</span>meet<span class="hl sym">-</span>wait self<span class="hl sym">))</span>
                                                          <span class="hl sym">(</span>spin<span class="hl sym">-</span>wait <span class="hl sym">(</span>chameneo<span class="hl sym">-</span>meet<span class="hl sym">-</span>wait self<span class="hl sym">) :</span>no<span class="hl sym">-</span>spin t<span class="hl sym">))</span>
                                                      <span class="hl sym">(</span>setf <span class="hl sym">(</span>chameneo<span class="hl sym">-</span>meet<span class="hl sym">-</span>wait self<span class="hl sym">)</span> nil<span class="hl sym">))</span>
                                                    <span class="hl sym">(</span>let <span class="hl sym">((</span>peer <span class="hl sym">(</span>elt <span class="hl sym">,</span>chameneos <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">-</span> peer<span class="hl sym">-</span>id<span class="hl sym">))))</span>
                                                      <span class="hl sym">(</span>when <span class="hl sym">(=</span> id <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">-</span> peer<span class="hl sym">-</span>id<span class="hl sym">))</span>
                                                        <span class="hl sym">(</span>incf <span class="hl sym">(</span>chameneo<span class="hl sym">-</span>same<span class="hl sym">-</span>count self<span class="hl sym">))</span>
                                                        <span class="hl sym">(</span>incf <span class="hl sym">(</span>chameneo<span class="hl sym">-</span>same<span class="hl sym">-</span>count peer<span class="hl sym">)))</span>
                                                      <span class="hl sym">(</span>let <span class="hl sym">((</span>new<span class="hl sym">-</span>color <span class="hl sym">(</span>complement<span class="hl sym">-</span>color <span class="hl sym">(</span>chameneo<span class="hl sym">-</span>color self<span class="hl sym">)</span>
                                                                                         <span class="hl sym">(</span>chameneo<span class="hl sym">-</span>color peer<span class="hl sym">))))</span>
                                                        <span class="hl sym">(</span>declare <span class="hl sym">(</span>type symbol new<span class="hl sym">-</span>color<span class="hl sym">))</span>
                                                        <span class="hl sym">(</span>setf <span class="hl sym">(</span>chameneo<span class="hl sym">-</span>color self<span class="hl sym">)</span> new<span class="hl sym">-</span>color
                                                              <span class="hl sym">(</span>chameneo<span class="hl sym">-</span>color peer<span class="hl sym">)</span> new<span class="hl sym">-</span>color<span class="hl sym">)</span>
                                                        <span class="hl sym">(</span>incf <span class="hl sym">(</span>chameneo<span class="hl sym">-</span>meet<span class="hl sym">-</span>count self<span class="hl sym">))</span>
                                                        <span class="hl sym">(</span>incf <span class="hl sym">(</span>chameneo<span class="hl sym">-</span>meet<span class="hl sym">-</span>count peer<span class="hl sym">))</span>
                                                        <span class="hl sym">(</span>setf <span class="hl sym">(</span>chameneo<span class="hl sym">-</span>meet<span class="hl sym">-</span>wait peer<span class="hl sym">)</span> t<span class="hl sym">))))</span>
                                                <span class="hl sym">(</span>setf state <span class="hl sym">(</span>car <span class="hl sym">,</span>action<span class="hl sym">-</span>cas<span class="hl sym">)))</span>
                                              <span class="hl sym">(</span>setf state prev<span class="hl sym">-</span>state<span class="hl sym">)))))))))</span>
                        <span class="hl sym">,</span>&#64;<span class="hl sym">(</span>loop <span class="hl sym">:</span>for color <span class="hl sym">:</span>in colors <span class="hl sym">:</span>for thread<span class="hl sym">-</span>index <span class="hl sym">:</span>from <span class="hl num">0</span>
                             <span class="hl sym">:</span>collect <span class="hl sym">`(</span>setf <span class="hl sym">,(</span>elt worker<span class="hl sym">-</span>binds thread<span class="hl sym">-</span>index<span class="hl sym">)</span>
                                             <span class="hl sym">(</span>sb<span class="hl sym">-</span>thread<span class="hl sym">:</span>make<span class="hl sym">-</span>thread <span class="hl sym">(</span>color<span class="hl sym">-</span>worker <span class="hl sym">,</span>thread<span class="hl sym">-</span>index <span class="hl sym">',</span>color<span class="hl sym">)</span>
                                                                    <span class="hl sym">:</span>name <span class="hl sym">,(</span>format nil <span class="hl str">&quot;chameneos-worker-~a-~a/~a&quot;</span>
                                                                                   <span class="hl sym">(</span>string<span class="hl sym">-</span>downcase <span class="hl sym">(</span>string color<span class="hl sym">))</span>
                                                                                   thread<span class="hl sym">-</span>index
                                                                                   colors<span class="hl sym">-</span>count<span class="hl sym">)))))</span>
                      nil<span class="hl sym">)</span>
                    <span class="hl sym">(,(</span>intern <span class="hl sym">(</span>format nil <span class="hl str">&quot;WAIT-~a&quot;</span> game<span class="hl sym">-</span>name<span class="hl sym">)) ()</span>
                      <span class="hl sym">,</span>&#64;<span class="hl sym">(</span>loop <span class="hl sym">:</span>for i <span class="hl sym">:</span>from <span class="hl num">0</span> <span class="hl sym">:</span>below colors<span class="hl sym">-</span>count <span class="hl sym">:</span>collect <span class="hl sym">`(</span>sb<span class="hl sym">-</span>thread<span class="hl sym">:</span>join<span class="hl sym">-</span>thread <span class="hl sym">,(</span>elt worker<span class="hl sym">-</span>binds i<span class="hl sym">)))</span>
                      <span class="hl sym">(</span>format t <span class="hl sym">,(</span>format nil <span class="hl str">&quot;~{ ~a~}~~%&quot;</span> <span class="hl sym">(</span>loop <span class="hl sym">:</span>for color <span class="hl sym">:</span>in colors <span class="hl sym">:</span>collect <span class="hl sym">(</span>string<span class="hl sym">-</span>downcase <span class="hl sym">(</span>string color<span class="hl sym">)))))</span>
                      <span class="hl sym">(</span>loop <span class="hl sym">:</span>for i <span class="hl sym">:</span>from <span class="hl num">0</span> <span class="hl sym">:</span>below <span class="hl sym">,</span>colors<span class="hl sym">-</span>count
                         <span class="hl sym">:</span>summing <span class="hl sym">(</span>chameneo<span class="hl sym">-</span>meet<span class="hl sym">-</span>count <span class="hl sym">(</span>elt <span class="hl sym">,</span>chameneos i<span class="hl sym">)) :</span>into total <span class="hl sym">:</span>of<span class="hl sym">-</span>type fixnum
                         <span class="hl sym">:</span>do <span class="hl sym">(</span>format t <span class="hl str">&quot;~a~a~%&quot;</span>
                                     <span class="hl sym">(</span>chameneo<span class="hl sym">-</span>meet<span class="hl sym">-</span>count <span class="hl sym">(</span>elt <span class="hl sym">,</span>chameneos i<span class="hl sym">))</span>
                                     <span class="hl sym">(</span>spell<span class="hl sym">-</span>number <span class="hl sym">(</span>chameneo<span class="hl sym">-</span>same<span class="hl sym">-</span>count <span class="hl sym">(</span>elt <span class="hl sym">,</span>chameneos i<span class="hl sym">))))</span>
                         <span class="hl sym">:</span>finally <span class="hl sym">(</span>format t <span class="hl str">&quot;~a~%~%&quot;</span> <span class="hl sym">(</span>spell<span class="hl sym">-</span>number total<span class="hl sym">)))))</span>
               <span class="hl sym">(</span>with<span class="hl sym">-</span>games <span class="hl sym">(,</span>&#64;<span class="hl sym">(</span>cdr descriptions<span class="hl sym">))</span>
                 <span class="hl sym">,</span>&#64;body<span class="hl sym">)))))))</span>


<span class="hl slc">;;</span>
<span class="hl slc">;; Game contents</span>
<span class="hl slc">;;</span>

<span class="hl sym">(</span>progn
  <span class="hl sym">(</span>declare<span class="hl sym">-</span>colors<span class="hl sym">-</span>map
   <span class="hl sym">(</span>blue <span class="hl sym">+</span> blue <span class="hl sym">-&gt;</span> blue<span class="hl sym">)</span>
   <span class="hl sym">(</span>blue <span class="hl sym">+</span> red <span class="hl sym">-&gt;</span> yellow<span class="hl sym">)</span>
   <span class="hl sym">(</span>blue <span class="hl sym">+</span> yellow <span class="hl sym">-&gt;</span> red<span class="hl sym">)</span>
   <span class="hl sym">(</span>red <span class="hl sym">+</span> blue <span class="hl sym">-&gt;</span> yellow<span class="hl sym">)</span>
   <span class="hl sym">(</span>red <span class="hl sym">+</span> red <span class="hl sym">-&gt;</span> red<span class="hl sym">)</span>
   <span class="hl sym">(</span>red <span class="hl sym">+</span> yellow <span class="hl sym">-&gt;</span> blue<span class="hl sym">)</span>
   <span class="hl sym">(</span>yellow <span class="hl sym">+</span> blue <span class="hl sym">-&gt;</span> red<span class="hl sym">)</span>
   <span class="hl sym">(</span>yellow <span class="hl sym">+</span> red <span class="hl sym">-&gt;</span> blue<span class="hl sym">)</span>
   <span class="hl sym">(</span>yellow <span class="hl sym">+</span> yellow <span class="hl sym">-&gt;</span> yellow<span class="hl sym">))</span>

  <span class="hl sym">(</span>defun run<span class="hl sym">-</span>games <span class="hl sym">(</span>count current<span class="hl sym">-</span>affinity<span class="hl sym">)</span>
    <span class="hl sym">(</span>declare <span class="hl sym">(</span>optimize <span class="hl sym">(</span>speed <span class="hl num">3</span><span class="hl sym">) (</span>safety <span class="hl num">0</span><span class="hl sym">) (</span>debug <span class="hl num">0</span><span class="hl sym">))</span>
             <span class="hl sym">(</span>type fixnum count<span class="hl sym">)</span>
             <span class="hl sym">(</span>type list current<span class="hl sym">-</span>affinity<span class="hl sym">))</span>
    <span class="hl sym">(</span>let<span class="hl sym">* ((</span>active<span class="hl sym">-</span>cores <span class="hl sym">(</span>length current<span class="hl sym">-</span>affinity<span class="hl sym">))</span>
           <span class="hl sym">(</span>smp<span class="hl sym">-</span>p <span class="hl sym">(&gt;</span> active<span class="hl sym">-</span>cores <span class="hl num">1</span><span class="hl sym">)))</span>
      <span class="hl sym">(</span>with<span class="hl sym">-</span>games <span class="hl sym">((</span>game<span class="hl sym">-</span>a blue red yellow<span class="hl sym">)</span>
                   <span class="hl sym">(</span>game<span class="hl sym">-</span>b blue red yellow red yellow blue red yellow red blue<span class="hl sym">))</span>
        <span class="hl sym">(</span>if smp<span class="hl sym">-</span>p
            <span class="hl sym">(</span>multiple<span class="hl sym">-</span>value<span class="hl sym">-</span>bind <span class="hl sym">(</span>affinity<span class="hl sym">-</span>a affinity<span class="hl sym">-</span>b<span class="hl sym">)</span>
                <span class="hl sym">(</span>if <span class="hl sym">(&lt;</span> active<span class="hl sym">-</span>cores <span class="hl num">4</span><span class="hl sym">)</span>
                    <span class="hl sym">(</span>values current<span class="hl sym">-</span>affinity current<span class="hl sym">-</span>affinity<span class="hl sym">)</span>
                    <span class="hl sym">(</span>let <span class="hl sym">((</span>apic<span class="hl sym">-</span>map <span class="hl sym">(</span>apic<span class="hl sym">-</span>core<span class="hl sym">-</span>map current<span class="hl sym">-</span>affinity<span class="hl sym">)))</span>
                      <span class="hl sym">(</span>declare <span class="hl sym">(</span>type list apic<span class="hl sym">-</span>map<span class="hl sym">))</span>
                      <span class="hl sym">(</span>values <span class="hl sym">(</span>list <span class="hl sym">(</span>second <span class="hl sym">(</span>elt apic<span class="hl sym">-</span>map <span class="hl num">0</span><span class="hl sym">)) (</span>second <span class="hl sym">(</span>elt apic<span class="hl sym">-</span>map <span class="hl num">1</span><span class="hl sym">)))</span>
                              <span class="hl sym">(</span>list <span class="hl sym">(</span>second <span class="hl sym">(</span>elt apic<span class="hl sym">-</span>map <span class="hl num">2</span><span class="hl sym">)) (</span>second <span class="hl sym">(</span>elt apic<span class="hl sym">-</span>map <span class="hl num">3</span><span class="hl sym">))))))</span>
              <span class="hl sym">(</span>run<span class="hl sym">-</span>game<span class="hl sym">-</span>a count affinity<span class="hl sym">-</span>a smp<span class="hl sym">-</span>p<span class="hl sym">)</span>
              <span class="hl sym">(</span>run<span class="hl sym">-</span>game<span class="hl sym">-</span>b count affinity<span class="hl sym">-</span>b smp<span class="hl sym">-</span>p<span class="hl sym">)</span>
              <span class="hl sym">(</span>wait<span class="hl sym">-</span>game<span class="hl sym">-</span>a<span class="hl sym">)</span>
              <span class="hl sym">(</span>wait<span class="hl sym">-</span>game<span class="hl sym">-</span>b<span class="hl sym">))</span>
            <span class="hl sym">(</span>progn <span class="hl sym">(</span>run<span class="hl sym">-</span>game<span class="hl sym">-</span>a count current<span class="hl sym">-</span>affinity smp<span class="hl sym">-</span>p<span class="hl sym">)</span>
                   <span class="hl sym">(</span>wait<span class="hl sym">-</span>game<span class="hl sym">-</span>a<span class="hl sym">)</span>
                   <span class="hl sym">(</span>run<span class="hl sym">-</span>game<span class="hl sym">-</span>b count current<span class="hl sym">-</span>affinity smp<span class="hl sym">-</span>p<span class="hl sym">)</span>
                   <span class="hl sym">(</span>wait<span class="hl sym">-</span>game<span class="hl sym">-</span>b<span class="hl sym">))))))</span>

  <span class="hl sym">(</span>defun main <span class="hl sym">(&amp;</span>optional force<span class="hl sym">-</span>count<span class="hl sym">)</span>
    <span class="hl sym">(</span>let<span class="hl sym">* ((</span>args <span class="hl sym">(</span>cdr sb<span class="hl sym">-</span>ext<span class="hl sym">:*</span>posix<span class="hl sym">-</span>argv<span class="hl sym">*))</span>
           <span class="hl sym">(</span>count <span class="hl sym">(</span>or force<span class="hl sym">-</span>count <span class="hl sym">(</span>if args <span class="hl sym">(</span>parse<span class="hl sym">-</span>integer <span class="hl sym">(</span>car args<span class="hl sym">))</span> <span class="hl num">600</span><span class="hl sym">))))</span>
      <span class="hl sym">(</span>print<span class="hl sym">-</span>colors<span class="hl sym">)</span>
      <span class="hl sym">(</span>multiple<span class="hl sym">-</span>value<span class="hl sym">-</span>bind <span class="hl sym">(</span>success<span class="hl sym">-</span>p current<span class="hl sym">-</span>affinity<span class="hl sym">)</span>
          <span class="hl sym">(</span>affinity sb<span class="hl sym">-</span>thread<span class="hl sym">:*</span>current<span class="hl sym">-</span>thread<span class="hl sym">*)</span>
        <span class="hl sym">(</span>unless success<span class="hl sym">-</span>p
          <span class="hl sym">(</span>error <span class="hl str">&quot;Failed to retrieve current thread affinity&quot;</span><span class="hl sym">))</span>
        <span class="hl sym">(</span>run<span class="hl sym">-</span>games count current<span class="hl sym">-</span>affinity<span class="hl sym">)))))</span>


<span class="hl sym">(</span>in<span class="hl sym">-</span>package <span class="hl sym">:</span>cl<span class="hl sym">-</span>user<span class="hl sym">)</span>

<span class="hl sym">(</span>defun main <span class="hl sym">()</span>
  <span class="hl sym">(</span>chameneos<span class="hl sym">-</span>redux<span class="hl sym">::</span>main<span class="hl sym">))</span>
