<source>
<def></def><com>/* The Computer Language Benchmarks Game</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com></com><br />
<com>   Contributed by Josh Goldfoot</com><br />
<com>   to compile, use gcc -O3</com><br />
<com></com><br />
<com>   This revision uses &quot;simple_hash.h,&quot; available from</com><br />
<com>   http://alioth.debian.org/plugins/scmcvs/cvsweb.php/shootout/bench/Include/?cvsroot=shootout</com><br />
<com></com><br />
<com>*/</com><def></def><br />
<dir>#include &lt;stdio.h&gt;</dir><br />
<def></def><dir>#include &lt;string.h&gt;</dir><br />
<def></def><dir>#include &lt;ctype.h&gt;</dir><br />
<def></def><dir>#include &lt;stdlib.h&gt;</dir><br />
<def></def><dir>#include</dir> <dstr>&quot;../../Include/simple_hash.h&quot;</dstr><dir></dir><br />
<def></def><br />
<kwb>long</kwb><br />
<def></def><kwd>hash_table_size</kwd> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>fl</def><sym>,</sym> <def></def><kwb>long</kwb> <def>buflen</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>  <kwb>long</kwb> <def>maxsize1</def><sym>,</sym> <def>maxsize2</def><sym>;</sym><br />
<def><br />
  maxsize1</def> <sym>=</sym> <def>buflen</def> <sym>-</sym> <def>fl</def><sym>;</sym><br />
<def>  maxsize2</def> <sym>=</sym> <def></def><num>4</num><def></def><sym>;</sym><br />
<def></def>  <kwa>while</kwa> <def></def><sym>(--</sym><def>fl</def> <sym>&gt;</sym> <def></def><num>0</num> <def></def><sym>&amp;&amp;</sym> <def>maxsize2</def> <sym>&lt;</sym> <def>maxsize1</def><sym>)</sym><br />
<def>    maxsize2</def> <sym>=</sym> <def>maxsize2</def> <sym>*</sym> <def></def><num>4</num><def></def><sym>;</sym><br />
<def></def>  <kwa>if</kwa> <def></def><sym>(</sym><def>maxsize1</def> <sym>&lt;</sym> <def>maxsize2</def><sym>)</sym><br />
<def></def>    <kwa>return</kwa> <def>maxsize1</def><sym>;</sym><br />
<def></def>  <kwa>return</kwa> <def>maxsize2</def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>struct</kwb> <def>ht_ht</def> <sym>*</sym><br />
<def></def><kwd>generate_frequencies</kwd> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>fl</def><sym>,</sym> <def></def><kwb>char</kwb> <def></def><sym>*</sym><def>buffer</def><sym>,</sym> <def></def><kwb>long</kwb> <def>buflen</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>  <kwb>struct</kwb> <def>ht_ht</def> <sym>*</sym><def>ht</def><sym>;</sym><br />
<def></def>  <kwb>char</kwb> <def></def><sym>*</sym><def>reader</def><sym>;</sym><br />
<def></def>  <kwb>long</kwb> <def>i</def><sym>;</sym><br />
<def></def>  <kwb>char</kwb> <def>nulled</def><sym>;</sym><br />
<def></def><br />
  <kwa>if</kwa> <def></def><sym>(</sym><def>fl</def> <sym>&gt;</sym> <def>buflen</def><sym>)</sym><br />
<def></def>    <kwa>return</kwa> <def>NULL</def><sym>;</sym><br />
<def><br />
  ht</def> <sym>=</sym> <def></def><kwd>ht_create</kwd> <def></def><sym>(</sym><def></def><kwd>hash_table_size</kwd> <def></def><sym>(</sym><def>fl</def><sym>,</sym> <def>buflen</def><sym>));</sym><br />
<def></def>  <kwa>for</kwa> <def></def><sym>(</sym><def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>buflen</def> <sym>-</sym> <def>fl</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym> <def>i</def><sym>++)</sym><br />
<def></def>    <sym>{</sym><br />
<def>      reader</def> <sym>= &amp;(</sym><def>buffer</def><sym>[</sym><def>i</def><sym>]);</sym><br />
<def>      nulled</def> <sym>=</sym> <def>reader</def><sym>[</sym><def>fl</def><sym>];</sym><br />
<def>      reader</def><sym>[</sym><def>fl</def><sym>] =</sym> <def></def><num>0x00</num><def></def><sym>;</sym><br />
<def></def>      <kwd>ht_find_new</kwd> <def></def><sym>(</sym><def>ht</def><sym>,</sym> <def>reader</def><sym>)-&gt;</sym><def>val</def><sym>++;</sym><br />
<def>      reader</def><sym>[</sym><def>fl</def><sym>] =</sym> <def>nulled</def><sym>;</sym><br />
<def></def>    <sym>}</sym><br />
<def></def>  <kwa>return</kwa> <def>ht</def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwc>typedef</kwc> <def></def><kwb>struct</kwb> <def>ssorter</def><br />
<sym>{</sym><br />
<def></def>  <kwb>char</kwb> <def></def><sym>*</sym><def>string</def><sym>;</sym><br />
<def></def>  <kwb>int</kwb> <def>num</def><sym>;</sym><br />
<def></def><sym>}</sym> <def>sorter</def><sym>;</sym><br />
<def></def><br />
<kwb>void</kwb><br />
<def></def><kwd>write_frequencies</kwd> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>fl</def><sym>,</sym> <def></def><kwb>char</kwb> <def></def><sym>*</sym><def>buffer</def><sym>,</sym> <def></def><kwb>long</kwb> <def>buflen</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>  <kwb>struct</kwb> <def>ht_ht</def> <sym>*</sym><def>ht</def><sym>;</sym><br />
<def></def>  <kwb>long</kwb> <def>total</def><sym>,</sym> <def>i</def><sym>,</sym> <def>j</def><sym>,</sym> <def>size</def><sym>;</sym><br />
<def></def>  <kwb>struct</kwb> <def>ht_node</def> <sym>*</sym><def>nd</def><sym>;</sym><br />
<def>  sorter</def> <sym>*</sym><def>s</def><sym>;</sym><br />
<def>  sorter tmp</def><sym>;</sym><br />
<def><br />
  ht</def> <sym>=</sym> <def></def><kwd>generate_frequencies</kwd> <def></def><sym>(</sym><def>fl</def><sym>,</sym> <def>buffer</def><sym>,</sym> <def>buflen</def><sym>);</sym><br />
<def>  total</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>  size</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>  <kwa>for</kwa> <def></def><sym>(</sym><def>nd</def> <sym>=</sym> <def></def><kwd>ht_first</kwd> <def></def><sym>(</sym><def>ht</def><sym>);</sym> <def>nd</def> <sym>!=</sym> <def>NULL</def><sym>;</sym> <def>nd</def> <sym>=</sym> <def></def><kwd>ht_next</kwd> <def></def><sym>(</sym><def>ht</def><sym>))</sym><br />
<def></def>    <sym>{</sym><br />
<def>      total</def> <sym>=</sym> <def>total</def> <sym>+</sym> <def>nd</def><sym>-&gt;</sym><def>val</def><sym>;</sym><br />
<def>      size</def><sym>++;</sym><br />
<def></def>    <sym>}</sym><br />
<def>  s</def> <sym>=</sym> <def></def><kwd>calloc</kwd> <def></def><sym>(</sym><def>size</def><sym>,</sym> <def></def><kwa>sizeof</kwa> <def></def><sym>(</sym><def>sorter</def><sym>));</sym><br />
<def>  i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>  <kwa>for</kwa> <def></def><sym>(</sym><def>nd</def> <sym>=</sym> <def></def><kwd>ht_first</kwd> <def></def><sym>(</sym><def>ht</def><sym>);</sym> <def>nd</def> <sym>!=</sym> <def>NULL</def><sym>;</sym> <def>nd</def> <sym>=</sym> <def></def><kwd>ht_next</kwd> <def></def><sym>(</sym><def>ht</def><sym>))</sym><br />
<def></def>    <sym>{</sym><br />
<def>      s</def><sym>[</sym><def>i</def><sym>].</sym><def>string</def> <sym>=</sym> <def>nd</def><sym>-&gt;</sym><def>key</def><sym>;</sym><br />
<def>      s</def><sym>[</sym><def>i</def><sym>++].</sym><def>num</def> <sym>=</sym> <def>nd</def><sym>-&gt;</sym><def>val</def><sym>;</sym><br />
<def></def>    <sym>}</sym><br />
<def></def>  <kwa>for</kwa> <def></def><sym>(</sym><def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>size</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>;</sym> <def>i</def><sym>++)</sym><br />
<def></def>    <kwa>for</kwa> <def></def><sym>(</sym><def>j</def> <sym>=</sym> <def>i</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym> <def>j</def> <sym>&lt;</sym> <def>size</def><sym>;</sym> <def>j</def><sym>++)</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>s</def><sym>[</sym><def>i</def><sym>].</sym><def>num</def> <sym>&lt;</sym> <def>s</def><sym>[</sym><def>j</def><sym>].</sym><def>num</def><sym>)</sym><br />
<def></def>	<sym>{</sym><br />
<def></def>	  <kwd>memcpy</kwd> <def></def><sym>(&amp;</sym><def>tmp</def><sym>, &amp;(</sym><def>s</def><sym>[</sym><def>i</def><sym>]),</sym> <def></def><kwa>sizeof</kwa> <def></def><sym>(</sym><def>sorter</def><sym>));</sym><br />
<def></def>	  <kwd>memcpy</kwd> <def></def><sym>(&amp;(</sym><def>s</def><sym>[</sym><def>i</def><sym>]), &amp;(</sym><def>s</def><sym>[</sym><def>j</def><sym>]),</sym> <def></def><kwa>sizeof</kwa> <def></def><sym>(</sym><def>sorter</def><sym>));</sym><br />
<def></def>	  <kwd>memcpy</kwd> <def></def><sym>(&amp;(</sym><def>s</def><sym>[</sym><def>j</def><sym>]), &amp;</sym><def>tmp</def><sym>,</sym> <def></def><kwa>sizeof</kwa> <def></def><sym>(</sym><def>sorter</def><sym>));</sym><br />
<def></def>	<sym>}</sym><br />
<def></def>  <kwa>for</kwa> <def></def><sym>(</sym><def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>size</def><sym>;</sym> <def>i</def><sym>++)</sym><br />
<def></def>    <kwd>printf</kwd> <def></def><sym>(</sym><def></def><str>&quot;%s %.3f</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def>s</def><sym>[</sym><def>i</def><sym>].</sym><def>string</def><sym>,</sym> <def></def><num>100</num> <def></def><sym>* (</sym><def></def><kwb>float</kwb><def></def><sym>)</sym> <def>s</def><sym>[</sym><def>i</def><sym>].</sym><def>num</def> <sym>/</sym> <def>total</def><sym>);</sym><br />
<def></def>  <kwd>printf</kwd> <def></def><sym>(</sym><def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>);</sym><br />
<def></def>  <kwd>ht_destroy</kwd> <def></def><sym>(</sym><def>ht</def><sym>);</sym><br />
<def></def>  <kwd>free</kwd> <def></def><sym>(</sym><def>s</def><sym>);</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>void</kwb><br />
<def></def><kwd>write_count</kwd> <def></def><sym>(</sym><def></def><kwb>char</kwb> <def></def><sym>*</sym><def>searchFor</def><sym>,</sym> <def></def><kwb>char</kwb> <def></def><sym>*</sym><def>buffer</def><sym>,</sym> <def></def><kwb>long</kwb> <def>buflen</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>  <kwb>struct</kwb> <def>ht_ht</def> <sym>*</sym><def>ht</def><sym>;</sym><br />
<def><br />
  ht</def> <sym>=</sym> <def></def><kwd>generate_frequencies</kwd> <def></def><sym>(</sym><def></def><kwd>strlen</kwd> <def></def><sym>(</sym><def>searchFor</def><sym>),</sym> <def>buffer</def><sym>,</sym> <def>buflen</def><sym>);</sym><br />
<def></def>  <kwd>printf</kwd> <def></def><sym>(</sym><def></def><str>&quot;%d</str><esc>\t</esc><str>%s</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def></def><kwd>ht_find_new</kwd> <def></def><sym>(</sym><def>ht</def><sym>,</sym> <def>searchFor</def><sym>)-&gt;</sym><def>val</def><sym>,</sym> <def>searchFor</def><sym>);</sym><br />
<def></def>  <kwd>ht_destroy</kwd> <def></def><sym>(</sym><def>ht</def><sym>);</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>int</kwb><br />
<def></def><kwd>main</kwd> <def></def><sym>()</sym><br />
<def></def><sym>{</sym><br />
<def></def>  <kwb>char</kwb> <def>c</def><sym>;</sym><br />
<def></def>  <kwb>char</kwb> <def></def><sym>*</sym><def>line</def><sym>, *</sym><def>buffer</def><sym>, *</sym><def>tmp</def><sym>, *</sym><def>x</def><sym>;</sym><br />
<def></def>  <kwb>int</kwb> <def>i</def><sym>,</sym> <def>linelen</def><sym>,</sym> <def>nothree</def><sym>;</sym><br />
<def></def>  <kwb>long</kwb> <def>buflen</def><sym>,</sym> <def>seqlen</def><sym>;</sym><br />
<def><br />
  line</def> <sym>=</sym> <def></def><kwd>malloc</kwd> <def></def><sym>(</sym><def></def><num>256</num><def></def><sym>);</sym><br />
<def></def>  <kwa>if</kwa> <def></def><sym>(!</sym><def>line</def><sym>)</sym><br />
<def></def>    <kwa>return</kwa> <def></def><sym>-</sym><def></def><num>1</num><def></def><sym>;</sym><br />
<def>  seqlen</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>  nothree</def> <sym>=</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def><br />
  <kwa>while</kwa> <def></def><sym>(</sym><def>nothree</def> <sym>&amp;&amp;</sym> <def></def><kwd>fgets</kwd> <def></def><sym>(</sym><def>line</def><sym>,</sym> <def></def><num>255</num><def></def><sym>,</sym> <def>stdin</def><sym>))</sym><br />
<def></def>    <kwa>if</kwa> <def></def><sym>(</sym><def>line</def><sym>[</sym><def></def><num>0</num><def></def><sym>] ==</sym> <def></def><str>'&gt;'</str><def></def> <sym>&amp;&amp;</sym> <def>line</def><sym>[</sym><def></def><num>1</num><def></def><sym>] ==</sym> <def></def><str>'T'</str><def></def> <sym>&amp;&amp;</sym> <def>line</def><sym>[</sym><def></def><num>2</num><def></def><sym>] ==</sym> <def></def><str>'H'</str><def></def><sym>)</sym><br />
<def>      nothree</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>  <kwd>free</kwd> <def></def><sym>(</sym><def>line</def><sym>);</sym><br />
<def><br />
  buflen</def> <sym>=</sym> <def></def><num>10240</num><def></def><sym>;</sym><br />
<def>  buffer</def> <sym>=</sym> <def></def><kwd>malloc</kwd> <def></def><sym>(</sym><def>buflen</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>  <kwa>if</kwa> <def></def><sym>(!</sym><def>buffer</def><sym>)</sym><br />
<def></def>    <kwa>return</kwa> <def></def><sym>-</sym><def></def><num>1</num><def></def><sym>;</sym><br />
<def>  x</def> <sym>=</sym> <def>buffer</def><sym>;</sym><br />
<def></def><br />
  <kwa>while</kwa> <def></def><sym>(</sym><def></def><kwd>fgets</kwd> <def></def><sym>(</sym><def>x</def><sym>,</sym> <def></def><num>255</num><def></def><sym>,</sym> <def>stdin</def><sym>))</sym><br />
<def></def>    <sym>{</sym><br />
<def>      linelen</def> <sym>=</sym> <def></def><kwd>strlen</kwd> <def></def><sym>(</sym><def>x</def><sym>);</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>linelen</def><sym>)</sym><br />
<def></def>	<sym>{</sym><br />
<def></def>	  <kwa>if</kwa> <def></def><sym>(</sym><def>x</def><sym>[</sym><def>linelen</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>] ==</sym> <def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>)</sym><br />
<def>	    linelen</def><sym>--;</sym><br />
<def>	  c</def> <sym>=</sym> <def>x</def><sym>[</sym><def></def><num>0</num><def></def><sym>];</sym><br />
<def></def>	  <kwa>if</kwa> <def></def><sym>(</sym><def>c</def> <sym>==</sym> <def></def><str>'&gt;'</str><def></def><sym>)</sym><br />
<def></def>	    <kwa>break</kwa><def></def><sym>;</sym><br />
<def></def>	  <kwa>else if</kwa> <def></def><sym>(</sym><def>c</def> <sym>!=</sym> <def></def><str>';'</str><def></def><sym>)</sym><br />
<def></def>	    <sym>{</sym><br />
<def>	      seqlen</def> <sym>=</sym> <def>seqlen</def> <sym>+</sym> <def>linelen</def><sym>;</sym><br />
<def></def>	      <kwa>if</kwa> <def></def><sym>(</sym><def>seqlen</def> <sym>+</sym> <def></def><num>512</num> <def></def><sym>&gt;=</sym> <def>buflen</def><sym>)</sym><br />
<def></def>		<sym>{</sym><br />
<def>		  buflen</def> <sym>=</sym> <def>buflen</def> <sym>+</sym> <def></def><num>10240</num><def></def><sym>;</sym><br />
<def>		  tmp</def> <sym>=</sym> <def></def><kwd>realloc</kwd> <def></def><sym>(</sym><def>buffer</def><sym>,</sym> <def>buflen</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>		  <kwa>if</kwa> <def></def><sym>(</sym><def>tmp</def> <sym>==</sym> <def>NULL</def><sym>)</sym><br />
<def></def>		    <kwa>return</kwa> <def></def><sym>-</sym><def></def><num>1</num><def></def><sym>;</sym><br />
<def>		  buffer</def> <sym>=</sym> <def>tmp</def><sym>;</sym><br />
<def>		  x</def> <sym>= &amp;(</sym><def>buffer</def><sym>[</sym><def>seqlen</def><sym>]);</sym><br />
<def></def>		<sym>}</sym><br />
<def></def>	      <kwa>else</kwa><br />
<def>		x</def> <sym>= &amp;(</sym><def>x</def><sym>[</sym><def>linelen</def><sym>]);</sym><br />
<def>	      x</def><sym>[</sym><def></def><num>0</num><def></def><sym>] =</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>	    <sym>}</sym><br />
<def></def>	<sym>}</sym><br />
<def></def>    <sym>}</sym><br />
<def></def>  <kwa>for</kwa> <def></def><sym>(</sym><def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>seqlen</def><sym>;</sym> <def>i</def><sym>++)</sym><br />
<def>    buffer</def><sym>[</sym><def>i</def><sym>] =</sym> <def></def><kwd>toupper</kwd> <def></def><sym>(</sym><def>buffer</def><sym>[</sym><def>i</def><sym>]);</sym><br />
<def></def>  <kwd>write_frequencies</kwd> <def></def><sym>(</sym><def></def><num>1</num><def></def><sym>,</sym> <def>buffer</def><sym>,</sym> <def>seqlen</def><sym>);</sym><br />
<def></def>  <kwd>write_frequencies</kwd> <def></def><sym>(</sym><def></def><num>2</num><def></def><sym>,</sym> <def>buffer</def><sym>,</sym> <def>seqlen</def><sym>);</sym><br />
<def></def>  <kwd>write_count</kwd> <def></def><sym>(</sym><def></def><str>&quot;GGT&quot;</str><def></def><sym>,</sym> <def>buffer</def><sym>,</sym> <def>seqlen</def><sym>);</sym><br />
<def></def>  <kwd>write_count</kwd> <def></def><sym>(</sym><def></def><str>&quot;GGTA&quot;</str><def></def><sym>,</sym> <def>buffer</def><sym>,</sym> <def>seqlen</def><sym>);</sym><br />
<def></def>  <kwd>write_count</kwd> <def></def><sym>(</sym><def></def><str>&quot;GGTATT&quot;</str><def></def><sym>,</sym> <def>buffer</def><sym>,</sym> <def>seqlen</def><sym>);</sym><br />
<def></def>  <kwd>write_count</kwd> <def></def><sym>(</sym><def></def><str>&quot;GGTATTTTAATT&quot;</str><def></def><sym>,</sym> <def>buffer</def><sym>,</sym> <def>seqlen</def><sym>);</sym><br />
<def></def>  <kwd>write_count</kwd> <def></def><sym>(</sym><def></def><str>&quot;GGTATTTTAATTTATAGT&quot;</str><def></def><sym>,</sym> <def>buffer</def><sym>,</sym> <def>seqlen</def><sym>);</sym><br />
<def></def>  <kwd>free</kwd> <def></def><sym>(</sym><def>buffer</def><sym>);</sym><br />
<def></def>  <kwa>return</kwa> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
