<source>
<def></def><com>&quot;* The Computer Language Shootout</com><br />
<com>    http://shootout.alioth.debian.org/</com><br />
<com>    contributed by Isaac Gouy</com><br />
<com>    modified by Eliot Miranda *&quot;</com><def>!<br />
<br />
!</def><kwc>Float</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'benchmarking'</str><def>!fib</def>   <sym>^</sym><def></def><kwa>self</kwa> <def>&lt;</def> <num>2.0</num> <def></def><kwb>ifTrue:</kwb> <def></def><sym>[</sym><def></def><num>1.0</num><def></def><sym>]</sym> <def></def><kwb>ifFalse:</kwb> <def></def><sym>[(</sym><def></def><kwa>self</kwa> <def></def><kwb>-</kwb> <def></def><num>2.0</num><def></def><sym>)</sym> <def></def><kwb>fib +</kwb> <def></def><sym>(</sym><def></def><kwa>self</kwa> <def></def><kwb>-</kwb> <def></def><num>1.0</num><def></def><sym>)</sym> <def></def><kwb>fib</kwb><def></def><sym>]</sym><def>! !!</def><kwc>Float</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'benchmarking'</str><def>!</def><kwb>tak:</kwb> <def>y</def> <kwb>z:</kwb> <def>z</def>   <sym>^</sym><def>y &lt;</def> <kwa>self</kwa>       <def></def><kwb>ifTrue:</kwb> <def></def><sym>[((</sym><def></def><kwa>self</kwa> <def></def><kwb>-</kwb> <def></def><num>1.0</num><def></def><sym>)</sym> <def></def><kwb>tak:</kwb> <def>y</def> <kwb>z:</kwb> <def>z</def><sym>)</sym> <def></def><kwb>tak:</kwb>        <def></def><sym>((</sym><def>y</def> <kwb>-</kwb> <def></def><num>1.0</num><def></def><sym>)</sym> <def></def><kwb>tak:</kwb> <def>z</def> <kwb>z:</kwb> <def></def><kwa>self</kwa><def></def><sym>)</sym> <def></def><kwb>z:</kwb> <def></def><sym>((</sym><def>z</def> <kwb>-</kwb> <def></def><num>1.0</num><def></def><sym>)</sym> <def></def><kwb>tak:</kwb> <def></def><kwa>self</kwa> <def></def><kwb>z:</kwb> <def>y</def><sym>)]</sym>      <def></def><kwb>ifFalse:</kwb> <def></def><sym>[</sym><def>z</def><sym>]</sym><def>! !!</def><kwc>SmallInteger</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'benchmarking'</str><def>!</def><kwb>ack:</kwb> <def>aSmallInteger</def>   <sym>^</sym><def></def><kwa>self</kwa> <def></def><kwb>==</kwb> <def></def><num>0</num>      <def></def><kwb>ifTrue:</kwb> <def></def><sym>[</sym><def>aSmallInteger</def> <kwb>+</kwb> <def></def><num>1</num><def></def><sym>]</sym>      <def></def><kwb>ifFalse:</kwb> <def></def><sym>[</sym>         <def>aSmallInteger</def> <kwb>==</kwb> <def></def><num>0</num>            <def></def><kwb>ifTrue:</kwb> <def></def><sym>[</sym><def></def><kwa>self</kwa> <def></def><kwb>-</kwb> <def></def><num>1</num> <def></def><kwb>ack:</kwb>  <def></def><num>1</num><def></def><sym>]</sym>            <def></def><kwb>ifFalse:</kwb> <def></def><sym>[</sym><def></def><kwa>self</kwa> <def></def><kwb>-</kwb> <def></def><num>1</num> <def></def><kwb>ack:</kwb> <def></def><sym>(</sym><def></def><kwa>self</kwa> <def></def><kwb>ack:</kwb> <def>aSmallInteger</def> <kwb>-</kwb> <def></def><num>1</num><def></def><sym>)] ]</sym><def>! !!</def><kwc>SmallInteger</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'benchmarking'</str><def>!fib</def>   <sym>^</sym><def></def><kwa>self</kwa> <def>&lt;</def> <num>2</num> <def></def><kwb>ifTrue:</kwb> <def></def><sym>[</sym><def></def><num>1</num><def></def><sym>]</sym> <def></def><kwb>ifFalse:</kwb> <def></def><sym>[(</sym><def></def><kwa>self</kwa> <def></def><kwb>-</kwb> <def></def><num>2</num><def></def><sym>)</sym> <def></def><kwb>fib +</kwb> <def></def><sym>(</sym><def></def><kwa>self</kwa> <def></def><kwb>-</kwb> <def></def><num>1</num><def></def><sym>)</sym> <def></def><kwb>fib</kwb><def></def><sym>]</sym><def>! !!</def><kwc>SmallInteger</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'benchmarking'</str><def>!</def><kwb>tak:</kwb> <def>y</def> <kwb>z:</kwb> <def>z</def>   <sym>^</sym><def>y &lt;</def> <kwa>self</kwa>       <def></def><kwb>ifTrue:</kwb> <def></def><sym>[((</sym><def></def><kwa>self</kwa> <def></def><kwb>-</kwb> <def></def><num>1</num><def></def><sym>)</sym> <def></def><kwb>tak:</kwb> <def>y</def> <kwb>z:</kwb> <def>z</def><sym>)</sym> <def></def><kwb>tak:</kwb>        <def></def><sym>((</sym><def>y</def> <kwb>-</kwb> <def></def><num>1</num><def></def><sym>)</sym> <def></def><kwb>tak:</kwb> <def>z</def> <kwb>z:</kwb> <def></def><kwa>self</kwa><def></def><sym>)</sym> <def></def><kwb>z:</kwb> <def></def><sym>((</sym><def>z</def> <kwb>-</kwb> <def></def><num>1</num><def></def><sym>)</sym> <def></def><kwb>tak:</kwb> <def></def><kwa>self</kwa> <def></def><kwb>z:</kwb> <def>y</def><sym>)]</sym>      <def></def><kwb>ifFalse:</kwb> <def></def><sym>[</sym><def>z</def><sym>]</sym><def>! !!</def><kwc>Tests</kwc> <def></def><kwb>class methodsFor:</kwb> <def></def><str>'benchmarking'</str><def>!</def><kwb>recursive:</kwb> <def>nArg</def> <kwb>to:</kwb> <def>output</def>   <kwd>| n |</kwd>   <def>n</def> <sym>:=</sym> <def>nArg</def><sym>.</sym>   <def>output</def>       <kwb>nextPutAll:</kwb> <def></def><str>'Ack(3,'</str><def>,</def> <kwb>n printString</kwb><def>,</def> <str>'): '</str><def></def><sym>;</sym> <def></def><kwb>print:</kwb> <def></def><sym>(</sym><def></def><num>3</num> <def></def><kwb>ack:</kwb> <def>n</def><sym>);</sym> <def></def><kwb>nl</kwb><def></def><sym>;</sym>      <def></def><kwb>nextPutAll:</kwb> <def></def><str>'Fib('</str><def></def><sym>;</sym> <def></def><kwb>print:</kwb> <def></def><num>27.0</num><def></def><kwb>+</kwb><def>n</def> <kwb>digits:</kwb> <def></def><num>1</num><def></def><sym>;</sym> <def></def><kwb>nextPutAll:</kwb> <def></def><str>'): '</str><def></def><sym>;</sym>          <def></def><kwb>print:</kwb> <def></def><sym>(</sym><def></def><num>27.0</num><def>d0</def><kwb>+</kwb><def>n</def><sym>)</sym> <def></def><kwb>fib digits:</kwb> <def></def><num>1</num><def></def><sym>;</sym> <def></def><kwb>nl</kwb><def></def><sym>.</sym>   <def>n</def> <sym>:=</sym> <def>n</def> <kwb>-</kwb> <def></def><num>1</num><def></def><sym>.</sym>   <def>output</def>       <kwb>nextPutAll:</kwb> <def></def><str>'Tak('</str><def>,</def> <sym>(</sym><def></def><num>3</num><def></def><kwb>*</kwb><def>n</def><sym>)</sym> <def></def><kwb>printString</kwb><def>,</def> <str>','</str><def>,</def>         <sym>(</sym><def></def><num>2</num><def></def><kwb>*</kwb><def>n</def><sym>)</sym> <def></def><kwb>printString</kwb><def>,</def> <str>','</str><def>,</def> <kwb>n printString</kwb><def>,</def> <str>'): '</str><def>,</def>           <sym>(</sym><def></def><num>3</num><def></def><kwb>*</kwb><def>n</def> <kwb>tak:</kwb> <def></def><num>2</num><def></def><kwb>*</kwb><def>n</def> <kwb>z:</kwb> <def>n</def><sym>)</sym> <def></def><kwb>printString</kwb><def></def><sym>;</sym> <def></def><kwb>nl</kwb><def></def><sym>;</sym>      <def></def><kwb>nextPutAll:</kwb> <def></def><str>'Fib(3): '</str><def></def><sym>;</sym> <def></def><kwb>print:</kwb> <def></def><num>3</num> <def></def><kwb>fib</kwb><def></def><sym>;</sym> <def></def><kwb>nl</kwb><def></def><sym>;</sym>      <def></def><kwb>nextPutAll:</kwb> <def></def><str>'Tak(3.0,2.0,1.0): '</str><def></def><sym>;</sym>           <def></def><kwb>print:</kwb> <def></def><sym>(</sym><def></def><num>3.0</num><def>d0</def> <kwb>tak:</kwb> <def></def><num>2.0</num><def>d0</def> <kwb>z:</kwb> <def></def><num>1.0</num><def>d0</def><sym>)</sym> <def></def><kwb>digits:</kwb> <def></def><num>1</num><def></def><sym>;</sym> <def></def><kwb>nl</kwb><def>! !!</def><kwc>Tests</kwc> <def></def><kwb>class methodsFor:</kwb> <def></def><str>'benchmark scripts'</str><def>!recursive</def>   <kwa>self</kwa> <def></def><kwb>recursive:</kwb> <def></def><kwa>self</kwa> <def></def><kwb>arg to:</kwb> <def></def><kwa>self</kwa> <def></def><kwb>stdout</kwb><def></def><sym>.   ^</sym><def></def><str>''</str><def>! !</def><br />
<br />
<kwc>Tests</kwc> <def></def><kwb>recursive</kwb><def>!</def><br />
</source>
