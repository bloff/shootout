<source>
<def></def><slc>;;; The Computer Language Benchmarks Game</slc><br />
<def></def><slc>;;; http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>;;;</slc><br />
<def></def><slc>;;; derived from the Chicken variant by Anthony Borla</slc><br />
<def></def><slc>;;; contributed by Matthew Flatt</slc><br />
<def><br />
#lang scheme</def><sym>/</sym><def>base</def><br />
<sym>(</sym><def>require scheme</def><sym>/</sym><def>cmdline</def><sym>)</sym><br />
<def></def><br />
<sym>(</sym><def>define</def> <sym>+</sym><def>alu</def><sym>+</sym><br />
<def></def>  <sym>(</sym><def>bytes</def><sym>-</sym><def></def><kwa>append</kwa><br />
<def>   #</def><str>&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</str><def><br />
   #</def><str>&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</str><def><br />
   #</def><str>&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</str><def><br />
   #</def><str>&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</str><def><br />
   #</def><str>&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</str><def><br />
   #</def><str>&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</str><def><br />
   #</def><str>&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</str><def></def><sym>))</sym><br />
<def></def><br />
<sym>(</sym><def>define</def> <sym>+</sym><def>iub</def><sym>+</sym><br />
<def></def>  <sym>(</sym><def></def><kwa>list</kwa><br />
<def></def>   <sym>'(</sym><def>#\a .</def> <num>0.27</num><def></def><sym>) '(</sym><def>#\c .</def> <num>0.12</num><def></def><sym>) '(</sym><def>#\g .</def> <num>0.12</num><def></def><sym>) '(</sym><def>#\t .</def> <num>0.27</num><def></def><sym>) '(</sym><def>#\B .</def> <num>0.02</num><def></def><sym>)</sym><br />
<def></def>   <sym>'(</sym><def>#\D .</def> <num>0.02</num><def></def><sym>) '(</sym><def>#\H .</def> <num>0.02</num><def></def><sym>) '(</sym><def>#\K .</def> <num>0.02</num><def></def><sym>) '(</sym><def>#\M .</def> <num>0.02</num><def></def><sym>) '(</sym><def>#\N .</def> <num>0.02</num><def></def><sym>)</sym><br />
<def></def>   <sym>'(</sym><def>#\R .</def> <num>0.02</num><def></def><sym>) '(</sym><def>#\S .</def> <num>0.02</num><def></def><sym>) '(</sym><def>#\V .</def> <num>0.02</num><def></def><sym>) '(</sym><def>#\W .</def> <num>0.02</num><def></def><sym>) '(</sym><def>#\Y .</def> <num>0.02</num><def></def><sym>)))</sym><br />
<def></def><br />
<sym>(</sym><def>define</def> <sym>+</sym><def>homosapien</def><sym>+</sym><br />
<def></def>  <sym>(</sym><def></def><kwa>list</kwa><br />
<def></def>   <sym>'(</sym><def>#\a .</def> <num>0.3029549426680</num><def></def><sym>) '(</sym><def>#\c .</def> <num>0.1979883004921</num><def></def><sym>)</sym><br />
<def></def>   <sym>'(</sym><def>#\g .</def> <num>0.1975473066391</num><def></def><sym>) '(</sym><def>#\t .</def> <num>0.3015094502008</num><def></def><sym>)))</sym><br />
<def></def><br />
<slc>;; -------------</slc><br />
<def></def><br />
<sym>(</sym><def>define</def> <sym>+</sym><def></def><kwa>line</kwa><def></def><sym>-</sym><def>size</def><sym>+</sym> <def></def><num>60</num><def></def><sym>)</sym><br />
<def></def><br />
<slc>;; -------------------------------</slc><br />
<def></def><br />
<sym>(</sym><def>define</def> <sym>(</sym><def>make</def><sym>-</sym><def>random seed</def><sym>)</sym><br />
<def></def>  <sym>(</sym><def>let</def><sym>* ((</sym><def>ia</def> <num>3877</num><def></def><sym>) (</sym><def>ic</def> <num>29573</num><def></def><sym>) (</sym><def>im</def> <num>139968</num><def></def><sym>) (</sym><def></def><kwa>last</kwa> <def>seed</def><sym>))</sym><br />
<def></def>    <sym>(</sym><def></def><kwa>lambda</kwa> <def></def><sym>(</sym><def></def><kwa>max</kwa><def></def><sym>)</sym><br />
<def></def>      <sym>(</sym><def></def><kwa>set</kwa><def></def><sym>!</sym> <def></def><kwa>last</kwa> <def></def><sym>(</sym><def>modulo</def> <sym>(+</sym> <def>ic</def> <sym>(*</sym> <def></def><kwa>last</kwa> <def>ia</def><sym>))</sym> <def>im</def><sym>))</sym><br />
<def></def>      <sym>(/ (*</sym> <def></def><kwa>max last</kwa><def></def><sym>)</sym> <def>im</def><sym>) )))</sym><br />
<def></def><br />
<slc>;; -------------------------------</slc><br />
<def></def><br />
<sym>(</sym><def>define</def> <sym>(</sym><def>make</def><sym>-</sym><def>cumulative</def><sym>-</sym><def>table frequency</def><sym>-</sym><def>table</def><sym>)</sym><br />
<def></def>  <sym>(</sym><def>let</def> <sym>([</sym><def>cumulative</def> <num>0.0</num><def></def><sym>])</sym><br />
<def></def>    <sym>(</sym><def>for</def><sym>/</sym><def></def><kwa>list</kwa> <def></def><sym>([</sym><def>x frequency</def><sym>-</sym><def>table</def><sym>])</sym><br />
<def></def>      <sym>(</sym><def></def><kwa>set</kwa><def></def><sym>!</sym> <def>cumulative</def> <sym>(+</sym> <def>cumulative</def> <sym>(</sym><def></def><kwa>cdr</kwa> <def>x</def><sym>)))</sym><br />
<def></def>      <sym>(</sym><def></def><kwa>cons</kwa> <def></def><sym>(</sym><def>char</def><sym>-&gt;</sym><def>integer</def> <sym>(</sym><def></def><kwa>car</kwa> <def>x</def><sym>))</sym> <def>cumulative</def><sym>))))</sym><br />
<def></def><br />
<slc>;; -------------</slc><br />
<def></def><br />
<sym>(</sym><def>define random</def><sym>-</sym><def>next</def> <sym>(</sym><def>make</def><sym>-</sym><def>random</def> <num>42</num><def></def><sym>))</sym><br />
<def></def><sym>(</sym><def>define</def> <sym>+</sym><def>segmarker</def><sym>+</sym> <def></def><str>&quot;&gt;&quot;</str><def></def><sym>)</sym><br />
<def></def><br />
<slc>;; -------------</slc><br />
<def></def><br />
<sym>(</sym><def>define</def> <sym>(</sym><def>select</def><sym>-</sym><def>random cumulative</def><sym>-</sym><def>table</def><sym>)</sym><br />
<def></def>  <sym>(</sym><def>let</def> <sym>((</sym><def>rvalue</def> <sym>(</sym><def>random</def><sym>-</sym><def>next</def> <num>1.0</num><def></def><sym>)))</sym><br />
<def></def>    <sym>(</sym><def>let select</def><sym>-</sym><def>over</def><sym>-</sym><def>threshold</def> <sym>([</sym><def>table cumulative</def><sym>-</sym><def>table</def><sym>])</sym><br />
<def></def>      <sym>(</sym><def></def><kwa>if</kwa> <def></def><sym>(&lt;=</sym> <def>rvalue</def> <sym>(</sym><def>cdar table</def><sym>))</sym><br />
<def></def>          <sym>(</sym><def></def><kwa>caar</kwa> <def>table</def><sym>)</sym><br />
<def></def>          <sym>(</sym><def>select</def><sym>-</sym><def>over</def><sym>-</sym><def>threshold</def> <sym>(</sym><def></def><kwa>cdr</kwa> <def>table</def><sym>))))))</sym><br />
<def></def><br />
<slc>;; -------------</slc><br />
<def></def><br />
<sym>(</sym><def>define</def> <sym>(</sym><def></def><kwa>repeat</kwa><def></def><sym>-</sym><def>fasta id desc n_ sequence</def> <kwa>line</kwa><def></def><sym>-</sym><def></def><kwa>length</kwa><def></def><sym>)</sym><br />
<def></def>  <sym>(</sym><def>let</def> <sym>((</sym><def>seqlen</def> <sym>(</sym><def>bytes</def><sym>-</sym><def></def><kwa>length</kwa> <def>sequence</def><sym>))</sym><br />
<def></def>        <sym>(</sym><def>out</def> <sym>(</sym><def>current</def><sym>-</sym><def>output</def><sym>-</sym><def>port</def><sym>)))</sym><br />
<def></def>    <sym>(</sym><def>display</def> <sym>(</sym><def>string</def><sym>-</sym><def></def><kwa>append</kwa> <def></def><sym>+</sym><def>segmarker</def><sym>+</sym> <def>id</def> <str>&quot; &quot;</str><def> desc</def> <str>&quot;</str><esc>\</esc><str>n&quot;</str><def></def><sym>)</sym> <def>out</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def>let loop</def><sym>-</sym><def>o</def> <sym>((</sym><def>n n_</def><sym>) (</sym><def>k</def> <num>0</num><def></def><sym>))</sym><br />
<def></def>      <sym>(</sym><def>unless</def> <sym>(&lt;=</sym> <def>n</def> <num>0</num><def></def><sym>)</sym><br />
<def></def>        <sym>(</sym><def>let</def> <sym>((</sym><def>m</def> <sym>(</sym><def></def><kwa>min</kwa> <def>n</def> <kwa>line</kwa><def></def><sym>-</sym><def></def><kwa>length</kwa><def></def><sym>)))</sym><br />
<def></def>          <sym>(</sym><def>let loop</def><sym>-</sym><def>i</def> <sym>((</sym><def>i</def> <num>0</num><def></def><sym>) (</sym><def>k k</def><sym>))</sym><br />
<def></def>            <sym>(</sym><def></def><kwa>if</kwa> <def></def><sym>(&gt;=</sym> <def>i m</def><sym>)</sym><br />
<def></def>                <sym>(</sym><def>begin</def><br />
                  <sym>(</sym><def>newline out</def><sym>)</sym><br />
<def></def>                  <sym>(</sym><def>loop</def><sym>-</sym><def>o</def> <sym>(-</sym> <def>n</def> <kwa>line</kwa><def></def><sym>-</sym><def></def><kwa>length</kwa><def></def><sym>)</sym> <def>k</def><sym>))</sym><br />
<def></def>                <sym>(</sym><def>let</def> <sym>([</sym><def>k</def> <sym>(</sym><def></def><kwa>if</kwa> <def></def><sym>(=</sym> <def>k seqlen</def><sym>)</sym> <def></def><num>0</num> <def>k</def><sym>)])</sym><br />
<def></def>                  <sym>(</sym><def>write</def><sym>-</sym><def>byte</def> <sym>(</sym><def>bytes</def><sym>-</sym><def>ref sequence k</def><sym>)</sym> <def>out</def><sym>)</sym><br />
<def></def>                  <sym>(</sym><def>loop</def><sym>-</sym><def>i</def> <sym>(</sym><def>add1 i</def><sym>) (</sym><def>add1 k</def><sym>))))))))))</sym><br />
<def></def><br />
<slc>;; -------------</slc><br />
<def></def><br />
<sym>(</sym><def>define</def> <sym>(</sym><def>random</def><sym>-</sym><def>fasta id desc n_ cumulative</def><sym>-</sym><def>table</def> <kwa>line</kwa><def></def><sym>-</sym><def></def><kwa>length</kwa><def></def><sym>)</sym><br />
<def></def>  <sym>(</sym><def>let</def> <sym>((</sym><def>out</def> <sym>(</sym><def>current</def><sym>-</sym><def>output</def><sym>-</sym><def>port</def><sym>)))</sym><br />
<def></def>    <sym>(</sym><def>display</def> <sym>(</sym><def>string</def><sym>-</sym><def></def><kwa>append</kwa> <def></def><sym>+</sym><def>segmarker</def><sym>+</sym> <def>id</def> <str>&quot; &quot;</str><def> desc</def> <str>&quot;</str><esc>\</esc><str>n&quot;</str><def></def><sym>)</sym> <def>out</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def>let loop</def><sym>-</sym><def>o</def> <sym>((</sym><def>n n_</def><sym>))</sym><br />
<def></def>      <sym>(</sym><def>unless</def> <sym>(&lt;=</sym> <def>n</def> <num>0</num><def></def><sym>)</sym><br />
<def></def>        <sym>(</sym><def>for</def> <sym>([</sym><def>i</def> <sym>(</sym><def>in</def><sym>-</sym><def>range</def> <sym>(</sym><def></def><kwa>min</kwa> <def>n</def> <kwa>line</kwa><def></def><sym>-</sym><def></def><kwa>length</kwa><def></def><sym>))])</sym><br />
<def></def>          <sym>(</sym><def>write</def><sym>-</sym><def>byte</def> <sym>(</sym><def>select</def><sym>-</sym><def>random cumulative</def><sym>-</sym><def>table</def><sym>)</sym> <def>out</def><sym>))</sym><br />
<def></def>        <sym>(</sym><def>newline out</def><sym>)</sym><br />
<def></def>        <sym>(</sym><def>loop</def><sym>-</sym><def>o</def> <sym>(-</sym> <def>n</def> <kwa>line</kwa><def></def><sym>-</sym><def></def><kwa>length</kwa><def></def><sym>))))))</sym><br />
<def></def><br />
<slc>;; -------------------------------</slc><br />
<def></def><br />
<sym>(</sym><def>let</def> <sym>((</sym><def>n</def> <sym>(</sym><def></def><kwa>command</kwa><def></def><sym>-</sym><def></def><kwa>line</kwa> <def>#</def><sym>:</sym><def>args</def> <sym>(</sym><def>n</def><sym>) (</sym><def>string</def><sym>-&gt;</sym><def>number n</def><sym>))))</sym><br />
<def></def><br />
  <sym>(</sym><def></def><kwa>repeat</kwa><def></def><sym>-</sym><def>fasta</def> <str>&quot;ONE&quot;</str><def></def> <str>&quot;Homo sapiens alu&quot;</str><def></def> <sym>(*</sym> <def>n</def> <num>2</num><def></def><sym>) +</sym><def>alu</def><sym>+ +</sym><def></def><kwa>line</kwa><def></def><sym>-</sym><def>size</def><sym>+)</sym><br />
<def></def><br />
  <sym>(</sym><def>random</def><sym>-</sym><def>fasta</def> <str>&quot;TWO&quot;</str><def></def> <str>&quot;IUB ambiguity codes&quot;</str><def></def> <sym>(*</sym> <def>n</def> <num>3</num><def></def><sym>)</sym><br />
<def></def>                <sym>(</sym><def>make</def><sym>-</sym><def>cumulative</def><sym>-</sym><def>table</def> <sym>+</sym><def>iub</def><sym>+) +</sym><def></def><kwa>line</kwa><def></def><sym>-</sym><def>size</def><sym>+)</sym><br />
<def></def><br />
  <sym>(</sym><def>random</def><sym>-</sym><def>fasta</def> <str>&quot;THREE&quot;</str><def></def> <str>&quot;Homo sapiens frequency&quot;</str><def></def> <sym>(*</sym> <def>n</def> <num>5</num><def></def><sym>)</sym><br />
<def></def>                <sym>(</sym><def>make</def><sym>-</sym><def>cumulative</def><sym>-</sym><def>table</def> <sym>+</sym><def>homosapien</def><sym>+) +</sym><def></def><kwa>line</kwa><def></def><sym>-</sym><def>size</def><sym>+))</sym><def></def><br />
</source>
