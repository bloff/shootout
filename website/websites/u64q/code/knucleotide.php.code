<source>
<def></def><sym>&lt;</sym><def>?php</def><br />
<com>/* The Computer Language Shootout</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com></com><br />
<com>   contributed by Damien Bonvillain</com><br />
<com>*/</com><def></def><br />
<br />
<kwc>$sequence</kwc> <def></def><sym>=</sym> <def></def><kwd>read_sequence</kwd><def></def><sym>(</sym><def></def><str>'THREE'</str><def></def><sym>);</sym><br />
<def></def><br />
<kwa>fclose</kwa><def></def><sym>(</sym><def>STDIN</def><sym>);</sym><br />
<def></def><br />
<slc>// sequence read, let's write some stats</slc><br />
<def></def><kwd>write_freq</kwd><def></def><sym>(</sym><def></def><kwc>$sequence</kwc><def></def><sym>,</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def></def><kwd>write_freq</kwd><def></def><sym>(</sym><def></def><kwc>$sequence</kwc><def></def><sym>,</sym> <def></def><num>2</num><def></def><sym>);</sym><br />
<def></def><kwd>write_count</kwd><def></def><sym>(</sym><def></def><kwc>$sequence</kwc><def></def><sym>,</sym> <def></def><str>'GGT'</str><def></def><sym>);</sym><br />
<def></def><kwd>write_count</kwd><def></def><sym>(</sym><def></def><kwc>$sequence</kwc><def></def><sym>,</sym> <def></def><str>'GGTA'</str><def></def><sym>);</sym><br />
<def></def><kwd>write_count</kwd><def></def><sym>(</sym><def></def><kwc>$sequence</kwc><def></def><sym>,</sym> <def></def><str>'GGTATT'</str><def></def><sym>);</sym><br />
<def></def><kwd>write_count</kwd><def></def><sym>(</sym><def></def><kwc>$sequence</kwc><def></def><sym>,</sym> <def></def><str>'GGTATTTTAATT'</str><def></def><sym>);</sym><br />
<def></def><kwd>write_count</kwd><def></def><sym>(</sym><def></def><kwc>$sequence</kwc><def></def><sym>,</sym> <def></def><str>'GGTATTTTAATTTATAGT'</str><def></def><sym>);</sym><br />
<def></def><br />
<com>/* functions definitions follow */</com><def></def><br />
<br />
<kwa>function</kwa> <def></def><kwd>read_sequence</kwd><def></def><sym>(</sym><def></def><kwc>$id</kwc><def></def><sym>) {</sym><br />
<def></def>  <kwc>$ln_id</kwc> <def></def><sym>=</sym> <def></def><kwa>strlen</kwa><def></def><sym>(</sym><def></def><kwc>$id</kwc><def></def><sym>);</sym><br />
<def></def>  <slc>// reach sequence three</slc><br />
<def></def>  <kwa>while</kwa><def></def><sym>(!</sym><def></def><kwa>feof</kwa><def></def><sym>(</sym><def>STDIN</def><sym>)) {</sym><br />
<def></def>    <kwc>$line</kwc> <def></def><sym>=</sym> <def></def><kwa>fgets</kwa><def></def><sym>(</sym><def>STDIN</def><sym>,</sym> <def></def><num>255</num><def></def><sym>);</sym><br />
<def></def>    <kwa>if</kwa><def></def><sym>(</sym><def></def><kwc>$line</kwc><def></def><sym>[</sym><def></def><num>0</num><def></def><sym>] ==</sym> <def></def><str>'&gt;'</str><def></def> <sym>&amp;&amp;</sym> <def></def><kwa>substr</kwa><def></def><sym>(</sym><def></def><kwc>$line</kwc><def></def><sym>,</sym> <def></def><num>1</num><def></def><sym>,</sym> <def></def><kwc>$ln_id</kwc><def></def><sym>) ==</sym> <def></def><kwc>$id</kwc><def></def><sym>) {</sym><br />
<def></def>      <kwa>break</kwa><def></def><sym>;</sym><br />
<def></def>    <sym>}</sym><br />
<def></def>  <sym>}</sym><br />
<def></def>  <kwa>if</kwa><def></def><sym>(</sym><def></def><kwa>feof</kwa><def></def><sym>(</sym><def>STDIN</def><sym>)) {</sym><br />
<def></def>    <slc>// sequence not found</slc><br />
<def></def>    <kwa>exit</kwa><def></def><sym>(-</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>  <sym>}</sym><br />
<def></def>  <slc>// next, read the content of the sequence</slc><br />
<def></def>  <kwc>$sequence</kwc> <def></def><sym>=</sym> <def></def><str>''</str><def></def><sym>;</sym><br />
<def></def>  <kwa>while</kwa><def></def><sym>(!</sym><def></def><kwa>feof</kwa><def></def><sym>(</sym><def>STDIN</def><sym>)) {</sym><br />
<def></def>    <kwc>$line</kwc> <def></def><sym>=</sym> <def></def><kwa>fgets</kwa><def></def><sym>(</sym><def>STDIN</def><sym>,</sym> <def></def><num>100</num><def></def><sym>);</sym><br />
<def></def>    <kwa>switch</kwa><def></def><sym>(</sym><def></def><kwc>$line</kwc><def></def><sym>[</sym><def></def><num>0</num><def></def><sym>]) {</sym><br />
<def>    case</def> <str>';'</str><def></def><sym>:</sym><br />
<def></def>      <slc>// comment, continue</slc><br />
<def></def>      <kwa>continue</kwa><def></def><sym>;</sym><br />
<def>    case</def> <str>'&gt;'</str><def></def><sym>:</sym><br />
<def></def>      <slc>// next sequence starts, this one is finished</slc><br />
<def></def>      <kwa>break</kwa> <def></def><num>2</num><def></def><sym>;</sym><br />
<def>    default</def><sym>:</sym><br />
<def></def>      <slc>// append the uppercase sequence fragment,</slc><br />
<def></def>      <slc>// must get rid of the CR/LF or whatever if present</slc><br />
<def></def>      <kwc>$sequence</kwc> <def>.</def><sym>=</sym> <def></def><kwa>strtoupper</kwa><def></def><sym>(</sym><def></def><kwa>rtrim</kwa><def></def><sym>(</sym><def></def><kwc>$line</kwc><def></def><sym>));</sym><br />
<def></def>    <sym>}</sym><br />
<def></def>  <sym>}</sym><br />
<def></def>  <kwa>return</kwa> <def></def><kwc>$sequence</kwc><def></def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwa>function</kwa> <def></def><kwd>write_freq</kwd><def></def><sym>(&amp;</sym><def></def><kwc>$sequence</kwc><def></def><sym>,</sym> <def></def><kwc>$key_length</kwc><def></def><sym>) {</sym><br />
<def></def>  <kwc>$map</kwc> <def></def><sym>=</sym> <def></def><kwd>generate_frequencies</kwd><def></def><sym>(</sym><def></def><kwc>$sequence</kwc><def></def><sym>,</sym> <def></def><kwc>$key_length</kwc><def></def><sym>);</sym><br />
<def></def>  <kwd>sort_by_freq_and_name</kwd><def></def><sym>(</sym><def></def><kwc>$map</kwc><def></def><sym>);</sym><br />
<def></def>  <kwa>foreach</kwa><def></def><sym>(</sym><def></def><kwc>$map</kwc> <def>as</def> <kwc>$key</kwc> <def></def><sym>=&gt;</sym> <def></def><kwc>$val</kwc><def></def><sym>) {</sym><br />
<def></def>    <kwa>printf</kwa> <def></def><sym>(</sym><def></def><str>&quot;%s %.3f</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def></def><kwc>$key</kwc><def></def><sym>,</sym> <def></def><kwc>$val</kwc><def></def><sym>);</sym><br />
<def></def>  <sym>}</sym><br />
<def></def>  <kwa>echo</kwa> <def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwa>function</kwa> <def></def><kwd>write_count</kwd><def></def><sym>(&amp;</sym><def></def><kwc>$sequence</kwc><def></def><sym>,</sym> <def></def><kwc>$key</kwc><def></def><sym>) {</sym><br />
<def></def>  <kwc>$map</kwc> <def></def><sym>=</sym> <def></def><kwd>generate_frequencies</kwd><def></def><sym>(</sym><def></def><kwc>$sequence</kwc><def></def><sym>,</sym> <def></def><kwa>strlen</kwa><def></def><sym>(</sym><def></def><kwc>$key</kwc><def></def><sym>),</sym> <def>false</def><sym>);</sym><br />
<def></def>  <kwa>printf</kwa> <def></def><sym>(</sym><def></def><str>&quot;%d</str><esc>\t</esc><str>%s</str><esc>\n</esc><str>&quot;</str><def></def><sym>, (</sym><def></def><kwd>array_key_exists</kwd><def></def><sym>(</sym><def></def><kwc>$key</kwc><def></def><sym>, &amp;</sym><def></def><kwc>$map</kwc><def></def><sym>))</sym><def>?</def><kwc>$map</kwc><def></def><sym>[</sym><def></def><kwc>$key</kwc><def></def><sym>]:</sym><def></def><num>0</num><def></def><sym>,</sym> <def></def><kwc>$key</kwc><def></def><sym>);</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<com>/**</com><br />
<com> * Returns a map (key, count or freq(default))</com><br />
<com> */</com><def></def><br />
<kwa>function</kwa> <def></def><kwd>generate_frequencies</kwd><def></def><sym>(&amp;</sym><def></def><kwc>$sequence</kwc><def></def><sym>,</sym> <def></def><kwc>$key_length</kwc><def></def><sym>,</sym> <def></def><kwc>$compute_freq</kwc> <def></def><sym>=</sym> <def>true</def><sym>) {</sym><br />
<def></def>  <kwc>$result</kwc> <def></def><sym>=</sym> <def></def><kwa>array</kwa><def></def><sym>();</sym><br />
<def></def>  <kwc>$total</kwc> <def></def><sym>=</sym> <def></def><kwa>strlen</kwa><def></def><sym>(&amp;</sym><def></def><kwc>$sequence</kwc><def></def><sym>) -</sym> <def></def><kwc>$key_length</kwc> <def></def><sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>  <kwc>$i</kwc> <def></def><sym>=</sym> <def></def><kwc>$total</kwc><def></def><sym>;</sym><br />
<def></def>  <kwa>while</kwa><def></def><sym>(--</sym><def></def><kwc>$i</kwc> <def></def><sym>&gt;=</sym> <def></def><num>0</num><def></def><sym>) {</sym><br />
<def></def>    <slc>// highly inefficient, alas, no real choice</slc><br />
<def></def>    <kwc>$key</kwc> <def></def><sym>=</sym> <def></def><kwa>substr</kwa><def></def><sym>(&amp;</sym><def></def><kwc>$sequence</kwc><def></def><sym>,</sym> <def></def><kwc>$i</kwc><def></def><sym>,</sym> <def></def><kwc>$key_length</kwc><def></def><sym>);</sym><br />
<def></def>    <kwa>if</kwa><def></def><sym>(!</sym><def></def><kwd>array_key_exists</kwd><def></def><sym>(</sym><def></def><kwc>$key</kwc><def></def><sym>,&amp;</sym><def></def><kwc>$result</kwc><def></def><sym>))</sym> <def></def><kwc>$result</kwc><def></def><sym>[</sym><def></def><kwc>$key</kwc><def></def><sym>] =</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>    <kwc>$result</kwc><def></def><sym>[</sym><def></def><kwc>$key</kwc><def></def><sym>]++;</sym><br />
<def></def>  <sym>}</sym><br />
<def></def>  <kwa>if</kwa><def></def><sym>(</sym><def></def><kwc>$compute_freq</kwc><def></def><sym>) {</sym><br />
<def></def>    <kwa>array_walk</kwa><def></def><sym>(</sym><def></def><kwc>$result</kwc><def></def><sym>,</sym> <def></def><str>'compute_freq'</str><def></def><sym>,</sym> <def></def><kwc>$total</kwc><def></def><sym>);</sym><br />
<def></def>  <sym>}</sym><br />
<def></def>  <kwa>return</kwa> <def></def><kwc>$result</kwc><def></def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwa>function</kwa> <def></def><kwd>compute_freq</kwd><def></def><sym>(&amp;</sym><def></def><kwc>$count_freq</kwc><def></def><sym>,</sym> <def></def><kwc>$key</kwc><def></def><sym>,</sym> <def></def><kwc>$total</kwc><def></def><sym>) {</sym><br />
<def></def>  <kwc>$count_freq</kwc> <def></def><sym>= (</sym><def></def><kwc>$count_freq</kwc><def></def><sym>*</sym> <def></def><num>100</num><def></def><sym>) /</sym> <def></def><kwc>$total</kwc><def></def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwa>function</kwa> <def></def><kwd>sort_by_freq_and_name</kwd><def></def><sym>(&amp;</sym><def></def><kwc>$map</kwc><def></def><sym>) {</sym><br />
<def></def>  <slc>// since PHP 4.1.0, sorting is not stable =&gt; dirty kludge</slc><br />
<def></def>  <kwa>array_walk</kwa><def></def><sym>(</sym><def></def><kwc>$map</kwc><def></def><sym>,</sym> <def></def><str>'append_key'</str><def></def><sym>);</sym><br />
<def></def>  <kwa>uasort</kwa><def></def><sym>(</sym><def></def><kwc>$map</kwc><def></def><sym>,</sym> <def></def><str>'freq_name_comparator'</str><def></def><sym>);</sym><br />
<def></def>  <kwa>array_walk</kwa><def></def><sym>(</sym><def></def><kwc>$map</kwc><def></def><sym>,</sym> <def></def><str>'remove_key'</str><def></def><sym>);</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwa>function</kwa> <def></def><kwd>append_key</kwd><def></def><sym>(&amp;</sym><def></def><kwc>$val</kwc><def></def><sym>,</sym> <def></def><kwc>$key</kwc><def></def><sym>) {</sym><br />
<def></def>  <kwc>$val</kwc> <def></def><sym>=</sym> <def></def><kwa>array</kwa><def></def><sym>(</sym><def></def><kwc>$val</kwc><def></def><sym>,</sym> <def></def><kwc>$key</kwc><def></def><sym>);</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwa>function</kwa> <def></def><kwd>freq_name_comparator</kwd><def></def><sym>(</sym><def></def><kwc>$val1</kwc><def></def><sym>,</sym> <def></def><kwc>$val2</kwc><def></def><sym>) {</sym><br />
<def></def>  <kwc>$delta</kwc> <def></def><sym>=</sym> <def></def><kwc>$val2</kwc><def></def><sym>[</sym><def></def><num>0</num><def></def><sym>] -</sym> <def></def><kwc>$val1</kwc><def></def><sym>[</sym><def></def><num>0</num><def></def><sym>];</sym><br />
<def></def>  <slc>// the comparator must return something close to an int</slc><br />
<def></def>  <kwc>$result</kwc> <def></def><sym>= (</sym><def></def><kwc>$delta</kwc> <def></def><sym>==</sym> <def></def><num>0</num><def></def><sym>)</sym><def>?</def><kwa>strcmp</kwa><def></def><sym>(</sym><def></def><kwc>$val1</kwc><def></def><sym>[</sym><def></def><num>1</num><def></def><sym>],</sym><def></def><kwc>$val2</kwc><def></def><sym>[</sym><def></def><num>1</num><def></def><sym>]):</sym><br />
<def></def>    <sym>(</sym><def></def><kwc>$delta</kwc> <def></def><sym>&lt;</sym> <def></def><num>0</num><def></def><sym>)</sym><def>?</def><sym>-</sym><def></def><num>1</num><def></def><sym>:</sym><def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>  <kwa>return</kwa> <def></def><kwc>$result</kwc><def></def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwa>function</kwa> <def></def><kwd>remove_key</kwd><def></def><sym>(&amp;</sym><def></def><kwc>$val</kwc><def></def><sym>,</sym> <def></def><kwc>$key</kwc><def></def><sym>) {</sym><br />
<def></def>  <kwc>$val</kwc> <def></def><sym>=</sym> <def></def><kwc>$val</kwc><def></def><sym>[</sym><def></def><num>0</num><def></def><sym>];</sym><br />
<def></def><sym>}</sym><br />
<def>?</def><sym>&gt;</sym><def></def><br />
</source>
