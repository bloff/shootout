<span class="hl slc">;;   The Computer Language Benchmarks Game</span>
<span class="hl slc">;;   http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; contributed by Yannick Gingras</span>
<span class="hl slc">;;; modified by Wade Humeniuk (Fix Stream Problem)</span>
<span class="hl slc">;;; parallelised by Paul Khuong</span>

<span class="hl sym">(</span>deftype index <span class="hl sym">()</span>
  <span class="hl sym">'(</span><span class="hl kwa">and</span> unsigned<span class="hl sym">-</span>byte fixnum<span class="hl sym">))</span>

<span class="hl sym">(</span>declaim <span class="hl sym">(</span>inline in<span class="hl sym">-</span><span class="hl kwa">set</span><span class="hl sym">-</span>p<span class="hl sym">))</span>
<span class="hl sym">(</span><span class="hl kwa">defun</span> in<span class="hl sym">-</span><span class="hl kwa">set</span><span class="hl sym">-</span>p <span class="hl sym">(</span>base<span class="hl sym">-</span>real base<span class="hl sym">-</span>imag
                 <span class="hl sym">&amp;</span>optional <span class="hl sym">(</span><span class="hl kwa">if</span><span class="hl sym">-</span>true t<span class="hl sym">) (</span><span class="hl kwa">if</span><span class="hl sym">-</span>false nil<span class="hl sym">))</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">type</span> double<span class="hl sym">-</span><span class="hl kwa">float</span> base<span class="hl sym">-</span>real base<span class="hl sym">-</span>imag<span class="hl sym">)</span>
           <span class="hl sym">(</span>optimize speed<span class="hl sym">))</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>zr base<span class="hl sym">-</span>real<span class="hl sym">)</span>
        <span class="hl sym">(</span>zi base<span class="hl sym">-</span>imag<span class="hl sym">))</span>
    <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">type</span> double<span class="hl sym">-</span><span class="hl kwa">float</span> zr zi<span class="hl sym">))</span>
    <span class="hl sym">(</span>dotimes <span class="hl sym">(</span>n <span class="hl num">50</span> <span class="hl kwa">if</span><span class="hl sym">-</span>true<span class="hl sym">)</span>
      <span class="hl sym">(</span>let <span class="hl sym">((</span>zr^<span class="hl num">2</span> <span class="hl sym">(*</span> zr zr<span class="hl sym">))</span>
            <span class="hl sym">(</span>zi^<span class="hl num">2</span> <span class="hl sym">(*</span> zi zi<span class="hl sym">)))</span>
        <span class="hl sym">(</span>when <span class="hl sym">(&gt;= (+</span> zr^<span class="hl num">2</span> zi^<span class="hl num">2</span><span class="hl sym">)</span> <span class="hl num">4</span>d0<span class="hl sym">)</span>
          <span class="hl sym">(</span>return <span class="hl kwa">if</span><span class="hl sym">-</span>false<span class="hl sym">))</span>
        <span class="hl sym">(</span>psetf zr <span class="hl sym">(+ (-</span> zr^<span class="hl num">2</span> zi^<span class="hl num">2</span><span class="hl sym">)</span>
                     base<span class="hl sym">-</span>real<span class="hl sym">)</span>
               zi <span class="hl sym">(+ (</span>let <span class="hl sym">((</span>mul <span class="hl sym">(*</span> zr zi<span class="hl sym">)))</span>
                       <span class="hl sym">(+</span> mul mul<span class="hl sym">))</span>
                     base<span class="hl sym">-</span>imag<span class="hl sym">))))))</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> render <span class="hl sym">(</span>size stream <span class="hl sym">&amp;</span>optional <span class="hl sym">(</span>nproc <span class="hl num">1</span><span class="hl sym">))</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">type</span> <span class="hl sym">(</span>integer <span class="hl num">8 10000</span><span class="hl sym">)</span> size<span class="hl sym">)</span>
           <span class="hl sym">(</span>stream stream<span class="hl sym">)</span>
           <span class="hl sym">(</span><span class="hl kwa">type</span> <span class="hl sym">(</span>integer <span class="hl num">1</span><span class="hl sym">)</span> nproc<span class="hl sym">)</span>
	   <span class="hl sym">(</span>optimize speed<span class="hl sym">))</span>
  <span class="hl sym">(</span>assert <span class="hl sym">(</span><span class="hl kwa">zerop</span> <span class="hl sym">(</span>mod size <span class="hl num">8</span><span class="hl sym">)))</span>

  <span class="hl sym">(</span>let<span class="hl sym">* ((</span>delta   <span class="hl sym">(/</span> <span class="hl num">2</span>d0 size<span class="hl sym">))</span>
         <span class="hl sym">(</span>buffer  <span class="hl sym">(</span>make<span class="hl sym">-</span>array <span class="hl sym">(*</span> size <span class="hl sym">(</span>ceiling size <span class="hl num">8</span><span class="hl sym">))</span>
                              <span class="hl sym">:</span>element<span class="hl sym">-</span><span class="hl kwa">type</span> <span class="hl sym">'(</span>unsigned<span class="hl sym">-</span>byte <span class="hl num">8</span><span class="hl sym">)))</span>
         <span class="hl sym">(</span>cur<span class="hl sym">-</span>row <span class="hl sym">(</span><span class="hl kwa">list</span> <span class="hl num">0</span><span class="hl sym">)))</span>
    <span class="hl sym">(</span>labels <span class="hl sym">((</span>compute<span class="hl sym">-</span>row <span class="hl sym">(</span>base<span class="hl sym">-</span>imag row<span class="hl sym">-</span>index<span class="hl sym">)</span>
               <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">type</span> double<span class="hl sym">-</span><span class="hl kwa">float</span> base<span class="hl sym">-</span>imag<span class="hl sym">)</span>
                        <span class="hl sym">(</span><span class="hl kwa">type</span> index row<span class="hl sym">-</span>index<span class="hl sym">)</span>
                        <span class="hl sym">(</span>optimize <span class="hl sym">(</span>safety <span class="hl num">1</span><span class="hl sym">)))</span>
               <span class="hl sym">(</span>loop for x     of<span class="hl sym">-</span><span class="hl kwa">type</span> index below size by <span class="hl num">8</span>
                     for index of<span class="hl sym">-</span><span class="hl kwa">type</span> index upfrom row<span class="hl sym">-</span>index
                     for code  of<span class="hl sym">-</span><span class="hl kwa">type</span> <span class="hl sym">(</span>unsigned<span class="hl sym">-</span>byte <span class="hl num">8</span><span class="hl sym">) =</span> <span class="hl num">0</span>
                     do
                  <span class="hl sym">(</span>dotimes <span class="hl sym">(</span>xp <span class="hl num">8</span><span class="hl sym">)</span>
                    <span class="hl sym">(</span>setf code <span class="hl sym">(</span><span class="hl kwa">logior</span> <span class="hl sym">(</span>ash code <span class="hl num">1</span><span class="hl sym">)</span>
                                       <span class="hl sym">(</span>in<span class="hl sym">-</span><span class="hl kwa">set</span><span class="hl sym">-</span>p <span class="hl sym">(+ -</span><span class="hl num">1.5</span>d0 <span class="hl sym">(*</span> delta <span class="hl sym">(+</span> x xp<span class="hl sym">)))</span>
                                                 base<span class="hl sym">-</span>imag
                                                 <span class="hl num">1</span>
                                                 <span class="hl num">0</span><span class="hl sym">))))</span>
                  <span class="hl sym">(</span>setf <span class="hl sym">(</span>aref buffer index<span class="hl sym">)</span> code<span class="hl sym">)))</span>
             <span class="hl sym">(</span>get<span class="hl sym">-</span>next<span class="hl sym">-</span>row <span class="hl sym">()</span>
               <span class="hl slc">;; sb-ext:atomic-incf since 1.0.21</span>
               <span class="hl sym">(</span>loop for old<span class="hl sym">-</span>y of<span class="hl sym">-</span><span class="hl kwa">type</span> index <span class="hl sym">= (</span><span class="hl kwa">car</span> cur<span class="hl sym">-</span>row<span class="hl sym">)</span>
                     when <span class="hl sym">(</span><span class="hl kwa">eq</span> old<span class="hl sym">-</span>y <span class="hl sym">(</span>sb<span class="hl sym">-</span>ext<span class="hl sym">:</span>compare<span class="hl sym">-</span><span class="hl kwa">and</span><span class="hl sym">-</span>swap
                                     <span class="hl sym">(</span><span class="hl kwa">car</span> cur<span class="hl sym">-</span>row<span class="hl sym">)</span> old<span class="hl sym">-</span>y <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">+</span> old<span class="hl sym">-</span>y<span class="hl sym">)))</span>
                       do <span class="hl sym">(</span>return old<span class="hl sym">-</span>y<span class="hl sym">)))</span>
             <span class="hl sym">(</span>compute<span class="hl sym">-</span>rows <span class="hl sym">()</span>
               <span class="hl sym">(</span>loop for y <span class="hl sym">= (</span>get<span class="hl sym">-</span>next<span class="hl sym">-</span>row<span class="hl sym">)</span>
                     <span class="hl kwa">while</span> <span class="hl sym">(&lt;</span> y size<span class="hl sym">)</span>
                     do <span class="hl sym">(</span>let <span class="hl sym">((</span>base<span class="hl sym">-</span>imag <span class="hl sym">(-</span> <span class="hl num">1.0</span>d0 <span class="hl sym">(*</span> delta y<span class="hl sym">))))</span>
                          <span class="hl sym">(</span>compute<span class="hl sym">-</span>row base<span class="hl sym">-</span>imag <span class="hl sym">(*</span> y <span class="hl sym">(</span>floor size <span class="hl num">8</span><span class="hl sym">)))))</span>
               nil<span class="hl sym">))</span>
      <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(=</span> nproc <span class="hl num">1</span><span class="hl sym">)</span>
        <span class="hl sym">(</span>compute<span class="hl sym">-</span>rows<span class="hl sym">)</span>
        #<span class="hl sym">+</span>sb<span class="hl sym">-</span>thread
        <span class="hl sym">(</span>mapc #<span class="hl sym">'</span>sb<span class="hl sym">-</span>thread<span class="hl sym">:</span>join<span class="hl sym">-</span>thread
              <span class="hl sym">(</span>loop <span class="hl kwa">repeat</span> nproc
                    collect <span class="hl sym">(</span>sb<span class="hl sym">-</span>thread<span class="hl sym">:</span>make<span class="hl sym">-</span>thread #<span class="hl sym">'</span>compute<span class="hl sym">-</span>rows<span class="hl sym">)))</span>
        #<span class="hl sym">-</span>sb<span class="hl sym">-</span>thread
        <span class="hl sym">(</span>error <span class="hl str">&quot;Can't use multiple processors on single-threaded builds&quot;</span><span class="hl sym">)))</span>

    <span class="hl sym">(</span>write<span class="hl sym">-</span>sequence buffer stream<span class="hl sym">)))</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> main <span class="hl sym">()</span>
  <span class="hl sym">(</span>let<span class="hl sym">* ((</span>args    sb<span class="hl sym">-</span>ext<span class="hl sym">:*</span>posix<span class="hl sym">-</span>argv<span class="hl sym">*)</span>
	 <span class="hl sym">(</span>n       <span class="hl sym">(</span>parse<span class="hl sym">-</span>integer <span class="hl sym">(</span>second args<span class="hl sym">)))</span>
         <span class="hl sym">(</span>nthread <span class="hl sym">(</span>parse<span class="hl sym">-</span>integer <span class="hl sym">(</span><span class="hl kwa">or</span> <span class="hl sym">(</span>third args<span class="hl sym">)</span>
                                     <span class="hl str">&quot;4&quot;</span><span class="hl sym">))))</span>
    <span class="hl sym">(</span>with<span class="hl sym">-</span><span class="hl kwa">open</span><span class="hl sym">-</span>stream <span class="hl sym">(</span>stream <span class="hl sym">(</span>sb<span class="hl sym">-</span>sys<span class="hl sym">:</span>make<span class="hl sym">-</span>fd<span class="hl sym">-</span>stream
                               <span class="hl sym">(</span>sb<span class="hl sym">-</span>sys<span class="hl sym">:</span>fd<span class="hl sym">-</span>stream<span class="hl sym">-</span>fd sb<span class="hl sym">-</span>sys<span class="hl sym">:*</span>stdout<span class="hl sym">*)</span>
                               <span class="hl sym">:</span>element<span class="hl sym">-</span><span class="hl kwa">type</span> <span class="hl sym">:</span>default
                               <span class="hl sym">:</span>buffering <span class="hl sym">:</span>full
                               <span class="hl sym">:</span>output t <span class="hl sym">:</span>input nil<span class="hl sym">))</span>
      <span class="hl sym">(</span>format stream <span class="hl str">&quot;P4~%~d ~d~%&quot;</span> n n<span class="hl sym">)</span>
      <span class="hl sym">(</span>render n stream nthread<span class="hl sym">)</span>
      <span class="hl sym">(</span>force<span class="hl sym">-</span>output stream<span class="hl sym">))))</span>
