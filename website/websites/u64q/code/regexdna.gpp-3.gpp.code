<source>
<def></def><slc>//</slc><br />
<def></def><slc>// The Computer Language Shootout</slc><br />
<def></def><slc>// http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>//</slc><br />
<def></def><slc>// Contributed by Shyamal Prasad</slc><br />
<def></def><slc>// Modified by Paul Kitchin</slc><br />
<def></def><br />
<br />
<slc>// This implementation of regexdna does not use the POSIX regex</slc><br />
<def></def><slc>// included with the GNU libc. Instead it uses the Boost C++ libraries</slc><br />
<def></def><slc>//</slc><br />
<def></def><slc>// http://www.boost.org/libs/regex/doc/index.html</slc><br />
<def></def><slc>//</slc><br />
<def></def><slc>// (On Debian: apt-get install libboost-regex-dev before compiling,</slc><br />
<def></def><slc>//  and then &quot;g++ -O3 -lboost_regex regexdna.cc -o regexdna</slc><br />
<def></def><slc>//  Gentoo seems to package boost as, well, 'boost')</slc><br />
<def></def><br />
<dir>#include &lt;iostream&gt;</dir><br />
<def></def><dir>#include &lt;list&gt;</dir><br />
<def></def><dir>#include &lt;string&gt;</dir><br />
<def></def><dir>#include &lt;boost/regex.hpp&gt;</dir><br />
<def></def><br />
<kwc>class</kwc> <def>rope</def><br />
<sym>{</sym><br />
<def></def><br />
   <kwc>public</kwc><def></def><sym>:</sym><br />
<def></def><br />
      <kwb>struct</kwb> <def>iterator</def><br />
         <sym>:</sym><br />
<def></def>         <kwc>public</kwc> <def>std</def><sym>::</sym><def>iterator</def><sym>&lt;</sym> <def>std</def><sym>::</sym><def>bidirectional_iterator_tag</def><sym>,</sym> <def></def><kwb>char</kwb> <def></def><sym>&gt;</sym><br />
<def></def>      <sym>{</sym><br />
<def></def><br />
         <kwd>iterator</kwd><def></def><sym>()</sym><br />
<def></def>         <sym>{</sym><br />
<def></def>         <sym>}</sym><br />
<def></def><br />
         <kwd>iterator</kwd><def></def><sym>(</sym><def>std</def><sym>::</sym><def>list</def><sym>&lt;</sym> <def>std</def><sym>::</sym><def>string</def> <sym>&gt;::</sym><def>iterator chunk</def><sym>)</sym><br />
<def></def>            <sym>:</sym><br />
<def></def>            <kwd>chunk_</kwd><def></def><sym>(</sym><def>chunk</def><sym>),</sym><br />
<def></def>            <kwd>position_</kwd><def></def><sym>(</sym><def>chunk</def><sym>-&gt;</sym><def></def><kwd>begin</kwd><def></def><sym>())</sym><br />
<def></def>         <sym>{</sym><br />
<def></def>         <sym>}</sym><br />
<def></def><br />
         <kwd>iterator</kwd><def></def><sym>(</sym><def>std</def><sym>::</sym><def>list</def><sym>&lt;</sym> <def>std</def><sym>::</sym><def>string</def> <sym>&gt;::</sym><def>iterator chunk</def><sym>,</sym> <def>std</def><sym>::</sym><def>string</def><sym>::</sym><def>iterator position</def><sym>)</sym><br />
<def></def>            <sym>:</sym><br />
<def></def>            <kwd>chunk_</kwd><def></def><sym>(</sym><def>chunk</def><sym>),</sym><br />
<def></def>            <kwd>position_</kwd><def></def><sym>(</sym><def>position</def><sym>)</sym><br />
<def></def>         <sym>{</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>position_</def> <sym>==</sym> <def>chunk_</def><sym>-&gt;</sym><def></def><kwd>end</kwd><def></def><sym>())</sym><br />
<def></def>            <sym>{</sym><br />
<def></def>               <sym>++</sym><def>chunk_</def><sym>;</sym><br />
<def>               position_</def> <sym>=</sym> <def>chunk_</def><sym>-&gt;</sym><def></def><kwd>begin</kwd><def></def><sym>();</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>         <sym>}</sym><br />
<def><br />
         iterator</def> <sym>&amp;</sym> <def></def><kwc>operator</kwc><def></def><sym>++()</sym><br />
<def></def>         <sym>{</sym><br />
<def></def>            <sym>++</sym><def>position_</def><sym>;</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>position_</def> <sym>==</sym> <def>chunk_</def><sym>-&gt;</sym><def></def><kwd>end</kwd><def></def><sym>())</sym><br />
<def></def>            <sym>{</sym><br />
<def></def>               <sym>++</sym><def>chunk_</def><sym>;</sym><br />
<def>               position_</def> <sym>=</sym> <def>chunk_</def><sym>-&gt;</sym><def></def><kwd>begin</kwd><def></def><sym>();</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>            <kwa>return</kwa> <def></def><sym>*</sym><def></def><kwa>this</kwa><def></def><sym>;</sym><br />
<def></def>         <sym>}</sym><br />
<def><br />
         iterator</def> <kwc>operator</kwc><def></def><sym>++(</sym><def></def><kwb>int</kwb><def></def><sym>)</sym><br />
<def></def>         <sym>{</sym><br />
<def>            iterator</def> <kwd>pre_increment</kwd><def></def><sym>(*</sym><def></def><kwa>this</kwa><def></def><sym>);</sym><br />
<def></def>            <kwc>operator</kwc><def></def><sym>++();</sym><br />
<def></def>            <kwa>return</kwa> <def>pre_increment</def><sym>;</sym><br />
<def></def>         <sym>}</sym><br />
<def><br />
         iterator</def> <kwc>operator</kwc><def></def><sym>+(</sym><def>std</def><sym>::</sym><def></def><kwb>size_t</kwb> <def>difference</def><sym>)</sym> <def></def><kwb>const</kwb><br />
<def></def>         <sym>{</sym><br />
<def>            iterator</def> <kwd>result</kwd><def></def><sym>(*</sym><def></def><kwa>this</kwa><def></def><sym>);</sym><br />
<def>            std</def><sym>::</sym><def></def><kwb>size_t</kwb> <def>offset</def> <sym>=</sym> <def>std</def><sym>::</sym><def></def><kwd>distance</kwd><def></def><sym>(</sym><def>result</def><sym>.</sym><def>position_</def><sym>,</sym> <def>result</def><sym>.</sym><def>chunk_</def><sym>-&gt;</sym><def></def><kwd>end</kwd><def></def><sym>());</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>offset</def> <sym>&gt;</sym> <def>difference</def><sym>)</sym><br />
<def></def>            <sym>{</sym><br />
<def>               result</def><sym>.</sym><def>position_</def> <sym>+=</sym> <def>difference</def><sym>;</sym><br />
<def></def>               <kwa>return</kwa> <def>result</def><sym>;</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>            <sym>++</sym><def>result</def><sym>.</sym><def>chunk_</def><sym>;</sym><br />
<def>            difference</def> <sym>-=</sym> <def>offset</def><sym>;</sym><br />
<def></def>            <kwa>while</kwa> <def></def><sym>(</sym><def>difference</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>)</sym><br />
<def></def>            <sym>{</sym><br />
<def></def>               <kwa>if</kwa> <def></def><sym>(</sym><def>result</def><sym>.</sym><def>chunk_</def><sym>-&gt;</sym><def></def><kwd>size</kwd><def></def><sym>() &gt;</sym> <def>difference</def><sym>)</sym><br />
<def></def>               <sym>{</sym><br />
<def>                  result</def><sym>.</sym><def>position_</def> <sym>=</sym> <def>result</def><sym>.</sym><def>chunk_</def><sym>-&gt;</sym><def></def><kwd>begin</kwd><def></def><sym>() +</sym> <def>difference</def><sym>;</sym><br />
<def></def>                  <kwa>return</kwa> <def>result</def><sym>;</sym><br />
<def></def>               <sym>}</sym><br />
<def>               difference</def> <sym>-=</sym> <def>result</def><sym>.</sym><def>chunk_</def><sym>-&gt;</sym><def></def><kwd>size</kwd><def></def><sym>();</sym><br />
<def></def>               <sym>++</sym><def>result</def><sym>.</sym><def>chunk_</def><sym>;</sym><br />
<def></def>            <sym>}</sym><br />
<def>            result</def><sym>.</sym><def>position_</def> <sym>=</sym> <def>result</def><sym>.</sym><def>chunk_</def><sym>-&gt;</sym><def></def><kwd>begin</kwd><def></def><sym>();</sym><br />
<def></def>            <kwa>return</kwa> <def>result</def><sym>;</sym><br />
<def></def>         <sym>}</sym><br />
<def>         iterator</def> <sym>&amp;</sym> <def></def><kwc>operator</kwc><def></def><sym>--()</sym><br />
<def></def>         <sym>{</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>position_</def> <sym>==</sym> <def>chunk_</def><sym>-&gt;</sym><def></def><kwd>begin</kwd><def></def><sym>())</sym><br />
<def></def>            <sym>{</sym><br />
<def></def>               <sym>--</sym><def>chunk_</def><sym>;</sym><br />
<def>               position_</def> <sym>=</sym> <def>chunk_</def><sym>-&gt;</sym><def></def><kwd>end</kwd><def></def><sym>();</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>            <sym>--</sym><def>position_</def><sym>;</sym><br />
<def></def>            <kwa>return</kwa> <def></def><sym>*</sym><def></def><kwa>this</kwa><def></def><sym>;</sym><br />
<def></def>         <sym>}</sym><br />
<def></def><br />
         <kwb>char</kwb> <def></def><sym>&amp;</sym> <def></def><kwc>operator</kwc><def></def><sym>*()</sym><br />
<def></def>         <sym>{</sym><br />
<def></def>            <kwa>return</kwa> <def></def><sym>*</sym><def>position_</def><sym>;</sym><br />
<def></def>         <sym>}</sym><br />
<def><br />
         std</def><sym>::</sym><def>list</def><sym>&lt;</sym> <def>std</def><sym>::</sym><def>string</def> <sym>&gt;::</sym><def>iterator chunk_</def><sym>;</sym><br />
<def>         std</def><sym>::</sym><def>string</def><sym>::</sym><def>iterator position_</def><sym>;</sym><br />
<def></def><br />
      <sym>};</sym><br />
<def></def><br />
      <kwd>rope</kwd><def></def><sym>(</sym><def>std</def><sym>::</sym><def>istream</def> <sym>&amp;</sym> <def>stream</def><sym>)</sym><br />
<def></def>         <sym>:</sym><br />
<def></def>         <kwd>data_</kwd><def></def><sym>(</sym><def></def><num>1</num><def></def><sym>,</sym> <def>std</def><sym>::</sym><def></def><kwd>string</kwd><def></def><sym>(</sym><def></def><num>256</num><def></def><sym>,</sym> <def></def><str>'\0'</str><def></def><sym>))</sym><br />
<def></def>      <sym>{</sym><br />
<def></def>         <slc>// technically undefined behaviour but works and</slc><br />
<def></def>         <slc>// saves me having to implement replace for vector</slc><br />
<def></def>         <kwa>while</kwa> <def></def><sym>(</sym><def>stream</def><sym>.</sym><def></def><kwd>read</kwd><def></def><sym>(&amp;</sym><def>data_</def><sym>.</sym><def></def><kwd>back</kwd><def></def><sym>()[</sym><def></def><num>0</num><def></def><sym>],</sym> <def></def><num>256</num><def></def><sym>))</sym><br />
<def></def>         <sym>{</sym><br />
<def>            data_</def><sym>.</sym><def></def><kwd>push_back</kwd><def></def><sym>(</sym><def>std</def><sym>::</sym><def></def><kwd>string</kwd><def></def><sym>(</sym><def></def><num>256</num><def></def><sym>,</sym> <def></def><str>'\0'</str><def></def><sym>));</sym><br />
<def></def>         <sym>}</sym><br />
<def>         data_</def><sym>.</sym><def></def><kwd>back</kwd><def></def><sym>().</sym><def></def><kwd>resize</kwd><def></def><sym>(</sym><def>stream</def><sym>.</sym><def></def><kwd>gcount</kwd><def></def><sym>());</sym><br />
<def>         data_</def><sym>.</sym><def></def><kwd>push_back</kwd><def></def><sym>(</sym><def>std</def><sym>::</sym><def></def><kwd>string</kwd><def></def><sym>(</sym><def></def><str>&quot;&quot;</str><def></def><sym>,</sym> <def></def><num>1</num><def></def><sym>));</sym><br />
<def></def>      <sym>}</sym><br />
<def><br />
      iterator</def> <kwd>begin</kwd><def></def><sym>()</sym><br />
<def></def>      <sym>{</sym><br />
<def></def>         <kwa>return</kwa> <def></def><kwd>iterator</kwd><def></def><sym>(</sym><def>data_</def><sym>.</sym><def></def><kwd>begin</kwd><def></def><sym>());</sym><br />
<def></def>      <sym>}</sym><br />
<def><br />
      iterator</def> <kwd>end</kwd><def></def><sym>()</sym><br />
<def></def>      <sym>{</sym><br />
<def></def>         <kwa>return</kwa> <def></def><kwd>iterator</kwd><def></def><sym>(--</sym><def>data_</def><sym>.</sym><def></def><kwd>end</kwd><def></def><sym>());</sym><br />
<def></def>      <sym>}</sym><br />
<def><br />
      std</def><sym>::</sym><def></def><kwb>size_t</kwb> <def></def><kwd>length</kwd><def></def><sym>()</sym> <def></def><kwb>const</kwb><br />
<def></def>      <sym>{</sym><br />
<def>         std</def><sym>::</sym><def></def><kwb>size_t</kwb> <def>l</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>         <kwa>for</kwa> <def></def><sym>(</sym><def>std</def><sym>::</sym><def>list</def><sym>&lt;</sym> <def>std</def><sym>::</sym><def>string</def> <sym>&gt;::</sym><def>const_iterator i</def> <sym>=</sym> <def>data_</def><sym>.</sym><def></def><kwd>begin</kwd><def></def><sym>(),</sym> <def>end</def> <sym>=</sym> <def>data_</def><sym>.</sym><def></def><kwd>end</kwd><def></def><sym>();</sym> <def>i</def> <sym>!=</sym> <def>end</def><sym>; ++</sym><def>i</def><sym>)</sym><br />
<def></def>         <sym>{</sym><br />
<def>            l</def> <sym>+=</sym> <def>i</def><sym>-&gt;</sym><def></def><kwd>size</kwd><def></def><sym>();</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>         <sym>--</sym><def>l</def><sym>;</sym><br />
<def></def>         <kwa>return</kwa> <def>l</def><sym>;</sym><br />
<def></def>      <sym>}</sym><br />
<def><br />
      iterator</def> <kwd>replace</kwd><def></def><sym>(</sym><def>iterator begin</def><sym>,</sym> <def>iterator end</def><sym>,</sym> <def></def><kwb>char const</kwb> <def></def><sym>*</sym> <def>replacement</def><sym>)</sym><br />
<def></def>      <sym>{</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>begin</def><sym>.</sym><def>chunk_</def> <sym>==</sym> <def>end</def><sym>.</sym><def>chunk_</def><sym>)</sym><br />
<def></def>         <sym>{</sym><br />
<def>            std</def><sym>::</sym><def></def><kwb>size_t</kwb> <def>offset</def> <sym>=</sym> <def>std</def><sym>::</sym><def></def><kwd>distance</kwd><def></def><sym>(</sym><def>begin</def><sym>.</sym><def>chunk_</def><sym>-&gt;</sym><def></def><kwd>begin</kwd><def></def><sym>(),</sym> <def>begin</def><sym>.</sym><def>position_</def><sym>) +</sym> <def>std</def><sym>::</sym><def></def><kwd>strlen</kwd><def></def><sym>(</sym><def>replacement</def><sym>);</sym><br />
<def>            begin</def><sym>.</sym><def>chunk_</def><sym>-&gt;</sym><def></def><kwd>replace</kwd><def></def><sym>(</sym><def>begin</def><sym>.</sym><def>position_</def><sym>,</sym> <def>end</def><sym>.</sym><def>position_</def><sym>,</sym> <def>replacement</def><sym>);</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>begin</def><sym>.</sym><def>chunk_</def><sym>-&gt;</sym><def></def><kwd>empty</kwd><def></def><sym>())</sym><br />
<def></def>            <sym>{</sym><br />
<def>               begin</def><sym>.</sym><def>chunk_</def> <sym>=</sym> <def>data_</def><sym>.</sym><def></def><kwd>erase</kwd><def></def><sym>(</sym><def>begin</def><sym>.</sym><def>chunk_</def><sym>);</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>            <kwa>return</kwa> <def></def><kwd>iterator</kwd><def></def><sym>(</sym><def>begin</def><sym>.</sym><def>chunk_</def><sym>,</sym> <def>begin</def><sym>.</sym><def>chunk_</def><sym>-&gt;</sym><def></def><kwd>begin</kwd><def></def><sym>() +</sym> <def>offset</def><sym>);</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>         <kwa>else</kwa><br />
<def></def>         <sym>{</sym><br />
<def>            begin</def><sym>.</sym><def>chunk_</def><sym>-&gt;</sym><def></def><kwd>replace</kwd><def></def><sym>(</sym><def>begin</def><sym>.</sym><def>position_</def><sym>,</sym> <def>begin</def><sym>.</sym><def>chunk_</def><sym>-&gt;</sym><def></def><kwd>end</kwd><def></def><sym>(),</sym> <def>replacement</def><sym>);</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>begin</def><sym>.</sym><def>chunk_</def><sym>-&gt;</sym><def></def><kwd>empty</kwd><def></def><sym>())</sym><br />
<def></def>            <sym>{</sym><br />
<def>               begin</def><sym>.</sym><def>chunk_</def> <sym>=</sym> <def>data_</def><sym>.</sym><def></def><kwd>erase</kwd><def></def><sym>(</sym><def>begin</def><sym>.</sym><def>chunk_</def><sym>);</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>            <kwa>else</kwa><br />
<def></def>            <sym>{</sym><br />
<def></def>               <sym>++</sym><def>begin</def><sym>.</sym><def>chunk_</def><sym>;</sym><br />
<def></def>            <sym>}</sym><br />
<def>            data_</def><sym>.</sym><def></def><kwd>erase</kwd><def></def><sym>(</sym><def>begin</def><sym>.</sym><def>chunk_</def><sym>,</sym> <def>end</def><sym>.</sym><def>chunk_</def><sym>);</sym><br />
<def>            end</def><sym>.</sym><def>chunk_</def><sym>-&gt;</sym><def></def><kwd>erase</kwd><def></def><sym>(</sym><def>end</def><sym>.</sym><def>chunk_</def><sym>-&gt;</sym><def></def><kwd>begin</kwd><def></def><sym>(),</sym> <def>end</def><sym>.</sym><def>position_</def><sym>);</sym><br />
<def></def>            <kwa>return</kwa> <def></def><kwd>iterator</kwd><def></def><sym>(</sym><def>end</def><sym>.</sym><def>chunk_</def><sym>,</sym> <def>end</def><sym>.</sym><def>chunk_</def><sym>-&gt;</sym><def></def><kwd>begin</kwd><def></def><sym>());</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><br />
   <kwc>private</kwc><def></def><sym>:</sym><br />
<def><br />
      std</def><sym>::</sym><def>list</def><sym>&lt;</sym> <def>std</def><sym>::</sym><def>string</def> <sym>&gt;</sym> <def>data_</def><sym>;</sym><br />
<def></def><sym>};</sym><br />
<def></def><br />
<kwb>bool</kwb> <def></def><kwc>operator</kwc><def></def><sym>==(</sym><def></def><kwb>const</kwb> <def>rope</def><sym>::</sym><def>iterator</def> <sym>&amp;</sym> <def>lhs</def><sym>,</sym> <def></def><kwb>const</kwb> <def>rope</def><sym>::</sym><def>iterator</def> <sym>&amp;</sym> <def>rhs</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>   <kwa>return</kwa> <def>lhs</def><sym>.</sym><def>chunk_</def> <sym>==</sym> <def>rhs</def><sym>.</sym><def>chunk_</def> <sym>&amp;&amp;</sym> <def>lhs</def><sym>.</sym><def>position_</def> <sym>==</sym> <def>rhs</def><sym>.</sym><def>position_</def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>bool</kwb> <def></def><kwc>operator</kwc><def></def><sym>!=(</sym><def></def><kwb>const</kwb> <def>rope</def><sym>::</sym><def>iterator</def> <sym>&amp;</sym> <def>lhs</def><sym>,</sym> <def></def><kwb>const</kwb> <def>rope</def><sym>::</sym><def>iterator</def> <sym>&amp;</sym> <def>rhs</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>   <kwa>return</kwa> <def></def><sym>!(</sym><def>lhs</def> <sym>==</sym> <def>rhs</def><sym>);</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwc>template</kwc> <def></def><sym>&lt;</sym> <def>typename type</def><sym>,</sym> <def>std</def><sym>::</sym><def></def><kwb>size_t</kwb> <def>n</def> <sym>&gt;</sym><br />
<def>std</def><sym>::</sym><def></def><kwb>size_t</kwb> <def></def><kwd>size</kwd><def></def><sym>(</sym><def></def><kwd>type</kwd> <def></def><sym>(&amp;)[</sym><def>n</def><sym>])</sym><br />
<def></def><sym>{</sym><br />
<def></def>   <kwa>return</kwa> <def>n</def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>void</kwb> <def></def><kwd>regex_replace</kwd><def></def><sym>(</sym><def>rope</def> <sym>&amp;</sym> <def>data</def><sym>,</sym> <def>boost</def><sym>::</sym><def>regex</def> <kwb>const</kwb> <def></def><sym>&amp;</sym> <def>pattern</def><sym>,</sym> <def></def><kwb>char const</kwb> <def></def><sym>*</sym> <def>replacement</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def>   rope</def><sym>::</sym><def>iterator begin</def> <sym>=</sym> <def>data</def><sym>.</sym><def></def><kwd>begin</kwd><def></def><sym>();</sym><br />
<def>   rope</def><sym>::</sym><def>iterator end</def> <sym>=</sym> <def>data</def><sym>.</sym><def></def><kwd>end</kwd><def></def><sym>();</sym><br />
<def>   boost</def><sym>::</sym><def>match_results</def><sym>&lt;</sym> <def>rope</def><sym>::</sym><def>iterator</def> <sym>&gt;</sym> <def>results</def><sym>;</sym><br />
<def></def>   <kwa>while</kwa> <def></def><sym>(</sym><def>boost</def><sym>::</sym><def></def><kwd>regex_search</kwd><def></def><sym>(</sym><def>begin</def><sym>,</sym> <def>end</def><sym>,</sym> <def>results</def><sym>,</sym> <def>pattern</def><sym>))</sym><br />
<def></def>   <sym>{</sym><br />
<def>      rope</def><sym>::</sym><def>iterator match_begin</def> <sym>=</sym> <def>begin</def> <sym>+</sym> <def>results</def><sym>.</sym><def></def><kwd>position</kwd><def></def><sym>();</sym><br />
<def>      rope</def><sym>::</sym><def>iterator match_end</def> <sym>=</sym> <def>match_begin</def> <sym>+</sym> <def>results</def><sym>.</sym><def></def><kwd>length</kwd><def></def><sym>();</sym><br />
<def>      begin</def> <sym>=</sym> <def>data</def><sym>.</sym><def></def><kwd>replace</kwd><def></def><sym>(</sym><def>match_begin</def><sym>,</sym> <def>match_end</def><sym>,</sym> <def>replacement</def><sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>int</kwb> <def></def><kwd>main</kwd><def></def><sym>()</sym><br />
<def></def><sym>{</sym><br />
<def>   rope</def> <kwd>data</kwd><def></def><sym>(</sym><def>std</def><sym>::</sym><def>cin</def><sym>);</sym><br />
<def>   std</def><sym>::</sym><def></def><kwb>size_t</kwb> <def>initial_length</def> <sym>=</sym> <def>data</def><sym>.</sym><def></def><kwd>length</kwd><def></def><sym>();</sym><br />
<def>   boost</def><sym>::</sym><def>regex</def> <kwb>const</kwb> <def></def><kwd>strip</kwd><def></def><sym>(</sym><def></def><str>&quot;&gt;[^</str><esc>\\</esc><str>n]*</str><esc>\\</esc><str>n|</str><esc>\\</esc><str>n&quot;</str><def></def><sym>);</sym><br />
<def></def>   <kwd>regex_replace</kwd><def></def><sym>(</sym><def>data</def><sym>,</sym> <def>strip</def><sym>,</sym> <def></def><str>&quot;&quot;</str><def></def><sym>);</sym><br />
<def></def>   <kwb>static char const</kwb> <def></def><sym>*</sym> <def>patterns</def><sym>[] = {</sym><br />
<def></def>      <str>&quot;agggtaaa|tttaccct&quot;</str><def></def><sym>,</sym><br />
<def></def>      <str>&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</str><def></def><sym>,</sym><br />
<def></def>      <str>&quot;a[act]ggtaaa|tttacc[agt]t&quot;</str><def></def><sym>,</sym><br />
<def></def>      <str>&quot;ag[act]gtaaa|tttac[agt]ct&quot;</str><def></def><sym>,</sym><br />
<def></def>      <str>&quot;agg[act]taaa|ttta[agt]cct&quot;</str><def></def><sym>,</sym><br />
<def></def>      <str>&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</str><def></def><sym>,</sym><br />
<def></def>      <str>&quot;agggt[cgt]aa|tt[acg]accct&quot;</str><def></def><sym>,</sym><br />
<def></def>      <str>&quot;agggta[cgt]a|t[acg]taccct&quot;</str><def></def><sym>,</sym><br />
<def></def>      <str>&quot;agggtaa[cgt]|[acg]ttaccct&quot;</str><def></def><br />
   <sym>};</sym><br />
<def></def>   <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def></def><kwd>size</kwd><def></def><sym>(</sym><def>patterns</def><sym>); ++</sym><def>i</def><sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def></def>      <kwb>const</kwb> <def>boost</def><sym>::</sym><def>regex</def> <kwd>pattern</kwd><def></def><sym>(</sym><def>patterns</def><sym>[</sym><def>i</def><sym>]);</sym><br />
<def></def>      <kwc>typedef</kwc> <def>boost</def><sym>::</sym><def>regex_iterator</def><sym>&lt;</sym> <def>rope</def><sym>::</sym><def>iterator</def> <sym>&gt;</sym> <def>match_iterator</def><sym>;</sym><br />
<def>      std</def><sym>::</sym><def>cout</def> <sym>&lt;&lt;</sym> <def>patterns</def><sym>[</sym><def>i</def><sym>] &lt;&lt;</sym> <def></def><str>' '</str><def></def> <sym>&lt;&lt;</sym> <def>std</def><sym>::</sym><def></def><kwd>distance</kwd><def></def><sym>(</sym><def></def><kwd>match_iterator</kwd><def></def><sym>(</sym><def>data</def><sym>.</sym><def></def><kwd>begin</kwd><def></def><sym>(),</sym> <def>data</def><sym>.</sym><def></def><kwd>end</kwd><def></def><sym>(),</sym> <def>pattern</def><sym>),</sym> <def></def><kwd>match_iterator</kwd><def></def><sym>()) &lt;&lt;</sym> <def>std</def><sym>::</sym><def>endl</def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def>   std</def><sym>::</sym><def>cout</def> <sym>&lt;&lt;</sym> <def></def><str>'</str><esc>\n</esc><str>'</str><def></def> <sym>&lt;&lt;</sym> <def>initial_length</def> <sym>&lt;&lt;</sym> <def></def><str>'</str><esc>\n</esc><str>'</str><def></def> <sym>&lt;&lt;</sym> <def>data</def><sym>.</sym><def></def><kwd>length</kwd><def></def><sym>() &lt;&lt;</sym> <def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>;</sym><br />
<def></def>   <kwc>typedef</kwc> <def>std</def><sym>::</sym><def>pair</def><sym>&lt;</sym> <def></def><kwb>char const</kwb> <def></def><sym>*,</sym> <def></def><kwb>char const</kwb> <def></def><sym>* &gt;</sym> <def>pair</def><sym>;</sym><br />
<def></def>   <kwb>static const</kwb> <def>pair alternatives</def><sym>[] = {</sym><br />
<def></def>      <kwd>pair</kwd><def></def><sym>(</sym><def></def><str>&quot;B&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(c|g|t)&quot;</str><def></def><sym>),</sym> <def></def><kwd>pair</kwd><def></def><sym>(</sym><def></def><str>&quot;D&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(a|g|t)&quot;</str><def></def><sym>),</sym> <def></def><kwd>pair</kwd><def></def><sym>(</sym><def></def><str>&quot;H&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(a|c|t)&quot;</str><def></def><sym>),</sym><br />
<def></def>      <kwd>pair</kwd><def></def><sym>(</sym><def></def><str>&quot;K&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(g|t)&quot;</str><def></def><sym>),</sym> <def></def><kwd>pair</kwd><def></def><sym>(</sym><def></def><str>&quot;M&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(a|c)&quot;</str><def></def><sym>),</sym> <def></def><kwd>pair</kwd><def></def><sym>(</sym><def></def><str>&quot;N&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(a|c|g|t)&quot;</str><def></def><sym>),</sym><br />
<def></def>      <kwd>pair</kwd><def></def><sym>(</sym><def></def><str>&quot;R&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(a|g)&quot;</str><def></def><sym>),</sym> <def></def><kwd>pair</kwd><def></def><sym>(</sym><def></def><str>&quot;S&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(c|t)&quot;</str><def></def><sym>),</sym> <def></def><kwd>pair</kwd><def></def><sym>(</sym><def></def><str>&quot;V&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(a|c|g)&quot;</str><def></def><sym>),</sym><br />
<def></def>      <kwd>pair</kwd><def></def><sym>(</sym><def></def><str>&quot;W&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(a|t)&quot;</str><def></def><sym>),</sym> <def></def><kwd>pair</kwd><def></def><sym>(</sym><def></def><str>&quot;Y&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;(c|t)&quot;</str><def></def><sym>)</sym><br />
<def></def>   <sym>};</sym><br />
<def></def>   <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def></def><kwa>sizeof</kwa><def></def><sym>(</sym><def>alternatives</def><sym>) /</sym> <def></def><kwa>sizeof</kwa><def></def><sym>(</sym><def>alternatives</def><sym>[</sym><def></def><num>0</num><def></def><sym>]); ++</sym><def>i</def><sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def></def>      <kwd>regex_replace</kwd><def></def><sym>(</sym><def>data</def><sym>,</sym> <def>boost</def><sym>::</sym><def></def><kwd>regex</kwd><def></def><sym>(</sym><def>alternatives</def><sym>[</sym><def>i</def><sym>].</sym><def>first</def><sym>),</sym> <def>alternatives</def><sym>[</sym><def>i</def><sym>].</sym><def>second</def><sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def>   std</def><sym>::</sym><def>cout</def> <sym>&lt;&lt;</sym> <def>data</def><sym>.</sym><def></def><kwd>length</kwd><def></def><sym>() &lt;&lt;</sym> <def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
</source>
