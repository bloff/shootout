<source>
<def></def><slc>;; The Computer Language Benchmarks Game</slc><br />
<def></def><slc>;;; http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>;;;</slc><br />
<def></def><slc>;; Written by Dima Dorfman, 2004</slc><br />
<def></def><slc>;; Slightly improved by Sven Hartrumpf, 2005-2006</slc><br />
<def></def><slc>;; Ever-so-slightly tweaked for MzScheme by Brent Fulgham</slc><br />
<def></def><slc>;; PLT-ized for v4.0 by Matthew Flatt</slc><br />
<def><br />
#lang scheme</def><sym>/</sym><def>base</def><br />
<sym>(</sym><def>require scheme</def><sym>/</sym><def>cmdline</def><sym>)</sym><br />
<def></def><br />
<sym>(</sym><def>define</def> <sym>(</sym><def>fannkuch n</def><sym>)</sym><br />
<def></def>  <sym>(</sym><def>let</def> <sym>([</sym><def>pi</def> <sym>(</sym><def></def><kwa>list</kwa><def></def><sym>-&gt;</sym><def>vector</def><br />
             <sym>(</sym><def>for</def><sym>/</sym><def></def><kwa>list</kwa> <def></def><sym>([</sym><def>i</def> <sym>(</sym><def>in</def><sym>-</sym><def>range n</def><sym>)])</sym> <def>i</def><sym>))]</sym><br />
<def></def>        <sym>[</sym><def>tmp</def> <sym>(</sym><def>make</def><sym>-</sym><def>vector n</def><sym>)]</sym><br />
<def></def>        <sym>[</sym><def>count</def> <sym>(</sym><def>make</def><sym>-</sym><def>vector n</def><sym>)])</sym><br />
<def></def>    <sym>(</sym><def>let loop</def> <sym>([</sym><def>flips</def> <num>0</num><def></def><sym>]</sym><br />
<def></def>               <sym>[</sym><def>perms</def> <num>0</num><def></def><sym>]</sym><br />
<def></def>               <sym>[</sym><def>r n</def><sym>])</sym><br />
<def></def>      <sym>(</sym><def>when</def> <sym>(&lt;</sym> <def>perms</def> <num>30</num><def></def><sym>)</sym><br />
<def></def>        <sym>(</sym><def>for</def> <sym>([</sym><def>x</def> <sym>(</sym><def>in</def><sym>-</sym><def>vector pi</def><sym>)])</sym><br />
<def></def>          <sym>(</sym><def>display</def> <sym>(</sym><def>add1 x</def><sym>)))</sym><br />
<def></def>        <sym>(</sym><def>newline</def><sym>))</sym><br />
<def></def>      <sym>(</sym><def>for</def> <sym>([</sym><def>i</def> <sym>(</sym><def>in</def><sym>-</sym><def>range r</def><sym>)])</sym><br />
<def></def>        <sym>(</sym><def>vector</def><sym>-</sym><def></def><kwa>set</kwa><def></def><sym>!</sym> <def>count i</def> <sym>(</sym><def>add1 i</def><sym>)))</sym><br />
<def></def>      <sym>(</sym><def>let</def> <sym>((</sym><def>flips2</def> <sym>(</sym><def></def><kwa>max</kwa> <def></def><sym>(</sym><def>count</def><sym>-</sym><def>flips pi tmp</def><sym>)</sym> <def>flips</def><sym>)))</sym><br />
<def></def>        <sym>(</sym><def>let loop2</def> <sym>([</sym><def>r</def> <num>1</num><def></def><sym>])</sym><br />
<def></def>          <sym>(</sym><def></def><kwa>if</kwa> <def></def><sym>(=</sym> <def>r n</def><sym>)</sym><br />
<def>              flips2</def><br />
              <sym>(</sym><def>let</def> <sym>((</sym><def>perm0</def> <sym>(</sym><def>vector</def><sym>-</sym><def>ref pi</def> <num>0</num><def></def><sym>)))</sym><br />
<def></def>                <sym>(</sym><def>for</def> <sym>([</sym><def>i</def> <sym>(</sym><def>in</def><sym>-</sym><def>range r</def><sym>)])</sym><br />
<def></def>                  <sym>(</sym><def>vector</def><sym>-</sym><def></def><kwa>set</kwa><def></def><sym>!</sym> <def>pi i</def> <sym>(</sym><def>vector</def><sym>-</sym><def>ref pi</def> <sym>(</sym><def>add1 i</def><sym>))))</sym><br />
<def></def>                <sym>(</sym><def>vector</def><sym>-</sym><def></def><kwa>set</kwa><def></def><sym>!</sym> <def>pi r perm0</def><sym>)</sym><br />
<def></def>                <sym>(</sym><def>vector</def><sym>-</sym><def></def><kwa>set</kwa><def></def><sym>!</sym> <def>count r</def> <sym>(</sym><def>sub1</def> <sym>(</sym><def>vector</def><sym>-</sym><def>ref count r</def><sym>)))</sym><br />
<def></def>                <sym>(</sym><def></def><kwa>cond</kwa><br />
<def></def>                 <sym>[(&lt;= (</sym><def>vector</def><sym>-</sym><def>ref count r</def><sym>)</sym> <def></def><num>0</num><def></def><sym>)</sym><br />
<def></def>                  <sym>(</sym><def>loop2</def> <sym>(</sym><def>add1 r</def><sym>))]</sym><br />
<def></def>                 <sym>[</sym><def>else</def> <sym>(</sym><def>loop flips2</def> <sym>(</sym><def>add1 perms</def><sym>)</sym> <def>r</def><sym>)]))))))))</sym><br />
<def></def><br />
<sym>(</sym><def>define</def> <sym>(</sym><def>count</def><sym>-</sym><def>flips pi rho</def><sym>)</sym><br />
<def></def>  <sym>(</sym><def>vector</def><sym>-</sym><def>copy</def><sym>!</sym> <def>rho</def> <num>0</num> <def>pi</def><sym>)</sym><br />
<def></def>  <sym>(</sym><def>let loop</def> <sym>([</sym><def>i</def> <num>0</num><def></def><sym>])</sym><br />
<def></def>    <sym>(</sym><def></def><kwa>if</kwa> <def></def><sym>(= (</sym><def>vector</def><sym>-</sym><def>ref rho</def> <num>0</num><def></def><sym>)</sym> <def></def><num>0</num><def></def><sym>)</sym><br />
<def>        i</def><br />
        <sym>(</sym><def>begin</def><br />
          <sym>(</sym><def>vector</def><sym>-</sym><def></def><kwa>reverse</kwa><def></def><sym>-</sym><def>slice</def><sym>!</sym> <def>rho</def> <num>0</num> <def></def><sym>(</sym><def>add1</def> <sym>(</sym><def>vector</def><sym>-</sym><def>ref rho</def> <num>0</num><def></def><sym>)))</sym><br />
<def></def>          <sym>(</sym><def>loop</def> <sym>(</sym><def>add1 i</def><sym>))))))</sym><br />
<def></def><br />
<sym>(</sym><def>define</def> <sym>(</sym><def>vector</def><sym>-</sym><def></def><kwa>reverse</kwa><def></def><sym>-</sym><def>slice</def><sym>!</sym> <def>v i j</def><sym>)</sym><br />
<def></def>  <sym>(</sym><def>let loop</def> <sym>([</sym><def>i i</def><sym>]</sym><br />
<def></def>             <sym>[</sym><def>j</def> <sym>(</sym><def>sub1 j</def><sym>)])</sym><br />
<def></def>    <sym>(</sym><def>when</def> <sym>(&gt;</sym> <def>j i</def><sym>)</sym><br />
<def></def>      <sym>(</sym><def>vector</def><sym>-</sym><def>swap</def><sym>!</sym> <def>v i j</def><sym>)</sym><br />
<def></def>      <sym>(</sym><def>loop</def> <sym>(</sym><def>add1 i</def><sym>) (</sym><def>sub1 j</def><sym>)))))</sym><br />
<def></def><br />
<sym>(</sym><def>define</def> <sym>(</sym><def>vector</def><sym>-</sym><def>swap</def><sym>!</sym> <def>v i j</def><sym>)</sym><br />
<def></def>  <sym>(</sym><def>let</def> <sym>((</sym><def>t</def> <sym>(</sym><def>vector</def><sym>-</sym><def>ref v i</def><sym>)))</sym><br />
<def></def>    <sym>(</sym><def>vector</def><sym>-</sym><def></def><kwa>set</kwa><def></def><sym>!</sym> <def>v i</def> <sym>(</sym><def>vector</def><sym>-</sym><def>ref v j</def><sym>))</sym><br />
<def></def>    <sym>(</sym><def>vector</def><sym>-</sym><def></def><kwa>set</kwa><def></def><sym>!</sym> <def>v j t</def><sym>)))</sym><br />
<def></def><br />
<sym>(</sym><def></def><kwa>command</kwa><def></def><sym>-</sym><def></def><kwa>line</kwa> <def>#</def><sym>:</sym><def>args</def> <sym>(</sym><def>n</def><sym>)</sym><br />
<def></def>              <sym>(</sym><def>printf</def> <str>&quot;Pfannkuchen(~a) = ~a</str><esc>\</esc><str>n&quot;</str><def><br />
                      n</def><br />
                      <sym>(</sym><def>fannkuch</def> <sym>(</sym><def>string</def><sym>-&gt;</sym><def>number n</def><sym>))))</sym><def></def><br />
</source>
