<source>
<def></def><com>/**</com><br />
<com> * The Computer Language Benchmarks game</com><br />
<com> * http://shootout.alioth.debian.org/</com><br />
<com> *</com><br />
<com> * Contributed by Rodney Drenth</com><br />
<com> *</com><br />
<com> */</com><def></def><br />
<br />
<br />
<dir>#include &lt;stdio.h&gt;</dir><br />
<def></def><dir>#include &lt;stdlib.h&gt;</dir><br />
<def></def><br />
<kwb>void</kwb> <def></def><kwd>PrintPerm</kwd><def></def><sym>(</sym> <def></def><kwb>int</kwb> <def></def><sym>*</sym><def>perm</def><sym>,</sym> <def></def><kwb>int</kwb> <def>n</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>   <kwa>while</kwa><def></def><sym>(</sym><def>n</def><sym>-- &gt;</sym><def></def><num>0</num><def></def><sym>)</sym> <def></def><kwd>printf</kwd><def></def><sym>(</sym><def></def><str>&quot;%d&quot;</str><def></def><sym>,</sym> <def></def><num>1</num><def></def><sym>+*</sym><def>perm</def><sym>++);</sym><br />
<def></def>   <kwd>printf</kwd><def></def><sym>(</sym><def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>);</sym><br />
<def></def><sym>}</sym><br />
<def></def><dir>#define XCNG(a,b,t) {t=a;a=b;b=t;}</dir><br />
<def></def><br />
<kwb>int</kwb> <def></def><kwd>fannkuch</kwd><def></def><sym>(</sym> <def></def><kwb>int</kwb> <def>n</def> <sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>   <kwb>int</kwb>      <def></def><sym>*</sym><def>count</def><sym>, *</sym><def>perm</def><sym>, *</sym><def>perm1</def><sym>, *</sym><def>perm2</def><sym>, *</sym><def>p1</def><sym>, *</sym><def>pA</def><sym>;</sym><br />
<def></def>   <kwb>int</kwb>      <def></def><sym>**</sym><def>prmts</def><sym>;</sym><br />
<def></def>   <kwb>int</kwb>      <def>flips</def><sym>,</sym> <def>maxFlips</def><sym>;</sym><br />
<def></def>   <kwb>int</kwb>      <def>r</def><sym>,</sym> <def>i</def><sym>,</sym> <def>k</def><sym>,</sym> <def>m</def><sym>,</sym> <def>nx</def><sym>;</sym><br />
<def></def>   <kwb>int</kwb>      <def>check</def> <sym>=</sym> <def></def><num>30</num><def></def><sym>;</sym><br />
<def></def><br />
    <kwa>if</kwa> <def></def><sym>(</sym><def>n</def> <sym>&lt;=</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>      <kwa>return</kwa> <def></def><num>0</num><def></def><sym>;</sym><br />
<def><br />
   prmts</def> <sym>=</sym> <def></def><kwd>calloc</kwd><def></def><sym>(</sym> <def>n</def><sym>,</sym> <def></def><kwa>sizeof</kwa><def></def><sym>(</sym> <def></def><kwb>int</kwb> <def></def><sym>*));</sym><br />
<def>   perm1</def> <sym>=</sym> <def>pA</def> <sym>=</sym> <def></def><kwd>calloc</kwd><def></def><sym>( (</sym><def>n</def><sym>+</sym><def></def><num>4</num><def></def><sym>)*</sym><def>n</def><sym>,</sym> <def></def><kwa>sizeof</kwa><def></def><sym>(</sym><def></def><kwb>int</kwb><def></def><sym>));</sym><br />
<def>   perm2</def> <sym>=</sym> <def>perm1</def> <sym>+</sym> <def>n</def><sym>;</sym><br />
<def>   count</def> <sym>=</sym> <def>perm1</def> <sym>+</sym> <def></def><num>2</num><def></def><sym>*</sym><def>n</def><sym>;</sym><br />
<def>   perm</def>  <sym>=</sym> <def>perm1</def> <sym>+</sym> <def></def><num>3</num><def></def><sym>*</sym><def>n</def><sym>;</sym><br />
<def>   p1</def> <sym>=</sym> <def>perm1</def> <sym>+</sym> <def></def><num>4</num><def></def><sym>*</sym><def>n</def><sym>;</sym><br />
<def></def>   <kwa>for</kwa> <def></def><sym>(</sym><def>r</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>r</def><sym>&lt;</sym><def>n</def><sym>;</sym> <def>r</def><sym>++) {</sym><br />
<def>      prmts</def><sym>[</sym><def>r</def><sym>] =</sym> <def>perm1</def> <sym>+ (</sym><def></def><num>4</num><def></def><sym>+</sym><def>r</def><sym>)*</sym><def>n</def><sym>;</sym><br />
<def>      p1</def><sym>[</sym><def>r</def><sym>] =</sym> <def>perm1</def><sym>[</sym><def>r</def><sym>] =</sym> <def>r</def><sym>;</sym><br />
<def>      count</def><sym>[</sym><def>r</def><sym>] =</sym> <def>r</def><sym>+</sym><def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def>   <kwa>for</kwa> <def></def><sym>(</sym><def>nx</def><sym>=</sym><def></def><num>1</num><def></def><sym>;</sym> <def>nx</def><sym>&lt;</sym><def>n</def><sym>;</sym> <def>nx</def><sym>++) {</sym>   <def></def><slc>// compute permutation operators</slc><br />
<def></def>      <kwb>int</kwb> <def></def><sym>*</sym><def>p2</def> <sym>=</sym> <def>prmts</def><sym>[</sym><def>nx</def><sym>];</sym><br />
<def></def>      <kwa>for</kwa> <def></def><sym>(</sym><def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>i</def><sym>&lt;</sym><def>nx</def><sym>;</sym> <def>i</def><sym>++)</sym> <def>p2</def><sym>[</sym><def>i</def><sym>] =</sym> <def>p1</def><sym>[</sym><def>i</def><sym>+</sym><def></def><num>1</num><def></def><sym>];</sym><br />
<def>      p2</def><sym>[</sym><def>i</def><sym>++] =</sym> <def>p1</def><sym>[</sym><def></def><num>0</num><def></def><sym>];</sym><br />
<def></def>      <kwa>for</kwa> <def></def><sym>( ;</sym> <def>i</def><sym>&lt;</sym><def>n</def><sym>;</sym> <def>i</def><sym>++)</sym> <def>p2</def><sym>[</sym><def>i</def><sym>] =</sym> <def>p1</def><sym>[</sym><def>i</def><sym>];</sym><br />
<def>      p1</def><sym>=</sym><def>p2</def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def><br />
   m</def> <sym>=</sym> <def>n</def><sym>-</sym><def></def><num>1</num><def></def><sym>;</sym><br />
<def>   maxFlips</def> <sym>=</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def>   r</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>   <kwa>while</kwa> <def></def><sym>(</sym><def></def><num>1</num><def></def><sym>) {</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>check</def><sym>&gt;</sym><def></def><num>0</num> <def></def><sym>) {</sym><br />
<def></def>         <kwd>PrintPerm</kwd><def></def><sym>(</sym> <def>perm1</def><sym>,</sym> <def>n</def><sym>);</sym><br />
<def>         check</def><sym>--;</sym><br />
<def></def>      <sym>}</sym><br />
<def>      k</def> <sym>=</sym> <def>perm1</def><sym>[</sym><def></def><num>0</num><def></def><sym>];</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym> <def>perm1</def><sym>[</sym><def>k</def><sym>]!=</sym><def></def><num>0</num> <def></def><sym>&amp;&amp; (</sym><def>perm1</def><sym>[</sym><def>m</def><sym>]!=</sym> <def>m</def><sym>)) {</sym><br />
<def></def>         <kwa>for</kwa> <def></def><sym>(</sym><def>i</def><sym>=</sym><def>n</def><sym>; --</sym><def>i</def><sym>&gt;</sym><def></def><num>0</num><def></def><sym>; )</sym><br />
<def>            perm</def><sym>[</sym><def>i</def><sym>] =</sym> <def>perm1</def><sym>[</sym><def>i</def><sym>];</sym><br />
<def>         perm</def><sym>[</sym><def></def><num>0</num><def></def><sym>] =</sym> <def>k</def><sym>;</sym><br />
<def></def>         <kwa>for</kwa> <def></def><sym>(</sym><def>flips</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>k</def><sym>;</sym> <def>flips</def><sym>++) {</sym><br />
<def></def>            <kwb>int</kwb> <def>l</def><sym>, *</sym><def>pk</def><sym>;</sym><br />
<def>            l</def> <sym>= (</sym><def>k</def><sym>-</sym><def></def><num>1</num><def></def><sym>)/</sym><def></def><num>2</num><def></def><sym>;</sym><br />
<def></def>            <kwa>for</kwa><def></def><sym>(</sym> <def>pk</def> <sym>=</sym> <def>perm</def><sym>+</sym><def>k</def><sym>;</sym> <def>l</def><sym>&gt;=</sym><def></def><num>0</num><def></def><sym>; --</sym><def>l</def><sym>) {</sym><br />
<def></def>               <kwd>XCNG</kwd><def></def><sym>(*(</sym><def>pk</def><sym>-</sym><def>l</def><sym>), *(</sym><def>perm</def><sym>+</sym><def>l</def><sym>),</sym> <def>k</def><sym>);</sym><br />
<def></def>            <sym>};</sym><br />
<def></def>            <slc>// Note: final exchange leaves perm[0] in k</slc><br />
<def></def>          <sym>}</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>maxFlips</def> <sym>&lt;</sym> <def>flips</def><sym>)</sym> <def>maxFlips</def> <sym>=</sym> <def>flips</def><sym>;</sym><br />
<def></def>      <sym>}</sym><br />
<def>      r</def> <sym>=</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>      <kwa>while</kwa> <def></def><sym>(--</sym><def>count</def><sym>[</sym><def>r</def><sym>] ==</sym> <def></def><num>0</num><def></def><sym>) {</sym><br />
<def>         r</def> <sym>=</sym> <def>count</def><sym>[</sym><def>r</def><sym>] =</sym> <def>r</def><sym>+</sym><def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>r</def><sym>==</sym> <def>n</def><sym>) {</sym><br />
<def></def>            <kwd>free</kwd><def></def><sym>(</sym><def>prmts</def><sym>);</sym> <def></def><kwd>free</kwd><def></def><sym>(</sym><def>pA</def><sym>);</sym><br />
<def></def>            <kwa>return</kwa> <def>maxFlips</def><sym>;</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>      <slc>// generate permutation nx=5 first time.</slc><br />
<def></def>      <kwd>XCNG</kwd><def></def><sym>(</sym><def>perm1</def><sym>,</sym><def>perm2</def><sym>,</sym><def>p1</def><sym>);</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>r</def><sym>&gt;</sym><def></def><num>1</num><def></def><sym>)</sym> <def>nx</def> <sym>=</sym> <def>r</def><sym>+</sym><def></def><num>1</num><def></def><sym>;</sym><br />
<def>      p1</def> <sym>=</sym> <def>prmts</def><sym>[</sym><def>r</def><sym>];</sym><br />
<def></def>      <kwa>for</kwa> <def></def><sym>(</sym><def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>i</def><sym>&lt;</sym> <def>nx</def><sym>;</sym> <def>i</def><sym>++)</sym><br />
<def>         perm1</def><sym>[</sym><def>i</def><sym>] =</sym> <def>perm2</def><sym>[</sym><def>p1</def><sym>[</sym><def>i</def><sym>]];</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>int</kwb> <def></def><kwd>main</kwd><def></def><sym>(</sym> <def></def><kwb>int</kwb> <def>argc</def><sym>,</sym> <def></def><kwb>char</kwb><def></def><sym>*</sym> <def>argv</def><sym>[] )</sym><br />
<def></def><sym>{</sym><br />
<def></def>    <kwb>int</kwb>      <def>n</def> <sym>= (</sym><def>argc</def><sym>&gt;</sym><def></def><num>1</num><def></def><sym>)</sym> <def>?</def> <kwd>atoi</kwd><def></def><sym>(</sym><def>argv</def><sym>[</sym><def></def><num>1</num><def></def><sym>]) :</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>    <kwd>printf</kwd><def></def><sym>(</sym><def></def><str>&quot;Pfannkuchen(%d) = %d</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def>n</def><sym>,</sym> <def></def><kwd>fannkuch</kwd><def></def><sym>(</sym><def>n</def><sym>));</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
