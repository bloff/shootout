<span class="hl com">/**</span>
<span class="hl com"> * fannkuch.pike by Robert Brandner</span>
<span class="hl com"> * heavily based on the Java JDK-client version by Paul Lofte</span>
<span class="hl com"> */</span>
<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">array</span><span class="hl sym">(</span><span class="hl kwb">string</span><span class="hl sym">)</span> argv<span class="hl sym">) {</span>
	<span class="hl kwb">int</span> n <span class="hl sym">= (</span><span class="hl kwb">int</span><span class="hl sym">)</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">];</span>
	<span class="hl kwa">write</span><span class="hl sym">(</span><span class="hl str">&quot;Pfannkuchen(&quot;</span> <span class="hl sym">+</span> n <span class="hl sym">+</span> <span class="hl str">&quot;) = &quot;</span> <span class="hl sym">+</span> <span class="hl kwd">fannkuch</span><span class="hl sym">(</span>n<span class="hl sym">)+</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">fannkuch</span><span class="hl sym">(</span><span class="hl kwb">int</span> n<span class="hl sym">) {</span>
    <span class="hl kwb">int</span> check <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl kwb">array</span><span class="hl sym">(</span><span class="hl kwb">int</span><span class="hl sym">)</span> perm <span class="hl sym">=</span> <span class="hl kwa">allocate</span><span class="hl sym">(</span>n<span class="hl sym">);</span>
    <span class="hl kwb">array</span><span class="hl sym">(</span><span class="hl kwb">int</span><span class="hl sym">)</span> perm1 <span class="hl sym">=</span> <span class="hl kwa">allocate</span><span class="hl sym">(</span>n<span class="hl sym">);</span>
    <span class="hl kwb">array</span><span class="hl sym">(</span><span class="hl kwb">int</span><span class="hl sym">)</span> count <span class="hl sym">=</span> <span class="hl kwa">allocate</span><span class="hl sym">(</span>n<span class="hl sym">);</span>
    <span class="hl kwb">array</span><span class="hl sym">(</span><span class="hl kwb">int</span><span class="hl sym">)</span> maxPerm <span class="hl sym">=</span> <span class="hl kwa">allocate</span><span class="hl sym">(</span>n<span class="hl sym">);</span>
    <span class="hl kwb">int</span> maxFlipsCount <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl kwb">int</span> m <span class="hl sym">=</span> n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>

    <span class="hl kwd">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> n<span class="hl sym">;</span> i<span class="hl sym">++)</span> perm1<span class="hl sym">[</span>i<span class="hl sym">] =</span> i<span class="hl sym">;</span>
    <span class="hl kwb">int</span> r <span class="hl sym">=</span> n<span class="hl sym">;</span>

    <span class="hl kwd">while</span> <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">) {</span>
        <span class="hl slc">// write-out the first 30 permutations</span>
        <span class="hl kwd">if</span> <span class="hl sym">(</span>check <span class="hl sym">&lt;</span> <span class="hl num">30</span><span class="hl sym">){</span>
          <span class="hl kwd">for</span><span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>n<span class="hl sym">;</span> i<span class="hl sym">++)</span> <span class="hl kwa">write</span><span class="hl sym">((</span><span class="hl kwb">string</span><span class="hl sym">)(</span>perm1<span class="hl sym">[</span>i<span class="hl sym">]+</span><span class="hl num">1</span><span class="hl sym">));</span>
          <span class="hl kwa">write</span><span class="hl sym">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">);</span>
          check<span class="hl sym">++;</span>
        <span class="hl sym">}</span>

        <span class="hl kwd">while</span> <span class="hl sym">(</span>r <span class="hl sym">!=</span> <span class="hl num">1</span><span class="hl sym">) {</span> count<span class="hl sym">[</span>r <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">] =</span> r<span class="hl sym">;</span> r<span class="hl sym">--; }</span>
        <span class="hl kwd">if</span> <span class="hl sym">(!(</span>perm1<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] ==</span> <span class="hl num">0</span> <span class="hl sym">||</span> perm1<span class="hl sym">[</span>m<span class="hl sym">] ==</span> m<span class="hl sym">)) {</span>
            <span class="hl kwd">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> n<span class="hl sym">;</span> i<span class="hl sym">++)</span> perm<span class="hl sym">[</span>i<span class="hl sym">] =</span> perm1<span class="hl sym">[</span>i<span class="hl sym">];</span>

            <span class="hl kwb">int</span> flipsCount <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl kwb">int</span> k<span class="hl sym">;</span>

            <span class="hl kwd">while</span> <span class="hl sym">(!((</span>k <span class="hl sym">=</span> perm<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]) ==</span> <span class="hl num">0</span><span class="hl sym">)) {</span>
                <span class="hl kwb">int</span> k2 <span class="hl sym">= (</span>k <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">) &gt;&gt;</span> <span class="hl num">1</span><span class="hl sym">;</span>
                <span class="hl kwd">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> k2<span class="hl sym">;</span> i<span class="hl sym">++) {</span>
                    <span class="hl kwb">int</span> temp <span class="hl sym">=</span> perm<span class="hl sym">[</span>i<span class="hl sym">];</span> perm<span class="hl sym">[</span>i<span class="hl sym">] =</span> perm<span class="hl sym">[</span>k <span class="hl sym">-</span> i<span class="hl sym">];</span> perm<span class="hl sym">[</span>k <span class="hl sym">-</span> i<span class="hl sym">] =</span> temp<span class="hl sym">;</span>
                <span class="hl sym">}</span>
                flipsCount<span class="hl sym">++;</span>
            <span class="hl sym">}</span>

            <span class="hl kwd">if</span> <span class="hl sym">(</span>flipsCount <span class="hl sym">&gt;</span> maxFlipsCount<span class="hl sym">) {</span>
                maxFlipsCount <span class="hl sym">=</span> flipsCount<span class="hl sym">;</span>
                <span class="hl kwd">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> n<span class="hl sym">;</span> i<span class="hl sym">++)</span> maxPerm<span class="hl sym">[</span>i<span class="hl sym">] =</span> perm1<span class="hl sym">[</span>i<span class="hl sym">];</span>
            <span class="hl sym">}</span>
        <span class="hl sym">}</span>

        <span class="hl kwd">while</span> <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">) {</span>
            <span class="hl kwd">if</span> <span class="hl sym">(</span>r <span class="hl sym">==</span> n<span class="hl sym">)</span> return maxFlipsCount<span class="hl sym">;</span>
            <span class="hl kwb">int</span> perm0 <span class="hl sym">=</span> perm1<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
            <span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl kwd">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> r<span class="hl sym">) {</span>
                <span class="hl kwb">int</span> j <span class="hl sym">=</span> i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
                perm1<span class="hl sym">[</span>i<span class="hl sym">] =</span> perm1<span class="hl sym">[</span>j<span class="hl sym">];</span>
                i <span class="hl sym">=</span> j<span class="hl sym">;</span>
            <span class="hl sym">}</span>
            perm1<span class="hl sym">[</span>r<span class="hl sym">] =</span> perm0<span class="hl sym">;</span>

            count<span class="hl sym">[</span>r<span class="hl sym">] =</span> count<span class="hl sym">[</span>r<span class="hl sym">] -</span> <span class="hl num">1</span><span class="hl sym">;</span>
            <span class="hl kwd">if</span> <span class="hl sym">(</span>count<span class="hl sym">[</span>r<span class="hl sym">] &gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> break<span class="hl sym">;</span>
            r<span class="hl sym">++;</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>

