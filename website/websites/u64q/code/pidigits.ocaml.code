<source>
<def></def><com>(*</com><br />
<com> * The Computer Language Benchmarks Game</com><br />
<com> * http://shootout.alioth.debian.org/</com><br />
<com> *</com><br />
<com> * contributed by Christophe TROESTLER</com><br />
<com> * modified by Matthias Giovannini?</com><br />
<com> * ported to Gmp by David Teller</com><br />
<com> *)</com><def></def><br />
<kwa>open</kwa> <def></def><kwd>Printf</kwd><br />
<def></def><kwa>open</kwa> <def></def><kwc>Gmp</kwc><def></def><sym>.</sym><def></def><kwd>Z2</kwd><br />
<def></def><kwa>open</kwa> <def></def><kwc>Gmp</kwc><def></def><sym>.</sym><def></def><kwc>Z</kwc><def></def><sym>.</sym><def></def><kwd>Infixes</kwd><br />
<def></def><br />
<kwa>let</kwa> <def>big_0</def>      <sym>=</sym> <def></def><kwc>Gmp</kwc><def></def><sym>.</sym><def></def><kwc>Z</kwc><def></def><sym>.</sym><def>zero</def><br />
<kwa>let</kwa> <def>big_1</def>      <sym>=</sym> <def></def><kwc>Gmp</kwc><def></def><sym>.</sym><def></def><kwc>Z</kwc><def></def><sym>.</sym><def>one</def><br />
<kwa>let</kwa> <def>big_3</def>      <sym>=</sym> <def></def><kwc>Gmp</kwc><def></def><sym>.</sym><def></def><kwc>Z</kwc><def></def><sym>.</sym><def>of_int</def> <num>3</num><br />
<def></def><kwa>let</kwa> <def>big_4</def>      <sym>=</sym> <def></def><kwc>Gmp</kwc><def></def><sym>.</sym><def></def><kwc>Z</kwc><def></def><sym>.</sym><def>of_int</def> <num>4</num><br />
<def></def><kwa>let</kwa> <def>big_10</def>     <sym>=</sym> <def></def><kwc>Gmp</kwc><def></def><sym>.</sym><def></def><kwc>Z</kwc><def></def><sym>.</sym><def>of_int</def> <num>10</num><br />
<def></def><kwa>let</kwa> <def>big_10_neg</def> <sym>=</sym> <def></def><kwc>Gmp</kwc><def></def><sym>.</sym><def></def><kwc>Z</kwc><def></def><sym>.</sym><def>of_int</def> <sym>(-</sym><def></def><num>10</num><def></def><sym>)</sym><br />
<def></def><br />
<kwa>let</kwa> <def>q</def> <sym>=</sym> <def></def><kwc>Gmp</kwc><def></def><sym>.</sym><def></def><kwc>Z</kwc><def></def><sym>.</sym><def>of_int</def> <num>1</num><br />
<def></def><kwa>and</kwa> <def>r</def> <sym>=</sym> <def></def><kwc>Gmp</kwc><def></def><sym>.</sym><def></def><kwc>Z</kwc><def></def><sym>.</sym><def>of_int</def> <num>0</num><br />
<def></def><kwa>and</kwa> <def>s</def> <sym>=</sym> <def></def><kwc>Gmp</kwc><def></def><sym>.</sym><def></def><kwc>Z</kwc><def></def><sym>.</sym><def>of_int</def> <num>0</num><br />
<def></def><kwa>and</kwa> <def>t</def> <sym>=</sym> <def></def><kwc>Gmp</kwc><def></def><sym>.</sym><def></def><kwc>Z</kwc><def></def><sym>.</sym><def>of_int</def> <num>1</num><br />
<def></def><br />
<kwa>let</kwa> <def>u</def> <sym>=</sym> <def>create</def> <sym>()</sym> <def></def><kwa>and</kwa> <def>v</def> <sym>=</sym> <def>create</def> <sym>()</sym> <def></def><kwa>and</kwa> <def>w</def> <sym>=</sym> <def>create</def> <sym>()</sym><br />
<def></def><br />
<kwa>let</kwa> <def>k</def> <sym>=</sym> <def></def><kwb>ref</kwb> <def></def><num>0</num> <def></def><kwa>and</kwa> <def>digit</def> <sym>=</sym> <def>create</def> <sym>()</sym><br />
<def></def><br />
<com>(* Entier part of the linear fractional transform qrst of x *)</com><def></def><br />
<kwa>let</kwa> <def>extract x ~out</def><sym>:</sym><def>item</def><sym>=</sym><br />
<def>  mul u q x</def><sym>;</sym><br />
<def>  add u u r</def><sym>;</sym><br />
<def>  mul v s x</def><sym>;</sym><br />
<def>  add v v t</def><sym>;</sym><br />
<def>  tdiv_q item u v</def><br />
<br />
<kwa>let</kwa> <def>next</def> <sym>() =</sym> <def>extract big_3 ~out</def><sym>:</sym><def>digit</def><br />
<kwa>and</kwa> <def>safe</def> <sym>() =</sym> <def>extract big_4 ~out</def><sym>:</sym><def>w</def><sym>;</sym> <def></def><kwc>Gmp</kwc><def></def><sym>.</sym><def></def><kwc>Z</kwc><def></def><sym>.</sym><def>equal w digit</def><br />
<kwa>and</kwa> <def>produce</def> <sym>() =</sym><br />
<def>  mul r r big_10</def><sym>;</sym><br />
<def>  mul w big_10_neg digit</def><sym>;</sym><br />
<def>  mul v t w</def><sym>;</sym><br />
<def>  add r r v</def><sym>;</sym><br />
<def>  mul q q big_10</def><sym>;</sym><br />
<def></def><kwa>and</kwa> <def>consume</def> <sym>() =</sym><br />
<def>  incr k</def><sym>;</sym><br />
<def></def>  <kwa>let</kwa> <def>big_k</def> <sym>=</sym> <def></def><kwc>Gmp</kwc><def></def><sym>.</sym><def></def><kwc>Z</kwc><def></def><sym>.</sym><def>of_int</def> <sym>!</sym><def>k</def> <kwa>in</kwa><br />
<def></def>  <kwa>let</kwa> <def>den</def> <sym>=</sym> <def></def><kwc>Gmp</kwc><def></def><sym>.</sym><def></def><kwc>Z</kwc><def></def><sym>.</sym><def>of_int</def> <sym>(</sym><def></def><num>2</num> <def></def><sym>* !</sym><def>k</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>)</sym> <def></def><kwa>in</kwa><br />
<def></def>  <kwa>let</kwa> <def>den2</def> <sym>=</sym> <def></def><kwc>Gmp</kwc><def></def><sym>.</sym><def></def><kwc>Z</kwc><def></def><sym>.</sym><def>mul_2exp den</def> <num>1</num> <def></def><kwa>in</kwa><br />
<def>  mul r r den</def><sym>;</sym><br />
<def>  mul u q den2</def><sym>;</sym><br />
<def>  add r r u</def><sym>;</sym><br />
<def>  mul t t den</def><sym>;</sym><br />
<def>  mul v s den2</def><sym>;</sym><br />
<def>  add t t v</def><sym>;</sym><br />
<def>  mul s s big_k</def><sym>;</sym><br />
<def>  mul q q big_k</def><br />
<br />
<kwa>let</kwa> <def>digits n</def> <sym>=</sym><br />
<def></def>  <kwa>for</kwa> <def>i</def> <sym>=</sym> <def></def><num>1</num> <def></def><kwa>to</kwa> <def>n</def> <kwa>do</kwa><br />
<def>    next</def> <sym>();</sym><br />
<def></def>    <kwa>while</kwa> <def>not</def> <sym>(</sym><def>safe</def> <sym>())</sym> <def></def><kwa>do</kwa><br />
<def>      consume</def> <sym>();</sym><br />
<def>      next</def> <sym>();</sym><br />
<def></def>    <kwa>done</kwa><def></def><sym>;</sym><br />
<def>    produce</def> <sym>();</sym><br />
<def>    print_string</def> <sym>(</sym><def></def><kwc>Gmp</kwc><def></def><sym>.</sym><def></def><kwc>Z</kwc><def></def><sym>.</sym><def>to_string digit</def><sym>);</sym><br />
<def></def>    <kwa>if</kwa> <def>i</def> <kwa>mod</kwa> <def></def><num>10</num> <def></def><sym>=</sym> <def></def><num>0</num> <def></def><kwa>then</kwa><br />
<def>      printf</def> <str>&quot;</str><esc>\t</esc><str>:%i</str><esc>\n</esc><str>&quot;</str><def> i</def><sym>;</sym><br />
<def></def>  <kwa>done</kwa><def></def><sym>;</sym><br />
<def></def>  <kwa>if</kwa> <def>n</def> <kwa>mod</kwa> <def></def><num>10</num> <def></def><sym>!=</sym> <def></def><num>0</num> <def></def><kwa>then</kwa><br />
<def>    printf</def> <str>&quot;%*s</str><esc>\t</esc><str>:%i</str><esc>\n</esc><str>&quot;</str><def></def> <sym>(</sym><def></def><num>10</num><def></def><sym>-</sym> <def>n</def> <kwa>mod</kwa> <def></def><num>10</num><def></def><sym>)</sym> <def></def><str>&quot;&quot;</str><def> n</def><br />
<br />
<kwa>let</kwa> <def></def><sym>() =</sym> <def>digits</def> <sym>(</sym><def></def><kwa>try</kwa> <def>int_of_string</def> <sym>(</sym><def></def><kwc>Array</kwc><def></def><sym>.</sym><def>get</def> <kwc>Sys</kwc><def></def><sym>.</sym><def>argv</def> <num>1</num><def></def><sym>)</sym> <def></def><kwa>with</kwa> <def>_</def> <sym>-&gt;</sym> <def></def><num>27</num><def></def><sym>)</sym><def></def><br />
</source>
