<source>
<def></def><slc># The Computer Language Benchmarks Game</slc><br />
<def></def><slc># http://shootout.alioth.debian.org/</slc><br />
<def></def><slc># Contributed by Antti Kervinen</slc><br />
<def></def><slc># Modified by Tupteq</slc><br />
<def></def><br />
<kwa>import</kwa> <def>sys</def><br />
<kwa>import</kwa> <def>thread</def><br />
<br />
<slc># Set minimum stack size for threads, otherwise the program may fail</slc><br />
<def></def><slc># to create such a many threads</slc><br />
<def>thread</def><sym>.</sym><def></def><kwd>stack_size</kwd><def></def><sym>(</sym><def></def><num>32</num><def></def><sym>*</sym><def></def><num>1024</num><def></def><sym>)</sym><br />
<def></def><br />
<kwa>def</kwa> <def></def><kwd>threadfun</kwd><def></def><sym>(</sym><def>number</def><sym>,</sym> <def>lock_acquire</def><sym>,</sym> <def>next_release</def><sym>):</sym><br />
<def></def>    <kwa>global</kwa> <def>n</def><br />
    <kwa>while</kwa> <def></def><num>1</num><def></def><sym>:</sym><br />
<def></def>        <kwd>lock_acquire</kwd><def></def><sym>()</sym><br />
<def></def>        <kwa>if</kwa> <def>n</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>:</sym><br />
<def>            n</def> <sym>-=</sym> <def></def><num>1</num><br />
<def></def>            <kwd>next_release</kwd><def></def><sym>()</sym><br />
<def></def>        <kwa>else</kwa><def></def><sym>:</sym><br />
<def></def>            <kwa>print</kwa> <def>number<br />
            main_lock</def><sym>.</sym><def></def><kwd>release</kwd><def></def><sym>()</sym><br />
<def></def><br />
<slc># main</slc><br />
<def>n</def> <sym>=</sym> <def></def><kwb>int</kwb><def></def><sym>(</sym><def>sys</def><sym>.</sym><def>argv</def><sym>[</sym><def></def><num>1</num><def></def><sym>])</sym><br />
<def>main_lock</def> <sym>=</sym> <def>thread</def><sym>.</sym><def></def><kwd>allocate_lock</kwd><def></def><sym>()</sym><br />
<def>main_lock</def><sym>.</sym><def></def><kwd>acquire</kwd><def></def><sym>()</sym><br />
<def><br />
first_lock</def> <sym>=</sym> <def>thread</def><sym>.</sym><def></def><kwd>allocate_lock</kwd><def></def><sym>()</sym><br />
<def>next_lock</def> <sym>=</sym> <def>first_lock</def><br />
<br />
<kwa>for</kwa> <def>number</def> <kwa>in</kwa> <def></def><kwb>xrange</kwb><def></def><sym>(</sym><def></def><num>503</num><def></def><sym>):</sym><br />
<def>    lock</def> <sym>=</sym> <def>next_lock<br />
    lock</def><sym>.</sym><def></def><kwd>acquire</kwd><def></def><sym>()</sym><br />
<def>    next_lock</def> <sym>=</sym> <def>thread</def><sym>.</sym><def></def><kwd>allocate_lock</kwd><def></def><sym>()</sym> <def></def><kwa>if</kwa> <def>number</def> <sym>&lt;</sym> <def></def><num>502</num> <def></def><kwa>else</kwa> <def>first_lock<br />
    thread</def><sym>.</sym><def></def><kwd>start_new_thread</kwd><def></def><sym>(</sym><def>threadfun</def><sym>,</sym><br />
<def></def>        <sym>(</sym><def>number</def><sym>+</sym><def></def><num>1</num><def></def><sym>,</sym> <def>lock</def><sym>.</sym><def>acquire</def><sym>,</sym> <def>next_lock</def><sym>.</sym><def>release</def><sym>))</sym><br />
<def><br />
first_lock</def><sym>.</sym><def></def><kwd>release</kwd><def></def><sym>()</sym><br />
<def>main_lock</def><sym>.</sym><def></def><kwd>acquire</kwd><def></def><sym>()</sym><def></def><br />
</source>
