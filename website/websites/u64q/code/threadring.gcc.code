<source>
<def></def><com>/*</com><br />
<com>* The Computer Language Benchmarks Game</com><br />
<com>* http://shootout.alioth.debian.org/</com><br />
<com></com><br />
<com>* contributed by Premysl Hruby</com><br />
<com>*/</com><def></def><br />
<br />
<dir>#include &lt;stdio.h&gt;</dir><br />
<def></def><dir>#include &lt;stdlib.h&gt;</dir><br />
<def></def><dir>#include &lt;pthread.h&gt;</dir><br />
<def></def><dir>#include &lt;string.h&gt;</dir><br />
<def></def><dir>#include &lt;limits.h&gt;</dir><br />
<def></def><br />
<dir>#define THREADS (503)</dir><br />
<def></def><br />
<br />
<kwb>struct</kwb> <def>stack</def> <sym>{</sym><br />
<def></def>   <kwb>char</kwb> <def>x</def><sym>[</sym><def>PTHREAD_STACK_MIN</def><sym>];</sym><br />
<def></def><sym>};</sym><br />
<def></def><br />
<br />
<com>/* staticaly initialize mutex[0] mutex */</com><def></def><br />
<kwb>static</kwb> <def>pthread_mutex_t mutex</def><sym>[</sym><def>THREADS</def><sym>];</sym><br />
<def></def><kwb>static int</kwb> <def>data</def><sym>[</sym><def>THREADS</def><sym>];</sym><br />
<def></def><kwb>static struct</kwb> <def>stack stacks</def><sym>[</sym><def>THREADS</def><sym>];</sym><br />
<def></def><com>/* stacks must be defined staticaly, or my i386 box run of virtual memory for this</com><br />
<com> * process while creating thread +- #400 */</com><def></def><br />
<br />
<kwb>static void</kwb><def></def><sym>*</sym> <def></def><kwd>thread</kwd><def></def><sym>(</sym><def></def><kwb>void</kwb> <def></def><sym>*</sym><def>num</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>   <kwb>int</kwb> <def>l</def> <sym>= (</sym><def></def><kwb>int</kwb><def></def><sym>)</sym><def>num</def><sym>;</sym><br />
<def></def>   <kwb>int</kwb> <def>r</def> <sym>= (</sym><def>l</def><sym>+</sym><def></def><num>1</num><def></def><sym>) %</sym> <def>THREADS</def><sym>;</sym><br />
<def></def>   <kwb>int</kwb> <def>token</def><sym>;</sym><br />
<def></def><br />
   <kwa>while</kwa><def></def><sym>(</sym><def></def><num>1</num><def></def><sym>) {</sym><br />
<def></def>      <kwd>pthread_mutex_lock</kwd><def></def><sym>(</sym><def>mutex</def> <sym>+</sym> <def>l</def><sym>);</sym><br />
<def>      token</def> <sym>=</sym> <def>data</def><sym>[</sym><def>l</def><sym>];</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>token</def><sym>) {</sym><br />
<def>         data</def><sym>[</sym><def>r</def><sym>] =</sym> <def>token</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>         <kwd>pthread_mutex_unlock</kwd><def></def><sym>(</sym><def>mutex</def> <sym>+</sym> <def>r</def><sym>);</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>      <kwa>else</kwa> <def></def><sym>{</sym><br />
<def></def>         <kwd>printf</kwd><def></def><sym>(</sym><def></def><str>&quot;%i</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def>l</def><sym>+</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>         <kwd>exit</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>);</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<br />
<br />
<kwb>int</kwb> <def></def><kwd>main</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>argc</def><sym>,</sym> <def></def><kwb>char</kwb> <def></def><sym>**</sym><def>argv</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>   <kwb>int</kwb> <def>i</def><sym>;</sym><br />
<def>   pthread_t cthread</def><sym>;</sym><br />
<def>   pthread_attr_t stack_attr</def><sym>;</sym><br />
<def></def><br />
   <kwa>if</kwa> <def></def><sym>(</sym><def>argc</def> <sym>!=</sym> <def></def><num>2</num><def></def><sym>)</sym><br />
<def></def>      <kwd>exit</kwd><def></def><sym>(</sym><def></def><num>255</num><def></def><sym>);</sym><br />
<def>   data</def><sym>[</sym><def></def><num>0</num><def></def><sym>] =</sym> <def></def><kwd>atoi</kwd><def></def><sym>(</sym><def>argv</def><sym>[</sym><def></def><num>1</num><def></def><sym>]);</sym><br />
<def></def><br />
   <kwd>pthread_attr_init</kwd><def></def><sym>(&amp;</sym><def>stack_attr</def><sym>);</sym><br />
<def></def><br />
   <kwa>for</kwa> <def></def><sym>(</sym><def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>THREADS</def><sym>;</sym> <def>i</def><sym>++) {</sym><br />
<def></def>      <kwd>pthread_mutex_init</kwd><def></def><sym>(</sym><def>mutex</def> <sym>+</sym> <def>i</def><sym>,</sym> <def>NULL</def><sym>);</sym><br />
<def></def>      <kwd>pthread_mutex_lock</kwd><def></def><sym>(</sym><def>mutex</def> <sym>+</sym> <def>i</def><sym>);</sym><br />
<def></def><br />
      <kwd>pthread_attr_setstack</kwd><def></def><sym>(&amp;</sym><def>stack_attr</def><sym>, &amp;</sym><def>stacks</def><sym>[</sym><def>i</def><sym>],</sym> <def></def><kwa>sizeof</kwa><def></def><sym>(</sym><def></def><kwb>struct</kwb> <def>stack</def><sym>));</sym><br />
<def></def>      <kwd>pthread_create</kwd><def></def><sym>(&amp;</sym><def>cthread</def><sym>, &amp;</sym><def>stack_attr</def><sym>,</sym> <def>thread</def><sym>, (</sym><def></def><kwb>void</kwb><def></def><sym>*)</sym><def>i</def><sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwd>pthread_mutex_unlock</kwd><def></def><sym>(</sym><def>mutex</def> <sym>+</sym> <def></def><num>0</num><def></def><sym>);</sym><br />
<def></def>   <kwd>pthread_join</kwd><def></def><sym>(</sym><def>cthread</def><sym>,</sym> <def>NULL</def><sym>);</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
