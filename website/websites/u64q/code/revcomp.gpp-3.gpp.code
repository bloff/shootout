<source>
<def></def><slc>// The Computer Language Shootout</slc><br />
<def></def><slc>// http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>// Contributed by Paul Kitchin</slc><br />
<def></def><br />
<dir>#include &lt;iostream&gt;</dir><br />
<def></def><dir>#include &lt;iterator&gt;</dir><br />
<def></def><dir>#include &lt;vector&gt;</dir><br />
<def><br />
std</def><sym>::</sym><def></def><kwb>size_t</kwb> <def>line_length</def> <sym>=</sym> <def></def><num>60</num><def></def><sym>;</sym><br />
<def></def><br />
<kwb>char</kwb> <def></def><kwd>complement</kwd><def></def><sym>(</sym><def></def><kwb>char</kwb> <def>character</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>   <kwb>static char const</kwb> <def>complement_map</def><sym>[] =</sym><br />
<def></def>   <sym>{</sym><br />
<def></def>      <str>'\0'</str><def></def><sym>,</sym> <def></def><str>'T'</str><def></def><sym>,</sym> <def></def><str>'V'</str><def></def><sym>,</sym> <def></def><str>'G'</str><def></def><sym>,</sym> <def></def><str>'H'</str><def></def><sym>,</sym> <def></def><str>'\0'</str><def></def><sym>,</sym> <def></def><str>'\0'</str><def></def><sym>,</sym> <def></def><str>'C'</str><def></def><sym>,</sym> <def></def><str>'D'</str><def></def><sym>,</sym> <def></def><str>'\0'</str><def></def><sym>,</sym> <def></def><str>'\0'</str><def></def><sym>,</sym> <def></def><str>'M'</str><def></def><sym>,</sym> <def></def><str>'\0'</str><def></def><sym>,</sym> <def></def><str>'K'</str><def></def><sym>,</sym> <def></def><str>'N'</str><def></def><sym>,</sym> <def></def><str>'\0'</str><def></def><sym>,</sym> <def></def><str>'\0'</str><def></def><sym>,</sym> <def></def><str>'\0'</str><def></def><sym>,</sym> <def></def><str>'Y'</str><def></def><sym>,</sym> <def></def><str>'S'</str><def></def><sym>,</sym> <def></def><str>'A'</str><def></def><sym>,</sym> <def></def><str>'A'</str><def></def><sym>,</sym> <def></def><str>'B'</str><def></def><sym>,</sym> <def></def><str>'W'</str><def></def><sym>,</sym> <def></def><str>'\0'</str><def></def><sym>,</sym> <def></def><str>'R'</str><def></def><br />
   <sym>};</sym><br />
<def></def>   <kwa>return</kwa> <def>complement_map</def><sym>[</sym><def>character</def> <sym>&amp;</sym> <def></def><num>0x1f</num><def></def><sym>];</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>struct</kwb> <def>chunk</def><br />
<sym>{</sym><br />
<def></def>   <kwd>chunk</kwd><def></def><sym>()</sym><br />
<def></def>      <sym>:</sym><br />
<def></def>      <kwd>previous</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>),</sym><br />
<def></def>      <kwd>next</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>),</sym><br />
<def></def>      <kwd>length</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def></def>   <sym>}</sym><br />
<def></def>   <kwd>chunk</kwd><def></def><sym>(</sym><def>chunk</def> <sym>*</sym> <def>previous</def><sym>)</sym><br />
<def></def>      <sym>:</sym><br />
<def></def>      <kwd>previous</kwd><def></def><sym>(</sym><def>previous</def><sym>),</sym><br />
<def></def>      <kwd>next</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>),</sym><br />
<def></def>      <kwd>length</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def>      previous</def><sym>-&gt;</sym><def>next</def> <sym>=</sym> <def></def><kwa>this</kwa><def></def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def>   chunk</def> <sym>*</sym> <def>previous</def><sym>;</sym><br />
<def>   chunk</def> <sym>*</sym> <def>next</def><sym>;</sym><br />
<def></def>   <kwb>unsigned short</kwb> <def>length</def><sym>;</sym><br />
<def></def>   <kwb>char</kwb> <def>data</def><sym>[</sym><def></def><num>65526</num><def></def><sym>];</sym><br />
<def></def><sym>};</sym><br />
<def></def><br />
<kwb>void</kwb> <def></def><kwd>write_reverse_complement</kwd><def></def><sym>(</sym><def>chunk</def> <sym>*</sym> <def>begin</def><sym>,</sym> <def>chunk</def> <sym>*</sym> <def>end</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def>   chunk</def> <sym>*</sym> <def>start</def> <sym>=</sym> <def>begin</def><sym>;</sym><br />
<def></def>   <kwb>char</kwb> <def></def><sym>*</sym> <def>begin_char</def> <sym>=</sym> <def>begin</def><sym>-&gt;</sym><def>data</def><sym>;</sym><br />
<def></def>   <kwb>char</kwb> <def></def><sym>*</sym> <def>end_char</def> <sym>=</sym> <def>end</def><sym>-&gt;</sym><def>data</def> <sym>+</sym> <def>end</def><sym>-&gt;</sym><def>length</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>   <kwa>while</kwa> <def></def><sym>(</sym><def>begin</def> <sym>!=</sym> <def>end</def> <sym>||</sym> <def>begin_char</def> <sym>&lt;</sym> <def>end_char</def><sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def></def>      <kwb>char</kwb> <def>temp</def> <sym>=</sym> <def></def><kwd>complement</kwd><def></def><sym>(*</sym><def>begin_char</def><sym>);</sym><br />
<def></def>      <sym>*</sym><def>begin_char</def><sym>++ =</sym> <def></def><kwd>complement</kwd><def></def><sym>(*</sym><def>end_char</def><sym>);</sym><br />
<def></def>      <sym>*</sym><def>end_char</def><sym>-- =</sym> <def>temp</def><sym>;</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(*</sym><def>begin_char</def> <sym>==</sym> <def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>)</sym><br />
<def></def>      <sym>{</sym><br />
<def></def>         <sym>++</sym><def>begin_char</def><sym>;</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(*</sym><def>end_char</def> <sym>==</sym> <def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>)</sym><br />
<def></def>      <sym>{</sym><br />
<def></def>         <sym>--</sym><def>end_char</def><sym>;</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>begin_char</def> <sym>==</sym> <def>begin</def><sym>-&gt;</sym><def>data</def> <sym>+</sym> <def>begin</def><sym>-&gt;</sym><def>length</def><sym>)</sym><br />
<def></def>      <sym>{</sym><br />
<def>         begin</def> <sym>=</sym> <def>begin</def><sym>-&gt;</sym><def>next</def><sym>;</sym><br />
<def>         begin_char</def> <sym>=</sym> <def>begin</def><sym>-&gt;</sym><def>data</def><sym>;</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(*</sym><def>begin_char</def> <sym>==</sym> <def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>)</sym><br />
<def></def>         <sym>{</sym><br />
<def></def>            <sym>++</sym><def>begin_char</def><sym>;</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>end_char</def> <sym>==</sym> <def>end</def><sym>-&gt;</sym><def>data</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>      <sym>{</sym><br />
<def>         end</def> <sym>=</sym> <def>end</def><sym>-&gt;</sym><def>previous</def><sym>;</sym><br />
<def>         end_char</def> <sym>=</sym> <def>end</def><sym>-&gt;</sym><def>data</def> <sym>+</sym> <def>end</def><sym>-&gt;</sym><def>length</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(*</sym><def>end_char</def> <sym>==</sym> <def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>)</sym><br />
<def></def>         <sym>{</sym><br />
<def></def>            <sym>--</sym><def>end_char</def><sym>;</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def></def>   <kwa>while</kwa> <def></def><sym>(</sym><def>start</def><sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def>      std</def><sym>::</sym><def>cout</def><sym>.</sym><def></def><kwd>write</kwd><def></def><sym>(</sym><def>start</def><sym>-&gt;</sym><def>data</def><sym>,</sym> <def>start</def><sym>-&gt;</sym><def>length</def><sym>);</sym><br />
<def>      chunk</def> <sym>*</sym> <def>last</def> <sym>=</sym> <def>start</def><sym>;</sym><br />
<def>      start</def> <sym>=</sym> <def>start</def><sym>-&gt;</sym><def>next</def><sym>;</sym><br />
<def></def>      <kwa>delete</kwa> <def>last</def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def>   std</def><sym>::</sym><def>cout</def><sym>.</sym><def></def><kwd>put</kwd><def></def><sym>(</sym><def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>);</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>int</kwb> <def></def><kwd>main</kwd><def></def><sym>()</sym><br />
<def></def><sym>{</sym><br />
<def>   std</def><sym>::</sym><def>cin</def><sym>.</sym><def></def><kwd>sync_with_stdio</kwd><def></def><sym>(</sym><def></def><kwa>false</kwa><def></def><sym>);</sym><br />
<def>   std</def><sym>::</sym><def>cout</def><sym>.</sym><def></def><kwd>sync_with_stdio</kwd><def></def><sym>(</sym><def></def><kwa>false</kwa><def></def><sym>);</sym><br />
<def></def>   <kwa>while</kwa> <def></def><sym>(!</sym><def>std</def><sym>::</sym><def>cin</def><sym>.</sym><def></def><kwd>eof</kwd><def></def><sym>())</sym><br />
<def></def>   <sym>{</sym><br />
<def>      std</def><sym>::</sym><def>string header</def><sym>;</sym><br />
<def>      std</def><sym>::</sym><def></def><kwd>getline</kwd><def></def><sym>(</sym><def>std</def><sym>::</sym><def>cin</def><sym>,</sym> <def>header</def><sym>);</sym><br />
<def>      std</def><sym>::</sym><def>cout</def> <sym>&lt;&lt;</sym> <def>header</def> <sym>&lt;&lt;</sym> <def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>;</sym><br />
<def>      chunk</def> <sym>*</sym> <def>start</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>chunk</kwd><def></def><sym>();</sym><br />
<def>      chunk</def> <sym>*</sym> <def>end</def> <sym>=</sym> <def>start</def><sym>;</sym><br />
<def></def>      <kwa>while</kwa> <def></def><sym>(!</sym><def>std</def><sym>::</sym><def>cin</def><sym>.</sym><def></def><kwd>eof</kwd><def></def><sym>() &amp;&amp;</sym> <def>std</def><sym>::</sym><def>cin</def><sym>.</sym><def></def><kwd>peek</kwd><def></def><sym>() !=</sym> <def></def><str>'&gt;'</str><def></def><sym>)</sym><br />
<def></def>      <sym>{</sym><br />
<def></def>         <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>line</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>line</def> <sym>&lt;</sym> <def></def><num>1074</num> <def></def><sym>&amp;&amp; !</sym><def>std</def><sym>::</sym><def>cin</def><sym>.</sym><def></def><kwd>eof</kwd><def></def><sym>() &amp;&amp;</sym> <def>std</def><sym>::</sym><def>cin</def><sym>.</sym><def></def><kwd>peek</kwd><def></def><sym>() !=</sym> <def></def><str>'&gt;'</str><def></def><sym>; ++</sym><def>line</def><sym>)</sym><br />
<def></def>         <sym>{</sym><br />
<def>            std</def><sym>::</sym><def>cin</def><sym>.</sym><def></def><kwd>getline</kwd><def></def><sym>(</sym><def>end</def><sym>-&gt;</sym><def>data</def> <sym>+</sym> <def>end</def><sym>-&gt;</sym><def>length</def><sym>,</sym> <def>line_length</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def>            end</def><sym>-&gt;</sym><def>length</def> <sym>+=</sym> <def>std</def><sym>::</sym><def>cin</def><sym>.</sym><def></def><kwd>gcount</kwd><def></def><sym>();</sym><br />
<def></def>            <sym>*(</sym><def>end</def><sym>-&gt;</sym><def>data</def> <sym>+</sym> <def>end</def><sym>-&gt;</sym><def>length</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>) =</sym> <def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>;</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(!</sym><def>std</def><sym>::</sym><def>cin</def><sym>.</sym><def></def><kwd>eof</kwd><def></def><sym>() &amp;&amp;</sym> <def>std</def><sym>::</sym><def>cin</def><sym>.</sym><def></def><kwd>peek</kwd><def></def><sym>() !=</sym> <def></def><str>'&gt;'</str><def></def><sym>)</sym><br />
<def></def>         <sym>{</sym><br />
<def>            end</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>chunk</kwd><def></def><sym>(</sym><def>end</def><sym>);</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>      <sym>--</sym><def>end</def><sym>-&gt;</sym><def>length</def><sym>;</sym><br />
<def></def>      <kwd>write_reverse_complement</kwd><def></def><sym>(</sym><def>start</def><sym>,</sym> <def>end</def><sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
