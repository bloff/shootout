<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   original contributed by Isaac Gouy</span>
<span class="hl com">   made to use single array and parallelized by Stephen Marsh</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> java<span class="hl sym">.</span>io<span class="hl sym">.</span><span class="hl kwc">BufferedOutputStream</span>

<span class="hl kwa">object</span> mandelbrot <span class="hl sym">{</span>
  <span class="hl kwa">var</span> size<span class="hl sym">:</span> <span class="hl kwb">int</span> <span class="hl sym">=</span> <span class="hl num">0</span>
  <span class="hl kwa">var</span> bytesPerRow<span class="hl sym">:</span> <span class="hl kwb">int</span> <span class="hl sym">=</span> <span class="hl num">0</span>
  <span class="hl kwa">var</span> bitmap<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwb">byte</span><span class="hl sym">] =</span> _
  <span class="hl kwa">var</span> donerows<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwb">boolean</span><span class="hl sym">] =</span> _
  <span class="hl kwa">var</span> nextRow <span class="hl sym">=</span> <span class="hl num">0</span>
  <span class="hl kwa">val</span> limitSquared <span class="hl sym">=</span> <span class="hl num">4.0</span>
  <span class="hl kwa">val</span> max <span class="hl sym">=</span> <span class="hl num">50</span>

  <span class="hl kwa">def</span> getNextRow<span class="hl sym">:</span> <span class="hl kwb">int</span> <span class="hl sym">=</span> <span class="hl kwa">synchronized</span> <span class="hl sym">{</span>
    notify<span class="hl sym">()</span> <span class="hl slc">// wakes up main thread</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>nextRow <span class="hl sym">==</span> size<span class="hl sym">)</span> <span class="hl kwa">return</span> <span class="hl sym">-</span><span class="hl num">1</span>
    nextRow <span class="hl sym">+=</span> <span class="hl num">1</span>
    <span class="hl kwa">return</span> nextRow <span class="hl sym">-</span> <span class="hl num">1</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">def</span> main<span class="hl sym">(</span>args<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">String</span><span class="hl sym">]) {</span>
    size <span class="hl sym">=</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span>parseInt<span class="hl sym">(</span>args<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">))</span>
    bytesPerRow <span class="hl sym">= (</span>size<span class="hl sym">+</span><span class="hl num">7</span><span class="hl sym">)/</span><span class="hl num">8</span> <span class="hl slc">// ceiling of (size / 8)</span>
    bitmap <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">Array</span><span class="hl sym">(</span>bytesPerRow<span class="hl sym">*</span>size<span class="hl sym">)</span>
    donerows <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">Array</span><span class="hl sym">(</span>size<span class="hl sym">)</span>

    <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;-</span> <span class="hl num">0</span> until <span class="hl kwc">Runtime</span><span class="hl sym">.</span>getRuntime<span class="hl sym">().</span>availableProcessors<span class="hl sym">())</span>
      <span class="hl kwa">new</span> <span class="hl kwc">Thread</span><span class="hl sym">(</span><span class="hl kwa">new</span> CalcThread<span class="hl sym">()).</span>start<span class="hl sym">()</span>

    <span class="hl slc">// main thread prints rows as they finish</span>
    println<span class="hl sym">(</span><span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl sym">+</span> size <span class="hl sym">+</span> <span class="hl str">&quot; &quot;</span> <span class="hl sym">+</span> size<span class="hl sym">)</span>
    <span class="hl kwa">val</span> w <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">BufferedOutputStream</span><span class="hl sym">(</span><span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">)</span>
    <span class="hl kwa">var</span> y <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">while</span> <span class="hl sym">(</span>y <span class="hl sym">&lt;</span> size<span class="hl sym">) {</span>
      <span class="hl kwa">while</span> <span class="hl sym">(!</span>donerows<span class="hl sym">(</span>y<span class="hl sym">))</span> <span class="hl kwa">synchronized</span><span class="hl sym">{</span>wait<span class="hl sym">()}</span>
      w<span class="hl sym">.</span>write<span class="hl sym">(</span>bitmap<span class="hl sym">,</span> y <span class="hl sym">*</span> bytesPerRow<span class="hl sym">,</span> bytesPerRow<span class="hl sym">)</span>
      y <span class="hl sym">+=</span> <span class="hl num">1</span>
    <span class="hl sym">}</span>
    w<span class="hl sym">.</span>close
  <span class="hl sym">}</span>

  <span class="hl kwa">class</span> CalcThread <span class="hl kwa">extends</span> <span class="hl kwc">Runnable</span> <span class="hl sym">{</span>
    <span class="hl kwa">def</span> run <span class="hl sym">() {</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>true<span class="hl sym">) {</span>
	<span class="hl kwa">var</span> y <span class="hl sym">=</span> getNextRow
	<span class="hl kwa">if</span> <span class="hl sym">(</span>y <span class="hl sym">== -</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">return</span>

	<span class="hl kwa">var</span> bits <span class="hl sym">=</span> <span class="hl num">0</span>
	<span class="hl kwa">var</span> bitnum <span class="hl sym">=</span> <span class="hl num">0</span>
	<span class="hl kwa">var</span> x <span class="hl sym">=</span> <span class="hl num">0</span>
	<span class="hl kwa">var</span> aindex <span class="hl sym">=</span> y <span class="hl sym">*</span> bytesPerRow

	<span class="hl kwa">while</span> <span class="hl sym">(</span>x <span class="hl sym">&lt;</span> size<span class="hl sym">) {</span>

        <span class="hl kwa">val</span> cr <span class="hl sym">=</span> <span class="hl num">2.0</span> <span class="hl sym">*</span> x <span class="hl sym">/</span> size <span class="hl sym">-</span> <span class="hl num">1.5</span>
        <span class="hl kwa">val</span> ci <span class="hl sym">=</span> <span class="hl num">2.0</span> <span class="hl sym">*</span> y <span class="hl sym">/</span> size <span class="hl sym">-</span> <span class="hl num">1.0</span>

        <span class="hl kwa">var</span> zr <span class="hl sym">=</span> <span class="hl num">0.0</span><span class="hl sym">;</span> <span class="hl kwa">var</span> zi <span class="hl sym">=</span> <span class="hl num">0.0</span>
        <span class="hl kwa">var</span> tr <span class="hl sym">=</span> <span class="hl num">0.0</span><span class="hl sym">;</span> <span class="hl kwa">var</span> ti <span class="hl sym">=</span> <span class="hl num">0.0</span>

        <span class="hl kwa">var</span> j <span class="hl sym">=</span> max
            <span class="hl kwa">do</span> <span class="hl sym">{</span>
              zi <span class="hl sym">=</span> <span class="hl num">2.0</span> <span class="hl sym">*</span> zr <span class="hl sym">*</span> zi <span class="hl sym">+</span> ci
              zr <span class="hl sym">=</span> tr <span class="hl sym">-</span> ti <span class="hl sym">+</span> cr
              ti <span class="hl sym">=</span> zi<span class="hl sym">*</span>zi
              tr <span class="hl sym">=</span> zr<span class="hl sym">*</span>zr

              j <span class="hl sym">=</span> j <span class="hl sym">-</span> <span class="hl num">1</span>
            <span class="hl sym">}</span> <span class="hl kwa">while</span> <span class="hl sym">(!(</span>tr <span class="hl sym">+</span> ti <span class="hl sym">&gt;</span> limitSquared<span class="hl sym">) &amp;&amp;</span> j <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span>

         bits <span class="hl sym">=</span> bits <span class="hl sym">&lt;&lt;</span> <span class="hl num">1</span>
         <span class="hl kwa">if</span> <span class="hl sym">(!(</span>tr <span class="hl sym">+</span> ti <span class="hl sym">&gt;</span> limitSquared<span class="hl sym">))</span> bits <span class="hl sym">+=</span> <span class="hl num">1</span>
         bitnum <span class="hl sym">+=</span> <span class="hl num">1</span>

         <span class="hl kwa">if</span> <span class="hl sym">(</span>x <span class="hl sym">==</span> size <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">) {</span>
           bits <span class="hl sym">=</span> bits <span class="hl sym">&lt;&lt; (</span><span class="hl num">8</span> <span class="hl sym">-</span> bitnum<span class="hl sym">)</span>
           bitnum <span class="hl sym">=</span> <span class="hl num">8</span>
         <span class="hl sym">}</span>

         <span class="hl kwa">if</span> <span class="hl sym">(</span>bitnum <span class="hl sym">==</span> <span class="hl num">8</span><span class="hl sym">) {</span>
           bitmap<span class="hl sym">(</span>aindex<span class="hl sym">) =</span> bits<span class="hl sym">.</span>toByte
	   aindex <span class="hl sym">+=</span> <span class="hl num">1</span>
           bits <span class="hl sym">=</span> <span class="hl num">0</span>
           bitnum <span class="hl sym">=</span> <span class="hl num">0</span>
         <span class="hl sym">}</span>

         x <span class="hl sym">+=</span> <span class="hl num">1</span>
	<span class="hl sym">}</span>
	donerows<span class="hl sym">(</span>y<span class="hl sym">) =</span> true
      <span class="hl sym">}</span>
    <span class="hl sym">}</span>
  <span class="hl sym">}</span>
<span class="hl sym">}</span>
