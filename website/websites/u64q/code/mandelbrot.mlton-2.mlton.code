<source>
<def></def><com>(* mandelbrot.sml</com><br />
<com> *</com><br />
<com> *   Mandelbrot (fractal generation) benchmark.</com><br />
<com> *     (Loosely based on the C version.)</com><br />
<com> *</com><br />
<com> * Copyright (c) 2004 by The Fellowship of SML/NJ</com><br />
<com> *</com><br />
<com> * Author: Matthias Blume (blume@tti-c.org)</com><br />
<com> * Modified and ported to MLton by Vesa Karvonen.</com><br />
<com> *)</com><def></def><br />
<br />
<kwa>val</kwa> <def></def><sym>(</sym><def>K</def><sym>,</sym> <def>L2</def><sym>) = (</sym><def></def><num>50</num><def></def><sym>,</sym> <def></def><num>4.0</num><def></def><sym>)</sym><br />
<def></def><br />
<kwa>fun</kwa> <def>out b</def> <sym>=</sym> <def></def><kwa>TextIO</kwa><def>.output1</def> <sym>(</sym><def></def><kwa>TextIO</kwa><def>.stdOut</def><sym>,</sym> <def>Byte.byteToChar b</def><sym>)</sym><br />
<def></def><br />
<kwa>fun</kwa> <def>mandel</def> <sym>(</sym><def>h</def><sym>,</sym> <def>w</def><sym>) =</sym><br />
<def></def>   <kwa>let fun</kwa> <def>p</def> <sym>(</sym><def>x</def><sym>,</sym> <def>y</def><sym>) =</sym><br />
<def></def>          <kwa>let val</kwa> <def></def><sym>(</sym><def>Cr</def><sym>,</sym> <def>Ci</def><sym>) = (</sym><def></def><kwb>real</kwb> <def>x</def><sym>*</sym><def></def><num>2.0</num><def></def><sym>/</sym><def></def><kwb>real</kwb> <def>w</def><sym>-</sym><def></def><num>1.5</num><def></def><sym>,</sym> <def></def><kwb>real</kwb> <def>y</def><sym>*</sym><def></def><num>2.0</num><def></def><sym>/</sym><def></def><kwb>real</kwb> <def>h</def><sym>-</sym><def></def><num>1.0</num><def></def><sym>)</sym><br />
<def></def>              <kwa>fun</kwa> <def>lp</def> <sym>(</sym><def>r</def><sym>,</sym> <def>i</def><sym>,</sym> <def>k</def><sym>) =</sym><br />
<def></def>                  <kwa>let val</kwa> <def></def><sym>(</sym><def>r2</def><sym>,</sym> <def>i2</def><sym>) = (</sym><def>r</def><sym>*</sym><def>r</def><sym>,</sym> <def>i</def><sym>*</sym><def>i</def><sym>)</sym><br />
<def></def>                  <kwa>in</kwa> <def>r2</def><sym>+</sym><def>i2</def> <sym>&lt;=</sym> <def>L2</def> <kwa>andalso</kwa><br />
<def></def>                     <sym>(</sym><def>k</def><sym>=</sym><def></def><num>0</num> <def></def><kwa>orelse</kwa> <def>lp</def> <sym>(</sym><def>r2</def><sym>-</sym><def>i2</def><sym>+</sym><def>Cr</def><sym>, (</sym><def>r</def><sym>+</sym><def>r</def><sym>)*</sym><def>i</def><sym>+</sym><def>Ci</def><sym>,</sym> <def>k</def><sym>-</sym><def></def><num>1</num><def></def><sym>))</sym> <def></def><kwa>end</kwa><br />
<def></def>          <kwa>in</kwa> <def>lp</def> <sym>(</sym><def></def><num>0.0</num><def></def><sym>,</sym> <def></def><num>0.0</num><def></def><sym>,</sym> <def>K</def><sym>)</sym> <def></def><kwa>end</kwa><br />
<def></def>       <kwa>fun</kwa> <def>xl</def> <sym>(</sym><def>x</def><sym>,</sym> <def>y</def><sym>,</sym> <def>b</def><sym>,</sym> <def>n</def><sym>) =</sym><br />
<def></def>          <kwa>if</kwa> <def>x</def> <sym>=</sym> <def>w</def> <kwa>then</kwa> <def></def><sym>(</sym><def>out</def> <sym>(</sym><def></def><kwa>Word8</kwa><def>.</def><sym>&lt;&lt; (</sym><def>b</def><sym>,</sym> <def>n</def><sym>)) ;</sym> <def>yl</def> <sym>(</sym><def>y</def><sym>+</sym><def></def><num>1</num><def></def><sym>))</sym><br />
<def></def>          <kwa>else let val</kwa> <def></def><sym>(</sym><def>b</def><sym>,</sym> <def>n</def><sym>) =</sym> <def></def><kwa>if</kwa> <def>n</def><sym>=</sym><def></def><num>0</num><def>w0</def> <kwa>then</kwa> <def></def><sym>(</sym><def>out b</def> <sym>; (</sym><def></def><num>0</num><def>w0</def><sym>,</sym> <def></def><num>0</num><def>w8</def><sym>))</sym> <def></def><kwa>else</kwa> <def></def><sym>(</sym><def>b</def><sym>,</sym> <def>n</def><sym>)</sym><br />
<def></def>               <kwa>in</kwa> <def>xl</def> <sym>(</sym><def>x</def><sym>+</sym><def></def><num>1</num><def></def><sym>,</sym> <def>y</def><sym>,</sym> <def>b</def><sym>+</sym><def>b</def><sym>+(</sym><def></def><kwa>if</kwa> <def>p</def> <sym>(</sym><def>x</def><sym>,</sym> <def>y</def><sym>)</sym> <def></def><kwa>then</kwa> <def></def><num>0</num><def>w1</def> <kwa>else</kwa> <def></def><num>0</num><def>w0</def><sym>),</sym> <def>n</def><sym>-</sym><def></def><num>0</num><def>w1</def><sym>)</sym> <def></def><kwa>end</kwa><br />
<def></def>       <kwa>and</kwa> <def>yl y</def> <sym>=</sym> <def></def><kwa>if</kwa> <def>y</def> <sym>&lt;</sym> <def>h</def> <kwa>then</kwa> <def>xl</def> <sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def>y</def><sym>,</sym> <def></def><num>0</num><def>w0</def><sym>,</sym> <def></def><num>0</num><def>w8</def><sym>)</sym> <def></def><kwa>else</kwa> <def></def><sym>()</sym><br />
<def></def>   <kwa>in</kwa> <def>app print</def> <sym>[</sym><def></def><str>&quot;P4</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def></def><kwa>Int</kwa><def>.toString h</def><sym>,</sym> <def></def><str>&quot; &quot;</str><def></def><sym>,</sym> <def></def><kwa>Int</kwa><def>.toString w</def><sym>,</sym> <def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>] ;</sym> <def>yl</def> <num>0</num> <def></def><kwa>end</kwa><br />
<def></def><br />
<kwa>val</kwa> <def>n</def> <sym>=</sym> <def>valOf</def> <sym>(</sym><def></def><kwa>Int</kwa><def>.fromString</def> <sym>(</sym><def>hd</def> <sym>(</sym><def>CommandLine.arguments</def> <sym>())))</sym> <def></def><kwa>handle</kwa> <def>_</def> <sym>=&gt;</sym> <def></def><num>600</num><br />
<def></def><br />
<kwa>val</kwa> <def>_</def> <sym>=</sym> <def>mandel</def> <sym>(</sym><def>n</def><sym>,</sym> <def>n</def><sym>)</sym><def></def><br />
</source>
