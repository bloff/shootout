<source>
<def></def><com>/**</com><br />
<com> * The Computer Language Benchmarks Game</com><br />
<com> * Based on the CAL Open Quark version</com><br />
<com> * Contributed by Magnus Byne.</com><br />
<com> */</com><def></def><br />
<kwa>module</kwa> <def>Binarytrees</def><sym>;</sym><br />
<def></def><br />
<kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Core</def><sym>.</sym><def>Prelude</def> <kwa>using</kwa><br />
<def></def>    <kwa>typeConstructor</kwa> <def></def><sym>=</sym> <def>Int</def><sym>,</sym> <def>String</def><sym>;</sym><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>eager</def><sym>,</sym> <def>max</def><sym>,</sym> <def>seq</def><sym>,</sym> <def>stringToInt</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Core</def><sym>.</sym><def>Bits</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>shiftL</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Collections</def><sym>.</sym><def>List</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>head</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Core</def><sym>.</sym><def>Debug</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>show</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<kwa>import</kwa> <def>Cal</def><sym>.</sym><def>IO</def><sym>.</sym><def>Console</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>printLine</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<kwa>data public</kwa> <def>Tree</def> <sym>=</sym><br />
<def>    Empty</def> <sym>|</sym><br />
<def>    Node<br />
        value</def> <sym>:: !</sym><def>Int<br />
        leftChild</def> <sym>:: !</sym><def>Tree<br />
        rightChild</def> <sym>:: !</sym><def>Tree</def><br />
    <sym>;</sym><br />
<def></def><br />
<com>/** Traverses tree and returns a checksum on the values in the nodes.*/</com><def><br />
check</def> <sym>::</sym> <def>Tree</def> <sym>-&gt;</sym> <def>Int</def><sym>;</sym><br />
<def>check</def> <sym>!</sym><def>tree</def> <sym>=</sym><br />
<def></def>    <kwa>case</kwa> <def>tree</def> <kwa>of</kwa><br />
<def>    Empty</def> <sym>-&gt;</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>    Node value left right</def> <sym>-&gt;</sym> <def>value</def> <sym>+</sym> <def>check left</def> <sym>-</sym> <def>check right</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<com>/** builds a tree of depth */</com><def><br />
make</def> <sym>::</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Tree</def><sym>;</sym><br />
<def>make</def> <sym>!</sym><def>i</def> <sym>!</sym><def>depth</def> <sym>=</sym><br />
<def></def>    <kwa>if</kwa> <def>depth</def> <sym>==</sym> <def></def><num>1</num> <def></def><kwa>then</kwa><br />
<def>        Node<br />
            i</def><br />
            <sym>(</sym><def>Node</def> <sym>(</sym><def></def><num>2</num> <def></def><sym>*</sym> <def>i</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>)</sym> <def>Empty Empty</def><sym>)</sym><br />
<def></def>            <sym>(</sym><def>Node</def> <sym>(</sym><def></def><num>2</num> <def></def><sym>*</sym> <def>i</def><sym>)</sym> <def>Empty Empty</def><sym>)</sym><br />
<def></def>    <kwa>else</kwa><br />
<def>        Node<br />
            i</def><br />
            <sym>(</sym><def>make</def> <sym>(</sym><def></def><num>2</num> <def></def><sym>*</sym> <def>i</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>) (</sym><def>depth</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>))</sym><br />
<def></def>            <sym>(</sym><def>make</def> <sym>(</sym><def></def><num>2</num> <def></def><sym>*</sym> <def>i</def><sym>) (</sym><def>depth</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>))</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<com>/**</com><br />
<com> * Test different numbers of trees at different depths and</com><br />
<com> * writes the number and checksum to stdout.</com><br />
<com> */</com><def><br />
testTrees</def> <sym>::</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt; ();</sym><br />
<def>testTrees</def> <sym>!</sym><def>depth</def> <sym>!</sym><def>minDepth</def> <sym>!</sym><def>maxDepth</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa><br />
<def></def>        <slc>//allocates and checks 2i trees, each of depth depth</slc><br />
<def>        testFixedDepth</def> <sym>::</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def><sym>;</sym><br />
<def>        testFixedDepth</def> <sym>!</sym><def>i</def> <sym>!</sym><def>depth</def> <sym>!</sym><def>checksum</def> <sym>=</sym><br />
<def></def>            <kwa>if</kwa> <def>i</def> <sym>==</sym> <def></def><num>0</num> <def></def><kwa>then</kwa><br />
<def>                checksum</def><br />
            <kwa>else</kwa><br />
<def>                testFixedDepth</def><br />
                    <sym>(</sym><def>i</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def>                    depth</def><br />
                    <sym>(</sym><br />
<def>                        checksum</def> <sym>+</sym> <def>check</def> <sym>(</sym><def>make i depth</def><sym>)</sym><br />
<def></def>                        <sym>+</sym> <def>check</def> <sym>(</sym><def>make</def> <sym>(-</sym><def>i</def><sym>)</sym> <def>depth</def><sym>)</sym><br />
<def></def>                    <sym>)</sym><br />
<def></def>            <sym>;</sym><br />
<def></def>    <kwa>in</kwa><br />
<def></def>        <kwa>if</kwa> <def>depth</def> <sym>&gt;</sym> <def>maxDepth</def> <kwa>then</kwa><br />
<def></def>            <sym>()</sym><br />
<def></def>        <kwa>else</kwa><br />
<def></def>            <kwa>let</kwa><br />
<def>                i</def> <sym>::</sym> <def>Int</def><sym>;</sym><br />
<def>                i</def> <sym>=</sym> <def>eager $ shiftL</def> <num>1</num> <def></def><sym>(</sym><def>maxDepth</def> <sym>-</sym> <def>depth</def> <sym>+</sym> <def>minDepth</def><sym>);</sym><br />
<def></def>            <kwa>in</kwa><br />
<def>                printLine</def><br />
                    <sym>(</sym><br />
<def>                        show</def> <sym>(</sym><def>i</def> <sym>*</sym> <def></def><num>2</num><def></def><sym>)</sym><br />
<def></def>                        <sym>++</sym> <def></def><str>&quot;</str><esc>\t</esc> <str>trees of depth &quot;</str><def></def><br />
                        <sym>++</sym> <def>show depth</def><br />
                        <sym>++</sym> <def></def><str>&quot;</str><esc>\t</esc> <str>check: &quot;</str><def></def><br />
                        <sym>++</sym> <def>show</def> <sym>(</sym><def>testFixedDepth i depth</def> <num>0</num><def></def><sym>)</sym><br />
<def></def>                    <sym>)</sym><br />
<def></def>                <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                testTrees</def> <sym>(</sym><def>depth</def> <sym>+</sym> <def></def><num>2</num><def></def><sym>)</sym> <def>minDepth maxDepth</def><br />
    <sym>;</sym><br />
<def><br />
main</def> <sym>:: [</sym><def>String</def><sym>] -&gt; ();</sym><br />
<def></def><kwa>public</kwa> <def>main</def> <sym>!</sym><def>args</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa><br />
<def>        n</def> <sym>::</sym> <def>Int</def><sym>;</sym><br />
<def>        n</def> <sym>=</sym> <def>eager $ stringToInt</def> <sym>(</sym><def>head args</def><sym>);</sym><br />
<def><br />
        minDepth</def> <sym>::</sym> <def>Int</def><sym>;</sym><br />
<def>        minDepth</def> <sym>=</sym> <def></def><num>4</num><def></def><sym>;</sym><br />
<def><br />
        maxDepth</def> <sym>::</sym> <def>Int</def><sym>;</sym><br />
<def>        maxDepth</def> <sym>=</sym> <def>max</def> <sym>(</sym><def>minDepth</def> <sym>+</sym> <def></def><num>2</num><def></def><sym>)</sym> <def>n</def><sym>;</sym><br />
<def><br />
        stretchDepth</def> <sym>::</sym> <def>Int</def><sym>;</sym><br />
<def>        stretchDepth</def> <sym>=</sym> <def>maxDepth</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def><br />
        longLivedTree</def> <sym>::</sym> <def>Tree</def><sym>;</sym><br />
<def>        longLivedTree</def> <sym>=</sym> <def>make</def> <num>0</num> <def>maxDepth</def><sym>;</sym><br />
<def></def>    <kwa>in</kwa><br />
<def>        printLine</def><br />
            <sym>(</sym><br />
<def></def>                <str>&quot;stretch tree of depth &quot;</str><def></def><br />
                <sym>++</sym> <def>show stretchDepth</def><br />
                <sym>++</sym> <def></def><str>&quot;</str><esc>\t</esc> <str>check: &quot;</str><def></def><br />
                <sym>++</sym> <def>show</def> <sym>(</sym><def>check</def> <sym>(</sym><def>make</def> <num>0</num> <def>stretchDepth</def><sym>))</sym><br />
<def></def>            <sym>)</sym><br />
<def></def>        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>        longLivedTree</def><br />
        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>        testTrees minDepth minDepth maxDepth</def><br />
        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>        printLine</def><br />
            <sym>(</sym><br />
<def></def>                <str>&quot;long lived tree of depth &quot;</str><def></def><br />
                <sym>++</sym> <def>show maxDepth</def><br />
                <sym>++</sym> <def></def><str>&quot;</str><esc>\t</esc> <str>check: &quot;</str><def></def><br />
                <sym>++</sym> <def>show</def> <sym>(</sym><def>check longLivedTree</def><sym>)</sym><br />
<def></def>            <sym>)</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
</source>
