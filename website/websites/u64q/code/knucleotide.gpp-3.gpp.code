<source>
<def></def><slc>// The Computer Language Shootout</slc><br />
<def></def><slc>// http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>// Contributed by Paul Kitchin</slc><br />
<def></def><br />
<dir>#include &lt;algorithm&gt;</dir><br />
<def></def><dir>#include &lt;cctype&gt;</dir><br />
<def></def><dir>#include &lt;cstring&gt;</dir><br />
<def></def><dir>#include &lt;iomanip&gt;</dir><br />
<def></def><dir>#include &lt;iostream&gt;</dir><br />
<def></def><dir>#include &lt;iterator&gt;</dir><br />
<def></def><dir>#include &lt;set&gt;</dir><br />
<def></def><dir>#include &lt;vector&gt;</dir><br />
<def></def><dir>#include &lt;ctime&gt;</dir><br />
<def></def><br />
<kwc>template</kwc> <def></def><sym>&lt;</sym> <def>std</def><sym>::</sym><def></def><kwb>size_t</kwb> <def>size</def> <sym>&gt;</sym><br />
<def></def><kwb>struct</kwb> <def>hasher</def><br />
<sym>{</sym><br />
<def></def>   <kwb>static</kwb> <def>std</def><sym>::</sym><def></def><kwb>size_t const</kwb> <def>length</def> <sym>=</sym> <def>size</def><sym>;</sym><br />
<def></def>   <kwb>static char const</kwb> <def></def><sym>*</sym> <def></def><kwd>string</kwd><def></def><sym>(</sym><def></def><kwb>char const</kwb> <def></def><sym>*</sym> <def>string</def><sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def></def>      <kwb>static char</kwb> <def>string_</def><sym>[</sym><def>size</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>] = {</sym><def></def><num>0</num><def></def><sym>};</sym><br />
<def>      std</def><sym>::</sym><def></def><kwd>strncpy</kwd><def></def><sym>(</sym><def>string_</def><sym>,</sym> <def>string</def><sym>,</sym> <def>size</def><sym>);</sym><br />
<def></def>      <kwa>return</kwa> <def>string_</def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def>   std</def><sym>::</sym><def></def><kwb>size_t</kwb> <def></def><kwd>hash</kwd><def></def><sym>(</sym><def></def><kwb>char const</kwb> <def></def><sym>*</sym> <def>string</def><sym>)</sym> <def></def><kwb>const</kwb><br />
<def></def>   <sym>{</sym><br />
<def>      std</def><sym>::</sym><def></def><kwb>size_t</kwb> <def>h</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>      <kwa>for</kwa> <def></def><sym>(</sym><def>std</def><sym>::</sym><def></def><kwb>size_t</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>size</def><sym>; ++</sym><def>i</def><sym>)</sym><br />
<def></def>      <sym>{</sym><br />
<def>         h</def> <sym>= (</sym><def>h</def> <sym>*</sym> <def></def><num>4</num><def></def><sym>) + ((</sym><def>string</def><sym>[</sym><def>i</def><sym>] &amp;</sym> <def></def><num>0x6</num><def></def><sym>) /</sym> <def></def><num>2</num><def></def><sym>);</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>      <kwa>return</kwa> <def>h</def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def>   <kwb>bool</kwb> <def></def><kwd>equal</kwd><def></def><sym>(</sym><def></def><kwb>char const</kwb> <def></def><sym>*</sym> <def>lhs</def><sym>,</sym> <def></def><kwb>char const</kwb> <def></def><sym>*</sym> <def>rhs</def><sym>)</sym> <def></def><kwb>const</kwb><br />
<def></def>   <sym>{</sym><br />
<def></def>      <kwa>return</kwa> <def>std</def><sym>::</sym><def></def><kwd>strncmp</kwd><def></def><sym>(</sym><def>lhs</def><sym>,</sym> <def>rhs</def><sym>,</sym> <def>size</def><sym>) ==</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>};</sym><br />
<def></def><br />
<kwc>template</kwc> <def></def><sym>&lt;</sym> <def>typename key</def><sym>,</sym> <def>typename value</def><sym>,</sym> <def>typename hash_traits</def> <sym>&gt;</sym><br />
<def></def><kwc>class</kwc> <def>hashtable</def><br />
   <sym>:</sym><br />
<def></def>   <kwc>private</kwc> <def>hash_traits</def><br />
<sym>{</sym><br />
<def></def><br />
   <kwc>public</kwc><def></def><sym>:</sym><br />
<def></def><br />
      <kwb>struct</kwb> <def>entry</def><br />
      <sym>{</sym><br />
<def></def>         <kwd>entry</kwd><def></def><sym>()</sym><br />
<def></def>            <sym>:</sym><br />
<def></def>            <kwd>key_</kwd><def></def><sym>(</sym><def></def><kwd>key</kwd><def></def><sym>()),</sym><br />
<def></def>            <kwd>value_</kwd><def></def><sym>(</sym><def></def><kwd>value</kwd><def></def><sym>()),</sym><br />
<def></def>            <kwd>next_</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>)</sym><br />
<def></def>         <sym>{</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>         <kwd>entry</kwd><def></def><sym>(</sym><def>key key_</def><sym>)</sym><br />
<def></def>            <sym>:</sym><br />
<def></def>            <kwd>key_</kwd><def></def><sym>(</sym><def>key_</def><sym>),</sym><br />
<def></def>            <kwd>value_</kwd><def></def><sym>(</sym><def></def><kwd>value</kwd><def></def><sym>()),</sym><br />
<def></def>            <kwd>next_</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>)</sym><br />
<def></def>         <sym>{</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>         <kwb>bool</kwb> <def></def><kwc>operator</kwc><def></def><sym>&lt;(</sym><def>entry</def> <kwb>const</kwb> <def></def><sym>&amp;</sym> <def>entry</def><sym>)</sym> <def></def><kwb>const</kwb><br />
<def></def>         <sym>{</sym><br />
<def></def>            <kwa>return</kwa> <def>value_</def> <sym>&gt;</sym> <def>entry</def><sym>.</sym><def>value_</def><sym>;</sym><br />
<def></def>         <sym>}</sym><br />
<def>         key key_</def><sym>;</sym><br />
<def>         value value_</def><sym>;</sym><br />
<def>         entry</def> <sym>*</sym> <def>next_</def><sym>;</sym><br />
<def></def>      <sym>};</sym><br />
<def></def><br />
      <kwd>hashtable</kwd><def></def><sym>(</sym><def>std</def><sym>::</sym><def></def><kwb>size_t</kwb> <def>size</def><sym>)</sym><br />
<def></def>         <sym>:</sym><br />
<def></def>         <kwd>size_</kwd><def></def><sym>(</sym><def></def><kwd>power_of_two</kwd><def></def><sym>(</sym><def>size</def><sym>)),</sym><br />
<def></def>         <kwd>table_</kwd><def></def><sym>(</sym><def>size_</def><sym>)</sym><br />
<def></def>      <sym>{</sym><br />
<def></def>      <sym>}</sym><br />
<def><br />
      value</def> <sym>&amp;</sym> <def></def><kwc>operator</kwc><def></def><sym>[](</sym><def>key lookup_key</def><sym>)</sym><br />
<def></def>      <sym>{</sym><br />
<def>         entry</def> <sym>*</sym> <def>node</def> <sym>= &amp;</sym><def>table_</def><sym>[</sym><def></def><kwd>hash</kwd><def></def><sym>(</sym><def>lookup_key</def><sym>) &amp; (</sym><def>size_</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>)];</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>node</def><sym>-&gt;</sym><def>key_</def><sym>)</sym><br />
<def></def>         <sym>{</sym><br />
<def></def>            <kwa>while</kwa> <def></def><sym>(!</sym><def></def><kwd>equal</kwd><def></def><sym>(</sym><def>lookup_key</def><sym>,</sym> <def>node</def><sym>-&gt;</sym><def>key_</def><sym>) &amp;&amp;</sym> <def>node</def><sym>-&gt;</sym><def>next_</def><sym>)</sym><br />
<def></def>            <sym>{</sym><br />
<def>               node</def> <sym>=</sym> <def>node</def><sym>-&gt;</sym><def>next_</def><sym>;</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def></def><kwd>equal</kwd><def></def><sym>(</sym><def>lookup_key</def><sym>,</sym> <def>node</def><sym>-&gt;</sym><def>key_</def><sym>))</sym><br />
<def></def>            <sym>{</sym><br />
<def></def>               <kwa>return</kwa> <def>node</def><sym>-&gt;</sym><def>value_</def><sym>;</sym><br />
<def></def>            <sym>}</sym><br />
<def>            node</def><sym>-&gt;</sym><def>next_</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>entry</kwd><def></def><sym>(</sym><def></def><kwd>value</kwd><def></def><sym>());</sym><br />
<def>            node</def> <sym>=</sym> <def>node</def><sym>-&gt;</sym><def>next_</def><sym>;</sym><br />
<def></def>         <sym>}</sym><br />
<def>         node</def><sym>-&gt;</sym><def>key_</def> <sym>=</sym> <def>lookup_key</def><sym>;</sym><br />
<def></def>         <kwa>return</kwa> <def>node</def><sym>-&gt;</sym><def>value_</def><sym>;</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><br />
      <kwc>typedef</kwc> <def>typename std</def><sym>::</sym><def>vector</def><sym>&lt;</sym> <def>entry</def> <sym>&gt;::</sym><def>const_iterator const_iterator</def><sym>;</sym><br />
<def><br />
      const_iterator</def> <kwd>begin</kwd><def></def><sym>()</sym> <def></def><kwb>const</kwb><br />
<def></def>      <sym>{</sym><br />
<def></def>         <kwa>return</kwa> <def>table_</def><sym>.</sym><def></def><kwd>begin</kwd><def></def><sym>();</sym><br />
<def></def>      <sym>}</sym><br />
<def><br />
      const_iterator</def> <kwd>end</kwd><def></def><sym>()</sym> <def></def><kwb>const</kwb><br />
<def></def>      <sym>{</sym><br />
<def></def>         <kwa>return</kwa> <def>table_</def><sym>.</sym><def></def><kwd>end</kwd><def></def><sym>();</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><br />
   <kwc>private</kwc><def></def><sym>:</sym><br />
<def><br />
      std</def><sym>::</sym><def></def><kwb>size_t</kwb> <def></def><kwd>power_of_two</kwd><def></def><sym>(</sym><def>std</def><sym>::</sym><def></def><kwb>size_t</kwb> <def>lower_bound</def><sym>)</sym><br />
<def></def>      <sym>{</sym><br />
<def></def>         <kwa>for</kwa> <def></def><sym>(</sym><def>std</def><sym>::</sym><def></def><kwb>size_t</kwb> <def>i</def> <sym>=</sym> <def></def><num>4</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def></def><num>64</num> <def></def><sym>*</sym> <def></def><num>1024</num><def></def><sym>;</sym> <def>i</def> <sym>*=</sym> <def></def><num>2</num><def></def><sym>)</sym><br />
<def></def>         <sym>{</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>i</def> <sym>&gt;=</sym> <def>lower_bound</def><sym>)</sym><br />
<def></def>            <sym>{</sym><br />
<def></def>               <kwa>return</kwa> <def>i</def><sym>;</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>         <kwa>return</kwa> <def></def><num>1024</num> <def></def><sym>*</sym> <def></def><num>64</num><def></def><sym>;</sym><br />
<def></def>      <sym>}</sym><br />
<def><br />
      std</def><sym>::</sym><def></def><kwb>size_t</kwb> <def>size_</def><sym>;</sym><br />
<def>      std</def><sym>::</sym><def>vector</def><sym>&lt;</sym> <def>entry</def> <sym>&gt;</sym> <def>table_</def><sym>;</sym><br />
<def></def><br />
<sym>};</sym><br />
<def></def><br />
<kwc>template</kwc> <def></def><sym>&lt;</sym> <def>typename hasher</def> <sym>&gt;</sym><br />
<def></def><kwb>void</kwb> <def></def><kwd>write_frequencies</kwd><def></def><sym>(</sym><def>std</def><sym>::</sym><def>vector</def><sym>&lt;</sym> <def></def><kwb>char</kwb> <def></def><sym>&gt;</sym> <def></def><kwb>const</kwb> <def></def><sym>&amp;</sym> <def>input</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def>   std</def><sym>::</sym><def></def><kwb>size_t</kwb> <def>sum</def> <sym>=</sym> <def>input</def><sym>.</sym><def></def><kwd>size</kwd><def></def><sym>() +</sym> <def></def><num>1</num> <def></def><sym>-</sym> <def>hasher</def><sym>::</sym><def>length</def><sym>;</sym><br />
<def></def>   <kwc>typedef</kwc> <def>hashtable</def><sym>&lt;</sym> <def></def><kwb>char const</kwb> <def></def><sym>*,</sym> <def>std</def><sym>::</sym><def></def><kwb>size_t</kwb><def></def><sym>,</sym> <def>hasher</def> <sym>&gt;</sym> <def>frequency_table</def><sym>;</sym><br />
<def>   frequency_table</def> <kwd>frequencies</kwd><def></def><sym>(</sym><def>std</def><sym>::</sym><def>min</def><sym>&lt;</sym> <def>std</def><sym>::</sym><def></def><kwb>size_t</kwb> <def></def><sym>&gt;(</sym><def></def><num>1</num> <def></def><sym>&lt;&lt; (</sym><def>hasher</def><sym>::</sym><def>length</def> <sym>*</sym> <def></def><num>2</num><def></def><sym>),</sym> <def>sum</def><sym>));</sym><br />
<def></def>   <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>unsigned int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>i_end</def> <sym>=</sym> <def>input</def><sym>.</sym><def></def><kwd>size</kwd><def></def><sym>() +</sym> <def></def><num>1</num> <def></def><sym>-</sym> <def>hasher</def><sym>::</sym><def>length</def><sym>;</sym> <def>i</def> <sym>!=</sym> <def>i_end</def><sym>; ++</sym><def>i</def><sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def></def>      <sym>++</sym><def>frequencies</def><sym>[&amp;</sym><def>input</def><sym>[</sym><def>i</def><sym>]];</sym><br />
<def></def>   <sym>}</sym><br />
<def>   std</def><sym>::</sym><def>set</def><sym>&lt;</sym> <def>typename frequency_table</def><sym>::</sym><def>entry</def> <sym>&gt;</sym> <def></def><kwd>ordered_entries</kwd><def></def><sym>(</sym><def>frequencies</def><sym>.</sym><def></def><kwd>begin</kwd><def></def><sym>(),</sym> <def>frequencies</def><sym>.</sym><def></def><kwd>end</kwd><def></def><sym>());</sym><br />
<def></def>   <kwa>for</kwa> <def></def><sym>(</sym><def>typename std</def><sym>::</sym><def>set</def><sym>&lt;</sym> <def>typename frequency_table</def><sym>::</sym><def>entry</def> <sym>&gt;::</sym><def>const_iterator i</def> <sym>=</sym> <def>ordered_entries</def><sym>.</sym><def></def><kwd>begin</kwd><def></def><sym>(),</sym> <def>i_end</def> <sym>=</sym> <def>ordered_entries</def><sym>.</sym><def></def><kwd>end</kwd><def></def><sym>();</sym> <def>i</def> <sym>!=</sym> <def>i_end</def><sym>; ++</sym><def>i</def><sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def>      std</def><sym>::</sym><def>cout</def> <sym>&lt;&lt;</sym> <def>hasher</def><sym>::</sym><def></def><kwd>string</kwd><def></def><sym>(</sym><def>i</def><sym>-&gt;</sym><def>key_</def><sym>) &lt;&lt;</sym> <def></def><str>' '</str><def></def> <sym>&lt;&lt; (</sym><def>sum ?</def> <kwb>double</kwb><def></def><sym>(</sym><def></def><num>100</num> <def></def><sym>*</sym> <def>i</def><sym>-&gt;</sym><def>value_</def><sym>) /</sym> <def>sum</def> <sym>:</sym> <def></def><num>0.0</num><def></def><sym>) &lt;&lt;</sym> <def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def>   std</def><sym>::</sym><def>cout</def> <sym>&lt;&lt;</sym> <def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwc>template</kwc> <def></def><sym>&lt;</sym> <def>typename hasher</def> <sym>&gt;</sym><br />
<def></def><kwb>void</kwb> <def></def><kwd>write_count</kwd><def></def><sym>(</sym><def>std</def><sym>::</sym><def>vector</def><sym>&lt;</sym> <def></def><kwb>char</kwb> <def></def><sym>&gt;</sym> <def></def><kwb>const</kwb> <def></def><sym>&amp;</sym> <def>input</def><sym>,</sym> <def></def><kwb>char const</kwb> <def></def><sym>*</sym> <def>string</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def>   std</def><sym>::</sym><def></def><kwb>size_t</kwb> <def>sum</def> <sym>=</sym> <def>input</def><sym>.</sym><def></def><kwd>size</kwd><def></def><sym>() +</sym> <def></def><num>1</num> <def></def><sym>-</sym> <def>hasher</def><sym>::</sym><def>length</def><sym>;</sym><br />
<def></def>   <kwc>typedef</kwc> <def>hashtable</def><sym>&lt;</sym> <def></def><kwb>char const</kwb> <def></def><sym>*,</sym> <def>std</def><sym>::</sym><def></def><kwb>size_t</kwb><def></def><sym>,</sym> <def>hasher</def> <sym>&gt;</sym> <def>frequency_table</def><sym>;</sym><br />
<def>   frequency_table</def> <kwd>frequencies</kwd><def></def><sym>(</sym><def>std</def><sym>::</sym><def>min</def><sym>&lt;</sym> <def>std</def><sym>::</sym><def></def><kwb>size_t</kwb> <def></def><sym>&gt;(</sym><def></def><num>1</num> <def></def><sym>&lt;&lt;</sym> <def>std</def><sym>::</sym><def></def><kwd>min</kwd><def></def><sym>(</sym><def></def><num>30u</num><def></def><sym>,</sym> <def>hasher</def><sym>::</sym><def>length</def> <sym>*</sym> <def></def><num>2</num><def></def><sym>),</sym> <def>sum</def><sym>));</sym><br />
<def></def>   <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>unsigned int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>i_end</def> <sym>=</sym> <def>input</def><sym>.</sym><def></def><kwd>size</kwd><def></def><sym>() +</sym> <def></def><num>1</num> <def></def><sym>-</sym> <def>hasher</def><sym>::</sym><def>length</def><sym>;</sym> <def>i</def> <sym>!=</sym> <def>i_end</def><sym>; ++</sym><def>i</def><sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def></def>      <sym>++</sym><def>frequencies</def><sym>[&amp;</sym><def>input</def><sym>[</sym><def>i</def><sym>]];</sym><br />
<def></def>   <sym>}</sym><br />
<def>   std</def><sym>::</sym><def>cout</def> <sym>&lt;&lt;</sym> <def>frequencies</def><sym>[</sym><def>string</def><sym>] &lt;&lt;</sym> <def></def><str>'</str><esc>\t</esc><str>'</str><def></def> <sym>&lt;&lt;</sym> <def>string</def> <sym>&lt;&lt;</sym> <def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>char</kwb> <def></def><kwd>to_upper</kwd><def></def><sym>(</sym><def></def><kwb>char</kwb> <def>c</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>   <kwa>return</kwa> <def></def><kwb>char</kwb><def></def><sym>(</sym><def>std</def><sym>::</sym><def></def><kwd>toupper</kwd><def></def><sym>(</sym><def>c</def><sym>));</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>int</kwb> <def></def><kwd>main</kwd><def></def><sym>()</sym><br />
<def></def><sym>{</sym><br />
<def>   std</def><sym>::</sym><def>vector</def><sym>&lt;</sym> <def></def><kwb>char</kwb> <def></def><sym>&gt;</sym> <def>input</def><sym>;</sym><br />
<def></def>   <kwb>char</kwb> <def>buffer</def><sym>[</sym><def></def><num>4096</num><def></def><sym>];</sym><br />
<def></def>   <kwa>while</kwa> <def></def><sym>(</sym><def>std</def><sym>::</sym><def>cin</def><sym>.</sym><def></def><kwd>getline</kwd><def></def><sym>(</sym><def>buffer</def><sym>,</sym> <def></def><num>4096</num><def></def><sym>) &amp;&amp;</sym> <def>std</def><sym>::</sym><def></def><kwd>strncmp</kwd><def></def><sym>(</sym><def>buffer</def><sym>,</sym> <def></def><str>&quot;&gt;THREE&quot;</str><def></def><sym>,</sym> <def></def><num>6</num><def></def><sym>) !=</sym> <def></def><num>0</num><def></def><sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def></def>   <sym>}</sym><br />
<def></def>   <kwa>while</kwa> <def></def><sym>(</sym><def>std</def><sym>::</sym><def>cin</def><sym>.</sym><def></def><kwd>getline</kwd><def></def><sym>(</sym><def>buffer</def><sym>,</sym> <def></def><num>4096</num><def></def><sym>) &amp;&amp;</sym> <def>buffer</def><sym>[</sym><def></def><num>0</num><def></def><sym>] !=</sym> <def></def><str>'&gt;'</str><def></def><sym>)</sym><br />
<def></def>   <sym>{</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>buffer</def><sym>[</sym><def></def><num>0</num><def></def><sym>] !=</sym> <def></def><str>';'</str><def></def><sym>)</sym><br />
<def></def>      <sym>{</sym><br />
<def>         input</def><sym>.</sym><def></def><kwd>insert</kwd><def></def><sym>(</sym><def>input</def><sym>.</sym><def></def><kwd>end</kwd><def></def><sym>(),</sym> <def>buffer</def><sym>,</sym> <def>buffer</def> <sym>+</sym> <def>std</def><sym>::</sym><def>cin</def><sym>.</sym><def></def><kwd>gcount</kwd><def></def><sym>() -</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def>   std</def><sym>::</sym><def></def><kwd>transform</kwd><def></def><sym>(</sym><def>input</def><sym>.</sym><def></def><kwd>begin</kwd><def></def><sym>(),</sym> <def>input</def><sym>.</sym><def></def><kwd>end</kwd><def></def><sym>(),</sym> <def>input</def><sym>.</sym><def></def><kwd>begin</kwd><def></def><sym>(),</sym> <def>to_upper</def><sym>);</sym><br />
<def>   std</def><sym>::</sym><def>cout</def> <sym>&lt;&lt;</sym> <def>std</def><sym>::</sym><def></def><kwd>setprecision</kwd><def></def><sym>(</sym><def></def><num>3</num><def></def><sym>) &lt;&lt;</sym> <def>std</def><sym>::</sym><def></def><kwd>setiosflags</kwd><def></def><sym>(</sym><def>std</def><sym>::</sym><def>ios</def><sym>::</sym><def>fixed</def><sym>);</sym><br />
<def>   write_frequencies</def><sym>&lt;</sym> <def>hasher</def><sym>&lt;</sym> <def></def><num>1</num> <def></def><sym>&gt; &gt;(</sym><def>input</def><sym>);</sym><br />
<def>   write_frequencies</def><sym>&lt;</sym> <def>hasher</def><sym>&lt;</sym> <def></def><num>2</num> <def></def><sym>&gt; &gt;(</sym><def>input</def><sym>);</sym><br />
<def>   write_count</def><sym>&lt;</sym> <def>hasher</def><sym>&lt;</sym> <def></def><num>3</num> <def></def><sym>&gt; &gt;(</sym><def>input</def><sym>,</sym> <def></def><str>&quot;GGT&quot;</str><def></def><sym>);</sym><br />
<def>   write_count</def><sym>&lt;</sym> <def>hasher</def><sym>&lt;</sym> <def></def><num>4</num> <def></def><sym>&gt; &gt;(</sym><def>input</def><sym>,</sym> <def></def><str>&quot;GGTA&quot;</str><def></def><sym>);</sym><br />
<def>   write_count</def><sym>&lt;</sym> <def>hasher</def><sym>&lt;</sym> <def></def><num>6</num> <def></def><sym>&gt; &gt;(</sym><def>input</def><sym>,</sym> <def></def><str>&quot;GGTATT&quot;</str><def></def><sym>);</sym><br />
<def>   write_count</def><sym>&lt;</sym> <def>hasher</def><sym>&lt;</sym> <def></def><num>12</num> <def></def><sym>&gt; &gt;(</sym><def>input</def><sym>,</sym> <def></def><str>&quot;GGTATTTTAATT&quot;</str><def></def><sym>);</sym><br />
<def>   write_count</def><sym>&lt;</sym> <def>hasher</def><sym>&lt;</sym> <def></def><num>18</num> <def></def><sym>&gt; &gt;(</sym><def>input</def><sym>,</sym> <def></def><str>&quot;GGTATTTTAATTTATAGT&quot;</str><def></def><sym>);</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
