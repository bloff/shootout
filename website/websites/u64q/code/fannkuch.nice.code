<span class="hl com">/* The Great Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Isaac Gouy</span>
<span class="hl com">*/</span>


<span class="hl kwb">long</span> fannkuch<span class="hl sym">(</span><span class="hl kwb">int</span> n<span class="hl sym">){</span>
   <span class="hl kwa">var</span> check <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">let</span> perm <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">int</span><span class="hl sym">[</span>n<span class="hl sym">];</span>
   <span class="hl kwa">let</span> perm1 <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">int</span><span class="hl sym">[</span>n<span class="hl sym">];</span>
   <span class="hl kwa">let</span> count <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">int</span><span class="hl sym">[</span>n<span class="hl sym">];</span>
   <span class="hl kwa">let</span> maxPerm <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">int</span><span class="hl sym">[</span>n<span class="hl sym">];</span>
   <span class="hl kwa">var</span> maxFlipsCount <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">var</span> m <span class="hl sym">=</span> n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>

   <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwa">var</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>n<span class="hl sym">;</span> i<span class="hl sym">++)</span> perm1<span class="hl sym">[</span>i<span class="hl sym">] =</span> i<span class="hl sym">;</span>
   <span class="hl kwa">var</span> r <span class="hl sym">=</span> n<span class="hl sym">;</span>
   <span class="hl kwa">while</span> <span class="hl sym">(</span>true<span class="hl sym">){</span>
      <span class="hl slc">// write-out the first 30 permutations</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>check <span class="hl sym">&lt;</span> <span class="hl num">30</span><span class="hl sym">){</span>
        <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>n<span class="hl sym">;</span> i<span class="hl sym">++)</span> print<span class="hl sym">(</span>perm1<span class="hl sym">[</span>i<span class="hl sym">]+</span><span class="hl num">1</span><span class="hl sym">);</span>
        println<span class="hl sym">();</span>
        check<span class="hl sym">++;</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">while</span> <span class="hl sym">(</span>r <span class="hl sym">!=</span> <span class="hl num">1</span><span class="hl sym">){</span> count<span class="hl sym">[</span>r<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">] =</span> r<span class="hl sym">;</span> r<span class="hl sym">--; }</span>
      <span class="hl kwa">if</span> <span class="hl sym">(! (</span>perm1<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]==</span><span class="hl num">0</span> <span class="hl sym">||</span> perm1<span class="hl sym">[</span>m<span class="hl sym">] ==</span> m<span class="hl sym">)){</span>
         <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwa">var</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>n<span class="hl sym">;</span> i<span class="hl sym">++)</span> perm<span class="hl sym">[</span>i<span class="hl sym">] =</span> perm1<span class="hl sym">[</span>i<span class="hl sym">];</span>
         <span class="hl kwa">var</span> flipsCount <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         <span class="hl kwb">int</span> k<span class="hl sym">;</span>
         <span class="hl kwa">while</span> <span class="hl sym">( !((</span>k<span class="hl sym">=</span>perm<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]) ==</span> <span class="hl num">0</span><span class="hl sym">) ){</span>
            <span class="hl kwb">int</span> k2 <span class="hl sym">=</span> k<span class="hl sym">+</span><span class="hl num">1</span> <span class="hl sym">&gt;&gt;</span> <span class="hl num">1</span><span class="hl sym">;</span>
            <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwa">var</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>k2<span class="hl sym">;</span> i<span class="hl sym">++){</span>
               <span class="hl kwa">let</span> temp <span class="hl sym">=</span> perm<span class="hl sym">[</span>i<span class="hl sym">];</span> perm<span class="hl sym">[</span>i<span class="hl sym">] =</span> perm<span class="hl sym">[</span>k<span class="hl sym">-</span>i<span class="hl sym">];</span> perm<span class="hl sym">[</span>k<span class="hl sym">-</span>i<span class="hl sym">] =</span> temp<span class="hl sym">;</span>
            <span class="hl sym">}</span>
            flipsCount<span class="hl sym">++;</span>
         <span class="hl sym">}</span>

         <span class="hl kwa">if</span> <span class="hl sym">(</span>flipsCount <span class="hl sym">&gt;</span> maxFlipsCount<span class="hl sym">){</span>
            maxFlipsCount <span class="hl sym">=</span> flipsCount<span class="hl sym">;</span>
            <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwa">var</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>n<span class="hl sym">;</span> i<span class="hl sym">++)</span> maxPerm<span class="hl sym">[</span>i<span class="hl sym">] =</span> perm1<span class="hl sym">[</span>i<span class="hl sym">];</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">while</span> <span class="hl sym">(</span>true<span class="hl sym">){</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>r <span class="hl sym">==</span> n<span class="hl sym">)</span> <span class="hl kwa">return</span> maxFlipsCount<span class="hl sym">;</span>
         <span class="hl kwa">let</span> perm0 <span class="hl sym">=</span> perm1<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
         <span class="hl kwa">var</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> r<span class="hl sym">){</span>
            <span class="hl kwa">let</span> j <span class="hl sym">=</span> i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
            perm1<span class="hl sym">[</span>i<span class="hl sym">] =</span> perm1<span class="hl sym">[</span>j<span class="hl sym">];</span>
            i <span class="hl sym">=</span> j<span class="hl sym">;</span>
         <span class="hl sym">}</span>
         perm1<span class="hl sym">[</span>r<span class="hl sym">] =</span> perm0<span class="hl sym">;</span>

         count<span class="hl sym">[</span>r<span class="hl sym">] =</span> count<span class="hl sym">[</span>r<span class="hl sym">] -</span> <span class="hl num">1</span><span class="hl sym">;</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>count<span class="hl sym">[</span>r<span class="hl sym">] &gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">break</span><span class="hl sym">;</span>
         r<span class="hl sym">++;</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwb">void</span> main<span class="hl sym">(</span>String<span class="hl sym">[]</span> args<span class="hl sym">){</span>
   <span class="hl kwa">let</span> n <span class="hl sym">=</span> Integer<span class="hl sym">.</span>parseInt<span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>
   println<span class="hl sym">(</span><span class="hl str">&quot;Pfannkuchen(&quot;</span> <span class="hl sym">+</span> n <span class="hl sym">+</span> <span class="hl str">&quot;) = &quot;</span> <span class="hl sym">+</span> fannkuch<span class="hl sym">(</span>n<span class="hl sym">));</span>
<span class="hl sym">}</span>
