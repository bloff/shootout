<source>
<def></def><com>/* The Great Computer Language Shootout</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com></com><br />
<com>   contributed by Isaac Gouy</com><br />
<com>*/</com><def></def><br />
<br />
<br />
<kwb>long</kwb> <def>fannkuch</def><sym>(</sym><def></def><kwb>int</kwb> <def>n</def><sym>){</sym><br />
<def></def>   <kwa>var</kwa> <def>check</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>   <kwa>let</kwa> <def>perm</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwb>int</kwb><def></def><sym>[</sym><def>n</def><sym>];</sym><br />
<def></def>   <kwa>let</kwa> <def>perm1</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwb>int</kwb><def></def><sym>[</sym><def>n</def><sym>];</sym><br />
<def></def>   <kwa>let</kwa> <def>count</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwb>int</kwb><def></def><sym>[</sym><def>n</def><sym>];</sym><br />
<def></def>   <kwa>let</kwa> <def>maxPerm</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwb>int</kwb><def></def><sym>[</sym><def>n</def><sym>];</sym><br />
<def></def>   <kwa>var</kwa> <def>maxFlipsCount</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>   <kwa>var</kwa> <def>m</def> <sym>=</sym> <def>n</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def><br />
   <kwa>for</kwa><def></def><sym>(</sym><def></def><kwa>var</kwa> <def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>i</def><sym>&lt;</sym><def>n</def><sym>;</sym> <def>i</def><sym>++)</sym> <def>perm1</def><sym>[</sym><def>i</def><sym>] =</sym> <def>i</def><sym>;</sym><br />
<def></def>   <kwa>var</kwa> <def>r</def> <sym>=</sym> <def>n</def><sym>;</sym><br />
<def></def>   <kwa>while</kwa> <def></def><sym>(</sym><def>true</def><sym>){</sym><br />
<def></def>      <slc>// write-out the first 30 permutations</slc><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>check</def> <sym>&lt;</sym> <def></def><num>30</num><def></def><sym>){</sym><br />
<def></def>        <kwa>for</kwa><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>i</def><sym>&lt;</sym><def>n</def><sym>;</sym> <def>i</def><sym>++)</sym> <def>print</def><sym>(</sym><def>perm1</def><sym>[</sym><def>i</def><sym>]+</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def>        println</def><sym>();</sym><br />
<def>        check</def><sym>++;</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><br />
      <kwa>while</kwa> <def></def><sym>(</sym><def>r</def> <sym>!=</sym> <def></def><num>1</num><def></def><sym>){</sym> <def>count</def><sym>[</sym><def>r</def><sym>-</sym><def></def><num>1</num><def></def><sym>] =</sym> <def>r</def><sym>;</sym> <def>r</def><sym>--; }</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(! (</sym><def>perm1</def><sym>[</sym><def></def><num>0</num><def></def><sym>]==</sym><def></def><num>0</num> <def></def><sym>||</sym> <def>perm1</def><sym>[</sym><def>m</def><sym>] ==</sym> <def>m</def><sym>)){</sym><br />
<def></def>         <kwa>for</kwa><def></def><sym>(</sym><def></def><kwa>var</kwa> <def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>i</def><sym>&lt;</sym><def>n</def><sym>;</sym> <def>i</def><sym>++)</sym> <def>perm</def><sym>[</sym><def>i</def><sym>] =</sym> <def>perm1</def><sym>[</sym><def>i</def><sym>];</sym><br />
<def></def>         <kwa>var</kwa> <def>flipsCount</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>         <kwb>int</kwb> <def>k</def><sym>;</sym><br />
<def></def>         <kwa>while</kwa> <def></def><sym>( !((</sym><def>k</def><sym>=</sym><def>perm</def><sym>[</sym><def></def><num>0</num><def></def><sym>]) ==</sym> <def></def><num>0</num><def></def><sym>) ){</sym><br />
<def></def>            <kwb>int</kwb> <def>k2</def> <sym>=</sym> <def>k</def><sym>+</sym><def></def><num>1</num> <def></def><sym>&gt;&gt;</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>            <kwa>for</kwa><def></def><sym>(</sym><def></def><kwa>var</kwa> <def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>i</def><sym>&lt;</sym><def>k2</def><sym>;</sym> <def>i</def><sym>++){</sym><br />
<def></def>               <kwa>let</kwa> <def>temp</def> <sym>=</sym> <def>perm</def><sym>[</sym><def>i</def><sym>];</sym> <def>perm</def><sym>[</sym><def>i</def><sym>] =</sym> <def>perm</def><sym>[</sym><def>k</def><sym>-</sym><def>i</def><sym>];</sym> <def>perm</def><sym>[</sym><def>k</def><sym>-</sym><def>i</def><sym>] =</sym> <def>temp</def><sym>;</sym><br />
<def></def>            <sym>}</sym><br />
<def>            flipsCount</def><sym>++;</sym><br />
<def></def>         <sym>}</sym><br />
<def></def><br />
         <kwa>if</kwa> <def></def><sym>(</sym><def>flipsCount</def> <sym>&gt;</sym> <def>maxFlipsCount</def><sym>){</sym><br />
<def>            maxFlipsCount</def> <sym>=</sym> <def>flipsCount</def><sym>;</sym><br />
<def></def>            <kwa>for</kwa><def></def><sym>(</sym><def></def><kwa>var</kwa> <def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>i</def><sym>&lt;</sym><def>n</def><sym>;</sym> <def>i</def><sym>++)</sym> <def>maxPerm</def><sym>[</sym><def>i</def><sym>] =</sym> <def>perm1</def><sym>[</sym><def>i</def><sym>];</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><br />
      <kwa>while</kwa> <def></def><sym>(</sym><def>true</def><sym>){</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>r</def> <sym>==</sym> <def>n</def><sym>)</sym> <def></def><kwa>return</kwa> <def>maxFlipsCount</def><sym>;</sym><br />
<def></def>         <kwa>let</kwa> <def>perm0</def> <sym>=</sym> <def>perm1</def><sym>[</sym><def></def><num>0</num><def></def><sym>];</sym><br />
<def></def>         <kwa>var</kwa> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>         <kwa>while</kwa> <def></def><sym>(</sym><def>i</def> <sym>&lt;</sym> <def>r</def><sym>){</sym><br />
<def></def>            <kwa>let</kwa> <def>j</def> <sym>=</sym> <def>i</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def>            perm1</def><sym>[</sym><def>i</def><sym>] =</sym> <def>perm1</def><sym>[</sym><def>j</def><sym>];</sym><br />
<def>            i</def> <sym>=</sym> <def>j</def><sym>;</sym><br />
<def></def>         <sym>}</sym><br />
<def>         perm1</def><sym>[</sym><def>r</def><sym>] =</sym> <def>perm0</def><sym>;</sym><br />
<def><br />
         count</def><sym>[</sym><def>r</def><sym>] =</sym> <def>count</def><sym>[</sym><def>r</def><sym>] -</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>count</def><sym>[</sym><def>r</def><sym>] &gt;</sym> <def></def><num>0</num><def></def><sym>)</sym> <def></def><kwa>break</kwa><def></def><sym>;</sym><br />
<def>         r</def><sym>++;</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>void</kwb> <def>main</def><sym>(</sym><def>String</def><sym>[]</sym> <def>args</def><sym>){</sym><br />
<def></def>   <kwa>let</kwa> <def>n</def> <sym>=</sym> <def>Integer</def><sym>.</sym><def>parseInt</def><sym>(</sym><def>args</def><sym>[</sym><def></def><num>0</num><def></def><sym>]);</sym><br />
<def>   println</def><sym>(</sym><def></def><str>&quot;Pfannkuchen(&quot;</str><def></def> <sym>+</sym> <def>n</def> <sym>+</sym> <def></def><str>&quot;) = &quot;</str><def></def> <sym>+</sym> <def>fannkuch</def><sym>(</sym><def>n</def><sym>));</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
