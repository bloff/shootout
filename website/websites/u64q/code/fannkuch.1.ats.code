<span class="hl com">(*</span>
<span class="hl com">** The Computer Language Benchmarks Game</span>
<span class="hl com">** http://shootout.alioth.debian.org/</span>
<span class="hl com">**</span>
<span class="hl com">** contributed by Hongwei Xi</span>
<span class="hl com">**</span>
<span class="hl com">** compilation command:</span>
<span class="hl com">**   atscc -fomit-frame-pointer -O3 fannkuch.dats -o fannkuch</span>
<span class="hl com">*)</span>

<span class="hl sym">%{</span>^

<span class="hl kwa">typedef</span> ats_ptr_type iarray <span class="hl sym">;</span>

static inline
ats_ptr_type
iarray_make <span class="hl sym">(</span>ats_int_type n<span class="hl sym">) {</span>
  return malloc<span class="hl sym">(</span>n <span class="hl sym">*</span> sizeof<span class="hl sym">(</span>ats_int_type<span class="hl sym">)) ;</span>
<span class="hl sym">}</span>

static inline
ats_void_type
iarray_free <span class="hl sym">(</span>ats_ptr_type A<span class="hl sym">) {</span> free <span class="hl sym">(</span>A<span class="hl sym">) ;</span> return <span class="hl sym">; }</span>

static inline
ats_int_type
iarray_get <span class="hl sym">(</span>ats_ptr_type A<span class="hl sym">,</span> ats_int_type i<span class="hl sym">) {</span>
  return <span class="hl sym">((</span>ats_int_type *)A<span class="hl sym">)[</span>i<span class="hl sym">] ;</span>
<span class="hl sym">}</span>

static inline
ats_void_type
iarray_set <span class="hl sym">(</span>ats_ptr_type A<span class="hl sym">,</span> ats_int_type i<span class="hl sym">,</span> ats_int_type f<span class="hl sym">) {</span>
  <span class="hl sym">((</span>ats_int_type *)A<span class="hl sym">)[</span>i<span class="hl sym">] =</span> f <span class="hl sym">;</span> return <span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl sym">%}</span>

abst&#64;ype iarray <span class="hl sym">=</span> $extype <span class="hl str">&quot;iarray&quot;</span>

<span class="hl kwa">extern fun</span> iarray_make <span class="hl sym">(</span>sz<span class="hl sym">:</span> int<span class="hl sym">):</span> iarray <span class="hl sym">=</span> <span class="hl str">&quot;iarray_make&quot;</span>
<span class="hl kwa">extern fun</span> iarray_free <span class="hl sym">(</span>A<span class="hl sym">:</span> iarray<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl str">&quot;iarray_free&quot;</span>

<span class="hl sym">//</span> unsafe version
<span class="hl kwa">extern fun</span> iarray_get <span class="hl sym">(</span>A<span class="hl sym">:</span> iarray<span class="hl sym">,</span> i<span class="hl sym">:</span> int<span class="hl sym">):</span> int <span class="hl sym">=</span> <span class="hl str">&quot;iarray_get&quot;</span>
<span class="hl kwa">extern fun</span> iarray_set <span class="hl sym">(</span>A<span class="hl sym">:</span> iarray<span class="hl sym">,</span> i<span class="hl sym">:</span> int<span class="hl sym">,</span> x<span class="hl sym">:</span> int<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl str">&quot;iarray_set&quot;</span>

<span class="hl kwa">overload</span> <span class="hl sym">[]</span> <span class="hl kwa">with</span> iarray_get
<span class="hl kwa">overload</span> <span class="hl sym">[]</span> <span class="hl kwa">with</span> iarray_set

<span class="hl sym">//</span> printing an integer array
<span class="hl kwa">fn</span> q <span class="hl sym">(</span>p<span class="hl sym">:</span> iarray<span class="hl sym">,</span> n<span class="hl sym">:</span> int<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">var</span> i<span class="hl sym">:</span> int <span class="hl sym">=</span> <span class="hl num">0</span>
<span class="hl kwa">in</span>
  <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> n<span class="hl sym">) (</span>print p<span class="hl sym">[</span>i<span class="hl sym">];</span> i <span class="hl sym">:=</span> i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) ;</span> print_newline <span class="hl sym">()</span>
<span class="hl kwa">end</span>

<span class="hl sym">//</span> counting permutations
<span class="hl kwa">fun</span> a <span class="hl sym">(</span>r<span class="hl sym">:</span> iarray<span class="hl sym">,</span> n<span class="hl sym">:</span> int<span class="hl sym">):</span> int <span class="hl sym">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> x <span class="hl sym">=</span> r<span class="hl sym">[</span>n<span class="hl sym">];</span> <span class="hl kwa">val</span> <span class="hl sym">() =</span> r<span class="hl sym">[</span>n<span class="hl sym">] :=</span> x <span class="hl sym">+</span> <span class="hl num">1</span>
<span class="hl kwa">in</span>
  <span class="hl kwa">if</span> x <span class="hl sym">=</span> n <span class="hl sym">-</span> <span class="hl num">2</span> <span class="hl kwa">then</span> a <span class="hl sym">(</span>r<span class="hl sym">,</span> n<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">else</span> <span class="hl sym">(</span><span class="hl kwa">if</span> x <span class="hl sym">=</span> n <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl kwa">then</span> r<span class="hl sym">[</span>n<span class="hl sym">] :=</span> <span class="hl num">0</span><span class="hl sym">;</span> n<span class="hl sym">)</span>
<span class="hl kwa">end</span>

<span class="hl kwa">fn</span> w <span class="hl sym">(</span>p<span class="hl sym">:</span> iarray<span class="hl sym">,</span> s<span class="hl sym">:</span> iarray<span class="hl sym">,</span> n<span class="hl sym">:</span> int<span class="hl sym">,</span> m<span class="hl sym">:</span> int<span class="hl sym">):</span> int <span class="hl sym">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">fun</span> loop1 <span class="hl sym">(</span>i<span class="hl sym">:</span> int<span class="hl sym">):&lt;</span>cloptr1<span class="hl sym">&gt;</span> void <span class="hl sym">=</span>
    <span class="hl kwa">if</span> i <span class="hl sym">&lt;</span> n <span class="hl kwa">then</span> <span class="hl sym">(</span>s<span class="hl sym">[</span>i<span class="hl sym">] :=</span> p<span class="hl sym">[</span>i<span class="hl sym">];</span> loop1 <span class="hl sym">(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">))</span>

  <span class="hl kwa">fun</span> loop2 <span class="hl sym">(</span>x<span class="hl sym">:</span> int<span class="hl sym">,</span> i<span class="hl sym">:</span> int<span class="hl sym">,</span> u<span class="hl sym">:</span> int<span class="hl sym">):&lt;</span>cloptr1<span class="hl sym">&gt;</span> void <span class="hl sym">=</span>
    <span class="hl kwa">if</span> i <span class="hl sym">&lt;=</span> u <span class="hl kwa">then let</span>
      <span class="hl kwa">val</span> t <span class="hl sym">=</span> s<span class="hl sym">[</span>i<span class="hl sym">]</span> <span class="hl kwa">and</span> o <span class="hl sym">=</span> x <span class="hl sym">-</span> i
    <span class="hl kwa">in</span>
      s<span class="hl sym">[</span>i<span class="hl sym">] :=</span> s<span class="hl sym">[</span>o<span class="hl sym">];</span> s<span class="hl sym">[</span>o<span class="hl sym">] :=</span> t<span class="hl sym">;</span> loop2 <span class="hl sym">(</span>x<span class="hl sym">,</span> i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> u<span class="hl sym">)</span>
    <span class="hl kwa">end</span>

  <span class="hl kwa">fun</span> b <span class="hl sym">(</span>i<span class="hl sym">:</span> int<span class="hl sym">):&lt;</span>cloptr1<span class="hl sym">&gt;</span> bool <span class="hl sym">=</span>
    <span class="hl kwa">if</span> i <span class="hl sym">=</span> n <span class="hl kwa">then</span> true <span class="hl kwa">else</span> <span class="hl sym">(</span><span class="hl kwa">if</span> p<span class="hl sym">[</span>i<span class="hl sym">]&lt;&gt;(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">then</span> b<span class="hl sym">(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">else</span> false<span class="hl sym">)</span>

  <span class="hl kwa">fun</span> y <span class="hl sym">(</span>m<span class="hl sym">:</span> int<span class="hl sym">):&lt;</span>cloptr1<span class="hl sym">&gt;</span> int <span class="hl sym">=</span> <span class="hl kwa">let</span>
    <span class="hl kwa">val</span> x <span class="hl sym">=</span> s<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] -</span> <span class="hl num">1</span>
  <span class="hl kwa">in</span>
    <span class="hl kwa">if</span> x <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">then</span> m <span class="hl kwa">else</span> <span class="hl sym">(</span>loop2 <span class="hl sym">(</span>x<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">, (</span>x <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">) &gt;&gt;</span> <span class="hl num">1</span><span class="hl sym">);</span> y <span class="hl sym">(</span>m<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">))</span>
  <span class="hl kwa">end</span>
<span class="hl kwa">in</span>
  <span class="hl kwa">if</span> b <span class="hl num">0</span> <span class="hl kwa">then</span> <span class="hl sym">(</span>loop1 <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span> y m<span class="hl sym">)</span> <span class="hl kwa">else</span> <span class="hl num">0</span>
<span class="hl kwa">end</span>

<span class="hl com">(* building new permutations *)</span>
<span class="hl kwa">fn</span> x <span class="hl sym">(</span>p<span class="hl sym">:</span> iarray<span class="hl sym">,</span> n<span class="hl sym">:</span> int<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">fun</span> loop_inner <span class="hl sym">(</span>p<span class="hl sym">:</span> iarray<span class="hl sym">,</span> j<span class="hl sym">:</span> int<span class="hl sym">,</span> i<span class="hl sym">:</span> int<span class="hl sym">):</span> void <span class="hl sym">=</span>
    <span class="hl kwa">if</span> j <span class="hl sym">&lt;</span> i <span class="hl kwa">then</span> <span class="hl sym">(</span>p<span class="hl sym">[</span>j<span class="hl sym">] :=</span> p<span class="hl sym">[</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">];</span> loop_inner <span class="hl sym">(</span>p<span class="hl sym">,</span> j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> i<span class="hl sym">))</span>
  <span class="hl kwa">fun</span> loop_outer <span class="hl sym">(</span>p<span class="hl sym">:</span> iarray<span class="hl sym">,</span> n<span class="hl sym">:</span> int<span class="hl sym">,</span> i<span class="hl sym">:</span> int<span class="hl sym">):</span> void <span class="hl sym">=</span>
    <span class="hl kwa">if</span> i <span class="hl sym">&lt;</span> n <span class="hl kwa">then let</span>
      <span class="hl kwa">val</span> t <span class="hl sym">=</span> p<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]</span> <span class="hl kwa">in</span> loop_inner <span class="hl sym">(</span>p<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> i<span class="hl sym">);</span> p<span class="hl sym">[</span>i<span class="hl sym">] :=</span> t<span class="hl sym">;</span> loop_outer <span class="hl sym">(</span>p<span class="hl sym">,</span> n<span class="hl sym">,</span> i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>
    <span class="hl kwa">end</span>
<span class="hl kwa">in</span>
  loop_outer <span class="hl sym">(</span>p<span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">)</span>
<span class="hl kwa">end</span>

<span class="hl kwa">fn</span><span class="hl sym">*</span> f <span class="hl sym">(</span>r<span class="hl sym">:</span> iarray<span class="hl sym">,</span> p<span class="hl sym">:</span> iarray<span class="hl sym">,</span> s<span class="hl sym">:</span> iarray<span class="hl sym">,</span> n<span class="hl sym">:</span> int<span class="hl sym">,</span> i<span class="hl sym">:</span> int<span class="hl sym">,</span> m<span class="hl sym">:</span> int<span class="hl sym">,</span>  z<span class="hl sym">:</span> int<span class="hl sym">)</span>
  <span class="hl sym">:</span> int <span class="hl sym">=</span> <span class="hl kwa">if</span> z <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
    <span class="hl kwa">if</span> i <span class="hl sym">&lt;=</span> n <span class="hl kwa">then begin</span>
      q <span class="hl sym">(</span>p<span class="hl sym">,</span> n<span class="hl sym">);</span> x <span class="hl sym">(</span>p<span class="hl sym">,</span> i<span class="hl sym">);</span>
      f <span class="hl sym">(</span>r<span class="hl sym">,</span> p<span class="hl sym">,</span> s<span class="hl sym">,</span> n<span class="hl sym">,</span> a <span class="hl sym">(</span>r<span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">),</span> max <span class="hl sym">(</span>m<span class="hl sym">,</span> w <span class="hl sym">(</span>p<span class="hl sym">,</span> s<span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">)),</span> z<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
    <span class="hl kwa">end else begin</span>
      q <span class="hl sym">(</span>p<span class="hl sym">,</span> n<span class="hl sym">);</span> g <span class="hl sym">(</span>r<span class="hl sym">,</span> p<span class="hl sym">,</span> s<span class="hl sym">,</span> n<span class="hl sym">,</span> i<span class="hl sym">,</span> m<span class="hl sym">)</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">else</span> g <span class="hl sym">(</span>r<span class="hl sym">,</span> p<span class="hl sym">,</span> s<span class="hl sym">,</span> n<span class="hl sym">,</span> i<span class="hl sym">,</span> m<span class="hl sym">)</span>

<span class="hl kwa">and</span> g <span class="hl sym">(</span>r<span class="hl sym">:</span> iarray<span class="hl sym">,</span> p<span class="hl sym">:</span> iarray<span class="hl sym">,</span> s<span class="hl sym">:</span> iarray<span class="hl sym">,</span> n<span class="hl sym">:</span> int<span class="hl sym">,</span> i<span class="hl sym">:</span> int<span class="hl sym">,</span> m<span class="hl sym">:</span> int<span class="hl sym">):</span> int <span class="hl sym">=</span>
  <span class="hl kwa">if</span> i <span class="hl sym">&lt;=</span> n <span class="hl kwa">then begin</span>
    x <span class="hl sym">(</span>p<span class="hl sym">,</span> i<span class="hl sym">);</span> g<span class="hl sym">(</span>r<span class="hl sym">,</span> p<span class="hl sym">,</span> s<span class="hl sym">,</span> n<span class="hl sym">,</span> a <span class="hl sym">(</span>r<span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">),</span> max <span class="hl sym">(</span>m<span class="hl sym">,</span> w <span class="hl sym">(</span>p<span class="hl sym">,</span> s<span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">)))</span>
  <span class="hl kwa">end else begin</span>
    m <span class="hl sym">//</span> return value <span class="hl kwa">of</span> <span class="hl sym">[</span>g<span class="hl sym">]</span>
  <span class="hl kwa">end</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">fn</span> usage <span class="hl sym">(</span>cmd<span class="hl sym">:</span> string<span class="hl sym">):</span> void <span class="hl sym">=</span> printf <span class="hl sym">(</span><span class="hl str">&quot;usage: %s [integer]</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> &#64;<span class="hl sym">(</span>cmd<span class="hl sym">))</span>

<span class="hl kwa">implement</span> main <span class="hl sym">(</span>argc<span class="hl sym">,</span> argv<span class="hl sym">) =</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> <span class="hl kwa">if</span> argc <span class="hl sym">&lt;&gt;</span> <span class="hl num">2</span> <span class="hl kwa">then</span> <span class="hl sym">(</span>usage argv<span class="hl sym">.[</span><span class="hl num">0</span><span class="hl sym">];</span> exit <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">))</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> assert <span class="hl sym">(</span>argc <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">)</span>
  <span class="hl kwa">val</span> s <span class="hl sym">=</span> argv<span class="hl sym">.[</span><span class="hl num">1</span><span class="hl sym">]</span>
  <span class="hl kwa">val</span> n <span class="hl sym">=</span> int_of_string s<span class="hl sym">;</span> <span class="hl kwa">val</span> n2 <span class="hl sym">=</span> n <span class="hl sym">+</span> <span class="hl num">2</span>
  <span class="hl kwa">val</span> r <span class="hl sym">=</span> iarray_make <span class="hl sym">(</span>n<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> loop <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">where</span> <span class="hl sym">{</span>
    <span class="hl kwa">fun</span> loop <span class="hl sym">(</span>i<span class="hl sym">:</span> int<span class="hl sym">):&lt;</span>cloref1<span class="hl sym">&gt;</span> void <span class="hl sym">=</span>
      <span class="hl kwa">if</span> i <span class="hl sym">&lt;</span> n2 <span class="hl kwa">then</span> <span class="hl sym">(</span>r<span class="hl sym">[</span>i<span class="hl sym">] :=</span> i <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span> loop <span class="hl sym">(</span>i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">))</span>
  <span class="hl sym">}</span>
  <span class="hl kwa">val</span> p <span class="hl sym">=</span> iarray_make <span class="hl sym">(</span>n<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> loop <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">where</span> <span class="hl sym">{</span>
    <span class="hl kwa">fun</span> loop <span class="hl sym">(</span>i<span class="hl sym">:</span> int<span class="hl sym">):&lt;</span>cloref1<span class="hl sym">&gt;</span> void <span class="hl sym">=</span>
      <span class="hl kwa">if</span> i <span class="hl sym">&lt;</span> n <span class="hl kwa">then</span> <span class="hl sym">(</span>p<span class="hl sym">[</span>i<span class="hl sym">] :=</span> i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span> loop <span class="hl sym">(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">))</span>
  <span class="hl sym">}</span>
  <span class="hl kwa">val</span> s <span class="hl sym">=</span> iarray_make <span class="hl sym">(</span>n<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> loop <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">where</span> <span class="hl sym">{</span>
    <span class="hl kwa">fun</span> loop <span class="hl sym">(</span>i<span class="hl sym">:</span> int<span class="hl sym">):&lt;</span>cloref1<span class="hl sym">&gt;</span> void <span class="hl sym">=</span>
      <span class="hl kwa">if</span> i <span class="hl sym">&lt;</span> n <span class="hl kwa">then</span> <span class="hl sym">(</span>s<span class="hl sym">[</span>i<span class="hl sym">] :=</span> <span class="hl num">0</span><span class="hl sym">;</span> loop <span class="hl sym">(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">))</span>
  <span class="hl sym">}</span>
  <span class="hl kwa">val</span> ans <span class="hl sym">=</span> f <span class="hl sym">(</span>r<span class="hl sym">,</span> p<span class="hl sym">,</span> s<span class="hl sym">,</span> n<span class="hl sym">,</span> a <span class="hl sym">(</span>r<span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">),</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">30</span><span class="hl sym">)</span>
<span class="hl kwa">in</span>
  printf <span class="hl sym">(</span><span class="hl str">&quot;Pfannkuchen(%i) = %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> &#64;<span class="hl sym">(</span>n<span class="hl sym">,</span> ans<span class="hl sym">))</span>
<span class="hl kwa">end</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl com">(* end of [fannkuch.dats] *)</span>
