<source>
<def></def><com>(* fasta.sml</com><br />
<com> *</com><br />
<com> *   Generate and write random &quot;DNA&quot; sequences.</com><br />
<com> *</com><br />
<com> * Copyright (c) 2004 by The Fellowship of SML/NJ</com><br />
<com> *</com><br />
<com> * Author: Matthias Blume (blume@tti-c.org)</com><br />
<com> *</com><br />
<com> *)</com><def></def><br />
<br />
<kwa>structure</kwa> <def>Test</def><sym>:</sym><def></def><kwa>sig val</kwa> <def>main</def><sym>:</sym><def></def><kwb>string</kwb><def></def><sym>*</sym><def></def><kwb>string</kwb> <def>list</def><sym>-&gt;</sym><def>OS.Process.status</def> <kwa>end</kwa> <def></def><sym>=</sym> <def></def><kwa>struct</kwa><br />
<def></def><br />
    <kwa>val</kwa> <def>len</def> <sym>=</sym> <def></def><num>60</num><br />
<def></def><br />
    <kwa>infix</kwa> <def></def><num>8</num> <def>$</def> <sym>%</sym> <def></def><kwa>val</kwa> <def></def><sym>(</sym><def></def><kwa>op</kwa> <def>$</def><sym>,</sym> <def></def><kwa>op</kwa> <def></def><sym>%) = (</sym><def>Unsafe.Array.sub</def><sym>,</sym> <def>Unsafe.CharVector.sub</def><sym>)</sym><br />
<def></def>    <kwa>infix</kwa> <def></def><num>3</num> <def></def><sym>&lt;-</sym>  <def></def><kwa>fun</kwa> <def></def><sym>(</sym><def>a</def><sym>,</sym> <def>i</def><sym>) &lt;-</sym> <def>x</def> <sym>=</sym> <def>Unsafe.Array.update</def> <sym>(</sym><def>a</def><sym>,</sym> <def>i</def><sym>,</sym> <def>x</def><sym>)</sym><br />
<def></def>    <kwa>fun</kwa> <def>x</def> <sym>-</sym> <def>y</def> <sym>=</sym> <def></def><kwa>Word</kwa><def>.toIntX</def> <sym>(</sym><def></def><kwa>Word</kwa><def>.</def><sym>- (</sym><def></def><kwa>Word</kwa><def>.fromInt x</def><sym>,</sym> <def></def><kwa>Word</kwa><def>.fromInt y</def><sym>))</sym><br />
<def></def>    <kwa>fun</kwa> <def>succ x</def> <sym>=</sym> <def></def><kwa>Word</kwa><def>.toIntX</def> <sym>(</sym><def></def><kwa>Word</kwa><def>.fromInt x</def> <sym>+</sym> <def></def><num>0</num><def>w1</def><sym>)</sym><br />
<def></def><br />
    <kwa>fun</kwa> <def>out s</def> <sym>=</sym> <def></def><kwa>TextIO</kwa><def>.output</def> <sym>(</sym><def></def><kwa>TextIO</kwa><def>.stdOut</def><sym>,</sym> <def>s</def><sym>)</sym><br />
<def></def>    <kwa>fun</kwa> <def>out1 c</def> <sym>=</sym> <def></def><kwa>TextIO</kwa><def>.output1</def> <sym>(</sym><def></def><kwa>TextIO</kwa><def>.stdOut</def><sym>,</sym> <def>c</def><sym>)</sym><br />
<def></def>    <kwa>fun</kwa> <def>ssl</def><sym>(</sym><def>s</def><sym>,</sym><def>i</def><sym>,</sym><def>j</def><sym>) =</sym><br />
<def></def>	<sym>(</sym><def></def><kwa>TextIO</kwa><def>.outputSubstr</def><sym>(</sym><def></def><kwa>TextIO</kwa><def>.stdOut</def><sym>,</sym><def>Substring.substring</def><sym>(</sym><def>s</def><sym>,</sym><def>i</def><sym>,</sym><def>j</def><sym>));</sym><br />
<def>	 out1 #</def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>)</sym><br />
<def></def><br />
    <com>(* word-&gt;real conversion *)</com><def></def><br />
    <kwa>val</kwa> <def>wreal</def> <sym>=</sym> <def></def><kwb>real</kwb> <def></def><kwa>o Word</kwa><def>.toIntX</def><br />
    <com>(* the constants for the random number generator *)</com><def></def><br />
    <kwa>val</kwa> <def></def><sym>(</sym><def>M</def><sym>,</sym> <def>A</def><sym>,</sym> <def>C</def><sym>) = (</sym><def></def><num>0</num><def>w139968</def><sym>,</sym> <def></def><num>0</num><def>w3877</def><sym>,</sym> <def></def><num>0</num><def>w29573</def><sym>)</sym>     <def></def><kwa>val</kwa> <def>M'</def> <sym>=</sym> <def></def><num>1.0</num> <def></def><sym>/</sym> <def>wreal M</def><br />
<br />
    <com>(* the random number generator *)</com><def></def><br />
    <kwa>val</kwa> <def>random</def> <sym>=</sym> <def></def><kwa>let val</kwa> <def>l</def> <sym>=</sym> <def>ref</def> <num>0</num><def>w42</def><br />
		 <kwa>in fn</kwa> <def>m</def><sym>=&gt;</sym><def></def><kwa>let val</kwa> <def>c</def> <sym>= (!</sym><def>l</def><sym>*</sym><def>A</def><sym>+</sym><def>C</def><sym>)</sym> <def>mod M</def> <kwa>in</kwa> <def>l</def><sym>:=</sym><def>c</def><sym>;</sym> <def>m</def><sym>*</sym><def>M'</def><sym>*</sym><def>wreal c</def> <kwa>end</kwa><br />
<def></def>		 <kwa>end</kwa><br />
<def></def><br />
    <kwa>fun</kwa> <def>stretch s</def> <sym>=</sym> <def></def><kwa>if</kwa> <def>size s</def> <sym>&lt;</sym> <def>len</def> <kwa>then</kwa> <def>stretch</def> <sym>(</sym><def>s^s</def><sym>)</sym> <def></def><kwa>else</kwa> <def></def><sym>(</sym><def>s^s</def><sym>,</sym> <def>size s</def><sym>)</sym><br />
<def></def><br />
    <com>(* calculate cumulative probabilities *)</com><def></def><br />
    <kwa>fun</kwa> <def>mkCumul l</def> <sym>=</sym><br />
<def></def>	<kwa>let val</kwa> <def></def><sym>(</sym><def>cl</def><sym>,</sym> <def>pl</def><sym>) =</sym> <def></def><kwa>ListPair</kwa><def>.unzip l</def><br />
	    <kwa>val</kwa> <def></def><sym>(</sym><def>s</def><sym>,</sym> <def>a</def><sym>) = (</sym><def>CharVector.fromList cl</def><sym>,</sym> <def>Array.fromList pl</def><sym>)</sym><br />
<def></def>	    <kwa>fun</kwa> <def>upd</def> <sym>(</sym><def>i</def><sym>,</sym> <def>p</def><sym>,</sym> <def>s</def><sym>) =</sym> <def></def><kwa>let val</kwa> <def>s</def> <sym>=</sym> <def>s</def><sym>+</sym><def>p</def> <kwa>in</kwa> <def></def><sym>(</sym><def>a</def><sym>,</sym><def>i</def><sym>)&lt;-</sym><def>s</def><sym>;</sym> <def>s</def> <kwa>end</kwa><br />
<def></def>	<kwa>in</kwa> <def>ignore</def> <sym>(</sym><def>Array.foldli upd</def> <num>0.0</num> <def>a</def><sym>); (</sym><def>s</def><sym>,</sym> <def>a</def><sym>,</sym> <def>Array.length a</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>)</sym> <def></def><kwa>end</kwa><br />
<def></def><br />
    <com>(* fixed sequence to be repeated *)</com><def></def><br />
    <kwa>val</kwa> <def>alu</def> <sym>=</sym> <def>stretch</def> <str>&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG\</str><br />
<str>		      \GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA\</str><br />
<str>		      \CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT\</str><br />
<str>		      \ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA\</str><br />
<str>		      \GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG\</str><br />
<str>		      \AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC\</str><br />
<str>		      \AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</str><def></def><br />
<br />
    <com>(* the bases with their probabilities *)</com><def></def><br />
    <kwa>val</kwa> <def>homosapiens</def> <sym>=</sym> <def>mkCumul</def> <sym>[(</sym><def>#</def><str>&quot;a&quot;</str><def></def><sym>,</sym> <def></def><num>0.3029549426680</num><def></def><sym>), (</sym><def>#</def><str>&quot;c&quot;</str><def></def><sym>,</sym> <def></def><num>0.1979883004921</num><def></def><sym>),</sym><br />
<def></def>			       <sym>(</sym><def>#</def><str>&quot;g&quot;</str><def></def><sym>,</sym> <def></def><num>0.1975473066391</num><def></def><sym>), (</sym><def>#</def><str>&quot;t&quot;</str><def></def><sym>,</sym> <def></def><num>0.3015094502008</num><def></def><sym>)]</sym><br />
<def></def><br />
    <kwa>val</kwa> <def>iub</def> <sym>=</sym> <def>mkCumul</def> <sym>[(</sym><def>#</def><str>&quot;a&quot;</str><def></def><sym>,</sym><def></def><num>0.27</num><def></def><sym>), (</sym><def>#</def><str>&quot;c&quot;</str><def></def><sym>,</sym><def></def><num>0.12</num><def></def><sym>), (</sym><def>#</def><str>&quot;g&quot;</str><def></def><sym>,</sym><def></def><num>0.12</num><def></def><sym>), (</sym><def>#</def><str>&quot;t&quot;</str><def></def><sym>,</sym><def></def><num>0.27</num><def></def><sym>),</sym><br />
<def></def>		       <sym>(</sym><def>#</def><str>&quot;B&quot;</str><def></def><sym>,</sym><def></def><num>0.02</num><def></def><sym>), (</sym><def>#</def><str>&quot;D&quot;</str><def></def><sym>,</sym><def></def><num>0.02</num><def></def><sym>), (</sym><def>#</def><str>&quot;H&quot;</str><def></def><sym>,</sym><def></def><num>0.02</num><def></def><sym>), (</sym><def>#</def><str>&quot;K&quot;</str><def></def><sym>,</sym><def></def><num>0.02</num><def></def><sym>),</sym><br />
<def></def>		       <sym>(</sym><def>#</def><str>&quot;M&quot;</str><def></def><sym>,</sym><def></def><num>0.02</num><def></def><sym>), (</sym><def>#</def><str>&quot;N&quot;</str><def></def><sym>,</sym><def></def><num>0.02</num><def></def><sym>), (</sym><def>#</def><str>&quot;R&quot;</str><def></def><sym>,</sym><def></def><num>0.02</num><def></def><sym>), (</sym><def>#</def><str>&quot;S&quot;</str><def></def><sym>,</sym><def></def><num>0.02</num><def></def><sym>),</sym><br />
<def></def>		       <sym>(</sym><def>#</def><str>&quot;V&quot;</str><def></def><sym>,</sym><def></def><num>0.02</num><def></def><sym>), (</sym><def>#</def><str>&quot;W&quot;</str><def></def><sym>,</sym><def></def><num>0.02</num><def></def><sym>), (</sym><def>#</def><str>&quot;Y&quot;</str><def></def><sym>,</sym><def></def><num>0.02</num><def></def><sym>)]</sym><br />
<def></def><br />
    <com>(* select a random base *)</com><def></def><br />
    <kwa>fun</kwa> <def>selRandom</def> <sym>(</sym><def>s</def><sym>,</sym> <def>a</def><sym>,</sym> <def>n'</def><sym>) =</sym><br />
<def></def>	<kwa>let val</kwa> <def>r</def> <sym>=</sym> <def>random</def> <num>1.0</num><br />
<def></def>	    <kwa>fun</kwa> <def>l i</def> <sym>=</sym> <def></def><kwa>if</kwa> <def>i</def> <sym>&gt;=</sym> <def>n'</def> <kwa>orelse</kwa> <def>a$i</def> <sym>&gt;</sym> <def>r</def> <kwa>then</kwa> <def>s</def><sym>%</sym><def>i</def> <kwa>else</kwa> <def>l</def> <sym>(</sym><def>succ i</def><sym>)</sym><br />
<def></def>	<kwa>in</kwa> <def>l</def> <num>0</num> <def></def><kwa>end</kwa><br />
<def></def><br />
    <com>(* make a sequence by repeating a template *)</com><def></def><br />
    <kwa>fun</kwa> <def>rptff</def> <sym>(</sym><def>id</def><sym>,</sym> <def>desc</def><sym>, (</sym><def>s</def><sym>,</sym> <def>l</def><sym>),</sym> <def>n</def><sym>) =</sym><br />
<def></def>	<kwa>let fun</kwa> <def>lp</def> <sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def>_</def><sym>) = ()</sym><br />
<def></def>	      <sym>|</sym> <def>lp</def> <sym>(</sym><def>n</def><sym>,</sym> <def>k</def><sym>) =</sym><br />
<def></def>		  <kwa>if</kwa> <def>n</def><sym>&lt;</sym><def>len</def> <kwa>then</kwa> <def>ssl</def><sym>(</sym><def>s</def><sym>,</sym><def>k</def><sym>,</sym><def>n</def><sym>)</sym><br />
<def></def>		  <kwa>else let val</kwa> <def>k'</def> <sym>=</sym> <def>k</def><sym>+</sym><def>len</def><br />
		       <kwa>in</kwa> <def>ssl</def><sym>(</sym><def>s</def><sym>,</sym><def>k</def><sym>,</sym><def>len</def><sym>);</sym> <def>lp</def><sym>(</sym><def>n</def><sym>-</sym><def>len</def><sym>,</sym> <def></def><kwa>if</kwa> <def>k'</def><sym>&gt;=</sym><def>l</def> <kwa>then</kwa> <def>k'</def><sym>-</sym><def>l</def> <kwa>else</kwa> <def>k'</def><sym>)</sym><br />
<def></def>		       <kwa>end</kwa><br />
<def></def>	<kwa>in</kwa> <def>app out</def> <sym>[</sym><def></def><str>&quot;&gt;&quot;</str><def></def><sym>,</sym> <def>id</def><sym>,</sym> <def></def><str>&quot; &quot;</str><def></def><sym>,</sym> <def>desc</def><sym>,</sym> <def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>];</sym> <def>lp</def> <sym>(</sym><def>n</def><sym>,</sym> <def></def><num>0</num><def></def><sym>)</sym> <def></def><kwa>end</kwa><br />
<def></def><br />
    <com>(* make random fasta fragment *)</com><def></def><br />
    <kwa>fun</kwa> <def>rndff</def> <sym>(</sym><def>id</def><sym>,</sym> <def>desc</def><sym>,</sym> <def>sa</def><sym>,</sym> <def>n</def><sym>) =</sym><br />
<def></def>	<kwa>let fun</kwa> <def>loop n</def> <sym>=</sym> <def></def><kwa>let val</kwa> <def>m</def> <sym>=</sym> <def></def><kwa>Int</kwa><def>.min</def><sym>(</sym><def>n</def><sym>,</sym><def>len</def><sym>)</sym> <def></def><kwa>in</kwa> <def>loop'</def> <sym>(</sym><def>n</def><sym>-</sym><def>m</def><sym>,</sym><def>m</def><sym>)</sym> <def></def><kwa>end</kwa><br />
<def></def>	    <kwa>and</kwa> <def>loop'</def> <sym>(</sym><def>n</def><sym>,</sym> <def></def><num>0</num><def></def><sym>) = (</sym><def>out1 #</def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>;</sym> <def></def><kwa>if</kwa> <def>n</def><sym>&gt;</sym><def></def><num>0</num> <def></def><kwa>then</kwa> <def>loop n</def> <kwa>else</kwa> <def></def><sym>())</sym><br />
<def></def>	      <sym>|</sym> <def>loop'</def> <sym>(</sym><def>n</def><sym>,</sym> <def>m</def><sym>) = (</sym><def>out1</def> <sym>(</sym><def>selRandom sa</def><sym>);</sym> <def>loop'</def> <sym>(</sym><def>n</def><sym>,</sym><def>m</def><sym>-</sym><def></def><num>1</num><def></def><sym>))</sym><br />
<def></def>	<kwa>in</kwa> <def>app out</def> <sym>[</sym><def></def><str>&quot;&gt;&quot;</str><def></def><sym>,</sym> <def>id</def><sym>,</sym> <def></def><str>&quot; &quot;</str><def></def><sym>,</sym> <def>desc</def><sym>,</sym> <def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>];</sym> <def>loop n</def> <kwa>end</kwa><br />
<def></def><br />
    <com>(* test harness *)</com><def></def><br />
    <kwa>fun</kwa> <def>make' n</def> <sym>= (</sym><def>rptff</def><sym>(</sym><def></def><str>&quot;ONE&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;Homo sapiens alu&quot;</str><def></def><sym>,</sym> <def>alu</def><sym>,</sym> <def>n</def><sym>*</sym><def></def><num>2</num><def></def><sym>);</sym><br />
<def>		   rndff</def><sym>(</sym><def></def><str>&quot;TWO&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;IUB ambiguity codes&quot;</str><def></def><sym>,</sym> <def>iub</def><sym>,</sym> <def>n</def><sym>*</sym><def></def><num>3</num><def></def><sym>);</sym><br />
<def>		   rndff</def><sym>(</sym><def></def><str>&quot;THREE&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;Homo sapiens frequency&quot;</str><def></def><sym>,</sym> <def>homosapiens</def><sym>,</sym> <def>n</def><sym>*</sym><def></def><num>5</num><def></def><sym>);</sym><br />
<def>		   OS.Process.success</def><sym>)</sym><br />
<def></def><br />
    <com>(* driver *)</com><def></def><br />
    <kwa>fun</kwa> <def>main</def> <sym>(</sym><def>_</def><sym>, []) =</sym> <def>make'</def> <num>1</num><br />
<def></def>      <sym>|</sym> <def>main</def> <sym>(</sym><def>_</def><sym>,</sym> <def>arg</def> <sym>::</sym> <def>_</def><sym>) =</sym> <def>make'</def> <sym>(</sym><def>getOpt</def> <sym>(</sym><def></def><kwa>Int</kwa><def>.fromString arg</def><sym>,</sym> <def></def><num>1</num><def></def><sym>))</sym><br />
<def></def><kwa>end</kwa><br />
<def></def><br />
<kwa>val</kwa> <def>_</def> <sym>=</sym> <def>Test.main</def> <sym>(</sym><def>CommandLine.name</def> <sym>(),</sym> <def>CommandLine.arguments</def> <sym>())</sym><def></def><br />
</source>
