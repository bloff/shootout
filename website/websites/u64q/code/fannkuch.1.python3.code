<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://shootout.alioth.debian.org/</span>
<span class="hl slc">#</span>
<span class="hl slc"># contributed by Sokolov Yura</span>
<span class="hl slc"># modified by Tupteq</span>
<span class="hl slc"># 2to3</span>
<span class="hl slc"># fixed by Daniele Varrazzo</span>
<span class="hl slc"># mp by Ahmad Syukri</span>

<span class="hl kwa">def</span> <span class="hl kwd">print30</span><span class="hl sym">(</span>n<span class="hl sym">):</span>
    count <span class="hl sym">=</span> <span class="hl kwb">list</span><span class="hl sym">(</span><span class="hl kwb">range</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> n<span class="hl sym">))</span>
    perm1 <span class="hl sym">=</span> <span class="hl kwb">list</span><span class="hl sym">(</span><span class="hl kwb">range</span><span class="hl sym">(</span>n<span class="hl sym">))</span>
    showmax <span class="hl sym">=</span> <span class="hl num">30</span>
    r <span class="hl sym">=</span> n
    perm1_ins <span class="hl sym">=</span> perm1<span class="hl sym">.</span>insert
    perm1_pop <span class="hl sym">=</span> perm1<span class="hl sym">.</span>pop

    <span class="hl kwa">while</span> showmax<span class="hl sym">:</span>
        <span class="hl kwa">while</span> r <span class="hl sym">!=</span> <span class="hl num">1</span><span class="hl sym">:</span>
            count<span class="hl sym">[</span>r<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">] =</span> r
            r <span class="hl sym">-=</span> <span class="hl num">1</span>

        <span class="hl kwa">print</span><span class="hl sym">(</span><span class="hl str">&quot;&quot;</span><span class="hl sym">.</span><span class="hl kwd">join</span><span class="hl sym">(</span><span class="hl kwb">str</span><span class="hl sym">(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">for</span> i <span class="hl kwa">in</span> perm1<span class="hl sym">))</span>
        showmax <span class="hl sym">-=</span> <span class="hl num">1</span>

        <span class="hl kwa">while</span> r <span class="hl sym">!=</span> n<span class="hl sym">:</span>
            <span class="hl kwd">perm1_ins</span><span class="hl sym">(</span>r<span class="hl sym">,</span> <span class="hl kwd">perm1_pop</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">))</span>
            count<span class="hl sym">[</span>r<span class="hl sym">] -=</span> <span class="hl num">1</span>
            <span class="hl kwa">if</span> count<span class="hl sym">[</span>r<span class="hl sym">] &gt;</span> <span class="hl num">0</span><span class="hl sym">:</span>
                <span class="hl kwa">break</span>
            <span class="hl kwa">else</span><span class="hl sym">:</span>
                r <span class="hl sym">+=</span> <span class="hl num">1</span>
        <span class="hl kwa">else</span><span class="hl sym">:</span>
            <span class="hl kwa">return</span>

<span class="hl kwa">def</span> <span class="hl kwd">init</span><span class="hl sym">(</span>arg<span class="hl sym">):</span>
    <span class="hl kwa">global</span> n
    n <span class="hl sym">=</span> arg

<span class="hl kwa">def</span> <span class="hl kwd">fannkuch</span><span class="hl sym">(</span>i<span class="hl sym">):</span>
    count <span class="hl sym">=</span> <span class="hl kwb">list</span><span class="hl sym">(</span><span class="hl kwb">range</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> n<span class="hl sym">))</span>
    max_flips <span class="hl sym">=</span> <span class="hl num">0</span>
    m <span class="hl sym">=</span> n<span class="hl sym">-</span><span class="hl num">1</span>
    r <span class="hl sym">=</span> n<span class="hl sym">-</span><span class="hl num">1</span>
    check <span class="hl sym">=</span> <span class="hl num">0</span>
    perm1 <span class="hl sym">=</span> <span class="hl kwb">list</span><span class="hl sym">(</span><span class="hl kwb">range</span><span class="hl sym">(</span>n<span class="hl sym">))</span>
    perm1<span class="hl sym">[</span>i<span class="hl sym">] =</span> m
    perm1<span class="hl sym">[</span>m<span class="hl sym">] =</span> i
    perm1_ins <span class="hl sym">=</span> perm1<span class="hl sym">.</span>insert
    perm1_pop <span class="hl sym">=</span> perm1<span class="hl sym">.</span>pop

    <span class="hl kwa">while</span> <span class="hl num">1</span><span class="hl sym">:</span>
        <span class="hl kwa">while</span> r <span class="hl sym">!=</span> <span class="hl num">1</span><span class="hl sym">:</span>
            count<span class="hl sym">[</span>r<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">] =</span> r
            r <span class="hl sym">-=</span> <span class="hl num">1</span>

        <span class="hl kwa">if</span> perm1<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] !=</span> <span class="hl num">0</span> <span class="hl kwa">and</span> perm1<span class="hl sym">[</span>m<span class="hl sym">] !=</span> m<span class="hl sym">:</span>
            perm <span class="hl sym">=</span> perm1<span class="hl sym">[:]</span>
            flips <span class="hl sym">=</span> <span class="hl num">0</span>
            k <span class="hl sym">=</span> perm<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]</span>
            <span class="hl kwa">while</span> k<span class="hl sym">:</span>
                perm<span class="hl sym">[:</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">] =</span> perm<span class="hl sym">[</span>k<span class="hl sym">::-</span><span class="hl num">1</span><span class="hl sym">]</span>
                flips <span class="hl sym">+=</span> <span class="hl num">1</span>
                k <span class="hl sym">=</span> perm<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]</span>
            <span class="hl kwa">if</span> flips <span class="hl sym">&gt;</span> max_flips<span class="hl sym">:</span>
                max_flips <span class="hl sym">=</span> flips

        <span class="hl kwa">while</span> r <span class="hl sym">!=</span> m<span class="hl sym">:</span>
            <span class="hl kwd">perm1_ins</span><span class="hl sym">(</span>r<span class="hl sym">,</span> <span class="hl kwd">perm1_pop</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">))</span>
            count<span class="hl sym">[</span>r<span class="hl sym">] -=</span> <span class="hl num">1</span>
            <span class="hl kwa">if</span> count<span class="hl sym">[</span>r<span class="hl sym">] &gt;</span> <span class="hl num">0</span><span class="hl sym">:</span>
                <span class="hl kwa">break</span>
            r <span class="hl sym">+=</span> <span class="hl num">1</span>
        <span class="hl kwa">else</span><span class="hl sym">:</span>
            <span class="hl kwa">return</span> max_flips

<span class="hl kwa">def</span> <span class="hl kwd">main</span><span class="hl sym">():</span>
    <span class="hl kwa">from</span> multiprocessing <span class="hl kwa">import</span> Pool
    <span class="hl kwa">from</span> sys <span class="hl kwa">import</span> argv
    <span class="hl kwa">try</span><span class="hl sym">:</span>
        n <span class="hl sym">=</span> <span class="hl kwb">int</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">])</span>
    <span class="hl kwa">except</span><span class="hl sym">:</span>
        n <span class="hl sym">=</span> <span class="hl num">7</span>
    <span class="hl kwd">print30</span><span class="hl sym">(</span>n<span class="hl sym">)</span>
    pool <span class="hl sym">=</span> <span class="hl kwd">Pool</span><span class="hl sym">(</span>initializer <span class="hl sym">=</span> init<span class="hl sym">,</span> initargs <span class="hl sym">= (</span>n<span class="hl sym">,))</span>
    <span class="hl kwa">print</span><span class="hl sym">(</span><span class="hl str">&quot;Pfannkuchen(%d) = %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl sym">% (</span>n<span class="hl sym">,</span> <span class="hl kwb">max</span><span class="hl sym">(</span>pool<span class="hl sym">.</span><span class="hl kwb">map</span><span class="hl sym">(</span>fannkuch<span class="hl sym">,</span> <span class="hl kwb">list</span><span class="hl sym">(</span><span class="hl kwb">range</span><span class="hl sym">(</span>n<span class="hl sym">))))),</span> end<span class="hl sym">=</span><span class="hl str">''</span><span class="hl sym">)</span>

<span class="hl kwa">if</span> __name__<span class="hl sym">==</span><span class="hl str">&quot;__main__&quot;</span><span class="hl sym">:</span>
    <span class="hl kwd">main</span><span class="hl sym">()</span>
