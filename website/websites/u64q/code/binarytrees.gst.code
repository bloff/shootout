<source>
<def></def><com>&quot;* The Computer Language Shootout</com><br />
<com>    http://shootout.alioth.debian.org/</com><br />
<com>    contributed by Isaac Gouy</com><br />
<com>    modified by Eliot Miranda *&quot;</com><def>!</def><br />
<br />
<kwc>Object</kwc> <def></def><kwb>subclass:</kwb> <def></def><kwd>#TreeNode</kwd>   <def></def><kwb>instanceVariableNames:</kwb> <def></def><str>'left right item'</str><def></def>   <kwb>classVariableNames:</kwb> <def></def><str>''</str><def></def>   <kwb>poolDictionaries:</kwb> <def></def><str>''</str><def></def>   <kwb>category:</kwb> <def></def><str>'Shootout'</str><def>!!</def><kwc>Tests</kwc> <def></def><kwb>class methodsFor:</kwb> <def></def><str>'benchmarking'</str><def>!</def><kwb>binarytrees:</kwb> <def>n</def> <kwb>to:</kwb> <def>output</def>   <kwd>| minDepth maxDepth stretchDepth check longLivedTree iterations |</kwd>   <def>minDepth</def> <sym>:=</sym> <def></def><num>4</num><def></def><sym>.</sym>   <def>maxDepth</def> <sym>:=</sym> <def>minDepth</def> <kwb>+</kwb> <def></def><num>2</num> <def></def><kwb>max:</kwb> <def>n</def><sym>.</sym>   <def>stretchDepth</def> <sym>:=</sym> <def>maxDepth</def> <kwb>+</kwb> <def></def><num>1</num><def></def><sym>.</sym>   <def>check</def> <sym>:= (</sym><def></def><kwc>TreeNode</kwc> <def></def><kwb>bottomUpTree:</kwb> <def></def><num>0</num> <def></def><kwb>depth:</kwb> <def>stretchDepth</def><sym>)</sym> <def></def><kwb>itemCheck</kwb><def></def><sym>.</sym>   <def>output</def>      <kwb>nextPutAll:</kwb> <def></def><str>'stretch tree of depth '</str><def></def><sym>;</sym> <def></def><kwb>print:</kwb> <def>stretchDepth</def><sym>;</sym> <def></def><kwb>tab</kwb><def></def><sym>;</sym>      <def></def><kwb>nextPutAll:</kwb> <def></def><str>' check: '</str><def></def><sym>;</sym> <def></def><kwb>print:</kwb> <def>check</def><sym>;</sym> <def></def><kwb>nl</kwb><def></def><sym>.</sym>   <def>longLivedTree</def> <sym>:=</sym> <def></def><kwc>TreeNode</kwc> <def></def><kwb>bottomUpTree:</kwb> <def></def><num>0</num> <def></def><kwb>depth:</kwb> <def>maxDepth</def><sym>.</sym>   <def>minDepth</def> <kwb>to:</kwb> <def>maxDepth</def> <kwb>by:</kwb> <def></def><num>2</num> <def></def><kwb>do:</kwb> <def></def><sym>[</sym><def></def><kwd>:depth</kwd><def></def><sym>|</sym>      <def>iterations</def> <sym>:=</sym> <def></def><num>1</num> <def></def><kwb>bitShift:</kwb> <def>maxDepth</def> <kwb>-</kwb> <def>depth</def> <kwb>+</kwb> <def>minDepth</def><sym>.</sym>      <def>check</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>.</sym>      <def></def><num>1</num> <def></def><kwb>to:</kwb> <def>iterations</def> <kwb>do:</kwb> <def></def><sym>[</sym><def></def><kwd>:i</kwd><def></def><sym>|</sym>         <def>check</def> <sym>:=</sym> <def>check</def> <kwb>+</kwb> <def></def><sym>(</sym><def></def><kwc>TreeNode</kwc> <def></def><kwb>bottomUpTree:</kwb> <def>i</def> <kwb>depth:</kwb> <def>depth</def><sym>)</sym> <def></def><kwb>itemCheck</kwb><def></def><sym>.</sym>         <def>check</def> <sym>:=</sym> <def>check</def> <kwb>+</kwb> <def></def><sym>(</sym><def></def><kwc>TreeNode</kwc> <def></def><kwb>bottomUpTree: -</kwb><def></def><num>1</num><def></def><kwb>*</kwb><def>i</def> <kwb>depth:</kwb> <def>depth</def><sym>)</sym> <def></def><kwb>itemCheck</kwb>         <def></def><sym>].</sym>      <def>output</def>         <kwb>print:</kwb>  <def></def><sym>(</sym><def></def><num>2</num><def></def><kwb>*</kwb><def>iterations</def><sym>);</sym> <def></def><kwb>tab</kwb><def></def><sym>;</sym>         <def></def><kwb>nextPutAll:</kwb> <def></def><str>' trees of depth '</str><def></def><sym>;</sym> <def></def><kwb>print:</kwb> <def>depth</def><sym>;</sym> <def></def><kwb>tab</kwb><def></def><sym>;</sym>         <def></def><kwb>nextPutAll:</kwb> <def></def><str>' check: '</str><def></def><sym>;</sym> <def></def><kwb>print:</kwb> <def>check</def><sym>;</sym> <def></def><kwb>nl</kwb>      <def></def><sym>].</sym>   <def>output</def>      <kwb>nextPutAll:</kwb> <def></def><str>'long lived tree of depth '</str><def></def><sym>;</sym> <def></def><kwb>print:</kwb> <def>maxDepth</def><sym>;</sym> <def></def><kwb>tab</kwb><def></def><sym>;</sym>      <def></def><kwb>nextPutAll:</kwb> <def></def><str>' check: '</str><def></def><sym>;</sym> <def></def><kwb>print:</kwb> <def>longLivedTree</def> <kwb>itemCheck</kwb><def></def><sym>;</sym> <def></def><kwb>nl</kwb><def>! !!</def><kwc>Tests</kwc> <def></def><kwb>class methodsFor:</kwb> <def></def><str>'benchmark scripts'</str><def>!binarytrees</def>   <kwa>self</kwa> <def></def><kwb>binarytrees:</kwb> <def></def><kwa>self</kwa> <def></def><kwb>arg to:</kwb> <def></def><kwa>self</kwa> <def></def><kwb>stdout</kwb><def></def><sym>.   ^</sym><def></def><str>''</str><def>! !!</def><kwc>TreeNode</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'initialize-release'</str><def>!</def><kwb>left:</kwb> <def>leftChild</def> <kwb>right:</kwb> <def>rightChild</def> <kwb>item:</kwb> <def>anItem   left</def> <sym>:=</sym> <def>leftChild</def><sym>.</sym>   <def>right</def> <sym>:=</sym> <def>rightChild</def><sym>.</sym>   <def>item</def> <sym>:=</sym> <def>anItem! !!</def><kwc>TreeNode</kwc> <def></def><kwb>methodsFor:</kwb> <def></def><str>'accessing'</str><def>!itemCheck</def>   <sym>^</sym><def>left</def> <kwb>isNil       ifTrue:</kwb> <def></def><sym>[</sym><def>item</def><sym>]</sym> <def></def><kwb>ifFalse:</kwb> <def></def><sym>[</sym><def>item</def> <kwb>+</kwb> <def></def><sym>(</sym><def>left</def> <kwb>itemCheck -</kwb> <def>right</def> <kwb>itemCheck</kwb><def></def><sym>)]</sym><def>! !!</def><kwc>TreeNode</kwc> <def></def><kwb>class methodsFor:</kwb> <def></def><str>'instance creation'</str><def>!</def><kwb>bottomUpTree:</kwb> <def>anItem</def> <kwb>depth:</kwb> <def>anInteger</def>   <sym>^(</sym><def>anInteger &gt;</def> <num>0</num><def></def><sym>)</sym>       <def></def><kwb>ifTrue:</kwb> <def></def><sym>[</sym>         <def></def><kwa>self</kwa>             <def></def><kwb>left:</kwb> <def></def><sym>(</sym><def></def><kwa>self</kwa> <def></def><kwb>bottomUpTree:</kwb> <def></def><num>2</num><def></def><kwb>*</kwb><def>anItem</def> <kwb>-</kwb> <def></def><num>1</num> <def></def><kwb>depth:</kwb> <def>anInteger</def> <kwb>-</kwb> <def></def><num>1</num><def></def><sym>)</sym>             <def></def><kwb>right:</kwb> <def></def><sym>(</sym><def></def><kwa>self</kwa> <def></def><kwb>bottomUpTree:</kwb> <def></def><num>2</num><def></def><kwb>*</kwb><def>anItem</def> <kwb>depth:</kwb> <def>anInteger</def> <kwb>-</kwb> <def></def><num>1</num><def></def><sym>)</sym>              <def></def><kwb>item:</kwb> <def>anItem</def>         <sym>]</sym>      <def></def><kwb>ifFalse:</kwb> <def></def><sym>[</sym><def></def><kwa>self</kwa> <def></def><kwb>left:</kwb> <def></def><kwa>nil</kwa> <def></def><kwb>right:</kwb> <def></def><kwa>nil</kwa> <def></def><kwb>item:</kwb> <def>anItem</def><sym>]</sym><def>! !!</def><kwc>TreeNode</kwc> <def></def><kwb>class methodsFor:</kwb> <def></def><str>'instance creation'</str><def>!</def><kwb>left:</kwb> <def>leftChild</def> <kwb>right:</kwb> <def>rightChild</def> <kwb>item:</kwb> <def>anItem</def>         <sym>^(</sym><def></def><kwa>super</kwa> <def></def><kwb>new</kwb><def></def><sym>)</sym> <def></def><kwb>left:</kwb> <def>leftChild</def> <kwb>right:</kwb> <def>rightChild</def> <kwb>item:</kwb> <def>anItem! !</def><br />
<br />
<kwc>Tests</kwc> <def></def><kwb>binarytrees</kwb><def>!</def><br />
</source>
