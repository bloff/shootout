<source>
<def></def><slc>% ----------------------------------------------------------------------</slc><br />
<def></def><slc>% The Computer Language Benchmarks Game</slc><br />
<def></def><slc>% http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>%</slc><br />
<def></def><slc>% contributed by Anthony Borla</slc><br />
<def></def><slc>% fixed by Glendon Holst</slc><br />
<def></def><slc>% ----------------------------------------------------------------------</slc><br />
<def><br />
main</def> <sym>:-</sym><br />
<def>  init_knucleotide</def><sym>,</sym><br />
<def><br />
  FragmentLengths</def> <sym>= [</sym><def></def><num>1</num><def></def><sym>,</sym> <def></def><num>2</num><def></def><sym>],</sym><br />
<def>  forall</def><sym>(</sym><def>member</def><sym>(</sym><def>E</def><sym>,</sym> <def>FragmentLengths</def><sym>), (</sym><def>print_frequencies</def><sym>(</sym><def>E</def><sym>),</sym> <def></def><kwa>nl</kwa><def></def><sym>)),</sym><br />
<def><br />
  Fragments</def> <sym>= [</sym><def></def><str>&quot;GGT&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;GGTA&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;GGTATT&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;GGTATTTTAATT&quot;</str><def></def><sym>,</sym> <def></def><str>&quot;GGTATTTTAATTTATAGT&quot;</str><def></def><sym>],</sym><br />
<def>  forall</def><sym>(</sym><def>member</def><sym>(</sym><def>E</def><sym>,</sym> <def>Fragments</def><sym>),</sym> <def>print_count</def><sym>(</sym><def>E</def><sym>)),</sym><br />
<def><br />
  drop_knucleotide</def><sym>.</sym><br />
<def></def><br />
<slc>% ------------------------------- %</slc><br />
<def><br />
init_knucleotide</def> <sym>:-</sym><br />
<def>  set_stream</def><sym>(</sym><def></def><kwb>current_input</kwb><def></def><sym>,</sym> <def>buffer</def><sym>(</sym><def>full</def><sym>)),</sym><br />
<def>  prompt</def><sym>(</sym><def>Old</def><sym>,</sym> <def></def><str>''</str><def></def><sym>),</sym> <def>setvar</def><sym>(</sym><def>prompt</def><sym>,</sym> <def>Old</def><sym>),</sym><br />
<def>  dropvar</def><sym>(</sym><def>loaded</def><sym>).</sym><br />
<def></def><br />
<slc>% ------------- %</slc><br />
<def><br />
drop_knucleotide</def> <sym>:-</sym><br />
<def>  getvar</def><sym>(</sym><def>prompt</def><sym>,</sym> <def>Old</def><sym>),</sym> <def>prompt</def><sym>(</sym><def>_</def><sym>,</sym> <def>Old</def><sym>),</sym><br />
<def>  dropvar</def><sym>(</sym><def>prompt</def><sym>),</sym> <def>dropvar</def><sym>(</sym><def>loaded</def><sym>).</sym><br />
<def></def><br />
<slc>% ------------------------------- %</slc><br />
<def><br />
print_frequencies</def><sym>(</sym><def>KeyLen</def><sym>) :-</sym><br />
<def>  generate_counts</def><sym>(</sym><def>KeyLen</def><sym>,</sym> <def>CountTable</def><sym>),</sym><br />
<def>  sum_counts_</def><sym>(</sym><def>CountTable</def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>SumCounts</def><sym>),</sym><br />
<def>  make_freq_table_</def><sym>(</sym><def>CountTable</def><sym>,</sym> <def>SumCounts</def><sym>, [],</sym> <def>FTable</def><sym>),</sym><br />
<def>  keysort</def><sym>(</sym><def>FTable</def><sym>,</sym> <def>SFTable</def><sym>),</sym> <def>reverse</def><sym>(</sym><def>SFTable</def><sym>,</sym> <def>FreqTable</def><sym>),</sym><br />
<def>  print_freq_table_</def><sym>(</sym><def>FreqTable</def><sym>).</sym><br />
<def></def><br />
<slc>% ------------- %</slc><br />
<def><br />
sum_counts_</def><sym>([],</sym> <def>Acc</def><sym>,</sym> <def>Acc</def><sym>) :- !.</sym><br />
<def><br />
sum_counts_</def><sym>([</sym><def>_</def><sym>-</sym><def>C</def><sym>|</sym><def>T</def><sym>],</sym> <def>Acc</def><sym>,</sym> <def>Sum</def><sym>) :-</sym> <def>Acc1</def> <kwa>is</kwa> <def>Acc</def> <sym>+</sym> <def>C</def><sym>, !,</sym> <def>sum_counts_</def><sym>(</sym><def>T</def><sym>,</sym> <def>Acc1</def><sym>,</sym> <def>Sum</def><sym>).</sym><br />
<def></def><br />
<slc>% ------------- %</slc><br />
<def><br />
make_freq_table_</def><sym>([],</sym> <def>_</def><sym>,</sym> <def>FTA</def><sym>,</sym> <def>FTA</def><sym>) :- !.</sym><br />
<def><br />
make_freq_table_</def><sym>([</sym><def>K</def><sym>-</sym><def>C</def><sym>|</sym><def>T</def><sym>],</sym> <def>SumCounts</def><sym>,</sym> <def>FTA</def><sym>,</sym> <def>FreqTable</def><sym>) :-</sym><br />
<def>  F</def> <kwa>is</kwa> <def>C</def> <sym>/</sym> <def>SumCounts</def> <sym>*</sym> <def></def><num>100.0</num><def></def><sym>,</sym> <def>append</def><sym>([</sym><def>F</def><sym>-</sym><def>K</def><sym>],</sym> <def>FTA</def><sym>,</sym> <def>FTA1</def><sym>),</sym><br />
<def></def>  <sym>!,</sym> <def>make_freq_table_</def><sym>(</sym><def>T</def><sym>,</sym> <def>SumCounts</def><sym>,</sym> <def>FTA1</def><sym>,</sym> <def>FreqTable</def><sym>).</sym><br />
<def></def><br />
<slc>% ------------- %</slc><br />
<def><br />
print_freq_table_</def><sym>([]) :- !.</sym><br />
<def><br />
print_freq_table_</def><sym>([</sym><def>F</def><sym>-</sym><def>K</def><sym>|</sym><def>T</def><sym>]) :-</sym><br />
<def>  format</def><sym>(</sym><def></def><str>'~w ~3f</str><esc>\n</esc><str>'</str><def></def><sym>, [</sym><def>K</def><sym>,</sym> <def>F</def><sym>]),</sym><br />
<def></def>  <sym>!,</sym> <def>print_freq_table_</def><sym>(</sym><def>T</def><sym>).</sym><br />
<def></def><br />
<slc>% ------------------------------- %</slc><br />
<def><br />
print_count</def><sym>(</sym><def>Fragment</def><sym>) :-</sym><br />
<def>	string_length</def><sym>(</sym><def>Fragment</def><sym>,</sym> <def>FragLen</def><sym>),</sym><br />
<def>	generate_counts</def><sym>(</sym><def>FragLen</def><sym>,</sym> <def>CountTable</def><sym>),</sym><br />
<def>	string_to_atom</def><sym>(</sym><def>Fragment</def><sym>,</sym> <def>FragKey</def><sym>),</sym><br />
<def></def>	<sym>(</sym><br />
<def>		select</def><sym>(</sym><def>FragKey</def><sym>-</sym><def>Count</def><sym>,</sym> <def>CountTable</def><sym>,</sym> <def>_</def><sym>)</sym><br />
<def></def>	<sym>;</sym><br />
<def>		Count</def> <sym>=</sym> <def></def><num>0</num><br />
<def></def>	<sym>), !,</sym><br />
<def>	format</def><sym>(</sym><def></def><str>'~d</str><esc>\t</esc><str>~s</str><esc>\n</esc><str>'</str><def></def><sym>, [</sym><def>Count</def><sym>,</sym> <def>Fragment</def><sym>]).</sym><br />
<def></def><br />
<slc>% ------------- %</slc><br />
<def><br />
generate_counts</def><sym>(</sym><def>Length</def><sym>,</sym> <def>CountTable</def><sym>) :-</sym><br />
<def></def>  <kwb>catch</kwb><def></def><sym>(</sym><def>getvar</def><sym>(</sym><def>loaded</def><sym>,</sym> <def>Seq</def><sym>),</sym> <def>_</def><sym>,</sym> <def>load_sequence</def><sym>(</sym><def></def><kwb>current_input</kwb><def></def><sym>,</sym> <def>Seq</def><sym>)),</sym><br />
<def>  string_length</def><sym>(</sym><def>Seq</def><sym>,</sym> <def>SeqLen</def><sym>),</sym> <def>Last</def> <kwa>is</kwa> <def>SeqLen</def> <sym>-</sym> <def>Length</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>,</sym><br />
<def>  make_count_table</def><sym>(</sym><def>Length</def><sym>,</sym> <def>Last</def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>CountTable</def><sym>).</sym><br />
<def></def><br />
<slc>% ------------------------------- %</slc><br />
<def><br />
make_count_table</def><sym>(</sym><def>Length</def><sym>,</sym> <def>Last</def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>CountTable</def><sym>) :-</sym><br />
<def>  empty_assoc</def><sym>(</sym><def>A</def><sym>),</sym><br />
<def>  mct_i_loop_</def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def>Length</def><sym>,</sym> <def>Last</def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>A</def><sym>,</sym> <def>ACT</def><sym>),</sym><br />
<def>  assoc_to_list</def><sym>(</sym><def>ACT</def><sym>,</sym> <def>CountTable</def><sym>).</sym><br />
<def></def><br />
<slc>% ------------- %</slc><br />
<def><br />
mct_i_loop_</def><sym>(</sym><def>Length</def><sym>,</sym> <def>Length</def><sym>,</sym> <def>_</def><sym>,</sym> <def>_</def><sym>,</sym> <def>CTA</def><sym>,</sym> <def>CTA</def><sym>) :- !.</sym><br />
<def><br />
mct_i_loop_</def><sym>(</sym><def>I</def><sym>,</sym> <def>Length</def><sym>,</sym> <def>Last</def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>CTA</def><sym>,</sym> <def>CountTable</def><sym>) :-</sym><br />
<def>  mct_j_loop_</def><sym>(</sym><def>I</def><sym>,</sym> <def>Last</def><sym>,</sym> <def>Length</def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>CTA</def><sym>,</sym> <def>CTA1</def><sym>),</sym><br />
<def>  I1</def> <kwa>is</kwa> <def>I</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>, !,</sym> <def>mct_i_loop_</def><sym>(</sym><def>I1</def><sym>,</sym> <def>Length</def><sym>,</sym> <def>Last</def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>CTA1</def><sym>,</sym> <def>CountTable</def><sym>).</sym><br />
<def></def><br />
<slc>% ------------- %</slc><br />
<def><br />
mct_j_loop_</def><sym>(</sym><def>J</def><sym>,</sym> <def>Last</def><sym>,</sym> <def>_</def><sym>,</sym> <def>_</def><sym>,</sym> <def>CTA</def><sym>,</sym> <def>CTA</def><sym>) :-</sym> <def>J</def> <sym>&gt;=</sym> <def>Last</def><sym>, !.</sym><br />
<def><br />
mct_j_loop_</def><sym>(</sym><def>J</def><sym>,</sym> <def>Last</def><sym>,</sym> <def>Length</def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>CTA</def><sym>,</sym> <def>CountTable</def><sym>) :-</sym><br />
<def>  sub_string</def><sym>(</sym><def>Seq</def><sym>,</sym> <def>J</def><sym>,</sym> <def>Length</def><sym>,</sym> <def>_</def><sym>,</sym> <def>KeyString</def><sym>),</sym> <def>string_to_atom</def><sym>(</sym><def>KeyString</def><sym>,</sym> <def>Key</def><sym>),</sym><br />
<def></def>  <sym>(</sym><def>get_assoc</def><sym>(</sym><def>Key</def><sym>,</sym> <def>CTA</def><sym>,</sym> <def>Value</def><sym>) -&gt;</sym><br />
<def>    V1</def> <kwa>is</kwa> <def>Value</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>put_assoc</def><sym>(</sym><def>Key</def><sym>,</sym> <def>CTA</def><sym>,</sym> <def>V1</def><sym>,</sym> <def>CTA1</def><sym>)</sym><br />
<def></def>  <sym>;</sym><br />
<def>    put_assoc</def><sym>(</sym><def>Key</def><sym>,</sym> <def>CTA</def><sym>,</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>CTA1</def><sym>)),</sym><br />
<def>  J1</def> <kwa>is</kwa> <def>J</def> <sym>+</sym> <def>Length</def><sym>, !,</sym> <def>mct_j_loop_</def><sym>(</sym><def>J1</def><sym>,</sym> <def>Last</def><sym>,</sym> <def>Length</def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>CTA1</def><sym>,</sym> <def>CountTable</def><sym>).</sym><br />
<def></def><br />
<slc>% ------------------------------- %</slc><br />
<def><br />
load_sequence</def><sym>(</sym><def>S</def><sym>,</sym> <def>Seq</def><sym>) :-</sym> <def>load_sequence_</def><sym>(</sym><def>S</def><sym>,</sym> <def></def><kwa>fail</kwa><def></def><sym>,</sym> <def></def><str>''</str><def></def><sym>,</sym> <def>Seq</def><sym>),</sym> <def>linkvar</def><sym>(</sym><def>loaded</def><sym>,</sym> <def>Seq</def><sym>).</sym><br />
<def></def><br />
<slc>% ------------- %</slc><br />
<def><br />
load_sequence_</def><sym>(</sym><def>eof</def><sym>,</sym> <def>_</def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>Seq</def><sym>) :- !.</sym><br />
<def><br />
load_sequence_</def><sym>(</sym><def>S</def><sym>,</sym> <def>Loading</def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>RetSeq</def><sym>) :-</sym><br />
<def>  read_line_to_codes</def><sym>(</sym><def>S</def><sym>,</sym> <def>L</def><sym>),</sym><br />
<def></def>  <sym>(</sym><def></def><kwa>at_end_of_stream</kwa><def></def><sym>(</sym><def>S</def><sym>) -&gt;</sym><br />
<def>    process_sequence</def><sym>(</sym><def>L</def><sym>,</sym> <def>eof</def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>RetSeq</def><sym>)</sym><br />
<def></def>  <sym>;</sym><br />
<def></def>    <sym>(</sym><def>Loading</def> <sym>-&gt;</sym><br />
<def>      process_sequence</def><sym>(</sym><def>L</def><sym>,</sym> <def>S</def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>RetSeq</def><sym>)</sym><br />
<def></def>    <sym>;</sym><br />
<def>      ignore_sequence</def><sym>(</sym><def>L</def><sym>,</sym> <def>S</def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>RetSeq</def><sym>))).</sym><br />
<def></def><br />
<slc>% ------------- %</slc><br />
<def><br />
ignore_sequence</def><sym>([</sym><def></def><num>62</num><def></def><sym>,</sym><def></def><num>84</num><def></def><sym>,</sym><def></def><num>72</num><def></def><sym>,</sym><def></def><num>82</num><def></def><sym>,</sym><def></def><num>69</num><def></def><sym>,</sym><def></def><num>69</num><def></def><sym>|</sym><def>_</def><sym>],</sym> <def>S</def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>RetSeq</def><sym>) :- !,</sym><br />
<def>	load_sequence_</def><sym>(</sym><def>S</def><sym>,</sym> <def></def><kwa>true</kwa><def></def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>RetSeq</def><sym>).</sym><br />
<def>ignore_sequence</def><sym>(</sym><def>_</def><sym>,</sym> <def>S</def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>RetSeq</def><sym>) :- !,</sym> <def>load_sequence_</def><sym>(</sym><def>S</def><sym>,</sym> <def></def><kwa>fail</kwa><def></def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>RetSeq</def><sym>).</sym><br />
<def><br />
process_sequence</def><sym>([</sym><def></def><num>62</num><def></def><sym>|</sym><def>_</def><sym>],</sym> <def>_</def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>Seq</def><sym>) :- !.</sym><br />
<def>process_sequence</def><sym>([</sym><def></def><num>59</num><def></def><sym>|</sym><def>_</def><sym>],</sym> <def>S</def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>RetSeq</def><sym>) :- !,</sym> <def>load_sequence_</def><sym>(</sym><def>S</def><sym>,</sym> <def></def><kwa>true</kwa><def></def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>RetSeq</def><sym>).</sym><br />
<def><br />
process_sequence</def><sym>(</sym><def>L</def><sym>,</sym> <def>eof</def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>RetSeq</def><sym>) :-</sym><br />
<def>  to_upper</def><sym>(</sym><def>L</def><sym>,</sym> <def>UL</def><sym>),</sym> <def>string_to_list</def><sym>(</sym><def>LS</def><sym>,</sym> <def>UL</def><sym>),</sym> <def>string_concat</def><sym>(</sym><def>Seq</def><sym>,</sym> <def>LS</def><sym>,</sym> <def>NewSeq</def><sym>),</sym><br />
<def></def>  <sym>!,</sym> <def>load_sequence_</def><sym>(</sym><def>eof</def><sym>,</sym> <def>_</def><sym>,</sym> <def>NewSeq</def><sym>,</sym> <def>RetSeq</def><sym>).</sym><br />
<def><br />
process_sequence</def><sym>(</sym><def>L</def><sym>,</sym> <def>S</def><sym>,</sym> <def>Seq</def><sym>,</sym> <def>RetSeq</def><sym>) :-</sym><br />
<def>  to_upper</def><sym>(</sym><def>L</def><sym>,</sym> <def>UL</def><sym>),</sym> <def>string_to_list</def><sym>(</sym><def>LS</def><sym>,</sym> <def>UL</def><sym>),</sym> <def>string_concat</def><sym>(</sym><def>Seq</def><sym>,</sym> <def>LS</def><sym>,</sym> <def>NewSeq</def><sym>),</sym><br />
<def></def>  <sym>!,</sym> <def>load_sequence_</def><sym>(</sym><def>S</def><sym>,</sym> <def></def><kwa>true</kwa><def></def><sym>,</sym> <def>NewSeq</def><sym>,</sym> <def>RetSeq</def><sym>).</sym><br />
<def></def><br />
<slc>% ------------------------------- %</slc><br />
<def><br />
to_upper</def><sym>(</sym><def>L</def><sym>,</sym> <def>U</def><sym>) :-</sym> <def>to_upper_</def><sym>(</sym><def>L</def><sym>, [],</sym> <def>U</def><sym>).</sym><br />
<def></def><br />
<slc>% ------------- %</slc><br />
<def><br />
to_upper_</def><sym>([],</sym> <def>UA</def><sym>,</sym> <def>U</def><sym>) :-</sym> <def>reverse</def><sym>(</sym><def>UA</def><sym>,</sym> <def>U</def><sym>), !.</sym><br />
<def><br />
to_upper_</def><sym>([</sym><def>C</def><sym>|</sym><def>T</def><sym>],</sym> <def>UA</def><sym>,</sym> <def>U</def><sym>) :-</sym><br />
<def>  is_lower</def><sym>(</sym><def>C</def><sym>),</sym> <def>C1</def> <kwa>is</kwa> <def>C</def> <sym>-</sym> <def></def><num>32</num><def></def><sym>,</sym><br />
<def></def>  <sym>!,</sym> <def>to_upper_</def><sym>(</sym><def>T</def><sym>, [</sym><def>C1</def><sym>|</sym><def>UA</def><sym>],</sym> <def>U</def><sym>).</sym><br />
<def><br />
to_upper_</def><sym>([</sym><def>C</def><sym>|</sym><def>T</def><sym>],</sym> <def>UA</def><sym>,</sym> <def>U</def><sym>) :-</sym><br />
<def></def>  <sym>!,</sym> <def>to_upper_</def><sym>(</sym><def>T</def><sym>, [</sym><def>C</def><sym>|</sym><def>UA</def><sym>],</sym> <def>U</def><sym>).</sym><br />
<def></def><br />
<slc>% ------------- %</slc><br />
<def><br />
is_lower</def><sym>(</sym><def>C</def><sym>) :-</sym> <def>C</def> <sym>&gt;=</sym> <def></def><num>97</num><def></def><sym>,</sym> <def>C</def> <sym>=&lt;</sym> <def></def><num>122</num><def></def><sym>.</sym><br />
<def></def><br />
<slc>% ------------------------------- %</slc><br />
<def><br />
getvar</def><sym>(</sym><def>Id</def><sym>,</sym> <def>Value</def><sym>) :-</sym> <def>nb_getval</def><sym>(</sym><def>Id</def><sym>,</sym> <def>Value</def><sym>).</sym><br />
<def>setvar</def><sym>(</sym><def>Id</def><sym>,</sym> <def>Value</def><sym>) :-</sym> <def>nb_setval</def><sym>(</sym><def>Id</def><sym>,</sym> <def>Value</def><sym>).</sym><br />
<def>linkvar</def><sym>(</sym><def>Id</def><sym>,</sym> <def>Value</def><sym>) :-</sym> <def>nb_linkval</def><sym>(</sym><def>Id</def><sym>,</sym> <def>Value</def><sym>).</sym><br />
<def>dropvar</def><sym>(</sym><def>Id</def><sym>) :-</sym> <def>nb_delete</def><sym>(</sym><def>Id</def><sym>).</sym><def></def><br />
</source>
