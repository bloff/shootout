<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://shootout.alioth.debian.org</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Contributed by Jim Rogers</span>
<span class="hl slc">-- Fixed by Pascal Obry on 2005/03/21</span>
<span class="hl slc">-- Modified Experimental version suggested by Pascal Obry</span>
<span class="hl slc">-- Modified (using Complex) by Gautier de Montmollin</span>

<span class="hl kwa">with</span> Ada.Command_Line<span class="hl sym">;</span> <span class="hl kwa">use</span> Ada.Command_Line<span class="hl sym">;</span>
<span class="hl kwa">with</span> Ada.Numerics.Generic_Complex_Types<span class="hl sym">;</span>

<span class="hl kwa">with</span> Interfaces<span class="hl sym">;</span>       <span class="hl kwa">use</span> Interfaces<span class="hl sym">;</span>
<span class="hl kwa">with</span> GNAT.IO<span class="hl sym">;</span>          <span class="hl kwa">use</span> GNAT.IO<span class="hl sym">;</span>

<span class="hl kwa">procedure</span> Mandelbrot <span class="hl kwa">is</span>
   <span class="hl kwa">type</span> Real <span class="hl kwa">is digits</span> <span class="hl num">15</span><span class="hl sym">;</span>
   <span class="hl kwa">package</span> R_Complex <span class="hl kwa">is new</span> Ada.Numerics.Generic_Complex_Types<span class="hl sym">(</span>Real<span class="hl sym">);</span>
   <span class="hl kwa">use</span> R_Complex<span class="hl sym">;</span>
   Iter                   <span class="hl sym">:</span> <span class="hl kwa">constant</span> <span class="hl sym">:=</span> <span class="hl num">50</span><span class="hl sym">;</span>
   Limit                  <span class="hl sym">:</span> <span class="hl kwa">constant</span> <span class="hl sym">:=</span> <span class="hl num">4.0</span><span class="hl sym">;</span>
   Size                   <span class="hl sym">:</span> <span class="hl kwb">Positive</span><span class="hl sym">;</span>
   Bit_Num                <span class="hl sym">:</span> <span class="hl kwb">Natural</span>    <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   Byte_Acc               <span class="hl sym">:</span> Unsigned_8 <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   Z<span class="hl sym">,</span> Z2<span class="hl sym">,</span> C<span class="hl sym">,</span> Zero         <span class="hl sym">:</span> Complex<span class="hl sym">;</span>
   Two_on_Size            <span class="hl sym">:</span> Real<span class="hl sym">;</span>
<span class="hl kwa">begin</span>
   Size <span class="hl sym">:=</span> <span class="hl kwb">Positive</span><span class="hl sym">'</span>Value <span class="hl sym">(</span>Argument <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">));</span>
   Two_on_Size<span class="hl sym">:=</span> <span class="hl num">2.0</span> <span class="hl sym">/</span> Real <span class="hl sym">(</span>Size<span class="hl sym">);</span>
   Zero<span class="hl sym">:= (</span><span class="hl num">0.0</span><span class="hl sym">,</span> <span class="hl num">0.0</span><span class="hl sym">);</span>

   Put_Line <span class="hl sym">(</span><span class="hl str">&quot;P4&quot;</span><span class="hl sym">);</span>
   Put_Line <span class="hl sym">(</span>Argument <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">) &amp;</span> <span class="hl str">&quot; &quot;</span> <span class="hl sym">&amp;</span> Argument <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">));</span>

   <span class="hl kwa">for</span> Y <span class="hl kwa">in</span> <span class="hl num">0</span> .. Size <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl kwa">loop</span>
      <span class="hl kwa">for</span> X <span class="hl kwa">in</span> <span class="hl num">0</span> .. Size <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl kwa">loop</span>
         Z <span class="hl sym">:=</span> Zero<span class="hl sym">;</span>
         C <span class="hl sym">:=</span> Two_on_Size <span class="hl sym">* (</span>Real <span class="hl sym">(</span>X<span class="hl sym">),</span> Real <span class="hl sym">(</span>Y<span class="hl sym">)) - (</span><span class="hl num">1.5</span><span class="hl sym">,</span> <span class="hl num">1.0</span><span class="hl sym">);</span>

         <span class="hl kwa">for</span> I <span class="hl kwa">in</span> <span class="hl num">1</span> .. Iter <span class="hl sym">+</span> <span class="hl num">1</span> <span class="hl kwa">loop</span>
            Z2 <span class="hl sym">:= (</span>Z.re <span class="hl sym">**</span> <span class="hl num">2</span><span class="hl sym">,</span> Z.im <span class="hl sym">**</span> <span class="hl num">2</span><span class="hl sym">);</span>
            Z  <span class="hl sym">:= (</span>Z2.re <span class="hl sym">-</span> Z2.im<span class="hl sym">,</span> <span class="hl num">2.0</span> <span class="hl sym">*</span> Z.re <span class="hl sym">*</span> Z.im<span class="hl sym">) +</span> C<span class="hl sym">;</span>
            <span class="hl kwa">exit when</span> Z2.re <span class="hl sym">+</span> Z2.im <span class="hl sym">&gt;</span> Limit<span class="hl sym">;</span>
         <span class="hl kwa">end loop</span><span class="hl sym">;</span>

         <span class="hl kwa">if</span> Z2.re <span class="hl sym">+</span> Z2.im <span class="hl sym">&gt;</span> Limit <span class="hl kwa">then</span>
            Byte_Acc <span class="hl sym">:=</span> Shift_Left <span class="hl sym">(</span>Byte_Acc<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">or</span> <span class="hl num">16</span>#<span class="hl num">00</span>#<span class="hl sym">;</span>
         <span class="hl kwa">else</span>
            Byte_Acc <span class="hl sym">:=</span> Shift_Left <span class="hl sym">(</span>Byte_Acc<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">or</span> <span class="hl num">16</span>#<span class="hl num">01</span>#<span class="hl sym">;</span>
         <span class="hl kwa">end if</span><span class="hl sym">;</span>

         Bit_Num <span class="hl sym">:=</span> Bit_Num <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>

         <span class="hl kwa">if</span> Bit_Num <span class="hl sym">=</span> <span class="hl num">8</span> <span class="hl kwa">then</span>
            Put <span class="hl sym">(</span><span class="hl kwb">Character</span><span class="hl sym">'</span>Val <span class="hl sym">(</span>Byte_Acc<span class="hl sym">));</span>
            Byte_Acc <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            Bit_Num  <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         <span class="hl kwa">elsif</span> X <span class="hl sym">=</span> Size <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl kwa">then</span>
            Byte_Acc <span class="hl sym">:=</span> Shift_Left <span class="hl sym">(</span>Byte_Acc<span class="hl sym">,</span> <span class="hl num">8</span> <span class="hl sym">- (</span>Size <span class="hl kwa">mod</span> <span class="hl num">8</span><span class="hl sym">));</span>
            Put <span class="hl sym">(</span><span class="hl kwb">Character</span><span class="hl sym">'</span>Val <span class="hl sym">(</span>Byte_Acc<span class="hl sym">));</span>
            Byte_Acc <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            Bit_Num  <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         <span class="hl kwa">end if</span><span class="hl sym">;</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>
   <span class="hl kwa">end loop</span><span class="hl sym">;</span>
<span class="hl kwa">end</span> Mandelbrot<span class="hl sym">;</span>
