<source>
<def></def><com>(* The Computer Language Shootout</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com></com><br />
<com>   contributed by Christophe Papazian</com><br />
<com>   Decembre 2005</com><br />
<com>*)</com><def></def><br />
<br />
<com>(* please compile with -unsafe to optimize speed *)</com><def></def><br />
<br />
<kwa>open</kwa> <def></def><kwd>Array</kwd> <def></def><kwa>open</kwa> <def></def><kwd>Printf</kwd><br />
<def></def><br />
<com>(*global variables*)</com><def></def><br />
<kwa>let</kwa> <def>n</def> <sym>=</sym> <def></def><kwa>try if</kwa> <def>length</def> <kwc>Sys</kwc><def></def><sym>.</sym><def>argv</def><sym>&gt;</sym><def></def><num>1</num> <def></def><kwa>then</kwa> <def>int_of_string</def> <kwc>Sys</kwc><def></def><sym>.</sym><def>argv</def><sym>.(</sym><def></def><num>1</num><def></def><sym>)</sym><def></def><kwa>else</kwa> <def></def><num>7</num>  <def></def><kwa>with</kwa> <def>_</def><sym>-&gt;</sym><def></def><num>7</num><br />
<def></def><kwa>let</kwa> <def>r</def> <sym>=</sym> <def>init</def><sym>(</sym><def>n</def><sym>+</sym><def></def><num>2</num><def></def><sym>)(</sym><def></def><kwa>fun</kwa> <def>x</def> <sym>-&gt;</sym> <def>x</def><sym>-</sym><def></def><num>1</num><def></def><sym>)</sym> <def></def><kwa>and</kwa> <def>p</def><sym>=</sym><def>init n</def><sym>((+)</sym><def></def><num>1</num><def></def><sym>)</sym> <def></def><kwa>and</kwa> <def>s</def><sym>=</sym><def>create n</def> <num>0</num><br />
<def></def><br />
<com>(*pretty printing function*)</com><def></def><br />
<kwa>let</kwa> <def>q</def><sym>() =</sym> <def>iter print_int p</def><sym>;</sym><def>print_newline</def><sym>()</sym><br />
<def></def><br />
<com>(*counting permutations*)</com><def></def><br />
<kwa>let rec</kwa> <def>a n</def> <sym>=</sym> <def>r</def><sym>.(</sym><def>n</def><sym>)&lt;-(</sym><def>r</def><sym>.(</sym><def>n</def><sym>)+</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>  <kwa>if</kwa> <def>r</def><sym>.(</sym><def>n</def><sym>)=</sym><def>n</def><sym>-</sym><def></def><num>1</num> <def></def><kwa>then</kwa> <def>a</def><sym>(</sym><def>n</def><sym>+</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>  <kwa>else</kwa> <def></def><sym>(</sym><def></def><kwa>if</kwa> <def>r</def><sym>.(</sym><def>n</def><sym>)=</sym><def>n</def> <kwa>then</kwa> <def>r</def><sym>.(</sym><def>n</def><sym>)&lt;-</sym><def></def><num>0</num><def></def><sym>;</sym><def>n</def><sym>)</sym><br />
<def></def><br />
<com>(*swapping arrays*)</com><def></def><br />
<kwa>let</kwa> <def>w m</def><sym>=</sym> <def></def><kwa>let rec</kwa> <def>a i</def><sym>=</sym><def>i</def><sym>=</sym><def>n</def><sym>||(</sym><def>p</def><sym>.(</sym><def>i</def><sym>)&lt;&gt;(</sym><def>i</def><sym>+</sym><def></def><num>1</num><def></def><sym>)&amp;&amp;</sym><def>a</def><sym>(</sym><def>i</def><sym>+</sym><def></def><num>1</num><def></def><sym>))</sym><def></def><kwa>in</kwa><br />
<def></def><kwa>if</kwa> <def>a</def> <num>0</num> <def></def><kwa>then</kwa><br />
<def></def>  <sym>(</sym><def></def><kwa>for</kwa> <def>i</def><sym>=</sym><def></def><num>0</num> <def></def><kwa>to</kwa> <def>n</def><sym>-</sym><def></def><num>1</num> <def></def><kwa>do</kwa> <def>s</def><sym>.(</sym><def>i</def><sym>)&lt;-</sym><def>p</def><sym>.(</sym><def>i</def><sym>)</sym><def></def><kwa>done</kwa><def></def><sym>;</sym><br />
<def></def>   <kwa>let rec</kwa> <def>y m</def><sym>=</sym> <def></def><kwa>let</kwa> <def>x</def><sym>=</sym><def>s</def><sym>.(</sym><def></def><num>0</num><def></def><sym>)-</sym><def></def><num>1</num> <def></def><kwa>in</kwa><br />
<def></def>   <kwa>if</kwa> <def>x</def><sym>=</sym><def></def><num>0</num> <def></def><kwa>then</kwa> <def>m</def><br />
   <kwa>else</kwa> <def></def><sym>(</sym><def></def><kwa>for</kwa> <def>i</def><sym>=</sym><def></def><num>0</num> <def></def><kwa>to</kwa><def></def><sym>((</sym><def>x</def><sym>-</sym><def></def><num>1</num><def></def><sym>)</sym> <def></def><kwa>lsr</kwa> <def></def><num>1</num><def></def><sym>)</sym><def></def><kwa>do</kwa><br />
<def></def>	   <kwa>let</kwa> <def>t</def><sym>=</sym><def>s</def><sym>.(</sym><def>i</def><sym>)</sym><def></def><kwa>in let</kwa> <def>o</def> <sym>=</sym> <def>x</def><sym>-</sym><def>i</def> <kwa>in</kwa> <def>s</def><sym>.(</sym><def>i</def><sym>)&lt;-</sym><def>s</def><sym>.(</sym><def>o</def><sym>);</sym><br />
<def>	   s</def><sym>.(</sym><def>o</def><sym>)&lt;-</sym><def>t</def> <kwa>done</kwa><def></def><sym>;</sym><def>y</def><sym>(</sym><def>m</def><sym>+</sym><def></def><num>1</num><def></def><sym>))</sym><br />
<def></def>   <kwa>in</kwa> <def>y m</def><sym>)</sym> <def></def><kwa>else</kwa> <def></def><num>0</num><br />
<def></def><br />
<com>(*building new permutations*)</com><def></def><br />
<kwa>let</kwa> <def>x n</def> <sym>=</sym><br />
<def></def>  <kwa>for</kwa> <def>i</def><sym>=</sym><def></def><num>1</num> <def></def><kwa>to</kwa> <def>n</def><sym>-</sym><def></def><num>1</num> <def></def><kwa>do let</kwa> <def>t</def><sym>=</sym><def>p</def><sym>.(</sym><def></def><num>0</num><def></def><sym>)</sym><def></def><kwa>in</kwa><br />
<def></def>  <kwa>for</kwa> <def>j</def><sym>=</sym><def></def><num>0</num> <def></def><kwa>to</kwa> <def>i</def><sym>-</sym><def></def><num>1</num> <def></def><kwa>do</kwa> <def>p</def><sym>.(</sym><def>j</def><sym>)&lt;-</sym><def>p</def><sym>.(</sym><def>j</def><sym>+</sym><def></def><num>1</num><def></def><sym>)</sym> <def></def><kwa>done</kwa><def></def><sym>;</sym> <def>p</def><sym>.(</sym><def>i</def><sym>)&lt;-</sym><def>t</def> <kwa>done</kwa><br />
<def></def><br />
<com>(* main *)</com><def></def><br />
<kwa>let</kwa> <def>_</def> <sym>=</sym> <def></def><kwa>let rec</kwa> <def>f i m z</def><sym>=</sym> <def></def><com>(* printing loop *)</com><def></def><br />
  <kwa>if</kwa> <def>i</def> <sym>&lt;=</sym><def>n</def> <sym>&amp;&amp;</sym> <def>z</def><sym>&gt;</sym><def></def><num>0</num><br />
<def></def>  <kwa>then</kwa><def></def><sym>(</sym><def>q</def><sym>();</sym><def>x i</def><sym>;</sym><def>f</def><sym>(</sym><def>a</def> <num>2</num><def></def><sym>)(</sym><def>max m</def><sym>(</sym><def>w</def> <num>0</num><def></def><sym>))(</sym><def>z</def><sym>-</sym><def></def><num>1</num><def></def><sym>))</sym><br />
<def></def>  <kwa>else</kwa> <def></def><sym>(</sym><def></def><kwa>if</kwa> <def>z</def><sym>&gt;</sym><def></def><num>0</num> <def></def><kwa>then</kwa> <def>q</def><sym>();</sym><def>g i m</def><sym>)</sym><br />
<def></def>	<kwa>and</kwa> <def>g i m</def><sym>=</sym> <def></def><kwa>if</kwa> <def>i</def> <sym>&lt;=</sym><def>n</def> <com>(* non printing loop *)</com><def></def><br />
	<kwa>then</kwa><def></def><sym>(</sym><def>x i</def><sym>;</sym> <def>g</def><sym>(</sym><def>a</def> <num>2</num><def></def><sym>)(</sym><def>max m</def><sym>(</sym><def>w</def> <num>0</num><def></def><sym>)))</sym><br />
<def></def>	<kwa>else</kwa> <def>m</def> <kwa>in</kwa><br />
<def>printf</def> <str>&quot;Pfannkuchen(%i) = %i</str><esc>\n</esc><str>&quot;</str><def> n</def> <sym>(</sym><def>f</def> <sym>(</sym><def>a</def> <num>2</num><def></def><sym>)</sym> <def></def><num>0 30</num><def></def><sym>)</sym><def></def><br />
</source>
