<source>
<def></def><slc>--  The Computer Language Shootout</slc><br />
<def></def><slc>--  http://shootout.alioth.debian.org</slc><br />
<def></def><slc>--  Calculate digits of pi using the</slc><br />
<def></def><slc>--  Unbounded Spigot Algorithms</slc><br />
<def></def><slc>--</slc><br />
<def></def><slc>--  From Pascal code by Vincent Snijders</slc><br />
<def></def><slc>--  gmp headers by Karl-Michael Schindler</slc><br />
<def></def><slc>--  Translated by (New) P2Ada v. 17-June-2006</slc><br />
<def></def><br />
<kwa>with</kwa> <def>Ada.Text_IO</def><sym>;</sym>                       <def></def><kwa>use</kwa> <def>Ada.Text_IO</def><sym>;</sym><br />
<def></def><kwa>with</kwa> <def>Ada.Integer_Text_IO</def><sym>;</sym>               <def></def><kwa>use</kwa> <def>Ada.Integer_Text_IO</def><sym>;</sym><br />
<def></def><kwa>with</kwa> <def>Ada.Command_Line</def><sym>;</sym>                  <def></def><kwa>use</kwa> <def>Ada.Command_Line</def><sym>;</sym><br />
<def></def><kwa>with</kwa> <def>Ada.Calendar</def><sym>;</sym>                      <def></def><kwa>use</kwa> <def>Ada.Calendar</def><sym>;</sym><br />
<def></def><br />
<kwa>with</kwa> <def>Interfaces.C</def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def>pidigits</def> <kwa>is</kwa><br />
<def></def><br />
  <kwa>pragma</kwa> <def>Suppress</def><sym>(</sym><def>All_Checks</def><sym>);</sym><br />
<def></def><br />
  <kwa>package</kwa> <def>GMP_mini</def> <kwa>is</kwa><br />
<def></def>    <kwa>type</kwa> <def>mp_limb_t</def> <kwa>is new</kwa> <def>Interfaces.C.unsigned</def><sym>;</sym><br />
<def></def>    <kwa>type</kwa> <def>mp_ptr</def> <kwa>is access</kwa> <def>mp_limb_t</def><sym>;</sym><br />
<def></def><br />
    <kwa>type</kwa> <def>mpz_t</def> <kwa>is record</kwa><br />
<def>      mp_alloc</def><sym>,</sym> <def>mp_size</def> <sym>:</sym> <def>Interfaces.C.int</def><sym>;</sym><br />
<def>      mp_d</def>    <sym>:</sym> <def>mp_ptr</def><sym>;</sym><br />
<def></def>    <kwa>end record</kwa><def></def><sym>;</sym><br />
<def></def><br />
    <kwa>procedure</kwa> <def>mpz_init</def> <sym>(</sym><def>Dest</def><sym>:</sym> <def></def><kwa>out</kwa> <def>mpz_t</def><sym>);</sym><br />
<def></def>    <kwa>pragma</kwa> <def>Import</def><sym>(</sym><def>C</def><sym>,</sym> <def>mpz_init</def><sym>,</sym> <def></def><str>&quot;__gmpz_init&quot;</str><def></def><sym>);</sym><br />
<def></def><br />
    <kwa>procedure</kwa> <def>mpz_init_set_ui</def> <sym>(</sym><def>Dest</def><sym>:</sym> <def></def><kwa>out</kwa> <def>mpz_t</def><sym>;</sym> <def>Src</def><sym>:</sym> <def></def><kwa>in</kwa> <def>Interfaces.C.unsigned_long</def><sym>);</sym><br />
<def></def>    <kwa>pragma</kwa> <def>Import</def><sym>(</sym><def>C</def><sym>,</sym> <def>mpz_init_set_ui</def><sym>,</sym> <def></def><str>&quot;__gmpz_init_set_ui&quot;</str><def></def><sym>);</sym><br />
<def></def><br />
    <kwa>procedure</kwa> <def>mpz_mul_ui</def> <sym>(</sym><def>Dest</def><sym>:</sym> <def></def><kwa>out</kwa> <def>mpz_t</def><sym>;</sym> <def>Src1</def><sym>:</sym> <def></def><kwa>in</kwa> <def>mpz_t</def><sym>;</sym> <def>Src2</def><sym>:</sym> <def></def><kwa>in</kwa> <def>Interfaces.C.unsigned_long</def><sym>);</sym><br />
<def></def>    <kwa>pragma</kwa> <def>Import</def><sym>(</sym><def>C</def><sym>,</sym> <def>mpz_mul_ui</def><sym>,</sym> <def></def><str>&quot;__gmpz_mul_ui&quot;</str><def></def><sym>);</sym><br />
<def></def><br />
    <kwa>procedure</kwa> <def>mpz_mul_si</def> <sym>(</sym><def>Dest</def><sym>:</sym> <def></def><kwa>out</kwa> <def>mpz_t</def><sym>;</sym> <def>Src1</def><sym>:</sym> <def></def><kwa>in</kwa> <def>mpz_t</def><sym>;</sym> <def>Src2</def><sym>:</sym> <def></def><kwa>in</kwa> <def>Interfaces.C.int</def><sym>);</sym><br />
<def></def>    <kwa>pragma</kwa> <def>Import</def><sym>(</sym><def>C</def><sym>,</sym> <def>mpz_mul_si</def><sym>,</sym> <def></def><str>&quot;__gmpz_mul_si&quot;</str><def></def><sym>);</sym><br />
<def></def><br />
    <kwa>procedure</kwa> <def>mpz_add</def> <sym>(</sym><def>Dest</def><sym>:</sym> <def></def><kwa>out</kwa> <def>mpz_t</def><sym>;</sym> <def>Src1</def><sym>,</sym> <def>Src2</def><sym>:</sym> <def></def><kwa>in</kwa> <def>mpz_t</def><sym>);</sym><br />
<def></def>    <kwa>pragma</kwa> <def>Import</def><sym>(</sym><def>C</def><sym>,</sym> <def>mpz_add</def><sym>,</sym> <def></def><str>&quot;__gmpz_add&quot;</str><def></def><sym>);</sym><br />
<def></def><br />
    <kwa>procedure</kwa> <def>mpz_tdiv_q</def> <sym>(</sym><def>Dest</def><sym>:</sym> <def></def><kwa>out</kwa> <def>mpz_t</def><sym>;</sym> <def>Src1</def><sym>,</sym> <def>Src2</def><sym>:</sym> <def></def><kwa>in</kwa> <def>mpz_t</def><sym>);</sym><br />
<def></def>    <kwa>pragma</kwa> <def>Import</def><sym>(</sym><def>C</def><sym>,</sym> <def>mpz_tdiv_q</def><sym>,</sym> <def></def><str>&quot;__gmpz_tdiv_q&quot;</str><def></def><sym>);</sym><br />
<def></def><br />
    <kwa>function</kwa>  <def>mpz_get_ui</def> <sym>(</sym><def>Src</def><sym>:</sym> <def></def><kwa>in</kwa> <def>mpz_t</def><sym>)</sym> <def></def><kwa>return</kwa> <def>Interfaces.C.unsigned_long</def><sym>;</sym><br />
<def></def>    <kwa>pragma</kwa> <def>Import</def><sym>(</sym><def>C</def><sym>,</sym> <def>mpz_get_ui</def><sym>,</sym> <def></def><str>&quot;__gmpz_get_ui&quot;</str><def></def><sym>);</sym><br />
<def></def><br />
    <kwa>pragma</kwa> <def>Linker_Options</def><sym>(</sym><def></def><str>&quot;-lgmp&quot;</str><def></def><sym>);</sym><br />
<def></def><br />
  <kwa>end</kwa> <def>GMP_Mini</def><sym>;</sym><br />
<def></def><br />
  <kwa>procedure</kwa> <def>Print_pi_digits</def><sym>(</sym><def>num_digits</def><sym>:</sym> <def></def><kwb>Integer</kwb><def></def><sym>)</sym> <def></def><kwa>is</kwa><br />
<def></def>    <kwa>use</kwa> <def>GMP_mini</def><sym>;</sym><br />
<def><br />
    q</def><sym>,</sym><def>r</def><sym>,</sym><def>s</def><sym>,</sym><def>t</def><sym>:</sym> <def>mpz_t</def><sym>;</sym> <def></def><slc>--  Transformation matrix components</slc><br />
<def><br />
    u</def><sym>,</sym><def>v</def><sym>,</sym><def>w</def><sym>:</sym> <def>mpz_t</def><sym>;</sym>   <def></def><slc>--  Temporary variables</slc><br />
<def><br />
    k</def><sym>,</sym><def>digit</def><sym>:</sym> <def>Interfaces.C.int</def><sym>;</sym><br />
<def>    c</def><sym>,</sym><def>i</def><sym>:</sym> <def></def><kwb>Integer</kwb><def></def><sym>;</sym><br />
<def>    line</def><sym>:</sym> <def></def><kwb>String</kwb><def></def><sym>(</sym><def></def><num>1</num> <def>.</def><num>.10</num><def></def><sym>);</sym><br />
<def></def><br />
    <kwa>function</kwa> <def>Extract</def><sym>(</sym><def>x</def><sym>:</sym> <def>Interfaces.C.Unsigned_long</def><sym>)</sym> <def></def><kwa>return</kwa> <def>Interfaces.C.int</def> <kwa>is</kwa><br />
<def></def>    <kwa>begin</kwa><br />
<def>      mpz_mul_ui</def><sym>(</sym><def>u</def><sym>,</sym> <def>q</def><sym>,</sym> <def>x</def><sym>);</sym><br />
<def>      mpz_add</def><sym>(</sym><def>u</def><sym>,</sym> <def>u</def><sym>,</sym> <def>r</def><sym>);</sym><br />
<def>      mpz_mul_ui</def><sym>(</sym><def>v</def><sym>,</sym> <def>s</def><sym>,</sym> <def>x</def><sym>);</sym><br />
<def>      mpz_add</def><sym>(</sym><def>v</def><sym>,</sym> <def>v</def><sym>,</sym> <def>t</def><sym>);</sym><br />
<def>      mpz_tdiv_q</def><sym>(</sym><def>w</def><sym>,</sym> <def>u</def><sym>,</sym> <def>v</def><sym>);</sym><br />
<def></def>      <kwa>return</kwa> <def>Interfaces.C.int</def><sym>(</sym><def>mpz_get_ui</def><sym>(</sym><def>w</def><sym>));</sym><br />
<def></def>    <kwa>end</kwa> <def>Extract</def><sym>;</sym><br />
<def></def><br />
    <kwa>use</kwa> <def>Interfaces.C</def><sym>;</sym><br />
<def></def><br />
    <kwa>function</kwa> <def>IsSafe</def> <kwa>return</kwa> <def></def><kwb>Boolean</kwb> <def></def><kwa>is</kwa><br />
<def></def>    <kwa>begin</kwa><br />
<def></def>      <kwa>return</kwa> <def>digit</def> <sym>=</sym> <def>Extract</def><sym>(</sym><def></def><num>4</num><def></def><sym>);</sym><br />
<def></def>    <kwa>end</kwa> <def>IsSafe</def><sym>;</sym><br />
<def></def><br />
    <kwa>procedure</kwa> <def>Produce</def> <kwa>is</kwa><br />
<def></def>    <kwa>begin</kwa><br />
<def>      mpz_mul_si</def><sym>(</sym><def>r</def><sym>,</sym> <def>r</def><sym>,</sym> <def></def><num>10</num><def></def><sym>);</sym><br />
<def>      mpz_mul_si</def><sym>(</sym><def>v</def><sym>,</sym> <def>t</def><sym>, -</sym><def></def><num>10</num> <def></def><sym>*</sym> <def>digit</def><sym>);</sym><br />
<def>      mpz_add</def><sym>(</sym><def>r</def><sym>,</sym> <def>r</def><sym>,</sym> <def>v</def><sym>);</sym><br />
<def>      mpz_mul_si</def><sym>(</sym><def>q</def><sym>,</sym> <def>q</def><sym>,</sym> <def></def><num>10</num><def></def><sym>);</sym><br />
<def></def>    <kwa>end</kwa> <def>Produce</def><sym>;</sym><br />
<def></def><br />
    <kwa>procedure</kwa> <def>Consume</def> <kwa>is</kwa><br />
<def></def>    <kwa>begin</kwa><br />
<def>      k</def><sym>:=</sym> <def>k</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def>      mpz_mul_si</def><sym>(</sym><def>r</def><sym>,</sym> <def>r</def><sym>,</sym> <def></def><num>2</num><def></def><sym>*</sym><def>k</def><sym>+</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def>      mpz_mul_si</def><sym>(</sym><def>u</def><sym>,</sym> <def>q</def><sym>,</sym> <def></def><num>4</num><def></def><sym>*</sym><def>k</def><sym>+</sym><def></def><num>2</num><def></def><sym>);</sym><br />
<def>      mpz_add</def><sym>(</sym><def>r</def><sym>,</sym> <def>r</def><sym>,</sym> <def>u</def><sym>);</sym><br />
<def>      mpz_mul_si</def><sym>(</sym><def>t</def><sym>,</sym> <def>t</def><sym>,</sym> <def></def><num>2</num><def></def><sym>*</sym><def>k</def><sym>+</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def>      mpz_mul_si</def><sym>(</sym><def>v</def><sym>,</sym> <def>s</def><sym>,</sym> <def></def><num>4</num><def></def><sym>*</sym><def>k</def><sym>+</sym><def></def><num>2</num><def></def><sym>);</sym><br />
<def>      mpz_add</def><sym>(</sym><def>t</def><sym>,</sym> <def>t</def><sym>,</sym> <def>v</def><sym>);</sym><br />
<def>      mpz_mul_si</def><sym>(</sym><def>s</def><sym>,</sym> <def>s</def><sym>,</sym> <def>k</def><sym>);</sym><br />
<def>      mpz_mul_si</def><sym>(</sym><def>q</def><sym>,</sym> <def>q</def><sym>,</sym> <def>k</def><sym>);</sym><br />
<def></def>    <kwa>end</kwa> <def>Consume</def><sym>;</sym><br />
<def></def><br />
  <kwa>begin</kwa><br />
<def>    k</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>    i</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>    c</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>    mpz_init_set_ui</def><sym>(</sym><def>q</def><sym>,</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def>    mpz_init_set_ui</def><sym>(</sym><def>r</def><sym>,</sym> <def></def><num>0</num><def></def><sym>);</sym><br />
<def>    mpz_init_set_ui</def><sym>(</sym><def>s</def><sym>,</sym> <def></def><num>0</num><def></def><sym>);</sym><br />
<def>    mpz_init_set_ui</def><sym>(</sym><def>t</def><sym>,</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def>    mpz_init</def><sym>(</sym><def>u</def><sym>);</sym><br />
<def>    mpz_init</def><sym>(</sym><def>v</def><sym>);</sym><br />
<def>    mpz_init</def><sym>(</sym><def>w</def><sym>);</sym><br />
<def></def>    <kwa>while</kwa> <def>i</def> <sym>&lt;</sym> <def>num_digits</def> <kwa>loop</kwa><br />
<def>      digit</def> <sym>:=</sym> <def>Extract</def><sym>(</sym><def></def><num>3</num><def></def><sym>);</sym><br />
<def></def>      <kwa>while not</kwa> <def>IsSafe</def> <kwa>loop</kwa><br />
<def>        Consume</def><sym>;</sym><br />
<def>        digit</def><sym>:=</sym> <def>Extract</def><sym>(</sym><def></def><num>3</num><def></def><sym>);</sym><br />
<def></def>      <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def>      Produce</def><sym>;</sym><br />
<def>      c</def><sym>:=</sym> <def>c</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def>      line</def><sym>(</sym><def>c</def><sym>) :=</sym> <def></def><kwb>Character</kwb><def></def><sym>'</sym><def>Val</def><sym>(</sym><def></def><kwb>Character</kwb><def></def><sym>'</sym><def>Pos</def><sym>('</sym><def></def><num>0</num><def></def><sym>')+</sym><def>digit</def><sym>);</sym><br />
<def>      i</def><sym>:=</sym> <def>i</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>      <kwa>if</kwa> <def>c</def> <sym>=</sym> <def></def><num>10</num> <def></def><kwa>then</kwa><br />
<def>        Put</def><sym>(</sym><def>line</def> <sym>&amp;</sym> <def>ASCII.HT</def> <sym>&amp; ':');</sym><br />
<def>        Put</def><sym>(</sym><def>i</def><sym>,</sym><def></def><num>0</num><def></def><sym>);</sym> <def>New_Line</def><sym>;</sym><br />
<def>        c</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>      <kwa>end if</kwa><def></def><sym>;</sym><br />
<def></def>    <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def></def>    <kwa>if</kwa>  <def>c</def><sym>/=</sym><def></def><num>0</num> <def></def><kwa>then</kwa><br />
<def>      Put</def><sym>(</sym><def>line</def><sym>(</sym><def></def><num>1</num><def>..c</def><sym>));</sym><br />
<def></def>      <kwa>for</kwa> <def>i</def> <kwa>in</kwa> <def>c</def><sym>+</sym><def></def><num>1</num><def>.</def><num>.10</num> <def></def><kwa>loop</kwa><br />
<def>        Put</def><sym>(' ');</sym><br />
<def></def>      <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def>      Put</def><sym>(</sym><def>ASCII.HT</def> <sym>&amp; ':');</sym><br />
<def>      Put</def><sym>(</sym><def>i</def><sym>,</sym><def></def><num>0</num><def></def><sym>);</sym><br />
<def>      New_Line</def><sym>;</sym><br />
<def></def>    <kwa>end if</kwa><def></def><sym>;</sym><br />
<def></def>  <kwa>end</kwa> <def>Print_pi_digits</def><sym>;</sym><br />
<def><br />
  n</def><sym>:</sym> <def></def><kwb>Integer</kwb><def></def><sym>;</sym><br />
<def><br />
  t0</def><sym>,</sym><def>t1</def><sym>:</sym> <def>Time</def><sym>;</sym><br />
<def>  timing</def><sym>:</sym> <def></def><kwa>constant</kwa> <def></def><kwb>Boolean</kwb><def></def><sym>:=</sym> <def>False</def><sym>;</sym><br />
<def></def><br />
<kwa>begin</kwa><br />
<def>  n</def><sym>:=</sym> <def></def><num>2</num><def>_500</def><sym>;</sym><br />
<def></def>  <kwa>if</kwa> <def>Argument_Count</def><sym>=</sym><def></def><num>1</num> <def></def><kwa>then</kwa><br />
<def>    n</def><sym>:=</sym> <def></def><kwb>Integer</kwb><def></def><sym>'</sym><def>Value</def><sym>(</sym><def>Argument</def><sym>(</sym><def></def><num>1</num><def></def><sym>));</sym><br />
<def></def>  <kwa>end if</kwa><def></def><sym>;</sym><br />
<def></def>  <kwa>if</kwa> <def>timing</def> <kwa>then</kwa><br />
<def>    t0</def><sym>:=</sym> <def>Clock</def><sym>;</sym><br />
<def></def>  <kwa>end if</kwa><def></def><sym>;</sym><br />
<def>  Print_pi_digits</def><sym>(</sym><def>n</def><sym>);</sym><br />
<def></def>  <kwa>if</kwa> <def>timing</def> <kwa>then</kwa><br />
<def>    t1</def><sym>:=</sym> <def>Clock</def><sym>;</sym><br />
<def>    Put</def><sym>(</sym><def></def><str>&quot;Time in seconds: &quot;</str><def></def> <sym>&amp;</sym> <def></def><kwb>Duration</kwb><def></def><sym>'</sym><def>Image</def><sym>(</sym><def>t1</def><sym>-</sym><def>t0</def><sym>) &amp;</sym> <def></def><str>&quot; [press return]&quot;</str><def></def><sym>);</sym><br />
<def>    Skip_Line</def><sym>;</sym><br />
<def></def>  <kwa>end if</kwa><def></def><sym>;</sym><br />
<def></def><kwa>end</kwa> <def>pidigits</def><sym>;</sym><def></def><br />
</source>
