<source>
<def></def><com>/* The Computer Language Shootout</com><br />
<com> * http://shootout.alioth.debian.org/</com><br />
<com> * contributed by Isaac Gouy</com><br />
<com> */</com><def></def><br />
<br />
<kwa>using</kwa> <def>System</def><sym>;</sym><br />
<def></def><kwa>using</kwa> <def>System</def><sym>.</sym><def>Threading</def><sym>;</sym><br />
<def></def><br />
<br />
<kwa>internal class</kwa> <def>NamedThread</def><br />
<sym>{</sym><br />
<def></def>   <kwa>private</kwa> <def></def><kwb>int</kwb> <def>name</def><sym>;</sym><br />
<def></def>   <kwa>private</kwa> <def>AutoResetEvent signal</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>AutoResetEvent</kwd><def></def><sym>(</sym><def></def><kwa>false</kwa><def></def><sym>);</sym><br />
<def></def>   <kwa>private</kwa> <def></def><kwb>int</kwb> <def>token</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><br />
   <kwa>internal</kwa> <def></def><kwd>NamedThread</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>name</def><sym>) {</sym><br />
<def></def>      <kwa>this</kwa><def></def><sym>.</sym><def>name</def> <sym>=</sym> <def>name</def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>internal</kwa> <def></def><kwb>void</kwb> <def></def><kwd>Run</kwd><def></def><sym>() {</sym><br />
<def></def>      <kwa>while</kwa> <def></def><sym>(</sym><def></def><kwd>TokenNotDone</kwd><def></def><sym>())</sym><br />
<def></def>         <kwd>NextThread</kwd><def></def><sym>().</sym><def></def><kwd>TakeToken</kwd><def></def><sym>(</sym><def>token</def><sym>-</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def></def><br />
      <kwa>if</kwa> <def></def><sym>(</sym><def>token</def> <sym>==</sym> <def></def><num>0</num><def></def><sym>)</sym> <def>Console</def><sym>.</sym><def></def><kwd>WriteLine</kwd><def></def><sym>(</sym><def>name</def><sym>);</sym><br />
<def></def>      <kwd>NextThread</kwd><def></def><sym>().</sym><def></def><kwd>TakeToken</kwd><def></def><sym>(-</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>private</kwa> <def></def><kwb>bool</kwb> <def></def><kwd>TokenNotDone</kwd><def></def><sym>() {</sym><br />
<def>      signal</def><sym>.</sym><def></def><kwd>WaitOne</kwd><def></def><sym>();</sym><br />
<def></def>      <kwa>return</kwa> <def>token</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>internal</kwa> <def>NamedThread</def> <kwd>NextThread</kwd><def></def><sym>() {</sym><br />
<def></def>      <kwa>return</kwa> <def>ThreadRing</def><sym>.</sym><def>threadRing</def><sym>[</sym> <def>name</def> <sym>%</sym> <def>ThreadRing</def><sym>.</sym><def>numberOfThreads</def> <sym>];</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>internal</kwa> <def></def><kwb>void</kwb> <def></def><kwd>TakeToken</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>x</def><sym>) {</sym><br />
<def>      token</def> <sym>=</sym> <def>x</def><sym>;</sym><br />
<def>      signal</def><sym>.</sym><def></def><kwd>Set</kwd><def></def><sym>();</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<br />
<kwa>public class</kwa> <def>ThreadRing</def><br />
<sym>{</sym><br />
<def></def>   <kwa>internal</kwa> <def></def><kwb>const int</kwb> <def>numberOfThreads</def> <sym>=</sym> <def></def><num>503</num><def></def><sym>;</sym><br />
<def></def>   <kwa>internal static</kwa> <def>NamedThread</def><sym>[]</sym> <def>threadRing</def> <sym>=</sym> <def></def><kwa>new</kwa> <def>NamedThread</def><sym>[</sym><def></def><num>503</num><def></def><sym>];</sym><br />
<def></def><br />
   <kwa>public static</kwa> <def></def><kwb>void</kwb> <def></def><kwd>Main</kwd><def></def><sym>(</sym><def></def><kwb>string</kwb><def></def><sym>[]</sym> <def>args</def><sym>) {</sym><br />
<def></def>      <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>numberOfThreads</def><sym>;</sym> <def>i</def><sym>++){</sym><br />
<def>         threadRing</def><sym>[</sym><def>i</def><sym>] =</sym> <def></def><kwa>new</kwa> <def></def><kwd>NamedThread</kwd><def></def><sym>(</sym><def>i</def><sym>+</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><br />
      <kwa>foreach</kwa> <def></def><sym>(</sym><def>NamedThread t in threadRing</def><sym>)</sym><br />
<def></def>         <kwa>new</kwa> <def></def><kwd>Thread</kwd><def></def><sym>(</sym><def></def><kwa>new</kwa> <def></def><kwd>ThreadStart</kwd><def></def><sym>(</sym><def>t</def><sym>.</sym><def>Run</def><sym>)).</sym><def></def><kwd>Start</kwd><def></def><sym>();</sym><br />
<def><br />
      threadRing</def><sym>[</sym><def></def><num>0</num><def></def><sym>].</sym><def></def><kwd>TakeToken</kwd><def></def><sym>(</sym> <def></def><kwb>int</kwb><def></def><sym>.</sym><def></def><kwd>Parse</kwd><def></def><sym>(</sym><def>args</def><sym>[</sym><def></def><num>0</num><def></def><sym>]) );</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
