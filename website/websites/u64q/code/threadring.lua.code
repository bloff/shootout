<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">-- contributed by Jason Foreman</span>

require <span class="hl str">'coroutine'</span>

<span class="hl kwa">local</span> nThreads <span class="hl sym">=</span> <span class="hl num">503</span>
<span class="hl kwa">local</span> token <span class="hl sym">=</span> <span class="hl kwb">tonumber</span><span class="hl sym">(</span>arg<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">])</span>

<span class="hl kwa">local</span> threads <span class="hl sym">= {}</span>
<span class="hl kwa">local function</span> <span class="hl kwd">makethreadfun</span><span class="hl sym">(</span>id<span class="hl sym">)</span>
   <span class="hl kwa">local</span> id <span class="hl sym">=</span> id
   <span class="hl kwa">local function</span> <span class="hl kwd">threadfun</span><span class="hl sym">(</span>token<span class="hl sym">,</span> <span class="hl kwb">next</span><span class="hl sym">)</span>
      <span class="hl kwa">while true do</span>
         <span class="hl kwa">if</span> token <span class="hl sym">==</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
            <span class="hl kwb">print</span><span class="hl sym">(</span>id<span class="hl sym">)</span>
            <span class="hl kwa">return</span> <span class="hl sym">-</span><span class="hl num">1</span>
         <span class="hl kwa">end</span>
         token <span class="hl sym">=</span> coroutine<span class="hl sym">.</span><span class="hl kwd">yield</span><span class="hl sym">(</span>token<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
      <span class="hl kwa">end</span>
   <span class="hl kwa">end</span>
   <span class="hl kwa">return</span> threadfun
<span class="hl kwa">end</span>

<span class="hl kwa">for</span> i<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">,</span>nThreads<span class="hl sym">+</span><span class="hl num">1</span> <span class="hl kwa">do</span>
   threads<span class="hl sym">[</span>i<span class="hl sym">] =</span> coroutine<span class="hl sym">.</span><span class="hl kwd">wrap</span><span class="hl sym">(</span><span class="hl kwd">makethreadfun</span><span class="hl sym">(</span>i<span class="hl sym">))</span>
<span class="hl kwa">end</span>

<span class="hl kwa">local</span> t <span class="hl sym">=</span> <span class="hl num">1</span>
<span class="hl kwa">repeat</span>
   token <span class="hl sym">=</span> threads<span class="hl sym">[</span>t<span class="hl sym">](</span>token<span class="hl sym">)</span>
   t<span class="hl sym">=(</span>t<span class="hl sym">%</span>nThreads<span class="hl sym">)+</span><span class="hl num">1</span>
<span class="hl kwa">until</span> token <span class="hl sym">&lt;</span> <span class="hl num">0</span>

