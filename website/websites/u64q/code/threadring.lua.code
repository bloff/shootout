<source>
<def></def><slc>-- The Computer Language Benchmarks Game</slc><br />
<def></def><slc>-- http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>-- contributed by Jason Foreman</slc><br />
<def><br />
require</def> <str>'coroutine'</str><def></def><br />
<br />
<kwa>local</kwa> <def>nThreads</def> <sym>=</sym> <def></def><num>503</num><br />
<def></def><kwa>local</kwa> <def>token</def> <sym>=</sym> <def></def><kwb>tonumber</kwb><def></def><sym>(</sym><def>arg</def><sym>[</sym><def></def><num>1</num><def></def><sym>])</sym><br />
<def></def><br />
<kwa>local</kwa> <def>threads</def> <sym>= {}</sym><br />
<def></def><kwa>local function</kwa> <def></def><kwd>makethreadfun</kwd><def></def><sym>(</sym><def>id</def><sym>)</sym><br />
<def></def>   <kwa>local</kwa> <def>id</def> <sym>=</sym> <def>id</def><br />
   <kwa>local function</kwa> <def></def><kwd>threadfun</kwd><def></def><sym>(</sym><def>token</def><sym>,</sym> <def></def><kwb>next</kwb><def></def><sym>)</sym><br />
<def></def>      <kwa>while true do</kwa><br />
<def></def>         <kwa>if</kwa> <def>token</def> <sym>==</sym> <def></def><num>0</num> <def></def><kwa>then</kwa><br />
<def></def>            <kwb>print</kwb><def></def><sym>(</sym><def>id</def><sym>)</sym><br />
<def></def>            <kwa>return</kwa> <def></def><sym>-</sym><def></def><num>1</num><br />
<def></def>         <kwa>end</kwa><br />
<def>         token</def> <sym>=</sym> <def>coroutine</def><sym>.</sym><def></def><kwd>yield</kwd><def></def><sym>(</sym><def>token</def><sym>-</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>      <kwa>end</kwa><br />
<def></def>   <kwa>end</kwa><br />
<def></def>   <kwa>return</kwa> <def>threadfun</def><br />
<kwa>end</kwa><br />
<def></def><br />
<kwa>for</kwa> <def>i</def><sym>=</sym><def></def><num>1</num><def></def><sym>,</sym><def>nThreads</def><sym>+</sym><def></def><num>1</num> <def></def><kwa>do</kwa><br />
<def>   threads</def><sym>[</sym><def>i</def><sym>] =</sym> <def>coroutine</def><sym>.</sym><def></def><kwd>wrap</kwd><def></def><sym>(</sym><def></def><kwd>makethreadfun</kwd><def></def><sym>(</sym><def>i</def><sym>))</sym><br />
<def></def><kwa>end</kwa><br />
<def></def><br />
<kwa>local</kwa> <def>t</def> <sym>=</sym> <def></def><num>1</num><br />
<def></def><kwa>repeat</kwa><br />
<def>   token</def> <sym>=</sym> <def>threads</def><sym>[</sym><def>t</def><sym>](</sym><def>token</def><sym>)</sym><br />
<def>   t</def><sym>=(</sym><def>t</def><sym>%</sym><def>nThreads</def><sym>)+</sym><def></def><num>1</num><br />
<def></def><kwa>until</kwa> <def>token</def> <sym>&lt;</sym> <def></def><num>0</num><br />
<def></def><br />
</source>
