<source>
<def></def><slc>// The Computer Language Shootout</slc><br />
<def></def><slc>//  http://shootout.alioth.debian.org</slc><br />
<def></def><slc>//  contributed by Kevin Barnes</slc><br />
<def></def><br />
<dir>#include &lt;time.h&gt;</dir><br />
<def></def><dir>#include &lt;iostream.h&gt;</dir><br />
<def></def><dir>#include &lt;vector.h&gt;</dir><br />
<def></def><dir>#include &lt;string.h&gt;</dir><br />
<def></def><dir>#include &lt;set.h&gt;</dir><br />
<def></def><br />
<kwa>using namespace</kwa> <def>std</def><sym>;</sym><br />
<def></def><br />
<dir>#define WEST 0</dir><br />
<def></def><dir>#define EAST 1</dir><br />
<def></def><dir>#define SW 2</dir><br />
<def></def><dir>#define SE 3</dir><br />
<def></def><dir>#define NW 4</dir><br />
<def></def><dir>#define NE 5</dir><br />
<def></def><br />
<dir>#define BIT ((long long)1)</dir><br />
<def></def><br />
<slc>// constant masks</slc><br />
<def></def><kwb>const long long</kwb> <def>row_mask</def> <sym>= (</sym><def></def><kwb>long long</kwb><def></def><sym>)</sym><def></def><num>31</num><def></def><sym>;</sym><br />
<def></def><kwb>const long long</kwb> <def>full_mask</def> <sym>= (</sym><def>BIT</def> <sym>&lt;&lt;</sym> <def></def><num>50</num><def></def><sym>) -</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def><kwb>const long long</kwb> <def>row_masks</def><sym>[] = {</sym> <def>row_mask</def><sym>,</sym> <def>row_mask</def> <sym>&lt;&lt;</sym> <def></def><num>5</num><def></def><sym>,</sym> <def>row_mask</def> <sym>&lt;&lt;</sym> <def></def><num>10</num><def></def><sym>,</sym> <def>row_mask</def> <sym>&lt;&lt;</sym> <def></def><num>15</num><def></def><sym>,</sym> <def>row_mask</def> <sym>&lt;&lt;</sym> <def></def><num>20</num><def></def><sym>,</sym> <def>row_mask</def> <sym>&lt;&lt;</sym> <def></def><num>25</num><def></def><sym>,</sym> <def>row_mask</def> <sym>&lt;&lt;</sym> <def></def><num>30</num><def></def><sym>,</sym><br />
<def>      row_mask</def> <sym>&lt;&lt;</sym> <def></def><num>35</num><def></def><sym>,</sym> <def>row_mask</def> <sym>&lt;&lt;</sym> <def></def><num>40</num><def></def><sym>,</sym> <def>row_mask</def> <sym>&lt;&lt;</sym> <def></def><num>45</num> <def></def><sym>};</sym><br />
<def></def><kwb>const long long</kwb> <def>all_even_rows</def> <sym>=</sym> <def>row_masks</def><sym>[</sym><def></def><num>0</num><def></def><sym>] |</sym> <def>row_masks</def><sym>[</sym><def></def><num>2</num><def></def><sym>] |</sym> <def>row_masks</def><sym>[</sym><def></def><num>4</num><def></def><sym>] |</sym> <def>row_masks</def><sym>[</sym><def></def><num>6</num><def></def><sym>] |</sym> <def>row_masks</def><sym>[</sym><def></def><num>8</num><def></def><sym>];</sym><br />
<def></def><kwb>const long long</kwb> <def>all_odd_rows</def> <sym>=</sym> <def>row_masks</def><sym>[</sym><def></def><num>1</num><def></def><sym>] |</sym> <def>row_masks</def><sym>[</sym><def></def><num>3</num><def></def><sym>] |</sym> <def>row_masks</def><sym>[</sym><def></def><num>5</num><def></def><sym>] |</sym> <def>row_masks</def><sym>[</sym><def></def><num>7</num><def></def><sym>] |</sym> <def>row_masks</def><sym>[</sym><def></def><num>9</num><def></def><sym>];</sym><br />
<def></def><kwb>const long long</kwb> <def>all_rows</def><sym>[</sym><def></def><num>2</num><def></def><sym>] = {</sym> <def>all_even_rows</def><sym>,</sym> <def>all_odd_rows</def> <sym>};</sym><br />
<def></def><br />
<kwb>const long long</kwb> <def>even_left_edges</def> <sym>=</sym> <def>BIT</def> <sym>| (</sym><def>BIT</def> <sym>&lt;&lt;</sym> <def></def><num>10</num><def></def><sym>) | (</sym><def>BIT</def> <sym>&lt;&lt;</sym> <def></def><num>20</num><def></def><sym>) | (</sym><def>BIT</def> <sym>&lt;&lt;</sym> <def></def><num>30</num> <def></def><sym>| (</sym><def>BIT</def> <sym>&lt;&lt;</sym> <def></def><num>40</num><def></def><sym>));</sym><br />
<def></def><kwb>const long long</kwb> <def>odd_left_edges</def> <sym>= (</sym><def>BIT</def> <sym>&lt;&lt;</sym> <def></def><num>5</num><def></def><sym>) | (</sym><def>BIT</def> <sym>&lt;&lt;</sym> <def></def><num>15</num><def></def><sym>) | (</sym><def>BIT</def> <sym>&lt;&lt;</sym> <def></def><num>25</num><def></def><sym>) | (</sym><def>BIT</def> <sym>&lt;&lt;</sym> <def></def><num>35</num><def></def><sym>) | (</sym><def>BIT</def> <sym>&lt;&lt;</sym> <def></def><num>45</num><def></def><sym>);</sym><br />
<def></def><kwb>const long long</kwb> <def>left_edges</def> <sym>=</sym> <def>even_left_edges</def> <sym>|</sym> <def>odd_left_edges</def><sym>;</sym><br />
<def></def><kwb>const long long</kwb> <def>even_right_edges</def> <sym>=</sym> <def>even_left_edges</def> <sym>&lt;&lt;</sym> <def></def><num>4</num><def></def><sym>;</sym><br />
<def></def><kwb>const long long</kwb> <def>odd_right_edges</def> <sym>=</sym> <def>odd_left_edges</def> <sym>&lt;&lt;</sym> <def></def><num>4</num><def></def><sym>;</sym><br />
<def></def><kwb>const long long</kwb> <def>right_edges</def> <sym>=</sym> <def>left_edges</def> <sym>&lt;&lt;</sym> <def></def><num>4</num><def></def><sym>;</sym><br />
<def></def><kwb>const long long</kwb> <def>top_edge</def> <sym>=</sym> <def>row_masks</def><sym>[</sym><def></def><num>0</num><def></def><sym>];</sym><br />
<def></def><kwb>const long long</kwb> <def>bottom_edge</def> <sym>=</sym> <def>row_masks</def><sym>[</sym><def></def><num>9</num><def></def><sym>];</sym><br />
<def></def><br />
<kwb>const long long</kwb> <def>illegal_move_masks</def><sym>[</sym><def></def><num>6</num><def></def><sym>] = {</sym><br />
<def>   left_edges</def><sym>,</sym> <def>right_edges</def><sym>,</sym><br />
<def>   bottom_edge</def> <sym>|</sym> <def>even_left_edges</def><sym>,</sym> <def>bottom_edge</def> <sym>|</sym> <def>odd_right_edges</def><sym>,</sym><br />
<def>   top_edge</def> <sym>|</sym> <def>even_left_edges</def><sym>,</sym> <def>top_edge</def> <sym>|</sym> <def>odd_right_edges</def> <sym>};</sym><br />
<def></def><br />
<slc>// mapping and bit manipulation</slc><br />
<def></def><kwc>inline</kwc> <def></def><kwb>int</kwb> <def></def><kwd>location_of</kwd><def></def><sym>(</sym> <def></def><kwb>int</kwb> <def>row</def><sym>,</sym> <def></def><kwb>int</kwb> <def>col</def><sym>) {</sym> <def></def><kwa>return</kwa> <def>row</def> <sym>*</sym> <def></def><num>5</num> <def></def><sym>+</sym> <def>col</def><sym>; }</sym><br />
<def></def><kwc>inline</kwc> <def></def><kwb>int</kwb> <def></def><kwd>row_of</kwd><def></def><sym>(</sym> <def></def><kwb>int</kwb> <def>location</def><sym>) {</sym> <def></def><kwa>return</kwa> <def>location</def> <sym>/</sym> <def></def><num>5</num><def></def><sym>; }</sym><br />
<def></def><kwc>inline</kwc> <def></def><kwb>int</kwb> <def></def><kwd>col_of</kwd><def></def><sym>(</sym> <def></def><kwb>int</kwb> <def>location</def><sym>) {</sym> <def></def><kwa>return</kwa> <def>location</def> <sym>%</sym> <def></def><num>5</num><def></def><sym>; }</sym><br />
<def></def><kwc>inline</kwc> <def></def><kwb>long long</kwb> <def></def><kwd>get_bit</kwd><def></def><sym>(</sym> <def></def><kwb>long long</kwb> <def>value</def><sym>,</sym> <def></def><kwb>int</kwb> <def>pos</def><sym>) {</sym> <def></def><kwa>return</kwa> <def>value</def> <sym>&amp; (</sym><def>BIT</def> <sym>&lt;&lt;</sym> <def>pos</def><sym>); }</sym><br />
<def></def><kwc>inline</kwc> <def></def><kwb>long long</kwb> <def></def><kwd>get_bit</kwd><def></def><sym>(</sym> <def></def><kwb>long long</kwb> <def>value</def><sym>,</sym> <def></def><kwb>int</kwb> <def>row</def><sym>,</sym> <def></def><kwb>int</kwb> <def>col</def><sym>) {</sym> <def></def><kwa>return</kwa> <def>value</def> <sym>&amp; (</sym><def>BIT</def> <sym>&lt;&lt;</sym> <def></def><kwd>location_of</kwd><def></def><sym>(</sym><def>row</def><sym>,</sym> <def>col</def><sym>)); }</sym><br />
<def></def><kwc>inline</kwc> <def></def><kwb>long long</kwb> <def></def><kwd>has_bit</kwd><def></def><sym>(</sym> <def></def><kwb>long long</kwb> <def>value</def><sym>,</sym> <def></def><kwb>int</kwb> <def>pos</def><sym>) {</sym> <def></def><kwa>return</kwa> <def></def><kwd>get_bit</kwd><def></def><sym>(</sym><def>value</def><sym>,</sym> <def>pos</def><sym>)</sym> <def>?</def> <kwa>true</kwa> <def></def><sym>:</sym> <def></def><kwa>false</kwa><def></def><sym>; }</sym><br />
<def></def><kwc>inline</kwc> <def></def><kwb>long long</kwb> <def></def><kwd>has_bit</kwd><def></def><sym>(</sym> <def></def><kwb>long long</kwb> <def>value</def><sym>,</sym> <def></def><kwb>int</kwb> <def>row</def><sym>,</sym> <def></def><kwb>int</kwb> <def>col</def><sym>) {</sym> <def></def><kwa>return</kwa> <def></def><kwd>get_bit</kwd><def></def><sym>(</sym><def>value</def><sym>,</sym> <def>row</def><sym>,</sym> <def>col</def><sym>)</sym> <def>?</def> <kwa>true</kwa> <def></def><sym>:</sym> <def></def><kwa>false</kwa><def></def><sym>;  }</sym><br />
<def></def><kwc>inline</kwc> <def></def><kwb>void</kwb> <def></def><kwd>set_bit</kwd><def></def><sym>(</sym> <def></def><kwb>long long</kwb> <def></def><sym>&amp;</sym><def>value</def><sym>,</sym> <def></def><kwb>int</kwb> <def>pos</def><sym>) {</sym> <def>value</def> <sym>|= (</sym><def>BIT</def> <sym>&lt;&lt;</sym> <def>pos</def><sym>); }</sym><br />
<def></def><kwc>inline</kwc> <def></def><kwb>void</kwb> <def></def><kwd>set_bit</kwd><def></def><sym>(</sym> <def></def><kwb>long long</kwb> <def></def><sym>&amp;</sym><def>value</def><sym>,</sym> <def></def><kwb>int</kwb> <def>row</def><sym>,</sym> <def></def><kwb>int</kwb> <def>col</def><sym>) {</sym> <def>value</def> <sym>|= (</sym><def>BIT</def> <sym>&lt;&lt;</sym> <def></def><kwd>location_of</kwd><def></def><sym>(</sym><def>row</def><sym>,</sym> <def>col</def><sym>)); }</sym><br />
<def></def><kwc>inline</kwc> <def></def><kwb>int</kwb> <def></def><kwd>get_row</kwd><def></def><sym>(</sym> <def></def><kwb>long long</kwb> <def>mask</def><sym>,</sym> <def></def><kwb>int</kwb> <def>row</def><sym>) {</sym> <def></def><kwa>return</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb><def></def><sym>)((</sym><def>mask</def> <sym>&gt;&gt; (</sym><def>row</def> <sym>*</sym> <def></def><num>5</num><def></def><sym>)) &amp;</sym> <def>row_mask</def><sym>); }</sym><br />
<def></def><br />
<kwc>inline</kwc> <def></def><kwb>long long</kwb> <def></def><kwd>shift_east</kwd><def></def><sym>(</sym> <def></def><kwb>const long long</kwb> <def>mask</def><sym>) {</sym> <def></def><kwa>return</kwa> <def>mask</def> <sym>&lt;&lt;</sym> <def></def><num>1</num><def></def><sym>; }</sym><br />
<def></def><kwc>inline</kwc> <def></def><kwb>long long</kwb> <def></def><kwd>shift_west</kwd><def></def><sym>(</sym> <def></def><kwb>const long long</kwb> <def>mask</def><sym>) {</sym> <def></def><kwa>return</kwa> <def>mask</def> <sym>&gt;&gt;</sym> <def></def><num>1</num><def></def><sym>; }</sym><br />
<def></def><kwc>inline</kwc> <def></def><kwb>long long</kwb> <def></def><kwd>shift_nw</kwd><def></def><sym>(</sym> <def></def><kwb>const long long</kwb> <def>mask</def><sym>) {</sym> <def></def><kwa>return</kwa> <def></def><sym>((</sym><def>mask</def> <sym>&amp;</sym> <def>all_even_rows</def><sym>) &gt;&gt;</sym> <def></def><num>6</num><def></def><sym>) | ((</sym><def>mask</def> <sym>&amp;</sym> <def>all_odd_rows</def><sym>) &gt;&gt;</sym> <def></def><num>5</num><def></def><sym>); }</sym><br />
<def></def><kwc>inline</kwc> <def></def><kwb>long long</kwb> <def></def><kwd>shift_ne</kwd><def></def><sym>(</sym> <def></def><kwb>const long long</kwb> <def>mask</def><sym>) {</sym> <def></def><kwa>return</kwa> <def></def><sym>((</sym><def>mask</def> <sym>&amp;</sym> <def>all_even_rows</def><sym>) &gt;&gt;</sym> <def></def><num>5</num><def></def><sym>) | ((</sym><def>mask</def> <sym>&amp;</sym> <def>all_odd_rows</def><sym>) &gt;&gt;</sym> <def></def><num>4</num><def></def><sym>); }</sym><br />
<def></def><kwc>inline</kwc> <def></def><kwb>long long</kwb> <def></def><kwd>shift_sw</kwd><def></def><sym>(</sym> <def></def><kwb>const long long</kwb> <def>mask</def><sym>) {</sym> <def></def><kwa>return</kwa> <def></def><sym>((</sym><def>mask</def> <sym>&amp;</sym> <def>all_even_rows</def><sym>) &lt;&lt;</sym> <def></def><num>4</num><def></def><sym>) | ((</sym><def>mask</def> <sym>&amp;</sym> <def>all_odd_rows</def><sym>) &lt;&lt;</sym> <def></def><num>5</num><def></def><sym>); }</sym><br />
<def></def><kwc>inline</kwc> <def></def><kwb>long long</kwb> <def></def><kwd>shift_se</kwd><def></def><sym>(</sym> <def></def><kwb>const long long</kwb> <def>mask</def><sym>) {</sym> <def></def><kwa>return</kwa> <def></def><sym>((</sym><def>mask</def> <sym>&amp;</sym> <def>all_even_rows</def><sym>) &lt;&lt;</sym> <def></def><num>5</num><def></def><sym>) | ((</sym><def>mask</def> <sym>&amp;</sym> <def>all_odd_rows</def><sym>) &lt;&lt;</sym> <def></def><num>6</num><def></def><sym>); }</sym><br />
<def></def><kwc>inline</kwc> <def></def><kwb>long long</kwb> <def></def><kwd>shift_mask</kwd><def></def><sym>(</sym> <def></def><kwb>int</kwb> <def>direction</def><sym>,</sym> <def></def><kwb>const long long</kwb> <def>mask</def><sym>) {</sym><br />
<def></def>   <kwa>switch</kwa> <def></def><sym>(</sym><def>direction</def><sym>) {</sym><br />
<def></def>      <kwa>case</kwa> <def>WEST</def><sym>:</sym> <def></def><kwa>return</kwa> <def></def><kwd>shift_west</kwd><def></def><sym>(</sym><def>mask</def><sym>);</sym><br />
<def></def>      <kwa>case</kwa> <def>EAST</def><sym>:</sym> <def></def><kwa>return</kwa> <def></def><kwd>shift_east</kwd><def></def><sym>(</sym><def>mask</def><sym>);</sym><br />
<def></def>      <kwa>case</kwa> <def>SW</def><sym>:</sym> <def></def><kwa>return</kwa> <def></def><kwd>shift_sw</kwd><def></def><sym>(</sym><def>mask</def><sym>);</sym><br />
<def></def>      <kwa>case</kwa> <def>SE</def><sym>:</sym> <def></def><kwa>return</kwa> <def></def><kwd>shift_se</kwd><def></def><sym>(</sym><def>mask</def><sym>);</sym><br />
<def></def>      <kwa>case</kwa> <def>NW</def><sym>:</sym> <def></def><kwa>return</kwa> <def></def><kwd>shift_nw</kwd><def></def><sym>(</sym><def>mask</def><sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def></def>   <kwa>return</kwa> <def></def><kwd>shift_ne</kwd><def></def><sym>(</sym><def>mask</def><sym>);</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<br />
<kwb>char</kwb> <def></def><sym>*</sym><def>dir_texts</def><sym>[</sym><def></def><num>6</num><def></def><sym>] =       {</sym><def></def><str>&quot;WEST&quot;</str><def></def><sym>,</sym><def></def><str>&quot;EAST&quot;</str><def></def><sym>,</sym><def></def><str>&quot;SW&quot;</str><def></def><sym>,</sym>  <def></def><str>&quot;SE&quot;</str><def></def><sym>,</sym>  <def></def><str>&quot;NW&quot;</str><def></def><sym>,</sym>  <def></def><str>&quot;NE&quot;</str><def></def>  <sym>};</sym><br />
<def></def><kwb>int</kwb> <def>rotation_adder</def><sym>[</sym><def></def><num>2</num><def></def><sym>][</sym><def></def><num>6</num><def></def><sym>] = {</sym><br />
<def></def>                     <sym>{ -</sym><def></def><num>1</num><def></def><sym>,</sym>    <def></def><num>1</num><def></def><sym>,</sym>     <def></def><num>4</num><def></def><sym>,</sym>     <def></def><num>5</num><def></def><sym>,     -</sym><def></def><num>6</num><def></def><sym>,    -</sym><def></def><num>5</num>   <def></def><sym>},</sym><br />
<def></def>                      <sym>{ -</sym><def></def><num>1</num><def></def><sym>,</sym>    <def></def><num>1</num><def></def><sym>,</sym>     <def></def><num>5</num><def></def><sym>,</sym>     <def></def><num>6</num><def></def><sym>,     -</sym><def></def><num>5</num><def></def><sym>,    -</sym><def></def><num>4</num>   <def></def><sym>} };</sym><br />
<def></def><br />
<kwb>int</kwb> <def>flip_transform</def><sym>[</sym><def></def><num>6</num><def></def><sym>] =    {</sym> <def>WEST</def><sym>,</sym>  <def>EAST</def><sym>,</sym>  <def>NW</def><sym>,</sym>    <def>NE</def><sym>,</sym>    <def>SW</def><sym>,</sym>    <def>SE</def>   <sym>};</sym><br />
<def></def><kwb>int</kwb> <def>rotate_transform</def><sym>[</sym><def></def><num>6</num><def></def><sym>] =  {</sym> <def>NW</def><sym>,</sym>    <def>SE</def><sym>,</sym>    <def>WEST</def><sym>,</sym>  <def>SW</def><sym>,</sym>    <def>NE</def><sym>,</sym>    <def>EAST</def> <sym>};</sym><br />
<def></def><kwb>int</kwb> <def>opposite_transform</def><sym>[</sym><def></def><num>6</num><def></def><sym>] ={</sym> <def>EAST</def><sym>,</sym>  <def>WEST</def><sym>,</sym>  <def>NE</def><sym>,</sym>    <def>NW</def><sym>,</sym>    <def>SE</def><sym>,</sym>    <def>SW</def>   <sym>};</sym><br />
<def></def><br />
<kwb>int</kwb> <def>two_row_mask</def> <sym>=</sym> <def></def><num>1024</num><def></def><sym>-</sym><def></def><num>1</num><def></def><sym>;</sym><br />
<def></def><kwb>int</kwb> <def>bit_counts</def><sym>[</sym><def></def><num>32</num><def></def><sym>];</sym><br />
<def></def><kwb>int</kwb> <def>first_bits</def><sym>[</sym><def></def><num>32</num><def></def><sym>];</sym><br />
<def></def><br />
<br />
<kwc>typedef</kwc> <def></def><kwb>struct</kwb> <def>MaskInfo</def> <sym>{</sym><br />
<def></def>   <kwb>bool</kwb> <def>is_legal</def><sym>[</sym><def></def><num>2</num><def></def><sym>];</sym><br />
<def></def>   <kwb>int</kwb> <def>start</def><sym>;</sym><br />
<def></def><br />
   <kwd>MaskInfo</kwd><def></def><sym>() {</sym> <def>is_legal</def><sym>[</sym><def></def><num>0</num><def></def><sym>] =</sym> <def>is_legal</def><sym>[</sym><def></def><num>1</num><def></def><sym>] =</sym> <def></def><kwa>true</kwa><def></def><sym>; }</sym><br />
<def></def>   <slc>// bool piece_allowed[10];</slc><br />
<def></def><sym>};</sym><br />
<def><br />
MaskInfo big_map</def><sym>[</sym><def></def><num>1024</num><def></def><sym>];</sym><br />
<def></def><br />
<kwb>long long</kwb> <def></def><kwd>flood_fill_actual</kwd><def></def><sym>(</sym> <def></def><kwb>long long</kwb> <def></def><sym>&amp;</sym><def>mask</def><sym>,</sym> <def></def><kwb>const int</kwb> <def>pos</def><sym>) {</sym><br />
<def></def>   <kwd>set_bit</kwd><def></def><sym>(</sym><def>mask</def><sym>,</sym> <def>pos</def><sym>);</sym><br />
<def></def>   <kwa>if</kwa> <def></def><sym>(</sym><def>pos</def> <sym>%</sym> <def></def><num>5</num> <def></def><sym>&amp;&amp; !</sym><def></def><kwd>has_bit</kwd><def></def><sym>(</sym> <def>mask</def><sym>,</sym> <def>pos</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>))</sym> <def></def><kwd>flood_fill_actual</kwd><def></def><sym>(</sym> <def>mask</def><sym>,</sym> <def>pos</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>   <kwa>if</kwa> <def></def><sym>(</sym><def>pos</def> <sym>%</sym> <def></def><num>5</num> <def></def><sym>&lt;</sym> <def></def><num>4</num> <def></def><sym>&amp;&amp; !</sym><def></def><kwd>has_bit</kwd><def></def><sym>(</sym> <def>mask</def><sym>,</sym> <def>pos</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>))</sym> <def></def><kwd>flood_fill_actual</kwd><def></def><sym>(</sym> <def>mask</def><sym>,</sym> <def>pos</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>   <kwa>if</kwa> <def></def><sym>(</sym><def>pos</def> <sym>&gt;=</sym> <def></def><num>5</num><def></def><sym>) {</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(!</sym><def></def><kwd>has_bit</kwd><def></def><sym>(</sym> <def>mask</def><sym>,</sym> <def>pos</def> <sym>-</sym> <def></def><num>5</num><def></def><sym>))</sym> <def></def><kwd>flood_fill_actual</kwd><def></def><sym>(</sym> <def>mask</def><sym>,</sym> <def>pos</def> <sym>-</sym> <def></def><num>5</num><def></def><sym>);</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>pos</def> <sym>/</sym> <def></def><num>10</num> <def></def><sym>&lt;</sym> <def></def><num>5</num><def></def><sym>) {</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>pos</def> <sym>%</sym> <def></def><num>5</num> <def></def><sym>&amp;&amp; !</sym><def></def><kwd>has_bit</kwd><def></def><sym>(</sym> <def>mask</def><sym>,</sym> <def>mask</def><sym>,</sym> <def>pos</def> <sym>-</sym> <def></def><num>6</num><def></def><sym>))</sym> <def></def><kwd>flood_fill_actual</kwd><def></def><sym>(</sym> <def>mask</def><sym>,</sym> <def>pos</def> <sym>-</sym> <def></def><num>6</num><def></def><sym>);</sym><br />
<def></def>      <sym>}</sym> <def></def><kwa>else</kwa> <def></def><sym>{</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>pos</def> <sym>%</sym> <def></def><num>5</num> <def></def><sym>&lt;</sym> <def></def><num>4</num> <def></def><sym>&amp;&amp; !</sym><def></def><kwd>has_bit</kwd><def></def><sym>(</sym> <def>mask</def><sym>,</sym> <def>mask</def><sym>,</sym> <def>pos</def> <sym>-</sym> <def></def><num>4</num><def></def><sym>))</sym> <def></def><kwd>flood_fill_actual</kwd><def></def><sym>(</sym> <def>mask</def><sym>,</sym> <def>pos</def> <sym>-</sym> <def></def><num>4</num><def></def><sym>);</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def></def>   <kwa>if</kwa> <def></def><sym>(</sym><def>pos</def> <sym>&lt;</sym> <def></def><num>45</num><def></def><sym>) {</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(!</sym><def></def><kwd>has_bit</kwd><def></def><sym>(</sym> <def>mask</def><sym>,</sym> <def>pos</def> <sym>+</sym> <def></def><num>5</num><def></def><sym>))</sym> <def></def><kwd>flood_fill_actual</kwd><def></def><sym>(</sym> <def>mask</def><sym>,</sym> <def>pos</def> <sym>+</sym> <def></def><num>5</num><def></def><sym>);</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>pos</def> <sym>/</sym> <def></def><num>10</num> <def></def><sym>&lt;</sym> <def></def><num>5</num><def></def><sym>) {</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>pos</def> <sym>%</sym> <def></def><num>5</num> <def></def><sym>&amp;&amp; !</sym><def></def><kwd>has_bit</kwd><def></def><sym>(</sym> <def>mask</def><sym>,</sym> <def>pos</def> <sym>+</sym> <def></def><num>4</num><def></def><sym>))</sym> <def></def><kwd>flood_fill_actual</kwd><def></def><sym>(</sym> <def>mask</def><sym>,</sym> <def>pos</def> <sym>+</sym> <def></def><num>4</num><def></def><sym>);</sym><br />
<def></def>      <sym>}</sym> <def></def><kwa>else</kwa> <def></def><sym>{</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>pos</def> <sym>%</sym> <def></def><num>5</num> <def></def><sym>&lt;</sym> <def></def><num>4</num> <def></def><sym>&amp;&amp; !</sym><def></def><kwd>has_bit</kwd><def></def><sym>(</sym> <def>mask</def><sym>,</sym> <def>pos</def> <sym>+</sym> <def></def><num>6</num><def></def><sym>))</sym> <def></def><kwd>flood_fill_actual</kwd><def></def><sym>(</sym> <def>mask</def><sym>,</sym> <def>pos</def> <sym>+</sym> <def></def><num>6</num><def></def><sym>);</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def></def>   <kwa>return</kwa> <def>mask</def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>long long</kwb> <def></def><kwd>flood_fill_down</kwd><def></def><sym>(</sym> <def></def><kwb>long long</kwb> <def>mask</def><sym>,</sym> <def></def><kwb>int</kwb> <def>row</def><sym>,</sym> <def></def><kwb>int</kwb> <def>col</def><sym>) {</sym><br />
<def></def>   <kwa>if</kwa> <def></def><sym>(</sym><def>row</def> <sym>&amp;</sym> <def>row_masks</def><sym>[</sym><def>row</def><sym>]) {</sym><br />
<def></def>      <kwd>flood_fill_actual</kwd><def></def><sym>(</sym> <def>mask</def><sym>,</sym> <def></def><kwd>location_of</kwd><def></def><sym>(</sym><def>row</def><sym>,</sym> <def>col</def><sym>));</sym><br />
<def></def>      <kwa>return</kwa> <def>mask</def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>while</kwa> <def></def><sym>(</sym><def>row</def> <sym>&lt;</sym> <def></def><num>10</num> <def></def><sym>&amp;&amp; !(</sym><def>mask</def> <sym>&amp;</sym> <def>row_masks</def><sym>[</sym><def>row</def><sym>])) {</sym><br />
<def>      mask</def> <sym>|=</sym> <def>row_masks</def><sym>[</sym><def>row</def><sym>];</sym><br />
<def>      row</def><sym>++;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>if</kwa> <def></def><sym>(</sym><def>row</def> <sym>&lt;</sym> <def></def><num>10</num><def></def><sym>)</sym> <def></def><kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def>row</def> <sym>*</sym> <def></def><num>5</num><def></def><sym>;</sym> <def>i</def> <sym>&lt; (</sym><def>row</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>) *</sym> <def></def><num>5</num><def></def><sym>;</sym> <def>i</def><sym>++) {</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(!</sym><def></def><kwd>has_bit</kwd><def></def><sym>(</sym> <def>mask</def><sym>,</sym> <def>i</def><sym>))</sym> <def></def><kwd>flood_fill_actual</kwd><def></def><sym>(</sym> <def>mask</def><sym>,</sym> <def>i</def><sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def></def>   <kwa>return</kwa> <def>mask</def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>long long</kwb> <def></def><kwd>flood_fill_up</kwd><def></def><sym>(</sym> <def></def><kwb>long long</kwb> <def>mask</def><sym>,</sym> <def></def><kwb>int</kwb> <def>row</def><sym>,</sym> <def></def><kwb>int</kwb> <def>col</def><sym>) {</sym><br />
<def></def>   <kwa>if</kwa> <def></def><sym>(</sym><def>row</def> <sym>&amp;</sym> <def>row_masks</def><sym>[</sym><def>row</def><sym>]) {</sym><br />
<def></def>      <kwd>flood_fill_actual</kwd><def></def><sym>(</sym> <def>mask</def><sym>,</sym> <def></def><kwd>location_of</kwd><def></def><sym>(</sym><def>row</def><sym>,</sym> <def>col</def><sym>));</sym><br />
<def></def>      <kwa>return</kwa> <def>mask</def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>while</kwa> <def></def><sym>(</sym><def>row</def> <sym>&gt;=</sym> <def></def><num>0</num> <def></def><sym>&amp;&amp; !(</sym><def>mask</def> <sym>&amp;</sym> <def>row_masks</def><sym>[</sym><def>row</def><sym>])) {</sym><br />
<def>      mask</def> <sym>|=</sym> <def>row_masks</def><sym>[</sym><def>row</def><sym>];</sym><br />
<def>      row</def><sym>--;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>if</kwa> <def></def><sym>(</sym><def>row</def> <sym>&gt;=</sym> <def></def><num>0</num><def></def><sym>)</sym> <def></def><kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def>row</def> <sym>*</sym> <def></def><num>5</num><def></def><sym>;</sym> <def>i</def> <sym>&lt; (</sym><def>row</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>) *</sym> <def></def><num>5</num><def></def><sym>;</sym> <def>i</def><sym>++) {</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(!</sym><def></def><kwd>has_bit</kwd><def></def><sym>(</sym> <def>mask</def><sym>,</sym> <def>i</def><sym>))</sym> <def></def><kwd>flood_fill_actual</kwd><def></def><sym>(</sym> <def>mask</def><sym>,</sym> <def>i</def><sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def></def>   <kwa>return</kwa> <def>mask</def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwc>typedef</kwc> <def></def><kwb>struct</kwb> <def>MaskData</def> <sym>{</sym><br />
<def></def>   <kwb>long long</kwb> <def>mask</def><sym>[</sym><def></def><num>2</num><def></def><sym>];</sym><br />
<def></def>   <kwb>int</kwb> <def>height</def><sym>;</sym><br />
<def></def>   <kwb>int</kwb> <def>min_col</def><sym>[</sym><def></def><num>2</num><def></def><sym>];</sym><br />
<def></def>   <kwb>int</kwb> <def>max_col</def><sym>[</sym><def></def><num>2</num><def></def><sym>];</sym><br />
<def></def><br />
   <kwd>MaskData</kwd><def></def><sym>() {</sym><br />
<def>      mask</def><sym>[</sym><def></def><num>0</num><def></def><sym>] =</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>      mask</def><sym>[</sym><def></def><num>1</num><def></def><sym>] =</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>      height</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>      min_col</def><sym>[</sym><def></def><num>0</num><def></def><sym>] =</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>      min_col</def><sym>[</sym><def></def><num>1</num><def></def><sym>] =</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>      max_col</def><sym>[</sym><def></def><num>0</num><def></def><sym>] =</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>      max_col</def><sym>[</sym><def></def><num>1</num><def></def><sym>] =</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>};</sym><br />
<def></def><br />
<kwc>typedef</kwc> <def></def><kwb>struct</kwb> <def>RotationData</def> <sym>{</sym><br />
<def></def>   <kwb>int</kwb> <def>mask</def><sym>;</sym><br />
<def></def>   <kwb>int</kwb> <def>iMask</def><sym>;</sym><br />
<def></def>   <kwb>int</kwb> <def>cMask</def><sym>;</sym><br />
<def></def>   <kwb>int</kwb> <def>row</def><sym>;</sym><br />
<def></def>   <kwb>int</kwb> <def>positions</def><sym>[</sym><def></def><num>5</num><def></def><sym>];</sym><br />
<def></def>   <kwb>int</kwb> <def>number</def><sym>;</sym><br />
<def></def><sym>};</sym><br />
<def></def><br />
<kwb>void</kwb> <def></def><kwd>print_mask</kwd><def></def><sym>(</sym> <def></def><kwb>long long</kwb> <def>mask</def><sym>) {</sym><br />
<def></def>   <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>row</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>row</def> <sym>&lt;</sym> <def></def><num>10</num><def></def><sym>;</sym> <def>row</def><sym>++) {</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>row</def> <sym>%</sym> <def></def><num>2</num><def></def><sym>)</sym> <def>cout</def> <sym>&lt;&lt;</sym> <def></def><str>&quot; &quot;</str><def></def><sym>;</sym><br />
<def></def>      <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>col</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>col</def> <sym>&lt;</sym> <def></def><num>5</num><def></def><sym>;</sym> <def>col</def><sym>++) {</sym><br />
<def>         cout</def> <sym>&lt;&lt; (</sym><def></def><kwd>get_bit</kwd><def></def><sym>(</sym> <def>mask</def><sym>,</sym> <def>row</def><sym>,</sym> <def>col</def><sym>)</sym><def>?</def><str>&quot;1&quot;</str><def></def><sym>:</sym><def></def><str>&quot;0&quot;</str><def></def><sym>) &lt;&lt;</sym> <def></def><str>&quot; &quot;</str><def></def><sym>;</sym><br />
<def></def>      <sym>}</sym><br />
<def>      cout</def> <sym>&lt;&lt;</sym> <def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def>   cout</def> <sym>&lt;&lt;</sym> <def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwc>class</kwc> <def>LList</def> <sym>{</sym><br />
<def></def>   <kwc>public</kwc><def></def><sym>:</sym><br />
<def>      LList</def> <sym>*</sym><def>next</def><sym>;</sym><br />
<def></def>      <kwd>LList</kwd><def></def><sym>() {</sym> <def>next</def> <sym>=</sym> <def>NULL</def><sym>; }</sym><br />
<def></def><sym>};</sym><br />
<def></def><br />
<kwb>struct</kwb> <def>RotationSet</def> <sym>{</sym><br />
<def></def>   <kwb>int</kwb> <def>size</def><sym>;</sym><br />
<def>   RotationData rotations</def><sym>[</sym><def></def><num>12</num><def></def><sym>];</sym><br />
<def></def><br />
   <kwd>RotationSet</kwd><def></def><sym>() {</sym> <def>size</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>; }</sym><br />
<def></def><br />
   <kwb>void</kwb> <def></def><kwd>add</kwd><def></def><sym>(</sym> <def>RotationData</def> <sym>&amp;</sym><def>data</def><sym>) {</sym> <def>rotations</def><sym>[</sym> <def>size</def><sym>] =</sym> <def>data</def><sym>;</sym> <def>size</def><sym>++; }</sym><br />
<def></def><sym>};</sym><br />
<def></def><br />
<kwc>class</kwc> <def>PieceData</def> <sym>:</sym> <def></def><kwc>public</kwc> <def>LList</def> <sym>{</sym><br />
<def></def>   <kwc>private</kwc><def></def><sym>:</sym><br />
<def></def>      <kwb>void</kwb> <def></def><kwd>transform</kwd><def></def><sym>(</sym> <def></def><kwb>const int</kwb> <def>matrix</def> <sym>[],</sym> <def>vector</def><sym>&lt;</sym><def></def><kwb>int</kwb><def></def><sym>&gt; &amp;</sym><def>list</def> <sym>) {</sym><br />
<def></def>         <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>list</def><sym>.</sym><def></def><kwd>size</kwd><def></def><sym>();</sym> <def>i</def><sym>++) {</sym><br />
<def>            list</def><sym>[</sym><def>i</def><sym>] =</sym> <def>matrix</def><sym>[</sym><def>list</def><sym>[</sym><def>i</def><sym>]];</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><br />
      <kwb>int</kwb> <def></def><kwd>get_offset</kwd><def></def><sym>(</sym> <def>vector</def><sym>&lt;</sym><def></def><kwb>int</kwb><def></def><sym>&gt; &amp;</sym><def>directions</def> <sym>) {</sym><br />
<def></def>         <kwb>int</kwb> <def>offset</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>         <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>directions</def><sym>.</sym><def></def><kwd>size</kwd><def></def><sym>();</sym> <def>i</def><sym>++) {</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>directions</def><sym>[</sym><def>i</def><sym>] ==</sym> <def>SW</def> <sym>||</sym> <def>directions</def><sym>[</sym><def>i</def><sym>] ==</sym> <def>NW</def> <sym>||</sym> <def>directions</def><sym>[</sym><def>i</def><sym>] ==</sym> <def>WEST</def><sym>)</sym> <def>offset</def><sym>++;</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>directions</def><sym>[</sym><def>i</def><sym>] ==</sym> <def>NW</def> <sym>||</sym> <def>directions</def><sym>[</sym><def>i</def><sym>] ==</sym> <def>NE</def><sym>)</sym> <def>offset</def> <sym>+=</sym> <def></def><num>5</num><def></def><sym>;</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>         <kwa>return</kwa> <def>offset</def><sym>;</sym><br />
<def></def>      <sym>}</sym><br />
<def><br />
      MaskData</def> <kwd>mask_for_directions</kwd><def></def><sym>(</sym> <def>vector</def><sym>&lt;</sym><def></def><kwb>int</kwb><def></def><sym>&gt; &amp;</sym><def>directions</def><sym>) {</sym><br />
<def>         MaskData data</def><sym>;</sym><br />
<def></def><br />
         <kwb>long long</kwb> <def>mask</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>         <kwb>int</kwb> <def>start_offset</def> <sym>=</sym> <def></def><kwd>get_offset</kwd><def></def><sym>(</sym> <def>directions</def><sym>);</sym><br />
<def></def>         <kwb>int</kwb> <def>location</def> <sym>=</sym> <def>start_offset</def><sym>;</sym><br />
<def></def>         <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>directions</def><sym>.</sym><def></def><kwd>size</kwd><def></def><sym>();</sym> <def>i</def><sym>++) {</sym><br />
<def></def>             <kwd>set_bit</kwd><def></def><sym>(</sym> <def>mask</def><sym>,</sym> <def>location</def><sym>);</sym><br />
<def></def>             <kwb>int</kwb> <def>addition</def> <sym>=</sym> <def>rotation_adder</def><sym>[ (</sym><def>location</def> <sym>/</sym> <def></def><num>5</num><def></def><sym>) %</sym> <def></def><num>2</num> <def></def><sym>][</sym> <def>directions</def><sym>[</sym><def>i</def><sym>] ];</sym><br />
<def></def><slc>//             int row = location / 5;</slc><br />
<def></def><slc>//             int other_row = (location + addition) / 5;</slc><br />
<def></def><slc>//             char * error = NULL;</slc><br />
<def></def><slc>//             if ((directions[i] == SW || directions[i] == SE) &amp;&amp; other_row != row + 1) error = &quot;ERROR moving down!&quot;;</slc><br />
<def></def><slc>//             if ((directions[i] == NW || directions[i] == NE) &amp;&amp; other_row != row - 1) error =  &quot;ERROR moving up!&quot;;</slc><br />
<def></def><slc>//             if ((directions[i] == EAST || directions[i] == WEST) &amp;&amp;row != other_row) error = &quot;ERROR moving to the side!&quot;;</slc><br />
<def></def><slc>//             if (error != NULL) {</slc><br />
<def></def><slc>//               int opposite = opposite_transform[directions[i]];</slc><br />
<def></def><slc>//               if (illegal_move_masks[opposite] &amp; mask) {</slc><br />
<def></def><slc>//                  cout &lt;&lt; error &lt;&lt; &quot; directions = &quot;;</slc><br />
<def></def><slc>//                  for (int j = 0; j &lt; directions.size(); j++) cout &lt;&lt; dir_texts[directions[j]] &lt;&lt; &quot; &quot;;</slc><br />
<def></def><slc>//                  cout &lt;&lt; &quot; [[[ current direction = &quot; &lt;&lt; dir_texts[directions[i]] &lt;&lt; &quot;]]]&quot; &lt;&lt; &quot; opposite unavailable: &quot; &lt;&lt; dir_texts[opposite] &lt;&lt; &quot;\n&quot;;</slc><br />
<def></def><slc>//                  cout &lt;&lt; &quot;row = &quot; &lt;&lt; row &lt;&lt; &quot;, other row = &quot; &lt;&lt; other_row &lt;&lt;&quot;\n&quot;;</slc><br />
<def></def><slc>//                  print_mask( mask);</slc><br />
<def></def><slc>//               } else {</slc><br />
<def></def><slc>//                  addition = 0;</slc><br />
<def></def><slc>//                  mask = shift_mask( opposite, mask);</slc><br />
<def></def><slc>//               }</slc><br />
<def></def><slc>//             }</slc><br />
<def>             location</def> <sym>+=</sym> <def>addition</def><sym>;</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>         <kwd>set_bit</kwd><def></def><sym>(</sym> <def>mask</def><sym>,</sym> <def>location</def><sym>);</sym><br />
<def></def><br />
         <kwa>while</kwa> <def></def><sym>(!(</sym><def>mask</def> <sym>&amp;</sym> <def>top_edge</def><sym>)) {</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>illegal_move_masks</def><sym>[</sym><def>NW</def><sym>] &amp;</sym> <def>mask</def><sym>) {</sym><br />
<def></def>               <kwa>if</kwa> <def></def><sym>(</sym><def>illegal_move_masks</def><sym>[</sym><def>NE</def><sym>] &amp;</sym> <def>mask</def><sym>)</sym> <def>cout</def> <sym>&lt;&lt;</sym> <def></def><str>&quot;ERROR SHIFTING UPWARD</str><esc>\n</esc><str>&quot;</str><def></def><sym>;</sym><br />
<def></def>               <kwa>else</kwa> <def>mask</def> <sym>=</sym> <def></def><kwd>shift_ne</kwd><def></def><sym>(</sym><def>mask</def><sym>);</sym><br />
<def></def>            <sym>}</sym> <def></def><kwa>else</kwa> <def>mask</def> <sym>=</sym> <def></def><kwd>shift_nw</kwd><def></def><sym>(</sym><def>mask</def><sym>);</sym><br />
<def></def>         <sym>}</sym><br />
<def></def><br />
         <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>row</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>mask</def> <sym>&amp;</sym> <def>row_masks</def><sym>[</sym><def>row</def><sym>];</sym> <def>row</def><sym>++)</sym> <def>data</def><sym>.</sym><def>height</def><sym>++;</sym><br />
<def></def>         <kwa>while</kwa> <def></def><sym>(!(</sym><def>mask</def> <sym>&amp;</sym> <def>right_edges</def><sym>))</sym> <def>mask</def> <sym>=</sym> <def></def><kwd>shift_east</kwd><def></def><sym>(</sym><def>mask</def><sym>);</sym><br />
<def></def>         <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>col_on</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>; !</sym><def></def><kwd>has_bit</kwd><def></def><sym>(</sym><def>mask</def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>col_on</def><sym>);</sym> <def>col_on</def><sym>++)</sym> <def>data</def><sym>.</sym><def>max_col</def><sym>[</sym><def></def><num>0</num><def></def><sym>]++;</sym><br />
<def></def>         <kwa>while</kwa> <def></def><sym>(!(</sym><def>mask</def> <sym>&amp;</sym> <def>left_edges</def><sym>))</sym> <def>mask</def> <sym>=</sym> <def></def><kwd>shift_west</kwd><def></def><sym>(</sym><def>mask</def><sym>);</sym><br />
<def></def>         <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>col_on</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>; !</sym><def></def><kwd>has_bit</kwd><def></def><sym>(</sym><def>mask</def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>col_on</def><sym>);</sym> <def>col_on</def><sym>++)</sym> <def>data</def><sym>.</sym><def>min_col</def><sym>[</sym><def></def><num>0</num><def></def><sym>]++;</sym><br />
<def>         data</def><sym>.</sym><def>mask</def><sym>[</sym><def></def><num>0</num><def></def><sym>] =</sym> <def>mask</def> <sym>&gt;&gt;</sym> <def>data</def><sym>.</sym><def>min_col</def><sym>[</sym><def></def><num>0</num><def></def><sym>];</sym><br />
<def></def><br />
         <kwa>if</kwa> <def></def><sym>(</sym><def>mask</def> <sym>&amp;</sym> <def>illegal_move_masks</def><sym>[</sym><def>SE</def><sym>]) {</sym><br />
<def>            cout</def> <sym>&lt;&lt;</sym> <def></def><str>&quot;ERROR SHIFTING DOWNWARD</str><esc>\n</esc><str>&quot;</str><def></def><sym>;</sym><br />
<def></def>         <sym>}</sym> <def></def><kwa>else</kwa> <def></def><sym>{</sym><br />
<def>            mask</def> <sym>=</sym> <def></def><kwd>shift_se</kwd><def></def><sym>(</sym> <def>mask</def><sym>);</sym><br />
<def></def>            <kwa>while</kwa> <def></def><sym>(!(</sym><def>mask</def> <sym>&amp;</sym> <def>right_edges</def><sym>))</sym> <def>mask</def> <sym>=</sym> <def></def><kwd>shift_east</kwd><def></def><sym>(</sym><def>mask</def><sym>);</sym><br />
<def></def>            <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>col_on</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>; !</sym><def></def><kwd>get_bit</kwd><def></def><sym>(</sym><def>mask</def><sym>,</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>col_on</def><sym>);</sym> <def>col_on</def><sym>++)</sym> <def>data</def><sym>.</sym><def>max_col</def><sym>[</sym><def></def><num>1</num><def></def><sym>]++;</sym><br />
<def></def>            <kwa>while</kwa> <def></def><sym>(!(</sym><def>mask</def> <sym>&amp;</sym> <def>left_edges</def><sym>))</sym> <def>mask</def> <sym>=</sym> <def></def><kwd>shift_west</kwd><def></def><sym>(</sym><def>mask</def><sym>);</sym><br />
<def></def>            <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>col_on</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>; !</sym><def></def><kwd>get_bit</kwd><def></def><sym>(</sym><def>mask</def><sym>,</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>col_on</def><sym>);</sym> <def>col_on</def><sym>++)</sym> <def>data</def><sym>.</sym><def>min_col</def><sym>[</sym><def></def><num>1</num><def></def><sym>]++;</sym><br />
<def>            data</def><sym>.</sym><def>mask</def><sym>[</sym><def></def><num>1</num><def></def><sym>] =</sym> <def>mask</def> <sym>&gt;&gt; (</sym><def>data</def><sym>.</sym><def>min_col</def><sym>[</sym><def></def><num>1</num><def></def><sym>] +</sym> <def></def><num>5</num><def></def><sym>);</sym><br />
<def></def>         <sym>}</sym><br />
<def></def><br />
         <slc>//cout &lt;&lt; &quot;\nDIRECTIONS: &quot; &lt;&lt; directions[0] &lt;&lt; directions[1] &lt;&lt; directions[2] &lt;&lt; directions[3] &lt;&lt; &quot; [&quot; &lt;&lt; start_offset &lt;&lt; &quot;]\n&quot;;</slc><br />
<def></def>         <slc>//cout &lt;&lt; &quot;height = &quot; &lt;&lt; data.height &lt;&lt; &quot;, min[0] = &quot; &lt;&lt; data.min_col[0] &lt;&lt; &quot;, max[0] = &quot; &lt;&lt; data.max_col[0] &lt;&lt;</slc><br />
<def></def>         <slc>//   &quot;, min[1] = &quot; &lt;&lt; data.min_col[1] &lt;&lt; &quot;, max[1] = &quot; &lt;&lt; data.max_col[1] &lt;&lt; &quot;\n&quot;;</slc><br />
<def></def>         <slc>//print_mask( data.mask[1]);</slc><br />
<def></def>         <slc>//exit(0);</slc><br />
<def></def><br />
         <kwa>return</kwa> <def>data</def><sym>;</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><br />
      <kwb>void</kwb> <def></def><kwd>compute_rotation_positions</kwd><def></def><sym>(</sym> <def></def><kwb>long long</kwb> <def>board</def><sym>,</sym> <def>RotationData</def> <sym>&amp;</sym><def>rotation</def><sym>) {</sym><br />
<def></def>          <kwb>int</kwb> <def>pos</def> <sym>=</sym> <def>rotation</def><sym>.</sym><def>row</def> <sym>*</sym> <def></def><num>5</num><def></def><sym>;</sym><br />
<def></def>         <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>num</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>num</def> <sym>&lt;</sym> <def></def><num>5</num><def></def><sym>;</sym> <def>pos</def><sym>++) {</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def></def><kwd>has_bit</kwd><def></def><sym>(</sym><def>board</def><sym>,</sym> <def>pos</def><sym>)) {</sym><br />
<def>               rotation</def><sym>.</sym><def>positions</def><sym>[</sym><def>num</def><sym>] =</sym> <def>pos</def><sym>;</sym><br />
<def>               num</def><sym>++;</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><br />
      <kwb>void</kwb> <def></def><kwd>add_rotation</kwd><def></def><sym>(</sym> <def></def><kwb>long long</kwb> <def>mask</def><sym>,</sym> <def></def><kwb>int</kwb> <def>row</def><sym>,</sym> <def></def><kwb>int</kwb> <def>col</def><sym>) {</sym><br />
<def>         RotationData rotation</def><sym>;</sym><br />
<def>         rotation</def><sym>.</sym><def>row</def> <sym>=</sym> <def>row</def><sym>;</sym><br />
<def>         rotation</def><sym>.</sym><def>mask</def> <sym>= (</sym><def></def><kwb>int</kwb><def></def><sym>)(</sym><def>mask</def> <sym>&gt;&gt; (</sym><def></def><num>5</num> <def></def><sym>*</sym> <def>row</def><sym>));</sym><br />
<def>         rotation</def><sym>.</sym><def>number</def> <sym>=</sym> <def>number</def><sym>;</sym><br />
<def></def>         <kwb>long long</kwb> <def>board</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>         <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>row</def><sym>;</sym> <def>i</def><sym>++)</sym> <def>board</def> <sym>|=</sym> <def>row_masks</def><sym>[</sym><def>i</def><sym>];</sym><br />
<def></def>         <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>col</def><sym>;</sym> <def>i</def><sym>++)</sym> <def></def><kwd>set_bit</kwd><def></def><sym>(</sym> <def>board</def><sym>,</sym> <def>row</def><sym>,</sym> <def>i</def><sym>);</sym><br />
<def>         board</def> <sym>|=</sym> <def>mask</def><sym>;</sym><br />
<def></def>         <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>4</num><def></def><sym>;</sym> <def>i</def> <sym>&gt;=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def><sym>--) {</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(!</sym><def></def><kwd>has_bit</kwd><def></def><sym>(</sym> <def>board</def><sym>,</sym> <def></def><num>9</num><def></def><sym>,</sym> <def>i</def><sym>)) {</sym><br />
<def>               board</def> <sym>=</sym> <def></def><kwd>flood_fill_up</kwd><def></def><sym>(</sym> <def>board</def><sym>,</sym> <def></def><num>9</num><def></def><sym>,</sym> <def>i</def><sym>);</sym><br />
<def></def>               <kwa>break</kwa><def></def><sym>;</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>board</def> <sym>==</sym> <def>full_mask</def><sym>) {</sym><br />
<def>            rotation</def><sym>.</sym><def>iMask</def> <sym>=</sym> <def>rotation</def><sym>.</sym><def>mask</def><sym>;</sym><br />
<def>            rotation</def><sym>.</sym><def>cMask</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>         <sym>}</sym> <def></def><kwa>else</kwa> <def></def><sym>{</sym><br />
<def></def>            <kwb>int</kwb> <def>count</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>            <kwb>long long</kwb> <def>cMask</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>            <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>pos</def> <sym>=</sym> <def></def><kwd>location_of</kwd><def></def><sym>(</sym><def>row</def><sym>,</sym> <def>col</def><sym>);</sym> <def>pos</def> <sym>&lt;</sym> <def></def><num>50</num><def></def><sym>;</sym> <def>pos</def><sym>++) {</sym><br />
<def></def>               <kwa>if</kwa> <def></def><sym>(!</sym><def></def><kwd>has_bit</kwd><def></def><sym>(</sym><def>board</def><sym>,</sym><def>pos</def><sym>)) {</sym><br />
<def></def>                  <kwd>set_bit</kwd><def></def><sym>(</sym><def>cMask</def><sym>,</sym> <def>pos</def><sym>);</sym><br />
<def>                  count</def><sym>++;</sym><br />
<def></def>               <sym>}</sym><br />
<def></def>               <kwa>if</kwa> <def></def><sym>(</sym><def>count</def> <sym>&gt;=</sym> <def></def><num>5</num><def></def><sym>) {</sym><br />
<def>                  cMask</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>                  <kwa>break</kwa><def></def><sym>;</sym><br />
<def></def>               <sym>}</sym><br />
<def></def>            <sym>}</sym><br />
<def>            rotation</def><sym>.</sym><def>cMask</def> <sym>= (</sym><def></def><kwb>int</kwb><def></def><sym>)(</sym><def>cMask</def> <sym>&gt;&gt; (</sym><def></def><num>5</num> <def></def><sym>*</sym> <def>row</def><sym>));</sym><br />
<def>            rotation</def><sym>.</sym><def>iMask</def> <sym>=</sym> <def>rotation</def><sym>.</sym><def>mask</def> <sym>|</sym> <def>rotation</def><sym>.</sym><def>cMask</def><sym>;</sym><br />
<def></def>         <sym>}</sym><br />
<def></def><br />
         <kwd>compute_rotation_positions</kwd><def></def><sym>(</sym> <def>mask</def><sym>,</sym> <def>rotation</def><sym>);</sym><br />
<def>         rotation_sets</def><sym>[</sym><def>row</def><sym>][</sym><def>col</def><sym>].</sym><def></def><kwd>add</kwd><def></def><sym>(</sym> <def>rotation</def><sym>);</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><br />
      <kwb>void</kwb> <def></def><kwd>build_piece</kwd><def></def><sym>(</sym> <def>vector</def><sym>&lt;</sym><def></def><kwb>int</kwb><def></def><sym>&gt; &amp;</sym><def>directions</def><sym>) {</sym><br />
<def>         vector</def><sym>&lt;</sym><def>MaskData</def><sym>&gt;</sym> <def>base_masks</def><sym>;</sym><br />
<def></def>         <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def></def><num>2</num><def></def><sym>;</sym> <def>i</def><sym>++) {</sym><br />
<def></def>            <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>j</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>j</def> <sym>&lt;</sym> <def></def><num>6</num><def></def><sym>;</sym> <def>j</def><sym>++) {</sym><br />
<def>               base_masks</def><sym>.</sym><def></def><kwd>push_back</kwd><def></def><sym>(</sym><def></def><kwd>mask_for_directions</kwd><def></def><sym>(</sym><def>directions</def><sym>));</sym><br />
<def></def>               <kwd>transform</kwd><def></def><sym>(</sym> <def>rotate_transform</def><sym>,</sym> <def>directions</def><sym>);</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>            <kwd>transform</kwd><def></def><sym>(</sym> <def>flip_transform</def><sym>,</sym> <def>directions</def><sym>);</sym><br />
<def></def>         <sym>}</sym><br />
<def></def><br />
         <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>mask_on</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>mask_on</def> <sym>&lt;</sym> <def>base_masks</def><sym>.</sym><def></def><kwd>size</kwd><def></def><sym>();</sym> <def>mask_on</def><sym>++) {</sym><br />
<def>            MaskData data</def> <sym>=</sym> <def>base_masks</def><sym>[</sym><def>mask_on</def><sym>];</sym><br />
<def></def>            <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>row</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>row</def> <sym>&lt;= (</sym><def></def><num>10</num> <def></def><sym>-</sym> <def>data</def><sym>.</sym><def>height</def><sym>);</sym> <def>row</def><sym>++) {</sym><br />
<def></def>               <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>col</def> <sym>=</sym> <def>data</def><sym>.</sym><def>min_col</def><sym>[</sym><def>row</def> <sym>%</sym> <def></def><num>2</num><def></def><sym>];</sym> <def>col</def> <sym>&lt;=</sym> <def>data</def><sym>.</sym><def>max_col</def><sym>[</sym><def>row</def> <sym>%</sym> <def></def><num>2</num><def></def><sym>];</sym> <def>col</def><sym>++) {</sym><br />
<def></def>                  <kwb>long long</kwb> <def>mask</def> <sym>=</sym> <def>data</def><sym>.</sym><def>mask</def><sym>[</sym><def>row</def> <sym>%</sym> <def></def><num>2</num><def></def><sym>] &lt;&lt; (</sym><def>row</def> <sym>*</sym> <def></def><num>5</num> <def></def><sym>+</sym> <def>col</def><sym>);</sym><br />
<def></def>                  <kwb>long long</kwb> <def>board</def> <sym>=</sym> <def>mask</def><sym>;</sym><br />
<def></def>                  <kwa>if</kwa> <def></def><sym>(</sym> <def>row</def> <sym>&gt;=</sym> <def></def><num>3</num><def></def><sym>)</sym> <def>board</def> <sym>=</sym> <def></def><kwd>flood_fill_down</kwd><def></def><sym>(</sym> <def>board</def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>);</sym><br />
<def></def>                  <kwa>else</kwa> <def>board</def> <sym>=</sym> <def></def><kwd>flood_fill_up</kwd><def></def><sym>(</sym> <def>board</def><sym>,</sym> <def></def><num>9</num><def></def><sym>,</sym> <def></def><num>4</num><def></def><sym>);</sym><br />
<def></def>                  <kwa>if</kwa> <def></def><sym>(</sym><def>board</def> <sym>==</sym> <def>full_mask</def><sym>) {</sym><br />
<def></def>                     <kwd>add_rotation</kwd><def></def><sym>(</sym> <def>mask</def><sym>,</sym> <def>row</def><sym>,</sym> <def>col</def><sym>);</sym><br />
<def></def>                  <sym>}</sym> <def></def><kwa>else</kwa> <def></def><sym>{</sym><br />
<def></def>                     <kwb>int</kwb> <def>count</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>                     <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>t</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>t</def> <sym>&lt;</sym> <def></def><num>10</num><def></def><sym>;</sym> <def>t</def><sym>++)</sym> <def>count</def> <sym>+=</sym> <def>bit_counts</def><sym>[ (</sym><def></def><kwb>int</kwb><def></def><sym>)((</sym><def>board</def> <sym>&gt;&gt; (</sym><def>t</def> <sym>*</sym> <def></def><num>5</num><def></def><sym>)) &amp;</sym> <def>row_masks</def><sym>[</sym><def></def><num>0</num><def></def><sym>])];</sym><br />
<def></def>                     <kwa>if</kwa> <def></def><sym>(</sym><def>count</def> <sym>%</sym> <def></def><num>5</num> <def></def><sym>==</sym> <def></def><num>0</num><def></def><sym>) {</sym><br />
<def></def>                        <kwd>add_rotation</kwd><def></def><sym>(</sym> <def>mask</def><sym>,</sym> <def>row</def><sym>,</sym> <def>col</def><sym>);</sym><br />
<def></def>                     <sym>}</sym><br />
<def></def>                  <sym>}</sym><br />
<def></def>               <sym>}</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><br />
   <kwc>public</kwc><def></def><sym>:</sym><br />
<def></def>      <kwb>int</kwb> <def>number</def><sym>;</sym><br />
<def>      RotationSet rotation_sets</def><sym>[</sym><def></def><num>10</num><def></def><sym>][</sym><def></def><num>5</num><def></def><sym>];</sym><br />
<def></def><br />
      <kwd>PieceData</kwd><def></def><sym>(</sym> <def></def><kwb>int</kwb> <def>d1</def><sym>,</sym> <def></def><kwb>int</kwb> <def>d2</def><sym>,</sym> <def></def><kwb>int</kwb> <def>d3</def><sym>,</sym> <def></def><kwb>int</kwb> <def>d4</def><sym>,</sym> <def></def><kwb>int</kwb> <def>piece_number</def> <sym>) :</sym> <def></def><kwd>LList</kwd><def></def><sym>()  {</sym><br />
<def>         number</def> <sym>=</sym> <def>piece_number</def><sym>;</sym><br />
<def>         vector</def><sym>&lt;</sym><def></def><kwb>int</kwb><def></def><sym>&gt;</sym> <def>directions</def><sym>;</sym><br />
<def>         directions</def><sym>.</sym><def></def><kwd>push_back</kwd><def></def><sym>(</sym><def>d1</def><sym>);</sym><br />
<def>         directions</def><sym>.</sym><def></def><kwd>push_back</kwd><def></def><sym>(</sym><def>d2</def><sym>);</sym><br />
<def>         directions</def><sym>.</sym><def></def><kwd>push_back</kwd><def></def><sym>(</sym><def>d3</def><sym>);</sym><br />
<def>         directions</def><sym>.</sym><def></def><kwd>push_back</kwd><def></def><sym>(</sym><def>d4</def><sym>);</sym><br />
<def></def>         <kwd>build_piece</kwd><def></def><sym>(</sym> <def>directions</def><sym>);</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><br />
      <kwd>PieceData</kwd><def></def><sym>(</sym> <def></def><kwb>int</kwb> <def>d1</def><sym>,</sym> <def></def><kwb>int</kwb> <def>d2</def><sym>,</sym> <def></def><kwb>int</kwb> <def>d3</def><sym>,</sym> <def></def><kwb>int</kwb> <def>d4</def><sym>,</sym> <def></def><kwb>int</kwb> <def>d5</def><sym>,</sym> <def></def><kwb>int</kwb> <def>piece_number</def> <sym>) :</sym> <def></def><kwd>LList</kwd><def></def><sym>() {</sym><br />
<def>         number</def> <sym>=</sym> <def>piece_number</def><sym>;</sym><br />
<def>         vector</def><sym>&lt;</sym><def></def><kwb>int</kwb><def></def><sym>&gt;</sym> <def>directions</def><sym>;</sym><br />
<def>         directions</def><sym>.</sym><def></def><kwd>push_back</kwd><def></def><sym>(</sym><def>d1</def><sym>);</sym><br />
<def>         directions</def><sym>.</sym><def></def><kwd>push_back</kwd><def></def><sym>(</sym><def>d2</def><sym>);</sym><br />
<def>         directions</def><sym>.</sym><def></def><kwd>push_back</kwd><def></def><sym>(</sym><def>d3</def><sym>);</sym><br />
<def>         directions</def><sym>.</sym><def></def><kwd>push_back</kwd><def></def><sym>(</sym><def>d4</def><sym>);</sym><br />
<def>         directions</def><sym>.</sym><def></def><kwd>push_back</kwd><def></def><sym>(</sym><def>d5</def><sym>);</sym><br />
<def></def>         <kwd>build_piece</kwd><def></def><sym>(</sym> <def>directions</def><sym>);</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><sym>};</sym><br />
<def></def><br />
<slc>// GOLBAL VARIABLES MUH-HA-HA-HA</slc><br />
<def>LList</def> <sym>*</sym><def>head</def><sym>;</sym><br />
<def>LList</def> <sym>*</sym><def>tail</def><sym>;</sym><br />
<def></def><br />
<kwb>int</kwb> <def>num_placed</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><kwb>int</kwb> <def>num_found</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><kwb>int</kwb> <def>num_to_find</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><kwb>int</kwb> <def>tries</def><sym>[</sym><def></def><num>10</num><def></def><sym>] = {</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>0</num> <def></def><sym>};</sym><br />
<def>RotationData</def> <sym>*</sym><def>active_rotations</def><sym>[</sym><def></def><num>10</num><def></def><sym>];</sym><br />
<def>set</def><sym>&lt;</sym><def>string</def><sym>&gt;</sym> <def>found_boards</def><sym>;</sym><br />
<def></def><br />
<kwb>void</kwb> <def></def><kwd>create_piece_maps</kwd><def></def><sym>() {</sym><br />
<def>   tail</def> <sym>=</sym> <def>head</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>PieceData</kwd><def></def><sym>(</sym> <def>NW</def><sym>,</sym> <def>NE</def><sym>,</sym> <def>EAST</def><sym>,</sym> <def>EAST</def><sym>,</sym>  <def></def><num>2</num><def></def><sym>);</sym><br />
<def>   tail</def><sym>-&gt;</sym><def>next</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>PieceData</kwd><def></def><sym>(</sym> <def>NE</def><sym>,</sym> <def>SE</def><sym>,</sym> <def>EAST</def><sym>,</sym> <def>NE</def><sym>,</sym>  <def></def><num>7</num><def></def><sym>);</sym><br />
<def>   tail</def> <sym>=</sym> <def>tail</def><sym>-&gt;</sym><def>next</def><sym>;</sym><br />
<def>   tail</def><sym>-&gt;</sym><def>next</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>PieceData</kwd><def></def><sym>(</sym> <def>NE</def><sym>,</sym> <def>EAST</def><sym>,</sym> <def>NE</def><sym>,</sym> <def>NW</def><sym>,</sym>  <def></def><num>1</num><def></def><sym>);</sym><br />
<def>   tail</def> <sym>=</sym> <def>tail</def><sym>-&gt;</sym><def>next</def><sym>;</sym><br />
<def>   tail</def><sym>-&gt;</sym><def>next</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>PieceData</kwd><def></def><sym>(</sym> <def>EAST</def><sym>,</sym> <def>SW</def><sym>,</sym> <def>SW</def><sym>,</sym> <def>SE</def><sym>,</sym>  <def></def><num>6</num><def></def><sym>);</sym><br />
<def>   tail</def> <sym>=</sym> <def>tail</def><sym>-&gt;</sym><def>next</def><sym>;</sym><br />
<def>   tail</def><sym>-&gt;</sym><def>next</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>PieceData</kwd><def></def><sym>(</sym> <def>EAST</def><sym>,</sym> <def>NE</def><sym>,</sym> <def>SE</def><sym>,</sym> <def>NE</def><sym>,</sym>  <def></def><num>5</num><def></def><sym>);</sym><br />
<def>   tail</def> <sym>=</sym> <def>tail</def><sym>-&gt;</sym><def>next</def><sym>;</sym><br />
<def>   tail</def><sym>-&gt;</sym><def>next</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>PieceData</kwd><def></def><sym>(</sym> <def>EAST</def><sym>,</sym> <def>EAST</def><sym>,</sym> <def>EAST</def><sym>,</sym> <def>SE</def><sym>,</sym>  <def></def><num>0</num><def></def><sym>);</sym><br />
<def>   tail</def> <sym>=</sym> <def>tail</def><sym>-&gt;</sym><def>next</def><sym>;</sym><br />
<def>   tail</def><sym>-&gt;</sym><def>next</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>PieceData</kwd><def></def><sym>(</sym> <def>NE</def><sym>,</sym> <def>NW</def><sym>,</sym> <def>SE</def><sym>,</sym> <def>EAST</def><sym>,</sym> <def>SE</def><sym>,</sym>  <def></def><num>4</num><def></def><sym>);</sym><br />
<def>   tail</def> <sym>=</sym> <def>tail</def><sym>-&gt;</sym><def>next</def><sym>;</sym><br />
<def>   tail</def><sym>-&gt;</sym><def>next</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>PieceData</kwd><def></def><sym>(</sym> <def>SE</def><sym>,</sym> <def>SE</def><sym>,</sym> <def>SE</def><sym>,</sym> <def>WEST</def><sym>,</sym>  <def></def><num>9</num><def></def><sym>);</sym><br />
<def>   tail</def> <sym>=</sym> <def>tail</def><sym>-&gt;</sym><def>next</def><sym>;</sym><br />
<def>   tail</def><sym>-&gt;</sym><def>next</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>PieceData</kwd><def></def><sym>(</sym> <def>SE</def><sym>,</sym> <def>SE</def><sym>,</sym> <def>EAST</def><sym>,</sym> <def>SE</def><sym>,</sym>  <def></def><num>8</num><def></def><sym>);</sym><br />
<def>   tail</def> <sym>=</sym> <def>tail</def><sym>-&gt;</sym><def>next</def><sym>;</sym><br />
<def>   tail</def><sym>-&gt;</sym><def>next</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>PieceData</kwd><def></def><sym>(</sym> <def>EAST</def><sym>,</sym> <def>EAST</def><sym>,</sym> <def>SW</def><sym>,</sym> <def>SE</def><sym>,</sym>  <def></def><num>3</num><def></def><sym>);</sym><br />
<def>   tail</def> <sym>=</sym> <def>tail</def><sym>-&gt;</sym><def>next</def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>void</kwb> <def></def><kwd>print_board</kwd><def></def><sym>(</sym> <def>string board_string</def><sym>) {</sym><br />
<def></def>   <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>row</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>row</def> <sym>&lt;</sym> <def></def><num>10</num><def></def><sym>;</sym> <def>row</def><sym>++) {</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>row</def> <sym>%</sym> <def></def><num>2</num><def></def><sym>)</sym> <def>cout</def> <sym>&lt;&lt;</sym> <def></def><str>&quot; &quot;</str><def></def><sym>;</sym><br />
<def></def>      <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>col</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>col</def> <sym>&lt;</sym> <def></def><num>5</num><def></def><sym>;</sym> <def>col</def><sym>++)</sym> <def>cout</def> <sym>&lt;&lt;</sym> <def>board_string</def><sym>[</sym><def>row</def> <sym>*</sym> <def></def><num>5</num> <def></def><sym>+</sym> <def>col</def><sym>] &lt;&lt;</sym> <def></def><str>&quot; &quot;</str><def></def><sym>;</sym><br />
<def>      cout</def> <sym>&lt;&lt;</sym> <def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def>   cout</def> <sym>&lt;&lt;</sym> <def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>void</kwb> <def></def><kwd>print_results</kwd><def></def><sym>() {</sym><br />
<def>   cout</def> <sym>&lt;&lt;</sym> <def>num_found</def> <sym>&lt;&lt;</sym> <def></def><str>&quot; solutions found</str><esc>\n\n</esc><str>&quot;</str><def></def><sym>;</sym><br />
<def></def>   <kwd>print_board</kwd><def></def><sym>( *</sym><def>found_boards</def><sym>.</sym><def></def><kwd>begin</kwd><def></def><sym>());</sym><br />
<def></def>   <kwd>print_board</kwd><def></def><sym>( *</sym><def>found_boards</def><sym>.</sym><def></def><kwd>rbegin</kwd><def></def><sym>());</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>void</kwb> <def></def><kwd>add_board_string</kwd><def></def><sym>(</sym> <def></def><kwb>const char</kwb> <def></def><sym>*</sym> <def>board_string</def><sym>) {</sym><br />
<def>   string s</def> <sym>=</sym> <def>board_string</def><sym>;</sym><br />
<def></def>   <kwa>if</kwa> <def></def><sym>(</sym><def>found_boards</def><sym>.</sym><def></def><kwd>count</kwd><def></def><sym>(</sym><def>s</def><sym>) ==</sym> <def></def><num>0</num><def></def><sym>) {</sym><br />
<def>      found_boards</def><sym>.</sym><def></def><kwd>insert</kwd><def></def><sym>(</sym><def>s</def><sym>);</sym><br />
<def>      num_found</def><sym>++;</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>num_to_find</def> <sym>==</sym> <def>num_found</def><sym>) {</sym><br />
<def></def>         <kwd>print_results</kwd><def></def><sym>();</sym><br />
<def></def>         <kwd>exit</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>);</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<br />
<kwb>void</kwb> <def></def><kwd>board_found</kwd><def></def><sym>() {</sym><br />
<def></def>   <kwb>char</kwb> <def>board_string</def><sym>[</sym><def></def><num>51</num><def></def><sym>];</sym><br />
<def></def>   <kwd>memset</kwd><def></def><sym>(</sym><def>board_string</def><sym>,</sym><def></def><str>'x'</str><def></def><sym>,</sym><def></def><num>51</num><def></def><sym>);</sym><br />
<def></def>   <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def></def><num>10</num><def></def><sym>;</sym> <def>i</def><sym>++) {</sym><br />
<def></def>      <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>j</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>j</def> <sym>&lt;</sym> <def></def><num>5</num><def></def><sym>;</sym> <def>j</def><sym>++) {</sym><br />
<def>         board_string</def><sym>[</sym><def>active_rotations</def><sym>[</sym><def>i</def><sym>]-&gt;</sym><def>positions</def><sym>[</sym><def>j</def><sym>]] =</sym> <def></def><str>'0'</str><def></def> <sym>+</sym> <def>active_rotations</def><sym>[</sym><def>i</def><sym>]-&gt;</sym><def>number</def><sym>;</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def>   board_string</def><sym>[</sym><def></def><num>50</num><def></def><sym>] =</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>   <kwd>add_board_string</kwd><def></def><sym>(</sym> <def>board_string</def><sym>);</sym><br />
<def></def>   <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def></def><num>25</num><def></def><sym>;</sym> <def>i</def><sym>++) {</sym> <def></def><kwb>char</kwb> <def>c</def> <sym>=</sym> <def>board_string</def><sym>[</sym><def>i</def><sym>];</sym> <def>board_string</def><sym>[</sym><def>i</def><sym>] =</sym> <def>board_string</def><sym>[</sym><def></def><num>49</num> <def></def><sym>-</sym> <def>i</def><sym>];</sym> <def>board_string</def><sym>[</sym><def></def><num>49</num><def></def><sym>-</sym><def>i</def><sym>] =</sym> <def>c</def><sym>; }</sym><br />
<def></def>   <kwd>add_board_string</kwd><def></def><sym>(</sym> <def>board_string</def><sym>);</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>void</kwb> <def></def><kwd>find</kwd><def></def><sym>(</sym> <def></def><kwb>int</kwb> <def>row</def><sym>,</sym> <def></def><kwb>int</kwb> <def>board</def><sym>) {</sym><br />
<def></def>   <kwa>while</kwa> <def></def><sym>((</sym><def>board</def> <sym>&amp;</sym> <def></def><num>31</num><def></def><sym>) ==</sym> <def></def><num>31</num><def></def><sym>) {</sym><br />
<def>      row</def><sym>++;</sym><br />
<def>      board</def> <sym>&gt;&gt;=</sym> <def></def><num>5</num><def></def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def>   MaskInfo</def> <sym>&amp;</sym><def>info</def> <sym>=</sym> <def>big_map</def><sym>[</sym><def>board</def> <sym>&amp;</sym> <def>two_row_mask</def><sym>];</sym><br />
<def></def>   <kwa>if</kwa> <def></def><sym>(!</sym><def>info</def><sym>.</sym><def>is_legal</def><sym>[</sym><def>row</def> <sym>%</sym> <def></def><num>2</num><def></def><sym>])</sym> <def></def><kwa>return</kwa><def></def><sym>;</sym><br />
<def></def>   <kwb>int</kwb> <def>col</def> <sym>=</sym> <def>info</def><sym>.</sym><def>start</def><sym>;</sym><br />
<def><br />
<br />
   PieceData</def> <sym>*</sym><def>start</def> <sym>= (</sym><def>PieceData</def> <sym>*)</sym><def>head</def><sym>;</sym><br />
<def></def>   <kwa>do</kwa> <def></def><sym>{</sym><br />
<def>      PieceData</def> <sym>*</sym><def>piece</def> <sym>= (</sym><def>PieceData</def> <sym>*)</sym><def>head</def><sym>;</sym><br />
<def>      head</def> <sym>=</sym> <def>piece</def><sym>-&gt;</sym><def>next</def><sym>;</sym><br />
<def>      piece</def><sym>-&gt;</sym><def>next</def> <sym>=</sym> <def>NULL</def><sym>;</sym><br />
<def>      RotationSet</def> <sym>*</sym><def>rotations</def> <sym>= &amp;(</sym><def>piece</def><sym>-&gt;</sym><def>rotation_sets</def><sym>[</sym><def>row</def><sym>][</sym><def>col</def><sym>]);</sym><br />
<def></def>      <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def>rotations</def><sym>-&gt;</sym><def>size</def><sym>-</sym><def></def><num>1</num><def></def><sym>;</sym> <def>i</def> <sym>&gt;=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def><sym>--) {</sym><br />
<def></def>         <slc>//tries[num_placed]++;</slc><br />
<def>         RotationData</def> <sym>*</sym><def>rotation</def> <sym>= &amp;</sym><def>rotations</def><sym>-&gt;</sym><def>rotations</def><sym>[</sym><def>i</def><sym>];</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>((</sym><def>board</def> <sym>&amp;</sym> <def>rotation</def><sym>-&gt;</sym><def>iMask</def><sym>) ==</sym> <def>rotation</def><sym>-&gt;</sym><def>cMask</def><sym>) {</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>num_placed</def> <sym>==</sym> <def></def><num>9</num><def></def><sym>) {</sym><br />
<def>               active_rotations</def><sym>[</sym><def>num_placed</def><sym>] =</sym> <def>rotation</def><sym>;</sym><br />
<def></def>               <kwd>board_found</kwd><def></def><sym>();</sym><br />
<def></def>            <sym>}</sym> <def></def><kwa>else</kwa> <def></def><sym>{</sym><br />
<def>               active_rotations</def><sym>[</sym><def>num_placed</def><sym>] =</sym> <def>rotation</def><sym>;</sym><br />
<def>               num_placed</def><sym>++;</sym><br />
<def></def>               <kwd>find</kwd><def></def><sym>(</sym> <def>row</def><sym>,</sym> <def>board</def> <sym>|</sym> <def>rotation</def><sym>-&gt;</sym><def>mask</def><sym>);</sym><br />
<def>               num_placed</def><sym>--;</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>head</def> <sym>==</sym> <def>NULL</def><sym>)</sym> <def>head</def> <sym>=</sym> <def>piece</def><sym>;</sym><br />
<def></def>      <kwa>else</kwa> <def>tail</def><sym>-&gt;</sym><def>next</def> <sym>=</sym> <def>piece</def><sym>;</sym><br />
<def>      tail</def> <sym>=</sym> <def>piece</def><sym>;</sym><br />
<def></def>   <sym>}</sym> <def></def><kwa>while</kwa> <def></def><sym>(</sym><def>start</def> <sym>!=</sym> <def>head</def><sym>);</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>void</kwb> <def></def><kwd>find_all</kwd><def></def><sym>() {</sym><br />
<def>   num_found</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>   num_placed</def> <sym>=</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def>   found_boards</def><sym>.</sym><def></def><kwd>clear</kwd><def></def><sym>();</sym><br />
<def>   PieceData</def> <sym>*</sym><def>start</def> <sym>= (</sym><def>PieceData</def> <sym>*)</sym><def>head</def><sym>;</sym><br />
<def></def>   <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>odd</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>odd</def> <sym>&lt;</sym> <def></def><num>2</num><def></def><sym>;</sym> <def>odd</def><sym>++) {</sym><br />
<def></def>      <kwa>do</kwa> <def></def><sym>{</sym><br />
<def>         PieceData</def> <sym>*</sym><def>piece</def> <sym>= (</sym><def>PieceData</def> <sym>*)</sym><def>head</def><sym>;</sym><br />
<def>         head</def> <sym>=</sym> <def>piece</def><sym>-&gt;</sym><def>next</def><sym>;</sym><br />
<def>         piece</def><sym>-&gt;</sym><def>next</def> <sym>=</sym> <def>NULL</def><sym>;</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>head</def> <sym>!=</sym> <def>start</def><sym>) {</sym><br />
<def>            RotationSet</def> <sym>*</sym><def>rotations</def> <sym>= &amp;(</sym><def>piece</def><sym>-&gt;</sym><def>rotation_sets</def><sym>[</sym><def></def><num>0</num><def></def><sym>][</sym><def></def><num>0</num><def></def><sym>]);</sym><br />
<def></def>            <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def>rotations</def><sym>-&gt;</sym><def>size</def><sym>-</sym><def></def><num>1</num><def></def><sym>;</sym> <def>i</def> <sym>&gt;=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def><sym>--) {</sym><br />
<def></def>               <kwa>if</kwa> <def></def><sym>(</sym><def>i</def> <sym>%</sym> <def></def><num>2</num> <def></def><sym>==</sym> <def>odd</def><sym>) {</sym><br />
<def>                  RotationData</def> <sym>*</sym><def>rotation</def> <sym>= &amp;</sym><def>rotations</def><sym>-&gt;</sym><def>rotations</def><sym>[</sym><def>i</def><sym>];</sym><br />
<def>                  active_rotations</def><sym>[</sym><def></def><num>0</num><def></def><sym>] =</sym> <def>rotation</def><sym>;</sym><br />
<def></def>                  <kwd>find</kwd><def></def><sym>(</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>rotation</def><sym>-&gt;</sym><def>mask</def><sym>);</sym><br />
<def></def>               <sym>}</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>head</def> <sym>==</sym> <def>NULL</def><sym>)</sym> <def>head</def> <sym>=</sym> <def>piece</def><sym>;</sym><br />
<def></def>         <kwa>else</kwa> <def>tail</def><sym>-&gt;</sym><def>next</def> <sym>=</sym> <def>piece</def><sym>;</sym><br />
<def>         tail</def> <sym>=</sym> <def>piece</def><sym>;</sym><br />
<def></def>      <sym>}</sym> <def></def><kwa>while</kwa> <def></def><sym>(</sym><def>start</def> <sym>!=</sym> <def>head</def><sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<br />
<kwb>void</kwb> <def></def><kwd>create_utlity_maps</kwd><def></def><sym>() {</sym><br />
<def></def>   <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def></def><num>32</num><def></def><sym>;</sym> <def>i</def><sym>++) {</sym><br />
<def>      bit_counts</def><sym>[</sym><def>i</def><sym>] =</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>      <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>j</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>j</def> <sym>&lt;</sym> <def></def><num>5</num><def></def><sym>;</sym> <def>j</def><sym>++)</sym> <def></def><kwa>if</kwa> <def></def><sym>((</sym><def></def><num>1</num> <def></def><sym>&lt;&lt;</sym> <def>j</def><sym>) &amp;</sym> <def>i</def><sym>)</sym> <def>bit_counts</def><sym>[</sym><def>i</def><sym>]++;</sym><br />
<def></def>      <kwa>for</kwa> <def></def><sym>(</sym><def>first_bits</def><sym>[</sym><def>i</def><sym>] =</sym> <def></def><num>0</num><def></def><sym>; (</sym><def></def><num>1</num> <def></def><sym>&lt;&lt;</sym> <def>first_bits</def><sym>[</sym><def>i</def><sym>]) &amp;</sym> <def>i</def><sym>;</sym> <def>first_bits</def><sym>[</sym><def>i</def><sym>]++);</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <slc>// build starts</slc><br />
<def></def>   <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def></def><num>1024</num><def></def><sym>;</sym> <def>i</def><sym>++)</sym> <def>big_map</def><sym>[</sym><def>i</def><sym>].</sym><def>start</def> <sym>=</sym> <def>first_bits</def><sym>[</sym><def>i</def> <sym>&amp;</sym> <def></def><num>31</num><def></def><sym>];</sym><br />
<def></def><br />
   <slc>// build legality</slc><br />
<def></def>   <kwb>int</kwb> <def>legal_count</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>   <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def></def><num>1024</num><def></def><sym>;</sym> <def>i</def><sym>++) {</sym><br />
<def></def>      <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>odd</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>odd</def> <sym>&lt;</sym> <def></def><num>2</num><def></def><sym>;</sym> <def>odd</def><sym>++) {</sym><br />
<def></def>         <kwb>int</kwb> <def>legal</def> <sym>=</sym> <def></def><num>2</num><def></def><sym>;</sym><br />
<def></def>         <kwb>int</kwb> <def>bit</def> <sym>=</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>         <kwa>while</kwa> <def></def><sym>(</sym><def>legal</def> <sym>&amp;&amp;</sym> <def>bit</def> <sym>&lt;</sym> <def></def><num>32</num><def></def><sym>) {</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>i</def> <sym>&amp;</sym> <def>bit</def><sym>) {</sym><br />
<def></def>               <kwa>if</kwa> <def></def><sym>(</sym><def>legal</def> <sym>==</sym> <def></def><num>2</num> <def></def><sym>&amp;&amp;</sym> <def>bit</def> <sym>&gt;</sym> <def></def><num>1</num> <def></def><sym>&amp;&amp; ((</sym><def>bit</def> <sym>&gt;&gt;</sym> <def></def><num>1</num><def></def><sym>) &amp;</sym> <def>i</def><sym>) ==</sym> <def></def><num>0</num><def></def><sym>)</sym> <def>legal</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>               <kwa>else</kwa> <def>legal</def> <sym>=</sym> <def></def><num>2</num><def></def><sym>;</sym><br />
<def></def>            <sym>}</sym> <def></def><kwa>else if</kwa> <def></def><sym>(</sym><def>legal</def> <sym>==</sym> <def></def><num>2</num><def></def><sym>) {</sym><br />
<def></def>               <kwa>if</kwa> <def></def><sym>(((</sym><def>bit</def> <sym>&lt;&lt;</sym> <def></def><num>5</num><def></def><sym>) &amp;</sym> <def>i</def><sym>) ==</sym> <def></def><num>0</num><def></def><sym>)</sym> <def>legal</def> <sym>=</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>               <kwa>else</kwa> <def></def><sym>{</sym><br />
<def></def>                  <kwa>if</kwa> <def></def><sym>(</sym><def>odd</def><sym>) {</sym><br />
<def></def>                     <kwa>if</kwa> <def></def><sym>( (</sym><def>bit</def> <sym>&lt;</sym> <def></def><num>16</num><def></def><sym>) &amp;&amp; (((</sym><def>bit</def> <sym>&lt;&lt;</sym> <def></def><num>6</num><def></def><sym>) &amp;</sym> <def>i</def><sym>) ==</sym> <def></def><num>0</num><def></def><sym>))</sym> <def>legal</def> <sym>=</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>                  <sym>}</sym> <def></def><kwa>else</kwa> <def></def><sym>{</sym><br />
<def></def>                     <kwa>if</kwa> <def></def><sym>( (</sym><def>bit</def> <sym>&gt;</sym> <def></def><num>1</num><def></def><sym>) &amp;&amp; (((</sym><def>bit</def> <sym>&lt;&lt;</sym> <def></def><num>4</num><def></def><sym>) &amp;</sym> <def>i</def><sym>) ==</sym> <def></def><num>0</num><def></def><sym>))</sym> <def>legal</def> <sym>=</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>                  <sym>}</sym><br />
<def></def>               <sym>}</sym><br />
<def></def>            <sym>}</sym><br />
<def>            bit</def> <sym>&lt;&lt;=</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>legal</def> <sym>==</sym> <def></def><num>2</num> <def></def><sym>&amp;&amp; ((</sym><def>bit</def> <sym>&gt;&gt;</sym> <def></def><num>1</num><def></def><sym>) &amp;</sym> <def>i</def><sym>) ==</sym> <def></def><num>0</num><def></def><sym>)</sym> <def>legal</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>         big_map</def><sym>[</sym><def>i</def><sym>].</sym><def>is_legal</def><sym>[</sym><def>odd</def><sym>] =</sym> <def>legal ?</def> <kwa>true</kwa> <def></def><sym>:</sym> <def></def><kwa>false</kwa><def></def><sym>;</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>legal</def><sym>)</sym> <def>legal_count</def><sym>++;</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>int</kwb> <def></def><kwd>main</kwd> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>argc</def><sym>,</sym> <def></def><kwb>char</kwb> <def></def><sym>*</sym> <def></def><kwb>const</kwb> <def>argv</def><sym>[]) {</sym><br />
<def>    num_to_find</def> <sym>=</sym> <def></def><num>2098</num><def></def><sym>;</sym><br />
<def></def>   <kwa>if</kwa> <def></def><sym>(</sym><def>argc</def> <sym>&gt;</sym> <def></def><num>1</num><def></def><sym>)</sym> <def></def><kwd>sscanf</kwd><def></def><sym>(</sym><def>argv</def><sym>[</sym><def></def><num>1</num><def></def><sym>],</sym><def></def><str>&quot;%d&quot;</str><def></def><sym>, &amp;</sym><def>num_to_find</def><sym>);</sym><br />
<def></def><br />
   <kwd>create_piece_maps</kwd><def></def><sym>();</sym><br />
<def></def>   <kwd>create_utlity_maps</kwd><def></def><sym>();</sym><br />
<def></def>   <kwd>find_all</kwd><def></def><sym>();</sym><br />
<def></def>   <kwd>print_results</kwd><def></def><sym>();</sym><br />
<def></def><br />
   <kwa>return</kwa> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
