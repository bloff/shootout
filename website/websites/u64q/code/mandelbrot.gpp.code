<source>
<def></def><com>/*	The Computer Language Shootout</com><br />
<com>	http://shootout.alioth.debian.org/</com><br />
<com>	contributed by Greg Buchholz</com><br />
<com>	modified by Paul Kitchin</com><br />
<com>*/</com><def></def><br />
<br />
<dir>#include &lt;complex&gt;</dir><br />
<def></def><dir>#include &lt;iostream&gt;</dir><br />
<def></def><dir>#include &lt;sstream&gt;</dir><br />
<def></def><br />
<kwb>int</kwb> <def></def><kwd>main</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>argc</def><sym>,</sym> <def></def><kwb>char</kwb> <def></def><sym>* *</sym> <def>argv</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>	<kwb>char</kwb> <def>bit_number</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>	<kwb>char</kwb> <def>byte_accumulator</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>	<kwb>unsigned int const</kwb> <def>iterations</def> <sym>=</sym> <def></def><num>50</num><def></def><sym>;</sym><br />
<def></def>	<kwb>double const</kwb> <def>limit</def> <sym>=</sym> <def></def><num>2.0</num> <def></def><sym>*</sym> <def></def><num>2.0</num><def></def><sym>;</sym><br />
<def><br />
	std</def><sym>::</sym><def>ios_base</def><sym>::</sym><def></def><kwd>sync_with_stdio</kwd><def></def><sym>(</sym><def></def><kwa>false</kwa><def></def><sym>);</sym><br />
<def></def>	<kwa>if</kwa> <def></def><sym>(</sym><def>argc</def> <sym>!=</sym> <def></def><num>2</num><def></def><sym>)</sym><br />
<def></def>	<sym>{</sym><br />
<def>		std</def><sym>::</sym><def>cerr</def> <sym>&lt;&lt;</sym> <def></def><str>&quot;usage: mandlebrot &lt;n&gt;</str><esc>\n</esc><str>&quot;</str><def></def><sym>;</sym><br />
<def></def>		<kwa>return</kwa> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>	<sym>}</sym><br />
<def></def>	<kwb>unsigned int</kwb> <def>dimension</def><sym>;</sym><br />
<def></def>	<sym>{</sym><br />
<def>		std</def><sym>::</sym><def>stringstream</def> <kwd>convertor</kwd><def></def><sym>(</sym><def>argv</def><sym>[</sym><def></def><num>1</num><def></def><sym>]);</sym><br />
<def></def>		<kwa>if</kwa> <def></def><sym>(!(</sym><def>convertor</def> <sym>&gt;&gt;</sym> <def>dimension</def><sym>) || !</sym><def>convertor</def><sym>.</sym><def></def><kwd>eof</kwd><def></def><sym>())</sym><br />
<def></def>		<sym>{</sym><br />
<def>			std</def><sym>::</sym><def>cerr</def> <sym>&lt;&lt;</sym> <def></def><str>&quot;usage: mandlebrot &lt;n&gt;</str><esc>\n</esc><str>&quot;</str><def></def><sym>;</sym><br />
<def>			std</def><sym>::</sym><def>cerr</def> <sym>&lt;&lt;</sym> <def></def><str>&quot;   n must be an integer</str><esc>\n</esc><str>&quot;</str><def></def><sym>;</sym><br />
<def></def>			<kwa>return</kwa> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>		<sym>}</sym><br />
<def></def>	<sym>}</sym><br />
<def><br />
	std</def><sym>::</sym><def>cout</def> <sym>&lt;&lt;</sym> <def></def><str>&quot;P4</str><esc>\n</esc><str>&quot;</str><def></def> <sym>&lt;&lt;</sym> <def>dimension</def> <sym>&lt;&lt;</sym> <def></def><str>&quot; &quot;</str><def></def> <sym>&lt;&lt;</sym> <def>dimension</def> <sym>&lt;&lt;</sym> <def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>;</sym><br />
<def><br />
	std</def><sym>::</sym><def></def><kwb>complex</kwb><def></def><sym>&lt;</sym> <def></def><kwb>double</kwb> <def></def><sym>&gt;</sym> <def>C</def><sym>;</sym><br />
<def></def>	<kwa>for</kwa>  <def></def><sym>(</sym><def></def><kwb>unsigned int</kwb> <def>y</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>y</def> <sym>&lt;</sym> <def>dimension</def><sym>; ++</sym><def>y</def><sym>)</sym><br />
<def></def>	<sym>{</sym><br />
<def>		C</def> <sym>=</sym> <def>std</def><sym>::</sym><def></def><kwb>complex</kwb><def></def><sym>&lt;</sym> <def></def><kwb>double</kwb> <def></def><sym>&gt;(-</sym><def></def><num>1.5</num><def></def><sym>,</sym> <def></def><num>2.0</num> <def></def><sym>*</sym> <def></def><kwb>double</kwb><def></def><sym>(</sym><def>y</def><sym>) /</sym> <def>dimension</def> <sym>-</sym> <def></def><num>1.0</num><def></def><sym>);</sym><br />
<def></def>		<kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>unsigned int</kwb> <def>x</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>x</def> <sym>&lt;</sym> <def>dimension</def><sym>; ++</sym><def>x</def><sym>)</sym><br />
<def></def>		<sym>{</sym><br />
<def>			C</def> <sym>=</sym> <def>std</def><sym>::</sym><def></def><kwb>complex</kwb><def></def><sym>&lt;</sym> <def></def><kwb>double</kwb> <def></def><sym>&gt;(</sym><def></def><num>2.0</num> <def></def><sym>*</sym> <def></def><kwb>double</kwb><def></def><sym>(</sym><def>x</def><sym>) /</sym> <def>dimension</def> <sym>-</sym> <def></def><num>1.5</num><def></def><sym>,</sym> <def>C</def><sym>.</sym><def></def><kwd>imag</kwd><def></def><sym>());</sym><br />
<def>			std</def><sym>::</sym><def></def><kwb>complex</kwb><def></def><sym>&lt;</sym> <def></def><kwb>double</kwb> <def></def><sym>&gt;</sym> <def></def><kwd>Z</kwd><def></def><sym>(</sym><def>C</def><sym>);</sym><br />
<def></def><br />
			<kwb>bool</kwb> <def>norm_less_equal_limit</def> <sym>=</sym> <def></def><kwa>true</kwa><def></def><sym>;</sym><br />
<def></def>			<kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>unsigned int</kwb> <def>i</def> <sym>=</sym> <def></def><num>1</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>iterations</def> <sym>&amp;&amp;</sym> <def>norm_less_equal_limit</def><sym>; ++</sym><def>i</def><sym>)</sym><br />
<def></def>			<sym>{</sym><br />
<def>				Z</def> <sym>*=</sym> <def>Z</def><sym>;</sym><br />
<def>				Z</def> <sym>+=</sym> <def>C</def><sym>;</sym><br />
<def>				norm_less_equal_limit</def> <sym>= (</sym><def>Z</def><sym>.</sym><def></def><kwd>real</kwd><def></def><sym>() *</sym> <def>Z</def><sym>.</sym><def></def><kwd>real</kwd><def></def><sym>() +</sym> <def>Z</def><sym>.</sym><def></def><kwd>imag</kwd><def></def><sym>() *</sym> <def>Z</def><sym>.</sym><def></def><kwd>imag</kwd><def></def><sym>() &lt;=</sym> <def>limit</def><sym>);</sym><br />
<def></def>			<sym>}</sym><br />
<def><br />
			byte_accumulator</def> <sym>= (</sym><def>byte_accumulator</def> <sym>*</sym> <def></def><num>2</num><def></def><sym>) | (</sym><def>norm_less_equal_limit</def><sym>);</sym><br />
<def></def><br />
			<kwa>if</kwa> <def></def><sym>(++</sym><def>bit_number</def> <sym>==</sym> <def></def><num>8</num><def></def><sym>)</sym><br />
<def></def>			<sym>{</sym><br />
<def>				std</def><sym>::</sym><def>cout</def> <sym>&lt;&lt;</sym> <def>byte_accumulator</def><sym>;</sym><br />
<def>				bit_number</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>				byte_accumulator</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>			<sym>}</sym><br />
<def></def>		<sym>}</sym><br />
<def></def>		<kwa>if</kwa> <def></def><sym>(</sym><def>dimension</def> <sym>&amp;</sym> <def></def><num>7</num><def></def><sym>)</sym><br />
<def></def>		<sym>{</sym><br />
<def>			byte_accumulator</def> <sym>&lt;&lt;=</sym> <def></def><num>8</num> <def></def><sym>- (</sym><def>dimension</def> <sym>&amp;</sym> <def></def><num>7</num><def></def><sym>);</sym><br />
<def>			std</def><sym>::</sym><def>cout</def> <sym>&lt;&lt;</sym> <def>byte_accumulator</def><sym>;</sym><br />
<def>			bit_number</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>			byte_accumulator</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>		<sym>}</sym><br />
<def></def>	<sym>}</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
