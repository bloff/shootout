<span class="hl com">/*</span>
<span class="hl com"> * The Computer Language Shootout</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by Andrei Formiga</span>
<span class="hl com"> */</span>

<span class="hl kwa">object</span> fannkuch
<span class="hl sym">{</span>
  <span class="hl kwa">var</span> permN <span class="hl sym">:</span> <span class="hl kwb">int</span> <span class="hl sym">=</span> <span class="hl num">0</span>
  <span class="hl kwa">var</span> maxFlips <span class="hl sym">:</span> <span class="hl kwb">int</span> <span class="hl sym">=</span> <span class="hl num">0</span>

  <span class="hl kwa">def</span> flips<span class="hl sym">(</span>l<span class="hl sym">:</span> <span class="hl kwc">List</span><span class="hl sym">[</span><span class="hl kwb">int</span><span class="hl sym">]):</span> <span class="hl kwb">int</span> <span class="hl sym">=</span> l match <span class="hl sym">{</span>
    <span class="hl kwa">case</span> <span class="hl num">1</span> <span class="hl sym">::</span> ls <span class="hl sym">=&gt;</span> <span class="hl num">0</span>
    <span class="hl kwa">case</span> n <span class="hl sym">::</span> ls <span class="hl sym">=&gt;</span> flips<span class="hl sym">((</span>l take n reverse<span class="hl sym">) ::: (</span>l drop n<span class="hl sym">)) +</span> <span class="hl num">1</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">def</span> rotateLeft<span class="hl sym">(</span>l<span class="hl sym">:</span> <span class="hl kwc">List</span><span class="hl sym">[</span><span class="hl kwb">int</span><span class="hl sym">]) =</span>
    l match <span class="hl sym">{</span> <span class="hl kwa">case</span> <span class="hl kwc">List</span><span class="hl sym">() =&gt;</span> <span class="hl kwc">List</span><span class="hl sym">()</span> <span class="hl kwa">case</span> x <span class="hl sym">::</span> xs <span class="hl sym">=&gt;</span> xs <span class="hl sym">:::</span> <span class="hl kwc">List</span><span class="hl sym">(</span>x<span class="hl sym">) }</span>

  <span class="hl kwa">def</span> printPerm<span class="hl sym">(</span>perm<span class="hl sym">:</span> <span class="hl kwc">List</span><span class="hl sym">[</span><span class="hl kwb">int</span><span class="hl sym">]) =</span>
    <span class="hl sym">{</span> perm foreach<span class="hl sym">(</span>x <span class="hl sym">=&gt;</span> Console<span class="hl sym">.</span>print<span class="hl sym">(</span>x<span class="hl sym">.</span>toString<span class="hl sym">()));</span> Console<span class="hl sym">.</span>println<span class="hl sym">; }</span>

  <span class="hl kwa">def</span> processPerm<span class="hl sym">(</span>perm<span class="hl sym">:</span> <span class="hl kwc">List</span><span class="hl sym">[</span><span class="hl kwb">int</span><span class="hl sym">]) = {</span>
    <span class="hl kwa">val</span> f <span class="hl sym">=</span> flips<span class="hl sym">(</span>perm<span class="hl sym">)</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>f <span class="hl sym">&gt;</span> maxFlips<span class="hl sym">)</span> maxFlips <span class="hl sym">=</span> f
    <span class="hl kwa">if</span> <span class="hl sym">(</span>permN <span class="hl sym">&lt;</span> <span class="hl num">30</span><span class="hl sym">) {</span> printPerm<span class="hl sym">(</span>perm<span class="hl sym">);</span> permN <span class="hl sym">=</span> permN <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">; }</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">def</span> permutations<span class="hl sym">(</span>l<span class="hl sym">:</span> <span class="hl kwc">List</span><span class="hl sym">[</span><span class="hl kwb">int</span><span class="hl sym">],</span> n<span class="hl sym">:</span> <span class="hl kwb">int</span><span class="hl sym">,</span> i<span class="hl sym">:</span> <span class="hl kwb">int</span><span class="hl sym">):</span> unit <span class="hl sym">= {</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> n<span class="hl sym">) {</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>n <span class="hl sym">==</span> <span class="hl num">1</span><span class="hl sym">)</span>
	processPerm<span class="hl sym">(</span>l<span class="hl sym">)</span>
      <span class="hl kwa">else</span> <span class="hl sym">{</span>
	permutations<span class="hl sym">(</span>l<span class="hl sym">,</span> n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">)</span>
	permutations<span class="hl sym">(</span>rotateLeft<span class="hl sym">(</span>l take n<span class="hl sym">) ::: (</span>l drop n<span class="hl sym">),</span> n<span class="hl sym">,</span> i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
      <span class="hl sym">}</span>
    <span class="hl sym">}</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">def</span> main<span class="hl sym">(</span>args<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">String</span><span class="hl sym">]) =</span>
  <span class="hl sym">{</span>
    <span class="hl kwa">val</span> n <span class="hl sym">=</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span>parseInt<span class="hl sym">(</span>args<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">))</span>

    permutations<span class="hl sym">(</span><span class="hl kwc">List</span><span class="hl sym">.</span>range<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> n <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">),</span> n<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">)</span>
    Console<span class="hl sym">.</span>println<span class="hl sym">(</span><span class="hl str">&quot;Pfannkuchen(&quot;</span> <span class="hl sym">+</span> n <span class="hl sym">+</span> <span class="hl str">&quot;) = &quot;</span> <span class="hl sym">+</span> maxFlips<span class="hl sym">)</span>
  <span class="hl sym">}</span>
<span class="hl sym">}</span>
