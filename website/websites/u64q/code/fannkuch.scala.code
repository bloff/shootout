<source>
<def></def><com>/*</com><br />
<com> * The Computer Language Shootout</com><br />
<com> * http://shootout.alioth.debian.org/</com><br />
<com> *</com><br />
<com> * contributed by Andrei Formiga</com><br />
<com> */</com><def></def><br />
<br />
<kwa>object</kwa> <def>fannkuch</def><br />
<sym>{</sym><br />
<def></def>  <kwa>var</kwa> <def>permN</def> <sym>:</sym> <def></def><kwb>int</kwb> <def></def><sym>=</sym> <def></def><num>0</num><br />
<def></def>  <kwa>var</kwa> <def>maxFlips</def> <sym>:</sym> <def></def><kwb>int</kwb> <def></def><sym>=</sym> <def></def><num>0</num><br />
<def></def><br />
  <kwa>def</kwa> <def>flips</def><sym>(</sym><def>l</def><sym>:</sym> <def></def><kwc>List</kwc><def></def><sym>[</sym><def></def><kwb>int</kwb><def></def><sym>]):</sym> <def></def><kwb>int</kwb> <def></def><sym>=</sym> <def>l match</def> <sym>{</sym><br />
<def></def>    <kwa>case</kwa> <def></def><num>1</num> <def></def><sym>::</sym> <def>ls</def> <sym>=&gt;</sym> <def></def><num>0</num><br />
<def></def>    <kwa>case</kwa> <def>n</def> <sym>::</sym> <def>ls</def> <sym>=&gt;</sym> <def>flips</def><sym>((</sym><def>l take n reverse</def><sym>) ::: (</sym><def>l drop n</def><sym>)) +</sym> <def></def><num>1</num><br />
<def></def>  <sym>}</sym><br />
<def></def><br />
  <kwa>def</kwa> <def>rotateLeft</def><sym>(</sym><def>l</def><sym>:</sym> <def></def><kwc>List</kwc><def></def><sym>[</sym><def></def><kwb>int</kwb><def></def><sym>]) =</sym><br />
<def>    l match</def> <sym>{</sym> <def></def><kwa>case</kwa> <def></def><kwc>List</kwc><def></def><sym>() =&gt;</sym> <def></def><kwc>List</kwc><def></def><sym>()</sym> <def></def><kwa>case</kwa> <def>x</def> <sym>::</sym> <def>xs</def> <sym>=&gt;</sym> <def>xs</def> <sym>:::</sym> <def></def><kwc>List</kwc><def></def><sym>(</sym><def>x</def><sym>) }</sym><br />
<def></def><br />
  <kwa>def</kwa> <def>printPerm</def><sym>(</sym><def>perm</def><sym>:</sym> <def></def><kwc>List</kwc><def></def><sym>[</sym><def></def><kwb>int</kwb><def></def><sym>]) =</sym><br />
<def></def>    <sym>{</sym> <def>perm foreach</def><sym>(</sym><def>x</def> <sym>=&gt;</sym> <def>Console</def><sym>.</sym><def>print</def><sym>(</sym><def>x</def><sym>.</sym><def>toString</def><sym>()));</sym> <def>Console</def><sym>.</sym><def>println</def><sym>; }</sym><br />
<def></def><br />
  <kwa>def</kwa> <def>processPerm</def><sym>(</sym><def>perm</def><sym>:</sym> <def></def><kwc>List</kwc><def></def><sym>[</sym><def></def><kwb>int</kwb><def></def><sym>]) = {</sym><br />
<def></def>    <kwa>val</kwa> <def>f</def> <sym>=</sym> <def>flips</def><sym>(</sym><def>perm</def><sym>)</sym><br />
<def></def>    <kwa>if</kwa> <def></def><sym>(</sym><def>f</def> <sym>&gt;</sym> <def>maxFlips</def><sym>)</sym> <def>maxFlips</def> <sym>=</sym> <def>f</def><br />
    <kwa>if</kwa> <def></def><sym>(</sym><def>permN</def> <sym>&lt;</sym> <def></def><num>30</num><def></def><sym>) {</sym> <def>printPerm</def><sym>(</sym><def>perm</def><sym>);</sym> <def>permN</def> <sym>=</sym> <def>permN</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>; }</sym><br />
<def></def>  <sym>}</sym><br />
<def></def><br />
  <kwa>def</kwa> <def>permutations</def><sym>(</sym><def>l</def><sym>:</sym> <def></def><kwc>List</kwc><def></def><sym>[</sym><def></def><kwb>int</kwb><def></def><sym>],</sym> <def>n</def><sym>:</sym> <def></def><kwb>int</kwb><def></def><sym>,</sym> <def>i</def><sym>:</sym> <def></def><kwb>int</kwb><def></def><sym>):</sym> <def>unit</def> <sym>= {</sym><br />
<def></def>    <kwa>if</kwa> <def></def><sym>(</sym><def>i</def> <sym>&lt;</sym> <def>n</def><sym>) {</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>n</def> <sym>==</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def>	processPerm</def><sym>(</sym><def>l</def><sym>)</sym><br />
<def></def>      <kwa>else</kwa> <def></def><sym>{</sym><br />
<def>	permutations</def><sym>(</sym><def>l</def><sym>,</sym> <def>n</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>)</sym><br />
<def>	permutations</def><sym>(</sym><def>rotateLeft</def><sym>(</sym><def>l take n</def><sym>) ::: (</sym><def>l drop n</def><sym>),</sym> <def>n</def><sym>,</sym> <def>i</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>    <sym>}</sym><br />
<def></def>  <sym>}</sym><br />
<def></def><br />
  <kwa>def</kwa> <def>main</def><sym>(</sym><def>args</def><sym>:</sym> <def></def><kwc>Array</kwc><def></def><sym>[</sym><def></def><kwc>String</kwc><def></def><sym>]) =</sym><br />
<def></def>  <sym>{</sym><br />
<def></def>    <kwa>val</kwa> <def>n</def> <sym>=</sym> <def></def><kwc>Integer</kwc><def></def><sym>.</sym><def>parseInt</def><sym>(</sym><def>args</def><sym>(</sym><def></def><num>0</num><def></def><sym>))</sym><br />
<def><br />
    permutations</def><sym>(</sym><def></def><kwc>List</kwc><def></def><sym>.</sym><def>range</def><sym>(</sym><def></def><num>1</num><def></def><sym>,</sym> <def>n</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>),</sym> <def>n</def><sym>,</sym> <def></def><num>0</num><def></def><sym>)</sym><br />
<def>    Console</def><sym>.</sym><def>println</def><sym>(</sym><def></def><str>&quot;Pfannkuchen(&quot;</str><def></def> <sym>+</sym> <def>n</def> <sym>+</sym> <def></def><str>&quot;) = &quot;</str><def></def> <sym>+</sym> <def>maxFlips</def><sym>)</sym><br />
<def></def>  <sym>}</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
