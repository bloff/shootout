<source>
<def></def><com>{ The Computer Language Benchmarks Game</com><br />
<com>  http://shootout.alioth.debian.org</com><br />
<com></com><br />
<com>  contributed by Marc Weustink</com><br />
<com>}</com><def></def><br />
<br />
<kwa>program</kwa> <def>thread_ring</def><sym>;</sym><br />
<def></def><com>{$mode objfpc}</com><def></def><com>{$h-}</com><def></def><com>{$i-}</com><def></def><br />
<kwa>uses</kwa><br />
<def>  PThreads</def><sym>;</sym><br />
<def></def><br />
<kwa>var</kwa><br />
<def>  SemList</def><sym>:</sym> <def></def><kwa>array</kwa><def></def><sym>[</sym><def></def><num>1</num><def></def><sym>.</sym><def></def><num>.503</num><def></def><sym>]</sym> <def></def><kwa>of</kwa> <def>TSemaphore</def><sym>;</sym><br />
<def><br />
  ThreadAttr</def><sym>:</sym> <def>TThreadAttr</def><sym>;</sym><br />
<def>  ThreadFuncAddr</def><sym>:</sym> <def>TStartRoutine</def><sym>;</sym><br />
<def>  FinishedSem</def><sym>:</sym> <def>TSemaphore</def><sym>;</sym><br />
<def>  Count</def><sym>:</sym> <def></def><kwb>Integer</kwb><def></def><sym>;</sym><br />
<def></def><br />
<kwa>function</kwa> <def></def><kwd>ThreadFunc</kwd><def></def><sym>(</sym><def>AIndex</def><sym>:</sym> <def>PtrInt</def><sym>):</sym> <def></def><kwb>Pointer</kwb><def></def><sym>;</sym> <def></def><kwa>cdecl</kwa><def></def><sym>;</sym><br />
<def></def><kwa>var</kwa><br />
<def>  MySem</def><sym>,</sym> <def>NextSem</def><sym>:</sym> <def>PSemaphore</def><sym>;</sym><br />
<def>  Id</def><sym>:</sym> <def>TThreadID</def><sym>;</sym><br />
<def></def><kwa>begin</kwa><br />
<def>  MySem</def> <sym>:= @</sym><def>SemList</def><sym>[</sym><def>AIndex</def><sym>];</sym><br />
<def></def>  <kwa>if</kwa> <def>AIndex</def> <sym>&lt;</sym> <def></def><kwd>High</kwd><def></def><sym>(</sym><def>SemList</def><sym>)</sym><br />
<def></def>  <kwa>then begin</kwa><br />
<def>    NextSem</def> <sym>:=</sym> <def>MySem</def><sym>+</sym><def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>    <kwd>sem_init</kwd><def></def><sym>(</sym><def>NextSem</def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>);</sym><br />
<def></def>    <kwd>pthread_create</kwd><def></def><sym>(@</sym><def>Id</def><sym>, @</sym><def>ThreadAttr</def><sym>,</sym> <def>ThreadFuncAddr</def><sym>,</sym> <def></def><kwb>Pointer</kwb><def></def><sym>(</sym><def>AIndex</def><sym>+</sym><def></def><num>1</num><def></def><sym>));</sym><br />
<def></def>  <kwa>end</kwa><br />
<def></def>  <kwa>else</kwa> <def>NextSem</def> <sym>:= @</sym><def>SemList</def><sym>[</sym><def></def><kwd>Low</kwd><def></def><sym>(</sym><def>SemList</def><sym>)];</sym><br />
<def></def><br />
  <kwa>repeat</kwa><br />
<def></def>    <kwd>sem_wait</kwd><def></def><sym>(</sym><def>MySem</def><sym>);</sym><br />
<def></def>    <kwa>if</kwa> <def>Count</def> <sym>=</sym> <def></def><num>0</num> <def></def><kwa>then begin</kwa><br />
<def></def>      <kwd>WriteLn</kwd><def></def><sym>(</sym><def>Aindex</def><sym>);</sym><br />
<def></def>      <kwd>sem_post</kwd><def></def><sym>(</sym><def>FinishedSem</def><sym>);</sym><br />
<def></def>    <kwa>end</kwa><br />
<def></def>    <kwa>else begin</kwa><br />
<def></def>      <kwd>Dec</kwd><def></def><sym>(</sym><def>Count</def><sym>);</sym><br />
<def></def>      <kwd>sem_post</kwd><def></def><sym>(</sym><def>NextSem</def><sym>);</sym><br />
<def></def>    <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>  <kwa>until</kwa> <def></def><kwb>False</kwb><def></def><sym>;</sym><br />
<def></def><kwa>end</kwa><def></def><sym>;</sym><br />
<def></def><br />
<br />
<kwa>var</kwa><br />
<def>  n</def><sym>:</sym> <def></def><kwb>Integer</kwb><def></def><sym>;</sym><br />
<def>  Id</def><sym>:</sym> <def>TThreadId</def><sym>;</sym><br />
<def></def><kwa>begin</kwa><br />
<def></def>  <kwd>Val</kwd><def></def><sym>(</sym><def></def><kwd>paramstr</kwd><def></def><sym>(</sym><def></def><num>1</num><def></def><sym>),</sym> <def>count</def><sym>,</sym> <def>n</def><sym>);</sym><br />
<def></def>  <kwa>if</kwa> <def>n</def> <sym>&lt;&gt;</sym> <def></def><num>0</num> <def></def><kwa>then</kwa> <def>exit</def><sym>;</sym><br />
<def></def><br />
  <kwd>sem_init</kwd><def></def><sym>(</sym><def>SemList</def><sym>[</sym><def></def><kwd>Low</kwd><def></def><sym>(</sym><def>SemList</def><sym>)],</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>  <kwd>sem_init</kwd><def></def><sym>(</sym><def>FinishedSem</def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>);</sym><br />
<def></def><br />
  <kwd>pthread_attr_init</kwd><def></def><sym>(@</sym><def>ThreadAttr</def><sym>);</sym><br />
<def></def>  <kwd>pthread_attr_setdetachstate</kwd><def></def><sym>(@</sym><def>ThreadAttr</def><sym>,</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>  <kwd>pthread_attr_setstacksize</kwd><def></def><sym>(@</sym><def>ThreadAttr</def><sym>,</sym> <def></def><num>1024</num> <def></def><sym>*</sym> <def></def><num>16</num><def></def><sym>);</sym><br />
<def><br />
  ThreadFuncAddr</def> <sym>:=</sym> <def></def><kwd>TStartRoutine</kwd><def></def><sym>(@</sym><def>ThreadFunc</def><sym>);</sym><br />
<def></def>  <kwd>pthread_create</kwd><def></def><sym>(@</sym><def>Id</def><sym>, @</sym><def>ThreadAttr</def><sym>,</sym> <def>ThreadFuncAddr</def><sym>,</sym> <def></def><kwb>Pointer</kwb><def></def><sym>(</sym><def></def><kwd>PtrUInt</kwd><def></def><sym>(</sym><def></def><kwd>Low</kwd><def></def><sym>(</sym><def>SemList</def><sym>))));</sym><br />
<def></def><br />
  <kwd>sem_wait</kwd><def></def><sym>(</sym><def>FinishedSem</def><sym>);</sym><br />
<def></def><kwa>end</kwa><def></def><sym>.</sym><def></def><br />
</source>
