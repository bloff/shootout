<source>
<def></def><slc>// ---------------------------------------------------------------------</slc><br />
<def></def><slc>// The Great Computer Language Shootout</slc><br />
<def></def><slc>// http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>//</slc><br />
<def></def><slc>// Contributed by Anthony Borla</slc><br />
<def></def><slc>// ---------------------------------------------------------------------</slc><br />
<def></def><br />
<kwb>int</kwb> <def></def><kwd>main</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>argc</def><sym>,</sym> <def></def><kwb>array</kwb><def></def><sym>(</sym><def></def><kwb>string</kwb><def></def><sym>)</sym> <def>argv</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>  <kwb>constant</kwb> <def>ITERATIONS</def> <sym>=</sym> <def></def><num>50</num><def></def><sym>,</sym> <def>LIMIT_SQR</def> <sym>=</sym> <def></def><num>4.0</num><def></def><sym>;</sym><br />
<def></def><br />
  <kwb>int</kwb> <def>N</def> <sym>= (</sym><def></def><kwb>int</kwb><def></def><sym>)</sym><def>argv</def><sym>[</sym><def></def><num>1</num><def></def><sym>];</sym> <def></def><kwb>int</kwb> <def>bit_num</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>byte_acc</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><br />
  <kwa>write</kwa><def></def><sym>(</sym><def></def><str>&quot;P4</str><esc>\n</esc><str>%d %d</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def>N</def><sym>,</sym> <def>N</def><sym>);</sym><br />
<def></def><br />
  <kwd>for</kwd> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>y</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>y</def> <sym>&lt;</sym> <def>N</def><sym>;</sym> <def>y</def><sym>++)</sym><br />
<def></def>  <sym>{</sym><br />
<def></def>    <kwd>for</kwd> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>x</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>x</def> <sym>&lt;</sym> <def>N</def><sym>;</sym> <def>x</def><sym>++)</sym><br />
<def></def>    <sym>{</sym><br />
<def></def>      <kwb>float</kwb> <def>ZR</def> <sym>=</sym> <def></def><num>0.0</num><def></def><sym>,</sym> <def>ZI</def> <sym>=</sym> <def></def><num>0.0</num><def></def><sym>,</sym> <def>TR</def> <sym>=</sym> <def></def><num>0.0</num><def></def><sym>,</sym> <def>TI</def> <sym>=</sym> <def></def><num>0.0</num><def></def><sym>;</sym><br />
<def></def>      <kwb>float</kwb> <def>CR</def> <sym>= (</sym><def></def><num>2.0</num> <def></def><sym>*</sym> <def>x</def> <sym>/</sym> <def>N</def><sym>) -</sym> <def></def><num>1.5</num><def></def><sym>,</sym> <def>CI</def> <sym>= (</sym><def></def><num>2.0</num> <def></def><sym>*</sym> <def>y</def> <sym>/</sym> <def>N</def><sym>) -</sym> <def></def><num>1.0</num><def></def><sym>;</sym><br />
<def></def>      <kwb>int</kwb> <def>ESCAPE</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><br />
      <kwd>for</kwd> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>ITERATIONS</def><sym>;</sym> <def>i</def><sym>++)</sym><br />
<def></def>      <sym>{</sym><br />
<def>        TR</def> <sym>=</sym> <def>ZR</def> <sym>*</sym> <def>ZR</def> <sym>-</sym> <def>ZI</def> <sym>*</sym> <def>ZI</def> <sym>+</sym> <def>CR</def><sym>;</sym> <def>TI</def> <sym>=</sym> <def></def><num>2.0</num> <def></def><sym>*</sym> <def>ZR</def> <sym>*</sym> <def>ZI</def> <sym>+</sym> <def>CI</def><sym>;</sym><br />
<def>        ZR</def> <sym>=</sym> <def>TR</def><sym>;</sym> <def>ZI</def> <sym>=</sym> <def>TI</def><sym>;</sym><br />
<def></def><br />
        <kwd>if</kwd> <def></def><sym>(</sym><def>ZR</def> <sym>*</sym> <def>ZR</def> <sym>+</sym> <def>ZI</def> <sym>*</sym> <def>ZI</def> <sym>&gt;</sym> <def>LIMIT_SQR</def><sym>) {</sym> <def>ESCAPE</def> <sym>=</sym> <def></def><num>1</num><def></def><sym>;</sym> <def>break</def><sym>; }</sym><br />
<def></def>      <sym>}</sym><br />
<def><br />
      byte_acc</def> <sym>= (</sym><def>byte_acc</def> <sym>&lt;&lt;</sym> <def></def><num>1</num><def></def><sym>) | (</sym><def>ESCAPE ?</def> <num>0</num> <def></def><sym>:</sym> <def></def><num>1</num><def></def><sym>);</sym> <def>bit_num</def><sym>++;</sym><br />
<def></def><br />
      <kwd>if</kwd> <def></def><sym>(</sym><def>bit_num</def> <sym>==</sym> <def></def><num>8</num><def></def><sym>)</sym><br />
<def></def>      <sym>{</sym><br />
<def></def>        <kwa>write</kwa><def></def><sym>(</sym><def></def><str>&quot;%c&quot;</str><def></def><sym>,</sym> <def>byte_acc</def><sym>);</sym> <def>byte_acc</def> <sym>=</sym> <def>bit_num</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>      <sym>}</sym><br />
<def>      else</def> <kwd>if</kwd> <def></def><sym>(</sym><def>x</def> <sym>==</sym> <def>N</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>      <sym>{</sym><br />
<def>        byte_acc</def> <sym>&lt;&lt;= (</sym><def></def><num>8</num> <def></def><sym>-</sym> <def>bit_num</def><sym>);</sym> <def></def><kwa>write</kwa><def></def><sym>(</sym><def></def><str>&quot;%c&quot;</str><def></def><sym>,</sym> <def>byte_acc</def><sym>);</sym><br />
<def>        byte_acc</def> <sym>=</sym> <def>bit_num</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>    <sym>}</sym><br />
<def></def>  <sym>}</sym><br />
<def><br />
  return</def> <num>0</num><def></def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
</source>
