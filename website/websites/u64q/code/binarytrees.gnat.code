<source>
<def></def><slc>----------------------------------------------------------------</slc><br />
<def></def><slc>-- BinaryTrees</slc><br />
<def></def><slc>--</slc><br />
<def></def><slc>-- Ada 95 (GNAT)</slc><br />
<def></def><slc>--</slc><br />
<def></def><slc>-- Contributed by Jim Rogers</slc><br />
<def></def><slc>----------------------------------------------------------------</slc><br />
<def></def><kwa>with</kwa> <def>Treenodes</def><sym>;</sym> <def></def><kwa>use</kwa> <def>Treenodes</def><sym>;</sym><br />
<def></def><kwa>with</kwa> <def>Ada.Text_Io</def><sym>;</sym> <def></def><kwa>use</kwa> <def>Ada.Text_Io</def><sym>;</sym><br />
<def></def><kwa>with</kwa> <def>Ada.Integer_Text_Io</def><sym>;</sym> <def></def><kwa>use</kwa> <def>Ada.Integer_Text_Io</def><sym>;</sym><br />
<def></def><kwa>with</kwa> <def>Ada.Command_Line</def><sym>;</sym> <def></def><kwa>use</kwa> <def>Ada.Command_Line</def><sym>;</sym><br />
<def></def><kwa>with</kwa> <def>Ada.Characters.Latin_1</def><sym>;</sym> <def></def><kwa>use</kwa> <def>Ada.Characters.Latin_1</def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def>Binarytrees</def> <kwa>is</kwa><br />
<def>   Min_Depth</def> <sym>:</sym> <def></def><kwa>constant</kwa> <def></def><kwb>Positive</kwb> <def></def><sym>:=</sym> <def></def><num>4</num><def></def><sym>;</sym><br />
<def>   N</def> <sym>:</sym> <def></def><kwb>Natural</kwb> <def></def><sym>:=</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def>   Stretch_Tree</def> <sym>:</sym> <def>TreeNode</def><sym>;</sym><br />
<def>   Long_Lived_Tree</def> <sym>:</sym> <def>TreeNode</def><sym>;</sym><br />
<def>   Short_Lived_Tree_1</def> <sym>:</sym> <def>TreeNode</def><sym>;</sym><br />
<def>   Short_Lived_Tree_2</def> <sym>:</sym> <def>TreeNode</def><sym>;</sym><br />
<def>   Max_Depth</def> <sym>:</sym> <def></def><kwb>Positive</kwb><def></def><sym>;</sym><br />
<def>   Stretch_Depth</def> <sym>:</sym> <def></def><kwb>Positive</kwb><def></def><sym>;</sym><br />
<def>   Check</def> <sym>:</sym> <def></def><kwb>Integer</kwb><def></def><sym>;</sym><br />
<def>   Sum</def> <sym>:</sym> <def></def><kwb>Integer</kwb><def></def><sym>;</sym><br />
<def>   Depth</def> <sym>:</sym> <def></def><kwb>Natural</kwb><def></def><sym>;</sym><br />
<def>   Iterations</def> <sym>:</sym> <def></def><kwb>Positive</kwb><def></def><sym>;</sym><br />
<def></def><kwa>begin</kwa><br />
<def></def>   <kwa>if</kwa> <def>Argument_Count</def> <sym>&gt;</sym> <def></def><num>0</num> <def></def><kwa>then</kwa><br />
<def>      N</def> <sym>:=</sym> <def></def><kwb>Positive</kwb><def></def><sym>'</sym><def>Value</def><sym>(</sym><def>Argument</def><sym>(</sym><def></def><num>1</num><def></def><sym>));</sym><br />
<def></def>   <kwa>end if</kwa><def></def><sym>;</sym><br />
<def>   Max_Depth</def> <sym>:=</sym> <def></def><kwb>Positive</kwb><def></def><sym>'</sym><def>Max</def><sym>(</sym><def>Min_Depth</def> <sym>+</sym> <def></def><num>2</num><def></def><sym>,</sym> <def>N</def><sym>);</sym><br />
<def>   Stretch_Depth</def> <sym>:=</sym> <def>Max_Depth</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def>   Stretch_Tree</def> <sym>:=</sym> <def>Bottom_Up_Tree</def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def>Stretch_Depth</def><sym>);</sym><br />
<def>   Item_Check</def><sym>(</sym><def>Stretch_Tree</def><sym>,</sym> <def>Check</def><sym>);</sym><br />
<def>   Put</def><sym>(</sym><def></def><str>&quot;stretch tree of depth &quot;</str><def></def><sym>);</sym><br />
<def>   Put</def><sym>(</sym><def>Item</def> <sym>=&gt;</sym> <def>Stretch_Depth</def><sym>,</sym> <def>Width</def> <sym>=&gt;</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def>   Put</def><sym>(</sym><def>Ht</def> <sym>&amp;</sym> <def></def><str>&quot; check: &quot;</str><def></def><sym>);</sym><br />
<def>   Put</def><sym>(</sym><def>Item</def> <sym>=&gt;</sym> <def>Check</def><sym>,</sym> <def>Width</def> <sym>=&gt;</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def>   New_Line</def><sym>;</sym><br />
<def><br />
   Long_Lived_Tree</def> <sym>:=</sym> <def>Bottom_Up_Tree</def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def>Max_Depth</def><sym>);</sym><br />
<def><br />
   Depth</def> <sym>:=</sym> <def>Min_Depth</def><sym>;</sym><br />
<def></def>   <kwa>while</kwa> <def>Depth</def> <sym>&lt;=</sym> <def>Max_Depth</def> <kwa>loop</kwa><br />
<def>      Iterations</def> <sym>:=</sym> <def></def><num>2</num><def></def><sym>**(</sym><def>Max_Depth</def> <sym>-</sym> <def>Depth</def> <sym>+</sym> <def>Min_Depth</def><sym>);</sym><br />
<def>      Check</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>      <kwa>for</kwa> <def>I</def> <kwa>in</kwa> <def></def><num>1</num><def>..Iterations</def> <kwa>loop</kwa><br />
<def>         Short_Lived_Tree_1</def> <sym>:=</sym> <def>Bottom_Up_Tree</def><sym>(</sym><def>Item</def> <sym>=&gt;</sym> <def>I</def><sym>,</sym> <def>Depth</def> <sym>=&gt;</sym> <def>Depth</def><sym>);</sym><br />
<def>         Short_Lived_Tree_2</def> <sym>:=</sym> <def>Bottom_Up_Tree</def><sym>(</sym><def>Item</def> <sym>=&gt;-</sym><def>I</def><sym>,</sym> <def>Depth</def> <sym>=&gt;</sym> <def>Depth</def><sym>);</sym><br />
<def>         Item_Check</def><sym>(</sym><def>Short_Lived_Tree_1</def><sym>,</sym> <def>Sum</def><sym>);</sym><br />
<def>         Check</def> <sym>:=</sym> <def>check</def> <sym>+</sym> <def>Sum</def><sym>;</sym><br />
<def>         Item_Check</def><sym>(</sym><def>Short_Lived_Tree_2</def><sym>,</sym> <def>Sum</def><sym>);</sym><br />
<def>         Check</def> <sym>:=</sym> <def>Check</def> <sym>+</sym> <def>Sum</def><sym>;</sym><br />
<def></def>      <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def>      Put</def><sym>(</sym><def>Item</def> <sym>=&gt;</sym> <def>Iterations</def> <sym>*</sym> <def></def><num>2</num><def></def><sym>,</sym> <def>Width</def> <sym>=&gt;</sym> <def></def><num>0</num><def></def><sym>);</sym><br />
<def>      Put</def><sym>(</sym><def>Ht</def> <sym>&amp;</sym> <def></def><str>&quot; trees of depth &quot;</str><def></def><sym>);</sym><br />
<def>      Put</def><sym>(</sym><def>Item</def> <sym>=&gt;</sym> <def>Depth</def><sym>,</sym> <def>Width</def> <sym>=&gt;</sym> <def></def><num>0</num><def></def><sym>);</sym><br />
<def>      Put</def><sym>(</sym><def>Ht</def> <sym>&amp;</sym> <def></def><str>&quot; check: &quot;</str><def></def><sym>);</sym><br />
<def>      Put</def><sym>(</sym><def>Item</def> <sym>=&gt;</sym> <def>Check</def><sym>,</sym> <def>Width</def> <sym>=&gt;</sym> <def></def><num>0</num><def></def><sym>);</sym><br />
<def>      New_Line</def><sym>;</sym><br />
<def>      Depth</def> <sym>:=</sym> <def>Depth</def> <sym>+</sym> <def></def><num>2</num><def></def><sym>;</sym><br />
<def></def>   <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def>   Put</def><sym>(</sym><def></def><str>&quot;long lived tree of depth &quot;</str><def></def><sym>);</sym><br />
<def>   Put</def><sym>(</sym><def>Item</def> <sym>=&gt;</sym> <def>Max_Depth</def><sym>,</sym> <def>Width</def> <sym>=&gt;</sym> <def></def><num>0</num><def></def><sym>);</sym><br />
<def>   Put</def><sym>(</sym><def>Ht</def> <sym>&amp;</sym> <def></def><str>&quot; check: &quot;</str><def></def><sym>);</sym><br />
<def>   Item_Check</def><sym>(</sym><def>Long_Lived_Tree</def><sym>,</sym> <def>Check</def><sym>);</sym><br />
<def>   Put</def><sym>(</sym><def>Item</def> <sym>=&gt;</sym> <def>Check</def><sym>,</sym> <def>Width</def> <sym>=&gt;</sym> <def></def><num>0</num><def></def><sym>);</sym><br />
<def>   New_Line</def><sym>;</sym><br />
<def></def><kwa>end</kwa> <def>BinaryTrees</def><sym>;</sym><br />
<def></def><slc>----------------------------------------------------------------</slc><br />
<def></def><slc>-- BinaryTrees</slc><br />
<def></def><slc>--</slc><br />
<def></def><slc>-- Ada 95 (GNAT)</slc><br />
<def></def><slc>--</slc><br />
<def></def><slc>-- Contributed by Jim Rogers</slc><br />
<def></def><slc>----------------------------------------------------------------</slc><br />
<def></def><br />
<kwa>package</kwa> <def>Treenodes</def> <kwa>is</kwa><br />
<def></def>   <kwa>type</kwa> <def>Treenode</def> <kwa>is private</kwa><def></def><sym>;</sym><br />
<def></def>   <kwa>function</kwa> <def>Bottom_Up_Tree</def><sym>(</sym><def>Item</def> <sym>:</sym> <def></def><kwb>Integer</kwb><def></def><sym>;</sym> <def>Depth</def> <sym>:</sym> <def></def><kwb>Integer</kwb><def></def><sym>)</sym> <def></def><kwa>return</kwa> <def>Treenode</def><sym>;</sym><br />
<def></def>   <kwa>procedure</kwa> <def>Item_Check</def><sym>(</sym><def>This</def> <sym>:</sym> <def></def><kwa>in out</kwa> <def>Treenode</def><sym>;</sym> <def>Sum</def> <sym>:</sym> <def></def><kwa>out</kwa> <def></def><kwb>Integer</kwb><def></def><sym>);</sym><br />
<def></def><kwa>private</kwa><br />
<def></def>   <kwa>type</kwa> <def>Node</def><sym>;</sym><br />
<def></def>   <kwa>type</kwa> <def>Treenode</def> <kwa>is access</kwa> <def>Node</def><sym>;</sym><br />
<def></def>   <kwa>type</kwa> <def>Node</def> <kwa>is record</kwa><br />
<def>      Left</def>  <sym>:</sym> <def>Treenode</def> <sym>:=</sym> <def></def><kwa>null</kwa><def></def><sym>;</sym><br />
<def>      Right</def> <sym>:</sym> <def>Treenode</def> <sym>:=</sym> <def></def><kwa>null</kwa><def></def><sym>;</sym><br />
<def>      Item</def>  <sym>:</sym> <def></def><kwb>Integer</kwb>  <def></def><sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>   <kwa>end record</kwa><def></def><sym>;</sym><br />
<def></def><kwa>end</kwa> <def>Treenodes</def><sym>;</sym><br />
<def></def><slc>----------------------------------------------------------------</slc><br />
<def></def><slc>-- BinaryTrees</slc><br />
<def></def><slc>--</slc><br />
<def></def><slc>-- Ada 95 (GNAT)</slc><br />
<def></def><slc>--</slc><br />
<def></def><slc>-- Contributed by Jim Rogers</slc><br />
<def></def><slc>----------------------------------------------------------------</slc><br />
<def></def><br />
<kwa>with</kwa> <def>Ada.Unchecked_Deallocation</def><sym>;</sym><br />
<def></def><br />
<kwa>package body</kwa> <def>Treenodes</def> <kwa>is</kwa><br />
<def></def>   <kwa>function</kwa> <def>Bottom_Up_Tree</def><sym>(</sym><def>Item</def> <sym>:</sym> <def></def><kwb>Integer</kwb><def></def><sym>;</sym> <def>Depth</def> <sym>:</sym> <def></def><kwb>Integer</kwb><def></def><sym>)</sym><br />
<def></def>      <kwa>return</kwa> <def>Treenode</def> <kwa>is</kwa><br />
<def></def>   <kwa>begin</kwa><br />
<def></def>      <kwa>if</kwa> <def>Depth</def> <sym>&gt;</sym> <def></def><num>0</num> <def></def><kwa>then</kwa><br />
<def></def>         <kwa>return new</kwa> <def>Node</def><sym>'(</sym><def>Bottom_Up_Tree</def><sym>((</sym><def></def><num>2</num><def></def><sym>*</sym><def>Item</def><sym>) -</sym><def></def><num>1</num><def></def><sym>,</sym> <def>Depth</def> <sym>-</sym><def></def><num>1</num><def></def><sym>),</sym><br />
<def>            Bottom_Up_Tree</def><sym>(</sym><def></def><num>2</num> <def></def><sym>*</sym> <def>Item</def><sym>,</sym> <def>Depth</def> <sym>-</sym><def></def><num>1</num><def></def><sym>),</sym><br />
<def>            Item</def><sym>);</sym><br />
<def></def>      <kwa>else</kwa><br />
<def></def>         <kwa>return new</kwa> <def>Node</def><sym>'(</sym><def></def><kwa>null</kwa><def></def><sym>,</sym> <def></def><kwa>null</kwa><def></def><sym>,</sym> <def>Item</def><sym>);</sym><br />
<def></def>      <kwa>end if</kwa><def></def><sym>;</sym><br />
<def></def>   <kwa>end</kwa> <def>Bottom_Up_Tree</def><sym>;</sym><br />
<def></def><br />
   <kwa>procedure</kwa> <def>Item_Check</def> <sym>(</sym><def>This</def> <sym>:</sym> <def></def><kwa>in out</kwa> <def>Treenode</def><sym>;</sym> <def>Sum</def> <sym>:</sym> <def></def><kwa>out</kwa> <def></def><kwb>Integer</kwb><def></def><sym>)</sym> <def></def><kwa>is</kwa><br />
<def></def>      <kwa>procedure</kwa> <def>Free</def> <kwa>is new</kwa> <def>Ada.Unchecked_Deallocation</def><sym>(</sym><def>Node</def><sym>,</sym> <def>Treenode</def><sym>);</sym><br />
<def>      Left_Sum</def><sym>,</sym> <def>Right_Sum</def> <sym>:</sym> <def></def><kwb>Integer</kwb><def></def><sym>;</sym><br />
<def></def>   <kwa>begin</kwa><br />
<def></def>      <kwa>if</kwa> <def>This.Left</def> <sym>=</sym> <def></def><kwa>null then</kwa><br />
<def>         Sum</def> <sym>:=</sym> <def>This.Item</def><sym>;</sym><br />
<def></def>      <kwa>else</kwa><br />
<def>         Item_Check</def><sym>(</sym><def>This.Left</def><sym>,</sym> <def>Left_Sum</def><sym>);</sym><br />
<def>         Item_Check</def><sym>(</sym><def>This.Right</def><sym>,</sym> <def>Right_Sum</def><sym>);</sym><br />
<def>         Sum</def> <sym>:=</sym>  <def>This.Item</def> <sym>+</sym> <def>Left_Sum</def> <sym>-</sym> <def>Right_Sum</def><sym>;</sym><br />
<def></def>      <kwa>end if</kwa><def></def><sym>;</sym><br />
<def>      Free</def><sym>(</sym><def>This</def><sym>);</sym><br />
<def></def>   <kwa>end</kwa> <def>Item_Check</def><sym>;</sym><br />
<def></def><br />
<kwa>end</kwa> <def>Treenodes</def><sym>;</sym><def></def><br />
</source>
