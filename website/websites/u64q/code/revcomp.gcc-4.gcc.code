<source>
<def></def><com>/*</com><br />
<com> * The Computer Language Benchmarks Game</com><br />
<com> * http://shootout.alioth.debian.org</com><br />
<com> *</com><br />
<com> * contributed by Bob W</com><br />
<com> */</com><def></def><br />
<br />
<dir>#include &lt;stdio.h&gt;</dir><br />
<def></def><dir>#include &lt;stdlib.h&gt;</dir><br />
<def></def><br />
<dir>#define JBFSIZE 82</dir>      <slc>// line input buffer size</slc><br />
<dir></dir><def></def><dir>#define QBFSIZE 5200</dir>     <slc>// output buffer initial size</slc><br />
<dir></dir><def></def><dir>#define Z16</dir>     <dstr>&quot;\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0&quot;</dstr><dir></dir><br />
<def></def><dir>#define V32</dir>     <dstr>&quot;\0TVGH\0\0CD\0\0M\0KN\0\0\0YSA\0BW\0R\0\0\0\0\0\0&quot;</dstr><dir></dir><br />
<def></def><dir>#define VALL    Z16 Z16 Z16 Z16 V32 V32 Z16 Z16 Z16 Z16 Z16 Z16 Z16 Z16</dir><br />
<def></def><br />
<kwb>int</kwb> <def></def><kwd>errex</kwd><def></def><sym>(</sym><def></def><kwb>char</kwb> <def></def><sym>*</sym><def>s</def><sym>,</sym> <def></def><kwb>int</kwb> <def>n</def><sym>) {</sym>      <def></def><slc>// error message+value, return 1</slc><br />
<def></def>  <kwd>fprintf</kwd><def></def><sym>(</sym><def>stderr</def><sym>,</sym><def></def><str>&quot;</str><esc>\n</esc><str>*** Error: %s [%d]!</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def>s</def><sym>,</sym> <def>n</def><sym>);</sym><br />
<def></def>  <kwa>return</kwa> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<kwb>int</kwb> <def></def><kwd>main</kwd> <def></def><sym>() {</sym>                    <def></def><slc>// ***** main *****</slc><br />
<def></def>  <kwb>char</kwb> <def></def><sym>*</sym><def>pj</def><sym>, *</sym><def>pq</def><sym>, *</sym><def>pr</def><sym>;</sym>            <def></def><slc>// buffer pointers: inp,out,/out</slc><br />
<def></def>  <kwb>char</kwb> <def></def><sym>*</sym><def>jjj</def> <sym>=</sym> <def></def><kwd>malloc</kwd><def></def><sym>(</sym><def>JBFSIZE</def><sym>);</sym>   <def></def><slc>// allocate input line buffer</slc><br />
<def></def>  <kwb>char</kwb> <def></def><sym>*</sym><def>qqq</def> <sym>=</sym> <def></def><kwd>malloc</kwd><def></def><sym>(</sym><def>QBFSIZE</def><sym>);</sym>   <def></def><slc>// output buffer (dyn. size)</slc><br />
<def></def>  <kwb>char</kwb> <def></def><sym>*</sym><def>pqstop</def> <sym>=</sym> <def>qqq</def><sym>+</sym><def>QBFSIZE</def><sym>;</sym>    <def></def><slc>// end-of-buffer pointer</slc><br />
<def></def>  <kwb>char</kwb> <def>xtab</def><sym>[</sym><def></def><num>256</num><def></def><sym>] =</sym> <def>VALL</def><sym>;</sym>         <def></def><slc>// char conversion table</slc><br />
<def></def><br />
  <kwa>if</kwa> <def></def><sym>(!</sym><def>jjj</def> <sym>|| !</sym><def>qqq</def><sym>)</sym><br />
<def></def>    <kwa>return</kwa> <def></def><kwd>errex</kwd><def></def><sym>(</sym><def></def><str>&quot;Buffer allocation&quot;</str><def></def><sym>, !</sym><def>jjj</def> <sym>+ !</sym><def>qqq</def><sym>);</sym><br />
<def>  pj</def> <sym>=</sym> <def></def><kwd>fgets</kwd><def></def><sym>(</sym><def>jjj</def><sym>,</sym><def>JBFSIZE</def><sym>,</sym><def>stdin</def><sym>);</sym>         <def></def><slc>// fetch 1st line</slc><br />
<def></def>  <kwa>if</kwa> <def></def><sym>(!</sym><def>pj</def><sym>)</sym><br />
<def></def>    <kwa>return</kwa> <def></def><kwd>errex</kwd><def></def><sym>(</sym><def></def><str>&quot;No input data&quot;</str><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>);</sym><br />
<def></def>  <kwa>if</kwa> <def></def><sym>(*</sym><def>jjj</def> <sym>!=</sym> <def></def><str>'&gt;'</str><def></def><sym>)</sym><br />
<def></def>    <kwa>return</kwa> <def></def><kwd>errex</kwd><def></def><sym>(</sym><def></def><str>&quot;1st char not '&gt;'&quot;</str><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>);</sym><br />
<def></def><br />
  <kwa>while</kwa> <def></def><sym>(</sym><def>pj</def><sym>) {</sym>                           <def></def><slc>// MAIN LOOP: process data</slc><br />
<def></def>    <kwd>fputs</kwd><def></def><sym>(</sym><def>jjj</def><sym>,</sym> <def>stdout</def><sym>);</sym>                  <def></def><slc>// output ID line</slc><br />
<def></def><br />
    <kwa>for</kwa> <def></def><sym>(</sym><def>pq</def><sym>=</sym><def>qqq</def><sym>+</sym><def></def><num>1</num><def></def><sym>,</sym> <def>pr</def><sym>=</sym><def>pqstop</def><sym>; ;</sym> <def>pq</def><sym>++) {</sym>  <def></def><slc>// LOOP: fill output buffer</slc><br />
<def>      pj</def> <sym>=</sym> <def></def><kwd>fgets</kwd><def></def><sym>(</sym><def>jjj</def><sym>,</sym> <def>JBFSIZE</def><sym>,</sym> <def>stdin</def><sym>);</sym>   <def></def><slc>// get line from stdin</slc><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(!</sym><def>pj</def> <sym>|| (*</sym><def>jjj</def><sym>==</sym><def></def><str>'&gt;'</str><def></def><sym>))</sym>  <def></def><kwa>break</kwa><def></def><sym>;</sym>    <def></def><slc>// EOF or new ID line</slc><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>pr</def> <sym>&lt;= (</sym><def>pq</def><sym>+</sym><def></def><num>61</num><def></def><sym>)) {</sym>               <def></def><slc>// need to resize buffer</slc><br />
<def></def>        <kwb>char</kwb> <def></def><sym>*</sym><def>newstop</def> <sym>=</sym> <def>pqstop</def> <sym>+</sym> <def></def><num>12777888</num><def></def><sym>;</sym><br />
<def></def>        <kwb>char</kwb> <def></def><sym>*</sym><def>newptr</def>  <sym>=</sym> <def></def><kwd>realloc</kwd><def></def><sym>(</sym><def>qqq</def><sym>,</sym> <def>newstop</def><sym>-</sym><def>qqq</def><sym>);</sym><br />
<def></def>        <kwa>if</kwa> <def></def><sym>(!</sym><def>newptr</def><sym>)</sym><br />
<def></def>          <kwa>return</kwa> <def></def><kwd>errex</kwd><def></def><sym>(</sym><def></def><str>&quot;Out of memory&quot;</str><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>);</sym><br />
<def></def>        <kwa>if</kwa> <def></def><sym>(</sym><def>newptr</def> <sym>!=</sym> <def>qqq</def><sym>) {</sym>             <def></def><slc>// new base: adj. pointers</slc><br />
<def></def>          <kwb>size_t</kwb> <def>x</def> <sym>=</sym> <def>newptr</def><sym>-</sym><def>qqq</def><sym>;</sym>         <def></def><slc>// offset for pointer update</slc><br />
<def>          pq</def><sym>+=</sym><def>x</def><sym>;</sym>  <def>pr</def><sym>+=</sym><def>x</def><sym>;</sym>  <def>qqq</def><sym>+=</sym><def>x</def><sym>;</sym><br />
<def>          newstop</def><sym>+=</sym><def>x</def><sym>;</sym>  <def>pqstop</def><sym>+=</sym><def>x</def><sym>;</sym><br />
<def></def>        <sym>}</sym><br />
<def>        pr</def> <sym>=</sym> <def></def><kwd>__builtin_memmove</kwd><def></def><sym>(</sym><def>newstop</def><sym>-(</sym><def>pqstop</def><sym>-</sym><def>pr</def><sym>),</sym> <def>pr</def><sym>,</sym> <def>pqstop</def><sym>-</sym><def>pr</def><sym>);</sym><br />
<def>        pqstop</def> <sym>=</sym> <def>newstop</def><sym>;</sym>                <def></def><slc>// buffer resize complete</slc><br />
<def></def>      <sym>}</sym><br />
<def></def>      <kwa>while</kwa> <def></def><sym>(*</sym><def>pj</def><sym>) {</sym>                      <def></def><slc>// LOOP: conv. &amp; revert line</slc><br />
<def></def>        <kwb>char</kwb> <def>c</def> <sym>=</sym> <def>xtab</def><sym>[(</sym><def></def><kwb>unsigned char</kwb><def></def><sym>)(*</sym><def>pj</def><sym>++)];</sym><br />
<def></def>        <kwa>if</kwa> <def></def><sym>(</sym><def>c</def><sym>)</sym>                           <def></def><slc>// conversion valid</slc><br />
<def></def>          <sym>*(--</sym><def>pr</def><sym>) =</sym> <def>c</def><sym>;</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <kwa>for</kwa> <def></def><sym>(</sym><def>pq</def> <sym>=</sym> <def>qqq</def><sym>;</sym> <def>pr</def><sym>&lt;</sym><def>pqstop</def><sym>; ) {</sym>        <def></def><slc>// LOOP: format output</slc><br />
<def></def>      <kwb>size_t</kwb> <def>x</def> <sym>= (</sym><def>pqstop</def><sym>-</sym><def>pr</def><sym>)&lt;</sym><def></def><num>60</num> <def>? pqstop</def><sym>-</sym><def>pr</def> <sym>:</sym> <def></def><num>60</num><def></def><sym>;</sym><br />
<def></def>      <kwd>__builtin_memmove</kwd><def></def><sym>(</sym><def>pq</def><sym>,</sym><def>pr</def><sym>,</sym><def>x</def><sym>);</sym>        <def></def><slc>// move line to free space</slc><br />
<def>      pr</def><sym>+=</sym><def>x</def><sym>;</sym>  <def>pq</def><sym>+=</sym><def>x</def><sym>;  *(</sym><def>pq</def><sym>++) =</sym> <def></def><num>0xA</num><def></def><sym>;</sym>     <def></def><slc>// adjust pointers, add LF</slc><br />
<def></def>    <sym>}</sym><br />
<def></def>    <kwd>fwrite</kwd><def></def><sym>(</sym><def>qqq</def><sym>,</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>pq</def><sym>-</sym><def>qqq</def><sym>,</sym> <def>stdout</def><sym>);</sym>      <def></def><slc>// output converted data</slc><br />
<def></def>  <sym>}</sym><br />
<def></def>  <kwa>return</kwa> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
