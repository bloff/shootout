<source>
<def></def><com>(*</com><br />
<com> *</com><br />
<com> * The Great Computer Language Shootout</com><br />
<com> * http://shootout.alioth.debian.org/</com><br />
<com> *</com><br />
<com> * Contributed by Sebastien Loisel</com><br />
<com> * Cleanup by Troestler Christophe</com><br />
<com> * Translated to SML by sweeks@sweeks.com</com><br />
<com> *)</com><def></def><br />
<br />
<kwa>val</kwa> <def>sub</def> <sym>=</sym> <def>Array.sub</def><br />
<kwa>val</kwa> <def>update</def> <sym>=</sym> <def>Array.update</def><br />
<br />
<kwa>fun</kwa> <def>eval_A</def> <sym>(</sym><def>i</def><sym>,</sym> <def>j</def><sym>) =</sym> <def></def><num>1.0</num> <def></def><sym>/</sym> <def></def><kwa>Real</kwa><def>.fromInt</def> <sym>((</sym><def>i</def><sym>+</sym><def>j</def><sym>)*(</sym><def>i</def><sym>+</sym><def>j</def><sym>+</sym><def></def><num>1</num><def></def><sym>)</sym> <def>div</def> <num>2</num><def></def><sym>+</sym><def>i</def><sym>+</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def></def><br />
<kwa>fun</kwa> <def>eval_A_times_u</def> <sym>(</sym><def>u</def><sym>,</sym> <def>v</def><sym>) =</sym><br />
<def></def>  <kwa>let</kwa><br />
<def></def>     <kwa>val</kwa> <def>n</def> <sym>=</sym> <def>Array.length v</def><br />
  <kwa>in</kwa><br />
<def>     for</def> <sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def>n</def><sym>,</sym> <def></def><kwa>fn</kwa> <def>i</def> <sym>=&gt;</sym><br />
<def></def>	  <sym>(</sym><def>update</def> <sym>(</sym><def>v</def><sym>,</sym> <def>i</def><sym>,</sym> <def></def><num>0.0</num><def></def><sym>)</sym><br />
<def></def>	   <sym>;</sym> <def>for</def> <sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def>n</def><sym>,</sym> <def></def><kwa>fn</kwa> <def>j</def> <sym>=&gt;</sym><br />
<def>		  update</def> <sym>(</sym><def>v</def><sym>,</sym> <def>i</def><sym>,</sym> <def>sub</def> <sym>(</sym><def>v</def><sym>,</sym> <def>i</def><sym>) +</sym> <def>eval_A</def> <sym>(</sym><def>i</def><sym>,</sym> <def>j</def><sym>) *</sym> <def>sub</def> <sym>(</sym><def>u</def><sym>,</sym> <def>j</def><sym>)))))</sym><br />
<def></def>  <kwa>end</kwa><br />
<def></def><br />
<kwa>fun</kwa> <def>eval_At_times_u</def> <sym>(</sym><def>u</def><sym>,</sym> <def>v</def><sym>) =</sym><br />
<def></def>   <kwa>let</kwa><br />
<def></def>      <kwa>val</kwa> <def>n</def> <sym>=</sym> <def>Array.length v</def><br />
   <kwa>in</kwa><br />
<def>      for</def> <sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def>n</def><sym>,</sym> <def></def><kwa>fn</kwa> <def>i</def> <sym>=&gt;</sym><br />
<def></def>	   <sym>(</sym><def>update</def> <sym>(</sym><def>v</def><sym>,</sym> <def>i</def><sym>,</sym> <def></def><num>0.0</num><def></def><sym>)</sym><br />
<def></def>	    <sym>;</sym> <def>for</def> <sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def>n</def><sym>,</sym> <def></def><kwa>fn</kwa> <def>j</def> <sym>=&gt;</sym><br />
<def>		   update</def> <sym>(</sym><def>v</def><sym>,</sym> <def>i</def><sym>,</sym> <def>sub</def> <sym>(</sym><def>v</def><sym>,</sym> <def>i</def><sym>) +</sym> <def>eval_A</def> <sym>(</sym><def>j</def><sym>,</sym> <def>i</def><sym>) *</sym> <def>sub</def> <sym>(</sym><def>u</def><sym>,</sym> <def>j</def><sym>)))))</sym><br />
<def></def>   <kwa>end</kwa><br />
<def></def><br />
<kwa>fun</kwa> <def>eval_AtA_times_u</def> <sym>(</sym><def>u</def><sym>,</sym> <def>v</def><sym>) =</sym><br />
<def></def>   <kwa>let</kwa><br />
<def></def>      <kwa>val</kwa> <def>w</def> <sym>=</sym> <def>Array.array</def> <sym>(</sym><def>Array.length u</def><sym>,</sym> <def></def><num>0.0</num><def></def><sym>)</sym><br />
<def></def>   <kwa>in</kwa><br />
<def>      eval_A_times_u</def> <sym>(</sym><def>u</def><sym>,</sym> <def>w</def><sym>)</sym><br />
<def></def>      <sym>;</sym> <def>eval_At_times_u</def> <sym>(</sym><def>w</def><sym>,</sym> <def>v</def><sym>)</sym><br />
<def></def>   <kwa>end</kwa><br />
<def></def><br />
<kwa>val</kwa> <def>n</def> <sym>=</sym> <def>valOf</def> <sym>(</sym><def></def><kwa>Int</kwa><def>.fromString</def> <sym>(</sym><def>hd</def> <sym>(</sym><def>CommandLine.arguments</def> <sym>())))</sym> <def></def><kwa>handle</kwa> <def>_</def> <sym>=&gt;</sym> <def></def><num>1</num><br />
<def></def><kwa>val</kwa> <def>u</def> <sym>=</sym> <def>Array.array</def> <sym>(</sym><def>n</def><sym>,</sym> <def></def><num>1.0</num><def></def><sym>)</sym><br />
<def></def><kwa>val</kwa> <def>v</def> <sym>=</sym> <def>Array.array</def> <sym>(</sym><def>n</def><sym>,</sym> <def></def><num>0.0</num><def></def><sym>)</sym><br />
<def></def><kwa>val</kwa> <def></def><sym>() =</sym> <def>for</def> <sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def></def><num>10</num><def></def><sym>,</sym> <def></def><kwa>fn</kwa> <def>_</def> <sym>=&gt; (</sym><def>eval_AtA_times_u</def> <sym>(</sym><def>u</def><sym>,</sym> <def>v</def><sym>);</sym> <def>eval_AtA_times_u</def> <sym>(</sym><def>v</def><sym>,</sym> <def>u</def><sym>)))</sym><br />
<def></def><br />
<kwa>val</kwa> <def>vv</def> <sym>=</sym> <def>ref</def> <num>0.0</num><br />
<def></def><kwa>val</kwa> <def>vBv</def> <sym>=</sym> <def>ref</def> <num>0.0</num><br />
<def></def><kwa>val</kwa> <def></def><sym>() =</sym><br />
<def>   for</def> <sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def>n</def><sym>,</sym> <def></def><kwa>fn</kwa> <def>i</def> <sym>=&gt;</sym><br />
<def></def>	<sym>(</sym><def>vv</def> <sym>:= !</sym><def>vv</def> <sym>+</sym> <def>sub</def> <sym>(</sym><def>v</def><sym>,</sym> <def>i</def><sym>) *</sym> <def>sub</def> <sym>(</sym><def>v</def><sym>,</sym> <def>i</def><sym>)</sym><br />
<def></def>	<sym>;</sym> <def>vBv</def> <sym>:= !</sym><def>vBv</def> <sym>+</sym> <def>sub</def> <sym>(</sym><def>u</def><sym>,</sym> <def>i</def><sym>) *</sym> <def>sub</def> <sym>(</sym><def>v</def><sym>,</sym> <def>i</def><sym>)))</sym><br />
<def></def><br />
<kwa>val</kwa> <def></def><sym>() =</sym> <def>print</def> <sym>(</sym><def>concat</def> <sym>[</sym><def></def><kwa>Real</kwa><def>.fmt</def> <sym>(</sym><def></def><kwa>StringCvt</kwa><def>.FIX</def> <sym>(</sym><def>SOME</def> <num>9</num><def></def><sym>))</sym><br />
<def></def>			<sym>(</sym><def></def><kwa>Real</kwa><def>.Math.sqrt</def> <sym>(!</sym><def>vBv</def> <sym>/ !</sym><def>vv</def><sym>)),</sym><br />
<def></def>			<str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>])</sym><def></def><br />
</source>
