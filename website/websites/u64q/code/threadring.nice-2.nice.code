<source>
<def></def><com>/* The Computer Language Benchmarks Game</com><br />
<com> * http://shootout.alioth.debian.org/</com><br />
<com> * following an idea by Klaus Friedel</com><br />
<com> * contributed by Isaac Gouy</com><br />
<com> */</com><def></def><br />
<br />
<kwa>import</kwa> <def>java</def><sym>.</sym><def>util</def><sym>.</sym><def>concurrent</def><sym>.</sym><def>locks</def><sym>.*;</sym><br />
<def></def><br />
<kwa>let</kwa> <def></def><kwb>int</kwb> <def>numberOfThreads</def> <sym>=</sym> <def></def><num>503</num><def></def><sym>;</sym><br />
<def></def><br />
<kwa>let</kwa> <def>NamedThread</def><sym>[]</sym> <def>threadRing</def> <sym>=</sym><br />
<def>   fill</def><sym>(</sym><def></def><kwa>new</kwa> <def>NamedThread</def><sym>[</sym><def>numberOfThreads</def><sym>],</sym> <def></def><kwb>int</kwb> <def>i</def> <sym>=&gt;</sym> <def></def><kwa>new</kwa> <def>NamedThread</def><sym>(</sym><def>name</def><sym>:</sym> <def>i</def><sym>+</sym><def></def><num>1</num><def></def><sym>));</sym><br />
<def></def><br />
<kwb>void</kwb> <def>main</def><sym>(</sym><def>String</def><sym>[]</sym> <def>args</def><sym>){</sym><br />
<def></def>   <kwa>for</kwa> <def></def><sym>(</sym><def>t</def> <sym>:</sym> <def>threadRing</def><sym>)</sym> <def>t</def><sym>.</sym><def>start</def><sym>();</sym><br />
<def>   threadRing</def><sym>[</sym><def></def><num>0</num><def></def><sym>].</sym><def>takeToken</def><sym>(</sym> <def>Integer</def><sym>.</sym><def>parseInt</def><sym>(</sym><def>args</def><sym>[</sym><def></def><num>0</num><def></def><sym>]) );</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<br />
<kwa>class</kwa> <def>NamedThread</def> <kwa>extends</kwa> <def>Thread</def> <sym>{</sym><br />
<def></def>   <kwa>private</kwa> <def></def><kwb>int</kwb> <def>name</def><sym>;</sym><br />
<def></def>   <kwa>private</kwa> <def></def><kwb>int</kwb> <def>token</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def><br />
   override</def> <kwb>void</kwb> <def>run</def><sym>() {</sym><br />
<def></def>      <kwa>while</kwa> <def></def><sym>(</sym> <def>this</def><sym>.</sym><def>tokenNotDone</def><sym>() )</sym><br />
<def>         this</def><sym>.</sym><def>nextThread</def><sym>().</sym><def>takeToken</def><sym>(</sym><def>token</def><sym>-</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def><br />
      println</def><sym>(</sym><def>name</def><sym>);</sym><br />
<def>      System</def><sym>.</sym><def>exit</def><sym>(</sym><def></def><num>0</num><def></def><sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwb>boolean</kwb> <def>tokenNotDone</def><sym>() {</sym><br />
<def>      LockSupport</def><sym>.</sym><def>park</def><sym>();</sym><br />
<def></def>      <kwa>return</kwa> <def>token</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwb>void</kwb> <def>takeToken</def><sym>(</sym><def></def><kwb>int</kwb> <def>x</def><sym>) {</sym><br />
<def>      token</def> <sym>=</sym> <def>x</def><sym>;</sym><br />
<def>      LockSupport</def><sym>.</sym><def>unpark</def><sym>(</sym><def>this</def><sym>);</sym><br />
<def></def>   <sym>}</sym><br />
<def><br />
   NamedThread nextThread</def><sym>() =</sym> <def>threadRing</def><sym>[</sym> <def>name</def> <sym>%</sym> <def>numberOfThreads</def> <sym>];</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
</source>
