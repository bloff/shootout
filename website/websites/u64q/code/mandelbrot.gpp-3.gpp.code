<source>
<def></def><com>/* The Computer Language Shootout</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com>   contributed by Greg Buchholz</com><br />
<com>   compile:  g++ -O3</com><br />
<com>*/</com><def></def><br />
<br />
<dir>#include&lt;iostream&gt;</dir><br />
<def></def><dir>#include&lt;complex&gt;</dir><br />
<def></def><br />
<kwb>int</kwb> <def></def><kwd>main</kwd> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>argc</def><sym>,</sym> <def></def><kwb>char</kwb> <def></def><sym>**</sym><def>argv</def><sym>)</sym><br />
<def></def><sym>{</sym><br />
<def></def>  <kwb>char</kwb>  <def>bit_num</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>byte_acc</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>  <kwb>const int</kwb> <def>iter</def> <sym>=</sym> <def></def><num>50</num><def></def><sym>;</sym><br />
<def></def>  <kwb>const double</kwb> <def>lim</def> <sym>=</sym> <def></def><num>2.0</num> <def></def><sym>*</sym> <def></def><num>2.0</num><def></def><sym>;</sym><br />
<def><br />
  std</def><sym>::</sym><def>ios_base</def><sym>::</sym><def></def><kwd>sync_with_stdio</kwd><def></def><sym>(</sym><def></def><kwa>false</kwa><def></def><sym>);</sym><br />
<def></def>  <kwb>int</kwb> <def>n</def> <sym>=</sym> <def></def><kwd>atoi</kwd><def></def><sym>(</sym><def>argv</def><sym>[</sym><def></def><num>1</num><def></def><sym>]);</sym><br />
<def><br />
  std</def><sym>::</sym><def>cout</def> <sym>&lt;&lt;</sym> <def></def><str>&quot;P4</str><esc>\n</esc><str>&quot;</str><def></def> <sym>&lt;&lt;</sym> <def>n</def> <sym>&lt;&lt;</sym> <def></def><str>&quot; &quot;</str><def></def> <sym>&lt;&lt;</sym> <def>n</def> <sym>&lt;&lt;</sym> <def>std</def><sym>::</sym><def>endl</def><sym>;</sym><br />
<def></def><br />
  <kwa>for</kwa><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>y</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>y</def><sym>&lt;</sym><def>n</def><sym>; ++</sym><def>y</def><sym>)</sym><br />
<def></def>    <kwa>for</kwa><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>x</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>x</def><sym>&lt;</sym><def>n</def><sym>; ++</sym><def>x</def><sym>)</sym><br />
<def></def>    <sym>{</sym><br />
<def>       std</def><sym>::</sym><def></def><kwb>complex</kwb><def></def><sym>&lt;</sym><def></def><kwb>double</kwb><def></def><sym>&gt;</sym> <def></def><kwd>Z</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>),</sym><def></def><kwd>C</kwd><def></def><sym>(</sym><def></def><num>2</num><def></def><sym>*(</sym><def></def><kwb>double</kwb><def></def><sym>)</sym><def>x</def><sym>/</sym><def>n</def> <sym>-</sym> <def></def><num>1.5</num><def></def><sym>,</sym> <def></def><num>2</num><def></def><sym>*(</sym><def></def><kwb>double</kwb><def></def><sym>)</sym><def>y</def><sym>/</sym><def>n</def> <sym>-</sym> <def></def><num>1.0</num><def></def><sym>);</sym><br />
<def></def><br />
       <slc>//manually inlining &quot;norm&quot; results in a 5x-7x speedup on gcc</slc><br />
<def></def>       <kwa>for</kwa><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>i</def><sym>&lt;</sym><def>iter</def> <kwa>and</kwa> <def>Z</def><sym>.</sym><def></def><kwd>real</kwd><def></def><sym>()*</sym><def>Z</def><sym>.</sym><def></def><kwd>real</kwd><def></def><sym>() +</sym> <def>Z</def><sym>.</sym><def></def><kwd>imag</kwd><def></def><sym>()*</sym><def>Z</def><sym>.</sym><def></def><kwd>imag</kwd><def></def><sym>() &lt;=</sym> <def>lim</def><sym>; ++</sym><def>i</def><sym>)</sym><br />
<def>         Z</def> <sym>=</sym> <def>Z</def><sym>*</sym><def>Z</def> <sym>+</sym> <def>C</def><sym>;</sym><br />
<def><br />
       byte_acc</def> <sym>= (</sym><def>byte_acc</def> <sym>&lt;&lt;</sym> <def></def><num>1</num><def></def><sym>) | ((</sym><def></def><kwd>norm</kwd><def></def><sym>(</sym><def>Z</def><sym>) &gt;</sym> <def>lim</def><sym>)</sym> <def>?</def> <num>0x00</num><def></def><sym>:</sym><def></def><num>0x01</num><def></def><sym>);</sym><br />
<def></def><br />
       <kwa>if</kwa><def></def><sym>(++</sym><def>bit_num</def> <sym>==</sym> <def></def><num>8</num><def></def><sym>){</sym> <def>std</def><sym>::</sym><def>cout</def> <sym>&lt;&lt;</sym> <def>byte_acc</def><sym>;</sym> <def>bit_num</def> <sym>=</sym> <def>byte_acc</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>; }</sym><br />
<def></def>       <kwa>else if</kwa><def></def><sym>(</sym><def>x</def> <sym>==</sym> <def>n</def><sym>-</sym><def></def><num>1</num><def></def><sym>) {</sym> <def>byte_acc</def>  <sym>&lt;&lt;= (</sym><def></def><num>8</num><def></def><sym>-</sym><def>n</def><sym>%</sym><def></def><num>8</num><def></def><sym>);</sym><br />
<def>                           std</def><sym>::</sym><def>cout</def> <sym>&lt;&lt;</sym> <def>byte_acc</def><sym>;</sym><br />
<def>                           bit_num</def> <sym>=</sym> <def>byte_acc</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>; }</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
