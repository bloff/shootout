<source>
<def></def><slc># The Computer Language Shootout</slc><br />
<def></def><slc># http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>#</slc><br />
<def></def><slc># Contributed by Sokolov Yura</slc><br />
<def></def><br />
<kwa>from</kwa> <def>sys</def> <kwa>import</kwa> <def>argv</def><br />
<kwa>def</kwa> <def></def><kwd>fannkuch</kwd><def></def><sym>(</sym><def>n</def><sym>):</sym><br />
<def>   count</def> <sym>=</sym> <def></def><kwb>range</kwb><def></def><sym>(</sym><def></def><num>1</num><def></def><sym>,</sym><def>n</def><sym>+</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def>   maxFlipsCount</def><sym>,</sym> <def>m</def><sym>,</sym> <def>r</def><sym>,</sym> <def>check</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>n</def><sym>-</sym><def></def><num>1</num><def></def><sym>,</sym> <def>n</def><sym>,</sym> <def></def><num>0</num><br />
<def><br />
   perm1</def> <sym>=</sym> <def></def><kwb>range</kwb><def></def><sym>(</sym><def>n</def><sym>)</sym><br />
<def>   perm</def>  <sym>=</sym> <def></def><kwb>range</kwb><def></def><sym>(</sym><def>n</def><sym>)</sym><br />
<def>   perm1_ins</def> <sym>=</sym> <def>perm1</def><sym>.</sym><def>insert<br />
   perm1_pop</def> <sym>=</sym> <def>perm1</def><sym>.</sym><def>pop</def><br />
   <kwa>while True</kwa><def></def><sym>:</sym><br />
<def></def>      <kwa>if</kwa> <def>check</def> <sym>&lt;</sym> <def></def><num>30</num><def></def><sym>:</sym><br />
<def></def>         <kwa>print</kwa> <def></def><str>&quot;&quot;</str><def></def><sym>.</sym><def></def><kwd>join</kwd><def></def><sym>(</sym><def>`i</def><sym>+</sym><def></def><num>1</num><def>`</def> <kwa>for</kwa> <def>i</def> <kwa>in</kwa> <def>perm1</def><sym>)</sym><br />
<def>         check</def> <sym>+=</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def><br />
      <kwa>while</kwa> <def>r</def> <sym>!=</sym> <def></def><num>1</num><def></def><sym>:</sym><br />
<def>         count</def><sym>[</sym><def>r</def><sym>-</sym><def></def><num>1</num><def></def><sym>] =</sym> <def>r<br />
         r</def> <sym>-=</sym> <def></def><num>1</num><br />
<def></def><br />
      <kwa>if</kwa> <def>perm1</def><sym>[</sym><def></def><num>0</num><def></def><sym>] !=</sym> <def></def><num>0</num> <def></def><kwa>and</kwa> <def>perm1</def><sym>[</sym><def>m</def><sym>] !=</sym> <def>m</def><sym>:</sym><br />
<def>         perm</def><sym>[:]=</sym><def>perm1<br />
         flipsCount</def> <sym>=</sym> <def></def><num>0</num><br />
<def>         k</def> <sym>=</sym> <def>perm</def><sym>[</sym><def></def><num>0</num><def></def><sym>]</sym><br />
<def></def>         <kwa>while</kwa> <def>k</def><sym>:</sym><br />
<def>            perm</def><sym>[:</sym><def>k</def><sym>+</sym><def></def><num>1</num><def></def><sym>] =</sym> <def>perm</def><sym>[</sym><def>k</def><sym>::-</sym><def></def><num>1</num><def></def><sym>]</sym><br />
<def>            flipsCount</def> <sym>+=</sym> <def></def><num>1</num><br />
<def>            k</def> <sym>=</sym> <def>perm</def><sym>[</sym><def></def><num>0</num><def></def><sym>]</sym><br />
<def></def><br />
         <kwa>if</kwa> <def>flipsCount</def> <sym>&gt;</sym> <def>maxFlipsCount</def><sym>:</sym><br />
<def>            maxFlipsCount</def> <sym>=</sym> <def>flipsCount<br />
            maxPerm</def> <sym>=</sym> <def></def><kwb>list</kwb><def></def><sym>(</sym><def>perm1</def><sym>)</sym><br />
<def></def><br />
      <kwa>while True</kwa><def></def><sym>:</sym><br />
<def></def>         <kwa>if</kwa> <def>r</def> <sym>==</sym> <def>n</def><sym>:</sym> <def></def><kwa>return</kwa> <def>maxFlipsCount</def><br />
         <kwd>perm1_ins</kwd><def></def><sym>(</sym><def>r</def><sym>,</sym><def></def><kwd>perm1_pop</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>))</sym><br />
<def>         count</def><sym>[</sym><def>r</def><sym>] -=</sym> <def></def><num>1</num><br />
<def></def>         <kwa>if</kwa> <def>count</def><sym>[</sym><def>r</def><sym>] &gt;</sym> <def></def><num>0</num><def></def><sym>:</sym> <def></def><kwa>break</kwa><br />
<def>         r</def> <sym>+=</sym> <def></def><num>1</num><br />
<def></def><br />
<kwa>def</kwa> <def></def><kwd>main</kwd><def></def><sym>():</sym><br />
<def>    n</def> <sym>=</sym> <def></def><kwb>int</kwb><def></def><sym>(</sym><def>argv</def> <kwa>and</kwa> <def>argv</def><sym>[</sym><def></def><num>1</num><def></def><sym>]</sym> <def></def><kwa>or</kwa> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>    <kwa>print</kwa> <def></def><str>&quot;Pfannkuchen(%d) = %d</str><esc>\n</esc><str>&quot;</str><def></def><sym>%(</sym><def>n</def><sym>,</sym><def></def><kwd>fannkuch</kwd><def></def><sym>(</sym><def>n</def><sym>)),</sym><br />
<def></def><br />
<kwa>if</kwa> <def>__name__</def><sym>==</sym><def></def><str>&quot;__main__&quot;</str><def></def><sym>:</sym><br />
<def></def>    <kwd>main</kwd><def></def><sym>()</sym><br />
<def></def><br />
</source>
