<source>
<def></def><com>(* knucleotide.ml</com><br />
<com> *</com><br />
<com> * The Great Computer Language Shootout</com><br />
<com> * http://shootout.alioth.debian.org/</com><br />
<com> *</com><br />
<com> * Contributed by Troestler Christophe</com><br />
<com> *)</com><def></def><br />
<br />
<kwa>module</kwa> <def></def><kwd>S</kwd> <def></def><sym>=</sym> <def></def><kwa>struct</kwa><br />
<def></def>  <kwa>type</kwa> <def>t</def> <sym>=</sym> <def></def><kwb>string</kwb><br />
<def></def><br />
  <kwa>let</kwa> <def>size</def> <sym>=</sym> <def></def><num>0x40000</num><br />
<def></def><br />
  <kwa>let</kwa> <def>equal</def> <sym>(</sym><def>s1</def><sym>:</sym><def></def><kwb>string</kwb><def></def><sym>)</sym> <def>s2</def> <sym>= (</sym><def>s1</def> <sym>=</sym> <def>s2</def><sym>)</sym><br />
<def></def><br />
  <kwa>let</kwa> <def>hash s</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa> <def>h</def> <sym>=</sym> <def></def><kwb>ref</kwb> <def></def><num>0</num> <def></def><kwa>in</kwa><br />
<def></def>    <kwa>for</kwa> <def>i</def> <sym>=</sym> <def></def><num>0</num> <def></def><kwa>to</kwa> <def></def><kwc>String</kwc><def></def><sym>.</sym><def>length s</def> <sym>-</sym> <def></def><num>1</num> <def></def><kwa>do</kwa> <def>h</def> <sym>:= !</sym><def>h</def> <sym>*</sym> <def></def><num>5</num> <def></def><sym>+</sym> <def></def><kwc>Char</kwc><def></def><sym>.</sym><def>code s</def><sym>.[</sym><def>i</def><sym>]</sym> <def></def><kwa>done</kwa><def></def><sym>;</sym><br />
<def></def>    <sym>!</sym><def>h</def><br />
<kwa>end</kwa><br />
<def></def><br />
<kwa>module</kwa> <def></def><kwd>H</kwd> <def></def><sym>=</sym> <def></def><kwc>Hashtbl</kwc><def></def><sym>.</sym><def></def><kwd>Make</kwd><def></def><sym>(</sym><def></def><kwd>S</kwd><def></def><sym>)</sym><br />
<def></def><br />
<com>(* [counts k dna] fills and return the hashtable [count] of</com><br />
<com>   k-nucleotide keys and count values for a particular reading-frame</com><br />
<com>   of length [k] of the string [dna].  Keys point to mutable values</com><br />
<com>   for speed (to avoid looking twice the same key to reinsert the</com><br />
<com>   value). *)</com><def></def><br />
<kwa>let</kwa> <def>count</def> <sym>=</sym> <def></def><kwc>H</kwc><def></def><sym>.</sym><def>create</def> <kwc>S</kwc><def></def><sym>.</sym><def>size</def><br />
<kwa>let</kwa> <def>counts k dna</def> <sym>=</sym><br />
<def></def>  <kwc>H</kwc><def></def><sym>.</sym><def>clear count</def><sym>;</sym><br />
<def></def>  <kwa>for</kwa> <def>i</def> <sym>=</sym> <def></def><num>0</num> <def></def><kwa>to</kwa> <def></def><kwc>String</kwc><def></def><sym>.</sym><def>length dna</def> <sym>-</sym> <def>k</def> <kwa>do</kwa><br />
<def></def>    <kwa>let</kwa> <def>key</def> <sym>=</sym> <def></def><kwc>String</kwc><def></def><sym>.</sym><def>sub dna i k</def> <kwa>in</kwa><br />
<def></def>    <kwa>try</kwa> <def>incr</def><sym>(</sym><def></def><kwc>H</kwc><def></def><sym>.</sym><def>find count key</def><sym>)</sym> <def></def><kwa>with</kwa> <def></def><kwd>Not_found</kwd> <def></def><sym>-&gt;</sym> <def></def><kwc>H</kwc><def></def><sym>.</sym><def>add count key</def> <sym>(</sym><def></def><kwb>ref</kwb> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>  <kwa>done</kwa><def></def><sym>;</sym><br />
<def>  count</def><br />
<br />
<com>(* [write_frequencies k dna] writes the frequencies for a</com><br />
<com>   reading-frame of length [k] sorted by descending frequency and then</com><br />
<com>   ascending k-nucleotide key. *)</com><def></def><br />
<kwa>let</kwa> <def>compare_freq</def> <sym>((</sym><def>k1</def><sym>:</sym><def></def><kwb>string</kwb><def></def><sym>),(</sym><def>f1</def><sym>:</sym><def></def><kwb>float</kwb><def></def><sym>)) (</sym><def>k2</def><sym>,</sym> <def>f2</def><sym>) =</sym><br />
<def></def>  <kwa>if</kwa> <def>f1</def> <sym>&gt;</sym> <def>f2</def> <kwa>then</kwa> <def></def><sym>-</sym><def></def><num>1</num> <def></def><kwa>else if</kwa> <def>f1</def> <sym>&lt;</sym> <def>f2</def> <kwa>then</kwa> <def></def><num>1</num> <def></def><kwa>else</kwa> <def>compare k1 k2</def><br />
<br />
<kwa>let</kwa> <def>write_frequencies k dna</def> <sym>=</sym><br />
<def></def>  <kwa>let</kwa> <def>cnt</def> <sym>=</sym> <def>counts k dna</def> <kwa>in</kwa><br />
<def></def>  <kwa>let</kwa> <def>tot</def> <sym>=</sym> <def></def><kwb>float</kwb><def></def><sym>(</sym><def></def><kwc>H</kwc><def></def><sym>.</sym><def>fold</def> <sym>(</sym><def></def><kwa>fun</kwa> <def>_ n t</def> <sym>-&gt; !</sym><def>n</def> <sym>+</sym> <def>t</def><sym>)</sym> <def>cnt</def> <num>0</num><def></def><sym>)</sym> <def></def><kwa>in</kwa><br />
<def></def>  <kwa>let</kwa> <def>frq</def> <sym>=</sym> <def></def><kwc>H</kwc><def></def><sym>.</sym><def>fold</def> <sym>(</sym><def></def><kwa>fun</kwa> <def>k n l</def> <sym>-&gt; (</sym><def>k</def><sym>,</sym> <def></def><num>100</num><def></def><sym>. *.</sym> <def></def><kwb>float</kwb> <def></def><sym>!</sym><def>n</def> <sym>/.</sym> <def>tot</def><sym>) ::</sym> <def>l</def><sym>)</sym> <def>cnt</def> <sym>[]</sym> <def></def><kwa>in</kwa><br />
<def></def>  <kwa>let</kwa> <def>frq</def> <sym>=</sym> <def></def><kwc>List</kwc><def></def><sym>.</sym><def>sort compare_freq frq</def> <kwa>in</kwa><br />
<def></def>  <kwc>List</kwc><def></def><sym>.</sym><def>iter</def> <sym>(</sym><def></def><kwa>fun</kwa> <def></def><sym>(</sym><def>k</def><sym>,</sym><def>f</def><sym>) -&gt;</sym> <def></def><kwc>Printf</kwc><def></def><sym>.</sym><def>printf</def> <str>&quot;%s %.3f</str><esc>\n</esc><str>&quot;</str><def> k f</def><sym>)</sym> <def>frq</def><sym>;</sym><br />
<def>  print_string</def> <str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><br />
<br />
<kwa>let</kwa> <def>write_count seq dna</def> <sym>=</sym><br />
<def></def>  <kwa>let</kwa> <def>cnt</def> <sym>=</sym> <def>counts</def> <sym>(</sym><def></def><kwc>String</kwc><def></def><sym>.</sym><def>length seq</def><sym>)</sym> <def>dna</def> <kwa>in</kwa><br />
<def></def>  <kwc>Printf</kwc><def></def><sym>.</sym><def>printf</def> <str>&quot;%d</str><esc>\t</esc><str>%s</str><esc>\n</esc><str>&quot;</str><def></def> <sym>(</sym><def></def><kwa>try</kwa> <def></def><sym>!(</sym><def></def><kwc>H</kwc><def></def><sym>.</sym><def>find cnt seq</def><sym>)</sym> <def></def><kwa>with</kwa> <def></def><kwd>Not_found</kwd> <def></def><sym>-&gt;</sym> <def></def><num>0</num><def></def><sym>)</sym> <def>seq</def><br />
<br />
<com>(* Extract DNA sequence &quot;THREE&quot; from stdin *)</com><def></def><br />
<kwa>let</kwa> <def>dna_three</def> <sym>=</sym><br />
<def></def>  <kwa>let</kwa> <def>is_not_three s</def> <sym>=</sym> <def></def><kwa>try</kwa> <def></def><kwc>String</kwc><def></def><sym>.</sym><def>sub s</def> <num>0 6</num> <def></def><sym>&lt;&gt;</sym> <def></def><str>&quot;&gt;THREE&quot;</str><def></def> <kwa>with</kwa> <def>_</def> <sym>-&gt;</sym> <def></def><kwa>true in</kwa><br />
<def></def>  <kwa>while</kwa> <def>is_not_three</def><sym>(</sym><def>input_line stdin</def><sym>)</sym> <def></def><kwa>do</kwa> <def></def><sym>()</sym> <def></def><kwa>done</kwa><def></def><sym>;</sym><br />
<def></def>  <kwa>let</kwa> <def>buf</def> <sym>=</sym> <def></def><kwc>Buffer</kwc><def></def><sym>.</sym><def>create</def> <num>1000</num> <def></def><kwa>in</kwa><br />
<def></def>  <com>(* Skip possible comment *)</com><def></def><br />
  <sym>(</sym><def></def><kwa>try while true do</kwa><br />
<def></def>     <kwa>let</kwa> <def>line</def> <sym>=</sym> <def>input_line stdin</def> <kwa>in</kwa><br />
<def></def>     <kwa>if</kwa> <def>line</def><sym>.[</sym><def></def><num>0</num><def></def><sym>] &lt;&gt;</sym> <def></def><str>';'</str><def></def> <kwa>then</kwa><br />
<def></def>       <sym>(</sym><def></def><kwc>Buffer</kwc><def></def><sym>.</sym><def>add_string buf</def> <sym>(</sym><def></def><kwc>String</kwc><def></def><sym>.</sym><def>uppercase line</def><sym>);</sym> <def>raise</def> <kwd>Exit</kwd><def></def><sym>)</sym><br />
<def></def>   <kwa>done with</kwa> <def>_</def> <sym>-&gt; ());</sym><br />
<def></def>  <com>(* Read the DNA sequence *)</com><def></def><br />
  <sym>(</sym><def></def><kwa>try while true do</kwa><br />
<def></def>       <kwa>let</kwa> <def>line</def> <sym>=</sym> <def>input_line stdin</def> <kwa>in</kwa><br />
<def></def>       <kwa>if</kwa> <def>line</def><sym>.[</sym><def></def><num>0</num><def></def><sym>] =</sym> <def></def><str>'&gt;'</str><def></def> <kwa>then</kwa> <def>raise</def> <kwd>End_of_file</kwd><def></def><sym>;</sym><br />
<def></def>       <kwc>Buffer</kwc><def></def><sym>.</sym><def>add_string buf</def> <sym>(</sym><def></def><kwc>String</kwc><def></def><sym>.</sym><def>uppercase line</def><sym>)</sym><br />
<def></def>   <kwa>done with</kwa> <def></def><kwd>End_of_file</kwd> <def></def><sym>-&gt; ());</sym><br />
<def></def>  <kwc>Buffer</kwc><def></def><sym>.</sym><def>contents buf</def><br />
<br />
<kwa>let</kwa> <def></def><sym>() =</sym> <def></def><kwc>Gc</kwc><def></def><sym>.</sym><def>set</def> <sym>{ (</sym><def></def><kwc>Gc</kwc><def></def><sym>.</sym><def>get</def><sym>())</sym> <def></def><kwa>with</kwa> <def></def><kwc>Gc</kwc><def></def><sym>.</sym><def>minor_heap_size</def> <sym>=</sym> <def></def><num>1024</num> <def></def><sym>*</sym> <def></def><num>2048</num> <def></def><sym>}</sym><br />
<def></def><br />
<kwa>let</kwa> <def></def><sym>() =</sym><br />
<def></def>  <kwc>List</kwc><def></def><sym>.</sym><def>iter</def> <sym>(</sym><def></def><kwa>fun</kwa> <def>i</def> <sym>-&gt;</sym> <def>write_frequencies i dna_three</def><sym>) [</sym><def></def><num>1</num><def></def><sym>;</sym> <def></def><num>2</num><def></def><sym>];</sym><br />
<def></def>  <kwc>List</kwc><def></def><sym>.</sym><def>iter</def> <sym>(</sym><def></def><kwa>fun</kwa> <def>k</def> <sym>-&gt;</sym> <def>write_count k dna_three</def><sym>)</sym><br />
<def></def>    <sym>[</sym><def></def><str>&quot;GGT&quot;</str><def></def><sym>;</sym> <def></def><str>&quot;GGTA&quot;</str><def></def><sym>;</sym> <def></def><str>&quot;GGTATT&quot;</str><def></def><sym>;</sym> <def></def><str>&quot;GGTATTTTAATT&quot;</str><def></def><sym>;</sym> <def></def><str>&quot;GGTATTTTAATTTATAGT&quot;</str><def></def><sym>]</sym><def></def><br />
</source>
