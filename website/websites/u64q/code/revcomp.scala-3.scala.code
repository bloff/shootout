<source>
<def></def><com>/* The Computer Language Shootout</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com>   contributed by Isaac Gouy</com><br />
<com>*/</com><def></def><br />
<br />
<kwa>import</kwa> <def>java</def><sym>.</sym><def>io</def><sym>.</sym><def>_</def><br />
<kwa>import</kwa> <def>scala</def><sym>.</sym><def>collection</def><sym>.</sym><def>mutable</def><sym>.</sym><def></def><kwc>Stack</kwc><br />
<def></def><br />
<kwa>object</kwa> <def>revcomp</def> <sym>{</sym><br />
<def></def>   <kwa>def</kwa> <def>main</def><sym>(</sym><def>args</def><sym>:</sym> <def></def><kwc>Array</kwc><def></def><sym>[</sym><def></def><kwc>String</kwc><def></def><sym>]) = {</sym><br />
<def></def>      <kwa>val</kwa> <def>out</def> <sym>=</sym> <def></def><kwa>new</kwa> <def>FastaOutputStream</def><sym>(</sym><def></def><kwc>System</kwc><def></def><sym>.</sym><def>out</def><sym>)</sym><br />
<def></def>      <kwa>val</kwa> <def>in</def> <sym>=</sym> <def></def><kwa>new</kwa> <def>FastaInputStream</def><sym>(</sym><def></def><kwc>System</kwc><def></def><sym>.</sym><def>in</def><sym>)</sym><br />
<def><br />
      out</def><sym>.</sym><def>writeReverseComplement</def><sym>(</sym> <def>in</def><sym>.</sym><def>readSequenceStack</def> <sym>)</sym><br />
<def>      out</def><sym>.</sym><def>writeReverseComplement</def><sym>(</sym> <def>in</def><sym>.</sym><def>readSequenceStack</def> <sym>)</sym><br />
<def>      out</def><sym>.</sym><def>writeReverseComplement</def><sym>(</sym> <def>in</def><sym>.</sym><def>readSequenceStack</def> <sym>)</sym><br />
<def><br />
      in</def><sym>.</sym><def>close<br />
      out</def><sym>.</sym><def>close</def><br />
   <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<br />
<kwa>trait</kwa> <def>FastaByteStream</def> <sym>{</sym><br />
<def></def>   <kwa>val</kwa> <def>nl</def> <sym>=</sym> <def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>.</sym><def>toByte</def><br />
<br />
   <kwa>type</kwa> <def></def><kwc>Line</kwc> <def></def><sym>=</sym> <def></def><kwc>Array</kwc><def></def><sym>[</sym><def></def><kwb>byte</kwb><def></def><sym>]</sym><br />
<def></def>   <kwa>type</kwa> <def>LineStack</def> <sym>=</sym> <def></def><kwc>Stack</kwc><def></def><sym>[</sym><def></def><kwc>Line</kwc><def></def><sym>]</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<br />
<slc>// extend the Java BufferedInputStream class</slc><br />
<def></def><br />
<kwa>final class</kwa> <def>FastaInputStream</def><sym>(</sym><def>in</def><sym>:</sym> <def></def><kwc>InputStream</kwc><def></def><sym>)</sym><br />
<def></def>      <kwa>extends</kwa> <def></def><kwc>BufferedInputStream</kwc><def></def><sym>(</sym><def>in</def><sym>)</sym> <def>with FastaByteStream</def> <sym>{</sym><br />
<def></def><br />
   <kwa>val</kwa> <def>gt</def> <sym>=</sym> <def></def><str>'&gt;'</str><def></def><sym>.</sym><def>toByte</def><br />
   <kwa>val</kwa> <def>sc</def> <sym>=</sym> <def></def><str>';'</str><def></def><sym>.</sym><def>toByte</def><br />
<br />
   <kwa>def</kwa> <def>readSequenceStack</def><sym>():</sym> <def>Pair</def><sym>[</sym><def></def><kwc>Line</kwc><def></def><sym>,</sym><def>LineStack</def><sym>] = {</sym><br />
<def></def>      <kwa>var</kwa> <def>header</def><sym>:</sym> <def></def><kwc>Line</kwc> <def></def><sym>=</sym> <def>null</def><br />
      <kwa>val</kwa> <def>lines</def><sym>:</sym> <def>LineStack</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwc>Stack</kwc><br />
<def></def><br />
      <kwa>var</kwa> <def>line</def> <sym>=</sym> <def>readLine</def><sym>()</sym><br />
<def></def>      <kwa>while</kwa> <def></def><sym>(</sym><def>line</def> <sym>!=</sym> <def>null</def><sym>) {</sym><br />
<def></def>         <kwa>val</kwa> <def>c</def> <sym>=</sym> <def>line</def><sym>(</sym><def></def><num>0</num><def></def><sym>)</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>c</def> <sym>==</sym> <def>gt</def><sym>){</sym>                       <def></def><slc>// '&gt;'</slc><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>header</def> <sym>==</sym> <def>null</def><sym>){</sym><br />
<def>               header</def> <sym>=</sym> <def>line</def><br />
            <sym>}</sym> <def></def><kwa>else</kwa> <def></def><sym>{</sym><br />
<def>               pos</def> <sym>=</sym> <def>pos</def> <sym>-</sym> <def>line</def><sym>.</sym><def>length</def> <sym>-</sym> <def></def><num>1</num>   <def></def><slc>// reposition to start of line</slc><br />
<def></def>               <kwa>return</kwa> <def>Pair</def><sym>(</sym><def>header</def><sym>,</sym><def>lines</def><sym>)</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>         <sym>}</sym> <def></def><kwa>else</kwa> <def></def><sym>{</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>c</def> <sym>!=</sym> <def>sc</def><sym>)</sym> <def>lines</def> <sym>+=</sym> <def>line</def>       <slc>// ';'</slc><br />
<def></def>         <sym>}</sym><br />
<def>         line</def> <sym>=</sym> <def>readLine</def><sym>()</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>      <kwa>return</kwa> <def>Pair</def><sym>(</sym><def>header</def><sym>,</sym><def>lines</def><sym>)</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>def</kwa> <def>readLine</def><sym>() = {</sym><br />
<def></def>      <kwa>var</kwa> <def>bytes</def><sym>:</sym> <def></def><kwc>Line</kwc> <def></def><sym>=</sym> <def>null</def><br />
      <kwa>if</kwa> <def></def><sym>(</sym><def>in</def> <sym>==</sym> <def>null</def><sym>)</sym> <def>bytes</def><br />
      <kwa>else</kwa> <def></def><sym>{</sym><br />
<def>         mark</def><sym>(</sym><def></def><num>128</num><def></def><sym>)</sym>                      <def></def><slc>// mark the start of the line</slc><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>count</def> <sym>==</sym> <def></def><num>0</num><def></def><sym>)</sym> <def>read</def><sym>()</sym>         <def></def><slc>// fill buffer</slc><br />
<def></def><br />
         <kwa>var</kwa> <def>i</def> <sym>=</sym> <def>markpos</def><br />
         <kwa>while</kwa> <def></def><sym>(</sym><def>i</def> <sym>&lt;</sym> <def>count</def> <sym>&amp;&amp;</sym> <def>buf</def><sym>(</sym><def>i</def><sym>) !=</sym> <def>nl</def><sym>)</sym> <def>i</def> <sym>=</sym> <def>i</def> <sym>+</sym> <def></def><num>1</num><br />
<def></def><br />
         <kwa>if</kwa> <def></def><sym>(</sym><def>i</def> <sym>&gt;=</sym> <def>count</def><sym>){</sym>               <def></def><slc>// line extends past end of buffer</slc><br />
<def>            pos</def> <sym>=</sym> <def>i</def><sym>;</sym> <def>read</def><sym>();</sym> <def>i</def> <sym>=</sym> <def>pos</def><sym>;</sym>   <def></def><slc>// fill buffer again</slc><br />
<def></def>            <kwa>while</kwa> <def></def><sym>(</sym><def>i</def> <sym>&lt;</sym> <def>count</def> <sym>&amp;&amp;</sym> <def>buf</def><sym>(</sym><def>i</def><sym>) !=</sym> <def>nl</def><sym>)</sym> <def>i</def> <sym>=</sym> <def>i</def> <sym>+</sym> <def></def><num>1</num><br />
<def></def>         <sym>}</sym><br />
<def></def><br />
         <kwa>if</kwa> <def></def><sym>(</sym><def>i</def> <sym>&lt;</sym> <def>count</def><sym>){</sym><br />
<def>            bytes</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwc>Array</kwc><def></def><sym>(</sym><def>i</def> <sym>-</sym> <def>markpos</def><sym>)</sym><br />
<def></def>            <kwc>System</kwc><def></def><sym>.</sym><def>arraycopy</def><sym>(</sym><def>buf</def><sym>,</sym> <def>markpos</def><sym>,</sym> <def>bytes</def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>i</def> <sym>-</sym> <def>markpos</def><sym>);</sym><br />
<def>            pos</def> <sym>=</sym> <def>i</def><sym>+</sym><def></def><num>1</num><br />
<def></def>         <sym>}</sym><br />
<def></def>      <sym>}</sym><br />
<def>      bytes</def><br />
   <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<br />
<slc>// extend the Java BufferedOutputStream class</slc><br />
<def></def><br />
<kwa>final class</kwa> <def>FastaOutputStream</def><sym>(</sym><def>in</def><sym>:</sym> <def></def><kwc>OutputStream</kwc><def></def><sym>)</sym><br />
<def></def>      <kwa>extends</kwa> <def></def><kwc>BufferedOutputStream</kwc><def></def><sym>(</sym><def>in</def><sym>)</sym> <def>with FastaByteStream</def> <sym>{</sym><br />
<def></def><br />
   <kwa>private val</kwa> <def>IUB</def> <sym>=</sym> <def>IUBCodeComplements</def><br />
<br />
   <kwa>private def</kwa> <def>IUBCodeComplements</def><sym>() = {</sym><br />
<def></def>      <kwa>val</kwa> <def>code</def> <sym>=</sym> <def></def><str>&quot;ABCDGHKMNRSTVWYabcdghkmnrstvwy&quot;</str><def></def><sym>.</sym><def>getBytes</def><br />
      <kwa>val</kwa> <def>comp</def> <sym>=</sym> <def></def><str>&quot;TVGHCDMKNYSABWRTVGHCDMKNYSABWR&quot;</str><def></def><sym>.</sym><def>getBytes</def><br />
      <kwa>val</kwa> <def>iub</def><sym>:</sym> <def></def><kwc>Array</kwc><def></def><sym>[</sym><def></def><kwb>byte</kwb><def></def><sym>] =</sym> <def></def><kwa>new</kwa> <def></def><kwc>Array</kwc><def></def><sym>(</sym> <def></def><str>'z'</str><def></def><sym>.</sym><def>toByte</def> <sym>)</sym><br />
<def></def><br />
      <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwa>val</kwa> <def>indexValue</def> <sym>&lt;-</sym> <def>code zip comp</def><sym>)</sym><br />
<def>         indexValue match</def> <sym>{</sym> <def></def><kwa>case</kwa> <def>Pair</def><sym>(</sym><def>i</def><sym>,</sym><def>v</def><sym>) =&gt;</sym> <def>iub</def><sym>(</sym><def>i</def><sym>) =</sym> <def>v</def> <sym>}</sym><br />
<def><br />
      iub</def><br />
   <sym>}</sym><br />
<def></def><br />
   <kwa>def</kwa> <def>writeReverseComplement</def><sym>(</sym><def>sequence</def><sym>:</sym> <def>Pair</def><sym>[</sym><def></def><kwc>Line</kwc><def></def><sym>,</sym><def>LineStack</def><sym>]) = {</sym><br />
<def></def><br />
      <kwa>def</kwa> <def>inplaceComplementReverse</def><sym>(</sym><def>b</def><sym>:</sym> <def></def><kwc>Array</kwc><def></def><sym>[</sym><def></def><kwb>byte</kwb><def></def><sym>]) = {</sym><br />
<def></def>         <kwa>var</kwa> <def>i</def> <sym>=</sym> <def></def><num>0</num><br />
<def></def>         <kwa>var</kwa> <def>j</def> <sym>=</sym> <def>b</def><sym>.</sym><def>length</def> <sym>-</sym> <def></def><num>1</num><br />
<def></def>         <kwa>while</kwa> <def></def><sym>(</sym><def>i</def> <sym>&lt;</sym> <def>j</def><sym>){</sym><br />
<def></def>            <kwa>val</kwa> <def>swap</def> <sym>=</sym> <def>b</def><sym>(</sym><def>i</def><sym>)</sym><br />
<def>            b</def><sym>(</sym><def>i</def><sym>) =</sym> <def>IUB</def><sym>(</sym> <def>b</def><sym>(</sym><def>j</def><sym>) )</sym><br />
<def>            b</def><sym>(</sym><def>j</def><sym>) =</sym> <def>IUB</def><sym>(</sym> <def>swap</def> <sym>)</sym><br />
<def>            i</def> <sym>=</sym> <def>i</def> <sym>+</sym> <def></def><num>1</num><br />
<def>            j</def> <sym>=</sym> <def>j</def> <sym>-</sym> <def></def><num>1</num><br />
<def></def>         <sym>}</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>i</def> <sym>==</sym> <def>j</def><sym>)</sym> <def>b</def><sym>(</sym><def>i</def><sym>) =</sym> <def>IUB</def><sym>(</sym> <def>b</def><sym>(</sym><def>i</def><sym>) )</sym><br />
<def></def>      <sym>}</sym><br />
<def><br />
      sequence match</def> <sym>{</sym><br />
<def></def>         <kwa>case</kwa> <def>Pair</def><sym>(</sym><def>header</def><sym>,</sym><def>lines</def><sym>) =&gt; {</sym><br />
<def><br />
            write</def><sym>(</sym><def>header</def><sym>);</sym> <def>write</def><sym>(</sym><def>nl</def><sym>)</sym><br />
<def></def><br />
            <kwa>val</kwa> <def>k</def> <sym>=</sym> <def></def><kwa>if</kwa> <def></def><sym>(</sym><def>lines</def><sym>.</sym><def>isEmpty</def><sym>)</sym> <def></def><num>0</num> <def></def><kwa>else</kwa> <def>lines</def><sym>.</sym><def>top</def><sym>.</sym><def>length</def><br />
            <kwa>val</kwa> <def>LineLength</def> <sym>=</sym> <def></def><num>60</num><br />
<def></def>            <kwa>val</kwa> <def>isSplitLine</def> <sym>=</sym> <def>k</def> <sym>&lt;</sym> <def>LineLength</def><br />
            <kwa>var</kwa> <def>isFirstLine</def> <sym>=</sym> <def>true</def><br />
<br />
            <kwa>while</kwa> <def></def><sym>(!</sym><def>lines</def><sym>.</sym><def>isEmpty</def><sym>) {</sym><br />
<def></def>               <kwa>val</kwa> <def>line</def> <sym>=</sym> <def>lines</def><sym>.</sym><def>pop<br />
               inplaceComplementReverse</def><sym>(</sym><def>line</def><sym>)</sym><br />
<def></def><br />
               <kwa>if</kwa> <def></def><sym>(</sym><def>isSplitLine</def><sym>){</sym><br />
<def></def>                  <kwa>if</kwa> <def></def><sym>(</sym><def>isFirstLine</def><sym>){</sym> <def>write</def><sym>(</sym><def>line</def><sym>);</sym> <def>isFirstLine</def> <sym>=</sym> <def>false</def> <sym>}</sym><br />
<def></def>                  <kwa>else</kwa> <def></def><sym>{</sym> <def>write</def><sym>(</sym><def>line</def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def>LineLength</def><sym>-</sym><def>k</def><sym>);</sym> <def>write</def><sym>(</sym><def>nl</def><sym>);</sym> <def>write</def><sym>(</sym><def>line</def><sym>,</sym><def>LineLength</def><sym>-</sym><def>k</def><sym>,</sym><def>k</def><sym>) }</sym><br />
<def></def>               <sym>}</sym><br />
<def></def>               <kwa>else</kwa> <def></def><sym>{</sym> <def>write</def><sym>(</sym><def>line</def><sym>);</sym> <def>write</def><sym>(</sym><def>nl</def><sym>) }</sym><br />
<def></def>            <sym>}</sym><br />
<def></def><br />
            <kwa>if</kwa> <def></def><sym>(</sym><def>isSplitLine</def> <sym>&amp;&amp; !</sym><def>isFirstLine</def><sym>)</sym> <def>write</def><sym>(</sym><def>nl</def><sym>)</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
<sym>}</sym><def></def><br />
</source>
