<source>
<def></def><com>/* The Computer Language Shootout</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com>   contributed by Isaac Gouy</com><br />
<com>*/</com><def></def><br />
<br />
<kwa>import</kwa> <def>java</def><sym>.</sym><def>io</def><sym>.</sym><def>_</def><br />
<br />
<kwa>object</kwa> <def>fasta</def> <sym>{</sym><br />
<def></def>   <kwa>def</kwa> <def>main</def><sym>(</sym><def>args</def><sym>:</sym> <def></def><kwc>Array</kwc><def></def><sym>[</sym><def></def><kwc>String</kwc><def></def><sym>]) = {</sym><br />
<def></def><br />
      <kwa>val</kwa> <def>ALU</def> <sym>=</sym><br />
<def></def>         <str>&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</str><def></def> <sym>+</sym><br />
<def></def>         <str>&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</str><def></def> <sym>+</sym><br />
<def></def>         <str>&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</str><def></def> <sym>+</sym><br />
<def></def>         <str>&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</str><def></def> <sym>+</sym><br />
<def></def>         <str>&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</str><def></def> <sym>+</sym><br />
<def></def>         <str>&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</str><def></def> <sym>+</sym><br />
<def></def>         <str>&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</str><def></def><br />
<br />
      <kwa>val</kwa> <def>_IUB</def> <sym>=</sym> <def></def><kwc>Array</kwc><def></def><sym>(</sym><br />
<def>         Pair</def><sym>(</sym><def></def><str>'a'</str><def></def><sym>,</sym> <def></def><num>0.27</num><def></def><sym>),</sym><br />
<def>         Pair</def><sym>(</sym><def></def><str>'c'</str><def></def><sym>,</sym> <def></def><num>0.12</num><def></def><sym>),</sym><br />
<def>         Pair</def><sym>(</sym><def></def><str>'g'</str><def></def><sym>,</sym> <def></def><num>0.12</num><def></def><sym>),</sym><br />
<def>         Pair</def><sym>(</sym><def></def><str>'t'</str><def></def><sym>,</sym> <def></def><num>0.27</num><def></def><sym>),</sym><br />
<def><br />
         Pair</def><sym>(</sym><def></def><str>'B'</str><def></def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>),</sym><br />
<def>         Pair</def><sym>(</sym><def></def><str>'D'</str><def></def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>),</sym><br />
<def>         Pair</def><sym>(</sym><def></def><str>'H'</str><def></def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>),</sym><br />
<def>         Pair</def><sym>(</sym><def></def><str>'K'</str><def></def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>),</sym><br />
<def>         Pair</def><sym>(</sym><def></def><str>'M'</str><def></def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>),</sym><br />
<def>         Pair</def><sym>(</sym><def></def><str>'N'</str><def></def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>),</sym><br />
<def>         Pair</def><sym>(</sym><def></def><str>'R'</str><def></def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>),</sym><br />
<def>         Pair</def><sym>(</sym><def></def><str>'S'</str><def></def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>),</sym><br />
<def>         Pair</def><sym>(</sym><def></def><str>'V'</str><def></def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>),</sym><br />
<def>         Pair</def><sym>(</sym><def></def><str>'W'</str><def></def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>),</sym><br />
<def>         Pair</def><sym>(</sym><def></def><str>'Y'</str><def></def><sym>,</sym> <def></def><num>0.02</num><def></def><sym>)</sym><br />
<def></def>      <sym>)</sym><br />
<def></def><br />
      <kwa>val</kwa> <def>IUB</def> <sym>=</sym> <def>makeCumulative</def><sym>(</sym><def>_IUB</def><sym>)</sym><br />
<def></def><br />
      <kwa>val</kwa> <def>_HomoSapiens</def> <sym>=</sym> <def></def><kwc>Array</kwc><def></def><sym>(</sym><br />
<def>         Pair</def><sym>(</sym><def></def><str>'a'</str><def></def><sym>,</sym> <def></def><num>0.3029549426680</num><def></def><sym>),</sym><br />
<def>         Pair</def><sym>(</sym><def></def><str>'c'</str><def></def><sym>,</sym> <def></def><num>0.1979883004921</num><def></def><sym>),</sym><br />
<def>         Pair</def><sym>(</sym><def></def><str>'g'</str><def></def><sym>,</sym> <def></def><num>0.1975473066391</num><def></def><sym>),</sym><br />
<def>         Pair</def><sym>(</sym><def></def><str>'t'</str><def></def><sym>,</sym> <def></def><num>0.3015094502008</num><def></def><sym>)</sym><br />
<def></def>      <sym>)</sym><br />
<def></def><br />
      <kwa>val</kwa> <def>HomoSapiens</def> <sym>=</sym> <def>makeCumulative</def><sym>(</sym><def>_HomoSapiens</def><sym>)</sym><br />
<def></def><br />
<br />
      <kwa>val</kwa> <def>n</def> <sym>=</sym> <def></def><kwc>Integer</kwc> <def>parseInt</def><sym>(</sym><def>args</def><sym>(</sym><def></def><num>0</num><def></def><sym>))</sym><br />
<def></def>      <kwa>val</kwa> <def>s</def> <sym>=</sym> <def></def><kwa>new</kwa> <def>FastaOutputStream</def><sym>(</sym><def></def><kwc>System</kwc><def></def><sym>.</sym><def>out</def><sym>)</sym><br />
<def><br />
      s</def><sym>.</sym><def>writeDescription</def><sym>(</sym><def></def><str>&quot;ONE Homo sapiens alu&quot;</str><def></def><sym>)</sym><br />
<def>      s</def><sym>.</sym><def>writeRepeatingSequence</def><sym>(</sym><def>ALU</def><sym>,</sym><def>n</def><sym>*</sym><def></def><num>2</num><def></def><sym>)</sym><br />
<def><br />
      s</def><sym>.</sym><def>writeDescription</def><sym>(</sym><def></def><str>&quot;TWO IUB ambiguity codes&quot;</str><def></def><sym>)</sym><br />
<def>      s</def><sym>.</sym><def>writeRandomSequence</def><sym>(</sym><def>IUB</def><sym>,</sym><def>n</def><sym>*</sym><def></def><num>3</num><def></def><sym>)</sym><br />
<def><br />
      s</def><sym>.</sym><def>writeDescription</def><sym>(</sym><def></def><str>&quot;THREE Homo sapiens frequency&quot;</str><def></def><sym>)</sym><br />
<def>      s</def><sym>.</sym><def>writeRandomSequence</def><sym>(</sym><def>HomoSapiens</def><sym>,</sym><def>n</def><sym>*</sym><def></def><num>5</num><def></def><sym>)</sym><br />
<def><br />
      s</def><sym>.</sym><def>close</def><br />
   <sym>}</sym><br />
<def></def><br />
   <kwa>def</kwa> <def>makeCumulative</def><sym>(</sym><def>a</def><sym>:</sym> <def></def><kwc>Array</kwc><def></def><sym>[</sym><def>Pair</def><sym>[</sym><def>Char</def><sym>,</sym><def></def><kwb>double</kwb><def></def><sym>]]) = {</sym><br />
<def></def>      <kwa>var</kwa> <def>cp</def> <sym>=</sym> <def></def><num>0.0</num><br />
<def>      a map</def> <sym>(</sym><def>frequency</def> <sym>=&gt;</sym><br />
<def>         frequency match</def> <sym>{</sym><br />
<def></def>            <kwa>case</kwa> <def>Pair</def><sym>(</sym><def>code</def><sym>,</sym><def>percent</def><sym>) =&gt;</sym><br />
<def>               cp</def> <sym>=</sym> <def>cp</def> <sym>+</sym> <def>percent</def><sym>;</sym> <def></def><kwa>new</kwa> <def>Frequency</def><sym>(</sym><def>code</def><sym>.</sym><def>toByte</def><sym>,</sym><def>cp</def><sym>)</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>      <sym>)</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
<sym>}</sym><br />
<def></def><br />
<br />
<slc>// We could use instances of Pair or Tuple2 but specific labels</slc><br />
<def></def><slc>// make the code more readable than index numbers</slc><br />
<def></def><br />
<kwa>class</kwa> <def>Frequency</def><sym>(</sym><def>_code</def><sym>:</sym> <def></def><kwb>byte</kwb><def></def><sym>,</sym> <def>_percent</def><sym>:</sym> <def></def><kwb>double</kwb><def></def><sym>){</sym><br />
<def></def>   <kwa>var</kwa> <def>code</def> <sym>=</sym> <def>_code</def><sym>;</sym> <def></def><kwa>var</kwa> <def>percent</def> <sym>=</sym> <def>_percent</def><sym>;</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<br />
<slc>// extend the Java BufferedOutputStream class</slc><br />
<def></def><br />
<kwa>class</kwa> <def>FastaOutputStream</def><sym>(</sym><def>out</def><sym>:</sym> <def></def><kwc>OutputStream</kwc><def></def><sym>)</sym> <def></def><kwa>extends</kwa> <def></def><kwc>BufferedOutputStream</kwc><def></def><sym>(</sym><def>out</def><sym>) {</sym><br />
<def></def><br />
   <kwa>private val</kwa> <def>LineLength</def> <sym>=</sym> <def></def><num>60</num><br />
<def></def>   <kwa>private val</kwa> <def>nl</def> <sym>=</sym> <def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>.</sym><def>toByte</def><br />
<br />
   <kwa>def</kwa> <def>writeDescription</def><sym>(</sym><def>desc</def><sym>:</sym> <def></def><kwc>String</kwc><def></def><sym>) = {</sym> <def>write</def><sym>( (</sym><def></def><str>&quot;&gt;&quot;</str><def></def> <sym>+</sym> <def>desc</def> <sym>+</sym> <def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>).</sym><def>getBytes</def> <sym>) }</sym><br />
<def></def><br />
   <kwa>def</kwa> <def>writeRepeatingSequence</def><sym>(</sym><def>_alu</def><sym>:</sym> <def></def><kwc>String</kwc><def></def><sym>,</sym> <def>length</def><sym>:</sym> <def></def><kwb>int</kwb><def></def><sym>) = {</sym><br />
<def></def>      <kwa>val</kwa> <def>alu</def> <sym>=</sym> <def>_alu</def><sym>.</sym><def>getBytes</def><br />
      <kwa>var</kwa> <def>n</def> <sym>=</sym> <def>length</def><sym>;</sym> <def></def><kwa>var</kwa> <def>k</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def></def><kwa>val</kwa> <def>kn</def> <sym>=</sym> <def>alu</def><sym>.</sym><def>length</def><sym>;</sym><br />
<def></def><br />
      <kwa>while</kwa> <def></def><sym>(</sym><def>n</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>) {</sym><br />
<def></def>         <kwa>val</kwa> <def>m</def> <sym>=</sym> <def></def><kwa>if</kwa> <def></def><sym>(</sym><def>n</def> <sym>&lt;</sym> <def>LineLength</def><sym>)</sym> <def>n</def> <kwa>else</kwa> <def>LineLength</def><br />
<br />
         <kwa>var</kwa> <def>i</def> <sym>=</sym> <def></def><num>0</num><br />
<def></def>         <kwa>while</kwa> <def></def><sym>(</sym><def>i</def> <sym>&lt;</sym> <def>m</def><sym>){</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>k</def> <sym>==</sym> <def>kn</def><sym>)</sym> <def>k</def> <sym>=</sym> <def></def><num>0</num><br />
<def></def>            <kwa>val</kwa> <def>b</def> <sym>=</sym> <def>alu</def><sym>(</sym><def>k</def><sym>)</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>count</def> <sym>&lt;</sym> <def>buf</def><sym>.</sym><def>length</def><sym>){</sym> <def>buf</def><sym>(</sym><def>count</def><sym>) =</sym> <def>b</def><sym>;</sym> <def>count</def> <sym>=</sym> <def>count</def> <sym>+</sym> <def></def><num>1</num> <def></def><sym>}</sym><br />
<def></def>            <kwa>else</kwa> <def></def><sym>{</sym> <def>write</def><sym>(</sym><def>b</def><sym>) }</sym> <def></def><slc>// flush buffer</slc><br />
<def>            k</def> <sym>=</sym> <def>k</def><sym>+</sym><def></def><num>1</num><br />
<def>            i</def> <sym>=</sym> <def>i</def><sym>+</sym><def></def><num>1</num><br />
<def></def>         <sym>}</sym><br />
<def><br />
         write</def><sym>(</sym><def>nl</def><sym>)</sym><br />
<def>         n</def> <sym>=</sym> <def>n</def> <sym>-</sym> <def>LineLength</def><br />
      <sym>}</sym><br />
<def></def><br />
   <sym>}</sym><br />
<def></def><br />
   <kwa>def</kwa> <def>writeRandomSequence</def><sym>(</sym><def>distribution</def><sym>:</sym> <def></def><kwc>Array</kwc><def></def><sym>[</sym><def>Frequency</def><sym>],</sym> <def>length</def><sym>:</sym> <def></def><kwb>int</kwb><def></def><sym>) = {</sym><br />
<def></def>      <kwa>var</kwa> <def>n</def> <sym>=</sym> <def>length</def><br />
      <kwa>while</kwa> <def></def><sym>(</sym><def>n</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>) {</sym><br />
<def></def>         <kwa>val</kwa> <def>m</def> <sym>=</sym> <def></def><kwa>if</kwa> <def></def><sym>(</sym><def>n</def> <sym>&lt;</sym> <def>LineLength</def><sym>)</sym> <def>n</def> <kwa>else</kwa> <def>LineLength</def><br />
<br />
         <kwa>var</kwa> <def>i</def> <sym>=</sym> <def></def><num>0</num><br />
<def></def>         <kwa>while</kwa> <def></def><sym>(</sym><def>i</def> <sym>&lt;</sym> <def>m</def><sym>){</sym><br />
<def></def>            <kwa>val</kwa> <def>b</def> <sym>=</sym> <def>selectRandom</def><sym>(</sym><def>distribution</def><sym>)</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>count</def> <sym>&lt;</sym> <def>buf</def><sym>.</sym><def>length</def><sym>){</sym> <def>buf</def><sym>(</sym><def>count</def><sym>) =</sym> <def>b</def><sym>;</sym> <def>count</def> <sym>=</sym> <def>count</def> <sym>+</sym> <def></def><num>1</num> <def></def><sym>}</sym><br />
<def></def>            <kwa>else</kwa> <def></def><sym>{</sym> <def>write</def><sym>(</sym><def>b</def><sym>) }</sym> <def></def><slc>// flush buffer</slc><br />
<def>            i</def> <sym>=</sym> <def>i</def><sym>+</sym><def></def><num>1</num><br />
<def></def>         <sym>}</sym><br />
<def></def><br />
         <kwa>if</kwa> <def></def><sym>(</sym><def>count</def> <sym>&lt;</sym> <def>buf</def><sym>.</sym><def>length</def><sym>){</sym> <def>buf</def><sym>(</sym><def>count</def><sym>) =</sym> <def>nl</def><sym>;</sym> <def>count</def> <sym>=</sym> <def>count</def> <sym>+</sym> <def></def><num>1</num> <def></def><sym>}</sym><br />
<def></def>         <kwa>else</kwa> <def></def><sym>{</sym> <def>write</def><sym>(</sym><def>nl</def><sym>) }</sym> <def></def><slc>// flush buffer</slc><br />
<def>         n</def> <sym>=</sym> <def>n</def> <sym>-</sym> <def>LineLength</def><br />
      <sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>private def</kwa> <def>selectRandom</def><sym>(</sym><def>distribution</def><sym>:</sym> <def></def><kwc>Array</kwc><def></def><sym>[</sym><def>Frequency</def><sym>]):</sym> <def></def><kwc>Byte</kwc> <def></def><sym>= {</sym><br />
<def></def>      <kwa>val</kwa> <def>n</def> <sym>=</sym> <def>distribution</def><sym>.</sym><def>length</def><br />
      <kwa>val</kwa> <def>r</def> <sym>=</sym> <def>RandomNumber scaledTo</def><sym>(</sym><def></def><num>1.0</num><def></def><sym>)</sym><br />
<def></def><br />
      <kwa>var</kwa> <def>i</def> <sym>=</sym> <def></def><num>0</num><br />
<def></def>      <kwa>while</kwa> <def></def><sym>(</sym><def>i</def> <sym>&lt;</sym> <def>n</def><sym>) {</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>r</def> <sym>&lt;</sym> <def>distribution</def><sym>(</sym><def>i</def><sym>).</sym><def>percent</def><sym>)</sym> <def></def><kwa>return</kwa> <def>distribution</def><sym>(</sym><def>i</def><sym>).</sym><def>code<br />
         i</def> <sym>=</sym> <def>i</def><sym>+</sym><def></def><num>1</num><br />
<def></def>      <sym>}</sym><br />
<def></def>      <kwa>return</kwa> <def>distribution</def><sym>(</sym><def>n</def><sym>-</sym><def></def><num>1</num><def></def><sym>).</sym><def>code</def><br />
   <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<br />
<kwa>object</kwa> <def>RandomNumber</def> <sym>{</sym><br />
<def></def>   <kwa>private val</kwa> <def>IM</def> <sym>=</sym> <def></def><num>139968</num><br />
<def></def>   <kwa>private val</kwa> <def>IA</def> <sym>=</sym> <def></def><num>3877</num><br />
<def></def>   <kwa>private val</kwa> <def>IC</def> <sym>=</sym> <def></def><num>29573</num><br />
<def></def>   <kwa>private var</kwa> <def>seed</def> <sym>=</sym> <def></def><num>42</num><br />
<def></def><br />
   <kwa>def</kwa> <def>scaledTo</def><sym>(</sym><def>max</def><sym>:</sym> <def></def><kwb>double</kwb><def></def><sym>) = {</sym><br />
<def>      seed</def> <sym>= (</sym><def>seed</def> <sym>*</sym> <def>IA</def> <sym>+</sym> <def>IC</def><sym>) %</sym> <def>IM<br />
      max</def> <sym>*</sym> <def>seed</def> <sym>/</sym> <def>IM</def><br />
   <sym>}</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
