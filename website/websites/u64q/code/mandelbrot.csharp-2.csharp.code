<source>
<def></def><com>/* The Computer Language Benchmarks Game</com><br />
<com> *    http://shootout.alioth.debian.org/</com><br />
<com> *</com><br />
<com> * Adapted by Antti Lankila from the earlier Isaac Gouy's implementation</com><br />
<com> */</com><def></def><br />
<br />
<kwa>using</kwa> <def>System</def><sym>;</sym><br />
<def></def><kwa>using</kwa> <def>System</def><sym>.</sym><def>IO</def><sym>;</sym><br />
<def></def><br />
<kwa>class</kwa> <def>Mandelbrot</def> <sym>{</sym><br />
<def></def><br />
   <kwa>public static</kwa> <def></def><kwb>void</kwb> <def></def><kwd>Main</kwd><def></def><sym>(</sym><def>String</def><sym>[]</sym> <def>args</def><sym>) {</sym><br />
<def></def><br />
      <kwb>int</kwb> <def>width</def> <sym>=</sym> <def></def><num>100</num><def></def><sym>;</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>args</def><sym>.</sym><def>Length</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>)</sym><br />
<def>	 width</def> <sym>=</sym> <def>Int32</def><sym>.</sym><def></def><kwd>Parse</kwd><def></def><sym>(</sym><def>args</def><sym>[</sym><def></def><num>0</num><def></def><sym>]);</sym><br />
<def></def><br />
      <kwb>int</kwb> <def>height</def> <sym>=</sym> <def>width</def><sym>;</sym><br />
<def></def>      <kwb>int</kwb> <def>maxiter</def> <sym>=</sym> <def></def><num>50</num><def></def><sym>;</sym><br />
<def></def>      <kwb>double</kwb> <def>limit</def> <sym>=</sym> <def></def><num>4.0</num><def></def><sym>;</sym><br />
<def><br />
      Console</def><sym>.</sym><def></def><kwd>WriteLine</kwd><def></def><sym>(</sym><def></def><str>&quot;P4&quot;</str><def></def><sym>);</sym><br />
<def>      Console</def><sym>.</sym><def></def><kwd>WriteLine</kwd><def></def><sym>(</sym><def></def><str>&quot;{0} {1}&quot;</str><def></def><sym>,</sym> <def>width</def><sym>,</sym><def>height</def><sym>);</sym><br />
<def>      Stream s</def> <sym>=</sym> <def>Console</def><sym>.</sym><def></def><kwd>OpenStandardOutput</kwd><def></def><sym>(</sym><def></def><num>1024</num><def></def><sym>);</sym><br />
<def></def><br />
      <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>y</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>y</def> <sym>&lt;</sym> <def>height</def><sym>;</sym> <def>y</def><sym>++) {</sym><br />
<def></def>	 <kwb>int</kwb> <def>bits</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>	 <kwb>int</kwb> <def>xcounter</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>	 <kwb>double</kwb> <def>Ci</def> <sym>=</sym> <def></def><num>2.0</num><def></def><sym>*</sym><def>y</def><sym>/</sym><def>height</def> <sym>-</sym> <def></def><num>1.0</num><def></def><sym>;</sym><br />
<def></def><br />
         <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>x</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>x</def> <sym>&lt;</sym> <def>width</def><sym>;</sym> <def>x</def><sym>++){</sym><br />
<def></def>	    <kwb>double</kwb> <def>Zr</def> <sym>=</sym> <def></def><num>0.0</num><def></def><sym>;</sym><br />
<def></def>	    <kwb>double</kwb> <def>Zi</def> <sym>=</sym> <def></def><num>0.0</num><def></def><sym>;</sym><br />
<def></def>	    <kwb>double</kwb> <def>Cr</def> <sym>=</sym> <def></def><num>2.0</num><def></def><sym>*</sym><def>x</def><sym>/</sym><def>width</def> <sym>-</sym> <def></def><num>1.5</num><def></def><sym>;</sym><br />
<def></def>            <kwb>int</kwb> <def>i</def> <sym>=</sym> <def>maxiter</def><sym>;</sym><br />
<def><br />
            bits</def> <sym>=</sym> <def>bits</def> <sym>&lt;&lt;</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>            <kwa>do</kwa> <def></def><sym>{</sym><br />
<def></def>               <kwb>double</kwb> <def>Tr</def> <sym>=</sym> <def>Zr</def><sym>*</sym><def>Zr</def> <sym>-</sym> <def>Zi</def><sym>*</sym><def>Zi</def> <sym>+</sym> <def>Cr</def><sym>;</sym><br />
<def>               Zi</def> <sym>=</sym> <def></def><num>2.0</num><def></def><sym>*</sym><def>Zr</def><sym>*</sym><def>Zi</def> <sym>+</sym> <def>Ci</def><sym>;</sym><br />
<def>               Zr</def> <sym>=</sym> <def>Tr</def><sym>;</sym><br />
<def></def>               <kwa>if</kwa> <def></def><sym>(</sym><def>Zr</def><sym>*</sym><def>Zr</def> <sym>+</sym> <def>Zi</def><sym>*</sym><def>Zi</def> <sym>&gt;</sym> <def>limit</def><sym>) {</sym><br />
<def>		  bits</def> <sym>|=</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>		  <kwa>break</kwa><def></def><sym>;</sym><br />
<def></def>	       <sym>}</sym><br />
<def></def>            <sym>}</sym> <def></def><kwa>while</kwa> <def></def><sym>(--</sym><def>i</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>);</sym><br />
<def></def><br />
            <kwa>if</kwa> <def></def><sym>(++</sym><def>xcounter</def> <sym>==</sym> <def></def><num>8</num><def></def><sym>) {</sym><br />
<def>	       s</def><sym>.</sym><def></def><kwd>WriteByte</kwd><def></def><sym>((</sym><def></def><kwb>byte</kwb><def></def><sym>) (</sym><def>bits ^</def> <num>0xff</num><def></def><sym>));</sym><br />
<def>	       bits</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>	       xcounter</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>         <kwa>if</kwa> <def></def><sym>(</sym><def>xcounter</def> <sym>!=</sym> <def></def><num>0</num><def></def><sym>)</sym><br />
<def>	    s</def><sym>.</sym><def></def><kwd>WriteByte</kwd><def></def><sym>((</sym><def></def><kwb>byte</kwb><def></def><sym>) ((</sym><def>bits</def> <sym>&lt;&lt; (</sym><def></def><num>8</num> <def></def><sym>-</sym> <def>xcounter</def><sym>))</sym> <def>^</def> <num>0xff</num><def></def><sym>));</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
