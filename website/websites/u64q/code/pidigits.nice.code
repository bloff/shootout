<source>
<def></def><com>/* The Computer Language Shootout</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com>   contributed by Isaac Gouy</com><br />
<com>*/</com><def></def><br />
<br />
<kwa>import</kwa> <def>java</def><sym>.</sym><def>math</def><sym>.*;</sym><br />
<def></def><br />
<kwb>void</kwb> <def>main</def><sym>(</sym><def>String</def><sym>[]</sym> <def>args</def><sym>){</sym><br />
<def></def>   <kwa>let</kwa> <def>L</def> <sym>=</sym> <def></def><num>10</num><def></def><sym>;</sym><br />
<def></def>   <kwa>var</kwa> <def>n</def> <sym>=</sym> <def>Integer</def><sym>.</sym><def>parseInt</def><sym>(</sym><def>args</def><sym>[</sym><def></def><num>0</num><def></def><sym>]);</sym><br />
<def></def><br />
   <kwa>var</kwa> <def>j</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>   <kwa>let</kwa> <def>digits</def> <sym>=</sym> <def></def><kwa>new</kwa> <def>PiDigitSpigot</def><sym>();</sym><br />
<def></def><br />
   <kwa>while</kwa> <def></def><sym>(</sym><def>n</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>){</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>n</def> <sym>&gt;=</sym> <def>L</def><sym>){</sym><br />
<def></def>         <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>i</def><sym>&lt;</sym><def>L</def><sym>;</sym> <def>i</def><sym>++)</sym> <def>print</def><sym>(</sym> <def>digits</def><sym>.</sym><def>next</def><sym>() );</sym><br />
<def>         j</def> <sym>+=</sym> <def>L</def><sym>;</sym><br />
<def></def>      <sym>}</sym> <def></def><kwa>else</kwa> <def></def><sym>{</sym><br />
<def></def>         <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>;</sym> <def>i</def><sym>&lt;</sym><def>n</def><sym>;</sym> <def>i</def><sym>++)</sym> <def>print</def><sym>(</sym> <def>digits</def><sym>.</sym><def>next</def><sym>() );</sym><br />
<def></def>         <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def><sym>=</sym><def>n</def><sym>;</sym> <def>i</def><sym>&lt;</sym><def>L</def><sym>;</sym> <def>i</def><sym>++)</sym> <def>print</def><sym>(</sym><def></def><str>&quot; &quot;</str><def></def><sym>);</sym><br />
<def>         j</def> <sym>+=</sym> <def>n</def><sym>;</sym><br />
<def></def>      <sym>}</sym><br />
<def>      print</def><sym>(</sym><def></def><str>&quot;\t:&quot;</str><def></def><sym>);</sym> <def>println</def><sym>(</sym><def>j</def><sym>);</sym><br />
<def>      n</def> <sym>-=</sym> <def>L</def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<br />
<kwa>class</kwa> <def>PiDigitSpigot</def> <sym>{</sym><br />
<def>   Transformation z</def> <sym>=</sym> <def></def><kwa>new</kwa> <def>Transformation</def><sym>().</sym><def>qrst</def><sym>(</sym><def></def><num>1</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>1</num><def></def><sym>);</sym><br />
<def>   Transformation x</def> <sym>=</sym> <def></def><kwa>new</kwa> <def>Transformation</def><sym>();</sym><br />
<def>   Transformation inverse</def> <sym>=</sym> <def></def><kwa>new</kwa> <def>Transformation</def><sym>();</sym><br />
<def></def><br />
   <kwb>int</kwb> <def>next</def><sym>(){</sym><br />
<def></def>      <kwa>let</kwa> <def>y</def> <sym>=</sym> <def>this</def><sym>.</sym><def>digit</def><sym>();</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>this</def><sym>.</sym><def>isSafe</def><sym>(</sym><def>y</def><sym>)){</sym><br />
<def>         z</def> <sym>=</sym> <def>this</def><sym>.</sym><def>produce</def><sym>(</sym><def>y</def><sym>);</sym> <def></def><kwa>return</kwa> <def>y</def><sym>;</sym><br />
<def></def>      <sym>}</sym> <def></def><kwa>else</kwa> <def></def><sym>{</sym><br />
<def>         z</def> <sym>=</sym> <def>this</def><sym>.</sym><def>consume</def><sym>(</sym> <def>x</def><sym>.</sym><def>next</def><sym>() );</sym> <def></def><kwa>return</kwa> <def>this</def><sym>.</sym><def>next</def><sym>();</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwb>int</kwb> <def>digit</def><sym>() =</sym> <def>z</def><sym>.</sym><def>extract</def><sym>(</sym><def></def><num>3</num><def></def><sym>);</sym><br />
<def></def>   <kwb>boolean</kwb> <def>isSafe</def><sym>(</sym><def></def><kwb>int</kwb> <def>digit</def><sym>) =</sym> <def>digit</def> <sym>==</sym> <def>z</def><sym>.</sym><def>extract</def><sym>(</sym><def></def><num>4</num><def></def><sym>);</sym><br />
<def>   Transformation produce</def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def><sym>) = (</sym> <def>inverse</def><sym>.</sym><def>qrst</def><sym>(</sym><def></def><num>10</num><def></def><sym>,-</sym><def></def><num>10</num><def></def><sym>*</sym><def>i</def><sym>,</sym><def></def><num>0</num><def></def><sym>,</sym><def></def><num>1</num><def></def><sym>) ).</sym><def>compose</def><sym>(</sym><def>z</def><sym>);</sym><br />
<def>   Transformation consume</def><sym>(</sym><def>Transformation a</def><sym>) =</sym> <def>z</def><sym>.</sym><def>compose</def><sym>(</sym><def>a</def><sym>);</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
<br />
<br />
<kwa>class</kwa> <def>Transformation</def> <sym>{</sym><br />
<def>   BigInteger q</def> <sym>=</sym> <def>BigInteger</def><sym>.</sym><def>valueOf</def><sym>(</sym><def></def><num>0</num><def></def><sym>);</sym><br />
<def>   BigInteger r</def> <sym>=</sym> <def>BigInteger</def><sym>.</sym><def>valueOf</def><sym>(</sym><def></def><num>0</num><def></def><sym>);</sym><br />
<def>   BigInteger s</def> <sym>=</sym> <def>BigInteger</def><sym>.</sym><def>valueOf</def><sym>(</sym><def></def><num>0</num><def></def><sym>);</sym><br />
<def>   BigInteger t</def> <sym>=</sym> <def>BigInteger</def><sym>.</sym><def>valueOf</def><sym>(</sym><def></def><num>0</num><def></def><sym>);</sym><br />
<def></def>   <kwb>int</kwb> <def>k</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def><br />
   Transformation next</def><sym>(){</sym><br />
<def>      k</def><sym>++;</sym><br />
<def>      q</def> <sym>=</sym> <def>BigInteger</def><sym>.</sym><def>valueOf</def><sym>(</sym><def>k</def><sym>);</sym><br />
<def>      r</def> <sym>=</sym> <def>BigInteger</def><sym>.</sym><def>valueOf</def><sym>(</sym><def></def><num>4</num> <def></def><sym>*</sym> <def>k</def> <sym>+</sym> <def></def><num>2</num><def></def><sym>);</sym><br />
<def>      s</def> <sym>=</sym> <def>BigInteger</def><sym>.</sym><def>valueOf</def><sym>(</sym><def></def><num>0</num><def></def><sym>);</sym><br />
<def>      t</def> <sym>=</sym> <def>BigInteger</def><sym>.</sym><def>valueOf</def><sym>(</sym><def></def><num>2</num> <def></def><sym>*</sym> <def>k</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>      <kwa>return</kwa> <def>this</def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwb>int</kwb> <def>extract</def><sym>(</sym><def></def><kwb>int</kwb> <def>j</def><sym>){</sym><br />
<def></def>      <kwa>let</kwa> <def>bigj</def> <sym>=</sym> <def>BigInteger</def><sym>.</sym><def>valueOf</def><sym>(</sym><def>j</def><sym>);</sym><br />
<def></def>      <kwa>return</kwa> <def></def><sym>(((</sym><def>q</def> <sym>*</sym> <def>bigj</def><sym>) +</sym> <def>r</def><sym>) / ((</sym><def>s</def> <sym>*</sym> <def>bigj</def><sym>) +</sym> <def>t</def><sym>)).</sym><def>intValue</def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def><br />
   Transformation qrst</def><sym>(</sym><def></def><kwb>int</kwb> <def>q</def><sym>,</sym> <def></def><kwb>int</kwb> <def>r</def><sym>,</sym> <def></def><kwb>int</kwb> <def>s</def><sym>,</sym> <def></def><kwb>int</kwb> <def>t</def><sym>){</sym><br />
<def>      this</def><sym>.</sym><def>q</def> <sym>=</sym> <def>BigInteger</def><sym>.</sym><def>valueOf</def><sym>(</sym><def>q</def><sym>);</sym><br />
<def>      this</def><sym>.</sym><def>r</def> <sym>=</sym> <def>BigInteger</def><sym>.</sym><def>valueOf</def><sym>(</sym><def>r</def><sym>);</sym><br />
<def>      this</def><sym>.</sym><def>s</def> <sym>=</sym> <def>BigInteger</def><sym>.</sym><def>valueOf</def><sym>(</sym><def>s</def><sym>);</sym><br />
<def>      this</def><sym>.</sym><def>t</def> <sym>=</sym> <def>BigInteger</def><sym>.</sym><def>valueOf</def><sym>(</sym><def>t</def><sym>);</sym><br />
<def>      k</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>      <kwa>return</kwa> <def>this</def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def><br />
   Transformation compose</def><sym>(</sym><def>Transformation a</def><sym>) =</sym><br />
<def></def>      <kwa>new</kwa> <def>Transformation</def><sym>(</sym><br />
<def>         q</def><sym>:</sym>  <def>q</def> <sym>*</sym> <def>a</def><sym>.</sym><def>q</def><sym>,</sym><br />
<def>         r</def><sym>: (</sym><def>q</def> <sym>*</sym> <def>a</def><sym>.</sym><def>r</def><sym>) + (</sym><def>r</def> <sym>*</sym> <def>a</def><sym>.</sym><def>t</def><sym>),</sym><br />
<def>         s</def><sym>: (</sym><def>s</def> <sym>*</sym> <def>a</def><sym>.</sym><def>q</def><sym>) + (</sym><def>t</def> <sym>*</sym> <def>a</def><sym>.</sym><def>s</def><sym>),</sym><br />
<def>         t</def><sym>: (</sym><def>s</def> <sym>*</sym> <def>a</def><sym>.</sym><def>r</def><sym>) + (</sym><def>t</def> <sym>*</sym> <def>a</def><sym>.</sym><def>t</def><sym>)</sym><br />
<def></def>      <sym>);</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
