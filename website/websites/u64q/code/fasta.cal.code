<source>
<def></def><com>/**</com><br />
<com> * The Computer Language Benchmarks Game</com><br />
<com> * Based on the CAL Open Quark version</com><br />
<com> * Contributed by Magnus Byne.</com><br />
<com> */</com><def></def><br />
<kwa>module</kwa> <def>Fasta</def><sym>;</sym><br />
<def></def><br />
<kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Core</def><sym>.</sym><def>Prelude</def> <kwa>using</kwa><br />
<def></def>    <kwa>typeClass</kwa> <def></def><sym>=</sym> <def>Inputable</def><sym>,</sym> <def>Outputable</def><sym>;</sym><br />
<def></def>    <kwa>typeConstructor</kwa> <def></def><sym>=</sym> <def>Byte</def><sym>,</sym> <def>Char</def><sym>,</sym> <def>Double</def><sym>,</sym> <def>Int</def><sym>,</sym> <def>String</def><sym>;</sym><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>eager</def><sym>,</sym> <def>fromInt</def><sym>,</sym> <def>fst</def><sym>,</sym> <def>min</def><sym>,</sym> <def>seq</def><sym>,</sym> <def>snd</def><sym>,</sym> <def>stringToInt</def><sym>,</sym> <def>toByte</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Core</def><sym>.</sym><def>Char</def><sym>;</sym><br />
<def></def><br />
<kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Collections</def><sym>.</sym><def>List</def> <kwa>using</kwa><br />
<def></def>    <kwa>function</kwa> <def></def><sym>=</sym> <def>foldLeftStrict</def><sym>,</sym> <def>head</def><sym>,</sym> <def>length</def><sym>;</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<kwa>import</kwa> <def>Cal</def><sym>.</sym><def>Collections</def><sym>.</sym><def>Array</def><sym>;</sym><br />
<def></def><br />
<br />
<kwa>data foreign unsafe import jvm</kwa> <def></def><str>&quot;java.io.PrintStream&quot;</str><def></def> <kwa>private</kwa> <def>JPrintStream</def><sym>;</sym><br />
<def></def><br />
<kwa>data foreign unsafe import jvm</kwa> <def></def><str>&quot;byte[]&quot;</str><def><br />
    JByteArray</def> <kwa>deriving</kwa> <def>Inputable</def><sym>,</sym> <def>Outputable</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;lengthArray&quot;</str><def> byteArray_length</def> <sym>::</sym> <def>JByteArray</def> <sym>-&gt;</sym> <def>Int</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;newArray&quot;</str><def> byteArray_new</def> <sym>::</sym> <def>Int</def> <sym>-&gt;</sym> <def>JByteArray</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;subscriptArray&quot;</str><def><br />
    byteArray_subscript</def> <sym>::</sym> <def>JByteArray</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Byte</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;updateArray&quot;</str><def><br />
    byteArray_update</def> <sym>::</sym> <def>JByteArray</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Byte</def> <sym>-&gt;</sym> <def>Byte</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;static field java.lang.System.out&quot;</str><def></def><br />
    <kwa>private</kwa> <def>stdout</def> <sym>::</sym> <def>JOutputStream</def><sym>;</sym><br />
<def></def><br />
<kwa>data foreign unsafe import jvm</kwa> <def></def><str>&quot;java.io.OutputStream&quot;</str><def></def> <kwa>private</kwa> <def>JOutputStream</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;method write&quot;</str><def></def><br />
    <kwa>private</kwa> <def>writeBytes</def> <sym>::</sym> <def>JOutputStream</def> <sym>-&gt;</sym> <def>JByteArray</def> <sym>-&gt; ();</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;method write&quot;</str><def></def><br />
    <kwa>private</kwa> <def>writeBytesFromTo</def> <sym>::</sym> <def>JOutputStream</def> <sym>-&gt;</sym> <def>JByteArray</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt; ();</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;method write&quot;</str><def></def><br />
    <kwa>private</kwa> <def>writeByte</def> <sym>::</sym> <def>JOutputStream</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt; ();</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;method getBytes&quot;</str><def></def><br />
    <kwa>private</kwa> <def>toBytes</def> <sym>::</sym> <def>String</def> <sym>-&gt;</sym> <def>JByteArray</def><sym>;</sym><br />
<def></def><br />
<kwa>data foreign unsafe import jvm</kwa> <def></def><str>&quot;double[]&quot;</str><def> JDoubleArray</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;newArray&quot;</str><def> doubleArray_new</def> <sym>::</sym> <def>Int</def> <sym>-&gt;</sym> <def>JDoubleArray</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;subscriptArray&quot;</str><def><br />
    doubleArray_subscript</def> <sym>::</sym> <def>JDoubleArray</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Double</def><sym>;</sym><br />
<def></def><br />
<kwa>foreign unsafe import jvm</kwa> <def></def><str>&quot;updateArray&quot;</str><def><br />
    doubleArray_update</def> <sym>::</sym> <def>JDoubleArray</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Double</def> <sym>-&gt;</sym> <def>Double</def><sym>;</sym><br />
<def><br />
alu</def> <sym>::</sym> <def>JByteArray</def><sym>;</sym><br />
<def>alu</def> <sym>=</sym><br />
<def>    toBytes</def><br />
        <sym>(</sym><br />
<def></def>            <str>&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</str><def></def><br />
            <sym>++</sym> <def></def><str>&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</str><def></def><br />
            <sym>++</sym> <def></def><str>&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</str><def></def><br />
            <sym>++</sym> <def></def><str>&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</str><def></def><br />
            <sym>++</sym> <def></def><str>&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</str><def></def><br />
            <sym>++</sym> <def></def><str>&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</str><def></def><br />
            <sym>++</sym> <def></def><str>&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</str><def></def><br />
        <sym>)</sym><br />
<def></def>    <sym>;</sym><br />
<def><br />
charToByte</def> <sym>::</sym> <def>Char</def> <sym>-&gt;</sym> <def>Byte</def><sym>;</sym><br />
<def>charToByte</def> <sym>!</sym><def>c</def> <sym>=</sym> <def>toByte</def> <sym>(</sym><def>Char</def><sym>.</sym><def>toInt c</def><sym>);</sym><br />
<def></def><br />
<com>/** create array of iub codes*/</com><def><br />
iubCodes</def> <sym>::</sym> <def>JByteArray</def><sym>;</sym><br />
<def>iubCodes</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa><br />
<def>        codes</def> <sym>=</sym><br />
<def></def>            <sym>[</sym><br />
<def></def>                <str>'a'</str><def></def><sym>,</sym><def></def><str>'c'</str><def></def><sym>,</sym><def></def><str>'g'</str><def></def><sym>,</sym><def></def><str>'t'</str><def></def><sym>,</sym><def></def><str>'B'</str><def></def><sym>,</sym><def></def><str>'D'</str><def></def><sym>,</sym><def></def><str>'H'</str><def></def><sym>,</sym><br />
<def></def>                <str>'K'</str><def></def><sym>,</sym><def></def><str>'M'</str><def></def><sym>,</sym><def></def><str>'N'</str><def></def><sym>,</sym><def></def><str>'R'</str><def></def><sym>,</sym><def></def><str>'S'</str><def></def><sym>,</sym><def></def><str>'V'</str><def></def><sym>,</sym><def></def><str>'W'</str><def></def><sym>,</sym><def></def><str>'Y'</str><def></def><br />
            <sym>]</sym><br />
<def></def>            <sym>;</sym><br />
<def></def>    <kwa>in</kwa><br />
<def>        fst</def><br />
            <sym>(</sym><def>foldLeftStrict</def><br />
                <sym>(</sym><br />
<def>                    \</def><sym>!</sym><def>array</def> <sym>!</sym><def>value</def> <sym>-&gt;</sym><br />
<def></def>                        <sym>(</sym><br />
<def>                            byteArray_update</def><br />
                                <sym>(</sym><def>fst array</def><sym>)</sym><br />
<def></def>                                <sym>(</sym><def>snd array</def><sym>)</sym><br />
<def></def>                                <sym>(</sym><def>charToByte value</def><sym>)</sym><br />
<def></def>                            <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                            fst array</def><sym>,</sym><br />
<def>                            snd array</def> <sym>+</sym> <def></def><num>1</num><br />
<def></def>                        <sym>)</sym><br />
<def></def>                <sym>)</sym><br />
<def></def>                <sym>(</sym><def>byteArray_new</def> <sym>(</sym><def>length codes</def><sym>),</sym> <def></def><num>0</num><def></def><sym>)</sym><br />
<def>                codes</def><br />
            <sym>)</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<com>/** create array of cumulative frequencies*/</com><def><br />
iubFreq</def> <sym>::</sym> <def>JDoubleArray</def><sym>;</sym><br />
<def>iubFreq</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa><br />
<def>        freq</def> <sym>=</sym><br />
<def></def>            <sym>[</sym><br />
<def></def>                <num>0.27</num><def></def><sym>,</sym><def></def><num>0.12</num><def></def><sym>,</sym><def></def><num>0.12</num><def></def><sym>,</sym><def></def><num>0.27</num><def></def><sym>,</sym><def></def><num>0.02</num><def></def><sym>,</sym><def></def><num>0.02</num><def></def><sym>,</sym><def></def><num>0.02</num><def></def><sym>,</sym><br />
<def></def>                <num>0.02</num><def></def><sym>,</sym><def></def><num>0.02</num><def></def><sym>,</sym><def></def><num>0.02</num><def></def><sym>,</sym><def></def><num>0.02</num><def></def><sym>,</sym><def></def><num>0.02</num><def></def><sym>,</sym><def></def><num>0.02</num><def></def><sym>,</sym><def></def><num>0.02</num><def></def><sym>,</sym><def></def><num>0.02</num><br />
<def></def>            <sym>]</sym><br />
<def></def>            <sym>;</sym><br />
<def></def>    <kwa>in</kwa><br />
<def></def>        <sym>(</sym><def>foldLeftStrict</def><br />
            <sym>(</sym><br />
<def>                \</def><sym>!</sym><def>accum</def> <sym>!</sym><def>value</def> <sym>-&gt;</sym><br />
<def></def>                    <sym>(</sym><br />
<def>                        doubleArray_update<br />
                            accum</def><sym>.</sym><def>#</def><num>1</num><br />
<def>                            accum</def><sym>.</sym><def>#</def><num>2</num><br />
<def></def>                            <sym>(</sym><def>accum</def><sym>.</sym><def>#</def><num>3</num> <def></def><sym>+</sym> <def>value</def><sym>)</sym><br />
<def></def>                        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                        accum</def><sym>.</sym><def>#</def><num>1</num><def></def><sym>,</sym><br />
<def>                        accum</def><sym>.</sym><def>#</def><num>2</num> <def></def><sym>+</sym> <def></def><num>1</num><def></def><sym>,</sym><br />
<def>                        accum</def><sym>.</sym><def>#</def><num>3</num> <def></def><sym>+</sym> <def>value</def><br />
                    <sym>)</sym><br />
<def></def>            <sym>)</sym><br />
<def></def>            <sym>(</sym><def>doubleArray_new</def> <sym>(</sym><def>length freq</def><sym>),</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>0.0</num><def></def><sym>)</sym><br />
<def>            freq</def><br />
        <sym>).</sym><def>#</def><num>1</num><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<com>/** array of human gene codes*/</com><def><br />
humanCodes</def> <sym>::</sym> <def>JByteArray</def><sym>;</sym><br />
<def>humanCodes</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa><br />
<def>        codes</def> <sym>= [</sym><def></def><str>'a'</str><def></def><sym>,</sym> <def></def><str>'c'</str><def></def><sym>,</sym> <def></def><str>'g'</str><def></def><sym>,</sym> <def></def><str>'t'</str><def></def><sym>];</sym><br />
<def></def>    <kwa>in</kwa><br />
<def>        fst</def><br />
            <sym>(</sym><def>foldLeftStrict</def><br />
                <sym>(</sym><br />
<def>                    \</def><sym>!</sym><def>array</def> <sym>!</sym><def>value</def> <sym>-&gt;</sym><br />
<def></def>                        <sym>(</sym><br />
<def>                            byteArray_update</def><br />
                                <sym>(</sym><def>fst array</def><sym>)</sym><br />
<def></def>                                <sym>(</sym><def>snd array</def><sym>)</sym><br />
<def></def>                                <sym>(</sym><def>charToByte value</def><sym>)</sym><br />
<def></def>                            <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                            fst array</def><sym>,</sym><br />
<def>                            snd array</def> <sym>+</sym> <def></def><num>1</num><br />
<def></def>                        <sym>)</sym><br />
<def></def>                <sym>)</sym><br />
<def></def>                <sym>(</sym><def>byteArray_new</def> <sym>(</sym><def>length codes</def><sym>),</sym> <def></def><num>0</num><def></def><sym>)</sym><br />
<def>                codes</def><br />
            <sym>)</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<com>/** create native array of cumulative frequencies for human genes*/</com><def><br />
humanFreq</def> <sym>::</sym> <def>JDoubleArray</def><sym>;</sym><br />
<def>humanFreq</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa><br />
<def>        freq</def> <sym>=</sym><br />
<def></def>            <sym>[</sym><br />
<def></def>                <num>0.302954942668</num><def></def><sym>,</sym><br />
<def></def>                <num>0.1979883004921</num><def></def><sym>,</sym><br />
<def></def>                <num>0.1975473066391</num><def></def><sym>,</sym><br />
<def></def>                <num>0.3015094502008</num><br />
<def></def>            <sym>]</sym><br />
<def></def>            <sym>;</sym><br />
<def></def>    <kwa>in</kwa><br />
<def></def>        <sym>(</sym><def>foldLeftStrict</def><br />
            <sym>(</sym><br />
<def>                \</def><sym>!</sym><def>accum</def> <sym>!</sym><def>value</def> <sym>-&gt;</sym><br />
<def></def>                    <sym>(</sym><br />
<def>                        doubleArray_update<br />
                            accum</def><sym>.</sym><def>#</def><num>1</num><br />
<def>                            accum</def><sym>.</sym><def>#</def><num>2</num><br />
<def></def>                            <sym>(</sym><def>accum</def><sym>.</sym><def>#</def><num>3</num> <def></def><sym>+</sym> <def>value</def><sym>)</sym><br />
<def></def>                        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                        accum</def><sym>.</sym><def>#</def><num>1</num><def></def><sym>,</sym><br />
<def>                        accum</def><sym>.</sym><def>#</def><num>2</num> <def></def><sym>+</sym> <def></def><num>1</num><def></def><sym>,</sym><br />
<def>                        accum</def><sym>.</sym><def>#</def><num>3</num> <def></def><sym>+</sym> <def>value</def><br />
                    <sym>)</sym><br />
<def></def>            <sym>)</sym><br />
<def></def>            <sym>(</sym><def>doubleArray_new</def> <sym>(</sym><def>length freq</def><sym>),</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>0.0</num><def></def><sym>)</sym><br />
<def>            freq</def><br />
        <sym>).</sym><def>#</def><num>1</num><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
<com>/** naively pick a random gene from frequency table*/</com><def><br />
selectGene</def> <sym>::</sym> <def>JDoubleArray</def> <sym>-&gt;</sym> <def>JByteArray</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Double</def> <sym>-&gt;</sym> <def>Byte</def><sym>;</sym><br />
<def>selectGene</def> <sym>!</sym><def>freqTable</def> <sym>!</sym><def>codeTable</def> <sym>!</sym><def>i</def> <sym>!</sym><def>rnd</def> <sym>=</sym><br />
<def></def>    <kwa>if</kwa> <def>doubleArray_subscript freqTable i</def> <sym>&gt;</sym> <def>rnd</def> <kwa>then</kwa><br />
<def>        byteArray_subscript codeTable i</def><br />
    <kwa>else</kwa><br />
<def>        selectGene freqTable codeTable</def> <sym>(</sym><def>i</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>)</sym> <def>rnd</def><br />
    <sym>;</sym><br />
<def></def><br />
<com>/** output file line length*/</com><def><br />
lineLength</def> <sym>::</sym> <def>Int</def><sym>;</sym><br />
<def>lineLength</def> <sym>=</sym> <def></def><num>60</num> <def></def><sym>::</sym> <def>Int</def><sym>;</sym><br />
<def></def><br />
<com>/** random number generator consts*/</com><def><br />
im</def> <sym>::</sym> <def>Int</def><sym>;</sym><br />
<def>im</def> <sym>=</sym> <def></def><num>139968</num><def></def><sym>;</sym><br />
<def><br />
ia</def> <sym>::</sym> <def>Int</def><sym>;</sym><br />
<def>ia</def> <sym>=</sym> <def></def><num>3877</num><def></def><sym>;</sym><br />
<def><br />
ic</def> <sym>::</sym> <def>Int</def><sym>;</sym><br />
<def>ic</def> <sym>=</sym> <def></def><num>29573</num><def></def><sym>;</sym><br />
<def><br />
makeRandomFasta</def> <sym>::</sym><br />
<def>    String</def> <sym>-&gt;</sym> <def>String</def> <sym>-&gt;</sym> <def>JDoubleArray</def><br />
    <sym>-&gt;</sym> <def>JByteArray</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>JOutputStream</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def><sym>;</sym><br />
<def>makeRandomFasta</def> <sym>!</sym><def>id</def> <sym>!</sym><def>desc</def> <sym>!</sym><def>freqTable</def> <sym>!</sym><def>codeTable</def> <sym>!</sym><def>n</def> <sym>!</sym><def>stream</def> <sym>!</sym><def>seed</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa><br />
<def>        eol</def> <sym>::</sym> <def>Byte</def><sym>;</sym><br />
<def>        eol</def> <sym>=</sym> <def>eager $ fromInt</def> <sym>(</sym><def>Char</def><sym>.</sym><def>toInt</def> <str>'</str><esc>\n</esc><str>'</str><def></def><sym>);</sym><br />
<def><br />
        buffer</def> <sym>::</sym> <def>JByteArray</def><sym>;</sym><br />
<def>        buffer</def> <sym>=</sym> <def>byteArray_new</def> <num>10240</num><def></def><sym>;</sym><br />
<def><br />
        bufferLength</def> <sym>::</sym> <def>Int</def><sym>;</sym><br />
<def>        bufferLength</def> <sym>=</sym> <def></def><num>10240</num><def></def><sym>;</sym><br />
<def><br />
        generate</def> <sym>::</sym> <def>JByteArray</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def><sym>;</sym><br />
<def>        generate</def> <sym>!</sym><def>buffer</def> <sym>!</sym><def>n</def> <sym>!</sym><def>bytesToEol</def> <sym>!</sym><def>bytesInBuffer</def> <sym>!</sym><def>seed</def> <sym>=</sym><br />
<def></def>            <kwa>if</kwa> <def>bytesToEol</def> <sym>&gt;</sym> <def></def><num>0</num> <def></def><kwa>then</kwa><br />
<def></def>                <kwa>let</kwa><br />
<def>                    newseed</def> <sym>::</sym> <def>Int</def><sym>;</sym><br />
<def>                    newseed</def> <sym>=</sym> <def>eager $</def> <sym>(</sym><def>seed</def> <sym>*</sym> <def>ia</def> <sym>+</sym> <def>ic</def><sym>) %</sym> <def>im</def><sym>;</sym><br />
<def><br />
                    rnd</def> <sym>::</sym> <def>Double</def><sym>;</sym><br />
<def>                    rnd</def> <sym>=</sym> <def></def><num>1.0</num> <def></def><sym>*</sym> <def>fromInt newseed</def> <sym>/</sym> <def>fromInt im</def><sym>;</sym><br />
<def></def>                <kwa>in</kwa><br />
<def>                    byteArray_update<br />
                        buffer<br />
                        bytesInBuffer</def><br />
                        <sym>(</sym><def>selectGene freqTable codeTable</def> <num>0</num> <def>rnd</def><sym>)</sym><br />
<def></def>                    <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                    generate<br />
                        buffer<br />
                        n</def><br />
                        <sym>(</sym><def>bytesToEol</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>                        <sym>(</sym><def>bytesInBuffer</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def>                        newseed</def><br />
            <kwa>else</kwa><br />
<def></def>                <slc>//end of line add the eol byte</slc><br />
<def>                byteArray_update buffer bytesInBuffer eol</def><br />
                <sym>`</sym><def>seq</def><sym>`</sym><br />
<def></def>                <sym>(</sym><br />
<def></def>                    <kwa>if</kwa> <def>n</def> <sym>&gt;</sym> <def></def><num>0</num> <def></def><kwa>then</kwa><br />
<def></def>                        <kwa>let</kwa><br />
<def>                            bytesInNextLine</def> <sym>::</sym> <def>Int</def><sym>;</sym><br />
<def>                            bytesInNextLine</def> <sym>=</sym> <def>eager $ min n lineLength</def><sym>;</sym><br />
<def></def>                        <kwa>in</kwa><br />
<def></def>                            <kwa>if</kwa><br />
<def>                                bytesInNextLine</def><br />
                                <sym>&gt;</sym> <def>bufferLength</def> <sym>- (</sym><def>bytesInBuffer</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>                            <kwa>then</kwa><br />
<def>                                writeBytesFromTo<br />
                                    stream<br />
                                    buffer</def><br />
                                    <num>0</num><br />
<def></def>                                    <sym>(</sym><def>bytesInBuffer</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>                                <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                                generate<br />
                                    buffer</def><br />
                                    <sym>(</sym><def>n</def> <sym>-</sym> <def>lineLength</def><sym>)</sym><br />
<def>                                    bytesInNextLine</def><br />
                                    <num>0</num><br />
<def>                                    seed</def><br />
                            <kwa>else</kwa><br />
<def>                                generate<br />
                                    buffer</def><br />
                                    <sym>(</sym><def>n</def> <sym>-</sym> <def>lineLength</def><sym>)</sym><br />
<def>                                    bytesInNextLine</def><br />
                                    <sym>(</sym><def>bytesInBuffer</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def>                                    seed</def><br />
                    <kwa>else</kwa><br />
<def></def>                        <slc>//finished, flush buffer</slc><br />
<def>                        writeBytesFromTo stream buffer</def> <num>0</num> <def></def><sym>(</sym><def>bytesInBuffer</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>                        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                        seed</def><br />
                <sym>)</sym><br />
<def></def>            <sym>;</sym><br />
<def></def>    <kwa>in</kwa><br />
<def>        writeBytes stream</def> <sym>(</sym><def>toBytes</def> <sym>(</sym><def></def><str>&quot;&gt;&quot;</str><def></def> <sym>++</sym> <def>id</def> <sym>++</sym> <def></def><str>&quot; &quot;</str><def></def> <sym>++</sym> <def>desc</def> <sym>++</sym> <def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>))</sym><br />
<def></def>        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>        generate buffer</def> <sym>(</sym><def>n</def> <sym>-</sym> <def>lineLength</def><sym>) (</sym><def>min n lineLength</def><sym>)</sym> <def></def><num>0</num> <def>seed</def><br />
    <sym>;</sym><br />
<def><br />
makeRepeatFasta</def> <sym>::</sym><br />
<def>    String</def> <sym>-&gt;</sym> <def>String</def> <sym>-&gt;</sym> <def>JByteArray</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt;</sym> <def>JOutputStream</def> <sym>-&gt; ();</sym><br />
<def>makeRepeatFasta</def> <sym>!</sym><def>id</def> <sym>!</sym><def>desc</def> <sym>!</sym><def>alu</def> <sym>!</sym><def>n</def> <sym>!</sym><def>stream</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa><br />
<def>        seqLength</def> <sym>::</sym> <def>Int</def><sym>;</sym><br />
<def>        seqLength</def> <sym>=</sym> <def>eager $ byteArray_length alu</def><sym>;</sym><br />
<def><br />
        eol</def> <sym>::</sym> <def>Int</def><sym>;</sym><br />
<def>        eol</def> <sym>=</sym> <def>eager $ Char</def><sym>.</sym><def>toInt</def> <str>'</str><esc>\n</esc><str>'</str><def></def><sym>;</sym><br />
<def><br />
        generate</def> <sym>::</sym> <def>Int</def> <sym>-&gt;</sym> <def>Int</def> <sym>-&gt; ();</sym><br />
<def>        generate</def> <sym>!</sym><def>n</def> <sym>!</sym><def>k</def> <sym>=</sym><br />
<def></def>            <kwa>if</kwa> <def>n</def> <sym>&gt;</sym> <def></def><num>0</num> <def></def><kwa>then</kwa><br />
<def></def>                <kwa>let</kwa><br />
<def>                    bytesToWriteThisLine</def> <sym>::</sym> <def>Int</def><sym>;</sym><br />
<def>                    bytesToWriteThisLine</def> <sym>=</sym> <def>eager $ min n lineLength</def><sym>;</sym><br />
<def></def>                <kwa>in</kwa><br />
<def></def>                    <kwa>if</kwa> <def>bytesToWriteThisLine</def> <sym>&lt;</sym> <def>seqLength</def> <sym>-</sym> <def>k</def> <kwa>then</kwa><br />
<def>                        writeBytesFromTo stream alu k bytesToWriteThisLine</def><br />
                        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                        writeByte stream eol</def><br />
                        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                        generate</def><br />
                            <sym>(</sym><def>n</def> <sym>-</sym> <def>bytesToWriteThisLine</def><sym>)</sym><br />
<def></def>                            <sym>(</sym><def>k</def> <sym>+</sym> <def>bytesToWriteThisLine</def><sym>)</sym><br />
<def></def>                    <kwa>else</kwa><br />
<def>                        writeBytesFromTo stream alu k</def> <sym>(</sym><def>seqLength</def> <sym>-</sym> <def>k</def><sym>)</sym><br />
<def></def>                        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                        writeBytesFromTo<br />
                            stream<br />
                            alu</def><br />
                            <num>0</num><br />
<def></def>                            <sym>(</sym><def>bytesToWriteThisLine</def> <sym>- (</sym><def>seqLength</def> <sym>-</sym> <def>k</def><sym>))</sym><br />
<def></def>                        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                        writeByte stream eol</def><br />
                        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>                        generate</def><br />
                            <sym>(</sym><def>n</def> <sym>-</sym> <def>bytesToWriteThisLine</def><sym>)</sym><br />
<def></def>                            <sym>(</sym><def>bytesToWriteThisLine</def> <sym>- (</sym><def>seqLength</def> <sym>-</sym> <def>k</def><sym>))</sym><br />
<def></def>            <kwa>else</kwa><br />
<def></def>                <sym>()</sym><br />
<def></def>            <sym>;</sym><br />
<def></def>    <kwa>in</kwa><br />
<def>        writeBytes stream</def> <sym>(</sym><def>toBytes</def> <sym>(</sym><def></def><str>&quot;&gt;&quot;</str><def></def> <sym>++</sym> <def>id</def> <sym>++</sym> <def></def><str>&quot; &quot;</str><def></def> <sym>++</sym> <def>desc</def> <sym>++</sym> <def></def><str>&quot;</str><esc>\n</esc><str>&quot;</str><def></def><sym>))</sym><br />
<def></def>        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>        generate n</def> <num>0</num><br />
<def></def>    <sym>;</sym><br />
<def><br />
main</def> <sym>:: [</sym><def>String</def><sym>] -&gt; ();</sym><br />
<def></def><kwa>public</kwa> <def>main args</def> <sym>=</sym><br />
<def></def>    <kwa>let</kwa><br />
<def>        n</def> <sym>=</sym> <def>eager $ stringToInt</def> <sym>(</sym><def>head args</def><sym>);</sym><br />
<def><br />
        intialSeed</def> <sym>::</sym> <def>Int</def><sym>;</sym><br />
<def>        intialSeed</def> <sym>=</sym> <def></def><num>42</num><def></def><sym>;</sym><br />
<def><br />
        seed1</def> <sym>::</sym> <def>Int</def><sym>;</sym><br />
<def>        seed1</def> <sym>=</sym><br />
<def>            makeRandomFasta</def><br />
                <str>&quot;TWO&quot;</str><def></def><br />
                <str>&quot;IUB ambiguity codes&quot;</str><def><br />
                iubFreq<br />
                iubCodes</def><br />
                <sym>(</sym><def>n</def> <sym>*</sym> <def></def><num>3</num><def></def><sym>)</sym><br />
<def>                stdout<br />
                intialSeed</def><br />
            <sym>;</sym><br />
<def><br />
        seed2</def> <sym>::</sym> <def>Int</def><sym>;</sym><br />
<def>        seed2</def> <sym>=</sym><br />
<def>            makeRandomFasta</def><br />
                <str>&quot;THREE&quot;</str><def></def><br />
                <str>&quot;Homo sapiens frequency&quot;</str><def><br />
                humanFreq<br />
                humanCodes</def><br />
                <sym>(</sym><def>n</def> <sym>*</sym> <def></def><num>5</num><def></def><sym>)</sym><br />
<def>                stdout<br />
                seed1</def><br />
            <sym>;</sym><br />
<def></def>    <kwa>in</kwa><br />
<def>        makeRepeatFasta</def> <str>&quot;ONE&quot;</str><def></def> <str>&quot;Homo sapiens alu&quot;</str><def> alu</def> <sym>(</sym><def>n</def> <sym>*</sym> <def></def><num>2</num><def></def><sym>)</sym> <def>stdout</def><br />
        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>        seed1</def><br />
        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def>        seed2</def><br />
        <sym>`</sym><def>seq</def><sym>`</sym><br />
<def></def>        <sym>()</sym><br />
<def></def>    <sym>;</sym><br />
<def></def><br />
</source>
