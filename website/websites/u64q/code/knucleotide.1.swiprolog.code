<span class="hl slc">% ----------------------------------------------------------------------</span>
<span class="hl slc">% The Computer Language Benchmarks Game</span>
<span class="hl slc">% http://shootout.alioth.debian.org/</span>
<span class="hl slc">%</span>
<span class="hl slc">% contributed by Anthony Borla</span>
<span class="hl slc">% fixed by Glendon Holst</span>
<span class="hl slc">% ----------------------------------------------------------------------</span>

main <span class="hl sym">:-</span>
  init_knucleotide<span class="hl sym">,</span>

  FragmentLengths <span class="hl sym">= [</span><span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">],</span>
  forall<span class="hl sym">(</span>member<span class="hl sym">(</span>E<span class="hl sym">,</span> FragmentLengths<span class="hl sym">), (</span>print_frequencies<span class="hl sym">(</span>E<span class="hl sym">),</span> <span class="hl kwa">nl</span><span class="hl sym">)),</span>

  Fragments <span class="hl sym">= [</span><span class="hl str">&quot;GGT&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;GGTA&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;GGTATT&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;GGTATTTTAATT&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl sym">],</span>
  forall<span class="hl sym">(</span>member<span class="hl sym">(</span>E<span class="hl sym">,</span> Fragments<span class="hl sym">),</span> print_count<span class="hl sym">(</span>E<span class="hl sym">)),</span>

  drop_knucleotide<span class="hl sym">.</span>

<span class="hl slc">% ------------------------------- %</span>

init_knucleotide <span class="hl sym">:-</span>
  set_stream<span class="hl sym">(</span><span class="hl kwb">current_input</span><span class="hl sym">,</span> buffer<span class="hl sym">(</span>full<span class="hl sym">)),</span>
  prompt<span class="hl sym">(</span>Old<span class="hl sym">,</span> <span class="hl str">''</span><span class="hl sym">),</span> setvar<span class="hl sym">(</span>prompt<span class="hl sym">,</span> Old<span class="hl sym">),</span>
  dropvar<span class="hl sym">(</span>loaded<span class="hl sym">).</span>

<span class="hl slc">% ------------- %</span>

drop_knucleotide <span class="hl sym">:-</span>
  getvar<span class="hl sym">(</span>prompt<span class="hl sym">,</span> Old<span class="hl sym">),</span> prompt<span class="hl sym">(</span>_<span class="hl sym">,</span> Old<span class="hl sym">),</span>
  dropvar<span class="hl sym">(</span>prompt<span class="hl sym">),</span> dropvar<span class="hl sym">(</span>loaded<span class="hl sym">).</span>

<span class="hl slc">% ------------------------------- %</span>

print_frequencies<span class="hl sym">(</span>KeyLen<span class="hl sym">) :-</span>
  generate_counts<span class="hl sym">(</span>KeyLen<span class="hl sym">,</span> CountTable<span class="hl sym">),</span>
  sum_counts_<span class="hl sym">(</span>CountTable<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> SumCounts<span class="hl sym">),</span>
  make_freq_table_<span class="hl sym">(</span>CountTable<span class="hl sym">,</span> SumCounts<span class="hl sym">, [],</span> FTable<span class="hl sym">),</span>
  keysort<span class="hl sym">(</span>FTable<span class="hl sym">,</span> SFTable<span class="hl sym">),</span> reverse<span class="hl sym">(</span>SFTable<span class="hl sym">,</span> FreqTable<span class="hl sym">),</span>
  print_freq_table_<span class="hl sym">(</span>FreqTable<span class="hl sym">).</span>

<span class="hl slc">% ------------- %</span>

sum_counts_<span class="hl sym">([],</span> Acc<span class="hl sym">,</span> Acc<span class="hl sym">) :- !.</span>

sum_counts_<span class="hl sym">([</span>_<span class="hl sym">-</span>C<span class="hl sym">|</span>T<span class="hl sym">],</span> Acc<span class="hl sym">,</span> Sum<span class="hl sym">) :-</span> Acc1 <span class="hl kwa">is</span> Acc <span class="hl sym">+</span> C<span class="hl sym">, !,</span> sum_counts_<span class="hl sym">(</span>T<span class="hl sym">,</span> Acc1<span class="hl sym">,</span> Sum<span class="hl sym">).</span>

<span class="hl slc">% ------------- %</span>

make_freq_table_<span class="hl sym">([],</span> _<span class="hl sym">,</span> FTA<span class="hl sym">,</span> FTA<span class="hl sym">) :- !.</span>

make_freq_table_<span class="hl sym">([</span>K<span class="hl sym">-</span>C<span class="hl sym">|</span>T<span class="hl sym">],</span> SumCounts<span class="hl sym">,</span> FTA<span class="hl sym">,</span> FreqTable<span class="hl sym">) :-</span>
  F <span class="hl kwa">is</span> C <span class="hl sym">/</span> SumCounts <span class="hl sym">*</span> <span class="hl num">100.0</span><span class="hl sym">,</span> append<span class="hl sym">([</span>F<span class="hl sym">-</span>K<span class="hl sym">],</span> FTA<span class="hl sym">,</span> FTA1<span class="hl sym">),</span>
  <span class="hl sym">!,</span> make_freq_table_<span class="hl sym">(</span>T<span class="hl sym">,</span> SumCounts<span class="hl sym">,</span> FTA1<span class="hl sym">,</span> FreqTable<span class="hl sym">).</span>

<span class="hl slc">% ------------- %</span>

print_freq_table_<span class="hl sym">([]) :- !.</span>

print_freq_table_<span class="hl sym">([</span>F<span class="hl sym">-</span>K<span class="hl sym">|</span>T<span class="hl sym">]) :-</span>
  format<span class="hl sym">(</span><span class="hl str">'~w ~3f</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">, [</span>K<span class="hl sym">,</span> F<span class="hl sym">]),</span>
  <span class="hl sym">!,</span> print_freq_table_<span class="hl sym">(</span>T<span class="hl sym">).</span>

<span class="hl slc">% ------------------------------- %</span>

print_count<span class="hl sym">(</span>Fragment<span class="hl sym">) :-</span>
	string_length<span class="hl sym">(</span>Fragment<span class="hl sym">,</span> FragLen<span class="hl sym">),</span>
	generate_counts<span class="hl sym">(</span>FragLen<span class="hl sym">,</span> CountTable<span class="hl sym">),</span>
	string_to_atom<span class="hl sym">(</span>Fragment<span class="hl sym">,</span> FragKey<span class="hl sym">),</span>
	<span class="hl sym">(</span>
		select<span class="hl sym">(</span>FragKey<span class="hl sym">-</span>Count<span class="hl sym">,</span> CountTable<span class="hl sym">,</span> _<span class="hl sym">)</span>
	<span class="hl sym">;</span>
		Count <span class="hl sym">=</span> <span class="hl num">0</span>
	<span class="hl sym">), !,</span>
	format<span class="hl sym">(</span><span class="hl str">'~d</span><span class="hl esc">\t</span><span class="hl str">~s</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">, [</span>Count<span class="hl sym">,</span> Fragment<span class="hl sym">]).</span>

<span class="hl slc">% ------------- %</span>

generate_counts<span class="hl sym">(</span>Length<span class="hl sym">,</span> CountTable<span class="hl sym">) :-</span>
  <span class="hl kwb">catch</span><span class="hl sym">(</span>getvar<span class="hl sym">(</span>loaded<span class="hl sym">,</span> Seq<span class="hl sym">),</span> _<span class="hl sym">,</span> load_sequence<span class="hl sym">(</span><span class="hl kwb">current_input</span><span class="hl sym">,</span> Seq<span class="hl sym">)),</span>
  string_length<span class="hl sym">(</span>Seq<span class="hl sym">,</span> SeqLen<span class="hl sym">),</span> Last <span class="hl kwa">is</span> SeqLen <span class="hl sym">-</span> Length <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span>
  make_count_table<span class="hl sym">(</span>Length<span class="hl sym">,</span> Last<span class="hl sym">,</span> Seq<span class="hl sym">,</span> CountTable<span class="hl sym">).</span>

<span class="hl slc">% ------------------------------- %</span>

make_count_table<span class="hl sym">(</span>Length<span class="hl sym">,</span> Last<span class="hl sym">,</span> Seq<span class="hl sym">,</span> CountTable<span class="hl sym">) :-</span>
  empty_assoc<span class="hl sym">(</span>A<span class="hl sym">),</span>
  mct_i_loop_<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> Length<span class="hl sym">,</span> Last<span class="hl sym">,</span> Seq<span class="hl sym">,</span> A<span class="hl sym">,</span> ACT<span class="hl sym">),</span>
  assoc_to_list<span class="hl sym">(</span>ACT<span class="hl sym">,</span> CountTable<span class="hl sym">).</span>

<span class="hl slc">% ------------- %</span>

mct_i_loop_<span class="hl sym">(</span>Length<span class="hl sym">,</span> Length<span class="hl sym">,</span> _<span class="hl sym">,</span> _<span class="hl sym">,</span> CTA<span class="hl sym">,</span> CTA<span class="hl sym">) :- !.</span>

mct_i_loop_<span class="hl sym">(</span>I<span class="hl sym">,</span> Length<span class="hl sym">,</span> Last<span class="hl sym">,</span> Seq<span class="hl sym">,</span> CTA<span class="hl sym">,</span> CountTable<span class="hl sym">) :-</span>
  mct_j_loop_<span class="hl sym">(</span>I<span class="hl sym">,</span> Last<span class="hl sym">,</span> Length<span class="hl sym">,</span> Seq<span class="hl sym">,</span> CTA<span class="hl sym">,</span> CTA1<span class="hl sym">),</span>
  I1 <span class="hl kwa">is</span> I <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">, !,</span> mct_i_loop_<span class="hl sym">(</span>I1<span class="hl sym">,</span> Length<span class="hl sym">,</span> Last<span class="hl sym">,</span> Seq<span class="hl sym">,</span> CTA1<span class="hl sym">,</span> CountTable<span class="hl sym">).</span>

<span class="hl slc">% ------------- %</span>

mct_j_loop_<span class="hl sym">(</span>J<span class="hl sym">,</span> Last<span class="hl sym">,</span> _<span class="hl sym">,</span> _<span class="hl sym">,</span> CTA<span class="hl sym">,</span> CTA<span class="hl sym">) :-</span> J <span class="hl sym">&gt;=</span> Last<span class="hl sym">, !.</span>

mct_j_loop_<span class="hl sym">(</span>J<span class="hl sym">,</span> Last<span class="hl sym">,</span> Length<span class="hl sym">,</span> Seq<span class="hl sym">,</span> CTA<span class="hl sym">,</span> CountTable<span class="hl sym">) :-</span>
  sub_string<span class="hl sym">(</span>Seq<span class="hl sym">,</span> J<span class="hl sym">,</span> Length<span class="hl sym">,</span> _<span class="hl sym">,</span> KeyString<span class="hl sym">),</span> string_to_atom<span class="hl sym">(</span>KeyString<span class="hl sym">,</span> Key<span class="hl sym">),</span>
  <span class="hl sym">(</span>get_assoc<span class="hl sym">(</span>Key<span class="hl sym">,</span> CTA<span class="hl sym">,</span> Value<span class="hl sym">) -&gt;</span>
    V1 <span class="hl kwa">is</span> Value <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span> put_assoc<span class="hl sym">(</span>Key<span class="hl sym">,</span> CTA<span class="hl sym">,</span> V1<span class="hl sym">,</span> CTA1<span class="hl sym">)</span>
  <span class="hl sym">;</span>
    put_assoc<span class="hl sym">(</span>Key<span class="hl sym">,</span> CTA<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> CTA1<span class="hl sym">)),</span>
  J1 <span class="hl kwa">is</span> J <span class="hl sym">+</span> Length<span class="hl sym">, !,</span> mct_j_loop_<span class="hl sym">(</span>J1<span class="hl sym">,</span> Last<span class="hl sym">,</span> Length<span class="hl sym">,</span> Seq<span class="hl sym">,</span> CTA1<span class="hl sym">,</span> CountTable<span class="hl sym">).</span>

<span class="hl slc">% ------------------------------- %</span>

load_sequence<span class="hl sym">(</span>S<span class="hl sym">,</span> Seq<span class="hl sym">) :-</span> load_sequence_<span class="hl sym">(</span>S<span class="hl sym">,</span> <span class="hl kwa">fail</span><span class="hl sym">,</span> <span class="hl str">''</span><span class="hl sym">,</span> Seq<span class="hl sym">),</span> linkvar<span class="hl sym">(</span>loaded<span class="hl sym">,</span> Seq<span class="hl sym">).</span>

<span class="hl slc">% ------------- %</span>

load_sequence_<span class="hl sym">(</span>eof<span class="hl sym">,</span> _<span class="hl sym">,</span> Seq<span class="hl sym">,</span> Seq<span class="hl sym">) :- !.</span>

load_sequence_<span class="hl sym">(</span>S<span class="hl sym">,</span> Loading<span class="hl sym">,</span> Seq<span class="hl sym">,</span> RetSeq<span class="hl sym">) :-</span>
  read_line_to_codes<span class="hl sym">(</span>S<span class="hl sym">,</span> L<span class="hl sym">),</span>
  <span class="hl sym">(</span><span class="hl kwa">at_end_of_stream</span><span class="hl sym">(</span>S<span class="hl sym">) -&gt;</span>
    process_sequence<span class="hl sym">(</span>L<span class="hl sym">,</span> eof<span class="hl sym">,</span> Seq<span class="hl sym">,</span> RetSeq<span class="hl sym">)</span>
  <span class="hl sym">;</span>
    <span class="hl sym">(</span>Loading <span class="hl sym">-&gt;</span>
      process_sequence<span class="hl sym">(</span>L<span class="hl sym">,</span> S<span class="hl sym">,</span> Seq<span class="hl sym">,</span> RetSeq<span class="hl sym">)</span>
    <span class="hl sym">;</span>
      ignore_sequence<span class="hl sym">(</span>L<span class="hl sym">,</span> S<span class="hl sym">,</span> Seq<span class="hl sym">,</span> RetSeq<span class="hl sym">))).</span>

<span class="hl slc">% ------------- %</span>

ignore_sequence<span class="hl sym">([</span><span class="hl num">62</span><span class="hl sym">,</span><span class="hl num">84</span><span class="hl sym">,</span><span class="hl num">72</span><span class="hl sym">,</span><span class="hl num">82</span><span class="hl sym">,</span><span class="hl num">69</span><span class="hl sym">,</span><span class="hl num">69</span><span class="hl sym">|</span>_<span class="hl sym">],</span> S<span class="hl sym">,</span> Seq<span class="hl sym">,</span> RetSeq<span class="hl sym">) :- !,</span>
	load_sequence_<span class="hl sym">(</span>S<span class="hl sym">,</span> <span class="hl kwa">true</span><span class="hl sym">,</span> Seq<span class="hl sym">,</span> RetSeq<span class="hl sym">).</span>
ignore_sequence<span class="hl sym">(</span>_<span class="hl sym">,</span> S<span class="hl sym">,</span> Seq<span class="hl sym">,</span> RetSeq<span class="hl sym">) :- !,</span> load_sequence_<span class="hl sym">(</span>S<span class="hl sym">,</span> <span class="hl kwa">fail</span><span class="hl sym">,</span> Seq<span class="hl sym">,</span> RetSeq<span class="hl sym">).</span>

process_sequence<span class="hl sym">([</span><span class="hl num">62</span><span class="hl sym">|</span>_<span class="hl sym">],</span> _<span class="hl sym">,</span> Seq<span class="hl sym">,</span> Seq<span class="hl sym">) :- !.</span>
process_sequence<span class="hl sym">([</span><span class="hl num">59</span><span class="hl sym">|</span>_<span class="hl sym">],</span> S<span class="hl sym">,</span> Seq<span class="hl sym">,</span> RetSeq<span class="hl sym">) :- !,</span> load_sequence_<span class="hl sym">(</span>S<span class="hl sym">,</span> <span class="hl kwa">true</span><span class="hl sym">,</span> Seq<span class="hl sym">,</span> RetSeq<span class="hl sym">).</span>

process_sequence<span class="hl sym">(</span>L<span class="hl sym">,</span> eof<span class="hl sym">,</span> Seq<span class="hl sym">,</span> RetSeq<span class="hl sym">) :-</span>
  to_upper<span class="hl sym">(</span>L<span class="hl sym">,</span> UL<span class="hl sym">),</span> string_to_list<span class="hl sym">(</span>LS<span class="hl sym">,</span> UL<span class="hl sym">),</span> string_concat<span class="hl sym">(</span>Seq<span class="hl sym">,</span> LS<span class="hl sym">,</span> NewSeq<span class="hl sym">),</span>
  <span class="hl sym">!,</span> load_sequence_<span class="hl sym">(</span>eof<span class="hl sym">,</span> _<span class="hl sym">,</span> NewSeq<span class="hl sym">,</span> RetSeq<span class="hl sym">).</span>

process_sequence<span class="hl sym">(</span>L<span class="hl sym">,</span> S<span class="hl sym">,</span> Seq<span class="hl sym">,</span> RetSeq<span class="hl sym">) :-</span>
  to_upper<span class="hl sym">(</span>L<span class="hl sym">,</span> UL<span class="hl sym">),</span> string_to_list<span class="hl sym">(</span>LS<span class="hl sym">,</span> UL<span class="hl sym">),</span> string_concat<span class="hl sym">(</span>Seq<span class="hl sym">,</span> LS<span class="hl sym">,</span> NewSeq<span class="hl sym">),</span>
  <span class="hl sym">!,</span> load_sequence_<span class="hl sym">(</span>S<span class="hl sym">,</span> <span class="hl kwa">true</span><span class="hl sym">,</span> NewSeq<span class="hl sym">,</span> RetSeq<span class="hl sym">).</span>

<span class="hl slc">% ------------------------------- %</span>

to_upper<span class="hl sym">(</span>L<span class="hl sym">,</span> U<span class="hl sym">) :-</span> to_upper_<span class="hl sym">(</span>L<span class="hl sym">, [],</span> U<span class="hl sym">).</span>

<span class="hl slc">% ------------- %</span>

to_upper_<span class="hl sym">([],</span> UA<span class="hl sym">,</span> U<span class="hl sym">) :-</span> reverse<span class="hl sym">(</span>UA<span class="hl sym">,</span> U<span class="hl sym">), !.</span>

to_upper_<span class="hl sym">([</span>C<span class="hl sym">|</span>T<span class="hl sym">],</span> UA<span class="hl sym">,</span> U<span class="hl sym">) :-</span>
  is_lower<span class="hl sym">(</span>C<span class="hl sym">),</span> C1 <span class="hl kwa">is</span> C <span class="hl sym">-</span> <span class="hl num">32</span><span class="hl sym">,</span>
  <span class="hl sym">!,</span> to_upper_<span class="hl sym">(</span>T<span class="hl sym">, [</span>C1<span class="hl sym">|</span>UA<span class="hl sym">],</span> U<span class="hl sym">).</span>

to_upper_<span class="hl sym">([</span>C<span class="hl sym">|</span>T<span class="hl sym">],</span> UA<span class="hl sym">,</span> U<span class="hl sym">) :-</span>
  <span class="hl sym">!,</span> to_upper_<span class="hl sym">(</span>T<span class="hl sym">, [</span>C<span class="hl sym">|</span>UA<span class="hl sym">],</span> U<span class="hl sym">).</span>

<span class="hl slc">% ------------- %</span>

is_lower<span class="hl sym">(</span>C<span class="hl sym">) :-</span> C <span class="hl sym">&gt;=</span> <span class="hl num">97</span><span class="hl sym">,</span> C <span class="hl sym">=&lt;</span> <span class="hl num">122</span><span class="hl sym">.</span>

<span class="hl slc">% ------------------------------- %</span>

getvar<span class="hl sym">(</span>Id<span class="hl sym">,</span> Value<span class="hl sym">) :-</span> nb_getval<span class="hl sym">(</span>Id<span class="hl sym">,</span> Value<span class="hl sym">).</span>
setvar<span class="hl sym">(</span>Id<span class="hl sym">,</span> Value<span class="hl sym">) :-</span> nb_setval<span class="hl sym">(</span>Id<span class="hl sym">,</span> Value<span class="hl sym">).</span>
linkvar<span class="hl sym">(</span>Id<span class="hl sym">,</span> Value<span class="hl sym">) :-</span> nb_linkval<span class="hl sym">(</span>Id<span class="hl sym">,</span> Value<span class="hl sym">).</span>
dropvar<span class="hl sym">(</span>Id<span class="hl sym">) :-</span> nb_delete<span class="hl sym">(</span>Id<span class="hl sym">).</span>
