<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Jeffrey Beu</span>
<span class="hl com">*/</span>

<span class="hl dir">#include &lt;vector&gt;</span>
<span class="hl dir">#include &lt;cstdlib&gt;</span>
<span class="hl dir">#include &lt;iomanip&gt;</span>
<span class="hl dir">#include &lt;iostream&gt;</span>

<span class="hl kwa">using namespace</span> std<span class="hl sym">;</span>

<span class="hl kwb">unsigned int</span> <span class="hl kwd">nsieve</span><span class="hl sym">(</span><span class="hl kwb">unsigned int</span> m<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwc">typedef</span> vector<span class="hl sym">&lt;</span><span class="hl kwb">unsigned char</span><span class="hl sym">&gt;</span> vc<span class="hl sym">;</span>

   <span class="hl kwb">unsigned int</span> count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

   vc <span class="hl kwd">bflags</span><span class="hl sym">(</span>m<span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">);</span>

   vc<span class="hl sym">::</span>const_iterator end   <span class="hl sym">=</span> bflags<span class="hl sym">.</span><span class="hl kwd">end</span><span class="hl sym">();</span>
   vc<span class="hl sym">::</span>const_iterator begin <span class="hl sym">=</span> bflags<span class="hl sym">.</span><span class="hl kwd">begin</span><span class="hl sym">();</span>

   <span class="hl kwa">for</span><span class="hl sym">(</span>vc<span class="hl sym">::</span>iterator i <span class="hl sym">=</span> bflags<span class="hl sym">.</span><span class="hl kwd">begin</span><span class="hl sym">() +</span> <span class="hl num">2</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> end<span class="hl sym">; ++</span>i<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">if</span><span class="hl sym">(*</span>i<span class="hl sym">) {</span>
         <span class="hl kwb">int</span> off_set <span class="hl sym">= (</span><span class="hl kwb">int</span><span class="hl sym">)(</span>i <span class="hl sym">-</span> begin<span class="hl sym">);</span>

         <span class="hl kwa">for</span><span class="hl sym">(</span>vc<span class="hl sym">::</span>iterator j <span class="hl sym">=</span> i <span class="hl sym">+</span> off_set<span class="hl sym">;</span> j <span class="hl sym">&lt;</span> end<span class="hl sym">;</span> j <span class="hl sym">+=</span> off_set<span class="hl sym">)</span>
         <span class="hl sym">{</span>
            <span class="hl sym">*</span>j <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         <span class="hl sym">}</span>
         <span class="hl sym">++</span>count<span class="hl sym">;</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">return</span> count<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span><span class="hl sym">*</span> argv<span class="hl sym">[])</span>
<span class="hl sym">{</span>
   <span class="hl kwb">unsigned int</span> m <span class="hl sym">=</span> <span class="hl kwd">atoi</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]);</span>

   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">3</span><span class="hl sym">;</span> i<span class="hl sym">++) {</span>
      <span class="hl kwb">unsigned int</span> arg_m <span class="hl sym">=</span> <span class="hl num">10000</span> <span class="hl sym">&lt;&lt; (</span>m<span class="hl sym">-</span>i<span class="hl sym">);</span>
      <span class="hl kwb">unsigned int</span> rslt <span class="hl sym">=</span> <span class="hl kwd">nsieve</span><span class="hl sym">(</span>arg_m<span class="hl sym">);</span>
      cout <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;Primes up to&quot;</span>
           <span class="hl sym">&lt;&lt;</span> <span class="hl kwd">setw</span><span class="hl sym">(</span><span class="hl num">9</span><span class="hl sym">) &lt;&lt;</span> arg_m
           <span class="hl sym">&lt;&lt;</span> <span class="hl kwd">setw</span><span class="hl sym">(</span><span class="hl num">9</span><span class="hl sym">) &lt;&lt;</span> rslt  <span class="hl sym">&lt;&lt;</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

