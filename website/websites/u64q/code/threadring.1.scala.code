<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   Contributed by Vincent Kraeutler</span>
<span class="hl com">   updated for 2.8 by Rex Kerr</span>
<span class="hl com">*/</span>
<span class="hl kwa">import</span> scala<span class="hl sym">.</span>actors<span class="hl sym">.</span>Actor
<span class="hl kwa">import</span> scala<span class="hl sym">.</span>actors<span class="hl sym">.</span>Actor<span class="hl sym">.</span>_

<span class="hl kwa">object</span> threadring <span class="hl sym">{</span>

  <span class="hl kwa">class</span> <span class="hl kwc">Thread</span><span class="hl sym">(</span><span class="hl kwa">val</span> label<span class="hl sym">:</span> Int<span class="hl sym">)</span> <span class="hl kwa">extends</span> Actor <span class="hl sym">{</span>
    <span class="hl kwa">var</span> next<span class="hl sym">:</span> <span class="hl kwc">Thread</span> <span class="hl sym">=</span> null
    <span class="hl kwa">def</span> act<span class="hl sym">() {</span> loop <span class="hl sym">{</span> react <span class="hl sym">{</span>
      <span class="hl kwa">case</span> <span class="hl num">0</span> <span class="hl sym">=&gt;</span> println<span class="hl sym">(</span>label<span class="hl sym">);</span> <span class="hl kwc">System</span><span class="hl sym">.</span>exit<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
      <span class="hl kwa">case</span> n<span class="hl sym">:</span> Int <span class="hl sym">=&gt;</span> next <span class="hl sym">!</span> n <span class="hl sym">-</span> <span class="hl num">1</span>
    <span class="hl sym">}}}</span>
  <span class="hl sym">}</span>

  <span class="hl slc">// create the threads</span>
  <span class="hl kwa">val</span> ring <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>tabulate<span class="hl sym">(</span><span class="hl num">503</span><span class="hl sym">)(</span>i <span class="hl sym">=&gt;</span> <span class="hl kwa">new</span> <span class="hl kwc">Thread</span><span class="hl sym">(</span>i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">))</span>

  <span class="hl slc">// hook them up</span>
  ring<span class="hl sym">.</span>foreach<span class="hl sym">(</span>t <span class="hl sym">=&gt; {</span>
    t<span class="hl sym">.</span>next <span class="hl sym">=</span> ring<span class="hl sym">(</span> t<span class="hl sym">.</span>label <span class="hl sym">%</span> ring<span class="hl sym">.</span>length <span class="hl sym">)</span>
    t<span class="hl sym">.</span>start
  <span class="hl sym">})</span>

  <span class="hl kwa">def</span> main<span class="hl sym">(</span>args <span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">String</span><span class="hl sym">]) {</span>
    <span class="hl kwa">val</span> nHops <span class="hl sym">=</span> args<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">).</span>toInt
    ring<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">) !</span> nHops
  <span class="hl sym">}</span>

<span class="hl sym">}</span>
