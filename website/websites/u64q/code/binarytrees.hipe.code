<source>
<def></def><slc>% The Computer Language Shootout</slc><br />
<def></def><slc>% http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>%</slc><br />
<def></def><slc>% contributed by Isaac Gouy (Erlang novice)</slc><br />
<def></def><br />
<sym>-</sym><def></def><kwa>module</kwa><def></def><sym>(</sym><def>binarytrees</def><sym>).</sym><br />
<def></def><sym>-</sym><def></def><kwa>export</kwa><def></def><sym>([</sym><def>main</def><sym>/</sym><def></def><num>1</num><def></def><sym>]).</sym><br />
<def></def><br />
<sym>-</sym><def></def><kwa>define</kwa><def></def><sym>(</sym><def>Min</def><sym>,</sym><def></def><num>4</num><def></def><sym>).</sym><br />
<def></def><br />
<kwd>main</kwd><def></def><sym>([</sym><def>Arg</def><sym>]) -&gt;</sym><br />
<def>   N</def> <sym>=</sym> <def></def><kwb>list_to_integer</kwb><def></def><sym>(</sym><def>Arg</def><sym>),</sym><br />
<def>   Max</def> <sym>=</sym> <def>lists</def><sym>:</sym><def></def><kwd>max</kwd><def></def><sym>([?</sym><def>Min</def><sym>+</sym><def></def><num>2</num><def></def><sym>,</sym><def>N</def><sym>]),</sym><br />
<def><br />
   Stretch</def> <sym>=</sym> <def>Max</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>,</sym><br />
<def>   io</def><sym>:</sym><def></def><kwd>fwrite</kwd><def></def><sym>(</sym><def></def><str>&quot;stretch tree of depth ~w</str><esc>\</esc><str>t check: ~w~n&quot;</str><def></def><sym>,</sym><br />
<def></def>      <sym>[</sym> <def>Stretch</def><sym>,</sym> <def></def><kwd>itemCheck</kwd><def></def><sym>(</sym><def></def><kwd>bottomUp</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym><def>Stretch</def><sym>)) ]),</sym><br />
<def><br />
   LongLivedTree</def> <sym>=</sym> <def></def><kwd>bottomUp</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym><def>Max</def><sym>),</sym><br />
<def></def>   <kwd>depthLoop</kwd><def></def><sym>(?</sym><def>Min</def><sym>,</sym><def>Max</def><sym>),</sym><br />
<def><br />
   io</def><sym>:</sym><def></def><kwd>fwrite</kwd><def></def><sym>(</sym><def></def><str>&quot;long lived tree of depth ~w</str><esc>\</esc><str>t check: ~w~n&quot;</str><def></def><sym>,</sym><br />
<def></def>      <sym>[</sym> <def>Max</def><sym>,</sym> <def></def><kwd>itemCheck</kwd><def></def><sym>(</sym><def>LongLivedTree</def><sym>) ]),</sym><br />
<def></def><br />
   <kwb>halt</kwb><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>).</sym><br />
<def></def><br />
<br />
<kwd>depthLoop</kwd><def></def><sym>(</sym><def>D</def><sym>,</sym><def>M</def><sym>)</sym> <def></def><kwa>when</kwa> <def>D</def> <sym>&gt;</sym> <def>M</def> <sym>-&gt;</sym> <def>ok</def><sym>;</sym><br />
<def></def><kwd>depthLoop</kwd><def></def><sym>(</sym><def>D</def><sym>,</sym><def>M</def><sym>) -&gt;</sym><br />
<def>   N</def> <sym>=</sym> <def></def><num>1</num> <def></def><kwa>bsl</kwa> <def></def><sym>(</sym><def>M</def><sym>-</sym><def>D</def> <sym>+ ?</sym><def>Min</def><sym>),</sym><br />
<def>   io</def><sym>:</sym><def></def><kwd>fwrite</kwd><def></def><sym>(</sym><def></def><str>&quot;~w</str><esc>\</esc><str>t trees of depth ~w</str><esc>\</esc><str>t check: ~w~n&quot;</str><def></def><sym>,</sym><br />
<def></def>      <sym>[</sym> <def></def><num>2</num><def></def><sym>*</sym><def>N</def><sym>,</sym> <def>D</def><sym>,</sym> <def></def><kwd>sumLoop</kwd><def></def><sym>(</sym><def>N</def><sym>,</sym><def>D</def><sym>,</sym><def></def><num>0</num><def></def><sym>) ]),</sym><br />
<def></def>   <kwd>depthLoop</kwd> <def></def><sym>(</sym><def>D</def><sym>+</sym><def></def><num>2</num><def></def><sym>,</sym><def>M</def><sym>).</sym><br />
<def></def><br />
<kwd>sumLoop</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym><def>_</def><sym>,</sym><def>Sum</def><sym>) -&gt;</sym> <def>Sum</def><sym>;</sym><br />
<def></def><kwd>sumLoop</kwd><def></def><sym>(</sym><def>N</def><sym>,</sym><def>D</def><sym>,</sym><def>Sum</def><sym>) -&gt;</sym><br />
<def></def>   <kwd>sumLoop</kwd><def></def><sym>(</sym><def>N</def><sym>-</sym><def></def><num>1</num><def></def><sym>,</sym><def>D</def><sym>,</sym> <def>Sum</def> <sym>+</sym> <def></def><kwd>itemCheck</kwd><def></def><sym>(</sym><def></def><kwd>bottomUp</kwd><def></def><sym>(</sym><def>N</def><sym>,</sym><def>D</def><sym>)) +</sym> <def></def><kwd>itemCheck</kwd><def></def><sym>(</sym><def></def><kwd>bottomUp</kwd><def></def><sym>(-</sym><def></def><num>1</num><def></def><sym>*</sym><def>N</def><sym>,</sym><def>D</def><sym>))).</sym><br />
<def></def><br />
<kwd>bottomUp</kwd><def></def><sym>(</sym><def>I</def><sym>,</sym><def></def><num>0</num><def></def><sym>) -&gt; {</sym><def>I</def><sym>,</sym> <def>nil</def><sym>,</sym> <def>nil</def><sym>};</sym><br />
<def></def><kwd>bottomUp</kwd><def></def><sym>(</sym><def>I</def><sym>,</sym><def>D</def><sym>) -&gt; {</sym><def>I</def><sym>,</sym> <def></def><kwd>bottomUp</kwd><def></def><sym>(</sym><def></def><num>2</num><def></def><sym>*</sym><def>I</def><sym>-</sym><def></def><num>1</num><def></def><sym>,</sym><def>D</def><sym>-</sym><def></def><num>1</num><def></def><sym>),</sym> <def></def><kwd>bottomUp</kwd><def></def><sym>(</sym><def></def><num>2</num><def></def><sym>*</sym><def>I</def><sym>,</sym><def>D</def><sym>-</sym><def></def><num>1</num><def></def><sym>)}.</sym><br />
<def></def><br />
<kwd>itemCheck</kwd><def></def><sym>(</sym><def>nil</def><sym>) -&gt;</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def><kwd>itemCheck</kwd><def></def><sym>({</sym><def>I</def><sym>,</sym><def>Left</def><sym>,</sym><def>Right</def><sym>}) -&gt;</sym><br />
<def>   I</def> <sym>+</sym> <def></def><kwd>itemCheck</kwd><def></def><sym>(</sym><def>Left</def><sym>) -</sym> <def></def><kwd>itemCheck</kwd><def></def><sym>(</sym><def>Right</def><sym>).</sym><def></def><br />
</source>
