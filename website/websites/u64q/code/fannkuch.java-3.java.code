<source>
<def></def><com>/* The Computer Language Benchmarks Game</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com></com><br />
<com>   contributed by Klaus Friedel</com><br />
<com></com><br />
<com>   will only shine on a 64Bit JVM</com><br />
<com>*/</com><def></def><br />
<br />
<kwa>public class</kwa> <def>fannkuch</def> <sym>{</sym><br />
<def></def>  <kwa>final static class</kwa> <def>Permutation</def><sym>{</sym><br />
<def></def>    <kwa>private</kwa> <def></def><kwb>long</kwb> <def>p</def><sym>;</sym><br />
<def></def>    <kwa>private</kwa> <def></def><kwb>int</kwb> <def>n</def><sym>;</sym><br />
<def></def><br />
    <kwd>Permutation</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>n</def><sym>) {</sym><br />
<def></def>      <kwa>this</kwa><def></def><sym>.</sym><def>n</def> <sym>=</sym> <def>n</def><sym>;</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <kwb>void</kwb> <def></def><kwd>copyTo</kwd><def></def><sym>(</sym><def>Permutation p2</def><sym>){</sym><br />
<def>      p2</def><sym>.</sym><def>n</def> <sym>=</sym> <def>n</def><sym>;</sym><br />
<def>      p2</def><sym>.</sym><def>p</def> <sym>=</sym> <def>p</def><sym>;</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <kwb>void</kwb> <def></def><kwd>init</kwd><def></def><sym>(){</sym><br />
<def></def>      <kwa>for</kwa><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>n</def><sym>;</sym> <def>i</def><sym>++)</sym> <def></def><kwd>set</kwd><def></def><sym>(</sym><def>i</def><sym>,</sym> <def>i</def><sym>);</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <kwb>void</kwb> <def></def><kwd>set</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>idx</def><sym>,</sym> <def></def><kwb>int</kwb> <def>value</def><sym>){</sym><br />
<def></def>      <kwb>int</kwb> <def>shift</def> <sym>=</sym> <def>idx</def> <sym>*</sym> <def></def><num>4</num><def></def><sym>;</sym><br />
<def>      p</def> <sym>&amp;=</sym> <def>~</def><sym>(</sym><def></def><num>0xF</num><def>L</def> <sym>&lt;&lt;</sym> <def>shift</def><sym>);</sym><br />
<def>      p</def> <sym>|= ((</sym><def></def><kwb>long</kwb><def></def><sym>)</sym><def>value</def><sym>) &lt;&lt;</sym> <def>shift</def><sym>;</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <kwb>int</kwb> <def></def><kwd>get</kwd><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>idx</def><sym>){</sym><br />
<def></def>      <kwb>int</kwb> <def>shift</def> <sym>=</sym> <def>idx</def> <sym>*</sym> <def></def><num>4</num><def></def><sym>;</sym><br />
<def></def>      <kwa>return</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb><def></def><sym>)(</sym><def>p</def> <sym>&gt;&gt;</sym> <def>shift</def><sym>) &amp;</sym> <def></def><num>0xF</num><def></def><sym>;</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <kwb>int</kwb> <def></def><kwd>first</kwd><def></def><sym>(){</sym><br />
<def></def>      <kwa>return</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb><def></def><sym>)</sym><def>p</def> <sym>&amp;</sym> <def></def><num>0xF</num><def></def><sym>;</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <slc>// rotate digit 0...r by one</slc><br />
<def></def>    <kwb>void</kwb> <def></def><kwd>rotate</kwd><def></def><sym>(</sym><def></def><kwa>final</kwa> <def></def><kwb>int</kwb> <def>r</def><sym>){</sym><br />
<def></def>      <kwa>final</kwa> <def></def><kwb>long</kwb> <def>mask</def> <sym>= (</sym><def></def><num>16L</num> <def></def><sym>&lt;&lt;</sym> <def></def><num>4</num><def></def><sym>*</sym><def>r</def><sym>) -</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def>      <kwb>long</kwb> <def>x</def> <sym>= (</sym><def>p</def> <sym>&amp;</sym> <def>mask</def><sym>) &gt;&gt;&gt;</sym> <def></def><num>4</num><def></def><sym>;</sym><br />
<def>      x</def> <sym>|= (</sym><def>p</def> <sym>&amp;</sym> <def></def><num>0xF</num><def>L</def><sym>) &lt;&lt; (</sym><def></def><num>4</num><def></def><sym>*</sym><def>r</def><sym>);</sym><br />
<def>      p</def> <sym>= (</sym><def>p</def> <sym>&amp;</sym> <def>~mask</def><sym>) |</sym> <def>x</def><sym>;</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <kwb>void</kwb> <def></def><kwd>reverse</kwd><def></def><sym>(</sym><def></def><kwa>final</kwa> <def></def><kwb>int</kwb> <def>count</def><sym>){</sym><br />
<def></def>      <slc>// do a complete reversal first</slc><br />
<def></def>      <kwb>long</kwb> <def>r</def> <sym>=</sym> <def>p</def><sym>;</sym><br />
<def>      r</def> <sym>= (</sym><def>r</def> <sym>&amp;</sym> <def></def><num>0x0F0F0F0F0F0F0F0F</num><def>L</def><sym>) &lt;&lt;</sym> <def></def><num>4</num>  <def></def><sym>| (</sym><def>r</def> <sym>&amp;</sym> <def></def><num>0xF0F0F0F0F0F0F0F0</num><def>L</def><sym>) &gt;&gt;&gt;</sym> <def></def><num>4</num><def></def><sym>;</sym><br />
<def>      r</def> <sym>= (</sym><def>r</def> <sym>&amp;</sym> <def></def><num>0x00FF00FF00FF00FF</num><def>L</def><sym>) &lt;&lt;</sym> <def></def><num>8</num>  <def></def><sym>| (</sym><def>r</def> <sym>&amp;</sym> <def></def><num>0xFF00FF00FF00FF00</num><def>L</def><sym>) &gt;&gt;&gt;</sym> <def></def><num>8</num><def></def><sym>;</sym><br />
<def>      r</def> <sym>= (</sym><def>r</def> <sym>&amp;</sym> <def></def><num>0x0000FFFF0000FFFF</num><def>L</def><sym>) &lt;&lt;</sym> <def></def><num>16</num> <def></def><sym>| (</sym><def>r</def> <sym>&amp;</sym> <def></def><num>0xFFFF0000FFFF0000</num><def>L</def><sym>) &gt;&gt;&gt;</sym> <def></def><num>16</num><def></def><sym>;</sym><br />
<def>      r</def> <sym>= (</sym><def>r</def> <sym>&amp;</sym> <def></def><num>0x00000000FFFFFFFF</num><def>L</def><sym>) &lt;&lt;</sym> <def></def><num>32</num> <def></def><sym>| (</sym><def>r</def> <sym>&amp;</sym> <def></def><num>0xFFFFFFFF00000000</num><def>L</def><sym>) &gt;&gt;&gt;</sym> <def></def><num>32</num><def></def><sym>;</sym><br />
<def></def>      <slc>// select the relevant part:</slc><br />
<def></def>      <kwa>final</kwa> <def></def><kwb>int</kwb> <def>shift</def> <sym>=</sym> <def></def><num>4</num><def></def><sym>*(</sym><def></def><num>16</num> <def></def><sym>-</sym> <def>count</def><sym>);</sym><br />
<def>      r</def> <sym>&gt;&gt;=</sym> <def>shift</def><sym>;</sym><br />
<def></def>      <slc>// replace count of them:</slc><br />
<def></def>      <kwa>final</kwa> <def></def><kwb>long</kwb> <def>mask</def> <sym>= (</sym><def></def><num>1L</num> <def></def><sym>&lt;&lt;</sym> <def></def><num>4</num><def></def><sym>*</sym><def>count</def><sym>) -</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def>      p</def> <sym>= (</sym><def>p</def> <sym>&amp;</sym> <def>~mask</def><sym>) | (</sym><def>r</def> <sym>&amp;</sym> <def>mask</def><sym>);</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <kwb>int</kwb> <def></def><kwd>flipUntilDone</kwd><def></def><sym>(){</sym><br />
<def></def>      <kwa>for</kwa><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>flips</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;;</sym><def>flips</def><sym>++){</sym><br />
<def></def>        <kwa>final</kwa> <def></def><kwb>int</kwb> <def>f</def> <sym>=</sym> <def></def><kwd>first</kwd><def></def><sym>();</sym><br />
<def></def>        <kwa>if</kwa><def></def><sym>(</sym><def>f</def> <sym>==</sym> <def></def><num>0</num><def></def><sym>)</sym> <def></def><kwa>return</kwa> <def>flips</def><sym>;</sym><br />
<def></def>        <kwd>reverse</kwd><def></def><sym>(</sym><def>f</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>    <sym>}</sym><br />
<def></def><br />
    <kwa>public</kwa> <def></def><kwc>String</kwc> <def></def><kwd>toString</kwd><def></def><sym>() {</sym><br />
<def></def>      <kwc>StringBuilder</kwc> <def>s</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwc>StringBuilder</kwc><def></def><sym>();</sym><br />
<def></def>      <kwa>for</kwa><def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>n</def><sym>;</sym> <def>i</def><sym>++){</sym><br />
<def>        s</def><sym>.</sym><def></def><kwd>append</kwd><def></def><sym>(</sym><def></def><kwd>get</kwd><def></def><sym>(</sym><def>i</def><sym>) +</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>      <kwa>return</kwa> <def>s</def><sym>.</sym><def></def><kwd>toString</kwd><def></def><sym>();</sym><br />
<def></def>    <sym>}</sym><br />
<def></def>  <sym>}</sym><br />
<def></def><br />
  <kwa>static</kwa> <def></def><kwb>long</kwb> <def></def><kwd>fannkuch</kwd><def></def><sym>(</sym><def></def><kwa>final</kwa> <def></def><kwb>int</kwb> <def>n</def><sym>) {</sym><br />
<def>    Permutation perm</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>Permutation</kwd><def></def><sym>(</sym><def>n</def><sym>);</sym><br />
<def>    Permutation perm1</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>Permutation</kwd><def></def><sym>(</sym><def>n</def><sym>);</sym><br />
<def></def>    <kwb>int</kwb><def></def><sym>[]</sym> <def>count</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwb>int</kwb><def></def><sym>[</sym><def>n</def><sym>];</sym><br />
<def></def>    <kwa>final</kwa> <def></def><kwb>int</kwb> <def>n1</def> <sym>=</sym> <def>n</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>;</sym><br />
<def></def><br />
    <kwa>if</kwa> <def></def><sym>(</sym><def>n</def> <sym>&lt;</sym> <def></def><num>1</num><def></def><sym>)</sym> <def></def><kwa>return</kwa> <def></def><num>0</num><def></def><sym>;</sym><br />
<def>    perm1</def><sym>.</sym><def></def><kwd>init</kwd><def></def><sym>();</sym><br />
<def></def><br />
    <kwb>int</kwb> <def>r</def> <sym>=</sym> <def>n</def><sym>;</sym><br />
<def></def>    <kwb>int</kwb> <def>didpr</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>    <kwb>int</kwb> <def>flipsMax</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>    <kwa>for</kwa> <def></def><sym>(; ;) {</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>didpr</def> <sym>&lt;</sym> <def></def><num>30</num><def></def><sym>) {</sym><br />
<def></def>        <kwc>System</kwc><def></def><sym>.</sym><def>out</def><sym>.</sym><def></def><kwd>println</kwd><def></def><sym>(</sym><def>perm1</def><sym>.</sym><def></def><kwd>toString</kwd><def></def><sym>());</sym><br />
<def>        didpr</def><sym>++;</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><br />
      <kwa>for</kwa> <def></def><sym>(;</sym> <def>r</def> <sym>!=</sym> <def></def><num>1</num><def></def><sym>; --</sym><def>r</def><sym>)</sym> <def>count</def><sym>[</sym><def>r</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>] =</sym> <def>r</def><sym>;</sym><br />
<def></def><br />
      <kwa>if</kwa> <def></def><sym>(!(</sym><def>perm1</def><sym>.</sym><def></def><kwd>first</kwd><def></def><sym>() ==</sym> <def></def><num>0</num> <def></def><sym>||</sym> <def>perm1</def><sym>.</sym><def></def><kwd>get</kwd><def></def><sym>(</sym><def>n1</def><sym>) ==</sym> <def>n1</def><sym>)) {</sym><br />
<def>        perm1</def><sym>.</sym><def></def><kwd>copyTo</kwd><def></def><sym>(</sym><def>perm</def><sym>);</sym><br />
<def></def>        <kwb>int</kwb> <def>flips</def> <sym>=</sym> <def>perm</def><sym>.</sym><def></def><kwd>flipUntilDone</kwd><def></def><sym>();</sym><br />
<def></def>        <kwa>if</kwa> <def></def><sym>(</sym><def>flipsMax</def> <sym>&lt;</sym> <def>flips</def><sym>) {</sym><br />
<def>          flipsMax</def> <sym>=</sym> <def>flips</def><sym>;</sym><br />
<def></def>        <sym>}</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><br />
      <kwa>for</kwa> <def></def><sym>(; ;</sym><def>r</def><sym>++) {</sym><br />
<def></def>        <kwa>if</kwa> <def></def><sym>(</sym><def>r</def> <sym>==</sym> <def>n</def><sym>)</sym> <def></def><kwa>return</kwa> <def>flipsMax</def><sym>;</sym><br />
<def></def>        <com>/* rotate down perm1[0..r] by one */</com><def><br />
        perm1</def><sym>.</sym><def></def><kwd>rotate</kwd><def></def><sym>(</sym><def>r</def><sym>);</sym><br />
<def>        count</def><sym>[</sym><def>r</def><sym>]--;</sym><br />
<def></def>        <kwa>if</kwa> <def></def><sym>(</sym><def>count</def><sym>[</sym><def>r</def><sym>] &gt;</sym> <def></def><num>0</num><def></def><sym>)</sym> <def></def><kwa>break</kwa><def></def><sym>;</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>    <sym>}</sym><br />
<def></def>  <sym>}</sym><br />
<def></def><br />
<br />
  <kwa>public static</kwa> <def></def><kwb>void</kwb> <def></def><kwd>main</kwd><def></def><sym>(</sym><def></def><kwc>String</kwc><def></def><sym>[]</sym> <def>args</def><sym>) {</sym><br />
<def></def>    <kwb>int</kwb> <def>n</def> <sym>=</sym> <def></def><num>11</num><def></def><sym>;</sym><br />
<def></def>    <kwa>if</kwa><def></def><sym>(</sym><def>args</def><sym>.</sym><def>length</def> <sym>==</sym> <def></def><num>1</num><def></def><sym>)</sym> <def>n</def> <sym>=</sym> <def></def><kwc>Integer</kwc><def></def><sym>.</sym><def></def><kwd>parseInt</kwd><def></def><sym>(</sym><def>args</def><sym>[</sym><def></def><num>0</num><def></def><sym>]);</sym><br />
<def></def>    <kwc>System</kwc><def></def><sym>.</sym><def>out</def><sym>.</sym><def></def><kwd>printf</kwd><def></def><sym>(</sym><def></def><str>&quot;Pfannkuchen(%d) = %d</str><esc>\n</esc><str>&quot;</str><def></def><sym>,</sym> <def>n</def><sym>,</sym> <def></def><kwd>fannkuch</kwd><def></def><sym>(</sym><def>n</def><sym>));</sym><br />
<def></def>  <sym>}</sym><br />
<def></def><sym>}</sym><def></def><br />
</source>
