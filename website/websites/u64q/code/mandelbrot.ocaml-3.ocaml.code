<source>
<def></def><com>(*</com><br />
<com> * The Computer Language Benchmarks Game</com><br />
<com> * http://shootout.alioth.debian.org/</com><br />
<com> *</com><br />
<com> * Contributed by Christophe TROESTLER</com><br />
<com> * Enhanced by Christian Szegedy, Yaron Minsky</com><br />
<com> *</com><br />
<com> *)</com><def></def><br />
<br />
<kwa>let</kwa> <def>niter</def> <sym>=</sym> <def></def><num>50</num><br />
<def></def><kwa>let</kwa> <def>limit</def> <sym>=</sym> <def></def><num>2</num><def></def><sym>.</sym><br />
<def></def><br />
<kwa>let</kwa> <def>limit2</def> <sym>=</sym> <def>limit</def> <sym>*.</sym> <def>limit</def><br />
<br />
<kwa>type</kwa> <def>complex</def> <sym>= {</sym> <def></def><kwa>mutable</kwa> <def>r</def><sym>:</sym> <def></def><kwb>float</kwb><def></def><sym>;</sym> <def></def><kwa>mutable</kwa> <def>i</def><sym>:</sym> <def></def><kwb>float</kwb> <def></def><sym>}</sym><br />
<def></def><br />
<kwa>let</kwa> <def></def><sym>() =</sym><br />
<def></def>  <kwa>let</kwa> <def>w</def> <sym>=</sym> <def>int_of_string</def><sym>(</sym><def></def><kwc>Array</kwc><def></def><sym>.</sym><def>get</def> <kwc>Sys</kwc><def></def><sym>.</sym><def>argv</def> <num>1</num><def></def><sym>)</sym> <def></def><kwa>in</kwa><br />
<def></def>  <kwa>let</kwa> <def>h</def> <sym>=</sym> <def>w</def> <kwa>in</kwa><br />
<def></def>  <kwa>let</kwa> <def>fw</def> <sym>=</sym> <def></def><kwb>float</kwb> <def>w</def><br />
  <kwa>and</kwa> <def>fh</def> <sym>=</sym> <def></def><kwb>float</kwb> <def>h</def> <kwa>in</kwa><br />
<def></def>  <kwc>Printf</kwc><def></def><sym>.</sym><def>printf</def> <str>&quot;P4</str><esc>\n</esc><str>%i %i</str><esc>\n</esc><str>&quot;</str><def> w h</def><sym>;</sym><br />
<def></def>  <kwa>let</kwa> <def>c</def> <sym>= {</sym> <def>r</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>.;</sym> <def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>.}</sym> <def></def><kwa>and</kwa> <def>z</def> <sym>= {</sym><def>r</def><sym>=</sym><def></def><num>0</num><def></def><sym>.;</sym> <def>i</def><sym>=</sym><def></def><num>0</num><def></def><sym>.;}</sym> <def></def><kwa>in</kwa><br />
<def></def>  <kwa>let</kwa> <def>byte</def> <sym>=</sym> <def></def><kwb>ref</kwb> <def></def><num>0</num> <def></def><kwa>in</kwa><br />
<def></def>  <kwa>for</kwa> <def>y</def> <sym>=</sym> <def></def><num>0</num> <def></def><kwa>to</kwa> <def>h</def> <sym>-</sym> <def></def><num>1</num> <def></def><kwa>do</kwa><br />
<def>    c</def><sym>.</sym><def>i</def> <sym>&lt;-</sym> <def></def><num>2</num><def></def><sym>. *.</sym> <def></def><kwb>float</kwb> <def>y</def> <sym>/.</sym> <def>fh</def> <sym>-.</sym> <def></def><num>1</num><def></def><sym>.;</sym><br />
<def></def>    <kwa>for</kwa> <def>x</def> <sym>=</sym> <def></def><num>0</num> <def></def><kwa>to</kwa> <def>w</def> <sym>-</sym> <def></def><num>1</num> <def></def><kwa>do</kwa><br />
<def>      c</def><sym>.</sym><def>r</def> <sym>&lt;-</sym> <def></def><num>2</num><def></def><sym>. *.</sym> <def></def><kwb>float</kwb> <def>x</def> <sym>/.</sym> <def>fw</def> <sym>-.</sym> <def></def><num>1.5</num><def></def><sym>;</sym><br />
<def>      z</def><sym>.</sym><def>r</def> <sym>&lt;-</sym> <def></def><num>0</num><def></def><sym>.;</sym> <def>z</def><sym>.</sym><def>i</def> <sym>&lt;-</sym> <def></def><num>0</num><def></def><sym>.;</sym><br />
<def></def>      <kwa>begin</kwa><br />
<def></def>	<kwa>try</kwa><br />
<def></def>	  <kwa>for</kwa> <def>i</def> <sym>=</sym> <def></def><num>1</num> <def></def><kwa>to</kwa> <def>niter</def> <kwa>do</kwa><br />
<def></def>	    <kwa>let</kwa> <def>zi</def> <sym>=</sym> <def></def><num>2</num><def></def><sym>. *.</sym> <def>z</def><sym>.</sym><def>r</def> <sym>*.</sym> <def>z</def><sym>.</sym><def>i</def> <sym>+.</sym> <def>c</def><sym>.</sym><def>i</def> <kwa>in</kwa><br />
<def>	    z</def><sym>.</sym><def>r</def> <sym>&lt;-</sym> <def>z</def><sym>.</sym><def>r</def> <sym>*.</sym> <def>z</def><sym>.</sym><def>r</def> <sym>-.</sym> <def>z</def><sym>.</sym><def>i</def> <sym>*.</sym> <def>z</def><sym>.</sym><def>i</def> <sym>+.</sym> <def>c</def><sym>.</sym><def>r</def><sym>;</sym><br />
<def>	    z</def><sym>.</sym><def>i</def> <sym>&lt;-</sym> <def>zi</def><sym>;</sym><br />
<def></def>	    <kwa>if</kwa> <def>z</def><sym>.</sym><def>r</def> <sym>*.</sym> <def>z</def><sym>.</sym><def>r</def> <sym>+.</sym> <def>zi</def> <sym>*.</sym> <def>zi</def> <sym>&gt;</sym> <def>limit2</def> <kwa>then</kwa> <def>raise</def> <kwd>Exit</kwd><def></def><sym>;</sym><br />
<def></def>	  <kwa>done</kwa><def></def><sym>;</sym> <def>byte</def> <sym>:= (!</sym><def>byte</def> <kwa>lsl</kwa> <def></def><num>1</num><def></def><sym>)</sym> <def></def><kwa>lor</kwa> <def></def><num>0x01</num><br />
<def></def>	<kwa>with</kwa> <def></def><kwd>Exit</kwd> <def></def><sym>-&gt;</sym> <def>byte</def> <sym>:= !</sym><def>byte</def> <kwa>lsl</kwa> <def></def><num>1</num> <def></def><com>(* lor 0x00 *)</com><def></def><sym>;</sym><br />
<def></def>      <kwa>end</kwa><def></def><sym>;</sym><br />
<def></def>      <kwa>if</kwa> <def>x</def> <kwa>mod</kwa> <def></def><num>8</num> <def></def><sym>=</sym> <def></def><num>7</num> <def></def><kwa>then</kwa> <def>output_byte stdout</def> <sym>!</sym><def>byte</def><sym>;</sym><br />
<def></def>    <kwa>done</kwa><def></def><sym>;</sym><br />
<def></def>    <kwa>if</kwa> <def>w</def> <kwa>mod</kwa> <def></def><num>8</num> <def></def><sym>!=</sym> <def></def><num>0</num> <def></def><kwa>then</kwa> <def></def><com>(* the row doesnt divide evenly by 8*)</com><def><br />
      output_byte stdout</def> <sym>(!</sym><def>byte</def> <kwa>lsl</kwa> <def></def><sym>(</sym><def></def><num>8</num><def></def><sym>-</sym><def>w</def> <kwa>mod</kwa> <def></def><num>8</num><def></def><sym>));</sym> <def></def><com>(* output last few bits *)</com><def><br />
    byte</def> <sym>:=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>  <kwa>done</kwa><def></def><br />
</source>
