<span class="hl com">(*</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Contributed by Christophe TROESTLER</span>
<span class="hl com"> * Enhanced by Christian Szegedy, Yaron Minsky</span>
<span class="hl com"> *</span>
<span class="hl com"> *)</span>

<span class="hl kwa">let</span> niter <span class="hl sym">=</span> <span class="hl num">50</span>
<span class="hl kwa">let</span> limit <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">.</span>

<span class="hl kwa">let</span> limit2 <span class="hl sym">=</span> limit <span class="hl sym">*.</span> limit

<span class="hl kwa">type</span> complex <span class="hl sym">= {</span> <span class="hl kwa">mutable</span> r<span class="hl sym">:</span> <span class="hl kwb">float</span><span class="hl sym">;</span> <span class="hl kwa">mutable</span> i<span class="hl sym">:</span> <span class="hl kwb">float</span> <span class="hl sym">}</span>

<span class="hl kwa">let</span> <span class="hl sym">() =</span>
  <span class="hl kwa">let</span> w <span class="hl sym">=</span> int_of_string<span class="hl sym">(</span><span class="hl kwc">Array</span><span class="hl sym">.</span>get <span class="hl kwc">Sys</span><span class="hl sym">.</span>argv <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> h <span class="hl sym">=</span> w <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> fw <span class="hl sym">=</span> <span class="hl kwb">float</span> w
  <span class="hl kwa">and</span> fh <span class="hl sym">=</span> <span class="hl kwb">float</span> h <span class="hl kwa">in</span>
  <span class="hl kwc">Printf</span><span class="hl sym">.</span>printf <span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">%i %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> w h<span class="hl sym">;</span>
  <span class="hl kwa">let</span> c <span class="hl sym">= {</span> r <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">.;</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">.}</span> <span class="hl kwa">and</span> z <span class="hl sym">= {</span>r<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">.;</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">.;}</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> byte <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">in</span>
  <span class="hl kwa">for</span> y <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> h <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl kwa">do</span>
    c<span class="hl sym">.</span>i <span class="hl sym">&lt;-</span> <span class="hl num">2</span><span class="hl sym">. *.</span> <span class="hl kwb">float</span> y <span class="hl sym">/.</span> fh <span class="hl sym">-.</span> <span class="hl num">1</span><span class="hl sym">.;</span>
    <span class="hl kwa">for</span> x <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> w <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl kwa">do</span>
      c<span class="hl sym">.</span>r <span class="hl sym">&lt;-</span> <span class="hl num">2</span><span class="hl sym">. *.</span> <span class="hl kwb">float</span> x <span class="hl sym">/.</span> fw <span class="hl sym">-.</span> <span class="hl num">1.5</span><span class="hl sym">;</span>
      z<span class="hl sym">.</span>r <span class="hl sym">&lt;-</span> <span class="hl num">0</span><span class="hl sym">.;</span> z<span class="hl sym">.</span>i <span class="hl sym">&lt;-</span> <span class="hl num">0</span><span class="hl sym">.;</span>
      <span class="hl kwa">begin</span>
	<span class="hl kwa">try</span>
	  <span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl kwa">to</span> niter <span class="hl kwa">do</span>
	    <span class="hl kwa">let</span> zi <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">. *.</span> z<span class="hl sym">.</span>r <span class="hl sym">*.</span> z<span class="hl sym">.</span>i <span class="hl sym">+.</span> c<span class="hl sym">.</span>i <span class="hl kwa">in</span>
	    z<span class="hl sym">.</span>r <span class="hl sym">&lt;-</span> z<span class="hl sym">.</span>r <span class="hl sym">*.</span> z<span class="hl sym">.</span>r <span class="hl sym">-.</span> z<span class="hl sym">.</span>i <span class="hl sym">*.</span> z<span class="hl sym">.</span>i <span class="hl sym">+.</span> c<span class="hl sym">.</span>r<span class="hl sym">;</span>
	    z<span class="hl sym">.</span>i <span class="hl sym">&lt;-</span> zi<span class="hl sym">;</span>
	    <span class="hl kwa">if</span> z<span class="hl sym">.</span>r <span class="hl sym">*.</span> z<span class="hl sym">.</span>r <span class="hl sym">+.</span> zi <span class="hl sym">*.</span> zi <span class="hl sym">&gt;</span> limit2 <span class="hl kwa">then</span> raise <span class="hl kwd">Exit</span><span class="hl sym">;</span>
	  <span class="hl kwa">done</span><span class="hl sym">;</span> byte <span class="hl sym">:= (!</span>byte <span class="hl kwa">lsl</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">lor</span> <span class="hl num">0x01</span>
	<span class="hl kwa">with</span> <span class="hl kwd">Exit</span> <span class="hl sym">-&gt;</span> byte <span class="hl sym">:= !</span>byte <span class="hl kwa">lsl</span> <span class="hl num">1</span> <span class="hl com">(* lor 0x00 *)</span><span class="hl sym">;</span>
      <span class="hl kwa">end</span><span class="hl sym">;</span>
      <span class="hl kwa">if</span> x <span class="hl kwa">mod</span> <span class="hl num">8</span> <span class="hl sym">=</span> <span class="hl num">7</span> <span class="hl kwa">then</span> output_byte stdout <span class="hl sym">!</span>byte<span class="hl sym">;</span>
    <span class="hl kwa">done</span><span class="hl sym">;</span>
    <span class="hl kwa">if</span> w <span class="hl kwa">mod</span> <span class="hl num">8</span> <span class="hl sym">!=</span> <span class="hl num">0</span> <span class="hl kwa">then</span> <span class="hl com">(* the row doesnt divide evenly by 8*)</span>
      output_byte stdout <span class="hl sym">(!</span>byte <span class="hl kwa">lsl</span> <span class="hl sym">(</span><span class="hl num">8</span><span class="hl sym">-</span>w <span class="hl kwa">mod</span> <span class="hl num">8</span><span class="hl sym">));</span> <span class="hl com">(* output last few bits *)</span>
    byte <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
  <span class="hl kwa">done</span>
