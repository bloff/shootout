<span class="hl com">(* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Contributed by Troestler Christophe</span>
<span class="hl com"> * Modified by Fabrice Le Fessant for</span>
<span class="hl com"> *  - tree type more compact</span>
<span class="hl com"> *  - better GC parameters</span>
<span class="hl com"> *  - loops replaced by recursive functions</span>
<span class="hl com"> *)</span>

<span class="hl kwa">type</span> <span class="hl kwb">'a</span> tree <span class="hl sym">=</span> <span class="hl kwd">Leaf</span> <span class="hl kwa">of</span> <span class="hl kwb">'a</span> <span class="hl sym">|</span> <span class="hl kwd">Node</span> <span class="hl kwa">of</span> <span class="hl kwb">'a</span> tree <span class="hl sym">*</span> <span class="hl kwb">'a</span> <span class="hl sym">*</span> <span class="hl kwb">'a</span> tree

<span class="hl kwa">let rec</span> make d i <span class="hl sym">=</span>
  <span class="hl kwa">if</span> d <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">then</span> <span class="hl kwd">Leaf</span> i
  <span class="hl kwa">else</span>
    <span class="hl kwa">let</span> l <span class="hl sym">=</span> make <span class="hl sym">(</span>d<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">) (</span><span class="hl num">2</span><span class="hl sym">*</span>i <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">in</span>
    <span class="hl kwa">let</span> r <span class="hl sym">=</span> make <span class="hl sym">(</span>d<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">) (</span><span class="hl num">2</span><span class="hl sym">*</span>i<span class="hl sym">)</span> <span class="hl kwa">in</span>
      <span class="hl kwd">Node</span><span class="hl sym">(</span>l<span class="hl sym">,</span> i<span class="hl sym">,</span> r<span class="hl sym">)</span>

<span class="hl kwa">let rec</span> check <span class="hl sym">=</span> <span class="hl kwa">function</span> <span class="hl kwd">Leaf</span> i <span class="hl sym">-&gt;</span> i <span class="hl sym">|</span> <span class="hl kwd">Node</span><span class="hl sym">(</span>l<span class="hl sym">,</span> i<span class="hl sym">,</span> r<span class="hl sym">) -&gt;</span>
  <span class="hl kwa">let</span> i <span class="hl sym">=</span> i <span class="hl sym">+</span> check l <span class="hl kwa">in</span>
    i <span class="hl sym">-</span> check r

<span class="hl kwa">let</span> min_depth <span class="hl sym">=</span> <span class="hl num">4</span>
<span class="hl kwa">let</span> n <span class="hl sym">=</span> <span class="hl kwa">if</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>length <span class="hl kwc">Sys</span><span class="hl sym">.</span>argv <span class="hl sym">&lt;&gt;</span> <span class="hl num">2</span> <span class="hl kwa">then</span> <span class="hl num">0</span> <span class="hl kwa">else</span> int_of_string <span class="hl kwc">Sys</span><span class="hl sym">.</span>argv<span class="hl sym">.(</span><span class="hl num">1</span><span class="hl sym">)</span>
<span class="hl kwa">let</span> max_depth <span class="hl sym">=</span> max <span class="hl sym">(</span>min_depth <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">)</span> n
<span class="hl kwa">let</span> stretch_depth <span class="hl sym">=</span> max_depth <span class="hl sym">+</span> <span class="hl num">1</span>

<span class="hl kwa">let</span> _ <span class="hl sym">=</span>
  <span class="hl kwa">let</span> gc <span class="hl sym">=</span> <span class="hl kwc">Gc</span><span class="hl sym">.</span>get <span class="hl sym">()</span> <span class="hl kwa">in</span>
    gc<span class="hl sym">.</span><span class="hl kwc">Gc</span><span class="hl sym">.</span>max_overhead <span class="hl sym">&lt;-</span> <span class="hl num">1000000</span><span class="hl sym">;</span>
    gc<span class="hl sym">.</span><span class="hl kwc">Gc</span><span class="hl sym">.</span>space_overhead <span class="hl sym">&lt;-</span> <span class="hl num">500</span><span class="hl sym">;</span>
    gc<span class="hl sym">.</span><span class="hl kwc">Gc</span><span class="hl sym">.</span>major_heap_increment <span class="hl sym">&lt;-</span> <span class="hl num">10_000_000</span><span class="hl sym">;</span>
    gc<span class="hl sym">.</span><span class="hl kwc">Gc</span><span class="hl sym">.</span>minor_heap_size <span class="hl sym">&lt;-</span> <span class="hl num">10_000_000</span><span class="hl sym">;</span>
    <span class="hl kwc">Gc</span><span class="hl sym">.</span>set gc

<span class="hl kwa">let</span> <span class="hl sym">() =</span>
  <span class="hl kwa">let</span> c <span class="hl sym">=</span> check <span class="hl sym">(</span>make stretch_depth <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">in</span>
  <span class="hl kwc">Printf</span><span class="hl sym">.</span>printf <span class="hl str">&quot;stretch tree of depth %i</span><span class="hl esc">\t</span> <span class="hl str">check: %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> stretch_depth c

<span class="hl kwa">let</span> long_lived_tree <span class="hl sym">=</span> make max_depth <span class="hl num">0</span>


<span class="hl kwa">let rec</span> iter i niter c d <span class="hl sym">=</span>
  <span class="hl kwa">if</span> i <span class="hl sym">&lt;=</span> niter <span class="hl kwa">then</span>
    <span class="hl kwa">let</span> c <span class="hl sym">=</span> c <span class="hl sym">+</span> check<span class="hl sym">(</span>make d i<span class="hl sym">)</span> <span class="hl kwa">in</span>
    <span class="hl kwa">let</span> c <span class="hl sym">=</span> c <span class="hl sym">+</span> check<span class="hl sym">(</span>make d <span class="hl sym">(-</span>i<span class="hl sym">))</span> <span class="hl kwa">in</span>
    iter <span class="hl sym">(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span> niter c d
  <span class="hl kwa">else</span>
    <span class="hl kwc">Printf</span><span class="hl sym">.</span>printf <span class="hl str">&quot;%i</span><span class="hl esc">\t</span> <span class="hl str">trees of depth %i</span><span class="hl esc">\t</span> <span class="hl str">check: %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> niter<span class="hl sym">)</span> d c


<span class="hl kwa">let rec</span> loop_depths d <span class="hl sym">=</span>
  <span class="hl kwa">let</span> niter <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl kwa">lsl</span> <span class="hl sym">(</span>max_depth <span class="hl sym">-</span> d <span class="hl sym">+</span> min_depth<span class="hl sym">)</span> <span class="hl kwa">in</span>
    iter <span class="hl num">1</span> niter <span class="hl num">0</span> d<span class="hl sym">;</span>
    <span class="hl kwa">if</span> d <span class="hl sym">&lt;</span> max_depth <span class="hl kwa">then</span>
      loop_depths <span class="hl sym">(</span>d<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">)</span>

<span class="hl kwa">let</span> <span class="hl sym">() =</span>
  flush stdout<span class="hl sym">;</span>
  loop_depths min_depth<span class="hl sym">;</span>
  <span class="hl kwc">Printf</span><span class="hl sym">.</span>printf <span class="hl str">&quot;long lived tree of depth %i</span><span class="hl esc">\t</span> <span class="hl str">check: %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
    max_depth <span class="hl sym">(</span>check long_lived_tree<span class="hl sym">)</span>

