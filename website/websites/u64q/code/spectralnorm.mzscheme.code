<source>
<def></def><slc>;; The Computer Language Benchmarks Game</slc><br />
<def></def><slc>;; http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>;; translated directly from the C# version</slc><br />
<def></def><slc>;; contributed by Matthew Flatt</slc><br />
<def><br />
#lang scheme</def><sym>/</sym><def>base</def><br />
<sym>(</sym><def>require scheme</def><sym>/</sym><def>cmdline</def><sym>)</sym><br />
<def></def><br />
<sym>(</sym><def>define</def> <sym>(</sym><def>Approximate n</def><sym>)</sym><br />
<def></def>  <sym>(</sym><def>let</def> <sym>([</sym><def>u</def> <sym>(</sym><def>make</def><sym>-</sym><def>vector n</def> <num>1.0</num><def></def><sym>)]</sym><br />
<def></def>        <sym>[</sym><def>v</def> <sym>(</sym><def>make</def><sym>-</sym><def>vector n</def> <num>0.0</num><def></def><sym>)])</sym><br />
<def></def>    <slc>;; 20 steps of the power method</slc><br />
<def></def>    <sym>(</sym><def>for</def> <sym>([</sym><def>i</def> <sym>(</sym><def>in</def><sym>-</sym><def>range</def> <num>10</num><def></def><sym>)])</sym><br />
<def></def>      <sym>(</sym><def>MultiplyAtAv n u v</def><sym>)</sym><br />
<def></def>      <sym>(</sym><def>MultiplyAtAv n v u</def><sym>))</sym><br />
<def></def><br />
    <slc>;; B=AtA         A multiplied by A transposed</slc><br />
<def></def>    <slc>;; v.Bv /(v.v)   eigenvalue of v</slc><br />
<def></def>    <sym>(</sym><def>let loop</def> <sym>([</sym><def>i</def> <num>0</num><def></def><sym>][</sym><def>vBv</def> <num>0</num><def></def><sym>][</sym><def>vv</def> <num>0</num><def></def><sym>])</sym><br />
<def></def>      <sym>(</sym><def></def><kwa>if</kwa> <def></def><sym>(=</sym> <def>i n</def><sym>)</sym><br />
<def></def>          <sym>(</sym><def></def><kwa>sqrt</kwa> <def></def><sym>(/</sym> <def>vBv vv</def><sym>))</sym><br />
<def></def>          <sym>(</sym><def>let</def> <sym>([</sym><def>vi</def> <sym>(</sym><def>vector</def><sym>-</sym><def>ref v i</def><sym>)])</sym><br />
<def></def>            <sym>(</sym><def>loop</def> <sym>(</sym><def>add1 i</def><sym>)</sym><br />
<def></def>                  <sym>(+</sym> <def>vBv</def> <sym>(* (</sym><def>vector</def><sym>-</sym><def>ref u i</def><sym>)</sym> <def>vi</def><sym>))</sym><br />
<def></def>                  <sym>(+</sym> <def>vv</def> <sym>(*</sym> <def>vi vi</def><sym>))))))))</sym><br />
<def></def><br />
<slc>;; return element i,j of infinite matrix A</slc><br />
<def></def><sym>(</sym><def>define</def> <sym>(</sym><def>A i j</def><sym>)</sym><br />
<def></def>  <sym>(/</sym> <def></def><num>1.0</num> <def></def><sym>(+ (* (+</sym> <def>i j</def><sym>) (/ (+</sym> <def>i</def> <sym>(+</sym> <def>j</def> <num>1</num><def></def><sym>))</sym> <def></def><num>2</num><def></def><sym>)) (+</sym> <def>i</def> <num>1</num><def></def><sym>))))</sym><br />
<def></def><br />
<slc>;; multiply vector v by matrix A</slc><br />
<def></def><sym>(</sym><def>define</def> <sym>(</sym><def>MultiplyAv n v Av</def><sym>)</sym><br />
<def></def>  <sym>(</sym><def>for</def> <sym>([</sym><def>i</def> <sym>(</sym><def>in</def><sym>-</sym><def>range n</def><sym>)])</sym><br />
<def></def>    <sym>(</sym><def>vector</def><sym>-</sym><def></def><kwa>set</kwa><def></def><sym>!</sym> <def>Av i</def><br />
                 <sym>(</sym><def>for</def><sym>/</sym><def>fold</def> <sym>([</sym><def>r</def> <num>0</num><def></def><sym>])</sym><br />
<def></def>                     <sym>([</sym><def>j</def> <sym>(</sym><def>in</def><sym>-</sym><def>range n</def><sym>)])</sym><br />
<def></def>                   <sym>(+</sym> <def>r</def> <sym>(* (</sym><def>A i j</def><sym>) (</sym><def>vector</def><sym>-</sym><def>ref v j</def><sym>)))))))</sym><br />
<def></def><br />
<slc>;; multiply vector v by matrix A transposed</slc><br />
<def></def><sym>(</sym><def>define</def> <sym>(</sym><def>MultiplyAtv n v Atv</def><sym>)</sym><br />
<def></def>  <sym>(</sym><def>for</def> <sym>([</sym><def>i</def> <sym>(</sym><def>in</def><sym>-</sym><def>range n</def><sym>)])</sym><br />
<def></def>    <sym>(</sym><def>vector</def><sym>-</sym><def></def><kwa>set</kwa><def></def><sym>!</sym> <def>Atv i</def><br />
                 <sym>(</sym><def>for</def><sym>/</sym><def>fold</def> <sym>([</sym><def>r</def> <num>0</num><def></def><sym>])</sym><br />
<def></def>                     <sym>([</sym><def>j</def> <sym>(</sym><def>in</def><sym>-</sym><def>range n</def><sym>)])</sym><br />
<def></def>                   <sym>(+</sym> <def>r</def> <sym>(* (</sym><def>A j i</def><sym>) (</sym><def>vector</def><sym>-</sym><def>ref v j</def><sym>)))))))</sym><br />
<def></def><br />
<slc>;; multiply vector v by matrix A and then by matrix A transposed</slc><br />
<def></def><sym>(</sym><def>define</def> <sym>(</sym><def>MultiplyAtAv n v AtAv</def><sym>)</sym><br />
<def></def>  <sym>(</sym><def>let</def> <sym>([</sym><def>u</def> <sym>(</sym><def>make</def><sym>-</sym><def>vector n</def> <num>0.0</num><def></def><sym>)])</sym><br />
<def></def>    <sym>(</sym><def>MultiplyAv n v u</def><sym>)</sym><br />
<def></def>    <sym>(</sym><def>MultiplyAtv n u AtAv</def><sym>)))</sym><br />
<def></def><br />
<sym>(</sym><def>printf</def> <str>&quot;~a</str><esc>\</esc><str>n&quot;</str><def></def><br />
        <sym>(</sym><def>real</def><sym>-&gt;</sym><def>decimal</def><sym>-</sym><def>string</def><br />
         <sym>(</sym><def>Approximate</def> <sym>(</sym><def></def><kwa>command</kwa><def></def><sym>-</sym><def></def><kwa>line</kwa> <def>#</def><sym>:</sym><def>args</def> <sym>(</sym><def>n</def><sym>) (</sym><def>string</def><sym>-&gt;</sym><def>number n</def><sym>)))</sym><br />
<def></def>         <num>9</num><def></def><sym>))</sym><br />
<def></def><br />
</source>
