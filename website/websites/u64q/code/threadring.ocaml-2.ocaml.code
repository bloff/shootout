<source>
<def></def><com>(* The Computer Language Benchmarks Game</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com>   contributed by Tomasz bla Fortuna *)</com><def></def><br />
<br />
<kwa>let</kwa> <def>size</def> <sym>=</sym> <def></def><num>503</num><br />
<def></def><kwa>and</kwa> <def>n</def> <sym>=</sym> <def>int_of_string</def> <kwc>Sys</kwc><def></def><sym>.</sym><def>argv</def><sym>.(</sym><def></def><num>1</num><def></def><sym>)</sym><br />
<def></def><br />
<kwa>type</kwa> <def>channel</def> <sym>= {</sym> <def>m</def> <sym>:</sym> <def></def><kwc>Mutex</kwc><def></def><sym>.</sym><def>t</def><sym>;</sym> <def>d</def> <sym>:</sym> <def></def><kwb>int ref</kwb> <def></def><sym>}</sym><br />
<def></def><kwa>let</kwa> <def>channel</def> <sym>() =</sym><br />
<def></def>  <kwa>let</kwa> <def>mx</def> <sym>=</sym> <def></def><kwc>Mutex</kwc><def></def><sym>.</sym><def>create</def> <sym>()</sym> <def></def><kwa>in</kwa> <def></def><kwc>Mutex</kwc><def></def><sym>.</sym><def>lock mx</def><sym>;</sym><br />
<def></def>  <sym>{</sym> <def>m</def> <sym>=</sym> <def>mx</def><sym>;</sym> <def>d</def> <sym>=</sym> <def></def><kwb>ref</kwb> <def></def><num>0</num><def></def><sym>}</sym><br />
<def></def><br />
<kwa>let rec</kwa> <def>spawn id i o loop</def> <sym>() =</sym><br />
<def></def>  <kwa>let rec</kwa> <def>thread</def> <sym>() =</sym><br />
<def></def>    <kwc>Mutex</kwc><def></def><sym>.</sym><def>lock i</def><sym>.</sym><def>m</def><sym>;</sym><br />
<def></def>    <kwa>if</kwa> <def></def><sym>!(</sym><def>i</def><sym>.</sym><def>d</def><sym>) =</sym> <def>n</def> <kwa>then</kwa> <def></def><sym>(</sym><br />
<def>      print_int</def> <sym>(</sym><def>size</def><sym>-</sym><def>id</def><sym>+</sym><def></def><num>1</num><def></def><sym>);</sym> <def>print_newline</def> <sym>();</sym> <def>exit</def> <num>0</num><def></def><sym>;</sym><br />
<def></def>    <sym>);</sym><br />
<def>    o</def><sym>.</sym><def>d</def> <sym>:= !(</sym><def>i</def><sym>.</sym><def>d</def><sym>) +</sym> <def></def><num>1</num><def></def><sym>;</sym>  <def></def><com>(* Forward token *)</com><def></def><br />
    <kwc>Mutex</kwc><def></def><sym>.</sym><def>unlock o</def><sym>.</sym><def>m</def><sym>;</sym><br />
<def>    thread</def> <sym>()</sym><br />
<def></def>  <kwa>in</kwa><br />
<def></def>  <kwa>if</kwa> <def>id</def> <sym>&gt;</sym> <def></def><num>1</num> <def></def><kwa>then</kwa> <def></def><sym>(</sym><br />
<def></def>    <kwa>let</kwa> <def>new_o</def> <sym>=</sym> <def></def><kwa>if</kwa> <def>id</def> <sym>=</sym> <def></def><num>2</num> <def></def><kwa>then</kwa> <def>loop</def> <kwa>else</kwa> <def>channel</def> <sym>()</sym> <def></def><kwa>in</kwa><br />
<def></def>    <kwa>let</kwa> <def>f</def> <sym>=</sym> <def>spawn</def> <sym>(</sym><def>id</def><sym>-</sym><def></def><num>1</num><def></def><sym>)</sym> <def>o new_o loop</def> <kwa>in</kwa><br />
<def>    ignore</def> <sym>(</sym><def></def><kwc>Thread</kwc><def></def><sym>.</sym><def>create f</def> <sym>())</sym><br />
<def></def>  <sym>);</sym><br />
<def>  thread</def> <sym>()</sym><br />
<def></def><br />
<kwa>let</kwa> <def>_</def> <sym>=</sym><br />
<def></def>  <kwa>let</kwa> <def>loop</def><sym>,</sym> <def>o</def> <sym>=</sym> <def>channel</def> <sym>(),</sym> <def>channel</def> <sym>()</sym> <def></def><kwa>in</kwa><br />
<def></def>  <kwc>Mutex</kwc><def></def><sym>.</sym><def>unlock loop</def><sym>.</sym><def>m</def><sym>;</sym><br />
<def></def>  <kwc>Thread</kwc><def></def><sym>.</sym><def>join</def> <sym>(</sym><def></def><kwc>Thread</kwc><def></def><sym>.</sym><def>create</def> <sym>(</sym><def>spawn size loop o loop</def><sym>) ())</sym><def></def><br />
</source>
