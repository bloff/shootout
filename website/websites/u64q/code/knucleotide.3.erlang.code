<span class="hl slc">%% The Computer Language Benchmarks Game</span>
<span class="hl slc">%% http://shootout.alioth.debian.org/</span>
<span class="hl slc">%% contributed by Fredrik Svahn based on an earlier submission</span>
<span class="hl slc">%%             by Kenneth Johansson, Vlad Dumitrescu and Ulf Wiger</span>

<span class="hl sym">-</span>module<span class="hl sym">(</span>knucleotide<span class="hl sym">).</span>
<span class="hl sym">-</span>export<span class="hl sym">([</span>main<span class="hl sym">/</span><span class="hl num">1</span><span class="hl sym">]).</span>

to_upper<span class="hl sym">(&lt;&lt;</span>C<span class="hl sym">,</span> Cs<span class="hl sym">/</span>binary<span class="hl sym">&gt;&gt;,</span> Acc<span class="hl sym">)</span> when C <span class="hl sym">&gt;=</span> $a<span class="hl sym">,</span> C <span class="hl sym">=&lt;</span> $z <span class="hl sym">-&gt;</span>
    to_upper<span class="hl sym">(</span>Cs<span class="hl sym">, [</span>C<span class="hl sym">-(</span>$a<span class="hl sym">-</span>$A<span class="hl sym">)|</span> Acc<span class="hl sym">]);</span>
to_upper<span class="hl sym">(&lt;&lt;</span>$\n<span class="hl sym">,</span> Cs<span class="hl sym">/</span>binary<span class="hl sym">&gt;&gt;,</span> Acc<span class="hl sym">) -&gt;</span> to_upper<span class="hl sym">(</span>Cs<span class="hl sym">,</span> Acc<span class="hl sym">);</span>
to_upper<span class="hl sym">(&lt;&lt;</span>C<span class="hl sym">,</span> Cs<span class="hl sym">/</span>binary<span class="hl sym">&gt;&gt;,</span> Acc<span class="hl sym">) -&gt;</span> to_upper<span class="hl sym">(</span>Cs<span class="hl sym">, [</span>C <span class="hl sym">|</span> Acc<span class="hl sym">]);</span>
to_upper<span class="hl sym">(&lt;&lt;&gt;&gt;,</span> Acc<span class="hl sym">) -&gt;</span> list_to_binary<span class="hl sym">(</span>lists<span class="hl sym">:</span>reverse<span class="hl sym">(</span>Acc<span class="hl sym">)).</span>

<span class="hl slc">%% Read and discard until start of third segment</span>
seek_three<span class="hl sym">() -&gt;</span>
    case io<span class="hl sym">:</span>get_line<span class="hl sym">(</span><span class="hl str">''</span><span class="hl sym">)</span> of
	<span class="hl sym">&lt;&lt;</span><span class="hl str">&quot;&gt;TH&quot;</span><span class="hl sym">,</span> _<span class="hl sym">/</span>binary<span class="hl sym">&gt;&gt; -&gt;</span> done<span class="hl sym">;</span>
	eof        <span class="hl sym">-&gt;</span> erlang<span class="hl sym">:</span>error<span class="hl sym">(</span>eof<span class="hl sym">);</span>
	_          <span class="hl sym">-&gt;</span> seek_three<span class="hl sym">()</span>
    end<span class="hl sym">.</span>

<span class="hl slc">%% Read third segment</span>
get_seq_three<span class="hl sym">(</span>Seq<span class="hl sym">) -&gt;</span>
    case io<span class="hl sym">:</span>get_line<span class="hl sym">(</span><span class="hl str">''</span><span class="hl sym">)</span> of
	eof <span class="hl sym">-&gt;</span> iolist_to_binary<span class="hl sym">(</span>lists<span class="hl sym">:</span>reverse<span class="hl sym">(</span>Seq<span class="hl sym">));</span>
	Str <span class="hl sym">-&gt;</span> get_seq_three<span class="hl sym">([</span>to_upper<span class="hl sym">(</span>Str<span class="hl sym">, [])|</span>Seq<span class="hl sym">])</span>
    end<span class="hl sym">.</span>

<span class="hl slc">%% Generate frequency hash table</span>
gen_freq_table<span class="hl sym">(</span>FreqT<span class="hl sym">,</span> Seq<span class="hl sym">,</span> Len<span class="hl sym">) -&gt;</span>
    gen_freq_table<span class="hl sym">(</span>Seq<span class="hl sym">,</span> Len<span class="hl sym">,</span> FreqT<span class="hl sym">,</span> size<span class="hl sym">(</span>Seq<span class="hl sym">)-</span>Len<span class="hl sym">).</span>

gen_freq_table<span class="hl sym">(</span>_<span class="hl sym">,</span> _<span class="hl sym">,</span> _<span class="hl sym">, -</span><span class="hl num">1</span><span class="hl sym">) -&gt;</span> done<span class="hl sym">;</span>
gen_freq_table<span class="hl sym">(</span>Seq<span class="hl sym">,</span> Len<span class="hl sym">,</span> FreqT<span class="hl sym">,</span> Dec<span class="hl sym">) -&gt;</span>
    <span class="hl sym">&lt;&lt;</span>_<span class="hl sym">:</span>Dec<span class="hl sym">/</span>binary<span class="hl sym">,</span> Key<span class="hl sym">:</span>Len<span class="hl sym">/</span>binary<span class="hl sym">,</span> _<span class="hl sym">/</span>binary<span class="hl sym">&gt;&gt; =</span> Seq<span class="hl sym">,</span>
    update_counter<span class="hl sym">(</span>Key<span class="hl sym">,</span> FreqT<span class="hl sym">),</span>
    gen_freq_table<span class="hl sym">(</span>Seq<span class="hl sym">,</span> Len<span class="hl sym">,</span> FreqT<span class="hl sym">,</span> Dec<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">).</span>

<span class="hl slc">%% Update hash table counter for already existing pattern or insert new</span>
update_counter<span class="hl sym">(</span>Key<span class="hl sym">,</span> FreqT<span class="hl sym">) -&gt;</span>
    try ets<span class="hl sym">:</span>update_counter<span class="hl sym">(</span>FreqT<span class="hl sym">,</span> Key<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">)</span> of _ <span class="hl sym">-&gt;</span> ok
    catch error<span class="hl sym">:</span>badarg <span class="hl sym">-&gt;</span> ets<span class="hl sym">:</span>insert<span class="hl sym">(</span>FreqT<span class="hl sym">, {</span>Key<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">})</span>
    end<span class="hl sym">.</span>

<span class="hl slc">%% Print the frequency table in the right order</span>
print_freq_table<span class="hl sym">(</span>FreqT<span class="hl sym">) -&gt;</span>
    FreqList <span class="hl sym">=</span> lists<span class="hl sym">:</span>reverse<span class="hl sym">(</span>lists<span class="hl sym">:</span>keysort<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">,</span> ets<span class="hl sym">:</span>tab2list<span class="hl sym">(</span>FreqT<span class="hl sym">))),</span>
    Tot <span class="hl sym">=</span> lists<span class="hl sym">:</span>foldr<span class="hl sym">(</span>fun<span class="hl sym">({</span>_<span class="hl sym">,</span> Cnt<span class="hl sym">},</span> Acc<span class="hl sym">)-&gt;</span> Acc <span class="hl sym">+</span> Cnt end<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> FreqList<span class="hl sym">),</span>
    lists<span class="hl sym">:</span>foreach<span class="hl sym">(</span>fun<span class="hl sym">({</span>Nucleoid<span class="hl sym">,</span> Cnt<span class="hl sym">})-&gt;</span>
			  io<span class="hl sym">:</span>fwrite<span class="hl sym">(</span><span class="hl str">&quot;~s ~.3f</span><span class="hl esc">\</span><span class="hl str">n&quot;</span><span class="hl sym">,[</span>Nucleoid<span class="hl sym">,</span> Cnt<span class="hl sym">*</span><span class="hl num">100</span><span class="hl sym">/</span>Tot<span class="hl sym">])</span>
		  end<span class="hl sym">,</span> FreqList<span class="hl sym">),</span>
    io<span class="hl sym">:</span>fwrite<span class="hl sym">(</span><span class="hl str">&quot;</span><span class="hl esc">\</span><span class="hl str">n&quot;</span><span class="hl sym">).</span>

<span class="hl slc">%% Print number of occurrences for a specific pattern</span>
print_count<span class="hl sym">(</span>FreqT<span class="hl sym">,</span> Pattern<span class="hl sym">) -&gt;</span>
    case ets<span class="hl sym">:</span>lookup<span class="hl sym">(</span>FreqT<span class="hl sym">,</span> Pattern<span class="hl sym">)</span> of
	<span class="hl sym">[{</span>_<span class="hl sym">,</span> Value<span class="hl sym">}] -&gt;</span> io<span class="hl sym">:</span>fwrite<span class="hl sym">(</span><span class="hl str">&quot;~w</span><span class="hl esc">\</span><span class="hl str">t~s</span><span class="hl esc">\</span><span class="hl str">n&quot;</span><span class="hl sym">,[</span>Value<span class="hl sym">,</span> Pattern<span class="hl sym">]);</span>
	<span class="hl sym">[] -&gt;</span> io<span class="hl sym">:</span>fwrite<span class="hl sym">(</span><span class="hl str">&quot;~w</span><span class="hl esc">\</span><span class="hl str">t~s</span><span class="hl esc">\</span><span class="hl str">n&quot;</span><span class="hl sym">,[</span><span class="hl num">0</span><span class="hl sym">,</span> Pattern<span class="hl sym">])</span>
    end<span class="hl sym">.</span>

<span class="hl slc">%% Spawn a worker process with its own hash table</span>
do<span class="hl sym">({</span>PrintFun<span class="hl sym">,</span> Pattern<span class="hl sym">},</span> Seq<span class="hl sym">) -&gt;</span>
    spawn<span class="hl sym">(</span> fun<span class="hl sym">()-&gt;</span>
		   FreqT <span class="hl sym">=</span> ets<span class="hl sym">:</span>new<span class="hl sym">(</span>hash<span class="hl sym">, [</span>set<span class="hl sym">]),</span>
		   gen_freq_table<span class="hl sym">(</span>FreqT<span class="hl sym">,</span> Seq<span class="hl sym">,</span> size<span class="hl sym">(</span>Pattern<span class="hl sym">)),</span>
		   <span class="hl slc">%Work is done, wait for token and print</span>
		   receive Pids <span class="hl sym">-&gt;</span>
			   PrintFun<span class="hl sym">(</span>FreqT<span class="hl sym">,</span> Pattern<span class="hl sym">),</span>
			   hd<span class="hl sym">(</span>Pids<span class="hl sym">) !</span> tl<span class="hl sym">(</span>Pids<span class="hl sym">)</span>
		   end<span class="hl sym">,</span>
		   ets<span class="hl sym">:</span>delete<span class="hl sym">(</span>FreqT<span class="hl sym">)</span>
	   end <span class="hl sym">).</span>

main<span class="hl sym">(</span>_Arg<span class="hl sym">) -&gt;</span>
    io<span class="hl sym">:</span>setopts<span class="hl sym">(</span>standard_io<span class="hl sym">, [</span>binary<span class="hl sym">]),</span>
    seek_three<span class="hl sym">(),</span>
    Seq <span class="hl sym">=</span> get_seq_three<span class="hl sym">([]),</span>
    PrintFreq <span class="hl sym">=</span> fun<span class="hl sym">(</span>Res<span class="hl sym">,</span> _Pattern<span class="hl sym">)-&gt;</span> print_freq_table<span class="hl sym">(</span>Res<span class="hl sym">)</span> end<span class="hl sym">,</span>
    PrintCount <span class="hl sym">=</span> fun<span class="hl sym">(</span>Res<span class="hl sym">,</span> Pattern<span class="hl sym">)-&gt;</span> print_count<span class="hl sym">(</span>Res<span class="hl sym">,</span> Pattern<span class="hl sym">)</span> end<span class="hl sym">,</span>
    Actions <span class="hl sym">= [{</span>PrintFreq<span class="hl sym">,  &lt;&lt;</span><span class="hl str">&quot;?&quot;</span><span class="hl sym">&gt;&gt;},</span>
	       <span class="hl sym">{</span>PrintFreq<span class="hl sym">,  &lt;&lt;</span><span class="hl str">&quot;??&quot;</span><span class="hl sym">&gt;&gt;},</span>
	       <span class="hl sym">{</span>PrintCount<span class="hl sym">, &lt;&lt;</span><span class="hl str">&quot;GGT&quot;</span><span class="hl sym">&gt;&gt;},</span>
	       <span class="hl sym">{</span>PrintCount<span class="hl sym">, &lt;&lt;</span><span class="hl str">&quot;GGTA&quot;</span><span class="hl sym">&gt;&gt;},</span>
	       <span class="hl sym">{</span>PrintCount<span class="hl sym">, &lt;&lt;</span><span class="hl str">&quot;GGTATT&quot;</span><span class="hl sym">&gt;&gt;},</span>
	       <span class="hl sym">{</span>PrintCount<span class="hl sym">, &lt;&lt;</span><span class="hl str">&quot;GGTATTTTAATT&quot;</span><span class="hl sym">&gt;&gt;},</span>
	       <span class="hl sym">{</span>PrintCount<span class="hl sym">, &lt;&lt;</span><span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl sym">&gt;&gt;}],</span>

    Pids <span class="hl sym">= [</span> do<span class="hl sym">(</span>Action<span class="hl sym">,</span> Seq<span class="hl sym">) ||</span> Action <span class="hl sym">&lt;-</span> Actions <span class="hl sym">],</span>
    <span class="hl slc">%Pass token to print in right order</span>
    hd<span class="hl sym">(</span>Pids<span class="hl sym">) !</span> tl<span class="hl sym">(</span>Pids<span class="hl sym">) ++ [</span>self<span class="hl sym">()],</span>
    receive _Pid <span class="hl sym">-&gt;</span> halt<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span> end<span class="hl sym">.</span>
