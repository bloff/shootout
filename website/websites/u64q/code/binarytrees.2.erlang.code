<span class="hl slc">% The Computer Language Benchmarks Game</span>
<span class="hl slc">% http://shootout.alioth.debian.org/</span>
<span class="hl slc">%</span>
<span class="hl slc">% contributed by Isaac Gouy (Erlang novice)</span>
<span class="hl slc">% parallelized by Kevin Scaldeferri</span>

<span class="hl sym">-</span><span class="hl kwa">module</span><span class="hl sym">(</span>binarytrees<span class="hl sym">).</span>
<span class="hl sym">-</span><span class="hl kwa">export</span><span class="hl sym">([</span>main<span class="hl sym">/</span><span class="hl num">1</span><span class="hl sym">]).</span>
<span class="hl sym">-</span><span class="hl kwa">export</span><span class="hl sym">([</span>depth<span class="hl sym">/</span><span class="hl num">2</span><span class="hl sym">]).</span>

<span class="hl sym">-</span><span class="hl kwa">define</span><span class="hl sym">(</span>Min<span class="hl sym">,</span><span class="hl num">4</span><span class="hl sym">).</span>

<span class="hl kwd">main</span><span class="hl sym">([</span>Arg<span class="hl sym">]) -&gt;</span>
   N <span class="hl sym">=</span> <span class="hl kwb">list_to_integer</span><span class="hl sym">(</span>Arg<span class="hl sym">),</span>
   Max <span class="hl sym">=</span> lists<span class="hl sym">:</span><span class="hl kwd">max</span><span class="hl sym">([?</span>Min<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">,</span>N<span class="hl sym">]),</span>

   Stretch <span class="hl sym">=</span> Max <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span>
   io<span class="hl sym">:</span><span class="hl kwd">fwrite</span><span class="hl sym">(</span><span class="hl str">&quot;stretch tree of depth ~w</span><span class="hl esc">\</span><span class="hl str">t check: ~w~n&quot;</span><span class="hl sym">,</span>
      <span class="hl sym">[</span> Stretch<span class="hl sym">,</span> <span class="hl kwd">itemCheck</span><span class="hl sym">(</span><span class="hl kwd">bottomUp</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span>Stretch<span class="hl sym">)) ]),</span>

   LongLivedTree <span class="hl sym">=</span> <span class="hl kwd">bottomUp</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span>Max<span class="hl sym">),</span>
   <span class="hl kwd">depthLoop</span><span class="hl sym">(?</span>Min<span class="hl sym">,</span>Max<span class="hl sym">),</span>

   io<span class="hl sym">:</span><span class="hl kwd">fwrite</span><span class="hl sym">(</span><span class="hl str">&quot;long lived tree of depth ~w</span><span class="hl esc">\</span><span class="hl str">t check: ~w~n&quot;</span><span class="hl sym">,</span>
      <span class="hl sym">[</span> Max<span class="hl sym">,</span> <span class="hl kwd">itemCheck</span><span class="hl sym">(</span>LongLivedTree<span class="hl sym">) ]),</span>

   <span class="hl kwb">halt</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">).</span>


<span class="hl kwd">depthLoop</span><span class="hl sym">(</span>D<span class="hl sym">,</span>M<span class="hl sym">) -&gt;</span>
    Results <span class="hl sym">=</span> rpc<span class="hl sym">:</span><span class="hl kwd">pmap</span><span class="hl sym">({?</span>MODULE<span class="hl sym">,</span> depth<span class="hl sym">}, [</span>M<span class="hl sym">],</span> lists<span class="hl sym">:</span><span class="hl kwd">seq</span><span class="hl sym">(</span>D<span class="hl sym">,</span> M<span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">)),</span>
    lists<span class="hl sym">:</span><span class="hl kwd">foreach</span><span class="hl sym">(</span><span class="hl kwa">fun</span><span class="hl sym">(</span>Result<span class="hl sym">) -&gt;</span>
                          io<span class="hl sym">:</span><span class="hl kwd">fwrite</span><span class="hl sym">(</span><span class="hl str">&quot;~w</span><span class="hl esc">\</span><span class="hl str">t trees of depth ~w</span><span class="hl esc">\</span><span class="hl str">t check: ~w~n&quot;</span><span class="hl sym">,</span> Result<span class="hl sym">)</span>
                  <span class="hl kwa">end</span><span class="hl sym">,</span>
                  Results<span class="hl sym">).</span>

<span class="hl kwd">depth</span><span class="hl sym">(</span>D<span class="hl sym">,</span>M<span class="hl sym">) -&gt;</span>
    N <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl kwa">bsl</span> <span class="hl sym">(</span>M<span class="hl sym">-</span>D <span class="hl sym">+ ?</span>Min<span class="hl sym">),</span>
    <span class="hl sym">[</span> <span class="hl num">2</span><span class="hl sym">*</span>N<span class="hl sym">,</span> D<span class="hl sym">,</span> <span class="hl kwd">sumLoop</span><span class="hl sym">(</span>N<span class="hl sym">,</span>D<span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">) ].</span>

<span class="hl kwd">sumLoop</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span>_<span class="hl sym">,</span>Sum<span class="hl sym">) -&gt;</span> Sum<span class="hl sym">;</span>
<span class="hl kwd">sumLoop</span><span class="hl sym">(</span>N<span class="hl sym">,</span>D<span class="hl sym">,</span>Sum<span class="hl sym">) -&gt;</span>
   <span class="hl kwd">sumLoop</span><span class="hl sym">(</span>N<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span>D<span class="hl sym">,</span> Sum <span class="hl sym">+</span> <span class="hl kwd">itemCheck</span><span class="hl sym">(</span><span class="hl kwd">bottomUp</span><span class="hl sym">(</span>N<span class="hl sym">,</span>D<span class="hl sym">)) +</span> <span class="hl kwd">itemCheck</span><span class="hl sym">(</span><span class="hl kwd">bottomUp</span><span class="hl sym">(-</span><span class="hl num">1</span><span class="hl sym">*</span>N<span class="hl sym">,</span>D<span class="hl sym">))).</span>

<span class="hl kwd">bottomUp</span><span class="hl sym">(</span>I<span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">) -&gt; {</span>I<span class="hl sym">,</span> nil<span class="hl sym">,</span> nil<span class="hl sym">};</span>
<span class="hl kwd">bottomUp</span><span class="hl sym">(</span>I<span class="hl sym">,</span>D<span class="hl sym">) -&gt; {</span>I<span class="hl sym">,</span> <span class="hl kwd">bottomUp</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>I<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span>D<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">),</span> <span class="hl kwd">bottomUp</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>I<span class="hl sym">,</span>D<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)}.</span>

<span class="hl kwd">itemCheck</span><span class="hl sym">(</span>nil<span class="hl sym">) -&gt;</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl kwd">itemCheck</span><span class="hl sym">({</span>I<span class="hl sym">,</span>Left<span class="hl sym">,</span>Right<span class="hl sym">}) -&gt;</span>
   I <span class="hl sym">+</span> <span class="hl kwd">itemCheck</span><span class="hl sym">(</span>Left<span class="hl sym">) -</span> <span class="hl kwd">itemCheck</span><span class="hl sym">(</span>Right<span class="hl sym">).</span>
