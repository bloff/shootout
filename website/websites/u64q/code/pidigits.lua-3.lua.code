<source>
<def></def><slc>-- The Computer Language Benchmarks Game</slc><br />
<def></def><slc>-- http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>-- contributed by Pilho Kim</slc><br />
<def></def><br />
<slc>-- requires LGMP &quot;A GMP package for Lua 5.1&quot;</slc><br />
<def></def><slc>-- http://members.chello.nl/~w.couwenberg/lgmp.htm</slc><br />
<def><br />
<br />
require</def> <str>'gmp'</str><def></def><br />
<br />
<slc>-- Transformation</slc><br />
<def></def><br />
<kwa>local</kwa> <def>T</def> <sym>= {}</sym><br />
<def></def><br />
<kwa>function</kwa> <def>T</def><sym>.</sym><def></def><kwd>bigzero</kwd><def></def><sym>()</sym> <def></def><kwa>return</kwa> <def>gmp</def><sym>.</sym><def></def><kwd>z</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>)</sym> <def></def><kwa>end</kwa><br />
<def></def><kwa>function</kwa> <def>T</def><sym>.</sym><def></def><kwd>bigone</kwd><def></def><sym>()</sym> <def></def><kwa>return</kwa> <def>gmp</def><sym>,</sym><def></def><kwd>z</kwd><def></def><sym>(</sym><def></def><num>1</num><def></def><sym>)</sym> <def></def><kwa>end</kwa><br />
<def></def><kwa>function</kwa> <def>T</def><sym>.</sym><def></def><kwd>bigten</kwd><def></def><sym>()</sym> <def></def><kwa>return</kwa> <def>gmp</def><sym>.</sym><def></def><kwd>z</kwd><def></def><sym>(</sym><def></def><num>10</num><def></def><sym>)</sym> <def></def><kwa>end</kwa><br />
<def></def><br />
<kwa>function</kwa> <def>T</def><sym>.</sym><def></def><kwd>new</kwd><def></def><sym>(</sym><def>q1</def><sym>,</sym><def>r1</def><sym>,</sym><def>s1</def><sym>,</sym><def>t1</def><sym>)</sym><br />
<def></def>   <kwa>return</kwa> <def></def><sym>{</sym><br />
<def>       q</def> <sym>=</sym> <def>q1</def><br />
      <sym>,</sym><def>r</def> <sym>=</sym> <def>r1</def><br />
      <sym>,</sym><def>s</def> <sym>=</sym> <def>s1</def><br />
      <sym>,</sym><def>t</def> <sym>=</sym> <def>t1</def><br />
      <sym>,</sym><def>k</def> <sym>=</sym> <def>gmp</def><sym>.</sym><def></def><kwd>z</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>)</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><kwa>end</kwa><br />
<def></def><br />
<kwa>function</kwa> <def>T</def><sym>.</sym><def></def><kwd>newInt</kwd><def></def><sym>(</sym><def>q</def><sym>,</sym><def>r</def><sym>,</sym><def>s</def><sym>,</sym><def>t</def><sym>)</sym><br />
<def></def>   <kwa>return</kwa> <def></def><sym>{</sym><br />
<def>       q</def> <sym>=</sym> <def>gmp</def><sym>.</sym><def></def><kwd>z</kwd><def></def><sym>(</sym><def>q</def><sym>)</sym><br />
<def></def>      <sym>,</sym><def>r</def> <sym>=</sym> <def>gmp</def><sym>.</sym><def></def><kwd>z</kwd><def></def><sym>(</sym><def>r</def><sym>)</sym><br />
<def></def>      <sym>,</sym><def>s</def> <sym>=</sym> <def>gmp</def><sym>.</sym><def></def><kwd>z</kwd><def></def><sym>(</sym><def>s</def><sym>)</sym><br />
<def></def>      <sym>,</sym><def>t</def> <sym>=</sym> <def>gmp</def><sym>.</sym><def></def><kwd>z</kwd><def></def><sym>(</sym><def>t</def><sym>)</sym><br />
<def></def>      <sym>,</sym><def>k</def> <sym>=</sym> <def>gmp</def><sym>.</sym><def></def><kwd>z</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>)</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><kwa>end</kwa><br />
<def></def><br />
<kwa>function</kwa> <def>T</def><sym>.</sym><def></def><kwd>unity</kwd><def></def><sym>()</sym> <def></def><kwa>return</kwa> <def>T</def><sym>.</sym><def></def><kwd>newInt</kwd><def></def><sym>(</sym><def></def><num>1</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>1</num><def></def><sym>)</sym> <def></def><kwa>end</kwa><br />
<def></def><kwa>function</kwa> <def>T</def><sym>.</sym><def></def><kwd>zero</kwd><def></def><sym>()</sym> <def></def><kwa>return</kwa> <def>T</def><sym>.</sym><def></def><kwd>newInt</kwd><def></def><sym>(</sym><def></def><num>0</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>)</sym> <def></def><kwa>end</kwa><br />
<def></def><br />
<kwa>function</kwa> <def>T</def><sym>.</sym><def></def><kwd>compose</kwd><def></def><sym>(</sym><def>a</def><sym>,</sym><def>b</def><sym>)</sym><br />
<def></def>   <kwa>local</kwa> <def>qq</def><sym>,</sym> <def>qrrt</def><sym>,</sym> <def>sqts</def><sym>,</sym> <def>srtt<br />
   qq</def> <sym>=</sym> <def>a</def><sym>.</sym><def>q</def> <sym>*</sym> <def>b</def><sym>.</sym><def>q<br />
   qrrt</def> <sym>=</sym> <def>a</def><sym>.</sym><def>q</def> <sym>*</sym> <def>b</def><sym>.</sym><def>r</def> <sym>+</sym> <def>a</def><sym>.</sym><def>r</def> <sym>*</sym> <def>b</def><sym>.</sym><def>t<br />
   sqts</def> <sym>=</sym> <def>T</def><sym>.</sym><def></def><kwd>bigzero</kwd><def></def><sym>()</sym><br />
<def>   srtt</def> <sym>=</sym> <def>a</def><sym>.</sym><def>t</def> <sym>*</sym> <def>b</def><sym>.</sym><def>t</def><br />
   <kwa>return</kwa> <def>T</def><sym>.</sym><def></def><kwd>new</kwd><def></def><sym>(</sym><def>qq</def><sym>,</sym> <def>qrrt</def><sym>,</sym> <def>sqts</def><sym>,</sym> <def>srtt</def><sym>)</sym><br />
<def></def><kwa>end</kwa><br />
<def></def><br />
<br />
<kwa>function</kwa> <def>T</def><sym>.</sym><def></def><kwd>extract</kwd><def></def><sym>(</sym><def>a</def><sym>,</sym><def>j</def><sym>)</sym><br />
<def></def>   <kwa>local</kwa> <def>bigj</def> <sym>=</sym> <def>gmp</def><sym>.</sym><def></def><kwd>z</kwd><def></def><sym>(</sym><def>j</def><sym>)</sym><br />
<def></def>   <kwa>local</kwa> <def>qjr</def><sym>,</sym> <def>sjt<br />
   qjr</def> <sym>=</sym> <def>a</def><sym>.</sym><def>q</def> <sym>*</sym> <def>bigj</def> <sym>+</sym> <def>a</def><sym>.</sym><def>r<br />
   sjt</def> <sym>=</sym> <def>a</def><sym>.</sym><def>t</def><br />
   <kwa>return</kwa> <def>qjr</def> <sym>/</sym> <def>sjt</def><br />
<kwa>end</kwa><br />
<def></def><br />
<kwa>function</kwa> <def>T</def><sym>.</sym><def></def><kwb>next</kwb><def></def><sym>(</sym><def>a</def><sym>)</sym><br />
<def>   a</def><sym>.</sym><def>k</def> <sym>=</sym> <def>a</def><sym>.</sym><def>k</def> <sym>+</sym> <def></def><num>1</num><br />
<def>   a</def><sym>.</sym><def>q</def> <sym>=</sym> <def>a</def><sym>.</sym><def>k<br />
   a</def><sym>.</sym><def>t</def> <sym>=</sym> <def></def><num>2</num><def></def><sym>*</sym><def>a</def><sym>.</sym><def>k</def> <sym>+</sym> <def></def><num>1</num><br />
<def>   a</def><sym>.</sym><def>r</def> <sym>=</sym> <def></def><num>2</num><def></def><sym>*</sym><def>a</def><sym>.</sym><def>t</def><br />
   <kwa>return</kwa> <def>a</def><br />
<kwa>end</kwa><br />
<def></def><br />
<br />
<slc>-- Pi Digit Stream</slc><br />
<def></def><br />
<kwa>local</kwa> <def>P</def> <sym>= {}</sym><br />
<def></def><br />
<kwa>function</kwa> <def>P</def><sym>.</sym><def></def><kwd>new</kwd><def></def><sym>()</sym><br />
<def></def>   <kwa>return</kwa> <def></def><sym>{</sym><br />
<def>       z</def> <sym>=</sym> <def>T</def><sym>.</sym><def></def><kwd>unity</kwd><def></def><sym>()</sym><br />
<def></def>       <sym>,</sym><def>x</def> <sym>=</sym> <def>T</def><sym>.</sym><def></def><kwd>zero</kwd><def></def><sym>()</sym><br />
<def></def>      <sym>,</sym><def>inverse</def> <sym>=</sym> <def>T</def><sym>.</sym><def></def><kwd>newInt</kwd><def></def><sym>(</sym><def></def><num>10</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def></def><num>1</num><def></def><sym>)</sym><br />
<def></def>      <sym>}</sym><br />
<def></def><kwa>end</kwa><br />
<def></def><br />
<kwa>function</kwa> <def>P</def><sym>.</sym><def></def><kwd>produce</kwd><def></def><sym>(</sym><def>a</def><sym>,</sym><def>j</def><sym>)</sym><br />
<def></def>   <kwa>local</kwa> <def>i</def> <sym>=</sym> <def>a</def><sym>.</sym><def>inverse<br />
   i</def><sym>.</sym><def>r</def> <sym>=</sym> <def>T</def><sym>.</sym><def></def><kwd>bigzero</kwd><def></def><sym>() -</sym> <def>T</def><sym>.</sym><def></def><kwd>bigten</kwd><def></def><sym>()*</sym><def>j</def><br />
   <kwa>return</kwa> <def>T</def><sym>.</sym><def></def><kwd>compose</kwd><def></def><sym>(</sym><def>i</def><sym>,</sym><def>a</def><sym>.</sym><def>z</def><sym>)</sym><br />
<def></def><kwa>end</kwa><br />
<def></def><br />
<kwa>function</kwa> <def>P</def><sym>.</sym><def></def><kwd>consume</kwd><def></def><sym>(</sym><def>a</def><sym>,</sym><def>b</def><sym>)</sym><br />
<def></def>   <kwa>return</kwa> <def>T</def><sym>.</sym><def></def><kwd>compose</kwd><def></def><sym>(</sym><def>a</def><sym>.</sym><def>z</def><sym>,</sym><def>b</def><sym>)</sym><br />
<def></def><kwa>end</kwa><br />
<def></def><br />
<kwa>function</kwa> <def>P</def><sym>.</sym><def></def><kwd>digit</kwd><def></def><sym>(</sym><def>a</def><sym>)</sym><br />
<def></def>   <kwa>return</kwa> <def>T</def><sym>.</sym><def></def><kwd>extract</kwd><def></def><sym>(</sym><def>a</def><sym>.</sym><def>z</def><sym>,</sym><def></def><num>3</num><def></def><sym>)</sym><br />
<def></def><kwa>end</kwa><br />
<def></def><br />
<kwa>function</kwa> <def>P</def><sym>.</sym><def></def><kwd>isSafe</kwd><def></def><sym>(</sym><def>a</def><sym>,</sym><def>j</def><sym>)</sym><br />
<def></def>   <kwa>return</kwa> <def>j</def> <sym>==</sym> <def>T</def><sym>.</sym><def></def><kwd>extract</kwd><def></def><sym>(</sym><def>a</def><sym>.</sym><def>z</def><sym>,</sym><def></def><num>4</num><def></def><sym>)</sym><br />
<def></def><kwa>end</kwa><br />
<def></def><br />
<kwa>function</kwa> <def>P</def><sym>.</sym><def></def><kwb>next</kwb><def></def><sym>(</sym><def>a</def><sym>)</sym><br />
<def></def>   <kwa>local</kwa> <def>y<br />
   y</def> <sym>=</sym> <def>P</def><sym>.</sym><def></def><kwd>digit</kwd><def></def><sym>(</sym><def>a</def><sym>)</sym><br />
<def></def>   <kwa>if</kwa> <def>P</def><sym>.</sym><def></def><kwd>isSafe</kwd><def></def><sym>(</sym><def>a</def><sym>,</sym><def>y</def><sym>)</sym> <def></def><kwa>then</kwa><br />
<def>      a</def><sym>.</sym><def>z</def> <sym>=</sym> <def>P</def><sym>.</sym><def></def><kwd>produce</kwd><def></def><sym>(</sym><def>a</def><sym>,</sym><def>y</def><sym>)</sym><br />
<def></def>      <kwa>return</kwa> <def></def><kwb>tostring</kwb><def></def><sym>(</sym><def>y</def><sym>)</sym><br />
<def></def>   <kwa>else</kwa><br />
<def>      a</def><sym>.</sym><def>z</def> <sym>=</sym> <def>P</def><sym>.</sym><def></def><kwd>consume</kwd><def></def><sym>(</sym><def>a</def><sym>,</sym><def>T</def><sym>.</sym><def></def><kwb>next</kwb><def></def><sym>(</sym><def>a</def><sym>.</sym><def>x</def><sym>))</sym><br />
<def></def>      <kwa>return</kwa> <def>P</def><sym>.</sym><def></def><kwb>next</kwb><def></def><sym>(</sym><def>a</def><sym>)</sym><br />
<def></def>   <kwa>end</kwa><br />
<def></def><kwa>end</kwa><br />
<def></def><br />
<br />
<slc>-- Main</slc><br />
<def>n</def> <sym>=</sym> <def></def><kwb>tonumber</kwb><def></def><sym>(</sym><def>arg</def> <kwa>and</kwa> <def>arg</def><sym>[</sym><def></def><num>1</num><def></def><sym>])</sym> <def></def><kwa>or</kwa> <def></def><num>27</num><br />
<def><br />
i</def> <sym>=</sym> <def></def><num>0</num><br />
<def>length</def> <sym>=</sym> <def></def><num>10</num><br />
<def>pidigit</def> <sym>=</sym> <def>P</def><sym>.</sym><def></def><kwd>new</kwd><def></def><sym>()</sym><br />
<def></def><br />
<kwa>while</kwa> <def>n</def> <sym>&gt;</sym> <def></def><num>0</num> <def></def><kwa>do</kwa><br />
<def></def>   <kwa>if</kwa> <def>n</def> <sym>&lt;</sym> <def>length</def> <kwa>then</kwa><br />
<def></def>      <kwa>for</kwa> <def>_</def> <sym>=</sym> <def></def><num>1</num><def></def><sym>,</sym><def>n</def> <kwa>do</kwa> <def>io</def><sym>.</sym><def></def><kwb>write</kwb><def></def><sym>(</sym> <def>P</def><sym>.</sym><def></def><kwb>next</kwb><def></def><sym>(</sym><def>pidigit</def><sym>) )</sym> <def></def><kwa>end</kwa><br />
<def></def>      <kwa>for</kwa> <def>_</def> <sym>=</sym> <def></def><num>1</num><def></def><sym>,</sym><def>length</def> <sym>-</sym> <def>n</def> <kwa>do</kwa> <def>io</def><sym>.</sym><def></def><kwb>write</kwb><def></def><sym>(</sym> <def></def><str>' '</str><def></def> <sym>)</sym> <def></def><kwa>end</kwa><br />
<def>      i</def> <sym>=</sym> <def>i</def> <sym>+</sym> <def>n</def><br />
   <kwa>else</kwa><br />
<def></def>      <kwa>for</kwa> <def>_</def> <sym>=</sym> <def></def><num>1</num><def></def><sym>,</sym><def>length</def> <kwa>do</kwa> <def>io</def><sym>.</sym><def></def><kwb>write</kwb><def></def><sym>(</sym> <def>P</def><sym>.</sym><def></def><kwb>next</kwb><def></def><sym>(</sym><def>pidigit</def><sym>) )</sym> <def></def><kwa>end</kwa><br />
<def>      i</def> <sym>=</sym> <def>i</def> <sym>+</sym> <def>length</def><br />
   <kwa>end</kwa><br />
<def>   io</def><sym>.</sym><def></def><kwb>write</kwb><def></def><sym>(</sym><def></def><str>'</str><esc>\t</esc><str>:'</str><def></def><sym>,</sym> <def>i</def><sym>,</sym> <def></def><str>'</str><esc>\n</esc><str>'</str><def></def><sym>)</sym><br />
<def>   n</def> <sym>=</sym> <def>n</def> <sym>-</sym> <def>length</def><br />
<kwa>end</kwa><br />
<def></def><br />
<slc>-- eof</slc><br />
<def></def><br />
</source>
