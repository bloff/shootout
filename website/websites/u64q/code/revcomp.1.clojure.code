<span class="hl slc">;;   The Computer Language Benchmarks Game</span>
<span class="hl slc">;;   http://shootout.alioth.debian.org/</span>

<span class="hl slc">;; contributed by Andy Fingerhut</span>

<span class="hl sym">(</span>ns revcomp
  <span class="hl sym">(:</span>gen<span class="hl sym">-</span>class<span class="hl sym">))</span>

<span class="hl sym">(</span>set<span class="hl sym">! *</span>warn<span class="hl sym">-</span>on<span class="hl sym">-</span>reflection<span class="hl sym">*</span> true<span class="hl sym">)</span>


<span class="hl sym">(</span>defn fasta<span class="hl sym">-</span>slurp<span class="hl sym">-</span>br
  <span class="hl str">&quot;Reads the supplied BufferedReader using the encoding enc and</span>
<span class="hl str">   returns a vector of two strings and a boolean.  The first string is</span>
<span class="hl str">   a FASTA description line (without the leading &gt; character), and the</span>
<span class="hl str">   second string is the DNA sequence following the description line.</span>
<span class="hl str">   The boolean is whether there are more DNA sequences to read from</span>
<span class="hl str">   the file after the one returned.</span>
<span class="hl str"></span>
<span class="hl str">   Note: It consumes the next &gt; for the next FASTA sequence if there</span>
<span class="hl str">   is another one, but subsequent calls to this same function handle</span>
<span class="hl str">   that correctly.&quot;</span>
  <span class="hl sym">([</span>#^java.io.BufferedReader r<span class="hl sym">]</span>
     <span class="hl sym">(</span>fasta<span class="hl sym">-</span>slurp<span class="hl sym">-</span>br r <span class="hl sym">(</span>.name <span class="hl sym">(</span>java.nio.charset.Charset<span class="hl sym">/</span>defaultCharset<span class="hl sym">))))</span>
  <span class="hl sym">([</span>#^java.io.BufferedReader r #^String enc<span class="hl sym">]</span>
     <span class="hl sym">(</span>let <span class="hl sym">[</span>desc<span class="hl sym">-</span>sb <span class="hl sym">(</span>new StringBuilder<span class="hl sym">)</span>
           dna<span class="hl sym">-</span>str<span class="hl sym">-</span>sb <span class="hl sym">(</span>new StringBuilder<span class="hl sym">)</span>
           fasta<span class="hl sym">-</span>desc<span class="hl sym">-</span>line<span class="hl sym">-</span>c <span class="hl sym">(</span>int \<span class="hl sym">&gt;)</span>
           nl<span class="hl sym">-</span>c <span class="hl sym">(</span>int \newline<span class="hl sym">)]</span>
       <span class="hl sym">(</span>.append desc<span class="hl sym">-</span>sb \<span class="hl sym">&gt;)</span>
       <span class="hl sym">(</span>loop <span class="hl sym">[</span>c <span class="hl sym">(</span>int <span class="hl sym">(</span>.read r<span class="hl sym">))</span>
              save<span class="hl sym">-</span>c <span class="hl sym">(</span>not<span class="hl sym">=</span> c fasta<span class="hl sym">-</span>desc<span class="hl sym">-</span>line<span class="hl sym">-</span>c<span class="hl sym">)]</span>
         <span class="hl sym">(</span>cond
           <span class="hl sym">(</span>neg? c<span class="hl sym">)    [(</span>str desc<span class="hl sym">-</span>sb<span class="hl sym">) (</span>str dna<span class="hl sym">-</span>str<span class="hl sym">-</span>sb<span class="hl sym">)</span> false<span class="hl sym">]</span>
           <span class="hl sym">(==</span> c nl<span class="hl sym">-</span>c<span class="hl sym">)</span> nil  <span class="hl slc">;; finished reading desc line.  Go to next loop.</span>
           <span class="hl sym">:</span>else       <span class="hl sym">(</span>do
                         <span class="hl sym">(</span>when save<span class="hl sym">-</span>c
                           <span class="hl sym">(</span>.append desc<span class="hl sym">-</span>sb <span class="hl sym">(</span>char c<span class="hl sym">)))</span>
                         <span class="hl sym">(</span>recur <span class="hl sym">(</span>int <span class="hl sym">(</span>.read r<span class="hl sym">))</span> true<span class="hl sym">))))</span>
       <span class="hl sym">(</span>loop <span class="hl sym">[</span>c <span class="hl sym">(</span>int <span class="hl sym">(</span>.read r<span class="hl sym">))]</span>
         <span class="hl sym">(</span>cond
           <span class="hl sym">(</span>neg? c<span class="hl sym">)    [(</span>str desc<span class="hl sym">-</span>sb<span class="hl sym">) (</span>str dna<span class="hl sym">-</span>str<span class="hl sym">-</span>sb<span class="hl sym">)</span> false<span class="hl sym">]</span>
           <span class="hl sym">(==</span> c nl<span class="hl sym">-</span>c<span class="hl sym">) (</span>recur <span class="hl sym">(</span>int <span class="hl sym">(</span>.read r<span class="hl sym">)))</span>
           <span class="hl sym">(==</span> c fasta<span class="hl sym">-</span>desc<span class="hl sym">-</span>line<span class="hl sym">-</span>c<span class="hl sym">)</span>
                       <span class="hl sym">[(</span>str desc<span class="hl sym">-</span>sb<span class="hl sym">) (</span>str dna<span class="hl sym">-</span>str<span class="hl sym">-</span>sb<span class="hl sym">)</span> true<span class="hl sym">]</span>
           <span class="hl sym">:</span>else       <span class="hl sym">(</span>do
                         <span class="hl sym">(</span>.append dna<span class="hl sym">-</span>str<span class="hl sym">-</span>sb <span class="hl sym">(</span>char c<span class="hl sym">))</span>
                         <span class="hl sym">(</span>recur <span class="hl sym">(</span>int <span class="hl sym">(</span>.read r<span class="hl sym">)))))))))</span>


<span class="hl sym">(</span>def complement<span class="hl sym">-</span>dna<span class="hl sym">-</span>char<span class="hl sym">-</span>map
     <span class="hl sym">{</span>\w \W<span class="hl sym">,</span> \W \W<span class="hl sym">,</span>
      \s \S<span class="hl sym">,</span> \S \S<span class="hl sym">,</span>
      \a \T<span class="hl sym">,</span> \A \T<span class="hl sym">,</span>
      \t \A<span class="hl sym">,</span> \T \A<span class="hl sym">,</span>
      \u \A<span class="hl sym">,</span> \U \A<span class="hl sym">,</span>
      \g \C<span class="hl sym">,</span> \G \C<span class="hl sym">,</span>
      \c \G<span class="hl sym">,</span> \C \G<span class="hl sym">,</span>
      \y \R<span class="hl sym">,</span> \Y \R<span class="hl sym">,</span>
      \r \Y<span class="hl sym">,</span> \R \Y<span class="hl sym">,</span>
      \k \M<span class="hl sym">,</span> \K \M<span class="hl sym">,</span>
      \m \K<span class="hl sym">,</span> \M \K<span class="hl sym">,</span>
      \b \V<span class="hl sym">,</span> \B \V<span class="hl sym">,</span>
      \d \H<span class="hl sym">,</span> \D \H<span class="hl sym">,</span>
      \h \D<span class="hl sym">,</span> \H \D<span class="hl sym">,</span>
      \v \B<span class="hl sym">,</span> \V \B<span class="hl sym">,</span>
      \n \N<span class="hl sym">,</span> \N \N <span class="hl sym">})</span>


<span class="hl sym">(</span>defn make<span class="hl sym">-</span>vec<span class="hl sym">-</span>char<span class="hl sym">-</span>mapper <span class="hl sym">[</span>cmap<span class="hl sym">]</span>
  <span class="hl sym">(</span>into <span class="hl sym">[] (</span>map <span class="hl sym">(</span>fn <span class="hl sym">[</span>code<span class="hl sym">]</span>
                  <span class="hl sym">(</span>if <span class="hl sym">(</span>contains? cmap <span class="hl sym">(</span>char code<span class="hl sym">))</span>
                    <span class="hl sym">(</span>int <span class="hl sym">(</span>cmap <span class="hl sym">(</span>char code<span class="hl sym">)))</span>
                    code<span class="hl sym">))</span>
                <span class="hl sym">(</span>range <span class="hl num">256</span><span class="hl sym">))))</span>


<span class="hl sym">(</span>defn println<span class="hl sym">-</span>string<span class="hl sym">-</span>to<span class="hl sym">-</span>buffered<span class="hl sym">-</span>writer <span class="hl sym">[</span>#^java.io.BufferedWriter bw
                                         #^java.lang.String s<span class="hl sym">]</span>
  <span class="hl sym">(</span>. bw write <span class="hl sym">(</span>.toCharArray s<span class="hl sym">)</span> <span class="hl num">0</span> <span class="hl sym">(</span>count s<span class="hl sym">))</span>
  <span class="hl sym">(</span>. bw newLine<span class="hl sym">))</span>


<span class="hl sym">(</span>defn print<span class="hl sym">-</span>reverse<span class="hl sym">-</span>complement<span class="hl sym">-</span>of<span class="hl sym">-</span>str<span class="hl sym">-</span>in<span class="hl sym">-</span>lines <span class="hl sym">[</span>#^java.io.BufferedWriter bw
                                                #^java.lang.String s
                                                complement<span class="hl sym">-</span>fn
                                                max<span class="hl sym">-</span>len<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>comp complement<span class="hl sym">-</span>fn
        len <span class="hl sym">(</span>int <span class="hl sym">(</span>count s<span class="hl sym">))</span>
        max<span class="hl sym">-</span>len <span class="hl sym">(</span>int max<span class="hl sym">-</span>len<span class="hl sym">)]</span>
    <span class="hl sym">(</span>when <span class="hl sym">(&gt;</span> len <span class="hl num">0</span><span class="hl sym">)</span>
      <span class="hl sym">(</span>loop <span class="hl sym">[</span>start <span class="hl sym">(</span>int <span class="hl sym">(</span>dec len<span class="hl sym">))</span>
             to<span class="hl sym">-</span>print<span class="hl sym">-</span>before<span class="hl sym">-</span>nl <span class="hl sym">(</span>int max<span class="hl sym">-</span>len<span class="hl sym">)]</span>
        <span class="hl sym">(</span>let <span class="hl sym">[</span>next<span class="hl sym">-</span>start <span class="hl sym">(</span>int <span class="hl sym">(</span>dec start<span class="hl sym">))</span>
              next<span class="hl sym">-</span>to<span class="hl sym">-</span>print<span class="hl sym">-</span>before<span class="hl sym">-</span>nl <span class="hl sym">(</span>int <span class="hl sym">(</span>dec to<span class="hl sym">-</span>print<span class="hl sym">-</span>before<span class="hl sym">-</span>nl<span class="hl sym">))</span>
              in<span class="hl sym">-</span>c <span class="hl sym">(</span>int <span class="hl sym">(</span>. s charAt start<span class="hl sym">))</span>
              out<span class="hl sym">-</span>c <span class="hl sym">(</span>int <span class="hl sym">(</span>comp in<span class="hl sym">-</span>c<span class="hl sym">))]</span>
          <span class="hl sym">(</span>. bw write out<span class="hl sym">-</span>c<span class="hl sym">)</span>
          <span class="hl sym">(</span>if <span class="hl sym">(</span>zero? next<span class="hl sym">-</span>to<span class="hl sym">-</span>print<span class="hl sym">-</span>before<span class="hl sym">-</span>nl<span class="hl sym">)</span>
            <span class="hl sym">(</span>do
              <span class="hl sym">(</span>. bw newLine<span class="hl sym">)</span>
              <span class="hl sym">(</span>when <span class="hl sym">(</span>not <span class="hl sym">(</span>zero? start<span class="hl sym">))</span>
                <span class="hl sym">(</span>recur next<span class="hl sym">-</span>start max<span class="hl sym">-</span>len<span class="hl sym">)))</span>
            <span class="hl sym">(</span>do
              <span class="hl sym">(</span>when <span class="hl sym">(</span>not <span class="hl sym">(</span>zero? start<span class="hl sym">))</span>
                <span class="hl sym">(</span>recur next<span class="hl sym">-</span>start next<span class="hl sym">-</span>to<span class="hl sym">-</span>print<span class="hl sym">-</span>before<span class="hl sym">-</span>nl<span class="hl sym">))))))</span>
      <span class="hl slc">;; Need one more newline at the end if the string was not a</span>
      <span class="hl slc">;; multiple of max-len characters.</span>
      <span class="hl sym">(</span>when <span class="hl sym">(</span>not<span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl sym">(</span>rem len max<span class="hl sym">-</span>len<span class="hl sym">))</span>
        <span class="hl sym">(</span>. bw newLine<span class="hl sym">))</span>
      <span class="hl sym">)))</span>


<span class="hl sym">(</span>defn <span class="hl sym">-</span>main <span class="hl sym">[&amp;</span> args<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>max<span class="hl sym">-</span>dna<span class="hl sym">-</span>chars<span class="hl sym">-</span>per<span class="hl sym">-</span>line <span class="hl num">60</span>
        br <span class="hl sym">(</span>java.io.BufferedReader. <span class="hl sym">*</span>in<span class="hl sym">*)</span>
        bw <span class="hl sym">(</span>java.io.BufferedWriter. <span class="hl sym">*</span>out<span class="hl sym">* (*</span> <span class="hl num">16 8192</span><span class="hl sym">))</span>
        <span class="hl slc">;; We could use the map complement-dna-char-map instead of</span>
        <span class="hl slc">;; complement-dna-char-fn, but when I tested that, the program</span>
        <span class="hl slc">;; spent a lot of time running the hashCode method on</span>
        <span class="hl slc">;; characters.  I'm hoping this is faster.</span>
        complement<span class="hl sym">-</span>dna<span class="hl sym">-</span>char<span class="hl sym">-</span>vec <span class="hl sym">(</span>make<span class="hl sym">-</span>vec<span class="hl sym">-</span>char<span class="hl sym">-</span>mapper complement<span class="hl sym">-</span>dna<span class="hl sym">-</span>char<span class="hl sym">-</span>map<span class="hl sym">)]</span>
    <span class="hl sym">(</span>loop <span class="hl sym">[[</span>desc<span class="hl sym">-</span>str dna<span class="hl sym">-</span>seq<span class="hl sym">-</span>str more<span class="hl sym">] (</span>fasta<span class="hl sym">-</span>slurp<span class="hl sym">-</span>br br<span class="hl sym">)]</span>
      <span class="hl sym">(</span>println<span class="hl sym">-</span>string<span class="hl sym">-</span>to<span class="hl sym">-</span>buffered<span class="hl sym">-</span>writer bw desc<span class="hl sym">-</span>str<span class="hl sym">)</span>
      <span class="hl sym">(</span>print<span class="hl sym">-</span>reverse<span class="hl sym">-</span>complement<span class="hl sym">-</span>of<span class="hl sym">-</span>str<span class="hl sym">-</span>in<span class="hl sym">-</span>lines bw dna<span class="hl sym">-</span>seq<span class="hl sym">-</span>str
                                                complement<span class="hl sym">-</span>dna<span class="hl sym">-</span>char<span class="hl sym">-</span>vec
                                                max<span class="hl sym">-</span>dna<span class="hl sym">-</span>chars<span class="hl sym">-</span>per<span class="hl sym">-</span>line<span class="hl sym">)</span>
      <span class="hl sym">(</span>when more
        <span class="hl sym">(</span>recur <span class="hl sym">(</span>fasta<span class="hl sym">-</span>slurp<span class="hl sym">-</span>br br<span class="hl sym">))))</span>
    <span class="hl sym">(</span>. bw flush<span class="hl sym">))</span>
  <span class="hl sym">(</span>. System <span class="hl sym">(</span>exit <span class="hl num">0</span><span class="hl sym">)))</span>
