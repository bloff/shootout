<source>
<def></def><com>/* The  Computer Language Shootout</com><br />
<com>   http://shootout.alioth.debian.org/</com><br />
<com>   contributed by Robert F. Tobler to perform actual computations on byte arrays</com><br />
<com>*/</com><def></def><br />
<br />
<kwa>using</kwa> <def>System</def><sym>;</sym><br />
<def></def><kwa>using</kwa> <def>System</def><sym>.</sym><def>IO</def><sym>;</sym><br />
<def></def><kwa>using</kwa> <def>System</def><sym>.</sym><def>Text</def><sym>;</sym><br />
<def></def><kwa>using</kwa> <def>System</def><sym>.</sym><def>Collections</def><sym>;</sym><br />
<def></def><br />
<kwa>class</kwa> <def>revcomp</def><br />
<sym>{</sym><br />
<def></def>   <kwa>static</kwa> <def></def><kwb>void</kwb> <def></def><kwd>Main</kwd><def></def><sym>(</sym><def></def><kwb>string</kwb><def></def><sym>[]</sym> <def>args</def><sym>){</sym><br />
<def></def>      <kwd>InitializeComplements</kwd><def></def><sym>();</sym><br />
<def><br />
      ArrayList seq</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>ArrayList</kwd><def></def><sym>();</sym><br />
<def>      String line</def><sym>,</sym> <def>desc</def> <sym>=</sym> <def></def><str>&quot;&quot;</str><def></def><sym>;</sym><br />
<def></def><br />
      <kwa>using</kwa> <def></def><sym>(</sym><def>StreamReader r</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>StreamReader</kwd><def></def><sym>(</sym><def>Console</def><sym>.</sym><def></def><kwd>OpenStandardInput</kwd><def></def><sym>())){</sym><br />
<def></def>         <kwa>using</kwa> <def></def><sym>(</sym><def>StreamWriter w</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>StreamWriter</kwd><def></def><sym>(</sym><def>Console</def><sym>.</sym><def></def><kwd>OpenStandardOutput</kwd><def></def><sym>())){</sym><br />
<def></def>            <kwa>while</kwa> <def></def><sym>((</sym><def>line</def> <sym>=</sym> <def>r</def><sym>.</sym><def></def><kwd>ReadLine</kwd><def></def><sym>()) !=</sym> <def></def><kwa>null</kwa><def></def><sym>) {</sym><br />
<def></def>               <kwb>char</kwb> <def>c</def> <sym>=</sym> <def>line</def><sym>[</sym><def></def><num>0</num><def></def><sym>];</sym><br />
<def></def>               <kwa>if</kwa> <def></def><sym>(</sym><def>c</def> <sym>==</sym> <def></def><str>'&gt;'</str><def></def><sym>){</sym><br />
<def></def>                  <kwa>if</kwa> <def></def><sym>(</sym><def>desc</def><sym>.</sym><def>Length</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>){</sym><br />
<def></def>                     <kwd>WriteReverseSeq</kwd><def></def><sym>(</sym><def>desc</def><sym>,</sym> <def>seq</def><sym>,</sym> <def>w</def><sym>);</sym><br />
<def>                     seq</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwd>ArrayList</kwd><def></def><sym>();</sym><br />
<def></def>                  <sym>}</sym><br />
<def>                  desc</def> <sym>=</sym> <def>line</def><sym>;</sym><br />
<def></def>               <sym>}</sym><br />
<def></def>               <kwa>else if</kwa> <def></def><sym>(</sym><def>c</def> <sym>!=</sym> <def></def><str>';'</str><def></def><sym>){</sym><br />
<def></def>                  <kwb>byte</kwb><def></def><sym>[]</sym> <def>byteLine</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwb>byte</kwb><def></def><sym>[</sym><def>line</def><sym>.</sym><def>Length</def><sym>];</sym><br />
<def></def>                  <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def>line</def><sym>.</sym><def>Length</def><sym>;</sym> <def>i</def><sym>++)</sym><br />
<def>                     byteLine</def><sym>[</sym><def>i</def><sym>] = (</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def>line</def><sym>[</sym><def>i</def><sym>];</sym><br />
<def>                  seq</def><sym>.</sym><def></def><kwd>Add</kwd><def></def><sym>(</sym><def>byteLine</def><sym>);</sym><br />
<def></def>               <sym>}</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>seq</def><sym>.</sym><def>Count</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>){</sym><br />
<def></def>               <kwd>WriteReverseSeq</kwd><def></def><sym>(</sym><def>desc</def><sym>,</sym> <def>seq</def><sym>,</sym> <def>w</def><sym>);</sym><br />
<def></def>            <sym>}</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>static</kwa> <def></def><kwb>byte</kwb><def></def><sym>[]</sym> <def>iubComp</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwb>byte</kwb><def></def><sym>[</sym><def></def><num>256</num><def></def><sym>];</sym><br />
<def></def>   <kwa>static</kwa> <def></def><kwb>void</kwb> <def></def><kwd>InitializeComplements</kwd><def></def><sym>(){</sym><br />
<def></def>      <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>byte</kwb> <def>i</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>i</def> <sym>&lt;</sym> <def></def><num>255</num><def></def><sym>;</sym> <def>i</def><sym>++)</sym> <def>iubComp</def><sym>[</sym><def>i</def><sym>] =</sym> <def>i</def><sym>;</sym><br />
<def><br />
      iubComp</def><sym>[(</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'A'</str><def></def><sym>] = (</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'T'</str><def></def><sym>;</sym> <def>iubComp</def><sym>[(</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'a'</str><def></def><sym>] = (</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'T'</str><def></def><sym>;</sym><br />
<def>      iubComp</def><sym>[(</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'B'</str><def></def><sym>] = (</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'V'</str><def></def><sym>;</sym> <def>iubComp</def><sym>[(</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'b'</str><def></def><sym>] = (</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'V'</str><def></def><sym>;</sym><br />
<def>      iubComp</def><sym>[(</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'C'</str><def></def><sym>] = (</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'G'</str><def></def><sym>;</sym> <def>iubComp</def><sym>[(</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'c'</str><def></def><sym>] = (</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'G'</str><def></def><sym>;</sym><br />
<def>      iubComp</def><sym>[(</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'D'</str><def></def><sym>] = (</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'H'</str><def></def><sym>;</sym> <def>iubComp</def><sym>[(</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'d'</str><def></def><sym>] = (</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'H'</str><def></def><sym>;</sym><br />
<def>      iubComp</def><sym>[(</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'G'</str><def></def><sym>] = (</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'C'</str><def></def><sym>;</sym> <def>iubComp</def><sym>[(</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'g'</str><def></def><sym>] = (</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'C'</str><def></def><sym>;</sym><br />
<def>      iubComp</def><sym>[(</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'H'</str><def></def><sym>] = (</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'D'</str><def></def><sym>;</sym> <def>iubComp</def><sym>[(</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'h'</str><def></def><sym>] = (</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'D'</str><def></def><sym>;</sym><br />
<def>      iubComp</def><sym>[(</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'K'</str><def></def><sym>] = (</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'M'</str><def></def><sym>;</sym> <def>iubComp</def><sym>[(</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'k'</str><def></def><sym>] = (</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'M'</str><def></def><sym>;</sym><br />
<def>      iubComp</def><sym>[(</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'M'</str><def></def><sym>] = (</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'K'</str><def></def><sym>;</sym> <def>iubComp</def><sym>[(</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'m'</str><def></def><sym>] = (</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'K'</str><def></def><sym>;</sym><br />
<def>      iubComp</def><sym>[(</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'R'</str><def></def><sym>] = (</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'Y'</str><def></def><sym>;</sym> <def>iubComp</def><sym>[(</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'r'</str><def></def><sym>] = (</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'Y'</str><def></def><sym>;</sym><br />
<def>      iubComp</def><sym>[(</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'T'</str><def></def><sym>] = (</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'A'</str><def></def><sym>;</sym> <def>iubComp</def><sym>[(</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'t'</str><def></def><sym>] = (</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'A'</str><def></def><sym>;</sym><br />
<def>      iubComp</def><sym>[(</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'V'</str><def></def><sym>] = (</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'B'</str><def></def><sym>;</sym> <def>iubComp</def><sym>[(</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'v'</str><def></def><sym>] = (</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'B'</str><def></def><sym>;</sym><br />
<def>      iubComp</def><sym>[(</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'Y'</str><def></def><sym>] = (</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'R'</str><def></def><sym>;</sym> <def>iubComp</def><sym>[(</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'y'</str><def></def><sym>] = (</sym><def></def><kwb>byte</kwb><def></def><sym>)</sym><def></def><str>'R'</str><def></def><sym>;</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><br />
   <kwa>static</kwa> <def></def><kwb>void</kwb> <def></def><kwd>WriteReverseSeq</kwd><def></def><sym>(</sym><def>String desc</def><sym>,</sym> <def>ArrayList b</def><sym>,</sym> <def>StreamWriter s</def><sym>) {</sym><br />
<def></def>      <kwb>const int</kwb> <def>LineLength</def> <sym>=</sym> <def></def><num>60</num><def></def><sym>;</sym><br />
<def></def>      <kwb>char</kwb><def></def><sym>[]</sym> <def>buffer</def> <sym>=</sym> <def></def><kwa>new</kwa> <def></def><kwb>char</kwb><def></def><sym>[</sym><def>LineLength</def><sym>];</sym><br />
<def>      s</def><sym>.</sym><def></def><kwd>WriteLine</kwd><def></def><sym>(</sym><def>desc</def><sym>);</sym><br />
<def></def><br />
      <kwb>int</kwb> <def>ci</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>;</sym><br />
<def></def>      <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>rli</def> <sym>=</sym> <def>b</def><sym>.</sym><def>Count</def><sym>-</sym><def></def><num>1</num><def></def><sym>;</sym> <def>rli</def> <sym>&gt;=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>rli</def><sym>--) {</sym><br />
<def></def>         <kwb>byte</kwb><def></def><sym>[]</sym> <def>line</def> <sym>= (</sym><def></def><kwb>byte</kwb><def></def><sym>[])</sym><def>b</def><sym>[</sym><def>rli</def><sym>];</sym><br />
<def></def>         <kwa>for</kwa> <def></def><sym>(</sym><def></def><kwb>int</kwb> <def>rci</def> <sym>=</sym> <def>line</def><sym>.</sym><def>Length</def><sym>-</sym><def></def><num>1</num><def></def><sym>;</sym> <def>rci</def> <sym>&gt;=</sym> <def></def><num>0</num><def></def><sym>;</sym> <def>rci</def><sym>--) {</sym><br />
<def>            buffer</def><sym>[</sym><def>ci</def><sym>++] = (</sym><def></def><kwb>char</kwb><def></def><sym>)</sym><def>iubComp</def><sym>[</sym><def>line</def><sym>[</sym><def>rci</def><sym>]];</sym><br />
<def></def>            <kwa>if</kwa> <def></def><sym>(</sym><def>ci</def> <sym>&gt;=</sym> <def>LineLength</def><sym>) {</sym> <def>s</def><sym>.</sym><def></def><kwd>WriteLine</kwd><def></def><sym>(</sym><def>buffer</def><sym>);</sym> <def>ci</def> <sym>=</sym> <def></def><num>0</num><def></def><sym>; }</sym><br />
<def></def>         <sym>}</sym><br />
<def></def>      <sym>}</sym><br />
<def></def>      <kwa>if</kwa> <def></def><sym>(</sym><def>ci</def> <sym>&gt;</sym> <def></def><num>0</num><def></def><sym>) {</sym> <def>s</def><sym>.</sym><def></def><kwd>WriteLine</kwd><def></def><sym>(</sym><def>buffer</def><sym>,</sym> <def></def><num>0</num><def></def><sym>,</sym> <def>ci</def><sym>); }</sym><br />
<def></def>   <sym>}</sym><br />
<def></def><sym>}</sym><br />
<def></def><br />
</source>
