<source>
<def></def><slc>-----------------------------------------</slc><br />
<def></def><slc>-- The Great Computer Language Shootout</slc><br />
<def></def><slc>-- http://shootout.alioth.debian.org/</slc><br />
<def></def><slc>--</slc><br />
<def></def><slc>-- Contributed by Jim Rogers</slc><br />
<def></def><slc>-----------------------------------------</slc><br />
<def></def><kwa>package</kwa> <def>Spectral_Utils</def> <kwa>is</kwa><br />
<def></def>   <kwa>type</kwa> <def>Matrix</def> <kwa>is array</kwa><def></def><sym>(</sym><def></def><kwb>Natural</kwb> <def></def><kwa>range</kwa> <def></def><sym>&lt;&gt;)</sym> <def></def><kwa>of</kwa> <def></def><kwb>Long_Float</kwb><def></def><sym>;</sym><br />
<def></def><br />
   <kwa>function</kwa> <def>Eval_A</def><sym>(</sym><def>I</def><sym>,</sym> <def>J</def> <sym>:</sym> <def></def><kwb>Integer</kwb><def></def><sym>)</sym> <def></def><kwa>return</kwa> <def></def><kwb>Long_Float</kwb><def></def><sym>;</sym><br />
<def></def>   <kwa>procedure</kwa> <def>Eval_A_Times</def><sym>(</sym><def>U</def> <sym>:</sym> <def>Matrix</def><sym>;</sym> <def>Au</def> <sym>:</sym> <def></def><kwa>out</kwa> <def>Matrix</def><sym>);</sym><br />
<def></def>   <kwa>procedure</kwa> <def>Eval_At_Times</def><sym>(</sym><def>U</def> <sym>:</sym> <def>Matrix</def><sym>;</sym> <def>Au</def> <sym>:</sym> <def></def><kwa>out</kwa> <def>Matrix</def><sym>);</sym><br />
<def></def>   <kwa>procedure</kwa> <def>Eval_Ata_Times_U</def><sym>(</sym><def>U</def> <sym>:</sym> <def>Matrix</def><sym>;</sym> <def>Atau</def> <sym>:</sym> <def></def><kwa>out</kwa> <def>Matrix</def><sym>);</sym><br />
<def></def><kwa>end</kwa> <def>Spectral_Utils</def><sym>;</sym><br />
<def></def><br />
<slc>-----------------------------------------</slc><br />
<def></def><slc>-- The Great Computer Language Shootout</slc><br />
<def></def><slc>--</slc><br />
<def></def><slc>-- Contributed by Jim Rogers</slc><br />
<def></def><slc>-----------------------------------------</slc><br />
<def></def><kwa>package body</kwa> <def>Spectral_Utils</def> <kwa>is</kwa><br />
<def></def><br />
   <kwa>function</kwa> <def>Eval_A</def> <sym>(</sym><def>I</def><sym>,</sym> <def>J</def> <sym>:</sym> <def></def><kwb>Integer</kwb><def></def><sym>)</sym> <def></def><kwa>return</kwa> <def></def><kwb>Long_Float</kwb> <def></def><kwa>is</kwa><br />
<def></def>   <kwa>begin</kwa><br />
<def></def>      <kwa>return</kwa> <def></def><num>1.0</num> <def></def><sym>/</sym> <def></def><kwb>Long_Float</kwb><def></def><sym>((</sym><def>I</def> <sym>+</sym> <def>J</def><sym>) * (</sym><def>I</def> <sym>+</sym> <def>J</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>) /</sym><def></def><num>2</num> <def></def><sym>+</sym> <def>I</def> <sym>+</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>   <kwa>end</kwa> <def>Eval_A</def><sym>;</sym><br />
<def></def><br />
   <kwa>procedure</kwa> <def>Eval_A_Times</def> <sym>(</sym><def>U</def> <sym>:</sym> <def>Matrix</def><sym>;</sym> <def>Au</def> <sym>:</sym> <def></def><kwa>out</kwa> <def>Matrix</def><sym>)</sym> <def></def><kwa>is</kwa><br />
<def></def>   <kwa>begin</kwa><br />
<def></def>      <kwa>for</kwa> <def>I</def> <kwa>in</kwa> <def>Au</def><sym>'</sym><def></def><kwa>range loop</kwa><br />
<def>         Au</def><sym>(</sym><def>I</def><sym>) :=</sym> <def></def><num>0.0</num><def></def><sym>;</sym><br />
<def></def>         <kwa>for</kwa> <def>J</def> <kwa>in</kwa> <def>U</def><sym>'</sym><def></def><kwa>range loop</kwa><br />
<def>            Au</def><sym>(</sym><def>I</def><sym>) :=</sym> <def>Au</def><sym>(</sym><def>I</def><sym>) +</sym> <def>Eval_A</def><sym>(</sym><def>I</def><sym>,</sym> <def>J</def><sym>) *</sym> <def>U</def><sym>(</sym><def>J</def><sym>);</sym><br />
<def></def>         <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def></def>      <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def></def>   <kwa>end</kwa> <def>Eval_A_Times</def><sym>;</sym><br />
<def></def><br />
   <kwa>procedure</kwa> <def>Eval_At_Times</def> <sym>(</sym><def>U</def> <sym>:</sym> <def>Matrix</def><sym>;</sym> <def>Au</def> <sym>:</sym> <def></def><kwa>out</kwa> <def>Matrix</def><sym>)</sym> <def></def><kwa>is</kwa><br />
<def></def>   <kwa>begin</kwa><br />
<def></def>      <kwa>for</kwa> <def>I</def> <kwa>in</kwa> <def>Au</def><sym>'</sym><def></def><kwa>range loop</kwa><br />
<def>         Au</def><sym>(</sym><def>I</def><sym>) :=</sym> <def></def><num>0.0</num><def></def><sym>;</sym><br />
<def></def>         <kwa>for</kwa> <def>J</def> <kwa>in</kwa> <def>U</def><sym>'</sym><def></def><kwa>range loop</kwa><br />
<def>            Au</def><sym>(</sym><def>I</def><sym>) :=</sym> <def>Au</def><sym>(</sym><def>I</def><sym>) +</sym> <def>Eval_A</def><sym>(</sym><def>J</def><sym>,</sym> <def>I</def><sym>) *</sym> <def>U</def><sym>(</sym><def>J</def><sym>);</sym><br />
<def></def>         <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def></def>      <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def></def>   <kwa>end</kwa> <def>Eval_At_Times</def><sym>;</sym><br />
<def></def><br />
   <kwa>procedure</kwa> <def>Eval_Ata_Times_U</def> <sym>(</sym><def>U</def> <sym>:</sym> <def>Matrix</def><sym>;</sym> <def>Atau</def> <sym>:</sym> <def></def><kwa>out</kwa> <def>Matrix</def><sym>)</sym> <def></def><kwa>is</kwa><br />
<def>      V</def> <sym>:</sym> <def>Matrix</def><sym>(</sym><def></def><num>0</num><def>..U</def><sym>'</sym><def>Length</def> <sym>-</sym> <def></def><num>1</num><def></def><sym>);</sym><br />
<def></def>   <kwa>begin</kwa><br />
<def>      Eval_A_Times</def><sym>(</sym><def>U</def><sym>,</sym> <def>V</def><sym>);</sym><br />
<def>      Eval_At_Times</def><sym>(</sym><def>V</def><sym>,</sym> <def>Atau</def><sym>);</sym><br />
<def></def>   <kwa>end</kwa> <def>Eval_Ata_Times_U</def><sym>;</sym><br />
<def></def><br />
<kwa>end</kwa> <def>Spectral_Utils</def><sym>;</sym><br />
<def></def><br />
<slc>-----------------------------------------------------------</slc><br />
<def></def><slc>-- The Great Computer Language Shootout</slc><br />
<def></def><slc>--</slc><br />
<def></def><slc>-- Contributed by Jim Rogers</slc><br />
<def></def><slc>-----------------------------------------------------------</slc><br />
<def></def><br />
<kwa>with</kwa> <def>Ada.Text_Io</def><sym>;</sym><br />
<def></def><kwa>with</kwa> <def>Ada.Numerics.Generic_Elementary_Functions</def> <sym>;</sym><br />
<def></def><kwa>with</kwa> <def>Ada.Command_Line</def><sym>;</sym> <def></def><kwa>use</kwa> <def>Ada.Command_Line</def><sym>;</sym><br />
<def></def><kwa>with</kwa> <def>Spectral_Utils</def><sym>;</sym> <def></def><kwa>use</kwa> <def>Spectral_Utils</def><sym>;</sym><br />
<def></def><br />
<kwa>procedure</kwa> <def>SpectralNorm</def> <kwa>is</kwa><br />
<def></def>   <kwa>package</kwa> <def>Long_Io</def> <kwa>is new</kwa> <def>Ada.Text_Io.Float_Io</def><sym>(</sym><def></def><kwb>Long_Float</kwb><def></def><sym>);</sym><br />
<def></def>   <kwa>package</kwa> <def>Long_Funcs</def> <kwa>is new</kwa> <def>Ada.Numerics.Generic_Elementary_Functions</def><sym>(</sym><def></def><kwb>Long_Float</kwb><def></def><sym>);</sym><br />
<def></def>   <kwa>use</kwa> <def>Long_Funcs</def><sym>;</sym><br />
<def>   N</def> <sym>:</sym> <def></def><kwb>Natural</kwb> <def></def><sym>:=</sym> <def></def><num>100</num><def></def><sym>;</sym><br />
<def>   Vbv</def><sym>,</sym> <def>vv</def> <sym>:</sym> <def></def><kwb>Long_Float</kwb> <def></def><sym>:=</sym> <def></def><num>0.0</num><def></def><sym>;</sym><br />
<def></def><kwa>begin</kwa><br />
<def></def>   <kwa>if</kwa> <def>Argument_Count</def> <sym>=</sym> <def></def><num>1</num> <def></def><kwa>then</kwa><br />
<def>      N</def> <sym>:=</sym> <def></def><kwb>Natural</kwb><def></def><sym>'</sym><def>Value</def><sym>(</sym><def>Argument</def><sym>(</sym><def></def><num>1</num><def></def><sym>));</sym><br />
<def></def>   <kwa>end if</kwa><def></def><sym>;</sym><br />
<def></def><br />
   <kwa>declare</kwa><br />
<def>      U</def> <sym>:</sym> <def>Matrix</def><sym>(</sym><def></def><num>0</num><def>..N</def><sym>-</sym><def></def><num>1</num><def></def><sym>) := (</sym><def></def><kwa>Others</kwa> <def></def><sym>=&gt;</sym> <def></def><num>1.0</num><def></def><sym>);</sym><br />
<def>      V</def> <sym>:</sym> <def>Matrix</def><sym>(</sym><def></def><num>0</num><def>..N</def><sym>-</sym><def></def><num>1</num><def></def><sym>) := (</sym><def></def><kwa>Others</kwa> <def></def><sym>=&gt;</sym> <def></def><num>0.0</num><def></def><sym>);</sym><br />
<def></def>   <kwa>begin</kwa><br />
<def></def>      <kwa>for</kwa> <def>I</def> <kwa>in</kwa> <def></def><num>1</num><def>.</def><num>.10</num> <def></def><kwa>loop</kwa><br />
<def>         Eval_Ata_Times_U</def><sym>(</sym><def>U</def><sym>,</sym> <def>V</def><sym>);</sym><br />
<def>         Eval_Ata_Times_U</def><sym>(</sym><def>V</def><sym>,</sym> <def>U</def><sym>);</sym><br />
<def></def>      <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def></def>      <kwa>for</kwa> <def>I</def> <kwa>in</kwa> <def>V</def><sym>'</sym><def></def><kwa>range loop</kwa><br />
<def>         Vbv</def> <sym>:=</sym> <def>Vbv</def> <sym>+</sym> <def>U</def><sym>(</sym><def>I</def><sym>) *</sym> <def>V</def><sym>(</sym><def>I</def><sym>);</sym><br />
<def>         Vv</def> <sym>:=</sym> <def>Vv</def> <sym>+</sym> <def>V</def><sym>(</sym><def>I</def><sym>)*</sym><def>V</def><sym>(</sym><def>I</def><sym>);</sym><br />
<def></def>      <kwa>end loop</kwa><def></def><sym>;</sym><br />
<def></def>   <kwa>end</kwa><def></def><sym>;</sym><br />
<def>   Long_Io.Put</def><sym>(</sym><def>Item</def> <sym>=&gt;</sym> <def>Sqrt</def><sym>(</sym><def>Vbv</def><sym>/</sym><def>Vv</def><sym>),</sym> <def>Fore</def> <sym>=&gt;</sym> <def></def><num>1</num><def></def><sym>,</sym> <def>Aft</def> <sym>=&gt;</sym> <def></def><num>9</num><def></def><sym>,</sym> <def>Exp</def> <sym>=&gt;</sym> <def></def><num>0</num><def></def><sym>);</sym><br />
<def>   Ada.Text_Io.New_Line</def><sym>;</sym><br />
<def></def><kwa>end</kwa> <def>SpectralNorm</def><sym>;</sym><br />
<def></def><br />
<br />
<br />
<br />
<br />
</source>
