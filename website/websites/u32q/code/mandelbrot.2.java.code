<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Stefan Krause</span>
<span class="hl com">   slightly modified by Chad Whipkey</span>
<span class="hl com">   parallelized by Colin D Bennett 2008-10-04</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> java<span class="hl sym">.</span>io<span class="hl sym">.</span><span class="hl kwc">BufferedOutputStream</span><span class="hl sym">;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>io<span class="hl sym">.</span><span class="hl kwc">IOException</span><span class="hl sym">;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>io<span class="hl sym">.</span><span class="hl kwc">OutputStream</span><span class="hl sym">;</span>

<span class="hl kwa">public final class</span> mandelbrot <span class="hl sym">{</span>
    <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">)</span> <span class="hl kwa">throws</span> <span class="hl kwc">Exception</span> <span class="hl sym">{</span>
        <span class="hl kwb">int</span> size <span class="hl sym">=</span> args<span class="hl sym">.</span>length <span class="hl sym">&gt;=</span> <span class="hl num">1</span> ? <span class="hl kwc">Integer</span><span class="hl sym">.</span><span class="hl kwd">parseInt</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]) :</span> <span class="hl num">1024</span><span class="hl sym">;</span>
        <span class="hl kwa">new</span> <span class="hl kwd">mandelbrot</span><span class="hl sym">(</span>size<span class="hl sym">).</span><span class="hl kwd">compute</span><span class="hl sym">();</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">private final</span> <span class="hl kwb">int</span> size<span class="hl sym">;</span>
    <span class="hl kwa">private final</span> <span class="hl kwb">double</span> fac<span class="hl sym">;</span>
    <span class="hl kwa">private final</span> <span class="hl kwb">int</span> nThreads<span class="hl sym">;</span>

    <span class="hl kwa">public</span> <span class="hl kwd">mandelbrot</span><span class="hl sym">(</span><span class="hl kwb">int</span> size<span class="hl sym">) {</span>
        <span class="hl kwa">this</span><span class="hl sym">.</span>size <span class="hl sym">=</span> size<span class="hl sym">;</span>
        fac <span class="hl sym">=</span> <span class="hl num">2.0</span> <span class="hl sym">/</span> size<span class="hl sym">;</span>
        nThreads <span class="hl sym">=</span> <span class="hl kwc">Runtime</span><span class="hl sym">.</span><span class="hl kwd">getRuntime</span><span class="hl sym">().</span><span class="hl kwd">availableProcessors</span><span class="hl sym">();</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">compute</span><span class="hl sym">()</span> <span class="hl kwa">throws</span> <span class="hl kwc">IOException</span><span class="hl sym">,</span> <span class="hl kwc">InterruptedException</span> <span class="hl sym">{</span>
        <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">format</span><span class="hl sym">(</span><span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">%d %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> size<span class="hl sym">,</span> size<span class="hl sym">);</span>

        <span class="hl kwc">BufferedOutputStream</span> bufOut <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">BufferedOutputStream</span><span class="hl sym">(</span><span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">);</span>
        RowRenderer<span class="hl sym">[]</span> r <span class="hl sym">=</span> <span class="hl kwa">new</span> RowRenderer<span class="hl sym">[</span>nThreads<span class="hl sym">];</span>
        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> r<span class="hl sym">.</span>length<span class="hl sym">;</span> i<span class="hl sym">++)</span>
            r<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">RowRenderer</span><span class="hl sym">();</span>

        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> y <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> y <span class="hl sym">&lt;</span> size<span class="hl sym">;) {</span>
            <span class="hl kwb">int</span> n<span class="hl sym">;</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span>n <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> n <span class="hl sym">&lt;</span> nThreads <span class="hl sym">&amp;&amp;</span> y <span class="hl sym">&lt;</span> size<span class="hl sym">;</span> y<span class="hl sym">++,</span> n<span class="hl sym">++) {</span>
                r<span class="hl sym">[</span>n<span class="hl sym">].</span><span class="hl kwd">startComputingRow</span><span class="hl sym">(</span>y<span class="hl sym">);</span>
            <span class="hl sym">}</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> n<span class="hl sym">;</span> i<span class="hl sym">++) {</span>
                r<span class="hl sym">[</span>i<span class="hl sym">].</span><span class="hl kwd">writeFinishedRow</span><span class="hl sym">(</span>bufOut<span class="hl sym">);</span>
            <span class="hl sym">}</span>
        <span class="hl sym">}</span>
        bufOut<span class="hl sym">.</span><span class="hl kwd">close</span><span class="hl sym">();</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">private final class</span> RowRenderer <span class="hl kwa">implements</span> <span class="hl kwc">Runnable</span> <span class="hl sym">{</span>
        <span class="hl kwa">private final</span> <span class="hl kwb">byte</span><span class="hl sym">[]</span> workBuf<span class="hl sym">;</span>
        <span class="hl kwa">private</span> <span class="hl kwb">int</span> row<span class="hl sym">;</span>
        <span class="hl kwa">private</span> <span class="hl kwb">boolean</span> rowReady<span class="hl sym">;</span>

        <span class="hl kwa">public</span> <span class="hl kwd">RowRenderer</span><span class="hl sym">() {</span>
            workBuf <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl sym">[(</span>size <span class="hl sym">+</span> <span class="hl num">7</span><span class="hl sym">) /</span> <span class="hl num">8</span><span class="hl sym">];</span>    <span class="hl slc">// Length = ceil(size/8)</span>
            rowReady <span class="hl sym">=</span> false<span class="hl sym">;</span>
            row <span class="hl sym">= -</span><span class="hl num">1</span><span class="hl sym">;</span>
            <span class="hl kwc">Thread</span> thread <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">Thread</span><span class="hl sym">(</span><span class="hl kwa">this</span><span class="hl sym">);</span>
            thread<span class="hl sym">.</span><span class="hl kwd">setDaemon</span><span class="hl sym">(</span>true<span class="hl sym">);</span>
            thread<span class="hl sym">.</span><span class="hl kwd">start</span><span class="hl sym">();</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">public synchronized</span> <span class="hl kwb">void</span> <span class="hl kwd">run</span><span class="hl sym">() {</span>
            <span class="hl kwa">try</span> <span class="hl sym">{</span>
                <span class="hl kwa">while</span> <span class="hl sym">(</span>true<span class="hl sym">) {</span>
                    <span class="hl kwa">while</span> <span class="hl sym">(</span>row <span class="hl sym">== -</span><span class="hl num">1</span><span class="hl sym">)</span>
                        <span class="hl kwd">wait</span><span class="hl sym">();</span>
                    <span class="hl kwd">computeRow</span><span class="hl sym">(</span>row<span class="hl sym">);</span>
                    row <span class="hl sym">= -</span><span class="hl num">1</span><span class="hl sym">;</span>
                <span class="hl sym">}</span>
            <span class="hl sym">}</span> <span class="hl kwa">catch</span> <span class="hl sym">(</span><span class="hl kwc">Exception</span> e<span class="hl sym">) {</span>
                e<span class="hl sym">.</span><span class="hl kwd">printStackTrace</span><span class="hl sym">();</span>
            <span class="hl sym">}</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">public synchronized</span> <span class="hl kwb">void</span> <span class="hl kwd">startComputingRow</span><span class="hl sym">(</span><span class="hl kwb">int</span> y<span class="hl sym">)</span> <span class="hl kwa">throws</span> <span class="hl kwc">IOException</span> <span class="hl sym">{</span>
            <span class="hl kwa">this</span><span class="hl sym">.</span>row <span class="hl sym">=</span> y<span class="hl sym">;</span>
            <span class="hl kwd">notifyAll</span><span class="hl sym">();</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">private</span> <span class="hl kwb">void</span> <span class="hl kwd">computeRow</span><span class="hl sym">(</span><span class="hl kwb">int</span> y<span class="hl sym">)</span> <span class="hl kwa">throws</span> <span class="hl kwc">IOException</span> <span class="hl sym">{</span>
            <span class="hl kwb">int</span> bits <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl kwb">int</span> bufIndex <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl kwb">int</span> bitMask <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> <span class="hl num">7</span><span class="hl sym">;</span>

            <span class="hl kwa">final</span> <span class="hl kwb">double</span> Ci <span class="hl sym">= (</span>y <span class="hl sym">*</span> fac <span class="hl sym">-</span> <span class="hl num">1.0</span><span class="hl sym">);</span>
            <span class="hl kwa">final</span> <span class="hl kwb">byte</span><span class="hl sym">[]</span> buf <span class="hl sym">=</span> <span class="hl kwa">this</span><span class="hl sym">.</span>workBuf<span class="hl sym">;</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> x <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> x <span class="hl sym">&lt;</span> size<span class="hl sym">;</span> x<span class="hl sym">++) {</span>
                <span class="hl kwb">double</span> Zr <span class="hl sym">=</span> <span class="hl num">0.0</span><span class="hl sym">;</span>
                <span class="hl kwb">double</span> Zi <span class="hl sym">=</span> <span class="hl num">0.0</span><span class="hl sym">;</span>
                <span class="hl kwb">double</span> Cr <span class="hl sym">= (</span>x <span class="hl sym">*</span> fac <span class="hl sym">-</span> <span class="hl num">1.5</span><span class="hl sym">);</span>
                <span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">50</span><span class="hl sym">;</span>
                <span class="hl kwb">double</span> ZrN <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
                <span class="hl kwb">double</span> ZiN <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
                <span class="hl kwa">do</span> <span class="hl sym">{</span>
                    Zi <span class="hl sym">=</span> <span class="hl num">2.0</span> <span class="hl sym">*</span> Zr <span class="hl sym">*</span> Zi <span class="hl sym">+</span> Ci<span class="hl sym">;</span>
                    Zr <span class="hl sym">=</span> ZrN <span class="hl sym">-</span> ZiN <span class="hl sym">+</span> Cr<span class="hl sym">;</span>
                    ZiN <span class="hl sym">=</span> Zi <span class="hl sym">*</span> Zi<span class="hl sym">;</span>
                    ZrN <span class="hl sym">=</span> Zr <span class="hl sym">*</span> Zr<span class="hl sym">;</span>
                <span class="hl sym">}</span> <span class="hl kwa">while</span> <span class="hl sym">(!(</span>ZiN <span class="hl sym">+</span> ZrN <span class="hl sym">&gt;</span> <span class="hl num">4.0</span><span class="hl sym">) &amp;&amp; --</span>i <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">);</span>

                <span class="hl kwa">if</span> <span class="hl sym">(</span>i <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span>
                    bits <span class="hl sym">|=</span> bitMask<span class="hl sym">;</span>
                bitMask <span class="hl sym">&gt;&gt;&gt;=</span> <span class="hl num">1</span><span class="hl sym">;</span>
                <span class="hl kwa">if</span> <span class="hl sym">(</span>bitMask <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">) {</span>
                    buf<span class="hl sym">[</span>bufIndex<span class="hl sym">++] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span> bits<span class="hl sym">;</span>
                    bits <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
                    bitMask <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> <span class="hl num">7</span><span class="hl sym">;</span>
                <span class="hl sym">}</span>
            <span class="hl sym">}</span>

            <span class="hl kwa">if</span> <span class="hl sym">(</span>bitMask <span class="hl sym">!=</span> <span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> <span class="hl num">7</span><span class="hl sym">) {</span>    <span class="hl slc">// Fraction of a byte left?</span>
                buf<span class="hl sym">[</span>bufIndex<span class="hl sym">++] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span> bits<span class="hl sym">;</span>
            <span class="hl sym">}</span>

            assert bufIndex <span class="hl sym">==</span> buf<span class="hl sym">.</span>length
                    <span class="hl sym">:</span> <span class="hl str">&quot;expected buf to be completely used&quot;</span><span class="hl sym">;</span>
            <span class="hl kwd">signalRowReady</span><span class="hl sym">();</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">private synchronized</span> <span class="hl kwb">void</span> <span class="hl kwd">signalRowReady</span><span class="hl sym">() {</span>
            rowReady <span class="hl sym">=</span> true<span class="hl sym">;</span>
            <span class="hl kwd">notifyAll</span><span class="hl sym">();</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">public synchronized</span> <span class="hl kwb">void</span> <span class="hl kwd">writeFinishedRow</span><span class="hl sym">(</span><span class="hl kwc">OutputStream</span> out<span class="hl sym">)</span>
                <span class="hl kwa">throws</span> <span class="hl kwc">InterruptedException</span><span class="hl sym">,</span> <span class="hl kwc">IOException</span> <span class="hl sym">{</span>
            <span class="hl kwa">while</span> <span class="hl sym">(!</span>rowReady<span class="hl sym">)</span>
                <span class="hl kwd">wait</span><span class="hl sym">();</span>
            out<span class="hl sym">.</span><span class="hl kwd">write</span><span class="hl sym">(</span>workBuf<span class="hl sym">);</span>
            rowReady <span class="hl sym">=</span> false<span class="hl sym">;</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>
