<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">-- Contributed by Jed Brown with improvements by Spencer Janssen and Don Stewart</span>
<span class="hl slc">-- Modified by Alex Mason</span>

import Control.Monad
import Control.Concurrent
import System.Environment

ring <span class="hl sym">=</span> <span class="hl num">503</span>

new l i <span class="hl sym">=</span> do
  r <span class="hl sym">&lt;-</span> newEmptyMVar
  forkIO <span class="hl sym">(</span>thread i l r<span class="hl sym">)</span>
  return r

thread <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> MVar Int <span class="hl sym">-&gt;</span> MVar Int <span class="hl sym">-&gt;</span> IO <span class="hl sym">()</span>
thread i l r <span class="hl sym">=</span> go
  where go <span class="hl sym">=</span> do
          m <span class="hl sym">&lt;-</span> takeMVar l
          when <span class="hl sym">(</span>m <span class="hl sym">==</span> <span class="hl num">1</span><span class="hl sym">) (</span>print i<span class="hl sym">)</span>
          putMVar r $<span class="hl sym">!</span> m <span class="hl sym">-</span> <span class="hl num">1</span>
          when <span class="hl sym">(</span>m <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> go

main <span class="hl sym">=</span> do
  a <span class="hl sym">&lt;-</span> newMVar . read . head <span class="hl sym">=&lt;&lt;</span> getArgs
  z <span class="hl sym">&lt;-</span> foldM new a <span class="hl sym">[</span><span class="hl num">2</span>..ring<span class="hl sym">]</span>
  ret <span class="hl sym">&lt;-</span> newEmptyMVar
  forkIO <span class="hl sym">(</span>thread <span class="hl num">1</span> z a <span class="hl sym">&gt;&gt;=</span> putMVar ret<span class="hl sym">)</span>
  takeMVar ret
