<span class="hl slc">%% The Computer Language Benchmarks Game</span>
<span class="hl slc">%% http://shootout.alioth.debian.org/</span>
<span class="hl slc">%% Contributed by Fredrik Svahn</span>

<span class="hl slc">%-compile( [ native, { hipe, o3 } ] ).</span>

<span class="hl sym">-</span><span class="hl kwa">module</span><span class="hl sym">(</span>mandelbrot<span class="hl sym">).</span>
<span class="hl sym">-</span><span class="hl kwa">export</span><span class="hl sym">([</span>main<span class="hl sym">/</span><span class="hl num">1</span><span class="hl sym">]).</span>
<span class="hl sym">-</span><span class="hl kwa">define</span><span class="hl sym">(</span>LIM_SQR<span class="hl sym">,</span> <span class="hl num">4.0</span><span class="hl sym">).</span>
<span class="hl sym">-</span><span class="hl kwa">define</span><span class="hl sym">(</span>ITER<span class="hl sym">,</span> <span class="hl num">50</span><span class="hl sym">).</span>
<span class="hl sym">-</span><span class="hl kwa">define</span><span class="hl sym">(</span>SR<span class="hl sym">, -</span><span class="hl num">1.5</span><span class="hl sym">).</span>
<span class="hl sym">-</span><span class="hl kwa">define</span><span class="hl sym">(</span>SI<span class="hl sym">, -</span><span class="hl num">1</span><span class="hl sym">).</span>

<span class="hl kwd">main</span><span class="hl sym">([</span>Arg<span class="hl sym">]) -&gt;</span>
    N <span class="hl sym">=</span> <span class="hl kwb">list_to_integer</span><span class="hl sym">(</span>Arg<span class="hl sym">),</span> HalfN <span class="hl sym">= (</span>N<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">div</span> <span class="hl num">2</span><span class="hl sym">,</span>
    io<span class="hl sym">:</span><span class="hl kwd">put_chars</span><span class="hl sym">([</span><span class="hl str">&quot;P4</span><span class="hl esc">\</span><span class="hl str">n&quot;</span><span class="hl sym">,</span> Arg<span class="hl sym">,</span> <span class="hl str">&quot; &quot;</span><span class="hl sym">,</span> Arg<span class="hl sym">,</span> <span class="hl str">&quot;</span><span class="hl esc">\</span><span class="hl str">n&quot;</span><span class="hl sym">]),</span>

    <span class="hl slc">%% Spawn one process per row in upper half</span>
    Row <span class="hl sym">=</span> <span class="hl kwa">fun</span><span class="hl sym">(</span>Y<span class="hl sym">)-&gt;</span> <span class="hl kwb">spawn</span><span class="hl sym">(</span><span class="hl kwa">fun</span><span class="hl sym">()-&gt;</span> <span class="hl kwd">row</span><span class="hl sym">(</span>N<span class="hl sym">-</span><span class="hl num">2</span><span class="hl sym">, ?</span>SI<span class="hl sym">+</span>Y<span class="hl sym">*</span><span class="hl num">2</span><span class="hl sym">/</span>N<span class="hl sym">,</span> N<span class="hl sym">, [])</span> <span class="hl kwa">end</span><span class="hl sym">)</span> <span class="hl kwa">end</span><span class="hl sym">,</span>
    HalfPids <span class="hl sym">=</span> lists<span class="hl sym">:</span><span class="hl kwd">map</span><span class="hl sym">(</span>Row<span class="hl sym">,</span> lists<span class="hl sym">:</span><span class="hl kwd">seq</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> HalfN<span class="hl sym">)),</span>

    <span class="hl slc">%% Lower half is mirror image of upper half, no need to recalculate</span>
    <span class="hl slc">%% just ask the pids in upper half to print buffer again</span>
    MiddlePid <span class="hl sym">=</span> <span class="hl kwa">if</span> N <span class="hl kwa">rem</span> <span class="hl num">2</span> <span class="hl sym">==</span> <span class="hl num">0</span> <span class="hl sym">-&gt; [</span><span class="hl kwd">Row</span><span class="hl sym">(</span>HalfN <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)];</span> true <span class="hl sym">-&gt; []</span> <span class="hl kwa">end</span><span class="hl sym">,</span>
    AllPids <span class="hl sym">=</span> HalfPids <span class="hl sym">++</span> MiddlePid <span class="hl sym">++</span> lists<span class="hl sym">:</span><span class="hl kwd">reverse</span><span class="hl sym">(</span><span class="hl kwb">tl</span><span class="hl sym">(</span>HalfPids<span class="hl sym">)),</span>

    <span class="hl slc">%% Pass token around to make sure printouts are in the right order</span>
    <span class="hl kwb">hd</span><span class="hl sym">(</span>AllPids<span class="hl sym">) !</span> <span class="hl kwb">tl</span><span class="hl sym">(</span>AllPids<span class="hl sym">) ++ [</span> <span class="hl kwb">self</span><span class="hl sym">() ],</span>
    <span class="hl kwa">receive</span> _Token <span class="hl sym">-&gt;</span> <span class="hl kwb">halt</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">end</span><span class="hl sym">.</span>

<span class="hl slc">%% Calculate one row and output results when asked</span>
<span class="hl kwd">row</span><span class="hl sym">(-</span><span class="hl num">1</span><span class="hl sym">,</span> Y2<span class="hl sym">,</span> N<span class="hl sym">,</span> Bits<span class="hl sym">) -&gt;</span>
    <span class="hl kwa">receive</span> Pids <span class="hl sym">-&gt;</span>
	    <span class="hl kwd">put_chars</span><span class="hl sym">(</span>Bits<span class="hl sym">, []),</span>
	    <span class="hl kwb">hd</span><span class="hl sym">(</span>Pids<span class="hl sym">) !</span> <span class="hl kwb">tl</span><span class="hl sym">(</span>Pids<span class="hl sym">),</span>
	    <span class="hl kwd">row</span><span class="hl sym">(-</span><span class="hl num">1</span><span class="hl sym">,</span> Y2<span class="hl sym">,</span> N<span class="hl sym">,</span> Bits<span class="hl sym">)</span>
    <span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwd">row</span><span class="hl sym">(</span>X<span class="hl sym">,</span> Y2<span class="hl sym">,</span> N<span class="hl sym">,</span> Bits<span class="hl sym">) -&gt;</span>
    <span class="hl kwd">row</span><span class="hl sym">(</span>X<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> Y2<span class="hl sym">,</span> N<span class="hl sym">, [</span> <span class="hl kwd">m</span><span class="hl sym">(?</span>ITER<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">, ?</span>SR<span class="hl sym">+</span>X<span class="hl sym">*</span><span class="hl num">2</span><span class="hl sym">/</span>N<span class="hl sym">,</span> Y2<span class="hl sym">, ?</span>SR<span class="hl sym">+</span>X<span class="hl sym">*</span><span class="hl num">2</span><span class="hl sym">/</span>N<span class="hl sym">,</span> Y2<span class="hl sym">) |</span> Bits<span class="hl sym">]).</span>

<span class="hl slc">%% Mandelbrot algorithm</span>
<span class="hl kwd">m</span><span class="hl sym">(</span>Iter<span class="hl sym">,</span>R<span class="hl sym">,</span>I<span class="hl sym">,</span>CR<span class="hl sym">,</span>CI<span class="hl sym">) -&gt;</span>
    <span class="hl kwa">case</span> R<span class="hl sym">*</span>R<span class="hl sym">+</span>I<span class="hl sym">*</span>I <span class="hl sym">=&lt; ?</span>LIM_SQR <span class="hl kwa">of</span>
	true <span class="hl kwa">when</span> Iter <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl sym">-&gt;</span> <span class="hl kwd">m</span><span class="hl sym">(</span>Iter<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span>R<span class="hl sym">*</span>R<span class="hl sym">-</span>I<span class="hl sym">*</span>I<span class="hl sym">+</span>CR<span class="hl sym">, (</span>R<span class="hl sym">+</span>R<span class="hl sym">)*</span>I<span class="hl sym">+</span>CI<span class="hl sym">,</span> CR<span class="hl sym">,</span> CI<span class="hl sym">);</span>
	false <span class="hl sym">-&gt;</span> <span class="hl num">0</span><span class="hl sym">;</span>
	_  <span class="hl sym">-&gt;</span> <span class="hl num">1</span>
    <span class="hl kwa">end</span><span class="hl sym">.</span>

<span class="hl slc">%% Print one row, character by character</span>
<span class="hl kwd">put_chars</span><span class="hl sym">([],</span> Bytes<span class="hl sym">) -&gt;</span> io<span class="hl sym">:</span><span class="hl kwd">put_chars</span><span class="hl sym">(</span>lists<span class="hl sym">:</span><span class="hl kwd">reverse</span><span class="hl sym">(</span>Bytes<span class="hl sym">));</span>
<span class="hl kwd">put_chars</span><span class="hl sym">([</span>B1<span class="hl sym">,</span> B2<span class="hl sym">,</span> B3<span class="hl sym">,</span> B4<span class="hl sym">,</span> B5<span class="hl sym">,</span> B6<span class="hl sym">,</span> B7<span class="hl sym">,</span> B8 <span class="hl sym">|</span> RemBytes<span class="hl sym">],</span> Bytes<span class="hl sym">) -&gt;</span>
    <span class="hl kwd">put_chars</span><span class="hl sym">(</span>RemBytes<span class="hl sym">, [&lt;&lt;</span>B1<span class="hl sym">:</span><span class="hl num">1</span><span class="hl sym">,</span>B2<span class="hl sym">:</span><span class="hl num">1</span><span class="hl sym">,</span>B3<span class="hl sym">:</span><span class="hl num">1</span><span class="hl sym">,</span>B4<span class="hl sym">:</span><span class="hl num">1</span><span class="hl sym">,</span>B5<span class="hl sym">:</span><span class="hl num">1</span><span class="hl sym">,</span>B6<span class="hl sym">:</span><span class="hl num">1</span><span class="hl sym">,</span>B7<span class="hl sym">:</span><span class="hl num">1</span><span class="hl sym">,</span>B8<span class="hl sym">:</span><span class="hl num">1</span><span class="hl sym">&gt;&gt; |</span> Bytes<span class="hl sym">]);</span>
<span class="hl kwd">put_chars</span><span class="hl sym">(</span>RemBytes<span class="hl sym">,</span> Bytes<span class="hl sym">) -&gt;</span>
    <span class="hl kwd">put_chars</span><span class="hl sym">(</span>RemBytes<span class="hl sym">++[</span><span class="hl num">0</span><span class="hl sym">],</span> Bytes<span class="hl sym">).</span>
