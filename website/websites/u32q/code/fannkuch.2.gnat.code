<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Based on code by Dave Fladebo, Eckehard Berns and Heiner Marxen.</span>
<span class="hl slc">-- Based on the ATS version by Hongwei Xi,</span>
<span class="hl slc">-- and the Java version by The Anh Tran.</span>
<span class="hl slc">-- Contributed by Jonathan Parker.</span>
<span class="hl slc">--</span>

<span class="hl kwa">with</span> Ada<span class="hl sym">.</span>Command_Line<span class="hl sym">;</span>
<span class="hl kwa">with</span> Ada<span class="hl sym">.</span>Text_Io<span class="hl sym">;</span> <span class="hl kwa">use</span> Ada<span class="hl sym">.</span>Text_Io<span class="hl sym">;</span>

<span class="hl kwa">procedure</span> Fannkuch <span class="hl kwa">is</span>

   Multitasking_Version_Desired <span class="hl sym">:</span> <span class="hl kwa">constant</span> <span class="hl kwb">Boolean</span> <span class="hl sym">:=</span> <span class="hl kwd">True</span><span class="hl sym">;</span>

   <span class="hl kwa">type</span> Fann_Int <span class="hl kwa">is mod</span> <span class="hl num">2</span><span class="hl sym">**</span><span class="hl num">64</span><span class="hl sym">;</span>

   N_image <span class="hl sym">:</span> <span class="hl kwa">constant</span> <span class="hl kwb">String</span>   <span class="hl sym">:=</span> Ada<span class="hl sym">.</span>Command_Line<span class="hl sym">.</span>Argument <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">);</span>
   N       <span class="hl sym">:</span> <span class="hl kwa">constant</span> Fann_Int <span class="hl sym">:=</span> Fann_Int<span class="hl kwd">'Value</span> <span class="hl sym">(</span>N_image<span class="hl sym">);</span>

   <span class="hl kwa">pragma</span> Assert <span class="hl sym">(</span>N <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl str">&quot;Input argument N must be integer &gt; 0.&quot;</span><span class="hl sym">);</span>

   Fann_First <span class="hl sym">:</span> <span class="hl kwa">constant</span> Fann_Int <span class="hl sym">:=</span> Fann_Int<span class="hl kwd">'First</span><span class="hl sym">;</span>
   Fann_Last  <span class="hl sym">:</span> <span class="hl kwa">constant</span> Fann_Int <span class="hl sym">:=</span> Fann_Int<span class="hl kwd">'First</span> <span class="hl sym">+ (</span>N <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">);</span>

   <span class="hl kwa">subtype</span> Perm_Index <span class="hl kwa">is</span> Fann_Int <span class="hl kwa">range</span> Fann_First <span class="hl sym">..</span> Fann_Last<span class="hl sym">;</span>
   <span class="hl kwa">type</span> Permutation <span class="hl kwa">is array</span><span class="hl sym">(</span>Perm_Index<span class="hl sym">)</span> <span class="hl kwa">of</span> Fann_Int<span class="hl sym">;</span>

   <span class="hl kwa">subtype</span> R_Range <span class="hl kwa">is</span> Fann_Int <span class="hl kwa">range</span> Fann_First <span class="hl sym">..</span> Fann_Last<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">;</span>

   <span class="hl kwa">procedure</span> Get_Count_of_Flips
     <span class="hl sym">(</span>Perm1      <span class="hl sym">:</span> <span class="hl kwa">in</span>     Permutation<span class="hl sym">;</span>
      Flip_Count <span class="hl sym">:</span>    <span class="hl kwa">out</span> Fann_Int<span class="hl sym">)</span>
   <span class="hl kwa">is</span>
      j<span class="hl sym">,</span> k<span class="hl sym">,</span> tmp <span class="hl sym">:</span> Fann_Int<span class="hl sym">;</span>
      P_1st     <span class="hl sym">:</span> Fann_Int    <span class="hl sym">:=</span> Perm1<span class="hl sym">(</span>Fann_First<span class="hl sym">);</span>
      Perm      <span class="hl sym">:</span> Permutation <span class="hl sym">:=</span> Perm1<span class="hl sym">;</span>
   <span class="hl kwa">begin</span>
      Flip_Count <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>

      <span class="hl kwa">while</span> P_1st <span class="hl sym">/=</span> Fann_First <span class="hl kwa">loop</span>  <span class="hl slc">-- Flip until P_1st = Fann_First</span>
         k <span class="hl sym">:=</span> P_1st <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>
         j <span class="hl sym">:=</span> Fann_First <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
         <span class="hl kwa">while</span> j <span class="hl sym">&lt;</span> k <span class="hl kwa">loop</span>
            tmp     <span class="hl sym">:=</span> Perm<span class="hl sym">(</span>j<span class="hl sym">);</span>
            Perm<span class="hl sym">(</span>j<span class="hl sym">) :=</span> Perm<span class="hl sym">(</span>k<span class="hl sym">);</span>
            j <span class="hl sym">:=</span> j <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
            Perm<span class="hl sym">(</span>k<span class="hl sym">) :=</span> tmp<span class="hl sym">;</span>
            k <span class="hl sym">:=</span> k <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>
         <span class="hl kwa">end loop</span><span class="hl sym">;</span>
         tmp         <span class="hl sym">:=</span> Perm<span class="hl sym">(</span>P_1st<span class="hl sym">);</span>
         Perm<span class="hl sym">(</span>P_1st<span class="hl sym">) :=</span> P_1st<span class="hl sym">;</span>
         P_1st       <span class="hl sym">:=</span> tmp<span class="hl sym">;</span>
         Flip_Count  <span class="hl sym">:=</span> Flip_Count <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>
   <span class="hl kwa">end</span> Get_Count_of_Flips<span class="hl sym">;</span>

   <span class="hl kwa">procedure</span> Get_Another_Permutation
     <span class="hl sym">(</span>Perm       <span class="hl sym">:</span> <span class="hl kwa">in out</span> Permutation<span class="hl sym">;</span>
      R_Position <span class="hl sym">:</span> <span class="hl kwa">in</span>     Fann_Int<span class="hl sym">)</span>
   <span class="hl kwa">is</span>
      tmp <span class="hl sym">:</span> Fann_Int <span class="hl sym">:=</span> Perm<span class="hl sym">(</span>Fann_First<span class="hl sym">);</span>
      i   <span class="hl sym">:</span> Fann_Int <span class="hl sym">:=</span> Fann_First<span class="hl sym">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">while</span> i <span class="hl sym">&lt;</span> R_Position <span class="hl kwa">loop</span>
         Perm<span class="hl sym">(</span>i<span class="hl sym">) :=</span> Perm<span class="hl sym">(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">);</span>
         i <span class="hl sym">:=</span> i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>
      Perm<span class="hl sym">(</span>R_Position<span class="hl sym">) :=</span> tmp<span class="hl sym">;</span>
   <span class="hl kwa">end</span> Get_Another_Permutation<span class="hl sym">;</span>

   <span class="hl kwa">function</span> Max_No_of_Flips_Detected <span class="hl sym">(</span>R <span class="hl sym">:</span> <span class="hl kwa">in</span> R_Range<span class="hl sym">)</span> <span class="hl kwa">return</span> Fann_Int <span class="hl kwa">is</span>
      R_strt<span class="hl sym">,</span> Flip_Count <span class="hl sym">:</span> Fann_Int<span class="hl sym">;</span>
      Perm<span class="hl sym">,</span> Count <span class="hl sym">:</span> Permutation <span class="hl sym">:= (</span><span class="hl kwa">others</span> <span class="hl sym">=&gt;</span> Fann_Int<span class="hl kwd">'First</span><span class="hl sym">);</span>
      Max_Count <span class="hl sym">:</span> Fann_Int <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">for</span> m <span class="hl kwa">in</span> Fann_First <span class="hl sym">..</span> Fann_Last <span class="hl kwa">loop</span>
         Perm<span class="hl sym">(</span>m<span class="hl sym">) :=</span> m<span class="hl sym">;</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>
      Perm<span class="hl sym">(</span>R<span class="hl sym">) :=</span> Fann_Last<span class="hl sym">;</span>
      Perm<span class="hl sym">(</span>Fann_Last<span class="hl sym">) :=</span> R<span class="hl sym">;</span>

      <span class="hl kwa">for</span> m <span class="hl kwa">in</span> Fann_First <span class="hl sym">..</span> Fann_Last <span class="hl kwa">loop</span>
         Count<span class="hl sym">(</span>m<span class="hl sym">) :=</span> m<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>

      R_strt <span class="hl sym">:=</span> Fann_Last<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl kwa">while</span> R_strt <span class="hl sym">&lt;</span> Fann_Last <span class="hl kwa">loop</span>

         Get_Another_Permutation <span class="hl sym">(</span>Perm<span class="hl sym">,</span> R_strt<span class="hl sym">);</span>

         Count<span class="hl sym">(</span>R_strt<span class="hl sym">) :=</span> Count<span class="hl sym">(</span>R_strt<span class="hl sym">) -</span> <span class="hl num">1</span><span class="hl sym">;</span>
         <span class="hl kwa">if</span> Count<span class="hl sym">(</span>R_strt<span class="hl sym">) &gt;</span> Fann_First <span class="hl kwa">then</span>

            <span class="hl kwa">while</span> R_strt <span class="hl sym">&gt;</span> Fann_First<span class="hl sym">+</span><span class="hl num">1</span> <span class="hl kwa">loop</span>
               Count<span class="hl sym">(</span>R_strt<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">) :=</span> R_strt<span class="hl sym">;</span>
               R_strt <span class="hl sym">:=</span> R_strt <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>
            <span class="hl kwa">end loop</span><span class="hl sym">;</span>

            <span class="hl kwa">if</span> Perm<span class="hl sym">(</span>Fann_Last<span class="hl sym">)  &lt;</span> Fann_Last <span class="hl kwa">and then</span>
               Perm<span class="hl sym">(</span>Fann_First<span class="hl sym">) &gt;</span> Fann_First
            <span class="hl kwa">then</span>
               Get_Count_of_Flips <span class="hl sym">(</span>Perm<span class="hl sym">,</span> Flip_Count<span class="hl sym">);</span>
               <span class="hl kwa">if</span> Flip_Count <span class="hl sym">&gt;</span> Max_Count <span class="hl kwa">then</span>  Max_Count <span class="hl sym">:=</span> Flip_Count<span class="hl sym">;</span>  <span class="hl kwa">end if</span><span class="hl sym">;</span>
            <span class="hl kwa">end if</span><span class="hl sym">;</span>

         <span class="hl kwa">else</span>
            R_strt <span class="hl sym">:=</span> R_strt <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
         <span class="hl kwa">end if</span><span class="hl sym">;</span>

      <span class="hl kwa">end loop</span><span class="hl sym">;</span>

      <span class="hl kwa">return</span> Max_Count<span class="hl sym">;</span>

   <span class="hl kwa">end</span> Max_No_of_Flips_Detected<span class="hl sym">;</span>

   <span class="hl slc">--  Uses original sequential method of enumerating permutations. Gives</span>
   <span class="hl slc">--  the right Max_Flips_Counted for N = 1 to 4, if No_of_Perms_to_Do = 30.</span>

   <span class="hl kwa">procedure</span> Print_Perms_and_Count_Flips
     <span class="hl sym">(</span>No_of_Perms_to_Do <span class="hl sym">:</span> <span class="hl kwa">in</span>     Fann_Int<span class="hl sym">;</span>
      Max_Flips_Counted <span class="hl sym">:</span>    <span class="hl kwa">out</span> Fann_Int<span class="hl sym">)</span>
   <span class="hl kwa">is</span>
      Perm<span class="hl sym">,</span> Count <span class="hl sym">:</span> Permutation <span class="hl sym">:= (</span><span class="hl kwa">others</span> <span class="hl sym">=&gt;</span> Fann_Int<span class="hl kwd">'First</span><span class="hl sym">);</span>
      F_1st <span class="hl sym">:</span> <span class="hl kwa">constant</span> Fann_Int <span class="hl sym">:=</span> Fann_Int<span class="hl kwd">'First</span><span class="hl sym">;</span>
      R <span class="hl sym">:</span> Fann_Int <span class="hl sym">:=</span> Fann_Last <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
      Flip_Count <span class="hl sym">:</span> Fann_Int <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">begin</span>
      Max_Flips_Counted <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>

      <span class="hl kwa">for</span> m <span class="hl kwa">in</span> Fann_First <span class="hl sym">..</span> Fann_Last <span class="hl kwa">loop</span>
         Perm<span class="hl sym">(</span>m<span class="hl sym">) :=</span> m<span class="hl sym">;</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>

      Print_and_Count<span class="hl sym">:</span> <span class="hl kwa">for</span> Lines <span class="hl kwa">in</span> <span class="hl num">1</span> <span class="hl sym">..</span> No_of_Perms_to_Do <span class="hl kwa">loop</span>

         <span class="hl kwa">for</span> m <span class="hl kwa">in</span> Fann_First <span class="hl sym">..</span> Fann_Last <span class="hl kwa">loop</span>
            <span class="hl kwa">declare</span>
               Perm_Image <span class="hl sym">:</span> <span class="hl kwa">constant</span> <span class="hl kwb">String</span> <span class="hl sym">:=</span> Fann_Int<span class="hl kwd">'Image</span> <span class="hl sym">(</span>Perm<span class="hl sym">(</span>m<span class="hl sym">)+</span><span class="hl num">1</span><span class="hl sym">-</span>F_1st<span class="hl sym">);</span>
            <span class="hl kwa">begin</span>
               Put <span class="hl sym">(</span>Perm_Image<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">..</span>Perm_Image<span class="hl kwd">'Length</span><span class="hl sym">));</span>
            <span class="hl kwa">end</span><span class="hl sym">;</span>
         <span class="hl kwa">end loop</span><span class="hl sym">;</span>
         New_Line<span class="hl sym">;</span>

         <span class="hl kwa">while</span> R <span class="hl sym">&gt;</span> Fann_First<span class="hl sym">+</span><span class="hl num">1</span> <span class="hl kwa">loop</span>
            Count<span class="hl sym">(</span>R<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">) :=</span> R<span class="hl sym">;</span>
            R <span class="hl sym">:=</span> R<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">;</span>
         <span class="hl kwa">end loop</span><span class="hl sym">;</span>

         <span class="hl kwa">if</span> Perm<span class="hl sym">(</span>Fann_Last<span class="hl sym">) &lt;</span> Fann_Last <span class="hl kwa">and</span> Perm<span class="hl sym">(</span>Fann_First<span class="hl sym">) &gt;</span> Fann_First <span class="hl kwa">then</span>
            Get_Count_of_Flips <span class="hl sym">(</span>Perm<span class="hl sym">,</span> Flip_Count<span class="hl sym">);</span>
            <span class="hl kwa">if</span> Flip_Count <span class="hl sym">&gt;</span> Max_Flips_Counted <span class="hl kwa">then</span>
               Max_Flips_Counted <span class="hl sym">:=</span> Flip_Count<span class="hl sym">;</span>
            <span class="hl kwa">end if</span><span class="hl sym">;</span>
         <span class="hl kwa">end if</span><span class="hl sym">;</span>

         Get_Next_Perm<span class="hl sym">:</span> <span class="hl kwa">loop</span>
            <span class="hl kwa">exit</span> Print_and_Count <span class="hl kwa">when</span> R <span class="hl sym">&gt;</span> Fann_Last<span class="hl sym">;</span>
            Get_Another_Permutation <span class="hl sym">(</span>Perm<span class="hl sym">,</span> R<span class="hl sym">);</span>
            Count<span class="hl sym">(</span>R<span class="hl sym">) :=</span> Count<span class="hl sym">(</span>R<span class="hl sym">) -</span> <span class="hl num">1</span><span class="hl sym">;</span>
            <span class="hl kwa">exit</span> Get_Next_Perm <span class="hl kwa">when</span> Count<span class="hl sym">(</span>R<span class="hl sym">) &gt;</span> Fann_First<span class="hl sym">;</span>
            R <span class="hl sym">:=</span> R <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
         <span class="hl kwa">end loop</span> Get_Next_Perm<span class="hl sym">;</span>

      <span class="hl kwa">end loop</span> Print_and_Count<span class="hl sym">;</span>

   <span class="hl kwa">end</span> Print_Perms_and_Count_Flips<span class="hl sym">;</span>

   Store_of_Max_Flip_Counts <span class="hl sym">:</span> Permutation <span class="hl sym">:= (</span><span class="hl kwa">others</span> <span class="hl sym">=&gt;</span> <span class="hl num">0</span><span class="hl sym">);</span>
   Max_Flips<span class="hl sym">,</span> F<span class="hl sym">,</span> Initial_Count <span class="hl sym">:</span> Fann_Int <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>

<span class="hl kwa">begin</span>

   Print_Perms_and_Count_Flips
     <span class="hl sym">(</span>No_of_Perms_to_Do <span class="hl sym">=&gt;</span> <span class="hl num">30</span><span class="hl sym">,</span>
      Max_Flips_Counted <span class="hl sym">=&gt;</span> Initial_Count<span class="hl sym">);</span>

   <span class="hl kwa">if</span> N <span class="hl sym">&lt;</span> <span class="hl num">4</span> <span class="hl kwa">then</span> <span class="hl slc">-- use the above results, and terminate the procedure:</span>
      Put <span class="hl sym">(</span><span class="hl str">&quot;Pfannkuchen(&quot;</span><span class="hl sym">);</span> Put <span class="hl sym">(</span>N_image<span class="hl sym">);</span> Put <span class="hl sym">(</span><span class="hl str">&quot;) =&quot;</span><span class="hl sym">);</span>
      Put <span class="hl sym">(</span>Fann_Int<span class="hl kwd">'Image</span> <span class="hl sym">(</span>Initial_Count<span class="hl sym">));</span>
      <span class="hl kwa">return</span><span class="hl sym">;</span>
   <span class="hl kwa">end if</span><span class="hl sym">;</span>

   <span class="hl kwa">if</span> Multitasking_Version_Desired <span class="hl kwa">then</span>

      <span class="hl kwa">declare</span>  <span class="hl slc">-- and launch 1 task for each R in R_Range:</span>

         <span class="hl kwa">task type</span> Flip_Counter <span class="hl kwa">is</span>
            <span class="hl kwa">entry</span> Start <span class="hl sym">(</span>R <span class="hl sym">:</span> <span class="hl kwa">in</span> Fann_Int<span class="hl sym">);</span>
            <span class="hl kwa">entry</span> Return_Result <span class="hl sym">(</span>Max_Flip_Count_for_R <span class="hl sym">:</span> <span class="hl kwa">out</span> Fann_Int<span class="hl sym">);</span>
         <span class="hl kwa">end</span> Flip_Counter<span class="hl sym">;</span>

         <span class="hl kwa">task body</span> Flip_Counter <span class="hl kwa">is</span>
            R_local<span class="hl sym">,</span> Count_for_R <span class="hl sym">:</span> Fann_Int<span class="hl sym">;</span>
         <span class="hl kwa">begin</span>
            <span class="hl kwa">accept</span> Start <span class="hl sym">(</span>R <span class="hl sym">:</span> <span class="hl kwa">in</span> Fann_Int<span class="hl sym">)</span> <span class="hl kwa">do</span>
               R_local <span class="hl sym">:=</span> R<span class="hl sym">;</span>
            <span class="hl kwa">end</span> Start<span class="hl sym">;</span>

            Count_for_R <span class="hl sym">:=</span> Max_No_of_Flips_Detected <span class="hl sym">(</span>R_local<span class="hl sym">);</span>

            <span class="hl kwa">accept</span> Return_Result <span class="hl sym">(</span>Max_Flip_Count_for_R <span class="hl sym">:</span> <span class="hl kwa">out</span> Fann_Int<span class="hl sym">)</span> <span class="hl kwa">do</span>
               Max_Flip_Count_for_R <span class="hl sym">:=</span> Count_for_R<span class="hl sym">;</span>
            <span class="hl kwa">end</span> Return_Result<span class="hl sym">;</span>
         <span class="hl kwa">end</span> Flip_Counter<span class="hl sym">;</span>

         Counter <span class="hl sym">:</span> <span class="hl kwa">array</span><span class="hl sym">(</span>R_Range<span class="hl sym">)</span> <span class="hl kwa">of</span> Flip_Counter<span class="hl sym">;</span> <span class="hl slc">-- the tasks.</span>

      <span class="hl kwa">begin</span>
         <span class="hl kwa">for</span> R <span class="hl kwa">in</span> R_Range <span class="hl kwa">loop</span>
            Counter<span class="hl sym">(</span>R<span class="hl sym">).</span>Start <span class="hl sym">(</span>R<span class="hl sym">);</span>
         <span class="hl kwa">end loop</span><span class="hl sym">;</span>

         <span class="hl kwa">for</span> R <span class="hl kwa">in</span> R_Range <span class="hl kwa">loop</span>
            Counter<span class="hl sym">(</span>R<span class="hl sym">).</span>Return_Result <span class="hl sym">(</span>F<span class="hl sym">);</span>
            Store_of_Max_Flip_Counts<span class="hl sym">(</span>R<span class="hl sym">) :=</span> F<span class="hl sym">;</span>
         <span class="hl kwa">end loop</span><span class="hl sym">;</span>
      <span class="hl kwa">end</span><span class="hl sym">;</span>

   <span class="hl kwa">else</span>   <span class="hl slc">-- Sequential:</span>

      <span class="hl kwa">for</span> R <span class="hl kwa">in</span> R_Range <span class="hl kwa">loop</span>
         Store_of_Max_Flip_Counts<span class="hl sym">(</span>R<span class="hl sym">) :=</span> Max_No_of_Flips_Detected <span class="hl sym">(</span>R<span class="hl sym">);</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>

   <span class="hl kwa">end if</span><span class="hl sym">;</span>

   Max_Flips <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">for</span> R <span class="hl kwa">in</span> R_Range <span class="hl kwa">loop</span>
      <span class="hl kwa">if</span> Store_of_Max_Flip_Counts<span class="hl sym">(</span>R<span class="hl sym">) &gt;</span> Max_Flips <span class="hl kwa">then</span>
         Max_Flips <span class="hl sym">:=</span> Store_of_Max_Flip_Counts<span class="hl sym">(</span>R<span class="hl sym">);</span>
      <span class="hl kwa">end if</span><span class="hl sym">;</span>
   <span class="hl kwa">end loop</span><span class="hl sym">;</span>

   Put <span class="hl sym">(</span><span class="hl str">&quot;Pfannkuchen(&quot;</span><span class="hl sym">);</span> Put <span class="hl sym">(</span>N_image<span class="hl sym">);</span> Put <span class="hl sym">(</span><span class="hl str">&quot;) =&quot;</span><span class="hl sym">);</span>
   Put <span class="hl sym">(</span>Fann_Int<span class="hl kwd">'Image</span> <span class="hl sym">(</span>Max_Flips<span class="hl sym">));</span>

<span class="hl kwa">end</span> Fannkuch<span class="hl sym">;</span>
