<span class="hl slc">// The Computer Language Benchmark Games</span>
<span class="hl slc">// http://shootout.alioth.debian.org/</span>
<span class="hl slc">//</span>
<span class="hl slc">// contributed by James Durbin</span>
<span class="hl slc">// based very closely on Ruby version by jose fco. gonzalez</span>


<span class="hl kwa">def</span> seq <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">StringBuffer</span><span class="hl sym">();</span>
seq <span class="hl sym">=</span> <span class="hl kwc">System</span><span class="hl sym">.</span><span class="hl kwa">in</span><span class="hl sym">.</span><span class="hl kwd">readLines</span><span class="hl sym">().</span><span class="hl kwd">join</span><span class="hl sym">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)+</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>

initialLength <span class="hl sym">=</span> seq<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">();</span>
seq <span class="hl sym">= (</span>seq <span class="hl sym">=</span>~<span class="hl str">&quot;&gt;.*</span><span class="hl esc">\n</span><span class="hl str">|</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">).</span><span class="hl kwd">replaceAll</span><span class="hl sym">(</span><span class="hl str">&quot;&quot;</span><span class="hl sym">);</span>
codeLength <span class="hl sym">=</span> seq<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">();</span>

<span class="hl sym">[</span>
   <span class="hl str">&quot;agggtaaa|tttaccct&quot;</span> <span class="hl sym">,</span>
   <span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="hl sym">,</span>
   <span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="hl sym">,</span>
   <span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="hl sym">,</span>
   <span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="hl sym">,</span>
   <span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="hl sym">,</span>
   <span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="hl sym">,</span>
   <span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="hl sym">,</span>
   <span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span>
<span class="hl sym">].</span>each<span class="hl sym">{</span>
   println <span class="hl str">&quot;$it &quot;</span><span class="hl sym">+(</span>seq <span class="hl sym">=</span>~it<span class="hl sym">).</span><span class="hl kwd">getCount</span><span class="hl sym">();</span>
<span class="hl sym">};</span>


<span class="hl sym">[</span>
   <span class="hl str">'B'</span><span class="hl sym">:</span><span class="hl str">'(c|g|t)'</span><span class="hl sym">,</span> <span class="hl str">'D'</span><span class="hl sym">:</span><span class="hl str">'(a|g|t)'</span><span class="hl sym">,</span> <span class="hl str">'H'</span><span class="hl sym">:</span><span class="hl str">'(a|c|t)'</span><span class="hl sym">,</span> <span class="hl str">'K'</span><span class="hl sym">:</span><span class="hl str">'(g|t)'</span><span class="hl sym">,</span>
   <span class="hl str">'M'</span><span class="hl sym">:</span><span class="hl str">'(a|c)'</span><span class="hl sym">,</span> <span class="hl str">'N'</span><span class="hl sym">:</span><span class="hl str">'(a|c|g|t)'</span><span class="hl sym">,</span> <span class="hl str">'R'</span><span class="hl sym">:</span><span class="hl str">'(a|g)'</span><span class="hl sym">,</span> <span class="hl str">'S'</span><span class="hl sym">:</span><span class="hl str">'(c|t)'</span><span class="hl sym">,</span>
   <span class="hl str">'V'</span><span class="hl sym">:</span><span class="hl str">'(a|c|g)'</span><span class="hl sym">,</span> <span class="hl str">'W'</span><span class="hl sym">:</span><span class="hl str">'(a|t)'</span><span class="hl sym">,</span> <span class="hl str">'Y'</span><span class="hl sym">:</span><span class="hl str">'(c|t)'</span>
<span class="hl sym">].</span>each <span class="hl sym">{</span> f<span class="hl sym">,</span>r <span class="hl sym">-&gt;</span>
   seq <span class="hl sym">= (</span>seq <span class="hl sym">=</span>~ f<span class="hl sym">).</span><span class="hl kwd">replaceAll</span><span class="hl sym">(</span>r<span class="hl sym">);</span>
<span class="hl sym">}</span>

println <span class="hl str">&quot;&quot;</span><span class="hl sym">;</span>
println initialLength<span class="hl sym">;</span>
println codeLength<span class="hl sym">;</span>
println seq<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">();</span>


