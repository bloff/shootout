<span class="hl slc">// The Computer Language Benchmarks Game</span>
<span class="hl slc">// http://shootout.alioth.debian.org/</span>

<span class="hl slc">// Contributed by The Anh Tran</span>

<span class="hl kwa">import</span> scala<span class="hl sym">.</span>io<span class="hl sym">.</span><span class="hl kwc">Source</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span>regex<span class="hl sym">.</span><span class="hl kwc">Pattern</span>
<span class="hl kwa">import</span> scala<span class="hl sym">.</span>collection<span class="hl sym">.</span>immutable<span class="hl sym">.</span><span class="hl kwc">HashMap</span>
<span class="hl kwa">import</span> scala<span class="hl sym">.</span>actors<span class="hl sym">.</span>Futures<span class="hl sym">.</span>future



<span class="hl kwa">object</span> regexdna
<span class="hl sym">{</span>
   <span class="hl kwa">def</span> main<span class="hl sym">(</span>args <span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">String</span><span class="hl sym">]) =</span>
   <span class="hl sym">{</span>
      <span class="hl slc">// load data from stdin</span>
      <span class="hl kwa">var</span> input      <span class="hl sym">=</span> <span class="hl kwc">Source</span> fromInputStream<span class="hl sym">(</span><span class="hl kwc">System</span><span class="hl sym">.</span>in<span class="hl sym">,</span> <span class="hl str">&quot;US-ASCII&quot;</span><span class="hl sym">)</span> mkString
      <span class="hl kwa">val</span> init_len   <span class="hl sym">=</span> input length


      <span class="hl slc">// strip header &amp; newline</span>
      input         <span class="hl sym">=</span> <span class="hl str">&quot;&gt;.*</span><span class="hl esc">\n</span><span class="hl str">|</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">.</span>r replaceAllIn<span class="hl sym">(</span>input<span class="hl sym">,</span> <span class="hl str">&quot;&quot;</span><span class="hl sym">)</span>
      <span class="hl kwa">val</span> strip_len   <span class="hl sym">=</span> input length

      <span class="hl slc">// counting patterns</span>
      <span class="hl kwa">val</span> patterns   <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">(</span>
         <span class="hl str">&quot;agggtaaa|tttaccct&quot;</span> <span class="hl sym">,</span>
         <span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="hl sym">,</span>
         <span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="hl sym">,</span>
         <span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="hl sym">,</span>
         <span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="hl sym">,</span>
         <span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="hl sym">,</span>
         <span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="hl sym">,</span>
         <span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="hl sym">,</span>
         <span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span><span class="hl sym">)</span>

      <span class="hl slc">// queue tasks, each task is handled in a separate thread</span>
      <span class="hl kwa">val</span> count_results   <span class="hl sym">=</span> patterns map<span class="hl sym">(</span> pt <span class="hl sym">=&gt;</span> future<span class="hl sym">(</span>pt<span class="hl sym">.</span>r<span class="hl sym">.</span>findAllIn<span class="hl sym">(</span>input<span class="hl sym">).</span>collect<span class="hl sym">.</span>length<span class="hl sym">) )</span>

      <span class="hl slc">// replace IUB</span>
      <span class="hl kwa">val</span> replace_result   <span class="hl sym">=</span> future<span class="hl sym">(</span>
      <span class="hl sym">{</span>
         <span class="hl kwa">val</span> iub <span class="hl sym">=</span> <span class="hl kwc">HashMap</span><span class="hl sym">(</span>
            <span class="hl str">'B'</span> <span class="hl sym">-&gt;</span> <span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl sym">,</span>
            <span class="hl str">'D'</span> <span class="hl sym">-&gt;</span> <span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl sym">,</span>
            <span class="hl str">'H'</span> <span class="hl sym">-&gt;</span> <span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl sym">,</span>
            <span class="hl str">'K'</span> <span class="hl sym">-&gt;</span> <span class="hl str">&quot;(g|t)&quot;</span><span class="hl sym">,</span>
            <span class="hl str">'M'</span> <span class="hl sym">-&gt;</span> <span class="hl str">&quot;(a|c)&quot;</span><span class="hl sym">,</span>
            <span class="hl str">'N'</span> <span class="hl sym">-&gt;</span> <span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl sym">,</span>
            <span class="hl str">'R'</span> <span class="hl sym">-&gt;</span> <span class="hl str">&quot;(a|g)&quot;</span><span class="hl sym">,</span>
            <span class="hl str">'S'</span> <span class="hl sym">-&gt;</span> <span class="hl str">&quot;(c|g)&quot;</span><span class="hl sym">,</span>
            <span class="hl str">'V'</span> <span class="hl sym">-&gt;</span> <span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl sym">,</span>
            <span class="hl str">'W'</span> <span class="hl sym">-&gt;</span> <span class="hl str">&quot;(a|t)&quot;</span><span class="hl sym">,</span>
            <span class="hl str">'Y'</span> <span class="hl sym">-&gt;</span> <span class="hl str">&quot;(c|t)&quot;</span>  <span class="hl sym">)</span>

         <span class="hl kwa">val</span> buffer   <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">StringBuffer</span><span class="hl sym">((</span>input<span class="hl sym">.</span>length <span class="hl sym">*</span> <span class="hl num">2</span><span class="hl sym">) &gt;&gt;&gt;</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl slc">// input.len * 1.5</span>
         <span class="hl kwa">val</span> matcher   <span class="hl sym">=</span> <span class="hl kwc">Pattern</span> compile <span class="hl str">&quot;[BDHKMNRSVWY]&quot;</span> matcher input

         <span class="hl kwa">while</span> <span class="hl sym">(</span> matcher find <span class="hl sym">)</span>
            matcher appendReplacement<span class="hl sym">(</span> buffer<span class="hl sym">,</span> iub<span class="hl sym">(</span>input<span class="hl sym">(</span>matcher start<span class="hl sym">))  )</span>

         matcher appendTail buffer
         buffer length
      <span class="hl sym">})</span>


      <span class="hl slc">// print results</span>
      <span class="hl kwa">for</span> <span class="hl sym">((</span>pt<span class="hl sym">,</span> cres<span class="hl sym">) &lt;-</span> patterns zip count_results<span class="hl sym">)</span>
         printf<span class="hl sym">(</span> <span class="hl str">&quot;%s %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> pt<span class="hl sym">,</span> cres<span class="hl sym">() )</span>

      printf<span class="hl sym">(</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">%d</span><span class="hl esc">\n</span><span class="hl str">%d</span><span class="hl esc">\n</span><span class="hl str">%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> init_len<span class="hl sym">,</span> strip_len<span class="hl sym">,</span> replace_result<span class="hl sym">() )</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

