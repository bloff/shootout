<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by The Go Authors.</span>
<span class="hl com"> * Based on mandelbrot.c contributed by Greg Buchholz</span>
<span class="hl com"> * flag.Arg hack by Isaac Gouy</span>
<span class="hl com">*/</span>

<span class="hl kwa">package</span> main

<span class="hl kwa">import</span> <span class="hl sym">(</span>
   <span class="hl str">&quot;bufio&quot;</span><span class="hl sym">;</span>
   <span class="hl str">&quot;flag&quot;</span><span class="hl sym">;</span>
   <span class="hl str">&quot;fmt&quot;</span><span class="hl sym">;</span>
   <span class="hl str">&quot;os&quot;</span><span class="hl sym">;</span>
   <span class="hl str">&quot;strconv&quot;</span><span class="hl sym">;</span>
<span class="hl sym">)</span>

<span class="hl kwa">var</span> n <span class="hl sym">=</span> <span class="hl num">0</span>

<span class="hl kwa">func</span> main<span class="hl sym">() {</span>
   flag<span class="hl sym">.</span>Parse<span class="hl sym">();</span>
   <span class="hl kwa">if</span> flag<span class="hl sym">.</span>NArg<span class="hl sym">() &gt;</span> <span class="hl num">0</span> <span class="hl sym">{</span> n<span class="hl sym">,</span>_ <span class="hl sym">=</span> strconv<span class="hl sym">.</span>Atoi<span class="hl sym">(</span> flag<span class="hl sym">.</span>Arg<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">) ) }</span>

   out <span class="hl sym">:=</span> bufio<span class="hl sym">.</span>NewWriter<span class="hl sym">(</span>os<span class="hl sym">.</span>Stdout<span class="hl sym">);</span>
   <span class="hl kwa">defer</span> out<span class="hl sym">.</span>Flush<span class="hl sym">();</span>

   w <span class="hl sym">:=</span> n<span class="hl sym">;</span>
   h <span class="hl sym">:=</span> n<span class="hl sym">;</span>
   bit_num <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   byte_acc <span class="hl sym">:=</span> byte<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span>
   <span class="hl kwa">const</span> Iter <span class="hl sym">=</span> <span class="hl num">50</span><span class="hl sym">;</span>
   <span class="hl kwa">const</span> Zero float64 <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">const</span> Limit <span class="hl sym">=</span> <span class="hl num">2.0</span><span class="hl sym">;</span>

   fmt<span class="hl sym">.</span>Fprintf<span class="hl sym">(</span>out<span class="hl sym">,</span> <span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">%d %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> w<span class="hl sym">,</span> h<span class="hl sym">);</span>

   <span class="hl kwa">for</span> y <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span> y <span class="hl sym">&lt;</span> h<span class="hl sym">;</span> y<span class="hl sym">++ {</span>
      <span class="hl kwa">for</span> x <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span> x<span class="hl sym">&lt;</span>w<span class="hl sym">;</span> x<span class="hl sym">++ {</span>
         Zr<span class="hl sym">,</span> Zi<span class="hl sym">,</span> Tr<span class="hl sym">,</span> Ti <span class="hl sym">:=</span> Zero<span class="hl sym">,</span> Zero<span class="hl sym">,</span> Zero<span class="hl sym">,</span> Zero<span class="hl sym">;</span>
         Cr <span class="hl sym">:= (</span><span class="hl num">2</span><span class="hl sym">*</span>float64<span class="hl sym">(</span>x<span class="hl sym">)/</span>float64<span class="hl sym">(</span>w<span class="hl sym">) -</span> <span class="hl num">1.5</span><span class="hl sym">);</span>
         Ci <span class="hl sym">:= (</span><span class="hl num">2</span><span class="hl sym">*</span>float64<span class="hl sym">(</span>y<span class="hl sym">)/</span>float64<span class="hl sym">(</span>h<span class="hl sym">) -</span> <span class="hl num">1.0</span><span class="hl sym">);</span>

         <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> Iter <span class="hl sym">&amp;&amp; (</span>Tr<span class="hl sym">+</span>Ti <span class="hl sym">&lt;=</span> Limit<span class="hl sym">*</span>Limit<span class="hl sym">);</span> i<span class="hl sym">++ {</span>
            Zi <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">*</span>Zr<span class="hl sym">*</span>Zi <span class="hl sym">+</span> Ci<span class="hl sym">;</span>
            Zr <span class="hl sym">=</span> Tr <span class="hl sym">-</span> Ti <span class="hl sym">+</span> Cr<span class="hl sym">;</span>
            Tr <span class="hl sym">=</span> Zr <span class="hl sym">*</span> Zr<span class="hl sym">;</span>
            Ti <span class="hl sym">=</span> Zi <span class="hl sym">*</span> Zi<span class="hl sym">;</span>
         <span class="hl sym">}</span>

         byte_acc <span class="hl sym">&lt;&lt;=</span> <span class="hl num">1</span><span class="hl sym">;</span>
         <span class="hl kwa">if</span> Tr<span class="hl sym">+</span>Ti <span class="hl sym">&lt;=</span> Limit<span class="hl sym">*</span>Limit <span class="hl sym">{</span>
            byte_acc <span class="hl sym">|=</span> <span class="hl num">0x01</span><span class="hl sym">;</span>
         <span class="hl sym">}</span>

         bit_num<span class="hl sym">++;</span>

         <span class="hl kwa">if</span> bit_num <span class="hl sym">==</span> <span class="hl num">8</span> <span class="hl sym">{</span>
            out<span class="hl sym">.</span>WriteByte<span class="hl sym">(</span>byte_acc<span class="hl sym">);</span>
            byte_acc <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            bit_num <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         <span class="hl sym">}</span> <span class="hl kwa">else if</span> x <span class="hl sym">==</span> w<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl sym">{</span>
            byte_acc <span class="hl sym">&lt;&lt;=</span> uint<span class="hl sym">(</span><span class="hl num">8</span><span class="hl sym">-</span>w<span class="hl sym">%</span><span class="hl num">8</span><span class="hl sym">);</span>
            out<span class="hl sym">.</span>WriteByte<span class="hl sym">(</span>byte_acc<span class="hl sym">);</span>
            byte_acc <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            bit_num <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>
