<span class="hl com">/*</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> * contributed by Rex Kerr</span>
<span class="hl com"> * algorithm follows Java version #4 by Anthony Donnefort</span>
<span class="hl com"> */</span>

<span class="hl kwa">object</span> revcomp <span class="hl kwa">extends</span> java<span class="hl sym">.</span>io<span class="hl sym">.</span><span class="hl kwc">ByteArrayOutputStream</span> <span class="hl sym">{</span>
  <span class="hl kwa">val</span> input <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">Byte</span><span class="hl sym">](</span><span class="hl num">8192</span><span class="hl sym">)</span>

  <span class="hl kwa">val</span> table <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">Byte</span><span class="hl sym">](</span><span class="hl num">128</span><span class="hl sym">)</span>
  <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;-</span> <span class="hl num">0</span> to <span class="hl num">127</span><span class="hl sym">) {</span> table<span class="hl sym">(</span>i<span class="hl sym">) =</span> i<span class="hl sym">.</span>toByte <span class="hl sym">}</span>
  <span class="hl kwa">for</span> <span class="hl sym">((</span>i<span class="hl sym">,</span>o<span class="hl sym">) &lt;-</span> <span class="hl str">&quot;ACGTUMRWSYKVHDB&quot;</span><span class="hl sym">.</span>toList zip <span class="hl str">&quot;TGCAAKYWSRMBDHVN&quot;</span><span class="hl sym">.</span>toList<span class="hl sym">) {</span>
    table<span class="hl sym">(</span>i<span class="hl sym">) =</span> o<span class="hl sym">.</span>toByte
    table<span class="hl sym">(</span>i<span class="hl sym">.</span>toLowerCase<span class="hl sym">) =</span> o<span class="hl sym">.</span>toByte
  <span class="hl sym">}</span>

  <span class="hl kwa">def</span> rcOut <span class="hl sym">= {</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>count <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">) {</span>
      <span class="hl kwa">var</span> begin <span class="hl sym">=</span> <span class="hl num">0</span>
      <span class="hl kwa">var</span> end <span class="hl sym">=</span> count<span class="hl sym">-</span><span class="hl num">1</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>buf<span class="hl sym">(</span>begin<span class="hl sym">) !=</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span> <span class="hl sym">&amp;&amp;</span> begin <span class="hl sym">&lt;</span> count<span class="hl sym">) {</span> begin <span class="hl sym">+=</span> <span class="hl num">1</span> <span class="hl sym">}</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>begin <span class="hl sym">&lt;=</span> end<span class="hl sym">) {</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>buf<span class="hl sym">(</span>begin<span class="hl sym">) ==</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">)</span> begin <span class="hl sym">+=</span> <span class="hl num">1</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>buf<span class="hl sym">(</span>end<span class="hl sym">) ==</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">)</span> end <span class="hl sym">-=</span> <span class="hl num">1</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>begin<span class="hl sym">&lt;=</span>end<span class="hl sym">) {</span>
          <span class="hl kwa">val</span> temp <span class="hl sym">=</span> buf<span class="hl sym">(</span>begin<span class="hl sym">)</span>
          buf<span class="hl sym">(</span>begin<span class="hl sym">) =</span> table<span class="hl sym">(</span>buf<span class="hl sym">(</span>end<span class="hl sym">))</span>
          buf<span class="hl sym">(</span>end<span class="hl sym">) =</span> table<span class="hl sym">(</span>temp<span class="hl sym">)</span>
          begin <span class="hl sym">+=</span> <span class="hl num">1</span>
          end <span class="hl sym">-=</span> <span class="hl num">1</span>
        <span class="hl sym">}</span>
      <span class="hl sym">}</span>
      <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span>write<span class="hl sym">(</span>buf<span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span>count<span class="hl sym">)</span>
    <span class="hl sym">}</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">def</span> main<span class="hl sym">(</span>args<span class="hl sym">:</span><span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">String</span><span class="hl sym">]) = {</span>
    <span class="hl kwa">var</span> n <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">do</span> <span class="hl sym">{</span>
      n <span class="hl sym">=</span> <span class="hl kwc">System</span><span class="hl sym">.</span>in<span class="hl sym">.</span>read<span class="hl sym">(</span>input<span class="hl sym">)</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>n <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">) {</span>
        <span class="hl kwa">var</span> i <span class="hl sym">=</span> <span class="hl num">0</span>
        <span class="hl kwa">var</span> i0 <span class="hl sym">=</span> <span class="hl num">0</span>
        <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> n<span class="hl sym">) {</span>
          <span class="hl kwa">if</span> <span class="hl sym">(</span>input<span class="hl sym">(</span>i<span class="hl sym">)==</span><span class="hl str">'&gt;'</span><span class="hl sym">) {</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>i<span class="hl sym">&gt;</span>i0<span class="hl sym">)</span> write<span class="hl sym">(</span>input<span class="hl sym">,</span>i0<span class="hl sym">,</span>i<span class="hl sym">-</span>i0<span class="hl sym">)</span>
            rcOut
            reset
            i0 <span class="hl sym">=</span> i
          <span class="hl sym">}</span>
          i <span class="hl sym">+=</span> <span class="hl num">1</span>
        <span class="hl sym">}</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>i0<span class="hl sym">&lt;</span>n<span class="hl sym">)</span> write<span class="hl sym">(</span>input<span class="hl sym">,</span>i0<span class="hl sym">,</span>n<span class="hl sym">-</span>i0<span class="hl sym">)</span>
      <span class="hl sym">}</span>
    <span class="hl sym">}</span> <span class="hl kwa">while</span> <span class="hl sym">(</span>n <span class="hl sym">!= -</span><span class="hl num">1</span><span class="hl sym">)</span>
    rcOut
  <span class="hl sym">}</span>
<span class="hl sym">}</span>
