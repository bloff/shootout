<span class="hl com">/*</span>
<span class="hl com">	The Computer Language Shootout</span>
<span class="hl com">	http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">	contributed by Jochen Hinrichsen</span>
<span class="hl com">*/</span>

<span class="hl kwb">double</span> Cr<span class="hl sym">,</span> Ci<span class="hl sym">,</span> Tr<span class="hl sym">,</span> Ti<span class="hl sym">,</span> Zr<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">,</span> Zi<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">,</span> limit_sq <span class="hl sym">=</span> <span class="hl num">4.0</span>
<span class="hl kwb">int</span> res<span class="hl sym">,</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">,</span> x<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">,</span> y<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">,</span> pos<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">,</span> acc<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">,</span> iter <span class="hl sym">=</span> <span class="hl num">50</span>
res <span class="hl sym">= (</span>args<span class="hl sym">.</span>length <span class="hl sym">&gt;=</span> <span class="hl num">1</span><span class="hl sym">)</span> ? <span class="hl kwc">Integer</span><span class="hl sym">.</span><span class="hl kwd">parseInt</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">],</span> <span class="hl num">10</span><span class="hl sym">) :</span> <span class="hl num">200</span>
<span class="hl kwb">int</span> max <span class="hl sym">= (</span>res <span class="hl sym">*</span> res<span class="hl sym">) &gt;&gt;&gt;</span> <span class="hl num">3</span>
<span class="hl kwa">def</span> pbm_data <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl sym">[</span> max <span class="hl sym">]</span>
<span class="hl kwc">String</span> pbm_header <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">String</span><span class="hl sym">(</span><span class="hl str">&quot;P4&quot;</span> <span class="hl sym">+ ((</span><span class="hl kwb">char</span><span class="hl sym">)</span> <span class="hl num">012</span><span class="hl sym">) +</span> res <span class="hl sym">+</span> <span class="hl str">&quot; &quot;</span> <span class="hl sym">+</span> res <span class="hl sym">+ ((</span><span class="hl kwb">char</span><span class="hl sym">)</span> <span class="hl num">012</span><span class="hl sym">))</span>

<span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">write</span><span class="hl sym">(</span>pbm_header<span class="hl sym">.</span><span class="hl kwd">getBytes</span><span class="hl sym">(),</span> <span class="hl num">0</span><span class="hl sym">,</span> pbm_header<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">())</span>

<span class="hl slc">// for ( ; pos &lt; max; x%=res, Zr=Zi=i=0) {</span>
<span class="hl kwa">while</span> <span class="hl sym">(</span>pos <span class="hl sym">&lt;</span> max<span class="hl sym">) {</span>
	Cr <span class="hl sym">= (</span><span class="hl num">2</span><span class="hl sym">*((</span><span class="hl kwb">double</span><span class="hl sym">)</span>x<span class="hl sym">++)/</span>res <span class="hl sym">-</span> <span class="hl num">1.5</span><span class="hl sym">);</span>
	Ci<span class="hl sym">=(</span><span class="hl num">2</span><span class="hl sym">*((</span><span class="hl kwb">double</span><span class="hl sym">)</span>y<span class="hl sym">)/</span>res <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span>

	<span class="hl slc">// for(acc&lt;&lt;=1; (acc&amp;1)==0 &amp;&amp; i++ &lt; iter; acc |= Zr*Zr+Zi*Zi &gt; limit_sq ? 1 : 0) {</span>
	acc<span class="hl sym">&lt;&lt;=</span><span class="hl num">1</span>
	<span class="hl kwa">while</span> <span class="hl sym">(((</span>acc<span class="hl sym">&amp;</span><span class="hl num">1</span><span class="hl sym">)==</span><span class="hl num">0</span><span class="hl sym">) &amp;&amp; (</span>i<span class="hl sym">++ &lt;</span> iter<span class="hl sym">)) {</span>
		Tr <span class="hl sym">=</span> Zr<span class="hl sym">*</span>Zr <span class="hl sym">-</span> Zi<span class="hl sym">*</span>Zi <span class="hl sym">+</span> Cr
		Ti <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">*</span>Zr<span class="hl sym">*</span>Zi <span class="hl sym">+</span> Ci
		Zr <span class="hl sym">=</span> Tr
		Zi <span class="hl sym">=</span> Ti

		<span class="hl slc">// println &quot;Zr^2 + Zi^2 = ${Zr*Zr+Zi*Zi}&quot;</span>
		acc <span class="hl sym">|= (</span>Zr<span class="hl sym">*</span>Zr<span class="hl sym">+</span>Zi<span class="hl sym">*</span>Zi <span class="hl sym">&gt;</span> limit_sq<span class="hl sym">)</span> ? <span class="hl num">1</span> <span class="hl sym">:</span> <span class="hl num">0</span>
		<span class="hl slc">// println &quot;acc = ${acc}&quot;</span>
	<span class="hl sym">}</span>

	<span class="hl kwa">if</span> <span class="hl sym">(</span>x<span class="hl sym">==</span>res<span class="hl sym">) {</span>
		y<span class="hl sym">++</span>
		<span class="hl kwa">if</span> <span class="hl sym">(</span>acc<span class="hl sym">&lt;</span><span class="hl num">256</span><span class="hl sym">)</span> acc <span class="hl sym">&lt;&lt;= (</span><span class="hl num">8</span><span class="hl sym">-</span>res<span class="hl sym">%</span><span class="hl num">8</span><span class="hl sym">)</span>
	<span class="hl sym">}</span>
	<span class="hl kwa">if</span> <span class="hl sym">(</span>acc<span class="hl sym">&gt;</span><span class="hl num">255</span><span class="hl sym">) {</span>
		pbm_data <span class="hl sym">[</span> pos<span class="hl sym">++ ] = (</span><span class="hl kwb">byte</span><span class="hl sym">) (</span>acc^<span class="hl sym">=</span><span class="hl num">255</span><span class="hl sym">)</span>
		acc <span class="hl sym">=</span> <span class="hl num">1</span>
	<span class="hl sym">}</span>

	x<span class="hl sym">%=</span>res
	Zr<span class="hl sym">=</span>Zi<span class="hl sym">=</span>i<span class="hl sym">=</span><span class="hl num">0</span>

	<span class="hl slc">// println &quot;acc = ${acc}&quot;</span>
	<span class="hl slc">// println &quot;pos = ${pos}&quot;</span>
	<span class="hl slc">// println &quot;--------------------------------------&quot;</span>
<span class="hl sym">}</span>

<span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">write</span><span class="hl sym">(</span> pbm_data<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> pos<span class="hl sym">);</span>

<span class="hl slc">// EOF</span>

