<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Benoit Sonntag</span>
<span class="hl com">*/</span>

Section Header

  <span class="hl sym">+</span> name <span class="hl sym">:=</span> KNUCLEOTIDE<span class="hl sym">;</span>

Section Inherit

  <span class="hl sym">-</span> parent_object<span class="hl sym">:</span>OBJECT <span class="hl sym">:=</span> OBJECT<span class="hl sym">;</span>

Section Public

  <span class="hl sym">-</span> buffer<span class="hl sym">:</span>STRING<span class="hl sym">;</span>

  <span class="hl sym">-</span> dico<span class="hl sym">:</span>HASHED_SET<span class="hl sym">[</span>SORTER<span class="hl sym">];</span>

  <span class="hl sym">-</span> idf<span class="hl sym">:</span>STRING_CONSTANT <span class="hl sym">:=</span> <span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl sym">;</span>
  <span class="hl sym">-</span> key<span class="hl sym">:</span>SORTER<span class="hl sym">;</span>
  <span class="hl sym">-</span> key2<span class="hl sym">:</span>SORTER<span class="hl sym">;</span>

  <span class="hl sym">-</span> main <span class="hl sym">&lt;-</span>
  <span class="hl sym">(</span>
    key <span class="hl sym">:=</span> SORTER.clone<span class="hl sym">;</span>
    key2 <span class="hl sym">:=</span> SORTER.clone<span class="hl sym">;</span>
    <span class="hl slc">// Read file.</span>
    buffer <span class="hl sym">:=</span> STRING.create <span class="hl num">10240</span><span class="hl sym">;</span>
    <span class="hl sym">{</span>
      buffer.clear<span class="hl sym">;</span>
      IO.read_line_in buffer<span class="hl sym">;</span>
    <span class="hl sym">}</span>.do_until <span class="hl sym">{</span>buffer.has_prefix <span class="hl str">&quot;&gt;THREE&quot;</span><span class="hl sym">};</span>
    buffer.clear<span class="hl sym">;</span>

    <span class="hl sym">{!</span> IO.end_of_input<span class="hl sym">}</span>.while_do <span class="hl sym">{</span>
      IO.read_line_in buffer<span class="hl sym">;</span>
    <span class="hl sym">};</span>
    buffer.to_upper<span class="hl sym">;</span>
    <span class="hl slc">// Compute frequently.</span>
    dico <span class="hl sym">:=</span> HASHED_SET<span class="hl sym">[</span>SORTER<span class="hl sym">]</span>.create<span class="hl sym">;</span>

    <span class="hl slc">//</span>
    sort <span class="hl num">1</span><span class="hl sym">;</span>
    sort <span class="hl num">2</span><span class="hl sym">;</span>
    <span class="hl slc">//</span>
    key2.init_with <span class="hl sym">(</span>idf.storage<span class="hl sym">);</span>
    display <span class="hl num">3</span><span class="hl sym">;</span>
    display <span class="hl num">4</span><span class="hl sym">;</span>
    display <span class="hl num">6</span><span class="hl sym">;</span>
    display <span class="hl num">12</span><span class="hl sym">;</span>
    display <span class="hl num">18</span><span class="hl sym">;</span>

  <span class="hl sym">);</span>

  <span class="hl sym">-</span> count n<span class="hl sym">:</span>INTEGER <span class="hl sym">&lt;-</span>
  <span class="hl sym">(</span>
    dico.clear<span class="hl sym">;</span>
    <span class="hl sym">(</span>buffer.lower<span class="hl sym">)</span>.to <span class="hl sym">(</span>buffer.upper<span class="hl sym">-</span>n<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span> do <span class="hl sym">{</span> j<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
      key.init_with <span class="hl sym">(</span>buffer.storage <span class="hl sym">+ (</span>j <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">));</span>
      <span class="hl slc">//</span>
      key.set_count n<span class="hl sym">;</span>
      inc_key<span class="hl sym">;</span>
    <span class="hl sym">};</span>
  <span class="hl sym">);</span>

  <span class="hl sym">-</span> inc_key <span class="hl sym">&lt;-</span>
  <span class="hl sym">( +</span> new_key<span class="hl sym">:</span>SORTER<span class="hl sym">;</span>

    new_key <span class="hl sym">:=</span> dico.reference_at key<span class="hl sym">;</span>
    <span class="hl sym">(</span>new_key <span class="hl sym">=</span> NULL<span class="hl sym">)</span>.if <span class="hl sym">{</span>
      new_key <span class="hl sym">:=</span> key.clone<span class="hl sym">;</span>
      dico.add new_key<span class="hl sym">;</span>
    <span class="hl sym">}</span> else <span class="hl sym">{</span>
      new_key.inc_freq<span class="hl sym">;</span>
    <span class="hl sym">};</span>
  <span class="hl sym">);</span>

  <span class="hl sym">-</span> display n<span class="hl sym">:</span>INTEGER <span class="hl sym">&lt;-</span>
  <span class="hl sym">( +</span> ref<span class="hl sym">:</span>SORTER<span class="hl sym">;</span>

    count n<span class="hl sym">;</span>
    key2.set_count n<span class="hl sym">;</span>
    ref <span class="hl sym">:=</span> dico.reference_at key2<span class="hl sym">;</span>
    <span class="hl sym">(</span>ref <span class="hl sym">=</span> NULL<span class="hl sym">)</span>.if <span class="hl sym">{</span>
      <span class="hl str">'0'</span>.print<span class="hl sym">;</span>
    <span class="hl sym">}</span> else <span class="hl sym">{</span>
      ref.freq.print<span class="hl sym">;</span>
    <span class="hl sym">};</span>
    <span class="hl str">'\t'</span>.print<span class="hl sym">;</span>
    key2.print<span class="hl sym">;</span>
    <span class="hl str">'\n'</span>.print<span class="hl sym">;</span>
  <span class="hl sym">);</span>

  <span class="hl sym">-</span> array<span class="hl sym">:</span>NATIVE_ARRAY<span class="hl sym">[</span>SORTER<span class="hl sym">] :=</span> NATIVE_ARRAY<span class="hl sym">[</span>SORTER<span class="hl sym">]</span>.create <span class="hl num">16</span><span class="hl sym">;</span>

  <span class="hl sym">-</span> sort n<span class="hl sym">:</span>INTEGER <span class="hl sym">&lt;-</span>
  <span class="hl sym">( +</span> cnt<span class="hl sym">,</span>low<span class="hl sym">,</span>up<span class="hl sym">,</span>i<span class="hl sym">,</span>freq<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
    <span class="hl sym">+</span> swap<span class="hl sym">:</span>BOOLEAN<span class="hl sym">;</span>
    <span class="hl sym">+</span> s<span class="hl sym">:</span>SORTER<span class="hl sym">;</span>
    <span class="hl sym">+</span> tmp<span class="hl sym">:</span>SORTER<span class="hl sym">;</span>

    count n<span class="hl sym">;</span>
    <span class="hl sym">(</span>dico.lower<span class="hl sym">)</span>.to <span class="hl sym">(</span>dico.upper<span class="hl sym">)</span> do <span class="hl sym">{</span> j<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
      s <span class="hl sym">:=</span> dico.item j<span class="hl sym">;</span>
      array.put s to <span class="hl sym">(</span>j<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">);</span>
      cnt <span class="hl sym">:=</span> cnt <span class="hl sym">+</span> s.freq<span class="hl sym">;</span>
    <span class="hl sym">};</span>

    low <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    up  <span class="hl sym">:=</span> dico.count <span class="hl sym">-</span> <span class="hl num">2</span><span class="hl sym">;</span>
    <span class="hl sym">{</span>
      swap <span class="hl sym">:=</span> FALSE<span class="hl sym">;</span>
      <span class="hl sym">(</span>low<span class="hl sym">)</span>.to <span class="hl sym">(</span>up<span class="hl sym">)</span> do <span class="hl sym">{</span> j<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
        <span class="hl sym">(</span>array.item j.freq <span class="hl sym">&lt;</span> array.item <span class="hl sym">(</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>.freq<span class="hl sym">)</span>.if <span class="hl sym">{</span>
          tmp <span class="hl sym">:=</span> array.item j<span class="hl sym">;</span>
          array.put <span class="hl sym">(</span>array.item <span class="hl sym">(</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">))</span> to j<span class="hl sym">;</span>
          array.put tmp to <span class="hl sym">(</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">);</span>
          swap <span class="hl sym">:=</span> TRUE<span class="hl sym">;</span>
        <span class="hl sym">};</span>
        i <span class="hl sym">:=</span> dico.count <span class="hl sym">-</span> <span class="hl num">2</span> <span class="hl sym">-</span> j<span class="hl sym">;</span>
        <span class="hl sym">(</span>array.item i.freq <span class="hl sym">&lt;</span> array.item <span class="hl sym">(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>.freq<span class="hl sym">)</span>.if <span class="hl sym">{</span>
          tmp <span class="hl sym">:=</span> array.item i<span class="hl sym">;</span>
          array.put <span class="hl sym">(</span>array.item <span class="hl sym">(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">))</span> to i<span class="hl sym">;</span>
          array.put tmp to <span class="hl sym">(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">);</span>
          swap <span class="hl sym">:=</span> TRUE<span class="hl sym">;</span>
        <span class="hl sym">};</span>

      <span class="hl sym">};</span>
      low <span class="hl sym">:=</span> low <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
      up  <span class="hl sym">:=</span> up  <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>
    <span class="hl sym">}</span>.do_while <span class="hl sym">{</span>swap<span class="hl sym">};</span>
    <span class="hl num">0</span>.to <span class="hl sym">(</span>dico.count<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span> do <span class="hl sym">{</span> j<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
      s <span class="hl sym">:=</span> array.item j<span class="hl sym">;</span>
      s.print<span class="hl sym">;</span>
      freq <span class="hl sym">:=</span> s.freq<span class="hl sym">;</span>
      <span class="hl sym">((</span><span class="hl num">100.0</span><span class="hl sym">*</span>freq.to_real_64<span class="hl sym">)/</span>cnt<span class="hl sym">)</span>.print_format_c <span class="hl str">&quot; %.3f\n&quot;</span><span class="hl sym">;</span>
    <span class="hl sym">};</span>
    <span class="hl str">'\n'</span>.print<span class="hl sym">;</span>
  <span class="hl sym">);</span>

