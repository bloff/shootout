<span class="hl slc">% The Computer Language Shootout Benchmarks Game</span>
<span class="hl slc">% http://shootout.alioth.debian.org/</span>
<span class="hl slc">%</span>
<span class="hl slc">% Based on work by Anthony Borla</span>
<span class="hl slc">% Modified for Mercury by Glendon Holst</span>

<span class="hl sym">:-</span> module fasta<span class="hl sym">.</span>
<span class="hl sym">:-</span> interface<span class="hl sym">.</span>
<span class="hl sym">:-</span> import_module io<span class="hl sym">.</span>

<span class="hl sym">:-</span> pred main<span class="hl sym">(</span>io<span class="hl sym">::</span>di<span class="hl sym">,</span> io<span class="hl sym">::</span>uo<span class="hl sym">)</span> <span class="hl kwa">is</span> det<span class="hl sym">.</span>

<span class="hl slc">% ----------------------------------------------------------------------</span>

<span class="hl sym">:-</span> implementation<span class="hl sym">.</span>

<span class="hl sym">:-</span> import_module list<span class="hl sym">.</span>
<span class="hl sym">:-</span> import_module int<span class="hl sym">.</span>
<span class="hl sym">:-</span> import_module bool<span class="hl sym">.</span>
<span class="hl sym">:-</span> import_module string<span class="hl sym">.</span>
<span class="hl sym">:-</span> import_module char<span class="hl sym">.</span>
<span class="hl sym">:-</span> import_module <span class="hl kwb">float</span><span class="hl sym">.</span>
<span class="hl sym">:-</span> import_module exception<span class="hl sym">.</span>

<span class="hl slc">% ----------------------------------------------------------------------</span>

main<span class="hl sym">(!</span>IO<span class="hl sym">) :-</span>
	io<span class="hl sym">.</span>command_line_arguments<span class="hl sym">(</span>Args<span class="hl sym">, !</span>IO<span class="hl sym">),</span>
	<span class="hl sym">(</span>
		if
			Args <span class="hl sym">= [</span>AString<span class="hl sym">|</span>_<span class="hl sym">],</span>
			string<span class="hl sym">.</span>to_int<span class="hl sym">(</span>string<span class="hl sym">.</span>strip<span class="hl sym">(</span>AString<span class="hl sym">),</span> Aint<span class="hl sym">)</span>
		then
			N <span class="hl sym">=</span> Aint
		else
			N <span class="hl kwa">is</span> <span class="hl num">2500000</span>
	<span class="hl sym">),</span>

	LineLength <span class="hl sym">=</span> <span class="hl num">60</span><span class="hl sym">,</span>
	ALU <span class="hl sym">=</span> <span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCT&quot;</span> <span class="hl sym">++</span>
		<span class="hl str">&quot;GAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAA&quot;</span> <span class="hl sym">++</span>
		<span class="hl str">&quot;TTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCT&quot;</span> <span class="hl sym">++</span>
		<span class="hl str">&quot;TGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAGA&quot;</span> <span class="hl sym">++</span>
		<span class="hl str">&quot;GCGAGACTCCGTCTCAAAAA&quot;</span><span class="hl sym">,</span>
	IUB <span class="hl sym">= [	{</span><span class="hl str">'a'</span><span class="hl sym">,</span> <span class="hl num">0.27</span><span class="hl sym">}, {</span><span class="hl str">'c'</span><span class="hl sym">,</span> <span class="hl num">0.12</span><span class="hl sym">}, {</span><span class="hl str">'g'</span><span class="hl sym">,</span> <span class="hl num">0.12</span><span class="hl sym">}, {</span><span class="hl str">'t'</span><span class="hl sym">,</span> <span class="hl num">0.27</span><span class="hl sym">},</span>
			<span class="hl sym">{</span><span class="hl str">'B'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">}, {</span><span class="hl str">'D'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">}, {</span><span class="hl str">'H'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">}, {</span><span class="hl str">'K'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">},</span>
			<span class="hl sym">{</span><span class="hl str">'M'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">}, {</span><span class="hl str">'N'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">}, {</span><span class="hl str">'R'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">}, {</span><span class="hl str">'S'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">},</span>
			<span class="hl sym">{</span><span class="hl str">'V'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">}, {</span><span class="hl str">'W'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">}, {</span><span class="hl str">'Y'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">}],</span>
	HOMOSAPIENS <span class="hl sym">= [	{</span><span class="hl str">'a'</span><span class="hl sym">,</span> <span class="hl num">0.3029549426680</span><span class="hl sym">}, {</span><span class="hl str">'c'</span><span class="hl sym">,</span> <span class="hl num">0.1979883004921</span><span class="hl sym">},</span>
					<span class="hl sym">{</span><span class="hl str">'g'</span><span class="hl sym">,</span> <span class="hl num">0.1975473066391</span><span class="hl sym">}, {</span><span class="hl str">'t'</span><span class="hl sym">,</span> <span class="hl num">0.3015094502008</span><span class="hl sym">}],</span>
	RS0 <span class="hl sym">=</span> init_random<span class="hl sym">(</span><span class="hl num">42</span><span class="hl sym">),</span>

	N1 <span class="hl kwa">is</span> N <span class="hl sym">*</span> <span class="hl num">2</span><span class="hl sym">,</span>
	N2 <span class="hl kwa">is</span> N <span class="hl sym">*</span> <span class="hl num">3</span><span class="hl sym">,</span>
	N3 <span class="hl kwa">is</span> N <span class="hl sym">*</span> <span class="hl num">5</span><span class="hl sym">,</span>

	repeat_fasta<span class="hl sym">(</span><span class="hl str">&quot;ONE&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;Homo sapiens alu&quot;</span><span class="hl sym">,</span> ALU<span class="hl sym">,</span> LineLength<span class="hl sym">,</span> N1<span class="hl sym">, !</span>IO<span class="hl sym">),</span>

	make_cumulative<span class="hl sym">(</span>IUB<span class="hl sym">,</span> CVIUB<span class="hl sym">),</span>
	random_fasta<span class="hl sym">(</span><span class="hl str">&quot;TWO&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;IUB ambiguity codes&quot;</span><span class="hl sym">,</span>
		CVIUB<span class="hl sym">,</span> LineLength<span class="hl sym">,</span> N2<span class="hl sym">,</span> RS0<span class="hl sym">,</span> RS1<span class="hl sym">, !</span>IO<span class="hl sym">),</span>

	make_cumulative<span class="hl sym">(</span>HOMOSAPIENS<span class="hl sym">,</span> CVHOMOSAPIENS<span class="hl sym">),</span>
	random_fasta<span class="hl sym">(</span><span class="hl str">&quot;THREE&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;Homo sapiens frequency&quot;</span><span class="hl sym">,</span>
		CVHOMOSAPIENS<span class="hl sym">,</span> LineLength<span class="hl sym">,</span> N3<span class="hl sym">,</span> RS1<span class="hl sym">,</span> _<span class="hl sym">, !</span>IO<span class="hl sym">).</span>

<span class="hl slc">% ------------------------------- %</span>

<span class="hl sym">:-</span> pred repeat_fasta<span class="hl sym">(</span>string<span class="hl sym">,</span> string<span class="hl sym">,</span> string<span class="hl sym">,</span> int<span class="hl sym">,</span> int<span class="hl sym">,</span> io<span class="hl sym">,</span> io<span class="hl sym">)</span> <span class="hl kwa">is</span> det<span class="hl sym">.</span>
<span class="hl sym">:-</span> mode repeat_fasta<span class="hl sym">(</span>in<span class="hl sym">,</span> in<span class="hl sym">,</span> in<span class="hl sym">,</span> in<span class="hl sym">,</span> in<span class="hl sym">,</span> di<span class="hl sym">,</span> uo<span class="hl sym">)</span> <span class="hl kwa">is</span> det<span class="hl sym">.</span>
<span class="hl sym">:-</span> pred repeat_fasta_<span class="hl sym">(</span>int<span class="hl sym">,</span> int<span class="hl sym">,</span> string<span class="hl sym">,</span> int<span class="hl sym">,</span> int<span class="hl sym">,</span> io<span class="hl sym">,</span> io<span class="hl sym">)</span> <span class="hl kwa">is</span> det<span class="hl sym">.</span>
<span class="hl sym">:-</span> mode repeat_fasta_<span class="hl sym">(</span>in<span class="hl sym">,</span> in<span class="hl sym">,</span> in<span class="hl sym">,</span> in<span class="hl sym">,</span> in<span class="hl sym">,</span> di<span class="hl sym">,</span> uo<span class="hl sym">)</span> <span class="hl kwa">is</span> det<span class="hl sym">.</span>

repeat_fasta<span class="hl sym">(</span>Id<span class="hl sym">,</span> Desc<span class="hl sym">,</span> ALU<span class="hl sym">,</span> LineLength<span class="hl sym">,</span> N<span class="hl sym">, !</span>IO<span class="hl sym">) :-</span>
	ALULength <span class="hl sym">=</span> string<span class="hl sym">.</span>length<span class="hl sym">(</span>ALU<span class="hl sym">),</span>
	io<span class="hl sym">.</span>format<span class="hl sym">(</span><span class="hl str">&quot;&gt;%s %s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,[</span>s<span class="hl sym">(</span>Id<span class="hl sym">),</span> s<span class="hl sym">(</span>Desc<span class="hl sym">)], !</span>IO<span class="hl sym">),</span>
	repeat_fasta_<span class="hl sym">(</span>N<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> ALU<span class="hl sym">,</span> ALULength<span class="hl sym">,</span> LineLength<span class="hl sym">, !</span>IO<span class="hl sym">).</span>

<span class="hl slc">% ------------- %</span>

repeat_fasta_<span class="hl sym">(</span>N<span class="hl sym">,</span> Q<span class="hl sym">,</span> ALU<span class="hl sym">,</span> ALULength<span class="hl sym">,</span> LineLength<span class="hl sym">, !</span>IO<span class="hl sym">) :-</span>
<span class="hl sym">(</span>
	N <span class="hl sym">=&lt;</span> <span class="hl num">0</span> <span class="hl sym">-&gt;</span> <span class="hl kwa">true</span>
<span class="hl sym">;</span>
	<span class="hl sym">(</span>
		N <span class="hl sym">&lt;</span> LineLength <span class="hl sym">-&gt;</span> L1 <span class="hl sym">=</span> N
	<span class="hl sym">;</span>
		L1 <span class="hl sym">=</span> LineLength
	<span class="hl sym">),</span>
	<span class="hl sym">(</span>
		L1 <span class="hl sym">+</span> Q <span class="hl sym">&lt;</span> ALULength <span class="hl sym">-&gt;</span>
		Lineout <span class="hl sym">=</span> string<span class="hl sym">.</span>substring<span class="hl sym">(</span>ALU<span class="hl sym">,</span> Q<span class="hl sym">,</span> L1<span class="hl sym">),</span>
		Q1 <span class="hl kwa">is</span> L1 <span class="hl sym">+</span> Q<span class="hl sym">,</span>
		io<span class="hl sym">.</span>format<span class="hl sym">(</span><span class="hl str">&quot;%s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,[</span>s<span class="hl sym">(</span>Lineout<span class="hl sym">)], !</span>IO<span class="hl sym">)</span>
	<span class="hl sym">;</span>
		Prefix <span class="hl sym">=</span> string<span class="hl sym">.</span>substring<span class="hl sym">(</span>ALU<span class="hl sym">,</span> Q<span class="hl sym">,</span> ALULength <span class="hl sym">-</span> Q<span class="hl sym">),</span>
		Q1 <span class="hl kwa">is</span> L1 <span class="hl sym">-</span> string<span class="hl sym">.</span>length<span class="hl sym">(</span>Prefix<span class="hl sym">),</span>
		Segment <span class="hl sym">=</span> string<span class="hl sym">.</span>substring<span class="hl sym">(</span>ALU<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> Q1<span class="hl sym">),</span>
		io<span class="hl sym">.</span>format<span class="hl sym">(</span><span class="hl str">&quot;%s%s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,[</span>s<span class="hl sym">(</span>Prefix<span class="hl sym">),</span> s<span class="hl sym">(</span>Segment<span class="hl sym">)], !</span>IO<span class="hl sym">)</span>
	<span class="hl sym">),</span>
	repeat_fasta_<span class="hl sym">(</span>N <span class="hl sym">-</span> L1<span class="hl sym">,</span> Q1<span class="hl sym">,</span> ALU<span class="hl sym">,</span> ALULength<span class="hl sym">,</span> L1<span class="hl sym">, !</span>IO<span class="hl sym">)</span>
<span class="hl sym">).</span>

<span class="hl slc">% ------------------------------- %</span>

<span class="hl sym">:-</span> pred random_fasta<span class="hl sym">(</span>
	string<span class="hl sym">::</span>in<span class="hl sym">,</span> string<span class="hl sym">::</span>in<span class="hl sym">,</span>
	list<span class="hl sym">({</span>char<span class="hl sym">,</span> <span class="hl kwb">float</span><span class="hl sym">})::</span>in<span class="hl sym">,</span>
	int<span class="hl sym">::</span>in<span class="hl sym">,</span> int<span class="hl sym">::</span>in<span class="hl sym">,</span>
	random_state<span class="hl sym">::</span>in<span class="hl sym">,</span> random_state<span class="hl sym">::</span>out<span class="hl sym">,</span>
	io<span class="hl sym">::</span>di<span class="hl sym">,</span> io<span class="hl sym">::</span>uo<span class="hl sym">)</span> <span class="hl kwa">is</span> det<span class="hl sym">.</span>
<span class="hl sym">:-</span> pred random_fasta_<span class="hl sym">(</span>
	int<span class="hl sym">::</span>in<span class="hl sym">,</span> list<span class="hl sym">({</span>char<span class="hl sym">,</span> <span class="hl kwb">float</span><span class="hl sym">})::</span>in<span class="hl sym">,</span> int<span class="hl sym">::</span>in<span class="hl sym">,</span>
	random_state<span class="hl sym">::</span>in<span class="hl sym">,</span> random_state<span class="hl sym">::</span>out<span class="hl sym">,</span>
	io<span class="hl sym">::</span>di<span class="hl sym">,</span> io<span class="hl sym">::</span>uo<span class="hl sym">)</span> <span class="hl kwa">is</span> det<span class="hl sym">.</span>

random_fasta<span class="hl sym">(</span>Id<span class="hl sym">,</span> Desc<span class="hl sym">,</span> CumTbl<span class="hl sym">,</span> LineLength<span class="hl sym">,</span> N<span class="hl sym">, !</span>RS<span class="hl sym">, !</span>IO<span class="hl sym">) :-</span>
	io<span class="hl sym">.</span>format<span class="hl sym">(</span><span class="hl str">&quot;&gt;%s %s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,[</span>s<span class="hl sym">(</span>Id<span class="hl sym">),</span> s<span class="hl sym">(</span>Desc<span class="hl sym">)], !</span>IO<span class="hl sym">),</span>
	random_fasta_<span class="hl sym">(</span>N<span class="hl sym">,</span> CumTbl<span class="hl sym">,</span> LineLength<span class="hl sym">, !</span>RS<span class="hl sym">, !</span>IO<span class="hl sym">).</span>

<span class="hl slc">% ------------- %</span>

random_fasta_<span class="hl sym">(</span>N<span class="hl sym">,</span> CumTbl<span class="hl sym">,</span> LineLength<span class="hl sym">, !</span>RS<span class="hl sym">, !</span>IO<span class="hl sym">) :-</span>
<span class="hl sym">(</span>
	N <span class="hl sym">=&lt;</span> <span class="hl num">0</span> <span class="hl sym">-&gt;</span> <span class="hl kwa">true</span>
<span class="hl sym">;</span>
	<span class="hl sym">(</span>
		N <span class="hl sym">&lt;</span> LineLength <span class="hl sym">-&gt;</span> L1 <span class="hl sym">=</span> N
	<span class="hl sym">;</span>
		L1 <span class="hl sym">=</span> LineLength
	<span class="hl sym">),</span>
	gen_line<span class="hl sym">(</span>L1<span class="hl sym">,</span> CumTbl<span class="hl sym">,</span> <span class="hl str">&quot;&quot;</span><span class="hl sym">,</span> Lineout<span class="hl sym">, !</span>RS<span class="hl sym">),</span>
	io<span class="hl sym">.</span>format<span class="hl sym">(</span><span class="hl str">&quot;%s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,[</span>s<span class="hl sym">(</span>Lineout<span class="hl sym">)], !</span>IO<span class="hl sym">),</span>
	random_fasta_<span class="hl sym">(</span>N <span class="hl sym">-</span> L1<span class="hl sym">,</span> CumTbl<span class="hl sym">,</span> L1<span class="hl sym">, !</span>RS<span class="hl sym">, !</span>IO<span class="hl sym">)</span>
<span class="hl sym">).</span>

<span class="hl slc">% ------------- %</span>

<span class="hl sym">:-</span> pred gen_line<span class="hl sym">(</span>
	int<span class="hl sym">,</span>
	list<span class="hl sym">({</span>char<span class="hl sym">,</span> <span class="hl kwb">float</span><span class="hl sym">}),</span>
	string<span class="hl sym">,</span>
	string<span class="hl sym">,</span>
	random_state<span class="hl sym">,</span>
	random_state<span class="hl sym">)</span> <span class="hl kwa">is</span> det<span class="hl sym">.</span>
<span class="hl sym">:-</span> mode gen_line<span class="hl sym">(</span>in<span class="hl sym">,</span> in<span class="hl sym">,</span> in<span class="hl sym">,</span> out<span class="hl sym">,</span> in<span class="hl sym">,</span> out<span class="hl sym">)</span> <span class="hl kwa">is</span> det<span class="hl sym">.</span>

gen_line<span class="hl sym">(</span>N<span class="hl sym">,</span> CumTbl<span class="hl sym">,</span> Acc<span class="hl sym">,</span> Result<span class="hl sym">, !</span>RS<span class="hl sym">) :-</span>
<span class="hl sym">(</span>
	N <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl sym">-&gt;</span> Result <span class="hl sym">=</span> Acc
<span class="hl sym">;</span>
	select_random<span class="hl sym">(</span>CumTbl<span class="hl sym">,</span> C<span class="hl sym">, !</span>RS<span class="hl sym">),</span>
	gen_line<span class="hl sym">(</span>N<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> CumTbl<span class="hl sym">,</span> Acc <span class="hl sym">++</span> string<span class="hl sym">.</span>char_to_string<span class="hl sym">(</span>C<span class="hl sym">),</span> Result<span class="hl sym">, !</span>RS<span class="hl sym">)</span>
<span class="hl sym">).</span>

<span class="hl slc">% ------------------------------- %</span>

<span class="hl sym">:-</span> pred make_cumulative<span class="hl sym">(</span>list<span class="hl sym">({</span>char<span class="hl sym">,</span> <span class="hl kwb">float</span><span class="hl sym">}),</span> list<span class="hl sym">({</span>char<span class="hl sym">,</span> <span class="hl kwb">float</span><span class="hl sym">}))</span> <span class="hl kwa">is</span> det<span class="hl sym">.</span>
<span class="hl sym">:-</span> mode make_cumulative<span class="hl sym">(</span>in<span class="hl sym">,</span> out<span class="hl sym">)</span> <span class="hl kwa">is</span> det<span class="hl sym">.</span>
<span class="hl sym">:-</span> pred make_cumulative_<span class="hl sym">(</span>
	list<span class="hl sym">({</span>char<span class="hl sym">,</span> <span class="hl kwb">float</span><span class="hl sym">}),</span> list<span class="hl sym">({</span>char<span class="hl sym">,</span> <span class="hl kwb">float</span><span class="hl sym">}),</span>
	<span class="hl kwb">float</span><span class="hl sym">)</span> <span class="hl kwa">is</span> det<span class="hl sym">.</span>
<span class="hl sym">:-</span> mode make_cumulative_<span class="hl sym">(</span>in<span class="hl sym">,</span> out<span class="hl sym">,</span> in<span class="hl sym">)</span> <span class="hl kwa">is</span> det<span class="hl sym">.</span>

make_cumulative<span class="hl sym">(</span>L<span class="hl sym">,</span> RL<span class="hl sym">) :-</span> make_cumulative_<span class="hl sym">(</span>L<span class="hl sym">,</span> RL<span class="hl sym">,</span> <span class="hl num">0.0</span><span class="hl sym">).</span>

make_cumulative_<span class="hl sym">(</span>L<span class="hl sym">,</span> R<span class="hl sym">,</span> CV<span class="hl sym">) :-</span>
<span class="hl sym">(</span>
	L <span class="hl sym">= [{</span>K<span class="hl sym">,</span> V<span class="hl sym">}|</span>Ts<span class="hl sym">] -&gt;</span>
	<span class="hl sym">(</span>
		CV1 <span class="hl kwa">is</span> CV <span class="hl sym">+</span> V<span class="hl sym">,</span>
		R <span class="hl sym">= [{</span>K<span class="hl sym">,</span> CV1<span class="hl sym">}|</span>Ts1<span class="hl sym">],</span>
		make_cumulative_<span class="hl sym">(</span>Ts<span class="hl sym">,</span> Ts1<span class="hl sym">,</span> CV1<span class="hl sym">)</span>
	<span class="hl sym">)</span>
<span class="hl sym">;</span>
	R <span class="hl sym">=</span> L
<span class="hl sym">).</span>

<span class="hl slc">% ------------- %</span>

<span class="hl sym">:-</span> pred select_random<span class="hl sym">(</span>
	list<span class="hl sym">({</span>char<span class="hl sym">,</span> <span class="hl kwb">float</span><span class="hl sym">}),</span>
	char<span class="hl sym">,</span>
	random_state<span class="hl sym">,</span>
	random_state<span class="hl sym">)</span> <span class="hl kwa">is</span> det<span class="hl sym">.</span>
<span class="hl sym">:-</span> mode select_random<span class="hl sym">(</span>in<span class="hl sym">,</span> out<span class="hl sym">,</span> in<span class="hl sym">,</span> out<span class="hl sym">)</span> <span class="hl kwa">is</span> det<span class="hl sym">.</span>
<span class="hl sym">:-</span> pred select_random_<span class="hl sym">(</span>list<span class="hl sym">({</span>char<span class="hl sym">,</span> <span class="hl kwb">float</span><span class="hl sym">}),</span> <span class="hl kwb">float</span><span class="hl sym">,</span> char<span class="hl sym">)</span> <span class="hl kwa">is</span> det<span class="hl sym">.</span>
<span class="hl sym">:-</span> mode select_random_<span class="hl sym">(</span>in<span class="hl sym">,</span> in<span class="hl sym">,</span> out<span class="hl sym">)</span> <span class="hl kwa">is</span> det<span class="hl sym">.</span>

<span class="hl sym">:-</span> type fasta__error <span class="hl sym">---&gt;</span> error<span class="hl sym">.</span>

select_random<span class="hl sym">(</span>L<span class="hl sym">,</span> RK<span class="hl sym">, !</span>RS<span class="hl sym">) :-</span>
	R <span class="hl sym">=</span> gen_random<span class="hl sym">(</span><span class="hl num">1.0</span><span class="hl sym">, !.</span>RS<span class="hl sym">, !:</span>RS<span class="hl sym">),</span>
	select_random_<span class="hl sym">(</span>L<span class="hl sym">,</span> R<span class="hl sym">,</span> RK<span class="hl sym">).</span>

select_random_<span class="hl sym">(</span>T<span class="hl sym">,</span> R<span class="hl sym">,</span> RK<span class="hl sym">) :-</span>
<span class="hl sym">(</span>
	T <span class="hl sym">= [{</span>K<span class="hl sym">,</span> V<span class="hl sym">}|</span>Ts<span class="hl sym">] -&gt; (</span>R <span class="hl sym">&lt;</span> V <span class="hl sym">-&gt;</span> RK <span class="hl sym">=</span> K <span class="hl sym">;</span> select_random_<span class="hl sym">(</span>Ts<span class="hl sym">,</span> R<span class="hl sym">,</span> RK<span class="hl sym">))</span>
<span class="hl sym">;</span>
	<span class="hl kwb">throw</span><span class="hl sym">(</span>fasta__error<span class="hl sym">)</span>
<span class="hl sym">).</span>

<span class="hl slc">% ------------------------------- %</span>
<span class="hl sym">:-</span> type random_state <span class="hl sym">==</span> int<span class="hl sym">.</span>

<span class="hl sym">:-</span> func init_random<span class="hl sym">(</span>int<span class="hl sym">) =</span> random_state<span class="hl sym">.</span>

init_random<span class="hl sym">(</span>Seed<span class="hl sym">) =</span> Seed<span class="hl sym">.</span>

<span class="hl sym">:-</span> func gen_random<span class="hl sym">(</span><span class="hl kwb">float</span><span class="hl sym">,</span> random_state<span class="hl sym">,</span> random_state<span class="hl sym">) =</span> <span class="hl kwb">float</span><span class="hl sym">.</span>
<span class="hl sym">:-</span> mode gen_random<span class="hl sym">(</span>in<span class="hl sym">,</span> in<span class="hl sym">,</span> out<span class="hl sym">) =</span> out<span class="hl sym">.</span>

gen_random<span class="hl sym">(</span>UB<span class="hl sym">,</span> RS0<span class="hl sym">,</span> RS<span class="hl sym">) =</span> RV <span class="hl sym">:-</span>
	IA <span class="hl sym">=</span> <span class="hl num">3877</span><span class="hl sym">,</span> IC <span class="hl sym">=</span> <span class="hl num">29573</span><span class="hl sym">,</span> IM <span class="hl sym">=</span> <span class="hl num">139968</span><span class="hl sym">,</span>
	RS <span class="hl kwa">is</span> <span class="hl sym">(</span>RS0 <span class="hl sym">*</span> IA <span class="hl sym">+</span> IC<span class="hl sym">)</span> <span class="hl kwa">mod</span> IM<span class="hl sym">,</span>
	RV <span class="hl sym">=</span> UB <span class="hl sym">*</span> <span class="hl kwb">float</span><span class="hl sym">(</span>RS<span class="hl sym">) /</span> <span class="hl kwb">float</span><span class="hl sym">(</span>IM<span class="hl sym">).</span>

<span class="hl slc">% ------------------------------- %</span>
