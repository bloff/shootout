<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Isaac Gouy</span>
<span class="hl com">*/</span>

<span class="hl kwa">class</span> TreeNode <span class="hl sym">{</span>
   <span class="hl sym">?</span>TreeNode left <span class="hl sym">=</span> <span class="hl kwa">null</span><span class="hl sym">;</span>
   <span class="hl sym">?</span>TreeNode right <span class="hl sym">=</span> <span class="hl kwa">null</span><span class="hl sym">;</span>
   <span class="hl kwb">int</span> item<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl sym">?</span>TreeNode makeTree<span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">,</span> <span class="hl kwb">int</span> depth<span class="hl sym">) =</span>
   depth <span class="hl sym">==</span> <span class="hl num">0</span>
      <span class="hl sym">?</span> <span class="hl kwa">new</span> TreeNode<span class="hl sym">(</span>item<span class="hl sym">:</span> i<span class="hl sym">)</span>
      <span class="hl sym">:</span> <span class="hl kwa">new</span> TreeNode<span class="hl sym">(</span>
         left<span class="hl sym">:</span> makeTree<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>i<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> depth<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">),</span>
         right<span class="hl sym">:</span> makeTree<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>i<span class="hl sym">,</span> depth<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">),</span>
         item<span class="hl sym">:</span> i<span class="hl sym">);</span>

<span class="hl kwb">int</span> check<span class="hl sym">(?</span>TreeNode tree<span class="hl sym">) =</span>
   tree <span class="hl sym">==</span> <span class="hl kwa">null</span> <span class="hl sym">?</span> <span class="hl num">0</span> <span class="hl sym">:</span> tree<span class="hl sym">.</span>item <span class="hl sym">+</span> check<span class="hl sym">(</span>tree<span class="hl sym">.</span>left<span class="hl sym">) -</span> check<span class="hl sym">(</span>tree<span class="hl sym">.</span>right<span class="hl sym">);</span>

<span class="hl sym">(</span><span class="hl kwb">int</span><span class="hl sym">,</span><span class="hl kwb">int</span><span class="hl sym">,</span><span class="hl kwb">int</span><span class="hl sym">)</span> treeChecksum<span class="hl sym">((</span><span class="hl kwb">int</span> iterations<span class="hl sym">,</span> <span class="hl kwb">int</span> depth<span class="hl sym">)){</span>
   <span class="hl kwa">var</span> sum <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">;</span> i<span class="hl sym">&lt;=</span>iterations<span class="hl sym">;</span> i<span class="hl sym">++)</span>
      sum <span class="hl sym">+=</span> makeTree<span class="hl sym">(</span>i<span class="hl sym">,</span>depth<span class="hl sym">).</span>check <span class="hl sym">+</span> makeTree<span class="hl sym">(-</span>i<span class="hl sym">,</span>depth<span class="hl sym">).</span>check<span class="hl sym">;</span>
   <span class="hl kwa">return</span> <span class="hl sym">(</span>iterations<span class="hl sym">,</span>depth<span class="hl sym">,</span>sum<span class="hl sym">);</span>
<span class="hl sym">}</span>


<span class="hl kwa">class</span> Worker <span class="hl kwa">extends</span> Thread <span class="hl sym">{</span>
   List<span class="hl sym">&lt;(</span><span class="hl kwb">int</span><span class="hl sym">,</span><span class="hl kwb">int</span><span class="hl sym">)&gt;</span> work<span class="hl sym">;</span>
   LinkedList<span class="hl sym">&lt;(</span><span class="hl kwb">int</span><span class="hl sym">,</span><span class="hl kwb">int</span><span class="hl sym">,</span><span class="hl kwb">int</span><span class="hl sym">)&gt;</span> results <span class="hl sym">=</span> <span class="hl kwa">new</span> LinkedList<span class="hl sym">();</span>

   override <span class="hl kwb">void</span> run<span class="hl sym">() {</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span>w <span class="hl sym">:</span> work<span class="hl sym">)</span>
         results<span class="hl sym">.</span>add <span class="hl sym">(</span>treeChecksum<span class="hl sym">(</span>w<span class="hl sym">));</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>



<span class="hl kwa">let</span> <span class="hl kwb">int</span> minDepth <span class="hl sym">=</span> <span class="hl num">4</span><span class="hl sym">;</span>

<span class="hl kwb">void</span> main<span class="hl sym">(</span>String<span class="hl sym">[]</span> args<span class="hl sym">){</span>
   <span class="hl kwa">let</span> n <span class="hl sym">=</span> Integer<span class="hl sym">.</span>parseInt<span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>
   <span class="hl kwa">let</span> maxDepth <span class="hl sym">=</span> Math<span class="hl sym">.</span>max<span class="hl sym">(</span>minDepth <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">,</span> n<span class="hl sym">);</span>

   <span class="hl kwa">let</span> LinkedList<span class="hl sym">&lt;(</span><span class="hl kwb">int</span><span class="hl sym">,</span><span class="hl kwb">int</span><span class="hl sym">)&gt;</span> worklist <span class="hl sym">=</span> <span class="hl kwa">new</span> LinkedList<span class="hl sym">();</span>

   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> depth<span class="hl sym">=</span>minDepth<span class="hl sym">;</span> depth<span class="hl sym">&lt;=</span>maxDepth<span class="hl sym">;</span> depth<span class="hl sym">+=</span><span class="hl num">2</span><span class="hl sym">){</span>
      <span class="hl kwa">let</span> iterations <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>maxDepth <span class="hl sym">-</span> depth <span class="hl sym">+</span> minDepth<span class="hl sym">);</span>
      worklist<span class="hl sym">.</span>add<span class="hl sym">( (</span>iterations<span class="hl sym">,</span>depth<span class="hl sym">) );</span>
   <span class="hl sym">}</span>


   <span class="hl kwa">let</span> stretchDepth <span class="hl sym">=</span> maxDepth <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>

   print<span class="hl sym">(</span><span class="hl str">&quot;stretch tree&quot;</span><span class="hl sym">,</span> stretchDepth<span class="hl sym">,</span> makeTree<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span>stretchDepth<span class="hl sym">).</span>check<span class="hl sym">);</span>
   <span class="hl kwa">let</span> longLivedTree <span class="hl sym">=</span> makeTree<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span>maxDepth<span class="hl sym">);</span>

   <span class="hl kwa">let</span> shareSize <span class="hl sym">=</span> worklist<span class="hl sym">.</span>size<span class="hl sym">() /</span> <span class="hl num">2</span><span class="hl sym">;</span>
   <span class="hl kwa">let</span> shares <span class="hl sym">= [</span> worklist<span class="hl sym">.</span>slice<span class="hl sym">(</span>to<span class="hl sym">:</span>shareSize<span class="hl sym">),</span> worklist<span class="hl sym">.</span>slice<span class="hl sym">(</span>from<span class="hl sym">:</span>shareSize<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)];</span>

   <span class="hl kwa">let</span> workers <span class="hl sym">=</span> shares<span class="hl sym">.</span>map<span class="hl sym">(</span>List<span class="hl sym">&lt;(</span><span class="hl kwb">int</span><span class="hl sym">,</span><span class="hl kwb">int</span><span class="hl sym">)&gt;</span> w <span class="hl sym">=&gt;</span>  <span class="hl kwa">new</span> Worker<span class="hl sym">(</span>work<span class="hl sym">:</span>w<span class="hl sym">));</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span>w <span class="hl sym">:</span> workers<span class="hl sym">)</span> w<span class="hl sym">.</span>start<span class="hl sym">();</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span>w <span class="hl sym">:</span> workers<span class="hl sym">)</span> w<span class="hl sym">.</span>join<span class="hl sym">();</span>

   <span class="hl kwa">for</span> <span class="hl sym">(</span>w <span class="hl sym">:</span> workers<span class="hl sym">)</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span>r <span class="hl sym">:</span> w<span class="hl sym">.</span>results<span class="hl sym">)</span> print<span class="hl sym">(</span>r<span class="hl sym">);</span>

   print<span class="hl sym">(</span><span class="hl str">&quot;long lived tree&quot;</span><span class="hl sym">,</span> maxDepth<span class="hl sym">,</span> longLivedTree<span class="hl sym">.</span>check<span class="hl sym">);</span>
<span class="hl sym">}</span>



<span class="hl kwb">void</span> print<span class="hl sym">(</span>String name<span class="hl sym">,</span> <span class="hl kwb">int</span> depth<span class="hl sym">,</span> <span class="hl kwb">int</span> check<span class="hl sym">) =</span>
   println<span class="hl sym">(</span>name <span class="hl sym">+</span> <span class="hl str">&quot; of depth &quot;</span> <span class="hl sym">+</span> depth <span class="hl sym">+</span> <span class="hl str">&quot;\t check: &quot;</span> <span class="hl sym">+</span> check<span class="hl sym">);</span>

<span class="hl kwb">void</span> print<span class="hl sym">((</span><span class="hl kwb">int</span> iterations<span class="hl sym">,</span> <span class="hl kwb">int</span> depth<span class="hl sym">,</span> <span class="hl kwb">int</span> check<span class="hl sym">)) =</span>
   print<span class="hl sym">(</span>iterations<span class="hl sym">*</span><span class="hl num">2</span> <span class="hl sym">+</span> <span class="hl str">&quot;\t trees&quot;</span><span class="hl sym">,</span> depth<span class="hl sym">,</span> check<span class="hl sym">);</span>
