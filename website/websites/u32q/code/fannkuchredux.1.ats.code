<span class="hl com">(*</span>
<span class="hl com">** The Computer Language Benchmarks Game</span>
<span class="hl com">** http://shootout.alioth.debian.org/</span>
<span class="hl com">**</span>
<span class="hl com">** contributed by Hongwei Xi</span>
<span class="hl com">**</span>
<span class="hl com">** compilation command:</span>
<span class="hl com">**   atscc -fomit-frame-pointer -O3 fannkuch-redux.dats -o fannkuch-redux</span>
<span class="hl com">*)</span>

<span class="hl com">(* ****** ****** *)</span>

staload _<span class="hl com">(*anonymous*)</span> <span class="hl sym">=</span> <span class="hl str">&quot;prelude/DATS/array.dats&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">macdef</span> iarr <span class="hl sym">(</span>n<span class="hl sym">) =</span> array_make_elt <span class="hl sym">(,(</span>n<span class="hl sym">)+</span><span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">)</span>
<span class="hl kwa">typedef</span> iarr <span class="hl sym">(</span>n<span class="hl sym">:</span>int<span class="hl sym">) =</span> array <span class="hl sym">(</span>natLte n<span class="hl sym">,</span> n<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl sym">%{</span>^
<span class="hl slc">// HX: it is really difficult to beat [memcpy] :)</span>
static inline
ats_void_type iarr_copy
  <span class="hl sym">(</span>ats_ptr_type src<span class="hl sym">,</span> ats_ptr_type dst<span class="hl sym">,</span> ats_int_type n<span class="hl sym">) {</span>
  memcpy <span class="hl sym">((</span>int*)dst<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">, (</span>int*)src<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span>  n <span class="hl sym">*</span> sizeof<span class="hl sym">(</span>ats_int_type<span class="hl sym">)) ;</span>
  return <span class="hl sym">;</span>
<span class="hl sym">}</span> <span class="hl slc">// end of iarr_copy</span>
<span class="hl sym">%}</span> <span class="hl slc">// end of [%{^]</span>
<span class="hl kwa">extern fun</span> iarr_copy <span class="hl sym">{</span>n<span class="hl sym">:</span>nat<span class="hl sym">}</span>
  <span class="hl sym">(</span>src<span class="hl sym">:</span> iarr n<span class="hl sym">,</span> dst<span class="hl sym">:</span> iarr n<span class="hl sym">,</span> n<span class="hl sym">:</span> int n<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl str">&quot;iarr_copy&quot;</span>
<span class="hl slc">// end of [iarr_copy]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">fn</span> fprint_iarr <span class="hl sym">{</span>n<span class="hl sym">:</span>nat<span class="hl sym">}</span>
  <span class="hl sym">(</span>out<span class="hl sym">:</span> FILEref<span class="hl sym">,</span> A<span class="hl sym">:</span> iarr n<span class="hl sym">,</span> n<span class="hl sym">:</span> int n<span class="hl sym">):</span> void <span class="hl sym">= ()</span> <span class="hl kwa">where</span> <span class="hl sym">{</span>
  <span class="hl kwa">var</span> i<span class="hl sym">:</span> intGte <span class="hl num">1</span> <span class="hl sym">=</span> <span class="hl num">1</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;=</span> n<span class="hl sym">) (</span>fprint_int <span class="hl sym">(</span>out<span class="hl sym">,</span> A<span class="hl sym">[</span>i<span class="hl sym">]);</span> i <span class="hl sym">:=</span> i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> fprint_char <span class="hl sym">(</span>out<span class="hl sym">,</span> '\n'<span class="hl sym">)</span>
<span class="hl sym">}</span> <span class="hl com">(* end of [fprint_iarr] *)</span>
<span class="hl kwa">macdef</span> print_iarr <span class="hl sym">(</span>A<span class="hl sym">,</span> n<span class="hl sym">) =</span> fprint_iarr <span class="hl sym">(</span>stdout_ref<span class="hl sym">, ,(</span>A<span class="hl sym">), ,(</span>n<span class="hl sym">))</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl sym">%{</span>^
int thePermCnt <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
int thePermCnt_get <span class="hl sym">() {</span> return thePermCnt <span class="hl sym">; }</span>
void thePermCnt_inc <span class="hl sym">() {</span>
  thePermCnt <span class="hl sym">+=</span> <span class="hl num">1</span> <span class="hl sym">;</span> <span class="hl kwa">if</span> <span class="hl sym">(</span>thePermCnt <span class="hl sym">==</span> <span class="hl num">1048576</span><span class="hl sym">)</span> thePermCnt <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> return <span class="hl sym">;</span>
<span class="hl sym">}</span>
int theCheckSum <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
int theCheckSum_get <span class="hl sym">() {</span> return theCheckSum <span class="hl sym">; }</span>
void theCheckSum_add <span class="hl sym">(</span>ats_int_type x<span class="hl sym">) {</span> theCheckSum <span class="hl sym">+=</span> x <span class="hl sym">;</span> return <span class="hl sym">; }</span>
<span class="hl sym">%}</span> <span class="hl slc">// end of [%{^]</span>
<span class="hl kwa">extern fun</span> thePermCnt_get <span class="hl sym">():</span> int <span class="hl sym">=</span> <span class="hl str">&quot;thePermCnt_get&quot;</span>
<span class="hl kwa">extern fun</span> thePermCnt_inc <span class="hl sym">():</span> void <span class="hl sym">=</span> <span class="hl str">&quot;thePermCnt_inc&quot;</span>
<span class="hl kwa">extern fun</span> theCheckSum_get <span class="hl sym">():</span> int <span class="hl sym">=</span> <span class="hl str">&quot;theCheckSum_get&quot;</span>
<span class="hl kwa">extern fun</span> theCheckSum_add <span class="hl sym">(</span>x<span class="hl sym">:</span> int<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl str">&quot;theCheckSum_add&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">fun</span> perm_rotate
  <span class="hl sym">{</span>n<span class="hl sym">,</span>i<span class="hl sym">:</span>int <span class="hl sym">|</span> <span class="hl num">1</span> <span class="hl sym">&lt;=</span> i<span class="hl sym">;</span> i <span class="hl sym">&lt;=</span> n<span class="hl sym">}</span>
  <span class="hl sym">(</span>P<span class="hl sym">:</span> iarr n<span class="hl sym">,</span> i<span class="hl sym">:</span> int i<span class="hl sym">):</span> void <span class="hl sym">= ()</span> <span class="hl kwa">where</span> <span class="hl sym">{</span>
  <span class="hl kwa">var</span> k<span class="hl sym">:</span> intGte <span class="hl num">1</span> <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span> <span class="hl kwa">var</span> k1<span class="hl sym">:</span> int?<span class="hl sym">;</span> <span class="hl kwa">val</span> P1 <span class="hl sym">=</span> P<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> <span class="hl kwa">while</span> <span class="hl sym">(</span>k <span class="hl sym">&lt;</span> i<span class="hl sym">) (</span>k1 <span class="hl sym">:=</span> k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">;</span> P<span class="hl sym">[</span>k<span class="hl sym">] :=</span> P<span class="hl sym">[</span>k1<span class="hl sym">];</span> k <span class="hl sym">:=</span> k1<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> P<span class="hl sym">[</span>i<span class="hl sym">] :=</span> P1
<span class="hl sym">}</span> <span class="hl com">(* end of [perm_rotate] *)</span>

<span class="hl kwa">fun</span> perm_next <span class="hl sym">{</span>n<span class="hl sym">,</span>i<span class="hl sym">:</span>int <span class="hl sym">|</span> <span class="hl num">1</span> <span class="hl sym">&lt;=</span> i<span class="hl sym">;</span> i <span class="hl sym">&lt;=</span> n<span class="hl sym">} (</span>
    C<span class="hl sym">:</span> iarr n<span class="hl sym">,</span> P<span class="hl sym">:</span> iarr n<span class="hl sym">,</span> n<span class="hl sym">:</span> int n<span class="hl sym">,</span> i<span class="hl sym">:</span> int i
  <span class="hl sym">) :</span> natLte <span class="hl sym">(</span>n<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) =</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> x <span class="hl sym">=</span> C<span class="hl sym">[</span>i<span class="hl sym">];</span> <span class="hl kwa">val</span> x1 <span class="hl sym">=</span> x<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">;</span> <span class="hl kwa">val</span> <span class="hl sym">() =</span> perm_rotate <span class="hl sym">{</span>n<span class="hl sym">,</span>i<span class="hl sym">} (</span>P<span class="hl sym">,</span> i<span class="hl sym">)</span>
<span class="hl kwa">in</span>
  <span class="hl kwa">case</span><span class="hl sym">+</span> <span class="hl num">0</span> <span class="hl kwa">of</span>
  <span class="hl sym">|</span> _ <span class="hl kwa">when</span> x1 <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl sym">=&gt; (</span>C<span class="hl sym">[</span>i<span class="hl sym">] :=</span> x1<span class="hl sym">;</span> i<span class="hl sym">)</span>
  <span class="hl sym">|</span> _ <span class="hl com">(* x1 = 0 *)</span> <span class="hl sym">=&gt;</span> <span class="hl kwa">let</span>
      <span class="hl kwa">val</span> <span class="hl sym">() =</span> C<span class="hl sym">[</span>i<span class="hl sym">] :=</span> i<span class="hl sym">;</span> <span class="hl kwa">val</span> i1 <span class="hl sym">=</span> i <span class="hl sym">+</span> <span class="hl num">1</span>
    <span class="hl kwa">in</span>
      <span class="hl kwa">if</span> i1 <span class="hl sym">&lt;=</span> n <span class="hl kwa">then</span> perm_next <span class="hl sym">(</span>C<span class="hl sym">,</span> P<span class="hl sym">,</span> n<span class="hl sym">,</span> i1<span class="hl sym">)</span> <span class="hl kwa">else</span> i1
    <span class="hl kwa">end</span>
<span class="hl kwa">end</span> <span class="hl com">(* end of [perm_next] *)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">fun</span> fannkuch_count <span class="hl sym">{</span>n<span class="hl sym">:</span>int <span class="hl sym">|</span> n <span class="hl sym">&gt;=</span> <span class="hl num">2</span><span class="hl sym">}</span>
  <span class="hl sym">(</span>C<span class="hl sym">:</span> iarr n<span class="hl sym">,</span> P<span class="hl sym">:</span> iarr n<span class="hl sym">,</span> S<span class="hl sym">:</span> iarr n<span class="hl sym">,</span> n<span class="hl sym">:</span> int n<span class="hl sym">,</span> max<span class="hl sym">:</span> int<span class="hl sym">):</span> int <span class="hl sym">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">fun</span> rev0
    <span class="hl sym">{</span>l<span class="hl sym">,</span>u<span class="hl sym">:</span>int <span class="hl sym">|</span> <span class="hl num">1</span> <span class="hl sym">&lt;=</span> l<span class="hl sym">;</span> l <span class="hl sym">&lt;=</span> u<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">;</span> u <span class="hl sym">&lt;=</span> n<span class="hl sym">}</span>
    <span class="hl sym">(</span>S<span class="hl sym">:</span> iarr n<span class="hl sym">,</span> l<span class="hl sym">:</span> int l<span class="hl sym">,</span> u<span class="hl sym">:</span> int u<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl kwa">if</span> <span class="hl sym">(</span>l <span class="hl sym">&lt;</span> u<span class="hl sym">)</span> <span class="hl kwa">then let</span>
      <span class="hl kwa">val</span> tmp <span class="hl sym">=</span> S<span class="hl sym">[</span>u<span class="hl sym">]</span> <span class="hl kwa">in</span> S<span class="hl sym">[</span>u<span class="hl sym">] :=</span> S<span class="hl sym">[</span>l<span class="hl sym">];</span> S<span class="hl sym">[</span>l<span class="hl sym">] :=</span> tmp<span class="hl sym">;</span> rev0 <span class="hl sym">(</span>S<span class="hl sym">,</span> l<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> u<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">fn</span> fannkuch_rev1
    <span class="hl sym">{</span>u<span class="hl sym">:</span>int <span class="hl sym">|</span> <span class="hl num">1</span> <span class="hl sym">&lt;</span> u<span class="hl sym">;</span> u <span class="hl sym">&lt;=</span> n<span class="hl sym">} (</span>S<span class="hl sym">:</span> iarr n<span class="hl sym">,</span> u<span class="hl sym">:</span> int u<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl kwa">let</span>
    <span class="hl kwa">val</span> tmp <span class="hl sym">=</span> S<span class="hl sym">[</span>u<span class="hl sym">]</span> <span class="hl kwa">in</span>
    S<span class="hl sym">[</span>u<span class="hl sym">] :=</span> S<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">];</span> S<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">] :=</span> tmp<span class="hl sym">;</span> <span class="hl kwa">if</span> tmp <span class="hl sym">&lt;&gt;</span> <span class="hl num">1</span> <span class="hl kwa">then</span> rev0 <span class="hl sym">(</span>S<span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">,</span> u<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [fannkuch_rev1]</span>
  <span class="hl kwa">var</span> max<span class="hl sym">:</span> int <span class="hl sym">=</span> max
  <span class="hl kwa">val</span> <span class="hl sym">() =</span>
    <span class="hl kwa">if</span> P<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">] =</span> <span class="hl num">1</span> <span class="hl kwa">then</span> <span class="hl sym">()</span> <span class="hl kwa">else let</span>
      <span class="hl kwa">var</span> cnt<span class="hl sym">:</span> int <span class="hl sym">=</span> <span class="hl num">0</span>
      <span class="hl kwa">val</span> <span class="hl sym">() =</span> iarr_copy <span class="hl sym">(</span>P<span class="hl sym">,</span> S<span class="hl sym">,</span> n<span class="hl sym">)</span>
      <span class="hl kwa">var</span> S1<span class="hl sym">:</span> natLte n <span class="hl sym">=</span> S<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]</span>
      <span class="hl kwa">val</span> <span class="hl sym">() =</span> <span class="hl kwa">while</span> <span class="hl sym">(</span>S1 <span class="hl sym">&gt;</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">begin</span>
        cnt <span class="hl sym">:=</span> cnt <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span> fannkuch_rev1 <span class="hl sym">(</span>S<span class="hl sym">,</span> S1<span class="hl sym">);</span> S1 <span class="hl sym">:=</span> S<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]</span>
      <span class="hl kwa">end</span> <span class="hl com">(* end of [val] *)</span>
      <span class="hl kwa">val</span> <span class="hl sym">() =</span> <span class="hl kwa">if</span> max <span class="hl sym">&lt;</span> cnt <span class="hl kwa">then</span> max <span class="hl sym">:=</span> cnt
      <span class="hl kwa">val</span> thePermCnt <span class="hl sym">=</span> thePermCnt_get <span class="hl sym">()</span>
      <span class="hl kwa">val</span> <span class="hl sym">() =</span> <span class="hl kwa">if</span> thePermCnt mod <span class="hl num">2</span> <span class="hl sym">=</span> <span class="hl num">0</span>
        <span class="hl kwa">then</span> theCheckSum_add <span class="hl sym">(</span>cnt<span class="hl sym">)</span> <span class="hl kwa">else</span> theCheckSum_add <span class="hl sym">(</span>~cnt<span class="hl sym">)</span>
      <span class="hl slc">// end of [val]</span>
    <span class="hl kwa">in</span>
      <span class="hl slc">// nothing</span>
    <span class="hl kwa">end</span> <span class="hl com">(* end of [if] *)</span>
  <span class="hl slc">// end of [val]</span>
  <span class="hl kwa">val</span> n1 <span class="hl sym">=</span> perm_next <span class="hl sym">(</span>C<span class="hl sym">,</span> P<span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> thePermCnt_inc <span class="hl sym">()</span>
<span class="hl kwa">in</span>
  <span class="hl kwa">if</span> n1 <span class="hl sym">&lt;=</span> n <span class="hl kwa">then</span> fannkuch_count <span class="hl sym">(</span>C<span class="hl sym">,</span> P<span class="hl sym">,</span> S<span class="hl sym">,</span> n<span class="hl sym">,</span> max<span class="hl sym">)</span> <span class="hl kwa">else</span> max
<span class="hl kwa">end</span> <span class="hl com">(* end of [fannkuch] *)</span>

<span class="hl kwa">fun</span> iarr_init <span class="hl sym">{</span>n<span class="hl sym">:</span>nat<span class="hl sym">} (</span>A<span class="hl sym">:</span> iarr n<span class="hl sym">,</span> n<span class="hl sym">:</span> int n<span class="hl sym">):</span> void <span class="hl sym">=</span>
  <span class="hl kwa">let var</span> i<span class="hl sym">:</span> intGte <span class="hl num">1</span> <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl kwa">in while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;=</span> n<span class="hl sym">) (</span>A<span class="hl sym">[</span>i<span class="hl sym">] :=</span> i<span class="hl sym">;</span> i <span class="hl sym">:=</span> i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">end</span>
<span class="hl slc">// end of [iarr_init]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">implement</span> main <span class="hl sym">(</span>argc<span class="hl sym">,</span> argv<span class="hl sym">) =</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> assert <span class="hl sym">(</span>argc <span class="hl sym">&gt;=</span> <span class="hl num">2</span><span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">[</span>n<span class="hl sym">:</span>int<span class="hl sym">]</span> n <span class="hl sym">=</span> int1_of argv<span class="hl sym">.[</span><span class="hl num">1</span><span class="hl sym">]</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> assert <span class="hl sym">(</span>n <span class="hl sym">&gt;=</span> <span class="hl num">2</span><span class="hl sym">)</span>
  <span class="hl kwa">val</span> sz <span class="hl sym">=</span> size1_of_int1 <span class="hl sym">(</span>n<span class="hl sym">)</span>
  <span class="hl kwa">val</span> C <span class="hl sym">=</span> iarr sz<span class="hl sym">;</span> <span class="hl kwa">val</span> <span class="hl sym">() =</span> iarr_init <span class="hl sym">(</span>C<span class="hl sym">,</span> n<span class="hl sym">)</span>
  <span class="hl kwa">val</span> P <span class="hl sym">=</span> iarr sz<span class="hl sym">;</span> <span class="hl kwa">val</span> <span class="hl sym">() =</span> iarr_init <span class="hl sym">(</span>P<span class="hl sym">,</span> n<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> iarr_init <span class="hl sym">(</span>C<span class="hl sym">,</span> n<span class="hl sym">);</span> <span class="hl kwa">val</span> <span class="hl sym">() =</span> iarr_init <span class="hl sym">(</span>P<span class="hl sym">,</span> n<span class="hl sym">);</span> <span class="hl kwa">val</span> S <span class="hl sym">=</span> iarr sz
  <span class="hl kwa">val</span> ans <span class="hl sym">=</span> fannkuch_count <span class="hl sym">(</span>C<span class="hl sym">,</span> P<span class="hl sym">,</span> S<span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">)</span>
<span class="hl kwa">in</span>
  printf <span class="hl sym">(</span><span class="hl str">&quot;%i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> &#64;<span class="hl sym">(</span>theCheckSum_get<span class="hl sym">()));</span>
  printf <span class="hl sym">(</span><span class="hl str">&quot;Pfannkuchen(%i) = %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> &#64;<span class="hl sym">(</span>n<span class="hl sym">,</span> ans<span class="hl sym">))</span>
<span class="hl kwa">end</span> <span class="hl com">(* end of [main] *)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl com">(* end of [fannkuch-redux.dats] *)</span>
