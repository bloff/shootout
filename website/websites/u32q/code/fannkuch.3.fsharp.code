<span class="hl com">(*</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> * contributed by Alex Peake</span>
<span class="hl com"> *)</span>


#light
<span class="hl kwa">open</span> <span class="hl kwd">System</span>

<span class="hl kwa">let</span> fannkuch <span class="hl kwd">N</span> <span class="hl sym">=</span>
    <span class="hl kwa">let</span> perm <span class="hl sym">= [|</span> <span class="hl num">1</span><span class="hl sym">..</span><span class="hl kwd">N</span> <span class="hl sym">|]</span>
    <span class="hl kwa">let</span> count <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>create <span class="hl kwd">N</span> <span class="hl num">0</span>
    <span class="hl kwa">let</span> flipper <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>create <span class="hl kwd">N</span> <span class="hl num">0</span>

    <span class="hl kwa">let</span> makeNext <span class="hl sym">(</span>perm <span class="hl sym">:</span> <span class="hl kwb">int</span><span class="hl sym">[]) =</span>
        <span class="hl kwa">let rec</span> loop j <span class="hl sym">=</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>count<span class="hl sym">.[</span>j <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">] &lt;&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">then</span> <span class="hl kwd">Some</span> <span class="hl sym">(</span>perm<span class="hl sym">)</span>
            <span class="hl kwa">else if</span> j <span class="hl sym">=</span> <span class="hl kwd">N</span> <span class="hl kwa">then</span> <span class="hl kwd">None</span>
            <span class="hl kwa">else</span>
                <span class="hl kwa">let</span> tmp <span class="hl sym">=</span> perm<span class="hl sym">.[</span><span class="hl num">0</span><span class="hl sym">]</span>
                <span class="hl kwa">for</span> k <span class="hl kwa">in</span> <span class="hl num">0</span><span class="hl sym">..(</span>j <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">do</span>
                    perm<span class="hl sym">.[</span>k<span class="hl sym">] &lt;-</span> perm<span class="hl sym">.[</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">]</span>
                perm<span class="hl sym">.[</span>j<span class="hl sym">] &lt;-</span> tmp

                count<span class="hl sym">.[</span>j<span class="hl sym">] &lt;- (</span>count<span class="hl sym">.[</span>j<span class="hl sym">] +</span> <span class="hl num">1</span><span class="hl sym">) % (</span>j <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
                loop <span class="hl sym">(</span>j <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
        loop <span class="hl num">1</span>

    <span class="hl kwa">for</span> e <span class="hl kwa">in</span> perm <span class="hl kwa">do</span> printf <span class="hl str">&quot;%d&quot;</span> e
    <span class="hl kwa">do</span> printfn <span class="hl str">&quot;&quot;</span>

    <span class="hl kwa">let rec</span> repeat maxFlips print <span class="hl sym">=</span>
        <span class="hl kwa">match</span> <span class="hl sym">(</span>makeNext perm<span class="hl sym">)</span> <span class="hl kwa">with</span>
        <span class="hl sym">|</span> <span class="hl kwd">Some</span> <span class="hl sym">(</span>perm<span class="hl sym">) -&gt;</span>
            <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl num">0</span><span class="hl sym">..</span><span class="hl kwd">N</span><span class="hl sym">-</span><span class="hl num">1</span> <span class="hl kwa">do</span>
                flipper<span class="hl sym">.[</span>i<span class="hl sym">] &lt;-</span> perm<span class="hl sym">.[</span>i<span class="hl sym">]</span>

            <span class="hl kwa">let mutable</span> numberFlips <span class="hl sym">=</span> <span class="hl num">0</span>
            <span class="hl kwa">while</span> <span class="hl sym">(</span>flipper<span class="hl sym">.[</span><span class="hl num">0</span><span class="hl sym">] &lt;&gt;</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">do</span>
                <span class="hl kwa">let</span> f0 <span class="hl sym">= (</span>flipper<span class="hl sym">.[</span><span class="hl num">0</span><span class="hl sym">] -</span> <span class="hl num">1</span><span class="hl sym">)</span>
                <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl num">0</span><span class="hl sym">..</span>f0 <span class="hl sym">/</span> <span class="hl num">2</span> <span class="hl kwa">do</span>
                    <span class="hl kwa">let</span> temp <span class="hl sym">=</span> flipper<span class="hl sym">.[</span>i<span class="hl sym">]</span>
                    flipper<span class="hl sym">.[</span>i<span class="hl sym">] &lt;-</span> flipper<span class="hl sym">.[</span>f0 <span class="hl sym">-</span> i<span class="hl sym">]</span>
                    flipper<span class="hl sym">.[</span>f0 <span class="hl sym">-</span> i<span class="hl sym">] &lt;-</span> temp

                numberFlips <span class="hl sym">&lt;-</span> numberFlips <span class="hl sym">+</span> <span class="hl num">1</span>

            <span class="hl kwa">if</span> <span class="hl sym">(</span>print <span class="hl sym">&gt;</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">then</span>
                <span class="hl kwa">for</span> e <span class="hl kwa">in</span> perm <span class="hl kwa">do</span> printf <span class="hl str">&quot;%d&quot;</span> e
                <span class="hl kwa">do</span> printfn <span class="hl str">&quot;&quot;</span>
            repeat <span class="hl sym">(</span><span class="hl kwa">if</span> numberFlips <span class="hl sym">&gt;</span> maxFlips <span class="hl kwa">then</span> numberFlips <span class="hl kwa">else</span> maxFlips<span class="hl sym">) (</span>print <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span>
        <span class="hl sym">|</span> <span class="hl kwd">None</span> <span class="hl sym">-&gt;</span>
            maxFlips

    repeat <span class="hl num">0 30</span>


<span class="hl sym">[&lt;</span><span class="hl kwd">EntryPoint</span><span class="hl sym">&gt;]</span>
<span class="hl kwa">let</span> main<span class="hl sym">(</span>args<span class="hl sym">) =</span>
    <span class="hl kwa">let</span> x <span class="hl sym">=</span> <span class="hl kwa">if</span> args<span class="hl sym">.</span><span class="hl kwd">Length</span> <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span> <span class="hl kwb">int</span> args<span class="hl sym">.[</span><span class="hl num">0</span><span class="hl sym">]</span> <span class="hl kwa">else</span> <span class="hl num">7</span>
    printfn <span class="hl str">&quot;Pfannkuchen(%d) = %d&quot;</span> x <span class="hl sym">(</span>fannkuch x<span class="hl sym">)</span>
    <span class="hl num">0</span>



