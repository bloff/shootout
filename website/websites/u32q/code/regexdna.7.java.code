<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Jason Nordwick</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> java<span class="hl sym">.</span>io<span class="hl sym">.</span>FileDescriptor<span class="hl sym">;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>io<span class="hl sym">.</span><span class="hl kwc">FileInputStream</span><span class="hl sym">;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>nio<span class="hl sym">.</span><span class="hl kwc">ByteBuffer</span><span class="hl sym">;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>nio<span class="hl sym">.</span>channels<span class="hl sym">.</span><span class="hl kwc">FileChannel</span><span class="hl sym">;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span>regex<span class="hl sym">.</span><span class="hl kwc">Matcher</span><span class="hl sym">;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span>regex<span class="hl sym">.</span><span class="hl kwc">Pattern</span><span class="hl sym">;</span>

<span class="hl kwa">final class</span> ByteWrapper <span class="hl kwa">implements</span> <span class="hl kwc">CharSequence</span> <span class="hl sym">{</span>

   <span class="hl kwa">public</span> <span class="hl kwb">byte</span><span class="hl sym">[]</span> backing<span class="hl sym">;</span>
   <span class="hl kwa">public</span> <span class="hl kwb">int</span> length<span class="hl sym">;</span>

   <span class="hl kwa">public</span> <span class="hl kwd">ByteWrapper</span><span class="hl sym">(</span> <span class="hl kwb">byte</span><span class="hl sym">[]</span> backing <span class="hl sym">) {</span>
      <span class="hl kwa">this</span><span class="hl sym">(</span> backing<span class="hl sym">,</span> backing<span class="hl sym">.</span>length <span class="hl sym">);</span>
   <span class="hl sym">}</span>
   
   <span class="hl kwa">public</span> <span class="hl kwd">ByteWrapper</span><span class="hl sym">(</span> <span class="hl kwb">byte</span><span class="hl sym">[]</span> backing<span class="hl sym">,</span> <span class="hl kwb">int</span> length <span class="hl sym">) {</span>
      <span class="hl kwa">this</span><span class="hl sym">.</span>backing <span class="hl sym">=</span> backing<span class="hl sym">;</span>
      <span class="hl kwa">this</span><span class="hl sym">.</span>length <span class="hl sym">=</span> length<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">public</span> <span class="hl kwb">int</span> <span class="hl kwd">length</span><span class="hl sym">() {</span>
      <span class="hl kwa">return</span> length<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">public</span> <span class="hl kwb">char</span> <span class="hl kwd">charAt</span><span class="hl sym">(</span><span class="hl kwb">int</span> index<span class="hl sym">) {</span>
      <span class="hl kwa">return</span> <span class="hl sym">(</span><span class="hl kwb">char</span><span class="hl sym">)</span> backing<span class="hl sym">[</span>index<span class="hl sym">];</span>
   <span class="hl sym">}</span>
   
   <span class="hl kwa">public</span> <span class="hl kwc">CharSequence</span> <span class="hl kwd">subSequence</span><span class="hl sym">(</span><span class="hl kwb">int</span> start<span class="hl sym">,</span> <span class="hl kwb">int</span> end<span class="hl sym">) {</span>
      <span class="hl kwa">throw new</span> <span class="hl kwc">UnsupportedOperationException</span><span class="hl sym">();</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>


<span class="hl kwa">public final class</span> regexdna <span class="hl sym">{</span>
   
   <span class="hl kwa">private static</span> <span class="hl kwc">Pattern</span> comments <span class="hl sym">=</span> <span class="hl kwc">Pattern</span><span class="hl sym">.</span><span class="hl kwd">compile</span><span class="hl sym">(</span><span class="hl str">&quot;&gt;.*</span><span class="hl esc">\n</span><span class="hl str">|</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">);</span>
   
   <span class="hl kwa">private static</span> <span class="hl kwc">String</span><span class="hl sym">[][]</span> codes <span class="hl sym">=</span>
      <span class="hl sym">{{</span><span class="hl str">&quot;B&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl sym">},</span>
      <span class="hl sym">{</span><span class="hl str">&quot;D&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl sym">},</span>
      <span class="hl sym">{</span><span class="hl str">&quot;H&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl sym">},</span>
      <span class="hl sym">{</span><span class="hl str">&quot;K&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(g|t)&quot;</span><span class="hl sym">},</span>
      <span class="hl sym">{</span><span class="hl str">&quot;M&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c)&quot;</span><span class="hl sym">},</span>
      <span class="hl sym">{</span><span class="hl str">&quot;N&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl sym">},</span>
      <span class="hl sym">{</span><span class="hl str">&quot;R&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|g)&quot;</span><span class="hl sym">},</span>
      <span class="hl sym">{</span><span class="hl str">&quot;S&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|g)&quot;</span><span class="hl sym">},</span>
      <span class="hl sym">{</span><span class="hl str">&quot;V&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl sym">},</span>
      <span class="hl sym">{</span><span class="hl str">&quot;W&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|t)&quot;</span><span class="hl sym">},</span>
      <span class="hl sym">{</span><span class="hl str">&quot;Y&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|t)&quot;</span><span class="hl sym">} };</span>
   
   <span class="hl kwa">private static</span> <span class="hl kwc">Pattern</span> codesPat <span class="hl sym">=</span> <span class="hl kwc">Pattern</span><span class="hl sym">.</span><span class="hl kwd">compile</span><span class="hl sym">(</span><span class="hl str">&quot;[BDHKMNRSVWY]&quot;</span><span class="hl sym">);</span>
   
   <span class="hl kwa">private static final</span> <span class="hl kwb">int</span> longest<span class="hl sym">;</span>
   <span class="hl kwa">private static</span> <span class="hl kwb">byte</span><span class="hl sym">[]</span> repl<span class="hl sym">;</span>
 
   <span class="hl kwa">private static</span> <span class="hl kwc">String</span><span class="hl sym">[]</span> strs <span class="hl sym">= {</span>
      <span class="hl str">&quot;agggtaaa|tttaccct&quot;</span><span class="hl sym">,</span>
      <span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="hl sym">,</span>
      <span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="hl sym">,</span>
      <span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="hl sym">,</span>
      <span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="hl sym">,</span>
      <span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="hl sym">,</span>
      <span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="hl sym">,</span>
      <span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="hl sym">,</span>
      <span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span>
   <span class="hl sym">};</span>

   <span class="hl kwa">private static</span> <span class="hl kwc">Pattern</span><span class="hl sym">[]</span> pats <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">Pattern</span><span class="hl sym">[</span>strs<span class="hl sym">.</span>length<span class="hl sym">];</span>
   
   <span class="hl kwa">static</span> <span class="hl sym">{</span>
      <span class="hl kwa">for</span><span class="hl sym">(</span> <span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> pats<span class="hl sym">.</span>length<span class="hl sym">; ++</span>i <span class="hl sym">)</span>
         pats<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl kwc">Pattern</span><span class="hl sym">.</span><span class="hl kwd">compile</span><span class="hl sym">(</span> strs<span class="hl sym">[</span>i<span class="hl sym">] );</span>
      
      <span class="hl kwb">int</span> l <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwa">for</span><span class="hl sym">(</span> <span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> codes<span class="hl sym">.</span>length<span class="hl sym">; ++</span>i <span class="hl sym">)</span>
         l <span class="hl sym">=</span> <span class="hl kwc">Math</span><span class="hl sym">.</span><span class="hl kwd">max</span><span class="hl sym">(</span> l<span class="hl sym">,</span> codes<span class="hl sym">[</span>i<span class="hl sym">][</span><span class="hl num">1</span><span class="hl sym">].</span><span class="hl kwd">length</span><span class="hl sym">() );</span>
      longest <span class="hl sym">=</span> l<span class="hl sym">;</span>
      
      repl <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl sym">[</span><span class="hl num">26</span> <span class="hl sym">*</span> longest <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">];</span>
      <span class="hl kwa">for</span><span class="hl sym">(</span> <span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> codes<span class="hl sym">.</span>length<span class="hl sym">; ++</span>i <span class="hl sym">) {</span>
         <span class="hl kwb">int</span> off <span class="hl sym">=</span> longest <span class="hl sym">* (</span>codes<span class="hl sym">[</span>i<span class="hl sym">][</span><span class="hl num">0</span><span class="hl sym">].</span><span class="hl kwd">charAt</span><span class="hl sym">(</span> <span class="hl num">0</span> <span class="hl sym">) -</span> <span class="hl str">'A'</span><span class="hl sym">);</span>
         <span class="hl kwc">String</span> code <span class="hl sym">=</span> codes<span class="hl sym">[</span>i<span class="hl sym">][</span><span class="hl num">1</span><span class="hl sym">];</span>
         <span class="hl kwa">for</span><span class="hl sym">(</span> <span class="hl kwb">int</span> j <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> j <span class="hl sym">&lt;</span> code<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">(); ++</span>j <span class="hl sym">)</span>
            repl<span class="hl sym">[</span>off <span class="hl sym">+</span> j<span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span> code<span class="hl sym">.</span><span class="hl kwd">charAt</span><span class="hl sym">(</span> j <span class="hl sym">);</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
   
   <span class="hl kwa">private static</span> <span class="hl kwb">void</span> <span class="hl kwd">rmComments</span><span class="hl sym">(</span> ByteWrapper t <span class="hl sym">) {</span>

      <span class="hl kwb">byte</span><span class="hl sym">[]</span> backing <span class="hl sym">=</span> t<span class="hl sym">.</span>backing<span class="hl sym">;</span>
      <span class="hl kwc">Matcher</span> m <span class="hl sym">=</span> comments<span class="hl sym">.</span><span class="hl kwd">matcher</span><span class="hl sym">(</span> t <span class="hl sym">);</span>
      
      <span class="hl kwa">if</span><span class="hl sym">( !</span>m<span class="hl sym">.</span><span class="hl kwd">find</span><span class="hl sym">() )</span>
         <span class="hl kwa">return</span><span class="hl sym">;</span>
      
      <span class="hl kwb">int</span> tail <span class="hl sym">=</span> m<span class="hl sym">.</span><span class="hl kwd">start</span><span class="hl sym">();</span>
      <span class="hl kwb">int</span> restart <span class="hl sym">=</span> m<span class="hl sym">.</span><span class="hl kwd">end</span><span class="hl sym">();</span>
            
      <span class="hl kwa">while</span><span class="hl sym">(</span> m<span class="hl sym">.</span><span class="hl kwd">find</span><span class="hl sym">() ) {</span>
         <span class="hl kwa">while</span><span class="hl sym">(</span> restart <span class="hl sym">!=</span> m<span class="hl sym">.</span><span class="hl kwd">start</span><span class="hl sym">() )</span>
            backing<span class="hl sym">[</span>tail<span class="hl sym">++] =</span> backing<span class="hl sym">[</span>restart<span class="hl sym">++];</span>
         restart <span class="hl sym">=</span> m<span class="hl sym">.</span><span class="hl kwd">end</span><span class="hl sym">();</span>
      <span class="hl sym">}</span>
      
      <span class="hl kwa">while</span><span class="hl sym">(</span> restart <span class="hl sym">&lt;</span> backing<span class="hl sym">.</span>length <span class="hl sym">)</span>
         backing<span class="hl sym">[</span>tail<span class="hl sym">++] =</span> backing<span class="hl sym">[</span>restart<span class="hl sym">++];</span>
      
      t<span class="hl sym">.</span>length <span class="hl sym">=</span> tail<span class="hl sym">;</span>
   <span class="hl sym">}</span>
   
   <span class="hl kwa">private static</span> <span class="hl kwb">void</span> <span class="hl kwd">countPatterns</span><span class="hl sym">(</span> ByteWrapper t <span class="hl sym">) {</span>
            
      <span class="hl kwa">for</span><span class="hl sym">(</span> <span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> pats<span class="hl sym">.</span>length<span class="hl sym">; ++</span>i <span class="hl sym">) {</span>
         <span class="hl kwb">int</span> c <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         <span class="hl kwc">Matcher</span> m <span class="hl sym">=</span> pats<span class="hl sym">[</span>i<span class="hl sym">].</span><span class="hl kwd">matcher</span><span class="hl sym">(</span> t <span class="hl sym">);</span>
         <span class="hl kwa">while</span><span class="hl sym">(</span> m<span class="hl sym">.</span><span class="hl kwd">find</span><span class="hl sym">() )</span>
            <span class="hl sym">++</span>c<span class="hl sym">;</span>
         <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span> strs<span class="hl sym">[</span>i<span class="hl sym">] +</span> <span class="hl str">' '</span> <span class="hl sym">+</span> c <span class="hl sym">);</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
   
   <span class="hl kwa">private static</span> ByteWrapper <span class="hl kwd">replace</span><span class="hl sym">(</span> ByteWrapper t <span class="hl sym">) {</span>
      
      <span class="hl kwb">byte</span><span class="hl sym">[]</span> backing <span class="hl sym">=</span> t<span class="hl sym">.</span>backing<span class="hl sym">;</span>
      <span class="hl kwb">byte</span><span class="hl sym">[]</span> buf <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl sym">[</span>t<span class="hl sym">.</span>length <span class="hl sym">*</span> longest<span class="hl sym">];</span>
      <span class="hl kwb">int</span> pos <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      
      <span class="hl kwc">Matcher</span> m <span class="hl sym">=</span> codesPat<span class="hl sym">.</span><span class="hl kwd">matcher</span><span class="hl sym">(</span> t <span class="hl sym">);</span>
      <span class="hl kwb">int</span> last <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      
      <span class="hl kwa">while</span><span class="hl sym">(</span> m<span class="hl sym">.</span><span class="hl kwd">find</span><span class="hl sym">() ) {</span>
         <span class="hl kwa">for</span><span class="hl sym">( ;</span> last <span class="hl sym">&lt;</span> m<span class="hl sym">.</span><span class="hl kwd">start</span><span class="hl sym">(); ++</span>last <span class="hl sym">)</span>
            buf<span class="hl sym">[</span>pos<span class="hl sym">++] =</span> backing<span class="hl sym">[</span>last<span class="hl sym">];</span>
         <span class="hl kwa">for</span><span class="hl sym">(</span> <span class="hl kwb">int</span> i <span class="hl sym">=</span> longest <span class="hl sym">* (</span>backing<span class="hl sym">[</span>last<span class="hl sym">] -</span> <span class="hl str">'A'</span><span class="hl sym">);</span> repl<span class="hl sym">[</span>i<span class="hl sym">] !=</span> <span class="hl num">0</span><span class="hl sym">; ++</span>i <span class="hl sym">)</span>
            buf<span class="hl sym">[</span>pos<span class="hl sym">++] =</span> repl<span class="hl sym">[</span>i<span class="hl sym">];</span>
         <span class="hl sym">++</span>last<span class="hl sym">;</span>
      <span class="hl sym">}</span>
      
      <span class="hl kwa">for</span><span class="hl sym">( ;</span> last <span class="hl sym">&lt;</span> t<span class="hl sym">.</span>length<span class="hl sym">; ++</span>last <span class="hl sym">)</span>
         buf<span class="hl sym">[</span>pos<span class="hl sym">++] =</span> backing<span class="hl sym">[</span>last<span class="hl sym">];</span>
      
      <span class="hl kwa">return new</span> <span class="hl kwd">ByteWrapper</span><span class="hl sym">(</span> buf<span class="hl sym">,</span> pos <span class="hl sym">);</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span> <span class="hl kwc">String</span><span class="hl sym">[]</span> args <span class="hl sym">)</span> <span class="hl kwa">throws</span> <span class="hl kwc">Exception</span> <span class="hl sym">{</span>

      <span class="hl kwc">FileInputStream</span> fis <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">FileInputStream</span><span class="hl sym">(</span> FileDescriptor<span class="hl sym">.</span><span class="hl kwa">in</span> <span class="hl sym">);</span>
      <span class="hl kwc">FileChannel</span> cin <span class="hl sym">=</span> fis<span class="hl sym">.</span><span class="hl kwd">getChannel</span><span class="hl sym">();</span>
      <span class="hl kwc">ByteBuffer</span> bb <span class="hl sym">=</span> <span class="hl kwc">ByteBuffer</span><span class="hl sym">.</span><span class="hl kwd">allocate</span><span class="hl sym">( (</span><span class="hl kwb">int</span><span class="hl sym">)</span> cin<span class="hl sym">.</span><span class="hl kwd">size</span><span class="hl sym">() );</span>
      cin<span class="hl sym">.</span><span class="hl kwd">read</span><span class="hl sym">(</span> bb <span class="hl sym">);</span>
      
      ByteWrapper t <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">ByteWrapper</span><span class="hl sym">(</span> bb<span class="hl sym">.</span><span class="hl kwd">array</span><span class="hl sym">() );</span>
      <span class="hl kwd">rmComments</span><span class="hl sym">(</span> t <span class="hl sym">);</span>

      <span class="hl kwd">countPatterns</span><span class="hl sym">(</span> t <span class="hl sym">);</span>
      
      ByteWrapper w <span class="hl sym">=</span> <span class="hl kwd">replace</span><span class="hl sym">(</span> t <span class="hl sym">);</span>
      
      <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">();</span>
      <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span> t<span class="hl sym">.</span>backing<span class="hl sym">.</span>length <span class="hl sym">);</span>
      <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span> t<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">() );</span>
      <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span> w<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">() );</span>
   <span class="hl sym">}</span>

<span class="hl sym">}</span>
