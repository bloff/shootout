<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by The Anh Tran</span>
<span class="hl com"> */</span>
<span class="hl kwa">package</span> knu<span class="hl sym">;</span>

<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.*;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>io<span class="hl sym">.*;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>text<span class="hl sym">.*;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span>concurrent<span class="hl sym">.</span>atomic<span class="hl sym">.*;</span>

<span class="hl kwa">public class</span> knu
<span class="hl sym">{</span>
    <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span> <span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">)</span>
    <span class="hl sym">{</span>
        <span class="hl kwa">final</span> <span class="hl kwb">char</span><span class="hl sym">[]</span> source <span class="hl sym">=</span> <span class="hl kwd">ReadInput</span><span class="hl sym">();</span>

        <span class="hl kwa">final</span> <span class="hl kwc">String</span><span class="hl sym">[]</span> result <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">String</span><span class="hl sym">[</span><span class="hl num">7</span><span class="hl sym">];</span>
        <span class="hl kwa">final</span> <span class="hl kwc">AtomicInteger</span> job <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">AtomicInteger</span><span class="hl sym">(</span><span class="hl num">6</span><span class="hl sym">);</span>

        <span class="hl kwc">Thread</span><span class="hl sym">[]</span> pool <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">Thread</span><span class="hl sym">[</span><span class="hl kwc">Runtime</span><span class="hl sym">.</span><span class="hl kwd">getRuntime</span><span class="hl sym">().</span><span class="hl kwd">availableProcessors</span><span class="hl sym">()];</span>
        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> pool<span class="hl sym">.</span>length<span class="hl sym">;</span> i<span class="hl sym">++)</span>
        <span class="hl sym">{</span>
            pool<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl kwa">new</span> <span class="hl kwc">Thread</span><span class="hl sym">()</span>
            <span class="hl sym">{</span>
                <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">run</span><span class="hl sym">()</span>
                <span class="hl sym">{</span>
                    <span class="hl kwb">int</span> j<span class="hl sym">;</span>
                    <span class="hl kwa">while</span> <span class="hl sym">((</span>j <span class="hl sym">=</span> job<span class="hl sym">.</span><span class="hl kwd">getAndDecrement</span><span class="hl sym">()) &gt;=</span> <span class="hl num">0</span><span class="hl sym">)</span>
                    <span class="hl sym">{</span>
                        <span class="hl kwa">switch</span> <span class="hl sym">(</span>j<span class="hl sym">)</span>
                        <span class="hl sym">{</span>
                            <span class="hl kwa">case</span> <span class="hl num">0</span><span class="hl sym">:</span>
                                result<span class="hl sym">[</span>j<span class="hl sym">] =</span> <span class="hl kwd">WriteFreq</span><span class="hl sym">(</span>source<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">);</span>
                                <span class="hl kwa">break</span><span class="hl sym">;</span>
                            <span class="hl kwa">case</span> <span class="hl num">1</span><span class="hl sym">:</span>
                                result<span class="hl sym">[</span>j<span class="hl sym">] =</span> <span class="hl kwd">WriteFreq</span><span class="hl sym">(</span>source<span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">);</span>
                                <span class="hl kwa">break</span><span class="hl sym">;</span>
                            <span class="hl kwa">case</span> <span class="hl num">2</span><span class="hl sym">:</span>
                                result<span class="hl sym">[</span>j<span class="hl sym">] =</span> <span class="hl kwd">WriteFreq</span><span class="hl sym">(</span>source<span class="hl sym">,</span> <span class="hl str">&quot;ggt&quot;</span><span class="hl sym">);</span>
                                <span class="hl kwa">break</span><span class="hl sym">;</span>
                            <span class="hl kwa">case</span> <span class="hl num">3</span><span class="hl sym">:</span>
                                result<span class="hl sym">[</span>j<span class="hl sym">] =</span> <span class="hl kwd">WriteFreq</span><span class="hl sym">(</span>source<span class="hl sym">,</span> <span class="hl str">&quot;ggta&quot;</span><span class="hl sym">);</span>
                                <span class="hl kwa">break</span><span class="hl sym">;</span>
                            <span class="hl kwa">case</span> <span class="hl num">4</span><span class="hl sym">:</span>
                                result<span class="hl sym">[</span>j<span class="hl sym">] =</span> <span class="hl kwd">WriteFreq</span><span class="hl sym">(</span>source<span class="hl sym">,</span> <span class="hl str">&quot;ggtatt&quot;</span><span class="hl sym">);</span>
                                <span class="hl kwa">break</span><span class="hl sym">;</span>
                            <span class="hl kwa">case</span> <span class="hl num">5</span><span class="hl sym">:</span>
                                result<span class="hl sym">[</span>j<span class="hl sym">] =</span> <span class="hl kwd">WriteFreq</span><span class="hl sym">(</span>source<span class="hl sym">,</span> <span class="hl str">&quot;ggtattttaatt&quot;</span><span class="hl sym">);</span>
                                <span class="hl kwa">break</span><span class="hl sym">;</span>
                            <span class="hl kwa">case</span> <span class="hl num">6</span><span class="hl sym">:</span>
                                result<span class="hl sym">[</span>j<span class="hl sym">] =</span> <span class="hl kwd">WriteFreq</span><span class="hl sym">(</span>source<span class="hl sym">,</span> <span class="hl str">&quot;ggtattttaatttatagt&quot;</span><span class="hl sym">);</span>
                                <span class="hl kwa">break</span><span class="hl sym">;</span>
                            <span class="hl kwa">default</span><span class="hl sym">:</span>
                                <span class="hl kwa">throw new</span> <span class="hl kwc">RuntimeException</span><span class="hl sym">(</span><span class="hl str">&quot;Invalid task&quot;</span><span class="hl sym">);</span>
                        <span class="hl sym">}</span>
                    <span class="hl sym">}</span>
                <span class="hl sym">}</span>
            <span class="hl sym">};</span>
            pool<span class="hl sym">[</span>i<span class="hl sym">].</span><span class="hl kwd">start</span><span class="hl sym">();</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwc">Thread</span> t <span class="hl sym">:</span> pool<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            <span class="hl kwa">try</span>
            <span class="hl sym">{</span>
                t<span class="hl sym">.</span><span class="hl kwd">join</span><span class="hl sym">();</span>
            <span class="hl sym">}</span>
            <span class="hl kwa">catch</span> <span class="hl sym">(</span><span class="hl kwc">InterruptedException</span> e<span class="hl sym">)</span>
            <span class="hl sym">{</span>
                e<span class="hl sym">.</span><span class="hl kwd">printStackTrace</span><span class="hl sym">();</span>
            <span class="hl sym">}</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwc">String</span> s <span class="hl sym">:</span> result<span class="hl sym">)</span>
            <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span>s<span class="hl sym">);</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">private static</span> <span class="hl kwb">char</span><span class="hl sym">[]</span> <span class="hl kwd">ReadInput</span><span class="hl sym">()</span>
    <span class="hl sym">{</span>
        <span class="hl kwa">try</span>
        <span class="hl sym">{</span>
            <span class="hl slc">//BufferedReader reader = new BufferedReader (new FileReader(&quot;/mnt/dl/c/fasta/fa50k.txt&quot;));</span>
            <span class="hl kwc">BufferedReader</span> reader <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">BufferedReader</span> <span class="hl sym">(</span><span class="hl kwa">new</span> <span class="hl kwc">InputStreamReader</span> <span class="hl sym">(</span><span class="hl kwc">System</span><span class="hl sym">.</span>in<span class="hl sym">,</span> <span class="hl str">&quot;US-ASCII&quot;</span><span class="hl sym">));</span>

            <span class="hl kwc">String</span> s <span class="hl sym">=</span> null<span class="hl sym">;</span>
            <span class="hl kwa">while</span> <span class="hl sym">((</span>s <span class="hl sym">=</span> reader<span class="hl sym">.</span><span class="hl kwd">readLine</span><span class="hl sym">()) !=</span> null<span class="hl sym">)</span>
            <span class="hl sym">{</span>
                <span class="hl kwa">if</span> <span class="hl sym">(</span>s<span class="hl sym">.</span><span class="hl kwd">startsWith</span><span class="hl sym">(</span><span class="hl str">&quot;&gt;THREE&quot;</span><span class="hl sym">))</span>
                    <span class="hl kwa">break</span><span class="hl sym">;</span>
            <span class="hl sym">}</span>

            <span class="hl kwc">StringBuilder</span> sb <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">StringBuilder</span><span class="hl sym">();</span>
            <span class="hl kwa">while</span> <span class="hl sym">((</span>s <span class="hl sym">=</span> reader<span class="hl sym">.</span><span class="hl kwd">readLine</span><span class="hl sym">()) !=</span> null<span class="hl sym">)</span>
                sb<span class="hl sym">.</span><span class="hl kwd">append</span> <span class="hl sym">(</span>s<span class="hl sym">);</span>

            <span class="hl kwa">return</span> sb<span class="hl sym">.</span><span class="hl kwd">toString</span><span class="hl sym">().</span><span class="hl kwd">toCharArray</span><span class="hl sym">();</span>
        <span class="hl sym">}</span>
        <span class="hl kwa">catch</span> <span class="hl sym">(</span><span class="hl kwc">IOException</span> ie<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            ie<span class="hl sym">.</span><span class="hl kwd">printStackTrace</span> <span class="hl sym">();</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">return</span> null<span class="hl sym">;</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">static final class</span> <span class="hl kwc">Key</span> <span class="hl kwa">implements</span> <span class="hl kwc">Comparable</span><span class="hl sym">&lt;</span><span class="hl kwc">Key</span><span class="hl sym">&gt;</span>
    <span class="hl sym">{</span>
        <span class="hl kwa">public</span> <span class="hl kwb">int</span>     hash<span class="hl sym">;</span>
        <span class="hl kwa">public</span> <span class="hl kwb">char</span><span class="hl sym">[]</span>  key<span class="hl sym">;</span>
        <span class="hl kwa">public</span> <span class="hl kwb">int</span>  count<span class="hl sym">;</span>

        <span class="hl kwa">public</span> <span class="hl kwc">Key</span><span class="hl sym">(</span><span class="hl kwb">int</span> frame<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            key <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">char</span><span class="hl sym">[</span>frame<span class="hl sym">];</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">public</span> <span class="hl kwc">Key</span><span class="hl sym">(</span><span class="hl kwa">final</span> <span class="hl kwc">Key</span> k<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            hash <span class="hl sym">=</span> k<span class="hl sym">.</span>hash<span class="hl sym">;</span>
            key <span class="hl sym">=</span> k<span class="hl sym">.</span>key<span class="hl sym">.</span><span class="hl kwd">clone</span><span class="hl sym">();</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">ReHash</span><span class="hl sym">(</span><span class="hl kwa">final</span> <span class="hl kwb">char</span><span class="hl sym">[]</span> k<span class="hl sym">,</span> <span class="hl kwb">int</span> offset<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> key<span class="hl sym">.</span>length<span class="hl sym">;</span> i<span class="hl sym">++)</span>
                key<span class="hl sym">[</span>i<span class="hl sym">] =</span> k<span class="hl sym">[</span>offset <span class="hl sym">+</span> i<span class="hl sym">];</span>

            hash <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">char</span> c <span class="hl sym">:</span> key<span class="hl sym">)</span>
                hash <span class="hl sym">=</span> hash <span class="hl sym">*</span> <span class="hl num">131</span> <span class="hl sym">+</span> c<span class="hl sym">;</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">public</span> <span class="hl kwb">int</span> <span class="hl kwd">hashCode</span><span class="hl sym">()</span>
        <span class="hl sym">{</span>
            <span class="hl kwa">return</span> hash<span class="hl sym">;</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">public</span> <span class="hl kwb">boolean</span> <span class="hl kwd">equals</span><span class="hl sym">(</span><span class="hl kwc">Object</span> obj<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            <span class="hl kwa">return</span> hash <span class="hl sym">== ((</span><span class="hl kwc">Key</span><span class="hl sym">)</span>obj<span class="hl sym">).</span>hash<span class="hl sym">;</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">public</span> <span class="hl kwb">int</span> <span class="hl kwd">compareTo</span><span class="hl sym">(</span><span class="hl kwc">Key</span> o<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            <span class="hl kwa">return</span> o<span class="hl sym">.</span>count <span class="hl sym">-</span> count<span class="hl sym">;</span>
        <span class="hl sym">}</span>

    <span class="hl sym">}</span>

    <span class="hl kwa">static final class</span> Value
    <span class="hl sym">{</span>
        <span class="hl kwa">public</span> <span class="hl kwb">int</span>  value<span class="hl sym">;</span>

        <span class="hl kwa">public</span> <span class="hl kwd">Value</span><span class="hl sym">()</span>
        <span class="hl sym">{</span>
            value <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">private static</span> <span class="hl kwb">void</span> <span class="hl kwd">CalculateFreq</span><span class="hl sym">(</span><span class="hl kwc">Map</span><span class="hl sym">&lt;</span><span class="hl kwc">Key</span><span class="hl sym">,</span> Value<span class="hl sym">&gt;</span> htb<span class="hl sym">,</span> <span class="hl kwa">final</span> <span class="hl kwb">char</span><span class="hl sym">[]</span> input<span class="hl sym">,</span> <span class="hl kwb">int</span> frame_size<span class="hl sym">)</span>
    <span class="hl sym">{</span>
        <span class="hl kwb">int</span> end <span class="hl sym">=</span> input<span class="hl sym">.</span>length <span class="hl sym">-</span> frame_size <span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">;</span>
        <span class="hl kwc">Key</span> k <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">Key</span><span class="hl sym">(</span>frame_size<span class="hl sym">);</span>

        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> end<span class="hl sym">;</span> i<span class="hl sym">++)</span>
        <span class="hl sym">{</span>
            k<span class="hl sym">.</span><span class="hl kwd">ReHash</span><span class="hl sym">(</span>input<span class="hl sym">,</span> i<span class="hl sym">);</span>

            Value v <span class="hl sym">=</span> htb<span class="hl sym">.</span><span class="hl kwd">get</span><span class="hl sym">(</span>k<span class="hl sym">);</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>v <span class="hl sym">!=</span> null<span class="hl sym">)</span>
                v<span class="hl sym">.</span>value<span class="hl sym">++;</span>
            <span class="hl kwa">else</span>
                htb<span class="hl sym">.</span><span class="hl kwd">put</span><span class="hl sym">(</span><span class="hl kwa">new</span> <span class="hl kwc">Key</span><span class="hl sym">(</span>k<span class="hl sym">),</span> <span class="hl kwa">new</span> <span class="hl kwd">Value</span><span class="hl sym">());</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">private static</span> <span class="hl kwc">String</span> <span class="hl kwd">WriteFreq</span><span class="hl sym">(</span><span class="hl kwa">final</span> <span class="hl kwb">char</span><span class="hl sym">[]</span> input<span class="hl sym">,</span> <span class="hl kwb">int</span> frame_size<span class="hl sym">)</span>
    <span class="hl sym">{</span>
        <span class="hl kwc">Map</span><span class="hl sym">&lt;</span><span class="hl kwc">Key</span><span class="hl sym">,</span> Value<span class="hl sym">&gt;</span> m <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">HashMap</span><span class="hl sym">&lt;</span><span class="hl kwc">Key</span><span class="hl sym">,</span> Value<span class="hl sym">&gt;();</span>
        <span class="hl kwd">CalculateFreq</span><span class="hl sym">(</span>m<span class="hl sym">,</span> input<span class="hl sym">,</span> frame_size<span class="hl sym">);</span>

        <span class="hl kwc">ArrayList</span><span class="hl sym">&lt;</span><span class="hl kwc">Key</span><span class="hl sym">&gt;</span> result <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">ArrayList</span><span class="hl sym">&lt;</span><span class="hl kwc">Key</span><span class="hl sym">&gt;();</span>
        result<span class="hl sym">.</span><span class="hl kwd">addAll</span><span class="hl sym">(</span>m<span class="hl sym">.</span><span class="hl kwd">keySet</span><span class="hl sym">());</span>
        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwc">Key</span> k <span class="hl sym">:</span> result<span class="hl sym">)</span>
            k<span class="hl sym">.</span>count <span class="hl sym">=</span> m<span class="hl sym">.</span><span class="hl kwd">get</span><span class="hl sym">(</span>k<span class="hl sym">).</span>value<span class="hl sym">;</span>

        <span class="hl kwc">Collections</span><span class="hl sym">.</span><span class="hl kwd">sort</span><span class="hl sym">(</span>result<span class="hl sym">);</span>

        <span class="hl kwb">float</span> totalchar <span class="hl sym">=</span> input<span class="hl sym">.</span>length <span class="hl sym">-</span> frame_size <span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">;</span>
        <span class="hl kwc">StringBuilder</span> sb <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">StringBuilder</span><span class="hl sym">();</span>

        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwc">Key</span> k <span class="hl sym">:</span> result<span class="hl sym">)</span>
            sb<span class="hl sym">.</span><span class="hl kwd">append</span><span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">.</span><span class="hl kwd">format</span><span class="hl sym">(</span><span class="hl str">&quot;%s %.3f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span>
                <span class="hl kwc">String</span><span class="hl sym">.</span><span class="hl kwd">valueOf</span><span class="hl sym">(</span>k<span class="hl sym">.</span>key<span class="hl sym">).</span><span class="hl kwd">toUpperCase</span><span class="hl sym">(),</span>
                <span class="hl sym">(</span><span class="hl kwb">float</span><span class="hl sym">)(</span>k<span class="hl sym">.</span>count <span class="hl sym">*</span> <span class="hl num">100</span><span class="hl sym">) /</span> totalchar<span class="hl sym">)  );</span>

        <span class="hl kwa">return</span> sb<span class="hl sym">.</span><span class="hl kwd">toString</span><span class="hl sym">();</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">private static</span> <span class="hl kwc">String</span> <span class="hl kwd">WriteFreq</span><span class="hl sym">(</span><span class="hl kwa">final</span> <span class="hl kwb">char</span><span class="hl sym">[]</span> input<span class="hl sym">,</span> <span class="hl kwc">String</span> specific<span class="hl sym">)</span>
    <span class="hl sym">{</span>
        <span class="hl kwc">Map</span><span class="hl sym">&lt;</span><span class="hl kwc">Key</span><span class="hl sym">,</span> Value<span class="hl sym">&gt;</span> m <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">HashMap</span><span class="hl sym">&lt;</span><span class="hl kwc">Key</span><span class="hl sym">,</span> Value<span class="hl sym">&gt;();</span>
        <span class="hl kwd">CalculateFreq</span><span class="hl sym">(</span>m<span class="hl sym">,</span> input<span class="hl sym">,</span> specific<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">());</span>

        <span class="hl kwc">Key</span> k <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">Key</span><span class="hl sym">(</span>specific<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">());</span>
        k<span class="hl sym">.</span><span class="hl kwd">ReHash</span><span class="hl sym">(</span>specific<span class="hl sym">.</span><span class="hl kwd">toCharArray</span><span class="hl sym">(),</span> <span class="hl num">0</span><span class="hl sym">);</span>
        Value v <span class="hl sym">=</span> m<span class="hl sym">.</span><span class="hl kwd">get</span><span class="hl sym">(</span>k<span class="hl sym">);</span>

        <span class="hl kwa">return</span> <span class="hl kwc">String</span><span class="hl sym">.</span><span class="hl kwd">format</span><span class="hl sym">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\t</span><span class="hl str">%s&quot;</span><span class="hl sym">,</span> v<span class="hl sym">.</span>value<span class="hl sym">,</span> specific<span class="hl sym">.</span><span class="hl kwd">toUpperCase</span><span class="hl sym">());</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>
