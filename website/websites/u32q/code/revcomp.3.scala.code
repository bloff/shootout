<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Isaac Gouy</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> java<span class="hl sym">.</span>io<span class="hl sym">.</span>_
<span class="hl kwa">import</span> scala<span class="hl sym">.</span>collection<span class="hl sym">.</span>mutable<span class="hl sym">.</span><span class="hl kwc">Stack</span>

<span class="hl kwa">object</span> revcomp <span class="hl sym">{</span>
   <span class="hl kwa">def</span> main<span class="hl sym">(</span>args<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">String</span><span class="hl sym">]) = {</span>
      <span class="hl kwa">val</span> out <span class="hl sym">=</span> <span class="hl kwa">new</span> FastaOutputStream<span class="hl sym">(</span><span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">)</span>
      <span class="hl kwa">val</span> in <span class="hl sym">=</span> <span class="hl kwa">new</span> FastaInputStream<span class="hl sym">(</span><span class="hl kwc">System</span><span class="hl sym">.</span>in<span class="hl sym">)</span>

      out<span class="hl sym">.</span>writeReverseComplement<span class="hl sym">(</span> in<span class="hl sym">.</span>readSequenceStack <span class="hl sym">)</span>
      out<span class="hl sym">.</span>writeReverseComplement<span class="hl sym">(</span> in<span class="hl sym">.</span>readSequenceStack <span class="hl sym">)</span>
      out<span class="hl sym">.</span>writeReverseComplement<span class="hl sym">(</span> in<span class="hl sym">.</span>readSequenceStack <span class="hl sym">)</span>

      in<span class="hl sym">.</span>close
      out<span class="hl sym">.</span>close
   <span class="hl sym">}</span>
<span class="hl sym">}</span>


<span class="hl kwa">trait</span> FastaByteStream <span class="hl sym">{</span>
   <span class="hl kwa">val</span> nl <span class="hl sym">=</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">.</span>toByte

   <span class="hl kwa">type</span> <span class="hl kwc">Line</span> <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwb">byte</span><span class="hl sym">]</span>
   <span class="hl kwa">type</span> LineStack <span class="hl sym">=</span> <span class="hl kwc">Stack</span><span class="hl sym">[</span><span class="hl kwc">Line</span><span class="hl sym">]</span>
<span class="hl sym">}</span>


<span class="hl slc">// extend the Java BufferedInputStream class</span>

<span class="hl kwa">final class</span> FastaInputStream<span class="hl sym">(</span>in<span class="hl sym">:</span> <span class="hl kwc">InputStream</span><span class="hl sym">)</span>
      <span class="hl kwa">extends</span> <span class="hl kwc">BufferedInputStream</span><span class="hl sym">(</span>in<span class="hl sym">)</span> with FastaByteStream <span class="hl sym">{</span>

   <span class="hl kwa">val</span> gt <span class="hl sym">=</span> <span class="hl str">'&gt;'</span><span class="hl sym">.</span>toByte
   <span class="hl kwa">val</span> sc <span class="hl sym">=</span> <span class="hl str">';'</span><span class="hl sym">.</span>toByte

   <span class="hl kwa">def</span> readSequenceStack<span class="hl sym">():</span> Pair<span class="hl sym">[</span><span class="hl kwc">Line</span><span class="hl sym">,</span>LineStack<span class="hl sym">] = {</span>
      <span class="hl kwa">var</span> header<span class="hl sym">:</span> <span class="hl kwc">Line</span> <span class="hl sym">=</span> null
      <span class="hl kwa">val</span> lines<span class="hl sym">:</span> LineStack <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">Stack</span>

      <span class="hl kwa">var</span> line <span class="hl sym">=</span> readLine<span class="hl sym">()</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>line <span class="hl sym">!=</span> null<span class="hl sym">) {</span>
         <span class="hl kwa">val</span> c <span class="hl sym">=</span> line<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>c <span class="hl sym">==</span> gt<span class="hl sym">){</span>                       <span class="hl slc">// '&gt;'</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>header <span class="hl sym">==</span> null<span class="hl sym">){</span>
               header <span class="hl sym">=</span> line
            <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
               pos <span class="hl sym">=</span> pos <span class="hl sym">-</span> line<span class="hl sym">.</span>length <span class="hl sym">-</span> <span class="hl num">1</span>   <span class="hl slc">// reposition to start of line</span>
               <span class="hl kwa">return</span> Pair<span class="hl sym">(</span>header<span class="hl sym">,</span>lines<span class="hl sym">)</span>
            <span class="hl sym">}</span>
         <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>c <span class="hl sym">!=</span> sc<span class="hl sym">)</span> lines <span class="hl sym">+=</span> line       <span class="hl slc">// ';'</span>
         <span class="hl sym">}</span>
         line <span class="hl sym">=</span> readLine<span class="hl sym">()</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">return</span> Pair<span class="hl sym">(</span>header<span class="hl sym">,</span>lines<span class="hl sym">)</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">def</span> readLine<span class="hl sym">() = {</span>
      <span class="hl kwa">var</span> bytes<span class="hl sym">:</span> <span class="hl kwc">Line</span> <span class="hl sym">=</span> null
      <span class="hl kwa">if</span> <span class="hl sym">(</span>in <span class="hl sym">==</span> null<span class="hl sym">)</span> bytes
      <span class="hl kwa">else</span> <span class="hl sym">{</span>
         mark<span class="hl sym">(</span><span class="hl num">128</span><span class="hl sym">)</span>                      <span class="hl slc">// mark the start of the line</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>count <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span> read<span class="hl sym">()</span>         <span class="hl slc">// fill buffer</span>

         <span class="hl kwa">var</span> i <span class="hl sym">=</span> markpos
         <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> count <span class="hl sym">&amp;&amp;</span> buf<span class="hl sym">(</span>i<span class="hl sym">) !=</span> nl<span class="hl sym">)</span> i <span class="hl sym">=</span> i <span class="hl sym">+</span> <span class="hl num">1</span>

         <span class="hl kwa">if</span> <span class="hl sym">(</span>i <span class="hl sym">&gt;=</span> count<span class="hl sym">){</span>               <span class="hl slc">// line extends past end of buffer</span>
            pos <span class="hl sym">=</span> i<span class="hl sym">;</span> read<span class="hl sym">();</span> i <span class="hl sym">=</span> pos<span class="hl sym">;</span>   <span class="hl slc">// fill buffer again</span>
            <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> count <span class="hl sym">&amp;&amp;</span> buf<span class="hl sym">(</span>i<span class="hl sym">) !=</span> nl<span class="hl sym">)</span> i <span class="hl sym">=</span> i <span class="hl sym">+</span> <span class="hl num">1</span>
         <span class="hl sym">}</span>

         <span class="hl kwa">if</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> count<span class="hl sym">){</span>
            bytes <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">Array</span><span class="hl sym">(</span>i <span class="hl sym">-</span> markpos<span class="hl sym">)</span>
            <span class="hl kwc">System</span><span class="hl sym">.</span>arraycopy<span class="hl sym">(</span>buf<span class="hl sym">,</span> markpos<span class="hl sym">,</span> bytes<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> i <span class="hl sym">-</span> markpos<span class="hl sym">);</span>
            pos <span class="hl sym">=</span> i<span class="hl sym">+</span><span class="hl num">1</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>
      bytes
   <span class="hl sym">}</span>
<span class="hl sym">}</span>


<span class="hl slc">// extend the Java BufferedOutputStream class</span>

<span class="hl kwa">final class</span> FastaOutputStream<span class="hl sym">(</span>in<span class="hl sym">:</span> <span class="hl kwc">OutputStream</span><span class="hl sym">)</span>
      <span class="hl kwa">extends</span> <span class="hl kwc">BufferedOutputStream</span><span class="hl sym">(</span>in<span class="hl sym">)</span> with FastaByteStream <span class="hl sym">{</span>

   <span class="hl kwa">private val</span> IUB <span class="hl sym">=</span> IUBCodeComplements

   <span class="hl kwa">private def</span> IUBCodeComplements<span class="hl sym">() = {</span>
      <span class="hl kwa">val</span> code <span class="hl sym">=</span> <span class="hl str">&quot;ABCDGHKMNRSTVWYabcdghkmnrstvwy&quot;</span><span class="hl sym">.</span>getBytes
      <span class="hl kwa">val</span> comp <span class="hl sym">=</span> <span class="hl str">&quot;TVGHCDMKNYSABWRTVGHCDMKNYSABWR&quot;</span><span class="hl sym">.</span>getBytes
      <span class="hl kwa">val</span> iub<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwb">byte</span><span class="hl sym">] =</span> <span class="hl kwa">new</span> <span class="hl kwc">Array</span><span class="hl sym">(</span> <span class="hl str">'z'</span><span class="hl sym">.</span>toByte <span class="hl sym">)</span>

      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">val</span> indexValue <span class="hl sym">&lt;-</span> code zip comp<span class="hl sym">)</span>
         indexValue match <span class="hl sym">{</span> <span class="hl kwa">case</span> Pair<span class="hl sym">(</span>i<span class="hl sym">,</span>v<span class="hl sym">) =&gt;</span> iub<span class="hl sym">(</span>i<span class="hl sym">) =</span> v <span class="hl sym">}</span>

      iub
   <span class="hl sym">}</span>

   <span class="hl kwa">def</span> writeReverseComplement<span class="hl sym">(</span>sequence<span class="hl sym">:</span> Pair<span class="hl sym">[</span><span class="hl kwc">Line</span><span class="hl sym">,</span>LineStack<span class="hl sym">]) = {</span>

      <span class="hl kwa">def</span> inplaceComplementReverse<span class="hl sym">(</span>b<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwb">byte</span><span class="hl sym">]) = {</span>
         <span class="hl kwa">var</span> i <span class="hl sym">=</span> <span class="hl num">0</span>
         <span class="hl kwa">var</span> j <span class="hl sym">=</span> b<span class="hl sym">.</span>length <span class="hl sym">-</span> <span class="hl num">1</span>
         <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> j<span class="hl sym">){</span>
            <span class="hl kwa">val</span> swap <span class="hl sym">=</span> b<span class="hl sym">(</span>i<span class="hl sym">)</span>
            b<span class="hl sym">(</span>i<span class="hl sym">) =</span> IUB<span class="hl sym">(</span> b<span class="hl sym">(</span>j<span class="hl sym">) )</span>
            b<span class="hl sym">(</span>j<span class="hl sym">) =</span> IUB<span class="hl sym">(</span> swap <span class="hl sym">)</span>
            i <span class="hl sym">=</span> i <span class="hl sym">+</span> <span class="hl num">1</span>
            j <span class="hl sym">=</span> j <span class="hl sym">-</span> <span class="hl num">1</span>
         <span class="hl sym">}</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>i <span class="hl sym">==</span> j<span class="hl sym">)</span> b<span class="hl sym">(</span>i<span class="hl sym">) =</span> IUB<span class="hl sym">(</span> b<span class="hl sym">(</span>i<span class="hl sym">) )</span>
      <span class="hl sym">}</span>

      sequence match <span class="hl sym">{</span>
         <span class="hl kwa">case</span> Pair<span class="hl sym">(</span>header<span class="hl sym">,</span>lines<span class="hl sym">) =&gt; {</span>

            write<span class="hl sym">(</span>header<span class="hl sym">);</span> write<span class="hl sym">(</span>nl<span class="hl sym">)</span>

            <span class="hl kwa">val</span> k <span class="hl sym">=</span> <span class="hl kwa">if</span> <span class="hl sym">(</span>lines<span class="hl sym">.</span>isEmpty<span class="hl sym">)</span> <span class="hl num">0</span> <span class="hl kwa">else</span> lines<span class="hl sym">.</span>top<span class="hl sym">.</span>length
            <span class="hl kwa">val</span> LineLength <span class="hl sym">=</span> <span class="hl num">60</span>
            <span class="hl kwa">val</span> isSplitLine <span class="hl sym">=</span> k <span class="hl sym">&lt;</span> LineLength
            <span class="hl kwa">var</span> isFirstLine <span class="hl sym">=</span> true

            <span class="hl kwa">while</span> <span class="hl sym">(!</span>lines<span class="hl sym">.</span>isEmpty<span class="hl sym">) {</span>
               <span class="hl kwa">val</span> line <span class="hl sym">=</span> lines<span class="hl sym">.</span>pop
               inplaceComplementReverse<span class="hl sym">(</span>line<span class="hl sym">)</span>

               <span class="hl kwa">if</span> <span class="hl sym">(</span>isSplitLine<span class="hl sym">){</span>
                  <span class="hl kwa">if</span> <span class="hl sym">(</span>isFirstLine<span class="hl sym">){</span> write<span class="hl sym">(</span>line<span class="hl sym">);</span> isFirstLine <span class="hl sym">=</span> false <span class="hl sym">}</span>
                  <span class="hl kwa">else</span> <span class="hl sym">{</span> write<span class="hl sym">(</span>line<span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span>LineLength<span class="hl sym">-</span>k<span class="hl sym">);</span> write<span class="hl sym">(</span>nl<span class="hl sym">);</span> write<span class="hl sym">(</span>line<span class="hl sym">,</span>LineLength<span class="hl sym">-</span>k<span class="hl sym">,</span>k<span class="hl sym">) }</span>
               <span class="hl sym">}</span>
               <span class="hl kwa">else</span> <span class="hl sym">{</span> write<span class="hl sym">(</span>line<span class="hl sym">);</span> write<span class="hl sym">(</span>nl<span class="hl sym">) }</span>
            <span class="hl sym">}</span>

            <span class="hl kwa">if</span> <span class="hl sym">(</span>isSplitLine <span class="hl sym">&amp;&amp; !</span>isFirstLine<span class="hl sym">)</span> write<span class="hl sym">(</span>nl<span class="hl sym">)</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

<span class="hl sym">}</span>
