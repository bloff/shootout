<span class="hl slc">%   The Computer Language Benchmarks Game</span>
<span class="hl slc">%   http://shootout.alioth.debian.org/</span>
<span class="hl slc">%   contributed by Fredrik Svahn</span>

<span class="hl sym">-</span>module<span class="hl sym">(</span>spectralnorm<span class="hl sym">).</span>
<span class="hl sym">-</span>export<span class="hl sym">([</span>main<span class="hl sym">/</span><span class="hl num">1</span><span class="hl sym">]).</span>
<span class="hl sym">-</span>compile<span class="hl sym">( [</span> inline<span class="hl sym">, {</span> inline_size<span class="hl sym">,</span> <span class="hl num">1000</span> <span class="hl sym">} ] ).</span>

main<span class="hl sym">([</span>Arg<span class="hl sym">]) -&gt;</span>
    register<span class="hl sym">(</span>server<span class="hl sym">,</span> self<span class="hl sym">()),</span>
    N <span class="hl sym">=</span> list_to_integer<span class="hl sym">(</span>Arg<span class="hl sym">),</span>
    <span class="hl sym">{</span>U<span class="hl sym">,</span> V<span class="hl sym">} =</span> power_method<span class="hl sym">(</span>N<span class="hl sym">,</span> <span class="hl num">10</span><span class="hl sym">,</span> erlang<span class="hl sym">:</span>make_tuple<span class="hl sym">(</span>N<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">), []),</span>
    io<span class="hl sym">:</span>format<span class="hl sym">(</span><span class="hl str">&quot;~.9f</span><span class="hl esc">\</span><span class="hl str">n&quot;</span><span class="hl sym">, [</span> eigen<span class="hl sym">(</span>N<span class="hl sym">,</span> U<span class="hl sym">,</span> V<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">) ]),</span>
    erlang<span class="hl sym">:</span>halt<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">).</span>

<span class="hl slc">% eigenvalue of V</span>
eigen<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> _<span class="hl sym">,</span> _<span class="hl sym">,</span> VBV<span class="hl sym">,</span> VV<span class="hl sym">)</span> when VV <span class="hl sym">/=</span> <span class="hl num">0</span> <span class="hl sym">-&gt;</span> math<span class="hl sym">:</span>sqrt<span class="hl sym">(</span>VBV <span class="hl sym">/</span> VV<span class="hl sym">);</span>

eigen<span class="hl sym">(</span>I<span class="hl sym">,</span> U<span class="hl sym">,</span> V<span class="hl sym">,</span> VBV<span class="hl sym">,</span> VV<span class="hl sym">)</span> when I <span class="hl sym">/=</span> <span class="hl num">0</span> <span class="hl sym">-&gt;</span>
    VI <span class="hl sym">=</span> element<span class="hl sym">(</span>I<span class="hl sym">,</span> V<span class="hl sym">),</span>
    eigen<span class="hl sym">(</span>I<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> U<span class="hl sym">,</span> V<span class="hl sym">,</span> VBV <span class="hl sym">+</span> element<span class="hl sym">(</span>I<span class="hl sym">,</span> U<span class="hl sym">)*</span>VI<span class="hl sym">,</span> VV <span class="hl sym">+</span> VI<span class="hl sym">*</span>VI<span class="hl sym">).</span>

<span class="hl slc">% 2I steps of the power method</span>
power_method<span class="hl sym">(</span>_<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> A<span class="hl sym">,</span> B<span class="hl sym">) -&gt; {</span>A<span class="hl sym">,</span> B<span class="hl sym">};</span>
power_method<span class="hl sym">(</span>N<span class="hl sym">,</span> I<span class="hl sym">,</span> A<span class="hl sym">,</span> _B<span class="hl sym">) -&gt;</span>
    V <span class="hl sym">=</span> atav<span class="hl sym">(</span>N<span class="hl sym">,</span> A<span class="hl sym">),</span>
    U <span class="hl sym">=</span> atav<span class="hl sym">(</span>N<span class="hl sym">,</span> V<span class="hl sym">),</span>
    power_method<span class="hl sym">(</span>N<span class="hl sym">,</span> I<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> U<span class="hl sym">,</span> V<span class="hl sym">).</span>


<span class="hl slc">% return element i,j of infinite matrix A</span>
a<span class="hl sym">(</span>II<span class="hl sym">,</span>JJ<span class="hl sym">) -&gt;</span> <span class="hl num">1</span><span class="hl sym">/((</span>II<span class="hl sym">+</span>JJ<span class="hl sym">-</span><span class="hl num">2</span><span class="hl sym">)*(</span>II<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">+</span>JJ<span class="hl sym">)/</span><span class="hl num">2</span><span class="hl sym">+</span>II<span class="hl sym">).</span>


<span class="hl slc">% multiply vector v by matrix A</span>
av<span class="hl sym">(</span>N<span class="hl sym">,</span> V<span class="hl sym">) -&gt;</span> pmap<span class="hl sym">(</span>N<span class="hl sym">,</span> fun<span class="hl sym">(</span>Begin<span class="hl sym">,</span> End<span class="hl sym">) -&gt;</span> av<span class="hl sym">(</span>N<span class="hl sym">,</span> Begin<span class="hl sym">,</span> End<span class="hl sym">,</span> V<span class="hl sym">)</span> end<span class="hl sym">).</span>

av<span class="hl sym">(</span>N<span class="hl sym">,</span> Begin<span class="hl sym">,</span> End<span class="hl sym">,</span> V<span class="hl sym">) -&gt;</span> server <span class="hl sym">! {</span> self<span class="hl sym">(), [</span> avloop<span class="hl sym">(</span>N<span class="hl sym">,</span> I<span class="hl sym">,</span> V<span class="hl sym">,</span> <span class="hl num">0.0</span><span class="hl sym">) ||</span> I <span class="hl sym">&lt;-</span> lists<span class="hl sym">:</span>seq<span class="hl sym">(</span>Begin<span class="hl sym">,</span> End<span class="hl sym">) ]}.</span>

avloop<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> _<span class="hl sym">,</span> _<span class="hl sym">,</span> X<span class="hl sym">) -&gt;</span>  X<span class="hl sym">;</span>
avloop<span class="hl sym">(</span>J<span class="hl sym">,</span> I<span class="hl sym">,</span> V<span class="hl sym">,</span> X<span class="hl sym">) -&gt;</span>  avloop<span class="hl sym">(</span>J<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> I<span class="hl sym">,</span> V<span class="hl sym">,</span> X <span class="hl sym">+</span> a<span class="hl sym">(</span>I<span class="hl sym">,</span> J<span class="hl sym">)*</span>element<span class="hl sym">(</span>J<span class="hl sym">,</span> V<span class="hl sym">) ).</span>


<span class="hl slc">% multiply vector v by matrix A transposed</span>
atv<span class="hl sym">(</span>N<span class="hl sym">,</span> V<span class="hl sym">) -&gt;</span> pmap<span class="hl sym">(</span>N<span class="hl sym">,</span> fun<span class="hl sym">(</span>Begin<span class="hl sym">,</span> End<span class="hl sym">)-&gt;</span> atv<span class="hl sym">(</span>N<span class="hl sym">,</span> Begin<span class="hl sym">,</span> End<span class="hl sym">,</span> V<span class="hl sym">)</span> end<span class="hl sym">).</span>

atv<span class="hl sym">(</span>N<span class="hl sym">,</span> Begin<span class="hl sym">,</span> End<span class="hl sym">,</span> V<span class="hl sym">) -&gt;</span> server <span class="hl sym">! {</span> self<span class="hl sym">(), [</span> atvloop<span class="hl sym">(</span>N<span class="hl sym">,</span> I<span class="hl sym">,</span> V<span class="hl sym">,</span> <span class="hl num">0.0</span><span class="hl sym">) ||</span> I <span class="hl sym">&lt;-</span> lists<span class="hl sym">:</span>seq<span class="hl sym">(</span>Begin<span class="hl sym">,</span> End<span class="hl sym">) ]}.</span>

atvloop<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> _<span class="hl sym">,</span> _<span class="hl sym">,</span> X<span class="hl sym">) -&gt;</span> X<span class="hl sym">;</span>
atvloop<span class="hl sym">(</span>J<span class="hl sym">,</span> I<span class="hl sym">,</span> V<span class="hl sym">,</span> X<span class="hl sym">) -&gt;</span> atvloop<span class="hl sym">(</span>J<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> I<span class="hl sym">,</span> V<span class="hl sym">,</span> X <span class="hl sym">+</span> a<span class="hl sym">(</span>J<span class="hl sym">,</span> I<span class="hl sym">)*</span>element<span class="hl sym">(</span>J<span class="hl sym">,</span> V<span class="hl sym">) ).</span>


<span class="hl slc">% multiply vector v by matrix A and then by matrix A transposed</span>
atav<span class="hl sym">(</span>N<span class="hl sym">,</span> V<span class="hl sym">) -&gt;</span> atv<span class="hl sym">(</span>N<span class="hl sym">,</span> av<span class="hl sym">(</span>N<span class="hl sym">,</span> V<span class="hl sym">)).</span>


<span class="hl slc">%Helper function for multicore</span>
pmap<span class="hl sym">(</span>N<span class="hl sym">,</span> F<span class="hl sym">) -&gt;</span>
    Chunks <span class="hl sym">=</span> chunks<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> erlang<span class="hl sym">:</span>system_info<span class="hl sym">(</span>logical_processors<span class="hl sym">),</span> N<span class="hl sym">, []),</span>
    Pids <span class="hl sym">= [</span>spawn<span class="hl sym">(</span>fun<span class="hl sym">()-&gt;</span> F<span class="hl sym">(</span>Begin<span class="hl sym">,</span> End<span class="hl sym">)</span> end<span class="hl sym">) || {</span>Begin<span class="hl sym">,</span> End<span class="hl sym">} &lt;-</span> Chunks<span class="hl sym">],</span>
    Res <span class="hl sym">= [</span> receive <span class="hl sym">{</span>Pid<span class="hl sym">,</span> X<span class="hl sym">} -&gt;</span> X end <span class="hl sym">||</span> Pid <span class="hl sym">&lt;-</span> Pids<span class="hl sym">],</span>
    list_to_tuple<span class="hl sym">(</span>lists<span class="hl sym">:</span>flatten<span class="hl sym">(</span>Res<span class="hl sym">)).</span>

chunks<span class="hl sym">(</span>I<span class="hl sym">,</span> P<span class="hl sym">,</span> N<span class="hl sym">,</span> A<span class="hl sym">)</span> when I <span class="hl sym">==</span> P<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl sym">-&gt;</span> lists<span class="hl sym">:</span>reverse<span class="hl sym">([{</span>I<span class="hl sym">*(</span>N div P<span class="hl sym">)+</span><span class="hl num">1</span><span class="hl sym">,</span> N<span class="hl sym">} |</span> A <span class="hl sym">]);</span>
chunks<span class="hl sym">(</span>I<span class="hl sym">,</span> P<span class="hl sym">,</span> N<span class="hl sym">,</span> A<span class="hl sym">) -&gt;</span> chunks<span class="hl sym">(</span>I<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> P<span class="hl sym">,</span> N<span class="hl sym">, [{</span> I<span class="hl sym">*(</span>N div P<span class="hl sym">)+</span><span class="hl num">1</span><span class="hl sym">, (</span>I<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)*(</span>N div P<span class="hl sym">)} |</span> A <span class="hl sym">]).</span>

