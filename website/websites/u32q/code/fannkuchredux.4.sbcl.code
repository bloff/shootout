<span class="hl slc">;;   The Computer Language Benchmarks Game</span>
<span class="hl slc">;;   http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; By Jon Smith (rev 4)</span>
<span class="hl slc">;;; </span>
<span class="hl slc">;;; This is a multi core implementation. It should be quite fast.</span>
<span class="hl slc">;;; It is now a mix of multiple techniques stolen from a number of other implementations.</span>
<span class="hl slc">;;; (It is essentially based on every other implementation available)</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; To compile</span>
<span class="hl slc">;;; sbcl --load fannkuch.lisp --eval &quot;(save-lisp-and-die \&quot;fannkuch.core\&quot; :purify t :toplevel (lambda () (main) (quit)))&quot;</span>
<span class="hl slc">;;; To run</span>
<span class="hl slc">;;; sbcl --noinform --core fannkuch.core %A</span>
<span class="hl slc">;(setf *efficiency-note-cost-threshold* 1)</span>
<span class="hl slc">;(setf *efficiency-note-limit* 8)</span>

<span class="hl sym">(</span>declaim <span class="hl sym">(</span>optimize <span class="hl sym">(</span>speed <span class="hl num">3</span><span class="hl sym">) (</span>safety <span class="hl num">0</span><span class="hl sym">) (</span>space <span class="hl num">1</span><span class="hl sym">) (</span>debug <span class="hl num">0</span><span class="hl sym">)))</span>

<span class="hl sym">(</span>defmacro sb <span class="hl sym">(</span>a<span class="hl sym">) `(</span>the fixnum <span class="hl sym">,</span>a<span class="hl sym">))</span>
<span class="hl sym">(</span>deftype sb <span class="hl sym">() '</span>fixnum<span class="hl sym">)</span>

<span class="hl sym">(</span>defmacro setlambda<span class="hl sym">(</span>n<span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>type fixnum n<span class="hl sym">))</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>copy <span class="hl sym">(</span>gensym<span class="hl sym">))</span>
	<span class="hl sym">(</span>perm <span class="hl sym">(</span>gensym<span class="hl sym">)))</span>
  <span class="hl sym">`(</span>lambda <span class="hl sym">(,</span>perm <span class="hl sym">,</span>copy<span class="hl sym">)</span>
     <span class="hl sym">(</span>declare <span class="hl sym">(</span>optimize <span class="hl sym">(</span>speed <span class="hl num">3</span><span class="hl sym">) (</span>safety <span class="hl num">0</span><span class="hl sym">) (</span>space <span class="hl num">0</span><span class="hl sym">) (</span>debug <span class="hl num">0</span><span class="hl sym">))</span>
      <span class="hl sym">(</span>type <span class="hl sym">(</span>simple<span class="hl sym">-</span>array sb <span class="hl sym">(,</span>n<span class="hl sym">)) ,</span>copy <span class="hl sym">,</span>perm<span class="hl sym">))</span>
     <span class="hl sym">,</span>&#64;<span class="hl sym">(</span>loop for i of<span class="hl sym">-</span>type fixnum from <span class="hl num">0</span> below n collect
	    <span class="hl sym">`(</span>setf <span class="hl sym">(</span>aref <span class="hl sym">,</span>copy <span class="hl sym">,</span>i<span class="hl sym">) (</span>aref <span class="hl sym">,</span>perm <span class="hl sym">,</span>i<span class="hl sym">))))))</span>

<span class="hl sym">(</span>defmacro countfliplambda <span class="hl sym">(</span>n<span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>type fixnum n<span class="hl sym">))</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>copy <span class="hl sym">(</span>gensym<span class="hl sym">))</span>
	<span class="hl sym">(</span>c <span class="hl sym">(</span>gensym<span class="hl sym">))</span>
	<span class="hl sym">(</span>z <span class="hl sym">(</span>gensym<span class="hl sym">)))</span>
    <span class="hl sym">`(</span>lambda <span class="hl sym">(,</span>copy <span class="hl sym">&amp;</span>aux <span class="hl sym">(,</span>c <span class="hl num">0</span><span class="hl sym">))</span>
       <span class="hl sym">(</span>declare <span class="hl sym">(</span>optimize <span class="hl sym">(</span>speed <span class="hl num">3</span><span class="hl sym">) (</span>safety <span class="hl num">0</span><span class="hl sym">) (</span>space <span class="hl num">0</span><span class="hl sym">) (</span>debug <span class="hl num">0</span><span class="hl sym">))</span>
		<span class="hl sym">(</span>type sb <span class="hl sym">,</span>c<span class="hl sym">)</span>
		<span class="hl sym">(</span>type <span class="hl sym">(</span>simple<span class="hl sym">-</span>array sb <span class="hl sym">(,</span>n<span class="hl sym">)) ,</span>copy<span class="hl sym">))</span>
       <span class="hl sym">(</span>let <span class="hl sym">((,</span>z <span class="hl sym">(</span>aref <span class="hl sym">,</span>copy <span class="hl num">0</span><span class="hl sym">)))</span>
	 <span class="hl sym">(</span>loop until <span class="hl sym">(= ,</span>z <span class="hl num">0</span><span class="hl sym">)</span> do
	      <span class="hl sym">(</span>progn
		<span class="hl sym">(</span>case <span class="hl sym">,</span>z 
		  <span class="hl sym">,</span>&#64;<span class="hl sym">(</span>loop for i of<span class="hl sym">-</span>type sb from <span class="hl num">1</span> to <span class="hl sym">(-</span> n <span class="hl num">1</span><span class="hl sym">)</span> collect
			 <span class="hl sym">`(,</span>i
			   <span class="hl sym">,</span>&#64;<span class="hl sym">(</span>loop for j of<span class="hl sym">-</span>type sb from <span class="hl num">0</span> to <span class="hl sym">(</span>ash i <span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
				if <span class="hl sym">(</span>not <span class="hl sym">(=</span> j <span class="hl sym">(-</span> i j<span class="hl sym">)))</span>
				collect <span class="hl sym">`(</span>rotatef <span class="hl sym">(</span>aref <span class="hl sym">,</span>copy <span class="hl sym">,</span>j<span class="hl sym">)</span> 
						  <span class="hl sym">(</span>aref <span class="hl sym">,</span>copy <span class="hl sym">,(-</span> i j<span class="hl sym">)))))))</span>
		<span class="hl sym">(</span>incf <span class="hl sym">,</span>c<span class="hl sym">)</span>
		<span class="hl sym">(</span>setf <span class="hl sym">,</span>z <span class="hl sym">(</span>aref <span class="hl sym">,</span>copy <span class="hl num">0</span><span class="hl sym">)))))</span>
       <span class="hl sym">,</span>c<span class="hl sym">)))</span>
<span class="hl sym">(</span>eval<span class="hl sym">-</span>when <span class="hl sym">(:</span>compile<span class="hl sym">-</span>toplevel <span class="hl sym">:</span>load<span class="hl sym">-</span>toplevel <span class="hl sym">:</span>execute<span class="hl sym">)</span>
  <span class="hl sym">(</span>defun factorial <span class="hl sym">(</span>n<span class="hl sym">)</span>
    <span class="hl sym">(</span>declare <span class="hl sym">(</span>type fixnum n<span class="hl sym">))</span>
    <span class="hl sym">(</span>if <span class="hl sym">(&gt;</span> n <span class="hl num">2</span><span class="hl sym">)</span>
	<span class="hl sym">(*</span> n <span class="hl sym">(</span>factorial <span class="hl sym">(-</span> n <span class="hl num">1</span><span class="hl sym">)))</span>
	n<span class="hl sym">)))</span>

<span class="hl sym">(</span>let <span class="hl sym">((</span>factorial<span class="hl sym">-</span>array <span class="hl sym">(</span>apply #<span class="hl sym">'</span>vector <span class="hl sym">(</span>loop for i from <span class="hl num">1</span> to <span class="hl num">16</span> collect <span class="hl sym">(</span>factorial i<span class="hl sym">)))))</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>type <span class="hl sym">(</span>simple<span class="hl sym">-</span>array fixnum <span class="hl sym">(*))))</span>
  <span class="hl sym">(</span>defun pre<span class="hl sym">-</span>computed<span class="hl sym">-</span>factorial <span class="hl sym">(</span>n<span class="hl sym">)</span>
    <span class="hl sym">(</span>declare <span class="hl sym">(</span>type fixnum n<span class="hl sym">))</span>
    <span class="hl sym">(</span>aref factorial<span class="hl sym">-</span>array <span class="hl sym">(-</span> n <span class="hl num">1</span><span class="hl sym">))))</span>


<span class="hl sym">(</span>defun nth<span class="hl sym">-</span>permutation <span class="hl sym">(</span>perm copy count idx <span class="hl sym">&amp;</span>optional <span class="hl sym">(</span>len <span class="hl sym">(</span>length perm<span class="hl sym">)))</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>type <span class="hl sym">(</span>simple<span class="hl sym">-</span>array fixnum <span class="hl sym">(*))</span> perm copy count<span class="hl sym">)</span>
	   <span class="hl sym">(</span>type fixnum idx len<span class="hl sym">))</span>
  <span class="hl sym">(</span>loop for i from <span class="hl num">0</span> below len do <span class="hl sym">(</span>setf <span class="hl sym">(</span>aref perm i<span class="hl sym">)</span> i<span class="hl sym">))</span>
  <span class="hl sym">(</span>loop for i of<span class="hl sym">-</span>type fixnum from <span class="hl sym">(-</span> len <span class="hl num">1</span><span class="hl sym">)</span> above <span class="hl num">0</span> do
       <span class="hl sym">(</span>let <span class="hl sym">((</span>d <span class="hl sym">(</span>truncate idx <span class="hl sym">(</span>the fixnum <span class="hl sym">(</span>pre<span class="hl sym">-</span>computed<span class="hl sym">-</span>factorial i<span class="hl sym">)))))</span>
	 <span class="hl sym">(</span>declare <span class="hl sym">(</span>type fixnum d<span class="hl sym">))</span>
	 <span class="hl sym">(</span>setf <span class="hl sym">(</span>aref count i<span class="hl sym">)</span> d<span class="hl sym">)</span>
	 <span class="hl sym">(</span>setf idx <span class="hl sym">(</span>the fixnum <span class="hl sym">(</span>mod idx <span class="hl sym">(</span>the fixnum<span class="hl sym">(</span>pre<span class="hl sym">-</span>computed<span class="hl sym">-</span>factorial i<span class="hl sym">)))))</span>
	 <span class="hl sym">(</span>loop for m of<span class="hl sym">-</span>type fixnum from <span class="hl num">0</span> to i do <span class="hl sym">(</span>setf <span class="hl sym">(</span>aref copy m<span class="hl sym">) (</span>aref perm m<span class="hl sym">)))</span>
	 <span class="hl sym">(</span>loop for j of<span class="hl sym">-</span>type fixnum from <span class="hl num">0</span> to i do
	      <span class="hl sym">(</span>if <span class="hl sym">(&lt;= (+</span> j d<span class="hl sym">)</span> i<span class="hl sym">)</span>
		  <span class="hl sym">(</span>setf <span class="hl sym">(</span>aref perm j<span class="hl sym">) (</span>aref copy <span class="hl sym">(+</span> j d<span class="hl sym">)))</span>
		  <span class="hl sym">(</span>setf <span class="hl sym">(</span>aref perm j<span class="hl sym">) (</span>aref copy <span class="hl sym">(- (</span>sb <span class="hl sym">(+</span> j d<span class="hl sym">))</span> i <span class="hl num">1</span><span class="hl sym">))))))))</span>

<span class="hl sym">(</span>defun next<span class="hl sym">-</span>permutation <span class="hl sym">(</span>perm count<span class="hl sym">)</span>
  <span class="hl sym">(</span>Declare <span class="hl sym">(</span>type <span class="hl sym">(</span>simple<span class="hl sym">-</span>array sb <span class="hl sym">(*))</span> perm count<span class="hl sym">))</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>first <span class="hl sym">(</span>aref perm <span class="hl num">1</span><span class="hl sym">)))</span>
    <span class="hl sym">(</span>setf <span class="hl sym">(</span>aref perm <span class="hl num">1</span><span class="hl sym">) (</span>aref perm <span class="hl num">0</span><span class="hl sym">))</span>
    <span class="hl sym">(</span>setf <span class="hl sym">(</span>aref perm <span class="hl num">0</span><span class="hl sym">)</span> first<span class="hl sym">)</span>
    <span class="hl sym">(</span>let <span class="hl sym">((</span>i <span class="hl num">1</span><span class="hl sym">))</span>
      <span class="hl sym">(</span>incf <span class="hl sym">(</span>aref count i<span class="hl sym">))</span>
      <span class="hl sym">(</span>do <span class="hl sym">()</span>
	  <span class="hl sym">((</span>not <span class="hl sym">(&gt; (</span>aref count i<span class="hl sym">)</span> i<span class="hl sym">)))</span>
	<span class="hl sym">(</span>setf <span class="hl sym">(</span>aref count i<span class="hl sym">)</span> <span class="hl num">0</span><span class="hl sym">)</span>
	<span class="hl sym">(</span>incf i<span class="hl sym">)</span>
	<span class="hl sym">(</span>setf <span class="hl sym">(</span>aref perm <span class="hl num">0</span><span class="hl sym">) (</span>aref perm <span class="hl num">1</span><span class="hl sym">))</span>
	<span class="hl sym">(</span>let <span class="hl sym">((</span>next<span class="hl sym">-</span>first <span class="hl sym">(</span>aref perm <span class="hl num">1</span><span class="hl sym">)))</span>
	  <span class="hl sym">(</span>loop for j from <span class="hl num">1</span> below i do
	       <span class="hl sym">(</span>setf <span class="hl sym">(</span>aref perm j<span class="hl sym">) (</span>aref perm <span class="hl sym">(+</span> j <span class="hl num">1</span><span class="hl sym">))))</span>
	  <span class="hl sym">(</span>setf <span class="hl sym">(</span>aref perm i<span class="hl sym">)</span> first<span class="hl sym">)</span>
	  <span class="hl sym">(</span>setf first next<span class="hl sym">-</span>first<span class="hl sym">))</span>
	<span class="hl sym">(</span>incf <span class="hl sym">(</span>aref count i<span class="hl sym">))))))</span>



<span class="hl sym">(</span>defun fannkuch <span class="hl sym">(</span>n<span class="hl sym">)</span>  
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>type fixnum n<span class="hl sym">))</span>
  <span class="hl sym">(</span>flet <span class="hl sym">((</span>fannkuch<span class="hl sym">-</span>sub <span class="hl sym">(</span>n cflip copyfn start end<span class="hl sym">)</span>
	   <span class="hl sym">(</span>declare <span class="hl sym">(</span>type sb n start end<span class="hl sym">)</span>
		    <span class="hl sym">(</span>type <span class="hl sym">(</span>function <span class="hl sym">((</span>simple<span class="hl sym">-</span>array sb <span class="hl sym">(*))))</span> cflip<span class="hl sym">)</span>
		    <span class="hl sym">(</span>type <span class="hl sym">(</span>function <span class="hl sym">((</span>simple<span class="hl sym">-</span>array sb <span class="hl sym">(*)) (</span>simple<span class="hl sym">-</span>array sb <span class="hl sym">(*))))</span> copyfn<span class="hl sym">))</span>
	   <span class="hl sym">(</span>let <span class="hl sym">((</span>csum <span class="hl num">0</span><span class="hl sym">)</span>
		 <span class="hl sym">(</span>fmax <span class="hl num">0</span><span class="hl sym">)</span>
		 <span class="hl sym">(</span>count <span class="hl sym">(</span>make<span class="hl sym">-</span>array n <span class="hl sym">:</span>element<span class="hl sym">-</span>type <span class="hl sym">'</span>fixnum<span class="hl sym">))</span>
		 <span class="hl sym">(</span>copy <span class="hl sym">(</span>make<span class="hl sym">-</span>array n <span class="hl sym">:</span>element<span class="hl sym">-</span>type <span class="hl sym">'</span>fixnum<span class="hl sym">))</span>
		 <span class="hl sym">(</span>perm <span class="hl sym">(</span>make<span class="hl sym">-</span>array n <span class="hl sym">:</span>element<span class="hl sym">-</span>type <span class="hl sym">'</span>fixnum<span class="hl sym">)))</span>
	     <span class="hl sym">(</span>declare <span class="hl sym">(</span>type <span class="hl sym">(</span>simple<span class="hl sym">-</span>array sb <span class="hl sym">(*))</span> perm copy count<span class="hl sym">)</span>
		      <span class="hl sym">(</span>type sb  csum fmax<span class="hl sym">))</span>
	     <span class="hl sym">(</span>nth<span class="hl sym">-</span>permutation perm copy count start n<span class="hl sym">)</span>
	     <span class="hl sym">(</span>dotimes <span class="hl sym">(</span>i <span class="hl sym">(-</span> end start<span class="hl sym">))</span>
	       <span class="hl sym">(</span>funcall copyfn perm copy<span class="hl sym">)</span>
	       <span class="hl sym">(</span>let <span class="hl sym">((</span>c <span class="hl sym">(</span>funcall cflip copy<span class="hl sym">)))</span>
		 <span class="hl sym">(</span>declare <span class="hl sym">(</span>type sb c<span class="hl sym">))</span>
		 <span class="hl sym">(</span>setf csum <span class="hl sym">(</span>sb <span class="hl sym">(+</span> csum  <span class="hl sym">(</span>sb <span class="hl sym">(</span>if <span class="hl sym">(</span>evenp i<span class="hl sym">)</span> c <span class="hl sym">(-</span> c<span class="hl sym">))))))</span>
		 <span class="hl sym">(</span>when <span class="hl sym">(&gt;</span> c fmax<span class="hl sym">)</span>
		   <span class="hl sym">(</span>setf fmax c<span class="hl sym">)))</span>
	       <span class="hl sym">(</span>when <span class="hl sym">(&lt; (+</span> <span class="hl num">1</span> i<span class="hl sym">)</span> end<span class="hl sym">)</span>
		 <span class="hl sym">(</span>next<span class="hl sym">-</span>permutation perm count<span class="hl sym">)))</span>
	     <span class="hl sym">(</span>values csum fmax<span class="hl sym">))))</span>


    <span class="hl sym">(</span>let<span class="hl sym">* ((</span>cflip <span class="hl sym">(</span>the <span class="hl sym">(</span>function <span class="hl sym">((</span>simple<span class="hl sym">-</span>array sb <span class="hl sym">(*)))) (</span>eval <span class="hl sym">`(</span>countfliplambda <span class="hl sym">,</span>n<span class="hl sym">))))</span>
	   <span class="hl sym">(</span>copyfn <span class="hl sym">(</span>the <span class="hl sym">(</span>function <span class="hl sym">((</span>simple<span class="hl sym">-</span>array sb <span class="hl sym">(*)) (</span>simple<span class="hl sym">-</span>array sb <span class="hl sym">(*)))) (</span>eval <span class="hl sym">`(</span>setlambda <span class="hl sym">,</span>n<span class="hl sym">))))</span>
	   <span class="hl sym">(</span>csum <span class="hl num">0</span><span class="hl sym">) (</span>fmax <span class="hl num">0</span><span class="hl sym">))</span>
      <span class="hl sym">(</span>declare <span class="hl sym">(</span>type sb csum fmax<span class="hl sym">))</span>
      #<span class="hl sym">-</span>sb<span class="hl sym">-</span>thread <span class="hl sym">(</span>multiple<span class="hl sym">-</span>value<span class="hl sym">-</span>setq <span class="hl sym">(</span>csum fmax<span class="hl sym">) (</span>fannkuch<span class="hl sym">-</span>sub n cflip copyfn <span class="hl num">0</span> <span class="hl sym">(</span>pre<span class="hl sym">-</span>computed<span class="hl sym">-</span>factorial n<span class="hl sym">)))</span>

      #<span class="hl sym">+</span>sb<span class="hl sym">-</span>thread
      <span class="hl sym">(</span>let<span class="hl sym">* ((</span>cores <span class="hl num">4</span><span class="hl sym">)</span>
	     <span class="hl sym">(</span>index <span class="hl num">0</span><span class="hl sym">)</span>
	     <span class="hl sym">(</span>index<span class="hl sym">-</span>step <span class="hl sym">(</span>truncate <span class="hl sym">(</span>the fixnum <span class="hl sym">(+ (</span>the fixnum <span class="hl sym">(</span>pre<span class="hl sym">-</span>computed<span class="hl sym">-</span>factorial n<span class="hl sym">)) (-</span> cores <span class="hl num">1</span><span class="hl sym">)))</span> cores<span class="hl sym">))</span>
	     <span class="hl sym">(</span>threads <span class="hl sym">(</span>loop for i from <span class="hl num">0</span> below cores
			 collecting  <span class="hl sym">(</span>sb<span class="hl sym">-</span>thread<span class="hl sym">:</span>make<span class="hl sym">-</span>thread <span class="hl sym">(</span>let <span class="hl sym">((</span>start index<span class="hl sym">) (</span>end <span class="hl sym">(+</span> index index<span class="hl sym">-</span>step<span class="hl sym">)))</span>
							      <span class="hl sym">(</span>declare <span class="hl sym">(</span>fixnum start end<span class="hl sym">))</span>
							      <span class="hl sym">(</span>lambda <span class="hl sym">() (</span>fannkuch<span class="hl sym">-</span>sub n cflip copyfn start end<span class="hl sym">))))</span>
			 do <span class="hl sym">(</span>The fixnum <span class="hl sym">(</span>incf index index<span class="hl sym">-</span>step<span class="hl sym">)))))</span>
	<span class="hl sym">(</span>declare <span class="hl sym">(</span>type fixnum cores index index index<span class="hl sym">-</span>step<span class="hl sym">))</span>
	<span class="hl sym">(</span>dolist <span class="hl sym">(</span>thread threads<span class="hl sym">)</span> 
	  <span class="hl sym">(</span>multiple<span class="hl sym">-</span>value<span class="hl sym">-</span>bind <span class="hl sym">(</span>sum max<span class="hl sym">) (</span>sb<span class="hl sym">-</span>thread<span class="hl sym">:</span>join<span class="hl sym">-</span>thread thread<span class="hl sym">)</span>
	    <span class="hl sym">(</span>declare <span class="hl sym">(</span>type fixnum sum max<span class="hl sym">))</span>
	    <span class="hl sym">(</span>incf csum sum<span class="hl sym">)</span>
	    <span class="hl sym">(</span>when <span class="hl sym">(&gt;</span> max fmax<span class="hl sym">)</span>
	      <span class="hl sym">(</span>setf fmax max<span class="hl sym">)))))</span>
      <span class="hl sym">(</span>format t <span class="hl str">&quot;~s~%Pfannkuchen(~s) = ~s~%&quot;</span> csum n fmax<span class="hl sym">))))</span>

<span class="hl sym">(</span>defun main <span class="hl sym">()</span>  
  <span class="hl sym">(</span>let<span class="hl sym">* ((</span>args <span class="hl sym">(</span>cdr sb<span class="hl sym">-</span>ext<span class="hl sym">:*</span>posix<span class="hl sym">-</span>argv<span class="hl sym">*))</span>
         <span class="hl sym">(</span>n <span class="hl sym">(</span>parse<span class="hl sym">-</span>integer <span class="hl sym">(</span>car args<span class="hl sym">))))</span>
    <span class="hl sym">(</span>declare <span class="hl sym">(</span>type fixnum n<span class="hl sym">))</span>
    <span class="hl sym">(</span>fannkuch n<span class="hl sym">)))</span>
