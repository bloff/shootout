<span class="hl slc">% The Computer Language Benchmarks Game</span>
<span class="hl slc">% http://shootout.alioth.debian.org/</span>
<span class="hl slc">%</span>
<span class="hl slc">% Based on work by Anthony Borla (SWI-Prolog),</span>
<span class="hl slc">%   Christophe Troestler, Matthias Giovannini, and David Teller (OCaml),</span>
<span class="hl slc">%   Mike Pall and Stefan Krause (Java)</span>
<span class="hl slc">% contributed by Glendon Holst</span>

<span class="hl sym">:-</span> module pidigits<span class="hl sym">.</span>
<span class="hl sym">:-</span> interface<span class="hl sym">.</span>
<span class="hl sym">:-</span> import_module io<span class="hl sym">.</span>

<span class="hl sym">:-</span> pred main<span class="hl sym">(</span>io<span class="hl sym">::</span>di<span class="hl sym">,</span> io<span class="hl sym">::</span>uo<span class="hl sym">)</span> <span class="hl kwa">is</span> det<span class="hl sym">.</span>

<span class="hl slc">% ----------------------------------------------------------------------</span>

<span class="hl sym">:-</span> implementation<span class="hl sym">.</span>

<span class="hl sym">:-</span> import_module list<span class="hl sym">.</span>
<span class="hl sym">:-</span> import_module int<span class="hl sym">.</span>
<span class="hl sym">:-</span> import_module <span class="hl kwb">integer</span><span class="hl sym">.</span>
<span class="hl sym">:-</span> import_module bool<span class="hl sym">.</span>
<span class="hl sym">:-</span> import_module string<span class="hl sym">.</span>
<span class="hl sym">:-</span> import_module char<span class="hl sym">.</span>
<span class="hl sym">:-</span> import_module exception<span class="hl sym">.</span>

<span class="hl slc">% ----------------------------------------------------------------------</span>

main<span class="hl sym">(!</span>IO<span class="hl sym">) :-</span>
	io<span class="hl sym">.</span>command_line_arguments<span class="hl sym">(</span>Args<span class="hl sym">, !</span>IO<span class="hl sym">),</span>
	<span class="hl sym">(</span>
		if
			Args <span class="hl sym">= [</span>AString<span class="hl sym">|</span>_<span class="hl sym">],</span>
			string<span class="hl sym">.</span>to_int<span class="hl sym">(</span>string<span class="hl sym">.</span>strip<span class="hl sym">(</span>AString<span class="hl sym">),</span> Aint<span class="hl sym">)</span>
		then
			N <span class="hl sym">=</span> Aint
		else
			N <span class="hl kwa">is</span> <span class="hl num">2500</span>
	<span class="hl sym">),</span>
	pidigits<span class="hl sym">(</span>N<span class="hl sym">, !</span>IO<span class="hl sym">).</span>


<span class="hl slc">% ----------------------------------------------------------------------</span>
<span class="hl sym">:-</span> type integer_digits <span class="hl sym">---&gt;</span> integer_digits<span class="hl sym">(</span>	q <span class="hl sym">::</span> <span class="hl kwb">integer</span><span class="hl sym">,</span>
											r <span class="hl sym">::</span> <span class="hl kwb">integer</span><span class="hl sym">,</span>
											s <span class="hl sym">::</span> <span class="hl kwb">integer</span><span class="hl sym">,</span>
											t <span class="hl sym">::</span> <span class="hl kwb">integer</span><span class="hl sym">).</span>

<span class="hl slc">% ------------------------------- %</span>

<span class="hl sym">:-</span> pred pidigits<span class="hl sym">(</span>int<span class="hl sym">::</span>in<span class="hl sym">,</span> io<span class="hl sym">::</span>di<span class="hl sym">,</span> io<span class="hl sym">::</span>uo<span class="hl sym">)</span> <span class="hl kwa">is</span> det<span class="hl sym">.</span>


pidigits<span class="hl sym">(</span>N<span class="hl sym">, !</span>IO<span class="hl sym">) :-</span>
	PIDigits <span class="hl sym">=</span> integer_digits<span class="hl sym">(</span>one<span class="hl sym">,</span> zero<span class="hl sym">,</span> zero<span class="hl sym">,</span> one<span class="hl sym">),</span>
	pidigits_<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> N<span class="hl sym">,</span> zero<span class="hl sym">,</span> PIDigits<span class="hl sym">, !</span>IO<span class="hl sym">),</span>
	<span class="hl sym">(</span>
		N <span class="hl kwa">mod</span> <span class="hl num">10</span> \<span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl sym">-&gt;</span>
		io<span class="hl sym">.</span>format<span class="hl sym">(</span><span class="hl str">&quot;%s</span><span class="hl esc">\t</span><span class="hl str">:%i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span>
			<span class="hl sym">[</span>s<span class="hl sym">(</span>string<span class="hl sym">.</span>pad_right<span class="hl sym">(</span><span class="hl str">&quot;&quot;</span><span class="hl sym">,</span> <span class="hl str">' '</span><span class="hl sym">, (</span><span class="hl num">10</span> <span class="hl sym">- (</span>N <span class="hl kwa">mod</span> <span class="hl num">10</span><span class="hl sym">)))),</span> i<span class="hl sym">(</span>N<span class="hl sym">)],</span>
			<span class="hl sym">!</span>IO<span class="hl sym">)</span>
	<span class="hl sym">;</span>
		<span class="hl kwa">true</span>
	<span class="hl sym">).</span>

<span class="hl slc">% ------------- %</span>

<span class="hl sym">:-</span> pred pidigits_<span class="hl sym">(</span>int<span class="hl sym">,</span> int<span class="hl sym">,</span> <span class="hl kwb">integer</span><span class="hl sym">,</span> integer_digits<span class="hl sym">,</span> io<span class="hl sym">,</span> io<span class="hl sym">)</span> <span class="hl kwa">is</span> det<span class="hl sym">.</span>
<span class="hl sym">:-</span> mode pidigits_<span class="hl sym">(</span>in<span class="hl sym">,</span> in<span class="hl sym">,</span> in<span class="hl sym">,</span> in<span class="hl sym">,</span> di<span class="hl sym">,</span> uo<span class="hl sym">)</span> <span class="hl kwa">is</span> det<span class="hl sym">.</span>

pidigits_<span class="hl sym">(</span>I<span class="hl sym">,</span> N<span class="hl sym">,</span> K<span class="hl sym">,</span> IntDigits0<span class="hl sym">, !</span>IO<span class="hl sym">) :-</span>
<span class="hl sym">(</span>
	I <span class="hl sym">=&lt;</span> N <span class="hl sym">-&gt;</span>
    DigitNext <span class="hl sym">=</span> extract<span class="hl sym">(</span><span class="hl kwb">integer</span><span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">),</span> IntDigits0<span class="hl sym">),</span>
    DigitSafe <span class="hl sym">=</span> extract<span class="hl sym">(</span><span class="hl kwb">integer</span><span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">),</span> IntDigits0<span class="hl sym">),</span>

    <span class="hl sym">(</span>
		DigitNext \<span class="hl sym">=</span> DigitSafe <span class="hl sym">-&gt;</span>
		K1 <span class="hl sym">=</span> K <span class="hl sym">+</span> one<span class="hl sym">,</span>
		consume<span class="hl sym">(</span>K1<span class="hl sym">,</span> IntDigits0<span class="hl sym">,</span> IntDigits1<span class="hl sym">),</span>
		pidigits_<span class="hl sym">(</span>I<span class="hl sym">,</span> N<span class="hl sym">,</span> K1<span class="hl sym">,</span> IntDigits1<span class="hl sym">, !</span>IO<span class="hl sym">)</span>
	<span class="hl sym">;</span>
		io<span class="hl sym">.</span>write_int<span class="hl sym">(</span><span class="hl kwb">integer</span><span class="hl sym">.</span>int<span class="hl sym">(</span>DigitNext<span class="hl sym">), !</span>IO<span class="hl sym">),</span>
		<span class="hl sym">(</span>
			I <span class="hl kwa">mod</span> <span class="hl num">10</span> <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl sym">-&gt;</span>
			io<span class="hl sym">.</span>format<span class="hl sym">(</span><span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">:%i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,[</span>i<span class="hl sym">(</span>I<span class="hl sym">)], !</span>IO<span class="hl sym">)</span>
		<span class="hl sym">;</span>
			<span class="hl kwa">true</span>
		<span class="hl sym">),</span>
		produce<span class="hl sym">(</span>DigitNext<span class="hl sym">,</span> IntDigits0<span class="hl sym">,</span> IntDigits1<span class="hl sym">),</span>
		pidigits_<span class="hl sym">(</span>I <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span> N<span class="hl sym">,</span> K<span class="hl sym">,</span> IntDigits1<span class="hl sym">, !</span>IO<span class="hl sym">)</span>
	<span class="hl sym">)</span>
<span class="hl sym">;</span>
	<span class="hl kwa">true</span>
<span class="hl sym">).</span>

<span class="hl slc">% ------------- %</span>


<span class="hl sym">:-</span> func extract<span class="hl sym">(</span><span class="hl kwb">integer</span><span class="hl sym">,</span> integer_digits<span class="hl sym">) =</span> <span class="hl kwb">integer</span><span class="hl sym">.</span>

extract<span class="hl sym">(</span>X<span class="hl sym">,</span> IntDigits<span class="hl sym">) = ((</span>IntDigits^q <span class="hl sym">*</span> X<span class="hl sym">) +</span> IntDigits^r<span class="hl sym">) //</span>
	<span class="hl sym">((</span>IntDigits^s <span class="hl sym">*</span> X<span class="hl sym">) +</span> IntDigits^t<span class="hl sym">).</span>

<span class="hl slc">% ------------- %</span>

<span class="hl sym">:-</span> pred produce<span class="hl sym">(</span><span class="hl kwb">integer</span><span class="hl sym">::</span>in<span class="hl sym">,</span> integer_digits<span class="hl sym">::</span>in<span class="hl sym">,</span> integer_digits<span class="hl sym">::</span>out<span class="hl sym">)</span> <span class="hl kwa">is</span> det<span class="hl sym">.</span>

produce<span class="hl sym">(</span>Digit<span class="hl sym">,</span> IntDigits0<span class="hl sym">,</span> IntDigits<span class="hl sym">) :-</span>
	IntDigits1 <span class="hl sym">= (</span>IntDigits0^r <span class="hl sym">:= (</span>IntDigits0^r <span class="hl sym">*</span> <span class="hl kwb">integer</span><span class="hl sym">(</span><span class="hl num">10</span><span class="hl sym">)) +</span>
		<span class="hl sym">(</span>IntDigits0^t <span class="hl sym">*</span> <span class="hl kwb">integer</span><span class="hl sym">(-</span><span class="hl num">10</span><span class="hl sym">) *</span> Digit<span class="hl sym">)),</span>
	IntDigits <span class="hl sym">= (</span>IntDigits1^q <span class="hl sym">:=</span> IntDigits1^q <span class="hl sym">*</span> <span class="hl kwb">integer</span><span class="hl sym">(</span><span class="hl num">10</span><span class="hl sym">)).</span>

<span class="hl slc">% ------------- %</span>

<span class="hl sym">:-</span> pred consume<span class="hl sym">(</span><span class="hl kwb">integer</span><span class="hl sym">::</span>in<span class="hl sym">,</span> integer_digits<span class="hl sym">::</span>in<span class="hl sym">,</span> integer_digits<span class="hl sym">::</span>out<span class="hl sym">)</span> <span class="hl kwa">is</span> det<span class="hl sym">.</span>

consume<span class="hl sym">(</span>K<span class="hl sym">,</span> IntDigits0<span class="hl sym">,</span> IntDigits<span class="hl sym">) :-</span>
	Den <span class="hl sym">=</span> <span class="hl kwb">integer</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">) *</span> K <span class="hl sym">+</span> one<span class="hl sym">,</span>
	Den2 <span class="hl sym">=</span> <span class="hl kwb">integer</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">) *</span> Den<span class="hl sym">,</span>
	IntDigits1 <span class="hl sym">= (</span>IntDigits0^r <span class="hl sym">:= (</span>IntDigits0^r <span class="hl sym">*</span> Den<span class="hl sym">) + (</span>IntDigits0^q <span class="hl sym">*</span> Den2<span class="hl sym">)),</span>
	IntDigits2 <span class="hl sym">= (</span>IntDigits1^t <span class="hl sym">:= (</span>IntDigits1^t <span class="hl sym">*</span> Den<span class="hl sym">) + (</span>IntDigits1^s <span class="hl sym">*</span> Den2<span class="hl sym">)),</span>
	IntDigits3 <span class="hl sym">= (</span>IntDigits2^s <span class="hl sym">:=</span> IntDigits2^s <span class="hl sym">*</span> K<span class="hl sym">),</span>
	IntDigits <span class="hl sym">= (</span>IntDigits3^q <span class="hl sym">:=</span> IntDigits3^q <span class="hl sym">*</span> K<span class="hl sym">).</span>

<span class="hl slc">% ------------------------------- %</span>
