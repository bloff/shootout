<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://shootout.alioth.debian.org/</span>
<span class="hl slc">#</span>
<span class="hl slc"># contributed by jose fco. gonzalez</span>
<span class="hl slc"># optimized &amp; parallelized by Rick Branson</span>

seq <span class="hl sym">=</span> <span class="hl kwc">STDIN</span><span class="hl sym">.</span>readlines<span class="hl sym">.</span>join
ilen <span class="hl sym">=</span> seq<span class="hl sym">.</span>size

seq<span class="hl sym">.</span>gsub<span class="hl sym">!(</span><span class="hl kwc">/&gt;.*\n|\n/</span><span class="hl sym">,</span><span class="hl str">&quot;&quot;</span><span class="hl sym">)</span>
clen <span class="hl sym">=</span> seq<span class="hl sym">.</span>length

MATCHERS <span class="hl sym">= [</span>
  <span class="hl kwc">/agggtaaa|tttaccct/</span><span class="hl sym">,</span>
  <span class="hl kwc">/[cgt]gggtaaa|tttaccc[acg]/</span><span class="hl sym">,</span>
  <span class="hl kwc">/a[act]ggtaaa|tttacc[agt]t/</span><span class="hl sym">,</span>
  <span class="hl kwc">/ag[act]gtaaa|tttac[agt]ct/</span><span class="hl sym">,</span>
  <span class="hl kwc">/agg[act]taaa|ttta[agt]cct/</span><span class="hl sym">,</span>
  <span class="hl kwc">/aggg[acg]aaa|ttt[cgt]ccct/</span><span class="hl sym">,</span>
  <span class="hl kwc">/agggt[cgt]aa|tt[acg]accct/</span><span class="hl sym">,</span>
  <span class="hl kwc">/agggta[cgt]a|t[acg]taccct/</span><span class="hl sym">,</span>
  <span class="hl kwc">/agggtaa[cgt]|[acg]ttaccct/</span>
<span class="hl sym">]</span>

<span class="hl kwa">if</span> <span class="hl kwc">RUBY_PLATFORM</span> <span class="hl sym">==</span> <span class="hl str">&quot;java&quot;</span>
  threads <span class="hl sym">=</span> MATCHERS<span class="hl sym">.</span>map <span class="hl kwa">do</span> <span class="hl sym">|</span>f<span class="hl sym">|</span>
    Thread<span class="hl sym">.</span>new <span class="hl kwa">do</span>
      Thread<span class="hl sym">.</span>current<span class="hl sym">[:</span>result<span class="hl sym">] =</span> <span class="hl str">&quot;#{f.source} #{seq.scan(f).size}&quot;</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>

  threads<span class="hl sym">.</span>each <span class="hl kwa">do</span> <span class="hl sym">|</span>t<span class="hl sym">|</span>
    t<span class="hl sym">.</span>join
  <span class="hl kwa">end</span>

  threads<span class="hl sym">.</span>each <span class="hl kwa">do</span> <span class="hl sym">|</span>t<span class="hl sym">|</span>
    puts t<span class="hl sym">[:</span>result<span class="hl sym">]</span>
  <span class="hl kwa">end</span>
<span class="hl kwa">else</span>
  children <span class="hl sym">=</span> MATCHERS<span class="hl sym">.</span>map <span class="hl kwa">do</span> <span class="hl sym">|</span>f<span class="hl sym">|</span>
    r<span class="hl sym">,</span> w <span class="hl sym">=</span> IO<span class="hl sym">.</span>pipe
    p <span class="hl sym">=</span> Process<span class="hl sym">.</span>fork <span class="hl kwa">do</span>
      r<span class="hl sym">.</span>close
      w<span class="hl sym">.</span>write <span class="hl str">&quot;#{f.source} #{seq.scan(f).size}&quot;</span>
      w<span class="hl sym">.</span>close
    <span class="hl kwa">end</span>

    w<span class="hl sym">.</span>close
    <span class="hl sym">[</span>p<span class="hl sym">,</span> r<span class="hl sym">,</span> w<span class="hl sym">]</span>
  <span class="hl kwa">end</span>

  children<span class="hl sym">.</span>each <span class="hl kwa">do</span> <span class="hl sym">|</span>p<span class="hl sym">,</span> r<span class="hl sym">,</span> w<span class="hl sym">|</span>
    puts r<span class="hl sym">.</span>read
    r<span class="hl sym">.</span>close
  <span class="hl kwa">end</span>

  Process<span class="hl sym">.</span>waitall
<span class="hl kwa">end</span>

<span class="hl sym">{</span>
<span class="hl str">'B'</span> <span class="hl sym">=&gt;</span> <span class="hl str">'(c|g|t)'</span><span class="hl sym">,</span> <span class="hl str">'D'</span> <span class="hl sym">=&gt;</span> <span class="hl str">'(a|g|t)'</span><span class="hl sym">,</span> <span class="hl str">'H'</span> <span class="hl sym">=&gt;</span> <span class="hl str">'(a|c|t)'</span><span class="hl sym">,</span> <span class="hl str">'K'</span> <span class="hl sym">=&gt;</span> <span class="hl str">'(g|t)'</span><span class="hl sym">,</span>
<span class="hl str">'M'</span> <span class="hl sym">=&gt;</span> <span class="hl str">'(a|c)'</span><span class="hl sym">,</span> <span class="hl str">'N'</span> <span class="hl sym">=&gt;</span> <span class="hl str">'(a|c|g|t)'</span><span class="hl sym">,</span> <span class="hl str">'R'</span> <span class="hl sym">=&gt;</span> <span class="hl str">'(a|g)'</span><span class="hl sym">,</span> <span class="hl str">'S'</span> <span class="hl sym">=&gt;</span> <span class="hl str">'(c|t)'</span><span class="hl sym">,</span>
<span class="hl str">'V'</span> <span class="hl sym">=&gt;</span> <span class="hl str">'(a|c|g)'</span><span class="hl sym">,</span> <span class="hl str">'W'</span> <span class="hl sym">=&gt;</span> <span class="hl str">'(a|t)'</span><span class="hl sym">,</span> <span class="hl str">'Y'</span> <span class="hl sym">=&gt;</span> <span class="hl str">'(c|t)'</span>
<span class="hl sym">}.</span>each <span class="hl sym">{ |</span>f<span class="hl sym">,</span>r<span class="hl sym">|</span> seq<span class="hl sym">.</span>gsub<span class="hl sym">!(</span>f<span class="hl sym">,</span>r<span class="hl sym">) }</span>

puts
puts ilen
puts clen
puts seq<span class="hl sym">.</span>length
