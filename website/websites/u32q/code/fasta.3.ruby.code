<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://shootout.alioth.debian.org/</span>
<span class="hl slc"># Contributed by Sokolov Yura</span>
<span class="hl slc"># Modified by Joseph LaFata</span>
<span class="hl slc"># Modified by Philip (flip) Kromer (used lookup table in place of search, unrolled print loop)</span>

alu <span class="hl sym">=</span>
  <span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span><span class="hl sym">+</span>
  <span class="hl str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span><span class="hl sym">+</span>
  <span class="hl str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span><span class="hl sym">+</span>
  <span class="hl str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span><span class="hl sym">+</span>
  <span class="hl str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span><span class="hl sym">+</span>
  <span class="hl str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span><span class="hl sym">+</span>
  <span class="hl str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>

iub <span class="hl sym">= [</span>
  <span class="hl sym">[</span><span class="hl str">&quot;a&quot;</span><span class="hl sym">,</span> <span class="hl num">0.27</span><span class="hl sym">],</span>
  <span class="hl sym">[</span><span class="hl str">&quot;c&quot;</span><span class="hl sym">,</span> <span class="hl num">0.12</span><span class="hl sym">],</span>
  <span class="hl sym">[</span><span class="hl str">&quot;g&quot;</span><span class="hl sym">,</span> <span class="hl num">0.12</span><span class="hl sym">],</span>
  <span class="hl sym">[</span><span class="hl str">&quot;t&quot;</span><span class="hl sym">,</span> <span class="hl num">0.27</span><span class="hl sym">],</span>

  <span class="hl sym">[</span><span class="hl str">&quot;B&quot;</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">],</span>
  <span class="hl sym">[</span><span class="hl str">&quot;D&quot;</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">],</span>
  <span class="hl sym">[</span><span class="hl str">&quot;H&quot;</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">],</span>
  <span class="hl sym">[</span><span class="hl str">&quot;K&quot;</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">],</span>
  <span class="hl sym">[</span><span class="hl str">&quot;M&quot;</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">],</span>
  <span class="hl sym">[</span><span class="hl str">&quot;N&quot;</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">],</span>
  <span class="hl sym">[</span><span class="hl str">&quot;R&quot;</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">],</span>
  <span class="hl sym">[</span><span class="hl str">&quot;S&quot;</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">],</span>
  <span class="hl sym">[</span><span class="hl str">&quot;V&quot;</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">],</span>
  <span class="hl sym">[</span><span class="hl str">&quot;W&quot;</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">],</span>
  <span class="hl sym">[</span><span class="hl str">&quot;Y&quot;</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">],</span>
<span class="hl sym">]</span>
homosapiens <span class="hl sym">= [</span>
  <span class="hl sym">[</span><span class="hl str">&quot;a&quot;</span><span class="hl sym">,</span> <span class="hl num">0.3029549426680</span><span class="hl sym">],</span>
  <span class="hl sym">[</span><span class="hl str">&quot;c&quot;</span><span class="hl sym">,</span> <span class="hl num">0.1979883004921</span><span class="hl sym">],</span>
  <span class="hl sym">[</span><span class="hl str">&quot;g&quot;</span><span class="hl sym">,</span> <span class="hl num">0.1975473066391</span><span class="hl sym">],</span>
  <span class="hl sym">[</span><span class="hl str">&quot;t&quot;</span><span class="hl sym">,</span> <span class="hl num">0.3015094502008</span><span class="hl sym">],</span>
<span class="hl sym">]</span>

<span class="hl kwb">$lasti</span> <span class="hl sym">=</span> <span class="hl num">42</span>
IM<span class="hl sym">=</span><span class="hl num">139968</span>
IA<span class="hl sym">=</span><span class="hl num">3877</span>
IC<span class="hl sym">=</span><span class="hl num">29573</span>
<span class="hl slc"># Generates an integer in 0 &lt;= rx &lt; IM</span>
<span class="hl kwa">def</span> gen_random_int
  <span class="hl kwb">$lasti</span> <span class="hl sym">= (</span><span class="hl kwb">$lasti</span> <span class="hl sym">*</span> IA <span class="hl sym">+</span> IC<span class="hl sym">) %</span> IM
<span class="hl kwa">end</span>

<span class="hl kwa">def</span> print_in_rows_of row_len<span class="hl sym">,</span> str<span class="hl sym">,</span> fh<span class="hl sym">=</span><span class="hl kwb">$stdout</span>
  <span class="hl num">0</span><span class="hl sym">.</span><span class="hl kwd">step</span><span class="hl sym">(</span>str<span class="hl sym">.</span>length-1<span class="hl sym">,</span>row_len<span class="hl sym">){|</span>x<span class="hl sym">|</span> fh<span class="hl sym">.</span>print str<span class="hl sym">[</span>x<span class="hl sym">,</span>row_len<span class="hl sym">],</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl sym">}</span>
<span class="hl kwa">end</span>

<span class="hl kwa">def</span> <span class="hl kwd">make_repeat_fasta</span><span class="hl sym">(</span>id<span class="hl sym">,</span> desc<span class="hl sym">,</span> src<span class="hl sym">,</span> n<span class="hl sym">)</span>
  puts <span class="hl str">&quot;&gt;#{id} #{desc}&quot;</span>
  l <span class="hl sym">=</span> src<span class="hl sym">.</span>length
  s <span class="hl sym">=</span> src <span class="hl sym">* ((</span>n <span class="hl sym">/</span> l<span class="hl sym">) +</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl slc"># enough duplicates to be longer than n chars</span>
  s<span class="hl sym">.</span>slice<span class="hl sym">!(</span>n<span class="hl sym">,</span> l<span class="hl sym">)</span>          <span class="hl slc"># remove characters past nth</span>
  print_in_rows_of <span class="hl num">60</span><span class="hl sym">,</span> s
<span class="hl kwa">end</span>

<span class="hl slc"># The given random number generator only creates integers in 0...IM (exclusive)</span>
<span class="hl slc"># Calculate the result for each rather than do linear search.</span>
<span class="hl kwa">def</span> make_lut_flat prob_dist
  lut <span class="hl sym">= []</span>
  pt <span class="hl sym">=</span> <span class="hl num">0.0</span>
  prob_dist<span class="hl sym">.</span>map <span class="hl kwa">do</span> <span class="hl sym">|</span>ch<span class="hl sym">,</span>pr<span class="hl sym">|</span>
    lut <span class="hl sym">&lt;&lt; ((</span>pt<span class="hl sym">*</span>IM<span class="hl sym">).</span>ceil <span class="hl sym">... ((</span>pt<span class="hl sym">+</span>pr<span class="hl sym">)*</span>IM<span class="hl sym">).</span>ceil<span class="hl sym">).</span>map<span class="hl sym">{</span> ch <span class="hl sym">}</span>
    pt <span class="hl sym">+=</span> pr
  <span class="hl kwa">end</span>
  lut<span class="hl sym">.</span>flatten<span class="hl sym">!</span>
<span class="hl kwa">end</span>

<span class="hl kwa">def</span> <span class="hl kwd">make_random_fasta_lut_chunked</span><span class="hl sym">(</span>id<span class="hl sym">,</span> desc<span class="hl sym">,</span> prob_dist<span class="hl sym">,</span> n<span class="hl sym">)</span>
  puts <span class="hl str">&quot;&gt;#{id} #{desc}&quot;</span>
  lut <span class="hl sym">=</span> <span class="hl kwd">make_lut_flat</span><span class="hl sym">(</span>prob_dist<span class="hl sym">)</span>
  rx <span class="hl sym">=</span> <span class="hl kwb">$lasti</span>
  <span class="hl slc"># ruby &lt;= 1.8x's memory manager is an Achilles heel.  Let's print 60 chars as</span>
  <span class="hl slc"># we go along rather than accumulate n chars to print all at once.</span>
  full_lines <span class="hl sym">= (</span>n<span class="hl sym">/</span><span class="hl num">60</span><span class="hl sym">);</span> extra_lines <span class="hl sym">=</span> n <span class="hl sym">-</span> <span class="hl num">60</span><span class="hl sym">*</span>full_lines
  full_lines<span class="hl sym">.</span>times <span class="hl kwa">do</span>
    <span class="hl num">60</span><span class="hl sym">.</span>times       <span class="hl sym">{</span> print lut<span class="hl sym">[</span>rx <span class="hl sym">= (</span>rx <span class="hl sym">*</span> IA <span class="hl sym">+</span> IC<span class="hl sym">) %</span> IM<span class="hl sym">] } ;</span> print <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
  <span class="hl kwa">end</span>
  extra_lines<span class="hl sym">.</span>times<span class="hl sym">{</span> print lut<span class="hl sym">[</span>rx <span class="hl sym">= (</span>rx <span class="hl sym">*</span> IA <span class="hl sym">+</span> IC<span class="hl sym">) %</span> IM<span class="hl sym">] } ;</span> print <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl kwa">unless</span> extra_lines <span class="hl sym">==</span> <span class="hl num">0</span>
  <span class="hl kwb">$lasti</span> <span class="hl sym">=</span> rx
<span class="hl kwa">end</span>

n <span class="hl sym">= (</span><span class="hl kwc">ARGV</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] ||</span> <span class="hl num">27</span><span class="hl sym">).</span>to_i

<span class="hl kwd">make_repeat_fasta</span><span class="hl sym">(</span><span class="hl str">'ONE'</span><span class="hl sym">,</span> <span class="hl str">'Homo sapiens alu'</span><span class="hl sym">,</span> alu<span class="hl sym">,</span> n<span class="hl sym">*</span><span class="hl num">2</span><span class="hl sym">)</span>
<span class="hl kwd">make_random_fasta_lut_chunked</span><span class="hl sym">(</span><span class="hl str">'TWO'</span><span class="hl sym">,</span> <span class="hl str">'IUB ambiguity codes'</span><span class="hl sym">,</span> iub<span class="hl sym">,</span> n<span class="hl sym">*</span><span class="hl num">3</span><span class="hl sym">)</span>
<span class="hl kwd">make_random_fasta_lut_chunked</span><span class="hl sym">(</span><span class="hl str">'THREE'</span><span class="hl sym">,</span> <span class="hl str">'Homo sapiens frequency'</span><span class="hl sym">,</span> homosapiens<span class="hl sym">,</span> n<span class="hl sym">*</span><span class="hl num">5</span><span class="hl sym">)</span>
