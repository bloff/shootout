
Fri, 29 Aug 2008 23:47:00 GMT

MAKE:
mv regexdna.scala regexdna.scala
mv: `regexdna.scala' and `regexdna.scala' are the same file
make: [regexdna.scala_run] Error 1 (ignored)
/usr/local/src/scala-2.7.2.RC1/bin/scalac -optimise regexdna.scala
iterations: 0 for 4
iterations: 0 for 7
iterations: 5 for 4
############# Cought exception: scala.tools.nsc.backend.icode.CheckerError: Incompatible stacks: <> and <REFERENCE(scala.runtime.ObjectRef),REFERENCE(scala.runtime.ObjectRef)> #################

Method: regexdna.main
Method owner: object regexdna
scala.tools.nsc.backend.icode.CheckerError: Incompatible stacks: <> and <REFERENCE(scala.runtime.ObjectRef),REFERENCE(scala.runtime.ObjectRef)>
	at scala.tools.nsc.backend.icode.analysis.TypeFlowAnalysis$typeStackLattice$.lub2(TypeFlowAnalysis.scala:55)
	at scala.tools.nsc.backend.icode.analysis.TypeFlowAnalysis$typeFlowLattice$.lub2(TypeFlowAnalysis.scala:100)
	at scala.tools.nsc.backend.icode.analysis.TypeFlowAnalysis$typeFlowLattice$.lub2(TypeFlowAnalysis.scala:77)
	at scala.tools.nsc.backend.icode.analysis.CompleteLattice$$anonfun$lub$1.apply(CompleteLattice.scala:40)
	at scala.List.reduceLeft(List.scala:1089)
	at scala.tools.nsc.backend.icode.analysis.CompleteLattice$class.lub(CompleteLattice.scala:40)
	at scala.tools.nsc.backend.icode.analysis.TypeFlowAnalysis$typeFlowLattice$.lub(TypeFlowAnalysis.scala:77)
	at scala.tools.nsc.backend.icode.analysis.DataFlowAnalysis$$anonfun$forwardAnalysis$1.apply(DataFlowAnalysis.scala:71)
	at scala.tools.nsc.backend.icode.analysis.DataFlowAnalysis$$anonfun$forwardAnalysis$1.apply(DataFlowAnalysis.scala:68)
	at scala.List.foreach(List.scala:834)
	at scala.tools.nsc.backend.icode.analysis.DataFlowAnalysis$class.forwardAnalysis(DataFlowAnalysis.scala:68)
	at scala.tools.nsc.backend.icode.analysis.TypeFlowAnalysis$MethodTFA.forwardAnalysis(TypeFlowAnalysis.scala:106)
	at scala.tools.nsc.backend.icode.analysis.TypeFlowAnalysis$MethodTFA.run(TypeFlowAnalysis.scala:163)
	at scala.tools.nsc.backend.opt.Inliners$Inliner.analyzeMethod(Inliners.scala:292)
	at scala.tools.nsc.backend.opt.Inliners$Inliner$$anonfun$analyzeClass$1.apply(Inliners.scala:270)
	at scala.tools.nsc.backend.opt.Inliners$Inliner$$anonfun$analyzeClass$1.apply(Inliners.scala:270)
	at scala.List.foreach(List.scala:834)
	at scala.tools.nsc.backend.opt.Inliners$Inliner.analyzeClass(Inliners.scala:270)
	at scala.tools.nsc.backend.opt.Inliners$InliningPhase.apply(Inliners.scala:36)
	at scala.tools.nsc.backend.icode.ICodes$ICodePhase$$anonfun$apply$1.apply(ICodes.scala:85)
	at scala.tools.nsc.backend.icode.ICodes$ICodePhase$$anonfun$apply$1.apply(ICodes.scala:85)
	at scala.Iterator$class.foreach(Iterator.scala:410)
	at scala.collection.mutable.FlatHashTable$$anon$1.foreach(FlatHashTable.scala:113)
	at scala.Iterable$class.foreach(Iterable.scala:256)
	at scala.collection.mutable.HashSet.foreach(HashSet.scala:31)
	at scala.tools.nsc.backend.icode.ICodes$ICodePhase.apply(ICodes.scala:85)
	at scala.tools.nsc.Global$GlobalPhase.applyPhase(Global.scala:268)
	at scala.tools.nsc.Global$GlobalPhase$$anonfun$run$1.apply(Global.scala:247)
	at scala.tools.nsc.Global$GlobalPhase$$anonfun$run$1.apply(Global.scala:247)
	at scala.Iterator$class.foreach(Iterator.scala:410)
	at scala.collection.mutable.ListBuffer$$anon$1.foreach(ListBuffer.scala:266)
	at scala.tools.nsc.Global$GlobalPhase.run(Global.scala:247)
	at scala.tools.nsc.Global$Run.compileSources(Global.scala:579)
	at scala.tools.nsc.Global$Run.compile(Global.scala:663)
	at scala.tools.nsc.Main$.process(Main.scala:84)
	at scala.tools.nsc.Main$.main(Main.scala:98)
	at scala.tools.nsc.Main.main(Main.scala)
def main(args: Array[java.lang.String] (ARRAY[REFERENCE(java.lang.String)])): Unit {
locals: value args, variable sequence$1, value initialLength, variable m$1, value codeLength, value variants, value ev$1, value codes, value ev$2, variable boxed1, variable boxed2, variable boxed3, variable blockSize0, variable block0, variable buffer0, variable r0, variable charsRead0, variable $inlThis0, variable $retVal0
startBlock: 1
blocks: [1,2,3,4,5,6,7,8,9,10,11,12]

1: 
  SCOPE_ENTER variable sequence$1
  NEW REFERENCE(scala.runtime.ObjectRef)
  DUP
  THIS
  STORE_LOCAL variable $inlThis0
  JUMP 9
  
2: 
  LOAD_MODULE object ScalaRunTime
  LOAD_LOCAL value ev$1
  CHECK_CAST REFERENCE(scala.runtime.BoxedArray)
  CONSTANT (Constant(java.lang.String))
  CALL_METHOD scala.runtime.ScalaRunTimescala.runtime.ScalaRunTime.arrayValue (dynamic)
  JUMP 4
  
3: 
  LOAD_LOCAL value ev$1
  JUMP 4
  
4: 
  CHECK_CAST ARRAY[REFERENCE(java.lang.String)]
  SCOPE_EXIT value ev$1
  STORE_LOCAL value variants
  NEW REFERENCE(scala.runtime.BoxedObjectArray)
  DUP
  LOAD_LOCAL value variants
  CHECK_CAST ARRAY[REFERENCE(java.lang.Object)]
  CALL_METHOD scala.runtime.BoxedObjectArrayscala.runtime.BoxedObjectArray.<init> (static-instance)
  NEW REFERENCE(regexdna$$anonfun$main$1)
  DUP
  LOAD_LOCAL variable sequence$1
  LOAD_LOCAL variable m$1
  CALL_METHOD regexdna$$anonfun$main$1regexdna$$anonfun$main$1.<init> (static-instance)
  CALL_METHOD scala.runtime.BoxedObjectArrayscala.Iterable.foreach (dynamic)
  SCOPE_ENTER value codes
  SCOPE_ENTER value ev$2
  LOAD_MODULE object ScalaRunTime
  LOAD_MODULE object Array
  NEW REFERENCE(scala.runtime.BoxedObjectArray)
  DUP
  CONSTANT (Constant(11))
  CREATE_ARRAY REFERENCE(scala.Tuple2) x 1
  DUP
  CONSTANT (Constant(0))
  LOAD_MODULE object Predef$Pair
  CONSTANT (Constant(B))
  CONSTANT (Constant((c|g|t)))
  CALL_METHOD scala.Predef$Pairscala.Predef$Pair.apply (dynamic)
  STORE_ARRAY_ITEM (REFERENCE(scala.Tuple2))
  DUP
  CONSTANT (Constant(1))
  LOAD_MODULE object Predef$Pair
  CONSTANT (Constant(D))
  CONSTANT (Constant((a|g|t)))
  CALL_METHOD scala.Predef$Pairscala.Predef$Pair.apply (dynamic)
  STORE_ARRAY_ITEM (REFERENCE(scala.Tuple2))
  DUP
  CONSTANT (Constant(2))
  LOAD_MODULE object Predef$Pair
  CONSTANT (Constant(H))
  CONSTANT (Constant((a|c|t)))
  CALL_METHOD scala.Predef$Pairscala.Predef$Pair.apply (dynamic)
  STORE_ARRAY_ITEM (REFERENCE(scala.Tuple2))
  DUP
  CONSTANT (Constant(3))
  LOAD_MODULE object Predef$Pair
  CONSTANT (Constant(K))
  CONSTANT (Constant((g|t)))
  CALL_METHOD scala.Predef$Pairscala.Predef$Pair.apply (dynamic)
  STORE_ARRAY_ITEM (REFERENCE(scala.Tuple2))
  DUP
  CONSTANT (Constant(4))
  LOAD_MODULE object Predef$Pair
  CONSTANT (Constant(M))
  CONSTANT (Constant((a|c)))
  CALL_METHOD scala.Predef$Pairscala.Predef$Pair.apply (dynamic)
  STORE_ARRAY_ITEM (REFERENCE(scala.Tuple2))
  DUP
  CONSTANT (Constant(5))
  LOAD_MODULE object Predef$Pair
  CONSTANT (Constant(N))
  CONSTANT (Constant((a|c|g|t)))
  CALL_METHOD scala.Predef$Pairscala.Predef$Pair.apply (dynamic)
  STORE_ARRAY_ITEM (REFERENCE(scala.Tuple2))
  DUP
  CONSTANT (Constant(6))
  LOAD_MODULE object Predef$Pair
  CONSTANT (Constant(R))
  CONSTANT (Constant((a|g)))
  CALL_METHOD scala.Predef$Pairscala.Predef$Pair.apply (dynamic)
  STORE_ARRAY_ITEM (REFERENCE(scala.Tuple2))
  DUP
  CONSTANT (Constant(7))
  LOAD_MODULE object Predef$Pair
  CONSTANT (Constant(S))
  CONSTANT (Constant((c|g)))
  CALL_METHOD scala.Predef$Pairscala.Predef$Pair.apply (dynamic)
  STORE_ARRAY_ITEM (REFERENCE(scala.Tuple2))
  DUP
  CONSTANT (Constant(8))
  LOAD_MODULE object Predef$Pair
  CONSTANT (Constant(V))
  CONSTANT (Constant((a|c|g)))
  CALL_METHOD scala.Predef$Pairscala.Predef$Pair.apply (dynamic)
  STORE_ARRAY_ITEM (REFERENCE(scala.Tuple2))
  DUP
  CONSTANT (Constant(9))
  LOAD_MODULE object Predef$Pair
  CONSTANT (Constant(W))
  CONSTANT (Constant((a|t)))
  CALL_METHOD scala.Predef$Pairscala.Predef$Pair.apply (dynamic)
  STORE_ARRAY_ITEM (REFERENCE(scala.Tuple2))
  DUP
  CONSTANT (Constant(10))
  LOAD_MODULE object Predef$Pair
  CONSTANT (Constant(Y))
  CONSTANT (Constant((c|t)))
  CALL_METHOD scala.Predef$Pairscala.Predef$Pair.apply (dynamic)
  STORE_ARRAY_ITEM (REFERENCE(scala.Tuple2))
  CHECK_CAST ARRAY[REFERENCE(java.lang.Object)]
  CALL_METHOD scala.runtime.BoxedObjectArrayscala.runtime.BoxedObjectArray.<init> (static-instance)
  CALL_METHOD scala.Arrayscala.Array.apply (dynamic)
  CONSTANT (Constant(Tuple2))
  CALL_METHOD scala.runtime.ScalaRunTimescala.runtime.ScalaRunTime.arrayValue (dynamic)
  STORE_LOCAL value ev$2
  LOAD_LOCAL value ev$2
  IS_INSTANCE REFERENCE(scala.runtime.BoxedArray)
  CZJUMP (BOOL)NE ? 5 : 6
  
5: 
  LOAD_MODULE object ScalaRunTime
  LOAD_LOCAL value ev$2
  CHECK_CAST REFERENCE(scala.runtime.BoxedArray)
  CONSTANT (Constant(Tuple2))
  CALL_METHOD scala.runtime.ScalaRunTimescala.runtime.ScalaRunTime.arrayValue (dynamic)
  JUMP 7
  
6: 
  LOAD_LOCAL value ev$2
  JUMP 7
  
7: 
  CHECK_CAST ARRAY[REFERENCE(scala.Tuple2)]
  SCOPE_EXIT value ev$2
  STORE_LOCAL value codes
  NEW REFERENCE(scala.runtime.BoxedObjectArray)
  DUP
  LOAD_LOCAL value codes
  CHECK_CAST ARRAY[REFERENCE(java.lang.Object)]
  CALL_METHOD scala.runtime.BoxedObjectArrayscala.runtime.BoxedObjectArray.<init> (static-instance)
  NEW REFERENCE(regexdna$$anonfun$main$2)
  DUP
  LOAD_LOCAL variable sequence$1
  CALL_METHOD regexdna$$anonfun$main$2regexdna$$anonfun$main$2.<init> (static-instance)
  CALL_METHOD scala.runtime.BoxedObjectArrayscala.Iterable.foreach (dynamic)
  LOAD_MODULE object Console
  CALL_PRIMITIVE StartConcat
  CONSTANT (Constant(
))
  CALL_PRIMITIVE StringConcat(REFERENCE(java.lang.String))
  LOAD_LOCAL value initialLength
  STORE_LOCAL variable boxed1
  LOAD_LOCAL variable boxed1
  BOX INT
  CALL_PRIMITIVE StringConcat(REFERENCE(java.lang.Object))
  CONSTANT (Constant(
))
  CALL_PRIMITIVE StringConcat(REFERENCE(java.lang.String))
  LOAD_LOCAL value codeLength
  STORE_LOCAL variable boxed2
  LOAD_LOCAL variable boxed2
  BOX INT
  CALL_PRIMITIVE StringConcat(REFERENCE(java.lang.Object))
  CONSTANT (Constant(
))
  CALL_PRIMITIVE StringConcat(REFERENCE(java.lang.String))
  LOAD_LOCAL variable sequence$1
  LOAD_FIELD variable elem
  CHECK_CAST REFERENCE(java.lang.String)
  CALL_METHOD java.lang.Stringjava.lang.String.length (dynamic)
  STORE_LOCAL variable boxed3
  LOAD_LOCAL variable boxed3
  BOX INT
  CALL_PRIMITIVE StringConcat(REFERENCE(java.lang.Object))
  CALL_PRIMITIVE EndConcat
  CALL_METHOD scala.Consolescala.Console.println (dynamic)
  SCOPE_EXIT variable sequence$1
  SCOPE_EXIT value initialLength
  SCOPE_EXIT variable m$1
  SCOPE_EXIT value codeLength
  SCOPE_EXIT value variants
  SCOPE_EXIT value codes
  RETURN (UNIT)
  
8: 
  CALL_METHOD scala.runtime.ObjectRefscala.runtime.ObjectRef.<init> (static-instance)
  STORE_LOCAL variable sequence$1
  SCOPE_ENTER value initialLength
  LOAD_LOCAL variable sequence$1
  LOAD_FIELD variable elem
  CHECK_CAST REFERENCE(java.lang.String)
  CALL_METHOD java.lang.Stringjava.lang.String.length (dynamic)
  STORE_LOCAL value initialLength
  SCOPE_ENTER variable m$1
  NEW REFERENCE(scala.runtime.ObjectRef)
  DUP
  CONSTANT (Constant(>.*
|
))
  CALL_METHOD java.util.regex.Patternjava.util.regex.Pattern.compile (static-class)
  LOAD_LOCAL variable sequence$1
  LOAD_FIELD variable elem
  CHECK_CAST REFERENCE(java.lang.String)
  CALL_METHOD java.util.regex.Patternjava.util.regex.Pattern.matcher (dynamic)
  CALL_METHOD scala.runtime.ObjectRefscala.runtime.ObjectRef.<init> (static-instance)
  STORE_LOCAL variable m$1
  LOAD_LOCAL variable sequence$1
  LOAD_LOCAL variable m$1
  LOAD_FIELD variable elem
  CHECK_CAST REFERENCE(java.util.regex.Matcher)
  CONSTANT (Constant())
  CALL_METHOD java.util.regex.Matcherjava.util.regex.Matcher.replaceAll (dynamic)
  STORE_FIELD variable elem (dynamic)
  SCOPE_ENTER value codeLength
  LOAD_LOCAL variable sequence$1
  LOAD_FIELD variable elem
  CHECK_CAST REFERENCE(java.lang.String)
  CALL_METHOD java.lang.Stringjava.lang.String.length (dynamic)
  STORE_LOCAL value codeLength
  SCOPE_ENTER value variants
  SCOPE_ENTER value ev$1
  LOAD_MODULE object ScalaRunTime
  LOAD_MODULE object Array
  NEW REFERENCE(scala.runtime.BoxedObjectArray)
  DUP
  CONSTANT (Constant(9))
  CREATE_ARRAY REFERENCE(java.lang.String) x 1
  DUP
  CONSTANT (Constant(0))
  CONSTANT (Constant(agggtaaa|tttaccct))
  STORE_ARRAY_ITEM (REFERENCE(java.lang.String))
  DUP
  CONSTANT (Constant(1))
  CONSTANT (Constant([cgt]gggtaaa|tttaccc[acg]))
  STORE_ARRAY_ITEM (REFERENCE(java.lang.String))
  DUP
  CONSTANT (Constant(2))
  CONSTANT (Constant(a[act]ggtaaa|tttacc[agt]t))
  STORE_ARRAY_ITEM (REFERENCE(java.lang.String))
  DUP
  CONSTANT (Constant(3))
  CONSTANT (Constant(ag[act]gtaaa|tttac[agt]ct))
  STORE_ARRAY_ITEM (REFERENCE(java.lang.String))
  DUP
  CONSTANT (Constant(4))
  CONSTANT (Constant(agg[act]taaa|ttta[agt]cct))
  STORE_ARRAY_ITEM (REFERENCE(java.lang.String))
  DUP
  CONSTANT (Constant(5))
  CONSTANT (Constant(aggg[acg]aaa|ttt[cgt]ccct))
  STORE_ARRAY_ITEM (REFERENCE(java.lang.String))
  DUP
  CONSTANT (Constant(6))
  CONSTANT (Constant(agggt[cgt]aa|tt[acg]accct))
  STORE_ARRAY_ITEM (REFERENCE(java.lang.String))
  DUP
  CONSTANT (Constant(7))
  CONSTANT (Constant(agggta[cgt]a|t[acg]taccct))
  STORE_ARRAY_ITEM (REFERENCE(java.lang.String))
  DUP
  CONSTANT (Constant(8))
  CONSTANT (Constant(agggtaa[cgt]|[acg]ttaccct))
  STORE_ARRAY_ITEM (REFERENCE(java.lang.String))
  CHECK_CAST ARRAY[REFERENCE(java.lang.Object)]
  CALL_METHOD scala.runtime.BoxedObjectArrayscala.runtime.BoxedObjectArray.<init> (static-instance)
  CALL_METHOD scala.Arrayscala.Array.apply (dynamic)
  CONSTANT (Constant(java.lang.String))
  CALL_METHOD scala.runtime.ScalaRunTimescala.runtime.ScalaRunTime.arrayValue (dynamic)
  STORE_LOCAL value ev$1
  LOAD_LOCAL value ev$1
  IS_INSTANCE REFERENCE(scala.runtime.BoxedArray)
  CZJUMP (BOOL)NE ? 2 : 3
  
9: 
  SCOPE_ENTER variable blockSize0
  CONSTANT (Constant(10240))
  STORE_LOCAL variable blockSize0
  SCOPE_ENTER variable block0
  LOAD_LOCAL variable blockSize0
  CREATE_ARRAY CHAR x 1
  STORE_LOCAL variable block0
  SCOPE_ENTER variable buffer0
  NEW REFERENCE(java.lang.StringBuffer)
  DUP
  LOAD_LOCAL variable blockSize0
  CALL_METHOD java.lang.StringBufferjava.lang.StringBuffer.<init> (static-instance)
  STORE_LOCAL variable buffer0
  SCOPE_ENTER variable r0
  NEW REFERENCE(java.io.InputStreamReader)
  DUP
  LOAD_FIELD java.lang.System.in
  CALL_METHOD java.io.InputStreamReaderjava.io.InputStreamReader.<init> (static-instance)
  STORE_LOCAL variable r0
  SCOPE_ENTER variable charsRead0
  LOAD_LOCAL variable r0
  LOAD_LOCAL variable block0
  CONSTANT (Constant(0))
  LOAD_LOCAL variable blockSize0
  CALL_METHOD java.io.InputStreamReaderjava.io.InputStreamReader.read (dynamic)
  STORE_LOCAL variable charsRead0
  JUMP 10
  
10: 
  LOAD_LOCAL variable charsRead0
  CONSTANT (Constant(-1))
  CJUMP (INT)GT ? 11 : 12
  
11: 
  LOAD_LOCAL variable buffer0
  LOAD_LOCAL variable block0
  CONSTANT (Constant(0))
  LOAD_LOCAL variable charsRead0
  CALL_METHOD java.lang.StringBufferjava.lang.StringBuffer.append (dynamic)
  DROP REFERENCE(java.lang.StringBuffer)
  LOAD_LOCAL variable r0
  LOAD_LOCAL variable block0
  CONSTANT (Constant(0))
  LOAD_LOCAL variable blockSize0
  CALL_METHOD java.io.InputStreamReaderjava.io.InputStreamReader.read (dynamic)
  STORE_LOCAL variable charsRead0
  JUMP 10
  
12: 
  LOAD_LOCAL variable r0
  CALL_METHOD java.io.InputStreamReaderjava.io.InputStreamReader.close (dynamic)
  LOAD_LOCAL variable buffer0
  CALL_METHOD java.lang.StringBufferjava.lang.StringBuffer.toString (dynamic)
  SCOPE_EXIT variable blockSize0
  SCOPE_EXIT variable block0
  SCOPE_EXIT variable buffer0
  SCOPE_EXIT variable r0
  SCOPE_EXIT variable charsRead0
  JUMP 8
  
}
Exception handlers: 
  
Exception in thread "main" scala.tools.nsc.backend.icode.CheckerError: Incompatible stacks: <> and <REFERENCE(scala.runtime.ObjectRef),REFERENCE(scala.runtime.ObjectRef)>
	at scala.tools.nsc.backend.icode.analysis.TypeFlowAnalysis$typeStackLattice$.lub2(TypeFlowAnalysis.scala:55)
	at scala.tools.nsc.backend.icode.analysis.TypeFlowAnalysis$typeFlowLattice$.lub2(TypeFlowAnalysis.scala:100)
	at scala.tools.nsc.backend.icode.analysis.TypeFlowAnalysis$typeFlowLattice$.lub2(TypeFlowAnalysis.scala:77)
	at scala.tools.nsc.backend.icode.analysis.CompleteLattice$$anonfun$lub$1.apply(CompleteLattice.scala:40)
	at scala.List.reduceLeft(List.scala:1089)
	at scala.tools.nsc.backend.icode.analysis.CompleteLattice$class.lub(CompleteLattice.scala:40)
	at scala.tools.nsc.backend.icode.analysis.TypeFlowAnalysis$typeFlowLattice$.lub(TypeFlowAnalysis.scala:77)
	at scala.tools.nsc.backend.icode.analysis.DataFlowAnalysis$$anonfun$forwardAnalysis$1.apply(DataFlowAnalysis.scala:71)
	at scala.tools.nsc.backend.icode.analysis.DataFlowAnalysis$$anonfun$forwardAnalysis$1.apply(DataFlowAnalysis.scala:68)
	at scala.List.foreach(List.scala:834)
	at scala.tools.nsc.backend.icode.analysis.DataFlowAnalysis$class.forwardAnalysis(DataFlowAnalysis.scala:68)
	at scala.tools.nsc.backend.icode.analysis.TypeFlowAnalysis$MethodTFA.forwardAnalysis(TypeFlowAnalysis.scala:106)
	at scala.tools.nsc.backend.icode.analysis.TypeFlowAnalysis$MethodTFA.run(TypeFlowAnalysis.scala:163)
	at scala.tools.nsc.backend.opt.Inliners$Inliner.analyzeMethod(Inliners.scala:292)
	at scala.tools.nsc.backend.opt.Inliners$Inliner$$anonfun$analyzeClass$1.apply(Inliners.scala:270)
	at scala.tools.nsc.backend.opt.Inliners$Inliner$$anonfun$analyzeClass$1.apply(Inliners.scala:270)
	at scala.List.foreach(List.scala:834)
	at scala.tools.nsc.backend.opt.Inliners$Inliner.analyzeClass(Inliners.scala:270)
	at scala.tools.nsc.backend.opt.Inliners$InliningPhase.apply(Inliners.scala:36)
	at scala.tools.nsc.backend.icode.ICodes$ICodePhase$$anonfun$apply$1.apply(ICodes.scala:85)
	at scala.tools.nsc.backend.icode.ICodes$ICodePhase$$anonfun$apply$1.apply(ICodes.scala:85)
	at scala.Iterator$class.foreach(Iterator.scala:410)
	at scala.collection.mutable.FlatHashTable$$anon$1.foreach(FlatHashTable.scala:113)
	at scala.Iterable$class.foreach(Iterable.scala:256)
	at scala.collection.mutable.HashSet.foreach(HashSet.scala:31)
	at scala.tools.nsc.backend.icode.ICodes$ICodePhase.apply(ICodes.scala:85)
	at scala.tools.nsc.Global$GlobalPhase.applyPhase(Global.scala:268)
	at scala.tools.nsc.Global$GlobalPhase$$anonfun$run$1.apply(Global.scala:247)
	at scala.tools.nsc.Global$GlobalPhase$$anonfun$run$1.apply(Global.scala:247)
	at scala.Iterator$class.foreach(Iterator.scala:410)
	at scala.collection.mutable.ListBuffer$$anon$1.foreach(ListBuffer.scala:266)
	at scala.tools.nsc.Global$GlobalPhase.run(Global.scala:247)
	at scala.tools.nsc.Global$Run.compileSources(Global.scala:579)
	at scala.tools.nsc.Global$Run.compile(Global.scala:663)
	at scala.tools.nsc.Main$.process(Main.scala:84)
	at scala.tools.nsc.Main$.main(Main.scala:98)
	at scala.tools.nsc.Main.main(Main.scala)
make: [regexdna.scala_run] Error 1 (ignored)

COMMAND LINE:
env JAVA_OPTS=-Xmx1024m /usr/local/src/scala-2.7.2.RC1/bin/scala -howtorun object regexdna 0 < regexdna-input50000.txt

PROGRAM FAILED 


PROGRAM OUTPUT:
java.lang.ClassNotFoundException: regexdna
