<span class="hl slc">%  The Computer Language Shootout</span>
<span class="hl slc">%   http://shootout.alioth.debian.org/</span>
<span class="hl slc">%</span>
<span class="hl slc">%   contributed by Alex Peake</span>
<span class="hl slc">%</span>
<span class="hl slc">%   erl -noshell -noinput -run fasta main N</span>

<span class="hl sym">-</span>module<span class="hl sym">(</span>fasta<span class="hl sym">).</span>

<span class="hl sym">-</span>export<span class="hl sym">([</span>main<span class="hl sym">/</span><span class="hl num">0</span><span class="hl sym">,</span> main<span class="hl sym">/</span><span class="hl num">1</span><span class="hl sym">]).</span>

<span class="hl sym">-</span>define<span class="hl sym">(</span>IM<span class="hl sym">,</span> <span class="hl num">139968</span><span class="hl sym">).</span>
<span class="hl sym">-</span>define<span class="hl sym">(</span>IA<span class="hl sym">,</span> <span class="hl num">3877</span><span class="hl sym">).</span>
<span class="hl sym">-</span>define<span class="hl sym">(</span>IC<span class="hl sym">,</span> <span class="hl num">29573</span><span class="hl sym">).</span>

<span class="hl sym">-</span>define<span class="hl sym">(</span>ALU<span class="hl sym">,</span><span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="hl sym">).</span>
<span class="hl sym">-</span>define<span class="hl sym">(</span>HS<span class="hl sym">, [{</span>$a<span class="hl sym">,</span> <span class="hl num">0.3029549426680</span><span class="hl sym">}, {</span>$c<span class="hl sym">,</span> <span class="hl num">0.1979883004921</span><span class="hl sym">}, {</span>$g<span class="hl sym">,</span> <span class="hl num">0.1975473066391</span><span class="hl sym">}, {</span>$t<span class="hl sym">,</span> <span class="hl num">0.3015094502008</span><span class="hl sym">}]).</span>
<span class="hl sym">-</span>define<span class="hl sym">(</span>IUB<span class="hl sym">, [{</span>$a<span class="hl sym">,</span> <span class="hl num">0.27</span><span class="hl sym">}, {</span>$c<span class="hl sym">,</span> <span class="hl num">0.12</span><span class="hl sym">}, {</span>$g<span class="hl sym">,</span> <span class="hl num">0.12</span><span class="hl sym">}, {</span>$t<span class="hl sym">,</span> <span class="hl num">0.27</span><span class="hl sym">}, {</span>$B<span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">}, {</span>$D<span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">}, {</span>$H<span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">}, {</span>$K<span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">}, {</span>$M<span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">}, {</span>$N<span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">}, {</span>$R<span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">}, {</span>$S<span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">}, {</span>$V<span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">}, {</span>$W<span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">}, {</span>$Y<span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">}]).</span>

<span class="hl sym">-</span>define<span class="hl sym">(</span>LINE_LENGTH<span class="hl sym">,</span> <span class="hl num">60</span><span class="hl sym">).</span>

main<span class="hl sym">() -&gt;</span> main<span class="hl sym">([</span><span class="hl str">&quot;1000&quot;</span><span class="hl sym">]).</span>
main<span class="hl sym">([</span>Arg<span class="hl sym">]) -&gt;</span>
   N <span class="hl sym">=</span> list_to_integer<span class="hl sym">(</span>Arg<span class="hl sym">),</span>
   Seed <span class="hl sym">=</span> <span class="hl num">42</span><span class="hl sym">,</span>
   write_fasta_cycle<span class="hl sym">(</span><span class="hl str">&quot;ONE&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;Homo sapiens alu&quot;</span><span class="hl sym">, ?</span>ALU<span class="hl sym">,</span> N<span class="hl sym">*</span><span class="hl num">2</span><span class="hl sym">),</span>
   NewSeed <span class="hl sym">=</span> write_fasta_rand<span class="hl sym">(</span><span class="hl str">&quot;TWO&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;IUB ambiguity codes&quot;</span><span class="hl sym">, ?</span>IUB<span class="hl sym">,</span> N<span class="hl sym">*</span><span class="hl num">3</span><span class="hl sym">,</span> Seed<span class="hl sym">),</span>
   write_fasta_rand<span class="hl sym">(</span><span class="hl str">&quot;THREE&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;Homo sapiens frequency&quot;</span><span class="hl sym">, ?</span>HS<span class="hl sym">,</span> N<span class="hl sym">*</span><span class="hl num">5</span><span class="hl sym">,</span> NewSeed<span class="hl sym">),</span>
   halt<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">).</span>

<span class="hl slc">%% Write a sequence in LINE_LENGTH lines</span>
write_fasta_cycle<span class="hl sym">(</span>Id<span class="hl sym">,</span> Description<span class="hl sym">,</span> Seq<span class="hl sym">,</span> Total<span class="hl sym">) -&gt;</span>
	io<span class="hl sym">:</span>put_chars<span class="hl sym">(</span><span class="hl str">&quot;&gt;&quot;</span> <span class="hl sym">++</span> Id <span class="hl sym">++</span> <span class="hl str">&quot; &quot;</span> <span class="hl sym">++</span> Description <span class="hl sym">++</span> <span class="hl str">&quot;</span><span class="hl esc">\</span><span class="hl str">n&quot;</span><span class="hl sym">),</span>
	write_fasta_cycle<span class="hl sym">(</span>Seq<span class="hl sym">,</span> Total<span class="hl sym">).</span>
write_fasta_cycle<span class="hl sym">(</span>Seq<span class="hl sym">,</span> Total<span class="hl sym">)</span> when Total <span class="hl sym">=&lt; ?</span>LINE_LENGTH <span class="hl sym">-&gt;</span>
	<span class="hl sym">{</span>Seq1<span class="hl sym">,</span> _Remainder<span class="hl sym">} =</span> seq_len<span class="hl sym">(</span>Seq<span class="hl sym">,</span> Total<span class="hl sym">),</span>
	io<span class="hl sym">:</span>put_chars<span class="hl sym">(</span>Seq1 <span class="hl sym">++</span> <span class="hl str">&quot;</span><span class="hl esc">\</span><span class="hl str">n&quot;</span><span class="hl sym">);</span>
write_fasta_cycle<span class="hl sym">(</span>Seq<span class="hl sym">,</span> Total<span class="hl sym">) -&gt;</span>
	<span class="hl sym">{</span>Seq1<span class="hl sym">,</span> Remainder<span class="hl sym">} =</span> seq_len<span class="hl sym">(</span>Seq<span class="hl sym">, ?</span>LINE_LENGTH<span class="hl sym">),</span>
	io<span class="hl sym">:</span>put_chars<span class="hl sym">(</span>Seq1 <span class="hl sym">++</span> <span class="hl str">&quot;</span><span class="hl esc">\</span><span class="hl str">n&quot;</span><span class="hl sym">),</span>
	write_fasta_cycle<span class="hl sym">(</span>Remainder<span class="hl sym">,</span> Total <span class="hl sym">- ?</span>LINE_LENGTH<span class="hl sym">).</span>

<span class="hl slc">%% Return a Len of a cycle of ALU</span>
seq_len<span class="hl sym">(</span>Seq<span class="hl sym">,</span> Len<span class="hl sym">)</span> when length<span class="hl sym">(</span>Seq<span class="hl sym">) &gt;=</span> Len <span class="hl sym">-&gt;</span>
	lists<span class="hl sym">:</span>split<span class="hl sym">(</span>Len<span class="hl sym">,</span> Seq<span class="hl sym">);</span>
seq_len<span class="hl sym">(</span>Seq<span class="hl sym">,</span> Len<span class="hl sym">)</span> when length<span class="hl sym">(?</span>ALU<span class="hl sym">) &lt;</span> Len <span class="hl sym">-</span> length<span class="hl sym">(</span>Seq<span class="hl sym">) -&gt;</span>
	seq_len<span class="hl sym">(</span>Seq <span class="hl sym">++ ?</span>ALU<span class="hl sym">,</span> Len<span class="hl sym">);</span>
seq_len<span class="hl sym">(</span>Seq<span class="hl sym">,</span> Len<span class="hl sym">) -&gt;</span>
	<span class="hl sym">{</span>Seq1<span class="hl sym">,</span> Seq2<span class="hl sym">} =</span> lists<span class="hl sym">:</span>split<span class="hl sym">(</span>Len <span class="hl sym">-</span> length<span class="hl sym">(</span>Seq<span class="hl sym">), ?</span>ALU<span class="hl sym">),</span>
	<span class="hl sym">{</span>Seq <span class="hl sym">++</span> Seq1<span class="hl sym">,</span> Seq2<span class="hl sym">}.</span>

<span class="hl slc">%% Write a random sequence in LINE_LENGTH lines</span>
write_fasta_rand<span class="hl sym">(</span>Id<span class="hl sym">,</span> Description<span class="hl sym">,</span> Freq<span class="hl sym">,</span> Total<span class="hl sym">,</span> Seed<span class="hl sym">) -&gt;</span>
	io<span class="hl sym">:</span>put_chars<span class="hl sym">(</span><span class="hl str">&quot;&gt;&quot;</span> <span class="hl sym">++</span> Id <span class="hl sym">++</span> <span class="hl str">&quot; &quot;</span> <span class="hl sym">++</span> Description <span class="hl sym">++</span> <span class="hl str">&quot;</span><span class="hl esc">\</span><span class="hl str">n&quot;</span><span class="hl sym">),</span>
	NewSeed <span class="hl sym">=</span> write_fasta_rand<span class="hl sym">(</span>Freq<span class="hl sym">,</span> Total<span class="hl sym">,</span> Seed<span class="hl sym">),</span>
	NewSeed<span class="hl sym">.</span>
write_fasta_rand<span class="hl sym">(</span>Freq<span class="hl sym">,</span> Total<span class="hl sym">,</span> Seed<span class="hl sym">)</span> when Total <span class="hl sym">=&lt; ?</span>LINE_LENGTH <span class="hl sym">-&gt;</span>
	<span class="hl sym">{</span>RandList<span class="hl sym">,</span> NewSeed<span class="hl sym">} =</span> rand_list<span class="hl sym">(</span>Freq<span class="hl sym">,</span> Total<span class="hl sym">, [],</span> Seed<span class="hl sym">),</span>
	io<span class="hl sym">:</span>put_chars<span class="hl sym">(</span>RandList<span class="hl sym">),</span>
	NewSeed<span class="hl sym">;</span>
write_fasta_rand<span class="hl sym">(</span>Freq<span class="hl sym">,</span> Total<span class="hl sym">,</span> Seed<span class="hl sym">) -&gt;</span>
	<span class="hl sym">{</span>RandList<span class="hl sym">,</span> NewSeed<span class="hl sym">} =</span> rand_list<span class="hl sym">(</span>Freq<span class="hl sym">, ?</span>LINE_LENGTH<span class="hl sym">, [],</span> Seed<span class="hl sym">),</span>
	io<span class="hl sym">:</span>put_chars<span class="hl sym">(</span>RandList<span class="hl sym">),</span>
	write_fasta_rand<span class="hl sym">(</span>Freq<span class="hl sym">,</span> Total <span class="hl sym">- ?</span>LINE_LENGTH<span class="hl sym">,</span> NewSeed<span class="hl sym">).</span>

<span class="hl slc">%% Return a Len of a random list of Freq</span>
rand_list<span class="hl sym">(</span>_Freq<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> List<span class="hl sym">,</span> Seed<span class="hl sym">) -&gt;</span>
	<span class="hl sym">{</span>lists<span class="hl sym">:</span>reverse<span class="hl sym">([</span><span class="hl str">&quot;</span><span class="hl esc">\</span><span class="hl str">n&quot;</span> <span class="hl sym">|</span> List<span class="hl sym">]),</span> Seed<span class="hl sym">};</span>
rand_list<span class="hl sym">(</span>Freq<span class="hl sym">,</span> Len<span class="hl sym">,</span> List<span class="hl sym">,</span> Seed<span class="hl sym">) -&gt;</span>
	<span class="hl sym">{</span>Rand<span class="hl sym">,</span> NewSeed<span class="hl sym">} =</span> rand<span class="hl sym">(</span>Seed<span class="hl sym">),</span>
	rand_list<span class="hl sym">(</span>Freq<span class="hl sym">,</span> Len <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">, [</span>choose_base<span class="hl sym">(</span>Freq<span class="hl sym">,</span> Rand<span class="hl sym">) |</span> List<span class="hl sym">],</span> NewSeed<span class="hl sym">).</span>

<span class="hl slc">%% Functional random number generator</span>
rand<span class="hl sym">(</span>Seed<span class="hl sym">) -&gt;</span>
   NewSeed <span class="hl sym">= (</span>Seed <span class="hl sym">* ?</span>IA <span class="hl sym">+ ?</span>IC<span class="hl sym">)</span> rem <span class="hl sym">?</span>IM<span class="hl sym">,</span>
   <span class="hl sym">{</span>NewSeed <span class="hl sym">/ ?</span>IM<span class="hl sym">,</span> NewSeed<span class="hl sym">}.</span>

<span class="hl slc">%% Select the Base corresponding to the calculated cumulative Probability</span>
choose_base<span class="hl sym">([{</span>Base<span class="hl sym">,</span>_<span class="hl sym">}],</span> _<span class="hl sym">)</span>
	<span class="hl sym">-&gt;</span> Base<span class="hl sym">;</span>
choose_base<span class="hl sym">([{</span>Base<span class="hl sym">,</span>Freq<span class="hl sym">} |</span> _<span class="hl sym">],</span> Prob<span class="hl sym">)</span> when Prob <span class="hl sym">&lt;</span> Freq <span class="hl sym">-&gt;</span>
	Base<span class="hl sym">;</span>
choose_base<span class="hl sym">([{</span>_Base<span class="hl sym">,</span>Freq<span class="hl sym">} |</span> Bases<span class="hl sym">],</span> Prob<span class="hl sym">) -&gt;</span>
	choose_base<span class="hl sym">(</span>Bases<span class="hl sym">,</span> Prob <span class="hl sym">-</span> Freq<span class="hl sym">).</span>
