<span class="hl slc">#  The Computer Language Benchmarks Game</span>
<span class="hl slc">#  http://shootout.alioth.debian.org/</span>
<span class="hl slc">#</span>
<span class="hl slc">#  contributed by Karl von Laudermann</span>
<span class="hl slc">#  modified by Jeremy Echols</span>
<span class="hl slc">#  modified by Detlef Reichl</span>

size <span class="hl sym">=</span> <span class="hl kwc">ARGV</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">].</span>to_i

puts <span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">#{size} #{size}&quot;</span>

ITER <span class="hl sym">=</span> <span class="hl num">50</span>                           <span class="hl slc"># Iterations</span>
LIMIT_SQUARED <span class="hl sym">=</span> <span class="hl num">4.0</span>                 <span class="hl slc"># Presquared limit</span>

byte_acc <span class="hl sym">=</span> <span class="hl num">0</span>
bit_num <span class="hl sym">=</span> <span class="hl num">0</span>

count_size <span class="hl sym">=</span> size <span class="hl sym">-</span> <span class="hl num">1</span>               <span class="hl slc"># Precomputed size for easy for..in looping</span>

<span class="hl slc"># For..in loops are faster than .upto, .downto, .times, etc.</span>
<span class="hl slc"># That's not true, but left it here</span>
<span class="hl kwa">for</span> y <span class="hl kwa">in</span> <span class="hl num">0</span><span class="hl sym">..</span>count_size
  <span class="hl kwa">for</span> x <span class="hl kwa">in</span> <span class="hl num">0</span><span class="hl sym">..</span>count_size
    zr <span class="hl sym">=</span> <span class="hl num">0.0</span>
    zi <span class="hl sym">=</span> <span class="hl num">0.0</span>
    cr <span class="hl sym">= (</span><span class="hl num">2.0</span><span class="hl sym">*</span>x<span class="hl sym">/</span>size<span class="hl sym">)-</span><span class="hl num">1.5</span>
    ci <span class="hl sym">= (</span><span class="hl num">2.0</span><span class="hl sym">*</span>y<span class="hl sym">/</span>size<span class="hl sym">)-</span><span class="hl num">1.0</span>
    escape <span class="hl sym">=</span> <span class="hl kwa">false</span>

    zrzr <span class="hl sym">=</span> zr<span class="hl sym">*</span>zr
    zizi <span class="hl sym">=</span> zi<span class="hl sym">*</span>zi
    ITER<span class="hl sym">.</span>times <span class="hl kwa">do</span>
      tr <span class="hl sym">=</span> zrzr <span class="hl sym">-</span> zizi <span class="hl sym">+</span> cr
      ti <span class="hl sym">=</span> <span class="hl num">2.0</span><span class="hl sym">*</span>zr<span class="hl sym">*</span>zi <span class="hl sym">+</span> ci
      zr <span class="hl sym">=</span> tr
      zi <span class="hl sym">=</span> ti
      <span class="hl slc"># preserve recalculation</span>
      zrzr <span class="hl sym">=</span> zr<span class="hl sym">*</span>zr
      zizi <span class="hl sym">=</span> zi<span class="hl sym">*</span>zi
      <span class="hl kwa">if</span> zrzr<span class="hl sym">+</span>zizi <span class="hl sym">&gt;</span> LIMIT_SQUARED
        escape <span class="hl sym">=</span> <span class="hl kwa">true</span>
        <span class="hl kwa">break</span>
      <span class="hl kwa">end</span>
    <span class="hl kwa">end</span>

    byte_acc <span class="hl sym">= (</span>byte_acc <span class="hl sym">&lt;&lt;</span> <span class="hl num">1</span><span class="hl sym">) | (</span>escape <span class="hl sym">?</span> <span class="hl num">0b0</span> <span class="hl sym">:</span> <span class="hl num">0b1</span><span class="hl sym">)</span>
    bit_num <span class="hl sym">+=</span> <span class="hl num">1</span>

    <span class="hl slc"># Code is very similar for these cases, but using separate blocks</span>
    <span class="hl slc"># ensures we skip the shifting when it's unnecessary, which is most cases.</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>bit_num <span class="hl sym">==</span> <span class="hl num">8</span><span class="hl sym">)</span>
      print byte_acc<span class="hl sym">.</span>chr
      byte_acc <span class="hl sym">=</span> <span class="hl num">0</span>
      bit_num <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">elsif</span> <span class="hl sym">(</span>x <span class="hl sym">==</span> count_size<span class="hl sym">)</span>
      byte_acc <span class="hl sym">&lt;&lt;= (</span><span class="hl num">8</span> <span class="hl sym">-</span> bit_num<span class="hl sym">)</span>
      print byte_acc<span class="hl sym">.</span>chr
      byte_acc <span class="hl sym">=</span> <span class="hl num">0</span>
      bit_num <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

