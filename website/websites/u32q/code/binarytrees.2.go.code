<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by The Go Authors.</span>
<span class="hl com"> * based on C program by Kevin Carson</span>
<span class="hl com"> * flag.Arg hack by Isaac Gouy</span>
<span class="hl com"> */</span>

<span class="hl kwa">package</span> main

<span class="hl kwa">import</span> <span class="hl sym">(</span>
   <span class="hl str">&quot;flag&quot;</span>
   <span class="hl str">&quot;fmt&quot;</span>
   <span class="hl str">&quot;strconv&quot;</span>
<span class="hl sym">)</span>

<span class="hl kwa">var</span> n <span class="hl sym">=</span> <span class="hl num">0</span>    <span class="hl slc">// var n = flag.Int(&quot;n&quot;, 2000, &quot;count&quot;)</span>

<span class="hl kwa">type</span> Node <span class="hl kwa">struct</span> <span class="hl sym">{</span>
     item   int
     left<span class="hl sym">,</span> right   <span class="hl sym">*</span>Node
<span class="hl sym">}</span>

<span class="hl kwa">type</span> Arena <span class="hl kwa">struct</span> <span class="hl sym">{</span>
   head   <span class="hl sym">*</span>Node
<span class="hl sym">}</span>

<span class="hl kwa">var</span> arena Arena

<span class="hl kwa">func</span> <span class="hl sym">(</span>n <span class="hl sym">*</span>Node<span class="hl sym">)</span> free<span class="hl sym">() {</span>
   <span class="hl kwa">if</span> n<span class="hl sym">.</span>left <span class="hl sym">!=</span> nil <span class="hl sym">{</span>
      n<span class="hl sym">.</span>left<span class="hl sym">.</span>free<span class="hl sym">()</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">if</span> n<span class="hl sym">.</span>right <span class="hl sym">!=</span> nil <span class="hl sym">{</span>
      n<span class="hl sym">.</span>right<span class="hl sym">.</span>free<span class="hl sym">()</span>
   <span class="hl sym">}</span>
   n<span class="hl sym">.</span>left <span class="hl sym">=</span> arena<span class="hl sym">.</span>head
   arena<span class="hl sym">.</span>head <span class="hl sym">=</span> n
<span class="hl sym">}</span>

<span class="hl kwa">func</span> <span class="hl sym">(</span>a <span class="hl sym">*</span>Arena<span class="hl sym">)</span> New<span class="hl sym">(</span>item int<span class="hl sym">,</span> left<span class="hl sym">,</span> right <span class="hl sym">*</span>Node<span class="hl sym">) *</span>Node <span class="hl sym">{</span>
   <span class="hl kwa">if</span> a<span class="hl sym">.</span>head <span class="hl sym">==</span> nil <span class="hl sym">{</span>
      nodes <span class="hl sym">:=</span> make<span class="hl sym">([]</span>Node<span class="hl sym">,</span> <span class="hl num">3</span> <span class="hl sym">&lt;&lt;</span> uint<span class="hl sym">(</span>n<span class="hl sym">))</span>
      <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> len<span class="hl sym">(</span>nodes<span class="hl sym">)-</span><span class="hl num">1</span><span class="hl sym">;</span> i<span class="hl sym">++ {</span>
         nodes<span class="hl sym">[</span>i<span class="hl sym">].</span>left <span class="hl sym">= &amp;</span>nodes<span class="hl sym">[</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">]</span>
      <span class="hl sym">}</span>
      a<span class="hl sym">.</span>head <span class="hl sym">= &amp;</span>nodes<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]</span>
   <span class="hl sym">}</span>
   n <span class="hl sym">:=</span> a<span class="hl sym">.</span>head
   a<span class="hl sym">.</span>head <span class="hl sym">=</span> a<span class="hl sym">.</span>head<span class="hl sym">.</span>left
   n<span class="hl sym">.</span>item <span class="hl sym">=</span> item
   n<span class="hl sym">.</span>left <span class="hl sym">=</span> left
   n<span class="hl sym">.</span>right <span class="hl sym">=</span> right
   <span class="hl kwa">return</span> n
<span class="hl sym">}</span>

<span class="hl kwa">func</span>  bottomUpTree<span class="hl sym">(</span>item<span class="hl sym">,</span> depth int<span class="hl sym">) *</span>Node <span class="hl sym">{</span>
   <span class="hl kwa">if</span> depth <span class="hl sym">&lt;=</span> <span class="hl num">0</span> <span class="hl sym">{</span>
      <span class="hl kwa">return</span> arena<span class="hl sym">.</span>New<span class="hl sym">(</span>item<span class="hl sym">,</span> nil<span class="hl sym">,</span> nil<span class="hl sym">)</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">return</span> arena<span class="hl sym">.</span>New<span class="hl sym">(</span>item<span class="hl sym">,</span> bottomUpTree<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>item<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> depth<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">),</span> bottomUpTree<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>item<span class="hl sym">,</span> depth<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">))</span>
<span class="hl sym">}</span>

<span class="hl kwa">func</span> <span class="hl sym">(</span>n <span class="hl sym">*</span>Node<span class="hl sym">)</span> itemCheck<span class="hl sym">()</span> int <span class="hl sym">{</span>
   <span class="hl kwa">if</span> n<span class="hl sym">.</span>left <span class="hl sym">==</span> nil <span class="hl sym">{</span>
      <span class="hl kwa">return</span> n<span class="hl sym">.</span>item
   <span class="hl sym">}</span>
   <span class="hl kwa">return</span> n<span class="hl sym">.</span>item <span class="hl sym">+</span> n<span class="hl sym">.</span>left<span class="hl sym">.</span>itemCheck<span class="hl sym">() -</span> n<span class="hl sym">.</span>right<span class="hl sym">.</span>itemCheck<span class="hl sym">()</span>
<span class="hl sym">}</span>

<span class="hl kwa">const</span> minDepth <span class="hl sym">=</span> <span class="hl num">4</span>

<span class="hl kwa">func</span> main<span class="hl sym">() {</span>
   flag<span class="hl sym">.</span>Parse<span class="hl sym">()</span>
   <span class="hl kwa">if</span> flag<span class="hl sym">.</span>NArg<span class="hl sym">() &gt;</span> <span class="hl num">0</span> <span class="hl sym">{</span> n<span class="hl sym">,</span>_ <span class="hl sym">=</span> strconv<span class="hl sym">.</span>Atoi<span class="hl sym">(</span> flag<span class="hl sym">.</span>Arg<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">) ) }</span>

   maxDepth <span class="hl sym">:=</span> n
   <span class="hl kwa">if</span> minDepth <span class="hl sym">+</span> <span class="hl num">2</span> <span class="hl sym">&gt;</span> n <span class="hl sym">{</span>
      maxDepth <span class="hl sym">=</span> minDepth <span class="hl sym">+</span> <span class="hl num">2</span>
   <span class="hl sym">}</span>
   stretchDepth <span class="hl sym">:=</span> maxDepth <span class="hl sym">+</span> <span class="hl num">1</span>

   check <span class="hl sym">:=</span> bottomUpTree<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> stretchDepth<span class="hl sym">).</span>itemCheck<span class="hl sym">()</span>
   fmt<span class="hl sym">.</span>Printf<span class="hl sym">(</span><span class="hl str">&quot;stretch tree of depth %d</span><span class="hl esc">\t</span> <span class="hl str">check: %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> stretchDepth<span class="hl sym">,</span> check<span class="hl sym">)</span>

   longLivedTree <span class="hl sym">:=</span> bottomUpTree<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> maxDepth<span class="hl sym">)</span>

   <span class="hl kwa">for</span> depth <span class="hl sym">:=</span> minDepth<span class="hl sym">;</span> depth <span class="hl sym">&lt;=</span> maxDepth<span class="hl sym">;</span> depth<span class="hl sym">+=</span><span class="hl num">2</span> <span class="hl sym">{</span>
      iterations <span class="hl sym">:=</span> <span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> uint<span class="hl sym">(</span>maxDepth <span class="hl sym">-</span> depth <span class="hl sym">+</span> minDepth<span class="hl sym">)</span>
      check <span class="hl sym">=</span> <span class="hl num">0</span>

      <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl num">1</span><span class="hl sym">;</span> i <span class="hl sym">&lt;=</span> iterations<span class="hl sym">;</span> i<span class="hl sym">++ {</span>
         t <span class="hl sym">:=</span> bottomUpTree<span class="hl sym">(</span>i<span class="hl sym">,</span>depth<span class="hl sym">)</span>
         check <span class="hl sym">+=</span> t<span class="hl sym">.</span>itemCheck<span class="hl sym">()</span>
         t<span class="hl sym">.</span>free<span class="hl sym">()</span>
         t <span class="hl sym">=</span> bottomUpTree<span class="hl sym">(-</span>i<span class="hl sym">,</span>depth<span class="hl sym">)</span>
         check <span class="hl sym">+=</span> t<span class="hl sym">.</span>itemCheck<span class="hl sym">()</span>
         t<span class="hl sym">.</span>free<span class="hl sym">()</span>
      <span class="hl sym">}</span>
      fmt<span class="hl sym">.</span>Printf<span class="hl sym">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\t</span> <span class="hl str">trees of depth %d</span><span class="hl esc">\t</span> <span class="hl str">check: %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> iterations<span class="hl sym">*</span><span class="hl num">2</span><span class="hl sym">,</span> depth<span class="hl sym">,</span> check<span class="hl sym">)</span>
   <span class="hl sym">}</span>
   fmt<span class="hl sym">.</span>Printf<span class="hl sym">(</span><span class="hl str">&quot;long lived tree of depth %d</span><span class="hl esc">\t</span> <span class="hl str">check: %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> maxDepth<span class="hl sym">,</span> longLivedTree<span class="hl sym">.</span>itemCheck<span class="hl sym">())</span>
<span class="hl sym">}</span>
