<span class="hl com">(*</span>
<span class="hl com">** The Computer Language Benchmarks Game</span>
<span class="hl com">** http://shootout.alioth.debian.org/</span>
<span class="hl com">**</span>
<span class="hl com">** contributed by Hongwei Xi</span>
<span class="hl com">**</span>
<span class="hl com">** compilation command:</span>
<span class="hl com">**   atscc -O3 k-nucleotide2.dats -o k-nucleotide2 -D_ATS_GCATS</span>
<span class="hl com">*)</span>

<span class="hl com">(* ****** ****** *)</span>

staload <span class="hl str">&quot;libc/SATS/stdio.sats&quot;</span>
staload <span class="hl str">&quot;libc/SATS/stdlib.sats&quot;</span>
staload <span class="hl str">&quot;libc/SATS/string.sats&quot;</span>
staload _<span class="hl com">(*anonymous*)</span> <span class="hl sym">=</span> <span class="hl str">&quot;prelude/DATS/array.dats&quot;</span>
staload _<span class="hl com">(*anonymous*)</span> <span class="hl sym">=</span> <span class="hl str">&quot;prelude/DATS/list_vt.dats&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl slc">// The hashtable implementation is based on linear-probing</span>
<span class="hl slc">// #include &quot;symtbl.dats&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl sym">%{</span>^

<span class="hl kwa">typedef</span> char <span class="hl sym">*</span>symbol_t <span class="hl sym">;</span>
<span class="hl kwa">typedef struct</span> <span class="hl sym">{</span> symbol_t sym <span class="hl sym">;</span> int cnt <span class="hl sym">; }</span> tblent_t <span class="hl sym">;</span>

<span class="hl sym">%}</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">abstype</span> dna_t <span class="hl slc">// boxed type</span>
abst&#64;ype symbol_t <span class="hl sym">=</span> $extype <span class="hl str">&quot;symbol_t&quot;</span>
<span class="hl kwa">abstype</span> symtbl_t <span class="hl slc">// boxed type</span>

<span class="hl kwa">extern fun</span> symtbl_make <span class="hl sym">(</span>dna<span class="hl sym">:</span> dna_t<span class="hl sym">,</span> size<span class="hl sym">:</span> Nat<span class="hl sym">) :</span> symtbl_t
<span class="hl kwa">extern fun</span> symtbl_clear <span class="hl sym">(</span>tbl<span class="hl sym">:</span> symtbl_t<span class="hl sym">) :</span> void <span class="hl sym">=</span> <span class="hl str">&quot;symtbl_clear&quot;</span>

<span class="hl kwa">extern fun</span> symtbl_search <span class="hl sym">(</span>tbl<span class="hl sym">:</span> symtbl_t<span class="hl sym">,</span> name<span class="hl sym">:</span> String<span class="hl sym">) :</span> int
  <span class="hl sym">=</span> <span class="hl str">&quot;symtbl_search&quot;</span>
<span class="hl kwa">extern fun</span> symtbl_insert <span class="hl sym">(</span>tbl<span class="hl sym">:</span> symtbl_t<span class="hl sym">,</span> sym<span class="hl sym">:</span> symbol_t<span class="hl sym">,</span> cnt<span class="hl sym">:</span> int<span class="hl sym">) :</span> void
  <span class="hl sym">=</span> <span class="hl str">&quot;symtbl_insert&quot;</span>

<span class="hl kwa">extern fun</span> symtbl_fold <span class="hl sym">{</span>a<span class="hl sym">:</span>viewt&#64;ype<span class="hl sym">}</span>
  <span class="hl sym">(</span>tbl<span class="hl sym">:</span> symtbl_t<span class="hl sym">,</span> f<span class="hl sym">: &amp;(</span>symbol_t<span class="hl sym">,</span> int<span class="hl sym">, &amp;</span>a<span class="hl sym">) -&lt;</span>clo<span class="hl sym">&gt;</span> void<span class="hl sym">,</span> res<span class="hl sym">: &amp;</span>a<span class="hl sym">) :</span> void

<span class="hl kwa">extern fun</span> symtbl_dna_get <span class="hl sym">(</span>tbl<span class="hl sym">:</span> symtbl_t<span class="hl sym">):</span> dna_t <span class="hl sym">=</span> <span class="hl str">&quot;symtbl_dna_get&quot;</span>
<span class="hl kwa">extern fun</span> symtbl_symlen_get <span class="hl sym">(</span>tbl<span class="hl sym">:</span> symtbl_t<span class="hl sym">):</span> int <span class="hl sym">=</span> <span class="hl str">&quot;symtbl_symlen_get&quot;</span>
<span class="hl kwa">extern fun</span> symtbl_symlen_set <span class="hl sym">(</span>tbl<span class="hl sym">:</span> symtbl_t<span class="hl sym">,</span> len<span class="hl sym">:</span> int<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl str">&quot;symtbl_symlen_set&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

abst&#64;ype tblent_t <span class="hl sym">=</span> $extype <span class="hl str">&quot;tblent_t&quot;</span>

<span class="hl kwa">viewtypedef</span> symtbl <span class="hl sym">(</span>sz<span class="hl sym">:</span>int<span class="hl sym">,</span> n<span class="hl sym">:</span>int<span class="hl sym">,</span> l<span class="hl sym">:</span>addr<span class="hl sym">) =</span> &#64;<span class="hl sym">{</span>
  dna<span class="hl sym">=</span> dna_t
<span class="hl sym">,</span> ptr<span class="hl sym">=</span> ptr l
<span class="hl sym">,</span> view_arr<span class="hl sym">=</span> &#64;<span class="hl sym">[</span>tblent_t<span class="hl sym">][</span>sz<span class="hl sym">]</span> &#64; l
<span class="hl sym">,</span> view_arr_gc<span class="hl sym">=</span> free_gc_v l
<span class="hl sym">,</span> size<span class="hl sym">=</span> int sz
<span class="hl sym">,</span> symlen<span class="hl sym">=</span> int
<span class="hl sym">,</span> nitm<span class="hl sym">=</span> int n
<span class="hl sym">}</span>

<span class="hl kwa">viewtypedef</span> symtbl0 <span class="hl sym">=</span> symtbl <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> null<span class="hl sym">)</span>
<span class="hl kwa">viewtypedef</span> symtbl <span class="hl sym">= [</span>sz<span class="hl sym">,</span>n<span class="hl sym">:</span>nat <span class="hl sym">|</span> sz <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">] [</span>l<span class="hl sym">:</span>addr<span class="hl sym">]</span> symtbl <span class="hl sym">(</span>sz<span class="hl sym">,</span> n<span class="hl sym">,</span> l<span class="hl sym">)</span>
<span class="hl kwa">assume</span> symtbl_t <span class="hl sym">= [</span>l_tbl<span class="hl sym">:</span> addr<span class="hl sym">] (</span>vbox <span class="hl sym">(</span>symtbl &#64; l_tbl<span class="hl sym">) |</span> ptr l_tbl<span class="hl sym">)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">implement</span> symtbl_dna_get <span class="hl sym">(</span>tbl<span class="hl sym">) =</span> <span class="hl kwa">begin</span>
  <span class="hl kwa">let val</span> <span class="hl sym">(</span>vbox pf_tbl <span class="hl sym">|</span> p_tbl<span class="hl sym">) =</span> tbl <span class="hl kwa">in</span> p_tbl<span class="hl sym">-&gt;</span>dna <span class="hl kwa">end</span>
<span class="hl kwa">end</span> <span class="hl com">(* end of [symtbl_dna_get] *)</span>

<span class="hl kwa">implement</span> symtbl_symlen_get <span class="hl sym">(</span>tbl<span class="hl sym">) =</span> <span class="hl kwa">begin</span>
  <span class="hl kwa">let val</span> <span class="hl sym">(</span>vbox pf_tbl <span class="hl sym">|</span> p_tbl<span class="hl sym">) =</span> tbl <span class="hl kwa">in</span> p_tbl<span class="hl sym">-&gt;</span>symlen <span class="hl kwa">end</span>
<span class="hl kwa">end</span> <span class="hl com">(* end of [symtbl_symlen_get] *)</span>

<span class="hl kwa">implement</span> symtbl_symlen_set <span class="hl sym">(</span>tbl<span class="hl sym">,</span> len<span class="hl sym">) =</span> <span class="hl kwa">begin</span>
  <span class="hl kwa">let val</span> <span class="hl sym">(</span>vbox pf_tbl <span class="hl sym">|</span> p_tbl<span class="hl sym">) =</span> tbl <span class="hl kwa">in</span> p_tbl<span class="hl sym">-&gt;</span>symlen <span class="hl sym">:=</span> len <span class="hl kwa">end</span>
<span class="hl kwa">end</span> <span class="hl com">(* end of [symtbl_symlen_set] *)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">extern fun</span> print_symbol <span class="hl sym">(</span>sym<span class="hl sym">:</span> symbol_t<span class="hl sym">,</span> len<span class="hl sym">:</span> int<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl str">&quot;print_symbol&quot;</span>

<span class="hl sym">%{</span>^

ats_void_type print_symbol
  <span class="hl sym">(</span>symbol_t sym<span class="hl sym">,</span> ats_int_type len<span class="hl sym">) {</span>
  <span class="hl kwa">while</span> <span class="hl sym">(</span>len <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">) {</span> fputc <span class="hl sym">( *</span>sym<span class="hl sym">,</span> stdout<span class="hl sym">) ; --</span>len <span class="hl sym">; ++</span>sym <span class="hl sym">; }</span>
  return <span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl sym">%}</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">extern fun</span> hash_string <span class="hl sym">{</span>n<span class="hl sym">:</span>nat<span class="hl sym">} (</span>s<span class="hl sym">:</span> string n<span class="hl sym">,</span> n<span class="hl sym">:</span> size_t n<span class="hl sym">):&lt;&gt;</span> uInt
  <span class="hl sym">=</span> <span class="hl str">&quot;hash_string&quot;</span>
  
<span class="hl kwa">extern fun</span> hash_symbol <span class="hl sym">(</span>sym<span class="hl sym">:</span> symbol_t<span class="hl sym">,</span> len<span class="hl sym">:</span> int<span class="hl sym">):&lt;&gt;</span> uInt
  <span class="hl sym">=</span> <span class="hl str">&quot;hash_symbol&quot;</span>

<span class="hl sym">%{</span>^

<span class="hl slc">// a commonly used simple hash function</span>

static <span class="hl slc">// inline</span>
ats_uint_type hash_symbol <span class="hl sym">(</span>symbol_t sym<span class="hl sym">,</span> ats_int_type len<span class="hl sym">) {</span>
  unsigned int hash_val <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl sym">;</span>
  <span class="hl kwa">while</span> <span class="hl sym">(</span>len <span class="hl sym">&gt;=</span> <span class="hl num">4</span><span class="hl sym">) {</span>
    hash_val <span class="hl sym">+=</span> hash_val <span class="hl sym">*</span> <span class="hl num">33</span> <span class="hl sym">;</span>
    hash_val <span class="hl sym">+=</span> sym<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] &lt;&lt;</span> <span class="hl num">24</span> <span class="hl sym">;</span>
    hash_val <span class="hl sym">+=</span> sym<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">] &lt;&lt;</span> <span class="hl num">16</span> <span class="hl sym">;</span>
    hash_val <span class="hl sym">+=</span> sym<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">] &lt;&lt;</span>  <span class="hl num">8</span> <span class="hl sym">;</span>
    hash_val <span class="hl sym">+=</span> sym<span class="hl sym">[</span><span class="hl num">3</span><span class="hl sym">] ;</span>
    sym <span class="hl sym">+=</span> <span class="hl num">4</span> <span class="hl sym">;</span> len <span class="hl sym">-=</span> <span class="hl num">4</span> <span class="hl sym">;</span>
  <span class="hl sym">}</span> <span class="hl slc">// end of [while]</span>
  <span class="hl kwa">if</span> <span class="hl sym">(</span>len <span class="hl sym">&gt;=</span> <span class="hl num">2</span><span class="hl sym">) {</span>
    hash_val <span class="hl sym">=</span> hash_val <span class="hl sym">*</span> <span class="hl num">33</span> <span class="hl sym">+ (</span>sym<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] &lt;&lt;</span> <span class="hl num">8</span><span class="hl sym">) +</span> sym<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">] ;</span>
    sym <span class="hl sym">+=</span> <span class="hl num">2</span> <span class="hl sym">;</span> len <span class="hl sym">-=</span> <span class="hl num">2</span> <span class="hl sym">;</span>
  <span class="hl sym">}</span> <span class="hl slc">// end of [if]</span>
  <span class="hl kwa">if</span> <span class="hl sym">(</span>len <span class="hl sym">&gt;=</span> <span class="hl num">1</span><span class="hl sym">) {</span>
    hash_val <span class="hl sym">=</span> hash_val <span class="hl sym">*</span> <span class="hl num">33</span> <span class="hl sym">+</span> sym<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] ;</span>
  <span class="hl sym">}</span> <span class="hl slc">// end of [while]</span>
  return hash_val <span class="hl sym">;</span>
<span class="hl sym">}</span>

static inline
ats_uint_type
hash_string <span class="hl sym">(</span>ats_ptr_type str<span class="hl sym">,</span> ats_size_type len<span class="hl sym">) {</span>
  return hash_symbol <span class="hl sym">(</span>str<span class="hl sym">,</span> len<span class="hl sym">) ;</span>
<span class="hl sym">}</span>

<span class="hl sym">%}</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl sym">%{</span>^

ats_ptr_type
tblent_array_make <span class="hl sym">(</span>ats_int_type sz<span class="hl sym">) {</span>
  return ats_calloc_gc <span class="hl sym">(</span>sz<span class="hl sym">,</span> sizeof<span class="hl sym">(</span>tblent_t<span class="hl sym">)) ;</span>
<span class="hl sym">}</span> <span class="hl com">/* end of [tblent_array_make] */</span>

<span class="hl sym">%}</span>

<span class="hl kwa">extern fun</span> tblent_array_make <span class="hl sym">{</span>sz<span class="hl sym">:</span> nat<span class="hl sym">} (</span>sz<span class="hl sym">:</span> int sz<span class="hl sym">)</span>
  <span class="hl sym">:&lt;&gt; [</span>l<span class="hl sym">:</span>addr<span class="hl sym">] (</span>free_gc_v l<span class="hl sym">,</span> array_v <span class="hl sym">(</span>tblent_t<span class="hl sym">,</span> sz<span class="hl sym">,</span> l<span class="hl sym">) |</span> ptr l<span class="hl sym">)</span>
  <span class="hl sym">=</span> <span class="hl str">&quot;tblent_array_make&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">implement</span> symtbl_make <span class="hl sym">(</span>dna<span class="hl sym">,</span> sz<span class="hl sym">) = (</span>pfbox <span class="hl sym">|</span> p_tbl<span class="hl sym">)</span> <span class="hl kwa">where</span> <span class="hl sym">{</span>
  <span class="hl kwa">val</span> sz <span class="hl sym">=</span> max <span class="hl sym">(</span>sz<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">(</span>pf_tbl_gc<span class="hl sym">,</span> pf_tbl <span class="hl sym">|</span> p_tbl<span class="hl sym">) =</span> ptr_alloc_tsz <span class="hl sym">{</span>symtbl0<span class="hl sym">} (</span>sizeof<span class="hl sym">&lt;</span>symtbl0<span class="hl sym">&gt;)</span>
  <span class="hl kwa">val</span> <span class="hl sym">(</span>pf_arr_gc<span class="hl sym">,</span> pf_arr <span class="hl sym">|</span> p_arr<span class="hl sym">) =</span> tblent_array_make <span class="hl sym">(</span>sz<span class="hl sym">)</span>

  <span class="hl kwa">val</span> <span class="hl sym">() =</span> <span class="hl kwa">begin</span>
    p_tbl<span class="hl sym">-&gt;</span>dna <span class="hl sym">:=</span> dna<span class="hl sym">;</span>
    p_tbl<span class="hl sym">-&gt;</span>ptr <span class="hl sym">:=</span> p_arr<span class="hl sym">;</span>
    p_tbl<span class="hl sym">-&gt;</span>view_arr <span class="hl sym">:=</span> pf_arr<span class="hl sym">;</span>
    p_tbl<span class="hl sym">-&gt;</span>view_arr_gc <span class="hl sym">:=</span> pf_arr_gc<span class="hl sym">;</span>
    p_tbl<span class="hl sym">-&gt;</span>size <span class="hl sym">:=</span> sz<span class="hl sym">;</span>
    p_tbl<span class="hl sym">-&gt;</span>symlen <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    p_tbl<span class="hl sym">-&gt;</span>nitm <span class="hl sym">:=</span> <span class="hl num">0</span>
  <span class="hl kwa">end</span> <span class="hl com">(* end of [val] *)</span>

  <span class="hl kwa">prval</span> <span class="hl sym">() =</span> free_gc_elim <span class="hl sym">(</span>pf_tbl_gc<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">(</span>pfbox <span class="hl sym">| ()) =</span> vbox_make_view_ptr <span class="hl sym">(</span>pf_tbl <span class="hl sym">|</span> p_tbl<span class="hl sym">)</span>
<span class="hl sym">}</span> <span class="hl slc">// symtbl_make</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">extern fun</span> tblent_array_clear <span class="hl sym">{</span>sz<span class="hl sym">:</span>nat<span class="hl sym">} {</span>l<span class="hl sym">:</span>addr<span class="hl sym">}</span>
  <span class="hl sym">(</span>pf<span class="hl sym">: !</span>array_v <span class="hl sym">(</span>tblent_t<span class="hl sym">,</span> sz<span class="hl sym">,</span> l<span class="hl sym">) |</span> p<span class="hl sym">:</span> ptr l<span class="hl sym">,</span> sz<span class="hl sym">:</span> int sz<span class="hl sym">):&lt;&gt;</span> void
  <span class="hl sym">=</span> <span class="hl str">&quot;tblent_array_clear&quot;</span>

<span class="hl sym">%{</span>

ats_void_type
tblent_array_clear
  <span class="hl sym">(</span>ats_ptr_type p<span class="hl sym">,</span> ats_int_type sz<span class="hl sym">) {</span>
  memset <span class="hl sym">(</span>p<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> sz <span class="hl sym">*</span> sizeof<span class="hl sym">(</span>tblent_t<span class="hl sym">)) ;</span> return <span class="hl sym">;</span>
<span class="hl sym">}</span> <span class="hl com">/* end of [tblent_array_clear] */</span>

<span class="hl sym">%}</span>

<span class="hl kwa">implement</span> symtbl_clear <span class="hl sym">(</span>tbl<span class="hl sym">) = ()</span> <span class="hl kwa">where</span> <span class="hl sym">{</span>
  <span class="hl kwa">val</span> <span class="hl sym">(</span>vbox pf_tbl <span class="hl sym">|</span> p_tbl<span class="hl sym">) =</span> tbl
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> tblent_array_clear <span class="hl sym">(</span>p_tbl<span class="hl sym">-&gt;</span>view_arr <span class="hl sym">|</span> p_tbl<span class="hl sym">-&gt;</span>ptr<span class="hl sym">,</span> p_tbl<span class="hl sym">-&gt;</span>size<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> p_tbl<span class="hl sym">-&gt;</span>nitm <span class="hl sym">:=</span> <span class="hl num">0</span>
<span class="hl sym">}</span> <span class="hl com">(* end of [symtbl_clear] *)</span>

<span class="hl slc">//</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl slc">// linear probing</span>
<span class="hl kwa">extern fun</span> symtbl_search_probe
  <span class="hl sym">{</span>sz<span class="hl sym">,</span>i<span class="hl sym">:</span>nat <span class="hl sym">|</span> i <span class="hl sym">&lt;</span> sz<span class="hl sym">} {</span>l<span class="hl sym">:</span>addr<span class="hl sym">} (</span>
  pf<span class="hl sym">: !</span>array_v<span class="hl sym">(</span>tblent_t<span class="hl sym">,</span> sz<span class="hl sym">,</span> l<span class="hl sym">) |</span> p<span class="hl sym">:</span> ptr l<span class="hl sym">,</span> sz<span class="hl sym">:</span> int sz<span class="hl sym">,</span> len<span class="hl sym">:</span> int<span class="hl sym">,</span> name<span class="hl sym">:</span> string<span class="hl sym">,</span> i<span class="hl sym">:</span> int i
  <span class="hl sym">) :&lt;&gt;</span> int
  <span class="hl sym">=</span> <span class="hl str">&quot;symtbl_search_probe&quot;</span>

<span class="hl sym">%{</span>

ats_int_type symtbl_search_probe
  <span class="hl sym">(</span>ats_ptr_type p<span class="hl sym">,</span> ats_int_type sz<span class="hl sym">,</span> ats_int_type len<span class="hl sym">,</span> ats_ptr_type name<span class="hl sym">,</span> ats_int_type i<span class="hl sym">) {</span>
  tblent_t <span class="hl sym">*</span>ent <span class="hl sym">;</span> symbol_t sym<span class="hl sym">;</span>
  ent <span class="hl sym">= ((</span>tblent_t*)p<span class="hl sym">) +</span> i <span class="hl sym">;</span> <span class="hl kwa">while</span> <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">) {</span>
    sym <span class="hl sym">=</span> ent<span class="hl sym">-&gt;</span>sym <span class="hl sym">;</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>sym <span class="hl sym">== (</span>symbol_t<span class="hl sym">)</span><span class="hl num">0</span><span class="hl sym">)</span> return <span class="hl num">0</span> <span class="hl sym">;</span> <span class="hl slc">// the entry is unoccupied</span>
    <span class="hl kwa">if</span> <span class="hl sym">(!</span>strncmp <span class="hl sym">(</span>sym<span class="hl sym">, (</span>char*)name<span class="hl sym">,</span> len<span class="hl sym">)) {</span> return ent<span class="hl sym">-&gt;</span>cnt <span class="hl sym">; }</span>
    i <span class="hl sym">+=</span> <span class="hl num">1</span> <span class="hl sym">;</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>i <span class="hl sym">&gt;=</span> sz<span class="hl sym">) {</span> i <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl sym">;</span> ent <span class="hl sym">= (</span>tblent_t*)p <span class="hl sym">; }</span> <span class="hl kwa">else</span> ent <span class="hl sym">+=</span> <span class="hl num">1</span><span class="hl sym">;</span>
  <span class="hl sym">}</span> <span class="hl slc">// end of [while]</span>
<span class="hl sym">}</span> <span class="hl com">/* end of [symtbl_search_probe] */</span>

<span class="hl sym">%}</span>

<span class="hl kwa">implement</span> symtbl_search <span class="hl sym">(</span>tbl<span class="hl sym">,</span> name<span class="hl sym">) =</span> <span class="hl kwa">let</span>

<span class="hl kwa">val</span> hash_val <span class="hl sym">=</span> hash_string <span class="hl sym">(</span>name<span class="hl sym">,</span> string1_length name<span class="hl sym">)</span>
<span class="hl com">(*</span>
<span class="hl com">val () = begin</span>
<span class="hl com">  prerr &quot;symtbl_search: hash_val = &quot;; prerr hash_val; prerr_newline ()</span>
<span class="hl com">end // end [val]</span>
<span class="hl com">*)</span>
<span class="hl kwa">val</span> <span class="hl sym">(</span>vbox pf_tbl <span class="hl sym">|</span> p_tbl<span class="hl sym">) =</span> tbl
<span class="hl kwa">val</span> i <span class="hl sym">=</span> hash_val uimod p_tbl<span class="hl sym">-&gt;</span>size

<span class="hl kwa">in</span>

symtbl_search_probe <span class="hl sym">(</span>
  p_tbl<span class="hl sym">-&gt;</span>view_arr <span class="hl sym">|</span> p_tbl<span class="hl sym">-&gt;</span>ptr<span class="hl sym">,</span> p_tbl<span class="hl sym">-&gt;</span>size<span class="hl sym">,</span> p_tbl<span class="hl sym">-&gt;</span>symlen<span class="hl sym">,</span> name<span class="hl sym">,</span> i
<span class="hl sym">)</span>

<span class="hl kwa">end</span> <span class="hl slc">// end of [symtbl_search]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">extern fun</span> symtbl_insert_probe <span class="hl sym">{</span>sz<span class="hl sym">,</span>i<span class="hl sym">:</span>nat <span class="hl sym">|</span> i <span class="hl sym">&lt;</span> sz<span class="hl sym">} {</span>l<span class="hl sym">:</span>addr<span class="hl sym">}</span>
  <span class="hl sym">(</span>pf<span class="hl sym">: !</span>array_v <span class="hl sym">(</span>tblent_t<span class="hl sym">,</span> sz<span class="hl sym">,</span> l<span class="hl sym">) |</span> p<span class="hl sym">:</span> ptr l<span class="hl sym">,</span> sz<span class="hl sym">:</span> int sz<span class="hl sym">,</span> len<span class="hl sym">:</span> int<span class="hl sym">,</span> sym<span class="hl sym">:</span> symbol_t<span class="hl sym">,</span> cnt<span class="hl sym">:</span> int<span class="hl sym">,</span> i<span class="hl sym">:</span> int i<span class="hl sym">)</span>
  <span class="hl sym">:&lt;&gt;</span> bool <span class="hl sym">=</span> <span class="hl str">&quot;symtbl_insert_probe&quot;</span>

<span class="hl sym">%{</span>

ats_bool_type symtbl_insert_probe
  <span class="hl sym">(</span>ats_ptr_type p<span class="hl sym">,</span> ats_int_type sz<span class="hl sym">,</span> ats_int_type len<span class="hl sym">,</span> symbol_t sym<span class="hl sym">,</span> ats_int_type cnt<span class="hl sym">,</span> ats_int_type i<span class="hl sym">) {</span>
  tblent_t <span class="hl sym">*</span>ent <span class="hl sym">;</span>
  ent <span class="hl sym">= ((</span>tblent_t*)p<span class="hl sym">) +</span> i <span class="hl sym">;</span>
  <span class="hl kwa">while</span> <span class="hl sym">(</span>ent<span class="hl sym">-&gt;</span>sym<span class="hl sym">) {</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>strncmp <span class="hl sym">(</span>ent<span class="hl sym">-&gt;</span>sym<span class="hl sym">,</span> sym<span class="hl sym">,</span> len<span class="hl sym">) ==</span> <span class="hl num">0</span><span class="hl sym">) {</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>cnt <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> ent<span class="hl sym">-&gt;</span>cnt <span class="hl sym">=</span> cnt <span class="hl sym">;</span> <span class="hl kwa">else</span> ent<span class="hl sym">-&gt;</span>cnt <span class="hl sym">+=</span> <span class="hl num">1</span> <span class="hl sym">;</span>
      return <span class="hl num">0</span> <span class="hl sym">;</span>
    <span class="hl sym">}</span>
    i <span class="hl sym">+=</span> <span class="hl num">1</span><span class="hl sym">;</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>i <span class="hl sym">&gt;=</span> sz<span class="hl sym">) {</span> i <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl sym">;</span> ent <span class="hl sym">= (</span>tblent_t*)p <span class="hl sym">; }</span> <span class="hl kwa">else</span> ent <span class="hl sym">+=</span> <span class="hl num">1</span> <span class="hl sym">;</span>
  <span class="hl sym">}</span>
  ent<span class="hl sym">-&gt;</span>sym <span class="hl sym">=</span> sym <span class="hl sym">;</span>
  <span class="hl kwa">if</span> <span class="hl sym">(</span>cnt <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> ent<span class="hl sym">-&gt;</span>cnt <span class="hl sym">=</span> cnt <span class="hl sym">;</span> <span class="hl kwa">else</span> ent<span class="hl sym">-&gt;</span>cnt <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">;</span>
  return <span class="hl num">1</span> <span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl sym">%}</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">implement</span> symtbl_insert <span class="hl sym">(</span>tbl<span class="hl sym">,</span> sym<span class="hl sym">,</span> cnt<span class="hl sym">) =</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> <span class="hl sym">(</span>vbox pf_tbl <span class="hl sym">|</span> p_tbl<span class="hl sym">) =</span> tbl
  <span class="hl kwa">val</span> len <span class="hl sym">=</span> p_tbl<span class="hl sym">-&gt;</span>symlen
  <span class="hl kwa">val</span> hash_val <span class="hl sym">=</span> hash_symbol <span class="hl sym">(</span>sym<span class="hl sym">,</span> len<span class="hl sym">)</span>
  <span class="hl kwa">val</span> i <span class="hl sym">=</span> hash_val uimod p_tbl<span class="hl sym">-&gt;</span>size
  <span class="hl kwa">val</span> is_new <span class="hl sym">=</span> symtbl_insert_probe
    <span class="hl sym">(</span>p_tbl<span class="hl sym">-&gt;</span>view_arr <span class="hl sym">|</span> p_tbl<span class="hl sym">-&gt;</span>ptr<span class="hl sym">,</span> p_tbl<span class="hl sym">-&gt;</span>size<span class="hl sym">,</span> len<span class="hl sym">,</span> sym<span class="hl sym">,</span> cnt<span class="hl sym">,</span> i<span class="hl sym">)</span>
<span class="hl kwa">in</span>
  <span class="hl kwa">if</span> is_new <span class="hl kwa">then</span> p_tbl<span class="hl sym">-&gt;</span>nitm <span class="hl sym">:=</span> <span class="hl num">1</span> <span class="hl sym">+</span> p_tbl<span class="hl sym">-&gt;</span>nitm <span class="hl kwa">else</span> <span class="hl sym">()</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [symtbl_insert]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">extern fun</span> tblent_array_fold
  <span class="hl sym">{</span>a<span class="hl sym">:</span>viewt&#64;ype<span class="hl sym">} {</span>sz<span class="hl sym">:</span> nat<span class="hl sym">} {</span>l<span class="hl sym">:</span>addr<span class="hl sym">} (</span>
    pf<span class="hl sym">: !</span>array_v <span class="hl sym">(</span>tblent_t<span class="hl sym">,</span> sz<span class="hl sym">,</span> l<span class="hl sym">)</span>
  <span class="hl sym">|</span> p<span class="hl sym">:</span> ptr l<span class="hl sym">,</span> sz<span class="hl sym">:</span> int sz<span class="hl sym">,</span> f<span class="hl sym">: &amp;(</span>symbol_t<span class="hl sym">,</span> int<span class="hl sym">, &amp;</span>a<span class="hl sym">) -&lt;</span>clo<span class="hl sym">&gt;</span> void<span class="hl sym">,</span> res<span class="hl sym">: &amp;</span>a
  <span class="hl sym">) :&lt;&gt;</span> void
  <span class="hl sym">=</span> <span class="hl str">&quot;tblent_array_fold&quot;</span>

<span class="hl sym">%{</span>

ats_void_type tblent_array_fold
  <span class="hl sym">(</span>ats_ptr_type p<span class="hl sym">,</span> ats_int_type sz<span class="hl sym">,</span> ats_ref_type f<span class="hl sym">,</span> ats_ptr_type res<span class="hl sym">) {</span>
  int i <span class="hl sym">;</span> tblent_t <span class="hl sym">*</span>ent <span class="hl sym">;</span>
  i <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl sym">;</span> ent <span class="hl sym">= (</span>tblent_t*)p <span class="hl sym">;</span> <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> sz<span class="hl sym">) {</span>
    <span class="hl kwa">if</span> <span class="hl sym">(!</span>ent<span class="hl sym">-&gt;</span>sym<span class="hl sym">) {</span> i <span class="hl sym">+=</span> <span class="hl num">1</span><span class="hl sym">;</span> ent <span class="hl sym">+=</span> <span class="hl num">1</span><span class="hl sym">;</span> <span class="hl kwa">continue</span> <span class="hl sym">; }</span>
    <span class="hl sym">((</span>ats_void_type <span class="hl sym">(</span> *)<span class="hl sym">(</span>ats_clo_ptr_type<span class="hl sym">,</span> symbol_t<span class="hl sym">,</span> ats_int_type<span class="hl sym">,</span> ats_ptr_type<span class="hl sym">))(</span>ats_closure_fun<span class="hl sym">(</span>f<span class="hl sym">)))(</span>f<span class="hl sym">,</span> ent<span class="hl sym">-&gt;</span>sym<span class="hl sym">,</span> ent<span class="hl sym">-&gt;</span>cnt<span class="hl sym">,</span> res<span class="hl sym">) ;</span>
    i <span class="hl sym">+=</span> <span class="hl num">1</span> <span class="hl sym">;</span> ent <span class="hl sym">+=</span> <span class="hl num">1</span> <span class="hl sym">;</span>
  <span class="hl sym">}</span> <span class="hl slc">// end of [while]</span>
  return <span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl sym">%}</span>

<span class="hl kwa">implement</span> symtbl_fold <span class="hl sym">{</span>a<span class="hl sym">} (</span>tbl<span class="hl sym">,</span> f<span class="hl sym">,</span> res<span class="hl sym">) =</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> <span class="hl sym">(</span>vbox pf_tbl <span class="hl sym">|</span> p_tbl<span class="hl sym">) =</span> tbl
<span class="hl kwa">in</span>
  tblent_array_fold <span class="hl sym">{</span>a<span class="hl sym">} (</span>p_tbl<span class="hl sym">-&gt;</span>view_arr <span class="hl sym">|</span> p_tbl<span class="hl sym">-&gt;</span>ptr<span class="hl sym">,</span> p_tbl<span class="hl sym">-&gt;</span>size<span class="hl sym">,</span> f<span class="hl sym">,</span> res<span class="hl sym">)</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [symtbl_insert]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">extern fun</span> dna_count <span class="hl sym">{</span>n<span class="hl sym">,</span>k<span class="hl sym">:</span>nat <span class="hl sym">|</span> k <span class="hl sym">&lt;=</span> n<span class="hl sym">}</span>
  <span class="hl sym">(</span>tbl<span class="hl sym">:</span> symtbl_t<span class="hl sym">,</span> n<span class="hl sym">:</span> size_t n<span class="hl sym">,</span> k<span class="hl sym">:</span> size_t k<span class="hl sym">) :</span> symtbl_t <span class="hl sym">=</span> <span class="hl str">&quot;dna_count&quot;</span>

<span class="hl kwa">typedef</span> symflt <span class="hl sym">=</span> &#64;<span class="hl sym">(</span>symbol_t<span class="hl sym">,</span> float<span class="hl sym">)</span>

<span class="hl kwa">fn</span> compare_symflt_symflt <span class="hl slc">// [&gt;=]</span>
  <span class="hl sym">(</span>x1<span class="hl sym">: &amp;</span>symflt<span class="hl sym">,</span> x2<span class="hl sym">: &amp;</span>symflt<span class="hl sym">):&lt;&gt;</span> Sgn <span class="hl sym">=</span> compare_float_float <span class="hl sym">(</span>x2<span class="hl sym">.</span>1<span class="hl sym">,</span> x1<span class="hl sym">.</span>1<span class="hl sym">)</span>
<span class="hl slc">// end of [compare_symflt_symflt]</span>

<span class="hl kwa">viewtypedef</span> frqlst <span class="hl sym">=</span> List_vt symflt

<span class="hl slc">// print and free</span>
<span class="hl kwa">fun</span> print_free_frqlst
  <span class="hl sym">(</span>kfs<span class="hl sym">:</span> frqlst<span class="hl sym">,</span> len<span class="hl sym">:</span> int<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl kwa">begin case</span><span class="hl sym">+</span> kfs <span class="hl kwa">of</span>
  <span class="hl sym">|</span> ~list_vt_cons <span class="hl sym">(</span>kf<span class="hl sym">,</span> kfs<span class="hl sym">) =&gt;</span> <span class="hl kwa">begin</span> print_symbol <span class="hl sym">(</span>kf<span class="hl num">.0</span><span class="hl sym">,</span> len<span class="hl sym">);</span>
       printf <span class="hl sym">(</span><span class="hl str">&quot; %.3f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> &#64;<span class="hl sym">(</span>double_of kf<span class="hl num">.1</span><span class="hl sym">));</span> print_free_frqlst <span class="hl sym">(</span>kfs<span class="hl sym">,</span> len<span class="hl sym">)</span>
    <span class="hl kwa">end</span> <span class="hl slc">// end of [FRQLSTcons]</span>
  <span class="hl sym">|</span> ~list_vt_nil <span class="hl sym">() =&gt; ()</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [print_free_frqlst]</span>

<span class="hl kwa">fn</span> write_frequencies <span class="hl sym">{</span>n<span class="hl sym">,</span>k<span class="hl sym">:</span>nat <span class="hl sym">|</span> k <span class="hl sym">&lt;=</span> n<span class="hl sym">}</span>
  <span class="hl sym">(</span>tbl<span class="hl sym">:</span> symtbl_t<span class="hl sym">,</span> n<span class="hl sym">:</span> size_t n<span class="hl sym">,</span> k<span class="hl sym">:</span> size_t k<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> tbl <span class="hl sym">=</span> dna_count <span class="hl sym">(</span>tbl<span class="hl sym">,</span> n<span class="hl sym">,</span> k<span class="hl sym">)</span>
  <span class="hl kwa">var</span> total<span class="hl sym">:</span> int <span class="hl sym">= (</span><span class="hl num">0</span><span class="hl sym">:</span> int<span class="hl sym">)</span>
  <span class="hl kwa">var</span> <span class="hl sym">!</span>p_clo <span class="hl sym">=</span> &#64;<span class="hl kwa">lam</span> <span class="hl sym">(</span>k<span class="hl sym">:</span> symbol_t<span class="hl sym">,</span> cnt<span class="hl sym">:</span> int<span class="hl sym">,</span> res<span class="hl sym">: &amp;</span>int<span class="hl sym">):</span> void <span class="hl sym">=&lt;</span>clo<span class="hl sym">&gt;</span>
    <span class="hl sym">(</span>res <span class="hl sym">:=</span> res <span class="hl sym">+</span> cnt<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> symtbl_fold <span class="hl sym">{</span>int<span class="hl sym">} (</span>tbl<span class="hl sym">, !</span>p_clo<span class="hl sym">,</span> total<span class="hl sym">);</span> <span class="hl kwa">val</span> ftotal <span class="hl sym">=</span> float_of total
  <span class="hl kwa">var</span> frqs<span class="hl sym">:</span> frqlst <span class="hl sym">=</span> list_vt_nil <span class="hl sym">()</span>
  <span class="hl kwa">var</span> <span class="hl sym">!</span>p_clo <span class="hl sym">=</span> &#64;<span class="hl kwa">lam</span>
    <span class="hl sym">(</span>k<span class="hl sym">:</span> symbol_t<span class="hl sym">,</span> cnt<span class="hl sym">:</span> int<span class="hl sym">,</span> res<span class="hl sym">: &amp;</span>frqlst<span class="hl sym">):</span> void <span class="hl sym">=&lt;</span>clo<span class="hl sym">&gt;</span> <span class="hl kwa">let</span> 
    <span class="hl kwa">val</span> f <span class="hl sym">= (</span>float_of <span class="hl num">100</span><span class="hl sym">) *</span> float_of cnt <span class="hl sym">/</span> ftotal<span class="hl sym">;</span> <span class="hl kwa">val</span> kf <span class="hl sym">=</span> &#64;<span class="hl sym">(</span>k<span class="hl sym">,</span> f<span class="hl sym">)</span> <span class="hl kwa">in</span>
    res <span class="hl sym">:=</span> list_vt_cons <span class="hl sym">(</span>kf<span class="hl sym">,</span> res<span class="hl sym">)</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [f]</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> symtbl_fold <span class="hl sym">{</span>frqlst<span class="hl sym">} (</span>tbl<span class="hl sym">, !</span>p_clo<span class="hl sym">,</span> frqs<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> list_vt_quicksort <span class="hl sym">(</span>frqs<span class="hl sym">,</span> compare_symflt_symflt<span class="hl sym">)</span>
<span class="hl kwa">in</span>
  print_free_frqlst <span class="hl sym">(</span>frqs<span class="hl sym">,</span> symtbl_symlen_get tbl<span class="hl sym">)</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [write_frequencies]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">fn</span> write_count <span class="hl sym">{</span>n<span class="hl sym">,</span>k<span class="hl sym">:</span>nat<span class="hl sym">}</span>
  <span class="hl sym">(</span>tbl<span class="hl sym">:</span> symtbl_t<span class="hl sym">,</span> n<span class="hl sym">:</span> size_t n<span class="hl sym">,</span> seq<span class="hl sym">:</span> string k<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> k <span class="hl sym">=</span> string1_length seq
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> assert <span class="hl sym">(</span>k <span class="hl sym">&lt;=</span> n<span class="hl sym">)</span>
  <span class="hl kwa">val</span> tbl <span class="hl sym">=</span> dna_count <span class="hl sym">(</span>tbl<span class="hl sym">,</span> n<span class="hl sym">,</span> k<span class="hl sym">)</span>
  <span class="hl kwa">val</span> cnt <span class="hl sym">=</span> symtbl_search <span class="hl sym">(</span>tbl<span class="hl sym">,</span> seq<span class="hl sym">)</span>
<span class="hl kwa">in</span>
  printf <span class="hl sym">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\t</span><span class="hl str">%s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> &#64;<span class="hl sym">(</span>cnt<span class="hl sym">,</span> seq<span class="hl sym">))</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [write_count]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">extern fun</span> getline <span class="hl sym">():</span> string <span class="hl sym">=</span> <span class="hl str">&quot;__getline&quot;</span>
<span class="hl kwa">extern fun</span> getrest <span class="hl sym">(</span>sz<span class="hl sym">: &amp;</span>size_t? <span class="hl sym">&gt;&gt;</span> size_t n<span class="hl sym">):</span> <span class="hl dir">#[n:nat] string n =</span> <span class="hl dstr">&quot;__getrest&quot;</span><span class="hl dir"></span>

<span class="hl sym">%{</span>$

<span class="hl dir">#define LINEBUFSZ 1024</span>
char theLineBuffer<span class="hl sym">[</span>LINEBUFSZ<span class="hl sym">] ;</span>
ats_ptr_type __getline <span class="hl sym">() {</span>
  fgets <span class="hl sym">(</span>theLineBuffer<span class="hl sym">,</span> LINEBUFSZ<span class="hl sym">,</span> stdin<span class="hl sym">) ;</span> return theLineBuffer <span class="hl sym">;</span>
<span class="hl sym">}</span> <span class="hl com">/* end of [getline] */</span>

<span class="hl dir">#define RESTBUFSZ (128 * 1024 * 1024)</span>
char theRestBuffer<span class="hl sym">[</span>RESTBUFSZ<span class="hl sym">] ;</span>

ats_ptr_type __getrest <span class="hl sym">(</span>ats_ref_type p_n<span class="hl sym">) {</span>
  int c <span class="hl sym">;</span> size_t i <span class="hl sym">;</span> char <span class="hl sym">*</span>s <span class="hl sym">;</span>
  s <span class="hl sym">=</span> theRestBuffer <span class="hl sym">;</span> i <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl sym">;</span>
  <span class="hl kwa">while</span> <span class="hl sym">((</span>c <span class="hl sym">=</span> fgetc<span class="hl sym">(</span>stdin<span class="hl sym">)) !=</span> EOF<span class="hl sym">) {</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>c <span class="hl sym">!=</span> '\n'<span class="hl sym">) { *</span>s<span class="hl sym">++ =</span> toupper<span class="hl sym">(</span>c<span class="hl sym">) ;</span> i<span class="hl sym">++ ; }</span>
  <span class="hl sym">}</span>
  <span class="hl sym">*</span>s <span class="hl sym">=</span> '\000' <span class="hl sym">; *((</span>size_t*)p_n<span class="hl sym">) =</span> i <span class="hl sym">;</span>
  <span class="hl kwa">if</span> <span class="hl sym">(</span>i <span class="hl sym">&gt;=</span> RESTBUFSZ<span class="hl sym">) {</span>
    fprintf <span class="hl sym">(</span>stderr<span class="hl sym">,</span> <span class="hl str">&quot;exit(ATS): too much data for processing</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">) ;</span> exit<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">) ;</span>
  <span class="hl sym">}</span>
  return theRestBuffer <span class="hl sym">;</span>
<span class="hl sym">}</span> <span class="hl com">/* end of [__getrest] */</span>

<span class="hl sym">%}</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">fun</span> is_three <span class="hl sym">(</span>s<span class="hl sym">:</span> string<span class="hl sym">):</span> bool <span class="hl sym">=</span>
  <span class="hl kwa">if</span> strncmp <span class="hl sym">(</span>s<span class="hl sym">,</span> <span class="hl str">&quot;&gt;THREE&quot;</span><span class="hl sym">,</span> <span class="hl num">6</span><span class="hl sym">) =</span> <span class="hl num">0</span> <span class="hl kwa">then</span> true <span class="hl kwa">else</span> false
<span class="hl slc">// end of [is_three]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">extern fun</span> dna_of_string <span class="hl sym">(</span>s<span class="hl sym">:</span> string<span class="hl sym">):</span> dna_t <span class="hl sym">=</span> <span class="hl str">&quot;dna_of_string&quot;</span>

<span class="hl kwa">implement</span> main <span class="hl sym">(</span>argc<span class="hl sym">,</span> argv<span class="hl sym">) =</span> <span class="hl kwa">let</span>
  <span class="hl kwa">fun</span> dna_three_get
    <span class="hl sym">(</span>n<span class="hl sym">: &amp;</span>size_t? <span class="hl sym">&gt;&gt;</span> size_t n<span class="hl sym">):</span> <span class="hl dir">#[n:nat] string n = let</span>
    <span class="hl kwa">val</span> s <span class="hl sym">=</span> getline <span class="hl sym">();</span> <span class="hl kwa">val</span> is3 <span class="hl sym">=</span> is_three <span class="hl sym">(</span>s<span class="hl sym">)</span>
  <span class="hl kwa">in</span>
    <span class="hl kwa">if</span> is3 <span class="hl kwa">then</span> getrest <span class="hl sym">(</span>n<span class="hl sym">)</span> <span class="hl kwa">else</span> dna_three_get <span class="hl sym">(</span>n<span class="hl sym">)</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [dna_three_get]</span>
  <span class="hl kwa">var</span> n<span class="hl sym">:</span> size_t <span class="hl slc">// uninitialized</span>
  <span class="hl kwa">val</span> dna_three <span class="hl sym">=</span> dna_three_get <span class="hl sym">(</span>n<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> assert <span class="hl sym">(</span>n <span class="hl sym">&gt;=</span> <span class="hl num">2</span><span class="hl sym">)</span>
<span class="hl com">(*</span>
<span class="hl com">  val () = (prerr &quot;main: n = &quot;; prerr n; prerr_newline ())</span>
<span class="hl com">*)</span>
  <span class="hl kwa">val</span> dna3 <span class="hl sym">=</span>
    dna_of_string dna_three <span class="hl kwa">where</span> <span class="hl sym">{</span>
    <span class="hl kwa">extern</span> castfn dna_of_string <span class="hl sym">(</span>str<span class="hl sym">:</span> string<span class="hl sym">):</span> dna_t
  <span class="hl sym">}</span>
  <span class="hl kwa">val</span> dna_table <span class="hl sym">=</span> symtbl_make <span class="hl sym">(</span>dna3<span class="hl sym">,</span> <span class="hl com">(*393241*)</span><span class="hl num">196613</span><span class="hl com">(*98317*)</span><span class="hl sym">)</span>
<span class="hl kwa">in</span>
  write_frequencies <span class="hl sym">(</span>dna_table<span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">) ;</span> print_newline <span class="hl sym">() ;</span>
  write_frequencies <span class="hl sym">(</span>dna_table<span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">) ;</span> print_newline <span class="hl sym">() ;</span>
  write_count <span class="hl sym">(</span>dna_table<span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl str">&quot;GGT&quot;</span><span class="hl sym">) ;</span>
  write_count <span class="hl sym">(</span>dna_table<span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl str">&quot;GGTA&quot;</span><span class="hl sym">) ;</span>
  write_count <span class="hl sym">(</span>dna_table<span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl str">&quot;GGTATT&quot;</span><span class="hl sym">) ;</span>
  write_count <span class="hl sym">(</span>dna_table<span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl str">&quot;GGTATTTTAATT&quot;</span><span class="hl sym">) ;</span>
  write_count <span class="hl sym">(</span>dna_table<span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl sym">) ;</span>
<span class="hl kwa">end</span> <span class="hl com">(* end of [main] *)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl sym">%{</span>$

ats_ptr_type
dna_count <span class="hl sym">(</span>ats_ptr_type tbl<span class="hl sym">,</span> ats_size_type n<span class="hl sym">,</span> ats_size_type k<span class="hl sym">) {</span>
  char <span class="hl sym">*</span>sym <span class="hl sym">;</span>
  symtbl_clear <span class="hl sym">(</span>tbl<span class="hl sym">) ;</span>
  symtbl_symlen_set <span class="hl sym">(</span>tbl<span class="hl sym">,</span> k<span class="hl sym">) ;</span>
  sym <span class="hl sym">= (</span>char*)symtbl_dna_get <span class="hl sym">(</span>tbl<span class="hl sym">) ;</span>
  <span class="hl kwa">while</span> <span class="hl sym">(</span>n <span class="hl sym">&gt;=</span> k<span class="hl sym">) {</span>
    symtbl_insert <span class="hl sym">(</span>tbl<span class="hl sym">,</span> sym<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">) ;</span> n <span class="hl sym">-=</span> <span class="hl num">1</span> <span class="hl sym">;</span> sym <span class="hl sym">+=</span> <span class="hl num">1</span> <span class="hl sym">;</span>
  <span class="hl sym">}</span>
  return tbl <span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl sym">%}</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl com">(* end of [k-nucleotide2.dats] *)</span>
