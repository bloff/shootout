<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://shootout.alioth.debian.org/</span>
<span class="hl slc">#</span>
<span class="hl slc"># contributed by Tupteq</span>
<span class="hl slc"># modified by Joseph LaFata</span>

<span class="hl kwa">from</span> array <span class="hl kwa">import</span> array
<span class="hl kwa">import</span> sys

cout <span class="hl sym">=</span> sys<span class="hl sym">.</span>stdout<span class="hl sym">.</span>write
<span class="hl kwa">if</span> sys<span class="hl sym">.</span>version_info <span class="hl sym">&gt;= (</span><span class="hl num">3</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">):</span>
    <span class="hl kwb">xrange</span> <span class="hl sym">=</span> <span class="hl kwb">range</span>
    cout <span class="hl sym">=</span> sys<span class="hl sym">.</span>stdout<span class="hl sym">.</span><span class="hl kwb">buffer</span><span class="hl sym">.</span>write

<span class="hl kwa">def</span> <span class="hl kwd">main</span><span class="hl sym">():</span>
    size <span class="hl sym">=</span> <span class="hl kwb">int</span><span class="hl sym">(</span>sys<span class="hl sym">.</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">])</span>
    xr_size <span class="hl sym">=</span> <span class="hl kwb">xrange</span><span class="hl sym">(</span>size<span class="hl sym">)</span>
    xr_iter <span class="hl sym">=</span> <span class="hl kwb">xrange</span><span class="hl sym">(</span><span class="hl num">50</span><span class="hl sym">)</span>
    bit <span class="hl sym">=</span> <span class="hl num">128</span>
    byte_acc <span class="hl sym">=</span> <span class="hl num">0</span>

    <span class="hl kwd">cout</span><span class="hl sym">((</span><span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">%d %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl sym">% (</span>size<span class="hl sym">,</span> size<span class="hl sym">)).</span><span class="hl kwd">encode</span><span class="hl sym">(</span><span class="hl str">'ASCII'</span><span class="hl sym">))</span>

    result <span class="hl sym">=</span> <span class="hl kwd">array</span><span class="hl sym">(</span><span class="hl str">'B'</span><span class="hl sym">)</span>
    size <span class="hl sym">=</span> <span class="hl kwb">float</span><span class="hl sym">(</span>size<span class="hl sym">)</span>
    <span class="hl kwa">for</span> y <span class="hl kwa">in</span> xr_size<span class="hl sym">:</span>
        fy <span class="hl sym">=</span> <span class="hl num">2</span>j <span class="hl sym">*</span> y <span class="hl sym">/</span> size <span class="hl sym">-</span> <span class="hl num">1</span>j
        <span class="hl kwa">for</span> x <span class="hl kwa">in</span> xr_size<span class="hl sym">:</span>
            z <span class="hl sym">=</span> <span class="hl num">0</span>j
            c <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">. *</span> x <span class="hl sym">/</span> size <span class="hl sym">-</span> <span class="hl num">1.5</span> <span class="hl sym">+</span> fy

            <span class="hl kwa">for</span> i <span class="hl kwa">in</span> xr_iter<span class="hl sym">:</span>
                z <span class="hl sym">=</span> z <span class="hl sym">*</span> z <span class="hl sym">+</span> c
                <span class="hl kwa">if</span> <span class="hl sym">(</span>z<span class="hl sym">.</span>real <span class="hl sym">*</span> z<span class="hl sym">.</span>real <span class="hl sym">+</span> z<span class="hl sym">.</span>imag <span class="hl sym">*</span> z<span class="hl sym">.</span>imag<span class="hl sym">) &gt;=</span> <span class="hl num">4.0</span><span class="hl sym">:</span>
                    <span class="hl kwa">break</span>
            <span class="hl kwa">else</span><span class="hl sym">:</span>
                byte_acc <span class="hl sym">+=</span> bit

            <span class="hl kwa">if</span> bit <span class="hl sym">&gt;</span> <span class="hl num">1</span><span class="hl sym">:</span>
                bit <span class="hl sym">&gt;&gt;=</span> <span class="hl num">1</span>
            <span class="hl kwa">else</span><span class="hl sym">:</span>
                result<span class="hl sym">.</span><span class="hl kwd">append</span><span class="hl sym">(</span>byte_acc<span class="hl sym">)</span>
                bit <span class="hl sym">=</span> <span class="hl num">128</span>
                byte_acc <span class="hl sym">=</span> <span class="hl num">0</span>

        <span class="hl kwa">if</span> bit <span class="hl sym">!=</span> <span class="hl num">128</span><span class="hl sym">:</span>
            result<span class="hl sym">.</span><span class="hl kwd">append</span><span class="hl sym">(</span>byte_acc<span class="hl sym">)</span>
            bit <span class="hl sym">=</span> <span class="hl num">128</span>
            byte_acc <span class="hl sym">=</span> <span class="hl num">0</span>
            
    <span class="hl kwd">cout</span><span class="hl sym">(</span>result<span class="hl sym">.</span><span class="hl kwd">tostring</span><span class="hl sym">())</span>


<span class="hl kwd">main</span><span class="hl sym">()</span>
