<span class="hl com">(*</span>
<span class="hl com"> *</span>
<span class="hl com"> * The Great Computer Language Shootout</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Contributed by Sebastien Loisel</span>
<span class="hl com"> * Cleanup by Troestler Christophe</span>
<span class="hl com"> * Translated to SML by sweeks&#64;sweeks.com</span>
<span class="hl com"> *)</span>

<span class="hl kwa">val</span> sub <span class="hl sym">=</span> Array.sub
<span class="hl kwa">val</span> update <span class="hl sym">=</span> Array.update

<span class="hl kwa">fun</span> eval_A <span class="hl sym">(</span>i<span class="hl sym">,</span> j<span class="hl sym">) =</span> <span class="hl num">1.0</span> <span class="hl sym">/</span> <span class="hl kwa">Real</span>.fromInt <span class="hl sym">((</span>i<span class="hl sym">+</span>j<span class="hl sym">)*(</span>i<span class="hl sym">+</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span> div <span class="hl num">2</span><span class="hl sym">+</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>

<span class="hl kwa">fun</span> eval_A_times_u <span class="hl sym">(</span>u<span class="hl sym">,</span> v<span class="hl sym">) =</span>
  <span class="hl kwa">let</span>
     <span class="hl kwa">val</span> n <span class="hl sym">=</span> Array.length v
  <span class="hl kwa">in</span>
     for <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl kwa">fn</span> i <span class="hl sym">=&gt;</span>
	  <span class="hl sym">(</span>update <span class="hl sym">(</span>v<span class="hl sym">,</span> i<span class="hl sym">,</span> <span class="hl num">0.0</span><span class="hl sym">)</span>
	   <span class="hl sym">;</span> for <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl kwa">fn</span> j <span class="hl sym">=&gt;</span>
		  update <span class="hl sym">(</span>v<span class="hl sym">,</span> i<span class="hl sym">,</span> sub <span class="hl sym">(</span>v<span class="hl sym">,</span> i<span class="hl sym">) +</span> eval_A <span class="hl sym">(</span>i<span class="hl sym">,</span> j<span class="hl sym">) *</span> sub <span class="hl sym">(</span>u<span class="hl sym">,</span> j<span class="hl sym">)))))</span>
  <span class="hl kwa">end</span>

<span class="hl kwa">fun</span> eval_At_times_u <span class="hl sym">(</span>u<span class="hl sym">,</span> v<span class="hl sym">) =</span>
   <span class="hl kwa">let</span>
      <span class="hl kwa">val</span> n <span class="hl sym">=</span> Array.length v
   <span class="hl kwa">in</span>
      for <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl kwa">fn</span> i <span class="hl sym">=&gt;</span>
	   <span class="hl sym">(</span>update <span class="hl sym">(</span>v<span class="hl sym">,</span> i<span class="hl sym">,</span> <span class="hl num">0.0</span><span class="hl sym">)</span>
	    <span class="hl sym">;</span> for <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl kwa">fn</span> j <span class="hl sym">=&gt;</span>
		   update <span class="hl sym">(</span>v<span class="hl sym">,</span> i<span class="hl sym">,</span> sub <span class="hl sym">(</span>v<span class="hl sym">,</span> i<span class="hl sym">) +</span> eval_A <span class="hl sym">(</span>j<span class="hl sym">,</span> i<span class="hl sym">) *</span> sub <span class="hl sym">(</span>u<span class="hl sym">,</span> j<span class="hl sym">)))))</span>
   <span class="hl kwa">end</span>

<span class="hl kwa">fun</span> eval_AtA_times_u <span class="hl sym">(</span>u<span class="hl sym">,</span> v<span class="hl sym">) =</span>
   <span class="hl kwa">let</span>
      <span class="hl kwa">val</span> w <span class="hl sym">=</span> Array.array <span class="hl sym">(</span>Array.length u<span class="hl sym">,</span> <span class="hl num">0.0</span><span class="hl sym">)</span>
   <span class="hl kwa">in</span>
      eval_A_times_u <span class="hl sym">(</span>u<span class="hl sym">,</span> w<span class="hl sym">)</span>
      <span class="hl sym">;</span> eval_At_times_u <span class="hl sym">(</span>w<span class="hl sym">,</span> v<span class="hl sym">)</span>
   <span class="hl kwa">end</span>

<span class="hl kwa">val</span> n <span class="hl sym">=</span> valOf <span class="hl sym">(</span><span class="hl kwa">Int</span>.fromString <span class="hl sym">(</span>hd <span class="hl sym">(</span>CommandLine.arguments <span class="hl sym">())))</span> <span class="hl kwa">handle</span> _ <span class="hl sym">=&gt;</span> <span class="hl num">1</span>
<span class="hl kwa">val</span> u <span class="hl sym">=</span> Array.array <span class="hl sym">(</span>n<span class="hl sym">,</span> <span class="hl num">1.0</span><span class="hl sym">)</span>
<span class="hl kwa">val</span> v <span class="hl sym">=</span> Array.array <span class="hl sym">(</span>n<span class="hl sym">,</span> <span class="hl num">0.0</span><span class="hl sym">)</span>
<span class="hl kwa">val</span> <span class="hl sym">() =</span> for <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">10</span><span class="hl sym">,</span> <span class="hl kwa">fn</span> _ <span class="hl sym">=&gt; (</span>eval_AtA_times_u <span class="hl sym">(</span>u<span class="hl sym">,</span> v<span class="hl sym">);</span> eval_AtA_times_u <span class="hl sym">(</span>v<span class="hl sym">,</span> u<span class="hl sym">)))</span>

<span class="hl kwa">val</span> vv <span class="hl sym">=</span> ref <span class="hl num">0.0</span>
<span class="hl kwa">val</span> vBv <span class="hl sym">=</span> ref <span class="hl num">0.0</span>
<span class="hl kwa">val</span> <span class="hl sym">() =</span>
   for <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl kwa">fn</span> i <span class="hl sym">=&gt;</span>
	<span class="hl sym">(</span>vv <span class="hl sym">:= !</span>vv <span class="hl sym">+</span> sub <span class="hl sym">(</span>v<span class="hl sym">,</span> i<span class="hl sym">) *</span> sub <span class="hl sym">(</span>v<span class="hl sym">,</span> i<span class="hl sym">)</span>
	<span class="hl sym">;</span> vBv <span class="hl sym">:= !</span>vBv <span class="hl sym">+</span> sub <span class="hl sym">(</span>u<span class="hl sym">,</span> i<span class="hl sym">) *</span> sub <span class="hl sym">(</span>v<span class="hl sym">,</span> i<span class="hl sym">)))</span>

<span class="hl kwa">val</span> <span class="hl sym">() =</span> print <span class="hl sym">(</span>concat <span class="hl sym">[</span><span class="hl kwa">Real</span>.fmt <span class="hl sym">(</span><span class="hl kwa">StringCvt</span>.FIX <span class="hl sym">(</span>SOME <span class="hl num">9</span><span class="hl sym">))</span>
			<span class="hl sym">(</span><span class="hl kwa">Real</span>.Math.sqrt <span class="hl sym">(!</span>vBv <span class="hl sym">/ !</span>vv<span class="hl sym">)),</span>
			<span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">])</span>
