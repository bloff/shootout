<span class="hl com">(* regexdna.ml</span>
<span class="hl com"> *</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Contributed by Christophe TROESTLER</span>
<span class="hl com"> * Parallelized by Jon Harrop</span>
<span class="hl com"> * Modified by Mauricio Fernandez</span>
<span class="hl com"> *)</span>

<span class="hl kwa">open</span> <span class="hl kwd">Printf</span>

<span class="hl com">(* semi-standard function for process-based parallelism *)</span>
<span class="hl kwa">let</span> invoke <span class="hl sym">(</span>f <span class="hl sym">:</span> <span class="hl kwb">'a</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">'b</span><span class="hl sym">)</span> x <span class="hl sym">:</span> <span class="hl kwb">unit</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">'b</span> <span class="hl sym">=</span>
  <span class="hl kwa">let</span> input<span class="hl sym">,</span> output <span class="hl sym">=</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>pipe<span class="hl sym">()</span> <span class="hl kwa">in</span>
  <span class="hl kwa">match</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>fork<span class="hl sym">()</span> <span class="hl kwa">with</span>
  <span class="hl sym">| -</span><span class="hl num">1</span> <span class="hl sym">-&gt;</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>close input<span class="hl sym">;</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>close output<span class="hl sym">; (</span><span class="hl kwa">let</span> v <span class="hl sym">=</span> f x <span class="hl kwa">in fun</span> <span class="hl sym">() -&gt;</span> v<span class="hl sym">)</span>
  <span class="hl sym">|</span> <span class="hl num">0</span> <span class="hl sym">-&gt;</span>
      <span class="hl kwc">Unix</span><span class="hl sym">.</span>close input<span class="hl sym">;</span>
      <span class="hl kwa">let</span> output <span class="hl sym">=</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>out_channel_of_descr output <span class="hl kwa">in</span>
        <span class="hl kwc">Marshal</span><span class="hl sym">.</span>to_channel output <span class="hl sym">(</span><span class="hl kwa">try</span> `<span class="hl kwd">Res</span><span class="hl sym">(</span>f x<span class="hl sym">)</span> <span class="hl kwa">with</span> e <span class="hl sym">-&gt;</span> `<span class="hl kwd">Exn</span> e<span class="hl sym">) [];</span>
        close_out output<span class="hl sym">;</span>
        exit <span class="hl num">0</span>
  <span class="hl sym">|</span> pid <span class="hl sym">-&gt;</span>
      <span class="hl kwc">Unix</span><span class="hl sym">.</span>close output<span class="hl sym">;</span>
      <span class="hl kwa">let</span> input <span class="hl sym">=</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>in_channel_of_descr input <span class="hl kwa">in fun</span> <span class="hl sym">() -&gt;</span>
        <span class="hl kwa">let</span> v <span class="hl sym">=</span> <span class="hl kwc">Marshal</span><span class="hl sym">.</span>from_channel input <span class="hl kwa">in</span>
        ignore <span class="hl sym">(</span><span class="hl kwc">Unix</span><span class="hl sym">.</span>waitpid <span class="hl sym">[]</span> pid<span class="hl sym">);</span>
        close_in input<span class="hl sym">;</span>
        <span class="hl kwa">match</span> v <span class="hl kwa">with</span> `<span class="hl kwd">Res</span> x <span class="hl sym">-&gt;</span> x <span class="hl sym">|</span> `<span class="hl kwd">Exn</span> e <span class="hl sym">-&gt;</span> raise e

<span class="hl com">(* This module is a workaround for a bug in the Str library from the Ocaml</span>
<span class="hl com"> * distribution used in the Computer Language Benchmarks Game. It can be removed</span>
<span class="hl com"> * altogether when using OCaml 3.11 *)</span>
<span class="hl kwa">module</span> <span class="hl kwd">Str</span> <span class="hl sym">=</span>
<span class="hl kwa">struct</span>
  <span class="hl kwa">include</span> <span class="hl kwd">Str</span>

  <span class="hl kwa">let</span> substitute_first expr repl_fun text <span class="hl sym">=</span>
    <span class="hl kwa">try</span>
      <span class="hl kwa">let</span> pos <span class="hl sym">=</span> <span class="hl kwc">Str</span><span class="hl sym">.</span>search_forward expr text <span class="hl num">0</span> <span class="hl kwa">in</span>
      <span class="hl kwc">String</span><span class="hl sym">.</span>concat <span class="hl str">&quot;&quot;</span> <span class="hl sym">[</span><span class="hl kwc">Str</span><span class="hl sym">.</span>string_before text pos<span class="hl sym">;</span>
                        repl_fun text<span class="hl sym">;</span>
                        <span class="hl kwc">Str</span><span class="hl sym">.</span>string_after text <span class="hl sym">(</span><span class="hl kwc">Str</span><span class="hl sym">.</span>match_end<span class="hl sym">())]</span>
    <span class="hl kwa">with</span> <span class="hl kwd">Not_found</span> <span class="hl sym">-&gt;</span>
      text

  <span class="hl kwa">let</span> opt_search_forward re s pos <span class="hl sym">=</span>
    <span class="hl kwa">try</span> <span class="hl kwd">Some</span><span class="hl sym">(</span><span class="hl kwc">Str</span><span class="hl sym">.</span>search_forward re s pos<span class="hl sym">)</span> <span class="hl kwa">with</span> <span class="hl kwd">Not_found</span> <span class="hl sym">-&gt;</span> <span class="hl kwd">None</span>

  <span class="hl kwa">let</span> global_substitute expr repl_fun text <span class="hl sym">=</span>
    <span class="hl kwa">let rec</span> replace accu start last_was_empty <span class="hl sym">=</span>
      <span class="hl kwa">let</span> startpos <span class="hl sym">=</span> <span class="hl kwa">if</span> last_was_empty <span class="hl kwa">then</span> start <span class="hl sym">+</span> <span class="hl num">1</span> <span class="hl kwa">else</span> start <span class="hl kwa">in</span>
      <span class="hl kwa">if</span> startpos <span class="hl sym">&gt;</span> <span class="hl kwc">String</span><span class="hl sym">.</span>length text <span class="hl kwa">then</span>
        <span class="hl kwc">Str</span><span class="hl sym">.</span>string_after text start <span class="hl sym">::</span> accu
      <span class="hl kwa">else</span>
        <span class="hl kwa">match</span> opt_search_forward expr text startpos <span class="hl kwa">with</span>
        <span class="hl sym">|</span> <span class="hl kwd">None</span> <span class="hl sym">-&gt;</span>
            <span class="hl kwc">Str</span><span class="hl sym">.</span>string_after text start <span class="hl sym">::</span> accu
        <span class="hl sym">|</span> <span class="hl kwd">Some</span> pos <span class="hl sym">-&gt;</span>
            <span class="hl kwa">let</span> end_pos <span class="hl sym">=</span> <span class="hl kwc">Str</span><span class="hl sym">.</span>match_end<span class="hl sym">()</span> <span class="hl kwa">in</span>
            <span class="hl kwa">let</span> repl_text <span class="hl sym">=</span> repl_fun text <span class="hl kwa">in</span>
            replace <span class="hl sym">(</span>repl_text <span class="hl sym">::</span> <span class="hl kwc">String</span><span class="hl sym">.</span>sub text start <span class="hl sym">(</span>pos<span class="hl sym">-</span>start<span class="hl sym">) ::</span> accu<span class="hl sym">)</span>
                    end_pos <span class="hl sym">(</span>end_pos <span class="hl sym">=</span> pos<span class="hl sym">)</span>
    <span class="hl kwa">in</span>
      <span class="hl kwc">String</span><span class="hl sym">.</span>concat <span class="hl str">&quot;&quot;</span> <span class="hl sym">(</span><span class="hl kwc">List</span><span class="hl sym">.</span>rev <span class="hl sym">(</span>replace <span class="hl sym">[]</span> <span class="hl num">0</span> <span class="hl kwa">false</span><span class="hl sym">))</span>

  <span class="hl kwa">let</span> global_replace expr repl text <span class="hl sym">=</span>
    global_substitute expr <span class="hl sym">(</span><span class="hl kwc">Str</span><span class="hl sym">.</span>replace_matched repl<span class="hl sym">)</span> text
  <span class="hl kwa">and</span> replace_first expr repl text <span class="hl sym">=</span>
    substitute_first expr <span class="hl sym">(</span><span class="hl kwc">Str</span><span class="hl sym">.</span>replace_matched repl<span class="hl sym">)</span> text
<span class="hl kwa">end</span>

<span class="hl kwa">let</span> variants <span class="hl sym">= [</span><span class="hl str">&quot;agggtaaa</span><span class="hl esc">\\</span><span class="hl str">|tttaccct&quot;</span><span class="hl sym">;</span>          <span class="hl str">&quot;[cgt]gggtaaa</span><span class="hl esc">\\</span><span class="hl str">|tttaccc[acg]&quot;</span><span class="hl sym">;</span>
                <span class="hl str">&quot;a[act]ggtaaa</span><span class="hl esc">\\</span><span class="hl str">|tttacc[agt]t&quot;</span><span class="hl sym">;</span>  <span class="hl str">&quot;ag[act]gtaaa</span><span class="hl esc">\\</span><span class="hl str">|tttac[agt]ct&quot;</span><span class="hl sym">;</span>
                <span class="hl str">&quot;agg[act]taaa</span><span class="hl esc">\\</span><span class="hl str">|ttta[agt]cct&quot;</span><span class="hl sym">;</span>  <span class="hl str">&quot;aggg[acg]aaa</span><span class="hl esc">\\</span><span class="hl str">|ttt[cgt]ccct&quot;</span><span class="hl sym">;</span>
                <span class="hl str">&quot;agggt[cgt]aa</span><span class="hl esc">\\</span><span class="hl str">|tt[acg]accct&quot;</span><span class="hl sym">;</span>  <span class="hl str">&quot;agggta[cgt]a</span><span class="hl esc">\\</span><span class="hl str">|t[acg]taccct&quot;</span><span class="hl sym">;</span>
                <span class="hl str">&quot;agggtaa[cgt]</span><span class="hl esc">\\</span><span class="hl str">|[acg]ttaccct&quot;</span><span class="hl sym">]</span>

<span class="hl com">(* Remove the &quot;\\&quot; which is mandatory in OCaml regex. *)</span>
<span class="hl kwa">let</span> re_bs <span class="hl sym">=</span> <span class="hl kwc">Str</span><span class="hl sym">.</span>regexp_string <span class="hl str">&quot;</span><span class="hl esc">\\</span><span class="hl str">&quot;</span>
<span class="hl kwa">let</span> to_string <span class="hl sym">=</span> <span class="hl kwc">Str</span><span class="hl sym">.</span>global_replace re_bs <span class="hl str">&quot;&quot;</span>

<span class="hl kwa">let</span> subst <span class="hl sym">= [</span><span class="hl str">&quot;B&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl sym">;</span> <span class="hl str">&quot;D&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl sym">;</span>   <span class="hl str">&quot;H&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl sym">;</span> <span class="hl str">&quot;K&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(g|t)&quot;</span><span class="hl sym">;</span>
             <span class="hl str">&quot;M&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c)&quot;</span><span class="hl sym">;</span>   <span class="hl str">&quot;N&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl sym">;</span> <span class="hl str">&quot;R&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|g)&quot;</span><span class="hl sym">;</span>   <span class="hl str">&quot;S&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|g)&quot;</span><span class="hl sym">;</span>
             <span class="hl str">&quot;V&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl sym">;</span> <span class="hl str">&quot;W&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|t)&quot;</span><span class="hl sym">;</span>     <span class="hl str">&quot;Y&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|t)&quot;</span><span class="hl sym">]</span>

<span class="hl com">(* Read all of a redirected FASTA format file from stdin. *)</span>
<span class="hl kwa">let</span> file_data<span class="hl sym">,</span> file_length <span class="hl sym">=</span>
  <span class="hl kwa">let</span> b <span class="hl sym">=</span> <span class="hl kwc">Buffer</span><span class="hl sym">.</span>create <span class="hl num">0xFFFF</span> <span class="hl kwa">and</span> s <span class="hl sym">=</span> <span class="hl kwc">String</span><span class="hl sym">.</span>create <span class="hl num">0xFFF</span> <span class="hl kwa">and</span> r <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">1</span> <span class="hl kwa">in</span>
  <span class="hl kwa">while</span> <span class="hl sym">!</span>r <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">do</span>
    r <span class="hl sym">:=</span> input stdin s <span class="hl num">0 0xFFF</span><span class="hl sym">;</span>   <span class="hl kwc">Buffer</span><span class="hl sym">.</span>add_substring b s <span class="hl num">0</span> <span class="hl sym">!</span>r
  <span class="hl kwa">done</span><span class="hl sym">;</span>
  <span class="hl kwc">Buffer</span><span class="hl sym">.</span>contents b<span class="hl sym">,</span> <span class="hl kwc">Buffer</span><span class="hl sym">.</span>length b

<span class="hl com">(* Remove FASTA sequence descriptions and all linefeed characters.  *)</span>
<span class="hl kwa">let</span> dna <span class="hl sym">=</span> <span class="hl kwc">Str</span><span class="hl sym">.</span>global_replace <span class="hl sym">(</span><span class="hl kwc">Str</span><span class="hl sym">.</span>regexp <span class="hl str">&quot;^&gt;.*$</span><span class="hl esc">\\</span><span class="hl str">|</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span> <span class="hl str">&quot;&quot;</span> file_data
<span class="hl kwa">let</span> code_length <span class="hl sym">=</span> <span class="hl kwc">String</span><span class="hl sym">.</span>length dna

<span class="hl com">(* Count matches of [re]. *)</span>
<span class="hl kwa">let</span> count re s <span class="hl sym">=</span>
  <span class="hl kwa">let</span> re <span class="hl sym">=</span> <span class="hl kwc">Str</span><span class="hl sym">.</span>regexp_case_fold re <span class="hl kwa">and</span> i <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">and</span> n <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">in</span>
  <span class="hl kwa">try</span>
    <span class="hl kwa">while true do</span> i <span class="hl sym">:=</span> <span class="hl num">1</span> <span class="hl sym">+</span> <span class="hl kwc">Str</span><span class="hl sym">.</span>search_forward re s <span class="hl sym">!</span>i<span class="hl sym">;</span> incr n <span class="hl kwa">done</span><span class="hl sym">;</span> <span class="hl kwa">assert false</span>
  <span class="hl kwa">with</span> <span class="hl kwd">Not_found</span> <span class="hl sym">-&gt; !</span>n


<span class="hl kwa">let</span> <span class="hl sym">() =</span>
  <span class="hl kwc">List</span><span class="hl sym">.</span>iter <span class="hl sym">(</span><span class="hl kwa">fun</span> f <span class="hl sym">-&gt;</span> print_endline<span class="hl sym">(</span>f<span class="hl sym">()))</span>
    <span class="hl sym">(</span><span class="hl kwc">List</span><span class="hl sym">.</span>map
       <span class="hl sym">(</span>invoke
	  <span class="hl sym">(</span><span class="hl kwa">fun</span> re <span class="hl sym">-&gt;</span> sprintf <span class="hl str">&quot;%s %i&quot;</span> <span class="hl sym">(</span>to_string re<span class="hl sym">) (</span>count re dna<span class="hl sym">)))</span>
       variants<span class="hl sym">);</span>
  <span class="hl kwa">let</span> b <span class="hl sym">=</span> <span class="hl kwb">ref</span> dna <span class="hl kwa">in</span>
  <span class="hl kwc">List</span><span class="hl sym">.</span>iter <span class="hl sym">(</span><span class="hl kwa">fun</span> <span class="hl sym">(</span>re<span class="hl sym">,</span> s<span class="hl sym">) -&gt;</span>
               b <span class="hl sym">:=</span> <span class="hl kwc">Str</span><span class="hl sym">.</span>global_replace <span class="hl sym">(</span><span class="hl kwc">Str</span><span class="hl sym">.</span>regexp_case_fold re<span class="hl sym">)</span> s <span class="hl sym">!</span>b<span class="hl sym">)</span> subst<span class="hl sym">;</span>
  printf <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">%i</span><span class="hl esc">\n</span><span class="hl str">%i</span><span class="hl esc">\n</span><span class="hl str">%i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> file_length code_length <span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">.</span>length <span class="hl sym">!</span>b<span class="hl sym">)</span>
