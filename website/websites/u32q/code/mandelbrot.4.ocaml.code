<span class="hl com">(*</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Contributed by Christophe TROESTLER</span>
<span class="hl com"> * Enhanced by Christian Szegedy, Yaron Minsky.</span>
<span class="hl com"> * Optimized &amp; parallelized by Mauricio Fernandez.</span>
<span class="hl com"> * modified by Zhou Shuchang.</span>
<span class="hl com"> *)</span>

<span class="hl kwa">let</span> nworkers <span class="hl sym">=</span> <span class="hl num">16</span>
<span class="hl kwa">let</span> niter <span class="hl sym">=</span> <span class="hl num">50</span>
<span class="hl kwa">let</span> limit <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">.</span>

<span class="hl kwa">type</span> complex <span class="hl sym">= {</span> <span class="hl kwa">mutable</span> r<span class="hl sym">:</span> <span class="hl kwb">float</span><span class="hl sym">;</span> <span class="hl kwa">mutable</span> i<span class="hl sym">:</span> <span class="hl kwb">float</span> <span class="hl sym">}</span>

<span class="hl com">(* semi-standard function for parallelism *)</span>
<span class="hl kwa">let</span> invoke <span class="hl sym">(</span>f <span class="hl sym">:</span> <span class="hl kwb">'a</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">'b</span><span class="hl sym">)</span> x <span class="hl sym">:</span> <span class="hl kwb">unit</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">'b</span> <span class="hl sym">=</span>
  <span class="hl kwa">let</span> input<span class="hl sym">,</span> output <span class="hl sym">=</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>pipe<span class="hl sym">()</span> <span class="hl kwa">in</span>
  <span class="hl kwa">match</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>fork<span class="hl sym">()</span> <span class="hl kwa">with</span>
  <span class="hl sym">| -</span><span class="hl num">1</span> <span class="hl sym">-&gt;</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>close input<span class="hl sym">;</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>close output<span class="hl sym">; (</span><span class="hl kwa">let</span> v <span class="hl sym">=</span> f x <span class="hl kwa">in fun</span> <span class="hl sym">() -&gt;</span> v<span class="hl sym">)</span>
  <span class="hl sym">|</span> <span class="hl num">0</span> <span class="hl sym">-&gt;</span>
      <span class="hl kwc">Unix</span><span class="hl sym">.</span>close input<span class="hl sym">;</span>
      <span class="hl kwa">let</span> output <span class="hl sym">=</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>out_channel_of_descr output <span class="hl kwa">in</span>
        <span class="hl kwc">Marshal</span><span class="hl sym">.</span>to_channel output <span class="hl sym">(</span><span class="hl kwa">try</span> `<span class="hl kwd">Res</span><span class="hl sym">(</span>f x<span class="hl sym">)</span> <span class="hl kwa">with</span> e <span class="hl sym">-&gt;</span> `<span class="hl kwd">Exn</span> e<span class="hl sym">) [];</span>
        close_out output<span class="hl sym">;</span>
        exit <span class="hl num">0</span>
  <span class="hl sym">|</span> pid <span class="hl sym">-&gt;</span>
      <span class="hl kwc">Unix</span><span class="hl sym">.</span>close output<span class="hl sym">;</span>
      <span class="hl kwa">let</span> input <span class="hl sym">=</span> <span class="hl kwc">Unix</span><span class="hl sym">.</span>in_channel_of_descr input <span class="hl kwa">in fun</span> <span class="hl sym">() -&gt;</span>
        <span class="hl kwa">let</span> v <span class="hl sym">=</span> <span class="hl kwc">Marshal</span><span class="hl sym">.</span>from_channel input <span class="hl kwa">in</span>
        ignore <span class="hl sym">(</span><span class="hl kwc">Unix</span><span class="hl sym">.</span>waitpid <span class="hl sym">[]</span> pid<span class="hl sym">);</span>
        close_in input<span class="hl sym">;</span>
        <span class="hl kwa">match</span> v <span class="hl kwa">with</span> `<span class="hl kwd">Res</span> x <span class="hl sym">-&gt;</span> x <span class="hl sym">|</span> `<span class="hl kwd">Exn</span> e <span class="hl sym">-&gt;</span> raise e

<span class="hl kwa">let</span> <span class="hl sym">() =</span>
  <span class="hl kwa">let</span> w <span class="hl sym">=</span> int_of_string<span class="hl sym">(</span><span class="hl kwc">Array</span><span class="hl sym">.</span>get <span class="hl kwc">Sys</span><span class="hl sym">.</span>argv <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> h <span class="hl sym">=</span> w <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> fw <span class="hl sym">=</span> <span class="hl kwb">float</span> w <span class="hl kwa">and</span> fh <span class="hl sym">=</span> <span class="hl kwb">float</span> h <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> z <span class="hl sym">= {</span>r<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">.;</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">.;}</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> limit2 <span class="hl sym">=</span> limit <span class="hl sym">*.</span> limit <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> byte <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">in</span>

  <span class="hl kwa">let</span> mandelbrot <span class="hl sym">(</span>ymin<span class="hl sym">,</span> ymax<span class="hl sym">) =</span>
    <span class="hl kwa">let</span> b <span class="hl sym">=</span> <span class="hl kwc">Buffer</span><span class="hl sym">.</span>create <span class="hl sym">(((</span>ymax <span class="hl sym">-</span> ymin <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">) *</span> w <span class="hl sym">+</span> <span class="hl num">7</span><span class="hl sym">) /</span> <span class="hl num">8</span><span class="hl sym">)</span> <span class="hl kwa">in</span>
    <span class="hl kwa">for</span> y <span class="hl sym">=</span> ymin <span class="hl kwa">to</span> ymax <span class="hl kwa">do</span>
      <span class="hl kwa">let</span> ci <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">. *.</span> <span class="hl kwb">float</span> y <span class="hl sym">/.</span> fh <span class="hl sym">-.</span> <span class="hl num">1</span><span class="hl sym">.</span> <span class="hl kwa">in</span>
        <span class="hl kwa">for</span> x <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> w <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl kwa">do</span>
          <span class="hl kwa">let</span> cr <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">. *.</span> <span class="hl kwb">float</span> x <span class="hl sym">/.</span> fw <span class="hl sym">-.</span> <span class="hl num">1.5</span> <span class="hl kwa">in</span>
            z<span class="hl sym">.</span>r <span class="hl sym">&lt;-</span> <span class="hl num">0</span><span class="hl sym">.;</span> z<span class="hl sym">.</span>i <span class="hl sym">&lt;-</span> <span class="hl num">0</span><span class="hl sym">.;</span>
            <span class="hl kwa">let</span> t <span class="hl sym">= {</span>r <span class="hl sym">=</span> z<span class="hl sym">.</span>r <span class="hl sym">*.</span> z<span class="hl sym">.</span>r<span class="hl sym">;</span> i <span class="hl sym">=</span> z<span class="hl sym">.</span>i <span class="hl sym">*.</span> z<span class="hl sym">.</span>i<span class="hl sym">}</span> <span class="hl kwa">in</span>
            <span class="hl kwa">let</span> bit <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">1</span> <span class="hl kwa">and</span> i <span class="hl sym">=</span> <span class="hl kwb">ref</span> niter <span class="hl kwa">in</span>
              <span class="hl kwa">while</span> <span class="hl sym">!</span>i <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">do</span>
                <span class="hl kwa">let</span> zr <span class="hl sym">=</span> z<span class="hl sym">.</span>r <span class="hl kwa">and</span> zi <span class="hl sym">=</span> z<span class="hl sym">.</span>i <span class="hl kwa">in</span>
                <span class="hl kwa">let</span> zi <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">. *.</span> zr <span class="hl sym">*.</span> zi <span class="hl sym">+.</span> ci <span class="hl kwa">and</span> zr <span class="hl sym">=</span> t<span class="hl sym">.</span>r <span class="hl sym">-.</span> t<span class="hl sym">.</span>i<span class="hl com">(*zr *. zr -. zi *. zi*)</span> <span class="hl sym">+.</span> cr <span class="hl kwa">in</span>
                  z<span class="hl sym">.</span>r <span class="hl sym">&lt;-</span> zr<span class="hl sym">;</span>
                  z<span class="hl sym">.</span>i <span class="hl sym">&lt;-</span> zi<span class="hl sym">;</span>
                  t<span class="hl sym">.</span>r <span class="hl sym">&lt;-</span> zr <span class="hl sym">*.</span> zr<span class="hl sym">;</span>
                  t<span class="hl sym">.</span>i <span class="hl sym">&lt;-</span> zi <span class="hl sym">*.</span> zi<span class="hl sym">;</span>
                  decr i<span class="hl sym">;</span>
                  <span class="hl kwa">if</span> <span class="hl com">(*zr *. zr +. zi *. zi*)</span> t<span class="hl sym">.</span>r <span class="hl sym">+.</span> t<span class="hl sym">.</span>i <span class="hl sym">&gt;</span> limit2 <span class="hl kwa">then begin</span>
                    bit <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
                    i <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
                  <span class="hl kwa">end</span><span class="hl sym">;</span>
              <span class="hl kwa">done</span><span class="hl sym">;</span>
              byte <span class="hl sym">:= (!</span>byte <span class="hl kwa">lsl</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">lor</span> <span class="hl sym">!</span>bit<span class="hl sym">;</span>
              <span class="hl kwa">if</span> x <span class="hl kwa">land</span> <span class="hl num">0x7</span> <span class="hl sym">=</span> <span class="hl num">7</span> <span class="hl kwa">then</span> <span class="hl kwc">Buffer</span><span class="hl sym">.</span>add_char b <span class="hl sym">(</span><span class="hl kwc">Char</span><span class="hl sym">.</span>unsafe_chr <span class="hl sym">!</span>byte<span class="hl sym">);</span>
        <span class="hl kwa">done</span><span class="hl sym">;</span>
        <span class="hl kwa">if</span> w <span class="hl kwa">mod</span> <span class="hl num">8</span> <span class="hl sym">!=</span> <span class="hl num">0</span> <span class="hl kwa">then</span> <span class="hl com">(* the row doesnt divide evenly by 8*)</span>
          <span class="hl kwc">Buffer</span><span class="hl sym">.</span>add_char b <span class="hl sym">(</span><span class="hl kwc">Char</span><span class="hl sym">.</span>unsafe_chr <span class="hl sym">(!</span>byte <span class="hl kwa">lsl</span> <span class="hl sym">(</span><span class="hl num">8</span><span class="hl sym">-</span>w <span class="hl kwa">mod</span> <span class="hl num">8</span><span class="hl sym">)));</span>
        byte <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl kwa">done</span><span class="hl sym">;</span>
    <span class="hl kwc">Buffer</span><span class="hl sym">.</span>contents b <span class="hl kwa">in</span>

  <span class="hl kwa">let</span> dy <span class="hl sym">=</span> h <span class="hl sym">/</span> nworkers <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> y <span class="hl sym">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> rs <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>init <span class="hl sym">(</span>nworkers <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span>
             <span class="hl sym">(</span><span class="hl kwa">fun</span> _ <span class="hl sym">-&gt;</span> <span class="hl kwa">let</span> y'<span class="hl sym">= !</span>y <span class="hl sym">+</span> dy <span class="hl kwa">in let</span> r <span class="hl sym">= (!</span>y<span class="hl sym">,</span> y'<span class="hl sym">)</span> <span class="hl kwa">in</span> y <span class="hl sym">:=</span> y'<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">;</span> r<span class="hl sym">)</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> workers <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>map <span class="hl sym">(</span>invoke mandelbrot<span class="hl sym">) (</span><span class="hl kwc">Array</span><span class="hl sym">.</span>append rs <span class="hl sym">[|!</span>y<span class="hl sym">,</span> h<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">|])</span> <span class="hl kwa">in</span>
    <span class="hl kwc">Printf</span><span class="hl sym">.</span>printf <span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">%i %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> w h<span class="hl sym">;</span>
    <span class="hl kwc">Array</span><span class="hl sym">.</span>iter <span class="hl sym">(</span><span class="hl kwa">fun</span> w <span class="hl sym">-&gt;</span> output_string stdout <span class="hl sym">(</span>w <span class="hl sym">()))</span> workers
