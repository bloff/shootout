<span class="hl com">{-# OPTIONS -fvia-C -fexcess-precision #-}</span> <span class="hl com">{-# LANGUAGE BangPatterns #-}</span>
<span class="hl slc">--</span>
<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Modified by Ryan Trinkle: 1) change from divInt# to uncheckedIShiftRA#</span>
<span class="hl slc">--                           2) changed -optc-O to -optc-O3</span>
<span class="hl slc">--                           3) added -optc-ffast-math</span>
<span class="hl slc">-- Translation from Clean by Don Stewart</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Should be compiled with:</span>
<span class="hl slc">--      -O -fglasgow-exts -fbang-patterns</span>
<span class="hl slc">--      -optc-O3 -optc-march=pentium4 -optc-mfpmath=sse -optc-msse2 -optc-ffast-math</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Note: The following flags appear to INCREASE running time:</span>
<span class="hl slc">--      -O2 -optc-funroll-loops</span>

import System
import Foreign.Marshal.Array
import Foreign
import Text.Printf
import Control.Monad
import Data.ByteString.Internal

import GHC.Base
import GHC.Float
import GHC.Int

type Reals <span class="hl sym">=</span> Ptr Double

main <span class="hl sym">=</span> do
    n <span class="hl sym">&lt;-</span> getArgs <span class="hl sym">&gt;&gt;=</span> readIO . head

    u <span class="hl sym">&lt;-</span> mallocArray n <span class="hl sym">::</span> IO Reals
    forM_ <span class="hl sym">[</span><span class="hl num">0</span>..n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">]</span> $ \i <span class="hl sym">-&gt;</span> pokeElemOff u i <span class="hl num">1</span>
    v <span class="hl sym">&lt;-</span> mallocArray n <span class="hl sym">::</span> IO Reals
    forM_ <span class="hl sym">[</span><span class="hl num">0</span>..n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">]</span> $ \i <span class="hl sym">-&gt;</span> pokeElemOff v i <span class="hl num">0</span>

    powerMethod <span class="hl num">10</span> n u v
    printf <span class="hl str">&quot;%.9f\n&quot;</span> <span class="hl sym">(</span>eigenvalue n u v <span class="hl num">0 0 0</span><span class="hl sym">)</span>

<span class="hl slc">------------------------------------------------------------------------</span>

eigenvalue <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Reals <span class="hl sym">-&gt;</span> Reals <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Double <span class="hl sym">-&gt;</span> Double <span class="hl sym">-&gt;</span> Double
eigenvalue <span class="hl sym">!</span>n <span class="hl sym">!</span>u <span class="hl sym">!</span>v <span class="hl sym">!</span>i <span class="hl sym">!</span>vBv <span class="hl sym">!</span>vv
    <span class="hl sym">|</span> i <span class="hl sym">&lt;</span> n     <span class="hl sym">=</span> eigenvalue n u v <span class="hl sym">(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) (</span>vBv <span class="hl sym">+</span> ui <span class="hl sym">*</span> vi<span class="hl sym">) (</span>vv <span class="hl sym">+</span> vi <span class="hl sym">*</span> vi<span class="hl sym">)</span>
    <span class="hl sym">|</span> otherwise <span class="hl sym">=</span> sqrt $<span class="hl sym">!</span> vBv <span class="hl sym">/</span> vv
    where
       ui <span class="hl sym">=</span> inlinePerformIO <span class="hl sym">(</span>peekElemOff u i<span class="hl sym">)</span>
       vi <span class="hl sym">=</span> inlinePerformIO <span class="hl sym">(</span>peekElemOff v i<span class="hl sym">)</span>

<span class="hl slc">------------------------------------------------------------------------</span>

powerMethod <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Reals <span class="hl sym">-&gt;</span> Reals <span class="hl sym">-&gt;</span> IO <span class="hl sym">()</span>
powerMethod <span class="hl sym">!</span>i <span class="hl sym">!</span>n <span class="hl sym">!</span>u <span class="hl sym">!</span>v <span class="hl sym">=</span> allocaArray n $ \t <span class="hl sym">-&gt;</span>
    replicateM_ i $ timesAtAv t n u v <span class="hl sym">&gt;&gt;</span> timesAtAv t n v u

<span class="hl slc">-- multiply vector v by matrix A and then by matrix A transposed</span>
timesAtAv <span class="hl sym">::</span> Reals <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Reals <span class="hl sym">-&gt;</span> Reals <span class="hl sym">-&gt;</span> IO <span class="hl sym">()</span>
timesAtAv <span class="hl sym">!</span>t <span class="hl sym">!</span>n <span class="hl sym">!</span>u <span class="hl sym">!</span>atau <span class="hl sym">=</span> do
    timesAv  n u t
    timesAtv n t atau

timesAv <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Reals <span class="hl sym">-&gt;</span> Reals <span class="hl sym">-&gt;</span> IO <span class="hl sym">()</span>
timesAv <span class="hl sym">!</span>n <span class="hl sym">!</span>u <span class="hl sym">!</span>au <span class="hl sym">=</span> go <span class="hl num">0</span>
  where
    go <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> IO <span class="hl sym">()</span>
    go <span class="hl sym">!</span>i <span class="hl sym">=</span> when <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> n<span class="hl sym">)</span> $ do
        pokeElemOff au i <span class="hl sym">(</span>avsum i <span class="hl num">0 0</span><span class="hl sym">)</span>
        go <span class="hl sym">(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>

    avsum <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Double <span class="hl sym">-&gt;</span> Double
    avsum <span class="hl sym">!</span>i <span class="hl sym">!</span>j <span class="hl sym">!</span>acc
        <span class="hl sym">|</span> j <span class="hl sym">&lt;</span> n <span class="hl sym">=</span> avsum i <span class="hl sym">(</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) (</span>acc <span class="hl sym">+ ((</span>aij i j<span class="hl sym">) *</span> uj<span class="hl sym">))</span>
        <span class="hl sym">|</span> otherwise <span class="hl sym">=</span> acc
        where uj <span class="hl sym">=</span> inlinePerformIO <span class="hl sym">(</span>peekElemOff u j<span class="hl sym">)</span>

timesAtv <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Reals <span class="hl sym">-&gt;</span> Reals <span class="hl sym">-&gt;</span> IO <span class="hl sym">()</span>
timesAtv <span class="hl sym">!</span>n <span class="hl sym">!</span>u <span class="hl sym">!</span>a <span class="hl sym">=</span> go <span class="hl num">0</span>
  where
    go <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> IO <span class="hl sym">()</span>
    go <span class="hl sym">!</span>i <span class="hl sym">=</span> when <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> n<span class="hl sym">)</span> $ do
        pokeElemOff a i <span class="hl sym">(</span>atvsum i <span class="hl num">0 0</span><span class="hl sym">)</span>
        go <span class="hl sym">(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>

    atvsum <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Double <span class="hl sym">-&gt;</span> Double
    atvsum <span class="hl sym">!</span>i <span class="hl sym">!</span>j <span class="hl sym">!</span>acc
        <span class="hl sym">|</span> j <span class="hl sym">&lt;</span> n     <span class="hl sym">=</span> atvsum i <span class="hl sym">(</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) (</span>acc <span class="hl sym">+ ((</span>aij j i<span class="hl sym">) *</span> uj<span class="hl sym">))</span>
        <span class="hl sym">|</span> otherwise <span class="hl sym">=</span> acc
        where uj <span class="hl sym">=</span> inlinePerformIO <span class="hl sym">(</span>peekElemOff u j<span class="hl sym">)</span>

<span class="hl slc">--</span>
<span class="hl slc">-- manually unbox the inner loop:</span>
<span class="hl slc">-- aij i j = 1 / fromIntegral ((i+j) * (i+j+1) `div` 2 + i + 1)</span>
<span class="hl slc">--</span>
aij <span class="hl sym">(</span>I# i<span class="hl sym">) (</span>I# j<span class="hl sym">) =</span> D# <span class="hl sym">(</span>
    case i <span class="hl sym">+</span># j of
        n <span class="hl sym">-&gt;</span> case n <span class="hl sym">*</span># <span class="hl sym">(</span>n<span class="hl sym">+</span>#<span class="hl num">1</span>#<span class="hl sym">)</span> of
                t <span class="hl sym">-&gt;</span> case t `uncheckedIShiftRA#` <span class="hl num">1</span># of
                        u <span class="hl sym">-&gt;</span> case u <span class="hl sym">+</span># <span class="hl sym">(</span>i <span class="hl sym">+</span># <span class="hl num">1</span>#<span class="hl sym">)</span> of
                                r <span class="hl sym">-&gt;</span> <span class="hl num">1.0</span>## <span class="hl sym">/</span>## <span class="hl sym">(</span>int2Double# r<span class="hl sym">))</span>
