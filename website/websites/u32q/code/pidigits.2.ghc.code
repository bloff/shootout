<span class="hl com">{-# OPTIONS -O2 -optc-O3 #-}</span>
<span class="hl slc">--</span>
<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">-- contributed by Arnaud Payement</span>
<span class="hl slc">--</span>

<span class="hl kwa">import</span> System

<span class="hl kwa">data</span> F <span class="hl sym">=</span> F Integer Integer Integer Integer

extract s<span class="hl sym">&#64;(</span>F k n a d<span class="hl sym">) = ((</span>n<span class="hl sym">*</span><span class="hl num">3</span><span class="hl sym">+</span>a<span class="hl sym">)</span> `div` d<span class="hl sym">, (</span>n<span class="hl sym">*</span><span class="hl num">4</span><span class="hl sym">+</span>a<span class="hl sym">)</span> `div` d<span class="hl sym">,</span> s<span class="hl sym">)</span>

update <span class="hl sym">(</span>F k n a d<span class="hl sym">) =</span> F <span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) (</span>n<span class="hl sym">*</span>k<span class="hl sym">) ((</span>a<span class="hl sym">+</span>n<span class="hl sym">*</span><span class="hl num">2</span><span class="hl sym">)*</span>y<span class="hl sym">) (</span>d<span class="hl sym">*</span>y<span class="hl sym">)</span> <span class="hl kwa">where</span> y <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">*</span>k<span class="hl sym">+</span><span class="hl num">1</span>

next state <span class="hl sym">=</span> <span class="hl kwa">let</span> <span class="hl sym">(</span>u<span class="hl sym">,</span> v<span class="hl sym">,</span> s'<span class="hl sym">&#64;(</span>F k n a d<span class="hl sym">)) =</span> extract <span class="hl sym">(</span>update state<span class="hl sym">)</span> <span class="hl kwa">in</span>
  if <span class="hl sym">(</span>n <span class="hl sym">&gt;</span> a <span class="hl sym">|| (</span>u <span class="hl sym">/=</span> v<span class="hl sym">))</span> <span class="hl kwa">then</span> next s' <span class="hl kwa">else</span> <span class="hl sym">(</span>show u<span class="hl sym">,</span> F k <span class="hl sym">(</span>n<span class="hl sym">*</span><span class="hl num">10</span><span class="hl sym">) ((</span>a<span class="hl sym">-</span>d<span class="hl sym">*</span>u<span class="hl sym">)*</span><span class="hl num">10</span><span class="hl sym">)</span> d<span class="hl sym">)</span>

digits <span class="hl sym">= (</span><span class="hl str">&quot;&quot;</span><span class="hl sym">, (</span>F <span class="hl num">1 1 0 1</span><span class="hl sym">)):[</span>next state <span class="hl sym">|</span> state <span class="hl sym">&lt;-</span> map snd digits<span class="hl sym">]</span>

pr <span class="hl sym">(</span>d<span class="hl sym">:</span>t<span class="hl sym">)</span> k n <span class="hl sym">|</span> k <span class="hl sym">&gt;</span> n <span class="hl sym">=</span> putStr <span class="hl str">&quot;&quot;</span>
             <span class="hl sym">|</span> k `mod` <span class="hl num">10</span> <span class="hl sym">/=</span> <span class="hl num">0</span> <span class="hl sym">=</span> putStr d <span class="hl sym">&gt;&gt;</span> pr t <span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span> n
			 <span class="hl sym">|</span> otherwise <span class="hl sym">=</span> putStrLn <span class="hl sym">(</span>d <span class="hl sym">++</span> <span class="hl str">&quot;\t:&quot;</span> <span class="hl sym">++</span> show k<span class="hl sym">) &gt;&gt;</span> pr t <span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span> n

main <span class="hl sym">=</span> pr <span class="hl sym">(</span>map fst <span class="hl sym">(</span>tail digits<span class="hl sym">))</span> <span class="hl num">1</span> . read . head <span class="hl sym">=&lt;&lt;</span> getArgs
