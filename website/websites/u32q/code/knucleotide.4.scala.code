<span class="hl com">/*</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> * contributed by Rex Kerr</span>
<span class="hl com"> * (based partially on the single-threaded version by Isaac Gouy</span>
<span class="hl com"> * with fixes from Iulian Dragos and Meiko Rachimow)</span>
<span class="hl com"> */</span>

<span class="hl kwa">import</span> java<span class="hl sym">.</span>io<span class="hl sym">.</span>_
<span class="hl kwa">import</span> scala<span class="hl sym">.</span>collection<span class="hl sym">.</span>mutable<span class="hl sym">.</span>_
<span class="hl kwa">import</span> scala<span class="hl sym">.</span>actors<span class="hl sym">.</span>_
<span class="hl kwa">import</span> Actor<span class="hl sym">.</span>loop

<span class="hl kwa">object</span> knucleotide <span class="hl sym">{</span>
  <span class="hl kwa">class</span> ShiftScan<span class="hl sym">(</span>offset<span class="hl sym">:</span>Int<span class="hl sym">,</span> stride<span class="hl sym">:</span>Int<span class="hl sym">)</span> <span class="hl kwa">extends</span> Actor <span class="hl sym">{</span>
    <span class="hl kwa">val</span> bag <span class="hl sym">=</span> <span class="hl kwa">new</span> HashBag
    <span class="hl kwa">def</span> findFreq<span class="hl sym">(</span>s<span class="hl sym">:</span><span class="hl kwc">String</span><span class="hl sym">,</span> j<span class="hl sym">:</span>Int<span class="hl sym">) = {</span>
      <span class="hl kwa">val</span> n <span class="hl sym">=</span> s<span class="hl sym">.</span>length <span class="hl sym">-</span> j <span class="hl sym">+</span> <span class="hl num">1</span>
      <span class="hl kwa">var</span> i <span class="hl sym">=</span> offset
      <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> n<span class="hl sym">) {</span>
        bag<span class="hl sym">(</span>s<span class="hl sym">.</span>substring<span class="hl sym">(</span>i<span class="hl sym">,</span>i<span class="hl sym">+</span>j<span class="hl sym">)).</span>inc
        i <span class="hl sym">+=</span> j
      <span class="hl sym">}</span>
      bag
    <span class="hl sym">}</span>
    <span class="hl kwa">def</span> act<span class="hl sym">() {</span> loop <span class="hl sym">{</span> react <span class="hl sym">{</span>
      <span class="hl kwa">case</span> seq <span class="hl sym">:</span> <span class="hl kwc">String</span> <span class="hl sym">=&gt;</span>
        sender <span class="hl sym">!</span> findFreq<span class="hl sym">(</span>seq<span class="hl sym">,</span>stride<span class="hl sym">)</span>
        exit
    <span class="hl sym">}}}</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">class</span> SizeScan<span class="hl sym">(</span>length<span class="hl sym">:</span>Int<span class="hl sym">,</span> boss<span class="hl sym">:</span>Actor<span class="hl sym">)</span> <span class="hl kwa">extends</span> Actor <span class="hl sym">{</span>
    <span class="hl kwa">var</span> bags <span class="hl sym">=</span> <span class="hl kwc">List</span><span class="hl sym">[</span>HashBag<span class="hl sym">]()</span>
    <span class="hl kwa">val</span> workers <span class="hl sym">= (</span><span class="hl num">0</span> until length<span class="hl sym">).</span>map<span class="hl sym">(</span><span class="hl kwa">new</span> ShiftScan<span class="hl sym">(</span>_<span class="hl sym">,</span>length<span class="hl sym">))</span>
    <span class="hl kwa">def</span> act<span class="hl sym">() {</span> loop <span class="hl sym">{</span> react <span class="hl sym">{</span>
      <span class="hl kwa">case</span> b <span class="hl sym">:</span> HashBag <span class="hl sym">=&gt;</span>
        bags <span class="hl sym">=</span> b <span class="hl sym">::</span> bags
        <span class="hl kwa">if</span> <span class="hl sym">(</span>bags<span class="hl sym">.</span>length<span class="hl sym">==</span>workers<span class="hl sym">.</span>length<span class="hl sym">) {</span>
          boss <span class="hl sym">! (</span>bags<span class="hl sym">.</span>head <span class="hl sym">/:</span> bags<span class="hl sym">.</span>tail<span class="hl sym">)(</span>_ <span class="hl sym">++</span> _<span class="hl sym">)</span>
          exit
        <span class="hl sym">}</span>
      <span class="hl kwa">case</span> seq <span class="hl sym">:</span> <span class="hl kwc">String</span> <span class="hl sym">=&gt;</span>
        workers<span class="hl sym">.</span>foreach<span class="hl sym">(</span>_<span class="hl sym">.</span>start <span class="hl sym">!</span> seq<span class="hl sym">)</span>
    <span class="hl sym">}}}</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">class</span> Scan<span class="hl sym">(</span>work <span class="hl sym">:</span> <span class="hl kwc">String</span><span class="hl sym">*)</span> <span class="hl kwa">extends</span> Actor <span class="hl sym">{</span>
    <span class="hl kwa">val</span> lengths <span class="hl sym">=</span> work<span class="hl sym">.</span>map<span class="hl sym">(</span>_<span class="hl sym">.</span>length<span class="hl sym">)</span>
    <span class="hl kwa">val</span> freqs <span class="hl sym">=</span> work<span class="hl sym">.</span>filter<span class="hl sym">(</span>_<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)==</span><span class="hl str">'*'</span><span class="hl sym">).</span>map<span class="hl sym">(</span>_<span class="hl sym">.</span>length<span class="hl sym">)</span>
    <span class="hl kwa">val</span> counts <span class="hl sym">=</span> work<span class="hl sym">.</span>filter<span class="hl sym">(</span>_<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)!=</span><span class="hl str">'*'</span><span class="hl sym">)</span>
    <span class="hl kwa">val</span> scans <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">HashMap</span><span class="hl sym">[</span>Int<span class="hl sym">,</span>HashBag<span class="hl sym">]()</span>
    <span class="hl kwa">var</span> seq_len <span class="hl sym">=</span> <span class="hl num">0</span>

    <span class="hl kwa">def</span> writeFreqs<span class="hl sym">(</span>j <span class="hl sym">:</span> Int<span class="hl sym">) {</span>
      <span class="hl kwa">val</span> n  <span class="hl sym">=</span> <span class="hl num">1.0</span> <span class="hl sym">+</span> seq_len <span class="hl sym">-</span> j
      <span class="hl kwa">val</span> sorted <span class="hl sym">=</span> scans<span class="hl sym">(</span>j<span class="hl sym">).</span>elements<span class="hl sym">.</span>toList<span class="hl sym">.</span>sort<span class="hl sym">(</span>
        <span class="hl sym">(</span>a<span class="hl sym">,</span>b<span class="hl sym">) =&gt; (</span>a<span class="hl sym">.</span>value<span class="hl sym">&gt;</span>b<span class="hl sym">.</span>value<span class="hl sym">) || (</span>a<span class="hl sym">.</span>value<span class="hl sym">==</span>b<span class="hl sym">.</span>value <span class="hl sym">&amp;&amp;</span> a<span class="hl sym">.</span>key <span class="hl sym">&gt;</span> b<span class="hl sym">.</span>key<span class="hl sym">)</span>
      <span class="hl sym">)</span>
      sorted<span class="hl sym">.</span>foreach<span class="hl sym">(</span>a <span class="hl sym">=&gt;</span> printf<span class="hl sym">(</span>a<span class="hl sym">.</span>key <span class="hl sym">+</span> <span class="hl str">&quot; %.3f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> a<span class="hl sym">.</span>value <span class="hl sym">*</span> <span class="hl num">100.0</span> <span class="hl sym">/</span> n<span class="hl sym">))</span>
      println
    <span class="hl sym">}</span>

    <span class="hl kwa">def</span> act<span class="hl sym">() {</span> loop <span class="hl sym">{</span> react <span class="hl sym">{</span>
      <span class="hl kwa">case</span> seq <span class="hl sym">:</span> <span class="hl kwc">String</span> <span class="hl sym">=&gt;</span>
        seq_len <span class="hl sym">=</span> seq<span class="hl sym">.</span>length
        lengths<span class="hl sym">.</span>foreach<span class="hl sym">(</span>l <span class="hl sym">=&gt;</span> <span class="hl kwa">new</span> SizeScan<span class="hl sym">(</span>l<span class="hl sym">,</span><span class="hl kwa">this</span><span class="hl sym">).</span>start<span class="hl sym">() !</span> seq<span class="hl sym">)</span>
      <span class="hl kwa">case</span> h <span class="hl sym">:</span> HashBag <span class="hl sym">=&gt;</span>
        <span class="hl kwa">val</span> n <span class="hl sym">=</span> h<span class="hl sym">.</span>elements<span class="hl sym">.</span>next<span class="hl sym">.</span>key<span class="hl sym">.</span>length
        scans<span class="hl sym">(</span>n<span class="hl sym">) =</span> h
        <span class="hl kwa">if</span> <span class="hl sym">(</span>lengths<span class="hl sym">.</span>forall<span class="hl sym">(</span>scans contains _<span class="hl sym">)) {</span>
          freqs<span class="hl sym">.</span>foreach<span class="hl sym">(</span>writeFreqs<span class="hl sym">(</span>_<span class="hl sym">))</span>
          counts<span class="hl sym">.</span>foreach<span class="hl sym">(</span>s <span class="hl sym">=&gt;</span> println<span class="hl sym">(</span>scans<span class="hl sym">(</span>s<span class="hl sym">.</span>length<span class="hl sym">)(</span>s<span class="hl sym">).</span>value <span class="hl sym">+</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">&quot;</span> <span class="hl sym">+</span> s<span class="hl sym">))</span>
          exit
        <span class="hl sym">}</span>
    <span class="hl sym">}}}</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">def</span> readSequence<span class="hl sym">(</span>id<span class="hl sym">:</span> <span class="hl kwc">String</span><span class="hl sym">,</span> r<span class="hl sym">:</span> <span class="hl kwc">BufferedReader</span><span class="hl sym">) = {</span>
    <span class="hl kwa">val</span> b <span class="hl sym">=</span> <span class="hl kwa">new</span> java<span class="hl sym">.</span>lang<span class="hl sym">.</span><span class="hl kwc">StringBuilder</span><span class="hl sym">()</span>

    <span class="hl kwa">var</span> line <span class="hl sym">=</span> r<span class="hl sym">.</span>readLine
    <span class="hl kwa">while</span> <span class="hl sym">(</span>line <span class="hl sym">!=</span> null<span class="hl sym">) {</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>line<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)==</span><span class="hl str">'&gt;'</span> <span class="hl sym">&amp;&amp;</span> line<span class="hl sym">.</span>startsWith<span class="hl sym">(</span>id<span class="hl sym">))</span> line <span class="hl sym">=</span> null
      <span class="hl kwa">else</span> line <span class="hl sym">=</span> r<span class="hl sym">.</span>readLine
    <span class="hl sym">}</span>

    line <span class="hl sym">=</span> r<span class="hl sym">.</span>readLine
    <span class="hl kwa">while</span> <span class="hl sym">(</span>line <span class="hl sym">!=</span> null<span class="hl sym">) {</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>line<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)==</span><span class="hl str">'&gt;'</span><span class="hl sym">)</span> line <span class="hl sym">=</span> null
      <span class="hl kwa">else</span> <span class="hl sym">{</span>
        b<span class="hl sym">.</span>append<span class="hl sym">(</span>line<span class="hl sym">.</span>toUpperCase<span class="hl sym">)</span>
        line <span class="hl sym">=</span> r<span class="hl sym">.</span>readLine
      <span class="hl sym">}</span>
    <span class="hl sym">}</span>
    b<span class="hl sym">.</span>toString
  <span class="hl sym">}</span>

  <span class="hl kwa">def</span> main<span class="hl sym">(</span>args<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">String</span><span class="hl sym">]) {</span>
    <span class="hl kwa">val</span> r <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">BufferedReader</span><span class="hl sym">(</span><span class="hl kwa">new</span> <span class="hl kwc">InputStreamReader</span><span class="hl sym">(</span><span class="hl kwc">System</span><span class="hl sym">.</span>in<span class="hl sym">))</span>
    <span class="hl kwa">val</span> seq <span class="hl sym">=</span> readSequence<span class="hl sym">(</span><span class="hl str">&quot;&gt;THREE&quot;</span><span class="hl sym">,</span>r<span class="hl sym">)</span>
    r<span class="hl sym">.</span>close

    <span class="hl kwa">val</span> scanner <span class="hl sym">=</span> <span class="hl kwa">new</span> Scan<span class="hl sym">(</span><span class="hl str">&quot;*&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;**&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;GGT&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;GGTA&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;GGTATT&quot;</span><span class="hl sym">,</span>
                           <span class="hl str">&quot;GGTATTTTAATT&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl sym">)</span>
    scanner<span class="hl sym">.</span>start<span class="hl sym">() !</span> seq
  <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwa">class</span> HashBag <span class="hl kwa">extends</span> HashTable<span class="hl sym">[</span><span class="hl kwc">String</span><span class="hl sym">] {</span>
  <span class="hl kwa">class</span> Counter<span class="hl sym">(</span><span class="hl kwa">val</span> key<span class="hl sym">:</span> <span class="hl kwc">String</span><span class="hl sym">,</span> <span class="hl kwa">var</span> value<span class="hl sym">:</span> Int<span class="hl sym">)</span>
        <span class="hl kwa">extends</span> HashEntry<span class="hl sym">[</span><span class="hl kwc">String</span><span class="hl sym">,</span>Counter<span class="hl sym">]</span>
  <span class="hl sym">{</span>
    <span class="hl kwa">def</span> inc <span class="hl sym">{</span> value <span class="hl sym">+=</span> <span class="hl num">1</span> <span class="hl sym">}</span>
    <span class="hl kwa">def</span> <span class="hl sym">+=(</span>i<span class="hl sym">:</span>Int<span class="hl sym">) {</span> value <span class="hl sym">+=</span> i <span class="hl sym">}</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">protected type</span> Entry <span class="hl sym">=</span> Counter
  <span class="hl kwa">protected def</span> entryKey<span class="hl sym">(</span>e<span class="hl sym">:</span> Entry<span class="hl sym">) =</span> e<span class="hl sym">.</span>key
  <span class="hl kwa">def</span> elements <span class="hl sym">=</span> entries

  <span class="hl kwa">def</span> apply<span class="hl sym">(</span>key<span class="hl sym">:</span><span class="hl kwc">String</span><span class="hl sym">):</span> Counter <span class="hl sym">= {</span>
    <span class="hl kwa">var</span> bucket <span class="hl sym">=</span> table<span class="hl sym">(</span>index<span class="hl sym">(</span>elemHashCode<span class="hl sym">(</span>key<span class="hl sym">))).</span>asInstanceOf<span class="hl sym">[</span>Entry<span class="hl sym">]</span>
    <span class="hl kwa">while</span> <span class="hl sym">(</span>bucket ne null<span class="hl sym">) {</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>elemEquals<span class="hl sym">(</span>entryKey<span class="hl sym">(</span>bucket<span class="hl sym">),</span>key<span class="hl sym">))</span> <span class="hl kwa">return</span> bucket
      bucket <span class="hl sym">=</span> bucket<span class="hl sym">.</span>next
    <span class="hl sym">}</span>
    bucket <span class="hl sym">=</span> <span class="hl kwa">new</span> Entry<span class="hl sym">(</span>key<span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">)</span>
    addEntry<span class="hl sym">(</span>bucket<span class="hl sym">)</span>
    bucket
  <span class="hl sym">}</span>

  <span class="hl kwa">def</span> <span class="hl sym">++(</span>h <span class="hl sym">:</span> HashBag<span class="hl sym">) :</span> HashBag <span class="hl sym">= {</span>
    h<span class="hl sym">.</span>elements<span class="hl sym">.</span>foreach<span class="hl sym">(</span>kv <span class="hl sym">=&gt;</span> <span class="hl kwa">this</span><span class="hl sym">(</span>kv<span class="hl sym">.</span>key<span class="hl sym">) +=</span> kv<span class="hl sym">.</span>value<span class="hl sym">)</span>
    <span class="hl kwa">this</span>
  <span class="hl sym">}</span>
<span class="hl sym">}</span>
