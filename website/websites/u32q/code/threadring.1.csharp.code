<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> * contributed by Isaac Gouy</span>
<span class="hl com"> */</span>

<span class="hl kwa">using</span> System<span class="hl sym">;</span>
<span class="hl kwa">using</span> System<span class="hl sym">.</span>Threading<span class="hl sym">;</span>


<span class="hl kwa">internal class</span> NamedThread
<span class="hl sym">{</span>
   <span class="hl kwa">private</span> <span class="hl kwb">int</span> name<span class="hl sym">;</span>
   <span class="hl kwa">private</span> AutoResetEvent signal <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">AutoResetEvent</span><span class="hl sym">(</span><span class="hl kwa">false</span><span class="hl sym">);</span>
   <span class="hl kwa">private</span> <span class="hl kwb">int</span> token <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

   <span class="hl kwa">internal</span> <span class="hl kwd">NamedThread</span><span class="hl sym">(</span><span class="hl kwb">int</span> name<span class="hl sym">) {</span>
      <span class="hl kwa">this</span><span class="hl sym">.</span>name <span class="hl sym">=</span> name<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">internal</span> <span class="hl kwb">void</span> <span class="hl kwd">Run</span><span class="hl sym">() {</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span><span class="hl kwd">TokenNotDone</span><span class="hl sym">())</span>
         <span class="hl kwd">NextThread</span><span class="hl sym">().</span><span class="hl kwd">TakeToken</span><span class="hl sym">(</span>token<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">);</span>

      <span class="hl kwa">if</span> <span class="hl sym">(</span>token <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span> Console<span class="hl sym">.</span><span class="hl kwd">WriteLine</span><span class="hl sym">(</span>name<span class="hl sym">);</span>
      <span class="hl kwd">NextThread</span><span class="hl sym">().</span><span class="hl kwd">TakeToken</span><span class="hl sym">(-</span><span class="hl num">1</span><span class="hl sym">);</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">private</span> <span class="hl kwb">bool</span> <span class="hl kwd">TokenNotDone</span><span class="hl sym">() {</span>
      signal<span class="hl sym">.</span><span class="hl kwd">WaitOne</span><span class="hl sym">();</span>
      <span class="hl kwa">return</span> token <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">internal</span> NamedThread <span class="hl kwd">NextThread</span><span class="hl sym">() {</span>
      <span class="hl kwa">return</span> ThreadRing<span class="hl sym">.</span>threadRing<span class="hl sym">[</span> name <span class="hl sym">%</span> ThreadRing<span class="hl sym">.</span>numberOfThreads <span class="hl sym">];</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">internal</span> <span class="hl kwb">void</span> <span class="hl kwd">TakeToken</span><span class="hl sym">(</span><span class="hl kwb">int</span> x<span class="hl sym">) {</span>
      token <span class="hl sym">=</span> x<span class="hl sym">;</span>
      signal<span class="hl sym">.</span><span class="hl kwd">Set</span><span class="hl sym">();</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>


<span class="hl kwa">public class</span> ThreadRing
<span class="hl sym">{</span>
   <span class="hl kwa">internal</span> <span class="hl kwb">const int</span> numberOfThreads <span class="hl sym">=</span> <span class="hl num">503</span><span class="hl sym">;</span>
   <span class="hl kwa">internal static</span> NamedThread<span class="hl sym">[]</span> threadRing <span class="hl sym">=</span> <span class="hl kwa">new</span> NamedThread<span class="hl sym">[</span><span class="hl num">503</span><span class="hl sym">];</span>

   <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">Main</span><span class="hl sym">(</span><span class="hl kwb">string</span><span class="hl sym">[]</span> args<span class="hl sym">) {</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> numberOfThreads<span class="hl sym">;</span> i<span class="hl sym">++){</span>
         threadRing<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">NamedThread</span><span class="hl sym">(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">);</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">foreach</span> <span class="hl sym">(</span>NamedThread t <span class="hl kwa">in</span> threadRing<span class="hl sym">)</span>
         <span class="hl kwa">new</span> <span class="hl kwd">Thread</span><span class="hl sym">(</span><span class="hl kwa">new</span> <span class="hl kwd">ThreadStart</span><span class="hl sym">(</span>t<span class="hl sym">.</span>Run<span class="hl sym">)).</span><span class="hl kwd">Start</span><span class="hl sym">();</span>

      threadRing<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">].</span><span class="hl kwd">TakeToken</span><span class="hl sym">(</span> <span class="hl kwb">int</span><span class="hl sym">.</span><span class="hl kwd">Parse</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]) );</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>
