<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   conversion to Scala by Rex Kerr</span>
<span class="hl com">   from Java version by Oleg Mazurov and Isaac Gouy</span>
<span class="hl com">*/</span>

<span class="hl kwa">object</span> fannkuchredux
<span class="hl sym">{</span>
  <span class="hl kwa">def</span> fannkuch<span class="hl sym">(</span>n<span class="hl sym">:</span> Int<span class="hl sym">):</span> Int <span class="hl sym">= {</span>
    <span class="hl kwa">val</span> perm1 <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>range<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span>n<span class="hl sym">)</span>
    <span class="hl kwa">val</span> perm<span class="hl sym">,</span> count <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">Array</span><span class="hl sym">[</span>Int<span class="hl sym">](</span>n<span class="hl sym">)</span>
    <span class="hl kwa">var</span> f<span class="hl sym">,</span> i<span class="hl sym">,</span> k<span class="hl sym">,</span> r<span class="hl sym">,</span> flips<span class="hl sym">,</span> nperm<span class="hl sym">,</span> checksum <span class="hl sym">=</span> <span class="hl num">0</span>

    r <span class="hl sym">=</span> n
    <span class="hl kwa">while</span> <span class="hl sym">(</span>r<span class="hl sym">&gt;</span><span class="hl num">0</span><span class="hl sym">) {</span>
      i <span class="hl sym">=</span> <span class="hl num">0</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>r <span class="hl sym">!=</span> <span class="hl num">1</span><span class="hl sym">) {</span> count<span class="hl sym">(</span>r<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">) =</span> r<span class="hl sym">;</span> r <span class="hl sym">-=</span> <span class="hl num">1</span> <span class="hl sym">}</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> n<span class="hl sym">) {</span> perm<span class="hl sym">(</span>i<span class="hl sym">) =</span> perm1<span class="hl sym">(</span>i<span class="hl sym">);</span> i <span class="hl sym">+=</span> <span class="hl num">1</span> <span class="hl sym">}</span>
      
      <span class="hl slc">// Count flips and update max  and checksum</span>
      f <span class="hl sym">=</span> <span class="hl num">0</span>
      k <span class="hl sym">=</span> perm<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>k <span class="hl sym">!=</span> <span class="hl num">0</span><span class="hl sym">) {</span>
        i <span class="hl sym">=</span> <span class="hl num">0</span>
        <span class="hl kwa">while</span> <span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>i <span class="hl sym">&lt;</span> k<span class="hl sym">) {</span>
          <span class="hl kwa">val</span> t <span class="hl sym">=</span> perm<span class="hl sym">(</span>i<span class="hl sym">);</span> perm<span class="hl sym">(</span>i<span class="hl sym">) =</span> perm<span class="hl sym">(</span>k<span class="hl sym">-</span>i<span class="hl sym">);</span> perm<span class="hl sym">(</span>k<span class="hl sym">-</span>i<span class="hl sym">) =</span> t
          i <span class="hl sym">+=</span> <span class="hl num">1</span>
        <span class="hl sym">}</span>
        k <span class="hl sym">=</span> perm<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
        f <span class="hl sym">+=</span> <span class="hl num">1</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>f<span class="hl sym">&gt;</span>flips<span class="hl sym">)</span> flips <span class="hl sym">=</span> f
      <span class="hl kwa">if</span> <span class="hl sym">((</span>nperm<span class="hl sym">&amp;</span><span class="hl num">0x1</span><span class="hl sym">)==</span><span class="hl num">0</span><span class="hl sym">)</span> checksum <span class="hl sym">+=</span> f
      <span class="hl kwa">else</span> checksum <span class="hl sym">-=</span> f

      <span class="hl slc">// Use incremental change to generate another permutation</span>
      <span class="hl kwa">var</span> go <span class="hl sym">=</span> true
      <span class="hl kwa">while</span> <span class="hl sym">(</span>go<span class="hl sym">) {</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>r <span class="hl sym">==</span> n<span class="hl sym">) {</span>
          println<span class="hl sym">(</span>checksum<span class="hl sym">)</span>
          <span class="hl kwa">return</span> flips
        <span class="hl sym">}</span>
        <span class="hl kwa">val</span> p0 <span class="hl sym">=</span> perm1<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
        i <span class="hl sym">=</span> <span class="hl num">0</span>
        <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> r<span class="hl sym">) {</span>
          <span class="hl kwa">val</span> j <span class="hl sym">=</span> i<span class="hl sym">+</span><span class="hl num">1</span>
          perm1<span class="hl sym">(</span>i<span class="hl sym">) =</span> perm1<span class="hl sym">(</span>j<span class="hl sym">)</span>
          i <span class="hl sym">=</span> j
        <span class="hl sym">}</span>
        perm1<span class="hl sym">(</span>r<span class="hl sym">) =</span> p0

        count<span class="hl sym">(</span>r<span class="hl sym">) -=</span> <span class="hl num">1</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>count<span class="hl sym">(</span>r<span class="hl sym">) &gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> go <span class="hl sym">=</span> false
        <span class="hl kwa">else</span> r <span class="hl sym">+=</span> <span class="hl num">1</span>
      <span class="hl sym">}</span>
      nperm <span class="hl sym">+=</span> <span class="hl num">1</span>
    <span class="hl sym">}</span>
    flips
  <span class="hl sym">}</span>

  <span class="hl kwa">def</span> main<span class="hl sym">(</span>args<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">String</span><span class="hl sym">]) {</span>
    <span class="hl kwa">val</span> n <span class="hl sym">= (</span><span class="hl kwa">if</span> <span class="hl sym">(</span>args<span class="hl sym">.</span>length <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> args<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">).</span>toInt <span class="hl kwa">else</span> <span class="hl num">7</span><span class="hl sym">)</span>
    println<span class="hl sym">(</span><span class="hl str">&quot;Pfannkuchen(&quot;</span><span class="hl sym">+</span>n<span class="hl sym">+</span><span class="hl str">&quot;) = &quot;</span><span class="hl sym">+</span>fannkuch<span class="hl sym">(</span>n<span class="hl sym">))</span>
  <span class="hl sym">}</span>
<span class="hl sym">}</span>
