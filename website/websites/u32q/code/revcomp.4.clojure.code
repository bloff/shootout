<span class="hl slc">;;   The Computer Language Benchmarks Game</span>
<span class="hl slc">;;   http://shootout.alioth.debian.org/</span>

<span class="hl slc">;; contributed by Andy Fingerhut</span>

<span class="hl sym">(</span>ns revcomp
  <span class="hl sym">(:</span>gen<span class="hl sym">-</span>class<span class="hl sym">))</span>

<span class="hl sym">(</span>set<span class="hl sym">! *</span>warn<span class="hl sym">-</span>on<span class="hl sym">-</span>reflection<span class="hl sym">*</span> true<span class="hl sym">)</span>

<span class="hl sym">(</span>gen<span class="hl sym">-</span>class
 <span class="hl sym">:</span>name revcomp.ReversibleByteArray
 <span class="hl sym">:</span>extends java.io.ByteArrayOutputStream
 <span class="hl sym">:</span>exposes <span class="hl sym">{</span>count <span class="hl sym">{:</span>get getCount<span class="hl sym">},</span>
           buf <span class="hl sym">{:</span>get getBuf<span class="hl sym">}}</span>
 <span class="hl sym">:</span>prefix rba<span class="hl sym">-</span>
 <span class="hl sym">:</span>methods <span class="hl sym">[ [</span> reverse <span class="hl sym">[</span> <span class="hl str">&quot;[B&quot;</span> <span class="hl sym">]</span> void <span class="hl sym">] ])</span>


<span class="hl sym">(</span>defn find<span class="hl sym">-</span>first<span class="hl sym">-</span>byte<span class="hl sym">-</span>idx <span class="hl sym">[</span>#^bytes buf start search<span class="hl sym">-</span>val<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>search<span class="hl sym">-</span>val <span class="hl sym">(</span>int search<span class="hl sym">-</span>val<span class="hl sym">)]</span>
    <span class="hl sym">(</span>loop <span class="hl sym">[</span>i <span class="hl sym">(</span>int start<span class="hl sym">)]</span>
      <span class="hl sym">(</span>if <span class="hl sym">(== (</span>int <span class="hl sym">(</span>aget buf i<span class="hl sym">))</span> search<span class="hl sym">-</span>val<span class="hl sym">)</span>
        i
        <span class="hl sym">(</span>recur <span class="hl sym">(</span>unchecked<span class="hl sym">-</span>inc i<span class="hl sym">))))))</span>


<span class="hl sym">(</span>defn reverse<span class="hl sym">-</span>and<span class="hl sym">-</span>complement<span class="hl sym">! [</span>#^bytes buf begin end #^bytes map<span class="hl sym">-</span>char<span class="hl sym">-</span>array nl<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>nl <span class="hl sym">(</span>int nl<span class="hl sym">)]</span>
    <span class="hl sym">(</span>loop <span class="hl sym">[</span>begin <span class="hl sym">(</span>int begin<span class="hl sym">)</span>
           end   <span class="hl sym">(</span>int end<span class="hl sym">)]</span>
      <span class="hl sym">(</span>let <span class="hl sym">[</span>cb <span class="hl sym">(</span>int <span class="hl sym">(</span>aget buf begin<span class="hl sym">))</span>
            ce <span class="hl sym">(</span>int <span class="hl sym">(</span>aget buf end<span class="hl sym">))</span>
            begin <span class="hl sym">(</span>int <span class="hl sym">(</span>if <span class="hl sym">(==</span> cb nl<span class="hl sym">) (</span>unchecked<span class="hl sym">-</span>inc begin<span class="hl sym">)</span> begin<span class="hl sym">))</span>
            end   <span class="hl sym">(</span>int <span class="hl sym">(</span>if <span class="hl sym">(==</span> ce nl<span class="hl sym">) (</span>unchecked<span class="hl sym">-</span>dec end<span class="hl sym">)</span> end<span class="hl sym">))</span>
            cb2 <span class="hl sym">(</span>int <span class="hl sym">(</span>aget buf begin<span class="hl sym">))</span>
            ce2 <span class="hl sym">(</span>int <span class="hl sym">(</span>aget buf end<span class="hl sym">))]</span>
        <span class="hl sym">(</span>when <span class="hl sym">(&lt;=</span> begin end<span class="hl sym">)</span>
          <span class="hl sym">(</span>aset buf begin <span class="hl sym">(</span>aget map<span class="hl sym">-</span>char<span class="hl sym">-</span>array ce2<span class="hl sym">))</span>
          <span class="hl sym">(</span>aset buf end   <span class="hl sym">(</span>aget map<span class="hl sym">-</span>char<span class="hl sym">-</span>array cb2<span class="hl sym">))</span>
          <span class="hl sym">(</span>recur <span class="hl sym">(</span>unchecked<span class="hl sym">-</span>inc begin<span class="hl sym">) (</span>unchecked<span class="hl sym">-</span>dec end<span class="hl sym">)))))))</span>


<span class="hl sym">(</span>defn rba<span class="hl sym">-</span>reverse <span class="hl sym">[</span>#^revcomp.ReversibleByteArray this #^bytes map<span class="hl sym">-</span>char<span class="hl sym">-</span>array<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>count <span class="hl sym">(</span>int <span class="hl sym">(</span>. this <span class="hl sym">(</span>getCount<span class="hl sym">)))</span>
        #^bytes buf <span class="hl sym">(</span>. this <span class="hl sym">(</span>getBuf<span class="hl sym">))</span>
        nl <span class="hl sym">(</span>int \newline<span class="hl sym">)]</span>
    <span class="hl sym">(</span>when <span class="hl sym">(&gt;</span> count <span class="hl num">0</span><span class="hl sym">)</span>
      <span class="hl sym">(</span>let <span class="hl sym">[</span>begin <span class="hl sym">(</span>inc <span class="hl sym">(</span>find<span class="hl sym">-</span>first<span class="hl sym">-</span>byte<span class="hl sym">-</span>idx buf <span class="hl num">0</span> nl<span class="hl sym">))</span>
            end <span class="hl sym">(</span>dec count<span class="hl sym">)]</span>
        <span class="hl sym">(</span>reverse<span class="hl sym">-</span>and<span class="hl sym">-</span>complement<span class="hl sym">!</span> buf begin end map<span class="hl sym">-</span>char<span class="hl sym">-</span>array nl<span class="hl sym">))</span>
      <span class="hl sym">(</span>. System<span class="hl sym">/</span>out write buf <span class="hl num">0</span> count<span class="hl sym">))))</span>


<span class="hl sym">(</span>def complement<span class="hl sym">-</span>dna<span class="hl sym">-</span>char<span class="hl sym">-</span>map
     <span class="hl sym">{</span>\w \W<span class="hl sym">,</span> \W \W<span class="hl sym">,</span>
      \s \S<span class="hl sym">,</span> \S \S<span class="hl sym">,</span>
      \a \T<span class="hl sym">,</span> \A \T<span class="hl sym">,</span>
      \t \A<span class="hl sym">,</span> \T \A<span class="hl sym">,</span>
      \u \A<span class="hl sym">,</span> \U \A<span class="hl sym">,</span>
      \g \C<span class="hl sym">,</span> \G \C<span class="hl sym">,</span>
      \c \G<span class="hl sym">,</span> \C \G<span class="hl sym">,</span>
      \y \R<span class="hl sym">,</span> \Y \R<span class="hl sym">,</span>
      \r \Y<span class="hl sym">,</span> \R \Y<span class="hl sym">,</span>
      \k \M<span class="hl sym">,</span> \K \M<span class="hl sym">,</span>
      \m \K<span class="hl sym">,</span> \M \K<span class="hl sym">,</span>
      \b \V<span class="hl sym">,</span> \B \V<span class="hl sym">,</span>
      \d \H<span class="hl sym">,</span> \D \H<span class="hl sym">,</span>
      \h \D<span class="hl sym">,</span> \H \D<span class="hl sym">,</span>
      \v \B<span class="hl sym">,</span> \V \B<span class="hl sym">,</span>
      \n \N<span class="hl sym">,</span> \N \N <span class="hl sym">})</span>


<span class="hl sym">(</span>defn ubyte <span class="hl sym">[</span>val<span class="hl sym">]</span>
  <span class="hl sym">(</span>if <span class="hl sym">(&gt;=</span> val <span class="hl num">128</span><span class="hl sym">)</span>
    <span class="hl sym">(</span>byte <span class="hl sym">(-</span> val <span class="hl num">256</span><span class="hl sym">))</span>
    <span class="hl sym">(</span>byte val<span class="hl sym">)))</span>


<span class="hl sym">(</span>defn make<span class="hl sym">-</span>array<span class="hl sym">-</span>char<span class="hl sym">-</span>mapper <span class="hl sym">[</span>cmap<span class="hl sym">]</span>
  <span class="hl sym">(</span>byte<span class="hl sym">-</span>array <span class="hl num">256</span> <span class="hl sym">(</span>map <span class="hl sym">(</span>fn <span class="hl sym">[</span>i<span class="hl sym">]</span>
                         <span class="hl sym">(</span>if <span class="hl sym">(</span>contains? cmap <span class="hl sym">(</span>char i<span class="hl sym">))</span>
                           <span class="hl sym">(</span>ubyte <span class="hl sym">(</span>int <span class="hl sym">(</span>cmap <span class="hl sym">(</span>char i<span class="hl sym">))))</span>
                           <span class="hl sym">(</span>ubyte i<span class="hl sym">)))</span>
                       <span class="hl sym">(</span>range <span class="hl num">256</span><span class="hl sym">))))</span>


<span class="hl sym">(</span>defn <span class="hl sym">-</span>main <span class="hl sym">[&amp;</span> args<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>in System<span class="hl sym">/</span>in
	out System<span class="hl sym">/</span>out
        line <span class="hl sym">(</span>byte<span class="hl sym">-</span>array <span class="hl num">82</span><span class="hl sym">)</span>
        buf <span class="hl sym">(</span>new revcomp.ReversibleByteArray<span class="hl sym">)</span>
        complement<span class="hl sym">-</span>dna<span class="hl sym">-</span>char<span class="hl sym">-</span>array <span class="hl sym">(</span>make<span class="hl sym">-</span>array<span class="hl sym">-</span>char<span class="hl sym">-</span>mapper
				   complement<span class="hl sym">-</span>dna<span class="hl sym">-</span>char<span class="hl sym">-</span>map<span class="hl sym">)</span>
        gt <span class="hl sym">(</span>int \<span class="hl sym">&gt;)]</span>
    <span class="hl sym">(</span>loop <span class="hl sym">[</span>nread <span class="hl sym">(</span>int <span class="hl sym">(</span>. in read line<span class="hl sym">))]</span>
      <span class="hl sym">(</span>when <span class="hl sym">(</span>not<span class="hl sym">=</span> nread <span class="hl sym">(</span>int <span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">))</span>
        <span class="hl sym">(</span>loop <span class="hl sym">[</span>i <span class="hl sym">(</span>int <span class="hl num">0</span><span class="hl sym">)</span>
               last <span class="hl sym">(</span>int <span class="hl num">0</span><span class="hl sym">)]</span>
          <span class="hl sym">(</span>if <span class="hl sym">(==</span> i nread<span class="hl sym">)</span>
            <span class="hl sym">(</span>. buf write line last <span class="hl sym">(</span>unchecked<span class="hl sym">-</span>subtract nread last<span class="hl sym">))</span>
            <span class="hl sym">(</span>if <span class="hl sym">(== (</span>int <span class="hl sym">(</span>aget line i<span class="hl sym">))</span> gt<span class="hl sym">)</span>
              <span class="hl sym">(</span>do
                <span class="hl sym">(</span>. buf write line last <span class="hl sym">(</span>unchecked<span class="hl sym">-</span>subtract i last<span class="hl sym">))</span>
                <span class="hl sym">(</span>. buf reverse complement<span class="hl sym">-</span>dna<span class="hl sym">-</span>char<span class="hl sym">-</span>array<span class="hl sym">)</span>
                <span class="hl sym">(</span>. buf reset<span class="hl sym">)</span>
                <span class="hl sym">(</span>recur <span class="hl sym">(</span>unchecked<span class="hl sym">-</span>inc i<span class="hl sym">)</span> i<span class="hl sym">))</span>
              <span class="hl slc">;; else</span>
              <span class="hl sym">(</span>recur <span class="hl sym">(</span>unchecked<span class="hl sym">-</span>inc i<span class="hl sym">)</span> last<span class="hl sym">))))</span>
        <span class="hl sym">(</span>recur <span class="hl sym">(</span>int <span class="hl sym">(</span>. in read line<span class="hl sym">)))))</span>
    <span class="hl sym">(</span>. buf reverse complement<span class="hl sym">-</span>dna<span class="hl sym">-</span>char<span class="hl sym">-</span>array<span class="hl sym">)))</span>
