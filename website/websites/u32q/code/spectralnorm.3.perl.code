<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://shootout.alioth.debian.org/</span>
<span class="hl slc">#</span>
<span class="hl slc"># Contributed by Andrew Rodland</span>

<span class="hl kwa">use</span> <span class="hl kwd">strict</span><span class="hl sym">;</span>
<span class="hl kwa">use</span> IO<span class="hl sym">::</span><span class="hl kwd">Select</span><span class="hl sym">;</span>

<span class="hl kwd">our</span> <span class="hl sym">(</span><span class="hl kwb">$n</span><span class="hl sym">,</span> <span class="hl kwb">$size_of_float</span><span class="hl sym">,</span> <span class="hl kwb">$threads</span><span class="hl sym">,</span> <span class="hl kwb">&#64;ranges</span><span class="hl sym">,</span> <span class="hl kwb">$begin</span><span class="hl sym">,</span> <span class="hl kwb">$end</span><span class="hl sym">);</span>

<span class="hl kwa">sub</span> eval_A <span class="hl sym">{</span>
  <span class="hl kwa">use</span> <span class="hl kwd">integer</span><span class="hl sym">;</span>
  <span class="hl kwc">my</span> <span class="hl kwb">$div</span> <span class="hl sym">= ( (</span><span class="hl kwb">$_</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] +</span> <span class="hl kwb">$_</span><span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]) * (</span><span class="hl kwb">$_</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] +</span> <span class="hl kwb">$_</span><span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">] +</span> <span class="hl num">1</span><span class="hl sym">) /</span> <span class="hl num">2</span><span class="hl sym">) +</span> <span class="hl kwb">$_</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] +</span> <span class="hl num">1</span><span class="hl sym">;</span>
  no <span class="hl kwd">integer</span><span class="hl sym">;</span>
  <span class="hl num">1</span> <span class="hl sym">/</span> <span class="hl kwb">$div</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwa">sub</span> multiplyAv <span class="hl sym">{</span>
  <span class="hl kwa">return</span> map <span class="hl sym">{</span>
    <span class="hl kwc">my</span> <span class="hl sym">(</span><span class="hl kwb">$i</span><span class="hl sym">,</span> <span class="hl kwb">$sum</span><span class="hl sym">) = (</span><span class="hl kwb">$_</span><span class="hl sym">);</span>
    <span class="hl kwb">$sum</span> <span class="hl sym">+=</span> <span class="hl kwd">eval_A</span><span class="hl sym">(</span><span class="hl kwb">$i</span><span class="hl sym">,</span> <span class="hl kwb">$_</span><span class="hl sym">) *</span> <span class="hl kwb">$_</span><span class="hl sym">[</span><span class="hl kwb">$_</span><span class="hl sym">]</span> <span class="hl kwa">for</span> <span class="hl num">0</span> <span class="hl sym">..</span> <span class="hl kwb">$#_</span><span class="hl sym">;</span>
    <span class="hl kwb">$sum</span><span class="hl sym">;</span>
  <span class="hl sym">}</span> <span class="hl kwb">$begin</span> <span class="hl sym">..</span> <span class="hl kwb">$end</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwa">sub</span> multiplyAtv <span class="hl sym">{</span>
  <span class="hl kwa">return</span> map <span class="hl sym">{</span>
    <span class="hl kwc">my</span> <span class="hl sym">(</span><span class="hl kwb">$i</span><span class="hl sym">,</span> <span class="hl kwb">$sum</span><span class="hl sym">) = (</span><span class="hl kwb">$_</span><span class="hl sym">);</span>
    <span class="hl kwb">$sum</span> <span class="hl sym">+=</span> <span class="hl kwd">eval_A</span><span class="hl sym">(</span><span class="hl kwb">$_</span><span class="hl sym">,</span> <span class="hl kwb">$i</span><span class="hl sym">) *</span> <span class="hl kwb">$_</span><span class="hl sym">[</span><span class="hl kwb">$_</span><span class="hl sym">]</span> <span class="hl kwa">for</span> <span class="hl num">0</span> <span class="hl sym">..</span> <span class="hl kwb">$#_</span><span class="hl sym">;</span>
    <span class="hl kwb">$sum</span><span class="hl sym">;</span>
  <span class="hl sym">}</span> <span class="hl kwb">$begin</span> <span class="hl sym">..</span> <span class="hl kwb">$end</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwa">sub</span> do_parallel <span class="hl sym">{</span>
  <span class="hl kwc">my</span> <span class="hl kwb">$func</span> <span class="hl sym">=</span> <span class="hl kwd">shift</span><span class="hl sym">;</span>

  <span class="hl kwc">my</span> <span class="hl kwb">&#64;out</span><span class="hl sym">;</span>
  <span class="hl kwc">my</span> <span class="hl sym">(</span><span class="hl kwb">&#64;fd</span><span class="hl sym">,</span> <span class="hl kwb">&#64;ptr</span><span class="hl sym">,</span> <span class="hl kwb">%fh2proc</span><span class="hl sym">);</span>
  <span class="hl kwa">for</span> <span class="hl kwc">my</span> <span class="hl kwb">$proc</span> <span class="hl sym">(</span><span class="hl num">0</span> <span class="hl sym">..</span> <span class="hl kwb">$threads</span> <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">) {</span>
    <span class="hl sym">(</span><span class="hl kwb">$begin</span><span class="hl sym">,</span> <span class="hl kwb">$end</span><span class="hl sym">) =</span> &#64;<span class="hl sym">{</span> <span class="hl kwb">$ranges</span><span class="hl sym">[</span><span class="hl kwb">$proc</span><span class="hl sym">] };</span>
    <span class="hl kwc">my</span> <span class="hl kwb">$pid</span> <span class="hl sym">=</span> open <span class="hl kwb">$fd</span><span class="hl sym">[</span><span class="hl kwb">$proc</span><span class="hl sym">],</span> <span class="hl str">&quot;-|&quot;</span><span class="hl sym">;</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwb">$pid</span> <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">) {</span>
      <span class="hl kwc">print</span> pack <span class="hl str">&quot;F*&quot;</span><span class="hl sym">,</span> <span class="hl kwb">$func</span><span class="hl sym">-&gt;(</span> <span class="hl kwb">&#64;_</span> <span class="hl sym">);</span>
      exit <span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
      <span class="hl kwb">$fh2proc</span><span class="hl sym">{</span> <span class="hl kwb">$fd</span><span class="hl sym">[</span><span class="hl kwb">$proc</span><span class="hl sym">] } =</span> <span class="hl kwb">$proc</span><span class="hl sym">;</span>
      <span class="hl kwb">$ptr</span><span class="hl sym">[</span><span class="hl kwb">$proc</span><span class="hl sym">] =</span> <span class="hl kwb">$begin</span><span class="hl sym">;</span>
    <span class="hl sym">}</span>
  <span class="hl sym">}</span>

  <span class="hl kwc">my</span> <span class="hl kwb">$select</span> <span class="hl sym">=</span> IO<span class="hl sym">::</span>Select<span class="hl sym">-&gt;</span><span class="hl kwd">new</span><span class="hl sym">(</span><span class="hl kwb">&#64;fd</span><span class="hl sym">);</span>

  <span class="hl kwa">while</span> <span class="hl sym">(</span><span class="hl kwb">$select</span><span class="hl sym">-&gt;</span>count<span class="hl sym">) {</span>
    <span class="hl kwa">for</span> <span class="hl kwc">my</span> <span class="hl kwb">$fh</span> <span class="hl sym">(</span><span class="hl kwb">$select</span><span class="hl sym">-&gt;</span>can_read<span class="hl sym">) {</span>
      <span class="hl kwc">my</span> <span class="hl kwb">$proc</span> <span class="hl sym">=</span> <span class="hl kwb">$fh2proc</span><span class="hl sym">{</span><span class="hl kwb">$fh</span><span class="hl sym">};</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>read <span class="hl kwb">$fh</span><span class="hl sym">,</span> <span class="hl kwc">my</span> <span class="hl kwb">$data</span><span class="hl sym">,</span> <span class="hl kwb">$size_of_float</span><span class="hl sym">) {</span>
        <span class="hl kwb">$out</span><span class="hl sym">[</span> <span class="hl kwb">$ptr</span><span class="hl sym">[</span><span class="hl kwb">$proc</span><span class="hl sym">] ++ ] =</span> unpack <span class="hl str">&quot;F&quot;</span><span class="hl sym">,</span> <span class="hl kwb">$data</span><span class="hl sym">;</span>
      <span class="hl sym">}</span>
      <span class="hl kwb">$select</span><span class="hl sym">-&gt;</span><span class="hl kwd">remove</span><span class="hl sym">(</span><span class="hl kwb">$fh</span><span class="hl sym">)</span> <span class="hl kwa">if</span> <span class="hl kwd">eof</span><span class="hl sym">(</span><span class="hl kwb">$fh</span><span class="hl sym">);</span>
    <span class="hl sym">}</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">return</span> <span class="hl kwb">&#64;out</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwa">sub</span> multiplyAtAv <span class="hl sym">{</span>
  <span class="hl kwc">my</span> <span class="hl kwb">&#64;array</span> <span class="hl sym">=</span> <span class="hl kwd">do_parallel</span><span class="hl sym">(</span>\<span class="hl sym">&amp;</span>multiplyAv<span class="hl sym">,</span> <span class="hl kwb">&#64;_</span><span class="hl sym">);</span>
  <span class="hl kwa">return</span> <span class="hl kwd">do_parallel</span><span class="hl sym">(</span>\<span class="hl sym">&amp;</span>multiplyAtv<span class="hl sym">,</span> <span class="hl kwb">&#64;array</span><span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwa">sub</span> num_cpus <span class="hl sym">{</span>
  open <span class="hl kwc">my</span> <span class="hl kwb">$fh</span><span class="hl sym">,</span> <span class="hl str">'&lt;/proc/cpuinfo'</span> <span class="hl kwa">or return</span><span class="hl sym">;</span>
  <span class="hl kwc">my</span> <span class="hl kwb">$cpus</span><span class="hl sym">;</span>
  <span class="hl kwa">while</span> <span class="hl sym">(&lt;</span><span class="hl kwb">$fh</span><span class="hl sym">&gt;) {</span>
    <span class="hl kwb">$cpus</span> <span class="hl sym">++</span> <span class="hl kwa">if</span> <span class="hl kwc">/^processor\s+:/</span><span class="hl sym">;</span>
  <span class="hl sym">}</span>
  <span class="hl kwa">return</span> <span class="hl kwb">$cpus</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwa">sub</span> init <span class="hl sym">{</span>
  <span class="hl kwb">$size_of_float</span> <span class="hl sym">=</span> length pack <span class="hl str">&quot;F&quot;</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">;</span>

  <span class="hl kwb">$n</span> <span class="hl sym">=</span> <span class="hl kwb">&#64;ARGV</span> ? <span class="hl kwb">$ARGV</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] :</span> <span class="hl num">500</span><span class="hl sym">;</span>
  <span class="hl kwb">$threads</span> <span class="hl sym">=</span> <span class="hl kwd">num_cpus</span><span class="hl sym">() ||</span> <span class="hl num">1</span><span class="hl sym">;</span>

  <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwb">$threads</span> <span class="hl sym">&gt;</span> <span class="hl kwb">$n</span><span class="hl sym">) {</span>
    <span class="hl kwb">$threads</span> <span class="hl sym">=</span> <span class="hl kwb">$n</span><span class="hl sym">;</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">for</span> <span class="hl kwc">my</span> <span class="hl kwb">$i</span> <span class="hl sym">(</span><span class="hl num">0</span> <span class="hl sym">..</span> <span class="hl kwb">$threads</span> <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">) {</span>
    <span class="hl kwa">use</span> <span class="hl kwd">integer</span><span class="hl sym">;</span>
    <span class="hl kwb">$ranges</span><span class="hl sym">[</span><span class="hl kwb">$i</span><span class="hl sym">][</span><span class="hl num">0</span><span class="hl sym">] =</span> <span class="hl kwb">$n</span> <span class="hl sym">*</span> <span class="hl kwb">$i</span> <span class="hl sym">/</span> <span class="hl kwb">$threads</span><span class="hl sym">;</span>
    <span class="hl kwb">$ranges</span><span class="hl sym">[</span><span class="hl kwb">$i</span><span class="hl sym">][</span><span class="hl num">1</span><span class="hl sym">] =</span> <span class="hl kwb">$n</span> <span class="hl sym">* (</span><span class="hl kwb">$i</span> <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">) /</span> <span class="hl kwb">$threads</span> <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>
    no <span class="hl kwd">integer</span><span class="hl sym">;</span>
  <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwd">init</span><span class="hl sym">();</span>

<span class="hl kwc">my</span> <span class="hl kwb">&#64;u</span> <span class="hl sym">= (</span><span class="hl num">1</span><span class="hl sym">)</span> x <span class="hl kwb">$n</span><span class="hl sym">;</span>
<span class="hl kwc">my</span> <span class="hl kwb">&#64;v</span><span class="hl sym">;</span>
<span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl num">0</span> <span class="hl sym">..</span> <span class="hl num">9</span><span class="hl sym">) {</span>
  <span class="hl kwb">&#64;v</span> <span class="hl sym">=</span> <span class="hl kwd">multiplyAtAv</span><span class="hl sym">(</span> <span class="hl kwb">&#64;u</span> <span class="hl sym">);</span>
  <span class="hl kwb">&#64;u</span> <span class="hl sym">=</span> <span class="hl kwd">multiplyAtAv</span><span class="hl sym">(</span> <span class="hl kwb">&#64;v</span> <span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwc">my</span> <span class="hl sym">(</span><span class="hl kwb">$vBv</span><span class="hl sym">,</span> <span class="hl kwb">$vv</span><span class="hl sym">);</span>
<span class="hl kwa">for</span> <span class="hl kwc">my</span> <span class="hl kwb">$i</span> <span class="hl sym">(</span><span class="hl num">0</span> <span class="hl sym">..</span> <span class="hl kwb">$#u</span><span class="hl sym">) {</span>
  <span class="hl kwb">$vBv</span> <span class="hl sym">+=</span> <span class="hl kwb">$u</span><span class="hl sym">[</span><span class="hl kwb">$i</span><span class="hl sym">] *</span> <span class="hl kwb">$v</span><span class="hl sym">[</span><span class="hl kwb">$i</span><span class="hl sym">];</span>
  <span class="hl kwb">$vv</span> <span class="hl sym">+=</span> <span class="hl kwb">$v</span><span class="hl sym">[</span><span class="hl kwb">$i</span><span class="hl sym">] **</span> <span class="hl num">2</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwd">printf</span><span class="hl sym">(</span> <span class="hl str">&quot;%0.9f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> <span class="hl kwd">sqrt</span><span class="hl sym">(</span> <span class="hl kwb">$vBv</span> <span class="hl sym">/</span> <span class="hl kwb">$vv</span> <span class="hl sym">) );</span>

