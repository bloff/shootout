<span class="hl slc">%% The Computer Language Benchmarks Game</span>
<span class="hl slc">%% http://shootout.alioth.debian.org/</span>
<span class="hl slc">%%</span>
<span class="hl slc">%% k-nucleotide - using binaries and process dictionaries</span>
<span class="hl slc">%% Contributed by Erik Søe Sørensen</span>
<span class="hl slc">%%</span>

<span class="hl sym">-</span><span class="hl kwa">module</span><span class="hl sym">(</span>knucleotide_pdict<span class="hl sym">).</span>

<span class="hl sym">-</span><span class="hl kwa">export</span><span class="hl sym">([</span>main<span class="hl sym">/</span><span class="hl num">1</span><span class="hl sym">,</span> body<span class="hl sym">/</span><span class="hl num">0</span><span class="hl sym">]).</span>

<span class="hl sym">-</span><span class="hl kwa">define</span><span class="hl sym">(</span>WORKER_LENGTHS<span class="hl sym">, [</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">3</span><span class="hl sym">,</span><span class="hl num">4</span><span class="hl sym">,</span><span class="hl num">6</span><span class="hl sym">,</span><span class="hl num">12</span><span class="hl sym">,</span><span class="hl num">18</span><span class="hl sym">]).</span>
<span class="hl sym">-</span><span class="hl kwa">define</span><span class="hl sym">(</span>WORKER_QUERIES<span class="hl sym">,</span>
		  <span class="hl sym">[</span>all_by_frequency<span class="hl sym">,</span>
		   all_by_frequency<span class="hl sym">,</span>
		   <span class="hl sym">{</span>find_frequency<span class="hl sym">, &lt;&lt;</span><span class="hl str">&quot;GGT&quot;</span><span class="hl sym">&gt;&gt;},</span>
		   <span class="hl sym">{</span>find_frequency<span class="hl sym">, &lt;&lt;</span><span class="hl str">&quot;GGTA&quot;</span><span class="hl sym">&gt;&gt;},</span>
		   <span class="hl sym">{</span>find_frequency<span class="hl sym">, &lt;&lt;</span><span class="hl str">&quot;GGTATT&quot;</span><span class="hl sym">&gt;&gt;},</span>
		   <span class="hl sym">{</span>find_frequency<span class="hl sym">, &lt;&lt;</span><span class="hl str">&quot;GGTATTTTAATT&quot;</span><span class="hl sym">&gt;&gt;},</span>
		   <span class="hl sym">{</span>find_frequency<span class="hl sym">, &lt;&lt;</span><span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl sym">&gt;&gt;}]).</span>

<span class="hl kwd">find_seq</span><span class="hl sym">() -&gt;</span>
    <span class="hl kwa">case</span> io<span class="hl sym">:</span><span class="hl kwd">get_line</span><span class="hl sym">(</span><span class="hl str">''</span><span class="hl sym">)</span> <span class="hl kwa">of</span>
	<span class="hl sym">&lt;&lt;</span><span class="hl str">&quot;&gt;&quot;</span><span class="hl sym">,</span> _<span class="hl sym">/</span><span class="hl kwb">binary</span><span class="hl sym">&gt;&gt; -&gt;</span>
	    ok<span class="hl sym">;</span>         <span class="hl slc">% Found</span>
	eof <span class="hl sym">-&gt;</span>
	    <span class="hl kwb">exit</span><span class="hl sym">(</span>eof<span class="hl sym">);</span>
	_ <span class="hl sym">-&gt;</span>
	    <span class="hl kwd">find_seq</span><span class="hl sym">()</span>  <span class="hl slc">% Keep searching</span>
    <span class="hl kwa">end</span><span class="hl sym">.</span>

<span class="hl kwd">process_seq</span><span class="hl sym">(</span>Dests<span class="hl sym">) -&gt;</span>
    <span class="hl kwa">case</span> io<span class="hl sym">:</span><span class="hl kwd">get_line</span><span class="hl sym">(</span><span class="hl str">''</span><span class="hl sym">)</span> <span class="hl kwa">of</span>
	<span class="hl sym">&lt;&lt;</span><span class="hl str">&quot;&gt;&quot;</span><span class="hl sym">,</span> _<span class="hl sym">/</span><span class="hl kwb">binary</span><span class="hl sym">&gt;&gt; -&gt;</span>
	    done<span class="hl sym">;</span>
	eof <span class="hl sym">-&gt;</span>
	    lists<span class="hl sym">:</span><span class="hl kwd">foreach</span><span class="hl sym">(</span><span class="hl kwa">fun</span><span class="hl sym">(</span>Dest<span class="hl sym">)-&gt;</span>Dest <span class="hl sym">!</span> eof <span class="hl kwa">end</span><span class="hl sym">,</span> Dests<span class="hl sym">),</span>
	    ok<span class="hl sym">;</span>
	Line <span class="hl kwa">when</span> <span class="hl kwd">is_binary</span><span class="hl sym">(</span>Line<span class="hl sym">) -&gt;</span>
	    Data <span class="hl sym">=</span> <span class="hl kwd">normalize_line</span><span class="hl sym">(</span>Line<span class="hl sym">),</span>
	    lists<span class="hl sym">:</span><span class="hl kwd">foreach</span><span class="hl sym">(</span><span class="hl kwa">fun</span><span class="hl sym">(</span>Dest<span class="hl sym">)-&gt;</span>Dest <span class="hl sym">!</span> Data <span class="hl kwa">end</span><span class="hl sym">,</span> Dests<span class="hl sym">),</span>
	    <span class="hl kwd">process_seq</span><span class="hl sym">(</span>Dests<span class="hl sym">)</span>
    <span class="hl kwa">end</span><span class="hl sym">.</span>


<span class="hl kwd">normalize_line</span><span class="hl sym">(</span>Bin<span class="hl sym">) -&gt;</span>
    <span class="hl kwb">list_to_binary</span><span class="hl sym">([</span><span class="hl kwd">to_upper</span><span class="hl sym">(</span>C<span class="hl sym">) ||</span> C<span class="hl sym">&lt;-</span><span class="hl kwb">binary_to_list</span><span class="hl sym">(</span>Bin<span class="hl sym">),</span> C <span class="hl sym">=/=</span> $\n<span class="hl sym">]).</span>

<span class="hl kwd">to_upper</span><span class="hl sym">(</span>Char<span class="hl sym">)</span> <span class="hl kwa">when</span> $a <span class="hl sym">=&lt;</span> Char<span class="hl sym">,</span> Char <span class="hl sym">=&lt;</span> $z <span class="hl sym">-&gt;</span> Char <span class="hl sym">-</span> $a <span class="hl sym">+</span> $A<span class="hl sym">;</span>
<span class="hl kwd">to_upper</span><span class="hl sym">(</span>Char<span class="hl sym">)                             -&gt;</span> Char<span class="hl sym">.</span>

<span class="hl kwd">spawn_worker</span><span class="hl sym">(</span>Len<span class="hl sym">) -&gt;</span>
    <span class="hl kwb">spawn</span><span class="hl sym">(</span><span class="hl kwa">fun</span><span class="hl sym">()-&gt;</span><span class="hl kwd">worker_read</span><span class="hl sym">(</span>Len<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">, &lt;&lt;&gt;&gt;)</span> <span class="hl kwa">end</span><span class="hl sym">).</span>

<span class="hl kwd">worker_read</span><span class="hl sym">(</span>Len<span class="hl sym">,</span> Total<span class="hl sym">,</span>Buf<span class="hl sym">)</span> <span class="hl kwa">when</span> <span class="hl kwd">is_integer</span><span class="hl sym">(</span>Len<span class="hl sym">),</span>
				      <span class="hl kwd">is_integer</span><span class="hl sym">(</span>Total<span class="hl sym">),</span>
				<span class="hl kwd">is_binary</span><span class="hl sym">(</span>Buf<span class="hl sym">),</span>
				<span class="hl kwd">byte_size</span><span class="hl sym">(</span>Buf<span class="hl sym">) &lt;</span> Len <span class="hl sym">-&gt;</span>
    <span class="hl kwa">receive</span>
	Data <span class="hl kwa">when</span> <span class="hl kwd">is_binary</span><span class="hl sym">(</span>Data<span class="hl sym">) -&gt;</span>
	    <span class="hl kwd">worker_read</span><span class="hl sym">(</span>Len<span class="hl sym">,</span> Total<span class="hl sym">, &lt;&lt;</span>Buf<span class="hl sym">/</span><span class="hl kwb">binary</span><span class="hl sym">,</span> Data<span class="hl sym">/</span><span class="hl kwb">binary</span><span class="hl sym">&gt;&gt;);</span>
	eof <span class="hl sym">-&gt;</span>
	    <span class="hl kwd">worker_done</span><span class="hl sym">(</span>Total<span class="hl sym">)</span>
    <span class="hl kwa">end</span><span class="hl sym">;</span>
<span class="hl kwd">worker_read</span><span class="hl sym">(</span>Len<span class="hl sym">,</span> Total<span class="hl sym">,</span> Buf<span class="hl sym">)</span> <span class="hl kwa">when</span> <span class="hl kwd">is_integer</span><span class="hl sym">(</span>Len<span class="hl sym">),</span>
                                <span class="hl kwd">is_integer</span><span class="hl sym">(</span>Total<span class="hl sym">),</span>
				<span class="hl kwd">is_binary</span><span class="hl sym">(</span>Buf<span class="hl sym">),</span>
				<span class="hl kwd">byte_size</span><span class="hl sym">(</span>Buf<span class="hl sym">) &gt;=</span> Len <span class="hl sym">-&gt;</span>
    <span class="hl sym">&lt;&lt;</span>Key<span class="hl sym">:</span>Len<span class="hl sym">/</span><span class="hl kwb">binary</span><span class="hl sym">,</span> _<span class="hl sym">/</span><span class="hl kwb">binary</span><span class="hl sym">&gt;&gt; =</span> Buf<span class="hl sym">,</span>
    Before <span class="hl sym">=</span> <span class="hl kwa">case</span> <span class="hl kwb">get</span><span class="hl sym">(</span>Key<span class="hl sym">)</span> <span class="hl kwa">of</span>
		 undefined <span class="hl sym">-&gt;</span> <span class="hl num">0</span><span class="hl sym">;</span>
		 X <span class="hl kwa">when</span> <span class="hl kwd">is_integer</span><span class="hl sym">(</span>X<span class="hl sym">) -&gt;</span> X
	     <span class="hl kwa">end</span><span class="hl sym">,</span>
    <span class="hl kwb">put</span><span class="hl sym">(</span>Key<span class="hl sym">,</span> Before <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">),</span>
    <span class="hl sym">&lt;&lt;</span>_<span class="hl sym">,</span> Rest<span class="hl sym">/</span><span class="hl kwb">binary</span><span class="hl sym">&gt;&gt; =</span> Buf<span class="hl sym">,</span>
    <span class="hl kwd">worker_read</span><span class="hl sym">(</span>Len<span class="hl sym">,</span> Total<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> Rest<span class="hl sym">).</span>

<span class="hl kwd">worker_done</span><span class="hl sym">(</span>Total<span class="hl sym">) -&gt;</span>
    <span class="hl kwa">receive</span>
	<span class="hl sym">{</span>all_by_frequency<span class="hl sym">,</span> Pid<span class="hl sym">,</span> Ref<span class="hl sym">} -&gt;</span>
	    Answer <span class="hl sym">=</span> lists<span class="hl sym">:</span><span class="hl kwd">keysort</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">,</span> <span class="hl kwb">get</span><span class="hl sym">()),</span>
	    TxtAnswer <span class="hl sym">=</span> lists<span class="hl sym">:</span><span class="hl kwd">foldl</span><span class="hl sym">(</span><span class="hl kwa">fun</span><span class="hl sym">({</span>Key<span class="hl sym">,</span>Freq<span class="hl sym">},</span>Acc<span class="hl sym">) -&gt;</span>
					    <span class="hl sym">[</span>Key<span class="hl sym">,</span> $\ <span class="hl sym">,</span>
					     io_lib<span class="hl sym">:</span><span class="hl kwd">format</span><span class="hl sym">(</span><span class="hl str">&quot;~.3f&quot;</span><span class="hl sym">, [</span>Freq<span class="hl sym">*</span><span class="hl num">100</span><span class="hl sym">/</span>Total<span class="hl sym">]),</span>
					     $\n <span class="hl sym">|</span> Acc<span class="hl sym">]</span>
				    <span class="hl kwa">end</span><span class="hl sym">,</span> <span class="hl str">&quot;</span><span class="hl esc">\</span><span class="hl str">n&quot;</span><span class="hl sym">,</span> Answer<span class="hl sym">),</span>
	    Pid <span class="hl sym">! {</span>Ref<span class="hl sym">,</span>TxtAnswer<span class="hl sym">};</span>
	<span class="hl sym">{{</span>find_frequency<span class="hl sym">,</span> Key<span class="hl sym">},</span> Pid<span class="hl sym">,</span>Ref<span class="hl sym">} -&gt;</span>
	    Freq <span class="hl sym">=</span> <span class="hl kwa">case</span> <span class="hl kwb">get</span><span class="hl sym">(</span>Key<span class="hl sym">)</span> <span class="hl kwa">of</span>
		       undefined <span class="hl sym">-&gt;</span> <span class="hl num">0</span><span class="hl sym">;</span>
		       X <span class="hl sym">-&gt;</span> X
		   <span class="hl kwa">end</span><span class="hl sym">,</span>
	    TxtAnswer <span class="hl sym">= [</span><span class="hl kwb">integer_to_list</span><span class="hl sym">(</span>Freq<span class="hl sym">),</span> $\t<span class="hl sym">,</span> Key<span class="hl sym">,</span> $\n<span class="hl sym">],</span>
	    Pid <span class="hl sym">! {</span>Ref<span class="hl sym">,</span>TxtAnswer<span class="hl sym">};</span>
	stop <span class="hl sym">-&gt;</span>
	    <span class="hl kwb">exit</span><span class="hl sym">(</span>normal<span class="hl sym">)</span>
    <span class="hl kwa">end</span><span class="hl sym">,</span>
    done<span class="hl sym">.</span>

<span class="hl kwd">body</span><span class="hl sym">() -&gt;</span>
    <span class="hl slc">%% Start workers in background:</span>
    Pids <span class="hl sym">=</span> lists<span class="hl sym">:</span><span class="hl kwd">map</span><span class="hl sym">(</span><span class="hl kwa">fun</span> spawn_worker<span class="hl sym">/</span><span class="hl num">1</span><span class="hl sym">, ?</span>WORKER_LENGTHS<span class="hl sym">),</span>

    io<span class="hl sym">:</span><span class="hl kwd">setopts</span><span class="hl sym">(</span>standard_io<span class="hl sym">, [</span><span class="hl kwb">binary</span><span class="hl sym">]),</span>

    <span class="hl slc">%% Skip to third sequence:</span>
    <span class="hl kwd">find_seq</span><span class="hl sym">(),</span>
    <span class="hl kwd">find_seq</span><span class="hl sym">(),</span>
    <span class="hl kwd">find_seq</span><span class="hl sym">(),</span>
    <span class="hl kwd">process_seq</span><span class="hl sym">(</span>Pids<span class="hl sym">),</span>

    <span class="hl slc">%% Request answers:</span>
    Refs <span class="hl sym">=</span>
	lists<span class="hl sym">:</span><span class="hl kwd">zipwith</span><span class="hl sym">(</span><span class="hl kwa">fun</span> <span class="hl sym">(</span>Pid<span class="hl sym">,</span>Query<span class="hl sym">) -&gt;</span>
			      Ref <span class="hl sym">=</span> <span class="hl kwb">make_ref</span><span class="hl sym">(),</span>
			      Pid <span class="hl sym">! {</span>Query<span class="hl sym">,</span> <span class="hl kwb">self</span><span class="hl sym">(),</span> Ref<span class="hl sym">},</span>
			      Ref
		      <span class="hl kwa">end</span><span class="hl sym">,</span>
		      Pids<span class="hl sym">, ?</span>WORKER_QUERIES<span class="hl sym">),</span>

    <span class="hl slc">%% Receive and print answers:</span>
    lists<span class="hl sym">:</span><span class="hl kwd">foreach</span><span class="hl sym">(</span><span class="hl kwa">fun</span><span class="hl sym">(</span>Ref<span class="hl sym">) -&gt;</span>
			  <span class="hl kwa">receive</span> <span class="hl sym">{</span>Ref<span class="hl sym">,</span> Answer<span class="hl sym">} -&gt;</span>
				  io<span class="hl sym">:</span><span class="hl kwd">put_chars</span><span class="hl sym">(</span>Answer<span class="hl sym">)</span>
			  <span class="hl kwa">end</span>
		  <span class="hl kwa">end</span><span class="hl sym">,</span> Refs<span class="hl sym">),</span>
    ok<span class="hl sym">.</span>

<span class="hl kwd">main</span><span class="hl sym">(</span>_Args<span class="hl sym">) -&gt;</span>
    <span class="hl kwd">body</span><span class="hl sym">(),</span>
    <span class="hl kwb">halt</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">).</span>
