<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;</span>
<span class="hl slc">;; contributed by Jim Kannampuzha</span>
<span class="hl slc">;; inspired by Jesse Rosenstock</span>

<span class="hl sym">(</span>ns spectralnorm
  <span class="hl sym">(:</span>gen<span class="hl sym">-</span>class<span class="hl sym">))</span>

<span class="hl sym">(</span>set<span class="hl sym">! *</span>warn<span class="hl sym">-</span>on<span class="hl sym">-</span>reflection<span class="hl sym">*</span> true<span class="hl sym">)</span>

<span class="hl sym">(</span>defmacro eval<span class="hl sym">-</span>a <span class="hl sym">[</span>ii jj<span class="hl sym">]</span>
  <span class="hl sym">`(</span>let <span class="hl sym">[</span>i# <span class="hl sym">(</span>int ~ii<span class="hl sym">)</span>
         j# <span class="hl sym">(</span>int ~jj<span class="hl sym">)</span>
         n# <span class="hl sym">(</span>unchecked<span class="hl sym">-</span>add i# j#<span class="hl sym">)</span>
         n<span class="hl sym">+</span><span class="hl num">1</span># <span class="hl sym">(</span>unchecked<span class="hl sym">-</span>inc n#<span class="hl sym">)]</span>
     <span class="hl sym">(/ (</span>double <span class="hl num">1.0</span><span class="hl sym">)</span>
        <span class="hl sym">(</span>unchecked<span class="hl sym">-</span>add <span class="hl sym">(</span>bit<span class="hl sym">-</span>shift<span class="hl sym">-</span>right <span class="hl sym">(</span>unchecked<span class="hl sym">-</span>multiply n# n<span class="hl sym">+</span><span class="hl num">1</span>#<span class="hl sym">) (</span>int <span class="hl num">1</span><span class="hl sym">))</span>
                       <span class="hl sym">(</span>unchecked<span class="hl sym">-</span>inc i#<span class="hl sym">)))))</span>

<span class="hl sym">(</span>defn multiply<span class="hl sym">-</span>a<span class="hl sym">-</span>v <span class="hl sym">[</span>agent ^doubles v ^doubles av range<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>end <span class="hl sym">(</span>int <span class="hl sym">(</span>second range<span class="hl sym">))]</span>
    <span class="hl sym">(</span>loop <span class="hl sym">[</span>i <span class="hl sym">(</span>int <span class="hl sym">(</span>first range<span class="hl sym">))]</span>
      <span class="hl sym">(</span>if <span class="hl sym">(=</span> i end<span class="hl sym">)</span>
        nil
        <span class="hl sym">(</span>do
          <span class="hl sym">(</span>aset av i <span class="hl sym">(</span>double <span class="hl sym">(</span>areduce v j sum <span class="hl sym">(</span>double <span class="hl num">0</span><span class="hl sym">)</span>
                                      <span class="hl sym">(+</span> sum <span class="hl sym">(* (</span>eval<span class="hl sym">-</span>a i j<span class="hl sym">) (</span>aget v j<span class="hl sym">))))))</span>
          <span class="hl sym">(</span>recur <span class="hl sym">(</span>unchecked<span class="hl sym">-</span>inc i<span class="hl sym">)))))))</span>

<span class="hl sym">(</span>defn multiply<span class="hl sym">-</span>at<span class="hl sym">-</span>v <span class="hl sym">[</span>agent ^doubles v ^doubles atv range<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>end <span class="hl sym">(</span>int <span class="hl sym">(</span>second range<span class="hl sym">))]</span>
    <span class="hl sym">(</span>loop <span class="hl sym">[</span>i <span class="hl sym">(</span>int <span class="hl sym">(</span>first range<span class="hl sym">))]</span>
      <span class="hl sym">(</span>if <span class="hl sym">(=</span> i end<span class="hl sym">)</span> nil
          <span class="hl sym">(</span>do
            <span class="hl sym">(</span>aset atv i
                  <span class="hl sym">(</span>double <span class="hl sym">(</span>areduce v j sum <span class="hl sym">(</span>double <span class="hl num">0</span><span class="hl sym">)</span>
                   <span class="hl sym">(+</span> sum <span class="hl sym">(* (</span>eval<span class="hl sym">-</span>a j i<span class="hl sym">) (</span>aget v j<span class="hl sym">))))))</span>
            <span class="hl sym">(</span>recur <span class="hl sym">(</span>unchecked<span class="hl sym">-</span>inc i<span class="hl sym">)))))))</span>

<span class="hl sym">(</span>defn multiply<span class="hl sym">-</span>at<span class="hl sym">-</span>a<span class="hl sym">-</span>v <span class="hl sym">[</span>^doubles v ^doubles tmp ^doubles at<span class="hl sym">-</span>av
                       num<span class="hl sym">-</span>threads workers ranges<span class="hl sym">]</span>
  <span class="hl sym">(</span>dotimes <span class="hl sym">[</span>i num<span class="hl sym">-</span>threads<span class="hl sym">]</span>
    <span class="hl sym">(</span>send <span class="hl sym">(</span>nth workers i<span class="hl sym">)</span> multiply<span class="hl sym">-</span>a<span class="hl sym">-</span>v v tmp <span class="hl sym">(</span>nth ranges i<span class="hl sym">)))</span>
  <span class="hl sym">(</span>apply await workers<span class="hl sym">)</span>
  <span class="hl sym">(</span>dotimes <span class="hl sym">[</span>i num<span class="hl sym">-</span>threads<span class="hl sym">]</span>
    <span class="hl sym">(</span>send <span class="hl sym">(</span>nth workers i<span class="hl sym">)</span> multiply<span class="hl sym">-</span>at<span class="hl sym">-</span>v tmp at<span class="hl sym">-</span>av <span class="hl sym">(</span>nth ranges i<span class="hl sym">)))</span>
  <span class="hl sym">(</span>apply await workers<span class="hl sym">))</span>

<span class="hl sym">(</span>defmacro dot<span class="hl sym">-</span>product <span class="hl sym">[</span>^doubles u ^doubles v<span class="hl sym">]</span>
  <span class="hl sym">`(</span>areduce ~u i# sum# <span class="hl sym">(</span>double <span class="hl num">0</span><span class="hl sym">) (+</span> sum# <span class="hl sym">(* (</span>aget ~u i#<span class="hl sym">) (</span>aget ~v i#<span class="hl sym">)))))</span>

<span class="hl sym">(</span>defn run<span class="hl sym">-</span>game <span class="hl sym">[</span>size<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>num<span class="hl sym">-</span>threads <span class="hl sym">(</span>int <span class="hl sym">(</span>.availableProcessors <span class="hl sym">(</span>Runtime<span class="hl sym">/</span>getRuntime<span class="hl sym">)))</span>
        workers <span class="hl sym">(</span>vec <span class="hl sym">(</span>repeatedly num<span class="hl sym">-</span>threads #<span class="hl sym">(</span>agent <span class="hl sym">())))</span>
        chunk<span class="hl sym">-</span>size <span class="hl sym">(</span>int <span class="hl sym">(</span>Math<span class="hl sym">/</span>ceil <span class="hl sym">(/</span> size num<span class="hl sym">-</span>threads<span class="hl sym">)))</span>
        ranges  <span class="hl sym">(</span>vec <span class="hl sym">(</span>partition <span class="hl num">2 1</span>
                                <span class="hl sym">(</span>take <span class="hl sym">(</span>unchecked<span class="hl sym">-</span>inc num<span class="hl sym">-</span>threads<span class="hl sym">)</span>
                                      <span class="hl sym">(</span>iterate #<span class="hl sym">(+</span> chunk<span class="hl sym">-</span>size %<span class="hl sym">)</span>
                                               <span class="hl sym">(</span>int <span class="hl num">0</span><span class="hl sym">)))))</span>
        u <span class="hl sym">(</span>double<span class="hl sym">-</span>array size <span class="hl num">1.0</span><span class="hl sym">)</span>
        tmp <span class="hl sym">(</span>double<span class="hl sym">-</span>array size <span class="hl num">0.0</span><span class="hl sym">)</span>
        v <span class="hl sym">(</span>double<span class="hl sym">-</span>array size <span class="hl num">0.0</span><span class="hl sym">)]</span>
    <span class="hl sym">(</span>dotimes <span class="hl sym">[</span>_ <span class="hl num">10</span><span class="hl sym">]</span>
      <span class="hl sym">(</span>multiply<span class="hl sym">-</span>at<span class="hl sym">-</span>a<span class="hl sym">-</span>v u tmp v num<span class="hl sym">-</span>threads workers ranges<span class="hl sym">)</span>
      <span class="hl sym">(</span>multiply<span class="hl sym">-</span>at<span class="hl sym">-</span>a<span class="hl sym">-</span>v v tmp u num<span class="hl sym">-</span>threads workers ranges<span class="hl sym">))</span>
    <span class="hl sym">(</span>let <span class="hl sym">[</span>vbv <span class="hl sym">(</span>dot<span class="hl sym">-</span>product u v<span class="hl sym">)</span>
          vv <span class="hl sym">(</span>dot<span class="hl sym">-</span>product v v<span class="hl sym">)]</span>
      <span class="hl sym">(</span>Math<span class="hl sym">/</span>sqrt <span class="hl sym">(/</span> vbv vv<span class="hl sym">)))))</span>

<span class="hl sym">(</span>defn <span class="hl sym">-</span>main <span class="hl sym">[&amp;</span> args<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>n <span class="hl sym">(</span>if <span class="hl sym">(</span>empty? args<span class="hl sym">)</span>
            <span class="hl num">2500</span>
            <span class="hl sym">(</span>Integer<span class="hl sym">/</span>valueOf ^String <span class="hl sym">(</span>first args<span class="hl sym">)))]</span>
    <span class="hl sym">(</span>println <span class="hl sym">(</span>format <span class="hl str">&quot;%.9f&quot;</span> <span class="hl sym">(</span>run<span class="hl sym">-</span>game n<span class="hl sym">)))</span>
    <span class="hl sym">(</span>shutdown<span class="hl sym">-</span>agents<span class="hl sym">)))</span>

