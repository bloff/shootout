<span class="hl com">(*</span>
<span class="hl com">** The Computer Language Benchmarks Game</span>
<span class="hl com">** http://shootout.alioth.debian.org/</span>
<span class="hl com">**</span>
<span class="hl com">** contributed by Hongwei Xi</span>
<span class="hl com">**</span>
<span class="hl com">** compilation command:</span>
<span class="hl com">**   atscc -O3 -msse2 spectralnorm.dats -o spectralnorm -lm</span>
<span class="hl com">**</span>
<span class="hl com">*)</span>

staload M <span class="hl sym">=</span> <span class="hl str">&quot;libc/SATS/math.sats&quot;</span>

<span class="hl sym">%{</span>^

static inline
ats_ptr_type
darray_make <span class="hl sym">(</span>ats_int_type n<span class="hl sym">,</span> ats_double_type f<span class="hl sym">) {</span>
  int i<span class="hl sym">;</span>
  ats_double_type <span class="hl sym">*</span>p0<span class="hl sym">, *</span>p <span class="hl sym">;</span>

  p0 <span class="hl sym">=</span> malloc<span class="hl sym">(</span>n <span class="hl sym">*</span> sizeof<span class="hl sym">(</span>ats_double_type<span class="hl sym">)) ;</span>
  p <span class="hl sym">=</span> p0 <span class="hl sym">;</span>

  <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> n<span class="hl sym">; ++</span>i<span class="hl sym">) { *</span>p <span class="hl sym">=</span> f<span class="hl sym">; ++</span>p<span class="hl sym">; }</span>
  return p0 <span class="hl sym">;</span>
<span class="hl sym">}</span>

static inline
ats_void_type
darray_free <span class="hl sym">(</span>ats_ptr_type A<span class="hl sym">) {</span> free <span class="hl sym">(</span>A<span class="hl sym">) ;</span> return <span class="hl sym">; }</span>

static inline
ats_double_type
darray_get <span class="hl sym">(</span>ats_ptr_type A<span class="hl sym">,</span> ats_int_type i<span class="hl sym">) {</span>
  return <span class="hl sym">((</span>ats_double_type *)A<span class="hl sym">)[</span>i<span class="hl sym">] ;</span>
<span class="hl sym">}</span>

static inline
ats_void_type
darray_set <span class="hl sym">(</span>ats_ptr_type A<span class="hl sym">,</span> ats_int_type i<span class="hl sym">,</span> ats_double_type f<span class="hl sym">) {</span>
  <span class="hl sym">((</span>ats_double_type *)A<span class="hl sym">)[</span>i<span class="hl sym">] =</span> f <span class="hl sym">;</span> return <span class="hl sym">;</span>
<span class="hl sym">}</span>

static inline
ats_double_type eval_A <span class="hl sym">(</span>ats_int_type i<span class="hl sym">,</span> ats_int_type j<span class="hl sym">) {</span>
  return <span class="hl num">1.0</span><span class="hl sym">/((</span>i<span class="hl sym">+</span>j<span class="hl sym">)*(</span>i<span class="hl sym">+</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)/</span><span class="hl num">2</span><span class="hl sym">+</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl sym">%}</span>

absviewt&#64;ype darray <span class="hl sym">(</span>n<span class="hl sym">:</span>int<span class="hl sym">) //</span> it is linear<span class="hl sym">,</span> so it cannot be leaked<span class="hl sym">.</span>

<span class="hl kwa">extern fun</span> darray_make <span class="hl sym">{</span>n<span class="hl sym">:</span>nat<span class="hl sym">}</span>
  <span class="hl sym">(</span>n<span class="hl sym">:</span> int n<span class="hl sym">,</span> d<span class="hl sym">:</span> double<span class="hl sym">): [</span>l<span class="hl sym">:</span>addr<span class="hl sym">] (</span>darray n &#64; l <span class="hl sym">|</span> ptr l<span class="hl sym">)</span>
  <span class="hl sym">=</span> <span class="hl str">&quot;darray_make&quot;</span>

<span class="hl kwa">extern fun</span> darray_free
  <span class="hl sym">{</span>n<span class="hl sym">:</span>nat<span class="hl sym">} {</span>l<span class="hl sym">:</span>addr<span class="hl sym">} (</span>pf<span class="hl sym">:</span> darray n &#64; l <span class="hl sym">|</span> p<span class="hl sym">:</span> ptr l<span class="hl sym">):</span> void
  <span class="hl sym">=</span> <span class="hl str">&quot;darray_free&quot;</span>

<span class="hl kwa">extern fun</span> darray_get <span class="hl sym">{</span>n<span class="hl sym">:</span>nat<span class="hl sym">}</span>
  <span class="hl sym">(</span>A<span class="hl sym">: &amp;</span>darray n<span class="hl sym">,</span> i<span class="hl sym">:</span> natLt n<span class="hl sym">):</span> double <span class="hl sym">=</span> <span class="hl str">&quot;darray_get&quot;</span>

<span class="hl kwa">extern fun</span> darray_set <span class="hl sym">{</span>n<span class="hl sym">:</span>nat<span class="hl sym">}</span>
  <span class="hl sym">(</span>A<span class="hl sym">: &amp;</span>darray n<span class="hl sym">,</span> i<span class="hl sym">:</span> natLt n<span class="hl sym">,</span> d<span class="hl sym">:</span> double<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl str">&quot;darray_set&quot;</span>

<span class="hl kwa">overload</span> <span class="hl sym">[]</span> <span class="hl kwa">with</span> darray_get
<span class="hl kwa">overload</span> <span class="hl sym">[]</span> <span class="hl kwa">with</span> darray_set

<span class="hl sym">//</span>

<span class="hl kwa">extern fun</span> eval_A <span class="hl sym">(</span>i<span class="hl sym">:</span> int<span class="hl sym">,</span> j<span class="hl sym">:</span> int<span class="hl sym">):</span> double <span class="hl sym">=</span> <span class="hl str">&quot;eval_A&quot;</span>

<span class="hl kwa">fn</span> eval_A_times_u <span class="hl sym">{</span>N<span class="hl sym">:</span>nat<span class="hl sym">}</span>
  <span class="hl sym">(</span>N<span class="hl sym">:</span> int N<span class="hl sym">,</span> u<span class="hl sym">: &amp;</span>darray N<span class="hl sym">,</span> Au<span class="hl sym">: &amp;</span>darray N<span class="hl sym">):</span> void <span class="hl sym">=</span>
  <span class="hl kwa">let</span>
     <span class="hl kwa">fun</span> loop2 <span class="hl sym">{</span>i<span class="hl sym">,</span>j<span class="hl sym">:</span>nat <span class="hl sym">|</span> i <span class="hl sym">&lt;</span> N<span class="hl sym">;</span> j <span class="hl sym">&lt;=</span> N<span class="hl sym">} .&lt;</span>N<span class="hl sym">-</span>j<span class="hl sym">&gt;.</span>
       <span class="hl sym">(</span>u<span class="hl sym">: &amp;</span>darray N<span class="hl sym">,</span> Au<span class="hl sym">: &amp;</span>darray N<span class="hl sym">,</span> i<span class="hl sym">:</span> int i<span class="hl sym">,</span> j<span class="hl sym">:</span> int j<span class="hl sym">):&lt;</span>cloptr1<span class="hl sym">&gt;</span> void <span class="hl sym">=</span>
       <span class="hl kwa">if</span> j <span class="hl sym">&lt;</span> N <span class="hl kwa">then begin</span>
         Au<span class="hl sym">[</span>i<span class="hl sym">] :=</span> Au<span class="hl sym">[</span>i<span class="hl sym">] +</span> eval_A<span class="hl sym">(</span>i<span class="hl sym">,</span> j<span class="hl sym">) *</span> u<span class="hl sym">[</span>j<span class="hl sym">];</span> loop2 <span class="hl sym">(</span>u<span class="hl sym">,</span> Au<span class="hl sym">,</span> i<span class="hl sym">,</span> j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>
       <span class="hl kwa">end</span>

     <span class="hl kwa">fun</span> loop1 <span class="hl sym">{</span>i<span class="hl sym">:</span>nat <span class="hl sym">|</span> i <span class="hl sym">&lt;=</span> N<span class="hl sym">} .&lt;</span>N<span class="hl sym">-</span>i<span class="hl sym">&gt;.</span>
       <span class="hl sym">(</span>u<span class="hl sym">: &amp;</span>darray N<span class="hl sym">,</span> Au<span class="hl sym">: &amp;</span>darray N<span class="hl sym">,</span> i<span class="hl sym">:</span> int i<span class="hl sym">):&lt;</span>cloptr1<span class="hl sym">&gt;</span> void <span class="hl sym">=</span>
       <span class="hl kwa">if</span> i <span class="hl sym">&lt;</span> N <span class="hl kwa">then begin</span>
         Au<span class="hl sym">[</span>i<span class="hl sym">] :=</span> <span class="hl num">0.0</span><span class="hl sym">;</span> loop2 <span class="hl sym">(</span>u<span class="hl sym">,</span> Au<span class="hl sym">,</span> i<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">);</span> loop1 <span class="hl sym">(</span>u<span class="hl sym">,</span> Au<span class="hl sym">,</span> i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>
       <span class="hl kwa">end</span>
  <span class="hl kwa">in</span>
     loop1 <span class="hl sym">(</span>u<span class="hl sym">,</span> Au<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">)</span>
  <span class="hl kwa">end</span>

<span class="hl sym">//</span>

<span class="hl kwa">fn</span> eval_At_times_u <span class="hl sym">{</span>N<span class="hl sym">:</span>nat<span class="hl sym">}</span>
  <span class="hl sym">(</span>N<span class="hl sym">:</span> int N<span class="hl sym">,</span> u<span class="hl sym">: &amp;</span>darray N<span class="hl sym">,</span> Au<span class="hl sym">: &amp;</span>darray N<span class="hl sym">):</span> void <span class="hl sym">=</span>
  <span class="hl kwa">let</span>
     <span class="hl kwa">fun</span> loop2 <span class="hl sym">{</span>i<span class="hl sym">,</span>j<span class="hl sym">:</span>nat <span class="hl sym">|</span> i <span class="hl sym">&lt;</span> N<span class="hl sym">;</span> j <span class="hl sym">&lt;=</span> N<span class="hl sym">} .&lt;</span>N<span class="hl sym">-</span>j<span class="hl sym">&gt;.</span>
       <span class="hl sym">(</span>u<span class="hl sym">: &amp;</span>darray N<span class="hl sym">,</span> Au<span class="hl sym">: &amp;</span>darray N<span class="hl sym">,</span> i<span class="hl sym">:</span> int i<span class="hl sym">,</span> j<span class="hl sym">:</span> int j<span class="hl sym">):&lt;</span>cloptr1<span class="hl sym">&gt;</span> void <span class="hl sym">=</span>
       <span class="hl kwa">if</span> j <span class="hl sym">&lt;</span> N <span class="hl kwa">then begin</span>
         Au<span class="hl sym">[</span>i<span class="hl sym">] :=</span> Au<span class="hl sym">[</span>i<span class="hl sym">] +</span> eval_A<span class="hl sym">(</span>j<span class="hl sym">,</span> i<span class="hl sym">) *</span> u<span class="hl sym">[</span>j<span class="hl sym">];</span> loop2 <span class="hl sym">(</span>u<span class="hl sym">,</span> Au<span class="hl sym">,</span> i<span class="hl sym">,</span> j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>
       <span class="hl kwa">end</span>

     <span class="hl kwa">fun</span> loop1 <span class="hl sym">{</span>i<span class="hl sym">:</span>nat <span class="hl sym">|</span> i <span class="hl sym">&lt;=</span> N<span class="hl sym">} .&lt;</span>N<span class="hl sym">-</span>i<span class="hl sym">&gt;.</span>
       <span class="hl sym">(</span>u<span class="hl sym">: &amp;</span>darray N<span class="hl sym">,</span> Au<span class="hl sym">: &amp;</span>darray N<span class="hl sym">,</span> i<span class="hl sym">:</span> int i<span class="hl sym">):&lt;</span>cloptr1<span class="hl sym">&gt;</span> void <span class="hl sym">=</span>
       <span class="hl kwa">if</span> i <span class="hl sym">&lt;</span> N <span class="hl kwa">then begin</span>
         Au<span class="hl sym">[</span>i<span class="hl sym">] :=</span> <span class="hl num">0.0</span><span class="hl sym">;</span> loop2 <span class="hl sym">(</span>u<span class="hl sym">,</span> Au<span class="hl sym">,</span> i<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">);</span> loop1 <span class="hl sym">(</span>u<span class="hl sym">,</span> Au<span class="hl sym">,</span> i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>
       <span class="hl kwa">end</span>
  <span class="hl kwa">in</span>
     loop1 <span class="hl sym">(</span>u<span class="hl sym">,</span> Au<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">)</span>
  <span class="hl kwa">end</span>

<span class="hl kwa">fn</span> eval_AtA_times_u <span class="hl sym">{</span>N<span class="hl sym">:</span>nat<span class="hl sym">}</span>
  <span class="hl sym">(</span>N<span class="hl sym">:</span> int N<span class="hl sym">,</span> u<span class="hl sym">: &amp;</span>darray N<span class="hl sym">,</span> AtAu<span class="hl sym">: &amp;</span>darray N<span class="hl sym">):&lt;</span>cloptr1<span class="hl sym">&gt;</span> void <span class="hl sym">=</span>
  <span class="hl kwa">let</span>
     <span class="hl kwa">val</span> <span class="hl sym">(</span>pf <span class="hl sym">|</span> p_v<span class="hl sym">) =</span> darray_make <span class="hl sym">(</span>N<span class="hl sym">,</span> <span class="hl num">0.0</span><span class="hl sym">)</span>
  <span class="hl kwa">in</span>
     eval_A_times_u<span class="hl sym">(</span>N<span class="hl sym">,</span> u<span class="hl sym">, !</span>p_v<span class="hl sym">);</span>
     eval_At_times_u <span class="hl sym">(</span>N<span class="hl sym">, !</span>p_v<span class="hl sym">,</span> AtAu<span class="hl sym">);</span>
     darray_free <span class="hl sym">(</span>pf <span class="hl sym">|</span> p_v<span class="hl sym">)</span>
  <span class="hl kwa">end</span>

<span class="hl sym">//</span>

<span class="hl dir">#define TIMES 10</span>

<span class="hl kwa">implement</span> main <span class="hl sym">(</span>argc<span class="hl sym">,</span> argv<span class="hl sym">) =</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> assert_errmsg <span class="hl sym">(</span>argc <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">,</span> <span class="hl str">&quot;Exit: wrong command format!</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">[</span>N<span class="hl sym">:</span>int<span class="hl sym">]</span> N <span class="hl sym">=</span> int1_of_string argv<span class="hl sym">.[</span><span class="hl num">1</span><span class="hl sym">]</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> assert_errmsg <span class="hl sym">(</span>
    N <span class="hl sym">&gt;=</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl str">&quot;The input integer needs to be a natural number.</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
  <span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">(</span>pf_u <span class="hl sym">|</span> p_u<span class="hl sym">) =</span> darray_make <span class="hl sym">(</span>N<span class="hl sym">,</span> <span class="hl num">1.0</span><span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">(</span>pf_v <span class="hl sym">|</span> p_v<span class="hl sym">) =</span> darray_make <span class="hl sym">(</span>N<span class="hl sym">,</span> <span class="hl num">0.0</span><span class="hl sym">)</span>
  <span class="hl kwa">fun</span> loop1 <span class="hl sym">{</span>i<span class="hl sym">:</span>nat <span class="hl sym">|</span> i <span class="hl sym">&lt;=</span> TIMES<span class="hl sym">} .&lt;</span>TIMES<span class="hl sym">-</span>i<span class="hl sym">&gt;.</span>
    <span class="hl sym">(</span>u<span class="hl sym">: &amp;</span>darray N<span class="hl sym">,</span> v<span class="hl sym">: &amp;</span>darray N<span class="hl sym">,</span> i<span class="hl sym">:</span> int i<span class="hl sym">):&lt;</span>cloptr1<span class="hl sym">&gt;</span> void <span class="hl sym">=</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> TIMES<span class="hl sym">)</span> <span class="hl kwa">then begin</span>
      eval_AtA_times_u<span class="hl sym">(</span>N<span class="hl sym">,</span> u<span class="hl sym">,</span> v<span class="hl sym">);</span> eval_AtA_times_u<span class="hl sym">(</span>N<span class="hl sym">,</span> v<span class="hl sym">,</span> u<span class="hl sym">);</span> loop1 <span class="hl sym">(</span>u<span class="hl sym">,</span> v<span class="hl sym">,</span> i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> loop1 <span class="hl sym">(!</span>p_u<span class="hl sym">, !</span>p_v<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">)</span>
  <span class="hl kwa">fun</span> loop2 <span class="hl sym">{</span>i<span class="hl sym">:</span>nat<span class="hl sym">|</span> i <span class="hl sym">&lt;=</span> N<span class="hl sym">} .&lt;</span>N<span class="hl sym">-</span>i<span class="hl sym">&gt;.</span>
    <span class="hl sym">(</span>u<span class="hl sym">: &amp;</span>darray N<span class="hl sym">,</span> v<span class="hl sym">: &amp;</span>darray N<span class="hl sym">,</span>
     vBv<span class="hl sym">:</span> double<span class="hl sym">,</span> vv<span class="hl sym">:</span> double<span class="hl sym">,</span> i<span class="hl sym">:</span> int i<span class="hl sym">):&lt;</span>cloptr1<span class="hl sym">&gt;</span> &#64;<span class="hl sym">(</span>double<span class="hl sym">,</span> double<span class="hl sym">) =</span>
    <span class="hl kwa">if</span> i <span class="hl sym">&lt;</span> N <span class="hl kwa">then</span>
      <span class="hl kwa">let val</span> ui <span class="hl sym">=</span> u<span class="hl sym">[</span>i<span class="hl sym">]</span> <span class="hl kwa">and</span> vi <span class="hl sym">=</span> v<span class="hl sym">[</span>i<span class="hl sym">]</span> <span class="hl kwa">in</span>
        loop2 <span class="hl sym">(</span>u<span class="hl sym">,</span> v<span class="hl sym">,</span> vBv<span class="hl sym">+</span>ui<span class="hl sym">*</span>vi<span class="hl sym">,</span> vv<span class="hl sym">+</span>vi<span class="hl sym">*</span>vi<span class="hl sym">,</span> i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>
      <span class="hl kwa">end</span>
    <span class="hl kwa">else</span> <span class="hl sym">(</span>vBv<span class="hl sym">,</span> vv<span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">(</span>vBv<span class="hl sym">,</span> vv<span class="hl sym">) =</span> loop2 <span class="hl sym">(!</span>p_u<span class="hl sym">, !</span>p_v<span class="hl sym">,</span> <span class="hl num">0.0</span><span class="hl sym">,</span> <span class="hl num">0.0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">)</span>
  <span class="hl kwa">val</span> <span class="hl sym">() = (</span>darray_free <span class="hl sym">(</span>pf_u <span class="hl sym">|</span> p_u<span class="hl sym">);</span> darray_free <span class="hl sym">(</span>pf_v <span class="hl sym">|</span> p_v<span class="hl sym">))</span>
<span class="hl kwa">in</span>
  printf<span class="hl sym">(</span><span class="hl str">&quot;%0.9f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> &#64;<span class="hl sym">(</span>$M<span class="hl sym">.</span>sqrt <span class="hl sym">(</span>vBv<span class="hl sym">/</span>vv<span class="hl sym">)))</span>
<span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>main<span class="hl sym">]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl com">(* end of [spectral-norm.dats] *)</span>
