
Thu, 25 Nov 2010 22:40:56 GMT

MAKE:
cp: `mandelbrot.sbcl' and `./mandelbrot.sbcl' are the same file
SBCL built with: /usr/local/bin/sbcl --userinit /dev/null --batch --eval '(load "mandelbrot.sbcl_compile")'
### START mandelbrot.sbcl_compile
(handler-bind ((sb-ext:defconstant-uneql      (lambda (c) (abort c))))      (load (compile-file "mandelbrot.sbcl" ))) (save-lisp-and-die "sbcl.core" :purify t)
### END mandelbrot.sbcl_compile


; compiling file "/home/dunham/shootout/bench/mandelbrot/mandelbrot.sbcl" (written 21 FEB 2009 04:20:24 PM):
; compiling (DEFTYPE INDEX ...)
; compiling (DECLAIM (INLINE IN-SET-P))
; compiling (DEFUN IN-SET-P ...)
; compiling (DEFUN RENDER ...)
; file: /home/dunham/shootout/bench/mandelbrot/mandelbrot.sbcl
; in: DEFUN RENDER
;     (LOOP REPEAT NPROC
;           COLLECT (SB-THREAD:MAKE-THREAD #'COMPUTE-ROWS))
; --> BLOCK LET SB-LOOP::WITH-LOOP-LIST-COLLECTION-HEAD LET* SB-LOOP::LOOP-BODY 
; --> TAGBODY IF <= IF 
; ==>
;   (> SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       etc.

; --> BLOCK LET SB-LOOP::WITH-LOOP-LIST-COLLECTION-HEAD LET* SB-LOOP::LOOP-BODY 
; --> TAGBODY IF DECF LET* 
; ==>
;   (- #:LOOP-REPEAT-35 #:G39)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (INTEGER 1), not a FIXNUM.
;       The result is a (VALUES UNSIGNED-BYTE &OPTIONAL), not a (VALUES FIXNUM
;                                                                       &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (INTEGER 1), not a FIXNUM.
;       The result is a (VALUES UNSIGNED-BYTE &OPTIONAL), not a (VALUES FIXNUM
;                                                                       &REST T).
;       etc.

;     (DEFUN RENDER (SIZE STREAM &OPTIONAL (NPROC 1))
;       (DECLARE (TYPE (INTEGER 8 10000) SIZE)
;                (STREAM STREAM)
;                (TYPE (INTEGER 1) NPROC)
;                (OPTIMIZE SPEED))
;       (ASSERT (ZEROP (MOD SIZE 8)))
;       (LET* ((DELTA (/ 2.0d0 SIZE))
;              (BUFFER (MAKE-ARRAY # :ELEMENT-TYPE '#))
;              (CUR-ROW (LIST 0)))
;         (LABELS ((COMPUTE-ROW #
;                    #
;                    #)
;                  (GET-NEXT-ROW #
;                    #)
;                  (COMPUTE-ROWS #
;                    #
;                    NIL))
;           (IF (= NPROC 1)
;               (COMPUTE-ROWS)
;               (MAPC #'SB-THREAD:JOIN-THREAD #)))
;         (WRITE-SEQUENCE BUFFER STREAM)))
; --> PROGN EVAL-WHEN SB-IMPL::%DEFUN COND IF COND IF PROGN SB-C::%FUNCALL 
; --> MULTIPLE-VALUE-BIND LET UNLESS IF TYPEP LET AND IF AND THE LOCALLY AND 
; --> THE >= IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

;     (LABELS ((COMPUTE-ROW (BASE-IMAG ROW-INDEX)
;                (DECLARE (TYPE DOUBLE-FLOAT BASE-IMAG)
;                         (TYPE INDEX ROW-INDEX)
;                         (OPTIMIZE #))
;                (LOOP FOR X OF-TYPE INDEX BELOW SIZE BY 8
;                      FOR INDEX OF-TYPE ...))
;              (GET-NEXT-ROW ()
;                (LOOP FOR OLD-Y OF-TYPE INDEX = (CAR CUR-ROW)
;                      WHEN (EQ OLD-Y #)
;                      DO (RETURN OLD-Y)))
;              (COMPUTE-ROWS ()
;                (LOOP FOR Y = (GET-NEXT-ROW)
;                      WHILE (< Y SIZE)
;                      DO (LET #
;                           #))
;                NIL))
;       (IF (= NPROC 1)
;           (COMPUTE-ROWS)
;           (MAPC #'SB-THREAD:JOIN-THREAD
;                 (LOOP REPEAT NPROC
;                       COLLECT (SB-THREAD:MAKE-THREAD #'COMPUTE-ROWS)))))
; --> SB-C::%%ALLOCATE-CLOSURES 
; ==>
;   (SB-C::%ALLOCATE-CLOSURES
;    '(#<SB-C::CLAMBDA
;        :%SOURCE-NAME COMPUTE-ROW
;        :%DEBUG-NAME (LABELS COMPUTE-ROW)
;        :KIND :ZOMBIE
;        :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
;        :WHERE-FROM :DEFINED
;        :VARS (BASE-IMAG ROW-INDEX) {AAC1001}>
;      #<SB-C::CLAMBDA
;        :%SOURCE-NAME GET-NEXT-ROW
;        :%DEBUG-NAME (LABELS GET-NEXT-ROW)
;        :KIND :ZOMBIE
;        :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
;        :WHERE-FROM :DEFINED
;        :VARS NIL {AAD7001}>
;      #<SB-C::CLAMBDA
;        :%SOURCE-NAME COMPUTE-ROWS
;        :%DEBUG-NAME (LABELS COMPUTE-ROWS)
;        :KIND NIL
;        :TYPE #<SB-KERNEL:FUN-TYPE #>
;        :WHERE-FROM :DEFINED
;        :VARS NIL {AADE299}>))
; 
; note: doing float to pointer coercion (cost 13), for:
;       the second argument of CLOSURE-INIT

;     (COMPARE-AND-SWAP (CAR CUR-ROW) OLD-Y (1+ OLD-Y))
; ==>
;   (SB-KERNEL:%COMPARE-AND-SWAP-CAR (THE CONS CUR-ROW) OLD-Y (1+ OLD-Y))
; 
; note: doing signed word to integer coercion (cost 20), for:
;       the third argument of COMPARE-AND-SWAP-SLOT

; compiling (DEFUN MAIN ...); 
; compilation unit finished
;   printed 5 notes


; /home/dunham/benchmarksgame/mandelbrot/tmp/mandelbrot.fasl written
; compilation finished in 0:00:00.065
[undoing binding stack and other enclosing state... done]
[saving current Lisp image into sbcl.core:
writing 3512 bytes from the read-only space at 0x01000000
writing 2256 bytes from the static space at 0x01100000
writing 27107328 bytes from the dynamic space at 0x09000000
done]
### START mandelbrot.sbcl_run
(main) (quit)
### END mandelbrot.sbcl_run

0.55s to complete and log all make actions

COMMAND LINE:
/usr/local/bin/sbcl  --noinform --core sbcl.core --userinit /dev/null --load mandelbrot.sbcl_run 16000

PROGRAM FAILED 


(BINARY) PROGRAM OUTPUT NOT SHOWN


debugger invoked on a TYPE-ERROR in thread #<THREAD "initial thread" RUNNING
                                             {A9DAAE9}>:
  The value 16000 is not of type (INTEGER 8 10000).
