<span class="hl com">/*The Computer Language Benchmarks Game</span>
<span class="hl com">  http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">  contributed by Paolo Bonzini</span>
<span class="hl com">  further optimized by Jason Garrett-Glaser</span>
<span class="hl com">  pthreads added by Eckehard Berns</span>
<span class="hl com">  further optimized by Ryan Henszey</span>
<span class="hl com">  modified by Samy Al Bahra (use GCC atomic builtins)</span>
<span class="hl com">  modified by Kenneth Jonsson</span>
<span class="hl com">*/</span>

<span class="hl dir">#include &lt;stdint.h&gt;</span>
<span class="hl dir">#include &lt;stdio.h&gt;</span>
<span class="hl dir">#include &lt;stdlib.h&gt;</span>


<span class="hl kwc">typedef</span> <span class="hl kwb">double</span> v2df <span class="hl kwd">__attribute__</span> <span class="hl sym">((</span><span class="hl kwd">vector_size</span><span class="hl sym">(</span><span class="hl num">16</span><span class="hl sym">)));</span> <span class="hl com">/* vector of two doubles */</span>
<span class="hl kwc">typedef</span> <span class="hl kwb">int</span> v4si <span class="hl kwd">__attribute__</span> <span class="hl sym">((</span><span class="hl kwd">vector_size</span><span class="hl sym">(</span><span class="hl num">16</span><span class="hl sym">)));</span> <span class="hl com">/* vector of four ints */</span>


<span class="hl kwb">const</span> v2df zero <span class="hl sym">= {</span> <span class="hl num">0.0</span><span class="hl sym">,</span> <span class="hl num">0.0</span> <span class="hl sym">};</span>
<span class="hl kwb">const</span> v2df four <span class="hl sym">= {</span> <span class="hl num">4.0</span><span class="hl sym">,</span> <span class="hl num">4.0</span> <span class="hl sym">};</span>

<span class="hl com">/*</span>
<span class="hl com"> * Constant throughout the program, value depends on N</span>
<span class="hl com"> */</span>
<span class="hl kwb">int</span> bytes_per_row<span class="hl sym">;</span>
<span class="hl kwb">double</span> inverse_w<span class="hl sym">;</span>
<span class="hl kwb">double</span> inverse_h<span class="hl sym">;</span>

<span class="hl com">/*</span>
<span class="hl com"> * Program argument: height and width of the image</span>
<span class="hl com"> */</span>
<span class="hl kwb">int</span> N<span class="hl sym">;</span>

<span class="hl com">/*</span>
<span class="hl com"> * Lookup table for initial real-axis value</span>
<span class="hl com"> */</span>
v2df <span class="hl sym">*</span>Crvs<span class="hl sym">;</span>

<span class="hl com">/*</span>
<span class="hl com"> * Mandelbrot bitmap</span>
<span class="hl com"> */</span>
<span class="hl kwb">uint8_t</span> <span class="hl sym">*</span>bitmap<span class="hl sym">;</span>


<span class="hl kwb">static void</span> <span class="hl kwd">calc_row</span><span class="hl sym">(</span><span class="hl kwb">int</span> y<span class="hl sym">) {</span>
    <span class="hl kwb">uint8_t</span> <span class="hl sym">*</span>row_bitmap <span class="hl sym">=</span> bitmap <span class="hl sym">+ (</span>bytes_per_row <span class="hl sym">*</span> y<span class="hl sym">);</span>
    <span class="hl kwb">int</span> x<span class="hl sym">;</span>
    <span class="hl kwb">const</span> v2df Civ_init <span class="hl sym">= {</span> y<span class="hl sym">*</span>inverse_h<span class="hl sym">-</span><span class="hl num">1.0</span><span class="hl sym">,</span> y<span class="hl sym">*</span>inverse_h<span class="hl sym">-</span><span class="hl num">1.0</span> <span class="hl sym">};</span>

    <span class="hl kwa">for</span> <span class="hl sym">(</span>x<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> x<span class="hl sym">&lt;</span>N<span class="hl sym">;</span> x<span class="hl sym">+=</span><span class="hl num">2</span><span class="hl sym">)</span>
    <span class="hl sym">{</span>
        v2df Crv <span class="hl sym">=</span> Crvs<span class="hl sym">[</span>x <span class="hl sym">&gt;&gt;</span> <span class="hl num">1</span><span class="hl sym">];</span>
        v2df Civ <span class="hl sym">=</span> Civ_init<span class="hl sym">;</span>
        v2df Zrv <span class="hl sym">=</span> zero<span class="hl sym">;</span>
        v2df Ziv <span class="hl sym">=</span> zero<span class="hl sym">;</span>
        v2df Trv <span class="hl sym">=</span> zero<span class="hl sym">;</span>
        v2df Tiv <span class="hl sym">=</span> zero<span class="hl sym">;</span>
        <span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">50</span><span class="hl sym">;</span>
        <span class="hl kwb">int</span> two_pixels<span class="hl sym">;</span>
        v2df is_still_bounded<span class="hl sym">;</span>

        <span class="hl kwa">do</span> <span class="hl sym">{</span>
            Ziv <span class="hl sym">= (</span>Zrv<span class="hl sym">*</span>Ziv<span class="hl sym">) + (</span>Zrv<span class="hl sym">*</span>Ziv<span class="hl sym">) +</span> Civ<span class="hl sym">;</span>
            Zrv <span class="hl sym">=</span> Trv <span class="hl sym">-</span> Tiv <span class="hl sym">+</span> Crv<span class="hl sym">;</span>
            Trv <span class="hl sym">=</span> Zrv <span class="hl sym">*</span> Zrv<span class="hl sym">;</span>
            Tiv <span class="hl sym">=</span> Ziv <span class="hl sym">*</span> Ziv<span class="hl sym">;</span>

            <span class="hl com">/*</span>
<span class="hl com">             * All bits will be set to 1 if 'Trv + Tiv' is less than 4</span>
<span class="hl com">             * and all bits will be set to 0 otherwise. Two elements</span>
<span class="hl com">             * are calculated in parallel here.</span>
<span class="hl com">             */</span>
            is_still_bounded <span class="hl sym">=</span> <span class="hl kwd">__builtin_ia32_cmplepd</span><span class="hl sym">(</span>Trv <span class="hl sym">+</span> Tiv<span class="hl sym">,</span> four<span class="hl sym">);</span>

            <span class="hl com">/*</span>
<span class="hl com">             * Move the sign-bit of the low element to bit 0, move the</span>
<span class="hl com">             * sign-bit of the high element to bit 1. The result is</span>
<span class="hl com">             * that the pixel will be set if the calculation was</span>
<span class="hl com">             * bounded.</span>
<span class="hl com">             */</span>
            two_pixels <span class="hl sym">=</span> <span class="hl kwd">__builtin_ia32_movmskpd</span><span class="hl sym">(</span>is_still_bounded<span class="hl sym">);</span>
        <span class="hl sym">}</span> <span class="hl kwa">while</span> <span class="hl sym">(--</span>i <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl sym">&amp;&amp;</span> two_pixels<span class="hl sym">);</span>

        <span class="hl com">/*</span>
<span class="hl com">         * The pixel bits must be in the most and second most</span>
<span class="hl com">         * significant position</span>
<span class="hl com">         */</span>
        two_pixels <span class="hl sym">&lt;&lt;=</span> <span class="hl num">6</span><span class="hl sym">;</span>

        <span class="hl com">/*</span>
<span class="hl com">         * Add the two pixels to the bitmap, all bits are</span>
<span class="hl com">         * initially zero since the area was allocated with</span>
<span class="hl com">         * calloc()</span>
<span class="hl com">         */</span>
        row_bitmap<span class="hl sym">[</span>x <span class="hl sym">&gt;&gt;</span> <span class="hl num">3</span><span class="hl sym">] |= (</span><span class="hl kwb">uint8_t</span><span class="hl sym">) (</span>two_pixels <span class="hl sym">&gt;&gt; (</span>x <span class="hl sym">&amp;</span> <span class="hl num">7</span><span class="hl sym">));</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span> <span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">**</span>argv<span class="hl sym">)</span>
<span class="hl sym">{</span>
    <span class="hl kwb">int</span> i<span class="hl sym">;</span>

    N <span class="hl sym">=</span> <span class="hl kwd">atoi</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]);</span>
    bytes_per_row <span class="hl sym">= (</span>N <span class="hl sym">+</span> <span class="hl num">7</span><span class="hl sym">) &gt;&gt;</span> <span class="hl num">3</span><span class="hl sym">;</span>

    inverse_w <span class="hl sym">=</span> <span class="hl num">2.0</span> <span class="hl sym">/ (</span>bytes_per_row <span class="hl sym">&lt;&lt;</span> <span class="hl num">3</span><span class="hl sym">);</span>
    inverse_h <span class="hl sym">=</span> <span class="hl num">2.0</span> <span class="hl sym">/</span> N<span class="hl sym">;</span>

    Crvs <span class="hl sym">=</span> <span class="hl kwd">malloc</span><span class="hl sym">(</span><span class="hl kwa">sizeof</span><span class="hl sym">(</span>v2df<span class="hl sym">) *</span> N <span class="hl sym">/</span> <span class="hl num">2</span><span class="hl sym">);</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>Crvs <span class="hl sym">==</span> NULL<span class="hl sym">)</span>
        <span class="hl kwa">return</span> EXIT_FAILURE<span class="hl sym">;</span>

<span class="hl dir">#pragma omp parallel for</span>
    <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> N<span class="hl sym">;</span> i<span class="hl sym">+=</span><span class="hl num">2</span><span class="hl sym">) {</span>
        v2df Crv <span class="hl sym">= { (</span>i<span class="hl sym">+</span><span class="hl num">1.0</span><span class="hl sym">)*</span>inverse_w<span class="hl sym">-</span><span class="hl num">1.5</span><span class="hl sym">, (</span>i<span class="hl sym">)*</span>inverse_w<span class="hl sym">-</span><span class="hl num">1.5</span> <span class="hl sym">};</span>
        Crvs<span class="hl sym">[</span>i <span class="hl sym">&gt;&gt;</span> <span class="hl num">1</span><span class="hl sym">] =</span> Crv<span class="hl sym">;</span>
    <span class="hl sym">}</span>

    bitmap <span class="hl sym">=</span> <span class="hl kwd">calloc</span><span class="hl sym">(</span>bytes_per_row<span class="hl sym">,</span> N<span class="hl sym">);</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>bitmap <span class="hl sym">==</span> NULL<span class="hl sym">)</span>
        <span class="hl kwa">return</span> EXIT_FAILURE<span class="hl sym">;</span>

<span class="hl dir">#pragma omp parallel for schedule(static,1)</span>
    <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> N<span class="hl sym">;</span> i<span class="hl sym">++)</span>
        <span class="hl kwd">calc_row</span><span class="hl sym">(</span>i<span class="hl sym">);</span>

    <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">%d %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> N<span class="hl sym">,</span> N<span class="hl sym">);</span>
    <span class="hl kwd">fwrite</span><span class="hl sym">(</span>bitmap<span class="hl sym">,</span> bytes_per_row<span class="hl sym">,</span> N<span class="hl sym">,</span> stdout<span class="hl sym">);</span>

    <span class="hl kwd">free</span><span class="hl sym">(</span>bitmap<span class="hl sym">);</span>
    <span class="hl kwd">free</span><span class="hl sym">(</span>Crvs<span class="hl sym">);</span>

    <span class="hl kwa">return</span> EXIT_SUCCESS<span class="hl sym">;</span>
<span class="hl sym">}</span>
