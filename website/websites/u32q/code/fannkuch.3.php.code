<span class="hl sym">&lt;</span>?
<span class="hl com">/*</span>
<span class="hl com">   The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Isaac Gouy</span>
<span class="hl com">   multicore by anon</span>
<span class="hl com"> */</span>

<span class="hl kwa">function</span> <span class="hl kwd">Fannkuch</span><span class="hl sym">(</span><span class="hl kwc">$n</span><span class="hl sym">,</span><span class="hl kwc">$_i</span><span class="hl sym">,</span><span class="hl kwc">$print</span><span class="hl sym">){</span>
   <span class="hl kwc">$check</span> <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwc">$perm</span> <span class="hl sym">=</span> <span class="hl kwa">array</span><span class="hl sym">();</span>
   <span class="hl kwc">$perm1</span> <span class="hl sym">=</span> <span class="hl kwa">array</span><span class="hl sym">();</span>
   <span class="hl kwc">$count</span> <span class="hl sym">=</span> <span class="hl kwa">array</span><span class="hl sym">();</span>
   <span class="hl kwc">$maxFlipsCount</span> <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwc">$m</span> <span class="hl sym">=</span> <span class="hl kwc">$n</span> <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>

   <span class="hl kwc">$perm1</span> <span class="hl sym">=</span> <span class="hl kwd">range</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> <span class="hl kwc">$n</span><span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">);</span>
   <span class="hl kwc">$r</span> <span class="hl sym">=</span> <span class="hl kwc">$n</span><span class="hl sym">;</span>

   <span class="hl kwa">if</span> <span class="hl sym">(!</span><span class="hl kwc">$print</span><span class="hl sym">) {</span>
      <span class="hl kwc">$perm1</span><span class="hl sym">[</span><span class="hl kwc">$_i</span><span class="hl sym">] =</span> <span class="hl kwc">$n</span> <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl kwc">$perm1</span><span class="hl sym">[</span><span class="hl kwc">$n</span><span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">] =</span> <span class="hl kwc">$_i</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">while</span> <span class="hl sym">(</span>TRUE<span class="hl sym">) {</span>
      <span class="hl slc">// write-out the first 30 permutations</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwc">$print</span><span class="hl sym">){</span>

         <span class="hl kwa">foreach</span><span class="hl sym">(</span><span class="hl kwc">$perm1</span> <span class="hl kwa">as</span> <span class="hl kwc">$v</span><span class="hl sym">)</span> <span class="hl kwa">echo</span> <span class="hl kwc">$v</span><span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">;</span>
         <span class="hl kwa">echo</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
         <span class="hl kwa">if</span> <span class="hl sym">(++</span><span class="hl kwc">$check</span> <span class="hl sym">&gt;=</span> <span class="hl num">30</span><span class="hl sym">) {</span>
            <span class="hl kwa">return</span> <span class="hl kwd">Fannkuch</span><span class="hl sym">(</span><span class="hl kwc">$n</span><span class="hl sym">,</span> <span class="hl kwc">$_i</span><span class="hl sym">,</span> FALSE<span class="hl sym">);</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">while</span> <span class="hl sym">(</span><span class="hl kwc">$r</span> <span class="hl sym">!==</span> <span class="hl num">1</span><span class="hl sym">){</span>
         <span class="hl kwc">$count</span><span class="hl sym">[</span><span class="hl kwc">$r</span><span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">] =</span> <span class="hl kwc">$r</span><span class="hl sym">--;</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwc">$perm1</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] !==</span> <span class="hl num">0</span> <span class="hl sym">&amp;&amp;</span> <span class="hl kwc">$perm1</span><span class="hl sym">[</span><span class="hl kwc">$m</span><span class="hl sym">] !==</span> <span class="hl kwc">$m</span><span class="hl sym">){</span>
         <span class="hl kwc">$perm</span> <span class="hl sym">=</span> <span class="hl kwc">$perm1</span><span class="hl sym">;</span>
         <span class="hl kwc">$flipsCount</span> <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

         <span class="hl kwc">$k</span> <span class="hl sym">=</span> <span class="hl kwc">$perm</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
         <span class="hl kwa">do</span> <span class="hl sym">{</span>
            <span class="hl kwc">$i</span> <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span>
            <span class="hl kwc">$j</span> <span class="hl sym">=</span> <span class="hl kwc">$k</span> <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>
            <span class="hl kwa">while</span> <span class="hl sym">(</span><span class="hl kwc">$i</span> <span class="hl sym">&lt;</span> <span class="hl kwc">$j</span><span class="hl sym">) {</span>
               <span class="hl kwc">$tmp</span> <span class="hl sym">=</span> <span class="hl kwc">$perm</span><span class="hl sym">[</span><span class="hl kwc">$i</span><span class="hl sym">];</span>
               <span class="hl kwc">$perm</span><span class="hl sym">[</span><span class="hl kwc">$i</span><span class="hl sym">++] =</span> <span class="hl kwc">$perm</span><span class="hl sym">[</span><span class="hl kwc">$j</span><span class="hl sym">];</span>
               <span class="hl kwc">$perm</span><span class="hl sym">[</span><span class="hl kwc">$j</span><span class="hl sym">--] =</span> <span class="hl kwc">$tmp</span><span class="hl sym">;</span>
            <span class="hl sym">}</span>
            <span class="hl sym">++</span><span class="hl kwc">$flipsCount</span><span class="hl sym">;</span>
            <span class="hl kwc">$tmp</span> <span class="hl sym">=</span> <span class="hl kwc">$perm</span><span class="hl sym">[</span><span class="hl kwc">$k</span><span class="hl sym">];</span>
            <span class="hl kwc">$perm</span><span class="hl sym">[</span><span class="hl kwc">$k</span><span class="hl sym">] =</span> <span class="hl kwc">$k</span><span class="hl sym">;</span>
         <span class="hl sym">}</span> <span class="hl kwa">while</span> <span class="hl sym">(</span><span class="hl kwc">$k</span> <span class="hl sym">=</span> <span class="hl kwc">$tmp</span><span class="hl sym">);</span>

         <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwc">$flipsCount</span> <span class="hl sym">&gt;</span> <span class="hl kwc">$maxFlipsCount</span><span class="hl sym">) {</span>
            <span class="hl kwc">$maxFlipsCount</span> <span class="hl sym">=</span> <span class="hl kwc">$flipsCount</span><span class="hl sym">;</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">do</span> <span class="hl sym">{</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwc">$r</span> <span class="hl sym">&gt;=</span> <span class="hl kwc">$m</span><span class="hl sym">)</span> <span class="hl kwa">return</span> <span class="hl kwc">$maxFlipsCount</span><span class="hl sym">;</span>
         <span class="hl kwc">$perm0</span> <span class="hl sym">=</span> <span class="hl kwc">$perm1</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
         <span class="hl kwc">$i</span> <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         <span class="hl kwa">while</span> <span class="hl sym">(</span><span class="hl kwc">$i</span> <span class="hl sym">&lt;</span> <span class="hl kwc">$r</span><span class="hl sym">) {</span>
            <span class="hl kwc">$perm1</span><span class="hl sym">[</span><span class="hl kwc">$i</span><span class="hl sym">++] =</span> <span class="hl kwc">$perm1</span><span class="hl sym">[</span><span class="hl kwc">$i</span><span class="hl sym">];</span>
         <span class="hl sym">}</span>
         <span class="hl kwc">$perm1</span><span class="hl sym">[</span><span class="hl kwc">$r</span><span class="hl sym">] =</span> <span class="hl kwc">$perm0</span><span class="hl sym">;</span>

         <span class="hl kwa">if</span> <span class="hl sym">(--</span><span class="hl kwc">$count</span><span class="hl sym">[</span><span class="hl kwc">$r</span><span class="hl sym">] &gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">break</span><span class="hl sym">;</span>
         <span class="hl sym">++</span><span class="hl kwc">$r</span><span class="hl sym">;</span>
      <span class="hl sym">}</span> <span class="hl kwa">while</span><span class="hl sym">(</span>TRUE<span class="hl sym">);</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>
<span class="hl kwa">function</span> <span class="hl kwd">pipe</span><span class="hl sym">() {</span>
   <span class="hl slc">// socketpair(2), alternative to pipe(2)</span>
   <span class="hl kwa">return</span> <span class="hl kwd">stream_socket_pair</span><span class="hl sym">(</span>STREAM_PF_UNIX<span class="hl sym">,</span> STREAM_SOCK_STREAM<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwc">$n</span> <span class="hl sym">= (</span><span class="hl kwb">int</span><span class="hl sym">)</span> <span class="hl kwc">$argv</span><span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">];</span>

<span class="hl slc">// fork() one process for each $n</span>
<span class="hl kwc">$pipes</span> <span class="hl sym">=</span> <span class="hl kwa">array</span><span class="hl sym">();</span>
<span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwc">$i</span> <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span> <span class="hl kwc">$i</span> <span class="hl sym">&lt;</span> <span class="hl kwc">$n</span> <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">; ++</span><span class="hl kwc">$i</span><span class="hl sym">) {</span>
   <span class="hl kwc">$pipe</span> <span class="hl sym">=</span> <span class="hl kwd">pipe</span><span class="hl sym">();</span>
   <span class="hl kwc">$pipes</span><span class="hl sym">[] =</span> <span class="hl kwc">$pipe</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
   <span class="hl kwc">$pipe</span> <span class="hl sym">=</span> <span class="hl kwc">$pipe</span><span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">];</span>
   <span class="hl kwc">$pid</span> <span class="hl sym">=</span> <span class="hl kwd">pcntl_fork</span><span class="hl sym">();</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwc">$pid</span> <span class="hl sym">=== -</span><span class="hl num">1</span><span class="hl sym">) {</span>
      <span class="hl kwa">die</span><span class="hl sym">(</span><span class="hl str">'could not fork'</span><span class="hl sym">);</span>
   <span class="hl sym">}</span> <span class="hl kwa">else if</span> <span class="hl sym">(</span><span class="hl kwc">$pid</span><span class="hl sym">) {</span>
      <span class="hl kwa">continue</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>
   <span class="hl kwc">$result</span> <span class="hl sym">=</span> <span class="hl kwd">Fannkuch</span><span class="hl sym">(</span><span class="hl kwc">$n</span><span class="hl sym">,</span><span class="hl kwc">$i</span><span class="hl sym">,</span>FALSE<span class="hl sym">);</span>
   <span class="hl kwd">fwrite</span><span class="hl sym">(</span><span class="hl kwc">$pipe</span><span class="hl sym">,</span> <span class="hl kwd">pack</span><span class="hl sym">(</span><span class="hl str">'N'</span><span class="hl sym">,</span> <span class="hl kwc">$result</span><span class="hl sym">));</span>
   <span class="hl kwa">exit</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwc">$result</span> <span class="hl sym">=</span> <span class="hl kwd">Fannkuch</span><span class="hl sym">(</span><span class="hl kwc">$n</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span>TRUE<span class="hl sym">);</span>

<span class="hl slc">// gather &amp; print result</span>
<span class="hl kwa">foreach</span><span class="hl sym">(</span><span class="hl kwc">$pipes</span> <span class="hl kwa">as</span> <span class="hl kwc">$pipe</span><span class="hl sym">) {</span>
   <span class="hl kwc">$data</span> <span class="hl sym">=</span> <span class="hl kwd">fread</span><span class="hl sym">(</span><span class="hl kwc">$pipe</span><span class="hl sym">,</span> <span class="hl num">4</span><span class="hl sym">);</span>
   <span class="hl kwc">$data</span> <span class="hl sym">=</span> <span class="hl kwd">unpack</span><span class="hl sym">(</span><span class="hl str">'N'</span><span class="hl sym">,</span> <span class="hl kwc">$data</span><span class="hl sym">);</span>
   <span class="hl kwc">$data</span> <span class="hl sym">=</span> <span class="hl kwc">$data</span><span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">];</span>

   <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwc">$data</span> <span class="hl sym">&gt;</span> <span class="hl kwc">$result</span><span class="hl sym">) {</span>
      <span class="hl kwc">$result</span> <span class="hl sym">=</span> <span class="hl kwc">$data</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwd">pcntl_wait</span><span class="hl sym">(</span><span class="hl kwc">$s</span><span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;Pfannkuchen(%d) = %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> <span class="hl kwc">$n</span><span class="hl sym">,</span> <span class="hl kwc">$result</span><span class="hl sym">);</span>

