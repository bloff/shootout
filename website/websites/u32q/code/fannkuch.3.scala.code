<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> * contributed by Rex Kerr</span>
<span class="hl com"> */</span>

<span class="hl kwa">import</span> scala<span class="hl sym">.</span>actors<span class="hl sym">.</span>_

<span class="hl kwa">object</span> fannkuch <span class="hl sym">{</span>
  <span class="hl kwa">case class</span> Job<span class="hl sym">(</span>start<span class="hl sym">:</span><span class="hl kwc">Array</span><span class="hl sym">[</span>Int<span class="hl sym">],</span>n<span class="hl sym">:</span>Int<span class="hl sym">)</span>
  <span class="hl kwa">case class</span> Found<span class="hl sym">(</span>who<span class="hl sym">:</span>Kucher<span class="hl sym">,</span>k<span class="hl sym">:</span>Int<span class="hl sym">)</span>
  <span class="hl kwa">case class</span> Stop<span class="hl sym">()</span>

  <span class="hl kwa">class</span> Kucher<span class="hl sym">(</span><span class="hl kwa">val</span> foreman<span class="hl sym">:</span>Fanner<span class="hl sym">,</span>len<span class="hl sym">:</span>Int<span class="hl sym">,</span>num<span class="hl sym">:</span>Int<span class="hl sym">)</span> <span class="hl kwa">extends</span> Actor <span class="hl sym">{</span>
    <span class="hl kwa">var</span> go <span class="hl sym">=</span> true
    <span class="hl kwa">val</span> perm <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">Array</span><span class="hl sym">[</span>Int<span class="hl sym">](</span>len<span class="hl sym">)</span>
    <span class="hl kwa">val</span> temp <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">Array</span><span class="hl sym">[</span>Int<span class="hl sym">](</span>len<span class="hl sym">)</span>
    <span class="hl kwa">val</span> flip <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">Array</span><span class="hl sym">[</span>Int<span class="hl sym">](</span>len<span class="hl sym">)</span>

    <span class="hl kwa">def</span> permute<span class="hl sym">(</span>n<span class="hl sym">:</span>Int<span class="hl sym">) :</span> <span class="hl kwc">Boolean</span> <span class="hl sym">= {</span>
      <span class="hl kwa">var</span> i <span class="hl sym">=</span> <span class="hl num">0</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> n<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl sym">&amp;&amp;</span> flip<span class="hl sym">(</span>i<span class="hl sym">)==</span><span class="hl num">0</span><span class="hl sym">) {</span>
        <span class="hl kwa">var</span> j <span class="hl sym">=</span> <span class="hl num">0</span>
        <span class="hl kwa">val</span> t <span class="hl sym">=</span> perm<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
        <span class="hl kwa">while</span> <span class="hl sym">(</span>j<span class="hl sym">&lt;=</span>i<span class="hl sym">) {</span>
          perm<span class="hl sym">(</span>j<span class="hl sym">) =</span> perm<span class="hl sym">(</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>
          j <span class="hl sym">=</span> j<span class="hl sym">+</span><span class="hl num">1</span>
        <span class="hl sym">}</span>
        perm<span class="hl sym">(</span>j<span class="hl sym">) =</span> t
        i <span class="hl sym">=</span> i<span class="hl sym">+</span><span class="hl num">1</span>
      <span class="hl sym">}</span>
      flip<span class="hl sym">(</span>i<span class="hl sym">) -=</span> <span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>i<span class="hl sym">&gt;</span><span class="hl num">0</span><span class="hl sym">) {</span>
        i <span class="hl sym">-=</span> <span class="hl num">1</span>
        flip<span class="hl sym">(</span>i<span class="hl sym">)=</span>i
      <span class="hl sym">}</span>
      flip<span class="hl sym">(</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)&gt;=</span><span class="hl num">0</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">def</span> count<span class="hl sym">() = {</span>
      <span class="hl kwa">var</span> K <span class="hl sym">=</span> <span class="hl num">0</span>
      <span class="hl kwa">var</span> i <span class="hl sym">=</span> <span class="hl num">0</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>i<span class="hl sym">&lt;</span>perm<span class="hl sym">.</span>length<span class="hl sym">) {</span>
        temp<span class="hl sym">(</span>i<span class="hl sym">) =</span> perm<span class="hl sym">(</span>i<span class="hl sym">)</span>
        i <span class="hl sym">+=</span> <span class="hl num">1</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>temp<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)!=</span><span class="hl num">0</span><span class="hl sym">) {</span>
        <span class="hl kwa">var</span> m <span class="hl sym">=</span> temp<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
        i <span class="hl sym">=</span> <span class="hl num">0</span>
        <span class="hl kwa">while</span> <span class="hl sym">(</span>i<span class="hl sym">&lt;</span>m<span class="hl sym">) {</span>
          <span class="hl kwa">val</span> t <span class="hl sym">=</span> temp<span class="hl sym">(</span>i<span class="hl sym">)</span>
          temp<span class="hl sym">(</span>i<span class="hl sym">) =</span> temp<span class="hl sym">(</span>m<span class="hl sym">)</span>
          temp<span class="hl sym">(</span>m<span class="hl sym">) =</span> t
          i <span class="hl sym">+=</span> <span class="hl num">1</span>
          m <span class="hl sym">-=</span> <span class="hl num">1</span>
        <span class="hl sym">}</span>
        K <span class="hl sym">+=</span> <span class="hl num">1</span>
      <span class="hl sym">}</span>
      K
    <span class="hl sym">}</span>

    <span class="hl kwa">def</span> act<span class="hl sym">() {</span> Actor<span class="hl sym">.</span>loopWhile<span class="hl sym">(</span>go<span class="hl sym">) {</span> react <span class="hl sym">{</span>
      <span class="hl kwa">case</span> x <span class="hl sym">:</span> Job <span class="hl sym">=&gt;</span>
        <span class="hl kwa">var</span> K <span class="hl sym">=</span> <span class="hl num">0</span>
        <span class="hl kwa">var</span> verbose <span class="hl sym">=</span> <span class="hl num">30</span>
        <span class="hl kwa">var</span> i <span class="hl sym">=</span> <span class="hl num">0</span>
        <span class="hl kwa">while</span> <span class="hl sym">(</span>i<span class="hl sym">&lt;</span>perm<span class="hl sym">.</span>length<span class="hl sym">) {</span>
          perm<span class="hl sym">(</span>i<span class="hl sym">) =</span> x<span class="hl sym">.</span>start<span class="hl sym">(</span>i<span class="hl sym">)</span>
          <span class="hl kwa">if</span> <span class="hl sym">(</span>perm<span class="hl sym">(</span>i<span class="hl sym">) !=</span> i<span class="hl sym">)</span> verbose <span class="hl sym">=</span> <span class="hl num">0</span>
          flip<span class="hl sym">(</span>i<span class="hl sym">)=</span>i
          i <span class="hl sym">+=</span> <span class="hl num">1</span>
        <span class="hl sym">}</span>
        <span class="hl kwa">do</span> <span class="hl sym">{</span>
          <span class="hl kwa">if</span> <span class="hl sym">(</span>verbose <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">) {</span>
            println<span class="hl sym">(</span> perm<span class="hl sym">.</span>map<span class="hl sym">(</span>_<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">).</span>mkString<span class="hl sym">(</span><span class="hl str">&quot;&quot;</span><span class="hl sym">) )</span>
            verbose <span class="hl sym">-=</span> <span class="hl num">1</span>
          <span class="hl sym">}</span>
          K <span class="hl sym">=</span> K max count
        <span class="hl sym">}</span> <span class="hl kwa">while</span> <span class="hl sym">(</span>permute<span class="hl sym">(</span>x<span class="hl sym">.</span>n<span class="hl sym">))</span>
        foreman <span class="hl sym">!</span> Found<span class="hl sym">(</span><span class="hl kwa">this</span><span class="hl sym">,</span>K<span class="hl sym">)</span>
      <span class="hl kwa">case</span> s <span class="hl sym">:</span> Stop <span class="hl sym">=&gt;</span>
        go <span class="hl sym">=</span> false
    <span class="hl sym">}}}</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">class</span> Fanner<span class="hl sym">(</span>work<span class="hl sym">:</span><span class="hl kwc">Array</span><span class="hl sym">[</span>Job<span class="hl sym">],</span> workers<span class="hl sym">:</span><span class="hl kwc">Array</span><span class="hl sym">[</span>Kucher<span class="hl sym">],</span> N<span class="hl sym">:</span>Int<span class="hl sym">)</span> <span class="hl kwa">extends</span> Actor <span class="hl sym">{</span>
    <span class="hl kwa">var</span> next <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">var</span> K <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">var</span> done <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">def</span> act<span class="hl sym">() {</span> Actor<span class="hl sym">.</span>loop <span class="hl sym">{</span> react <span class="hl sym">{</span>
      <span class="hl kwa">case</span> msg <span class="hl sym">:</span> Found <span class="hl sym">=&gt;</span>
        K <span class="hl sym">=</span> K max msg<span class="hl sym">.</span>k
        <span class="hl kwa">if</span> <span class="hl sym">(</span>msg<span class="hl sym">.</span>k<span class="hl sym">&gt;=</span><span class="hl num">0</span><span class="hl sym">)</span> done <span class="hl sym">+=</span> <span class="hl num">1</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>next <span class="hl sym">&lt;</span> work<span class="hl sym">.</span>length<span class="hl sym">) {</span>
          msg<span class="hl sym">.</span>who <span class="hl sym">!</span> work<span class="hl sym">(</span>next<span class="hl sym">)</span>
          next <span class="hl sym">+=</span> <span class="hl num">1</span>
        <span class="hl sym">}</span>
        <span class="hl kwa">else if</span> <span class="hl sym">(</span>done<span class="hl sym">==</span>work<span class="hl sym">.</span>length<span class="hl sym">) {</span>
          println<span class="hl sym">(</span><span class="hl str">&quot;Pfannkuchen(&quot;</span> <span class="hl sym">+</span> N <span class="hl sym">+</span> <span class="hl str">&quot;) = &quot;</span> <span class="hl sym">+</span> K<span class="hl sym">)</span>
          workers<span class="hl sym">.</span>foreach<span class="hl sym">(</span>_ <span class="hl sym">!</span> Stop<span class="hl sym">())</span>
          exit<span class="hl sym">()</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}}}</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">def</span> swapped<span class="hl sym">(</span>a<span class="hl sym">:</span><span class="hl kwc">Array</span><span class="hl sym">[</span>Int<span class="hl sym">],</span>i<span class="hl sym">:</span>Int<span class="hl sym">,</span>j<span class="hl sym">:</span>Int<span class="hl sym">) = {</span>
    <span class="hl kwa">val</span> b  <span class="hl sym">=</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span><span class="hl kwc">Arrays</span><span class="hl sym">.</span>copyOf<span class="hl sym">(</span>a<span class="hl sym">,</span>a<span class="hl sym">.</span>length<span class="hl sym">)</span>
    b<span class="hl sym">(</span>i<span class="hl sym">) =</span> a<span class="hl sym">(</span>j<span class="hl sym">)</span>
    b<span class="hl sym">(</span>j<span class="hl sym">) =</span> a<span class="hl sym">(</span>i<span class="hl sym">)</span>
    b
  <span class="hl sym">}</span>

  <span class="hl kwa">def</span> main<span class="hl sym">(</span>args<span class="hl sym">:</span><span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">String</span><span class="hl sym">]) {</span>
    <span class="hl kwa">val</span> N <span class="hl sym">=</span> args<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">).</span>toInt
    <span class="hl kwa">val</span> base <span class="hl sym">= (</span><span class="hl num">0</span> until N<span class="hl sym">).</span>toArray

    <span class="hl slc">// Split full problem into subsets for parallelization by swapping</span>
    <span class="hl slc">// Nth entry into i&lt;N spot and then finding permutations of first (N-1)</span>
    <span class="hl slc">// (Do it recursively down to length 8 to help with load balacing.)</span>
    <span class="hl kwa">val</span> work <span class="hl sym">=</span> <span class="hl kwa">new</span> collection<span class="hl sym">.</span>mutable<span class="hl sym">.</span>ListBuffer<span class="hl sym">[</span>Job<span class="hl sym">]()</span>
    work <span class="hl sym">+=</span> Job<span class="hl sym">(</span>base<span class="hl sym">,</span>N min <span class="hl num">8</span><span class="hl sym">)</span>
    <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;-</span> N<span class="hl sym">-</span><span class="hl num">1</span> to <span class="hl num">8</span> by <span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">) {</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span>j <span class="hl sym">&lt;-</span> <span class="hl num">0</span> until i<span class="hl sym">) {</span>
        work <span class="hl sym">+=</span> Job<span class="hl sym">(</span>swapped<span class="hl sym">(</span>base<span class="hl sym">,</span>i<span class="hl sym">,</span>j<span class="hl sym">) ,</span> i<span class="hl sym">)</span>
      <span class="hl sym">}</span>
    <span class="hl sym">}</span>
    <span class="hl slc">// Uncomment this to see which permutations are tested in each work block:</span>
    <span class="hl slc">// work.foreach( w =&gt; println(&quot;Permute first &quot; + w.n + &quot; of &quot; + w.start.mkString(&quot;,&quot;)) )</span>

    <span class="hl kwa">val</span> workers <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">Array</span><span class="hl sym">[</span>Kucher<span class="hl sym">](</span> <span class="hl kwc">Runtime</span><span class="hl sym">.</span>getRuntime<span class="hl sym">.</span>availableProcessors <span class="hl sym">);</span>
    <span class="hl kwa">val</span> foreman <span class="hl sym">=</span> <span class="hl kwa">new</span> Fanner<span class="hl sym">(</span> work<span class="hl sym">.</span>toArray <span class="hl sym">,</span> workers <span class="hl sym">,</span> N <span class="hl sym">);</span>
    foreman<span class="hl sym">.</span>start<span class="hl sym">()</span>
    <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;-</span> <span class="hl num">0</span> until workers<span class="hl sym">.</span>length<span class="hl sym">) {</span>
      workers<span class="hl sym">(</span>i<span class="hl sym">) =</span> <span class="hl kwa">new</span> Kucher<span class="hl sym">(</span>foreman<span class="hl sym">,</span>N<span class="hl sym">,</span>i<span class="hl sym">)</span>
      workers<span class="hl sym">(</span>i<span class="hl sym">).</span>start
      foreman <span class="hl sym">!</span> Found<span class="hl sym">(</span>workers<span class="hl sym">(</span>i<span class="hl sym">),-</span><span class="hl num">1</span><span class="hl sym">)</span>
    <span class="hl sym">}</span>
  <span class="hl sym">}</span>
<span class="hl sym">}</span>
