<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;   http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;</span>
<span class="hl slc">;;  contributed by Jim Kannampuzha</span>
<span class="hl slc">;;  version 0.95 (single threaded)</span>

<span class="hl sym">(</span>ns spectralnorm
  <span class="hl sym">(:</span>import <span class="hl sym">(</span>java.text DecimalFormat<span class="hl sym">) (</span>java.util Locale<span class="hl sym">))</span>
  <span class="hl sym">(:</span>gen<span class="hl sym">-</span>class<span class="hl sym">))</span>

<span class="hl sym">(</span>set<span class="hl sym">! *</span>warn<span class="hl sym">-</span>on<span class="hl sym">-</span>reflection<span class="hl sym">*</span> true<span class="hl sym">)</span>

<span class="hl sym">(</span>def n <span class="hl sym">(</span>atom <span class="hl num">10</span><span class="hl sym">))</span>
<span class="hl sym">(</span>def indices <span class="hl sym">(</span>atom <span class="hl sym">(</span>int<span class="hl sym">-</span>array <span class="hl sym">(</span>range <span class="hl num">1</span> <span class="hl sym">(</span>int &#64;n<span class="hl sym">)))))</span>

<span class="hl sym">(</span>defn ^doubles eval<span class="hl sym">-</span>A <span class="hl sym">[</span>^Integer ii<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>ai <span class="hl sym">(</span>double<span class="hl sym">-</span>array &#64;n<span class="hl sym">)]</span>
    <span class="hl sym">(</span>loop <span class="hl sym">[</span>index <span class="hl sym">(</span>int <span class="hl num">0</span><span class="hl sym">)</span>
       offset <span class="hl sym">(</span>int ii<span class="hl sym">)</span>
       start <span class="hl sym">(</span>int <span class="hl sym">(/ (*</span> offset <span class="hl sym">(</span>inc offset<span class="hl sym">))</span> <span class="hl num">2</span><span class="hl sym">))]</span>
      <span class="hl sym">(</span>if <span class="hl sym">(=</span> index &#64;n<span class="hl sym">)</span>
    ai
    <span class="hl sym">(</span>do
      <span class="hl sym">(</span>aset<span class="hl sym">-</span>double ai index <span class="hl sym">(/</span> <span class="hl num">1.0</span> start<span class="hl sym">))</span>
      <span class="hl sym">(</span>recur <span class="hl sym">(</span>inc index<span class="hl sym">) (</span>inc offset<span class="hl sym">) (+</span> start offset<span class="hl sym">)))))))</span>

<span class="hl sym">(</span>defn ^doubles eval<span class="hl sym">-</span>At <span class="hl sym">[</span>^Integer ii<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>i <span class="hl sym">(</span>int ii<span class="hl sym">)</span>
    ati <span class="hl sym">(</span>double<span class="hl sym">-</span>array &#64;n<span class="hl sym">)]</span>
    <span class="hl sym">(</span>loop <span class="hl sym">[</span>index <span class="hl sym">(</span>int <span class="hl num">0</span><span class="hl sym">)</span>
       offset <span class="hl sym">(</span>inc i<span class="hl sym">)</span>
       start <span class="hl sym">(</span>int <span class="hl sym">(</span>inc <span class="hl sym">(/ (*</span> i <span class="hl sym">(</span>dec i<span class="hl sym">))</span> <span class="hl num">2</span><span class="hl sym">)))]</span>
      <span class="hl sym">(</span>if <span class="hl sym">(=</span> index &#64;n<span class="hl sym">)</span>
        ati
    <span class="hl sym">(</span>do
      <span class="hl sym">(</span>aset<span class="hl sym">-</span>double ati index <span class="hl sym">(/</span> <span class="hl num">1.0</span> start<span class="hl sym">))</span>
      <span class="hl sym">(</span>recur <span class="hl sym">(</span>inc index<span class="hl sym">) (</span>inc offset<span class="hl sym">) (+</span> start offset<span class="hl sym">)))))))</span>

<span class="hl sym">(</span>defn ^Double asum <span class="hl sym">[</span>^doubles a<span class="hl sym">]</span>
  <span class="hl sym">(</span>areduce a i r <span class="hl sym">(</span>double <span class="hl num">0</span><span class="hl sym">) (+</span> r <span class="hl sym">(</span>aget a i<span class="hl sym">))))</span>

<span class="hl sym">(</span>defn ^doubles amult <span class="hl sym">[</span>^doubles u ^doubles w<span class="hl sym">]</span>
  <span class="hl sym">(</span>amap u i r <span class="hl sym">(* (</span>aget r i<span class="hl sym">) (</span>aget w i<span class="hl sym">))))</span>

<span class="hl sym">(</span>defn ^doubles mult<span class="hl sym">-</span>Av <span class="hl sym">[</span>^doubles v<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>^doubles values <span class="hl sym">(</span>double<span class="hl sym">-</span>array &#64;n<span class="hl sym">)]</span>
    <span class="hl sym">(</span>doseq <span class="hl sym">[</span>i &#64;indices <span class="hl sym">:</span>let <span class="hl sym">[</span>idx <span class="hl sym">(</span>dec i<span class="hl sym">)]]</span>
      <span class="hl sym">(</span>aset values idx <span class="hl sym">(</span>asum <span class="hl sym">(</span>amult <span class="hl sym">(</span>eval<span class="hl sym">-</span>A i<span class="hl sym">)</span> v<span class="hl sym">))))</span>
    values<span class="hl sym">))</span>

<span class="hl sym">(</span>defn ^doubles mult<span class="hl sym">-</span>Atv <span class="hl sym">[</span>^doubles v<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>^doubles values <span class="hl sym">(</span>double<span class="hl sym">-</span>array &#64;n<span class="hl sym">)]</span>
    <span class="hl sym">(</span>doseq <span class="hl sym">[</span>i &#64;indices <span class="hl sym">:</span>let <span class="hl sym">[</span>idx <span class="hl sym">(</span>dec i<span class="hl sym">)]]</span>
      <span class="hl sym">(</span>aset values idx <span class="hl sym">(</span>asum <span class="hl sym">(</span>amult <span class="hl sym">(</span>eval<span class="hl sym">-</span>At i<span class="hl sym">)</span> v<span class="hl sym">))))</span>
    values<span class="hl sym">))</span>
     
<span class="hl sym">(</span>defn ^doubles mult<span class="hl sym">-</span>AtAv <span class="hl sym">[</span>^doubles v<span class="hl sym">] (</span>mult<span class="hl sym">-</span>Atv <span class="hl sym">(</span>mult<span class="hl sym">-</span>Av v<span class="hl sym">)))</span>

<span class="hl sym">(</span>defn spec <span class="hl sym">[</span>size<span class="hl sym">]</span>
  <span class="hl sym">(</span>reset<span class="hl sym">!</span> n <span class="hl sym">(</span>int size<span class="hl sym">))</span>
  <span class="hl sym">(</span>reset<span class="hl sym">!</span> indices <span class="hl sym">(</span>int<span class="hl sym">-</span>array <span class="hl sym">(</span>range <span class="hl num">1</span> <span class="hl sym">(</span>inc &#64;n<span class="hl sym">))))</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>u <span class="hl sym">(</span>double<span class="hl sym">-</span>array <span class="hl sym">(</span>repeat &#64;n <span class="hl num">1.0</span><span class="hl sym">))</span>
        v <span class="hl sym">(</span>nth <span class="hl sym">(</span>iterate mult<span class="hl sym">-</span>AtAv u<span class="hl sym">)</span> <span class="hl num">19</span><span class="hl sym">)</span>
        uv <span class="hl sym">(</span>mult<span class="hl sym">-</span>AtAv v<span class="hl sym">)</span>
        vBv <span class="hl sym">(</span>asum <span class="hl sym">(</span>amult uv v<span class="hl sym">))</span>
        vv <span class="hl sym">(</span>asum <span class="hl sym">(</span>amult v v<span class="hl sym">))]</span>
    <span class="hl sym">(</span>java.lang.Math<span class="hl sym">/</span>sqrt <span class="hl sym">(</span>double <span class="hl sym">(/</span> vBv vv<span class="hl sym">)))))</span>

<span class="hl sym">(</span>defn <span class="hl sym">-</span>main <span class="hl sym">[&amp;</span> args<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>n <span class="hl sym">(</span>if <span class="hl sym">(</span>first args<span class="hl sym">) (</span>Integer<span class="hl sym">/</span>parseInt <span class="hl sym">(</span>first args<span class="hl sym">))</span> <span class="hl num">1000</span><span class="hl sym">)</span>
        df <span class="hl sym">(</span>doto ^DecimalFormat <span class="hl sym">(</span>DecimalFormat<span class="hl sym">/</span>getNumberInstance Locale<span class="hl sym">/</span>US<span class="hl sym">)</span>
                 <span class="hl sym">(</span>.applyPattern <span class="hl str">&quot;#.000000000&quot;</span><span class="hl sym">))]</span>
    <span class="hl sym">(</span>println <span class="hl sym">(</span>.format df <span class="hl sym">(</span>spec n<span class="hl sym">)))))</span>

