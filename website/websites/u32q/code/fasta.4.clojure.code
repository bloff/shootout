<span class="hl slc">;;   The Computer Language Benchmarks Game</span>
<span class="hl slc">;;   http://shootout.alioth.debian.org/</span>

<span class="hl slc">;; contributed by Bill James</span>
<span class="hl slc">;; speed improvements by Andy Fingerhut</span>

<span class="hl sym">(</span>ns fasta
  <span class="hl sym">(:</span>gen<span class="hl sym">-</span>class<span class="hl sym">))</span>

<span class="hl sym">(</span>set<span class="hl sym">! *</span>warn<span class="hl sym">-</span>on<span class="hl sym">-</span>reflection<span class="hl sym">*</span> true<span class="hl sym">)</span>


<span class="hl sym">(</span>def <span class="hl sym">*</span>width<span class="hl sym">*</span> <span class="hl num">60</span><span class="hl sym">)</span>
<span class="hl sym">(</span>def <span class="hl sym">*</span>lookup<span class="hl sym">-</span>size<span class="hl sym">*</span> <span class="hl num">222000</span><span class="hl sym">)</span>


<span class="hl sym">(</span>def <span class="hl sym">*</span>alu<span class="hl sym">* (</span>str <span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>
                <span class="hl str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>
                <span class="hl str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>
                <span class="hl str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>
                <span class="hl str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>
                <span class="hl str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>
                <span class="hl str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="hl sym">))</span>

<span class="hl sym">(</span>def <span class="hl sym">*</span>codes<span class="hl sym">*</span> <span class="hl str">&quot;acgtBDHKMNRSVWY&quot;</span><span class="hl sym">)</span>

<span class="hl sym">(</span>def <span class="hl sym">*</span>iub<span class="hl sym">* [</span><span class="hl num">0.27 0.12 0.12 0.27 0.02 0.02 0.02 0.02</span>
           <span class="hl num">0.02 0.02 0.02 0.02 0.02 0.02 0.02</span><span class="hl sym">])</span>

<span class="hl sym">(</span>def <span class="hl sym">*</span>homosapiens<span class="hl sym">* [</span><span class="hl num">0.3029549426680 0.1979883004921</span>
                   <span class="hl num">0.1975473066391 0.3015094502008</span><span class="hl sym">])</span>


<span class="hl sym">(</span>defn find<span class="hl sym">-</span>index <span class="hl sym">[</span>f coll<span class="hl sym">]</span>
  <span class="hl sym">(</span>loop <span class="hl sym">[</span>i <span class="hl sym">(</span>int <span class="hl num">0</span><span class="hl sym">)</span>
         s <span class="hl sym">(</span>seq coll<span class="hl sym">)]</span>
    <span class="hl sym">(</span>if <span class="hl sym">(</span>f <span class="hl sym">(</span>first s<span class="hl sym">))</span>
      i
      <span class="hl sym">(</span>recur <span class="hl sym">(</span>unchecked<span class="hl sym">-</span>inc i<span class="hl sym">) (</span>rest s<span class="hl sym">)))))</span>


<span class="hl sym">(</span>def random<span class="hl sym">-</span>seed <span class="hl sym">(</span>int<span class="hl sym">-</span>array <span class="hl sym">[</span><span class="hl num">42</span><span class="hl sym">]))</span>
<span class="hl sym">(</span>let <span class="hl sym">[</span>scale <span class="hl sym">(</span>double <span class="hl sym">(/ *</span>lookup<span class="hl sym">-</span>size<span class="hl sym">*</span> <span class="hl num">139968</span><span class="hl sym">))]</span>
  <span class="hl sym">(</span>defn gen<span class="hl sym">-</span>random<span class="hl sym">-</span>fast <span class="hl sym">[]</span>
    <span class="hl sym">(</span>let <span class="hl sym">[</span>^ints random<span class="hl sym">-</span>seed random<span class="hl sym">-</span>seed
          IM <span class="hl sym">(</span>int <span class="hl num">139968</span><span class="hl sym">)</span>
          IA <span class="hl sym">(</span>int <span class="hl num">3877</span><span class="hl sym">)</span>
          IC <span class="hl sym">(</span>int <span class="hl num">29573</span><span class="hl sym">)</span>
          zero <span class="hl sym">(</span>int <span class="hl num">0</span><span class="hl sym">)</span>
          new<span class="hl sym">-</span>seed <span class="hl sym">(</span>int <span class="hl sym">(</span>unchecked<span class="hl sym">-</span>remainder
                         <span class="hl sym">(</span>unchecked<span class="hl sym">-</span>add
                          <span class="hl sym">(</span>unchecked<span class="hl sym">-</span>multiply
                           <span class="hl sym">(</span>aget random<span class="hl sym">-</span>seed zero<span class="hl sym">)</span> IA<span class="hl sym">)</span> IC<span class="hl sym">)</span> IM<span class="hl sym">))</span>
          <span class="hl slc">;; I had the (aset random-seed zero new-seed) in the body of</span>
          <span class="hl slc">;; the let before, but strangely the Clojure compiler</span>
          <span class="hl slc">;; generated an unnecessary call to Integer.valueOf() to</span>
          <span class="hl slc">;; convert aset's return value to an Integer and then</span>
          <span class="hl slc">;; discard that value.  By assigning the return value of</span>
          <span class="hl slc">;; aset to throwaway-val, the compiler actually generates</span>
          <span class="hl slc">;; faster code.</span>
          throwaway<span class="hl sym">-</span>val <span class="hl sym">(</span>int <span class="hl sym">(</span>aset random<span class="hl sym">-</span>seed zero new<span class="hl sym">-</span>seed<span class="hl sym">))]</span>
      <span class="hl sym">(</span>int <span class="hl sym">(*</span> new<span class="hl sym">-</span>seed scale<span class="hl sym">)))))</span>


<span class="hl slc">;; Takes a vector of probabilities.</span>
<span class="hl sym">(</span>defn make<span class="hl sym">-</span>cumulative <span class="hl sym">[</span>v<span class="hl sym">]</span>
  <span class="hl sym">(</span>vec <span class="hl sym">(</span>map #<span class="hl sym">(</span>reduce <span class="hl sym">+ (</span>subvec v <span class="hl num">0</span> %<span class="hl sym">)) (</span>range <span class="hl num">1</span> <span class="hl sym">(</span>inc <span class="hl sym">(</span>count v<span class="hl sym">))))))</span>


<span class="hl slc">;; Takes a vector of cumulative probabilities.</span>
<span class="hl sym">(</span>defn make<span class="hl sym">-</span>lookup<span class="hl sym">-</span>table <span class="hl sym">[</span>v<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>sz <span class="hl sym">(</span>int <span class="hl sym">*</span>lookup<span class="hl sym">-</span>size<span class="hl sym">*)</span>
        lookup<span class="hl sym">-</span>scale <span class="hl sym">(-</span> sz <span class="hl num">0.0001</span><span class="hl sym">)</span>
        ^ints a <span class="hl sym">(</span>int<span class="hl sym">-</span>array sz<span class="hl sym">)]</span>
    <span class="hl sym">(</span>dotimes <span class="hl sym">[</span>i sz<span class="hl sym">]</span>
      <span class="hl sym">(</span>aset a i <span class="hl sym">(</span>int <span class="hl sym">(</span>find<span class="hl sym">-</span>index #<span class="hl sym">(&lt;= (/</span> i lookup<span class="hl sym">-</span>scale<span class="hl sym">)</span> %<span class="hl sym">)</span> v<span class="hl sym">))))</span>
    a<span class="hl sym">))</span>


<span class="hl sym">(</span>defn cycle<span class="hl sym">-</span>bytes <span class="hl sym">[</span>source source<span class="hl sym">-</span>size n
                   ^java.io.BufferedOutputStream ostream<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>source<span class="hl sym">-</span>size <span class="hl sym">(</span>int source<span class="hl sym">-</span>size<span class="hl sym">)</span>
        width <span class="hl sym">(</span>int <span class="hl sym">*</span>width<span class="hl sym">*)</span>
        width<span class="hl sym">+</span><span class="hl num">1</span> <span class="hl sym">(</span>int <span class="hl sym">(</span>inc width<span class="hl sym">))</span>
        buffer<span class="hl sym">-</span>size <span class="hl sym">(</span>int <span class="hl sym">(*</span> width<span class="hl sym">+</span><span class="hl num">1 4096</span><span class="hl sym">))</span>
        buffer <span class="hl sym">(</span>byte<span class="hl sym">-</span>array buffer<span class="hl sym">-</span>size <span class="hl sym">(</span>byte <span class="hl num">10</span><span class="hl sym">))]</span>
    <span class="hl sym">(</span>loop <span class="hl sym">[</span>i <span class="hl sym">(</span>int <span class="hl num">0</span><span class="hl sym">)</span>
           j <span class="hl sym">(</span>int <span class="hl num">0</span><span class="hl sym">)</span>
           n <span class="hl sym">(</span>int n<span class="hl sym">)]</span>
      <span class="hl sym">(</span>System<span class="hl sym">/</span>arraycopy source i buffer j width<span class="hl sym">)</span>
      <span class="hl sym">(</span>if <span class="hl sym">(&gt;</span> n width<span class="hl sym">)</span>
        <span class="hl sym">(</span>recur <span class="hl sym">(</span>int <span class="hl sym">(</span>unchecked<span class="hl sym">-</span>remainder
                     <span class="hl sym">(</span>unchecked<span class="hl sym">-</span>add i width<span class="hl sym">)</span> source<span class="hl sym">-</span>size<span class="hl sym">))</span>
               <span class="hl sym">(</span>int <span class="hl sym">(</span>let <span class="hl sym">[</span>j <span class="hl sym">(</span>unchecked<span class="hl sym">-</span>add j width<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)]</span>
                      <span class="hl sym">(</span>if <span class="hl sym">(==</span> j buffer<span class="hl sym">-</span>size<span class="hl sym">)</span>
                        <span class="hl sym">(</span>do <span class="hl sym">(</span>.write ostream buffer<span class="hl sym">) (</span>int <span class="hl num">0</span><span class="hl sym">))</span>
                        j<span class="hl sym">)))</span>
               <span class="hl sym">(</span>unchecked<span class="hl sym">-</span>subtract n width<span class="hl sym">))</span>
        <span class="hl sym">(</span>do
          <span class="hl sym">(</span>aset buffer <span class="hl sym">(+</span> j n<span class="hl sym">) (</span>byte <span class="hl num">10</span><span class="hl sym">))</span>
          <span class="hl sym">(</span>.write ostream buffer <span class="hl sym">(</span>int <span class="hl num">0</span><span class="hl sym">) (+</span> j n <span class="hl num">1</span><span class="hl sym">)))))))</span>


<span class="hl sym">(</span>defn fasta<span class="hl sym">-</span>repeat <span class="hl sym">[</span>n ^java.io.BufferedOutputStream ostream<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>source <span class="hl sym">(</span>.getBytes <span class="hl sym">(</span>str <span class="hl sym">*</span>alu<span class="hl sym">* *</span>alu<span class="hl sym">*))]</span>
    <span class="hl sym">(</span>cycle<span class="hl sym">-</span>bytes source <span class="hl sym">(</span>count <span class="hl sym">*</span>alu<span class="hl sym">*)</span> n ostream<span class="hl sym">)))</span>


<span class="hl sym">(</span>defn fasta<span class="hl sym">-</span>random <span class="hl sym">[</span>probs n ^java.io.BufferedOutputStream ostream<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>codes <span class="hl sym">(</span>.getBytes <span class="hl sym">(</span>str <span class="hl sym">*</span>codes<span class="hl sym">*))</span>
        lookup<span class="hl sym">-</span>table <span class="hl sym">(</span>ints <span class="hl sym">(</span>make<span class="hl sym">-</span>lookup<span class="hl sym">-</span>table
                            <span class="hl sym">(</span>make<span class="hl sym">-</span>cumulative probs<span class="hl sym">)))</span>
        width <span class="hl sym">(</span>int <span class="hl sym">*</span>width<span class="hl sym">*)</span>
        width<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl sym">(</span>int <span class="hl sym">(</span>dec width<span class="hl sym">))</span>
        num<span class="hl sym">-</span>lines<span class="hl sym">-</span>in<span class="hl sym">-</span>buffer <span class="hl sym">(</span>int <span class="hl num">2000</span><span class="hl sym">)</span>
        buf<span class="hl sym">-</span>size <span class="hl sym">(</span>int <span class="hl sym">(*</span> num<span class="hl sym">-</span>lines<span class="hl sym">-</span>in<span class="hl sym">-</span>buffer <span class="hl sym">(</span>inc width<span class="hl sym">)))</span>
        buffer <span class="hl sym">(</span>byte<span class="hl sym">-</span>array buf<span class="hl sym">-</span>size<span class="hl sym">)]</span>
    <span class="hl sym">(</span>loop <span class="hl sym">[</span>n <span class="hl sym">(</span>int n<span class="hl sym">)</span>      <span class="hl slc">;; The number of characters left to generate.</span>
           j <span class="hl sym">(</span>int width<span class="hl sym">)</span>  <span class="hl slc">;; The number of characters left to</span>
                          <span class="hl slc">;; generate on the current line of output</span>
                          <span class="hl slc">;; before printing a newline.</span>
           i <span class="hl sym">(</span>int <span class="hl num">0</span><span class="hl sym">)]</span>     <span class="hl slc">;; Number of characters put in buffer so far.</span>
      <span class="hl sym">(</span>if <span class="hl sym">(</span>zero? n<span class="hl sym">)</span>
        <span class="hl sym">(</span>do
          <span class="hl sym">(</span>.write ostream buffer <span class="hl sym">(</span>int <span class="hl num">0</span><span class="hl sym">)</span> i<span class="hl sym">)</span>
          <span class="hl sym">(</span>when <span class="hl sym">(</span>not<span class="hl sym">= (</span>aget buffer <span class="hl sym">(</span>dec i<span class="hl sym">)) (</span>byte <span class="hl num">10</span><span class="hl sym">))</span>
            <span class="hl sym">(</span>aset buffer <span class="hl sym">(</span>int <span class="hl num">0</span><span class="hl sym">) (</span>byte <span class="hl num">10</span><span class="hl sym">))</span>
            <span class="hl sym">(</span>.write ostream buffer <span class="hl sym">(</span>int <span class="hl num">0</span><span class="hl sym">) (</span>int <span class="hl num">1</span><span class="hl sym">))))</span>
        <span class="hl slc">;; else</span>
        <span class="hl sym">(</span>let <span class="hl sym">[</span>rand<span class="hl sym">-</span>byte <span class="hl sym">(</span>aget codes <span class="hl sym">(</span>aget lookup<span class="hl sym">-</span>table <span class="hl sym">(</span>gen<span class="hl sym">-</span>random<span class="hl sym">-</span>fast<span class="hl sym">)))]</span>
          <span class="hl sym">(</span>if <span class="hl sym">(==</span> i buf<span class="hl sym">-</span>size<span class="hl sym">)</span>
            <span class="hl sym">(</span>do
              <span class="hl slc">;; buffer is full.  write it and start over.</span>
              <span class="hl sym">(</span>.write ostream buffer <span class="hl sym">(</span>int <span class="hl num">0</span><span class="hl sym">)</span> buf<span class="hl sym">-</span>size<span class="hl sym">)</span>
              <span class="hl sym">(</span>aset buffer <span class="hl sym">(</span>int <span class="hl num">0</span><span class="hl sym">)</span> rand<span class="hl sym">-</span>byte<span class="hl sym">)</span>
              <span class="hl sym">(</span>recur <span class="hl sym">(</span>unchecked<span class="hl sym">-</span>dec n<span class="hl sym">)</span> width<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl sym">(</span>int <span class="hl num">1</span><span class="hl sym">)))</span>
            <span class="hl sym">(</span>do
              <span class="hl sym">(</span>aset buffer i rand<span class="hl sym">-</span>byte<span class="hl sym">)</span>
              <span class="hl sym">(</span>if <span class="hl sym">(==</span> j <span class="hl sym">(</span>int <span class="hl num">1</span><span class="hl sym">))</span>
                <span class="hl slc">;; then</span>
                <span class="hl sym">(</span>do
                  <span class="hl sym">(</span>aset buffer <span class="hl sym">(</span>unchecked<span class="hl sym">-</span>inc i<span class="hl sym">) (</span>byte <span class="hl num">10</span><span class="hl sym">))</span> <span class="hl slc">;; add newline</span>
                  <span class="hl sym">(</span>recur <span class="hl sym">(</span>unchecked<span class="hl sym">-</span>dec n<span class="hl sym">)</span> width <span class="hl sym">(</span>unchecked<span class="hl sym">-</span>add i <span class="hl num">2</span><span class="hl sym">)))</span>
                <span class="hl slc">;; else</span>
                <span class="hl sym">(</span>recur <span class="hl sym">(</span>unchecked<span class="hl sym">-</span>dec n<span class="hl sym">) (</span>unchecked<span class="hl sym">-</span>dec j<span class="hl sym">)</span>
                       <span class="hl sym">(</span>unchecked<span class="hl sym">-</span>inc i<span class="hl sym">))))))))))</span>


<span class="hl sym">(</span>defn write<span class="hl sym">-</span>line <span class="hl sym">[</span>s ^java.io.BufferedOutputStream stream<span class="hl sym">]</span>
  <span class="hl sym">(</span>.write stream <span class="hl sym">(</span>.getBytes <span class="hl sym">(</span>str s <span class="hl str">&quot;</span><span class="hl esc">\</span><span class="hl str">n&quot;</span><span class="hl sym">))))</span>


<span class="hl sym">(</span>defn <span class="hl sym">-</span>main <span class="hl sym">[&amp;</span> args<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>n <span class="hl sym">(</span>Integer<span class="hl sym">/</span>parseInt <span class="hl sym">(</span>nth args <span class="hl num">0</span><span class="hl sym">))</span>
        ostream <span class="hl sym">(</span>java.io.BufferedOutputStream. System<span class="hl sym">/</span>out<span class="hl sym">)</span>
        start<span class="hl sym">-</span>time <span class="hl sym">(</span>System<span class="hl sym">/</span>currentTimeMillis<span class="hl sym">)]</span>
    <span class="hl sym">(</span>write<span class="hl sym">-</span>line <span class="hl str">&quot;&gt;ONE Homo sapiens alu&quot;</span> ostream<span class="hl sym">)</span>
    <span class="hl sym">(</span>fasta<span class="hl sym">-</span>repeat <span class="hl sym">(*</span> n <span class="hl num">2</span><span class="hl sym">)</span> ostream<span class="hl sym">)</span>
    <span class="hl sym">(</span>write<span class="hl sym">-</span>line <span class="hl str">&quot;&gt;TWO IUB ambiguity codes&quot;</span> ostream<span class="hl sym">)</span>
    <span class="hl sym">(</span>fasta<span class="hl sym">-</span>random <span class="hl sym">*</span>iub<span class="hl sym">* (*</span> n <span class="hl num">3</span><span class="hl sym">)</span> ostream<span class="hl sym">)</span>
    <span class="hl sym">(</span>write<span class="hl sym">-</span>line <span class="hl str">&quot;&gt;THREE Homo sapiens frequency&quot;</span> ostream<span class="hl sym">)</span>
    <span class="hl sym">(</span>fasta<span class="hl sym">-</span>random <span class="hl sym">*</span>homosapiens<span class="hl sym">* (*</span> n <span class="hl num">5</span><span class="hl sym">)</span> ostream<span class="hl sym">)</span>
    <span class="hl sym">(</span>.flush ostream<span class="hl sym">)))</span>
