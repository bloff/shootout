<span class="hl com">/*</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Contributed by Eckehard Berns</span>
<span class="hl com"> * Based on code by Kevin Carson</span>
<span class="hl com"> */</span>

<span class="hl dir">#include &lt;stdlib.h&gt;</span>
<span class="hl dir">#include &lt;stdio.h&gt;</span>
<span class="hl dir">#include &lt;pthread.h&gt;</span>

<span class="hl kwc">typedef</span> <span class="hl kwb">struct</span> node <span class="hl sym">{</span>
   <span class="hl kwb">struct</span> node <span class="hl sym">*</span>left<span class="hl sym">, *</span>right<span class="hl sym">;</span>
   <span class="hl kwb">long</span> item<span class="hl sym">;</span>
<span class="hl sym">}</span> node<span class="hl sym">;</span>

<span class="hl kwb">static</span> node <span class="hl sym">*</span>
<span class="hl kwd">new_node</span><span class="hl sym">(</span>node <span class="hl sym">*</span>left<span class="hl sym">,</span> node <span class="hl sym">*</span>right<span class="hl sym">,</span> <span class="hl kwb">long</span> item<span class="hl sym">)</span>
<span class="hl sym">{</span>
   node <span class="hl sym">*</span>ret<span class="hl sym">;</span>

   ret <span class="hl sym">=</span> <span class="hl kwd">malloc</span><span class="hl sym">(</span><span class="hl kwa">sizeof</span><span class="hl sym">(</span>node<span class="hl sym">));</span>
   ret<span class="hl sym">-&gt;</span>left <span class="hl sym">=</span> left<span class="hl sym">;</span>
   ret<span class="hl sym">-&gt;</span>right <span class="hl sym">=</span> right<span class="hl sym">;</span>
   ret<span class="hl sym">-&gt;</span>item <span class="hl sym">=</span> item<span class="hl sym">;</span>

   <span class="hl kwa">return</span> ret<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">static long</span>
<span class="hl kwd">item_check</span><span class="hl sym">(</span>node <span class="hl sym">*</span>tree<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span>tree<span class="hl sym">-&gt;</span>left <span class="hl sym">==</span> NULL<span class="hl sym">)</span>
      <span class="hl kwa">return</span> tree<span class="hl sym">-&gt;</span>item<span class="hl sym">;</span>
   <span class="hl kwa">else</span>
      <span class="hl kwa">return</span> tree<span class="hl sym">-&gt;</span>item <span class="hl sym">+</span> <span class="hl kwd">item_check</span><span class="hl sym">(</span>tree<span class="hl sym">-&gt;</span>left<span class="hl sym">) -</span>
          <span class="hl kwd">item_check</span><span class="hl sym">(</span>tree<span class="hl sym">-&gt;</span>right<span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwb">static</span> node <span class="hl sym">*</span>
<span class="hl kwd">bottom_up_tree</span><span class="hl sym">(</span><span class="hl kwb">long</span> item<span class="hl sym">,</span> <span class="hl kwb">int</span> depth<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span>depth <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
      <span class="hl kwa">return</span> <span class="hl kwd">new_node</span><span class="hl sym">(</span><span class="hl kwd">bottom_up_tree</span><span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> item <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> depth <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">),</span>
          <span class="hl kwd">bottom_up_tree</span><span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> item<span class="hl sym">,</span> depth <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">),</span> item<span class="hl sym">);</span>
   <span class="hl kwa">else</span>
      <span class="hl kwa">return</span> <span class="hl kwd">new_node</span><span class="hl sym">(</span>NULL<span class="hl sym">,</span> NULL<span class="hl sym">,</span> item<span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwb">static void</span>
<span class="hl kwd">delete_tree</span><span class="hl sym">(</span>node <span class="hl sym">*</span>tree<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span>tree<span class="hl sym">-&gt;</span>left <span class="hl sym">!=</span> NULL<span class="hl sym">) {</span>
      <span class="hl kwd">delete_tree</span><span class="hl sym">(</span>tree<span class="hl sym">-&gt;</span>left<span class="hl sym">);</span>
      <span class="hl kwd">delete_tree</span><span class="hl sym">(</span>tree<span class="hl sym">-&gt;</span>right<span class="hl sym">);</span>
   <span class="hl sym">}</span>
   <span class="hl kwd">free</span><span class="hl sym">(</span>tree<span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwb">struct</span> worker_args <span class="hl sym">{</span>
   <span class="hl kwb">long</span> iter<span class="hl sym">,</span> check<span class="hl sym">;</span>
   <span class="hl kwb">int</span> depth<span class="hl sym">;</span>
   pthread_t id<span class="hl sym">;</span>
   <span class="hl kwb">struct</span> worker_args <span class="hl sym">*</span>next<span class="hl sym">;</span>
<span class="hl sym">};</span>

<span class="hl kwb">static void</span> <span class="hl sym">*</span>
<span class="hl kwd">check_tree_of_depth</span><span class="hl sym">(</span><span class="hl kwb">void</span> <span class="hl sym">*</span>_args<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwb">struct</span> worker_args <span class="hl sym">*</span>args <span class="hl sym">=</span> _args<span class="hl sym">;</span>
   <span class="hl kwb">long</span> i<span class="hl sym">,</span> iter<span class="hl sym">,</span> check<span class="hl sym">,</span> depth<span class="hl sym">;</span>
   node <span class="hl sym">*</span>tmp<span class="hl sym">;</span>

   iter <span class="hl sym">=</span> args<span class="hl sym">-&gt;</span>iter<span class="hl sym">;</span>
   depth <span class="hl sym">=</span> args<span class="hl sym">-&gt;</span>depth<span class="hl sym">;</span>

   check <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span> i <span class="hl sym">&lt;=</span> iter<span class="hl sym">;</span> i<span class="hl sym">++) {</span>
      tmp <span class="hl sym">=</span> <span class="hl kwd">bottom_up_tree</span><span class="hl sym">(</span>i<span class="hl sym">,</span> depth<span class="hl sym">);</span>
      check <span class="hl sym">+=</span> <span class="hl kwd">item_check</span><span class="hl sym">(</span>tmp<span class="hl sym">);</span>
      <span class="hl kwd">delete_tree</span><span class="hl sym">(</span>tmp<span class="hl sym">);</span>

      tmp <span class="hl sym">=</span> <span class="hl kwd">bottom_up_tree</span><span class="hl sym">(-</span>i<span class="hl sym">,</span> depth<span class="hl sym">);</span>
      check <span class="hl sym">+=</span> <span class="hl kwd">item_check</span><span class="hl sym">(</span>tmp<span class="hl sym">);</span>
      <span class="hl kwd">delete_tree</span><span class="hl sym">(</span>tmp<span class="hl sym">);</span>
   <span class="hl sym">}</span>

   args<span class="hl sym">-&gt;</span>check <span class="hl sym">=</span> check<span class="hl sym">;</span>
   <span class="hl kwa">return</span> NULL<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span>
<span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span> ac<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">**</span>av<span class="hl sym">)</span>
<span class="hl sym">{</span>
   node <span class="hl sym">*</span>stretch<span class="hl sym">, *</span>longlived<span class="hl sym">;</span>
   <span class="hl kwb">struct</span> worker_args <span class="hl sym">*</span>args<span class="hl sym">, *</span>targs<span class="hl sym">, *</span>hargs<span class="hl sym">;</span>
   <span class="hl kwb">int</span> n<span class="hl sym">,</span> depth<span class="hl sym">,</span> mindepth<span class="hl sym">,</span> maxdepth<span class="hl sym">,</span> stretchdepth<span class="hl sym">;</span>

   n <span class="hl sym">=</span> ac <span class="hl sym">&gt;</span> <span class="hl num">1</span> ? <span class="hl kwd">atoi</span><span class="hl sym">(</span>av<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]) :</span> <span class="hl num">10</span><span class="hl sym">;</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span>n <span class="hl sym">&lt;</span> <span class="hl num">1</span><span class="hl sym">) {</span>
      <span class="hl kwd">fprintf</span><span class="hl sym">(</span>stderr<span class="hl sym">,</span> <span class="hl str">&quot;Wrong argument.</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">);</span>
      <span class="hl kwd">exit</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">);</span>
   <span class="hl sym">}</span>

   mindepth <span class="hl sym">=</span> <span class="hl num">4</span><span class="hl sym">;</span>
   maxdepth <span class="hl sym">=</span> mindepth <span class="hl sym">+</span> <span class="hl num">2</span> <span class="hl sym">&gt;</span> n ? mindepth <span class="hl sym">+</span> <span class="hl num">2</span> <span class="hl sym">:</span> n<span class="hl sym">;</span>
   stretchdepth <span class="hl sym">=</span> maxdepth <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>

   stretch <span class="hl sym">=</span> <span class="hl kwd">bottom_up_tree</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> stretchdepth<span class="hl sym">);</span>
   <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;stretch tree of depth %u</span><span class="hl esc">\t</span> <span class="hl str">check: %li</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> stretchdepth<span class="hl sym">,</span>
       <span class="hl kwd">item_check</span><span class="hl sym">(</span>stretch<span class="hl sym">));</span>
   <span class="hl kwd">delete_tree</span><span class="hl sym">(</span>stretch<span class="hl sym">);</span>

   longlived <span class="hl sym">=</span> <span class="hl kwd">bottom_up_tree</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> maxdepth<span class="hl sym">);</span>

   hargs <span class="hl sym">=</span> NULL<span class="hl sym">;</span>
   targs <span class="hl sym">=</span> NULL<span class="hl sym">;</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span>depth <span class="hl sym">=</span> mindepth<span class="hl sym">;</span> depth <span class="hl sym">&lt;=</span> maxdepth<span class="hl sym">;</span> depth <span class="hl sym">+=</span> <span class="hl num">2</span><span class="hl sym">) {</span>

      args <span class="hl sym">=</span> <span class="hl kwd">malloc</span><span class="hl sym">(</span><span class="hl kwa">sizeof</span><span class="hl sym">(</span><span class="hl kwb">struct</span> worker_args<span class="hl sym">));</span>
      args<span class="hl sym">-&gt;</span>iter <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>maxdepth <span class="hl sym">-</span> depth <span class="hl sym">+</span> mindepth<span class="hl sym">);</span>
      args<span class="hl sym">-&gt;</span>depth <span class="hl sym">=</span> depth<span class="hl sym">;</span>
      args<span class="hl sym">-&gt;</span>next <span class="hl sym">=</span> NULL<span class="hl sym">;</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>targs <span class="hl sym">==</span> NULL<span class="hl sym">) {</span>
         hargs <span class="hl sym">=</span> args<span class="hl sym">;</span>
         targs <span class="hl sym">=</span> args<span class="hl sym">;</span>
      <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
         targs<span class="hl sym">-&gt;</span>next <span class="hl sym">=</span> args<span class="hl sym">;</span>
         targs <span class="hl sym">=</span> args<span class="hl sym">;</span>
      <span class="hl sym">}</span>
      <span class="hl kwd">pthread_create</span><span class="hl sym">(&amp;</span>args<span class="hl sym">-&gt;</span>id<span class="hl sym">,</span> NULL<span class="hl sym">,</span> check_tree_of_depth<span class="hl sym">,</span> args<span class="hl sym">);</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">while</span> <span class="hl sym">(</span>hargs <span class="hl sym">!=</span> NULL<span class="hl sym">) {</span>
      args <span class="hl sym">=</span> hargs<span class="hl sym">;</span>
      <span class="hl kwd">pthread_join</span><span class="hl sym">(</span>args<span class="hl sym">-&gt;</span>id<span class="hl sym">,</span> NULL<span class="hl sym">);</span>
      <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;%ld</span><span class="hl esc">\t</span> <span class="hl str">trees of depth %d</span><span class="hl esc">\t</span> <span class="hl str">check: %ld</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span>
          args<span class="hl sym">-&gt;</span>iter <span class="hl sym">*</span> <span class="hl num">2</span><span class="hl sym">,</span> args<span class="hl sym">-&gt;</span>depth<span class="hl sym">,</span> args<span class="hl sym">-&gt;</span>check<span class="hl sym">);</span>
      hargs <span class="hl sym">=</span> args<span class="hl sym">-&gt;</span>next<span class="hl sym">;</span>
      <span class="hl kwd">free</span><span class="hl sym">(</span>args<span class="hl sym">);</span>
   <span class="hl sym">}</span>

   <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;long lived tree of depth %d</span><span class="hl esc">\t</span> <span class="hl str">check: %ld</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> maxdepth<span class="hl sym">,</span>
       <span class="hl kwd">item_check</span><span class="hl sym">(</span>longlived<span class="hl sym">));</span>

   <span class="hl com">/* not in original C version: */</span>
   <span class="hl kwd">delete_tree</span><span class="hl sym">(</span>longlived<span class="hl sym">);</span>

   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

