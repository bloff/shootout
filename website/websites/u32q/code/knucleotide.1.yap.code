<span class="hl slc">% ----------------------------------------------------------------------</span>
<span class="hl slc">% The Computer Language Benchmarks Game</span>
<span class="hl slc">% http://shootout.alioth.debian.org/</span>
<span class="hl slc">%</span>
<span class="hl slc">% contributed by Anthony Borla</span>
<span class="hl slc">% modified to run with YAP by Glendon Holst</span>
<span class="hl slc">% ----------------------------------------------------------------------</span>

<span class="hl sym">:-</span> yap_flag<span class="hl sym">(</span>unknown<span class="hl sym">,</span>error<span class="hl sym">).</span>

<span class="hl sym">:-</span> use_module<span class="hl sym">(</span>library<span class="hl sym">(</span>readutil<span class="hl sym">)).</span>
<span class="hl sym">:-</span> use_module<span class="hl sym">(</span>library<span class="hl sym">(</span>lists<span class="hl sym">)).</span>
<span class="hl sym">:-</span> use_module<span class="hl sym">(</span>library<span class="hl sym">(</span>assoc<span class="hl sym">)).</span>

<span class="hl sym">:-</span> initialization<span class="hl sym">(</span>main<span class="hl sym">).</span>

main <span class="hl sym">:-</span>
   <span class="hl kwb">current_input</span><span class="hl sym">(</span>Cin<span class="hl sym">),</span>
   load_sequence<span class="hl sym">(</span>Cin<span class="hl sym">,</span> Seq<span class="hl sym">),</span>

   FragmentLengths <span class="hl sym">= [</span><span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">],</span>
   forall<span class="hl sym">(</span>member<span class="hl sym">(</span>E<span class="hl sym">,</span> FragmentLengths<span class="hl sym">), (</span>print_frequencies<span class="hl sym">(</span>Seq<span class="hl sym">,</span> E<span class="hl sym">),</span> <span class="hl kwa">nl</span><span class="hl sym">)),</span>

   Fragments <span class="hl sym">= [</span><span class="hl str">&quot;GGT&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;GGTA&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;GGTATT&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;GGTATTTTAATT&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl sym">],</span>
   forall<span class="hl sym">(</span>member<span class="hl sym">(</span>E<span class="hl sym">,</span> Fragments<span class="hl sym">),</span> print_count<span class="hl sym">(</span>Seq<span class="hl sym">,</span> E<span class="hl sym">)).</span>

<span class="hl slc">% ------------------------------- %</span>

print_frequencies<span class="hl sym">(</span>Seq<span class="hl sym">,</span> KeyLen<span class="hl sym">) :-</span>
   generate_counts<span class="hl sym">(</span>Seq<span class="hl sym">,</span> KeyLen<span class="hl sym">,</span> CountTable<span class="hl sym">),</span>
   sum_counts_<span class="hl sym">(</span>CountTable<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> SumCounts<span class="hl sym">),</span>
   make_freq_table_<span class="hl sym">(</span>CountTable<span class="hl sym">,</span> SumCounts<span class="hl sym">, [],</span> FTable<span class="hl sym">),</span>
   keysort<span class="hl sym">(</span>FTable<span class="hl sym">,</span> SFTable<span class="hl sym">),</span> reverse<span class="hl sym">(</span>SFTable<span class="hl sym">,</span> FreqTable<span class="hl sym">),</span>
   print_freq_table_<span class="hl sym">(</span>FreqTable<span class="hl sym">).</span>

<span class="hl slc">% ------------- %</span>

sum_counts_<span class="hl sym">([</span>_<span class="hl sym">-</span>C<span class="hl sym">|</span>T<span class="hl sym">],</span> Acc<span class="hl sym">,</span> Sum<span class="hl sym">) :-</span> Acc1 <span class="hl kwa">is</span> Acc <span class="hl sym">+</span> C<span class="hl sym">, !,</span> sum_counts_<span class="hl sym">(</span>T<span class="hl sym">,</span> Acc1<span class="hl sym">,</span> Sum<span class="hl sym">).</span>
sum_counts_<span class="hl sym">([],</span> Acc<span class="hl sym">,</span> Acc<span class="hl sym">).</span>

<span class="hl slc">% ------------- %</span>

make_freq_table_<span class="hl sym">([</span>K<span class="hl sym">-</span>C<span class="hl sym">|</span>T<span class="hl sym">],</span> SumCounts<span class="hl sym">,</span> FTA<span class="hl sym">,</span> FreqTable<span class="hl sym">) :-</span>
   F <span class="hl kwa">is</span> C <span class="hl sym">/</span> SumCounts <span class="hl sym">*</span> <span class="hl num">100.0</span><span class="hl sym">,</span> append<span class="hl sym">([</span>F<span class="hl sym">-</span>K<span class="hl sym">],</span> FTA<span class="hl sym">,</span> FTA1<span class="hl sym">),</span>
   <span class="hl sym">!,</span> make_freq_table_<span class="hl sym">(</span>T<span class="hl sym">,</span> SumCounts<span class="hl sym">,</span> FTA1<span class="hl sym">,</span> FreqTable<span class="hl sym">).</span>
make_freq_table_<span class="hl sym">([],</span> _<span class="hl sym">,</span> FTA<span class="hl sym">,</span> FTA<span class="hl sym">).</span>

<span class="hl slc">% ------------- %</span>

print_freq_table_<span class="hl sym">([</span>F<span class="hl sym">-</span>K<span class="hl sym">|</span>T<span class="hl sym">]) :-</span>
   format<span class="hl sym">(</span><span class="hl str">'~w ~3f</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">, [</span>K<span class="hl sym">,</span> F<span class="hl sym">]),</span>
   <span class="hl sym">!,</span> print_freq_table_<span class="hl sym">(</span>T<span class="hl sym">).</span>
print_freq_table_<span class="hl sym">([]).</span>

<span class="hl slc">% ------------------------------- %</span>

print_count<span class="hl sym">(</span>Seq<span class="hl sym">,</span> Fragment<span class="hl sym">) :-</span>
   length<span class="hl sym">(</span>Fragment<span class="hl sym">,</span> FragLen<span class="hl sym">),</span>
   generate_counts<span class="hl sym">(</span>Seq<span class="hl sym">,</span> FragLen<span class="hl sym">,</span> CountTable<span class="hl sym">),</span>
   <span class="hl kwb">atom_codes</span><span class="hl sym">(</span>FragKey<span class="hl sym">,</span> Fragment<span class="hl sym">),</span>
   <span class="hl sym">(</span>
      select<span class="hl sym">(</span>FragKey<span class="hl sym">-</span>Count<span class="hl sym">,</span> CountTable<span class="hl sym">,</span> _<span class="hl sym">)</span>
   <span class="hl sym">;</span>
      Count <span class="hl sym">=</span> <span class="hl num">0</span>
   <span class="hl sym">), !,</span>
   format<span class="hl sym">(</span><span class="hl str">'~d</span><span class="hl esc">\t</span><span class="hl str">~s</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">, [</span>Count<span class="hl sym">,</span> Fragment<span class="hl sym">]).</span>

<span class="hl slc">% ------------- %</span>

generate_counts<span class="hl sym">(</span>Seq<span class="hl sym">,</span> Length<span class="hl sym">,</span> CountTable<span class="hl sym">) :-</span>
   length<span class="hl sym">(</span>Seq<span class="hl sym">,</span> SeqLen<span class="hl sym">),</span> Last <span class="hl kwa">is</span> SeqLen <span class="hl sym">-</span> Length <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span>
   make_count_table<span class="hl sym">(</span>Length<span class="hl sym">,</span> Last<span class="hl sym">,</span> Seq<span class="hl sym">,</span> CountTable<span class="hl sym">).</span>

<span class="hl slc">% ------------------------------- %</span>

make_count_table<span class="hl sym">(</span>Length<span class="hl sym">,</span> Last<span class="hl sym">,</span> Seq<span class="hl sym">,</span> CountTable<span class="hl sym">) :-</span>
   empty_assoc<span class="hl sym">(</span>A<span class="hl sym">),</span>
   mct_i_loop_<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> Length<span class="hl sym">,</span> Last<span class="hl sym">,</span> Seq<span class="hl sym">,</span> A<span class="hl sym">,</span> ACT<span class="hl sym">),</span>
   assoc_to_list<span class="hl sym">(</span>ACT<span class="hl sym">,</span> CountTable<span class="hl sym">).</span>

<span class="hl slc">% ------------- %</span>

mct_i_loop_<span class="hl sym">(</span>I<span class="hl sym">,</span> Length<span class="hl sym">,</span> Last<span class="hl sym">,</span> Seq<span class="hl sym">,</span> CTA<span class="hl sym">,</span> CountTable<span class="hl sym">) :-</span>
   I <span class="hl sym">&lt;</span> Length<span class="hl sym">, !,</span>
   mct_j_loop_<span class="hl sym">(</span>Last<span class="hl sym">,</span> Length<span class="hl sym">,</span> Seq<span class="hl sym">,</span> CTA<span class="hl sym">,</span> CTA1<span class="hl sym">),</span>
   I1 <span class="hl kwa">is</span> I <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">, !,</span>
   Seq <span class="hl sym">= [</span>_<span class="hl sym">|</span>Ss<span class="hl sym">],</span> Last1 <span class="hl kwa">is</span> Last <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span>
   mct_i_loop_<span class="hl sym">(</span>I1<span class="hl sym">,</span> Length<span class="hl sym">,</span> Last1<span class="hl sym">,</span> Ss<span class="hl sym">,</span> CTA1<span class="hl sym">,</span> CountTable<span class="hl sym">).</span>
mct_i_loop_<span class="hl sym">(</span>Length<span class="hl sym">,</span> Length<span class="hl sym">,</span> _<span class="hl sym">,</span> _<span class="hl sym">,</span> CTA<span class="hl sym">,</span> CTA<span class="hl sym">).</span>


<span class="hl slc">% ------------- %</span>

mct_j_loop_<span class="hl sym">(</span>Last<span class="hl sym">,</span> Length<span class="hl sym">,</span> Seq<span class="hl sym">,</span> CTA<span class="hl sym">,</span> CountTable<span class="hl sym">) :-</span>
   Last <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">, !,</span>
   sub_list_<span class="hl sym">(</span>Seq<span class="hl sym">,</span> Length<span class="hl sym">,</span> KeyString<span class="hl sym">,</span> Rest<span class="hl sym">),</span> <span class="hl kwb">atom_codes</span><span class="hl sym">(</span>Key<span class="hl sym">,</span> KeyString<span class="hl sym">),</span>
   <span class="hl sym">(</span>
      get_assoc<span class="hl sym">(</span>Key<span class="hl sym">,</span> CTA<span class="hl sym">,</span> Value<span class="hl sym">) -&gt;</span>
      V1 <span class="hl kwa">is</span> Value <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span> put_assoc<span class="hl sym">(</span>Key<span class="hl sym">,</span> CTA<span class="hl sym">,</span> V1<span class="hl sym">,</span> CTA1<span class="hl sym">)</span>
   <span class="hl sym">;</span>
      put_assoc<span class="hl sym">(</span>Key<span class="hl sym">,</span> CTA<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> CTA1<span class="hl sym">)</span>
   <span class="hl sym">),</span>
   <span class="hl sym">!,</span> Last1 <span class="hl kwa">is</span> Last <span class="hl sym">-</span> Length<span class="hl sym">,</span>
   mct_j_loop_<span class="hl sym">(</span>Last1<span class="hl sym">,</span> Length<span class="hl sym">,</span> Rest<span class="hl sym">,</span> CTA1<span class="hl sym">,</span> CountTable<span class="hl sym">).</span>
mct_j_loop_<span class="hl sym">(</span>Last<span class="hl sym">,</span> _<span class="hl sym">,</span> _<span class="hl sym">,</span> CTA<span class="hl sym">,</span> CTA<span class="hl sym">) :-</span> Last <span class="hl sym">=&lt;</span> <span class="hl num">0</span><span class="hl sym">, !.</span>

<span class="hl slc">% ------------------------------- %</span>

load_sequence<span class="hl sym">(</span>S<span class="hl sym">,</span> Seq<span class="hl sym">) :-</span> load_sequence_<span class="hl sym">(</span>S<span class="hl sym">,</span> <span class="hl kwa">fail</span><span class="hl sym">,</span> <span class="hl str">&quot;&quot;</span><span class="hl sym">,</span> Seq<span class="hl sym">).</span>

<span class="hl slc">% ------------- %</span>

load_sequence_<span class="hl sym">(</span>S<span class="hl sym">,</span> Loading<span class="hl sym">,</span> Seq<span class="hl sym">,</span> RetSeq<span class="hl sym">) :-</span>
   <span class="hl kwb">catch</span><span class="hl sym">(</span>read_line_to_codes<span class="hl sym">(</span>S<span class="hl sym">,</span> L<span class="hl sym">),</span> _<span class="hl sym">,</span> <span class="hl kwa">fail</span><span class="hl sym">),</span> is_list<span class="hl sym">(</span>L<span class="hl sym">), !,</span>
   <span class="hl sym">(</span>
      Loading <span class="hl sym">-&gt;</span>
      process_sequence<span class="hl sym">(</span>L<span class="hl sym">,</span> S<span class="hl sym">,</span> Seq<span class="hl sym">,</span> RetSeq<span class="hl sym">)</span>
   <span class="hl sym">;</span>
      ignore_sequence<span class="hl sym">(</span>L<span class="hl sym">,</span> S<span class="hl sym">,</span> Seq<span class="hl sym">,</span> RetSeq<span class="hl sym">)</span>
   <span class="hl sym">).</span>
load_sequence_<span class="hl sym">(</span>S<span class="hl sym">,</span> _<span class="hl sym">,</span> Seq<span class="hl sym">,</span> Seq<span class="hl sym">).</span>

<span class="hl slc">% ------------- %</span>

ignore_sequence<span class="hl sym">([</span><span class="hl num">62</span><span class="hl sym">,</span><span class="hl num">84</span><span class="hl sym">,</span><span class="hl num">72</span><span class="hl sym">,</span><span class="hl num">82</span><span class="hl sym">,</span><span class="hl num">69</span><span class="hl sym">,</span><span class="hl num">69</span><span class="hl sym">|</span>_<span class="hl sym">],</span> S<span class="hl sym">,</span> Seq<span class="hl sym">,</span> RetSeq<span class="hl sym">) :- !,</span>
   load_sequence_<span class="hl sym">(</span>S<span class="hl sym">,</span> <span class="hl kwa">true</span><span class="hl sym">,</span> Seq<span class="hl sym">,</span> RetSeq<span class="hl sym">).</span>
ignore_sequence<span class="hl sym">(</span>_<span class="hl sym">,</span> S<span class="hl sym">,</span> Seq<span class="hl sym">,</span> RetSeq<span class="hl sym">) :- !,</span>
   load_sequence_<span class="hl sym">(</span>S<span class="hl sym">,</span> <span class="hl kwa">fail</span><span class="hl sym">,</span> Seq<span class="hl sym">,</span> RetSeq<span class="hl sym">).</span>

process_sequence<span class="hl sym">([</span><span class="hl num">62</span><span class="hl sym">|</span>_<span class="hl sym">],</span> _<span class="hl sym">,</span> Seq<span class="hl sym">,</span> Seq<span class="hl sym">) :- !.</span>
process_sequence<span class="hl sym">([</span><span class="hl num">59</span><span class="hl sym">|</span>_<span class="hl sym">],</span> S<span class="hl sym">,</span> Seq<span class="hl sym">,</span> RetSeq<span class="hl sym">) :- !,</span>
   load_sequence_<span class="hl sym">(</span>S<span class="hl sym">,</span> <span class="hl kwa">true</span><span class="hl sym">,</span> Seq<span class="hl sym">,</span> RetSeq<span class="hl sym">).</span>

process_sequence<span class="hl sym">(</span>L<span class="hl sym">,</span> S<span class="hl sym">,</span> Seq<span class="hl sym">,</span> RetSeq<span class="hl sym">) :-</span>
   to_upper<span class="hl sym">(</span>L<span class="hl sym">,</span> UL<span class="hl sym">),</span>
   append<span class="hl sym">(</span>Seq<span class="hl sym">,</span> UL<span class="hl sym">,</span> NewSeq<span class="hl sym">),</span>
   <span class="hl sym">!,</span> load_sequence_<span class="hl sym">(</span>S<span class="hl sym">,</span> <span class="hl kwa">true</span><span class="hl sym">,</span> NewSeq<span class="hl sym">,</span> RetSeq<span class="hl sym">).</span>

<span class="hl slc">% ------------------------------- %</span>

to_upper<span class="hl sym">(</span>L<span class="hl sym">,</span> U<span class="hl sym">) :-</span> to_upper_<span class="hl sym">(</span>L<span class="hl sym">, [],</span> U<span class="hl sym">).</span>

<span class="hl slc">% ------------- %</span>

to_upper_<span class="hl sym">([],</span> UA<span class="hl sym">,</span> U<span class="hl sym">) :-</span> reverse<span class="hl sym">(</span>UA<span class="hl sym">,</span> U<span class="hl sym">), !.</span>

to_upper_<span class="hl sym">([</span>C<span class="hl sym">|</span>T<span class="hl sym">],</span> UA<span class="hl sym">,</span> U<span class="hl sym">) :-</span>
   is_lower<span class="hl sym">(</span>C<span class="hl sym">),</span> C1 <span class="hl kwa">is</span> C <span class="hl sym">-</span> <span class="hl num">32</span><span class="hl sym">,</span>
   <span class="hl sym">!,</span> to_upper_<span class="hl sym">(</span>T<span class="hl sym">, [</span>C1<span class="hl sym">|</span>UA<span class="hl sym">],</span> U<span class="hl sym">).</span>

to_upper_<span class="hl sym">([</span>C<span class="hl sym">|</span>T<span class="hl sym">],</span> UA<span class="hl sym">,</span> U<span class="hl sym">) :-</span>
   <span class="hl sym">!,</span> to_upper_<span class="hl sym">(</span>T<span class="hl sym">, [</span>C<span class="hl sym">|</span>UA<span class="hl sym">],</span> U<span class="hl sym">).</span>

<span class="hl slc">% ------------- %</span>

is_lower<span class="hl sym">(</span>C<span class="hl sym">) :-</span> C <span class="hl sym">&gt;=</span> <span class="hl num">97</span><span class="hl sym">,</span> C <span class="hl sym">=&lt;</span> <span class="hl num">122</span><span class="hl sym">.</span>

<span class="hl slc">% ------------------------------- %</span>

forall<span class="hl sym">(</span>Gen<span class="hl sym">,</span> Proc<span class="hl sym">) :-</span> <span class="hl kwb">findall</span><span class="hl sym">(</span>_<span class="hl sym">,(</span>Gen<span class="hl sym">,</span> Proc<span class="hl sym">),</span> _<span class="hl sym">).</span>

<span class="hl slc">% ------------- %</span>

sub_list_<span class="hl sym">([</span>S<span class="hl sym">|</span>Seq<span class="hl sym">],</span> L<span class="hl sym">, [</span>S<span class="hl sym">|</span>Ks<span class="hl sym">],</span> Rs<span class="hl sym">) :-</span> L <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">, !,</span>
   L1 <span class="hl kwa">is</span> L <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span>
   sub_list_<span class="hl sym">(</span>Seq<span class="hl sym">,</span> L1<span class="hl sym">,</span> Ks<span class="hl sym">,</span> Rs<span class="hl sym">).</span>
sub_list_<span class="hl sym">(</span>Rs<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">, [],</span> Rs<span class="hl sym">).</span>

<span class="hl slc">% ------------------------------- %</span>
