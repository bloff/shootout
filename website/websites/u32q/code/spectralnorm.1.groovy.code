<span class="hl com">/*</span>
<span class="hl com">	The Computer Language Shootout</span>
<span class="hl com">	http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">	contributed by Jochen Hinrichsen</span>
<span class="hl com">*/</span>

<span class="hl kwa">def</span> <span class="hl kwd">approximate</span><span class="hl sym">(</span>n<span class="hl sym">) {</span>
    <span class="hl slc">// create unit vector</span>
	<span class="hl kwa">def</span> u <span class="hl sym">= [</span><span class="hl num">1.0</span>D<span class="hl sym">] *</span> n

    <span class="hl slc">// 20 steps of the power method</span>
	<span class="hl kwa">def</span> v <span class="hl sym">= [</span><span class="hl num">0.0</span>D<span class="hl sym">] *</span> n

    <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl kwa">in</span> <span class="hl num">1</span><span class="hl sym">.</span><span class="hl num">.10</span><span class="hl sym">) {</span>
        <span class="hl kwd">MultiplyAtAv</span><span class="hl sym">(</span>n<span class="hl sym">,</span>u<span class="hl sym">,</span>v<span class="hl sym">)</span>
        <span class="hl kwd">MultiplyAtAv</span><span class="hl sym">(</span>n<span class="hl sym">,</span>v<span class="hl sym">,</span>u<span class="hl sym">)</span>
    <span class="hl sym">}</span>

    <span class="hl slc">// B=AtA         A multiplied by A transposed</span>
    <span class="hl slc">// v.Bv /(v.v)   eigenvalue of v</span>
    <span class="hl kwb">double</span> vBv <span class="hl sym">=</span> vv <span class="hl sym">=</span> <span class="hl num">0.0</span>D
    <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl kwa">in</span> <span class="hl num">0</span><span class="hl sym">..&lt;</span>n<span class="hl sym">) {</span>
        vBv <span class="hl sym">+=</span> u<span class="hl sym">[</span>i<span class="hl sym">]*</span>v<span class="hl sym">[</span>i<span class="hl sym">]</span>
        vv  <span class="hl sym">+=</span> v<span class="hl sym">[</span>i<span class="hl sym">]*</span>v<span class="hl sym">[</span>i<span class="hl sym">]</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">return</span> <span class="hl kwc">Math</span><span class="hl sym">.</span><span class="hl kwd">sqrt</span><span class="hl sym">(</span>vBv<span class="hl sym">/</span>vv<span class="hl sym">)</span>
<span class="hl sym">}</span>


<span class="hl com">/* return element i,j of infinite matrix A */</span>
<span class="hl kwa">def</span> <span class="hl kwd">A</span><span class="hl sym">(</span>i<span class="hl sym">,</span> j<span class="hl sym">) {</span>
    <span class="hl kwa">return</span> <span class="hl sym">(</span><span class="hl num">1.0</span>D<span class="hl sym">) / ((</span>i<span class="hl sym">+</span>j<span class="hl sym">)*(</span>i<span class="hl sym">+</span>j<span class="hl sym">+(</span><span class="hl num">1.0</span>D<span class="hl sym">))/(</span><span class="hl num">2.0</span>D<span class="hl sym">) +</span>i<span class="hl sym">+(</span><span class="hl num">1.0</span>D<span class="hl sym">))</span>
<span class="hl sym">}</span>

<span class="hl com">/* multiply vector v by matrix A */</span>
<span class="hl kwa">def</span> <span class="hl kwd">MultiplyAv</span><span class="hl sym">(</span>n<span class="hl sym">,</span> v<span class="hl sym">,</span> Av<span class="hl sym">){</span>
    <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl kwa">in</span> <span class="hl num">0</span><span class="hl sym">..&lt;</span>n<span class="hl sym">) {</span>
        Av<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl num">0.0</span>D
        <span class="hl kwa">for</span> <span class="hl sym">(</span>j <span class="hl kwa">in</span> <span class="hl num">0</span><span class="hl sym">..&lt;</span>n<span class="hl sym">)</span> Av<span class="hl sym">[</span>i<span class="hl sym">] +=</span> <span class="hl kwd">A</span><span class="hl sym">(</span>i<span class="hl sym">,</span>j<span class="hl sym">)*</span>v<span class="hl sym">[</span>j<span class="hl sym">]</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl com">/* multiply vector v by matrix A transposed */</span>
<span class="hl kwa">def</span> <span class="hl kwd">MultiplyAtv</span><span class="hl sym">(</span>n<span class="hl sym">,</span> v<span class="hl sym">,</span> Atv<span class="hl sym">){</span>
    <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl kwa">in</span> <span class="hl num">0</span><span class="hl sym">..&lt;</span>n<span class="hl sym">) {</span>
        Atv<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl num">0.0</span>D
        <span class="hl kwa">for</span> <span class="hl sym">(</span>j <span class="hl kwa">in</span> <span class="hl num">0</span><span class="hl sym">..&lt;</span>n<span class="hl sym">)</span> Atv<span class="hl sym">[</span>i<span class="hl sym">] +=</span> <span class="hl kwd">A</span><span class="hl sym">(</span>j<span class="hl sym">,</span>i<span class="hl sym">)*</span>v<span class="hl sym">[</span>j<span class="hl sym">]</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl com">/* multiply vector v by matrix A and then by matrix A transposed */</span>
<span class="hl kwa">def</span> <span class="hl kwd">MultiplyAtAv</span><span class="hl sym">(</span>n<span class="hl sym">,</span> v<span class="hl sym">,</span> AtAv<span class="hl sym">){</span>
    <span class="hl kwb">double</span><span class="hl sym">[]</span> u <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">double</span><span class="hl sym">[</span>n<span class="hl sym">]</span>
    <span class="hl kwd">MultiplyAv</span><span class="hl sym">(</span>n<span class="hl sym">,</span> v<span class="hl sym">,</span> u<span class="hl sym">)</span>
    <span class="hl kwd">MultiplyAtv</span><span class="hl sym">(</span>n<span class="hl sym">,</span> u<span class="hl sym">,</span> AtAv<span class="hl sym">)</span>
<span class="hl sym">}</span>

<span class="hl kwa">def</span> n <span class="hl sym">= (</span>args<span class="hl sym">.</span>length <span class="hl sym">==</span> <span class="hl num">0</span> ? <span class="hl num">100</span> <span class="hl sym">:</span> args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">].</span><span class="hl kwd">toInteger</span><span class="hl sym">())</span>
<span class="hl kwa">def</span> nf <span class="hl sym">=</span> java<span class="hl sym">.</span>text<span class="hl sym">.</span><span class="hl kwc">NumberFormat</span><span class="hl sym">.</span><span class="hl kwd">getInstance</span><span class="hl sym">()</span>
nf<span class="hl sym">.</span><span class="hl kwd">setMaximumFractionDigits</span><span class="hl sym">(</span><span class="hl num">9</span><span class="hl sym">)</span>
nf<span class="hl sym">.</span><span class="hl kwd">setMinimumFractionDigits</span><span class="hl sym">(</span><span class="hl num">9</span><span class="hl sym">)</span>
nf<span class="hl sym">.</span><span class="hl kwd">setGroupingUsed</span><span class="hl sym">(</span>false<span class="hl sym">)</span>
<span class="hl kwd">println</span><span class="hl sym">(</span>nf<span class="hl sym">.</span><span class="hl kwd">format</span><span class="hl sym">(</span><span class="hl kwd">approximate</span><span class="hl sym">(</span>n<span class="hl sym">)))</span>

<span class="hl slc">// EOF</span>

