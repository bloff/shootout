<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;</span>
<span class="hl slc">;; Adapted from the Java -server version</span>
<span class="hl slc">;</span>
<span class="hl slc">;; contributed by Marko Kocic</span>
<span class="hl slc">;; modified by Kenneth Jonsson, restructured to allow usage of 'pmap'</span>
<span class="hl slc">;; modified by Andy Fingerhut to use faster primitive math ops</span>

<span class="hl sym">(</span>ns binarytrees
  <span class="hl sym">(:</span>gen<span class="hl sym">-</span>class<span class="hl sym">))</span>

<span class="hl sym">(</span>set<span class="hl sym">! *</span>warn<span class="hl sym">-</span>on<span class="hl sym">-</span>reflection<span class="hl sym">*</span> true<span class="hl sym">)</span>

<span class="hl sym">(</span>defrecord TreeNode <span class="hl sym">[</span>left right ^int item<span class="hl sym">])</span>

<span class="hl sym">(</span>defn bottom<span class="hl sym">-</span>up<span class="hl sym">-</span>tree <span class="hl sym">[</span>item depth<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>int<span class="hl sym">-</span>item <span class="hl sym">(</span>int item<span class="hl sym">)</span>
        int<span class="hl sym">-</span>depth <span class="hl sym">(</span>int depth<span class="hl sym">)]</span>
    <span class="hl sym">(</span>if <span class="hl sym">(</span>zero? int<span class="hl sym">-</span>depth<span class="hl sym">)</span>
      <span class="hl sym">(</span>TreeNode. nil nil int<span class="hl sym">-</span>item<span class="hl sym">)</span>
      <span class="hl sym">(</span>TreeNode.
       <span class="hl sym">(</span>bottom<span class="hl sym">-</span>up<span class="hl sym">-</span>tree <span class="hl sym">(</span>unchecked<span class="hl sym">-</span>dec <span class="hl sym">(</span>unchecked<span class="hl sym">-</span>multiply <span class="hl num">2</span> int<span class="hl sym">-</span>item<span class="hl sym">))</span>
                       <span class="hl sym">(</span>unchecked<span class="hl sym">-</span>dec int<span class="hl sym">-</span>depth<span class="hl sym">))</span>
       <span class="hl sym">(</span>bottom<span class="hl sym">-</span>up<span class="hl sym">-</span>tree <span class="hl sym">(</span>unchecked<span class="hl sym">-</span>multiply <span class="hl num">2</span> int<span class="hl sym">-</span>item<span class="hl sym">)</span>
                       <span class="hl sym">(</span>unchecked<span class="hl sym">-</span>dec int<span class="hl sym">-</span>depth<span class="hl sym">))</span>
       int<span class="hl sym">-</span>item<span class="hl sym">))))</span>

<span class="hl sym">(</span>defn item<span class="hl sym">-</span>check <span class="hl sym">[</span>node<span class="hl sym">]</span>
  <span class="hl sym">(</span>if <span class="hl sym">(</span>nil? <span class="hl sym">(:</span>left node<span class="hl sym">))</span>
    <span class="hl sym">(</span>int <span class="hl sym">(:</span>item node<span class="hl sym">))</span>
    <span class="hl sym">(</span>unchecked<span class="hl sym">-</span>add <span class="hl sym">(</span>unchecked<span class="hl sym">-</span>add <span class="hl sym">(</span>int <span class="hl sym">(:</span>item node<span class="hl sym">))</span>
                                  <span class="hl sym">(</span>int <span class="hl sym">(</span>item<span class="hl sym">-</span>check <span class="hl sym">(:</span>left node<span class="hl sym">))))</span>
                   <span class="hl sym">(</span>int <span class="hl sym">(- (</span>item<span class="hl sym">-</span>check <span class="hl sym">(:</span>right node<span class="hl sym">)))))))</span>

<span class="hl sym">(</span>defn iterate<span class="hl sym">-</span>trees <span class="hl sym">[</span>mx mn d<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>iterations <span class="hl sym">(</span>bit<span class="hl sym">-</span>shift<span class="hl sym">-</span>left <span class="hl num">1</span> <span class="hl sym">(</span>int <span class="hl sym">(+</span> mx mn <span class="hl sym">(-</span> d<span class="hl sym">))))]</span>
    <span class="hl sym">(</span>format <span class="hl str">&quot;%d</span><span class="hl esc">\</span><span class="hl str">t trees of depth %d</span><span class="hl esc">\</span><span class="hl str">t check: %d&quot;</span> <span class="hl sym">(*</span> <span class="hl num">2</span> iterations<span class="hl sym">)</span> d
            <span class="hl sym">(</span>reduce <span class="hl sym">+ (</span>map <span class="hl sym">(</span>fn <span class="hl sym">[</span>i<span class="hl sym">]</span>
                             <span class="hl sym">(</span>unchecked<span class="hl sym">-</span>add <span class="hl sym">(</span>int <span class="hl sym">(</span>item<span class="hl sym">-</span>check <span class="hl sym">(</span>bottom<span class="hl sym">-</span>up<span class="hl sym">-</span>tree i d<span class="hl sym">)))</span>
                                            <span class="hl sym">(</span>int <span class="hl sym">(</span>item<span class="hl sym">-</span>check <span class="hl sym">(</span>bottom<span class="hl sym">-</span>up<span class="hl sym">-</span>tree <span class="hl sym">(-</span> i<span class="hl sym">)</span> d<span class="hl sym">)))))</span>
                           <span class="hl sym">(</span>range <span class="hl num">1</span> <span class="hl sym">(</span>inc iterations<span class="hl sym">)))))))</span>

<span class="hl sym">(</span>def min<span class="hl sym">-</span>depth <span class="hl num">4</span><span class="hl sym">)</span>

<span class="hl sym">(</span>defn main <span class="hl sym">[</span>max<span class="hl sym">-</span>depth<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>stretch<span class="hl sym">-</span>depth <span class="hl sym">(</span>inc max<span class="hl sym">-</span>depth<span class="hl sym">)]</span>
    <span class="hl sym">(</span>let <span class="hl sym">[</span>tree <span class="hl sym">(</span>bottom<span class="hl sym">-</span>up<span class="hl sym">-</span>tree <span class="hl num">0</span> stretch<span class="hl sym">-</span>depth<span class="hl sym">)</span>
          check <span class="hl sym">(</span>item<span class="hl sym">-</span>check tree<span class="hl sym">)]</span>
      <span class="hl sym">(</span>println <span class="hl sym">(</span>format <span class="hl str">&quot;stretch tree of depth %d</span><span class="hl esc">\</span><span class="hl str">t check: %d&quot;</span> stretch<span class="hl sym">-</span>depth check<span class="hl sym">)))</span>
    <span class="hl sym">(</span>let <span class="hl sym">[</span>long<span class="hl sym">-</span>lived<span class="hl sym">-</span>tree <span class="hl sym">(</span>bottom<span class="hl sym">-</span>up<span class="hl sym">-</span>tree <span class="hl num">0</span> max<span class="hl sym">-</span>depth<span class="hl sym">) ]</span>
      <span class="hl sym">(</span>doseq <span class="hl sym">[</span>trees<span class="hl sym">-</span>nfo <span class="hl sym">(</span>map <span class="hl sym">(</span>fn <span class="hl sym">[</span>d<span class="hl sym">]</span>
                                <span class="hl sym">(</span>iterate<span class="hl sym">-</span>trees max<span class="hl sym">-</span>depth min<span class="hl sym">-</span>depth d<span class="hl sym">))</span>
			      <span class="hl sym">(</span>range min<span class="hl sym">-</span>depth stretch<span class="hl sym">-</span>depth <span class="hl num">2</span><span class="hl sym">)) ]</span>
        <span class="hl sym">(</span>println trees<span class="hl sym">-</span>nfo<span class="hl sym">))</span>
      <span class="hl sym">(</span>println <span class="hl sym">(</span>format <span class="hl str">&quot;long lived tree of depth %d</span><span class="hl esc">\</span><span class="hl str">t check: %d&quot;</span> max<span class="hl sym">-</span>depth <span class="hl sym">(</span>item<span class="hl sym">-</span>check long<span class="hl sym">-</span>lived<span class="hl sym">-</span>tree<span class="hl sym">)))</span>
      <span class="hl sym">(</span>shutdown<span class="hl sym">-</span>agents<span class="hl sym">))))</span>

<span class="hl sym">(</span>defn <span class="hl sym">-</span>main <span class="hl sym">[&amp;</span> args<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>n <span class="hl sym">(</span>if <span class="hl sym">(</span>first args<span class="hl sym">) (</span>Integer<span class="hl sym">/</span>parseInt <span class="hl sym">(</span>first args<span class="hl sym">))</span> <span class="hl num">0</span><span class="hl sym">)</span>
        max<span class="hl sym">-</span>depth <span class="hl sym">(</span>if <span class="hl sym">(&gt; (+</span> min<span class="hl sym">-</span>depth <span class="hl num">2</span><span class="hl sym">)</span> n<span class="hl sym">) (+</span> min<span class="hl sym">-</span>depth <span class="hl num">2</span><span class="hl sym">)</span> n<span class="hl sym">)]</span>
    <span class="hl sym">(</span>main max<span class="hl sym">-</span>depth<span class="hl sym">)))</span>
