<span class="hl com">/* The Great Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Alp Toker &lt;alp&#64;atoker.com&gt;</span>
<span class="hl com">*/</span>

<span class="hl kwa">using</span> System<span class="hl sym">;</span>
<span class="hl kwa">using</span> UBigInteger <span class="hl sym">=</span> Mono<span class="hl sym">.</span>Math<span class="hl sym">.</span>BigInteger<span class="hl sym">;</span>
<span class="hl kwa">using</span> Sign <span class="hl sym">=</span> Mono<span class="hl sym">.</span>Math<span class="hl sym">.</span>BigInteger<span class="hl sym">.</span>Sign<span class="hl sym">;</span>

<span class="hl kwa">public class</span> pidigits
<span class="hl sym">{</span>
	<span class="hl kwb">const int</span> L <span class="hl sym">=</span> <span class="hl num">10</span><span class="hl sym">;</span>

	<span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">Main</span> <span class="hl sym">(</span><span class="hl kwb">string</span><span class="hl sym">[]</span> args<span class="hl sym">)</span>
	<span class="hl sym">{</span>
		<span class="hl kwa">if</span> <span class="hl sym">(</span>args<span class="hl sym">.</span>Length <span class="hl sym">!=</span> <span class="hl num">1</span><span class="hl sym">)</span>
			<span class="hl kwa">return</span><span class="hl sym">;</span>

		<span class="hl kwb">int</span> n <span class="hl sym">=</span> Int32<span class="hl sym">.</span><span class="hl kwd">Parse</span> <span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>
		<span class="hl kwb">int</span> j <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

		PiDigitSpigot digits <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">PiDigitSpigot</span> <span class="hl sym">();</span>

		<span class="hl kwa">while</span> <span class="hl sym">(</span>n <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">) {</span>
			<span class="hl kwa">if</span> <span class="hl sym">(</span>n <span class="hl sym">&gt;=</span> L<span class="hl sym">) {</span>
				<span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl sym">;</span> i <span class="hl sym">!=</span> L <span class="hl sym">;</span> i<span class="hl sym">++)</span>
					Console<span class="hl sym">.</span><span class="hl kwd">Write</span> <span class="hl sym">(</span>digits<span class="hl sym">.</span><span class="hl kwd">Next</span> <span class="hl sym">());</span>
				j <span class="hl sym">+=</span> L<span class="hl sym">;</span>
			<span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
				<span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl sym">;</span> i <span class="hl sym">!=</span> n <span class="hl sym">;</span> i<span class="hl sym">++)</span>
					Console<span class="hl sym">.</span><span class="hl kwd">Write</span> <span class="hl sym">(</span>digits<span class="hl sym">.</span><span class="hl kwd">Next</span> <span class="hl sym">());</span>
				<span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> n <span class="hl sym">;</span> i <span class="hl sym">!=</span> L <span class="hl sym">;</span> i<span class="hl sym">++)</span>
					Console<span class="hl sym">.</span><span class="hl kwd">Write</span> <span class="hl sym">(</span><span class="hl str">&quot; &quot;</span><span class="hl sym">);</span>
				j <span class="hl sym">+=</span> n<span class="hl sym">;</span>
			<span class="hl sym">}</span>

			Console<span class="hl sym">.</span><span class="hl kwd">Write</span> <span class="hl sym">(</span><span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">:&quot;</span><span class="hl sym">);</span>
			Console<span class="hl sym">.</span><span class="hl kwd">WriteLine</span> <span class="hl sym">(</span>j<span class="hl sym">);</span>
			n <span class="hl sym">-=</span> L<span class="hl sym">;</span>
		<span class="hl sym">}</span>
	<span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwa">class</span> PiDigitSpigot
<span class="hl sym">{</span>
	Transformation z <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Transformation</span> <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">);</span>
	Transformation x <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Transformation</span> <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">);</span>
	Transformation inverse <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Transformation</span> <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">);</span>

	<span class="hl kwa">public</span> <span class="hl kwb">int</span> <span class="hl kwd">Next</span> <span class="hl sym">()</span>
	<span class="hl sym">{</span>
		<span class="hl kwb">int</span> y <span class="hl sym">=</span> Digit<span class="hl sym">;</span>

		<span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">IsSafe</span> <span class="hl sym">(</span>y<span class="hl sym">))</span>
		<span class="hl sym">{</span>
			z <span class="hl sym">=</span> <span class="hl kwd">Produce</span> <span class="hl sym">(</span>y<span class="hl sym">);</span>
			<span class="hl kwa">return</span> y<span class="hl sym">;</span>
		<span class="hl sym">}</span>
		<span class="hl kwa">else</span> <span class="hl sym">{</span>
			z <span class="hl sym">=</span> <span class="hl kwd">Consume</span> <span class="hl sym">(</span>x<span class="hl sym">.</span><span class="hl kwd">Next</span> <span class="hl sym">());</span>
			<span class="hl kwa">return</span> <span class="hl kwd">Next</span> <span class="hl sym">();</span>
		<span class="hl sym">}</span>
	<span class="hl sym">}</span>

	<span class="hl kwa">public</span> <span class="hl kwb">int</span> Digit
	<span class="hl sym">{</span>
		<span class="hl kwa">get</span> <span class="hl sym">{</span>
			<span class="hl kwa">return</span> z<span class="hl sym">.</span><span class="hl kwd">Extract</span> <span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">);</span>
		<span class="hl sym">}</span>
	<span class="hl sym">}</span>

	<span class="hl kwa">public</span> <span class="hl kwb">bool</span> <span class="hl kwd">IsSafe</span> <span class="hl sym">(</span><span class="hl kwb">int</span> digit<span class="hl sym">)</span>
	<span class="hl sym">{</span>
		<span class="hl kwa">return</span> digit <span class="hl sym">==</span> z<span class="hl sym">.</span><span class="hl kwd">Extract</span> <span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">);</span>
	<span class="hl sym">}</span>

	<span class="hl kwa">public</span> Transformation <span class="hl kwd">Produce</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">)</span>
	<span class="hl sym">{</span>
		<span class="hl kwa">return</span> <span class="hl sym">(</span>inverse<span class="hl sym">.</span><span class="hl kwd">qrst</span> <span class="hl sym">(</span><span class="hl num">10</span><span class="hl sym">,-</span><span class="hl num">10</span><span class="hl sym">*</span>i<span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">)).</span><span class="hl kwd">Compose</span> <span class="hl sym">(</span>z<span class="hl sym">);</span>
	<span class="hl sym">}</span>

	<span class="hl kwa">public</span> Transformation <span class="hl kwd">Consume</span> <span class="hl sym">(</span>Transformation a<span class="hl sym">)</span>
	<span class="hl sym">{</span>
		<span class="hl kwa">return</span> z<span class="hl sym">.</span><span class="hl kwd">Compose</span> <span class="hl sym">(</span>a<span class="hl sym">);</span>
	<span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwa">class</span> Transformation
<span class="hl sym">{</span>
	BigInteger q<span class="hl sym">,</span> r<span class="hl sym">,</span> s<span class="hl sym">,</span> t<span class="hl sym">;</span>
	<span class="hl kwb">int</span> k <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

	<span class="hl kwa">public</span> <span class="hl kwd">Transformation</span> <span class="hl sym">(</span><span class="hl kwb">int</span> q<span class="hl sym">,</span> <span class="hl kwb">int</span> r<span class="hl sym">,</span> <span class="hl kwb">int</span> s<span class="hl sym">,</span> <span class="hl kwb">int</span> t<span class="hl sym">)</span>
	<span class="hl sym">{</span>
		<span class="hl kwa">this</span><span class="hl sym">.</span>q <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BigInteger</span> <span class="hl sym">(</span>q<span class="hl sym">);</span>
		<span class="hl kwa">this</span><span class="hl sym">.</span>r <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BigInteger</span> <span class="hl sym">(</span>r<span class="hl sym">);</span>
		<span class="hl kwa">this</span><span class="hl sym">.</span>s <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BigInteger</span> <span class="hl sym">(</span>s<span class="hl sym">);</span>
		<span class="hl kwa">this</span><span class="hl sym">.</span>t <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BigInteger</span> <span class="hl sym">(</span>t<span class="hl sym">);</span>
	<span class="hl sym">}</span>

	<span class="hl kwa">public</span> <span class="hl kwd">Transformation</span> <span class="hl sym">(</span>BigInteger q<span class="hl sym">,</span> BigInteger r<span class="hl sym">,</span> BigInteger s<span class="hl sym">,</span> BigInteger t<span class="hl sym">)</span>
	<span class="hl sym">{</span>
		<span class="hl kwa">this</span><span class="hl sym">.</span>q <span class="hl sym">=</span> q<span class="hl sym">;</span>
		<span class="hl kwa">this</span><span class="hl sym">.</span>r <span class="hl sym">=</span> r<span class="hl sym">;</span>
		<span class="hl kwa">this</span><span class="hl sym">.</span>s <span class="hl sym">=</span> s<span class="hl sym">;</span>
		<span class="hl kwa">this</span><span class="hl sym">.</span>t <span class="hl sym">=</span> t<span class="hl sym">;</span>
	<span class="hl sym">}</span>

	<span class="hl kwa">public</span> Transformation <span class="hl kwd">Next</span> <span class="hl sym">()</span>
	<span class="hl sym">{</span>
		k<span class="hl sym">++;</span>
		q <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BigInteger</span> <span class="hl sym">(</span>k<span class="hl sym">);</span>
		r <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BigInteger</span> <span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">*</span>k <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">);</span>
		s <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BigInteger</span> <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span>
		t <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BigInteger</span> <span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>k <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">);</span>

		<span class="hl kwa">return this</span><span class="hl sym">;</span>
	<span class="hl sym">}</span>

	<span class="hl kwa">public</span> <span class="hl kwb">int</span> <span class="hl kwd">Extract</span> <span class="hl sym">(</span><span class="hl kwb">int</span> j<span class="hl sym">)</span>
	<span class="hl sym">{</span>
		BigInteger J <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BigInteger</span> <span class="hl sym">(</span>j<span class="hl sym">);</span>
		<span class="hl kwa">return</span> <span class="hl sym">((</span>q <span class="hl sym">*</span> J <span class="hl sym">+</span> r<span class="hl sym">) / (</span>s <span class="hl sym">*</span> J <span class="hl sym">+</span> t<span class="hl sym">)).</span><span class="hl kwd">IntValue</span> <span class="hl sym">();</span>
	<span class="hl sym">}</span>

	<span class="hl kwa">public</span> Transformation <span class="hl kwd">qrst</span> <span class="hl sym">(</span><span class="hl kwb">int</span> q<span class="hl sym">,</span> <span class="hl kwb">int</span> r<span class="hl sym">,</span> <span class="hl kwb">int</span> s<span class="hl sym">,</span> <span class="hl kwb">int</span> t<span class="hl sym">)</span>
	<span class="hl sym">{</span>
		<span class="hl kwa">this</span><span class="hl sym">.</span>q <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BigInteger</span> <span class="hl sym">(</span>q<span class="hl sym">);</span>
		<span class="hl kwa">this</span><span class="hl sym">.</span>r <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BigInteger</span> <span class="hl sym">(</span>r<span class="hl sym">);</span>
		<span class="hl kwa">this</span><span class="hl sym">.</span>s <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BigInteger</span> <span class="hl sym">(</span>s<span class="hl sym">);</span>
		<span class="hl kwa">this</span><span class="hl sym">.</span>t <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BigInteger</span> <span class="hl sym">(</span>t<span class="hl sym">);</span>
		k <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

		<span class="hl kwa">return this</span><span class="hl sym">;</span>
	<span class="hl sym">}</span>

	<span class="hl kwa">public</span> Transformation <span class="hl kwd">Compose</span> <span class="hl sym">(</span>Transformation a<span class="hl sym">)</span>
	<span class="hl sym">{</span>
		<span class="hl kwa">return new</span> <span class="hl kwd">Transformation</span> <span class="hl sym">(</span>q<span class="hl sym">*</span>a<span class="hl sym">.</span>q<span class="hl sym">,</span> q<span class="hl sym">*</span>a<span class="hl sym">.</span>r <span class="hl sym">+</span> r<span class="hl sym">*</span>a<span class="hl sym">.</span>t<span class="hl sym">,</span> s<span class="hl sym">*</span>a<span class="hl sym">.</span>q <span class="hl sym">+</span> t<span class="hl sym">*</span>a<span class="hl sym">.</span>s<span class="hl sym">,</span> s<span class="hl sym">*</span>a<span class="hl sym">.</span>r <span class="hl sym">+</span> t<span class="hl sym">*</span>a<span class="hl sym">.</span>t<span class="hl sym">);</span>
	<span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwa">class</span> BigInteger
<span class="hl sym">{</span>
	<span class="hl kwa">protected</span> UBigInteger bi<span class="hl sym">;</span>
	<span class="hl kwa">protected</span> Sign sign<span class="hl sym">;</span>

	<span class="hl kwa">protected</span> <span class="hl kwd">BigInteger</span> <span class="hl sym">() {}</span>

	<span class="hl kwa">public</span> <span class="hl kwd">BigInteger</span> <span class="hl sym">(</span><span class="hl kwb">int</span> <span class="hl kwa">value</span><span class="hl sym">)</span>
	<span class="hl sym">{</span>
		<span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">value</span> <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span>
			sign <span class="hl sym">=</span> Sign<span class="hl sym">.</span>Zero<span class="hl sym">;</span>
		<span class="hl kwa">else if</span> <span class="hl sym">(</span><span class="hl kwa">value</span> <span class="hl sym">&lt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
			sign <span class="hl sym">=</span> Sign<span class="hl sym">.</span>Negative<span class="hl sym">;</span>
		<span class="hl kwa">else</span>
			sign <span class="hl sym">=</span> Sign<span class="hl sym">.</span>Positive<span class="hl sym">;</span>

		bi <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">UBigInteger</span> <span class="hl sym">((</span><span class="hl kwb">int</span><span class="hl sym">)</span>sign<span class="hl sym">*</span><span class="hl kwa">value</span><span class="hl sym">);</span>
	<span class="hl sym">}</span>

	<span class="hl kwa">public</span> <span class="hl kwb">int</span> <span class="hl kwd">IntValue</span> <span class="hl sym">()</span>
	<span class="hl sym">{</span>
		<span class="hl kwa">return</span> <span class="hl sym">(</span><span class="hl kwb">int</span><span class="hl sym">)</span>sign <span class="hl sym">* (</span><span class="hl kwb">int</span><span class="hl sym">)</span>bi<span class="hl sym">.</span><span class="hl kwd">GetBytes</span> <span class="hl sym">()[</span><span class="hl num">0</span><span class="hl sym">];</span>
	<span class="hl sym">}</span>

	<span class="hl kwa">public override</span> <span class="hl kwb">string</span> <span class="hl kwd">ToString</span> <span class="hl sym">()</span>
	<span class="hl sym">{</span>
		<span class="hl kwa">return</span> <span class="hl sym">(</span>sign <span class="hl sym">==</span> Sign<span class="hl sym">.</span>Negative ? <span class="hl str">&quot;-&quot;</span> <span class="hl sym">:</span> <span class="hl str">&quot;&quot;</span><span class="hl sym">) +</span> bi<span class="hl sym">.</span><span class="hl kwd">ToString</span> <span class="hl sym">();</span>
	<span class="hl sym">}</span>

	<span class="hl kwa">public static</span> BigInteger <span class="hl kwa">operator</span> <span class="hl sym">* (</span>BigInteger bi1<span class="hl sym">,</span> BigInteger bi2<span class="hl sym">)</span>
	<span class="hl sym">{</span>
		BigInteger ret <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BigInteger</span> <span class="hl sym">();</span>
		ret<span class="hl sym">.</span>bi <span class="hl sym">=</span> bi1<span class="hl sym">.</span>bi <span class="hl sym">*</span> bi2<span class="hl sym">.</span>bi<span class="hl sym">;</span>
		ret<span class="hl sym">.</span>sign <span class="hl sym">= (</span>Sign<span class="hl sym">) ((</span><span class="hl kwb">int</span><span class="hl sym">)</span>bi1<span class="hl sym">.</span>sign <span class="hl sym">* (</span><span class="hl kwb">int</span><span class="hl sym">)</span>bi2<span class="hl sym">.</span>sign<span class="hl sym">);</span>
		<span class="hl kwa">return</span> ret<span class="hl sym">;</span>
	<span class="hl sym">}</span>

	<span class="hl kwa">public static</span> BigInteger <span class="hl kwa">operator</span> <span class="hl sym">/ (</span>BigInteger bi1<span class="hl sym">,</span> BigInteger bi2<span class="hl sym">)</span>
	<span class="hl sym">{</span>
		BigInteger ret <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BigInteger</span> <span class="hl sym">();</span>
		ret<span class="hl sym">.</span>bi <span class="hl sym">=</span> bi1<span class="hl sym">.</span>bi <span class="hl sym">/</span> bi2<span class="hl sym">.</span>bi<span class="hl sym">;</span>
		ret<span class="hl sym">.</span>sign <span class="hl sym">= (</span>Sign<span class="hl sym">) ((</span><span class="hl kwb">int</span><span class="hl sym">)</span>bi1<span class="hl sym">.</span>sign <span class="hl sym">* (</span><span class="hl kwb">int</span><span class="hl sym">)</span>bi2<span class="hl sym">.</span>sign<span class="hl sym">);</span>
		<span class="hl kwa">return</span> ret<span class="hl sym">;</span>
	<span class="hl sym">}</span>

	<span class="hl kwa">public static</span> BigInteger <span class="hl kwa">operator</span> <span class="hl sym">+ (</span>BigInteger bi1<span class="hl sym">,</span> BigInteger bi2<span class="hl sym">)</span>
	<span class="hl sym">{</span>
		BigInteger ret <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BigInteger</span> <span class="hl sym">();</span>
		<span class="hl kwa">if</span> <span class="hl sym">(</span>bi1<span class="hl sym">.</span>sign <span class="hl sym">==</span> Sign<span class="hl sym">.</span>Zero<span class="hl sym">)</span>
			<span class="hl kwa">return</span> bi2<span class="hl sym">;</span>

		<span class="hl kwa">if</span> <span class="hl sym">(</span>bi2<span class="hl sym">.</span>sign <span class="hl sym">==</span> Sign<span class="hl sym">.</span>Zero<span class="hl sym">)</span>
			<span class="hl kwa">return</span> bi1<span class="hl sym">;</span>

		<span class="hl kwa">if</span> <span class="hl sym">(</span>bi1<span class="hl sym">.</span>sign <span class="hl sym">==</span> bi2<span class="hl sym">.</span>sign<span class="hl sym">) {</span>
			ret<span class="hl sym">.</span>bi <span class="hl sym">=</span> bi1<span class="hl sym">.</span>bi <span class="hl sym">+</span> bi2<span class="hl sym">.</span>bi<span class="hl sym">;</span>
			ret<span class="hl sym">.</span>sign <span class="hl sym">=</span> bi1<span class="hl sym">.</span>sign<span class="hl sym">;</span>
			<span class="hl kwa">return</span> ret<span class="hl sym">;</span>
		<span class="hl sym">}</span>

		<span class="hl kwa">if</span> <span class="hl sym">(</span>bi1<span class="hl sym">.</span>bi <span class="hl sym">==</span> bi2<span class="hl sym">.</span>bi<span class="hl sym">) {</span>
			ret<span class="hl sym">.</span>bi <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
			ret<span class="hl sym">.</span>sign <span class="hl sym">=</span> Sign<span class="hl sym">.</span>Zero<span class="hl sym">;</span>
			<span class="hl kwa">return</span> ret<span class="hl sym">;</span>
		<span class="hl sym">}</span>

		<span class="hl kwa">if</span> <span class="hl sym">(</span>bi1<span class="hl sym">.</span>bi <span class="hl sym">&lt;</span> bi2<span class="hl sym">.</span>bi<span class="hl sym">) {</span>
			ret<span class="hl sym">.</span>bi <span class="hl sym">=</span> bi2<span class="hl sym">.</span>bi <span class="hl sym">-</span> bi1<span class="hl sym">.</span>bi<span class="hl sym">;</span>
			ret<span class="hl sym">.</span>sign <span class="hl sym">= (</span>Sign<span class="hl sym">)((</span><span class="hl kwb">int</span><span class="hl sym">)</span>Sign<span class="hl sym">.</span>Positive <span class="hl sym">* (</span><span class="hl kwb">int</span><span class="hl sym">)</span>bi2<span class="hl sym">.</span>sign<span class="hl sym">);</span>
			<span class="hl kwa">return</span> ret<span class="hl sym">;</span>
		<span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
			ret<span class="hl sym">.</span>bi <span class="hl sym">=</span> bi1<span class="hl sym">.</span>bi <span class="hl sym">-</span> bi2<span class="hl sym">.</span>bi<span class="hl sym">;</span>
			ret<span class="hl sym">.</span>sign <span class="hl sym">= (</span>Sign<span class="hl sym">)((</span><span class="hl kwb">int</span><span class="hl sym">)</span>Sign<span class="hl sym">.</span>Negative <span class="hl sym">* (</span><span class="hl kwb">int</span><span class="hl sym">)</span>bi2<span class="hl sym">.</span>sign<span class="hl sym">);</span>
			<span class="hl kwa">return</span> ret<span class="hl sym">;</span>
		<span class="hl sym">}</span>
	<span class="hl sym">}</span>
<span class="hl sym">}</span>

