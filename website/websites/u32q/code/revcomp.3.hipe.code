<span class="hl slc">%% The Computer Language Benchmarks Game</span>
<span class="hl slc">%% http://shootout.alioth.debian.org/</span>
<span class="hl slc">%%</span>
<span class="hl slc">%% contributed by Vlad Balin</span>
<span class="hl slc">%% optimizations by Fredrik Svahn</span>

<span class="hl sym">-</span><span class="hl kwa">module</span><span class="hl sym">(</span>revcomp<span class="hl sym">).</span>
<span class="hl sym">-</span><span class="hl kwd">compile</span><span class="hl sym">( [</span> inline<span class="hl sym">, {</span> inline_size<span class="hl sym">,</span> <span class="hl num">100</span> <span class="hl sym">} ] ).</span>

<span class="hl sym">-</span><span class="hl kwa">export</span><span class="hl sym">([</span>main<span class="hl sym">/</span><span class="hl num">1</span><span class="hl sym">]).</span>

<span class="hl kwd">main</span><span class="hl sym">([</span>_Args<span class="hl sym">]) -&gt;</span>
    <span class="hl kwb">register</span><span class="hl sym">(</span>print_server<span class="hl sym">,</span> <span class="hl kwb">self</span><span class="hl sym">()),</span>
    print_server <span class="hl sym">!</span> flush_queue_empty<span class="hl sym">,</span>
    io<span class="hl sym">:</span><span class="hl kwd">setopts</span><span class="hl sym">( [</span> <span class="hl kwb">binary</span> <span class="hl sym">] ),</span>
    <span class="hl kwd">loop</span><span class="hl sym">([]),</span>
    <span class="hl kwb">halt</span><span class="hl sym">().</span>

<span class="hl kwd">loop</span><span class="hl sym">(</span> Buffer <span class="hl sym">) -&gt;</span>
    <span class="hl kwa">case</span> io<span class="hl sym">:</span><span class="hl kwd">get_line</span><span class="hl sym">(</span><span class="hl str">''</span><span class="hl sym">)</span> <span class="hl kwa">of</span>
        eof <span class="hl sym">-&gt;</span>
	    <span class="hl slc">% block until previous output process is done</span>
	    <span class="hl kwa">receive</span> flush_queue_empty <span class="hl sym">-&gt;</span> ok <span class="hl kwa">end</span><span class="hl sym">,</span>
	    <span class="hl kwd">flush</span><span class="hl sym">(</span> Buffer<span class="hl sym">, &lt;&lt; &gt;&gt; );</span>
        <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;&gt;&quot;</span><span class="hl sym">,</span> _<span class="hl sym">/</span>bytes <span class="hl sym">&gt;&gt; =</span> Head <span class="hl sym">-&gt;</span>
	    <span class="hl slc">% block until previous output process is done</span>
	    <span class="hl kwa">receive</span> flush_queue_empty <span class="hl sym">-&gt;</span> ok <span class="hl kwa">end</span><span class="hl sym">,</span>
	    <span class="hl slc">% spawn output process and continue to read in main thread</span>
            <span class="hl kwb">spawn</span><span class="hl sym">(</span><span class="hl kwa">fun</span><span class="hl sym">()-&gt;</span> <span class="hl kwd">flush</span><span class="hl sym">(</span> Buffer<span class="hl sym">,</span> Head <span class="hl sym">)</span> <span class="hl kwa">end</span><span class="hl sym">),</span>
	    <span class="hl kwd">loop</span><span class="hl sym">( [] );</span>
        Line <span class="hl sym">-&gt;</span> <span class="hl kwd">loop</span><span class="hl sym">( [</span> <span class="hl kwd">rev_comp_line</span><span class="hl sym">(</span> Line<span class="hl sym">, &lt;&lt;&gt;&gt; ) |</span> Buffer<span class="hl sym">] )</span>
    <span class="hl kwa">end</span><span class="hl sym">.</span>

<span class="hl slc">%% flush( Buffer, Suffix ) -&gt; atom().</span>
<span class="hl slc">%% Buffer = Suffix = iolist().</span>
<span class="hl slc">%% Format and write Buffer with sequence followed by Suffix text</span>
<span class="hl kwd">flush</span><span class="hl sym">(</span> Buffer<span class="hl sym">,</span> Suffix <span class="hl sym">) -&gt;</span>
    io<span class="hl sym">:</span><span class="hl kwd">put_chars</span><span class="hl sym">(</span> <span class="hl kwd">format</span><span class="hl sym">(</span> <span class="hl kwd">iolist_to_binary</span><span class="hl sym">(</span>Buffer<span class="hl sym">),</span> Suffix <span class="hl sym">) ),</span>
    print_server <span class="hl sym">!</span> flush_queue_empty<span class="hl sym">.</span>

<span class="hl slc">%% format( Buffer, Suffix ) -&gt; iolist().</span>
<span class="hl slc">%% Buffer = bytes(), Suffix = iolist().</span>
<span class="hl slc">%% Split Buffer into 60-char lines, append Suffix to the end of buffer.</span>
<span class="hl kwd">format</span><span class="hl sym">( &lt;&lt;</span> Line<span class="hl sym">:</span><span class="hl num">60</span><span class="hl sym">/</span>bytes<span class="hl sym">,</span> Rest<span class="hl sym">/</span>bytes <span class="hl sym">&gt;&gt;,</span> Suffix <span class="hl sym">) -&gt; [</span> Line<span class="hl sym">,</span> <span class="hl num">10</span> <span class="hl sym">|</span> <span class="hl kwd">format</span><span class="hl sym">(</span> Rest<span class="hl sym">,</span> Suffix <span class="hl sym">) ];</span>
<span class="hl kwd">format</span><span class="hl sym">( &lt;&lt; &gt;&gt;,</span> Suffix <span class="hl sym">) -&gt;</span> Suffix<span class="hl sym">;</span>
<span class="hl kwd">format</span><span class="hl sym">(</span> Line<span class="hl sym">,</span> Suffix <span class="hl sym">) -&gt; [</span> Line<span class="hl sym">,</span> <span class="hl num">10</span><span class="hl sym">,</span> Suffix <span class="hl sym">].</span>

<span class="hl slc">%% rev_comp_line( Line, Buffer ) -&gt; Buffer.</span>
<span class="hl slc">%% Line = binary().</span>
<span class="hl slc">%% Buffer = binary().</span>
<span class="hl kwd">rev_comp_line</span><span class="hl sym">( &lt;&lt;</span> _<span class="hl sym">:</span><span class="hl num">8</span> <span class="hl sym">&gt;&gt;,</span> Buffer <span class="hl sym">) -&gt;</span> Buffer<span class="hl sym">;</span>
<span class="hl kwd">rev_comp_line</span><span class="hl sym">( &lt;&lt;</span> H<span class="hl sym">,</span> Rest<span class="hl sym">/</span>bytes <span class="hl sym">&gt;&gt;,</span> Buffer <span class="hl sym">) -&gt;</span>
    C <span class="hl sym">=</span> <span class="hl kwd">rev_comp</span><span class="hl sym">(</span> H <span class="hl sym">),</span>
    <span class="hl kwd">rev_comp_line</span><span class="hl sym">(</span> Rest<span class="hl sym">, &lt;&lt;</span> C<span class="hl sym">:</span><span class="hl num">8</span><span class="hl sym">,</span> Buffer<span class="hl sym">/</span><span class="hl kwb">binary</span> <span class="hl sym">&gt;&gt; ).</span>

<span class="hl kwd">rev_comp</span><span class="hl sym">(</span> $A <span class="hl sym">) -&gt;</span> $T<span class="hl sym">;</span>
<span class="hl kwd">rev_comp</span><span class="hl sym">(</span> $C <span class="hl sym">) -&gt;</span> $G<span class="hl sym">;</span>
<span class="hl kwd">rev_comp</span><span class="hl sym">(</span> $G <span class="hl sym">) -&gt;</span> $C<span class="hl sym">;</span>
<span class="hl kwd">rev_comp</span><span class="hl sym">(</span> $T <span class="hl sym">) -&gt;</span> $A<span class="hl sym">;</span>
<span class="hl kwd">rev_comp</span><span class="hl sym">(</span> $U <span class="hl sym">) -&gt;</span> $A<span class="hl sym">;</span>
<span class="hl kwd">rev_comp</span><span class="hl sym">(</span> $M <span class="hl sym">) -&gt;</span> $K<span class="hl sym">;</span>
<span class="hl kwd">rev_comp</span><span class="hl sym">(</span> $R <span class="hl sym">) -&gt;</span> $Y<span class="hl sym">;</span>
<span class="hl kwd">rev_comp</span><span class="hl sym">(</span> $Y <span class="hl sym">) -&gt;</span> $R<span class="hl sym">;</span>
<span class="hl kwd">rev_comp</span><span class="hl sym">(</span> $K <span class="hl sym">) -&gt;</span> $M<span class="hl sym">;</span>
<span class="hl kwd">rev_comp</span><span class="hl sym">(</span> $V <span class="hl sym">) -&gt;</span> $B<span class="hl sym">;</span>
<span class="hl kwd">rev_comp</span><span class="hl sym">(</span> $H <span class="hl sym">) -&gt;</span> $D<span class="hl sym">;</span>
<span class="hl kwd">rev_comp</span><span class="hl sym">(</span> $D <span class="hl sym">) -&gt;</span> $H<span class="hl sym">;</span>
<span class="hl kwd">rev_comp</span><span class="hl sym">(</span> $B <span class="hl sym">) -&gt;</span> $V<span class="hl sym">;</span>
<span class="hl kwd">rev_comp</span><span class="hl sym">(</span> $a <span class="hl sym">) -&gt;</span> $T<span class="hl sym">;</span>
<span class="hl kwd">rev_comp</span><span class="hl sym">(</span> $c <span class="hl sym">) -&gt;</span> $G<span class="hl sym">;</span>
<span class="hl kwd">rev_comp</span><span class="hl sym">(</span> $g <span class="hl sym">) -&gt;</span> $C<span class="hl sym">;</span>
<span class="hl kwd">rev_comp</span><span class="hl sym">(</span> $t <span class="hl sym">) -&gt;</span> $A<span class="hl sym">;</span>
<span class="hl kwd">rev_comp</span><span class="hl sym">(</span> $u <span class="hl sym">) -&gt;</span> $A<span class="hl sym">;</span>
<span class="hl kwd">rev_comp</span><span class="hl sym">(</span> $m <span class="hl sym">) -&gt;</span> $K<span class="hl sym">;</span>
<span class="hl kwd">rev_comp</span><span class="hl sym">(</span> $r <span class="hl sym">) -&gt;</span> $Y<span class="hl sym">;</span>
<span class="hl kwd">rev_comp</span><span class="hl sym">(</span> $y <span class="hl sym">) -&gt;</span> $R<span class="hl sym">;</span>
<span class="hl kwd">rev_comp</span><span class="hl sym">(</span> $k <span class="hl sym">) -&gt;</span> $M<span class="hl sym">;</span>
<span class="hl kwd">rev_comp</span><span class="hl sym">(</span> $v <span class="hl sym">) -&gt;</span> $B<span class="hl sym">;</span>
<span class="hl kwd">rev_comp</span><span class="hl sym">(</span> $h <span class="hl sym">) -&gt;</span> $D<span class="hl sym">;</span>
<span class="hl kwd">rev_comp</span><span class="hl sym">(</span> $d <span class="hl sym">) -&gt;</span> $H<span class="hl sym">;</span>
<span class="hl kwd">rev_comp</span><span class="hl sym">(</span> $b <span class="hl sym">) -&gt;</span> $V<span class="hl sym">;</span>
<span class="hl kwd">rev_comp</span><span class="hl sym">(</span> $N <span class="hl sym">) -&gt;</span> $N<span class="hl sym">;</span>
<span class="hl kwd">rev_comp</span><span class="hl sym">(</span> $S <span class="hl sym">) -&gt;</span> $S<span class="hl sym">;</span>
<span class="hl kwd">rev_comp</span><span class="hl sym">(</span> $W <span class="hl sym">) -&gt;</span> $W<span class="hl sym">;</span>
<span class="hl kwd">rev_comp</span><span class="hl sym">(</span> $n <span class="hl sym">) -&gt;</span> $N<span class="hl sym">;</span>
<span class="hl kwd">rev_comp</span><span class="hl sym">(</span> $s <span class="hl sym">) -&gt;</span> $S<span class="hl sym">;</span>
<span class="hl kwd">rev_comp</span><span class="hl sym">(</span> $w <span class="hl sym">) -&gt;</span> $W<span class="hl sym">;</span>
<span class="hl kwd">rev_comp</span><span class="hl sym">(</span> _ <span class="hl sym">) -&gt;</span> $<span class="hl sym">?.</span>
