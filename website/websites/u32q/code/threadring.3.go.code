<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Maxim Razin</span>
<span class="hl com">*/</span>

<span class="hl kwa">package</span> main

<span class="hl kwa">import</span> <span class="hl sym">(</span>
    <span class="hl str">&quot;fmt&quot;</span><span class="hl sym">;</span>
    <span class="hl str">&quot;os&quot;</span><span class="hl sym">;</span>
    <span class="hl str">&quot;strconv&quot;</span><span class="hl sym">;</span>
<span class="hl sym">)</span>

<span class="hl kwa">type</span> Token int<span class="hl sym">;</span>

<span class="hl kwa">func</span> worker<span class="hl sym">(</span>id int<span class="hl sym">,</span> in <span class="hl sym">&lt;-</span><span class="hl kwa">chan</span> Token<span class="hl sym">,</span> out <span class="hl kwa">chan</span><span class="hl sym">&lt;-</span> Token<span class="hl sym">,</span> res <span class="hl kwa">chan</span><span class="hl sym">&lt;-</span> int<span class="hl sym">) {</span>
    <span class="hl kwa">for</span> <span class="hl sym">{</span>
        t <span class="hl sym">:= &lt;-</span> in<span class="hl sym">;</span>
        <span class="hl kwa">if</span> t<span class="hl sym">==</span><span class="hl num">0</span> <span class="hl sym">{</span>
            res <span class="hl sym">&lt;-</span> id<span class="hl sym">;</span>
        <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
            out <span class="hl sym">&lt;-</span> t<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">;</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwa">const</span> NThreads <span class="hl sym">=</span> <span class="hl num">503</span><span class="hl sym">;</span>

<span class="hl kwa">func</span> main<span class="hl sym">() {</span>
    n <span class="hl sym">:=</span> <span class="hl num">1000</span><span class="hl sym">;</span>
    <span class="hl kwa">if</span> len<span class="hl sym">(</span>os<span class="hl sym">.</span>Args<span class="hl sym">)&gt;</span><span class="hl num">1</span> <span class="hl sym">{</span> n<span class="hl sym">,</span>_ <span class="hl sym">=</span> strconv<span class="hl sym">.</span>Atoi<span class="hl sym">(</span>os<span class="hl sym">.</span>Args<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]) }</span>

    <span class="hl kwa">var</span> channels <span class="hl sym">[</span>NThreads<span class="hl sym">]</span> <span class="hl kwa">chan</span> Token<span class="hl sym">;</span>
    <span class="hl kwa">for</span> i<span class="hl sym">:=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>NThreads<span class="hl sym">;</span> i<span class="hl sym">++ {</span> channels<span class="hl sym">[</span>i<span class="hl sym">] =</span> make<span class="hl sym">(</span><span class="hl kwa">chan</span> Token<span class="hl sym">) }</span>
    res    <span class="hl sym">:=</span> make<span class="hl sym">(</span><span class="hl kwa">chan</span> int<span class="hl sym">);</span>

    <span class="hl kwa">for</span> i<span class="hl sym">:=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>NThreads<span class="hl sym">;</span> i<span class="hl sym">++ {</span>
        <span class="hl kwa">go</span> worker<span class="hl sym">(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> channels<span class="hl sym">[</span>i<span class="hl sym">],</span> channels<span class="hl sym">[(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)%</span>NThreads<span class="hl sym">],</span> res<span class="hl sym">);</span>
    <span class="hl sym">}</span>

    channels<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] &lt;-</span> Token<span class="hl sym">(</span>n<span class="hl sym">);</span>
    r <span class="hl sym">:= &lt;-</span> res<span class="hl sym">;</span>
    fmt<span class="hl sym">.</span>Printf<span class="hl sym">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span>r<span class="hl sym">);</span>
    os<span class="hl sym">.</span>Exit<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span>
<span class="hl sym">}</span>
