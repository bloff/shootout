
Sun, 31 Aug 2008 01:11:27 GMT

MAKE:
mv binarytrees.scala-4.scala binarytrees.scala
/usr/local/src/scala-2.7.2.RC1/bin/scalac -optimise binarytrees.scala
iterations: 0 for 4
iterations: 0 for 1
iterations: 0 for 1
iterations: 0 for 1
iterations: 0 for 1
iterations: 0 for 1
iterations: 0 for 10
iterations: 1 for 1
in: (16,IState(Map(variable name0 -> REFERENCE(java.lang.String), value n -> INT, variable check0 -> INT, variable depth -> INT, variable exceptionResult1 -> INT, variable $inlThis0 -> REFERENCE(binarytrees), value maxDepth -> INT, value minDepth -> INT, variable depth0 -> INT, value longLivedTree -> REFERENCE(Tree)),<>))
(1,IState(Map(),<>))
(2,IState(Map(variable exceptionResult1 -> INT),<>))
(3,IState(Map(variable exceptionResult1 -> INT),<REFERENCE(scala.AnyRef)>))
(4,IState(Map(variable exceptionResult1 -> INT),<>))
(5,IState(Map(value n -> INT, variable i -> INT, variable depth -> INT, variable exceptionResult1 -> INT, variable sum -> INT, value maxDepth -> INT, value minDepth -> INT, value iterations -> INT, value longLivedTree -> REFERENCE(Tree)),<>))
(6,IState(Map(value n -> INT, variable i -> INT, variable depth -> INT, variable exceptionResult1 -> INT, variable sum -> INT, value maxDepth -> INT, value minDepth -> INT, value iterations -> INT, value longLivedTree -> REFERENCE(Tree)),<>))
(8,IState(Map(value n -> INT, variable i -> INT, variable depth -> INT, variable exceptionResult1 -> INT, variable sum -> INT, value maxDepth -> INT, value minDepth -> INT, value iterations -> INT, value longLivedTree -> REFERENCE(Tree)),<>))
(9,IState(Map(value n -> INT, variable i -> INT, variable depth -> INT, variable exceptionResult1 -> INT, variable sum -> INT, value maxDepth -> INT, value minDepth -> INT, value iterations -> INT, value longLivedTree -> REFERENCE(Tree)),<>))
(10,IState(Map(value n -> INT, variable i -> INT, variable depth -> INT, variable exceptionResult1 -> INT, variable sum -> INT, value maxDepth -> INT, value minDepth -> INT, value iterations -> INT, value longLivedTree -> REFERENCE(Tree)),<>))
(12,IState(Map(value n -> INT, variable i -> INT, variable depth -> INT, variable exceptionResult1 -> INT, variable sum -> INT, value maxDepth -> INT, value minDepth -> INT, value iterations -> INT, value longLivedTree -> REFERENCE(Tree)),<>))
out: (16,IState(Map(variable name0 -> REFERENCE(java.lang.String), variable boxed20 -> INT, value n -> INT, variable boxed10 -> INT, variable check0 -> INT, variable depth -> INT, variable exceptionResult1 -> INT, value maxDepth -> INT, variable $inlThis0 -> REFERENCE(binarytrees), value minDepth -> INT, variable depth0 -> INT, value longLivedTree -> REFERENCE(Tree)),<>))
(1,IState(Map(variable exceptionResult1 -> INT),<>))
(2,IState(Map(variable name0 -> REFERENCE(java.lang.String), value n -> INT, variable check0 -> INT, variable exceptionResult1 -> INT, value maxDepth -> INT, variable $inlThis0 -> REFERENCE(binarytrees), value minDepth -> INT, variable depth0 -> INT),<>))
(3,IState(Map(variable exceptionResult1 -> INT),<>))
(4,IState(Map(variable exceptionResult1 -> INT),<>))
(5,IState(Map(value n -> INT, variable i -> INT, variable depth -> INT, variable exceptionResult1 -> INT, value maxDepth -> INT, variable sum -> INT, value minDepth -> INT, value iterations -> INT, value longLivedTree -> REFERENCE(Tree)),<>))
(6,IState(Map(value n -> INT, variable i -> INT, variable depth -> INT, variable exceptionResult1 -> INT, variable sum -> INT, value maxDepth -> INT, value minDepth -> INT, value iterations -> INT, value longLivedTree -> REFERENCE(Tree)),<>))
(8,IState(Map(value n -> INT, variable i -> INT, variable depth -> INT, variable exceptionResult1 -> INT, variable sum -> INT, value maxDepth -> INT, value minDepth -> INT, value iterations -> INT, value longLivedTree -> REFERENCE(Tree)),<>))
(9,IState(Map(value n -> INT, variable i -> INT, variable depth -> INT, variable exceptionResult1 -> INT, value maxDepth -> INT, variable sum -> INT, value minDepth -> INT, value iterations -> INT, value longLivedTree -> REFERENCE(Tree)),<>))
(10,IState(Map(value n -> INT, variable i -> INT, variable depth -> INT, variable exceptionResult1 -> INT, variable sum -> INT, value maxDepth -> INT, value minDepth -> INT, value iterations -> INT, value longLivedTree -> REFERENCE(Tree)),<>))
(12,IState(Map(value n -> INT, variable i -> INT, variable depth -> INT, variable exceptionResult1 -> INT, variable sum -> INT, value maxDepth -> INT, value minDepth -> INT, value iterations -> INT, value longLivedTree -> REFERENCE(Tree)),<>))
(15,IState(Map(),<>))
java.util.NoSuchElementException: key not found: 15
	at scala.collection.Map$class.default(Map.scala:169)
	at scala.collection.jcl.HashMap.default(HashMap.scala:17)
	at scala.collection.Map$class.apply(Map.scala:80)
	at scala.collection.jcl.HashMap.apply(HashMap.scala:17)
	at scala.tools.nsc.backend.icode.analysis.DataFlowAnalysis$$anonfun$forwardAnalysis$1.apply(DataFlowAnalysis.scala:71)
	at scala.tools.nsc.backend.icode.analysis.DataFlowAnalysis$$anonfun$forwardAnalysis$1.apply(DataFlowAnalysis.scala:68)
	at scala.List.foreach(List.scala:834)
	at scala.tools.nsc.backend.icode.analysis.DataFlowAnalysis$class.forwardAnalysis(DataFlowAnalysis.scala:68)
	at scala.tools.nsc.backend.icode.analysis.TypeFlowAnalysis$MethodTFA.forwardAnalysis(TypeFlowAnalysis.scala:106)
	at scala.tools.nsc.backend.icode.analysis.TypeFlowAnalysis$MethodTFA.run(TypeFlowAnalysis.scala:163)
	at scala.tools.nsc.backend.opt.Inliners$Inliner.analyzeMethod(Inliners.scala:292)
	at scala.tools.nsc.backend.opt.Inliners$Inliner$$anonfun$analyzeClass$1.apply(Inliners.scala:270)
	at scala.tools.nsc.backend.opt.Inliners$Inliner$$anonfun$analyzeClass$1.apply(Inliners.scala:270)
	at scala.List.foreach(List.scala:834)
	at scala.tools.nsc.backend.opt.Inliners$Inliner.analyzeClass(Inliners.scala:270)
	at scala.tools.nsc.backend.opt.Inliners$InliningPhase.apply(Inliners.scala:36)
	at scala.tools.nsc.backend.icode.ICodes$ICodePhase$$anonfun$apply$1.apply(ICodes.scala:85)
	at scala.tools.nsc.backend.icode.ICodes$ICodePhase$$anonfun$apply$1.apply(ICodes.scala:85)
	at scala.Iterator$class.foreach(Iterator.scala:410)
	at scala.collection.mutable.FlatHashTable$$anon$1.foreach(FlatHashTable.scala:113)
	at scala.Iterable$class.foreach(Iterable.scala:256)
	at scala.collection.mutable.HashSet.foreach(HashSet.scala:31)
	at scala.tools.nsc.backend.icode.ICodes$ICodePhase.apply(ICodes.scala:85)
	at scala.tools.nsc.Global$GlobalPhase.applyPhase(Global.scala:268)
	at scala.tools.nsc.Global$GlobalPhase$$anonfun$run$1.apply(Global.scala:247)
	at scala.tools.nsc.Global$GlobalPhase$$anonfun$run$1.apply(Global.scala:247)
	at scala.Iterator$class.foreach(Iterator.scala:410)
	at scala.collection.mutable.ListBuffer$$anon$1.foreach(ListBuffer.scala:266)
	at scala.tools.nsc.Global$GlobalPhase.run(Global.scala:247)
	at scala.tools.nsc.Global$Run.compileSources(Global.scala:579)
	at scala.tools.nsc.Global$Run.compile(Global.scala:663)
	at scala.tools.nsc.Main$.process(Main.scala:84)
	at scala.tools.nsc.Main$.main(Main.scala:98)
	at scala.tools.nsc.Main.main(Main.scala)
############# Cought exception: java.lang.RuntimeException: Could not find element key not found: 15 #################

Method: binarytrees.main
Method owner: object binarytrees
java.lang.RuntimeException: Could not find element key not found: 15
	at scala.Predef$.error(Predef.scala:76)
	at scala.tools.nsc.backend.icode.analysis.DataFlowAnalysis$class.forwardAnalysis(DataFlowAnalysis.scala:80)
	at scala.tools.nsc.backend.icode.analysis.TypeFlowAnalysis$MethodTFA.forwardAnalysis(TypeFlowAnalysis.scala:106)
	at scala.tools.nsc.backend.icode.analysis.TypeFlowAnalysis$MethodTFA.run(TypeFlowAnalysis.scala:163)
	at scala.tools.nsc.backend.opt.Inliners$Inliner.analyzeMethod(Inliners.scala:292)
	at scala.tools.nsc.backend.opt.Inliners$Inliner$$anonfun$analyzeClass$1.apply(Inliners.scala:270)
	at scala.tools.nsc.backend.opt.Inliners$Inliner$$anonfun$analyzeClass$1.apply(Inliners.scala:270)
	at scala.List.foreach(List.scala:834)
	at scala.tools.nsc.backend.opt.Inliners$Inliner.analyzeClass(Inliners.scala:270)
	at scala.tools.nsc.backend.opt.Inliners$InliningPhase.apply(Inliners.scala:36)
	at scala.tools.nsc.backend.icode.ICodes$ICodePhase$$anonfun$apply$1.apply(ICodes.scala:85)
	at scala.tools.nsc.backend.icode.ICodes$ICodePhase$$anonfun$apply$1.apply(ICodes.scala:85)
	at scala.Iterator$class.foreach(Iterator.scala:410)
	at scala.collection.mutable.FlatHashTable$$anon$1.foreach(FlatHashTable.scala:113)
	at scala.Iterable$class.foreach(Iterable.scala:256)
	at scala.collection.mutable.HashSet.foreach(HashSet.scala:31)
	at scala.tools.nsc.backend.icode.ICodes$ICodePhase.apply(ICodes.scala:85)
	at scala.tools.nsc.Global$GlobalPhase.applyPhase(Global.scala:268)
	at scala.tools.nsc.Global$GlobalPhase$$anonfun$run$1.apply(Global.scala:247)
	at scala.tools.nsc.Global$GlobalPhase$$anonfun$run$1.apply(Global.scala:247)
	at scala.Iterator$class.foreach(Iterator.scala:410)
	at scala.collection.mutable.ListBuffer$$anon$1.foreach(ListBuffer.scala:266)
	at scala.tools.nsc.Global$GlobalPhase.run(Global.scala:247)
	at scala.tools.nsc.Global$Run.compileSources(Global.scala:579)
	at scala.tools.nsc.Global$Run.compile(Global.scala:663)
	at scala.tools.nsc.Main$.process(Main.scala:84)
	at scala.tools.nsc.Main$.main(Main.scala:98)
	at scala.tools.nsc.Main.main(Main.scala)
def main(args: Array[java.lang.String] (ARRAY[REFERENCE(java.lang.String)])): Unit {
locals: value args, value n, variable exceptionResult1, value minDepth, value maxDepth, value longLivedTree, variable depth, value iterations, variable sum, variable i, variable name0, variable depth0, variable check0, variable boxed10, variable boxed20, variable $inlThis0
startBlock: 1
blocks: [1,2,3,4,5,6,8,9,10,12,15,16]

1: 
  SCOPE_ENTER value n
  SCOPE_ENTER variable exceptionResult1
  CONSTANT (Constant(0))
  STORE_LOCAL variable exceptionResult1
  JUMP 4
  
2: 
  LOAD_LOCAL variable exceptionResult1
  SCOPE_EXIT variable exceptionResult1
  STORE_LOCAL value n
  SCOPE_ENTER value minDepth
  CONSTANT (Constant(4))
  STORE_LOCAL value minDepth
  SCOPE_ENTER value maxDepth
  LOAD_MODULE object Math
  LOAD_LOCAL value minDepth
  CONSTANT (Constant(2))
  CALL_PRIMITIVE Arithmetic(ADD,INT)
  LOAD_LOCAL value n
  CALL_METHOD scala.Mathscala.Math.max (dynamic)
  STORE_LOCAL value maxDepth
  THIS
  CONSTANT (Constant(stretch tree))
  LOAD_LOCAL value maxDepth
  CONSTANT (Constant(1))
  CALL_PRIMITIVE Arithmetic(ADD,INT)
  LOAD_MODULE object Tree
  CONSTANT (Constant(0))
  LOAD_LOCAL value maxDepth
  CONSTANT (Constant(1))
  CALL_PRIMITIVE Arithmetic(ADD,INT)
  CALL_METHOD TreeTree.apply (dynamic)
  CALL_METHOD TreeTree.isum (dynamic)
  STORE_LOCAL variable check0
  STORE_LOCAL variable depth0
  STORE_LOCAL variable name0
  STORE_LOCAL variable $inlThis0
  JUMP 16
  
3: 
  LOAD_EXCEPTION
  DROP REFERENCE(java.lang.Throwable)
  CONSTANT (Constant(1))
  STORE_LOCAL variable exceptionResult1
  JUMP 2
  
4: 
  LOAD_LOCAL value args
  CONSTANT (Constant(0))
  LOAD_ARRAY_ITEM (REFERENCE(java.lang.Object))
  CALL_METHOD java.lang.Integerjava.lang.Integer.parseInt (static-class)
  STORE_LOCAL variable exceptionResult1
  JUMP 2
  
5[loop header]: 
  LOAD_LOCAL variable depth
  LOAD_LOCAL value maxDepth
  CJUMP (INT)LE ? 6 : 8
  
6: 
  SCOPE_ENTER value iterations
  CONSTANT (Constant(1))
  LOAD_LOCAL value maxDepth
  LOAD_LOCAL variable depth
  CALL_PRIMITIVE Arithmetic(SUB,INT)
  LOAD_LOCAL value minDepth
  CALL_PRIMITIVE Arithmetic(ADD,INT)
  CALL_PRIMITIVE Shift(LSL,INT)
  STORE_LOCAL value iterations
  SCOPE_ENTER variable sum
  CONSTANT (Constant(0))
  STORE_LOCAL variable sum
  SCOPE_ENTER variable i
  CONSTANT (Constant(1))
  STORE_LOCAL variable i
  JUMP 9
  
8: 
  THIS
  CONSTANT (Constant(long lived tree))
  LOAD_LOCAL value maxDepth
  LOAD_LOCAL value longLivedTree
  CALL_METHOD TreeTree.isum (dynamic)
  CALL_METHOD binarytreesbinarytrees.print (dynamic)
  SCOPE_EXIT value n
  SCOPE_EXIT value minDepth
  SCOPE_EXIT value maxDepth
  SCOPE_EXIT value longLivedTree
  SCOPE_EXIT variable depth
  RETURN (UNIT)
  
9[loop header]: 
  LOAD_LOCAL variable i
  LOAD_LOCAL value iterations
  CJUMP (INT)LE ? 10 : 12
  
10: 
  LOAD_LOCAL variable sum
  LOAD_MODULE object Tree
  LOAD_LOCAL variable i
  LOAD_LOCAL variable depth
  CALL_METHOD TreeTree.apply (dynamic)
  CALL_METHOD TreeTree.isum (dynamic)
  CALL_PRIMITIVE Arithmetic(ADD,INT)
  LOAD_MODULE object Tree
  LOAD_LOCAL variable i
  CALL_PRIMITIVE Negation(INT)
  LOAD_LOCAL variable depth
  CALL_METHOD TreeTree.apply (dynamic)
  CALL_METHOD TreeTree.isum (dynamic)
  CALL_PRIMITIVE Arithmetic(ADD,INT)
  STORE_LOCAL variable sum
  LOAD_LOCAL variable i
  CONSTANT (Constant(1))
  CALL_PRIMITIVE Arithmetic(ADD,INT)
  STORE_LOCAL variable i
  JUMP 9
  
12: 
  THIS
  CALL_PRIMITIVE StartConcat
  LOAD_LOCAL value iterations
  CONSTANT (Constant(2))
  CALL_PRIMITIVE Arithmetic(MUL,INT)
  CALL_PRIMITIVE StringConcat(INT)
  CONSTANT (Constant(	 trees))
  CALL_PRIMITIVE StringConcat(REFERENCE(java.lang.String))
  CALL_PRIMITIVE EndConcat
  LOAD_LOCAL variable depth
  LOAD_LOCAL variable sum
  CALL_METHOD binarytreesbinarytrees.print (dynamic)
  LOAD_LOCAL variable depth
  CONSTANT (Constant(2))
  CALL_PRIMITIVE Arithmetic(ADD,INT)
  STORE_LOCAL variable depth
  SCOPE_EXIT value iterations
  SCOPE_EXIT variable sum
  SCOPE_EXIT variable i
  JUMP 5
  
15: 
  SCOPE_ENTER value longLivedTree
  LOAD_MODULE object Tree
  CONSTANT (Constant(0))
  LOAD_LOCAL value maxDepth
  CALL_METHOD TreeTree.apply (dynamic)
  STORE_LOCAL value longLivedTree
  SCOPE_ENTER variable depth
  LOAD_LOCAL value minDepth
  STORE_LOCAL variable depth
  JUMP 5
  
16: 
  LOAD_MODULE object Console
  CALL_PRIMITIVE StartConcat
  LOAD_LOCAL variable name0
  CALL_PRIMITIVE StringConcat(REFERENCE(java.lang.String))
  CONSTANT (Constant( of depth ))
  CALL_PRIMITIVE StringConcat(REFERENCE(java.lang.String))
  LOAD_LOCAL variable depth0
  STORE_LOCAL variable boxed10
  LOAD_LOCAL variable boxed10
  BOX INT
  CALL_PRIMITIVE StringConcat(REFERENCE(java.lang.Object))
  CONSTANT (Constant(	 check: ))
  CALL_PRIMITIVE StringConcat(REFERENCE(java.lang.String))
  LOAD_LOCAL variable check0
  STORE_LOCAL variable boxed20
  LOAD_LOCAL variable boxed20
  BOX INT
  CALL_PRIMITIVE StringConcat(REFERENCE(java.lang.Object))
  CALL_PRIMITIVE EndConcat
  CALL_METHOD scala.Consolescala.Console.println (dynamic)
  JUMP 15
  
}
Exception handlers: 
  catch (Throwable) in List(4) starting at: 3
    consisting of blocks: List(3)
    with finalizer: null
  
Exception in thread "main" java.lang.RuntimeException: Could not find element key not found: 15
	at scala.Predef$.error(Predef.scala:76)
	at scala.tools.nsc.backend.icode.analysis.DataFlowAnalysis$class.forwardAnalysis(DataFlowAnalysis.scala:80)
	at scala.tools.nsc.backend.icode.analysis.TypeFlowAnalysis$MethodTFA.forwardAnalysis(TypeFlowAnalysis.scala:106)
	at scala.tools.nsc.backend.icode.analysis.TypeFlowAnalysis$MethodTFA.run(TypeFlowAnalysis.scala:163)
	at scala.tools.nsc.backend.opt.Inliners$Inliner.analyzeMethod(Inliners.scala:292)
	at scala.tools.nsc.backend.opt.Inliners$Inliner$$anonfun$analyzeClass$1.apply(Inliners.scala:270)
	at scala.tools.nsc.backend.opt.Inliners$Inliner$$anonfun$analyzeClass$1.apply(Inliners.scala:270)
	at scala.List.foreach(List.scala:834)
	at scala.tools.nsc.backend.opt.Inliners$Inliner.analyzeClass(Inliners.scala:270)
	at scala.tools.nsc.backend.opt.Inliners$InliningPhase.apply(Inliners.scala:36)
	at scala.tools.nsc.backend.icode.ICodes$ICodePhase$$anonfun$apply$1.apply(ICodes.scala:85)
	at scala.tools.nsc.backend.icode.ICodes$ICodePhase$$anonfun$apply$1.apply(ICodes.scala:85)
	at scala.Iterator$class.foreach(Iterator.scala:410)
	at scala.collection.mutable.FlatHashTable$$anon$1.foreach(FlatHashTable.scala:113)
	at scala.Iterable$class.foreach(Iterable.scala:256)
	at scala.collection.mutable.HashSet.foreach(HashSet.scala:31)
	at scala.tools.nsc.backend.icode.ICodes$ICodePhase.apply(ICodes.scala:85)
	at scala.tools.nsc.Global$GlobalPhase.applyPhase(Global.scala:268)
	at scala.tools.nsc.Global$GlobalPhase$$anonfun$run$1.apply(Global.scala:247)
	at scala.tools.nsc.Global$GlobalPhase$$anonfun$run$1.apply(Global.scala:247)
	at scala.Iterator$class.foreach(Iterator.scala:410)
	at scala.collection.mutable.ListBuffer$$anon$1.foreach(ListBuffer.scala:266)
	at scala.tools.nsc.Global$GlobalPhase.run(Global.scala:247)
	at scala.tools.nsc.Global$Run.compileSources(Global.scala:579)
	at scala.tools.nsc.Global$Run.compile(Global.scala:663)
	at scala.tools.nsc.Main$.process(Main.scala:84)
	at scala.tools.nsc.Main$.main(Main.scala:98)
	at scala.tools.nsc.Main.main(Main.scala)
make: [binarytrees.scala-4.scala_run] Error 1 (ignored)

COMMAND LINE:
 /usr/local/src/scala-2.7.2.RC1/bin/scala -howtorun object binarytrees 12

PROGRAM FAILED 


PROGRAM OUTPUT:
java.lang.ClassNotFoundException: binarytrees
