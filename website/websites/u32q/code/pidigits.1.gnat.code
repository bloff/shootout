<span class="hl slc">--  The Computer Language Shootout</span>
<span class="hl slc">--  http://shootout.alioth.debian.org</span>
<span class="hl slc">--  Calculate digits of pi using the</span>
<span class="hl slc">--  Unbounded Spigot Algorithms</span>
<span class="hl slc">--</span>
<span class="hl slc">--  From Pascal code by Vincent Snijders</span>
<span class="hl slc">--  gmp headers by Karl-Michael Schindler</span>
<span class="hl slc">--  Translated by (New) P2Ada v. 17-June-2006</span>

<span class="hl kwa">with</span> Ada<span class="hl sym">.</span>Text_IO<span class="hl sym">;</span>                       <span class="hl kwa">use</span> Ada<span class="hl sym">.</span>Text_IO<span class="hl sym">;</span>
<span class="hl kwa">with</span> Ada<span class="hl sym">.</span>Integer_Text_IO<span class="hl sym">;</span>               <span class="hl kwa">use</span> Ada<span class="hl sym">.</span>Integer_Text_IO<span class="hl sym">;</span>
<span class="hl kwa">with</span> Ada<span class="hl sym">.</span>Command_Line<span class="hl sym">;</span>                  <span class="hl kwa">use</span> Ada<span class="hl sym">.</span>Command_Line<span class="hl sym">;</span>
<span class="hl kwa">with</span> Ada<span class="hl sym">.</span>Calendar<span class="hl sym">;</span>                      <span class="hl kwa">use</span> Ada<span class="hl sym">.</span>Calendar<span class="hl sym">;</span>

<span class="hl kwa">with</span> Interfaces<span class="hl sym">.</span>C<span class="hl sym">;</span>

<span class="hl kwa">procedure</span> pidigits <span class="hl kwa">is</span>

  <span class="hl kwa">pragma</span> Suppress<span class="hl sym">(</span>All_Checks<span class="hl sym">);</span>

  <span class="hl kwa">package</span> GMP_mini <span class="hl kwa">is</span>
    <span class="hl kwa">type</span> mp_limb_t <span class="hl kwa">is new</span> Interfaces<span class="hl sym">.</span>C<span class="hl sym">.</span>unsigned<span class="hl sym">;</span>
    <span class="hl kwa">type</span> mp_ptr <span class="hl kwa">is access</span> mp_limb_t<span class="hl sym">;</span>

    <span class="hl kwa">type</span> mpz_t <span class="hl kwa">is record</span>
      mp_alloc<span class="hl sym">,</span> mp_size <span class="hl sym">:</span> Interfaces<span class="hl sym">.</span>C<span class="hl sym">.</span>int<span class="hl sym">;</span>
      mp_d    <span class="hl sym">:</span> mp_ptr<span class="hl sym">;</span>
    <span class="hl kwa">end record</span><span class="hl sym">;</span>

    <span class="hl kwa">procedure</span> mpz_init <span class="hl sym">(</span>Dest<span class="hl sym">:</span> <span class="hl kwa">out</span> mpz_t<span class="hl sym">);</span>
    <span class="hl kwa">pragma</span> Import<span class="hl sym">(</span>C<span class="hl sym">,</span> mpz_init<span class="hl sym">,</span> <span class="hl str">&quot;__gmpz_init&quot;</span><span class="hl sym">);</span>

    <span class="hl kwa">procedure</span> mpz_init_set_ui <span class="hl sym">(</span>Dest<span class="hl sym">:</span> <span class="hl kwa">out</span> mpz_t<span class="hl sym">;</span> Src<span class="hl sym">:</span> <span class="hl kwa">in</span> Interfaces<span class="hl sym">.</span>C<span class="hl sym">.</span>unsigned_long<span class="hl sym">);</span>
    <span class="hl kwa">pragma</span> Import<span class="hl sym">(</span>C<span class="hl sym">,</span> mpz_init_set_ui<span class="hl sym">,</span> <span class="hl str">&quot;__gmpz_init_set_ui&quot;</span><span class="hl sym">);</span>

    <span class="hl kwa">procedure</span> mpz_mul_ui <span class="hl sym">(</span>Dest<span class="hl sym">:</span> <span class="hl kwa">out</span> mpz_t<span class="hl sym">;</span> Src1<span class="hl sym">:</span> <span class="hl kwa">in</span> mpz_t<span class="hl sym">;</span> Src2<span class="hl sym">:</span> <span class="hl kwa">in</span> Interfaces<span class="hl sym">.</span>C<span class="hl sym">.</span>unsigned_long<span class="hl sym">);</span>
    <span class="hl kwa">pragma</span> Import<span class="hl sym">(</span>C<span class="hl sym">,</span> mpz_mul_ui<span class="hl sym">,</span> <span class="hl str">&quot;__gmpz_mul_ui&quot;</span><span class="hl sym">);</span>

    <span class="hl kwa">procedure</span> mpz_mul_si <span class="hl sym">(</span>Dest<span class="hl sym">:</span> <span class="hl kwa">out</span> mpz_t<span class="hl sym">;</span> Src1<span class="hl sym">:</span> <span class="hl kwa">in</span> mpz_t<span class="hl sym">;</span> Src2<span class="hl sym">:</span> <span class="hl kwa">in</span> Interfaces<span class="hl sym">.</span>C<span class="hl sym">.</span>int<span class="hl sym">);</span>
    <span class="hl kwa">pragma</span> Import<span class="hl sym">(</span>C<span class="hl sym">,</span> mpz_mul_si<span class="hl sym">,</span> <span class="hl str">&quot;__gmpz_mul_si&quot;</span><span class="hl sym">);</span>

    <span class="hl kwa">procedure</span> mpz_add <span class="hl sym">(</span>Dest<span class="hl sym">:</span> <span class="hl kwa">out</span> mpz_t<span class="hl sym">;</span> Src1<span class="hl sym">,</span> Src2<span class="hl sym">:</span> <span class="hl kwa">in</span> mpz_t<span class="hl sym">);</span>
    <span class="hl kwa">pragma</span> Import<span class="hl sym">(</span>C<span class="hl sym">,</span> mpz_add<span class="hl sym">,</span> <span class="hl str">&quot;__gmpz_add&quot;</span><span class="hl sym">);</span>

    <span class="hl kwa">procedure</span> mpz_tdiv_q <span class="hl sym">(</span>Dest<span class="hl sym">:</span> <span class="hl kwa">out</span> mpz_t<span class="hl sym">;</span> Src1<span class="hl sym">,</span> Src2<span class="hl sym">:</span> <span class="hl kwa">in</span> mpz_t<span class="hl sym">);</span>
    <span class="hl kwa">pragma</span> Import<span class="hl sym">(</span>C<span class="hl sym">,</span> mpz_tdiv_q<span class="hl sym">,</span> <span class="hl str">&quot;__gmpz_tdiv_q&quot;</span><span class="hl sym">);</span>

    <span class="hl kwa">function</span>  mpz_get_ui <span class="hl sym">(</span>Src<span class="hl sym">:</span> <span class="hl kwa">in</span> mpz_t<span class="hl sym">)</span> <span class="hl kwa">return</span> Interfaces<span class="hl sym">.</span>C<span class="hl sym">.</span>unsigned_long<span class="hl sym">;</span>
    <span class="hl kwa">pragma</span> Import<span class="hl sym">(</span>C<span class="hl sym">,</span> mpz_get_ui<span class="hl sym">,</span> <span class="hl str">&quot;__gmpz_get_ui&quot;</span><span class="hl sym">);</span>

    <span class="hl kwa">pragma</span> Linker_Options<span class="hl sym">(</span><span class="hl str">&quot;-lgmp&quot;</span><span class="hl sym">);</span>

  <span class="hl kwa">end</span> GMP_Mini<span class="hl sym">;</span>

  <span class="hl kwa">procedure</span> Print_pi_digits<span class="hl sym">(</span>num_digits<span class="hl sym">:</span> <span class="hl kwb">Integer</span><span class="hl sym">)</span> <span class="hl kwa">is</span>
    <span class="hl kwa">use</span> GMP_mini<span class="hl sym">;</span>

    q<span class="hl sym">,</span>r<span class="hl sym">,</span>s<span class="hl sym">,</span>t<span class="hl sym">:</span> mpz_t<span class="hl sym">;</span> <span class="hl slc">--  Transformation matrix components</span>

    u<span class="hl sym">,</span>v<span class="hl sym">,</span>w<span class="hl sym">:</span> mpz_t<span class="hl sym">;</span>   <span class="hl slc">--  Temporary variables</span>

    k<span class="hl sym">,</span>digit<span class="hl sym">:</span> Interfaces<span class="hl sym">.</span>C<span class="hl sym">.</span>int<span class="hl sym">;</span>
    c<span class="hl sym">,</span>i<span class="hl sym">:</span> <span class="hl kwb">Integer</span><span class="hl sym">;</span>
    line<span class="hl sym">:</span> <span class="hl kwb">String</span><span class="hl sym">(</span><span class="hl num">1</span> <span class="hl sym">.</span><span class="hl num">.10</span><span class="hl sym">);</span>

    <span class="hl kwa">function</span> Extract<span class="hl sym">(</span>x<span class="hl sym">:</span> Interfaces<span class="hl sym">.</span>C<span class="hl sym">.</span>Unsigned_long<span class="hl sym">)</span> <span class="hl kwa">return</span> Interfaces<span class="hl sym">.</span>C<span class="hl sym">.</span>int <span class="hl kwa">is</span>
    <span class="hl kwa">begin</span>
      mpz_mul_ui<span class="hl sym">(</span>u<span class="hl sym">,</span> q<span class="hl sym">,</span> x<span class="hl sym">);</span>
      mpz_add<span class="hl sym">(</span>u<span class="hl sym">,</span> u<span class="hl sym">,</span> r<span class="hl sym">);</span>
      mpz_mul_ui<span class="hl sym">(</span>v<span class="hl sym">,</span> s<span class="hl sym">,</span> x<span class="hl sym">);</span>
      mpz_add<span class="hl sym">(</span>v<span class="hl sym">,</span> v<span class="hl sym">,</span> t<span class="hl sym">);</span>
      mpz_tdiv_q<span class="hl sym">(</span>w<span class="hl sym">,</span> u<span class="hl sym">,</span> v<span class="hl sym">);</span>
      <span class="hl kwa">return</span> Interfaces<span class="hl sym">.</span>C<span class="hl sym">.</span>int<span class="hl sym">(</span>mpz_get_ui<span class="hl sym">(</span>w<span class="hl sym">));</span>
    <span class="hl kwa">end</span> Extract<span class="hl sym">;</span>

    <span class="hl kwa">use</span> Interfaces<span class="hl sym">.</span>C<span class="hl sym">;</span>

    <span class="hl kwa">function</span> IsSafe <span class="hl kwa">return</span> <span class="hl kwb">Boolean</span> <span class="hl kwa">is</span>
    <span class="hl kwa">begin</span>
      <span class="hl kwa">return</span> digit <span class="hl sym">=</span> Extract<span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">);</span>
    <span class="hl kwa">end</span> IsSafe<span class="hl sym">;</span>

    <span class="hl kwa">procedure</span> Produce <span class="hl kwa">is</span>
    <span class="hl kwa">begin</span>
      mpz_mul_si<span class="hl sym">(</span>r<span class="hl sym">,</span> r<span class="hl sym">,</span> <span class="hl num">10</span><span class="hl sym">);</span>
      mpz_mul_si<span class="hl sym">(</span>v<span class="hl sym">,</span> t<span class="hl sym">, -</span><span class="hl num">10</span> <span class="hl sym">*</span> digit<span class="hl sym">);</span>
      mpz_add<span class="hl sym">(</span>r<span class="hl sym">,</span> r<span class="hl sym">,</span> v<span class="hl sym">);</span>
      mpz_mul_si<span class="hl sym">(</span>q<span class="hl sym">,</span> q<span class="hl sym">,</span> <span class="hl num">10</span><span class="hl sym">);</span>
    <span class="hl kwa">end</span> Produce<span class="hl sym">;</span>

    <span class="hl kwa">procedure</span> Consume <span class="hl kwa">is</span>
    <span class="hl kwa">begin</span>
      k<span class="hl sym">:=</span> k <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
      mpz_mul_si<span class="hl sym">(</span>r<span class="hl sym">,</span> r<span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">*</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">);</span>
      mpz_mul_si<span class="hl sym">(</span>u<span class="hl sym">,</span> q<span class="hl sym">,</span> <span class="hl num">4</span><span class="hl sym">*</span>k<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">);</span>
      mpz_add<span class="hl sym">(</span>r<span class="hl sym">,</span> r<span class="hl sym">,</span> u<span class="hl sym">);</span>
      mpz_mul_si<span class="hl sym">(</span>t<span class="hl sym">,</span> t<span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">*</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">);</span>
      mpz_mul_si<span class="hl sym">(</span>v<span class="hl sym">,</span> s<span class="hl sym">,</span> <span class="hl num">4</span><span class="hl sym">*</span>k<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">);</span>
      mpz_add<span class="hl sym">(</span>t<span class="hl sym">,</span> t<span class="hl sym">,</span> v<span class="hl sym">);</span>
      mpz_mul_si<span class="hl sym">(</span>s<span class="hl sym">,</span> s<span class="hl sym">,</span> k<span class="hl sym">);</span>
      mpz_mul_si<span class="hl sym">(</span>q<span class="hl sym">,</span> q<span class="hl sym">,</span> k<span class="hl sym">);</span>
    <span class="hl kwa">end</span> Consume<span class="hl sym">;</span>

  <span class="hl kwa">begin</span>
    k <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    i <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    c <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    mpz_init_set_ui<span class="hl sym">(</span>q<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">);</span>
    mpz_init_set_ui<span class="hl sym">(</span>r<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">);</span>
    mpz_init_set_ui<span class="hl sym">(</span>s<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">);</span>
    mpz_init_set_ui<span class="hl sym">(</span>t<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">);</span>
    mpz_init<span class="hl sym">(</span>u<span class="hl sym">);</span>
    mpz_init<span class="hl sym">(</span>v<span class="hl sym">);</span>
    mpz_init<span class="hl sym">(</span>w<span class="hl sym">);</span>
    <span class="hl kwa">while</span> i <span class="hl sym">&lt;</span> num_digits <span class="hl kwa">loop</span>
      digit <span class="hl sym">:=</span> Extract<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">);</span>
      <span class="hl kwa">while not</span> IsSafe <span class="hl kwa">loop</span>
        Consume<span class="hl sym">;</span>
        digit<span class="hl sym">:=</span> Extract<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">);</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>
      Produce<span class="hl sym">;</span>
      c<span class="hl sym">:=</span> c <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
      line<span class="hl sym">(</span>c<span class="hl sym">) :=</span> <span class="hl kwb">Character</span>'Val<span class="hl sym">(</span><span class="hl kwb">Character</span>'Pos<span class="hl sym">(</span>'<span class="hl num">0</span>'<span class="hl sym">)+</span>digit<span class="hl sym">);</span>
      i<span class="hl sym">:=</span> i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl kwa">if</span> c <span class="hl sym">=</span> <span class="hl num">10</span> <span class="hl kwa">then</span>
        Put<span class="hl sym">(</span>line <span class="hl sym">&amp;</span> ASCII<span class="hl sym">.</span>HT <span class="hl sym">&amp;</span> '<span class="hl sym">:</span>'<span class="hl sym">);</span>
        Put<span class="hl sym">(</span>i<span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">);</span> New_Line<span class="hl sym">;</span>
        c <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwa">end if</span><span class="hl sym">;</span>
    <span class="hl kwa">end loop</span><span class="hl sym">;</span>
    <span class="hl kwa">if</span>  c<span class="hl sym">/=</span><span class="hl num">0</span> <span class="hl kwa">then</span>
      Put<span class="hl sym">(</span>line<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">..</span>c<span class="hl sym">));</span>
      <span class="hl kwa">for</span> i <span class="hl kwa">in</span> c<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">.</span><span class="hl num">.10</span> <span class="hl kwa">loop</span>
        Put<span class="hl sym">(</span>' '<span class="hl sym">);</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>
      Put<span class="hl sym">(</span>ASCII<span class="hl sym">.</span>HT <span class="hl sym">&amp;</span> '<span class="hl sym">:</span>'<span class="hl sym">);</span>
      Put<span class="hl sym">(</span>i<span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">);</span>
      New_Line<span class="hl sym">;</span>
    <span class="hl kwa">end if</span><span class="hl sym">;</span>
  <span class="hl kwa">end</span> Print_pi_digits<span class="hl sym">;</span>

  n<span class="hl sym">:</span> <span class="hl kwb">Integer</span><span class="hl sym">;</span>

  t0<span class="hl sym">,</span>t1<span class="hl sym">:</span> Time<span class="hl sym">;</span>
  timing<span class="hl sym">:</span> <span class="hl kwa">constant</span> <span class="hl kwb">Boolean</span><span class="hl sym">:=</span> <span class="hl kwd">False</span><span class="hl sym">;</span>

<span class="hl kwa">begin</span>
  n<span class="hl sym">:=</span> <span class="hl num">2</span>_500<span class="hl sym">;</span>
  <span class="hl kwa">if</span> Argument_Count<span class="hl sym">=</span><span class="hl num">1</span> <span class="hl kwa">then</span>
    n<span class="hl sym">:=</span> <span class="hl kwb">Integer</span>'Value<span class="hl sym">(</span>Argument<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">));</span>
  <span class="hl kwa">end if</span><span class="hl sym">;</span>
  <span class="hl kwa">if</span> timing <span class="hl kwa">then</span>
    t0<span class="hl sym">:=</span> Clock<span class="hl sym">;</span>
  <span class="hl kwa">end if</span><span class="hl sym">;</span>
  Print_pi_digits<span class="hl sym">(</span>n<span class="hl sym">);</span>
  <span class="hl kwa">if</span> timing <span class="hl kwa">then</span>
    t1<span class="hl sym">:=</span> Clock<span class="hl sym">;</span>
    Put<span class="hl sym">(</span><span class="hl str">&quot;Time in seconds: &quot;</span> <span class="hl sym">&amp;</span> <span class="hl kwb">Duration</span>'Image<span class="hl sym">(</span>t1<span class="hl sym">-</span>t0<span class="hl sym">) &amp;</span> <span class="hl str">&quot; [press return]&quot;</span><span class="hl sym">);</span>
    Skip_Line<span class="hl sym">;</span>
  <span class="hl kwa">end if</span><span class="hl sym">;</span>
<span class="hl kwa">end</span> pidigits<span class="hl sym">;</span>
