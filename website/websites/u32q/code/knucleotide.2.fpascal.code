<span class="hl com">(* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Josh Goldfoot</span>
<span class="hl com">   modified by Vincent Snijders</span>
<span class="hl com">*)</span>

<span class="hl com">{$mode objfpc}</span>

<span class="hl kwa">program</span> knucleotide<span class="hl sym">;</span>

<span class="hl com">(* simple_hash available from CVS *)</span>

<span class="hl kwa">const</span>
  ht_num_primes <span class="hl sym">=</span> <span class="hl num">28</span><span class="hl sym">;</span>

  ht_prime_list<span class="hl sym">:</span> <span class="hl kwa">array</span><span class="hl sym">[</span><span class="hl num">0</span> <span class="hl sym">..</span> ht_num_primes<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">]</span> <span class="hl kwa">of</span> dword <span class="hl sym">=</span>
  <span class="hl sym">(</span> <span class="hl num">53</span><span class="hl sym">,</span>         <span class="hl num">97</span><span class="hl sym">,</span>         <span class="hl num">193</span><span class="hl sym">,</span>       <span class="hl num">389</span><span class="hl sym">,</span>       <span class="hl num">769</span><span class="hl sym">,</span>
    <span class="hl num">1543</span><span class="hl sym">,</span>       <span class="hl num">3079</span><span class="hl sym">,</span>       <span class="hl num">6151</span><span class="hl sym">,</span>      <span class="hl num">12289</span><span class="hl sym">,</span>     <span class="hl num">24593</span><span class="hl sym">,</span>
    <span class="hl num">49157</span><span class="hl sym">,</span>      <span class="hl num">98317</span><span class="hl sym">,</span>      <span class="hl num">196613</span><span class="hl sym">,</span>    <span class="hl num">393241</span><span class="hl sym">,</span>    <span class="hl num">786433</span><span class="hl sym">,</span>
    <span class="hl num">1572869</span><span class="hl sym">,</span>    <span class="hl num">3145739</span><span class="hl sym">,</span>    <span class="hl num">6291469</span><span class="hl sym">,</span>   <span class="hl num">12582917</span><span class="hl sym">,</span>  <span class="hl num">25165843</span><span class="hl sym">,</span>
    <span class="hl num">50331653</span><span class="hl sym">,</span>   <span class="hl num">100663319</span><span class="hl sym">,</span>  <span class="hl num">201326611</span><span class="hl sym">,</span> <span class="hl num">402653189</span><span class="hl sym">,</span> <span class="hl num">805306457</span><span class="hl sym">,</span>
    <span class="hl num">1610612741</span><span class="hl sym">,</span> <span class="hl num">3221225473</span><span class="hl sym">,</span> <span class="hl num">4294967291</span> <span class="hl sym">);</span>

<span class="hl kwa">type</span>
  <span class="hl com">{ TNonFreePooledMemManager - a memory manager for records without freeing }</span>

  PMemChunk <span class="hl sym">= ^</span>TMemChunk<span class="hl sym">;</span>
  TMemChunk <span class="hl sym">=</span> <span class="hl kwa">record</span>
    data<span class="hl sym">:</span> <span class="hl kwb">pointer</span><span class="hl sym">;</span>
    next<span class="hl sym">:</span> PMemChunk<span class="hl sym">;</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>

  TNonFreePooledMemManager <span class="hl sym">=</span> <span class="hl kwa">class</span>
  <span class="hl kwa">private</span>
    FItemSize<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">;</span>
    FItems<span class="hl sym">:</span> PMemChunk<span class="hl sym">;</span>
    FCurItem<span class="hl sym">:</span> <span class="hl kwb">Pointer</span><span class="hl sym">;</span>
    FEndItem<span class="hl sym">:</span> <span class="hl kwb">Pointer</span><span class="hl sym">;</span>
    FCurSize<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">;</span>
    <span class="hl kwa">procedure</span> Grow<span class="hl sym">;</span>
  <span class="hl kwa">public</span>
    <span class="hl kwa">property</span> ItemSize<span class="hl sym">:</span> <span class="hl kwb">integer</span> read FItemSize<span class="hl sym">;</span>
    <span class="hl kwa">constructor</span> <span class="hl kwd">Create</span><span class="hl sym">(</span>TheItemSize<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">);</span>
    <span class="hl kwa">destructor</span> Destroy<span class="hl sym">;</span> <span class="hl kwa">override</span><span class="hl sym">;</span>
    <span class="hl kwa">function</span> NewItem<span class="hl sym">:</span> <span class="hl kwb">Pointer</span><span class="hl sym">;</span> <span class="hl kwa">inline</span><span class="hl sym">;</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>

  <span class="hl com">{ THashTable }</span>

  ht_ppnode <span class="hl sym">= ^</span>ht_pnode<span class="hl sym">;</span>
  ht_pnode <span class="hl sym">= ^</span>ht_node<span class="hl sym">;</span>
  ht_node <span class="hl sym">=</span> <span class="hl kwa">record</span>
    val<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">;</span>
    next<span class="hl sym">:</span> ht_pnode<span class="hl sym">;</span>
    keydata<span class="hl sym">:</span> <span class="hl kwa">array</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">.</span><span class="hl num">.0</span><span class="hl sym">]</span> <span class="hl kwa">of</span> <span class="hl kwb">char</span><span class="hl sym">;</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>

  THashTable<span class="hl sym">=</span><span class="hl kwa">class</span>
  <span class="hl kwa">private</span>
    FSize<span class="hl sym">:</span> dword<span class="hl sym">;</span>
    FKeysize<span class="hl sym">:</span> dword<span class="hl sym">;</span>
    FTbl<span class="hl sym">:</span> ht_ppnode<span class="hl sym">;</span>
    FIter_index<span class="hl sym">:</span> dword<span class="hl sym">;</span>
    FIter_next<span class="hl sym">:</span> ht_pnode<span class="hl sym">;</span>
    FNodeMemManager<span class="hl sym">:</span> TNonFreePooledMemManager<span class="hl sym">;</span>
  <span class="hl kwa">public</span>
    <span class="hl kwa">constructor</span> <span class="hl kwd">Create</span><span class="hl sym">(</span>size<span class="hl sym">:</span> dword<span class="hl sym">;</span> keysize<span class="hl sym">:</span> dword<span class="hl sym">);</span>
    <span class="hl kwa">destructor</span> Destroy<span class="hl sym">;</span> <span class="hl kwa">override</span><span class="hl sym">;</span>
    <span class="hl kwa">function</span> <span class="hl kwd">Find</span><span class="hl sym">(</span>key<span class="hl sym">:</span> pchar<span class="hl sym">):</span> ht_pnode<span class="hl sym">;</span>
    <span class="hl kwa">function</span> <span class="hl kwd">FindNew</span><span class="hl sym">(</span>key<span class="hl sym">:</span> pchar<span class="hl sym">):</span> ht_pnode<span class="hl sym">;</span>
    <span class="hl kwa">function</span> First<span class="hl sym">:</span> ht_pnode<span class="hl sym">;</span>
    <span class="hl kwa">function</span> Next<span class="hl sym">:</span> ht_pnode<span class="hl sym">;</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl com">{ TNonFreePooledMemManager }</span>

<span class="hl kwa">procedure</span> TNonFreePooledMemManager<span class="hl sym">.</span>Grow<span class="hl sym">;</span>
<span class="hl kwa">var</span>
  memchunk<span class="hl sym">:</span> PMemChunk<span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  <span class="hl kwa">if</span> FCurSize<span class="hl sym">&lt;</span><span class="hl num">256</span><span class="hl sym">*</span><span class="hl num">1024</span> <span class="hl kwa">then</span>
  <span class="hl slc">// each item has double the size of its predecessor</span>
    <span class="hl kwd">inc</span><span class="hl sym">(</span>FCurSize<span class="hl sym">,</span> FCurSize<span class="hl sym">);</span>
  <span class="hl kwd">GetMem</span><span class="hl sym">(</span>FCurItem<span class="hl sym">,</span>FCurSize<span class="hl sym">);</span>
  <span class="hl kwd">FillChar</span><span class="hl sym">(</span>FCurItem<span class="hl sym">^,</span> FCurSize<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">);</span>
  <span class="hl kwd">new</span><span class="hl sym">(</span>MemChunk<span class="hl sym">);</span>
  MemChunk<span class="hl sym">^.</span>next <span class="hl sym">:=</span> FItems<span class="hl sym">;</span>
  MemChunk<span class="hl sym">^.</span>Data <span class="hl sym">:=</span> FCurItem<span class="hl sym">;</span>
  FItems <span class="hl sym">:=</span> MemChunk<span class="hl sym">;</span>
  FEndItem <span class="hl sym">:=</span> FCurItem<span class="hl sym">;</span>
  <span class="hl kwd">Inc</span><span class="hl sym">(</span>FEndItem<span class="hl sym">,</span> FCurSize<span class="hl sym">);</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">constructor</span> TNonFreePooledMemManager<span class="hl sym">.</span><span class="hl kwd">Create</span><span class="hl sym">(</span>TheItemSize<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">);</span>
<span class="hl kwa">begin</span>
  FItemSize<span class="hl sym">:=</span>TheItemSize<span class="hl sym">;</span>
  FCurSize<span class="hl sym">:=</span>FItemSize<span class="hl sym">*</span><span class="hl num">4</span><span class="hl sym">;</span> <span class="hl slc">// 4 items =&gt; the first item has 8 entries</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">destructor</span> TNonFreePooledMemManager<span class="hl sym">.</span>Destroy<span class="hl sym">;</span>
<span class="hl kwa">var</span>
  p<span class="hl sym">:</span> PMemChunk<span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  <span class="hl kwa">while</span> FItems<span class="hl sym">&lt;&gt;</span><span class="hl kwa">nil do begin</span>
    p <span class="hl sym">:=</span> FItems<span class="hl sym">;</span>
    FItems <span class="hl sym">:=</span> Fitems<span class="hl sym">^.</span>next<span class="hl sym">;</span>
    <span class="hl kwd">FreeMem</span><span class="hl sym">(</span>p<span class="hl sym">^.</span>Data<span class="hl sym">);</span>
    <span class="hl kwd">Dispose</span><span class="hl sym">(</span>p<span class="hl sym">);</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>
  <span class="hl kwa">inherited</span> Destroy<span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">function</span> TNonFreePooledMemManager<span class="hl sym">.</span>NewItem<span class="hl sym">:</span> <span class="hl kwb">Pointer</span><span class="hl sym">;</span> <span class="hl kwa">inline</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  <span class="hl kwa">if</span> <span class="hl sym">(</span>FCurItem<span class="hl sym">=</span>FEndItem<span class="hl sym">)</span> <span class="hl kwa">then</span>
   Grow<span class="hl sym">;</span>
  Result<span class="hl sym">:=</span>FCurItem<span class="hl sym">;</span>
  <span class="hl kwd">Inc</span><span class="hl sym">(</span>FCurItem<span class="hl sym">,</span> FItemSize<span class="hl sym">);</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl com">{ THashTable }</span>

<span class="hl kwa">constructor</span> THashTable<span class="hl sym">.</span><span class="hl kwd">Create</span><span class="hl sym">(</span>size<span class="hl sym">:</span> dword<span class="hl sym">;</span> keysize<span class="hl sym">:</span> dword<span class="hl sym">);</span>
<span class="hl kwa">var</span>
  i<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  i <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
  <span class="hl kwa">while</span> <span class="hl sym">(</span>i<span class="hl sym">&lt;</span><span class="hl kwd">high</span><span class="hl sym">(</span>ht_prime_list<span class="hl sym">))</span> <span class="hl kwa">and</span> <span class="hl sym">(</span>size<span class="hl sym">&gt;</span>ht_prime_list<span class="hl sym">[</span>i<span class="hl sym">])</span> <span class="hl kwa">do</span>
    <span class="hl kwd">inc</span><span class="hl sym">(</span>i<span class="hl sym">);</span>
  FSize <span class="hl sym">:=</span> ht_prime_list<span class="hl sym">[</span>i<span class="hl sym">];</span>
  fkeysize <span class="hl sym">:=</span> keysize<span class="hl sym">;</span>
  ftbl <span class="hl sym">:=</span> <span class="hl kwd">allocmem</span><span class="hl sym">(</span><span class="hl kwd">sizeof</span><span class="hl sym">(</span>ht_pnode<span class="hl sym">) *</span> FSize<span class="hl sym">);</span>
  fiter_index <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
  fiter_next <span class="hl sym">:=</span> <span class="hl kwa">nil</span><span class="hl sym">;</span>
  FNodeMemManager <span class="hl sym">:=</span> TNonFreePooledMemManager<span class="hl sym">.</span><span class="hl kwd">Create</span><span class="hl sym">(</span><span class="hl kwd">SizeOf</span><span class="hl sym">(</span>ht_node<span class="hl sym">)+</span>FKeySize<span class="hl sym">);</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">destructor</span> THashTable<span class="hl sym">.</span>Destroy<span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  FNodeMemManager<span class="hl sym">.</span>Free<span class="hl sym">;</span>
  <span class="hl kwd">freemem</span><span class="hl sym">(</span>Ftbl<span class="hl sym">);</span>
  <span class="hl kwa">inherited</span><span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">function</span> <span class="hl kwd">ht_hashcode</span><span class="hl sym">(</span>key<span class="hl sym">:</span> pchar<span class="hl sym">;</span> keysize<span class="hl sym">:</span> dword<span class="hl sym">):</span> dword<span class="hl sym">;</span> <span class="hl slc">//inline;</span>
<span class="hl kwa">var</span>
  val<span class="hl sym">:</span> dword<span class="hl sym">;</span>
  i<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  val <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>

  <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> Keysize <span class="hl sym">-</span><span class="hl num">1</span> <span class="hl kwa">do</span>
  <span class="hl kwa">begin</span>
    val <span class="hl sym">:=</span> val <span class="hl sym">*</span> <span class="hl num">4</span><span class="hl sym">;</span>
    <span class="hl kwd">inc</span><span class="hl sym">(</span>val<span class="hl sym">,</span> <span class="hl kwd">dword</span><span class="hl sym">(</span><span class="hl kwb">byte</span><span class="hl sym">(</span>key<span class="hl sym">^)</span> <span class="hl kwa">and</span> <span class="hl num">6</span><span class="hl sym">)</span> <span class="hl kwa">shr</span> <span class="hl num">1</span><span class="hl sym">);</span>
    <span class="hl kwd">inc</span><span class="hl sym">(</span>key<span class="hl sym">);</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>
  result <span class="hl sym">:=</span> val<span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">function</span> THashTable<span class="hl sym">.</span><span class="hl kwd">Find</span><span class="hl sym">(</span>key<span class="hl sym">:</span> pchar<span class="hl sym">):</span> ht_pnode<span class="hl sym">;</span>
<span class="hl kwa">var</span>
  hash_code<span class="hl sym">:</span> dword<span class="hl sym">;</span>
  node<span class="hl sym">:</span> ht_pnode<span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  hash_code <span class="hl sym">:=</span> <span class="hl kwd">ht_hashcode</span><span class="hl sym">(</span>key<span class="hl sym">,</span> FKeySize<span class="hl sym">)</span> <span class="hl kwa">mod</span> FSize<span class="hl sym">;</span>
  node <span class="hl sym">:=</span> FTbl<span class="hl sym">[</span>hash_code<span class="hl sym">];</span>
  <span class="hl kwa">while</span> node <span class="hl sym">&lt;&gt;</span> <span class="hl kwa">nil do</span>
  <span class="hl kwa">begin</span>
    <span class="hl kwa">if</span> <span class="hl kwd">comparebyte</span><span class="hl sym">(</span>key<span class="hl sym">^,</span> node<span class="hl sym">^.</span>keydata<span class="hl sym">,</span> FKeysize<span class="hl sym">) =</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
    <span class="hl kwa">begin</span>
      result <span class="hl sym">:=</span> node<span class="hl sym">;</span>
      exit<span class="hl sym">;</span>
    <span class="hl kwa">end</span><span class="hl sym">;</span>
    node <span class="hl sym">:=</span> node<span class="hl sym">^.</span>next<span class="hl sym">;</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>
  result <span class="hl sym">:=</span> <span class="hl kwa">nil</span><span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">function</span> THashTable<span class="hl sym">.</span><span class="hl kwd">FindNew</span><span class="hl sym">(</span>key<span class="hl sym">:</span> pchar<span class="hl sym">):</span> ht_pnode<span class="hl sym">;</span>
<span class="hl kwa">var</span>
  hash_code<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">;</span>
  prev<span class="hl sym">,</span> node<span class="hl sym">:</span> ht_pnode<span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  prev <span class="hl sym">:=</span> <span class="hl kwa">nil</span><span class="hl sym">;</span>
  hash_code <span class="hl sym">:=</span> <span class="hl kwd">ht_hashcode</span><span class="hl sym">(</span>key<span class="hl sym">,</span> FKeysize<span class="hl sym">)</span> <span class="hl kwa">mod</span> FSize<span class="hl sym">;</span>
  node <span class="hl sym">:=</span> FTbl<span class="hl sym">[</span>hash_code<span class="hl sym">];</span>
  <span class="hl kwa">while</span> node <span class="hl sym">&lt;&gt;</span> <span class="hl kwa">nil do</span>
  <span class="hl kwa">begin</span>
    <span class="hl kwa">if</span> <span class="hl kwd">CompareByte</span><span class="hl sym">(</span>key<span class="hl sym">^,</span> node<span class="hl sym">^.</span>keydata<span class="hl sym">,</span> FKeysize<span class="hl sym">) =</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
    <span class="hl kwa">begin</span>
      result <span class="hl sym">:=</span> node<span class="hl sym">;</span>
      exit<span class="hl sym">;</span>
    <span class="hl kwa">end</span><span class="hl sym">;</span>
    prev <span class="hl sym">:=</span> node<span class="hl sym">;</span>
    node <span class="hl sym">:=</span> node<span class="hl sym">^.</span>next<span class="hl sym">;</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>
  result <span class="hl sym">:=</span> FNodeMemManager<span class="hl sym">.</span>NewItem<span class="hl sym">;</span>
  <span class="hl kwd">move</span><span class="hl sym">(</span>key<span class="hl sym">^,</span>Result<span class="hl sym">^.</span>keydata<span class="hl sym">,</span>FKeysize<span class="hl sym">);</span>
  <span class="hl kwa">if</span> prev <span class="hl sym">&lt;&gt;</span> <span class="hl kwa">nil then</span>
  <span class="hl kwa">begin</span>
    prev<span class="hl sym">^.</span>next <span class="hl sym">:=</span> result<span class="hl sym">;</span>
  <span class="hl kwa">end else begin</span>
    FTbl<span class="hl sym">[</span>hash_code<span class="hl sym">] :=</span> result<span class="hl sym">;</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl com">{</span>
<span class="hl com">  Hash Table iterator data / functions</span>
<span class="hl com">}</span>

<span class="hl kwa">function</span> THashTable<span class="hl sym">.</span>First<span class="hl sym">:</span> ht_pnode<span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  FIter_index <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
  FIter_next <span class="hl sym">:=</span> <span class="hl kwa">nil</span><span class="hl sym">;</span>
  result <span class="hl sym">:=</span> next<span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">function</span> THashTable<span class="hl sym">.</span>Next<span class="hl sym">:</span> ht_pnode<span class="hl sym">;</span>
<span class="hl kwa">var</span>
  index<span class="hl sym">:</span> dword<span class="hl sym">;</span>
  node<span class="hl sym">:</span> ht_pnode<span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  node <span class="hl sym">:=</span> FIter_next<span class="hl sym">;</span>
  <span class="hl kwa">if</span> node <span class="hl sym">&lt;&gt;</span> <span class="hl kwa">nil then</span>
  <span class="hl kwa">begin</span>
    FIter_next <span class="hl sym">:=</span> node<span class="hl sym">^.</span>next<span class="hl sym">;</span>
    result <span class="hl sym">:=</span> node<span class="hl sym">;</span>
    exit<span class="hl sym">;</span>
  <span class="hl kwa">end else begin</span>
    <span class="hl kwa">while</span> FIter_index <span class="hl sym">&lt;</span> FSize <span class="hl kwa">do</span>
    <span class="hl kwa">begin</span>
      index <span class="hl sym">:=</span> FIter_index<span class="hl sym">;</span>
      <span class="hl kwd">inc</span><span class="hl sym">(</span>FIter_index<span class="hl sym">);</span>
      <span class="hl kwa">if</span> FTbl<span class="hl sym">[</span>index<span class="hl sym">] &lt;&gt;</span> <span class="hl kwa">nil then</span>
      <span class="hl kwa">begin</span>
        FIter_next <span class="hl sym">:=</span> FTbl<span class="hl sym">[</span>index<span class="hl sym">]^.</span>next<span class="hl sym">;</span>
        result <span class="hl sym">:=</span> FTbl<span class="hl sym">[</span>index<span class="hl sym">];</span>
        exit<span class="hl sym">;</span>
      <span class="hl kwa">end</span><span class="hl sym">;</span>
    <span class="hl kwa">end</span><span class="hl sym">;</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>
  result <span class="hl sym">:=</span> <span class="hl kwa">nil</span><span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl com">{==============================================================================}</span>

<span class="hl kwa">type</span>
   sorter      <span class="hl sym">=</span> <span class="hl kwa">record</span>
		   sequence <span class="hl sym">:</span> ansistring<span class="hl sym">;</span>
		   num	     <span class="hl sym">:</span> <span class="hl kwb">longint</span><span class="hl sym">;</span>
		 <span class="hl kwa">end</span><span class="hl sym">;</span>
   sorterArray <span class="hl sym">=</span> <span class="hl kwa">array of</span> sorter<span class="hl sym">;</span>

<span class="hl kwa">function</span> <span class="hl kwd">hash_table_size</span> <span class="hl sym">(</span>fl <span class="hl sym">:</span> dword<span class="hl sym">):</span> dword<span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  <span class="hl kwa">if</span> fl<span class="hl sym">&lt;</span><span class="hl num">8</span> <span class="hl kwa">then</span>
   hash_table_size <span class="hl sym">:=</span> <span class="hl num">1</span> <span class="hl kwa">shl</span> <span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> fl<span class="hl sym">)</span>
  <span class="hl kwa">else</span>
   hash_table_size <span class="hl sym">:=</span> <span class="hl num">$10000</span><span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">;</span> <span class="hl com">{ hash_table_size }</span>

<span class="hl kwa">function</span> <span class="hl kwd">generate_frequencies</span><span class="hl sym">(</span>fl<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">;</span> buffer<span class="hl sym">:</span> PChar<span class="hl sym">;</span> buflen <span class="hl sym">:</span> <span class="hl kwb">longint</span><span class="hl sym">):</span> THashTable<span class="hl sym">;</span>
<span class="hl kwa">var</span>
   reader <span class="hl sym">:</span> PChar<span class="hl sym">;</span>
   i <span class="hl sym">:</span> <span class="hl kwb">longint</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
   <span class="hl kwa">if</span> fl <span class="hl sym">&lt;=</span> buflen <span class="hl kwa">then</span>
   <span class="hl kwa">begin</span>
      result <span class="hl sym">:=</span> THashTable<span class="hl sym">.</span><span class="hl kwd">Create</span><span class="hl sym">(</span><span class="hl kwd">hash_table_size</span> <span class="hl sym">(</span>fl<span class="hl sym">),</span> fl<span class="hl sym">);</span>
      reader <span class="hl sym">:=</span> buffer<span class="hl sym">;</span>
      <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> buflen<span class="hl sym">-</span>fl <span class="hl kwa">do</span>
      <span class="hl kwa">begin</span>
         <span class="hl kwd">inc</span><span class="hl sym">(</span>Result<span class="hl sym">.</span><span class="hl kwd">FindNew</span><span class="hl sym">(</span>reader<span class="hl sym">)^.</span>val<span class="hl sym">);</span>
         <span class="hl kwd">inc</span><span class="hl sym">(</span>reader<span class="hl sym">);</span>
      <span class="hl kwa">end</span><span class="hl sym">;</span>
   <span class="hl kwa">end else</span>
      result <span class="hl sym">:=</span> <span class="hl kwa">nil</span><span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">;</span> <span class="hl com">{ generate_frequencies }</span>

<span class="hl kwa">procedure</span> <span class="hl kwd">sortArray</span><span class="hl sym">(</span><span class="hl kwa">var</span> s <span class="hl sym">:</span> sorterArray<span class="hl sym">;</span> size<span class="hl sym">:</span><span class="hl kwb">longint</span><span class="hl sym">);</span>
<span class="hl kwa">var</span>
   i<span class="hl sym">,</span>j <span class="hl sym">:</span> <span class="hl kwb">longint</span><span class="hl sym">;</span>
   tmp <span class="hl sym">:</span> sorter<span class="hl sym">;</span>
<span class="hl kwa">begin</span>
   <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> size<span class="hl sym">-</span><span class="hl num">2</span> <span class="hl kwa">do</span>
      <span class="hl kwa">for</span> j <span class="hl sym">:=</span> i<span class="hl sym">+</span><span class="hl num">1</span> <span class="hl kwa">to</span> size<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl kwa">do</span>
         <span class="hl kwa">if</span> s<span class="hl sym">[</span>i<span class="hl sym">].</span>num <span class="hl sym">&lt;</span> s<span class="hl sym">[</span>j<span class="hl sym">].</span>num <span class="hl kwa">then</span>
	 <span class="hl kwa">begin</span>
	    tmp <span class="hl sym">:=</span> s<span class="hl sym">[</span>i<span class="hl sym">];</span>
	    s<span class="hl sym">[</span>i<span class="hl sym">] :=</span> s<span class="hl sym">[</span>j<span class="hl sym">];</span>
	    s<span class="hl sym">[</span>j<span class="hl sym">] :=</span> tmp<span class="hl sym">;</span>
	 <span class="hl kwa">end</span><span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">;</span> <span class="hl com">{ sortArray }</span>

<span class="hl kwa">procedure</span> <span class="hl kwd">write_frequencies</span><span class="hl sym">(</span>fl <span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">;</span> buffer <span class="hl sym">:</span> PChar<span class="hl sym">;</span> buflen <span class="hl sym">:</span> <span class="hl kwb">longint</span><span class="hl sym">);</span>
<span class="hl kwa">var</span>
  ht	   <span class="hl sym">:</span> THashTable<span class="hl sym">;</span>
  i<span class="hl sym">,</span> size <span class="hl sym">:</span> <span class="hl kwb">longint</span><span class="hl sym">;</span>
  total   <span class="hl sym">:</span> <span class="hl kwb">real</span><span class="hl sym">;</span>
  nd	   <span class="hl sym">:</span> ht_pnode<span class="hl sym">;</span>
  s	   <span class="hl sym">:</span> sorterArray<span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  ht <span class="hl sym">:=</span> <span class="hl kwd">generate_frequencies</span><span class="hl sym">(</span>fl<span class="hl sym">,</span> buffer<span class="hl sym">,</span> buflen<span class="hl sym">);</span>
  total <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
  size <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
  nd <span class="hl sym">:=</span> ht<span class="hl sym">.</span>First<span class="hl sym">;</span>
  <span class="hl kwa">while</span> <span class="hl sym">(</span>nd <span class="hl sym">&lt;&gt;</span> <span class="hl kwa">nil</span><span class="hl sym">)</span> <span class="hl kwa">do</span>
  <span class="hl kwa">begin</span>
    total <span class="hl sym">:=</span> total <span class="hl sym">+</span> nd<span class="hl sym">^.</span>val<span class="hl sym">;</span>
    size <span class="hl sym">:=</span> size <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
    nd <span class="hl sym">:=</span> ht<span class="hl sym">.</span>Next<span class="hl sym">;</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>
  <span class="hl kwd">SetLength</span><span class="hl sym">(</span>s<span class="hl sym">,</span> size<span class="hl sym">);</span>

  nd <span class="hl sym">:=</span> ht<span class="hl sym">.</span>First<span class="hl sym">;</span>
  size <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
  <span class="hl kwa">while</span> <span class="hl sym">(</span>nd <span class="hl sym">&lt;&gt;</span> <span class="hl kwa">nil</span><span class="hl sym">)</span> <span class="hl kwa">do</span>
  <span class="hl kwa">begin</span>
    s<span class="hl sym">[</span>size<span class="hl sym">].</span>sequence <span class="hl sym">:=</span> <span class="hl kwd">upcase</span><span class="hl sym">(</span><span class="hl kwd">pchar</span><span class="hl sym">(&#64;</span>nd<span class="hl sym">^.</span>keydata<span class="hl sym">));</span>
    s<span class="hl sym">[</span>size<span class="hl sym">].</span>num <span class="hl sym">:=</span> nd<span class="hl sym">^.</span>val<span class="hl sym">;</span>
    size <span class="hl sym">:=</span> size <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
    nd <span class="hl sym">:=</span> ht<span class="hl sym">.</span>Next<span class="hl sym">;</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>

  <span class="hl kwd">sortArray</span><span class="hl sym">(</span>s<span class="hl sym">,</span> size<span class="hl sym">);</span>
  <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> size <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl kwa">do</span>
    <span class="hl kwd">writeln</span><span class="hl sym">(</span>s<span class="hl sym">[</span>i<span class="hl sym">].</span>sequence<span class="hl sym">,</span><span class="hl str">' '</span><span class="hl sym">, (</span><span class="hl num">100</span> <span class="hl sym">* (</span>s<span class="hl sym">[</span>i<span class="hl sym">].</span>num <span class="hl sym">/</span> total<span class="hl sym">)):</span><span class="hl num">3</span><span class="hl sym">:</span><span class="hl num">3</span><span class="hl sym">);</span>
  writeln<span class="hl sym">;</span>

  ht<span class="hl sym">.</span>Free<span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">;</span> <span class="hl com">{ write_frequencies }</span>

<span class="hl kwa">procedure</span> <span class="hl kwd">write_count</span><span class="hl sym">(</span>searchFor <span class="hl sym">:</span> ansistring<span class="hl sym">;</span> buffer <span class="hl sym">:</span> PChar<span class="hl sym">;</span> buflen <span class="hl sym">:</span> <span class="hl kwb">longint</span><span class="hl sym">);</span>
<span class="hl kwa">var</span>
   ht <span class="hl sym">:</span> THashTable<span class="hl sym">;</span>
   nd <span class="hl sym">:</span> ht_pnode<span class="hl sym">;</span>
<span class="hl kwa">begin</span>
   ht <span class="hl sym">:=</span> <span class="hl kwd">generate_frequencies</span> <span class="hl sym">(</span><span class="hl kwd">length</span><span class="hl sym">(</span>searchFor<span class="hl sym">),</span> buffer<span class="hl sym">,</span> buflen<span class="hl sym">);</span>
   nd <span class="hl sym">:=</span> ht<span class="hl sym">.</span><span class="hl kwd">Find</span><span class="hl sym">(</span><span class="hl kwd">pchar</span><span class="hl sym">(</span>searchFor<span class="hl sym">));</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span>nd <span class="hl sym">&lt;&gt;</span> <span class="hl kwa">nil</span><span class="hl sym">)</span> <span class="hl kwa">then</span>
      <span class="hl kwd">write</span><span class="hl sym">(</span>nd<span class="hl sym">^.</span>val<span class="hl sym">)</span>
   <span class="hl kwa">else</span>
      <span class="hl kwd">write</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span>
   searchfor <span class="hl sym">:=</span> <span class="hl kwd">UpCase</span><span class="hl sym">(</span>searchFor<span class="hl sym">);</span>
   <span class="hl kwd">writeln</span><span class="hl sym">(</span><span class="hl esc">#9</span><span class="hl sym">,</span> searchFor<span class="hl sym">);</span>

   ht<span class="hl sym">.</span>Free<span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">;</span> <span class="hl com">{ write_count }</span>

<span class="hl kwa">procedure</span> main<span class="hl sym">;</span>
<span class="hl kwa">var</span>
   buffer <span class="hl sym">:</span> PChar<span class="hl sym">;</span>
   len<span class="hl sym">,</span> seqlen <span class="hl sym">:</span> <span class="hl kwb">longint</span><span class="hl sym">;</span>
   buffersize<span class="hl sym">,</span> bufferptr<span class="hl sym">:</span> <span class="hl kwb">longint</span><span class="hl sym">;</span>
   s <span class="hl sym">:</span> <span class="hl kwa">String</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
   seqlen <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">repeat</span>
      <span class="hl kwd">readln</span><span class="hl sym">(</span>s<span class="hl sym">)</span>
   <span class="hl kwa">until</span> <span class="hl sym">(</span>s<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">] =</span> <span class="hl str">'&gt;'</span><span class="hl sym">)</span> <span class="hl kwa">and</span> <span class="hl sym">(</span>s<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">] =</span> <span class="hl str">'T'</span><span class="hl sym">)</span> <span class="hl kwa">and</span> <span class="hl sym">(</span>s<span class="hl sym">[</span><span class="hl num">3</span><span class="hl sym">] =</span> <span class="hl str">'H'</span><span class="hl sym">);</span>
   buffersize<span class="hl sym">:=</span><span class="hl num">1024</span><span class="hl sym">;</span>
   buffer<span class="hl sym">:=</span><span class="hl kwd">getmem</span><span class="hl sym">(</span>buffersize<span class="hl sym">);</span>
   bufferptr <span class="hl sym">:=</span><span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">while not</span> eof <span class="hl kwa">do begin</span>
     <span class="hl kwd">readln</span><span class="hl sym">(</span>s<span class="hl sym">);</span>
     <span class="hl kwa">if</span> <span class="hl sym">(</span>s<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">] &lt;&gt;</span> <span class="hl str">'&gt;'</span><span class="hl sym">)</span> <span class="hl kwa">and</span> <span class="hl sym">(</span>s<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">] &lt;&gt;</span> <span class="hl str">';'</span><span class="hl sym">)</span> <span class="hl kwa">then begin</span>
       len<span class="hl sym">:=</span><span class="hl kwd">length</span><span class="hl sym">(</span>s<span class="hl sym">);</span>
       <span class="hl kwa">if</span> <span class="hl sym">(</span>bufferptr<span class="hl sym">+</span>len<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)&gt;</span>buffersize <span class="hl kwa">then  begin</span>
         <span class="hl kwd">inc</span><span class="hl sym">(</span>buffersize<span class="hl sym">,</span>buffersize<span class="hl sym">);</span>
         <span class="hl kwd">reallocmem</span><span class="hl sym">(</span>buffer<span class="hl sym">,</span>buffersize<span class="hl sym">);</span>
       <span class="hl kwa">end</span><span class="hl sym">;</span>
       <span class="hl kwd">move</span> <span class="hl sym">(</span>s<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">],</span>buffer<span class="hl sym">[</span>bufferptr<span class="hl sym">],</span>len<span class="hl sym">);</span>
       <span class="hl kwd">inc</span><span class="hl sym">(</span>bufferptr<span class="hl sym">,</span>len<span class="hl sym">);</span>
     <span class="hl kwa">end</span><span class="hl sym">;</span>
   <span class="hl kwa">end</span><span class="hl sym">;</span>
   buffer<span class="hl sym">[</span>bufferptr<span class="hl sym">] :=</span> <span class="hl esc">#0</span><span class="hl sym">;</span>
   seqlen <span class="hl sym">:=</span> <span class="hl kwd">strlen</span><span class="hl sym">(</span>buffer<span class="hl sym">);</span>

   <span class="hl kwd">write_frequencies</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> buffer<span class="hl sym">,</span> seqlen<span class="hl sym">);</span>
   <span class="hl kwd">write_frequencies</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">,</span> buffer<span class="hl sym">,</span> seqlen<span class="hl sym">);</span>
   <span class="hl kwd">write_count</span><span class="hl sym">(</span><span class="hl str">'ggt'</span><span class="hl sym">,</span> buffer<span class="hl sym">,</span> seqlen<span class="hl sym">);</span>
   <span class="hl kwd">write_count</span><span class="hl sym">(</span><span class="hl str">'ggta'</span><span class="hl sym">,</span> buffer<span class="hl sym">,</span> seqlen<span class="hl sym">);</span>
   <span class="hl kwd">write_count</span><span class="hl sym">(</span><span class="hl str">'ggtatt'</span><span class="hl sym">,</span> buffer<span class="hl sym">,</span> seqlen<span class="hl sym">);</span>
   <span class="hl kwd">write_count</span><span class="hl sym">(</span><span class="hl str">'ggtattttaatt'</span><span class="hl sym">,</span> buffer<span class="hl sym">,</span> seqlen<span class="hl sym">);</span>
   <span class="hl kwd">write_count</span><span class="hl sym">(</span><span class="hl str">'ggtattttaatttatagt'</span><span class="hl sym">,</span> buffer<span class="hl sym">,</span> seqlen<span class="hl sym">);</span>
   <span class="hl kwd">freemem</span><span class="hl sym">(</span>buffer<span class="hl sym">);</span>
<span class="hl kwa">end</span><span class="hl sym">;</span> <span class="hl com">{ main }</span>


<span class="hl kwa">begin</span>
   <span class="hl slc">//SetPrecisionMode(pmDouble);</span>
   main<span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">.</span>

