<span class="hl com">{-# OPTIONS -fglasgow-exts #-}</span>

<span class="hl com">{-</span>
<span class="hl com">   The Computer Language Shootout</span>
<span class="hl com">      http://shootout.alioth.debian.org/</span>
<span class="hl com">      contributed by Olof Kraigher</span>
<span class="hl com">-}</span>

<span class="hl kwa">module</span> Main <span class="hl kwa">where</span>

<span class="hl kwa">import</span> System<span class="hl sym">(</span>getArgs<span class="hl sym">);</span>      <span class="hl kwa">import</span> Data.List<span class="hl sym">;</span>   <span class="hl kwa">import</span> Data.Bits<span class="hl sym">;</span>      <span class="hl kwa">import</span> Data.Array.IArray<span class="hl sym">;</span>
<span class="hl kwa">import</span> Data.Word<span class="hl sym">(</span>Word64<span class="hl sym">);</span>   <span class="hl kwa">import</span> Data.Maybe<span class="hl sym">;</span>   <span class="hl kwa">import</span> Control.Monad<span class="hl sym">;</span>

<span class="hl kwa">data</span> Direction <span class="hl sym">=</span> E <span class="hl sym">|</span> SE <span class="hl sym">|</span> SW <span class="hl sym">|</span> W <span class="hl sym">|</span> NW <span class="hl sym">|</span> NE <span class="hl kwa">deriving</span> <span class="hl sym">(</span>Enum<span class="hl sym">,</span> Eq<span class="hl sym">,</span> Ord<span class="hl sym">,</span> Show<span class="hl sym">)</span>
<span class="hl kwa">type</span> Piece <span class="hl sym">= [</span>Direction<span class="hl sym">]</span>
<span class="hl kwa">type</span> Cell <span class="hl sym">= (</span><span class="hl kwb">Int</span><span class="hl sym">,</span> <span class="hl kwb">Int</span><span class="hl sym">)</span>
<span class="hl kwa">type</span> Mask <span class="hl sym">=</span> Word64
<span class="hl kwa">type</span> Color <span class="hl sym">=</span> <span class="hl kwb">Int</span>

<span class="hl kwa">class</span> Rotatable a <span class="hl kwa">where</span>
   rot <span class="hl sym">::</span> a <span class="hl sym">-&gt;</span> a

<span class="hl kwa">class</span> Floppable a <span class="hl kwa">where</span>
   flop <span class="hl sym">::</span> a <span class="hl sym">-&gt;</span> a

<span class="hl kwa">class</span> Maskable a <span class="hl kwa">where</span>
   mask <span class="hl sym">::</span> a <span class="hl sym">-&gt;</span> Mask

<span class="hl kwa">instance</span> Rotatable Direction <span class="hl kwa">where</span>
   rot NE <span class="hl sym">=</span> E
   rot d <span class="hl sym">=</span> succ d

<span class="hl kwa">instance</span> Rotatable Piece <span class="hl kwa">where</span>
   rot a <span class="hl sym">=</span> map rot a

<span class="hl kwa">instance</span> Floppable Direction <span class="hl kwa">where</span>
   flop E <span class="hl sym">=</span> W
   flop W <span class="hl sym">=</span> E
   flop SE <span class="hl sym">=</span> SW
   flop SW <span class="hl sym">=</span> SE
   flop NE <span class="hl sym">=</span> NW
   flop NW <span class="hl sym">=</span> NE

<span class="hl kwa">instance</span> Floppable Piece <span class="hl kwa">where</span>
   flop a <span class="hl sym">=</span> map flop a

<span class="hl kwa">instance</span> Maskable Cell <span class="hl kwa">where</span>
   mask <span class="hl sym">(</span>x<span class="hl sym">,</span>y<span class="hl sym">) =</span> bit <span class="hl sym">(</span>x <span class="hl sym">+</span> y<span class="hl sym">*</span>width<span class="hl sym">)</span>

<span class="hl kwa">instance</span> Maskable <span class="hl sym">[</span>Cell<span class="hl sym">]</span> <span class="hl kwa">where</span>
   mask p <span class="hl sym">=</span> foldl' <span class="hl sym">(</span>\a b <span class="hl sym">-&gt;</span> a .<span class="hl sym">|</span>. mask b<span class="hl sym">)</span> <span class="hl num">0</span> p

width <span class="hl sym">::</span> <span class="hl kwb">Int</span>
width <span class="hl sym">=</span> <span class="hl num">5</span>

height <span class="hl sym">::</span> <span class="hl kwb">Int</span>
height <span class="hl sym">=</span> <span class="hl num">10</span>

cells <span class="hl sym">:: [</span>Cell<span class="hl sym">]</span>
cells <span class="hl sym">= [(</span>x<span class="hl sym">,</span>y<span class="hl sym">) |</span> y <span class="hl sym">&lt;- [</span><span class="hl num">0</span>..height<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">],</span> x <span class="hl sym">&lt;- [</span><span class="hl num">0</span>..width<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">]]</span>

fullMask <span class="hl sym">::</span> Mask
fullMask <span class="hl sym">=</span> <span class="hl num">0x3FFFFFFFFFFFF</span>

pieces <span class="hl sym">::</span> Array Color Piece
pieces <span class="hl sym">=</span> array <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">9</span><span class="hl sym">)</span> $ zip <span class="hl sym">[</span><span class="hl num">0</span>.<span class="hl num">.9</span><span class="hl sym">]</span> $
      <span class="hl sym">[   [</span>E<span class="hl sym">,</span>    E<span class="hl sym">,</span>  E<span class="hl sym">,</span>  SE<span class="hl sym">],</span>
         <span class="hl sym">[</span>SE<span class="hl sym">,</span> SW<span class="hl sym">,</span> W<span class="hl sym">,</span>  SW<span class="hl sym">],</span>
         <span class="hl sym">[</span>W<span class="hl sym">,</span>  W<span class="hl sym">,</span>  SW<span class="hl sym">,</span> SE<span class="hl sym">],</span>
         <span class="hl sym">[</span>E<span class="hl sym">,</span>  E<span class="hl sym">,</span>  SW<span class="hl sym">,</span> SE<span class="hl sym">],</span>
         <span class="hl sym">[</span>NW<span class="hl sym">,</span> W<span class="hl sym">,</span>  NW<span class="hl sym">,</span> SE<span class="hl sym">,</span> SW<span class="hl sym">],</span>
         <span class="hl sym">[</span>E<span class="hl sym">,</span>  E<span class="hl sym">,</span>  NE<span class="hl sym">,</span> W<span class="hl sym">],</span>
         <span class="hl sym">[</span>NW<span class="hl sym">,</span> NE<span class="hl sym">,</span> NE<span class="hl sym">,</span> W<span class="hl sym">],</span>
         <span class="hl sym">[</span>NE<span class="hl sym">,</span> SE<span class="hl sym">,</span> E<span class="hl sym">,</span>  NE<span class="hl sym">],</span>
         <span class="hl sym">[</span>SE<span class="hl sym">,</span> SE<span class="hl sym">,</span> E<span class="hl sym">,</span>  SE<span class="hl sym">],</span>
         <span class="hl sym">[</span>E<span class="hl sym">,</span>  NW<span class="hl sym">,</span> NW<span class="hl sym">,</span> NW<span class="hl sym">]]</span>

valid <span class="hl sym">::</span> Cell <span class="hl sym">-&gt;</span> Maybe Cell
valid p<span class="hl sym">&#64;(</span>x<span class="hl sym">,</span>y<span class="hl sym">)</span>
   <span class="hl sym">|</span> <span class="hl num">0</span> <span class="hl sym">&lt;=</span> x<span class="hl sym">,</span> x <span class="hl sym">&lt;</span> width<span class="hl sym">,</span> <span class="hl num">0</span> <span class="hl sym">&lt;=</span> y<span class="hl sym">,</span> y <span class="hl sym">&lt;</span> height <span class="hl sym">=</span> Just p
   <span class="hl sym">|</span>otherwise <span class="hl sym">=</span> Nothing

move <span class="hl sym">::</span> Cell <span class="hl sym">-&gt;</span> Direction <span class="hl sym">-&gt;</span> Maybe Cell
move <span class="hl sym">(</span>x<span class="hl sym">,</span>y<span class="hl sym">)</span> E <span class="hl sym">=</span> valid <span class="hl sym">(</span>x<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span>y<span class="hl sym">)</span>
move <span class="hl sym">(</span>x<span class="hl sym">,</span>y<span class="hl sym">)</span> W <span class="hl sym">=</span> valid <span class="hl sym">(</span>x<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span>y<span class="hl sym">)</span>
move <span class="hl sym">(</span>x<span class="hl sym">,</span>y<span class="hl sym">)</span> NE <span class="hl sym">=</span> valid <span class="hl sym">(</span>x<span class="hl sym">+(</span>mod y <span class="hl num">2</span><span class="hl sym">),</span>y<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
move <span class="hl sym">(</span>x<span class="hl sym">,</span>y<span class="hl sym">)</span> NW <span class="hl sym">=</span> valid <span class="hl sym">(</span>x<span class="hl sym">+(</span>mod y <span class="hl num">2</span><span class="hl sym">)-</span><span class="hl num">1</span><span class="hl sym">,</span>y<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
move <span class="hl sym">(</span>x<span class="hl sym">,</span>y<span class="hl sym">)</span> SE <span class="hl sym">=</span> valid <span class="hl sym">(</span>x<span class="hl sym">+(</span>mod y <span class="hl num">2</span><span class="hl sym">),</span>y<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>
move <span class="hl sym">(</span>x<span class="hl sym">,</span>y<span class="hl sym">)</span> SW <span class="hl sym">=</span> valid <span class="hl sym">(</span>x<span class="hl sym">+(</span>mod y <span class="hl num">2</span><span class="hl sym">)-</span><span class="hl num">1</span><span class="hl sym">,</span>y<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>

overlap <span class="hl sym">::</span> Mask <span class="hl sym">-&gt;</span> Mask <span class="hl sym">-&gt;</span> <span class="hl kwb">Bool</span>
overlap a b <span class="hl sym">= (</span>a .<span class="hl sym">&amp;</span>. b<span class="hl sym">) /=</span> <span class="hl num">0</span>

bitCount <span class="hl sym">::</span> Mask <span class="hl sym">-&gt;</span> <span class="hl kwb">Int</span>
bitCount <span class="hl num">0</span> <span class="hl sym">=</span> <span class="hl num">0</span>
bitCount mask <span class="hl sym">= (</span>fromIntegral $ <span class="hl sym">(</span>mask .<span class="hl sym">&amp;</span>. <span class="hl num">1</span><span class="hl sym">)) + (</span>bitCount <span class="hl sym">(</span>shiftR mask <span class="hl num">1</span><span class="hl sym">))</span>

floodFill <span class="hl sym">::</span> Mask <span class="hl sym">-&gt;</span> Cell <span class="hl sym">-&gt;</span> Mask
floodFill mask cell<span class="hl sym">&#64;(</span>x<span class="hl sym">,</span>y<span class="hl sym">)</span>
   <span class="hl sym">|</span> overlap mask <span class="hl sym">(</span>bit $ x <span class="hl sym">+</span> y<span class="hl sym">*</span>width<span class="hl sym">) =</span> mask
   <span class="hl sym">|</span> otherwise <span class="hl sym">=</span>
      <span class="hl kwa">let</span> mask' <span class="hl sym">=</span> mask .<span class="hl sym">|</span>. <span class="hl sym">(</span>bit $ x <span class="hl sym">+</span> y<span class="hl sym">*</span>width<span class="hl sym">)</span>
      <span class="hl kwa">in</span>   foldl' floodFill mask' $ mapMaybe <span class="hl sym">(</span>move cell<span class="hl sym">) [</span>E .. NE<span class="hl sym">]</span>

findFreeCell <span class="hl sym">::</span> Mask <span class="hl sym">-&gt;</span> Cell
findFreeCell mask <span class="hl sym">=</span>
   fromJust $ find <span class="hl sym">(</span>\<span class="hl sym">(</span>x<span class="hl sym">,</span>y<span class="hl sym">) -&gt;</span> not $ overlap mask <span class="hl sym">(</span>bit $ x <span class="hl sym">+</span> y<span class="hl sym">*</span>width<span class="hl sym">))</span> cells

noIslands <span class="hl sym">::</span> Mask <span class="hl sym">-&gt;</span> <span class="hl kwb">Bool</span>
noIslands mask <span class="hl sym">=</span> not $ any <span class="hl sym">(&lt;</span><span class="hl num">5</span><span class="hl sym">)</span> $ diffs $ noIslands' mask <span class="hl kwa">where</span>
   noIslands' mask
      <span class="hl sym">|</span> mask <span class="hl sym">==</span> fullMask <span class="hl sym">= [</span>bitCount mask<span class="hl sym">]</span>
      <span class="hl sym">|</span> otherwise <span class="hl sym">= (</span>bitCount mask<span class="hl sym">) : (</span>noIslands' $ floodFill mask $ findFreeCell mask<span class="hl sym">)</span>
   diffs l <span class="hl sym">=</span> zipWith <span class="hl sym">(-) (</span>tail l<span class="hl sym">)</span> l


placePiece <span class="hl sym">::</span> Piece <span class="hl sym">-&gt;</span> Cell <span class="hl sym">-&gt;</span> Maybe <span class="hl sym">[</span>Cell<span class="hl sym">]</span>
placePiece <span class="hl sym">[]</span> cell <span class="hl sym">=</span> Just <span class="hl sym">[</span>cell<span class="hl sym">]</span>
placePiece <span class="hl sym">(</span>p<span class="hl sym">:</span>ps<span class="hl sym">)</span> cell <span class="hl sym">=</span> move cell p <span class="hl sym">&gt;&gt;= (</span>placePiece ps<span class="hl sym">) &gt;&gt;=</span> return . <span class="hl sym">(</span>cell<span class="hl sym">:)</span>

pieceMasks <span class="hl sym">::</span> Array Color <span class="hl sym">[</span>Mask<span class="hl sym">]</span>
pieceMasks <span class="hl sym">=</span> amap pieceMasks' pieces <span class="hl kwa">where</span>
   pieceMasks' piece
      <span class="hl sym">|</span> piece <span class="hl sym">== (</span>pieces<span class="hl sym">!</span><span class="hl num">5</span><span class="hl sym">) =</span> <span class="hl kwa">do</span>
         piece' <span class="hl sym">&lt;- (</span>take <span class="hl num">3</span> $ iterate rot piece<span class="hl sym">) ++ (</span>take <span class="hl num">3</span> $ iterate rot $ flop $ piece<span class="hl sym">)</span>
         filter noIslands $ map mask $ mapMaybe <span class="hl sym">(</span>placePiece piece'<span class="hl sym">)</span> cells

      <span class="hl sym">|</span> otherwise <span class="hl sym">=</span> <span class="hl kwa">do</span>
         piece' <span class="hl sym">&lt;- (</span>take <span class="hl num">6</span> $ iterate rot piece<span class="hl sym">) ++ (</span>take <span class="hl num">6</span> $ iterate rot $ flop $ piece<span class="hl sym">)</span>
         filter noIslands $ map mask $ mapMaybe <span class="hl sym">(</span>placePiece piece'<span class="hl sym">)</span> cells

pieceMasksAtCell <span class="hl sym">::</span> Array Color <span class="hl sym">(</span>Array Cell <span class="hl sym">[</span>Mask<span class="hl sym">])</span>
pieceMasksAtCell <span class="hl sym">=</span> amap pieceMasksAtCell' pieceMasks <span class="hl kwa">where</span>
   pieceMasksAtCell' masks <span class="hl sym">=</span> array <span class="hl sym">((</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">),(</span>width<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span>height<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">))</span> $ pieceMasksAtCell'' masks cells <span class="hl kwa">where</span>
      pieceMasksAtCell'' masks <span class="hl sym">[] = []</span>
      pieceMasksAtCell'' masks <span class="hl sym">(</span>c<span class="hl sym">:</span>cs<span class="hl sym">) =</span>
         <span class="hl kwa">let</span> <span class="hl sym">(</span>a<span class="hl sym">,</span>b<span class="hl sym">) =</span> partition <span class="hl sym">(</span>overlap <span class="hl sym">(</span>mask c<span class="hl sym">))</span> masks
         <span class="hl kwa">in</span> <span class="hl sym">(</span>c<span class="hl sym">,</span>a<span class="hl sym">) : (</span>pieceMasksAtCell'' b cs<span class="hl sym">)</span>

nextCell <span class="hl sym">::</span> Cell <span class="hl sym">-&gt;</span> Cell
nextCell <span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">,</span>y<span class="hl sym">) = (</span><span class="hl num">0</span><span class="hl sym">,</span>y<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>
nextCell <span class="hl sym">(</span>x<span class="hl sym">,</span>y<span class="hl sym">) =  (</span>x<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span>y<span class="hl sym">)</span>

solutions <span class="hl sym">:: [</span>String<span class="hl sym">]</span>
solutions <span class="hl sym">=</span> solutions' <span class="hl num">0</span> <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">) [</span><span class="hl num">0</span>.<span class="hl num">.9</span><span class="hl sym">] []</span> <span class="hl kwa">where</span>

   solutions' <span class="hl sym">::</span> Mask <span class="hl sym">-&gt;</span> Cell <span class="hl sym">-&gt; [</span>Color<span class="hl sym">] -&gt; [(</span>Color<span class="hl sym">,</span> Mask<span class="hl sym">)]-&gt; [</span>String<span class="hl sym">]</span>
   solutions' _ _ <span class="hl sym">[]</span> usedMasks <span class="hl sym">=</span>    <span class="hl kwa">let</span> s <span class="hl sym">=</span> stringOfColorMasks usedMasks <span class="hl kwa">in</span>   <span class="hl sym">[</span>s<span class="hl sym">,</span> invertString s<span class="hl sym">]</span>
   solutions' board cell colorsLeft usedMasks
      <span class="hl sym">|</span> overlap board <span class="hl sym">(</span>mask cell<span class="hl sym">) =</span> solutions' board <span class="hl sym">(</span>nextCell cell<span class="hl sym">)</span> colorsLeft usedMasks
      <span class="hl sym">|</span> otherwise <span class="hl sym">=</span> <span class="hl kwa">do</span>
         color <span class="hl sym">&lt;-</span> colorsLeft
         mask <span class="hl sym">&lt;-</span> filter <span class="hl sym">(</span>not.<span class="hl sym">(</span>overlap board<span class="hl sym">))</span> $ pieceMasksAtCell<span class="hl sym">!</span>color<span class="hl sym">!</span>cell
         solutions' <span class="hl sym">(</span>board .<span class="hl sym">|</span>. mask<span class="hl sym">) (</span>nextCell cell<span class="hl sym">) (</span>colorsLeft \\ <span class="hl sym">[</span>color<span class="hl sym">]) ((</span>color<span class="hl sym">,</span> mask<span class="hl sym">):</span>usedMasks<span class="hl sym">)</span>

stringOfColorMasks <span class="hl sym">:: [(</span>Color<span class="hl sym">,</span> Mask<span class="hl sym">)] -&gt;</span> String
stringOfColorMasks colorMasks <span class="hl sym">=</span>
   tail.show.<span class="hl sym">(+</span><span class="hl num">10</span>^<span class="hl sym">(</span>width<span class="hl sym">*</span>height<span class="hl sym">))</span>.sum $ map <span class="hl sym">(</span>\<span class="hl sym">(</span>c<span class="hl sym">,</span>m<span class="hl sym">) -&gt; (</span>fromIntegral c<span class="hl sym">) * (</span>binToDec m<span class="hl sym">))</span> colorMasks <span class="hl kwa">where</span>
   binToDec <span class="hl sym">::</span> Mask <span class="hl sym">-&gt;</span> Integer
   binToDec <span class="hl num">0</span> <span class="hl sym">=</span> <span class="hl num">0</span>
   binToDec n <span class="hl sym">= (</span>fromIntegral <span class="hl sym">(</span>mod n <span class="hl num">2</span><span class="hl sym">)) +</span> <span class="hl num">10</span><span class="hl sym">*(</span>binToDec $ div n <span class="hl num">2</span><span class="hl sym">)</span>

invertString <span class="hl sym">::</span> String <span class="hl sym">-&gt;</span> String
invertString s <span class="hl sym">=</span> map <span class="hl sym">(</span>\<span class="hl sym">(</span>x<span class="hl sym">,</span>y<span class="hl sym">) -&gt;</span> s<span class="hl sym">!!(</span>width<span class="hl sym">-</span>x<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl sym">+ (</span>height<span class="hl sym">-</span>y<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)*</span>width<span class="hl sym">))</span> cells

printSolution <span class="hl sym">::</span> String <span class="hl sym">-&gt;</span> IO <span class="hl sym">()</span>
printSolution solution <span class="hl sym">=</span> printSolution' <span class="hl num">0</span> solution <span class="hl kwa">where</span>
   printSolution' cell <span class="hl sym">[] =</span> return <span class="hl sym">()</span>
   printSolution' cell <span class="hl sym">(</span>s<span class="hl sym">:</span>ss<span class="hl sym">) =</span> <span class="hl kwa">do</span>
      putStr $ s<span class="hl sym">:</span><span class="hl str">&quot; &quot;</span>
      <span class="hl kwa">case</span> mod <span class="hl sym">(</span>cell<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span> width <span class="hl kwa">of</span>
         <span class="hl num">0</span> <span class="hl sym">-&gt;</span> <span class="hl kwa">case</span> mod <span class="hl sym">(</span>cell<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) (</span><span class="hl num">2</span><span class="hl sym">*</span>width<span class="hl sym">)</span> <span class="hl kwa">of</span>
            <span class="hl num">0</span> <span class="hl sym">-&gt;</span> putStr <span class="hl str">&quot;\n&quot;</span>
            _ <span class="hl sym">-&gt;</span> putStr <span class="hl str">&quot;\n &quot;</span>
         _ <span class="hl sym">-&gt;</span> return <span class="hl sym">()</span>

      printSolution' <span class="hl sym">(</span>cell<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span> ss

main <span class="hl sym">=</span> <span class="hl kwa">do</span>
   <span class="hl sym">(</span>n <span class="hl sym">::</span> <span class="hl kwb">Int</span><span class="hl sym">) &lt;-</span> return.read.head <span class="hl sym">=&lt;&lt;</span> getArgs
   <span class="hl kwa">let</span> nsolutions <span class="hl sym">=</span> take n solutions
   putStrLn $ <span class="hl sym">(</span>show $ length nsolutions<span class="hl sym">) ++</span> <span class="hl str">&quot; solutions found\n&quot;</span>
   printSolution $ minimum nsolutions
   putStr <span class="hl str">&quot;\n&quot;</span>
   printSolution $ maximum nsolutions
   putStr <span class="hl str">&quot;\n&quot;</span>
