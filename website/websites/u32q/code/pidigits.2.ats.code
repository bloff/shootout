<span class="hl com">(*</span>
<span class="hl com">** The Computer Language Benchmarks Game</span>
<span class="hl com">** http://shootout.alioth.debian.org/</span>
<span class="hl com">**</span>
<span class="hl com">** contributed by Hongwei Xi</span>
<span class="hl com">**</span>
<span class="hl com">** This code is a direct translation from a C submission by</span>
<span class="hl com">** Sean Bartell, which is based on the Scheme PLT #4 version</span>
<span class="hl com">**</span>
<span class="hl com">** compilation command:</span>
<span class="hl com">**   atscc -O3 -fomit-frame-pointer pidigits2.dats -o pidigits2 -lgmp</span>
<span class="hl com">*)</span>

<span class="hl com">(* ****** ****** *)</span>

staload <span class="hl str">&quot;libc/SATS/gmp.sats&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">var</span> tmp<span class="hl sym">:</span> mpz_vt <span class="hl kwa">with</span> pf_tmp
<span class="hl kwa">viewdef</span> v_tmp <span class="hl sym">=</span> mpz_vt &#64; tmp
<span class="hl kwa">val</span> <span class="hl sym">() =</span> mpz_init <span class="hl sym">(</span>tmp<span class="hl sym">)</span>

<span class="hl kwa">var</span> acc<span class="hl sym">:</span> mpz_vt <span class="hl kwa">with</span> pf_acc
<span class="hl kwa">viewdef</span> v_acc <span class="hl sym">=</span> mpz_vt &#64; acc
<span class="hl kwa">val</span> <span class="hl sym">() =</span> mpz_init_set <span class="hl sym">(</span>acc<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">)</span>

<span class="hl kwa">var</span> num<span class="hl sym">:</span> mpz_vt <span class="hl kwa">with</span> pf_num
<span class="hl kwa">viewdef</span> v_num <span class="hl sym">=</span> mpz_vt &#64; num
<span class="hl kwa">val</span> <span class="hl sym">() =</span> mpz_init_set <span class="hl sym">(</span>num<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">)</span>

<span class="hl kwa">var</span> den<span class="hl sym">:</span> mpz_vt <span class="hl kwa">with</span> pf_den
<span class="hl kwa">viewdef</span> v_den <span class="hl sym">=</span> mpz_vt &#64; den
<span class="hl kwa">val</span> <span class="hl sym">() =</span> mpz_init_set <span class="hl sym">(</span>den<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">viewdef</span> v_all <span class="hl sym">=</span> &#64;<span class="hl sym">(</span>v_tmp<span class="hl sym">,</span> v_acc<span class="hl sym">,</span> v_num<span class="hl sym">,</span> v_den<span class="hl sym">)</span>
<span class="hl kwa">prval</span> pf_all <span class="hl sym">=</span> &#64;<span class="hl sym">(</span>pf_tmp<span class="hl sym">,</span> pf_acc<span class="hl sym">,</span> pf_num<span class="hl sym">,</span> pf_den<span class="hl sym">)</span>
<span class="hl kwa">prval</span> pfbox_all <span class="hl sym">=</span>
  vbox_make <span class="hl sym">{</span>v_all<span class="hl sym">} (</span>pf_all<span class="hl sym">)</span> <span class="hl kwa">where</span> <span class="hl sym">{</span>
  <span class="hl kwa">extern prfun</span> vbox_make <span class="hl sym">{</span>v<span class="hl sym">:</span>view<span class="hl sym">} (</span>pf<span class="hl sym">:</span> v<span class="hl sym">):</span> vbox <span class="hl sym">(</span>v<span class="hl sym">)</span>
<span class="hl sym">} //</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span><span class="hl kwa">val</span><span class="hl sym">]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">fn</span> extract_digit <span class="hl sym">(</span>
    pf_tmp<span class="hl sym">: !</span>v_tmp<span class="hl sym">,</span> pf_acc<span class="hl sym">: !</span>v_acc<span class="hl sym">,</span> pf_num<span class="hl sym">: !</span>v_num<span class="hl sym">,</span> pf_den<span class="hl sym">: !</span>v_den
  <span class="hl sym">|</span> nth<span class="hl sym">:</span> uint
  <span class="hl sym">) :&lt;</span><span class="hl com">(*pure*)</span><span class="hl sym">&gt;</span> uint <span class="hl sym">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> <span class="hl kwa">begin</span>
    mpz_mul <span class="hl sym">(</span>tmp<span class="hl sym">,</span> num<span class="hl sym">,</span> nth<span class="hl sym">);</span> mpz_add <span class="hl sym">(</span>tmp<span class="hl sym">,</span> acc<span class="hl sym">);</span> mpz_tdiv_q <span class="hl sym">(</span>tmp<span class="hl sym">,</span> den<span class="hl sym">)</span>
  <span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span><span class="hl kwa">val</span><span class="hl sym">]</span>
<span class="hl kwa">in</span>
  mpz_get_uint <span class="hl sym">(</span>tmp<span class="hl sym">)</span>
<span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>extract_digit<span class="hl sym">]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">fn</span> next_term <span class="hl sym">(</span>
    pf_tmp<span class="hl sym">: !</span>v_tmp<span class="hl sym">,</span> pf_acc<span class="hl sym">: !</span>v_acc<span class="hl sym">,</span> pf_num<span class="hl sym">: !</span>v_num<span class="hl sym">,</span> pf_den<span class="hl sym">: !</span>v_den
  <span class="hl sym">|</span> k<span class="hl sym">:</span> uint
  <span class="hl sym">) :&lt;</span><span class="hl com">(*pure*)</span><span class="hl sym">&gt;</span> void <span class="hl sym">= ()</span> <span class="hl kwa">where</span> <span class="hl sym">{</span>
  <span class="hl kwa">val</span> y2 <span class="hl sym">=</span> k <span class="hl sym">*</span> <span class="hl num">2U</span> <span class="hl sym">+</span> <span class="hl num">1U</span> <span class="hl com">(* : uint *)</span><span class="hl sym">;</span> <span class="hl kwa">val</span> <span class="hl sym">() =</span> <span class="hl kwa">begin</span>
    mpz_addmul <span class="hl sym">(</span>acc<span class="hl sym">,</span> num<span class="hl sym">,</span> <span class="hl num">2U</span><span class="hl sym">);</span> mpz_mul <span class="hl sym">(</span>acc<span class="hl sym">,</span> y2<span class="hl sym">);</span> mpz_mul <span class="hl sym">(</span>num<span class="hl sym">,</span> k<span class="hl sym">);</span> mpz_mul <span class="hl sym">(</span>den<span class="hl sym">,</span> y2<span class="hl sym">)</span>
  <span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span><span class="hl kwa">val</span><span class="hl sym">]</span>
<span class="hl sym">} //</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>next_term<span class="hl sym">]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">fn</span> eliminate_digit <span class="hl sym">(</span>
    pf_acc<span class="hl sym">: !</span>v_acc<span class="hl sym">,</span> pf_num<span class="hl sym">: !</span>v_num<span class="hl sym">,</span> pf_den<span class="hl sym">: !</span>v_den <span class="hl sym">|</span> d<span class="hl sym">:</span> uint
  <span class="hl sym">) :&lt;</span><span class="hl com">(*pure*)</span><span class="hl sym">&gt;</span> void <span class="hl sym">= ()</span> <span class="hl kwa">where</span> <span class="hl sym">{</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> <span class="hl kwa">begin</span>
    mpz_submul <span class="hl sym">(</span>acc<span class="hl sym">,</span> den<span class="hl sym">,</span> d<span class="hl sym">);</span> mpz_mul <span class="hl sym">(</span>acc<span class="hl sym">,</span> <span class="hl num">10</span><span class="hl sym">);</span> mpz_mul <span class="hl sym">(</span>num<span class="hl sym">,</span> <span class="hl num">10</span><span class="hl sym">)</span>
  <span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span><span class="hl kwa">val</span><span class="hl sym">]</span>
<span class="hl sym">} //</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>eliminate_digit<span class="hl sym">]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">fn</span> pidigits <span class="hl sym">(</span>
    pf_tmp<span class="hl sym">: !</span>v_tmp<span class="hl sym">,</span> pf_acc<span class="hl sym">: !</span>v_acc<span class="hl sym">,</span> pf_num<span class="hl sym">: !</span>v_num<span class="hl sym">,</span> pf_den<span class="hl sym">: !</span>v_den
  <span class="hl sym">|</span> n<span class="hl sym">:</span> int
  <span class="hl sym">) :</span> void <span class="hl sym">= ()</span> <span class="hl kwa">where</span> <span class="hl sym">{</span>
  <span class="hl kwa">var</span> i<span class="hl sym">:</span> int <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">and</span> m<span class="hl sym">:</span> int <span class="hl sym">=</span> <span class="hl num">0</span>
  <span class="hl kwa">var</span> d<span class="hl sym">:</span> uint <span class="hl kwa">with</span> pf_d <span class="hl sym">=</span> <span class="hl num">0U</span> <span class="hl kwa">and</span> k<span class="hl sym">:</span> uint <span class="hl kwa">with</span> pf_k <span class="hl sym">=</span> <span class="hl num">0U</span>
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> <span class="hl kwa">while</span> <span class="hl sym">(</span>true<span class="hl sym">)</span> <span class="hl kwa">let</span>
    <span class="hl kwa">fun</span> loop <span class="hl sym">(</span>
        pf_tmp<span class="hl sym">: !</span>v_tmp<span class="hl sym">,</span> pf_acc<span class="hl sym">: !</span>v_acc<span class="hl sym">,</span> pf_num<span class="hl sym">: !</span>v_num<span class="hl sym">,</span> pf_den<span class="hl sym">: !</span>v_den
      <span class="hl sym">,</span> pf_k<span class="hl sym">: !</span>uint &#64; k<span class="hl sym">,</span> pf_d<span class="hl sym">: !</span>uint &#64; d
      <span class="hl sym">|</span> <span class="hl com">(*none*)</span>
      <span class="hl sym">) :&lt;</span>cloref1<span class="hl sym">&gt;</span> void <span class="hl sym">=</span> <span class="hl kwa">let</span>
      <span class="hl kwa">val</span> <span class="hl sym">() =</span> k <span class="hl sym">:=</span> k <span class="hl sym">+</span> <span class="hl num">1U</span>
      <span class="hl kwa">val</span> <span class="hl sym">() =</span> next_term <span class="hl sym">(</span>pf_tmp<span class="hl sym">,</span> pf_acc<span class="hl sym">,</span> pf_num<span class="hl sym">,</span> pf_den <span class="hl sym">|</span> k<span class="hl sym">)</span>
      <span class="hl kwa">val</span> sgn <span class="hl sym">=</span> mpz_cmp <span class="hl sym">(</span>num<span class="hl sym">,</span> acc<span class="hl sym">)</span>
    <span class="hl kwa">in</span>
      <span class="hl kwa">if</span> sgn <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span> loop
        <span class="hl sym">(</span>pf_tmp<span class="hl sym">,</span> pf_acc<span class="hl sym">,</span> pf_num<span class="hl sym">,</span> pf_den<span class="hl sym">,</span> pf_k<span class="hl sym">,</span> pf_d <span class="hl sym">|</span> <span class="hl com">(*none*)</span><span class="hl sym">)</span>
      <span class="hl kwa">else let</span>
        <span class="hl kwa">val</span> <span class="hl sym">() =</span>
          d <span class="hl sym">:=</span> extract_digit <span class="hl sym">(</span>pf_tmp<span class="hl sym">,</span> pf_acc<span class="hl sym">,</span> pf_num<span class="hl sym">,</span> pf_den <span class="hl sym">|</span> <span class="hl num">3U</span><span class="hl sym">)</span>
        <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span><span class="hl kwa">val</span><span class="hl sym">]</span>
        <span class="hl kwa">val</span> d4 <span class="hl sym">=</span> extract_digit <span class="hl sym">(</span>pf_tmp<span class="hl sym">,</span> pf_acc<span class="hl sym">,</span> pf_num<span class="hl sym">,</span> pf_den <span class="hl sym">|</span> <span class="hl num">4U</span><span class="hl sym">)</span>
      <span class="hl kwa">in</span>
        <span class="hl kwa">if</span> d <span class="hl sym">&lt;&gt;</span> d4 <span class="hl kwa">then</span> loop
          <span class="hl sym">(</span>pf_tmp<span class="hl sym">,</span> pf_acc<span class="hl sym">,</span> pf_num<span class="hl sym">,</span> pf_den<span class="hl sym">,</span> pf_k<span class="hl sym">,</span> pf_d <span class="hl sym">|</span> <span class="hl com">(*none*)</span><span class="hl sym">)</span>
        <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span><span class="hl kwa">if</span><span class="hl sym">]</span>
      <span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span><span class="hl kwa">if</span><span class="hl sym">]</span>
    <span class="hl kwa">end</span> <span class="hl com">(* end of [loop] *)</span>
    <span class="hl kwa">val</span> <span class="hl sym">() =</span> loop
      <span class="hl sym">(</span>pf_tmp<span class="hl sym">,</span> pf_acc<span class="hl sym">,</span> pf_num<span class="hl sym">,</span> pf_den<span class="hl sym">,</span> pf_k<span class="hl sym">,</span> pf_d <span class="hl sym">|</span> <span class="hl com">(*none*)</span><span class="hl sym">)</span>
    <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span><span class="hl kwa">val</span><span class="hl sym">]</span>
    <span class="hl kwa">val</span> <span class="hl sym">() =</span> print <span class="hl sym">(</span>char_of_uint <span class="hl sym">(</span>d <span class="hl sym">+</span> uint_of_char '<span class="hl num">0</span>'<span class="hl sym">))</span>
    <span class="hl kwa">val</span> <span class="hl sym">() =</span> i <span class="hl sym">:=</span> i <span class="hl sym">+</span> <span class="hl num">1</span>
    <span class="hl kwa">val</span> <span class="hl sym">() =</span> m <span class="hl sym">:=</span> i mod <span class="hl num">10</span>
    <span class="hl kwa">val</span> <span class="hl sym">() =</span> <span class="hl kwa">if</span> m <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">then</span> printf <span class="hl sym">(</span><span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">:%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> &#64;<span class="hl sym">(</span>i<span class="hl sym">))</span>
    <span class="hl kwa">val</span> <span class="hl sym">() =</span> <span class="hl kwa">if</span> <span class="hl sym">(</span>i <span class="hl sym">&gt;=</span> n<span class="hl sym">)</span> <span class="hl kwa">then break</span>
    <span class="hl kwa">val</span> <span class="hl sym">() =</span> eliminate_digit <span class="hl sym">(</span>pf_acc<span class="hl sym">,</span> pf_num<span class="hl sym">,</span> pf_den <span class="hl sym">|</span> d<span class="hl sym">)</span>
  <span class="hl kwa">in</span>
    <span class="hl sym">//</span> empty
  <span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span><span class="hl kwa">val</span><span class="hl sym">]</span>

  <span class="hl kwa">val</span> <span class="hl sym">() =</span> <span class="hl kwa">if</span> <span class="hl sym">(</span>m <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">then let</span>
    <span class="hl kwa">fun</span> loop <span class="hl sym">(</span>i<span class="hl sym">:</span> int<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl kwa">if</span> i <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span> <span class="hl sym">(</span>print <span class="hl sym">(</span>' '<span class="hl sym">);</span> loop <span class="hl sym">(</span>i<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">))</span>
  <span class="hl kwa">in</span>
    loop <span class="hl sym">(</span><span class="hl num">10</span><span class="hl sym">-</span>m<span class="hl sym">);</span> printf <span class="hl sym">(</span><span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">:%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> &#64;<span class="hl sym">(</span>n<span class="hl sym">))</span>
  <span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span><span class="hl kwa">val</span><span class="hl sym">]</span>
<span class="hl sym">}</span> <span class="hl com">(* end of [pidigits] *)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">implement</span> main <span class="hl sym">(</span>argc<span class="hl sym">,</span> argv<span class="hl sym">) =</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> n <span class="hl sym">= (</span><span class="hl kwa">if</span> argc <span class="hl sym">&gt;</span> <span class="hl num">1</span> <span class="hl kwa">then</span> int_of_string <span class="hl sym">(</span>argv<span class="hl sym">.[</span><span class="hl num">1</span><span class="hl sym">])</span> <span class="hl kwa">else</span> <span class="hl num">27</span><span class="hl sym">):</span> int
  <span class="hl kwa">prval</span> vbox pf_all <span class="hl sym">=</span> pfbox_all
<span class="hl kwa">in</span>
  $effmask_ref <span class="hl sym">(</span>pidigits <span class="hl sym">(</span>pf_all<span class="hl num">.0</span><span class="hl sym">,</span> pf_all<span class="hl num">.1</span><span class="hl sym">,</span> pf_all<span class="hl num">.2</span><span class="hl sym">,</span> pf_all<span class="hl num">.3</span> <span class="hl sym">|</span> n<span class="hl sym">))</span>
<span class="hl kwa">end</span> <span class="hl sym">//</span> <span class="hl kwa">end of</span> <span class="hl sym">[</span>main<span class="hl sym">]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl com">(* end of [pidigits2.dats] *)</span>
