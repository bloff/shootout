<span class="hl com">(* binarytrees.mlton</span>
<span class="hl com"> *</span>
<span class="hl com"> * The Computer Language Shootout</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Contributed by Troestler Christophe</span>
<span class="hl com"> * Ported to MLton/SML by sweeks&#64;sweeks.com.</span>
<span class="hl com"> * Optimized and compressed by Vesa Karvonen.</span>
<span class="hl com"> * De-optimized by Isaac Gouy</span>
<span class="hl com"> *)</span>
<span class="hl kwa">datatype</span> 'a tree <span class="hl sym">=</span> Nil <span class="hl sym">|</span> Node <span class="hl kwa">of</span> 'a tree <span class="hl sym">*</span> 'a <span class="hl sym">*</span> 'a tree
<span class="hl com">(* fun mk 0 i = Nil | mk d i = Node (mk (d-1) (i*2-1), i, mk (d-1) (i*2)) *)</span>
<span class="hl kwa">fun</span> mk <span class="hl num">0</span> i <span class="hl sym">=</span> Node <span class="hl sym">(</span>Nil<span class="hl sym">,</span> i<span class="hl sym">,</span> Nil<span class="hl sym">) |</span> mk d i <span class="hl sym">=</span> Node <span class="hl sym">(</span>mk <span class="hl sym">(</span>d<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">) (</span>i<span class="hl sym">*</span><span class="hl num">2</span><span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">),</span> i<span class="hl sym">,</span> mk <span class="hl sym">(</span>d<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">) (</span>i<span class="hl sym">*</span><span class="hl num">2</span><span class="hl sym">))</span>
<span class="hl kwa">fun</span> chk Nil <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl sym">|</span> chk <span class="hl sym">(</span>Node <span class="hl sym">(</span>l<span class="hl sym">,</span> i<span class="hl sym">,</span> r<span class="hl sym">)) =</span> i <span class="hl sym">+</span> chk l <span class="hl sym">-</span> chk r
<span class="hl kwa">val</span> n <span class="hl sym">=</span> valOf <span class="hl sym">(</span><span class="hl kwa">Int</span>.fromString <span class="hl sym">(</span>hd <span class="hl sym">(</span>CommandLine.arguments <span class="hl sym">())))</span> <span class="hl kwa">handle</span> _ <span class="hl sym">=&gt;</span> <span class="hl num">10</span>
<span class="hl kwa">val</span> min' <span class="hl sym">=</span> <span class="hl num">4</span>
<span class="hl kwa">val</span> max' <span class="hl sym">=</span> <span class="hl kwa">Int</span>.max <span class="hl sym">(</span>min' <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">,</span> n<span class="hl sym">)</span>
<span class="hl kwa">val</span> stretch' <span class="hl sym">=</span> max' <span class="hl sym">+</span> <span class="hl num">1</span>
<span class="hl kwa">val</span> i2s <span class="hl sym">=</span> <span class="hl kwa">String</span>.translate <span class="hl sym">(</span><span class="hl kwa">fn</span> #<span class="hl str">&quot;~&quot;</span> <span class="hl sym">=&gt;</span> <span class="hl str">&quot;-&quot;</span> <span class="hl sym">|</span> c <span class="hl sym">=&gt;</span> str c<span class="hl sym">)</span> <span class="hl kwa">o Int</span>.toString
<span class="hl kwa">fun</span> msg h d t <span class="hl sym">=</span> app print <span class="hl sym">[</span>h<span class="hl sym">,</span> <span class="hl kwa">Int</span>.toString d<span class="hl sym">,</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">check: &quot;</span><span class="hl sym">,</span> i2s t<span class="hl sym">,</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">]</span>
<span class="hl kwa">val</span> <span class="hl sym">() =</span> msg <span class="hl str">&quot;stretch tree of depth &quot;</span> stretch' <span class="hl sym">(</span>chk <span class="hl sym">(</span>mk stretch' <span class="hl num">0</span><span class="hl sym">))</span>
<span class="hl kwa">val</span> longLivedTree <span class="hl sym">=</span> mk max' <span class="hl num">0</span>
<span class="hl kwa">fun</span> loopDepths d <span class="hl sym">=</span>
    <span class="hl kwa">if</span> d <span class="hl sym">&gt;</span> max' <span class="hl kwa">then</span> <span class="hl sym">()</span>
    <span class="hl kwa">else let val</span> n <span class="hl sym">=</span> <span class="hl kwa">Word</span>.toInt <span class="hl sym">(</span><span class="hl kwa">Word</span>.<span class="hl sym">&lt;&lt; (</span><span class="hl num">0</span>w1<span class="hl sym">,</span> <span class="hl kwa">Word</span>.fromInt <span class="hl sym">(</span>max'<span class="hl sym">-</span>d<span class="hl sym">+</span>min'<span class="hl sym">)))</span>
             <span class="hl kwa">fun</span> lp <span class="hl sym">(</span>i<span class="hl sym">,</span> c<span class="hl sym">) =</span> <span class="hl kwa">if</span> i<span class="hl sym">=</span>n <span class="hl kwa">then</span> c
                             <span class="hl kwa">else</span> lp <span class="hl sym">(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> c <span class="hl sym">+</span> chk <span class="hl sym">(</span>mk d i<span class="hl sym">) +</span> chk <span class="hl sym">(</span>mk d <span class="hl sym">(</span>~i<span class="hl sym">)))</span>
         <span class="hl kwa">in</span> msg <span class="hl sym">(</span><span class="hl kwa">Int</span>.toString <span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>n<span class="hl sym">)</span>^<span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">trees of depth &quot;</span><span class="hl sym">)</span> d <span class="hl sym">(</span>lp <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">))</span>
          <span class="hl sym">;</span> loopDepths <span class="hl sym">(</span>d <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">)</span> <span class="hl kwa">end</span>
<span class="hl kwa">val</span> <span class="hl sym">() =</span> loopDepths min'
<span class="hl kwa">val</span> <span class="hl sym">() =</span> msg <span class="hl str">&quot;long lived tree of depth &quot;</span> max' <span class="hl sym">(</span>chk longLivedTree<span class="hl sym">)</span>
