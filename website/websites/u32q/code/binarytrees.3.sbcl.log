
Mon, 18 May 2009 21:17:27 GMT

MAKE:
cp: `binarytrees.sbcl-3.sbcl' and `./binarytrees.sbcl-3.sbcl' are the same file
SBCL built with: /usr/local/bin/sbcl --userinit /dev/null --batch --eval '(load "binarytrees.sbcl-3.sbcl_compile")'
### START binarytrees.sbcl-3.sbcl_compile
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0)))
(handler-bind ((sb-ext:defconstant-uneql      (lambda (c) (abort c))))      (load (compile-file "binarytrees.sbcl-3.sbcl" ))) (save-lisp-and-die "sbcl.core" :purify t)
### END binarytrees.sbcl-3.sbcl_compile


; compiling file "/home/dunham/shootout/bench/binarytrees/binarytrees.sbcl-3.sbcl" (written 21 FEB 2009 08:42:31 PM):
; compiling (DEFCLASS BTREE ...)
; compiling (DEFMACRO TREE ...)
; compiling (DEFMACRO CHECK ...)
; compiling (DEFMETHOD INITIALIZE-INSTANCE ...)
; file: /home/dunham/shootout/bench/binarytrees/binarytrees.sbcl-3.sbcl
; in: DEFMETHOD INITIALIZE-INSTANCE :AFTER (BTREE)
;     (DEFMETHOD INITIALIZE-INSTANCE :AFTER ((A-TREE BTREE) &REST INIT-ARGS)
;                (DECLARE (IGNORE INIT-ARGS))
;                (WITH-SLOTS (ITEM DEPTH POOL SIZE) A-TREE
;                            (SETF SIZE (1- (THE FIXNUM #)))
;                            (IF (NOT POOL)
;                                (SETF POOL (MAKE-ARRAY SIZE :INITIAL-ELEMENT 0)))
;                            (INIT-TREE POOL ITEM DEPTH)))
; --> PROGN EVAL-WHEN SB-PCL::%DEFMETHOD-EXPANDER PROGN SB-PCL::LOAD-DEFMETHOD 
; --> SYMBOL-MACROLET SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS 
; --> SB-PCL::BIND-FAST-LEXICAL-METHOD-FUNCTIONS FLET LET SB-PCL::BIND-ARGS 
; --> LET* LOCALLY SYMBOL-MACROLET SB-PCL::PV-BINDING SB-PCL::PV-BINDING1 
; --> SB-PCL::PV-ENV LOCALLY LET BLOCK LET SYMBOL-MACROLET IF LET MAKE-ARRAY 
; ==>
;   (MAKE-ARRAY SB-C::DIMS :ELEMENT-TYPE 'T)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a (OR (MOD 536870909) CONS NULL), not a INTEGER.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a (OR (MOD 536870909) CONS NULL), not a LIST.

; --> PROGN EVAL-WHEN SB-PCL::%DEFMETHOD-EXPANDER PROGN SB-PCL::LOAD-DEFMETHOD 
; --> SYMBOL-MACROLET SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS 
; --> SB-PCL::BIND-FAST-LEXICAL-METHOD-FUNCTIONS FLET LET SB-PCL::BIND-ARGS 
; --> LET* LOCALLY SYMBOL-MACROLET SB-PCL::PV-BINDING SB-PCL::PV-BINDING1 
; --> SB-PCL::PV-ENV LOCALLY LET BLOCK LET SYMBOL-MACROLET LET 1- - THE 
; ==>
;   (ASH 2
;        (SB-PCL::OPTIMIZED-SLOT-VALUE (SLOT-VALUE #:G21 'DEPTH) A-TREE
;                                      (SB-PCL::INSTANCE-READ
;                                       (SB-PCL::PV-OFFSET 0) A-TREE 0 'DEPTH
;                                       'BTREE)))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 3) because:
;       The second argument is a INTEGER, not a (UNSIGNED-BYTE 29).
;       unable to do inline ASH (cost 3) because:
;       The second argument is a INTEGER, not a (UNSIGNED-BYTE 29).
;       etc.

; compiling (DEFUN INIT-TREE ...)
; file: /home/dunham/shootout/bench/binarytrees/binarytrees.sbcl-3.sbcl
; in: DEFUN INIT-TREE
;     (LOOP FOR IDX DOWNFROM II2 FOR VAL DOWNFROM IIT REPEAT (THE FIXNUM II) DO ...)
; --> BLOCK LET LET LET SB-LOOP::LOOP-BODY TAGBODY SB-LOOP::LOOP-REALLY-DESETQ 
; --> SETQ THE 1- 
; ==>
;   (- VAL 1)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (INTEGER * 536870911), not a FIXNUM.
;       The result is a (VALUES (INTEGER * 536870910) &OPTIONAL), not a (VALUES
;                                                                        FIXNUM
;                                                                        &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (INTEGER * 536870911), not a FIXNUM.
;       The result is a (VALUES (INTEGER * 536870910) &OPTIONAL), not a (VALUES
;                                                                        FIXNUM
;                                                                        &REST T).
;       etc.

; compiling (DEFUN CHECK-TREE ...)
; compiling (DEFINE-ALIEN-ROUTINE SYSCONF ...)
; file: /home/dunham/shootout/bench/binarytrees/binarytrees.sbcl-3.sbcl
; in: DEFINE-ALIEN-ROUTINE SYSCONF
;     (DEFINE-ALIEN-ROUTINE SYSCONF LONG (NAME INT))
; --> PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN BLOCK WITH-ALIEN 
; --> SYMBOL-MACROLET SYMBOL-MACROLET LET SYMBOL-MACROLET VALUES PROG1 LET 
; --> ALIEN-FUNCALL SB-C::INVOKE-WITH-SAVED-FP-AND-PC BLOCK LET* 
; --> MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; ==>
;   (SB-KERNEL:%CALLER-FRAME-AND-PC)
; 
; note: doing SAP to pointer coercion (cost 20)

; --> PROGN DEFUN PROGN EVAL-WHEN 
; ==>
;   (SB-IMPL::%DEFUN 'SYSCONF
;                    (SB-INT:NAMED-LAMBDA SYSCONF (NAME)
;                                         (BLOCK SYSCONF
;                                           (WITH-ALIEN (#) (VALUES #))))
;                    NIL 'NIL (SB-C:SOURCE-LOCATION))
; 
; note: doing signed word to integer coercion (cost 20) to "<return value>"

; compiling (USE-PACKAGE :SB-THREAD)
; compiling (DEFCONSTANT +CPU-COUNT+ ...)
; compiling (DEFMACRO BG ...)
; compiling (DEFPARAMETER *SEMAPHORES* ...)
; compiling (DEFPARAMETER *SEMAPHORE* ...)
; compiling (DEFUN LOOP-DEPTHS ...)
; compiling (DEFUN MAIN ...); 
; compilation unit finished
;   printed 6 notes


; /home/dunham/benchmarksgame/binarytrees/tmp/binarytrees.sbcl-3.fasl written
; compilation finished in 0:00:00.125
[undoing binding stack and other enclosing state... done]
[saving current Lisp image into /home/dunham/benchmarksgame/binarytrees/tmp/sbcl.core:
writing 3488 bytes from the read-only space at 0x01000000
writing 2160 bytes from the static space at 0x01100000
writing 26812416 bytes from the dynamic space at 0x09000000
done]
### START binarytrees.sbcl-3.sbcl_run
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0)))
(main) (quit)
### END binarytrees.sbcl-3.sbcl_run

0.64s to complete and log all make actions

COMMAND LINE:
/usr/local/bin/sbcl  --noinform --core sbcl.core --userinit /dev/null --load binarytrees.sbcl-3.sbcl_run 20

PROGRAM OUTPUT:
stretch tree of depth 21	 check: -1
2097152	 trees of depth 4	 check: -2097152
524288	 trees of depth 6	 check: -524288
131072	 trees of depth 8	 check: -131072
32768	 trees of depth 10	 check: -32768
8192	 trees of depth 12	 check: -8192
2048	 trees of depth 14	 check: -2048
512	 trees of depth 16	 check: -512
128	 trees of depth 18	 check: -128
32	 trees of depth 20	 check: -32
long lived tree of depth 20	 check: -1
