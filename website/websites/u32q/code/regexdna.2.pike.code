<span class="hl slc">// The Computer Language Benchmarks Game</span>
<span class="hl slc">// http://shootout.alioth.debian.org/</span>
<span class="hl slc">//</span>
<span class="hl slc">// Requires a PCRE [Perl Compatible Regular Expression] enabled Pike.</span>
<span class="hl slc">//</span>
<span class="hl slc">// contributed by Anthony Borla</span>
<span class="hl slc">// Modified by Bertrand LUPART and Mirar.</span>

<span class="hl kwb">array</span><span class="hl sym">(</span><span class="hl kwb">string</span><span class="hl sym">)</span> VARIANTS <span class="hl sym">=</span>
  <span class="hl sym">({</span>
    <span class="hl str">&quot;agggtaaa|tttaccct&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="hl sym">,</span>
    <span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="hl sym">,</span>
    <span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span>
  <span class="hl sym">});</span>

<span class="hl kwb">array</span><span class="hl sym">(</span><span class="hl kwb">string</span><span class="hl sym">)</span> IUB <span class="hl sym">=</span>
  <span class="hl sym">({</span>
    <span class="hl str">&quot;B&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;D&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;H&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;K&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;M&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;N&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;R&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;S&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;V&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;W&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;Y&quot;</span><span class="hl sym">,</span>
  <span class="hl sym">});</span>

<span class="hl kwb">array</span><span class="hl sym">(</span><span class="hl kwb">string</span><span class="hl sym">)</span> IUBnew <span class="hl sym">=</span>
  <span class="hl sym">({</span>
    <span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;(g|t)&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;(a|c)&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;(a|g)&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;(c|g)&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;(a|t)&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;(c|t)&quot;</span><span class="hl sym">,</span>
  <span class="hl sym">});</span>



<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl sym">()</span>
<span class="hl sym">{</span>
  <span class="hl slc">// Read input data into string and record its length</span>
  <span class="hl kwb">string</span> seq <span class="hl sym">=</span> Stdio.stdin<span class="hl sym">-&gt;</span><span class="hl kwd">read</span><span class="hl sym">();</span> <span class="hl kwb">int</span> initial_length <span class="hl sym">=</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span>seq<span class="hl sym">);</span>

  <span class="hl slc">// Remove all newline and segment divider line occurrences</span>
  seq <span class="hl sym">=</span> Regexp.PCRE.<span class="hl kwd">Studied</span><span class="hl sym">(</span><span class="hl str">&quot;(&gt;.*</span><span class="hl esc">\n</span><span class="hl str">)|(</span><span class="hl esc">\n</span><span class="hl str">)&quot;</span><span class="hl sym">)-&gt;</span><span class="hl kwa">replace</span><span class="hl sym">(</span>seq<span class="hl sym">,</span> <span class="hl str">&quot;&quot;</span><span class="hl sym">);</span>

  <span class="hl kwb">int</span> code_length <span class="hl sym">=</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span>seq<span class="hl sym">);</span>

  <span class="hl slc">// Perform regexp counts</span>
  <span class="hl kwd">foreach</span><span class="hl sym">(</span>VARIANTS<span class="hl sym">,</span> <span class="hl kwb">string</span> var<span class="hl sym">)</span>
  <span class="hl sym">{</span>
		<span class="hl kwb">int</span> number_of_matches <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
		Regexp.PCRE.<span class="hl kwd">Studied</span><span class="hl sym">(</span>var<span class="hl sym">,</span> Regexp.PCRE.OPTION.CASELESS<span class="hl sym">)-&gt;</span><span class="hl kwd">matchall</span><span class="hl sym">(</span>seq<span class="hl sym">,</span> <span class="hl kwd">lambda</span><span class="hl sym">(){</span> number_of_matches<span class="hl sym">++; });</span>

    <span class="hl kwa">write</span><span class="hl sym">(</span><span class="hl str">&quot;%s %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> var<span class="hl sym">,</span> number_of_matches<span class="hl sym">);</span>
  <span class="hl sym">}</span>

  <span class="hl slc">// Perform replacements</span>
  seq <span class="hl sym">=</span> <span class="hl kwa">replace</span><span class="hl sym">(</span>seq<span class="hl sym">,</span> IUB<span class="hl sym">,</span> IUBnew<span class="hl sym">);</span>

  <span class="hl slc">// Print statistics</span>
  <span class="hl kwa">write</span><span class="hl sym">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">%d</span><span class="hl esc">\n</span><span class="hl str">%d</span><span class="hl esc">\n</span><span class="hl str">%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> initial_length<span class="hl sym">,</span> code_length<span class="hl sym">,</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span>seq<span class="hl sym">));</span>

  return <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>
