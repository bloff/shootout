<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;   http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;</span>
<span class="hl slc">;;   contributed by Alexey Voznyuk</span>
<span class="hl slc">;;</span>

<span class="hl sym">(</span>defpackage #<span class="hl sym">:</span>k<span class="hl sym">-</span>nucleotide
  <span class="hl sym">(:</span>use <span class="hl sym">:</span>cl<span class="hl sym">))</span>

<span class="hl sym">(</span>in<span class="hl sym">-</span>package <span class="hl sym">:</span>k<span class="hl sym">-</span>nucleotide<span class="hl sym">)</span>

<span class="hl sym">(</span>defmacro with<span class="hl sym">-</span>packed<span class="hl sym">-</span>sequences <span class="hl sym">((&amp;</span>rest sequences<span class="hl sym">) &amp;</span>body body<span class="hl sym">)</span>
  <span class="hl sym">(</span>loop <span class="hl sym">:</span>for <span class="hl sym">(</span>bind update length<span class="hl sym">) :</span>in sequences
     <span class="hl sym">:</span>collect <span class="hl sym">`(,</span>bind <span class="hl num">0</span><span class="hl sym">) :</span>into binds
     <span class="hl sym">:</span>collect <span class="hl sym">`(</span>type <span class="hl sym">(</span>integer <span class="hl num">0</span> <span class="hl sym">,(</span><span class="hl num">1</span><span class="hl sym">- (</span>expt <span class="hl num">4</span> length<span class="hl sym">))) ,</span>bind<span class="hl sym">) :</span>into decls
     <span class="hl sym">:</span>collect <span class="hl sym">`(,</span>update <span class="hl sym">(</span>char<span class="hl sym">) `(</span>setf <span class="hl sym">,',</span>bind
                                      <span class="hl sym">(</span>logior <span class="hl sym">(</span>ash <span class="hl sym">,',</span>bind <span class="hl sym">-</span><span class="hl num">2</span><span class="hl sym">)</span>
                                              <span class="hl sym">(</span>ash <span class="hl sym">(</span>logand <span class="hl sym">(</span>char<span class="hl sym">-</span>code <span class="hl sym">,</span>char<span class="hl sym">)</span> #x6<span class="hl sym">)</span>
                                                   <span class="hl sym">,',(</span><span class="hl num">1</span><span class="hl sym">- (* (</span><span class="hl num">1</span><span class="hl sym">-</span> length<span class="hl sym">)</span> <span class="hl num">2</span><span class="hl sym">)))))) :</span>into updates
     <span class="hl sym">:</span>finally <span class="hl sym">(</span>return <span class="hl sym">`(</span>let <span class="hl sym">(,</span>&#64;binds<span class="hl sym">) (</span>declare <span class="hl sym">,</span>&#64;decls<span class="hl sym">) (</span>macrolet <span class="hl sym">(,</span>&#64;updates<span class="hl sym">) ,</span>&#64;body<span class="hl sym">)))))</span>

<span class="hl sym">(</span>defmacro pack<span class="hl sym">-</span>sequence <span class="hl sym">(</span>sequence<span class="hl sym">)</span>
  <span class="hl sym">`(</span>with<span class="hl sym">-</span>packed<span class="hl sym">-</span>sequences <span class="hl sym">((</span>bind update <span class="hl sym">,(</span>length sequence<span class="hl sym">)))</span>
     <span class="hl sym">(</span>loop <span class="hl sym">:</span>for char <span class="hl sym">:</span>across <span class="hl sym">,</span>sequence
        <span class="hl sym">:</span>do <span class="hl sym">(</span>update char<span class="hl sym">))</span>
     bind<span class="hl sym">))</span>

<span class="hl sym">(</span>defun unpack<span class="hl sym">-</span>sequence <span class="hl sym">(</span>length packed<span class="hl sym">-</span>seq<span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>optimize <span class="hl sym">(</span>speed <span class="hl num">3</span><span class="hl sym">) (</span>safety <span class="hl num">0</span><span class="hl sym">) (</span>debug <span class="hl num">0</span><span class="hl sym">))</span>
           <span class="hl sym">(</span>type fixnum length packed<span class="hl sym">-</span>seq<span class="hl sym">))</span>
  <span class="hl sym">(</span>with<span class="hl sym">-</span>output<span class="hl sym">-</span>to<span class="hl sym">-</span>string <span class="hl sym">(</span>seq<span class="hl sym">-</span>out<span class="hl sym">)</span>
    <span class="hl sym">(</span>loop <span class="hl sym">:</span>repeat length
       <span class="hl sym">:</span>do <span class="hl sym">(</span>write<span class="hl sym">-</span>char <span class="hl sym">(</span>ecase <span class="hl sym">(</span>logand packed<span class="hl sym">-</span>seq #x3<span class="hl sym">)</span>
                         <span class="hl sym">(</span><span class="hl num">0</span> #\A<span class="hl sym">) (</span><span class="hl num">1</span> #\C<span class="hl sym">) (</span><span class="hl num">2</span> #\T<span class="hl sym">) (</span><span class="hl num">3</span> #\G<span class="hl sym">))</span>
                       seq<span class="hl sym">-</span>out<span class="hl sym">)</span>
       <span class="hl sym">:</span>do <span class="hl sym">(</span>setf packed<span class="hl sym">-</span>seq <span class="hl sym">(</span>ash packed<span class="hl sym">-</span>seq <span class="hl sym">-</span><span class="hl num">2</span><span class="hl sym">)))))</span>

<span class="hl sym">(</span>defmacro with<span class="hl sym">-</span>packed<span class="hl sym">-</span>caches<span class="hl sym">-</span>fill <span class="hl sym">((</span>hash<span class="hl sym">-</span>access<span class="hl sym">) &amp;</span>rest updaters<span class="hl sym">)</span>
  <span class="hl sym">`(</span>progn <span class="hl sym">,</span>&#64;<span class="hl sym">(</span>loop
               <span class="hl sym">:</span>for tick <span class="hl sym">:</span>from <span class="hl num">1</span> <span class="hl sym">:</span>to <span class="hl sym">(</span>apply #<span class="hl sym">'</span>max <span class="hl sym">(</span>mapcar #<span class="hl sym">'</span>third updaters<span class="hl sym">))</span>
               <span class="hl sym">:</span>collect <span class="hl sym">`(</span>with<span class="hl sym">-</span>current<span class="hl sym">-</span>char <span class="hl sym">(</span>char <span class="hl sym">:</span>skip<span class="hl sym">-</span>newline t<span class="hl sym">)</span>
                           <span class="hl sym">,</span>&#64;<span class="hl sym">(</span>loop <span class="hl sym">:</span>for <span class="hl sym">(</span>bind update length<span class="hl sym">) :</span>in updaters
                                <span class="hl sym">:</span>collect <span class="hl sym">`(,</span>update char<span class="hl sym">)</span>
                                <span class="hl sym">:</span>when <span class="hl sym">(&gt;=</span> tick length<span class="hl sym">)</span>
                                <span class="hl sym">:</span>collect <span class="hl sym">`(,</span>hash<span class="hl sym">-</span>access <span class="hl sym">,</span>length <span class="hl sym">,</span>bind<span class="hl sym">))))))</span>

<span class="hl sym">(</span>defmacro with<span class="hl sym">-</span>reading<span class="hl sym">-</span>stream <span class="hl sym">((</span>stream <span class="hl sym">&amp;</span>key <span class="hl sym">(</span>block<span class="hl sym">-</span>size <span class="hl num">8192</span><span class="hl sym">)) &amp;</span>body body<span class="hl sym">)</span>
  <span class="hl sym">`(</span>block outer<span class="hl sym">-</span>tag
     <span class="hl sym">(</span>let <span class="hl sym">((</span>advance <span class="hl sym">(</span>let <span class="hl sym">((</span>buffer <span class="hl sym">(</span>make<span class="hl sym">-</span>array <span class="hl sym">,</span>block<span class="hl sym">-</span>size <span class="hl sym">:</span>element<span class="hl sym">-</span>type <span class="hl sym">'</span>standard<span class="hl sym">-</span>char <span class="hl sym">:</span>initial<span class="hl sym">-</span>element #\Newline<span class="hl sym">))</span>
                          <span class="hl sym">(</span>index <span class="hl num">0</span><span class="hl sym">)</span>
                          <span class="hl sym">(</span>amount <span class="hl num">0</span><span class="hl sym">))</span>
                      <span class="hl sym">(</span>declare <span class="hl sym">(</span>type fixnum index amount<span class="hl sym">))</span>
                      <span class="hl sym">(</span>lambda <span class="hl sym">()</span>
                        <span class="hl sym">(</span>prog2 <span class="hl sym">(</span>when <span class="hl sym">(&gt;=</span> index amount<span class="hl sym">)</span>
                                 <span class="hl sym">(</span>setf amount <span class="hl sym">(</span>read<span class="hl sym">-</span>sequence buffer <span class="hl sym">,</span>stream<span class="hl sym">)</span>
                                       index <span class="hl num">0</span><span class="hl sym">)</span>
                                 <span class="hl sym">(</span>when <span class="hl sym">(</span>zerop amount<span class="hl sym">)</span>
                                   <span class="hl sym">(</span>return<span class="hl sym">-</span>from outer<span class="hl sym">-</span>tag nil<span class="hl sym">)))</span>
                            <span class="hl sym">(</span>elt buffer index<span class="hl sym">)</span>
                          <span class="hl sym">(</span>incf index<span class="hl sym">))))))</span>
       <span class="hl sym">(</span>flet <span class="hl sym">((</span>get<span class="hl sym">-</span>char <span class="hl sym">() (</span>funcall advance<span class="hl sym">)))</span>
         <span class="hl sym">(</span>macrolet <span class="hl sym">((</span>with<span class="hl sym">-</span>current<span class="hl sym">-</span>char <span class="hl sym">((</span>char <span class="hl sym">&amp;</span>key skip<span class="hl sym">-</span>newline<span class="hl sym">) &amp;</span>body body<span class="hl sym">)</span>
                      <span class="hl sym">`(</span>let <span class="hl sym">((,</span>char <span class="hl sym">,(</span>if skip<span class="hl sym">-</span>newline
                                         <span class="hl sym">`(</span>loop <span class="hl sym">:</span>for <span class="hl sym">,</span>char <span class="hl sym">= (</span>get<span class="hl sym">-</span>char<span class="hl sym">) :</span>while <span class="hl sym">(</span>char<span class="hl sym">= ,</span>char #\Newline<span class="hl sym">)</span>
                                             <span class="hl sym">:</span>finally <span class="hl sym">(</span>return <span class="hl sym">,</span>char<span class="hl sym">))</span>
                                         <span class="hl sym">`(</span>get<span class="hl sym">-</span>char<span class="hl sym">))))</span>
                         <span class="hl sym">(</span>declare <span class="hl sym">(</span>type standard<span class="hl sym">-</span>char <span class="hl sym">,</span>char<span class="hl sym">))</span>
                         <span class="hl sym">,</span>&#64;body<span class="hl sym">)))</span>
           <span class="hl sym">,</span>&#64;body<span class="hl sym">)))))</span>

<span class="hl sym">(</span>defmacro skip<span class="hl sym">-</span>buffer<span class="hl sym">-</span>to <span class="hl sym">(&amp;</span>rest patterns<span class="hl sym">)</span>
  <span class="hl sym">`(</span>progn <span class="hl sym">,</span>&#64;<span class="hl sym">(</span>loop <span class="hl sym">:</span>for pattern <span class="hl sym">:</span>in patterns
               <span class="hl sym">:</span>collect <span class="hl sym">`(</span>loop <span class="hl sym">:</span>until <span class="hl sym">(</span>and <span class="hl sym">,</span>&#64;<span class="hl sym">(</span>loop <span class="hl sym">:</span>for char <span class="hl sym">:</span>across <span class="hl sym">(</span>string pattern<span class="hl sym">)</span>
                                                <span class="hl sym">:</span>collect <span class="hl sym">`(</span>with<span class="hl sym">-</span>current<span class="hl sym">-</span>char <span class="hl sym">(</span>char<span class="hl sym">)</span>
                                                            <span class="hl sym">(</span>char<span class="hl sym">=</span> char <span class="hl sym">,</span>char<span class="hl sym">))))))))</span>

<span class="hl sym">(</span>defmacro with<span class="hl sym">-</span>dna<span class="hl sym">-</span>analyzed <span class="hl sym">((</span>stream hash<span class="hl sym">-</span>access <span class="hl sym">&amp;</span>key <span class="hl sym">(</span>block<span class="hl sym">-</span>size <span class="hl num">8192</span><span class="hl sym">)) &amp;</span>rest sequence<span class="hl sym">-</span>lengths<span class="hl sym">)</span>
  <span class="hl sym">(</span>loop <span class="hl sym">:</span>for length <span class="hl sym">:</span>in sequence<span class="hl sym">-</span>lengths
     <span class="hl sym">:</span>collect <span class="hl sym">(</span>gensym<span class="hl sym">) :</span>into binds
     <span class="hl sym">:</span>collect <span class="hl sym">(</span>gensym<span class="hl sym">) :</span>into updaters
     <span class="hl sym">:</span>finally <span class="hl sym">(</span>let <span class="hl sym">((</span>desc <span class="hl sym">(</span>mapcar #<span class="hl sym">'</span>list binds updaters sequence<span class="hl sym">-</span>lengths<span class="hl sym">)))</span>
                <span class="hl sym">(</span>return <span class="hl sym">`(</span>with<span class="hl sym">-</span>packed<span class="hl sym">-</span>sequences <span class="hl sym">(,</span>&#64;desc<span class="hl sym">)</span>
                           <span class="hl sym">(</span>with<span class="hl sym">-</span>reading<span class="hl sym">-</span>stream <span class="hl sym">(,</span>stream <span class="hl sym">:</span>block<span class="hl sym">-</span>size <span class="hl sym">,</span>block<span class="hl sym">-</span>size<span class="hl sym">)</span>
                             <span class="hl sym">(</span>skip<span class="hl sym">-</span>buffer<span class="hl sym">-</span>to <span class="hl str">&quot;&gt;THREE&quot;</span> #\Newline<span class="hl sym">)</span>
                             <span class="hl sym">(</span>with<span class="hl sym">-</span>packed<span class="hl sym">-</span>caches<span class="hl sym">-</span>fill <span class="hl sym">(,</span>hash<span class="hl sym">-</span>access<span class="hl sym">)</span>
                               <span class="hl sym">,</span>&#64;desc<span class="hl sym">)</span>
                             <span class="hl sym">(</span>loop <span class="hl sym">(</span>with<span class="hl sym">-</span>current<span class="hl sym">-</span>char <span class="hl sym">(</span>char <span class="hl sym">:</span>skip<span class="hl sym">-</span>newline t<span class="hl sym">)</span>
                                     <span class="hl sym">,</span>&#64;<span class="hl sym">(</span>loop
                                          <span class="hl sym">:</span>for update <span class="hl sym">:</span>in updaters
                                          <span class="hl sym">:</span>for bind <span class="hl sym">:</span>in binds
                                          <span class="hl sym">:</span>for length <span class="hl sym">:</span>in sequence<span class="hl sym">-</span>lengths
                                          <span class="hl sym">:</span>collect <span class="hl sym">`(,</span>update char<span class="hl sym">)</span>
                                          <span class="hl sym">:</span>collect <span class="hl sym">`(,</span>hash<span class="hl sym">-</span>access <span class="hl sym">,</span>length <span class="hl sym">,</span>bind<span class="hl sym">))))))))))</span>

<span class="hl sym">(</span>defun seq<span class="hl sym">= (</span>seq<span class="hl sym">-</span>a seq<span class="hl sym">-</span>b<span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>optimize <span class="hl sym">(</span>speed <span class="hl num">3</span><span class="hl sym">) (</span>safety <span class="hl num">0</span><span class="hl sym">) (</span>debug <span class="hl num">0</span><span class="hl sym">)) (</span>type fixnum seq<span class="hl sym">-</span>a seq<span class="hl sym">-</span>b<span class="hl sym">))</span>
  <span class="hl sym">(=</span> seq<span class="hl sym">-</span>a seq<span class="hl sym">-</span>b<span class="hl sym">))</span>

<span class="hl sym">(</span>defun seq<span class="hl sym">-</span>hash <span class="hl sym">(</span>seq<span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>optimize <span class="hl sym">(</span>speed <span class="hl num">3</span><span class="hl sym">) (</span>safety <span class="hl num">0</span><span class="hl sym">) (</span>debug <span class="hl num">0</span><span class="hl sym">)) (</span>type fixnum seq<span class="hl sym">))</span>
  seq<span class="hl sym">)</span>

<span class="hl sym">(</span>sb<span class="hl sym">-</span>ext<span class="hl sym">:</span>define<span class="hl sym">-</span>hash<span class="hl sym">-</span>table<span class="hl sym">-</span>test seq<span class="hl sym">=</span> seq<span class="hl sym">-</span>hash<span class="hl sym">)</span>

<span class="hl sym">(</span>defmacro with<span class="hl sym">-</span>smart<span class="hl sym">-</span>dna<span class="hl sym">-</span>hash <span class="hl sym">((</span>hash<span class="hl sym">-</span>access hash<span class="hl sym">-</span>loop <span class="hl sym">&amp;</span>key <span class="hl sym">(</span>vector<span class="hl sym">-</span>threshold <span class="hl num">1048576</span><span class="hl sym">)) (&amp;</span>rest sequence<span class="hl sym">-</span>lengths<span class="hl sym">) &amp;</span>body body<span class="hl sym">)</span>
  <span class="hl sym">(</span>loop <span class="hl sym">:</span>for length <span class="hl sym">:</span>in sequence<span class="hl sym">-</span>lengths
     <span class="hl sym">:</span>for bind <span class="hl sym">= (</span>gensym<span class="hl sym">)</span>
     <span class="hl sym">:</span>for area <span class="hl sym">= (</span>expt <span class="hl num">4</span> length<span class="hl sym">)</span>
     <span class="hl sym">:</span>for vec<span class="hl sym">-</span>p <span class="hl sym">= (&lt;=</span> area vector<span class="hl sym">-</span>threshold<span class="hl sym">)</span>
     <span class="hl sym">:</span>collect <span class="hl sym">`(,</span>bind <span class="hl sym">,(</span>if vec<span class="hl sym">-</span>p
                           <span class="hl sym">`(</span>make<span class="hl sym">-</span>array <span class="hl sym">,</span>area <span class="hl sym">:</span>element<span class="hl sym">-</span>type <span class="hl sym">'</span>fixnum <span class="hl sym">:</span>initial<span class="hl sym">-</span>element <span class="hl num">0</span><span class="hl sym">)</span>
                           <span class="hl sym">`(</span>make<span class="hl sym">-</span>hash<span class="hl sym">-</span>table <span class="hl sym">:</span>test <span class="hl sym">',(</span>if <span class="hl sym">(&lt;</span> area most<span class="hl sym">-</span>positive<span class="hl sym">-</span>fixnum<span class="hl sym">) '</span>seq<span class="hl sym">= '</span>eql<span class="hl sym">)</span>
                                             <span class="hl sym">:</span>rehash<span class="hl sym">-</span>size <span class="hl sym">,(</span>expt <span class="hl num">2</span> <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">-</span> length<span class="hl sym">))</span>
                                             <span class="hl sym">:</span>rehash<span class="hl sym">-</span>threshold <span class="hl num">0.7</span><span class="hl sym">))) :</span>into binds
     <span class="hl sym">:</span>collect <span class="hl sym">`(,</span>length <span class="hl sym">,(</span>if vec<span class="hl sym">-</span>p <span class="hl sym">``(</span>elt <span class="hl sym">,',</span>bind <span class="hl sym">,</span>key<span class="hl sym">) ``(</span>the fixnum <span class="hl sym">(</span>gethash <span class="hl sym">,</span>key <span class="hl sym">,',</span>bind <span class="hl num">0</span><span class="hl sym">)))) :</span>into accesses
     <span class="hl sym">:</span>collect <span class="hl sym">`(,</span>length <span class="hl sym">,(</span>if vec<span class="hl sym">-</span>p
                             <span class="hl sym">``(</span>loop <span class="hl sym">:</span>for i <span class="hl sym">:</span>from <span class="hl num">0</span> <span class="hl sym">:</span>below <span class="hl sym">,',(</span>expt <span class="hl num">4</span> length<span class="hl sym">)</span>
                                  <span class="hl sym">:</span>for <span class="hl sym">,</span>value <span class="hl sym">= (</span>elt <span class="hl sym">,',</span>bind i<span class="hl sym">)</span>
                                  <span class="hl sym">:</span>for <span class="hl sym">,</span>key <span class="hl sym">= (</span>unpack<span class="hl sym">-</span>sequence <span class="hl sym">,',</span>length i<span class="hl sym">)</span>
                                  <span class="hl sym">:</span>unless <span class="hl sym">(</span>zerop <span class="hl sym">,</span>value<span class="hl sym">)</span>
                                  <span class="hl sym">,</span>&#64;loop<span class="hl sym">-</span>keywords<span class="hl sym">)</span>
                             <span class="hl sym">``(</span>loop <span class="hl sym">:</span>for packed<span class="hl sym">-</span>key <span class="hl sym">:</span>being <span class="hl sym">:</span>the <span class="hl sym">:</span>hash<span class="hl sym">-</span>keys <span class="hl sym">:</span>in <span class="hl sym">,',</span>bind
                                  <span class="hl sym">:</span>for <span class="hl sym">,</span>key <span class="hl sym">= (</span>unpack<span class="hl sym">-</span>sequence <span class="hl sym">,',</span>length packed<span class="hl sym">-</span>key<span class="hl sym">)</span>
                                  <span class="hl sym">:</span>for <span class="hl sym">,</span>value <span class="hl sym">= (,',</span>hash<span class="hl sym">-</span>access <span class="hl sym">,',</span>length packed<span class="hl sym">-</span>key<span class="hl sym">)</span>
                                  <span class="hl sym">,</span>&#64;loop<span class="hl sym">-</span>keywords<span class="hl sym">))) :</span>into loops
     <span class="hl sym">:</span>finally <span class="hl sym">(</span>return <span class="hl sym">`(</span>let <span class="hl sym">(,</span>&#64;binds<span class="hl sym">)</span>
                         <span class="hl sym">(</span>macrolet <span class="hl sym">((,</span>hash<span class="hl sym">-</span>access <span class="hl sym">(</span>seq<span class="hl sym">-</span>length key<span class="hl sym">) (</span>ecase seq<span class="hl sym">-</span>length <span class="hl sym">,</span>&#64;accesses<span class="hl sym">))</span>
                                    <span class="hl sym">(,</span>hash<span class="hl sym">-</span>loop <span class="hl sym">((</span>seq<span class="hl sym">-</span>length key value<span class="hl sym">) &amp;</span>rest loop<span class="hl sym">-</span>keywords<span class="hl sym">) (</span>ecase seq<span class="hl sym">-</span>length <span class="hl sym">,</span>&#64;loops<span class="hl sym">)))</span>
                           <span class="hl sym">,</span>&#64;body<span class="hl sym">)))))</span>

<span class="hl sym">(</span>defmacro with<span class="hl sym">-</span>percentage <span class="hl sym">((</span>hash<span class="hl sym">-</span>loop <span class="hl sym">&amp;</span>rest seq<span class="hl sym">-</span>descriptions<span class="hl sym">) &amp;</span>body body<span class="hl sym">)</span>
  <span class="hl sym">(</span>if <span class="hl sym">(</span>null seq<span class="hl sym">-</span>descriptions<span class="hl sym">)</span>
      <span class="hl sym">`(</span>progn <span class="hl sym">,</span>&#64;body<span class="hl sym">)</span>
      <span class="hl sym">(</span>destructuring<span class="hl sym">-</span>bind <span class="hl sym">(</span>seq<span class="hl sym">-</span>bind seq<span class="hl sym">-</span>length<span class="hl sym">)</span>
          <span class="hl sym">(</span>car seq<span class="hl sym">-</span>descriptions<span class="hl sym">)</span>
        <span class="hl sym">`(</span>let <span class="hl sym">((,</span>seq<span class="hl sym">-</span>bind <span class="hl sym">(,</span>hash<span class="hl sym">-</span>loop <span class="hl sym">(,</span>seq<span class="hl sym">-</span>length k v<span class="hl sym">)</span>
                                      <span class="hl sym">:</span>summing v <span class="hl sym">:</span>into total <span class="hl sym">:</span>of<span class="hl sym">-</span>type fixnum
                                      <span class="hl sym">:</span>and <span class="hl sym">:</span>collect k <span class="hl sym">:</span>into seqs
                                      <span class="hl sym">:</span>and <span class="hl sym">:</span>collect v <span class="hl sym">:</span>into counts
                                      <span class="hl sym">:</span>finally <span class="hl sym">(</span>return <span class="hl sym">(</span>mapcar #<span class="hl sym">'</span>list
                                                               seqs
                                                               <span class="hl sym">(</span>mapcar <span class="hl sym">(</span>lambda <span class="hl sym">(</span>count<span class="hl sym">)</span>
                                                                         <span class="hl sym">(</span>declare <span class="hl sym">(</span>type fixnum count<span class="hl sym">))</span>
                                                                         <span class="hl sym">(/ (*</span> count <span class="hl num">100.0</span><span class="hl sym">)</span> total<span class="hl sym">))</span>
                                                                       counts<span class="hl sym">))))))</span>
           <span class="hl sym">(</span>with<span class="hl sym">-</span>percentage <span class="hl sym">(,</span>hash<span class="hl sym">-</span>loop <span class="hl sym">,</span>&#64;<span class="hl sym">(</span>cdr seq<span class="hl sym">-</span>descriptions<span class="hl sym">)) ,</span>&#64;body<span class="hl sym">)))))</span>

<span class="hl sym">(</span>defmacro obtain<span class="hl sym">-</span>seq<span class="hl sym">-</span>count <span class="hl sym">(</span>hash<span class="hl sym">-</span>access seq<span class="hl sym">)</span>
  <span class="hl sym">`(</span>list <span class="hl sym">(,</span>hash<span class="hl sym">-</span>access <span class="hl sym">,(</span>length seq<span class="hl sym">) (</span>pack<span class="hl sym">-</span>sequence <span class="hl sym">,</span>seq<span class="hl sym">))</span> #\Tab <span class="hl sym">,</span>seq<span class="hl sym">))</span>

<span class="hl sym">(</span>defun perform<span class="hl sym">-</span>work <span class="hl sym">(</span>stream<span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>optimize <span class="hl sym">(</span>speed <span class="hl num">3</span><span class="hl sym">) (</span>safety <span class="hl num">0</span><span class="hl sym">) (</span>debug <span class="hl num">0</span><span class="hl sym">)))</span>
  <span class="hl sym">(</span>with<span class="hl sym">-</span>smart<span class="hl sym">-</span>dna<span class="hl sym">-</span>hash <span class="hl sym">(</span>hash<span class="hl sym">-</span>access hash<span class="hl sym">-</span>loop <span class="hl sym">:</span>vector<span class="hl sym">-</span>threshold <span class="hl num">16777216</span><span class="hl sym">)</span>
      <span class="hl sym">(</span><span class="hl num">1 2 3 4 6 12 18</span><span class="hl sym">)</span>
    <span class="hl sym">(</span>macrolet <span class="hl sym">((</span>incf<span class="hl sym">-</span>hash<span class="hl sym">-</span>element <span class="hl sym">(</span>seq<span class="hl sym">-</span>length key<span class="hl sym">)</span>
                 <span class="hl sym">`(</span>incf <span class="hl sym">(</span>hash<span class="hl sym">-</span>access <span class="hl sym">,</span>seq<span class="hl sym">-</span>length <span class="hl sym">,</span>key<span class="hl sym">))))</span>
      <span class="hl sym">(</span>with<span class="hl sym">-</span>dna<span class="hl sym">-</span>analyzed <span class="hl sym">(</span>stream incf<span class="hl sym">-</span>hash<span class="hl sym">-</span>element <span class="hl sym">:</span>block<span class="hl sym">-</span>size <span class="hl num">655350</span><span class="hl sym">)</span> <span class="hl num">1 2 3 4 6 12 18</span><span class="hl sym">)</span>
      <span class="hl sym">(</span>with<span class="hl sym">-</span>percentage <span class="hl sym">(</span>hash<span class="hl sym">-</span>loop <span class="hl sym">(</span>seqs<span class="hl sym">-</span><span class="hl num">1 1</span><span class="hl sym">) (</span>seqs<span class="hl sym">-</span><span class="hl num">2 2</span><span class="hl sym">))</span>
        <span class="hl sym">(</span>values <span class="hl sym">(</span>list seqs<span class="hl sym">-</span><span class="hl num">1</span> seqs<span class="hl sym">-</span><span class="hl num">2</span><span class="hl sym">)</span>
                <span class="hl sym">(</span>list <span class="hl sym">(</span>obtain<span class="hl sym">-</span>seq<span class="hl sym">-</span>count hash<span class="hl sym">-</span>access <span class="hl str">&quot;GGT&quot;</span><span class="hl sym">)</span>
                      <span class="hl sym">(</span>obtain<span class="hl sym">-</span>seq<span class="hl sym">-</span>count hash<span class="hl sym">-</span>access <span class="hl str">&quot;GGTA&quot;</span><span class="hl sym">)</span>
                      <span class="hl sym">(</span>obtain<span class="hl sym">-</span>seq<span class="hl sym">-</span>count hash<span class="hl sym">-</span>access <span class="hl str">&quot;GGTATT&quot;</span><span class="hl sym">)</span>
                      <span class="hl sym">(</span>obtain<span class="hl sym">-</span>seq<span class="hl sym">-</span>count hash<span class="hl sym">-</span>access <span class="hl str">&quot;GGTATTTTAATT&quot;</span><span class="hl sym">)</span>
                      <span class="hl sym">(</span>obtain<span class="hl sym">-</span>seq<span class="hl sym">-</span>count hash<span class="hl sym">-</span>access <span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl sym">)))))))</span>

<span class="hl sym">(</span>defun print<span class="hl sym">-</span>results <span class="hl sym">(</span>seq<span class="hl sym">-</span>freqs seq<span class="hl sym">-</span>counts<span class="hl sym">)</span>
  <span class="hl sym">(</span>labels <span class="hl sym">((</span>compare <span class="hl sym">(</span>a b<span class="hl sym">)</span>
             <span class="hl sym">(</span>cond <span class="hl sym">((&gt; (</span>second a<span class="hl sym">) (</span>second b<span class="hl sym">))</span> t<span class="hl sym">)</span>
                   <span class="hl sym">((&lt; (</span>second a<span class="hl sym">) (</span>second b<span class="hl sym">))</span> nil<span class="hl sym">)</span>
                   <span class="hl sym">(</span>t <span class="hl sym">(</span>string<span class="hl sym">&lt; (</span>first a<span class="hl sym">) (</span>first b<span class="hl sym">)))))</span>
           <span class="hl sym">(</span>print<span class="hl sym">-</span>freq <span class="hl sym">(</span>freq<span class="hl sym">)</span>
             <span class="hl sym">(</span>format t <span class="hl str">&quot;~{~{~a ~3$~}~%~}~%&quot;</span> <span class="hl sym">(</span>sort freq #<span class="hl sym">'</span>compare<span class="hl sym">))))</span>
    <span class="hl sym">(</span>mapc #<span class="hl sym">'</span>print<span class="hl sym">-</span>freq seq<span class="hl sym">-</span>freqs<span class="hl sym">)</span>
    <span class="hl sym">(</span>format t <span class="hl str">&quot;~{~{~a~c~a~}~%~}&quot;</span> seq<span class="hl sym">-</span>counts<span class="hl sym">)))</span>


<span class="hl sym">(</span>defun main <span class="hl sym">()</span>
  <span class="hl sym">(</span>with<span class="hl sym">-</span>open<span class="hl sym">-</span>file <span class="hl sym">(</span>input<span class="hl sym">-</span>s #p<span class="hl str">&quot;/dev/stdin&quot;</span> <span class="hl sym">:</span>external<span class="hl sym">-</span>format <span class="hl sym">:</span>iso<span class="hl sym">-</span><span class="hl num">8859</span><span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
    <span class="hl sym">(</span>multiple<span class="hl sym">-</span>value<span class="hl sym">-</span>bind <span class="hl sym">(</span>freqs counts<span class="hl sym">)</span>
        <span class="hl sym">(</span>perform<span class="hl sym">-</span>work input<span class="hl sym">-</span>s<span class="hl sym">)</span>
      <span class="hl sym">(</span>print<span class="hl sym">-</span>results freqs counts<span class="hl sym">))))</span>


<span class="hl sym">(</span>in<span class="hl sym">-</span>package <span class="hl sym">:</span>cl<span class="hl sym">-</span>user<span class="hl sym">)</span>

<span class="hl sym">(</span>defun main <span class="hl sym">()</span>
  <span class="hl sym">(</span>k<span class="hl sym">-</span>nucleotide<span class="hl sym">::</span>main<span class="hl sym">))</span>

