<span class="hl slc">% The Computer Language Shootout Benchmarks Game</span>
<span class="hl slc">% http://shootout.alioth.debian.org/</span>
<span class="hl slc">%</span>
<span class="hl slc">% Based on work by Anthony Borla</span>
<span class="hl slc">% contributed by Glendon Holst</span>
<span class="hl slc">% ----------------------------------------------------------------------</span>

<span class="hl sym">:-</span> module binarytrees<span class="hl sym">.</span>
<span class="hl sym">:-</span> interface<span class="hl sym">.</span>
<span class="hl sym">:-</span> import_module io<span class="hl sym">.</span>

<span class="hl sym">:-</span> pred main<span class="hl sym">(</span>io<span class="hl sym">::</span>di<span class="hl sym">,</span> io<span class="hl sym">::</span>uo<span class="hl sym">)</span> <span class="hl kwa">is</span> det<span class="hl sym">.</span>

<span class="hl slc">% ----------------------------------------------------------------------</span>

<span class="hl sym">:-</span> implementation<span class="hl sym">.</span>

<span class="hl sym">:-</span> import_module list<span class="hl sym">.</span>
<span class="hl sym">:-</span> import_module int<span class="hl sym">.</span>
<span class="hl sym">:-</span> import_module bool<span class="hl sym">.</span>
<span class="hl sym">:-</span> import_module string<span class="hl sym">.</span>
<span class="hl sym">:-</span> import_module char<span class="hl sym">.</span>
<span class="hl sym">:-</span> import_module exception<span class="hl sym">.</span>

<span class="hl slc">% ----------------------------------------------------------------------</span>

<span class="hl sym">:-</span> type tree<span class="hl sym">(</span>T<span class="hl sym">) ---&gt;</span> nil <span class="hl sym">;</span> node<span class="hl sym">(</span>T<span class="hl sym">,</span> tree<span class="hl sym">(</span>T<span class="hl sym">),</span> tree<span class="hl sym">(</span>T<span class="hl sym">)).</span>

<span class="hl slc">% ----------------------------------------------------------------------</span>

main<span class="hl sym">(!</span>IO<span class="hl sym">) :-</span>
	io<span class="hl sym">.</span>command_line_arguments<span class="hl sym">(</span>Args<span class="hl sym">, !</span>IO<span class="hl sym">),</span>
	<span class="hl sym">(</span>
		if
			Args <span class="hl sym">= [</span>AString<span class="hl sym">|</span>_<span class="hl sym">],</span>
			string<span class="hl sym">.</span>to_int<span class="hl sym">(</span>string<span class="hl sym">.</span>strip<span class="hl sym">(</span>AString<span class="hl sym">),</span> Aint<span class="hl sym">)</span>
		then
			N <span class="hl sym">=</span> Aint
		else
			N <span class="hl kwa">is</span> <span class="hl num">16</span>
	<span class="hl sym">),</span>


  MIN_DEPTH <span class="hl kwa">is</span> <span class="hl num">4</span><span class="hl sym">,</span>

  MinDepth <span class="hl kwa">is</span> MIN_DEPTH <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">,</span>
  <span class="hl sym">(</span>MinDepth <span class="hl sym">&gt;</span> N <span class="hl sym">-&gt;</span> MAX_DEPTH <span class="hl sym">=</span> MinDepth <span class="hl sym">;</span> MAX_DEPTH <span class="hl sym">=</span> N<span class="hl sym">),</span>
  STRETCH_DEPTH <span class="hl kwa">is</span> MAX_DEPTH <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span>

  bottom_up_tree<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> STRETCH_DEPTH<span class="hl sym">,</span> ST<span class="hl sym">),</span>

  check_tree<span class="hl sym">(</span>ST<span class="hl sym">,</span> ITS<span class="hl sym">),</span>
  io<span class="hl sym">.</span>format<span class="hl sym">(</span><span class="hl str">&quot;stretch tree of depth %d</span><span class="hl esc">\t</span> <span class="hl str">check: %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span>
	<span class="hl sym">[</span>i<span class="hl sym">(</span>STRETCH_DEPTH<span class="hl sym">),</span> i<span class="hl sym">(</span>ITS<span class="hl sym">)], !</span>IO<span class="hl sym">),</span>

  bottom_up_tree<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> MAX_DEPTH<span class="hl sym">,</span> LLT<span class="hl sym">),</span>

  descend_trees<span class="hl sym">(</span>MIN_DEPTH<span class="hl sym">,</span> MIN_DEPTH<span class="hl sym">,</span> MAX_DEPTH<span class="hl sym">, !</span>IO<span class="hl sym">),</span>

  check_tree<span class="hl sym">(</span>LLT<span class="hl sym">,</span> ITL<span class="hl sym">),</span>
  io<span class="hl sym">.</span>format<span class="hl sym">(</span><span class="hl str">&quot;long lived tree of depth %d</span><span class="hl esc">\t</span> <span class="hl str">check: %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span>
	<span class="hl sym">[</span>i<span class="hl sym">(</span>MAX_DEPTH<span class="hl sym">),</span> i<span class="hl sym">(</span>ITL<span class="hl sym">)], !</span>IO<span class="hl sym">).</span>

<span class="hl slc">% ------------------------------- %</span>

<span class="hl sym">:-</span> pred descend_trees<span class="hl sym">(</span>int<span class="hl sym">::</span>in<span class="hl sym">,</span> int<span class="hl sym">::</span>in<span class="hl sym">,</span> int<span class="hl sym">::</span>in<span class="hl sym">,</span> io<span class="hl sym">::</span>di<span class="hl sym">,</span> io<span class="hl sym">::</span>uo<span class="hl sym">)</span> <span class="hl kwa">is</span> det<span class="hl sym">.</span>

descend_trees<span class="hl sym">(</span>CurrentDepth<span class="hl sym">,</span> MinDepth<span class="hl sym">,</span> MaxDepth<span class="hl sym">, !</span>IO<span class="hl sym">) :-</span>
<span class="hl sym">(</span>
	CurrentDepth <span class="hl sym">=&lt;</span> MaxDepth <span class="hl sym">-&gt;</span>
    N <span class="hl kwa">is</span> int<span class="hl sym">.</span>pow<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">, (</span>MaxDepth <span class="hl sym">-</span> CurrentDepth <span class="hl sym">+</span> MinDepth<span class="hl sym">)),</span> Iterations <span class="hl kwa">is</span> <span class="hl num">2</span> <span class="hl sym">*</span> N<span class="hl sym">,</span>
    sum_trees<span class="hl sym">(</span>N<span class="hl sym">,</span> CurrentDepth<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> Sum<span class="hl sym">),</span>
    format<span class="hl sym">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\t</span> <span class="hl str">trees of depth %d</span><span class="hl esc">\t</span> <span class="hl str">check: %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span>
		<span class="hl sym">[</span>i<span class="hl sym">(</span>Iterations<span class="hl sym">),</span> i<span class="hl sym">(</span>CurrentDepth<span class="hl sym">),</span> i<span class="hl sym">(</span>Sum<span class="hl sym">)], !</span>IO<span class="hl sym">),</span>
	descend_trees<span class="hl sym">(</span>CurrentDepth <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">,</span> MinDepth<span class="hl sym">,</span> MaxDepth<span class="hl sym">, !</span>IO<span class="hl sym">)</span>
<span class="hl sym">;</span>
    <span class="hl kwa">true</span>
<span class="hl sym">).</span>

<span class="hl slc">% ------------- %</span>

<span class="hl sym">:-</span> pred sum_trees<span class="hl sym">(</span>int<span class="hl sym">::</span>in<span class="hl sym">,</span> int<span class="hl sym">::</span>in<span class="hl sym">,</span> int<span class="hl sym">::</span>in<span class="hl sym">,</span> int<span class="hl sym">::</span>out<span class="hl sym">)</span> <span class="hl kwa">is</span> det<span class="hl sym">.</span>

sum_trees<span class="hl sym">(</span>N<span class="hl sym">,</span> CurrentDepth<span class="hl sym">,</span> AccSum<span class="hl sym">,</span> Sum<span class="hl sym">) :-</span>
<span class="hl sym">(</span>
	N <span class="hl sym">=&lt;</span> <span class="hl num">0</span> <span class="hl sym">-&gt;</span> Sum <span class="hl sym">=</span> AccSum
<span class="hl sym">;</span>
	bottom_up_tree<span class="hl sym">(</span>N<span class="hl sym">,</span> CurrentDepth<span class="hl sym">,</span> TreeLeft<span class="hl sym">),</span>
	bottom_up_tree<span class="hl sym">(-</span><span class="hl num">1</span> <span class="hl sym">*</span> N<span class="hl sym">,</span> CurrentDepth<span class="hl sym">,</span> TreeRight<span class="hl sym">),</span>
	check_tree<span class="hl sym">(</span>TreeLeft<span class="hl sym">,</span> ItemLeft<span class="hl sym">),</span> check_tree<span class="hl sym">(</span>TreeRight<span class="hl sym">,</span> ItemRight<span class="hl sym">),</span>
	sum_trees<span class="hl sym">(</span>N <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> CurrentDepth<span class="hl sym">,</span> AccSum <span class="hl sym">+</span> ItemLeft <span class="hl sym">+</span> ItemRight<span class="hl sym">,</span> Sum<span class="hl sym">)</span>
<span class="hl sym">).</span>

<span class="hl slc">% ------------------------------- %</span>

<span class="hl sym">:-</span> pred make_tree<span class="hl sym">(</span>int<span class="hl sym">::</span>in<span class="hl sym">,</span> tree<span class="hl sym">(</span>int<span class="hl sym">)::</span>in<span class="hl sym">,</span> tree<span class="hl sym">(</span>int<span class="hl sym">)::</span>in<span class="hl sym">,</span> tree<span class="hl sym">(</span>int<span class="hl sym">)::</span>out<span class="hl sym">)</span> <span class="hl kwa">is</span> det<span class="hl sym">.</span>

make_tree<span class="hl sym">(</span>Item<span class="hl sym">,</span> Left<span class="hl sym">,</span> Right<span class="hl sym">,</span> node<span class="hl sym">(</span>Item<span class="hl sym">,</span> Left<span class="hl sym">,</span> Right<span class="hl sym">)).</span>

<span class="hl slc">% ------------- %</span>

<span class="hl sym">:-</span> pred bottom_up_tree<span class="hl sym">(</span>int<span class="hl sym">::</span>in<span class="hl sym">,</span> int<span class="hl sym">::</span>in<span class="hl sym">,</span> tree<span class="hl sym">(</span>int<span class="hl sym">)::</span>out<span class="hl sym">)</span> <span class="hl kwa">is</span> det<span class="hl sym">.</span>

bottom_up_tree<span class="hl sym">(</span>Item<span class="hl sym">,</span> Depth<span class="hl sym">,</span> Tree<span class="hl sym">) :-</span>
<span class="hl sym">(</span>
	Depth <span class="hl sym">=&lt;</span> <span class="hl num">0</span> <span class="hl sym">-&gt;</span> Tree <span class="hl sym">=</span> node<span class="hl sym">(</span>Item<span class="hl sym">,</span> nil<span class="hl sym">,</span> nil<span class="hl sym">)</span>
<span class="hl sym">;</span>
  bottom_up_tree<span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> Item <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> Depth <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> TreeLeft<span class="hl sym">),</span>
  bottom_up_tree<span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> Item<span class="hl sym">,</span> Depth <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> TreeRight<span class="hl sym">),</span>
  make_tree<span class="hl sym">(</span>Item<span class="hl sym">,</span> TreeLeft<span class="hl sym">,</span> TreeRight<span class="hl sym">,</span> Tree<span class="hl sym">)</span>
<span class="hl sym">).</span>

<span class="hl slc">% ------------- %</span>

<span class="hl sym">:-</span> type binarytrees__error <span class="hl sym">---&gt;</span> error<span class="hl sym">.</span>

<span class="hl sym">:-</span> pred check_tree<span class="hl sym">(</span>tree<span class="hl sym">(</span>int<span class="hl sym">)::</span>in<span class="hl sym">,</span> int<span class="hl sym">::</span>out<span class="hl sym">)</span> <span class="hl kwa">is</span> det<span class="hl sym">.</span>

check_tree<span class="hl sym">(</span>Tree<span class="hl sym">,</span> Item<span class="hl sym">) :-</span>
<span class="hl sym">(</span>
	Tree <span class="hl sym">=</span> node<span class="hl sym">(</span>Item0<span class="hl sym">,</span>nil<span class="hl sym">,</span> _<span class="hl sym">) -&gt;</span> Item <span class="hl sym">=</span> Item0
<span class="hl sym">;</span>
	Tree <span class="hl sym">=</span> node<span class="hl sym">(</span>Item0<span class="hl sym">,</span>_<span class="hl sym">,</span> nil<span class="hl sym">) -&gt;</span> Item <span class="hl sym">=</span> Item0
<span class="hl sym">;</span>
	Tree <span class="hl sym">=</span> node<span class="hl sym">(</span>Item0<span class="hl sym">,</span> Left<span class="hl sym">,</span> Right<span class="hl sym">) -&gt;</span>
	check_tree<span class="hl sym">(</span>Left<span class="hl sym">,</span> ItemLeft<span class="hl sym">),</span>
	check_tree<span class="hl sym">(</span>Right<span class="hl sym">,</span> ItemRight<span class="hl sym">),</span>
	Item <span class="hl kwa">is</span> Item0 <span class="hl sym">+</span> ItemLeft <span class="hl sym">-</span> ItemRight
<span class="hl sym">;</span>
	<span class="hl kwb">throw</span><span class="hl sym">(</span>binarytrees__error<span class="hl sym">)</span>
<span class="hl sym">).</span>

<span class="hl slc">% ------------------------------- %</span>
