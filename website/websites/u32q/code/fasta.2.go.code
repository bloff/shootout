<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by The Go Authors.</span>
<span class="hl com"> * Based on C program by by Petr Prokhorenkov.</span>
<span class="hl com"> * flag.Arg hack by Isaac Gouy</span>
<span class="hl com"> */</span>

<span class="hl kwa">package</span> main

<span class="hl kwa">import</span> <span class="hl sym">(</span>
   <span class="hl str">&quot;flag&quot;</span>
   <span class="hl str">&quot;os&quot;</span>
   <span class="hl str">&quot;strconv&quot;</span>
<span class="hl sym">)</span>

<span class="hl kwa">var</span> out <span class="hl sym">=</span> make<span class="hl sym">(</span>buffer<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">32768</span><span class="hl sym">)</span>

<span class="hl slc">// var n = flag.Int(&quot;n&quot;, 1000, &quot;length of result&quot;)</span>
<span class="hl kwa">var</span> n <span class="hl sym">=</span> <span class="hl num">0</span>

<span class="hl kwa">const</span> Line <span class="hl sym">=</span> <span class="hl num">60</span>

<span class="hl kwa">func</span> Repeat<span class="hl sym">(</span>alu <span class="hl sym">[]</span>byte<span class="hl sym">,</span> n int<span class="hl sym">) {</span>
   buf <span class="hl sym">:=</span> append<span class="hl sym">(</span>alu<span class="hl sym">,</span> alu<span class="hl sym">...)</span>
   off <span class="hl sym">:=</span> <span class="hl num">0</span>
   <span class="hl kwa">for</span> n <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl sym">{</span>
      m <span class="hl sym">:=</span> n
      <span class="hl kwa">if</span> m <span class="hl sym">&gt;</span> Line <span class="hl sym">{</span>
         m <span class="hl sym">=</span> Line
      <span class="hl sym">}</span>
      buf1 <span class="hl sym">:=</span> out<span class="hl sym">.</span>NextWrite<span class="hl sym">(</span>m <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
      copy<span class="hl sym">(</span>buf1<span class="hl sym">,</span> buf<span class="hl sym">[</span>off<span class="hl sym">:])</span>
      buf1<span class="hl sym">[</span>m<span class="hl sym">] =</span> '\n'
      <span class="hl kwa">if</span> off <span class="hl sym">+=</span> m<span class="hl sym">;</span> off <span class="hl sym">&gt;=</span> len<span class="hl sym">(</span>alu<span class="hl sym">) {</span>
         off <span class="hl sym">-=</span> len<span class="hl sym">(</span>alu<span class="hl sym">)</span>
      <span class="hl sym">}</span>
      n <span class="hl sym">-=</span> m
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwa">const</span> <span class="hl sym">(</span>
   IM <span class="hl sym">=</span> <span class="hl num">139968</span>
   IA <span class="hl sym">=</span> <span class="hl num">3877</span>
   IC <span class="hl sym">=</span> <span class="hl num">29573</span>

   LookupSize  <span class="hl sym">=</span> <span class="hl num">4096</span>
   LookupScale float64 <span class="hl sym">=</span> LookupSize <span class="hl sym">-</span> <span class="hl num">1</span>
<span class="hl sym">)</span>

<span class="hl kwa">var</span> rand uint32 <span class="hl sym">=</span> <span class="hl num">42</span>

<span class="hl kwa">type</span> Acid <span class="hl kwa">struct</span> <span class="hl sym">{</span>
   sym   byte
   prob  float64
   cprob float64
   next  <span class="hl sym">*</span>Acid
<span class="hl sym">}</span>

<span class="hl kwa">func</span> computeLookup<span class="hl sym">(</span>acid <span class="hl sym">[]</span>Acid<span class="hl sym">) *[</span>LookupSize<span class="hl sym">]*</span>Acid <span class="hl sym">{</span>
   <span class="hl kwa">var</span> lookup <span class="hl sym">[</span>LookupSize<span class="hl sym">]*</span>Acid
   <span class="hl kwa">var</span> p float64
   <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl kwa">range</span> acid <span class="hl sym">{</span>
      p <span class="hl sym">+=</span> acid<span class="hl sym">[</span>i<span class="hl sym">].</span>prob
      acid<span class="hl sym">[</span>i<span class="hl sym">].</span>cprob <span class="hl sym">=</span> p <span class="hl sym">*</span> LookupScale
      <span class="hl kwa">if</span> i <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl sym">{</span>
         acid<span class="hl sym">[</span>i<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">].</span>next <span class="hl sym">= &amp;</span>acid<span class="hl sym">[</span>i<span class="hl sym">]</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
   acid<span class="hl sym">[</span>len<span class="hl sym">(</span>acid<span class="hl sym">)-</span><span class="hl num">1</span><span class="hl sym">].</span>cprob <span class="hl sym">=</span> <span class="hl num">1.0</span> <span class="hl sym">*</span> LookupScale

   j <span class="hl sym">:=</span> <span class="hl num">0</span>
   <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl kwa">range</span> lookup <span class="hl sym">{</span>
      <span class="hl kwa">for</span> acid<span class="hl sym">[</span>j<span class="hl sym">].</span>cprob <span class="hl sym">&lt;</span> float64<span class="hl sym">(</span>i<span class="hl sym">) {</span>
         j<span class="hl sym">++</span>
      <span class="hl sym">}</span>
      lookup<span class="hl sym">[</span>i<span class="hl sym">] = &amp;</span>acid<span class="hl sym">[</span>j<span class="hl sym">]</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">return</span> <span class="hl sym">&amp;</span>lookup
<span class="hl sym">}</span>

<span class="hl kwa">func</span> Random<span class="hl sym">(</span>acid <span class="hl sym">[]</span>Acid<span class="hl sym">,</span> n int<span class="hl sym">) {</span>
   lookup <span class="hl sym">:=</span> computeLookup<span class="hl sym">(</span>acid<span class="hl sym">)</span>
   <span class="hl kwa">for</span> n <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl sym">{</span>
      m <span class="hl sym">:=</span> n
      <span class="hl kwa">if</span> m <span class="hl sym">&gt;</span> Line <span class="hl sym">{</span>
         m <span class="hl sym">=</span> Line
      <span class="hl sym">}</span>
      buf <span class="hl sym">:=</span> out<span class="hl sym">.</span>NextWrite<span class="hl sym">(</span>m <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
      f <span class="hl sym">:=</span> LookupScale <span class="hl sym">/</span> IM
      myrand <span class="hl sym">:=</span> rand
      <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> m<span class="hl sym">;</span> i<span class="hl sym">++ {</span>
         myrand <span class="hl sym">= (</span>myrand<span class="hl sym">*</span>IA <span class="hl sym">+</span> IC<span class="hl sym">) %</span> IM
         r <span class="hl sym">:=</span> float64<span class="hl sym">(</span>int<span class="hl sym">(</span>myrand<span class="hl sym">)) *</span> f
         a <span class="hl sym">:=</span> lookup<span class="hl sym">[</span>int<span class="hl sym">(</span>r<span class="hl sym">)]</span>
         <span class="hl kwa">for</span> a<span class="hl sym">.</span>cprob <span class="hl sym">&lt;</span> r <span class="hl sym">{</span>
            a <span class="hl sym">=</span> a<span class="hl sym">.</span>next
         <span class="hl sym">}</span>
         buf<span class="hl sym">[</span>i<span class="hl sym">] =</span> a<span class="hl sym">.</span>sym
      <span class="hl sym">}</span>
      rand <span class="hl sym">=</span> myrand
      buf<span class="hl sym">[</span>m<span class="hl sym">] =</span> '\n'
      n <span class="hl sym">-=</span> m
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwa">func</span> main<span class="hl sym">() {</span>
   <span class="hl kwa">defer</span> out<span class="hl sym">.</span>Flush<span class="hl sym">()</span>

   flag<span class="hl sym">.</span>Parse<span class="hl sym">()</span>
   <span class="hl kwa">if</span> flag<span class="hl sym">.</span>NArg<span class="hl sym">() &gt;</span> <span class="hl num">0</span> <span class="hl sym">{</span> n<span class="hl sym">,</span>_ <span class="hl sym">=</span> strconv<span class="hl sym">.</span>Atoi<span class="hl sym">(</span> flag<span class="hl sym">.</span>Arg<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">) ) }</span>

   iub <span class="hl sym">:= []</span>Acid<span class="hl sym">{</span>
      <span class="hl sym">{</span>prob<span class="hl sym">:</span> <span class="hl num">0.27</span><span class="hl sym">,</span> sym<span class="hl sym">:</span> 'a'<span class="hl sym">},</span>
      <span class="hl sym">{</span>prob<span class="hl sym">:</span> <span class="hl num">0.12</span><span class="hl sym">,</span> sym<span class="hl sym">:</span> 'c'<span class="hl sym">},</span>
      <span class="hl sym">{</span>prob<span class="hl sym">:</span> <span class="hl num">0.12</span><span class="hl sym">,</span> sym<span class="hl sym">:</span> 'g'<span class="hl sym">},</span>
      <span class="hl sym">{</span>prob<span class="hl sym">:</span> <span class="hl num">0.27</span><span class="hl sym">,</span> sym<span class="hl sym">:</span> 't'<span class="hl sym">},</span>
      <span class="hl sym">{</span>prob<span class="hl sym">:</span> <span class="hl num">0.02</span><span class="hl sym">,</span> sym<span class="hl sym">:</span> 'B'<span class="hl sym">},</span>
      <span class="hl sym">{</span>prob<span class="hl sym">:</span> <span class="hl num">0.02</span><span class="hl sym">,</span> sym<span class="hl sym">:</span> 'D'<span class="hl sym">},</span>
      <span class="hl sym">{</span>prob<span class="hl sym">:</span> <span class="hl num">0.02</span><span class="hl sym">,</span> sym<span class="hl sym">:</span> 'H'<span class="hl sym">},</span>
      <span class="hl sym">{</span>prob<span class="hl sym">:</span> <span class="hl num">0.02</span><span class="hl sym">,</span> sym<span class="hl sym">:</span> 'K'<span class="hl sym">},</span>
      <span class="hl sym">{</span>prob<span class="hl sym">:</span> <span class="hl num">0.02</span><span class="hl sym">,</span> sym<span class="hl sym">:</span> 'M'<span class="hl sym">},</span>
      <span class="hl sym">{</span>prob<span class="hl sym">:</span> <span class="hl num">0.02</span><span class="hl sym">,</span> sym<span class="hl sym">:</span> 'N'<span class="hl sym">},</span>
      <span class="hl sym">{</span>prob<span class="hl sym">:</span> <span class="hl num">0.02</span><span class="hl sym">,</span> sym<span class="hl sym">:</span> 'R'<span class="hl sym">},</span>
      <span class="hl sym">{</span>prob<span class="hl sym">:</span> <span class="hl num">0.02</span><span class="hl sym">,</span> sym<span class="hl sym">:</span> 'S'<span class="hl sym">},</span>
      <span class="hl sym">{</span>prob<span class="hl sym">:</span> <span class="hl num">0.02</span><span class="hl sym">,</span> sym<span class="hl sym">:</span> 'V'<span class="hl sym">},</span>
      <span class="hl sym">{</span>prob<span class="hl sym">:</span> <span class="hl num">0.02</span><span class="hl sym">,</span> sym<span class="hl sym">:</span> 'W'<span class="hl sym">},</span>
      <span class="hl sym">{</span>prob<span class="hl sym">:</span> <span class="hl num">0.02</span><span class="hl sym">,</span> sym<span class="hl sym">:</span> 'Y'<span class="hl sym">},</span>
   <span class="hl sym">}</span>

   homosapiens <span class="hl sym">:= []</span>Acid<span class="hl sym">{</span>
      <span class="hl sym">{</span>prob<span class="hl sym">:</span> <span class="hl num">0.3029549426680</span><span class="hl sym">,</span> sym<span class="hl sym">:</span> 'a'<span class="hl sym">},</span>
      <span class="hl sym">{</span>prob<span class="hl sym">:</span> <span class="hl num">0.1979883004921</span><span class="hl sym">,</span> sym<span class="hl sym">:</span> 'c'<span class="hl sym">},</span>
      <span class="hl sym">{</span>prob<span class="hl sym">:</span> <span class="hl num">0.1975473066391</span><span class="hl sym">,</span> sym<span class="hl sym">:</span> 'g'<span class="hl sym">},</span>
      <span class="hl sym">{</span>prob<span class="hl sym">:</span> <span class="hl num">0.3015094502008</span><span class="hl sym">,</span> sym<span class="hl sym">:</span> 't'<span class="hl sym">},</span>
   <span class="hl sym">}</span>

   alu <span class="hl sym">:= []</span>byte<span class="hl sym">(</span>
      <span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span> <span class="hl sym">+</span>
         <span class="hl str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span> <span class="hl sym">+</span>
         <span class="hl str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span> <span class="hl sym">+</span>
         <span class="hl str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span> <span class="hl sym">+</span>
         <span class="hl str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span> <span class="hl sym">+</span>
         <span class="hl str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span> <span class="hl sym">+</span>
         <span class="hl str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="hl sym">)</span>

   out<span class="hl sym">.</span>WriteString<span class="hl sym">(</span><span class="hl str">&quot;&gt;ONE Homo sapiens alu</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span>
   Repeat<span class="hl sym">(</span>alu<span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">*</span>n<span class="hl sym">)</span>
   out<span class="hl sym">.</span>WriteString<span class="hl sym">(</span><span class="hl str">&quot;&gt;TWO IUB ambiguity codes</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span>
   Random<span class="hl sym">(</span>iub<span class="hl sym">,</span> <span class="hl num">3</span><span class="hl sym">*</span>n<span class="hl sym">)</span>
   out<span class="hl sym">.</span>WriteString<span class="hl sym">(</span><span class="hl str">&quot;&gt;THREE Homo sapiens frequency</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span>
   Random<span class="hl sym">(</span>homosapiens<span class="hl sym">,</span> <span class="hl num">5</span><span class="hl sym">*</span>n<span class="hl sym">)</span>
<span class="hl sym">}</span>


<span class="hl kwa">type</span> buffer <span class="hl sym">[]</span>byte

<span class="hl kwa">func</span> <span class="hl sym">(</span>b <span class="hl sym">*</span>buffer<span class="hl sym">)</span> Flush<span class="hl sym">() {</span>
   p <span class="hl sym">:= *</span>b
   <span class="hl kwa">if</span> len<span class="hl sym">(</span>p<span class="hl sym">) &gt;</span> <span class="hl num">0</span> <span class="hl sym">{</span>
      os<span class="hl sym">.</span>Stdout<span class="hl sym">.</span>Write<span class="hl sym">(</span>p<span class="hl sym">)</span>
   <span class="hl sym">}</span>
   <span class="hl sym">*</span>b <span class="hl sym">=</span> p<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">:</span><span class="hl num">0</span><span class="hl sym">]</span>
<span class="hl sym">}</span>

<span class="hl kwa">func</span> <span class="hl sym">(</span>b <span class="hl sym">*</span>buffer<span class="hl sym">)</span> WriteString<span class="hl sym">(</span>s string<span class="hl sym">) {</span>
   p <span class="hl sym">:=</span> b<span class="hl sym">.</span>NextWrite<span class="hl sym">(</span>len<span class="hl sym">(</span>s<span class="hl sym">))</span>
   copy<span class="hl sym">(</span>p<span class="hl sym">,</span> s<span class="hl sym">)</span>
<span class="hl sym">}</span>

<span class="hl kwa">func</span> <span class="hl sym">(</span>b <span class="hl sym">*</span>buffer<span class="hl sym">)</span> NextWrite<span class="hl sym">(</span>n int<span class="hl sym">) []</span>byte <span class="hl sym">{</span>
   p <span class="hl sym">:= *</span>b
   <span class="hl kwa">if</span> len<span class="hl sym">(</span>p<span class="hl sym">)+</span>n <span class="hl sym">&gt;</span> cap<span class="hl sym">(</span>p<span class="hl sym">) {</span>
      b<span class="hl sym">.</span>Flush<span class="hl sym">()</span>
      p <span class="hl sym">= *</span>b
   <span class="hl sym">}</span>
   out <span class="hl sym">:=</span> p<span class="hl sym">[</span>len<span class="hl sym">(</span>p<span class="hl sym">) :</span> len<span class="hl sym">(</span>p<span class="hl sym">)+</span>n<span class="hl sym">]</span>
   <span class="hl sym">*</span>b <span class="hl sym">=</span> p<span class="hl sym">[:</span>len<span class="hl sym">(</span>p<span class="hl sym">)+</span>n<span class="hl sym">]</span>
   <span class="hl kwa">return</span> out
<span class="hl sym">}</span>
