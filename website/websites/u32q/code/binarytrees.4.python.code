<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://shootout.alioth.debian.org/</span>
<span class="hl slc">#</span>
<span class="hl slc"># contributed by Antoine Pitrou</span>
<span class="hl slc"># modified by Dominique Wahli and Daniel Nanz</span>

<span class="hl kwa">from</span> __future__ <span class="hl kwa">import</span> print_function

<span class="hl kwa">import</span> sys
<span class="hl kwa">import</span> multiprocessing <span class="hl kwa">as</span> mp


<span class="hl kwa">def</span> <span class="hl kwd">make_tree</span><span class="hl sym">(</span>i<span class="hl sym">,</span> d<span class="hl sym">):</span>

    <span class="hl kwa">if</span> d <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">:</span>
        i2 <span class="hl sym">=</span> i <span class="hl sym">+</span> i
        d <span class="hl sym">-=</span> <span class="hl num">1</span>
        <span class="hl kwa">return</span> <span class="hl sym">(</span>i<span class="hl sym">,</span> <span class="hl kwd">make_tree</span><span class="hl sym">(</span>i2 <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> d<span class="hl sym">),</span> <span class="hl kwd">make_tree</span><span class="hl sym">(</span>i2<span class="hl sym">,</span> d<span class="hl sym">))</span>
    <span class="hl kwa">else</span><span class="hl sym">:</span>
        <span class="hl kwa">return</span> <span class="hl sym">(</span>i<span class="hl sym">,</span> <span class="hl kwa">None</span><span class="hl sym">,</span> <span class="hl kwa">None</span><span class="hl sym">)</span>


<span class="hl kwa">def</span> <span class="hl kwd">check_tree</span><span class="hl sym">(</span>n<span class="hl sym">):</span>

    <span class="hl sym">(</span>i<span class="hl sym">,</span> l<span class="hl sym">,</span> r<span class="hl sym">) =</span> n
    <span class="hl kwa">if</span> l <span class="hl kwa">is None</span><span class="hl sym">:</span>
        <span class="hl kwa">return</span> i
    <span class="hl kwa">else</span><span class="hl sym">:</span>
        <span class="hl kwa">return</span> i <span class="hl sym">+</span> <span class="hl kwd">check_tree</span><span class="hl sym">(</span>l<span class="hl sym">) -</span> <span class="hl kwd">check_tree</span><span class="hl sym">(</span>r<span class="hl sym">)</span>


<span class="hl kwa">def</span> <span class="hl kwd">make_and_check</span><span class="hl sym">(</span>dep_iter_msg<span class="hl sym">,</span> cs<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">,</span> make<span class="hl sym">=</span>make_tree<span class="hl sym">,</span> check<span class="hl sym">=</span>check_tree<span class="hl sym">):</span>

    d<span class="hl sym">,</span> iters<span class="hl sym">,</span> msg <span class="hl sym">=</span> dep_iter_msg
    <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> iters <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">):</span>
        cs <span class="hl sym">+=</span> <span class="hl kwd">check</span><span class="hl sym">(</span><span class="hl kwd">make</span><span class="hl sym">(</span>i<span class="hl sym">,</span> d<span class="hl sym">))</span>
        cs <span class="hl sym">+=</span> <span class="hl kwd">check</span><span class="hl sym">(</span><span class="hl kwd">make</span><span class="hl sym">(-</span>i<span class="hl sym">,</span> d<span class="hl sym">))</span>
    <span class="hl kwa">return</span> msg <span class="hl sym">% (</span>i <span class="hl sym">*</span> <span class="hl num">2</span><span class="hl sym">,</span> d<span class="hl sym">,</span> cs<span class="hl sym">)</span>


<span class="hl kwa">def</span> <span class="hl kwd">main</span><span class="hl sym">(</span>n<span class="hl sym">,</span> min_d<span class="hl sym">=</span><span class="hl num">4</span><span class="hl sym">,</span> make<span class="hl sym">=</span>make_tree<span class="hl sym">,</span> check<span class="hl sym">=</span>check_tree<span class="hl sym">):</span>

    max_d <span class="hl sym">=</span> <span class="hl kwb">max</span><span class="hl sym">(</span>min_d <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">,</span> n<span class="hl sym">)</span>
    stretch_d <span class="hl sym">=</span> max_d <span class="hl sym">+</span> <span class="hl num">1</span>
    out <span class="hl sym">= []</span>
    msg <span class="hl sym">= [</span><span class="hl str">'stretch tree of depth %d</span><span class="hl esc">\t</span> <span class="hl str">check: %d'</span><span class="hl sym">,</span>
           <span class="hl str">'%d</span><span class="hl esc">\t</span> <span class="hl str">trees of depth %d</span><span class="hl esc">\t</span> <span class="hl str">check: %d'</span><span class="hl sym">,</span>
           <span class="hl str">'long lived tree of depth %d</span><span class="hl esc">\t</span> <span class="hl str">check: %d'</span><span class="hl sym">]</span>

    out<span class="hl sym">.</span><span class="hl kwd">append</span><span class="hl sym">(</span>msg<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] % (</span>stretch_d<span class="hl sym">,</span> <span class="hl kwd">check</span><span class="hl sym">(</span><span class="hl kwd">make</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> stretch_d<span class="hl sym">))))</span>
    long_lived_tree <span class="hl sym">=</span> <span class="hl kwd">make</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> max_d<span class="hl sym">)</span>

    mmd <span class="hl sym">=</span> max_d <span class="hl sym">+</span> min_d
    dims <span class="hl sym">= []</span>
    <span class="hl kwa">for</span> d <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl sym">(</span>min_d<span class="hl sym">,</span> stretch_d<span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">):</span>
        dims<span class="hl sym">.</span><span class="hl kwd">append</span><span class="hl sym">((</span>d<span class="hl sym">,</span> <span class="hl num">2</span> <span class="hl sym">** (</span>mmd <span class="hl sym">-</span> d <span class="hl sym">),</span> msg<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]))</span>
    out<span class="hl sym">.</span><span class="hl kwd">extend</span><span class="hl sym">(</span>mp<span class="hl sym">.</span><span class="hl kwd">Pool</span><span class="hl sym">().</span><span class="hl kwb">map</span><span class="hl sym">(</span>make_and_check<span class="hl sym">,</span> dims<span class="hl sym">,</span> chunksize<span class="hl sym">=</span><span class="hl num">4</span><span class="hl sym">))</span>

    out<span class="hl sym">.</span><span class="hl kwd">append</span><span class="hl sym">(</span>msg<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">] % (</span>max_d<span class="hl sym">,</span> <span class="hl kwd">check</span><span class="hl sym">(</span>long_lived_tree<span class="hl sym">)))</span>
    <span class="hl kwa">return</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">.</span><span class="hl kwd">join</span><span class="hl sym">(</span>out<span class="hl sym">)</span>


<span class="hl kwa">if</span> __name__ <span class="hl sym">==</span> <span class="hl str">'__main__'</span><span class="hl sym">:</span>
    <span class="hl kwa">print</span><span class="hl sym">(</span><span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span><span class="hl sym">(</span>sys<span class="hl sym">.</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">])))</span>
