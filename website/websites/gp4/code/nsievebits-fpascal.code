<span class="hl com">{ The Computer Language Shootout</span>
<span class="hl com">  http://shootout.alioth.debian.org</span>
<span class="hl com">  contributed by DaniÃ«l Mantione</span>
<span class="hl com">}</span>

<span class="hl kwa">program</span> nsievebits<span class="hl sym">;</span>

<span class="hl kwa">const</span> bpc<span class="hl sym">=</span><span class="hl kwd">sizeof</span><span class="hl sym">(</span>sizeuint<span class="hl sym">)*</span><span class="hl num">8</span><span class="hl sym">;</span>

<span class="hl kwa">type</span> sizeset<span class="hl sym">=</span><span class="hl kwa">set of</span> <span class="hl num">0</span><span class="hl sym">..</span>bpc<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">;</span>

<span class="hl kwa">var</span>  count<span class="hl sym">:</span><span class="hl kwb">cardinal</span><span class="hl sym">;</span>
     data<span class="hl sym">:^</span>sizeset<span class="hl sym">;</span>

<span class="hl kwa">procedure</span> <span class="hl kwd">primes</span><span class="hl sym">(</span>size<span class="hl sym">:</span><span class="hl kwb">cardinal</span><span class="hl sym">);</span>

<span class="hl kwa">var</span> prime<span class="hl sym">,</span>i<span class="hl sym">:</span><span class="hl kwb">cardinal</span><span class="hl sym">;</span>

<span class="hl kwa">begin</span>
  <span class="hl kwd">fillchar</span><span class="hl sym">(</span>data<span class="hl sym">^,(</span>size<span class="hl sym">+</span>bpc<span class="hl sym">)</span> <span class="hl kwa">div</span> <span class="hl num">8</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">);</span>
  count<span class="hl sym">:=</span><span class="hl num">0</span><span class="hl sym">;</span>
  <span class="hl kwa">for</span> prime<span class="hl sym">:=</span><span class="hl num">2</span> <span class="hl kwa">to</span> size <span class="hl kwa">do</span>
    <span class="hl kwa">if not</span><span class="hl sym">((</span>prime <span class="hl kwa">and</span> <span class="hl sym">(</span>bpc<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">))</span> <span class="hl kwa">in</span> data<span class="hl sym">[</span>prime <span class="hl kwa">div</span> bpc<span class="hl sym">])</span> <span class="hl kwa">then</span>
      <span class="hl kwa">begin</span>
        <span class="hl kwd">inc</span><span class="hl sym">(</span>count<span class="hl sym">);</span>
        i<span class="hl sym">:=</span><span class="hl num">2</span><span class="hl sym">*</span>prime<span class="hl sym">;</span>
        <span class="hl kwa">while</span> i<span class="hl sym">&lt;=</span>size <span class="hl kwa">do</span>
          <span class="hl kwa">begin</span>
            <span class="hl kwd">include</span><span class="hl sym">(</span>data<span class="hl sym">[</span>i <span class="hl kwa">div</span> bpc<span class="hl sym">],</span>i <span class="hl kwa">and</span> <span class="hl sym">(</span>bpc<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">));</span>
            i<span class="hl sym">:=</span>i<span class="hl sym">+</span>prime<span class="hl sym">;</span>
          <span class="hl kwa">end</span><span class="hl sym">;</span>
      <span class="hl kwa">end</span><span class="hl sym">;</span>
  <span class="hl kwd">writeln</span><span class="hl sym">(</span><span class="hl str">'Primes up to'</span><span class="hl sym">,</span>size<span class="hl sym">:</span><span class="hl num">9</span><span class="hl sym">,</span>count<span class="hl sym">:</span><span class="hl num">9</span><span class="hl sym">);</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">var</span> n<span class="hl sym">,</span>size<span class="hl sym">:</span><span class="hl kwb">cardinal</span><span class="hl sym">;</span>

<span class="hl kwa">begin</span>
  <span class="hl kwd">val</span><span class="hl sym">(</span><span class="hl kwd">paramstr</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">),</span>n<span class="hl sym">);</span>
  size<span class="hl sym">:=</span><span class="hl num">10000</span> <span class="hl kwa">shl</span> n<span class="hl sym">;</span>
  <span class="hl kwd">getmem</span><span class="hl sym">(</span>data<span class="hl sym">,(</span>size<span class="hl sym">+</span>bpc<span class="hl sym">)</span> <span class="hl kwa">div</span> <span class="hl num">8</span><span class="hl sym">);</span>
  <span class="hl kwd">primes</span><span class="hl sym">(</span>size<span class="hl sym">);</span>
  <span class="hl kwd">primes</span><span class="hl sym">(</span>size <span class="hl kwa">shr</span> <span class="hl num">1</span><span class="hl sym">);</span>
  <span class="hl kwd">primes</span><span class="hl sym">(</span>size <span class="hl kwa">shr</span> <span class="hl num">2</span><span class="hl sym">);</span>
  <span class="hl kwd">dispose</span><span class="hl sym">(</span>data<span class="hl sym">);</span>
<span class="hl kwa">end</span><span class="hl sym">.</span>
