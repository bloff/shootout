<span class="com">(* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Daniël Mantione *)</span>

<span class="kwa">program</span> nsievebits<span class="sym">;</span>

<span class="kwa">const</span> bpc<span class="sym">=</span><span class="kwd">sizeof</span><span class="sym">(</span>sizeuint<span class="sym">)*</span><span class="num">8</span><span class="sym">;</span>

<span class="kwa">type</span> sizeset<span class="sym">=</span><span class="kwa">set of</span> <span class="num">0</span>..bpc<span class="sym">-</span><span class="num">1</span><span class="sym">;</span>

<span class="kwa">var</span>  count<span class="sym">:</span><span class="kwb">cardinal</span><span class="sym">;</span>
     data<span class="sym">:</span>^sizeset<span class="sym">;</span>

<span class="kwa">procedure</span> <span class="kwd">primes</span><span class="sym">(</span>size<span class="sym">:</span><span class="kwb">cardinal</span><span class="sym">);</span>

<span class="kwa">var</span> prime<span class="sym">,</span>i<span class="sym">:</span><span class="kwb">cardinal</span><span class="sym">;</span>

<span class="kwa">begin</span>
  <span class="kwd">fillchar</span><span class="sym">(</span>data^<span class="sym">,(</span>size<span class="sym">+</span>bpc<span class="sym">)</span> <span class="kwa">div</span> <span class="num">8</span><span class="sym">,</span><span class="num">0</span><span class="sym">);</span>
  count<span class="sym">:=</span><span class="num">0</span><span class="sym">;</span>
  <span class="kwa">for</span> prime<span class="sym">:=</span><span class="num">2</span> <span class="kwa">to</span> size <span class="kwa">do</span>
    <span class="kwa">if not</span><span class="sym">((</span>prime <span class="kwa">and</span> <span class="sym">(</span>bpc<span class="sym">-</span><span class="num">1</span><span class="sym">))</span> <span class="kwa">in</span> data<span class="sym">[</span>prime <span class="kwa">div</span> bpc<span class="sym">])</span> <span class="kwa">then</span>
      <span class="kwa">begin</span>
        <span class="kwd">inc</span><span class="sym">(</span>count<span class="sym">);</span>
        i<span class="sym">:=</span><span class="num">2</span><span class="sym">*</span>prime<span class="sym">;</span>
        <span class="kwa">while</span> i<span class="sym">&lt;=</span>size <span class="kwa">do</span>
          <span class="kwa">begin</span>
            <span class="kwd">include</span><span class="sym">(</span>data<span class="sym">[</span>i <span class="kwa">div</span> bpc<span class="sym">],</span>i <span class="kwa">and</span> <span class="sym">(</span>bpc<span class="sym">-</span><span class="num">1</span><span class="sym">));</span>
            i<span class="sym">:=</span>i<span class="sym">+</span>prime<span class="sym">;</span>
          <span class="kwa">end</span><span class="sym">;</span>
      <span class="kwa">end</span><span class="sym">;</span>
  <span class="kwd">writeln</span><span class="sym">(</span><span class="str">'Primes up to'</span><span class="sym">,</span>size<span class="sym">:</span><span class="num">9</span><span class="sym">,</span>count<span class="sym">:</span><span class="num">9</span><span class="sym">);</span>
<span class="kwa">end</span><span class="sym">;</span>

<span class="kwa">var</span> n<span class="sym">,</span>size<span class="sym">:</span><span class="kwb">cardinal</span><span class="sym">;</span>

<span class="kwa">begin</span>
  <span class="kwd">val</span><span class="sym">(</span><span class="kwd">paramstr</span><span class="sym">(</span><span class="num">1</span><span class="sym">),</span>n<span class="sym">);</span>
  size<span class="sym">:=</span><span class="num">10000</span> <span class="kwa">shl</span> n<span class="sym">;</span>
  <span class="kwd">getmem</span><span class="sym">(</span>data<span class="sym">,(</span>size<span class="sym">+</span>bpc<span class="sym">)</span> <span class="kwa">div</span> <span class="num">8</span><span class="sym">);</span>
  <span class="kwd">primes</span><span class="sym">(</span>size<span class="sym">);</span>
  <span class="kwd">primes</span><span class="sym">(</span>size <span class="kwa">shr</span> <span class="num">1</span><span class="sym">);</span>
  <span class="kwd">primes</span><span class="sym">(</span>size <span class="kwa">shr</span> <span class="num">2</span><span class="sym">);</span>
  <span class="kwd">dispose</span><span class="sym">(</span>data<span class="sym">);</span>
<span class="kwa">end</span>.
