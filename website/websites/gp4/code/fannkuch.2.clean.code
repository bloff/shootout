<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy (Clean novice)</span>
<span class="com"></span>
<span class="com">   transliteratation of Sebastian Sylvan's Haskell program</span>
<span class="com">*/</span>

<span class="kwa">module</span> fannkuch
<span class="kwa">import</span> StdEnv<span class="sym">,</span>LanguageShootout

Start <span class="sym">= (</span>foldl <span class="sym">(+++)</span> <span class="str">&quot;&quot;</span> <span class="sym">(</span>map line <span class="sym">(</span>take <span class="num">30</span> xs<span class="sym">))) +++</span>
           <span class="str">&quot;Pfannkuchen(&quot;</span> <span class="sym">+++ (</span>toString n<span class="sym">) +++</span> <span class="str">&quot;) = &quot;</span>
              <span class="sym">+++ (</span>toString flips<span class="sym">) +++</span> <span class="str">&quot;\n&quot;</span>
   <span class="kwa">where</span>
   n <span class="sym">=</span> argi
   xs <span class="sym">=</span> perms <span class="sym">[</span><span class="num">1</span><span class="sym">..</span>n<span class="sym">]</span>
   flips <span class="sym">=</span> fannkuch xs
   line a <span class="sym">= (</span>foldl <span class="sym">(+++)</span> <span class="str">&quot;&quot;</span> <span class="sym">(</span>map toString a<span class="sym">)) +++</span> <span class="str">&quot;\n&quot;</span>


rotate i <span class="sym">[</span>x<span class="sym">:</span>xs<span class="sym">] =</span> a <span class="sym">++ [</span>x<span class="sym">:</span>b<span class="sym">]</span>
   <span class="kwa">where</span> <span class="sym">(</span>a<span class="sym">,</span>b<span class="sym">) =</span> splitAt <span class="sym">(</span>i<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> xs

rev <span class="sym">[</span>x<span class="sym">:</span>xs<span class="sym">] =</span> reverse a <span class="sym">++ [</span>x<span class="sym">:</span>b<span class="sym">]</span>
   <span class="kwa">where</span> <span class="sym">(</span>a<span class="sym">,</span>b<span class="sym">) =</span> splitAt <span class="sym">(</span>x<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> xs

perms a <span class="sym">=</span> foldr perm` <span class="sym">[</span>a<span class="sym">] [</span><span class="num">2</span><span class="sym">..</span>length a<span class="sym">]</span>
   <span class="kwa">where</span> perm` i b <span class="sym">=</span> flatten <span class="sym">[</span>take i <span class="sym">(</span>iterate <span class="sym">(</span>rotate i<span class="sym">)</span> x<span class="sym">) \\</span> x <span class="sym">&lt;-</span> b<span class="sym">]</span>

fannkuch a <span class="sym">=</span> foldl max <span class="num">0</span> <span class="sym">(</span>map flop a<span class="sym">)</span>
   <span class="kwa">where</span>
   flop <span class="sym">[</span><span class="num">1</span><span class="sym">:</span>_<span class="sym">] =</span> <span class="num">0</span>
   flop a     <span class="sym">=</span> <span class="num">1</span> <span class="sym">+</span> flop <span class="sym">(</span>rev a<span class="sym">)</span>
