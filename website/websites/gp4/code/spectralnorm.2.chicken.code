<span class="hl slc">;;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; contributed by Anthony Borla</span>

<span class="hl sym">(</span>require-extension format<span class="hl sym">)</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>approximate n<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>u <span class="hl sym">(</span>make-vector n <span class="hl num">1.0</span><span class="hl sym">))</span>
        <span class="hl sym">(</span>v <span class="hl sym">(</span>make-vector n <span class="hl num">0.0</span><span class="hl sym">))</span>
        <span class="hl sym">(</span>vBv <span class="hl num">0.0</span><span class="hl sym">) (</span>vV <span class="hl num">0.0</span><span class="hl sym">))</span>

    <span class="hl sym">(</span>do <span class="hl sym">((</span>i #e0 <span class="hl sym">(</span>fx<span class="hl sym">+</span> i <span class="hl num">1</span><span class="hl sym">)))</span>
        <span class="hl sym">((</span>fx<span class="hl sym">=</span> <span class="hl num">10</span> i<span class="hl sym">))</span>
      <span class="hl sym">(</span>mulAtAv n u v<span class="hl sym">)</span>
      <span class="hl sym">(</span>mulAtAv n v u<span class="hl sym">))</span>

    <span class="hl sym">(</span>do <span class="hl sym">((</span>i #e0 <span class="hl sym">(</span>fx<span class="hl sym">+</span> i <span class="hl num">1</span><span class="hl sym">)))</span>
        <span class="hl sym">((</span>fx<span class="hl sym">=</span> n i<span class="hl sym">))</span>
      <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> vBv <span class="hl sym">(+</span> vBv <span class="hl sym">(* (</span>vector-ref u i<span class="hl sym">) (</span>vector-ref v i<span class="hl sym">))))</span>
      <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> vV <span class="hl sym">(+</span> vV <span class="hl sym">(* (</span>vector-ref v i<span class="hl sym">) (</span>vector-ref v i<span class="hl sym">)))))</span>

    <span class="hl sym">(</span><span class="hl kwa">sqrt</span> <span class="hl sym">(/</span> vBv vV<span class="hl sym">))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>A i j<span class="hl sym">)</span>
  <span class="hl sym">(/</span> <span class="hl num">1.0</span> <span class="hl sym">(</span>exact-<span class="hl sym">&gt;</span>inexact <span class="hl sym">(</span>fx<span class="hl sym">+ (</span>fx<span class="hl sym">+ (</span>fx<span class="hl sym">/ (</span>fx<span class="hl sym">* (</span>fx<span class="hl sym">+</span> i j<span class="hl sym">) (</span>fx<span class="hl sym">+ (</span>fx<span class="hl sym">+</span> i j<span class="hl sym">)</span> <span class="hl num">1</span><span class="hl sym">))</span> <span class="hl num">2</span><span class="hl sym">)</span> i<span class="hl sym">)</span> <span class="hl num">1</span><span class="hl sym">))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>mulAv n v av<span class="hl sym">)</span>
  <span class="hl sym">(</span>do <span class="hl sym">((</span>i #e0 <span class="hl sym">(</span>fx<span class="hl sym">+</span> i <span class="hl num">1</span><span class="hl sym">)))</span>
      <span class="hl sym">((</span>fx<span class="hl sym">=</span> n i<span class="hl sym">))</span>
    <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> av i <span class="hl num">0.0</span><span class="hl sym">)</span>
    <span class="hl sym">(</span>do <span class="hl sym">((</span>j #e0 <span class="hl sym">(</span>fx<span class="hl sym">+</span> j <span class="hl num">1</span><span class="hl sym">)))</span>
        <span class="hl sym">((</span>fx<span class="hl sym">=</span> n j<span class="hl sym">))</span>
      <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> av i <span class="hl sym">(+ (</span>vector-ref av i<span class="hl sym">) (* (</span>A i j<span class="hl sym">) (</span>vector-ref v j<span class="hl sym">)))))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>mulAtV n v atv<span class="hl sym">)</span>
  <span class="hl sym">(</span>do <span class="hl sym">((</span>i #e0 <span class="hl sym">(</span>fx<span class="hl sym">+</span> i <span class="hl num">1</span><span class="hl sym">)))</span>
      <span class="hl sym">((</span>fx<span class="hl sym">=</span> n i<span class="hl sym">))</span>
    <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> atv i <span class="hl num">0.0</span><span class="hl sym">)</span>
    <span class="hl sym">(</span>do <span class="hl sym">((</span>j #e0 <span class="hl sym">(</span>fx<span class="hl sym">+</span> j <span class="hl num">1</span><span class="hl sym">)))</span>
        <span class="hl sym">((</span>fx<span class="hl sym">=</span> n j<span class="hl sym">))</span>
      <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> atv i <span class="hl sym">(+ (</span>vector-ref atv i<span class="hl sym">) (* (</span>A j i<span class="hl sym">) (</span>vector-ref v j<span class="hl sym">)))))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>mulAtAv n v atav<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>u <span class="hl sym">(</span>make-vector n <span class="hl num">0.0</span><span class="hl sym">)))</span>
    <span class="hl sym">(</span>mulAv n v u<span class="hl sym">)</span>
    <span class="hl sym">(</span>mulAtV n u atav<span class="hl sym">)))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>main args<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>n <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">null</span>? args<span class="hl sym">)</span>
               <span class="hl num">100</span>
               <span class="hl sym">(</span>string-<span class="hl sym">&gt;</span>number <span class="hl sym">(</span><span class="hl kwa">car</span> args<span class="hl sym">)))))</span>

    <span class="hl sym">(</span>format #t <span class="hl str">&quot;~,9F~%&quot;</span> <span class="hl sym">(</span>approximate n<span class="hl sym">))))</span>

<span class="hl sym">(</span>main <span class="hl sym">(</span><span class="hl kwa">command</span>-<span class="hl kwa">line</span>-arguments<span class="hl sym">))</span>

