<span class="slc">\ The Computer Language Shootout</span>
<span class="slc">\ http://shootout.alioth.debian.org/</span>
<span class="slc">\ Contributed by Ian Osgood</span>
<span class="slc">\ modified by Bernd Paysan</span>


<span class="slc">\ read NUM from last command line argument</span>
<span class="num">0</span><span class="sym">.</span> argc <span class="sym">&#64;</span> <span class="num">1</span><span class="sym">-</span> arg <span class="sym">&gt;</span>number <span class="num">2</span><span class="kwa">drop drop constant</span> NUM

import float float also
include locals<span class="sym">.</span>fs

NUM s<span class="sym">&gt;</span>f fconstant FNUM

<span class="sym">:</span> flush  <span class="kwa">drop emit</span> <span class="num">0 128</span> <span class="sym">;</span>
<span class="sym">: ?</span>flush  <span class="kwa">dup</span> <span class="num">128</span> <span class="sym">&lt;</span> <span class="kwa">if</span> flush <span class="kwa">then</span> <span class="sym">;</span>
<span class="sym">:</span> write<span class="sym">-</span>bit <span class="com">( b m f -- b' m' )</span>
  <span class="kwa">if</span> tuck <span class="kwa">or swap then</span>
  <span class="num">2</span><span class="sym">/</span> <span class="kwa">dup</span> <span class="num">0</span><span class="sym">=</span> <span class="kwa">if</span> flush <span class="kwa">then</span> <span class="sym">;</span>

<span class="sym">:</span> mandel <span class="num">0</span>e <span class="num">0</span>e { F<span class="sym">:</span> Zi F<span class="sym">:</span> Zr <span class="sym">--</span> }
  <span class="sym">.</span><span class="str">&quot; P4&quot;</span> <span class="kwa">cr</span> NUM <span class="kwa">dup</span> <span class="sym">.</span> <span class="num">1</span> u<span class="sym">.</span>r <span class="kwa">cr</span>
  <span class="num">0 128</span>  <span class="com">( byte-accumulator bit-mask )</span>
  NUM <span class="num">0</span> <span class="kwa">do</span>
    <span class="kwa">i</span> <span class="num">2</span><span class="sym">*</span> s<span class="sym">&gt;</span>f FNUM f<span class="sym">/</span> <span class="num">1</span>e f<span class="sym">-</span> <span class="kwa">to</span> Zi
    NUM <span class="num">0</span> <span class="kwa">do</span>
      <span class="kwa">i</span> <span class="num">2</span><span class="sym">*</span> s<span class="sym">&gt;</span>f FNUM f<span class="sym">/</span> <span class="num">1.5</span>e f<span class="sym">-</span> <span class="kwa">to</span> Zr
      Zr Zi <span class="num">51</span>
      <span class="kwa">begin</span>  <span class="num">1</span><span class="sym">-</span> <span class="kwa">dup</span>
      <span class="kwa">while</span>  fover fdup f<span class="sym">*</span> fover fdup f<span class="sym">*</span>
             fover fover f<span class="sym">+</span> <span class="num">4</span>e f<span class="sym">&lt;</span>
      <span class="kwa">while</span>  f<span class="sym">-</span> Zr f<span class="sym">+</span> frot frot f<span class="sym">*</span> <span class="num">2</span>e f<span class="sym">*</span> Zi f<span class="sym">+</span>
      <span class="kwa">repeat</span> fdrop fdrop
      <span class="kwa">then</span> <span class="num">0</span><span class="sym">=</span> write<span class="sym">-</span>bit fdrop fdrop
    <span class="kwa">loop</span> <span class="sym">?</span>flush
  <span class="kwa">loop</span> <span class="num">2</span><span class="kwa">drop</span> <span class="sym">;</span>

<span class="slc">\ run and write PPM to stdout</span>
mandel bye  <span class="slc">\ done!</span>
