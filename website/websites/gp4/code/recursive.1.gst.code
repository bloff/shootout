<span class="hl com">&quot;* The Computer Language Shootout</span>
<span class="hl com">    http://shootout.alioth.debian.org/</span>
<span class="hl com">    contributed by Isaac Gouy</span>
<span class="hl com">    modified by Eliot Miranda *&quot;</span><span class="hl sym">!</span>

<span class="hl sym">!</span>Float methodsFor<span class="hl sym">:</span> <span class="hl str">'benchmarking'</span><span class="hl sym">!</span>fib   <span class="hl sym">^</span><span class="hl kwa">self</span> <span class="hl sym">&lt;</span> <span class="hl num">2.0</span> ifTrue<span class="hl sym">: [</span><span class="hl num">1.0</span><span class="hl sym">]</span> ifFalse<span class="hl sym">: [(</span><span class="hl kwa">self</span> <span class="hl sym">-</span> <span class="hl num">2.0</span><span class="hl sym">)</span> fib <span class="hl sym">+ (</span><span class="hl kwa">self</span> <span class="hl sym">-</span> <span class="hl num">1.0</span><span class="hl sym">)</span> fib<span class="hl sym">]! !!</span>Float methodsFor<span class="hl sym">:</span> <span class="hl str">'benchmarking'</span><span class="hl sym">!</span>tak<span class="hl sym">:</span> y z<span class="hl sym">:</span> z   <span class="hl sym">^</span>y <span class="hl sym">&lt;</span> <span class="hl kwa">self</span>       ifTrue<span class="hl sym">: [((</span><span class="hl kwa">self</span> <span class="hl sym">-</span> <span class="hl num">1.0</span><span class="hl sym">)</span> tak<span class="hl sym">:</span> y z<span class="hl sym">:</span> z<span class="hl sym">)</span> tak<span class="hl sym">:        ((</span>y <span class="hl sym">-</span> <span class="hl num">1.0</span><span class="hl sym">)</span> tak<span class="hl sym">:</span> z z<span class="hl sym">:</span> <span class="hl kwa">self</span><span class="hl sym">)</span> z<span class="hl sym">: ((</span>z <span class="hl sym">-</span> <span class="hl num">1.0</span><span class="hl sym">)</span> tak<span class="hl sym">:</span> <span class="hl kwa">self</span> z<span class="hl sym">:</span> y<span class="hl sym">)]</span>      ifFalse<span class="hl sym">: [</span>z<span class="hl sym">]! !!</span>SmallInteger methodsFor<span class="hl sym">:</span> <span class="hl str">'benchmarking'</span><span class="hl sym">!</span>ack<span class="hl sym">:</span> aSmallInteger   <span class="hl sym">^</span><span class="hl kwa">self</span> <span class="hl sym">==</span> <span class="hl num">0</span>      ifTrue<span class="hl sym">: [</span>aSmallInteger <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">]</span>      ifFalse<span class="hl sym">: [</span>         aSmallInteger <span class="hl sym">==</span> <span class="hl num">0</span>            ifTrue<span class="hl sym">: [</span><span class="hl kwa">self</span> <span class="hl sym">-</span> <span class="hl num">1</span> ack<span class="hl sym">:</span>  <span class="hl num">1</span><span class="hl sym">]</span>            ifFalse<span class="hl sym">: [</span><span class="hl kwa">self</span> <span class="hl sym">-</span> <span class="hl num">1</span> ack<span class="hl sym">: (</span><span class="hl kwa">self</span> ack<span class="hl sym">:</span> aSmallInteger <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)] ]! !!</span>SmallInteger methodsFor<span class="hl sym">:</span> <span class="hl str">'benchmarking'</span><span class="hl sym">!</span>fib   <span class="hl sym">^</span><span class="hl kwa">self</span> <span class="hl sym">&lt;</span> <span class="hl num">2</span> ifTrue<span class="hl sym">: [</span><span class="hl num">1</span><span class="hl sym">]</span> ifFalse<span class="hl sym">: [(</span><span class="hl kwa">self</span> <span class="hl sym">-</span> <span class="hl num">2</span><span class="hl sym">)</span> fib <span class="hl sym">+ (</span><span class="hl kwa">self</span> <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span> fib<span class="hl sym">]! !!</span>SmallInteger methodsFor<span class="hl sym">:</span> <span class="hl str">'benchmarking'</span><span class="hl sym">!</span>tak<span class="hl sym">:</span> y z<span class="hl sym">:</span> z   <span class="hl sym">^</span>y <span class="hl sym">&lt;</span> <span class="hl kwa">self</span>       ifTrue<span class="hl sym">: [((</span><span class="hl kwa">self</span> <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span> tak<span class="hl sym">:</span> y z<span class="hl sym">:</span> z<span class="hl sym">)</span> tak<span class="hl sym">:        ((</span>y <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span> tak<span class="hl sym">:</span> z z<span class="hl sym">:</span> <span class="hl kwa">self</span><span class="hl sym">)</span> z<span class="hl sym">: ((</span>z <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span> tak<span class="hl sym">:</span> <span class="hl kwa">self</span> z<span class="hl sym">:</span> y<span class="hl sym">)]</span>      ifFalse<span class="hl sym">: [</span>z<span class="hl sym">]! !!</span>Tests class methodsFor<span class="hl sym">:</span> <span class="hl str">'benchmarking'</span><span class="hl sym">!</span>recursive<span class="hl sym">:</span> nArg to<span class="hl sym">:</span> output   <span class="hl sym">|</span> n <span class="hl sym">|</span>   n <span class="hl sym">:=</span> nArg<span class="hl sym">.</span>   output       nextPutAll<span class="hl sym">:</span> <span class="hl str">'Ack(3,'</span><span class="hl sym">,</span> n printString<span class="hl sym">,</span> <span class="hl str">'): '</span><span class="hl sym">;</span> print<span class="hl sym">: (</span><span class="hl num">3</span> ack<span class="hl sym">:</span> n<span class="hl sym">);</span> nl<span class="hl sym">;</span>      nextPutAll<span class="hl sym">:</span> <span class="hl str">'Fib('</span><span class="hl sym">;</span> print<span class="hl sym">:</span> <span class="hl num">27.0</span><span class="hl sym">+</span>n digits<span class="hl sym">:</span> <span class="hl num">1</span><span class="hl sym">;</span> nextPutAll<span class="hl sym">:</span> <span class="hl str">'): '</span><span class="hl sym">;</span>          print<span class="hl sym">: (</span><span class="hl num">27.0</span>d0<span class="hl sym">+</span>n<span class="hl sym">)</span> fib digits<span class="hl sym">:</span> <span class="hl num">1</span><span class="hl sym">;</span> nl<span class="hl sym">.</span>   n <span class="hl sym">:=</span> n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">.</span>   output       nextPutAll<span class="hl sym">:</span> <span class="hl str">'Tak('</span><span class="hl sym">, (</span><span class="hl num">3</span><span class="hl sym">*</span>n<span class="hl sym">)</span> printString<span class="hl sym">,</span> <span class="hl str">','</span><span class="hl sym">,         (</span><span class="hl num">2</span><span class="hl sym">*</span>n<span class="hl sym">)</span> printString<span class="hl sym">,</span> <span class="hl str">','</span><span class="hl sym">,</span> n printString<span class="hl sym">,</span> <span class="hl str">'): '</span><span class="hl sym">,           (</span><span class="hl num">3</span><span class="hl sym">*</span>n tak<span class="hl sym">:</span> <span class="hl num">2</span><span class="hl sym">*</span>n z<span class="hl sym">:</span> n<span class="hl sym">)</span> printString<span class="hl sym">;</span> nl<span class="hl sym">;</span>      nextPutAll<span class="hl sym">:</span> <span class="hl str">'Fib(3): '</span><span class="hl sym">;</span> print<span class="hl sym">:</span> <span class="hl num">3</span> fib<span class="hl sym">;</span> nl<span class="hl sym">;</span>      nextPutAll<span class="hl sym">:</span> <span class="hl str">'Tak(3.0,2.0,1.0): '</span><span class="hl sym">;</span>           print<span class="hl sym">: (</span><span class="hl num">3.0</span>d0 tak<span class="hl sym">:</span> <span class="hl num">2.0</span>d0 z<span class="hl sym">:</span> <span class="hl num">1.0</span>d0<span class="hl sym">)</span> digits<span class="hl sym">:</span> <span class="hl num">1</span><span class="hl sym">;</span> nl<span class="hl sym">! !!</span>Tests class methodsFor<span class="hl sym">:</span> <span class="hl str">'benchmark scripts'</span><span class="hl sym">!</span>recursive   <span class="hl kwa">self</span> recursive<span class="hl sym">:</span> <span class="hl kwa">self</span> arg to<span class="hl sym">:</span> <span class="hl kwa">self</span> stdout<span class="hl sym">.   ^</span><span class="hl str">''</span><span class="hl sym">! !</span>

Tests recursive<span class="hl sym">!</span>
