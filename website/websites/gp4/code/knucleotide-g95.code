<span class="hl slc">! -*- mode: f90 -*-</span>
<span class="hl slc">!</span>
<span class="hl slc">! The Computer Language Shootout Benchmarks</span>
<span class="hl slc">! http://shootout.alioth.debian.org/</span>
<span class="hl slc">!</span>
<span class="hl slc">! contributed by Steve Decker</span>
<span class="hl slc">! using the hash function posted by Rich Townsend to comp.lang.fortran</span>
<span class="hl slc">! on 5 October 2005.</span>
<span class="hl slc">! compilation:</span>
<span class="hl slc">!    g95 -O1 knucleotide.f90</span>
<span class="hl slc">!    ifort -O3 -ip knucleotide.f90</span>
<span class="hl slc">!</span>
<span class="hl slc">! This implementation requires TR15581</span>

module knuc_mod
  implicit none
  private
  public <span class="hl sym">::</span> init_table<span class="hl sym">,</span> read_frame<span class="hl sym">,</span> keys_of_given_len<span class="hl sym">,</span> cnt

  integer<span class="hl sym">,</span> parameter <span class="hl sym">::</span> MaxWordLen <span class="hl sym">=</span> <span class="hl num">18</span>

  type<span class="hl sym">,</span> public <span class="hl sym">::</span> key
     integer                   <span class="hl sym">::</span> count <span class="hl sym">=</span> <span class="hl num">0</span>
     character<span class="hl sym">(</span>len<span class="hl sym">=</span>MaxWordLen<span class="hl sym">) ::</span> word <span class="hl sym">=</span> <span class="hl str">&quot;&quot;</span>
  end type key

  type<span class="hl sym">,</span> public <span class="hl sym">::</span> table
     private
     integer <span class="hl sym">::</span> hashBits<span class="hl sym">,</span> maxWords<span class="hl sym">,</span> nWords
     type<span class="hl sym">(</span>key<span class="hl sym">),</span> allocatable<span class="hl sym">,</span> dimension<span class="hl sym">(:) ::</span> words
  end type table

contains

  pure subroutine init_table<span class="hl sym">(</span>kNuc<span class="hl sym">,</span> nBits<span class="hl sym">)</span>
    type<span class="hl sym">(</span>table<span class="hl sym">),</span> intent<span class="hl sym">(</span>out<span class="hl sym">) ::</span> kNuc
    integer<span class="hl sym">,</span>     intent<span class="hl sym">(</span>in<span class="hl sym">)  ::</span> nBits

    kNuc <span class="hl sym">=</span> table<span class="hl sym">(</span>nBits<span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">**</span>nBits<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> null<span class="hl sym">())</span>
    allocate<span class="hl sym">(</span>kNuc<span class="hl sym">%</span>words<span class="hl sym">(</span>kNuc<span class="hl sym">%</span>maxWords<span class="hl sym">))</span>
  end subroutine init_table

  subroutine read_frame<span class="hl sym">(</span>buf<span class="hl sym">,</span> n<span class="hl sym">,</span> length<span class="hl sym">,</span> kNuc<span class="hl sym">)</span>
    character<span class="hl sym">,</span> dimension<span class="hl sym">(:),</span> intent<span class="hl sym">(</span>in<span class="hl sym">)    ::</span> buf
    integer<span class="hl sym">,</span>                 intent<span class="hl sym">(</span>in<span class="hl sym">)    ::</span> n<span class="hl sym">,</span> length
    type<span class="hl sym">(</span>table<span class="hl sym">),</span>             intent<span class="hl sym">(</span>inout<span class="hl sym">) ::</span> kNuc

    integer               <span class="hl sym">::</span> i<span class="hl sym">,</span> j
    character<span class="hl sym">(</span>len<span class="hl sym">=</span>length<span class="hl sym">) ::</span> word

    do i <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">,</span> n
       do j <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">,</span> length
          word<span class="hl sym">(</span>j<span class="hl sym">:</span>j<span class="hl sym">) =</span> buf<span class="hl sym">(</span>i<span class="hl sym">+</span>j<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
       end do
       call add<span class="hl sym">(</span>kNuc<span class="hl sym">,</span> word<span class="hl sym">)</span>
    end do
  end subroutine read_frame

  subroutine add<span class="hl sym">(</span>kNuc<span class="hl sym">,</span> word<span class="hl sym">)</span>
    type<span class="hl sym">(</span>table<span class="hl sym">),</span>      intent<span class="hl sym">(</span>inout<span class="hl sym">) ::</span> kNuc
    character<span class="hl sym">(</span>len<span class="hl sym">=*),</span> intent<span class="hl sym">(</span>in<span class="hl sym">)    ::</span> word

    integer <span class="hl sym">::</span> m

    m <span class="hl sym">=</span> hash_value<span class="hl sym">(</span>word<span class="hl sym">,</span> kNuc<span class="hl sym">%</span>maxWords<span class="hl sym">)</span>
    do
       if <span class="hl sym">(</span>kNuc<span class="hl sym">%</span>words<span class="hl sym">(</span>m<span class="hl sym">)%</span>count <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span> then
          kNuc<span class="hl sym">%</span>words<span class="hl sym">(</span>m<span class="hl sym">) =</span> key<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> word<span class="hl sym">)</span>
          kNuc<span class="hl sym">%</span>nWords <span class="hl sym">=</span> kNuc<span class="hl sym">%</span>nWords <span class="hl sym">+</span> <span class="hl num">1</span>
          if <span class="hl sym">(</span>kNuc<span class="hl sym">%</span>nWords <span class="hl sym">&gt;</span> kNuc<span class="hl sym">%</span>maxWords<span class="hl sym">/</span><span class="hl num">2</span><span class="hl sym">)</span> call resize_table<span class="hl sym">(</span>kNuc<span class="hl sym">)</span>
          exit
       else if <span class="hl sym">(</span>kNuc<span class="hl sym">%</span>words<span class="hl sym">(</span>m<span class="hl sym">)%</span>word <span class="hl sym">==</span> word<span class="hl sym">)</span> then
          kNuc<span class="hl sym">%</span>words<span class="hl sym">(</span>m<span class="hl sym">)%</span>count <span class="hl sym">=</span> kNuc<span class="hl sym">%</span>words<span class="hl sym">(</span>m<span class="hl sym">)%</span>count <span class="hl sym">+</span> <span class="hl num">1</span>
          exit
       end if
       m <span class="hl sym">=</span> merge<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> m<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> m <span class="hl sym">==</span> kNuc<span class="hl sym">%</span>maxWords<span class="hl sym">)</span>
    end do
  end subroutine add

  subroutine resize_table<span class="hl sym">(</span>kNuc<span class="hl sym">)</span>
    type<span class="hl sym">(</span>table<span class="hl sym">),</span> intent<span class="hl sym">(</span>inout<span class="hl sym">) ::</span> kNuc

    integer     <span class="hl sym">::</span> i<span class="hl sym">,</span> m
    type<span class="hl sym">(</span>table<span class="hl sym">) ::</span> temp

    temp <span class="hl sym">=</span> table<span class="hl sym">(</span>kNuc<span class="hl sym">%</span>hashBits <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">2</span> <span class="hl sym">*</span> kNuc<span class="hl sym">%</span>maxWords<span class="hl sym">,</span> kNuc<span class="hl sym">%</span>nWords<span class="hl sym">,</span> null<span class="hl sym">())</span>
    allocate<span class="hl sym">(</span>temp<span class="hl sym">%</span>words<span class="hl sym">(</span>temp<span class="hl sym">%</span>maxWords<span class="hl sym">))</span>

    do i <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">,</span> kNuc<span class="hl sym">%</span>maxWords
       if <span class="hl sym">(</span>kNuc<span class="hl sym">%</span>words<span class="hl sym">(</span>i<span class="hl sym">)%</span>count <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> then
          m <span class="hl sym">=</span> hash_value<span class="hl sym">(</span>trim<span class="hl sym">(</span>kNuc<span class="hl sym">%</span>words<span class="hl sym">(</span>i<span class="hl sym">)%</span>word<span class="hl sym">),</span> temp<span class="hl sym">%</span>maxWords<span class="hl sym">)</span>
          do
             if <span class="hl sym">(</span>temp<span class="hl sym">%</span>words<span class="hl sym">(</span>m<span class="hl sym">)%</span>count <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span> then
                temp<span class="hl sym">%</span>words<span class="hl sym">(</span>m<span class="hl sym">) =</span> kNuc<span class="hl sym">%</span>words<span class="hl sym">(</span>i<span class="hl sym">)</span>
                exit
             end if
             m <span class="hl sym">=</span> merge<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> m<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> m <span class="hl sym">==</span> temp<span class="hl sym">%</span>maxWords<span class="hl sym">)</span>
          end do
       end if
    end do

    kNuc <span class="hl sym">=</span> temp
  end subroutine resize_table

  pure function keys_of_given_len<span class="hl sym">(</span>kNuc<span class="hl sym">,</span> length<span class="hl sym">)</span>
    type<span class="hl sym">(</span>table<span class="hl sym">),</span> intent<span class="hl sym">(</span>in<span class="hl sym">) ::</span> kNuc
    integer<span class="hl sym">,</span>     intent<span class="hl sym">(</span>in<span class="hl sym">) ::</span> length
    type<span class="hl sym">(</span>key<span class="hl sym">),</span> dimension<span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">**</span>length<span class="hl sym">) ::</span> keys_of_given_len

    integer <span class="hl sym">::</span> i<span class="hl sym">,</span> n

    n <span class="hl sym">=</span> <span class="hl num">1</span>
    do i <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">,</span> kNuc<span class="hl sym">%</span>maxWords
       if <span class="hl sym">(</span>len_trim<span class="hl sym">(</span>kNuc<span class="hl sym">%</span>words<span class="hl sym">(</span>i<span class="hl sym">)%</span>word<span class="hl sym">) ==</span> length<span class="hl sym">)</span> then
          keys_of_given_len<span class="hl sym">(</span>n<span class="hl sym">) =</span> kNuc<span class="hl sym">%</span>words<span class="hl sym">(</span>i<span class="hl sym">)</span>
          n <span class="hl sym">=</span> n <span class="hl sym">+</span> <span class="hl num">1</span>
          if <span class="hl sym">(</span>n <span class="hl sym">&gt;</span> size<span class="hl sym">(</span>keys_of_given_len<span class="hl sym">))</span> exit
       end if
    end do
  end function keys_of_given_len

  integer function cnt<span class="hl sym">(</span>kNuc<span class="hl sym">,</span> string<span class="hl sym">)</span>
    type<span class="hl sym">(</span>table<span class="hl sym">),</span> intent<span class="hl sym">(</span>in<span class="hl sym">)      ::</span> kNuc
    character<span class="hl sym">(</span>len<span class="hl sym">=*),</span> intent<span class="hl sym">(</span>in<span class="hl sym">) ::</span> string

    integer <span class="hl sym">::</span> m

    m <span class="hl sym">=</span> hash_value<span class="hl sym">(</span>string<span class="hl sym">,</span> kNuc<span class="hl sym">%</span>maxWords<span class="hl sym">)</span>
    do
       if <span class="hl sym">(</span>kNuc<span class="hl sym">%</span>words<span class="hl sym">(</span>m<span class="hl sym">)%</span>word <span class="hl sym">==</span> string .or. kNuc<span class="hl sym">%</span>words<span class="hl sym">(</span>m<span class="hl sym">)%</span>count <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span> then
          cnt <span class="hl sym">=</span> kNuc<span class="hl sym">%</span>words<span class="hl sym">(</span>m<span class="hl sym">)%</span>count
          exit
       end if
       m <span class="hl sym">=</span> merge<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> m<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> m <span class="hl sym">==</span> kNuc<span class="hl sym">%</span>maxWords<span class="hl sym">)</span>
    end do
  end function cnt

  integer function hash_value<span class="hl sym">(</span>key<span class="hl sym">,</span> range<span class="hl sym">)</span>
    character<span class="hl sym">(</span>len<span class="hl sym">=*),</span> intent<span class="hl sym">(</span>in<span class="hl sym">) ::</span> key
    integer<span class="hl sym">,</span>          intent<span class="hl sym">(</span>in<span class="hl sym">) ::</span> range

    integer <span class="hl sym">::</span> len_key<span class="hl sym">,</span> a<span class="hl sym">,</span> b<span class="hl sym">,</span> c<span class="hl sym">,</span> k

    <span class="hl slc">! Hash the key into a code, using the algorithm</span>
    <span class="hl slc">! described by Bob Jenkins at:</span>
    <span class="hl slc">!  http://burtleburtle.net/bob/hash/doobs.html</span>
    <span class="hl slc">!</span>
    <span class="hl slc">! Note that range should be a power of 2, and</span>
    <span class="hl slc">! that the 32-bit algorithm is used</span>

    len_key <span class="hl sym">=</span> len<span class="hl sym">(</span>key<span class="hl sym">)</span>

    a <span class="hl sym">= -</span><span class="hl num">1640531527</span> <span class="hl slc">! 0x9E3779B9</span>
    b <span class="hl sym">=</span> a
    c <span class="hl sym">=</span> <span class="hl num">305419896</span>   <span class="hl slc">! 0x12345678</span>

    k <span class="hl sym">=</span> <span class="hl num">1</span>

    do
       if <span class="hl sym">(</span>len_key <span class="hl sym">&lt;</span> <span class="hl num">12</span><span class="hl sym">)</span> exit

       <span class="hl slc">! Pack the key into 32 bits</span>
       a <span class="hl sym">=</span> a <span class="hl sym">+</span> ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">:</span>k<span class="hl sym">)) +</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)),</span> <span class="hl num">8</span><span class="hl sym">) +  &amp;</span>
            ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">)),</span> <span class="hl num">16</span><span class="hl sym">) +</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">3</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">3</span><span class="hl sym">)),</span> <span class="hl num">24</span><span class="hl sym">)</span>
       b <span class="hl sym">=</span> b <span class="hl sym">+</span> ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">4</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">4</span><span class="hl sym">)) +</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">5</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">5</span><span class="hl sym">)),</span> <span class="hl num">8</span><span class="hl sym">) +  &amp;</span>
            ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">6</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">6</span><span class="hl sym">)),</span> <span class="hl num">16</span><span class="hl sym">) +</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">7</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">7</span><span class="hl sym">)),</span> <span class="hl num">24</span><span class="hl sym">)</span>
       c <span class="hl sym">=</span> c <span class="hl sym">+</span> ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">8</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">8</span><span class="hl sym">)) +</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">9</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">9</span><span class="hl sym">)),</span> <span class="hl num">8</span><span class="hl sym">) +  &amp;</span>
            ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">10</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">10</span><span class="hl sym">)),</span> <span class="hl num">16</span><span class="hl sym">) +</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">11</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">11</span><span class="hl sym">)),</span> <span class="hl num">24</span><span class="hl sym">)</span>

       <span class="hl slc">! Mix it up</span>
       call hash_mix<span class="hl sym">()</span>
       k <span class="hl sym">=</span> k <span class="hl sym">+</span> <span class="hl num">12</span>
       len_key <span class="hl sym">=</span> len_key <span class="hl sym">-</span> <span class="hl num">12</span>
    end do

    c <span class="hl sym">=</span> c <span class="hl sym">+</span> len_key

    <span class="hl slc">! Process remaining bits</span>
    select case<span class="hl sym">(</span>len_key<span class="hl sym">)</span>
    case<span class="hl sym">(</span><span class="hl num">11</span><span class="hl sym">)</span>
       c <span class="hl sym">=</span> c <span class="hl sym">+</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">10</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">10</span><span class="hl sym">)),</span><span class="hl num">24</span><span class="hl sym">)  &amp;</span>
            <span class="hl sym">+</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">9</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">9</span><span class="hl sym">)),</span><span class="hl num">16</span><span class="hl sym">) +</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">8</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">8</span><span class="hl sym">)),</span><span class="hl num">8</span><span class="hl sym">)</span>
       b <span class="hl sym">=</span> b <span class="hl sym">+</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">7</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">7</span><span class="hl sym">)),</span><span class="hl num">24</span><span class="hl sym">) +</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">6</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">6</span><span class="hl sym">)),</span><span class="hl num">16</span><span class="hl sym">)  &amp;</span>
            <span class="hl sym">+</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">5</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">5</span><span class="hl sym">)),</span><span class="hl num">8</span><span class="hl sym">) +</span> ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">4</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">4</span><span class="hl sym">))</span>
       a <span class="hl sym">=</span> a <span class="hl sym">+</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">3</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">3</span><span class="hl sym">)),</span><span class="hl num">24</span><span class="hl sym">) +</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">)),</span><span class="hl num">16</span><span class="hl sym">)  &amp;</span>
            <span class="hl sym">+</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)),</span><span class="hl num">8</span><span class="hl sym">) +</span> ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">:</span>k<span class="hl sym">))</span>
    case<span class="hl sym">(</span><span class="hl num">10</span><span class="hl sym">)</span>
       c <span class="hl sym">=</span> c <span class="hl sym">+</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">9</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">9</span><span class="hl sym">)),</span><span class="hl num">16</span><span class="hl sym">) +</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">8</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">8</span><span class="hl sym">)),</span><span class="hl num">8</span><span class="hl sym">)</span>
       b <span class="hl sym">=</span> b <span class="hl sym">+</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">7</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">7</span><span class="hl sym">)),</span><span class="hl num">24</span><span class="hl sym">) +</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">6</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">6</span><span class="hl sym">)),</span><span class="hl num">16</span><span class="hl sym">)  &amp;</span>
            <span class="hl sym">+</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">5</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">5</span><span class="hl sym">)),</span><span class="hl num">8</span><span class="hl sym">) +</span> ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">4</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">4</span><span class="hl sym">))</span>
       a <span class="hl sym">=</span> a <span class="hl sym">+</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">3</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">3</span><span class="hl sym">)),</span><span class="hl num">24</span><span class="hl sym">) +</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">)),</span><span class="hl num">16</span><span class="hl sym">)  &amp;</span>
            <span class="hl sym">+</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)),</span><span class="hl num">8</span><span class="hl sym">) +</span> ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">:</span>k<span class="hl sym">))</span>
    case<span class="hl sym">(</span><span class="hl num">9</span><span class="hl sym">)</span>
       c <span class="hl sym">=</span> c <span class="hl sym">+</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">8</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">8</span><span class="hl sym">)),</span><span class="hl num">8</span><span class="hl sym">)</span>
       b <span class="hl sym">=</span> b <span class="hl sym">+</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">7</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">7</span><span class="hl sym">)),</span><span class="hl num">24</span><span class="hl sym">) +</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">6</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">6</span><span class="hl sym">)),</span><span class="hl num">16</span><span class="hl sym">)  &amp;</span>
            <span class="hl sym">+</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">5</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">5</span><span class="hl sym">)),</span><span class="hl num">8</span><span class="hl sym">) +</span> ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">4</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">4</span><span class="hl sym">))</span>
       a <span class="hl sym">=</span> a <span class="hl sym">+</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">3</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">3</span><span class="hl sym">)),</span><span class="hl num">24</span><span class="hl sym">) +</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">)),</span><span class="hl num">16</span><span class="hl sym">)  &amp;</span>
            <span class="hl sym">+</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)),</span><span class="hl num">8</span><span class="hl sym">) +</span> ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">:</span>k<span class="hl sym">))</span>
    case<span class="hl sym">(</span><span class="hl num">8</span><span class="hl sym">)</span>
       b <span class="hl sym">=</span> b <span class="hl sym">+</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">7</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">7</span><span class="hl sym">)),</span><span class="hl num">24</span><span class="hl sym">) +</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">6</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">6</span><span class="hl sym">)),</span><span class="hl num">16</span><span class="hl sym">)  &amp;</span>
            <span class="hl sym">+</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">5</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">5</span><span class="hl sym">)),</span><span class="hl num">8</span><span class="hl sym">) +</span> ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">4</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">4</span><span class="hl sym">))</span>
       a <span class="hl sym">=</span> a <span class="hl sym">+</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">3</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">3</span><span class="hl sym">)),</span><span class="hl num">24</span><span class="hl sym">) +</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">)),</span><span class="hl num">16</span><span class="hl sym">)  &amp;</span>
            <span class="hl sym">+</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)),</span><span class="hl num">8</span><span class="hl sym">) +</span> ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">:</span>k<span class="hl sym">))</span>
    case<span class="hl sym">(</span><span class="hl num">7</span><span class="hl sym">)</span>
       b <span class="hl sym">=</span> b <span class="hl sym">+</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">6</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">6</span><span class="hl sym">)),</span><span class="hl num">16</span><span class="hl sym">) +</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">5</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">5</span><span class="hl sym">)),</span><span class="hl num">8</span><span class="hl sym">)  &amp;</span>
            <span class="hl sym">+</span> ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">4</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">4</span><span class="hl sym">))</span>
       a <span class="hl sym">=</span> a <span class="hl sym">+</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">3</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">3</span><span class="hl sym">)),</span><span class="hl num">24</span><span class="hl sym">) +</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">)),</span><span class="hl num">16</span><span class="hl sym">)  &amp;</span>
            <span class="hl sym">+</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)),</span><span class="hl num">8</span><span class="hl sym">) +</span> ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">:</span>k<span class="hl sym">))</span>
    case<span class="hl sym">(</span><span class="hl num">6</span><span class="hl sym">)</span>
       b <span class="hl sym">=</span> b <span class="hl sym">+</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">5</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">5</span><span class="hl sym">)),</span><span class="hl num">8</span><span class="hl sym">) +</span> ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">4</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">4</span><span class="hl sym">))</span>
       a <span class="hl sym">=</span> a <span class="hl sym">+</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">3</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">3</span><span class="hl sym">)),</span><span class="hl num">24</span><span class="hl sym">) +</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">)),</span><span class="hl num">16</span><span class="hl sym">)  &amp;</span>
            <span class="hl sym">+</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)),</span><span class="hl num">8</span><span class="hl sym">) +</span> ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">:</span>k<span class="hl sym">))</span>
    case<span class="hl sym">(</span><span class="hl num">5</span><span class="hl sym">)</span>
       b <span class="hl sym">=</span> b <span class="hl sym">+</span> ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">4</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">4</span><span class="hl sym">))</span>
       a <span class="hl sym">=</span> a <span class="hl sym">+</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">3</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">3</span><span class="hl sym">)),</span><span class="hl num">24</span><span class="hl sym">) +</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">)),</span><span class="hl num">16</span><span class="hl sym">)  &amp;</span>
            <span class="hl sym">+</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)),</span><span class="hl num">8</span><span class="hl sym">) +</span> ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">:</span>k<span class="hl sym">))</span>
    case<span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">)</span>
       a <span class="hl sym">=</span> a <span class="hl sym">+</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">3</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">3</span><span class="hl sym">)),</span><span class="hl num">24</span><span class="hl sym">) +</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">)),</span><span class="hl num">16</span><span class="hl sym">)  &amp;</span>
            <span class="hl sym">+</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)),</span><span class="hl num">8</span><span class="hl sym">) +</span> ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">:</span>k<span class="hl sym">))</span>
    case<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">)</span>
       a <span class="hl sym">=</span> a <span class="hl sym">+</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">)),</span><span class="hl num">16</span><span class="hl sym">) +</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)),</span><span class="hl num">8</span><span class="hl sym">)  &amp;</span>
            <span class="hl sym">+</span> ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">:</span>k<span class="hl sym">))</span>
    case<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">)</span>
       a <span class="hl sym">=</span> a <span class="hl sym">+</span> ishft<span class="hl sym">(</span>ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">:</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)),</span><span class="hl num">8</span><span class="hl sym">) +</span> ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">:</span>k<span class="hl sym">))</span>
    case<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>
       a <span class="hl sym">=</span> a <span class="hl sym">+</span> ichar<span class="hl sym">(</span>key<span class="hl sym">(</span>k<span class="hl sym">:</span>k<span class="hl sym">))</span>
    end select

    call hash_mix<span class="hl sym">()</span>

    hash_value <span class="hl sym">=</span> iand<span class="hl sym">(</span>c<span class="hl sym">,</span> range <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">) +</span> <span class="hl num">1</span>

  contains

    subroutine hash_mix
      <span class="hl slc">! Mix a, b and c</span>
      a <span class="hl sym">=</span> ieor<span class="hl sym">(</span>a <span class="hl sym">-</span> b <span class="hl sym">-</span> c<span class="hl sym">,</span> ishft<span class="hl sym">(</span>c<span class="hl sym">, -</span><span class="hl num">13</span><span class="hl sym">))</span>
      b <span class="hl sym">=</span> ieor<span class="hl sym">(</span>b <span class="hl sym">-</span> c <span class="hl sym">-</span> a<span class="hl sym">,</span> ishft<span class="hl sym">(</span>a<span class="hl sym">,</span> <span class="hl num">8</span><span class="hl sym">))</span>
      c <span class="hl sym">=</span> ieor<span class="hl sym">(</span>c <span class="hl sym">-</span> a <span class="hl sym">-</span> b<span class="hl sym">,</span> ishft<span class="hl sym">(</span>b<span class="hl sym">, -</span><span class="hl num">13</span><span class="hl sym">))</span>

      a <span class="hl sym">=</span> ieor<span class="hl sym">(</span>a <span class="hl sym">-</span> b <span class="hl sym">-</span> c<span class="hl sym">,</span> ishft<span class="hl sym">(</span>c<span class="hl sym">, -</span><span class="hl num">12</span><span class="hl sym">))</span>
      b <span class="hl sym">=</span> ieor<span class="hl sym">(</span>b <span class="hl sym">-</span> c <span class="hl sym">-</span> a<span class="hl sym">,</span> ishft<span class="hl sym">(</span>a<span class="hl sym">,</span> <span class="hl num">16</span><span class="hl sym">))</span>
      c <span class="hl sym">=</span> ieor<span class="hl sym">(</span>c <span class="hl sym">-</span> a <span class="hl sym">-</span> b<span class="hl sym">,</span> ishft<span class="hl sym">(</span>b<span class="hl sym">, -</span><span class="hl num">5</span><span class="hl sym">))</span>

      a <span class="hl sym">=</span> ieor<span class="hl sym">(</span>a <span class="hl sym">-</span> b <span class="hl sym">-</span> c<span class="hl sym">,</span> ishft<span class="hl sym">(</span>c<span class="hl sym">, -</span><span class="hl num">3</span><span class="hl sym">))</span>
      b <span class="hl sym">=</span> ieor<span class="hl sym">(</span>b <span class="hl sym">-</span> c <span class="hl sym">-</span> a<span class="hl sym">,</span> ishft<span class="hl sym">(</span>a<span class="hl sym">,</span> <span class="hl num">10</span><span class="hl sym">))</span>
      c <span class="hl sym">=</span> ieor<span class="hl sym">(</span>c <span class="hl sym">-</span> a <span class="hl sym">-</span> b<span class="hl sym">,</span> ishft<span class="hl sym">(</span>b<span class="hl sym">, -</span><span class="hl num">15</span><span class="hl sym">))</span>
    end subroutine hash_mix
  end function hash_value
end module knuc_mod

program knucleotide
  use knuc_mod
  implicit none

  integer<span class="hl sym">,</span> parameter <span class="hl sym">::</span> LineLen <span class="hl sym">=</span> <span class="hl num">60</span><span class="hl sym">,</span> InitialTableSize <span class="hl sym">=</span> <span class="hl num">1</span>

  integer <span class="hl sym">::</span> bufferSize <span class="hl sym">=</span> <span class="hl num">16384</span><span class="hl sym">,</span> stat<span class="hl sym">,</span> n <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> i
  logical <span class="hl sym">::</span> atThirdPart <span class="hl sym">=</span> .false.
  type<span class="hl sym">(</span>table<span class="hl sym">) ::</span> kn
  character<span class="hl sym">(</span>len<span class="hl sym">=</span>LineLen<span class="hl sym">) ::</span> line
  character<span class="hl sym">,</span> dimension<span class="hl sym">(:),</span> allocatable <span class="hl sym">::</span> buffer<span class="hl sym">,</span> tempBuffer

  character<span class="hl sym">,</span> dimension<span class="hl sym">(</span><span class="hl num">65</span><span class="hl sym">:</span><span class="hl num">116</span><span class="hl sym">),</span> parameter <span class="hl sym">::</span> Codes <span class="hl sym">= (/</span> <span class="hl str">&quot;A&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot; &quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;C&quot;</span><span class="hl sym">,  &amp;</span>
       <span class="hl sym">(</span><span class="hl str">&quot; &quot;</span><span class="hl sym">,</span> i <span class="hl sym">=</span> <span class="hl num">68</span><span class="hl sym">,</span> <span class="hl num">70</span><span class="hl sym">),</span> <span class="hl str">&quot;G&quot;</span><span class="hl sym">, (</span><span class="hl str">&quot; &quot;</span><span class="hl sym">,</span> i <span class="hl sym">=</span> <span class="hl num">72</span><span class="hl sym">,</span> <span class="hl num">83</span><span class="hl sym">),</span> <span class="hl str">&quot;T&quot;</span><span class="hl sym">, (</span><span class="hl str">&quot; &quot;</span><span class="hl sym">,</span> i <span class="hl sym">=</span> <span class="hl num">85</span><span class="hl sym">,</span> <span class="hl num">96</span><span class="hl sym">),  &amp;</span>
       <span class="hl str">&quot;A&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot; &quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;C&quot;</span><span class="hl sym">, (</span><span class="hl str">&quot; &quot;</span><span class="hl sym">,</span> i <span class="hl sym">=</span> <span class="hl num">100</span><span class="hl sym">,</span> <span class="hl num">102</span><span class="hl sym">),</span> <span class="hl str">&quot;G&quot;</span><span class="hl sym">, (</span><span class="hl str">&quot; &quot;</span><span class="hl sym">,</span> i <span class="hl sym">=</span> <span class="hl num">104</span><span class="hl sym">,</span> <span class="hl num">115</span><span class="hl sym">),</span> <span class="hl str">&quot;T&quot;</span> <span class="hl sym">/)</span>

  allocate<span class="hl sym">(</span>buffer<span class="hl sym">(</span>bufferSize<span class="hl sym">))</span>

  <span class="hl slc">! Read FASTA file line-by-line, extracting sequence three, and converting to</span>
  <span class="hl slc">! uppercase.</span>
  do
     read<span class="hl sym">(*,</span> <span class="hl str">&quot;(a)&quot;</span><span class="hl sym">,</span> iostat<span class="hl sym">=</span>stat<span class="hl sym">)</span> line
     if <span class="hl sym">(</span>stat <span class="hl sym">/=</span> <span class="hl num">0</span><span class="hl sym">)</span> exit
     if <span class="hl sym">(</span>.not. atThirdPart<span class="hl sym">)</span> then
        atThirdPart <span class="hl sym">=</span> line<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">:</span><span class="hl num">3</span><span class="hl sym">) ==</span> <span class="hl str">&quot;&gt;TH&quot;</span>
     else
        if <span class="hl sym">(</span>n<span class="hl sym">+</span>LineLen <span class="hl sym">&gt;</span> bufferSize<span class="hl sym">)</span> then
           allocate<span class="hl sym">(</span>tempBuffer<span class="hl sym">(</span>bufferSize<span class="hl sym">))</span>
           tempBuffer <span class="hl sym">=</span> buffer
           deallocate<span class="hl sym">(</span>buffer<span class="hl sym">)</span>
           allocate<span class="hl sym">(</span>buffer<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>bufferSize<span class="hl sym">))</span>
           buffer<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">:</span>bufferSize<span class="hl sym">) =</span> tempBuffer
           buffer<span class="hl sym">(</span>bufferSize<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">:</span><span class="hl num">2</span><span class="hl sym">*</span>bufferSize<span class="hl sym">) =</span> <span class="hl str">&quot; &quot;</span>
           deallocate<span class="hl sym">(</span>tempBuffer<span class="hl sym">)</span>
           bufferSize <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">*</span>bufferSize
        end if
        do i <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">,</span> LineLen
           buffer<span class="hl sym">(</span>n<span class="hl sym">+</span>i<span class="hl sym">) =</span> Codes<span class="hl sym">(</span>iachar<span class="hl sym">(</span>line<span class="hl sym">(</span>i<span class="hl sym">:</span>i<span class="hl sym">)))</span>
        end do
        n <span class="hl sym">=</span> n <span class="hl sym">+</span> LineLen
     end if
  end do

  n <span class="hl sym">=</span> minloc<span class="hl sym">(</span>iachar<span class="hl sym">(</span>buffer<span class="hl sym">),</span><span class="hl num">1</span><span class="hl sym">) -</span> <span class="hl num">1</span>

  call init_table<span class="hl sym">(</span>kn<span class="hl sym">,</span> InitialTableSize<span class="hl sym">)</span>

  call write_frequencies<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>
  call write_frequencies<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">)</span>

  call write_count<span class="hl sym">(</span><span class="hl str">&quot;GGT&quot;</span><span class="hl sym">)</span>
  call write_count<span class="hl sym">(</span><span class="hl str">&quot;GGTA&quot;</span><span class="hl sym">)</span>
  call write_count<span class="hl sym">(</span><span class="hl str">&quot;GGTATT&quot;</span><span class="hl sym">)</span>
  call write_count<span class="hl sym">(</span><span class="hl str">&quot;GGTATTTTAATT&quot;</span><span class="hl sym">)</span>
  call write_count<span class="hl sym">(</span><span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl sym">)</span>

contains

  subroutine write_frequencies<span class="hl sym">(</span>length<span class="hl sym">)</span>
    integer<span class="hl sym">,</span> intent<span class="hl sym">(</span>in<span class="hl sym">) ::</span> length

    integer <span class="hl sym">::</span> numNuc<span class="hl sym">,</span> j
    type<span class="hl sym">(</span>key<span class="hl sym">),</span> dimension<span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">**</span>length<span class="hl sym">) ::</span> nucleotides
    type<span class="hl sym">(</span>key<span class="hl sym">) ::</span> temp

    numNuc <span class="hl sym">=</span> n <span class="hl sym">-</span> length <span class="hl sym">+</span> <span class="hl num">1</span>

    call read_frame<span class="hl sym">(</span>buffer<span class="hl sym">,</span> numNuc<span class="hl sym">,</span> length<span class="hl sym">,</span> kn<span class="hl sym">)</span>

    nucleotides <span class="hl sym">=</span> keys_of_given_len<span class="hl sym">(</span>kn<span class="hl sym">,</span> length<span class="hl sym">)</span>

    <span class="hl slc">! Insertion sort</span>
    do i <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">,</span> size<span class="hl sym">(</span>nucleotides<span class="hl sym">)</span>
       temp <span class="hl sym">=</span> nucleotides<span class="hl sym">(</span>i<span class="hl sym">)</span>
       do j <span class="hl sym">=</span> i<span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">, -</span><span class="hl num">1</span>
          if <span class="hl sym">(</span>nucleotides<span class="hl sym">(</span>j<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)%</span>count <span class="hl sym">&gt;</span> temp<span class="hl sym">%</span>count .or.  <span class="hl sym">&amp;</span>
               nucleotides<span class="hl sym">(</span>j<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)%</span>count <span class="hl sym">==</span> temp<span class="hl sym">%</span>count .and.  <span class="hl sym">&amp;</span>
               nucleotides<span class="hl sym">(</span>j<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)%</span>word <span class="hl sym">&lt;</span> temp<span class="hl sym">%</span>word<span class="hl sym">)</span> exit
          nucleotides<span class="hl sym">(</span>j<span class="hl sym">) =</span> nucleotides<span class="hl sym">(</span>j<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
       end do
       nucleotides<span class="hl sym">(</span>j<span class="hl sym">) =</span> temp
    end do

    do i <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">,</span> size<span class="hl sym">(</span>nucleotides<span class="hl sym">)</span>
       write<span class="hl sym">(*,</span> <span class="hl str">&quot;(a2,f6.3)&quot;</span><span class="hl sym">)</span> nucleotides<span class="hl sym">(</span>i<span class="hl sym">)%</span>word<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">:</span><span class="hl num">2</span><span class="hl sym">),  &amp;</span>
            <span class="hl num">100</span>. <span class="hl sym">*</span> nucleotides<span class="hl sym">(</span>i<span class="hl sym">)%</span>count <span class="hl sym">/</span> real<span class="hl sym">(</span>numNuc<span class="hl sym">)</span>
    end do
    write<span class="hl sym">(*,</span> <span class="hl str">&quot;(a)&quot;</span><span class="hl sym">)</span> <span class="hl str">&quot;&quot;</span>
  end subroutine write_frequencies

  subroutine write_count<span class="hl sym">(</span>string<span class="hl sym">)</span>
    character<span class="hl sym">(</span>len<span class="hl sym">=*),</span> intent<span class="hl sym">(</span>in<span class="hl sym">) ::</span> string

    character<span class="hl sym">,</span> parameter <span class="hl sym">::</span> tab <span class="hl sym">=</span> achar<span class="hl sym">(</span><span class="hl num">9</span><span class="hl sym">)</span>
    integer <span class="hl sym">::</span> length<span class="hl sym">,</span> numNuc

    length <span class="hl sym">=</span> len<span class="hl sym">(</span>string<span class="hl sym">)</span>
    numNuc <span class="hl sym">=</span> n <span class="hl sym">-</span> length <span class="hl sym">+</span> <span class="hl num">1</span>

    call read_frame<span class="hl sym">(</span>buffer<span class="hl sym">,</span> numNuc<span class="hl sym">,</span> length<span class="hl sym">,</span> kn<span class="hl sym">)</span>

    write<span class="hl sym">(*,</span> <span class="hl str">&quot;(i0,a)&quot;</span><span class="hl sym">)</span> cnt<span class="hl sym">(</span>kn<span class="hl sym">,</span> string<span class="hl sym">),</span> tab<span class="hl sym">//</span>string
  end subroutine write_count
end program knucleotide
