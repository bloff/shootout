<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> * contributed contributed by Colin Gibbs</span>
<span class="hl com"> */</span>

<span class="hl dir">#include &lt;stdio.h&gt;</span>
<span class="hl dir">#include &lt;stdlib.h&gt;</span>
<span class="hl dir">#include &lt;ucontext.h&gt;</span>

<span class="hl dir">#define STACK_SIZE 1024</span>

<span class="hl kwb">struct</span> thread_context <span class="hl sym">{</span>
   <span class="hl kwb">struct</span> thread_context <span class="hl sym">*</span>next<span class="hl sym">;</span>
   ucontext_t ctx<span class="hl sym">;</span>
   <span class="hl kwb">int</span> value<span class="hl sym">;</span>
   <span class="hl kwb">char</span> stack<span class="hl sym">[</span>STACK_SIZE<span class="hl sym">];</span>
<span class="hl sym">};</span>

<span class="hl kwb">static void</span> <span class="hl kwd">thread</span><span class="hl sym">(</span><span class="hl kwb">struct</span> thread_context <span class="hl sym">*</span>c<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwa">while</span> <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">) {</span>
      c<span class="hl sym">-&gt;</span>next<span class="hl sym">-&gt;</span>value <span class="hl sym">=</span> c<span class="hl sym">-&gt;</span>value <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl kwd">swapcontext</span><span class="hl sym">(&amp;</span>c<span class="hl sym">-&gt;</span>ctx<span class="hl sym">, &amp;</span>c<span class="hl sym">-&gt;</span>next<span class="hl sym">-&gt;</span>ctx<span class="hl sym">);</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwb">static void</span> <span class="hl kwd">create_threads</span><span class="hl sym">(</span><span class="hl kwb">struct</span> thread_context <span class="hl sym">**</span>head<span class="hl sym">,</span> <span class="hl kwb">struct</span> thread_context <span class="hl sym">**</span>tail<span class="hl sym">,</span> <span class="hl kwb">int</span> n<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwb">struct</span> thread_context <span class="hl sym">*</span>c<span class="hl sym">;</span>
   <span class="hl kwc">typedef</span> <span class="hl kwb">void</span> <span class="hl sym">(*</span>thread_t<span class="hl sym">)(</span><span class="hl kwb">void</span><span class="hl sym">);</span>

   c <span class="hl sym">=</span> <span class="hl kwd">malloc</span><span class="hl sym">(</span><span class="hl kwa">sizeof</span><span class="hl sym">(*</span>c<span class="hl sym">));</span>
   <span class="hl sym">*</span>head <span class="hl sym">=</span> c<span class="hl sym">;</span>

   <span class="hl kwd">getcontext</span><span class="hl sym">(&amp;</span>c<span class="hl sym">-&gt;</span>ctx<span class="hl sym">);</span>
   c<span class="hl sym">-&gt;</span>ctx<span class="hl sym">.</span>uc_stack<span class="hl sym">.</span>ss_sp <span class="hl sym">=</span> c<span class="hl sym">-&gt;</span>stack<span class="hl sym">;</span>
   c<span class="hl sym">-&gt;</span>ctx<span class="hl sym">.</span>uc_stack<span class="hl sym">.</span>ss_size <span class="hl sym">=</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span>c<span class="hl sym">-&gt;</span>stack<span class="hl sym">);</span>
   <span class="hl kwd">makecontext</span><span class="hl sym">(&amp;</span>c<span class="hl sym">-&gt;</span>ctx<span class="hl sym">, (</span>thread_t<span class="hl sym">)</span>thread<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> c<span class="hl sym">);</span>

   <span class="hl kwa">if</span> <span class="hl sym">(</span>n <span class="hl sym">&gt;</span> <span class="hl num">1</span><span class="hl sym">) {</span>
      <span class="hl kwd">create_threads</span><span class="hl sym">(&amp;</span>c<span class="hl sym">-&gt;</span>next<span class="hl sym">,</span> tail<span class="hl sym">,</span> n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">);</span>
   <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
      c<span class="hl sym">-&gt;</span>next <span class="hl sym">=</span> NULL<span class="hl sym">;</span>
      <span class="hl sym">*</span>tail <span class="hl sym">=</span> c<span class="hl sym">;</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwb">static int</span> <span class="hl kwd">call_threads</span><span class="hl sym">(</span><span class="hl kwb">struct</span> thread_context <span class="hl sym">*</span>head<span class="hl sym">,</span> <span class="hl kwb">struct</span> thread_context <span class="hl sym">*</span>tail<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwb">struct</span> thread_context here<span class="hl sym">;</span>
   tail<span class="hl sym">-&gt;</span>next <span class="hl sym">= &amp;</span>here<span class="hl sym">;</span>
   head<span class="hl sym">-&gt;</span>value <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwd">swapcontext</span><span class="hl sym">(&amp;</span>here<span class="hl sym">.</span>ctx<span class="hl sym">, &amp;</span>head<span class="hl sym">-&gt;</span>ctx<span class="hl sym">);</span>
   <span class="hl kwa">return</span> here<span class="hl sym">.</span>value<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">**</span>argv<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwb">int</span> n<span class="hl sym">,</span> i<span class="hl sym">,</span> count<span class="hl sym">;</span>
   <span class="hl kwb">struct</span> thread_context <span class="hl sym">*</span>head<span class="hl sym">, *</span>tail<span class="hl sym">;</span>

   n <span class="hl sym">=</span> <span class="hl kwd">atoi</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]);</span>
   <span class="hl kwd">create_threads</span><span class="hl sym">(&amp;</span>head<span class="hl sym">, &amp;</span>tail<span class="hl sym">,</span> <span class="hl num">500</span><span class="hl sym">);</span>

   count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> n<span class="hl sym">;</span> i<span class="hl sym">++)</span>
      count <span class="hl sym">+=</span> <span class="hl kwd">call_threads</span><span class="hl sym">(</span>head<span class="hl sym">,</span> tail<span class="hl sym">);</span>

   <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> count<span class="hl sym">);</span>

   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>
