<span class="slc">' The Computer Language Shootout</span>
<span class="slc">' http://shootout.alioth.debian.org/</span>
<span class="slc">' contributed by Simon Nash (yetifoot)</span>
<span class="slc">' converted to FreeBASIC from the gcc c version by Mike Pall</span>

#include <span class="str">&quot;crt.bi&quot;</span>
#include <span class="str">&quot;gmp.bi&quot;</span>

Option Escape

<span class="kwa">Type</span> ctx_t
  <span class="kwa">As</span> mpz_t q<span class="sym">,</span> r<span class="sym">,</span> s<span class="sym">,</span> t    <span class="slc">' Transformation matrix components.</span>
  <span class="kwa">As</span> mpz_t u<span class="sym">,</span> v<span class="sym">,</span> w       <span class="slc">' Temporary numbers.</span>
  <span class="kwa">As</span> <span class="kwb">Integer</span> d<span class="sym">,</span> i<span class="sym">,</span> n     <span class="slc">' Counters.</span>
  <span class="kwa">As</span> ZString <span class="sym">*</span> <span class="num">11</span> digits <span class="slc">' Accumulated digits for one line.</span>
<span class="kwa">End Type</span>
<span class="slc">'</span>
<span class="slc">' Compose matrix with numbers on the right.</span>
<span class="kwa">Sub</span> compose_r<span class="sym">(</span>c <span class="kwa">As</span> ctx_t ptr<span class="sym">,</span> bq <span class="kwa">As</span> <span class="kwb">Integer</span><span class="sym">,</span> br <span class="kwa">As</span> <span class="kwb">Integer</span><span class="sym">,</span> bs <span class="kwa">As</span> <span class="kwb">Integer</span><span class="sym">,</span> bt <span class="kwa">As</span> <span class="kwb">Integer</span><span class="sym">)</span>
  mpz_mul_si<span class="sym">(</span>&#64;c<span class="sym">-&gt;</span>u<span class="sym">,</span> &#64;c<span class="sym">-&gt;</span>r<span class="sym">,</span> bs<span class="sym">)</span>
  mpz_mul_si<span class="sym">(</span>&#64;c<span class="sym">-&gt;</span>r<span class="sym">,</span> &#64;c<span class="sym">-&gt;</span>r<span class="sym">,</span> bq<span class="sym">)</span>
  mpz_mul_si<span class="sym">(</span>&#64;c<span class="sym">-&gt;</span>v<span class="sym">,</span> &#64;c<span class="sym">-&gt;</span>t<span class="sym">,</span> br<span class="sym">)</span>
  mpz_add   <span class="sym">(</span>&#64;c<span class="sym">-&gt;</span>r<span class="sym">,</span> &#64;c<span class="sym">-&gt;</span>r<span class="sym">,</span> &#64;c<span class="sym">-&gt;</span>v<span class="sym">)</span>
  mpz_mul_si<span class="sym">(</span>&#64;c<span class="sym">-&gt;</span>t<span class="sym">,</span> &#64;c<span class="sym">-&gt;</span>t<span class="sym">,</span> bt<span class="sym">)</span>
  mpz_add   <span class="sym">(</span>&#64;c<span class="sym">-&gt;</span>t<span class="sym">,</span> &#64;c<span class="sym">-&gt;</span>t<span class="sym">,</span> &#64;c<span class="sym">-&gt;</span>u<span class="sym">)</span>
  mpz_mul_si<span class="sym">(</span>&#64;c<span class="sym">-&gt;</span>s<span class="sym">,</span> &#64;c<span class="sym">-&gt;</span>s<span class="sym">,</span> bt<span class="sym">)</span>
  mpz_mul_si<span class="sym">(</span>&#64;c<span class="sym">-&gt;</span>u<span class="sym">,</span> &#64;c<span class="sym">-&gt;</span>q<span class="sym">,</span> bs<span class="sym">)</span>
  mpz_add   <span class="sym">(</span>&#64;c<span class="sym">-&gt;</span>s<span class="sym">,</span> &#64;c<span class="sym">-&gt;</span>s<span class="sym">,</span> &#64;c<span class="sym">-&gt;</span>u<span class="sym">)</span>
  mpz_mul_si<span class="sym">(</span>&#64;c<span class="sym">-&gt;</span>q<span class="sym">,</span> &#64;c<span class="sym">-&gt;</span>q<span class="sym">,</span> bq<span class="sym">)</span>
<span class="kwa">End Sub</span>

<span class="slc">' Compose matrix with numbers on the left.</span>
<span class="kwa">Sub</span> compose_l<span class="sym">(</span>c <span class="kwa">As</span> ctx_t ptr<span class="sym">,</span> bq <span class="kwa">As</span> <span class="kwb">Integer</span><span class="sym">,</span> br <span class="kwa">As</span> <span class="kwb">Integer</span><span class="sym">,</span> bs <span class="kwa">As</span> <span class="kwb">Integer</span><span class="sym">,</span> bt <span class="kwa">As</span> <span class="kwb">Integer</span><span class="sym">)</span>
  mpz_mul_si<span class="sym">(</span>&#64;c<span class="sym">-&gt;</span>r<span class="sym">,</span> &#64;c<span class="sym">-&gt;</span>r<span class="sym">,</span> bt<span class="sym">)</span>
  mpz_mul_si<span class="sym">(</span>&#64;c<span class="sym">-&gt;</span>u<span class="sym">,</span> &#64;c<span class="sym">-&gt;</span>q<span class="sym">,</span> br<span class="sym">)</span>
  mpz_add   <span class="sym">(</span>&#64;c<span class="sym">-&gt;</span>r<span class="sym">,</span> &#64;c<span class="sym">-&gt;</span>r<span class="sym">,</span> &#64;c<span class="sym">-&gt;</span>u<span class="sym">)</span>
  mpz_mul_si<span class="sym">(</span>&#64;c<span class="sym">-&gt;</span>u<span class="sym">,</span> &#64;c<span class="sym">-&gt;</span>t<span class="sym">,</span> bs<span class="sym">)</span>
  mpz_mul_si<span class="sym">(</span>&#64;c<span class="sym">-&gt;</span>t<span class="sym">,</span> &#64;c<span class="sym">-&gt;</span>t<span class="sym">,</span> bt<span class="sym">)</span>
  mpz_mul_si<span class="sym">(</span>&#64;c<span class="sym">-&gt;</span>v<span class="sym">,</span> &#64;c<span class="sym">-&gt;</span>s<span class="sym">,</span> br<span class="sym">)</span>
  mpz_add   <span class="sym">(</span>&#64;c<span class="sym">-&gt;</span>t<span class="sym">,</span> &#64;c<span class="sym">-&gt;</span>t<span class="sym">,</span> &#64;c<span class="sym">-&gt;</span>v<span class="sym">)</span>
  mpz_mul_si<span class="sym">(</span>&#64;c<span class="sym">-&gt;</span>s<span class="sym">,</span> &#64;c<span class="sym">-&gt;</span>s<span class="sym">,</span> bq<span class="sym">)</span>
  mpz_add   <span class="sym">(</span>&#64;c<span class="sym">-&gt;</span>s<span class="sym">,</span> &#64;c<span class="sym">-&gt;</span>s<span class="sym">,</span> &#64;c<span class="sym">-&gt;</span>u<span class="sym">)</span>
  mpz_mul_si<span class="sym">(</span>&#64;c<span class="sym">-&gt;</span>q<span class="sym">,</span> &#64;c<span class="sym">-&gt;</span>q<span class="sym">,</span> bq<span class="sym">)</span>
<span class="kwa">End Sub</span>

<span class="slc">' Extract one digit.</span>
<span class="kwa">Function</span> extract<span class="sym">(</span>c <span class="kwa">As</span> ctx_t ptr<span class="sym">,</span> j <span class="kwa">As</span> uInteger<span class="sym">)</span> <span class="kwa">As</span> <span class="kwb">Integer</span>
  mpz_mul_ui<span class="sym">(</span>&#64;c<span class="sym">-&gt;</span>u<span class="sym">,</span> &#64;c<span class="sym">-&gt;</span>q<span class="sym">,</span> j<span class="sym">)</span>
  mpz_add   <span class="sym">(</span>&#64;c<span class="sym">-&gt;</span>u<span class="sym">,</span> &#64;c<span class="sym">-&gt;</span>u<span class="sym">,</span> &#64;c<span class="sym">-&gt;</span>r<span class="sym">)</span>
  mpz_mul_ui<span class="sym">(</span>&#64;c<span class="sym">-&gt;</span>v<span class="sym">,</span> &#64;c<span class="sym">-&gt;</span>s<span class="sym">,</span> j<span class="sym">)</span>
  mpz_add   <span class="sym">(</span>&#64;c<span class="sym">-&gt;</span>v<span class="sym">,</span> &#64;c<span class="sym">-&gt;</span>v<span class="sym">,</span> &#64;c<span class="sym">-&gt;</span>t<span class="sym">)</span>
  mpz_tdiv_q<span class="sym">(</span>&#64;c<span class="sym">-&gt;</span>w<span class="sym">,</span> &#64;c<span class="sym">-&gt;</span>u<span class="sym">,</span> &#64;c<span class="sym">-&gt;</span>v<span class="sym">)</span>
  Return mpz_get_ui<span class="sym">(</span>&#64;c<span class="sym">-&gt;</span>w<span class="sym">)</span>
<span class="kwa">End Function</span>

<span class="slc">' Print one digit. Returns 1 for the last digit.</span>
<span class="kwa">Function</span> prdigit<span class="sym">(</span>c <span class="kwa">As</span> ctx_t ptr<span class="sym">,</span> y <span class="kwa">As</span> <span class="kwb">Integer</span><span class="sym">)</span> <span class="kwa">As</span> <span class="kwb">Integer</span>
  c<span class="sym">-&gt;</span>digits<span class="sym">[</span>c<span class="sym">-&gt;</span>d<span class="sym">] =</span> Asc<span class="sym">(</span><span class="str">&quot;0&quot;</span><span class="sym">) +</span> y
  c<span class="sym">-&gt;</span>d <span class="sym">+=</span> <span class="num">1</span>
  c<span class="sym">-&gt;</span>i <span class="sym">+=</span> <span class="num">1</span>
  <span class="kwa">If</span> <span class="sym">(</span>c<span class="sym">-&gt;</span>i mod <span class="num">10</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">OR</span> <span class="sym">(</span>c<span class="sym">-&gt;</span>i <span class="sym">=</span> c<span class="sym">-&gt;</span>n<span class="sym">)</span> <span class="kwa">Then</span>
    c<span class="sym">-&gt;</span>digits<span class="sym">[</span>c<span class="sym">-&gt;</span>d<span class="sym">] =</span> <span class="num">0</span>
    printf<span class="sym">(</span><span class="str">&quot;%-10s\t:%d\n&quot;</span><span class="sym">,</span> c<span class="sym">-&gt;</span>digits<span class="sym">,</span> c<span class="sym">-&gt;</span>i<span class="sym">)</span>
    c<span class="sym">-&gt;</span>d <span class="sym">=</span> <span class="num">0</span>
  <span class="kwa">End If</span>
  return c<span class="sym">-&gt;</span>i <span class="sym">=</span> c<span class="sym">-&gt;</span>n
<span class="kwa">End Function</span>

<span class="slc">' Generate successive digits of PI.</span>
<span class="kwa">Sub</span> pidigits<span class="sym">(</span>c <span class="kwa">As</span> ctx_t ptr<span class="sym">)</span>
  <span class="kwa">Dim As</span> <span class="kwb">Integer</span> k <span class="sym">=</span> <span class="num">1</span>
  <span class="kwa">Dim As</span> <span class="kwb">Integer</span> y
  c<span class="sym">-&gt;</span>d <span class="sym">=</span> <span class="num">0</span>
  c<span class="sym">-&gt;</span>i <span class="sym">=</span> <span class="num">0</span>
  mpz_init_set_ui<span class="sym">(</span>&#64;c<span class="sym">-&gt;</span>q<span class="sym">,</span> <span class="num">1</span><span class="sym">)</span>
  mpz_init_set_ui<span class="sym">(</span>&#64;c<span class="sym">-&gt;</span>r<span class="sym">,</span> <span class="num">0</span><span class="sym">)</span>
  mpz_init_set_ui<span class="sym">(</span>&#64;c<span class="sym">-&gt;</span>s<span class="sym">,</span> <span class="num">0</span><span class="sym">)</span>
  mpz_init_set_ui<span class="sym">(</span>&#64;c<span class="sym">-&gt;</span>t<span class="sym">,</span> <span class="num">1</span><span class="sym">)</span>
  mpz_init<span class="sym">(</span>&#64;c<span class="sym">-&gt;</span>u<span class="sym">)</span>
  mpz_init<span class="sym">(</span>&#64;c<span class="sym">-&gt;</span>v<span class="sym">)</span>
  mpz_init<span class="sym">(</span>&#64;c<span class="sym">-&gt;</span>w<span class="sym">)</span>
  Do
    y <span class="sym">=</span> extract<span class="sym">(</span>c<span class="sym">,</span> <span class="num">3</span><span class="sym">)</span>
    <span class="kwa">If</span> y <span class="sym">=</span> extract<span class="sym">(</span>c<span class="sym">,</span> <span class="num">4</span><span class="sym">)</span> <span class="kwa">Then</span>
      <span class="kwa">If</span> prdigit<span class="sym">(</span>c<span class="sym">,</span> y<span class="sym">)</span> <span class="kwa">Then</span> Exit <span class="kwa">Sub</span>
      compose_r<span class="sym">(</span>c<span class="sym">,</span> <span class="num">10</span><span class="sym">, -</span><span class="num">10</span><span class="sym">*</span>y<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)</span>
    <span class="kwa">Else</span>
      compose_l<span class="sym">(</span>c<span class="sym">,</span> k<span class="sym">,</span> <span class="num">4</span><span class="sym">*</span>k<span class="sym">+</span><span class="num">2</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">2</span><span class="sym">*</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>
      k<span class="sym">+=</span><span class="num">1</span>
    <span class="kwa">End If</span>
  Loop
<span class="kwa">End Sub</span>

<span class="kwa">Dim As</span> ctx_t c
  c.n <span class="sym">=</span> CInt<span class="sym">(</span>Command$<span class="sym">(</span><span class="num">1</span><span class="sym">))</span>
  <span class="kwa">If</span> c.n <span class="sym">=</span> <span class="num">0</span> <span class="kwa">Then</span> c.n <span class="sym">=</span> <span class="num">27</span>
  pidigits<span class="sym">(</span>&#64;c<span class="sym">)</span>


