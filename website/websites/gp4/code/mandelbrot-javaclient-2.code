<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Stefan Krause</span>
<span class="hl com">   modified by Oleg Estekhin</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> java<span class="hl sym">.</span>io<span class="hl sym">.</span><span class="hl kwc">BufferedOutputStream</span><span class="hl sym">;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>io<span class="hl sym">.</span><span class="hl kwc">IOException</span><span class="hl sym">;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>io<span class="hl sym">.</span><span class="hl kwc">OutputStream</span><span class="hl sym">;</span>

<span class="hl kwa">public class</span> mandelbrot <span class="hl sym">{</span>

    <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">)</span> <span class="hl kwa">throws</span> <span class="hl kwc">IOException</span> <span class="hl sym">{</span>
        <span class="hl kwa">final</span> <span class="hl kwb">int</span> n <span class="hl sym">=</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span><span class="hl kwd">parseInt</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>
        <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">print</span><span class="hl sym">(</span><span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl sym">+</span> n <span class="hl sym">+</span> <span class="hl str">' '</span> <span class="hl sym">+</span> n <span class="hl sym">+</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">);</span>

        <span class="hl kwa">final</span> <span class="hl kwc">OutputStream</span> out <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">BufferedOutputStream</span><span class="hl sym">(</span><span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">);</span>

        <span class="hl kwa">final</span> <span class="hl kwb">double</span> step <span class="hl sym">=</span> <span class="hl num">2.0</span> <span class="hl sym">/</span> n<span class="hl sym">;</span>
        <span class="hl kwb">int</span> data <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> y <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> y <span class="hl sym">&lt;</span> n<span class="hl sym">;</span> y<span class="hl sym">++) {</span>
            <span class="hl kwa">final</span> <span class="hl kwb">double</span> dy0 <span class="hl sym">=</span> step <span class="hl sym">*</span> y <span class="hl sym">-</span> <span class="hl num">1.0</span><span class="hl sym">;</span>
            <span class="hl kwb">int</span> x <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl kwa">while</span> <span class="hl sym">(</span>x <span class="hl sym">&lt;</span> n<span class="hl sym">) {</span>
                <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> bit <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> bit <span class="hl sym">&lt;</span> <span class="hl num">8</span><span class="hl sym">;</span> bit<span class="hl sym">++,</span> x<span class="hl sym">++) {</span>
                    <span class="hl kwa">final</span> <span class="hl kwb">double</span> dx0 <span class="hl sym">=</span> step <span class="hl sym">*</span> x <span class="hl sym">-</span> <span class="hl num">1.5</span><span class="hl sym">;</span>
                    <span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">50</span><span class="hl sym">;</span>
                    <span class="hl kwb">double</span> dx <span class="hl sym">=</span> dx0<span class="hl sym">;</span>
                    <span class="hl kwb">double</span> dy <span class="hl sym">=</span> dy0<span class="hl sym">;</span>
                    <span class="hl kwa">while</span> <span class="hl sym">(</span>dx <span class="hl sym">*</span> dx <span class="hl sym">+</span> dy <span class="hl sym">*</span> dy <span class="hl sym">&lt;=</span> <span class="hl num">4.0</span> <span class="hl sym">&amp;&amp;</span> i <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">) {</span>
                        <span class="hl kwa">final</span> <span class="hl kwb">double</span> dxtemp <span class="hl sym">=</span> dx <span class="hl sym">*</span> dx <span class="hl sym">-</span> dy <span class="hl sym">*</span> dy <span class="hl sym">+</span> dx0<span class="hl sym">;</span>
                        dy <span class="hl sym">=</span> <span class="hl num">2.0</span> <span class="hl sym">*</span> dx <span class="hl sym">*</span> dy <span class="hl sym">+</span> dy0<span class="hl sym">;</span>
                        dx <span class="hl sym">=</span> dxtemp<span class="hl sym">;</span>
                        i<span class="hl sym">--;</span>
                    <span class="hl sym">}</span>
                    data <span class="hl sym">&lt;&lt;=</span> <span class="hl num">1</span><span class="hl sym">;</span>
                    <span class="hl kwa">if</span> <span class="hl sym">(</span>i <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">) {</span>
                        data<span class="hl sym">++;</span>
                    <span class="hl sym">}</span>
                <span class="hl sym">}</span>
                out<span class="hl sym">.</span><span class="hl kwd">write</span><span class="hl sym">(</span>data<span class="hl sym">);</span>
            <span class="hl sym">}</span>
        <span class="hl sym">}</span>
        out<span class="hl sym">.</span><span class="hl kwd">flush</span><span class="hl sym">();</span>
    <span class="hl sym">}</span>

<span class="hl sym">}</span>
