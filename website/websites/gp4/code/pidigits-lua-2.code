<span class="slc">-- The Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">-- contributed by Mike Pall</span>

<span class="slc">-- Start of dynamically compiled chunk.</span>
<span class="kwa">local</span> chunk <span class="sym">= [=[</span>

<span class="slc">-- Factory function for multi-precision number (mpn) operations.</span>
<span class="kwa">local function</span> fmm<span class="sym">(</span>fa<span class="sym">,</span> fb<span class="sym">)</span>
  <span class="kwa">return</span> loadstring<span class="sym">([[</span>
    <span class="kwa">return function</span><span class="sym">(</span>y<span class="sym">,</span> a<span class="sym">,</span> ka<span class="sym">,</span> b<span class="sym">,</span> kb<span class="sym">)</span>
      <span class="kwa">local</span> carry<span class="sym">,</span> n <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> <span class="slc">#a ]]..(fb == 0 and &quot;&quot; or [[</span>
      <span class="kwa">local</span> na<span class="sym">,</span> nb <span class="sym">=</span> n<span class="sym">,</span> <span class="slc">#b -- Need to adjust lengths. 1 element suffices here.</span>
      <span class="kwa">if</span> na <span class="sym">&gt;</span> nb <span class="kwa">then</span> b<span class="sym">[</span>na<span class="sym">] =</span> <span class="num">0</span> <span class="kwa">elseif</span> na <span class="sym">&lt;</span> nb <span class="kwa">then</span> a<span class="sym">[</span>nb<span class="sym">] =</span> <span class="num">0</span><span class="sym">;</span> n <span class="sym">=</span> nb <span class="kwa">end</span>
    ]]<span class="sym">)</span>..<span class="sym">[[</span>
      <span class="kwa">for</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>n <span class="kwa">do</span> <span class="slc">-- Sum up all elements and propagate carry.</span>
        <span class="kwa">local</span> x <span class="sym">=</span> a<span class="sym">[</span>i<span class="sym">]</span> ]]..<span class="sym">(</span>fa <span class="sym">==</span> <span class="num">2</span> <span class="kwa">and</span> <span class="str">&quot;*ka&quot;</span> <span class="kwa">or</span> <span class="str">&quot;&quot;</span><span class="sym">)</span>..
          <span class="sym">(</span>fb <span class="sym">==</span> <span class="num">2</span> <span class="kwa">and</span> <span class="str">&quot;+b[i]*kb&quot;</span> <span class="kwa">or</span> <span class="sym">(</span>fb <span class="sym">==</span> <span class="num">1</span> <span class="kwa">and</span> <span class="str">&quot;+b[i]&quot;</span> <span class="kwa">or</span> <span class="str">&quot;&quot;</span><span class="sym">))</span>..<span class="sym">[[ +</span> carry
        <span class="kwa">if</span> x <span class="sym">&lt;</span> RADIX <span class="kwa">and</span> x <span class="sym">&gt;=</span> <span class="num">0</span> <span class="kwa">then</span> carry <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> y<span class="sym">[</span>i<span class="sym">] =</span> x <span class="slc">-- Check for overflow.</span>
        <span class="kwa">else local</span> d <span class="sym">=</span> x <span class="sym">%</span> RADIX<span class="sym">;</span> carry <span class="sym">= (</span>x<span class="sym">-</span>d<span class="sym">) /</span> RADIX<span class="sym">;</span> y<span class="sym">[</span>i<span class="sym">] =</span> d <span class="kwa">end</span>
      <span class="kwa">end</span>
      y<span class="sym">[</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">] =</span> <span class="kwa">nil</span> <span class="slc">-- Truncate target. 1 element suffices here.</span>
      <span class="kwa">if</span> carry <span class="sym">==</span> <span class="num">0</span> <span class="kwa">then while</span> n <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">and</span> y<span class="sym">[</span>n<span class="sym">] ==</span> <span class="num">0</span> <span class="kwa">do</span> y<span class="sym">[</span>n<span class="sym">] =</span> <span class="kwa">nil end</span>
      <span class="kwa">elseif</span> carry <span class="sym">== -</span><span class="num">1</span> <span class="kwa">then</span> y<span class="sym">[</span>n<span class="sym">] =</span> y<span class="sym">[</span>n<span class="sym">] -</span> RADIX <span class="kwa">else</span> y<span class="sym">[</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">] =</span> carry <span class="kwa">end</span>
    ]]..<span class="sym">(</span>fb <span class="sym">==</span> <span class="num">0</span> <span class="kwa">and</span> <span class="str">&quot;&quot;</span> <span class="kwa">or</span> <span class="sym">[[</span> <span class="slc">-- Undo length adjustment.</span>
      <span class="kwa">if</span> na <span class="sym">&gt;</span> nb <span class="kwa">then</span> b<span class="sym">[</span>na<span class="sym">] =</span> <span class="kwa">nil elseif</span> na <span class="sym">&lt;</span> nb <span class="kwa">and</span> y ~<span class="sym">=</span> a <span class="kwa">then</span> a<span class="sym">[</span>nb<span class="sym">] =</span> <span class="kwa">nil end</span>
    ]]<span class="sym">)</span>..<span class="sym">[[</span>
      <span class="kwa">return</span> y
    <span class="kwa">end</span>]]<span class="sym">)()</span>
<span class="kwa">end</span>

<span class="slc">-- Generate needed mpn functions.</span>
<span class="kwa">local</span> mm_kk<span class="sym">,</span> mm_k1<span class="sym">,</span> mm_k0<span class="sym">,</span> mm_11 <span class="sym">=</span> fmm<span class="sym">(</span><span class="num">2</span><span class="sym">,</span> <span class="num">2</span><span class="sym">),</span> fmm<span class="sym">(</span><span class="num">2</span><span class="sym">,</span> <span class="num">1</span><span class="sym">),</span> fmm<span class="sym">(</span><span class="num">2</span><span class="sym">,</span> <span class="num">0</span><span class="sym">),</span> fmm<span class="sym">(</span><span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)</span>

<span class="slc">-- Choose the most efficient mpn function for y = a*ka + b*kb at run-time.</span>
<span class="kwa">local function</span> mm<span class="sym">(</span>y<span class="sym">,</span> a<span class="sym">,</span> ka<span class="sym">,</span> b<span class="sym">,</span> kb<span class="sym">)</span>
  <span class="kwa">local</span> f <span class="sym">=</span> mm_kk
  <span class="kwa">if</span> kb <span class="sym">==</span> <span class="num">0</span> <span class="kwa">or</span> <span class="slc">#b == 0 then if ka == 1 then return a else f = mm_k0 end</span>
  <span class="kwa">elseif</span> kb <span class="sym">==</span> <span class="num">1</span> <span class="kwa">then if</span> ka <span class="sym">==</span> <span class="num">1</span> <span class="kwa">then</span> f <span class="sym">=</span> mm_11 <span class="kwa">else</span> f <span class="sym">=</span> mm_k1 <span class="kwa">end end</span>
  <span class="kwa">return</span> f<span class="sym">(</span>y<span class="sym">,</span> a<span class="sym">,</span> ka<span class="sym">,</span> b<span class="sym">,</span> kb<span class="sym">)</span>
<span class="kwa">end</span>

<span class="slc">-- Compose matrix with numbers on the right.</span>
<span class="kwa">local function</span> compose_r<span class="sym">(</span>aq<span class="sym">,</span>ar<span class="sym">,</span>as<span class="sym">,</span>at<span class="sym">,</span> bq<span class="sym">,</span>br<span class="sym">,</span>bs<span class="sym">,</span>bt<span class="sym">)</span>
  mm<span class="sym">(</span>ar<span class="sym">,</span> ar<span class="sym">,</span>bq<span class="sym">,</span> at<span class="sym">,</span>br<span class="sym">)</span> mm<span class="sym">(</span>at<span class="sym">,</span> at<span class="sym">,</span>bt<span class="sym">,</span> ar<span class="sym">,</span>bs<span class="sym">)</span>
  mm<span class="sym">(</span>as<span class="sym">,</span> as<span class="sym">,</span>bt<span class="sym">,</span> aq<span class="sym">,</span>bs<span class="sym">)</span> mm<span class="sym">(</span>aq<span class="sym">,</span> aq<span class="sym">,</span>bq<span class="sym">,</span> <span class="kwa">nil</span><span class="sym">,</span><span class="num">0</span><span class="sym">)</span>
<span class="kwa">end</span>

<span class="slc">-- Compose matrix with numbers on the left.</span>
<span class="kwa">local function</span> compose_l<span class="sym">(</span>aq<span class="sym">,</span>ar<span class="sym">,</span>as<span class="sym">,</span>at<span class="sym">,</span> bq<span class="sym">,</span>br<span class="sym">,</span>bs<span class="sym">,</span>bt<span class="sym">)</span>
  mm<span class="sym">(</span>ar<span class="sym">,</span> ar<span class="sym">,</span>bt<span class="sym">,</span> aq<span class="sym">,</span>br<span class="sym">)</span> mm<span class="sym">(</span>at<span class="sym">,</span> at<span class="sym">,</span>bt<span class="sym">,</span> as<span class="sym">,</span>br<span class="sym">)</span>
  mm<span class="sym">(</span>as<span class="sym">,</span> as<span class="sym">,</span>bq<span class="sym">,</span> at<span class="sym">,</span>bs<span class="sym">)</span> mm<span class="sym">(</span>aq<span class="sym">,</span> aq<span class="sym">,</span>bq<span class="sym">,</span> <span class="kwa">nil</span><span class="sym">,</span><span class="num">0</span><span class="sym">)</span>
<span class="kwa">end</span>

<span class="slc">-- Extract one digit.</span>
<span class="kwa">local</span> u<span class="sym">,</span> v<span class="sym">,</span> jj <span class="sym">= {}, {},</span> <span class="num">0</span>
<span class="kwa">local function</span> extract<span class="sym">(</span>q<span class="sym">,</span>r<span class="sym">,</span>s<span class="sym">,</span>t<span class="sym">,</span> j<span class="sym">)</span>
  <span class="kwa">local</span> u <span class="sym">=</span> j <span class="sym">==</span> jj <span class="sym">+</span> <span class="num">1</span> <span class="kwa">and</span> mm<span class="sym">(</span>u<span class="sym">,</span> u<span class="sym">,</span><span class="num">1</span><span class="sym">,</span> q<span class="sym">,</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">or</span> mm<span class="sym">(</span>u<span class="sym">,</span> q<span class="sym">,</span>j<span class="sym">,</span> r<span class="sym">,</span><span class="num">1</span><span class="sym">);</span> jj <span class="sym">=</span> j
  <span class="kwa">local</span> v <span class="sym">=</span> mm<span class="sym">(</span>v<span class="sym">,</span> t<span class="sym">,</span><span class="num">1</span><span class="sym">,</span> s<span class="sym">,</span>j<span class="sym">)</span>
  <span class="kwa">local</span> nu<span class="sym">,</span> nv<span class="sym">,</span> y <span class="sym">=</span> <span class="slc">#u, #v</span>
  <span class="kwa">if</span> nu <span class="sym">==</span> nv <span class="kwa">then</span>
    <span class="kwa">if</span> nu <span class="sym">==</span> <span class="num">1</span> <span class="kwa">then</span> y <span class="sym">=</span> u<span class="sym">[</span><span class="num">1</span><span class="sym">] /</span> v<span class="sym">[</span><span class="num">1</span><span class="sym">]</span>
    <span class="kwa">else</span> y <span class="sym">= (</span>u<span class="sym">[</span>nu<span class="sym">]*</span>RADIX <span class="sym">+</span> u<span class="sym">[</span>nu<span class="sym">-</span><span class="num">1</span><span class="sym">]) / (</span>v<span class="sym">[</span>nv<span class="sym">]*</span>RADIX <span class="sym">+</span> v<span class="sym">[</span>nv<span class="sym">-</span><span class="num">1</span><span class="sym">])</span> <span class="kwa">end</span>
  <span class="kwa">elseif</span> nu <span class="sym">==</span> nv<span class="sym">+</span><span class="num">1</span> <span class="kwa">then</span> y <span class="sym">= (</span>u<span class="sym">[</span>nu<span class="sym">]*</span>RADIX <span class="sym">+</span> u<span class="sym">[</span>nv<span class="sym">]) /</span> v<span class="sym">[</span>nv<span class="sym">]</span>
  <span class="kwa">else return</span> <span class="num">0</span> <span class="kwa">end</span>
  <span class="kwa">return</span> math.<span class="kwa">floor</span><span class="sym">(</span>y<span class="sym">)</span>
<span class="kwa">end</span>

<span class="slc">-- Coroutine which yields successive digits of PI.</span>
<span class="kwa">return</span> coroutine.wrap<span class="sym">(</span><span class="kwa">function</span><span class="sym">()</span>
  <span class="kwa">local</span> q<span class="sym">,</span> r<span class="sym">,</span> s<span class="sym">,</span> t<span class="sym">,</span> k <span class="sym">= {</span><span class="num">1</span><span class="sym">}, {}, {}, {</span><span class="num">1</span><span class="sym">},</span> <span class="num">1</span>
  <span class="kwa">repeat</span>
    <span class="kwa">local</span> y <span class="sym">=</span> extract<span class="sym">(</span>q<span class="sym">,</span>r<span class="sym">,</span>s<span class="sym">,</span>t<span class="sym">,</span> <span class="num">3</span><span class="sym">)</span>
    <span class="kwa">if</span> y <span class="sym">==</span> extract<span class="sym">(</span>q<span class="sym">,</span>r<span class="sym">,</span>s<span class="sym">,</span>t<span class="sym">,</span> <span class="num">4</span><span class="sym">)</span> <span class="kwa">then</span>
      coroutine.yield<span class="sym">(</span>y<span class="sym">)</span>
      compose_r<span class="sym">(</span>q<span class="sym">,</span>r<span class="sym">,</span>s<span class="sym">,</span>t<span class="sym">,</span>  <span class="num">10</span><span class="sym">, -</span><span class="num">10</span><span class="sym">*</span>y<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)</span>
    <span class="kwa">else</span>
      compose_l<span class="sym">(</span>q<span class="sym">,</span>r<span class="sym">,</span>s<span class="sym">,</span>t<span class="sym">,</span>   k<span class="sym">,</span> <span class="num">4</span><span class="sym">*</span>k<span class="sym">+</span><span class="num">2</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">2</span><span class="sym">*</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>
      k <span class="sym">=</span> k <span class="sym">+</span> <span class="num">1</span>
    <span class="kwa">end</span>
  <span class="kwa">until</span> false
<span class="kwa">end</span><span class="sym">)</span>

<span class="sym">]=]</span> <span class="slc">-- End of dynamically compiled chunk.</span>

<span class="kwa">local</span> N <span class="sym">=</span> <span class="kwa">tonumber</span><span class="sym">(</span>arg <span class="kwa">and</span> arg<span class="sym">[</span><span class="num">1</span><span class="sym">])</span> <span class="kwa">or</span> <span class="num">27</span>
<span class="kwa">local</span> RADIX <span class="sym">=</span> N <span class="sym">&lt;</span> <span class="num">6500</span> <span class="kwa">and</span> <span class="num">2</span>^<span class="num">36</span> <span class="kwa">or</span> <span class="num">2</span>^<span class="num">32</span> <span class="slc">-- Avoid overflow.</span>

<span class="slc">-- Substitute radix and compile chunk.</span>
<span class="kwa">local</span> pidigit <span class="sym">=</span> loadstring<span class="sym">(</span><span class="kwb">string</span>.<span class="kwa">gsub</span><span class="sym">(</span>chunk<span class="sym">,</span> <span class="str">&quot;RADIX&quot;</span><span class="sym">,</span> <span class="kwa">tostring</span><span class="sym">(</span>RADIX<span class="sym">)))()</span>

<span class="slc">-- Print lines with 10 digits.</span>
<span class="kwa">for</span> i<span class="sym">=</span><span class="num">10</span><span class="sym">,</span>N<span class="sym">,</span><span class="num">10</span> <span class="kwa">do</span>
  <span class="kwa">for</span> j<span class="sym">=</span><span class="num">1</span><span class="sym">,</span><span class="num">10</span> <span class="kwa">do</span> io.<span class="kwa">write</span><span class="sym">(</span>pidigit<span class="sym">())</span> <span class="kwa">end</span>
  io.<span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\t</span><span class="str">:&quot;</span><span class="sym">,</span> i<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>
<span class="kwa">end</span>

<span class="slc">-- Print remaining digits (if any).</span>
<span class="kwa">local</span> n10 <span class="sym">=</span> N <span class="sym">%</span> <span class="num">10</span>
<span class="kwa">if</span> n10 ~<span class="sym">=</span> <span class="num">0</span> <span class="kwa">then</span>
  <span class="kwa">for</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>n10 <span class="kwa">do</span> io.<span class="kwa">write</span><span class="sym">(</span>pidigit<span class="sym">())</span> <span class="kwa">end</span>
  io.<span class="kwa">write</span><span class="sym">(</span><span class="kwb">string</span>.rep<span class="sym">(</span><span class="str">&quot; &quot;</span><span class="sym">,</span> <span class="num">10</span><span class="sym">-</span>n10<span class="sym">),</span> <span class="str">&quot;</span><span class="esc">\t</span><span class="str">:&quot;</span><span class="sym">,</span> N<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>
<span class="kwa">end</span>

