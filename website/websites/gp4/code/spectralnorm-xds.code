<span class="com">(* The Great Computer Language Shootout
   http://shootout.alioth.debian.org

   contributed by Isaac Gouy (Oberon-2 novice)
*)</span>


<span class="sym">&lt;*</span> MAIN<span class="sym">+ *&gt;
</span><span class="kwa">MODULE</span> spectralnorm<span class="sym">;
</span><span class="kwa">IMPORT</span> Shootout<span class="sym">,</span> SLongIO<span class="sym">,</span> MathL<span class="sym">,</span> Out<span class="sym">;

</span><span class="kwa">TYPE</span> Vector <span class="sym">=</span> <span class="kwb">POINTER</span> <span class="kwa">TO ARRAY OF</span> <span class="kwb">LONGREAL</span><span class="sym">;
</span><span class="kwa">VAR
</span>   i<span class="sym">,</span> n<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;
</span>   u<span class="sym">,</span> v<span class="sym">:</span> Vector<span class="sym">;
</span>   vBv<span class="sym">,</span> vv<span class="sym">:</span> <span class="kwb">LONGREAL</span><span class="sym">;


</span><span class="com">(* return element i,j of infinite matrix A *)</span>
<span class="kwa">PROCEDURE</span> A<span class="sym">(</span>i<span class="sym">,</span>j<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">):</span> <span class="kwb">LONGREAL</span><span class="sym">;
</span><span class="kwa">BEGIN RETURN</span> <span class="num">1.0</span> <span class="sym">/ ((</span>i<span class="sym">+</span>j<span class="sym">)*(</span>i<span class="sym">+</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">) /</span><span class="num">2</span> <span class="sym">+</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">);</span> <span class="kwa">END</span> A<span class="sym">;


</span><span class="com">(* multiply vector v by matrix A *)</span>
<span class="kwa">PROCEDURE</span> MultiplyAv<span class="sym">(</span>v<span class="sym">,</span> Av<span class="sym">:</span> Vector<span class="sym">);
</span><span class="kwa">VAR
</span>   i<span class="sym">,</span>j<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;
</span><span class="kwa">BEGIN
</span>   FOR i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">TO</span> n<span class="num">-1</span> <span class="kwa">DO
</span>      Av<span class="sym">[</span>i<span class="sym">] :=</span> <span class="num">0.0</span><span class="sym">;
</span>      FOR j <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">TO</span> n<span class="num">-1</span> <span class="kwa">DO</span> Av<span class="sym">[</span>i<span class="sym">] :=</span> Av<span class="sym">[</span>i<span class="sym">] +</span> A<span class="sym">(</span>i<span class="sym">,</span>j<span class="sym">) *</span> v<span class="sym">[</span>j<span class="sym">];</span> <span class="kwa">END</span><span class="sym">;
</span>   <span class="kwa">END</span><span class="sym">;
</span><span class="kwa">END</span> MultiplyAv<span class="sym">;


</span><span class="com">(* multiply vector v by matrix A transposed *)</span>
<span class="kwa">PROCEDURE</span> MultiplyAtv<span class="sym">(</span>v<span class="sym">,</span> Atv<span class="sym">:</span> Vector<span class="sym">);
</span><span class="kwa">VAR
</span>   i<span class="sym">,</span>j<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;
</span><span class="kwa">BEGIN
</span>   FOR i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">TO</span> n<span class="num">-1</span> <span class="kwa">DO
</span>      Atv<span class="sym">[</span>i<span class="sym">] :=</span> <span class="num">0.0</span><span class="sym">;
</span>      FOR j <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">TO</span> n<span class="num">-1</span> <span class="kwa">DO</span> Atv<span class="sym">[</span>i<span class="sym">] :=</span> Atv<span class="sym">[</span>i<span class="sym">] +</span> A<span class="sym">(</span>j<span class="sym">,</span>i<span class="sym">) *</span> v<span class="sym">[</span>j<span class="sym">];</span> <span class="kwa">END</span><span class="sym">;
</span>   <span class="kwa">END</span><span class="sym">;
</span><span class="kwa">END</span> MultiplyAtv<span class="sym">;


</span><span class="com">(* multiply vector v by matrix A and then by matrix A transposed *)</span>
<span class="kwa">PROCEDURE</span> MultiplyAtAv<span class="sym">(</span>v<span class="sym">,</span> AtAv<span class="sym">:</span> Vector<span class="sym">);
</span><span class="kwa">VAR
</span>   u<span class="sym">:</span> Vector<span class="sym">;
</span><span class="kwa">BEGIN
   NEW</span><span class="sym">(</span>u<span class="sym">,</span> n<span class="sym">);
</span>   MultiplyAv<span class="sym">(</span>v<span class="sym">,</span> u<span class="sym">);
</span>   MultiplyAtv<span class="sym">(</span>u<span class="sym">,</span> AtAv<span class="sym">);
</span><span class="kwa">END</span> MultiplyAtAv<span class="sym">;


</span><span class="kwa">BEGIN
</span>   n <span class="sym">:=</span> Shootout<span class="sym">.</span>Argi<span class="sym">();

</span>   <span class="com">(* create unit vector *)</span>
   <span class="kwa">NEW</span><span class="sym">(</span>u<span class="sym">,</span> n<span class="sym">);
</span>   FOR i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">TO</span> n<span class="num">-1</span> <span class="kwa">DO</span> u<span class="sym">[</span>i<span class="sym">] :=</span> <span class="num">1.0</span><span class="sym">;</span> <span class="kwa">END</span><span class="sym">;

</span>   <span class="com">(* 20 steps of the power method *)</span>
   <span class="kwa">NEW</span><span class="sym">(</span>v<span class="sym">,</span> n<span class="sym">);
</span>   FOR i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">TO</span> n<span class="num">-1</span> <span class="kwa">DO</span> v<span class="sym">[</span>i<span class="sym">] :=</span> <span class="num">0.0</span><span class="sym">;</span> <span class="kwa">END</span><span class="sym">;

</span>   FOR i <span class="sym">:=</span> <span class="num">1</span> <span class="kwa">TO</span> <span class="num">10</span> <span class="kwa">DO
</span>      MultiplyAtAv<span class="sym">(</span>u<span class="sym">,</span> v<span class="sym">);
</span>      MultiplyAtAv<span class="sym">(</span>v<span class="sym">,</span> u<span class="sym">);
</span>   <span class="kwa">END</span><span class="sym">;

</span>   FOR i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">TO</span> n<span class="num">-1</span> <span class="kwa">DO
</span>      vBv <span class="sym">:=</span> vBv <span class="sym">+</span> u<span class="sym">[</span>i<span class="sym">]*</span>v<span class="sym">[</span>i<span class="sym">];
</span>      vv <span class="sym">:=</span> vv <span class="sym">+</span> v<span class="sym">[</span>i<span class="sym">]*</span>v<span class="sym">[</span>i<span class="sym">];
</span>   <span class="kwa">END</span><span class="sym">;

</span>   SLongIO<span class="sym">.</span>WriteFixed<span class="sym">(</span> MathL<span class="sym">.</span>sqrt<span class="sym">(</span>vBv<span class="sym">/</span>vv<span class="sym">),</span> <span class="num">9</span><span class="sym">,</span><span class="num">1</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;
</span><span class="kwa">END</span> spectralnorm<span class="sym">.</span>
