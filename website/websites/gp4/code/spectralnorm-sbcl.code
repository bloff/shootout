<span class="slc">;;   The Great Computer Language Shootout</span>
<span class="slc">;;    http://shootout.alioth.debian.org/</span>
<span class="slc">;;</span>
<span class="slc">;;    Adapted from the C (gcc) code by Sebastien Loisel</span>
<span class="slc">;;</span>
<span class="slc">;;    Contributed by Christopher Neufeld</span>
<span class="slc">;;    Modified by Juho Snellman 2005-10-26</span>
<span class="slc">;;      * Use SIMPLE-ARRAY instead of ARRAY in declarations</span>
<span class="slc">;;      * Use TRUNCATE instead of / for fixnum division</span>
<span class="slc">;;      * Rearrange EVAL-A to make it more readable and a bit faster</span>

<span class="slc">;; Note that sbcl is at least 10 times faster than either clisp or gcl</span>
<span class="slc">;; on this program, running with an argument of 500.  It would be nice</span>
<span class="slc">;; to know why the others are so slow.</span>

<span class="sym">(</span><span class="kwa">defun eval</span><span class="sym">-</span>AtA<span class="sym">-</span>times<span class="sym">-</span>u <span class="sym">(</span>n u<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">eval</span><span class="sym">-</span>At<span class="sym">-</span>times<span class="sym">-</span>u n <span class="sym">(</span><span class="kwa">eval</span><span class="sym">-</span>A<span class="sym">-</span>times<span class="sym">-</span>u n u<span class="sym">)))</span>

<span class="slc">;; This is our most expensive function.  Optimized with the knowledge</span>
<span class="slc">;; that 'n' will never be &quot;huge&quot;.  This will break if 'n' exceeds</span>
<span class="slc">;; approximately half of the square root of the largest fixnum</span>
<span class="slc">;; supported by the implementation.  On sbcl 0.9.3,</span>
<span class="slc">;; 'most-positive-fixnum' is 536870911, and we can support values of</span>
<span class="slc">;; 'n' above 11000.</span>
<span class="sym">(</span>declaim <span class="sym">(</span>inline <span class="kwa">eval</span><span class="sym">-</span>A<span class="sym">))</span>
<span class="sym">(</span><span class="kwa">defun eval</span><span class="sym">-</span>A <span class="sym">(</span>i j<span class="sym">)</span>
  <span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> fixnum i j<span class="sym">))</span>
  <span class="sym">(</span>let<span class="sym">* ((</span>n <span class="sym">(+</span> i j<span class="sym">))</span>
         <span class="sym">(</span>n<span class="sym">+</span><span class="num">1</span> <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> n<span class="sym">)))</span>
    <span class="sym">(</span>declare <span class="sym">(</span>fixnum n n<span class="sym">+</span><span class="num">1</span><span class="sym">))</span>
    <span class="sym">(/ (</span><span class="kwa">float</span> <span class="sym">(+ (</span>truncate <span class="sym">(</span>the fixnum <span class="sym">(*</span> n n<span class="sym">+</span><span class="num">1</span><span class="sym">))</span> <span class="num">2</span><span class="sym">)</span> i <span class="num">1</span><span class="sym">)</span> <span class="num">0</span>d0<span class="sym">))))</span>

<span class="sym">(</span><span class="kwa">defun eval</span><span class="sym">-</span>A<span class="sym">-</span>times<span class="sym">-</span>u <span class="sym">(</span>n u<span class="sym">)</span>
  <span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> fixnum n<span class="sym">)</span>
           <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span>simple<span class="sym">-</span>array double<span class="sym">-</span><span class="kwa">float</span><span class="sym">)</span> u<span class="sym">))</span>
  <span class="sym">(</span>let <span class="sym">((</span>retval <span class="sym">(</span>make<span class="sym">-</span>array n <span class="sym">:</span>element<span class="sym">-</span><span class="kwa">type</span> <span class="str">'double-float :initial-element 0.0d0)))</span>
<span class="str">    (dotimes (i n)</span>
<span class="str">      (dotimes (j n)</span>
<span class="str">        (incf (aref retval i) (* (eval-A i j) (aref u j)))))</span>
<span class="str">    retval))</span>
<span class="str"></span>
<span class="str">(defun eval-At-times-u (n u)</span>
<span class="str">  (declare (type fixnum n)</span>
<span class="str">           (type (simple-array double-float) u))</span>
<span class="str">  (let ((retval (make-array n :element-type '</span>double<span class="sym">-</span><span class="kwa">float</span> <span class="sym">:</span>initial<span class="sym">-</span>element <span class="num">0.0</span>d0<span class="sym">)))</span>
    <span class="sym">(</span>dotimes <span class="sym">(</span>i n<span class="sym">)</span>
      <span class="sym">(</span>dotimes <span class="sym">(</span>j n<span class="sym">)</span>
        <span class="sym">(</span>incf <span class="sym">(</span>aref retval i<span class="sym">) (* (</span><span class="kwa">eval</span><span class="sym">-</span>A j i<span class="sym">) (</span>aref u j<span class="sym">)))))</span>
    retval<span class="sym">))</span>


<span class="sym">(</span><span class="kwa">defun</span> main <span class="sym">(&amp;</span>optional n<span class="sym">-</span>supplied<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span><span class="kwa">or</span> n<span class="sym">-</span>supplied
               <span class="sym">(</span>parse<span class="sym">-</span>integer <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">car</span> <span class="sym">(</span><span class="kwa">last</span> #<span class="sym">+</span>sbcl sb<span class="sym">-</span>ext<span class="sym">:*</span>posix<span class="sym">-</span>argv<span class="sym">*</span>
                                             #<span class="sym">+</span>clisp ext<span class="sym">:*</span>args<span class="sym">*</span>
                                             #<span class="sym">+</span>cmu extensions<span class="sym">:*</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>strings<span class="sym">*</span>
                                             #<span class="sym">+</span>gcl  si<span class="sym">::*</span><span class="kwa">command</span><span class="sym">-</span>args<span class="sym">*))</span>
                                  <span class="str">&quot;2000&quot;</span><span class="sym">)))))</span>
    <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span>typep <span class="sym">(* (- (*</span> <span class="num">2</span> n<span class="sym">)</span> <span class="num">1</span><span class="sym">) (- (*</span> <span class="num">2</span> n<span class="sym">)</span> <span class="num">2</span><span class="sym">))</span> <span class="str">'fixnum)</span>
<span class="str">        (error &quot;The supplied value of '</span>n<span class="str">' breaks the optimizations in EVAL-A&quot;))</span>
<span class="str">    (let ((u (make-array n :element-type '</span>double<span class="sym">-</span><span class="kwa">float</span> <span class="sym">:</span>initial<span class="sym">-</span>element <span class="num">1.0</span>d0<span class="sym">))</span>
          <span class="sym">(</span>v <span class="sym">(</span>make<span class="sym">-</span>array n <span class="sym">:</span>element<span class="sym">-</span><span class="kwa">type</span> <span class="str">'double-float)))</span>
<span class="str">      (declare (type (simple-array double-float) U V))</span>
<span class="str">      (dotimes (i 10)</span>
<span class="str">        (setf v (eval-AtA-times-u n u))</span>
<span class="str">        (setf u (eval-AtA-times-u n v)))</span>
<span class="str">      (let ((vBv 0.0d0)</span>
<span class="str">            (vv 0.0d0))</span>
<span class="str">        (dotimes (i n)</span>
<span class="str">          (incf vBv (* (aref u i) (aref v i)))</span>
<span class="str">          (incf vv (* (aref v i) (aref v i))))</span>
<span class="str">        (format t &quot;~11,9F~%&quot; (sqrt (the (double-float 0d0) (/ vBv vv))))))))</span>
<span class="str"></span>
<span class="str">;; #+sbcl (progn</span>
<span class="str">;;          (sb-profile:profile eval-AtA-times-u)</span>
<span class="str">;;          (sb-profile:profile eval-A)</span>
<span class="str">;;          (sb-profile:profile eval-A-times-u)</span>
<span class="str">;;          (sb-profile:profile eval-At-times-u)</span>
<span class="str">;;          (sb-profile:profile main))</span>
<span class="str"></span>
