<span class="hl com">(* nsieve-bits.sml</span>
<span class="hl com"> *</span>
<span class="hl com"> *   Good old Sieve of Eratosthenes (using bit array).</span>
<span class="hl com"> *</span>
<span class="hl com"> * Copyright (c) 2004 by The Fellowship of SML/NJ</span>
<span class="hl com"> *</span>
<span class="hl com"> * Author: Matthias Blume (blume&#64;tti-c.org)</span>
<span class="hl com"> * Modified by sweeks&#64;sweeks.com to run with MLton.</span>
<span class="hl com"> * Bug fixed, optimized and shortened by Vesa Karvonen.</span>
<span class="hl com"> *)</span>

<span class="hl com">(* abbreviations *)</span>
<span class="hl kwa">structure</span> W<span class="hl sym">=</span><span class="hl kwa">Word and</span> W8<span class="hl sym">=</span><span class="hl kwa">Word8 and</span> A<span class="hl sym">=</span>Array <span class="hl kwa">and</span> U<span class="hl sym">=</span>Unsafe.Array <span class="hl kwa">and</span> S<span class="hl sym">=</span><span class="hl kwa">StringCvt</span>

<span class="hl com">(* word &lt;-&gt; string *)</span>
<span class="hl kwa">val</span> <span class="hl sym">(</span>s2w<span class="hl sym">,</span> w2s<span class="hl sym">) = (</span>S.scanString <span class="hl sym">(</span>W.scan S.DEC<span class="hl sym">),</span> S.padLeft #<span class="hl str">&quot; &quot;</span> <span class="hl num">8</span> <span class="hl kwa">o</span> W.fmt S.DEC<span class="hl sym">)</span>

<span class="hl com">(* bit indexing *)</span>
<span class="hl kwa">fun</span> idx i <span class="hl sym">=</span> W.toIntX <span class="hl sym">(</span>W.<span class="hl sym">&gt;&gt; (</span>i<span class="hl sym">,</span> <span class="hl num">0</span>w3<span class="hl sym">))</span>
<span class="hl kwa">fun</span> bit i <span class="hl sym">=</span> W8.<span class="hl sym">&lt;&lt; (</span><span class="hl num">0</span>w1<span class="hl sym">,</span> W.andb <span class="hl sym">(</span>i<span class="hl sym">,</span> <span class="hl num">0</span>w7<span class="hl sym">))</span>

<span class="hl com">(* bit test / set *)</span>
<span class="hl kwa">fun</span> tst <span class="hl sym">(</span>a<span class="hl sym">,</span> i<span class="hl sym">) =</span> W8.andb <span class="hl sym">(</span>U.sub <span class="hl sym">(</span>a<span class="hl sym">,</span> idx i<span class="hl sym">),</span> bit i<span class="hl sym">) &lt;&gt;</span> <span class="hl num">0</span>w0
<span class="hl kwa">fun</span> set <span class="hl sym">(</span>a<span class="hl sym">,</span> i<span class="hl sym">) =</span> U.update <span class="hl sym">(</span>a<span class="hl sym">,</span> idx i<span class="hl sym">,</span> W8.orb <span class="hl sym">(</span>U.sub <span class="hl sym">(</span>a<span class="hl sym">,</span> idx i<span class="hl sym">),</span> bit i<span class="hl sym">))</span>

<span class="hl com">(* sieve *)</span>
<span class="hl kwa">fun</span> sieve n <span class="hl sym">=</span>
    <span class="hl kwa">let val</span> a <span class="hl sym">=</span> A.array <span class="hl sym">(</span>W.toIntX <span class="hl sym">(</span>W.<span class="hl sym">&gt;&gt; (</span>n<span class="hl sym">+</span><span class="hl num">0</span>w7<span class="hl sym">,</span> <span class="hl num">0</span>w3<span class="hl sym">)),</span> <span class="hl num">0</span>w0<span class="hl sym">)</span>
        <span class="hl kwa">fun</span> s <span class="hl sym">(</span>i<span class="hl sym">,</span> c<span class="hl sym">) =</span> <span class="hl kwa">let fun</span> k j <span class="hl sym">=</span> <span class="hl kwa">if</span> j<span class="hl sym">&gt;=</span>n <span class="hl kwa">then</span> <span class="hl sym">()</span> <span class="hl kwa">else</span> <span class="hl sym">(</span>set <span class="hl sym">(</span>a<span class="hl sym">,</span>j<span class="hl sym">) ;</span> k <span class="hl sym">(</span>j<span class="hl sym">+</span>i<span class="hl sym">))</span>
                       <span class="hl kwa">in if</span> i<span class="hl sym">&gt;=</span>n <span class="hl kwa">then</span> c <span class="hl kwa">else if</span> tst <span class="hl sym">(</span>a<span class="hl sym">,</span>i<span class="hl sym">)</span> <span class="hl kwa">then</span> s <span class="hl sym">(</span>i<span class="hl sym">+</span><span class="hl num">0</span>w1<span class="hl sym">,</span> c<span class="hl sym">)</span>
                                         <span class="hl kwa">else</span> <span class="hl sym">(</span>k <span class="hl sym">(</span>i<span class="hl sym">+</span>i<span class="hl sym">) ;</span> s <span class="hl sym">(</span>i<span class="hl sym">+</span><span class="hl num">0</span>w1<span class="hl sym">,</span> c<span class="hl sym">+</span><span class="hl num">0</span>w1<span class="hl sym">))</span> <span class="hl kwa">end</span>
    <span class="hl kwa">in</span> app print <span class="hl sym">[</span><span class="hl str">&quot;Primes up to &quot;</span><span class="hl sym">,</span> w2s n<span class="hl sym">,</span> <span class="hl str">&quot; &quot;</span><span class="hl sym">,</span> w2s <span class="hl sym">(</span>s <span class="hl sym">(</span><span class="hl num">0</span>w2<span class="hl sym">,</span> <span class="hl num">0</span>w0<span class="hl sym">)),</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">]</span> <span class="hl kwa">end</span>

<span class="hl com">(* driver *)</span>
<span class="hl kwa">val</span> n <span class="hl sym">=</span> valOf <span class="hl sym">(</span>s2w <span class="hl sym">(</span>hd <span class="hl sym">(</span>CommandLine.arguments <span class="hl sym">())))</span> <span class="hl kwa">handle</span> _ <span class="hl sym">=&gt;</span> <span class="hl num">0</span>w9
<span class="hl kwa">val</span> _ <span class="hl sym">=</span> app <span class="hl sym">(</span><span class="hl kwa">fn</span> d <span class="hl sym">=&gt;</span> <span class="hl kwa">if</span> d<span class="hl sym">&lt;=</span>n <span class="hl kwa">then</span> sieve <span class="hl sym">(</span>W.<span class="hl sym">&lt;&lt;(</span><span class="hl num">0</span>w1<span class="hl sym">,</span> n<span class="hl sym">-</span>d<span class="hl sym">) *</span> <span class="hl num">0</span>w10000<span class="hl sym">)</span> <span class="hl kwa">else</span> <span class="hl sym">())</span>
            <span class="hl sym">[</span><span class="hl num">0</span>w0<span class="hl sym">,</span> <span class="hl num">0</span>w1<span class="hl sym">,</span> <span class="hl num">0</span>w2<span class="hl sym">]</span>
