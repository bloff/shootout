<span class="hl slc">%  The Computer Language Shootout</span>
<span class="hl slc">%  http://shootout.alioth.debian.org/</span>
<span class="hl slc">%  contributed by Kostis Sagonas</span>
<span class="hl slc">%  modified by Per Gustafsson</span>

<span class="hl sym">-</span><span class="hl kwd">module</span><span class="hl sym">(</span>nsievebits<span class="hl sym">)</span>.
<span class="hl sym">-</span><span class="hl kwd">export</span><span class="hl sym">([</span>main<span class="hl sym">/</span><span class="hl num">1</span><span class="hl sym">])</span>.

<span class="hl kwd">main</span><span class="hl sym">([</span>Arg<span class="hl sym">]) -&gt;</span>
  N <span class="hl sym">=</span> <span class="hl kwb">list_to_integer</span><span class="hl sym">(</span>Arg<span class="hl sym">),</span>
  lists<span class="hl sym">:</span><span class="hl kwd">foreach</span><span class="hl sym">(</span><span class="hl kwa">fun</span><span class="hl sym">(</span>I<span class="hl sym">) -&gt;</span> <span class="hl kwd">nsieve</span><span class="hl sym">(</span><span class="hl num">10000</span> <span class="hl kwd">bsl</span> <span class="hl sym">(</span>N<span class="hl sym">-</span>I<span class="hl sym">))</span> <span class="hl kwa">end</span><span class="hl sym">, [</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">]),</span>
  <span class="hl kwb">halt</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>.

<span class="hl kwd">nsieve</span><span class="hl sym">(</span>M<span class="hl sym">) -&gt;</span>
  io<span class="hl sym">:</span><span class="hl kwd">format</span><span class="hl sym">(</span><span class="hl str">&quot;Primes up to ~8w ~8w</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">, [</span>M<span class="hl sym">,</span> <span class="hl kwd">nsieve</span><span class="hl sym">(</span><span class="hl kwd">array</span><span class="hl sym">(</span>M<span class="hl sym">),</span> <span class="hl num">2</span><span class="hl sym">,</span> M<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">)])</span>.

<span class="hl kwd">nsieve</span><span class="hl sym">(</span>A<span class="hl sym">,</span> P<span class="hl sym">,</span> Sz<span class="hl sym">,</span> C<span class="hl sym">)</span> <span class="hl kwa">when</span> P <span class="hl sym">=&lt;</span> Sz <span class="hl sym">-&gt;</span>
  NC <span class="hl sym">=</span> <span class="hl kwa">case</span> <span class="hl sym">(</span>hipe_bifs<span class="hl sym">:</span><span class="hl kwd">bytearray_sub</span><span class="hl sym">(</span>A<span class="hl sym">, (</span>P bsr <span class="hl num">3</span><span class="hl sym">))</span> <span class="hl kwd">band</span> <span class="hl sym">(</span><span class="hl num">1</span> <span class="hl kwd">bsl</span> <span class="hl sym">(</span>P band <span class="hl num">7</span><span class="hl sym">)))</span> <span class="hl kwa">of</span>
	   <span class="hl num">0</span> <span class="hl sym">-&gt;</span> C<span class="hl sym">;</span>
	   _ <span class="hl sym">-&gt;</span> <span class="hl kwd">nsieve_sub</span><span class="hl sym">(</span>A<span class="hl sym">,</span> P<span class="hl sym">+</span>P<span class="hl sym">,</span> Sz<span class="hl sym">,</span> P<span class="hl sym">),</span> C<span class="hl sym">+</span><span class="hl num">1</span>
       <span class="hl kwa">end</span><span class="hl sym">,</span>
  <span class="hl kwd">nsieve</span><span class="hl sym">(</span>A<span class="hl sym">,</span> P<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> Sz<span class="hl sym">,</span> NC<span class="hl sym">);</span>
<span class="hl kwd">nsieve</span><span class="hl sym">(</span>_A<span class="hl sym">,</span> _P<span class="hl sym">,</span> _M<span class="hl sym">,</span> C<span class="hl sym">) -&gt;</span> C.

<span class="hl kwd">nsieve_sub</span><span class="hl sym">(</span>A<span class="hl sym">,</span> I<span class="hl sym">,</span> Sz<span class="hl sym">,</span> P<span class="hl sym">)</span> <span class="hl kwa">when</span> I <span class="hl sym">=&lt;</span> Sz <span class="hl sym">-&gt;</span>
  IC <span class="hl sym">= (</span>I bsr <span class="hl num">3</span><span class="hl sym">),</span>
  Val <span class="hl sym">= (</span>hipe_bifs<span class="hl sym">:</span><span class="hl kwd">bytearray_sub</span><span class="hl sym">(</span>A<span class="hl sym">,</span> IC<span class="hl sym">)</span> band <span class="hl kwd">bnot</span><span class="hl sym">(</span><span class="hl num">1</span> <span class="hl kwd">bsl</span> <span class="hl sym">(</span>I band <span class="hl num">7</span><span class="hl sym">))),</span>
  hipe_bifs<span class="hl sym">:</span><span class="hl kwd">bytearray_update</span><span class="hl sym">(</span>A<span class="hl sym">,</span> IC<span class="hl sym">,</span> Val<span class="hl sym">),</span>
  <span class="hl kwd">nsieve_sub</span><span class="hl sym">(</span>A<span class="hl sym">,</span> I<span class="hl sym">+</span>P<span class="hl sym">,</span> Sz<span class="hl sym">,</span> P<span class="hl sym">);</span>
<span class="hl kwd">nsieve_sub</span><span class="hl sym">(</span>_<span class="hl sym">,</span> _<span class="hl sym">,</span> _<span class="hl sym">,</span> _<span class="hl sym">) -&gt;</span> ok.

<span class="hl kwd">array</span><span class="hl sym">(</span>M<span class="hl sym">) -&gt;</span> hipe_bifs<span class="hl sym">:</span><span class="hl kwd">bytearray</span><span class="hl sym">((</span>M bsr <span class="hl num">3</span><span class="hl sym">)+</span><span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">16</span>#ff<span class="hl sym">)</span>.
