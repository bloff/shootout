rem The Computer Language Shootout
rem http<span class="sym">://</span>shootout.alioth.debian.org<span class="sym">/</span>
rem contributed by Antoni Gual

#include <span class="str">&quot;crt.bi&quot;</span>
option escape
<span class="kwa">dim as</span> <span class="kwb">integer</span> perm<span class="sym">(</span><span class="num">20</span><span class="sym">),</span> permp<span class="sym">(</span><span class="num">20</span><span class="sym">),</span> count<span class="sym">(</span><span class="num">20</span><span class="sym">)</span>
<span class="kwa">dim as</span> <span class="kwb">integer</span> n<span class="sym">,</span>print30<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> m<span class="sym">,</span> r<span class="sym">,</span> j<span class="sym">,</span> i<span class="sym">,</span> k<span class="sym">,</span> temp<span class="sym">,</span> mostFlips<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> flips<span class="sym">,</span> perm0

n <span class="sym">=</span> val<span class="sym">(</span>command$<span class="sym">)</span>
<span class="kwa">if</span> n <span class="sym">&lt;</span> <span class="num">1</span> <span class="kwa">then</span> n <span class="sym">=</span> <span class="num">7</span>

m <span class="sym">=</span> n <span class="sym">-</span> <span class="num">1</span>
<span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> m <span class="sym">:</span> permp<span class="sym">(</span>i<span class="sym">) =</span> i <span class="sym">:</span> <span class="kwa">next</span> i
r <span class="sym">=</span> n
do
  <span class="kwa">if</span> print30 <span class="sym">&lt;</span> <span class="num">30</span> <span class="kwa">then</span>
     <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> m
        printf <span class="sym">(</span><span class="str">&quot;%d&quot;</span><span class="sym">,</span>permp<span class="sym">(</span>i<span class="sym">) +</span> <span class="num">1</span><span class="sym">)</span>
     <span class="kwa">next</span> i
     printf<span class="sym">(</span><span class="str">&quot;\n&quot;</span><span class="sym">)</span>
     print30 <span class="sym">+=</span> <span class="num">1</span>
  <span class="kwa">end if</span>
  <span class="kwa">while</span> r <span class="sym">&lt;&gt;</span> <span class="num">1</span>
     count<span class="sym">(</span>r<span class="sym">-</span><span class="num">1</span><span class="sym">) =</span> r
     r <span class="sym">-=</span> <span class="num">1</span>
  wend
  <span class="kwa">if not</span> <span class="sym">((</span>permp<span class="sym">(</span><span class="num">0</span><span class="sym">)=</span><span class="num">0</span><span class="sym">)</span> <span class="kwa">or</span> <span class="sym">(</span>permp<span class="sym">(</span>m<span class="sym">)=</span>m<span class="sym">))</span> <span class="kwa">then</span>
     <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> m
        perm<span class="sym">(</span>i<span class="sym">) =</span> permp<span class="sym">(</span>i<span class="sym">)</span>
     <span class="kwa">next</span> i
     flips <span class="sym">=</span> <span class="num">0</span>
     k <span class="sym">=</span> perm<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
     do
       i<span class="sym">=</span><span class="num">1</span>
       j<span class="sym">=</span>k<span class="sym">-</span><span class="num">1</span>
       <span class="kwa">while</span> i<span class="sym">&lt;</span>j
           temp <span class="sym">=</span> perm<span class="sym">(</span>i<span class="sym">)</span>
           perm<span class="sym">(</span>i<span class="sym">)=</span> perm<span class="sym">(</span>j<span class="sym">)</span>
           perm<span class="sym">(</span>j<span class="sym">)=</span> temp
           i <span class="sym">+=</span> <span class="num">1</span>
           j <span class="sym">-=</span> <span class="num">1</span>
       wend
       flips <span class="sym">+=</span> <span class="num">1</span>
       j<span class="sym">=</span>perm<span class="sym">(</span>k<span class="sym">)</span>
       perm<span class="sym">(</span>k<span class="sym">)=</span>k
       k<span class="sym">=</span>j
     loop until k <span class="sym">=</span> <span class="num">0</span>
     <span class="kwa">if</span> flips <span class="sym">&gt;</span> mostFlips <span class="kwa">then</span> mostFlips <span class="sym">=</span> flips
  <span class="kwa">end if</span>
  <span class="kwa">while</span> <span class="num">1</span>
     <span class="kwa">if</span> r <span class="sym">=</span> n <span class="kwa">then</span>
        printf <span class="sym">(</span><span class="str">&quot;Pfannkuchen(%d) = %d\n&quot;</span><span class="sym">,</span>n<span class="sym">,</span> mostflips<span class="sym">)</span>
        <span class="kwa">end</span>
     <span class="kwa">else</span>
        perm0 <span class="sym">=</span> permp<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
        i <span class="sym">=</span> <span class="num">0</span>
        k<span class="sym">=</span><span class="num">1</span>
        <span class="kwa">while</span> i <span class="sym">&lt;</span> r
           permp<span class="sym">(</span>i<span class="sym">) =</span> permp<span class="sym">(</span>k<span class="sym">)</span>
           i<span class="sym">+=</span> <span class="num">1</span>
           k<span class="sym">+=</span><span class="num">1</span>
        wend
        permp<span class="sym">(</span>r<span class="sym">) =</span> perm0
        count<span class="sym">(</span>r<span class="sym">) -=</span> <span class="num">1</span>
        <span class="kwa">if</span> count<span class="sym">(</span>r<span class="sym">) &gt;</span> <span class="num">0</span> <span class="kwa">then</span> exit <span class="kwa">while</span>
        r <span class="sym">+=</span> <span class="num">1</span>
     <span class="kwa">end if</span>
  wend
loop <span class="kwa">while</span> <span class="num">1</span>




