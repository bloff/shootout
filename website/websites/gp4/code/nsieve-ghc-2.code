<span class="hl com">{-# OPTIONS -O2 -fasm -fbang-patterns #-}</span>
<span class="hl slc">--</span>
<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Contributed by Don Stewart.</span>
<span class="hl slc">-- Uses Word8 values to represent Bools, avoiding a bit-packing Array Bool</span>
<span class="hl slc">--</span>

<span class="hl kwa">import</span> System
<span class="hl kwa">import</span> Foreign
<span class="hl kwa">import</span> Data.ByteString.Base
<span class="hl kwa">import</span> Text.Printf

main <span class="hl sym">=</span> <span class="hl kwa">do</span>
    n <span class="hl sym">&lt;-</span> getArgs <span class="hl sym">&gt;&gt;=</span> readIO . head
    mapM_ <span class="hl sym">(</span>sieve . <span class="hl sym">(</span><span class="hl num">10000</span> <span class="hl sym">*)</span> . <span class="hl sym">(</span><span class="hl num">2</span> ^<span class="hl sym">)) [</span>n<span class="hl sym">,</span> n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> n<span class="hl sym">-</span><span class="hl num">2</span><span class="hl sym">]</span>

sieve n <span class="hl sym">=</span> <span class="hl kwa">do</span>
    a <span class="hl sym">&lt;-</span> create n $ \p <span class="hl sym">-&gt;</span> memset p <span class="hl num">0</span> <span class="hl sym">(</span>fromIntegral n<span class="hl sym">) &gt;&gt;</span> return <span class="hl sym">()</span>
    r <span class="hl sym">&lt;-</span> go n a <span class="hl num">0 2</span>
    printf <span class="hl str">&quot;Primes up to %8d %8d\n&quot;</span> <span class="hl sym">(</span>n<span class="hl sym">::</span><span class="hl kwb">Int</span><span class="hl sym">) (</span>r<span class="hl sym">::</span><span class="hl kwb">Int</span><span class="hl sym">)</span>

go m <span class="hl sym">!</span>a <span class="hl sym">!</span>c <span class="hl sym">!</span>n
    <span class="hl sym">|</span> n <span class="hl sym">==</span> m    <span class="hl sym">=</span> return c
    <span class="hl sym">|</span> true a n  <span class="hl sym">=</span> go m a c <span class="hl sym">(</span>n<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>
    <span class="hl sym">|</span> otherwise <span class="hl sym">=</span> set <span class="hl sym">(</span>n<span class="hl sym">+</span>n<span class="hl sym">)</span>
  <span class="hl kwa">where</span>
    set <span class="hl sym">!</span>j <span class="hl sym">|</span> j <span class="hl sym">&lt;=</span> m    <span class="hl sym">=</span> false a j <span class="hl sym">&gt;&gt;</span> set <span class="hl sym">(</span>j<span class="hl sym">+</span>n<span class="hl sym">)</span>
           <span class="hl sym">|</span> otherwise <span class="hl sym">=</span> go m a <span class="hl sym">(</span>c<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) (</span>n<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>

true  <span class="hl sym">!</span>a <span class="hl sym">!</span>n          <span class="hl sym">=</span> unsafeIndex a n <span class="hl sym">==</span> <span class="hl num">1</span>
false <span class="hl sym">(</span>PS fp _ _<span class="hl sym">) !</span>n <span class="hl sym">=</span> withForeignPtr fp $ \p <span class="hl sym">-&gt;</span> pokeByteOff p n <span class="hl sym">(</span><span class="hl num">1</span> <span class="hl sym">::</span> Word8<span class="hl sym">)</span>
