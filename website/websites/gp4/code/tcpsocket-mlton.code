<span class="com">(* The Great Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Contributed by Vesa Karvonen.</span>
<span class="com"> *)</span>

<span class="com">(* abbreviations *)</span>
<span class="kwa">structure</span> A<span class="sym">=</span>Word8Array <span class="kwa">and</span> B<span class="sym">=</span>Word8ArraySlice <span class="kwa">and</span> N<span class="sym">=</span>INetSock <span class="kwa">and</span> H<span class="sym">=</span>NetHostDB
      <span class="kwa">and</span> S<span class="sym">=</span>Socket <span class="kwa">and</span> I<span class="sym">=</span><span class="kwa">Int and</span> F<span class="sym">=</span>IntInf <span class="kwa">and</span> C<span class="sym">=</span>CommandLine
<span class="kwa">val</span> <span class="sym">(</span>i2s<span class="sym">,</span> s2i<span class="sym">,</span> f2s<span class="sym">,</span> i2f<span class="sym">) = (</span>I.toString<span class="sym">,</span> I.fromString<span class="sym">,</span> F.toString<span class="sym">,</span> F.fromInt<span class="sym">)</span>

<span class="com">(* configuration *)</span>
<span class="kwa">val</span> <span class="sym">(</span>host<span class="sym">,</span> port<span class="sym">,</span> reqSize<span class="sym">,</span> bufSize<span class="sym">) = (</span><span class="str">&quot;127.0.0.1&quot;</span><span class="sym">,</span> <span class="num">11000</span><span class="sym">,</span> <span class="num">64</span><span class="sym">,</span> <span class="num">1024</span><span class="sym">)</span>
<span class="kwa">val</span> proto <span class="sym">= [(</span><span class="num">2</span><span class="sym">,</span> <span class="num">64</span><span class="sym">), (</span><span class="num">7</span><span class="sym">,</span> <span class="num">4096</span><span class="sym">), (</span><span class="num">1</span><span class="sym">,</span> <span class="num">409600</span><span class="sym">)]</span>

<span class="com">(* completes a recvArr/sendArr operation *)</span>
<span class="kwa">fun</span> `f a <span class="num">0</span> s <span class="sym">= ()</span>
  <span class="sym">|</span> `f a n s <span class="sym">=</span> `f a <span class="sym">(</span>n<span class="sym">-</span>f <span class="sym">(</span>s<span class="sym">,</span> B.slice <span class="sym">(</span>a<span class="sym">,</span> I.max <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> A.length a<span class="sym">-</span>n<span class="sym">),</span> NONE<span class="sym">)))</span> s

<span class="com">(* completing send/recv operations; the recv buffer is also created here *)</span>
<span class="kwa">val</span> <span class="sym">(</span>send<span class="sym">,</span> recv<span class="sym">) = (</span>`S.sendArr<span class="sym">,</span> `S.recvArr <span class="sym">(</span>A.array <span class="sym">(</span>bufSize<span class="sym">,</span> <span class="num">0</span>w0<span class="sym">)))</span>

<span class="com">(* client *)</span>
<span class="kwa">fun</span> msg <span class="sym">(</span>r<span class="sym">,</span> b<span class="sym">) =</span> app print <span class="sym">[</span><span class="str">&quot;replies: &quot;</span><span class="sym">,</span> i2s r<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\t</span><span class="str">bytes: &quot;</span><span class="sym">,</span> f2s b<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">]</span>

<span class="com">(* keeps invoking f x until it succeeds *)</span>
<span class="kwa">fun</span> noFail f x <span class="sym">=</span> f x <span class="kwa">handle</span> _ <span class="sym">=&gt;</span> noFail f x

<span class="kwa">fun</span> cli n <span class="sym">=</span>
  <span class="kwa">let val</span> <span class="sym">(</span>s<span class="sym">,</span> send<span class="sym">) = (</span>N.TCP.socket <span class="sym">(),</span> send <span class="sym">(</span>A.array <span class="sym">(</span>reqSize<span class="sym">,</span> <span class="num">0</span>w0<span class="sym">))</span> reqSize<span class="sym">)</span>
      <span class="kwa">fun</span> lp <span class="sym">(</span>n<span class="sym">,</span> z<span class="sym">,</span> r<span class="sym">,</span> b<span class="sym">) =</span>
          <span class="kwa">if</span> <span class="num">0</span><span class="sym">=</span>n <span class="kwa">then</span> <span class="sym">(</span>r<span class="sym">,</span> b<span class="sym">)</span> <span class="kwa">else</span> <span class="sym">(</span>send s<span class="sym">;</span> recv z s<span class="sym">;</span> lp <span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> z<span class="sym">,</span> r<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> b<span class="sym">+</span>i2f z<span class="sym">))</span>
  <span class="kwa">in</span> noFail S.connect <span class="sym">(</span>s<span class="sym">,</span> N.toAddr <span class="sym">(</span>H.addr <span class="sym">(</span>valOf <span class="sym">(</span>H.getByName host<span class="sym">)),</span> port<span class="sym">))</span>
   <span class="sym">;</span> msg <span class="sym">(</span>foldl <span class="sym">(</span><span class="kwa">fn</span> <span class="sym">((</span>m<span class="sym">,</span> z<span class="sym">), (</span>r<span class="sym">,</span> b<span class="sym">)) =&gt;</span> lp <span class="sym">(</span>m<span class="sym">*</span>n<span class="sym">,</span> z<span class="sym">,</span> r<span class="sym">,</span> b<span class="sym">)) (</span><span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">)</span> proto<span class="sym">)</span>
   <span class="sym">;</span> S.close s <span class="kwa">end</span>

<span class="com">(* server *)</span>
<span class="kwa">fun</span> ser n <span class="sym">=</span>
  <span class="kwa">let val</span> s <span class="sym">=</span> <span class="kwa">let val</span> s <span class="sym">=</span> N.TCP.socket <span class="sym">()</span>
              <span class="kwa">in</span> S.Ctl.setREUSEADDR <span class="sym">(</span>s<span class="sym">,</span> <span class="kwa">true</span><span class="sym">) ;</span> S.bind <span class="sym">(</span>s<span class="sym">,</span> N.any port<span class="sym">)</span>
               <span class="sym">;</span> S.listen <span class="sym">(</span>s<span class="sym">,</span> <span class="num">1</span><span class="sym">) ;</span> #<span class="num">1</span> <span class="sym">(</span>S.accept s<span class="sym">)</span> <span class="kwa">before</span> S.close s <span class="kwa">end</span>
      <span class="kwa">fun</span> lp <span class="sym">(</span>n<span class="sym">,</span> z<span class="sym">,</span> rep<span class="sym">) =</span>
          <span class="kwa">if</span> <span class="num">0</span><span class="sym">=</span>n <span class="kwa">then</span> <span class="sym">()</span> <span class="kwa">else</span> <span class="sym">(</span>recv reqSize s<span class="sym">;</span> send rep z s<span class="sym">;</span> lp <span class="sym">(</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> z<span class="sym">,</span> rep<span class="sym">))</span>
  <span class="kwa">in</span> app <span class="sym">(</span><span class="kwa">fn</span> <span class="sym">(</span>m<span class="sym">,</span> z<span class="sym">) =&gt;</span> lp <span class="sym">(</span>m<span class="sym">*</span>n<span class="sym">,</span> z<span class="sym">,</span> A.array <span class="sym">(</span>z<span class="sym">,</span> <span class="num">0</span>w0<span class="sym">)))</span> proto <span class="sym">;</span> S.close s <span class="kwa">end</span>

<span class="com">(* dispatch client / server *)</span>
<span class="kwa">val</span> _ <span class="sym">=</span> <span class="kwa">case</span> valOf<span class="sym">(</span>s2i<span class="sym">(</span>hd<span class="sym">(</span>C.arguments<span class="sym">())))</span> <span class="kwa">of</span> n <span class="sym">=&gt; (</span><span class="kwa">if</span> <span class="num">0</span><span class="sym">&lt;</span>n <span class="kwa">then</span> cli <span class="kwa">else</span> ser<span class="sym">)</span> n
