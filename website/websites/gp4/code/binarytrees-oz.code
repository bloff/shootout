<span class="slc">% ----------------------------------------------------------------------</span>
<span class="slc">% The Great Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">%</span>
<span class="slc">% Contributed by Anthony Borla</span>
<span class="slc">% ----------------------------------------------------------------------</span>

<span class="kwa">functor</span>

<span class="kwa">import</span>
  System<span class="sym">(</span>showInfo show<span class="sym">)</span> Application<span class="sym">(</span>exit getArgs<span class="sym">)</span>

<span class="kwa">define</span>

<span class="slc">% ------------- %</span>

  <span class="kwa">fun</span> <span class="sym">{</span>MakeTree Item Left Right<span class="sym">}</span>
    tree<span class="sym">(</span>item<span class="sym">:</span>Item left<span class="sym">:</span>Left right<span class="sym">:</span>Right<span class="sym">)</span>
  <span class="kwa">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwa">fun</span> <span class="sym">{</span>BottomUpTree Item Depth<span class="sym">}</span>
    <span class="kwa">if</span> Depth <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then</span>
      <span class="sym">{</span>MakeTree Item
        <span class="sym">{</span>BottomUpTree <span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> Item <span class="sym">-</span> <span class="num">1</span><span class="sym">) (</span>Depth <span class="sym">-</span> <span class="num">1</span><span class="sym">)}</span>
        <span class="sym">{</span>BottomUpTree <span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> Item<span class="sym">) (</span>Depth <span class="sym">-</span> <span class="num">1</span><span class="sym">)}}</span>
    <span class="kwa">else</span>
      <span class="sym">{</span>MakeTree Item nil nil<span class="sym">}</span>
    <span class="kwa">end</span>
  <span class="kwa">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwa">fun</span> <span class="sym">{</span>CheckTree Tree<span class="sym">}</span>
    <span class="kwa">if</span> Tree<span class="sym">.</span>left <span class="sym">==</span> nil <span class="kwa">then</span>
      Tree<span class="sym">.</span>item
    <span class="kwa">else</span>
      Tree<span class="sym">.</span>item <span class="sym">+ {</span>CheckTree Tree<span class="sym">.</span>left<span class="sym">} - {</span>CheckTree Tree<span class="sym">.</span>right<span class="sym">}</span>
    <span class="kwa">end</span>
  <span class="kwa">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwa">fun</span> <span class="sym">{</span>CmdlNArg Nth Default<span class="sym">}</span>
    N Nt <span class="kwa">in</span>
    <span class="kwa">try</span>
      Nt <span class="sym">= {</span>String<span class="sym">.</span>toInt <span class="sym">{</span>Application<span class="sym">.</span>getArgs plain<span class="sym">}.</span>Nth<span class="sym">}</span>
      N <span class="sym">=</span> <span class="kwa">if</span> Nt <span class="sym">&lt;</span> Default <span class="kwa">then</span> Default <span class="kwa">else</span> Nt <span class="kwa">end</span>
    <span class="kwa">catch</span> error<span class="sym">(...)</span> <span class="kwa">then</span>
      N <span class="sym">=</span> Default
    <span class="kwa">end</span>
    N
  <span class="kwa">end</span>

<span class="slc">% ------------- %</span>

  MIN_DEPTH <span class="sym">=</span> <span class="num">4</span>  MAX_DEPTH  STRETCH_DEPTH  LONG_LIVED_TREE  N

  ITERATIONS <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span>  CHECK <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span>

<span class="slc">% ------------- %</span>

<span class="kwa">in</span>
  N <span class="sym">= {</span>CmdlNArg <span class="num">1 10</span><span class="sym">}</span>

  MAX_DEPTH <span class="sym">=</span> <span class="kwa">if</span> MIN_DEPTH <span class="sym">+</span> <span class="num">2</span> <span class="sym">&gt;</span> N <span class="kwa">then</span> MIN_DEPTH <span class="sym">+</span> <span class="num">2</span> <span class="kwa">else</span> N <span class="kwa">end</span>
  STRETCH_DEPTH <span class="sym">=</span> MAX_DEPTH <span class="sym">+</span> <span class="num">1</span>

  <span class="sym">{</span>System<span class="sym">.</span>showInfo
    &quot;stretch tree <span class="kwa">of</span> depth &quot; <span class="sym">#</span> STRETCH_DEPTH <span class="sym">#</span>
    &quot;<span class="sym">\</span>t check<span class="sym">:</span> &quot; <span class="sym"># {</span>CheckTree <span class="sym">{</span>BottomUpTree <span class="num">0</span> STRETCH_DEPTH<span class="sym">}}}</span>

  LONG_LIVED_TREE <span class="sym">= {</span>BottomUpTree <span class="num">0</span> MAX_DEPTH<span class="sym">}</span>

  <span class="kwa">for</span> Depth <span class="kwa">in</span> MIN_DEPTH<span class="sym">;(</span>Depth <span class="sym">=&lt;</span> MAX_DEPTH<span class="sym">);(</span>Depth <span class="sym">+</span> <span class="num">2</span><span class="sym">)</span> do
    ITERATIONS <span class="sym">:= {</span>Number<span class="sym">.</span>pow <span class="num">2</span> <span class="sym">(</span>MAX_DEPTH <span class="sym">-</span> Depth <span class="sym">+</span> MIN_DEPTH<span class="sym">)}</span>

    CHECK <span class="sym">:=</span> <span class="num">0</span>
    <span class="kwa">for</span> I <span class="kwa">in</span> <span class="num">1</span><span class="sym">;(</span>I <span class="sym">=&lt; &#64;</span>ITERATIONS<span class="sym">);(</span>I <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span> do
      CHECK <span class="sym">:= &#64;</span>CHECK <span class="sym">+ {</span>CheckTree <span class="sym">{</span>BottomUpTree I Depth<span class="sym">}}</span>
      CHECK <span class="sym">:= &#64;</span>CHECK <span class="sym">+ {</span>CheckTree <span class="sym">{</span>BottomUpTree <span class="sym">~</span>I Depth<span class="sym">}}</span>
    <span class="kwa">end</span>

    <span class="sym">{</span>System<span class="sym">.</span>showInfo
      <span class="sym">(&#64;</span>ITERATIONS <span class="sym">*</span> <span class="num">2</span><span class="sym">) #</span>
      &quot;<span class="sym">\</span>t trees <span class="kwa">of</span> depth &quot; <span class="sym">#</span> Depth <span class="sym">#</span>
      &quot;<span class="sym">\</span>t check<span class="sym">:</span> &quot; <span class="sym"># &#64;</span>CHECK<span class="sym">}</span>
  <span class="kwa">end</span>

  <span class="sym">{</span>System<span class="sym">.</span>showInfo
    &quot;long lived tree <span class="kwa">of</span> depth &quot; <span class="sym">#</span> MAX_DEPTH <span class="sym">#</span>
    &quot;<span class="sym">\</span>t check<span class="sym">:</span> &quot; <span class="sym"># {</span>CheckTree LONG_LIVED_TREE<span class="sym">}}</span>

  <span class="sym">{</span>Application<span class="sym">.</span>exit <span class="num">0</span><span class="sym">}</span>
<span class="kwa">end</span>

