<span class="slc">% The Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">% contributed by Isaac Gouy</span>

<span class="kwa">functor</span>
<span class="kwa">import</span> Application Open

<span class="kwa">define</span>
   <span class="kwa">fun</span> <span class="sym">{</span>NextHeader F<span class="sym">}</span>
      <span class="kwa">case</span> <span class="sym">{</span>F getS<span class="sym">($)}</span>
      <span class="kwa">of false then false</span>
      <span class="sym">[] &amp;&gt;|</span>_ <span class="sym">=</span> Header <span class="kwa">then</span> Header
      <span class="kwa">else</span> <span class="sym">{</span>NextHeader F<span class="sym">}</span> <span class="kwa">end</span>
   <span class="kwa">end</span>

   <span class="kwa">fun</span> <span class="sym">{</span>ReversedLines F L<span class="sym">}</span>
      <span class="kwa">case</span> <span class="sym">{</span>F getS<span class="sym">($)}</span>
      <span class="kwa">of false then</span> L <span class="sym">#</span> <span class="kwa">false</span>
      <span class="sym">[] &amp;&gt;|</span>_ <span class="sym">=</span> Header <span class="kwa">then</span> L <span class="sym">#</span> Header
      <span class="sym">[] &amp;;|</span>_ <span class="kwa">then</span> <span class="sym">{</span>ReversedLines F L<span class="sym">}</span>
      <span class="sym">[]</span> Line <span class="kwa">then</span> <span class="sym">{</span>ReversedLines F Line<span class="sym">|</span>L<span class="sym">}</span> <span class="kwa">end</span>
   <span class="kwa">end</span>


   <span class="kwa">local</span>
      <span class="kwa">fun</span> <span class="sym">{</span>IubCodeComplements<span class="sym">}</span>
         Code <span class="sym">=</span> &quot;ABCDGHKMNRSTVWYabcdghkmnrstvwy&quot;
         Comp <span class="sym">=</span> &quot;TVGHCDMKNYSABWRTVGHCDMKNYSABWR&quot;
         A <span class="sym">= {</span>NewArray <span class="num">1</span> <span class="sym">&amp;</span>z <span class="sym">&amp;*}</span>
      <span class="kwa">in</span>
         <span class="sym">{</span>List<span class="sym">.</span>forAllInd
            <span class="sym">{</span>List<span class="sym">.</span>zip Code Comp <span class="kwa">fun</span><span class="sym">{$</span> A B<span class="sym">}</span> A<span class="sym">#</span>B <span class="kwa">end</span><span class="sym">}</span>
               <span class="kwa">proc</span><span class="sym">{$</span> I K<span class="sym">#</span>V<span class="sym">}</span> A<span class="sym">.</span>K <span class="sym">:=</span> V <span class="kwa">end</span><span class="sym">}</span>
         A
      <span class="kwa">end</span>

      IUB <span class="sym">= {</span>IubCodeComplements<span class="sym">}</span>

   <span class="kwa">in</span>
      <span class="kwa">proc</span> <span class="sym">{</span>WriteReverseComplement FOut FirstLine<span class="sym">|</span>RemainingLines<span class="sym">}</span>
         ShortestLength <span class="sym">= {</span>Length FirstLine<span class="sym">}</span>

         <span class="kwa">fun</span> <span class="sym">{</span>ReverseComplement L C<span class="sym">}</span> IUB<span class="sym">.</span>C<span class="sym">|</span>L <span class="kwa">end</span>

         <span class="kwa">fun</span> <span class="sym">{</span>FastaReverseComplement I L C<span class="sym">}</span>
            <span class="kwa">if</span> I <span class="sym">==</span> ShortestLength <span class="kwa">then</span> <span class="sym">&amp;\</span>n<span class="sym">|</span>IUB<span class="sym">.</span>C<span class="sym">|</span>L
            <span class="kwa">else</span> IUB<span class="sym">.</span>C<span class="sym">|</span>L <span class="kwa">end</span>
         <span class="kwa">end</span>

      <span class="kwa">in</span>
         <span class="sym">{</span>FOut write<span class="sym">(</span>vs<span class="sym">: {</span>FoldL FirstLine ReverseComplement nil<span class="sym">}) }</span>

         <span class="kwa">for</span> Line <span class="kwa">in</span> RemainingLines do
            <span class="sym">{</span>FOut write<span class="sym">(</span>vs<span class="sym">: {</span>List<span class="sym">.</span>foldLInd Line FastaReverseComplement nil<span class="sym">})}</span>
         <span class="kwa">end</span>
         <span class="sym">{</span>FOut write<span class="sym">(</span>vs<span class="sym">:</span> &quot;<span class="sym">\</span>n&quot;<span class="sym">)}</span>
      <span class="kwa">end</span>
   <span class="kwa">end</span>


   <span class="kwa">proc</span> <span class="sym">{</span>ReadReverseComplementWrite F Header FOut<span class="sym">}</span>
      <span class="kwa">if</span> Header <span class="sym">\=</span> <span class="kwa">false then</span>
         Lines <span class="sym">#</span> NextHeader <span class="sym">= {</span>ReversedLines F nil<span class="sym">}</span>
      <span class="kwa">in</span>
         <span class="sym">{</span>FOut write<span class="sym">(</span>vs<span class="sym">:</span> Header <span class="sym">#</span> &quot;<span class="sym">\</span>n&quot;<span class="sym">)}</span>
         <span class="sym">{</span>WriteReverseComplement FOut Lines<span class="sym">}</span>
         <span class="sym">{</span>ReadReverseComplementWrite F NextHeader FOut<span class="sym">}</span>
      <span class="kwa">end</span>
   <span class="kwa">end</span>

   <span class="kwa">class</span> TextFile <span class="kwa">from</span> Open<span class="sym">.</span>file Open<span class="sym">.</span>text <span class="kwa">end</span>
   StdIn <span class="sym">= {</span>New TextFile init<span class="sym">(</span>name<span class="sym">:</span>stdin<span class="sym">)}</span>
   StdOut <span class="sym">= {</span>New Open<span class="sym">.</span>file init<span class="sym">(</span>name<span class="sym">:</span>stdout<span class="sym">)}</span>
<span class="kwa">in</span>
   <span class="sym">{</span>ReadReverseComplementWrite StdIn <span class="sym">{</span>NextHeader StdIn<span class="sym">}</span> StdOut<span class="sym">}</span>
   <span class="sym">{</span>Application<span class="sym">.</span>exit <span class="num">0</span><span class="sym">}</span>
<span class="kwa">end</span>
