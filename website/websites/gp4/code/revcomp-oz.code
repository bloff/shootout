<span class="slc">% ----------------------------------------------------------------------</span>
<span class="slc">% The Great Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">%</span>
<span class="slc">% Attempt at a faster implementation by:</span>
<span class="slc">%</span>
<span class="slc">% * Avoiding, where possible, the use of list append operations [lists</span>
<span class="slc">%   are stored in a stack rather than being appended]</span>
<span class="slc">% * Restricting the size of lists which are created, thus ensuring</span>
<span class="slc">%   list operations like 'map' and 'reverse' don't 'choke' :)</span>
<span class="slc">%</span>
<span class="slc">% Use made of code from 'Concepts, Techniques and Models of Computer</span>
<span class="slc">% Programming' [CTM] by P. van Roy, S. Haridi.</span>
<span class="slc">%</span>
<span class="slc">% Contributed by Anthony Borla</span>
<span class="slc">% ----------------------------------------------------------------------</span>

<span class="kwa">functor</span>

<span class="kwa">import</span>
  System<span class="sym">(</span>showInfo<span class="sym">)</span> Application<span class="sym">(</span>exit<span class="sym">)</span> Open<span class="sym">(</span>text file<span class="sym">)</span>

<span class="kwa">define</span>

<span class="slc">% ------------- %</span>

  <span class="kwa">class</span> TextFile_
    <span class="kwa">from</span> Open<span class="sym">.</span>file Open<span class="sym">.</span>text
  <span class="kwa">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwa">proc</span> <span class="sym">{</span>ReverseComplement FILE Delimiter OutputLength<span class="sym">}</span>

    <span class="kwa">proc</span> <span class="sym">{</span>ReadSegments Segment<span class="sym">}</span> LINE <span class="sym">= {</span>FILE getS<span class="sym">($)}</span> <span class="kwa">in</span>
      <span class="kwa">case</span> LINE <span class="kwa">of false then</span>
        <span class="sym">{</span>DumpSegment Segment OutputLength<span class="sym">}</span>
      elseof <span class="sym">!</span>Delimiter<span class="sym">|</span>_ <span class="kwa">then</span>
        <span class="sym">{</span>DumpSegment Segment OutputLength<span class="sym">}</span>
        <span class="sym">{</span>PrintHeader LINE<span class="sym">}</span>
        <span class="sym">{</span>ReadSegments Segment<span class="sym">}</span>
      <span class="kwa">else</span>
        <span class="sym">{</span>ReadSegments <span class="sym">{</span>AddToSegment LINE Segment<span class="sym">}}</span>
      <span class="kwa">end</span>
    <span class="kwa">end</span>
  <span class="kwa">in</span>
    <span class="sym">{</span>ReadSegments <span class="sym">{</span>NewStack<span class="sym">}}</span>
  <span class="kwa">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwa">proc</span> <span class="sym">{</span>DumpSegment Segment OutputLength<span class="sym">}</span>

    <span class="kwa">proc</span> <span class="sym">{</span>DumpSegment_<span class="sym">}</span>
      <span class="kwa">if</span> <span class="sym">{</span>Segment<span class="sym">.</span>isEmpty<span class="sym">}</span> <span class="kwa">then</span>
        <span class="kwa">if</span> <span class="sym">&#64;</span>Spill <span class="sym">\=</span> nil <span class="kwa">then</span> <span class="sym">{</span>System<span class="sym">.</span>showInfo <span class="sym">&#64;</span>Spill<span class="sym">}</span> Spill <span class="sym">:=</span> nil <span class="kwa">end</span>
      <span class="kwa">else</span> OutputLine <span class="kwa">in</span>
        Spill <span class="sym">:= {</span>List<span class="sym">.</span>takeDrop <span class="sym">{</span>List<span class="sym">.</span>append <span class="sym">&#64;</span>Spill <span class="sym">{</span>Segment<span class="sym">.</span>pop<span class="sym">}}</span> OutputLength OutputLine<span class="sym">}</span>
        <span class="sym">{</span>System<span class="sym">.</span>showInfo OutputLine<span class="sym">}</span>
        <span class="sym">{</span>DumpSegment_<span class="sym">}</span>
      <span class="kwa">end</span>
    <span class="kwa">end</span>

    Spill <span class="sym">= {</span>NewCell nil<span class="sym">}</span>
  <span class="kwa">in</span>
    <span class="kwa">if</span> <span class="sym">{</span>Not <span class="sym">{</span>Segment<span class="sym">.</span>isEmpty<span class="sym">}}</span> <span class="kwa">then</span> Spill <span class="sym">:= {</span>List<span class="sym">.</span>append <span class="sym">&#64;</span>Spill <span class="sym">{</span>Segment<span class="sym">.</span>pop<span class="sym">}}</span> <span class="kwa">end</span>
    <span class="sym">{</span>DumpSegment_<span class="sym">}</span>
  <span class="kwa">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwa">proc</span> <span class="sym">{</span>PrintHeader Header<span class="sym">}</span>
    <span class="sym">{</span>System<span class="sym">.</span>showInfo Header<span class="sym">}</span>
  <span class="kwa">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwa">fun</span> <span class="sym">{</span>AddToSegment Sequence Segment<span class="sym">}</span>
    <span class="sym">{</span>Segment<span class="sym">.</span>push <span class="sym">{</span>Map <span class="sym">{</span>Reverse Sequence<span class="sym">}</span> Complement<span class="sym">}}</span>
    Segment
  <span class="kwa">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwa">local</span>
    CodeTbl <span class="sym">= {</span>ByteString<span class="sym">.</span>make <span class="sym">[</span><span class="num">84 86 71 72 0 0 67 68 0 0 77 0 75 78 0 0 0 89 83 65 65 66 87 0 82 0</span><span class="sym">]}</span>
  <span class="kwa">in</span>
    <span class="kwa">fun</span> <span class="sym">{</span>Complement Code<span class="sym">}</span>
      <span class="sym">{</span>ByteString<span class="sym">.</span>get CodeTbl <span class="sym">({</span>Char<span class="sym">.</span>toUpper Code<span class="sym">} -</span> <span class="num">65</span><span class="sym">)}</span>
    <span class="kwa">end</span>
  <span class="kwa">end</span>

  <span class="slc">%</span>
  <span class="slc">% A conventional, dictionary-based [i.e. hash table] version; marginally slower performance</span>
  <span class="slc">%</span>
  <span class="slc">% local</span>
  <span class="slc">%   CodeTbl =</span>
  <span class="slc">%     {Record.toDictionary</span>
  <span class="slc">%       codes('A':&amp;T 'B':&amp;V 'C':&amp;G 'D':&amp;H 'G':&amp;C</span>
  <span class="slc">%             'H':&amp;D 'K':&amp;M 'M':&amp;K 'N':&amp;N 'R':&amp;Y</span>
  <span class="slc">%             'S':&amp;S 'T':&amp;A 'V':&amp;B 'W':&amp;W 'Y':&amp;R)}</span>
  <span class="slc">% in</span>
  <span class="slc">%   fun {Complement Code}</span>
  <span class="slc">%     {Dictionary.get CodeTbl {Char.toAtom {Char.toUpper Code}}}</span>
  <span class="slc">%   end</span>
  <span class="slc">% end</span>
  <span class="slc">%</span>

<span class="slc">% ------------- %</span>

  <span class="slc">%% General Purpose Stateful Stack [CTM implementation]</span>

  <span class="kwa">fun</span> <span class="sym">{</span>NewStack<span class="sym">}</span>
    C <span class="sym">= {</span>NewCell nil<span class="sym">}</span>

    <span class="kwa">proc</span> <span class="sym">{</span>Push X<span class="sym">}</span> S <span class="kwa">in</span> S <span class="sym">= &#64;</span>C C <span class="sym">:=</span> X<span class="sym">|</span>S <span class="kwa">end</span>

    <span class="kwa">fun</span> <span class="sym">{</span>Pop<span class="sym">}</span> S1 <span class="kwa">in</span>
      S1 <span class="sym">= &#64;</span>C
      <span class="kwa">case</span> S1 <span class="kwa">of</span> X<span class="sym">|</span>S <span class="kwa">then</span>
        C <span class="sym">:=</span> S
        X
      <span class="kwa">end</span>
    <span class="kwa">end</span>

    <span class="kwa">fun</span> <span class="sym">{</span>IsEmpty<span class="sym">}</span> S <span class="kwa">in</span> S <span class="sym">= &#64;</span>C S <span class="sym">==</span> nil <span class="kwa">end</span>
  <span class="kwa">in</span>
    ops<span class="sym">(</span>push<span class="sym">:</span>Push pop<span class="sym">:</span>Pop isEmpty<span class="sym">:</span>IsEmpty<span class="sym">)</span>
  <span class="kwa">end</span>

<span class="slc">% ------------- %</span>

  DELIMITER <span class="sym">= &amp;&gt;</span> LINESIZE <span class="sym">=</span> <span class="num">60</span>

<span class="slc">% ------------- %</span>

<span class="kwa">in</span>
  <span class="sym">{</span>ReverseComplement <span class="sym">{</span>New TextFile_ init<span class="sym">(</span>name<span class="sym">:</span>stdin<span class="sym">)}</span> DELIMITER LINESIZE<span class="sym">}</span>
  <span class="sym">{</span>Application<span class="sym">.</span>exit <span class="num">0</span><span class="sym">}</span>
<span class="kwa">end</span>

