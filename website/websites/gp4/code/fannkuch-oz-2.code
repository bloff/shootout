<span class="slc">% The Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">% contributed by Isaac Gouy</span>

<span class="kwa">functor</span>
<span class="kwa">import</span>
   System Application

<span class="kwa">define</span>
   <span class="kwa">fun</span> <span class="sym">{</span>Fannkuch N<span class="sym">}</span>
      <span class="kwa">local</span>
         M <span class="sym">=</span> N<span class="sym">-</span><span class="num">1</span>
         R <span class="sym">= {</span>NewCell N<span class="sym">}</span>
         Check <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span>
         Perm <span class="sym">= {</span>NewArray <span class="num">0</span> M <span class="num">0</span><span class="sym">}</span>
         Perm1 <span class="sym">= {</span>NewArray <span class="num">0</span> M <span class="num">0</span><span class="sym">}</span>
         Count <span class="sym">= {</span>NewArray <span class="num">0</span> M <span class="num">0</span><span class="sym">}</span>
         MaxPerm <span class="sym">= {</span>NewArray <span class="num">0</span> M <span class="num">0</span><span class="sym">}</span>
         FlipsCount <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span>
         MaxFlipsCount <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span>
         Done <span class="sym">= {</span>NewCell <span class="kwa">false</span><span class="sym">}</span>
      <span class="kwa">in</span>

         <span class="kwa">for</span> I <span class="kwa">in</span> <span class="num">0</span><span class="sym">..</span>M do Perm1<span class="sym">.</span>I <span class="sym">:=</span> I <span class="kwa">end</span>

         <span class="kwa">for</span> break<span class="sym">:</span>B do

            <span class="slc">% show we're working with the same sequence of permutations</span>
            <span class="kwa">if</span> <span class="sym">&#64;</span>Check<span class="sym">&lt;</span><span class="num">30</span> <span class="kwa">then</span>
               <span class="kwa">for</span> I <span class="kwa">in</span> <span class="num">0</span><span class="sym">..</span>M do <span class="sym">{</span>System<span class="sym">.</span>print Perm1<span class="sym">.</span>I <span class="sym">+</span> <span class="num">1</span><span class="sym">}</span> <span class="kwa">end</span>
               <span class="sym">{</span>System<span class="sym">.</span>printInfo &quot;<span class="sym">\</span>n&quot;<span class="sym">}</span>
               Check <span class="sym">:= &#64;</span>Check <span class="sym">+</span> <span class="num">1</span>
            <span class="kwa">end</span>

            <span class="kwa">for</span> while<span class="sym">: &#64;</span>R <span class="sym">\=</span> <span class="num">1</span> do
               Count<span class="sym">.(&#64;</span>R<span class="sym">-</span><span class="num">1</span><span class="sym">) := &#64;</span>R
               R <span class="sym">:= &#64;</span>R <span class="sym">-</span> <span class="num">1</span>
            <span class="kwa">end</span>

            <span class="kwa">if</span> <span class="sym">{</span>Not Perm1<span class="sym">.</span>0 <span class="sym">==</span> <span class="num">0</span> <span class="kwa">orelse</span> Perm1<span class="sym">.</span>M <span class="sym">==</span> M<span class="sym">}</span> <span class="kwa">then</span>
               <span class="kwa">for</span> I <span class="kwa">in</span> <span class="num">0</span><span class="sym">..</span>M do Perm<span class="sym">.</span>I <span class="sym">:=</span> Perm1<span class="sym">.</span>I <span class="kwa">end</span>
               FlipsCount <span class="sym">:=</span> <span class="num">0</span>

               <span class="kwa">for</span> break<span class="sym">:</span>B do
                  <span class="kwa">local</span> K <span class="sym">=</span> Perm<span class="num">.0</span> <span class="kwa">in</span>
                     <span class="kwa">if</span> K <span class="sym">==</span> <span class="num">0</span> <span class="kwa">then</span> <span class="sym">{</span>B<span class="sym">}</span> <span class="kwa">end</span>   <span class="slc">% break loop</span>

                     <span class="kwa">for</span> I <span class="kwa">in</span> <span class="num">0</span><span class="sym">..((</span>K<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> div <span class="num">2</span> <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> do
                        <span class="kwa">local</span> Swap <span class="sym">=</span> Perm<span class="sym">.</span>I <span class="kwa">in</span>
                           Perm<span class="sym">.</span>I <span class="sym">:=</span> Perm<span class="sym">.(</span>K<span class="sym">-</span>I<span class="sym">)</span>
                           Perm<span class="sym">.(</span>K<span class="sym">-</span>I<span class="sym">) :=</span> Swap
                        <span class="kwa">end</span>
                     <span class="kwa">end</span>
                     FlipsCount <span class="sym">:= &#64;</span>FlipsCount <span class="sym">+</span> <span class="num">1</span>
                  <span class="kwa">end</span>
               <span class="kwa">end</span>
               <span class="kwa">if</span> <span class="sym">&#64;</span>FlipsCount <span class="sym">&gt; &#64;</span>MaxFlipsCount <span class="kwa">then</span>
                  MaxFlipsCount <span class="sym">:= &#64;</span>FlipsCount
                  <span class="kwa">for</span> I <span class="kwa">in</span> <span class="num">0</span><span class="sym">..</span>M do MaxPerm<span class="sym">.</span>I <span class="sym">:=</span> Perm1<span class="sym">.</span>I <span class="kwa">end</span>
               <span class="kwa">end</span>
            <span class="kwa">end</span>

            <span class="kwa">for</span> break<span class="sym">:</span>B do
               <span class="kwa">if</span> <span class="sym">&#64;</span>R <span class="sym">==</span> N <span class="kwa">then</span> Done <span class="sym">:=</span> <span class="kwa">true</span> <span class="sym">{</span>B<span class="sym">}</span> <span class="kwa">end</span>   <span class="slc">% return from function</span>

               <span class="kwa">local</span> Perm0 <span class="sym">=</span> Perm1<span class="sym">.</span>0 I <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span> K <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span> <span class="kwa">in</span>
                  <span class="kwa">for</span> while<span class="sym">: &#64;</span>I <span class="sym">&lt; &#64;</span>R do
                     K <span class="sym">:= &#64;</span>I <span class="sym">+</span> <span class="num">1</span>
                     Perm1<span class="sym">.&#64;</span>I <span class="sym">:=</span> Perm1<span class="sym">.&#64;</span>K
                     I <span class="sym">:= &#64;</span>K
                  <span class="kwa">end</span>
                  Perm1<span class="sym">.&#64;</span>R <span class="sym">:=</span> Perm0
               <span class="kwa">end</span>

               Count<span class="sym">.&#64;</span>R <span class="sym">:=</span> Count<span class="sym">.&#64;</span>R <span class="sym">-</span> <span class="num">1</span>
               <span class="kwa">if</span> Count<span class="sym">.&#64;</span>R <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then</span> <span class="sym">{</span>B<span class="sym">}</span> <span class="kwa">end</span>   <span class="slc">% break loop</span>

               R <span class="sym">:= &#64;</span>R <span class="sym">+</span> <span class="num">1</span>
            <span class="kwa">end</span>

            <span class="kwa">if</span> <span class="sym">&#64;</span>Done <span class="kwa">then</span> <span class="sym">{</span>B<span class="sym">}</span> <span class="kwa">end</span>

         <span class="kwa">end</span>
         <span class="sym">&#64;</span>MaxFlipsCount

      <span class="kwa">end</span>
   <span class="kwa">end</span>


   <span class="sym">[</span>Arg<span class="sym">] = {</span>Application<span class="sym">.</span>getArgs plain<span class="sym">}</span>
   N <span class="sym">= {</span>String<span class="sym">.</span>toInt Arg<span class="sym">}</span>

<span class="kwa">in</span>
   <span class="sym">{</span>System<span class="sym">.</span>showInfo &quot;Pfannkuchen<span class="sym">(</span>&quot; <span class="sym"># {</span>IntToString N<span class="sym">} #</span> &quot;<span class="sym">) =</span> &quot; <span class="sym">#</span>
      <span class="sym">{</span>IntToString <span class="sym">{</span>Fannkuch N<span class="sym">}} }</span>
   <span class="sym">{</span>Application<span class="sym">.</span>exit <span class="num">0</span><span class="sym">}</span>
<span class="kwa">end</span>
