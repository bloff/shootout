<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   converted to D by Dave Fladebo
   compile: dmd -O -inline -release fasta.d
*/</span>

import std<span class="sym">.</span>stream<span class="sym">,</span> std<span class="sym">.</span>string<span class="sym">;

</span><span class="kwb">int</span> main<span class="sym">(</span><span class="kwb">char</span><span class="sym">[][]</span> args<span class="sym">)
{
</span>    <span class="kwb">int</span> n <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">1</span> ? atoi<span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">;

</span>    <span class="kwc">auto</span> Fasta fasta <span class="sym">=</span> <span class="kwa">new</span> Fasta<span class="sym">;

</span>    fasta<span class="sym">.</span>makeRepeatFasta<span class="sym">(</span><span class="str">&quot;ONE&quot;</span><span class="sym">,</span> <span class="str">&quot;Homo sapiens alu&quot;</span><span class="sym">,</span> n<span class="sym">*</span><span class="num">2</span><span class="sym">);
</span>    fasta<span class="sym">.</span>makeRandomFasta<span class="sym">(</span><span class="str">&quot;TWO&quot;</span><span class="sym">,</span> <span class="str">&quot;IUB ambiguity codes&quot;</span><span class="sym">,</span> Fasta<span class="sym">.</span>TableType<span class="sym">.</span>iub<span class="sym">,</span> n<span class="sym">*</span><span class="num">3</span><span class="sym">);
</span>    fasta<span class="sym">.</span>makeRandomFasta<span class="sym">(</span><span class="str">&quot;THREE&quot;</span><span class="sym">,</span> <span class="str">&quot;Homo sapiens frequency&quot;</span><span class="sym">,</span> Fasta<span class="sym">.</span>TableType<span class="sym">.</span>homosapiens<span class="sym">,</span> n<span class="sym">*</span><span class="num">5</span><span class="sym">);

</span>    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;
}

</span><span class="kwc">auto class</span> Fasta<span class="sym">:</span> Random
<span class="sym">{
</span><span class="kwc">private</span><span class="sym">:
</span>    <span class="kwb">const char</span><span class="sym">[]</span> alu <span class="sym">=
</span>        <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>
        <span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>
        <span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>
        <span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>
        <span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>
        <span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>
        <span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="sym">;

</span>    <span class="kwc">class</span> IUB
    <span class="sym">{
</span>        <span class="kwa">this</span><span class="sym">(</span><span class="kwb">char</span> c<span class="sym">,</span> <span class="kwb">double</span> p<span class="sym">)
        {
</span>            <span class="kwa">this</span><span class="sym">.</span>c <span class="sym">=</span> c<span class="sym">;
</span>            <span class="kwa">this</span><span class="sym">.</span>p <span class="sym">=</span> p<span class="sym">;
        }
</span>        <span class="kwb">char</span> c<span class="sym">;
</span>        <span class="kwb">double</span> p<span class="sym">;
    }

</span>    IUB<span class="sym">[]</span> iub<span class="sym">;
</span>    IUB<span class="sym">[]</span> homosapiens<span class="sym">;

</span>    <span class="kwb">void</span> makeCumulative<span class="sym">(</span>IUB<span class="sym">[]</span> table<span class="sym">)
    {
</span>        <span class="kwb">double</span> prob <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span>        foreach<span class="sym">(</span>IUB tbl<span class="sym">;</span> table<span class="sym">)
        {
</span>            prob <span class="sym">+=</span> tbl<span class="sym">.</span>p<span class="sym">;
</span>            tbl<span class="sym">.</span>p <span class="sym">=</span> prob<span class="sym">;
        }
    }

</span>    BufferedStream bso<span class="sym">;

</span><span class="kwc">public</span><span class="sym">:
</span>    <span class="kwb">enum</span> TableType
    <span class="sym">{
</span>        iub<span class="sym">,
</span>        homosapiens
    <span class="sym">}

</span>    <span class="kwa">this</span><span class="sym">()
    {
</span>        iub <span class="sym">~=</span> <span class="kwa">new</span> IUB<span class="sym">(</span><span class="str">'a'</span><span class="sym">,</span> <span class="num">0.27</span><span class="sym">);
</span>        iub <span class="sym">~=</span> <span class="kwa">new</span> IUB<span class="sym">(</span><span class="str">'c'</span><span class="sym">,</span> <span class="num">0.12</span><span class="sym">);
</span>        iub <span class="sym">~=</span> <span class="kwa">new</span> IUB<span class="sym">(</span><span class="str">'g'</span><span class="sym">,</span> <span class="num">0.12</span><span class="sym">);
</span>        iub <span class="sym">~=</span> <span class="kwa">new</span> IUB<span class="sym">(</span><span class="str">'t'</span><span class="sym">,</span> <span class="num">0.27</span><span class="sym">);

</span>        iub <span class="sym">~=</span> <span class="kwa">new</span> IUB<span class="sym">(</span><span class="str">'B'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">);
</span>        iub <span class="sym">~=</span> <span class="kwa">new</span> IUB<span class="sym">(</span><span class="str">'D'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">);
</span>        iub <span class="sym">~=</span> <span class="kwa">new</span> IUB<span class="sym">(</span><span class="str">'H'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">);
</span>        iub <span class="sym">~=</span> <span class="kwa">new</span> IUB<span class="sym">(</span><span class="str">'K'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">);
</span>        iub <span class="sym">~=</span> <span class="kwa">new</span> IUB<span class="sym">(</span><span class="str">'M'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">);
</span>        iub <span class="sym">~=</span> <span class="kwa">new</span> IUB<span class="sym">(</span><span class="str">'N'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">);
</span>        iub <span class="sym">~=</span> <span class="kwa">new</span> IUB<span class="sym">(</span><span class="str">'R'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">);
</span>        iub <span class="sym">~=</span> <span class="kwa">new</span> IUB<span class="sym">(</span><span class="str">'S'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">);
</span>        iub <span class="sym">~=</span> <span class="kwa">new</span> IUB<span class="sym">(</span><span class="str">'V'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">);
</span>        iub <span class="sym">~=</span> <span class="kwa">new</span> IUB<span class="sym">(</span><span class="str">'W'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">);
</span>        iub <span class="sym">~=</span> <span class="kwa">new</span> IUB<span class="sym">(</span><span class="str">'Y'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">);

</span>        homosapiens <span class="sym">~=</span> <span class="kwa">new</span> IUB<span class="sym">(</span><span class="str">'a'</span><span class="sym">,</span> <span class="num">0.3029549426680</span><span class="sym">);
</span>        homosapiens <span class="sym">~=</span> <span class="kwa">new</span> IUB<span class="sym">(</span><span class="str">'c'</span><span class="sym">,</span> <span class="num">0.1979883004921</span><span class="sym">);
</span>        homosapiens <span class="sym">~=</span> <span class="kwa">new</span> IUB<span class="sym">(</span><span class="str">'g'</span><span class="sym">,</span> <span class="num">0.1975473066391</span><span class="sym">);
</span>        homosapiens <span class="sym">~=</span> <span class="kwa">new</span> IUB<span class="sym">(</span><span class="str">'t'</span><span class="sym">,</span> <span class="num">0.3015094502008</span><span class="sym">);

</span>        bso <span class="sym">=</span> <span class="kwa">new</span> BufferedStream<span class="sym">(</span>stdout<span class="sym">);
    }

    ~</span><span class="kwa">this</span><span class="sym">()
    {
</span>        bso<span class="sym">.</span>close<span class="sym">();
    }

</span>    <span class="kwb">void</span> makeRepeatFasta<span class="sym">(</span><span class="kwb">char</span><span class="sym">[]</span> id<span class="sym">,</span> <span class="kwb">char</span><span class="sym">[]</span> desc<span class="sym">,</span> <span class="kwb">int</span> n<span class="sym">)
    {
</span>        <span class="kwb">const int</span> length <span class="sym">=</span> <span class="num">60</span><span class="sym">,</span> kn <span class="sym">=</span> alu<span class="sym">.</span>length<span class="sym">;
</span>        <span class="kwb">int</span> k <span class="sym">=</span> <span class="num">0</span><span class="sym">;

</span>        bso<span class="sym">.</span>writefln<span class="sym">(</span><span class="str">&quot;&gt;&quot;</span><span class="sym">,</span>id<span class="sym">,</span><span class="str">&quot; &quot;</span><span class="sym">,</span>desc<span class="sym">);
</span>        <span class="kwb">char</span><span class="sym">[</span>length <span class="sym">+</span> <span class="num">1</span><span class="sym">]</span> line<span class="sym">;
</span>        <span class="kwa">while</span><span class="sym">(</span>n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)
        {
</span>            <span class="kwb">int</span> m<span class="sym">;
</span>            <span class="kwa">if</span><span class="sym">(</span>n <span class="sym">&lt;</span> length<span class="sym">)</span> m <span class="sym">=</span> n<span class="sym">;</span> <span class="kwa">else</span> m <span class="sym">=</span> length<span class="sym">;
</span>            <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> j <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> j <span class="sym">&lt;</span> m<span class="sym">;</span> j<span class="sym">++,</span> k<span class="sym">++)
            {
</span>                <span class="kwa">if</span><span class="sym">(</span>k <span class="sym">&gt;=</span> kn<span class="sym">)</span> k <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>                line<span class="sym">[</span>j<span class="sym">] =</span> alu<span class="sym">[</span>k<span class="sym">];
            }
</span>            line<span class="sym">[</span>m<span class="sym">] =</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;
</span>            bso<span class="sym">.</span>write<span class="sym">(</span>cast<span class="sym">(</span>ubyte<span class="sym">[])</span>line<span class="sym">[</span><span class="num">0</span><span class="sym">..</span>m<span class="sym">+</span><span class="num">1</span><span class="sym">]);
</span>            n <span class="sym">-=</span> length<span class="sym">;
        }
    }

</span>    <span class="kwb">void</span> makeRandomFasta<span class="sym">(</span><span class="kwb">char</span><span class="sym">[]</span> id<span class="sym">,</span> <span class="kwb">char</span><span class="sym">[]</span> desc<span class="sym">,</span> TableType tableType<span class="sym">,</span> <span class="kwb">int</span> n<span class="sym">)
    {
</span>        <span class="kwb">const int</span> length <span class="sym">=</span> <span class="num">60</span><span class="sym">;
</span>        IUB<span class="sym">[]</span> table<span class="sym">;

</span>        <span class="kwa">switch</span><span class="sym">(</span>tableType<span class="sym">)
        {
</span>            <span class="kwa">case</span> TableType<span class="sym">.</span>iub<span class="sym">:
</span>                table <span class="sym">=</span> iub<span class="sym">;
</span>                <span class="kwa">break</span><span class="sym">;
</span>            <span class="kwa">default</span><span class="sym">:
</span>                table <span class="sym">=</span> homosapiens<span class="sym">;
</span>                <span class="kwa">break</span><span class="sym">;
        }

</span>        bso<span class="sym">.</span>writefln<span class="sym">(</span><span class="str">&quot;&gt;&quot;</span><span class="sym">,</span>id<span class="sym">,</span><span class="str">&quot; &quot;</span><span class="sym">,</span>desc<span class="sym">);
</span>        makeCumulative<span class="sym">(</span>table<span class="sym">);
</span>        <span class="kwb">char</span><span class="sym">[</span>length <span class="sym">+</span> <span class="num">1</span><span class="sym">]</span> line<span class="sym">;
</span>        <span class="kwa">while</span><span class="sym">(</span>n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)
        {
</span>            <span class="kwb">int</span> m<span class="sym">;
</span>            <span class="kwa">if</span><span class="sym">(</span>n <span class="sym">&lt;</span> length<span class="sym">)</span> m <span class="sym">=</span> n<span class="sym">;</span> <span class="kwa">else</span> m <span class="sym">=</span> length<span class="sym">;
</span>            <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> j <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> j <span class="sym">&lt;</span> m<span class="sym">;</span> j<span class="sym">++)
            {
</span>                <span class="kwb">double</span> rval <span class="sym">=</span> genRandom<span class="sym">(</span><span class="num">1</span><span class="sym">);
</span>                foreach<span class="sym">(</span>IUB tbl<span class="sym">;</span> table<span class="sym">)
                {
</span>                    <span class="kwa">if</span><span class="sym">(</span>rval <span class="sym">&lt;</span> tbl<span class="sym">.</span>p<span class="sym">)
                    {
</span>                        line<span class="sym">[</span>j<span class="sym">] =</span> tbl<span class="sym">.</span>c<span class="sym">;
</span>                        <span class="kwa">break</span><span class="sym">;
                    }
                }
            }
</span>            line<span class="sym">[</span>m<span class="sym">] =</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;
</span>            bso<span class="sym">.</span>write<span class="sym">(</span>cast<span class="sym">(</span>ubyte<span class="sym">[])</span>line<span class="sym">[</span><span class="num">0</span><span class="sym">..</span>m<span class="sym">+</span><span class="num">1</span><span class="sym">]);
</span>            n <span class="sym">-=</span> length<span class="sym">;
        }
    }
}

</span><span class="kwc">class</span> Random
<span class="sym">{
</span><span class="kwc">private</span><span class="sym">:
</span>    <span class="kwb">int</span> last <span class="sym">=</span> <span class="num">42</span><span class="sym">;
</span>    <span class="kwb">const int</span> IM <span class="sym">=</span> <span class="num">139968</span><span class="sym">;
</span>    <span class="kwb">const int</span> IA <span class="sym">=</span> <span class="num">3877</span><span class="sym">;
</span>    <span class="kwb">const int</span> IC <span class="sym">=</span> <span class="num">29573</span><span class="sym">;
</span><span class="kwc">public</span><span class="sym">:
</span>    <span class="kwb">double</span> genRandom<span class="sym">(</span><span class="kwb">double</span> max<span class="sym">)
    {
</span>        <span class="kwa">return</span><span class="sym">(</span>max <span class="sym">* (</span>last <span class="sym">= (</span>last <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">) %</span> IM<span class="sym">) /</span> IM<span class="sym">);
    }
}</span>
