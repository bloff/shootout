<span class="slc">-- The Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">-- Created by Chris Kuklewicz and Don Stewart</span>
<span class="slc">--</span>
<span class="slc">-- compile with: ghc -O3 -optc-O3 -fasm -fglasgow-exts knuc-1.hs -o knuc-1.ghc_run</span>
<span class="slc">--</span>
<span class="slc">-- run with: ./knuc-1.ghc_run +RTS -H40m -RTS %A</span>

<span class="kwa">import</span> GHC.Exts
<span class="kwa">import</span> GHC.IOBase
<span class="kwa">import</span> Control.Monad
<span class="kwa">import</span> Foreign
<span class="kwa">import</span> Text.Printf<span class="sym">(</span>printf<span class="sym">)</span>
<span class="kwa">import</span> Data.List<span class="sym">(</span>isPrefixOf<span class="sym">,</span>sortBy<span class="sym">)</span>
<span class="kwa">import</span> Data.Maybe<span class="sym">(</span>fromMaybe<span class="sym">)</span>
<span class="kwa">import</span> Data.<span class="kwb">Char</span><span class="sym">(</span>ord<span class="sym">,</span>chr<span class="sym">,</span>toUpper<span class="sym">)</span>
<span class="kwa">import qualified</span> Data.HashTable <span class="kwa">as</span> T

searchStrings <span class="sym">= [</span><span class="str">&quot;GGT&quot;</span><span class="sym">,</span><span class="str">&quot;GGTA&quot;</span><span class="sym">,</span><span class="str">&quot;GGTATT&quot;</span><span class="sym">,</span><span class="str">&quot;GGTATTTTAATT&quot;</span><span class="sym">,</span><span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="sym">]</span>

main <span class="sym">=</span> <span class="kwa">do</span> section <span class="sym">&lt;-</span> getSection <span class="str">&quot;&gt;THREE&quot;</span>
          mapM_ <span class="sym">(</span>writeFreqs section<span class="sym">) [</span><span class="num">1</span><span class="sym">,</span><span class="num">2</span><span class="sym">]</span>
          mapM_ <span class="sym">(</span>writeFrame section<span class="sym">) =&lt;&lt;</span> mapM stringToSeq searchStrings

getSection prefix <span class="sym">=</span> <span class="kwa">do</span> findPrefix
                       baseArray <span class="sym">&lt;-</span> newArray0 <span class="num">0</span> <span class="sym">=&lt;&lt;</span> getRest <span class="sym">=&lt;&lt;</span> skipComments
                       size <span class="sym">&lt;-</span> lengthArray0 <span class="num">0</span> baseArray
                       return <span class="sym">(</span>size<span class="sym">,</span>baseArray<span class="sym">)</span>
  <span class="kwa">where</span> findPrefix <span class="sym">=</span> <span class="kwa">do</span> line <span class="sym">&lt;-</span> getLine<span class="sym">;</span> unless <span class="sym">(</span>isPrefixOf prefix line<span class="sym">)</span> findPrefix
        skipComments <span class="sym">=</span> <span class="kwa">do</span> line <span class="sym">&lt;-</span> getLine
                          if '<span class="sym">;</span>' <span class="sym">==</span> head line <span class="kwa">then</span> skipComments <span class="kwa">else</span> return line
        getRest line <span class="sym">=</span> liftM asBases getContents
          <span class="kwa">where</span> asBases <span class="sym">= (</span>concatMap c2b<span class="sym">)</span>.<span class="sym">(</span>takeWhile <span class="sym">((</span>'<span class="sym">&gt;</span>'<span class="sym">/=)</span>.head<span class="sym">))</span>.<span class="sym">(</span>line<span class="sym">:)</span>.lines

newTable <span class="sym">::</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> IO <span class="sym">(</span>T.HashTable <span class="sym">(</span>Ptr Word8<span class="sym">)</span> <span class="kwb">Int</span><span class="sym">)</span>
newTable frameSize <span class="sym">=</span> T.new <span class="sym">(</span>eqSeq frameSize<span class="sym">) (</span>hashSeq frameSize<span class="sym">)</span>

<span class="slc">-- (countFreq (size,bases)) satisfies the requirement to &quot;define a</span>
<span class="slc">-- procedure/function to update a hashtable of k-nucleotide keys and</span>
<span class="slc">-- count values, for a particular reading-frame&quot;</span>
countFreq <span class="sym">(</span>size<span class="sym">,</span>bases<span class="sym">)</span> frameSize table <span class="sym">=</span> mapSeq <span class="sym">&gt;&gt;</span> return table
  <span class="kwa">where</span> mapSeq <span class="sym">=</span> mapM_ <span class="sym">(</span>countFrame . <span class="sym">(</span>advancePtr bases<span class="sym">)) [</span><span class="num">0</span>..<span class="sym">(</span>size<span class="sym">-</span>frameSize<span class="sym">)]</span>
        countFrame frame <span class="sym">=</span> <span class="kwa">do</span> mOld <span class="sym">&lt;-</span> T.lookup table frame
                              T.update table frame $<span class="sym">!</span> maybe <span class="num">1</span> succ mOld

writeFreqs sb<span class="sym">&#64;(</span>size<span class="sym">,</span>_<span class="sym">)</span> frameSize <span class="sym">=</span> <span class="kwa">do</span>
  <span class="kwa">let</span> printBSF <span class="sym">(</span>bs<span class="sym">,</span>f<span class="sym">) =</span> printf <span class="str">&quot;%s %.3f\n&quot;</span> <span class="sym">(</span>showSeq frameSize bs<span class="sym">) (</span>percent f<span class="sym">)</span>
        <span class="kwa">where</span> percent n <span class="sym">= (</span><span class="num">100</span> <span class="sym">* (</span>fromIntegral n<span class="sym">) /</span> total<span class="sym">) ::</span> <span class="kwb">Double</span>
              total <span class="sym">=</span> fromIntegral <span class="sym">(</span>size <span class="sym">-</span> frameSize <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span>
      freqAndKey <span class="sym">(</span>k1<span class="sym">,</span>x<span class="sym">) (</span>k2<span class="sym">,</span>y<span class="sym">) =</span> <span class="kwa">case</span> compare y x <span class="kwa">of</span>
        EQ <span class="sym">-&gt;</span> compare <span class="sym">(</span>showSeq frameSize k1<span class="sym">) (</span>showSeq frameSize k2<span class="sym">)</span>
        lt'gt <span class="sym">-&gt;</span> lt'gt
  unsorted <span class="sym">&lt;-</span> T.toList <span class="sym">=&lt;&lt;</span> countFreq sb frameSize <span class="sym">=&lt;&lt;</span> newTable frameSize
  mapM_ printBSF <span class="sym">(</span>sortBy freqAndKey unsorted<span class="sym">) &gt;&gt;</span> putChar '\n'

writeFrame sb<span class="sym">&#64;(</span>size<span class="sym">,</span>_<span class="sym">) (</span>frameSize<span class="sym">,</span>frameSeq<span class="sym">) =</span> <span class="kwa">do</span>
  mAnswer <span class="sym">&lt;-</span> flip T.lookup frameSeq <span class="sym">=&lt;&lt;</span> countFreq sb frameSize <span class="sym">=&lt;&lt;</span> newTable frameSize
  putStrLn $ <span class="sym">(</span>show $ fromMaybe <span class="num">0</span> mAnswer<span class="sym">) ++ (</span>'\t' <span class="sym">: (</span>showSeq frameSize frameSeq<span class="sym">))</span>

c2b <span class="sym">=</span> map <span class="sym">(</span>toEnum . ord . toUpper<span class="sym">)</span>

stringToSeq str <span class="sym">=</span> liftM <span class="sym">((,) (</span>length str<span class="sym">)) (</span>newArray0 <span class="num">0</span> <span class="sym">(</span>c2b str<span class="sym">))</span>

showSeq fs ptr <span class="sym">=</span> unsafePerformIO $ peekArray fs ptr <span class="sym">&gt;&gt;=</span> return.<span class="sym">(</span>map <span class="sym">(</span>chr . fromEnum<span class="sym">))</span>

<span class="slc">-- --</span>
<span class="slc">-- -- Performance tweaked routines for (HashTable Seq Int)</span>
<span class="slc">-- --</span>

<span class="com">{-# INLINE inlinePerformIO #-}</span>
inlinePerformIO <span class="sym">(</span>IO m<span class="sym">) =</span> <span class="kwa">case</span> m realWorld# <span class="kwa">of</span> <span class="sym">(</span># _<span class="sym">,</span> r #<span class="sym">) -&gt;</span> r

hashSeq <span class="sym">(</span>I# frameSize<span class="sym">) (</span>Ptr ptr<span class="sym">) =</span> inlinePerformIO $ IO $ <span class="sym">(</span>\s <span class="sym">-&gt;</span> hashmem frameSize ptr <span class="num">0</span># s<span class="sym">)</span>

<span class="com">{-# INLINE hashmem #-}</span>
hashmem remainingSize ptr runningHash s <span class="sym">=</span> if remainingSize <span class="sym">==</span># <span class="num">0</span># <span class="kwa">then</span> <span class="sym">(</span># s<span class="sym">,</span> toEnum <span class="sym">(</span>I# runningHash<span class="sym">)</span> #<span class="sym">)</span>
  <span class="kwa">else case</span> readInt8OffAddr# ptr <span class="num">0</span># s <span class="kwa">of</span> { <span class="sym">(</span># s<span class="sym">,</span> i8  #<span class="sym">) -&gt;</span>
         hashmem <span class="sym">(</span>remainingSize <span class="sym">-</span># <span class="num">1</span>#<span class="sym">) (</span>plusAddr# ptr <span class="num">1</span>#<span class="sym">) ((-</span><span class="num">1640531527</span>#<span class="sym">) *</span># runningHash <span class="sym">+</span># i8<span class="sym">)</span> s }

eqSeq <span class="sym">(</span>I# frameSize<span class="sym">) (</span>Ptr ptr1<span class="sym">) (</span>Ptr ptr2<span class="sym">) =</span> inlinePerformIO $ IO $ <span class="sym">(</span>\s <span class="sym">-&gt;</span> eqmem frameSize ptr1 ptr2 s<span class="sym">)</span>

<span class="com">{-# INLINE eqmem #-}</span>
eqmem remainingSize ptr1 ptr2 s <span class="sym">=</span> if remainingSize <span class="sym">==</span># <span class="num">0</span># <span class="kwa">then</span> <span class="sym">(</span># s <span class="sym">,</span> <span class="kwa">True</span> #<span class="sym">)</span>
  <span class="kwa">else case</span> readInt8OffAddr# ptr1 <span class="num">0</span># s <span class="kwa">of</span> { <span class="sym">(</span># s<span class="sym">,</span> i8a #<span class="sym">) -&gt;</span>
       <span class="kwa">case</span> readInt8OffAddr# ptr2 <span class="num">0</span># s <span class="kwa">of</span> { <span class="sym">(</span># s<span class="sym">,</span> i8b #<span class="sym">) -&gt;</span>
              if i8a <span class="sym">/=</span># i8b <span class="kwa">then</span> <span class="sym">(</span># s<span class="sym">,</span> <span class="kwa">False</span> #<span class="sym">)</span>
              <span class="kwa">else</span> eqmem <span class="sym">(</span>remainingSize <span class="sym">-</span># <span class="num">1</span>#<span class="sym">) (</span>plusAddr# ptr1 <span class="num">1</span>#<span class="sym">) (</span>plusAddr# ptr2 <span class="num">1</span>#<span class="sym">)</span> s } }

