<span class="slc">% ----------------------------------------------------------------------</span>
<span class="slc">% The Great Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">%</span>
<span class="slc">% Contributed by Anthony Borla</span>
<span class="slc">% ----------------------------------------------------------------------</span>

main <span class="sym">:-</span>
  cmdlNumArg<span class="sym">(</span><span class="num">1</span><span class="sym">,</span> N<span class="sym">),</span>

  MIN_DEPTH <span class="kwa">is</span> <span class="num">4</span><span class="sym">,</span> set_limits<span class="sym">(</span>N<span class="sym">,</span> MIN_DEPTH<span class="sym">,</span> MAX_DEPTH<span class="sym">,</span> STRETCH_DEPTH<span class="sym">),</span>

  bottom_up_tree<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> STRETCH_DEPTH<span class="sym">,</span> ST<span class="sym">),</span>

  check_tree<span class="sym">(</span>ST<span class="sym">,</span> ITS<span class="sym">),</span>
  format<span class="sym">(</span><span class="str">'stretch tree of depth ~w</span><span class="esc">\t</span> <span class="str">check: ~w~n'</span><span class="sym">, [</span>STRETCH_DEPTH<span class="sym">,</span> ITS<span class="sym">]),</span>

  bottom_up_tree<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> MAX_DEPTH<span class="sym">,</span> LLT<span class="sym">),</span>

  descend_trees<span class="sym">(</span>MIN_DEPTH<span class="sym">,</span> MIN_DEPTH<span class="sym">,</span> MAX_DEPTH<span class="sym">),</span>

  check_tree<span class="sym">(</span>LLT<span class="sym">,</span> ITL<span class="sym">),</span>
  format<span class="sym">(</span><span class="str">'long lived tree of depth ~w</span><span class="esc">\t</span> <span class="str">check: ~w~n'</span><span class="sym">, [</span>MAX_DEPTH<span class="sym">,</span> ITL<span class="sym">])</span>.

<span class="slc">% ------------------------------- %</span>

set_limits<span class="sym">(</span>N<span class="sym">,</span> MinDepth<span class="sym">,</span> MaxDepth<span class="sym">,</span> StretchDepth<span class="sym">) :-</span>
  MinDepth1 <span class="kwa">is</span> MinDepth <span class="sym">+</span> <span class="num">2</span><span class="sym">,</span>
  <span class="sym">(</span>MinDepth1 <span class="sym">&gt;</span> N <span class="sym">-&gt;</span> MaxDepth <span class="kwa">is</span> MinDepth1 <span class="sym">;</span> MaxDepth <span class="kwa">is</span> N<span class="sym">),</span>
  StretchDepth <span class="kwa">is</span> MaxDepth <span class="sym">+</span> <span class="num">1</span>.

<span class="slc">% ------------------------------- %</span>

descend_trees<span class="sym">(</span>CurrentDepth<span class="sym">,</span> MinDepth<span class="sym">,</span> MaxDepth<span class="sym">) :-</span>
  <span class="sym">(</span>CurrentDepth <span class="sym">=&lt;</span> MaxDepth <span class="sym">-&gt;</span>
    N <span class="kwa">is</span> <span class="num">2</span> <span class="sym">** (</span>MaxDepth <span class="sym">-</span> CurrentDepth <span class="sym">+</span> MinDepth<span class="sym">),</span> Iterations <span class="kwa">is</span> <span class="num">2</span> <span class="sym">*</span> N<span class="sym">,</span>
    sum_trees<span class="sym">(</span>N<span class="sym">,</span> CurrentDepth<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> Sum<span class="sym">),</span>
    format<span class="sym">(</span><span class="str">'~w</span><span class="esc">\t</span> <span class="str">trees of depth ~w</span><span class="esc">\t</span> <span class="str">check: ~w~n'</span><span class="sym">, [</span>Iterations<span class="sym">,</span> CurrentDepth<span class="sym">,</span> Sum<span class="sym">]),</span>
    NewDepth <span class="kwa">is</span> CurrentDepth <span class="sym">+</span> <span class="num">2</span><span class="sym">, !,</span> descend_trees<span class="sym">(</span>NewDepth<span class="sym">,</span> MinDepth<span class="sym">,</span> MaxDepth<span class="sym">)</span>
  <span class="sym">;</span>
    <span class="kwa">true</span><span class="sym">)</span>.

<span class="slc">% ------------- %</span>

sum_trees<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> _<span class="sym">,</span> AccSum<span class="sym">,</span> AccSum<span class="sym">) :- !</span>.

sum_trees<span class="sym">(</span>N<span class="sym">,</span> CurrentDepth<span class="sym">,</span> AccSum<span class="sym">,</span> Sum<span class="sym">) :-</span>
  bottom_up_tree<span class="sym">(</span>N<span class="sym">,</span> CurrentDepth<span class="sym">,</span> TreeLeft<span class="sym">),</span>
  Nneg <span class="kwa">is</span> <span class="sym">-</span><span class="num">1</span> <span class="sym">*</span> N<span class="sym">,</span> bottom_up_tree<span class="sym">(</span>Nneg<span class="sym">,</span> CurrentDepth<span class="sym">,</span> TreeRight<span class="sym">),</span>
  check_tree<span class="sym">(</span>TreeLeft<span class="sym">,</span> ItemLeft<span class="sym">),</span> check_tree<span class="sym">(</span>TreeRight<span class="sym">,</span> ItemRight<span class="sym">),</span>
  AccSum1 <span class="kwa">is</span> AccSum <span class="sym">+</span> ItemLeft <span class="sym">+</span> ItemRight<span class="sym">,</span>
  N1 <span class="kwa">is</span> N <span class="sym">-</span> <span class="num">1</span><span class="sym">, !,</span> sum_trees<span class="sym">(</span>N1<span class="sym">,</span> CurrentDepth<span class="sym">,</span> AccSum1<span class="sym">,</span> Sum<span class="sym">)</span>.

<span class="slc">% ------------------------------- %</span>

make_tree<span class="sym">(</span>Item<span class="sym">,</span> Left<span class="sym">,</span> Right<span class="sym">,</span> tree<span class="sym">(</span>Item<span class="sym">,</span> Left<span class="sym">,</span> Right<span class="sym">))</span>.

<span class="slc">% ------------- %</span>

bottom_up_tree<span class="sym">(</span>Item<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> tree<span class="sym">(</span>Item<span class="sym">,</span> nil<span class="sym">,</span> nil<span class="sym">)) :- !</span>.

bottom_up_tree<span class="sym">(</span>Item<span class="sym">,</span> Depth<span class="sym">,</span> Tree<span class="sym">) :-</span>
  ItemLeft <span class="kwa">is</span> <span class="num">2</span> <span class="sym">*</span> Item <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> DepthLeft <span class="kwa">is</span> Depth <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> bottom_up_tree<span class="sym">(</span>ItemLeft<span class="sym">,</span> DepthLeft<span class="sym">,</span> TreeLeft<span class="sym">),</span>
  ItemRight <span class="kwa">is</span> <span class="num">2</span> <span class="sym">*</span> Item<span class="sym">,</span> DepthRight <span class="kwa">is</span> Depth <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> bottom_up_tree<span class="sym">(</span>ItemRight<span class="sym">,</span> DepthRight<span class="sym">,</span> TreeRight<span class="sym">),</span>
  make_tree<span class="sym">(</span>Item<span class="sym">,</span> TreeLeft<span class="sym">,</span> TreeRight<span class="sym">,</span> Tree<span class="sym">)</span>.

<span class="slc">% ------------- %</span>

check_tree<span class="sym">(</span>tree<span class="sym">(</span>Item<span class="sym">,</span> nil<span class="sym">,</span> _<span class="sym">),</span> Item<span class="sym">) :- !</span>.

check_tree<span class="sym">(</span>tree<span class="sym">(</span>Item<span class="sym">,</span> Left<span class="sym">,</span> Right<span class="sym">),</span> ItemNew<span class="sym">) :-</span>
  check_tree<span class="sym">(</span>Left<span class="sym">,</span> ItemLeft<span class="sym">),</span>
  check_tree<span class="sym">(</span>Right<span class="sym">,</span> ItemRight<span class="sym">),</span>
  ItemNew <span class="kwa">is</span> Item <span class="sym">+</span> ItemLeft <span class="sym">-</span> ItemRight.

<span class="slc">% ------------------------------- %</span>

argument_value<span class="sym">(</span>N<span class="sym">,</span> Arg<span class="sym">) :-</span>
  <span class="kwb">current_prolog_flag</span><span class="sym">(</span>argv<span class="sym">,</span> Cmdline<span class="sym">),</span> append<span class="sym">(</span>_<span class="sym">, [--|</span>UserArgs<span class="sym">],</span> Cmdline<span class="sym">),</span>
  Nth <span class="kwa">is</span> N <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> nth0<span class="sym">(</span>Nth<span class="sym">,</span> UserArgs<span class="sym">,</span> Arg<span class="sym">)</span>.

cmdlNumArg<span class="sym">(</span>Nth<span class="sym">,</span> N<span class="sym">) :-</span>
  argument_value<span class="sym">(</span>Nth<span class="sym">,</span> Arg<span class="sym">),</span> <span class="kwb">catch</span><span class="sym">(</span>atom_number<span class="sym">(</span>Arg<span class="sym">,</span> N<span class="sym">),</span> _<span class="sym">,</span> <span class="kwa">fail</span><span class="sym">) ;</span> <span class="kwa">halt</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.

