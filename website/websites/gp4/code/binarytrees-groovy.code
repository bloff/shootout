<span class="dir">#!/bin/env groovy</span>
<span class="com">/*</span>
<span class="com">	$Id: binarytrees-groovy.code,v 1.3 2005-10-30 04:35:07 igouy-guest Exp $</span>
<span class="com"></span>
<span class="com">	The Great Computer Language Shootout</span>
<span class="com">	http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">	contributed by Jochen Hinrichsen</span>
<span class="com">*/</span>

<span class="kwc">class</span> TreeNode <span class="sym">{</span>
      <span class="kwc">private</span> left<span class="sym">,</span> right
      <span class="kwc">private</span> item

      <span class="kwd">TreeNode</span><span class="sym">(</span><span class="kwb">int</span> item<span class="sym">){</span>
         <span class="kwa">this</span><span class="sym">.</span>item <span class="sym">=</span> item
      <span class="sym">}</span>

      <span class="kwc">private</span> <span class="kwb">static</span> TreeNode <span class="kwd">bottomUpTree</span><span class="sym">(</span><span class="kwb">int</span> item<span class="sym">,</span> <span class="kwb">int</span> depth<span class="sym">) {</span>
         <span class="kwa">if</span> <span class="sym">(</span>depth<span class="sym">&gt;</span><span class="num">0</span><span class="sym">) {</span>
            <span class="kwa">return new</span> <span class="kwd">TreeNode</span><span class="sym">(</span>
                 <span class="kwd">bottomUpTree</span><span class="sym">(</span><span class="num">2</span><span class="sym">*</span>item<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> depth<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
               <span class="sym">,</span> <span class="kwd">bottomUpTree</span><span class="sym">(</span><span class="num">2</span><span class="sym">*</span>item<span class="sym">,</span> depth<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
               <span class="sym">,</span> item
               <span class="sym">)</span>
         <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
            <span class="kwa">return new</span> <span class="kwd">TreeNode</span><span class="sym">(</span>item<span class="sym">)</span>
         <span class="sym">}</span>
      <span class="sym">}</span>

      <span class="kwd">TreeNode</span><span class="sym">(</span>TreeNode left<span class="sym">,</span> TreeNode right<span class="sym">,</span> <span class="kwb">int</span> item<span class="sym">){</span>
         <span class="kwa">this</span><span class="sym">.</span>left <span class="sym">=</span> left
         <span class="kwa">this</span><span class="sym">.</span>right <span class="sym">=</span> right
         <span class="kwa">this</span><span class="sym">.</span>item <span class="sym">=</span> item
      <span class="sym">}</span>

      <span class="kwc">private</span> <span class="kwb">int</span> <span class="kwd">itemCheck</span><span class="sym">(){</span>
         <span class="slc">// if necessary deallocate here</span>
         <span class="kwa">if</span> <span class="sym">(</span>left<span class="sym">==</span>null<span class="sym">)</span> <span class="kwa">return</span> item
         <span class="kwa">else return</span> item <span class="sym">+</span> left<span class="sym">.</span><span class="kwd">itemCheck</span><span class="sym">() -</span> right<span class="sym">.</span><span class="kwd">itemCheck</span><span class="sym">()</span>
      <span class="sym">}</span>
<span class="sym">}</span>

def n <span class="sym">= (</span>args<span class="sym">.</span>length <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> ? <span class="num">10</span> <span class="sym">:</span> args<span class="sym">[</span><span class="num">0</span><span class="sym">].</span><span class="kwd">toInteger</span><span class="sym">()</span>
def minDepth <span class="sym">=</span> <span class="num">4</span>
def maxDepth <span class="sym">= [</span> minDepth <span class="sym">+</span> <span class="num">2</span><span class="sym">,</span> n<span class="sym">].</span><span class="kwd">max</span><span class="sym">()</span>
def stretchDepth <span class="sym">=</span> maxDepth <span class="sym">+</span> <span class="num">1</span>

def check <span class="sym">= (</span>TreeNode<span class="sym">.</span><span class="kwd">bottomUpTree</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span>stretchDepth<span class="sym">)).</span><span class="kwd">itemCheck</span><span class="sym">()</span>
println <span class="str">&quot;stretch tree of depth ${stretchDepth}</span><span class="esc">\t</span>  <span class="str">check: ${check}&quot;</span>

def longLivedTree <span class="sym">=</span> TreeNode<span class="sym">.</span><span class="kwd">bottomUpTree</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span>maxDepth<span class="sym">)</span>

def depth<span class="sym">=</span>minDepth
<span class="kwa">while</span> <span class="sym">(</span>depth<span class="sym">&lt;=</span>maxDepth<span class="sym">) {</span>
	def iterations <span class="sym">=</span> <span class="num">1</span> <span class="sym">&lt;&lt; (</span>maxDepth <span class="sym">-</span> depth <span class="sym">+</span> minDepth<span class="sym">)</span>

	check <span class="sym">=</span> <span class="num">0</span>
    <span class="kwa">for</span> <span class="sym">(</span>i in <span class="num">1</span><span class="sym">..</span>iterations<span class="sym">) {</span>
		check <span class="sym">+= (</span>TreeNode<span class="sym">.</span><span class="kwd">bottomUpTree</span><span class="sym">(</span>i<span class="sym">,</span>depth<span class="sym">)).</span><span class="kwd">itemCheck</span><span class="sym">()</span>
        check <span class="sym">+= (</span>TreeNode<span class="sym">.</span><span class="kwd">bottomUpTree</span><span class="sym">(-</span>i<span class="sym">,</span>depth<span class="sym">)).</span><span class="kwd">itemCheck</span><span class="sym">()</span>
    <span class="sym">}</span>

    println <span class="str">&quot;${iterations*2}</span><span class="esc">\t</span>  <span class="str">trees of depth ${depth}</span><span class="esc">\t</span>  <span class="str">check: ${check}&quot;</span>

	depth<span class="sym">+=</span><span class="num">2</span>
<span class="sym">}</span>

println <span class="str">&quot;long lived tree of depth ${maxDepth}</span><span class="esc">\t</span>  <span class="str">check: ${longLivedTree.itemCheck()}&quot;</span>

<span class="slc">// EOF</span>
