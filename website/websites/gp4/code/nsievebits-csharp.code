<span class="hl com">/* The Great Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Isaac Gouy</span>
<span class="hl com">*/</span>

<span class="hl kwa">using</span> System<span class="hl sym">;</span>
<span class="hl kwa">using</span> System<span class="hl sym">.</span>Collections<span class="hl sym">;</span>

<span class="hl kwa">class</span> NSieveBits
<span class="hl sym">{</span>
   <span class="hl kwa">static</span> <span class="hl kwb">int</span> <span class="hl kwd">nsieve</span><span class="hl sym">(</span><span class="hl kwb">int</span> m<span class="hl sym">,</span> BitArray isPrime<span class="hl sym">) {</span>
      isPrime<span class="hl sym">.</span><span class="hl kwd">SetAll</span><span class="hl sym">(</span><span class="hl kwa">true</span><span class="hl sym">);</span>
      <span class="hl kwb">int</span> count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">2</span><span class="hl sym">;</span> i <span class="hl sym">&lt;=</span> m<span class="hl sym">;</span> i<span class="hl sym">++){</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>isPrime<span class="hl sym">.</span><span class="hl kwd">Get</span><span class="hl sym">(</span>i<span class="hl sym">)){</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> k<span class="hl sym">=</span>i<span class="hl sym">+</span>i<span class="hl sym">;</span> k <span class="hl sym">&lt;=</span> m<span class="hl sym">;</span> k<span class="hl sym">+=</span>i<span class="hl sym">)</span> isPrime<span class="hl sym">.</span><span class="hl kwd">Set</span><span class="hl sym">(</span>k<span class="hl sym">,</span><span class="hl kwa">false</span><span class="hl sym">);</span>
            count<span class="hl sym">++;</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">return</span> count<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">Main</span><span class="hl sym">(</span>String<span class="hl sym">[]</span> args<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwb">int</span> n <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">;</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>args<span class="hl sym">.</span>Length <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> n <span class="hl sym">=</span> Int32<span class="hl sym">.</span><span class="hl kwd">Parse</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>n <span class="hl sym">&lt;</span> <span class="hl num">2</span><span class="hl sym">)</span> n <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">;</span>

      <span class="hl kwb">int</span> m <span class="hl sym">= (</span><span class="hl num">1</span><span class="hl sym">&lt;&lt;</span>n<span class="hl sym">)*</span><span class="hl num">10000</span><span class="hl sym">;</span>
      BitArray flags <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BitArray</span><span class="hl sym">(</span>m<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">);</span>
      Console<span class="hl sym">.</span><span class="hl kwd">WriteLine</span><span class="hl sym">(</span><span class="hl str">&quot;Primes up to {0,8:D} {1,8:D}&quot;</span><span class="hl sym">,</span> m<span class="hl sym">,</span> <span class="hl kwd">nsieve</span><span class="hl sym">(</span>m<span class="hl sym">,</span>flags<span class="hl sym">));</span>

      m <span class="hl sym">= (</span><span class="hl num">1</span><span class="hl sym">&lt;&lt;</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)*</span><span class="hl num">10000</span><span class="hl sym">;</span>
      Console<span class="hl sym">.</span><span class="hl kwd">WriteLine</span><span class="hl sym">(</span><span class="hl str">&quot;Primes up to {0,8:D} {1,8:D}&quot;</span><span class="hl sym">,</span> m<span class="hl sym">,</span> <span class="hl kwd">nsieve</span><span class="hl sym">(</span>m<span class="hl sym">,</span>flags<span class="hl sym">));</span>

      m <span class="hl sym">= (</span><span class="hl num">1</span><span class="hl sym">&lt;&lt;</span>n<span class="hl sym">-</span><span class="hl num">2</span><span class="hl sym">)*</span><span class="hl num">10000</span><span class="hl sym">;</span>
      Console<span class="hl sym">.</span><span class="hl kwd">WriteLine</span><span class="hl sym">(</span><span class="hl str">&quot;Primes up to {0,8:D} {1,8:D}&quot;</span><span class="hl sym">,</span> m<span class="hl sym">,</span> <span class="hl kwd">nsieve</span><span class="hl sym">(</span>m<span class="hl sym">,</span>flags<span class="hl sym">));</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>
