<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Isaac Gouy
*/</span>

<span class="kwa">using</span> System<span class="sym">;
</span><span class="kwa">using</span> System<span class="sym">.</span>Collections<span class="sym">;

</span><span class="kwc">class</span> NSieveBits
<span class="sym">{
</span>   <span class="kwb">static int</span> nsieve<span class="sym">(</span><span class="kwb">int</span> m<span class="sym">,</span> BitArray isPrime<span class="sym">) {
</span>      isPrime<span class="sym">.</span>SetAll<span class="sym">(</span><span class="kwa">true</span><span class="sym">);
</span>      <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;

</span>      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">2</span><span class="sym">;</span> i <span class="sym">&lt;=</span> m<span class="sym">;</span> i<span class="sym">++){
</span>         <span class="kwa">if</span> <span class="sym">(</span>isPrime<span class="sym">.</span>Get<span class="sym">(</span>i<span class="sym">)){
</span>            <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> k<span class="sym">=</span>i<span class="sym">+</span>i<span class="sym">;</span> k <span class="sym">&lt;=</span> m<span class="sym">;</span> k<span class="sym">+=</span>i<span class="sym">)</span> isPrime<span class="sym">.</span>Set<span class="sym">(</span>k<span class="sym">,</span><span class="kwa">false</span><span class="sym">);
</span>            count<span class="sym">++;
         }
      }
</span>      <span class="kwa">return</span> count<span class="sym">;
   }

</span>   <span class="kwc">public</span> <span class="kwb">static void</span> Main<span class="sym">(</span>String<span class="sym">[]</span> args<span class="sym">)
   {
</span>      <span class="kwb">int</span> n <span class="sym">=</span> <span class="num">2</span><span class="sym">;
</span>      <span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>Length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> n <span class="sym">=</span> Int32<span class="sym">.</span>Parse<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);
</span>      <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">2</span><span class="sym">)</span> n <span class="sym">=</span> <span class="num">2</span><span class="sym">;

</span>      <span class="kwb">int</span> m <span class="sym">= (</span><span class="num">1</span><span class="sym">&lt;&lt;</span>n<span class="sym">)*</span><span class="num">10000</span><span class="sym">;
</span>      BitArray flags <span class="sym">=</span> <span class="kwa">new</span> BitArray<span class="sym">(</span>m<span class="sym">+</span><span class="num">1</span><span class="sym">);
</span>      Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;Primes up to {0,8:D} {1,8:D}&quot;</span><span class="sym">,</span> m<span class="sym">,</span> nsieve<span class="sym">(</span>m<span class="sym">,</span>flags<span class="sym">));

</span>      m <span class="sym">= (</span><span class="num">1</span><span class="sym">&lt;&lt;</span>n<span class="num">-1</span><span class="sym">)*</span><span class="num">10000</span><span class="sym">;
</span>      Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;Primes up to {0,8:D} {1,8:D}&quot;</span><span class="sym">,</span> m<span class="sym">,</span> nsieve<span class="sym">(</span>m<span class="sym">,</span>flags<span class="sym">));

</span>      m <span class="sym">= (</span><span class="num">1</span><span class="sym">&lt;&lt;</span>n<span class="num">-2</span><span class="sym">)*</span><span class="num">10000</span><span class="sym">;
</span>      Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;Primes up to {0,8:D} {1,8:D}&quot;</span><span class="sym">,</span> m<span class="sym">,</span> nsieve<span class="sym">(</span>m<span class="sym">,</span>flags<span class="sym">));
   }
}</span>
