<span class="hl com">/**</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * Based on the CAL Open Quark version</span>
<span class="hl com"> * Contributed by Magnus Byne.</span>
<span class="hl com"> */</span>
module Recursive<span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Prelude using
    typeConstructor <span class="hl sym">=</span> <span class="hl kwc">Double</span><span class="hl sym">,</span> Int<span class="hl sym">,</span> <span class="hl kwc">String</span><span class="hl sym">;</span>
    function <span class="hl sym">=</span> fromInt<span class="hl sym">,</span> seq<span class="hl sym">,</span> eager<span class="hl sym">,</span> add<span class="hl sym">,</span> stringToInt<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Debug using
    function <span class="hl sym">=</span> show<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span><span class="hl kwc">Collections</span><span class="hl sym">.</span><span class="hl kwc">List</span> using
    function <span class="hl sym">=</span> head<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span><span class="hl kwc">Utilities</span><span class="hl sym">.</span><span class="hl kwc">MessageFormat</span> using
    function <span class="hl sym">=</span> formatWithPattern<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span><span class="hl kwc">Utilities</span><span class="hl sym">.</span><span class="hl kwc">Locale</span> using
    function <span class="hl sym">=</span> invariantLocale<span class="hl sym">;</span>
    <span class="hl sym">;</span>


data foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;java.io.PrintStream&quot;</span> <span class="hl kwa">private</span> JPrintStream<span class="hl sym">;</span>

foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;static field java.lang.System.out&quot;</span>
    <span class="hl kwa">private</span> stdout <span class="hl sym">::</span> JPrintStream<span class="hl sym">;</span>

foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;method println&quot;</span>
    <span class="hl kwa">private</span> printLn <span class="hl sym">::</span> JPrintStream <span class="hl sym">-&gt;</span> <span class="hl kwc">String</span> <span class="hl sym">-&gt; ();</span>

main <span class="hl sym">:: [</span><span class="hl kwc">String</span><span class="hl sym">] -&gt; ();</span>
<span class="hl kwa">public</span> main <span class="hl sym">!</span>args <span class="hl sym">=</span>
    let
        n <span class="hl sym">=</span> eager $ <span class="hl kwd">stringToInt</span> <span class="hl sym">(</span>head args<span class="hl sym">);</span>
        m <span class="hl sym">=</span> n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>
        f <span class="hl sym">=</span> n <span class="hl sym">+</span> <span class="hl num">27</span><span class="hl sym">;</span>
    in
        printLn <span class="hl kwd">stdout</span> <span class="hl sym">(</span><span class="hl str">&quot;Ack(3,&quot;</span> <span class="hl sym">++</span> show n <span class="hl sym">++</span> <span class="hl str">&quot;): &quot;</span> <span class="hl sym">++</span> <span class="hl kwd">show</span> <span class="hl sym">(</span>ack <span class="hl num">3</span> n<span class="hl sym">))</span>
        `seq`
        printLn
            stdout
            <span class="hl sym">(</span>formatWithPattern
                <span class="hl str">&quot;Fib({0,number,#.0}): {1,number,#.0}&quot;</span>
                invariantLocale
                <span class="hl sym">(</span>f<span class="hl sym">,</span> <span class="hl kwd">fibDouble</span> <span class="hl sym">(</span>fromInt f<span class="hl sym">))</span>
            <span class="hl sym">)</span>
        `seq`
        printLn
            stdout
            <span class="hl sym">(</span>formatWithPattern
                <span class="hl str">&quot;Tak({0},{1},{2}): {3}&quot;</span>
                invariantLocale
                <span class="hl sym">(</span>m <span class="hl sym">*</span> <span class="hl num">3</span><span class="hl sym">,</span> m <span class="hl sym">*</span> <span class="hl num">2</span><span class="hl sym">,</span> m<span class="hl sym">,</span> <span class="hl kwd">tak</span> <span class="hl sym">(</span>m <span class="hl sym">*</span> <span class="hl num">3</span><span class="hl sym">) (</span>m <span class="hl sym">*</span> <span class="hl num">2</span><span class="hl sym">)</span> m<span class="hl sym">)</span>
            <span class="hl sym">)</span>
        `seq`
        printLn <span class="hl kwd">stdout</span> <span class="hl sym">(</span><span class="hl str">&quot;Fib(3): &quot;</span> <span class="hl sym">++</span> <span class="hl kwd">show</span> <span class="hl sym">(</span>fib <span class="hl num">3</span><span class="hl sym">))</span>
        `seq`
        printLn
            stdout
            <span class="hl sym">(</span><span class="hl str">&quot;Tak(3.0,2.0,1.0): &quot;</span> <span class="hl sym">++</span> <span class="hl kwd">show</span> <span class="hl sym">(</span>takDouble <span class="hl num">3.0 2.0 1.0</span><span class="hl sym">))</span>
    <span class="hl sym">;</span>

fib <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>
fib <span class="hl sym">!</span>n <span class="hl sym">=</span>
    <span class="hl kwa">if</span> n <span class="hl sym">&lt;</span> <span class="hl num">2</span> then
        <span class="hl num">1</span>
    <span class="hl kwa">else</span>
        <span class="hl kwd">fib</span> <span class="hl sym">(</span>n <span class="hl sym">-</span> <span class="hl num">2</span><span class="hl sym">) +</span> <span class="hl kwd">fib</span> <span class="hl sym">(</span>n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span>
    <span class="hl sym">;</span>

fibDouble <span class="hl sym">::</span> <span class="hl kwc">Double</span> <span class="hl sym">-&gt;</span> <span class="hl kwc">Double</span><span class="hl sym">;</span>
fibDouble <span class="hl sym">!</span>n <span class="hl sym">=</span>
    <span class="hl kwa">if</span> n <span class="hl sym">&lt;</span> <span class="hl num">2</span> then
        <span class="hl num">1</span>
    <span class="hl kwa">else</span>
        <span class="hl kwd">fibDouble</span> <span class="hl sym">(</span>n <span class="hl sym">-</span> <span class="hl num">2</span><span class="hl sym">) +</span> <span class="hl kwd">fibDouble</span> <span class="hl sym">(</span>n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span>
    <span class="hl sym">;</span>

ack <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>
ack <span class="hl sym">!</span>x <span class="hl sym">!</span>y <span class="hl sym">=</span>
    <span class="hl kwa">if</span> x <span class="hl sym">==</span> <span class="hl num">0</span> then
        y <span class="hl sym">+</span> <span class="hl num">1</span>
    <span class="hl kwa">else if</span> y <span class="hl sym">==</span> <span class="hl num">0</span> then
        <span class="hl kwd">ack</span> <span class="hl sym">(</span>x <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl num">1</span>
    <span class="hl kwa">else</span>
        <span class="hl kwd">ack</span> <span class="hl sym">(</span>x <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">) (</span>eager $ ack <span class="hl kwd">x</span> <span class="hl sym">(</span>y <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">))</span>
    <span class="hl sym">;</span>

tak <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>
tak <span class="hl sym">!</span>x <span class="hl sym">!</span>y <span class="hl sym">!</span>z <span class="hl sym">=</span>
    <span class="hl kwa">if</span> y <span class="hl sym">&gt;=</span> x then
        z
    <span class="hl kwa">else</span>
        tak
            <span class="hl sym">(</span>eager $ <span class="hl kwd">tak</span> <span class="hl sym">(</span>x <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span> y z<span class="hl sym">)</span>
            <span class="hl sym">(</span>eager $ <span class="hl kwd">tak</span> <span class="hl sym">(</span>y <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span> z x<span class="hl sym">)</span>
            <span class="hl sym">(</span>eager $ <span class="hl kwd">tak</span> <span class="hl sym">(</span>z <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span> x y<span class="hl sym">)</span>
    <span class="hl sym">;</span>

takDouble <span class="hl sym">::</span> <span class="hl kwc">Double</span> <span class="hl sym">-&gt;</span> <span class="hl kwc">Double</span> <span class="hl sym">-&gt;</span> <span class="hl kwc">Double</span> <span class="hl sym">-&gt;</span> <span class="hl kwc">Double</span><span class="hl sym">;</span>
takDouble <span class="hl sym">!</span>x <span class="hl sym">!</span>y <span class="hl sym">!</span>z <span class="hl sym">=</span>
    <span class="hl kwa">if</span> y <span class="hl sym">&gt;=</span> x then
        z
    <span class="hl kwa">else</span>
        takDouble
            <span class="hl sym">(</span>eager $ <span class="hl kwd">takDouble</span> <span class="hl sym">(</span>x <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span> y z<span class="hl sym">)</span>
            <span class="hl sym">(</span>eager $ <span class="hl kwd">takDouble</span> <span class="hl sym">(</span>y <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span> z x<span class="hl sym">)</span>
            <span class="hl sym">(</span>eager $ <span class="hl kwd">takDouble</span> <span class="hl sym">(</span>z <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span> x y<span class="hl sym">)</span>
    <span class="hl sym">;</span>

