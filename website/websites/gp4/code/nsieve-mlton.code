<span class="com">(* Written by sweeks&#64;sweeks.com.</span>
<span class="com"> * Based on nsieve.ocaml.</span>
<span class="com"> *)</span>

<span class="kwa">fun</span> lsl <span class="sym">(</span>i<span class="sym">,</span> j<span class="sym">) =</span> <span class="kwa">Word</span>.toInt <span class="sym">(</span><span class="kwa">Word</span>.<span class="sym">&lt;&lt; (</span><span class="kwa">Word</span>.fromInt i<span class="sym">,</span> <span class="kwa">Word</span>.fromInt j<span class="sym">))</span>

<span class="kwa">fun</span> i2s <span class="sym">(</span>i<span class="sym">:</span> <span class="kwb">int</span><span class="sym">):</span> <span class="kwb">string</span> <span class="sym">=</span>
   <span class="kwa">let</span>
      <span class="kwa">val</span> s <span class="sym">=</span> <span class="kwa">Int</span>.toString i
   <span class="kwa">in</span>
      concat <span class="sym">[</span>CharVector.tabulate <span class="sym">(</span><span class="num">8</span> <span class="sym">-</span> size s<span class="sym">,</span> <span class="kwa">fn</span> _ <span class="sym">=&gt;</span> #<span class="str">&quot; &quot;</span><span class="sym">),</span> s<span class="sym">]</span>
   <span class="kwa">end</span>

<span class="kwa">fun</span> nsieve m <span class="sym">=</span>
   <span class="kwa">let</span>
      <span class="kwa">val</span> s <span class="sym">=</span> Array.array <span class="sym">(</span>m <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> <span class="kwa">true</span><span class="sym">)</span>
      <span class="kwa">fun</span> step <span class="sym">(</span>i<span class="sym">,</span> cnt<span class="sym">) =</span>
	 <span class="kwa">let</span>
	    <span class="kwa">fun</span> whack j <span class="sym">=</span>
	       <span class="kwa">if</span> j <span class="sym">&lt;=</span> m <span class="kwa">then</span> <span class="sym">(</span>Array.update <span class="sym">(</span>s<span class="sym">,</span> j<span class="sym">,</span> <span class="kwa">false</span><span class="sym">);</span> whack <span class="sym">(</span>j <span class="sym">+</span> i<span class="sym">))</span>
	       <span class="kwa">else</span> <span class="sym">()</span>
	 <span class="kwa">in</span>
	    <span class="kwa">if</span> i <span class="sym">&lt;=</span> m
	       <span class="kwa">then</span> step <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span>
			  <span class="kwa">if</span> Array.sub <span class="sym">(</span>s<span class="sym">,</span> i<span class="sym">)</span>
			     <span class="kwa">then</span> <span class="sym">(</span>whack <span class="sym">(</span>lsl <span class="sym">(</span>i<span class="sym">,</span> <span class="num">1</span><span class="sym">));</span> cnt <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span>
			  <span class="kwa">else</span> cnt<span class="sym">)</span>
	    <span class="kwa">else</span> cnt
	 <span class="kwa">end</span>
   <span class="kwa">in</span>
      print <span class="sym">(</span>concat <span class="sym">[</span><span class="str">&quot;Primes up to &quot;</span><span class="sym">,</span> i2s m<span class="sym">,</span> <span class="str">&quot; &quot;</span><span class="sym">,</span> i2s <span class="sym">(</span>step <span class="sym">(</span><span class="num">2</span><span class="sym">,</span> <span class="num">0</span><span class="sym">)),</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">])</span>
   <span class="kwa">end</span>

<span class="kwa">val</span> n <span class="sym">=</span> valOf <span class="sym">(</span><span class="kwa">Int</span>.fromString <span class="sym">(</span>hd <span class="sym">(</span>CommandLine.arguments <span class="sym">())))</span>

<span class="kwa">val</span> <span class="sym">() =</span> nsieve <span class="sym">(</span>lsl <span class="sym">(</span><span class="num">1</span><span class="sym">,</span> n<span class="sym">) *</span> <span class="num">10000</span><span class="sym">)</span>
<span class="kwa">val</span> <span class="sym">() =</span> nsieve <span class="sym">(</span>lsl <span class="sym">(</span><span class="num">1</span><span class="sym">,</span> n <span class="sym">-</span> <span class="num">1</span><span class="sym">) *</span> <span class="num">10000</span><span class="sym">)</span>
<span class="kwa">val</span> <span class="sym">() =</span> nsieve <span class="sym">(</span>lsl <span class="sym">(</span><span class="num">1</span><span class="sym">,</span> n <span class="sym">-</span> <span class="num">2</span><span class="sym">) *</span> <span class="num">10000</span><span class="sym">)</span>

