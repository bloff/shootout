\ fasta<span class="sym">.</span>gforth
\ Submitted by Ian Osgood

\ read NUM from last command line argument
<span class="num">0</span><span class="sym">.</span> argc &#64; <span class="num">1</span><span class="sym">-</span> arg <span class="sym">&gt;</span>number <span class="num">2d</span>rop drop constant NUM

\ random
<span class="num">42</span> value seed
<span class="sym">:</span> random <span class="sym">( --</span> u <span class="sym">)</span> seed <span class="num">3877</span> <span class="sym">*</span> <span class="num">29573</span> <span class="sym">+</span> <span class="num">139968</span> mod dup to seed <span class="sym">;
:</span> gen<span class="sym">-</span>random <span class="sym">(</span> r <span class="sym">--</span> r<span class="str">' ) random s&gt;d d&gt;f f* 139968e f/ ;

60 constant line-len

</span><span class="esc">\ </span><span class="str">data arrays
create ALU
  s&quot; GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot; mem,
  s&quot; GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot; mem,
  s&quot; CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot; mem,
  s&quot; ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot; mem,
  s&quot; GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot; mem,
  s&quot; AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot; mem,
  s&quot; AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot; mem,
here constant ALU-end

: f+, ( a f -- a'</span> <span class="sym">)</span> f<span class="sym">+</span> fdup f<span class="sym">, ;
:</span> <span class="num">0.02</span><span class="sym">-</span>remainder<span class="sym">, (</span> a <span class="sym">--</span> a<span class="sym">&gt;=</span><span class="num">1</span><span class="sym">)
</span>  begin fdup <span class="num">1e</span> f<span class="sym">&lt;</span> <span class="kwa">while</span> <span class="num">0.02e</span> f<span class="sym">+,</span> repeat <span class="sym">;

</span>\ <span class="str">&quot; acgtBDHKMNRSVWY&quot;</span>
falign create IUB   <span class="num">0e
  0.27e</span> f<span class="sym">+,</span>  <span class="num">0.12e</span> f<span class="sym">+,</span>  <span class="num">0.12e</span> f<span class="sym">+,</span>  <span class="num">0.27e</span> f<span class="sym">+,
</span>  <span class="num">0.02</span><span class="sym">-</span>remainder<span class="sym">,</span> fdrop

\ <span class="str">&quot; acgt&quot;</span>
falign create HomoSap  <span class="num">0e
  0.3029549426680e</span> f<span class="sym">+,</span>  <span class="num">0.1979883004921e</span> f<span class="sym">+,
</span>  <span class="num">0.1975473066391e</span> f<span class="sym">+,</span>  <span class="num">0.3015094502008e</span> f<span class="sym">+,</span>  fdrop

<span class="sym">:</span> next<span class="sym">-</span><span class="kwb">char</span> <span class="sym">(</span> a <span class="sym">--</span> a<span class="str">' c )
  dup ALU-end = if drop ALU then  dup char+ swap c&#64; ;
: ?cr ( col -- col'</span> <span class="sym">)</span> <span class="num">1</span><span class="sym">-</span> dup <span class="num">0</span><span class="sym">=</span> <span class="kwa">if</span> cr line<span class="sym">-</span>len <span class="sym">+</span> then <span class="sym">;
:</span> ?end<span class="sym">-</span>cr <span class="sym">(</span> col <span class="sym">-- )</span> line<span class="sym">-</span>len <span class="sym">&lt;</span> <span class="kwa">if</span> cr then <span class="sym">;

:</span> fasta<span class="sym">-</span>repeat <span class="sym">(</span> n <span class="sym">-- )</span> ALU line<span class="sym">-</span>len
  begin rot dup <span class="kwa">while</span> <span class="num">1</span><span class="sym">-
</span>    rot next<span class="sym">-</span><span class="kwb">char</span> emit rot ?cr
  repeat drop ?end<span class="sym">-</span>cr drop <span class="sym">;

:</span> sel<span class="sym">-</span>random <span class="sym">(</span> probs <span class="sym">--</span> probs c <span class="sym">)
</span>  <span class="num">1e</span> gen<span class="sym">-</span>random s<span class="str">&quot; acgtBDHKMNRSVWY&quot;</span> drop over
  begin dup f&#64; fover f<span class="sym">&lt;</span> <span class="kwa">while</span> <span class="kwb">float</span><span class="sym">+</span> swap <span class="kwb">char</span><span class="sym">+</span> swap repeat
  fdrop drop c&#64; <span class="sym">;

:</span> fasta<span class="sym">-</span>random <span class="sym">(</span> n which <span class="sym">-- )</span> line<span class="sym">-</span>len
  begin rot dup <span class="kwa">while</span> <span class="num">1</span><span class="sym">-
</span>    rot sel<span class="sym">-</span>random emit rot ?cr
  repeat drop ?end<span class="sym">-</span>cr drop <span class="sym">;

:</span> main
  <span class="sym">.</span><span class="str">&quot; &gt;ONE Homo sapiens alu&quot;</span> cr
  NUM <span class="num">2</span><span class="sym">*</span> fasta<span class="sym">-</span>repeat
  <span class="sym">.</span><span class="str">&quot; &gt;TWO IUB ambiguity codes&quot;</span> cr
  NUM <span class="num">3</span> <span class="sym">*</span> IUB fasta<span class="sym">-</span>random
  <span class="sym">.</span><span class="str">&quot; &gt;THREE Homo sapiens frequency&quot;</span> cr
  NUM <span class="num">5</span> <span class="sym">*</span> HomoSap fasta<span class="sym">-</span>random <span class="sym">;

</span>main bye  \ done<span class="sym">!

</span>
