<span class="slc">\ fasta.gforth</span>
<span class="slc">\ Submitted by Ian Osgood</span>

<span class="slc">\ read NUM from last command line argument</span>
<span class="num">0</span><span class="sym">.</span> argc <span class="sym">&#64;</span> <span class="num">1</span><span class="sym">-</span> arg <span class="sym">&gt;</span>number <span class="num">2</span>drop drop constant NUM

<span class="slc">\ random</span>
<span class="num">42</span> value seed
<span class="sym">:</span> random <span class="com">( -- u )</span> seed <span class="num">3877</span> <span class="sym">*</span> <span class="num">29573</span> <span class="sym">+</span> <span class="num">139968</span> mod dup to seed <span class="sym">;</span>
<span class="sym">:</span> gen<span class="sym">-</span>random <span class="com">( r -- r' )</span> random s<span class="sym">&gt;</span>d d<span class="sym">&gt;</span>f f<span class="sym">*</span> <span class="num">139968</span>e f<span class="sym">/ ;</span>

<span class="num">60</span> constant line<span class="sym">-</span>len

<span class="slc">\ data arrays</span>
create ALU
  s<span class="str">&quot; GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span> mem<span class="sym">,</span>
  s<span class="str">&quot; GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span> mem<span class="sym">,</span>
  s<span class="str">&quot; CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span> mem<span class="sym">,</span>
  s<span class="str">&quot; ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span> mem<span class="sym">,</span>
  s<span class="str">&quot; GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span> mem<span class="sym">,</span>
  s<span class="str">&quot; AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span> mem<span class="sym">,</span>
  s<span class="str">&quot; AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span> mem<span class="sym">,</span>
here constant ALU<span class="sym">-</span>end

<span class="sym">:</span> f<span class="sym">+,</span> <span class="com">( a f -- a' )</span> f<span class="sym">+</span> fdup f<span class="sym">, ;</span>
<span class="sym">:</span> <span class="num">0.02</span><span class="sym">-</span>remainder<span class="sym">,</span> <span class="com">( a -- a&gt;=1)</span>
  begin fdup <span class="num">1</span>e f<span class="sym">&lt;</span> while <span class="num">0.02</span>e f<span class="sym">+,</span> repeat <span class="sym">;</span>

<span class="slc">\ &quot; acgtBDHKMNRSVWY&quot;</span>
falign create IUB   <span class="num">0</span>e
  <span class="num">0.27</span>e f<span class="sym">+,</span>  <span class="num">0.12</span>e f<span class="sym">+,</span>  <span class="num">0.12</span>e f<span class="sym">+,</span>  <span class="num">0.27</span>e f<span class="sym">+,</span>
  <span class="num">0.02</span><span class="sym">-</span>remainder<span class="sym">,</span> fdrop

<span class="slc">\ &quot; acgt&quot;</span>
falign create HomoSap  <span class="num">0</span>e
  <span class="num">0.3029549426680</span>e f<span class="sym">+,</span>  <span class="num">0.1979883004921</span>e f<span class="sym">+,</span>
  <span class="num">0.1975473066391</span>e f<span class="sym">+,</span>  <span class="num">0.3015094502008</span>e f<span class="sym">+,</span>  fdrop

<span class="sym">:</span> next<span class="sym">-</span>char <span class="com">( a -- a' c )</span>
  dup ALU<span class="sym">-</span>end <span class="sym">=</span> if drop ALU then  dup char<span class="sym">+</span> swap c<span class="sym">&#64; ;</span>
<span class="sym">: ?</span>cr <span class="com">( col -- col' )</span> <span class="num">1</span><span class="sym">-</span> dup <span class="num">0</span><span class="sym">=</span> if cr line<span class="sym">-</span>len <span class="sym">+</span> then <span class="sym">;</span>
<span class="sym">: ?</span>end<span class="sym">-</span>cr <span class="com">( col -- )</span> line<span class="sym">-</span>len <span class="sym">&lt;</span> if cr then <span class="sym">;</span>

<span class="sym">:</span> fasta<span class="sym">-</span>repeat <span class="com">( n -- )</span> ALU line<span class="sym">-</span>len
  begin rot dup while <span class="num">1</span><span class="sym">-</span>
    rot next<span class="sym">-</span>char emit rot <span class="sym">?</span>cr
  repeat drop <span class="sym">?</span>end<span class="sym">-</span>cr drop <span class="sym">;</span>

<span class="sym">:</span> sel<span class="sym">-</span>random <span class="com">( probs -- probs c )</span>
  <span class="num">1</span>e gen<span class="sym">-</span>random s<span class="str">&quot; acgtBDHKMNRSVWY&quot;</span> drop over
  begin dup f<span class="sym">&#64;</span> fover f<span class="sym">&lt;</span> while float<span class="sym">+</span> swap char<span class="sym">+</span> swap repeat
  fdrop drop c<span class="sym">&#64; ;</span>

<span class="sym">:</span> fasta<span class="sym">-</span>random <span class="com">( n which -- )</span> line<span class="sym">-</span>len
  begin rot dup while <span class="num">1</span><span class="sym">-</span>
    rot sel<span class="sym">-</span>random emit rot <span class="sym">?</span>cr
  repeat drop <span class="sym">?</span>end<span class="sym">-</span>cr drop <span class="sym">;</span>

<span class="sym">:</span> main
  <span class="sym">.</span><span class="str">&quot; &gt;ONE Homo sapiens alu&quot;</span> cr
  NUM <span class="num">2</span><span class="sym">*</span> fasta<span class="sym">-</span>repeat
  <span class="sym">.</span><span class="str">&quot; &gt;TWO IUB ambiguity codes&quot;</span> cr
  NUM <span class="num">3</span> <span class="sym">*</span> IUB fasta<span class="sym">-</span>random
  <span class="sym">.</span><span class="str">&quot; &gt;THREE Homo sapiens frequency&quot;</span> cr
  NUM <span class="num">5</span> <span class="sym">*</span> HomoSap fasta<span class="sym">-</span>random <span class="sym">;</span>

main bye  <span class="slc">\ done!</span>


