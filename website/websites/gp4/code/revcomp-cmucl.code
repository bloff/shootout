<span class="hl slc">;;; The Computer Language Shootout</span>
<span class="hl slc">;;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;; Michael Weber 2006-07-18</span>
<span class="hl slc">;;; Changes by Stefan Lang 2007-02-08</span>

<span class="hl sym">(</span>defconstant <span class="hl sym">+</span>buffer-size<span class="hl sym">+ (</span><span class="hl kwa">expt</span> <span class="hl num">2 15</span><span class="hl sym">))</span>
<span class="hl sym">(</span>defconstant <span class="hl sym">+</span>newline<span class="hl sym">+ (</span>char-code #\Newline<span class="hl sym">))</span>
<span class="hl sym">(</span>defconstant <span class="hl sym">+</span>ub<span class="hl sym">+ '(</span>unsigned-byte <span class="hl num">8</span><span class="hl sym">))</span>

<span class="hl sym">(</span>defconstant <span class="hl sym">+</span>lut<span class="hl sym">+</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>lut <span class="hl sym">(</span>make-array <span class="hl num">256</span> <span class="hl sym">:</span>element-<span class="hl kwa">type</span> <span class="hl sym">+</span>ub<span class="hl sym">+)))</span>
    <span class="hl sym">(</span>loop for a across <span class="hl str">&quot;wsatugcyrkmbdhvnWSATUGCYRKMBDHVN&quot;</span>
          for b across <span class="hl str">&quot;WSTAACGRYMKVHDBNWSTAACGRYMKVHDBN&quot;</span>
          do <span class="hl sym">(</span>setf <span class="hl sym">(</span>aref lut <span class="hl sym">(</span>char-code a<span class="hl sym">)) (</span>char-code b<span class="hl sym">)))</span>
    lut<span class="hl sym">))</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> slice <span class="hl sym">(</span>array start end<span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>optimize <span class="hl sym">(</span>speed <span class="hl num">3</span><span class="hl sym">) (</span>safety <span class="hl num">0</span><span class="hl sym">))</span>
           <span class="hl sym">((</span>simple-array #.<span class="hl sym">+</span>ub<span class="hl sym">+)</span> array<span class="hl sym">)</span>
           <span class="hl sym">(</span>fixnum start end<span class="hl sym">))</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>res <span class="hl sym">(</span>make-array <span class="hl sym">(</span>- end start<span class="hl sym">) :</span>element-<span class="hl kwa">type</span> <span class="hl sym">+</span>ub<span class="hl sym">+)))</span>
    <span class="hl sym">(</span>loop for i from start below end
          for j from <span class="hl num">0</span>
          do <span class="hl sym">(</span>setf <span class="hl sym">(</span>aref res j<span class="hl sym">) (</span>aref array i<span class="hl sym">)))</span>
    res<span class="hl sym">))</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> main <span class="hl sym">()</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>optimize <span class="hl sym">(</span>speed <span class="hl num">3</span><span class="hl sym">) (</span>safety <span class="hl num">0</span><span class="hl sym">)))</span>
  <span class="hl sym">(</span>with-<span class="hl kwa">open</span>-file <span class="hl sym">(</span>in <span class="hl str">&quot;/dev/stdin&quot;</span> <span class="hl sym">:</span>element-<span class="hl kwa">type</span> <span class="hl sym">+</span>ub<span class="hl sym">+)</span>
    <span class="hl sym">(</span>with-<span class="hl kwa">open</span>-file <span class="hl sym">(</span>out <span class="hl str">&quot;/dev/stdout&quot;</span> <span class="hl sym">:</span>element-<span class="hl kwa">type</span> <span class="hl sym">+</span>ub<span class="hl sym">+ :</span>direction <span class="hl sym">:</span>output <span class="hl sym">:</span><span class="hl kwa">if</span>-exists <span class="hl sym">:</span><span class="hl kwa">append</span><span class="hl sym">)</span>
      <span class="hl sym">(</span>let <span class="hl sym">((</span>i-buf <span class="hl sym">(</span>make-array <span class="hl sym">+</span>buffer-size<span class="hl sym">+ :</span>element-<span class="hl kwa">type</span> <span class="hl sym">+</span>ub<span class="hl sym">+))</span>
            <span class="hl sym">(</span>o-buf <span class="hl sym">(</span>make-array <span class="hl sym">+</span>buffer-size<span class="hl sym">+ :</span>element-<span class="hl kwa">type</span> <span class="hl sym">+</span>ub<span class="hl sym">+))</span>
            <span class="hl sym">(</span>chunks nil<span class="hl sym">))</span>
        <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">list</span> chunks<span class="hl sym">))</span>
        <span class="hl sym">(</span>flet <span class="hl sym">((</span>flush-chunks <span class="hl sym">()</span>
                 <span class="hl sym">(</span>let <span class="hl sym">((</span>j <span class="hl num">0</span><span class="hl sym">) (</span>k <span class="hl num">0</span><span class="hl sym">))</span>
                   <span class="hl sym">(</span>declare <span class="hl sym">(</span>fixnum j k<span class="hl sym">))</span>
                   <span class="hl slc">;; reverse, complement, filter out old newlines, put newlines back in after 60 chars,</span>
                   <span class="hl slc">;; buffer output, and write buffers.  all in one go :(</span>
                   <span class="hl sym">(</span>loop for chunk in chunks
                         do <span class="hl sym">(</span>loop for i from <span class="hl sym">(</span><span class="hl num">1</span>- <span class="hl sym">(</span><span class="hl kwa">length</span> <span class="hl sym">(</span>the <span class="hl sym">(</span>simple-array #.<span class="hl sym">+</span>ub<span class="hl sym">+)</span> chunk<span class="hl sym">)))</span> downto <span class="hl num">0</span>
                                  for byte <span class="hl sym">= (</span>aref chunk i<span class="hl sym">)</span>
                                  unless <span class="hl sym">(=</span> byte <span class="hl sym">+</span>newline<span class="hl sym">+)</span>
				  do <span class="hl sym">(</span>setf <span class="hl sym">(</span>aref o-buf k<span class="hl sym">) (</span>aref <span class="hl sym">+</span>lut<span class="hl sym">+</span> byte<span class="hl sym">)</span> j <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">+</span> j<span class="hl sym">)</span> k <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">+</span> k<span class="hl sym">))</span>
                                  <span class="hl kwa">if</span> <span class="hl sym">(=</span> j <span class="hl num">60</span><span class="hl sym">)</span> do <span class="hl sym">(</span>setf <span class="hl sym">(</span>aref o-buf k<span class="hl sym">) +</span>newline<span class="hl sym">+</span> j <span class="hl num">0</span> k <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">+</span> k<span class="hl sym">))</span>
                                  <span class="hl kwa">if</span> <span class="hl sym">(&gt;</span> k <span class="hl sym">(</span>- <span class="hl sym">+</span>buffer-size<span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">))</span> do <span class="hl sym">(</span>write-sequence o-buf out <span class="hl sym">:</span>end <span class="hl sym">(</span>shiftf k <span class="hl num">0</span><span class="hl sym">)))</span>
                         finally <span class="hl sym">(</span>when <span class="hl sym">(</span>plusp k<span class="hl sym">)</span>
                                   <span class="hl sym">(</span>write-sequence o-buf out <span class="hl sym">:</span>end k<span class="hl sym">))</span>
                                 <span class="hl sym">(</span>when <span class="hl sym">(</span>plusp j<span class="hl sym">)</span>
                                   <span class="hl sym">(</span>write-byte <span class="hl sym">+</span>newline<span class="hl sym">+</span> out<span class="hl sym">)))</span>
                   <span class="hl sym">(</span>setf chunks nil<span class="hl sym">))))</span>
          <span class="hl sym">(</span>prog <span class="hl sym">((</span>start <span class="hl num">0</span><span class="hl sym">) (</span>end <span class="hl num">0</span><span class="hl sym">))</span>
           <span class="hl kwa">read</span>-chunk
             <span class="hl sym">(</span>setf end <span class="hl sym">(</span><span class="hl kwa">read</span>-sequence i-buf in<span class="hl sym">))</span>
             <span class="hl sym">(</span>when <span class="hl sym">(</span><span class="hl kwa">zerop</span> end<span class="hl sym">) (</span>go end-of-input<span class="hl sym">))</span>
           parse-chunk
             <span class="hl sym">(</span>let <span class="hl sym">((</span>bod <span class="hl sym">(</span>position #.<span class="hl sym">(</span>char-code #\&gt;<span class="hl sym">)</span> i-buf <span class="hl sym">:</span>start start <span class="hl sym">:</span>end end<span class="hl sym">)))</span>
               <span class="hl sym">(</span><span class="hl kwa">cond</span> <span class="hl sym">((</span><span class="hl kwa">numberp</span> bod<span class="hl sym">)</span>
                      <span class="hl sym">(</span>push <span class="hl sym">(</span>slice i-buf start bod<span class="hl sym">)</span> chunks<span class="hl sym">)</span>
                      <span class="hl sym">(</span>setf start bod<span class="hl sym">)</span>
                      <span class="hl sym">(</span>flush-chunks<span class="hl sym">)</span>
                      <span class="hl slc">;; parse description</span>
                      <span class="hl sym">(</span>loop for eod <span class="hl sym">= (</span>position <span class="hl sym">+</span>newline<span class="hl sym">+</span> i-buf <span class="hl sym">:</span>start start <span class="hl sym">:</span>end end<span class="hl sym">)</span>
                            do <span class="hl sym">(</span><span class="hl kwa">cond</span> <span class="hl sym">((</span><span class="hl kwa">numberp</span> eod<span class="hl sym">)</span>
                                      <span class="hl sym">(</span>write-sequence i-buf out <span class="hl sym">:</span>start start <span class="hl sym">:</span>end <span class="hl sym">(</span>incf eod<span class="hl sym">))</span>
                                      <span class="hl sym">(</span>setf start eod<span class="hl sym">)</span>
                                      <span class="hl sym">(</span>go parse-chunk<span class="hl sym">))</span>
                                     <span class="hl sym">(</span>t <span class="hl sym">(</span>write-sequence i-buf out <span class="hl sym">:</span>start start <span class="hl sym">:</span>end end<span class="hl sym">)</span>
                                        <span class="hl sym">(</span>setf start <span class="hl num">0</span><span class="hl sym">)</span>
                                        <span class="hl sym">(</span>setf end <span class="hl sym">(</span><span class="hl kwa">read</span>-sequence i-buf in<span class="hl sym">))))))</span>
                     <span class="hl sym">(</span>t <span class="hl sym">(</span>push <span class="hl sym">(</span>slice i-buf start end<span class="hl sym">)</span> chunks<span class="hl sym">)</span>
                        <span class="hl sym">(</span>setf start <span class="hl num">0</span><span class="hl sym">)</span>
                        <span class="hl sym">(</span>go <span class="hl kwa">read</span>-chunk<span class="hl sym">))))</span>
           end-of-input
             <span class="hl sym">(</span>flush-chunks<span class="hl sym">)))))))</span>
