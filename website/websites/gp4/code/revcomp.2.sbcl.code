<span class="slc">;;; The Computer Language Shootout</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;; Michael Weber 2006-07-18</span>

<span class="sym">(</span>defconstant <span class="sym">+</span><span class="kwa">line</span><span class="sym">-</span><span class="kwa">length</span><span class="sym">+</span> <span class="num">60</span><span class="sym">)</span>

<span class="sym">(</span>defconstant <span class="sym">+</span>lut<span class="sym">+</span>
  <span class="sym">(</span>let <span class="sym">((</span>lut <span class="sym">(</span>make<span class="sym">-</span>string <span class="num">256</span> <span class="sym">:</span>initial<span class="sym">-</span>element #\*<span class="sym">)))</span>
    <span class="sym">(</span>loop for a across <span class="str">&quot;wsatugcyrkmbdhvnWSATUGCYRKMBDHVN&quot;</span>
          for b across <span class="str">&quot;WSTAACGRYMKVHDBNWSTAACGRYMKVHDBN&quot;</span>
          do <span class="sym">(</span>setf <span class="sym">(</span>char lut <span class="sym">(</span>char<span class="sym">-</span>code a<span class="sym">))</span> b<span class="sym">))</span>
    lut<span class="sym">))</span>

<span class="sym">(</span><span class="kwa">defun</span> main <span class="sym">()</span>
  <span class="sym">(</span>declare <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">)))</span>
  <span class="sym">(</span>with<span class="sym">-</span><span class="kwa">open</span><span class="sym">-</span>file <span class="sym">(</span>in <span class="str">&quot;/dev/stdin&quot;</span> <span class="sym">:</span>external<span class="sym">-</span>format <span class="sym">:</span>latin<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
    <span class="sym">(</span>with<span class="sym">-</span><span class="kwa">open</span><span class="sym">-</span>file <span class="sym">(</span>out <span class="str">&quot;/dev/stdout&quot;</span> <span class="sym">:</span>external<span class="sym">-</span>format <span class="sym">:</span>latin<span class="sym">-</span><span class="num">1</span> <span class="sym">:</span>direction <span class="sym">:</span>output <span class="sym">:</span><span class="kwa">if</span><span class="sym">-</span>exists <span class="sym">:</span><span class="kwa">append</span><span class="sym">)</span>
      <span class="sym">(</span>let <span class="sym">((</span>chunks <span class="sym">'()))</span>
        <span class="sym">(</span>flet <span class="sym">((</span>flush<span class="sym">-</span>chunks <span class="sym">()</span>
                 <span class="slc">;; reverse, complement, write lines of width +line-length+.  all in one go :(</span>
                 <span class="sym">(</span>loop with o<span class="sym">-</span>buf <span class="sym">= (</span>make<span class="sym">-</span>string <span class="sym">+</span><span class="kwa">line</span><span class="sym">-</span><span class="kwa">length</span><span class="sym">+)</span>
                       with chunk of<span class="sym">-</span><span class="kwa">type</span> simple<span class="sym">-</span>string
                       with idx of<span class="sym">-</span><span class="kwa">type</span> <span class="sym">(</span>unsigned<span class="sym">-</span>byte <span class="num">29</span><span class="sym">) =</span> <span class="num">0</span>
                       until <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(</span>endp chunks<span class="sym">) (</span><span class="kwa">zerop</span> idx<span class="sym">))</span>
                       do <span class="sym">(</span>loop for j from <span class="num">0</span> below <span class="sym">+</span><span class="kwa">line</span><span class="sym">-</span><span class="kwa">length</span><span class="sym">+</span>
                                <span class="kwa">if</span> <span class="sym">(</span><span class="kwa">zerop</span> idx<span class="sym">)</span> do <span class="sym">(</span>setf chunk <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span>pop chunks<span class="sym">) (</span>loop<span class="sym">-</span>finish<span class="sym">))</span>
                                                        idx <span class="sym">(</span><span class="kwa">length</span> <span class="sym">(</span>the simple<span class="sym">-</span>string chunk<span class="sym">)))</span>
                                do <span class="sym">(</span>setf <span class="sym">(</span>char o<span class="sym">-</span>buf j<span class="sym">) (</span>char <span class="sym">+</span>lut<span class="sym">+ (</span>char<span class="sym">-</span>code <span class="sym">(</span>char chunk <span class="sym">(</span>decf idx<span class="sym">)))))</span>
                                finally <span class="sym">(</span>write<span class="sym">-</span><span class="kwa">line</span> o<span class="sym">-</span>buf out <span class="sym">:</span>end j<span class="sym">))))</span>
               <span class="sym">(</span>chunk<span class="sym">-</span>headerp <span class="sym">(</span><span class="kwa">line</span><span class="sym">)</span>
                 <span class="sym">(</span>char<span class="sym">= (</span>char <span class="sym">(</span>the simple<span class="sym">-</span>string <span class="kwa">line</span><span class="sym">)</span> <span class="num">0</span><span class="sym">)</span> #\&gt;<span class="sym">)))</span>
          <span class="sym">(</span>declare <span class="sym">(</span>inline chunk<span class="sym">-</span>headerp flush<span class="sym">-</span>chunks<span class="sym">))</span>
          <span class="sym">(</span>loop for <span class="kwa">line</span> <span class="sym">= (</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span> in nil nil<span class="sym">)</span> <span class="kwa">while line</span>
                <span class="kwa">if</span> <span class="sym">(</span>chunk<span class="sym">-</span>headerp <span class="kwa">line</span><span class="sym">)</span>
                do <span class="sym">(</span>flush<span class="sym">-</span>chunks<span class="sym">)</span> <span class="kwa">and</span> do <span class="sym">(</span>write<span class="sym">-</span><span class="kwa">line line</span> out<span class="sym">)</span>
                else do <span class="sym">(</span>push <span class="kwa">line</span> chunks<span class="sym">)</span>
                finally <span class="sym">(</span>flush<span class="sym">-</span>chunks<span class="sym">)))))))</span>
