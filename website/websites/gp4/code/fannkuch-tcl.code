<span class="slc">#!/usr/bin/tclsh</span>
<span class="slc"># $Id: fannkuch-tcl.code,v 1.24 2005-11-21 17:54:33 igouy-guest Exp $</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>

<span class="slc"># Contributed by Robert Seeger</span>

<span class="kwa">proc</span> getCount <span class="sym">{</span>length data<span class="sym">} {</span>
    <span class="kwa">set</span> slot1 <span class="sym">[</span><span class="kwa">lindex</span> <span class="kwb">$data</span> <span class="num">0</span><span class="sym">]</span>
    <span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> i <span class="num">0</span><span class="sym">} {</span><span class="kwb">$slot1</span> <span class="sym">!=</span> <span class="num">1</span><span class="sym">} {</span><span class="kwa">incr</span> i<span class="sym">} {</span>
	<span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> j <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{([</span><span class="kwa">incr</span> slot1 <span class="sym">-</span><span class="num">1</span><span class="sym">] -</span> <span class="num">1</span><span class="sym">) /</span> <span class="num">2</span><span class="sym">}] } {</span><span class="kwb">$j</span> <span class="sym">&gt;=</span> <span class="num">0</span><span class="sym">} {</span><span class="kwa">incr</span> j <span class="sym">-</span><span class="num">1</span><span class="sym">} {</span>
	    <span class="kwa">set</span> index <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span><span class="kwb">$slot1</span> <span class="sym">-</span> <span class="kwb">$j</span><span class="sym">}]</span>
	    <span class="kwa">set</span> tmp <span class="sym">[</span><span class="kwa">lindex</span> <span class="kwb">$data $j</span><span class="sym">]</span>
	    <span class="kwa">lset</span> data <span class="kwb">$j</span> <span class="sym">[</span><span class="kwa">lindex</span> <span class="kwb">$data $index</span><span class="sym">]</span>
	    <span class="kwa">lset</span> data <span class="kwb">$index $tmp</span>
	<span class="sym">}</span>
	<span class="kwa">set</span> slot1 <span class="sym">[</span><span class="kwa">lindex</span> <span class="kwb">$data</span> <span class="num">0</span><span class="sym">]</span>
    <span class="sym">}</span>
    <span class="kwa">return</span> <span class="kwb">$i</span>
<span class="sym">}</span>

<span class="kwa">proc</span> nextperm <span class="sym">{</span>perm<span class="sym">} {</span>
    <span class="kwa">set</span> length <span class="sym">[</span><span class="kwa">llength</span> <span class="kwb">$perm</span><span class="sym">]</span>

    <span class="kwa">set</span> foundj <span class="num">1</span>
    <span class="kwa">set</span> j <span class="sym">[</span><span class="kwa">incr</span> length <span class="sym">-</span><span class="num">1</span><span class="sym">]</span>
    <span class="kwa">set</span> ajp1 <span class="sym">[</span><span class="kwa">lindex</span> <span class="kwb">$perm</span> end<span class="sym">]</span>
    <span class="kwa">while</span> <span class="sym">{[</span><span class="kwa">incr</span> j <span class="sym">-</span><span class="num">1</span><span class="sym">] &gt; -</span><span class="num">1</span><span class="sym">} {</span>
	<span class="kwa">set</span> aj <span class="sym">[</span><span class="kwa">lindex</span> <span class="kwb">$perm $j</span><span class="sym">]</span>
	<span class="kwa">if</span> <span class="sym">{[</span><span class="kwa">string</span> compare <span class="kwb">$ajp1 $aj</span><span class="sym">] &gt;</span> <span class="num">0</span><span class="sym">} {</span>
	    <span class="kwa">set</span> foundj <span class="num">0</span>
	    <span class="kwa">break</span>
	<span class="sym">}</span>
	<span class="kwa">set</span> ajp1 <span class="kwb">$aj</span>
    <span class="sym">}</span>
    <span class="kwa">if</span> <span class="sym">{</span><span class="kwb">$foundj</span><span class="sym">}</span> <span class="kwa">return</span>

    <span class="slc"># Find the smallest element greater than the j'th among the elements</span>
    <span class="slc"># following aj. Let its index be l, and interchange aj and al.</span>

    <span class="kwa">set</span> l <span class="sym">[</span><span class="kwa">incr</span> length<span class="sym">]</span>
    <span class="kwa">while</span> <span class="sym">{</span><span class="kwb">$aj</span> <span class="sym">&gt;= [</span><span class="kwa">set</span> al <span class="sym">[</span><span class="kwa">lindex</span> <span class="kwb">$perm</span> <span class="sym">[</span><span class="kwa">incr</span> l <span class="sym">-</span><span class="num">1</span><span class="sym">]]]} {}</span>
    <span class="kwa">lset</span> perm <span class="kwb">$j $al</span>
    <span class="kwa">lset</span> perm <span class="kwb">$l $aj</span>

    <span class="slc"># Reverse a_j+1 ... an</span>

    <span class="kwa">set</span> l <span class="kwb">$length</span>
    <span class="kwa">while</span> <span class="sym">{[</span><span class="kwa">incr</span> j<span class="sym">] &lt; [</span><span class="kwa">incr</span> l <span class="sym">-</span><span class="num">1</span><span class="sym">]} {</span>
	<span class="kwa">set</span> al <span class="sym">[</span><span class="kwa">lindex</span> <span class="kwb">$perm $l</span><span class="sym">]</span>
	<span class="kwa">lset</span> perm <span class="kwb">$l</span> <span class="sym">[</span><span class="kwa">lindex</span> <span class="kwb">$perm $j</span><span class="sym">]</span>
	<span class="kwa">lset</span> perm <span class="kwb">$j $al</span>
    <span class="sym">}</span>
    <span class="kwa">return</span> <span class="kwb">$perm</span>
<span class="sym">}</span>

<span class="kwa">proc</span> main <span class="sym">{</span>n<span class="sym">} {</span>
    <span class="kwa">foreach</span> <span class="sym">{</span>maxCount currCount<span class="sym">} {</span><span class="num">0 0</span><span class="sym">}</span> <span class="kwa">break</span>

    <span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> i <span class="num">1</span><span class="sym">} {</span><span class="kwb">$i</span> <span class="sym">&lt;=</span> <span class="kwb">$n</span><span class="sym">} {</span><span class="kwa">incr</span> i<span class="sym">} {</span>
	<span class="kwa">lappend</span> perm <span class="kwb">$i</span>
    <span class="sym">}</span>
    <span class="kwa">while</span> <span class="sym">{[</span><span class="kwa">llength</span> <span class="kwb">$perm</span><span class="sym">]} {</span>
	<span class="kwa">if</span> <span class="sym">{[</span><span class="kwa">set</span> currCount <span class="sym">[</span>getCount <span class="kwb">$n $perm</span><span class="sym">]] &gt;</span> <span class="kwb">$maxCount</span><span class="sym">} {</span>
	    <span class="kwa">set</span> maxCount <span class="kwb">$currCount</span>
	<span class="sym">}</span>
	<span class="kwa">set</span> perm <span class="sym">[</span>nextperm <span class="kwb">$perm</span><span class="sym">]</span>
    <span class="sym">}</span>
    <span class="kwa">puts</span> <span class="str">&quot;Pfannkuchen($n) = $maxCount&quot;</span>
<span class="sym">}</span>

main <span class="kwb">$argv</span>
