<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">-- Contributed by: Sergei Matusevich 2007</span>

<span class="hl kwa">import</span> List
<span class="hl kwa">import</span> Text.Regex.Posix
<span class="hl kwa">import qualified</span> Data.ByteString.Char8 <span class="hl kwa">as</span> B

variants <span class="hl sym">= [</span>
  <span class="hl str">&quot;agggtaaa|tttaccct&quot;</span><span class="hl sym">,</span>
  <span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="hl sym">,</span>
  <span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="hl sym">,</span>
  <span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="hl sym">,</span>
  <span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="hl sym">,</span>
  <span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="hl sym">,</span>
  <span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="hl sym">,</span>
  <span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="hl sym">,</span>
  <span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span> <span class="hl sym">]</span>

main <span class="hl sym">=</span> <span class="hl kwa">do</span>
  file <span class="hl sym">&lt;-</span> B.getContents
  <span class="hl kwa">let</span> <span class="hl sym">[</span>s1<span class="hl sym">,</span>s2<span class="hl sym">,</span>s3<span class="hl sym">] =</span> map <span class="hl sym">(</span>B.concat . tail<span class="hl sym">)</span> $ groupBy notHeader $ B.split <span class="hl str">'\n'</span> file
  mapM_ <span class="hl sym">(</span>printVars s2 s3<span class="hl sym">)</span> variants
  putChar <span class="hl str">'\n'</span>
  print <span class="hl sym">(</span>B.length file<span class="hl sym">)</span>
  print <span class="hl sym">(</span>B.length s1 <span class="hl sym">+</span> B.length s2 <span class="hl sym">+</span> B.length s3<span class="hl sym">)</span>
  print <span class="hl sym">(</span>B.length s1 <span class="hl sym">+</span> B.length s3 <span class="hl sym">+</span> length <span class="hl sym">(</span>B.unpack s2 <span class="hl sym">&gt;&gt;=</span> substCh<span class="hl sym">))</span>
  <span class="hl kwa">where</span> notHeader _ s <span class="hl sym">=</span> B.null s <span class="hl sym">||</span> B.head s <span class="hl sym">/=</span> <span class="hl str">'&gt;'</span>
        substCh <span class="hl str">'B'</span> <span class="hl sym">=</span> <span class="hl str">&quot;(c|g|t)&quot;</span>
        substCh <span class="hl str">'D'</span> <span class="hl sym">=</span> <span class="hl str">&quot;(a|g|t)&quot;</span>
        substCh <span class="hl str">'H'</span> <span class="hl sym">=</span> <span class="hl str">&quot;(a|c|t)&quot;</span>
        substCh <span class="hl str">'K'</span> <span class="hl sym">=</span> <span class="hl str">&quot;(g|t)&quot;</span>
        substCh <span class="hl str">'M'</span> <span class="hl sym">=</span> <span class="hl str">&quot;(a|c)&quot;</span>
        substCh <span class="hl str">'N'</span> <span class="hl sym">=</span> <span class="hl str">&quot;(a|c|g|t)&quot;</span>
        substCh <span class="hl str">'R'</span> <span class="hl sym">=</span> <span class="hl str">&quot;(a|g)&quot;</span>
        substCh <span class="hl str">'S'</span> <span class="hl sym">=</span> <span class="hl str">&quot;(c|g)&quot;</span>
        substCh <span class="hl str">'V'</span> <span class="hl sym">=</span> <span class="hl str">&quot;(a|c|g)&quot;</span>
        substCh <span class="hl str">'W'</span> <span class="hl sym">=</span> <span class="hl str">&quot;(a|t)&quot;</span>
        substCh <span class="hl str">'Y'</span> <span class="hl sym">=</span> <span class="hl str">&quot;(c|t)&quot;</span>
        substCh etc <span class="hl sym">= [</span>etc<span class="hl sym">]</span>
        printVars s2 s3 r <span class="hl sym">=</span> <span class="hl kwa">do</span>
                            putStr r
                            putChar <span class="hl str">' '</span>
                            print <span class="hl sym">((</span>s2 <span class="hl sym">=</span>~ r <span class="hl sym">::</span> <span class="hl kwb">Int</span><span class="hl sym">) + (</span>s3 <span class="hl sym">=</span>~ r <span class="hl sym">::</span> <span class="hl kwb">Int</span><span class="hl sym">))</span>

