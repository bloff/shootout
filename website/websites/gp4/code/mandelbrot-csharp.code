<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> *    http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Adapted by Antti Lankila from the earlier Isaac Gouy's implementation</span>
<span class="hl com"> * modified by Amirk aka Razii.</span>
<span class="hl com"> */</span>

<span class="hl kwa">using</span> System<span class="hl sym">;</span>
<span class="hl kwa">using</span> System<span class="hl sym">.</span>IO<span class="hl sym">;</span>

<span class="hl kwa">class</span> Mandelbrot <span class="hl sym">{</span>

   <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">Main</span><span class="hl sym">(</span>String<span class="hl sym">[]</span> args<span class="hl sym">) {</span>

      <span class="hl kwb">int</span> width <span class="hl sym">=</span> <span class="hl num">100</span><span class="hl sym">;</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>args<span class="hl sym">.</span>Length <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
	 width <span class="hl sym">=</span> Int32<span class="hl sym">.</span><span class="hl kwd">Parse</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>

      <span class="hl kwb">int</span> height <span class="hl sym">=</span> width<span class="hl sym">;</span>
      <span class="hl kwb">int</span> maxiter <span class="hl sym">=</span> <span class="hl num">50</span><span class="hl sym">;</span>
      <span class="hl kwb">double</span> limit <span class="hl sym">=</span> <span class="hl num">4.0</span><span class="hl sym">;</span>

      Console<span class="hl sym">.</span><span class="hl kwd">WriteLine</span><span class="hl sym">(</span><span class="hl str">&quot;P4&quot;</span><span class="hl sym">);</span>
      Console<span class="hl sym">.</span><span class="hl kwd">WriteLine</span><span class="hl sym">(</span><span class="hl str">&quot;{0} {1}&quot;</span><span class="hl sym">,</span> width<span class="hl sym">,</span>height<span class="hl sym">);</span>
      BufferedStream s <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BufferedStream</span><span class="hl sym">(</span>Console<span class="hl sym">.</span><span class="hl kwd">OpenStandardOutput</span><span class="hl sym">());</span>

      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> y <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> y <span class="hl sym">&lt;</span> height<span class="hl sym">;</span> y<span class="hl sym">++) {</span>
	 <span class="hl kwb">int</span> bits <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
	 <span class="hl kwb">int</span> xcounter <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
	 <span class="hl kwb">double</span> Ci <span class="hl sym">=</span> <span class="hl num">2.0</span><span class="hl sym">*</span>y<span class="hl sym">/</span>height <span class="hl sym">-</span> <span class="hl num">1.0</span><span class="hl sym">;</span>

         <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> x <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> x <span class="hl sym">&lt;</span> width<span class="hl sym">;</span> x<span class="hl sym">++){</span>
	    <span class="hl kwb">double</span> Zr <span class="hl sym">=</span> <span class="hl num">0.0</span><span class="hl sym">;</span>
	    <span class="hl kwb">double</span> Zi <span class="hl sym">=</span> <span class="hl num">0.0</span><span class="hl sym">;</span>
	    <span class="hl kwb">double</span> Cr <span class="hl sym">=</span> <span class="hl num">2.0</span><span class="hl sym">*</span>x<span class="hl sym">/</span>width <span class="hl sym">-</span> <span class="hl num">1.5</span><span class="hl sym">;</span>
            <span class="hl kwb">int</span> i <span class="hl sym">=</span> maxiter<span class="hl sym">;</span>

            bits <span class="hl sym">=</span> bits <span class="hl sym">&lt;&lt;</span> <span class="hl num">1</span><span class="hl sym">;</span>
            <span class="hl kwa">do</span> <span class="hl sym">{</span>
               <span class="hl kwb">double</span> Tr <span class="hl sym">=</span> Zr<span class="hl sym">*</span>Zr <span class="hl sym">-</span> Zi<span class="hl sym">*</span>Zi <span class="hl sym">+</span> Cr<span class="hl sym">;</span>
               Zi <span class="hl sym">=</span> <span class="hl num">2.0</span><span class="hl sym">*</span>Zr<span class="hl sym">*</span>Zi <span class="hl sym">+</span> Ci<span class="hl sym">;</span>
               Zr <span class="hl sym">=</span> Tr<span class="hl sym">;</span>
               <span class="hl kwa">if</span> <span class="hl sym">(</span>Zr<span class="hl sym">*</span>Zr <span class="hl sym">+</span> Zi<span class="hl sym">*</span>Zi <span class="hl sym">&gt;</span> limit<span class="hl sym">) {</span>
		  bits <span class="hl sym">|=</span> <span class="hl num">1</span><span class="hl sym">;</span>
		  <span class="hl kwa">break</span><span class="hl sym">;</span>
	       <span class="hl sym">}</span>
            <span class="hl sym">}</span> <span class="hl kwa">while</span> <span class="hl sym">(--</span>i <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">);</span>

            <span class="hl kwa">if</span> <span class="hl sym">(++</span>xcounter <span class="hl sym">==</span> <span class="hl num">8</span><span class="hl sym">) {</span>
	       s<span class="hl sym">.</span><span class="hl kwd">WriteByte</span><span class="hl sym">((</span><span class="hl kwb">byte</span><span class="hl sym">) (</span>bits ^ <span class="hl num">0xff</span><span class="hl sym">));</span>
	       bits <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
	       xcounter <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl sym">}</span>
         <span class="hl sym">}</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>xcounter <span class="hl sym">!=</span> <span class="hl num">0</span><span class="hl sym">)</span>
	    s<span class="hl sym">.</span><span class="hl kwd">WriteByte</span><span class="hl sym">((</span><span class="hl kwb">byte</span><span class="hl sym">) ((</span>bits <span class="hl sym">&lt;&lt; (</span><span class="hl num">8</span> <span class="hl sym">-</span> xcounter<span class="hl sym">))</span> ^ <span class="hl num">0xff</span><span class="hl sym">));</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>
