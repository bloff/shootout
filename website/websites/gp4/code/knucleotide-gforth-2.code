\ The Great Computer Language Shootout
\ http<span class="sym">:</span><span class="slc">//shootout.alioth.debian.org/
</span>\
\ contributed by  Ian Osgood
\ requires enlarging the dictionary with <span class="str">&quot;-m 8M&quot;</span>

wordlist constant word<span class="sym">-</span>counts
variable data
variable dataEnd
create word<span class="sym">-</span>pointers <span class="num">100</span> cells allot
variable endwp

<span class="sym">:</span> count<span class="sym">,</span>   <span class="num">1</span> <span class="sym">, ;
:</span> count<span class="sym">-</span>name<span class="sym">,
</span>  endwp &#64; here over <span class="sym">!</span> cell<span class="sym">+</span> endwp <span class="sym">!
</span>  <span class="num">1</span> <span class="sym">,</span> last &#64; name<span class="sym">&gt;</span>string
  <span class="num">2du</span>p bounds <span class="kwa">do</span> i c&#64; toupper i c<span class="sym">!</span> loop <span class="num">2</span><span class="sym">, ;

</span>defer data<span class="sym">,

:</span> count<span class="sym">-</span>word <span class="sym">(</span> addr u <span class="sym">-- )
</span>    <span class="num">2du</span>p word<span class="sym">-</span>counts search<span class="sym">-</span>wordlist <span class="kwa">if
</span>        <span class="num">1</span> swap <span class="sym">&gt;</span>body <span class="sym">+!</span> <span class="num">2d</span>rop
    <span class="kwa">else
</span>        nextname create data<span class="sym">,
</span>    endif <span class="sym">;

:</span> scanit <span class="sym">(</span> end data n <span class="sym">--</span> total <span class="sym">)
</span>  word<span class="sym">-</span>pointers endwp <span class="sym">!
</span>  rot <span class="num">1</span><span class="sym">+</span> over <span class="sym">-</span> rot <span class="num">2du</span>p <span class="sym">- &gt;</span>r  <span class="sym">(</span> n end<span class="sym">-</span>n addr R<span class="sym">:</span> total <span class="sym">)
</span>  get<span class="sym">-</span>current <span class="sym">&gt;</span>r word<span class="sym">-</span>counts set<span class="sym">-</span>current
  <span class="kwa">do</span> i over count<span class="sym">-</span>word loop
  <span class="num">6</span> swap <span class="sym">-</span> set<span class="sym">-</span>precision r<span class="sym">&gt;</span> set<span class="sym">-</span>current r<span class="sym">&gt; ;

:</span> comp? <span class="sym">(</span> a1 a2 <span class="sym">--</span> a1 a2 ? <span class="sym">)
</span>  over &#64; over &#64; <span class="sym">=</span> <span class="kwa">if
</span>    over cell<span class="sym">+</span> <span class="num">2</span>&#64; drop over cell<span class="sym">+</span> <span class="num">2</span>&#64; tuck compare <span class="num">0</span><span class="sym">&lt;
</span>  <span class="kwa">else</span> over &#64; over &#64; <span class="sym">&gt;</span> then <span class="sym">;
:</span> sort
  word<span class="sym">-</span>pointers endwp &#64; over cell<span class="sym">+</span> <span class="kwa">do
</span>    dup i <span class="kwa">do
</span>      i &#64; i cell <span class="sym">-</span> &#64;  comp? <span class="kwa">if
</span>      i <span class="sym">!</span> i cell <span class="sym">- !</span>  <span class="kwa">else</span> <span class="num">2d</span>rop leave then
    cell <span class="sym">-</span>loop
  cell <span class="sym">+</span>loop drop <span class="sym">;

:</span> ff<span class="sym">.</span>  f$ scratch drop over type <span class="str">'. emit scratch rot /string type ;
: sortit ( end data n -- )  ['</span><span class="sym">]</span> count<span class="sym">-</span>name<span class="sym">, [</span>is<span class="sym">]</span> data<span class="sym">,
</span>  scanit sort  <span class="sym">(</span> total <span class="sym">)
</span>  endwp &#64; word<span class="sym">-</span>pointers <span class="kwa">do
</span>    i &#64; cell<span class="sym">+</span> <span class="num">2</span>&#64; type space
    i &#64; &#64; <span class="num">100</span> <span class="sym">*</span> s<span class="sym">&gt;</span>d d<span class="sym">&gt;</span>f  dup s<span class="sym">&gt;</span>d d<span class="sym">&gt;</span>f  f<span class="sym">/</span> ff<span class="sym">.</span> cr
  cell <span class="sym">+</span>loop drop <span class="sym">;

:</span> findit <span class="sym">(</span> end data str len <span class="sym">-- ) [</span><span class="str">'] count, [is] data,
  s&quot; clean marker clean&quot; evaluate
  tuck 2&gt;r scanit drop
  2r&#64; word-counts search-wordlist if
    &gt;body &#64; 1 u.r
  else '</span><span class="num">0</span> emit then  <span class="dir">#tab emit 2r&gt; type ;
</span>
<span class="sym">:</span> grow <span class="sym">(</span> end <span class="sym">--</span> newEnd <span class="sym">)
</span>  data &#64; <span class="sym">- (</span> size <span class="sym">)
</span>  data &#64; dataEnd &#64; over <span class="num">- 2</span><span class="sym">*</span> tuck resize <span class="kwa">throw</span> dup data <span class="sym">! +</span> dataEnd <span class="sym">!
</span>  data &#64; <span class="sym">+ ;

:</span> slurp <span class="sym">( --</span> end <span class="sym">)</span> data &#64;
  begin dup <span class="num">80</span> stdin read<span class="sym">-</span>line <span class="kwa">throw
  while</span> over c&#64; <span class="str">'&gt; &lt;&gt;
  while over c&#64; '</span><span class="sym">; =</span> <span class="kwa">if</span> drop <span class="kwa">else</span> <span class="sym">+</span> then
        dataEnd &#64; over <span class="num">- 80</span> <span class="sym">&lt;</span> <span class="kwa">if</span> grow then
  repeat then drop <span class="sym">;

:</span> report <span class="sym">(</span> end <span class="sym">-- )</span> data &#64;
  <span class="num">2du</span>p <span class="num">1</span> sortit cr
  <span class="num">2du</span>p <span class="num">2</span> sortit cr
  <span class="num">2du</span>p s<span class="str">&quot; GGT&quot;</span> findit cr
  <span class="num">2du</span>p s<span class="str">&quot; GGTA&quot;</span> findit cr
  <span class="num">2du</span>p s<span class="str">&quot; GGTATT&quot;</span> findit cr
  <span class="num">2du</span>p s<span class="str">&quot; GGTATTTTAATT&quot;</span> findit cr
  s<span class="str">&quot; GGTATTTTAATTTATAGT&quot;</span> findit cr <span class="sym">;

:</span> main
  <span class="num">4096</span> dup allocate <span class="kwa">throw</span> dup data <span class="sym">! +</span> dataEnd <span class="sym">!
</span>  begin pad <span class="num">80</span> stdin read<span class="sym">-</span>line <span class="kwa">throw</span> nip
  <span class="kwa">while</span> s<span class="str">&quot; &gt;THREE&quot;</span> pad over compare <span class="num">0</span><span class="sym">=</span> <span class="kwa">if</span> slurp report then
  repeat data &#64; free <span class="kwa">throw</span> <span class="sym">;

</span>marker clean

main bye \ done<span class="sym">!</span>
