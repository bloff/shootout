<span class="slc">\ The Great Computer Language Shootout</span>
<span class="slc">\ http://shootout.alioth.debian.org/</span>
<span class="slc">\</span>
<span class="slc">\ contributed by  Ian Osgood</span>
<span class="slc">\ requires enlarging the dictionary with &quot;-m 8M&quot;</span>

wordlist constant word<span class="sym">-</span>counts
variable data
variable dataEnd
create word<span class="sym">-</span>pointers <span class="num">100</span> cells allot
variable endwp

<span class="sym">:</span> count<span class="sym">,</span>   <span class="num">1</span> <span class="sym">, ;</span>
<span class="sym">:</span> count<span class="sym">-</span>name<span class="sym">,</span>
  endwp <span class="sym">&#64;</span> here over <span class="sym">!</span> cell<span class="sym">+</span> endwp <span class="sym">!</span>
  <span class="num">1</span> <span class="sym">,</span> last <span class="sym">&#64;</span> name<span class="sym">&gt;</span>string
  <span class="num">2</span>dup bounds do i c<span class="sym">&#64;</span> toupper i c<span class="sym">!</span> loop <span class="num">2</span><span class="sym">, ;</span>

defer data<span class="sym">,</span>

<span class="sym">:</span> count<span class="sym">-</span>word <span class="com">( addr u -- )</span>
    <span class="num">2</span>dup word<span class="sym">-</span>counts search<span class="sym">-</span>wordlist if
        <span class="num">1</span> swap <span class="sym">&gt;</span>body <span class="sym">+!</span> <span class="num">2</span>drop
    else
        nextname create data<span class="sym">,</span>
    endif <span class="sym">;</span>

<span class="sym">:</span> scanit <span class="com">( end data n -- total )</span>
  word<span class="sym">-</span>pointers endwp <span class="sym">!</span>
  rot <span class="num">1</span><span class="sym">+</span> over <span class="sym">-</span> rot <span class="num">2</span>dup <span class="sym">- &gt;</span>r  <span class="com">( n end-n addr R: total )</span>
  get<span class="sym">-</span>current <span class="sym">&gt;</span>r word<span class="sym">-</span>counts set<span class="sym">-</span>current
  do i over count<span class="sym">-</span>word loop
  <span class="num">6</span> swap <span class="sym">-</span> set<span class="sym">-</span>precision r<span class="sym">&gt;</span> set<span class="sym">-</span>current r<span class="sym">&gt; ;</span>

<span class="sym">:</span> comp<span class="sym">?</span> <span class="com">( a1 a2 -- a1 a2 ? )</span>
  over <span class="sym">&#64;</span> over <span class="sym">&#64; =</span> if
    over cell<span class="sym">+</span> <span class="num">2</span><span class="sym">&#64;</span> drop over cell<span class="sym">+</span> <span class="num">2</span><span class="sym">&#64;</span> tuck compare <span class="num">0</span><span class="sym">&lt;</span>
  else over <span class="sym">&#64;</span> over <span class="sym">&#64; &gt;</span> then <span class="sym">;</span>
<span class="sym">:</span> sort
  word<span class="sym">-</span>pointers endwp <span class="sym">&#64;</span> over cell<span class="sym">+</span> do
    dup i do
      i <span class="sym">&#64;</span> i cell <span class="sym">- &#64;</span>  comp<span class="sym">?</span> if
      i <span class="sym">!</span> i cell <span class="sym">- !</span>  else <span class="num">2</span>drop leave then
    cell <span class="sym">-</span>loop
  cell <span class="sym">+</span>loop drop <span class="sym">;</span>

<span class="sym">:</span> ff<span class="sym">.</span>  f$ scratch drop over type <span class="sym">'.</span> emit scratch rot <span class="sym">/</span>string type <span class="sym">;</span>
<span class="sym">:</span> sortit <span class="com">( end data n -- )</span>  <span class="sym">[']</span> count<span class="sym">-</span>name<span class="sym">, [</span>is<span class="sym">]</span> data<span class="sym">,</span>
  scanit sort  <span class="com">( total )</span>
  endwp <span class="sym">&#64;</span> word<span class="sym">-</span>pointers do
    i <span class="sym">&#64;</span> cell<span class="sym">+</span> <span class="num">2</span><span class="sym">&#64;</span> type space
    i <span class="sym">&#64; &#64;</span> <span class="num">100</span> <span class="sym">*</span> s<span class="sym">&gt;</span>d d<span class="sym">&gt;</span>f  dup s<span class="sym">&gt;</span>d d<span class="sym">&gt;</span>f  f<span class="sym">/</span> ff<span class="sym">.</span> cr
  cell <span class="sym">+</span>loop drop <span class="sym">;</span>

<span class="sym">:</span> findit <span class="com">( end data str len -- )</span> <span class="sym">[']</span> count<span class="sym">, [</span>is<span class="sym">]</span> data<span class="sym">,</span>
  s<span class="str">&quot; clean marker clean&quot;</span> evaluate
  tuck <span class="num">2</span><span class="sym">&gt;</span>r scanit drop
  <span class="num">2</span>r<span class="sym">&#64;</span> word<span class="sym">-</span>counts search<span class="sym">-</span>wordlist if
    <span class="sym">&gt;</span>body <span class="sym">&#64;</span> <span class="num">1</span> u<span class="sym">.</span>r
  else <span class="sym">'</span><span class="num">0</span> emit then  <span class="sym">#</span>tab emit <span class="num">2</span>r<span class="sym">&gt;</span> type <span class="sym">;</span>

<span class="sym">:</span> grow <span class="com">( end -- newEnd )</span>
  data <span class="sym">&#64; -</span> <span class="com">( size )</span>
  data <span class="sym">&#64;</span> dataEnd <span class="sym">&#64;</span> over <span class="sym">-</span> <span class="num">2</span><span class="sym">*</span> tuck resize throw dup data <span class="sym">! +</span> dataEnd <span class="sym">!</span>
  data <span class="sym">&#64; + ;</span>

<span class="sym">:</span> slurp <span class="com">( -- end )</span> data <span class="sym">&#64;</span>
  begin dup <span class="num">80</span> stdin read<span class="sym">-</span>line throw
  while over c<span class="sym">&#64; '&gt; &lt;&gt;</span>
  while over c<span class="sym">&#64; '; =</span> if drop else <span class="sym">+</span> then
        dataEnd <span class="sym">&#64;</span> over <span class="sym">-</span> <span class="num">80</span> <span class="sym">&lt;</span> if grow then
  repeat then drop <span class="sym">;</span>

<span class="sym">:</span> report <span class="com">( end -- )</span> data <span class="sym">&#64;</span>
  <span class="num">2</span>dup <span class="num">1</span> sortit cr
  <span class="num">2</span>dup <span class="num">2</span> sortit cr
  <span class="num">2</span>dup s<span class="str">&quot; GGT&quot;</span> findit cr
  <span class="num">2</span>dup s<span class="str">&quot; GGTA&quot;</span> findit cr
  <span class="num">2</span>dup s<span class="str">&quot; GGTATT&quot;</span> findit cr
  <span class="num">2</span>dup s<span class="str">&quot; GGTATTTTAATT&quot;</span> findit cr
  s<span class="str">&quot; GGTATTTTAATTTATAGT&quot;</span> findit cr <span class="sym">;</span>

<span class="sym">:</span> main
  <span class="num">4096</span> dup allocate throw dup data <span class="sym">! +</span> dataEnd <span class="sym">!</span>
  begin pad <span class="num">80</span> stdin read<span class="sym">-</span>line throw nip
  while s<span class="str">&quot; &gt;THREE&quot;</span> pad over compare <span class="num">0</span><span class="sym">=</span> if slurp report then
  repeat data <span class="sym">&#64;</span> free throw <span class="sym">;</span>

marker clean

main bye <span class="slc">\ done!</span>
