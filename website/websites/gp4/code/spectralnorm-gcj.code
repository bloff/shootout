<span class="com">/*
 The Great Computer Language Shootout
 http://shootout.alioth.debian.org/

 contributed by Java novice Jarkko Miettinen
 modified ~3 lines of the original C#-version
 by Isaac Gouy
 */</span>

<span class="kwa">import</span> java<span class="sym">.</span>text<span class="sym">.</span><span class="kwc">DecimalFormat</span><span class="sym">;
</span><span class="kwa">import</span> java<span class="sym">.</span>text<span class="sym">.</span><span class="kwc">NumberFormat</span><span class="sym">;

</span><span class="kwa">public class</span> spectralnorm
<span class="sym">{

</span>	<span class="kwa">private static final</span> <span class="kwc">NumberFormat</span> formatter <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">DecimalFormat</span><span class="sym">(</span><span class="str">&quot;#.000000000&quot;</span><span class="sym">);

</span>	<span class="kwa">public static</span> <span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">) {
</span>		<span class="kwb">int</span> n <span class="sym">=</span> <span class="num">100</span><span class="sym">;
</span>		<span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> n <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);

</span>		<span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">(</span>formatter<span class="sym">.</span>format<span class="sym">(</span><span class="kwa">new</span> spectralnorm<span class="sym">().</span>Approximate<span class="sym">(</span>n<span class="sym">)));
	}

</span>	<span class="kwa">private final</span> <span class="kwb">double</span> Approximate<span class="sym">(</span><span class="kwb">int</span> n<span class="sym">) {
</span>		<span class="slc">// create unit vector
</span>		<span class="kwb">double</span><span class="sym">[]</span> u <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">double</span><span class="sym">[</span>n<span class="sym">];
</span>		<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++)</span> u<span class="sym">[</span>i<span class="sym">] =</span>  <span class="num">1</span><span class="sym">;

</span>		<span class="slc">// 20 steps of the power method
</span>		<span class="kwb">double</span><span class="sym">[]</span> v <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">double</span><span class="sym">[</span>n<span class="sym">];
</span>		<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++)</span> v<span class="sym">[</span>i<span class="sym">] =</span> <span class="num">0</span><span class="sym">;

</span>		<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span><span class="num">10</span><span class="sym">;</span> i<span class="sym">++) {
</span>			MultiplyAtAv<span class="sym">(</span>n<span class="sym">,</span>u<span class="sym">,</span>v<span class="sym">);
</span>			MultiplyAtAv<span class="sym">(</span>n<span class="sym">,</span>v<span class="sym">,</span>u<span class="sym">);
		}

</span>		<span class="slc">// B=AtA         A multiplied by A transposed
</span>		<span class="slc">// v.Bv /(v.v)   eigenvalue of v
</span>		<span class="kwb">double</span> vBv <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> vv <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>		<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {
</span>			vBv <span class="sym">+=</span> u<span class="sym">[</span>i<span class="sym">]*</span>v<span class="sym">[</span>i<span class="sym">];
</span>			vv  <span class="sym">+=</span> v<span class="sym">[</span>i<span class="sym">]*</span>v<span class="sym">[</span>i<span class="sym">];
		}

</span>		<span class="kwa">return</span> <span class="kwc">Math</span><span class="sym">.</span>sqrt<span class="sym">(</span>vBv<span class="sym">/</span>vv<span class="sym">);
	}


</span>	<span class="com">/* return element i,j of infinite matrix A */</span>
	<span class="kwa">private final</span> <span class="kwb">double</span> A<span class="sym">(</span><span class="kwb">int</span> i<span class="sym">,</span> <span class="kwb">int</span> j<span class="sym">){
</span>		<span class="kwa">return</span> <span class="num">1.0</span><span class="sym">/((</span>i<span class="sym">+</span>j<span class="sym">)*(</span>i<span class="sym">+</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">)/</span><span class="num">2</span> <span class="sym">+</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">);
	}

</span>	<span class="com">/* multiply vector v by matrix A */</span>
	<span class="kwa">private final</span> <span class="kwb">void</span> MultiplyAv<span class="sym">(</span><span class="kwb">int</span> n<span class="sym">,</span> <span class="kwb">double</span><span class="sym">[]</span> v<span class="sym">,</span> <span class="kwb">double</span><span class="sym">[]</span> Av<span class="sym">){
</span>		<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++){
</span>			Av<span class="sym">[</span>i<span class="sym">] =</span> <span class="num">0</span><span class="sym">;
</span>			<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> j<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> j<span class="sym">&lt;</span>n<span class="sym">;</span> j<span class="sym">++)</span> Av<span class="sym">[</span>i<span class="sym">] +=</span> A<span class="sym">(</span>i<span class="sym">,</span>j<span class="sym">)*</span>v<span class="sym">[</span>j<span class="sym">];
		}
	}

</span>	<span class="com">/* multiply vector v by matrix A transposed */</span>
	<span class="kwa">private final</span> <span class="kwb">void</span> MultiplyAtv<span class="sym">(</span><span class="kwb">int</span> n<span class="sym">,</span> <span class="kwb">double</span><span class="sym">[]</span> v<span class="sym">,</span> <span class="kwb">double</span><span class="sym">[]</span> Atv<span class="sym">){
</span>		<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>i<span class="sym">&lt;</span>n<span class="sym">;</span>i<span class="sym">++){
</span>			Atv<span class="sym">[</span>i<span class="sym">] =</span> <span class="num">0</span><span class="sym">;
</span>			<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> j<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> j<span class="sym">&lt;</span>n<span class="sym">;</span> j<span class="sym">++)</span> Atv<span class="sym">[</span>i<span class="sym">] +=</span> A<span class="sym">(</span>j<span class="sym">,</span>i<span class="sym">)*</span>v<span class="sym">[</span>j<span class="sym">];
		}
	}

</span>	<span class="com">/* multiply vector v by matrix A and then by matrix A transposed */</span>
	<span class="kwa">private final</span> <span class="kwb">void</span> MultiplyAtAv<span class="sym">(</span><span class="kwb">int</span> n<span class="sym">,</span> <span class="kwb">double</span><span class="sym">[]</span> v<span class="sym">,</span> <span class="kwb">double</span><span class="sym">[]</span> AtAv<span class="sym">){
</span>		<span class="kwb">double</span><span class="sym">[]</span> u <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">double</span><span class="sym">[</span>n<span class="sym">];
</span>		MultiplyAv<span class="sym">(</span>n<span class="sym">,</span>v<span class="sym">,</span>u<span class="sym">);
</span>		MultiplyAtv<span class="sym">(</span>n<span class="sym">,</span>u<span class="sym">,</span>AtAv<span class="sym">);
	}
}</span>
