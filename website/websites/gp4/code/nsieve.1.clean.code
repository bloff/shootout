<span class="slc">// The Computer Language Shootout</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>
<span class="slc">//</span>
<span class="slc">// contributed by Diederik van Arkel</span>

<span class="kwa">module</span> nsieve

<span class="kwa">import</span> StdEnv<span class="sym">,</span> LanguageShootout

Start world
	<span class="sym">#</span> n				<span class="sym">=</span> argi
	<span class="sym"># (</span>io<span class="sym">,</span>world<span class="sym">)	=</span> stdio world
	<span class="sym">#</span> io			<span class="sym">=</span> sieve n io
	<span class="sym">#</span> io			<span class="sym">=</span> sieve <span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> io
	<span class="sym">#</span> io			<span class="sym">=</span> sieve <span class="sym">(</span>n<span class="sym">-</span><span class="num">2</span><span class="sym">)</span> io
	<span class="sym"># (</span>err<span class="sym">,</span>world<span class="sym">)	=</span> fclose io world
	<span class="sym">=</span> world

sieve n io
	<span class="sym">#</span> m		<span class="sym">= (</span><span class="num">1</span> &lt;&lt; n<span class="sym">) *</span> <span class="num">10000</span>
	  arr	<span class="sym">=</span> createArray <span class="sym">(</span>m<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> True
	  c		<span class="sym">=</span> loop arr m <span class="num">2 0</span>
	<span class="sym">=</span> io &lt;&lt;&lt; <span class="str">&quot;Primes up to &quot;</span> &lt;&lt;&lt; fmt <span class="num">8</span> m &lt;&lt;&lt; <span class="str">&quot; &quot;</span> &lt;&lt;&lt; fmt <span class="num">8</span> c &lt;&lt;&lt; <span class="str">&quot;\n&quot;</span>

fmt width i
	<span class="sym">#</span> is	<span class="sym">=</span> toString i
	<span class="sym">=</span> toString <span class="sym">(</span>repeatn <span class="sym">(</span>width <span class="sym">-</span> size is<span class="sym">)</span> ' '<span class="sym">) +++</span> is

loop <span class="sym">:: !*{#</span><span class="kwb">Bool</span><span class="sym">} !</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Int</span>
loop arr m n c
	<span class="sym">|</span> n <span class="sym">==</span> m
		<span class="sym">=</span> c
	<span class="sym">#</span> el	<span class="sym">=</span> arr<span class="sym">.[</span>n<span class="sym">]</span>
	<span class="sym">|</span> el
		<span class="sym">#</span> arr	<span class="sym">=</span> update` arr <span class="sym">(</span>n<span class="sym">+</span>n<span class="sym">)</span>
		<span class="sym">=</span> loop arr m <span class="sym">(</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">) (</span>c<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>
	<span class="sym">=</span> loop arr m <span class="sym">(</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> c
<span class="kwa">where</span>
	update` <span class="sym">:: !*{#</span><span class="kwb">Bool</span><span class="sym">} !</span><span class="kwb">Int</span> <span class="sym">-&gt; *{#</span><span class="kwb">Bool</span><span class="sym">}</span>
	update` arr i
		<span class="sym">|</span> i &lt;<span class="sym">=</span> m
			<span class="sym">#!</span> arr	<span class="sym">= {</span>arr <span class="sym">&amp; [</span>i<span class="sym">] =</span> False<span class="sym">}</span>
			<span class="sym">=</span> update` arr <span class="sym">(</span>i<span class="sym">+</span>n<span class="sym">)</span>
		<span class="sym">=</span> arr
