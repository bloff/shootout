<span class="slc">% The Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">% contributed by Isaac Gouy</span>

<span class="kwa">functor</span>
<span class="kwa">import</span> Application System

<span class="kwa">define</span>
   <span class="sym">[</span>Arg<span class="sym">] = {</span>Application<span class="sym">.</span>getArgs plain<span class="sym">}</span>
   N <span class="sym">= {</span>String<span class="sym">.</span>toInt Arg<span class="sym">}</span>

   Min0 <span class="sym">=</span> <span class="num">4</span>
   Max0 <span class="sym">= {</span>Max Min0<span class="sym">+</span><span class="num">2</span> N<span class="sym">}</span>
   StretchDepth <span class="sym">=</span> Max0 <span class="sym">+</span> <span class="num">1</span>
   LongLivedTree

   <span class="kwa">fun</span> <span class="sym">{</span>NewTree I D<span class="sym">}</span>
      <span class="kwa">if</span> D <span class="sym">==</span> <span class="num">0</span> <span class="kwa">then</span> nil
      <span class="kwa">else</span>
         tree<span class="sym">(</span>I <span class="sym">{</span>NewTree <span class="num">2</span><span class="sym">*</span>I<span class="sym">-</span><span class="num">1</span> D<span class="sym">-</span><span class="num">1</span><span class="sym">} {</span>NewTree <span class="num">2</span><span class="sym">*</span>I D<span class="sym">-</span><span class="num">1</span><span class="sym">})</span>
      <span class="kwa">end</span>
   <span class="kwa">end</span>

   <span class="kwa">fun</span> <span class="sym">{</span>ItemCheck0 T<span class="sym">}</span>
      <span class="kwa">case</span> T
      <span class="kwa">of</span> nil <span class="kwa">then</span> <span class="num">0</span>
      <span class="sym">[]</span> tree<span class="sym">(</span>I L R<span class="sym">)</span> <span class="kwa">then</span> I <span class="sym">+ {</span>ItemCheck0 L<span class="sym">} - {</span>ItemCheck0 R<span class="sym">}</span> <span class="kwa">end</span>
   <span class="kwa">end</span>

   <span class="kwa">fun</span> <span class="sym">{</span>ItemCheck T<span class="sym">}</span>
      <span class="kwa">if</span> T <span class="sym">==</span> nil <span class="kwa">then</span> <span class="num">0</span>
      <span class="kwa">else</span> tree<span class="sym">(</span>I L R<span class="sym">) =</span> T <span class="kwa">in</span> I <span class="sym">+ {</span>ItemCheck L<span class="sym">} - {</span>ItemCheck R<span class="sym">}</span> <span class="kwa">end</span>
   <span class="kwa">end</span>

   <span class="kwa">fun</span> <span class="sym">{</span>SumLoop N D Sum<span class="sym">}</span>
      Check1 <span class="sym">= {</span>ItemCheck <span class="sym">{</span>NewTree N D<span class="sym">}}</span>
      Check2 <span class="sym">= {</span>ItemCheck <span class="sym">{</span>NewTree <span class="sym">~</span><span class="num">1</span><span class="sym">*</span>N D<span class="sym">}}</span>
   <span class="kwa">in</span>
      <span class="kwa">if</span> N <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then</span> <span class="sym">{</span>SumLoop N<span class="sym">-</span><span class="num">1</span> D Sum<span class="sym">+</span>Check1<span class="sym">+</span>Check2<span class="sym">}</span> <span class="kwa">else</span> Sum <span class="kwa">end</span>
   <span class="kwa">end</span>

   <span class="kwa">proc</span> <span class="sym">{</span>DepthLoop D M<span class="sym">}</span>
      N <span class="sym">= {</span>Pow <span class="num">2</span> M<span class="sym">-</span>D<span class="sym">+</span>Min0<span class="sym">}</span>

      <span class="kwa">proc</span> <span class="sym">{</span>ShowCheck I D Check<span class="sym">}</span>
         <span class="sym">{</span>System<span class="sym">.</span>showInfo <span class="num">2</span><span class="sym">*</span>I <span class="sym">#</span> &quot;<span class="sym">\</span>t trees <span class="kwa">of</span> depth &quot; <span class="sym">#</span> D <span class="sym">#</span> &quot;<span class="sym">\</span>t check<span class="sym">:</span> &quot; <span class="sym">#</span> Check<span class="sym">}</span>
      <span class="kwa">end</span>
   <span class="kwa">in</span>
     <span class="kwa">if</span> D <span class="sym">=&lt;</span> M <span class="kwa">then</span>
         <span class="sym">{</span>ShowCheck N D <span class="sym">{</span>SumLoop N D <span class="num">0</span><span class="sym">} }</span>
         <span class="sym">{</span>DepthLoop D<span class="sym">+</span><span class="num">2</span> M<span class="sym">}</span>
      <span class="kwa">end</span>
   <span class="kwa">end</span>

   <span class="kwa">proc</span> <span class="sym">{</span>ShowItemCheck S D T<span class="sym">}</span>
      <span class="sym">{</span>System<span class="sym">.</span>showInfo S <span class="sym">#</span> D <span class="sym">#</span> &quot;<span class="sym">\</span>t check<span class="sym">:</span> &quot; <span class="sym"># {</span>ItemCheck T<span class="sym">}}</span>
   <span class="kwa">end</span>

<span class="kwa">in</span>
   <span class="sym">{</span>ShowItemCheck &quot;stretch tree <span class="kwa">of</span> depth &quot; StretchDepth <span class="sym">{</span>NewTree <span class="num">0</span> StretchDepth<span class="sym">}}</span>
   LongLivedTree <span class="sym">= {</span>NewTree <span class="num">0</span> Max0<span class="sym">}</span>
   <span class="sym">{</span>DepthLoop Min0 Max0<span class="sym">}</span>
   <span class="sym">{</span>ShowItemCheck &quot;long lived tree <span class="kwa">of</span> depth &quot; Max0 LongLivedTree<span class="sym">}</span>
   <span class="sym">{</span>Application<span class="sym">.</span>exit <span class="num">0</span><span class="sym">}</span>
<span class="kwa">end</span>
