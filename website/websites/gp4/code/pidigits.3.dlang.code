<span class="hl com">/* The Great Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Mike Pall</span>
<span class="hl com"></span>
<span class="hl com">   converted to D by Dave Fladebo</span>
<span class="hl com">   compile: dmd -O -inline -release -I../../Include/dlang/gmp4d -L-lgmp pidigits3.d</span>
<span class="hl com"></span>
<span class="hl com">   GMP for D library provided by Ben Hinkle (http://home.comcast.net/~benhinkle/gmp-d/)</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> std<span class="hl sym">.</span>stdio<span class="hl sym">,</span> std<span class="hl sym">.</span>string<span class="hl sym">,</span> gmp<span class="hl sym">;</span>

<span class="hl kwa">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwa">char</span><span class="hl sym">[][]</span> args<span class="hl sym">)</span>
<span class="hl sym">{</span>
    ctx_t c<span class="hl sym">;</span>
    c<span class="hl sym">.</span>n <span class="hl sym">=</span> args<span class="hl sym">.</span>length <span class="hl sym">&gt;</span> <span class="hl num">1</span> ? <span class="hl kwd">atoi</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]) :</span> <span class="hl num">27</span><span class="hl sym">;</span>
    <span class="hl kwd">pidigits</span><span class="hl sym">(&amp;</span>c<span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl com">/* Generate successive digits of PI. */</span>
<span class="hl kwa">void</span> <span class="hl kwd">pidigits</span><span class="hl sym">(</span>ctx_t<span class="hl sym">*</span> c<span class="hl sym">)</span>
<span class="hl sym">{</span>
    <span class="hl kwa">int</span> k <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span>
    c<span class="hl sym">.</span>d <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    c<span class="hl sym">.</span>i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl kwd">mpz_init_set_ui</span><span class="hl sym">(</span>c<span class="hl sym">.</span>q<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">);</span>
    <span class="hl kwd">mpz_init_set_ui</span><span class="hl sym">(</span>c<span class="hl sym">.</span>r<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">);</span>
    <span class="hl kwd">mpz_init_set_ui</span><span class="hl sym">(</span>c<span class="hl sym">.</span>s<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">);</span>
    <span class="hl kwd">mpz_init_set_ui</span><span class="hl sym">(</span>c<span class="hl sym">.</span>t<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">);</span>
    <span class="hl kwd">mpz_init</span><span class="hl sym">(</span>c<span class="hl sym">.</span>u<span class="hl sym">);</span>
    <span class="hl kwd">mpz_init</span><span class="hl sym">(</span>c<span class="hl sym">.</span>v<span class="hl sym">);</span>
    <span class="hl kwd">mpz_init</span><span class="hl sym">(</span>c<span class="hl sym">.</span>w<span class="hl sym">);</span>
    <span class="hl kwa">for</span><span class="hl sym">(;;)</span>
    <span class="hl sym">{</span>
        <span class="hl kwa">int</span> y <span class="hl sym">=</span> <span class="hl kwd">extract</span><span class="hl sym">(</span>c<span class="hl sym">,</span> <span class="hl num">3</span><span class="hl sym">);</span>
        <span class="hl kwa">if</span><span class="hl sym">(</span>y <span class="hl sym">==</span> <span class="hl kwd">extract</span><span class="hl sym">(</span>c<span class="hl sym">,</span> <span class="hl num">4</span><span class="hl sym">))</span>
        <span class="hl sym">{</span>
            <span class="hl kwa">if</span><span class="hl sym">(</span><span class="hl kwd">prdigit</span><span class="hl sym">(</span>c<span class="hl sym">,</span> y<span class="hl sym">))</span> <span class="hl kwa">return</span><span class="hl sym">;</span>
            <span class="hl kwd">compose_r</span><span class="hl sym">(</span>c<span class="hl sym">,</span> <span class="hl num">10</span><span class="hl sym">, -</span><span class="hl num">10</span><span class="hl sym">*</span>y<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">);</span>
        <span class="hl sym">}</span>
        <span class="hl kwa">else</span>
        <span class="hl sym">{</span>
            <span class="hl kwd">compose_l</span><span class="hl sym">(</span>c<span class="hl sym">,</span> k<span class="hl sym">,</span> <span class="hl num">4</span><span class="hl sym">*</span>k<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">*</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">);</span>
            k<span class="hl sym">++;</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwa">struct</span> ctx_t
<span class="hl sym">{</span>
    mpz_t q<span class="hl sym">,</span> r<span class="hl sym">,</span> s<span class="hl sym">,</span> t<span class="hl sym">;</span>	<span class="hl com">/* Transformation matrix components. */</span>
    mpz_t u<span class="hl sym">,</span> v<span class="hl sym">,</span> w<span class="hl sym">;</span>	<span class="hl com">/* Temporary numbers. */</span>
    <span class="hl kwa">int</span> d<span class="hl sym">,</span> i<span class="hl sym">,</span> n<span class="hl sym">;</span>	<span class="hl com">/* Counters. */</span>
    <span class="hl kwa">char</span> digits<span class="hl sym">[</span><span class="hl num">10</span><span class="hl sym">];</span>	<span class="hl com">/* Accumulated digits for one line. */</span>
<span class="hl sym">}</span>

<span class="hl com">/* Print one digit. Returns 1 for the last digit. */</span>
<span class="hl kwa">int</span> <span class="hl kwd">prdigit</span><span class="hl sym">(</span>ctx_t<span class="hl sym">*</span> c<span class="hl sym">,</span> <span class="hl kwa">int</span> y<span class="hl sym">)</span>
<span class="hl sym">{</span>
    c<span class="hl sym">.</span>digits<span class="hl sym">[</span>c<span class="hl sym">.</span>d<span class="hl sym">++] =</span> <span class="hl str">'0'</span><span class="hl sym">+</span>y<span class="hl sym">;</span>
    <span class="hl kwa">if</span><span class="hl sym">(++</span>c<span class="hl sym">.</span>i <span class="hl sym">%</span> <span class="hl num">10</span> <span class="hl sym">==</span> <span class="hl num">0</span> <span class="hl sym">||</span> c<span class="hl sym">.</span>i <span class="hl sym">==</span> c<span class="hl sym">.</span>n<span class="hl sym">)</span>
    <span class="hl sym">{</span>
        <span class="hl kwd">writefln</span><span class="hl sym">(</span><span class="hl str">&quot;%-10s</span><span class="hl esc">\t</span><span class="hl str">:%d&quot;</span><span class="hl sym">,</span> c<span class="hl sym">.</span>digits<span class="hl sym">,</span> c<span class="hl sym">.</span>i<span class="hl sym">);</span>
        c<span class="hl sym">.</span>d <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl sym">}</span>
    <span class="hl kwa">return</span> c<span class="hl sym">.</span>i <span class="hl sym">==</span> c<span class="hl sym">.</span>n<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl com">/* Extract one digit. */</span>
<span class="hl kwa">int</span> <span class="hl kwd">extract</span><span class="hl sym">(</span>ctx_t<span class="hl sym">*</span> c<span class="hl sym">,</span> <span class="hl kwa">uint</span> j<span class="hl sym">)</span>
<span class="hl sym">{</span>
    <span class="hl kwd">mpz_mul_ui</span><span class="hl sym">(</span>c<span class="hl sym">.</span>u<span class="hl sym">,</span> c<span class="hl sym">.</span>q<span class="hl sym">,</span> j<span class="hl sym">);</span>
    <span class="hl kwd">mpz_add</span><span class="hl sym">(</span>c<span class="hl sym">.</span>u<span class="hl sym">,</span> c<span class="hl sym">.</span>u<span class="hl sym">,</span> c<span class="hl sym">.</span>r<span class="hl sym">);</span>
    <span class="hl kwd">mpz_mul_ui</span><span class="hl sym">(</span>c<span class="hl sym">.</span>v<span class="hl sym">,</span> c<span class="hl sym">.</span>s<span class="hl sym">,</span> j<span class="hl sym">);</span>
    <span class="hl kwd">mpz_add</span><span class="hl sym">(</span>c<span class="hl sym">.</span>v<span class="hl sym">,</span> c<span class="hl sym">.</span>v<span class="hl sym">,</span> c<span class="hl sym">.</span>t<span class="hl sym">);</span>
    <span class="hl kwd">mpz_tdiv_q</span><span class="hl sym">(</span>c<span class="hl sym">.</span>w<span class="hl sym">,</span> c<span class="hl sym">.</span>u<span class="hl sym">,</span> c<span class="hl sym">.</span>v<span class="hl sym">);</span>
    <span class="hl kwa">return</span> <span class="hl kwd">mpz_get_ui</span><span class="hl sym">(</span>c<span class="hl sym">.</span>w<span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl com">/* Compose matrix with numbers on the right. */</span>
<span class="hl kwa">void</span> <span class="hl kwd">compose_r</span><span class="hl sym">(</span>ctx_t<span class="hl sym">*</span> c<span class="hl sym">,</span> <span class="hl kwa">int</span> bq<span class="hl sym">,</span> <span class="hl kwa">int</span> br<span class="hl sym">,</span> <span class="hl kwa">int</span> bs<span class="hl sym">,</span> <span class="hl kwa">int</span> <span class="hl kwc">bt</span><span class="hl sym">)</span>
<span class="hl sym">{</span>
    <span class="hl kwd">mpz_mul_si</span><span class="hl sym">(</span>c<span class="hl sym">.</span>u<span class="hl sym">,</span> c<span class="hl sym">.</span>r<span class="hl sym">,</span> bs<span class="hl sym">);</span>
    <span class="hl kwd">mpz_mul_si</span><span class="hl sym">(</span>c<span class="hl sym">.</span>r<span class="hl sym">,</span> c<span class="hl sym">.</span>r<span class="hl sym">,</span> bq<span class="hl sym">);</span>
    <span class="hl kwd">mpz_mul_si</span><span class="hl sym">(</span>c<span class="hl sym">.</span>v<span class="hl sym">,</span> c<span class="hl sym">.</span>t<span class="hl sym">,</span> br<span class="hl sym">);</span>
    <span class="hl kwd">mpz_add</span><span class="hl sym">(</span>c<span class="hl sym">.</span>r<span class="hl sym">,</span> c<span class="hl sym">.</span>r<span class="hl sym">,</span> c<span class="hl sym">.</span>v<span class="hl sym">);</span>
    <span class="hl kwd">mpz_mul_si</span><span class="hl sym">(</span>c<span class="hl sym">.</span>t<span class="hl sym">,</span> c<span class="hl sym">.</span>t<span class="hl sym">,</span> <span class="hl kwc">bt</span><span class="hl sym">);</span>
    <span class="hl kwd">mpz_add</span><span class="hl sym">(</span>c<span class="hl sym">.</span>t<span class="hl sym">,</span> c<span class="hl sym">.</span>t<span class="hl sym">,</span> c<span class="hl sym">.</span>u<span class="hl sym">);</span>
    <span class="hl kwd">mpz_mul_si</span><span class="hl sym">(</span>c<span class="hl sym">.</span>s<span class="hl sym">,</span> c<span class="hl sym">.</span>s<span class="hl sym">,</span> <span class="hl kwc">bt</span><span class="hl sym">);</span>
    <span class="hl kwd">mpz_mul_si</span><span class="hl sym">(</span>c<span class="hl sym">.</span>u<span class="hl sym">,</span> c<span class="hl sym">.</span>q<span class="hl sym">,</span> bs<span class="hl sym">);</span>
    <span class="hl kwd">mpz_add</span><span class="hl sym">(</span>c<span class="hl sym">.</span>s<span class="hl sym">,</span> c<span class="hl sym">.</span>s<span class="hl sym">,</span> c<span class="hl sym">.</span>u<span class="hl sym">);</span>
    <span class="hl kwd">mpz_mul_si</span><span class="hl sym">(</span>c<span class="hl sym">.</span>q<span class="hl sym">,</span> c<span class="hl sym">.</span>q<span class="hl sym">,</span> bq<span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl com">/* Compose matrix with numbers on the left. */</span>
<span class="hl kwa">void</span> <span class="hl kwd">compose_l</span><span class="hl sym">(</span>ctx_t<span class="hl sym">*</span> c<span class="hl sym">,</span> <span class="hl kwa">int</span> bq<span class="hl sym">,</span> <span class="hl kwa">int</span> br<span class="hl sym">,</span> <span class="hl kwa">int</span> bs<span class="hl sym">,</span> <span class="hl kwa">int</span> <span class="hl kwc">bt</span><span class="hl sym">)</span>
<span class="hl sym">{</span>
    <span class="hl kwd">mpz_mul_si</span><span class="hl sym">(</span>c<span class="hl sym">.</span>r<span class="hl sym">,</span> c<span class="hl sym">.</span>r<span class="hl sym">,</span> <span class="hl kwc">bt</span><span class="hl sym">);</span>
    <span class="hl kwd">mpz_mul_si</span><span class="hl sym">(</span>c<span class="hl sym">.</span>u<span class="hl sym">,</span> c<span class="hl sym">.</span>q<span class="hl sym">,</span> br<span class="hl sym">);</span>
    <span class="hl kwd">mpz_add</span><span class="hl sym">(</span>c<span class="hl sym">.</span>r<span class="hl sym">,</span> c<span class="hl sym">.</span>r<span class="hl sym">,</span> c<span class="hl sym">.</span>u<span class="hl sym">);</span>
    <span class="hl kwd">mpz_mul_si</span><span class="hl sym">(</span>c<span class="hl sym">.</span>u<span class="hl sym">,</span> c<span class="hl sym">.</span>t<span class="hl sym">,</span> bs<span class="hl sym">);</span>
    <span class="hl kwd">mpz_mul_si</span><span class="hl sym">(</span>c<span class="hl sym">.</span>t<span class="hl sym">,</span> c<span class="hl sym">.</span>t<span class="hl sym">,</span> <span class="hl kwc">bt</span><span class="hl sym">);</span>
    <span class="hl kwd">mpz_mul_si</span><span class="hl sym">(</span>c<span class="hl sym">.</span>v<span class="hl sym">,</span> c<span class="hl sym">.</span>s<span class="hl sym">,</span> br<span class="hl sym">);</span>
    <span class="hl kwd">mpz_add</span><span class="hl sym">(</span>c<span class="hl sym">.</span>t<span class="hl sym">,</span> c<span class="hl sym">.</span>t<span class="hl sym">,</span> c<span class="hl sym">.</span>v<span class="hl sym">);</span>
    <span class="hl kwd">mpz_mul_si</span><span class="hl sym">(</span>c<span class="hl sym">.</span>s<span class="hl sym">,</span> c<span class="hl sym">.</span>s<span class="hl sym">,</span> bq<span class="hl sym">);</span>
    <span class="hl kwd">mpz_add</span><span class="hl sym">(</span>c<span class="hl sym">.</span>s<span class="hl sym">,</span> c<span class="hl sym">.</span>s<span class="hl sym">,</span> c<span class="hl sym">.</span>u<span class="hl sym">);</span>
    <span class="hl kwd">mpz_mul_si</span><span class="hl sym">(</span>c<span class="hl sym">.</span>q<span class="hl sym">,</span> c<span class="hl sym">.</span>q<span class="hl sym">,</span> bq<span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl slc">// Reset the GMP memory functions back to the GMP default.</span>
<span class="hl slc">//  This is needed because gmp4d/gmppool.d is linked in by the</span>
<span class="hl slc">//  Shootout build command (as needed by version 1 of pidigits.d).</span>
<span class="hl slc">//  gmp4d/gmppool.d overrides the GMP default if it is linked</span>
<span class="hl slc">//  w/ the application.</span>
<span class="hl kwa">static this</span><span class="hl sym">()</span>
<span class="hl sym">{</span>
    <span class="hl kwd">mp_set_memory_functions</span><span class="hl sym">(&amp;</span>malloc<span class="hl sym">, &amp;</span>_realloc<span class="hl sym">, &amp;</span>_free<span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwa">extern</span><span class="hl sym">(</span>C<span class="hl sym">)</span>
<span class="hl sym">{</span>
    <span class="hl kwa">void</span><span class="hl sym">*</span> <span class="hl kwd">malloc</span><span class="hl sym">(</span>size_t<span class="hl sym">);</span>
    <span class="hl kwa">void</span><span class="hl sym">*</span> <span class="hl kwd">realloc</span><span class="hl sym">(</span><span class="hl kwa">void</span><span class="hl sym">*,</span>size_t<span class="hl sym">);</span>
    <span class="hl kwa">void</span>  <span class="hl kwd">free</span><span class="hl sym">(</span><span class="hl kwa">void</span><span class="hl sym">*);</span>
    <span class="hl kwa">void</span><span class="hl sym">*</span> <span class="hl kwd">_realloc</span><span class="hl sym">(</span><span class="hl kwa">void</span><span class="hl sym">*</span> ptr<span class="hl sym">,</span> size_t old<span class="hl sym">,</span> size_t sz<span class="hl sym">)</span>
    <span class="hl sym">{</span>
        <span class="hl kwa">return</span> <span class="hl kwd">realloc</span><span class="hl sym">(</span>ptr<span class="hl sym">,</span>sz<span class="hl sym">);</span>
    <span class="hl sym">}</span>
    <span class="hl kwa">void</span>  <span class="hl kwd">_free</span><span class="hl sym">(</span><span class="hl kwa">void</span><span class="hl sym">*</span> ptr<span class="hl sym">,</span> size_t sz<span class="hl sym">)</span>
    <span class="hl sym">{</span>
        <span class="hl kwd">free</span><span class="hl sym">(</span>ptr<span class="hl sym">);</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>
