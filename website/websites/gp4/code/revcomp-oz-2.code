<span class="slc">% The Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">% contributed by Isaac Gouy</span>

<span class="kwa">functor</span>
<span class="kwa">import</span> Application Open

<span class="kwa">define</span>
   <span class="kwa">fun</span> <span class="sym">{</span>NextDesc F<span class="sym">}</span>
      <span class="kwa">case</span> <span class="sym">{</span>F getS<span class="sym">($)}</span>
      <span class="kwa">of false then false</span>
      elseof <span class="sym">&amp;&gt;|</span>T <span class="kwa">then</span> <span class="sym">{</span>Append &quot;<span class="sym">&gt;</span>&quot; T<span class="sym">}</span>
      <span class="kwa">else</span> <span class="sym">{</span>NextDesc F<span class="sym">}</span> <span class="kwa">end</span>
   <span class="kwa">end</span>

   <span class="kwa">fun</span> <span class="sym">{</span>ReadSequence F S<span class="sym">}</span>
      <span class="kwa">case</span> <span class="sym">{</span>F getS<span class="sym">($)}</span>
      <span class="kwa">of false then</span> S <span class="sym">#</span> <span class="kwa">false</span>
      elseof <span class="sym">&amp;&gt;|</span>T <span class="kwa">then</span> S <span class="sym"># {</span>Append &quot;<span class="sym">&gt;</span>&quot; T<span class="sym">}</span>
      elseof <span class="sym">&amp;;|</span>_ <span class="kwa">then</span> <span class="sym">{</span>ReadSequence F S<span class="sym">}</span>
      elseof Line <span class="kwa">then</span> <span class="sym">{</span>ReadSequence F S<span class="sym">#</span>Line<span class="sym">}</span> <span class="kwa">end</span>
   <span class="kwa">end</span>


   <span class="kwa">local</span>
      LineLength <span class="sym">=</span> <span class="num">60</span>

      <span class="kwa">fun</span> <span class="sym">{</span>IubCodeComplements<span class="sym">}</span>
         Code <span class="sym">=</span> &quot;ABCDGHKMNRSTVWY&quot;
         Comp <span class="sym">=</span> &quot;TVGHCDMKNYSABWR&quot;
         A <span class="sym">= {</span>NewArray <span class="num">1</span> <span class="sym">&amp;</span>Z <span class="sym">&amp;*}</span>
      <span class="kwa">in</span>
         <span class="sym">{</span>List<span class="sym">.</span>forAllInd
            <span class="sym">{</span>List<span class="sym">.</span>zip Code Comp <span class="kwa">fun</span><span class="sym">{$</span> A B<span class="sym">}</span> A<span class="sym">#</span>B <span class="kwa">end</span><span class="sym">}</span>
               <span class="kwa">proc</span><span class="sym">{$</span> I K<span class="sym">#</span>V<span class="sym">}</span> A<span class="sym">.</span>K <span class="sym">:=</span> V <span class="kwa">end</span><span class="sym">}</span>
         A
      <span class="kwa">end</span>

      IUB <span class="sym">= {</span>IubCodeComplements<span class="sym">}</span>

      <span class="kwa">fun</span> <span class="sym">{</span>Complement C<span class="sym">}</span> K <span class="sym">= {</span>Char<span class="sym">.</span>toUpper C<span class="sym">}</span> <span class="kwa">in</span> IUB<span class="sym">.</span>K <span class="kwa">end</span>

   <span class="kwa">in</span>
      <span class="kwa">proc</span> <span class="sym">{</span>WriteComplement FOut S<span class="sym">}</span>
         <span class="kwa">if</span> S <span class="sym">\=</span> nil <span class="kwa">then</span>
            H T
         <span class="kwa">in</span>
            <span class="sym">{</span>List<span class="sym">.</span>takeDrop S LineLength H T<span class="sym">}</span>
            <span class="sym">{</span>FOut putS<span class="sym">({</span>Map H Complement<span class="sym">})}</span>
            <span class="sym">{</span>WriteComplement FOut T<span class="sym">}</span>
         <span class="kwa">end</span>
      <span class="kwa">end</span>
   <span class="kwa">end</span>


   <span class="kwa">proc</span> <span class="sym">{</span>ReadRevCompWrite F D FOut<span class="sym">}</span>
      <span class="kwa">if</span> D <span class="sym">\=</span> <span class="kwa">false then</span>
         S <span class="sym">#</span> ND <span class="sym">= {</span>ReadSequence F nil<span class="sym">}</span>
      <span class="kwa">in</span>
         <span class="sym">{</span>FOut putS<span class="sym">(</span>D<span class="sym">)}</span>
         <span class="sym">{</span>WriteComplement FOut <span class="sym">{</span>Reverse <span class="sym">{</span>VirtualString<span class="sym">.</span>toString S<span class="sym">}}}</span>
         <span class="sym">{</span>ReadRevCompWrite F ND FOut<span class="sym">}</span>
      <span class="kwa">end</span>
   <span class="kwa">end</span>


   <span class="kwa">class</span> TextFile <span class="kwa">from</span> Open<span class="sym">.</span>file Open<span class="sym">.</span>text <span class="kwa">end</span>
   StdIn <span class="sym">= {</span>New TextFile init<span class="sym">(</span>name<span class="sym">:</span>stdin<span class="sym">)}</span>
   StdOut <span class="sym">= {</span>New TextFile init<span class="sym">(</span>name<span class="sym">:</span>stdout<span class="sym">)}</span>
<span class="kwa">in</span>
   <span class="sym">{</span>ReadRevCompWrite StdIn <span class="sym">{</span>NextDesc StdIn<span class="sym">}</span> StdOut<span class="sym">}</span>
   <span class="sym">{</span>Application<span class="sym">.</span>exit <span class="num">0</span><span class="sym">}</span>
<span class="kwa">end</span>
