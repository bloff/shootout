rem The Computer Language Shootout
rem http<span class="sym">://</span>shootout.alioth.debian.org<span class="sym">/</span>
rem contributed by Josh Goldfoot

<span class="kwa">function</span> AckInt<span class="sym">(</span>x <span class="kwa">as</span> <span class="kwb">integer</span><span class="sym">,</span> y <span class="kwa">as</span> <span class="kwb">integer</span><span class="sym">)</span> <span class="kwa">as</span> <span class="kwb">integer</span>
   <span class="kwa">if</span> x <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then</span> return <span class="sym">(</span>y <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span>
   <span class="kwa">if</span> y <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then</span> return <span class="sym">(</span>AckInt<span class="sym">(</span>x<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">))</span>
   return <span class="sym">(</span>AckInt<span class="sym">(</span>x<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> AckInt<span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">-</span><span class="num">1</span><span class="sym">)))</span>
<span class="kwa">end function</span>

<span class="kwa">function</span> Fib<span class="sym">(</span>n <span class="kwa">as</span> <span class="kwb">integer</span><span class="sym">)</span> <span class="kwa">as</span> <span class="kwb">integer</span>
   <span class="kwa">if</span> n <span class="sym">&lt;</span> <span class="num">2</span> <span class="kwa">then</span> return <span class="num">1</span>
   return Fib<span class="sym">(</span>n<span class="sym">-</span><span class="num">2</span><span class="sym">) +</span> Fib<span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
<span class="kwa">end function</span>

<span class="kwa">function</span> FibFP<span class="sym">(</span>n <span class="kwa">as</span> double<span class="sym">)</span> <span class="kwa">as</span> double
   <span class="kwa">if</span> n <span class="sym">&lt;</span> <span class="num">2.0</span> <span class="kwa">then</span> return <span class="num">1.0</span>
   return FibFP<span class="sym">(</span>n<span class="sym">-</span><span class="num">2.0</span><span class="sym">) +</span> FibFP<span class="sym">(</span>n<span class="sym">-</span><span class="num">1.0</span><span class="sym">)</span>
<span class="kwa">end function</span>

<span class="kwa">function</span> Tak<span class="sym">(</span>x <span class="kwa">as</span> <span class="kwb">integer</span><span class="sym">,</span> y <span class="kwa">as</span> <span class="kwb">integer</span><span class="sym">,</span> z <span class="kwa">as</span> <span class="kwb">integer</span><span class="sym">)</span> <span class="kwa">as</span> <span class="kwb">integer</span>
   <span class="kwa">if</span> y <span class="sym">&lt;</span> x <span class="kwa">then</span> return Tak<span class="sym">(</span> Tak<span class="sym">(</span>x<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">),</span> Tak<span class="sym">(</span>y<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> z<span class="sym">,</span> x<span class="sym">),</span> Tak<span class="sym">(</span>z<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">) )</span>
   return z
<span class="kwa">end function</span>

<span class="kwa">function</span> TakFP<span class="sym">(</span>x <span class="kwa">as</span> double<span class="sym">,</span> y <span class="kwa">as</span> double<span class="sym">,</span> z <span class="kwa">as</span> double<span class="sym">)</span> <span class="kwa">as</span> double
   <span class="kwa">if</span> y <span class="sym">&lt;</span> x <span class="kwa">then</span> return TakFP<span class="sym">(</span> TakFP<span class="sym">(</span>x<span class="sym">-</span><span class="num">1.0</span><span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">),</span> TakFP<span class="sym">(</span>y<span class="sym">-</span><span class="num">1.0</span><span class="sym">,</span> z<span class="sym">,</span> x<span class="sym">),</span> TakFP<span class="sym">(</span>z<span class="sym">-</span><span class="num">1.0</span><span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">) )</span>
   return z
<span class="kwa">end function</span>

<span class="kwa">dim</span> n <span class="kwa">as</span> <span class="kwb">integer</span>
n <span class="sym">=</span> valint<span class="sym">(</span>COMMAND$<span class="sym">) -</span> <span class="num">1</span>
<span class="kwa">if</span> n <span class="sym">&lt;</span> <span class="num">1</span> <span class="kwa">then</span> n <span class="sym">=</span> <span class="num">3</span>
print <span class="str">&quot;Ack(3,&quot;</span><span class="sym">;</span> str<span class="sym">(</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">) ;</span><span class="str">&quot;): &quot;</span><span class="sym">;</span> str<span class="sym">(</span>AckInt<span class="sym">(</span><span class="num">3</span><span class="sym">,</span> n<span class="sym">+</span><span class="num">1</span><span class="sym">))</span>
print <span class="str">&quot;Fib(&quot;</span><span class="sym">;</span>str<span class="sym">(</span><span class="num">28</span><span class="sym">+</span>n<span class="sym">);</span><span class="str">&quot;.0): &quot;</span><span class="sym">;</span>str<span class="sym">(</span>FibFP<span class="sym">(</span><span class="num">28.0</span><span class="sym">+</span>n<span class="sym">));</span><span class="str">&quot;.0&quot;</span>
print <span class="str">&quot;Tak(&quot;</span><span class="sym">;</span>str<span class="sym">(</span><span class="num">3</span><span class="sym">*</span>n<span class="sym">);</span><span class="str">&quot;,&quot;</span><span class="sym">;</span>str<span class="sym">(</span><span class="num">2</span><span class="sym">*</span>n<span class="sym">);</span><span class="str">&quot;,&quot;</span><span class="sym">;</span>str<span class="sym">(</span>n<span class="sym">);</span><span class="str">&quot;): &quot;</span><span class="sym">;</span> str<span class="sym">(</span>Tak<span class="sym">(</span><span class="num">3</span><span class="sym">*</span>n<span class="sym">,</span> <span class="num">2</span><span class="sym">*</span>n<span class="sym">,</span> n<span class="sym">))</span>
print <span class="str">&quot;Fib(3): &quot;</span><span class="sym">;</span> str<span class="sym">(</span>Fib<span class="sym">(</span><span class="num">3</span><span class="sym">))</span>
print <span class="str">&quot;Tak(3.0,2.0,1.0): &quot;</span><span class="sym">;</span> str<span class="sym">(</span>TakFP<span class="sym">(</span><span class="num">3.0</span><span class="sym">,</span> <span class="num">2.0</span><span class="sym">,</span> <span class="num">1.0</span><span class="sym">));</span><span class="str">&quot;.0&quot;</span>


