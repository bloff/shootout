<span class="slc">! -*- mode: f90 -*-
</span><span class="slc">!
</span><span class="slc">! $Id: nsieve-ifc.code,v 1.5 2005-10-31 02:54:25 igouy-guest Exp $ ; $Name:  $
</span><span class="slc">!
</span><span class="slc">! nsieve implementation
</span><span class="slc">! Simon Geard, 16/12/04
</span><span class="slc">!
</span><span class="slc">! Building info.
</span><span class="slc">! ==============
</span><span class="slc">!
</span><span class="slc">! Linux  - using the Intel Fortran90 compiler:
</span><span class="slc">!
</span><span class="slc">!          ifort nsieve.f90 -O3 -static-libcxa -o nsieve
</span><span class="slc">!
</span><span class="slc">!        - using g95:
</span><span class="slc">!
</span><span class="slc">!          g95 nsieve.f90 -O3 -o nsieve
</span>
program nsieve

  implicit none
  integer num<span class="sym">,</span> m
  character<span class="sym">(</span>len<span class="sym">=</span><span class="num">8</span><span class="sym">)</span> argv
  logical<span class="sym">,</span> dimension<span class="sym">(:),</span> allocatable <span class="sym">::</span> flags

  call getarg<span class="sym">(</span><span class="num">1</span><span class="sym">,</span>argv<span class="sym">)
</span>  read<span class="sym">(</span>argv<span class="sym">,*)</span> num

  m <span class="sym">= (</span><span class="num">2</span><span class="sym">**</span>num<span class="sym">)*</span><span class="num">10000
</span>  allocate<span class="sym">(</span>flags<span class="sym">(</span>m<span class="sym">))
</span>  write<span class="sym">(*,</span><span class="str">'(A,I8,A,I8)'</span><span class="sym">)</span>  <span class="str">'Primes up to '</span><span class="sym">,</span>m<span class="sym">,</span><span class="str">' '</span><span class="sym">,</span>nsi<span class="sym">(</span>m<span class="sym">,</span>flags<span class="sym">)

</span>  m <span class="sym">= (</span><span class="num">2</span><span class="sym">**(</span>num<span class="num">-1</span><span class="sym">))*</span><span class="num">10000
</span>  write<span class="sym">(*,</span><span class="str">'(A,I8,A,I8)'</span><span class="sym">)</span>  <span class="str">'Primes up to '</span><span class="sym">,</span>m<span class="sym">,</span><span class="str">' '</span><span class="sym">,</span>nsi<span class="sym">(</span>m<span class="sym">,</span>flags<span class="sym">)

</span>  m <span class="sym">= (</span><span class="num">2</span><span class="sym">**(</span>num<span class="num">-2</span><span class="sym">))*</span><span class="num">10000
</span>  write<span class="sym">(*,</span><span class="str">'(A,I8,A,I8)'</span><span class="sym">)</span>  <span class="str">'Primes up to '</span><span class="sym">,</span>m<span class="sym">,</span><span class="str">' '</span><span class="sym">,</span>nsi<span class="sym">(</span>m<span class="sym">,</span>flags<span class="sym">)


</span>  deallocate<span class="sym">(</span>flags<span class="sym">)

</span>contains

  integer function nsi<span class="sym">(</span>m<span class="sym">,</span> flags<span class="sym">)
</span>    integer<span class="sym">,</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> m
    logical<span class="sym">,</span> dimension<span class="sym">(:) ::</span> flags
    integer i<span class="sym">,</span> count<span class="sym">,</span> k

    do i<span class="sym">=</span><span class="num">2</span><span class="sym">,</span>m
       flags<span class="sym">(</span>i<span class="sym">) =</span> .true.
    end do
    count <span class="sym">=</span> <span class="num">0
</span>    do i<span class="sym">=</span><span class="num">2</span><span class="sym">,</span>m
       if <span class="sym">(</span>flags<span class="sym">(</span>i<span class="sym">))</span> then
          do k<span class="sym">=</span>i<span class="sym">+</span>i<span class="sym">,</span> m<span class="sym">,</span> i
             flags<span class="sym">(</span>k<span class="sym">) =</span> .false.
          end do
          count <span class="sym">=</span> count <span class="sym">+</span> <span class="num">1
</span>       end if
    end do

    nsi <span class="sym">=</span> count
  end function nsi

end program nsieve



