<span class="slc">' The Computer Language Shootout</span>
<span class="slc">' http://shootout.alioth.debian.org/</span>
<span class="slc">'</span>
<span class="slc">' Converted from the gcc benchmark contributed by Kevin Carson</span>
<span class="slc">' FreeBASIC conversion by Simon Nash(yetifoot)</span>

<span class="kwa">Type</span> treeNode
  _left <span class="kwa">As</span> treeNode ptr
  _right <span class="kwa">As</span> treeNode ptr
  item <span class="kwa">As</span> <span class="kwb">Long</span>
<span class="kwa">End Type</span>

<span class="kwa">Function</span> NewTreeNode<span class="sym">(</span>_left <span class="kwa">As</span> treeNode ptr<span class="sym">,</span>_
                     _right <span class="kwa">As</span> treeNode ptr<span class="sym">,</span> item <span class="kwa">As</span> <span class="kwb">Long</span><span class="sym">)</span> <span class="kwa">As</span> treeNode ptr
  <span class="kwa">Dim new As</span> treeNode ptr

    <span class="kwa">new</span> <span class="sym">=</span> Allocate<span class="sym">(</span>sizeof<span class="sym">(</span>treeNode<span class="sym">))</span>

    <span class="kwa">new</span><span class="sym">-&gt;</span>_left <span class="sym">=</span> _left
    <span class="kwa">new</span><span class="sym">-&gt;</span>_right <span class="sym">=</span> _right
    <span class="kwa">new</span><span class="sym">-&gt;</span>item <span class="sym">=</span> item

    Return <span class="kwa">new</span>
<span class="kwa">End Function</span>

<span class="kwa">Function</span> ItemCheck<span class="sym">(</span>tree <span class="kwa">As</span> treeNode ptr<span class="sym">)</span> <span class="kwa">As</span> <span class="kwb">Long</span>
  <span class="kwa">If</span> tree<span class="sym">-&gt;</span>_left <span class="sym">=</span> <span class="kwa">NULL Then</span>
      Return tree<span class="sym">-&gt;</span>item
  <span class="kwa">Else</span>
      Return tree<span class="sym">-&gt;</span>item <span class="sym">+</span> ItemCheck<span class="sym">(</span>tree<span class="sym">-&gt;</span>_left<span class="sym">) -</span> ItemCheck<span class="sym">(</span>tree<span class="sym">-&gt;</span>_right<span class="sym">)</span>
  <span class="kwa">End If</span>
<span class="kwa">End Function</span>

<span class="kwa">Function</span> BottomUpTree<span class="sym">(</span>item <span class="kwa">As</span> <span class="kwb">Long</span><span class="sym">,</span> depth <span class="kwa">As</span> uInteger<span class="sym">)</span> <span class="kwa">As</span> treeNode ptr
  <span class="kwa">If</span> <span class="sym">(</span>depth <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">Then</span>
    Return NewTreeNode<span class="sym">(</span>BottomUpTree<span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> item <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> depth <span class="sym">-</span> <span class="num">1</span><span class="sym">),</span>_
                       BottomUpTree<span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> item<span class="sym">,</span> depth <span class="sym">-</span> <span class="num">1</span><span class="sym">),</span>_
                       item<span class="sym">)</span>
  <span class="kwa">Else</span>
    Return NewTreeNode<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> item<span class="sym">)</span>
  <span class="kwa">End If</span>
<span class="kwa">End Function</span>

<span class="kwa">Sub</span> DeleteTree<span class="sym">(</span>tree <span class="kwa">As</span> treeNode ptr<span class="sym">)</span>
  <span class="kwa">If</span> tree<span class="sym">-&gt;</span>_left <span class="sym">&lt;&gt;</span> <span class="kwa">NULL Then</span>
    DeleteTree<span class="sym">(</span>tree<span class="sym">-&gt;</span>_left<span class="sym">)</span>
    DeleteTree<span class="sym">(</span>tree<span class="sym">-&gt;</span>_right<span class="sym">)</span>
  <span class="kwa">End If</span>

  DeAllocate<span class="sym">(</span>tree<span class="sym">)</span>
<span class="kwa">End Sub</span>

  <span class="kwa">Dim As</span> uInteger N<span class="sym">,</span> depth<span class="sym">,</span> minDepth<span class="sym">,</span> maxDepth<span class="sym">,</span> stretchDepth
  <span class="kwa">Dim As</span> treeNode ptr stretchTree<span class="sym">,</span> longLivedTree<span class="sym">,</span> tempTree
  <span class="kwa">Dim As</span> <span class="kwb">Long</span> i<span class="sym">,</span> iterations<span class="sym">,</span> check

    N <span class="sym">=</span> CInt<span class="sym">(</span>Command$<span class="sym">(</span><span class="num">1</span><span class="sym">))</span>

    minDepth <span class="sym">=</span> <span class="num">4</span>

    <span class="kwa">If</span> <span class="sym">(</span>minDepth <span class="sym">+</span> <span class="num">2</span><span class="sym">) &gt;</span> N <span class="kwa">Then</span>
      maxDepth <span class="sym">=</span> minDepth <span class="sym">+</span> <span class="num">2</span>
    <span class="kwa">Else</span>
      maxDepth <span class="sym">=</span> N
    <span class="kwa">End If</span>

    stretchDepth <span class="sym">=</span> maxDepth <span class="sym">+</span> <span class="num">1</span>
    stretchTree <span class="sym">=</span> BottomUpTree<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> stretchDepth<span class="sym">)</span>
    Print <span class="str">&quot;stretch tree of depth &quot;</span> <span class="sym">&amp;</span> stretchDepth <span class="sym">&amp;</span> chr<span class="sym">(</span><span class="num">9</span><span class="sym">) &amp;</span> <span class="str">&quot; check: &quot;</span> <span class="sym">&amp;</span> ItemCheck<span class="sym">(</span>stretchTree<span class="sym">) &amp;</span> chr<span class="sym">(</span><span class="num">10</span><span class="sym">);</span>

    DeleteTree<span class="sym">(</span>stretchTree<span class="sym">)</span>

    longLivedTree <span class="sym">=</span> BottomUpTree<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> maxDepth<span class="sym">)</span>

    <span class="kwa">For</span> depth <span class="sym">=</span> minDepth <span class="kwa">To</span> maxDepth <span class="kwa">Step</span> <span class="num">2</span>
      iterations <span class="sym">=</span> <span class="num">2</span> ^ <span class="sym">(</span>maxDepth <span class="sym">-</span> depth <span class="sym">+</span> minDepth<span class="sym">)</span>
      check <span class="sym">=</span> <span class="num">0</span>
      <span class="kwa">For</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">To</span> iterations
          tempTree <span class="sym">=</span> BottomUpTree<span class="sym">(</span>i<span class="sym">,</span> depth<span class="sym">)</span>
          check <span class="sym">+=</span> ItemCheck<span class="sym">(</span>tempTree<span class="sym">)</span>
          DeleteTree<span class="sym">(</span>tempTree<span class="sym">)</span>

          tempTree <span class="sym">=</span> BottomUpTree<span class="sym">(-</span>i<span class="sym">,</span> depth<span class="sym">)</span>
          check <span class="sym">+=</span> ItemCheck<span class="sym">(</span>tempTree<span class="sym">)</span>
          DeleteTree<span class="sym">(</span>tempTree<span class="sym">)</span>
      <span class="kwa">Next</span> i
      Print Str<span class="sym">(</span>iterations <span class="sym">*</span> <span class="num">2</span><span class="sym">) &amp;</span> chr<span class="sym">(</span><span class="num">9</span><span class="sym">) &amp;</span> <span class="str">&quot; trees of depth &quot;</span> <span class="sym">&amp;</span> depth <span class="sym">&amp;</span> chr<span class="sym">(</span><span class="num">9</span><span class="sym">) &amp;</span> <span class="str">&quot; check: &quot;</span> <span class="sym">&amp;</span> check <span class="sym">&amp;</span> chr<span class="sym">(</span><span class="num">10</span><span class="sym">);</span>
    <span class="kwa">Next</span> depth

    Print <span class="str">&quot;long lived tree of depth &quot;</span> <span class="sym">&amp;</span> maxDepth <span class="sym">&amp;</span> chr<span class="sym">(</span><span class="num">9</span><span class="sym">) &amp;</span><span class="str">&quot; check: &quot;</span> <span class="sym">&amp;</span> ItemCheck<span class="sym">(</span>longLivedTree<span class="sym">) &amp;</span> chr<span class="sym">(</span><span class="num">10</span><span class="sym">);</span>
