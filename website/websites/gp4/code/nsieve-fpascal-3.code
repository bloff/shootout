<span class="hl com">{ The Computer Language Shootout</span>
<span class="hl com">  http://shootout.alioth.debian.org</span>
<span class="hl com"></span>
<span class="hl com">  contributed by Joost van der Sluis</span>
<span class="hl com">}</span>

<span class="hl kwa">program</span> nsieve<span class="hl sym">;</span>

<span class="hl com">{$mode fpc}</span><span class="hl com">{$I-}</span>

<span class="hl kwa">var</span>
  n <span class="hl sym">:</span> <span class="hl kwb">longint</span><span class="hl sym">;</span>

<span class="hl kwa">procedure</span> <span class="hl kwd">primes</span><span class="hl sym">(</span>n <span class="hl sym">:</span> <span class="hl kwb">longint</span><span class="hl sym">);</span> <span class="hl kwa">inline</span><span class="hl sym">;</span>
<span class="hl kwa">var</span>
  flags<span class="hl sym">:</span> PBoolean<span class="hl sym">;</span>
  size<span class="hl sym">,</span>i<span class="hl sym">,</span>j<span class="hl sym">,</span>count <span class="hl sym">:</span> <span class="hl kwb">longint</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  size <span class="hl sym">:=</span> <span class="hl num">10000</span> <span class="hl kwa">shl</span> n<span class="hl sym">;</span>
  flags <span class="hl sym">:=</span> <span class="hl kwd">getmem</span><span class="hl sym">(</span>size<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">);</span>
  <span class="hl kwd">fillchar</span><span class="hl sym">(</span>flags<span class="hl sym">^,</span><span class="hl kwd">memsize</span><span class="hl sym">(</span>flags<span class="hl sym">),</span><span class="hl kwb">true</span><span class="hl sym">);</span>
  count <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
  <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl num">2</span> <span class="hl kwa">to</span> size <span class="hl kwa">do</span>
    <span class="hl kwa">if</span> flags<span class="hl sym">[</span>i<span class="hl sym">]</span> <span class="hl kwa">then</span>
    <span class="hl kwa">begin</span>
      <span class="hl kwd">inc</span><span class="hl sym">(</span>count<span class="hl sym">);</span>
      j <span class="hl sym">:=</span> i <span class="hl sym">+</span> i<span class="hl sym">;</span>
      <span class="hl kwa">while</span> j <span class="hl sym">&lt;=</span> size <span class="hl kwa">do begin</span>
        flags<span class="hl sym">[</span>j<span class="hl sym">] :=</span> <span class="hl kwb">false</span><span class="hl sym">;</span>
        <span class="hl kwd">inc</span><span class="hl sym">(</span>j<span class="hl sym">,</span> i<span class="hl sym">);</span>
      <span class="hl kwa">end</span><span class="hl sym">;</span>
    <span class="hl kwa">end</span><span class="hl sym">;</span>
  <span class="hl kwd">writeln</span><span class="hl sym">(</span><span class="hl str">'Primes up to'</span><span class="hl sym">,</span> size<span class="hl sym">:</span><span class="hl num">9</span><span class="hl sym">,</span> count<span class="hl sym">:</span><span class="hl num">9</span><span class="hl sym">);</span>
  <span class="hl kwd">freemem</span><span class="hl sym">(</span>flags<span class="hl sym">);</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">begin</span>
  <span class="hl kwd">val</span><span class="hl sym">(</span><span class="hl kwd">ParamStr</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">),</span> n<span class="hl sym">);</span>
  <span class="hl kwd">primes</span><span class="hl sym">(</span>n<span class="hl sym">);</span>
  <span class="hl kwd">primes</span><span class="hl sym">(</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">);</span>
  <span class="hl kwd">primes</span><span class="hl sym">(</span>n<span class="hl sym">-</span><span class="hl num">2</span><span class="hl sym">);</span>
<span class="hl kwa">end</span><span class="hl sym">.</span>
