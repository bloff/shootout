<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   Written by Jorge Peixoto de Morais Neto</span>
<span class="hl com">   based on code by Josh Goldfoot */</span>

<span class="hl dir">#include &lt;stdio.h&gt;</span>
<span class="hl dir">#include &lt;stdlib.h&gt;</span>
<span class="hl dir">#include &lt;pthread.h&gt;</span>
<span class="hl dir">#include &lt;semaphore.h&gt;</span>
<span class="hl dir">#include &lt;err.h&gt;</span>

<span class="hl kwb">static</span> sem_t mutex<span class="hl sym">,</span> second_creature<span class="hl sym">;</span>

<span class="hl kwb">static unsigned long</span> meetingsleft<span class="hl sym">;</span>

<span class="hl kwc">typedef</span> <span class="hl kwb">enum</span> <span class="hl sym">{</span> Blue<span class="hl sym">,</span> Red<span class="hl sym">,</span> Yellow<span class="hl sym">,</span> Faded <span class="hl sym">}</span> color_t<span class="hl sym">;</span>
<span class="hl kwc">typedef</span> <span class="hl kwb">struct</span> <span class="hl sym">{</span>
    <span class="hl kwb">unsigned long</span> <span class="hl sym">*</span>meetingsp<span class="hl sym">;</span>
    color_t color<span class="hl sym">;</span>
<span class="hl sym">}</span> creature_t<span class="hl sym">;</span>

<span class="hl com">/* When this function is called with two different colors, it must return the other color */</span>
<span class="hl com">/* We assume that none of the colors is Faded */</span>
<span class="hl com">/* If it is called with two equal colors, the specification allows us to return any color.  */</span>
<span class="hl com">/* In this case, we return Red if both colors are Blue, Yellow if both are Red and Blue if both are Yellow */</span>
<span class="hl kwb">static</span> color_t <span class="hl kwd">complementarycolor</span> <span class="hl sym">(</span>color_t c1<span class="hl sym">,</span> color_t c2<span class="hl sym">) {</span>
    <span class="hl kwa">switch</span> <span class="hl sym">(</span>c1<span class="hl sym">) {</span>
    <span class="hl kwa">case</span> Blue<span class="hl sym">:</span>
	<span class="hl kwa">return</span> c2 <span class="hl sym">==</span> Red ? Yellow <span class="hl sym">:</span> Red<span class="hl sym">;</span>
    <span class="hl kwa">case</span> Red<span class="hl sym">:</span>
	<span class="hl kwa">return</span> c2 <span class="hl sym">==</span> Yellow ? Blue <span class="hl sym">:</span> Yellow<span class="hl sym">;</span>
    <span class="hl kwa">case</span> Yellow<span class="hl sym">:</span>
    <span class="hl kwa">default</span><span class="hl sym">:</span>
	<span class="hl kwa">return</span> c2 <span class="hl sym">==</span> Blue ? Red <span class="hl sym">:</span> Blue<span class="hl sym">;</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl com">/* This is the meeting place. Multiple threads call this function.  */</span>
<span class="hl com">/* This function returns the new color the creature must assume after the meeting*/</span>
<span class="hl com">/* The first creature locks mutex, sets color1 = color, updates mp_state, */</span>
<span class="hl com">/* unlocks the mutex and waits to lock second_creature */</span>
<span class="hl com">/* The second creature locks mutex, sets othercolor=color1 and color2 = color , */</span>
<span class="hl com">/* decrements meetingsleft, updates mp_state, unlocks second_creature and returns */</span>
<span class="hl com">/* The first creature sets othercolor = color2, unlocks mutex and returns */</span>
<span class="hl com">/* mp_state is EMPTY again, the two semaphores are back to initial values and the cycle continues */</span>
<span class="hl com">/* until meetingsleft reaches 0. */</span>
<span class="hl kwb">static</span> color_t <span class="hl kwd">new_color</span> <span class="hl sym">(</span>color_t color<span class="hl sym">) {</span>
<span class="hl com">/* Meeting place state*/</span>
    <span class="hl kwb">static enum</span> <span class="hl sym">{</span>
	MEETINGS_LIMIT_REACHED <span class="hl sym">= -</span><span class="hl num">1</span><span class="hl sym">,</span>
	EMPTY<span class="hl sym">,</span>
	ONE_CREATURE
    <span class="hl sym">}</span> mp_state <span class="hl sym">=</span> EMPTY<span class="hl sym">;</span>

    <span class="hl kwb">static</span> color_t color1<span class="hl sym">,</span> color2<span class="hl sym">;</span>
    color_t othercolor<span class="hl sym">;</span>
    <span class="hl kwd">sem_wait</span> <span class="hl sym">(&amp;</span>mutex<span class="hl sym">);</span>
    <span class="hl kwa">switch</span> <span class="hl sym">(</span>mp_state<span class="hl sym">) {</span>
    <span class="hl kwa">case</span> EMPTY<span class="hl sym">:</span>
	color1 <span class="hl sym">=</span> color<span class="hl sym">;</span>
	mp_state <span class="hl sym">=</span> ONE_CREATURE<span class="hl sym">;</span>
	<span class="hl kwd">sem_post</span> <span class="hl sym">(&amp;</span>mutex<span class="hl sym">);</span>
	<span class="hl kwd">sem_wait</span> <span class="hl sym">(&amp;</span>second_creature<span class="hl sym">);</span>
	othercolor <span class="hl sym">=</span> color2<span class="hl sym">;</span>
	<span class="hl kwd">sem_post</span> <span class="hl sym">(&amp;</span>mutex<span class="hl sym">);</span>
	<span class="hl kwa">break</span><span class="hl sym">;</span>
    <span class="hl kwa">case</span> ONE_CREATURE<span class="hl sym">:</span>
	othercolor <span class="hl sym">=</span> color1<span class="hl sym">;</span>
	color2 <span class="hl sym">=</span> color<span class="hl sym">;</span>
	mp_state <span class="hl sym">= (--</span>meetingsleft ? EMPTY <span class="hl sym">:</span> MEETINGS_LIMIT_REACHED<span class="hl sym">);</span>
	<span class="hl kwd">sem_post</span> <span class="hl sym">(&amp;</span>second_creature<span class="hl sym">);</span>
	<span class="hl kwa">break</span><span class="hl sym">;</span>
    <span class="hl kwa">case</span> MEETINGS_LIMIT_REACHED<span class="hl sym">:</span>
    <span class="hl kwa">default</span><span class="hl sym">:</span>
	<span class="hl kwd">sem_post</span> <span class="hl sym">(&amp;</span>mutex<span class="hl sym">);</span>
	<span class="hl kwa">return</span> Faded<span class="hl sym">;</span>
    <span class="hl sym">}</span>
    <span class="hl kwa">return</span> <span class="hl kwd">complementarycolor</span> <span class="hl sym">(</span>color<span class="hl sym">,</span> othercolor<span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl com">/* This function simulates a creature. */</span>
<span class="hl kwb">static void</span> <span class="hl sym">*</span><span class="hl kwd">run_creature</span> <span class="hl sym">(</span><span class="hl kwb">void</span> <span class="hl sym">*</span>voidpme<span class="hl sym">) {</span>
    creature_t <span class="hl kwb">const</span> <span class="hl sym">*</span>me <span class="hl sym">=</span> voidpme<span class="hl sym">;</span>
    <span class="hl kwb">unsigned long</span> meetings <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    color_t color <span class="hl sym">=</span> me<span class="hl sym">-&gt;</span>color<span class="hl sym">;</span>
    <span class="hl kwa">do</span> <span class="hl sym">{</span>
	meetings<span class="hl sym">++;</span>
	color <span class="hl sym">=</span> <span class="hl kwd">new_color</span> <span class="hl sym">(</span>color<span class="hl sym">);</span>
    <span class="hl sym">}</span> <span class="hl kwa">while</span> <span class="hl sym">(</span>color <span class="hl sym">!=</span> Faded<span class="hl sym">);</span>
<span class="hl com">/* The '-1' compensates the fact that the meetings variable counts the meeting  */</span>
<span class="hl com">/* in wich the creature becomes faded (but it shouldn't) */</span>
    <span class="hl sym">*</span>me<span class="hl sym">-&gt;</span>meetingsp <span class="hl sym">=</span> meetings <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>
    <span class="hl kwb">static int</span> zero <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl com">/* We return a pointer to 0, meaning success. */</span>
    <span class="hl kwa">return</span> <span class="hl sym">&amp;</span>zero<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl com">/* This function sets loose four creatures and returns the sum of reported meetings*/</span>
<span class="hl kwb">static unsigned long</span> <span class="hl kwd">meetings_of_four_creatures</span> <span class="hl sym">(</span><span class="hl kwb">void</span><span class="hl sym">) {</span>
    <span class="hl kwd">sem_init</span> <span class="hl sym">(&amp;</span>mutex<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">);</span>
    <span class="hl kwd">sem_init</span> <span class="hl sym">(&amp;</span>second_creature<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">);</span>

    <span class="hl kwb">unsigned long</span> reports<span class="hl sym">[</span><span class="hl num">4</span><span class="hl sym">];</span>
    creature_t creatures<span class="hl sym">[</span><span class="hl num">4</span><span class="hl sym">] = {{&amp;</span>reports<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">],</span> Blue<span class="hl sym">},</span>
			       <span class="hl sym">{&amp;</span>reports<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">],</span> Red<span class="hl sym">},</span>
			       <span class="hl sym">{&amp;</span>reports<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">],</span> Yellow<span class="hl sym">},</span>
			       <span class="hl sym">{&amp;</span>reports<span class="hl sym">[</span><span class="hl num">3</span><span class="hl sym">],</span> Blue<span class="hl sym">}};</span>
    pthread_t pids<span class="hl sym">[</span><span class="hl num">4</span><span class="hl sym">];</span>
    <span class="hl kwb">int</span> i<span class="hl sym">;</span>
    <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">4</span><span class="hl sym">;</span> i<span class="hl sym">++)</span>
	<span class="hl kwd">pthread_create</span> <span class="hl sym">(&amp;</span>pids<span class="hl sym">[</span>i<span class="hl sym">],</span> NULL<span class="hl sym">,</span> run_creature<span class="hl sym">, &amp;</span>creatures<span class="hl sym">[</span>i<span class="hl sym">]);</span>

    <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">4</span><span class="hl sym">;</span> i<span class="hl sym">++)</span>
	<span class="hl kwd">pthread_join</span> <span class="hl sym">(</span>pids<span class="hl sym">[</span>i<span class="hl sym">],</span> NULL<span class="hl sym">);</span>

    <span class="hl kwb">unsigned long</span> sum <span class="hl sym">=</span> reports<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
    <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">4</span><span class="hl sym">;</span> i<span class="hl sym">++)</span>
	sum <span class="hl sym">+=</span> reports<span class="hl sym">[</span>i<span class="hl sym">];</span>
    <span class="hl kwa">return</span> sum<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span> <span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char const</span> <span class="hl sym">**</span>argv<span class="hl sym">) {</span>
    meetingsleft <span class="hl sym">=</span> <span class="hl num">1</span>e6<span class="hl sym">;</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>argc <span class="hl sym">&gt;</span> <span class="hl num">1</span><span class="hl sym">) {</span>
	<span class="hl kwb">char</span> <span class="hl sym">*</span>tail<span class="hl sym">;</span>
	meetingsleft <span class="hl sym">=</span> <span class="hl kwd">strtoul</span> <span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">], &amp;</span>tail<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">);</span>
	<span class="hl kwa">if</span> <span class="hl sym">(</span>tail <span class="hl sym">==</span> argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">])</span>
	    <span class="hl kwd">errx</span> <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> <span class="hl str">&quot;Could not convert</span> <span class="hl esc">\&quot;</span><span class="hl str">%s</span><span class="hl esc">\&quot;</span> <span class="hl str">to an unsigned long integer&quot;</span><span class="hl sym">,</span> argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]);</span>
    <span class="hl sym">}</span>
    <span class="hl kwb">unsigned long</span> sum <span class="hl sym">=</span> <span class="hl kwd">meetings_of_four_creatures</span> <span class="hl sym">();</span>
    <span class="hl kwd">printf</span> <span class="hl sym">(</span><span class="hl str">&quot;%lu</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> sum<span class="hl sym">);</span>
    <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>
