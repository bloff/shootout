<span class="slc"># The Computer Language Shootout Benchmarks</span>
<span class="slc">#   http://shootout.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc">#   contributed by Charles Evans  2005/12/23</span>
<span class="slc"># 	based on C version by Kevin Carson</span>
<span class="slc">#   compilation:</span>
<span class="slc">#       icont BinaryTree.icn</span>

<span class="kwa">link</span> printf

<span class="kwa">record</span> NewTreeNode<span class="sym">(</span>l<span class="sym">,</span>r<span class="sym">,</span>item<span class="sym">)</span>

<span class="kwa">procedure</span> ItemCheck<span class="sym">(</span>tree<span class="sym">)</span>
<span class="kwa">if</span> <span class="sym">/</span>tree.l <span class="kwa">then return</span> tree.item
<span class="kwa">else return</span> tree.item <span class="sym">+</span> ItemCheck<span class="sym">(</span>tree.l<span class="sym">) -</span> ItemCheck<span class="sym">(</span>tree.r<span class="sym">)</span>
<span class="kwa">end</span>

<span class="kwa">procedure</span> BottomUpTree<span class="sym">(</span>item<span class="sym">,</span>depth<span class="sym">)</span>
<span class="kwa">if</span> depth <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then</span>
   <span class="kwa">return</span> NewTreeNode<span class="sym">(</span>BottomUpTree<span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> item <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> depth <span class="sym">-</span> <span class="num">1</span><span class="sym">),</span>
	              BottomUpTree<span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> item<span class="sym">,</span> depth <span class="sym">-</span> <span class="num">1</span><span class="sym">),</span>
          	      item<span class="sym">)</span>
<span class="kwa">else return</span> NewTreeNode<span class="sym">(,,</span>item<span class="sym">)</span>
<span class="kwa">end</span>

<span class="kwa">procedure</span> main<span class="sym">(</span>argv<span class="sym">)</span> <span class="slc">#{</span>
 <span class="kwa">local</span> N<span class="sym">,</span> depth<span class="sym">,</span> minDepth<span class="sym">,</span> maxDepth<span class="sym">,</span> stretchDepth
 <span class="kwa">local</span> stretchTree<span class="sym">,</span> longLivedTree<span class="sym">,</span> tempTree<span class="sym">,</span> i<span class="sym">,</span> iterations<span class="sym">,</span> check
    argc<span class="sym">:=*</span>argv
    N <span class="sym">:=</span> <span class="kwb">integer</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">])</span>

    minDepth <span class="sym">:=</span> <span class="num">4</span><span class="sym">;</span>

    <span class="kwa">if</span> <span class="sym">((</span>minDepth <span class="sym">+</span> <span class="num">2</span><span class="sym">) &gt;</span> N<span class="sym">)</span> <span class="kwa">then</span>
        maxDepth <span class="sym">:=</span> minDepth <span class="sym">+</span> <span class="num">2</span>
    <span class="kwa">else</span>
        maxDepth <span class="sym">:=</span> N<span class="sym">;</span>

    stretchDepth <span class="sym">:=</span> maxDepth <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>

    stretchTree <span class="sym">:=</span> BottomUpTree<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> stretchDepth<span class="sym">);</span>
    printf<span class="sym">(</span><span class="str">&quot;stretch tree of depth %d</span><span class="esc">\t</span> <span class="str">check: %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>
           stretchDepth<span class="sym">,</span>ItemCheck<span class="sym">(</span>stretchTree<span class="sym">));</span>

    stretchTree<span class="sym">:=</span><span class="kwa">&amp;null</span>

    longLivedTree <span class="sym">:=</span> BottomUpTree<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> maxDepth<span class="sym">);</span>

    <span class="kwa">every</span>  <span class="sym">(</span>depth <span class="sym">:=</span> minDepth <span class="kwa">to</span> maxDepth <span class="kwa">by</span> <span class="num">2</span><span class="sym">)</span> <span class="kwa">do</span><span class="sym">{</span>

        iterations <span class="sym">:=</span> <span class="num">2</span>^<span class="sym">(</span> maxDepth <span class="sym">-</span> depth <span class="sym">+</span> minDepth<span class="sym">);</span>
        check <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>

        <span class="kwa">every</span> <span class="sym">(</span>i <span class="sym">:=</span> <span class="num">1</span> <span class="kwa">to</span>  iterations<span class="sym">)</span><span class="kwa">do</span><span class="sym">{</span>
            tempTree <span class="sym">:=</span> BottomUpTree<span class="sym">(</span>i<span class="sym">,</span> depth<span class="sym">);</span>
            check <span class="sym">+:=</span> ItemCheck<span class="sym">(</span>tempTree<span class="sym">);</span>
            tempTree <span class="sym">:=</span> <span class="kwa">&amp;null</span><span class="sym">;</span>

            tempTree <span class="sym">:=</span> BottomUpTree<span class="sym">(-</span>i<span class="sym">,</span> depth<span class="sym">);</span>
            check <span class="sym">+:=</span> ItemCheck<span class="sym">(</span>tempTree<span class="sym">);</span>
            tempTree <span class="sym">:=</span> <span class="kwa">&amp;null</span><span class="sym">;</span>
        <span class="sym">}</span> <span class="slc">#/* for(i := 1...) */</span>

        printf<span class="sym">(</span><span class="str">&quot;%d</span><span class="esc">\t</span> <span class="str">trees of depth %d</span><span class="esc">\t</span> <span class="str">check: %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>
               iterations <span class="sym">*</span> <span class="num">2</span><span class="sym">,</span>depth<span class="sym">,</span>check<span class="sym">);</span>

    <span class="sym">}</span> <span class="slc">#/* for(depth := minDepth...) */</span>

    printf<span class="sym">(</span><span class="str">&quot;long lived tree of depth %d</span><span class="esc">\t</span> <span class="str">check: %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>
           maxDepth<span class="sym">,</span>ItemCheck<span class="sym">(</span>longLivedTree<span class="sym">));</span>
<span class="slc">#    write(&amp;errout,&amp;time) # p4-2g= 113sec, 104sec w $define</span>
    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>

<span class="kwa">end</span> <span class="slc"># /*} main() */</span>
