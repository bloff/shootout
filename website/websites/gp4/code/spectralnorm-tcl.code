<span class="slc">#!/usr/bin/tclsh</span>
<span class="slc">##</span>
<span class="slc">## The Computer Lannguage Shootout</span>
<span class="slc">## http://shootout.alioth.debian.org/</span>
<span class="slc">## Contributed by Heiner Marxen</span>
<span class="slc">##</span>
<span class="slc">## &quot;spectral-norm&quot;	for Tcl</span>
<span class="slc">## Call:	tclsh spectral-norm.tcl N</span>
<span class="slc">##</span>
<span class="slc">## $Id: spectralnorm-tcl.code,v 1.16 2007-04-06 23:46:53 igouy-guest Exp $</span>

<span class="kwa">proc</span> A <span class="sym">{</span>i j<span class="sym">} {</span>
    <span class="kwa">return</span> <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span><span class="num">1.0</span> <span class="sym">/ ((</span><span class="kwb">$i</span><span class="sym">+</span><span class="kwb">$j</span><span class="sym">)*(</span><span class="kwb">$i</span><span class="sym">+</span><span class="kwb">$j</span><span class="sym">+</span><span class="num">1</span><span class="sym">)/</span><span class="num">2</span> <span class="sym">+</span> <span class="kwb">$i</span><span class="sym">+</span><span class="num">1</span><span class="sym">)}]</span>
<span class="sym">}</span>

<span class="kwa">set</span> mulBody <span class="sym">{</span>
    <span class="kwa">set</span> r <span class="sym">[</span><span class="kwa">list</span><span class="sym">]</span>
    <span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> i <span class="num">0</span><span class="sym">} {</span><span class="kwb">$i</span> <span class="sym">&lt;</span> <span class="kwb">$n</span><span class="sym">} {</span><span class="kwa">incr</span> i<span class="sym">} {</span>
	<span class="kwa">set</span> sum <span class="num">0.0</span>
	<span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> j <span class="num">0</span><span class="sym">} {</span><span class="kwb">$j</span> <span class="sym">&lt;</span> <span class="kwb">$n</span><span class="sym">} {</span><span class="kwa">incr</span> j<span class="sym">} {</span>
	    <span class="kwa">set</span> sum <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span><span class="kwb">$sum</span> <span class="sym">+ [</span>A_i_j<span class="sym">] * [</span><span class="kwa">lindex</span> <span class="kwb">$v $j</span><span class="sym">]}]</span>
	<span class="sym">}</span>
	<span class="kwa">lappend</span> r <span class="kwb">$sum</span>
    <span class="sym">}</span>
    <span class="kwa">return</span> <span class="kwb">$r</span>
<span class="sym">}</span>

<span class="kwa">proc</span> mulAv  <span class="sym">{</span>n v<span class="sym">} [</span><span class="kwa">string</span> map <span class="sym">[</span><span class="kwa">list</span> A_i_j <span class="sym">{</span>A <span class="kwb">$i $j</span><span class="sym">}]</span> <span class="kwb">$mulBody</span><span class="sym">]</span>
<span class="kwa">proc</span> mulAtv <span class="sym">{</span>n v<span class="sym">} [</span><span class="kwa">string</span> map <span class="sym">[</span><span class="kwa">list</span> A_i_j <span class="sym">{</span>A <span class="kwb">$j $i</span><span class="sym">}]</span> <span class="kwb">$mulBody</span><span class="sym">]</span>

<span class="kwa">proc</span> mulAtAv <span class="sym">{</span>n v<span class="sym">} {</span>
    <span class="kwa">return</span> <span class="sym">[</span>mulAtv <span class="kwb">$n</span> <span class="sym">[</span>mulAv <span class="kwb">$n $v</span><span class="sym">]]</span>
<span class="sym">}</span>

<span class="kwa">proc</span> approximate <span class="sym">{</span>n<span class="sym">} {</span>
    <span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> i <span class="num">0</span><span class="sym">} {</span><span class="kwb">$i</span> <span class="sym">&lt;</span> <span class="kwb">$n</span><span class="sym">} {</span><span class="kwa">incr</span> i<span class="sym">} {</span>
	<span class="kwa">lappend</span> u <span class="num">1.0</span>
    <span class="sym">}</span>

    <span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> i <span class="num">0</span><span class="sym">} {</span><span class="kwb">$i</span> <span class="sym">&lt;</span> <span class="num">10</span><span class="sym">} {</span><span class="kwa">incr</span> i<span class="sym">} {</span>
	<span class="kwa">set</span> v <span class="sym">[</span>mulAtAv <span class="kwb">$n $u</span><span class="sym">]</span>
	<span class="kwa">set</span> u <span class="sym">[</span>mulAtAv <span class="kwb">$n $v</span><span class="sym">]</span>
    <span class="sym">}</span>

    <span class="kwa">set</span> vBv <span class="num">0.0</span>
    <span class="kwa">set</span> vv  <span class="num">0.0</span>
    <span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> i <span class="num">0</span><span class="sym">} {</span><span class="kwb">$i</span> <span class="sym">&lt;</span> <span class="kwb">$n</span><span class="sym">} {</span><span class="kwa">incr</span> i<span class="sym">} {</span>
	<span class="kwa">set</span> vi  <span class="sym">[</span><span class="kwa">lindex</span> <span class="kwb">$v $i</span><span class="sym">]</span>
	<span class="kwa">set</span> vBv <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span><span class="kwb">$vBv</span> <span class="sym">+</span> <span class="kwb">$vi</span> <span class="sym">* [</span><span class="kwa">lindex</span> <span class="kwb">$u $i</span><span class="sym">]}]</span>
	<span class="kwa">set</span> vv  <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span><span class="kwb">$vv</span>  <span class="sym">+</span> <span class="kwb">$vi</span> <span class="sym">*</span> <span class="kwb">$vi</span>           <span class="sym">}]</span>
    <span class="sym">}</span>
    <span class="kwa">return</span> <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span>sqrt<span class="sym">(</span> <span class="kwb">$vBv</span> <span class="sym">/</span> <span class="kwb">$vv</span> <span class="sym">)}]</span>
<span class="sym">}</span>

<span class="kwa">proc</span> main <span class="sym">{</span>argv<span class="sym">} {</span>
    <span class="kwa">set</span> n <span class="num">100</span>
    <span class="kwa">if</span> <span class="sym">{[</span><span class="kwa">llength</span> <span class="kwb">$argv</span><span class="sym">]} {</span><span class="kwa">set</span> n <span class="sym">[</span><span class="kwa">lindex</span> <span class="kwb">$argv</span> <span class="num">0</span><span class="sym">]}</span>

    <span class="kwa">puts</span> <span class="sym">[</span><span class="kwa">format</span> <span class="str">&quot;%.9f&quot;</span> <span class="sym">[</span>approximate <span class="kwb">$n</span><span class="sym">]]</span>

    <span class="kwa">return</span> <span class="num">0</span>
<span class="sym">}</span>

main <span class="kwb">$argv</span>
