<span class="hl slc">-- The Great Computer Language Shootout</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Written by Dima Dorfman, 2004</span>
<span class="hl slc">--</span>
<span class="hl slc">-- converted to SE 2.1 by jos√©</span>
<span class="hl slc">--</span>

<span class="hl kwa">class</span> NSIEVEBITS

insert
   ARGUMENTS

creation <span class="hl sym">{</span>ANY<span class="hl sym">}</span>
   make

<span class="hl kwa">feature</span> <span class="hl sym">{</span>ANY<span class="hl sym">}</span>

   flags<span class="hl sym">:</span> FAST_ARRAY<span class="hl sym">[</span>INTEGER_32<span class="hl sym">]</span>

   Bit_length<span class="hl sym">:</span> <span class="hl kwb">INTEGER</span> <span class="hl kwa">is</span> <span class="hl num">32</span>

   make <span class="hl kwa">is local</span> n<span class="hl sym">,</span> m<span class="hl sym">:</span> <span class="hl kwb">INTEGER</span> <span class="hl kwa">do</span>
      <span class="hl kwa">check</span> argument_count <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl kwa">end</span>
      <span class="hl kwa">check</span> <span class="hl kwd">argument</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>.is_integer <span class="hl kwa">end</span>
      n <span class="hl sym">:=</span> <span class="hl kwd">argument</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>.to_integer
      <span class="hl kwa">check</span> n.<span class="hl kwd">in_range</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">17</span><span class="hl sym">)</span> <span class="hl kwa">end</span>

      m <span class="hl sym">:=</span> <span class="hl num">10000</span> <span class="hl sym">|&lt;&lt;</span> n.to_integer_8
      <span class="hl kwa">create</span> flags.<span class="hl kwd">make</span><span class="hl sym">((</span>m<span class="hl sym">+</span>Bit_length<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)//</span>Bit_length<span class="hl sym">)</span>
      std_output.<span class="hl kwd">put_string</span><span class="hl sym">(</span><span class="hl str">&quot;Primes up to &quot;</span><span class="hl sym">)</span>
      std_output.<span class="hl kwd">put_integer_format</span><span class="hl sym">(</span>m<span class="hl sym">,</span><span class="hl num">8</span><span class="hl sym">)</span>
      std_output.<span class="hl kwd">put_character</span><span class="hl sym">(</span><span class="hl str">' '</span><span class="hl sym">)</span>
      std_output.<span class="hl kwd">put_integer_format</span><span class="hl sym">(</span><span class="hl kwd">nsieves</span><span class="hl sym">(</span>flags<span class="hl sym">,</span>m<span class="hl sym">),</span><span class="hl num">8</span><span class="hl sym">)</span>
      std_output.put_new_line

      m <span class="hl sym">:=</span> m <span class="hl sym">|&gt;&gt;</span> <span class="hl num">1</span>
      flags.<span class="hl kwd">resize</span><span class="hl sym">((</span>m<span class="hl sym">+</span>Bit_length<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)//</span>Bit_length<span class="hl sym">)</span>
      std_output.<span class="hl kwd">put_string</span><span class="hl sym">(</span><span class="hl str">&quot;Primes up to &quot;</span><span class="hl sym">)</span>
      std_output.<span class="hl kwd">put_integer_format</span><span class="hl sym">(</span>m<span class="hl sym">,</span><span class="hl num">8</span><span class="hl sym">)</span>
      std_output.<span class="hl kwd">put_character</span><span class="hl sym">(</span><span class="hl str">' '</span><span class="hl sym">)</span>
      std_output.<span class="hl kwd">put_integer_format</span><span class="hl sym">(</span><span class="hl kwd">nsieves</span><span class="hl sym">(</span>flags<span class="hl sym">,</span>m<span class="hl sym">),</span><span class="hl num">8</span><span class="hl sym">)</span>
      std_output.put_new_line

      m <span class="hl sym">:=</span> m <span class="hl sym">|&gt;&gt;</span> <span class="hl num">1</span>
      flags.<span class="hl kwd">resize</span><span class="hl sym">((</span>m<span class="hl sym">+</span>Bit_length<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)//</span>Bit_length<span class="hl sym">)</span>
      std_output.<span class="hl kwd">put_string</span><span class="hl sym">(</span><span class="hl str">&quot;Primes up to &quot;</span><span class="hl sym">)</span>
      std_output.<span class="hl kwd">put_integer_format</span><span class="hl sym">(</span>m<span class="hl sym">,</span><span class="hl num">8</span><span class="hl sym">)</span>
      std_output.<span class="hl kwd">put_character</span><span class="hl sym">(</span><span class="hl str">' '</span><span class="hl sym">)</span>
      std_output.<span class="hl kwd">put_integer_format</span><span class="hl sym">(</span><span class="hl kwd">nsieves</span><span class="hl sym">(</span>flags<span class="hl sym">,</span>m<span class="hl sym">),</span><span class="hl num">8</span><span class="hl sym">)</span>
      std_output.put_new_line
   <span class="hl kwa">end</span>

   <span class="hl kwd">nsieves</span><span class="hl sym">(</span>is_prime<span class="hl sym">:</span> <span class="hl kwa">like</span> flags<span class="hl sym">;</span> upper<span class="hl sym">:</span> <span class="hl kwb">INTEGER</span><span class="hl sym">):</span> <span class="hl kwb">INTEGER</span> <span class="hl kwa">is local</span> i<span class="hl sym">,</span> j<span class="hl sym">,</span> k<span class="hl sym">:</span> <span class="hl kwb">INTEGER</span> <span class="hl kwa">do</span>
      is_prime.<span class="hl kwd">set_all_with</span><span class="hl sym">({</span>INTEGER_32 <span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">})</span>
      <span class="hl kwa">from</span> i<span class="hl sym">:=</span><span class="hl num">2</span> until i<span class="hl sym">&gt;=</span>upper <span class="hl kwa">loop</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>is_prime.<span class="hl kwd">item</span><span class="hl sym">(</span>i #<span class="hl sym">//</span> Bit_length<span class="hl sym">) &amp; ({</span>INTEGER_32 <span class="hl num">1</span><span class="hl sym">} |&lt;&lt; (</span>i #\\ Bit_length<span class="hl sym">)</span>.to_integer_8<span class="hl sym">)) /=</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
            <span class="hl kwa">from</span> j<span class="hl sym">:=</span>i<span class="hl sym">+</span>i until j<span class="hl sym">&gt;=</span>upper <span class="hl kwa">loop</span>
               k <span class="hl sym">:=</span> j #<span class="hl sym">//</span> Bit_length
               is_prime.<span class="hl kwd">put</span><span class="hl sym">(</span>is_prime.<span class="hl kwd">item</span><span class="hl sym">(</span>k<span class="hl sym">) &amp; (</span>~<span class="hl sym">({</span>INTEGER_32 <span class="hl num">1</span><span class="hl sym">} |&lt;&lt; (</span>j #\\ Bit_length<span class="hl sym">)</span>.to_integer_8<span class="hl sym">)),</span>k<span class="hl sym">)</span>
               j <span class="hl sym">:=</span> j<span class="hl sym">+</span>i
            <span class="hl kwa">end</span>
            <span class="hl kwa">Result</span> <span class="hl sym">:=</span> <span class="hl kwa">Result</span> <span class="hl sym">+</span> <span class="hl num">1</span>
         <span class="hl kwa">end</span>
         i <span class="hl sym">:=</span> i<span class="hl sym">+</span><span class="hl num">1</span>
      <span class="hl kwa">end</span>
   <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

