<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Anh Tran</span>
<span class="hl com">   based on programs by Luzius Meisser and Michael Barker</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> std<span class="hl sym">.</span>stdio<span class="hl sym">;</span>
<span class="hl kwa">import</span> std<span class="hl sym">.</span>thread <span class="hl sym">:</span> Thread<span class="hl sym">;</span>
<span class="hl kwa">import</span> std<span class="hl sym">.</span>conv<span class="hl sym">;</span>
<span class="hl kwa">import</span> std<span class="hl sym">.</span>string<span class="hl sym">;</span>

<span class="hl kwa">enum</span> Colour
<span class="hl sym">{</span>
   blue<span class="hl sym">,</span>
   red<span class="hl sym">,</span>
   yellow<span class="hl sym">,</span>
   Invalid
<span class="hl sym">}</span>

<span class="hl kwa">const char</span><span class="hl sym">[][</span><span class="hl num">3</span><span class="hl sym">]</span> ColourName <span class="hl sym">= [</span><span class="hl str">&quot;blue&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;red&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;yellow&quot;</span><span class="hl sym">];</span>
<span class="hl kwa">int</span>   creatureID <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

Colour <span class="hl kwd">doCompliment</span><span class="hl sym">(</span>Colour c1<span class="hl sym">,</span> Colour c2<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwa">switch</span> <span class="hl sym">(</span>c1<span class="hl sym">)</span>
   <span class="hl sym">{</span>
   <span class="hl kwa">case</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">:</span>
      <span class="hl kwa">switch</span> <span class="hl sym">(</span>c2<span class="hl sym">)</span>
      <span class="hl sym">{</span>
      <span class="hl kwa">case</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">:</span>
         <span class="hl kwa">return</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">;</span>
      <span class="hl kwa">case</span> Colour<span class="hl sym">.</span>red<span class="hl sym">:</span>
         <span class="hl kwa">return</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">;</span>
      <span class="hl kwa">case</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">:</span>
         <span class="hl kwa">return</span> Colour<span class="hl sym">.</span>red<span class="hl sym">;</span>
      <span class="hl sym">}</span>
   <span class="hl kwa">case</span> Colour<span class="hl sym">.</span>red<span class="hl sym">:</span>
      <span class="hl kwa">switch</span> <span class="hl sym">(</span>c2<span class="hl sym">)</span>
      <span class="hl sym">{</span>
      <span class="hl kwa">case</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">:</span>
         <span class="hl kwa">return</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">;</span>
      <span class="hl kwa">case</span> Colour<span class="hl sym">.</span>red<span class="hl sym">:</span>
         <span class="hl kwa">return</span> Colour<span class="hl sym">.</span>red<span class="hl sym">;</span>
      <span class="hl kwa">case</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">:</span>
         <span class="hl kwa">return</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">;</span>
      <span class="hl sym">}</span>
   <span class="hl kwa">case</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">:</span>
      <span class="hl kwa">switch</span> <span class="hl sym">(</span>c2<span class="hl sym">)</span>
      <span class="hl sym">{</span>
      <span class="hl kwa">case</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">:</span>
         <span class="hl kwa">return</span> Colour<span class="hl sym">.</span>red<span class="hl sym">;</span>
      <span class="hl kwa">case</span> Colour<span class="hl sym">.</span>red<span class="hl sym">:</span>
         <span class="hl kwa">return</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">;</span>
      <span class="hl kwa">case</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">:</span>
         <span class="hl kwa">return</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">;</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">throw new</span> <span class="hl kwd">Exception</span><span class="hl sym">(</span><span class="hl str">&quot;Invalid colour&quot;</span><span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwa">class</span> <span class="hl kwd">Future</span><span class="hl sym">(</span>T<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwa">private</span> T t <span class="hl sym">=</span> <span class="hl kwa">null</span><span class="hl sym">;</span>

   <span class="hl kwa">public</span> T <span class="hl kwd">getItem</span><span class="hl sym">()</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>t <span class="hl kwa">is null</span><span class="hl sym">)</span>
      <span class="hl sym">{</span>
         Thread<span class="hl sym">.</span><span class="hl kwd">yield</span><span class="hl sym">();</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">return</span> t<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl slc">// no synchronization necessary as assignment is atomic</span>
   <span class="hl kwa">public void</span> <span class="hl kwd">setItem</span><span class="hl sym">(</span>T t<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">this</span><span class="hl sym">.</span>t <span class="hl sym">=</span> t<span class="hl sym">;</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwa">class</span> Pair
<span class="hl sym">{</span>
   <span class="hl kwa">public</span> bool sameId<span class="hl sym">;</span>
   <span class="hl kwa">public</span> Colour colour<span class="hl sym">;</span>

   <span class="hl kwa">public this</span><span class="hl sym">(</span>bool sameId<span class="hl sym">,</span> Colour c<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">this</span><span class="hl sym">.</span>sameId <span class="hl sym">=</span> sameId<span class="hl sym">;</span>
      <span class="hl kwa">this</span><span class="hl sym">.</span>colour <span class="hl sym">=</span> c<span class="hl sym">;</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwa">class</span> MeetingPlace
<span class="hl sym">{</span>
<span class="hl kwa">private</span><span class="hl sym">:</span>
   <span class="hl kwa">int</span> meetingsLeft<span class="hl sym">;</span>
   Colour firstColour <span class="hl sym">=</span> Colour<span class="hl sym">.</span>Invalid<span class="hl sym">;</span>
   <span class="hl kwa">int</span> firstId <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   Future<span class="hl sym">!(</span>Pair<span class="hl sym">)</span> current<span class="hl sym">;</span>

   <span class="hl kwa">public this</span><span class="hl sym">(</span><span class="hl kwa">int</span> meetings<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">this</span><span class="hl sym">.</span>meetingsLeft <span class="hl sym">=</span> meetings<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">public</span> Pair <span class="hl kwd">meet</span><span class="hl sym">(</span><span class="hl kwa">int</span> id<span class="hl sym">,</span> Colour c<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      Future<span class="hl sym">!(</span>Pair<span class="hl sym">)</span> newPair<span class="hl sym">;</span>

      <span class="hl kwa">synchronized</span> <span class="hl sym">(</span><span class="hl kwa">this</span><span class="hl sym">)</span>
      <span class="hl sym">{</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>meetingsLeft <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span>
         <span class="hl sym">{</span>
            <span class="hl kwa">throw new</span> <span class="hl kwd">Exception</span><span class="hl sym">(</span><span class="hl str">&quot;Finished&quot;</span><span class="hl sym">);</span>
         <span class="hl sym">}</span>
         <span class="hl kwa">else</span>
         <span class="hl sym">{</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>firstColour <span class="hl sym">==</span> Colour<span class="hl sym">.</span>Invalid<span class="hl sym">)</span>
            <span class="hl sym">{</span>
               firstColour <span class="hl sym">=</span> c<span class="hl sym">;</span>
               firstId <span class="hl sym">=</span> id<span class="hl sym">;</span>
               current <span class="hl sym">=</span> <span class="hl kwa">new</span> Future<span class="hl sym">!(</span>Pair<span class="hl sym">)();</span>
            <span class="hl sym">}</span>
            <span class="hl kwa">else</span>
            <span class="hl sym">{</span>
               Colour newColour <span class="hl sym">=</span> <span class="hl kwd">doCompliment</span><span class="hl sym">(</span>c<span class="hl sym">,</span> firstColour<span class="hl sym">);</span>
               current<span class="hl sym">.</span><span class="hl kwd">setItem</span><span class="hl sym">(</span><span class="hl kwa">new</span> <span class="hl kwd">Pair</span><span class="hl sym">(</span>id <span class="hl sym">==</span> firstId<span class="hl sym">,</span> newColour<span class="hl sym">));</span>
               firstColour <span class="hl sym">=</span> Colour<span class="hl sym">.</span>Invalid<span class="hl sym">;</span>
               meetingsLeft<span class="hl sym">--;</span>
            <span class="hl sym">}</span>
            newPair <span class="hl sym">=</span> current<span class="hl sym">;</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">return</span> newPair<span class="hl sym">.</span><span class="hl kwd">getItem</span><span class="hl sym">();</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>



<span class="hl kwa">class</span> Creature <span class="hl sym">:</span> <span class="hl kwa">public</span> Thread
<span class="hl sym">{</span>
<span class="hl kwa">private</span><span class="hl sym">:</span>
   MeetingPlace place<span class="hl sym">;</span>
   <span class="hl kwa">int</span> count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">int</span> sameCount <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   Colour colour<span class="hl sym">;</span>
   <span class="hl kwa">int</span> id<span class="hl sym">;</span>

<span class="hl kwa">public</span><span class="hl sym">:</span>
   <span class="hl kwa">this</span><span class="hl sym">(</span>MeetingPlace place<span class="hl sym">,</span> Colour colour<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">super</span><span class="hl sym">(</span><span class="hl num">64</span><span class="hl sym">*</span><span class="hl num">1024</span><span class="hl sym">);</span> <span class="hl slc">//64KB stack for each thread</span>

      <span class="hl kwa">this</span><span class="hl sym">.</span>place <span class="hl sym">=</span> place<span class="hl sym">;</span>
      <span class="hl kwa">this</span><span class="hl sym">.</span>id <span class="hl sym">= ++</span>creatureID<span class="hl sym">;</span>
      <span class="hl kwa">this</span><span class="hl sym">.</span>colour <span class="hl sym">=</span> colour<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">override int</span> <span class="hl kwd">run</span><span class="hl sym">()</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">try</span>
      <span class="hl sym">{</span>
         <span class="hl kwa">while</span> <span class="hl sym">(</span><span class="hl kwa">true</span><span class="hl sym">)</span>
         <span class="hl sym">{</span>
            Pair p <span class="hl sym">=</span> place<span class="hl sym">.</span><span class="hl kwd">meet</span><span class="hl sym">(</span>id<span class="hl sym">,</span> colour<span class="hl sym">);</span>
            colour <span class="hl sym">=</span> p<span class="hl sym">.</span>colour<span class="hl sym">;</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>p<span class="hl sym">.</span>sameId<span class="hl sym">)</span>
               sameCount<span class="hl sym">++;</span>
            count<span class="hl sym">++;</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">catch</span> <span class="hl sym">(</span>Exception<span class="hl sym">) {}</span>

      <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">int</span> <span class="hl kwd">getCount</span><span class="hl sym">()</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">return</span> count<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   string <span class="hl kwd">getResult</span><span class="hl sym">()</span>
   <span class="hl sym">{</span>
      string <span class="hl kwc">ret</span> <span class="hl sym">=</span> std<span class="hl sym">.</span>string<span class="hl sym">.</span><span class="hl kwd">toString</span><span class="hl sym">(</span>count<span class="hl sym">);</span>
      <span class="hl kwc">ret</span> <span class="hl sym">~=</span> <span class="hl kwd">getNumber</span><span class="hl sym">(</span>sameCount<span class="hl sym">);</span>
      <span class="hl kwa">return</span> <span class="hl kwc">ret</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwa">void</span> <span class="hl kwd">run</span><span class="hl sym">(</span><span class="hl kwa">int</span> n<span class="hl sym">,</span> Colour<span class="hl sym">[]</span> colours <span class="hl sym">...)</span>
<span class="hl sym">{</span>
   MeetingPlace place <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">MeetingPlace</span><span class="hl sym">(</span>n<span class="hl sym">);</span>
   Creature<span class="hl sym">[]</span> creatures <span class="hl sym">=</span> <span class="hl kwa">new</span> Creature<span class="hl sym">[</span>colours<span class="hl sym">.</span>length<span class="hl sym">];</span>

   <span class="hl kwa">foreach</span> <span class="hl sym">(</span><span class="hl kwa">int</span> i<span class="hl sym">,</span> cl<span class="hl sym">;</span> colours<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwd">writef</span><span class="hl sym">(</span>ColourName<span class="hl sym">[</span>cl<span class="hl sym">],</span> <span class="hl str">&quot; &quot;</span><span class="hl sym">);</span>
      creatures<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">Creature</span><span class="hl sym">(</span>place<span class="hl sym">,</span> cl<span class="hl sym">);</span>
   <span class="hl sym">}</span>
   <span class="hl kwd">writefln</span><span class="hl sym">();</span>

   <span class="hl kwa">foreach</span> <span class="hl sym">(</span>c <span class="hl sym">;</span> creatures<span class="hl sym">)</span>
      c<span class="hl sym">.</span><span class="hl kwd">start</span><span class="hl sym">();</span>

   <span class="hl kwa">foreach</span> <span class="hl sym">(</span>t <span class="hl sym">;</span> creatures<span class="hl sym">)</span>
      t<span class="hl sym">.</span><span class="hl kwc">wait</span><span class="hl sym">();</span>

   <span class="hl kwa">int</span> total <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">foreach</span> <span class="hl sym">(</span>cr <span class="hl sym">;</span> creatures<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwd">writefln</span><span class="hl sym">(</span> cr<span class="hl sym">.</span><span class="hl kwd">getResult</span><span class="hl sym">() );</span>
      total <span class="hl sym">+=</span> cr<span class="hl sym">.</span><span class="hl kwd">getCount</span><span class="hl sym">();</span>
   <span class="hl sym">}</span>

   <span class="hl kwd">writefln</span><span class="hl sym">(</span><span class="hl kwd">getNumber</span><span class="hl sym">(</span>total<span class="hl sym">));</span>
   <span class="hl kwd">writefln</span><span class="hl sym">();</span>
<span class="hl sym">}</span>

<span class="hl kwa">char</span><span class="hl sym">[]</span> <span class="hl kwd">getNumber</span><span class="hl sym">(</span><span class="hl kwa">int</span> n<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwa">const char</span><span class="hl sym">[][</span><span class="hl num">10</span><span class="hl sym">]</span> NUMBERS <span class="hl sym">=</span>
   <span class="hl sym">[</span>
      <span class="hl str">&quot;zero&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;one&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;two&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;three&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;four&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;five&quot;</span><span class="hl sym">,</span>
      <span class="hl str">&quot;six&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;seven&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;eight&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;nine&quot;</span>
   <span class="hl sym">];</span>

   <span class="hl slc">//char[] st = to!(char[])(n);</span>

   string st <span class="hl sym">=</span>std<span class="hl sym">.</span>string<span class="hl sym">.</span><span class="hl kwd">toString</span><span class="hl sym">(</span>n<span class="hl sym">);</span>

   <span class="hl kwa">char</span><span class="hl sym">[]</span> <span class="hl kwc">ret</span><span class="hl sym">;</span>
   <span class="hl kwa">foreach</span> <span class="hl sym">(</span>c<span class="hl sym">;</span> st<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwc">ret</span> <span class="hl sym">~=</span> <span class="hl str">&quot; &quot;</span><span class="hl sym">;</span>
      <span class="hl kwc">ret</span> <span class="hl sym">~=</span> NUMBERS<span class="hl sym">[</span>c <span class="hl sym">-</span><span class="hl str">'0'</span><span class="hl sym">];</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">return</span> <span class="hl kwc">ret</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwa">void</span> <span class="hl kwd">printColours</span><span class="hl sym">(</span>Colour c1<span class="hl sym">,</span> Colour c2<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwd">writefln</span><span class="hl sym">(</span>ColourName<span class="hl sym">[</span>c1<span class="hl sym">],</span> <span class="hl str">&quot; + &quot;</span><span class="hl sym">,</span> ColourName<span class="hl sym">[</span>c2<span class="hl sym">],</span> <span class="hl str">&quot; -&gt; &quot;</span><span class="hl sym">,</span>
      ColourName<span class="hl sym">[</span><span class="hl kwd">doCompliment</span><span class="hl sym">(</span>c1<span class="hl sym">,</span> c2<span class="hl sym">)]);</span>
<span class="hl sym">}</span>

<span class="hl kwa">void</span> <span class="hl kwd">printColours</span><span class="hl sym">()</span>
<span class="hl sym">{</span>
   <span class="hl kwd">printColours</span><span class="hl sym">(</span>Colour<span class="hl sym">.</span>blue<span class="hl sym">,</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">);</span>
   <span class="hl kwd">printColours</span><span class="hl sym">(</span>Colour<span class="hl sym">.</span>blue<span class="hl sym">,</span> Colour<span class="hl sym">.</span>red<span class="hl sym">);</span>
   <span class="hl kwd">printColours</span><span class="hl sym">(</span>Colour<span class="hl sym">.</span>blue<span class="hl sym">,</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">);</span>
   <span class="hl kwd">printColours</span><span class="hl sym">(</span>Colour<span class="hl sym">.</span>red<span class="hl sym">,</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">);</span>
   <span class="hl kwd">printColours</span><span class="hl sym">(</span>Colour<span class="hl sym">.</span>red<span class="hl sym">,</span> Colour<span class="hl sym">.</span>red<span class="hl sym">);</span>
   <span class="hl kwd">printColours</span><span class="hl sym">(</span>Colour<span class="hl sym">.</span>red<span class="hl sym">,</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">);</span>
   <span class="hl kwd">printColours</span><span class="hl sym">(</span>Colour<span class="hl sym">.</span>yellow<span class="hl sym">,</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">);</span>
   <span class="hl kwd">printColours</span><span class="hl sym">(</span>Colour<span class="hl sym">.</span>yellow<span class="hl sym">,</span> Colour<span class="hl sym">.</span>red<span class="hl sym">);</span>
   <span class="hl kwd">printColours</span><span class="hl sym">(</span>Colour<span class="hl sym">.</span>yellow<span class="hl sym">,</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwa">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span>string<span class="hl sym">[]</span> args<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwa">int</span> n <span class="hl sym">=</span> <span class="hl num">600</span><span class="hl sym">;</span>
   <span class="hl kwa">try</span>
   <span class="hl sym">{</span>
      n <span class="hl sym">=</span> <span class="hl kwd">toInt</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]);</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">catch</span> <span class="hl sym">(</span>Exception<span class="hl sym">)   {}</span>

   <span class="hl kwd">printColours</span><span class="hl sym">();</span>
   <span class="hl kwd">writefln</span><span class="hl sym">();</span>

   <span class="hl kwd">run</span><span class="hl sym">(</span>n<span class="hl sym">,</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">,</span> Colour<span class="hl sym">.</span>red<span class="hl sym">,</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">);</span>
   <span class="hl kwd">run</span><span class="hl sym">(</span>n<span class="hl sym">,</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">,</span> Colour<span class="hl sym">.</span>red<span class="hl sym">,</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">,</span> Colour<span class="hl sym">.</span>red<span class="hl sym">,</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">,</span>
         Colour<span class="hl sym">.</span>blue<span class="hl sym">,</span> Colour<span class="hl sym">.</span>red<span class="hl sym">,</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">,</span> Colour<span class="hl sym">.</span>red<span class="hl sym">,</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">);</span>
<span class="hl sym">}</span>

