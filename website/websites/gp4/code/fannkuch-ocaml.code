<span class="com">(*</span>
<span class="com">   fannkuch.ml</span>
<span class="com"></span>
<span class="com">   Contributed by William Douglas Neumann.</span>
<span class="com">   Some ham-handed changes by Brent to fit into the test framework.</span>
<span class="com"></span>
<span class="com"> *)</span>

<span class="com">(*</span>
<span class="com">let count_flips arr =</span>
<span class="com">  let rec cfh fl =</span>
<span class="com">    let swap x y =</span>
<span class="com">      let t = Array.unsafe_get arr x in</span>
<span class="com">        Array.unsafe_set arr x (Array.unsafe_get arr y);</span>
<span class="com">        Array.unsafe_set arr y t in</span>
<span class="com">    let f = Array.unsafe_get arr 0 in</span>
<span class="com">    if f = 1 then fl else</span>
<span class="com">      begin</span>
<span class="com">        for i = 1 to (f lsr 1) do</span>
<span class="com">          swap (pred i) (f - i)</span>
<span class="com">        done;</span>
<span class="com">      cfh (succ fl)</span>
<span class="com">    end in</span>
<span class="com">  cfh 0;;</span>
<span class="com">*)</span>

<span class="kwa">let</span> count_flips arr <span class="sym">=</span>
  <span class="kwa">let rec</span> cfh fl <span class="sym">=</span>
    <span class="kwa">let</span> swap x y <span class="sym">=</span>
      <span class="kwa">let</span> t <span class="sym">=</span> arr.<span class="sym">(</span>x<span class="sym">)</span> <span class="kwa">in</span>
        arr.<span class="sym">(</span>x<span class="sym">) &lt;-</span> arr.<span class="sym">(</span>y<span class="sym">);</span>
        arr.<span class="sym">(</span>y<span class="sym">) &lt;-</span> t <span class="kwa">in</span>
    <span class="kwa">let</span> f <span class="sym">=</span> arr.<span class="sym">(</span><span class="num">0</span><span class="sym">)</span> <span class="kwa">in</span>
    <span class="kwa">if</span> f <span class="sym">=</span> <span class="num">1</span> <span class="kwa">then</span> fl <span class="kwa">else</span>
      <span class="kwa">begin</span>
        <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">to</span> <span class="sym">(</span>f <span class="kwa">lsr</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">do</span>
          swap <span class="sym">(</span>pred i<span class="sym">) (</span>f <span class="sym">-</span> i<span class="sym">)</span>
        <span class="kwa">done</span><span class="sym">;</span>
      cfh <span class="sym">(</span>succ fl<span class="sym">)</span>
    <span class="kwa">end in</span>
  cfh <span class="num">0</span><span class="sym">;;</span>

<span class="kwa">let</span> fannkuch n <span class="sym">=</span>
  <span class="kwa">let</span> pn <span class="sym">=</span> pred n <span class="kwa">in</span>
  <span class="kwa">let rec</span> fact n acc <span class="sym">=</span> <span class="kwa">if</span> n <span class="sym">&lt;</span> <span class="num">2</span> <span class="kwa">then</span> acc <span class="kwa">else</span> fact <span class="sym">(</span>pred n<span class="sym">) (</span>n<span class="sym">*</span>acc<span class="sym">)</span> <span class="kwa">in</span>
  <span class="kwa">let</span> p <span class="sym">=</span> Array.init n succ <span class="kwa">in</span>
  <span class="kwa">let</span> ctl <span class="sym">=</span> Array.make n <span class="num">0</span> <span class="kwa">in</span>
  <span class="kwa">let</span> gen3 <span class="sym">() =</span>
  <span class="kwa">let rec</span> ud_ctl i <span class="sym">=</span>
    <span class="kwa">if</span> i <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then</span>
      <span class="kwa">if</span> ctl.<span class="sym">(</span>i<span class="sym">) &lt;&gt;</span> i <span class="kwa">then</span> i
      <span class="kwa">else</span> <span class="sym">(</span>ctl.<span class="sym">(</span>i<span class="sym">) &lt;-</span> <span class="num">0</span><span class="sym">;</span> ud_ctl <span class="sym">(</span>pred i<span class="sym">))</span>
    <span class="kwa">else</span> <span class="num">0</span> <span class="kwa">in</span>
    <span class="kwa">let</span> i <span class="sym">=</span> ud_ctl <span class="sym">(</span>pred n<span class="sym">)</span> <span class="kwa">in</span>
    <span class="kwa">if</span> i <span class="sym">&lt;&gt;</span> <span class="num">0</span> <span class="kwa">then</span>
    <span class="kwa">begin</span>
      ctl.<span class="sym">(</span>i<span class="sym">) &lt;-</span> ctl.<span class="sym">(</span>i<span class="sym">) +</span> <span class="num">1</span><span class="sym">;</span>
      p.<span class="sym">(</span><span class="num">0</span><span class="sym">) &lt;-</span> <span class="num">1</span><span class="sym">;</span>
      <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> pred n <span class="kwa">do</span>
        p.<span class="sym">(</span>i<span class="sym">) &lt;-</span> p.<span class="sym">(</span>i <span class="sym">-</span> ctl.<span class="sym">(</span>i<span class="sym">));</span>
        p.<span class="sym">(</span>i <span class="sym">-</span> ctl.<span class="sym">(</span>i<span class="sym">)) &lt;-</span> i<span class="sym">+</span><span class="num">1</span><span class="sym">;</span>
      <span class="kwa">done</span><span class="sym">;</span>
    <span class="kwa">end in</span>
  <span class="kwa">let rec</span> fkh mx <span class="sym">=</span> <span class="kwa">function</span>
      <span class="sym">(-</span> <span class="num">1</span><span class="sym">) -&gt;</span> mx
    <span class="sym">|</span> i <span class="sym">-&gt;</span>
        fkh
          <span class="sym">(</span>gen3 <span class="sym">();</span>
           <span class="kwa">if</span> p.<span class="sym">(</span><span class="num">0</span><span class="sym">) =</span> <span class="num">1</span> <span class="sym">||</span> p.<span class="sym">(</span>pn<span class="sym">) =</span> n <span class="kwa">then</span> mx
           <span class="kwa">else</span> max mx <span class="sym">(</span>count_flips p<span class="sym">))</span>
          <span class="sym">(</span>pred i<span class="sym">)</span> <span class="kwa">in</span>
  fkh min_int <span class="sym">(</span>pred <span class="sym">(</span>fact n <span class="num">1</span><span class="sym">));;</span>

<span class="kwa">let</span> n <span class="sym">=</span> <span class="kwa">if</span> Array.length Sys.argv <span class="sym">&gt;</span> <span class="num">1</span> <span class="kwa">then</span> int_of_string Sys.argv.<span class="sym">(</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">else</span> <span class="num">1</span> <span class="kwa">in</span> Printf.printf <span class="str">&quot;Pfannkuchen(%d) = %d</span><span class="esc">\n</span><span class="str">&quot;</span> n <span class="sym">(</span>fannkuch n<span class="sym">)</span>
