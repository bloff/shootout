<span class="slc">-- {-# OPTIONS -O -fglasgow-exts -fbang-patterns -funbox-strict-fields -fexcess-precision -optc-O2 -optc-march=pentium4 -optc-mfpmath=sse -optc-msse2 #-}</span>
<span class="slc">--</span>
<span class="slc">-- The Computer Language Shootout</span>
<span class="slc">-- http:--shootout.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">-- Contributed by Don Stewart</span>
<span class="slc">--</span>

<span class="kwa">import</span> Monad
<span class="kwa">import</span> System
<span class="kwa">import</span> Text.Printf
<span class="kwa">import</span> Data.Array.IO
<span class="kwa">import</span> Data.Array.Base

main <span class="sym">=</span> getArgs <span class="sym">&gt;&gt;=</span> approximate . read . head <span class="sym">&gt;&gt;=</span> printf <span class="str">&quot;%.9f\n&quot;</span>

approximate n <span class="sym">=</span> <span class="kwa">do</span>
    u <span class="sym">&lt;-</span> newArray <span class="sym">(</span><span class="num">0</span><span class="sym">,</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> <span class="num">1</span> <span class="sym">::</span> IO <span class="sym">(</span>IOUArray <span class="kwb">Int Double</span><span class="sym">)</span>
    v <span class="sym">&lt;-</span> newArray <span class="sym">(</span><span class="num">0</span><span class="sym">,</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> <span class="num">0</span> <span class="sym">::</span> IO <span class="sym">(</span>IOUArray <span class="kwb">Int Double</span><span class="sym">)</span>
    sequence_ $ replicate <span class="num">10</span> $ multiplyAtAv n u v <span class="sym">&gt;&gt;</span> multiplyAtAv n v u

    <span class="kwa">let</span> loop <span class="sym">!</span>vbv <span class="sym">!</span>vv <span class="sym">!</span>i
            <span class="sym">|</span> i <span class="sym">&gt;=</span> n    <span class="sym">=</span> return <span class="sym">(</span>vbv<span class="sym">,</span>vv<span class="sym">)</span>
            <span class="sym">|</span> otherwise <span class="sym">=</span> <span class="kwa">do</span> ui <span class="sym">&lt;-</span> unsafeRead u i
                             vi <span class="sym">&lt;-</span> unsafeRead v i
                             loop <span class="sym">(</span>vbv <span class="sym">+</span> ui <span class="sym">*</span> vi<span class="sym">) (</span>vv <span class="sym">+</span> vi <span class="sym">*</span> vi<span class="sym">) (</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>
    <span class="sym">(</span>vbv<span class="sym">,</span>vv<span class="sym">) &lt;-</span> loop <span class="num">0 0 0</span>
    return $<span class="sym">!</span> sqrt <span class="sym">(</span>vbv<span class="sym">/</span>vv<span class="sym">)</span>

<span class="slc">-- return element i,j of infinite matrix A</span>
a i j <span class="sym">=</span> <span class="num">1</span> <span class="sym">/</span> fromIntegral <span class="sym">(</span>x<span class="sym">*(</span>x<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> `div` <span class="num">2</span> <span class="sym">+</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">where</span> x <span class="sym">=</span> i<span class="sym">+</span>j

<span class="slc">-- multiply vector v by matrix A */</span>
multiplyAv <span class="sym">!</span>n <span class="sym">!</span>v <span class="sym">!</span>av <span class="sym">=</span> loop <span class="num">0</span>
    <span class="kwa">where</span> loop i  <span class="sym">=</span> when <span class="sym">(</span>i <span class="sym">&lt;</span> n<span class="sym">)</span> $ <span class="kwa">do</span> avi <span class="sym">&lt;-</span> loop' i <span class="num">0 0</span>
                                      unsafeWrite av i avi <span class="sym">&gt;&gt;</span> loop <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>
          loop' <span class="sym">!</span>i <span class="sym">!</span>j <span class="sym">!</span>av <span class="sym">|</span> j <span class="sym">&gt;=</span> n    <span class="sym">=</span> return av
                          <span class="sym">|</span> otherwise <span class="sym">=</span> <span class="kwa">do</span> vj  <span class="sym">&lt;-</span> unsafeRead v j
                                           loop' i <span class="sym">(</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">) (</span>av <span class="sym">+</span> a i j <span class="sym">*</span> vj<span class="sym">)</span>

<span class="slc">-- multiply vector v by matrix A transposed</span>
multiplyAtv <span class="sym">!</span>n <span class="sym">!</span>v <span class="sym">!</span>atv <span class="sym">=</span> loop <span class="num">0</span>
    <span class="kwa">where</span> loop i <span class="sym">=</span> when <span class="sym">(</span>i <span class="sym">&lt;</span> n<span class="sym">)</span> $ <span class="kwa">do</span> atvi <span class="sym">&lt;-</span> loop' i <span class="num">0 0</span>
                                     unsafeWrite atv i atvi <span class="sym">&gt;&gt;</span> loop <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>
          loop' <span class="sym">!</span>i <span class="sym">!</span>j <span class="sym">!</span>atvi
                <span class="sym">|</span> j <span class="sym">&gt;=</span> n    <span class="sym">=</span> return atvi
                <span class="sym">|</span> otherwise <span class="sym">=</span> <span class="kwa">do</span> vj <span class="sym">&lt;-</span> unsafeRead v j
                                 loop' i <span class="sym">(</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">) (</span>atvi <span class="sym">+</span> a j i <span class="sym">*</span> vj<span class="sym">)</span>

<span class="slc">-- multiply vector v by matrix A and then by matrix A transposed */</span>
multiplyAtAv <span class="sym">!</span>n <span class="sym">!</span>v <span class="sym">!</span>atav <span class="sym">=</span> <span class="kwa">do</span>
    u  <span class="sym">&lt;-</span> newArray <span class="sym">(</span><span class="num">0</span><span class="sym">,</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> <span class="num">0</span> <span class="sym">::</span> IO <span class="sym">(</span>IOUArray <span class="kwb">Int Double</span><span class="sym">)</span>
    multiplyAv n v u <span class="sym">&gt;&gt;</span> multiplyAtv n u atav
