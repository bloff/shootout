<span class="com">&quot;  The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com"></span>
<span class="com">   To run: gst -QI /usr/share/gnu-smalltalk/gst.im binarytrees.st -a 12</span>
<span class="com">&quot;</span>
<span class="com"></span>
<span class="com">Object subclass: #TreeNode</span>
<span class="com">instanceVariableNames: 'left right item'</span>
<span class="com">classVariableNames: ''</span>
<span class="com">poolDictionaries: ''</span>
<span class="com">category: nil !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">!TreeNode class methodsFor: 'instance creation'!</span>
<span class="com"></span>
<span class="com">bottomUpTree: anItem depth: anInteger</span>
<span class="com">   ^(anInteger &gt; 0)</span>
<span class="com">      ifTrue: [</span>
<span class="com">         self</span>
<span class="com">            left: (self bottomUpTree: 2*anItem - 1 depth: anInteger - 1)</span>
<span class="com">            right: (self bottomUpTree: 2*anItem depth: anInteger - 1)</span>
<span class="com">            item: anItem</span>
<span class="com">         ]</span>
<span class="com">      ifFalse: [self left: nil right: nil item: anItem] !</span>
<span class="com"></span>
<span class="com">left: leftChild right: rightChild item: anItem</span>
<span class="com">   ^(super new) left: leftChild right: rightChild item: anItem ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">!TreeNode methodsFor: 'initialize-release'!</span>
<span class="com"></span>
<span class="com">left: leftChild right: rightChild item: anItem</span>
<span class="com">   left := leftChild.</span>
<span class="com">   right := rightChild.</span>
<span class="com">   item := anItem ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">!TreeNode methodsFor: 'accessing'!</span>
<span class="com"></span>
<span class="com">itemCheck</span>
<span class="com">   ^left isNil</span>
<span class="com">      ifTrue: [item] ifFalse: [item + (left itemCheck - right itemCheck)] ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">| minDepth n maxDepth stretchDepth check longLivedTree iterations |</span>
<span class="com">minDepth := 4.</span>
<span class="com">n := Smalltalk arguments first asInteger.</span>
<span class="com">maxDepth := minDepth + 2 max: n.</span>
<span class="com">stretchDepth := maxDepth + 1.</span>
<span class="com"></span>
<span class="com">check := (TreeNode bottomUpTree: 0 depth: stretchDepth) itemCheck.</span>
<span class="com">Transcript</span>
<span class="com">   show: 'stretch tree of depth '; show: stretchDepth printString; tab;</span>
<span class="com">   show: ' check: '; showCr: check printString.</span>
<span class="com"></span>
<span class="com">longLivedTree := TreeNode bottomUpTree: 0 depth: maxDepth.</span>
<span class="com">minDepth to: maxDepth by: 2 do: [:depth|</span>
<span class="com">   iterations := 1 bitShift: maxDepth - depth + minDepth.</span>
<span class="com"></span>
<span class="com">   check := 0.</span>
<span class="com">   1 to: iterations do: [:i|</span>
<span class="com">      check := check + (TreeNode bottomUpTree: i depth: depth) itemCheck.</span>
<span class="com">      check := check + (TreeNode bottomUpTree: -1*i depth: depth) itemCheck.</span>
<span class="com">   ].</span>
<span class="com">   Transcript</span>
<span class="com">      show: (2*iterations) printString; tab;</span>
<span class="com">      show: ' trees of depth '; show: depth printString; tab;</span>
<span class="com">      show: ' check: '; showCr: check printString.</span>
<span class="com">].</span>
<span class="com"></span>
<span class="com">Transcript</span>
<span class="com">   show: 'long lived tree of depth '; show: maxDepth printString; tab;</span>
<span class="com">   show: ' check: '; showCr: longLivedTree itemCheck  printString !</span>
<span class="com"></span>
