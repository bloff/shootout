<span class="hl com">/*</span>
<span class="hl com">** The Great Computer Language Shootout</span>
<span class="hl com">** http://shootout.alioth.debian.org/</span>
<span class="hl com">** contributed by Mike Pall</span>
<span class="hl com">**</span>
<span class="hl com">** compile with:</span>
<span class="hl com">**   gcc -O3 -fomit-frame-pointer -ffast-math -o partialsums partialsums.c -lm</span>
<span class="hl com">**   Adding -march=&lt;yourcpu&gt; may help, too.</span>
<span class="hl com">**   On a P4/K8 or later try adding: --march=&lt;yourcpu&gt; -mfpmath=sse -msse2</span>
<span class="hl com">*/</span>

<span class="hl dir">#include &lt;stdio.h&gt;</span>
<span class="hl dir">#include &lt;stdlib.h&gt;</span>
<span class="hl dir">#include &lt;math.h&gt;</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">**</span>argv<span class="hl sym">)</span>
<span class="hl sym">{</span>
  <span class="hl kwb">int</span> k<span class="hl sym">,</span> n <span class="hl sym">=</span> <span class="hl kwd">atoi</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]);</span>
  <span class="hl kwb">double</span> sum<span class="hl sym">;</span>

<span class="hl com">/*</span>
<span class="hl com">** Yes, I tried using a double as a primary or secondary loop variable.</span>
<span class="hl com">** But the x86 ABI requires a cleared x87 FPU stack before every call</span>
<span class="hl com">** (e.g. to sin()) which nullifies any performance gains.</span>
<span class="hl com">**</span>
<span class="hl com">** Combining all loops does not pay off because the x87 FPU has to shuffle</span>
<span class="hl com">** stack slots and/or runs out of registers. This may not be entirely true</span>
<span class="hl com">** for SSE2 with fully inlined FPU code (-ffast-math required). Dito for</span>
<span class="hl com">** other CPUs with a register-based FPU and a sane FP ABI.</span>
<span class="hl com">**</span>
<span class="hl com">** Auto vectorization may be a bit easier with separate loops, too.</span>
<span class="hl com">*/</span>
<span class="hl dir">#define kd ((double)k)</span>

  sum <span class="hl sym">=</span> <span class="hl num">0.0</span><span class="hl sym">;</span>
  <span class="hl kwa">for</span> <span class="hl sym">(</span>k <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> k <span class="hl sym">&lt;=</span> n<span class="hl sym">;</span> k<span class="hl sym">++) {</span>  <span class="hl com">/* pow(2.0/3.0, kd) inlined */</span>
    <span class="hl kwb">double</span> x <span class="hl sym">=</span> <span class="hl num">1.0</span><span class="hl sym">,</span> q <span class="hl sym">=</span> <span class="hl num">2.0</span><span class="hl sym">/</span><span class="hl num">3.0</span><span class="hl sym">;</span>
    <span class="hl kwb">int</span> j <span class="hl sym">=</span> k<span class="hl sym">;</span>
    <span class="hl kwa">for</span> <span class="hl sym">(;;) {</span> <span class="hl kwa">if</span> <span class="hl sym">(</span>j <span class="hl sym">&amp;</span> <span class="hl num">1</span><span class="hl sym">)</span> x <span class="hl sym">*=</span> q<span class="hl sym">;</span> <span class="hl kwa">if</span> <span class="hl sym">((</span>j <span class="hl sym">&gt;&gt;=</span> <span class="hl num">1</span><span class="hl sym">) ==</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">break</span><span class="hl sym">;</span> q <span class="hl sym">=</span> q<span class="hl sym">*</span>q<span class="hl sym">; }</span>
    sum <span class="hl sym">+=</span> x<span class="hl sym">;</span>
  <span class="hl sym">}</span>
  <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;%.9f</span><span class="hl esc">\t</span><span class="hl str">(2/3)^k</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> sum<span class="hl sym">);</span>

  sum <span class="hl sym">=</span> <span class="hl num">0.0</span><span class="hl sym">;</span>
  <span class="hl kwa">for</span> <span class="hl sym">(</span>k <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">;</span> k <span class="hl sym">&lt;=</span> n<span class="hl sym">;</span> k<span class="hl sym">++)</span> sum <span class="hl sym">+=</span> <span class="hl num">1</span><span class="hl sym">/</span><span class="hl kwd">sqrt</span><span class="hl sym">(</span>kd<span class="hl sym">);</span>  <span class="hl com">/* aka pow(kd, -0.5) */</span>
  <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;%.9f</span><span class="hl esc">\t</span><span class="hl str">k^-0.5</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> sum<span class="hl sym">);</span>

  sum <span class="hl sym">=</span> <span class="hl num">0.0</span><span class="hl sym">;</span>
  <span class="hl kwa">for</span> <span class="hl sym">(</span>k <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span> k <span class="hl sym">&lt;=</span> n<span class="hl sym">;</span> k<span class="hl sym">++)</span> sum <span class="hl sym">+=</span> <span class="hl num">1.0</span><span class="hl sym">/(</span>kd<span class="hl sym">*(</span>kd<span class="hl sym">+</span><span class="hl num">1.0</span><span class="hl sym">));</span>
  <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;%.9f</span><span class="hl esc">\t</span><span class="hl str">1/k(k+1)</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> sum<span class="hl sym">);</span>

  sum <span class="hl sym">=</span> <span class="hl num">0.0</span><span class="hl sym">;</span>
  <span class="hl kwa">for</span> <span class="hl sym">(</span>k <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span> k <span class="hl sym">&lt;=</span> n<span class="hl sym">;</span> k<span class="hl sym">++) {</span>
    <span class="hl kwb">double</span> sk <span class="hl sym">=</span> <span class="hl kwd">sin</span><span class="hl sym">(</span>kd<span class="hl sym">);</span>
    sum <span class="hl sym">+=</span> <span class="hl num">1.0</span><span class="hl sym">/(</span>kd<span class="hl sym">*</span>kd<span class="hl sym">*</span>kd<span class="hl sym">*</span>sk<span class="hl sym">*</span>sk<span class="hl sym">);</span>
  <span class="hl sym">}</span>
  <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;%.9f</span><span class="hl esc">\t</span><span class="hl str">Flint Hills</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> sum<span class="hl sym">);</span>

  sum <span class="hl sym">=</span> <span class="hl num">0.0</span><span class="hl sym">;</span>
  <span class="hl kwa">for</span> <span class="hl sym">(</span>k <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span> k <span class="hl sym">&lt;=</span> n<span class="hl sym">;</span> k<span class="hl sym">++) {</span>
    <span class="hl kwb">double</span> ck <span class="hl sym">=</span> <span class="hl kwd">cos</span><span class="hl sym">(</span>kd<span class="hl sym">);</span>
    sum <span class="hl sym">+=</span> <span class="hl num">1.0</span><span class="hl sym">/((</span>kd<span class="hl sym">*</span>kd<span class="hl sym">)*</span>kd<span class="hl sym">*</span>ck<span class="hl sym">*</span>ck<span class="hl sym">);</span>
  <span class="hl sym">}</span>
  <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;%.9f</span><span class="hl esc">\t</span><span class="hl str">Cookson Hills</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> sum<span class="hl sym">);</span>

  sum <span class="hl sym">=</span> <span class="hl num">0.0</span><span class="hl sym">;</span>
  <span class="hl kwa">for</span> <span class="hl sym">(</span>k <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span> k <span class="hl sym">&lt;=</span> n<span class="hl sym">;</span> k<span class="hl sym">++)</span> sum <span class="hl sym">+=</span> <span class="hl num">1.0</span><span class="hl sym">/</span>kd<span class="hl sym">;</span>
  <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;%.9f</span><span class="hl esc">\t</span><span class="hl str">Harmonic</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> sum<span class="hl sym">);</span>

  sum <span class="hl sym">=</span> <span class="hl num">0.0</span><span class="hl sym">;</span>
  <span class="hl kwa">for</span> <span class="hl sym">(</span>k <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span> k <span class="hl sym">&lt;=</span> n<span class="hl sym">;</span> k<span class="hl sym">++)</span> sum <span class="hl sym">+=</span> <span class="hl num">1.0</span><span class="hl sym">/(</span>kd<span class="hl sym">*</span>kd<span class="hl sym">);</span>
  <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;%.9f</span><span class="hl esc">\t</span><span class="hl str">Riemann Zeta</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> sum<span class="hl sym">);</span>

  sum <span class="hl sym">=</span> <span class="hl num">0.0</span><span class="hl sym">;</span>
  <span class="hl kwa">for</span> <span class="hl sym">(</span>k <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span> k <span class="hl sym">&lt;=</span> n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">;</span> k <span class="hl sym">+=</span> <span class="hl num">2</span><span class="hl sym">)</span> sum <span class="hl sym">+=</span> <span class="hl num">1.0</span><span class="hl sym">/</span>kd<span class="hl sym">;</span>
  <span class="hl kwa">for</span> <span class="hl sym">(</span>k <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">;</span> k <span class="hl sym">&lt;=</span> n<span class="hl sym">;</span> k <span class="hl sym">+=</span> <span class="hl num">2</span><span class="hl sym">)</span> sum <span class="hl sym">-=</span> <span class="hl num">1.0</span><span class="hl sym">/</span>kd<span class="hl sym">;</span>
  <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;%.9f</span><span class="hl esc">\t</span><span class="hl str">Alternating Harmonic</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> sum<span class="hl sym">);</span>

  sum <span class="hl sym">=</span> <span class="hl num">0.0</span><span class="hl sym">;</span>
  <span class="hl kwa">for</span> <span class="hl sym">(</span>k <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span> k <span class="hl sym">&lt;=</span> <span class="hl num">2</span><span class="hl sym">*</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">;</span> k <span class="hl sym">+=</span> <span class="hl num">4</span><span class="hl sym">)</span> sum <span class="hl sym">+=</span> <span class="hl num">1.0</span><span class="hl sym">/</span>kd<span class="hl sym">;</span>
  <span class="hl kwa">for</span> <span class="hl sym">(</span>k <span class="hl sym">=</span> <span class="hl num">3</span><span class="hl sym">;</span> k <span class="hl sym">&lt;=</span> <span class="hl num">2</span><span class="hl sym">*</span>n<span class="hl sym">;</span> k <span class="hl sym">+=</span> <span class="hl num">4</span><span class="hl sym">)</span> sum <span class="hl sym">-=</span> <span class="hl num">1.0</span><span class="hl sym">/</span>kd<span class="hl sym">;</span>
  <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;%.9f</span><span class="hl esc">\t</span><span class="hl str">Gregory</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> sum<span class="hl sym">);</span>

  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

