<span class="com">/*   The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   C version by Greg Buchholz</span>
<span class="com">   converted to C++ and modified by Paul Kitchin</span>
<span class="com">*/</span>

<span class="dir">#include &lt;complex&gt;</span>
<span class="dir">#include &lt;iostream&gt;</span>
<span class="dir">#include &lt;sstream&gt;</span>
<span class="dir">#include &lt;emmintrin.h&gt;</span>

<span class="kwc">typedef</span> __m128d sse_packed_doubles_t<span class="sym">;</span>

<span class="kwb">struct</span> sse_packed_doubles
<span class="sym">{</span>
   <span class="kwd">sse_packed_doubles</span><span class="sym">()</span>
   <span class="sym">{</span>
   <span class="sym">}</span>
   <span class="kwd">sse_packed_doubles</span><span class="sym">(</span><span class="kwb">double</span> first<span class="sym">,</span> <span class="kwb">double</span> second<span class="sym">)</span>
   <span class="sym">{</span>
      <span class="kwb">double</span> packed_values<span class="sym">[</span><span class="num">2</span><span class="sym">]</span> <span class="kwd">__attribute__</span><span class="sym">((</span><span class="kwd">aligned</span><span class="sym">(</span><span class="num">16</span><span class="sym">))) = {</span>first<span class="sym">,</span> second<span class="sym">};</span>
      values <span class="sym">=</span> <span class="kwd">_mm_load_pd</span><span class="sym">(</span>packed_values<span class="sym">);</span>
   <span class="sym">}</span>
   sse_packed_doubles <span class="sym">&amp;</span> <span class="kwd">assign</span><span class="sym">(</span><span class="kwb">double</span> first<span class="sym">,</span> <span class="kwb">double</span> second<span class="sym">)</span>
   <span class="sym">{</span>
      <span class="kwb">double</span> packed_values<span class="sym">[</span><span class="num">2</span><span class="sym">]</span> <span class="kwd">__attribute__</span><span class="sym">((</span><span class="kwd">aligned</span><span class="sym">(</span><span class="num">16</span><span class="sym">))) = {</span>first<span class="sym">,</span> second<span class="sym">};</span>
      values <span class="sym">=</span> <span class="kwd">_mm_load_pd</span><span class="sym">(</span>packed_values<span class="sym">);</span>
      <span class="kwa">return</span> <span class="sym">*</span><span class="kwa">this</span><span class="sym">;</span>
   <span class="sym">}</span>
   sse_packed_doubles <span class="sym">&amp;</span> <span class="kwd">assign_multiplied</span><span class="sym">(</span>sse_packed_doubles <span class="kwb">const</span> <span class="sym">&amp;</span> lhs<span class="sym">,</span> sse_packed_doubles <span class="kwb">const</span> <span class="sym">&amp;</span> rhs<span class="sym">)</span>
   <span class="sym">{</span>
      values <span class="sym">=</span> <span class="kwd">_mm_mul_pd</span><span class="sym">(</span>lhs<span class="sym">.</span>values<span class="sym">,</span> rhs<span class="sym">.</span>values<span class="sym">);</span>
      <span class="kwa">return</span> <span class="sym">*</span><span class="kwa">this</span><span class="sym">;</span>
   <span class="sym">}</span>
   sse_packed_doubles <span class="sym">&amp;</span> <span class="kwd">assign_subtracted</span><span class="sym">(</span>sse_packed_doubles <span class="kwb">const</span> <span class="sym">&amp;</span> lhs<span class="sym">,</span> sse_packed_doubles <span class="kwb">const</span> <span class="sym">&amp;</span> rhs<span class="sym">)</span>
   <span class="sym">{</span>
      values <span class="sym">=</span> <span class="kwd">_mm_sub_pd</span><span class="sym">(</span>lhs<span class="sym">.</span>values<span class="sym">,</span> rhs<span class="sym">.</span>values<span class="sym">);</span>
      <span class="kwa">return</span> <span class="sym">*</span><span class="kwa">this</span><span class="sym">;</span>
   <span class="sym">}</span>
   sse_packed_doubles_t values<span class="sym">;</span>
<span class="sym">};</span>

sse_packed_doubles <span class="sym">&amp;</span> <span class="kwc">operator</span><span class="sym">+=(</span>sse_packed_doubles <span class="sym">&amp;</span> lhs<span class="sym">,</span> sse_packed_doubles <span class="kwb">const</span> <span class="sym">&amp;</span> rhs<span class="sym">)</span>
<span class="sym">{</span>
   lhs<span class="sym">.</span>values <span class="sym">=</span> <span class="kwd">_mm_add_pd</span><span class="sym">(</span>lhs<span class="sym">.</span>values<span class="sym">,</span> rhs<span class="sym">.</span>values<span class="sym">);</span>
   <span class="kwa">return</span> lhs<span class="sym">;</span>
<span class="sym">}</span>

sse_packed_doubles <span class="sym">&amp;</span> <span class="kwc">operator</span><span class="sym">-=(</span>sse_packed_doubles <span class="sym">&amp;</span> lhs<span class="sym">,</span> sse_packed_doubles <span class="kwb">const</span> <span class="sym">&amp;</span> rhs<span class="sym">)</span>
<span class="sym">{</span>
   lhs<span class="sym">.</span>values <span class="sym">=</span> <span class="kwd">_mm_sub_pd</span><span class="sym">(</span>lhs<span class="sym">.</span>values<span class="sym">,</span> rhs<span class="sym">.</span>values<span class="sym">);</span>
   <span class="kwa">return</span> lhs<span class="sym">;</span>
<span class="sym">}</span>

sse_packed_doubles <span class="sym">&amp;</span> <span class="kwc">operator</span><span class="sym">*=(</span>sse_packed_doubles <span class="sym">&amp;</span> lhs<span class="sym">,</span> sse_packed_doubles <span class="kwb">const</span> <span class="sym">&amp;</span> rhs<span class="sym">)</span>
<span class="sym">{</span>
   lhs<span class="sym">.</span>values <span class="sym">=</span> <span class="kwd">_mm_mul_pd</span><span class="sym">(</span>lhs<span class="sym">.</span>values<span class="sym">,</span> rhs<span class="sym">.</span>values<span class="sym">);</span>
   <span class="kwa">return</span> lhs<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">struct</span> sse_packed_complex
<span class="sym">{</span>
   <span class="kwb">void</span> <span class="kwd">values</span><span class="sym">(</span><span class="kwb">double</span> <span class="sym">*</span> <span class="kwb">const</span> values<span class="sym">)</span> <span class="kwb">const</span>
   <span class="sym">{</span>
      <span class="kwd">_mm_store_pd</span><span class="sym">(</span>values<span class="sym">,</span> real<span class="sym">.</span>values<span class="sym">);</span>
      <span class="kwd">_mm_store_pd</span><span class="sym">(</span>values <span class="sym">+</span> <span class="num">2</span><span class="sym">,</span> imaginary<span class="sym">.</span>values<span class="sym">);</span>
   <span class="sym">}</span>
   sse_packed_doubles real<span class="sym">;</span>
   sse_packed_doubles imaginary<span class="sym">;</span>
<span class="sym">};</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">* *</span> argv<span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwb">char</span> bit_number <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="kwb">char</span> byte_accumulator <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="kwb">unsigned int const</span> iterations <span class="sym">=</span> <span class="num">50</span><span class="sym">;</span>
   <span class="kwb">double const</span> limit <span class="sym">=</span> <span class="num">2.0</span> <span class="sym">*</span> <span class="num">2.0</span><span class="sym">;</span>

   std<span class="sym">::</span>ios_base<span class="sym">::</span><span class="kwd">sync_with_stdio</span><span class="sym">(</span><span class="kwa">false</span><span class="sym">);</span>
   <span class="kwa">if</span> <span class="sym">(</span>argc <span class="sym">!=</span> <span class="num">2</span><span class="sym">)</span>
   <span class="sym">{</span>
      std<span class="sym">::</span>cerr <span class="sym">&lt;&lt;</span> <span class="str">&quot;usage: mandlebrot &lt;n&gt;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
      <span class="kwa">return</span> <span class="num">1</span><span class="sym">;</span>
   <span class="sym">}</span>
   <span class="kwb">unsigned int</span> dimension<span class="sym">;</span>
   <span class="sym">{</span>
      std<span class="sym">::</span>stringstream <span class="kwd">convertor</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span>
      <span class="kwa">if</span> <span class="sym">(!(</span>convertor <span class="sym">&gt;&gt;</span> dimension<span class="sym">) || !</span>convertor<span class="sym">.</span><span class="kwd">eof</span><span class="sym">())</span>
      <span class="sym">{</span>
         std<span class="sym">::</span>cerr <span class="sym">&lt;&lt;</span> <span class="str">&quot;usage: mandlebrot &lt;n&gt;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
         std<span class="sym">::</span>cerr <span class="sym">&lt;&lt;</span> <span class="str">&quot;   n must be an integer</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
         <span class="kwa">return</span> <span class="num">1</span><span class="sym">;</span>
      <span class="sym">}</span>
   <span class="sym">}</span>

   std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">&lt;&lt;</span> dimension <span class="sym">&lt;&lt;</span> <span class="str">&quot; &quot;</span> <span class="sym">&lt;&lt;</span> dimension <span class="sym">&lt;&lt;</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;</span>

   sse_packed_complex Z<span class="sym">;</span>
   sse_packed_complex C<span class="sym">;</span>
   sse_packed_complex Z_components_squared<span class="sym">;</span>
   sse_packed_doubles <span class="kwd">one</span><span class="sym">(</span><span class="num">1.0</span><span class="sym">,</span> <span class="num">1.0</span><span class="sym">);</span>
   sse_packed_doubles <span class="kwd">one_point_five</span><span class="sym">(</span><span class="num">1.5</span><span class="sym">,</span> <span class="num">1.5</span><span class="sym">);</span>
   sse_packed_doubles <span class="kwd">two</span><span class="sym">(</span><span class="num">2.0</span><span class="sym">,</span> <span class="num">2.0</span><span class="sym">);</span>
   <span class="kwb">double</span> Z_squared_values<span class="sym">[</span><span class="num">4</span><span class="sym">]</span> <span class="kwd">__attribute__</span><span class="sym">((</span><span class="kwd">aligned</span><span class="sym">(</span><span class="num">16</span><span class="sym">)));</span>
   <span class="kwa">for</span>  <span class="sym">(</span><span class="kwb">double</span> y <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> y <span class="sym">&lt;</span> dimension<span class="sym">; ++</span>y<span class="sym">)</span>
   <span class="sym">{</span>
      C<span class="sym">.</span>imaginary<span class="sym">.</span><span class="kwd">assign</span><span class="sym">(</span>y <span class="sym">/ (</span>dimension <span class="sym">/</span> <span class="num">2</span><span class="sym">),</span> y <span class="sym">/ (</span>dimension <span class="sym">/</span> <span class="num">2</span><span class="sym">));</span>
      C<span class="sym">.</span>imaginary <span class="sym">-=</span> one<span class="sym">;</span>
      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">double</span> x <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> x <span class="sym">&lt;</span> dimension<span class="sym">;</span> x <span class="sym">+=</span> <span class="num">2</span><span class="sym">)</span>
      <span class="sym">{</span>
         C<span class="sym">.</span>real<span class="sym">.</span><span class="kwd">assign</span><span class="sym">(</span>x <span class="sym">/ (</span>dimension <span class="sym">/</span> <span class="num">2</span><span class="sym">), (</span>x <span class="sym">+</span> <span class="num">1.0</span><span class="sym">) / (</span>dimension <span class="sym">/</span> <span class="num">2</span><span class="sym">));</span>
         C<span class="sym">.</span>real <span class="sym">-=</span> one_point_five<span class="sym">;</span>
         Z<span class="sym">.</span>imaginary <span class="sym">=</span> C<span class="sym">.</span>imaginary<span class="sym">;</span>
         Z<span class="sym">.</span>real <span class="sym">=</span> C<span class="sym">.</span>real<span class="sym">;</span>
         Z_components_squared<span class="sym">.</span>imaginary<span class="sym">.</span><span class="kwd">assign_multiplied</span><span class="sym">(</span>Z<span class="sym">.</span>imaginary<span class="sym">,</span> Z<span class="sym">.</span>imaginary<span class="sym">);</span>
         Z_components_squared<span class="sym">.</span>real<span class="sym">.</span><span class="kwd">assign_multiplied</span><span class="sym">(</span>Z<span class="sym">.</span>real<span class="sym">,</span> Z<span class="sym">.</span>real<span class="sym">);</span>
         Z_components_squared<span class="sym">.</span><span class="kwd">values</span><span class="sym">(</span>Z_squared_values<span class="sym">);</span>

         <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">unsigned int</span> i <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> i <span class="sym">&lt;</span> iterations <span class="sym">&amp;&amp; (</span>Z_squared_values<span class="sym">[</span><span class="num">0</span><span class="sym">] +</span> Z_squared_values<span class="sym">[</span><span class="num">2</span><span class="sym">] &lt;=</span> limit <span class="sym">||</span> Z_squared_values<span class="sym">[</span><span class="num">1</span><span class="sym">] +</span> Z_squared_values<span class="sym">[</span><span class="num">3</span><span class="sym">] &lt;=</span> limit<span class="sym">); ++</span>i<span class="sym">)</span>
         <span class="sym">{</span>
            Z<span class="sym">.</span>imaginary <span class="sym">*=</span> Z<span class="sym">.</span>real<span class="sym">;</span>
            Z<span class="sym">.</span>imaginary <span class="sym">*=</span> two<span class="sym">;</span>
            Z<span class="sym">.</span>imaginary <span class="sym">+=</span> C<span class="sym">.</span>imaginary<span class="sym">;</span>
            Z<span class="sym">.</span>real<span class="sym">.</span><span class="kwd">assign_subtracted</span><span class="sym">(</span>Z_components_squared<span class="sym">.</span>real<span class="sym">,</span> Z_components_squared<span class="sym">.</span>imaginary<span class="sym">);</span>
            Z<span class="sym">.</span>real <span class="sym">+=</span> C<span class="sym">.</span>real<span class="sym">;</span>
            Z_components_squared<span class="sym">.</span>imaginary<span class="sym">.</span><span class="kwd">assign_multiplied</span><span class="sym">(</span>Z<span class="sym">.</span>imaginary<span class="sym">,</span> Z<span class="sym">.</span>imaginary<span class="sym">);</span>
            Z_components_squared<span class="sym">.</span>real<span class="sym">.</span><span class="kwd">assign_multiplied</span><span class="sym">(</span>Z<span class="sym">.</span>real<span class="sym">,</span> Z<span class="sym">.</span>real<span class="sym">);</span>
            Z_components_squared<span class="sym">.</span><span class="kwd">values</span><span class="sym">(</span>Z_squared_values<span class="sym">);</span>
         <span class="sym">}</span>
         byte_accumulator <span class="sym">= (</span>byte_accumulator <span class="sym">*</span> <span class="num">4</span><span class="sym">) | ((</span>Z_squared_values<span class="sym">[</span><span class="num">0</span><span class="sym">] +</span> Z_squared_values<span class="sym">[</span><span class="num">2</span><span class="sym">] &lt;=</span> limit<span class="sym">) *</span> <span class="num">2</span><span class="sym">) | (</span>Z_squared_values<span class="sym">[</span><span class="num">1</span><span class="sym">] +</span> Z_squared_values<span class="sym">[</span><span class="num">3</span><span class="sym">] &lt;=</span> limit<span class="sym">);</span>

         bit_number <span class="sym">+=</span> <span class="num">2</span><span class="sym">;</span>
         <span class="kwa">if</span> <span class="sym">(</span>bit_number <span class="sym">==</span> <span class="num">8</span><span class="sym">)</span>
         <span class="sym">{</span>
            std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> byte_accumulator<span class="sym">;</span>
            bit_number <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
            byte_accumulator <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
         <span class="sym">}</span>
         <span class="kwa">else if</span> <span class="sym">(</span>x <span class="sym">==</span> dimension <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span>
         <span class="sym">{</span>
            byte_accumulator <span class="sym">&lt;&lt;=</span> <span class="num">8</span> <span class="sym">- (</span>dimension <span class="sym">&amp;</span> <span class="num">7</span><span class="sym">);</span>
            std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> byte_accumulator<span class="sym">;</span>
            bit_number <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
            byte_accumulator <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
         <span class="sym">}</span>
      <span class="sym">}</span>
   <span class="sym">}</span>
<span class="sym">}</span>
