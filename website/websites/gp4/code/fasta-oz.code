<span class="slc">% ----------------------------------------------------------------------</span>
<span class="slc">% The Great Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">%</span>
<span class="slc">% IUB and HOMOSAPIEN data encoded as lists of tuples. This approach is</span>
<span class="slc">% much slower than encoding data as records [alternate code shown within</span>
<span class="slc">% comment markers] but is used because of the need to keep physical</span>
<span class="slc">% order for the building of cumulative frequency tables.</span>
<span class="slc">%</span>
<span class="slc">% Contributed by Anthony Borla</span>
<span class="slc">% ----------------------------------------------------------------------</span>

<span class="kwa">functor</span>

<span class="kwa">import</span>
  System<span class="sym">(</span>showInfo<span class="sym">)</span> Application<span class="sym">(</span>exit getArgs<span class="sym">)</span> Open<span class="sym">(</span>file text<span class="sym">)</span>

<span class="kwa">define</span>

  <span class="kwa">class</span> TextFile_
    <span class="kwa">from</span> Open<span class="sym">.</span>file Open<span class="sym">.</span>text
  <span class="kwa">end</span>

<span class="slc">% ------------- %</span>

  ALU <span class="sym">=</span>
    <span class="sym">{</span>ByteString<span class="sym">.</span>make
      <span class="sym">{</span>VirtualString<span class="sym">.</span>toString
        &quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot; <span class="sym">#</span>
        &quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot; <span class="sym">#</span>
        &quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot; <span class="sym">#</span>
        &quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot; <span class="sym">#</span>
        &quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot; <span class="sym">#</span>
        &quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot; <span class="sym">#</span>
        &quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;<span class="sym">}}</span>

<span class="slc">%</span>
<span class="slc">%  IUB =</span>
<span class="slc">%    freqs(&amp;a:0.27 &amp;c:0.12 &amp;g:0.12 &amp;t:0.27 &amp;B:0.02</span>
<span class="slc">%          &amp;D:0.02 &amp;H:0.02 &amp;K:0.02 &amp;M:0.02 &amp;N:0.02</span>
<span class="slc">%          &amp;R:0.02 &amp;S:0.02 &amp;V:0.02 &amp;W:0.02 &amp;Y:0.02)</span>
<span class="slc">%</span>
<span class="slc">%</span>
<span class="slc">%  HOMOSAPIEN =</span>
<span class="slc">%    freqs(&amp;a:0.3029549426680 &amp;c:0.1979883004921</span>
<span class="slc">%          &amp;g:0.1975473066391 &amp;t:0.3015094502008)</span>
<span class="slc">%</span>

<span class="slc">% ------------- %</span>

<span class="slc">%</span>
<span class="slc">%  fun {MakeCumulativeTable FrequencyTable}</span>
<span class="slc">%    CumulativeValue = {NewCell 0.0}</span>
<span class="slc">%    CumulativeTable = {Record.clone FrequencyTable}</span>
<span class="slc">%  in</span>
<span class="slc">%    for Key in {Arity FrequencyTable} do</span>
<span class="slc">%      CumulativeValue := &#64;CumulativeValue + FrequencyTable.Key</span>
<span class="slc">%      CumulativeTable.Key = &#64;CumulativeValue</span>
<span class="slc">%    end</span>
<span class="slc">%    CumulativeTable</span>
<span class="slc">%  end</span>
<span class="slc">%</span>

  IUB <span class="sym">= [&amp;</span>a<span class="sym">#</span><span class="num">0.27</span> <span class="sym">&amp;</span>c<span class="sym">#</span><span class="num">0.12</span> <span class="sym">&amp;</span>g<span class="sym">#</span><span class="num">0.12</span> <span class="sym">&amp;</span>t<span class="sym">#</span><span class="num">0.27</span> <span class="sym">&amp;</span>B<span class="sym">#</span><span class="num">0.02</span>
         <span class="sym">&amp;</span>D<span class="sym">#</span><span class="num">0.02</span> <span class="sym">&amp;</span>H<span class="sym">#</span><span class="num">0.02</span> <span class="sym">&amp;</span>K<span class="sym">#</span><span class="num">0.02</span> <span class="sym">&amp;</span>M<span class="sym">#</span><span class="num">0.02</span> <span class="sym">&amp;</span>N<span class="sym">#</span><span class="num">0.02</span>
         <span class="sym">&amp;</span>R<span class="sym">#</span><span class="num">0.02</span> <span class="sym">&amp;</span>S<span class="sym">#</span><span class="num">0.02</span> <span class="sym">&amp;</span>V<span class="sym">#</span><span class="num">0.02</span> <span class="sym">&amp;</span>W<span class="sym">#</span><span class="num">0.02</span> <span class="sym">&amp;</span>Y<span class="sym">#</span><span class="num">0.02</span><span class="sym">]</span>

  HOMOSAPIEN <span class="sym">= [&amp;</span>a<span class="sym">#</span><span class="num">0.3029549426680</span> <span class="sym">&amp;</span>c<span class="sym">#</span><span class="num">0.1979883004921</span>
                <span class="sym">&amp;</span>g<span class="sym">#</span><span class="num">0.1975473066391</span> <span class="sym">&amp;</span>t<span class="sym">#</span><span class="num">0.3015094502008</span><span class="sym">]</span>

<span class="slc">% ------------- %</span>

  <span class="kwa">fun</span> <span class="sym">{</span>MakeCumulativeTable FrequencyTable<span class="sym">}</span>
    CumulativeValue <span class="sym">= {</span>NewCell <span class="num">0.0</span><span class="sym">}</span>
    CumulativeTable <span class="sym">= {</span>NewCell nil<span class="sym">}</span>
  <span class="kwa">in</span>
    <span class="kwa">for</span> Key<span class="sym">#</span>Value <span class="kwa">in</span> FrequencyTable do
      CumulativeValue <span class="sym">:= &#64;</span>CumulativeValue <span class="sym">+</span> Value
      CumulativeTable <span class="sym">:=</span> Key<span class="sym">#&#64;</span>CumulativeValue<span class="sym">|&#64;</span>CumulativeTable
    <span class="kwa">end</span>
    <span class="sym">{</span>List<span class="sym">.</span>reverse <span class="sym">&#64;</span>CumulativeTable<span class="sym">}</span>
  <span class="kwa">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwa">fun</span> <span class="sym">{</span>NewFasta OUT<span class="sym">}</span>

    SEGMARKER <span class="sym">=</span> &quot;<span class="sym">&gt;</span>&quot;  LF <span class="sym">= &amp;\</span><span class="num">012</span>

    <span class="slc">% ------------- %</span>

    <span class="kwa">local</span>
      Random <span class="sym">= {</span>NewRandom <span class="num">42</span><span class="sym">}</span>
    <span class="kwa">in</span>
      <span class="kwa">fun</span> <span class="sym">{</span>SelectRandom CumulativeTable<span class="sym">}</span>
        RValue <span class="sym">= {</span>Random<span class="sym">.</span>next <span class="num">1.0</span><span class="sym">}</span>
      <span class="kwa">in</span>
        <span class="slc">%</span>
        <span class="slc">% for Key in {Arity CumulativeTable} return:RETURN do</span>
        <span class="slc">%   if RValue =&lt; CumulativeTable.Key then {RETURN Key} end</span>
        <span class="slc">% end</span>
        <span class="slc">%</span>

        <span class="kwa">for</span> Key<span class="sym">#</span>Value <span class="kwa">in</span> CumulativeTable return<span class="sym">:</span>RETURN do
          <span class="kwa">if</span> RValue <span class="sym">=&lt;</span> Value <span class="kwa">then</span> <span class="sym">{</span>RETURN Key<span class="sym">}</span> <span class="kwa">end</span>
        <span class="kwa">end</span>

      <span class="kwa">end</span>
    <span class="kwa">end</span>

    <span class="slc">% ------------- %</span>

    <span class="kwa">proc</span> <span class="sym">{</span>RepeatFasta Id Desc N_ Sequence LineLength<span class="sym">}</span>
      K <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span>  M <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span>  SeqLen <span class="sym">= {</span>ByteString<span class="sym">.</span>length Sequence<span class="sym">}</span>
    <span class="kwa">in</span>
      <span class="sym">{</span>OUT putS<span class="sym">({</span>VirtualString<span class="sym">.</span>toString SEGMARKER <span class="sym">#</span> Id <span class="sym">#</span> &quot; &quot; <span class="sym">#</span> Desc<span class="sym">})}</span>

      <span class="kwa">for</span> N <span class="kwa">in</span> N_<span class="sym">;(</span>N <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">);(</span>N <span class="sym">-</span> LineLength<span class="sym">)</span> do
        M <span class="sym">:=</span> <span class="kwa">if</span> N <span class="sym">&lt;</span> LineLength <span class="kwa">then</span> N <span class="kwa">else</span> LineLength <span class="kwa">end</span>
        <span class="kwa">for</span> I <span class="kwa">in</span> <span class="num">0</span><span class="sym">;(</span>I <span class="sym">&lt; &#64;</span>M<span class="sym">);(</span>I <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span> do
          <span class="kwa">if</span> <span class="sym">&#64;</span>K <span class="sym">==</span> SeqLen <span class="kwa">then</span> K <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">end</span>
          <span class="sym">{</span>OUT putC<span class="sym">({</span>ByteString<span class="sym">.</span>get Sequence <span class="sym">&#64;</span>K<span class="sym">})}</span>
          K <span class="sym">:= &#64;</span>K <span class="sym">+</span> <span class="num">1</span>
        <span class="kwa">end</span>
        <span class="sym">{</span>OUT putC<span class="sym">(</span>LF<span class="sym">)}</span>
      <span class="kwa">end</span>
    <span class="kwa">end</span>

    <span class="slc">% ------------- %</span>

    <span class="kwa">proc</span> <span class="sym">{</span>RandomFasta Id Desc N_ CumulativeTable LineLength<span class="sym">}</span>
      M <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span>
    <span class="kwa">in</span>
      <span class="sym">{</span>OUT putS<span class="sym">({</span>VirtualString<span class="sym">.</span>toString SEGMARKER <span class="sym">#</span> Id <span class="sym">#</span> &quot; &quot; <span class="sym">#</span> Desc<span class="sym">})}</span>

      <span class="kwa">for</span> N <span class="kwa">in</span> N_<span class="sym">;(</span>N <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">);(</span>N <span class="sym">-</span> LineLength<span class="sym">)</span> do
        M <span class="sym">:=</span> <span class="kwa">if</span> N <span class="sym">&lt;</span> LineLength <span class="kwa">then</span> N <span class="kwa">else</span> LineLength <span class="kwa">end</span>
        <span class="kwa">for</span> I <span class="kwa">in</span> <span class="num">0</span><span class="sym">;(</span>I <span class="sym">&lt; &#64;</span>M<span class="sym">);(</span>I <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span> do
          <span class="sym">{</span>OUT putC<span class="sym">({</span>SelectRandom CumulativeTable<span class="sym">})}</span>
        <span class="kwa">end</span>
        <span class="sym">{</span>OUT putC<span class="sym">(</span>LF<span class="sym">)}</span>
      <span class="kwa">end</span>
    <span class="kwa">end</span>

    <span class="slc">% ------------- %</span>

  <span class="kwa">in</span>
    ops<span class="sym">(</span>randomFasta<span class="sym">:</span>RandomFasta repeatFasta<span class="sym">:</span>RepeatFasta<span class="sym">)</span>
  <span class="kwa">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwa">fun</span> <span class="sym">{</span>NewRandom Seed<span class="sym">}</span>
    <span class="kwa">local</span>
      IA <span class="sym">=</span> <span class="num">3877</span> IC <span class="sym">=</span> <span class="num">29573</span> IM <span class="sym">=</span> <span class="num">139968</span>
      Last <span class="sym">= {</span>NewCell Seed<span class="sym">}</span>
    <span class="kwa">in</span>
      <span class="kwa">fun</span> <span class="sym">{</span>Next Max<span class="sym">}</span>
        Last <span class="sym">:= (&#64;</span>Last <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">)</span> mod IM
        Max <span class="sym">* {</span>Int<span class="sym">.</span>toFloat <span class="sym">&#64;</span>Last<span class="sym">} / {</span>Int<span class="sym">.</span>toFloat IM<span class="sym">}</span>
      <span class="kwa">end</span>
    <span class="kwa">end</span>
  <span class="kwa">in</span>
    ops<span class="sym">(</span>next<span class="sym">:</span>Next<span class="sym">)</span>
  <span class="kwa">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwa">fun</span> <span class="sym">{</span>CmdlNArg Nth Default<span class="sym">}</span>
    N Nt <span class="kwa">in</span>
    <span class="kwa">try</span>
      Nt <span class="sym">= {</span>String<span class="sym">.</span>toInt <span class="sym">{</span>Application<span class="sym">.</span>getArgs plain<span class="sym">}.</span>Nth<span class="sym">}</span>
      N <span class="sym">=</span> <span class="kwa">if</span> Nt <span class="sym">&lt;</span> Default <span class="kwa">then</span> Default <span class="kwa">else</span> Nt <span class="kwa">end</span>
    <span class="kwa">catch</span> error<span class="sym">(...)</span> <span class="kwa">then</span>
      N <span class="sym">=</span> Default
    <span class="kwa">end</span>
    N
  <span class="kwa">end</span>

<span class="slc">% ------------- %</span>

  N Fasta <span class="sym">= {</span>NewFasta <span class="sym">{</span>New TextFile_ init<span class="sym">(</span>name<span class="sym">:</span>stdout<span class="sym">)}}</span>

<span class="slc">% ------------- %</span>

<span class="kwa">in</span>
  N <span class="sym">= {</span>CmdlNArg <span class="num">1 1</span><span class="sym">}</span>

  <span class="sym">{</span>Fasta<span class="sym">.</span>repeatFasta &quot;ONE&quot; &quot;Homo sapiens alu&quot; <span class="sym">(</span>N <span class="sym">*</span> <span class="num">2</span><span class="sym">)</span> ALU <span class="num">60</span><span class="sym">}</span>

  <span class="sym">{</span>Fasta<span class="sym">.</span>randomFasta &quot;TWO&quot; &quot;IUB ambiguity codes&quot; <span class="sym">(</span>N <span class="sym">*</span> <span class="num">3</span><span class="sym">)</span>
    <span class="sym">{</span>MakeCumulativeTable IUB<span class="sym">}</span> <span class="num">60</span><span class="sym">}</span>

  <span class="sym">{</span>Fasta<span class="sym">.</span>randomFasta &quot;THREE&quot; &quot;Homo sapiens frequency&quot; <span class="sym">(</span>N <span class="sym">*</span> <span class="num">5</span><span class="sym">)</span>
    <span class="sym">{</span>MakeCumulativeTable HOMOSAPIEN<span class="sym">}</span> <span class="num">60</span><span class="sym">}</span>

  <span class="sym">{</span>Application<span class="sym">.</span>exit <span class="num">0</span><span class="sym">}</span>
<span class="kwa">end</span>

