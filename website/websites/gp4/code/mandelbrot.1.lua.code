<span class="slc">-- The Great Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">-- contributed by Isaac Gouy</span>

<span class="kwa">local</span> width <span class="sym">=</span> <span class="kwa">tonumber</span><span class="sym">(</span>arg <span class="kwa">and</span> arg<span class="sym">[</span><span class="num">1</span><span class="sym">])</span> <span class="kwa">or</span> <span class="num">100</span>
<span class="kwa">local</span> height <span class="sym">=</span> width
<span class="kwa">local</span> m<span class="sym">,</span> bits<span class="sym">,</span> bitnum<span class="sym">,</span> limit2 <span class="sym">=</span> <span class="num">50</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">4.0</span>
<span class="kwa">local</span> isOverLimit <span class="sym">=</span> false
<span class="kwa">local</span> Zr<span class="sym">,</span> Zi<span class="sym">,</span> Cr<span class="sym">,</span> Ci<span class="sym">,</span> Tr<span class="sym">,</span> Ti

io.<span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> width<span class="sym">,</span> <span class="str">&quot; &quot;</span><span class="sym">,</span> height<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>

<span class="kwa">for</span> y<span class="sym">=</span><span class="num">0</span><span class="sym">,</span>height<span class="sym">-</span><span class="num">1</span> <span class="kwa">do</span>
   <span class="kwa">for</span> x<span class="sym">=</span><span class="num">0</span><span class="sym">,</span>width<span class="sym">-</span><span class="num">1</span> <span class="kwa">do</span>

      Zr<span class="sym">,</span> Zi <span class="sym">=</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span>
      Cr <span class="sym">=</span> <span class="num">2</span><span class="sym">*</span>x <span class="sym">/</span> width <span class="sym">-</span> <span class="num">1.5</span>
      Ci <span class="sym">=</span> <span class="num">2</span><span class="sym">*</span>y <span class="sym">/</span> height <span class="sym">-</span> <span class="num">1</span>

      i <span class="sym">=</span> <span class="num">0</span>
      <span class="kwa">repeat</span>
         Tr <span class="sym">=</span> Zr<span class="sym">*</span>Zr <span class="sym">-</span> Zi<span class="sym">*</span>Zi <span class="sym">+</span> Cr
         Ti <span class="sym">=</span> <span class="num">2</span><span class="sym">*</span>Zr<span class="sym">*</span>Zi <span class="sym">+</span> Ci
         Zr <span class="sym">=</span> Tr<span class="sym">;</span> Zi <span class="sym">=</span> Ti
         i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span>
         isOverLimit <span class="sym">=</span> Zr<span class="sym">*</span>Zr <span class="sym">+</span> Zi<span class="sym">*</span>Zi <span class="sym">&gt;</span> limit2
      <span class="kwa">until</span> isOverLimit <span class="kwa">or</span> <span class="sym">(</span>i <span class="sym">==</span> m<span class="sym">)</span>


      <span class="slc">-- encode as bit value</span>

      bits <span class="sym">=</span> bits <span class="sym">*</span> <span class="num">2</span>
      <span class="kwa">if not</span> isOverLimit <span class="kwa">then</span> bits <span class="sym">=</span> bits <span class="sym">+</span> <span class="num">1</span> <span class="kwa">end</span>
      bitnum <span class="sym">=</span> bitnum <span class="sym">+</span> <span class="num">1</span>

      <span class="kwa">if</span> x <span class="sym">==</span> width <span class="sym">-</span> <span class="num">1</span> <span class="kwa">then</span>
         <span class="kwa">for</span> i <span class="sym">=</span> bitnum<span class="sym">,</span><span class="num">7</span> <span class="kwa">do</span> bits <span class="sym">=</span> bits <span class="sym">*</span> <span class="num">2</span> <span class="kwa">end</span><span class="sym">;</span> bitnum <span class="sym">=</span> <span class="num">8</span>
      <span class="kwa">end</span>


      <span class="kwa">if</span> bitnum <span class="sym">==</span> <span class="num">8</span> <span class="kwa">then</span>
         io.<span class="kwa">write</span><span class="sym">(</span><span class="kwb">string</span>.char<span class="sym">(</span>bits<span class="sym">));</span> bits <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> bitnum <span class="sym">=</span> <span class="num">0</span>
      <span class="kwa">end</span>

   <span class="kwa">end</span>
<span class="kwa">end</span>
