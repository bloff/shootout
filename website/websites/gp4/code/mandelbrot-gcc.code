<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Greg Buchholz (original iterative version)</span>
<span class="hl com">   modified by Yannick Gingras (made tail recursive)</span>
<span class="hl com">*/</span>

<span class="hl dir">#include&lt;stdio.h&gt;</span>
<span class="hl dir">#include&lt;stdlib.h&gt;</span>

<span class="hl dir">#define _ISOC99_SOURCE</span>

<span class="hl kwb">int</span> <span class="hl kwd">iterate</span> <span class="hl sym">()</span> <span class="hl kwd">__attribute__</span> <span class="hl sym">((</span>pure<span class="hl sym">,</span> <span class="hl kwb">const</span><span class="hl sym">,</span> nothrow<span class="hl sym">,</span> sseregparm<span class="hl sym">));</span>
<span class="hl kwb">int</span> <span class="hl kwd">iterate</span> <span class="hl sym">(</span><span class="hl kwb">double</span> Zr<span class="hl sym">,</span> <span class="hl kwb">double</span> Zi<span class="hl sym">,</span>
	     <span class="hl kwb">double</span> Tr<span class="hl sym">,</span> <span class="hl kwb">double</span> Ti<span class="hl sym">,</span>
	     <span class="hl kwb">double</span> Cr<span class="hl sym">,</span> <span class="hl kwb">double</span> Ci<span class="hl sym">,</span>
	     <span class="hl kwb">int</span> iter<span class="hl sym">)</span>
<span class="hl sym">{</span>
  <span class="hl kwa">if</span> <span class="hl sym">(</span>iter <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span>
    <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl sym">;</span>

  Zi <span class="hl sym">=</span> <span class="hl num">2.0</span> <span class="hl sym">*</span> Zr <span class="hl sym">*</span> Zi <span class="hl sym">+</span> Ci<span class="hl sym">;</span>
  Zr <span class="hl sym">=</span> Tr <span class="hl sym">-</span> Ti <span class="hl sym">+</span> Cr<span class="hl sym">;</span>
  Tr <span class="hl sym">=</span> Zr <span class="hl sym">*</span> Zr<span class="hl sym">;</span>
  Ti <span class="hl sym">=</span> Zi <span class="hl sym">*</span> Zi<span class="hl sym">;</span>

  <span class="hl kwa">if</span> <span class="hl sym">(</span>Tr <span class="hl sym">+</span> Ti <span class="hl sym">&gt;</span> <span class="hl num">4.0</span><span class="hl sym">)</span>
    <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>

  <span class="hl kwa">return</span> <span class="hl kwd">iterate</span> <span class="hl sym">(</span>Zr<span class="hl sym">,</span> Zi<span class="hl sym">,</span> Tr<span class="hl sym">,</span> Ti<span class="hl sym">,</span> Cr<span class="hl sym">,</span> Ci<span class="hl sym">,</span> iter <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">);</span>
<span class="hl sym">}</span>


<span class="hl kwb">int</span> <span class="hl kwd">main</span> <span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">**</span>argv<span class="hl sym">)</span>
<span class="hl sym">{</span>
  <span class="hl kwb">int</span> w<span class="hl sym">,</span> h<span class="hl sym">,</span> buflen<span class="hl sym">,</span> bit_num <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
  <span class="hl kwb">char</span> byte_acc <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
  <span class="hl kwb">char</span> <span class="hl sym">*</span>buf<span class="hl sym">, *</span>pbuf<span class="hl sym">;</span>
  <span class="hl kwb">double</span> x<span class="hl sym">,</span> y<span class="hl sym">,</span> wrat<span class="hl sym">,</span> hrat<span class="hl sym">;</span>
  <span class="hl kwb">double</span> Cr<span class="hl sym">,</span> Ci<span class="hl sym">;</span>

  w <span class="hl sym">=</span> h <span class="hl sym">=</span> <span class="hl kwd">atoi</span> <span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]);</span>
  wrat <span class="hl sym">=</span> <span class="hl num">2.0</span> <span class="hl sym">/</span> w<span class="hl sym">;</span>
  hrat <span class="hl sym">=</span> <span class="hl num">2.0</span> <span class="hl sym">/</span> h<span class="hl sym">;</span>
  buflen <span class="hl sym">= (</span>w <span class="hl sym">/</span> <span class="hl num">8</span> <span class="hl sym">+ (</span>w <span class="hl sym">%</span> <span class="hl num">8</span> ? <span class="hl num">1</span> <span class="hl sym">:</span> <span class="hl num">0</span><span class="hl sym">)) *</span> h<span class="hl sym">;</span>
  buf <span class="hl sym">= (</span><span class="hl kwb">char</span> <span class="hl sym">*)</span> <span class="hl kwd">malloc</span> <span class="hl sym">(</span>buflen<span class="hl sym">);</span>
  pbuf <span class="hl sym">=</span> buf<span class="hl sym">;</span>

  <span class="hl kwd">printf</span> <span class="hl sym">(</span><span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">%d %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> w<span class="hl sym">,</span> h<span class="hl sym">);</span>


  <span class="hl kwa">for</span> <span class="hl sym">(</span>y <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> y <span class="hl sym">&lt;</span> h<span class="hl sym">; ++</span>y<span class="hl sym">)</span>
    <span class="hl sym">{</span>
      Ci <span class="hl sym">=</span> y <span class="hl sym">*</span> hrat <span class="hl sym">-</span> <span class="hl num">1.0</span><span class="hl sym">;</span>

      <span class="hl kwa">for</span> <span class="hl sym">(</span>x <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> x <span class="hl sym">&lt;</span> w<span class="hl sym">; ++</span>x<span class="hl sym">)</span>
	<span class="hl sym">{</span>
	  Cr <span class="hl sym">=</span> x <span class="hl sym">*</span> wrat <span class="hl sym">-</span> <span class="hl num">1.5</span><span class="hl sym">;</span>

	  byte_acc <span class="hl sym">&lt;&lt;=</span> <span class="hl num">1</span><span class="hl sym">;</span>
	  <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">iterate</span> <span class="hl sym">(</span><span class="hl num">0.0</span><span class="hl sym">,</span> <span class="hl num">0.0</span><span class="hl sym">,</span> <span class="hl num">0.0</span><span class="hl sym">,</span> <span class="hl num">0.0</span><span class="hl sym">,</span> Cr<span class="hl sym">,</span> Ci<span class="hl sym">,</span> <span class="hl num">50</span><span class="hl sym">))</span>
	    byte_acc <span class="hl sym">|=</span> <span class="hl num">0x01</span><span class="hl sym">;</span>

	  <span class="hl kwa">if</span> <span class="hl sym">(++</span>bit_num <span class="hl sym">==</span> <span class="hl num">8</span><span class="hl sym">)</span>
	    <span class="hl sym">{</span>
	      <span class="hl sym">*(</span>pbuf<span class="hl sym">++) =</span> byte_acc<span class="hl sym">;</span>
	      bit_num <span class="hl sym">=</span> byte_acc <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
	    <span class="hl sym">}</span>
	<span class="hl sym">}</span>

      <span class="hl kwa">if</span> <span class="hl sym">(</span>bit_num<span class="hl sym">)</span>
	<span class="hl sym">{</span>
	  byte_acc <span class="hl sym">&lt;&lt;= (</span><span class="hl num">8</span> <span class="hl sym">-</span> w <span class="hl sym">%</span> <span class="hl num">8</span><span class="hl sym">);</span>

	  <span class="hl sym">*(</span>pbuf<span class="hl sym">++) =</span> byte_acc<span class="hl sym">;</span>
	  bit_num <span class="hl sym">=</span> byte_acc <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
	<span class="hl sym">}</span>
    <span class="hl sym">}</span>

  <span class="hl kwd">fwrite</span> <span class="hl sym">(</span>buf<span class="hl sym">,</span> buflen<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> stdout<span class="hl sym">);</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>
