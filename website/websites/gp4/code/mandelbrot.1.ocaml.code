<span class="com">(*								-*tuareg-*-</span>
<span class="com"> * The Great Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Contributed by Christophe TROESTLER</span>
<span class="com"> * Enhanced by Christian Szegedy &lt;szegedy&#64;t-online.de&gt;</span>
<span class="com"> *             Yaron Minsky &lt;yminsky-guest&gt;</span>
<span class="com"> *)</span>

<span class="kwa">let</span> niter <span class="sym">=</span> <span class="num">50</span>
<span class="kwa">let</span> limit <span class="sym">=</span> <span class="num">2</span>.

<span class="kwa">let</span> limit2 <span class="sym">=</span> limit <span class="sym">*</span>. limit

<span class="kwa">type</span> complex <span class="sym">= {</span> <span class="kwa">mutable</span> r<span class="sym">:</span> <span class="kwb">float</span><span class="sym">;</span> <span class="kwa">mutable</span> i<span class="sym">:</span> <span class="kwb">float</span> <span class="sym">}</span>

<span class="kwa">let</span> add_bit0 ~tmp<span class="sym">:</span>z c byte <span class="sym">=</span>
  z.r <span class="sym">&lt;-</span> <span class="num">0</span>.<span class="sym">;</span>
  z.i <span class="sym">&lt;-</span> <span class="num">0</span>.<span class="sym">;</span>
  <span class="kwa">let</span> cr <span class="sym">=</span> c.r <span class="kwa">and</span> ci <span class="sym">=</span> c.i <span class="kwa">in</span>
  <span class="kwa">try</span>
    <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">to</span> niter <span class="kwa">do</span>
      <span class="kwa">let</span> zi <span class="sym">=</span> <span class="num">2</span>. <span class="sym">*</span>. z.r <span class="sym">*</span>. z.i <span class="sym">+</span>. ci <span class="kwa">in</span>
      z.r <span class="sym">&lt;-</span> z.r <span class="sym">*</span>. z.r <span class="sym">-</span>. z.i <span class="sym">*</span>. z.i <span class="sym">+</span>. cr<span class="sym">;</span>
      z.i <span class="sym">&lt;-</span> zi<span class="sym">;</span>
      <span class="kwa">if</span> z.r <span class="sym">*</span>. z.r <span class="sym">+</span>. zi <span class="sym">*</span>. zi <span class="sym">&gt;</span> limit2 <span class="kwa">then</span> raise Exit<span class="sym">;</span>
    <span class="kwa">done</span><span class="sym">;</span>
    <span class="sym">(</span>byte <span class="kwa">lsl</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">lor</span> <span class="num">0x01</span>
  <span class="kwa">with</span> Exit <span class="sym">-&gt; (</span>byte <span class="kwa">lsl</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">lor</span> <span class="num">0x00</span>

<span class="kwa">let</span> <span class="sym">() =</span>
  <span class="kwa">let</span> w <span class="sym">=</span> <span class="kwd">int_of_string</span><span class="sym">(</span>Array.get Sys.argv <span class="num">1</span><span class="sym">)</span> <span class="kwa">in</span>
  <span class="kwa">let</span> h <span class="sym">=</span> w <span class="kwa">in</span>
  <span class="kwa">let</span> fw <span class="sym">=</span> <span class="kwb">float</span> w
  <span class="kwa">and</span> fh <span class="sym">=</span> <span class="kwb">float</span> h
  <span class="kwa">and</span> cplmt8 <span class="sym">=</span> <span class="num">8</span> <span class="sym">-</span> w <span class="kwa">mod</span> <span class="num">8</span> <span class="kwa">in</span>
  Printf.printf <span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">%i %i</span><span class="esc">\n</span><span class="str">&quot;</span> w h<span class="sym">;</span>
  <span class="kwa">let</span> byte <span class="sym">=</span> ref <span class="num">0</span>
  <span class="kwa">and</span> bit <span class="sym">=</span> ref <span class="num">0</span> <span class="kwa">in</span>
  <span class="kwa">let</span> c <span class="sym">= {</span> r <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span> i <span class="sym">=</span> <span class="num">0.0</span> <span class="sym">}</span> <span class="kwa">in</span>
  <span class="kwa">let</span> tmp <span class="sym">= {</span> r <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span> i <span class="sym">=</span> <span class="num">0.0</span> <span class="sym">}</span> <span class="kwa">in</span>
  <span class="kwa">for</span> y <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> h <span class="sym">-</span> <span class="num">1</span> <span class="kwa">do</span>
    c.i <span class="sym">&lt;-</span> <span class="num">2</span>. <span class="sym">*</span>. <span class="kwb">float</span> y <span class="sym">/</span>. fh <span class="sym">-</span>. <span class="num">1</span>.<span class="sym">;</span>
    <span class="kwa">for</span> x <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> w <span class="sym">-</span> <span class="num">1</span> <span class="kwa">do</span>
      c.r <span class="sym">&lt;-</span> <span class="num">2</span>. <span class="sym">*</span>. <span class="kwb">float</span> x <span class="sym">/</span>. fw <span class="sym">-</span>. <span class="num">1.5</span><span class="sym">;</span>
      byte <span class="sym">:=</span> add_bit0 ~tmp c <span class="sym">!</span>byte<span class="sym">;</span>
      incr bit<span class="sym">;</span>
      <span class="kwa">if</span> <span class="sym">!</span>bit <span class="sym">=</span> <span class="num">8</span> <span class="kwa">then</span> <span class="sym">(</span>
        output_byte stdout <span class="sym">!</span>byte<span class="sym">;</span>
        byte <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
        bit <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
      <span class="sym">)</span>
    <span class="kwa">done</span><span class="sym">;</span>
    <span class="kwa">if</span> <span class="sym">!</span>bit <span class="sym">&lt;&gt;</span> <span class="num">0</span> <span class="kwa">then</span> <span class="sym">(</span>
      output_byte <span class="kwd">stdout</span> <span class="sym">(!</span>byte <span class="kwa">lsl</span> cplmt8<span class="sym">);</span>
      byte <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
      bit <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="sym">)</span>
  <span class="kwa">done</span>
