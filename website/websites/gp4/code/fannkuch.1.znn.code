<span class="hl com">(* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Isaac Gouy</span>
<span class="hl com">*)</span>

<span class="hl kwa">module</span> fannkuch<span class="hl sym">;</span>
<span class="hl kwa">import</span> System<span class="hl sym">.</span>Console <span class="hl kwa">as</span> C<span class="hl sym">,</span> BenchmarksGame<span class="hl sym">;</span>

<span class="hl kwa">procedure</span> <span class="hl kwd">pfannkuchen</span><span class="hl sym">(</span>n<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">):</span> <span class="hl kwb">integer</span><span class="hl sym">;</span>
<span class="hl kwa">type</span>
   Vector <span class="hl sym">=</span> <span class="hl kwa">array</span> <span class="hl sym">*</span> <span class="hl kwa">of</span> <span class="hl kwb">integer</span><span class="hl sym">;</span>
<span class="hl kwa">var</span>
   perm<span class="hl sym">,</span> perm1<span class="hl sym">,</span> count<span class="hl sym">,</span> maxPerm<span class="hl sym">:</span> Vector<span class="hl sym">;</span>
   check<span class="hl sym">,</span> m<span class="hl sym">,</span> r<span class="hl sym">,</span> i<span class="hl sym">,</span> k<span class="hl sym">,</span> temp<span class="hl sym">,</span> maxFlipsCount<span class="hl sym">,</span> flipsCount<span class="hl sym">,</span> perm0<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
   perm <span class="hl sym">:=</span> <span class="hl kwa">new</span> <span class="hl kwd">Vector</span><span class="hl sym">(</span>n<span class="hl sym">);</span>
   perm1 <span class="hl sym">:=</span> <span class="hl kwa">new</span> <span class="hl kwd">Vector</span><span class="hl sym">(</span>n<span class="hl sym">);</span>
   count <span class="hl sym">:=</span> <span class="hl kwa">new</span> <span class="hl kwd">Vector</span><span class="hl sym">(</span>n<span class="hl sym">);</span>
   maxPerm <span class="hl sym">:=</span> <span class="hl kwa">new</span> <span class="hl kwd">Vector</span><span class="hl sym">(</span>n<span class="hl sym">);</span>

   check <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   maxFlipsCount <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   m <span class="hl sym">:=</span> n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>
   <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> m <span class="hl kwa">do</span> perm1<span class="hl sym">[</span>i<span class="hl sym">] :=</span> i<span class="hl sym">;</span> <span class="hl kwa">end</span><span class="hl sym">;</span>

   r <span class="hl sym">:=</span> n<span class="hl sym">;</span>
   <span class="hl kwa">loop</span>
      <span class="hl com">(* write-out the first 30 permutations *)</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>check <span class="hl sym">&lt;</span> <span class="hl num">30</span><span class="hl sym">)</span> <span class="hl kwa">then</span>
         <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> m <span class="hl kwa">do</span> C<span class="hl sym">.</span><span class="hl kwd">Write</span><span class="hl sym">(</span><span class="hl str">&quot;{0}&quot;</span><span class="hl sym">,</span> perm1<span class="hl sym">[</span>i<span class="hl sym">]+</span><span class="hl num">1</span><span class="hl sym">);</span> <span class="hl kwa">end</span><span class="hl sym">;</span>
         C<span class="hl sym">.</span><span class="hl kwd">WriteLine</span><span class="hl sym">();</span>
         <span class="hl kwd">inc</span><span class="hl sym">(</span>check<span class="hl sym">);</span>
      <span class="hl kwa">end</span><span class="hl sym">;</span>

      <span class="hl kwa">while</span> r # <span class="hl num">1</span> <span class="hl kwa">do</span> count<span class="hl sym">[</span>r<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">] :=</span> r<span class="hl sym">;</span> <span class="hl kwd">dec</span><span class="hl sym">(</span>r<span class="hl sym">);</span> <span class="hl kwa">end</span><span class="hl sym">;</span>
      <span class="hl kwa">if</span> ~ <span class="hl sym">((</span>perm1<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]=</span><span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">or</span> <span class="hl sym">(</span>perm1<span class="hl sym">[</span>m<span class="hl sym">]=</span>m<span class="hl sym">))</span> <span class="hl kwa">then</span>
         <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> m <span class="hl kwa">do</span> perm<span class="hl sym">[</span>i<span class="hl sym">] :=</span> perm1<span class="hl sym">[</span>i<span class="hl sym">];</span> <span class="hl kwa">end</span><span class="hl sym">;</span>
         flipsCount <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         <span class="hl kwa">loop</span>
            k <span class="hl sym">:=</span> perm<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
            <span class="hl kwa">if</span> k <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">then exit</span><span class="hl sym">;</span> <span class="hl kwa">end</span><span class="hl sym">;</span>
            <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> <span class="hl sym">((</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">div</span> <span class="hl num">2</span><span class="hl sym">) -</span> <span class="hl num">1</span> <span class="hl kwa">do</span>
               temp <span class="hl sym">:=</span> perm<span class="hl sym">[</span>i<span class="hl sym">];</span> perm<span class="hl sym">[</span>i<span class="hl sym">] :=</span> perm<span class="hl sym">[</span>k<span class="hl sym">-</span>i<span class="hl sym">];</span> perm<span class="hl sym">[</span>k<span class="hl sym">-</span>i<span class="hl sym">] :=</span> temp<span class="hl sym">;</span>
            <span class="hl kwa">end</span><span class="hl sym">;</span>
            <span class="hl kwd">inc</span><span class="hl sym">(</span>flipsCount<span class="hl sym">);</span>
         <span class="hl kwa">end</span><span class="hl sym">;</span>
         <span class="hl kwa">if</span> flipsCount <span class="hl sym">&gt;</span> maxFlipsCount <span class="hl kwa">then</span>
            maxFlipsCount <span class="hl sym">:=</span> flipsCount<span class="hl sym">;</span>
            <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> m <span class="hl kwa">do</span> maxPerm<span class="hl sym">[</span>i<span class="hl sym">] :=</span> perm1<span class="hl sym">[</span>i<span class="hl sym">];</span> <span class="hl kwa">end</span><span class="hl sym">;</span>
         <span class="hl kwa">end</span><span class="hl sym">;</span>
      <span class="hl kwa">end</span><span class="hl sym">;</span>
      <span class="hl kwa">loop</span>
         <span class="hl kwa">if</span> r <span class="hl sym">=</span> n <span class="hl kwa">then return</span> maxFlipsCount<span class="hl sym">;</span> <span class="hl kwa">end</span><span class="hl sym">;</span>
         perm0 <span class="hl sym">:=</span> perm1<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
         i <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         <span class="hl kwa">while</span> i <span class="hl sym">&lt;</span> r <span class="hl kwa">do</span>
            k <span class="hl sym">:=</span> i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
            perm1<span class="hl sym">[</span>i<span class="hl sym">] :=</span> perm1<span class="hl sym">[</span>k<span class="hl sym">];</span>
            i <span class="hl sym">:=</span> k<span class="hl sym">;</span>
         <span class="hl kwa">end</span><span class="hl sym">;</span>
         perm1<span class="hl sym">[</span>r<span class="hl sym">] :=</span> perm0<span class="hl sym">;</span>

         <span class="hl kwd">dec</span><span class="hl sym">(</span>count<span class="hl sym">[</span>r<span class="hl sym">]);</span>
         <span class="hl kwa">if</span> count<span class="hl sym">[</span>r<span class="hl sym">] &gt;</span> <span class="hl num">0</span> <span class="hl kwa">then exit</span><span class="hl sym">;</span> <span class="hl kwa">end</span><span class="hl sym">;</span>
         <span class="hl kwd">inc</span><span class="hl sym">(</span>r<span class="hl sym">);</span>
      <span class="hl kwa">end</span><span class="hl sym">;</span>
   <span class="hl kwa">end</span><span class="hl sym">;</span>
<span class="hl kwa">end</span> pfannkuchen<span class="hl sym">;</span>

<span class="hl kwa">var</span>
   n <span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
   n <span class="hl sym">:=</span> BenchmarksGame<span class="hl sym">.</span><span class="hl kwd">argi</span><span class="hl sym">();</span>
   C<span class="hl sym">.</span><span class="hl kwd">WriteLine</span><span class="hl sym">(</span><span class="hl str">&quot;Pfannkuchen({0}) = {1}&quot;</span><span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl kwd">pfannkuchen</span><span class="hl sym">(</span>n<span class="hl sym">));</span>
<span class="hl kwa">end</span> fannkuch<span class="hl sym">.</span>
