<span class="slc">! -*- mode: f90 -*-
</span><span class="slc">!
</span><span class="slc">! $Id: fannkuch-g95.code,v 1.2 2005-10-29 23:09:22 igouy-guest Exp $ ; $Name:  $
</span><span class="slc">!
</span><span class="slc">! The Great Computer Language Shootout
</span><span class="slc">! http://shootout.alioth.debian.org/
</span>
<span class="slc">! contributed by Steve Decker
</span><span class="slc">! based on the D version by Dave Fladebo
</span><span class="slc">! compilation:
</span><span class="slc">!    gfortran -O3 -fomit-frame-pointer fannkuch.f90
</span><span class="slc">!
</span><span class="slc">! Tested with:
</span><span class="slc">!              ifort --version  -&gt; ifort (IFORT) 9.0  20050430
</span><span class="slc">!              g95 --version    -&gt; G95 (GCC 4.0.1 (g95!) Aug 27 2005)
</span><span class="slc">!              gfortran
</span>
program fannkuch
  implicit none

  integer <span class="sym">::</span> n<span class="sym">,</span> i<span class="sym">,</span> r<span class="sym">,</span> flips<span class="sym">,</span> temp<span class="sym">,</span> j<span class="sym">,</span> k<span class="sym">,</span> maxFlipsCount <span class="sym">=</span> <span class="num">0
</span>  character<span class="sym">(</span>len<span class="sym">=</span><span class="num">2</span><span class="sym">) ::</span> argv
  integer<span class="sym">,</span> dimension<span class="sym">(:),</span> allocatable <span class="sym">::</span> perm<span class="sym">,</span> perm1<span class="sym">,</span> cnt

  call get_command_argument<span class="sym">(</span><span class="num">1</span><span class="sym">,</span> argv<span class="sym">)
</span>  read <span class="sym">(</span>argv<span class="sym">, *)</span> n

  allocate<span class="sym">(</span>perm<span class="sym">(</span>n<span class="sym">),</span> perm1<span class="sym">(</span>n<span class="sym">),</span> cnt<span class="sym">(</span>n<span class="sym">))

</span>  <span class="slc">! Initialize permutation
</span>  perm1 <span class="sym">= (/ (</span>i<span class="sym">,</span> i <span class="sym">=</span> <span class="num">1</span><span class="sym">,</span> n<span class="sym">) /)

</span>  r <span class="sym">=</span> n <span class="sym">+</span> <span class="num">1
</span>  outer<span class="sym">:</span> do  <span class="slc">! For all n! permutations
</span>     do while <span class="sym">(</span>r <span class="sym">&gt;</span> <span class="num">2</span><span class="sym">)
</span>        cnt<span class="sym">(</span>r<span class="num">-1</span><span class="sym">) =</span> r
        r <span class="sym">=</span> r <span class="num">- 1
</span>     end do
     if <span class="sym">(</span>perm1<span class="sym">(</span><span class="num">1</span><span class="sym">) &gt;</span> <span class="num">1</span> .and. perm1<span class="sym">(</span>n<span class="sym">) &lt;</span> n<span class="sym">)</span> then
        perm <span class="sym">=</span> perm1

        i <span class="sym">=</span> perm<span class="sym">(</span><span class="num">1</span><span class="sym">)
</span>        flips <span class="sym">=</span> <span class="num">0
</span>        do while <span class="sym">(</span>i <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">)</span>  <span class="slc">! Perform flips until first element is 1
</span>           temp <span class="sym">=</span> perm<span class="sym">(</span>i<span class="sym">)
</span>           perm<span class="sym">(</span>i<span class="sym">) =</span> i
           i <span class="sym">=</span> temp
           j <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span> k <span class="sym">=</span> i <span class="num">- 1
</span>           do while <span class="sym">(</span>j <span class="sym">&lt;</span> k<span class="sym">)
</span>              temp <span class="sym">=</span> perm<span class="sym">(</span>j<span class="sym">)
</span>              perm<span class="sym">(</span>j<span class="sym">) =</span> perm<span class="sym">(</span>k<span class="sym">)
</span>              perm<span class="sym">(</span>k<span class="sym">) =</span> temp
              j <span class="sym">=</span> j <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span> k <span class="sym">=</span> k <span class="num">- 1
</span>           end do
           flips <span class="sym">=</span> flips <span class="sym">+</span> <span class="num">1</span>  <span class="slc">! Count number of flips
</span>        end do

        if <span class="sym">(</span>flips <span class="sym">&gt;</span> maxFlipsCount<span class="sym">)</span> maxFlipsCount <span class="sym">=</span> flips
     end if
     do  <span class="slc">! Produce next permutation
</span>        if <span class="sym">(</span>r <span class="sym">==</span> n<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> then
           write<span class="sym">(*,</span><span class="str">&quot;(2(a,i0))&quot;</span><span class="sym">)</span> <span class="str">&quot;Pfannkuchen(&quot;</span><span class="sym">,</span> n<span class="sym">,</span> <span class="str">&quot;) = &quot;</span><span class="sym">,</span> maxFlipsCount
           exit outer
        end if

        temp <span class="sym">=</span> perm1<span class="sym">(</span><span class="num">1</span><span class="sym">)
</span>        i <span class="sym">=</span> <span class="num">1
</span>        do while <span class="sym">(</span>i <span class="sym">&lt;</span> r<span class="sym">)
</span>           j <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1
</span>           perm1<span class="sym">(</span>i<span class="sym">) =</span> perm1<span class="sym">(</span>j<span class="sym">)
</span>           i <span class="sym">=</span> j
        end do
        perm1<span class="sym">(</span>r<span class="sym">) =</span> temp
        <span class="slc">! perm1(1:r) = cshift(perm1(1:r),1) could replace the previous 8 lines,
</span>        <span class="slc">! but this is much slower on the GNU compilers.
</span>
        cnt<span class="sym">(</span>r<span class="sym">) =</span> cnt<span class="sym">(</span>r<span class="sym">) -</span> <span class="num">1
</span>        if <span class="sym">(</span>cnt<span class="sym">(</span>r<span class="sym">) &gt;</span> <span class="num">1</span><span class="sym">)</span> exit
        r <span class="sym">=</span> r <span class="sym">+</span> <span class="num">1
</span>     end do
  end do outer
end program fannkuch
