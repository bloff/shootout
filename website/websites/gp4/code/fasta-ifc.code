<span class="hl slc">! -*- mode: f90 -*-</span>
<span class="hl slc">!</span>
<span class="hl slc">! $Id: fasta-ifc.code,v 1.18 2007-12-08 02:54:41 igouy-guest Exp $ ; $Name:  $</span>
<span class="hl slc">!</span>
<span class="hl slc">! The Great Computer Language Shootout</span>
<span class="hl slc">! http://shootout.alioth.debian.org/</span>
<span class="hl slc">!</span>
<span class="hl slc">! fasta implementation - translated from the lua program</span>
<span class="hl slc">! contributed by Simon Geard, 18/1/05</span>
<span class="hl slc">!</span>
<span class="hl slc">! Building info.</span>
<span class="hl slc">! ==============</span>
<span class="hl slc">!</span>
<span class="hl slc">! Linux  - using the Intel Fortran90 compiler:</span>
<span class="hl slc">!</span>
<span class="hl slc">!          ifort fasta.f90 -O3 -static-libcxa -o fasta</span>
<span class="hl slc">!</span>
<span class="hl slc">! Run</span>
<span class="hl slc">! ===</span>
<span class="hl slc">!          fasta 1000</span>

program fasta

 implicit none
  integer num<span class="hl sym">,</span> m
  character<span class="hl sym">(</span>len<span class="hl sym">=</span><span class="hl num">8</span><span class="hl sym">)</span> argv
  logical<span class="hl sym">,</span> dimension<span class="hl sym">(:),</span> allocatable <span class="hl sym">::</span> flags
  integer<span class="hl sym">,</span> parameter <span class="hl sym">::</span> IM <span class="hl sym">=</span> <span class="hl num">139968</span>
  integer<span class="hl sym">,</span> parameter <span class="hl sym">::</span> IA <span class="hl sym">=</span> <span class="hl num">3877</span>
  integer<span class="hl sym">,</span> parameter <span class="hl sym">::</span> IC <span class="hl sym">=</span> <span class="hl num">29573</span>
  character<span class="hl sym">(</span>len<span class="hl sym">=*),</span> parameter <span class="hl sym">::</span> alu <span class="hl sym">= &amp;</span>
<span class="hl str">'GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG'</span> <span class="hl sym">// &amp;</span>
<span class="hl str">'GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA'</span> <span class="hl sym">// &amp;</span>
<span class="hl str">'CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT'</span> <span class="hl sym">// &amp;</span>
<span class="hl str">'ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA'</span> <span class="hl sym">// &amp;</span>
<span class="hl str">'GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG'</span> <span class="hl sym">// &amp;</span>
<span class="hl str">'AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC'</span> <span class="hl sym">// &amp;</span>
<span class="hl str">'AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA'</span>

  type pair
     character<span class="hl sym">(</span>len<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">)</span> c
     real<span class="hl sym">*</span><span class="hl num">8</span> p
  end type pair
  type<span class="hl sym">(</span>pair<span class="hl sym">),</span> dimension<span class="hl sym">(</span><span class="hl num">15</span><span class="hl sym">) ::</span> iub
  type<span class="hl sym">(</span>pair<span class="hl sym">),</span> dimension<span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">)  ::</span> homosapiens
  homosapiens <span class="hl sym">= (/</span> pair<span class="hl sym">(</span><span class="hl str">'a'</span><span class="hl sym">,</span> <span class="hl num">0.3029549426680</span>d0<span class="hl sym">), &amp;</span>
                   pair<span class="hl sym">(</span><span class="hl str">'c'</span><span class="hl sym">,</span> <span class="hl num">0.1979883004921</span>d0<span class="hl sym">), &amp;</span>
                   pair<span class="hl sym">(</span><span class="hl str">'g'</span><span class="hl sym">,</span> <span class="hl num">0.1975473066391</span>d0<span class="hl sym">), &amp;</span>
                   pair<span class="hl sym">(</span><span class="hl str">'t'</span><span class="hl sym">,</span> <span class="hl num">0.3015094502008</span>d0<span class="hl sym">) /)</span>
  call makeCumulative<span class="hl sym">(</span>homosapiens<span class="hl sym">)</span>

  iub <span class="hl sym">= (/</span> pair<span class="hl sym">(</span><span class="hl str">'a'</span><span class="hl sym">,</span> <span class="hl num">0.27</span>d0<span class="hl sym">), &amp;</span>
           pair<span class="hl sym">(</span><span class="hl str">'c'</span><span class="hl sym">,</span> <span class="hl num">0.12</span>d0<span class="hl sym">), &amp;</span>
           pair<span class="hl sym">(</span><span class="hl str">'g'</span><span class="hl sym">,</span> <span class="hl num">0.12</span>d0<span class="hl sym">), &amp;</span>
           pair<span class="hl sym">(</span><span class="hl str">'t'</span><span class="hl sym">,</span> <span class="hl num">0.27</span>d0<span class="hl sym">), &amp;</span>
           pair<span class="hl sym">(</span><span class="hl str">'B'</span><span class="hl sym">,</span> <span class="hl num">0.02</span>d0<span class="hl sym">), &amp;</span>
           pair<span class="hl sym">(</span><span class="hl str">'D'</span><span class="hl sym">,</span> <span class="hl num">0.02</span>d0<span class="hl sym">), &amp;</span>
           pair<span class="hl sym">(</span><span class="hl str">'H'</span><span class="hl sym">,</span> <span class="hl num">0.02</span>d0<span class="hl sym">), &amp;</span>
           pair<span class="hl sym">(</span><span class="hl str">'K'</span><span class="hl sym">,</span> <span class="hl num">0.02</span>d0<span class="hl sym">), &amp;</span>
           pair<span class="hl sym">(</span><span class="hl str">'M'</span><span class="hl sym">,</span> <span class="hl num">0.02</span>d0<span class="hl sym">), &amp;</span>
           pair<span class="hl sym">(</span><span class="hl str">'N'</span><span class="hl sym">,</span> <span class="hl num">0.02</span>d0<span class="hl sym">), &amp;</span>
           pair<span class="hl sym">(</span><span class="hl str">'R'</span><span class="hl sym">,</span> <span class="hl num">0.02</span>d0<span class="hl sym">), &amp;</span>
           pair<span class="hl sym">(</span><span class="hl str">'S'</span><span class="hl sym">,</span> <span class="hl num">0.02</span>d0<span class="hl sym">), &amp;</span>
           pair<span class="hl sym">(</span><span class="hl str">'V'</span><span class="hl sym">,</span> <span class="hl num">0.02</span>d0<span class="hl sym">), &amp;</span>
           pair<span class="hl sym">(</span><span class="hl str">'W'</span><span class="hl sym">,</span> <span class="hl num">0.02</span>d0<span class="hl sym">), &amp;</span>
           pair<span class="hl sym">(</span><span class="hl str">'Y'</span><span class="hl sym">,</span> <span class="hl num">0.02</span>d0<span class="hl sym">) /)</span>
  call makeCumulative<span class="hl sym">(</span>iub<span class="hl sym">)</span>

  call getarg<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span>argv<span class="hl sym">)</span>
  read<span class="hl sym">(</span>argv<span class="hl sym">,*)</span> num


  call makeRepeatFasta<span class="hl sym">(</span><span class="hl str">'ONE'</span><span class="hl sym">,</span><span class="hl str">'Homo sapiens alu'</span><span class="hl sym">,</span>alu<span class="hl sym">,</span>num<span class="hl sym">*</span><span class="hl num">2</span><span class="hl sym">)</span>

  call makeRandomFasta<span class="hl sym">(</span><span class="hl str">'TWO'</span><span class="hl sym">,</span><span class="hl str">'IUB ambiguity codes'</span><span class="hl sym">,</span>iub<span class="hl sym">,</span>num<span class="hl sym">*</span><span class="hl num">3</span><span class="hl sym">)</span>

  call makeRandomFasta<span class="hl sym">(</span><span class="hl str">'THREE'</span><span class="hl sym">,</span><span class="hl str">'Homo sapiens frequency'</span><span class="hl sym">,</span>homosapiens<span class="hl sym">,</span>num<span class="hl sym">*</span><span class="hl num">5</span><span class="hl sym">)</span>


contains

  real<span class="hl sym">*</span><span class="hl num">8</span> function getRandom <span class="hl sym">(</span>maxval<span class="hl sym">)</span>
    real<span class="hl sym">*</span><span class="hl num">8</span><span class="hl sym">,</span> intent<span class="hl sym">(</span>in<span class="hl sym">) ::</span> maxval
    integer<span class="hl sym">,</span> save <span class="hl sym">::</span> last <span class="hl sym">=</span> <span class="hl num">42</span>

    last <span class="hl sym">=</span> mod<span class="hl sym">(</span>last <span class="hl sym">*</span> IA <span class="hl sym">+</span> IC<span class="hl sym">,</span> IM<span class="hl sym">)</span>
    getRandom <span class="hl sym">=</span> maxval <span class="hl sym">*</span> last <span class="hl sym">/</span> IM

  end function getRandom

  subroutine makeCumulative<span class="hl sym">(</span>a<span class="hl sym">)</span>
     type<span class="hl sym">(</span>pair<span class="hl sym">),</span> dimension<span class="hl sym">(:),</span> intent<span class="hl sym">(</span>inout<span class="hl sym">) ::</span> a
     integer i
     real<span class="hl sym">*</span><span class="hl num">8</span> <span class="hl sym">::</span> cp

     cp <span class="hl sym">=</span> <span class="hl num">0.0</span>d0
     do i<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">,</span>size<span class="hl sym">(</span>a<span class="hl sym">)</span>
        cp <span class="hl sym">=</span> cp <span class="hl sym">+</span> a<span class="hl sym">(</span>i<span class="hl sym">)%</span>p
        a<span class="hl sym">(</span>i<span class="hl sym">)%</span>p <span class="hl sym">=</span> cp
     end do
  end subroutine makeCumulative

  character<span class="hl sym">(</span>len<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">)</span> function selectRandom<span class="hl sym">(</span>a<span class="hl sym">)</span>
      type<span class="hl sym">(</span>pair<span class="hl sym">),</span> dimension<span class="hl sym">(:),</span> intent<span class="hl sym">(</span>inout<span class="hl sym">) ::</span> a
     integer i
     real<span class="hl sym">*</span><span class="hl num">8</span> <span class="hl sym">::</span> r

     r <span class="hl sym">=</span> getRandom<span class="hl sym">(</span><span class="hl num">1.0</span>d0<span class="hl sym">)</span>
     selectRandom <span class="hl sym">=</span> <span class="hl str">'J'</span>
     do i<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">,</span>size<span class="hl sym">(</span>a<span class="hl sym">)</span>
        if <span class="hl sym">(</span>r <span class="hl sym">&lt;</span> a<span class="hl sym">(</span>i<span class="hl sym">)%</span>p<span class="hl sym">)</span> then
           selectRandom <span class="hl sym">=</span> a<span class="hl sym">(</span>i<span class="hl sym">)%</span>c
           return
        end if
     end do

  end function selectRandom

  subroutine makeRandomFasta<span class="hl sym">(</span>id<span class="hl sym">,</span>desc<span class="hl sym">,</span>a<span class="hl sym">,</span>n<span class="hl sym">)</span>
     character<span class="hl sym">(</span>len<span class="hl sym">=*),</span> intent<span class="hl sym">(</span>in<span class="hl sym">) ::</span> id
     character<span class="hl sym">(</span>len<span class="hl sym">=*),</span> intent<span class="hl sym">(</span>in<span class="hl sym">) ::</span> desc
     type<span class="hl sym">(</span>pair<span class="hl sym">),</span> dimension<span class="hl sym">(:),</span> intent<span class="hl sym">(</span>inout<span class="hl sym">) ::</span> a
     integer<span class="hl sym">,</span> intent<span class="hl sym">(</span>in<span class="hl sym">) ::</span> n
     integer <span class="hl sym">::</span> todo<span class="hl sym">,</span> i
     integer<span class="hl sym">,</span> parameter <span class="hl sym">::</span> length <span class="hl sym">=</span> <span class="hl num">60</span>
     character<span class="hl sym">(</span>len<span class="hl sym">=</span>length<span class="hl sym">) ::</span> buff

     write<span class="hl sym">(*,</span><span class="hl str">'(4a)'</span><span class="hl sym">)</span> <span class="hl str">'&gt;'</span><span class="hl sym">,</span>id<span class="hl sym">,</span><span class="hl str">' '</span><span class="hl sym">,</span>desc
     todo <span class="hl sym">=</span> n
     do
        if <span class="hl sym">(</span>todo <span class="hl sym">&lt;=</span> <span class="hl num">0</span><span class="hl sym">)</span> exit
        if <span class="hl sym">(</span>todo <span class="hl sym">&lt;</span> length<span class="hl sym">)</span> then
           m <span class="hl sym">=</span> todo
        else
           m <span class="hl sym">=</span> length
        end if
        do i<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">,</span>m
           buff<span class="hl sym">(</span>i<span class="hl sym">:</span>i<span class="hl sym">) =</span> selectRandom<span class="hl sym">(</span>a<span class="hl sym">)</span>
        end do
        write<span class="hl sym">(*,</span><span class="hl str">'(a)'</span><span class="hl sym">)</span> buff<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">:</span>m<span class="hl sym">)</span>
        todo <span class="hl sym">=</span> todo <span class="hl sym">-</span> length
     end do
  end subroutine makeRandomFasta

  subroutine makeRepeatFasta<span class="hl sym">(</span>id<span class="hl sym">,</span>desc<span class="hl sym">,</span>s<span class="hl sym">,</span>n<span class="hl sym">)</span>
     character<span class="hl sym">(</span>len<span class="hl sym">=*),</span> intent<span class="hl sym">(</span>in<span class="hl sym">) ::</span> id
     character<span class="hl sym">(</span>len<span class="hl sym">=*),</span> intent<span class="hl sym">(</span>in<span class="hl sym">) ::</span> desc
     character<span class="hl sym">(</span>len<span class="hl sym">=*),</span> intent<span class="hl sym">(</span>in<span class="hl sym">) ::</span> s
     integer<span class="hl sym">,</span> intent<span class="hl sym">(</span>in<span class="hl sym">) ::</span> n
     integer <span class="hl sym">::</span> todo<span class="hl sym">,</span> i<span class="hl sym">,</span> j<span class="hl sym">,</span> k<span class="hl sym">,</span> kn
     integer<span class="hl sym">,</span> parameter <span class="hl sym">::</span> length <span class="hl sym">=</span> <span class="hl num">60</span>
     character<span class="hl sym">(</span>len<span class="hl sym">=</span>length<span class="hl sym">) ::</span> buff
     intrinsic len

     write<span class="hl sym">(*,</span><span class="hl str">'(4a)'</span><span class="hl sym">)</span> <span class="hl str">'&gt;'</span><span class="hl sym">,</span>id<span class="hl sym">,</span><span class="hl str">' '</span><span class="hl sym">,</span>desc
     todo <span class="hl sym">=</span> n<span class="hl sym">;</span> k <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span> kn <span class="hl sym">=</span> len<span class="hl sym">(</span>s<span class="hl sym">)</span>
     do
        if <span class="hl sym">(</span>todo <span class="hl sym">&lt;=</span> <span class="hl num">0</span><span class="hl sym">)</span> exit
        if <span class="hl sym">(</span>todo <span class="hl sym">&lt;</span> length<span class="hl sym">)</span> then
           m <span class="hl sym">=</span> todo
        else
           m <span class="hl sym">=</span> length
        end if
        do j<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">,</span>m
           if <span class="hl sym">(</span>k <span class="hl sym">&gt;</span> kn<span class="hl sym">)</span> then
              k <span class="hl sym">=</span> <span class="hl num">1</span>
           endif
           buff<span class="hl sym">(</span>j<span class="hl sym">:</span>j<span class="hl sym">) =</span> s<span class="hl sym">(</span>k<span class="hl sym">:</span>k<span class="hl sym">)</span>
           k <span class="hl sym">=</span> k <span class="hl sym">+</span> <span class="hl num">1</span>
        end do
        write<span class="hl sym">(*,</span><span class="hl str">'(a)'</span><span class="hl sym">)</span> buff<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">:</span>m<span class="hl sym">)</span>
        todo <span class="hl sym">=</span> todo <span class="hl sym">-</span> length
     end do

  end subroutine makeRepeatFasta

end program fasta
