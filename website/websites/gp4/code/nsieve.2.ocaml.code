<span class="hl com">(* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Contributed by Christophe TROESTLER</span>
<span class="hl com"> * Modified by Vladimir Silyaev</span>
<span class="hl com"> * Modified by Leonard Schneider</span>
<span class="hl com"> *)</span>

<span class="hl kwa">open</span> Bigarray

<span class="hl kwa">let</span> nsieve m <span class="hl sym">=</span>
  <span class="hl kwa">let</span> a <span class="hl sym">=</span> Array1.create Bigarray.int8_unsigned Bigarray.c_layout m <span class="hl kwa">in</span>
  Array1.fill a <span class="hl num">1</span><span class="hl sym">;</span>
  <span class="hl kwa">let</span> count <span class="hl sym">=</span> ref <span class="hl num">0</span> <span class="hl kwa">in</span>
  <span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">2</span> <span class="hl kwa">to</span> m <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl kwa">do</span>
      <span class="hl kwa">if</span> a.<span class="hl sym">{</span>i<span class="hl sym">} =</span> <span class="hl num">1</span> <span class="hl kwa">then</span> <span class="hl sym">(</span>
      incr count<span class="hl sym">;</span>
      <span class="hl kwa">let</span> j <span class="hl sym">=</span> <span class="hl kwd">ref</span><span class="hl sym">(</span>i <span class="hl kwa">lsl</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">in</span>
      <span class="hl kwa">while</span> <span class="hl sym">!</span>j <span class="hl sym">&lt;</span> m <span class="hl kwa">do</span>
        a.<span class="hl sym">{!</span>j<span class="hl sym">} &lt;-</span> <span class="hl num">0</span><span class="hl sym">;</span>
        j <span class="hl sym">:= !</span>j<span class="hl sym">+</span>i
      <span class="hl kwa">done</span><span class="hl sym">;</span>
    <span class="hl sym">)</span>
  <span class="hl kwa">done</span><span class="hl sym">;</span>
  Printf.printf <span class="hl str">&quot;Primes up to %8u %8u</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> m <span class="hl sym">!</span>count


<span class="hl kwa">let</span> <span class="hl sym">() =</span>
  <span class="hl com">(* Use [Array.get] so it raises an exception even if compiled with -unsafe *)</span>
  <span class="hl kwa">let</span> n <span class="hl sym">=</span> <span class="hl kwa">try</span> <span class="hl kwd">int_of_string</span> <span class="hl sym">(</span>Array.get Sys.argv <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">with</span> _ <span class="hl sym">-&gt;</span> <span class="hl num">2</span> <span class="hl kwa">in</span>
  <span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> <span class="hl num">2</span> <span class="hl kwa">do</span> <span class="hl kwd">nsieve</span><span class="hl sym">(</span><span class="hl num">10000</span> <span class="hl kwa">lsl</span> <span class="hl sym">(</span>n<span class="hl sym">-</span>i<span class="hl sym">))</span> <span class="hl kwa">done</span>

