<span class="slc">;; nsieve benchmark for The Computer Language Shootout
</span><span class="slc">;; Written by Dima Dorfman, 2004
</span><span class="slc">;; Compile with bigloo: bigloo -Obench -unsafe -o nsieve_bigloo nsieve.scm
</span>
<span class="sym">(</span>module nsieve
	<span class="sym">(</span>extern <span class="sym">(</span>macro printf<span class="sym">::</span>int <span class="sym">(</span>string long long<span class="sym">)</span> <span class="str">&quot;printf&quot;</span><span class="sym">))
	(</span>main main<span class="sym">))</span> <span class="slc">; Bigloo wants this, but Gauche chokes on it. Sigh.
</span>
<span class="sym">(</span>define <span class="sym">(</span>nsieve m<span class="sym">)
  (</span>let <span class="sym">((</span>a <span class="sym">(</span>make<span class="sym">-</span>vector m #t<span class="sym">)))
    (</span>let loop <span class="sym">((</span>i <span class="num">2</span><span class="sym">) (</span>n <span class="num">0</span><span class="sym">))
      (</span><span class="kwa">if</span> <span class="sym">(&lt;</span> i m<span class="sym">)
	  (</span>begin
	    <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>vector<span class="sym">-</span>ref a i<span class="sym">)
		(</span>begin
		  <span class="sym">(</span>let clear <span class="sym">((</span>j <span class="sym">(+</span> i i<span class="sym">)))
		    (</span><span class="kwa">if</span> <span class="sym">(&lt;</span> j m<span class="sym">)
			(</span>begin
			  <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> a j #f<span class="sym">)
			  (</span>clear <span class="sym">(+</span> j i<span class="sym">)))))
		  (</span>loop <span class="sym">(+</span> <span class="num">1</span> i<span class="sym">) (+</span> <span class="num">1</span> n<span class="sym">)))
		(</span>loop <span class="sym">(+</span> <span class="num">1</span> i<span class="sym">)</span> n<span class="sym">)))
</span>	  n<span class="sym">))))

(</span>define <span class="sym">(</span>test n<span class="sym">)
  (</span>let<span class="sym">* ((</span>m <span class="sym">(* (</span><span class="kwa">expt</span> <span class="num">2</span> n<span class="sym">)</span> <span class="num">10000</span><span class="sym">))
	 (</span>count <span class="sym">(</span>nsieve m<span class="sym">)))
    (</span>printf #<span class="str">&quot;Primes up to %8d %8d</span><span class="esc">\n</span><span class="str">&quot;</span> m count<span class="sym">)))

(</span>define <span class="sym">(</span>main args<span class="sym">)
  (</span><span class="kwa">if</span> <span class="sym">(&lt; (</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">2</span><span class="sym">)
      (</span>begin <span class="sym">(</span>display <span class="str">&quot;An argument is required&quot;</span><span class="sym">) (</span>newline<span class="sym">)</span> <span class="num">2</span><span class="sym">)
      (</span>let <span class="sym">((</span>n <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">cadr</span> args<span class="sym">))))
	(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">not</span> n<span class="sym">)
	    (</span>begin <span class="sym">(</span>display <span class="str">&quot;An integer is required&quot;</span><span class="sym">) (</span>newline<span class="sym">)</span> <span class="num">2</span><span class="sym">)
	    (</span>begin
	      <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&gt;=</span> n <span class="num">0</span><span class="sym">) (</span>test n<span class="sym">))
	      (</span><span class="kwa">if</span> <span class="sym">(&gt;=</span> n <span class="num">1</span><span class="sym">) (</span>test <span class="sym">(-</span> n <span class="num">1</span><span class="sym">)))
	      (</span><span class="kwa">if</span> <span class="sym">(&gt;=</span> n <span class="num">2</span><span class="sym">) (</span>test <span class="sym">(-</span> n <span class="num">2</span><span class="sym">)))
</span>	      <span class="num">0</span><span class="sym">)))))</span>
