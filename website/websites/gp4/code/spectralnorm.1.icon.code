<span class="slc"># ----------------------------------------------------------------------</span>
<span class="slc"># The Great Computer Language Shootout</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc"># Contributed by Anthony Borla</span>
<span class="slc"># ----------------------------------------------------------------------</span>

<span class="kwa">link</span> printf

<span class="kwa">procedure</span> main<span class="sym">(</span>argv<span class="sym">)</span>
  <span class="kwa">local</span> N <span class="sym">;</span> N <span class="sym">:= +(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) |</span> <span class="num">100</span>

  printf<span class="sym">(</span><span class="str">&quot;%.9r</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> approximate<span class="sym">(</span>N<span class="sym">))</span>
<span class="kwa">end</span>

<span class="slc"># ---------------------------------</span>

<span class="kwa">procedure</span> approximate<span class="sym">(</span>n<span class="sym">)</span>
  <span class="kwa">local</span> u<span class="sym">,</span> v<span class="sym">,</span> vBv<span class="sym">,</span> vV<span class="sym">,</span> i <span class="sym">;</span> u <span class="sym">:=</span> <span class="kwb">list</span><span class="sym">(</span>n<span class="sym">,</span> <span class="num">1.0</span><span class="sym">) ;</span> v <span class="sym">:=</span> <span class="kwb">list</span><span class="sym">(</span>n<span class="sym">,</span> <span class="num">0.0</span><span class="sym">) ;</span> vBv <span class="sym">:=</span> <span class="num">0.0</span> <span class="sym">;</span> vV <span class="sym">:=</span> <span class="num">0.0</span>

  <span class="kwa">every</span> i <span class="sym">:=</span> <span class="num">1</span> <span class="kwa">to</span> <span class="num">10</span> <span class="kwa">do</span> <span class="sym">{</span> mulAtAv<span class="sym">(</span>n<span class="sym">,</span> u<span class="sym">,</span> v<span class="sym">) ;</span> mulAtAv<span class="sym">(</span>n<span class="sym">,</span> v<span class="sym">,</span> u<span class="sym">) }</span>
  <span class="kwa">every</span> i <span class="sym">:=</span> <span class="num">1</span> <span class="kwa">to</span> n <span class="kwa">do</span> <span class="sym">{</span> vBv <span class="sym">+:=</span> u<span class="sym">[</span>i<span class="sym">] *</span> v<span class="sym">[</span>i<span class="sym">] ;</span> vV <span class="sym">+:=</span> v<span class="sym">[</span>i<span class="sym">] *</span> v<span class="sym">[</span>i<span class="sym">] }</span>

  <span class="kwa">return</span> sqrt<span class="sym">(</span>vBv <span class="sym">/</span> vV<span class="sym">)</span>
<span class="kwa">end</span>

<span class="slc"># ---------------</span>

<span class="kwa">procedure</span> A<span class="sym">(</span>i<span class="sym">,</span> j<span class="sym">)</span>
  i <span class="sym">-:=</span> <span class="num">1.0</span> <span class="sym">;</span> j <span class="sym">-:=</span> <span class="num">1.0</span>
  <span class="kwa">return</span> <span class="num">1.0</span> <span class="sym">/ ((</span>i <span class="sym">+</span> j<span class="sym">) * (</span> i <span class="sym">+</span> j <span class="sym">+</span> <span class="num">1.0</span><span class="sym">) /</span> <span class="num">2.0</span> <span class="sym">+</span> i <span class="sym">+</span> <span class="num">1.0</span><span class="sym">)</span>
<span class="kwa">end</span>

<span class="slc"># ---------------</span>

<span class="kwa">procedure</span> mulAv<span class="sym">(</span>n<span class="sym">,</span> v<span class="sym">,</span> av<span class="sym">)</span>
  <span class="kwa">local</span> i<span class="sym">,</span> j
  <span class="kwa">every</span> i <span class="sym">:=</span> <span class="num">1</span> <span class="kwa">to</span> n <span class="kwa">do</span> <span class="sym">{</span> av<span class="sym">[</span>i<span class="sym">] :=</span> <span class="num">0.0</span> <span class="sym">;</span> <span class="kwa">every</span> j <span class="sym">:=</span> <span class="num">1</span> <span class="kwa">to</span> n <span class="kwa">do</span> <span class="sym">{</span> av<span class="sym">[</span>i<span class="sym">] +:=</span> A<span class="sym">(</span>i<span class="sym">,</span> j<span class="sym">) *</span> v<span class="sym">[</span>j<span class="sym">] } }</span>
<span class="kwa">end</span>

<span class="slc"># ---------------</span>

<span class="kwa">procedure</span> mulAtV<span class="sym">(</span>n<span class="sym">,</span> v<span class="sym">,</span> atv<span class="sym">)</span>
  <span class="kwa">local</span> i<span class="sym">,</span> j
  <span class="kwa">every</span> i <span class="sym">:=</span> <span class="num">1</span> <span class="kwa">to</span> n <span class="kwa">do</span> <span class="sym">{</span> atv<span class="sym">[</span>i<span class="sym">] :=</span> <span class="num">0.0</span> <span class="sym">;</span> <span class="kwa">every</span> j <span class="sym">:=</span> <span class="num">1</span> <span class="kwa">to</span> n <span class="kwa">do</span> <span class="sym">{</span> atv<span class="sym">[</span>i<span class="sym">] +:=</span> A<span class="sym">(</span>j<span class="sym">,</span> i<span class="sym">) *</span> v<span class="sym">[</span>j<span class="sym">] } }</span>
<span class="kwa">end</span>

<span class="slc"># ---------------</span>

<span class="kwa">procedure</span> mulAtAv<span class="sym">(</span>n<span class="sym">,</span> v<span class="sym">,</span> atav<span class="sym">)</span>
  <span class="kwa">local</span> i<span class="sym">,</span> u <span class="sym">;</span> u <span class="sym">:=</span> <span class="kwb">list</span><span class="sym">(</span>n<span class="sym">,</span> <span class="num">0.0</span><span class="sym">)</span>
  mulAv<span class="sym">(</span>n<span class="sym">,</span> v<span class="sym">,</span> u<span class="sym">) ;</span> mulAtV<span class="sym">(</span>n<span class="sym">,</span> u<span class="sym">,</span> atav<span class="sym">)</span>
<span class="kwa">end</span>

