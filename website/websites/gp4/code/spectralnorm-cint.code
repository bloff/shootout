<span class="com">/*</span>
<span class="com"> * The Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> * Contributed by Sebastien Loisel</span>
<span class="com"> * Modified by Isaac Gouy for CINT</span>
<span class="com"> */</span>

<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>
<span class="dir">#include &lt;math.h&gt;</span>

<span class="kwb">double</span> <span class="kwd">eval_A</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">,</span> <span class="kwb">int</span> j<span class="sym">) {</span> <span class="kwa">return</span> <span class="num">1.0</span><span class="sym">/((</span>i<span class="sym">+</span>j<span class="sym">)*(</span>i<span class="sym">+</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">)/</span><span class="num">2</span><span class="sym">+</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">); }</span>

<span class="kwb">void</span> <span class="kwd">eval_A_times_u</span><span class="sym">(</span><span class="kwb">int</span> N<span class="sym">,</span> <span class="kwb">const double</span> u<span class="sym">[],</span> <span class="kwb">double</span> Au<span class="sym">[])</span>
<span class="sym">{</span>
  <span class="kwb">int</span> i<span class="sym">,</span>j<span class="sym">;</span>
  <span class="kwa">for</span><span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>i<span class="sym">&lt;</span>N<span class="sym">;</span>i<span class="sym">++)</span>
    <span class="sym">{</span>
      Au<span class="sym">[</span>i<span class="sym">]=</span><span class="num">0</span><span class="sym">;</span>
      <span class="kwa">for</span><span class="sym">(</span>j<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>j<span class="sym">&lt;</span>N<span class="sym">;</span>j<span class="sym">++)</span> Au<span class="sym">[</span>i<span class="sym">]+=</span><span class="kwd">eval_A</span><span class="sym">(</span>i<span class="sym">,</span>j<span class="sym">)*</span>u<span class="sym">[</span>j<span class="sym">];</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">eval_At_times_u</span><span class="sym">(</span><span class="kwb">int</span> N<span class="sym">,</span> <span class="kwb">const double</span> u<span class="sym">[],</span> <span class="kwb">double</span> Au<span class="sym">[])</span>
<span class="sym">{</span>
  <span class="kwb">int</span> i<span class="sym">,</span>j<span class="sym">;</span>
  <span class="kwa">for</span><span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>i<span class="sym">&lt;</span>N<span class="sym">;</span>i<span class="sym">++)</span>
    <span class="sym">{</span>
      Au<span class="sym">[</span>i<span class="sym">]=</span><span class="num">0</span><span class="sym">;</span>
      <span class="kwa">for</span><span class="sym">(</span>j<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>j<span class="sym">&lt;</span>N<span class="sym">;</span>j<span class="sym">++)</span> Au<span class="sym">[</span>i<span class="sym">]+=</span><span class="kwd">eval_A</span><span class="sym">(</span>j<span class="sym">,</span>i<span class="sym">)*</span>u<span class="sym">[</span>j<span class="sym">];</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">eval_AtA_times_u</span><span class="sym">(</span><span class="kwb">const int</span> N<span class="sym">,</span> <span class="kwb">const double</span> u<span class="sym">[],</span> <span class="kwb">double</span> AtAu<span class="sym">[])</span>
<span class="sym">{</span> <span class="kwb">double</span> v<span class="sym">[</span>N<span class="sym">];</span> <span class="kwd">eval_A_times_u</span><span class="sym">(</span>N<span class="sym">,</span>u<span class="sym">,</span>v<span class="sym">);</span> <span class="kwd">eval_At_times_u</span><span class="sym">(</span>N<span class="sym">,</span>v<span class="sym">,</span>AtAu<span class="sym">); }</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[])</span>
<span class="sym">{</span>
  <span class="kwb">static const int</span> N <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">500</span><span class="sym">);</span>
  <span class="kwb">int</span> i<span class="sym">;</span>
  <span class="kwb">double</span> u<span class="sym">[</span>N<span class="sym">],</span>v<span class="sym">[</span>N<span class="sym">],</span>vBv<span class="sym">,</span>vv<span class="sym">;</span>
  <span class="kwa">for</span><span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>i<span class="sym">&lt;</span>N<span class="sym">;</span>i<span class="sym">++)</span> u<span class="sym">[</span>i<span class="sym">]=</span><span class="num">1</span><span class="sym">;</span>
  <span class="kwa">for</span><span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>i<span class="sym">&lt;</span><span class="num">10</span><span class="sym">;</span>i<span class="sym">++)</span>
    <span class="sym">{</span>
      <span class="kwd">eval_AtA_times_u</span><span class="sym">(</span>N<span class="sym">,</span>u<span class="sym">,</span>v<span class="sym">);</span>
      <span class="kwd">eval_AtA_times_u</span><span class="sym">(</span>N<span class="sym">,</span>v<span class="sym">,</span>u<span class="sym">);</span>
    <span class="sym">}</span>
  vBv<span class="sym">=</span>vv<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>
  <span class="kwa">for</span><span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>i<span class="sym">&lt;</span>N<span class="sym">;</span>i<span class="sym">++) {</span> vBv<span class="sym">+=</span>u<span class="sym">[</span>i<span class="sym">]*</span>v<span class="sym">[</span>i<span class="sym">];</span> vv<span class="sym">+=</span>v<span class="sym">[</span>i<span class="sym">]*</span>v<span class="sym">[</span>i<span class="sym">]; }</span>
  <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%0.9f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span><span class="kwd">sqrt</span><span class="sym">(</span>vBv<span class="sym">/</span>vv<span class="sym">));</span>
  <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

