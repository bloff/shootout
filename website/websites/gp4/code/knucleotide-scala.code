<span class="com">/* ------------------------------------------------------------------ */</span>
<span class="com">/* The Great Computer Language Shootout                               */</span>
<span class="com">/* http://shootout.alioth.debian.org/                                 */</span>
<span class="com">/*                                                                    */</span>
<span class="com">/* Contributed by Anthony Borla                                       */</span>
<span class="com">/* ------------------------------------------------------------------ */</span>

<span class="kwa">import</span> scala<span class="sym">.</span>collection<span class="sym">.</span>mutable<span class="sym">.</span><span class="kwc">HashMap</span><span class="sym">;</span>

<span class="kwa">object</span> knucleotide
<span class="sym">{</span>
  <span class="kwa">def</span> main<span class="sym">(</span>args<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]):</span> unit <span class="sym">=</span>
  <span class="sym">{</span>
    <span class="kwa">val</span> knuc<span class="sym">:</span> Knucleotide <span class="sym">=</span> <span class="kwa">new</span> Knucleotide<span class="sym">(</span>loadSequence<span class="sym">());</span>

    knuc<span class="sym">.</span>printFrequencies<span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
    knuc<span class="sym">.</span>printFrequencies<span class="sym">(</span><span class="num">2</span><span class="sym">);</span>

    knuc<span class="sym">.</span>printCount<span class="sym">(</span><span class="str">&quot;GGT&quot;</span><span class="sym">);</span>
    knuc<span class="sym">.</span>printCount<span class="sym">(</span><span class="str">&quot;GGTA&quot;</span><span class="sym">);</span>
    knuc<span class="sym">.</span>printCount<span class="sym">(</span><span class="str">&quot;GGTATT&quot;</span><span class="sym">);</span>
    knuc<span class="sym">.</span>printCount<span class="sym">(</span><span class="str">&quot;GGTATTTTAATT&quot;</span><span class="sym">);</span>
    knuc<span class="sym">.</span>printCount<span class="sym">(</span><span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="sym">);</span>
  <span class="sym">}</span>

  <span class="slc">// -------------</span>

  <span class="kwa">def</span> loadSequence<span class="sym">():</span> <span class="kwc">String</span> <span class="sym">=</span>
  <span class="sym">{</span>
    <span class="kwa">val</span> buffer<span class="sym">:</span> <span class="kwc">StringBuffer</span> <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">StringBuffer</span><span class="sym">();</span>

    <span class="kwa">var</span> line<span class="sym">:</span> <span class="kwc">String</span> <span class="sym">=</span> Console<span class="sym">.</span>readLine<span class="sym">;</span>

    <span class="kwa">while</span> <span class="sym">(!</span>line<span class="sym">.</span>startsWith<span class="sym">(</span><span class="str">&quot;&gt;THREE&quot;</span><span class="sym">))</span> line <span class="sym">=</span> Console<span class="sym">.</span>readLine<span class="sym">;</span>

    line <span class="sym">=</span> Console<span class="sym">.</span>readLine<span class="sym">;</span>

    <span class="kwa">while</span> <span class="sym">(</span>line <span class="sym">!=</span> null<span class="sym">)</span>
    <span class="sym">{</span>
      buffer<span class="sym">.</span>append<span class="sym">(</span>line<span class="sym">.</span>toUpperCase<span class="sym">);</span> line <span class="sym">=</span> Console<span class="sym">.</span>readLine<span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">return</span> buffer<span class="sym">.</span>toString<span class="sym">();</span>
  <span class="sym">}</span>
<span class="sym">}</span>

<span class="slc">// -------------------------------</span>

<span class="kwa">final class</span> Knucleotide<span class="sym">(</span>_sequence<span class="sym">:</span> <span class="kwc">String</span><span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwa">def</span> printFrequencies<span class="sym">(</span>k<span class="sym">:</span> <span class="kwb">int</span><span class="sym">):</span> unit <span class="sym">=</span>
  <span class="sym">{</span>
    <span class="kwa">val</span> countMap <span class="sym">=</span> generateCounts<span class="sym">(</span>k<span class="sym">);</span>
    <span class="kwa">val</span> countSum <span class="sym">=</span> countMap<span class="sym">.</span>values<span class="sym">.</span>foldLeft<span class="sym">[</span><span class="kwb">double</span><span class="sym">](</span><span class="num">0.0</span><span class="sym">)((</span>x<span class="sym">:</span> <span class="kwb">double</span><span class="sym">,</span> y<span class="sym">:</span> <span class="kwb">int</span><span class="sym">) =&gt;</span> x <span class="sym">+</span> y<span class="sym">);</span>
    <span class="kwa">val</span> freqList <span class="sym">=</span> countMap<span class="sym">.</span>toList<span class="sym">.</span>map<span class="sym">((</span>x<span class="sym">) =&gt;</span> Pair<span class="sym">(</span>x<span class="sym">.</span>_1<span class="sym">,</span> x<span class="sym">.</span>_2 <span class="sym">/</span> countSum <span class="sym">*</span> <span class="num">100.0</span><span class="sym">));</span>
    <span class="kwa">val</span> sortedFreqList <span class="sym">=</span> freqList<span class="sym">.</span>sort<span class="sym">((</span>x<span class="sym">,</span> y<span class="sym">) =&gt;</span> <span class="kwa">if</span> <span class="sym">(</span>x<span class="sym">.</span>_2 <span class="sym">==</span> y<span class="sym">.</span>_2<span class="sym">)</span> x<span class="sym">.</span>_1 <span class="sym">&gt;</span> y<span class="sym">.</span>_1 <span class="kwa">else</span> x<span class="sym">.</span>_2 <span class="sym">&gt;</span> y<span class="sym">.</span>_2<span class="sym">);</span>

    <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">val</span> Pair<span class="sym">(</span>k<span class="sym">:</span> <span class="kwc">String</span><span class="sym">,</span> v<span class="sym">:</span> <span class="kwb">double</span><span class="sym">) &lt;-</span> sortedFreqList<span class="sym">)</span>
    <span class="sym">{</span>
      Console<span class="sym">.</span>printf<span class="sym">(</span><span class="str">&quot;{0} {1,number,0.000}</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)(</span>k<span class="sym">,</span> v<span class="sym">);</span>
    <span class="sym">}</span>

    Console<span class="sym">.</span>println<span class="sym">;</span>
  <span class="sym">}</span>

  <span class="slc">// -------------</span>

  <span class="kwa">def</span> printCount<span class="sym">(</span>fragment<span class="sym">:</span> <span class="kwc">String</span><span class="sym">):</span> unit <span class="sym">=</span>
  <span class="sym">{</span>
    <span class="kwa">val</span> countMap <span class="sym">=</span> generateCounts<span class="sym">(</span>fragment<span class="sym">.</span>length<span class="sym">);</span> <span class="kwa">var</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

    <span class="kwa">if</span> <span class="sym">(</span>countMap<span class="sym">.</span>contains<span class="sym">(</span>fragment<span class="sym">))</span> count <span class="sym">=</span> countMap<span class="sym">(</span>fragment<span class="sym">);</span>

    Console<span class="sym">.</span>println<span class="sym">(</span>padl<span class="sym">(</span>count<span class="sym">,</span> <span class="num">8</span><span class="sym">,</span> <span class="str">' '</span><span class="sym">) +</span> fragment<span class="sym">);</span>
  <span class="sym">}</span>

  <span class="slc">// -------------</span>

  <span class="kwa">private def</span> generateCounts<span class="sym">(</span>length<span class="sym">:</span> <span class="kwb">int</span><span class="sym">):</span> <span class="kwc">HashMap</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">,</span> <span class="kwb">int</span><span class="sym">] =</span>
  <span class="sym">{</span>
    <span class="kwa">val</span> countMap<span class="sym">:</span> <span class="kwc">HashMap</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">,</span> <span class="kwb">int</span><span class="sym">] =</span> <span class="kwa">new</span> <span class="kwc">HashMap</span><span class="sym">();</span>

    <span class="kwa">var</span> i<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> <span class="kwa">val</span> last<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> sequence<span class="sym">.</span>length <span class="sym">-</span> length <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>

    <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> last<span class="sym">)</span>
    <span class="sym">{</span>
      <span class="kwa">var</span> key<span class="sym">:</span> <span class="kwc">String</span> <span class="sym">=</span> sequence<span class="sym">.</span>substring<span class="sym">(</span>i<span class="sym">,</span> i <span class="sym">+</span> length<span class="sym">);</span>

      <span class="kwa">if</span> <span class="sym">(</span>countMap<span class="sym">.</span>contains<span class="sym">(</span>key<span class="sym">))</span>
        countMap<span class="sym">.</span>update<span class="sym">(</span>key<span class="sym">,</span> countMap<span class="sym">(</span>key<span class="sym">) +</span> <span class="num">1</span><span class="sym">);</span>
      <span class="kwa">else</span>
        countMap<span class="sym">(</span>key<span class="sym">) =</span> <span class="num">1</span><span class="sym">;</span>

      i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">return</span> countMap<span class="sym">;</span>
  <span class="sym">}</span>

  <span class="slc">// -------------</span>

  <span class="kwa">private def</span> padl<span class="sym">(</span>v<span class="sym">:</span> <span class="kwc">Any</span><span class="sym">,</span> padlen<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,</span> padchar<span class="sym">:</span> <span class="kwb">char</span><span class="sym">):</span> <span class="kwc">String</span> <span class="sym">=</span>
  <span class="sym">{</span>
    <span class="kwa">val</span> s<span class="sym">:</span> <span class="kwc">String</span> <span class="sym">=</span> <span class="str">&quot;&quot;</span> <span class="sym">+</span> v<span class="sym">;</span> <span class="kwa">val</span> reqlen<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> s<span class="sym">.</span>length<span class="sym">() -</span> padlen<span class="sym">;</span>
    <span class="kwa">return if</span> <span class="sym">(</span>reqlen <span class="sym">&lt;</span> <span class="num">0</span><span class="sym">)</span> s <span class="sym">+</span> makeString<span class="sym">(</span><span class="kwc">Math</span><span class="sym">.</span>abs<span class="sym">(</span>reqlen<span class="sym">),</span> padchar<span class="sym">)</span> <span class="kwa">else</span> s<span class="sym">;</span>
  <span class="sym">}</span>

  <span class="slc">// -------------</span>

  <span class="kwa">private def</span> makeString<span class="sym">(</span>len<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,</span> fillchar<span class="sym">:</span> <span class="kwb">char</span><span class="sym">):</span> <span class="kwc">String</span> <span class="sym">=</span>
  <span class="sym">{</span>
    <span class="kwa">val</span> sb<span class="sym">:</span> <span class="kwc">StringBuffer</span> <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">StringBuffer</span><span class="sym">();</span> <span class="kwa">var</span> i<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> len<span class="sym">) {</span> sb<span class="sym">.</span>append<span class="sym">(</span>fillchar<span class="sym">);</span> i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">; }</span>
    <span class="kwa">return</span> sb<span class="sym">.</span>toString<span class="sym">();</span>
  <span class="sym">}</span>

  <span class="slc">// -------------</span>

  <span class="kwa">private val</span> sequence<span class="sym">:</span> <span class="kwc">String</span> <span class="sym">=</span> _sequence<span class="sym">;</span>
<span class="sym">}</span>

