<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">*/</span>

<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.</span>_
<span class="kwa">import</span> scala<span class="sym">.</span>collection<span class="sym">.</span>mutable<span class="sym">.</span>HashTable

<span class="kwa">object</span> knucleotide <span class="sym">{</span>

   <span class="kwa">var</span> sequence<span class="sym">:</span> <span class="kwc">String</span> <span class="sym">=</span> _

   <span class="kwa">def</span> main<span class="sym">(</span>args<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]) = {</span>
      <span class="kwa">val</span> r <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">BufferedReader</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwc">InputStreamReader</span><span class="sym">(</span><span class="kwc">System</span><span class="sym">.</span>in<span class="sym">))</span>
      findSequence<span class="sym">(</span><span class="str">&quot;&gt;THREE&quot;</span><span class="sym">,</span> r<span class="sym">)</span>
      sequence <span class="sym">=</span> nextSequence<span class="sym">(</span>r<span class="sym">)</span>
      r<span class="sym">.</span>close

      writeFrequencies<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
      writeFrequencies<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>

      writeCount<span class="sym">(</span><span class="str">&quot;GGT&quot;</span><span class="sym">)</span>
      writeCount<span class="sym">(</span><span class="str">&quot;GGTA&quot;</span><span class="sym">)</span>
      writeCount<span class="sym">(</span><span class="str">&quot;GGTATT&quot;</span><span class="sym">)</span>
      writeCount<span class="sym">(</span><span class="str">&quot;GGTATTTTAATT&quot;</span><span class="sym">)</span>
      writeCount<span class="sym">(</span><span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="sym">)</span>
   <span class="sym">}</span>

   <span class="kwa">def</span> findSequence<span class="sym">(</span>id<span class="sym">:</span> <span class="kwc">String</span><span class="sym">,</span> r<span class="sym">:</span> <span class="kwc">BufferedReader</span><span class="sym">):</span> Unit <span class="sym">= {</span>
      <span class="kwa">var</span> line <span class="sym">=</span> r<span class="sym">.</span>readLine
      <span class="kwa">while</span> <span class="sym">(</span>line <span class="sym">!=</span> null<span class="sym">) {</span>
         <span class="kwa">val</span> c <span class="sym">=</span> line<span class="sym">.</span>charAt<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
         <span class="kwa">if</span> <span class="sym">(</span>c <span class="sym">==</span> <span class="str">'&gt;'</span> <span class="sym">&amp;&amp;</span> line<span class="sym">.</span>startsWith<span class="sym">(</span>id<span class="sym">))</span> <span class="kwa">return</span>
         line <span class="sym">=</span> r<span class="sym">.</span>readLine
      <span class="sym">}</span>
   <span class="sym">}</span>

   <span class="kwa">def</span> nextSequence<span class="sym">(</span>r<span class="sym">:</span> <span class="kwc">BufferedReader</span><span class="sym">):</span> <span class="kwc">String</span> <span class="sym">= {</span>
      <span class="kwa">val</span> b <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">StringBuffer</span><span class="sym">()</span>

      <span class="kwa">var</span> line <span class="sym">=</span> r<span class="sym">.</span>readLine
      <span class="kwa">while</span> <span class="sym">(</span>line <span class="sym">!=</span> null<span class="sym">) {</span>
         <span class="kwa">val</span> c <span class="sym">=</span> line<span class="sym">.</span>charAt<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
         <span class="kwa">if</span> <span class="sym">(</span>c <span class="sym">==</span> <span class="str">'&gt;'</span><span class="sym">) {</span>
            <span class="kwa">return</span> b<span class="sym">.</span>toString
         <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
            <span class="kwa">if</span> <span class="sym">(</span>c <span class="sym">!=</span> <span class="str">';'</span><span class="sym">)</span> b<span class="sym">.</span>append<span class="sym">(</span>line<span class="sym">.</span>toUpperCase<span class="sym">)</span>
         <span class="sym">}</span>
         line <span class="sym">=</span> r<span class="sym">.</span>readLine
      <span class="sym">}</span>
      b<span class="sym">.</span>toString
   <span class="sym">}</span>

   <span class="kwa">def</span> generateFrequencies<span class="sym">(</span>length<span class="sym">:</span> <span class="kwb">int</span><span class="sym">) = {</span>
      <span class="kwa">val</span> bag<span class="sym">:</span> HashBag<span class="sym">[</span><span class="kwc">String</span><span class="sym">] =</span> <span class="kwa">new</span> HashBag<span class="sym">()</span>

      <span class="kwa">def</span> kFrequency<span class="sym">(</span>offset<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,</span> j<span class="sym">:</span> <span class="kwb">int</span><span class="sym">) = {</span>
         <span class="kwa">val</span> n <span class="sym">=</span> sequence<span class="sym">.</span>length <span class="sym">-</span> j <span class="sym">+</span> <span class="num">1</span>
         <span class="kwa">var</span> i <span class="sym">=</span> offset
         <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> n<span class="sym">){</span> bag <span class="sym">+=</span> sequence<span class="sym">.</span>substring<span class="sym">(</span>i<span class="sym">,</span>i<span class="sym">+</span>j<span class="sym">);</span> i <span class="sym">=</span> i<span class="sym">+</span>j <span class="sym">}</span>
      <span class="sym">}</span>

      <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">val</span> o <span class="sym">&lt;-</span> <span class="kwc">Iterator</span><span class="sym">.</span>range<span class="sym">(</span><span class="num">0</span><span class="sym">,</span>length<span class="sym">))</span> kFrequency<span class="sym">(</span>o<span class="sym">,</span>length<span class="sym">)</span>
      bag
   <span class="sym">}</span>

   <span class="kwa">def</span> writeFrequencies<span class="sym">(</span>j<span class="sym">:</span> <span class="kwb">int</span><span class="sym">) = {</span>
      <span class="kwa">val</span> bag <span class="sym">=</span> generateFrequencies<span class="sym">(</span>j<span class="sym">)</span>
      <span class="kwa">val</span> n <span class="sym">=</span> sequence<span class="sym">.</span>length <span class="sym">-</span> j <span class="sym">+</span> <span class="num">1.0</span>
      <span class="kwa">val</span> sortedValues <span class="sym">=</span> bag<span class="sym">.</span>elements<span class="sym">.</span>toList<span class="sym">.</span>sort<span class="sym">(</span>
         <span class="sym">(</span>a<span class="sym">,</span>b<span class="sym">) =&gt;</span> <span class="kwa">if</span> <span class="sym">(</span>a<span class="sym">.</span>value <span class="sym">==</span> b<span class="sym">.</span>value<span class="sym">)</span> a<span class="sym">.</span>key <span class="sym">&gt;</span> b<span class="sym">.</span>key
                  <span class="kwa">else</span> a<span class="sym">.</span>value <span class="sym">&gt;</span> b<span class="sym">.</span>value <span class="sym">)</span>

      <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">val</span> a <span class="sym">&lt;-</span> sortedValues<span class="sym">)</span>
         Console<span class="sym">.</span>printf<span class="sym">(</span><span class="str">&quot;{0} {1,number,0.000}</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> a<span class="sym">.</span>key<span class="sym">,</span> a<span class="sym">.</span>value <span class="sym">/</span> n <span class="sym">*</span> <span class="num">100.0</span><span class="sym">)</span>

      Console<span class="sym">.</span>println
   <span class="sym">}</span>

   <span class="kwa">def</span> writeCount<span class="sym">(</span>fragment<span class="sym">:</span> <span class="kwc">String</span><span class="sym">) = {</span>
      <span class="kwa">val</span> bag <span class="sym">=</span> generateFrequencies<span class="sym">(</span>fragment<span class="sym">.</span>length<span class="sym">)</span>
      Console<span class="sym">.</span>println<span class="sym">(</span> bag<span class="sym">.</span>findOccurrences<span class="sym">(</span>fragment<span class="sym">) +</span> <span class="str">&quot;</span><span class="esc">\t</span><span class="str">&quot;</span> <span class="sym">+</span> fragment <span class="sym">)</span>
   <span class="sym">}</span>
<span class="sym">}</span>


<span class="kwa">class</span> HashBag<span class="sym">[</span>A<span class="sym">]</span> <span class="kwa">extends</span> HashTable<span class="sym">[</span>A<span class="sym">] {</span>
   <span class="kwa">protected type</span> Entry <span class="sym">=</span> Counter<span class="sym">[</span>A<span class="sym">]</span>
   <span class="kwa">protected def</span> entryKey<span class="sym">(</span>e<span class="sym">:</span> Entry<span class="sym">) =</span> e<span class="sym">.</span>key
   <span class="kwa">def</span> elements <span class="sym">=</span> entries

   <span class="kwa">def</span> <span class="sym">+=(</span>elem<span class="sym">:</span> A<span class="sym">):</span> Unit <span class="sym">= {</span>
      <span class="kwa">var</span> bucket <span class="sym">=</span> table<span class="sym">(</span>index<span class="sym">(</span>elemHashCode<span class="sym">(</span>elem<span class="sym">)))</span>
      <span class="kwa">while</span> <span class="sym">(!</span>bucket<span class="sym">.</span>isEmpty<span class="sym">) {</span>
         <span class="kwa">if</span> <span class="sym">(</span>elemEquals<span class="sym">(</span>entryKey<span class="sym">(</span>bucket<span class="sym">.</span>head<span class="sym">),</span> elem<span class="sym">)){</span>
            bucket<span class="sym">.</span>head<span class="sym">.</span>inc
            <span class="kwa">return</span>
         <span class="sym">}</span>
         bucket <span class="sym">=</span> bucket<span class="sym">.</span>tail
      <span class="sym">}</span>
      addEntry<span class="sym">(</span><span class="kwa">new</span> Entry<span class="sym">(</span>elem<span class="sym">,</span> <span class="num">1</span><span class="sym">))</span>
   <span class="sym">}</span>

   <span class="kwa">def</span> findOccurrences<span class="sym">(</span>elem<span class="sym">:</span> A<span class="sym">):</span> <span class="kwb">int</span> <span class="sym">= {</span>
      <span class="kwa">var</span> bucket <span class="sym">=</span> table<span class="sym">(</span>index<span class="sym">(</span>elemHashCode<span class="sym">(</span>elem<span class="sym">)))</span>
      <span class="kwa">while</span> <span class="sym">(!</span>bucket<span class="sym">.</span>isEmpty<span class="sym">) {</span>
         <span class="kwa">if</span> <span class="sym">(</span>elemEquals<span class="sym">(</span>entryKey<span class="sym">(</span>bucket<span class="sym">.</span>head<span class="sym">),</span> elem<span class="sym">)){</span>
            <span class="kwa">return</span> bucket<span class="sym">.</span>head<span class="sym">.</span>value
         <span class="sym">}</span>
         bucket <span class="sym">=</span> bucket<span class="sym">.</span>tail
      <span class="sym">}</span>
      <span class="kwa">return</span> <span class="num">0</span>
   <span class="sym">}</span>

<span class="com">/*</span>
<span class="com">   def -=(elem: A): Unit = {</span>
<span class="com">      var bucket = table(index(elemHashCode(elem)))</span>
<span class="com">      while (!bucket.isEmpty) {</span>
<span class="com">         if (elemEquals(entryKey(bucket.head), elem)){</span>
<span class="com">            bucket.head.dec</span>
<span class="com">            if (bucket.head.value == 0) removeEntry(elem)</span>
<span class="com">            return</span>
<span class="com">         }</span>
<span class="com">         bucket = bucket.tail</span>
<span class="com">      }</span>
<span class="com">  }</span>
<span class="com">*/</span>
<span class="sym">}</span>

<span class="kwa">protected class</span> Counter<span class="sym">[</span>A<span class="sym">](</span>k<span class="sym">:</span> A<span class="sym">,</span> v<span class="sym">:</span> <span class="kwb">int</span><span class="sym">)</span> <span class="kwa">extends</span> AnyRef <span class="sym">{</span>
   <span class="kwa">def</span> key <span class="sym">=</span> k
   <span class="kwa">var</span> value <span class="sym">=</span> v
   <span class="kwa">def</span> inc <span class="sym">= {</span> value <span class="sym">=</span> value <span class="sym">+</span> <span class="num">1</span> <span class="sym">}</span>
   <span class="kwa">def</span> dec <span class="sym">= {</span> value <span class="sym">=</span> value <span class="sym">-</span> <span class="num">1</span> <span class="sym">}</span>
<span class="sym">}</span>
