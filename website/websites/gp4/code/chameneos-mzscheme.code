<span class="hl slc">;;; The Great Computer Language Shootout</span>
<span class="hl slc">;;; http://shootout.alioth.debian.org/</span>

<span class="hl sym">(</span>module chameneos mzscheme

  <span class="hl sym">(</span>define <span class="hl sym">(</span>change c1 c2<span class="hl sym">)</span>
    <span class="hl sym">(</span>case c1
      <span class="hl sym">[(</span>red<span class="hl sym">)</span>
       <span class="hl sym">(</span>case c2	 <span class="hl sym">[(</span>blue<span class="hl sym">) '</span>yellow<span class="hl sym">] [(</span>yellow<span class="hl sym">) '</span>blue<span class="hl sym">] [</span>else c1<span class="hl sym">])]</span>
      <span class="hl sym">[(</span>yellow<span class="hl sym">)</span>
       <span class="hl sym">(</span>case c2 <span class="hl sym">[(</span>blue<span class="hl sym">) '</span>red<span class="hl sym">] [(</span>red<span class="hl sym">) '</span>blue<span class="hl sym">] [</span>else c1<span class="hl sym">])]</span>
      <span class="hl sym">[(</span>blue<span class="hl sym">)</span>
       <span class="hl sym">(</span>case c2 <span class="hl sym">[(</span>yellow<span class="hl sym">) '</span>red<span class="hl sym">] [(</span>red<span class="hl sym">) '</span>yellow<span class="hl sym">] [</span>else c1<span class="hl sym">])]))</span>

  <span class="hl sym">(</span>define <span class="hl sym">(</span>place meeting-ch n<span class="hl sym">)</span>
    <span class="hl sym">(</span>thread
     <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">()</span>
       <span class="hl sym">(</span>let loop <span class="hl sym">([</span>n n<span class="hl sym">])</span>
	 <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>zero? n<span class="hl sym">)</span>
	     <span class="hl slc">;; Fade all:</span>
	     <span class="hl sym">(</span>let loop <span class="hl sym">()</span>
	       <span class="hl sym">(</span>let <span class="hl sym">([</span>c <span class="hl sym">(</span>channel-get meeting-ch<span class="hl sym">)])</span>
		 <span class="hl sym">(</span>channel-put <span class="hl sym">(</span><span class="hl kwa">car</span> c<span class="hl sym">)</span> #f<span class="hl sym">)</span>
		 <span class="hl sym">(</span>loop<span class="hl sym">)))</span>
	     <span class="hl slc">;; Let two meet:</span>
	     <span class="hl sym">(</span>let <span class="hl sym">([</span>c1 <span class="hl sym">(</span>channel-get meeting-ch<span class="hl sym">)]</span>
		   <span class="hl sym">[</span>c2 <span class="hl sym">(</span>channel-get meeting-ch<span class="hl sym">)])</span>
	       <span class="hl sym">(</span>channel-put <span class="hl sym">(</span><span class="hl kwa">car</span> c1<span class="hl sym">) (</span><span class="hl kwa">cdr</span> c2<span class="hl sym">))</span>
	       <span class="hl sym">(</span>channel-put <span class="hl sym">(</span><span class="hl kwa">car</span> c2<span class="hl sym">) (</span><span class="hl kwa">cdr</span> c1<span class="hl sym">))</span>
	       <span class="hl sym">(</span>loop <span class="hl sym">(</span>sub1 n<span class="hl sym">))))))))</span>

  <span class="hl sym">(</span>define <span class="hl sym">(</span>creature color meeting-ch result-ch<span class="hl sym">)</span>
    <span class="hl sym">(</span>thread
     <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">()</span>
       <span class="hl sym">(</span>let <span class="hl sym">([</span>ch <span class="hl sym">(</span>make-channel<span class="hl sym">)])</span>
	 <span class="hl sym">(</span>let loop <span class="hl sym">([</span>color color<span class="hl sym">][</span>met <span class="hl num">0</span><span class="hl sym">])</span>
	   <span class="hl sym">(</span>channel-put meeting-ch <span class="hl sym">(</span><span class="hl kwa">cons</span> ch color<span class="hl sym">))</span>
	   <span class="hl sym">(</span>let <span class="hl sym">([</span>other-color <span class="hl sym">(</span>channel-get ch<span class="hl sym">)])</span>
	     <span class="hl sym">(</span><span class="hl kwa">if</span> other-color
		 <span class="hl slc">;; Meet:</span>
		 <span class="hl sym">(</span>loop <span class="hl sym">(</span>change color other-color<span class="hl sym">) (</span>add1 met<span class="hl sym">))</span>
		 <span class="hl slc">;; Done:</span>
		 <span class="hl sym">(</span>channel-put result-ch met<span class="hl sym">))))))))</span>

  <span class="hl sym">(</span>let <span class="hl sym">([</span>result-ch <span class="hl sym">(</span>make-channel<span class="hl sym">)]</span>
	<span class="hl sym">[</span>meeting-ch <span class="hl sym">(</span>make-channel<span class="hl sym">)])</span>
    <span class="hl sym">(</span>place meeting-ch <span class="hl sym">(</span>string-<span class="hl sym">&gt;</span>number <span class="hl sym">(</span>vector-ref <span class="hl sym">(</span>current-<span class="hl kwa">command</span>-<span class="hl kwa">line</span>-arguments<span class="hl sym">)</span> <span class="hl num">0</span><span class="hl sym">)))</span>
    <span class="hl sym">(</span>creature <span class="hl sym">'</span>blue meeting-ch result-ch<span class="hl sym">)</span>
    <span class="hl sym">(</span>creature <span class="hl sym">'</span>red meeting-ch result-ch<span class="hl sym">)</span>
    <span class="hl sym">(</span>creature <span class="hl sym">'</span>yellow meeting-ch result-ch<span class="hl sym">)</span>
    <span class="hl sym">(</span>creature <span class="hl sym">'</span>blue meeting-ch result-ch<span class="hl sym">)</span>
    <span class="hl sym">(</span>printf <span class="hl str">&quot;~a</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl sym">(+ (</span>channel-get result-ch<span class="hl sym">)</span>
		      <span class="hl sym">(</span>channel-get result-ch<span class="hl sym">)</span>
		      <span class="hl sym">(</span>channel-get result-ch<span class="hl sym">)</span>
		      <span class="hl sym">(</span>channel-get result-ch<span class="hl sym">)))))</span>
