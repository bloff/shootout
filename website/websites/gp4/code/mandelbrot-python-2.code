<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://shootout.alioth.debian.org/</span>
<span class="hl slc">#</span>
<span class="hl slc"># contributed by Kevin Carson</span>

<span class="hl kwa">from</span> math <span class="hl kwa">import</span> sqrt
<span class="hl kwa">import</span> sys


<span class="hl kwa">class</span> mandelbrot <span class="hl sym">:</span>
    <span class="hl kwa">def</span> <span class="hl kwd">__init__</span><span class="hl sym">(</span>self<span class="hl sym">,</span> w<span class="hl sym">,</span> h<span class="hl sym">,</span> max_iterations<span class="hl sym">,</span> abs_limit<span class="hl sym">) :</span>
        self<span class="hl sym">.</span>w <span class="hl sym">=</span> w
        self<span class="hl sym">.</span>h <span class="hl sym">=</span> h
        self<span class="hl sym">.</span>max_iterations <span class="hl sym">=</span> max_iterations
        self<span class="hl sym">.</span>abs_limit <span class="hl sym">=</span> abs_limit

    <span class="hl kwa">def</span> <span class="hl kwd">calc_byte</span><span class="hl sym">(</span>self<span class="hl sym">,</span> bits<span class="hl sym">,</span> x<span class="hl sym">,</span> fy<span class="hl sym">) :</span>
        bit_accumulator <span class="hl sym">=</span> <span class="hl num">0</span>
        w <span class="hl sym">=</span> self<span class="hl sym">.</span>w
        abs_limit_sqrt <span class="hl sym">=</span> <span class="hl kwd">sqrt</span><span class="hl sym">(</span>self<span class="hl sym">.</span>abs_limit<span class="hl sym">)</span>
        max_iterations <span class="hl sym">=</span> self<span class="hl sym">.</span>max_iterations

        <span class="hl kwa">for</span> k <span class="hl kwa">in</span> <span class="hl kwb">xrange</span><span class="hl sym">(</span>x<span class="hl sym">,</span> x <span class="hl sym">+</span> bits<span class="hl sym">) :</span>
            z <span class="hl sym">=</span> <span class="hl num">0</span>j
            c <span class="hl sym">=</span> <span class="hl num">2.0</span> <span class="hl sym">*</span> k <span class="hl sym">/</span> w <span class="hl sym">-</span> <span class="hl num">1.5</span>  <span class="hl sym">+</span> fy

            bit_accumulator <span class="hl sym">&lt;&lt;=</span> <span class="hl num">1</span>

            <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">xrange</span><span class="hl sym">(</span>max_iterations<span class="hl sym">) :</span>
                z <span class="hl sym">=</span> z <span class="hl sym">*</span> z <span class="hl sym">+</span> c

                <span class="hl slc"># Python can natively handle complex numbers.  As such this</span>
                <span class="hl slc"># would be more reasonably written as &quot;abs(z) &gt;= abs_limit&quot; but</span>
                <span class="hl slc"># here it is implemented &quot;same way&quot;.</span>
                <span class="hl kwa">if</span> <span class="hl kwb">abs</span><span class="hl sym">(</span>z<span class="hl sym">) &gt;=</span> abs_limit_sqrt <span class="hl sym">:</span>
                    <span class="hl kwa">break</span>
            <span class="hl kwa">else</span> <span class="hl sym">:</span>
                bit_accumulator <span class="hl sym">|=</span> <span class="hl num">1</span>
        <span class="hl kwa">return</span> bit_accumulator


w <span class="hl sym">=</span> h <span class="hl sym">=</span> <span class="hl kwb">int</span><span class="hl sym">(</span>sys<span class="hl sym">.</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">])</span>

fractal <span class="hl sym">=</span> <span class="hl kwd">mandelbrot</span><span class="hl sym">(</span>w<span class="hl sym">,</span> h<span class="hl sym">,</span> <span class="hl num">50</span><span class="hl sym">,</span> <span class="hl num">4.0</span><span class="hl sym">)</span>

wtail <span class="hl sym">=</span> w <span class="hl sym">%</span> <span class="hl num">8</span>
calc_byte <span class="hl sym">=</span> fractal<span class="hl sym">.</span>calc_byte
cout <span class="hl sym">=</span> sys<span class="hl sym">.</span>stdout<span class="hl sym">.</span>write

<span class="hl kwd">cout</span><span class="hl sym">(</span><span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">%d %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl sym">% (</span>w<span class="hl sym">,</span> h<span class="hl sym">))</span>

<span class="hl kwa">if</span> wtail <span class="hl sym">!=</span> <span class="hl num">0</span> <span class="hl sym">:</span>
    wtail_offset <span class="hl sym">= (</span>w <span class="hl sym">//</span> <span class="hl num">8</span><span class="hl sym">) *</span> <span class="hl num">8</span>
    wtail_shift <span class="hl sym">=</span> <span class="hl num">8</span> <span class="hl sym">-</span> wtail

    <span class="hl kwa">for</span> y <span class="hl kwa">in</span> <span class="hl kwb">xrange</span><span class="hl sym">(</span>h<span class="hl sym">):</span>
        fy <span class="hl sym">=</span> <span class="hl num">2</span>j <span class="hl sym">*</span> y <span class="hl sym">/</span> h <span class="hl sym">-</span> <span class="hl num">1</span>j

        <span class="hl kwa">for</span> x <span class="hl kwa">in</span> <span class="hl kwb">xrange</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> wtail_offset<span class="hl sym">,</span> <span class="hl num">8</span><span class="hl sym">):</span>
            <span class="hl kwd">cout</span><span class="hl sym">(</span><span class="hl kwb">chr</span><span class="hl sym">(</span><span class="hl kwd">calc_byte</span><span class="hl sym">(</span><span class="hl num">8</span><span class="hl sym">,</span> x<span class="hl sym">,</span> fy<span class="hl sym">)))</span>

        <span class="hl kwd">cout</span><span class="hl sym">(</span><span class="hl kwb">chr</span><span class="hl sym">(</span><span class="hl kwd">calc_byte</span><span class="hl sym">(</span>wtail<span class="hl sym">,</span> wtail_offset<span class="hl sym">,</span> fy<span class="hl sym">) &lt;&lt;</span> wtail_shift<span class="hl sym">))</span>

<span class="hl kwa">else</span> <span class="hl sym">:</span>
    <span class="hl kwa">for</span> y <span class="hl kwa">in</span> <span class="hl kwb">xrange</span><span class="hl sym">(</span>h<span class="hl sym">):</span>
        fy <span class="hl sym">=</span> <span class="hl num">2</span>j <span class="hl sym">*</span> y <span class="hl sym">/</span> h <span class="hl sym">-</span> <span class="hl num">1</span>j

        <span class="hl kwa">for</span> x <span class="hl kwa">in</span> <span class="hl kwb">xrange</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> w<span class="hl sym">,</span> <span class="hl num">8</span><span class="hl sym">):</span>
            <span class="hl kwd">cout</span><span class="hl sym">(</span><span class="hl kwb">chr</span><span class="hl sym">(</span><span class="hl kwd">calc_byte</span><span class="hl sym">(</span><span class="hl num">8</span><span class="hl sym">,</span> x<span class="hl sym">,</span> fy<span class="hl sym">)))</span>
