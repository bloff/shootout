<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Isaac Gouy</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> Include<span class="hl sym">;</span>

<span class="hl kwb">void</span> main<span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">){</span>
   <span class="hl kwa">let</span> n <span class="hl sym">=</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span>parseInt<span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>

   <span class="hl slc">// create unit vector</span>
   <span class="hl kwa">let</span> u <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">double</span><span class="hl sym">[</span>n<span class="hl sym">];</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span>var i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>n<span class="hl sym">;</span> i<span class="hl sym">++)</span> u<span class="hl sym">[</span>i<span class="hl sym">] =</span>  <span class="hl num">1.0</span><span class="hl sym">;</span>

   <span class="hl slc">// 20 steps of the power method</span>
   <span class="hl kwa">let</span> v <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">double</span><span class="hl sym">[</span>n<span class="hl sym">];</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span>var i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span><span class="hl num">10</span><span class="hl sym">;</span> i<span class="hl sym">++) {</span>
      MultiplyAtAv<span class="hl sym">(</span>n<span class="hl sym">,</span>u<span class="hl sym">,</span>v<span class="hl sym">);</span>
      MultiplyAtAv<span class="hl sym">(</span>n<span class="hl sym">,</span>v<span class="hl sym">,</span>u<span class="hl sym">);</span>
   <span class="hl sym">}</span>

   <span class="hl slc">// B=AtA         A multiplied by A transposed</span>
   <span class="hl slc">// v.Bv /(v.v)   eigenvalue of v</span>
   var vBv <span class="hl sym">=</span> <span class="hl num">0.0</span><span class="hl sym">,</span> vv <span class="hl sym">=</span> <span class="hl num">0.0</span><span class="hl sym">;</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span>var i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>n<span class="hl sym">;</span> i<span class="hl sym">++) {</span>
      vBv <span class="hl sym">+=</span> u<span class="hl sym">[</span>i<span class="hl sym">]*</span>v<span class="hl sym">[</span>i<span class="hl sym">];</span>
      vv  <span class="hl sym">+=</span> v<span class="hl sym">[</span>i<span class="hl sym">]*</span>v<span class="hl sym">[</span>i<span class="hl sym">];</span>
   <span class="hl sym">}</span>

   println<span class="hl sym">(</span> <span class="hl kwc">Math</span><span class="hl sym">.</span>sqrt<span class="hl sym">(</span>vBv<span class="hl sym">/</span>vv<span class="hl sym">).</span>toStringWith<span class="hl sym">(</span><span class="hl num">9</span><span class="hl sym">) );</span>
<span class="hl sym">}</span>


<span class="hl com">/* return element i,j of infinite matrix A */</span>
<span class="hl kwb">double</span> A<span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">,</span> <span class="hl kwb">int</span> j<span class="hl sym">){</span>
   <span class="hl kwa">return</span> <span class="hl num">1.0</span><span class="hl sym">/((</span>i<span class="hl sym">+</span>j<span class="hl sym">)*(</span>i<span class="hl sym">+</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) /</span><span class="hl num">2</span> <span class="hl sym">+</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl com">/* multiply vector v by matrix A */</span>
<span class="hl kwb">void</span> MultiplyAv<span class="hl sym">(</span><span class="hl kwb">int</span> n<span class="hl sym">,</span> <span class="hl kwb">double</span><span class="hl sym">[]</span> v<span class="hl sym">,</span> <span class="hl kwb">double</span><span class="hl sym">[]</span> Av<span class="hl sym">){</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span>var i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>n<span class="hl sym">;</span> i<span class="hl sym">++){</span>
      Av<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl num">0.0</span><span class="hl sym">;</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span>var j<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> j<span class="hl sym">&lt;</span>n<span class="hl sym">;</span> j<span class="hl sym">++)</span> Av<span class="hl sym">[</span>i<span class="hl sym">] +=</span> A<span class="hl sym">(</span>i<span class="hl sym">,</span>j<span class="hl sym">)*</span>v<span class="hl sym">[</span>j<span class="hl sym">];</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl com">/* multiply vector v by matrix A transposed */</span>
<span class="hl kwb">void</span> MultiplyAtv<span class="hl sym">(</span><span class="hl kwb">int</span> n<span class="hl sym">,</span> <span class="hl kwb">double</span><span class="hl sym">[]</span> v<span class="hl sym">,</span> <span class="hl kwb">double</span><span class="hl sym">[]</span> Atv<span class="hl sym">){</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span>var i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span>i<span class="hl sym">&lt;</span>n<span class="hl sym">;</span>i<span class="hl sym">++){</span>
      Atv<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl num">0.0</span><span class="hl sym">;</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span>var j<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> j<span class="hl sym">&lt;</span>n<span class="hl sym">;</span> j<span class="hl sym">++)</span> Atv<span class="hl sym">[</span>i<span class="hl sym">] +=</span> A<span class="hl sym">(</span>j<span class="hl sym">,</span>i<span class="hl sym">)*</span>v<span class="hl sym">[</span>j<span class="hl sym">];</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl com">/* multiply vector v by matrix A and then by matrix A transposed */</span>
<span class="hl kwb">void</span> MultiplyAtAv<span class="hl sym">(</span><span class="hl kwb">int</span> n<span class="hl sym">,</span> <span class="hl kwb">double</span><span class="hl sym">[]</span> v<span class="hl sym">,</span> <span class="hl kwb">double</span><span class="hl sym">[]</span> AtAv<span class="hl sym">){</span>
   <span class="hl kwa">let</span> u <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">double</span><span class="hl sym">[</span>n<span class="hl sym">];</span>
   MultiplyAv<span class="hl sym">(</span>n<span class="hl sym">,</span>v<span class="hl sym">,</span>u<span class="hl sym">);</span>
   MultiplyAtv<span class="hl sym">(</span>n<span class="hl sym">,</span>u<span class="hl sym">,</span>AtAv<span class="hl sym">);</span>
<span class="hl sym">}</span>
