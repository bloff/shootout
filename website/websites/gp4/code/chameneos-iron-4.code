<span class="hl slc">#-- The Computer Language Shootout</span>
<span class="hl slc">#-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">#-- contributed by Tobias Polzin, translated from Mike Pall's Lua program</span>
<span class="hl slc">#-- modified by Josh Goldfoot to use ifs for the complement routine</span>

<span class="hl kwa">import</span> sys

N <span class="hl sym">=</span> <span class="hl kwb">int</span><span class="hl sym">(</span>sys<span class="hl sym">.</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">])</span>
first <span class="hl sym">=</span> <span class="hl kwa">None</span>
second <span class="hl sym">=</span> <span class="hl kwa">None</span>
meetings <span class="hl sym">=</span> <span class="hl num">0</span>

RED<span class="hl sym">,</span> BLUE<span class="hl sym">,</span> YELLOW <span class="hl sym">=</span> <span class="hl kwb">xrange</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">4</span><span class="hl sym">)</span>

<span class="hl slc">#-- Create a very social creature.</span>
<span class="hl kwa">def</span> <span class="hl kwd">creature</span><span class="hl sym">(</span>me<span class="hl sym">):</span>
    <span class="hl kwa">global</span> N<span class="hl sym">,</span> first<span class="hl sym">,</span> second<span class="hl sym">,</span> meetings
    met <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">while</span> <span class="hl num">1</span><span class="hl sym">:</span>
        <span class="hl slc">#-- Meet another creature.</span>

        <span class="hl slc">#-- Wait until meeting place clears.</span>
        <span class="hl kwa">while</span> second<span class="hl sym">:</span>
            <span class="hl kwa">yield None</span>

        other <span class="hl sym">=</span> first
        <span class="hl kwa">if</span> other<span class="hl sym">:</span>
            <span class="hl slc">#-- Hey, I found a new friend!</span>
            second <span class="hl sym">=</span> me
        <span class="hl kwa">else</span><span class="hl sym">:</span>
            <span class="hl slc"># -- Sniff, nobody here (yet).</span>
            <span class="hl kwa">if</span> N <span class="hl sym">&lt;=</span> <span class="hl num">0</span><span class="hl sym">:</span>
                <span class="hl slc">#-- Uh oh, the mall is closed.</span>
                meetings <span class="hl sym">+=</span> met
                <span class="hl kwa">yield None</span>

                <span class="hl slc"># The mall was closed, so everyone is faded.</span>
                <span class="hl kwa">raise</span> <span class="hl kwc">StopIteration</span>
            N <span class="hl sym">-=</span> <span class="hl num">1</span>
            first <span class="hl sym">=</span> me
            <span class="hl kwa">while not</span> second<span class="hl sym">:</span>
                <span class="hl kwa">yield None</span> <span class="hl slc">#-- Wait for another creature.</span>
            other <span class="hl sym">=</span> second

            first <span class="hl sym">=</span> <span class="hl kwa">None</span>
            second <span class="hl sym">=</span> <span class="hl kwa">None</span>
            <span class="hl kwa">yield None</span>

        <span class="hl slc"># perform meeting</span>
        met <span class="hl sym">+=</span> <span class="hl num">1</span>
        <span class="hl kwa">if</span> me <span class="hl sym">!=</span> other<span class="hl sym">:</span>
            <span class="hl kwa">if</span> me <span class="hl sym">==</span> BLUE<span class="hl sym">:</span>
                me <span class="hl sym">=</span> other <span class="hl sym">==</span> RED <span class="hl kwa">and</span> YELLOW <span class="hl kwa">or</span> RED
            <span class="hl kwa">elif</span> me <span class="hl sym">==</span> RED<span class="hl sym">:</span>
                me <span class="hl sym">=</span> other <span class="hl sym">==</span> BLUE <span class="hl kwa">and</span> YELLOW <span class="hl kwa">or</span> BLUE
            <span class="hl kwa">elif</span> me <span class="hl sym">==</span> YELLOW<span class="hl sym">:</span>
                me <span class="hl sym">=</span> other <span class="hl sym">==</span> BLUE <span class="hl kwa">and</span> RED <span class="hl kwa">or</span> BLUE

<span class="hl slc">#-- Trivial round-robin scheduler.</span>
<span class="hl kwa">def</span> <span class="hl kwd">schedule</span><span class="hl sym">(</span>threads<span class="hl sym">):</span>
    <span class="hl kwa">global</span> meetings
    <span class="hl kwa">try</span><span class="hl sym">:</span>
        <span class="hl kwa">while</span> <span class="hl num">1</span><span class="hl sym">:</span>
            <span class="hl kwa">for</span> thread <span class="hl kwa">in</span> threads<span class="hl sym">:</span>
                thread<span class="hl sym">.</span><span class="hl kwd">next</span><span class="hl sym">()</span>
    <span class="hl kwa">except</span> <span class="hl kwc">StopIteration</span><span class="hl sym">:</span>
        <span class="hl kwa">return</span> meetings

<span class="hl kwa">def</span> <span class="hl kwd">main</span><span class="hl sym">():</span>
    <span class="hl slc">#-- A bunch of colorful creatures.</span>
    threads <span class="hl sym">= [</span>
        <span class="hl kwd">creature</span><span class="hl sym">(</span>BLUE<span class="hl sym">),</span>
        <span class="hl kwd">creature</span><span class="hl sym">(</span>RED<span class="hl sym">),</span>
        <span class="hl kwd">creature</span><span class="hl sym">(</span>YELLOW<span class="hl sym">),</span>
        <span class="hl kwd">creature</span><span class="hl sym">(</span>BLUE<span class="hl sym">) ]</span>

    <span class="hl kwa">print</span> <span class="hl kwd">schedule</span><span class="hl sym">(</span>threads<span class="hl sym">)</span>

<span class="hl kwd">main</span><span class="hl sym">()</span>
