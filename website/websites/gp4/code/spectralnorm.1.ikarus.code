<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;</span>
<span class="hl slc">;; Derived by Michael D. Adams from the MzScheme variant</span>

<span class="hl sym">(</span>import <span class="hl sym">(</span>rnrs<span class="hl sym">))</span>

<span class="hl slc">;;; Stupid boiler-plate for formatting floating point value</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>roundto digits n<span class="hl sym">)</span>
  <span class="hl sym">(</span>let<span class="hl sym">* ([</span>e <span class="hl sym">(</span><span class="hl kwa">expt</span> <span class="hl num">10</span> digits<span class="hl sym">)]</span>
         <span class="hl sym">[</span>num <span class="hl sym">(</span>round <span class="hl sym">(</span><span class="hl kwa">abs</span> <span class="hl sym">(*</span> e <span class="hl sym">(</span>exact n<span class="hl sym">))))]</span>
         <span class="hl sym">[</span>str <span class="hl sym">(</span>number-<span class="hl sym">&gt;</span>string <span class="hl sym">(</span>mod num e<span class="hl sym">))])</span>
    <span class="hl sym">(</span>string-<span class="hl kwa">append</span>
     <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>negative? n<span class="hl sym">)</span> <span class="hl str">&quot;-&quot;</span> <span class="hl str">&quot;&quot;</span><span class="hl sym">)</span>
     <span class="hl sym">(</span>number-<span class="hl sym">&gt;</span>string <span class="hl sym">(</span>div num e<span class="hl sym">))</span>
     <span class="hl str">&quot;.&quot;</span>
     <span class="hl sym">(</span>make-string <span class="hl sym">(</span>- digits <span class="hl sym">(</span>string-<span class="hl kwa">length</span> str<span class="hl sym">))</span> #\0<span class="hl sym">)</span>
     str<span class="hl sym">)))</span>

<span class="hl slc">;; -------------------------------</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>approximate n<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>u <span class="hl sym">(</span>make-vector n <span class="hl num">1.0</span><span class="hl sym">))</span>
        <span class="hl sym">(</span>v <span class="hl sym">(</span>make-vector n <span class="hl num">0.0</span><span class="hl sym">)))</span>
    <span class="hl sym">(</span>do <span class="hl sym">((</span>i <span class="hl num">0</span> <span class="hl sym">(</span>fx<span class="hl sym">+</span> i <span class="hl num">1</span><span class="hl sym">)))</span>
        <span class="hl sym">((=</span> <span class="hl num">10</span> i<span class="hl sym">))</span>
      <span class="hl sym">(</span>mulAtAv n u v<span class="hl sym">)</span>
      <span class="hl sym">(</span>mulAtAv n v u<span class="hl sym">))</span>
    <span class="hl sym">(</span>let loop <span class="hl sym">([</span>i <span class="hl num">0</span><span class="hl sym">] [</span>vBv <span class="hl num">0.0</span><span class="hl sym">] [</span>vV <span class="hl num">0.0</span><span class="hl sym">])</span>
      <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(&lt;</span> i n<span class="hl sym">)</span>
          <span class="hl sym">(</span>loop <span class="hl sym">(</span>fx<span class="hl sym">+</span> i <span class="hl num">1</span><span class="hl sym">)</span>
                <span class="hl sym">(</span>fl<span class="hl sym">+</span> vBv <span class="hl sym">(</span>fl<span class="hl sym">* (</span>vector-ref u i<span class="hl sym">) (</span>vector-ref v i<span class="hl sym">)))</span>
                <span class="hl sym">(</span>fl<span class="hl sym">+</span> vV <span class="hl sym">(</span>fl<span class="hl sym">* (</span>vector-ref v i<span class="hl sym">) (</span>vector-ref v i<span class="hl sym">))))</span>
          <span class="hl sym">(</span>flsqrt <span class="hl sym">(</span>fl<span class="hl sym">/</span> vBv vV<span class="hl sym">))))))</span>

<span class="hl slc">;; --------------</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>A i j<span class="hl sym">)</span>
  <span class="hl sym">(/</span> <span class="hl num">1.0</span> <span class="hl sym">(</span>fx<span class="hl sym">+ (</span>fx<span class="hl sym">+ (</span>fxdiv <span class="hl sym">(</span>fx<span class="hl sym">* (</span>fx<span class="hl sym">+</span> i j<span class="hl sym">) (</span>fx<span class="hl sym">+ (</span>fx<span class="hl sym">+</span> i j<span class="hl sym">)</span> <span class="hl num">1</span><span class="hl sym">))</span> <span class="hl num">2</span><span class="hl sym">)</span> i<span class="hl sym">)</span> <span class="hl num">1</span><span class="hl sym">)))</span>

<span class="hl slc">;; --------------</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>mulAv n v av<span class="hl sym">)</span>
  <span class="hl sym">(</span>do <span class="hl sym">((</span>i <span class="hl num">0</span> <span class="hl sym">(</span>fx<span class="hl sym">+</span> i <span class="hl num">1</span><span class="hl sym">)))</span>
      <span class="hl sym">((=</span> n i<span class="hl sym">))</span>
    <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> av i <span class="hl num">0.0</span><span class="hl sym">)</span>
    <span class="hl sym">(</span>do <span class="hl sym">((</span>j <span class="hl num">0</span> <span class="hl sym">(</span>fx<span class="hl sym">+</span> j <span class="hl num">1</span><span class="hl sym">)))</span>
        <span class="hl sym">((=</span> n j<span class="hl sym">))</span>
      <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> av i <span class="hl sym">(</span>fl<span class="hl sym">+ (</span>vector-ref av i<span class="hl sym">) (</span>fl<span class="hl sym">* (</span>A i j<span class="hl sym">) (</span>vector-ref v j<span class="hl sym">)))))))</span>

<span class="hl slc">;; --------------</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>mulAtV n v atv<span class="hl sym">)</span>
  <span class="hl sym">(</span>do <span class="hl sym">((</span>i <span class="hl num">0</span> <span class="hl sym">(</span>fx<span class="hl sym">+</span> i <span class="hl num">1</span><span class="hl sym">)))</span>
      <span class="hl sym">((=</span> n i<span class="hl sym">))</span>
    <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> atv i <span class="hl num">0.0</span><span class="hl sym">)</span>
    <span class="hl sym">(</span>do <span class="hl sym">((</span>j <span class="hl num">0</span> <span class="hl sym">(</span>fx<span class="hl sym">+</span> j <span class="hl num">1</span><span class="hl sym">)))</span>
        <span class="hl sym">((=</span> n j<span class="hl sym">))</span>
      <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> atv i <span class="hl sym">(</span>fl<span class="hl sym">+ (</span>vector-ref atv i<span class="hl sym">) (</span>fl<span class="hl sym">* (</span>A j i<span class="hl sym">) (</span>vector-ref v j<span class="hl sym">)))))))</span>

<span class="hl slc">;; --------------</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>mulAtAv n v atav<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>u <span class="hl sym">(</span>make-vector n <span class="hl num">0.0</span><span class="hl sym">)))</span>
    <span class="hl sym">(</span>mulAv n v u<span class="hl sym">)</span>
    <span class="hl sym">(</span>mulAtV n u atav<span class="hl sym">)))</span>

<span class="hl slc">;; -------------------------------</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>main args<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>n <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(&lt; (</span><span class="hl kwa">length</span> args<span class="hl sym">)</span> <span class="hl num">2</span><span class="hl sym">)</span>
               <span class="hl num">100</span>
               <span class="hl sym">(</span>string-<span class="hl sym">&gt;</span>number <span class="hl sym">(</span><span class="hl kwa">cadr</span> args<span class="hl sym">)))))</span>
    <span class="hl sym">(</span>display <span class="hl sym">(</span>roundto <span class="hl num">9</span> <span class="hl sym">(</span>approximate n<span class="hl sym">))) (</span>newline<span class="hl sym">)))</span>

<span class="hl slc">; -------------------------------</span>

<span class="hl sym">(</span>main <span class="hl sym">(</span><span class="hl kwa">command</span>-<span class="hl kwa">line</span><span class="hl sym">))</span>
