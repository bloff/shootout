<span class="hl com">/*</span>
<span class="hl com">	The Computer Language Shootout</span>
<span class="hl com">	http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">	contributed by Jochen Hinrichsen</span>
<span class="hl com">*/</span>

<span class="hl kwc">public class</span> frequency <span class="hl sym">{</span>
    &#64;Property String s
    &#64;Property c<span class="hl sym">,</span> p

	<span class="hl slc">// Store string representation as Byte</span>
	<span class="hl kwc">public</span> <span class="hl kwb">void</span> <span class="hl kwd">setS</span><span class="hl sym">(</span>String rep<span class="hl sym">) {</span>
		s <span class="hl sym">=</span> rep
		<span class="hl slc">// Cannot call def method from here, aborts without warning/ error</span>
		c <span class="hl sym">=</span> rep<span class="hl sym">.</span><span class="hl kwd">getBytes</span><span class="hl sym">()[</span><span class="hl num">0</span><span class="hl sym">]</span>
	<span class="hl sym">}</span>

<span class="hl sym">}</span>

def NEWLINE <span class="hl sym">=</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">.</span><span class="hl kwd">getBytes</span><span class="hl sym">()[</span><span class="hl num">0</span><span class="hl sym">]</span>

def LINE_LENGTH <span class="hl sym">=</span> <span class="hl num">60</span>

<span class="hl slc">// Weighted selection from alphabet</span>
def ALU <span class="hl sym">=</span> <span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span> <span class="hl sym">+</span>
<span class="hl str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span> <span class="hl sym">+</span>
<span class="hl str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span> <span class="hl sym">+</span>
<span class="hl str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span> <span class="hl sym">+</span>
<span class="hl str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span> <span class="hl sym">+</span>
<span class="hl str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span> <span class="hl sym">+</span>
<span class="hl str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>
def ALUB <span class="hl sym">=</span> ALU<span class="hl sym">.</span><span class="hl kwd">getBytes</span><span class="hl sym">()</span>

def IUB <span class="hl sym">= [</span>
        <span class="hl kwa">new</span> <span class="hl kwd">frequency</span><span class="hl sym">(</span>s<span class="hl sym">:</span><span class="hl str">'a'</span><span class="hl sym">,</span> p<span class="hl sym">:</span><span class="hl num">0.27</span>d<span class="hl sym">),</span>
        <span class="hl kwa">new</span> <span class="hl kwd">frequency</span><span class="hl sym">(</span>s<span class="hl sym">:</span><span class="hl str">'c'</span><span class="hl sym">,</span> p<span class="hl sym">:</span><span class="hl num">0.12</span>d<span class="hl sym">),</span>
        <span class="hl kwa">new</span> <span class="hl kwd">frequency</span><span class="hl sym">(</span>s<span class="hl sym">:</span><span class="hl str">'g'</span><span class="hl sym">,</span> p<span class="hl sym">:</span><span class="hl num">0.12</span>d<span class="hl sym">),</span>
        <span class="hl kwa">new</span> <span class="hl kwd">frequency</span><span class="hl sym">(</span>s<span class="hl sym">:</span><span class="hl str">'t'</span><span class="hl sym">,</span> p<span class="hl sym">:</span><span class="hl num">0.27</span>d<span class="hl sym">),</span>

        <span class="hl kwa">new</span> <span class="hl kwd">frequency</span><span class="hl sym">(</span>s<span class="hl sym">:</span><span class="hl str">'B'</span><span class="hl sym">,</span> p<span class="hl sym">:</span><span class="hl num">0.02</span><span class="hl sym">),</span>
        <span class="hl kwa">new</span> <span class="hl kwd">frequency</span><span class="hl sym">(</span>s<span class="hl sym">:</span><span class="hl str">'D'</span><span class="hl sym">,</span> p<span class="hl sym">:</span><span class="hl num">0.02</span><span class="hl sym">),</span>
        <span class="hl kwa">new</span> <span class="hl kwd">frequency</span><span class="hl sym">(</span>s<span class="hl sym">:</span><span class="hl str">'H'</span><span class="hl sym">,</span> p<span class="hl sym">:</span><span class="hl num">0.02</span><span class="hl sym">),</span>
        <span class="hl kwa">new</span> <span class="hl kwd">frequency</span><span class="hl sym">(</span>s<span class="hl sym">:</span><span class="hl str">'K'</span><span class="hl sym">,</span> p<span class="hl sym">:</span><span class="hl num">0.02</span><span class="hl sym">),</span>
        <span class="hl kwa">new</span> <span class="hl kwd">frequency</span><span class="hl sym">(</span>s<span class="hl sym">:</span><span class="hl str">'M'</span><span class="hl sym">,</span> p<span class="hl sym">:</span><span class="hl num">0.02</span><span class="hl sym">),</span>
        <span class="hl kwa">new</span> <span class="hl kwd">frequency</span><span class="hl sym">(</span>s<span class="hl sym">:</span><span class="hl str">'N'</span><span class="hl sym">,</span> p<span class="hl sym">:</span><span class="hl num">0.02</span><span class="hl sym">),</span>
        <span class="hl kwa">new</span> <span class="hl kwd">frequency</span><span class="hl sym">(</span>s<span class="hl sym">:</span><span class="hl str">'R'</span><span class="hl sym">,</span> p<span class="hl sym">:</span><span class="hl num">0.02</span><span class="hl sym">),</span>
        <span class="hl kwa">new</span> <span class="hl kwd">frequency</span><span class="hl sym">(</span>s<span class="hl sym">:</span><span class="hl str">'S'</span><span class="hl sym">,</span> p<span class="hl sym">:</span><span class="hl num">0.02</span><span class="hl sym">),</span>
        <span class="hl kwa">new</span> <span class="hl kwd">frequency</span><span class="hl sym">(</span>s<span class="hl sym">:</span><span class="hl str">'V'</span><span class="hl sym">,</span> p<span class="hl sym">:</span><span class="hl num">0.02</span><span class="hl sym">),</span>
        <span class="hl kwa">new</span> <span class="hl kwd">frequency</span><span class="hl sym">(</span>s<span class="hl sym">:</span><span class="hl str">'W'</span><span class="hl sym">,</span> p<span class="hl sym">:</span><span class="hl num">0.02</span><span class="hl sym">),</span>
        <span class="hl kwa">new</span> <span class="hl kwd">frequency</span><span class="hl sym">(</span>s<span class="hl sym">:</span><span class="hl str">'Y'</span><span class="hl sym">,</span> p<span class="hl sym">:</span><span class="hl num">0.02</span><span class="hl sym">)</span>
<span class="hl sym">]</span>

def HomoSapiens <span class="hl sym">= [</span>
        <span class="hl kwa">new</span> <span class="hl kwd">frequency</span><span class="hl sym">(</span>s<span class="hl sym">:</span><span class="hl str">'a'</span><span class="hl sym">,</span> p<span class="hl sym">:</span><span class="hl num">0.3029549426680</span>d<span class="hl sym">),</span>
        <span class="hl kwa">new</span> <span class="hl kwd">frequency</span><span class="hl sym">(</span>s<span class="hl sym">:</span><span class="hl str">'c'</span><span class="hl sym">,</span> p<span class="hl sym">:</span><span class="hl num">0.1979883004921</span>d<span class="hl sym">),</span>
        <span class="hl kwa">new</span> <span class="hl kwd">frequency</span><span class="hl sym">(</span>s<span class="hl sym">:</span><span class="hl str">'g'</span><span class="hl sym">,</span> p<span class="hl sym">:</span><span class="hl num">0.1975473066391</span>d<span class="hl sym">),</span>
        <span class="hl kwa">new</span> <span class="hl kwd">frequency</span><span class="hl sym">(</span>s<span class="hl sym">:</span><span class="hl str">'t'</span><span class="hl sym">,</span> p<span class="hl sym">:</span><span class="hl num">0.3015094502008</span>d<span class="hl sym">)</span>
<span class="hl sym">]</span>

def BUFFER_SIZE <span class="hl sym">=</span> <span class="hl num">8192</span>
def index <span class="hl sym">=</span> <span class="hl num">0</span>
def bbuffer <span class="hl sym">=</span> <span class="hl kwa">new</span> byte<span class="hl sym">[</span>BUFFER_SIZE<span class="hl sym">]</span>

<span class="hl slc">// pseudo-random number generator</span>
def IM <span class="hl sym">=</span> <span class="hl num">139968</span>
def IA <span class="hl sym">=</span> <span class="hl num">3877</span>
def IC <span class="hl sym">=</span> <span class="hl num">29573</span>
def last <span class="hl sym">=</span> <span class="hl num">42</span>

def <span class="hl kwd">random</span><span class="hl sym">(</span>def max<span class="hl sym">) {</span>
    last <span class="hl sym">= (</span>last <span class="hl sym">*</span> IA <span class="hl sym">+</span> IC<span class="hl sym">) %</span> IM
    max <span class="hl sym">*</span> last <span class="hl sym">/</span> IM
<span class="hl sym">}</span>


def <span class="hl kwd">makeCumulative</span><span class="hl sym">(</span>a<span class="hl sym">) {</span>
        def cp <span class="hl sym">=</span> <span class="hl num">0.0</span>d
        <span class="hl kwa">for</span> <span class="hl sym">(</span>i in <span class="hl num">0</span><span class="hl sym">..&lt;</span>a<span class="hl sym">.</span><span class="hl kwd">size</span><span class="hl sym">()) {</span>
            cp <span class="hl sym">+=</span> a<span class="hl sym">[</span>i<span class="hl sym">].</span>p
            a<span class="hl sym">[</span>i<span class="hl sym">].</span>p <span class="hl sym">=</span> cp
        <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl slc">// select a random frequency.c</span>
def <span class="hl kwd">selectRandom</span><span class="hl sym">(</span>a<span class="hl sym">) {</span>
    def len <span class="hl sym">=</span> a<span class="hl sym">.</span><span class="hl kwd">size</span><span class="hl sym">()</span>
    def r <span class="hl sym">=</span> <span class="hl kwd">random</span><span class="hl sym">(</span><span class="hl num">1.0</span>d<span class="hl sym">)</span>
    <span class="hl kwa">for</span> <span class="hl sym">(</span>i in <span class="hl num">0</span><span class="hl sym">..&lt;</span>len<span class="hl sym">)</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>r <span class="hl sym">&lt;</span> a<span class="hl sym">[</span>i<span class="hl sym">].</span>p<span class="hl sym">)</span>
            <span class="hl kwa">return</span> a<span class="hl sym">[</span>i<span class="hl sym">].</span>c
    <span class="hl kwa">return</span> a<span class="hl sym">[</span>len <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">].</span>c
<span class="hl sym">}</span>

def <span class="hl kwd">makeRepeatFasta</span><span class="hl sym">(</span>id<span class="hl sym">,</span> desc<span class="hl sym">,</span> alu<span class="hl sym">,</span> n<span class="hl sym">,</span> writer<span class="hl sym">) {</span>
	index <span class="hl sym">=</span> <span class="hl num">0</span>
	<span class="hl kwb">int</span> m <span class="hl sym">=</span> <span class="hl num">0</span>
	<span class="hl kwb">int</span> k <span class="hl sym">=</span> <span class="hl num">0</span>
	<span class="hl kwb">int</span> kn <span class="hl sym">=</span> ALUB<span class="hl sym">.</span>length
	writer <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;&gt;&quot;</span> <span class="hl sym">+</span> id <span class="hl sym">+</span> <span class="hl str">&quot; &quot;</span> <span class="hl sym">+</span> desc <span class="hl sym">+</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
	<span class="hl kwa">while</span> <span class="hl sym">(</span>n <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">) {</span>
			m <span class="hl sym">= (</span>n <span class="hl sym">&lt;</span> LINE_LENGTH<span class="hl sym">)</span> ? n <span class="hl sym">:</span> LINE_LENGTH
			<span class="hl kwa">if</span> <span class="hl sym">(</span>BUFFER_SIZE <span class="hl sym">-</span> index <span class="hl sym">&lt;</span> m<span class="hl sym">){</span>
					writer<span class="hl sym">.</span><span class="hl kwd">write</span><span class="hl sym">(</span>bbuffer<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> index<span class="hl sym">)</span>
					index <span class="hl sym">=</span> <span class="hl num">0</span>
			<span class="hl sym">}</span>
			<span class="hl kwa">for</span> <span class="hl sym">(</span>i in <span class="hl num">0</span><span class="hl sym">..&lt;</span>m<span class="hl sym">) {</span>
					<span class="hl kwa">if</span> <span class="hl sym">(</span>k <span class="hl sym">==</span> kn<span class="hl sym">)</span> k <span class="hl sym">=</span> <span class="hl num">0</span>
					bbuffer<span class="hl sym">[</span>index<span class="hl sym">++] =</span> ALUB<span class="hl sym">[</span>k<span class="hl sym">]</span>
					k<span class="hl sym">++</span>
			<span class="hl sym">}</span>
			bbuffer<span class="hl sym">[</span>index<span class="hl sym">++] =</span> NEWLINE
			n <span class="hl sym">-=</span> LINE_LENGTH
	<span class="hl sym">}</span>
	<span class="hl kwa">if</span><span class="hl sym">(</span>index <span class="hl sym">!=</span> <span class="hl num">0</span><span class="hl sym">)</span> writer<span class="hl sym">.</span><span class="hl kwd">write</span><span class="hl sym">(</span>bbuffer<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> index<span class="hl sym">)</span>
<span class="hl sym">}</span>

def <span class="hl kwd">makeRandomFasta</span><span class="hl sym">(</span>id<span class="hl sym">,</span> desc<span class="hl sym">,</span> a<span class="hl sym">,</span> n<span class="hl sym">,</span> writer<span class="hl sym">) {</span>
	index <span class="hl sym">=</span> <span class="hl num">0</span>
	<span class="hl kwb">int</span> m <span class="hl sym">=</span> <span class="hl num">0</span>
	writer <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;&gt;&quot;</span> <span class="hl sym">+</span> id <span class="hl sym">+</span> <span class="hl str">&quot; &quot;</span> <span class="hl sym">+</span> desc <span class="hl sym">+</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
	<span class="hl kwa">while</span> <span class="hl sym">(</span>n <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">) {</span>
			m <span class="hl sym">= (</span>n <span class="hl sym">&lt;</span> LINE_LENGTH<span class="hl sym">)</span> ? n <span class="hl sym">:</span> LINE_LENGTH
			<span class="hl kwa">if</span> <span class="hl sym">(</span>BUFFER_SIZE <span class="hl sym">-</span> index <span class="hl sym">&lt;</span> m<span class="hl sym">){</span>
					writer<span class="hl sym">.</span><span class="hl kwd">write</span><span class="hl sym">(</span>bbuffer<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> index<span class="hl sym">)</span>
					index <span class="hl sym">=</span> <span class="hl num">0</span>
			<span class="hl sym">}</span>
			<span class="hl kwa">for</span> <span class="hl sym">(</span>i in <span class="hl num">0</span><span class="hl sym">..&lt;</span>m<span class="hl sym">) {</span>
					bbuffer<span class="hl sym">[</span>index<span class="hl sym">++] =</span> <span class="hl kwd">selectRandom</span><span class="hl sym">(</span>a<span class="hl sym">)</span>
			<span class="hl sym">}</span>
			bbuffer<span class="hl sym">[</span>index<span class="hl sym">++] =</span> NEWLINE
			n <span class="hl sym">-=</span> LINE_LENGTH
	<span class="hl sym">}</span>
	<span class="hl kwa">if</span><span class="hl sym">(</span>index <span class="hl sym">!=</span> <span class="hl num">0</span><span class="hl sym">)</span> writer<span class="hl sym">.</span><span class="hl kwd">write</span><span class="hl sym">(</span>bbuffer<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> index<span class="hl sym">)</span>
<span class="hl sym">}</span>


<span class="hl kwd">makeCumulative</span><span class="hl sym">(</span>HomoSapiens<span class="hl sym">)</span>
<span class="hl kwd">makeCumulative</span><span class="hl sym">(</span>IUB<span class="hl sym">)</span>

def n <span class="hl sym">=</span> args<span class="hl sym">.</span>length <span class="hl sym">==</span> <span class="hl num">0</span> ? <span class="hl num">2500000</span> <span class="hl sym">:</span> args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">].</span><span class="hl kwd">toInteger</span><span class="hl sym">()</span>
def out <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BufferedOutputStream</span><span class="hl sym">(</span>System<span class="hl sym">.</span>out<span class="hl sym">)</span>

<span class="hl kwd">makeRepeatFasta</span><span class="hl sym">(</span><span class="hl str">&quot;ONE&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;Homo sapiens alu&quot;</span><span class="hl sym">,</span> ALU<span class="hl sym">,</span> n <span class="hl sym">*</span> <span class="hl num">2</span><span class="hl sym">,</span> out<span class="hl sym">)</span>
<span class="hl kwd">makeRandomFasta</span><span class="hl sym">(</span><span class="hl str">&quot;TWO&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;IUB ambiguity codes&quot;</span><span class="hl sym">,</span> IUB<span class="hl sym">,</span> n <span class="hl sym">*</span> <span class="hl num">3</span><span class="hl sym">,</span> out<span class="hl sym">)</span>
<span class="hl kwd">makeRandomFasta</span><span class="hl sym">(</span><span class="hl str">&quot;THREE&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;Homo sapiens frequency&quot;</span><span class="hl sym">,</span> HomoSapiens<span class="hl sym">,</span> n <span class="hl sym">*</span> <span class="hl num">5</span><span class="hl sym">,</span> out<span class="hl sym">)</span>
out<span class="hl sym">.</span><span class="hl kwd">flush</span><span class="hl sym">()</span>

<span class="hl slc">// EOF</span>

