<span class="hl com">/**</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * Based on the CAL Open Quark version</span>
<span class="hl com"> * Contributed by Magnus Byne.</span>
<span class="hl com"> */</span>
<span class="hl kwa">module</span> Spectralnorm<span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Prelude <span class="hl kwa">using</span>
    <span class="hl kwa">typeClass</span> <span class="hl sym">=</span> Inputable<span class="hl sym">,</span> Outputable<span class="hl sym">;</span>
    <span class="hl kwa">typeConstructor</span> <span class="hl sym">=</span> Double<span class="hl sym">,</span> Int<span class="hl sym">,</span> String<span class="hl sym">;</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> eager<span class="hl sym">,</span> fromInt<span class="hl sym">,</span> seq<span class="hl sym">,</span> stringToInt<span class="hl sym">;</span>
    <span class="hl sym">;</span>
<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Utilities<span class="hl sym">.</span>Math <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> sqrt<span class="hl sym">;</span>
    <span class="hl sym">;</span>
<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Collections<span class="hl sym">.</span>List <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> head<span class="hl sym">;</span>
    <span class="hl sym">;</span>
<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Utilities<span class="hl sym">.</span>MessageFormat <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> formatWithPattern<span class="hl sym">;</span>
    <span class="hl sym">;</span>
<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Utilities<span class="hl sym">.</span>Locale <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> invariantLocale<span class="hl sym">;</span>
    <span class="hl sym">;</span>
<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>IO<span class="hl sym">.</span>Console <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> printLine<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">data foreign unsafe import jvm</span> <span class="hl str">&quot;double[]&quot;</span> JVector <span class="hl kwa">deriving</span> Inputable<span class="hl sym">,</span> Outputable<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;newArray&quot;</span> newVector <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> JVector<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;subscriptArray&quot;</span> subscript <span class="hl sym">::</span> JVector <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Double<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;updateArray&quot;</span>
    update <span class="hl sym">::</span> JVector <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Double <span class="hl sym">-&gt;</span> Double<span class="hl sym">;</span>

<span class="hl com">/** get element i,j of infinite matrix A*/</span>
matrixA <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Double<span class="hl sym">;</span>
matrixA <span class="hl sym">!</span>i <span class="hl sym">!</span>j <span class="hl sym">=</span> <span class="hl num">1.0</span> <span class="hl sym">/</span> fromInt <span class="hl sym">((</span>i <span class="hl sym">+</span> j<span class="hl sym">) * (</span>i <span class="hl sym">+</span> j <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">) /</span> <span class="hl num">2</span> <span class="hl sym">+</span> i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">);</span>

<span class="hl com">/** multiply A by v*/</span>
multiplyAv <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> JVector <span class="hl sym">-&gt;</span> JVector <span class="hl sym">-&gt; ();</span>
multiplyAv <span class="hl sym">!</span>n <span class="hl sym">!</span>v <span class="hl sym">!</span>av <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        go <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt; ();</span>
        go <span class="hl sym">!</span>i <span class="hl sym">!</span>j <span class="hl sym">=</span>
            <span class="hl kwa">if</span> j <span class="hl sym">&lt;</span> n <span class="hl kwa">then</span>
                update
                    av
                    i
                    <span class="hl sym">(</span>av <span class="hl sym">`</span>subscript<span class="hl sym">`</span> i <span class="hl sym">+</span> matrixA i j <span class="hl sym">*</span> v <span class="hl sym">`</span>subscript<span class="hl sym">`</span> j<span class="hl sym">)</span>
                <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                go i <span class="hl sym">(</span>j <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
            <span class="hl kwa">else</span>
                <span class="hl kwa">let</span>
                    inc <span class="hl sym">::</span> Int<span class="hl sym">;</span>
                    inc <span class="hl sym">=</span> i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
                <span class="hl kwa">in</span>
                    <span class="hl kwa">if</span> inc <span class="hl sym">&lt;</span> n <span class="hl kwa">then</span>
                        update av inc <span class="hl num">0.0</span>
                        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                        go inc <span class="hl num">0</span>
                    <span class="hl kwa">else</span>
                        <span class="hl sym">()</span>
            <span class="hl sym">;</span>
    <span class="hl kwa">in</span>
        go <span class="hl sym">(-</span><span class="hl num">1</span><span class="hl sym">)</span> n
    <span class="hl sym">;</span>

<span class="hl com">/** multiply (Transpose A) by v*/</span>
multiplyAtv <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> JVector <span class="hl sym">-&gt;</span> JVector <span class="hl sym">-&gt; ();</span>
multiplyAtv <span class="hl sym">!</span>n <span class="hl sym">!</span>v <span class="hl sym">!</span>av <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        go <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt; ();</span>
        go <span class="hl sym">!</span>i <span class="hl sym">!</span>j <span class="hl sym">=</span>
            <span class="hl kwa">if</span> j <span class="hl sym">&lt;</span> n <span class="hl kwa">then</span>
                update
                    av
                    i
                    <span class="hl sym">(</span>av <span class="hl sym">`</span>subscript<span class="hl sym">`</span> i <span class="hl sym">+</span> matrixA j i <span class="hl sym">*</span> v <span class="hl sym">`</span>subscript<span class="hl sym">`</span> j<span class="hl sym">)</span>
                <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                go i <span class="hl sym">(</span>j <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
            <span class="hl kwa">else</span>
                <span class="hl kwa">let</span>
                    inc <span class="hl sym">::</span> Int<span class="hl sym">;</span>
                    inc <span class="hl sym">=</span> i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
                <span class="hl kwa">in</span>
                    <span class="hl kwa">if</span> inc <span class="hl sym">&lt;</span> n <span class="hl kwa">then</span>
                        update av inc <span class="hl num">0.0</span>
                        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                        go inc <span class="hl num">0</span>
                    <span class="hl kwa">else</span>
                        <span class="hl sym">()</span>
            <span class="hl sym">;</span>
    <span class="hl kwa">in</span>
        go <span class="hl sym">(-</span><span class="hl num">1</span><span class="hl sym">)</span> n
    <span class="hl sym">;</span>

<span class="hl com">/**(transpose A) * A * v*/</span>
multiplyAtAv <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> JVector <span class="hl sym">-&gt;</span> JVector <span class="hl sym">-&gt;</span> JVector <span class="hl sym">-&gt; ();</span>
multiplyAtAv <span class="hl sym">!</span>n <span class="hl sym">!</span>temp <span class="hl sym">!</span>v <span class="hl sym">!</span>result <span class="hl sym">=</span>
    multiplyAv n v temp
    <span class="hl sym">`</span>seq<span class="hl sym">`</span>
    multiplyAtv n temp result
    <span class="hl sym">;</span>

<span class="hl com">/**run n steps of the approximation*/</span>
approximate <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Double<span class="hl sym">;</span>
approximate <span class="hl sym">!</span>n <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        u <span class="hl sym">::</span> JVector<span class="hl sym">;</span>
        u <span class="hl sym">=</span> eager $ newVector n<span class="hl sym">;</span>

        v <span class="hl sym">::</span> JVector<span class="hl sym">;</span>
        v <span class="hl sym">=</span> eager $ newVector n<span class="hl sym">;</span>

        temp <span class="hl sym">::</span> JVector<span class="hl sym">;</span>
        temp <span class="hl sym">=</span> eager $ newVector n<span class="hl sym">;</span>

        doStep <span class="hl sym">::</span> Int <span class="hl sym">-&gt; ();</span>
        doStep <span class="hl sym">!</span>i <span class="hl sym">=</span>
            <span class="hl kwa">if</span> i <span class="hl sym">==</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
                <span class="hl sym">()</span>
            <span class="hl kwa">else</span>
                multiplyAtAv n temp u v
                <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                multiplyAtAv n temp v u
                <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                doStep <span class="hl sym">(</span>i <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span>
            <span class="hl sym">;</span>

        vbv <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Double <span class="hl sym">-&gt;</span> Double<span class="hl sym">;</span>
        vbv <span class="hl sym">!</span>i <span class="hl sym">!</span>sum <span class="hl sym">=</span>
            <span class="hl kwa">if</span> i <span class="hl sym">==</span> n <span class="hl kwa">then</span>
                sum
            <span class="hl kwa">else</span>
                vbv <span class="hl sym">(</span>i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">) (</span>sum <span class="hl sym">+</span> u <span class="hl sym">`</span>subscript<span class="hl sym">`</span> i <span class="hl sym">*</span> v <span class="hl sym">`</span>subscript<span class="hl sym">`</span> i<span class="hl sym">)</span>
            <span class="hl sym">;</span>

        vv <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Double <span class="hl sym">-&gt;</span> Double<span class="hl sym">;</span>
        vv <span class="hl sym">!</span>i <span class="hl sym">!</span>sum <span class="hl sym">=</span>
            <span class="hl kwa">if</span> i <span class="hl sym">==</span> n <span class="hl kwa">then</span>
                sum
            <span class="hl kwa">else</span>
                vv <span class="hl sym">(</span>i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">) (</span>sum <span class="hl sym">+</span> v <span class="hl sym">`</span>subscript<span class="hl sym">`</span> i <span class="hl sym">*</span> v <span class="hl sym">`</span>subscript<span class="hl sym">`</span> i<span class="hl sym">)</span>
            <span class="hl sym">;</span>

        initVector <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> JVector <span class="hl sym">-&gt; ();</span>
        initVector <span class="hl sym">!</span>i <span class="hl sym">!</span>size <span class="hl sym">!</span>v <span class="hl sym">=</span>
            <span class="hl kwa">if</span> i <span class="hl sym">==</span> size <span class="hl kwa">then</span>
                <span class="hl sym">()</span>
            <span class="hl kwa">else</span>
                update v i <span class="hl num">1.0</span>
                <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                initVector <span class="hl sym">(</span>i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span> size v
            <span class="hl sym">;</span>
    <span class="hl kwa">in</span>

        initVector <span class="hl num">0</span> n u
        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
        doStep <span class="hl num">10</span>
        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
        sqrt <span class="hl sym">(</span>vbv <span class="hl num">0 0.0</span> <span class="hl sym">/</span> vv <span class="hl num">0 0.0</span><span class="hl sym">)</span>
    <span class="hl sym">;</span>

main <span class="hl sym">:: [</span>String<span class="hl sym">] -&gt; ();</span>
<span class="hl kwa">public</span> main <span class="hl sym">!</span>args <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        n <span class="hl sym">::</span> Int<span class="hl sym">;</span>
        n <span class="hl sym">=</span> eager $ stringToInt <span class="hl sym">(</span>head args<span class="hl sym">);</span>
    <span class="hl kwa">in</span>
        printLine
            <span class="hl sym">(</span>formatWithPattern
                <span class="hl str">&quot;{0,number,#.000000000}&quot;</span>
                invariantLocale
                <span class="hl sym">{</span>#<span class="hl num">1</span> <span class="hl sym">=</span> approximate n<span class="hl sym">}</span>
            <span class="hl sym">)</span>
    <span class="hl sym">;</span>

