<span class="hl com">(* The Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Christophe Papazian</span>
<span class="hl com">   Decembre 2005</span>
<span class="hl com">*)</span>

<span class="hl com">(* please compile with -unsafe to optimize speed *)</span>

<span class="hl kwa">open</span> Array <span class="hl kwa">open</span> Printf

<span class="hl com">(*global variables*)</span>
<span class="hl kwa">let</span> n <span class="hl sym">=</span> <span class="hl kwa">try if</span> length Sys.argv<span class="hl sym">&gt;</span><span class="hl num">1</span> <span class="hl kwa">then</span> int_of_string Sys.argv.<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span><span class="hl kwa">else</span> <span class="hl num">7</span>  <span class="hl kwa">with</span> _<span class="hl sym">-&gt;</span><span class="hl num">7</span>
<span class="hl kwa">let</span> r <span class="hl sym">=</span> <span class="hl kwd">init</span><span class="hl sym">(</span>n<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">)(</span><span class="hl kwa">fun</span> x <span class="hl sym">-&gt;</span> x<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">and</span> p<span class="hl sym">=</span>init <span class="hl kwd">n</span><span class="hl sym">((+)</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">and</span> s<span class="hl sym">=</span>create n <span class="hl num">0</span>

<span class="hl com">(*pretty printing function*)</span>
<span class="hl kwa">let</span> <span class="hl kwd">q</span><span class="hl sym">() =</span> iter print_int p<span class="hl sym">;</span><span class="hl kwd">print_newline</span><span class="hl sym">()</span>

<span class="hl com">(*counting permutations*)</span>
<span class="hl kwa">let rec</span> a n <span class="hl sym">=</span> r.<span class="hl sym">(</span>n<span class="hl sym">)&lt;-(</span>r.<span class="hl sym">(</span>n<span class="hl sym">)+</span><span class="hl num">1</span><span class="hl sym">);</span>
  <span class="hl kwa">if</span> r.<span class="hl sym">(</span>n<span class="hl sym">)=</span>n<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl kwa">then</span> <span class="hl kwd">a</span><span class="hl sym">(</span>n<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>
  <span class="hl kwa">else</span> <span class="hl sym">(</span><span class="hl kwa">if</span> r.<span class="hl sym">(</span>n<span class="hl sym">)=</span>n <span class="hl kwa">then</span> r.<span class="hl sym">(</span>n<span class="hl sym">)&lt;-</span><span class="hl num">0</span><span class="hl sym">;</span>n<span class="hl sym">)</span>

<span class="hl com">(*swapping arrays*)</span>
<span class="hl kwa">let</span> w m<span class="hl sym">=</span> <span class="hl kwa">let rec</span> a i<span class="hl sym">=</span>i<span class="hl sym">=</span>n<span class="hl sym">||(</span>p.<span class="hl sym">(</span>i<span class="hl sym">)&lt;&gt;(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)&amp;&amp;</span><span class="hl kwd">a</span><span class="hl sym">(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">))</span><span class="hl kwa">in</span>
<span class="hl kwa">if</span> a <span class="hl num">0</span> <span class="hl kwa">then</span>
  <span class="hl sym">(</span><span class="hl kwa">for</span> i<span class="hl sym">=</span><span class="hl num">0</span> <span class="hl kwa">to</span> n<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl kwa">do</span> s.<span class="hl sym">(</span>i<span class="hl sym">)&lt;-</span>p.<span class="hl sym">(</span>i<span class="hl sym">)</span><span class="hl kwa">done</span><span class="hl sym">;</span>
   <span class="hl kwa">let rec</span> y m<span class="hl sym">=</span> <span class="hl kwa">let</span> x<span class="hl sym">=</span>s.<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)-</span><span class="hl num">1</span> <span class="hl kwa">in</span>
   <span class="hl kwa">if</span> x<span class="hl sym">=</span><span class="hl num">0</span> <span class="hl kwa">then</span> m
   <span class="hl kwa">else</span> <span class="hl sym">(</span><span class="hl kwa">for</span> i<span class="hl sym">=</span><span class="hl num">0</span> <span class="hl kwa">to</span><span class="hl sym">((</span>x<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">lsr</span> <span class="hl num">1</span><span class="hl sym">)</span><span class="hl kwa">do</span>
	   <span class="hl kwa">let</span> t<span class="hl sym">=</span>s.<span class="hl sym">(</span>i<span class="hl sym">)</span><span class="hl kwa">in let</span> o <span class="hl sym">=</span> x<span class="hl sym">-</span>i <span class="hl kwa">in</span> s.<span class="hl sym">(</span>i<span class="hl sym">)&lt;-</span>s.<span class="hl sym">(</span>o<span class="hl sym">);</span>
	   s.<span class="hl sym">(</span>o<span class="hl sym">)&lt;-</span>t <span class="hl kwa">done</span><span class="hl sym">;</span><span class="hl kwd">y</span><span class="hl sym">(</span>m<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">))</span>
   <span class="hl kwa">in</span> y m<span class="hl sym">)</span> <span class="hl kwa">else</span> <span class="hl num">0</span>

<span class="hl com">(*building new permutations*)</span>
<span class="hl kwa">let</span> x n <span class="hl sym">=</span>
  <span class="hl kwa">for</span> i<span class="hl sym">=</span><span class="hl num">1</span> <span class="hl kwa">to</span> n<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl kwa">do let</span> t<span class="hl sym">=</span>p.<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span><span class="hl kwa">in</span>
  <span class="hl kwa">for</span> j<span class="hl sym">=</span><span class="hl num">0</span> <span class="hl kwa">to</span> i<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl kwa">do</span> p.<span class="hl sym">(</span>j<span class="hl sym">)&lt;-</span>p.<span class="hl sym">(</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">done</span><span class="hl sym">;</span> p.<span class="hl sym">(</span>i<span class="hl sym">)&lt;-</span>t <span class="hl kwa">done</span>

<span class="hl com">(* main *)</span>
<span class="hl kwa">let</span> _ <span class="hl sym">=</span> <span class="hl kwa">let rec</span> f i m z<span class="hl sym">=</span> <span class="hl com">(* printing loop *)</span>
  <span class="hl kwa">if</span> i <span class="hl sym">&lt;=</span>n <span class="hl sym">&amp;&amp;</span> z<span class="hl sym">&gt;</span><span class="hl num">0</span>
  <span class="hl kwa">then</span><span class="hl sym">(</span><span class="hl kwd">q</span><span class="hl sym">();</span>x i<span class="hl sym">;</span><span class="hl kwd">f</span><span class="hl sym">(</span>a <span class="hl num">2</span><span class="hl sym">)(</span>max <span class="hl kwd">m</span><span class="hl sym">(</span>w <span class="hl num">0</span><span class="hl sym">))(</span>z<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">))</span>
  <span class="hl kwa">else</span> <span class="hl sym">(</span><span class="hl kwa">if</span> z<span class="hl sym">&gt;</span><span class="hl num">0</span> <span class="hl kwa">then</span> <span class="hl kwd">q</span><span class="hl sym">();</span>g i m<span class="hl sym">)</span>
	<span class="hl kwa">and</span> g i m<span class="hl sym">=</span> <span class="hl kwa">if</span> i <span class="hl sym">&lt;=</span><span class="hl kwd">n</span> <span class="hl com">(* non printing loop *)</span>
	<span class="hl kwa">then</span><span class="hl sym">(</span>x i<span class="hl sym">;</span> <span class="hl kwd">g</span><span class="hl sym">(</span>a <span class="hl num">2</span><span class="hl sym">)(</span>max <span class="hl kwd">m</span><span class="hl sym">(</span>w <span class="hl num">0</span><span class="hl sym">)))</span>
	<span class="hl kwa">else</span> m <span class="hl kwa">in</span>
printf <span class="hl str">&quot;Pfannkuchen(%i) = %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl kwd">n</span> <span class="hl sym">(</span><span class="hl kwd">f</span> <span class="hl sym">(</span>a <span class="hl num">2</span><span class="hl sym">)</span> <span class="hl num">0 30</span><span class="hl sym">)</span>
