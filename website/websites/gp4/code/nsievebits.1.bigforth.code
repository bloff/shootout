\ The Great Computer Language Shootout
\ http<span class="hl sym">:</span><span class="hl slc">//shootout.alioth.debian.org/</span>
\
\ contributed by Ian Osgood

\ read NUM from last command line argument
<span class="hl num">0</span><span class="hl sym">.</span> argc &#64; <span class="hl num">1</span><span class="hl sym">-</span> arg <span class="hl sym">&gt;</span>number <span class="hl num">2</span>drop drop <span class="hl num">2</span> max constant NUM

<span class="hl sym">:</span> bit<span class="hl sym">-</span><span class="hl kwd">mask</span> <span class="hl sym">(</span> n <span class="hl sym">--</span> addr mask <span class="hl sym">)</span>
  dup <span class="hl num">5</span> rshift cells here <span class="hl sym">+</span>  <span class="hl num">1</span> rot <span class="hl num">31</span> <span class="hl kwa">and</span> lshift <span class="hl sym">;</span>

<span class="hl sym">:</span> bit<span class="hl sym">-</span>on? <span class="hl sym">(</span> n <span class="hl sym">--</span> f <span class="hl sym">)</span> bit<span class="hl sym">-</span>mask swap &#64; <span class="hl kwa">and</span> <span class="hl sym">;</span>

<span class="hl sym">:</span> bit<span class="hl sym">-</span><span class="hl kwd">off</span> <span class="hl sym">(</span> n <span class="hl sym">-- )</span> bit<span class="hl sym">-</span>mask invert over &#64; <span class="hl kwa">and</span> swap <span class="hl sym">! ;</span>

<span class="hl sym">:</span> <span class="hl kwd">sieve</span> <span class="hl sym">(</span> size <span class="hl sym">--</span> n <span class="hl sym">)</span>
  here over <span class="hl num">7</span> <span class="hl sym">+</span> <span class="hl num">8</span> <span class="hl sym">/ -</span><span class="hl num">1</span> fill
  <span class="hl num">0</span> over <span class="hl num">2</span> <span class="hl kwa">do</span>
    i bit<span class="hl sym">-</span>on? <span class="hl kwa">if</span> <span class="hl num">1</span><span class="hl sym">+</span>
      over i <span class="hl num">2</span><span class="hl sym">*</span> over min ?<span class="hl kwa">do</span>
        i bit<span class="hl sym">-</span>off
      j <span class="hl sym">+</span>loop
    then
  loop nip <span class="hl sym">;</span>

\ count primes up to <span class="hl num">2</span>^n<span class="hl sym">*</span><span class="hl num">10000</span>
<span class="hl sym">:</span> <span class="hl kwd">test</span> <span class="hl sym">(</span> n <span class="hl sym">-- )</span>
  <span class="hl num">1</span> swap lshift <span class="hl num">10000</span> <span class="hl sym">*</span>
  <span class="hl sym">.</span><span class="hl str">&quot; Primes up to &quot;</span> dup <span class="hl num">8</span> u<span class="hl sym">.</span>r sieve <span class="hl num">9</span> u<span class="hl sym">.</span>r cr <span class="hl sym">;</span>

\ run sieve <span class="hl kwa">for</span> N<span class="hl sym">,</span> N<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> N<span class="hl sym">-</span><span class="hl num">2</span>
  NUM test  NUM <span class="hl num">1</span><span class="hl sym">-</span> test  NUM <span class="hl num">2</span> <span class="hl sym">-</span> test

bye  \ done<span class="hl sym">!</span>

