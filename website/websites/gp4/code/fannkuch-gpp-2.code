<span class="com">/* The Computer Language Shootout</span>
<span class="com">  http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">  contributed by Przemyslaw Szymanski</span>
<span class="com"> */</span>
<span class="dir">#include &lt;algorithm&gt;</span>
<span class="dir">#include &lt;iostream&gt;</span>
<span class="dir">#include &lt;iterator&gt;</span>
<span class="dir">#include &lt;cstdlib&gt;</span>
<span class="dir">#include &lt;cstring&gt;</span>

<span class="kwb">void</span> <span class="kwd">dump_seq</span><span class="sym">(</span><span class="kwb">const int</span><span class="sym">*</span> seq<span class="sym">,</span> <span class="kwb">int</span> size<span class="sym">)</span>
<span class="sym">{</span>
  std<span class="sym">::</span><span class="kwd">copy</span><span class="sym">(</span>seq<span class="sym">,</span> seq <span class="sym">+</span> size<span class="sym">,</span> std<span class="sym">::</span>ostream_iterator<span class="sym">&lt;</span><span class="kwb">int</span><span class="sym">&gt;(</span>std<span class="sym">::</span>cout<span class="sym">));</span>
  std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> std<span class="sym">::</span>endl<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span><span class="sym">*</span> argv<span class="sym">[])</span>
<span class="sym">{</span>
  <span class="kwb">int</span> size       <span class="sym">= (</span>argc <span class="sym">==</span> <span class="num">2</span> ? std<span class="sym">::</span><span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">7</span><span class="sym">),</span>
      array_size <span class="sym">=</span> size <span class="sym">*</span> <span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">),</span>
      tmp        <span class="sym">=</span> size<span class="sym">;</span>
  std<span class="sym">::</span>auto_ptr<span class="sym">&lt;</span><span class="kwb">int</span><span class="sym">&gt;</span> <span class="kwd">auto_seq</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>size<span class="sym">]),</span>
                     <span class="kwd">auto_work</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>size<span class="sym">]);</span>
  <span class="kwb">int</span><span class="sym">*</span> seq  <span class="sym">=</span> auto_seq<span class="sym">.</span><span class="kwd">get</span><span class="sym">();</span>
  <span class="kwb">int</span><span class="sym">*</span> work <span class="sym">=</span> auto_work<span class="sym">.</span><span class="kwd">get</span><span class="sym">();</span>

  <span class="kwa">while</span> <span class="sym">(</span>tmp<span class="sym">--)</span>
    seq<span class="sym">[</span>tmp<span class="sym">] =</span> tmp <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>

  <span class="kwb">int</span> flips <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> max_flips <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> count30 <span class="sym">=</span> <span class="num">30</span><span class="sym">;</span>
  <span class="kwa">do</span> <span class="sym">{</span>
    <span class="kwa">if</span> <span class="sym">(</span>count30<span class="sym">)</span> <span class="kwd">dump_seq</span><span class="sym">(</span>seq<span class="sym">,</span> size<span class="sym">),</span> count30<span class="sym">--;</span>

    std<span class="sym">::</span><span class="kwd">memcpy</span><span class="sym">(</span>work<span class="sym">,</span> seq<span class="sym">,</span> array_size<span class="sym">);</span>
    <span class="kwa">for</span> <span class="sym">(</span>flips <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> work<span class="sym">[</span><span class="num">0</span><span class="sym">] !=</span> <span class="num">1</span><span class="sym">;</span> flips<span class="sym">++)</span>
      std<span class="sym">::</span><span class="kwd">reverse</span><span class="sym">(</span>work<span class="sym">,</span> work <span class="sym">+</span> work<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>

    <span class="kwa">if</span> <span class="sym">(</span>flips <span class="sym">&gt;</span> max_flips<span class="sym">)</span> max_flips <span class="sym">=</span> flips<span class="sym">;</span>
  <span class="sym">}</span> <span class="kwa">while</span> <span class="sym">(</span>std<span class="sym">::</span><span class="kwd">next_permutation</span><span class="sym">(</span>seq<span class="sym">,</span> seq <span class="sym">+</span> size<span class="sym">));</span>

  std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;Pfannkuchen(&quot;</span> <span class="sym">&lt;&lt;</span> size <span class="sym">&lt;&lt;</span> <span class="str">&quot;) = &quot;</span> <span class="sym">&lt;&lt;</span> max_flips <span class="sym">&lt;&lt;</span> std<span class="sym">::</span>endl<span class="sym">;</span>
  <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

