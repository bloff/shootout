<span class="slc">//   The Computer Language Shootout</span>
<span class="slc">//   http://shootout.alioth.debian.org/</span>
<span class="slc">//   contributed by Paul Kitchin</span>
<span class="slc">//   compile with -lpthread</span>

<span class="dir">#include &lt;iostream&gt;</span>
<span class="dir">#include &lt;sstream&gt;</span>
<span class="dir">#include &lt;pthread.h&gt;</span>
<span class="dir">#include &lt;semaphore.h&gt;</span>

<span class="kwb">unsigned int const</span> number_of_threads <span class="sym">=</span> <span class="num">500</span><span class="sym">;</span>
<span class="kwb">unsigned int const</span> thread_stack_size <span class="sym">=</span> <span class="num">100</span> <span class="sym">*</span> <span class="num">1024</span><span class="sym">;</span>
<span class="kwb">unsigned int</span> number_of_messages_per_thread<span class="sym">;</span>
<span class="kwb">unsigned int</span> message_total<span class="sym">;</span>

sem_t signals<span class="sym">[</span>number_of_threads<span class="sym">][</span><span class="num">2</span><span class="sym">];</span>
<span class="kwb">unsigned int</span> <span class="kwc">volatile</span> messages<span class="sym">[</span>number_of_threads<span class="sym">];</span>

<span class="kwb">void</span> <span class="sym">*</span> <span class="kwd">thread_function</span><span class="sym">(</span><span class="kwb">void</span> <span class="sym">*</span> argument<span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwb">unsigned int</span> thread_id <span class="sym">=</span> <span class="kwa">reinterpret_cast</span><span class="sym">&lt;</span> <span class="kwb">unsigned int</span> <span class="sym">&gt;(</span>argument<span class="sym">);</span>
   sem_t <span class="sym">&amp;</span> <span class="kwd">thread_signal_1</span><span class="sym">(</span>signals<span class="sym">[</span>thread_id<span class="sym">][</span><span class="num">0</span><span class="sym">]);</span>
   sem_t <span class="sym">&amp;</span> <span class="kwd">thread_signal_2</span><span class="sym">(</span>signals<span class="sym">[</span>thread_id<span class="sym">][</span><span class="num">1</span><span class="sym">]);</span>
   <span class="kwb">unsigned int</span> <span class="kwc">volatile</span> <span class="sym">&amp;</span> <span class="kwd">thread_message</span><span class="sym">(</span>messages<span class="sym">[</span>thread_id<span class="sym">]);</span>
   <span class="kwb">unsigned int</span> messages_received <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="kwa">if</span> <span class="sym">(</span>thread_id <span class="sym">+</span> <span class="num">1</span> <span class="sym">!=</span> number_of_threads<span class="sym">)</span>
   <span class="sym">{</span>
      sem_t <span class="sym">&amp;</span> <span class="kwd">next_thread_signal_1</span><span class="sym">(</span>signals<span class="sym">[</span>thread_id <span class="sym">+</span> <span class="num">1</span><span class="sym">][</span><span class="num">0</span><span class="sym">]);</span>
      sem_t <span class="sym">&amp;</span> <span class="kwd">next_thread_signal_2</span><span class="sym">(</span>signals<span class="sym">[</span>thread_id <span class="sym">+</span> <span class="num">1</span><span class="sym">][</span><span class="num">1</span><span class="sym">]);</span>
      <span class="kwb">unsigned int</span> <span class="kwc">volatile</span> <span class="sym">&amp;</span> <span class="kwd">next_thread_message</span><span class="sym">(</span>messages<span class="sym">[</span>thread_id <span class="sym">+</span> <span class="num">1</span><span class="sym">]);</span>
      <span class="kwa">while</span> <span class="sym">(</span>messages_received <span class="sym">!=</span> number_of_messages_per_thread<span class="sym">)</span>
      <span class="sym">{</span>
         <span class="kwd">sem_wait</span><span class="sym">(&amp;</span>thread_signal_2<span class="sym">);</span>
         <span class="kwd">sem_wait</span><span class="sym">(&amp;</span>next_thread_signal_1<span class="sym">);</span>
         next_thread_message <span class="sym">=</span> thread_message <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
         thread_message <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
         <span class="kwd">sem_post</span><span class="sym">(&amp;</span>next_thread_signal_2<span class="sym">);</span>
         <span class="kwd">sem_post</span><span class="sym">(&amp;</span>thread_signal_1<span class="sym">);</span>
         <span class="sym">++</span>messages_received<span class="sym">;</span>
      <span class="sym">}</span>
   <span class="sym">}</span>
   <span class="kwa">else</span>
   <span class="sym">{</span>
      <span class="kwa">while</span> <span class="sym">(</span>messages_received <span class="sym">!=</span> number_of_messages_per_thread<span class="sym">)</span>
      <span class="sym">{</span>
         <span class="kwd">sem_wait</span><span class="sym">(&amp;</span>thread_signal_2<span class="sym">);</span>
         message_total <span class="sym">+=</span> thread_message <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
         thread_message <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
         <span class="kwd">sem_post</span><span class="sym">(&amp;</span>thread_signal_1<span class="sym">);</span>
         <span class="sym">++</span>messages_received<span class="sym">;</span>
      <span class="sym">}</span>
   <span class="sym">}</span>
   <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">* *</span> argv<span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwa">if</span> <span class="sym">(</span>argc <span class="sym">!=</span> <span class="num">2</span><span class="sym">)</span>
   <span class="sym">{</span>
      std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;Usage: &quot;</span> <span class="sym">&lt;&lt;</span> argv<span class="sym">[</span><span class="num">0</span><span class="sym">] &lt;&lt;</span> <span class="str">&quot; &lt;n&gt;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
      <span class="kwa">return</span> <span class="num">1</span><span class="sym">;</span>
   <span class="sym">}</span>
   <span class="sym">{</span>
      std<span class="sym">::</span>istringstream <span class="kwd">convertor</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span>
      <span class="kwa">if</span> <span class="sym">(!(</span>convertor <span class="sym">&gt;&gt;</span> number_of_messages_per_thread<span class="sym">) || !</span>convertor<span class="sym">.</span><span class="kwd">eof</span><span class="sym">())</span>
      <span class="sym">{</span>
         std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;Usage: &quot;</span> <span class="sym">&lt;&lt;</span> argv<span class="sym">[</span><span class="num">0</span><span class="sym">] &lt;&lt;</span> <span class="str">&quot; &lt;n&gt;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
         std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;</span><span class="esc">\t</span><span class="str">n must be an integer</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
         <span class="kwa">return</span> <span class="num">1</span><span class="sym">;</span>
      <span class="sym">}</span>
   <span class="sym">}</span>
   pthread_attr_t thread_attributes<span class="sym">;</span>
   <span class="kwa">if</span> <span class="sym">(</span><span class="kwd">pthread_attr_init</span><span class="sym">(&amp;</span>thread_attributes<span class="sym">) !=</span> <span class="num">0</span> <span class="sym">||</span> <span class="kwd">pthread_attr_setstacksize</span><span class="sym">(&amp;</span>thread_attributes<span class="sym">,</span> thread_stack_size<span class="sym">) !=</span> <span class="num">0</span><span class="sym">)</span>
   <span class="sym">{</span>
      std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;pthread attribute error</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
      <span class="kwa">return</span> <span class="num">1</span><span class="sym">;</span>
   <span class="sym">}</span>
   pthread_t threads<span class="sym">[</span>number_of_threads<span class="sym">];</span>
   <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">unsigned int</span> thread_number <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> thread_number <span class="sym">&lt;</span> number_of_threads<span class="sym">; ++</span>thread_number<span class="sym">)</span>
   <span class="sym">{</span>
      <span class="kwa">if</span> <span class="sym">(</span><span class="kwd">sem_init</span><span class="sym">(&amp;</span>signals<span class="sym">[</span>thread_number<span class="sym">][</span><span class="num">0</span><span class="sym">],</span> <span class="num">0</span><span class="sym">,</span> <span class="num">1</span><span class="sym">) !=</span> <span class="num">0</span> <span class="sym">||</span> <span class="kwd">sem_init</span><span class="sym">(&amp;</span>signals<span class="sym">[</span>thread_number<span class="sym">][</span><span class="num">1</span><span class="sym">],</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">) !=</span> <span class="num">0</span><span class="sym">)</span>
      <span class="sym">{</span>
         std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> thread_number <span class="sym">&lt;&lt;</span> <span class="str">&quot;pthread semaphore creation error</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
         <span class="kwa">return</span> <span class="num">1</span><span class="sym">;</span>
      <span class="sym">}</span>
      <span class="kwa">if</span> <span class="sym">(</span><span class="kwd">pthread_create</span><span class="sym">(&amp;</span>threads<span class="sym">[</span>thread_number<span class="sym">], &amp;</span>thread_attributes<span class="sym">,</span> thread_function<span class="sym">,</span> <span class="kwa">reinterpret_cast</span><span class="sym">&lt;</span> <span class="kwb">void</span> <span class="sym">* &gt;(</span>thread_number<span class="sym">)) !=</span> <span class="num">0</span><span class="sym">)</span>
      <span class="sym">{</span>
         std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> thread_number <span class="sym">&lt;&lt;</span> <span class="str">&quot;pthread thread creation error</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
         <span class="kwa">return</span> <span class="num">1</span><span class="sym">;</span>
      <span class="sym">}</span>
   <span class="sym">}</span>
   <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">unsigned int</span> message_number <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> message_number <span class="sym">&lt;</span> number_of_messages_per_thread<span class="sym">; ++</span>message_number<span class="sym">)</span>
   <span class="sym">{</span>
      <span class="kwd">sem_wait</span><span class="sym">(&amp;</span>signals<span class="sym">[</span><span class="num">0</span><span class="sym">][</span><span class="num">0</span><span class="sym">]);</span>
      messages<span class="sym">[</span><span class="num">0</span><span class="sym">] =</span> <span class="num">0</span><span class="sym">;</span>
      <span class="kwd">sem_post</span><span class="sym">(&amp;</span>signals<span class="sym">[</span><span class="num">0</span><span class="sym">][</span><span class="num">1</span><span class="sym">]);</span>
   <span class="sym">}</span>
   <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">unsigned int</span> thread_number <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> thread_number <span class="sym">&lt;</span> number_of_threads<span class="sym">; ++</span>thread_number<span class="sym">)</span>
   <span class="sym">{</span>
      <span class="kwb">void</span> <span class="sym">*</span> return_value<span class="sym">;</span>
      <span class="kwa">if</span> <span class="sym">(</span><span class="kwd">pthread_join</span><span class="sym">(</span>threads<span class="sym">[</span>thread_number<span class="sym">], &amp;</span>return_value<span class="sym">) !=</span> <span class="num">0</span><span class="sym">)</span>
      <span class="sym">{</span>
         std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;pthread thread completion error</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
         <span class="kwa">return</span> <span class="num">1</span><span class="sym">;</span>
      <span class="sym">}</span>
      <span class="kwd">sem_destroy</span><span class="sym">(&amp;</span>signals<span class="sym">[</span>thread_number<span class="sym">][</span><span class="num">0</span><span class="sym">]);</span>
      <span class="kwd">sem_destroy</span><span class="sym">(&amp;</span>signals<span class="sym">[</span>thread_number<span class="sym">][</span><span class="num">1</span><span class="sym">]);</span>
   <span class="sym">}</span>
   std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> message_total <span class="sym">&lt;&lt;</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;</span>
<span class="sym">}</span>
