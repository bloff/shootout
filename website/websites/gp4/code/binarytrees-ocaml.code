<span class="com">(* binarytrees.ml</span>
<span class="com"> *</span>
<span class="com"> * The Great Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Contributed by Troestler Christophe</span>
<span class="com"> *)</span>

<span class="com">(* type 'a tree = Empty of int | Node of 'a tree * 'a * 'a tree *)</span>
<span class="kwa">type</span> int_tree <span class="sym">=</span> Empty <span class="kwa">of</span> <span class="kwb">int</span> <span class="sym">|</span> Node <span class="kwa">of</span> int_tree <span class="sym">*</span> <span class="kwb">int</span> <span class="sym">*</span> int_tree

<span class="kwa">let rec</span> make item <span class="sym">=</span> <span class="kwa">function</span>
  <span class="sym">|</span> <span class="num">0</span> <span class="sym">-&gt;</span> Empty item
  <span class="sym">|</span> depth <span class="sym">-&gt;</span> <span class="kwa">let</span> d <span class="sym">=</span> depth <span class="sym">-</span> <span class="num">1</span> <span class="kwa">and</span> item2 <span class="sym">=</span> <span class="num">2</span> <span class="sym">*</span> item <span class="kwa">in</span>
             <span class="kwd">Node</span><span class="sym">(</span><span class="kwd">make</span> <span class="sym">(</span>item2 <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> d<span class="sym">,</span> item<span class="sym">,</span> make item2 d<span class="sym">)</span>

<span class="kwa">let rec</span> check <span class="sym">=</span> <span class="kwa">function</span>
  <span class="sym">|</span> Empty i <span class="sym">-&gt;</span> i
  <span class="sym">|</span> <span class="kwd">Node</span><span class="sym">(</span>left<span class="sym">,</span> i<span class="sym">,</span> right<span class="sym">) -&gt;</span> i <span class="sym">+</span> check left <span class="sym">-</span> check right


<span class="kwa">let</span> min_depth <span class="sym">=</span> <span class="num">4</span>
<span class="kwa">let</span> max_depth <span class="sym">=</span>
  <span class="kwa">let</span> n <span class="sym">=</span> <span class="kwa">try</span> <span class="kwd">int_of_string</span><span class="sym">(</span>Array.get Sys.argv <span class="num">1</span><span class="sym">)</span> <span class="kwa">with</span> _ <span class="sym">-&gt;</span> <span class="num">10</span> <span class="kwa">in</span>
  <span class="kwd">max</span> <span class="sym">(</span>min_depth <span class="sym">+</span> <span class="num">2</span><span class="sym">)</span> n
<span class="kwa">let</span> stretch_depth <span class="sym">=</span> max_depth <span class="sym">+</span> <span class="num">1</span>

<span class="kwa">let</span> <span class="sym">() =</span>
  <span class="kwa">let</span> c <span class="sym">=</span> <span class="kwd">check</span> <span class="sym">(</span>make <span class="num">0</span> stretch_depth<span class="sym">)</span> <span class="kwa">in</span>
  Printf.printf <span class="str">&quot;stretch tree of depth %i</span><span class="esc">\t</span> <span class="str">check: %i</span><span class="esc">\n</span><span class="str">&quot;</span> stretch_depth c

<span class="kwa">let</span> long_lived_tree <span class="sym">=</span> make <span class="num">0</span> max_depth

<span class="kwa">let rec</span> loop_depths d <span class="sym">=</span>
  <span class="kwa">if</span> d <span class="sym">&lt;=</span> max_depth <span class="kwa">then</span>
    <span class="kwa">let</span> iterations <span class="sym">=</span> <span class="num">1</span> <span class="kwa">lsl</span> <span class="sym">(</span>max_depth <span class="sym">-</span> d <span class="sym">+</span> min_depth<span class="sym">)</span> <span class="kwa">in</span>
    <span class="kwa">let</span> c <span class="sym">=</span> ref <span class="num">0</span> <span class="kwa">in</span>
    <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">to</span> iterations <span class="kwa">do</span>
      c <span class="sym">:= !</span>c <span class="sym">+</span> <span class="kwd">check</span><span class="sym">(</span>make i d<span class="sym">) +</span> <span class="kwd">check</span><span class="sym">(</span><span class="kwd">make</span> <span class="sym">(-</span>i<span class="sym">)</span> d<span class="sym">)</span>
    <span class="kwa">done</span><span class="sym">;</span>
    Printf.printf <span class="str">&quot;%i</span><span class="esc">\t</span> <span class="str">trees of depth %i</span><span class="esc">\t</span> <span class="str">check: %i</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> iterations<span class="sym">)</span> d <span class="sym">!</span>c<span class="sym">;</span>
    <span class="kwd">loop_depths</span> <span class="sym">(</span>d <span class="sym">+</span> <span class="num">2</span><span class="sym">)</span>

<span class="kwa">let</span> <span class="sym">() =</span>
  loop_depths min_depth<span class="sym">;</span>
  Printf.printf <span class="str">&quot;long lived tree of depth %i</span><span class="esc">\t</span> <span class="str">check: %i</span><span class="esc">\n</span><span class="str">&quot;</span>
    <span class="kwd">max_depth</span> <span class="sym">(</span>check long_lived_tree<span class="sym">)</span>

