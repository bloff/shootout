<span class="hl com">&quot;* The Computer Language Benchmarks Game</span>
<span class="hl com">    http://shootout.alioth.debian.org/</span>
<span class="hl com">    contributed by Eliot Miranda *&quot;</span><span class="hl sym">!</span>


<span class="hl sym">!</span>SequenceableCollection methodsFor<span class="hl sym">:</span> <span class="hl str">'computer language shootout'</span><span class="hl sym">!</span>
substringFrequencies<span class="hl sym">:</span> aLength using<span class="hl sym">:</span> aDictionary
   <span class="hl num">1</span> to<span class="hl sym">:</span> <span class="hl kwa">self</span> size <span class="hl sym">-</span> aLength <span class="hl sym">+</span> <span class="hl num">1</span> do<span class="hl sym">:</span>
      <span class="hl sym">[:</span>i <span class="hl sym">| |</span> fragment <span class="hl sym">|</span>
      fragment <span class="hl sym">:=</span> <span class="hl kwa">self</span> copyFrom<span class="hl sym">:</span> i to<span class="hl sym">:</span> i <span class="hl sym">+</span> aLength <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">.</span>
      aDictionary at<span class="hl sym">:</span> fragment
         putValueOf<span class="hl sym">: [:</span>sum<span class="hl sym">|</span> sum <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">]</span> ifAbsentPutValueOf<span class="hl sym">:</span> <span class="hl num">1</span><span class="hl sym">].</span>
   <span class="hl sym">^</span>aDictionary <span class="hl sym">! !</span>


<span class="hl sym">!</span>Dictionary methodsFor<span class="hl sym">:</span> <span class="hl str">'computer language shootout'</span><span class="hl sym">!</span>
at<span class="hl sym">:</span> key putValueOf<span class="hl sym">:</span> putBlock ifAbsentPutValueOf<span class="hl sym">:</span> absentBlock
   <span class="hl com">&quot;* Set the value at key to be the value of evaluating putBlock</span>
<span class="hl com">    with the existing value. If key is not found, create a new</span>
<span class="hl com">    entry for key and set is value to the evaluation of</span>
<span class="hl com">    absentBlock. Answer the result of evaluating either block. *&quot;</span>

   <span class="hl sym">|</span> index element anObject <span class="hl sym">|</span>
   key <span class="hl sym">==</span> <span class="hl kwa">nil</span> ifTrue<span class="hl sym">:</span>
      <span class="hl sym">[^</span><span class="hl kwa">self</span>
         subscriptBoundsErrorFor<span class="hl sym">: #</span>at<span class="hl sym">:</span>putValueOf<span class="hl sym">:</span>ifAbsentPutValueOf<span class="hl sym">:</span>
         index<span class="hl sym">:</span> key
         value<span class="hl sym">:</span> absentBlock value<span class="hl sym">].</span>
   index <span class="hl sym">:=</span> <span class="hl kwa">self</span> findKeyOrNil<span class="hl sym">:</span> key<span class="hl sym">.</span>
   element <span class="hl sym">:=</span> <span class="hl kwa">self</span> basicAt<span class="hl sym">:</span> index<span class="hl sym">.</span>
   element <span class="hl sym">==</span> <span class="hl kwa">nil</span>
      ifTrue<span class="hl sym">: [</span><span class="hl kwa">self</span> atNewIndex<span class="hl sym">:</span> index put<span class="hl sym">:</span>
         <span class="hl sym">(</span><span class="hl kwa">self</span> createKey<span class="hl sym">:</span> key value<span class="hl sym">: (</span>anObject <span class="hl sym">:=</span> absentBlock value<span class="hl sym">))]</span>
      ifFalse<span class="hl sym">: [</span>element value<span class="hl sym">: (</span>anObject <span class="hl sym">:=</span> putBlock value<span class="hl sym">:</span> element value<span class="hl sym">)].</span>
   <span class="hl sym">^</span>anObject <span class="hl sym">! !</span>


Dictionary subclass<span class="hl sym">: #</span>DNASequenceDictionary   instanceVariableNames<span class="hl sym">:</span> <span class="hl str">''</span>   classVariableNames<span class="hl sym">:</span> <span class="hl str">''</span>   poolDictionaries<span class="hl sym">:</span> <span class="hl str">''</span>   category<span class="hl sym">:</span> <span class="hl str">'Shootout'</span><span class="hl sym">!</span>

<span class="hl sym">!</span>DNASequenceDictionary methodsFor<span class="hl sym">:</span> <span class="hl str">'private'</span><span class="hl sym">!</span>
findKeyOrNil<span class="hl sym">:</span> key
   <span class="hl com">&quot;* Look for the key in the receiver.  If it is found, answer</span>
<span class="hl com">   the index of the association containing the key, otherwise</span>
<span class="hl com">   answer the index of the first unused slot. *&quot;</span>

   <span class="hl sym">|</span> location length probe pass <span class="hl sym">|</span>
   length <span class="hl sym">:=</span> <span class="hl kwa">self</span> basicSize<span class="hl sym">.</span>
   pass <span class="hl sym">:=</span> <span class="hl num">1</span><span class="hl sym">.</span>
   location <span class="hl sym">:=</span> <span class="hl kwa">self</span> initialIndexFor<span class="hl sym">:</span> key dnaSequenceHash boundedBy<span class="hl sym">:</span> length<span class="hl sym">.</span>
   <span class="hl sym">[(</span>probe <span class="hl sym">:=</span> <span class="hl kwa">self</span> basicAt<span class="hl sym">:</span> location<span class="hl sym">) ==</span> <span class="hl kwa">nil</span> or<span class="hl sym">: [</span>probe key <span class="hl sym">=</span> key<span class="hl sym">]]</span>
      whileFalse<span class="hl sym">:</span>
         <span class="hl sym">[(</span>location <span class="hl sym">:=</span> location <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">) &gt;</span> length
            ifTrue<span class="hl sym">:</span>
               <span class="hl sym">[</span>location <span class="hl sym">:=</span> <span class="hl num">1</span><span class="hl sym">.</span>
               pass <span class="hl sym">:=</span> pass <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">.</span>
               pass <span class="hl sym">&gt;</span> <span class="hl num">2</span> ifTrue<span class="hl sym">: [^</span><span class="hl kwa">self</span> grow findKeyOrNil<span class="hl sym">:</span> key<span class="hl sym">]]].</span>
   <span class="hl sym">^</span>location <span class="hl sym">! !</span>


<span class="hl sym">!</span>String methodsFor<span class="hl sym">:</span> <span class="hl str">'comparing'</span><span class="hl sym">!</span>
dnaSequenceHash
   <span class="hl com">&quot;* Answer a uniformly distributed SmallInteger computed from the contents</span>
<span class="hl com">      of the receiver, which is a string composed of only the letters ACGT. *&quot;</span>
   <span class="hl com">&quot;* Each character contributes 2 bts to the hash. Bit positions climb to 28</span>
<span class="hl com">    before wrapping *&quot;</span>

   <span class="hl sym">|</span> hash bitPosition <span class="hl sym">|</span>
   hash <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">.</span>
   bitPosition <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">.</span>
   <span class="hl num">1</span> to<span class="hl sym">:</span> <span class="hl kwa">self</span> size do<span class="hl sym">:</span>
      <span class="hl sym">[:</span>i<span class="hl sym">| |</span> c <span class="hl sym">|</span>
      c <span class="hl sym">:=</span> <span class="hl kwa">self</span> at<span class="hl sym">:</span> i<span class="hl sym">.</span>
      hash <span class="hl sym">:=</span> hash <span class="hl sym">+ ((</span>c <span class="hl sym">&gt;= $</span>G ifTrue<span class="hl sym">: [</span>c <span class="hl sym">= $</span>G ifTrue<span class="hl sym">: [</span><span class="hl num">2</span><span class="hl sym">]</span> ifFalse<span class="hl sym">: [</span><span class="hl num">3</span><span class="hl sym">]]</span>
         ifFalse<span class="hl sym">: [</span>c <span class="hl sym">= $</span>A ifTrue<span class="hl sym">: [</span><span class="hl num">0</span><span class="hl sym">]</span> ifFalse<span class="hl sym">: [</span><span class="hl num">1</span><span class="hl sym">]])</span> bitShift<span class="hl sym">:</span> bitPosition<span class="hl sym">).</span>
      <span class="hl sym">(</span>bitPosition <span class="hl sym">:=</span> bitPosition <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">) &gt;=</span> <span class="hl num">28</span> ifTrue<span class="hl sym">:</span>
         <span class="hl sym">[</span>bitPosition <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">.</span>
          hash <span class="hl sym">:=</span> hash bitAnd<span class="hl sym">:</span> <span class="hl num">16</span>rFFFFFFF<span class="hl sym">]].</span>
   <span class="hl sym">^</span>hash <span class="hl sym">! !</span>


<span class="hl sym">!</span>Tests class methodsFor<span class="hl sym">:</span> <span class="hl str">'benchmarking'</span><span class="hl sym">!</span>
readFasta<span class="hl sym">:</span> sequenceName from<span class="hl sym">:</span> input
   <span class="hl sym">|</span> prefix newline buffer description line char <span class="hl sym">|</span>
   prefix <span class="hl sym">:=</span> <span class="hl str">'&gt;'</span><span class="hl sym">,</span>sequenceName<span class="hl sym">.</span>
   newline <span class="hl sym">:=</span> Character cr<span class="hl sym">.</span>

   <span class="hl com">&quot;* find start of particular fasta sequence *&quot;</span>
   <span class="hl sym">[(</span>input atEnd<span class="hl sym">)</span> or<span class="hl sym">: [</span>
         <span class="hl sym">(</span>input peek <span class="hl sym">= $&gt;)</span>
            ifTrue<span class="hl sym">: [((</span>line <span class="hl sym">:=</span> input upTo<span class="hl sym">:</span> newline<span class="hl sym">)</span>
               indexOfSubCollection<span class="hl sym">:</span> prefix startingAt<span class="hl sym">:</span> <span class="hl num">1</span><span class="hl sym">) =</span> <span class="hl num">1</span><span class="hl sym">]</span>
            ifFalse<span class="hl sym">: [</span>input skipThrough<span class="hl sym">:</span> newline<span class="hl sym">.</span> <span class="hl kwa">false</span><span class="hl sym">]]</span>
      <span class="hl sym">]</span> whileFalse<span class="hl sym">.</span>

   <span class="hl com">&quot;* line-by-line read - it would be a lot faster to block read *&quot;</span>
   description <span class="hl sym">:=</span> line<span class="hl sym">.</span>
   buffer <span class="hl sym">:=</span> ReadWriteStream on<span class="hl sym">: (</span>String new<span class="hl sym">:</span> <span class="hl num">1028</span><span class="hl sym">).</span>
   <span class="hl sym">[(</span>input atEnd<span class="hl sym">)</span> or<span class="hl sym">: [(</span>char <span class="hl sym">:=</span> input peek<span class="hl sym">) = $&gt;]]</span> whileFalse<span class="hl sym">: [</span>
      <span class="hl sym">(</span>char <span class="hl sym">= $;)</span>
         ifTrue<span class="hl sym">: [</span>input upTo<span class="hl sym">:</span> newline<span class="hl sym">]</span>
         ifFalse<span class="hl sym">: [</span>buffer nextPutAll<span class="hl sym">: (</span>input upTo<span class="hl sym">:</span> newline<span class="hl sym">)]</span>
      <span class="hl sym">].</span>
   <span class="hl sym">^</span>Association key<span class="hl sym">:</span> description value<span class="hl sym">:</span> buffer contents <span class="hl sym">! !</span>

<span class="hl sym">!</span>Tests class methodsFor<span class="hl sym">:</span> <span class="hl str">'benchmarking'</span><span class="hl sym">!</span>
knucleotide2From<span class="hl sym">:</span> input to<span class="hl sym">:</span> output
   <span class="hl sym">|</span> sequence newline writeFrequencies writeCount <span class="hl sym">|</span>

   sequence <span class="hl sym">:= (</span><span class="hl kwa">self</span> readFasta<span class="hl sym">:</span> <span class="hl str">'THREE'</span> from<span class="hl sym">:</span> input<span class="hl sym">)</span> value asUppercase<span class="hl sym">.</span>
   newline <span class="hl sym">:=</span> Character lf<span class="hl sym">.</span>

   writeFrequencies <span class="hl sym">:=</span>
      <span class="hl sym">[:</span>k <span class="hl sym">| |</span> frequencies count <span class="hl sym">|</span>
      frequencies <span class="hl sym">:=</span> SortedCollection sortBlock<span class="hl sym">: [:</span>a <span class="hl sym">:</span>b<span class="hl sym">|</span>
         <span class="hl sym">(</span>a value <span class="hl sym">=</span> b value<span class="hl sym">)</span> ifTrue<span class="hl sym">: [</span>b key <span class="hl sym">&lt;</span> a key<span class="hl sym">]</span> ifFalse<span class="hl sym">: [</span>b value <span class="hl sym">&lt;</span> a value<span class="hl sym">]].</span>

      count <span class="hl sym">:=</span> <span class="hl num">0.0</span><span class="hl sym">.</span>
      <span class="hl sym">(</span>sequence substringFrequencies<span class="hl sym">:</span> k using<span class="hl sym">: (</span>DNASequenceDictionary new<span class="hl sym">:</span> <span class="hl num">1024</span><span class="hl sym">))</span>
         associationsDo<span class="hl sym">: [:</span>each<span class="hl sym">|</span>
            frequencies add<span class="hl sym">:</span> each<span class="hl sym">.</span> count <span class="hl sym">:=</span> count <span class="hl sym">+</span> each value<span class="hl sym">].</span>

      frequencies do<span class="hl sym">: [:</span>each <span class="hl sym">| |</span> percentage <span class="hl sym">|</span>
         percentage <span class="hl sym">:= (</span>each value <span class="hl sym">/</span> count<span class="hl sym">) *</span> <span class="hl num">100.0</span><span class="hl sym">.</span>
         output
            nextPutAll<span class="hl sym">:</span> each key<span class="hl sym">;</span> space<span class="hl sym">;</span>
            print<span class="hl sym">:</span> percentage digits<span class="hl sym">:</span> <span class="hl num">3</span><span class="hl sym">;</span> nl<span class="hl sym">]].</span>

   writeCount <span class="hl sym">:= [:</span>nucleotideFragment <span class="hl sym">| |</span> frequencies count <span class="hl sym">|</span>
      frequencies <span class="hl sym">:=</span> sequence substringFrequencies<span class="hl sym">:</span> nucleotideFragment size
         using<span class="hl sym">: (</span>DNASequenceDictionary new<span class="hl sym">:</span> <span class="hl num">1024</span><span class="hl sym">).</span>
      count <span class="hl sym">:=</span> frequencies at<span class="hl sym">:</span> nucleotideFragment ifAbsent<span class="hl sym">: [</span><span class="hl num">0</span><span class="hl sym">].</span>
      output print<span class="hl sym">:</span> count<span class="hl sym">;</span> tab<span class="hl sym">;</span> nextPutAll<span class="hl sym">:</span> nucleotideFragment<span class="hl sym">;</span> nl<span class="hl sym">].</span>

   writeFrequencies value<span class="hl sym">:</span> <span class="hl num">1</span><span class="hl sym">.</span> output nl<span class="hl sym">.</span>
   writeFrequencies value<span class="hl sym">:</span> <span class="hl num">2</span><span class="hl sym">.</span> output nl<span class="hl sym">.</span>

   writeCount value<span class="hl sym">:</span> <span class="hl str">'GGT'</span><span class="hl sym">.</span>
   writeCount value<span class="hl sym">:</span> <span class="hl str">'GGTA'</span><span class="hl sym">.</span>
   writeCount value<span class="hl sym">:</span> <span class="hl str">'GGTATT'</span><span class="hl sym">.</span>
   writeCount value<span class="hl sym">:</span> <span class="hl str">'GGTATTTTAATT'</span><span class="hl sym">.</span>
   writeCount value<span class="hl sym">:</span> <span class="hl str">'GGTATTTTAATTTATAGT'</span><span class="hl sym">.! !</span>
<span class="hl sym">!</span>Tests class methodsFor<span class="hl sym">:</span> <span class="hl str">'benchmark scripts'</span><span class="hl sym">!</span>
knucleotide2   <span class="hl kwa">self</span> knucleotide2From<span class="hl sym">:</span> <span class="hl kwa">self</span> stdinSpecial to<span class="hl sym">:</span> <span class="hl kwa">self</span> stdout<span class="hl sym">.   ^</span><span class="hl str">''</span><span class="hl sym">! !</span>
