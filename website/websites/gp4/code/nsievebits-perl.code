<span class="slc">#!/usr/bin/perl</span>

<span class="slc"># The Great Computer Language Shootout</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc"># nsieve-bits benchmark</span>
<span class="slc"># contributed by Joel Hoffman, 2005-03-28</span>

<span class="kwa">use</span> strict<span class="sym">;</span>

<span class="kwa">sub</span> nsieve <span class="sym">{</span>
   <span class="kwc">my</span> <span class="kwb">$mx</span> <span class="sym">=</span> shift<span class="sym">;</span>
   <span class="kwd">vec</span><span class="sym">(</span><span class="kwc">my</span> <span class="kwb">$vec</span><span class="sym">,</span><span class="kwb">$mx</span><span class="sym">,</span><span class="num">1</span><span class="sym">)=</span><span class="num">0</span><span class="sym">;</span>
   <span class="kwc">my</span> <span class="kwb">$count</span><span class="sym">=</span><span class="num">0</span><span class="sym">;</span>
   <span class="kwa">for</span> <span class="kwc">my</span> <span class="kwb">$idx</span> <span class="sym">(</span><span class="num">2</span>..<span class="kwb">$mx</span><span class="sym">) {</span>
      <span class="kwa">unless</span> <span class="sym">(</span><span class="kwd">vec</span><span class="sym">(</span><span class="kwb">$vec</span><span class="sym">,</span><span class="kwb">$idx</span><span class="sym">,</span><span class="num">1</span><span class="sym">)) {</span>
         <span class="kwb">$count</span><span class="sym">++;</span>
         <span class="kwa">for</span> <span class="sym">(</span><span class="kwc">my</span> <span class="kwb">$i</span><span class="sym">=</span><span class="num">2</span> <span class="sym">*</span> <span class="kwb">$idx</span><span class="sym">;</span> <span class="kwb">$i</span><span class="sym">&lt;=</span><span class="kwb">$mx</span><span class="sym">;</span> <span class="kwb">$i</span><span class="sym">+=</span><span class="kwb">$idx</span><span class="sym">) {</span>
            <span class="kwd">vec</span><span class="sym">(</span><span class="kwb">$vec</span><span class="sym">,</span><span class="kwb">$i</span><span class="sym">,</span><span class="num">1</span><span class="sym">)=</span><span class="num">1</span><span class="sym">;</span>
         <span class="sym">}</span>
      <span class="sym">}</span>
   <span class="sym">}</span>
   <span class="kwb">$count</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwa">sub</span> test <span class="sym">{</span>
   <span class="kwc">my</span> <span class="kwb">$n</span> <span class="sym">=</span> shift<span class="sym">;</span>
   <span class="kwc">my</span> <span class="kwb">$mx</span> <span class="sym">=</span> <span class="num">10000</span> <span class="sym">* (</span><span class="num">2</span><span class="sym">**</span><span class="kwb">$n</span><span class="sym">);</span>
   printf <span class="str">&quot;Primes up to %8d %8d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span><span class="kwb">$mx</span><span class="sym">,</span><span class="kwd">nsieve</span><span class="sym">(</span><span class="kwb">$mx</span><span class="sym">);</span>
<span class="sym">}</span>

<span class="kwa">for</span> <span class="sym">(</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">,</span><span class="num">2</span><span class="sym">) {</span>
   <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">] &gt;</span> <span class="kwb">$_</span><span class="sym">) {</span>
      <span class="kwd">test</span><span class="sym">(</span><span class="kwb">$ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">] -</span> <span class="kwb">$_</span><span class="sym">)</span>
   <span class="sym">}</span>
<span class="sym">}</span>


