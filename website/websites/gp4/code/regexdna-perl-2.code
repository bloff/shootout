<span class="slc"># The Computer Language Shootout</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc"># contributed by Danny Sauer</span>
<span class="slc"># completely rewritten and cleaned up</span>
<span class="slc"># for speed and fun by Mirco Wahab</span>

<span class="kwa">use</span> strict<span class="sym">;</span>
<span class="kwa">use</span> warnings<span class="sym">;</span>
<span class="kwa">use</span> re <span class="str">'eval'</span><span class="sym">;</span>

<span class="kwc">my</span> <span class="kwb">$content</span> <span class="sym">=</span> <span class="kwa">do</span> <span class="sym">{</span> <span class="kwc">local</span> <span class="sym">$/; &lt;&gt; };</span>
<span class="kwc">my</span> <span class="kwb">$l_file</span>  <span class="sym">=</span> length <span class="kwb">$content</span><span class="sym">;</span>

<span class="kwc">my</span> <span class="kwb">$pullcomments</span> <span class="sym">=</span> qr<span class="sym">/</span>^<span class="sym">&gt;</span>.<span class="sym">*$|</span><span class="esc">\n</span><span class="sym">/</span>m<span class="sym">;</span>
<span class="kwb">$content</span>    <span class="sym">=</span>~ s<span class="sym">/</span><span class="kwb">$pullcomments</span><span class="sym">//</span>g<span class="sym">;</span>
<span class="kwc">my</span> <span class="kwb">$l_code</span>  <span class="sym">=</span> length <span class="kwb">$content</span><span class="sym">;</span>

<span class="kwc">my</span> <span class="kwb">&#64;motifs</span> <span class="sym">= (</span>                  <span class="str">'agggtaaa|tttaccct'</span><span class="sym">,</span>       <span class="slc"># the motifs from</span>
 <span class="str">'[cgt]gggtaaa|tttaccc[acg]'</span><span class="sym">,</span>   <span class="str">'a[act]ggtaaa|tttacc[agt]t'</span><span class="sym">,</span><span class="slc"># this array will</span>
 <span class="str">'ag[act]gtaaa|tttac[agt]ct'</span><span class="sym">,</span>   <span class="str">'agg[act]taaa|ttta[agt]cct'</span><span class="sym">,</span> <span class="slc"># be translated</span>
 <span class="str">'aggg[acg]aaa|ttt[cgt]ccct'</span><span class="sym">,</span>   <span class="str">'agggt[cgt]aa|tt[acg]accct'</span><span class="sym">,</span> <span class="slc"># to a alterna-</span>
 <span class="str">'agggta[cgt]a|t[acg]taccct'</span><span class="sym">,</span>   <span class="str">'agggtaa[cgt]|[acg]ttaccct'</span> <span class="sym">);</span><span class="slc"># ting regex,</span>
                                                             <span class="slc"># as shown in</span>
<span class="kwc">my</span> <span class="kwb">&#64;counter</span> <span class="sym">= (</span><span class="num">0</span><span class="sym">)</span> x <span class="kwb">&#64;motifs</span><span class="sym">;</span>                                <span class="slc"># the TCL version;</span>
<span class="kwc">my</span> <span class="kwb">$find_em</span> <span class="sym">=</span> join <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> map                               <span class="slc"># In Perl, this</span>
              <span class="kwd">sprintf</span><span class="sym">(</span> <span class="str">&quot;%s(?:%s)(?{</span> <span class="esc">\$</span><span class="str">counter[%d]++; })&quot;</span><span class="sym">,</span>  <span class="slc"># works too ...</span>
              <span class="sym">(</span><span class="kwb">$_</span>?<span class="str">'|'</span><span class="sym">:</span><span class="str">''</span><span class="sym">),</span> <span class="kwb">$motifs</span><span class="sym">[</span><span class="kwb">$_</span><span class="sym">],</span> <span class="kwb">$_</span><span class="sym">),</span> <span class="num">0</span>..<span class="sym">$</span><span class="slc">#motifs;  #</span>
                                                           <span class="slc"># =&gt; find &amp; count</span>
<span class="num">1</span> <span class="kwa">while</span> <span class="kwb">$content</span> <span class="sym">=</span>~ <span class="sym">/</span><span class="kwb">$find_em</span><span class="sym">/</span>gxi<span class="sym">;</span>                          <span class="slc"># occuring motifs</span>
printf <span class="str">&quot;%s %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwb">$motifs</span><span class="sym">[</span><span class="kwb">$_</span><span class="sym">],</span> <span class="kwb">$counter</span><span class="sym">[</span><span class="kwb">$_</span><span class="sym">]</span> <span class="kwa">for</span> <span class="num">0</span>..<span class="sym">$</span><span class="slc">#motifs; # and print 'em</span>

<span class="kwc">my</span> <span class="kwb">%iub</span> <span class="sym">= (</span>
 <span class="str">'B'</span><span class="sym">=&gt;</span><span class="str">'(c|g|t)'</span><span class="sym">,</span> <span class="str">'D'</span><span class="sym">=&gt;</span><span class="str">'(a|g|t)'</span><span class="sym">,</span> <span class="str">'H'</span> <span class="sym">=&gt;</span> <span class="str">'(a|c|t)'</span><span class="sym">,</span>
 <span class="str">'K'</span><span class="sym">=&gt;</span><span class="str">'(g|t)'</span><span class="sym">,</span>   <span class="str">'M'</span><span class="sym">=&gt;</span><span class="str">'(a|c)'</span><span class="sym">,</span>   <span class="str">'N'</span> <span class="sym">=&gt;</span> <span class="str">'(a|c|g|t)'</span><span class="sym">,</span>
 <span class="str">'R'</span><span class="sym">=&gt;</span><span class="str">'(a|g)'</span><span class="sym">,</span>   <span class="str">'S'</span><span class="sym">=&gt;</span><span class="str">'(c|g)'</span><span class="sym">,</span>   <span class="str">'V'</span> <span class="sym">=&gt;</span> <span class="str">'(a|c|g)'</span><span class="sym">,</span>
 <span class="str">'W'</span><span class="sym">=&gt;</span><span class="str">'(a|t)'</span><span class="sym">,</span>   <span class="str">'Y'</span><span class="sym">=&gt;</span><span class="str">'(c|t)'</span>  <span class="sym">);</span>
                                                             <span class="slc"># replace some</span>
<span class="kwb">$content</span> <span class="sym">=</span>~ s<span class="sym">/</span><span class="kwb">$_</span><span class="sym">/</span><span class="kwb">$iub</span><span class="sym">{</span><span class="kwb">$_</span><span class="sym">}/</span>gi <span class="kwa">for</span> <span class="sym">(</span>keys <span class="kwb">%iub</span><span class="sym">);</span>                <span class="slc"># codes by others</span>
printf <span class="str">&quot;</span><span class="esc">\n</span><span class="str">%d</span><span class="esc">\n</span><span class="str">%d</span><span class="esc">\n</span><span class="str">%d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwb">$l_file</span><span class="sym">,</span> <span class="kwb">$l_code</span><span class="sym">,</span> <span class="kwd">length</span><span class="sym">(</span><span class="kwb">$content</span><span class="sym">);</span> <span class="slc"># and print 'em</span>

