<span class="slc"># The Computer Language Shootout</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc"># contributed by Danny Sauer</span>
<span class="slc"># completely rewritten and</span>
<span class="slc"># cleaned up for speed and fun by</span>
<span class="slc"># Mirco Wahab (wahab&#64;chemie.uni-halle.de)</span>

<span class="kwa">use</span> re <span class="str">'eval'</span><span class="sym">;</span>
<span class="kwb">$content</span> <span class="sym">=</span>  <span class="kwa">do</span> <span class="sym">{</span> <span class="kwc">local</span> <span class="sym">$/; &lt;</span>STDIN<span class="sym">&gt; };</span>
<span class="kwb">$l_file</span>  <span class="sym">=</span>  length <span class="kwb">$content</span><span class="sym">;</span>
<span class="kwb">$dispose</span> <span class="sym">=</span>  qr<span class="sym">/</span>^<span class="sym">&gt;</span>.<span class="sym">*$|</span><span class="esc">\n</span><span class="sym">/</span>m<span class="sym">;</span>
<span class="kwb">$content</span> <span class="sym">=</span>~ s<span class="sym">/</span><span class="kwb">$dispose</span><span class="sym">//</span>g<span class="sym">;</span>
<span class="kwb">$l_code</span>  <span class="sym">=</span>  length <span class="kwb">$content</span><span class="sym">;</span>

<span class="kwb">&#64;seq</span> <span class="sym">=</span> <span class="kwd">qw</span><span class="sym">(</span> agggtaaa<span class="sym">|</span>tttaccct
       <span class="sym">[</span>cgt<span class="sym">]</span>gggtaaa<span class="sym">|</span>tttaccc<span class="sym">[</span>acg<span class="sym">]</span>
       a<span class="sym">[</span>act<span class="sym">]</span>ggtaaa<span class="sym">|</span>tttacc<span class="sym">[</span>agt<span class="sym">]</span>t
       ag<span class="sym">[</span>act<span class="sym">]</span>gtaaa<span class="sym">|</span>tttac<span class="sym">[</span>agt<span class="sym">]</span>ct
       agg<span class="sym">[</span>act<span class="sym">]</span>taaa<span class="sym">|</span>ttta<span class="sym">[</span>agt<span class="sym">]</span>cct
       aggg<span class="sym">[</span>acg<span class="sym">]</span>aaa<span class="sym">|</span>ttt<span class="sym">[</span>cgt<span class="sym">]</span>ccct
       agggt<span class="sym">[</span>cgt<span class="sym">]</span>aa<span class="sym">|</span>tt<span class="sym">[</span>acg<span class="sym">]</span>accct
       agggta<span class="sym">[</span>cgt<span class="sym">]</span>a<span class="sym">|</span>t<span class="sym">[</span>acg<span class="sym">]</span>taccct
       agggtaa<span class="sym">[</span>cgt<span class="sym">]|[</span>acg<span class="sym">]</span>ttaccct <span class="sym">);</span>

<span class="kwb">&#64;cnt</span> <span class="sym">= (</span><span class="num">0</span><span class="sym">)</span> x <span class="kwb">&#64;seq</span><span class="sym">;</span>
<span class="kwb">$reg</span> <span class="sym">=</span> join <span class="str">''</span><span class="sym">,</span> map <span class="str">&quot;(?:($seq[$_])(?{++</span><span class="esc">\$</span><span class="str">cnt[$_]}))|&quot;</span><span class="sym">,</span> <span class="num">0</span>..<span class="sym">$</span><span class="slc">#seq;</span>
chop <span class="kwb">$reg</span><span class="sym">;</span>

<span class="num">1</span> <span class="kwa">while</span> <span class="kwb">$content</span> <span class="sym">=</span>~ <span class="sym">/</span><span class="kwb">$reg</span><span class="sym">/</span>ogi<span class="sym">;</span>
printf <span class="str">&quot;$seq[$_] $cnt[$_]</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="kwa">for</span> <span class="num">0</span>..<span class="sym">$</span><span class="slc">#seq;</span>

<span class="kwb">%iub</span> <span class="sym">= (</span>            B <span class="sym">=&gt;</span> <span class="str">'(c|g|t)'</span><span class="sym">,</span>  D <span class="sym">=&gt;</span> <span class="str">'(a|g|t)'</span><span class="sym">,</span>
  H <span class="sym">=&gt;</span> <span class="str">'(a|c|t)'</span><span class="sym">,</span>   K <span class="sym">=&gt;</span> <span class="str">'(g|t)'</span><span class="sym">,</span>    M <span class="sym">=&gt;</span> <span class="str">'(a|c)'</span><span class="sym">,</span>
  N <span class="sym">=&gt;</span> <span class="str">'(a|c|g|t)'</span><span class="sym">,</span> R <span class="sym">=&gt;</span> <span class="str">'(a|g)'</span><span class="sym">,</span>    S <span class="sym">=&gt;</span> <span class="str">'(c|g)'</span><span class="sym">,</span>
  V <span class="sym">=&gt;</span> <span class="str">'(a|c|g)'</span><span class="sym">,</span>   W <span class="sym">=&gt;</span> <span class="str">'(a|t)'</span><span class="sym">,</span>    Y <span class="sym">=&gt;</span> <span class="str">'(c|t)'</span> <span class="sym">);</span>

<span class="kwc">my</span> <span class="kwb">$findiub</span> <span class="sym">=</span> <span class="str">'(['</span>.<span class="sym">(</span>join <span class="str">''</span><span class="sym">,</span> keys <span class="kwb">%iub</span><span class="sym">)</span>.<span class="str">'])'</span><span class="sym">;</span>

<span class="num">1</span> <span class="kwa">while</span> <span class="kwb">$content</span> <span class="sym">=</span>~ s<span class="sym">/</span><span class="kwb">$findiub</span><span class="sym">/</span><span class="kwb">$iub</span><span class="sym">{</span><span class="kwb">$1</span><span class="sym">}/</span>og<span class="sym">;</span>
printf <span class="str">&quot;</span><span class="esc">\n</span><span class="str">%d</span><span class="esc">\n</span><span class="str">%d</span><span class="esc">\n</span><span class="str">%d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwb">$l_file</span><span class="sym">,</span> <span class="kwb">$l_code</span><span class="sym">,</span> length <span class="kwb">$content</span><span class="sym">;</span>
