
<span class="hl com">/*</span>
<span class="hl com">   The Great Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Mehmet D. AKIN</span>
<span class="hl com">   For an input size of n MB you need a direct memory of 3*n size.</span>
<span class="hl com">  To ensure this, you must run java with the option: -XX:MaxDirectMemorySize=&lt;m&gt;M</span>
<span class="hl com">  with &lt;m&gt; at least 3*n. Default for &lt;m&gt; is 64MB.</span>
<span class="hl com">  (see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4879883)</span>
<span class="hl com">*/</span>


<span class="hl kwa">import</span> java<span class="hl sym">.</span>io<span class="hl sym">.*;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>nio<span class="hl sym">.*;</span>

<span class="hl kwa">public class</span> revcomp <span class="hl sym">{</span>

    <span class="hl kwa">static final</span>  <span class="hl kwb">byte</span><span class="hl sym">[]</span> chars <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl sym">[</span><span class="hl num">128</span><span class="hl sym">];</span>
    <span class="hl kwa">static</span> <span class="hl sym">{</span>
        <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>chars<span class="hl sym">.</span>length<span class="hl sym">;</span> i<span class="hl sym">++)</span>
            chars<span class="hl sym">[</span>i<span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span> i<span class="hl sym">;</span>
        chars<span class="hl sym">[</span><span class="hl str">'t'</span><span class="hl sym">] =</span> chars<span class="hl sym">[</span><span class="hl str">'T'</span><span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span> <span class="hl str">'A'</span><span class="hl sym">;</span>
        chars<span class="hl sym">[</span><span class="hl str">'a'</span><span class="hl sym">] =</span> chars<span class="hl sym">[</span><span class="hl str">'A'</span><span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span> <span class="hl str">'T'</span><span class="hl sym">;</span>
        chars<span class="hl sym">[</span><span class="hl str">'g'</span><span class="hl sym">] =</span> chars<span class="hl sym">[</span><span class="hl str">'G'</span><span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span> <span class="hl str">'C'</span><span class="hl sym">;</span>
        chars<span class="hl sym">[</span><span class="hl str">'c'</span><span class="hl sym">] =</span> chars<span class="hl sym">[</span><span class="hl str">'C'</span><span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span> <span class="hl str">'G'</span><span class="hl sym">;</span>
        chars<span class="hl sym">[</span><span class="hl str">'v'</span><span class="hl sym">] =</span> chars<span class="hl sym">[</span><span class="hl str">'V'</span><span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span> <span class="hl str">'B'</span><span class="hl sym">;</span>
        chars<span class="hl sym">[</span><span class="hl str">'h'</span><span class="hl sym">] =</span> chars<span class="hl sym">[</span><span class="hl str">'H'</span><span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span> <span class="hl str">'D'</span><span class="hl sym">;</span>
        chars<span class="hl sym">[</span><span class="hl str">'r'</span><span class="hl sym">] =</span> chars<span class="hl sym">[</span><span class="hl str">'R'</span><span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span> <span class="hl str">'Y'</span><span class="hl sym">;</span>
        chars<span class="hl sym">[</span><span class="hl str">'m'</span><span class="hl sym">] =</span> chars<span class="hl sym">[</span><span class="hl str">'M'</span><span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span> <span class="hl str">'K'</span><span class="hl sym">;</span>
        chars<span class="hl sym">[</span><span class="hl str">'y'</span><span class="hl sym">] =</span> chars<span class="hl sym">[</span><span class="hl str">'Y'</span><span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span> <span class="hl str">'R'</span><span class="hl sym">;</span>
        chars<span class="hl sym">[</span><span class="hl str">'k'</span><span class="hl sym">] =</span> chars<span class="hl sym">[</span><span class="hl str">'K'</span><span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span> <span class="hl str">'M'</span><span class="hl sym">;</span>
        chars<span class="hl sym">[</span><span class="hl str">'b'</span><span class="hl sym">] =</span> chars<span class="hl sym">[</span><span class="hl str">'B'</span><span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span> <span class="hl str">'V'</span><span class="hl sym">;</span>
        chars<span class="hl sym">[</span><span class="hl str">'d'</span><span class="hl sym">] =</span> chars<span class="hl sym">[</span><span class="hl str">'D'</span><span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span> <span class="hl str">'H'</span><span class="hl sym">;</span>
        chars<span class="hl sym">[</span><span class="hl str">'u'</span><span class="hl sym">] =</span> chars<span class="hl sym">[</span><span class="hl str">'U'</span><span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span> <span class="hl str">'A'</span><span class="hl sym">;</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">private static</span> <span class="hl kwc">ByteBuffer</span> <span class="hl kwd">appendToBuffer</span><span class="hl sym">(</span><span class="hl kwc">ByteBuffer</span> buf<span class="hl sym">,</span> <span class="hl kwc">String</span> str<span class="hl sym">) {</span>
        <span class="hl kwb">byte</span><span class="hl sym">[]</span> bytes <span class="hl sym">=</span> str<span class="hl sym">.</span><span class="hl kwd">getBytes</span><span class="hl sym">();</span>
        <span class="hl kwc">ByteBuffer</span> newBuffer<span class="hl sym">;</span>
        <span class="hl kwa">if</span><span class="hl sym">(</span>bytes<span class="hl sym">.</span>length <span class="hl sym">&gt;</span> buf<span class="hl sym">.</span><span class="hl kwd">remaining</span><span class="hl sym">()) {</span>
            newBuffer <span class="hl sym">=</span> <span class="hl kwc">ByteBuffer</span><span class="hl sym">.</span><span class="hl kwd">allocateDirect</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>buf<span class="hl sym">.</span><span class="hl kwd">capacity</span><span class="hl sym">());</span>
            buf<span class="hl sym">.</span><span class="hl kwd">flip</span><span class="hl sym">();</span>
            newBuffer<span class="hl sym">.</span><span class="hl kwd">put</span><span class="hl sym">(</span>buf<span class="hl sym">);</span>
            buf <span class="hl sym">=</span> null<span class="hl sym">;</span>
        <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
            newBuffer <span class="hl sym">=</span> buf<span class="hl sym">;</span>
        <span class="hl sym">}</span>
        newBuffer<span class="hl sym">.</span><span class="hl kwd">put</span><span class="hl sym">(</span>bytes<span class="hl sym">);</span>
        <span class="hl kwa">return</span> newBuffer<span class="hl sym">;</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">)</span> <span class="hl kwa">throws</span> <span class="hl kwc">IOException</span> <span class="hl sym">{</span>

        <span class="hl kwc">BufferedReader</span> in <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">BufferedReader</span><span class="hl sym">(</span><span class="hl kwa">new</span> <span class="hl kwc">InputStreamReader</span><span class="hl sym">(</span><span class="hl kwc">System</span><span class="hl sym">.</span>in<span class="hl sym">));</span>
        <span class="hl kwc">String</span> header <span class="hl sym">=</span> in<span class="hl sym">.</span><span class="hl kwd">readLine</span> <span class="hl sym">();</span>
        <span class="hl kwa">while</span> <span class="hl sym">(</span>header <span class="hl sym">!=</span> null<span class="hl sym">) {</span>
            <span class="hl kwc">ByteBuffer</span> buf <span class="hl sym">=</span> <span class="hl kwc">ByteBuffer</span><span class="hl sym">.</span><span class="hl kwd">allocateDirect</span><span class="hl sym">(</span><span class="hl num">7</span><span class="hl sym">*</span><span class="hl num">512</span><span class="hl sym">*</span><span class="hl num">1024</span><span class="hl sym">);</span>

            <span class="hl slc">// read the sequence into the StringBuffer</span>
            <span class="hl kwc">String</span> line <span class="hl sym">=</span> in<span class="hl sym">.</span><span class="hl kwd">readLine</span> <span class="hl sym">();</span>
            <span class="hl kwa">while</span> <span class="hl sym">(</span>line <span class="hl sym">!=</span> null <span class="hl sym">&amp;&amp; (</span>line<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">() ==</span> <span class="hl num">0</span> <span class="hl sym">||</span> line<span class="hl sym">.</span><span class="hl kwd">charAt</span> <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">) !=</span> <span class="hl str">'&gt;'</span><span class="hl sym">)) {</span>
                buf <span class="hl sym">=</span> <span class="hl kwd">appendToBuffer</span><span class="hl sym">(</span>buf<span class="hl sym">,</span> line <span class="hl sym">+</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">);</span>
                line <span class="hl sym">=</span> in<span class="hl sym">.</span><span class="hl kwd">readLine</span> <span class="hl sym">();</span>
            <span class="hl sym">}</span>

            <span class="hl slc">// reverse StringBuffer + find complements, don't touch '\n'</span>
            <span class="hl kwb">byte</span> NL <span class="hl sym">= (</span><span class="hl kwb">byte</span><span class="hl sym">)</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">;</span>
            <span class="hl kwb">int</span> from <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> to <span class="hl sym">=</span> buf<span class="hl sym">.</span><span class="hl kwd">position</span> <span class="hl sym">() -</span> <span class="hl num">1</span><span class="hl sym">;</span>
            <span class="hl kwa">while</span> <span class="hl sym">(</span>from <span class="hl sym">&lt;=</span> to<span class="hl sym">) {</span>

                <span class="hl kwb">byte</span> fromCh <span class="hl sym">=</span> buf<span class="hl sym">.</span><span class="hl kwd">get</span> <span class="hl sym">(</span>from<span class="hl sym">);</span>
                <span class="hl kwa">if</span> <span class="hl sym">(</span>fromCh <span class="hl sym">==</span> NL<span class="hl sym">) {</span>
                    from<span class="hl sym">++;</span>
                    <span class="hl kwa">continue</span><span class="hl sym">;</span>
                <span class="hl sym">}</span>

                <span class="hl kwb">byte</span> toCh   <span class="hl sym">=</span> buf<span class="hl sym">.</span><span class="hl kwd">get</span> <span class="hl sym">(</span>to<span class="hl sym">);</span>
                <span class="hl kwa">if</span> <span class="hl sym">(</span>toCh <span class="hl sym">==</span> NL<span class="hl sym">) {</span>
                    to<span class="hl sym">--;</span>
                    <span class="hl kwa">continue</span><span class="hl sym">;</span>
                <span class="hl sym">}</span>

                buf<span class="hl sym">.</span><span class="hl kwd">put</span> <span class="hl sym">(</span>from<span class="hl sym">++,</span> chars<span class="hl sym">[</span>toCh<span class="hl sym">]);</span>
                buf<span class="hl sym">.</span><span class="hl kwd">put</span> <span class="hl sym">(</span>to<span class="hl sym">--,</span> chars<span class="hl sym">[</span>fromCh<span class="hl sym">]);</span>
            <span class="hl sym">}</span>

            <span class="hl slc">// print</span>
            <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">print</span><span class="hl sym">(</span>header<span class="hl sym">);</span>
            <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">print</span><span class="hl sym">(</span><span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">);</span>

            <span class="hl kwb">byte</span><span class="hl sym">[]</span> b <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl sym">[</span><span class="hl num">1024</span><span class="hl sym">];</span>
            buf<span class="hl sym">.</span><span class="hl kwd">flip</span><span class="hl sym">();</span>
            <span class="hl kwa">while</span><span class="hl sym">(</span>buf<span class="hl sym">.</span><span class="hl kwd">hasRemaining</span><span class="hl sym">()) {</span>
                <span class="hl kwb">int</span> len <span class="hl sym">=</span> b<span class="hl sym">.</span>length <span class="hl sym">&lt;=</span> buf<span class="hl sym">.</span><span class="hl kwd">remaining</span><span class="hl sym">()</span> ? b<span class="hl sym">.</span>length <span class="hl sym">:</span>
                                                        buf<span class="hl sym">.</span><span class="hl kwd">remaining</span><span class="hl sym">();</span>
                buf<span class="hl sym">.</span><span class="hl kwd">get</span><span class="hl sym">(</span>b<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> len<span class="hl sym">);</span>
                <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">write</span><span class="hl sym">(</span>b<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> len<span class="hl sym">);</span>
            <span class="hl sym">}</span>
            header <span class="hl sym">=</span> line<span class="hl sym">;</span>
            buf <span class="hl sym">=</span> null<span class="hl sym">;</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>
