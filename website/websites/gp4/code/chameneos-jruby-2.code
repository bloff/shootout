<span class="hl slc">#########################################</span>
<span class="hl slc">#     The Computer Language Shootout    #</span>
<span class="hl slc">#   http://shootout.alioth.debian.org/  #</span>
<span class="hl slc">#                                       #</span>
<span class="hl slc">#      Contributed by Jesse Millikan    #</span>
<span class="hl slc">#    Based on version by Gordon Innes   #</span>
<span class="hl slc">#########################################</span>

require <span class="hl str">'thread'</span>

creature_meetings <span class="hl sym">=</span> Queue<span class="hl sym">.</span>new
meeting_point <span class="hl sym">=</span> Mutex<span class="hl sym">.</span>new
wait_signal <span class="hl sym">=</span> ConditionVariable<span class="hl sym">.</span>new
meetings_left <span class="hl sym">=</span> <span class="hl kwc">ARGV</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">].</span>to_i
waiting_colour<span class="hl sym">,</span> incoming_colour <span class="hl sym">=</span> <span class="hl kwa">nil</span><span class="hl sym">,</span> <span class="hl kwa">nil</span>

<span class="hl slc"># Each chameneo is represented here by a thread</span>
<span class="hl slc"># and its colour variable, rather than explicitly</span>
<span class="hl slc"># by an object</span>
<span class="hl slc">#</span>
<span class="hl slc"># This is all packed into one place for speed and</span>
<span class="hl slc"># clarity (It's clear to *me* :)</span>
<span class="hl sym">[:</span>blue<span class="hl sym">, :</span>red<span class="hl sym">, :</span>yellow<span class="hl sym">, :</span>blue<span class="hl sym">].</span>each <span class="hl sym">{ |</span>colour<span class="hl sym">|</span>
  Thread<span class="hl sym">.</span>new <span class="hl sym">{</span>
    met <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">while true</span>
      <span class="hl slc"># The form meeting_point.synchronize { } is slow</span>
      meeting_point<span class="hl sym">.</span>lock

      <span class="hl kwa">if</span> meetings_left <span class="hl sym">&lt;=</span> <span class="hl num">0</span>
        meeting_point<span class="hl sym">.</span>unlock
	<span class="hl slc"># colour = :faded</span>
	<span class="hl kwa">break</span>
      <span class="hl kwa">end</span>

      <span class="hl slc"># Both threads emerge with variable other_colour set</span>
      <span class="hl kwa">if</span> waiting_colour
        other_colour <span class="hl sym">=</span> waiting_colour
        incoming_colour <span class="hl sym">=</span> colour
        wait_signal<span class="hl sym">.</span>signal
        meetings_left-<span class="hl sym">=</span><span class="hl num">1</span>
        waiting_colour <span class="hl sym">=</span> <span class="hl kwa">nil</span>
      <span class="hl kwa">else</span>
        waiting_colour <span class="hl sym">=</span> colour
        wait_signal<span class="hl sym">.</span><span class="hl kwd">wait</span><span class="hl sym">(</span>meeting_point<span class="hl sym">)</span>
        other_colour <span class="hl sym">=</span> incoming_colour
      <span class="hl kwa">end</span>
      meeting_point<span class="hl sym">.</span>unlock

      met <span class="hl sym">+=</span> <span class="hl num">1</span>

      <span class="hl slc"># Take the complement colour</span>
      colour <span class="hl sym">=</span>
        <span class="hl kwa">case</span> other_colour
          <span class="hl kwa">when</span> <span class="hl sym">:</span>blue
           colour <span class="hl sym">== :</span>red <span class="hl sym">? :</span>yellow <span class="hl sym">: :</span>red
          <span class="hl kwa">when</span> <span class="hl sym">:</span>red
           colour <span class="hl sym">== :</span>blue <span class="hl sym">? :</span>yellow <span class="hl sym">: :</span>blue
          <span class="hl kwa">when</span> <span class="hl sym">:</span>yellow
           colour <span class="hl sym">== :</span>blue <span class="hl sym">? :</span>red <span class="hl sym">: :</span>blue
        <span class="hl kwa">end</span>
    <span class="hl kwa">end</span>

    <span class="hl slc"># Leave the total on the queue for the main thread</span>
    creature_meetings<span class="hl sym">.</span><span class="hl kwd">push</span><span class="hl sym">(</span>met<span class="hl sym">)</span>
  <span class="hl sym">}</span>
<span class="hl sym">}</span>

total <span class="hl sym">=</span> <span class="hl num">0</span>
<span class="hl num">4</span><span class="hl sym">.</span>times <span class="hl sym">{</span> total <span class="hl sym">+=</span> creature_meetings<span class="hl sym">.</span>pop <span class="hl sym">}</span>
puts total
