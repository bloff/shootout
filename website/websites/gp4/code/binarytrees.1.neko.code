<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Nicolas Cannasse</span>
<span class="com">*/</span>
make <span class="sym">=</span> <span class="kwa">function</span><span class="sym">(</span>i<span class="sym">,</span>d<span class="sym">) {</span>
	<span class="kwa">if</span><span class="sym">(</span> d <span class="sym">==</span> <span class="num">0</span> <span class="sym">)</span> <span class="kwa">return</span> $<span class="kwd">array</span><span class="sym">(</span>i<span class="sym">,</span><span class="kwa">null</span><span class="sym">,</span><span class="kwa">null</span><span class="sym">);</span>
	<span class="kwa">var</span> i2 <span class="sym">=</span> <span class="num">2</span> <span class="sym">*</span> i<span class="sym">;</span>
	d <span class="sym">-=</span> <span class="num">1</span><span class="sym">;</span>
	$<span class="kwd">array</span><span class="sym">(</span>i<span class="sym">,</span><span class="kwd">make</span><span class="sym">(</span>i2<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>d<span class="sym">),</span><span class="kwd">make</span><span class="sym">(</span>i2<span class="sym">,</span>d<span class="sym">));</span>
<span class="sym">};</span>

check <span class="sym">=</span> <span class="kwa">function</span><span class="sym">(</span>n<span class="sym">) {</span>
	<span class="kwa">if</span><span class="sym">(</span> n<span class="sym">[</span><span class="num">1</span><span class="sym">] ==</span> <span class="kwa">null</span> <span class="sym">)</span> <span class="kwa">return</span> n<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
	<span class="kwa">return</span> n<span class="sym">[</span><span class="num">0</span><span class="sym">] +</span> <span class="kwd">check</span><span class="sym">(</span>n<span class="sym">[</span><span class="num">1</span><span class="sym">]) -</span> <span class="kwd">check</span><span class="sym">(</span>n<span class="sym">[</span><span class="num">2</span><span class="sym">]);</span>
<span class="sym">}</span>

<span class="kwa">var</span> arg <span class="sym">=</span> $<span class="kwb">int</span><span class="sym">(</span>$loader<span class="sym">.</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>
<span class="kwa">if</span><span class="sym">(</span> arg <span class="sym">==</span> <span class="kwa">null</span> <span class="sym">)</span> arg <span class="sym">=</span> <span class="num">10</span><span class="sym">;</span>
<span class="kwa">var</span> min_depth <span class="sym">=</span> <span class="num">4</span><span class="sym">;</span>
<span class="kwa">var</span> max_depth <span class="sym">=</span> <span class="kwa">if</span><span class="sym">(</span> min_depth <span class="sym">+</span> <span class="num">2</span> <span class="sym">&lt;</span> arg <span class="sym">)</span> arg <span class="kwa">else</span> min_depth <span class="sym">+</span> <span class="num">2</span><span class="sym">;</span>
<span class="kwa">var</span> stretch_depth <span class="sym">=</span> max_depth <span class="sym">+</span> <span class="num">1</span>

<span class="kwa">var</span> c <span class="sym">=</span> <span class="kwd">check</span><span class="sym">(</span><span class="kwd">make</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span>stretch_depth<span class="sym">));</span>
$<span class="kwc">print</span><span class="sym">(</span><span class="str">&quot;stretch tree of depth &quot;</span><span class="sym">,</span>stretch_depth<span class="sym">,</span><span class="str">&quot;</span><span class="esc">\t</span> <span class="str">check: &quot;</span><span class="sym">,</span>c<span class="sym">,</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>

<span class="kwa">var</span> long_lived_tree <span class="sym">=</span> <span class="kwd">make</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span>max_depth<span class="sym">);</span>

loop_depths <span class="sym">=</span> <span class="kwa">function</span><span class="sym">(</span>d<span class="sym">) {</span>
	<span class="kwa">if</span><span class="sym">(</span> d <span class="sym">&lt;=</span> max_depth <span class="sym">) {</span>
		<span class="kwa">var</span> niter <span class="sym">=</span> <span class="num">1</span> <span class="sym">&lt;&lt; (</span>max_depth <span class="sym">-</span> d <span class="sym">+</span> min_depth<span class="sym">);</span>
		<span class="kwa">var</span> c <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
		<span class="kwa">var</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
		<span class="kwa">while</span><span class="sym">(</span> i <span class="sym">&lt;</span> niter <span class="sym">) {</span>
			i <span class="sym">+=</span> <span class="num">1</span><span class="sym">;</span>
			c <span class="sym">+=</span> <span class="kwd">check</span><span class="sym">(</span><span class="kwd">make</span><span class="sym">(</span>i<span class="sym">,</span>d<span class="sym">))+</span><span class="kwd">check</span><span class="sym">(</span><span class="kwd">make</span><span class="sym">(</span><span class="num">0</span><span class="sym">-</span>i<span class="sym">,</span>d<span class="sym">));</span>
		<span class="sym">}</span>
		$<span class="kwc">print</span><span class="sym">(</span><span class="num">2</span><span class="sym">*</span>niter<span class="sym">,</span><span class="str">&quot;</span><span class="esc">\t</span> <span class="str">trees of depth &quot;</span><span class="sym">,</span>d<span class="sym">,</span><span class="str">&quot;</span><span class="esc">\t</span> <span class="str">check: &quot;</span><span class="sym">,</span>c<span class="sym">,</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
		<span class="kwd">loop_depths</span><span class="sym">(</span>d <span class="sym">+</span> <span class="num">2</span><span class="sym">);</span>
	<span class="sym">}</span>
<span class="sym">}</span>

<span class="kwd">loop_depths</span><span class="sym">(</span>min_depth<span class="sym">);</span>
$<span class="kwc">print</span><span class="sym">(</span><span class="str">&quot;long lived tree of depth &quot;</span><span class="sym">,</span>max_depth<span class="sym">,</span><span class="str">&quot;</span><span class="esc">\t</span> <span class="str">check: &quot;</span><span class="sym">,</span><span class="kwd">check</span><span class="sym">(</span>long_lived_tree<span class="sym">),</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
