<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Josh Goldfoot</span>
<span class="com">*/</span>

<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;string.h&gt;</span>
<span class="dir">#include &lt;ctype.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>

<span class="kwb">void</span> <span class="kwd">reverse_in_place</span><span class="sym">(</span><span class="kwb">char</span><span class="sym">*</span> start<span class="sym">,</span> <span class="kwb">char</span><span class="sym">*</span> end <span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwb">static char</span> comp<span class="sym">[</span><span class="num">26</span><span class="sym">] = {</span><span class="str">'T'</span><span class="sym">,</span> <span class="str">'V'</span><span class="sym">,</span> <span class="str">'G'</span><span class="sym">,</span> <span class="str">'H'</span><span class="sym">,</span> <span class="str">'E'</span><span class="sym">,</span> <span class="str">'F'</span><span class="sym">,</span> <span class="str">'C'</span><span class="sym">,</span> <span class="str">'D'</span><span class="sym">,</span> <span class="str">'I'</span><span class="sym">,</span> <span class="str">'J'</span><span class="sym">,</span>
      <span class="str">'M'</span><span class="sym">,</span> <span class="str">'L'</span><span class="sym">,</span> <span class="str">'K'</span><span class="sym">,</span> <span class="str">'N'</span><span class="sym">,</span> <span class="str">'O'</span><span class="sym">,</span> <span class="str">'P'</span><span class="sym">,</span> <span class="str">'Q'</span><span class="sym">,</span> <span class="str">'Y'</span><span class="sym">,</span> <span class="str">'S'</span><span class="sym">,</span> <span class="str">'A'</span><span class="sym">,</span> <span class="str">'U'</span><span class="sym">,</span> <span class="str">'B'</span><span class="sym">,</span> <span class="str">'W'</span><span class="sym">,</span>
      <span class="str">'X'</span><span class="sym">,</span> <span class="str">'R'</span><span class="sym">,</span> <span class="str">'Z'</span><span class="sym">};</span>
   <span class="kwb">char</span> tmp<span class="sym">;</span>
   <span class="kwb">char</span><span class="sym">*</span> seqstart <span class="sym">=</span> start<span class="sym">;</span>
   <span class="kwb">char</span><span class="sym">*</span> seqend <span class="sym">=</span> end<span class="sym">;</span>

   <span class="kwa">while</span> <span class="sym">(</span>seqstart <span class="sym">&lt;</span> seqend<span class="sym">) {</span>
      <span class="kwa">while</span> <span class="sym">(*</span>seqstart <span class="sym">&lt;</span> <span class="str">'A'</span><span class="sym">)</span>
         seqstart<span class="sym">++;</span>
      <span class="kwa">while</span> <span class="sym">(*</span>seqend <span class="sym">&lt;</span> <span class="str">'A'</span><span class="sym">)</span>
         seqend<span class="sym">--;</span>
      tmp <span class="sym">=</span> comp<span class="sym">[</span><span class="kwd">toupper</span><span class="sym">(*</span>seqstart<span class="sym">) -</span> <span class="str">'A'</span><span class="sym">];</span>
      <span class="sym">*(</span>seqstart<span class="sym">++) =</span> comp<span class="sym">[</span><span class="kwd">toupper</span><span class="sym">(*</span>seqend<span class="sym">) -</span> <span class="str">'A'</span><span class="sym">];</span>
      <span class="sym">*(</span>seqend<span class="sym">--) =</span> tmp<span class="sym">;</span>
   <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[])</span>
<span class="sym">{</span>
   <span class="kwb">long</span> buflen<span class="sym">,</span> bytesread<span class="sym">,</span> seqstart<span class="sym">;</span>
   <span class="kwb">char</span> <span class="sym">*</span>buffer<span class="sym">, *</span>x<span class="sym">, *</span>tmp<span class="sym">;</span>
   <span class="kwb">int</span> linelen<span class="sym">;</span>
   <span class="kwb">char</span> line <span class="sym">[</span><span class="num">64</span><span class="sym">];</span>
   buflen <span class="sym">=</span> <span class="num">127150</span><span class="sym">;</span>
   buffer <span class="sym">=</span> <span class="kwd">malloc</span><span class="sym">(</span>buflen<span class="sym">);</span>
   x <span class="sym">=</span> buffer<span class="sym">;</span>
   seqstart <span class="sym">=</span> bytesread <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

   <span class="kwa">while</span> <span class="sym">(</span><span class="kwd">fgets</span> <span class="sym">(</span>x<span class="sym">,</span> <span class="num">64</span><span class="sym">,</span> stdin<span class="sym">)) {</span>
      linelen <span class="sym">=</span> <span class="kwd">strlen</span><span class="sym">(</span>x<span class="sym">);</span>
      bytesread <span class="sym">=</span> bytesread <span class="sym">+</span> linelen<span class="sym">;</span>
      <span class="kwa">if</span> <span class="sym">(</span>x<span class="sym">[</span><span class="num">0</span><span class="sym">] ==</span> <span class="str">'&gt;'</span><span class="sym">) {</span>
         <span class="kwa">if</span> <span class="sym">(</span>seqstart<span class="sym">) {</span>
            <span class="kwd">strcpy</span><span class="sym">(</span>line<span class="sym">,</span> x<span class="sym">);</span>
            <span class="kwd">reverse_in_place</span><span class="sym">(&amp;(</span>buffer<span class="sym">[</span>seqstart<span class="sym">]), &amp;(</span>buffer<span class="sym">[</span>bytesread <span class="sym">-</span> linelen <span class="sym">-</span> <span class="num">1</span><span class="sym">]));</span>
            x<span class="sym">[</span><span class="num">0</span><span class="sym">] =</span> <span class="num">0</span><span class="sym">;</span>
            <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%s&quot;</span><span class="sym">,</span> buffer<span class="sym">);</span>
            buffer<span class="sym">[</span><span class="num">0</span><span class="sym">] =</span> <span class="num">0</span><span class="sym">;</span>
            <span class="kwd">strcpy</span><span class="sym">(</span>buffer<span class="sym">,</span> line<span class="sym">);</span>
            x <span class="sym">=</span> buffer<span class="sym">;</span>
            bytesread <span class="sym">=</span> linelen<span class="sym">;</span>
         <span class="sym">}</span>
         seqstart <span class="sym">=</span> bytesread<span class="sym">;</span>
      <span class="sym">}</span>
      <span class="kwa">if</span> <span class="sym">(</span>buflen <span class="sym">-</span> bytesread <span class="sym">&lt;</span> <span class="num">80</span><span class="sym">) {</span>
         buflen <span class="sym">*=</span> <span class="num">10</span><span class="sym">;</span>
         tmp <span class="sym">=</span> <span class="kwd">realloc</span> <span class="sym">(</span>buffer<span class="sym">,</span> buflen <span class="sym">+</span> <span class="num">1</span><span class="sym">);</span>
         <span class="kwa">if</span> <span class="sym">(!</span> tmp<span class="sym">)</span> <span class="kwa">return</span> <span class="sym">-</span><span class="num">1</span><span class="sym">;</span>
         buffer <span class="sym">=</span> tmp<span class="sym">;</span>
         x <span class="sym">= &amp;(</span>buffer<span class="sym">[</span>bytesread <span class="sym">-</span> linelen<span class="sym">]);</span>
      <span class="sym">}</span>
      x <span class="sym">=</span> x <span class="sym">+</span> linelen<span class="sym">;</span>
   <span class="sym">}</span>
   <span class="kwd">reverse_in_place</span><span class="sym">(&amp;(</span>buffer<span class="sym">[</span>seqstart<span class="sym">]),</span> x<span class="sym">);</span>
   <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%s&quot;</span><span class="sym">,</span> buffer<span class="sym">);</span>
   <span class="kwd">free</span><span class="sym">(</span>buffer<span class="sym">);</span>
   <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>
