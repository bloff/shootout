<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Joshua Seagoe</span>
<span class="com">*/</span>

<span class="dir">#include &lt;algorithm&gt;</span>
<span class="dir">#include &lt;vector&gt;</span>
<span class="dir">#include &lt;cstdio&gt;</span> <span class="com">/* for printf */</span><span class="dir"></span>
<span class="dir">#include &lt;cstdlib&gt;</span> <span class="com">/* for atoi */</span><span class="dir"></span>

<span class="com">/* generate a series of increasing values starting with i + 1 */</span>
<span class="kwc">template</span> <span class="sym">&lt;</span>typename T<span class="sym">&gt;</span> <span class="kwb">struct</span> IncrementGenF
<span class="sym">{</span> T i<span class="sym">;</span> <span class="kwb">const</span> T <span class="sym">&amp;</span><span class="kwc">operator</span><span class="sym">()(</span><span class="kwb">void</span><span class="sym">) {</span> <span class="kwa">return</span> <span class="sym">++</span>i<span class="sym">; } };</span>

<span class="kwc">template</span> <span class="sym">&lt;</span>typename T<span class="sym">&gt;</span>
<span class="kwb">unsigned</span> <span class="kwd">fannkuch</span><span class="sym">(</span><span class="kwb">const</span> T <span class="sym">&amp;</span>n<span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">2</span><span class="sym">)</span>
    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>

  std<span class="sym">::</span>vector<span class="sym">&lt;</span>T<span class="sym">&gt;</span> <span class="kwd">a</span><span class="sym">(</span>n<span class="sym">),</span> <span class="kwd">b</span><span class="sym">(</span>n<span class="sym">);</span>

  <span class="com">/* start with 1..N in nondecreasing order */</span>
  IncrementGenF<span class="sym">&lt;</span>T<span class="sym">&gt;</span> gen <span class="sym">= {</span> <span class="num">0</span> <span class="sym">};</span>
  std<span class="sym">::</span><span class="kwd">generate</span><span class="sym">(</span>a<span class="sym">.</span><span class="kwd">begin</span><span class="sym">(),</span> a<span class="sym">.</span><span class="kwd">end</span><span class="sym">(),</span> gen<span class="sym">);</span>

  <span class="com">/* next_permutation goes in lexicographical order */</span>
  <span class="com">/* skip everything that starts with a 1           */</span>
  std<span class="sym">::</span><span class="kwd">swap</span><span class="sym">(</span>a<span class="sym">[</span><span class="num">0</span><span class="sym">],</span> a<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span>

  <span class="kwb">unsigned</span> maximum <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
  <span class="kwa">do</span>
  <span class="sym">{</span>
    <span class="com">/* the maximum will only occur when the highest  */</span>
    <span class="com">/* value can be flipped to the front, which will */</span>
    <span class="com">/* never happen if it starts out at the end      */</span>
    <span class="kwa">if</span> <span class="sym">(</span>a<span class="sym">[</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">] ==</span> n<span class="sym">)</span>
      <span class="kwa">continue</span><span class="sym">;</span>

    std<span class="sym">::</span><span class="kwd">copy</span><span class="sym">(</span>a<span class="sym">.</span><span class="kwd">begin</span><span class="sym">(),</span> a<span class="sym">.</span><span class="kwd">end</span><span class="sym">(),</span> b<span class="sym">.</span><span class="kwd">begin</span><span class="sym">());</span>

    <span class="kwb">unsigned</span> flips<span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">(</span>flips <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> b<span class="sym">[</span><span class="num">0</span><span class="sym">] !=</span> <span class="num">1</span><span class="sym">; ++</span>flips<span class="sym">)</span>
      std<span class="sym">::</span><span class="kwd">reverse</span><span class="sym">(</span>b<span class="sym">.</span><span class="kwd">begin</span><span class="sym">(),</span> b<span class="sym">.</span><span class="kwd">begin</span><span class="sym">() +</span> b<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>

    <span class="kwa">if</span> <span class="sym">(</span>flips <span class="sym">&gt;</span> maximum<span class="sym">)</span>
      maximum <span class="sym">=</span> flips<span class="sym">;</span>

  <span class="sym">}</span> <span class="kwa">while</span> <span class="sym">(</span>std<span class="sym">::</span><span class="kwd">next_permutation</span><span class="sym">(</span>a<span class="sym">.</span><span class="kwd">begin</span><span class="sym">(),</span> a<span class="sym">.</span><span class="kwd">end</span><span class="sym">()));</span>

  <span class="kwa">return</span> maximum<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">**</span>argv<span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwb">const int</span> n <span class="sym">=</span> argc <span class="sym">&gt;</span> <span class="num">1</span> ? <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">9</span><span class="sym">;</span>
  <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;Pfannkuchen(%d) = %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> n<span class="sym">,</span> <span class="kwd">fannkuch</span><span class="sym">(</span>n<span class="sym">));</span>
<span class="sym">}</span>
