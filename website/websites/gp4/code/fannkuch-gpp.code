<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Josh Goldfoot</span>
<span class="com">   adapted from the C version</span>
<span class="com">*/</span>

<span class="dir">#include &lt;iostream&gt;</span>
<span class="kwa">using namespace</span> std<span class="sym">;</span>

<span class="kwc">class</span> permuter <span class="sym">{</span>
<span class="kwc">public</span><span class="sym">:</span>
   <span class="kwd">permuter</span><span class="sym">(</span><span class="kwb">int</span> nx<span class="sym">);</span>
   <span class="sym">~</span><span class="kwd">permuter</span><span class="sym">();</span>
   <span class="kwb">void</span> <span class="kwd">next</span><span class="sym">();</span>
   <span class="kwb">void</span> <span class="kwd">print</span><span class="sym">();</span>
   <span class="kwb">void</span> <span class="kwd">copy</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">*</span> x<span class="sym">) {</span> <span class="kwd">memcpy</span><span class="sym">(</span>x<span class="sym">,</span> array<span class="sym">,</span> <span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">) *</span> n<span class="sym">); }</span>
   <span class="kwb">bool</span> <span class="kwd">finished</span><span class="sym">() {</span> <span class="kwa">return</span> done<span class="sym">; }</span>
<span class="kwc">private</span><span class="sym">:</span>
   <span class="kwb">int</span> n<span class="sym">,</span> r<span class="sym">;</span>
   <span class="kwb">int</span> <span class="sym">*</span>array<span class="sym">, *</span>count<span class="sym">;</span>
   <span class="kwb">bool</span> done<span class="sym">;</span>
<span class="sym">};</span>

permuter<span class="sym">::</span><span class="kwd">permuter</span> <span class="sym">(</span><span class="kwb">int</span> nx<span class="sym">)</span>
<span class="sym">{</span>
  r <span class="sym">=</span> n <span class="sym">=</span> nx<span class="sym">;</span>
  done <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;</span>
  <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">1</span><span class="sym">)</span>
    <span class="kwa">return</span><span class="sym">;</span>
  array <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>n<span class="sym">];</span>
  count <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>n<span class="sym">];</span>
  <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">; ++</span>i<span class="sym">)</span>
    array<span class="sym">[</span>i<span class="sym">] =</span> i<span class="sym">;</span>

<span class="sym">}</span>

permuter<span class="sym">::~</span><span class="kwd">permuter</span> <span class="sym">()</span>
<span class="sym">{</span>
  <span class="kwa">if</span> <span class="sym">(</span>array<span class="sym">)</span>
    <span class="kwa">delete</span> array<span class="sym">;</span>
  <span class="kwa">if</span> <span class="sym">(</span>count<span class="sym">)</span>
    <span class="kwa">delete</span> count<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">void</span> permuter<span class="sym">::</span><span class="kwd">next</span> <span class="sym">()</span>
<span class="sym">{</span>
  <span class="kwb">int</span> i<span class="sym">,</span> k<span class="sym">,</span> array0<span class="sym">;</span>

  <span class="kwa">for</span> <span class="sym">(;</span> r <span class="sym">!=</span> <span class="num">1</span><span class="sym">; --</span>r<span class="sym">)</span>
    count<span class="sym">[</span>r <span class="sym">-</span> <span class="num">1</span><span class="sym">] =</span> r<span class="sym">;</span>
  <span class="kwa">for</span> <span class="sym">(;;)</span>
    <span class="sym">{</span>
      <span class="kwa">if</span> <span class="sym">(</span>r <span class="sym">==</span> n<span class="sym">)</span>
	<span class="sym">{</span>
	  done <span class="sym">=</span> <span class="kwa">true</span><span class="sym">;</span>
	  <span class="kwa">break</span><span class="sym">;</span>		<span class="slc">// No more permutations.</span>
	<span class="sym">}</span>
      <span class="slc">// rotate down array[0..r] by one</span>
      array0 <span class="sym">=</span> array<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
      i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
      <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> r<span class="sym">)</span>
	<span class="sym">{</span>
	  k <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
	  array<span class="sym">[</span>i<span class="sym">] =</span> array<span class="sym">[</span>k<span class="sym">];</span>
	  i <span class="sym">=</span> k<span class="sym">;</span>
	<span class="sym">}</span>
      array<span class="sym">[</span>r<span class="sym">] =</span> array0<span class="sym">;</span>
      <span class="kwa">if</span> <span class="sym">((</span>count<span class="sym">[</span>r<span class="sym">] -=</span> <span class="num">1</span><span class="sym">) &gt;</span> <span class="num">0</span><span class="sym">)</span>
	<span class="kwa">break</span><span class="sym">;</span>
      r<span class="sym">++;</span>
    <span class="sym">}</span>

<span class="sym">}</span>

<span class="kwb">void</span> permuter<span class="sym">::</span><span class="kwd">print</span> <span class="sym">()</span>
<span class="sym">{</span>
  <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++)</span>
    cout <span class="sym">&lt;&lt;</span> <span class="num">1</span> <span class="sym">+</span> array<span class="sym">[</span>i<span class="sym">];</span>
  cout <span class="sym">&lt;&lt;</span> endl<span class="sym">;</span>
<span class="sym">}</span>



<span class="kwb">int</span> <span class="kwd">main</span> <span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[])</span>
<span class="sym">{</span>
  <span class="kwb">long</span> flips<span class="sym">,</span> flipsMax<span class="sym">;</span>
  <span class="kwb">int</span> n<span class="sym">,</span> didpr<span class="sym">,</span> i<span class="sym">,</span> n1<span class="sym">,</span> j<span class="sym">,</span> k<span class="sym">,</span> tmp<span class="sym">, *</span>array<span class="sym">;</span>

  n <span class="sym">= (</span>argc <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">)</span> ? <span class="kwd">atoi</span> <span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">0</span><span class="sym">;</span>
  <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">1</span><span class="sym">)</span>
    <span class="kwa">return</span> <span class="sym">-</span><span class="num">1</span><span class="sym">;</span>
  n1 <span class="sym">=</span> n <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span>
  array <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>n<span class="sym">];</span>
  flipsMax <span class="sym">=</span> didpr <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

  permuter <span class="kwd">p</span> <span class="sym">(</span>n<span class="sym">);</span>
  <span class="kwa">while</span> <span class="sym">(!</span>p<span class="sym">.</span><span class="kwd">finished</span> <span class="sym">())</span>
    <span class="sym">{</span>
      <span class="kwa">if</span> <span class="sym">(</span>didpr <span class="sym">&lt;</span> <span class="num">30</span><span class="sym">)</span>
	<span class="sym">{</span>
	  p<span class="sym">.</span><span class="kwd">print</span> <span class="sym">();</span>
	  didpr<span class="sym">++;</span>
	<span class="sym">}</span>
      p<span class="sym">.</span><span class="kwd">copy</span> <span class="sym">(</span>array<span class="sym">);</span>
      <span class="kwa">if</span> <span class="sym">(!(</span>array<span class="sym">[</span><span class="num">0</span><span class="sym">] ==</span> <span class="num">0</span> <span class="sym">||</span> array<span class="sym">[</span>n1<span class="sym">] ==</span> n1<span class="sym">))</span>
	<span class="sym">{</span>
	  flips <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
	  k <span class="sym">=</span> array<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
	  <span class="kwa">do</span>
	    <span class="sym">{</span>
	      <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">1</span><span class="sym">,</span> j <span class="sym">=</span> k <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span> i <span class="sym">&lt;</span> j<span class="sym">; ++</span>i<span class="sym">, --</span>j<span class="sym">)</span>
		<span class="sym">{</span>
		  tmp <span class="sym">=</span> array<span class="sym">[</span>i<span class="sym">];</span>
		  array<span class="sym">[</span>i<span class="sym">] =</span> array<span class="sym">[</span>j<span class="sym">];</span>
		  array<span class="sym">[</span>j<span class="sym">] =</span> tmp<span class="sym">;</span>
		<span class="sym">}</span>
	      <span class="sym">++</span>flips<span class="sym">;</span>
	      j <span class="sym">=</span> array<span class="sym">[</span>k<span class="sym">];</span>
	      array<span class="sym">[</span>k<span class="sym">] =</span> k<span class="sym">;</span>
	      k <span class="sym">=</span> j<span class="sym">;</span>
	    <span class="sym">}</span>
	  <span class="kwa">while</span> <span class="sym">(</span>k<span class="sym">);</span>

	  <span class="kwa">if</span> <span class="sym">(</span>flipsMax <span class="sym">&lt;</span> flips<span class="sym">)</span>
	    flipsMax <span class="sym">=</span> flips<span class="sym">;</span>
	<span class="sym">}</span>
      p<span class="sym">.</span><span class="kwd">next</span> <span class="sym">();</span>
    <span class="sym">}</span>
  cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;Pfannkuchen(&quot;</span> <span class="sym">&lt;&lt;</span> n <span class="sym">&lt;&lt;</span> <span class="str">&quot;) = &quot;</span> <span class="sym">&lt;&lt;</span> flipsMax <span class="sym">&lt;&lt;</span> endl<span class="sym">;</span>
  <span class="kwa">delete</span> array<span class="sym">;</span>
  <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>
