<span class="hl com">{ The Computer Language Benchmarks Game</span>
<span class="hl com">  http://shootout.alioth.debian.org</span>
<span class="hl com">  contributed by Marc Weustink</span>
<span class="hl com">}</span>
<span class="hl kwa">program</span> chameneos<span class="hl sym">;</span>
<span class="hl com">{$mode objfpc}</span><span class="hl com">{$h-}</span>
<span class="hl kwa">uses</span>
  PThreads<span class="hl sym">;</span>

<span class="hl kwa">type</span>
  TColor <span class="hl sym">= (</span>Blue<span class="hl sym">,</span> Red<span class="hl sym">,</span> Yellow<span class="hl sym">,</span> Faded<span class="hl sym">);</span>

<span class="hl kwa">var</span>
  waitfirst<span class="hl sym">,</span>
  waitsecond   <span class="hl sym">:</span> TSemaphore<span class="hl sym">;</span>
  first<span class="hl sym">,</span>second <span class="hl sym">:</span> TColor<span class="hl sym">;</span>
  MeetingsLeft <span class="hl sym">:</span> <span class="hl kwb">Integer</span><span class="hl sym">;</span>
  ThreadInfo   <span class="hl sym">:</span> <span class="hl kwa">array</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">.</span><span class="hl num">.3</span><span class="hl sym">]</span> <span class="hl kwa">of record</span>
    Id<span class="hl sym">:</span> TThreadId<span class="hl sym">;</span>
    StartColor<span class="hl sym">:</span> TColor<span class="hl sym">;</span>
    Count<span class="hl sym">:</span> <span class="hl kwb">Integer</span><span class="hl sym">;</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>


<span class="hl kwa">function</span> <span class="hl kwd">Complement</span><span class="hl sym">(</span>c1<span class="hl sym">,</span>c2<span class="hl sym">:</span>TColor<span class="hl sym">):</span>TColor<span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  <span class="hl kwa">if</span> c2<span class="hl sym">=</span>Faded <span class="hl kwa">then</span>
    <span class="hl kwa">begin</span>
      result<span class="hl sym">:=</span>Faded<span class="hl sym">;</span>
      exit<span class="hl sym">;</span>
    <span class="hl kwa">end</span><span class="hl sym">;</span>
  <span class="hl kwa">if</span> c1<span class="hl sym">=</span>c2 <span class="hl kwa">then</span>
    <span class="hl kwa">begin</span>
      result<span class="hl sym">:=</span>c1<span class="hl sym">;</span>
      exit<span class="hl sym">;</span>
    <span class="hl kwa">end</span><span class="hl sym">;</span>
  <span class="hl kwa">case</span> c1 <span class="hl kwa">of</span>
    Blue <span class="hl sym">:</span>
      <span class="hl kwa">if</span> c2<span class="hl sym">=</span>Red <span class="hl kwa">then</span>
        result<span class="hl sym">:=</span>Yellow
      <span class="hl kwa">else</span>
        result<span class="hl sym">:=</span>Red<span class="hl sym">;</span>
    Red <span class="hl sym">:</span>
      <span class="hl kwa">if</span> c2<span class="hl sym">=</span>Blue <span class="hl kwa">then</span>
        result<span class="hl sym">:=</span>Yellow
      <span class="hl kwa">else</span>
        result<span class="hl sym">:=</span>Blue<span class="hl sym">;</span>
    Yellow <span class="hl sym">:</span>
      <span class="hl kwa">if</span> c2<span class="hl sym">=</span>Blue <span class="hl kwa">then</span>
        result<span class="hl sym">:=</span>Red
      <span class="hl kwa">else</span>
        result<span class="hl sym">:=</span>Blue<span class="hl sym">;</span>
    <span class="hl kwa">else</span>
      result<span class="hl sym">:=</span>c1<span class="hl sym">;</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>


<span class="hl kwa">function</span> <span class="hl kwd">OtherCreaturesColor</span><span class="hl sym">(</span>me<span class="hl sym">:</span>TColor<span class="hl sym">):</span>TColor<span class="hl sym">;</span>
<span class="hl kwa">const</span>
  firstcall <span class="hl sym">:</span> <span class="hl kwb">boolean</span> <span class="hl sym">=</span> <span class="hl kwb">true</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  result<span class="hl sym">:=</span>Faded<span class="hl sym">;</span>
  <span class="hl kwd">sem_wait</span><span class="hl sym">(</span>waitfirst<span class="hl sym">);</span>

  <span class="hl kwa">if</span> firstCall <span class="hl kwa">then</span>
    <span class="hl kwa">begin</span>
      <span class="hl kwa">if</span> MeetingsLeft<span class="hl sym">&gt;</span><span class="hl num">0</span> <span class="hl kwa">then</span>
        <span class="hl kwa">begin</span>
          first<span class="hl sym">:=</span>me<span class="hl sym">;</span>
          firstcall<span class="hl sym">:=</span><span class="hl kwb">false</span><span class="hl sym">;</span>
          <span class="hl kwd">sem_post</span><span class="hl sym">(</span>waitfirst<span class="hl sym">);</span>
          <span class="hl kwd">sem_wait</span><span class="hl sym">(</span>waitsecond<span class="hl sym">);</span>
          result<span class="hl sym">:=</span>second<span class="hl sym">;</span>
          <span class="hl kwd">dec</span><span class="hl sym">(</span>MeetingsLeft<span class="hl sym">);</span>
        <span class="hl kwa">end</span><span class="hl sym">;</span>
      <span class="hl kwd">sem_post</span><span class="hl sym">(</span>waitfirst<span class="hl sym">);</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">else</span>
    <span class="hl kwa">begin</span>
      firstcall<span class="hl sym">:=</span><span class="hl kwb">true</span><span class="hl sym">;</span>
      second<span class="hl sym">:=</span>me<span class="hl sym">;</span>
      result<span class="hl sym">:=</span>first<span class="hl sym">;</span>
      <span class="hl kwd">sem_post</span><span class="hl sym">(</span>waitsecond<span class="hl sym">);</span>
    <span class="hl kwa">end</span><span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>


<span class="hl kwa">function</span> <span class="hl kwd">ThreadFunc</span><span class="hl sym">(</span>AIndex<span class="hl sym">:</span> PtrInt<span class="hl sym">):</span> <span class="hl kwb">Pointer</span><span class="hl sym">;</span> <span class="hl kwa">cdecl</span><span class="hl sym">;</span>
<span class="hl kwa">var</span>
  Meetings <span class="hl sym">:</span> <span class="hl kwb">Integer</span><span class="hl sym">;</span>
  me<span class="hl sym">,</span>other <span class="hl sym">:</span> TColor<span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  me <span class="hl sym">:=</span> ThreadInfo<span class="hl sym">[</span>AIndex<span class="hl sym">].</span>StartColor<span class="hl sym">;</span>
  Meetings <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>

  <span class="hl kwa">while</span> <span class="hl sym">(</span>me<span class="hl sym">&lt;&gt;</span>Faded<span class="hl sym">)</span> <span class="hl kwa">do</span>
    <span class="hl kwa">begin</span>
      other<span class="hl sym">:=</span><span class="hl kwd">OtherCreaturesColor</span><span class="hl sym">(</span>me<span class="hl sym">);</span>
      <span class="hl kwa">if</span> other<span class="hl sym">=</span>Faded <span class="hl kwa">then</span>
        break<span class="hl sym">;</span>
      <span class="hl kwd">inc</span><span class="hl sym">(</span>Meetings<span class="hl sym">);</span>
      me<span class="hl sym">:=</span><span class="hl kwd">Complement</span><span class="hl sym">(</span>me<span class="hl sym">,</span>other<span class="hl sym">);</span>
    <span class="hl kwa">end</span><span class="hl sym">;</span>

  ThreadInfo<span class="hl sym">[</span>AIndex<span class="hl sym">].</span>Count <span class="hl sym">:=</span> Meetings<span class="hl sym">;</span>
  result<span class="hl sym">:=</span><span class="hl kwa">nil</span><span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>


<span class="hl kwa">const</span>
  COLOR<span class="hl sym">:</span> <span class="hl kwa">array</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">.</span><span class="hl num">.3</span><span class="hl sym">]</span> <span class="hl kwa">of</span> TColor <span class="hl sym">= (</span>Blue<span class="hl sym">,</span> Red<span class="hl sym">,</span> Yellow<span class="hl sym">,</span> Blue<span class="hl sym">);</span>

<span class="hl kwa">var</span>
  n<span class="hl sym">:</span> <span class="hl kwb">Integer</span><span class="hl sym">;</span>
  Attr<span class="hl sym">:</span> TThreadAttr<span class="hl sym">;</span>
  p<span class="hl sym">:</span> <span class="hl kwb">Pointer</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  <span class="hl kwd">Val</span><span class="hl sym">(</span><span class="hl kwd">paramstr</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">),</span> MeetingsLeft<span class="hl sym">,</span> n<span class="hl sym">);</span>
  <span class="hl kwa">if</span> n <span class="hl sym">&lt;&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span> exit<span class="hl sym">;</span>

  <span class="hl kwd">sem_init</span><span class="hl sym">(</span>waitfirst<span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">);</span>
  <span class="hl kwd">sem_init</span><span class="hl sym">(</span>waitsecond<span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">);</span>

  <span class="hl kwd">pthread_attr_init</span><span class="hl sym">(</span>Attr<span class="hl sym">);</span>
  <span class="hl kwd">pthread_attr_setdetachstate</span><span class="hl sym">(</span>Attr<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">);</span>
  <span class="hl kwd">pthread_attr_setstacksize</span><span class="hl sym">(</span>Attr<span class="hl sym">,</span> <span class="hl num">1024</span> <span class="hl sym">*</span> <span class="hl num">16</span><span class="hl sym">);</span>

  <span class="hl kwa">for</span> n <span class="hl sym">:=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> <span class="hl num">3</span> <span class="hl kwa">do begin</span>
    ThreadInfo<span class="hl sym">[</span>n<span class="hl sym">].</span>Count <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    ThreadInfo<span class="hl sym">[</span>n<span class="hl sym">].</span>StartColor <span class="hl sym">:=</span> COLOR<span class="hl sym">[</span>n<span class="hl sym">];</span>
    <span class="hl kwd">pthread_create</span><span class="hl sym">(</span>ThreadInfo<span class="hl sym">[</span>n<span class="hl sym">].</span>Id<span class="hl sym">,</span> Attr<span class="hl sym">,</span> <span class="hl kwd">TStartRoutine</span><span class="hl sym">(&#64;</span>ThreadFunc<span class="hl sym">),</span> <span class="hl kwb">Pointer</span><span class="hl sym">(</span>n<span class="hl sym">));</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>

  <span class="hl kwa">for</span> n <span class="hl sym">:=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> <span class="hl num">3</span> <span class="hl kwa">do</span>
    <span class="hl kwd">pthread_join</span><span class="hl sym">(</span>ThreadInfo<span class="hl sym">[</span>n<span class="hl sym">].</span>Id<span class="hl sym">,</span> p<span class="hl sym">);</span>

  <span class="hl kwd">WriteLN</span><span class="hl sym">(</span>ThreadInfo<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">].</span>Count <span class="hl sym">+</span> ThreadInfo<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">].</span>Count <span class="hl sym">+</span> ThreadInfo<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">].</span>Count <span class="hl sym">+</span> ThreadInfo<span class="hl sym">[</span><span class="hl num">3</span><span class="hl sym">].</span>Count<span class="hl sym">);</span>
<span class="hl kwa">end</span><span class="hl sym">.</span>
