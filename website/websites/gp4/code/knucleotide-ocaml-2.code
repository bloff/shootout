<span class="hl com">(* knucleotide.ml</span>
<span class="hl com"> *</span>
<span class="hl com"> * The Great Computer Language Shootout</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Contributed by Troestler Christophe</span>
<span class="hl com"> *)</span>

<span class="hl kwa">module</span> S <span class="hl sym">=</span> <span class="hl kwa">struct</span>
  <span class="hl kwa">type</span> t <span class="hl sym">=</span> <span class="hl kwb">string</span>

  <span class="hl kwa">let</span> size <span class="hl sym">=</span> <span class="hl num">0x40000</span>

  <span class="hl kwa">let</span> <span class="hl kwd">equal</span> <span class="hl sym">(</span>s1<span class="hl sym">:</span><span class="hl kwb">string</span><span class="hl sym">)</span> s2 <span class="hl sym">= (</span>s1 <span class="hl sym">=</span> s2<span class="hl sym">)</span>

  <span class="hl kwa">let</span> hash s <span class="hl sym">=</span>
    <span class="hl kwa">let</span> h <span class="hl sym">=</span> ref <span class="hl num">0</span> <span class="hl kwa">in</span>
    <span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> String.length s <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl kwa">do</span> h <span class="hl sym">:= !</span>h <span class="hl sym">*</span> <span class="hl num">5</span> <span class="hl sym">+</span> Char.code s.<span class="hl sym">[</span>i<span class="hl sym">]</span> <span class="hl kwa">done</span><span class="hl sym">;</span>
    <span class="hl sym">!</span>h
<span class="hl kwa">end</span>

<span class="hl kwa">module</span> H <span class="hl sym">=</span> Hashtbl.<span class="hl kwd">Make</span><span class="hl sym">(</span>S<span class="hl sym">)</span>

<span class="hl com">(* [counts k dna] fills and return the hashtable [count] of</span>
<span class="hl com">   k-nucleotide keys and count values for a particular reading-frame</span>
<span class="hl com">   of length [k] of the string [dna].  Keys point to mutable values</span>
<span class="hl com">   for speed (to avoid looking twice the same key to reinsert the</span>
<span class="hl com">   value). *)</span>
<span class="hl kwa">let</span> count <span class="hl sym">=</span> H.create S.size
<span class="hl kwa">let</span> counts k dna <span class="hl sym">=</span>
  H.clear count<span class="hl sym">;</span>
  <span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> String.length dna <span class="hl sym">-</span> k <span class="hl kwa">do</span>
    <span class="hl kwa">let</span> key <span class="hl sym">=</span> String.sub dna i k <span class="hl kwa">in</span>
    <span class="hl kwa">try</span> <span class="hl kwd">incr</span><span class="hl sym">(</span>H.find count key<span class="hl sym">)</span> <span class="hl kwa">with</span> Not_found <span class="hl sym">-&gt;</span> H.add count <span class="hl kwd">key</span> <span class="hl sym">(</span>ref <span class="hl num">1</span><span class="hl sym">)</span>
  <span class="hl kwa">done</span><span class="hl sym">;</span>
  count

<span class="hl com">(* [write_frequencies k dna] writes the frequencies for a</span>
<span class="hl com">   reading-frame of length [k] sorted by descending frequency and then</span>
<span class="hl com">   ascending k-nucleotide key. *)</span>
<span class="hl kwa">let</span> <span class="hl kwd">compare_freq</span> <span class="hl sym">((</span>k1<span class="hl sym">:</span><span class="hl kwb">string</span><span class="hl sym">),(</span>f1<span class="hl sym">:</span><span class="hl kwb">float</span><span class="hl sym">)) (</span>k2<span class="hl sym">,</span> f2<span class="hl sym">) =</span>
  <span class="hl kwa">if</span> f1 <span class="hl sym">&gt;</span> f2 <span class="hl kwa">then</span> <span class="hl sym">-</span><span class="hl num">1</span> <span class="hl kwa">else if</span> f1 <span class="hl sym">&lt;</span> f2 <span class="hl kwa">then</span> <span class="hl num">1</span> <span class="hl kwa">else</span> compare k1 k2

<span class="hl kwa">let</span> write_frequencies k dna <span class="hl sym">=</span>
  <span class="hl kwa">let</span> cnt <span class="hl sym">=</span> counts k dna <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> tot <span class="hl sym">=</span> <span class="hl kwb">float</span><span class="hl sym">(</span>H.<span class="hl kwd">fold</span> <span class="hl sym">(</span><span class="hl kwa">fun</span> _ n t <span class="hl sym">-&gt; !</span>n <span class="hl sym">+</span> t<span class="hl sym">)</span> cnt <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> frq <span class="hl sym">=</span> H.<span class="hl kwd">fold</span> <span class="hl sym">(</span><span class="hl kwa">fun</span> k n l <span class="hl sym">-&gt; (</span>k<span class="hl sym">,</span> <span class="hl num">100</span>. <span class="hl sym">*</span>. <span class="hl kwb">float</span> <span class="hl sym">!</span>n <span class="hl sym">/</span>. tot<span class="hl sym">) ::</span> l<span class="hl sym">)</span> cnt <span class="hl sym">[]</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> frq <span class="hl sym">=</span> List.sort compare_freq frq <span class="hl kwa">in</span>
  List.<span class="hl kwd">iter</span> <span class="hl sym">(</span><span class="hl kwa">fun</span> <span class="hl sym">(</span>k<span class="hl sym">,</span>f<span class="hl sym">) -&gt;</span> Printf.printf <span class="hl str">&quot;%s %.3f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> k f<span class="hl sym">)</span> frq<span class="hl sym">;</span>
  print_string <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>

<span class="hl kwa">let</span> write_count seq dna <span class="hl sym">=</span>
  <span class="hl kwa">let</span> cnt <span class="hl sym">=</span> <span class="hl kwd">counts</span> <span class="hl sym">(</span>String.length seq<span class="hl sym">)</span> dna <span class="hl kwa">in</span>
  Printf.printf <span class="hl str">&quot;%d</span><span class="hl esc">\t</span><span class="hl str">%s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl sym">(</span><span class="hl kwa">try</span> <span class="hl sym">!(</span>H.find cnt seq<span class="hl sym">)</span> <span class="hl kwa">with</span> Not_found <span class="hl sym">-&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> seq

<span class="hl com">(* Extract DNA sequence &quot;THREE&quot; from stdin *)</span>
<span class="hl kwa">let</span> dna_three <span class="hl sym">=</span>
  <span class="hl kwa">let</span> is_not_three s <span class="hl sym">=</span> <span class="hl kwa">try</span> String.sub s <span class="hl num">0 6</span> <span class="hl sym">&lt;&gt;</span> <span class="hl str">&quot;&gt;THREE&quot;</span> <span class="hl kwa">with</span> _ <span class="hl sym">-&gt;</span> <span class="hl kwa">true in</span>
  <span class="hl kwa">while</span> <span class="hl kwd">is_not_three</span><span class="hl sym">(</span>input_line stdin<span class="hl sym">)</span> <span class="hl kwa">do</span> <span class="hl sym">()</span> <span class="hl kwa">done</span><span class="hl sym">;</span>
  <span class="hl kwa">let</span> buf <span class="hl sym">=</span> Buffer.create <span class="hl num">1000</span> <span class="hl kwa">in</span>
  <span class="hl com">(* Skip possible comment *)</span>
  <span class="hl sym">(</span><span class="hl kwa">try while true do</span>
     <span class="hl kwa">let</span> line <span class="hl sym">=</span> input_line stdin <span class="hl kwa">in</span>
     <span class="hl kwa">if</span> line.<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] &lt;&gt;</span> <span class="hl str">';'</span> <span class="hl kwa">then</span>
       <span class="hl sym">(</span>Buffer.add_string <span class="hl kwd">buf</span> <span class="hl sym">(</span>String.uppercase line<span class="hl sym">);</span> raise Exit<span class="hl sym">)</span>
   <span class="hl kwa">done with</span> _ <span class="hl sym">-&gt; ());</span>
  <span class="hl com">(* Read the DNA sequence *)</span>
  <span class="hl sym">(</span><span class="hl kwa">try while true do</span>
       <span class="hl kwa">let</span> line <span class="hl sym">=</span> input_line stdin <span class="hl kwa">in</span>
       <span class="hl kwa">if</span> line.<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] =</span> <span class="hl str">'&gt;'</span> <span class="hl kwa">then</span> raise End_of_file<span class="hl sym">;</span>
       Buffer.add_string <span class="hl kwd">buf</span> <span class="hl sym">(</span>String.uppercase line<span class="hl sym">)</span>
   <span class="hl kwa">done with</span> End_of_file <span class="hl sym">-&gt; ());</span>
  Buffer.contents buf

<span class="hl kwa">let</span> <span class="hl sym">() =</span> Gc.set <span class="hl sym">{ (</span>Gc.<span class="hl kwd">get</span><span class="hl sym">())</span> <span class="hl kwa">with</span> Gc.minor_heap_size <span class="hl sym">=</span> <span class="hl num">1024</span> <span class="hl sym">*</span> <span class="hl num">2048</span> <span class="hl sym">}</span>

<span class="hl kwa">let</span> <span class="hl sym">() =</span>
  List.<span class="hl kwd">iter</span> <span class="hl sym">(</span><span class="hl kwa">fun</span> i <span class="hl sym">-&gt;</span> write_frequencies i dna_three<span class="hl sym">) [</span><span class="hl num">1</span><span class="hl sym">;</span> <span class="hl num">2</span><span class="hl sym">];</span>
  List.<span class="hl kwd">iter</span> <span class="hl sym">(</span><span class="hl kwa">fun</span> k <span class="hl sym">-&gt;</span> write_count k dna_three<span class="hl sym">)</span>
    <span class="hl sym">[</span><span class="hl str">&quot;GGT&quot;</span><span class="hl sym">;</span> <span class="hl str">&quot;GGTA&quot;</span><span class="hl sym">;</span> <span class="hl str">&quot;GGTATT&quot;</span><span class="hl sym">;</span> <span class="hl str">&quot;GGTATTTTAATT&quot;</span><span class="hl sym">;</span> <span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl sym">]</span>
