<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://shootout.alioth.debian.org/</span>
<span class="hl slc">#</span>
<span class="hl slc"># contributed by Heinrich Acker</span>

<span class="hl kwa">import</span> sys
<span class="hl kwa">import</span> numpy

limit <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">.</span>
size <span class="hl sym">=</span> <span class="hl kwb">int</span><span class="hl sym">(</span>sys<span class="hl sym">.</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">])</span>

<span class="hl slc"># create an array of NxN complex constants</span>
grid <span class="hl sym">=</span> numpy<span class="hl sym">.</span><span class="hl kwd">arange</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">./</span>size<span class="hl sym">)</span>
c <span class="hl sym">= (</span>grid<span class="hl sym">-</span><span class="hl num">1.5</span><span class="hl sym">).</span><span class="hl kwd">reshape</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> size<span class="hl sym">).</span><span class="hl kwd">repeat</span><span class="hl sym">(</span>size<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">) +</span> \
     <span class="hl num">1</span>j<span class="hl sym">*(</span>grid<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">).</span><span class="hl kwd">reshape</span><span class="hl sym">(</span>size<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">).</span><span class="hl kwd">repeat</span><span class="hl sym">(</span>size<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">)</span>

<span class="hl slc"># create NxN arrays for iteration and results</span>
z <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">*</span>c
mask <span class="hl sym">=</span> z<span class="hl sym">==</span><span class="hl num">0</span>

<span class="hl slc"># compute the mandelbrot set vectorized</span>
<span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl sym">(</span><span class="hl num">50</span><span class="hl sym">):</span>
    z <span class="hl sym">=</span> mask <span class="hl sym">* (</span>z <span class="hl sym">*</span> z <span class="hl sym">+</span> c<span class="hl sym">)</span>
    mask <span class="hl sym">=</span> numpy<span class="hl sym">.</span><span class="hl kwd">logical_and</span><span class="hl sym">(</span>mask<span class="hl sym">,</span> numpy<span class="hl sym">.</span><span class="hl kwb">abs</span><span class="hl sym">(</span>z<span class="hl sym">)&lt;</span>limit<span class="hl sym">)</span>

<span class="hl slc"># map the bool results to their binary value</span>
mask <span class="hl sym">=</span> mask<span class="hl sym">.</span><span class="hl kwd">reshape</span><span class="hl sym">(-</span><span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">8</span><span class="hl sym">).</span><span class="hl kwd">astype</span><span class="hl sym">(</span><span class="hl str">'uint8'</span><span class="hl sym">)</span>
<span class="hl kwa">for</span> bit <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl sym">(</span><span class="hl num">8</span><span class="hl sym">):</span>
    mask<span class="hl sym">[:,</span> <span class="hl num">7</span><span class="hl sym">-</span>bit<span class="hl sym">] *=</span> <span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> bit

<span class="hl slc"># pack the results into bytes</span>
mask <span class="hl sym">=</span> mask<span class="hl sym">.</span><span class="hl kwb">sum</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> <span class="hl str">'uint8'</span><span class="hl sym">)</span>

<span class="hl slc"># write image data</span>
sys<span class="hl sym">.</span>stdout<span class="hl sym">.</span><span class="hl kwd">write</span><span class="hl sym">(</span><span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">%d %d</span><span class="hl esc">\n</span><span class="hl str">%s&quot;</span> <span class="hl sym">% (</span>size<span class="hl sym">,</span> size<span class="hl sym">,</span> mask<span class="hl sym">.</span><span class="hl kwd">tostring</span><span class="hl sym">()))</span>
