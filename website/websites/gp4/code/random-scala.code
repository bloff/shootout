<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy (Scala novice)</span>
<span class="com">*/</span>

<span class="kwa">object</span> random <span class="sym">{</span>
   <span class="kwa">def</span> main<span class="sym">(</span>args<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]) = {</span>
      <span class="kwa">var</span> n <span class="sym">=</span> toPositiveInt<span class="sym">(</span>args<span class="sym">);</span>
      <span class="kwa">var</span> result<span class="sym">:</span> <span class="kwc">Double</span> <span class="sym">=</span> _<span class="sym">;</span>

      <span class="kwa">while</span> <span class="sym">(</span>n<span class="sym">&gt;</span><span class="num">0</span><span class="sym">) {</span> result<span class="sym">=</span>generate<span class="sym">(</span><span class="num">100.0</span><span class="sym">);</span> n<span class="sym">=</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">; }</span>

      Console<span class="sym">.</span>printf<span class="sym">(</span><span class="str">&quot;{0,number,#.000000000}</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)(</span>result<span class="sym">);</span>
   <span class="sym">}</span>

   <span class="kwa">private val</span> IM <span class="sym">=</span> <span class="num">139968</span><span class="sym">;</span>
   <span class="kwa">private val</span> IA <span class="sym">=</span> <span class="num">3877</span><span class="sym">;</span>
   <span class="kwa">private val</span> IC <span class="sym">=</span> <span class="num">29573</span><span class="sym">;</span>
   <span class="kwa">private var</span> seed <span class="sym">=</span> <span class="num">42</span><span class="sym">;</span>

   <span class="kwa">def</span> generate<span class="sym">(</span>max<span class="sym">:</span> <span class="kwc">Double</span><span class="sym">) = {</span>
      seed <span class="sym">= (</span>seed <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">) %</span> IM<span class="sym">;</span>
      max <span class="sym">*</span> seed <span class="sym">/</span> IM<span class="sym">;</span>
   <span class="sym">}</span>

   <span class="kwa">private def</span> toPositiveInt<span class="sym">(</span>s<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]) = {</span>
      <span class="kwa">val</span> i <span class="sym">=</span>
         <span class="kwa">try</span> <span class="sym">{</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>s<span class="sym">(</span><span class="num">0</span><span class="sym">)); }</span>
         <span class="kwa">catch</span> <span class="sym">{</span> <span class="kwa">case</span> _ <span class="sym">=&gt;</span> <span class="num">1</span> <span class="sym">}</span>
      <span class="kwa">if</span> <span class="sym">(</span>i<span class="sym">&gt;</span><span class="num">0</span><span class="sym">)</span> i<span class="sym">;</span> <span class="kwa">else</span> <span class="num">1</span><span class="sym">;</span>
   <span class="sym">}</span>
<span class="sym">}</span>
