<span class="com">(*</span>
<span class="com"> * The Great Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * contributed by Christophe TROESTLER</span>
<span class="com"> * Enhanced by Christian Szegedy &lt;szegedy&#64;t-online.de&gt;</span>
<span class="com"> * Ported to MLton/SML by sweeks&#64;sweeks.com.</span>
<span class="com"> *)</span>
<span class="kwa">val</span> <span class="sym">() = ()</span>
<span class="kwa">val</span> niter <span class="sym">=</span> <span class="num">50</span>
<span class="kwa">val</span> limit <span class="sym">=</span> <span class="num">2.0</span>
<span class="kwa">val</span> limit2 <span class="sym">=</span> limit <span class="sym">*</span> limit

<span class="kwa">fun</span> addBit0 <span class="sym">(</span>ci<span class="sym">,</span> cr<span class="sym">,</span> byte<span class="sym">) =</span>
   <span class="kwa">let</span>
      <span class="kwa">val</span> byte <span class="sym">=</span> <span class="kwa">Word8</span>.<span class="sym">&lt;&lt; (</span>byte<span class="sym">,</span> <span class="num">0</span>w1<span class="sym">)</span>
      <span class="kwa">fun</span> loop <span class="sym">(</span>i<span class="sym">,</span> zr<span class="sym">,</span> zr2<span class="sym">,</span> zi<span class="sym">,</span> zi2<span class="sym">) =</span>
	 <span class="kwa">let</span>
	    <span class="kwa">val</span> zi' <span class="sym">=</span> <span class="num">2.0</span> <span class="sym">*</span> zr <span class="sym">*</span> zi <span class="sym">+</span> ci
	    <span class="kwa">val</span> zr <span class="sym">=</span> zr2 <span class="sym">-</span> zi2 <span class="sym">+</span> cr
	    <span class="kwa">val</span> zi <span class="sym">=</span> zi'
	    <span class="kwa">val</span> zr2 <span class="sym">=</span> zr <span class="sym">*</span> zr
	    <span class="kwa">val</span> zi2 <span class="sym">=</span> zi <span class="sym">*</span> zi
	 <span class="kwa">in</span>
	    <span class="kwa">if</span> zr2 <span class="sym">+</span> zi2 <span class="sym">&gt;</span> limit2
	       <span class="kwa">then Word8</span>.orb <span class="sym">(</span>byte<span class="sym">,</span> <span class="num">0</span>w0<span class="sym">)</span>
	    <span class="kwa">else if</span> i <span class="sym">=</span> niter <span class="sym">-</span> <span class="num">1</span>
	       <span class="kwa">then Word8</span>.orb <span class="sym">(</span>byte<span class="sym">,</span> <span class="num">0</span>w1<span class="sym">)</span>
	    <span class="kwa">else</span> loop <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> zr<span class="sym">,</span> zr2<span class="sym">,</span> zi<span class="sym">,</span> zi2<span class="sym">)</span>
	 <span class="kwa">end</span>
   <span class="kwa">in</span>
      loop <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">)</span>
   <span class="kwa">end</span>

<span class="kwa">val</span> w <span class="sym">=</span> valOf <span class="sym">(</span><span class="kwa">Int</span>.fromString <span class="sym">(</span>hd <span class="sym">(</span>CommandLine.arguments <span class="sym">())))</span>
<span class="kwa">val</span> h <span class="sym">=</span> w
<span class="kwa">val</span> fw <span class="sym">=</span> <span class="kwb">real</span> w
<span class="kwa">val</span> fh <span class="sym">=</span> <span class="kwb">real</span> h

<span class="kwa">fun</span> outputByte b <span class="sym">=</span> <span class="kwa">TextIO</span>.output1 <span class="sym">(</span><span class="kwa">TextIO</span>.stdOut<span class="sym">,</span> Byte.byteToChar b<span class="sym">)</span>

<span class="kwa">val</span> <span class="sym">() =</span> print <span class="sym">(</span>concat <span class="sym">[</span><span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwa">Int</span>.toString w<span class="sym">,</span> <span class="str">&quot; &quot;</span><span class="sym">,</span> <span class="kwa">Int</span>.toString h<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">])</span>

<span class="kwa">val</span> cplmt8 <span class="sym">=</span> <span class="kwa">Word</span>.fromInt <span class="sym">(</span><span class="num">8</span> <span class="sym">-</span> w mod <span class="num">8</span><span class="sym">)</span>

<span class="kwa">val</span> _ <span class="sym">=</span>
   <span class="kwa">Int</span>.fold
   <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> h<span class="sym">, (</span><span class="num">0</span><span class="sym">,</span> <span class="num">0</span>w0<span class="sym">),</span> <span class="kwa">fn</span> <span class="sym">(</span>y<span class="sym">,</span> ac<span class="sym">) =&gt;</span>
    <span class="kwa">let</span>
       <span class="kwa">val</span> ci <span class="sym">=</span> <span class="num">2.0</span> <span class="sym">*</span> <span class="kwb">real</span> y <span class="sym">/</span> fh <span class="sym">-</span> <span class="num">1.0</span>
       <span class="kwa">val</span> <span class="sym">(</span>bit<span class="sym">,</span> byte<span class="sym">) =</span>
	  <span class="kwa">Int</span>.fold
	  <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> w<span class="sym">,</span> ac<span class="sym">,</span> <span class="kwa">fn</span> <span class="sym">(</span>x<span class="sym">, (</span>bit<span class="sym">,</span> byte<span class="sym">)) =&gt;</span>
	   <span class="kwa">let</span>
	      <span class="kwa">val</span> cr <span class="sym">=</span> <span class="num">2.0</span> <span class="sym">*</span> <span class="kwb">real</span> x <span class="sym">/</span> fw <span class="sym">-</span> <span class="num">1.5</span>
	      <span class="kwa">val</span> byte <span class="sym">=</span> addBit0 <span class="sym">(</span>ci<span class="sym">,</span> cr<span class="sym">,</span> byte<span class="sym">)</span>
	      <span class="kwa">val</span> bit <span class="sym">=</span> bit <span class="sym">+</span> <span class="num">1</span>
	   <span class="kwa">in</span>
	      <span class="kwa">if</span> <span class="num">8</span> <span class="sym">=</span> bit <span class="kwa">then</span> <span class="sym">(</span>outputByte byte<span class="sym">; (</span><span class="num">0</span><span class="sym">,</span> <span class="num">0</span>w0<span class="sym">))</span>
	      <span class="kwa">else</span> <span class="sym">(</span>bit<span class="sym">,</span> byte<span class="sym">)</span>
	   <span class="kwa">end</span><span class="sym">)</span>
    <span class="kwa">in</span>
       <span class="kwa">if</span> <span class="num">0</span> <span class="sym">=</span> bit
	  <span class="kwa">then</span> <span class="sym">(</span>bit<span class="sym">,</span> byte<span class="sym">)</span>
       <span class="kwa">else</span>
	  <span class="kwa">let</span>
	     <span class="kwa">val</span> <span class="sym">() =</span> outputByte <span class="sym">(</span><span class="kwa">Word8</span>.<span class="sym">&lt;&lt; (</span>byte<span class="sym">,</span> cplmt8<span class="sym">));</span>
	  <span class="kwa">in</span>
	     <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="num">0</span>w0<span class="sym">)</span>
	  <span class="kwa">end</span>
    <span class="kwa">end</span><span class="sym">)</span>
