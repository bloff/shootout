<span class="slc">\ The Computer Language Shootout</span>
<span class="slc">\ http://shootout.alioth.debian.org</span>

<span class="slc">\ Contributed by Ian Osgood</span>

<span class="slc">\ read NUM from last command line argument</span>
<span class="num">0</span><span class="sym">.</span> argc <span class="sym">&#64;</span> <span class="num">1</span><span class="sym">-</span> arg <span class="sym">&gt;</span>number <span class="num">2</span>drop drop constant NUM

create a NUM allot
a NUM <span class="num">1</span><span class="sym">- +</span> constant a<span class="sym">-</span>last
create pan NUM allot
create counts NUM allot
<span class="num">0</span> value <span class="sym">#</span>perms

<span class="sym">: .</span>pan <span class="com">( a -- )</span> NUM <span class="num">0</span> do dup c<span class="sym">&#64;</span> <span class="num">1</span> u<span class="sym">.</span>r <span class="num">1</span><span class="sym">+</span> loop drop cr <span class="sym">;</span>

<span class="sym">:</span> flip <span class="com">( n -- )</span>
  dup pan <span class="sym">+</span>  swap <span class="num">2</span><span class="sym">/</span> pan <span class="sym">+</span>  pan do
    <span class="num">1</span><span class="sym">-</span>  i c<span class="sym">&#64;</span> over c<span class="sym">&#64;</span>  i c<span class="sym">!</span> over c<span class="sym">!</span>
  loop drop <span class="sym">;</span>

<span class="sym">:</span> flips <span class="com">( -- n )</span>
  <span class="num">0</span> begin pan c<span class="sym">&#64;</span> <span class="num">1</span> <span class="sym">&gt;</span> while <span class="num">1</span><span class="sym">+</span>  pan c<span class="sym">&#64;</span> flip repeat <span class="sym">;</span>

<span class="sym">:</span> fannkuch <span class="com">( -- max-flips )</span>
  NUM <span class="num">0</span> do i <span class="num">1</span><span class="sym">+</span>  a i <span class="sym">+</span> c<span class="sym">!</span> loop
  <span class="num">0</span> NUM <span class="com">( max-flips r )</span>
  begin
    <span class="slc">\ print first 30 permutations</span>
    <span class="sym">#</span>perms <span class="num">30</span> <span class="sym">&lt;</span> if a <span class="sym">.</span>pan  <span class="sym">#</span>perms <span class="num">1</span><span class="sym">+</span> to <span class="sym">#</span>perms then

    <span class="slc">\ eliminate bad pans</span>
    a c<span class="sym">&#64;</span> <span class="num">1</span> <span class="sym">&gt;</span> if a<span class="sym">-</span>last c<span class="sym">&#64;</span> NUM <span class="sym">&lt;</span> if
      <span class="slc">\ fill the pan and start flipping</span>
      a pan NUM move
      swap flips max swap
    then then

    <span class="slc">\ next permutation</span>
    begin dup <span class="num">1</span> <span class="sym">&gt;</span> while dup <span class="num">1</span><span class="sym">-</span> tuck counts <span class="sym">+</span> c<span class="sym">!</span> repeat
    begin dup <span class="sym">&gt;</span>r  a c<span class="sym">&#64;</span>  a <span class="num">1</span><span class="sym">+</span> a r<span class="sym">&#64;</span> cmove  a r<span class="sym">&gt; +</span> c<span class="sym">!</span>      <span class="slc">\ roll</span>
          dup counts <span class="sym">+</span>  dup c<span class="sym">&#64;</span> <span class="num">1</span><span class="sym">-</span>  dup rot c<span class="sym">!</span>  <span class="num">0</span><span class="sym">=</span>
    while <span class="num">1</span><span class="sym">+</span>  dup NUM <span class="sym">=</span> if drop exit then
    repeat
  again <span class="sym">;</span>

fannkuch <span class="sym">.</span><span class="str">&quot; Pfannkuchen(&quot;</span> NUM <span class="num">1</span> u<span class="sym">.</span>r <span class="sym">.</span><span class="str">&quot; ) = &quot;</span> <span class="num">1</span> u<span class="sym">.</span>r cr bye
