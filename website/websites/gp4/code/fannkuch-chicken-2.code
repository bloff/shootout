<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;; contributed by elf, mar 2008</span>


<span class="hl sym">(</span><span class="hl kwa">eval</span>-when <span class="hl sym">(</span>compile<span class="hl sym">)</span>
    <span class="hl sym">(</span>declare
        <span class="hl sym">(</span>uses srfi-<span class="hl num">1</span> srfi-<span class="hl num">4</span><span class="hl sym">)</span>
        <span class="hl sym">(</span>fixnum-arithmetic<span class="hl sym">)</span>
        <span class="hl sym">(</span>usual-integrations<span class="hl sym">)</span>
        <span class="hl sym">(</span>block<span class="hl sym">)</span>
        <span class="hl sym">(</span>number-<span class="hl kwa">type</span> fixnum<span class="hl sym">)</span>
        <span class="hl sym">(</span>disable-interrupts<span class="hl sym">)</span>
        <span class="hl sym">(</span><span class="hl kwa">lambda</span>-lift<span class="hl sym">)</span>
        <span class="hl sym">(</span>unsafe<span class="hl sym">)</span>
        <span class="hl sym">(</span>inline<span class="hl sym">)</span>
        <span class="hl sym">(</span>bound-to-procedure
            vector-swap<span class="hl sym">!</span>
            make-swap<span class="hl sym">!</span>
            vector-<span class="hl kwa">reverse</span><span class="hl sym">!</span>
            flips
            circular-<span class="hl kwa">append</span>
            make-pclos
            make-plist-even
            make-plist-odd
            make-plist1
            make-plist2
            run-permute2
            run-permute
            errinvoke
            main
        <span class="hl sym">)</span>
    <span class="hl sym">))</span>


<span class="hl sym">(</span>define-inline <span class="hl sym">(</span>vector-swap<span class="hl sym">!</span> v x y xval<span class="hl sym">)</span>
    <span class="hl sym">(</span>u8vector-<span class="hl kwa">set</span><span class="hl sym">!</span> v x <span class="hl sym">(</span>u8vector-ref v y<span class="hl sym">))</span>
    <span class="hl sym">(</span>u8vector-<span class="hl kwa">set</span><span class="hl sym">!</span> v y xval<span class="hl sym">)</span>
    v<span class="hl sym">)</span>

<span class="hl sym">(</span>define-inline <span class="hl sym">(</span>make-swap<span class="hl sym">!</span> x y<span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>v<span class="hl sym">)</span>
        <span class="hl sym">(</span>vector-swap<span class="hl sym">!</span> v x y <span class="hl sym">(</span>u8vector-ref v x<span class="hl sym">))))</span>

<span class="hl sym">(</span>define-inline <span class="hl sym">(</span>vector-<span class="hl kwa">reverse</span><span class="hl sym">!</span> v i<span class="hl sym">)</span>
    <span class="hl sym">(</span>let loop <span class="hl sym">((</span>j   <span class="hl num">0</span><span class="hl sym">)</span>
               <span class="hl sym">(</span>i   i<span class="hl sym">))</span>
        <span class="hl sym">(</span><span class="hl kwa">cond</span> <span class="hl sym">((</span>fx<span class="hl sym">&gt;=</span> j i<span class="hl sym">)</span>
                  v<span class="hl sym">)</span>
              <span class="hl sym">(</span>else
                  <span class="hl sym">(</span>vector-swap<span class="hl sym">!</span> v j i <span class="hl sym">(</span>u8vector-ref v j<span class="hl sym">))</span>
                  <span class="hl sym">(</span>loop <span class="hl sym">(</span>fx<span class="hl sym">+</span> <span class="hl num">1</span> j<span class="hl sym">) (</span>fx- i <span class="hl num">1</span><span class="hl sym">))))))</span>

<span class="hl sym">(</span>define-inline <span class="hl sym">(</span>flips ov vl<span class="hl sym">)</span>
    <span class="hl sym">(</span>let loop <span class="hl sym">((</span>c   <span class="hl num">1</span><span class="hl sym">)</span>
               <span class="hl sym">(</span>v   <span class="hl sym">(</span>vector-<span class="hl kwa">reverse</span><span class="hl sym">!</span> vl <span class="hl sym">(</span>u8vector-ref vl <span class="hl num">0</span><span class="hl sym">))))</span>
        <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>fx<span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl sym">(</span>u8vector-ref v <span class="hl num">0</span><span class="hl sym">))</span>
            <span class="hl sym">(</span>fxmax ov c<span class="hl sym">)</span>
            <span class="hl sym">(</span>loop <span class="hl sym">(</span>fx<span class="hl sym">+</span> <span class="hl num">1</span> c<span class="hl sym">) (</span>vector-<span class="hl kwa">reverse</span><span class="hl sym">!</span> v <span class="hl sym">(</span>u8vector-ref v <span class="hl num">0</span><span class="hl sym">))))))</span>

<span class="hl sym">(</span>define-inline <span class="hl sym">(</span>circular-<span class="hl kwa">append</span> l1 l2<span class="hl sym">)</span>
    <span class="hl sym">(</span>let <span class="hl sym">((</span>r   <span class="hl sym">(</span><span class="hl kwa">append</span> l1 l2<span class="hl sym">)))</span>
        <span class="hl sym">(</span><span class="hl kwa">set</span>-<span class="hl kwa">cdr</span><span class="hl sym">! (</span><span class="hl kwa">last</span>-pair r<span class="hl sym">)</span> r<span class="hl sym">)</span>
        r<span class="hl sym">))</span>

<span class="hl sym">(</span>define-inline <span class="hl sym">(</span>make-pclos l<span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>v<span class="hl sym">)</span>
        <span class="hl sym">(</span>let <span class="hl sym">((</span>t   <span class="hl sym">((</span><span class="hl kwa">car</span> l<span class="hl sym">)</span> v<span class="hl sym">)))</span>
            <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> l <span class="hl sym">(</span><span class="hl kwa">cdr</span> l<span class="hl sym">))</span>
            t<span class="hl sym">)))</span>

<span class="hl sym">(</span>define-inline <span class="hl sym">(</span>make-plist-even i1 i2 l<span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl kwa">append</span> l
            <span class="hl sym">(</span><span class="hl kwa">append</span>-map
                <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>x<span class="hl sym">)</span>
                    <span class="hl sym">(</span><span class="hl kwa">cons</span> <span class="hl sym">(</span>make-swap<span class="hl sym">!</span> i1 x<span class="hl sym">)</span> l<span class="hl sym">))</span>
                <span class="hl sym">(</span><span class="hl kwa">cons</span> i2 <span class="hl sym">(</span>iota i2<span class="hl sym">)))))</span>

<span class="hl sym">(</span>define-inline <span class="hl sym">(</span>make-plist-odd i1 i2 l<span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl kwa">append</span> l
            <span class="hl sym">(</span><span class="hl kwa">append</span>-map
                <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>x<span class="hl sym">)</span>
                    <span class="hl sym">(</span><span class="hl kwa">cons</span> <span class="hl sym">(</span>make-swap<span class="hl sym">!</span> i1 i2<span class="hl sym">)</span> l<span class="hl sym">))</span>
                <span class="hl sym">(</span>iota i1<span class="hl sym">))))</span>

<span class="hl sym">(</span>define-inline <span class="hl sym">(</span>make-plist1 n<span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>fx<span class="hl sym">&lt;</span> n <span class="hl num">4</span><span class="hl sym">)</span>
        <span class="hl sym">(</span>case n
            <span class="hl sym">((</span><span class="hl num">1</span><span class="hl sym">)</span>
                <span class="hl sym">'())</span>
            <span class="hl sym">((</span><span class="hl num">2</span><span class="hl sym">)</span>
                <span class="hl sym">(</span><span class="hl kwa">list</span> <span class="hl sym">(</span>make-swap<span class="hl sym">!</span> <span class="hl num">0 1</span><span class="hl sym">)))</span>
            <span class="hl sym">((</span><span class="hl num">3</span><span class="hl sym">)</span>
                <span class="hl sym">(</span><span class="hl kwa">list</span>
                    <span class="hl sym">(</span>make-swap<span class="hl sym">!</span> <span class="hl num">0 1</span><span class="hl sym">)</span>
                    <span class="hl sym">(</span>make-swap<span class="hl sym">!</span> <span class="hl num">1 2</span><span class="hl sym">)</span>
                    <span class="hl sym">(</span>make-swap<span class="hl sym">!</span> <span class="hl num">0 1</span><span class="hl sym">)</span>
                    <span class="hl sym">(</span>make-swap<span class="hl sym">!</span> <span class="hl num">1 2</span><span class="hl sym">)</span>
                    <span class="hl sym">(</span>make-swap<span class="hl sym">!</span> <span class="hl num">0 1</span><span class="hl sym">))))</span>
        <span class="hl sym">(</span>let loop <span class="hl sym">((</span>l   <span class="hl sym">(</span><span class="hl kwa">list</span> <span class="hl sym">(</span>make-swap<span class="hl sym">!</span> <span class="hl num">0 1</span><span class="hl sym">)</span>
                              <span class="hl sym">(</span>make-swap<span class="hl sym">!</span> <span class="hl num">1 2</span><span class="hl sym">)</span>
                              <span class="hl sym">(</span>make-swap<span class="hl sym">!</span> <span class="hl num">0 1</span><span class="hl sym">)</span>
                              <span class="hl sym">(</span>make-swap<span class="hl sym">!</span> <span class="hl num">1 2</span><span class="hl sym">)</span>
                              <span class="hl sym">(</span>make-swap<span class="hl sym">!</span> <span class="hl num">0 1</span><span class="hl sym">)))</span>
                   <span class="hl sym">(</span>i   <span class="hl num">4</span><span class="hl sym">))</span>
            <span class="hl sym">(</span><span class="hl kwa">cond</span> <span class="hl sym">((</span>fx<span class="hl sym">&gt;</span> i n<span class="hl sym">)</span>
                      l<span class="hl sym">)</span>
                  <span class="hl sym">((</span>even? i<span class="hl sym">)</span>
                      <span class="hl sym">(</span>loop <span class="hl sym">(</span>make-plist-even <span class="hl sym">(</span>fx- i <span class="hl num">1</span><span class="hl sym">) (</span>fx- i <span class="hl num">2</span><span class="hl sym">)</span> l<span class="hl sym">)</span>
                            <span class="hl sym">(</span>fx<span class="hl sym">+</span> <span class="hl num">1</span> i<span class="hl sym">)))</span>
                  <span class="hl sym">(</span>else
                      <span class="hl sym">(</span>loop <span class="hl sym">(</span>make-plist-odd <span class="hl sym">(</span>fx- i <span class="hl num">1</span><span class="hl sym">) (</span>fx- i <span class="hl num">2</span><span class="hl sym">)</span> l<span class="hl sym">)</span>
                            <span class="hl sym">(</span>fx<span class="hl sym">+</span> <span class="hl num">1</span> i<span class="hl sym">)))))))</span>

<span class="hl sym">(</span>define-inline <span class="hl sym">(</span>make-plist2 i n p<span class="hl sym">)</span>
    <span class="hl sym">(</span>let loop <span class="hl sym">((</span>i   i<span class="hl sym">)</span>
               <span class="hl sym">(</span>l   <span class="hl sym">'()))</span>
        <span class="hl sym">(</span><span class="hl kwa">cond</span> <span class="hl sym">((</span>fx<span class="hl sym">&gt;</span> i n<span class="hl sym">)</span>
                  <span class="hl sym">(</span>make-pclos
                      <span class="hl sym">(</span>circular-<span class="hl kwa">append</span>
                          p
                          <span class="hl sym">(</span><span class="hl kwa">list</span>
                              <span class="hl sym">(</span>make-pclos
                                  <span class="hl sym">(</span><span class="hl kwa">append</span>
                                      l
                                      <span class="hl sym">(</span><span class="hl kwa">list</span> <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>v<span class="hl sym">)</span> #f<span class="hl sym">))))))))</span>
              <span class="hl sym">((</span>even? i<span class="hl sym">)</span>
                  <span class="hl sym">(</span>loop <span class="hl sym">(</span>fx<span class="hl sym">+</span> <span class="hl num">1</span> i<span class="hl sym">)</span>
                        <span class="hl sym">(</span>make-plist-even <span class="hl sym">(</span>fx- i <span class="hl num">1</span><span class="hl sym">) (</span>fx- i <span class="hl num">2</span><span class="hl sym">)</span> l<span class="hl sym">)))</span>
              <span class="hl sym">(</span>else
                  <span class="hl sym">(</span>loop <span class="hl sym">(</span>fx<span class="hl sym">+</span> <span class="hl num">1</span> i<span class="hl sym">)</span>
                        <span class="hl sym">(</span>make-plist-odd <span class="hl sym">(</span>fx- i <span class="hl num">1</span><span class="hl sym">) (</span>fx- i <span class="hl num">2</span><span class="hl sym">)</span> l<span class="hl sym">))))))</span>

<span class="hl sym">(</span>define-inline <span class="hl sym">(</span>run-permute2 n n1 pl v c<span class="hl sym">)</span>
    <span class="hl sym">(</span>let loop <span class="hl sym">((</span>v   <span class="hl sym">(</span>pl v<span class="hl sym">))</span>
               <span class="hl sym">(</span>c   <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">or</span> <span class="hl sym">(</span>fx<span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl sym">(</span>u8vector-ref v <span class="hl num">0</span><span class="hl sym">))</span>
                            <span class="hl sym">(</span>fx<span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl sym">(</span>u8vector-ref v <span class="hl sym">(</span>u8vector-ref v <span class="hl num">0</span><span class="hl sym">)))</span>
                            <span class="hl sym">(</span>fx<span class="hl sym">=</span> n1 <span class="hl sym">(</span>u8vector-ref v n1<span class="hl sym">)))</span>
                        c
                        <span class="hl sym">(</span>flips c <span class="hl sym">(</span>subu8vector v <span class="hl num">0</span> n<span class="hl sym">)))))</span>
        <span class="hl sym">(</span><span class="hl kwa">if</span> v
            <span class="hl sym">(</span>loop
                <span class="hl sym">(</span>pl v<span class="hl sym">)</span>
                <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">or</span> <span class="hl sym">(</span>fx<span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl sym">(</span>u8vector-ref v <span class="hl num">0</span><span class="hl sym">))</span>
                        <span class="hl sym">(</span>fx<span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl sym">(</span>u8vector-ref v <span class="hl sym">(</span>u8vector-ref v <span class="hl num">0</span><span class="hl sym">)))</span>
                        <span class="hl sym">(</span>fx<span class="hl sym">=</span> n1 <span class="hl sym">(</span>u8vector-ref v n1<span class="hl sym">)))</span>
                    c
                    <span class="hl sym">(</span>flips c <span class="hl sym">(</span>subu8vector v <span class="hl num">0</span> n<span class="hl sym">))))</span>
            c<span class="hl sym">)))</span>

<span class="hl sym">(</span>define-inline <span class="hl sym">(</span>run-permute n n1 pl<span class="hl sym">)</span>
    <span class="hl sym">(</span>let loop <span class="hl sym">((</span>v   <span class="hl sym">(</span>let <span class="hl sym">((</span>v   <span class="hl sym">(</span>make-u8vector n <span class="hl num">0</span> #t<span class="hl sym">)))</span>
                        <span class="hl sym">(</span>for-each
                            <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>x<span class="hl sym">)</span>
                                <span class="hl sym">(</span>u8vector-<span class="hl kwa">set</span><span class="hl sym">!</span> v x x<span class="hl sym">))</span>
                            <span class="hl sym">(</span>iota n<span class="hl sym">))</span>
                        v<span class="hl sym">))</span>
               <span class="hl sym">(</span>c   <span class="hl num">1</span><span class="hl sym">)</span>
               <span class="hl sym">(</span>t   <span class="hl num">30</span><span class="hl sym">))</span>
        <span class="hl sym">(</span><span class="hl kwa">cond</span> <span class="hl sym">(</span>v
                  <span class="hl sym">(</span>for-each
                      <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>x<span class="hl sym">)</span>
                          <span class="hl sym">(</span>display <span class="hl sym">(</span>fx<span class="hl sym">+</span> <span class="hl num">1</span> x<span class="hl sym">)))</span>
                      <span class="hl sym">(</span>u8vector-<span class="hl sym">&gt;</span><span class="hl kwa">list</span> v<span class="hl sym">))</span>
                  <span class="hl sym">(</span>newline<span class="hl sym">)</span>
                  <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>fx<span class="hl sym">=</span> <span class="hl num">0</span> t<span class="hl sym">)</span>
                      <span class="hl sym">(</span>run-permute2 n n1 pl v c<span class="hl sym">)</span>
                      <span class="hl sym">(</span>loop
                          <span class="hl sym">(</span>pl v<span class="hl sym">)</span>
                          <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">or</span> <span class="hl sym">(</span>fx<span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl sym">(</span>u8vector-ref v <span class="hl num">0</span><span class="hl sym">))</span>
                                  <span class="hl sym">(</span>fx<span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl sym">(</span>u8vector-ref v <span class="hl sym">(</span>u8vector-ref v <span class="hl num">0</span><span class="hl sym">)))</span>
                                  <span class="hl sym">(</span>fx<span class="hl sym">=</span> n1 <span class="hl sym">(</span>u8vector-ref v n1<span class="hl sym">)))</span>
                              c
                              <span class="hl sym">(</span>flips c <span class="hl sym">(</span>subu8vector v <span class="hl num">0</span> n<span class="hl sym">)))</span>
                          <span class="hl sym">(</span>fx- t <span class="hl num">1</span><span class="hl sym">))))</span>
              <span class="hl sym">(</span>else
                  c<span class="hl sym">))))</span>

<span class="hl sym">(</span>define-inline <span class="hl sym">(</span>errinvoke<span class="hl sym">)</span>
    <span class="hl sym">(</span>display <span class="hl str">&quot;syntax: &quot;</span><span class="hl sym">)</span>
    <span class="hl sym">(</span>display <span class="hl sym">(</span>program-name<span class="hl sym">))</span>
    <span class="hl sym">(</span>display <span class="hl str">&quot; [positive integer]&quot;</span><span class="hl sym">)</span>
    <span class="hl sym">(</span>newline<span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl kwa">exit</span> <span class="hl num">1</span><span class="hl sym">))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>main args<span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl kwa">or</span> <span class="hl sym">(</span>fx<span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">(</span><span class="hl kwa">length</span> args<span class="hl sym">))</span>
        <span class="hl sym">(</span>errinvoke<span class="hl sym">))</span>
    <span class="hl sym">(</span>let <span class="hl sym">((</span>n   <span class="hl sym">(</span>string-<span class="hl sym">&gt;</span>number <span class="hl sym">(</span><span class="hl kwa">car</span> args<span class="hl sym">))))</span>
        <span class="hl sym">(</span><span class="hl kwa">or</span> <span class="hl sym">(</span><span class="hl kwa">and</span> <span class="hl sym">(</span>integer? n<span class="hl sym">) (</span>fx<span class="hl sym">&gt;</span> n <span class="hl num">0</span><span class="hl sym">))</span>
            <span class="hl sym">(</span>errinvoke<span class="hl sym">))</span>
        <span class="hl sym">(</span>let <span class="hl sym">((</span>r   <span class="hl sym">(</span>run-permute
                       n
                       <span class="hl sym">(</span>fx- n <span class="hl num">1</span><span class="hl sym">)</span>
                       <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>fx<span class="hl sym">&lt;</span> n <span class="hl num">6</span><span class="hl sym">)</span>
                           <span class="hl sym">(</span>make-pclos
                               <span class="hl sym">(</span><span class="hl kwa">append</span> <span class="hl sym">(</span>make-plist1 n<span class="hl sym">)</span>
                                       <span class="hl sym">(</span><span class="hl kwa">list</span> <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>v<span class="hl sym">)</span> #f<span class="hl sym">))))</span>
                           <span class="hl sym">(</span>make-plist2 <span class="hl sym">(</span>fx<span class="hl sym">+</span> <span class="hl num">1</span> <span class="hl sym">(</span>fxshr n <span class="hl num">1</span><span class="hl sym">))</span> n
                                        <span class="hl sym">(</span>make-plist1 <span class="hl sym">(</span>fxshr n <span class="hl num">1</span><span class="hl sym">)))))))</span>
            <span class="hl sym">(</span>display <span class="hl str">&quot;Pfannkuchen(&quot;</span><span class="hl sym">)</span>
            <span class="hl sym">(</span>display n<span class="hl sym">)</span>
            <span class="hl sym">(</span>display <span class="hl str">&quot;) = &quot;</span><span class="hl sym">)</span>
            <span class="hl sym">(</span>display r<span class="hl sym">)</span>
            <span class="hl sym">(</span>newline<span class="hl sym">)</span>
            <span class="hl sym">(</span><span class="hl kwa">exit</span> <span class="hl num">0</span><span class="hl sym">))))</span>

<span class="hl sym">(</span>main <span class="hl sym">(</span><span class="hl kwa">command</span>-<span class="hl kwa">line</span>-arguments<span class="hl sym">))</span>
