<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Graham Miller</span>
<span class="hl com">*/</span>

<span class="hl kwa">public class</span> message <span class="hl sym">{</span>
   <span class="hl kwa">public static final</span> <span class="hl kwb">int</span> numberOfThreads <span class="hl sym">=</span> <span class="hl num">500</span><span class="hl sym">;</span>

   <span class="hl kwa">public static</span> <span class="hl kwb">int</span> numberOfMessagesToSend<span class="hl sym">;</span>

   <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwc">String</span> args<span class="hl sym">[]) {</span>
      numberOfMessagesToSend <span class="hl sym">=</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span><span class="hl kwd">parseInt</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>

      RingBufferThread chain <span class="hl sym">=</span> null<span class="hl sym">;</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> numberOfThreads<span class="hl sym">;</span> i<span class="hl sym">++) {</span>
         chain <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">RingBufferThread</span><span class="hl sym">(</span>chain<span class="hl sym">,</span> numberOfMessagesToSend<span class="hl sym">*(</span>numberOfThreads<span class="hl sym">));</span>
         chain<span class="hl sym">.</span><span class="hl kwd">start</span><span class="hl sym">();</span>
       <span class="hl sym">}</span>


      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> numberOfMessagesToSend<span class="hl sym">;</span> i<span class="hl sym">++) {</span>
         chain<span class="hl sym">.</span><span class="hl kwd">enqueue</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span>
      <span class="hl sym">}</span>
      chain<span class="hl sym">.</span><span class="hl kwd">signalDoneSendingMessages</span><span class="hl sym">();</span>
    <span class="hl sym">}</span>

   <span class="hl kwa">public static class</span> RingBufferThread <span class="hl kwa">extends</span> <span class="hl kwc">Thread</span> <span class="hl sym">{</span>

      <span class="hl kwa">private static final</span> <span class="hl kwb">int</span> RING_BUFFER_CAPACITY <span class="hl sym">=</span> <span class="hl num">100</span><span class="hl sym">;</span>

      <span class="hl kwa">private volatile</span> RingNode loadNode<span class="hl sym">;</span>
      <span class="hl kwa">private volatile</span> RingNode consumeNode<span class="hl sym">;</span>

      RingBufferThread nextThread<span class="hl sym">;</span>
      <span class="hl kwa">private volatile</span> <span class="hl kwb">boolean</span> done <span class="hl sym">=</span> false<span class="hl sym">;</span>
      <span class="hl kwa">private final</span> <span class="hl kwb">int</span> finalSum<span class="hl sym">;</span>


      <span class="hl kwd">RingBufferThread</span><span class="hl sym">(</span>RingBufferThread nextThread<span class="hl sym">,</span> <span class="hl kwb">int</span> finalSum<span class="hl sym">) {</span>
         RingNode node <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">RingNode</span><span class="hl sym">();</span>
         RingNode tail <span class="hl sym">=</span> node<span class="hl sym">;</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> RING_BUFFER_CAPACITY<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">;</span> i <span class="hl sym">++){</span>
            RingNode newNode <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">RingNode</span><span class="hl sym">();</span>
            newNode<span class="hl sym">.</span>next <span class="hl sym">=</span> node<span class="hl sym">;</span>
            node <span class="hl sym">=</span> newNode<span class="hl sym">;</span>
         <span class="hl sym">}</span>
         <span class="hl slc">// complete the ring</span>
         tail<span class="hl sym">.</span>next <span class="hl sym">=</span> node<span class="hl sym">;</span>

         <span class="hl slc">// both load and consume start at the same node</span>
         loadNode <span class="hl sym">=</span> node<span class="hl sym">;</span>
         consumeNode <span class="hl sym">=</span> node<span class="hl sym">;</span>

         <span class="hl kwa">this</span><span class="hl sym">.</span>nextThread <span class="hl sym">=</span> nextThread<span class="hl sym">;</span>
         <span class="hl kwa">this</span><span class="hl sym">.</span>finalSum <span class="hl sym">=</span> finalSum<span class="hl sym">;</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">run</span><span class="hl sym">() {</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>nextThread <span class="hl sym">!=</span> null<span class="hl sym">) {</span>
            <span class="hl kwa">while</span> <span class="hl sym">(!</span>done <span class="hl sym">|| !</span><span class="hl kwd">isEmpty</span><span class="hl sym">()) {</span>
               nextThread<span class="hl sym">.</span><span class="hl kwd">enqueue</span><span class="hl sym">(</span><span class="hl kwd">dequeue</span><span class="hl sym">());</span>
            <span class="hl sym">}</span>
            nextThread<span class="hl sym">.</span><span class="hl kwd">signalDoneSendingMessages</span><span class="hl sym">();</span>
         <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
            <span class="hl kwb">int</span> sum <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl kwa">while</span> <span class="hl sym">(</span>sum <span class="hl sym">&lt;</span> finalSum<span class="hl sym">) {</span>
               <span class="hl kwb">int</span> message <span class="hl sym">=</span> <span class="hl kwd">dequeue</span><span class="hl sym">();</span>
               sum <span class="hl sym">+=</span> message<span class="hl sym">;</span>
            <span class="hl sym">}</span>
            <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span>sum<span class="hl sym">);</span>
            <span class="hl kwc">System</span><span class="hl sym">.</span><span class="hl kwd">exit</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>


      <span class="hl kwa">private</span> <span class="hl kwb">boolean</span> <span class="hl kwd">isEmpty</span><span class="hl sym">() {</span>
         <span class="hl kwa">return</span> consumeNode <span class="hl sym">==</span> loadNode<span class="hl sym">;</span>
      <span class="hl sym">}</span>

      <span class="hl com">/**</span>
<span class="hl com">       * &#64;param message</span>
<span class="hl com">       */</span>
      <span class="hl kwa">public final</span> <span class="hl kwb">void</span> <span class="hl kwd">enqueue</span><span class="hl sym">(</span><span class="hl kwb">int</span> message<span class="hl sym">) {</span>
         <span class="hl slc">// after this test becomes false, and the loop exits</span>
         <span class="hl slc">// the removal of an element by the &quot;other&quot; thread</span>
         <span class="hl slc">// cannot make it true again, so therefore it is invariant</span>
         <span class="hl slc">// for the rest of the execution of this method.</span>
         <span class="hl slc">// that is once we have some free space, we will always</span>
         <span class="hl slc">// have free space until the thread calling this method</span>
         <span class="hl slc">// adds an element.</span>
         <span class="hl kwa">do</span> <span class="hl sym">{</span> <span class="hl com">/* nothing */</span> <span class="hl sym">}</span> <span class="hl kwa">while</span> <span class="hl sym">(</span>loadNode<span class="hl sym">.</span>next <span class="hl sym">==</span> consumeNode <span class="hl sym">&amp;&amp;</span> <span class="hl kwd">trueYield</span><span class="hl sym">());</span>

         loadNode<span class="hl sym">.</span>message <span class="hl sym">=</span> message<span class="hl sym">;</span>
         loadNode <span class="hl sym">=</span> loadNode<span class="hl sym">.</span>next<span class="hl sym">;</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">public final</span> <span class="hl kwb">int</span> <span class="hl kwd">dequeue</span><span class="hl sym">() {</span>
         <span class="hl slc">// after this test becomes false, and the loop exits</span>
         <span class="hl slc">// the addition of an element by the &quot;other&quot; thread</span>
         <span class="hl slc">// cannot make it true again, therefore it is invariant</span>
         <span class="hl slc">// for the rest of the execution of this method</span>
         <span class="hl slc">// that is once we have at least one element, we will always</span>
         <span class="hl slc">// have at least one element until the thread calling this</span>
         <span class="hl slc">// method removes one.</span>
         <span class="hl kwa">do</span> <span class="hl sym">{</span> <span class="hl com">/* nothing */</span> <span class="hl sym">}</span> <span class="hl kwa">while</span> <span class="hl sym">(</span>loadNode <span class="hl sym">==</span> consumeNode <span class="hl sym">&amp;&amp;</span> <span class="hl kwd">trueYield</span><span class="hl sym">());</span>

         <span class="hl kwb">int</span> message <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">+</span> consumeNode<span class="hl sym">.</span>message<span class="hl sym">;</span>
         consumeNode <span class="hl sym">=</span> consumeNode<span class="hl sym">.</span>next<span class="hl sym">;</span>

          <span class="hl kwa">return</span> message<span class="hl sym">;</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">public final</span> <span class="hl kwb">void</span> <span class="hl kwd">signalDoneSendingMessages</span><span class="hl sym">() {</span>
         <span class="hl slc">// once done is true, I am the only</span>
         <span class="hl slc">// thread accessing any of my variables, so we have no</span>
         <span class="hl slc">// more threading issues</span>
         done <span class="hl sym">=</span> true<span class="hl sym">;</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">private final</span> <span class="hl kwb">boolean</span> <span class="hl kwd">trueYield</span><span class="hl sym">() {</span>
         <span class="hl kwc">Thread</span><span class="hl sym">.</span><span class="hl kwd">yield</span><span class="hl sym">();</span>
         <span class="hl kwa">return</span> true<span class="hl sym">;</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">static class</span> RingNode <span class="hl sym">{</span>
      <span class="hl kwa">public volatile</span> <span class="hl kwb">int</span> message<span class="hl sym">;</span>
      <span class="hl kwa">public</span> RingNode next<span class="hl sym">;</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>
