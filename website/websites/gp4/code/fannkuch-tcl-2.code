<span class="slc">#!/usr/bin/tclsh</span>
<span class="slc">##</span>
<span class="slc">## The Computer Lannguage Shootout</span>
<span class="slc">## http://shootout.alioth.debian.org/</span>
<span class="slc">## Contributed by Heiner Marxen</span>
<span class="slc">##</span>
<span class="slc">## &quot;fannkuch&quot;	for Tcl</span>
<span class="slc">## Call:	tclsh fannkuch.tcl 9</span>
<span class="slc">##</span>
<span class="slc">## $Id: fannkuch-tcl-2.code,v 1.8 2006-10-25 15:24:31 igouy-guest Exp $</span>

<span class="kwa">proc</span> fannkuch <span class="sym">{</span>n<span class="sym">} {</span>
    <span class="kwa">if</span> <span class="sym">{</span><span class="kwb">$n</span> <span class="sym">&lt;</span> <span class="num">1</span><span class="sym">} {</span>
	<span class="kwa">return</span> <span class="num">0</span>
    <span class="sym">}</span>
    <span class="kwa">set</span> n1 <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span><span class="kwb">$n</span> <span class="sym">-</span> <span class="num">1</span><span class="sym">}]		;</span><span class="slc"># just caches n-1</span>

    <span class="kwa">set</span> nL <span class="sym">[</span><span class="kwa">list</span><span class="sym">]			;</span><span class="slc"># caches list &lt; $n</span>
    <span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> i <span class="num">0</span><span class="sym">} {</span><span class="kwb">$i</span> <span class="sym">&lt;</span> <span class="kwb">$n</span><span class="sym">} {</span><span class="kwa">incr</span> i<span class="sym">} {</span>
	<span class="kwa">lappend</span> nL <span class="kwb">$i</span>
    <span class="sym">}</span>
    <span class="kwa">foreach</span> j <span class="kwb">$nL</span> <span class="sym">{</span>
	<span class="kwa">set</span> L <span class="sym">[</span><span class="kwa">list</span><span class="sym">]</span>
	<span class="kwa">set</span> k <span class="kwb">$j</span>
	<span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> i <span class="num">0</span><span class="sym">} {</span><span class="kwb">$i</span> <span class="sym">&lt;</span> <span class="kwb">$k</span><span class="sym">} {</span><span class="kwa">incr</span> i<span class="sym">;</span> <span class="kwa">incr</span> k <span class="sym">-</span><span class="num">1</span><span class="sym">} {</span>
	    <span class="kwa">lappend</span> L <span class="kwb">$i $k</span>
	<span class="sym">}</span>
	<span class="kwa">set</span> IK<span class="sym">(</span><span class="kwb">$j</span><span class="sym">)</span> <span class="kwb">$L</span>		<span class="sym">;</span><span class="slc"># caches inner loop as above</span>
	<span class="sym">;</span><span class="slc"># quadratic overhead is ok for factorial usage</span>
    <span class="sym">}</span>

    <span class="kwa">foreach</span> i <span class="kwb">$nL</span> <span class="sym">{</span>
	<span class="kwa">set</span> perm1<span class="sym">(</span><span class="kwb">$i</span><span class="sym">)</span> <span class="kwb">$i</span>		<span class="sym">;</span><span class="slc"># initial (trivial) permu</span>
    <span class="sym">}</span>

    <span class="kwa">set</span> r        <span class="kwb">$n</span>
    <span class="kwa">set</span> didpr    <span class="num">0</span>
    <span class="kwa">set</span> flipsMax <span class="num">0</span>
    <span class="kwa">while</span> <span class="num">1</span> <span class="sym">{</span>
	<span class="kwa">if</span> <span class="sym">{</span><span class="kwb">$didpr</span> <span class="sym">&lt;</span> <span class="num">30</span><span class="sym">} {</span>
	    <span class="kwa">foreach</span> i <span class="kwb">$nL</span> <span class="sym">{</span>
		<span class="kwa">puts</span> <span class="sym">-</span>nonewline <span class="str">&quot;[expr {1 + $perm1($i)}]&quot;</span>
	    <span class="sym">}</span>
	    <span class="kwa">puts</span> <span class="str">&quot;&quot;</span>
	    <span class="kwa">incr</span> didpr
	<span class="sym">}</span>
	<span class="kwa">for</span> <span class="sym">{} {</span><span class="kwb">$r</span> <span class="sym">!=</span> <span class="num">1</span><span class="sym">} {</span><span class="kwa">incr</span> r <span class="sym">-</span><span class="num">1</span><span class="sym">} {</span>
	    <span class="kwa">set</span> count<span class="sym">([</span><span class="kwa">expr</span> <span class="sym">{</span><span class="kwb">$r</span><span class="sym">-</span><span class="num">1</span><span class="sym">}])</span> <span class="kwb">$r</span>
	<span class="sym">}</span>

	<span class="kwa">if</span> <span class="sym">{! (</span><span class="kwb">$perm1</span><span class="sym">(</span><span class="num">0</span><span class="sym">) ==</span> <span class="num">0</span>  <span class="sym">||</span>  <span class="kwb">$perm1</span><span class="sym">(</span><span class="kwb">$n1</span><span class="sym">) ==</span> <span class="kwb">$n1</span><span class="sym">)} {</span>
	    <span class="kwa">set</span> flips <span class="num">0</span>

	    <span class="sym">;</span><span class="slc">#array set perm [array get perm1]	;# is slower</span>
	    <span class="kwa">foreach</span> i <span class="kwb">$nL</span> <span class="sym">{</span>
		<span class="kwa">set</span> perm<span class="sym">(</span><span class="kwb">$i</span><span class="sym">)</span> <span class="kwb">$perm1</span><span class="sym">(</span><span class="kwb">$i</span><span class="sym">)		;</span><span class="slc"># perm = perm1</span>
	    <span class="sym">}</span>
	    <span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> k <span class="kwb">$perm</span><span class="sym">(</span><span class="num">0</span><span class="sym">)} {</span><span class="kwb">$k</span><span class="sym">} {</span><span class="kwa">set</span> k <span class="kwb">$perm</span><span class="sym">(</span><span class="num">0</span><span class="sym">)} {</span>
		<span class="sym">;</span><span class="slc">#for {set i 0} {$i &lt; $k} {incr i; incr k -1}</span>
		<span class="kwa">foreach</span> <span class="sym">{</span>i k<span class="sym">}</span> <span class="kwb">$IK</span><span class="sym">(</span><span class="kwb">$k</span><span class="sym">) {</span>
		    <span class="kwa">set</span> t <span class="kwb">$perm</span><span class="sym">(</span><span class="kwb">$i</span><span class="sym">)</span>
		    <span class="kwa">set</span>    perm<span class="sym">(</span><span class="kwb">$i</span><span class="sym">)</span> <span class="kwb">$perm</span><span class="sym">(</span><span class="kwb">$k</span><span class="sym">)</span>
		    <span class="kwa">set</span>              perm<span class="sym">(</span><span class="kwb">$k</span><span class="sym">)</span> <span class="kwb">$t</span>
		    <span class="sym">;</span><span class="slc"># the foreach exchange approach is much slower, here</span>
		<span class="sym">}</span>
		<span class="kwa">incr</span> flips
	    <span class="sym">}</span>

	    <span class="kwa">if</span> <span class="sym">{</span><span class="kwb">$flipsMax</span> <span class="sym">&lt;</span> <span class="kwb">$flips</span><span class="sym">} {</span>
		<span class="kwa">set</span> flipsMax <span class="kwb">$flips</span>
	    <span class="sym">}</span>
	<span class="sym">}</span>

	<span class="kwa">while</span> <span class="num">1</span> <span class="sym">{</span>
	    <span class="kwa">if</span> <span class="sym">{</span><span class="kwb">$r</span> <span class="sym">==</span> <span class="kwb">$n</span><span class="sym">} {</span>
		<span class="kwa">return</span> <span class="kwb">$flipsMax</span>
	    <span class="sym">}</span>
	    <span class="sym">;</span><span class="slc"># rotate down perm[0..r] by one</span>
	    <span class="kwa">set</span> perm0 <span class="kwb">$perm1</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
	    <span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> i <span class="num">0</span><span class="sym">} {</span><span class="kwb">$i</span> <span class="sym">&lt;</span> <span class="kwb">$r</span><span class="sym">} {} {</span>
		<span class="kwa">set</span> perm1<span class="sym">(</span><span class="kwb">$i</span><span class="sym">)</span> <span class="kwb">$perm1</span><span class="sym">([</span><span class="kwa">incr</span> i<span class="sym">])	;</span><span class="slc"># tricky: increment embedded</span>
	    <span class="sym">}</span>
	    <span class="kwa">set</span> perm1<span class="sym">(</span><span class="kwb">$r</span><span class="sym">)</span> <span class="kwb">$perm0</span>
	    <span class="kwa">if</span> <span class="sym">{[</span><span class="kwa">incr</span> count<span class="sym">(</span><span class="kwb">$r</span><span class="sym">) -</span><span class="num">1</span><span class="sym">] &gt;</span> <span class="num">0</span><span class="sym">} {</span>
		<span class="kwa">break</span>
	    <span class="sym">}</span>
	    <span class="kwa">incr</span> r
	<span class="sym">}</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">proc</span> main <span class="sym">{</span>argv<span class="sym">} {</span>
    <span class="kwa">set</span> n <span class="num">0</span>
    <span class="kwa">if</span> <span class="sym">{[</span><span class="kwa">llength</span> <span class="kwb">$argv</span><span class="sym">]} {</span>
	<span class="kwa">set</span> n <span class="sym">[</span><span class="kwa">lindex</span> <span class="kwb">$argv</span> <span class="num">0</span><span class="sym">]</span>
    <span class="sym">}</span>
    <span class="kwa">puts</span> <span class="str">&quot;Pfannkuchen($n) = [fannkuch $n]&quot;</span>
    <span class="kwa">return</span> <span class="num">0</span>
<span class="sym">}</span>

main <span class="kwb">$argv</span>
