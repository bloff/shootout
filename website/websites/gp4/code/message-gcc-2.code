<span class="com">/* The Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> * contributed contributed by Colin Gibbs</span>
<span class="com"> */</span>

<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>
<span class="dir">#include &lt;ucontext.h&gt;</span>

<span class="dir">#define STACK_SIZE 1024</span>

<span class="kwb">struct</span> thread_context <span class="sym">{</span>
   <span class="kwb">struct</span> thread_context <span class="sym">*</span>next<span class="sym">;</span>
   ucontext_t ctx<span class="sym">;</span>
   <span class="kwb">int</span> value<span class="sym">;</span>
   <span class="kwb">char</span> stack<span class="sym">[</span>STACK_SIZE<span class="sym">];</span>
<span class="sym">};</span>

<span class="kwb">static void</span> <span class="kwd">thread</span><span class="sym">(</span><span class="kwb">struct</span> thread_context <span class="sym">*</span>c<span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwa">while</span> <span class="sym">(</span><span class="num">1</span><span class="sym">) {</span>
      c<span class="sym">-&gt;</span>next<span class="sym">-&gt;</span>value <span class="sym">=</span> c<span class="sym">-&gt;</span>value <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
      <span class="kwd">swapcontext</span><span class="sym">(&amp;</span>c<span class="sym">-&gt;</span>ctx<span class="sym">, &amp;</span>c<span class="sym">-&gt;</span>next<span class="sym">-&gt;</span>ctx<span class="sym">);</span>
   <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwb">static void</span> <span class="kwd">create_threads</span><span class="sym">(</span><span class="kwb">struct</span> thread_context <span class="sym">**</span>head<span class="sym">,</span> <span class="kwb">struct</span> thread_context <span class="sym">**</span>tail<span class="sym">,</span> <span class="kwb">int</span> n<span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwb">struct</span> thread_context <span class="sym">*</span>c<span class="sym">;</span>
   <span class="kwc">typedef</span> <span class="kwb">void</span> <span class="sym">(*</span>thread_t<span class="sym">)(</span><span class="kwb">void</span><span class="sym">);</span>

   c <span class="sym">=</span> <span class="kwd">malloc</span><span class="sym">(</span><span class="kwa">sizeof</span><span class="sym">(*</span>c<span class="sym">));</span>
   <span class="sym">*</span>head <span class="sym">=</span> c<span class="sym">;</span>

   <span class="kwd">getcontext</span><span class="sym">(&amp;</span>c<span class="sym">-&gt;</span>ctx<span class="sym">);</span>
   c<span class="sym">-&gt;</span>ctx<span class="sym">.</span>uc_stack<span class="sym">.</span>ss_sp <span class="sym">=</span> c<span class="sym">-&gt;</span>stack<span class="sym">;</span>
   c<span class="sym">-&gt;</span>ctx<span class="sym">.</span>uc_stack<span class="sym">.</span>ss_size <span class="sym">=</span> <span class="kwa">sizeof</span><span class="sym">(</span>c<span class="sym">-&gt;</span>stack<span class="sym">);</span>
   <span class="kwd">makecontext</span><span class="sym">(&amp;</span>c<span class="sym">-&gt;</span>ctx<span class="sym">, (</span>thread_t<span class="sym">)</span>thread<span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> c<span class="sym">);</span>

   <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">) {</span>
      <span class="kwd">create_threads</span><span class="sym">(&amp;</span>c<span class="sym">-&gt;</span>next<span class="sym">,</span> tail<span class="sym">,</span> n <span class="sym">-</span> <span class="num">1</span><span class="sym">);</span>
   <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
      c<span class="sym">-&gt;</span>next <span class="sym">=</span> NULL<span class="sym">;</span>
      <span class="sym">*</span>tail <span class="sym">=</span> c<span class="sym">;</span>
   <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwb">static int</span> <span class="kwd">call_threads</span><span class="sym">(</span><span class="kwb">struct</span> thread_context <span class="sym">*</span>head<span class="sym">,</span> <span class="kwb">struct</span> thread_context <span class="sym">*</span>tail<span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwb">struct</span> thread_context here<span class="sym">;</span>
   tail<span class="sym">-&gt;</span>next <span class="sym">= &amp;</span>here<span class="sym">;</span>
   head<span class="sym">-&gt;</span>value <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="kwd">swapcontext</span><span class="sym">(&amp;</span>here<span class="sym">.</span>ctx<span class="sym">, &amp;</span>head<span class="sym">-&gt;</span>ctx<span class="sym">);</span>
   <span class="kwa">return</span> here<span class="sym">.</span>value<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">**</span>argv<span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwb">int</span> n<span class="sym">,</span> i<span class="sym">,</span> count<span class="sym">;</span>
   <span class="kwb">struct</span> thread_context <span class="sym">*</span>head<span class="sym">, *</span>tail<span class="sym">;</span>

   n <span class="sym">=</span> <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span>
   <span class="kwd">create_threads</span><span class="sym">(&amp;</span>head<span class="sym">, &amp;</span>tail<span class="sym">,</span> <span class="num">500</span><span class="sym">);</span>

   count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++)</span>
      count <span class="sym">+=</span> <span class="kwd">call_threads</span><span class="sym">(</span>head<span class="sym">,</span> tail<span class="sym">);</span>

   <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> count<span class="sym">);</span>

   <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>
