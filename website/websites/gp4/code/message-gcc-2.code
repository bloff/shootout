<span class="com">/* The Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> * contributed by anon</span>
<span class="com"> * modified by - Yakov Kravets</span>
<span class="com"> * compile with -Os -lpthread</span>
<span class="com"> */</span>

<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>
<span class="dir">#include &lt;unistd.h&gt;</span>
<span class="dir">#include &lt;assert.h&gt;</span>
<span class="dir">#include &lt;pthread.h&gt;</span>    <span class="slc">// -lpthread</span>
<span class="dir"></span>
<span class="dir">#define THREADS 500</span>

<span class="dir">#define STACKSZ (100*1024)</span> <span class="slc">// 100K</span>
<span class="dir"></span><span class="dir">#define SWL_SLEEP (1000000/1000)</span>

<span class="kwb">struct</span> work_data <span class="sym">{</span>
        pthread_t thread<span class="sym">;</span>
        pthread_mutex_t mutex<span class="sym">;</span>
        pthread_cond_t condition<span class="sym">;</span>
        <span class="kwb">int</span> message<span class="sym">;</span>
        <span class="kwb">struct</span> work_data <span class="sym">*</span>next<span class="sym">;</span>
<span class="sym">};</span>

<span class="kwb">void</span> <span class="sym">*</span>
<span class="kwd">work</span><span class="sym">(</span><span class="kwb">void</span> <span class="sym">*</span>ptr<span class="sym">)</span>
<span class="sym">{</span>
        <span class="kwb">struct</span> work_data <span class="sym">*</span><span class="kwa">this</span> <span class="sym">= (</span><span class="kwb">struct</span> work_data <span class="sym">*)</span>ptr<span class="sym">;</span>
        <span class="kwb">struct</span> work_data <span class="sym">*</span>next <span class="sym">=</span> <span class="kwa">this</span><span class="sym">-&gt;</span>next<span class="sym">;</span>
        <span class="kwa">if</span> <span class="sym">(</span><span class="kwa">this</span> <span class="sym">==</span> NULL <span class="sym">||</span> next <span class="sym">==</span> NULL<span class="sym">)</span>
                <span class="kwa">return</span> NULL<span class="sym">;</span>

        <span class="kwa">for</span> <span class="sym">(;;) {</span>
                <span class="kwd">pthread_mutex_lock</span><span class="sym">(&amp;(</span><span class="kwa">this</span><span class="sym">-&gt;</span>mutex<span class="sym">));</span>
                <span class="com">/* Wait for a signal from the links thread */</span>
                <span class="kwd">pthread_cond_wait</span><span class="sym">(&amp;(</span><span class="kwa">this</span><span class="sym">-&gt;</span>condition<span class="sym">),&amp;(</span><span class="kwa">this</span><span class="sym">-&gt;</span>mutex<span class="sym">));</span>

                <span class="com">/* Receive and Pass the message */</span>
                <span class="kwd">pthread_mutex_lock</span><span class="sym">(&amp;(</span>next<span class="sym">-&gt;</span>mutex<span class="sym">));</span>
                next<span class="sym">-&gt;</span>message <span class="sym">=</span> <span class="kwa">this</span><span class="sym">-&gt;</span>message <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
                <span class="kwd">pthread_mutex_unlock</span><span class="sym">(&amp;(</span>next<span class="sym">-&gt;</span>mutex<span class="sym">));</span>

                <span class="com">/* Signal linked thread */</span>
                <span class="kwd">pthread_cond_signal</span><span class="sym">(&amp;(</span>next<span class="sym">-&gt;</span>condition<span class="sym">));</span>

                <span class="kwd">pthread_mutex_unlock</span><span class="sym">(&amp;(</span><span class="kwa">this</span><span class="sym">-&gt;</span>mutex<span class="sym">));</span>
        <span class="sym">}</span>
        <span class="kwa">return</span> NULL<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">int</span>
<span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[])</span>
<span class="sym">{</span>
        <span class="kwb">struct</span> work_data <span class="sym">*</span>wdata<span class="sym">;</span>
        <span class="kwb">unsigned int</span> times<span class="sym">;</span>

        <span class="kwd">assert</span><span class="sym">(</span>argc <span class="sym">==</span> <span class="num">2</span> <span class="sym">&amp;&amp;</span> <span class="kwd">sscanf</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">],</span> <span class="str">&quot;%u&quot;</span><span class="sym">, &amp;</span>times<span class="sym">) ==</span> <span class="num">1</span><span class="sym">);</span>

        <span class="kwb">int</span> sum <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
        pthread_attr_t attr<span class="sym">;</span>
        <span class="kwb">int</span> i<span class="sym">,</span> j<span class="sym">;</span>

        wdata <span class="sym">=</span> <span class="kwd">malloc</span><span class="sym">(</span><span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">struct</span> work_data<span class="sym">) *</span> THREADS<span class="sym">);</span>
        <span class="kwd">assert</span><span class="sym">(</span>wdata <span class="sym">!=</span> NULL<span class="sym">);</span>
        <span class="kwd">assert</span><span class="sym">(</span><span class="kwd">pthread_attr_init</span><span class="sym">(&amp;</span>attr<span class="sym">) ==</span> <span class="num">0</span><span class="sym">);</span>
        <span class="kwd">assert</span><span class="sym">(</span><span class="kwd">pthread_attr_setstacksize</span><span class="sym">(&amp;</span>attr<span class="sym">,</span> STACKSZ<span class="sym">) ==</span> <span class="num">0</span><span class="sym">);</span>

        <span class="com">/* Initialize threads data */</span>
        <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> THREADS<span class="sym">;</span> i<span class="sym">++) {</span>
                <span class="kwd">pthread_mutex_init</span><span class="sym">(&amp;</span>wdata<span class="sym">[</span>i<span class="sym">].</span>mutex<span class="sym">,</span> NULL<span class="sym">);</span>
                <span class="kwd">pthread_cond_init</span><span class="sym">(&amp;</span>wdata<span class="sym">[</span>i<span class="sym">].</span>condition<span class="sym">,</span> NULL<span class="sym">);</span>
                wdata<span class="sym">[</span>i<span class="sym">].</span>message <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
                wdata<span class="sym">[</span>i<span class="sym">].</span>next <span class="sym">= &amp;</span>wdata<span class="sym">[</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">];</span>
                <span class="kwd">pthread_create</span><span class="sym">(&amp;</span>wdata<span class="sym">[</span>i<span class="sym">].</span>thread<span class="sym">, &amp;</span>attr<span class="sym">,</span> work<span class="sym">, &amp;</span>wdata<span class="sym">[</span>i<span class="sym">]);</span>
        <span class="sym">}</span>
        <span class="com">/* Initialize main thread */</span>
        <span class="kwd">pthread_mutex_init</span><span class="sym">(&amp;</span>wdata<span class="sym">[</span>THREADS<span class="sym">].</span>mutex<span class="sym">,</span> NULL<span class="sym">);</span>
        <span class="kwd">pthread_cond_init</span><span class="sym">(&amp;</span>wdata<span class="sym">[</span>THREADS<span class="sym">].</span>condition<span class="sym">,</span> NULL<span class="sym">);</span>
        wdata<span class="sym">[</span>THREADS<span class="sym">].</span>message <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

        <span class="kwa">for</span> <span class="sym">(</span>j <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> j <span class="sym">&lt;</span> times<span class="sym">;</span> j<span class="sym">++) {</span>
                <span class="com">/* Pass the message */</span>
                <span class="kwd">pthread_mutex_lock</span><span class="sym">(&amp;</span>wdata<span class="sym">[</span><span class="num">0</span><span class="sym">].</span>mutex<span class="sym">);</span>
                wdata<span class="sym">[</span><span class="num">0</span><span class="sym">].</span>message <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
                <span class="kwd">pthread_mutex_unlock</span><span class="sym">(&amp;</span>wdata<span class="sym">[</span><span class="num">0</span><span class="sym">].</span>mutex<span class="sym">);</span>

                <span class="com">/* Signal first thread */</span>
                <span class="kwd">pthread_cond_signal</span><span class="sym">(&amp;</span>wdata<span class="sym">[</span><span class="num">0</span><span class="sym">].</span>condition<span class="sym">);</span>

                <span class="com">/* Wait for a signal from the last thread */</span>
                <span class="kwd">pthread_mutex_lock</span><span class="sym">(&amp;</span>wdata<span class="sym">[</span>THREADS<span class="sym">].</span>mutex<span class="sym">);</span>
                <span class="kwd">pthread_cond_wait</span><span class="sym">(&amp;</span>wdata<span class="sym">[</span>THREADS<span class="sym">].</span>condition<span class="sym">,&amp;</span>wdata<span class="sym">[</span>THREADS<span class="sym">].</span>mutex<span class="sym">);</span>
                <span class="com">/* Read the message */</span>
                sum <span class="sym">+=</span> wdata<span class="sym">[</span>THREADS<span class="sym">].</span>message<span class="sym">;</span>
                <span class="kwd">pthread_mutex_unlock</span><span class="sym">(&amp;</span>wdata<span class="sym">[</span>THREADS<span class="sym">].</span>mutex<span class="sym">);</span>
        <span class="sym">}</span>
        <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> sum<span class="sym">);</span>

        <span class="kwd">exit</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
<span class="sym">}</span>
