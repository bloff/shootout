<span class="com">/* The Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> * contributed contributed by Colin Gibbs</span>
<span class="com"> * /</span>
<span class="com"></span>
<span class="com">#include &lt;stdio.h&gt;</span>
<span class="com">#include &lt;stdlib.h&gt;</span>
<span class="com">#include &lt;ucontext.h&gt;</span>
<span class="com"></span>
<span class="com">#define STACK_SIZE 1024</span>
<span class="com"></span>
<span class="com">struct thread_context {</span>
<span class="com">   struct thread_context *next;</span>
<span class="com">   ucontext_t ctx;</span>
<span class="com">   int value;</span>
<span class="com">   char stack[STACK_SIZE];</span>
<span class="com">};</span>
<span class="com"></span>
<span class="com">static void thread(struct thread_context *c)</span>
<span class="com">{</span>
<span class="com">   while (1) {</span>
<span class="com">      c-&gt;next-&gt;value = c-&gt;value + 1;</span>
<span class="com">      swapcontext(&amp;c-&gt;ctx, &amp;c-&gt;next-&gt;ctx);</span>
<span class="com">   }</span>
<span class="com">}</span>
<span class="com"></span>
<span class="com">static void create_threads(struct thread_context **head, struct thread_context **tail, int n)</span>
<span class="com">{</span>
<span class="com">   struct thread_context *c;</span>
<span class="com">   typedef void (*thread_t)(void);</span>
<span class="com"></span>
<span class="com">   c = malloc(sizeof(*c));</span>
<span class="com">   *head = c;</span>
<span class="com"></span>
<span class="com">   getcontext(&amp;c-&gt;ctx);</span>
<span class="com">   c-&gt;ctx.uc_stack.ss_sp = c-&gt;stack;</span>
<span class="com">   c-&gt;ctx.uc_stack.ss_size = sizeof(c-&gt;stack);</span>
<span class="com">   makecontext(&amp;c-&gt;ctx, (thread_t)thread, 1, c);</span>
<span class="com"></span>
<span class="com">   if (n &gt; 1) {</span>
<span class="com">      create_threads(&amp;c-&gt;next, tail, n - 1);</span>
<span class="com">   } else {</span>
<span class="com">      c-&gt;next = NULL;</span>
<span class="com">      *tail = c;</span>
<span class="com">   }</span>
<span class="com">}</span>
<span class="com"></span>
<span class="com">static int call_threads(struct thread_context *head, struct thread_context *tail)</span>
<span class="com">{</span>
<span class="com">   struct thread_context here;</span>
<span class="com">   tail-&gt;next = &amp;here;</span>
<span class="com">   head-&gt;value = 0;</span>
<span class="com">   swapcontext(&amp;here.ctx, &amp;head-&gt;ctx);</span>
<span class="com">   return here.value;</span>
<span class="com">}</span>
<span class="com"></span>
<span class="com">int main(int argc, char **argv)</span>
<span class="com">{</span>
<span class="com">   int n, i, count;</span>
<span class="com">   struct thread_context *head, *tail;</span>
<span class="com"></span>
<span class="com">   n = atoi(argv[1]);</span>
<span class="com">   create_threads(&amp;head, &amp;tail, 500);</span>
<span class="com"></span>
<span class="com">   count = 0;</span>
<span class="com">   for (i = 0; i &lt; n; i++)</span>
<span class="com">      count += call_threads(head, tail);</span>
<span class="com"></span>
<span class="com">   printf(&quot;%d\n&quot;, count);</span>
<span class="com"></span>
<span class="com">   return 0;</span>
<span class="com">}</span>
