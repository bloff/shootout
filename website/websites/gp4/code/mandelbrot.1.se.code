<span class="hl slc">--</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Mandelbrot for SE by jos√©</span>
<span class="hl slc">--</span>

<span class="hl kwa">class</span> MANDELBROT

insert ARGUMENTS

creation make <span class="hl kwa">feature</span>

   make <span class="hl kwa">is local</span>
      size<span class="hl sym">,</span> i<span class="hl sym">,</span> iter<span class="hl sym">,</span> x<span class="hl sym">,</span> y<span class="hl sym">:</span> <span class="hl kwb">INTEGER</span>
      zr<span class="hl sym">,</span> zi<span class="hl sym">,</span> cr<span class="hl sym">,</span> ci<span class="hl sym">,</span> pr<span class="hl sym">,</span> pi<span class="hl sym">,</span> limit<span class="hl sym">:</span> <span class="hl kwb">DOUBLE</span>
      stop<span class="hl sym">,</span> gone<span class="hl sym">:</span> <span class="hl kwb">BOOLEAN</span>
      bit<span class="hl sym">,</span> bit_accu<span class="hl sym">:</span> INTEGER_8
   <span class="hl kwa">do</span>
      <span class="hl kwa">check</span> argument_count <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl kwa">end</span>
      <span class="hl kwa">check</span> <span class="hl kwd">argument</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>.is_integer <span class="hl kwa">end</span>
      size <span class="hl sym">:=</span> <span class="hl kwd">argument</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>.to_integer
      <span class="hl kwa">check</span> size <span class="hl sym">&gt;</span> <span class="hl num">1</span> <span class="hl kwa">end</span>

      <span class="hl slc">-- write header</span>
      std_output.<span class="hl kwd">put_string</span><span class="hl sym">(</span><span class="hl str">&quot;P4%N&quot;</span><span class="hl sym">)</span>
      std_output.<span class="hl kwd">put_string</span><span class="hl sym">(</span><span class="hl kwd">argument</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">))</span>
      std_output.<span class="hl kwd">put_character</span><span class="hl sym">(</span><span class="hl str">' '</span><span class="hl sym">)</span>
      std_output.<span class="hl kwd">put_string</span><span class="hl sym">(</span><span class="hl kwd">argument</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">))</span>
      std_output.<span class="hl kwd">put_character</span><span class="hl sym">(</span><span class="hl str">'%N'</span><span class="hl sym">)</span>

      <span class="hl slc">-- compute mandelbrot's bitmap</span>
      limit <span class="hl sym">:=</span> <span class="hl num">4.0</span>
      iter <span class="hl sym">:=</span> <span class="hl num">50</span>
      bit <span class="hl sym">:=</span> <span class="hl num">0x80</span>
      <span class="hl kwa">from</span> y<span class="hl sym">:=</span><span class="hl num">0</span> until y<span class="hl sym">=</span>size <span class="hl kwa">loop</span>
         ci <span class="hl sym">:=</span> <span class="hl num">2.0</span> <span class="hl sym">*</span> y <span class="hl sym">/</span> size <span class="hl sym">-</span> <span class="hl num">1.0</span>

         <span class="hl kwa">from</span> x<span class="hl sym">:=</span><span class="hl num">0</span> until x<span class="hl sym">=</span>size <span class="hl kwa">loop</span>
            cr <span class="hl sym">:=</span> <span class="hl num">2.0</span> <span class="hl sym">*</span> x <span class="hl sym">/</span> size <span class="hl sym">-</span> <span class="hl num">1.5</span>

            zr<span class="hl sym">:=</span><span class="hl num">0</span> zi<span class="hl sym">:=</span><span class="hl num">0</span> pr<span class="hl sym">:=</span><span class="hl num">0</span> pi<span class="hl sym">:=</span><span class="hl num">0</span>
            <span class="hl kwa">from</span> i<span class="hl sym">:=</span><span class="hl num">0</span> stop<span class="hl sym">:=</span><span class="hl kwa">False</span> until stop <span class="hl kwa">loop</span>
               zi <span class="hl sym">:=</span> <span class="hl num">2.0</span> <span class="hl sym">*</span> zr <span class="hl sym">*</span> zi <span class="hl sym">+</span> ci
               zr <span class="hl sym">:=</span> pr <span class="hl sym">-</span> pi <span class="hl sym">+</span> cr
               pi <span class="hl sym">:=</span> zi <span class="hl sym">*</span> zi
               pr <span class="hl sym">:=</span> zr <span class="hl sym">*</span> zr
               <span class="hl kwa">if</span> pi<span class="hl sym">+</span>pr<span class="hl sym">&gt;</span>limit <span class="hl kwa">then</span>
                  stop <span class="hl sym">:=</span> <span class="hl kwa">True</span>
                  gone <span class="hl sym">:=</span> <span class="hl kwa">True</span>
               <span class="hl kwa">else</span>
                  i <span class="hl sym">:=</span> i<span class="hl sym">+</span><span class="hl num">1</span>
                  stop <span class="hl sym">:=</span> i <span class="hl sym">=</span> iter
               <span class="hl kwa">end</span>
            <span class="hl kwa">end</span>

            <span class="hl kwa">if</span> gone <span class="hl kwa">then</span>
               gone <span class="hl sym">:=</span> <span class="hl kwa">False</span>
            <span class="hl kwa">else</span>
               bit_accu <span class="hl sym">:=</span> bit_accu <span class="hl sym">|</span> bit
            <span class="hl kwa">end</span>

            <span class="hl kwa">if</span> bit <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl kwa">then</span>
               std_output.<span class="hl kwd">put_character</span><span class="hl sym">(</span>bit_accu.to_character<span class="hl sym">)</span>
               bit_accu <span class="hl sym">:=</span> <span class="hl num">0</span>
               bit <span class="hl sym">:=</span> <span class="hl num">0x80</span>
            <span class="hl kwa">else</span>
               bit <span class="hl sym">:=</span> bit <span class="hl sym">|&gt;&gt;&gt;</span> <span class="hl num">1</span>
            <span class="hl kwa">end</span>
            x <span class="hl sym">:=</span> x<span class="hl sym">+</span><span class="hl num">1</span>
         <span class="hl kwa">end</span>

         <span class="hl kwa">if</span> bit <span class="hl sym">/=</span> <span class="hl num">0x80</span> <span class="hl kwa">then</span>
            std_output.<span class="hl kwd">put_character</span><span class="hl sym">(</span>bit_accu.to_character<span class="hl sym">)</span>
            bit_accu <span class="hl sym">:=</span> <span class="hl num">0</span>
            bit <span class="hl sym">:=</span> <span class="hl num">0x80</span>
         <span class="hl kwa">end</span>

         y <span class="hl sym">:=</span> y<span class="hl sym">+</span><span class="hl num">1</span>
      <span class="hl kwa">end</span>
   <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

