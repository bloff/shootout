<span class="slc">'The Computer Language Shootout</span>
<span class="slc">'http://shootout.alioth.debian.org/</span>
<span class="slc">'contributed by Antoni Gual</span>

#include <span class="str">&quot;crt.bi&quot;</span>
option explicit
option escape
<span class="kwa">dim</span> shared p <span class="kwa">as</span> uinteger ptr
<span class="slc">'</span>
<span class="slc">'----------------------------------------------</span>
<span class="kwa">function</span> dosieve<span class="sym">(</span>m <span class="kwa">as</span> uinteger<span class="sym">)</span>
<span class="kwa">dim as</span> uinteger i<span class="sym">,</span>nn<span class="sym">,</span>ni
<span class="kwa">dim</span> cnt
cnt<span class="sym">=</span><span class="num">0</span>
i<span class="sym">=</span><span class="num">2</span>
<span class="kwa">while</span> i<span class="sym">&lt;=</span> m
  <span class="kwa">if</span> <span class="sym">(</span>p<span class="sym">[</span>i\<span class="num">32</span><span class="sym">]</span> <span class="kwa">and</span> <span class="sym">(</span><span class="num">1</span> shl<span class="sym">(</span>i <span class="kwa">and</span> <span class="num">31</span><span class="sym">)))=</span><span class="num">0</span> <span class="kwa">then</span>
   cnt<span class="sym">+=</span><span class="num">1</span>
   nn<span class="sym">=</span>i<span class="sym">+</span>i<span class="sym">:</span>ni<span class="sym">=</span>i
   <span class="kwa">while</span> nn<span class="sym">&lt;=</span>m
    p<span class="sym">[</span>nn\<span class="num">32</span><span class="sym">]</span> <span class="kwa">or</span><span class="sym">= (</span><span class="num">1</span> shl<span class="sym">(</span>nn <span class="kwa">and</span> <span class="num">31</span><span class="sym">))</span>
    nn<span class="sym">+=</span>ni
   wend
  <span class="kwa">end if</span>
 i<span class="sym">+=</span><span class="num">1</span>
wend
return cnt
<span class="kwa">end function</span>
<span class="slc">'</span>
<span class="slc">'------------------------------------------------</span>
<span class="kwa">dim</span> m1<span class="sym">,</span>n
<span class="kwa">dim as</span> uinteger m
<span class="kwa">if</span> len<span class="sym">(</span>command<span class="sym">)=</span><span class="num">0</span> <span class="kwa">then</span> print <span class="str">&quot;use: N-Sieve exponent&quot;</span><span class="sym">:</span><span class="kwa">end</span>
n<span class="sym">=</span>val<span class="sym">(</span>command<span class="sym">)</span>
m<span class="sym">=(</span><span class="num">1</span> shl n<span class="sym">)*</span><span class="num">10000</span>
m1<span class="sym">=(</span>m\<span class="num">32</span><span class="sym">+</span><span class="num">1</span><span class="sym">) *</span>sizeof<span class="sym">(</span>uinteger<span class="sym">)</span>
p <span class="sym">=</span>callocate<span class="sym">(</span>m1<span class="sym">)</span>
printf<span class="sym">(</span><span class="str">&quot;Primes up to %8d %8d\n&quot;</span><span class="sym">,</span> m<span class="sym">,</span> dosieve<span class="sym">(</span>m<span class="sym">))</span>
printf<span class="sym">(</span><span class="str">&quot;Primes up to %8d %8d\n&quot;</span><span class="sym">,</span> m\<span class="num">2</span><span class="sym">,</span> dosieve<span class="sym">(</span>m\<span class="num">2</span><span class="sym">))</span>
printf<span class="sym">(</span><span class="str">&quot;Primes up to %8d %8d\n&quot;</span><span class="sym">,</span> m\<span class="num">4</span><span class="sym">,</span> dosieve<span class="sym">(</span>m\<span class="num">4</span><span class="sym">))</span>
deallocate p
<span class="kwa">end</span>
