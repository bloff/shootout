<span class="com">/* The Computer Language Shootout</span>
<span class="com"> http://shootout.alioth.debian.org/</span>
<span class="com"> originally by: Christoph Bauer &amp; David McCombs</span>
<span class="com"> smaller code: Greg Buchholz                    */</span>

<span class="dir">#include &lt;iostream&gt;</span>
<span class="dir">#include &lt;iomanip&gt;</span>
<span class="dir">#include &lt;numeric&gt;</span>
<span class="dir">#include &lt;valarray&gt;</span>
<span class="dir">#include &lt;vector&gt;</span>

<span class="dir">#define solar_mass (4 * M_PI * M_PI)</span>
<span class="dir">#define days_per_year 365.24</span>
<span class="dir">#define NBODIES 5</span>
<span class="dir">#define DIM 3</span>

<span class="kwa">using namespace</span> std<span class="sym">;</span>
<span class="kwc">typedef</span> valarray<span class="sym">&lt;</span><span class="kwb">double</span><span class="sym">&gt;</span> V<span class="sym">;</span>

<span class="kwc">template</span> <span class="sym">&lt;</span><span class="kwc">class</span> T<span class="sym">&gt;</span> T <span class="kwd">mag</span><span class="sym">(</span><span class="kwb">const</span> valarray<span class="sym">&lt;</span>T<span class="sym">&gt;&amp;</span> v<span class="sym">){</span> <span class="kwa">return</span> <span class="kwd">sqrt</span><span class="sym">((</span>v<span class="sym">*</span>v<span class="sym">).</span><span class="kwd">sum</span><span class="sym">()); }</span>

<span class="kwc">class</span> Planet <span class="sym">{</span>
 <span class="kwc">public</span><span class="sym">:</span> <span class="kwb">double</span> mass<span class="sym">;</span> V pos<span class="sym">;</span> V vel<span class="sym">;</span>
         <span class="kwd">Planet</span> <span class="sym">() :</span> <span class="kwd">pos</span><span class="sym">(</span>DIM<span class="sym">),</span> <span class="kwd">vel</span><span class="sym">(</span>DIM<span class="sym">) {};</span>
         <span class="kwd">Planet</span> <span class="sym">(</span><span class="kwb">double</span> m<span class="sym">,</span> <span class="kwb">double</span>  x<span class="sym">,</span> <span class="kwb">double</span>  y<span class="sym">,</span> <span class="kwb">double</span>  z<span class="sym">,</span>
                           <span class="kwb">double</span> vx<span class="sym">,</span> <span class="kwb">double</span> vy<span class="sym">,</span> <span class="kwb">double</span> vz<span class="sym">) :</span> <span class="kwd">pos</span><span class="sym">(</span>DIM<span class="sym">),</span><span class="kwd">vel</span><span class="sym">(</span>DIM<span class="sym">)</span>
         <span class="sym">{</span>
            mass <span class="sym">=</span> m<span class="sym">;</span> pos<span class="sym">[</span><span class="num">0</span><span class="sym">] =</span>  x<span class="sym">;</span> pos<span class="sym">[</span><span class="num">1</span><span class="sym">] =</span>  y<span class="sym">;</span> pos<span class="sym">[</span><span class="num">2</span><span class="sym">] =</span>  z<span class="sym">;</span>
                      vel<span class="sym">[</span><span class="num">0</span><span class="sym">] =</span> vx<span class="sym">;</span> vel<span class="sym">[</span><span class="num">1</span><span class="sym">] =</span> vy<span class="sym">;</span> vel<span class="sym">[</span><span class="num">2</span><span class="sym">] =</span> vz<span class="sym">;</span>
         <span class="sym">}</span>
<span class="sym">};</span>

V <span class="kwd">momentum</span><span class="sym">(</span>V<span class="sym">&amp;</span> m<span class="sym">,</span> <span class="kwb">const</span> Planet<span class="sym">&amp;</span> p<span class="sym">){</span> <span class="kwa">return</span> m <span class="sym">+</span> p<span class="sym">.</span>mass <span class="sym">*</span> p<span class="sym">.</span>vel<span class="sym">; }</span>

<span class="kwb">void</span> <span class="kwd">offset_momentum</span><span class="sym">(</span>vector<span class="sym">&lt;</span>Planet<span class="sym">&gt;&amp;</span> b<span class="sym">)</span>
<span class="sym">{</span>
    V <span class="kwd">z</span><span class="sym">(</span><span class="num">0.0</span><span class="sym">,</span>DIM<span class="sym">);</span>
    b<span class="sym">[</span><span class="num">0</span><span class="sym">].</span>vel <span class="sym">= (-</span><span class="num">1</span><span class="sym">/</span>solar_mass<span class="sym">) *</span> <span class="kwd">accumulate</span><span class="sym">(</span>b<span class="sym">.</span><span class="kwd">begin</span><span class="sym">()+</span><span class="num">1</span><span class="sym">,</span>b<span class="sym">.</span><span class="kwd">end</span><span class="sym">(),</span> z<span class="sym">,</span> momentum<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">double</span> <span class="kwd">mv_sqrd</span><span class="sym">(</span><span class="kwb">double</span> acc<span class="sym">,</span> <span class="kwb">const</span> Planet<span class="sym">&amp;</span> p<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">return</span> acc <span class="sym">+</span> p<span class="sym">.</span>mass <span class="sym">* (</span>p<span class="sym">.</span>vel <span class="sym">*</span> p<span class="sym">.</span>vel<span class="sym">).</span><span class="kwd">sum</span><span class="sym">();</span>
<span class="sym">}</span>

<span class="kwb">double</span> <span class="kwd">energy</span><span class="sym">(</span><span class="kwb">const</span> vector<span class="sym">&lt;</span>Planet<span class="sym">&gt;&amp;</span> b<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwb">double</span> kinetic<span class="sym">,</span> potential <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

    kinetic <span class="sym">=</span> <span class="num">0.5</span> <span class="sym">*</span> <span class="kwd">accumulate</span><span class="sym">(</span>b<span class="sym">.</span><span class="kwd">begin</span><span class="sym">(),</span>b<span class="sym">.</span><span class="kwd">end</span><span class="sym">(),</span> <span class="num">0.0</span><span class="sym">,</span> mv_sqrd<span class="sym">);</span>

    <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>NBODIES<span class="sym">;</span> i<span class="sym">++)</span>
        <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> j<span class="sym">=</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">;</span> j<span class="sym">&lt;</span>NBODIES<span class="sym">;</span> j<span class="sym">++)</span>
            potential <span class="sym">+=</span> b<span class="sym">[</span>i<span class="sym">].</span>mass <span class="sym">*</span> b<span class="sym">[</span>j<span class="sym">].</span>mass <span class="sym">/</span> <span class="kwd">mag</span><span class="sym">((</span>V<span class="sym">)(</span>b<span class="sym">[</span>i<span class="sym">].</span>pos <span class="sym">-</span> b<span class="sym">[</span>j<span class="sym">].</span>pos<span class="sym">));</span>

    <span class="kwa">return</span> kinetic <span class="sym">-</span> potential<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">advance</span><span class="sym">(</span>vector<span class="sym">&lt;</span>Planet<span class="sym">&gt;&amp;</span> b<span class="sym">,</span> <span class="kwb">double</span> dt<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>NBODIES<span class="sym">;</span> i<span class="sym">++)</span>
    <span class="sym">{</span>
        <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> j<span class="sym">=</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">;</span> j<span class="sym">&lt;</span>NBODIES<span class="sym">;</span> j<span class="sym">++)</span>
        <span class="sym">{</span>
            <span class="kwb">double</span> dx <span class="sym">=</span> b<span class="sym">[</span>i<span class="sym">].</span>pos<span class="sym">[</span><span class="num">0</span><span class="sym">] -</span> b<span class="sym">[</span>j<span class="sym">].</span>pos<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
            <span class="kwb">double</span> dy <span class="sym">=</span> b<span class="sym">[</span>i<span class="sym">].</span>pos<span class="sym">[</span><span class="num">1</span><span class="sym">] -</span> b<span class="sym">[</span>j<span class="sym">].</span>pos<span class="sym">[</span><span class="num">1</span><span class="sym">];</span>
            <span class="kwb">double</span> dz <span class="sym">=</span> b<span class="sym">[</span>i<span class="sym">].</span>pos<span class="sym">[</span><span class="num">2</span><span class="sym">] -</span> b<span class="sym">[</span>j<span class="sym">].</span>pos<span class="sym">[</span><span class="num">2</span><span class="sym">];</span>
            <span class="kwb">double</span> dist <span class="sym">=</span> <span class="kwd">sqrt</span><span class="sym">(</span>dx<span class="sym">*</span>dx <span class="sym">+</span> dy<span class="sym">*</span>dy <span class="sym">+</span> dz<span class="sym">*</span>dz<span class="sym">);</span>
            <span class="kwb">double</span> mag  <span class="sym">=</span> dt <span class="sym">/ (</span>dist <span class="sym">*</span> dist <span class="sym">*</span> dist<span class="sym">);</span>
<span class="dir">#define up(lidx,n,sign,ridx,v) b[lidx].vel[n] sign##= b[ridx].mass * mag * d##v</span>
            <span class="kwd">up</span><span class="sym">(</span>i<span class="sym">,</span><span class="num">0</span><span class="sym">,-,</span>j<span class="sym">,</span>x<span class="sym">);</span> <span class="kwd">up</span><span class="sym">(</span>i<span class="sym">,</span><span class="num">1</span><span class="sym">,-,</span>j<span class="sym">,</span>y<span class="sym">);</span> <span class="kwd">up</span><span class="sym">(</span>i<span class="sym">,</span><span class="num">2</span><span class="sym">,-,</span>j<span class="sym">,</span>z<span class="sym">);</span>
            <span class="kwd">up</span><span class="sym">(</span>j<span class="sym">,</span><span class="num">0</span><span class="sym">,+,</span>i<span class="sym">,</span>x<span class="sym">);</span> <span class="kwd">up</span><span class="sym">(</span>j<span class="sym">,</span><span class="num">1</span><span class="sym">,+,</span>i<span class="sym">,</span>y<span class="sym">);</span> <span class="kwd">up</span><span class="sym">(</span>j<span class="sym">,</span><span class="num">2</span><span class="sym">,+,</span>i<span class="sym">,</span>z<span class="sym">);</span>
        <span class="sym">}</span>
        b<span class="sym">[</span>i<span class="sym">].</span>pos <span class="sym">+=</span> dt <span class="sym">*</span> b<span class="sym">[</span>i<span class="sym">].</span>vel<span class="sym">;</span>
    <span class="sym">}</span>
<span class="sym">}</span>

Planet <span class="kwd">dpy</span><span class="sym">(</span>Planet p<span class="sym">) {</span> p<span class="sym">.</span>vel <span class="sym">*=</span> days_per_year<span class="sym">;</span> <span class="kwa">return</span> p<span class="sym">; }</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[])</span>
<span class="sym">{</span>
  Planet <span class="kwd">sun</span><span class="sym">(</span>solar_mass<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">);</span>
  Planet <span class="kwd">jupiter</span><span class="sym">(</span> <span class="num">9.54791938424326609e-04</span> <span class="sym">*</span> solar_mass<span class="sym">,</span>
    <span class="num">4.84143144246472090e+00</span><span class="sym">,-</span><span class="num">1.16032004402742839e+00</span><span class="sym">,-</span><span class="num">1.03622044471123109e-01</span><span class="sym">,</span>
    <span class="num">1.66007664274403694e-03</span><span class="sym">,</span> <span class="num">7.69901118419740425e-03</span><span class="sym">,-</span><span class="num">6.90460016972063023e-05</span><span class="sym">);</span>
  Planet <span class="kwd">saturn</span><span class="sym">(</span> <span class="num">2.85885980666130812e-04</span> <span class="sym">*</span> solar_mass<span class="sym">,</span>
    <span class="num">8.34336671824457987e+00</span><span class="sym">,</span> <span class="num">4.12479856412430479e+00</span><span class="sym">,-</span><span class="num">4.03523417114321381e-01</span><span class="sym">,</span>
   <span class="sym">-</span><span class="num">2.76742510726862411e-03</span><span class="sym">,</span> <span class="num">4.99852801234917238e-03</span><span class="sym">,</span> <span class="num">2.30417297573763929e-05</span><span class="sym">);</span>
  Planet <span class="kwd">uranus</span><span class="sym">(</span> <span class="num">4.36624404335156298e-05</span> <span class="sym">*</span> solar_mass<span class="sym">,</span>
    <span class="num">1.28943695621391310e+01</span><span class="sym">,-</span><span class="num">1.51111514016986312e+01</span><span class="sym">,-</span><span class="num">2.23307578892655734e-01</span><span class="sym">,</span>
    <span class="num">2.96460137564761618e-03</span><span class="sym">,</span> <span class="num">2.37847173959480950e-03</span><span class="sym">,-</span><span class="num">2.96589568540237556e-05</span><span class="sym">);</span>
  Planet <span class="kwd">neptune</span><span class="sym">(</span> <span class="num">5.15138902046611451e-05</span> <span class="sym">*</span> solar_mass<span class="sym">,</span>
    <span class="num">1.53796971148509165e+01</span><span class="sym">,-</span><span class="num">2.59193146099879641e+01</span><span class="sym">,</span> <span class="num">1.79258772950371181e-01</span><span class="sym">,</span>
    <span class="num">2.68067772490389322e-03</span><span class="sym">,</span> <span class="num">1.62824170038242295e-03</span><span class="sym">,-</span><span class="num">9.51592254519715870e-05</span><span class="sym">);</span>

  Planet tmp<span class="sym">[] = {</span>sun<span class="sym">,</span> jupiter<span class="sym">,</span> saturn<span class="sym">,</span> uranus<span class="sym">,</span> neptune<span class="sym">};</span>
  vector<span class="sym">&lt;</span>Planet<span class="sym">&gt;</span> <span class="kwd">bodies</span><span class="sym">(</span>tmp<span class="sym">,</span>tmp<span class="sym">+</span>NBODIES<span class="sym">);</span>
  <span class="kwd">transform</span><span class="sym">(</span>bodies<span class="sym">.</span><span class="kwd">begin</span><span class="sym">(),</span>bodies<span class="sym">.</span><span class="kwd">end</span><span class="sym">(),</span>bodies<span class="sym">.</span><span class="kwd">begin</span><span class="sym">(),</span>dpy<span class="sym">);</span>
  <span class="kwd">offset_momentum</span><span class="sym">(</span>bodies<span class="sym">);</span>
  cout <span class="sym">&lt;&lt;</span> <span class="kwd">setprecision</span><span class="sym">(</span><span class="num">9</span><span class="sym">) &lt;&lt;</span> <span class="kwd">energy</span><span class="sym">(</span>bodies<span class="sym">) &lt;&lt;</span> endl<span class="sym">;</span>

  <span class="kwa">for</span><span class="sym">(</span><span class="kwb">long</span> i<span class="sym">=</span><span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span> i<span class="sym">&gt;</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">--)</span> <span class="kwd">advance</span><span class="sym">(</span>bodies<span class="sym">,</span><span class="num">0.01</span><span class="sym">);</span>

  cout <span class="sym">&lt;&lt;</span> <span class="kwd">energy</span><span class="sym">(</span>bodies<span class="sym">) &lt;&lt;</span> endl<span class="sym">;</span>

  <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>
