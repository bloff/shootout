<span class="com">/*</span>
<span class="com"> * -- The Computer Language Shootout</span>
<span class="com"> *  -- http://shootout.alioth.debian.org/</span>
<span class="com"> *  --</span>
<span class="com"> *  -- contributed by Qingyan Liu (hmisty&lt;at&gt;gmail.com)</span>
<span class="com"> *  --</span>
<span class="com"> *  -- Prerequisite: GNU MP Library (gmp-4.1.4)</span>
<span class="com"> */</span>
<span class="dir">#include &lt;cstdlib&gt;</span>
<span class="dir">#include &lt;iostream&gt;</span>
<span class="dir">#include &lt;string&gt;</span>
<span class="dir">#include &lt;gmp.h&gt;</span>

<span class="kwa">using namespace</span> std<span class="sym">;</span>

<span class="kwc">class</span> BigInt <span class="sym">{</span>
	<span class="kwc">public</span><span class="sym">:</span>
		<span class="kwb">static const int</span> BASE <span class="sym">=</span> <span class="num">10</span><span class="sym">;</span> <span class="slc">// 10-based</span>

		<span class="kwd">BigInt</span><span class="sym">() {</span> <span class="kwd">mpz_init</span><span class="sym">(</span>big<span class="sym">);	}</span>
		<span class="kwd">BigInt</span><span class="sym">(</span><span class="kwb">const</span> string s<span class="sym">) {</span> <span class="kwd">mpz_init_set_str</span><span class="sym">(</span>big<span class="sym">,</span> s<span class="sym">.</span><span class="kwd">c_str</span><span class="sym">(),</span> BASE<span class="sym">); }</span>
		<span class="kwd">BigInt</span><span class="sym">(</span><span class="kwb">const signed long int</span> si<span class="sym">) {</span> <span class="kwd">mpz_init_set_si</span><span class="sym">(</span>big<span class="sym">,</span> si<span class="sym">); }</span>

		<span class="kwc">friend</span> BigInt <span class="kwc">operator</span><span class="sym">+(</span><span class="kwb">const</span> BigInt lhs<span class="sym">,</span> <span class="kwb">const</span> BigInt rhs<span class="sym">) {</span>
			BigInt result<span class="sym">;</span>
			<span class="kwd">mpz_add</span><span class="sym">(</span>result<span class="sym">.</span>big<span class="sym">,</span> lhs<span class="sym">.</span>big<span class="sym">,</span> rhs<span class="sym">.</span>big<span class="sym">);</span>
			<span class="kwa">return</span> result<span class="sym">;</span>
		<span class="sym">}</span>

		<span class="kwc">friend</span> BigInt <span class="kwc">operator</span><span class="sym">-(</span><span class="kwb">const</span> BigInt lhs<span class="sym">,</span> <span class="kwb">const</span> BigInt rhs<span class="sym">) {</span>
			BigInt result<span class="sym">;</span>
			<span class="kwd">mpz_sub</span><span class="sym">(</span>result<span class="sym">.</span>big<span class="sym">,</span> lhs<span class="sym">.</span>big<span class="sym">,</span> rhs<span class="sym">.</span>big<span class="sym">);</span>
			<span class="kwa">return</span> result<span class="sym">;</span>
		<span class="sym">}</span>

		<span class="kwc">friend</span> BigInt <span class="kwc">operator</span><span class="sym">*(</span><span class="kwb">const</span> BigInt lhs<span class="sym">,</span> <span class="kwb">const</span> BigInt rhs<span class="sym">) {</span>
			BigInt result<span class="sym">;</span>
			<span class="kwd">mpz_mul</span><span class="sym">(</span>result<span class="sym">.</span>big<span class="sym">,</span> lhs<span class="sym">.</span>big<span class="sym">,</span> rhs<span class="sym">.</span>big<span class="sym">);</span>
			<span class="kwa">return</span> result<span class="sym">;</span>
		<span class="sym">}</span>

		<span class="kwc">friend</span> BigInt <span class="kwc">operator</span><span class="sym">/(</span><span class="kwb">const</span> BigInt lhs<span class="sym">,</span> <span class="kwb">const</span> BigInt rhs<span class="sym">) {</span>
			BigInt result<span class="sym">;</span>
			<span class="slc">// lhs.big = q * rhs.big + r</span>
			<span class="kwd">mpz_tdiv_q</span><span class="sym">(</span>result<span class="sym">.</span>big<span class="sym">,</span> lhs<span class="sym">.</span>big<span class="sym">,</span> rhs<span class="sym">.</span>big<span class="sym">);</span>
			<span class="kwa">return</span> result<span class="sym">;</span>
		<span class="sym">}</span>

		<span class="kwc">friend</span> BigInt <span class="kwc">operator</span><span class="sym">%(</span><span class="kwb">const</span> BigInt lhs<span class="sym">,</span> <span class="kwb">const</span> BigInt rhs<span class="sym">) {</span>
			BigInt result<span class="sym">;</span>
			<span class="kwd">mpz_tdiv_r</span><span class="sym">(</span>result<span class="sym">.</span>big<span class="sym">,</span> lhs<span class="sym">.</span>big<span class="sym">,</span> rhs<span class="sym">.</span>big<span class="sym">);</span>
			<span class="kwa">return</span> result<span class="sym">;</span>
		<span class="sym">}</span>

		<span class="kwc">friend</span> <span class="kwb">bool</span> <span class="kwc">operator</span><span class="sym">==(</span><span class="kwb">const</span> BigInt lhs<span class="sym">,</span> <span class="kwb">const</span> BigInt rhs<span class="sym">) {</span>
			<span class="kwa">return</span> <span class="kwd">mpz_cmp</span><span class="sym">(</span>lhs<span class="sym">.</span>big<span class="sym">,</span> rhs<span class="sym">.</span>big<span class="sym">) ==</span> <span class="num">0</span><span class="sym">;</span>
		<span class="sym">}</span>

		<span class="kwc">friend</span> ostream<span class="sym">&amp;</span> <span class="kwc">operator</span><span class="sym">&lt;&lt;(</span>ostream<span class="sym">&amp;</span> os<span class="sym">,</span> <span class="kwb">const</span> BigInt rhs<span class="sym">) {</span>
			<span class="kwb">char</span> <span class="sym">*</span>str <span class="sym">=</span> <span class="kwd">mpz_get_str</span><span class="sym">(</span>NULL<span class="sym">,</span> BASE<span class="sym">,</span> rhs<span class="sym">.</span>big<span class="sym">);</span>
			string <span class="kwd">s</span><span class="sym">(</span>str<span class="sym">);</span>
			<span class="kwd">free</span><span class="sym">(</span>str<span class="sym">);</span>
			os <span class="sym">&lt;&lt;</span> s<span class="sym">;</span>
			<span class="kwa">return</span> os<span class="sym">;</span>
		<span class="sym">}</span>

	<span class="kwc">private</span><span class="sym">:</span>
		mpz_t big<span class="sym">;</span>
<span class="sym">};</span>

<span class="kwc">template</span> <span class="sym">&lt;</span><span class="kwc">class</span> T<span class="sym">&gt;</span>
<span class="kwc">class</span> Transformation <span class="sym">{</span>
	<span class="kwc">public</span><span class="sym">:</span>
		<span class="kwd">Transformation</span><span class="sym">(</span><span class="kwb">int</span> q<span class="sym">,</span> <span class="kwb">int</span> r<span class="sym">,</span> <span class="kwb">int</span> s<span class="sym">,</span> <span class="kwb">int</span> t<span class="sym">):</span><span class="kwd">q</span><span class="sym">(</span>q<span class="sym">),</span> <span class="kwd">r</span><span class="sym">(</span>r<span class="sym">),</span> <span class="kwd">s</span><span class="sym">(</span>s<span class="sym">),</span> <span class="kwd">t</span><span class="sym">(</span>t<span class="sym">),</span> <span class="kwd">k</span><span class="sym">(</span><span class="num">0</span><span class="sym">) {}</span>
		<span class="kwd">Transformation</span><span class="sym">(</span>T q<span class="sym">,</span> T r<span class="sym">,</span> T s<span class="sym">,</span> T t<span class="sym">):</span><span class="kwd">q</span><span class="sym">(</span>q<span class="sym">),</span> <span class="kwd">r</span><span class="sym">(</span>r<span class="sym">),</span> <span class="kwd">s</span><span class="sym">(</span>s<span class="sym">),</span> <span class="kwd">t</span><span class="sym">(</span>t<span class="sym">),</span> <span class="kwd">k</span><span class="sym">(</span><span class="num">0</span><span class="sym">) {}</span>
		<span class="sym">~</span><span class="kwd">Transformation</span><span class="sym">() {}</span>

		Transformation<span class="sym">&lt;</span>T<span class="sym">&gt;</span> <span class="kwd">next</span><span class="sym">() {</span>
			k <span class="sym">=</span> k <span class="sym">+</span> <span class="kwd">T</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
			q <span class="sym">=</span> k<span class="sym">;</span>
			r <span class="sym">=</span> k <span class="sym">*</span> <span class="kwd">T</span><span class="sym">(</span><span class="num">4</span><span class="sym">) +</span> <span class="kwd">T</span><span class="sym">(</span><span class="num">2</span><span class="sym">);</span>
			s <span class="sym">=</span> <span class="kwd">T</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
			t <span class="sym">=</span> k <span class="sym">*</span> <span class="kwd">T</span><span class="sym">(</span><span class="num">2</span><span class="sym">) +</span> <span class="kwd">T</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
			<span class="kwa">return</span> <span class="sym">*</span><span class="kwa">this</span><span class="sym">;</span>
		<span class="sym">}</span>

		T <span class="kwd">extract</span><span class="sym">(</span><span class="kwb">int</span> j<span class="sym">) {</span>
			<span class="kwb">int</span> bigj <span class="sym">=</span> j<span class="sym">;</span>
			T numerator <span class="sym">=</span> q <span class="sym">*</span> bigj <span class="sym">+</span> r<span class="sym">;</span>
			T denominator <span class="sym">=</span> s <span class="sym">*</span> bigj <span class="sym">+</span> t<span class="sym">;</span>
			<span class="kwa">return</span> numerator <span class="sym">/</span> denominator<span class="sym">;</span>
		<span class="sym">}</span>

		Transformation<span class="sym">&lt;</span>T<span class="sym">&gt;</span> <span class="kwd">qrst</span><span class="sym">(</span>T q<span class="sym">,</span> T r<span class="sym">,</span> T s<span class="sym">,</span> T t<span class="sym">) {</span>
			<span class="kwa">this</span><span class="sym">-&gt;</span>q <span class="sym">=</span> q<span class="sym">;</span>
			<span class="kwa">this</span><span class="sym">-&gt;</span>r <span class="sym">=</span> r<span class="sym">;</span>
			<span class="kwa">this</span><span class="sym">-&gt;</span>s <span class="sym">=</span> s<span class="sym">;</span>
			<span class="kwa">this</span><span class="sym">-&gt;</span>t <span class="sym">=</span> t<span class="sym">;</span>
			<span class="kwa">this</span><span class="sym">-&gt;</span>k <span class="sym">=</span> <span class="kwd">T</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
			<span class="kwa">return</span> <span class="sym">*</span><span class="kwa">this</span><span class="sym">;</span>
		<span class="sym">}</span>

		Transformation<span class="sym">&lt;</span>T<span class="sym">&gt;</span> <span class="kwd">compose</span><span class="sym">(</span><span class="kwb">const</span> Transformation<span class="sym">&lt;</span>T<span class="sym">&gt;</span> a<span class="sym">) {</span>
			Transformation<span class="sym">&lt;</span>T<span class="sym">&gt;</span> <span class="kwd">tr</span><span class="sym">(</span>
				q <span class="sym">*</span> a<span class="sym">.</span>q<span class="sym">,</span>
				q <span class="sym">*</span> a<span class="sym">.</span>r <span class="sym">+</span> r <span class="sym">*</span> a<span class="sym">.</span>t<span class="sym">,</span>
				s <span class="sym">*</span> a<span class="sym">.</span>q <span class="sym">+</span> t <span class="sym">*</span> a<span class="sym">.</span>s<span class="sym">,</span>
				s <span class="sym">*</span> a<span class="sym">.</span>r <span class="sym">+</span> t <span class="sym">*</span> a<span class="sym">.</span>t
			<span class="sym">);</span>
			<span class="kwa">return</span> tr<span class="sym">;</span>
		<span class="sym">}</span>

	<span class="kwc">private</span><span class="sym">:</span>
		T q<span class="sym">,</span> r<span class="sym">,</span> s<span class="sym">,</span> t<span class="sym">;</span>
		T k<span class="sym">;</span>
<span class="sym">};</span>

<span class="kwc">template</span> <span class="sym">&lt;</span><span class="kwc">class</span> T<span class="sym">&gt;</span>
<span class="kwc">class</span> PiDigitSpigot <span class="sym">{</span>
	<span class="kwc">public</span><span class="sym">:</span>
		<span class="kwd">PiDigitSpigot</span><span class="sym">():</span><span class="kwd">z</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">),</span> <span class="kwd">x</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">),</span> <span class="kwd">inverse</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">) {}</span>
		<span class="sym">~</span><span class="kwd">PiDigitSpigot</span><span class="sym">() {}</span>

		T <span class="kwd">next</span><span class="sym">() {</span>
			T y <span class="sym">=</span> <span class="kwd">digit</span><span class="sym">();</span>
			<span class="kwa">if</span> <span class="sym">(</span><span class="kwd">is_safe</span><span class="sym">(</span>y<span class="sym">)) {</span>
				z <span class="sym">=</span> <span class="kwd">produce</span><span class="sym">(</span>y<span class="sym">);</span>
				<span class="kwa">return</span> y<span class="sym">;</span>
			<span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
				z <span class="sym">=</span> <span class="kwd">consume</span><span class="sym">(</span>x<span class="sym">.</span><span class="kwd">next</span><span class="sym">());</span>
				<span class="kwa">return</span> <span class="kwd">next</span><span class="sym">();</span>
			<span class="sym">}</span>
		<span class="sym">}</span>

		T <span class="kwd">digit</span><span class="sym">() {</span>
			<span class="kwa">return</span> z<span class="sym">.</span><span class="kwd">extract</span><span class="sym">(</span><span class="num">3</span><span class="sym">);</span>
		<span class="sym">}</span>

		<span class="kwb">bool</span> <span class="kwd">is_safe</span><span class="sym">(</span>T digit<span class="sym">) {</span>
			<span class="kwa">return</span> <span class="sym">(</span>digit <span class="sym">==</span> z<span class="sym">.</span><span class="kwd">extract</span><span class="sym">(</span><span class="num">4</span><span class="sym">));</span>
		<span class="sym">}</span>

		Transformation<span class="sym">&lt;</span>T<span class="sym">&gt;</span> <span class="kwd">produce</span><span class="sym">(</span>T i<span class="sym">) {</span>
			<span class="kwa">return</span> <span class="sym">((</span>inverse<span class="sym">.</span><span class="kwd">qrst</span><span class="sym">(</span><span class="kwd">T</span><span class="sym">(</span><span class="num">10</span><span class="sym">),</span> i <span class="sym">*</span> <span class="kwd">T</span><span class="sym">(-</span><span class="num">10</span><span class="sym">),</span> <span class="kwd">T</span><span class="sym">(</span><span class="num">0</span><span class="sym">),</span> <span class="kwd">T</span><span class="sym">(</span><span class="num">1</span><span class="sym">))).</span><span class="kwd">compose</span><span class="sym">(</span>z<span class="sym">));</span>
		<span class="sym">}</span>

		Transformation<span class="sym">&lt;</span>T<span class="sym">&gt;</span> <span class="kwd">consume</span><span class="sym">(</span><span class="kwb">const</span> Transformation<span class="sym">&lt;</span>T<span class="sym">&gt;</span> a<span class="sym">) {</span>
			<span class="kwa">return</span> z<span class="sym">.</span><span class="kwd">compose</span><span class="sym">(</span>a<span class="sym">);</span>
		<span class="sym">}</span>

	<span class="kwc">private</span><span class="sym">:</span>
		Transformation<span class="sym">&lt;</span>T<span class="sym">&gt;</span> z<span class="sym">,</span> x<span class="sym">,</span> inverse<span class="sym">;</span>
<span class="sym">};</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">**</span> argv<span class="sym">) {</span>
	<span class="kwb">enum</span> <span class="sym">{</span> FOO <span class="sym">=</span> <span class="num">27</span> <span class="sym">};</span>
	<span class="kwb">int</span> n <span class="sym">=</span> argc <span class="sym">==</span> <span class="num">1</span> ? FOO <span class="sym">:</span> <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span>

	PiDigitSpigot<span class="sym">&lt;</span>BigInt<span class="sym">&gt;</span> digits<span class="sym">;</span>

	<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> i <span class="sym">&lt;=</span> n<span class="sym">;</span> i<span class="sym">++) {</span>
		cout <span class="sym">&lt;&lt;</span> digits<span class="sym">.</span><span class="kwd">next</span><span class="sym">();</span>
		<span class="kwa">if</span> <span class="sym">(</span>i <span class="sym">%</span> <span class="num">10</span> <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span>
			cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;</span><span class="esc">\t</span><span class="str">:&quot;</span> <span class="sym">&lt;&lt;</span> i <span class="sym">&lt;&lt;</span> endl<span class="sym">;</span>
	<span class="sym">}</span>
	<span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">%</span> <span class="num">10</span> <span class="sym">!=</span> <span class="num">0</span><span class="sym">) {</span>
		<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> j <span class="sym">=</span> n <span class="sym">%</span> <span class="num">10</span><span class="sym">;</span> j <span class="sym">&lt;=</span> <span class="num">10</span><span class="sym">;</span> j<span class="sym">++)</span>
			cout <span class="sym">&lt;&lt;</span> <span class="str">' '</span><span class="sym">;</span>
		cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;</span><span class="esc">\t</span><span class="str">:&quot;</span> <span class="sym">&lt;&lt;</span> n <span class="sym">&lt;&lt;</span> endl<span class="sym">;</span>
	<span class="sym">}</span>
<span class="sym">}</span>

