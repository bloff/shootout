<span class="slc">! -*- mode: f90 -*-</span>
<span class="slc">!</span>
<span class="slc">! $Id: takfp-ifc.code,v 1.11 2006-02-22 21:59:12 igouy-guest Exp $ ; $Name:  $</span>
<span class="slc">!</span>
<span class="slc">! Takfp function implementation</span>
<span class="slc">! Simon Geard, 7/12/04</span>
<span class="slc">!</span>
<span class="slc">! Building info.</span>
<span class="slc">! ==============</span>
<span class="slc">!</span>
<span class="slc">! Linux  - using the Intel Fortran90 compiler:</span>
<span class="slc">!</span>
<span class="slc">!          ifort takfp.f90 -O3 -static-libcxa -o takfp</span>
<span class="slc">!</span>
<span class="slc">! WinXP  - Compaq Visual Fortran 6.6c</span>
<span class="slc">!</span>
<span class="slc">!          f90 takfp.f90 /link /libpath:&quot;d:\Program Files\Microsoft Visual Studio\df98\lib&quot;</span>
<span class="slc">!</span>
<span class="slc">! Cygwin - g95 compiler</span>
<span class="slc">!</span>
<span class="slc">!          g95 takfp.f90 -o takfp.exe</span>
<span class="slc">!</span>
program takfp
  implicit none
  real<span class="sym">*</span><span class="num">8</span>  n
  real<span class="sym">*</span><span class="num">8</span> result
  character<span class="sym">(</span>len<span class="sym">=</span><span class="num">2</span><span class="sym">)</span> argv

  call getarg<span class="sym">(</span><span class="num">1</span><span class="sym">,</span>argv<span class="sym">)</span>
  read<span class="sym">(</span>argv<span class="sym">,*)</span> n
  result <span class="sym">=</span> tak<span class="sym">(</span><span class="num">3</span><span class="sym">*</span>n<span class="sym">,</span><span class="num">2</span><span class="sym">*</span>n<span class="sym">,</span>n<span class="sym">)</span>
  write<span class="sym">(*,</span><span class="str">'(f0.1)'</span><span class="sym">)</span> result

contains

  <span class="slc">! The Takfp function itself</span>
  recursive real<span class="sym">*</span><span class="num">8</span> function tak<span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">)</span> result<span class="sym">(</span>dtak<span class="sym">)</span>
    real<span class="sym">*</span><span class="num">8</span><span class="sym">,</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> x<span class="sym">,</span> y<span class="sym">,</span> z
    if <span class="sym">(</span>y <span class="sym">&gt;=</span> x<span class="sym">)</span> then
       dtak <span class="sym">=</span> z
    else
       dtak <span class="sym">=</span> tak<span class="sym">(</span>tak<span class="sym">(</span>x<span class="sym">-</span><span class="num">1.0</span>d0<span class="sym">,</span>y<span class="sym">,</span>z<span class="sym">),</span>tak<span class="sym">(</span>y<span class="sym">-</span><span class="num">1.0</span>d0<span class="sym">,</span>z<span class="sym">,</span>x<span class="sym">),</span>tak<span class="sym">(</span>z<span class="sym">-</span><span class="num">1.0</span>d0<span class="sym">,</span>x<span class="sym">,</span>y<span class="sym">))</span>
    end if
  end function tak

end program takfp

