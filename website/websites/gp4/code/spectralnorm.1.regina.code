<span class="com">/* ------------------------------------------------------------------ */</span>
<span class="com">/* The Great Computer Language Shootout                               */</span>
<span class="com">/* http://shootout.alioth.debian.org/                                 */</span>
<span class="com">/*                                                                    */</span>
<span class="com">/* Modified by Anthony Borla based on code originally submitted by    */</span>
<span class="com">/* Dennis Decker Jensen. Modifications include:                       */</span>
<span class="com">/*                                                                    */</span>
<span class="com">/* * Use of C library sqrt', replacing native code implementation     */</span>
<span class="com">/* * Altered code style to conform with my other REXX contributions   */</span>
<span class="com">/* ------------------------------------------------------------------ */</span>

numeric digits <span class="num">12</span>

<span class="com">/* ----------------------------- */</span>

call initSqrt

<span class="com">/* ----------------------------- */</span>

N <span class="sym">=</span> <span class="kwd">ARG</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span>

parse value <span class="num">0.0 0.0</span> N N with vBv vv u<span class="num">.0</span> v<span class="num">.0</span>

<span class="kwa">do</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> u<span class="num">.0</span> <span class="sym">;</span> u<span class="sym">.</span>i <span class="sym">=</span> <span class="num">1.0</span> <span class="sym">;</span> end

<span class="kwa">do</span> <span class="num">10</span>
  call mulAtAv <span class="str">'u.'</span><span class="sym">,</span> <span class="str">'v.'</span> <span class="sym">;</span> call mulAtAv <span class="str">'v.'</span><span class="sym">,</span> <span class="str">'u.'</span>
end

<span class="kwa">do</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> u<span class="num">.0</span>
  vBv <span class="sym">=</span> vBv <span class="sym">+</span> u<span class="sym">.</span>i <span class="sym">*</span> v<span class="sym">.</span>i <span class="sym">;</span> vv <span class="sym">=</span> vv <span class="sym">+</span> v<span class="sym">.</span>i <span class="sym">*</span> v<span class="sym">.</span>i
end

say <span class="kwd">FORMAT</span><span class="sym">(</span><span class="kwd">sqrt</span><span class="sym">(</span>vBv <span class="sym">/</span> vv<span class="sym">),,</span> <span class="num">9</span><span class="sym">)</span>

exit <span class="num">0</span>

<span class="com">/* ----------------------------- */</span>

A <span class="sym">:</span> procedure
  parse value <span class="kwd">ARG</span><span class="sym">(</span><span class="num">1</span><span class="sym">) -</span> <span class="num">1</span> <span class="kwd">ARG</span><span class="sym">(</span><span class="num">2</span><span class="sym">) -</span> <span class="num">1</span> with i j
  <span class="kwa">return</span> <span class="num">1</span> <span class="sym">/ ((</span>i <span class="sym">+</span> j<span class="sym">) *(</span> i <span class="sym">+</span> j <span class="sym">+</span> <span class="num">1</span><span class="sym">) /</span> <span class="num">2</span> <span class="sym">+</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span>

<span class="com">/* ----------- */</span>

mulAv <span class="sym">:</span>
  parse arg v<span class="sym">,</span> Av <span class="sym">;</span> procedure <span class="kwd">expose</span> <span class="sym">(</span>v<span class="sym">) (</span>Av<span class="sym">)</span>

  call VALUE Av<span class="sym">||</span><span class="num">0</span><span class="sym">,</span> <span class="kwd">VALUE</span><span class="sym">(</span>v<span class="sym">||</span><span class="num">0</span><span class="sym">)</span>

  <span class="kwa">do</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> <span class="kwd">VALUE</span><span class="sym">(</span>Av<span class="sym">||</span><span class="num">0</span><span class="sym">)</span>
    call VALUE Av<span class="sym">||</span>i<span class="sym">,</span> <span class="num">0.0</span>
    <span class="kwa">do</span> j <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> <span class="kwd">VALUE</span><span class="sym">(</span>v<span class="sym">||</span><span class="num">0</span><span class="sym">)</span>
      call VALUE Av<span class="sym">||</span>i<span class="sym">,</span> <span class="kwd">VALUE</span><span class="sym">(</span>Av<span class="sym">||</span>i<span class="sym">) +</span> <span class="kwd">A</span><span class="sym">(</span>i<span class="sym">,</span> j<span class="sym">) *</span> <span class="kwd">VALUE</span><span class="sym">(</span>v<span class="sym">||</span>j<span class="sym">)</span>
    end
  end

  <span class="kwa">return</span>

<span class="com">/* ----------- */</span>

mulAtv <span class="sym">:</span>
  parse arg v<span class="sym">,</span> Atv <span class="sym">;</span> procedure <span class="kwd">expose</span> <span class="sym">(</span>v<span class="sym">) (</span>Atv<span class="sym">)</span>

  call VALUE Atv<span class="sym">||</span><span class="num">0</span><span class="sym">,</span> <span class="kwd">VALUE</span><span class="sym">(</span>v<span class="sym">||</span><span class="num">0</span><span class="sym">)</span>

  <span class="kwa">do</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> <span class="kwd">VALUE</span><span class="sym">(</span>Atv<span class="sym">||</span><span class="num">0</span><span class="sym">)</span>
    call VALUE Atv<span class="sym">||</span>i<span class="sym">,</span> <span class="num">0.0</span>
    <span class="kwa">do</span> j <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> <span class="kwd">VALUE</span><span class="sym">(</span>v<span class="sym">||</span><span class="num">0</span><span class="sym">)</span>
      call VALUE Atv<span class="sym">||</span>i<span class="sym">,</span> <span class="kwd">VALUE</span><span class="sym">(</span>Atv<span class="sym">||</span>i<span class="sym">) +</span> <span class="kwd">A</span><span class="sym">(</span>j<span class="sym">,</span> i<span class="sym">) *</span> <span class="kwd">VALUE</span><span class="sym">(</span>v<span class="sym">||</span>j<span class="sym">)</span>
    end
  end

  <span class="kwa">return</span>

<span class="com">/* ----------- */</span>

mulAtAv<span class="sym">:</span>
  parse arg v<span class="sym">,</span> AtAv <span class="sym">;</span> procedure <span class="kwd">expose</span> <span class="sym">(</span>v<span class="sym">) (</span>AtAv<span class="sym">)</span>

  call mulAv v<span class="sym">,</span> <span class="str">'tmp.'</span>
  call mulAtv <span class="str">'tmp.'</span><span class="sym">,</span> AtAv

  <span class="kwa">return</span>

<span class="com">/* ----------------------------- */</span>

initSqrt <span class="sym">:</span> procedure
  sqrt<span class="sym">.</span>calltype <span class="sym">=</span> <span class="str">'cdecl as function with parameters'</span>
  sqrt<span class="sym">.</span><span class="kwa">return</span><span class="sym">.</span>type <span class="sym">=</span> <span class="str">'float64'</span>
  sqrt<span class="sym">.</span><span class="kwa">return</span><span class="sym">.</span>name <span class="sym">=</span> <span class="str">'return value'</span>

  sqrt<span class="num">.0</span> <span class="sym">=</span> <span class="num">1</span>

  sqrt<span class="num">.1</span><span class="sym">.</span>type <span class="sym">=</span> <span class="str">'float64'</span>
  sqrt<span class="num">.1</span><span class="sym">.</span>name <span class="sym">=</span> <span class="str">'number'</span>

  LIBRARY <span class="sym">=</span> <span class="str">'libm.so.6'</span> <span class="sym">;</span> parse source SYSTEM <span class="sym">. .</span>
  <span class="kwa">if</span> SYSTEM <span class="sym">==</span> <span class="str">&quot;WIN32&quot;</span> then <span class="sym">;</span> LIBRARY <span class="sym">=</span> <span class="str">'msvcrt'</span>

  err <span class="sym">=</span> <span class="kwd">rxFuncDefine</span><span class="sym">(</span><span class="str">'sqrt'</span><span class="sym">,</span> LIBRARY<span class="sym">,</span> <span class="str">'sqrt'</span><span class="sym">,</span> <span class="str">'sqrt.'</span><span class="sym">)</span>

  <span class="kwa">if</span> err \= <span class="num">0</span> then
    say <span class="str">&quot;Error registering function 'sqrt'&quot;</span>

  <span class="kwa">return</span>

