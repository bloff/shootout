<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Paul Lofte
*/</span>

<span class="kwa">public class</span> fannkuch <span class="sym">{
</span>    <span class="kwa">public static</span> <span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">) {
</span>        <span class="kwb">int</span> n <span class="sym">=</span> <span class="num">7</span><span class="sym">;
</span>        <span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> n <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);

</span>        <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">(</span><span class="str">&quot;Pfannkuchen(&quot;</span> <span class="sym">+</span> n <span class="sym">+</span> <span class="str">&quot;) = &quot;</span> <span class="sym">+</span> fannkuch<span class="sym">(</span>n<span class="sym">));
    }

</span>    <span class="kwa">public static</span> <span class="kwb">int</span> fannkuch<span class="sym">(</span><span class="kwb">int</span> n<span class="sym">) {
</span>        <span class="kwb">int</span><span class="sym">[]</span> perm <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>n<span class="sym">];
</span>        <span class="kwb">int</span><span class="sym">[]</span> perm1 <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>n<span class="sym">];
</span>        <span class="kwb">int</span><span class="sym">[]</span> count <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>n<span class="sym">];
</span>        <span class="kwb">int</span><span class="sym">[]</span> maxPerm <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>n<span class="sym">];
</span>        <span class="kwb">int</span> maxFlipsCount <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>        <span class="kwb">int</span> m <span class="sym">=</span> n <span class="num">- 1</span><span class="sym">;

</span>        <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++)</span> perm1<span class="sym">[</span>i<span class="sym">] =</span> i<span class="sym">;
</span>        <span class="kwb">int</span> r <span class="sym">=</span> n<span class="sym">;

</span>        <span class="kwa">while</span> <span class="sym">(</span>true<span class="sym">) {
</span>            <span class="kwa">while</span> <span class="sym">(</span>r <span class="sym">!=</span> <span class="num">1</span><span class="sym">) {</span> count<span class="sym">[</span>r <span class="num">- 1</span><span class="sym">] =</span> r<span class="sym">;</span> r<span class="sym">--; }
</span>            <span class="kwa">if</span> <span class="sym">(!(</span>perm1<span class="sym">[</span><span class="num">0</span><span class="sym">] ==</span> <span class="num">0</span> <span class="sym">||</span> perm1<span class="sym">[</span>m<span class="sym">] ==</span> m<span class="sym">)) {
</span>                <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++)</span> perm<span class="sym">[</span>i<span class="sym">] =</span> perm1<span class="sym">[</span>i<span class="sym">];

</span>                <span class="kwb">int</span> flipsCount <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>                <span class="kwb">int</span> k<span class="sym">;

</span>                <span class="kwa">while</span> <span class="sym">(!((</span>k <span class="sym">=</span> perm<span class="sym">[</span><span class="num">0</span><span class="sym">]) ==</span> <span class="num">0</span><span class="sym">)) {
</span>                    <span class="kwb">int</span> k2 <span class="sym">= (</span>k <span class="sym">+</span> <span class="num">1</span><span class="sym">) &gt;&gt;</span> <span class="num">1</span><span class="sym">;
</span>                    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> k2<span class="sym">;</span> i<span class="sym">++) {
</span>                        <span class="kwb">int</span> temp <span class="sym">=</span> perm<span class="sym">[</span>i<span class="sym">];</span> perm<span class="sym">[</span>i<span class="sym">] =</span> perm<span class="sym">[</span>k <span class="sym">-</span> i<span class="sym">];</span> perm<span class="sym">[</span>k <span class="sym">-</span> i<span class="sym">] =</span> temp<span class="sym">;
                    }
</span>                    flipsCount<span class="sym">++;
                }

</span>                <span class="kwa">if</span> <span class="sym">(</span>flipsCount <span class="sym">&gt;</span> maxFlipsCount<span class="sym">) {
</span>                    maxFlipsCount <span class="sym">=</span> flipsCount<span class="sym">;
</span>                    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++)</span> maxPerm<span class="sym">[</span>i<span class="sym">] =</span> perm1<span class="sym">[</span>i<span class="sym">];
                }
            }

</span>            <span class="kwa">while</span> <span class="sym">(</span>true<span class="sym">) {
</span>                <span class="kwa">if</span> <span class="sym">(</span>r <span class="sym">==</span> n<span class="sym">)</span> <span class="kwa">return</span> maxFlipsCount<span class="sym">;
</span>                <span class="kwb">int</span> perm0 <span class="sym">=</span> perm1<span class="sym">[</span><span class="num">0</span><span class="sym">];
</span>                <span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>                <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> r<span class="sym">) {
</span>                    <span class="kwb">int</span> j <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>                    perm1<span class="sym">[</span>i<span class="sym">] =</span> perm1<span class="sym">[</span>j<span class="sym">];
</span>                    i <span class="sym">=</span> j<span class="sym">;
                }
</span>                perm1<span class="sym">[</span>r<span class="sym">] =</span> perm0<span class="sym">;

</span>                count<span class="sym">[</span>r<span class="sym">] =</span> count<span class="sym">[</span>r<span class="sym">] -</span> <span class="num">1</span><span class="sym">;
</span>                <span class="kwa">if</span> <span class="sym">(</span>count<span class="sym">[</span>r<span class="sym">] &gt;</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">break</span><span class="sym">;
</span>                r<span class="sym">++;
            }
        }
    }
}</span>
