<span class="com">(* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Josh Goldfoot</span>
<span class="com">*)</span>

<span class="kwa">program</span> pfannkuchen<span class="sym">;</span>
<span class="kwa">uses</span> SysUtils<span class="sym">;</span>

<span class="kwa">type</span>
    TIntegerArray <span class="sym">=</span> <span class="kwa">Array</span><span class="sym">[</span><span class="num">0</span>.<span class="num">.99</span><span class="sym">]</span> <span class="kwa">of</span> <span class="kwb">Integer</span><span class="sym">;</span>

<span class="kwa">function</span> <span class="kwd">fannkuch</span><span class="sym">(</span>n <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">):</span> <span class="kwb">integer</span><span class="sym">;</span>
<span class="kwa">var</span>
   perm<span class="sym">,</span> perm1<span class="sym">,</span> count<span class="sym">:</span> TIntegerArray<span class="sym">;</span>
   print30<span class="sym">,</span> m<span class="sym">,</span> r<span class="sym">,</span> i<span class="sym">,</span> k<span class="sym">,</span> temp<span class="sym">,</span> mostFlips<span class="sym">,</span> flips<span class="sym">,</span> perm0<span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;</span>
   keepLooping0<span class="sym">,</span> keepLooping1 <span class="sym">:</span> <span class="kwb">boolean</span><span class="sym">;</span>
<span class="kwa">begin</span>
   print30 <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
   mostFlips <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
   m <span class="sym">:=</span> n <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span>
   <span class="kwa">for</span> i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">to</span> m <span class="kwa">do</span>
       perm1<span class="sym">[</span>i<span class="sym">] :=</span> i<span class="sym">;</span>
   r <span class="sym">:=</span> n<span class="sym">;</span>
   keepLooping0 <span class="sym">:=</span> <span class="kwb">true</span><span class="sym">;</span>
   <span class="kwa">repeat</span>
      <span class="kwa">if</span> print30 <span class="sym">&lt;</span> <span class="num">30</span> <span class="kwa">then</span>
      <span class="kwa">begin</span>
         <span class="kwa">for</span> i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">to</span> m <span class="kwa">do</span>
            <span class="kwd">write</span><span class="sym">(</span>perm1<span class="sym">[</span>i<span class="sym">] +</span> <span class="num">1</span><span class="sym">);</span>
         writeln<span class="sym">;</span>
         print30 <span class="sym">:=</span> print30 <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
      <span class="kwa">end</span><span class="sym">;</span>
      <span class="kwa">while</span> r <span class="sym">&lt;&gt;</span> <span class="num">1</span> <span class="kwa">do</span>
      <span class="kwa">begin</span>
         count<span class="sym">[</span>r<span class="sym">-</span><span class="num">1</span><span class="sym">] :=</span> r<span class="sym">;</span>
         r <span class="sym">:=</span> r <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span>
      <span class="kwa">end</span><span class="sym">;</span>
      <span class="kwa">if not</span> <span class="sym">((</span>perm1<span class="sym">[</span><span class="num">0</span><span class="sym">]=</span><span class="num">0</span><span class="sym">)</span> <span class="kwa">or</span> <span class="sym">(</span>perm1<span class="sym">[</span>m<span class="sym">]=</span>m<span class="sym">))</span> <span class="kwa">then</span>
      <span class="kwa">begin</span>
         <span class="kwa">for</span> i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">to</span> m <span class="kwa">do</span>
            perm<span class="sym">[</span>i<span class="sym">] :=</span> perm1<span class="sym">[</span>i<span class="sym">];</span>
         flips <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
         <span class="kwa">repeat</span>
            k <span class="sym">:=</span> perm<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
            <span class="kwa">if</span> k <span class="sym">&lt;&gt;</span> <span class="num">0</span> <span class="kwa">then</span>
            <span class="kwa">begin</span>
               <span class="kwa">for</span> i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">to</span> <span class="sym">((</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">div</span> <span class="num">2</span><span class="sym">) -</span> <span class="num">1</span> <span class="kwa">do</span>
               <span class="kwa">begin</span>
                  temp <span class="sym">:=</span> perm<span class="sym">[</span>i<span class="sym">];</span>
                  perm<span class="sym">[</span>i<span class="sym">] :=</span> perm<span class="sym">[</span>k<span class="sym">-</span>i<span class="sym">];</span>
                  perm<span class="sym">[</span>k<span class="sym">-</span>i<span class="sym">] :=</span> temp<span class="sym">;</span>
               <span class="kwa">end</span><span class="sym">;</span>
               flips <span class="sym">:=</span> flips <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
            <span class="kwa">end</span><span class="sym">;</span>
         <span class="kwa">until</span> k <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
         <span class="kwa">if</span> flips <span class="sym">&gt;</span> mostFlips <span class="kwa">then</span>
            mostFlips <span class="sym">:=</span> flips<span class="sym">;</span>
      <span class="kwa">end</span><span class="sym">;</span>
      keepLooping1 <span class="sym">:=</span> r <span class="sym">&lt;&gt;</span> n<span class="sym">;</span>
      <span class="kwa">while</span> keepLooping1 <span class="kwa">do</span>
      <span class="kwa">begin</span>
         <span class="kwa">if</span> r <span class="sym">=</span> n <span class="kwa">then</span>
         <span class="kwa">begin</span>
            fannkuch <span class="sym">:=</span> mostFlips<span class="sym">;</span>
            keepLooping1 <span class="sym">:=</span> <span class="kwb">False</span><span class="sym">;</span>
            keepLooping0 <span class="sym">:=</span> <span class="kwb">False</span><span class="sym">;</span>
         <span class="kwa">end</span>
         <span class="kwa">else</span>
         <span class="kwa">begin</span>
            perm0 <span class="sym">:=</span> perm1<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
            i <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
            <span class="kwa">while</span> i <span class="sym">&lt;</span> r <span class="kwa">do</span>
            <span class="kwa">begin</span>
               k <span class="sym">:=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
               perm1<span class="sym">[</span>i<span class="sym">] :=</span> perm1<span class="sym">[</span>k<span class="sym">];</span>
               i <span class="sym">:=</span> k<span class="sym">;</span>
            <span class="kwa">end</span><span class="sym">;</span>
            perm1<span class="sym">[</span>r<span class="sym">] :=</span> perm0<span class="sym">;</span>
            count<span class="sym">[</span>r<span class="sym">] :=</span> count<span class="sym">[</span>r<span class="sym">] -</span> <span class="num">1</span><span class="sym">;</span>
            <span class="kwa">if</span> count<span class="sym">[</span>r<span class="sym">] &gt;</span> <span class="num">0</span> <span class="kwa">then</span>
               keepLooping1 <span class="sym">:=</span> <span class="kwb">False</span>
            <span class="kwa">else</span>
               r <span class="sym">:=</span> r <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
         <span class="kwa">end</span><span class="sym">;</span>
      <span class="kwa">end</span><span class="sym">;</span>
   <span class="kwa">until not</span> keepLooping0<span class="sym">;</span>
<span class="kwa">end</span><span class="sym">;</span>

<span class="kwa">var</span>
   n<span class="sym">,</span> Code<span class="sym">,</span> answer <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;</span>

<span class="kwa">begin</span>
   <span class="kwa">if</span> <span class="kwd">paramCount</span><span class="sym">() =</span> <span class="num">1</span>
      <span class="kwa">then</span> <span class="kwd">Val</span> <span class="sym">(</span><span class="kwd">ParamStr</span> <span class="sym">(</span><span class="num">1</span><span class="sym">),</span>n<span class="sym">,</span>Code<span class="sym">)</span>
   <span class="kwa">else</span> n <span class="sym">:=</span> <span class="num">7</span><span class="sym">;</span>
   answer <span class="sym">:=</span> <span class="kwd">fannkuch</span><span class="sym">(</span>n<span class="sym">);</span>
   <span class="kwd">writeln</span><span class="sym">(</span><span class="str">'Pfannkuchen('</span><span class="sym">,</span>n<span class="sym">,</span><span class="str">') = '</span><span class="sym">,</span> answer<span class="sym">);</span>
<span class="kwa">end</span>.
