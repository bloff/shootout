<span class="slc">' The Computer Language Shootout</span>
<span class="slc">' http://shootout.alioth.debian.org/</span>
<span class="slc">' contributed by Josh Goldfoot</span>
<span class="slc">' small update to ByVal, and printf by yetifoot</span>

#include <span class="str">&quot;crt.bi&quot;</span>

Option Escape

<span class="kwa">Function</span> Ack<span class="sym">(</span><span class="kwa">ByVal</span> x <span class="kwa">As</span> <span class="kwb">Integer</span><span class="sym">,</span> <span class="kwa">ByVal</span> y <span class="kwa">As</span> <span class="kwb">Integer</span><span class="sym">)</span> <span class="kwa">As</span> <span class="kwb">Integer</span>
  <span class="kwa">If</span> x <span class="sym">=</span> <span class="num">0</span> <span class="kwa">Then</span> Return <span class="sym">(</span>y <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span>
  <span class="kwa">If</span> y <span class="sym">=</span> <span class="num">0</span> <span class="kwa">Then</span> Return <span class="sym">(</span>Ack<span class="sym">(</span>x<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">))</span>
  Return <span class="sym">(</span>Ack<span class="sym">(</span>x<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> Ack<span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">-</span><span class="num">1</span><span class="sym">)))</span>
<span class="kwa">End Function</span>

<span class="kwa">Function</span> Fib<span class="sym">(</span><span class="kwa">ByVal</span> n <span class="kwa">As</span> <span class="kwb">Integer</span><span class="sym">)</span> <span class="kwa">As</span> <span class="kwb">Integer</span>
  <span class="kwa">If</span> n <span class="sym">&lt;</span> <span class="num">2</span> <span class="kwa">Then</span> Return <span class="num">1</span>
  Return Fib<span class="sym">(</span>n<span class="sym">-</span><span class="num">2</span><span class="sym">) +</span> Fib<span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
<span class="kwa">End Function</span>

<span class="kwa">Function</span> FibFP<span class="sym">(</span><span class="kwa">ByVal</span> n <span class="kwa">As</span> Double<span class="sym">)</span> <span class="kwa">As</span> Double
  <span class="kwa">If</span> n <span class="sym">&lt;</span> <span class="num">2.0</span> <span class="kwa">Then</span> Return <span class="num">1.0</span>
  Return FibFP<span class="sym">(</span>n<span class="sym">-</span><span class="num">2.0</span><span class="sym">) +</span> FibFP<span class="sym">(</span>n<span class="sym">-</span><span class="num">1.0</span><span class="sym">)</span>
<span class="kwa">End Function</span>

<span class="kwa">Function</span> Tak<span class="sym">(</span><span class="kwa">ByVal</span> x <span class="kwa">As</span> <span class="kwb">Integer</span><span class="sym">,</span> <span class="kwa">ByVal</span> y <span class="kwa">As</span> <span class="kwb">Integer</span><span class="sym">,</span> <span class="kwa">ByVal</span> z <span class="kwa">As</span> <span class="kwb">Integer</span><span class="sym">)</span> <span class="kwa">As</span> <span class="kwb">Integer</span>
  <span class="kwa">If</span> y <span class="sym">&lt;</span> x <span class="kwa">Then</span> Return Tak<span class="sym">(</span> Tak<span class="sym">(</span>x<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">),</span> Tak<span class="sym">(</span>y<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> z<span class="sym">,</span> x<span class="sym">),</span> Tak<span class="sym">(</span>z<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">) )</span>
  Return z
<span class="kwa">End Function</span>

<span class="kwa">Function</span> TakFP<span class="sym">(</span><span class="kwa">ByVal</span> x <span class="kwa">As</span> Double<span class="sym">,</span> <span class="kwa">ByVal</span> y <span class="kwa">As</span> Double<span class="sym">,</span> <span class="kwa">ByVal</span> z <span class="kwa">As</span> Double<span class="sym">)</span> <span class="kwa">As</span> Double
  <span class="kwa">If</span> y <span class="sym">&lt;</span> x <span class="kwa">Then</span> Return TakFP<span class="sym">(</span> TakFP<span class="sym">(</span>x<span class="sym">-</span><span class="num">1.0</span><span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">),</span> TakFP<span class="sym">(</span>y<span class="sym">-</span><span class="num">1.0</span><span class="sym">,</span> z<span class="sym">,</span> x<span class="sym">),</span> TakFP<span class="sym">(</span>z<span class="sym">-</span><span class="num">1.0</span><span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">) )</span>
  Return z
<span class="kwa">End Function</span>

<span class="kwa">Dim</span> n <span class="kwa">As</span> <span class="kwb">Integer</span>

  n <span class="sym">=</span> Valint<span class="sym">(</span>Command$<span class="sym">(</span><span class="num">1</span><span class="sym">)) -</span> <span class="num">1</span>
  <span class="kwa">If</span> n <span class="sym">&lt;</span> <span class="num">1</span> <span class="kwa">Then</span> n <span class="sym">=</span> <span class="num">3</span>
  printf<span class="sym">(</span><span class="str">&quot;Ack(3,%d): %d\n&quot;</span><span class="sym">,</span> n<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> Ack<span class="sym">(</span><span class="num">3</span><span class="sym">,</span> n<span class="sym">+</span><span class="num">1</span><span class="sym">))</span>
  printf<span class="sym">(</span><span class="str">&quot;Fib(%.1f): %.1f\n&quot;</span><span class="sym">,</span> <span class="num">28.0</span><span class="sym">+</span>n<span class="sym">,</span> FibFP<span class="sym">(</span><span class="num">28.0</span><span class="sym">+</span>n<span class="sym">))</span>
  printf<span class="sym">(</span><span class="str">&quot;Tak(%d,%d,%d): %d\n&quot;</span><span class="sym">,</span> <span class="num">3</span><span class="sym">*</span>n<span class="sym">,</span> <span class="num">2</span><span class="sym">*</span>n<span class="sym">,</span> n<span class="sym">,</span> Tak<span class="sym">(</span><span class="num">3</span><span class="sym">*</span>n<span class="sym">,</span> <span class="num">2</span><span class="sym">*</span>n<span class="sym">,</span> n<span class="sym">))</span>
  printf<span class="sym">(</span><span class="str">&quot;Fib(3): %d\n&quot;</span><span class="sym">,</span> Fib<span class="sym">(</span><span class="num">3</span><span class="sym">))</span>
  printf<span class="sym">(</span><span class="str">&quot;Tak(3.0,2.0,1.0): %.1f\n&quot;</span><span class="sym">,</span> TakFP<span class="sym">(</span><span class="num">3.0</span><span class="sym">,</span> <span class="num">2.0</span><span class="sym">,</span> <span class="num">1.0</span><span class="sym">))</span>
