<span class="hl slc">;;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;; Derived from the Chicken variant by Sven Hartrumpf</span>
<span class="hl slc">;;; contributed by Matthew Flatt</span>

#lang scheme<span class="hl sym">/</span>base
<span class="hl sym">(</span>require scheme<span class="hl sym">/</span>cmdline<span class="hl sym">)</span>

<span class="hl sym">(</span>define-struct node <span class="hl sym">(</span>left val right<span class="hl sym">))</span>

<span class="hl slc">;; Instead of (define-struct leaf (val)):</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>make-leaf val<span class="hl sym">) (</span>make-node #f val #f<span class="hl sym">))</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>leaf? l<span class="hl sym">) (</span><span class="hl kwa">not</span> <span class="hl sym">(</span>node-left l<span class="hl sym">)))</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>leaf-val l<span class="hl sym">) (</span>node-val l<span class="hl sym">))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>make item d<span class="hl sym">)</span>
  <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(=</span> d <span class="hl num">0</span><span class="hl sym">)</span>
      <span class="hl sym">(</span>make-leaf item<span class="hl sym">)</span>
      <span class="hl sym">(</span>let <span class="hl sym">((</span>item2 <span class="hl sym">(*</span> item <span class="hl num">2</span><span class="hl sym">))</span>
            <span class="hl sym">(</span>d2 <span class="hl sym">(</span>- d <span class="hl num">1</span><span class="hl sym">)))</span>
        <span class="hl sym">(</span>make-node <span class="hl sym">(</span>make <span class="hl sym">(</span>- item2 <span class="hl num">1</span><span class="hl sym">)</span> d2<span class="hl sym">)</span> item <span class="hl sym">(</span>make item2 d2<span class="hl sym">)))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>check t<span class="hl sym">)</span>
  <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>leaf? t<span class="hl sym">)</span>
      <span class="hl sym">(</span>leaf-val t<span class="hl sym">)</span>
      <span class="hl sym">(+ (</span>node-val t<span class="hl sym">) (</span>- <span class="hl sym">(</span>check <span class="hl sym">(</span>node-left t<span class="hl sym">))</span>
                         <span class="hl sym">(</span>check <span class="hl sym">(</span>node-right t<span class="hl sym">))))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>main n<span class="hl sym">)</span>
  <span class="hl sym">(</span>let<span class="hl sym">* ((</span><span class="hl kwa">min</span>-depth <span class="hl num">4</span><span class="hl sym">)</span>
         <span class="hl sym">(</span><span class="hl kwa">max</span>-depth <span class="hl sym">(</span><span class="hl kwa">max</span> <span class="hl sym">(+</span> <span class="hl kwa">min</span>-depth <span class="hl num">2</span><span class="hl sym">)</span> n<span class="hl sym">)))</span>
    <span class="hl sym">(</span>let <span class="hl sym">((</span>stretch-depth <span class="hl sym">(+</span> <span class="hl kwa">max</span>-depth <span class="hl num">1</span><span class="hl sym">)))</span>
      <span class="hl sym">(</span>printf <span class="hl str">&quot;stretch tree of depth ~a</span><span class="hl esc">\t</span> <span class="hl str">check: ~a</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
              stretch-depth
              <span class="hl sym">(</span>check <span class="hl sym">(</span>make <span class="hl num">0</span> stretch-depth<span class="hl sym">))))</span>
    <span class="hl sym">(</span>let <span class="hl sym">((</span>long-lived-tree <span class="hl sym">(</span>make <span class="hl num">0</span> <span class="hl kwa">max</span>-depth<span class="hl sym">)))</span>
      <span class="hl sym">(</span>for <span class="hl sym">((</span>d <span class="hl sym">(</span>in-range <span class="hl num">4</span> <span class="hl sym">(</span>add1 <span class="hl kwa">max</span>-depth<span class="hl sym">)</span> <span class="hl num">2</span><span class="hl sym">)))</span>
        <span class="hl sym">(</span>let <span class="hl sym">((</span>iterations <span class="hl sym">(</span>arithmetic-shift <span class="hl num">1</span> <span class="hl sym">(+ (</span>- <span class="hl kwa">max</span>-depth d<span class="hl sym">)</span> <span class="hl kwa">min</span>-depth<span class="hl sym">))))</span>
          <span class="hl sym">(</span>printf <span class="hl str">&quot;~a</span><span class="hl esc">\t</span> <span class="hl str">trees of depth ~a</span><span class="hl esc">\t</span> <span class="hl str">check: ~a</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
                  <span class="hl sym">(*</span> <span class="hl num">2</span> iterations<span class="hl sym">)</span>
                  d
                  <span class="hl sym">(</span>for<span class="hl sym">/</span>fold <span class="hl sym">([</span>c <span class="hl num">0</span><span class="hl sym">])</span>
                            <span class="hl sym">([</span>i <span class="hl sym">(</span>in-range iterations<span class="hl sym">)])</span>
                    <span class="hl sym">(+</span> c
                       <span class="hl sym">(</span>check <span class="hl sym">(</span>make i d<span class="hl sym">))</span>
                       <span class="hl sym">(</span>check <span class="hl sym">(</span>make <span class="hl sym">(</span>- i<span class="hl sym">)</span> d<span class="hl sym">)))))))</span>
      <span class="hl sym">(</span>printf <span class="hl str">&quot;long lived tree of depth ~a</span><span class="hl esc">\t</span> <span class="hl str">check: ~a</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
              <span class="hl kwa">max</span>-depth
              <span class="hl sym">(</span>check long-lived-tree<span class="hl sym">)))))</span>

<span class="hl sym">(</span><span class="hl kwa">command</span>-<span class="hl kwa">line</span> #<span class="hl sym">:</span>args <span class="hl sym">(</span>n<span class="hl sym">)</span>
              <span class="hl sym">(</span>main <span class="hl sym">(</span>string-<span class="hl sym">&gt;</span>number n<span class="hl sym">)))</span>
