<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">-- contributed by Jed Brown with improvements by Spencer Janssen</span>

<span class="hl kwa">import</span> Control.Concurrent
<span class="hl kwa">import</span> Control.Monad
<span class="hl kwa">import</span> System.Environment

ringSize <span class="hl sym">=</span> <span class="hl num">503</span>

newThread l i <span class="hl sym">=</span> <span class="hl kwa">do</span>
  r <span class="hl sym">&lt;-</span> newEmptyMVar
  forkIO <span class="hl sym">(</span>thread i l r<span class="hl sym">)</span>
  return r

thread <span class="hl sym">::</span> <span class="hl kwb">Int</span> <span class="hl sym">-&gt;</span> MVar <span class="hl kwb">Int</span> <span class="hl sym">-&gt;</span> MVar <span class="hl kwb">Int</span> <span class="hl sym">-&gt;</span> IO <span class="hl sym">()</span>
thread i l r <span class="hl sym">=</span> <span class="hl kwa">do</span>
  m <span class="hl sym">&lt;-</span> takeMVar l
  when <span class="hl sym">(</span>m <span class="hl sym">==</span> <span class="hl num">1</span><span class="hl sym">) (</span>print i<span class="hl sym">)</span>
  putMVar r $<span class="hl sym">!</span> max <span class="hl num">0</span> <span class="hl sym">(</span>m <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span>
  when <span class="hl sym">(</span>m <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">) (</span>thread i l r<span class="hl sym">)</span>

main <span class="hl sym">=</span> <span class="hl kwa">do</span>
    a <span class="hl sym">&lt;-</span> newMVar . read . head <span class="hl sym">=&lt;&lt;</span> getArgs
    z <span class="hl sym">&lt;-</span> foldM newThread a <span class="hl sym">[</span><span class="hl num">2</span>..ringSize<span class="hl sym">]</span>
    thread <span class="hl num">1</span> z a
