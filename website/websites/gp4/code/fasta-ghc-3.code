<span class="hl com">{-# OPTIONS_GHC -O2 -funbox-strict-fields #-}</span>
<span class="hl slc">-- The Great Computer Language Shootout</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">-- contributed by Jeff Newbern</span>
<span class="hl slc">-- Modified to fastest.hs by Chris Kuklewicz, 6 Jan 2006</span>
<span class="hl slc">-- Modified to fixed-fasta.hs by Chris Kuklewicz, 17 Jan 2006</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Uses random generation code derived from Simon Marlow and Einar</span>
<span class="hl slc">-- Karttunen's &quot;random&quot; test entry.  No longer uses Double during run,</span>
<span class="hl slc">-- everything has been pre-converted to Int.  And pre-converted to a</span>
<span class="hl slc">-- binary tree for lookup.  Ideally this tree could be constructed</span>
<span class="hl slc">-- with the probabilities in mind, but it isn't in this version.</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Compile with ghc --make resub-fasta.hs -o resub-fasta.ghc_run</span>
<span class="hl slc">-- Run with &quot;./rsub-fasta.ghc_run %A&quot; where %A is the parameter</span>

<span class="hl kwa">import</span> Control.Monad
<span class="hl kwa">import</span> Data.<span class="hl kwb">Char</span><span class="hl sym">(</span>chr<span class="hl sym">,</span>ord<span class="hl sym">)</span>
<span class="hl kwa">import</span> Data.List<span class="hl sym">(</span>mapAccumL<span class="hl sym">)</span>
<span class="hl kwa">import</span> Data.Word<span class="hl sym">(</span>Word8<span class="hl sym">)</span>
<span class="hl kwa">import</span> Data.IORef
<span class="hl kwa">import</span> Foreign
<span class="hl kwa">import</span> System<span class="hl sym">(</span>getArgs<span class="hl sym">)</span>
<span class="hl kwa">import</span> System.IO

<span class="hl kwa">type</span> Base <span class="hl sym">=</span> Word8
<span class="hl kwa">data</span> BaseFrequencyTree <span class="hl sym">=</span> Node <span class="hl sym">!</span>Base
                       <span class="hl sym">|</span> TreeNodes <span class="hl sym">!</span><span class="hl kwb">Int</span> <span class="hl sym">!</span>Base <span class="hl sym">!</span>Base
                       <span class="hl sym">|</span> Tree <span class="hl sym">!</span><span class="hl kwb">Int</span> <span class="hl sym">!</span>BaseFrequencyTree <span class="hl sym">!</span>BaseFrequencyTree
<span class="hl kwa">data</span> Seed <span class="hl sym">=</span> Seed <span class="hl sym">!</span><span class="hl kwb">Int</span>

b2c <span class="hl sym">::</span> Word8 <span class="hl sym">-&gt;</span> <span class="hl kwb">Char</span>
b2c <span class="hl sym">=</span> chr . fromEnum
c2b <span class="hl sym">=</span> toEnum . ord

alu <span class="hl sym">=</span> <span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span> <span class="hl sym">++</span>
      <span class="hl str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span> <span class="hl sym">++</span>
      <span class="hl str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span> <span class="hl sym">++</span>
      <span class="hl str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span> <span class="hl sym">++</span>
      <span class="hl str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span> <span class="hl sym">++</span>
      <span class="hl str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span> <span class="hl sym">++</span>
      <span class="hl str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>

im <span class="hl sym">=</span> <span class="hl num">139968</span> <span class="hl sym">::</span> <span class="hl kwb">Double</span>

iub <span class="hl sym">=</span> mkTree $ snd . mapAccumL <span class="hl sym">(</span>\rt <span class="hl sym">(</span>c<span class="hl sym">,</span>f<span class="hl sym">) -&gt; (</span>f<span class="hl sym">+</span>rt<span class="hl sym">,(</span>c2b c<span class="hl sym">,</span>ceiling $ im<span class="hl sym">*(</span>f<span class="hl sym">+</span>rt<span class="hl sym">))))</span> <span class="hl num">0.0</span> $
  <span class="hl sym">[ (</span>'a'<span class="hl sym">,</span> <span class="hl num">0.27</span><span class="hl sym">), (</span>'c'<span class="hl sym">,</span> <span class="hl num">0.12</span><span class="hl sym">), (</span>'g'<span class="hl sym">,</span> <span class="hl num">0.12</span><span class="hl sym">), (</span>'t'<span class="hl sym">,</span> <span class="hl num">0.27</span><span class="hl sym">), (</span>'B'<span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">),</span>
    <span class="hl sym">(</span>'D'<span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">), (</span>'H'<span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">), (</span>'K'<span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">), (</span>'M'<span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">), (</span>'N'<span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">),</span>
    <span class="hl sym">(</span>'R'<span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">), (</span>'S'<span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">), (</span>'V'<span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">), (</span>'W'<span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">), (</span>'Y'<span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">) ]</span>

homosapiens <span class="hl sym">=</span>  mkTree $ snd . mapAccumL <span class="hl sym">(</span>\rt <span class="hl sym">(</span>c<span class="hl sym">,</span>f<span class="hl sym">) -&gt; (</span>f<span class="hl sym">+</span>rt<span class="hl sym">,(</span>c2b c<span class="hl sym">,</span>ceiling $ im<span class="hl sym">*(</span>f<span class="hl sym">+</span>rt<span class="hl sym">))))</span> <span class="hl num">0.0</span> $
  <span class="hl sym">[ (</span>'a'<span class="hl sym">,</span> <span class="hl num">0.3029549426680</span><span class="hl sym">), (</span>'c'<span class="hl sym">,</span> <span class="hl num">0.1979883004921</span><span class="hl sym">), (</span>'g'<span class="hl sym">,</span> <span class="hl num">0.1975473066391</span><span class="hl sym">), (</span>'t'<span class="hl sym">,</span> <span class="hl num">0.3015094502008</span><span class="hl sym">) ]</span>

mkTree <span class="hl sym">[(</span>b<span class="hl sym">,</span>_<span class="hl sym">)] =</span> Node b
mkTree <span class="hl sym">[(</span>b<span class="hl sym">,</span>f<span class="hl sym">),(</span>b'<span class="hl sym">,</span>_<span class="hl sym">)] =</span> TreeNodes f b b'
mkTree xs <span class="hl sym">=</span> <span class="hl kwa">let</span> <span class="hl sym">(</span>h<span class="hl sym">,</span>t<span class="hl sym">) =</span> splitAt <span class="hl sym">(</span>length xs `div` <span class="hl num">2</span><span class="hl sym">)</span> xs
                <span class="hl sym">(</span>_<span class="hl sym">,</span>f<span class="hl sym">) =</span> last h
            <span class="hl kwa">in</span> Tree f <span class="hl sym">(</span>mkTree h<span class="hl sym">) (</span>mkTree t<span class="hl sym">)</span>

chooseBase <span class="hl sym">(</span>Node b<span class="hl sym">)</span> _ <span class="hl sym">=</span> b
chooseBase <span class="hl sym">(</span>TreeNodes f b b'<span class="hl sym">)</span> p <span class="hl sym">=</span> if <span class="hl sym">(</span>p<span class="hl sym">&lt;</span>f<span class="hl sym">)</span> <span class="hl kwa">then</span> b <span class="hl kwa">else</span> b'
chooseBase <span class="hl sym">(</span>Tree f l r<span class="hl sym">)</span> p <span class="hl sym">|</span> p <span class="hl sym">&lt;</span> f     <span class="hl sym">=</span> chooseBase l p
                          <span class="hl sym">|</span> otherwise <span class="hl sym">=</span> chooseBase r p

writeFastaHeader label title <span class="hl sym">=  (</span>putStrLn <span class="hl sym">((</span>'<span class="hl sym">&gt;</span>'<span class="hl sym">:</span>label<span class="hl sym">) ++ (</span>' '<span class="hl sym">:</span>title<span class="hl sym">)))</span>
perLine <span class="hl sym">=</span> <span class="hl num">60</span>

writeAluBuffer total <span class="hl sym">=</span> <span class="hl kwa">do</span>
  <span class="hl kwa">let</span> l <span class="hl sym">=</span> length alu
      bufSize <span class="hl sym">=</span> l <span class="hl sym">+</span> perLine <span class="hl sym">-</span> <span class="hl num">1</span>
  aluBuf <span class="hl sym">&lt;-</span> mallocArray bufSize
  foldM_ <span class="hl sym">(</span>\ptr c <span class="hl sym">-&gt;</span> poke ptr <span class="hl sym">(</span>c2b c<span class="hl sym">) &gt;&gt;</span> return <span class="hl sym">(</span>advancePtr ptr <span class="hl num">1</span><span class="hl sym">))</span> aluBuf <span class="hl sym">(</span>take bufSize <span class="hl sym">(</span>cycle alu<span class="hl sym">))</span>
  <span class="hl kwa">let</span> <span class="hl sym">(</span>full<span class="hl sym">,</span>end<span class="hl sym">) =</span> total `divMod` perLine
      fullLine n <span class="hl sym">=</span> <span class="hl kwa">let</span> ptr <span class="hl sym">=</span> advancePtr aluBuf <span class="hl sym">((</span>n <span class="hl sym">*</span> perLine<span class="hl sym">)</span> `mod` l<span class="hl sym">)</span>
                   <span class="hl kwa">in</span> hPutBuf stdout ptr perLine <span class="hl sym">&gt;&gt;</span> hPutChar stdout '\n'
      lastLine <span class="hl sym">=</span> <span class="hl kwa">let</span> ptr <span class="hl sym">=</span> advancePtr aluBuf <span class="hl sym">((</span>full<span class="hl sym">*</span>perLine<span class="hl sym">)</span> `mod` l<span class="hl sym">)</span>
                 <span class="hl kwa">in</span> hPutBuf stdout ptr end <span class="hl sym">&gt;&gt;</span> hPutChar stdout '\n'
  mapM_ fullLine <span class="hl sym">[</span><span class="hl num">0</span>..pred full<span class="hl sym">]</span>
  when <span class="hl sym">(</span>end<span class="hl sym">&gt;</span><span class="hl num">0</span><span class="hl sym">)</span> lastLine

writeWrapped total trans initSeed <span class="hl sym">=</span> <span class="hl kwa">do</span>
  seedRef <span class="hl sym">&lt;-</span> newIORef initSeed
  <span class="hl kwa">let</span> l <span class="hl sym">=</span> succ perLine
      <span class="hl sym">(</span>im<span class="hl sym">,</span>ia<span class="hl sym">,</span>ic<span class="hl sym">)=(</span><span class="hl num">139968</span><span class="hl sym">,</span><span class="hl num">3877</span><span class="hl sym">,</span><span class="hl num">29573</span><span class="hl sym">)</span>
      nextSeed <span class="hl sym">(</span>Seed s<span class="hl sym">) =</span> Seed <span class="hl sym">( (</span>s <span class="hl sym">*</span> ia <span class="hl sym">+</span> ic<span class="hl sym">)</span> `mod` im <span class="hl sym">)</span>
      prng <span class="hl sym">=</span> <span class="hl kwa">do</span> newSeed <span class="hl sym">&lt;-</span> return.nextSeed <span class="hl sym">=&lt;&lt;</span> readIORef seedRef
                writeIORef seedRef newSeed
                return newSeed
  buf <span class="hl sym">&lt;-</span> mallocArray l
  poke <span class="hl sym">(</span>advancePtr buf perLine<span class="hl sym">) (</span>c2b '\n'<span class="hl sym">)</span>
  <span class="hl kwa">let</span> <span class="hl sym">(</span>full<span class="hl sym">,</span>end<span class="hl sym">) =</span> total `divMod` perLine
      fill <span class="hl num">0</span> _   <span class="hl sym">=</span> return <span class="hl sym">()</span>
      fill i ptr <span class="hl sym">=</span> <span class="hl kwa">do</span> <span class="hl sym">(</span>Seed b<span class="hl sym">) &lt;-</span> prng
                      poke ptr <span class="hl sym">(</span>trans b<span class="hl sym">)</span>
                      fill <span class="hl sym">(</span>pred i<span class="hl sym">) (</span>advancePtr ptr <span class="hl num">1</span><span class="hl sym">)</span>
      fullLine <span class="hl sym">=</span> <span class="hl kwa">do</span> fill perLine buf
                    hPutBuf stdout buf l
      lastLine <span class="hl sym">=</span> <span class="hl kwa">do</span> fill end buf
                    poke <span class="hl sym">(</span>advancePtr buf end<span class="hl sym">) (</span>c2b '\n'<span class="hl sym">)</span>
                    hPutBuf stdout buf <span class="hl sym">(</span>succ end<span class="hl sym">)</span>
  replicateM_ full fullLine
  when <span class="hl sym">(</span>end<span class="hl sym">&gt;</span><span class="hl num">0</span><span class="hl sym">)</span> lastLine
  readIORef seedRef

main <span class="hl sym">=</span> <span class="hl kwa">do</span> args <span class="hl sym">&lt;-</span> getArgs
          <span class="hl kwa">let</span> n <span class="hl sym">=</span> if null args <span class="hl kwa">then</span> <span class="hl num">2500000</span> <span class="hl kwa">else</span> read <span class="hl sym">(</span>head args<span class="hl sym">)</span>
          writeFastaHeader <span class="hl str">&quot;ONE&quot;</span> <span class="hl str">&quot;Homo sapiens alu&quot;</span>
          writeAluBuffer <span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>n<span class="hl sym">)</span>
          writeFastaHeader <span class="hl str">&quot;TWO&quot;</span> <span class="hl str">&quot;IUB ambiguity codes&quot;</span>
          seed' <span class="hl sym">&lt;-</span> writeWrapped <span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">*</span>n<span class="hl sym">) (</span>chooseBase iub<span class="hl sym">) (</span>Seed <span class="hl num">42</span><span class="hl sym">)</span>
          writeFastaHeader <span class="hl str">&quot;THREE&quot;</span> <span class="hl str">&quot;Homo sapiens frequency&quot;</span>
          writeWrapped <span class="hl sym">(</span><span class="hl num">5</span><span class="hl sym">*</span>n<span class="hl sym">) (</span>chooseBase homosapiens<span class="hl sym">)</span> seed'
