<span class="hl com">&quot;* The Computer Language Benchmarks Game</span>
<span class="hl com">    http://shootout.alioth.debian.org/</span>
<span class="hl com">    contributed by Isaac Gouy</span>
<span class="hl com">    modified by Eliot Miranda *&quot;</span><span class="hl sym">!</span>

<span class="hl com">&quot;* SPLITFILE=nsievebits.st *&quot;</span><span class="hl sym">!</span>

Object subclass<span class="hl sym">:#</span>Tests
   instanceVariableNames<span class="hl sym">:</span><span class="hl str">''</span>
   classVariableNames<span class="hl sym">:</span><span class="hl str">''</span>
   poolDictionaries<span class="hl sym">:</span><span class="hl str">''</span>
   category<span class="hl sym">:</span><span class="hl str">'benchmarks-game'</span>
<span class="hl sym">!</span>

<span class="hl sym">!</span>Tests class methodsFor<span class="hl sym">:</span> <span class="hl str">'benchmarks-game'</span><span class="hl sym">!</span>main   <span class="hl sym">|</span> n <span class="hl sym">|</span>   n <span class="hl sym">:=</span> Smalltalk commandLineArguments last asNumber<span class="hl sym">.   (</span>n <span class="hl sym">&lt;</span> <span class="hl num">2</span><span class="hl sym">)</span> ifTrue<span class="hl sym">: [</span>n <span class="hl sym">:=</span> <span class="hl num">2</span><span class="hl sym">].</span>   <span class="hl kwa">self</span> primeBenchmarkFor<span class="hl sym">:</span> n to<span class="hl sym">:</span> Stdout using<span class="hl sym">:</span> BitArray<span class="hl sym">!</span>
nsieve<span class="hl sym">:</span> n using<span class="hl sym">:</span> arrayClass    <span class="hl sym">|</span> count isPrime <span class="hl sym">|</span>   count <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">.</span>   isPrime <span class="hl sym">:=</span> arrayClass new<span class="hl sym">:</span> n withAll<span class="hl sym">:</span> <span class="hl num">1</span><span class="hl sym">.</span>   <span class="hl num">2</span> to<span class="hl sym">:</span> n do<span class="hl sym">:      [:</span>i <span class="hl sym">|       (</span><span class="hl num">1</span> <span class="hl sym">== (</span>isPrime at<span class="hl sym">:</span> i<span class="hl sym">))</span> ifTrue<span class="hl sym">:          [</span>i <span class="hl sym">+</span> i to<span class="hl sym">:</span> n by<span class="hl sym">:</span> i do<span class="hl sym">:            [:</span>k <span class="hl sym">|</span> isPrime at<span class="hl sym">:</span> k put<span class="hl sym">:</span> <span class="hl num">0</span><span class="hl sym">].</span>         count <span class="hl sym">:=</span> count <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">]].   ^</span>count
<span class="hl sym">!</span>primeBenchmarkFor<span class="hl sym">:</span> v to<span class="hl sym">:</span> output using<span class="hl sym">:</span> arrayClass   v to<span class="hl sym">:</span> v <span class="hl sym">-</span> <span class="hl num">2</span> by<span class="hl sym">: -</span><span class="hl num">1</span> do<span class="hl sym">:      [:</span>n<span class="hl sym">| |</span> m <span class="hl sym">|</span>      m <span class="hl sym">:= (</span><span class="hl num">2</span> raisedTo<span class="hl sym">:</span> n<span class="hl sym">) *</span> <span class="hl num">10000</span><span class="hl sym">.</span>      output nextPutAll<span class="hl sym">:</span> <span class="hl str">'Primes up to '</span><span class="hl sym">.</span>
      m printOn<span class="hl sym">:</span> output paddedWith<span class="hl sym">: $</span> to<span class="hl sym">:</span> <span class="hl num">8</span> base<span class="hl sym">:</span> <span class="hl num">10</span><span class="hl sym">.</span>
      <span class="hl sym">(</span><span class="hl kwa">self</span> nsieve<span class="hl sym">:</span> m using<span class="hl sym">:</span> arrayClass<span class="hl sym">)</span> printOn<span class="hl sym">:</span> output paddedWith<span class="hl sym">: $</span>  to<span class="hl sym">:</span> <span class="hl num">9</span> base<span class="hl sym">:</span> <span class="hl num">10</span><span class="hl sym">.</span>
      output cr
      <span class="hl sym">]</span>
<span class="hl sym">! !</span>

