<span class="slc">-- The Great Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">-- contributed by Don Stewart, translation from the C version</span>

<span class="kwa">import</span> Control.Monad
<span class="kwa">import</span> Foreign
<span class="kwa">import</span> System
<span class="kwa">import</span> GHC.Base
<span class="kwa">import</span> GHC.Ptr
<span class="kwa">import</span> GHC.IOBase

main <span class="sym">=</span> <span class="kwa">do</span>
    n <span class="sym">&lt;-</span> getArgs <span class="sym">&gt;&gt;=</span> return . read . head
    k <span class="sym">&lt;-</span> if n <span class="sym">&lt;</span> <span class="num">1</span> <span class="kwa">then</span> return <span class="sym">(</span><span class="num">0</span><span class="sym">::</span><span class="kwb">Int</span><span class="sym">)</span> <span class="kwa">else</span> fannkuch n
    putStrLn $ <span class="str">&quot;Pfannkuchen(&quot;</span> <span class="sym">++</span> show n <span class="sym">++</span> <span class="str">&quot;) = &quot;</span> <span class="sym">++</span> show <span class="sym">(</span>k <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span>

fannkuch n&#64;<span class="sym">(</span>I# n#<span class="sym">) =</span> <span class="kwa">do</span>
    perm            <span class="sym">&lt;-</span> mallocArray n       <span class="sym">::</span> IO <span class="sym">(</span>Ptr <span class="kwb">Int</span><span class="sym">)</span>
    <span class="sym">(</span>Ptr c#<span class="sym">)        &lt;-</span> mallocArray n       <span class="sym">::</span> IO <span class="sym">(</span>Ptr <span class="kwb">Int</span><span class="sym">)</span>
    perm1&#64;<span class="sym">(</span>Ptr p1#<span class="sym">) &lt;-</span> newArray <span class="sym">[</span><span class="num">0</span> .. n<span class="sym">-</span><span class="num">1</span><span class="sym">] ::</span> IO <span class="sym">(</span>Ptr <span class="kwb">Int</span><span class="sym">)</span>
    <span class="sym">(</span>Ptr rP<span class="sym">)        &lt;-</span> newArray <span class="sym">[</span>n<span class="sym">]        ::</span> IO <span class="sym">(</span>Ptr <span class="kwb">Int</span><span class="sym">)</span>
    <span class="sym">(</span>Ptr flipsMaxP<span class="sym">) &lt;-</span> newArray <span class="sym">[</span><span class="num">0</span><span class="sym">]        ::</span> IO <span class="sym">(</span>Ptr <span class="kwb">Int</span><span class="sym">)</span>

    <span class="kwa">let</span> go didpr <span class="sym">=</span> <span class="kwa">do</span>
            didpr<span class="str">' &lt;- if didpr &lt; (30 :: Int)</span>
<span class="str">                      then ppr 0 n perm1 &gt;&gt; putStr &quot;\n&quot; &gt;&gt; return (didpr + 1)</span>
<span class="str">                      else return didpr</span>
<span class="str"></span>
<span class="str">            IO $ \s -&gt;</span>
<span class="str">                case readIntOffAddr# rP 0# s of</span>
<span class="str">                    (# s, r# #) -&gt; case setcount c# r# s of</span>
<span class="str">                        (# s, _ #) -&gt; case writeIntOffAddr# rP 0# 1# s of</span>
<span class="str">                            s -&gt; (# s, () #)</span>
<span class="str"></span>
<span class="str">            t &lt;- IO $ \s -&gt;</span>
<span class="str">                case readIntOffAddr# p1# 0# s of</span>
<span class="str">                    (# s, p1 #) -&gt; case readIntOffAddr# p1# (n# -# 1#) s of</span>
<span class="str">                        (# s, pn #) -&gt; (# s, not (p1 ==# 0# || pn ==# (n# -# 1#)) #)</span>
<span class="str"></span>
<span class="str">            when t $ exchange n perm perm1 flipsMaxP</span>
<span class="str"></span>
<span class="str">            fm   &lt;- IO $ \s -&gt; case readIntOffAddr# flipsMaxP 0# s of</span>
<span class="str">                                (# s, x #) -&gt; (# s, I# x #)</span>
<span class="str">            done &lt;- IO $ \s -&gt; rot rP n# p1# c# s</span>
<span class="str">            if done then return fm else go didpr'</span>
    go <span class="num">0</span>

<span class="slc">------------------------------------------------------------------------</span>

exchange n p&#64;<span class="sym">(</span>Ptr a<span class="sym">)</span> p1&#64;<span class="sym">(</span>Ptr b<span class="sym">)</span> fm <span class="sym">=</span> <span class="kwa">do</span>
    copyArray <span class="sym">(</span>p `advancePtr` <span class="num">1</span><span class="sym">) (</span>p1 `advancePtr` <span class="num">1</span><span class="sym">) (</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
    IO $ \s <span class="sym">-&gt;</span>
        <span class="kwa">case</span> readIntOffAddr# b <span class="num">0</span># s  <span class="kwa">of</span> { <span class="sym">(</span># s<span class="sym">,</span> k #<span class="sym">) -&gt;</span>
        <span class="kwa">case</span> doswap k a <span class="num">0</span># s         <span class="kwa">of</span> { <span class="sym">(</span># s<span class="sym">,</span> f #<span class="sym">) -&gt;</span>
        <span class="kwa">case</span> readIntOffAddr# fm <span class="num">0</span># s <span class="kwa">of</span> { <span class="sym">(</span># s<span class="sym">,</span> m #<span class="sym">) -&gt;</span>
        if m <span class="sym">&lt;</span># f <span class="kwa">then case</span> writeIntOffAddr# fm <span class="num">0</span># f s <span class="kwa">of</span> s <span class="sym">-&gt; (</span># s<span class="sym">, ()</span> #<span class="sym">)</span>
                  <span class="kwa">else</span> <span class="sym">(</span># s<span class="sym">, ()</span> #<span class="sym">)</span>
        } } }
<span class="com">{-# INLINE exchange #-}</span>

doswap k a f s <span class="sym">=</span>
    <span class="kwa">case</span> swap <span class="num">1</span># <span class="sym">(</span>k <span class="sym">-</span># <span class="num">1</span>#<span class="sym">)</span> a s    <span class="kwa">of</span> { <span class="sym">(</span># s<span class="sym">,</span> _ #<span class="sym">) -&gt;</span>
    <span class="kwa">case</span> readIntOffAddr# a k s    <span class="kwa">of</span> { <span class="sym">(</span># s<span class="sym">,</span> j #<span class="sym">) -&gt;</span>
    <span class="kwa">case</span> writeIntOffAddr# a k k s <span class="kwa">of</span> { s          <span class="sym">-&gt;</span>
    if k <span class="sym">/=</span># <span class="num">0</span># <span class="kwa">then</span> doswap j a <span class="sym">(</span>f <span class="sym">+</span># <span class="num">1</span>#<span class="sym">)</span> s <span class="kwa">else</span> <span class="sym">(</span># s<span class="sym">, (</span>f <span class="sym">+</span># <span class="num">1</span>#<span class="sym">)</span> #<span class="sym">)</span>
    } } }
<span class="com">{-# INLINE doswap #-}</span>

swap i j a s <span class="sym">=</span>
    if i <span class="sym">&lt;</span># j <span class="kwa">then case</span> readIntOffAddr#  a i s   <span class="kwa">of</span> { <span class="sym">(</span># s<span class="sym">,</span> x #<span class="sym">) -&gt;</span>
                   <span class="kwa">case</span> readIntOffAddr#  a j s   <span class="kwa">of</span> { <span class="sym">(</span># s<span class="sym">,</span> y #<span class="sym">) -&gt;</span>
                   <span class="kwa">case</span> writeIntOffAddr# a j x s <span class="kwa">of</span> { s          <span class="sym">-&gt;</span>
                   <span class="kwa">case</span> writeIntOffAddr# a i y s <span class="kwa">of</span> { s          <span class="sym">-&gt;</span>
                   swap <span class="sym">(</span>i <span class="sym">+</span># <span class="num">1</span>#<span class="sym">) (</span>j <span class="sym">-</span># <span class="num">1</span>#<span class="sym">)</span> a s
                   } } } }
              <span class="kwa">else</span> <span class="sym">(</span># s<span class="sym">, ()</span> #<span class="sym">)</span>
<span class="com">{-# INLINE swap #-}</span>

loop r i a s <span class="sym">=</span>
    if i <span class="sym">&lt;</span># r <span class="kwa">then case</span> readIntOffAddr# a <span class="sym">(</span>i <span class="sym">+</span># <span class="num">1</span>#<span class="sym">)</span> s <span class="kwa">of</span>
                    <span class="sym">(</span># s<span class="sym">,</span> x #<span class="sym">) -&gt;</span> <span class="kwa">case</span> writeIntOffAddr# a i x s <span class="kwa">of</span>
                        s <span class="sym">-&gt;</span> loop r <span class="sym">(</span>i <span class="sym">+</span># <span class="num">1</span>#<span class="sym">)</span> a s
              <span class="kwa">else</span> <span class="sym">(</span># s<span class="sym">, ()</span> #<span class="sym">)</span>
<span class="com">{-# INLINE loop #-}</span>

setcount p r s <span class="sym">=</span>
    if r <span class="sym">==</span># <span class="num">1</span># <span class="kwa">then</span> <span class="sym">(</span># s<span class="sym">, ()</span> #<span class="sym">)</span>
                <span class="kwa">else case</span> writeIntOffAddr# p <span class="sym">(</span>r <span class="sym">-</span># <span class="num">1</span>#<span class="sym">)</span> r s <span class="kwa">of</span>
                        s <span class="sym">-&gt;</span> setcount p <span class="sym">(</span>r <span class="sym">-</span># <span class="num">1</span>#<span class="sym">)</span> s
<span class="com">{-# INLINE setcount #-}</span>

rot rP n a cp s <span class="sym">=</span>
  <span class="kwa">case</span> readIntOffAddr# rP <span class="num">0</span># s <span class="kwa">of</span> { <span class="sym">(</span># s<span class="sym">,</span> r #<span class="sym">) -&gt;</span>
  if r <span class="sym">==</span># n <span class="kwa">then</span> <span class="sym">(</span># s<span class="sym">,</span> <span class="kwa">True</span> #<span class="sym">)</span>
             <span class="kwa">else case</span> readIntOffAddr# a <span class="num">0</span># s             <span class="kwa">of</span> { <span class="sym">(</span># s<span class="sym">,</span> p0 #<span class="sym">) -&gt;</span>
                  <span class="kwa">case</span> loop r <span class="num">0</span># a s                      <span class="kwa">of</span> { <span class="sym">(</span># s<span class="sym">,</span> _ #<span class="sym">)  -&gt;</span>
                  <span class="kwa">case</span> writeIntOffAddr# a r p0 s          <span class="kwa">of</span> { s           <span class="sym">-&gt;</span>
                  <span class="kwa">case</span> readIntOffAddr# cp r s             <span class="kwa">of</span> { <span class="sym">(</span># s<span class="sym">,</span> cr #<span class="sym">) -&gt;</span>
                  <span class="kwa">case</span> writeIntOffAddr# cp r <span class="sym">(</span>cr <span class="sym">-</span># <span class="num">1</span>#<span class="sym">)</span> s <span class="kwa">of</span> { s           <span class="sym">-&gt;</span>
                  if cr <span class="sym">-</span># <span class="num">1</span># <span class="sym">&gt;</span># <span class="num">0</span># <span class="kwa">then</span> <span class="sym">(</span># s<span class="sym">,</span> <span class="kwa">False</span> #<span class="sym">)</span>
   output left <span class="kwa">in</span> <span class="sym">-</span>
                                 <span class="kwa">else case</span> inc s <span class="kwa">of</span> s <span class="sym">-&gt;</span> rot rP n a cp s
  } } } } } }
  <span class="kwa">where</span> inc s <span class="sym">=</span> <span class="kwa">case</span> readIntOffAddr# rP <span class="num">0</span># s <span class="kwa">of</span>
                  <span class="sym">(</span># s<span class="sym">,</span> x #<span class="sym">) -&gt;</span> writeIntOffAddr# rP <span class="num">0</span># <span class="sym">(</span>x <span class="sym">+</span># <span class="num">1</span>#<span class="sym">)</span> s
<span class="com">{-# INLINE rot #-}</span>

ppr i n p <span class="sym">=</span> when <span class="sym">(</span>i <span class="sym">&lt;</span> n<span class="sym">)</span> $ <span class="kwa">do</span>
    putStr . show . <span class="sym">(+</span><span class="num">1</span><span class="sym">) =&lt;&lt;</span> peek <span class="sym">(</span>p `advancePtr` i<span class="sym">)</span>
    ppr <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> n p

