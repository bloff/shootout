<span class="slc">\ The Great Computer Language Shootout</span>
<span class="slc">\ http://shootout.alioth.debian.org/</span>

<span class="slc">\ contributed by Ian Osgood</span>

<span class="slc">\ read NUM from last command line argument</span>
<span class="num">0</span><span class="sym">.</span> argc <span class="sym">&#64;</span> <span class="num">1</span><span class="sym">-</span> arg <span class="sym">&gt;</span>number <span class="num">2</span><span class="kwa">drop drop constant</span> NUM

<span class="slc">\ return element i,j of infinite matrix A</span>
<span class="sym">:</span> A<span class="sym">&#64;</span> <span class="com">( i j -- f )</span>
  <span class="kwa">over</span> <span class="sym">+</span> <span class="kwa">dup</span> <span class="num">1</span><span class="sym">+ *</span> <span class="num">2</span><span class="sym">/ +</span> <span class="num">1</span><span class="sym">+</span>  s<span class="sym">&gt;</span>d d<span class="sym">&gt;</span>f <span class="num">1</span><span class="sym">/</span>f <span class="sym">;</span>

<span class="slc">\ multiply vector by matrix A</span>
<span class="sym">:</span> A<span class="sym">*</span> <span class="com">( out in -- )</span>
  NUM <span class="num">0</span> <span class="kwa">do</span>  <span class="num">0</span>e
    NUM <span class="num">0</span> <span class="kwa">do  dup i</span> floats <span class="sym">+</span> f<span class="sym">&#64;</span> <span class="kwa">j i</span> A<span class="sym">&#64;</span> f<span class="sym">*</span> f<span class="sym">+</span>  <span class="kwa">loop</span>
    <span class="kwa">over i</span> floats <span class="sym">+</span> f<span class="sym">!</span>
  <span class="kwa">loop</span> <span class="num">2</span><span class="kwa">drop</span> <span class="sym">;</span>

<span class="slc">\ multiply vector by matrix A transposed</span>
<span class="sym">:</span> At<span class="sym">*</span> <span class="com">( out in -- )</span>
  NUM <span class="num">0</span> <span class="kwa">do</span>  <span class="num">0</span>e
    NUM <span class="num">0</span> <span class="kwa">do  dup i</span> floats <span class="sym">+</span> f<span class="sym">&#64;</span> <span class="kwa">i j</span> A<span class="sym">&#64;</span> f<span class="sym">*</span> f<span class="sym">+</span>  <span class="kwa">loop</span>
    <span class="kwa">over i</span> floats <span class="sym">+</span> f<span class="sym">!</span>
  <span class="kwa">loop</span> <span class="num">2</span><span class="kwa">drop</span> <span class="sym">;</span>

<span class="slc">\ composition of A* and At*</span>
<span class="sym">:</span> AtA<span class="sym">*</span> <span class="com">( out in -- )</span> falign <span class="kwa">here dup rot</span> A<span class="sym">*</span> At<span class="sym">* ;</span>

<span class="sym">:</span> <span class="num">1</span>efill <span class="com">( n -- )</span> <span class="num">0</span> <span class="kwa">do</span> <span class="num">1</span>e f<span class="sym">,</span> <span class="kwa">loop</span> <span class="sym">;</span>
falign <span class="kwa">create</span> u NUM <span class="num">1</span>efill           <span class="slc">\ unit vector</span>
falign <span class="kwa">create</span> v NUM floats <span class="kwa">allot</span>

<span class="sym">:</span> approx <span class="com">( -- f )</span>
  <span class="num">10 0</span> <span class="kwa">do</span>  v u AtA<span class="sym">*</span>  u v AtA<span class="sym">*</span>  <span class="kwa">loop</span>  <span class="slc">\ power method</span>
  <span class="num">0</span>e <span class="num">0</span>e <span class="com">( vBv vv )</span>
  NUM <span class="num">0</span> <span class="kwa">do</span>
    fswap u <span class="kwa">i</span> floats <span class="sym">+</span> f<span class="sym">&#64;</span> v <span class="kwa">i</span> floats <span class="sym">+</span> f<span class="sym">&#64;</span> f<span class="sym">*</span> f<span class="sym">+</span>
    fswap v <span class="kwa">i</span> floats <span class="sym">+</span> f<span class="sym">&#64;</span> fdup f<span class="sym">*</span> f<span class="sym">+</span>
  <span class="kwa">loop</span>
  f<span class="sym">/</span> fsqrt <span class="sym">;</span>

<span class="sym">:</span> ff<span class="sym">.</span>  f$ scratch <span class="kwa">drop over</span> type <span class="sym">'.</span> <span class="kwa">emit</span> scratch <span class="kwa">rot</span> <span class="sym">/</span>string type <span class="sym">;</span>

approx <span class="num">10</span> set<span class="sym">-</span>precision ff<span class="sym">.</span> <span class="kwa">cr</span> bye  <span class="slc">\ done!</span>

