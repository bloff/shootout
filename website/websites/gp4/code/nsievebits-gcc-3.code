<span class="hl slc">// The Computer Language Shootout</span>
<span class="hl slc">// http://shootout.alioth.debian.org/</span>
<span class="hl slc">// Precedent C entry modified by bearophile for speed and size, 31 Jan 2006</span>
<span class="hl slc">// Modified to use bits to hold state by mukund</span>
<span class="hl slc">// Compile with:  gcc -pipe -Wall -O3 -funroll-all-loops -march=athlon64 -m3dnow nsieve.c -o nsieve</span>

<span class="hl dir">#include &lt;stdio.h&gt;</span>
<span class="hl dir">#include &lt;stdint.h&gt;</span>
<span class="hl dir">#include &lt;stdlib.h&gt;</span>
<span class="hl dir">#include &lt;string.h&gt;</span>

<span class="hl dir">#define INDEX_INT(i) ((i) &gt;&gt; 5)</span>
<span class="hl dir">#define INDEX_BIT(i) (1 &lt;&lt; ((i) &amp; 0x1f))</span>
<span class="hl dir">#define INDEX_BITMASK(i) (~INDEX_BIT(i))</span>

<span class="hl kwb">int</span>
<span class="hl kwd">main</span> <span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">*</span>argv<span class="hl sym">[])</span>
<span class="hl sym">{</span>
  <span class="hl kwb">int</span> n <span class="hl sym">=</span> <span class="hl kwd">atoi</span> <span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]);</span>
  <span class="hl kwb">unsigned int</span> count1 <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> count2 <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> count4 <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
  <span class="hl kwb">unsigned int</span> i<span class="hl sym">,</span> j<span class="hl sym">,</span> m<span class="hl sym">,</span> m2<span class="hl sym">;</span>
  <span class="hl kwb">uint32_t</span> <span class="hl sym">*</span>flags<span class="hl sym">;</span>

  m <span class="hl sym">=</span> <span class="hl num">10000</span> <span class="hl sym">&lt;&lt;</span> n<span class="hl sym">;</span>

  flags <span class="hl sym">= (</span><span class="hl kwb">uint32_t</span> <span class="hl sym">*)</span> <span class="hl kwd">malloc</span> <span class="hl sym">((</span>m <span class="hl sym">/</span> <span class="hl kwa">sizeof</span> <span class="hl sym">(</span><span class="hl kwb">uint32_t</span><span class="hl sym">)) +</span> <span class="hl num">1</span><span class="hl sym">);</span>
  <span class="hl kwd">memset</span> <span class="hl sym">(</span>flags<span class="hl sym">,</span> <span class="hl num">0xff</span><span class="hl sym">, (</span>m <span class="hl sym">/</span> <span class="hl kwa">sizeof</span> <span class="hl sym">(</span><span class="hl kwb">uint32_t</span><span class="hl sym">)) +</span> <span class="hl num">1</span><span class="hl sym">);</span>

  <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> m<span class="hl sym">; ++</span>i<span class="hl sym">)</span>
    <span class="hl sym">{</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>flags<span class="hl sym">[</span><span class="hl kwd">INDEX_INT</span> <span class="hl sym">(</span>i<span class="hl sym">)] &amp;</span> <span class="hl kwd">INDEX_BIT</span> <span class="hl sym">(</span>i<span class="hl sym">))</span>
        <span class="hl sym">{</span>
          <span class="hl kwa">for</span> <span class="hl sym">(</span>j <span class="hl sym">=</span> i <span class="hl sym">*</span> <span class="hl num">2</span><span class="hl sym">;</span> j <span class="hl sym">&lt;=</span> m<span class="hl sym">;</span> j <span class="hl sym">+=</span> i<span class="hl sym">)</span>
            flags<span class="hl sym">[</span><span class="hl kwd">INDEX_INT</span> <span class="hl sym">(</span>j<span class="hl sym">)] &amp;=</span> <span class="hl kwd">INDEX_BITMASK</span> <span class="hl sym">(</span>j<span class="hl sym">);</span>

          <span class="hl sym">++</span>count1<span class="hl sym">;</span>
          m2 <span class="hl sym">=</span> m <span class="hl sym">&gt;&gt;</span> <span class="hl num">1</span><span class="hl sym">;</span>
          <span class="hl kwa">if</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> m2<span class="hl sym">)</span>
            <span class="hl sym">++</span>count2<span class="hl sym">;</span>
          m2 <span class="hl sym">=</span> m2 <span class="hl sym">&gt;&gt;</span> <span class="hl num">1</span><span class="hl sym">;</span>
          <span class="hl kwa">if</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> m2<span class="hl sym">)</span>
            <span class="hl sym">++</span>count4<span class="hl sym">;</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>

  <span class="hl kwd">printf</span> <span class="hl sym">(</span><span class="hl str">&quot;Primes up to %8u %8u</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> m<span class="hl sym">,</span> count1<span class="hl sym">);</span>
  <span class="hl kwd">printf</span> <span class="hl sym">(</span><span class="hl str">&quot;Primes up to %8u %8u</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> m <span class="hl sym">/</span> <span class="hl num">2</span><span class="hl sym">,</span> count2<span class="hl sym">);</span>
  <span class="hl kwd">printf</span> <span class="hl sym">(</span><span class="hl str">&quot;Primes up to %8u %8u</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> m <span class="hl sym">/</span> <span class="hl num">4</span><span class="hl sym">,</span> count4<span class="hl sym">);</span>

  <span class="hl kwd">free</span> <span class="hl sym">(</span>flags<span class="hl sym">);</span>

  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>
