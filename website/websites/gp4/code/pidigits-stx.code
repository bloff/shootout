<span class="hl com">&quot;* The Computer Language Benchmarks Game</span>
<span class="hl com">    http://shootout.alioth.debian.org/</span>
<span class="hl com">    contributed by Isaac Gouy</span>
<span class="hl com">    modified by Eliot Miranda *&quot;</span><span class="hl sym">!</span>

<span class="hl com">&quot;* SPLITFILE=Tests.st *&quot;</span><span class="hl sym">!</span>

Object subclass<span class="hl sym">:#</span>Tests
   instanceVariableNames<span class="hl sym">:</span><span class="hl str">''</span>
   classVariableNames<span class="hl sym">:</span><span class="hl str">''</span>
   poolDictionaries<span class="hl sym">:</span><span class="hl str">''</span>
   category<span class="hl sym">:</span><span class="hl str">'benchmarks-game'</span>
<span class="hl sym">!</span>

<span class="hl sym">!</span>Tests class methodsFor<span class="hl sym">:</span><span class="hl str">'benchmarks-game'</span><span class="hl sym">!</span>

pidigitsTo<span class="hl sym">:</span> v width<span class="hl sym">:</span> width to<span class="hl sym">:</span> output   <span class="hl sym">|</span> n i pidigits <span class="hl sym">|</span>   n <span class="hl sym">:=</span> v<span class="hl sym">.</span>   i <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">.</span>   pidigits <span class="hl sym">:=</span> PiDigitSpigot new<span class="hl sym">.   [</span>n <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">]</span> whileTrue<span class="hl sym">:      [</span>n <span class="hl sym">&lt;</span> width         ifTrue<span class="hl sym">:            [</span>n timesRepeat<span class="hl sym">: [</span>output nextPut<span class="hl sym">: (</span>Character digitValue<span class="hl sym">:</span> pidigits next<span class="hl sym">)].</span>            n to<span class="hl sym">:</span> width do<span class="hl sym">: [:</span>each <span class="hl sym">|</span> output space<span class="hl sym">].</span>            i <span class="hl sym">:=</span> i <span class="hl sym">+</span> n<span class="hl sym">]</span>         ifFalse<span class="hl sym">:            [</span>width timesRepeat<span class="hl sym">: [</span>output nextPut<span class="hl sym">: (</span>Character digitValue<span class="hl sym">:</span> pidigits next<span class="hl sym">)].</span>            i <span class="hl sym">:=</span> i <span class="hl sym">+</span> width<span class="hl sym">].</span>
      output tab<span class="hl sym">;</span> nextPut<span class="hl sym">: $:;</span> print<span class="hl sym">:</span> i<span class="hl sym">;</span> cr<span class="hl sym">.</span>
      n <span class="hl sym">:=</span> n <span class="hl sym">-</span> width<span class="hl sym">]</span>
<span class="hl sym">!</span>

main
   <span class="hl kwa">self</span> pidigitsTo<span class="hl sym">:</span> Smalltalk commandLineArguments last asNumber width<span class="hl sym">:</span> <span class="hl num">10</span> to<span class="hl sym">:</span> Stdout<span class="hl sym">.</span>
<span class="hl sym">! !</span>

<span class="hl com">&quot;* SPLITFILE=PiDigitSpigot.st *&quot;</span><span class="hl sym">!</span>

Object subclass<span class="hl sym">: #</span>PiDigitSpigot
   instanceVariableNames<span class="hl sym">:</span> <span class="hl str">'z x inverse'</span>
   classVariableNames<span class="hl sym">:</span> <span class="hl str">''</span>
   poolDictionaries<span class="hl sym">:</span> <span class="hl str">''</span>
   category<span class="hl sym">:</span> <span class="hl str">'benchmarks-game'</span>
<span class="hl sym">!</span>

<span class="hl sym">!</span>PiDigitSpigot class methodsFor<span class="hl sym">:</span> <span class="hl str">'instance creation'</span><span class="hl sym">!</span>new   <span class="hl sym">^</span><span class="hl kwa">super</span> new initialize<span class="hl sym">! !</span>

<span class="hl sym">!</span>PiDigitSpigot methodsFor<span class="hl sym">:</span><span class="hl str">'private'</span><span class="hl sym">!</span>
consume<span class="hl sym">:</span> aTransformation   <span class="hl sym">^</span>z <span class="hl sym">*</span> aTransformation
<span class="hl sym">!</span>

digit   <span class="hl sym">^(</span>z extract<span class="hl sym">:</span> <span class="hl num">3</span><span class="hl sym">)</span> floor
<span class="hl sym">!</span>

isSafe<span class="hl sym">:</span> aDigit   <span class="hl sym">^</span>aDigit <span class="hl sym">= (</span>z extract<span class="hl sym">:</span> <span class="hl num">4</span><span class="hl sym">)</span> floor
<span class="hl sym">!</span>

produce<span class="hl sym">:</span> anInteger   inverse q<span class="hl sym">:</span> <span class="hl num">10</span> r<span class="hl sym">: -</span><span class="hl num">10</span> <span class="hl sym">*</span> anInteger s<span class="hl sym">:</span> <span class="hl num">0</span> t<span class="hl sym">:</span> <span class="hl num">1</span><span class="hl sym">.   ^</span>inverse <span class="hl sym">*</span> z
<span class="hl sym">! !</span>

<span class="hl sym">!</span>PiDigitSpigot methodsFor<span class="hl sym">:</span><span class="hl str">'accessing'</span><span class="hl sym">!</span>
next   <span class="hl sym">|</span> y <span class="hl sym">|   ^(</span><span class="hl kwa">self</span> isSafe<span class="hl sym">: (</span>y <span class="hl sym">:=</span> <span class="hl kwa">self</span> digit<span class="hl sym">))</span>      ifTrue<span class="hl sym">: [</span>z <span class="hl sym">:=</span> <span class="hl kwa">self</span> produce<span class="hl sym">:</span> y<span class="hl sym">.</span> y<span class="hl sym">]</span>      ifFalse<span class="hl sym">: [</span>z <span class="hl sym">:=</span> <span class="hl kwa">self</span> consume<span class="hl sym">:</span> x next<span class="hl sym">.</span> <span class="hl kwa">self</span> next<span class="hl sym">]</span>
<span class="hl sym">! !</span>

<span class="hl sym">!</span>PiDigitSpigot methodsFor<span class="hl sym">:</span> <span class="hl str">'initialize-release'</span><span class="hl sym">!</span>initialize   z <span class="hl sym">:=</span> Transformation unity<span class="hl sym">.</span>   x <span class="hl sym">:=</span> Transformation new<span class="hl sym">.</span>   inverse <span class="hl sym">:=</span> Transformation new<span class="hl sym">.</span>
<span class="hl sym">! !</span>

<span class="hl com">&quot;* SPLITFILE=Transformation.st *&quot;</span><span class="hl sym">!</span>

Object subclass<span class="hl sym">: #</span>Transformation
   instanceVariableNames<span class="hl sym">:</span> <span class="hl str">'q r s t k'</span>
   classVariableNames<span class="hl sym">:</span> <span class="hl str">''</span>
   poolDictionaries<span class="hl sym">:</span> <span class="hl str">''</span>
   category<span class="hl sym">:</span> <span class="hl str">'benchmarks-game'</span>
<span class="hl sym">!</span>

<span class="hl sym">!</span>Transformation class methodsFor<span class="hl sym">:</span><span class="hl str">'instance creation'</span><span class="hl sym">!</span>
new   <span class="hl sym">^</span><span class="hl kwa">super</span> new initialize
<span class="hl sym">!</span>

q<span class="hl sym">:</span> anInteger1 r<span class="hl sym">:</span> anInteger2 s<span class="hl sym">:</span> anInteger3 t<span class="hl sym">:</span> anInteger4   <span class="hl sym">^(</span><span class="hl kwa">super</span> new<span class="hl sym">)</span> q<span class="hl sym">:</span> anInteger1 r<span class="hl sym">:</span> anInteger2 s<span class="hl sym">:</span> anInteger3 t<span class="hl sym">:</span> anInteger4
<span class="hl sym">!</span>

unity   <span class="hl sym">^</span><span class="hl kwa">self</span> q<span class="hl sym">:</span> <span class="hl num">1</span> r<span class="hl sym">:</span> <span class="hl num">0</span> s<span class="hl sym">:</span> <span class="hl num">0</span> t<span class="hl sym">:</span> <span class="hl num">1</span>
<span class="hl sym">! !</span>

<span class="hl sym">!</span>Transformation methodsFor<span class="hl sym">:</span><span class="hl str">'initialize-release'</span><span class="hl sym">!</span>
initialize   q <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">.</span>   r <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">.</span>   s <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">.</span>   t <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">.</span>   k <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">.</span>
<span class="hl sym">! !</span>

<span class="hl sym">!</span>Transformation methodsFor<span class="hl sym">:</span><span class="hl str">'accessing'</span><span class="hl sym">!</span>
<span class="hl sym">*</span> aTransformation   <span class="hl sym">^</span><span class="hl kwa">self</span> species       q<span class="hl sym">:</span> q <span class="hl sym">*</span> aTransformation q      r<span class="hl sym">:</span> q <span class="hl sym">*</span> aTransformation r <span class="hl sym">+ (</span>r <span class="hl sym">*</span> aTransformation t<span class="hl sym">)</span>      s<span class="hl sym">:</span> s <span class="hl sym">*</span> aTransformation q <span class="hl sym">+ (</span>t <span class="hl sym">*</span> aTransformation s<span class="hl sym">)</span>      t<span class="hl sym">:</span> s <span class="hl sym">*</span> aTransformation r <span class="hl sym">+ (</span>t <span class="hl sym">*</span> aTransformation t<span class="hl sym">)</span>
<span class="hl sym">!</span>

extract<span class="hl sym">:</span> anInteger   <span class="hl sym">^(</span>q <span class="hl sym">*</span> anInteger <span class="hl sym">+</span> r<span class="hl sym">) // (</span>s <span class="hl sym">*</span> anInteger <span class="hl sym">+</span> t<span class="hl sym">)</span>
<span class="hl sym">!</span>

next   k <span class="hl sym">:=</span> k <span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">.</span>   q <span class="hl sym">:=</span> k<span class="hl sym">.</span>   r <span class="hl sym">:=</span> <span class="hl num">4</span> <span class="hl sym">*</span> k <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">.</span>   s <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">.</span>   t <span class="hl sym">:=</span> <span class="hl num">2</span> <span class="hl sym">*</span> k <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">.</span>
<span class="hl sym">!</span>

q   <span class="hl sym">^</span>q
<span class="hl sym">!</span>

q<span class="hl sym">:</span> anInteger1 r<span class="hl sym">:</span> anInteger2 s<span class="hl sym">:</span> anInteger3 t<span class="hl sym">:</span> anInteger4   q <span class="hl sym">:=</span> anInteger1<span class="hl sym">.</span>   r <span class="hl sym">:=</span> anInteger2<span class="hl sym">.</span>   s <span class="hl sym">:=</span> anInteger3<span class="hl sym">.</span>   t <span class="hl sym">:=</span> anInteger4<span class="hl sym">.</span>   k <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">.</span>
<span class="hl sym">!</span>

r   <span class="hl sym">^</span>r
<span class="hl sym">!</span>

s   <span class="hl sym">^</span>s
<span class="hl sym">!</span>

t   <span class="hl sym">^</span>t
<span class="hl sym">! !</span>
