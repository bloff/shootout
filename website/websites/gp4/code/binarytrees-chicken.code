<span class="slc">;;; The Great Computer Language Shootout</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;; contributed by Sven Hartrumpf</span>

<span class="sym">(</span>declare <span class="sym">(</span>disable<span class="sym">-</span>interrupts<span class="sym">) (</span>fixnum<span class="sym">))</span>

<span class="sym">(</span>define make <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>item d<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(=</span> d <span class="num">0</span><span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">list</span> <span class="str">'empty item)</span>
<span class="str">    (let ((item2 (* item 2))</span>
<span class="str">          (d2 (- d 1)))</span>
<span class="str">      (list '</span>node <span class="sym">(</span>make <span class="sym">(-</span> item2 <span class="num">1</span><span class="sym">)</span> d2<span class="sym">)</span> item <span class="sym">(</span>make item2 d2<span class="sym">))))))</span>

<span class="sym">(</span>define check <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>t<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">eq</span>? <span class="sym">(</span><span class="kwa">car</span> t<span class="sym">)</span> <span class="str">'empty)</span>
<span class="str">    (cadr t)</span>
<span class="str">    (+ (caddr t) (- (check (cadr t)) (check (cadddr t)))))))</span>
<span class="str"></span>
<span class="str">(define main (lambda (argv)</span>
<span class="str">  (let* ((min-depth 4)</span>
<span class="str">         (max-depth (max (+ min-depth 2) (if (pair? argv) (string-&gt;number (car argv)) 10))))</span>
<span class="str">    (let ((stretch-depth (+ max-depth 1)))</span>
<span class="str">      (display &quot;stretch tree of depth &quot;) (display stretch-depth) (write-char #</span><span class="esc">\t</span><span class="str">ab) (display &quot; check: &quot;) (display (check (make 0 stretch-depth))) (newline))</span>
<span class="str">    (let ((long-lived-tree (make 0 max-depth)))</span>
<span class="str">      (do ((d 4 (+ d 2))</span>
<span class="str">           (c 0 0))</span>
<span class="str">        ((&gt; d max-depth))</span>
<span class="str">        (let ((iterations (arithmetic-shift 1 (+ (- max-depth d) min-depth)))) ; chicken-specific: arithmetic-shift</span>
<span class="str">          (do ((i 0 (+ i 1)))</span>
<span class="str">            ((&gt;= i iterations))</span>
<span class="str">            (set! c (+ c (check (make i d)) (check (make (- i) d)))))</span>
<span class="str">          (display (* 2 iterations)) (write-char #</span><span class="esc">\t</span><span class="str">ab) (display &quot; trees of depth &quot;) (display d) (write-char #</span><span class="esc">\t</span><span class="str">ab) (display &quot; check: &quot;) (display c) (newline)))</span>
<span class="str">      (display &quot;long lived tree of depth &quot;) (display max-depth) (write-char #</span><span class="esc">\t</span><span class="str">ab) (display &quot; check: &quot;) (display (check long-lived-tree)) (newline)))))</span>
<span class="str"></span>
<span class="str">(main (command-line-arguments))</span>
