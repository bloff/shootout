<span class="hl slc">;;; The Great Computer Language Shootout</span>
<span class="hl slc">;;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;; contributed by Sven Hartrumpf</span>

<span class="hl sym">(</span>declare <span class="hl sym">(</span>disable-interrupts<span class="hl sym">) (</span>fixnum<span class="hl sym">))</span>

<span class="hl sym">(</span>define make <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>item d<span class="hl sym">)</span>
  <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(=</span> d <span class="hl num">0</span><span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl kwa">list</span> <span class="hl sym">'</span>empty item<span class="hl sym">)</span>
    <span class="hl sym">(</span>let <span class="hl sym">((</span>item2 <span class="hl sym">(*</span> item <span class="hl num">2</span><span class="hl sym">))</span>
          <span class="hl sym">(</span>d2 <span class="hl sym">(</span>- d <span class="hl num">1</span><span class="hl sym">)))</span>
      <span class="hl sym">(</span><span class="hl kwa">list</span> <span class="hl sym">'</span>node <span class="hl sym">(</span>make <span class="hl sym">(</span>- item2 <span class="hl num">1</span><span class="hl sym">)</span> d2<span class="hl sym">)</span> item <span class="hl sym">(</span>make item2 d2<span class="hl sym">))))))</span>

<span class="hl sym">(</span>define check <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>t<span class="hl sym">)</span>
  <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">eq</span>? <span class="hl sym">(</span><span class="hl kwa">car</span> t<span class="hl sym">) '</span>empty<span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl kwa">cadr</span> t<span class="hl sym">)</span>
    <span class="hl sym">(+ (</span><span class="hl kwa">caddr</span> t<span class="hl sym">) (</span>- <span class="hl sym">(</span>check <span class="hl sym">(</span><span class="hl kwa">cadr</span> t<span class="hl sym">)) (</span>check <span class="hl sym">(</span><span class="hl kwa">cadddr</span> t<span class="hl sym">)))))))</span>

<span class="hl sym">(</span>define main <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>argv<span class="hl sym">)</span>
  <span class="hl sym">(</span>let<span class="hl sym">* ((</span><span class="hl kwa">min</span>-depth <span class="hl num">4</span><span class="hl sym">)</span>
         <span class="hl sym">(</span><span class="hl kwa">max</span>-depth <span class="hl sym">(</span><span class="hl kwa">max</span> <span class="hl sym">(+</span> <span class="hl kwa">min</span>-depth <span class="hl num">2</span><span class="hl sym">) (</span><span class="hl kwa">if</span> <span class="hl sym">(</span>pair? argv<span class="hl sym">) (</span>string-<span class="hl sym">&gt;</span>number <span class="hl sym">(</span><span class="hl kwa">car</span> argv<span class="hl sym">))</span> <span class="hl num">10</span><span class="hl sym">))))</span>
    <span class="hl sym">(</span>let <span class="hl sym">((</span>stretch-depth <span class="hl sym">(+</span> <span class="hl kwa">max</span>-depth <span class="hl num">1</span><span class="hl sym">)))</span>
      <span class="hl sym">(</span>display <span class="hl str">&quot;stretch tree of depth &quot;</span><span class="hl sym">) (</span>display stretch-depth<span class="hl sym">) (</span>write-char #\tab<span class="hl sym">) (</span>display <span class="hl str">&quot; check: &quot;</span><span class="hl sym">) (</span>display <span class="hl sym">(</span>check <span class="hl sym">(</span>make <span class="hl num">0</span> stretch-depth<span class="hl sym">))) (</span>newline<span class="hl sym">))</span>
    <span class="hl sym">(</span>let <span class="hl sym">((</span>long-lived-tree <span class="hl sym">(</span>make <span class="hl num">0</span> <span class="hl kwa">max</span>-depth<span class="hl sym">)))</span>
      <span class="hl sym">(</span>do <span class="hl sym">((</span>d <span class="hl num">4</span> <span class="hl sym">(+</span> d <span class="hl num">2</span><span class="hl sym">))</span>
           <span class="hl sym">(</span>c <span class="hl num">0 0</span><span class="hl sym">))</span>
        <span class="hl sym">((&gt;</span> d <span class="hl kwa">max</span>-depth<span class="hl sym">))</span>
        <span class="hl sym">(</span>let <span class="hl sym">((</span>iterations <span class="hl sym">(</span>arithmetic-shift <span class="hl num">1</span> <span class="hl sym">(+ (</span>- <span class="hl kwa">max</span>-depth d<span class="hl sym">)</span> <span class="hl kwa">min</span>-depth<span class="hl sym">))))</span> <span class="hl slc">; chicken-specific: arithmetic-shift</span>
          <span class="hl sym">(</span>do <span class="hl sym">((</span>i <span class="hl num">0</span> <span class="hl sym">(+</span> i <span class="hl num">1</span><span class="hl sym">)))</span>
            <span class="hl sym">((&gt;=</span> i iterations<span class="hl sym">))</span>
            <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> c <span class="hl sym">(+</span> c <span class="hl sym">(</span>check <span class="hl sym">(</span>make i d<span class="hl sym">)) (</span>check <span class="hl sym">(</span>make <span class="hl sym">(</span>- i<span class="hl sym">)</span> d<span class="hl sym">)))))</span>
          <span class="hl sym">(</span>display <span class="hl sym">(*</span> <span class="hl num">2</span> iterations<span class="hl sym">)) (</span>write-char #\tab<span class="hl sym">) (</span>display <span class="hl str">&quot; trees of depth &quot;</span><span class="hl sym">) (</span>display d<span class="hl sym">) (</span>write-char #\tab<span class="hl sym">) (</span>display <span class="hl str">&quot; check: &quot;</span><span class="hl sym">) (</span>display c<span class="hl sym">) (</span>newline<span class="hl sym">)))</span>
      <span class="hl sym">(</span>display <span class="hl str">&quot;long lived tree of depth &quot;</span><span class="hl sym">) (</span>display <span class="hl kwa">max</span>-depth<span class="hl sym">) (</span>write-char #\tab<span class="hl sym">) (</span>display <span class="hl str">&quot; check: &quot;</span><span class="hl sym">) (</span>display <span class="hl sym">(</span>check long-lived-tree<span class="hl sym">)) (</span>newline<span class="hl sym">)))))</span>

<span class="hl sym">(</span>main <span class="hl sym">(</span><span class="hl kwa">command</span>-<span class="hl kwa">line</span>-arguments<span class="hl sym">))</span>
