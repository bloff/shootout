<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">*/</span>

<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;</span>
<span class="kwa">import</span> java<span class="sym">.</span>net<span class="sym">.*;</span>

<span class="kwa">let</span> <span class="kwb">int</span> M <span class="sym">=</span> <span class="num">100</span><span class="sym">;</span> <span class="slc">// multiplier</span>
<span class="kwa">let</span> <span class="kwb">int</span> REPLY_SIZE <span class="sym">=</span> <span class="num">4096</span><span class="sym">;</span>
<span class="kwa">let</span> <span class="kwb">int</span> REQUEST_SIZE <span class="sym">=</span> <span class="num">64</span><span class="sym">;</span>

<span class="kwa">let</span> <span class="kwb">int</span> BUFFER_SIZE <span class="sym">=</span> <span class="num">1024</span><span class="sym">;</span>
<span class="kwa">let</span> <span class="kwb">byte</span><span class="sym">[]</span> REPLY <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">byte</span><span class="sym">[</span>REPLY_SIZE<span class="sym">];</span>
<span class="kwa">let</span> <span class="kwb">byte</span><span class="sym">[]</span> REQUEST <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">byte</span><span class="sym">[</span>REQUEST_SIZE<span class="sym">];</span>

<span class="kwb">void</span> main<span class="sym">(</span>String<span class="sym">[]</span> args<span class="sym">){</span>
   <span class="kwa">let</span> n <span class="sym">=</span> Integer<span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]) *</span> M<span class="sym">;</span>
   <span class="kwa">let</span> server <span class="sym">=</span> <span class="kwa">new</span> TcpServer<span class="sym">(</span>port<span class="sym">:</span> <span class="num">0</span><span class="sym">);</span>
   <span class="kwa">let</span> client <span class="sym">=</span> <span class="kwa">new</span> TcpClient<span class="sym">(</span>
      address<span class="sym">:</span> InetAddress<span class="sym">.</span>getLocalHost<span class="sym">(),</span>
      port<span class="sym">:</span> server<span class="sym">.</span>getPort<span class="sym">,</span>
      repeat<span class="sym">:</span> n
   <span class="sym">);</span>
   client<span class="sym">.</span>start<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwa">class</span> TcpClient <span class="kwa">extends</span> Thread <span class="sym">{</span>
   InetAddress address<span class="sym">;</span>
   <span class="kwb">int</span> port<span class="sym">;</span>
   <span class="kwb">int</span> repeat<span class="sym">;</span>

   run<span class="sym">() {</span>
      <span class="kwa">let</span> buffer <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">byte</span><span class="sym">[</span>BUFFER_SIZE<span class="sym">];</span>
      <span class="kwa">var</span> replies <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> <span class="kwa">var</span> bytes <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
      <span class="kwa">var</span> <span class="sym">?</span>Socket serverSocket <span class="sym">=</span> <span class="kwa">null</span><span class="sym">;</span>

      <span class="kwa">try</span> <span class="sym">{</span>
         <span class="kwa">var</span> byteCount <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
         <span class="kwa">let</span> socket <span class="sym">=</span> <span class="kwa">new</span> Socket<span class="sym">(</span>address<span class="sym">,</span> port<span class="sym">);</span>
         serverSocket <span class="sym">=</span> socket<span class="sym">;</span>

         <span class="kwa">let</span> in <span class="sym">=</span> socket<span class="sym">.</span>getInputStream<span class="sym">;</span>
         <span class="kwa">let</span> out <span class="sym">=</span> socket<span class="sym">.</span>getOutputStream<span class="sym">;</span>

         <span class="kwa">while</span> <span class="sym">(</span>repeat<span class="sym">-- &gt;</span> <span class="num">0</span><span class="sym">) {</span>
            out<span class="sym">.</span>write<span class="sym">(</span>REQUEST<span class="sym">);</span>
            out<span class="sym">.</span>flush<span class="sym">;</span>

            <span class="kwa">while</span> <span class="sym">( (</span>byteCount <span class="sym">+=</span> in<span class="sym">.</span>read<span class="sym">(</span>buffer<span class="sym">)) &lt;</span> REPLY_SIZE <span class="sym">) {}</span>
            bytes <span class="sym">+=</span> byteCount<span class="sym">;</span>
            byteCount <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
            replies<span class="sym">++;</span>
         <span class="sym">}</span>
      <span class="sym">}</span>
      <span class="kwa">catch</span> <span class="sym">(</span>Exception e<span class="sym">) {</span> e<span class="sym">.</span>printStackTrace<span class="sym">; }</span>
      <span class="kwa">finally</span> <span class="sym">{</span> notNull<span class="sym">(</span>serverSocket<span class="sym">).</span>close<span class="sym">; }</span>

      println<span class="sym">(</span><span class="str">&quot;replies: &quot;</span> <span class="sym">+</span> replies <span class="sym">+</span> <span class="str">&quot;\tbytes: &quot;</span> <span class="sym">+</span> bytes<span class="sym">);</span>
   <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">class</span> TcpServer <span class="kwa">extends</span> Thread <span class="sym">{</span>
   <span class="sym">?</span>ServerSocket socket <span class="sym">=</span> <span class="kwa">null</span><span class="sym">;</span>
   <span class="kwb">int</span> port<span class="sym">;</span>

   <span class="sym">{</span>
      socket <span class="sym">=</span> <span class="kwa">new</span> ServerSocket<span class="sym">(</span>port<span class="sym">);</span>
      port <span class="sym">=</span> notNull<span class="sym">(</span>socket<span class="sym">).</span>getLocalPort<span class="sym">;</span>
      this<span class="sym">.</span>start<span class="sym">;</span>
   <span class="sym">}</span>

   <span class="kwb">int</span> getPort<span class="sym">();</span> getPort<span class="sym">() =</span> port<span class="sym">;</span>

   run<span class="sym">() {</span>
      <span class="kwa">let</span> buffer <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">byte</span><span class="sym">[</span>BUFFER_SIZE<span class="sym">];</span>

      <span class="kwa">try</span> <span class="sym">{</span>
         <span class="kwa">let</span> socketClient <span class="sym">=</span> notNull<span class="sym">(</span>socket<span class="sym">).</span>accept<span class="sym">;</span>
         <span class="kwa">let</span> in <span class="sym">=</span> socketClient<span class="sym">.</span>getInputStream<span class="sym">;</span>
         <span class="kwa">let</span> out <span class="sym">=</span> socketClient<span class="sym">.</span>getOutputStream<span class="sym">;</span>

         <span class="kwa">while</span> <span class="sym">((</span>in<span class="sym">.</span>read<span class="sym">(</span>buffer<span class="sym">,</span><span class="num">0</span><span class="sym">,</span>REQUEST_SIZE<span class="sym">)) &gt; -</span><span class="num">1</span><span class="sym">) {</span>
            out<span class="sym">.</span>write<span class="sym">(</span>REPLY<span class="sym">);</span>
            out<span class="sym">.</span>flush<span class="sym">;</span>
         <span class="sym">}</span>
      <span class="sym">}</span> <span class="kwa">catch</span> <span class="sym">(</span>Exception e<span class="sym">) {</span> e<span class="sym">.</span>printStackTrace<span class="sym">; }</span>
   <span class="sym">}</span>
<span class="sym">}</span>

