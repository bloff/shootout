<span class="hl com">(* fasta.sml</span>
<span class="hl com"> *</span>
<span class="hl com"> *   Generate and write random &quot;DNA&quot; sequences.</span>
<span class="hl com"> *</span>
<span class="hl com"> * Copyright (c) 2004 by The Fellowship of SML/NJ</span>
<span class="hl com"> *</span>
<span class="hl com"> * Author: Matthias Blume (blume&#64;tti-c.org)</span>
<span class="hl com"> *</span>
<span class="hl com"> *)</span>

<span class="hl kwa">structure</span> Test<span class="hl sym">:</span><span class="hl kwa">sig val</span> main<span class="hl sym">:</span><span class="hl kwb">string</span><span class="hl sym">*</span><span class="hl kwb">string</span> list<span class="hl sym">-&gt;</span>OS.Process.status <span class="hl kwa">end</span> <span class="hl sym">=</span> <span class="hl kwa">struct</span>

    <span class="hl kwa">val</span> len <span class="hl sym">=</span> <span class="hl num">60</span>

    <span class="hl kwa">infix</span> <span class="hl num">8</span> $ <span class="hl sym">%</span> <span class="hl kwa">val</span> <span class="hl sym">(</span><span class="hl kwa">op</span> $<span class="hl sym">,</span> <span class="hl kwa">op</span> <span class="hl sym">%) = (</span>Unsafe.Array.sub<span class="hl sym">,</span> Unsafe.CharVector.sub<span class="hl sym">)</span>
    <span class="hl kwa">infix</span> <span class="hl num">3</span> <span class="hl sym">&lt;-</span>  <span class="hl kwa">fun</span> <span class="hl sym">(</span>a<span class="hl sym">,</span> i<span class="hl sym">) &lt;-</span> x <span class="hl sym">=</span> Unsafe.Array.update <span class="hl sym">(</span>a<span class="hl sym">,</span> i<span class="hl sym">,</span> x<span class="hl sym">)</span>
    <span class="hl kwa">fun</span> x <span class="hl sym">-</span> y <span class="hl sym">=</span> <span class="hl kwa">Word</span>.toIntX <span class="hl sym">(</span><span class="hl kwa">Word</span>.<span class="hl sym">- (</span><span class="hl kwa">Word</span>.fromInt x<span class="hl sym">,</span> <span class="hl kwa">Word</span>.fromInt y<span class="hl sym">))</span>
    <span class="hl kwa">fun</span> succ x <span class="hl sym">=</span> <span class="hl kwa">Word</span>.toIntX <span class="hl sym">(</span><span class="hl kwa">Word</span>.fromInt x <span class="hl sym">+</span> <span class="hl num">0</span>w1<span class="hl sym">)</span>

    <span class="hl kwa">fun</span> out s <span class="hl sym">=</span> <span class="hl kwa">TextIO</span>.output <span class="hl sym">(</span><span class="hl kwa">TextIO</span>.stdOut<span class="hl sym">,</span> s<span class="hl sym">)</span>
    <span class="hl kwa">fun</span> out1 c <span class="hl sym">=</span> <span class="hl kwa">TextIO</span>.output1 <span class="hl sym">(</span><span class="hl kwa">TextIO</span>.stdOut<span class="hl sym">,</span> c<span class="hl sym">)</span>
    <span class="hl kwa">fun</span> ssl<span class="hl sym">(</span>s<span class="hl sym">,</span>i<span class="hl sym">,</span>j<span class="hl sym">) =</span>
	<span class="hl sym">(</span><span class="hl kwa">TextIO</span>.outputSubstr<span class="hl sym">(</span><span class="hl kwa">TextIO</span>.stdOut<span class="hl sym">,</span>Substring.substring<span class="hl sym">(</span>s<span class="hl sym">,</span>i<span class="hl sym">,</span>j<span class="hl sym">));</span>
	 out1 #<span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span>

    <span class="hl com">(* word-&gt;real conversion *)</span>
    <span class="hl kwa">val</span> wreal <span class="hl sym">=</span> <span class="hl kwb">real</span> <span class="hl kwa">o Word</span>.toIntX
    <span class="hl com">(* the constants for the random number generator *)</span>
    <span class="hl kwa">val</span> <span class="hl sym">(</span>M<span class="hl sym">,</span> A<span class="hl sym">,</span> C<span class="hl sym">) = (</span><span class="hl num">0</span>w139968<span class="hl sym">,</span> <span class="hl num">0</span>w3877<span class="hl sym">,</span> <span class="hl num">0</span>w29573<span class="hl sym">)</span>     <span class="hl kwa">val</span> M' <span class="hl sym">=</span> <span class="hl num">1.0</span> <span class="hl sym">/</span> wreal M

    <span class="hl com">(* the random number generator *)</span>
    <span class="hl kwa">val</span> random <span class="hl sym">=</span> <span class="hl kwa">let val</span> l <span class="hl sym">=</span> ref <span class="hl num">0</span>w42
		 <span class="hl kwa">in fn</span> m<span class="hl sym">=&gt;</span><span class="hl kwa">let val</span> c <span class="hl sym">= (!</span>l<span class="hl sym">*</span>A<span class="hl sym">+</span>C<span class="hl sym">)</span> mod M <span class="hl kwa">in</span> l<span class="hl sym">:=</span>c<span class="hl sym">;</span> m<span class="hl sym">*</span>M'<span class="hl sym">*</span>wreal c <span class="hl kwa">end</span>
		 <span class="hl kwa">end</span>

    <span class="hl kwa">fun</span> stretch s <span class="hl sym">=</span> <span class="hl kwa">if</span> size s <span class="hl sym">&lt;</span> len <span class="hl kwa">then</span> stretch <span class="hl sym">(</span>s^s<span class="hl sym">)</span> <span class="hl kwa">else</span> <span class="hl sym">(</span>s^s<span class="hl sym">,</span> size s<span class="hl sym">)</span>

    <span class="hl com">(* calculate cumulative probabilities *)</span>
    <span class="hl kwa">fun</span> mkCumul l <span class="hl sym">=</span>
	<span class="hl kwa">let val</span> <span class="hl sym">(</span>cl<span class="hl sym">,</span> pl<span class="hl sym">) =</span> <span class="hl kwa">ListPair</span>.unzip l
	    <span class="hl kwa">val</span> <span class="hl sym">(</span>s<span class="hl sym">,</span> a<span class="hl sym">) = (</span>CharVector.fromList cl<span class="hl sym">,</span> Array.fromList pl<span class="hl sym">)</span>
	    <span class="hl kwa">fun</span> upd <span class="hl sym">(</span>i<span class="hl sym">,</span> p<span class="hl sym">,</span> s<span class="hl sym">) =</span> <span class="hl kwa">let val</span> s <span class="hl sym">=</span> s<span class="hl sym">+</span>p <span class="hl kwa">in</span> <span class="hl sym">(</span>a<span class="hl sym">,</span>i<span class="hl sym">)&lt;-</span>s<span class="hl sym">;</span> s <span class="hl kwa">end</span>
	<span class="hl kwa">in</span> ignore <span class="hl sym">(</span>Array.foldli upd <span class="hl num">0.0</span> a<span class="hl sym">); (</span>s<span class="hl sym">,</span> a<span class="hl sym">,</span> Array.length a <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">end</span>

    <span class="hl com">(* fixed sequence to be repeated *)</span>
    <span class="hl kwa">val</span> alu <span class="hl sym">=</span> stretch <span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG</span><span class="hl esc">\</span>
<span class="hl str"></span>		      <span class="hl esc">\G</span><span class="hl str">AGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA</span><span class="hl esc">\</span>
<span class="hl str"></span>		      <span class="hl esc">\C</span><span class="hl str">CAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT</span><span class="hl esc">\</span>
<span class="hl str"></span>		      <span class="hl esc">\A</span><span class="hl str">CAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA</span><span class="hl esc">\</span>
<span class="hl str"></span>		      <span class="hl esc">\G</span><span class="hl str">CTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG</span><span class="hl esc">\</span>
<span class="hl str"></span>		      <span class="hl esc">\A</span><span class="hl str">GGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC</span><span class="hl esc">\</span>
<span class="hl str"></span>		      <span class="hl esc">\A</span><span class="hl str">GCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>

    <span class="hl com">(* the bases with their probabilities *)</span>
    <span class="hl kwa">val</span> homosapiens <span class="hl sym">=</span> mkCumul <span class="hl sym">[(</span>#<span class="hl str">&quot;a&quot;</span><span class="hl sym">,</span> <span class="hl num">0.3029549426680</span><span class="hl sym">), (</span>#<span class="hl str">&quot;c&quot;</span><span class="hl sym">,</span> <span class="hl num">0.1979883004921</span><span class="hl sym">),</span>
			       <span class="hl sym">(</span>#<span class="hl str">&quot;g&quot;</span><span class="hl sym">,</span> <span class="hl num">0.1975473066391</span><span class="hl sym">), (</span>#<span class="hl str">&quot;t&quot;</span><span class="hl sym">,</span> <span class="hl num">0.3015094502008</span><span class="hl sym">)]</span>

    <span class="hl kwa">val</span> iub <span class="hl sym">=</span> mkCumul <span class="hl sym">[(</span>#<span class="hl str">&quot;a&quot;</span><span class="hl sym">,</span><span class="hl num">0.27</span><span class="hl sym">), (</span>#<span class="hl str">&quot;c&quot;</span><span class="hl sym">,</span><span class="hl num">0.12</span><span class="hl sym">), (</span>#<span class="hl str">&quot;g&quot;</span><span class="hl sym">,</span><span class="hl num">0.12</span><span class="hl sym">), (</span>#<span class="hl str">&quot;t&quot;</span><span class="hl sym">,</span><span class="hl num">0.27</span><span class="hl sym">),</span>
		       <span class="hl sym">(</span>#<span class="hl str">&quot;B&quot;</span><span class="hl sym">,</span><span class="hl num">0.02</span><span class="hl sym">), (</span>#<span class="hl str">&quot;D&quot;</span><span class="hl sym">,</span><span class="hl num">0.02</span><span class="hl sym">), (</span>#<span class="hl str">&quot;H&quot;</span><span class="hl sym">,</span><span class="hl num">0.02</span><span class="hl sym">), (</span>#<span class="hl str">&quot;K&quot;</span><span class="hl sym">,</span><span class="hl num">0.02</span><span class="hl sym">),</span>
		       <span class="hl sym">(</span>#<span class="hl str">&quot;M&quot;</span><span class="hl sym">,</span><span class="hl num">0.02</span><span class="hl sym">), (</span>#<span class="hl str">&quot;N&quot;</span><span class="hl sym">,</span><span class="hl num">0.02</span><span class="hl sym">), (</span>#<span class="hl str">&quot;R&quot;</span><span class="hl sym">,</span><span class="hl num">0.02</span><span class="hl sym">), (</span>#<span class="hl str">&quot;S&quot;</span><span class="hl sym">,</span><span class="hl num">0.02</span><span class="hl sym">),</span>
		       <span class="hl sym">(</span>#<span class="hl str">&quot;V&quot;</span><span class="hl sym">,</span><span class="hl num">0.02</span><span class="hl sym">), (</span>#<span class="hl str">&quot;W&quot;</span><span class="hl sym">,</span><span class="hl num">0.02</span><span class="hl sym">), (</span>#<span class="hl str">&quot;Y&quot;</span><span class="hl sym">,</span><span class="hl num">0.02</span><span class="hl sym">)]</span>

    <span class="hl com">(* select a random base *)</span>
    <span class="hl kwa">fun</span> selRandom <span class="hl sym">(</span>s<span class="hl sym">,</span> a<span class="hl sym">,</span> n'<span class="hl sym">) =</span>
	<span class="hl kwa">let val</span> r <span class="hl sym">=</span> random <span class="hl num">1.0</span>
	    <span class="hl kwa">fun</span> l i <span class="hl sym">=</span> <span class="hl kwa">if</span> i <span class="hl sym">&gt;=</span> n' <span class="hl kwa">orelse</span> a$i <span class="hl sym">&gt;</span> r <span class="hl kwa">then</span> s<span class="hl sym">%</span>i <span class="hl kwa">else</span> l <span class="hl sym">(</span>succ i<span class="hl sym">)</span>
	<span class="hl kwa">in</span> l <span class="hl num">0</span> <span class="hl kwa">end</span>

    <span class="hl com">(* make a sequence by repeating a template *)</span>
    <span class="hl kwa">fun</span> rptff <span class="hl sym">(</span>id<span class="hl sym">,</span> desc<span class="hl sym">, (</span>s<span class="hl sym">,</span> l<span class="hl sym">),</span> n<span class="hl sym">) =</span>
	<span class="hl kwa">let fun</span> lp <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> _<span class="hl sym">) = ()</span>
	      <span class="hl sym">|</span> lp <span class="hl sym">(</span>n<span class="hl sym">,</span> k<span class="hl sym">) =</span>
		  <span class="hl kwa">if</span> n<span class="hl sym">&lt;</span>len <span class="hl kwa">then</span> ssl<span class="hl sym">(</span>s<span class="hl sym">,</span>k<span class="hl sym">,</span>n<span class="hl sym">)</span>
		  <span class="hl kwa">else let val</span> k' <span class="hl sym">=</span> k<span class="hl sym">+</span>len
		       <span class="hl kwa">in</span> ssl<span class="hl sym">(</span>s<span class="hl sym">,</span>k<span class="hl sym">,</span>len<span class="hl sym">);</span> lp<span class="hl sym">(</span>n<span class="hl sym">-</span>len<span class="hl sym">,</span> <span class="hl kwa">if</span> k'<span class="hl sym">&gt;=</span>l <span class="hl kwa">then</span> k'<span class="hl sym">-</span>l <span class="hl kwa">else</span> k'<span class="hl sym">)</span>
		       <span class="hl kwa">end</span>
	<span class="hl kwa">in</span> app out <span class="hl sym">[</span><span class="hl str">&quot;&gt;&quot;</span><span class="hl sym">,</span> id<span class="hl sym">,</span> <span class="hl str">&quot; &quot;</span><span class="hl sym">,</span> desc<span class="hl sym">,</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">];</span> lp <span class="hl sym">(</span>n<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">end</span>

    <span class="hl com">(* make random fasta fragment *)</span>
    <span class="hl kwa">fun</span> rndff <span class="hl sym">(</span>id<span class="hl sym">,</span> desc<span class="hl sym">,</span> sa<span class="hl sym">,</span> n<span class="hl sym">) =</span>
	<span class="hl kwa">let fun</span> loop n <span class="hl sym">=</span> <span class="hl kwa">let val</span> m <span class="hl sym">=</span> <span class="hl kwa">Int</span>.min<span class="hl sym">(</span>n<span class="hl sym">,</span>len<span class="hl sym">)</span> <span class="hl kwa">in</span> loop' <span class="hl sym">(</span>n<span class="hl sym">-</span>m<span class="hl sym">,</span>m<span class="hl sym">)</span> <span class="hl kwa">end</span>
	    <span class="hl kwa">and</span> loop' <span class="hl sym">(</span>n<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">) = (</span>out1 #<span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span> <span class="hl kwa">if</span> n<span class="hl sym">&gt;</span><span class="hl num">0</span> <span class="hl kwa">then</span> loop n <span class="hl kwa">else</span> <span class="hl sym">())</span>
	      <span class="hl sym">|</span> loop' <span class="hl sym">(</span>n<span class="hl sym">,</span> m<span class="hl sym">) = (</span>out1 <span class="hl sym">(</span>selRandom sa<span class="hl sym">);</span> loop' <span class="hl sym">(</span>n<span class="hl sym">,</span>m<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">))</span>
	<span class="hl kwa">in</span> app out <span class="hl sym">[</span><span class="hl str">&quot;&gt;&quot;</span><span class="hl sym">,</span> id<span class="hl sym">,</span> <span class="hl str">&quot; &quot;</span><span class="hl sym">,</span> desc<span class="hl sym">,</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">];</span> loop n <span class="hl kwa">end</span>

    <span class="hl com">(* test harness *)</span>
    <span class="hl kwa">fun</span> make' n <span class="hl sym">= (</span>rptff<span class="hl sym">(</span><span class="hl str">&quot;ONE&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;Homo sapiens alu&quot;</span><span class="hl sym">,</span> alu<span class="hl sym">,</span> n<span class="hl sym">*</span><span class="hl num">2</span><span class="hl sym">);</span>
		   rndff<span class="hl sym">(</span><span class="hl str">&quot;TWO&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;IUB ambiguity codes&quot;</span><span class="hl sym">,</span> iub<span class="hl sym">,</span> n<span class="hl sym">*</span><span class="hl num">3</span><span class="hl sym">);</span>
		   rndff<span class="hl sym">(</span><span class="hl str">&quot;THREE&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;Homo sapiens frequency&quot;</span><span class="hl sym">,</span> homosapiens<span class="hl sym">,</span> n<span class="hl sym">*</span><span class="hl num">5</span><span class="hl sym">);</span>
		   OS.Process.success<span class="hl sym">)</span>

    <span class="hl com">(* driver *)</span>
    <span class="hl kwa">fun</span> main <span class="hl sym">(</span>_<span class="hl sym">, []) =</span> make' <span class="hl num">1</span>
      <span class="hl sym">|</span> main <span class="hl sym">(</span>_<span class="hl sym">,</span> arg <span class="hl sym">::</span> _<span class="hl sym">) =</span> make' <span class="hl sym">(</span>getOpt <span class="hl sym">(</span><span class="hl kwa">Int</span>.fromString arg<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">))</span>
<span class="hl kwa">end</span>

<span class="hl kwa">val</span> _ <span class="hl sym">=</span> Test.main <span class="hl sym">(</span>CommandLine.name <span class="hl sym">(),</span> CommandLine.arguments <span class="hl sym">())</span>
