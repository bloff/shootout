<span class="slc">%  The Great Computer Language Shootout</span>
<span class="slc">%   http://shootout.alioth.debian.org/</span>
<span class="slc">%</span>
<span class="slc">%   contributed by Mark Scandariato</span>
<span class="slc">%</span>
<span class="slc">%   erl -noshell -noinput -run message main 7</span>

<span class="sym">-</span><span class="kwd">module</span><span class="sym">(</span>fannkuch<span class="sym">)</span>.
<span class="sym">-</span><span class="kwd">export</span><span class="sym">([</span>main<span class="sym">/</span><span class="num">1</span><span class="sym">])</span>.

<span class="kwd">swap</span><span class="sym">(</span>T<span class="sym">,</span> I<span class="sym">,</span> J<span class="sym">) -&gt;</span>
    T2 <span class="sym">=</span> <span class="kwb">setelement</span><span class="sym">(</span>I<span class="sym">,</span> T<span class="sym">,</span> <span class="kwb">element</span><span class="sym">(</span>J<span class="sym">,</span> T<span class="sym">)),</span>
    <span class="kwb">setelement</span><span class="sym">(</span>J<span class="sym">,</span> T2<span class="sym">,</span> <span class="kwb">element</span><span class="sym">(</span>I<span class="sym">,</span> T<span class="sym">))</span>.

<span class="kwd">exch</span><span class="sym">(</span>T<span class="sym">,</span> N<span class="sym">,</span> C<span class="sym">)</span> <span class="kwa">when</span> N rem <span class="num">2</span> <span class="sym">==</span> <span class="num">0</span> <span class="sym">-&gt;</span> <span class="kwd">swap</span><span class="sym">(</span>T<span class="sym">,</span> C<span class="sym">,</span> N<span class="sym">);</span>
<span class="kwd">exch</span><span class="sym">(</span>T<span class="sym">,</span> N<span class="sym">,</span> _<span class="sym">) -&gt;</span> <span class="kwd">swap</span><span class="sym">(</span>T<span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> N<span class="sym">)</span>.

<span class="kwd">main</span><span class="sym">([</span>Arg<span class="sym">]) -&gt;</span>
    N <span class="sym">=</span> <span class="kwb">list_to_integer</span><span class="sym">(</span>Arg<span class="sym">),</span>
    F <span class="sym">=</span> <span class="kwd">main</span><span class="sym">(</span>N<span class="sym">),</span>
    io<span class="sym">:</span><span class="kwd">fwrite</span><span class="sym">(</span><span class="str">&quot;Pfannkuchen(~p) = ~p~n&quot;</span><span class="sym">, [</span>N<span class="sym">,</span> F<span class="sym">]),</span>
    erlang<span class="sym">:</span><span class="kwb">halt</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>

<span class="kwd">main</span><span class="sym">(</span>N<span class="sym">)</span> <span class="kwa">when</span> N <span class="sym">&gt;</span> <span class="num">0</span> <span class="sym">-&gt;</span>
    T0 <span class="sym">=</span> <span class="kwb">list_to_tuple</span><span class="sym">(</span>lists<span class="sym">:</span><span class="kwd">seq</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span>N<span class="sym">)),</span>
    <span class="sym">{</span>F<span class="sym">,</span> _<span class="sym">} =</span> <span class="kwd">permute</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> N<span class="sym">,</span> N<span class="sym">,</span> T0<span class="sym">),</span>
    F.

<span class="kwd">permute</span><span class="sym">(</span>F<span class="sym">,</span> L<span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> T<span class="sym">) -&gt; {</span><span class="kwd">flip</span><span class="sym">(</span>F<span class="sym">,</span> L<span class="sym">,</span> <span class="kwb">tuple_to_list</span><span class="sym">(</span>T<span class="sym">)),</span> T<span class="sym">};</span>
<span class="kwd">permute</span><span class="sym">(</span>F<span class="sym">,</span> L<span class="sym">,</span> N<span class="sym">,</span> T<span class="sym">) -&gt;</span> <span class="kwd">loop</span><span class="sym">(</span>F<span class="sym">,</span> L<span class="sym">,</span> N<span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> T<span class="sym">)</span>.

<span class="kwd">loop</span><span class="sym">(</span>F<span class="sym">,</span> _<span class="sym">,</span> N<span class="sym">,</span> C<span class="sym">,</span> T<span class="sym">)</span> <span class="kwa">when</span> C <span class="sym">&gt;</span> N <span class="sym">-&gt; {</span>F<span class="sym">,</span> T<span class="sym">};</span>
<span class="kwd">loop</span><span class="sym">(</span>F<span class="sym">,</span> L<span class="sym">,</span> N<span class="sym">,</span> C<span class="sym">,</span> T<span class="sym">) -&gt;</span>
    <span class="sym">{</span>F2<span class="sym">,</span> T2<span class="sym">} =</span> <span class="kwd">permute</span><span class="sym">(</span>F<span class="sym">,</span> L<span class="sym">,</span> N<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> T<span class="sym">),</span>
    <span class="kwd">loop</span><span class="sym">(</span>F2<span class="sym">,</span> L<span class="sym">,</span> N<span class="sym">,</span> C<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> <span class="kwd">exch</span><span class="sym">(</span>T2<span class="sym">,</span> N<span class="sym">,</span> C<span class="sym">))</span>.

<span class="kwd">flip</span><span class="sym">(</span>F<span class="sym">,</span> _<span class="sym">, [</span><span class="num">1</span><span class="sym">|</span>_<span class="sym">]) -&gt;</span> F<span class="sym">;</span>
<span class="kwd">flip</span><span class="sym">(</span>F<span class="sym">,</span> L<span class="sym">, [</span>L<span class="sym">|</span>_<span class="sym">]) -&gt;</span> F<span class="sym">;</span>
<span class="kwd">flip</span><span class="sym">(</span>F<span class="sym">,</span> _<span class="sym">,</span> P<span class="sym">) -&gt;</span>
    <span class="kwa">case</span> <span class="kwd">flip</span><span class="sym">(</span>P<span class="sym">,</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">of</span>
        X <span class="kwa">when</span> X <span class="sym">&gt;</span> F <span class="sym">-&gt;</span> X<span class="sym">;</span>
        _ <span class="sym">-&gt;</span> F
    <span class="kwa">end</span>.

<span class="kwd">flip</span><span class="sym">([</span><span class="num">1</span><span class="sym">|</span>_<span class="sym">],</span> F<span class="sym">) -&gt;</span> F<span class="sym">;</span>
<span class="kwd">flip</span><span class="sym">([</span>I<span class="sym">|</span>_<span class="sym">]=</span>L<span class="sym">,</span> F<span class="sym">) -&gt;</span>
    <span class="sym">{</span>H<span class="sym">,</span> T<span class="sym">} =</span> lists<span class="sym">:</span><span class="kwd">split</span><span class="sym">(</span>I<span class="sym">,</span> L<span class="sym">),</span>
    <span class="kwd">flip</span><span class="sym">(</span>lists<span class="sym">:</span><span class="kwd">reverse</span><span class="sym">(</span>H<span class="sym">)++</span>T<span class="sym">,</span> F<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>.

<span class="slc">% vim: ts=4 ft=erlang</span>
