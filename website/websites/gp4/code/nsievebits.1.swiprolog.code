<span class="slc">% ----------------------------------------------------------------------</span>
<span class="slc">% The Great Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">%</span>
<span class="slc">% Assumes execution using the following command-line usage:</span>
<span class="slc">%</span>
<span class="slc">%   pl -q -g main -t halt -s SOURCENAME -- USERARG1 ... &lt; in &gt; out</span>
<span class="slc">%</span>
<span class="slc">% This is a modified version of the orignal 'nsieve.swiprolog'</span>
<span class="slc">% submission. Whilst that particular implementation made quite heavy</span>
<span class="slc">% demands of the global stack [owing to the creation of a very large</span>
<span class="slc">% array], the current version:</span>
<span class="slc">%</span>
<span class="slc">% * Requires an array approximately 1/32 the size since each array slot</span>
<span class="slc">%   stores 32 encoded values [as opposed to a single value]</span>
<span class="slc">%</span>
<span class="slc">% * As expected, utilises bit twiddling for encoding / decoding values</span>
<span class="slc">%</span>
<span class="slc">% In short, while memory use is curbed, runtime suffers [a trading of</span>
<span class="slc">% speed for a saving in space as they say]. At a value of N = 9 runtime</span>
<span class="slc">% *should* be within the timeout period, but probably not by much</span>
<span class="slc">%</span>
<span class="slc">% Contributed by Anthony Borla</span>
<span class="slc">% ----------------------------------------------------------------------</span>

main <span class="sym">:-</span>
  cmdlNumArg<span class="sym">(</span><span class="num">1</span><span class="sym">,</span> N<span class="sym">),</span>

  N1 <span class="kwa">is</span> <span class="num">10000</span> <span class="sym">&lt;&lt;</span> N<span class="sym">,</span>
  N2 <span class="kwa">is</span> <span class="num">10000</span> <span class="sym">&lt;&lt; (</span>N <span class="sym">-</span> <span class="num">1</span><span class="sym">),</span>
  N3 <span class="kwa">is</span> <span class="num">10000</span> <span class="sym">&lt;&lt; (</span>N <span class="sym">-</span> <span class="num">2</span><span class="sym">),</span>

  calcAndshowSieve<span class="sym">(</span>N1<span class="sym">),</span>
  calcAndshowSieve<span class="sym">(</span>N2<span class="sym">),</span>
  calcAndshowSieve<span class="sym">(</span>N3<span class="sym">)</span>.

<span class="slc">% ------------------------------- %</span>

calcAndshowSieve<span class="sym">(</span>N<span class="sym">) :-</span>
  make_array<span class="sym">(</span>ns<span class="sym">,</span> N<span class="sym">,</span> <span class="num">0xffffffff</span><span class="sym">,</span> Array<span class="sym">),</span>
  nsieve<span class="sym">(</span><span class="num">2</span><span class="sym">,</span> Array<span class="sym">,</span> N<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> R<span class="sym">),</span>
  format<span class="sym">(</span><span class="str">'Primes up to~t~w~21|~t~w~30|~n'</span><span class="sym">, [</span>N<span class="sym">,</span> R<span class="sym">])</span>.

<span class="slc">% ------------------------------- %</span>

nsieve<span class="sym">(</span>ASize<span class="sym">,</span> _<span class="sym">,</span> ASize<span class="sym">,</span> R<span class="sym">,</span> R<span class="sym">) :- !</span>.

nsieve<span class="sym">(</span>N<span class="sym">,</span> Array<span class="sym">,</span> ASize<span class="sym">,</span> A<span class="sym">,</span> R<span class="sym">) :-</span>
  <span class="sym">(</span>is_arg<span class="sym">(</span>N<span class="sym">,</span> Array<span class="sym">) -&gt;</span> clear_sieve<span class="sym">(</span>N<span class="sym">,</span> N<span class="sym">,</span> Array<span class="sym">,</span> ASize<span class="sym">),</span> A1 <span class="kwa">is</span> A <span class="sym">+</span> <span class="num">1</span> <span class="sym">;</span> A1 <span class="kwa">is</span> A<span class="sym">),</span>
  N1 <span class="kwa">is</span> N <span class="sym">+</span> <span class="num">1</span><span class="sym">, !,</span> nsieve<span class="sym">(</span>N1<span class="sym">,</span> Array<span class="sym">,</span> ASize<span class="sym">,</span> A1<span class="sym">,</span> R<span class="sym">)</span>.

<span class="slc">% ------------- %</span>

clear_sieve<span class="sym">(</span>N<span class="sym">,</span> M<span class="sym">,</span> Array<span class="sym">,</span> ASize<span class="sym">) :-</span>
  N1 <span class="kwa">is</span> N <span class="sym">+</span> M<span class="sym">,</span> clear_sieve_<span class="sym">(</span>N1<span class="sym">,</span> M<span class="sym">,</span> Array<span class="sym">,</span> ASize<span class="sym">)</span>.

<span class="slc">% ------------- %</span>

clear_sieve_<span class="sym">(</span>N<span class="sym">,</span> _<span class="sym">,</span> _<span class="sym">,</span> ASize<span class="sym">) :-</span> ASize <span class="sym">&lt;</span> N<span class="sym">, !</span>.

clear_sieve_<span class="sym">(</span>N<span class="sym">,</span> M<span class="sym">,</span> Array<span class="sym">,</span> ASize<span class="sym">) :-</span>
  clear_arg<span class="sym">(</span>N<span class="sym">,</span> Array<span class="sym">),</span>
  N1 <span class="kwa">is</span> N <span class="sym">+</span> M<span class="sym">, !,</span> clear_sieve_<span class="sym">(</span>N1<span class="sym">,</span> M<span class="sym">,</span> Array<span class="sym">,</span> ASize<span class="sym">)</span>.

<span class="slc">% ------------------------------- %</span>

array_slots<span class="sym">(</span>N<span class="sym">,</span> Slots<span class="sym">) :-</span> Slots <span class="kwa">is</span> <span class="sym">((</span>N <span class="sym">+</span> <span class="num">31</span><span class="sym">) &gt;&gt;</span> <span class="num">5</span><span class="sym">) +</span> <span class="num">1</span>.

<span class="slc">% ------------- %</span>

make_array<span class="sym">(</span>Name<span class="sym">,</span> N<span class="sym">,</span> V<span class="sym">,</span> Array<span class="sym">) :-</span>
  array_slots<span class="sym">(</span>N<span class="sym">,</span> Slots<span class="sym">),</span>
  <span class="kwb">functor</span><span class="sym">(</span>Array<span class="sym">,</span> Name<span class="sym">,</span> Slots<span class="sym">),</span>
  fill_array<span class="sym">(</span>Slots<span class="sym">,</span> V<span class="sym">,</span> Array<span class="sym">)</span>.

<span class="slc">% ------------- %</span>

fill_array<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> _<span class="sym">,</span> _<span class="sym">) :- !</span>.

fill_array<span class="sym">(</span>N<span class="sym">,</span> V<span class="sym">,</span> Array<span class="sym">) :-</span>
  nb_setarg<span class="sym">(</span>N<span class="sym">,</span> Array<span class="sym">,</span> V<span class="sym">),</span> N1 <span class="kwa">is</span> N <span class="sym">-</span> <span class="num">1</span><span class="sym">, !,</span>
  fill_array<span class="sym">(</span>N1<span class="sym">,</span> V<span class="sym">,</span> Array<span class="sym">)</span>.

<span class="slc">% ------------- %</span>

clear_arg<span class="sym">(</span>N<span class="sym">,</span> Array<span class="sym">) :-</span>
  Idx <span class="kwa">is</span> <span class="sym">(</span>N <span class="sym">&gt;&gt;</span> <span class="num">5</span><span class="sym">) +</span> <span class="num">1</span><span class="sym">,</span> Value <span class="kwa">is</span> <span class="sym">(</span><span class="num">1</span> <span class="sym">&lt;&lt; (</span>N <span class="sym">/</span>\ <span class="num">31</span><span class="sym">)),</span> <span class="kwb">arg</span><span class="sym">(</span>Idx<span class="sym">,</span> Array<span class="sym">,</span> OldValue<span class="sym">),</span>
  Complement <span class="kwa">is</span> \ Value<span class="sym">,</span>
  NewValue <span class="kwa">is</span> OldValue <span class="sym">/</span>\ Complement<span class="sym">,</span>
  <span class="sym">(</span>Complement <span class="sym">&lt;</span> NewValue <span class="sym">-&gt;</span> nb_setarg<span class="sym">(</span>Idx<span class="sym">,</span> Array<span class="sym">,</span> Complement<span class="sym">) ;</span> nb_setarg<span class="sym">(</span>Idx<span class="sym">,</span> Array<span class="sym">,</span> NewValue<span class="sym">))</span>.

is_arg<span class="sym">(</span>N<span class="sym">,</span> Array<span class="sym">) :-</span>
  Idx <span class="kwa">is</span> <span class="sym">(</span>N <span class="sym">&gt;&gt;</span> <span class="num">5</span><span class="sym">) +</span> <span class="num">1</span><span class="sym">,</span> Value <span class="kwa">is</span> <span class="num">1</span> <span class="sym">&lt;&lt; (</span>N <span class="sym">/</span>\ <span class="num">31</span><span class="sym">),</span> <span class="kwb">arg</span><span class="sym">(</span>Idx<span class="sym">,</span> Array<span class="sym">,</span> OldValue<span class="sym">),</span>
  CurrentValue <span class="kwa">is</span> OldValue <span class="sym">/</span>\ Value<span class="sym">,</span>
  CurrentValue <span class="sym">=</span>\= <span class="num">0</span>.

<span class="slc">% ------------------------------- %</span>

argument_value<span class="sym">(</span>N<span class="sym">,</span> Arg<span class="sym">) :-</span>
  <span class="kwb">current_prolog_flag</span><span class="sym">(</span>argv<span class="sym">,</span> Cmdline<span class="sym">),</span> append<span class="sym">(</span>_<span class="sym">, [--|</span>UserArgs<span class="sym">],</span> Cmdline<span class="sym">),</span>
  Nth <span class="kwa">is</span> N <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> nth0<span class="sym">(</span>Nth<span class="sym">,</span> UserArgs<span class="sym">,</span> Arg<span class="sym">)</span>.

cmdlNumArg<span class="sym">(</span>Nth<span class="sym">,</span> N<span class="sym">) :-</span>
  argument_value<span class="sym">(</span>Nth<span class="sym">,</span> Arg<span class="sym">),</span> <span class="kwb">catch</span><span class="sym">(</span>atom_number<span class="sym">(</span>Arg<span class="sym">,</span> N<span class="sym">),</span> _<span class="sym">,</span> <span class="kwa">fail</span><span class="sym">) ;</span> <span class="kwa">halt</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.

