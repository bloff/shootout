#<span class="hl sym">!/</span>usr<span class="hl sym">/</span>bin<span class="hl sym">/</span>mzscheme -r
<span class="hl slc">;; $Id: nsieve-mzscheme.code,v 1.52 2008-07-22 01:11:45 igouy-guest Exp $</span>
<span class="hl slc">;; The Great Computer Language Shootout</span>
<span class="hl slc">;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;</span>
<span class="hl slc">;; nsieve benchmark for The Computer Language Shootout</span>
<span class="hl slc">;; Written by Dima Dorfman, 2004</span>
<span class="hl slc">;; Converted to MzScheme by Brent Fulgham</span>
<span class="hl sym">(</span>module nsieve mzscheme
  <span class="hl sym">(</span>require <span class="hl sym">(</span>only <span class="hl sym">(</span>lib <span class="hl str">&quot;13.ss&quot;</span> <span class="hl str">&quot;srfi&quot;</span><span class="hl sym">)</span> string-index string-pad<span class="hl sym">))</span>

  <span class="hl sym">(</span>define <span class="hl sym">(</span>nsieve m<span class="hl sym">)</span>
    <span class="hl sym">(</span>let <span class="hl sym">((</span>a <span class="hl sym">(</span>make-vector m #t<span class="hl sym">)))</span>
      <span class="hl sym">(</span>let loop <span class="hl sym">((</span>i <span class="hl num">2</span><span class="hl sym">) (</span>n <span class="hl num">0</span><span class="hl sym">))</span>
        <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(&lt;</span> i m<span class="hl sym">)</span>
            <span class="hl sym">(</span>begin
	      <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>vector-ref a i<span class="hl sym">)</span>
	          <span class="hl sym">(</span>begin
		    <span class="hl sym">(</span>let clear <span class="hl sym">((</span>j <span class="hl sym">(+</span> i i<span class="hl sym">)))</span>
		      <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(&lt;</span> j m<span class="hl sym">)</span>
		          <span class="hl sym">(</span>begin
			    <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> a j #f<span class="hl sym">)</span>
			    <span class="hl sym">(</span>clear <span class="hl sym">(+</span> j i<span class="hl sym">)))))</span>
		      <span class="hl sym">(</span>loop <span class="hl sym">(+</span> <span class="hl num">1</span> i<span class="hl sym">) (+</span> <span class="hl num">1</span> n<span class="hl sym">)))</span>
		  <span class="hl sym">(</span>loop <span class="hl sym">(+</span> <span class="hl num">1</span> i<span class="hl sym">)</span> n<span class="hl sym">)))</span>
	    n<span class="hl sym">))))</span>

  <span class="hl sym">(</span>define <span class="hl sym">(</span>test n<span class="hl sym">)</span>
    <span class="hl sym">(</span>let<span class="hl sym">* ((</span>m <span class="hl sym">(* (</span><span class="hl kwa">expt</span> <span class="hl num">2</span> n<span class="hl sym">)</span> <span class="hl num">10000</span><span class="hl sym">))</span>
           <span class="hl sym">(</span>count <span class="hl sym">(</span>nsieve m<span class="hl sym">)))</span>
      <span class="hl sym">(</span>printf <span class="hl str">&quot;Primes up to ~a ~a~%&quot;</span>
              <span class="hl sym">(</span>string-pad <span class="hl sym">(</span>number-<span class="hl sym">&gt;</span>string m<span class="hl sym">)</span> <span class="hl num">8</span><span class="hl sym">)</span>
              <span class="hl sym">(</span>string-pad <span class="hl sym">(</span>number-<span class="hl sym">&gt;</span>string count<span class="hl sym">)</span> <span class="hl num">8</span><span class="hl sym">))))</span>

  <span class="hl sym">(</span>define <span class="hl sym">(</span>main args<span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(&lt; (</span>vector-<span class="hl kwa">length</span> args<span class="hl sym">)</span> <span class="hl num">1</span><span class="hl sym">)</span>
        <span class="hl sym">(</span>begin
          <span class="hl sym">(</span>display <span class="hl str">&quot;An argument is required&quot;</span><span class="hl sym">) (</span>newline<span class="hl sym">)</span> <span class="hl num">2</span><span class="hl sym">)</span>
        <span class="hl sym">(</span>let <span class="hl sym">((</span>n <span class="hl sym">(</span>string-<span class="hl sym">&gt;</span>number <span class="hl sym">(</span>vector-ref args <span class="hl num">0</span><span class="hl sym">))))</span>
	  <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">not</span> n<span class="hl sym">)</span>
	      <span class="hl sym">(</span>begin
                <span class="hl sym">(</span>display <span class="hl str">&quot;An integer is required&quot;</span><span class="hl sym">) (</span>newline<span class="hl sym">)</span> <span class="hl num">2</span><span class="hl sym">)</span>
	      <span class="hl sym">(</span>begin
	        <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(&gt;=</span> n <span class="hl num">0</span><span class="hl sym">) (</span>test n<span class="hl sym">))</span>
	        <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(&gt;=</span> n <span class="hl num">1</span><span class="hl sym">) (</span>test <span class="hl sym">(</span>- n <span class="hl num">1</span><span class="hl sym">)))</span>
	        <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(&gt;=</span> n <span class="hl num">2</span><span class="hl sym">) (</span>test <span class="hl sym">(</span>- n <span class="hl num">2</span><span class="hl sym">)))</span>
	         <span class="hl num">0</span><span class="hl sym">)))))</span>

  <span class="hl sym">(</span>main <span class="hl sym">(</span>current-<span class="hl kwa">command</span>-<span class="hl kwa">line</span>-arguments<span class="hl sym">)))</span>
