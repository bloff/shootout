<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Keenan Tims */</span>

<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span>concurrent<span class="hl sym">.</span>locks<span class="hl sym">.</span><span class="hl kwc">Condition</span><span class="hl sym">;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span>concurrent<span class="hl sym">.</span>locks<span class="hl sym">.</span><span class="hl kwc">Lock</span><span class="hl sym">;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span>concurrent<span class="hl sym">.</span>locks<span class="hl sym">.</span><span class="hl kwc">ReentrantLock</span><span class="hl sym">;</span>

<span class="hl kwa">public class</span> chameneos <span class="hl sym">{</span>

	<span class="hl kwa">private</span> MeetingPlace mp<span class="hl sym">;</span>

	<span class="hl kwa">public static final</span> Colour<span class="hl sym">[]</span> COLOURS <span class="hl sym">=</span> Colour<span class="hl sym">.</span><span class="hl kwd">values</span><span class="hl sym">();</span>

	<span class="hl kwa">private</span> Creature<span class="hl sym">[]</span> creatures <span class="hl sym">=</span> <span class="hl kwa">new</span> Creature<span class="hl sym">[</span>COLOURS<span class="hl sym">.</span>length<span class="hl sym">];</span>

	<span class="hl kwa">public</span> enum Colour <span class="hl sym">{</span>
		RED<span class="hl sym">,</span> BLUE<span class="hl sym">,</span> YELLOW<span class="hl sym">,</span> FADED
	<span class="hl sym">}</span>

	<span class="hl kwa">public class</span> Creature <span class="hl kwa">extends</span> <span class="hl kwc">Thread</span> <span class="hl sym">{</span>

		<span class="hl kwa">private</span> MeetingPlace mp<span class="hl sym">;</span>

		<span class="hl kwa">private</span> Colour colour<span class="hl sym">;</span>

		<span class="hl kwa">private</span> <span class="hl kwb">int</span> met <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

		<span class="hl kwa">public</span> <span class="hl kwd">Creature</span><span class="hl sym">(</span>Colour c<span class="hl sym">,</span> MeetingPlace mp<span class="hl sym">) {</span>
			<span class="hl kwa">this</span><span class="hl sym">.</span>colour <span class="hl sym">=</span> c<span class="hl sym">;</span>
			<span class="hl kwa">this</span><span class="hl sym">.</span>mp <span class="hl sym">=</span> mp<span class="hl sym">;</span>
		<span class="hl sym">}</span>

		<span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">run</span><span class="hl sym">() {</span>
			<span class="hl kwa">while</span> <span class="hl sym">(</span>colour <span class="hl sym">!=</span> Colour<span class="hl sym">.</span>FADED<span class="hl sym">)</span>
				<span class="hl kwa">try</span> <span class="hl sym">{</span>
					<span class="hl kwd">meet</span><span class="hl sym">();</span>
				<span class="hl sym">}</span> <span class="hl kwa">catch</span> <span class="hl sym">(</span><span class="hl kwc">Exception</span> e<span class="hl sym">) {</span>
					<span class="hl kwc">System</span><span class="hl sym">.</span><span class="hl kwd">exit</span><span class="hl sym">(-</span><span class="hl num">1</span><span class="hl sym">);</span>
				<span class="hl sym">}</span>
		<span class="hl sym">}</span>

		<span class="hl kwa">public synchronized</span> <span class="hl kwb">void</span> <span class="hl kwd">meet</span><span class="hl sym">() {</span>
			Colour other<span class="hl sym">;</span>
			<span class="hl kwa">try</span> <span class="hl sym">{</span>
				other <span class="hl sym">=</span> mp<span class="hl sym">.</span><span class="hl kwd">meet</span><span class="hl sym">(</span>colour<span class="hl sym">);</span>
			<span class="hl sym">}</span> <span class="hl kwa">catch</span> <span class="hl sym">(</span><span class="hl kwc">Exception</span> e<span class="hl sym">) {</span>
				e<span class="hl sym">.</span><span class="hl kwd">printStackTrace</span><span class="hl sym">();</span>
				<span class="hl kwc">System</span><span class="hl sym">.</span><span class="hl kwd">exit</span><span class="hl sym">(-</span><span class="hl num">1</span><span class="hl sym">);</span>
				<span class="hl kwa">return</span><span class="hl sym">;</span>
			<span class="hl sym">}</span>
			<span class="hl kwa">if</span> <span class="hl sym">(</span>other <span class="hl sym">==</span> Colour<span class="hl sym">.</span>FADED<span class="hl sym">)</span>
				colour <span class="hl sym">=</span> Colour<span class="hl sym">.</span>FADED<span class="hl sym">;</span>
			<span class="hl kwa">else</span> <span class="hl sym">{</span>
				met<span class="hl sym">++;</span>
				colour <span class="hl sym">=</span> <span class="hl kwd">complement</span><span class="hl sym">(</span>other<span class="hl sym">);</span>
			<span class="hl sym">}</span>
		<span class="hl sym">}</span>

		<span class="hl kwa">private</span> Colour <span class="hl kwd">complement</span><span class="hl sym">(</span>Colour other<span class="hl sym">) {</span>
			<span class="hl kwa">if</span> <span class="hl sym">(</span>colour <span class="hl sym">==</span> other<span class="hl sym">)</span>
				<span class="hl kwa">return</span> colour<span class="hl sym">;</span>
			<span class="hl kwa">switch</span> <span class="hl sym">(</span>colour<span class="hl sym">) {</span>
			<span class="hl kwa">case</span> BLUE<span class="hl sym">:</span>
				<span class="hl kwa">return</span> other <span class="hl sym">==</span> Colour<span class="hl sym">.</span>RED ? Colour<span class="hl sym">.</span>YELLOW <span class="hl sym">:</span> Colour<span class="hl sym">.</span>RED<span class="hl sym">;</span>
			<span class="hl kwa">case</span> RED<span class="hl sym">:</span>
				<span class="hl kwa">return</span> other <span class="hl sym">==</span> Colour<span class="hl sym">.</span>BLUE ? Colour<span class="hl sym">.</span>YELLOW <span class="hl sym">:</span> Colour<span class="hl sym">.</span>BLUE<span class="hl sym">;</span>
			<span class="hl kwa">case</span> YELLOW<span class="hl sym">:</span>
				<span class="hl kwa">return</span> other <span class="hl sym">==</span> Colour<span class="hl sym">.</span>BLUE ? Colour<span class="hl sym">.</span>RED <span class="hl sym">:</span> Colour<span class="hl sym">.</span>BLUE<span class="hl sym">;</span>
			<span class="hl kwa">default</span><span class="hl sym">:</span>
				<span class="hl kwa">return</span> colour<span class="hl sym">;</span>
			<span class="hl sym">}</span>
		<span class="hl sym">}</span>

		<span class="hl kwa">public</span> <span class="hl kwb">int</span> <span class="hl kwd">getCreaturesMet</span><span class="hl sym">() {</span>
			<span class="hl kwa">return</span> met<span class="hl sym">;</span>
		<span class="hl sym">}</span>

		<span class="hl kwa">public</span> Colour <span class="hl kwd">getColour</span><span class="hl sym">() {</span>
			<span class="hl kwa">return</span> colour<span class="hl sym">;</span>
		<span class="hl sym">}</span>
	<span class="hl sym">}</span>

	<span class="hl kwa">public class</span> MeetingPlace <span class="hl sym">{</span>
		Colour first<span class="hl sym">,</span> second<span class="hl sym">;</span>

		<span class="hl kwb">boolean</span> firstCall <span class="hl sym">=</span> true<span class="hl sym">,</span> mustWait <span class="hl sym">=</span> false<span class="hl sym">;</span>

		<span class="hl kwb">int</span> n<span class="hl sym">;</span>

		<span class="hl kwa">public</span> <span class="hl kwd">MeetingPlace</span><span class="hl sym">(</span><span class="hl kwb">int</span> n<span class="hl sym">) {</span>
			<span class="hl kwa">this</span><span class="hl sym">.</span>n <span class="hl sym">=</span> n<span class="hl sym">;</span>
		<span class="hl sym">}</span>

		<span class="hl kwa">public</span> Colour <span class="hl kwd">meet</span><span class="hl sym">(</span>Colour me<span class="hl sym">)</span> <span class="hl kwa">throws</span> <span class="hl kwc">Exception</span> <span class="hl sym">{</span>
			Colour other<span class="hl sym">;</span>

			<span class="hl kwa">while</span> <span class="hl sym">(</span>mustWait<span class="hl sym">) {</span>
				<span class="hl kwc">Thread</span><span class="hl sym">.</span><span class="hl kwd">yield</span><span class="hl sym">();</span>
			<span class="hl sym">}</span>

			<span class="hl kwa">if</span> <span class="hl sym">(</span>firstCall<span class="hl sym">) {</span>
				<span class="hl kwa">if</span> <span class="hl sym">(</span>n<span class="hl sym">-- &gt;</span> <span class="hl num">0</span><span class="hl sym">) {</span>
					first <span class="hl sym">=</span> me<span class="hl sym">;</span>
					firstCall <span class="hl sym">=</span> false<span class="hl sym">;</span>

					<span class="hl kwa">while</span> <span class="hl sym">(!</span>firstCall<span class="hl sym">) {</span>
						<span class="hl kwc">Thread</span><span class="hl sym">.</span><span class="hl kwd">yield</span><span class="hl sym">();</span>
					<span class="hl sym">}</span>
					mustWait <span class="hl sym">=</span> false<span class="hl sym">;</span>
					other <span class="hl sym">=</span> second<span class="hl sym">;</span>
				<span class="hl sym">}</span> <span class="hl kwa">else</span>
					other <span class="hl sym">=</span> Colour<span class="hl sym">.</span>FADED<span class="hl sym">;</span>
			<span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
				second <span class="hl sym">=</span> me<span class="hl sym">;</span>
				other <span class="hl sym">=</span> first<span class="hl sym">;</span>
				firstCall <span class="hl sym">=</span> true<span class="hl sym">;</span>
				mustWait <span class="hl sym">=</span> true<span class="hl sym">;</span>
			<span class="hl sym">}</span>

			<span class="hl kwa">return</span> other<span class="hl sym">;</span>
		<span class="hl sym">}</span>
	<span class="hl sym">}</span>

	<span class="hl kwa">public</span> <span class="hl kwd">chameneos</span><span class="hl sym">(</span><span class="hl kwb">int</span> n<span class="hl sym">)</span> <span class="hl kwa">throws</span> <span class="hl kwc">InterruptedException</span> <span class="hl sym">{</span>
		<span class="hl kwb">int</span> meetings <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
		mp <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">MeetingPlace</span><span class="hl sym">(</span>n<span class="hl sym">);</span>

		<span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> COLOURS<span class="hl sym">.</span>length<span class="hl sym">;</span> i<span class="hl sym">++) {</span>
			creatures<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">Creature</span><span class="hl sym">(</span>COLOURS<span class="hl sym">[</span>i<span class="hl sym">],</span> mp<span class="hl sym">);</span>
			creatures<span class="hl sym">[</span>i<span class="hl sym">].</span><span class="hl kwd">start</span><span class="hl sym">();</span>
		<span class="hl sym">}</span>

		<span class="hl slc">// wait for all threads to complete</span>
		<span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> COLOURS<span class="hl sym">.</span>length<span class="hl sym">;</span> i<span class="hl sym">++)</span>
			creatures<span class="hl sym">[</span>i<span class="hl sym">].</span><span class="hl kwd">join</span><span class="hl sym">();</span>

		<span class="hl slc">// sum all the meetings</span>
		<span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> COLOURS<span class="hl sym">.</span>length<span class="hl sym">;</span> i<span class="hl sym">++)</span>
			meetings <span class="hl sym">+=</span> creatures<span class="hl sym">[</span>i<span class="hl sym">].</span><span class="hl kwd">getCreaturesMet</span><span class="hl sym">();</span>

		<span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span>meetings<span class="hl sym">);</span>
	<span class="hl sym">}</span>

	<span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">)</span> <span class="hl kwa">throws</span> <span class="hl kwc">Exception</span> <span class="hl sym">{</span>
		<span class="hl kwa">if</span> <span class="hl sym">(</span>args<span class="hl sym">.</span>length <span class="hl sym">&lt;</span> <span class="hl num">1</span><span class="hl sym">)</span>
			<span class="hl kwa">throw new</span> <span class="hl kwc">IllegalArgumentException</span><span class="hl sym">();</span>
		<span class="hl kwa">new</span> <span class="hl kwd">chameneos</span><span class="hl sym">(</span><span class="hl kwc">Integer</span><span class="hl sym">.</span><span class="hl kwd">parseInt</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]));</span>
	<span class="hl sym">}</span>
<span class="hl sym">}</span>
<span class="hl slc">//</span>
