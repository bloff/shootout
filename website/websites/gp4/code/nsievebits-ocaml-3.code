<span class="com">(* The Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Contributed by Christophe TROESTLER</span>
<span class="com"> * modified by Mario Pernici</span>
<span class="com"> * modified by Vladimir Silyaev</span>
<span class="com"> *)</span>

<span class="kwa">open</span> Bigarray

<span class="kwa">let</span> <span class="kwd">set_false</span> <span class="sym">(</span>a<span class="sym">:(</span><span class="kwb">int</span><span class="sym">,</span> int8_unsigned_elt<span class="sym">,</span> c_layout<span class="sym">)</span> Array1.t<span class="sym">)</span> i <span class="sym">=</span>
  <span class="kwa">let</span> ic <span class="sym">=</span> i <span class="kwa">lsr</span> <span class="num">3</span> <span class="kwa">in</span>
  <span class="kwa">let</span> v <span class="sym">=</span> a.<span class="sym">{</span>ic<span class="sym">}</span> <span class="kwa">in</span>
  <span class="kwa">let</span> bit <span class="sym">=</span> v <span class="kwa">land</span> <span class="kwd">lnot</span><span class="sym">(</span><span class="num">1</span> <span class="kwa">lsl</span> <span class="sym">(</span>i <span class="kwa">land</span> <span class="num">0x7</span><span class="sym">))</span> <span class="kwa">in</span>
    <span class="kwa">if</span> v <span class="sym">&lt;&gt;</span> bit <span class="kwa">then</span> a.<span class="sym">{</span>ic<span class="sym">} &lt;-</span> bit

<span class="kwa">let</span> nsieve m <span class="sym">=</span>
  <span class="kwa">let</span> a <span class="sym">=</span>  Array1.create int8_unsigned <span class="kwd">c_layout</span> <span class="sym">((</span>m <span class="kwa">lsr</span> <span class="num">3</span><span class="sym">) +</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">in</span>
  Array1.fill a <span class="num">0xFF</span><span class="sym">;</span>
  <span class="kwa">let</span> count <span class="sym">=</span> ref <span class="num">0</span> <span class="kwa">in</span>
  <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">2</span> <span class="kwa">to</span> m <span class="sym">-</span> <span class="num">1</span> <span class="kwa">do</span>
    <span class="kwa">if</span> a.<span class="sym">{</span>i <span class="kwa">lsr</span> <span class="num">3</span><span class="sym">}</span> <span class="kwa">land</span> <span class="sym">(</span><span class="num">1</span> <span class="kwa">lsl</span> <span class="sym">(</span>i <span class="kwa">land</span> <span class="num">0x7</span><span class="sym">)) &gt;</span> <span class="num">0</span> <span class="kwa">then</span>
      <span class="sym">(</span><span class="kwa">let</span> j <span class="sym">=</span> <span class="kwd">ref</span><span class="sym">(</span><span class="num">2</span><span class="sym">*</span>i<span class="sym">)</span> <span class="kwa">in</span>
      <span class="kwa">while</span> <span class="sym">!</span>j <span class="sym">&lt;</span> m <span class="kwa">do</span> set_false a <span class="sym">!</span>j<span class="sym">;</span>  j <span class="sym">:= !</span>j <span class="sym">+</span> i <span class="kwa">done</span><span class="sym">;</span>
      incr count<span class="sym">)</span>
  <span class="kwa">done</span><span class="sym">;</span>
  <span class="sym">!</span>count


<span class="kwa">let</span> test n <span class="sym">=</span>
  <span class="kwa">let</span> m <span class="sym">=</span> <span class="num">10000</span> <span class="kwa">lsl</span> n <span class="kwa">in</span>
  Printf.printf <span class="str">&quot;Primes up to %8i %8i</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="kwd">m</span> <span class="sym">(</span>nsieve m<span class="sym">)</span>

<span class="kwa">let</span> <span class="sym">() =</span>
  <span class="kwa">let</span> n <span class="sym">=</span>
    <span class="kwa">try</span> <span class="kwd">int_of_string</span><span class="sym">(</span>Array.get Sys.argv <span class="num">1</span><span class="sym">)</span>
    <span class="kwa">with</span> _ <span class="sym">-&gt; (</span>Printf.printf <span class="str">&quot;usage: %s N</span><span class="esc">\n</span><span class="str">&quot;</span> Sys.argv.<span class="sym">(</span><span class="num">0</span><span class="sym">);</span> exit <span class="num">2</span><span class="sym">)</span> <span class="kwa">in</span>
  test n<span class="sym">;</span>
  <span class="kwa">if</span> n <span class="sym">&gt;=</span> <span class="num">1</span> <span class="kwa">then</span> <span class="kwd">test</span><span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">);</span>
  <span class="kwa">if</span> n <span class="sym">&gt;=</span> <span class="num">2</span> <span class="kwa">then</span> <span class="kwd">test</span><span class="sym">(</span>n<span class="sym">-</span><span class="num">2</span><span class="sym">)</span>
