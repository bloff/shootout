<span class="hl com">/* The Great Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by James McIlree</span>
<span class="hl com">*/</span>


<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.*;</span>

<span class="hl kwa">public class</span> message <span class="hl sym">{</span>
   <span class="hl kwa">public static final</span> <span class="hl kwb">int</span> numberOfThreads <span class="hl sym">=</span> <span class="hl num">500</span><span class="hl sym">;</span>
   <span class="hl kwa">public static</span> <span class="hl kwb">int</span> numberOfMessagesToSend<span class="hl sym">;</span>

   <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwc">String</span> args<span class="hl sym">[]) {</span>
     numberOfMessagesToSend <span class="hl sym">=</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span><span class="hl kwd">parseInt</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>

     MessageThread chain <span class="hl sym">=</span> null<span class="hl sym">;</span>
     <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>numberOfThreads<span class="hl sym">;</span> i<span class="hl sym">++){</span>
       chain <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">MessageThread</span><span class="hl sym">(</span>chain<span class="hl sym">);</span>
       <span class="hl kwa">new</span> <span class="hl kwc">Thread</span><span class="hl sym">(</span>chain<span class="hl sym">).</span><span class="hl kwd">start</span><span class="hl sym">();</span>
     <span class="hl sym">}</span>

     <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>numberOfMessagesToSend<span class="hl sym">;</span> i<span class="hl sym">++)</span> chain<span class="hl sym">.</span><span class="hl kwd">enqueue</span><span class="hl sym">(</span><span class="hl kwa">new</span> <span class="hl kwc">Integer</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">));</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwa">class</span> MessageThread <span class="hl kwa">implements</span> <span class="hl kwc">Runnable</span> <span class="hl sym">{</span>
   MessageThread nextThread<span class="hl sym">;</span>
   <span class="hl kwc">List</span> list <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">ArrayList</span><span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">);</span>

   <span class="hl kwd">MessageThread</span><span class="hl sym">(</span>MessageThread nextThread<span class="hl sym">){</span>
     <span class="hl kwa">this</span><span class="hl sym">.</span>nextThread <span class="hl sym">=</span> nextThread<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">run</span><span class="hl sym">() {</span>
     <span class="hl kwa">if</span> <span class="hl sym">(</span>nextThread <span class="hl sym">!=</span> null<span class="hl sym">)</span>
       <span class="hl kwa">while</span> <span class="hl sym">(</span>true<span class="hl sym">)</span> nextThread<span class="hl sym">.</span><span class="hl kwd">enqueue</span><span class="hl sym">(</span><span class="hl kwd">dequeue</span><span class="hl sym">());</span>
     <span class="hl kwa">else</span> <span class="hl sym">{</span>
       <span class="hl kwb">int</span> sum <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
       <span class="hl kwb">int</span> finalSum <span class="hl sym">=</span> message<span class="hl sym">.</span>numberOfThreads <span class="hl sym">*</span> message<span class="hl sym">.</span>numberOfMessagesToSend<span class="hl sym">;</span>
       <span class="hl kwa">while</span> <span class="hl sym">(</span>sum <span class="hl sym">&lt;</span> finalSum<span class="hl sym">)</span>
         sum <span class="hl sym">+=</span> <span class="hl kwd">dequeue</span><span class="hl sym">().</span><span class="hl kwd">intValue</span><span class="hl sym">();</span>

       <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span>sum<span class="hl sym">);</span>
       <span class="hl kwc">System</span><span class="hl sym">.</span><span class="hl kwd">exit</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span>
     <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">enqueue</span><span class="hl sym">(</span><span class="hl kwc">Integer</span> message<span class="hl sym">)</span>
   <span class="hl sym">{</span>
     <span class="hl kwa">synchronized</span><span class="hl sym">(</span>list<span class="hl sym">) {</span>
       list<span class="hl sym">.</span><span class="hl kwd">add</span><span class="hl sym">(</span><span class="hl kwa">new</span> <span class="hl kwc">Integer</span><span class="hl sym">(</span>message<span class="hl sym">.</span><span class="hl kwd">intValue</span><span class="hl sym">() +</span> <span class="hl num">1</span><span class="hl sym">));</span>
       <span class="hl kwa">if</span> <span class="hl sym">(</span>list<span class="hl sym">.</span><span class="hl kwd">size</span><span class="hl sym">() ==</span> <span class="hl num">1</span><span class="hl sym">) {</span>
         list<span class="hl sym">.</span><span class="hl kwd">notify</span><span class="hl sym">();</span>
       <span class="hl sym">}</span>
     <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">public</span> <span class="hl kwc">Integer</span> <span class="hl kwd">dequeue</span><span class="hl sym">()</span>
   <span class="hl sym">{</span>
     <span class="hl kwa">synchronized</span><span class="hl sym">(</span>list<span class="hl sym">) {</span>
       <span class="hl kwa">while</span><span class="hl sym">(</span>list<span class="hl sym">.</span><span class="hl kwd">size</span><span class="hl sym">() ==</span> <span class="hl num">0</span><span class="hl sym">) {</span>
         <span class="hl kwa">try</span> <span class="hl sym">{</span> list<span class="hl sym">.</span><span class="hl kwd">wait</span><span class="hl sym">(); }</span> <span class="hl kwa">catch</span> <span class="hl sym">(</span><span class="hl kwc">Exception</span> e<span class="hl sym">) {}</span>
       <span class="hl sym">}</span>
       <span class="hl kwa">return</span> <span class="hl sym">(</span><span class="hl kwc">Integer</span><span class="hl sym">)</span>list<span class="hl sym">.</span><span class="hl kwd">remove</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span>
     <span class="hl sym">}</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>
