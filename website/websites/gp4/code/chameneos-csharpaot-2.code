<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Alp Toker</span>
<span class="hl com">*/</span>

<span class="hl kwa">using</span> System<span class="hl sym">;</span>
<span class="hl kwa">using</span> Thread <span class="hl sym">=</span> System<span class="hl sym">.</span>Collections<span class="hl sym">.</span>IEnumerator<span class="hl sym">;</span>

<span class="hl kwa">class</span> Chameneos
<span class="hl sym">{</span>
   <span class="hl kwa">static</span> Color other<span class="hl sym">,</span> first<span class="hl sym">,</span> second<span class="hl sym">;</span>
   <span class="hl kwa">static</span> <span class="hl kwb">int</span> n<span class="hl sym">,</span> meetings<span class="hl sym">;</span>

   <span class="hl kwa">static</span> Thread <span class="hl kwd">Creature</span> <span class="hl sym">(</span>Color me<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwb">int</span> met <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

      <span class="hl kwa">while</span> <span class="hl sym">(</span><span class="hl kwa">true</span><span class="hl sym">) {</span>
         <span class="hl slc">//wait until meeting place clears</span>
         <span class="hl kwa">while</span> <span class="hl sym">(</span>second <span class="hl sym">!=</span> Color<span class="hl sym">.</span>Faded<span class="hl sym">)</span>
            yield <span class="hl kwa">return null</span><span class="hl sym">;</span>

         other <span class="hl sym">=</span> first<span class="hl sym">;</span>

         <span class="hl kwa">if</span> <span class="hl sym">(</span>other <span class="hl sym">!=</span> Color<span class="hl sym">.</span>Faded<span class="hl sym">)</span>
            second <span class="hl sym">=</span> me<span class="hl sym">;</span>
         <span class="hl kwa">else</span> <span class="hl sym">{</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>n <span class="hl sym">&lt;=</span> <span class="hl num">0</span><span class="hl sym">) {</span>
               meetings <span class="hl sym">+=</span> met<span class="hl sym">;</span>
               yield <span class="hl kwa">return null</span><span class="hl sym">;</span>

               <span class="hl slc">//all faded</span>
               yield <span class="hl kwa">break</span><span class="hl sym">;</span>
            <span class="hl sym">}</span>

            n<span class="hl sym">--;</span>
            first <span class="hl sym">=</span> me<span class="hl sym">;</span>

            <span class="hl slc">//wait for another creature</span>
            <span class="hl kwa">while</span> <span class="hl sym">(</span>second <span class="hl sym">==</span> Color<span class="hl sym">.</span>Faded<span class="hl sym">)</span>
               yield <span class="hl kwa">return null</span><span class="hl sym">;</span>

            other <span class="hl sym">=</span> second<span class="hl sym">;</span>

            first <span class="hl sym">=</span> Color<span class="hl sym">.</span>Faded<span class="hl sym">;</span>
            second <span class="hl sym">=</span> Color<span class="hl sym">.</span>Faded<span class="hl sym">;</span>
            yield <span class="hl kwa">return null</span><span class="hl sym">;</span>
         <span class="hl sym">}</span>

         <span class="hl slc">//perform meeting</span>
         met<span class="hl sym">++;</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>me <span class="hl sym">!=</span> other<span class="hl sym">)</span>
            me <span class="hl sym">=</span> <span class="hl kwd">Complement</span> <span class="hl sym">(</span>me<span class="hl sym">);</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">static</span> Color <span class="hl kwd">Complement</span> <span class="hl sym">(</span>Color me<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">switch</span> <span class="hl sym">(</span>me<span class="hl sym">)</span>
      <span class="hl sym">{</span>
         <span class="hl kwa">case</span> Color<span class="hl sym">.</span>Blue<span class="hl sym">:</span>
            <span class="hl kwa">return</span> other <span class="hl sym">==</span> Color<span class="hl sym">.</span>Red ? Color<span class="hl sym">.</span>Yellow <span class="hl sym">:</span> Color<span class="hl sym">.</span>Red<span class="hl sym">;</span>
         <span class="hl kwa">case</span> Color<span class="hl sym">.</span>Red<span class="hl sym">:</span>
            <span class="hl kwa">return</span> other <span class="hl sym">==</span> Color<span class="hl sym">.</span>Blue ? Color<span class="hl sym">.</span>Yellow <span class="hl sym">:</span> Color<span class="hl sym">.</span>Blue<span class="hl sym">;</span>
         <span class="hl kwa">case</span> Color<span class="hl sym">.</span>Yellow<span class="hl sym">:</span>
            <span class="hl kwa">return</span> other <span class="hl sym">==</span> Color<span class="hl sym">.</span>Blue ? Color<span class="hl sym">.</span>Red <span class="hl sym">:</span> Color<span class="hl sym">.</span>Blue<span class="hl sym">;</span>
         <span class="hl kwa">default</span><span class="hl sym">:</span> <span class="hl kwa">return</span> me<span class="hl sym">;</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">static</span> <span class="hl kwb">int</span> <span class="hl kwd">Schedule</span> <span class="hl sym">(</span>Thread<span class="hl sym">[]</span> threads<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span><span class="hl kwa">true</span><span class="hl sym">)</span>
         <span class="hl kwa">foreach</span> <span class="hl sym">(</span>Thread thread in threads<span class="hl sym">)</span>
            <span class="hl kwa">if</span> <span class="hl sym">(!</span>thread<span class="hl sym">.</span><span class="hl kwd">MoveNext</span> <span class="hl sym">())</span>
               <span class="hl kwa">return</span> meetings<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwb">enum</span> Color <span class="hl sym">{</span> Faded<span class="hl sym">,</span> Blue<span class="hl sym">,</span> Red<span class="hl sym">,</span> Yellow <span class="hl sym">}</span>

   <span class="hl kwa">static</span> <span class="hl kwb">void</span> <span class="hl kwd">Main</span> <span class="hl sym">(</span><span class="hl kwb">string</span><span class="hl sym">[]</span> args<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      n <span class="hl sym">=</span> Int32<span class="hl sym">.</span><span class="hl kwd">Parse</span> <span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>

      Thread<span class="hl sym">[]</span> threads <span class="hl sym">=</span> <span class="hl kwa">new</span> Thread<span class="hl sym">[] {</span><span class="hl kwd">Creature</span> <span class="hl sym">(</span>Color<span class="hl sym">.</span>Blue<span class="hl sym">),</span> <span class="hl kwd">Creature</span> <span class="hl sym">(</span>Color<span class="hl sym">.</span>Red<span class="hl sym">),</span> <span class="hl kwd">Creature</span> <span class="hl sym">(</span>Color<span class="hl sym">.</span>Yellow<span class="hl sym">),</span> <span class="hl kwd">Creature</span> <span class="hl sym">(</span>Color<span class="hl sym">.</span>Blue<span class="hl sym">)};</span>

      Console<span class="hl sym">.</span><span class="hl kwd">WriteLine</span> <span class="hl sym">(</span><span class="hl kwd">Schedule</span> <span class="hl sym">(</span>threads<span class="hl sym">));</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>
