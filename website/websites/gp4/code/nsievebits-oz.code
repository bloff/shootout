<span class="slc">% ----------------------------------------------------------------------</span>
<span class="slc">% The Great Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">%</span>
<span class="slc">% Contributed by Anthony Borla</span>
<span class="slc">% ----------------------------------------------------------------------</span>

<span class="kwa">functor</span>

<span class="kwa">import</span>
  System<span class="sym">(</span>showInfo<span class="sym">)</span> Application<span class="sym">(</span>exit getArgs<span class="sym">)</span>

<span class="kwa">define</span>

<span class="slc">% ------------- %</span>

  SPACE <span class="sym">= &amp;\</span><span class="num">040</span>

<span class="slc">% ------------- %</span>

  <span class="kwa">proc</span> <span class="sym">{</span>CalcAndShowSieve Start Stop<span class="sym">}</span>
    Bits <span class="sym">= {</span>Sieve Start Stop<span class="sym">}</span>
    Output <span class="sym">=</span>
      &quot;Primes up to&quot; <span class="sym"># {</span>PadLeft <span class="sym">{</span>Int<span class="sym">.</span>toString Stop<span class="sym">}</span> <span class="num">9</span> SPACE<span class="sym">} #</span>
      <span class="sym">{</span>PadLeft <span class="sym">{</span>Int<span class="sym">.</span>toString <span class="sym">{</span>BitArray<span class="sym">.</span>card Bits<span class="sym">}}</span> <span class="num">9</span> SPACE<span class="sym">}</span>
  <span class="kwa">in</span>
    <span class="sym">{</span>System<span class="sym">.</span>showInfo Output<span class="sym">}</span>
  <span class="kwa">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwa">local</span>
    <span class="kwa">fun</span> <span class="sym">{</span>Init I Stop Bits<span class="sym">}</span>
      <span class="kwa">if</span> I <span class="sym">=&lt;</span> Stop <span class="kwa">then</span> <span class="sym">{</span>BitArray<span class="sym">.</span>set Bits I<span class="sym">} {</span>Init <span class="sym">(</span>I <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span> Stop Bits<span class="sym">}</span> <span class="kwa">else</span> Bits <span class="kwa">end</span>
    <span class="kwa">end</span>

    <span class="kwa">fun</span> <span class="sym">{</span>Sieve_ I J Start Stop Bits<span class="sym">}</span>
      <span class="kwa">if</span> I <span class="sym">&gt;</span> N <span class="kwa">then</span>
        Bits
      <span class="kwa">else</span>
        <span class="kwa">if</span> J <span class="sym">&gt;</span> Stop <span class="kwa">then</span>
          <span class="sym">{</span>Sieve_ <span class="sym">(</span>I <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span> Start Start Stop Bits<span class="sym">}</span>
        <span class="kwa">else</span>
          <span class="kwa">if</span> <span class="sym">{</span>BitArray<span class="sym">.</span>test Bits J<span class="sym">}</span> <span class="kwa">then</span> <span class="sym">{</span>ClearMultiples <span class="sym">(</span>J <span class="sym">+</span> J<span class="sym">)</span> J Stop Bits<span class="sym">}</span> <span class="kwa">end</span>
          <span class="sym">{</span>Sieve_ I <span class="sym">(</span>J <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span> Start Stop Bits<span class="sym">}</span>
        <span class="kwa">end</span>
      <span class="kwa">end</span>
    <span class="kwa">end</span>

    <span class="kwa">proc</span> <span class="sym">{</span>ClearMultiples K J Stop Bits<span class="sym">}</span>
      <span class="kwa">if</span> K <span class="sym">=&lt;</span> Stop <span class="kwa">then</span> <span class="sym">{</span>BitArray<span class="sym">.</span>clear Bits K<span class="sym">} {</span>ClearMultiples <span class="sym">(</span>K <span class="sym">+</span> J<span class="sym">)</span> J Stop Bits<span class="sym">}</span> <span class="kwa">end</span>
    <span class="kwa">end</span>

  <span class="kwa">in</span>
    <span class="kwa">fun</span> <span class="sym">{</span>Sieve Start Stop<span class="sym">}</span>
      <span class="sym">{</span>Sieve_ <span class="num">1</span> Start Start Stop <span class="sym">{</span>Init Start Stop <span class="sym">{</span>BitArray<span class="sym">.</span>new Start Stop<span class="sym">}}}</span>
    <span class="kwa">end</span>
  <span class="kwa">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwa">fun</span> <span class="sym">{</span>CmdlNArg Nth Default<span class="sym">}</span> N Nt <span class="kwa">in</span>
    <span class="kwa">try</span>
      Nt <span class="sym">= {</span>String<span class="sym">.</span>toInt <span class="sym">{</span>Application<span class="sym">.</span>getArgs plain<span class="sym">}.</span>Nth<span class="sym">}</span>
      N <span class="sym">=</span> <span class="kwa">if</span> Nt <span class="sym">&lt;</span> Default <span class="kwa">then</span> Default <span class="kwa">else</span> Nt <span class="kwa">end</span>
    <span class="kwa">catch</span> error<span class="sym">(...)</span> <span class="kwa">then</span>
      N <span class="sym">=</span> Default
    <span class="kwa">end</span>
    N
  <span class="kwa">end</span>

  <span class="kwa">fun</span> <span class="sym">{</span>PadLeft S Padlen C<span class="sym">} {</span>List<span class="sym">.</span>append <span class="sym">{</span>MakePad S Padlen C<span class="sym">}</span> S<span class="sym">}</span> <span class="kwa">end</span>

  <span class="kwa">fun</span> <span class="sym">{</span>MakePad S Padlen C<span class="sym">}</span>
    L Reqlen <span class="sym">= {</span>List<span class="sym">.</span>length S<span class="sym">} -</span> Padlen
  <span class="kwa">in</span>
    <span class="kwa">if</span> Reqlen <span class="sym">&lt;</span> <span class="num">0</span> <span class="kwa">then</span>
      L <span class="sym">= {</span>List<span class="sym">.</span>make <span class="sym">{</span>Number<span class="sym">.</span>abs Reqlen<span class="sym">}}</span>
      <span class="kwa">for</span> I <span class="kwa">in</span> L do I <span class="sym">=</span> C <span class="kwa">end</span>
    <span class="kwa">else</span>
      L <span class="sym">=</span> nil
    <span class="kwa">end</span>
    L
  <span class="kwa">end</span>

<span class="slc">% ------------- %</span>

  N Start <span class="sym">=</span> <span class="num">2</span>

<span class="slc">% ------------- %</span>

<span class="kwa">in</span>
  N <span class="sym">= {</span>CmdlNArg <span class="num">1</span> Start<span class="sym">}</span>

  <span class="sym">{</span>CalcAndShowSieve Start <span class="sym">({</span>Number<span class="sym">.</span>pow <span class="num">2</span> N<span class="sym">} *</span> <span class="num">10000</span><span class="sym">)}</span>
  <span class="sym">{</span>CalcAndShowSieve Start <span class="sym">({</span>Number<span class="sym">.</span>pow <span class="num">2</span> <span class="sym">(</span>N <span class="sym">-</span> <span class="num">1</span><span class="sym">)} *</span> <span class="num">10000</span><span class="sym">)}</span>
  <span class="sym">{</span>CalcAndShowSieve Start <span class="sym">({</span>Number<span class="sym">.</span>pow <span class="num">2</span> <span class="sym">(</span>N <span class="sym">-</span> <span class="num">2</span><span class="sym">)} *</span> <span class="num">10000</span><span class="sym">)}</span>

  <span class="sym">{</span>Application<span class="sym">.</span>exit <span class="num">0</span><span class="sym">}</span>
<span class="kwa">end</span>

