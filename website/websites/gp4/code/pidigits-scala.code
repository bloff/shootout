<span class="com">/* ------------------------------------------------------------------ */</span>
<span class="com">/* The Great Computer Language Shootout                               */</span>
<span class="com">/* http://shootout.alioth.debian.org/                                 */</span>
<span class="com">/*                                                                    */</span>
<span class="com">/* Contributed by Anthony Borla                                       */</span>
<span class="com">/* ------------------------------------------------------------------ */</span>

<span class="kwa">object</span> pidigits
<span class="sym">{</span>
  <span class="kwa">def</span> main<span class="sym">(</span>args<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]):</span> unit <span class="sym">=</span>
  <span class="sym">{</span>
    <span class="kwa">val</span> N<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">(</span><span class="num">0</span><span class="sym">));</span> <span class="kwa">var</span> i<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="num">10</span>

    <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;=</span> N<span class="sym">)</span>
    <span class="sym">{</span>
      <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">(</span>pi_digits<span class="sym">(</span><span class="num">10</span><span class="sym">) +</span> <span class="str">&quot;</span><span class="esc">\t</span><span class="str">:&quot;</span> <span class="sym">+</span> i<span class="sym">)</span>
      i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">10</span>
    <span class="sym">}</span>

    i <span class="sym">=</span> i <span class="sym">-</span> <span class="num">10</span>

    <span class="kwa">if</span> <span class="sym">(</span>i <span class="sym">&lt;</span> N<span class="sym">)</span>
    <span class="sym">{</span>
      <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">(</span>pi_digits<span class="sym">(</span>N <span class="sym">-</span> i<span class="sym">) +</span> <span class="str">&quot;</span><span class="esc">\t</span><span class="str">:&quot;</span> <span class="sym">+</span> N<span class="sym">)</span>
    <span class="sym">}</span>
  <span class="sym">}</span>

  <span class="kwa">def</span> compose<span class="sym">(</span>a<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span>BigInt<span class="sym">],</span> b<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span>BigInt<span class="sym">]):</span> <span class="kwc">Array</span><span class="sym">[</span>BigInt<span class="sym">] =</span>
  <span class="sym">{</span>
    <span class="kwa">return</span> <span class="kwc">Array</span><span class="sym">(</span>a<span class="sym">(</span><span class="num">0</span><span class="sym">) *</span> b<span class="sym">(</span><span class="num">0</span><span class="sym">),</span>
                 a<span class="sym">(</span><span class="num">0</span><span class="sym">) *</span> b<span class="sym">(</span><span class="num">1</span><span class="sym">) +</span> a<span class="sym">(</span><span class="num">1</span><span class="sym">) *</span> b<span class="sym">(</span><span class="num">3</span><span class="sym">),</span>
                 a<span class="sym">(</span><span class="num">2</span><span class="sym">) *</span> b<span class="sym">(</span><span class="num">0</span><span class="sym">) +</span> a<span class="sym">(</span><span class="num">3</span><span class="sym">) *</span> b<span class="sym">(</span><span class="num">2</span><span class="sym">),</span>
                 a<span class="sym">(</span><span class="num">2</span><span class="sym">) *</span> b<span class="sym">(</span><span class="num">1</span><span class="sym">) +</span> a<span class="sym">(</span><span class="num">3</span><span class="sym">) *</span> b<span class="sym">(</span><span class="num">3</span><span class="sym">))</span>
  <span class="sym">}</span>

  <span class="kwa">def</span> extract<span class="sym">(</span>a<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span>BigInt<span class="sym">],</span> j<span class="sym">:</span> <span class="kwb">int</span><span class="sym">):</span> BigInt <span class="sym">=</span>
  <span class="sym">{</span>
    <span class="kwa">return</span> <span class="sym">(</span>a<span class="sym">(</span><span class="num">0</span><span class="sym">) *</span> j <span class="sym">+</span> a<span class="sym">(</span><span class="num">1</span><span class="sym">)) / (</span>a<span class="sym">(</span><span class="num">2</span><span class="sym">) *</span> j <span class="sym">+</span> a<span class="sym">(</span><span class="num">3</span><span class="sym">))</span>
  <span class="sym">}</span>

  <span class="kwa">def</span> pi_digits<span class="sym">(</span>c<span class="sym">:</span> <span class="kwb">int</span><span class="sym">):</span> <span class="kwc">String</span> <span class="sym">=</span>
  <span class="sym">{</span>
    <span class="kwa">val</span> r<span class="sym">:</span> <span class="kwc">StringBuffer</span> <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">StringBuffer</span><span class="sym">();</span> <span class="kwa">var</span> i<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="num">0</span>

    <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> c<span class="sym">)</span>
    <span class="sym">{</span>
      <span class="kwa">var</span> y<span class="sym">:</span> BigInt <span class="sym">=</span> extract<span class="sym">(</span>Z<span class="sym">,</span> <span class="num">3</span><span class="sym">)</span>

      <span class="kwa">while</span> <span class="sym">(</span>y <span class="sym">!=</span> extract<span class="sym">(</span>Z<span class="sym">,</span> <span class="num">4</span><span class="sym">))</span>
      <span class="sym">{</span>
        K <span class="sym">=</span> K <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span> Z <span class="sym">=</span> compose<span class="sym">(</span>Z<span class="sym">,</span> <span class="kwc">Array</span><span class="sym">(</span>K<span class="sym">,</span> <span class="num">4</span> <span class="sym">*</span> K <span class="sym">+</span> <span class="num">2</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">2</span> <span class="sym">*</span> K <span class="sym">+</span> <span class="num">1</span><span class="sym">))</span>
        y <span class="sym">=</span> extract<span class="sym">(</span>Z<span class="sym">,</span> <span class="num">3</span><span class="sym">)</span>
      <span class="sym">}</span>

      Z <span class="sym">=</span> compose<span class="sym">(</span><span class="kwc">Array</span><span class="sym">(</span><span class="num">10</span><span class="sym">,</span> y <span class="sym">* -</span><span class="num">10</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">1</span><span class="sym">),</span> Z<span class="sym">)</span>

      r<span class="sym">.</span>append<span class="sym">(</span>y<span class="sym">);</span> i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">return</span> r<span class="sym">.</span>toString<span class="sym">()</span>
  <span class="sym">}</span>

  <span class="kwa">var</span> K<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="num">0</span>

  <span class="kwa">var</span> Z<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span>BigInt<span class="sym">] =</span> <span class="kwc">Array</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)</span>
<span class="sym">}</span>

