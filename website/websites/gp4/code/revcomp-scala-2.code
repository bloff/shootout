<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">*/</span>

<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.</span>_
<span class="kwa">import</span> scala<span class="sym">.</span>collection<span class="sym">.</span>mutable<span class="sym">.</span><span class="kwc">Stack</span>

<span class="kwa">object</span> revcomp <span class="sym">{</span>

   <span class="kwa">val</span> IUB <span class="sym">=</span> IUBCodeComplements

   <span class="kwa">def</span> IUBCodeComplements<span class="sym">() = {</span>
      <span class="kwa">val</span> code <span class="sym">=</span> <span class="str">&quot;ABCDGHKMNRSTVWYabcdghkmnrstvwy&quot;</span><span class="sym">.</span>getBytes
      <span class="kwa">val</span> comp <span class="sym">=</span> <span class="str">&quot;TVGHCDMKNYSABWRTVGHCDMKNYSABWR&quot;</span><span class="sym">.</span>getBytes
      <span class="kwa">val</span> a<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwb">byte</span><span class="sym">] =</span> <span class="kwa">new</span> <span class="kwc">Array</span><span class="sym">(</span> <span class="str">'z'</span><span class="sym">.</span>toByte <span class="sym">)</span>

      <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">val</span> indexValue <span class="sym">&lt;-</span> code zip comp<span class="sym">)</span>
         indexValue match <span class="sym">{</span> <span class="kwa">case</span> Pair<span class="sym">(</span>i<span class="sym">,</span>v<span class="sym">) =&gt;</span> a<span class="sym">(</span>i<span class="sym">) =</span> v <span class="sym">}</span>

      a
   <span class="sym">}</span>


   <span class="kwa">type</span> LineStack <span class="sym">=</span> <span class="kwc">Stack</span><span class="sym">[</span><span class="kwc">Array</span><span class="sym">[</span><span class="kwb">byte</span><span class="sym">]]</span>

   <span class="kwa">def</span> main<span class="sym">(</span>args<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]) = {</span>
      <span class="kwa">val</span> r <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">BufferedReader</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwc">InputStreamReader</span><span class="sym">(</span><span class="kwc">System</span><span class="sym">.</span>in<span class="sym">))</span>
      <span class="kwa">val</span> w <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">BufferedOutputStream</span><span class="sym">(</span><span class="kwc">System</span><span class="sym">.</span>out<span class="sym">)</span>

      <span class="kwa">var</span> lines<span class="sym">:</span> LineStack <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">Stack</span>
      <span class="kwa">var</span> desc <span class="sym">=</span> <span class="str">&quot;&quot;</span>

      <span class="kwa">var</span> line <span class="sym">=</span> r<span class="sym">.</span>readLine
      <span class="kwa">while</span> <span class="sym">(</span>line <span class="sym">!=</span> null<span class="sym">) {</span>
         <span class="kwa">val</span> c <span class="sym">=</span> line<span class="sym">.</span>charAt<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
         <span class="kwa">if</span> <span class="sym">(</span>c <span class="sym">==</span> <span class="str">'&gt;'</span><span class="sym">){</span>
            <span class="kwa">if</span> <span class="sym">(</span>desc<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">){</span>
               complementReverseWrite<span class="sym">(</span>desc<span class="sym">,</span> lines<span class="sym">,</span> w<span class="sym">)</span>
               lines <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">Stack</span>
            <span class="sym">}</span>
            desc <span class="sym">=</span> line
         <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
            <span class="kwa">if</span> <span class="sym">(</span>c <span class="sym">!=</span> <span class="str">';'</span><span class="sym">)</span> lines <span class="sym">+=</span> line<span class="sym">.</span>getBytes
         <span class="sym">}</span>
         line <span class="sym">=</span> r<span class="sym">.</span>readLine
      <span class="sym">}</span>
      r<span class="sym">.</span>close

      <span class="kwa">if</span> <span class="sym">(</span>desc<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> complementReverseWrite<span class="sym">(</span>desc<span class="sym">,</span> lines<span class="sym">,</span> w<span class="sym">)</span>
      w<span class="sym">.</span>close
   <span class="sym">}</span>


   <span class="kwa">def</span> complementReverseWrite<span class="sym">(</span>desc<span class="sym">:</span> <span class="kwc">String</span><span class="sym">,</span> lines<span class="sym">:</span> LineStack<span class="sym">,</span>
         w<span class="sym">:</span> <span class="kwc">BufferedOutputStream</span><span class="sym">) = {</span>

      <span class="kwa">def</span> inplaceComplementReverse<span class="sym">(</span>b<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwb">byte</span><span class="sym">]){</span>
         <span class="kwa">var</span> i <span class="sym">=</span> <span class="num">0</span>
         <span class="kwa">var</span> j <span class="sym">=</span> b<span class="sym">.</span>length <span class="sym">-</span> <span class="num">1</span>
         <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> j<span class="sym">){</span>
            <span class="kwa">val</span> swap <span class="sym">=</span> b<span class="sym">(</span>i<span class="sym">)</span>
            b<span class="sym">(</span>i<span class="sym">) =</span> IUB<span class="sym">(</span> b<span class="sym">(</span>j<span class="sym">) )</span>
            b<span class="sym">(</span>j<span class="sym">) =</span> IUB<span class="sym">(</span> swap <span class="sym">)</span>
            i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span>
            j <span class="sym">=</span> j <span class="sym">-</span> <span class="num">1</span>
         <span class="sym">}</span>
         <span class="kwa">if</span> <span class="sym">(</span>i <span class="sym">==</span> j<span class="sym">)</span> b<span class="sym">(</span>i<span class="sym">) =</span> IUB<span class="sym">(</span> b<span class="sym">(</span>i<span class="sym">) )</span>
      <span class="sym">}</span>

      <span class="kwa">val</span> nl <span class="sym">=</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">.</span>toByte
      w<span class="sym">.</span>write<span class="sym">(</span>desc<span class="sym">.</span>getBytes<span class="sym">);</span> w<span class="sym">.</span>write<span class="sym">(</span>nl<span class="sym">)</span>

      <span class="kwa">val</span> n <span class="sym">=</span> <span class="num">60</span>
      <span class="kwa">val</span> k <span class="sym">=</span> <span class="kwa">if</span> <span class="sym">(</span>lines<span class="sym">.</span>isEmpty<span class="sym">)</span> <span class="num">0</span> <span class="kwa">else</span> lines<span class="sym">.</span>top<span class="sym">.</span>length
      <span class="kwa">val</span> isSplitLine <span class="sym">=</span> k <span class="sym">&lt;</span> n
      <span class="kwa">var</span> isFirstLine <span class="sym">=</span> true

      <span class="kwa">while</span> <span class="sym">(!</span>lines<span class="sym">.</span>isEmpty<span class="sym">) {</span>
        <span class="kwa">val</span> line <span class="sym">=</span> lines<span class="sym">.</span>pop
        inplaceComplementReverse<span class="sym">(</span>line<span class="sym">)</span>

        <span class="kwa">if</span> <span class="sym">(</span>isSplitLine<span class="sym">){</span>
           <span class="kwa">if</span> <span class="sym">(</span>isFirstLine<span class="sym">){</span> w<span class="sym">.</span>write<span class="sym">(</span>line<span class="sym">);</span> isFirstLine <span class="sym">=</span> false <span class="sym">}</span>
           <span class="kwa">else</span> <span class="sym">{</span> w<span class="sym">.</span>write<span class="sym">(</span>line<span class="sym">,</span><span class="num">0</span><span class="sym">,</span>n<span class="sym">-</span>k<span class="sym">);</span> w<span class="sym">.</span>write<span class="sym">(</span>nl<span class="sym">);</span> w<span class="sym">.</span>write<span class="sym">(</span>line<span class="sym">,</span>n<span class="sym">-</span>k<span class="sym">,</span>k<span class="sym">) }</span>
        <span class="sym">}</span>
        <span class="kwa">else</span> <span class="sym">{</span> w<span class="sym">.</span>write<span class="sym">(</span>line<span class="sym">);</span> w<span class="sym">.</span>write<span class="sym">(</span>nl<span class="sym">) }</span>
      <span class="sym">}</span>
      <span class="kwa">if</span> <span class="sym">(</span>isSplitLine <span class="sym">&amp;&amp; !</span>isFirstLine<span class="sym">)</span> w<span class="sym">.</span>write<span class="sym">(</span>nl<span class="sym">)</span>
   <span class="sym">}</span>

<span class="sym">}</span>
