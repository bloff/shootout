<span class="str">&quot;  The Computer Language Shootout</span>
<span class="str">   http://shootout.alioth.debian.org/</span>
<span class="str">   contributed by Isaac Gouy&quot;</span><span class="sym">!</span>

<span class="sym">!</span>ComputerLanguageShootout.Benchmarks class methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>

nsieve<span class="sym">:</span> argvString
   <span class="sym">|</span> n <span class="sym">|</span>
   n <span class="sym">:=</span> argvString asNumber.
   <span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">2</span><span class="sym">)</span> ifTrue<span class="sym">: [</span>n <span class="sym">:=</span> <span class="num">2</span><span class="sym">]</span>.
    n      primes.
   <span class="sym">(</span>n <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> primes.
   <span class="sym">(</span>n <span class="sym">-</span> <span class="num">2</span><span class="sym">)</span> primes<span class="sym">! !</span>


<span class="sym">!</span>Core.Integer methodsFor<span class="sym">:</span> <span class="str">'computer language shootout'</span><span class="sym">!</span>

nsieve
   <span class="sym">|</span> count isPrime <span class="sym">|</span>
   count <span class="sym">:=</span> <span class="num">0</span>.
   isPrime <span class="sym">:=</span> Array new<span class="sym">:</span> self withAll<span class="sym">:</span> true.

   <span class="num">2</span> to<span class="sym">:</span> self <span class="kwa">do</span><span class="sym">: [:</span>i<span class="sym">|</span>
      <span class="sym">(</span>isPrime at<span class="sym">:</span> i<span class="sym">)</span> ifTrue<span class="sym">: [</span>
         i<span class="sym">+</span>i to<span class="sym">:</span> self by<span class="sym">:</span> i <span class="kwa">do</span><span class="sym">: [:</span>k<span class="sym">|</span> isPrime at<span class="sym">:</span> k put<span class="sym">:</span> false<span class="sym">]</span>.
         count <span class="sym">:=</span> count <span class="sym">+</span> <span class="num">1</span>.
         <span class="sym">]</span>.
      <span class="sym">]</span>.

   ^count<span class="sym">! !</span>


<span class="sym">!</span>Core.Integer methodsFor<span class="sym">:</span> <span class="str">'computer language shootout'</span><span class="sym">!</span>

primes
   <span class="sym">|</span> m <span class="sym">|</span>
   m <span class="sym">:= (</span><span class="num">2</span> raisedTo<span class="sym">:</span> self<span class="sym">) *</span> <span class="num">10000</span>.
   OS.Stdout
      nextPutAll<span class="sym">:</span> <span class="str">'Primes up to '</span><span class="sym">;</span> nextPutAll<span class="sym">: (</span>m asPaddedString<span class="sym">:</span> <span class="num">8</span><span class="sym">);</span>
      nextPutAll<span class="sym">: ((</span>m nsieve<span class="sym">)</span> asPaddedString<span class="sym">:</span> <span class="num">9</span><span class="sym">);</span> cr<span class="sym">! !</span>


<span class="sym">!</span>Core.Integer methodsFor<span class="sym">:</span> <span class="str">'computer language shootout'</span><span class="sym">!</span>

asPaddedString<span class="sym">:</span> aWidth
   <span class="sym">|</span> s <span class="sym">|</span>
   s <span class="sym">:=</span> WriteStream on<span class="sym">: (</span>String new<span class="sym">:</span> <span class="num">10</span><span class="sym">)</span>.
   self printOn<span class="sym">:</span> s paddedWith<span class="sym">: $</span>  to<span class="sym">:</span> aWidth base<span class="sym">:</span> <span class="num">10</span>.
   ^s contents
<span class="sym">! !</span>
