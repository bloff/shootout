rem The Computer Language Shootout
rem http<span class="sym">://</span>shootout.alioth.debian.org<span class="sym">/</span>
rem contributed by Josh Goldfoot
rem based on the C version by Kevin Carson

option explicit

<span class="kwa">type</span> treeNode
    <span class="kwa">as</span> treeNode ptr tleft
    <span class="kwa">as</span> treeNode ptr tright
    <span class="kwa">as</span> <span class="kwb">long</span> titem
<span class="kwa">end type</span>

<span class="kwa">sub</span> DeleteTree<span class="sym">(</span>tree <span class="kwa">as</span> treeNode ptr<span class="sym">)</span>
    <span class="kwa">if</span> <span class="sym">(</span>tree<span class="sym">-&gt;</span>tleft <span class="sym">&lt;&gt;</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">then</span>
        DeleteTree<span class="sym">(</span>tree<span class="sym">-&gt;</span>tleft<span class="sym">)</span>
        DeleteTree<span class="sym">(</span>tree<span class="sym">-&gt;</span>tright<span class="sym">)</span>
    <span class="kwa">end if</span>
    deallocate tree
<span class="kwa">end sub</span>

<span class="kwa">function</span> ItemCheck<span class="sym">(</span>tree <span class="kwa">as</span> treeNode ptr<span class="sym">)</span> <span class="kwa">as</span> <span class="kwb">long</span>
    <span class="kwa">if</span> tree<span class="sym">-&gt;</span>tleft <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then</span>
        return tree<span class="sym">-&gt;</span>titem
    <span class="kwa">else</span>
        return tree<span class="sym">-&gt;</span>titem <span class="sym">+</span> ItemCheck<span class="sym">(</span>tree<span class="sym">-&gt;</span>tleft<span class="sym">) -</span> ItemCheck<span class="sym">(</span>tree<span class="sym">-&gt;</span>tright<span class="sym">)</span>
    <span class="kwa">end if</span>
<span class="kwa">end function</span>

<span class="kwa">function</span> NewTreeNode<span class="sym">(</span>ntleft <span class="kwa">as</span> treeNode Ptr<span class="sym">,</span> ntright <span class="kwa">as</span> treeNode Ptr<span class="sym">,</span> item <span class="kwa">as</span> <span class="kwb">long</span><span class="sym">)</span> <span class="kwa">as</span> treeNode ptr
    <span class="kwa">dim</span> newp <span class="kwa">as</span> treeNode ptr

    newp <span class="sym">=</span> callocate<span class="sym">(</span>len<span class="sym">(</span>treeNode<span class="sym">))</span>
    newp<span class="sym">-&gt;</span>tleft <span class="sym">=</span> ntleft
    newp<span class="sym">-&gt;</span>tright <span class="sym">=</span> ntright
    newp<span class="sym">-&gt;</span>titem <span class="sym">=</span> item
    return newp
<span class="kwa">end function</span>

<span class="kwa">function</span> BottomUpTree<span class="sym">(</span>item <span class="kwa">as</span> <span class="kwb">long</span><span class="sym">,</span> depth <span class="kwa">as</span> uinteger<span class="sym">)</span> <span class="kwa">as</span> treeNode ptr
    <span class="kwa">if</span> <span class="sym">(</span>depth <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">then</span>
        <span class="kwa">dim as</span> treeNode ptr newl<span class="sym">,</span> newr
        newl <span class="sym">=</span> BottomUpTree<span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> item <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> depth <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span>
        newr <span class="sym">=</span> BottomUpTree<span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> item<span class="sym">,</span> depth <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span>
        return NewTreeNode<span class="sym">(</span>newl<span class="sym">,</span> newr<span class="sym">,</span> item<span class="sym">)</span>
    <span class="kwa">else</span>
        return NewTreeNode<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> item<span class="sym">)</span>
    <span class="kwa">end if</span>
<span class="kwa">end function</span>

<span class="kwa">sub</span> main<span class="sym">()</span>
    <span class="kwa">dim as</span> uinteger N<span class="sym">,</span> depth<span class="sym">,</span> minDepth<span class="sym">,</span> maxDepth<span class="sym">,</span> stretchDepth
    <span class="kwa">dim as</span> treeNode ptr stretchTree<span class="sym">,</span> longLivedTree<span class="sym">,</span> tempTree
    <span class="kwa">dim as</span> <span class="kwb">long</span> i<span class="sym">,</span> iterations<span class="sym">,</span> check

    N <span class="sym">=</span> val<span class="sym">(</span>command$<span class="sym">)</span>
    <span class="kwa">if</span> N <span class="sym">&lt;</span> <span class="num">1</span> <span class="kwa">then</span> N <span class="sym">=</span> <span class="num">16</span>

    minDepth <span class="sym">=</span> <span class="num">4</span>

    <span class="kwa">if</span> minDepth <span class="sym">+</span> <span class="num">2</span> <span class="sym">&gt;</span> N <span class="kwa">then</span>
        maxDepth <span class="sym">=</span> minDepth <span class="sym">+</span> <span class="num">2</span>
    <span class="kwa">else</span>
        maxDepth <span class="sym">=</span> N
    <span class="kwa">end if</span>

    stretchDepth <span class="sym">=</span> maxDepth <span class="sym">+</span> <span class="num">1</span>

    stretchTree <span class="sym">=</span> BottomUpTree<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> stretchDepth<span class="sym">)</span>
    print <span class="str">&quot;stretch tree of depth &quot;</span><span class="sym">;</span> str<span class="sym">(</span>stretchDepth<span class="sym">);</span>chr<span class="sym">(</span><span class="num">9</span><span class="sym">);</span><span class="str">&quot; check: &quot;</span><span class="sym">;</span>
    print str<span class="sym">(</span>ItemCheck<span class="sym">(</span>stretchTree<span class="sym">))</span>
    DeleteTree<span class="sym">(</span>stretchTree<span class="sym">)</span>

    longLivedTree <span class="sym">=</span> BottomUpTree<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> maxDepth<span class="sym">)</span>
    <span class="kwa">for</span> depth <span class="sym">=</span> minDepth <span class="kwa">to</span> maxDepth <span class="kwa">step</span> <span class="num">2</span>
        iterations <span class="sym">=</span> <span class="num">2</span> ^ <span class="sym">(</span>maxDepth <span class="sym">-</span> depth <span class="sym">+</span> minDepth<span class="sym">)</span>
        check <span class="sym">=</span> <span class="num">0</span>
        <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">to</span> iterations
            tempTree <span class="sym">=</span> BottomUpTree<span class="sym">(</span>i<span class="sym">,</span> depth<span class="sym">)</span>
            check <span class="sym">+=</span> ItemCheck<span class="sym">(</span>tempTree<span class="sym">)</span>
            DeleteTree<span class="sym">(</span>tempTree<span class="sym">)</span>
            tempTree <span class="sym">=</span> BottomUpTree<span class="sym">(-</span><span class="num">1</span> <span class="sym">*</span> i<span class="sym">,</span> depth<span class="sym">)</span>
            check <span class="sym">+=</span> ItemCheck<span class="sym">(</span>tempTree<span class="sym">)</span>
            DeleteTree<span class="sym">(</span>tempTree<span class="sym">)</span>
        <span class="kwa">next</span> i
        print str<span class="sym">(</span>iterations <span class="sym">*</span> <span class="num">2</span><span class="sym">);</span>chr<span class="sym">(</span><span class="num">9</span><span class="sym">);</span><span class="str">&quot; trees of depth &quot;</span><span class="sym">;</span>str<span class="sym">(</span>depth<span class="sym">);</span>
        print chr<span class="sym">(</span><span class="num">9</span><span class="sym">);</span><span class="str">&quot; check: &quot;</span><span class="sym">;</span>str<span class="sym">(</span>check<span class="sym">)</span>
    <span class="kwa">next</span> depth

    print <span class="str">&quot;long lived tree of depth &quot;</span><span class="sym">;</span>str<span class="sym">(</span>maxDepth<span class="sym">);</span>chr<span class="sym">(</span><span class="num">9</span><span class="sym">);</span>
    print <span class="str">&quot; check: &quot;</span><span class="sym">;</span> str<span class="sym">(</span>ItemCheck<span class="sym">(</span>longLivedTree<span class="sym">))</span>
<span class="kwa">end sub</span>

main<span class="sym">()</span>

