<span class="hl slc">// The Computer Lannguage Shootout</span>
<span class="hl slc">// http://shootout.alioth.debian.org/</span>
<span class="hl slc">// Original C version by Heiner Marxen</span>
<span class="hl slc">// Low-level version adapted from C by bearophile</span>

<span class="hl kwa">import</span> std<span class="hl sym">.</span>conv<span class="hl sym">,</span> std<span class="hl sym">.</span>c<span class="hl sym">.</span>stdlib<span class="hl sym">;</span>

<span class="hl kwa">static long</span> <span class="hl kwd">fannkuch</span><span class="hl sym">(</span><span class="hl kwa">int</span> n<span class="hl sym">) {</span>
    <span class="hl kwa">int</span> r<span class="hl sym">,</span> i<span class="hl sym">,</span> k<span class="hl sym">,</span> didpr<span class="hl sym">;</span>
    <span class="hl kwa">int</span><span class="hl sym">*</span> perm<span class="hl sym">,</span> perm1<span class="hl sym">,</span> count<span class="hl sym">;</span>
    <span class="hl kwa">long</span> flips<span class="hl sym">,</span> flipsMax<span class="hl sym">;</span>
    <span class="hl kwa">int</span> n1 <span class="hl sym">=</span> n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>

    <span class="hl kwa">if</span> <span class="hl sym">(</span>n <span class="hl sym">&lt;</span> <span class="hl num">1</span><span class="hl sym">)</span>
        <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>

    perm  <span class="hl sym">=</span> <span class="hl kwa">cast</span><span class="hl sym">(</span><span class="hl kwa">int</span><span class="hl sym">*)</span><span class="hl kwd">calloc</span><span class="hl sym">(</span>n<span class="hl sym">,</span> <span class="hl kwa">int</span><span class="hl sym">.</span>sizeof<span class="hl sym">);</span>
    perm1 <span class="hl sym">=</span> <span class="hl kwa">cast</span><span class="hl sym">(</span><span class="hl kwa">int</span><span class="hl sym">*)</span><span class="hl kwd">calloc</span><span class="hl sym">(</span>n<span class="hl sym">,</span> <span class="hl kwa">int</span><span class="hl sym">.</span>sizeof<span class="hl sym">);</span>
    count <span class="hl sym">=</span> <span class="hl kwa">cast</span><span class="hl sym">(</span><span class="hl kwa">int</span><span class="hl sym">*)</span><span class="hl kwd">calloc</span><span class="hl sym">(</span>n<span class="hl sym">,</span> <span class="hl kwa">int</span><span class="hl sym">.</span>sizeof<span class="hl sym">);</span>

    <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> n<span class="hl sym">; ++</span>i<span class="hl sym">)</span>
        perm1<span class="hl sym">[</span>i<span class="hl sym">] =</span> i<span class="hl sym">;</span> <span class="hl slc">// initial (trivial) permu</span>

    r <span class="hl sym">=</span> n<span class="hl sym">;</span>
    didpr <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    flipsMax <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl kwa">for</span> <span class="hl sym">(;;) {</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>didpr <span class="hl sym">&lt;</span> <span class="hl num">30</span><span class="hl sym">) {</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> n<span class="hl sym">; ++</span>i<span class="hl sym">)</span>
                <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;%d&quot;</span><span class="hl sym">,</span> <span class="hl kwa">cast</span><span class="hl sym">(</span><span class="hl kwa">int</span><span class="hl sym">)(</span><span class="hl num">1</span> <span class="hl sym">+</span> perm1<span class="hl sym">[</span>i<span class="hl sym">]));</span>
            <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">);</span>
            <span class="hl sym">++</span>didpr<span class="hl sym">;</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">for</span> <span class="hl sym">(;</span> r<span class="hl sym">!=</span><span class="hl num">1</span> <span class="hl sym">; --</span>r<span class="hl sym">)</span>
            count<span class="hl sym">[</span>r<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">] =</span> r<span class="hl sym">;</span>

        <span class="hl kwa">if</span> <span class="hl sym">(!(</span>perm1<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] ==</span> <span class="hl num">0</span> <span class="hl sym">||</span> perm1<span class="hl sym">[</span>n1<span class="hl sym">] ==</span> n1<span class="hl sym">)) {</span>
            flips <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> n <span class="hl sym">; ++</span>i<span class="hl sym">)</span> <span class="hl slc">// perm = perm1</span>
                perm<span class="hl sym">[</span>i<span class="hl sym">] =</span> perm1<span class="hl sym">[</span>i<span class="hl sym">];</span>

            k <span class="hl sym">=</span> perm1<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span> <span class="hl slc">// cache perm[0] in k</span>

            <span class="hl kwa">do</span> <span class="hl sym">{</span> <span class="hl slc">// k != 0 ==&gt; k &gt; 0</span>
                <span class="hl kwa">int</span> j<span class="hl sym">;</span>
                <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">,</span> j <span class="hl sym">=</span> k<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> j<span class="hl sym">; ++</span>i<span class="hl sym">, --</span>j<span class="hl sym">) {</span>
                    <span class="hl kwa">int</span> tmp<span class="hl sym">;</span>
                    tmp <span class="hl sym">=</span> perm<span class="hl sym">[</span>i<span class="hl sym">];</span>
                    perm<span class="hl sym">[</span>i<span class="hl sym">] =</span> perm<span class="hl sym">[</span>j<span class="hl sym">];</span>
                    perm<span class="hl sym">[</span>j<span class="hl sym">] =</span> tmp<span class="hl sym">;</span>
                <span class="hl sym">}</span>
                <span class="hl sym">++</span>flips<span class="hl sym">;</span>

                <span class="hl slc">// Now exchange k (caching perm[0]) and perm[k]</span>
                j <span class="hl sym">=</span> perm<span class="hl sym">[</span>k<span class="hl sym">];</span>
                perm<span class="hl sym">[</span>k<span class="hl sym">] =</span> k<span class="hl sym">;</span>
                k <span class="hl sym">=</span> j<span class="hl sym">;</span>
            <span class="hl sym">}</span> <span class="hl kwa">while</span> <span class="hl sym">(</span>k<span class="hl sym">);</span>

            <span class="hl kwa">if</span> <span class="hl sym">(</span>flipsMax <span class="hl sym">&lt;</span> flips<span class="hl sym">)</span>
                flipsMax <span class="hl sym">=</span> flips<span class="hl sym">;</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">for</span> <span class="hl sym">(;;) {</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>r <span class="hl sym">==</span> n<span class="hl sym">)</span>
                <span class="hl kwa">return</span> flipsMax<span class="hl sym">;</span>

            <span class="hl slc">// rotate down perm[0..r] by one</span>
            <span class="hl sym">{</span>
                <span class="hl kwa">int</span> perm0 <span class="hl sym">=</span> perm1<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
                i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
                <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> r<span class="hl sym">) {</span>
                    k <span class="hl sym">=</span> i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
                    perm1<span class="hl sym">[</span>i<span class="hl sym">] =</span> perm1<span class="hl sym">[</span>k<span class="hl sym">];</span>
                    i <span class="hl sym">=</span> k<span class="hl sym">;</span>
                <span class="hl sym">}</span>
                perm1<span class="hl sym">[</span>r<span class="hl sym">] =</span> perm0<span class="hl sym">;</span>
            <span class="hl sym">}</span>
            <span class="hl kwa">if</span> <span class="hl sym">((</span>count<span class="hl sym">[</span>r<span class="hl sym">] -=</span> <span class="hl num">1</span><span class="hl sym">) &gt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
                <span class="hl kwa">break</span><span class="hl sym">;</span>
            <span class="hl sym">++</span>r<span class="hl sym">;</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwa">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwa">char</span><span class="hl sym">[][]</span> args<span class="hl sym">) {</span>
    <span class="hl kwa">int</span> n <span class="hl sym">=</span> args<span class="hl sym">.</span>length <span class="hl sym">&gt;</span> <span class="hl num">1</span> ? <span class="hl kwd">toInt</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]) :</span> <span class="hl num">1</span><span class="hl sym">;</span>
    <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;Pfannkuchen(%d) = %ld</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl kwd">fannkuch</span><span class="hl sym">(</span>n<span class="hl sym">));</span>
<span class="hl sym">}</span>
