<span class="com">&quot;* The Computer Language Shootout</span>
<span class="com">    http://shootout.alioth.debian.org/</span>
<span class="com">    contributed by Isaac Gouy</span>
<span class="com">    modified by Eliot Miranda *&quot;</span><span class="sym">!</span>

Object subclass<span class="sym">: #</span>Tests	instanceVariableNames<span class="sym">:</span> <span class="str">''</span>	classVariableNames<span class="sym">:</span> <span class="str">''</span>	poolDictionaries<span class="sym">:</span> <span class="str">''</span>	category<span class="sym">:</span> <span class="str">'Shootout'</span><span class="sym">!!</span>Array methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>multiplyAtAv   <span class="sym">^(</span><span class="kwa">self</span> multiplyAv<span class="sym">)</span> multiplyAtv<span class="sym">! !!</span>Array methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>multiplyAtv   <span class="sym">|</span> n atv <span class="sym">|</span>   n <span class="sym">:=</span> <span class="kwa">self</span> size<span class="sym">.</span>   atv <span class="sym">:=</span> Array new<span class="sym">:</span> n withAll<span class="sym">:</span> <span class="num">0.0</span>d0<span class="sym">.</span>   <span class="num">1</span> to<span class="sym">:</span> n do<span class="sym">: [:</span>i<span class="sym">|</span> 	      <span class="num">1</span> to<span class="sym">:</span> n do<span class="sym">: [:</span>j<span class="sym">|</span>         atv at<span class="sym">:</span> i put<span class="sym">: (</span>atv at<span class="sym">:</span> i<span class="sym">) + ((</span>j matrixA<span class="sym">:</span> i<span class="sym">) * (</span><span class="kwa">self</span> at<span class="sym">:</span> j<span class="sym">)) ]].   ^</span>atv<span class="sym">! !!</span>Array methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>multiplyAv   <span class="sym">|</span> n av <span class="sym">|</span>   n <span class="sym">:=</span> <span class="kwa">self</span> size<span class="sym">.</span>   av <span class="sym">:=</span> Array new<span class="sym">:</span> n withAll<span class="sym">:</span> <span class="num">0.0</span>d0<span class="sym">.</span>   <span class="num">1</span> to<span class="sym">:</span> n do<span class="sym">: [:</span>i<span class="sym">|</span> 	      <span class="num">1</span> to<span class="sym">:</span> n do<span class="sym">: [:</span>j<span class="sym">|</span>         av at<span class="sym">:</span> i put<span class="sym">: (</span>av at<span class="sym">:</span> i<span class="sym">) + ((</span>i matrixA<span class="sym">:</span> j<span class="sym">) * (</span><span class="kwa">self</span> at<span class="sym">:</span> j<span class="sym">)) ]].   ^</span>av<span class="sym">! !</span>
<span class="sym">!</span>Float methodsFor<span class="sym">:</span> <span class="str">'platform'</span><span class="sym">!</span>asStringWithDecimalPlaces<span class="sym">:</span> anInteger   <span class="sym">|</span> precision rounded <span class="sym">|</span>   anInteger <span class="sym">&lt;=</span> <span class="num">0</span> ifTrue<span class="sym">: [^</span> <span class="kwa">self</span> rounded printString<span class="sym">].</span>   precision <span class="sym">:=</span> Utilities floatPrecisionForDecimalPlaces<span class="sym">:</span> anInteger<span class="sym">.</span>   rounded <span class="sym">:=</span> <span class="kwa">self</span> roundTo<span class="sym">:</span> precision<span class="sym">.   ^(</span>rounded asScaledDecimal<span class="sym">:</span> anInteger<span class="sym">)</span> printString copyUpTo<span class="sym">: $</span>s<span class="sym">! !</span>
<span class="sym">!</span>SmallInteger methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>matrixA<span class="sym">:</span> anInteger&quot;fixup one<span class="sym">-</span>based indexing to zero<span class="sym">-</span>based indexing <span class="sym">-</span> cleanup later&quot;   <span class="sym">|</span> i j <span class="sym">|</span>   i <span class="sym">:=</span> <span class="kwa">self</span> <span class="sym">-</span> <span class="num">1</span><span class="sym">.</span>    j <span class="sym">:=</span> anInteger <span class="sym">-</span> <span class="num">1</span><span class="sym">.   ^</span><span class="num">1.0</span>d0 <span class="sym">/ (</span>i <span class="sym">+</span> j <span class="sym">* (</span>i <span class="sym">+</span> j <span class="sym">+</span> <span class="num">1</span><span class="sym">) /</span><span class="num">2</span>  <span class="sym">+</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span> asFloat<span class="sym">! !!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>spectralnorm   <span class="kwa">self</span> stdout      nextPutAll<span class="sym">: (</span><span class="kwa">self</span> spectralnorm<span class="sym">:</span> <span class="kwa">self</span> arg<span class="sym">);</span>      nextPut<span class="sym">:</span> Character lf<span class="sym">.   ^</span><span class="kwa">self</span> postscript<span class="sym">! !!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>spectralnorm<span class="sym">:</span> n   <span class="sym">|</span> u v vBv vv <span class="sym">|</span>   u <span class="sym">:=</span> Array new<span class="sym">:</span> n withAll<span class="sym">:</span> <span class="num">1.0</span>d0<span class="sym">.</span>   v <span class="sym">:=</span> Array new<span class="sym">:</span> n withAll<span class="sym">:</span> <span class="num">0.0</span>d0<span class="sym">.</span>   <span class="num">10</span> timesRepeat<span class="sym">:      [</span>v <span class="sym">:=</span> u multiplyAtAv<span class="sym">.</span>       u <span class="sym">:=</span> v multiplyAtAv<span class="sym">].</span>   vBv <span class="sym">:=</span> <span class="num">0.0</span>d0<span class="sym">.</span>   vv <span class="sym">:=</span> <span class="num">0.0</span>d0<span class="sym">.</span>   <span class="num">1</span> to<span class="sym">:</span> n do<span class="sym">:      [:</span>i <span class="sym">|</span>       vBv <span class="sym">:=</span> vBv <span class="sym">+ ((</span>u at<span class="sym">:</span> i<span class="sym">) * (</span>v at<span class="sym">:</span> i<span class="sym">)).</span>       vv <span class="sym">:=</span> vv <span class="sym">+ ((</span>v at<span class="sym">:</span> i<span class="sym">) * (</span>v at<span class="sym">:</span> i<span class="sym">))].   ^((</span>vBv <span class="sym">/</span> vv<span class="sym">)</span> sqrt asStringWithDecimalPlaces<span class="sym">:</span> <span class="num">9</span><span class="sym">)! !!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'platform'</span><span class="sym">!</span>arg   <span class="sym">^(</span>SmalltalkImage current getSystemAttribute<span class="sym">:</span> <span class="num">3</span><span class="sym">)</span> asInteger<span class="sym">! !!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'platform'</span><span class="sym">!</span>postscript   SmalltalkImage current snapshot<span class="sym">:</span> <span class="kwa">false</span> andQuit<span class="sym">:</span> <span class="kwa">true</span><span class="sym">.   ^</span><span class="str">''</span><span class="sym">! !</span>
<span class="sym">!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'platform'</span><span class="sym">!</span>stdout   <span class="sym">^</span>UnixProcess stdOut<span class="sym">! !</span>
