<span class="dir">#!/bin/env groovy</span>
<span class="com">/*</span>
<span class="com">	$Id: chameneos-groovy.code,v 1.5 2005-10-31 02:54:24 igouy-guest Exp $</span>
<span class="com"></span>
<span class="com">	The Great Computer Language Shootout</span>
<span class="com">	http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">	contributed by Jochen Hinrichsen</span>
<span class="com">	modified by</span>
<span class="com"></span>
<span class="com">	For a description of the benchmark, check Chameneos.pdf</span>
<span class="com">*/</span>

<span class="kwc">class</span> Colour <span class="sym">{</span>

    <span class="kwb">static</span> <span class="kwc">public</span> blue		<span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Colour</span><span class="sym">(</span>colour<span class="sym">:</span><span class="str">&quot;blue&quot;</span><span class="sym">)</span>
    <span class="kwb">static</span> <span class="kwc">public</span> faded		<span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Colour</span><span class="sym">(</span>colour<span class="sym">:</span><span class="str">&quot;faded&quot;</span><span class="sym">)</span>
    <span class="kwb">static</span> <span class="kwc">public</span> red		<span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Colour</span><span class="sym">(</span>colour<span class="sym">:</span><span class="str">&quot;red&quot;</span><span class="sym">)</span>
    <span class="kwb">static</span> <span class="kwc">public</span> yellow	<span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Colour</span><span class="sym">(</span>colour<span class="sym">:</span><span class="str">&quot;yellow&quot;</span><span class="sym">)</span>

	&#64;Property colour

	<span class="slc">// == operator</span>
	<span class="kwc">public</span> <span class="kwd">isCase</span><span class="sym">(</span>Object c<span class="sym">) {</span>
		colour <span class="sym">==</span> c<span class="sym">.</span>colour
	<span class="sym">}</span>

	<span class="slc">// don't use arithmetic</span>
	<span class="slc">// use if-else or switch/case or pattern-match</span>
	<span class="kwc">public</span> Colour <span class="kwd">complement</span><span class="sym">(</span>Colour other<span class="sym">) {</span>
		<span class="kwa">if</span> <span class="sym">(</span><span class="kwa">this</span> <span class="sym">==</span> other<span class="sym">)</span> <span class="kwa">return this</span>

		def c <span class="sym">=</span> <span class="kwa">this</span>
		<span class="kwa">switch</span> <span class="sym">(</span><span class="kwa">this</span><span class="sym">) {</span>
			<span class="kwa">case</span> blue<span class="sym">:</span>		c <span class="sym">= (</span> other <span class="sym">==</span> Colour<span class="sym">.</span>red  ? Colour<span class="sym">.</span>yellow <span class="sym">:</span> Colour<span class="sym">.</span>red<span class="sym">)</span>
			<span class="kwa">case</span> red<span class="sym">:</span>		c <span class="sym">= (</span> other <span class="sym">==</span> Colour<span class="sym">.</span>blue ? Colour<span class="sym">.</span>yellow <span class="sym">:</span> Colour<span class="sym">.</span>blue<span class="sym">)</span>
         	<span class="kwa">case</span> yellow<span class="sym">:</span>	c <span class="sym">= (</span> other <span class="sym">==</span> Colour<span class="sym">.</span>blue ? Colour<span class="sym">.</span>red    <span class="sym">:</span> Colour<span class="sym">.</span>blue<span class="sym">)</span>
      	<span class="sym">}</span>
	  	<span class="kwa">return</span> c
	<span class="sym">}</span>

	<span class="kwc">public</span> String <span class="kwd">toString</span><span class="sym">() {</span>
		<span class="kwa">return</span> colour
	<span class="sym">}</span>

<span class="sym">}</span>

assert Colour<span class="sym">.</span>yellow<span class="sym">.</span><span class="kwd">complement</span><span class="sym">(</span>Colour<span class="sym">.</span>blue<span class="sym">) ==</span> Colour<span class="sym">.</span>red

<span class="kwc">class</span> Mall <span class="sym">{</span>

    &#64;Property AColour<span class="sym">,</span> BColour
    &#64;Property FirstCall <span class="sym">=</span> <span class="kwa">true</span>
    &#64;Property MustWait <span class="sym">=</span> <span class="kwa">false</span>

	&#64;Property maxMeetings <span class="sym">=</span> <span class="num">100</span>

    <span class="kwc">public</span> synchronized Colour <span class="kwd">Cooperation</span><span class="sym">(</span>id<span class="sym">,</span> Colour c<span class="sym">) {</span>
        def other <span class="sym">=</span> c
        <span class="kwa">while</span> <span class="sym">(</span>MustWait<span class="sym">) {</span> <span class="kwa">try</span> <span class="sym">{</span> <span class="kwd">wait</span> <span class="sym">() }</span> <span class="kwa">catch</span> <span class="sym">(</span>InterruptedException e<span class="sym">) {} }</span>

        <span class="kwa">if</span> <span class="sym">(</span>FirstCall<span class="sym">) {</span>
			<span class="kwa">if</span> <span class="sym">(</span>maxMeetings<span class="sym">-- &gt;</span> <span class="num">0</span><span class="sym">) {</span>
	            AColour <span class="sym">=</span> c
				FirstCall <span class="sym">=</span> <span class="kwa">false</span>
				<span class="kwa">while</span> <span class="sym">(!</span>FirstCall<span class="sym">) {</span> <span class="kwa">try</span> <span class="sym">{</span> <span class="kwd">wait</span> <span class="sym">() }</span> <span class="kwa">catch</span> <span class="sym">(</span>InterruptedException e<span class="sym">) {} }</span>
				MustWait <span class="sym">=</span> <span class="kwa">false</span>
				other <span class="sym">=</span> BColour
			 <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
			 	<span class="slc">// Thread termination condition</span>
				other <span class="sym">=</span> Colour<span class="sym">.</span>faded
			<span class="sym">}</span>
        <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
            BColour <span class="sym">=</span> c
            FirstCall <span class="sym">=</span> <span class="kwa">true</span>
            MustWait <span class="sym">=</span> <span class="kwa">true</span>
            other <span class="sym">=</span> AColour
        <span class="sym">}</span>
		assert other <span class="sym">!=</span> null
        <span class="kwd">notifyAll</span><span class="sym">()</span>
        <span class="kwa">return</span> other
    <span class="sym">}</span>

<span class="sym">}</span>

<span class="kwc">class</span> AChameneos extends Thread <span class="sym">{</span>

    &#64;Property Mall mall
    &#64;Property id
    &#64;Property Colour myColour<span class="sym">,</span> otherColour
	&#64;Property meetings <span class="sym">=</span> <span class="num">0</span>

    <span class="kwc">private</span> <span class="kwb">void</span> <span class="kwd">Mutating</span><span class="sym">() {</span>
        otherColour <span class="sym">=</span> mall<span class="sym">.</span><span class="kwd">Cooperation</span><span class="sym">(</span>id<span class="sym">,</span> myColour<span class="sym">)</span>
		<span class="kwa">if</span> <span class="sym">(</span>otherColour <span class="sym">==</span> Colour<span class="sym">.</span>faded<span class="sym">) {</span>
			myColour <span class="sym">=</span> otherColour<span class="sym">;</span>
		<span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
			meetings<span class="sym">++</span>
        	myColour <span class="sym">=</span> myColour<span class="sym">.</span><span class="kwd">complement</span><span class="sym">(</span>otherColour<span class="sym">)</span>
		<span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwc">public</span> <span class="kwb">void</span> <span class="kwd">run</span><span class="sym">() {</span>
        <span class="kwa">while</span><span class="sym">(</span>myColour <span class="sym">!=</span> Colour<span class="sym">.</span>faded<span class="sym">) {</span>
	        <span class="slc">// EatingHoneysuckleAndTraining()</span>
   	      	<span class="slc">// GoingToTheMall()</span>
   	       	<span class="kwd">Mutating</span><span class="sym">()</span>
        <span class="sym">}</span>
    <span class="sym">}</span>
<span class="sym">}</span>

def N <span class="sym">= (</span>args<span class="sym">.</span>length <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> ? <span class="num">10000</span> <span class="sym">:</span> args<span class="sym">[</span><span class="num">0</span><span class="sym">].</span><span class="kwd">toInteger</span><span class="sym">()</span>
def colours <span class="sym">= [</span>
	Colour<span class="sym">.</span>blue<span class="sym">,</span>
	Colour<span class="sym">.</span>red<span class="sym">,</span>
	Colour<span class="sym">.</span>yellow<span class="sym">,</span>
	Colour<span class="sym">.</span>blue<span class="sym">,</span>
<span class="sym">]</span>

def chameneos <span class="sym">= []</span>
def myMall <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Mall</span><span class="sym">(</span>maxMeetings<span class="sym">:</span> N<span class="sym">)</span>
def i <span class="sym">=</span> <span class="num">0</span>
colours<span class="sym">.</span><span class="kwd">each</span><span class="sym">() {</span> colour <span class="sym">-&gt;</span>
    chameneos <span class="sym">+=</span> <span class="kwa">new</span> <span class="kwd">AChameneos</span><span class="sym">(</span>mall<span class="sym">:</span>myMall<span class="sym">,</span> id<span class="sym">:</span>i<span class="sym">++,</span> myColour<span class="sym">:</span>colour<span class="sym">)</span>
<span class="sym">}</span>

chameneos<span class="sym">.</span><span class="kwd">each</span><span class="sym">() {</span>
	it<span class="sym">.</span><span class="kwd">start</span><span class="sym">()</span>
<span class="sym">}</span>

chameneos<span class="sym">.</span><span class="kwd">each</span><span class="sym">() {</span>
	it<span class="sym">.</span><span class="kwd">join</span><span class="sym">()</span>
<span class="sym">}</span>

<span class="slc">// Count total meetings</span>
def total <span class="sym">=</span> chameneos<span class="sym">.</span><span class="kwd">inject</span><span class="sym">(</span><span class="num">0</span><span class="sym">) {</span> sum<span class="sym">,</span> it <span class="sym">-&gt;</span>
	sum <span class="sym">+=</span> it<span class="sym">.</span>meetings
<span class="sym">}</span>

println total
assert total <span class="sym">==</span> <span class="num">2</span> <span class="sym">*</span> N

<span class="slc">// EOF</span>

