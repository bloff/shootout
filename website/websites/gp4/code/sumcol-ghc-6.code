<span class="com">{-# OPTIONS -fbang-patterns #-}</span>
<span class="slc">--</span>
<span class="slc">-- The Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">-- Contributed by Don Stewart</span>
<span class="slc">--</span>
<span class="slc">-- Lazily reads lines on demand.</span>
<span class="slc">--</span>
<span class="slc">-- Based on older versions by Greg Buchholz,</span>
<span class="slc">-- Mirko Rahn, Chris Kuklewicz and David Himmelstrup</span>
<span class="slc">--</span>
<span class="kwa">import</span> Data.<span class="kwb">Char</span>
<span class="kwa">import qualified</span> Data.ByteString.Lazy.Char8 <span class="kwa">as</span> B

main <span class="sym">=</span> print . new <span class="num">0</span> <span class="sym">=&lt;&lt;</span> B.getContents

new <span class="sym">!</span>i <span class="sym">!</span>s
    <span class="sym">|</span> B.null s  <span class="sym">=</span> i
    <span class="sym">|</span> x <span class="sym">==</span> '<span class="sym">-</span>'  <span class="sym">=</span> sub i <span class="num">0</span> xs
    <span class="sym">|</span> otherwise <span class="sym">=</span> add i <span class="sym">(</span>parse x<span class="sym">)</span> xs
    <span class="kwa">where</span> <span class="sym">(</span>x<span class="sym">,</span>xs<span class="sym">) =</span> uncons s

sub <span class="sym">!</span>i <span class="sym">!</span>n <span class="sym">!</span>t <span class="sym">|</span> y <span class="sym">==</span> '\n'  <span class="sym">=</span> new <span class="sym">(</span>i<span class="sym">-</span>n<span class="sym">)</span> ys
             <span class="sym">|</span> otherwise  <span class="sym">=</span> sub i n'  ys
  <span class="kwa">where</span> <span class="sym">(</span>y<span class="sym">,</span>ys<span class="sym">) =</span> uncons t
        n'     <span class="sym">=</span> parse y <span class="sym">+</span> <span class="num">10</span> <span class="sym">*</span> n

add <span class="sym">!</span>i <span class="sym">!</span>n <span class="sym">!</span>t <span class="sym">|</span> y <span class="sym">==</span> '\n' <span class="sym">=</span> new <span class="sym">(</span>i<span class="sym">+</span>n<span class="sym">)</span> ys
             <span class="sym">|</span> otherwise <span class="sym">=</span> add i n'   ys
  <span class="kwa">where</span> <span class="sym">(</span>y<span class="sym">,</span>ys<span class="sym">) =</span> uncons t
        n'     <span class="sym">=</span> parse y <span class="sym">+</span> <span class="num">10</span> <span class="sym">*</span> n

parse c  <span class="sym">=</span> ord c <span class="sym">-</span> ord '<span class="num">0</span>'

uncons <span class="sym">!</span>s <span class="sym">= (</span>B.head s<span class="sym">,</span> B.tail s<span class="sym">)</span>
<span class="com">{-# INLINE uncons #-}</span>
