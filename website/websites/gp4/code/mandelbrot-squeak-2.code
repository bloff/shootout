<span class="com">&quot;* The Computer Language Shootout</span>
<span class="com">    http://shootout.alioth.debian.org/</span>
<span class="com">    contributed by Paolo Bonzini *&quot;</span><span class="sym">!</span>

<span class="sym">!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>mandelbrot2<span class="sym">:</span> extent to<span class="sym">:</span> output   <span class="sym">|</span> limit2 m bits zr zi cr ci i tr stepr stepi <span class="sym">|</span>   limit2 <span class="sym">:=</span> <span class="num">4.0</span>d0<span class="sym">.</span>
   m <span class="sym">:=</span> <span class="num">50</span><span class="sym">.</span>
   stepr <span class="sym">:=</span> <span class="num">2.0</span>d0 <span class="sym">/</span> extent<span class="sym">.</span>
   stepi <span class="sym">:=</span> <span class="num">2.0</span>d0 <span class="sym">/</span> extent<span class="sym">.</span>

   <span class="num">0</span> to<span class="sym">:</span> extent <span class="sym">-</span> <span class="num">1</span> do<span class="sym">: [ :</span>y <span class="sym">|</span>
       bits <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>
       ci <span class="sym">:=</span> stepi <span class="sym">*</span> y asFloat <span class="sym">-</span> <span class="num">1.0</span>d0<span class="sym">.</span>
       <span class="num">0</span> to<span class="sym">:</span> extent <span class="sym">-</span> <span class="num">1</span> do<span class="sym">: [ :</span>x <span class="sym">|</span>
           cr <span class="sym">:=</span> stepr <span class="sym">*</span> x asFloat <span class="sym">-</span> <span class="num">1.5</span>d0<span class="sym">.</span>
           zr <span class="sym">:=</span> cr<span class="sym">.</span> zi <span class="sym">:=</span> ci<span class="sym">.</span>

           bits <span class="sym">:=</span> bits bitShift<span class="sym">:</span> <span class="num">1</span><span class="sym">.</span>
           i <span class="sym">:=</span> <span class="num">1</span><span class="sym">.</span>
           <span class="sym">[</span>
               tr <span class="sym">:= (</span>zr<span class="sym">*</span>zr<span class="sym">) - (</span>zi<span class="sym">*</span>zi<span class="sym">) +</span> cr<span class="sym">.</span>
               zi <span class="sym">:=</span> <span class="num">2.0</span>d0 <span class="sym">*</span> zr <span class="sym">*</span> zi <span class="sym">+</span> ci<span class="sym">.</span>
               zr <span class="sym">:=</span> tr<span class="sym">.</span>
               <span class="sym">(</span>zr<span class="sym">*</span>zr<span class="sym">) + (</span>zi<span class="sym">*</span>zi<span class="sym">) &lt;</span> limit2 and<span class="sym">: [ (</span>i <span class="sym">:=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">) &lt;</span> m <span class="sym">]</span>
           <span class="sym">]</span> whileTrue<span class="sym">.</span>

           i <span class="sym">=</span> m ifTrue<span class="sym">: [</span> bits <span class="sym">:=</span> bits <span class="sym">+</span> <span class="num">1</span> <span class="sym">].</span>
           <span class="sym">(</span>x bitAnd<span class="sym">:</span> <span class="num">7</span><span class="sym">) ==</span> <span class="num">7</span> ifTrue<span class="sym">: [</span>
               output nextPut<span class="sym">:</span> bits<span class="sym">.</span>
               bits <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>
           <span class="sym">]</span>
       <span class="sym">].</span>
       <span class="sym">(</span>extent bitAnd<span class="sym">:</span> <span class="num">7</span><span class="sym">) ==</span> <span class="num">0</span> ifFalse<span class="sym">: [</span>
           bits <span class="sym">:=</span> bits bitShift<span class="sym">:</span> <span class="num">8</span> <span class="sym">- (</span>extent bitAnd<span class="sym">:</span> <span class="num">7</span><span class="sym">).</span>
           output nextPut<span class="sym">:</span> bits<span class="sym">.</span>
       <span class="sym">]</span>
   <span class="sym">]! !</span>

<span class="sym">!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmark scripts'</span><span class="sym">!</span>mandelbrot2   <span class="sym">|</span> n output <span class="sym">|</span>   n <span class="sym">:=</span> <span class="kwa">self</span> arg<span class="sym">.   (</span>output <span class="sym">:=</span> <span class="kwa">self</span> stdout<span class="sym">)</span>      nextPutAll<span class="sym">:</span> <span class="str">'P4'</span><span class="sym">;</span> nextPut<span class="sym">:</span> Character lf<span class="sym">;</span>      print<span class="sym">:</span> n<span class="sym">;</span> space<span class="sym">;</span> print<span class="sym">:</span> n<span class="sym">;</span> nextPut<span class="sym">:</span> Character lf<span class="sym">;</span>
      binary<span class="sym">.</span>   <span class="kwa">self</span> mandelbrot2<span class="sym">:</span> n to<span class="sym">:</span> output<span class="sym">.   ^</span><span class="str">''</span><span class="sym">! !</span>
