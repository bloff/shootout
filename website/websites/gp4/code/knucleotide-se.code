<span class="hl slc">--</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">-- k-nucleotide for SE2.1 by jos√©</span>
<span class="hl slc">--</span>
<span class="hl kwa">class</span> KNUCLEOTIDE

<span class="hl kwa">inherit</span> ABSTRACT_SORTER<span class="hl sym">[</span><span class="hl kwa">TUPLE</span><span class="hl sym">[</span><span class="hl kwb">INTEGER</span><span class="hl sym">,</span>STRING<span class="hl sym">]]</span>

insert ARGUMENTS

creation make <span class="hl kwa">feature</span>

   make <span class="hl kwa">is do</span>
      <span class="hl kwa">create</span> array.<span class="hl kwd">make</span><span class="hl sym">(</span><span class="hl num">100000</span><span class="hl sym">)</span>
      <span class="hl kwa">create</span> sequence.<span class="hl kwd">make</span><span class="hl sym">(</span><span class="hl num">100000</span><span class="hl sym">)</span>
      <span class="hl kwa">create</span> dictionary.<span class="hl kwd">with_capacity</span><span class="hl sym">(</span><span class="hl num">10000</span><span class="hl sym">)</span>
      read
      <span class="hl kwd">write_frequencies</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>
      <span class="hl kwd">write_frequencies</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">)</span>
      <span class="hl kwd">write_count</span><span class="hl sym">(</span><span class="hl kwa">once</span> <span class="hl str">&quot;GGT&quot;</span><span class="hl sym">)</span>
      <span class="hl kwd">write_count</span><span class="hl sym">(</span><span class="hl kwa">once</span> <span class="hl str">&quot;GGTA&quot;</span><span class="hl sym">)</span>
      <span class="hl kwd">write_count</span><span class="hl sym">(</span><span class="hl kwa">once</span> <span class="hl str">&quot;GGTATT&quot;</span><span class="hl sym">)</span>
      <span class="hl kwd">write_count</span><span class="hl sym">(</span><span class="hl kwa">once</span> <span class="hl str">&quot;GGTATTTTAATT&quot;</span><span class="hl sym">)</span>
      <span class="hl kwd">write_count</span><span class="hl sym">(</span><span class="hl kwa">once</span> <span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl sym">)</span>
   <span class="hl kwa">end</span>

   <span class="hl kwd">write_frequencies</span><span class="hl sym">(</span>length<span class="hl sym">:</span> <span class="hl kwb">INTEGER</span><span class="hl sym">)</span> <span class="hl kwa">is local</span> i<span class="hl sym">:</span> <span class="hl kwb">INTEGER</span> coef<span class="hl sym">:</span> REAL_64 <span class="hl kwa">do</span>
      <span class="hl kwd">count</span><span class="hl sym">(</span>length<span class="hl sym">)</span>
      array.clear_count
      dictionary.<span class="hl kwd">item_map_in</span><span class="hl sym">(</span>array<span class="hl sym">)</span>
      <span class="hl kwd">sort</span><span class="hl sym">(</span>array<span class="hl sym">)</span>
      coef <span class="hl sym">:= {</span><span class="hl kwb">INTEGER</span> <span class="hl num">100</span><span class="hl sym">} / (</span><span class="hl num">1</span> <span class="hl sym">+</span> sequence.count <span class="hl sym">-</span> length<span class="hl sym">)</span>
      <span class="hl kwa">from</span> i<span class="hl sym">:=</span>array.lower until i<span class="hl sym">&gt;</span>array.upper <span class="hl kwa">loop</span>
         io.<span class="hl kwd">put_string</span><span class="hl sym">(</span>array.<span class="hl kwd">item</span><span class="hl sym">(</span>i<span class="hl sym">)</span>.second<span class="hl sym">)</span>
         io.<span class="hl kwd">put_character</span><span class="hl sym">(</span><span class="hl str">' '</span><span class="hl sym">)</span>
         io.<span class="hl kwd">put_real_format</span><span class="hl sym">(</span>coef <span class="hl sym">*</span> array.<span class="hl kwd">item</span><span class="hl sym">(</span>i<span class="hl sym">)</span>.first<span class="hl sym">,</span> <span class="hl num">3</span><span class="hl sym">)</span>
         io.<span class="hl kwd">put_character</span><span class="hl sym">(</span><span class="hl str">'%N'</span><span class="hl sym">)</span>
         i <span class="hl sym">:=</span> i <span class="hl sym">+</span> <span class="hl num">1</span>
      <span class="hl kwa">end</span>
      io.<span class="hl kwd">put_character</span><span class="hl sym">(</span><span class="hl str">'%N'</span><span class="hl sym">)</span>
   <span class="hl kwa">end</span>

   <span class="hl kwd">write_count</span><span class="hl sym">(</span>match<span class="hl sym">:</span> STRING<span class="hl sym">)</span> <span class="hl kwa">is local</span> n<span class="hl sym">:</span> <span class="hl kwb">INTEGER</span> <span class="hl kwa">do</span>
      <span class="hl kwd">count</span><span class="hl sym">(</span>match.count<span class="hl sym">)</span>
      <span class="hl kwa">tuple</span> <span class="hl sym">:=</span> dictionary.<span class="hl kwd">reference_at</span><span class="hl sym">(</span>match<span class="hl sym">)</span>
      <span class="hl kwa">if tuple</span> <span class="hl sym">/=</span> Void <span class="hl kwa">then</span> n <span class="hl sym">:=</span> <span class="hl kwa">tuple</span>.first <span class="hl kwa">end</span>
      io.<span class="hl kwd">put_integer</span><span class="hl sym">(</span>n<span class="hl sym">)</span>
      io.<span class="hl kwd">put_character</span><span class="hl sym">(</span><span class="hl str">'%T'</span><span class="hl sym">)</span>
      io.<span class="hl kwd">put_string</span><span class="hl sym">(</span>match<span class="hl sym">)</span>
      io.<span class="hl kwd">put_character</span><span class="hl sym">(</span><span class="hl str">'%N'</span><span class="hl sym">)</span>
   <span class="hl kwa">end</span>

   sequence<span class="hl sym">:</span> STRING
   part<span class="hl sym">:</span> STRING
   <span class="hl kwa">tuple</span><span class="hl sym">:</span> <span class="hl kwa">TUPLE</span><span class="hl sym">[</span><span class="hl kwb">INTEGER</span><span class="hl sym">,</span>STRING<span class="hl sym">]</span>
   dictionary<span class="hl sym">:</span> HASHED_DICTIONARY<span class="hl sym">[</span><span class="hl kwa">like tuple</span><span class="hl sym">,</span><span class="hl kwa">like</span> part<span class="hl sym">]</span>
   array<span class="hl sym">:</span> FAST_ARRAY<span class="hl sym">[</span><span class="hl kwa">like tuple</span><span class="hl sym">]</span>

   read <span class="hl kwa">is do</span>
      <span class="hl kwa">from</span> io.read_line until io.end_of_input <span class="hl kwa">or else</span> io.last_string.<span class="hl kwd">has_prefix</span><span class="hl sym">(</span><span class="hl kwa">once</span> <span class="hl str">&quot;&gt;THREE&quot;</span><span class="hl sym">)</span> <span class="hl kwa">loop</span>
         io.read_line
      <span class="hl kwa">end</span>
      <span class="hl kwa">if not</span> io.end_of_input <span class="hl kwa">then</span>
         <span class="hl kwa">from</span> io.read_line until io.end_of_input <span class="hl kwa">or else</span> io.last_string.first <span class="hl sym">=</span> <span class="hl str">'&gt;'</span> <span class="hl kwa">loop</span>
            <span class="hl kwa">if</span> io.last_string.first <span class="hl sym">/=</span> <span class="hl str">';'</span> <span class="hl kwa">then</span> sequence.<span class="hl kwd">append</span><span class="hl sym">(</span>io.last_string<span class="hl sym">)</span> <span class="hl kwa">end</span>
            io.read_line
         <span class="hl kwa">end</span>
         sequence.to_upper
      <span class="hl kwa">end</span>
   <span class="hl kwa">end</span>

   <span class="hl kwd">count</span><span class="hl sym">(</span>length<span class="hl sym">:</span> <span class="hl kwb">INTEGER</span><span class="hl sym">)</span> <span class="hl kwa">is local</span> pos<span class="hl sym">,</span> i<span class="hl sym">,</span> j<span class="hl sym">:</span> <span class="hl kwb">INTEGER</span> <span class="hl kwa">do</span>
      dictionary.clear_count
      <span class="hl kwa">from</span>
         part <span class="hl sym">:=</span> sequence.<span class="hl kwd">substring</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span>length<span class="hl sym">)</span>
         <span class="hl kwa">tuple</span> <span class="hl sym">:= [{</span><span class="hl kwb">INTEGER</span> <span class="hl num">1</span><span class="hl sym">},</span> part.twin<span class="hl sym">]</span>
         dictionary.<span class="hl kwd">add</span><span class="hl sym">(</span><span class="hl kwa">tuple</span><span class="hl sym">,</span><span class="hl kwa">tuple</span>.second<span class="hl sym">)</span>
         pos <span class="hl sym">:=</span> length
      until
         pos <span class="hl sym">&gt;=</span> sequence.upper
      <span class="hl kwa">loop</span>
         pos <span class="hl sym">:=</span> pos <span class="hl sym">+</span> <span class="hl num">1</span>
         <span class="hl kwa">from</span> i<span class="hl sym">:=</span><span class="hl num">1</span> until i<span class="hl sym">=</span>length <span class="hl kwa">loop</span> j<span class="hl sym">:=</span>i<span class="hl sym">+</span><span class="hl num">1</span> part.<span class="hl kwd">put</span><span class="hl sym">(</span>part.<span class="hl kwd">item</span><span class="hl sym">(</span>j<span class="hl sym">),</span>i<span class="hl sym">)</span> i<span class="hl sym">:=</span>j <span class="hl kwa">end</span>
         part.<span class="hl kwd">put</span><span class="hl sym">(</span>sequence.<span class="hl kwd">item</span><span class="hl sym">(</span>pos<span class="hl sym">),</span>length<span class="hl sym">)</span>
         <span class="hl kwa">tuple</span> <span class="hl sym">:=</span> dictionary.<span class="hl kwd">reference_at</span><span class="hl sym">(</span>part<span class="hl sym">)</span>
         <span class="hl kwa">if tuple</span> <span class="hl sym">=</span> Void <span class="hl kwa">then</span>
            <span class="hl kwa">tuple</span> <span class="hl sym">:= [{</span><span class="hl kwb">INTEGER</span> <span class="hl num">1</span><span class="hl sym">},</span> part.twin<span class="hl sym">]</span>
            dictionary.<span class="hl kwd">add</span><span class="hl sym">(</span><span class="hl kwa">tuple</span><span class="hl sym">,</span><span class="hl kwa">tuple</span>.second<span class="hl sym">)</span>
         <span class="hl kwa">else</span>
            <span class="hl kwa">tuple</span>.<span class="hl kwd">set_first</span><span class="hl sym">(</span><span class="hl num">1</span> <span class="hl sym">+</span> <span class="hl kwa">tuple</span>.first<span class="hl sym">)</span>
         <span class="hl kwa">end</span>
      <span class="hl kwa">end</span>
   <span class="hl kwa">end</span>

   <span class="hl kwd">lt</span><span class="hl sym">(</span>a<span class="hl sym">,</span>b<span class="hl sym">:</span> <span class="hl kwa">like tuple</span><span class="hl sym">):</span> <span class="hl kwb">BOOLEAN</span> <span class="hl kwa">is do</span>
      <span class="hl kwa">Result</span> <span class="hl sym">:=</span> b.first<span class="hl sym">&lt;</span>a.first
         <span class="hl kwa">or else</span> <span class="hl sym">(</span>a.first<span class="hl sym">=</span>b.first <span class="hl kwa">and then</span> a.second<span class="hl sym">&lt;</span>b.second<span class="hl sym">)</span>
   <span class="hl kwa">end</span>

<span class="hl kwa">end</span>

