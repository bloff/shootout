<span class="str">&quot;  The Computer Language Shootout</span>
<span class="str">   http://shootout.alioth.debian.org/</span>
<span class="str">   contributed by Isaac Gouy</span>
<span class="str">   modified by Paolo Bonzini&quot;</span><span class="sym">!</span>

<span class="sym">!</span>Shootout.Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>

nsievebits<span class="sym">:</span> argvString
   <span class="sym">|</span> n <span class="sym">|</span>
   n <span class="sym">:=</span> CEnvironment argv first asNumber.
   <span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">2</span><span class="sym">)</span> ifTrue<span class="sym">: [</span>n <span class="sym">:=</span> <span class="num">2</span><span class="sym">]</span>.
    n      primesBits.
   <span class="sym">(</span>n <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> primesBits.
   <span class="sym">(</span>n <span class="sym">-</span> <span class="num">2</span><span class="sym">)</span> primesBits.
   ^<span class="str">''</span> <span class="sym">! !</span>


<span class="sym">!</span>Core.SmallInteger methodsFor<span class="sym">:</span> <span class="str">'computer language shootout'</span><span class="sym">!</span>

nsieveBits
    <span class="sym">|</span> count isComposite <span class="sym">|</span>
    self <span class="sym">&lt;</span> <span class="num">2</span> ifTrue<span class="sym">: [</span> ^<span class="num">0</span> <span class="sym">]</span>.

    isComposite <span class="sym">:=</span> Shootout.BitArray new<span class="sym">:</span> self.
    count <span class="sym">:=</span> <span class="num">0</span>.
    <span class="num">2</span> to<span class="sym">:</span> self <span class="kwa">do</span><span class="sym">: [ :</span>i <span class="sym">|</span>
	<span class="sym">(</span>isComposite at<span class="sym">:</span> i<span class="sym">)</span> ifFalse<span class="sym">: [</span>
	    count <span class="sym">:=</span> count <span class="sym">+</span> <span class="num">1</span>.
	    i <span class="sym">+</span> i to<span class="sym">:</span> self by<span class="sym">:</span> i <span class="kwa">do</span><span class="sym">: [ :</span>k <span class="sym">|</span>
		isComposite at<span class="sym">:</span> k put<span class="sym">:</span> true <span class="sym">] ]</span>.
    <span class="sym">]</span>.
    ^count <span class="sym">! !</span>


<span class="sym">!</span>Core.SmallInteger methodsFor<span class="sym">:</span> <span class="str">'computer language shootout'</span><span class="sym">!</span>

primesBits
   <span class="sym">|</span> m <span class="sym">|</span>
   m <span class="sym">:= (</span><span class="num">2</span> raisedTo<span class="sym">:</span> self<span class="sym">) *</span> <span class="num">10000</span>.
   OS.Stdout
      nextPutAll<span class="sym">:</span> <span class="str">'Primes up to '</span><span class="sym">;</span> nextPutAll<span class="sym">: (</span>m asPaddedString<span class="sym">:</span> <span class="num">8</span><span class="sym">);</span>
      nextPutAll<span class="sym">: ((</span>m nsieveBits<span class="sym">)</span> asPaddedString<span class="sym">:</span> <span class="num">9</span><span class="sym">);</span> cr <span class="sym">! !</span>


<span class="sym">!</span>Core.Integer methodsFor<span class="sym">:</span> <span class="str">'computer language shootout'</span><span class="sym">!</span>

asPaddedString<span class="sym">:</span> aWidth
   <span class="sym">|</span> s <span class="sym">|</span>
   s <span class="sym">:=</span> WriteStream on<span class="sym">: (</span>String new<span class="sym">:</span> <span class="num">10</span><span class="sym">)</span>.
   self printOn<span class="sym">:</span> s paddedWith<span class="sym">: $</span>  to<span class="sym">:</span> aWidth base<span class="sym">:</span> <span class="num">10</span>.
   ^s contents <span class="sym">! !</span>


Smalltalk.Shootout defineClass<span class="sym">:</span> <span class="slc">#BitArray</span>
	superclass<span class="sym">:</span> <span class="slc">#{Core.Object}</span>
	indexedType<span class="sym">:</span> <span class="slc">#bytes</span>
	private<span class="sym">:</span> false
	instanceVariableNames<span class="sym">:</span> <span class="str">''</span>
	classInstanceVariableNames<span class="sym">:</span> <span class="str">''</span>
	imports<span class="sym">:</span> <span class="str">''</span>
	category<span class="sym">:</span> <span class="str">'Shootout'</span><span class="sym">!</span>


<span class="sym">!</span>Shootout.BitArray class methodsFor<span class="sym">:</span> <span class="str">'instance creation'</span><span class="sym">!</span>

new<span class="sym">:</span> size
    ^super new<span class="sym">: (</span>size <span class="sym">+</span> <span class="num">7</span> bitShift<span class="sym">: -</span><span class="num">3</span><span class="sym">) ! !</span>


<span class="sym">!</span>Shootout.BitArray methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>

at<span class="sym">:</span> index
    <span class="sym">|</span> wordIndex bitMask <span class="sym">|</span>
    wordIndex <span class="sym">:= ((</span>index <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> bitShift<span class="sym">: -</span><span class="num">3</span><span class="sym">) +</span> <span class="num">1</span>.
    bitMask <span class="sym">:=</span> <span class="num">1</span> bitShift<span class="sym">: (</span>index <span class="sym">-</span> <span class="num">1</span> bitAnd<span class="sym">:</span> <span class="num">7</span><span class="sym">)</span>.
    ^<span class="sym">((</span>self basicAt<span class="sym">:</span> wordIndex<span class="sym">)</span> bitAnd<span class="sym">:</span> bitMask<span class="sym">) &gt;</span> <span class="num">0</span> <span class="sym">!</span>

at<span class="sym">:</span> index put<span class="sym">:</span> bit
    <span class="sym">|</span> wordIndex bitMask word <span class="sym">|</span>
    wordIndex <span class="sym">:= ((</span>index <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> bitShift<span class="sym">: -</span><span class="num">3</span><span class="sym">) +</span> <span class="num">1</span>.
    bitMask <span class="sym">:=</span> <span class="num">1</span> bitShift<span class="sym">: (</span>index <span class="sym">-</span> <span class="num">1</span> bitAnd<span class="sym">:</span> <span class="num">7</span><span class="sym">)</span>.

    word <span class="sym">:=</span> self basicAt<span class="sym">:</span> wordIndex.
    word <span class="sym">:=</span> word bitOr<span class="sym">:</span> bitMask.
    bit ifFalse<span class="sym">: [</span>word <span class="sym">:=</span> word <span class="sym">-</span> bitMask<span class="sym">]</span>.
    self basicAt<span class="sym">:</span> wordIndex put<span class="sym">:</span> word.
    ^bit <span class="sym">! !</span>
