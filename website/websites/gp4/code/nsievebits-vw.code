<span class="com">&quot;  The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">   modified by Paolo Bonzini&quot;!</span>
<span class="com"></span>
<span class="com">!Shootout.Tests class methodsFor: 'benchmarking'!</span>
<span class="com"></span>
<span class="com">nsievebits</span>
<span class="com">   | n |</span>
<span class="com">   n := CEnvironment argv first asNumber.</span>
<span class="com">   (n &lt; 2) ifTrue: [n := 2].</span>
<span class="com">    n      primesBits.</span>
<span class="com">   (n - 1) primesBits.</span>
<span class="com">   (n - 2) primesBits.</span>
<span class="com">   ^'' ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">!Core.SmallInteger methodsFor: 'computer language shootout'!</span>
<span class="com"></span>
<span class="com">nsieveBits</span>
<span class="com">    | count isComposite |</span>
<span class="com">    self &lt; 2 ifTrue: [ ^0 ].</span>
<span class="com"></span>
<span class="com">    isComposite := Shootout.BitArray new: self.</span>
<span class="com">    count := 0.</span>
<span class="com">    2 to: self do: [ :i |</span>
<span class="com">	(isComposite at: i) ifFalse: [</span>
<span class="com">	    count := count + 1.</span>
<span class="com">	    i + i to: self by: i do: [ :k |</span>
<span class="com">		isComposite at: k put: true ] ].</span>
<span class="com">    ].</span>
<span class="com">    ^count ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">!Core.SmallInteger methodsFor: 'computer language shootout'!</span>
<span class="com"></span>
<span class="com">primesBits</span>
<span class="com">   | m |</span>
<span class="com">   m := (2 raisedTo: self) * 10000.</span>
<span class="com">   OS.Stdout</span>
<span class="com">      nextPutAll: 'Primes up to '; nextPutAll: (m asPaddedString: 8);</span>
<span class="com">      nextPutAll: ((m nsieveBits) asPaddedString: 9); cr ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">!Core.SmallInteger methodsFor: 'computer language shootout'!</span>
<span class="com"></span>
<span class="com">asPaddedString: aWidth</span>
<span class="com">   | s |</span>
<span class="com">   s := WriteStream on: (String new: 10).</span>
<span class="com">   self printOn: s paddedWith: $  to: aWidth base: 10.</span>
<span class="com">   ^s contents ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">Smalltalk.Shootout defineClass: #BitArray</span>
<span class="com">	superclass: #{Core.Object}</span>
<span class="com">	indexedType: #bytes</span>
<span class="com">	private: false</span>
<span class="com">	instanceVariableNames: ''</span>
<span class="com">	classInstanceVariableNames: ''</span>
<span class="com">	imports: ''</span>
<span class="com">	category: 'Shootout'!</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">!Shootout.BitArray class methodsFor: 'instance creation'!</span>
<span class="com"></span>
<span class="com">new: size</span>
<span class="com">    ^super new: (size + 7 bitShift: -3) ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">!Shootout.BitArray methodsFor: 'accessing'!</span>
<span class="com"></span>
<span class="com">at: index</span>
<span class="com">    | wordIndex bitMask |</span>
<span class="com">    wordIndex := ((index - 1) bitShift: -3) + 1.</span>
<span class="com">    bitMask := 1 bitShift: (index - 1 bitAnd: 7).</span>
<span class="com">    ^((self basicAt: wordIndex) bitAnd: bitMask) &gt; 0 !</span>
<span class="com"></span>
<span class="com">at: index put: bit</span>
<span class="com">    | wordIndex bitMask word |</span>
<span class="com">    wordIndex := ((index - 1) bitShift: -3) + 1.</span>
<span class="com">    bitMask := 1 bitShift: (index - 1 bitAnd: 7).</span>
<span class="com"></span>
<span class="com">    word := self basicAt: wordIndex.</span>
<span class="com">    word := word bitOr: bitMask.</span>
<span class="com">    bit ifFalse: [word := word - bitMask].</span>
<span class="com">    self basicAt: wordIndex put: word.</span>
<span class="com">    ^bit ! !</span>
