<span class="hl slc">;;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; contributed by Anthony Borla</span>

<span class="hl sym">(</span>define-constant <span class="hl sym">+</span>limit-sqr<span class="hl sym">+</span> <span class="hl num">4.0</span><span class="hl sym">)</span>

<span class="hl sym">(</span>define-constant <span class="hl sym">+</span>iterations<span class="hl sym">+</span> <span class="hl num">50</span><span class="hl sym">)</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>mandelbrot iterations x y n<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>cr <span class="hl sym">(</span>- <span class="hl sym">(/ (*</span> <span class="hl num">2.0</span> x<span class="hl sym">)</span> n<span class="hl sym">)</span> <span class="hl num">1.5</span><span class="hl sym">)) (</span>ci <span class="hl sym">(</span>- <span class="hl sym">(/ (*</span> <span class="hl num">2.0</span> y<span class="hl sym">)</span> n<span class="hl sym">)</span> <span class="hl num">1.0</span><span class="hl sym">)))</span>
    <span class="hl sym">(</span>let loop <span class="hl sym">((</span>i <span class="hl num">0</span><span class="hl sym">) (</span>zr <span class="hl num">0.0</span><span class="hl sym">) (</span>zi <span class="hl num">0.0</span><span class="hl sym">))</span>
      <span class="hl sym">(</span>let <span class="hl sym">((</span>zrq <span class="hl sym">(*</span> zr zr<span class="hl sym">)) (</span>ziq <span class="hl sym">(*</span> zi zi<span class="hl sym">)))</span>
        <span class="hl sym">(</span><span class="hl kwa">cond</span>
          <span class="hl sym">((&gt;</span> i iterations<span class="hl sym">)</span> <span class="hl num">1</span><span class="hl sym">)</span>
          <span class="hl sym">((&gt; (+</span> zrq ziq<span class="hl sym">) +</span>limit-sqr<span class="hl sym">+)</span> <span class="hl num">0</span><span class="hl sym">)</span>
          <span class="hl sym">(</span>else <span class="hl sym">(</span>loop <span class="hl sym">(</span>add1 i<span class="hl sym">) (+ (</span>- zrq ziq<span class="hl sym">)</span> cr<span class="hl sym">) (+ (*</span> <span class="hl num">2.0</span> zr zi<span class="hl sym">)</span> ci<span class="hl sym">)))) ))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>main args<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>n <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">null</span>? args<span class="hl sym">)</span>
               <span class="hl num">1</span>
               <span class="hl sym">(</span>string-<span class="hl sym">&gt;</span>number <span class="hl sym">(</span><span class="hl kwa">car</span> args<span class="hl sym">))))</span>

    <span class="hl sym">(</span>bitnum <span class="hl num">0</span><span class="hl sym">) (</span>byteacc <span class="hl num">0</span><span class="hl sym">))</span>

    <span class="hl sym">(</span>write-<span class="hl kwa">line</span> <span class="hl sym">(</span>string-<span class="hl kwa">append</span> <span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl sym">(</span>number-<span class="hl sym">&gt;</span>string n<span class="hl sym">)</span> <span class="hl str">&quot; &quot;</span> <span class="hl sym">(</span>number-<span class="hl sym">&gt;</span>string n<span class="hl sym">)))</span>

    <span class="hl sym">(</span>let loop-y <span class="hl sym">((</span>y <span class="hl num">0</span><span class="hl sym">))</span>

      <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(&gt;</span> y <span class="hl sym">(</span>- n <span class="hl num">1</span><span class="hl sym">)) '()</span>
      <span class="hl slc">; else</span>
      <span class="hl sym">(</span>begin
        <span class="hl sym">(</span>let loop-x <span class="hl sym">((</span>x <span class="hl num">0</span><span class="hl sym">))</span>

          <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(&gt;</span> x <span class="hl sym">(</span>- n <span class="hl num">1</span><span class="hl sym">)) '()</span>
          <span class="hl slc">; else</span>
          <span class="hl sym">(</span>begin
            <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> bitnum <span class="hl sym">(</span>add1 bitnum<span class="hl sym">))</span>
            <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> byteacc <span class="hl sym">(+ (*</span> <span class="hl num">2</span> byteacc<span class="hl sym">) (</span>mandelbrot <span class="hl sym">+</span>iterations<span class="hl sym">+</span> x y n<span class="hl sym">)))</span>

            <span class="hl sym">(</span><span class="hl kwa">cond</span>
              <span class="hl sym">((=</span> bitnum <span class="hl num">8</span><span class="hl sym">)</span>
                <span class="hl sym">(</span>write-char <span class="hl sym">(</span>integer-<span class="hl sym">&gt;</span>char byteacc<span class="hl sym">))</span>
                <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> bitnum <span class="hl num">0</span><span class="hl sym">)</span>
                <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> byteacc <span class="hl num">0</span><span class="hl sym">))</span>

              <span class="hl sym">((=</span> x <span class="hl sym">(</span>- n <span class="hl num">1</span><span class="hl sym">))</span>
                <span class="hl sym">(</span>write-char <span class="hl sym">(</span>integer-<span class="hl sym">&gt;</span>char <span class="hl sym">(*</span> byteacc <span class="hl sym">(</span><span class="hl kwa">expt</span> <span class="hl num">2</span> <span class="hl sym">(</span>- <span class="hl num">8</span> <span class="hl sym">(</span>modulo n <span class="hl num">8</span><span class="hl sym">))))))</span>
                <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> bitnum <span class="hl num">0</span><span class="hl sym">)</span>
                <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> byteacc <span class="hl num">0</span><span class="hl sym">)))</span>

            <span class="hl sym">(</span>loop-x <span class="hl sym">(</span>add1 x<span class="hl sym">)) )))</span>

        <span class="hl sym">(</span>loop-y <span class="hl sym">(</span>add1 y<span class="hl sym">)) ))) ))</span>

<span class="hl sym">(</span>main <span class="hl sym">(</span><span class="hl kwa">command</span>-<span class="hl kwa">line</span>-arguments<span class="hl sym">))</span>

