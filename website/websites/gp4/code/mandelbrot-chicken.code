<span class="slc">;;; The Great Computer Language Shootout</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;; implemented by Greg Buchholz</span>
<span class="slc">;;;</span>
<span class="slc">;;; compile:  csc fractal.chicken -O3 -o fractal</span>

<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">car</span> args<span class="sym">))))</span>
    <span class="sym">(</span>display <span class="str">&quot;P4&quot;</span><span class="sym">) (</span>newline<span class="sym">) (</span>display n<span class="sym">) (</span>display <span class="str">&quot; &quot;</span><span class="sym">) (</span>display n<span class="sym">) (</span>newline<span class="sym">)</span>
    <span class="sym">(</span>printPBM <span class="num">0 0</span> n <span class="sym">(</span>points <span class="num">0 0</span> n<span class="sym">))))</span>

<span class="sym">(</span>define <span class="sym">(</span>points x y n<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(=</span> y n<span class="sym">)</span>
    <span class="sym">'()</span>
    <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(=</span> x n<span class="sym">)</span>
        <span class="sym">(</span>points <span class="num">0</span> <span class="sym">(+</span> y <span class="num">1</span><span class="sym">)</span> n<span class="sym">)</span>
        <span class="sym">(</span><span class="kwa">cons</span> <span class="sym">(</span>mandel <span class="sym">(</span><span class="kwa">cons</span> <span class="sym">(- (*</span> <span class="num">2</span> <span class="sym">(/</span> x n<span class="sym">))</span> <span class="num">1.5</span><span class="sym">)</span>
                            <span class="sym">(- (*</span> <span class="num">2</span> <span class="sym">(/</span> y n<span class="sym">))</span> <span class="num">1.0</span><span class="sym">))</span>
                      <span class="sym">(</span><span class="kwa">cons</span> <span class="num">0.0 0.0</span><span class="sym">)</span> <span class="num">50</span><span class="sym">)</span>
              <span class="sym">(</span>delay <span class="sym">(</span>points <span class="sym">(+</span> x <span class="num">1</span><span class="sym">)</span> y n<span class="sym">))))))</span>

<span class="sym">(</span>define <span class="sym">(</span>mandel c z iter<span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(=</span> iter <span class="num">0</span><span class="sym">)</span>
        <span class="num">1</span>
        <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span>cadd <span class="sym">(</span>cmult z z<span class="sym">)</span> c<span class="sym">)))</span>
             <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&gt; (</span>magnitude n<span class="sym">)</span> <span class="num">2.0</span><span class="sym">)</span>
                  <span class="num">0</span>
                  <span class="sym">(</span>mandel c n <span class="sym">(-</span> iter <span class="num">1</span><span class="sym">))))))</span>

<span class="sym">(</span>define <span class="sym">(</span>printPBM acc i n stream<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((</span><span class="kwa">null</span>? stream<span class="sym">) (</span>display <span class="sym">(</span>acc<span class="sym">-&gt;</span>char acc i<span class="sym">)))</span>
        <span class="sym">((</span><span class="kwa">and</span> <span class="sym">(= (</span>remainder i <span class="num">8</span><span class="sym">)</span> <span class="num">0</span><span class="sym">) (</span><span class="kwa">not</span> <span class="sym">(=</span> i <span class="num">0</span><span class="sym">)))</span>
                 <span class="sym">(</span>begin <span class="sym">(</span>display <span class="sym">(</span>integer<span class="sym">-&gt;</span>char acc<span class="sym">))</span>
                        <span class="sym">(</span>printPBM <span class="sym">(</span><span class="kwa">car</span> stream<span class="sym">) (+</span> <span class="num">1</span> i<span class="sym">)</span> n <span class="sym">(</span>force <span class="sym">(</span><span class="kwa">cdr</span> stream<span class="sym">)))))</span>
        <span class="sym">((=</span> i n<span class="sym">) (</span>begin <span class="sym">(</span>display <span class="sym">(</span>acc<span class="sym">-&gt;</span>char acc n<span class="sym">))</span>
                        <span class="sym">(</span>printPBM <span class="num">0 0</span> n stream<span class="sym">)))</span>
        <span class="sym">(</span>else <span class="sym">(</span>printPBM <span class="sym">(+ (*</span> <span class="num">2</span> acc<span class="sym">) (</span><span class="kwa">car</span> stream<span class="sym">)) (+</span> <span class="num">1</span> i<span class="sym">)</span> n <span class="sym">(</span>force <span class="sym">(</span><span class="kwa">cdr</span> stream<span class="sym">))))))</span>

<span class="sym">(</span>define <span class="sym">(</span>acc<span class="sym">-&gt;</span>char acc x<span class="sym">)</span>
    <span class="sym">(</span>integer<span class="sym">-&gt;</span>char <span class="sym">(*</span> acc <span class="sym">(</span><span class="kwa">expt</span> <span class="sym">(</span>remainder x <span class="num">8</span><span class="sym">)</span> <span class="num">2</span><span class="sym">))))</span>

<span class="sym">(</span>define <span class="sym">(</span>magnitude n<span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">sqrt</span> <span class="sym">(+ (* (</span><span class="kwa">car</span> n<span class="sym">) (</span><span class="kwa">car</span> n<span class="sym">))(* (</span><span class="kwa">cdr</span> n<span class="sym">) (</span><span class="kwa">cdr</span> n<span class="sym">)))))</span>

<span class="sym">(</span>define <span class="sym">(</span>cadd a b<span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">cons</span> <span class="sym">(+ (</span><span class="kwa">car</span> a<span class="sym">) (</span><span class="kwa">car</span> b<span class="sym">))(+ (</span><span class="kwa">cdr</span> a<span class="sym">) (</span><span class="kwa">cdr</span> b<span class="sym">))))</span>

<span class="sym">(</span>define <span class="sym">(</span>cmult a b<span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">cons</span> <span class="sym">(- (* (</span><span class="kwa">car</span> a<span class="sym">) (</span><span class="kwa">car</span> b<span class="sym">)) (* (</span><span class="kwa">cdr</span> a<span class="sym">) (</span><span class="kwa">cdr</span> b<span class="sym">)))</span>
          <span class="sym">(+ (* (</span><span class="kwa">car</span> a<span class="sym">) (</span><span class="kwa">cdr</span> b<span class="sym">)) (* (</span><span class="kwa">cdr</span> a<span class="sym">) (</span><span class="kwa">car</span> b<span class="sym">)))))</span>

<span class="sym">(</span>main <span class="sym">(</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">))</span>
