<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   Contributed by Dave Fladebo</span>
<span class="com"></span>
<span class="com">   compile: dmd -O -inline -release revcomp.d</span>
<span class="com">*/</span>

import std<span class="sym">.</span>ctype<span class="sym">,</span> std<span class="sym">.</span>stdio<span class="sym">,</span> std<span class="sym">.</span>c<span class="sym">.</span>stdlib<span class="sym">,</span> std<span class="sym">.</span>c<span class="sym">.</span>string<span class="sym">;</span>

<span class="kwb">void</span> <span class="kwd">main</span> <span class="sym">(</span><span class="kwb">char</span><span class="sym">[][]</span> args<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwb">char</span> buffer<span class="sym">[</span><span class="num">1024</span><span class="sym">];</span>
    <span class="kwb">char</span><span class="sym">*</span> inp <span class="sym">=</span> <span class="kwd">cast</span><span class="sym">(</span><span class="kwb">char</span><span class="sym">*)</span><span class="kwd">malloc</span><span class="sym">(</span><span class="num">129</span><span class="sym">);</span>
    <span class="kwb">int</span> mlen <span class="sym">=</span> <span class="num">128</span><span class="sym">;</span>
    <span class="kwb">int</span> slen <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

    buildIubComplement<span class="sym">;</span>

    <span class="kwa">while</span><span class="sym">(</span><span class="kwd">fgets</span><span class="sym">(</span>buffer<span class="sym">.</span>ptr<span class="sym">,</span> <span class="num">1023</span><span class="sym">,</span> stdin<span class="sym">))</span>
    <span class="sym">{</span>
    	<span class="kwa">if</span><span class="sym">(</span>buffer<span class="sym">[</span><span class="num">0</span><span class="sym">] ==</span> <span class="str">'&gt;'</span><span class="sym">)</span>
        <span class="sym">{</span>
    	    <span class="kwa">if</span><span class="sym">(</span>slen <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span>
            <span class="sym">{</span>
    	    	<span class="kwd">process</span><span class="sym">(</span>inp<span class="sym">,</span> slen<span class="sym">);</span>
    	    	slen <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    	    <span class="sym">}</span>
    	    <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%.*s&quot;</span><span class="sym">,</span> buffer<span class="sym">);</span>
    	<span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
    	    <span class="kwb">int</span> l <span class="sym">=</span> <span class="kwd">strlen</span><span class="sym">(</span>buffer<span class="sym">.</span>ptr<span class="sym">);</span>
    	    <span class="kwa">while</span><span class="sym">(</span>l <span class="sym">&gt;</span> <span class="num">0</span> <span class="sym">&amp;&amp; !</span><span class="kwd">isalpha</span><span class="sym">(</span>buffer<span class="sym">[</span>l<span class="sym">-</span><span class="num">1</span><span class="sym">]))</span> l<span class="sym">--;</span>
    	    <span class="kwa">while</span><span class="sym">(</span>slen <span class="sym">+</span> l <span class="sym">&gt;</span> mlen<span class="sym">)</span>
            <span class="sym">{</span>
    	    	mlen <span class="sym">+=</span> mlen<span class="sym">;</span>
    	    	inp <span class="sym">=</span> <span class="kwd">cast</span><span class="sym">(</span><span class="kwb">char</span><span class="sym">*)</span><span class="kwd">realloc</span><span class="sym">(</span>inp<span class="sym">,</span> mlen <span class="sym">+</span> <span class="num">1</span><span class="sym">);</span>
    	    <span class="sym">}</span>

    	    <span class="kwd">memcpy</span><span class="sym">(</span>inp <span class="sym">+</span> slen<span class="sym">,</span> buffer<span class="sym">.</span>ptr<span class="sym">,</span> l<span class="sym">);</span>
    	    slen <span class="sym">+=</span> l<span class="sym">;</span>
    	<span class="sym">}</span>
    <span class="sym">}</span>
    <span class="kwa">if</span><span class="sym">(</span>slen <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> <span class="kwd">process</span><span class="sym">(</span>inp<span class="sym">,</span> slen<span class="sym">);</span>
    <span class="kwd">free</span><span class="sym">(</span>inp<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">char</span><span class="sym">[][]</span> iubpairs <span class="sym">= [[</span><span class="str">'A'</span><span class="sym">,</span><span class="str">'T'</span><span class="sym">], [</span><span class="str">'C'</span><span class="sym">,</span><span class="str">'G'</span><span class="sym">], [</span><span class="str">'B'</span><span class="sym">,</span><span class="str">'V'</span><span class="sym">], [</span><span class="str">'D'</span><span class="sym">,</span><span class="str">'H'</span><span class="sym">], [</span><span class="str">'K'</span><span class="sym">,</span><span class="str">'M'</span><span class="sym">], [</span><span class="str">'R'</span><span class="sym">,</span><span class="str">'Y'</span><span class="sym">], [</span><span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span><span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">]];</span>

<span class="kwb">char</span><span class="sym">[</span><span class="kwb">char</span><span class="sym">.</span>max <span class="sym">+</span> <span class="num">1</span><span class="sym">]</span> iubComplement<span class="sym">;</span>

<span class="kwb">void</span> <span class="kwd">buildIubComplement</span><span class="sym">()</span>
<span class="sym">{</span>
    <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;=</span> <span class="kwb">char</span><span class="sym">.</span>max<span class="sym">;</span> i<span class="sym">++)</span> iubComplement<span class="sym">[</span>i<span class="sym">] =</span> i<span class="sym">;</span>
    <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> iubpairs<span class="sym">[</span>i<span class="sym">][</span><span class="num">0</span><span class="sym">] !=</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">;</span> i<span class="sym">++)</span>
    <span class="sym">{</span>
    	iubComplement<span class="sym">[</span>iubpairs<span class="sym">[</span>i<span class="sym">][</span><span class="num">0</span><span class="sym">]] =</span> iubpairs<span class="sym">[</span>i<span class="sym">][</span><span class="num">1</span><span class="sym">];</span>
    	iubComplement<span class="sym">[</span>iubpairs<span class="sym">[</span>i<span class="sym">][</span><span class="num">1</span><span class="sym">]] =</span> iubpairs<span class="sym">[</span>i<span class="sym">][</span><span class="num">0</span><span class="sym">];</span>
    	iubComplement<span class="sym">[</span><span class="kwd">tolower</span> <span class="sym">(</span>iubpairs<span class="sym">[</span>i<span class="sym">][</span><span class="num">0</span><span class="sym">])] =</span> iubpairs<span class="sym">[</span>i<span class="sym">][</span><span class="num">1</span><span class="sym">];</span>
    	iubComplement<span class="sym">[</span><span class="kwd">tolower</span> <span class="sym">(</span>iubpairs<span class="sym">[</span>i<span class="sym">][</span><span class="num">1</span><span class="sym">])] =</span> iubpairs<span class="sym">[</span>i<span class="sym">][</span><span class="num">0</span><span class="sym">];</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">inPlaceReverse</span><span class="sym">(</span><span class="kwb">char</span><span class="sym">*</span> strand<span class="sym">,</span> <span class="kwb">int</span> len<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwb">int</span> i<span class="sym">;</span>
    <span class="kwa">for</span><span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> len<span class="sym">--;</span> i <span class="sym">&lt;</span> len<span class="sym">;</span> i<span class="sym">++,</span>len<span class="sym">--)</span>
    <span class="sym">{</span>
    	<span class="kwb">char</span> c <span class="sym">=</span> strand<span class="sym">[</span>i<span class="sym">];</span>
    	strand<span class="sym">[</span>i<span class="sym">] =</span> iubComplement<span class="sym">[</span>strand<span class="sym">[</span>len<span class="sym">]];</span>
    	strand<span class="sym">[</span>len<span class="sym">] =</span> iubComplement<span class="sym">[</span>c<span class="sym">];</span>
    <span class="sym">}</span>
    <span class="kwa">if</span><span class="sym">(</span>i <span class="sym">==</span> len<span class="sym">)</span> strand<span class="sym">[</span>i<span class="sym">] =</span> iubComplement<span class="sym">[</span>strand<span class="sym">[</span>i<span class="sym">]];</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">process</span><span class="sym">(</span><span class="kwb">char</span><span class="sym">*</span> strand<span class="sym">,</span> <span class="kwb">int</span> len<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwb">char</span><span class="sym">*</span> s<span class="sym">;</span>

    <span class="kwd">inPlaceReverse</span><span class="sym">(</span>strand<span class="sym">,</span> len<span class="sym">);</span>
    s <span class="sym">=</span> strand<span class="sym">;</span>

    <span class="kwa">while</span><span class="sym">(</span>len <span class="sym">&gt;</span> <span class="num">60</span><span class="sym">)</span>
    <span class="sym">{</span>
    	<span class="kwb">char</span> c <span class="sym">=</span> s<span class="sym">[</span><span class="num">60</span><span class="sym">];</span>
    	s<span class="sym">[</span><span class="num">60</span><span class="sym">] =</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">;</span>
    	<span class="kwd">puts</span> <span class="sym">(</span>s<span class="sym">);</span>
    	s<span class="sym">[</span><span class="num">60</span><span class="sym">] =</span> c<span class="sym">;</span>
    	s <span class="sym">+=</span> <span class="num">60</span><span class="sym">;</span>
    	len <span class="sym">-=</span> <span class="num">60</span><span class="sym">;</span>
    <span class="sym">}</span>

    s<span class="sym">[</span>len<span class="sym">] =</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">;</span>
    <span class="kwd">puts</span><span class="sym">(</span>s<span class="sym">);</span>
<span class="sym">}</span>
