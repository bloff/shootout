<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Nicolas Cannasse</span>
<span class="com">*/</span>
<span class="kwa">var</span> n <span class="sym">=</span> $<span class="kwb">int</span><span class="sym">(</span>$loader<span class="sym">.</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>
<span class="kwa">if</span><span class="sym">(</span> n <span class="sym">==</span> <span class="kwa">null</span> <span class="sym">)</span> n <span class="sym">=</span> <span class="num">7</span><span class="sym">;</span>

check <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
perm <span class="sym">=</span> $<span class="kwd">amake</span><span class="sym">(</span>n<span class="sym">);</span>
perm1 <span class="sym">=</span> $<span class="kwd">amake</span><span class="sym">(</span>n<span class="sym">);</span>
count <span class="sym">=</span> $<span class="kwd">amake</span><span class="sym">(</span>n<span class="sym">);</span>
maxPerm <span class="sym">=</span> $<span class="kwd">amake</span><span class="sym">(</span>n<span class="sym">);</span>
maxflips <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
m <span class="sym">=</span> n <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span>
r <span class="sym">=</span> n<span class="sym">;</span>
i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
<span class="kwa">while</span><span class="sym">(</span> i <span class="sym">&lt;</span> n <span class="sym">) {</span> perm1<span class="sym">[</span>i<span class="sym">] =</span> i<span class="sym">;</span> i <span class="sym">+=</span> <span class="num">1</span> <span class="sym">};</span>

<span class="kwa">while</span> <span class="sym">(</span><span class="kwa">true</span><span class="sym">) {</span>
	<span class="kwa">if</span><span class="sym">(</span> check <span class="sym">&lt;</span> <span class="num">30</span> <span class="sym">) {</span>
		i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
		<span class="kwa">while</span><span class="sym">(</span> i <span class="sym">&lt;</span> n <span class="sym">) {</span> $<span class="kwc">print</span><span class="sym">(</span>perm1<span class="sym">[</span>i<span class="sym">]+</span><span class="num">1</span><span class="sym">);</span> i <span class="sym">+=</span> <span class="num">1</span><span class="sym">; };</span>
		$<span class="kwc">print</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
		check <span class="sym">+=</span> <span class="num">1</span><span class="sym">;</span>
	<span class="sym">}</span>
	<span class="kwa">while</span><span class="sym">(</span> r <span class="sym">!=</span> <span class="num">1</span> <span class="sym">) {</span> count<span class="sym">[</span>r<span class="sym">-</span><span class="num">1</span><span class="sym">] =</span> r<span class="sym">;</span> r <span class="sym">-=</span> <span class="num">1</span><span class="sym">; };</span>
	<span class="kwa">if</span><span class="sym">(</span> perm1<span class="sym">[</span><span class="num">0</span><span class="sym">] !=</span> <span class="num">0</span> <span class="sym">&amp;&amp;</span> perm1<span class="sym">[</span>m<span class="sym">] !=</span> m <span class="sym">) {</span>
		i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
		<span class="kwa">while</span><span class="sym">(</span> i <span class="sym">&lt;</span> n <span class="sym">) {</span> perm<span class="sym">[</span>i<span class="sym">] =</span> perm1<span class="sym">[</span>i<span class="sym">];</span> i <span class="sym">+=</span> <span class="num">1</span><span class="sym">; };</span>
		flips <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
		k <span class="sym">=</span> perm<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
		<span class="kwa">do</span> <span class="sym">{</span>
			i <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>
			j <span class="sym">=</span> k <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span>
			<span class="kwa">while</span><span class="sym">(</span> i <span class="sym">&lt;</span> j <span class="sym">) {</span>
				tmp <span class="sym">=</span> perm<span class="sym">[</span>i<span class="sym">];</span>
				perm<span class="sym">[</span>i<span class="sym">] =</span> perm<span class="sym">[</span>j<span class="sym">];</span>
				perm<span class="sym">[</span>j<span class="sym">] =</span> tmp<span class="sym">;</span>
				i <span class="sym">+=</span> <span class="num">1</span><span class="sym">;</span>
				j <span class="sym">-=</span> <span class="num">1</span><span class="sym">;</span>
			<span class="sym">}</span>
			flips <span class="sym">+=</span> <span class="num">1</span><span class="sym">;</span>
			j <span class="sym">=</span> perm<span class="sym">[</span>k<span class="sym">];</span>
			perm<span class="sym">[</span>k<span class="sym">] =</span> k<span class="sym">;</span>
			k <span class="sym">=</span> j<span class="sym">;</span>
		<span class="sym">}</span> <span class="kwa">while</span><span class="sym">(</span> k <span class="sym">!=</span> <span class="num">0</span> <span class="sym">);</span>
		<span class="kwa">if</span><span class="sym">(</span> flips <span class="sym">&gt;</span> maxflips <span class="sym">)</span>
			maxflips <span class="sym">=</span> flips<span class="sym">;</span>
	<span class="sym">}</span>
	<span class="kwa">while</span> <span class="sym">(</span><span class="kwa">true</span><span class="sym">) {</span>
		<span class="kwa">if</span><span class="sym">(</span> r <span class="sym">==</span> n <span class="sym">) {</span>
			$<span class="kwc">print</span><span class="sym">(</span><span class="str">&quot;Pfannkuchen(&quot;</span><span class="sym">,</span>n<span class="sym">,</span><span class="str">&quot;) = &quot;</span><span class="sym">,</span>maxflips<span class="sym">,</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
			$<span class="kwa">goto</span><span class="sym">(</span>exit<span class="sym">);</span>
		<span class="sym">}</span>
		perm0 <span class="sym">=</span> perm1<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
		i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
		<span class="kwa">while</span><span class="sym">(</span> i <span class="sym">&lt;</span> r <span class="sym">) {</span>
			j <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
			perm1<span class="sym">[</span>i<span class="sym">] =</span> perm1<span class="sym">[</span>j<span class="sym">];</span>
			i <span class="sym">=</span> j<span class="sym">;</span>
		<span class="sym">}</span>
		perm1<span class="sym">[</span>r<span class="sym">] =</span> perm0<span class="sym">;</span>
		count<span class="sym">[</span>r<span class="sym">] -=</span> <span class="num">1</span><span class="sym">;</span>
		<span class="kwa">if</span><span class="sym">(</span> count<span class="sym">[</span>r<span class="sym">] &gt;</span> <span class="num">0</span> <span class="sym">)</span> <span class="kwa">break</span><span class="sym">;</span>
		r <span class="sym">+=</span> <span class="num">1</span><span class="sym">;</span>
	<span class="sym">}</span>
<span class="sym">}</span>
exit<span class="sym">:</span>
