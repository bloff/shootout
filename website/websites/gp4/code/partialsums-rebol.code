
REBOL <span class="sym">[</span>
  Title<span class="sym">:</span> partialsums
  Name<span class="sym">: {</span>The Great Computer Language Shootout<span class="sym">}</span>
  Home<span class="sym">: {</span>http<span class="sym">:</span><span class="slc">//shootout.alioth.debian.org/}</span>
  Author<span class="sym">: {</span>Anthony Borla<span class="sym">}</span>
  Date<span class="sym">:</span> <span class="num">2006</span><span class="sym">-</span><span class="num">03</span><span class="sym">-</span><span class="num">03</span>
  Version<span class="sym">:</span> <span class="num">1.0</span>
  Notes<span class="sym">: {</span>Based on D language version by Dave Fladebo<span class="sym">}</span>
<span class="sym">]</span>

<span class="sym">; -------------</span>

a1<span class="sym">:</span> a2<span class="sym">:</span> a3<span class="sym">:</span> a4<span class="sym">:</span> a5<span class="sym">:</span> a6<span class="sym">:</span> a7<span class="sym">:</span> a8<span class="sym">:</span> a9<span class="sym">:</span> <span class="num">0.0</span>

<span class="sym">; -------------</span>

computeSums<span class="sym">:</span> func <span class="sym">[</span>n <span class="sym">/</span>local d d2 d3 ds dc alt<span class="sym">] [</span>
  alt<span class="sym">:</span> <span class="num">1.0</span>

  repeat d n <span class="sym">[</span>
    d2<span class="sym">:</span> d <span class="sym">*</span> d
    d3<span class="sym">:</span> d2 <span class="sym">*</span> d
    ds<span class="sym">:</span> sine d
    dc<span class="sym">:</span> cosine d

    a1<span class="sym">:</span> a1 <span class="sym">+ ((</span><span class="num">2.0</span> <span class="sym">/</span> <span class="num">3.0</span><span class="sym">) ** (</span>d <span class="sym">-</span> <span class="num">1.0</span><span class="sym">))</span>
    a2<span class="sym">:</span> a2 <span class="sym">+ (</span><span class="num">1.0</span> <span class="sym">/ (</span>square<span class="sym">-</span>root d<span class="sym">))</span>
    a3<span class="sym">:</span> a3 <span class="sym">+ (</span><span class="num">1.0</span> <span class="sym">/ (</span>d <span class="sym">* (</span>d <span class="sym">+</span> <span class="num">1.0</span><span class="sym">)))</span>

    a4<span class="sym">:</span> a4 <span class="sym">+ (</span><span class="num">1.0</span> <span class="sym">/ (</span>d3 <span class="sym">*</span> ds <span class="sym">*</span> ds<span class="sym">))</span>
    a5<span class="sym">:</span> a5 <span class="sym">+ (</span><span class="num">1.0</span> <span class="sym">/ (</span>d3 <span class="sym">*</span> dc <span class="sym">*</span> dc<span class="sym">))</span>
    a6<span class="sym">:</span> a6 <span class="sym">+ (</span><span class="num">1.0</span> <span class="sym">/</span> d<span class="sym">)</span>

    a7<span class="sym">:</span> a7 <span class="sym">+ (</span><span class="num">1.0</span> <span class="sym">/</span> d2<span class="sym">)</span>
    a8<span class="sym">:</span> a8 <span class="sym">+ (</span>alt <span class="sym">/</span> d<span class="sym">)</span>
    a9<span class="sym">:</span> a9 <span class="sym">+ (</span>alt <span class="sym">/ ((</span><span class="num">2.0</span> <span class="sym">*</span> d<span class="sym">) -</span> <span class="num">1.0</span><span class="sym">))</span>

    alt<span class="sym">: -(</span>alt<span class="sym">)</span>
  <span class="sym">]</span>
<span class="sym">]</span>

<span class="sym">; -------------</span>

showSums<span class="sym">:</span> func <span class="sym">[] [</span>
  print rejoin <span class="sym">[</span>round<span class="sym">/</span>to a1 <span class="num">0.000000001</span> <span class="str">&quot;^-(2/3)^^k&quot;</span><span class="sym">]</span>
  print rejoin <span class="sym">[</span>round<span class="sym">/</span>to a2 <span class="num">0.000000001</span> <span class="str">&quot;^-k^^-0.5&quot;</span><span class="sym">]</span>
  print rejoin <span class="sym">[</span>round<span class="sym">/</span>to a3 <span class="num">0.000000001</span> <span class="str">&quot;^-1/k(k+1)&quot;</span><span class="sym">]</span>
  print rejoin <span class="sym">[</span>round<span class="sym">/</span>to a4 <span class="num">0.000000001</span> <span class="str">&quot;^-Flint Hills&quot;</span><span class="sym">]</span>
  print rejoin <span class="sym">[</span>round<span class="sym">/</span>to a5 <span class="num">0.000000001</span> <span class="str">&quot;^-Cookson Hills&quot;</span><span class="sym">]</span>
  print rejoin <span class="sym">[</span>round<span class="sym">/</span>to a6 <span class="num">0.000000001</span> <span class="str">&quot;^-Harmonic&quot;</span><span class="sym">]</span>
  print rejoin <span class="sym">[</span>round<span class="sym">/</span>to a7 <span class="num">0.000000001</span> <span class="str">&quot;^-Riemann Zeta&quot;</span><span class="sym">]</span>
  print rejoin <span class="sym">[</span>round<span class="sym">/</span>to a8 <span class="num">0.000000001</span> <span class="str">&quot;^-Alternating Harmonic&quot;</span><span class="sym">]</span>
  print rejoin <span class="sym">[</span>round<span class="sym">/</span>to a9 <span class="num">0.000000001</span> <span class="str">&quot;^-Gregory&quot;</span><span class="sym">]</span>
<span class="sym">]</span>

<span class="sym">; -------------</span>

N<span class="sym">:</span> either N<span class="sym">:</span> system<span class="sym">/</span>script<span class="sym">/</span>args <span class="sym">[</span>to<span class="sym">-</span>integer N<span class="sym">][</span><span class="num">1</span><span class="sym">]</span>

computeSums N
showSums

quit<span class="sym">/</span><span class="kwa">return</span> <span class="num">0</span>

