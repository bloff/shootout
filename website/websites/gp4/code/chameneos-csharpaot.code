<span class="hl com">/* The Great Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Isaac Gouy</span>
<span class="hl com">*/</span>

<span class="hl kwa">using</span> System<span class="hl sym">;</span>
<span class="hl kwa">using</span> System<span class="hl sym">.</span>Threading<span class="hl sym">;</span>

<span class="hl kwa">class</span> MeetingPlace
<span class="hl sym">{</span>
   <span class="hl kwa">private</span> Colour first<span class="hl sym">,</span> second<span class="hl sym">;</span>
   <span class="hl kwa">private</span> <span class="hl kwb">bool</span> firstCall <span class="hl sym">=</span> <span class="hl kwa">true</span><span class="hl sym">;</span>
   <span class="hl kwa">private</span> <span class="hl kwb">bool</span> mustWait <span class="hl sym">=</span> <span class="hl kwa">false</span><span class="hl sym">;</span>
   <span class="hl kwa">private</span> <span class="hl kwb">int</span> n<span class="hl sym">;</span>

   <span class="hl kwa">public</span> <span class="hl kwd">MeetingPlace</span><span class="hl sym">(</span><span class="hl kwb">int</span> maxMeetings<span class="hl sym">){</span>
      n <span class="hl sym">=</span> maxMeetings<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">public</span> Colour <span class="hl kwd">OtherCreaturesColour</span><span class="hl sym">(</span>Colour me<span class="hl sym">){</span>
      <span class="hl kwd">lock</span><span class="hl sym">(</span><span class="hl kwa">this</span><span class="hl sym">){</span>
         Colour other<span class="hl sym">;</span>

         <span class="hl kwa">while</span> <span class="hl sym">(</span>mustWait<span class="hl sym">){</span>
            Monitor<span class="hl sym">.</span><span class="hl kwd">Wait</span><span class="hl sym">(</span><span class="hl kwa">this</span><span class="hl sym">);</span>
         <span class="hl sym">}</span>

         <span class="hl kwa">if</span> <span class="hl sym">(</span>firstCall<span class="hl sym">){</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>n<span class="hl sym">-- &gt;</span> <span class="hl num">0</span><span class="hl sym">){</span>
               first <span class="hl sym">=</span> me<span class="hl sym">;</span>
               firstCall <span class="hl sym">=</span> <span class="hl kwa">false</span><span class="hl sym">;</span>

               <span class="hl kwa">while</span> <span class="hl sym">(!</span>firstCall<span class="hl sym">){</span>
                  Monitor<span class="hl sym">.</span><span class="hl kwd">Wait</span><span class="hl sym">(</span><span class="hl kwa">this</span><span class="hl sym">);</span>
               <span class="hl sym">}</span>
               mustWait <span class="hl sym">=</span> <span class="hl kwa">false</span><span class="hl sym">;</span>
               other <span class="hl sym">=</span> second<span class="hl sym">;</span>
            <span class="hl sym">}</span>
            <span class="hl kwa">else</span> <span class="hl sym">{</span>
               other <span class="hl sym">=</span> Colour<span class="hl sym">.</span>faded<span class="hl sym">;</span>
            <span class="hl sym">}</span>
         <span class="hl sym">}</span>

         <span class="hl kwa">else</span> <span class="hl sym">{</span>
            second <span class="hl sym">=</span> me<span class="hl sym">;</span>
            other <span class="hl sym">=</span> first<span class="hl sym">;</span>
            firstCall <span class="hl sym">=</span> <span class="hl kwa">true</span><span class="hl sym">;</span>
            mustWait <span class="hl sym">=</span> <span class="hl kwa">true</span><span class="hl sym">;</span>
         <span class="hl sym">}</span>

         Monitor<span class="hl sym">.</span><span class="hl kwd">PulseAll</span><span class="hl sym">(</span><span class="hl kwa">this</span><span class="hl sym">);</span>
         <span class="hl kwa">return</span> other<span class="hl sym">;</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>


<span class="hl kwa">class</span> Creature
<span class="hl sym">{</span>
   <span class="hl kwa">private</span> MeetingPlace m<span class="hl sym">;</span>
   <span class="hl kwa">internal</span> <span class="hl kwb">int</span> creaturesMet <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">internal</span> Colour me<span class="hl sym">;</span>

   <span class="hl kwa">public</span> <span class="hl kwd">Creature</span><span class="hl sym">(</span>MeetingPlace m<span class="hl sym">,</span> Colour c<span class="hl sym">){</span>
      <span class="hl kwa">this</span><span class="hl sym">.</span>m <span class="hl sym">=</span> m<span class="hl sym">;</span> <span class="hl kwa">this</span><span class="hl sym">.</span>me <span class="hl sym">=</span> c<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">Be</span><span class="hl sym">(){</span>
      <span class="hl kwa">while</span><span class="hl sym">(</span>me <span class="hl sym">!=</span> Colour<span class="hl sym">.</span>faded<span class="hl sym">){</span> <span class="hl kwd">MeetOtherCreature</span><span class="hl sym">(); }</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">private</span> <span class="hl kwb">void</span> <span class="hl kwd">MeetOtherCreature</span><span class="hl sym">(){</span>
      Colour other <span class="hl sym">=</span> m<span class="hl sym">.</span><span class="hl kwd">OtherCreaturesColour</span><span class="hl sym">(</span>me<span class="hl sym">);</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>other <span class="hl sym">==</span> Colour<span class="hl sym">.</span>faded<span class="hl sym">){</span>
         me <span class="hl sym">=</span> other<span class="hl sym">;</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">else</span> <span class="hl sym">{</span>
         creaturesMet<span class="hl sym">++;</span>
         me <span class="hl sym">=</span> <span class="hl kwd">Complement</span><span class="hl sym">(</span>other<span class="hl sym">);</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   <span class="hl slc">// don't use arithmetic</span>
   <span class="hl slc">// use if-else or switch/case or pattern-match</span>
   Colour <span class="hl kwd">Complement</span><span class="hl sym">(</span>Colour other<span class="hl sym">){</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>me <span class="hl sym">==</span> other<span class="hl sym">)</span> <span class="hl kwa">return</span> me<span class="hl sym">;</span>
      <span class="hl kwa">switch</span><span class="hl sym">(</span>me<span class="hl sym">){</span>
         <span class="hl kwa">case</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">:</span>
            <span class="hl kwa">return</span> other <span class="hl sym">==</span> Colour<span class="hl sym">.</span>red ? Colour<span class="hl sym">.</span>yellow <span class="hl sym">:</span> Colour<span class="hl sym">.</span>red<span class="hl sym">;</span>
         <span class="hl kwa">case</span> Colour<span class="hl sym">.</span>red<span class="hl sym">:</span>
            <span class="hl kwa">return</span> other <span class="hl sym">==</span> Colour<span class="hl sym">.</span>blue ? Colour<span class="hl sym">.</span>yellow <span class="hl sym">:</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">;</span>
         <span class="hl kwa">case</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">:</span>
            <span class="hl kwa">return</span> other <span class="hl sym">==</span> Colour<span class="hl sym">.</span>blue ? Colour<span class="hl sym">.</span>red <span class="hl sym">:</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">;</span>
         <span class="hl kwa">default</span><span class="hl sym">:</span> <span class="hl kwa">return</span> me<span class="hl sym">;</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>


<span class="hl kwb">enum</span> Colour <span class="hl sym">{</span> blue<span class="hl sym">,</span> red<span class="hl sym">,</span> yellow<span class="hl sym">,</span> faded <span class="hl sym">}</span>

<span class="hl kwa">class</span> chameneos
<span class="hl sym">{</span>
   <span class="hl kwa">static</span> Colour<span class="hl sym">[]</span> colours <span class="hl sym">= {</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">,</span> Colour<span class="hl sym">.</span>red<span class="hl sym">,</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">,</span> Colour<span class="hl sym">.</span>blue <span class="hl sym">};</span>
   <span class="hl kwa">static</span> Creature<span class="hl sym">[]</span> creatures <span class="hl sym">=</span> <span class="hl kwa">new</span> Creature<span class="hl sym">[</span>colours<span class="hl sym">.</span>Length<span class="hl sym">];</span>
   <span class="hl kwa">static</span> Thread<span class="hl sym">[]</span> threads <span class="hl sym">=</span> <span class="hl kwa">new</span> Thread<span class="hl sym">[</span>colours<span class="hl sym">.</span>Length<span class="hl sym">];</span>

   <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">Main</span><span class="hl sym">(</span>String<span class="hl sym">[]</span> args<span class="hl sym">) {</span>
      <span class="hl kwb">int</span> n <span class="hl sym">=</span> Int32<span class="hl sym">.</span><span class="hl kwd">Parse</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>
      MeetingPlace m <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">MeetingPlace</span><span class="hl sym">(</span>n<span class="hl sym">);</span>

      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>colours<span class="hl sym">.</span>Length<span class="hl sym">;</span> i<span class="hl sym">++){</span>
         creatures<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">Creature</span><span class="hl sym">(</span>m<span class="hl sym">,</span>colours<span class="hl sym">[</span>i<span class="hl sym">]);</span>
         threads<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">Thread</span><span class="hl sym">(</span><span class="hl kwa">new</span> <span class="hl kwd">ThreadStart</span><span class="hl sym">(</span>creatures<span class="hl sym">[</span>i<span class="hl sym">].</span>Be<span class="hl sym">));</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">foreach</span> <span class="hl sym">(</span>Thread t in threads<span class="hl sym">)</span> t<span class="hl sym">.</span><span class="hl kwd">Start</span><span class="hl sym">();</span>
      <span class="hl kwa">foreach</span> <span class="hl sym">(</span>Thread t in threads<span class="hl sym">)</span> t<span class="hl sym">.</span><span class="hl kwd">Join</span><span class="hl sym">();</span>

      <span class="hl kwb">int</span> meetings <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwa">foreach</span> <span class="hl sym">(</span>Creature c in creatures<span class="hl sym">)</span> meetings <span class="hl sym">+=</span> c<span class="hl sym">.</span>creaturesMet<span class="hl sym">;</span>
      Console<span class="hl sym">.</span><span class="hl kwd">WriteLine</span><span class="hl sym">(</span><span class="hl str">&quot;{0}&quot;</span><span class="hl sym">,</span>meetings<span class="hl sym">);</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

