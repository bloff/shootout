<span class="slc">;;; The Computer Language Shootout</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;;</span>
<span class="slc">;;; contributed by Greg Buchholz</span>
<span class="slc">;;;</span>
<span class="slc">;;; Modified by Shyamal Prasad to speed it up all around (June 2006)</span>
<span class="slc">;;;   * fib and tak specialized for fixnum and double-float</span>
<span class="slc">;;;   * type declarations all around</span>
<span class="slc">;;;   * fib-d uses a local function to force sbcl and cmucl optimizers</span>
<span class="slc">;;;     to unbox the return value (thanks to Kalle Olavi Niemitalo,</span>
<span class="slc">;;;     Mark Wooding and other denizens of comp.lang.lisp :)</span>

<span class="sym">(</span><span class="kwa">defun</span> fib <span class="sym">(</span>n<span class="sym">)</span>
  <span class="sym">(</span>declare <span class="sym">(</span>fixnum n<span class="sym">))</span>
  <span class="sym">(</span>the fixnum
    <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&lt;</span> n <span class="num">2</span><span class="sym">)</span>
	<span class="num">1</span>
      <span class="sym">(+ (</span>fib <span class="sym">(-</span> n <span class="num">1</span><span class="sym">)) (</span>fib <span class="sym">(-</span> n <span class="num">2</span><span class="sym">))))))</span>

<span class="sym">(</span><span class="kwa">defun</span> fib<span class="sym">-</span>d <span class="sym">(</span>n<span class="sym">)</span>
  <span class="sym">(</span>labels
      <span class="sym">((</span>fib<span class="sym">-</span>nobox <span class="sym">(</span>n<span class="sym">)</span>
		  <span class="sym">(</span>declare <span class="sym">(</span>double<span class="sym">-</span><span class="kwa">float</span> n<span class="sym">))</span>
		  <span class="sym">(</span>the double<span class="sym">-</span><span class="kwa">float</span>
		    <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&lt;</span> n <span class="num">2</span><span class="sym">)</span>
			<span class="num">1.0</span>d0
		      <span class="sym">(+ (</span>fib<span class="sym">-</span>nobox <span class="sym">(-</span> n <span class="num">1</span><span class="sym">)) (</span>fib<span class="sym">-</span>nobox <span class="sym">(-</span> n <span class="num">2</span><span class="sym">)))))))</span>
    <span class="slc">;; inline declaration causes SBCL and CMUCL to unbox return</span>
    <span class="slc">;; value for fib-nobox</span>
    <span class="sym">(</span>declare <span class="sym">(</span>inline fib<span class="sym">-</span>nobox<span class="sym">))</span>
    <span class="sym">(</span>fib<span class="sym">-</span>nobox <span class="sym">(</span>coerce n <span class="sym">'</span>double<span class="sym">-</span><span class="kwa">float</span><span class="sym">))))</span>

<span class="sym">(</span><span class="kwa">defun</span> ack <span class="sym">(</span>x y<span class="sym">)</span>
  <span class="sym">(</span>declare <span class="sym">(</span>fixnum x y<span class="sym">))</span>
  <span class="sym">(</span>the fixnum
    <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">zerop</span> x<span class="sym">)</span>
	<span class="sym">(</span><span class="num">1</span><span class="sym">+</span> y<span class="sym">)</span>
      <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">zerop</span> y<span class="sym">)</span>
	  <span class="sym">(</span>ack <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> x<span class="sym">)</span> <span class="num">1</span><span class="sym">)</span>
	<span class="sym">(</span>ack <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> x<span class="sym">) (</span>ack x <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> y<span class="sym">)))))))</span>

<span class="sym">(</span><span class="kwa">defun</span> tak <span class="sym">(</span>x y z<span class="sym">)</span>
  <span class="sym">(</span>declare <span class="sym">(</span>fixnum x y z<span class="sym">))</span>
  <span class="sym">(</span>the fixnum
    <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&lt;</span> y x<span class="sym">)</span>
	<span class="sym">(</span>tak <span class="sym">(</span>tak <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> x<span class="sym">)</span> y z<span class="sym">)</span>
	     <span class="sym">(</span>tak <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> y<span class="sym">)</span> z x<span class="sym">)</span>
	     <span class="sym">(</span>tak <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> z<span class="sym">)</span> x y<span class="sym">))</span>
      z<span class="sym">)))</span>

<span class="sym">(</span><span class="kwa">defun</span> tak<span class="sym">-</span>d <span class="sym">(</span>x y z<span class="sym">)</span>
  <span class="sym">(</span>declare <span class="sym">(</span>double<span class="sym">-</span><span class="kwa">float</span> x y z<span class="sym">))</span>
  <span class="sym">(</span>the double<span class="sym">-</span><span class="kwa">float</span>
    <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&lt;</span> y x<span class="sym">)</span>
	<span class="sym">(</span>tak<span class="sym">-</span>d <span class="sym">(</span>tak<span class="sym">-</span>d <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> x<span class="sym">)</span> y z<span class="sym">)</span>
	       <span class="sym">(</span>tak<span class="sym">-</span>d <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> y<span class="sym">)</span> z x<span class="sym">)</span>
	       <span class="sym">(</span>tak<span class="sym">-</span>d <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> z<span class="sym">)</span> x y<span class="sym">))</span>
      z<span class="sym">)))</span>

<span class="sym">(</span><span class="kwa">defun</span> main <span class="sym">(&amp;</span>optional
	     <span class="sym">(</span>n <span class="sym">(</span>parse<span class="sym">-</span>integer
		 <span class="sym">(</span><span class="kwa">car</span> <span class="sym">(</span><span class="kwa">last</span> #<span class="sym">+</span>sbcl sb<span class="sym">-</span>ext<span class="sym">:*</span>posix<span class="sym">-</span>argv<span class="sym">*</span>
			    #<span class="sym">+</span>cmu extensions<span class="sym">:*</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>strings<span class="sym">*</span>
			    #<span class="sym">+</span>gcl si<span class="sym">::*</span><span class="kwa">command</span><span class="sym">-</span>args<span class="sym">*)))))</span>
  <span class="sym">(</span>declare <span class="sym">(</span>fixnum n<span class="sym">))</span>
  <span class="sym">(</span>format t <span class="str">&quot;Ack(3,~A): ~A~%&quot;</span> n <span class="sym">(</span>ack <span class="num">3</span> n<span class="sym">))</span>
  <span class="sym">(</span>decf n<span class="sym">)</span>
  <span class="sym">(</span>format t <span class="str">&quot;Fib(~,1F): ~,1F~%&quot;</span> <span class="sym">(+</span> <span class="num">28.0</span>d0 n<span class="sym">) (</span>fib<span class="sym">-</span>d <span class="sym">(+</span> <span class="num">28.0</span>d0 n<span class="sym">)))</span>
  <span class="sym">(</span>format t <span class="str">&quot;Tak(~A,~A,~A): ~A~%&quot;</span> <span class="sym">(*</span> <span class="num">3</span> n<span class="sym">) (*</span> <span class="num">2</span> n<span class="sym">)</span> n <span class="sym">(</span>tak <span class="sym">(*</span> <span class="num">3</span> n<span class="sym">)</span>
							 <span class="sym">(*</span> <span class="num">2</span> n<span class="sym">)</span>
							 n<span class="sym">))</span>
  <span class="sym">(</span>format t <span class="str">&quot;Fib(~A): ~A~%&quot;</span> <span class="num">3</span> <span class="sym">(</span>fib <span class="num">3</span><span class="sym">))</span>
  <span class="sym">(</span>format t <span class="str">&quot;Tak(3.0,2.0,1.0): ~,1F~%&quot;</span> <span class="sym">(</span>tak<span class="sym">-</span>d <span class="num">3.0</span>d0 <span class="num">2.0</span>d0 <span class="num">1.0</span>d0<span class="sym">)))</span>
