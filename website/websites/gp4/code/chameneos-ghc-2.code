<span class="com">{- The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   Written by Tom Pledger, 13 Nov 2006. modified by Don Stewart -}</span>

<span class="kwa">import</span> Control.Concurrent
<span class="kwa">import</span> Control.Monad
<span class="kwa">import</span> System

<span class="kwa">data</span> Colour <span class="sym">=</span> Blue <span class="sym">|</span> Red <span class="sym">|</span> Yellow

complement a b <span class="sym">=</span> <span class="kwa">case</span> <span class="sym">(</span>a<span class="sym">,</span>b<span class="sym">)</span> <span class="kwa">of</span>
    <span class="sym">(</span>Red<span class="sym">,</span>Yellow<span class="sym">)    -&gt;</span> Blue
    <span class="sym">(</span>Red<span class="sym">,</span>Blue<span class="sym">)      -&gt;</span> Yellow
    <span class="sym">(</span>Red<span class="sym">,</span>Red<span class="sym">)       -&gt;</span> Red
    <span class="sym">(</span>Yellow<span class="sym">,</span>Blue<span class="sym">)   -&gt;</span> Red
    <span class="sym">(</span>Yellow<span class="sym">,</span>Red<span class="sym">)    -&gt;</span> Blue
    <span class="sym">(</span>Yellow<span class="sym">,</span>Yellow<span class="sym">) -&gt;</span> Yellow
    <span class="sym">(</span>Blue<span class="sym">,</span>Red<span class="sym">)      -&gt;</span> Yellow
    <span class="sym">(</span>Blue<span class="sym">,</span>Yellow<span class="sym">)   -&gt;</span> Red
    <span class="sym">(</span>Blue<span class="sym">,</span>Blue<span class="sym">)     -&gt;</span> Blue

colors <span class="sym">= [</span>Blue<span class="sym">,</span> Red<span class="sym">,</span> Yellow<span class="sym">]</span>

<span class="kwa">data</span> MP <span class="sym">=</span> MP <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!(</span>Maybe Colour<span class="sym">) ![</span><span class="kwb">Int</span><span class="sym">]</span>

main <span class="sym">=</span> <span class="kwa">do</span> n     <span class="sym">&lt;-</span> getArgs <span class="sym">&gt;&gt;=</span> readIO . head
          waker <span class="sym">&lt;-</span> newEmptyMVar
          mpv   <span class="sym">&lt;-</span> newMVar $ MP n Nothing <span class="sym">[]</span>

          <span class="kwa">let</span> arrive c t <span class="sym">=</span> <span class="kwa">do</span>
                MP q w d <span class="sym">&lt;-</span> takeMVar mpv
                <span class="kwa">case</span> w <span class="kwa">of</span>
                    _ <span class="sym">|</span> q <span class="sym">==</span> <span class="num">0</span> <span class="sym">-&gt;</span> if length d <span class="sym">/=</span> <span class="num">3</span> <span class="kwa">then</span> putMVar mpv $ MP <span class="num">0</span> w <span class="sym">(</span>t<span class="sym">:</span>d<span class="sym">)</span>
                                                   <span class="kwa">else</span> print $ t <span class="sym">+</span> sum d

                    Nothing    <span class="sym">-&gt;</span> <span class="kwa">do</span> putMVar mpv $ MP q <span class="sym">(</span>Just c<span class="sym">)</span> d
                                     c' <span class="sym">&lt;-</span> takeMVar waker
                                     arrive c' $<span class="sym">!</span> t<span class="sym">+</span><span class="num">1</span>

                    Just k     <span class="sym">-&gt;</span> <span class="kwa">do let</span> c' <span class="sym">=</span> complement k c
                                     putMVar waker $<span class="sym">!</span> c'
                                     putMVar mpv $ MP <span class="sym">(</span>q<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> Nothing d
                                     arrive c' $<span class="sym">!</span> t<span class="sym">+</span><span class="num">1</span>

          mapM_ <span class="sym">(</span>forkIO . flip arrive <span class="num">0</span><span class="sym">)</span> colors
          arrive Blue <span class="num">0</span>
          replicateM_ <span class="num">3</span> yield
