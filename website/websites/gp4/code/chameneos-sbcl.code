<span class="hl slc">;;; The Computer Language Shootout</span>
<span class="hl slc">;;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; Contributed by: Shyamal Prasad</span>


<span class="hl sym">(</span>declaim <span class="hl sym">(</span>optimize <span class="hl sym">(</span>speed <span class="hl num">3</span><span class="hl sym">) (</span>compilation-speed <span class="hl num">0</span><span class="hl sym">)</span>
		   <span class="hl sym">(</span>safety <span class="hl num">0</span><span class="hl sym">) (</span>debug <span class="hl num">0</span><span class="hl sym">))</span>
	 <span class="hl sym">(</span>inline complement-color<span class="hl sym">))</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> complement-color <span class="hl sym">(</span>x y<span class="hl sym">)</span>
  <span class="hl str">&quot;Given color x and color y return a complement for color x&quot;</span>
  <span class="hl sym">(</span><span class="hl kwa">cond</span>
   <span class="hl sym">((</span><span class="hl kwa">eq</span> x <span class="hl sym">'</span>blue<span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">eq</span> y <span class="hl sym">'</span>red<span class="hl sym">)</span>
	<span class="hl sym">'</span>yellow
      <span class="hl sym">'</span>red<span class="hl sym">))</span>

   <span class="hl sym">((</span><span class="hl kwa">eq</span> x <span class="hl sym">'</span>red<span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">eq</span> y <span class="hl sym">'</span>blue<span class="hl sym">)</span>
	<span class="hl sym">'</span>yellow
      <span class="hl sym">'</span>blue<span class="hl sym">))</span>

   <span class="hl sym">((</span><span class="hl kwa">eq</span> x <span class="hl sym">'</span>yellow<span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">eq</span> y <span class="hl sym">'</span>blue<span class="hl sym">)</span>
	<span class="hl sym">'</span>red
      <span class="hl sym">'</span>blue<span class="hl sym">))</span>
   <span class="hl sym">(</span>t
    <span class="hl sym">(</span>error <span class="hl str">&quot;oops&quot;</span><span class="hl sym">))))</span>

<span class="hl slc">;; the mutex/cv used to get access to the room and find other chameneos</span>
<span class="hl sym">(</span>defvar <span class="hl sym">*</span>room-lock<span class="hl sym">* (</span>sb-thread<span class="hl sym">:</span>make-mutex<span class="hl sym">))</span>
<span class="hl sym">(</span>defvar <span class="hl sym">*</span>wait-queue<span class="hl sym">* (</span>sb-thread<span class="hl sym">:</span>make-waitqueue<span class="hl sym">))</span>

<span class="hl slc">;; Variables in the room - get *room-lock* before touching these</span>
<span class="hl sym">(</span>declaim <span class="hl sym">(</span>fixnum <span class="hl sym">*</span>meetings-left<span class="hl sym">*) (</span>symbol <span class="hl sym">*</span>waiting-color<span class="hl sym">* *</span>incoming-color<span class="hl sym">*))</span>
<span class="hl sym">(</span>defvar <span class="hl sym">*</span>meetings-left<span class="hl sym">*</span> <span class="hl num">100</span><span class="hl sym">)</span>
<span class="hl sym">(</span>defvar <span class="hl sym">*</span>waiting-color<span class="hl sym">*</span> nil<span class="hl sym">)</span>
<span class="hl sym">(</span>defvar <span class="hl sym">*</span>incoming-color<span class="hl sym">*</span> nil<span class="hl sym">)</span>

<span class="hl slc">;; mutex/cv to used by main thread to learn that chameneos are done</span>
<span class="hl slc">;; SBCL currently (seems) to have no way to join a thread</span>
<span class="hl sym">(</span>defvar <span class="hl sym">*</span>done-lock<span class="hl sym">* (</span>sb-thread<span class="hl sym">:</span>make-mutex<span class="hl sym">))</span>
<span class="hl sym">(</span>defvar <span class="hl sym">*</span>done-queue<span class="hl sym">* (</span>sb-thread<span class="hl sym">:</span>make-waitqueue<span class="hl sym">))</span>
<span class="hl sym">(</span>defvar <span class="hl sym">*</span>met-<span class="hl kwa">list</span><span class="hl sym">*</span> nil<span class="hl sym">)</span> <span class="hl slc">; chameneos results, updated with *done-lock* held</span>

<span class="hl slc">;;Return a closure representing the chameneos creature with specified color.</span>
<span class="hl slc">;;When run the creature will try to meet others in the room</span>
<span class="hl sym">(</span><span class="hl kwa">defun</span> make-chameneos <span class="hl sym">(</span>color<span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>symbol color<span class="hl sym">))</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>meetings <span class="hl num">0</span><span class="hl sym">)</span>
	<span class="hl sym">(</span>other-color nil<span class="hl sym">))</span>
    <span class="hl sym">(</span>declare <span class="hl sym">(</span>fixnum meetings<span class="hl sym">) (</span>symbol other-color<span class="hl sym">))</span>
    #<span class="hl sym">'(</span><span class="hl kwa">lambda</span> <span class="hl sym">()</span>
	<span class="hl sym">(</span>loop
	 <span class="hl sym">(</span>sb-thread<span class="hl sym">:</span>with-mutex <span class="hl sym">(*</span>room-lock<span class="hl sym">*)</span>
	   <span class="hl sym">(</span>when <span class="hl sym">(&lt; *</span>meetings-left<span class="hl sym">*</span> <span class="hl num">1</span><span class="hl sym">)</span>
	     <span class="hl sym">(</span>return<span class="hl sym">))</span>
	   <span class="hl sym">(</span><span class="hl kwa">cond</span>
	    <span class="hl sym">(*</span>waiting-color<span class="hl sym">*</span> <span class="hl slc">; there is some one in the room</span>
	     <span class="hl sym">(</span>setf <span class="hl sym">*</span>incoming-color<span class="hl sym">*</span> color<span class="hl sym">)</span>
	     <span class="hl sym">(</span>setf other-color <span class="hl sym">*</span>waiting-color<span class="hl sym">*)</span>
	     <span class="hl sym">(</span>decf <span class="hl sym">*</span>meetings-left<span class="hl sym">*)</span>
	     <span class="hl sym">(</span>setf <span class="hl sym">*</span>waiting-color<span class="hl sym">*</span> nil<span class="hl sym">)</span>
	     <span class="hl sym">(</span>sb-thread<span class="hl sym">:</span>condition-notify <span class="hl sym">*</span>wait-queue<span class="hl sym">*))</span>

	    <span class="hl sym">(</span>t <span class="hl slc">; there is no one in the room, wait for some one</span>
	     <span class="hl sym">(</span>setf <span class="hl sym">*</span>waiting-color<span class="hl sym">*</span> color<span class="hl sym">)</span>
	     <span class="hl sym">(</span>sb-thread<span class="hl sym">:</span>condition-wait <span class="hl sym">*</span>wait-queue<span class="hl sym">* *</span>room-lock<span class="hl sym">*)</span>
	     <span class="hl sym">(</span>setf other-color <span class="hl sym">*</span>incoming-color<span class="hl sym">*))))</span>

	 <span class="hl sym">(</span>incf meetings<span class="hl sym">)</span>
	 <span class="hl sym">(</span>setf color <span class="hl sym">(</span>complement-color color other-color<span class="hl sym">)))</span>

	<span class="hl slc">;; Let the initial thread know we are done</span>
	<span class="hl sym">(</span>sb-thread<span class="hl sym">:</span>with-mutex <span class="hl sym">(*</span>done-lock<span class="hl sym">*)</span>
          <span class="hl sym">(</span>push meetings <span class="hl sym">*</span>met-<span class="hl kwa">list</span><span class="hl sym">*)</span>
	  <span class="hl sym">(</span>sb-thread<span class="hl sym">:</span>condition-notify <span class="hl sym">*</span>done-queue<span class="hl sym">*)))))</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> main <span class="hl sym">(&amp;</span>optional <span class="hl sym">(</span>n <span class="hl sym">(</span>parse-integer
			   <span class="hl sym">(</span><span class="hl kwa">car</span> <span class="hl sym">(</span><span class="hl kwa">last</span> sb-ext<span class="hl sym">:*</span>posix-argv<span class="hl sym">*)))))</span>
  <span class="hl sym">(</span>setf <span class="hl sym">*</span>meetings-left<span class="hl sym">*</span> n<span class="hl sym">)</span>
  <span class="hl sym">(</span>setf <span class="hl sym">*</span>met-<span class="hl kwa">list</span><span class="hl sym">*</span> nil<span class="hl sym">)</span>
  <span class="hl sym">(</span><span class="hl kwa">mapcar</span> <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>x<span class="hl sym">)</span>
	    <span class="hl sym">(</span>sb-thread<span class="hl sym">:</span>make-thread <span class="hl sym">(</span>make-chameneos x<span class="hl sym">)))</span>
	  <span class="hl sym">'(</span>blue red yellow blue<span class="hl sym">))</span>
  <span class="hl sym">(</span>loop
    <span class="hl sym">(</span>sb-thread<span class="hl sym">:</span>with-mutex <span class="hl sym">(*</span>done-lock<span class="hl sym">*)</span>
      <span class="hl sym">(</span>when <span class="hl sym">(</span><span class="hl kwa">eq</span> <span class="hl sym">(</span><span class="hl kwa">list</span>-<span class="hl kwa">length</span> <span class="hl sym">*</span>met-<span class="hl kwa">list</span><span class="hl sym">*)</span> <span class="hl num">4</span><span class="hl sym">)</span>
	<span class="hl sym">(</span>return<span class="hl sym">))</span>
      <span class="hl sym">(</span>sb-thread<span class="hl sym">:</span>condition-wait <span class="hl sym">*</span>done-queue<span class="hl sym">* *</span>done-lock<span class="hl sym">*)))</span>
  <span class="hl sym">(</span>format t <span class="hl str">&quot;~A~%&quot;</span> <span class="hl sym">(</span>reduce #<span class="hl sym">'+ *</span>met-<span class="hl kwa">list</span><span class="hl sym">*)))</span>

