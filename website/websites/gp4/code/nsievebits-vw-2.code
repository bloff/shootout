<span class="com">&quot;*  The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">   modified by Eliot Miranda *&quot;</span><span class="sym">!</span>


Smalltalk<span class="sym">.</span>Shootout defineClass<span class="sym">: #</span>Tests
   superclass<span class="sym">: #</span>{Core<span class="sym">.</span>Object}
   indexedType<span class="sym">: #</span>none
   private<span class="sym">:</span> <span class="kwa">false</span>
   instanceVariableNames<span class="sym">:</span> <span class="str">''</span>
   classInstanceVariableNames<span class="sym">:</span> <span class="str">''</span>
   imports<span class="sym">:</span> <span class="str">''</span>
   category<span class="sym">:</span> <span class="str">'ComputerLanguageShootout'</span> <span class="sym">!</span>

<span class="sym">!</span>Shootout<span class="sym">.</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmark scripts'</span><span class="sym">!</span>

nsievebits2
   <span class="sym">|</span> n <span class="sym">|</span>
   n <span class="sym">:=</span> CEnvironment argv first asNumber<span class="sym">.</span>
   <span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">2</span><span class="sym">)</span> ifTrue<span class="sym">: [</span>n <span class="sym">:=</span> <span class="num">2</span><span class="sym">].</span>
   <span class="kwa">self</span> primeBenchmarkFor<span class="sym">:</span> n to<span class="sym">:</span> Stdout using<span class="sym">:</span> BitArray<span class="sym">.</span>
   <span class="sym">^</span><span class="str">''</span> <span class="sym">! !</span>

<span class="sym">!</span>Shootout<span class="sym">.</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarks'</span><span class="sym">!</span>

primeBenchmarkFor<span class="sym">:</span> v to<span class="sym">:</span> output using<span class="sym">:</span> arrayClass
   v to<span class="sym">:</span> v <span class="sym">-</span> <span class="num">2</span> by<span class="sym">: -</span><span class="num">1</span> do<span class="sym">:</span>
      <span class="sym">[:</span>n<span class="sym">| |</span> m <span class="sym">|</span>
      m <span class="sym">:= (</span><span class="num">2</span> raisedTo<span class="sym">:</span> n<span class="sym">) *</span> <span class="num">10000</span><span class="sym">.</span>
      output
         nextPutAll<span class="sym">:</span> <span class="str">'Primes up to '</span><span class="sym">;</span> nextPutAll<span class="sym">: (</span>m asPaddedString<span class="sym">:</span> <span class="num">8</span><span class="sym">);</span>
         nextPutAll<span class="sym">: ((</span><span class="kwa">self</span> nsieve<span class="sym">:</span> m using<span class="sym">:</span> arrayClass<span class="sym">)</span> asPaddedString<span class="sym">:</span> <span class="num">9</span><span class="sym">);</span> cr<span class="sym">] ! !</span>

<span class="sym">!</span>Shootout<span class="sym">.</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'auxillaries'</span><span class="sym">!</span>

nsieve<span class="sym">:</span> n using<span class="sym">:</span> arrayClass
   <span class="sym">|</span> count isPrime <span class="sym">|</span>
   count <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>
   isPrime <span class="sym">:=</span> arrayClass new<span class="sym">:</span> n withAll<span class="sym">:</span> <span class="kwa">true</span><span class="sym">.</span>
   <span class="num">2</span> to<span class="sym">:</span> n do<span class="sym">:</span>
      <span class="sym">[:</span>i <span class="sym">|</span>
      <span class="sym">(</span>isPrime at<span class="sym">:</span> i<span class="sym">)</span> ifTrue<span class="sym">:</span>
         <span class="sym">[</span>i <span class="sym">+</span> i to<span class="sym">:</span> n by<span class="sym">:</span> i do<span class="sym">:</span>
            <span class="sym">[:</span>k <span class="sym">|</span> isPrime at<span class="sym">:</span> k put<span class="sym">:</span> <span class="kwa">false</span><span class="sym">].</span>
         count <span class="sym">:=</span> count <span class="sym">+</span> <span class="num">1</span><span class="sym">]].</span>
   <span class="sym">^</span>count <span class="sym">! !</span>


Smalltalk<span class="sym">.</span>Shootout defineClass<span class="sym">: #</span>BitArray
   superclass<span class="sym">: #</span>{Core<span class="sym">.</span>ArrayedCollection}
   indexedType<span class="sym">: #</span>bytes
   private<span class="sym">:</span> <span class="kwa">false</span>
   instanceVariableNames<span class="sym">:</span> <span class="str">''</span>
   classInstanceVariableNames<span class="sym">:</span> <span class="str">''</span>
   imports<span class="sym">:</span> <span class="str">''</span>
   category<span class="sym">:</span> <span class="str">'ComputerLanguageShootout'</span> <span class="sym">!</span>

<span class="sym">!</span>Shootout<span class="sym">.</span>BitArray class methodsFor<span class="sym">:</span> <span class="str">'instance creation'</span><span class="sym">!</span>

new<span class="sym">:</span> size
    <span class="sym">^</span><span class="kwa">super</span> new<span class="sym">: (</span>size <span class="sym">+</span> <span class="num">7</span> bitShift<span class="sym">: -</span><span class="num">3</span><span class="sym">) ! !</span>

<span class="sym">!</span>Shootout<span class="sym">.</span>BitArray methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>

at<span class="sym">:</span> index
    <span class="sym">|</span> wordIndex bitMask <span class="sym">|</span>
    wordIndex <span class="sym">:= ((</span>index <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> bitShift<span class="sym">: -</span><span class="num">3</span><span class="sym">) +</span> <span class="num">1</span><span class="sym">.</span>
    bitMask <span class="sym">:=</span> <span class="num">1</span> bitShift<span class="sym">: (</span>index <span class="sym">-</span> <span class="num">1</span> bitAnd<span class="sym">:</span> <span class="num">7</span><span class="sym">).</span>
    <span class="sym">^((</span><span class="kwa">self</span> basicAt<span class="sym">:</span> wordIndex<span class="sym">)</span> bitAnd<span class="sym">:</span> bitMask<span class="sym">) &gt;</span> <span class="num">0</span> <span class="sym">!</span>

at<span class="sym">:</span> index put<span class="sym">:</span> bit
    <span class="sym">|</span> wordIndex bitMask word <span class="sym">|</span>
    wordIndex <span class="sym">:= ((</span>index <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> bitShift<span class="sym">: -</span><span class="num">3</span><span class="sym">) +</span> <span class="num">1</span><span class="sym">.</span>
    bitMask <span class="sym">:=</span> <span class="num">1</span> bitShift<span class="sym">: (</span>index <span class="sym">-</span> <span class="num">1</span> bitAnd<span class="sym">:</span> <span class="num">7</span><span class="sym">).</span>

    word <span class="sym">:=</span> <span class="kwa">self</span> basicAt<span class="sym">:</span> wordIndex<span class="sym">.</span>
    word <span class="sym">:=</span> word bitOr<span class="sym">:</span> bitMask<span class="sym">.</span>
    bit ifFalse<span class="sym">: [</span>word <span class="sym">:=</span> word <span class="sym">-</span> bitMask<span class="sym">].</span>
    <span class="kwa">self</span> basicAt<span class="sym">:</span> wordIndex put<span class="sym">:</span> word<span class="sym">.</span>
    <span class="sym">^</span>bit <span class="sym">!</span>

atAllPut<span class="sym">:</span> anObject
   &quot;Put anObject at every one of the receiver<span class="str">'s indices.&quot;</span>
<span class="str"></span>
<span class="str">   | value |</span>
<span class="str">   value := anObject ifTrue: [255] ifFalse: [0].</span>
<span class="str">   1 to: self basicSize do: [:index | self basicAt: index put: value] ! !</span>
<span class="str"></span>
<span class="str"></span>
<span class="str">!Core.Integer methodsFor: '</span>computer language shootout<span class="str">'!</span>
<span class="str"></span>
<span class="str">asPaddedString: aWidth</span>
<span class="str">   | s |</span>
<span class="str">   s := WriteStream on: (String new: 10).</span>
<span class="str">   self printOn: s paddedWith: $  to: aWidth base: 10.</span>
<span class="str">   ^s contents ! !</span>
<span class="str"></span>
