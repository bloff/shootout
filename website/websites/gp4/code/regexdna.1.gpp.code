<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   Contributed by Derek Ross</span>
<span class="com">*/</span>

<span class="dir">#include &lt;string&gt;</span>
<span class="dir">#include &lt;vector&gt;</span>
<span class="dir">#include &lt;map&gt;</span>
<span class="dir">#include &lt;iostream&gt;</span>
<span class="dir">#include &lt;cassert&gt;</span>
<span class="dir">#include &lt;utility&gt;</span>

<span class="kwa">using namespace</span> std<span class="sym">;</span>

<span class="slc">// First key is index to possible alts.</span>
<span class="slc">// Second key is position of list of chars in string.</span>
<span class="kwc">typedef</span> map<span class="sym">&lt;</span> <span class="kwb">int</span><span class="sym">,</span> map <span class="sym">&lt;</span> <span class="kwb">int</span><span class="sym">,</span> vector<span class="sym">&lt;</span><span class="kwb">char</span><span class="sym">&gt; &gt; &gt;</span> reg_string_t<span class="sym">;</span>

<span class="kwc">typedef</span> map <span class="sym">&lt;</span> <span class="kwb">int</span><span class="sym">,</span> vector<span class="sym">&lt;</span><span class="kwb">char</span><span class="sym">&gt; &gt;</span> sub_reg_string_t<span class="sym">;</span>

<span class="kwb">void</span> <span class="kwd">Print</span><span class="sym">(</span>reg_string_t<span class="sym">&amp;</span> r<span class="sym">)</span>
<span class="sym">{</span>
	<span class="kwa">for</span><span class="sym">(</span><span class="kwb">size_t</span> alt <span class="sym">=</span> <span class="num">0</span> <span class="sym">;</span> alt <span class="sym">&lt;</span> r<span class="sym">.</span><span class="kwd">size</span><span class="sym">() ;</span> alt <span class="sym">++ )</span>
	<span class="sym">{</span>
		<span class="kwa">if</span><span class="sym">(</span>alt <span class="sym">!=</span> <span class="num">0</span><span class="sym">)</span>
		<span class="sym">{</span>
			cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;|&quot;</span><span class="sym">;</span>
		<span class="sym">}</span>

		<span class="kwa">for</span><span class="sym">(</span><span class="kwb">size_t</span> pos <span class="sym">=</span> <span class="num">0</span> <span class="sym">;</span> pos <span class="sym">&lt;</span> r<span class="sym">[</span>alt<span class="sym">].</span><span class="kwd">size</span><span class="sym">() ;</span> pos <span class="sym">++ )</span>
		<span class="sym">{</span>
			<span class="kwa">if</span><span class="sym">(</span>r<span class="sym">[</span>alt<span class="sym">][</span>pos<span class="sym">].</span><span class="kwd">size</span><span class="sym">() &gt;</span> <span class="num">1</span><span class="sym">)</span>cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;[&quot;</span><span class="sym">;</span>

			<span class="kwa">for</span><span class="sym">(</span><span class="kwb">size_t</span> i <span class="sym">=</span> <span class="num">0</span> <span class="sym">;</span> i <span class="sym">&lt;</span> r<span class="sym">[</span>alt<span class="sym">][</span>pos<span class="sym">].</span><span class="kwd">size</span><span class="sym">() ;</span> i <span class="sym">++ )</span>
			<span class="sym">{</span>
				cout <span class="sym">&lt;&lt;</span> r<span class="sym">[</span>alt<span class="sym">][</span>pos<span class="sym">].</span><span class="kwd">at</span><span class="sym">(</span>i<span class="sym">);</span>
			<span class="sym">}</span>

			<span class="kwa">if</span><span class="sym">(</span>r<span class="sym">[</span>alt<span class="sym">][</span>pos<span class="sym">].</span><span class="kwd">size</span><span class="sym">() &gt;</span> <span class="num">1</span><span class="sym">)</span>cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;]&quot;</span><span class="sym">;</span>
		<span class="sym">}</span>
	<span class="sym">}</span>
<span class="sym">}</span>

reg_string_t <span class="kwd">CreateRegexObject</span><span class="sym">(</span><span class="kwb">const</span> string<span class="sym">&amp;</span> s<span class="sym">)</span>
<span class="sym">{</span>
	reg_string_t reg<span class="sym">;</span>
	<span class="kwb">bool</span> in_brackets <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;</span>
	<span class="kwb">int</span> alt_index <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
	<span class="kwb">int</span> char_position <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
	<span class="kwa">for</span><span class="sym">(</span><span class="kwb">size_t</span> i <span class="sym">=</span> <span class="num">0</span> <span class="sym">;</span> i <span class="sym">&lt;</span> s<span class="sym">.</span><span class="kwd">size</span><span class="sym">() ;</span> i <span class="sym">++ )</span>
	<span class="sym">{</span>
		<span class="kwb">char</span> ch <span class="sym">=</span> s<span class="sym">[</span>i<span class="sym">];</span>
		<span class="kwa">if</span><span class="sym">(</span>ch <span class="sym">==</span> <span class="str">'['</span><span class="sym">)</span>
		<span class="sym">{</span>
			in_brackets <span class="sym">=</span> <span class="kwa">true</span><span class="sym">;</span>
		<span class="sym">}</span>
		<span class="kwa">else if</span><span class="sym">(</span>ch <span class="sym">==</span> <span class="str">']'</span><span class="sym">)</span>
		<span class="sym">{</span>
			in_brackets <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;</span>
			char_position<span class="sym">++;</span>
		<span class="sym">}</span>
		<span class="kwa">else if</span><span class="sym">(</span>ch <span class="sym">==</span> <span class="str">'|'</span><span class="sym">)</span>
		<span class="sym">{</span>
			alt_index <span class="sym">++ ;</span>
			in_brackets <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;</span>
			char_position <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
		<span class="sym">}</span>
		<span class="kwa">else</span>
		<span class="sym">{</span>
			<span class="kwa">if</span><span class="sym">(</span>in_brackets<span class="sym">)</span>
			<span class="sym">{</span>
				reg<span class="sym">[</span>alt_index<span class="sym">][</span>char_position<span class="sym">].</span><span class="kwd">push_back</span><span class="sym">(</span>ch<span class="sym">);</span>
			<span class="sym">}</span>
			<span class="kwa">else</span>
			<span class="sym">{</span>
				reg<span class="sym">[</span>alt_index<span class="sym">][</span>char_position<span class="sym">].</span><span class="kwd">push_back</span><span class="sym">(</span>ch<span class="sym">);</span>
				char_position <span class="sym">++ ;</span>
			<span class="sym">}</span>
		<span class="sym">}</span>
	<span class="sym">}</span>
	<span class="slc">//Print(reg);</span>
	<span class="kwa">return</span> reg<span class="sym">;</span>
<span class="sym">}</span>



<span class="kwb">bool</span> <span class="kwd">MatchSub</span><span class="sym">(</span><span class="kwb">const</span> string<span class="sym">&amp;</span> s<span class="sym">,</span> <span class="kwb">size_t</span> offset<span class="sym">,</span> sub_reg_string_t<span class="sym">&amp;</span> reg<span class="sym">)</span>
<span class="sym">{</span>
	<span class="kwd">assert</span><span class="sym">(</span>reg<span class="sym">.</span><span class="kwd">size</span><span class="sym">());</span>
	<span class="kwd">assert</span><span class="sym">(</span>s<span class="sym">.</span><span class="kwd">size</span><span class="sym">());</span>
	<span class="kwa">if</span><span class="sym">(</span>reg<span class="sym">.</span><span class="kwd">size</span><span class="sym">() &gt;</span> s<span class="sym">.</span><span class="kwd">size</span><span class="sym">() -</span> offset<span class="sym">)</span>
	<span class="sym">{</span>
		<span class="slc">//cout &lt;&lt; &quot;false &quot; &lt;&lt; reg.size() &lt;&lt; &quot; &quot; &lt;&lt;  s.size() &lt;&lt; &quot; &quot; &lt;&lt; offset &lt;&lt; endl;</span>
		<span class="kwa">return false</span><span class="sym">;</span>
	<span class="sym">}</span>

	<span class="kwa">for</span><span class="sym">(</span><span class="kwb">size_t</span> pos <span class="sym">=</span> <span class="num">0</span> <span class="sym">;</span> pos <span class="sym">&lt;</span> reg<span class="sym">.</span><span class="kwd">size</span><span class="sym">() ;</span> pos <span class="sym">++ )</span>
	<span class="sym">{</span>
		<span class="kwd">assert</span><span class="sym">(</span>reg<span class="sym">[</span>pos<span class="sym">].</span><span class="kwd">size</span><span class="sym">() !=</span> <span class="num">0</span><span class="sym">);</span>
		<span class="kwb">bool</span> charmatched <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;</span>
		<span class="kwa">for</span><span class="sym">(</span><span class="kwb">size_t</span> i <span class="sym">=</span> <span class="num">0</span> <span class="sym">;</span> i <span class="sym">&lt;</span> reg<span class="sym">[</span>pos<span class="sym">].</span><span class="kwd">size</span><span class="sym">() ;</span> i <span class="sym">++ )</span>
		<span class="sym">{</span>
			<span class="kwa">if</span><span class="sym">(</span>reg<span class="sym">[</span>pos<span class="sym">].</span><span class="kwd">at</span><span class="sym">(</span>i<span class="sym">) ==</span> s<span class="sym">.</span><span class="kwd">at</span><span class="sym">(</span>pos <span class="sym">+</span> offset<span class="sym">))</span>
			<span class="sym">{</span>
				charmatched <span class="sym">=</span> <span class="kwa">true</span><span class="sym">;</span>
				<span class="kwa">break</span><span class="sym">;</span>
			<span class="sym">}</span>
		<span class="sym">}</span>
		<span class="kwa">if</span><span class="sym">(!</span>charmatched<span class="sym">)</span>
		<span class="sym">{</span>
			<span class="kwa">return false</span><span class="sym">;</span>
		<span class="sym">}</span>
	<span class="sym">}</span>

	<span class="kwa">return true</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">bool</span> <span class="kwd">MatchAlts</span><span class="sym">(</span><span class="kwb">const</span> string<span class="sym">&amp;</span> s<span class="sym">,</span> <span class="kwb">size_t</span> offset<span class="sym">,</span> reg_string_t<span class="sym">&amp;</span> reg<span class="sym">)</span>
<span class="sym">{</span>
	<span class="kwa">for</span><span class="sym">(</span><span class="kwb">size_t</span> alt <span class="sym">=</span> <span class="num">0</span> <span class="sym">;</span> alt <span class="sym">&lt;</span> reg<span class="sym">.</span><span class="kwd">size</span><span class="sym">() ;</span> alt <span class="sym">++ )</span>
	<span class="sym">{</span>
		<span class="kwa">if</span><span class="sym">(</span><span class="kwd">MatchSub</span><span class="sym">(</span>s<span class="sym">,</span> offset<span class="sym">,</span>  reg<span class="sym">[</span>alt<span class="sym">]))</span>
		<span class="sym">{</span>
			<span class="kwa">return true</span><span class="sym">;</span>
		<span class="sym">}</span>
	<span class="sym">}</span>
	<span class="kwa">return false</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">bool</span> <span class="kwd">Has</span><span class="sym">(</span>map<span class="sym">&lt;</span><span class="kwb">char</span><span class="sym">,</span> string<span class="sym">&gt;&amp;</span> sub_table<span class="sym">,</span> <span class="kwb">const char</span> ch<span class="sym">)</span>
<span class="sym">{</span>
	<span class="kwa">return</span> sub_table<span class="sym">.</span><span class="kwd">find</span><span class="sym">(</span>ch<span class="sym">) !=</span> sub_table<span class="sym">.</span><span class="kwd">end</span><span class="sym">();</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">SubCharWithString</span><span class="sym">(</span>map<span class="sym">&lt;</span><span class="kwb">char</span><span class="sym">,</span> string<span class="sym">&gt;&amp;</span> sub_table<span class="sym">,</span> <span class="kwb">const</span> string<span class="sym">&amp;</span> s<span class="sym">,</span> string<span class="sym">&amp;</span> result<span class="sym">)</span>
<span class="sym">{</span>
	result<span class="sym">.</span><span class="kwd">erase</span><span class="sym">();</span>
	<span class="kwa">for</span><span class="sym">(</span><span class="kwb">size_t</span> i <span class="sym">=</span> <span class="num">0</span> <span class="sym">;</span> i <span class="sym">&lt;</span> s<span class="sym">.</span><span class="kwd">size</span><span class="sym">() ;</span> i <span class="sym">++ )</span>
	<span class="sym">{</span>
		<span class="kwb">char</span> ch <span class="sym">=</span> s<span class="sym">[</span>i<span class="sym">];</span>
		<span class="kwa">if</span><span class="sym">(</span><span class="kwd">Has</span><span class="sym">(</span>sub_table<span class="sym">,</span> ch<span class="sym">))</span>
		<span class="sym">{</span>
			result <span class="sym">+=</span> sub_table<span class="sym">[</span>ch<span class="sym">];</span>
		<span class="sym">}</span>
		<span class="kwa">else</span>
		<span class="sym">{</span>
			result <span class="sym">+=</span> ch<span class="sym">;</span>
		<span class="sym">}</span>
	<span class="sym">}</span>
<span class="sym">}</span>



<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">()</span>
<span class="sym">{</span>

	vector<span class="sym">&lt;</span>pair<span class="sym">&lt;</span>reg_string_t<span class="sym">,</span> <span class="kwb">int</span><span class="sym">&gt; &gt;</span> variants<span class="sym">;</span><span class="slc">//first=regex, second=count</span>
	variants<span class="sym">.</span><span class="kwd">push_back</span><span class="sym">(</span><span class="kwd">make_pair</span><span class="sym">(</span><span class="kwd">CreateRegexObject</span><span class="sym">(</span><span class="str">&quot;agggtaaa|tttaccct&quot;</span><span class="sym">),</span> <span class="num">0</span><span class="sym">));</span>
      	variants<span class="sym">.</span><span class="kwd">push_back</span><span class="sym">(</span><span class="kwd">make_pair</span><span class="sym">(</span><span class="kwd">CreateRegexObject</span><span class="sym">(</span><span class="str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="sym">),</span> <span class="num">0</span><span class="sym">));</span>
      	variants<span class="sym">.</span><span class="kwd">push_back</span><span class="sym">(</span><span class="kwd">make_pair</span><span class="sym">(</span><span class="kwd">CreateRegexObject</span><span class="sym">(</span><span class="str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="sym">),</span> <span class="num">0</span><span class="sym">));</span>
      	variants<span class="sym">.</span><span class="kwd">push_back</span><span class="sym">(</span><span class="kwd">make_pair</span><span class="sym">(</span><span class="kwd">CreateRegexObject</span><span class="sym">(</span><span class="str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="sym">),</span> <span class="num">0</span><span class="sym">));</span>
     	variants<span class="sym">.</span><span class="kwd">push_back</span><span class="sym">(</span><span class="kwd">make_pair</span><span class="sym">(</span><span class="kwd">CreateRegexObject</span><span class="sym">(</span><span class="str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="sym">),</span> <span class="num">0</span><span class="sym">));</span>
      	variants<span class="sym">.</span><span class="kwd">push_back</span><span class="sym">(</span><span class="kwd">make_pair</span><span class="sym">(</span><span class="kwd">CreateRegexObject</span><span class="sym">(</span><span class="str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="sym">),</span> <span class="num">0</span><span class="sym">));</span>
     	variants<span class="sym">.</span><span class="kwd">push_back</span><span class="sym">(</span><span class="kwd">make_pair</span><span class="sym">(</span><span class="kwd">CreateRegexObject</span><span class="sym">(</span><span class="str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="sym">),</span> <span class="num">0</span><span class="sym">));</span>
      	variants<span class="sym">.</span><span class="kwd">push_back</span><span class="sym">(</span><span class="kwd">make_pair</span><span class="sym">(</span><span class="kwd">CreateRegexObject</span><span class="sym">(</span><span class="str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="sym">),</span> <span class="num">0</span><span class="sym">));</span>
      	variants<span class="sym">.</span><span class="kwd">push_back</span><span class="sym">(</span><span class="kwd">make_pair</span><span class="sym">(</span><span class="kwd">CreateRegexObject</span><span class="sym">(</span><span class="str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span><span class="sym">),</span> <span class="num">0</span><span class="sym">));</span>

	map<span class="sym">&lt;</span><span class="kwb">int</span><span class="sym">,</span> <span class="kwb">int</span><span class="sym">&gt;</span> variants_counts<span class="sym">;</span>

	map<span class="sym">&lt;</span><span class="kwb">char</span><span class="sym">,</span> string<span class="sym">&gt;</span> subst<span class="sym">;</span>
	subst<span class="sym">[</span><span class="str">'B'</span><span class="sym">] =</span> <span class="str">&quot;(c|g|t)&quot;</span><span class="sym">;</span>
	subst<span class="sym">[</span><span class="str">'D'</span><span class="sym">] =</span> <span class="str">&quot;(a|g|t)&quot;</span><span class="sym">;</span>
	subst<span class="sym">[</span><span class="str">'H'</span><span class="sym">] =</span> <span class="str">&quot;(a|c|t)&quot;</span><span class="sym">;</span>
	subst<span class="sym">[</span><span class="str">'K'</span><span class="sym">] =</span> <span class="str">&quot;(g|t)&quot;</span><span class="sym">;</span>
      	subst<span class="sym">[</span><span class="str">'M'</span><span class="sym">] =</span> <span class="str">&quot;(a|c)&quot;</span><span class="sym">;</span>
      	subst<span class="sym">[</span><span class="str">'N'</span><span class="sym">] =</span> <span class="str">&quot;(a|c|g|t)&quot;</span><span class="sym">;</span>
      	subst<span class="sym">[</span><span class="str">'R'</span><span class="sym">] =</span> <span class="str">&quot;(a|g)&quot;</span><span class="sym">;</span>
      	subst<span class="sym">[</span><span class="str">'S'</span><span class="sym">] =</span> <span class="str">&quot;(c|g)&quot;</span><span class="sym">;</span>
      	subst<span class="sym">[</span><span class="str">'V'</span><span class="sym">] =</span> <span class="str">&quot;(a|c|g)&quot;</span><span class="sym">;</span>
      	subst<span class="sym">[</span><span class="str">'W'</span><span class="sym">] =</span> <span class="str">&quot;(a|t)&quot;</span><span class="sym">;</span>
      	subst<span class="sym">[</span><span class="str">'Y'</span><span class="sym">] =</span> <span class="str">&quot;(c|t)&quot;</span><span class="sym">;</span>

	string seq<span class="sym">;</span>
	string line<span class="sym">;</span>
	<span class="kwb">int</span> ilen <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
	<span class="kwa">while</span><span class="sym">(</span><span class="kwd">getline</span><span class="sym">(</span>cin<span class="sym">,</span> line<span class="sym">))</span>
	<span class="sym">{</span>
		ilen <span class="sym">+=</span> line<span class="sym">.</span><span class="kwd">size</span><span class="sym">() +</span> <span class="num">1</span><span class="sym">;</span> <span class="slc">// 1 extra for newline char.</span>
		<span class="kwa">if</span><span class="sym">(</span>line<span class="sym">.</span><span class="kwd">size</span><span class="sym">())</span>
		<span class="sym">{</span>
			<span class="kwa">if</span><span class="sym">(</span>line<span class="sym">.</span><span class="kwd">at</span><span class="sym">(</span><span class="num">0</span><span class="sym">) !=</span> <span class="str">'&gt;'</span><span class="sym">)</span>
			<span class="sym">{</span>
				seq <span class="sym">+=</span> line<span class="sym">;</span>
			<span class="sym">}</span>
		<span class="sym">}</span>
	<span class="sym">}</span>

	<span class="kwa">for</span><span class="sym">(</span><span class="kwb">size_t</span> v <span class="sym">=</span> <span class="num">0</span> <span class="sym">;</span> v <span class="sym">&lt;</span> variants<span class="sym">.</span><span class="kwd">size</span><span class="sym">() ;</span> v <span class="sym">++ )</span>
	<span class="sym">{</span>
		<span class="kwa">for</span><span class="sym">(</span><span class="kwb">size_t</span> offset <span class="sym">=</span> <span class="num">0</span> <span class="sym">;</span> offset <span class="sym">&lt;</span> seq<span class="sym">.</span><span class="kwd">size</span><span class="sym">() ;</span> offset <span class="sym">++ )</span>
		<span class="sym">{</span>
			<span class="kwa">if</span><span class="sym">(</span><span class="kwd">MatchAlts</span><span class="sym">(</span>seq<span class="sym">,</span> offset<span class="sym">,</span> variants<span class="sym">.</span><span class="kwd">at</span><span class="sym">(</span>v<span class="sym">).</span>first<span class="sym">))</span>
			<span class="sym">{</span>
				variants<span class="sym">.</span><span class="kwd">at</span><span class="sym">(</span>v<span class="sym">).</span>second<span class="sym">++;</span>
			<span class="sym">}</span>
		<span class="sym">}</span>
	<span class="sym">}</span>

	<span class="kwa">for</span><span class="sym">(</span><span class="kwb">size_t</span> v <span class="sym">=</span> <span class="num">0</span> <span class="sym">;</span> v <span class="sym">&lt;</span> variants<span class="sym">.</span><span class="kwd">size</span><span class="sym">() ;</span> v <span class="sym">++ )</span>
	<span class="sym">{</span>
		<span class="kwd">Print</span><span class="sym">(</span>variants<span class="sym">.</span><span class="kwd">at</span><span class="sym">(</span>v<span class="sym">).</span>first<span class="sym">);</span>
		cout <span class="sym">&lt;&lt;</span> <span class="str">&quot; &quot;</span> <span class="sym">;</span>
		cout <span class="sym">&lt;&lt;</span> variants<span class="sym">.</span><span class="kwd">at</span><span class="sym">(</span>v<span class="sym">).</span>second<span class="sym">;</span>
		cout <span class="sym">&lt;&lt;</span> endl<span class="sym">;</span>
	<span class="sym">}</span>

	string new_seq<span class="sym">;</span>

	<span class="kwd">SubCharWithString</span><span class="sym">(</span>subst<span class="sym">,</span> seq<span class="sym">,</span> new_seq<span class="sym">);</span>

	cout <span class="sym">&lt;&lt;</span> endl<span class="sym">;</span>
	cout <span class="sym">&lt;&lt;</span> ilen <span class="sym">&lt;&lt;</span> endl<span class="sym">;</span>
	cout <span class="sym">&lt;&lt;</span> seq<span class="sym">.</span><span class="kwd">size</span><span class="sym">() &lt;&lt;</span> endl<span class="sym">;</span>
	cout <span class="sym">&lt;&lt;</span> new_seq<span class="sym">.</span><span class="kwd">size</span><span class="sym">() &lt;&lt;</span> endl<span class="sym">;</span>


<span class="sym">}</span>
