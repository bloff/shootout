<span class="hl slc"># The Computer Language Shootout</span>
<span class="hl slc"># http://shootout.alioth.debian.org</span>
<span class="hl slc"># Free Pascal version by Joost van der Sluis</span>
<span class="hl slc"># Adapted to Psyco for max speed by bearophile, Jan 1 2005</span>

<span class="hl kwa">import</span> sys<span class="hl sym">,</span> psyco

<span class="hl kwa">def</span> <span class="hl kwd">nprimes</span><span class="hl sym">(</span>size<span class="hl sym">):</span>
    bpc <span class="hl sym">=</span> <span class="hl num">31</span> <span class="hl slc"># used 31 bits only for each int</span>
    flags <span class="hl sym">= [</span><span class="hl num">2147483647</span><span class="hl sym">] * (</span>size <span class="hl sym">/</span> bpc <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>

    count <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">for</span> prime <span class="hl kwa">in</span> <span class="hl kwb">xrange</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">,</span> size<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">):</span>
        offset <span class="hl sym">=</span> prime <span class="hl sym">/</span> bpc
        mask <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>prime <span class="hl sym">%</span> bpc<span class="hl sym">)</span>
        <span class="hl kwa">if</span> flags<span class="hl sym">[</span>offset<span class="hl sym">] &amp;</span> mask<span class="hl sym">:</span>
            count <span class="hl sym">+=</span> <span class="hl num">1</span>
            i <span class="hl sym">=</span> prime <span class="hl sym">&lt;&lt;</span> <span class="hl num">1</span>
            <span class="hl kwa">while</span> i <span class="hl sym">&lt;=</span> size<span class="hl sym">:</span>
                offset <span class="hl sym">=</span> i <span class="hl sym">/</span> bpc
                mask <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>i <span class="hl sym">%</span> bpc<span class="hl sym">)</span>
                <span class="hl kwa">if</span> flags<span class="hl sym">[</span>offset<span class="hl sym">] &amp;</span> mask<span class="hl sym">:</span>
                    flags<span class="hl sym">[</span>offset<span class="hl sym">] &amp;=</span> ~mask
                i <span class="hl sym">+=</span> prime
    <span class="hl kwa">print</span> <span class="hl str">&quot;Primes up to %8u %8u&quot;</span> <span class="hl sym">% (</span>size<span class="hl sym">,</span> count<span class="hl sym">)</span>

psyco<span class="hl sym">.</span><span class="hl kwd">bind</span><span class="hl sym">(</span>nprimes<span class="hl sym">)</span>
m <span class="hl sym">=</span> <span class="hl kwb">int</span><span class="hl sym">( (</span>sys<span class="hl sym">.</span>argv<span class="hl sym">+[</span><span class="hl num">2</span><span class="hl sym">])[</span><span class="hl num">1</span><span class="hl sym">] )</span>
<span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">:</span>
    <span class="hl kwd">nprimes</span><span class="hl sym">(</span><span class="hl num">10000</span> <span class="hl sym">&lt;&lt; (</span>m<span class="hl sym">-</span>i<span class="hl sym">))</span>
