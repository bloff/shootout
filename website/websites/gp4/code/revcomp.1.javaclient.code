<span class="hl com">/*</span>
<span class="hl com"> * The Computer Language Shootout</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> * contributed by Anthony Donnefort</span>
<span class="hl com"> */</span>

<span class="hl kwa">import</span> java<span class="hl sym">.</span>io<span class="hl sym">.*;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span><span class="hl kwc">ArrayList</span><span class="hl sym">;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span><span class="hl kwc">List</span><span class="hl sym">;</span>

<span class="hl kwa">public class</span> revcomp <span class="hl sym">{</span>
	<span class="hl kwa">private static final</span> <span class="hl kwb">byte</span><span class="hl sym">[]</span> comp <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl sym">[</span><span class="hl num">128</span><span class="hl sym">];</span>
	<span class="hl kwa">private static final</span> <span class="hl kwb">int</span> LINE_LENGTH <span class="hl sym">=</span> <span class="hl num">60</span><span class="hl sym">;</span>
	<span class="hl kwa">private static final</span> <span class="hl kwb">byte</span> CR <span class="hl sym">=</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">;</span>
	<span class="hl kwa">static</span> <span class="hl sym">{</span>
		<span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> comp<span class="hl sym">.</span>length<span class="hl sym">;</span> i<span class="hl sym">++)</span> comp<span class="hl sym">[</span>i<span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span> i<span class="hl sym">;</span>
		comp<span class="hl sym">[</span><span class="hl str">'t'</span><span class="hl sym">] =</span> comp<span class="hl sym">[</span><span class="hl str">'T'</span><span class="hl sym">] =</span> <span class="hl str">'A'</span><span class="hl sym">;</span>
		comp<span class="hl sym">[</span><span class="hl str">'a'</span><span class="hl sym">] =</span> comp<span class="hl sym">[</span><span class="hl str">'A'</span><span class="hl sym">] =</span> <span class="hl str">'T'</span><span class="hl sym">;</span>
		comp<span class="hl sym">[</span><span class="hl str">'g'</span><span class="hl sym">] =</span> comp<span class="hl sym">[</span><span class="hl str">'G'</span><span class="hl sym">] =</span> <span class="hl str">'C'</span><span class="hl sym">;</span>
		comp<span class="hl sym">[</span><span class="hl str">'c'</span><span class="hl sym">] =</span> comp<span class="hl sym">[</span><span class="hl str">'C'</span><span class="hl sym">] =</span> <span class="hl str">'G'</span><span class="hl sym">;</span>
		comp<span class="hl sym">[</span><span class="hl str">'v'</span><span class="hl sym">] =</span> comp<span class="hl sym">[</span><span class="hl str">'V'</span><span class="hl sym">] =</span> <span class="hl str">'B'</span><span class="hl sym">;</span>
		comp<span class="hl sym">[</span><span class="hl str">'h'</span><span class="hl sym">] =</span> comp<span class="hl sym">[</span><span class="hl str">'H'</span><span class="hl sym">] =</span> <span class="hl str">'D'</span><span class="hl sym">;</span>
		comp<span class="hl sym">[</span><span class="hl str">'r'</span><span class="hl sym">] =</span> comp<span class="hl sym">[</span><span class="hl str">'R'</span><span class="hl sym">] =</span> <span class="hl str">'Y'</span><span class="hl sym">;</span>
		comp<span class="hl sym">[</span><span class="hl str">'m'</span><span class="hl sym">] =</span> comp<span class="hl sym">[</span><span class="hl str">'M'</span><span class="hl sym">] =</span> <span class="hl str">'K'</span><span class="hl sym">;</span>
		comp<span class="hl sym">[</span><span class="hl str">'y'</span><span class="hl sym">] =</span> comp<span class="hl sym">[</span><span class="hl str">'Y'</span><span class="hl sym">] =</span> <span class="hl str">'R'</span><span class="hl sym">;</span>
		comp<span class="hl sym">[</span><span class="hl str">'k'</span><span class="hl sym">] =</span> comp<span class="hl sym">[</span><span class="hl str">'K'</span><span class="hl sym">] =</span> <span class="hl str">'M'</span><span class="hl sym">;</span>
		comp<span class="hl sym">[</span><span class="hl str">'b'</span><span class="hl sym">] =</span> comp<span class="hl sym">[</span><span class="hl str">'B'</span><span class="hl sym">] =</span> <span class="hl str">'V'</span><span class="hl sym">;</span>
		comp<span class="hl sym">[</span><span class="hl str">'d'</span><span class="hl sym">] =</span> comp<span class="hl sym">[</span><span class="hl str">'D'</span><span class="hl sym">] =</span> <span class="hl str">'H'</span><span class="hl sym">;</span>
		comp<span class="hl sym">[</span><span class="hl str">'u'</span><span class="hl sym">] =</span> comp<span class="hl sym">[</span><span class="hl str">'U'</span><span class="hl sym">] =</span> <span class="hl str">'A'</span><span class="hl sym">;</span>
	<span class="hl sym">}</span>

	<span class="hl kwa">private static</span> <span class="hl kwb">int</span> maxInputLineLength <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

	<span class="hl slc">// Will add CR then print the input data</span>
	<span class="hl kwa">private static</span> <span class="hl kwb">void</span> <span class="hl kwd">formatAndPrint</span><span class="hl sym">(</span><span class="hl kwc">List</span><span class="hl sym">&lt;</span><span class="hl kwb">byte</span><span class="hl sym">[]&gt;</span> lineBuffer<span class="hl sym">) {</span>
		<span class="hl kwb">byte</span><span class="hl sym">[]</span> data <span class="hl sym">=</span> null<span class="hl sym">;</span>
		<span class="hl kwb">int</span> remainOnLine <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
		<span class="hl kwb">int</span> totalSize <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
		<span class="hl kwb">int</span> linePointer <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
		<span class="hl kwb">byte</span><span class="hl sym">[]</span> printBuffer <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl sym">[((</span>maxInputLineLength <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">) *</span> lineBuffer<span class="hl sym">.</span><span class="hl kwd">size</span><span class="hl sym">())];</span>

		<span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> lineBuffer<span class="hl sym">.</span><span class="hl kwd">size</span><span class="hl sym">() -</span> <span class="hl num">1</span><span class="hl sym">;</span> i <span class="hl sym">&gt;=</span> <span class="hl num">0</span> <span class="hl sym">;</span> i<span class="hl sym">--) {</span>
			data <span class="hl sym">=</span> lineBuffer<span class="hl sym">.</span><span class="hl kwd">get</span><span class="hl sym">(</span>i<span class="hl sym">);</span>
			<span class="hl kwa">if</span> <span class="hl sym">(</span>data<span class="hl sym">.</span>length <span class="hl sym">&lt;= (</span>remainOnLine <span class="hl sym">=</span> LINE_LENGTH <span class="hl sym">-</span> linePointer<span class="hl sym">)) {</span>
				<span class="hl kwc">System</span><span class="hl sym">.</span><span class="hl kwd">arraycopy</span><span class="hl sym">(</span>data<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> printBuffer<span class="hl sym">,</span> totalSize<span class="hl sym">,</span> data<span class="hl sym">.</span>length<span class="hl sym">);</span>
				linePointer <span class="hl sym">+=</span> data<span class="hl sym">.</span>length<span class="hl sym">;</span>
				totalSize <span class="hl sym">+=</span> data<span class="hl sym">.</span>length<span class="hl sym">;</span>
			<span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
				linePointer <span class="hl sym">=</span> data<span class="hl sym">.</span>length <span class="hl sym">-</span> remainOnLine<span class="hl sym">;</span>
				<span class="hl kwc">System</span><span class="hl sym">.</span><span class="hl kwd">arraycopy</span><span class="hl sym">(</span>data<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> printBuffer<span class="hl sym">,</span> totalSize<span class="hl sym">,</span> remainOnLine<span class="hl sym">);</span>
				printBuffer<span class="hl sym">[</span>totalSize <span class="hl sym">+</span> remainOnLine<span class="hl sym">] =</span> CR<span class="hl sym">;</span>
				<span class="hl kwc">System</span><span class="hl sym">.</span><span class="hl kwd">arraycopy</span><span class="hl sym">(</span>data<span class="hl sym">,</span> remainOnLine<span class="hl sym">,</span> printBuffer<span class="hl sym">,</span> totalSize <span class="hl sym">+</span> remainOnLine <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span> linePointer<span class="hl sym">);</span>
				totalSize <span class="hl sym">+=</span> data<span class="hl sym">.</span>length <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
			<span class="hl sym">}</span>
		<span class="hl sym">}</span>
		<span class="hl kwa">if</span> <span class="hl sym">(</span>totalSize <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> printBuffer<span class="hl sym">[</span>totalSize<span class="hl sym">++] =</span> CR<span class="hl sym">;</span>
		<span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">write</span><span class="hl sym">(</span>printBuffer<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> totalSize<span class="hl sym">);</span>
		lineBuffer<span class="hl sym">.</span><span class="hl kwd">clear</span><span class="hl sym">();</span>
	<span class="hl sym">}</span>

	<span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">)</span> <span class="hl kwa">throws</span> <span class="hl kwc">IOException</span> <span class="hl sym">{</span>
		<span class="hl kwb">byte</span><span class="hl sym">[]</span> revcompLine <span class="hl sym">=</span> null<span class="hl sym">;</span>
		<span class="hl kwc">List</span><span class="hl sym">&lt;</span><span class="hl kwb">byte</span><span class="hl sym">[]&gt;</span> revcompBuffer <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">ArrayList</span><span class="hl sym">&lt;</span><span class="hl kwb">byte</span><span class="hl sym">[]&gt;();</span>

		<span class="hl kwc">BufferedReader</span> in <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">BufferedReader</span><span class="hl sym">(</span><span class="hl kwa">new</span> <span class="hl kwc">InputStreamReader</span><span class="hl sym">(</span><span class="hl kwc">System</span><span class="hl sym">.</span>in<span class="hl sym">));</span>
		<span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwc">String</span> line<span class="hl sym">; (</span>line <span class="hl sym">=</span> in<span class="hl sym">.</span><span class="hl kwd">readLine</span><span class="hl sym">()) !=</span> null<span class="hl sym">;) {</span>
			<span class="hl kwa">if</span> <span class="hl sym">(</span>line<span class="hl sym">.</span><span class="hl kwd">startsWith</span><span class="hl sym">(</span><span class="hl str">&quot;&gt;&quot;</span><span class="hl sym">)) {</span>
				<span class="hl kwd">formatAndPrint</span><span class="hl sym">(</span>revcompBuffer<span class="hl sym">);</span>
				<span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span>line<span class="hl sym">);</span>
			<span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
				<span class="hl slc">// Keep track of the maximum input line length. We will need that later to allocate a buffer that will not need to be resized.</span>
				<span class="hl kwa">if</span> <span class="hl sym">(</span>line<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">() &gt;</span> maxInputLineLength<span class="hl sym">)</span> maxInputLineLength <span class="hl sym">=</span> line<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">();</span>
				revcompLine <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl sym">[</span>line<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">()];</span>
				<span class="hl kwb">int</span> j <span class="hl sym">=</span> line<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">() -</span> <span class="hl num">1</span><span class="hl sym">;</span>
				<span class="hl slc">// The line is reversed and complements are calculated here.</span>
				<span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> line<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">() ;</span> i<span class="hl sym">++)</span> revcompLine<span class="hl sym">[</span>i<span class="hl sym">] =</span> comp<span class="hl sym">[</span>line<span class="hl sym">.</span><span class="hl kwd">charAt</span><span class="hl sym">(</span>j<span class="hl sym">--)];</span>
				revcompBuffer<span class="hl sym">.</span><span class="hl kwd">add</span><span class="hl sym">(</span>revcompLine<span class="hl sym">);</span>
			<span class="hl sym">}</span>
		<span class="hl sym">}</span>
		<span class="hl kwd">formatAndPrint</span><span class="hl sym">(</span>revcompBuffer<span class="hl sym">);</span>
	<span class="hl sym">}</span>
<span class="hl sym">}</span>
