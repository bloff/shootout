BUILD COMMANDS FOR: partialsums.sbcl-2.sbcl

Thu Nov 30 15:06:59 PST 2006

SBCL built with: /usr/bin/sbcl --userinit /dev/null --sysinit /dev/null -batch -eval '(load "partialsums.sbcl-2.sbcl_compile")'
### START partialsums.sbcl-2.sbcl_compile
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(handler-bind ((sb-ext:defconstant-uneql      (lambda (c) (abort c))))      (load (compile-file "partialsums.sbcl-2.sbcl" ))) (save-lisp-and-die "sbcl.core" :purify t)
### END partialsums.sbcl-2.sbcl_compile

; compiling file "/home/dunham/gp4/shootout/bench/partialsums/tmp/partialsums.sbcl-2.sbcl" (written 30 NOV 2006 03:06:59 PM):
; compiling (DEFUN MAIN ...)
; file: /home/dunham/gp4/shootout/bench/partialsums/tmp/partialsums.sbcl-2.sbcl
; in: DEFUN MAIN
;     (COS (COERCE K 'DOUBLE-FLOAT))
; 
; note: unable to avoid inline argument range check
; because the argument range (DOUBLE-FLOAT) was not within 2^64

;     (SIN (COERCE K 'DOUBLE-FLOAT))
; 
; note: unable to avoid inline argument range check
; because the argument range (DOUBLE-FLOAT) was not within 2^64

;     (FORMAT T "~,9f~a(2/3)^k~%"
;           (LOOP FOR K FIXNUM FROM 0 TO N SUM
;                 (EXPT (/ 2.0d0 3.0d0) (COERCE K 'DOUBLE-FLOAT)) DOUBLE-FLOAT)
;           #\Tab)
; --> FORMAT FORMATTER FUNCTION BLOCK LET 
; ==>
;   (SB-FORMAT::FORMAT-FIXED STREAM #:FORMAT-ARG-28 #:G679 #:G680 #:G681 #:G682
;                            #:G683 NIL)
; 
; note: doing float to pointer coercion (cost 13) from #:LOOP-SUM-1

;     (FORMAT T "~,9f~ak^-0.5~%"
;           (LOOP FOR K FIXNUM FROM 1 TO N SUM
;                 (/ 1.0d0 (THE DOUBLE-FLOAT (SQRT #))) DOUBLE-FLOAT)
;           #\Tab)
; --> FORMAT FORMATTER FUNCTION BLOCK LET 
; ==>
;   (SB-FORMAT::FORMAT-FIXED STREAM #:FORMAT-ARG-45 #:G679 #:G680 #:G681 #:G682
;                            #:G683 NIL)
; 
; note: doing float to pointer coercion (cost 13) from #:LOOP-SUM-3

;     (FORMAT T "~,9f~a1/k(k+1)~%"
;           (LOOP FOR K FIXNUM FROM 1 TO N SUM
;                 (/ 1.0d0 (* (COERCE K 'DOUBLE-FLOAT) (+ # 1.0d0)))
;                 DOUBLE-FLOAT)
;           #\Tab)
; --> FORMAT FORMATTER FUNCTION BLOCK LET 
; ==>
;   (SB-FORMAT::FORMAT-FIXED STREAM #:FORMAT-ARG-62 #:G679 #:G680 #:G681 #:G682
;                            #:G683 NIL)
; 
; note: doing float to pointer coercion (cost 13) from #:LOOP-SUM-5

;     (FORMAT T "~,9f~aFlint Hills~%"
;           (LOOP FOR K FIXNUM FROM 1 TO N SUM
;                 (LET ((SK #) (KD #))
;                   (/ 1.0d0 (* KD KD KD SK SK)))
;                 DOUBLE-FLOAT)
;           #\Tab)
; --> FORMAT FORMATTER FUNCTION BLOCK LET 
; ==>
;   (SB-FORMAT::FORMAT-FIXED STREAM #:FORMAT-ARG-79 #:G679 #:G680 #:G681 #:G682
;                            #:G683 NIL)
; 
; note: doing float to pointer coercion (cost 13) from #:LOOP-SUM-7

;     (FORMAT T "~,9f~aCookson Hills~%"
;           (LOOP FOR K FIXNUM FROM 1 TO N SUM
;                 (LET ((CK #) (KD #))
;                   (/ 1.0d0 (* KD KD KD CK CK)))
;                 DOUBLE-FLOAT)
;           #\Tab)
; --> FORMAT FORMATTER FUNCTION BLOCK LET 
; ==>
;   (SB-FORMAT::FORMAT-FIXED STREAM #:FORMAT-ARG-96 #:G679 #:G680 #:G681 #:G682
;                            #:G683 NIL)
; 
; note: doing float to pointer coercion (cost 13) from #:LOOP-SUM-9

;     (FORMAT T "~,9f~aHarmonic~%"
;           (LOOP FOR K FIXNUM FROM 1 TO N SUM (/ 1.0d0 (COERCE K 'DOUBLE-FLOAT))
;                 DOUBLE-FLOAT)
;           #\Tab)
; --> FORMAT FORMATTER FUNCTION BLOCK LET 
; ==>
;   (SB-FORMAT::FORMAT-FIXED STREAM #:FORMAT-ARG-113 #:G679 #:G680 #:G681 #:G682
;                            #:G683 NIL)
; 
; note: doing float to pointer coercion (cost 13) from #:LOOP-SUM-11

;     (FORMAT T "~,9f~aRiemann Zeta~%"
;           (LOOP FOR K FIXNUM FROM 1 TO N SUM
;                 (LET ((KD #))
;                   (/ 1.0d0 (* KD KD)))
;                 DOUBLE-FLOAT)
;           #\Tab)
; --> FORMAT FORMATTER FUNCTION BLOCK LET 
; ==>
;   (SB-FORMAT::FORMAT-FIXED STREAM #:FORMAT-ARG-130 #:G679 #:G680 #:G681 #:G682
;                            #:G683 NIL)
; 
; note: doing float to pointer coercion (cost 13) from #:LOOP-SUM-13

;     (FORMAT T "~,9f~aAlternating Harmonic~%"
;           (LOOP WITH A DOUBLE-FLOAT = -1.0d0 FOR K FIXNUM FROM 1 TO ...) #\Tab)
; --> FORMAT FORMATTER FUNCTION BLOCK LET 
; ==>
;   (SB-FORMAT::FORMAT-FIXED STREAM #:FORMAT-ARG-147 #:G679 #:G680 #:G681 #:G682
;                            #:G683 NIL)
; 
; note: doing float to pointer coercion (cost 13) from #:LOOP-SUM-15

;     (FORMAT T "~,9f~aGregory~%"
;           (LOOP WITH A DOUBLE-FLOAT = -1.0d0 FOR K FIXNUM FROM 1 TO ...) #\Tab)
; --> FORMAT FORMATTER FUNCTION BLOCK LET 
; ==>
;   (SB-FORMAT::FORMAT-FIXED STREAM #:FORMAT-ARG-164 #:G679 #:G680 #:G681 #:G682
;                            #:G683 NIL)
; 
; note: doing float to pointer coercion (cost 13) from #:LOOP-SUM-17
; 
; compilation unit finished
;   printed 11 notes


; /home/dunham/gp4/shootout/bench/partialsums/tmp/partialsums.sbcl-2.fasl written
; compilation finished in 0:00:00
[doing purification: roots handlers stack bindings static cleanup done]
[undoing binding stack and other enclosing state... done]
[saving current Lisp image into /home/dunham/gp4/shootout/bench/partialsums/tmp/sbcl.core:
writing 18775616 bytes from the read-only space at 0x01000000
writing 4377696 bytes from the static space at 0x05000000
writing 8192 bytes from the dynamic space at 0x09000000
done]
### START partialsums.sbcl-2.sbcl_run
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(main) (quit)
### END partialsums.sbcl-2.sbcl_run


=================================================================
COMMAND LINE (%A is single numeric argument):

 /usr/bin/sbcl --noinform --core sbcl.core --userinit /dev/null --sysinit /dev/null --load partialsums.sbcl-2.sbcl_run %A


PROGRAM OUTPUT
==============
3.000000000	(2/3)^k
3160.817621887	k^-0.5
0.999999600	1/k(k+1)
30.314541510	Flint Hills
42.995233998	Cookson Hills
15.309017155	Harmonic
1.644933667	Riemann Zeta
0.693146981	Alternating Harmonic
0.785398063	Gregory
