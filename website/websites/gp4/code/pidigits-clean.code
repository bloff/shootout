<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Diederik van Arkel</span>
<span class="com">*/</span>

<span class="kwa">module</span> pidigits

<span class="kwa">import</span> StdEnv<span class="sym">,</span> LanguageShootout<span class="sym">,</span> BigInt

Start world
   <span class="sym">#</span> n           <span class="sym">=</span> argi
   <span class="sym"># (</span>io<span class="sym">,</span>world<span class="sym">)  =</span> stdio world
   <span class="sym">#</span> io          <span class="sym">=</span> digit <span class="num">1</span> <span class="sym">(</span>toBigInt <span class="num">1</span><span class="sym">,</span>toBigInt <span class="num">0</span><span class="sym">,</span>toBigInt <span class="num">0</span><span class="sym">,</span>toBigInt <span class="num">1</span><span class="sym">)</span> n <span class="num">0 0</span> io
   <span class="sym"># (</span>err<span class="sym">,</span>world<span class="sym">) =</span> fclose io world
   <span class="sym">=</span> world

digit <span class="sym">::</span> <span class="kwb">Int</span> <span class="sym">(</span>BigInt<span class="sym">,</span>BigInt<span class="sym">,</span>BigInt<span class="sym">,</span>BigInt<span class="sym">)</span> <span class="kwb">Int Int Int</span> <span class="sym">*</span><span class="kwb">File</span> <span class="sym">-&gt; *</span><span class="kwb">File</span>
digit k z <span class="num">0</span> row col io
   <span class="sym">=</span> io &lt;&lt;&lt; toString <span class="sym">(</span>repeatn <span class="sym">(</span><span class="num">10</span><span class="sym">-</span>col<span class="sym">)</span> ' '<span class="sym">)</span> &lt;&lt;&lt; <span class="str">&quot;\t:&quot;</span> &lt;&lt;&lt; <span class="sym">(</span>row<span class="sym">+</span>col<span class="sym">)</span> &lt;&lt;&lt; <span class="str">&quot;\n&quot;</span>
digit k z n row col io
   <span class="sym">|</span> safe z y
      <span class="sym">|</span> col <span class="sym">==</span> <span class="num">10</span>
         <span class="sym">#</span> row` <span class="sym">=</span> row <span class="sym">+</span> <span class="num">10</span>
         <span class="sym">#</span> io   <span class="sym">=</span> io &lt;&lt;&lt; <span class="str">&quot;\t:&quot;</span> &lt;&lt;&lt; row` &lt;&lt;&lt; <span class="str">&quot;\n&quot;</span> &lt;&lt;&lt; toString y
         <span class="sym">=</span> digit k <span class="sym">(</span>prod z y<span class="sym">) (</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> row` <span class="num">1</span> io
         <span class="sym">#</span> io <span class="sym">=</span> io &lt;&lt;&lt; toString y
         <span class="sym">=</span> digit k <span class="sym">(</span>prod z y<span class="sym">) (</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> row <span class="sym">(</span>col<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> io
      <span class="sym">=</span> digit <span class="sym">(</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">) (</span>cons z k<span class="sym">)</span> n row col io
<span class="kwa">where</span>
   y <span class="sym">=</span> next z
   prod z n <span class="sym">=</span> comp <span class="sym">(</span>toBigInt <span class="num">10</span><span class="sym">,</span>toBigInt <span class="sym">-</span><span class="num">10</span> <span class="sym">*</span> n<span class="sym">,</span> toBigInt <span class="num">0</span><span class="sym">,</span> toBigInt <span class="num">1</span><span class="sym">)</span> z

floor_ev <span class="sym">:: (</span>BigInt<span class="sym">,</span>BigInt<span class="sym">,</span>BigInt<span class="sym">,</span>BigInt<span class="sym">)</span> BigInt <span class="sym">-&gt;</span> BigInt
floor_ev <span class="sym">(</span>q<span class="sym">,</span> r<span class="sym">,</span> s<span class="sym">,</span> t<span class="sym">)</span> x <span class="sym">= (</span>q<span class="sym">*</span>x <span class="sym">+</span> r<span class="sym">) / (</span>s<span class="sym">*</span>x <span class="sym">+</span> t<span class="sym">)</span>
comp <span class="sym">:: (</span>BigInt<span class="sym">,</span>BigInt<span class="sym">,</span>BigInt<span class="sym">,</span>BigInt<span class="sym">) (</span>BigInt<span class="sym">,</span>BigInt<span class="sym">,</span>BigInt<span class="sym">,</span>BigInt<span class="sym">) -&gt; (</span>BigInt<span class="sym">,</span>BigInt<span class="sym">,</span>BigInt<span class="sym">,</span>BigInt<span class="sym">)</span>
comp <span class="sym">(</span>q<span class="sym">,</span>r<span class="sym">,</span>s<span class="sym">,</span>t<span class="sym">) (</span>q`<span class="sym">,</span>r`<span class="sym">,</span>s`<span class="sym">,</span>t`<span class="sym">) = (</span>q<span class="sym">*</span>q` <span class="sym">+</span> r<span class="sym">*</span>s`<span class="sym">,</span> q<span class="sym">*</span>r` <span class="sym">+</span> r<span class="sym">*</span>t`<span class="sym">,</span> s<span class="sym">*</span>q` <span class="sym">+</span> t<span class="sym">*</span>s`<span class="sym">,</span> s<span class="sym">*</span>r` <span class="sym">+</span> t<span class="sym">*</span>t`<span class="sym">)</span>
next <span class="sym">:: (</span>BigInt<span class="sym">,</span>BigInt<span class="sym">,</span>BigInt<span class="sym">,</span>BigInt<span class="sym">) -&gt;</span> BigInt
next z <span class="sym">=</span> floor_ev z <span class="sym">(</span>toBigInt <span class="num">3</span><span class="sym">)</span>

safe z n <span class="sym">=</span> n <span class="sym">==</span> floor_ev z <span class="sym">(</span>toBigInt <span class="num">4</span><span class="sym">)</span>
cons z k <span class="sym">=</span> <span class="kwa">let</span> den <span class="sym">=</span> <span class="num">2</span><span class="sym">*</span>k<span class="sym">+</span><span class="num">1</span> <span class="kwa">in</span> comp z <span class="sym">(</span>toBigInt k<span class="sym">,</span> toBigInt <span class="sym">(</span><span class="num">2</span><span class="sym">*</span>den<span class="sym">),</span> toBigInt <span class="num">0</span><span class="sym">,</span> toBigInt den<span class="sym">)</span>
