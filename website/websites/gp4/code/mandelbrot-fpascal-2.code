<span class="com">{ The Great Computer Language Shootout
  http://shootout.alioth.debian.org

  contributed by Ales Katona
}</span>

<span class="kwa">program</span> mandelbrot<span class="sym">;

</span><span class="kwa">var</span> n<span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">,</span> i<span class="sym">,</span> bits<span class="sym">,</span>bit<span class="sym">:</span> <span class="kwb">Longint</span><span class="sym">;
</span>    Zr<span class="sym">,</span> Zi<span class="sym">,</span> Cr<span class="sym">,</span> Ci<span class="sym">,</span> tmp<span class="sym">:</span> <span class="kwb">Double</span><span class="sym">;
</span><span class="kwa">begin
</span>  Val<span class="sym">(</span>ParamStr<span class="sym">(</span><span class="num">1</span><span class="sym">),</span> n<span class="sym">,</span> y<span class="sym">);
</span>  writeln<span class="sym">(</span><span class="str">'P4'</span><span class="sym">);
</span>  writeln<span class="sym">(</span>n<span class="sym">,</span><span class="str">' '</span><span class="sym">,</span>n<span class="sym">);
</span>  <span class="kwa">for</span> y <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">to</span> n<span class="num">-1</span> <span class="kwa">do
  begin
</span>    bits <span class="sym">:=</span> <span class="num">255</span><span class="sym">;</span>  bit <span class="sym">:=</span> <span class="num">128</span><span class="sym">;
</span>    Ci <span class="sym">:=</span> <span class="num">2.0</span> <span class="sym">*</span> y <span class="sym">/</span> n <span class="num">- 1.0</span><span class="sym">;
</span>    <span class="kwa">for</span> x <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">to</span> n<span class="num">-1</span> <span class="kwa">do
    begin
</span>      Cr <span class="sym">:=</span> <span class="num">2.0</span> <span class="sym">*</span> x <span class="sym">/</span> n <span class="num">- 1.5</span><span class="sym">;

</span>      Zr <span class="sym">:=</span> Cr<span class="sym">;</span>  Zi <span class="sym">:=</span> Ci<span class="sym">;
</span>      <span class="kwa">for</span> i <span class="sym">:=</span> <span class="num">1</span> <span class="kwa">to</span> <span class="num">50</span> <span class="kwa">do
      begin
        if</span> Zr<span class="sym">*</span>Zr <span class="sym">+</span> Zi<span class="sym">*</span>Zi <span class="sym">&gt;</span> <span class="num">4.0</span> <span class="kwa">then begin
</span>          bits <span class="sym">:=</span> bits <span class="kwa">xor</span> bit<span class="sym">;
</span>          break<span class="sym">;
</span>        <span class="kwa">end</span><span class="sym">;
</span>        tmp <span class="sym">:=</span> Zr<span class="sym">*</span>Zr <span class="sym">-</span> Zi<span class="sym">*</span>Zi <span class="sym">+</span> Cr<span class="sym">;
</span>        Zi <span class="sym">:=</span> <span class="num">2</span><span class="sym">*</span>Zr<span class="sym">*</span>Zi <span class="sym">+</span> Ci<span class="sym">;
</span>        Zr <span class="sym">:=</span> tmp<span class="sym">;
</span>      <span class="kwa">end</span><span class="sym">;

</span>      <span class="kwa">if</span> bit <span class="sym">&gt;</span> <span class="num">1</span> <span class="kwa">then</span> bit <span class="sym">:=</span> bit <span class="kwa">shr</span> <span class="num">1</span> <span class="kwa">else
      begin
</span>        write<span class="sym">(</span>chr<span class="sym">(</span>bits<span class="sym">));
</span>        bits <span class="sym">:=</span> <span class="num">255</span><span class="sym">;</span>  bit <span class="sym">:=</span> <span class="num">128</span><span class="sym">;
</span>      <span class="kwa">end</span><span class="sym">;
</span>    <span class="kwa">end</span><span class="sym">;
</span>    <span class="kwa">if</span> bit <span class="sym">&lt;</span> <span class="num">128</span> <span class="kwa">then</span> write<span class="sym">(</span>chr<span class="sym">(</span>bits <span class="kwa">xor</span><span class="sym">((</span>bit <span class="kwa">shl</span> <span class="num">1</span><span class="sym">)-</span><span class="num">1</span><span class="sym">)));
</span>  <span class="kwa">end</span><span class="sym">;
</span><span class="kwa">end</span>.
