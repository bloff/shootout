<span class="hl slc">#!/usr/bin/env ruby</span>
<span class="hl slc">#  The Great Computer Language Shootout</span>
<span class="hl slc">#  http://shootout.alioth.debian.org/</span>
<span class="hl slc">#</span>
<span class="hl slc">#  contributed by Karl von Laudermann</span>
<span class="hl slc">#</span>
<span class="hl slc">#  mandelbrot.rb 400 &gt; out.pbm</span>

size <span class="hl sym">=</span> <span class="hl kwc">ARGV</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">].</span>to_i

puts <span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">#{size} #{size}&quot;</span>

iter <span class="hl sym">=</span> <span class="hl num">50</span>
limit <span class="hl sym">=</span> <span class="hl num">2.0</span>
byte_acc <span class="hl sym">=</span> <span class="hl num">0</span>
bit_num <span class="hl sym">=</span> <span class="hl num">0</span>

size<span class="hl sym">.</span>times <span class="hl kwa">do</span> <span class="hl sym">|</span>y<span class="hl sym">|</span>
     size<span class="hl sym">.</span>times <span class="hl kwa">do</span> <span class="hl sym">|</span>x<span class="hl sym">|</span>
         zr <span class="hl sym">=</span> <span class="hl num">0.0</span>
         zi <span class="hl sym">=</span> <span class="hl num">0.0</span>
         cr <span class="hl sym">= (</span><span class="hl num">2.0</span><span class="hl sym">*</span>x<span class="hl sym">/</span>size<span class="hl sym">)-</span><span class="hl num">1.5</span>
         ci <span class="hl sym">= (</span><span class="hl num">2.0</span><span class="hl sym">*</span>y<span class="hl sym">/</span>size<span class="hl sym">)-</span><span class="hl num">1.0</span>
         escape <span class="hl sym">=</span> <span class="hl kwa">false</span>

         iter<span class="hl sym">.</span>times <span class="hl kwa">do</span>
            tr <span class="hl sym">=</span> zr<span class="hl sym">*</span>zr <span class="hl sym">-</span> zi<span class="hl sym">*</span>zi <span class="hl sym">+</span> cr
            ti <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">*</span>zr<span class="hl sym">*</span>zi <span class="hl sym">+</span> ci
            zr<span class="hl sym">,</span> zi <span class="hl sym">=</span> tr<span class="hl sym">,</span> ti

            <span class="hl kwa">if</span> <span class="hl sym">(</span>zr<span class="hl sym">*</span>zr<span class="hl sym">+</span>zi<span class="hl sym">*</span>zi<span class="hl sym">) &gt; (</span>limit<span class="hl sym">*</span>limit<span class="hl sym">)</span>
                escape <span class="hl sym">=</span> <span class="hl kwa">true</span>
                <span class="hl kwa">break</span>
            <span class="hl kwa">end</span>
         <span class="hl kwa">end</span>

         byte_acc <span class="hl sym">= (</span>byte_acc <span class="hl sym">&lt;&lt;</span> <span class="hl num">1</span><span class="hl sym">) | (</span>escape <span class="hl sym">?</span> <span class="hl num">0b0</span> <span class="hl sym">:</span> <span class="hl num">0b1</span><span class="hl sym">)</span>
         bit_num <span class="hl sym">+=</span> <span class="hl num">1</span>

         <span class="hl kwa">if</span> <span class="hl sym">(</span>bit_num <span class="hl sym">==</span> <span class="hl num">8</span><span class="hl sym">) || (</span>x <span class="hl sym">==</span> size <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span>
             byte_acc <span class="hl sym">&lt;&lt;= (</span><span class="hl num">8</span> <span class="hl sym">-</span> bit_num<span class="hl sym">)</span>
             print byte_acc<span class="hl sym">.</span>chr
             byte_acc <span class="hl sym">=</span> <span class="hl num">0</span>
             bit_num <span class="hl sym">=</span> <span class="hl num">0</span>
         <span class="hl kwa">end</span>
     <span class="hl kwa">end</span>
<span class="hl kwa">end</span>
