<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;</span>
<span class="hl slc">;; Derived by Michael D. Adams from the MzScheme variant</span>

<span class="hl sym">(</span>import <span class="hl sym">(</span>rnrs<span class="hl sym">) (</span>only <span class="hl sym">(</span>rnrs r5rs<span class="hl sym">)</span> quotient<span class="hl sym">))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>floor_ev q r s t x<span class="hl sym">)</span>
  <span class="hl sym">(</span>div <span class="hl sym">(+ (*</span> q x<span class="hl sym">)</span> r<span class="hl sym">) (+ (*</span> s x<span class="hl sym">)</span> t<span class="hl sym">)))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>comp q r s t  q2 r2 s2 t2<span class="hl sym">)</span>
  <span class="hl sym">(</span>values <span class="hl sym">(+ (*</span> q q2<span class="hl sym">) (*</span> r s2<span class="hl sym">))</span>
          <span class="hl sym">(+ (*</span> q r2<span class="hl sym">) (*</span> r t2<span class="hl sym">))</span>
          <span class="hl sym">(+ (*</span> s q2<span class="hl sym">) (*</span> t s2<span class="hl sym">))</span>
          <span class="hl sym">(+ (*</span> s r2<span class="hl sym">) (*</span> t t2<span class="hl sym">))))</span>

<span class="hl sym">(</span>define out <span class="hl sym">(</span>current-output-port<span class="hl sym">))</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>next q r s t<span class="hl sym">) (</span>floor_ev q r s t <span class="hl num">3</span><span class="hl sym">))</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>safe? q r s t n<span class="hl sym">) (=</span> n <span class="hl sym">(</span>floor_ev q r s t <span class="hl num">4</span><span class="hl sym">)))</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>prod q r s t n<span class="hl sym">) (</span>comp <span class="hl num">10</span> <span class="hl sym">(</span>fx<span class="hl sym">*</span> -<span class="hl num">10</span> n<span class="hl sym">)</span> <span class="hl num">0 1</span>  q r s t<span class="hl sym">))</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>mk q r s t k<span class="hl sym">) (</span>comp q r s t k <span class="hl sym">(</span>fx<span class="hl sym">*</span> <span class="hl num">2</span> <span class="hl sym">(</span>fx<span class="hl sym">+</span> <span class="hl num">1</span> <span class="hl sym">(</span>fx<span class="hl sym">*</span> <span class="hl num">2</span> k<span class="hl sym">)))</span> <span class="hl num">0</span> <span class="hl sym">(</span>fx<span class="hl sym">+</span> <span class="hl num">1</span> <span class="hl sym">(</span>fx<span class="hl sym">*</span> <span class="hl num">2</span> k<span class="hl sym">))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>digit k q r s t n row col<span class="hl sym">)</span>
  <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(&gt;</span> n <span class="hl num">0</span><span class="hl sym">)</span>
      <span class="hl sym">(</span>let <span class="hl sym">([</span>y <span class="hl sym">(</span>next q r s t<span class="hl sym">)])</span>
        <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>safe? q r s t y<span class="hl sym">)</span>
            <span class="hl sym">(</span>let-values <span class="hl sym">([(</span>q r s t<span class="hl sym">) (</span>prod q r s t y<span class="hl sym">)])</span>
                        <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(=</span> col <span class="hl num">10</span><span class="hl sym">)</span>
                            <span class="hl sym">(</span>let <span class="hl sym">([</span>row <span class="hl sym">(</span>fx<span class="hl sym">+</span> row <span class="hl num">10</span><span class="hl sym">)])</span>
                              <span class="hl sym">(</span>put-string out <span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">:&quot;</span><span class="hl sym">) (</span>put-datum out row<span class="hl sym">)</span>
                              <span class="hl sym">(</span>put-string out <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">) (</span>put-datum out y<span class="hl sym">)</span>
                              <span class="hl sym">(</span>digit k q r s t <span class="hl sym">(</span>fx- n <span class="hl num">1</span><span class="hl sym">)</span> row <span class="hl num">1</span><span class="hl sym">))</span>
                            <span class="hl sym">(</span>begin
                              <span class="hl sym">(</span>put-datum out y<span class="hl sym">)</span>
                              <span class="hl sym">(</span>digit k q r s t <span class="hl sym">(</span>fx- n <span class="hl num">1</span><span class="hl sym">)</span> row <span class="hl sym">(</span>fx<span class="hl sym">+</span> <span class="hl num">1</span> col<span class="hl sym">)))))</span>
            <span class="hl sym">(</span>let-values <span class="hl sym">([(</span>q r s t<span class="hl sym">) (</span>mk q r s t k<span class="hl sym">)])</span>
                        <span class="hl sym">(</span>digit <span class="hl sym">(</span>fx<span class="hl sym">+</span> <span class="hl num">1</span> k<span class="hl sym">)</span> q r s t n row col<span class="hl sym">))))</span>
      <span class="hl sym">(</span>begin
        <span class="hl sym">(</span>put-string out <span class="hl sym">(</span>make-string <span class="hl sym">(</span>fx- <span class="hl num">10</span> col<span class="hl sym">)</span> #\space<span class="hl sym">)) (</span>put-string out <span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">:&quot;</span><span class="hl sym">)</span>
        <span class="hl sym">(</span>put-datum out <span class="hl sym">(+</span> row col<span class="hl sym">)) (</span>put-char out #\newline<span class="hl sym">))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>digits n<span class="hl sym">)</span>
  <span class="hl sym">(</span>digit <span class="hl num">1 1 0 0 1</span> n <span class="hl num">0 0</span><span class="hl sym">))</span>

<span class="hl sym">(</span>digits <span class="hl sym">(</span>string-<span class="hl sym">&gt;</span>number <span class="hl sym">(</span><span class="hl kwa">cadr</span> <span class="hl sym">(</span><span class="hl kwa">command</span>-<span class="hl kwa">line</span><span class="hl sym">))))</span>
<span class="hl sym">(</span>flush-output-port out<span class="hl sym">)</span>
