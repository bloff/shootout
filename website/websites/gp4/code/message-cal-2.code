<span class="hl com">/**</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * Based on the CAL Open Quark version</span>
<span class="hl com"> * Contributed by Magnus Byne.</span>
<span class="hl com"> */</span>
<span class="hl kwa">module</span> Message<span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Prelude <span class="hl kwa">using</span>
    <span class="hl kwa">typeConstructor</span> <span class="hl sym">=</span> Int<span class="hl sym">,</span> String<span class="hl sym">,</span> JObject<span class="hl sym">,</span> Boolean<span class="hl sym">;</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span>
        eager<span class="hl sym">,</span> error<span class="hl sym">,</span> intToString<span class="hl sym">,</span> seq<span class="hl sym">,</span> stringToInt<span class="hl sym">,</span> unsafeFromCalValue<span class="hl sym">,</span>
        toCalValue<span class="hl sym">,</span> input<span class="hl sym">,</span> output<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>IO<span class="hl sym">.</span>Console <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> printLine<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Collections<span class="hl sym">.</span>List <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> head<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Experimental<span class="hl sym">.</span>Concurrent<span class="hl sym">.</span>Parallel <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> par<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>System <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> concurrentRuntime<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl com">/** this value is used to tell the workers to end */</span>
end <span class="hl sym">::</span> Int<span class="hl sym">;</span>
end <span class="hl sym">= -</span><span class="hl num">1</span><span class="hl sym">;</span>

<span class="hl com">/**</span>
<span class="hl com"> * an indivual worker which takes values from the upstream queue, adds one, and</span>
<span class="hl com"> * puts them on the downstream queue.</span>
<span class="hl com"> */</span>
worker <span class="hl sym">::</span> MutableVariable Int <span class="hl sym">-&gt;</span> MutableVariable Int <span class="hl sym">-&gt; ();</span>
worker <span class="hl sym">!</span>inq <span class="hl sym">!</span>outq <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        input <span class="hl sym">::</span> Int<span class="hl sym">;</span>
        input <span class="hl sym">=</span> eager $ takeMutableVariable inq<span class="hl sym">;</span>
    <span class="hl kwa">in</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>input <span class="hl sym">==</span> end<span class="hl sym">)</span> <span class="hl kwa">then</span>
            putMutableVariable outq end
            <span class="hl sym">`</span>seq<span class="hl sym">`</span>
            <span class="hl sym">()</span>
        <span class="hl kwa">else</span>
            <span class="hl sym">(</span>
                putMutableVariable outq <span class="hl sym">(</span>input <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
                <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                worker inq outq
            <span class="hl sym">)</span>
    <span class="hl sym">;</span>

<span class="hl com">/**</span>
<span class="hl com"> * create a chain of worker functions running in parallel this is done using</span>
<span class="hl com"> * the par function.</span>
<span class="hl com"> */</span>
createChain <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> MutableVariable Int <span class="hl sym">-&gt;</span> MutableVariable Int<span class="hl sym">;</span>
createChain <span class="hl sym">!</span>length <span class="hl sym">!</span>input <span class="hl sym">=</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>length <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">then</span>
        input
    <span class="hl kwa">else</span>
        <span class="hl sym">(</span>
            <span class="hl kwa">let</span>
                output <span class="hl sym">::</span> MutableVariable Int<span class="hl sym">;</span>
                output <span class="hl sym">=</span> makeMutableVariable <span class="hl sym">();</span>
            <span class="hl kwa">in</span>
                worker input output
                <span class="hl sym">`</span>par<span class="hl sym">`</span>
                createChain <span class="hl sym">(</span>length <span class="hl sym">- (</span><span class="hl num">1</span> <span class="hl sym">::</span> Int<span class="hl sym">))</span> output
        <span class="hl sym">)</span>
    <span class="hl sym">;</span>

main <span class="hl sym">:: [</span>String<span class="hl sym">] -&gt; ();</span>
<span class="hl kwa">public</span> main <span class="hl sym">!</span>args <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        n <span class="hl sym">::</span> Int<span class="hl sym">;</span>
        n <span class="hl sym">=</span> eager $ stringToInt <span class="hl sym">(</span>head args<span class="hl sym">);</span>

        inq <span class="hl sym">::</span> MutableVariable Int<span class="hl sym">;</span>
        inq <span class="hl sym">=</span> eager $ makeMutableVariable <span class="hl sym">();</span>

        outq <span class="hl sym">::</span> MutableVariable Int<span class="hl sym">;</span>
        outq <span class="hl sym">=</span> eager $ createChain <span class="hl sym">(</span><span class="hl num">500</span> <span class="hl sym">::</span> Int<span class="hl sym">)</span> inq<span class="hl sym">;</span>

        <span class="hl com">/** this feeds n 0's into the first queue */</span>
        feedQueue <span class="hl sym">::</span> Int <span class="hl sym">-&gt; ();</span>
        feedQueue n <span class="hl sym">=</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>n <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">then</span>
                putMutableVariable inq end
            <span class="hl kwa">else</span>
                putMutableVariable inq <span class="hl sym">(</span><span class="hl num">0</span> <span class="hl sym">::</span> Int<span class="hl sym">)</span>
                <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                feedQueue <span class="hl sym">(</span>n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span>
            <span class="hl sym">;</span>

        <span class="hl com">/** this collects n values from the last queue */</span>
        sumResult <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>
        sumResult <span class="hl sym">!</span>n <span class="hl sym">!</span>sum <span class="hl sym">=</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>n <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">then</span>
                sum
            <span class="hl kwa">else</span>
                sumResult <span class="hl sym">(</span>n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">) (</span>sum <span class="hl sym">+ (</span>takeMutableVariable outq<span class="hl sym">))</span>
            <span class="hl sym">;</span>
    <span class="hl kwa">in</span>
        <span class="hl sym">(</span>
            <span class="hl kwa">if</span> concurrentRuntime <span class="hl kwa">then</span>
                <span class="hl sym">()</span>
            <span class="hl kwa">else</span>
                error
                    <span class="hl str">&quot;You must define the VM arg org.openquark.cal.machine.lecc.concurrent_runtime to run this program&quot;</span>
        <span class="hl sym">)</span>
        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
        feedQueue n
        <span class="hl sym">`</span>par<span class="hl sym">`</span>
        printLine <span class="hl sym">(</span>intToString $ sumResult n <span class="hl num">0</span><span class="hl sym">)</span>
    <span class="hl sym">;</span>

<span class="hl slc">//////////////////////////////////////////////////////////////////////</span>
<span class="hl slc">// This implements MutableVariable, similar to m-structures in Id.</span>

<span class="hl com">/**</span>
<span class="hl com"> * MutableVariable represent a value that can be passed between threads using</span>
<span class="hl com"> * put and take. It has the same semantics as a BlockableQueue of length 1.</span>
<span class="hl com"> */</span>
<span class="hl kwa">data public</span> MutableVariable a <span class="hl sym">=</span>
    <span class="hl kwa">private</span> MutableVariable atomicRef <span class="hl sym">:: !</span>AtomicReference
    <span class="hl sym">;</span>

<span class="hl com">/** make a new mutable variable */</span>
makeMutableVariable <span class="hl sym">:: () -&gt;</span> MutableVariable a<span class="hl sym">;</span>
<span class="hl kwa">public</span> makeMutableVariable <span class="hl sym">!</span>unused <span class="hl sym">=</span> MutableVariable createAtomicReference<span class="hl sym">;</span>

<span class="hl com">/**</span>
<span class="hl com"> * Put a value into a mutable variable. If the variable is not empty this</span>
<span class="hl com"> * function will block.</span>
<span class="hl com"> */</span>
putMutableVariable <span class="hl sym">::</span> MutableVariable a <span class="hl sym">-&gt;</span> a <span class="hl sym">-&gt; ();</span>
<span class="hl kwa">public</span> putMutableVariable <span class="hl sym">!</span>mutable <span class="hl sym">!</span>value <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        put <span class="hl sym">::</span> AtomicReference <span class="hl sym">-&gt;</span> JObject <span class="hl sym">-&gt; ();</span>
        put <span class="hl sym">!</span>ref <span class="hl sym">!</span>value <span class="hl sym">=</span>
            <span class="hl kwa">if</span> compareAndSet ref null value <span class="hl kwa">then</span>
                <span class="hl sym">()</span>
            <span class="hl kwa">else</span>
                yield
                <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                put ref value
            <span class="hl sym">;</span>
    <span class="hl kwa">in</span>
        <span class="hl kwa">case</span> mutable <span class="hl kwa">of</span>
        MutableVariable <span class="hl sym">{</span>atomicRef<span class="hl sym">} -&gt;</span>
            put atomicRef <span class="hl sym">(</span>output <span class="hl sym">(</span>toCalValue value<span class="hl sym">));</span>
    <span class="hl sym">;</span>

<span class="hl com">/**</span>
<span class="hl com"> * take a value from a mutable variable, if the there is no value in the</span>
<span class="hl com"> * variable this will block.</span>
<span class="hl com"> */</span>
takeMutableVariable <span class="hl sym">::</span> MutableVariable a <span class="hl sym">-&gt;</span> a<span class="hl sym">;</span>
<span class="hl kwa">public</span> takeMutableVariable <span class="hl sym">!</span>mutable <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        take <span class="hl sym">::</span> AtomicReference <span class="hl sym">-&gt;</span> JObject<span class="hl sym">;</span>
        take <span class="hl sym">!</span>atomicRef <span class="hl sym">=</span>
            <span class="hl kwa">let</span>
                value <span class="hl sym">=</span> eager $ getAndSet atomicRef null<span class="hl sym">;</span>
            <span class="hl kwa">in</span>
                <span class="hl kwa">if</span> isNull value <span class="hl kwa">then</span>
                    yield
                    <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                    take atomicRef
                <span class="hl kwa">else</span>
                    value
            <span class="hl sym">;</span>
    <span class="hl kwa">in</span>
        <span class="hl kwa">case</span> mutable <span class="hl kwa">of</span>
        MutableVariable <span class="hl sym">{</span>atomicRef<span class="hl sym">} -&gt;</span>
            unsafeFromCalValue $ input $ take atomicRef<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">data foreign unsafe import jvm</span> <span class="hl str">&quot;java.util.concurrent.atomic.AtomicReference&quot;</span>
    <span class="hl kwa">private</span> AtomicReference<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;constructor&quot;</span>
    <span class="hl kwa">private</span> createAtomicReference <span class="hl sym">::</span> AtomicReference<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;method weakCompareAndSet&quot;</span>
    <span class="hl kwa">private</span> compareAndSet <span class="hl sym">::</span> AtomicReference <span class="hl sym">-&gt;</span> JObject <span class="hl sym">-&gt;</span> JObject <span class="hl sym">-&gt;</span> Boolean<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;method getAndSet&quot;</span>
    <span class="hl kwa">private</span> getAndSet <span class="hl sym">::</span> AtomicReference <span class="hl sym">-&gt;</span> JObject <span class="hl sym">-&gt;</span> JObject<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;static method java.lang.Thread.yield&quot;</span>
    <span class="hl kwa">private</span> yield <span class="hl sym">:: ();</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;isNull&quot;</span> <span class="hl kwa">private</span> isNull <span class="hl sym">::</span> JObject <span class="hl sym">-&gt;</span> Boolean<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;null&quot;</span> <span class="hl kwa">private</span> null <span class="hl sym">::</span> JObject<span class="hl sym">;</span>
