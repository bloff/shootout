<span class="slc">-- $Id: nsieve-ghc-3.code,v 1.4 2006-02-14 19:12:39 igouy-guest Exp $</span>
<span class="slc">-- Written by Einar Karttunen, shortened by Don Stewart</span>

<span class="kwa">import</span> Data.Array.IO<span class="sym">;</span> <span class="kwa">import</span> Data.Array.Base<span class="sym">;</span> <span class="kwa">import</span> Data.Bits<span class="sym">;</span> <span class="kwa">import</span> System<span class="sym">;</span> <span class="kwa">import</span> Text.Printf

loop arr m n c <span class="sym">=</span> if n <span class="sym">==</span> m <span class="kwa">then</span> return c <span class="kwa">else do</span>
    el <span class="sym">&lt;-</span> unsafeRead arr n
    if el <span class="kwa">then do</span> mapM_ <span class="sym">(</span>flip <span class="sym">(</span>unsafeWrite arr<span class="sym">)</span> <span class="kwa">False</span><span class="sym">) (</span>tail <span class="sym">[</span>n<span class="sym">,</span>n<span class="sym">+</span>n..m<span class="sym">])</span>
                  loop arr m <span class="sym">(</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> $<span class="sym">!</span> c <span class="sym">+</span> <span class="num">1</span>
          <span class="kwa">else</span> loop <span class="sym">(</span>arr <span class="sym">::</span> IOUArray <span class="kwb">Int Bool</span><span class="sym">)</span> m <span class="sym">(</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> c

sieve m <span class="sym">=</span> <span class="kwa">do</span> c <span class="sym">&lt;-</span> newArray <span class="sym">(</span><span class="num">2</span><span class="sym">,</span>m<span class="sym">)</span> <span class="kwa">True</span> <span class="sym">&gt;&gt;=</span> \a <span class="sym">-&gt;</span> loop a m <span class="num">2 0</span>
             printf <span class="str">&quot;Primes up to %8d %8d\n&quot;</span> <span class="sym">(</span>m<span class="sym">::</span><span class="kwb">Int</span><span class="sym">) (</span>c<span class="sym">::</span><span class="kwb">Int</span><span class="sym">) ::</span> IO <span class="sym">()</span>

main <span class="sym">= (</span>\n <span class="sym">-&gt;</span> mapM_ <span class="sym">(</span>sieve.<span class="sym">(</span><span class="num">10000</span> <span class="sym">*)</span>.shiftL <span class="num">1</span><span class="sym">) [</span>n<span class="sym">,</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>n<span class="sym">-</span><span class="num">2</span><span class="sym">])</span> . read . head <span class="sym">=&lt;&lt;</span> getArgs

