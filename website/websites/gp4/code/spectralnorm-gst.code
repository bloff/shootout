<span class="str">&quot;  The Great Computer Language Shootout</span>
<span class="str">   http://shootout.alioth.debian.org/</span>
<span class="str"></span>
<span class="str">   contributed by Isaac Gouy</span>
<span class="str"></span>
<span class="str">   To run: gst -QI /usr/share/gnu-smalltalk/gst.im spectralnorm.st -a 100</span>
<span class="str">&quot;</span>

<span class="sym">!</span>Integer methodsFor<span class="sym">:</span> <span class="str">'spectral-norm'</span><span class="sym">!</span>

matrixA<span class="sym">:</span> anInteger
<span class="str">&quot;fixup one-based indexing to zero-based indexing - cleanup later&quot;</span>
   <span class="sym">|</span> i j <span class="sym">|</span>
   i <span class="sym">:=</span> self <span class="sym">-</span> <span class="num">1</span>.
   j <span class="sym">:=</span> anInteger <span class="sym">-</span> <span class="num">1</span>.
   ^<span class="num">1.0</span>d <span class="sym">/ (</span>i <span class="sym">+</span> j <span class="sym">* (</span>i <span class="sym">+</span> j <span class="sym">+</span> <span class="num">1</span><span class="sym">) /</span><span class="num">2</span>  <span class="sym">+</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span> asFloatD <span class="sym">! !</span>


<span class="sym">!</span>Array methodsFor<span class="sym">:</span> <span class="str">'spectral-norm'</span><span class="sym">!</span>

multiplyAv
   <span class="sym">|</span> n av <span class="sym">|</span>
   n <span class="sym">:=</span> self size.
   av <span class="sym">:=</span> Array new<span class="sym">:</span> n withAll<span class="sym">:</span> <span class="num">0.0</span>d.
   <span class="num">1</span> to<span class="sym">:</span> n <span class="kwa">do</span><span class="sym">: [:</span>i<span class="sym">|</span>
      <span class="num">1</span> to<span class="sym">:</span> n <span class="kwa">do</span><span class="sym">: [:</span>j<span class="sym">|</span>
         av at<span class="sym">:</span> i put<span class="sym">: (</span>av at<span class="sym">:</span> i<span class="sym">) + ((</span>i matrixA<span class="sym">:</span> j<span class="sym">) * (</span>self at<span class="sym">:</span> j<span class="sym">)) ]]</span>.
   ^av <span class="sym">!</span>

multiplyAtv
   <span class="sym">|</span> n atv <span class="sym">|</span>
   n <span class="sym">:=</span> self size.
   atv <span class="sym">:=</span> Array new<span class="sym">:</span> n withAll<span class="sym">:</span> <span class="num">0.0</span>d.
   <span class="num">1</span> to<span class="sym">:</span> n <span class="kwa">do</span><span class="sym">: [:</span>i<span class="sym">|</span>
      <span class="num">1</span> to<span class="sym">:</span> n <span class="kwa">do</span><span class="sym">: [:</span>j<span class="sym">|</span>
         atv at<span class="sym">:</span> i put<span class="sym">: (</span>atv at<span class="sym">:</span> i<span class="sym">) + ((</span>j matrixA<span class="sym">:</span> i<span class="sym">) * (</span>self at<span class="sym">:</span> j<span class="sym">)) ]]</span>.
   ^atv <span class="sym">!</span>

multiplyAtAv
   ^<span class="sym">(</span>self multiplyAv<span class="sym">)</span> multiplyAtv <span class="sym">! !</span>


<span class="sym">!</span>Float methodsFor<span class="sym">:</span> <span class="str">'printing'</span><span class="sym">!</span>

printStringRoundedTo<span class="sym">:</span> anInteger
   <span class="sym">|</span> n s <span class="sym">|</span>
   n <span class="sym">:=</span> <span class="num">0.5</span>d <span class="sym">* (</span><span class="num">10</span> raisedToInteger<span class="sym">:</span> anInteger negated<span class="sym">)</span>.
   s <span class="sym">:= ((</span>self sign <span class="sym">&lt;</span> <span class="num">0</span><span class="sym">)</span> ifTrue<span class="sym">: [</span>self <span class="sym">-</span> n<span class="sym">]</span> ifFalse<span class="sym">: [</span>self <span class="sym">+</span> n<span class="sym">])</span> printString.
   ^s copyFrom<span class="sym">:</span> <span class="num">1</span> to<span class="sym">: (</span>s indexOf<span class="sym">: $</span>.<span class="sym">) +</span> anInteger <span class="sym">! !</span>


<span class="sym">|</span> n u v vBv vv <span class="sym">|</span>
n <span class="sym">:=</span> Smalltalk arguments first asInteger.
u <span class="sym">:=</span> Array new<span class="sym">:</span> n withAll<span class="sym">:</span> <span class="num">1.0</span>d.
v <span class="sym">:=</span> Array new<span class="sym">:</span> n withAll<span class="sym">:</span> <span class="num">0.0</span>d.

<span class="num">1</span> to<span class="sym">:</span> <span class="num">10</span> <span class="kwa">do</span><span class="sym">: [:</span>i<span class="sym">|</span>
   v <span class="sym">:=</span> u multiplyAtAv.
   u <span class="sym">:=</span> v multiplyAtAv.
<span class="sym">]</span>.

vBv <span class="sym">:=</span> <span class="num">0.0</span>d.
vv <span class="sym">:=</span> <span class="num">0.0</span>d.
<span class="num">1</span> to<span class="sym">:</span> n <span class="kwa">do</span><span class="sym">: [:</span>i<span class="sym">|</span>
   vBv <span class="sym">:=</span> vBv <span class="sym">+ ((</span>u at<span class="sym">:</span> i<span class="sym">) * (</span>v at<span class="sym">:</span> i<span class="sym">))</span>.
   vv <span class="sym">:=</span> vv <span class="sym">+ ((</span>v at<span class="sym">:</span> i<span class="sym">) * (</span>v at<span class="sym">:</span> i<span class="sym">))</span>.
<span class="sym">]</span>.

<span class="sym">((</span>vBv<span class="sym">/</span>vv<span class="sym">)</span> sqrt printStringRoundedTo<span class="sym">:</span> <span class="num">9</span><span class="sym">)</span> displayNl <span class="sym">!</span>
