<span class="com">&quot;  The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com"></span>
<span class="com">   To run: gst -QI /usr/share/gnu-smalltalk/gst.im spectralnorm.st -a 100</span>
<span class="com">&quot;</span>
<span class="com"></span>
<span class="com">!Integer methodsFor: 'spectral-norm'!</span>
<span class="com"></span>
<span class="com">matrixA: anInteger</span>
<span class="com">&quot;fixup one-based indexing to zero-based indexing - cleanup later&quot;</span>
<span class="com">   | i j |</span>
<span class="com">   i := self - 1.</span>
<span class="com">   j := anInteger - 1.</span>
<span class="com">   ^1.0d / (i + j * (i + j + 1) /2  + i + 1) asFloatD ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">!Array methodsFor: 'spectral-norm'!</span>
<span class="com"></span>
<span class="com">multiplyAv</span>
<span class="com">   | n av |</span>
<span class="com">   n := self size.</span>
<span class="com">   av := Array new: n withAll: 0.0d.</span>
<span class="com">   1 to: n do: [:i|</span>
<span class="com">      1 to: n do: [:j|</span>
<span class="com">         av at: i put: (av at: i) + ((i matrixA: j) * (self at: j)) ]].</span>
<span class="com">   ^av !</span>
<span class="com"></span>
<span class="com">multiplyAtv</span>
<span class="com">   | n atv |</span>
<span class="com">   n := self size.</span>
<span class="com">   atv := Array new: n withAll: 0.0d.</span>
<span class="com">   1 to: n do: [:i|</span>
<span class="com">      1 to: n do: [:j|</span>
<span class="com">         atv at: i put: (atv at: i) + ((j matrixA: i) * (self at: j)) ]].</span>
<span class="com">   ^atv !</span>
<span class="com"></span>
<span class="com">multiplyAtAv</span>
<span class="com">   ^(self multiplyAv) multiplyAtv ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">!Float methodsFor: 'printing'!</span>
<span class="com"></span>
<span class="com">printStringRoundedTo: anInteger</span>
<span class="com">   | n s |</span>
<span class="com">   n := 0.5d * (10 raisedToInteger: anInteger negated).</span>
<span class="com">   s := ((self sign &lt; 0) ifTrue: [self - n] ifFalse: [self + n]) printString.</span>
<span class="com">   ^s copyFrom: 1 to: (s indexOf: $.) + anInteger ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">| n u v vBv vv |</span>
<span class="com">n := Smalltalk arguments first asInteger.</span>
<span class="com">u := Array new: n withAll: 1.0d.</span>
<span class="com">v := Array new: n withAll: 0.0d.</span>
<span class="com"></span>
<span class="com">10 timesRepeat: [</span>
<span class="com">   v := u multiplyAtAv.</span>
<span class="com">   u := v multiplyAtAv.</span>
<span class="com">].</span>
<span class="com"></span>
<span class="com">vBv := 0.0d.</span>
<span class="com">vv := 0.0d.</span>
<span class="com">1 to: n do: [:i|</span>
<span class="com">   vBv := vBv + ((u at: i) * (v at: i)).</span>
<span class="com">   vv := vv + ((v at: i) * (v at: i)).</span>
<span class="com">].</span>
<span class="com"></span>
<span class="com">((vBv/vv) sqrt printStringRoundedTo: 9) displayNl !</span>
