<span class="hl com">&quot;* The Computer Language Benchmarks Game</span>
<span class="hl com">    http://shootout.alioth.debian.org/</span>
<span class="hl com">    contributed by Paolo Bonzini *&quot;</span><span class="hl sym">!</span>

<span class="hl com">&quot;* SPLITFILE=mandelbrot.st *&quot;</span><span class="hl sym">!</span>

Object subclass<span class="hl sym">:#</span>Tests
   instanceVariableNames<span class="hl sym">:</span><span class="hl str">''</span>
   classVariableNames<span class="hl sym">:</span><span class="hl str">''</span>
   poolDictionaries<span class="hl sym">:</span><span class="hl str">''</span>
   category<span class="hl sym">:</span><span class="hl str">'benchmarks-game'</span><span class="hl sym">!</span>

<span class="hl sym">!</span>Tests class methodsFor<span class="hl sym">:</span> <span class="hl str">'benchmarks-game'</span><span class="hl sym">!</span>mandelbrot<span class="hl sym">:</span> extent to<span class="hl sym">:</span> output   <span class="hl sym">|</span> limit2 m bits zr zi cr ci i tr stepr stepi <span class="hl sym">|</span>   limit2 <span class="hl sym">:=</span> <span class="hl num">4.0</span><span class="hl sym">.</span>
   m <span class="hl sym">:=</span> <span class="hl num">50</span><span class="hl sym">.</span>
   stepr <span class="hl sym">:=</span> <span class="hl num">2.0</span> <span class="hl sym">/</span> extent<span class="hl sym">.</span>
   stepi <span class="hl sym">:=</span> <span class="hl num">2.0</span> <span class="hl sym">/</span> extent<span class="hl sym">.</span>

   <span class="hl num">0</span> to<span class="hl sym">:</span> extent <span class="hl sym">-</span> <span class="hl num">1</span> do<span class="hl sym">: [ :</span>y <span class="hl sym">|</span>
       bits <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">.</span>
       ci <span class="hl sym">:=</span> stepi <span class="hl sym">*</span> y asFloat <span class="hl sym">-</span> <span class="hl num">1.0</span><span class="hl sym">.</span>
       <span class="hl num">0</span> to<span class="hl sym">:</span> extent <span class="hl sym">-</span> <span class="hl num">1</span> do<span class="hl sym">: [ :</span>x <span class="hl sym">|</span>
           cr <span class="hl sym">:=</span> stepr <span class="hl sym">*</span> x asFloat <span class="hl sym">-</span> <span class="hl num">1.5</span><span class="hl sym">.</span>
           zr <span class="hl sym">:=</span> cr<span class="hl sym">.</span> zi <span class="hl sym">:=</span> ci<span class="hl sym">.</span>

           bits <span class="hl sym">:=</span> bits bitShift<span class="hl sym">:</span> <span class="hl num">1</span><span class="hl sym">.</span>
           i <span class="hl sym">:=</span> <span class="hl num">1</span><span class="hl sym">.</span>
           <span class="hl sym">[</span>
               tr <span class="hl sym">:= (</span>zr<span class="hl sym">*</span>zr<span class="hl sym">) - (</span>zi<span class="hl sym">*</span>zi<span class="hl sym">) +</span> cr<span class="hl sym">.</span>
               zi <span class="hl sym">:=</span> <span class="hl num">2.0</span> <span class="hl sym">*</span> zr <span class="hl sym">*</span> zi <span class="hl sym">+</span> ci<span class="hl sym">.</span>
               zr <span class="hl sym">:=</span> tr<span class="hl sym">.</span>
               <span class="hl sym">(</span>zr<span class="hl sym">*</span>zr<span class="hl sym">) + (</span>zi<span class="hl sym">*</span>zi<span class="hl sym">) &lt;</span> limit2 and<span class="hl sym">: [ (</span>i <span class="hl sym">:=</span> i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">) &lt;</span> m <span class="hl sym">]</span>
           <span class="hl sym">]</span> whileTrue<span class="hl sym">.</span>

           i <span class="hl sym">=</span> m ifTrue<span class="hl sym">: [</span> bits <span class="hl sym">:=</span> bits <span class="hl sym">+</span> <span class="hl num">1</span> <span class="hl sym">].</span>
           <span class="hl sym">(</span>x bitAnd<span class="hl sym">:</span> <span class="hl num">7</span><span class="hl sym">) ==</span> <span class="hl num">7</span> ifTrue<span class="hl sym">: [</span>
               output nextPut<span class="hl sym">:</span> bits<span class="hl sym">.</span>
               bits <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">.</span>
           <span class="hl sym">]</span>
       <span class="hl sym">].</span>
       <span class="hl sym">(</span>extent bitAnd<span class="hl sym">:</span> <span class="hl num">7</span><span class="hl sym">) ==</span> <span class="hl num">0</span> ifFalse<span class="hl sym">: [</span>
           bits <span class="hl sym">:=</span> bits bitShift<span class="hl sym">:</span> <span class="hl num">8</span> <span class="hl sym">- (</span>extent bitAnd<span class="hl sym">:</span> <span class="hl num">7</span><span class="hl sym">).</span>
           output nextPut<span class="hl sym">:</span> bits<span class="hl sym">.</span>
       <span class="hl sym">]</span>
   <span class="hl sym">]</span>
<span class="hl sym">!</span>
main   <span class="hl sym">|</span> n <span class="hl sym">|</span>   n <span class="hl sym">:=</span> Smalltalk commandLineArguments last asNumber<span class="hl sym">.</span>   Stdout      nextPutAll<span class="hl sym">:</span> <span class="hl str">'P4'</span><span class="hl sym">;</span> cr<span class="hl sym">;</span> print<span class="hl sym">:</span> n<span class="hl sym">;</span> space<span class="hl sym">;</span> print<span class="hl sym">:</span> n<span class="hl sym">;</span> cr<span class="hl sym">;</span>
      binary<span class="hl sym">.</span>   <span class="hl kwa">self</span> mandelbrot<span class="hl sym">:</span> n to<span class="hl sym">:</span> Stdout
<span class="hl sym">! !</span>
