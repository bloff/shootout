<span class="hl com">/**</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * Based on the CAL Open Quark version</span>
<span class="hl com"> * Contributed by Magnus Byne.</span>
<span class="hl com"> */</span>
<span class="hl kwa">module</span> Nsieve<span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Prelude <span class="hl kwa">using</span>
    <span class="hl kwa">typeClass</span> <span class="hl sym">=</span> Inputable<span class="hl sym">,</span> Outputable<span class="hl sym">;</span>
    <span class="hl kwa">typeConstructor</span> <span class="hl sym">=</span> Boolean<span class="hl sym">,</span> Int<span class="hl sym">,</span> String<span class="hl sym">;</span>
    <span class="hl kwa">dataConstructor</span> <span class="hl sym">=</span> False<span class="hl sym">,</span> True<span class="hl sym">;</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> eager<span class="hl sym">,</span> seq<span class="hl sym">,</span> stringToInt<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>String <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> replicate<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Bits <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> shiftL<span class="hl sym">,</span> shiftR<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Debug<span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Collections<span class="hl sym">.</span>List <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> head<span class="hl sym">;</span>
    <span class="hl sym">;</span>


<span class="hl kwa">data foreign unsafe import jvm</span> <span class="hl str">&quot;boolean[]&quot;</span>
    JBooleanArray <span class="hl kwa">deriving</span> Inputable<span class="hl sym">,</span> Outputable<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;newArray&quot;</span> booleanArray_new <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> JBooleanArray<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;subscriptArray&quot;</span>
    get <span class="hl sym">::</span> JBooleanArray <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Boolean<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;updateArray&quot;</span>
    set <span class="hl sym">::</span> JBooleanArray <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Boolean <span class="hl sym">-&gt;</span> Boolean<span class="hl sym">;</span>

<span class="hl kwa">data foreign unsafe import jvm</span> <span class="hl str">&quot;java.io.PrintStream&quot;</span> <span class="hl kwa">private</span> JPrintStream<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;static field java.lang.System.out&quot;</span>
    <span class="hl kwa">private</span> stdout <span class="hl sym">::</span> JPrintStream<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;method println&quot;</span>
    <span class="hl kwa">private</span> printLn <span class="hl sym">::</span> JPrintStream <span class="hl sym">-&gt;</span> String <span class="hl sym">-&gt; ();</span>

<span class="hl com">/**pad width number returns number padded to width with spaces*/</span>
pad <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> String<span class="hl sym">;</span>
pad <span class="hl sym">!</span>width <span class="hl sym">!</span>number <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        str <span class="hl sym">=</span> Debug<span class="hl sym">.</span>show number<span class="hl sym">;</span>
    <span class="hl kwa">in</span>
        replicate <span class="hl sym">(</span>width <span class="hl sym">-</span> String<span class="hl sym">.</span>length str<span class="hl sym">)</span> <span class="hl str">' '</span> <span class="hl sym">++</span> str
    <span class="hl sym">;</span>

<span class="hl com">/**this is used to initialise the values in the array to true*/</span>
setAll <span class="hl sym">!</span>start <span class="hl sym">!</span>end <span class="hl sym">!</span>array <span class="hl sym">=</span>
    <span class="hl kwa">if</span> start <span class="hl sym">==</span> end <span class="hl kwa">then</span>
        array
    <span class="hl kwa">else</span>
        set array start True
        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
        setAll <span class="hl sym">(</span>start <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span> end array
    <span class="hl sym">;</span>

<span class="hl com">/** Count primes using nseive method*/</span>
nsieve <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> JBooleanArray <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>
nsieve <span class="hl sym">!</span>n <span class="hl sym">!</span>isPrime <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        nsieve_helper <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>
        nsieve_helper <span class="hl sym">!</span>i <span class="hl sym">!</span>numPrimesFound <span class="hl sym">=</span>
            <span class="hl kwa">if</span> i <span class="hl sym">==</span> n <span class="hl kwa">then</span>
                numPrimesFound
            <span class="hl kwa">else if</span> get isPrime i <span class="hl kwa">then</span>
                <span class="hl kwa">let</span>
                    update <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt; ();</span>
                    update <span class="hl sym">!</span>k <span class="hl sym">!</span>i <span class="hl sym">!</span>n <span class="hl sym">=</span>
                        <span class="hl kwa">if</span> k <span class="hl sym">&gt;</span> n <span class="hl kwa">then</span>
                            <span class="hl sym">()</span>
                        <span class="hl kwa">else</span>
                            set isPrime k False
                            <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                            update <span class="hl sym">(</span>k <span class="hl sym">+</span> i<span class="hl sym">)</span> i n
                        <span class="hl sym">;</span>
                <span class="hl kwa">in</span>
                    update <span class="hl sym">(</span>i <span class="hl sym">+</span> i<span class="hl sym">)</span> i n
                    <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                    nsieve_helper <span class="hl sym">(</span>i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">) (</span>numPrimesFound <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
            <span class="hl kwa">else</span>
                nsieve_helper <span class="hl sym">(</span>i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span> numPrimesFound
            <span class="hl sym">;</span>
    <span class="hl kwa">in</span>
        setAll <span class="hl num">0</span> <span class="hl sym">(</span>n <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span> isPrime
        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
        nsieve_helper <span class="hl num">2 0</span>
    <span class="hl sym">;</span>

main <span class="hl sym">:: [</span>String<span class="hl sym">] -&gt; ();</span>
<span class="hl kwa">public</span> main <span class="hl sym">!</span>args <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        n <span class="hl sym">=</span> eager $ stringToInt <span class="hl sym">(</span>head args<span class="hl sym">);</span>
        showResult n <span class="hl sym">=</span>
            printLn
                stdout
                <span class="hl sym">(</span>
                    <span class="hl str">&quot;Primes up to &quot;</span>
                    <span class="hl sym">++</span> pad <span class="hl num">8</span> n
                    <span class="hl sym">++</span> <span class="hl str">&quot; &quot;</span>
                    <span class="hl sym">++</span> pad <span class="hl num">8</span> <span class="hl sym">(</span>nsieve n flags<span class="hl sym">)</span>
                <span class="hl sym">)</span>
            <span class="hl sym">;</span>
        m <span class="hl sym">=</span> shiftL <span class="hl num">1</span> n <span class="hl sym">*</span> <span class="hl num">10000</span><span class="hl sym">;</span>
        flags <span class="hl sym">=</span> booleanArray_new <span class="hl sym">(</span>m <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">);</span>
    <span class="hl kwa">in</span>
        showResult m
        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
        showResult <span class="hl sym">(</span>shiftR m <span class="hl num">1</span><span class="hl sym">)</span>
        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
        showResult <span class="hl sym">(</span>shiftR m <span class="hl num">2</span><span class="hl sym">)</span>
    <span class="hl sym">;</span>

