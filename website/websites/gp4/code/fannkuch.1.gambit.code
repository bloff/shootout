<span class="hl slc">;; The Computer Language Shootout</span>
<span class="hl slc">;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;; Written by Dima Dorfman, 2004</span>
<span class="hl slc">;; Slightly improved by Sven Hartrumpf, 2005-2006</span>
<span class="hl slc">;; Adapted for gambit-c by Paul Berg</span>

<span class="hl sym">(</span>declare <span class="hl sym">(</span>standard-bindings<span class="hl sym">) (</span>block<span class="hl sym">) (</span><span class="hl kwa">not</span> safe<span class="hl sym">) (</span><span class="hl kwa">not</span> interrupts-enabled<span class="hl sym">) (</span>fixnum<span class="hl sym">))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">+</span> i<span class="hl sym">) (+</span> i <span class="hl num">1</span><span class="hl sym">))</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span><span class="hl num">1</span>- i<span class="hl sym">) (</span>- i <span class="hl num">1</span><span class="hl sym">))</span>

<span class="hl sym">(</span>define vector-for-each <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>pred v<span class="hl sym">)</span>
                          <span class="hl sym">(</span>do <span class="hl sym">((</span>i <span class="hl num">0</span> <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">+</span> i<span class="hl sym">))</span>
                               <span class="hl sym">(</span>v-<span class="hl kwa">length</span> <span class="hl sym">(</span>vector-<span class="hl kwa">length</span> v<span class="hl sym">)))</span>
                              <span class="hl sym">((&gt;=</span> i v-<span class="hl kwa">length</span><span class="hl sym">))</span>
                            <span class="hl sym">(</span>pred <span class="hl sym">(</span>vector-ref v i<span class="hl sym">)))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>vector-<span class="hl kwa">reverse</span>-slice<span class="hl sym">!</span> v i j<span class="hl sym">)</span>
  <span class="hl sym">(</span>do <span class="hl sym">((</span>i i <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">+</span> i<span class="hl sym">))</span>
       <span class="hl sym">(</span>j <span class="hl sym">(</span><span class="hl num">1</span>- j<span class="hl sym">) (</span><span class="hl num">1</span>- j<span class="hl sym">)))</span> <span class="hl slc">; exclude position j</span>
      <span class="hl sym">((&lt;=</span> j i<span class="hl sym">))</span>
    <span class="hl sym">(</span>vector-swap<span class="hl sym">!</span> v i j<span class="hl sym">)))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>vector-swap<span class="hl sym">!</span> v i j<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>t <span class="hl sym">(</span>vector-ref v i<span class="hl sym">)))</span>
    <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> v i <span class="hl sym">(</span>vector-ref v j<span class="hl sym">))</span>
    <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> v j t<span class="hl sym">)))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>count-flips pi<span class="hl sym">)</span>
  <span class="hl sym">(</span>do <span class="hl sym">((</span>rho <span class="hl sym">(</span>vector-copy pi<span class="hl sym">))</span>
       <span class="hl sym">(</span>i <span class="hl num">0</span> <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">+</span> i<span class="hl sym">)))</span>
      <span class="hl sym">((= (</span>vector-ref rho <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl num">0</span><span class="hl sym">)</span> i<span class="hl sym">)</span>
    <span class="hl sym">(</span>vector-<span class="hl kwa">reverse</span>-slice<span class="hl sym">!</span> rho <span class="hl num">0</span> <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">+ (</span>vector-ref rho <span class="hl num">0</span><span class="hl sym">)))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>fannkuch n<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>pi <span class="hl sym">(</span>do <span class="hl sym">((</span>pi <span class="hl sym">(</span>make-vector n<span class="hl sym">))</span>
                 <span class="hl sym">(</span>i <span class="hl num">0</span> <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">+</span> i<span class="hl sym">)))</span>
                <span class="hl sym">((=</span> i n<span class="hl sym">)</span> pi<span class="hl sym">)</span>
              <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> pi i i<span class="hl sym">)))</span>
        <span class="hl sym">(</span>r n<span class="hl sym">)</span>
        <span class="hl sym">(</span>count <span class="hl sym">(</span>make-vector n<span class="hl sym">)))</span>
    <span class="hl sym">(</span>let loop <span class="hl sym">((</span>flips <span class="hl num">0</span><span class="hl sym">)</span>
               <span class="hl sym">(</span>perms <span class="hl num">0</span><span class="hl sym">))</span>
      <span class="hl sym">(</span><span class="hl kwa">cond</span> <span class="hl sym">((&lt;</span> perms <span class="hl num">30</span><span class="hl sym">)</span>
             <span class="hl sym">(</span>vector-for-each <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>x<span class="hl sym">)</span>
                                <span class="hl sym">(</span>display <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">+</span> x<span class="hl sym">)))</span>
                              pi<span class="hl sym">)</span>
             <span class="hl sym">(</span>newline<span class="hl sym">)))</span>
      <span class="hl sym">(</span>do <span class="hl sym">()</span>
          <span class="hl sym">((=</span> r <span class="hl num">1</span><span class="hl sym">))</span>
        <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> count <span class="hl sym">(</span><span class="hl num">1</span>- r<span class="hl sym">)</span> r<span class="hl sym">)</span>
        <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> r <span class="hl sym">(</span><span class="hl num">1</span>- r<span class="hl sym">)))</span>
      <span class="hl sym">(</span>let <span class="hl sym">((</span>flips2 <span class="hl sym">(</span><span class="hl kwa">max</span> <span class="hl sym">(</span>count-flips pi<span class="hl sym">)</span> flips<span class="hl sym">)))</span>
        <span class="hl sym">(</span>let <span class="hl sym">((</span>result
               <span class="hl sym">(</span>let loop2 <span class="hl sym">()</span>
                 <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(=</span> r n<span class="hl sym">)</span>
                     flips2
                     <span class="hl sym">(</span>let <span class="hl sym">((</span>perm0 <span class="hl sym">(</span>vector-ref pi <span class="hl num">0</span><span class="hl sym">)))</span>
                       <span class="hl sym">(</span>do <span class="hl sym">((</span>i <span class="hl num">0</span><span class="hl sym">))</span>
                           <span class="hl sym">((&gt;=</span> i r<span class="hl sym">))</span>
                         <span class="hl sym">(</span>let <span class="hl sym">((</span>j <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">+</span> i<span class="hl sym">)))</span>
                           <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> pi i <span class="hl sym">(</span>vector-ref pi j<span class="hl sym">))</span>
                           <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> i j<span class="hl sym">)))</span>
                       <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> pi r perm0<span class="hl sym">)</span>
                       <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> count r <span class="hl sym">(</span><span class="hl num">1</span>- <span class="hl sym">(</span>vector-ref count r<span class="hl sym">)))</span>
                       <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(&lt;= (</span>vector-ref count r<span class="hl sym">)</span> <span class="hl num">0</span><span class="hl sym">)</span>
                           <span class="hl sym">(</span>begin
                             <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> r <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">+</span> r<span class="hl sym">))</span>
                             <span class="hl sym">(</span>loop2<span class="hl sym">))</span>
                           #f<span class="hl sym">))))))</span>
          <span class="hl sym">(</span><span class="hl kwa">or</span> result
              <span class="hl sym">(</span>loop flips2 <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">+</span> perms<span class="hl sym">))))))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>main arg<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>n <span class="hl sym">(</span>string-<span class="hl sym">&gt;</span>number arg<span class="hl sym">)))</span>
    <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">not</span> <span class="hl sym">(</span>integer? n<span class="hl sym">))</span>
        <span class="hl sym">(</span>begin <span class="hl sym">(</span>display <span class="hl str">&quot;An integer is required&quot;</span><span class="hl sym">) (</span>newline<span class="hl sym">)</span> <span class="hl num">2</span><span class="hl sym">)</span>
        <span class="hl sym">(</span>display <span class="hl sym">(</span>string-<span class="hl kwa">append</span> <span class="hl str">&quot;Pfannkuchen(&quot;</span> arg <span class="hl str">&quot;) = &quot;</span> <span class="hl sym">(</span>number-<span class="hl sym">&gt;</span>string <span class="hl sym">(</span>fannkuch n<span class="hl sym">))</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)))))</span>


