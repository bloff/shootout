<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Isaac Gouy</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> scala<span class="hl sym">.</span>collection<span class="hl sym">.</span>mutable<span class="hl sym">.</span><span class="hl kwc">BitSet</span>

<span class="hl kwa">object</span> nsievebits <span class="hl sym">{</span>

   <span class="hl kwa">def</span> nsieve<span class="hl sym">(</span>m<span class="hl sym">:</span> <span class="hl kwb">int</span><span class="hl sym">) = {</span>
      <span class="hl kwa">val</span> notPrime <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">BitSet</span><span class="hl sym">(</span>m<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>
      notPrime <span class="hl sym">+=</span> <span class="hl num">1</span>

      <span class="hl kwa">var</span> i <span class="hl sym">=</span> <span class="hl num">2</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;=</span> m<span class="hl sym">){</span>
         <span class="hl kwa">if</span> <span class="hl sym">(!</span>notPrime<span class="hl sym">.</span>contains<span class="hl sym">(</span>i<span class="hl sym">)){</span>
            <span class="hl kwa">var</span> k <span class="hl sym">=</span> i<span class="hl sym">+</span>i
            <span class="hl kwa">while</span> <span class="hl sym">(</span>k <span class="hl sym">&lt;=</span> m<span class="hl sym">){</span>
               <span class="hl kwa">if</span> <span class="hl sym">(!</span>notPrime<span class="hl sym">.</span>contains<span class="hl sym">(</span>k<span class="hl sym">))</span> notPrime <span class="hl sym">+=</span> k
               k <span class="hl sym">=</span> k<span class="hl sym">+</span>i
            <span class="hl sym">}</span>
         <span class="hl sym">}</span>

         i <span class="hl sym">=</span> i<span class="hl sym">+</span><span class="hl num">1</span>
      <span class="hl sym">}</span>
      m <span class="hl sym">-</span> notPrime<span class="hl sym">.</span>size
   <span class="hl sym">}</span>


   <span class="hl kwa">def</span> main<span class="hl sym">(</span>args<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">String</span><span class="hl sym">]) = {</span>

      <span class="hl kwa">def</span> printPrimes<span class="hl sym">(</span>m<span class="hl sym">:</span> <span class="hl kwb">int</span><span class="hl sym">) = {</span>

         <span class="hl kwa">def</span> pad<span class="hl sym">(</span>i<span class="hl sym">:</span> <span class="hl kwb">int</span><span class="hl sym">,</span> width<span class="hl sym">:</span> <span class="hl kwb">int</span><span class="hl sym">) = {</span>
            <span class="hl kwa">val</span> s <span class="hl sym">=</span> i<span class="hl sym">.</span>toString
            <span class="hl kwc">List</span><span class="hl sym">.</span>range<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> width <span class="hl sym">-</span> s<span class="hl sym">.</span>length<span class="hl sym">)</span>
               <span class="hl sym">.</span>map<span class="hl sym">((</span>i<span class="hl sym">) =&gt;</span> <span class="hl str">&quot; &quot;</span><span class="hl sym">) .</span>foldLeft<span class="hl sym">(</span><span class="hl str">&quot;&quot;</span><span class="hl sym">)((</span>a<span class="hl sym">,</span>b<span class="hl sym">) =&gt;</span> a<span class="hl sym">+</span>b<span class="hl sym">) +</span> s
         <span class="hl sym">}</span>

         Console<span class="hl sym">.</span>println<span class="hl sym">(</span><span class="hl str">&quot;Primes up to &quot;</span> <span class="hl sym">+</span>  pad<span class="hl sym">(</span>m<span class="hl sym">,</span><span class="hl num">8</span><span class="hl sym">) +</span> pad<span class="hl sym">(</span>nsieve<span class="hl sym">(</span>m<span class="hl sym">),</span><span class="hl num">9</span><span class="hl sym">))</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">val</span> n <span class="hl sym">=</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span>parseInt<span class="hl sym">(</span>args<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">))</span>
      printPrimes<span class="hl sym">( (</span><span class="hl num">1</span><span class="hl sym">&lt;&lt;</span>n  <span class="hl sym">)*</span><span class="hl num">10000</span> <span class="hl sym">)</span>
      printPrimes<span class="hl sym">( (</span><span class="hl num">1</span><span class="hl sym">&lt;&lt;</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)*</span><span class="hl num">10000</span> <span class="hl sym">)</span>
      printPrimes<span class="hl sym">( (</span><span class="hl num">1</span><span class="hl sym">&lt;&lt;</span>n<span class="hl sym">-</span><span class="hl num">2</span><span class="hl sym">)*</span><span class="hl num">10000</span> <span class="hl sym">)</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>
