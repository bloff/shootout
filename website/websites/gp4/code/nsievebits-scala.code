<span class="com">/* ------------------------------------------------------------------ */</span>
<span class="com">/* The Great Computer Language Shootout                               */</span>
<span class="com">/* http://shootout.alioth.debian.org/                                 */</span>
<span class="com">/*                                                                    */</span>
<span class="com">/* Originally reimplemented 'nsieve.scala' using the 'BitSet' type in */</span>
<span class="com">/* place of 'Array' type, but problems encountered i.e. 'BitSet' type */</span>
<span class="com">/* not recognised [this despite it appearing in the Scala doco, though*/</span>
<span class="com">/* I could well have misread this document]. So, have temporarily     */</span>
<span class="com">/* reused 'Array' type to mimic a bit set via bit manipulations, but  */</span>
<span class="com">/* have left old code in comments for easy reference.                 */</span>
<span class="com">/*                                                                    */</span>
<span class="com">/* Contributed by Anthony Borla                                       */</span>
<span class="com">/* ------------------------------------------------------------------ */</span>

<span class="kwa">object</span> nsievebits
<span class="sym">{</span>
  <span class="kwa">def</span> main<span class="sym">(</span>args<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]):</span> unit <span class="sym">=</span>
  <span class="sym">{</span>
    <span class="kwa">val</span> N <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">(</span><span class="num">0</span><span class="sym">));</span> <span class="kwa">var</span> M<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

    M <span class="sym">= (</span><span class="num">1</span> <span class="sym">&lt;&lt;</span> N<span class="sym">) *</span> <span class="num">10000</span><span class="sym">;</span>
    Console<span class="sym">.</span>printf<span class="sym">(</span><span class="str">&quot;Primes up to {0} {1}</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)(</span>padr<span class="sym">(</span>M<span class="sym">,</span> <span class="num">8</span><span class="sym">,</span> <span class="str">' '</span><span class="sym">),</span> padr<span class="sym">(</span>nsieve<span class="sym">(</span>M<span class="sym">),</span> <span class="num">8</span><span class="sym">,</span> <span class="str">' '</span><span class="sym">));</span>

    M <span class="sym">= (</span><span class="num">1</span> <span class="sym">&lt;&lt;</span> N <span class="sym">-</span> <span class="num">1</span><span class="sym">) *</span> <span class="num">10000</span><span class="sym">;</span>
    Console<span class="sym">.</span>printf<span class="sym">(</span><span class="str">&quot;Primes up to {0} {1}</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)(</span>padr<span class="sym">(</span>M<span class="sym">,</span> <span class="num">8</span><span class="sym">,</span> <span class="str">' '</span><span class="sym">),</span> padr<span class="sym">(</span>nsieve<span class="sym">(</span>M<span class="sym">),</span> <span class="num">8</span><span class="sym">,</span> <span class="str">' '</span><span class="sym">));</span>

    M <span class="sym">= (</span><span class="num">1</span> <span class="sym">&lt;&lt;</span> N <span class="sym">-</span> <span class="num">2</span><span class="sym">) *</span> <span class="num">10000</span><span class="sym">;</span>
    Console<span class="sym">.</span>printf<span class="sym">(</span><span class="str">&quot;Primes up to {0} {1}</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)(</span>padr<span class="sym">(</span>M<span class="sym">,</span> <span class="num">8</span><span class="sym">,</span> <span class="str">' '</span><span class="sym">),</span> padr<span class="sym">(</span>nsieve<span class="sym">(</span>M<span class="sym">),</span> <span class="num">8</span><span class="sym">,</span> <span class="str">' '</span><span class="sym">));</span>
  <span class="sym">}</span>

  <span class="kwa">def</span> nsieve<span class="sym">(</span>m<span class="sym">:</span> <span class="kwb">int</span><span class="sym">):</span> <span class="kwb">int</span> <span class="sym">=</span>
  <span class="sym">{</span>
    <span class="slc">//</span>
    <span class="slc">// val sieve: BitSet = new BitSet(m); sieve.ensureCapacity(m);</span>
    <span class="slc">//</span>
    <span class="kwa">val</span> size<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">= (</span>m <span class="sym">+</span> <span class="num">31</span><span class="sym">) &gt;&gt;</span> <span class="num">5</span><span class="sym">;</span>
    <span class="kwa">val</span> sieve<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwb">int</span><span class="sym">] =</span> <span class="kwa">new</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwb">int</span><span class="sym">](</span>size<span class="sym">);</span>

    <span class="slc">//</span>
    <span class="slc">// var i:int = 0; while (i &lt; m) { sieve += i; i = i + 1; }</span>
    <span class="slc">//</span>
    <span class="kwa">var</span> i<span class="sym">:</span><span class="kwb">int</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> size<span class="sym">) {</span> sieve<span class="sym">(</span>i<span class="sym">) =</span> <span class="num">0xffffffff</span><span class="sym">;</span> i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">; }</span>

    <span class="kwa">var</span> count<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span>

    <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> m<span class="sym">)</span>
    <span class="sym">{</span>
      <span class="slc">//</span>
      <span class="slc">// if (sieve.contains(i))</span>
      <span class="slc">//</span>
      <span class="kwa">if</span> <span class="sym">((</span>sieve<span class="sym">(</span>i <span class="sym">&gt;&gt;</span> <span class="num">5</span><span class="sym">) &amp;</span> <span class="num">1</span> <span class="sym">&lt;&lt; (</span>i <span class="sym">&amp;</span> <span class="num">31</span><span class="sym">)) !=</span> <span class="num">0</span><span class="sym">)</span>
      <span class="sym">{</span>
        <span class="slc">//</span>
        <span class="slc">// var j: int = i + i; while (j &lt; m) { sieve -= j; j = j + i; }</span>
        <span class="slc">//</span>
        <span class="kwa">var</span> j<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> i <span class="sym">+</span> i<span class="sym">;</span> <span class="kwa">while</span> <span class="sym">(</span>j <span class="sym">&lt;</span> m<span class="sym">) {</span> sieve<span class="sym">(</span>j <span class="sym">&gt;&gt;</span> <span class="num">5</span><span class="sym">) =</span> sieve<span class="sym">(</span>j <span class="sym">&gt;&gt;</span> <span class="num">5</span><span class="sym">) &amp;</span> ~<span class="sym">(</span><span class="num">1</span> <span class="sym">&lt;&lt; (</span>j <span class="sym">&amp;</span> <span class="num">31</span><span class="sym">));</span> j <span class="sym">=</span> j <span class="sym">+</span> i<span class="sym">; }</span>
        count <span class="sym">=</span> count <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
      <span class="sym">}</span>

      i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">return</span> count<span class="sym">;</span>
  <span class="sym">}</span>

  <span class="kwa">def</span> padr<span class="sym">(</span>v<span class="sym">:</span> <span class="kwc">Any</span><span class="sym">,</span> padlen<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,</span> padchar<span class="sym">:</span> <span class="kwb">char</span><span class="sym">):</span> <span class="kwc">String</span> <span class="sym">=</span>
  <span class="sym">{</span>
    <span class="kwa">val</span> s<span class="sym">:</span> <span class="kwc">String</span> <span class="sym">=</span> <span class="str">&quot;&quot;</span> <span class="sym">+</span> v<span class="sym">;</span> <span class="kwa">val</span> reqlen<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> s<span class="sym">.</span>length<span class="sym">() -</span> padlen<span class="sym">;</span>
    <span class="kwa">return if</span> <span class="sym">(</span>reqlen <span class="sym">&lt;</span> <span class="num">0</span><span class="sym">)</span> makeString<span class="sym">(</span><span class="kwc">Math</span><span class="sym">.</span>abs<span class="sym">(</span>reqlen<span class="sym">),</span> padchar<span class="sym">) +</span> s <span class="kwa">else</span> s<span class="sym">;</span>
  <span class="sym">}</span>

  <span class="kwa">def</span> makeString<span class="sym">(</span>len<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,</span> fillchar<span class="sym">:</span> <span class="kwb">char</span><span class="sym">):</span> <span class="kwc">String</span> <span class="sym">=</span>
  <span class="sym">{</span>
    <span class="kwa">val</span> sb<span class="sym">:</span> <span class="kwc">StringBuffer</span> <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">StringBuffer</span><span class="sym">();</span> <span class="kwa">var</span> i<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> len<span class="sym">) {</span> sb<span class="sym">.</span>append<span class="sym">(</span>fillchar<span class="sym">);</span> i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">; }</span>
    <span class="kwa">return</span> sb<span class="sym">.</span>toString<span class="sym">();</span>
  <span class="sym">}</span>
<span class="sym">}</span>

