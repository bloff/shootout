<span class="slc">% The Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">% contributed by Isaac Gouy</span>
<span class="slc">% based on Greg Buchholz's C program</span>

<span class="kwa">functor</span>
<span class="kwa">import</span> Application Open

<span class="kwa">define</span>

   <span class="kwa">class</span> MandelbrotWriter
      <span class="kwa">attr</span> side zr zi cr ci tr ti bits<span class="sym">:</span><span class="num">0</span> bitnum<span class="sym">:</span><span class="num">0</span>

      <span class="kwa">meth</span> init<span class="sym">(</span>X<span class="sym">)</span>
         side <span class="sym">:=</span> X
      <span class="kwa">end</span>

      <span class="kwa">meth</span> write<span class="sym">(</span>F<span class="sym">)</span>
         M <span class="sym">=</span> <span class="num">50</span>
         Limit2 <span class="sym">=</span> <span class="num">4.0</span>
         IYMax <span class="sym">= &#64;</span>side <span class="sym">-</span> <span class="num">1</span>
         IXMax <span class="sym">=</span> IYMax
         YMax <span class="sym">= {</span>IntToFloat <span class="sym">&#64;</span>side<span class="sym">}</span>
         XMax <span class="sym">=</span> YMax
      <span class="kwa">in</span>
         <span class="sym">{</span>F putS<span class="sym">(</span>&quot;P4&quot;<span class="sym">)}</span>
         <span class="sym">{</span>F putS<span class="sym">({</span>IntToString <span class="sym">&#64;</span>side<span class="sym">} #</span> &quot; &quot; <span class="sym"># {</span>IntToString <span class="sym">&#64;</span>side<span class="sym">})}</span>

         <span class="kwa">for</span> IY <span class="kwa">in</span> <span class="num">0</span><span class="sym">..</span>IYMax do
            Y <span class="sym">= {</span>IntToFloat IY<span class="sym">}</span>
         <span class="kwa">in</span>
            <span class="kwa">for</span> IX <span class="kwa">in</span> <span class="num">0</span><span class="sym">..</span>IXMax do
               X <span class="sym">= {</span>IntToFloat IX<span class="sym">}</span>
            <span class="kwa">in</span>
               zr <span class="sym">:=</span> <span class="num">0.0</span>
               zi <span class="sym">:=</span> <span class="num">0.0</span>
               tr <span class="sym">:=</span> <span class="num">0.0</span>
               ti <span class="sym">:=</span> <span class="num">0.0</span>
               cr <span class="sym">:=</span> <span class="num">2.0</span><span class="sym">*</span>X <span class="sym">/</span> XMax <span class="sym">-</span> <span class="num">1.5</span>
               ci <span class="sym">:=</span> <span class="num">2.0</span><span class="sym">*</span>Y <span class="sym">/</span> YMax <span class="sym">-</span> <span class="num">1.0</span>

               <span class="kwa">for</span> I <span class="kwa">in</span> <span class="num">0</span><span class="sym">;</span> I<span class="sym">&lt;</span>M <span class="kwa">andthen</span> <span class="sym">&#64;</span>tr <span class="sym">+ &#64;</span>ti <span class="sym">=&lt;</span> Limit2<span class="sym">;</span> I<span class="sym">+</span><span class="num">1</span> do
                  zi <span class="sym">:=</span> <span class="num">2.0</span> <span class="sym">* &#64;</span>zr <span class="sym">* &#64;</span>zi <span class="sym">+ &#64;</span>ci
                  zr <span class="sym">:= &#64;</span>tr <span class="sym">- &#64;</span>ti <span class="sym">+ &#64;</span>cr
                  tr <span class="sym">:= &#64;</span>zr<span class="sym">*&#64;</span>zr
                  ti <span class="sym">:=  &#64;</span>zi<span class="sym">*&#64;</span>zi
               <span class="kwa">end</span>

               bits <span class="sym">:= &#64;</span>bits <span class="sym">*</span> <span class="num">2</span>
               <span class="kwa">if</span> <span class="sym">&#64;</span>tr <span class="sym">+ &#64;</span>ti <span class="sym">=&lt;</span> Limit2 <span class="kwa">then</span> bits <span class="sym">:= &#64;</span>bits <span class="sym">+</span> <span class="num">1</span> <span class="kwa">end</span>

               bitnum <span class="sym">:= &#64;</span>bitnum <span class="sym">+</span> <span class="num">1</span>

               <span class="kwa">if</span> <span class="sym">&#64;</span>bitnum <span class="sym">==</span> <span class="num">8</span> <span class="kwa">then</span>
                  <span class="sym">{</span>F putC<span class="sym">(&#64;</span>bits<span class="sym">)}</span>
                  bits <span class="sym">:=</span> <span class="num">0</span> bitnum <span class="sym">:=</span> <span class="num">0</span>
               elseif IX <span class="sym">==</span> IXMax <span class="kwa">then</span>
                  bits <span class="sym">:= &#64;</span>bits <span class="sym">* {</span>Pow <span class="num">2</span> <span class="sym">(</span><span class="num">8</span> <span class="sym">- (&#64;</span>side mod <span class="num">8</span><span class="sym">))}</span>
                  <span class="sym">{</span>F putC<span class="sym">(&#64;</span>bits<span class="sym">)}</span>
                  bits <span class="sym">:=</span> <span class="num">0</span> bitnum <span class="sym">:=</span> <span class="num">0</span>
               <span class="kwa">end</span>
            <span class="kwa">end</span>
         <span class="kwa">end</span>
      <span class="kwa">end</span>   <span class="slc">% write</span>

   <span class="kwa">end</span>   <span class="slc">% MandelbrotWriter</span>

   <span class="kwa">class</span> TextFile <span class="kwa">from</span> Open<span class="sym">.</span>file Open<span class="sym">.</span>text <span class="kwa">end</span>


   <span class="sym">[</span>Arg<span class="sym">] = {</span>Application<span class="sym">.</span>getArgs plain<span class="sym">}</span>
   N <span class="sym">= {</span>String<span class="sym">.</span>toInt Arg<span class="sym">}</span>

   Mandelbrot <span class="sym">= {</span>New MandelbrotWriter init<span class="sym">(</span>N<span class="sym">)}</span>
   StdOut <span class="sym">= {</span>New TextFile init<span class="sym">(</span>name<span class="sym">:</span>stdout<span class="sym">)}</span>

<span class="kwa">in</span>
   <span class="sym">{</span>Mandelbrot write<span class="sym">(</span>StdOut<span class="sym">)}</span>
   <span class="sym">{</span>StdOut close<span class="sym">}</span>
   <span class="sym">{</span>Application<span class="sym">.</span>exit <span class="num">0</span><span class="sym">}</span>
<span class="kwa">end</span>
