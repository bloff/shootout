BUILD COMMANDS FOR: sumcol.sbcl-3.sbcl

Sun Jun  3 10:08:36 PDT 2007

SBCL built with: /usr/bin/sbcl --userinit /dev/null --sysinit /dev/null -batch -eval '(load "sumcol.sbcl-3.sbcl_compile")'
### START sumcol.sbcl-3.sbcl_compile
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(handler-bind ((sb-ext:defconstant-uneql      (lambda (c) (abort c))))      (load (compile-file "sumcol.sbcl-3.sbcl" ))) (save-lisp-and-die "sbcl.core" :purify t)
### END sumcol.sbcl-3.sbcl_compile


; compiling file "/home/dunham/gp4/shootout/bench/sumcol/tmp/sumcol.sbcl-3.sbcl" (written 03 JUN 2007 10:08:36 AM):
; compiling (DEFUN MAIN ...)
; file: /home/dunham/gp4/shootout/bench/sumcol/tmp/sumcol.sbcl-3.sbcl
; in: DEFUN MAIN
;     LOOP
; --> BLOCK LET LET SB-LOOP::LOOP-BODY TAGBODY SETQ THE 
; ==>
;   (+ TOTAL (PARSE-INTEGER LINE))
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       The second argument is a INTEGER, not a FIXNUM.
;       The result is a (VALUES INTEGER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a INTEGER, not a (SIGNED-BYTE 32).
;       The second argument is a INTEGER, not a (SIGNED-BYTE 32).
;       The result is a (VALUES INTEGER &OPTIONAL), not a (VALUES
;                                                          (SIGNED-BYTE 32) &REST
;                                                          T).
;       etc.
; 
; compilation unit finished
;   printed 1 note


; /home/dunham/gp4/shootout/bench/sumcol/tmp/sumcol.sbcl-3.fasl written
; compilation finished in 0:00:00
[undoing binding stack and other enclosing state... done]
[saving current Lisp image into /home/dunham/gp4/shootout/bench/sumcol/tmp/sbcl.core:
writing 1912 bytes from the read-only space at 0x01000000
writing 2096 bytes from the static space at 0x01100000
writing 23564288 bytes from the dynamic space at 0x09000000
done]
### START sumcol.sbcl-3.sbcl_run
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(main) (quit)
### END sumcol.sbcl-3.sbcl_run


=================================================================
COMMAND LINE (%A is single numeric argument):

 /usr/bin/sbcl --noinform --core sbcl.core --userinit /dev/null --sysinit /dev/null --load sumcol.sbcl-3.sbcl_run %A


PROGRAM OUTPUT
==============
10500000
