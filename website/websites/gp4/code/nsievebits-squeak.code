<span class="com">&quot;* The Computer Language Shootout</span>
<span class="com">    http://shootout.alioth.debian.org/</span>
<span class="com">    contributed by Isaac Gouy</span>
<span class="com">    modified by Eliot Miranda *&quot;</span><span class="sym">!</span>

<span class="str">'From Squeak3.9 of 7 November 2006 [latest update: #7067] on 12 April 2007 at 7:37:02 pm'</span><span class="sym">!</span>
ArrayedCollection variableByteSubclass<span class="sym">: #</span>BitArray   instanceVariableNames<span class="sym">:</span> <span class="str">''</span>   classVariableNames<span class="sym">:</span> <span class="str">''</span>   poolDictionaries<span class="sym">:</span> <span class="str">''</span>   category<span class="sym">:</span> <span class="str">'Shootout'</span><span class="sym">!</span>
Object subclass<span class="sym">: #</span>Tests   instanceVariableNames<span class="sym">:</span> <span class="str">''</span>   classVariableNames<span class="sym">:</span> <span class="str">''</span>   poolDictionaries<span class="sym">:</span> <span class="str">''</span>   category<span class="sym">:</span> <span class="str">'Shootout'</span><span class="sym">!!</span>BitArray methodsFor<span class="sym">:</span> <span class="str">'accessing'</span> stamp<span class="sym">:</span> <span class="str">'  4/12/2007 19:34'</span><span class="sym">!</span>at<span class="sym">:</span> index    <span class="sym">|</span> wordIndex bitMask <span class="sym">|</span>    wordIndex <span class="sym">:= ((</span>index <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> bitShift<span class="sym">: -</span><span class="num">3</span><span class="sym">) +</span> <span class="num">1</span><span class="sym">.</span>    bitMask <span class="sym">:=</span> <span class="num">1</span> bitShift<span class="sym">: (</span>index <span class="sym">-</span> <span class="num">1</span> bitAnd<span class="sym">:</span> <span class="num">7</span><span class="sym">).    ^((</span><span class="kwa">self</span> basicAt<span class="sym">:</span> wordIndex<span class="sym">)</span> bitAnd<span class="sym">:</span> bitMask<span class="sym">) &gt;</span> <span class="num">0</span><span class="sym">! !!</span>BitArray methodsFor<span class="sym">:</span> <span class="str">'accessing'</span> stamp<span class="sym">:</span> <span class="str">'  4/12/2007 19:34'</span><span class="sym">!</span>at<span class="sym">:</span> index put<span class="sym">:</span> bit    <span class="sym">|</span> wordIndex bitMask word <span class="sym">|</span>    wordIndex <span class="sym">:= ((</span>index <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> bitShift<span class="sym">: -</span><span class="num">3</span><span class="sym">) +</span> <span class="num">1</span><span class="sym">.</span>    bitMask <span class="sym">:=</span> <span class="num">1</span> bitShift<span class="sym">: (</span>index <span class="sym">-</span> <span class="num">1</span> bitAnd<span class="sym">:</span> <span class="num">7</span><span class="sym">).</span>    word <span class="sym">:=</span> <span class="kwa">self</span> basicAt<span class="sym">:</span> wordIndex<span class="sym">.</span>    word <span class="sym">:=</span> word bitOr<span class="sym">:</span> bitMask<span class="sym">.</span>    bit ifFalse<span class="sym">: [</span>word <span class="sym">:=</span> word <span class="sym">-</span> bitMask<span class="sym">].</span>    <span class="kwa">self</span> basicAt<span class="sym">:</span> wordIndex put<span class="sym">:</span> word<span class="sym">.    ^</span>bit<span class="sym">! !!</span>BitArray methodsFor<span class="sym">:</span> <span class="str">'accessing'</span> stamp<span class="sym">:</span> <span class="str">'  4/12/2007 19:34'</span><span class="sym">!</span>atAllPut<span class="sym">:</span> anObject    &quot;Put anObject at every one of the receiver<span class="str">'s indices.&quot;   | value |   value := anObject ifTrue: [255] ifFalse: [0].   1 to: self basicSize do: [:index | self basicAt: index put: value]! !!BitArray class methodsFor: '</span>instance creation<span class="str">' stamp: '</span>  <span class="num">4</span><span class="sym">/</span><span class="num">12</span><span class="sym">/</span><span class="num">2007 19</span><span class="sym">:</span><span class="num">34</span><span class="str">'!new: size    ^super new: (size + 7 bitShift: -3)! !!Integer methodsFor: '</span>platform<span class="str">' stamp: '</span>  <span class="num">4</span><span class="sym">/</span><span class="num">12</span><span class="sym">/</span><span class="num">2007 19</span><span class="sym">:</span><span class="num">23</span><span class="str">'!asPaddedString: aWidth   ^self printStringLength: aWidth padded: false! !!Tests class methodsFor: '</span>platform<span class="str">' stamp: '</span>  <span class="num">4</span><span class="sym">/</span><span class="num">12</span><span class="sym">/</span><span class="num">2007 18</span><span class="sym">:</span><span class="num">57</span><span class="str">'!arg   ^(SmalltalkImage current getSystemAttribute: 3) asInteger! !!Tests class methodsFor: '</span>platform<span class="str">' stamp: '</span>  <span class="num">4</span><span class="sym">/</span><span class="num">13</span><span class="sym">/</span><span class="num">2007 07</span><span class="sym">:</span><span class="num">30</span><span class="str">'!postscript   SmalltalkImage current snapshot: false andQuit: true.   ^'</span><span class="str">'! !!Tests class methodsFor: '</span>platform<span class="str">' stamp: '</span>  <span class="num">4</span><span class="sym">/</span><span class="num">12</span><span class="sym">/</span><span class="num">2007 18</span><span class="sym">:</span><span class="num">57</span><span class="str">'!stdout   ^UnixProcess stdOut! !!Tests class methodsFor: '</span>benchmark scripts<span class="str">' stamp: '</span>  <span class="num">4</span><span class="sym">/</span><span class="num">12</span><span class="sym">/</span><span class="num">2007 19</span><span class="sym">:</span><span class="num">36</span><span class="str">'!nsievebits   | n |   n := self arg.   (n &lt; 2) ifTrue: [n := 2].   self primeBenchmarkFor: n to: self stdout using: BitArray.   ^self postscript! !!Tests class methodsFor: '</span>benchmarking<span class="str">' stamp: '</span>  <span class="num">4</span><span class="sym">/</span><span class="num">12</span><span class="sym">/</span><span class="num">2007 19</span><span class="sym">:</span><span class="num">04</span><span class="str">'!nsieve: n using: arrayClass    | count isPrime |   count := 0.   isPrime := arrayClass new: n withAll: true.   2 to: n do:      [:i |       (isPrime at: i) ifTrue:          [i + i to: n by: i do:            [:k | isPrime at: k put: false].         count := count + 1]].   ^count! !!Tests class methodsFor: '</span>benchmarking<span class="str">' stamp: '</span>  <span class="num">4</span><span class="sym">/</span><span class="num">12</span><span class="sym">/</span><span class="num">2007 19</span><span class="sym">:</span><span class="num">17</span><span class="str">'!primeBenchmarkFor: v to: output using: arrayClass   v to: v - 2 by: -1 do:      [:n| | m |      m := (2 raisedTo: n) * 10000.      output         nextPutAll: '</span>Primes up to <span class="str">'; nextPutAll: (m asPaddedString: 8);         nextPutAll: ((self nsieve: m using: arrayClass) asPaddedString: 9);          nextPut: Character lf]! !</span>
