BUILD COMMANDS FOR: nbody.sbcl

Thu Jun 15 12:08:30 PDT 2006

SBCL built with: /usr/bin/sbcl --userinit /dev/null --sysinit /dev/null -batch -eval '(load "nbody.sbcl_compile")'
### START nbody.sbcl_compile
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(asdf:operate 'asdf:load-op 'cl-ppcre)
(handler-bind ((sb-ext:defconstant-uneql      (lambda (c) (abort c))))      (load (compile-file "nbody.sbcl" ))) (save-lisp-and-die "sbcl.core" :purify t)
### END nbody.sbcl_compile

; loading system definition from /usr/share/common-lisp/systems/cl-ppcre.asd
; into #<PACKAGE "ASDF3904">
; registering #<SYSTEM #:CL-PPCRE {9176FC1}> as CL-PPCRE
; compiling file "/home/dunham/gp4/shootout/bench/nbody/tmp/nbody.sbcl" (written 15 JUN 2006 12:08:30 PM):
; compiling (DEFCONSTANT +DAYS-PER-YEAR+ ...)
; compiling (DEFCONSTANT +SOLAR-MASS+ ...)
; compiling (DEFSTRUCT (BODY # ...) ...)
; file: /home/dunham/gp4/shootout/bench/nbody/tmp/nbody.sbcl
; in: DEFSTRUCT BODY
;     (DEFSTRUCT
;       (BODY (:TYPE (VECTOR DOUBLE-FLOAT))
;             (:CONC-NAME NIL)
;             (:CONSTRUCTOR MAKE-BODY (X Y Z VX VY VZ MASS)))
;     X
;     Y
;     Z
;     VX
;     VY
;     VZ
;     MASS)
; --> PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN SB-IMPL::%DEFUN 
; --> SB-INT:NAMED-LAMBDA FUNCTION BLOCK THE ELT AREF LET* 
; --> SB-KERNEL:HAIRY-DATA-VECTOR-REF MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G18)
;       (DECLARE (IGNORE #:G18))
;       (DECLARE (TYPE (SIMPLE-ARRAY DOUBLE-FLOAT 1) ARRAY))
;       (SB-KERNEL:DATA-VECTOR-REF ARRAY SB-INT:INDEX))
; 
; note: doing float to pointer coercion (cost 13) to "<return value>"

; --> PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN SB-IMPL::%DEFUN 
; --> SB-INT:NAMED-LAMBDA FUNCTION BLOCK SETF SB-KERNEL:%SETELT SB-KERNEL:%ASET 
; --> LET* SB-KERNEL:HAIRY-DATA-VECTOR-SET MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G27)
;       (DECLARE (IGNORE #:G27))
;       (DECLARE (TYPE (SIMPLE-ARRAY DOUBLE-FLOAT 1) ARRAY)
;                (TYPE DOUBLE-FLOAT SB-C::NEW-VALUE))
;       (SB-KERNEL:DATA-VECTOR-SET ARRAY SB-INT:INDEX SB-C::NEW-VALUE))
; 
; note: doing float to pointer coercion (cost 13) to "<return value>"

; --> PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN SB-IMPL::%DEFUN 
; --> SB-INT:NAMED-LAMBDA FUNCTION BLOCK THE ELT AREF LET* 
; --> SB-KERNEL:HAIRY-DATA-VECTOR-REF MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G32)
;       (DECLARE (IGNORE #:G32))
;       (DECLARE (TYPE (SIMPLE-ARRAY DOUBLE-FLOAT 1) ARRAY))
;       (SB-KERNEL:DATA-VECTOR-REF ARRAY SB-INT:INDEX))
; 
; note: doing float to pointer coercion (cost 13) to "<return value>"

; --> PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN SB-IMPL::%DEFUN 
; --> SB-INT:NAMED-LAMBDA FUNCTION BLOCK SETF SB-KERNEL:%SETELT SB-KERNEL:%ASET 
; --> LET* SB-KERNEL:HAIRY-DATA-VECTOR-SET MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G41)
;       (DECLARE (IGNORE #:G41))
;       (DECLARE (TYPE (SIMPLE-ARRAY DOUBLE-FLOAT 1) ARRAY)
;                (TYPE DOUBLE-FLOAT SB-C::NEW-VALUE))
;       (SB-KERNEL:DATA-VECTOR-SET ARRAY SB-INT:INDEX SB-C::NEW-VALUE))
; 
; note: doing float to pointer coercion (cost 13) to "<return value>"

; --> PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN SB-IMPL::%DEFUN 
; --> SB-INT:NAMED-LAMBDA FUNCTION BLOCK THE ELT AREF LET* 
; --> SB-KERNEL:HAIRY-DATA-VECTOR-REF MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G46)
;       (DECLARE (IGNORE #:G46))
;       (DECLARE (TYPE (SIMPLE-ARRAY DOUBLE-FLOAT 1) ARRAY))
;       (SB-KERNEL:DATA-VECTOR-REF ARRAY SB-INT:INDEX))
; 
; note: doing float to pointer coercion (cost 13) to "<return value>"

; --> PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN SB-IMPL::%DEFUN 
; --> SB-INT:NAMED-LAMBDA FUNCTION BLOCK SETF SB-KERNEL:%SETELT SB-KERNEL:%ASET 
; --> LET* SB-KERNEL:HAIRY-DATA-VECTOR-SET MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G55)
;       (DECLARE (IGNORE #:G55))
;       (DECLARE (TYPE (SIMPLE-ARRAY DOUBLE-FLOAT 1) ARRAY)
;                (TYPE DOUBLE-FLOAT SB-C::NEW-VALUE))
;       (SB-KERNEL:DATA-VECTOR-SET ARRAY SB-INT:INDEX SB-C::NEW-VALUE))
; 
; note: doing float to pointer coercion (cost 13) to "<return value>"

; --> PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN SB-IMPL::%DEFUN 
; --> SB-INT:NAMED-LAMBDA FUNCTION BLOCK THE ELT AREF LET* 
; --> SB-KERNEL:HAIRY-DATA-VECTOR-REF MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G60)
;       (DECLARE (IGNORE #:G60))
;       (DECLARE (TYPE (SIMPLE-ARRAY DOUBLE-FLOAT 1) ARRAY))
;       (SB-KERNEL:DATA-VECTOR-REF ARRAY SB-INT:INDEX))
; 
; note: doing float to pointer coercion (cost 13) to "<return value>"

; --> PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN SB-IMPL::%DEFUN 
; --> SB-INT:NAMED-LAMBDA FUNCTION BLOCK SETF SB-KERNEL:%SETELT SB-KERNEL:%ASET 
; --> LET* SB-KERNEL:HAIRY-DATA-VECTOR-SET MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G69)
;       (DECLARE (IGNORE #:G69))
;       (DECLARE (TYPE (SIMPLE-ARRAY DOUBLE-FLOAT 1) ARRAY)
;                (TYPE DOUBLE-FLOAT SB-C::NEW-VALUE))
;       (SB-KERNEL:DATA-VECTOR-SET ARRAY SB-INT:INDEX SB-C::NEW-VALUE))
; 
; note: doing float to pointer coercion (cost 13) to "<return value>"

; --> PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN SB-IMPL::%DEFUN 
; --> SB-INT:NAMED-LAMBDA FUNCTION BLOCK THE ELT AREF LET* 
; --> SB-KERNEL:HAIRY-DATA-VECTOR-REF MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G74)
;       (DECLARE (IGNORE #:G74))
;       (DECLARE (TYPE (SIMPLE-ARRAY DOUBLE-FLOAT 1) ARRAY))
;       (SB-KERNEL:DATA-VECTOR-REF ARRAY SB-INT:INDEX))
; 
; note: doing float to pointer coercion (cost 13) to "<return value>"

; --> PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN SB-IMPL::%DEFUN 
; --> SB-INT:NAMED-LAMBDA FUNCTION BLOCK SETF SB-KERNEL:%SETELT SB-KERNEL:%ASET 
; --> LET* SB-KERNEL:HAIRY-DATA-VECTOR-SET MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G83)
;       (DECLARE (IGNORE #:G83))
;       (DECLARE (TYPE (SIMPLE-ARRAY DOUBLE-FLOAT 1) ARRAY)
;                (TYPE DOUBLE-FLOAT SB-C::NEW-VALUE))
;       (SB-KERNEL:DATA-VECTOR-SET ARRAY SB-INT:INDEX SB-C::NEW-VALUE))
; 
; note: doing float to pointer coercion (cost 13) to "<return value>"

; --> PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN SB-IMPL::%DEFUN 
; --> SB-INT:NAMED-LAMBDA FUNCTION BLOCK THE ELT AREF LET* 
; --> SB-KERNEL:HAIRY-DATA-VECTOR-REF MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G88)
;       (DECLARE (IGNORE #:G88))
;       (DECLARE (TYPE (SIMPLE-ARRAY DOUBLE-FLOAT 1) ARRAY))
;       (SB-KERNEL:DATA-VECTOR-REF ARRAY SB-INT:INDEX))
; 
; note: doing float to pointer coercion (cost 13) to "<return value>"

; --> PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN SB-IMPL::%DEFUN 
; --> SB-INT:NAMED-LAMBDA FUNCTION BLOCK SETF SB-KERNEL:%SETELT SB-KERNEL:%ASET 
; --> LET* SB-KERNEL:HAIRY-DATA-VECTOR-SET MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G97)
;       (DECLARE (IGNORE #:G97))
;       (DECLARE (TYPE (SIMPLE-ARRAY DOUBLE-FLOAT 1) ARRAY)
;                (TYPE DOUBLE-FLOAT SB-C::NEW-VALUE))
;       (SB-KERNEL:DATA-VECTOR-SET ARRAY SB-INT:INDEX SB-C::NEW-VALUE))
; 
; note: doing float to pointer coercion (cost 13) to "<return value>"

; --> PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN SB-IMPL::%DEFUN 
; --> SB-INT:NAMED-LAMBDA FUNCTION BLOCK THE ELT AREF LET* 
; --> SB-KERNEL:HAIRY-DATA-VECTOR-REF MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G102)
;       (DECLARE (IGNORE #:G102))
;       (DECLARE (TYPE (SIMPLE-ARRAY DOUBLE-FLOAT 1) ARRAY))
;       (SB-KERNEL:DATA-VECTOR-REF ARRAY SB-INT:INDEX))
; 
; note: doing float to pointer coercion (cost 13) to "<return value>"

; --> PROGN DEFUN PROGN EVAL-WHEN SB-IMPL::%DEFUN SB-IMPL::%DEFUN 
; --> SB-INT:NAMED-LAMBDA FUNCTION BLOCK SETF SB-KERNEL:%SETELT SB-KERNEL:%ASET 
; --> LET* SB-KERNEL:HAIRY-DATA-VECTOR-SET MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G111)
;       (DECLARE (IGNORE #:G111))
;       (DECLARE (TYPE (SIMPLE-ARRAY DOUBLE-FLOAT 1) ARRAY)
;                (TYPE DOUBLE-FLOAT SB-C::NEW-VALUE))
;       (SB-KERNEL:DATA-VECTOR-SET ARRAY SB-INT:INDEX SB-C::NEW-VALUE))
; 
; note: doing float to pointer coercion (cost 13) to "<return value>"

; compiling (DEFTYPE BODY ...)
; compiling (DEFPARAMETER *JUPITER* ...)
; compiling (DEFPARAMETER *SATURN* ...)
; compiling (DEFPARAMETER *URANUS* ...)
; compiling (DEFPARAMETER *NEPTUNE* ...)
; compiling (DEFPARAMETER *SUN* ...)
; compiling (DECLAIM (INLINE APPLYFORCES))
; compiling (DEFUN APPLYFORCES ...)
; compiling (DEFUN ADVANCE ...)
; compiling (DEFUN ENERGY ...)
; file: /home/dunham/gp4/shootout/bench/nbody/tmp/nbody.sbcl
; in: DEFUN ENERGY
;     (DEFUN ENERGY (SYSTEM)
;     (LET ((E 0.0d0))
;       (DECLARE (DOUBLE-FLOAT E))
;       (LOOP FOR
;             (A . REST)
;             ON
;             SYSTEM
;             DO
;             (INCF E (* 0.5d0 # #))
;             (DOLIST (B REST)
;               (LET* #
;                 #)))
;       E))
; --> PROGN EVAL-WHEN SB-IMPL::%DEFUN SB-IMPL::%DEFUN SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA ENERGY
;                          (SYSTEM)
;                          (BLOCK ENERGY
;                            (LET ((E 0.0d0))
;                              (DECLARE (DOUBLE-FLOAT E))
;                              (LOOP FOR
;                                    (A . REST)
;                                    ON
;                                    SYSTEM
;                                    DO
;                                    (INCF E #)
;                                    (DOLIST # #))
;                              E)))
; 
; note: doing float to pointer coercion (cost 13) from E to "<return value>"

; compiling (DEFUN OFFSET-MOMENTUM ...)
; compiling (DEFUN NBODY ...)
; compiling (DEFUN MAIN ...)
; file: /home/dunham/gp4/shootout/bench/nbody/tmp/nbody.sbcl
; in: DEFUN MAIN
;     (LAST *POSIX-ARGV*)
; ==>
;   (SB-IMPL::LAST1 *POSIX-ARGV*)
; 
; caught STYLE-WARNING:
;   Assignment to argument: LIST
;     prevents use of assertion from function type previous declaration:
;     LIST
;   
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
;   printed 15 notes


; /home/dunham/gp4/shootout/bench/nbody/tmp/nbody.fasl written
; compilation finished in 0:00:01
[doing purification: roots handlers stack bindings static cleanup done]
[undoing binding stack and other enclosing state... done]
[saving current Lisp image into /home/dunham/gp4/shootout/bench/nbody/tmp/sbcl.core:
writing 21619472 bytes from the read-only space at 0x01000000
writing 8031904 bytes from the static space at 0x05000000
writing 4096 bytes from the dynamic space at 0x09000000
done]
### START nbody.sbcl_run
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(main) (quit)
### END nbody.sbcl_run


=================================================================
COMMAND LINE (%A is single numeric argument):

 /usr/bin/sbcl --noinform --core sbcl.core --userinit /dev/null --sysinit /dev/null --load nbody.sbcl_run %A


PROGRAM OUTPUT
==============
-0.169075164
-0.169031665
