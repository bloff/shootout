<span class="slc">;; ---------------------------------------------------------------------</span>
<span class="slc">;; The Great Computer Language Shootout</span>
<span class="slc">;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;</span>
<span class="slc">;; Tested with PCRE [compiler must be built with PCRE already installed</span>
<span class="slc">;; else other regex routines (with different behaviours) will be used].</span>
<span class="slc">;; Regex performance appears reasonable, but file loading [of 'large'</span>
<span class="slc">;; files] performance requires tweaking to effect a significant improvement.</span>
<span class="slc">;;</span>
<span class="slc">;; Contributed by Anthony Borla</span>
<span class="slc">;; ---------------------------------------------------------------------</span>

<span class="sym">(</span>require<span class="sym">-</span>extension format<span class="sym">)</span>

<span class="sym">(</span>declare <span class="sym">(</span>fixnum<span class="sym">) (</span>disable<span class="sym">-</span>interrupts<span class="sym">) (</span>unsafe<span class="sym">) (</span>block<span class="sym">) (</span>uses regex posix<span class="sym">))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>define<span class="sym">-</span>constant VARIANTS
  <span class="sym">(</span><span class="kwa">list</span>
    <span class="str">&quot;agggtaaa|tttaccct&quot;</span> <span class="str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span> <span class="str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span>
    <span class="str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span> <span class="str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span> <span class="str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span>
    <span class="str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span> <span class="str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span> <span class="str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span><span class="sym">))</span>

<span class="slc">; --------------</span>

<span class="sym">(</span>define<span class="sym">-</span>constant IUBS
  <span class="sym">(</span><span class="kwa">list</span>
    <span class="sym">(</span><span class="kwa">cons</span> <span class="str">&quot;B&quot;</span> <span class="str">&quot;(c|g|t)&quot;</span><span class="sym">) (</span><span class="kwa">cons</span> <span class="str">&quot;D&quot;</span> <span class="str">&quot;(a|g|t)&quot;</span><span class="sym">) (</span><span class="kwa">cons</span> <span class="str">&quot;H&quot;</span> <span class="str">&quot;(a|c|t)&quot;</span><span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">cons</span> <span class="str">&quot;K&quot;</span> <span class="str">&quot;(g|t)&quot;</span><span class="sym">) (</span><span class="kwa">cons</span> <span class="str">&quot;M&quot;</span> <span class="str">&quot;(a|c)&quot;</span><span class="sym">) (</span><span class="kwa">cons</span> <span class="str">&quot;N&quot;</span> <span class="str">&quot;(a|c|g|t)&quot;</span><span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">cons</span> <span class="str">&quot;R&quot;</span> <span class="str">&quot;(a|g)&quot;</span><span class="sym">) (</span><span class="kwa">cons</span> <span class="str">&quot;S&quot;</span> <span class="str">&quot;(c|g)&quot;</span><span class="sym">) (</span><span class="kwa">cons</span> <span class="str">&quot;V&quot;</span> <span class="str">&quot;(a|c|g)&quot;</span><span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">cons</span> <span class="str">&quot;W&quot;</span> <span class="str">&quot;(a|t)&quot;</span><span class="sym">) (</span><span class="kwa">cons</span> <span class="str">&quot;Y&quot;</span> <span class="str">&quot;(c|t)&quot;</span><span class="sym">)))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>define <span class="sym">(</span><span class="kwa">load</span><span class="sym">-</span>sequence fileno<span class="sym">)</span>
  <span class="sym">(</span>let<span class="sym">* ((</span>size <span class="sym">(</span>file<span class="sym">-</span>size fileno<span class="sym">))</span>
         <span class="sym">(</span>buffer <span class="sym">(</span>make<span class="sym">-</span>string size<span class="sym">)))</span>
    <span class="sym">(</span>file<span class="sym">-</span><span class="kwa">read</span> fileno size buffer<span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">cons</span> size buffer<span class="sym">)))</span>

<span class="slc">; --------------</span>

<span class="sym">(</span>define <span class="sym">(</span>match<span class="sym">-</span>count rx buffer<span class="sym">)</span>
  <span class="sym">(</span>let match <span class="sym">((</span>spos <span class="sym">(</span>string<span class="sym">-</span>search<span class="sym">-</span>positions rx buffer <span class="num">0</span><span class="sym">)) (</span>count <span class="num">0</span><span class="sym">))</span>
    <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>boolean? spos<span class="sym">)</span>
      count
      <span class="sym">(</span>match <span class="sym">(</span>string<span class="sym">-</span>search<span class="sym">-</span>positions rx buffer <span class="sym">(</span><span class="kwa">cadr</span> <span class="sym">(</span><span class="kwa">car</span> spos<span class="sym">))) (+</span> <span class="num">1</span> count<span class="sym">)))))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>define <span class="sym">(</span>main<span class="sym">)</span>

  <span class="slc">; Load sequence and record its length</span>
  <span class="sym">(</span>let<span class="sym">* ((</span>buffer <span class="sym">(</span><span class="kwa">load</span><span class="sym">-</span>sequence fileno<span class="sym">/</span>stdin<span class="sym">)) (</span>sequence <span class="sym">(</span><span class="kwa">cdr</span> buffer<span class="sym">))</span>
         <span class="sym">(</span>initial<span class="sym">-</span><span class="kwa">length</span> <span class="sym">(</span><span class="kwa">car</span> buffer<span class="sym">)) (</span>code<span class="sym">-</span><span class="kwa">length</span> <span class="num">0</span><span class="sym">))</span>

    <span class="slc">; Remove newline and segment divider line occurrences; record new length</span>
    <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> sequence <span class="sym">(</span>string<span class="sym">-</span>substitute <span class="sym">(</span>regexp <span class="str">&quot;(&gt;.*?</span><span class="esc">\n</span><span class="str">)|(</span><span class="esc">\n</span><span class="str">)&quot;</span> #t<span class="sym">)</span> <span class="str">&quot;&quot;</span> sequence #t<span class="sym">))</span>
    <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> code<span class="sym">-</span><span class="kwa">length</span> <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">length</span> sequence<span class="sym">))</span>

    <span class="slc">; Perform regexp counts</span>
    <span class="sym">(</span>for<span class="sym">-</span>each
      <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>i<span class="sym">)</span>
        <span class="sym">(</span>format #t <span class="str">&quot;~A ~A~%&quot;</span> i <span class="sym">(</span>match<span class="sym">-</span>count i sequence<span class="sym">)))</span>
        VARIANTS<span class="sym">)</span>

    <span class="slc">; Perform regexp replacements, and record sequence length</span>
    <span class="sym">(</span>for<span class="sym">-</span>each
      <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>i<span class="sym">)</span>
        <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> sequence <span class="sym">(</span>string<span class="sym">-</span>substitute <span class="sym">(</span>regexp <span class="sym">(</span><span class="kwa">car</span> i<span class="sym">)</span> #t<span class="sym">) (</span><span class="kwa">cdr</span> i<span class="sym">)</span> sequence #t<span class="sym">)))</span>
        IUBS<span class="sym">)</span>

    <span class="slc">; Print statistics</span>
    <span class="sym">(</span>format #t <span class="str">&quot;~%~A~%~A~%~A~%&quot;</span> initial<span class="sym">-</span><span class="kwa">length</span> code<span class="sym">-</span><span class="kwa">length</span> <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">length</span> sequence<span class="sym">))))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>main<span class="sym">)</span>

