<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">*/</span>

<span class="kwa">using</span> System<span class="sym">;</span>
<span class="kwa">using</span> System<span class="sym">.</span>IO<span class="sym">;</span>
<span class="kwa">using</span> System<span class="sym">.</span>Collections<span class="sym">;</span>
<span class="kwa">using</span> System<span class="sym">.</span>Text<span class="sym">;</span>

<span class="kwc">class</span> KNucleotide <span class="sym">{</span>
   <span class="kwc">private</span> String sequence<span class="sym">;</span>
   <span class="kwc">private</span> Hashtable frequencies<span class="sym">;</span>
   <span class="kwc">private</span> <span class="kwb">int</span> k<span class="sym">;</span>

   <span class="kwd">KNucleotide</span><span class="sym">(</span>String s<span class="sym">) {</span>
      sequence <span class="sym">=</span> s<span class="sym">;</span>
      frequencies <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Hashtable</span><span class="sym">();</span>
      k <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="sym">}</span>

   <span class="kwb">static void</span> <span class="kwd">Main</span><span class="sym">(</span>string<span class="sym">[]</span> args<span class="sym">){</span>
      <span class="slc">// extract nucleotide sequence</span>
      StringBuilder builder <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">StringBuilder</span><span class="sym">();</span>
      String line<span class="sym">;</span>
      <span class="kwb">char</span> c<span class="sym">;</span>

      <span class="kwa">using</span> <span class="sym">(</span>StreamReader s <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">StreamReader</span><span class="sym">(</span>Console<span class="sym">.</span><span class="kwd">OpenStandardInput</span><span class="sym">())){</span>
         <span class="kwa">while</span> <span class="sym">( (</span>line <span class="sym">=</span> s<span class="sym">.</span><span class="kwd">ReadLine</span><span class="sym">()) !=</span> null <span class="sym">) {</span>
            c <span class="sym">=</span> line<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
            <span class="kwa">if</span> <span class="sym">((</span>c <span class="sym">==</span> <span class="str">'&gt;'</span><span class="sym">) &amp;&amp; (</span>line<span class="sym">.</span><span class="kwd">Substring</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span><span class="num">5</span><span class="sym">)==</span><span class="str">&quot;THREE&quot;</span><span class="sym">))</span> <span class="kwa">break</span><span class="sym">;</span>
         <span class="sym">}</span>

         <span class="kwa">while</span> <span class="sym">( (</span>line <span class="sym">=</span> s<span class="sym">.</span><span class="kwd">ReadLine</span><span class="sym">()) !=</span> null <span class="sym">) {</span>
            c <span class="sym">=</span> line<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
            <span class="kwa">if</span> <span class="sym">(</span>c <span class="sym">==</span> <span class="str">'&gt;'</span><span class="sym">)</span>
               <span class="kwa">break</span><span class="sym">;</span>
            <span class="kwa">else if</span> <span class="sym">(</span>c <span class="sym">!=</span> <span class="str">';'</span><span class="sym">)</span>
               builder<span class="sym">.</span><span class="kwd">Append</span><span class="sym">(</span>line<span class="sym">.</span><span class="kwd">ToUpper</span><span class="sym">());</span>
         <span class="sym">}</span>
      <span class="sym">}</span>

      <span class="slc">// calculate nucleotide frequencies</span>
      KNucleotide kn <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">KNucleotide</span><span class="sym">(</span> builder<span class="sym">.</span><span class="kwd">ToString</span><span class="sym">() );</span>
      kn<span class="sym">.</span><span class="kwd">WriteFrequencies</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
      kn<span class="sym">.</span><span class="kwd">WriteFrequencies</span><span class="sym">(</span><span class="num">2</span><span class="sym">);</span>

      kn<span class="sym">.</span><span class="kwd">WriteCount</span><span class="sym">(</span><span class="str">&quot;GGT&quot;</span><span class="sym">);</span>
      kn<span class="sym">.</span><span class="kwd">WriteCount</span><span class="sym">(</span><span class="str">&quot;GGTA&quot;</span><span class="sym">);</span>
      kn<span class="sym">.</span><span class="kwd">WriteCount</span><span class="sym">(</span><span class="str">&quot;GGTATT&quot;</span><span class="sym">);</span>
      kn<span class="sym">.</span><span class="kwd">WriteCount</span><span class="sym">(</span><span class="str">&quot;GGTATTTTAATT&quot;</span><span class="sym">);</span>
      kn<span class="sym">.</span><span class="kwd">WriteCount</span><span class="sym">(</span><span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="sym">);</span>
   <span class="sym">}</span>


   <span class="kwb">void</span> <span class="kwd">WriteFrequencies</span><span class="sym">(</span><span class="kwb">int</span> nucleotideLength<span class="sym">) {</span>
      <span class="kwd">GenerateFrequencies</span><span class="sym">(</span>nucleotideLength<span class="sym">);</span>

      KeyValue<span class="sym">[]</span> items <span class="sym">=</span> <span class="kwa">new</span> KeyValue<span class="sym">[</span>frequencies<span class="sym">.</span>Count<span class="sym">];</span>
      frequencies<span class="sym">.</span>Values<span class="sym">.</span><span class="kwd">CopyTo</span><span class="sym">(</span>items<span class="sym">,</span> <span class="num">0</span><span class="sym">);</span>
      <span class="kwb">int</span> sum <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
      <span class="kwd">foreach</span> <span class="sym">(</span>KeyValue each in items<span class="sym">)</span> sum <span class="sym">+= (</span><span class="kwb">int</span><span class="sym">)</span>each<span class="sym">.</span>v<span class="sym">;</span>

      Array<span class="sym">.</span><span class="kwd">Sort</span><span class="sym">(</span>items<span class="sym">,</span> <span class="kwa">new</span> <span class="kwd">SortByFrequencyAndCode</span><span class="sym">() );</span>
      <span class="kwd">foreach</span> <span class="sym">(</span>KeyValue each in items<span class="sym">) {</span>
         <span class="kwb">double</span> percent <span class="sym">= (</span><span class="kwb">double</span><span class="sym">)((</span><span class="kwb">int</span><span class="sym">)</span>each<span class="sym">.</span>v<span class="sym">)/(</span><span class="kwb">double</span><span class="sym">)</span>sum <span class="sym">*</span> <span class="num">100.0</span><span class="sym">;</span>
         Console<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span><span class="str">&quot;{0} {1:f3}&quot;</span><span class="sym">, (</span>string<span class="sym">)</span>each<span class="sym">.</span>k<span class="sym">,</span> percent <span class="sym">);</span>
      <span class="sym">}</span>
      Console<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span><span class="str">&quot;&quot;</span><span class="sym">);</span>
   <span class="sym">}</span>

   <span class="kwb">void</span> <span class="kwd">WriteCount</span><span class="sym">(</span>String nucleotideFragment<span class="sym">) {</span>
      <span class="kwd">GenerateFrequencies</span><span class="sym">(</span>nucleotideFragment<span class="sym">.</span>Length<span class="sym">);</span>

      <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
      object item<span class="sym">;</span>
      <span class="kwa">if</span> <span class="sym">((</span>item <span class="sym">=</span> frequencies<span class="sym">[</span>nucleotideFragment<span class="sym">]) !=</span> null<span class="sym">)</span>
         count <span class="sym">= ((</span>KeyValue<span class="sym">)</span>item<span class="sym">).</span>v<span class="sym">;</span>
      Console<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span><span class="str">&quot;{0}</span><span class="esc">\t</span><span class="str">{1}&quot;</span><span class="sym">,</span> count<span class="sym">,</span> nucleotideFragment <span class="sym">);</span>
   <span class="sym">}</span>


   <span class="kwc">private</span> <span class="kwb">void</span> <span class="kwd">GenerateFrequencies</span><span class="sym">(</span><span class="kwb">int</span> length<span class="sym">) {</span>
      k <span class="sym">=</span> length<span class="sym">;</span>
      frequencies<span class="sym">.</span><span class="kwd">Clear</span><span class="sym">();</span>
      <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> frame<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> frame<span class="sym">&lt;</span>k<span class="sym">;</span> frame<span class="sym">++)</span> <span class="kwd">KFrequency</span><span class="sym">(</span>frame<span class="sym">);</span>
   <span class="sym">}</span>

   <span class="kwc">private</span> <span class="kwb">void</span> <span class="kwd">KFrequency</span><span class="sym">(</span><span class="kwb">int</span> readingFrame<span class="sym">) {</span>
      <span class="kwb">int</span> n <span class="sym">=</span> sequence<span class="sym">.</span>Length <span class="sym">-</span> k <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
      object item<span class="sym">;</span>
      <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span>readingFrame<span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">+=</span>k<span class="sym">) {</span>
         String knucleo <span class="sym">=</span> sequence<span class="sym">.</span><span class="kwd">Substring</span><span class="sym">(</span>i<span class="sym">,</span>k<span class="sym">);</span>
         <span class="kwa">if</span> <span class="sym">( (</span>item <span class="sym">=</span> frequencies<span class="sym">[</span>knucleo<span class="sym">]) !=</span> null<span class="sym">)</span>
            <span class="sym">((</span>KeyValue<span class="sym">)</span>item<span class="sym">).</span>v<span class="sym">++;</span>
         <span class="kwa">else</span>
            frequencies<span class="sym">[</span>knucleo<span class="sym">] =</span> <span class="kwa">new</span> <span class="kwd">KeyValue</span><span class="sym">(</span>knucleo<span class="sym">,</span><span class="num">1</span><span class="sym">);</span>
      <span class="sym">}</span>
   <span class="sym">}</span>

   <span class="kwc">private class</span> KeyValue <span class="sym">{</span>
      internal String k<span class="sym">;</span>
      internal <span class="kwb">int</span> v<span class="sym">;</span>

      internal <span class="kwd">KeyValue</span><span class="sym">(</span>String k<span class="sym">,</span> <span class="kwb">int</span> v<span class="sym">) {</span>
         <span class="kwa">this</span><span class="sym">.</span>k <span class="sym">=</span> k<span class="sym">;</span>
         <span class="kwa">this</span><span class="sym">.</span>v <span class="sym">=</span> v<span class="sym">;</span>
      <span class="sym">}</span>
   <span class="sym">}</span>

   <span class="kwc">private class</span> SortByFrequencyAndCode <span class="sym">:</span> IComparer <span class="sym">{</span>
      internal <span class="kwd">SortByFrequencyAndCode</span><span class="sym">() {}</span>

      <span class="slc">// Sort descending by Frequency and if equal, sort ascending by Code</span>
      <span class="kwb">int</span> IComparer<span class="sym">.</span><span class="kwd">Compare</span><span class="sym">(</span>object o1<span class="sym">,</span> object o2<span class="sym">) {</span>
         KeyValue item1 <span class="sym">= (</span>KeyValue<span class="sym">)</span>o1<span class="sym">;</span>
         KeyValue item2 <span class="sym">= (</span>KeyValue<span class="sym">)</span>o2<span class="sym">;</span>

         <span class="kwb">int</span> comparison <span class="sym">=</span> item2<span class="sym">.</span>v<span class="sym">.</span><span class="kwd">CompareTo</span><span class="sym">(</span>item1<span class="sym">.</span>v<span class="sym">);</span>
         <span class="kwa">if</span> <span class="sym">(</span>comparison <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">return</span> item1<span class="sym">.</span>k<span class="sym">.</span><span class="kwd">CompareTo</span><span class="sym">(</span>item2<span class="sym">.</span>k<span class="sym">);</span>
         <span class="kwa">else return</span> comparison<span class="sym">;</span>
      <span class="sym">}</span>
   <span class="sym">}</span>
<span class="sym">}</span>




