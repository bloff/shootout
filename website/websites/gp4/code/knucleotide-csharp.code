<span class="hl com">/* The Great Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Isaac Gouy</span>
<span class="hl com">*/</span>

<span class="hl kwa">using</span> System<span class="hl sym">;</span>
<span class="hl kwa">using</span> System<span class="hl sym">.</span>IO<span class="hl sym">;</span>
<span class="hl kwa">using</span> System<span class="hl sym">.</span>Collections<span class="hl sym">;</span>
<span class="hl kwa">using</span> System<span class="hl sym">.</span>Text<span class="hl sym">;</span>

<span class="hl kwa">class</span> KNucleotide <span class="hl sym">{</span>
   <span class="hl kwa">private</span> String sequence<span class="hl sym">;</span>
   <span class="hl kwa">private</span> Hashtable frequencies<span class="hl sym">;</span>
   <span class="hl kwa">private</span> <span class="hl kwb">int</span> k<span class="hl sym">;</span>

   <span class="hl kwd">KNucleotide</span><span class="hl sym">(</span>String s<span class="hl sym">) {</span>
      sequence <span class="hl sym">=</span> s<span class="hl sym">;</span>
      frequencies <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Hashtable</span><span class="hl sym">();</span>
      k <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">static</span> <span class="hl kwb">void</span> <span class="hl kwd">Main</span><span class="hl sym">(</span><span class="hl kwb">string</span><span class="hl sym">[]</span> args<span class="hl sym">){</span>
      <span class="hl slc">// extract nucleotide sequence</span>
      StringBuilder builder <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">StringBuilder</span><span class="hl sym">();</span>
      String line<span class="hl sym">;</span>
      <span class="hl kwb">char</span> c<span class="hl sym">;</span>

      <span class="hl kwa">using</span> <span class="hl sym">(</span>StreamReader s <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">StreamReader</span><span class="hl sym">(</span>Console<span class="hl sym">.</span><span class="hl kwd">OpenStandardInput</span><span class="hl sym">())){</span>
         <span class="hl kwa">while</span> <span class="hl sym">( (</span>line <span class="hl sym">=</span> s<span class="hl sym">.</span><span class="hl kwd">ReadLine</span><span class="hl sym">()) !=</span> <span class="hl kwa">null</span> <span class="hl sym">) {</span>
            c <span class="hl sym">=</span> line<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
            <span class="hl kwa">if</span> <span class="hl sym">((</span>c <span class="hl sym">==</span> <span class="hl str">'&gt;'</span><span class="hl sym">) &amp;&amp; (</span>line<span class="hl sym">.</span><span class="hl kwd">Substring</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">5</span><span class="hl sym">)==</span><span class="hl str">&quot;THREE&quot;</span><span class="hl sym">))</span> <span class="hl kwa">break</span><span class="hl sym">;</span>
         <span class="hl sym">}</span>

         <span class="hl kwa">while</span> <span class="hl sym">( (</span>line <span class="hl sym">=</span> s<span class="hl sym">.</span><span class="hl kwd">ReadLine</span><span class="hl sym">()) !=</span> <span class="hl kwa">null</span> <span class="hl sym">) {</span>
            c <span class="hl sym">=</span> line<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>c <span class="hl sym">==</span> <span class="hl str">'&gt;'</span><span class="hl sym">)</span>
               <span class="hl kwa">break</span><span class="hl sym">;</span>
            <span class="hl kwa">else if</span> <span class="hl sym">(</span>c <span class="hl sym">!=</span> <span class="hl str">';'</span><span class="hl sym">)</span>
               builder<span class="hl sym">.</span><span class="hl kwd">Append</span><span class="hl sym">(</span>line<span class="hl sym">.</span><span class="hl kwd">ToUpper</span><span class="hl sym">());</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>

      <span class="hl slc">// calculate nucleotide frequencies</span>
      KNucleotide kn <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">KNucleotide</span><span class="hl sym">(</span> builder<span class="hl sym">.</span><span class="hl kwd">ToString</span><span class="hl sym">() );</span>
      kn<span class="hl sym">.</span><span class="hl kwd">WriteFrequencies</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">);</span>
      kn<span class="hl sym">.</span><span class="hl kwd">WriteFrequencies</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">);</span>

      kn<span class="hl sym">.</span><span class="hl kwd">WriteCount</span><span class="hl sym">(</span><span class="hl str">&quot;GGT&quot;</span><span class="hl sym">);</span>
      kn<span class="hl sym">.</span><span class="hl kwd">WriteCount</span><span class="hl sym">(</span><span class="hl str">&quot;GGTA&quot;</span><span class="hl sym">);</span>
      kn<span class="hl sym">.</span><span class="hl kwd">WriteCount</span><span class="hl sym">(</span><span class="hl str">&quot;GGTATT&quot;</span><span class="hl sym">);</span>
      kn<span class="hl sym">.</span><span class="hl kwd">WriteCount</span><span class="hl sym">(</span><span class="hl str">&quot;GGTATTTTAATT&quot;</span><span class="hl sym">);</span>
      kn<span class="hl sym">.</span><span class="hl kwd">WriteCount</span><span class="hl sym">(</span><span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl sym">);</span>
   <span class="hl sym">}</span>


   <span class="hl kwb">void</span> <span class="hl kwd">WriteFrequencies</span><span class="hl sym">(</span><span class="hl kwb">int</span> nucleotideLength<span class="hl sym">) {</span>
      <span class="hl kwd">GenerateFrequencies</span><span class="hl sym">(</span>nucleotideLength<span class="hl sym">);</span>

      KeyValue<span class="hl sym">[]</span> items <span class="hl sym">=</span> <span class="hl kwa">new</span> KeyValue<span class="hl sym">[</span>frequencies<span class="hl sym">.</span>Count<span class="hl sym">];</span>
      frequencies<span class="hl sym">.</span>Values<span class="hl sym">.</span><span class="hl kwd">CopyTo</span><span class="hl sym">(</span>items<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">);</span>
      <span class="hl kwb">int</span> sum <span class="hl sym">=</span> sequence<span class="hl sym">.</span>Length <span class="hl sym">-</span> nucleotideLength <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>

      Array<span class="hl sym">.</span><span class="hl kwd">Sort</span><span class="hl sym">(</span>items<span class="hl sym">,</span> <span class="hl kwa">new</span> <span class="hl kwd">SortByFrequencyAndCode</span><span class="hl sym">() );</span>
      <span class="hl kwa">foreach</span> <span class="hl sym">(</span>KeyValue each in items<span class="hl sym">) {</span>
         <span class="hl kwb">double</span> percent <span class="hl sym">= (</span><span class="hl kwb">double</span><span class="hl sym">)((</span><span class="hl kwb">int</span><span class="hl sym">)</span>each<span class="hl sym">.</span>v<span class="hl sym">)/(</span><span class="hl kwb">double</span><span class="hl sym">)</span>sum <span class="hl sym">*</span> <span class="hl num">100.0</span><span class="hl sym">;</span>
         Console<span class="hl sym">.</span><span class="hl kwd">WriteLine</span><span class="hl sym">(</span><span class="hl str">&quot;{0} {1:f3}&quot;</span><span class="hl sym">, (</span><span class="hl kwb">string</span><span class="hl sym">)</span>each<span class="hl sym">.</span>k<span class="hl sym">,</span> percent <span class="hl sym">);</span>
      <span class="hl sym">}</span>
      Console<span class="hl sym">.</span><span class="hl kwd">WriteLine</span><span class="hl sym">(</span><span class="hl str">&quot;&quot;</span><span class="hl sym">);</span>
   <span class="hl sym">}</span>

   <span class="hl kwb">void</span> <span class="hl kwd">WriteCount</span><span class="hl sym">(</span>String nucleotideFragment<span class="hl sym">) {</span>
      <span class="hl kwd">GenerateFrequencies</span><span class="hl sym">(</span>nucleotideFragment<span class="hl sym">.</span>Length<span class="hl sym">);</span>

      <span class="hl kwb">int</span> count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwb">object</span> item<span class="hl sym">;</span>
      <span class="hl kwa">if</span> <span class="hl sym">((</span>item <span class="hl sym">=</span> frequencies<span class="hl sym">[</span>nucleotideFragment<span class="hl sym">]) !=</span> <span class="hl kwa">null</span><span class="hl sym">)</span>
         count <span class="hl sym">= ((</span>KeyValue<span class="hl sym">)</span>item<span class="hl sym">).</span>v<span class="hl sym">;</span>
      Console<span class="hl sym">.</span><span class="hl kwd">WriteLine</span><span class="hl sym">(</span><span class="hl str">&quot;{0}</span><span class="hl esc">\t</span><span class="hl str">{1}&quot;</span><span class="hl sym">,</span> count<span class="hl sym">,</span> nucleotideFragment <span class="hl sym">);</span>
   <span class="hl sym">}</span>


   <span class="hl kwa">private</span> <span class="hl kwb">void</span> <span class="hl kwd">GenerateFrequencies</span><span class="hl sym">(</span><span class="hl kwb">int</span> length<span class="hl sym">) {</span>
      k <span class="hl sym">=</span> length<span class="hl sym">;</span>
      frequencies<span class="hl sym">.</span><span class="hl kwd">Clear</span><span class="hl sym">();</span>
      <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwb">int</span> frame<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> frame<span class="hl sym">&lt;</span>k<span class="hl sym">;</span> frame<span class="hl sym">++)</span> <span class="hl kwd">KFrequency</span><span class="hl sym">(</span>frame<span class="hl sym">);</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">private</span> <span class="hl kwb">void</span> <span class="hl kwd">KFrequency</span><span class="hl sym">(</span><span class="hl kwb">int</span> readingFrame<span class="hl sym">) {</span>
      <span class="hl kwb">int</span> n <span class="hl sym">=</span> sequence<span class="hl sym">.</span>Length <span class="hl sym">-</span> k <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl kwb">object</span> item<span class="hl sym">;</span>
      <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span>readingFrame<span class="hl sym">;</span> i<span class="hl sym">&lt;</span>n<span class="hl sym">;</span> i<span class="hl sym">+=</span>k<span class="hl sym">) {</span>
         String knucleo <span class="hl sym">=</span> sequence<span class="hl sym">.</span><span class="hl kwd">Substring</span><span class="hl sym">(</span>i<span class="hl sym">,</span>k<span class="hl sym">);</span>
         <span class="hl kwa">if</span> <span class="hl sym">( (</span>item <span class="hl sym">=</span> frequencies<span class="hl sym">[</span>knucleo<span class="hl sym">]) !=</span> <span class="hl kwa">null</span><span class="hl sym">)</span>
            <span class="hl sym">((</span>KeyValue<span class="hl sym">)</span>item<span class="hl sym">).</span>v<span class="hl sym">++;</span>
         <span class="hl kwa">else</span>
            frequencies<span class="hl sym">[</span>knucleo<span class="hl sym">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">KeyValue</span><span class="hl sym">(</span>knucleo<span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">);</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">private class</span> KeyValue <span class="hl sym">{</span>
      <span class="hl kwa">internal</span> String k<span class="hl sym">;</span>
      <span class="hl kwa">internal</span> <span class="hl kwb">int</span> v<span class="hl sym">;</span>

      <span class="hl kwa">internal</span> <span class="hl kwd">KeyValue</span><span class="hl sym">(</span>String k<span class="hl sym">,</span> <span class="hl kwb">int</span> v<span class="hl sym">) {</span>
         <span class="hl kwa">this</span><span class="hl sym">.</span>k <span class="hl sym">=</span> k<span class="hl sym">;</span>
         <span class="hl kwa">this</span><span class="hl sym">.</span>v <span class="hl sym">=</span> v<span class="hl sym">;</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">private class</span> SortByFrequencyAndCode <span class="hl sym">:</span> IComparer <span class="hl sym">{</span>
      <span class="hl kwa">internal</span> <span class="hl kwd">SortByFrequencyAndCode</span><span class="hl sym">() {}</span>

      <span class="hl slc">// Sort descending by Frequency and if equal, sort ascending by Code</span>
      <span class="hl kwb">int</span> IComparer<span class="hl sym">.</span><span class="hl kwd">Compare</span><span class="hl sym">(</span><span class="hl kwb">object</span> o1<span class="hl sym">,</span> <span class="hl kwb">object</span> o2<span class="hl sym">) {</span>
         KeyValue item1 <span class="hl sym">= (</span>KeyValue<span class="hl sym">)</span>o1<span class="hl sym">;</span>
         KeyValue item2 <span class="hl sym">= (</span>KeyValue<span class="hl sym">)</span>o2<span class="hl sym">;</span>

         <span class="hl kwb">int</span> comparison <span class="hl sym">=</span> item2<span class="hl sym">.</span>v<span class="hl sym">.</span><span class="hl kwd">CompareTo</span><span class="hl sym">(</span>item1<span class="hl sym">.</span>v<span class="hl sym">);</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>comparison <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">return</span> item1<span class="hl sym">.</span>k<span class="hl sym">.</span><span class="hl kwd">CompareTo</span><span class="hl sym">(</span>item2<span class="hl sym">.</span>k<span class="hl sym">);</span>
         <span class="hl kwa">else return</span> comparison<span class="hl sym">;</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>




