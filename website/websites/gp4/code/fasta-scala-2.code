<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">*/</span>

<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.</span>_

<span class="kwa">object</span> fasta <span class="sym">{</span>
   <span class="kwa">def</span> main<span class="sym">(</span>args<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]) = {</span>

      <span class="kwa">val</span> _ALU <span class="sym">=</span>
         <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span> <span class="sym">+</span>
         <span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span> <span class="sym">+</span>
         <span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span> <span class="sym">+</span>
         <span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span> <span class="sym">+</span>
         <span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span> <span class="sym">+</span>
         <span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span> <span class="sym">+</span>
         <span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>

      <span class="kwa">val</span> ALU <span class="sym">=</span> _ALU<span class="sym">.</span>getBytes

      <span class="kwa">val</span> _IUB <span class="sym">=</span> <span class="kwc">Array</span><span class="sym">(</span>
         Pair<span class="sym">(</span><span class="str">'a'</span><span class="sym">,</span> <span class="num">0.27</span><span class="sym">),</span>
         Pair<span class="sym">(</span><span class="str">'c'</span><span class="sym">,</span> <span class="num">0.12</span><span class="sym">),</span>
         Pair<span class="sym">(</span><span class="str">'g'</span><span class="sym">,</span> <span class="num">0.12</span><span class="sym">),</span>
         Pair<span class="sym">(</span><span class="str">'t'</span><span class="sym">,</span> <span class="num">0.27</span><span class="sym">),</span>

         Pair<span class="sym">(</span><span class="str">'B'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span>
         Pair<span class="sym">(</span><span class="str">'D'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span>
         Pair<span class="sym">(</span><span class="str">'H'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span>
         Pair<span class="sym">(</span><span class="str">'K'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span>
         Pair<span class="sym">(</span><span class="str">'M'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span>
         Pair<span class="sym">(</span><span class="str">'N'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span>
         Pair<span class="sym">(</span><span class="str">'R'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span>
         Pair<span class="sym">(</span><span class="str">'S'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span>
         Pair<span class="sym">(</span><span class="str">'V'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span>
         Pair<span class="sym">(</span><span class="str">'W'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span>
         Pair<span class="sym">(</span><span class="str">'Y'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">)</span>
      <span class="sym">)</span>

      <span class="kwa">val</span> IUB <span class="sym">=</span> makeCumulative<span class="sym">(</span>_IUB<span class="sym">)</span>

      <span class="kwa">val</span> _HomoSapiens <span class="sym">=</span> <span class="kwc">Array</span><span class="sym">(</span>
         Pair<span class="sym">(</span><span class="str">'a'</span><span class="sym">,</span> <span class="num">0.3029549426680</span><span class="sym">),</span>
         Pair<span class="sym">(</span><span class="str">'c'</span><span class="sym">,</span> <span class="num">0.1979883004921</span><span class="sym">),</span>
         Pair<span class="sym">(</span><span class="str">'g'</span><span class="sym">,</span> <span class="num">0.1975473066391</span><span class="sym">),</span>
         Pair<span class="sym">(</span><span class="str">'t'</span><span class="sym">,</span> <span class="num">0.3015094502008</span><span class="sym">)</span>
      <span class="sym">)</span>

      <span class="kwa">val</span> HomoSapiens <span class="sym">=</span> makeCumulative<span class="sym">(</span>_HomoSapiens<span class="sym">)</span>


      <span class="kwa">var</span> n <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">(</span><span class="num">0</span><span class="sym">))</span>
      <span class="kwa">val</span> w <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">BufferedWriter</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwc">OutputStreamWriter</span><span class="sym">(</span><span class="kwc">System</span><span class="sym">.</span>out<span class="sym">))</span>

      makeRepeatFasta<span class="sym">(</span><span class="str">&quot;ONE&quot;</span><span class="sym">,</span> <span class="str">&quot;Homo sapiens alu&quot;</span><span class="sym">,</span> ALU<span class="sym">,</span> n<span class="sym">*</span><span class="num">2</span><span class="sym">,</span> w<span class="sym">)</span>
      makeRandomFasta<span class="sym">(</span><span class="str">&quot;TWO&quot;</span><span class="sym">,</span> <span class="str">&quot;IUB ambiguity codes&quot;</span><span class="sym">,</span> IUB<span class="sym">,</span> n<span class="sym">*</span><span class="num">3</span><span class="sym">,</span> w<span class="sym">)</span>
      makeRandomFasta<span class="sym">(</span><span class="str">&quot;THREE&quot;</span><span class="sym">,</span> <span class="str">&quot;Homo sapiens frequency&quot;</span><span class="sym">,</span> HomoSapiens<span class="sym">,</span> n<span class="sym">*</span><span class="num">5</span><span class="sym">,</span> w<span class="sym">)</span>

      w<span class="sym">.</span>close
   <span class="sym">}</span>


   <span class="kwa">class</span> Frequency<span class="sym">(</span>_code<span class="sym">:</span> <span class="kwb">byte</span><span class="sym">,</span> _percent<span class="sym">:</span> <span class="kwb">double</span><span class="sym">){</span>
      <span class="kwa">var</span> code <span class="sym">=</span> _code<span class="sym">;</span> <span class="kwa">var</span> percent <span class="sym">=</span> _percent<span class="sym">;</span>
   <span class="sym">}</span>

   <span class="kwa">def</span> makeCumulative<span class="sym">(</span>a<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span>Pair<span class="sym">[</span>Char<span class="sym">,</span><span class="kwb">double</span><span class="sym">]]) = {</span>
      <span class="kwa">var</span> cp <span class="sym">=</span> <span class="num">0.0</span>
      a map <span class="sym">(</span>frequency <span class="sym">=&gt;</span>
         frequency match <span class="sym">{</span>
            <span class="kwa">case</span> Pair<span class="sym">(</span>code<span class="sym">,</span>percent<span class="sym">) =&gt;</span>
               cp <span class="sym">=</span> cp <span class="sym">+</span> percent<span class="sym">;</span> <span class="kwa">new</span> Frequency<span class="sym">(</span>code<span class="sym">.</span>toByte<span class="sym">,</span>cp<span class="sym">)</span>
         <span class="sym">}</span>
      <span class="sym">)</span>
   <span class="sym">}</span>


   <span class="kwa">val</span> LineLength <span class="sym">=</span> <span class="num">60</span>

   <span class="kwa">def</span> makeRandomFasta<span class="sym">(</span>id<span class="sym">:</span> <span class="kwc">String</span><span class="sym">,</span> desc<span class="sym">:</span> <span class="kwc">String</span><span class="sym">,</span> a<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span>Frequency<span class="sym">],</span>
          _n<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,</span> w<span class="sym">:</span> <span class="kwc">BufferedWriter</span><span class="sym">) = {</span>

      <span class="kwa">def</span> selectRandom<span class="sym">():</span> <span class="kwc">Byte</span> <span class="sym">= {</span>
         <span class="kwa">val</span> n <span class="sym">=</span> a<span class="sym">.</span>length
         <span class="kwa">val</span> r <span class="sym">=</span> RandomNumber<span class="sym">.</span>scaledTo<span class="sym">(</span><span class="num">1.0</span><span class="sym">)</span>

         <span class="kwa">var</span> i <span class="sym">=</span> <span class="num">0</span>
         <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> n<span class="sym">) {</span>
            <span class="kwa">if</span> <span class="sym">(</span>r <span class="sym">&lt;</span> a<span class="sym">(</span>i<span class="sym">).</span>percent<span class="sym">)</span> <span class="kwa">return</span> a<span class="sym">(</span>i<span class="sym">).</span>code
            i <span class="sym">=</span> i<span class="sym">+</span><span class="num">1</span>
         <span class="sym">}</span>
         <span class="kwa">return</span> a<span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">).</span>code
      <span class="sym">}</span>

      w<span class="sym">.</span>write<span class="sym">(</span><span class="str">&quot;&gt;&quot;</span> <span class="sym">+</span> id <span class="sym">+</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span> desc <span class="sym">+</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>

      <span class="kwa">var</span> n <span class="sym">=</span> _n
      <span class="kwa">while</span> <span class="sym">(</span>n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {</span>
         <span class="kwa">val</span> m <span class="sym">=</span> <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&lt;</span> LineLength<span class="sym">)</span> n <span class="kwa">else</span> LineLength

         <span class="kwa">var</span> i <span class="sym">=</span> <span class="num">0</span>
         <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> m<span class="sym">){</span>
            w<span class="sym">.</span>write<span class="sym">(</span> selectRandom<span class="sym">() )</span>
            i <span class="sym">=</span> i<span class="sym">+</span><span class="num">1</span>
         <span class="sym">}</span>

         w<span class="sym">.</span>newLine
         n <span class="sym">=</span> n <span class="sym">-</span> LineLength
      <span class="sym">}</span>
   <span class="sym">}</span>


   <span class="kwa">def</span> makeRepeatFasta<span class="sym">(</span>id<span class="sym">:</span> <span class="kwc">String</span><span class="sym">,</span> desc<span class="sym">:</span> <span class="kwc">String</span><span class="sym">,</span> alu<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwb">byte</span><span class="sym">],</span>
          _n<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,</span> w<span class="sym">:</span> <span class="kwc">BufferedWriter</span><span class="sym">) =</span>
   <span class="sym">{</span>
      <span class="kwa">var</span> n <span class="sym">=</span> _n<span class="sym">;</span> <span class="kwa">var</span> k <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> <span class="kwa">val</span> kn <span class="sym">=</span> alu<span class="sym">.</span>length<span class="sym">;</span>
      w<span class="sym">.</span>write<span class="sym">(</span><span class="str">&quot;&gt;&quot;</span> <span class="sym">+</span> id <span class="sym">+</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span> desc <span class="sym">+</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>

      <span class="kwa">while</span> <span class="sym">(</span>n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {</span>
         <span class="kwa">val</span> m <span class="sym">=</span> <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&lt;</span> LineLength<span class="sym">)</span> n <span class="kwa">else</span> LineLength

         <span class="kwa">var</span> i <span class="sym">=</span> <span class="num">0</span>
         <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> m<span class="sym">){</span>
            <span class="kwa">if</span> <span class="sym">(</span>k <span class="sym">==</span> kn<span class="sym">)</span> k <span class="sym">=</span> <span class="num">0</span>
            w<span class="sym">.</span>write<span class="sym">(</span> alu<span class="sym">(</span>k<span class="sym">) )</span>
            k <span class="sym">=</span> k<span class="sym">+</span><span class="num">1</span>

            i <span class="sym">=</span> i<span class="sym">+</span><span class="num">1</span>
         <span class="sym">}</span>

         w<span class="sym">.</span>newLine
         n <span class="sym">=</span> n <span class="sym">-</span> LineLength
      <span class="sym">}</span>
   <span class="sym">}</span>
<span class="sym">}</span>


<span class="kwa">object</span> RandomNumber <span class="sym">{</span>
   <span class="kwa">private val</span> IM <span class="sym">=</span> <span class="num">139968</span>
   <span class="kwa">private val</span> IA <span class="sym">=</span> <span class="num">3877</span>
   <span class="kwa">private val</span> IC <span class="sym">=</span> <span class="num">29573</span>
   <span class="kwa">private var</span> seed <span class="sym">=</span> <span class="num">42</span>

   <span class="kwa">def</span> scaledTo<span class="sym">(</span>max<span class="sym">:</span> <span class="kwb">double</span><span class="sym">) = {</span>
      seed <span class="sym">= (</span>seed <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">) %</span> IM
      max <span class="sym">*</span> seed <span class="sym">/</span> IM
   <span class="sym">}</span>
<span class="sym">}</span>
