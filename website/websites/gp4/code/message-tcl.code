<span class="slc">## The Computer Language Shootout</span>
<span class="slc">## http://shootout.alioth.debian.org/</span>
<span class="slc">## Contributed by Donal Fellows</span>
<span class="slc">##</span>
<span class="slc">## $Id: message-tcl.code,v 1.11 2007-04-06 23:46:53 igouy-guest Exp $</span>

<span class="kwa">package</span> require Thread

<span class="kwa">set</span> N <span class="sym">[</span><span class="kwa">lindex</span> <span class="kwb">$argv</span> <span class="num">0</span><span class="sym">]</span>
<span class="kwa">set</span> Nthreads <span class="num">500</span>

<span class="slc"># Set up the worker threads to chain to each other</span>
<span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> i <span class="num">0</span><span class="sym">} {</span><span class="kwb">$i</span> <span class="sym">&lt;</span> <span class="kwb">$Nthreads</span><span class="sym">} {</span><span class="kwa">incr</span> i<span class="sym">} {</span>
    <span class="kwa">set</span> thread <span class="sym">[</span>thread<span class="sym">::</span>create <span class="sym">{</span>
        <span class="kwa">proc</span> doit x <span class="sym">{</span>thread<span class="sym">::</span><span class="kwa">send</span> <span class="sym">-</span>async $<span class="sym">::</span>next <span class="str">&quot;doit [incr x]&quot;</span><span class="sym">}</span>
        thread<span class="sym">::</span>wait
    <span class="sym">}]</span>
    <span class="kwa">if</span> <span class="sym">{</span><span class="kwb">$i</span><span class="sym">} {</span>thread<span class="sym">::</span><span class="kwa">send</span> <span class="kwb">$last</span> <span class="str">&quot;set next $thread&quot;</span><span class="sym">} {</span><span class="kwa">set</span> first <span class="kwb">$thread</span><span class="sym">}</span>
    <span class="kwa">set</span> last <span class="kwb">$thread</span>
<span class="sym">}</span>
<span class="slc"># Reconfigure the last worker to act as a collector</span>
thread<span class="sym">::</span><span class="kwa">send</span> <span class="kwb">$last</span> <span class="str">&quot;set total [expr $N*$Nthreads]&quot;</span>
thread<span class="sym">::</span><span class="kwa">send</span> <span class="kwb">$last</span> <span class="sym">{</span>
    <span class="kwa">set</span> sum <span class="num">0</span>
    <span class="kwa">proc</span> doit x <span class="sym">{</span>
        <span class="kwa">global</span> sum total
        <span class="kwa">if</span> <span class="sym">{[</span><span class="kwa">incr</span> sum <span class="sym">[</span><span class="kwa">incr</span> x<span class="sym">]] &gt;=</span> <span class="kwb">$total</span><span class="sym">} {</span>
            <span class="kwa">puts</span> <span class="kwb">$sum</span>
            <span class="kwa">exit</span>
        <span class="sym">}</span>
    <span class="sym">}</span>
<span class="sym">}</span>
<span class="slc"># Inject the messages and wait for the collector to finish things off</span>
<span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> i <span class="num">0</span><span class="sym">} {</span><span class="kwb">$i</span> <span class="sym">&lt;</span> <span class="kwb">$N</span><span class="sym">} {</span><span class="kwa">incr</span> i<span class="sym">} {</span>thread<span class="sym">::</span><span class="kwa">send</span> <span class="sym">-</span>async <span class="kwb">$first</span> <span class="str">&quot;doit 0&quot;</span><span class="sym">}</span>
thread<span class="sym">::</span>wait
