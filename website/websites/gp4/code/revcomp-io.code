<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org</span>
<span class="com"></span>
<span class="com">   Contributed by Ian Osgood */</span>

seq <span class="sym">:=</span> Sequence clone <span class="kwa">do</span><span class="sym">(</span>
    complementAt <span class="sym">:=</span> <span class="kwd">method</span><span class="sym">(</span>i<span class="sym">,</span>
        <span class="str">&quot;TVGHefCDijMlKNopqYSAABWxRz&quot;</span> <span class="kwd">at</span><span class="sym">(</span><span class="kwd">at</span><span class="sym">(</span>i<span class="sym">)-</span><span class="num">65</span><span class="sym">)</span>  <span class="dir">#</span> <span class="dstr">&quot;A&quot;</span><span class="dir"> at(0)</span>
    <span class="sym">)</span>
    revComp <span class="sym">:=</span> <span class="kwd">method</span><span class="sym">(</span> <span class="kwa">if</span> <span class="sym">(</span>size <span class="sym">==</span> <span class="num">0</span><span class="sym">,</span> <span class="kwa">return</span> self<span class="sym">)</span>
        j <span class="sym">:=</span> uppercase size
        <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> size <span class="sym">/</span> <span class="num">2</span> <span class="sym">-</span> <span class="num">0.25</span><span class="sym">,</span>
            j <span class="sym">=</span> j <span class="sym">-</span> <span class="num">1</span>
            t <span class="sym">:=</span> <span class="kwd">complementAt</span><span class="sym">(</span>j<span class="sym">)</span>
            <span class="kwd">atPut</span><span class="sym">(</span>j<span class="sym">,</span> <span class="kwd">complementAt</span><span class="sym">(</span>i<span class="sym">))</span> <span class="kwd">atPut</span><span class="sym">(</span>i<span class="sym">,</span> t<span class="sym">)</span>
        <span class="sym">)</span>
        self
    <span class="sym">)</span>
    output <span class="sym">:=</span> <span class="kwd">method</span><span class="sym">(</span> <span class="kwa">if</span> <span class="sym">(</span>size <span class="sym">==</span> <span class="num">0</span><span class="sym">,</span> <span class="kwa">return</span> self<span class="sym">)</span>
        width <span class="sym">:=</span> <span class="num">60</span>
        start <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span> end <span class="sym">:=</span> width
        <span class="kwa">while</span> <span class="sym">(</span>end <span class="sym">&lt;</span> size<span class="sym">,</span>
            <span class="kwd">slice</span><span class="sym">(</span>start<span class="sym">,</span>end<span class="sym">)</span> println
            start <span class="sym">=</span> end<span class="sym">;</span> end <span class="sym">=</span> end <span class="sym">+</span> width
        <span class="sym">)</span>
        <span class="kwd">slice</span><span class="sym">(</span>start<span class="sym">)</span> println
        self
    <span class="sym">)</span>
<span class="sym">)</span>

input <span class="sym">:=</span> File standardInput
<span class="kwa">while</span> <span class="sym">(</span>line <span class="sym">:=</span> input readLine<span class="sym">,</span>
    <span class="kwa">if</span> <span class="sym">(</span>line <span class="kwd">beginsWithSeq</span><span class="sym">(</span><span class="str">&quot;&gt;&quot;</span><span class="sym">),</span>
        seq revComp output empty<span class="sym">;</span> line println<span class="sym">,</span>
        seq <span class="kwd">appendSeq</span><span class="sym">(</span>line<span class="sym">) )</span>
<span class="sym">)</span>
seq revComp output
