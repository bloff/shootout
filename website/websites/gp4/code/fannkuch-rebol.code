REBOL <span class="sym">[</span>
	Title<span class="sym">:</span> <span class="str">&quot;fannkuch&quot;</span>
	Author<span class="sym">:</span> <span class="str">&quot;Robert Brandner&quot;</span>
<span class="sym">]</span>

n<span class="sym">:</span> either n<span class="sym">:</span> system<span class="sym">/</span>script<span class="sym">/</span>args <span class="sym">[</span>to integer<span class="sym">!</span> n<span class="sym">] [</span><span class="num">7</span><span class="sym">]</span>

times<span class="sym">-</span>rotated<span class="sym">:</span> make block<span class="sym">!</span> n
insert<span class="sym">/</span>dup times<span class="sym">-</span>rotated <span class="num">0</span> n
perm<span class="sym">:</span> make block<span class="sym">!</span> n
repeat i n <span class="sym">[</span>append perm i<span class="sym">]</span>

next<span class="sym">-</span>permutation<span class="sym">:</span> does <span class="sym">[</span>
	<span class="kwa">for</span> r <span class="num">2</span> n <span class="num">1</span> <span class="sym">[</span>
		<span class="sym">;</span> rotate the first r items to the left
		temp<span class="sym">:</span> pick perm <span class="num">1</span>
		<span class="kwa">for</span> i <span class="kwd">1</span> <span class="sym">(</span>r <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> <span class="num">1</span> <span class="sym">[</span>poke perm <span class="kwd">i</span> <span class="sym">(</span>pick <span class="kwd">perm</span> <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">))]</span>
		poke perm r temp
		poke times<span class="sym">-</span>rotated <span class="kwd">r</span> <span class="sym">((</span>pick times<span class="sym">-</span>rotated r<span class="sym">) +</span> <span class="num">1</span><span class="sym">)</span>
		reminder<span class="sym">: (</span>pick times<span class="sym">-</span>rotated r<span class="sym">)</span> <span class="slc">// r</span>
		<span class="kwa">if</span> reminder <span class="sym">&lt;&gt;</span> <span class="num">0</span> <span class="sym">[</span><span class="kwa">return</span> perm<span class="sym">]</span>
	<span class="sym">]</span>
	<span class="kwa">return</span> none
<span class="sym">]</span>

count<span class="sym">-</span>flips<span class="sym">:</span> does <span class="sym">[</span>
	pk<span class="sym">:</span> copy perm
	cnt<span class="sym">:</span> <span class="num">0</span>
	<span class="kwa">while</span> <span class="sym">[</span>pk<span class="sym">/</span><span class="num">1</span> <span class="sym">&lt;&gt;</span> <span class="num">1</span><span class="sym">][</span>
		reverse<span class="sym">/</span>part pk pk<span class="sym">/</span><span class="num">1</span>
		cnt<span class="sym">:</span> cnt <span class="sym">+</span> <span class="num">1</span>
	<span class="sym">]</span>
	<span class="kwa">return</span> cnt
<span class="sym">]</span>

mx<span class="sym">:</span> <span class="num">0</span>
show<span class="sym">:</span> <span class="num">0</span>
<span class="kwa">while</span> <span class="sym">[</span>perm<span class="sym">] [</span>
	<span class="kwa">if</span> <span class="sym">(</span>show <span class="sym">&lt;</span> <span class="num">30</span><span class="sym">) [</span>print rejoin perm show<span class="sym">:</span> show <span class="sym">+</span> <span class="num">1</span><span class="sym">]</span>
	mx<span class="sym">:</span> max mx count<span class="sym">-</span>flips
	perm<span class="sym">:</span> next<span class="sym">-</span>permutation
<span class="sym">]</span>
print rejoin <span class="sym">[</span><span class="str">&quot;Pfannkuchen(&quot;</span> n <span class="str">&quot;) = &quot;</span> mx<span class="sym">]</span>
