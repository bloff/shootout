<span class="hl com">/**</span>
<span class="hl com"> * The Computer Language Benchmarks game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Contributed by Rodney Drenth</span>
<span class="hl com"> *</span>
<span class="hl com"> */</span>


<span class="hl dir">#include &lt;stdio.h&gt;</span>
<span class="hl dir">#include &lt;stdlib.h&gt;</span>

<span class="hl kwb">void</span> <span class="hl kwd">PrintPerm</span><span class="hl sym">(</span> <span class="hl kwb">int</span> <span class="hl sym">*</span>perm<span class="hl sym">,</span> <span class="hl kwb">int</span> n<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwa">while</span><span class="hl sym">(</span>n<span class="hl sym">-- &gt;</span><span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;%d&quot;</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">+*</span>perm<span class="hl sym">++);</span>
   <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">);</span>
<span class="hl sym">}</span>
<span class="hl dir">#define XCNG(a,b,t) {t=a;a=b;b=t;}</span>

<span class="hl kwb">int</span> <span class="hl kwd">fannkuch</span><span class="hl sym">(</span> <span class="hl kwb">int</span> n <span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwb">int</span>      <span class="hl sym">*</span>count<span class="hl sym">, *</span>perm<span class="hl sym">, *</span>perm1<span class="hl sym">, *</span>perm2<span class="hl sym">, *</span>p1<span class="hl sym">, *</span>pA<span class="hl sym">;</span>
   <span class="hl kwb">int</span>      <span class="hl sym">**</span>prmts<span class="hl sym">;</span>
   <span class="hl kwb">int</span>      flips<span class="hl sym">,</span> maxFlips<span class="hl sym">;</span>
   <span class="hl kwb">int</span>      r<span class="hl sym">,</span> i<span class="hl sym">,</span> k<span class="hl sym">,</span> m<span class="hl sym">,</span> nx<span class="hl sym">;</span>
   <span class="hl kwb">int</span>      check <span class="hl sym">=</span> <span class="hl num">30</span><span class="hl sym">;</span>

    <span class="hl kwa">if</span> <span class="hl sym">(</span>n <span class="hl sym">&lt;=</span> <span class="hl num">1</span><span class="hl sym">)</span>
      <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>

   prmts <span class="hl sym">=</span> <span class="hl kwd">calloc</span><span class="hl sym">(</span> n<span class="hl sym">,</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span> <span class="hl kwb">int</span> <span class="hl sym">*));</span>
   perm1 <span class="hl sym">=</span> pA <span class="hl sym">=</span> <span class="hl kwd">calloc</span><span class="hl sym">( (</span>n<span class="hl sym">+</span><span class="hl num">4</span><span class="hl sym">)*</span>n<span class="hl sym">,</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span><span class="hl kwb">int</span><span class="hl sym">));</span>
   perm2 <span class="hl sym">=</span> perm1 <span class="hl sym">+</span> n<span class="hl sym">;</span>
   count <span class="hl sym">=</span> perm1 <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">*</span>n<span class="hl sym">;</span>
   perm  <span class="hl sym">=</span> perm1 <span class="hl sym">+</span> <span class="hl num">3</span><span class="hl sym">*</span>n<span class="hl sym">;</span>
   p1 <span class="hl sym">=</span> perm1 <span class="hl sym">+</span> <span class="hl num">4</span><span class="hl sym">*</span>n<span class="hl sym">;</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span>r<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> r<span class="hl sym">&lt;</span>n<span class="hl sym">;</span> r<span class="hl sym">++) {</span>
      prmts<span class="hl sym">[</span>r<span class="hl sym">] =</span> perm1 <span class="hl sym">+ (</span><span class="hl num">4</span><span class="hl sym">+</span>r<span class="hl sym">)*</span>n<span class="hl sym">;</span>
      p1<span class="hl sym">[</span>r<span class="hl sym">] =</span> perm1<span class="hl sym">[</span>r<span class="hl sym">] =</span> r<span class="hl sym">;</span>
      count<span class="hl sym">[</span>r<span class="hl sym">] =</span> r<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span>nx<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">;</span> nx<span class="hl sym">&lt;</span>n<span class="hl sym">;</span> nx<span class="hl sym">++) {</span>   <span class="hl slc">// compute permutation operators</span>
      <span class="hl kwb">int</span> <span class="hl sym">*</span>p2 <span class="hl sym">=</span> prmts<span class="hl sym">[</span>nx<span class="hl sym">];</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span>i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>nx<span class="hl sym">;</span> i<span class="hl sym">++)</span> p2<span class="hl sym">[</span>i<span class="hl sym">] =</span> p1<span class="hl sym">[</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">];</span>
      p2<span class="hl sym">[</span>i<span class="hl sym">++] =</span> p1<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
      <span class="hl kwa">for</span> <span class="hl sym">( ;</span> i<span class="hl sym">&lt;</span>n<span class="hl sym">;</span> i<span class="hl sym">++)</span> p2<span class="hl sym">[</span>i<span class="hl sym">] =</span> p1<span class="hl sym">[</span>i<span class="hl sym">];</span>
      p1<span class="hl sym">=</span>p2<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   m <span class="hl sym">=</span> n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">;</span>
   maxFlips <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span>
   r <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">while</span> <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">) {</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>check<span class="hl sym">&gt;</span><span class="hl num">0</span> <span class="hl sym">) {</span>
         <span class="hl kwd">PrintPerm</span><span class="hl sym">(</span> perm1<span class="hl sym">,</span> n<span class="hl sym">);</span>
         check<span class="hl sym">--;</span>
      <span class="hl sym">}</span>
      k <span class="hl sym">=</span> perm1<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span> perm1<span class="hl sym">[</span>k<span class="hl sym">]!=</span><span class="hl num">0</span> <span class="hl sym">&amp;&amp; (</span>perm1<span class="hl sym">[</span>m<span class="hl sym">]!=</span> m<span class="hl sym">)) {</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span>i<span class="hl sym">=</span>n<span class="hl sym">; --</span>i<span class="hl sym">&gt;</span><span class="hl num">0</span><span class="hl sym">; )</span>
            perm<span class="hl sym">[</span>i<span class="hl sym">] =</span> perm1<span class="hl sym">[</span>i<span class="hl sym">];</span>
         perm<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] =</span> k<span class="hl sym">;</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span>flips<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> k<span class="hl sym">;</span> flips<span class="hl sym">++) {</span>
            <span class="hl kwb">int</span> l<span class="hl sym">, *</span>pk<span class="hl sym">;</span>
            l <span class="hl sym">= (</span>k<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)/</span><span class="hl num">2</span><span class="hl sym">;</span>
            <span class="hl kwa">for</span><span class="hl sym">(</span> pk <span class="hl sym">=</span> perm<span class="hl sym">+</span>k<span class="hl sym">;</span> l<span class="hl sym">&gt;=</span><span class="hl num">0</span><span class="hl sym">; --</span>l<span class="hl sym">) {</span>
               <span class="hl kwd">XCNG</span><span class="hl sym">(*(</span>pk<span class="hl sym">-</span>l<span class="hl sym">), *(</span>perm<span class="hl sym">+</span>l<span class="hl sym">),</span> k<span class="hl sym">);</span>
            <span class="hl sym">};</span>
            <span class="hl slc">// Note: final exchange leaves perm[0] in k</span>
          <span class="hl sym">}</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>maxFlips <span class="hl sym">&lt;</span> flips<span class="hl sym">)</span> maxFlips <span class="hl sym">=</span> flips<span class="hl sym">;</span>
      <span class="hl sym">}</span>
      r <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl kwa">while</span> <span class="hl sym">(--</span>count<span class="hl sym">[</span>r<span class="hl sym">] ==</span> <span class="hl num">0</span><span class="hl sym">) {</span>
         r <span class="hl sym">=</span> count<span class="hl sym">[</span>r<span class="hl sym">] =</span> r<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">;</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>r<span class="hl sym">==</span> n<span class="hl sym">) {</span>
            <span class="hl kwd">free</span><span class="hl sym">(</span>prmts<span class="hl sym">);</span> <span class="hl kwd">free</span><span class="hl sym">(</span>pA<span class="hl sym">);</span>
            <span class="hl kwa">return</span> maxFlips<span class="hl sym">;</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>
      <span class="hl slc">// generate permutation nx=5 first time.</span>
      <span class="hl kwd">XCNG</span><span class="hl sym">(</span>perm1<span class="hl sym">,</span>perm2<span class="hl sym">,</span>p1<span class="hl sym">);</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>r<span class="hl sym">&gt;</span><span class="hl num">1</span><span class="hl sym">)</span> nx <span class="hl sym">=</span> r<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">;</span>
      p1 <span class="hl sym">=</span> prmts<span class="hl sym">[</span>r<span class="hl sym">];</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span>i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span> nx<span class="hl sym">;</span> i<span class="hl sym">++)</span>
         perm1<span class="hl sym">[</span>i<span class="hl sym">] =</span> perm2<span class="hl sym">[</span>p1<span class="hl sym">[</span>i<span class="hl sym">]];</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl sym">(</span> <span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span><span class="hl sym">*</span> argv<span class="hl sym">[] )</span>
<span class="hl sym">{</span>
    <span class="hl kwb">int</span>      n <span class="hl sym">= (</span>argc<span class="hl sym">&gt;</span><span class="hl num">1</span><span class="hl sym">)</span> ? <span class="hl kwd">atoi</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]) :</span> <span class="hl num">1</span><span class="hl sym">;</span>
    <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;Pfannkuchen(%d) = %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl kwd">fannkuch</span><span class="hl sym">(</span>n<span class="hl sym">));</span>
<span class="hl sym">}</span>
