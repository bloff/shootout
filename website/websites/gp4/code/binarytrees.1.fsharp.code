<span class="hl sym">//</span> The Computer Language Benchmarks Game
<span class="hl sym">//</span> http<span class="hl sym">://</span>shootout.alioth.debian.org<span class="hl sym">/</span>
<span class="hl sym">//</span>
<span class="hl sym">//</span> Contributed by Robert Pickering
<span class="hl sym">//</span> Based on ocaml version by Troestler Christophe <span class="hl sym">&amp;</span> Isaac Gouy
#light
<span class="hl kwa">type</span> <span class="hl str">'a tree = Empty | Node of '</span>a tree <span class="hl sym">*</span> <span class="hl str">'a * '</span>a tree

<span class="hl kwa">let rec</span> make i d <span class="hl sym">=</span>
  <span class="hl kwa">if</span> d <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">then</span> <span class="hl kwd">Node</span><span class="hl sym">(</span>Empty<span class="hl sym">,</span> i<span class="hl sym">,</span> Empty<span class="hl sym">)</span>
  <span class="hl kwa">else</span>
    <span class="hl kwa">let</span> i2 <span class="hl sym">=</span> <span class="hl num">2</span> <span class="hl sym">*</span> i
    <span class="hl kwa">let</span> d <span class="hl sym">=</span> d <span class="hl sym">-</span> <span class="hl num">1</span>
    <span class="hl kwd">Node</span><span class="hl sym">(</span><span class="hl kwd">make</span> <span class="hl sym">(</span>i2 <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span> d<span class="hl sym">,</span> i<span class="hl sym">,</span> make i2 d<span class="hl sym">)</span>

<span class="hl kwa">let rec</span> check x <span class="hl sym">=</span> <span class="hl kwa">match</span> x <span class="hl kwa">with</span> <span class="hl sym">|</span> Empty <span class="hl sym">-&gt;</span> <span class="hl num">0</span> <span class="hl sym">|</span> <span class="hl kwd">Node</span><span class="hl sym">(</span>l<span class="hl sym">,</span> i<span class="hl sym">,</span> r<span class="hl sym">) -&gt;</span> i <span class="hl sym">+</span> check l <span class="hl sym">-</span> check r

<span class="hl kwa">let</span> min_depth <span class="hl sym">=</span> <span class="hl num">4</span>
<span class="hl kwa">let</span> max_depth <span class="hl sym">=</span>
    <span class="hl kwa">let</span> n <span class="hl sym">=</span> <span class="hl kwa">try</span> int_of_string Sys.argv.<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">with</span> _ <span class="hl sym">-&gt;</span> <span class="hl num">10</span>
    <span class="hl kwd">max</span> <span class="hl sym">(</span>min_depth <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">)</span> n
<span class="hl kwa">let</span> stretch_depth <span class="hl sym">=</span> max_depth <span class="hl sym">+</span> <span class="hl num">1</span>


<span class="hl kwa">let rec</span> loop_depths d <span class="hl sym">=</span>
  <span class="hl kwa">if</span> d <span class="hl sym">&lt;=</span> max_depth <span class="hl kwa">then</span>
    <span class="hl kwa">let</span> niter <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">&lt;&lt;&lt; (</span>max_depth <span class="hl sym">-</span> d <span class="hl sym">+</span> min_depth<span class="hl sym">)</span>
    <span class="hl kwa">let mutable</span> c <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl kwa">to</span> niter <span class="hl kwa">do</span> c <span class="hl sym">&lt;-</span> c <span class="hl sym">+</span> <span class="hl kwd">check</span><span class="hl sym">(</span>make i d<span class="hl sym">) +</span> <span class="hl kwd">check</span><span class="hl sym">(</span><span class="hl kwd">make</span> <span class="hl sym">(-</span>i<span class="hl sym">)</span> d<span class="hl sym">)</span>
    Printf.printf <span class="hl str">&quot;%i</span><span class="hl esc">\t</span> <span class="hl str">trees of depth %i</span><span class="hl esc">\t</span> <span class="hl str">check: %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> niter<span class="hl sym">)</span> d c
    <span class="hl kwd">loop_depths</span> <span class="hl sym">(</span>d <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">)</span>

<span class="hl kwa">let</span> <span class="hl kwd">main</span><span class="hl sym">() =</span>
  <span class="hl kwa">let</span> c <span class="hl sym">=</span> <span class="hl kwd">check</span> <span class="hl sym">(</span>make <span class="hl num">0</span> stretch_depth<span class="hl sym">)</span>
  Printf.printf <span class="hl str">&quot;stretch tree of depth %i</span><span class="hl esc">\t</span> <span class="hl str">check: %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> stretch_depth c
  <span class="hl kwa">let</span> long_lived_tree <span class="hl sym">=</span> make <span class="hl num">0</span> max_depth
  loop_depths min_depth
  Printf.printf <span class="hl str">&quot;long lived tree of depth %i</span><span class="hl esc">\t</span> <span class="hl str">check: %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
    <span class="hl kwd">max_depth</span> <span class="hl sym">(</span>check long_lived_tree<span class="hl sym">)</span>

<span class="hl kwd">main</span><span class="hl sym">()</span>
