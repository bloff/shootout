&quot;  The Great Computer Language Shootout
   contributed by Isaac Gouy

   To run<span class="sym">:</span> gst <span class="sym">-</span>QI <span class="sym">/</span>usr<span class="sym">/</span>share<span class="sym">/</span>gnu<span class="sym">-</span>smalltalk<span class="sym">/</span>gst<span class="sym">.</span>im random<span class="sym">.</span>st <span class="sym">-</span>a <span class="num">900000</span>
&quot;

Object subclass<span class="sym">: #</span>RandomNumber
instanceVariableNames<span class="sym">:</span> <span class="str">'seed scale'</span>
classVariableNames<span class="sym">:</span> <span class="str">'Increment Multiplier Modulus FModulus'</span>
poolDictionaries<span class="sym">:</span> <span class="str">''</span>
category<span class="sym">:</span> <span class="kwa">nil</span> <span class="sym">!</span>

<span class="sym">!</span>RandomNumber class methodsFor<span class="sym">:</span> <span class="str">'initialize'</span><span class="sym">!</span>

initialize
   Increment <span class="sym">:=</span> <span class="num">29573</span><span class="sym">.</span>
   Multiplier <span class="sym">:=</span> <span class="num">3877</span><span class="sym">.</span>
   Modulus <span class="sym">:=</span> <span class="num">139968</span><span class="sym">.</span>
   FModulus <span class="sym">:=</span> <span class="num">139968.0</span>d<span class="sym">.</span>
<span class="sym">! !</span>

<span class="sym">!</span>RandomNumber class methodsFor<span class="sym">:</span> <span class="str">'instance creation'</span><span class="sym">!</span>

to<span class="sym">:</span> anInteger
   <span class="sym">^</span><span class="kwa">self</span> basicNew to<span class="sym">:</span> anInteger <span class="sym">! !</span>

<span class="sym">!</span>RandomNumber methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>

next
   seed <span class="sym">:=</span> seed <span class="sym">*</span> Multiplier <span class="sym">+</span> Increment <span class="sym">\\</span> Modulus<span class="sym">.</span>
   <span class="sym">^(</span>seed <span class="sym">*</span> scale<span class="sym">)</span> asFloatD <span class="sym">/</span> FModulus <span class="sym">! !</span>

<span class="sym">!</span>RandomNumber methodsFor<span class="sym">:</span> <span class="str">'private'</span><span class="sym">!</span>

to<span class="sym">:</span> anInteger
   seed <span class="sym">:=</span> <span class="num">42</span><span class="sym">.</span>
   scale <span class="sym">:=</span> anInteger <span class="sym">! !</span>


<span class="sym">!</span>Float methodsFor<span class="sym">:</span> <span class="str">'printing'</span><span class="sym">!</span>

printStringRoundedTo<span class="sym">:</span> anInteger
   <span class="sym">|</span> n s <span class="sym">|</span>
   n <span class="sym">:=</span> <span class="num">0.5</span>d <span class="sym">* (</span><span class="num">10</span> raisedToInteger<span class="sym">:</span> anInteger negated<span class="sym">).</span>
   s <span class="sym">:= ((</span><span class="kwa">self</span> sign <span class="sym">&lt;</span> <span class="num">0</span><span class="sym">)</span> ifTrue<span class="sym">: [</span><span class="kwa">self</span> <span class="sym">-</span> n<span class="sym">]</span> ifFalse<span class="sym">: [</span><span class="kwa">self</span> <span class="sym">+</span> n<span class="sym">])</span> printString<span class="sym">.</span>
   <span class="sym">^</span>s copyFrom<span class="sym">:</span> <span class="num">1</span> to<span class="sym">: (</span>s indexOf<span class="sym">: $.) +</span> anInteger <span class="sym">! !</span>


<span class="sym">|</span> n random x <span class="sym">|</span>
n <span class="sym">:=</span> Smalltalk arguments first asInteger<span class="sym">.</span>

random <span class="sym">:=</span> RandomNumber initialize<span class="sym">;</span> to<span class="sym">:</span> <span class="num">100</span><span class="sym">.</span>
n timesRepeat<span class="sym">: [</span>x <span class="sym">:=</span> random next<span class="sym">].</span>
<span class="sym">(</span>x printStringRoundedTo<span class="sym">:</span> <span class="num">9</span><span class="sym">)</span> displayNl <span class="sym">!</span>
