<span class="com">&quot;  The Great Computer Language Shootout</span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com"></span>
<span class="com">   To run: gst -QI /usr/share/gnu-smalltalk/gst.im random.st -a 900000</span>
<span class="com">&quot;</span>
<span class="com"></span>
<span class="com">Object subclass: #RandomNumber</span>
<span class="com">instanceVariableNames: 'seed scale'</span>
<span class="com">classVariableNames: 'Increment Multiplier Modulus FModulus'</span>
<span class="com">poolDictionaries: ''</span>
<span class="com">category: nil !</span>
<span class="com"></span>
<span class="com">!RandomNumber class methodsFor: 'initialize'!</span>
<span class="com"></span>
<span class="com">initialize</span>
<span class="com">   Increment := 29573.</span>
<span class="com">   Multiplier := 3877.</span>
<span class="com">   Modulus := 139968.</span>
<span class="com">   FModulus := 139968.0d.</span>
<span class="com">! !</span>
<span class="com"></span>
<span class="com">!RandomNumber class methodsFor: 'instance creation'!</span>
<span class="com"></span>
<span class="com">to: anInteger</span>
<span class="com">   ^self basicNew to: anInteger ! !</span>
<span class="com"></span>
<span class="com">!RandomNumber methodsFor: 'accessing'!</span>
<span class="com"></span>
<span class="com">next</span>
<span class="com">   seed := seed * Multiplier + Increment \\ Modulus.</span>
<span class="com">   ^(seed * scale) asFloatD / FModulus ! !</span>
<span class="com"></span>
<span class="com">!RandomNumber methodsFor: 'private'!</span>
<span class="com"></span>
<span class="com">to: anInteger</span>
<span class="com">   seed := 42.</span>
<span class="com">   scale := anInteger ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">!Float methodsFor: 'printing'!</span>
<span class="com"></span>
<span class="com">printStringRoundedTo: anInteger</span>
<span class="com">   | n s |</span>
<span class="com">   n := 0.5d * (10 raisedToInteger: anInteger negated).</span>
<span class="com">   s := ((self sign &lt; 0) ifTrue: [self - n] ifFalse: [self + n]) printString.</span>
<span class="com">   ^s copyFrom: 1 to: (s indexOf: $.) + anInteger ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">| n random x |</span>
<span class="com">n := Smalltalk arguments first asInteger.</span>
<span class="com"></span>
<span class="com">random := RandomNumber initialize; to: 100.</span>
<span class="com">n timesRepeat: [x := random next].</span>
<span class="com">(x printStringRoundedTo: 9) displayNl !</span>
