<span class="slc">% ----------------------------------------------------------------------</span>
<span class="slc">% The Great Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">%</span>
<span class="slc">% Contributed by Anthony Borla</span>
<span class="slc">% ----------------------------------------------------------------------</span>

main <span class="sym">:-</span>
  cmdlNumArg<span class="sym">(</span><span class="num">1</span><span class="sym">,</span> N<span class="sym">),</span>
  gen_random<span class="sym">(</span>N<span class="sym">,</span> <span class="num">42</span><span class="sym">,</span> <span class="num">100</span><span class="sym">,</span> R<span class="sym">),</span>
  format<span class="sym">(</span><span class="str">'~9f~N'</span><span class="sym">, [</span>R<span class="sym">])</span>.

<span class="slc">% ------------------------------- %</span>

gen_random<span class="sym">(</span>N<span class="sym">,</span> S<span class="sym">,</span> M<span class="sym">,</span> RN<span class="sym">) :-</span>
  gen_seed<span class="sym">(</span>N<span class="sym">,</span> S<span class="sym">,</span> RS<span class="sym">),</span>
  RN <span class="kwa">is</span> M <span class="sym">*</span> RS <span class="sym">/</span> <span class="num">139968</span>.

<span class="slc">% ------------- %</span>

gen_seed<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> NS<span class="sym">,</span> NS<span class="sym">) :- !</span>.

gen_seed<span class="sym">(</span>N<span class="sym">,</span> S<span class="sym">,</span> RS<span class="sym">) :-</span>
  N1 <span class="kwa">is</span> N <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span>
  NS <span class="kwa">is</span> <span class="sym">(</span>S <span class="sym">*</span> <span class="num">3877</span> <span class="sym">+</span> <span class="num">29573</span><span class="sym">)</span> <span class="kwa">mod</span> <span class="num">139968</span><span class="sym">,</span>
  gen_seed<span class="sym">(</span>N1<span class="sym">,</span> NS<span class="sym">,</span> RS<span class="sym">)</span>.

<span class="slc">% ------------------------------- %</span>

argument_value<span class="sym">(</span>N<span class="sym">,</span> Arg<span class="sym">) :-</span>
  <span class="kwb">current_prolog_flag</span><span class="sym">(</span>argv<span class="sym">,</span> Cmdline<span class="sym">),</span> append<span class="sym">(</span>_<span class="sym">, [--|</span>UserArgs<span class="sym">],</span> Cmdline<span class="sym">),</span>
  Nth <span class="kwa">is</span> N <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> nth0<span class="sym">(</span>Nth<span class="sym">,</span> UserArgs<span class="sym">,</span> Arg<span class="sym">)</span>.

cmdlNumArg<span class="sym">(</span>Nth<span class="sym">,</span> N<span class="sym">) :-</span>
  argument_value<span class="sym">(</span>Nth<span class="sym">,</span> Arg<span class="sym">),</span> <span class="kwb">catch</span><span class="sym">(</span>atom_number<span class="sym">(</span>Arg<span class="sym">,</span> N<span class="sym">),</span> _<span class="sym">,</span> <span class="kwa">fail</span><span class="sym">) ;</span> <span class="kwa">halt</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.

