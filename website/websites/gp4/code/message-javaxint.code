<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by James McIlree</span>
<span class="com">   modified by Dimitar Dimitrov</span>
<span class="com">*/</span>

<span class="kwa">import</span> java<span class="sym">.</span>util<span class="sym">.</span>concurrent<span class="sym">.</span><span class="kwc">BlockingQueue</span><span class="sym">;</span>
<span class="kwa">import</span> java<span class="sym">.</span>util<span class="sym">.</span>concurrent<span class="sym">.</span><span class="kwc">ArrayBlockingQueue</span><span class="sym">;</span>


<span class="kwa">public class</span> message <span class="kwa">implements</span> <span class="kwc">Runnable</span> <span class="sym">{</span>
    <span class="kwa">private static final</span> <span class="kwb">int</span> NUMBER_OF_THREADS <span class="sym">=</span> <span class="num">500</span><span class="sym">;</span>
    <span class="kwa">private static final</span> <span class="kwb">double</span> QUEUE_BUFFER_RATIO <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span><span class="kwd">getInteger</span><span class="sym">(</span><span class="str">&quot;bufferPct&quot;</span><span class="sym">,</span> <span class="num">100</span><span class="sym">) /</span> <span class="num">100.0</span><span class="sym">;</span>

    <span class="kwa">private final</span> <span class="kwc">BlockingQueue</span><span class="sym">&lt;</span><span class="kwc">Integer</span><span class="sym">&gt;</span> queue<span class="sym">;</span>
    <span class="kwa">private final</span> message next<span class="sym">;</span>

    <span class="kwd">message</span><span class="sym">(</span>message next<span class="sym">,</span> <span class="kwb">int</span> queueSize<span class="sym">) {</span>
        <span class="kwa">this</span><span class="sym">.</span>queue <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">ArrayBlockingQueue</span><span class="sym">&lt;</span><span class="kwc">Integer</span><span class="sym">&gt;(</span>queueSize<span class="sym">);</span>
        <span class="kwa">this</span><span class="sym">.</span>next <span class="sym">=</span> next<span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">public</span> <span class="kwb">void</span> <span class="kwd">run</span><span class="sym">() {</span>
        <span class="kwa">if</span> <span class="sym">(</span>next<span class="sym">==</span>null<span class="sym">)</span>  <span class="kwa">return</span><span class="sym">;</span>
        <span class="kwa">try</span> <span class="sym">{</span>
            <span class="kwa">while</span> <span class="sym">(</span>true<span class="sym">) {</span>
                next<span class="sym">.</span>queue<span class="sym">.</span><span class="kwd">put</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">.</span>queue<span class="sym">.</span><span class="kwd">take</span><span class="sym">() +</span> <span class="num">1</span><span class="sym">);</span>
            <span class="sym">}</span>
        <span class="sym">}</span> <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">InterruptedException</span> e<span class="sym">) {</span>
            <span class="kwa">throw new</span> <span class="kwc">RuntimeException</span><span class="sym">(</span>e<span class="sym">);</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwc">String</span> args<span class="sym">[])</span> <span class="kwa">throws</span> <span class="kwc">InterruptedException</span> <span class="sym">{</span>
        <span class="kwb">int</span> messagesCount <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span><span class="kwd">parseInt</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>
        <span class="kwb">int</span> queueSize <span class="sym">= (</span><span class="kwb">int</span><span class="sym">) (</span>messagesCount <span class="sym">*</span> QUEUE_BUFFER_RATIO<span class="sym">);</span>

        message first <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">message</span><span class="sym">(</span>null<span class="sym">,</span> queueSize<span class="sym">);</span>
        message last <span class="sym">=</span> first<span class="sym">;</span>
        <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> NUMBER_OF_THREADS<span class="sym">-</span><span class="num">1</span><span class="sym">;</span> i<span class="sym">++) {</span>
            last <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">message</span><span class="sym">(</span>last<span class="sym">,</span> queueSize<span class="sym">);</span>
            <span class="kwc">Thread</span> thread <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">Thread</span><span class="sym">(</span>last<span class="sym">,</span> <span class="str">&quot;Worker-&quot;</span> <span class="sym">+</span> i<span class="sym">);</span>
            thread<span class="sym">.</span><span class="kwd">setDaemon</span><span class="sym">(</span>true<span class="sym">);</span>
            thread<span class="sym">.</span><span class="kwd">start</span><span class="sym">();</span>
        <span class="sym">}</span>

        <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> j <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> j <span class="sym">&lt;</span> messagesCount<span class="sym">;</span> j<span class="sym">++) {</span>
            last<span class="sym">.</span>queue<span class="sym">.</span><span class="kwd">put</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
        <span class="sym">}</span>

        <span class="kwb">int</span> sum <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
        <span class="kwa">while</span> <span class="sym">(</span>sum <span class="sym">&lt;</span> NUMBER_OF_THREADS <span class="sym">*</span> messagesCount<span class="sym">) {</span>
            sum <span class="sym">+=</span> first<span class="sym">.</span>queue<span class="sym">.</span><span class="kwd">take</span><span class="sym">();</span>
        <span class="sym">}</span>

        <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">println</span><span class="sym">(</span>sum<span class="sym">);</span>
    <span class="sym">}</span>
<span class="sym">}</span>
