<span class="hl slc">% The Computer Language Benchmarks Game</span>
<span class="hl slc">% http://shootout.alioth.debian.org/</span>
<span class="hl slc">% Contributed by Valentin Kraevskiy</span>
<span class="hl slc">% Should be compiled with: -H</span>

<span class="hl sym">:-</span> module nsievebits.

<span class="hl sym">:-</span> interface.
<span class="hl sym">:-</span> import_module io.
<span class="hl sym">:-</span> pred main<span class="hl sym">(</span>io<span class="hl sym">,</span> io<span class="hl sym">)</span>.
<span class="hl sym">:-</span> mode main<span class="hl sym">(</span>di<span class="hl sym">,</span> uo<span class="hl sym">)</span> <span class="hl kwa">is</span> det.

<span class="hl sym">:-</span> implementation.
<span class="hl sym">:-</span> import_module int<span class="hl sym">,</span> bool<span class="hl sym">,</span> string<span class="hl sym">,</span> bitmap<span class="hl sym">,</span> list.

main<span class="hl sym">(!</span>IO<span class="hl sym">) :-</span>
   command_line_arguments<span class="hl sym">(</span>Args<span class="hl sym">, !</span>IO<span class="hl sym">),</span>
   N <span class="hl sym">= (</span>if Args <span class="hl sym">= [</span>I <span class="hl sym">|</span> _<span class="hl sym">],</span> to_int<span class="hl sym">(</span>I<span class="hl sym">,</span> X<span class="hl sym">)</span> then X else <span class="hl num">2</span><span class="hl sym">),</span>
   foldl<span class="hl sym">(</span>run<span class="hl sym">, [</span>N<span class="hl sym">,</span> N <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> N <span class="hl sym">-</span> <span class="hl num">2</span><span class="hl sym">], !</span>IO<span class="hl sym">)</span>.

<span class="hl sym">:-</span> pred run<span class="hl sym">(</span>int<span class="hl sym">,</span> io<span class="hl sym">,</span> io<span class="hl sym">)</span>.
<span class="hl sym">:-</span> mode run<span class="hl sym">(</span>in<span class="hl sym">,</span> di<span class="hl sym">,</span> uo<span class="hl sym">)</span> <span class="hl kwa">is</span> det.

run<span class="hl sym">(</span>N<span class="hl sym">, !</span>IO<span class="hl sym">) :-</span>
   M <span class="hl sym">=</span> <span class="hl num">10000</span> <span class="hl sym">*</span> pow<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">,</span> N<span class="hl sym">),</span>
   Res <span class="hl sym">=</span> loop<span class="hl sym">(</span>new<span class="hl sym">(</span>M <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span> yes<span class="hl sym">),</span> <span class="hl num">2</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">),</span>
   format<span class="hl sym">(</span><span class="hl str">&quot;Primes up to %8i %8i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">, [</span>i<span class="hl sym">(</span>M<span class="hl sym">),</span> i<span class="hl sym">(</span>Res<span class="hl sym">)], !</span>IO<span class="hl sym">)</span>.

<span class="hl sym">:-</span> func loop<span class="hl sym">(</span>bitmap<span class="hl sym">,</span> int<span class="hl sym">,</span> int<span class="hl sym">) =</span> int.
<span class="hl sym">:-</span> mode loop<span class="hl sym">(</span>bitmap_di<span class="hl sym">,</span> in<span class="hl sym">,</span> in<span class="hl sym">) =</span> out.

loop<span class="hl sym">(</span>Bitmap<span class="hl sym">,</span> N<span class="hl sym">,</span> Accum<span class="hl sym">) =</span>
   <span class="hl sym">(</span>if N <span class="hl sym">&lt;</span> num_bits<span class="hl sym">(</span>Bitmap<span class="hl sym">)</span>
       then <span class="hl sym">(</span>if unsafe_is_set<span class="hl sym">(</span>Bitmap<span class="hl sym">,</span> N<span class="hl sym">)</span>
              then loop<span class="hl sym">(</span>loopA<span class="hl sym">(</span>Bitmap<span class="hl sym">,</span> <span class="hl num">2</span> <span class="hl sym">*</span> N<span class="hl sym">,</span> N<span class="hl sym">),</span> N <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span> Accum <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
              else loop<span class="hl sym">(</span>Bitmap<span class="hl sym">,</span> N <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span> Accum<span class="hl sym">))</span>
       else Accum<span class="hl sym">)</span>.

<span class="hl sym">:-</span> func loopA<span class="hl sym">(</span>bitmap<span class="hl sym">,</span> int<span class="hl sym">,</span> int<span class="hl sym">) =</span> bitmap.
<span class="hl sym">:-</span> mode loopA<span class="hl sym">(</span>bitmap_di<span class="hl sym">,</span> in<span class="hl sym">,</span> in<span class="hl sym">) =</span> bitmap_uo.

loopA<span class="hl sym">(</span>Bitmap<span class="hl sym">,</span> N<span class="hl sym">,</span> M<span class="hl sym">) =</span>
   <span class="hl sym">(</span>if N <span class="hl sym">&lt;</span> num_bits<span class="hl sym">(</span>Bitmap<span class="hl sym">)</span>
      then loopA<span class="hl sym">(</span>unsafe_clear<span class="hl sym">(</span>Bitmap<span class="hl sym">,</span> N<span class="hl sym">),</span> N <span class="hl sym">+</span> M<span class="hl sym">,</span> M<span class="hl sym">)</span>
      else Bitmap<span class="hl sym">)</span>.
