<span class="slc">\ The Great Computer Language Shootout</span>
<span class="slc">\ http://shootout.alioth.debian.org/</span>
<span class="slc">\</span>
<span class="slc">\ contributed by  Ian Osgood</span>
<span class="slc">\ Moved to bigFORTH by Bernd Paysan</span>
<span class="slc">\ requires enlarging the dictionary with &quot;-d 8M&quot;</span>

import float float also

wordlist <span class="kwa">constant word</span><span class="sym">-</span>counts
<span class="kwa">variable</span> data
<span class="kwa">variable</span> dataEnd
<span class="kwa">create word</span><span class="sym">-</span>pointers <span class="num">100</span> <span class="kwa">cells allot</span>
<span class="kwa">variable</span> endwp

<span class="sym">:</span> <span class="kwa">count</span><span class="sym">,</span>   <span class="num">1</span> <span class="sym">, ;</span>
<span class="sym">:</span> <span class="kwa">count</span><span class="sym">-</span>name<span class="sym">,</span>
  endwp <span class="sym">&#64;</span> <span class="kwa">here over</span> <span class="sym">!</span> cell<span class="sym">+</span> endwp <span class="sym">!</span>
  <span class="num">1</span> <span class="sym">,</span> last <span class="sym">&#64;</span> <span class="kwa">count</span> $<span class="num">1</span>F <span class="kwa">and</span>
  <span class="num">2</span><span class="kwa">dup</span> bounds <span class="kwa">do i c</span><span class="sym">&#64;</span> capital <span class="kwa">i c</span><span class="sym">!</span> <span class="kwa">loop</span> <span class="num">2</span><span class="sym">, ;</span>

defer data<span class="sym">,</span>

<span class="sym">:</span> <span class="kwa">count</span><span class="sym">-</span><span class="kwa">word</span> <span class="com">( addr u -- )</span>
    <span class="num">2</span><span class="kwa">dup word</span><span class="sym">-</span>counts search<span class="sym">-</span>wordlist <span class="kwa">if</span>
        <span class="num">1</span> <span class="kwa">swap</span> <span class="sym">&gt;</span>body <span class="sym">+!</span> <span class="num">2</span><span class="kwa">drop</span>
    <span class="kwa">else</span>
       	<span class="str">&quot;&gt;tib create data,</span>
<span class="str">    endif ;</span>
<span class="str"></span>
<span class="str">: scanit ( end data n -- total )</span>
<span class="str">  word-pointers endwp !</span>
<span class="str">  rot 1+ over - rot 2dup - &gt;r  ( n end-n addr R: total )</span>
<span class="str">  get-current &gt;r word-counts set-current</span>
<span class="str">  do i over count-word loop</span>
<span class="str">  6 swap - set-precision r&gt; set-current r&gt; ;</span>
<span class="str"></span>
<span class="str">: comp? ( a1 a2 -- a1 a2 ? )</span>
<span class="str">  over &#64; over &#64; = if</span>
<span class="str">    over cell+ 2&#64; drop over cell+ 2&#64; tuck compare 0&lt;</span>
<span class="str">  else over &#64; over &#64; &gt; then ;</span>
<span class="str">: sort</span>
<span class="str">  word-pointers endwp &#64; over cell+ do</span>
<span class="str">    dup i do</span>
<span class="str">      i &#64; i cell - &#64;  comp? if</span>
<span class="str">      i ! i cell - !  else 2drop leave then</span>
<span class="str">    cell -loop</span>
<span class="str">  cell +loop drop ;</span>
<span class="str"></span>
<span class="str">: ffix. 1000e f* f&gt;d &lt;# # # # '. hold #S #&gt; type ;</span>
<span class="str">: sortit ( end data n -- )  ['] count-name, is data,</span>
<span class="str">  scanit sort  ( total )</span>
<span class="str">  endwp &#64; word-pointers do</span>
<span class="str">    i &#64; cell+ 2&#64; type space</span>
<span class="str">    i &#64; &#64; 100 * s&gt;d d&gt;f  dup s&gt;d d&gt;f  f/ ffix. cr</span>
<span class="str">  cell +loop drop ;</span>
<span class="str"></span>
<span class="str">: findit ( end data str len -- ) ['] count, is data,</span>
<span class="str">  s&quot;</span> clean marker clean<span class="str">&quot; evaluate</span>
<span class="str">  tuck 2&gt;r scanit drop</span>
<span class="str">  2r&#64; word-counts search-wordlist if</span>
<span class="str">    &gt;body &#64; 1 u.r</span>
<span class="str">  else '0 emit then  #tab emit 2r&gt; type ;</span>
<span class="str"></span>
<span class="str">: grow ( end -- newEnd )</span>
<span class="str">  data &#64; - ( size )</span>
<span class="str">  data &#64; dataEnd &#64; over - 2* tuck resize throw dup data ! + dataEnd !</span>
<span class="str">  data &#64; + ;</span>
<span class="str"></span>
<span class="str">: slurp ( -- end ) data &#64;</span>
<span class="str">  begin dup 80 stdin read-line throw</span>
<span class="str">  while over c&#64; '&gt; &lt;&gt;</span>
<span class="str">  while over c&#64; '; = if drop else + then</span>
<span class="str">        dataEnd &#64; over - 80 &lt; if grow then</span>
<span class="str">  repeat then drop ;</span>
<span class="str"></span>
<span class="str">: report ( end -- ) data &#64;</span>
<span class="str">  2dup 1 sortit cr</span>
<span class="str">  2dup 2 sortit cr</span>
<span class="str">  2dup s&quot;</span> GGT<span class="str">&quot; findit cr</span>
<span class="str">  2dup s&quot;</span> GGTA<span class="str">&quot; findit cr</span>
<span class="str">  2dup s&quot;</span> GGTATT<span class="str">&quot; findit cr</span>
<span class="str">  2dup s&quot;</span> GGTATTTTAATT<span class="str">&quot; findit cr</span>
<span class="str">  s&quot;</span> GGTATTTTAATTTATAGT<span class="str">&quot; findit cr ;</span>
<span class="str"></span>
<span class="str">: main</span>
<span class="str">  4096 dup allocate throw dup data ! + dataEnd !</span>
<span class="str">  begin pad 80 stdin read-line throw nip</span>
<span class="str">  while s&quot;</span> <span class="sym">&gt;</span>THREE<span class="str">&quot; pad over compare 0= if slurp report then</span>
<span class="str">  repeat data &#64; free throw ;</span>
<span class="str"></span>
<span class="str">marker clean</span>
<span class="str"></span>
<span class="str">main bye \ done!</span>
