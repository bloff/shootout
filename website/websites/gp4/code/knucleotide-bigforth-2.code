<span class="slc">\ The Great Computer Language Shootout</span>
<span class="slc">\ http://shootout.alioth.debian.org/</span>
<span class="slc">\</span>
<span class="slc">\ contributed by  Ian Osgood</span>
<span class="slc">\ requires enlarging the dictionary with &quot;-m 8M&quot;</span>

wordlist <span class="kwa">constant word</span><span class="sym">-</span>counts
<span class="kwa">variable</span> data
<span class="kwa">variable</span> dataEnd
<span class="kwa">create word</span><span class="sym">-</span>pointers <span class="num">100</span> <span class="kwa">cells allot</span>
<span class="kwa">variable</span> endwp

<span class="sym">:</span> <span class="kwa">count</span><span class="sym">,</span>   <span class="num">1</span> <span class="sym">, ;</span>
<span class="sym">:</span> <span class="kwa">count</span><span class="sym">-</span>name<span class="sym">,</span>
  endwp <span class="sym">&#64;</span> <span class="kwa">here over</span> <span class="sym">!</span> cell<span class="sym">+</span> endwp <span class="sym">!</span>
  <span class="num">1</span> <span class="sym">,</span> last <span class="sym">&#64;</span> name<span class="sym">&gt;</span>string
  <span class="num">2</span><span class="kwa">dup</span> bounds <span class="kwa">do i c</span><span class="sym">&#64;</span> toupper <span class="kwa">i c</span><span class="sym">!</span> <span class="kwa">loop</span> <span class="num">2</span><span class="sym">, ;</span>

defer data<span class="sym">,</span>

<span class="sym">:</span> <span class="kwa">count</span><span class="sym">-</span><span class="kwa">word</span> <span class="com">( addr u -- )</span>
    <span class="num">2</span><span class="kwa">dup word</span><span class="sym">-</span>counts search<span class="sym">-</span>wordlist <span class="kwa">if</span>
        <span class="num">1</span> <span class="kwa">swap</span> <span class="sym">&gt;</span>body <span class="sym">+!</span> <span class="num">2</span><span class="kwa">drop</span>
    <span class="kwa">else</span>
        nextname <span class="kwa">create</span> data<span class="sym">,</span>
    endif <span class="sym">;</span>

<span class="sym">:</span> scanit <span class="com">( end data n -- total )</span>
  <span class="kwa">word</span><span class="sym">-</span>pointers endwp <span class="sym">!</span>
  <span class="kwa">rot</span> <span class="num">1</span><span class="sym">+</span> <span class="kwa">over</span> <span class="sym">-</span> <span class="kwa">rot</span> <span class="num">2</span><span class="kwa">dup</span> <span class="sym">- &gt;</span>r  <span class="com">( n end-n addr R: total )</span>
  get<span class="sym">-</span>current <span class="sym">&gt;</span>r <span class="kwa">word</span><span class="sym">-</span>counts set<span class="sym">-</span>current
  <span class="kwa">do i over count</span><span class="sym">-</span><span class="kwa">word loop</span>
  <span class="num">6</span> <span class="kwa">swap</span> <span class="sym">-</span> set<span class="sym">-</span>precision r<span class="sym">&gt;</span> set<span class="sym">-</span>current r<span class="sym">&gt; ;</span>

<span class="sym">:</span> comp<span class="sym">?</span> <span class="com">( a1 a2 -- a1 a2 ? )</span>
  <span class="kwa">over</span> <span class="sym">&#64;</span> <span class="kwa">over</span> <span class="sym">&#64; =</span> <span class="kwa">if</span>
    <span class="kwa">over</span> cell<span class="sym">+</span> <span class="num">2</span><span class="sym">&#64;</span> <span class="kwa">drop over</span> cell<span class="sym">+</span> <span class="num">2</span><span class="sym">&#64;</span> tuck compare <span class="num">0</span><span class="sym">&lt;</span>
  <span class="kwa">else over</span> <span class="sym">&#64;</span> <span class="kwa">over</span> <span class="sym">&#64; &gt;</span> <span class="kwa">then</span> <span class="sym">;</span>
<span class="sym">:</span> sort
  <span class="kwa">word</span><span class="sym">-</span>pointers endwp <span class="sym">&#64;</span> <span class="kwa">over</span> cell<span class="sym">+</span> <span class="kwa">do</span>
    <span class="kwa">dup i do</span>
      <span class="kwa">i</span> <span class="sym">&#64;</span> <span class="kwa">i</span> cell <span class="sym">- &#64;</span>  comp<span class="sym">?</span> <span class="kwa">if</span>
      <span class="kwa">i</span> <span class="sym">!</span> <span class="kwa">i</span> cell <span class="sym">- !</span>  <span class="kwa">else</span> <span class="num">2</span><span class="kwa">drop leave then</span>
    cell <span class="sym">-</span><span class="kwa">loop</span>
  cell <span class="sym">+</span><span class="kwa">loop drop</span> <span class="sym">;</span>

<span class="sym">:</span> ff<span class="sym">.</span>  f$ scratch <span class="kwa">drop over</span> type <span class="sym">'.</span> <span class="kwa">emit</span> scratch <span class="kwa">rot</span> <span class="sym">/</span>string type <span class="sym">;</span>
<span class="sym">:</span> sortit <span class="com">( end data n -- )</span>  <span class="sym">[']</span> <span class="kwa">count</span><span class="sym">-</span>name<span class="sym">, [</span>is<span class="sym">]</span> data<span class="sym">,</span>
  scanit sort  <span class="com">( total )</span>
  endwp <span class="sym">&#64;</span> <span class="kwa">word</span><span class="sym">-</span>pointers <span class="kwa">do</span>
    <span class="kwa">i</span> <span class="sym">&#64;</span> cell<span class="sym">+</span> <span class="num">2</span><span class="sym">&#64;</span> type <span class="kwa">space</span>
    <span class="kwa">i</span> <span class="sym">&#64; &#64;</span> <span class="num">100</span> <span class="sym">*</span> s<span class="sym">&gt;</span>d d<span class="sym">&gt;</span>f  <span class="kwa">dup</span> s<span class="sym">&gt;</span>d d<span class="sym">&gt;</span>f  f<span class="sym">/</span> ff<span class="sym">.</span> <span class="kwa">cr</span>
  cell <span class="sym">+</span><span class="kwa">loop drop</span> <span class="sym">;</span>

<span class="sym">:</span> findit <span class="com">( end data str len -- )</span> <span class="sym">[']</span> <span class="kwa">count</span><span class="sym">, [</span>is<span class="sym">]</span> data<span class="sym">,</span>
  s<span class="str">&quot; clean marker clean&quot;</span> <span class="kwa">evaluate</span>
  tuck <span class="num">2</span><span class="sym">&gt;</span>r scanit <span class="kwa">drop</span>
  <span class="num">2</span>r<span class="sym">&#64;</span> <span class="kwa">word</span><span class="sym">-</span>counts search<span class="sym">-</span>wordlist <span class="kwa">if</span>
    <span class="sym">&gt;</span>body <span class="sym">&#64;</span> <span class="num">1</span> u<span class="sym">.</span>r
  <span class="kwa">else</span> <span class="sym">'</span><span class="num">0</span> <span class="kwa">emit then</span>  <span class="sym">#</span>tab <span class="kwa">emit</span> <span class="num">2</span>r<span class="sym">&gt;</span> type <span class="sym">;</span>

<span class="sym">:</span> grow <span class="com">( end -- newEnd )</span>
  data <span class="sym">&#64; -</span> <span class="com">( size )</span>
  data <span class="sym">&#64;</span> dataEnd <span class="sym">&#64;</span> <span class="kwa">over</span> <span class="sym">-</span> <span class="num">2</span><span class="sym">*</span> tuck resize throw <span class="kwa">dup</span> data <span class="sym">! +</span> dataEnd <span class="sym">!</span>
  data <span class="sym">&#64; + ;</span>

<span class="sym">:</span> slurp <span class="com">( -- end )</span> data <span class="sym">&#64;</span>
  <span class="kwa">begin dup</span> <span class="num">80</span> stdin read<span class="sym">-</span>line throw
  <span class="kwa">while over c</span><span class="sym">&#64; '&gt; &lt;&gt;</span>
  <span class="kwa">while over c</span><span class="sym">&#64; '; =</span> <span class="kwa">if drop else</span> <span class="sym">+</span> <span class="kwa">then</span>
        dataEnd <span class="sym">&#64;</span> <span class="kwa">over</span> <span class="sym">-</span> <span class="num">80</span> <span class="sym">&lt;</span> <span class="kwa">if</span> grow <span class="kwa">then</span>
  <span class="kwa">repeat then drop</span> <span class="sym">;</span>

<span class="sym">:</span> report <span class="com">( end -- )</span> data <span class="sym">&#64;</span>
  <span class="num">2</span><span class="kwa">dup</span> <span class="num">1</span> sortit <span class="kwa">cr</span>
  <span class="num">2</span><span class="kwa">dup</span> <span class="num">2</span> sortit <span class="kwa">cr</span>
  <span class="num">2</span><span class="kwa">dup</span> s<span class="str">&quot; GGT&quot;</span> findit <span class="kwa">cr</span>
  <span class="num">2</span><span class="kwa">dup</span> s<span class="str">&quot; GGTA&quot;</span> findit <span class="kwa">cr</span>
  <span class="num">2</span><span class="kwa">dup</span> s<span class="str">&quot; GGTATT&quot;</span> findit <span class="kwa">cr</span>
  <span class="num">2</span><span class="kwa">dup</span> s<span class="str">&quot; GGTATTTTAATT&quot;</span> findit <span class="kwa">cr</span>
  s<span class="str">&quot; GGTATTTTAATTTATAGT&quot;</span> findit <span class="kwa">cr</span> <span class="sym">;</span>

<span class="sym">:</span> main
  <span class="num">4096</span> <span class="kwa">dup</span> allocate throw <span class="kwa">dup</span> data <span class="sym">! +</span> dataEnd <span class="sym">!</span>
  <span class="kwa">begin pad</span> <span class="num">80</span> stdin read<span class="sym">-</span>line throw nip
  <span class="kwa">while</span> s<span class="str">&quot; &gt;THREE&quot;</span> <span class="kwa">pad over</span> compare <span class="num">0</span><span class="sym">=</span> <span class="kwa">if</span> slurp report <span class="kwa">then</span>
  <span class="kwa">repeat</span> data <span class="sym">&#64;</span> free throw <span class="sym">;</span>

marker clean

main bye <span class="slc">\ done!</span>
