<span class="com">&quot;  The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Paolo Bonzini&quot;!</span>
<span class="com"></span>
<span class="com">!Shootout.Tests class methodsFor: 'benchmarking'!</span>
<span class="com"></span>
<span class="com">message</span>
<span class="com">   | n tail head sum |</span>
<span class="com">   n := CEnvironment argv first asNumber.</span>
<span class="com"></span>
<span class="com">   head := tail := Consumer new.</span>
<span class="com">   500 timesRepeat: [</span>
<span class="com">       head := ProducerConsumer fork: head ].</span>
<span class="com"></span>
<span class="com">   sum := 0.</span>
<span class="com">   n timesRepeat: [</span>
<span class="com">       head msg: 0.</span>
<span class="com">       sum := sum + tail msg ].</span>
<span class="com"></span>
<span class="com">   ^sum printString withNl ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">Smalltalk.Shootout defineClass: #Consumer</span>
<span class="com">	superclass: #{Core.Object}</span>
<span class="com">	indexedType: #none</span>
<span class="com">	private: false</span>
<span class="com">	instanceVariableNames: 'semaphore msg '</span>
<span class="com">	classInstanceVariableNames: ''</span>
<span class="com">	imports: ''</span>
<span class="com">	category: 'Shootout'!</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">!Shootout.Consumer class methodsFor: 'process'!</span>
<span class="com"></span>
<span class="com">new</span>
<span class="com">    | var |</span>
<span class="com">    var := self basicNew.</span>
<span class="com">    var semaphore: Semaphore new.</span>
<span class="com">    ^var! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">!Shootout.Consumer methodsFor: 'process'!</span>
<span class="com"></span>
<span class="com">msg</span>
<span class="com">    semaphore wait.</span>
<span class="com">    ^msg!</span>
<span class="com"></span>
<span class="com">msg: data</span>
<span class="com">    msg := data.</span>
<span class="com">    semaphore signal!</span>
<span class="com"></span>
<span class="com">semaphore: aSemaphore</span>
<span class="com">    semaphore := aSemaphore! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">Smalltalk.Shootout defineClass: #ProducerConsumer</span>
<span class="com">	superclass: #{Shootout.Consumer}</span>
<span class="com">	indexedType: #none</span>
<span class="com">	private: false</span>
<span class="com">	instanceVariableNames: 'consumer '</span>
<span class="com">	classInstanceVariableNames: ''</span>
<span class="com">	imports: ''</span>
<span class="com">	category: 'Shootout'!</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">!Shootout.ProducerConsumer class methodsFor: 'process'!</span>
<span class="com"></span>
<span class="com">fork: consumer</span>
<span class="com">    | proc |</span>
<span class="com">    proc := self new.</span>
<span class="com">    proc consumer: consumer.</span>
<span class="com">    proc fork.</span>
<span class="com">    ^proc! !</span>
<span class="com"></span>
<span class="com">!Shootout.ProducerConsumer methodsFor: 'process'!</span>
<span class="com"></span>
<span class="com">consumer: aProcess</span>
<span class="com">    consumer := aProcess!</span>
<span class="com"></span>
<span class="com">fork</span>
<span class="com">    [ self run ] fork!</span>
<span class="com"></span>
<span class="com">run</span>
<span class="com">    [ consumer msg: self msg + 1 ] repeat! !</span>
