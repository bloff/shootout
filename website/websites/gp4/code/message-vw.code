<span class="com">&quot;* The Computer Language Shootout</span>
<span class="com">    http://shootout.alioth.debian.org/</span>
<span class="com">    contributed by Paolo Bonzini *&quot;</span><span class="sym">!</span>

Object subclass<span class="sym">: #</span>Consumer	instanceVariableNames<span class="sym">:</span> <span class="str">'semaphore msg'</span>	classVariableNames<span class="sym">:</span> <span class="str">''</span>	poolDictionaries<span class="sym">:</span> <span class="str">''</span>	category<span class="sym">:</span> <span class="str">'Shootout'</span><span class="sym">!</span>

Consumer subclass<span class="sym">: #</span>ProducerConsumer	instanceVariableNames<span class="sym">:</span> <span class="str">'consumer'</span>	classVariableNames<span class="sym">:</span> <span class="str">''</span>	poolDictionaries<span class="sym">:</span> <span class="str">''</span>	category<span class="sym">:</span> <span class="str">'Shootout'</span><span class="sym">!</span>

Object subclass<span class="sym">: #</span>Tests	instanceVariableNames<span class="sym">:</span> <span class="str">''</span>	classVariableNames<span class="sym">:</span> <span class="str">''</span>	poolDictionaries<span class="sym">:</span> <span class="str">''</span>	category<span class="sym">:</span> <span class="str">'Shootout'</span><span class="sym">!!</span>Consumer methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>msg    semaphore wait<span class="sym">.    ^</span>msg<span class="sym">! !!</span>Consumer methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>msg<span class="sym">:</span> data    msg <span class="sym">:=</span> data<span class="sym">.</span>    semaphore signal<span class="sym">! !!</span>Consumer methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>semaphore<span class="sym">:</span> aSemaphore    semaphore <span class="sym">:=</span> aSemaphore<span class="sym">! !!</span>Consumer class methodsFor<span class="sym">:</span> <span class="str">'instance creation'</span><span class="sym">!</span>new    <span class="sym">|</span> var <span class="sym">|</span>    var <span class="sym">:=</span> <span class="kwa">self</span> basicNew<span class="sym">.</span>    var semaphore<span class="sym">:</span> Semaphore new<span class="sym">.    ^</span>var<span class="sym">! !!</span>ProducerConsumer methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>consumer<span class="sym">:</span> aProcess    consumer <span class="sym">:=</span> aProcess<span class="sym">! !!</span>ProducerConsumer methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>fork    <span class="sym">[</span> <span class="kwa">self</span> run <span class="sym">]</span> fork<span class="sym">! !!</span>ProducerConsumer methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>run    <span class="sym">[</span> consumer msg<span class="sym">:</span> <span class="kwa">self</span> msg <span class="sym">+</span> <span class="num">1</span> <span class="sym">]</span> repeat<span class="sym">! !!</span>ProducerConsumer class methodsFor<span class="sym">:</span> <span class="str">'instance creation'</span><span class="sym">!</span>fork<span class="sym">:</span> consumer    <span class="sym">|</span> proc <span class="sym">|</span>    proc <span class="sym">:=</span> <span class="kwa">self</span> new<span class="sym">.</span>    proc consumer<span class="sym">:</span> consumer<span class="sym">.</span>    proc fork<span class="sym">.    ^</span>proc<span class="sym">! !!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>message<span class="sym">:</span> n   <span class="sym">|</span> tail head sum <span class="sym">|</span>   head <span class="sym">:=</span> tail <span class="sym">:=</span> Consumer new<span class="sym">.</span>   <span class="num">500</span> timesRepeat<span class="sym">: [</span>head <span class="sym">:=</span> ProducerConsumer fork<span class="sym">:</span> head<span class="sym">].</span>   sum <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>   n timesRepeat<span class="sym">:      [</span>head msg<span class="sym">:</span> <span class="num">0</span><span class="sym">.</span>      sum <span class="sym">:=</span> sum <span class="sym">+</span> tail msg<span class="sym">].   ^</span>sum <span class="sym">! !!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'platform'</span><span class="sym">!</span>arg   <span class="sym">^</span>CEnvironment commandLine last asNumber<span class="sym">! !!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'platform'</span><span class="sym">!</span>postscript   <span class="sym">^</span><span class="str">''</span><span class="sym">! !!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'platform'</span><span class="sym">!</span>stdout   <span class="sym">^</span>Stdout<span class="sym">! !!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmark scripts'</span><span class="sym">!</span>message   <span class="kwa">self</span> stdout      nextPutAll<span class="sym">: (</span><span class="kwa">self</span> message<span class="sym">:</span> <span class="kwa">self</span> arg<span class="sym">)</span> printString<span class="sym">;</span>       nextPut<span class="sym">:</span> Character lf<span class="sym">.   ^</span><span class="kwa">self</span> postscript<span class="sym">! !</span>
