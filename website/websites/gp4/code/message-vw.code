<span class="com">&quot;*  The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Paolo Bonzini *&quot;</span><span class="sym">!</span>

<span class="sym">!</span>Shootout<span class="sym">.</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>

message
   <span class="sym">|</span> n tail head sum <span class="sym">|</span>
   n <span class="sym">:=</span> CEnvironment argv first asNumber<span class="sym">.</span>

   head <span class="sym">:=</span> tail <span class="sym">:=</span> Consumer new<span class="sym">.</span>
   <span class="num">500</span> timesRepeat<span class="sym">: [</span>
       head <span class="sym">:=</span> ProducerConsumer fork<span class="sym">:</span> head <span class="sym">].</span>

   sum <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>
   n timesRepeat<span class="sym">: [</span>
       head msg<span class="sym">:</span> <span class="num">0</span><span class="sym">.</span>
       sum <span class="sym">:=</span> sum <span class="sym">+</span> tail msg <span class="sym">].</span>

   <span class="sym">^</span>sum printString withNl <span class="sym">! !</span>


Smalltalk<span class="sym">.</span>Shootout defineClass<span class="sym">: #</span>Consumer
	superclass<span class="sym">: #</span>{Core<span class="sym">.</span>Object}
	indexedType<span class="sym">: #</span>none
	private<span class="sym">:</span> <span class="kwa">false</span>
	instanceVariableNames<span class="sym">:</span> <span class="str">'semaphore msg '</span>
	classInstanceVariableNames<span class="sym">:</span> <span class="str">''</span>
	imports<span class="sym">:</span> <span class="str">''</span>
	category<span class="sym">:</span> <span class="str">'Shootout'</span><span class="sym">!</span>


<span class="sym">!</span>Shootout<span class="sym">.</span>Consumer class methodsFor<span class="sym">:</span> <span class="str">'process'</span><span class="sym">!</span>

new
    <span class="sym">|</span> var <span class="sym">|</span>
    var <span class="sym">:=</span> <span class="kwa">self</span> basicNew<span class="sym">.</span>
    var semaphore<span class="sym">:</span> Semaphore new<span class="sym">.</span>
    <span class="sym">^</span>var<span class="sym">! !</span>


<span class="sym">!</span>Shootout<span class="sym">.</span>Consumer methodsFor<span class="sym">:</span> <span class="str">'process'</span><span class="sym">!</span>

msg
    semaphore wait<span class="sym">.</span>
    <span class="sym">^</span>msg<span class="sym">!</span>

msg<span class="sym">:</span> data
    msg <span class="sym">:=</span> data<span class="sym">.</span>
    semaphore signal<span class="sym">!</span>

semaphore<span class="sym">:</span> aSemaphore
    semaphore <span class="sym">:=</span> aSemaphore<span class="sym">! !</span>


Smalltalk<span class="sym">.</span>Shootout defineClass<span class="sym">: #</span>ProducerConsumer
	superclass<span class="sym">: #</span>{Shootout<span class="sym">.</span>Consumer}
	indexedType<span class="sym">: #</span>none
	private<span class="sym">:</span> <span class="kwa">false</span>
	instanceVariableNames<span class="sym">:</span> <span class="str">'consumer '</span>
	classInstanceVariableNames<span class="sym">:</span> <span class="str">''</span>
	imports<span class="sym">:</span> <span class="str">''</span>
	category<span class="sym">:</span> <span class="str">'Shootout'</span><span class="sym">!</span>


<span class="sym">!</span>Shootout<span class="sym">.</span>ProducerConsumer class methodsFor<span class="sym">:</span> <span class="str">'process'</span><span class="sym">!</span>

fork<span class="sym">:</span> consumer
    <span class="sym">|</span> proc <span class="sym">|</span>
    proc <span class="sym">:=</span> <span class="kwa">self</span> new<span class="sym">.</span>
    proc consumer<span class="sym">:</span> consumer<span class="sym">.</span>
    proc fork<span class="sym">.</span>
    <span class="sym">^</span>proc<span class="sym">! !</span>

<span class="sym">!</span>Shootout<span class="sym">.</span>ProducerConsumer methodsFor<span class="sym">:</span> <span class="str">'process'</span><span class="sym">!</span>

consumer<span class="sym">:</span> aProcess
    consumer <span class="sym">:=</span> aProcess<span class="sym">!</span>

fork
    <span class="sym">[</span> <span class="kwa">self</span> run <span class="sym">]</span> fork<span class="sym">!</span>

run
    <span class="sym">[</span> consumer msg<span class="sym">:</span> <span class="kwa">self</span> msg <span class="sym">+</span> <span class="num">1</span> <span class="sym">]</span> repeat<span class="sym">! !</span>
