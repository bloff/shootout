<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">*/</span>

<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.</span><span class="kwc">BufferedOutputStream</span>

<span class="kwa">object</span> mandelbrot <span class="sym">{</span>
   <span class="kwa">def</span> main<span class="sym">(</span>args<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]) = {</span>
      <span class="kwa">val</span> side <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">(</span><span class="num">0</span><span class="sym">))</span>
      <span class="kwa">val</span> limitSquared <span class="sym">=</span> <span class="num">4.0</span>
      <span class="kwa">val</span> max <span class="sym">=</span> <span class="num">50</span>
      <span class="kwa">var</span> bits <span class="sym">=</span> <span class="num">0</span>
      <span class="kwa">var</span> bitnum <span class="sym">=</span> <span class="num">0</span>
      <span class="kwa">val</span> w <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">BufferedOutputStream</span><span class="sym">(</span><span class="kwc">System</span><span class="sym">.</span>out<span class="sym">)</span>

      Console<span class="sym">.</span>println<span class="sym">(</span><span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">+</span> side <span class="sym">+</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span> side<span class="sym">)</span>

      <span class="kwa">var</span> y <span class="sym">=</span> <span class="num">0</span>
      <span class="kwa">while</span> <span class="sym">(</span>y <span class="sym">&lt;</span> side<span class="sym">){</span>

         <span class="kwa">var</span> x <span class="sym">=</span> <span class="num">0</span>
         <span class="kwa">while</span> <span class="sym">(</span>x <span class="sym">&lt;</span> side<span class="sym">){</span>

            <span class="kwa">val</span> cr <span class="sym">=</span> <span class="num">2.0</span> <span class="sym">*</span> x <span class="sym">/</span> side <span class="sym">-</span> <span class="num">1.5</span>
            <span class="kwa">val</span> ci <span class="sym">=</span> <span class="num">2.0</span> <span class="sym">*</span> y <span class="sym">/</span> side <span class="sym">-</span> <span class="num">1.0</span>

            <span class="kwa">var</span> zr <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span> <span class="kwa">var</span> zi <span class="sym">=</span> <span class="num">0.0</span>
            <span class="kwa">var</span> tr <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span> <span class="kwa">var</span> ti <span class="sym">=</span> <span class="num">0.0</span>

            <span class="kwa">var</span> j <span class="sym">=</span> max
            <span class="kwa">do</span> <span class="sym">{</span>
               zi <span class="sym">=</span> <span class="num">2.0</span> <span class="sym">*</span> zr <span class="sym">*</span> zi <span class="sym">+</span> ci
               zr <span class="sym">=</span> tr <span class="sym">-</span> ti <span class="sym">+</span> cr
               ti <span class="sym">=</span> zi<span class="sym">*</span>zi
               tr <span class="sym">=</span> zr<span class="sym">*</span>zr

               j <span class="sym">=</span> j <span class="sym">-</span> <span class="num">1</span>
            <span class="sym">}</span> <span class="kwa">while</span> <span class="sym">(!(</span>tr <span class="sym">+</span> ti <span class="sym">&gt;</span> limitSquared<span class="sym">) &amp;&amp;</span> j <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span>


            bits <span class="sym">=</span> bits <span class="sym">&lt;&lt;</span> <span class="num">1</span>
            <span class="kwa">if</span> <span class="sym">(!(</span>tr <span class="sym">+</span> ti <span class="sym">&gt;</span> limitSquared<span class="sym">))</span> bits <span class="sym">=</span> bits <span class="sym">+</span> <span class="num">1</span>
            bitnum <span class="sym">=</span> bitnum <span class="sym">+</span> <span class="num">1</span>

            <span class="kwa">if</span> <span class="sym">(</span>x <span class="sym">==</span> side <span class="sym">-</span> <span class="num">1</span><span class="sym">){</span>
               bits <span class="sym">=</span> bits <span class="sym">&lt;&lt; (</span><span class="num">8</span> <span class="sym">-</span> bitnum<span class="sym">)</span>
               bitnum <span class="sym">=</span> <span class="num">8</span>
            <span class="sym">}</span>

            <span class="kwa">if</span> <span class="sym">(</span>bitnum <span class="sym">==</span> <span class="num">8</span><span class="sym">){</span>
               w<span class="sym">.</span>write<span class="sym">(</span>bits<span class="sym">.</span>toByte<span class="sym">)</span>
               bits <span class="sym">=</span> <span class="num">0</span>
               bitnum <span class="sym">=</span> <span class="num">0</span>
            <span class="sym">}</span>

            x <span class="sym">=</span> x <span class="sym">+</span> <span class="num">1</span>
         <span class="sym">}</span>
         y <span class="sym">=</span> y <span class="sym">+</span> <span class="num">1</span>
      <span class="sym">}</span>
      w<span class="sym">.</span>close
   <span class="sym">}</span>
<span class="sym">}</span>
