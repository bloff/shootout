<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">*/</span>

<span class="kwa">using</span> System<span class="sym">;</span>

<span class="kwc">class</span> recursive
<span class="sym">{</span>
   <span class="kwb">static void</span> <span class="kwd">Main</span><span class="sym">(</span>string<span class="sym">[]</span> args<span class="sym">){</span>
      <span class="kwb">int</span> n <span class="sym">=</span> Int32<span class="sym">.</span><span class="kwd">Parse</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>
      Console<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span><span class="str">&quot;Ack(3,{0}): {1}&quot;</span><span class="sym">,</span> n<span class="sym">,</span> <span class="kwd">Ack</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span> n<span class="sym">));</span>
      Console<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span><span class="str">&quot;Fib({0:f1}): {1:f1}&quot;</span><span class="sym">,</span> <span class="num">28.0</span><span class="sym">+</span>n<span class="sym">,</span> <span class="kwd">Fib</span><span class="sym">(</span><span class="num">28.0</span><span class="sym">+</span>n<span class="sym">));</span>
      n<span class="sym">--;</span> Console<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span><span class="str">&quot;Tak({0},{1},{2}): {3}&quot;</span><span class="sym">,</span> <span class="num">3</span><span class="sym">*</span>n<span class="sym">,</span><span class="num">2</span><span class="sym">*</span>n<span class="sym">,</span>n<span class="sym">,</span> <span class="kwd">Tak</span><span class="sym">(</span><span class="num">3</span><span class="sym">*</span>n<span class="sym">,</span><span class="num">2</span><span class="sym">*</span>n<span class="sym">,</span>n<span class="sym">));</span>

      Console<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span><span class="str">&quot;Fib(3): {0}&quot;</span><span class="sym">,</span> <span class="kwd">Fib</span><span class="sym">(</span><span class="num">3</span><span class="sym">));</span>
      Console<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span><span class="str">&quot;Tak(3.0,2.0,1.0): {0:f1}&quot;</span><span class="sym">,</span><span class="kwd">Tak</span><span class="sym">(</span><span class="num">3.0</span><span class="sym">,</span><span class="num">2.0</span><span class="sym">,</span><span class="num">1.0</span><span class="sym">));</span>
   <span class="sym">}</span>


   <span class="kwc">public</span> <span class="kwb">static int</span> <span class="kwd">Ack</span><span class="sym">(</span><span class="kwb">int</span> m<span class="sym">,</span> <span class="kwb">int</span> n<span class="sym">) {</span>
      <span class="kwa">if</span> <span class="sym">(</span>m <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">return</span> n <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
      <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">return</span> <span class="kwd">Ack</span><span class="sym">(</span>m<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">);</span>
      <span class="kwa">else return</span> <span class="kwd">Ack</span><span class="sym">(</span>m<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> <span class="kwd">Ack</span><span class="sym">(</span>m<span class="sym">,</span> n<span class="sym">-</span><span class="num">1</span><span class="sym">));</span>
   <span class="sym">}</span>

   <span class="kwc">public</span> <span class="kwb">static int</span> <span class="kwd">Fib</span><span class="sym">(</span><span class="kwb">int</span> n<span class="sym">) {</span>
      <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">2</span><span class="sym">)</span> <span class="kwa">return</span> <span class="num">1</span><span class="sym">;</span>
      <span class="kwa">else return</span> <span class="kwd">Fib</span><span class="sym">(</span>n<span class="sym">-</span><span class="num">2</span><span class="sym">) +</span> <span class="kwd">Fib</span><span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">);</span>
   <span class="sym">}</span>

   <span class="kwc">public</span> <span class="kwb">static int</span> <span class="kwd">Tak</span><span class="sym">(</span><span class="kwb">int</span> x<span class="sym">,</span> <span class="kwb">int</span> y<span class="sym">,</span> <span class="kwb">int</span> z<span class="sym">) {</span>
      <span class="kwa">if</span> <span class="sym">(</span>y <span class="sym">&lt;</span> x<span class="sym">)</span> <span class="kwa">return</span> <span class="kwd">Tak</span><span class="sym">(</span><span class="kwd">Tak</span><span class="sym">(</span>x<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>y<span class="sym">,</span>z<span class="sym">),</span> <span class="kwd">Tak</span><span class="sym">(</span>y<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>z<span class="sym">,</span>x<span class="sym">),</span> <span class="kwd">Tak</span><span class="sym">(</span>z<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>x<span class="sym">,</span>y<span class="sym">));</span>
      <span class="kwa">else return</span> z<span class="sym">;</span>
   <span class="sym">}</span>

   <span class="kwc">public</span> <span class="kwb">static double</span> <span class="kwd">Fib</span><span class="sym">(</span><span class="kwb">double</span> n<span class="sym">) {</span>
      <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">2.0</span><span class="sym">)</span> <span class="kwa">return</span> <span class="num">1.0</span><span class="sym">;</span>
      <span class="kwa">else return</span> <span class="kwd">Fib</span><span class="sym">(</span>n<span class="sym">-</span><span class="num">2.0</span><span class="sym">) +</span> <span class="kwd">Fib</span><span class="sym">(</span>n<span class="sym">-</span><span class="num">1.0</span><span class="sym">);</span>
   <span class="sym">}</span>

   <span class="kwc">public</span> <span class="kwb">static double</span> <span class="kwd">Tak</span><span class="sym">(</span><span class="kwb">double</span> x<span class="sym">,</span> <span class="kwb">double</span> y<span class="sym">,</span> <span class="kwb">double</span> z<span class="sym">) {</span>
      <span class="kwa">if</span> <span class="sym">(</span>y <span class="sym">&lt;</span> x<span class="sym">)</span> <span class="kwa">return</span> <span class="kwd">Tak</span><span class="sym">(</span><span class="kwd">Tak</span><span class="sym">(</span>x<span class="sym">-</span><span class="num">1.0</span><span class="sym">,</span>y<span class="sym">,</span>z<span class="sym">),</span> <span class="kwd">Tak</span><span class="sym">(</span>y<span class="sym">-</span><span class="num">1.0</span><span class="sym">,</span>z<span class="sym">,</span>x<span class="sym">),</span> <span class="kwd">Tak</span><span class="sym">(</span>z<span class="sym">-</span><span class="num">1.0</span><span class="sym">,</span>x<span class="sym">,</span>y<span class="sym">));</span>
      <span class="kwa">else return</span> z<span class="sym">;</span>
   <span class="sym">}</span>
<span class="sym">}</span>
