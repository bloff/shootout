<span class="hl com">/**</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * Based on the CAL Open Quark version</span>
<span class="hl com"> * Contributed by Magnus Byne.</span>
<span class="hl com"> */</span>
module Binarytrees<span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Prelude using
    typeConstructor <span class="hl sym">=</span> Int<span class="hl sym">,</span> <span class="hl kwc">String</span><span class="hl sym">;</span>
    function <span class="hl sym">=</span> eager<span class="hl sym">,</span> max<span class="hl sym">,</span> seq<span class="hl sym">,</span> stringToInt<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Bits using
    function <span class="hl sym">=</span> shiftL<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span><span class="hl kwc">Collections</span><span class="hl sym">.</span><span class="hl kwc">List</span> using
    function <span class="hl sym">=</span> head<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Debug using
    function <span class="hl sym">=</span> show<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span><span class="hl kwc">Utilities</span><span class="hl sym">.</span><span class="hl kwc">MessageFormat</span><span class="hl sym">;</span>


data foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;java.io.PrintStream&quot;</span> <span class="hl kwa">private</span> JPrintStream<span class="hl sym">;</span>

foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;static field java.lang.System.out&quot;</span>
    <span class="hl kwa">private</span> stdout <span class="hl sym">::</span> JPrintStream<span class="hl sym">;</span>

foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;method println&quot;</span>
    <span class="hl kwa">private</span> printLn <span class="hl sym">::</span> JPrintStream <span class="hl sym">-&gt;</span> <span class="hl kwc">String</span> <span class="hl sym">-&gt; ();</span>

data <span class="hl kwa">public</span> Tree <span class="hl sym">=</span>
    Empty <span class="hl sym">|</span>
    <span class="hl kwc">Node</span>
        value <span class="hl sym">:: !</span>Int
        leftChild <span class="hl sym">::</span> Tree
        rightChild <span class="hl sym">::</span> Tree
    <span class="hl sym">;</span>

<span class="hl com">/** Traverses tree and returns a checksum on the values in the nodes.*/</span>
check <span class="hl sym">::</span> Tree <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>
check <span class="hl sym">!</span>tree <span class="hl sym">=</span>
    <span class="hl kwa">case</span> tree of
    Empty <span class="hl sym">-&gt;</span> <span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl kwc">Node</span> value left right <span class="hl sym">-&gt;</span> value <span class="hl sym">+</span> check left <span class="hl sym">-</span> check right<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl com">/** builds i trees of depth */</span>
make <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Tree<span class="hl sym">;</span>
make <span class="hl sym">!</span>i <span class="hl sym">!</span>depth <span class="hl sym">=</span>
    <span class="hl kwa">if</span> depth <span class="hl sym">==</span> <span class="hl num">1</span> then
        <span class="hl kwc">Node</span>
            i
            <span class="hl sym">(</span>eager $ <span class="hl kwc">Node</span> <span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> i <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span> Empty Empty<span class="hl sym">)</span>
            <span class="hl sym">(</span>eager $ <span class="hl kwc">Node</span> <span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> i<span class="hl sym">)</span> Empty Empty<span class="hl sym">)</span>
    <span class="hl kwa">else</span>
        <span class="hl kwc">Node</span>
            i
            <span class="hl sym">(</span><span class="hl kwd">eager</span> <span class="hl sym">(</span><span class="hl kwd">make</span> <span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> i <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">) (</span>depth <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)))</span>
            <span class="hl sym">(</span><span class="hl kwd">eager</span> <span class="hl sym">(</span><span class="hl kwd">make</span> <span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> i<span class="hl sym">) (</span>depth <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)))</span>
    <span class="hl sym">;</span>

<span class="hl com">/**</span>
<span class="hl com"> * Test different numbers of trees at different depths and</span>
<span class="hl com"> * writes the number and checksum to stdout.</span>
<span class="hl com"> */</span>
testTrees <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt; ();</span>
testTrees <span class="hl sym">!</span>depth <span class="hl sym">!</span>minDepth <span class="hl sym">!</span>maxDepth <span class="hl sym">=</span>
    let
        <span class="hl slc">//allocates and checks 2i trees, each of depth depth</span>
        testFixedDepth <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>
        testFixedDepth <span class="hl sym">!</span>i <span class="hl sym">!</span>depth <span class="hl sym">!</span>checksum <span class="hl sym">=</span>
            <span class="hl kwa">if</span> i <span class="hl sym">==</span> <span class="hl num">0</span> then
                checksum
            <span class="hl kwa">else</span>
                testFixedDepth
                    <span class="hl sym">(</span>i <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span>
                    depth
                    <span class="hl sym">(</span>
                        checksum <span class="hl sym">+</span> <span class="hl kwd">check</span> <span class="hl sym">(</span>make i depth<span class="hl sym">)</span>
                        <span class="hl sym">+</span> <span class="hl kwd">check</span> <span class="hl sym">(</span><span class="hl kwd">make</span> <span class="hl sym">(-</span>i<span class="hl sym">)</span> depth<span class="hl sym">)</span>
                    <span class="hl sym">)</span>
            <span class="hl sym">;</span>
    in
        <span class="hl kwa">if</span> depth <span class="hl sym">&gt;</span> maxDepth then
            <span class="hl sym">()</span>
        <span class="hl kwa">else</span>
            let
                i <span class="hl sym">::</span> Int<span class="hl sym">;</span>
                i <span class="hl sym">=</span> eager $ shiftL <span class="hl kwd">1</span> <span class="hl sym">(</span>maxDepth <span class="hl sym">-</span> depth <span class="hl sym">+</span> minDepth<span class="hl sym">);</span>
            in
                printLn
                    stdout
                    <span class="hl sym">(</span>
                        <span class="hl kwd">show</span> <span class="hl sym">(</span>i <span class="hl sym">*</span> <span class="hl num">2</span><span class="hl sym">)</span>
                        <span class="hl sym">++</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">trees of depth &quot;</span>
                        <span class="hl sym">++</span> show depth
                        <span class="hl sym">++</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">check: &quot;</span>
                        <span class="hl sym">++</span> <span class="hl kwd">show</span> <span class="hl sym">(</span>testFixedDepth i depth <span class="hl num">0</span><span class="hl sym">)</span>
                    <span class="hl sym">)</span>
                `seq`
                <span class="hl kwd">testTrees</span> <span class="hl sym">(</span>depth <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">)</span> minDepth maxDepth
    <span class="hl sym">;</span>

main <span class="hl sym">:: [</span><span class="hl kwc">String</span><span class="hl sym">] -&gt; ();</span>
<span class="hl kwa">public</span> main <span class="hl sym">!</span>args <span class="hl sym">=</span>
    let
        n <span class="hl sym">::</span> Int<span class="hl sym">;</span>
        n <span class="hl sym">=</span> eager $ <span class="hl kwd">stringToInt</span> <span class="hl sym">(</span>head args<span class="hl sym">);</span>

        minDepth <span class="hl sym">::</span> Prelude<span class="hl sym">.</span>Num a <span class="hl sym">=&gt;</span> a<span class="hl sym">;</span>
        minDepth <span class="hl sym">=</span> <span class="hl num">4</span><span class="hl sym">;</span>

        maxDepth <span class="hl sym">::</span> Int<span class="hl sym">;</span>
        maxDepth <span class="hl sym">=</span> <span class="hl kwd">max</span> <span class="hl sym">(</span>minDepth <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">)</span> n<span class="hl sym">;</span>

        stretchDepth <span class="hl sym">::</span> Int<span class="hl sym">;</span>
        stretchDepth <span class="hl sym">=</span> maxDepth <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>

        longLivedTree <span class="hl sym">::</span> Tree<span class="hl sym">;</span>
        longLivedTree <span class="hl sym">=</span> make <span class="hl num">0</span> maxDepth<span class="hl sym">;</span>
    in
        printLn
            stdout
            <span class="hl sym">(</span>
                <span class="hl str">&quot;stretch tree of depth &quot;</span>
                <span class="hl sym">++</span> show stretchDepth
                <span class="hl sym">++</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">check: &quot;</span>
                <span class="hl sym">++</span> <span class="hl kwd">show</span> <span class="hl sym">(</span><span class="hl kwd">check</span> <span class="hl sym">(</span>make <span class="hl num">0</span> stretchDepth<span class="hl sym">))</span>
            <span class="hl sym">)</span>
        `seq`
        longLivedTree
        `seq`
        testTrees minDepth minDepth maxDepth
        `seq`
        printLn
            stdout
            <span class="hl sym">(</span>
                <span class="hl str">&quot;long lived tree of depth &quot;</span>
                <span class="hl sym">++</span> show maxDepth
                <span class="hl sym">++</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">check: &quot;</span>
                <span class="hl sym">++</span> <span class="hl kwd">show</span> <span class="hl sym">(</span>check longLivedTree<span class="hl sym">)</span>
            <span class="hl sym">)</span>
    <span class="hl sym">;</span>

