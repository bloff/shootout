<span class="slc">#!/usr/bin/python -OO
</span><span class="slc">#
</span><span class="slc"># The Great Computer Language Shootout
</span><span class="slc"># http://shootout.alioth.debian.org/
</span><span class="slc">#
</span><span class="slc"># Contributed by Peter Crabtree
</span><span class="slc">#
</span><span class="slc"># This implementation of the fannkuch benchmark makes heavy
</span><span class="slc"># uses of Pythonic list slicing to do most of the grunt work.
</span><span class="slc"># Note that it is not suitable as a Python-Psyco implemenatation, as
</span><span class="slc"># Psyco is able to much, much better optimize a more &quot;manual&quot; (C-like)
</span><span class="slc"># implementation (one which implements list reversal manually).
</span>
<span class="kwc">import</span> sys

<span class="kwb">def</span> main<span class="sym">():
</span>	n <span class="sym">= ((</span><span class="kwa">len</span><span class="sym">(</span>sys<span class="sym">.</span>argv<span class="sym">) &gt;=</span> <span class="num">2</span><span class="sym">)</span> <span class="kwb">and</span> <span class="sym">[</span><span class="kwa">int</span><span class="sym">(</span>sys<span class="sym">.</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">])]</span> <span class="kwb">or</span> <span class="sym">[</span><span class="num">1</span><span class="sym">])[</span><span class="num">0</span><span class="sym">]
</span>	<span class="kwb">print</span> <span class="str">&quot;Pfannkuchen(%d) = %ld&quot;</span> <span class="sym">% (</span>n<span class="sym">,</span> fannkuch<span class="sym">(</span>n<span class="sym">))

</span><span class="kwb">def</span> fannkuch<span class="sym">(</span>n<span class="sym">):
</span>	perm1 <span class="sym">=</span> <span class="kwa">range</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> n <span class="sym">+</span> <span class="num">1</span><span class="sym">)
</span>	count <span class="sym">= [</span><span class="num">0</span><span class="sym">]*</span>n
	r <span class="sym">=</span> n
	maxFlipsCount <span class="sym">=</span> <span class="num">0

</span>	<span class="kwb">while</span> True<span class="sym">:
</span>		<span class="kwb">while</span> r <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">:
</span>			count<span class="sym">[</span>r <span class="num">- 1</span><span class="sym">] =</span> r
			r <span class="sym">-=</span> <span class="num">1
</span>		<span class="kwb">if not</span> <span class="sym">(</span>perm1<span class="sym">[</span><span class="num">0</span><span class="sym">] ==</span> <span class="num">1</span> <span class="kwb">or</span> perm1<span class="sym">[</span>n <span class="num">- 1</span><span class="sym">] == (</span>n <span class="num">- 2</span><span class="sym">)):
</span>			perm <span class="sym">=</span> perm1<span class="sym">[:]
</span>			flips <span class="sym">=</span> <span class="num">0
</span>			<span class="kwb">while</span> <span class="sym">(</span>perm<span class="sym">[</span><span class="num">0</span><span class="sym">] -</span> <span class="num">1</span><span class="sym">):
</span>				perm<span class="sym">[:</span>perm<span class="sym">[</span><span class="num">0</span><span class="sym">]] =</span> perm<span class="sym">[:</span>perm<span class="sym">[</span><span class="num">0</span><span class="sym">]][::-</span><span class="num">1</span><span class="sym">]
</span>				flips <span class="sym">+=</span> <span class="num">1
</span>			maxFlipsCount <span class="sym">=</span> <span class="kwa">max</span><span class="sym">(</span>maxFlipsCount<span class="sym">,</span> flips<span class="sym">)

</span>		<span class="kwb">while</span> True<span class="sym">:
</span>			<span class="kwb">if</span> r <span class="sym">==</span> n<span class="sym">:
</span>				<span class="kwb">return</span> maxFlipsCount
			perm1<span class="sym">[:</span>r<span class="sym">],</span> perm1<span class="sym">[</span>r<span class="sym">] =</span> perm1<span class="sym">[</span><span class="num">1</span><span class="sym">:</span>r <span class="sym">+</span> <span class="num">1</span><span class="sym">],</span> perm1<span class="sym">[</span><span class="num">0</span><span class="sym">]
</span>			count<span class="sym">[</span>r<span class="sym">] -=</span> <span class="num">1
</span>			<span class="kwb">if</span> count<span class="sym">[</span>r<span class="sym">] &gt;</span> <span class="num">0</span><span class="sym">:
</span>				<span class="kwb">break
</span>			r <span class="sym">+=</span> <span class="num">1
</span>main<span class="sym">()</span>
