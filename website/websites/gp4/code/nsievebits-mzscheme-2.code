<span class="hl slc">;;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;</span>
<span class="hl slc">;; Adapted from CMUCL code by Dima Dorfman; bit-vector stuff by Alex Shinn;</span>
<span class="hl slc">;; cobbled together by felix, converted to MzScheme by Brent Fulgham</span>
<span class="hl slc">;; modified by Matthew Flatt</span>

#lang scheme<span class="hl sym">/</span>base
<span class="hl sym">(</span>require scheme<span class="hl sym">/</span>cmdline<span class="hl sym">)</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>make-bit-vector size<span class="hl sym">)</span>
  <span class="hl sym">(</span>let<span class="hl sym">* ((</span>len <span class="hl sym">(</span>quotient <span class="hl sym">(+</span> size <span class="hl num">7</span><span class="hl sym">)</span> <span class="hl num">8</span><span class="hl sym">))</span>
         <span class="hl sym">(</span>res <span class="hl sym">(</span>make-bytes len #b11111111<span class="hl sym">)))</span>
    <span class="hl sym">(</span>let <span class="hl sym">((</span>off <span class="hl sym">(</span>remainder size <span class="hl num">8</span><span class="hl sym">)))</span>
      <span class="hl sym">(</span>unless <span class="hl sym">(</span>zero? off<span class="hl sym">)</span>
        <span class="hl sym">(</span>bytes-<span class="hl kwa">set</span><span class="hl sym">!</span> res <span class="hl sym">(</span>- len <span class="hl num">1</span><span class="hl sym">) (</span>- <span class="hl sym">(</span>arithmetic-shift <span class="hl num">1</span> off<span class="hl sym">)</span> <span class="hl num">1</span><span class="hl sym">))))</span>
    res<span class="hl sym">))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>bit-vector-ref vec i<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>byte <span class="hl sym">(</span>arithmetic-shift i -<span class="hl num">3</span><span class="hl sym">))</span>
        <span class="hl sym">(</span>off <span class="hl sym">(</span>bitwise-<span class="hl kwa">and</span> i #x7<span class="hl sym">)))</span>
    <span class="hl sym">(</span><span class="hl kwa">and</span> <span class="hl sym">(&lt;</span> byte <span class="hl sym">(</span>bytes-<span class="hl kwa">length</span> vec<span class="hl sym">))</span>
         <span class="hl sym">(</span><span class="hl kwa">not</span> <span class="hl sym">(</span>zero? <span class="hl sym">(</span>bitwise-<span class="hl kwa">and</span> <span class="hl sym">(</span>bytes-ref vec byte<span class="hl sym">)</span>
                                  <span class="hl sym">(</span>arithmetic-shift <span class="hl num">1</span> off<span class="hl sym">)))))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>bit-vector-<span class="hl kwa">set</span><span class="hl sym">!</span> vec i x<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>byte <span class="hl sym">(</span>arithmetic-shift i -<span class="hl num">3</span><span class="hl sym">))</span>
        <span class="hl sym">(</span>off <span class="hl sym">(</span>bitwise-<span class="hl kwa">and</span> i #x7<span class="hl sym">)))</span>
    <span class="hl sym">(</span>let <span class="hl sym">((</span>val <span class="hl sym">(</span>bytes-ref vec byte<span class="hl sym">))</span>
          <span class="hl sym">(</span>mask <span class="hl sym">(</span>arithmetic-shift <span class="hl num">1</span> off<span class="hl sym">)))</span>
      <span class="hl sym">(</span>bytes-<span class="hl kwa">set</span><span class="hl sym">!</span> vec
                  byte
                  <span class="hl sym">(</span><span class="hl kwa">if</span> x
                      <span class="hl sym">(</span>bitwise-ior val mask<span class="hl sym">)</span>
                      <span class="hl sym">(</span>bitwise-<span class="hl kwa">and</span> val <span class="hl sym">(</span>bitwise-<span class="hl kwa">not</span> mask<span class="hl sym">)))))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>nsievebits m<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>a <span class="hl sym">(</span>make-bit-vector m<span class="hl sym">)))</span>
    <span class="hl sym">(</span>define <span class="hl sym">(</span>clear i<span class="hl sym">)</span>
      <span class="hl sym">(</span>do <span class="hl sym">([</span>j <span class="hl sym">(+</span> i i<span class="hl sym">) (+</span> j i<span class="hl sym">)])</span>
  	  <span class="hl sym">((&gt;=</span> j m<span class="hl sym">))</span>
        <span class="hl sym">(</span>bit-vector-<span class="hl kwa">set</span><span class="hl sym">!</span> a j #f<span class="hl sym">)))</span>
    <span class="hl sym">(</span>let <span class="hl sym">([</span>c <span class="hl num">0</span><span class="hl sym">])</span>
      <span class="hl sym">(</span>do <span class="hl sym">([</span>i <span class="hl num">2</span> <span class="hl sym">(</span>add1 i<span class="hl sym">)])</span>
          <span class="hl sym">((&gt;=</span> i m<span class="hl sym">)</span> c<span class="hl sym">)</span>
        <span class="hl sym">(</span>when <span class="hl sym">(</span>bit-vector-ref a i<span class="hl sym">)</span>
          <span class="hl sym">(</span>clear i<span class="hl sym">)</span>
          <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> c <span class="hl sym">(</span>add1 c<span class="hl sym">)))))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>string-pad s len<span class="hl sym">)</span>
  <span class="hl sym">(</span>string-<span class="hl kwa">append</span> <span class="hl sym">(</span>make-string <span class="hl sym">(</span>- len <span class="hl sym">(</span>string-<span class="hl kwa">length</span> s<span class="hl sym">))</span> #\space<span class="hl sym">)</span>
                 s<span class="hl sym">))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>test n<span class="hl sym">)</span>
  <span class="hl sym">(</span>let<span class="hl sym">* ((</span>m <span class="hl sym">(* (</span><span class="hl kwa">expt</span> <span class="hl num">2</span> n<span class="hl sym">)</span> <span class="hl num">10000</span><span class="hl sym">))</span>
         <span class="hl sym">(</span>count <span class="hl sym">(</span>nsievebits m<span class="hl sym">)))</span>
    <span class="hl sym">(</span>printf <span class="hl str">&quot;Primes up to ~a ~a</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
            <span class="hl sym">(</span>string-pad <span class="hl sym">(</span>number-<span class="hl sym">&gt;</span>string m<span class="hl sym">)</span> <span class="hl num">8</span><span class="hl sym">)</span>
            <span class="hl sym">(</span>string-pad <span class="hl sym">(</span>number-<span class="hl sym">&gt;</span>string count<span class="hl sym">)</span> <span class="hl num">8</span><span class="hl sym">))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>main n<span class="hl sym">)</span>
  <span class="hl sym">(</span>when <span class="hl sym">(&gt;=</span> n <span class="hl num">0</span><span class="hl sym">) (</span>test n<span class="hl sym">))</span>
  <span class="hl sym">(</span>when <span class="hl sym">(&gt;=</span> n <span class="hl num">1</span><span class="hl sym">) (</span>test <span class="hl sym">(</span>- n <span class="hl num">1</span><span class="hl sym">)))</span>
  <span class="hl sym">(</span>when <span class="hl sym">(&gt;=</span> n <span class="hl num">2</span><span class="hl sym">) (</span>test <span class="hl sym">(</span>- n <span class="hl num">2</span><span class="hl sym">))))</span>

<span class="hl sym">(</span><span class="hl kwa">command</span>-<span class="hl kwa">line</span> #<span class="hl sym">:</span>args <span class="hl sym">(</span>n<span class="hl sym">) (</span>main <span class="hl sym">(</span>string-<span class="hl sym">&gt;</span>number n<span class="hl sym">)))</span>
