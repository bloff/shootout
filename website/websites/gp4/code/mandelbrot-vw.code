<span class="com">&quot;  The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Paolo Bonzini</span>
<span class="com">   modified by Isaac Gouy&quot;!</span>
<span class="com"></span>
<span class="com">!Shootout.Tests class methodsFor: 'benchmarking'!</span>
<span class="com"></span>
<span class="com">mandelbrot</span>
<span class="com">   | width height limit2 isOverLimit m bits bitnum s |</span>
<span class="com">   width := CEnvironment argv first asNumber.</span>
<span class="com">   height := width.</span>
<span class="com">   limit2 := 4.0d.</span>
<span class="com">   isOverLimit := False.</span>
<span class="com">   m := 50.</span>
<span class="com">   bits := 0.</span>
<span class="com">   bitnum := 0.</span>
<span class="com">   s := ExternalWriteStream on:</span>
<span class="com">      (ExternalConnection ioAccessor: (UnixDiskFileAccessor new handle: 1)).</span>
<span class="com">   s nextPutAll: 'P4'; cr; nextPutAll: width printString, ' ', height printString; cr.</span>
<span class="com">   s binary.</span>
<span class="com"></span>
<span class="com">   width := width asDouble. height := height  asDouble.</span>
<span class="com">   0.0d to: height - 1.0d  do: [:y|</span>
<span class="com">      0.0d to: width - 1.0d do: [:x| | zr zi cr ci i |</span>
<span class="com">         zr := 0.0d. zi := 0.0d.</span>
<span class="com">         cr := 2.0d * x / width - 1.5d.</span>
<span class="com">         ci := 2.0d * y / height - 1.0d.</span>
<span class="com"></span>
<span class="com">         i := 0.</span>
<span class="com">         [ | tr ti |</span>
<span class="com">            tr := (zr*zr) - (zi*zi) + cr.</span>
<span class="com">            ti := 2.0d * zr * zi + ci.</span>
<span class="com">            zr := tr.</span>
<span class="com">            zi := ti.</span>
<span class="com">            isOverLimit := (zr*zr) + (zi*zi) &gt; limit2.</span>
<span class="com">            (isOverLimit not) and: [(i := i+1) &lt; m]</span>
<span class="com">         ] whileTrue.</span>
<span class="com"></span>
<span class="com">         bits := bits bitShift: 1.</span>
<span class="com">         (isOverLimit not) ifTrue: [bits := bits + 1].</span>
<span class="com">         bitnum := bitnum + 1.</span>
<span class="com"></span>
<span class="com">         (x = (width - 1)) ifTrue: [</span>
<span class="com">            bits := bits bitShift: (8 - bitnum).</span>
<span class="com">            bitnum := 8.</span>
<span class="com">            ].</span>
<span class="com"></span>
<span class="com">         (bitnum = 8) ifTrue: [</span>
<span class="com">            s nextPut: bits.</span>
<span class="com">            bits := 0. bitnum := 0.</span>
<span class="com">            ].</span>
<span class="com">         ].</span>
<span class="com">      ].</span>
<span class="com">   s flush.</span>
<span class="com">   ^'' ! !</span>
