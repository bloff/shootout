<span class="com">&quot;*  The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Paolo Bonzini</span>
<span class="com">   modified by Isaac Gouy *&quot;</span><span class="sym">!</span>

<span class="sym">!</span>Shootout<span class="sym">.</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>

mandelbrot
   <span class="sym">|</span> width height limit2 isOverLimit m bits bitnum s <span class="sym">|</span>
   width <span class="sym">:=</span> CEnvironment argv first asNumber<span class="sym">.</span>
   height <span class="sym">:=</span> width<span class="sym">.</span>
   limit2 <span class="sym">:=</span> <span class="num">4.0</span>d<span class="sym">.</span>
   isOverLimit <span class="sym">:=</span> False<span class="sym">.</span>
   m <span class="sym">:=</span> <span class="num">50</span><span class="sym">.</span>
   bits <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>
   bitnum <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>
   s <span class="sym">:=</span> ExternalWriteStream on<span class="sym">:</span>
      <span class="sym">(</span>ExternalConnection ioAccessor<span class="sym">: (</span>UnixDiskFileAccessor new handle<span class="sym">:</span> <span class="num">1</span><span class="sym">)).</span>
   s nextPutAll<span class="sym">:</span> <span class="str">'P4'</span><span class="sym">;</span> cr<span class="sym">;</span> nextPutAll<span class="sym">:</span> width printString<span class="sym">,</span> <span class="str">' '</span><span class="sym">,</span> height printString<span class="sym">;</span> cr<span class="sym">.</span>
   s binary<span class="sym">.</span>

   width <span class="sym">:=</span> width asDouble<span class="sym">.</span> height <span class="sym">:=</span> height  asDouble<span class="sym">.</span>
   <span class="num">0.0</span>d to<span class="sym">:</span> height <span class="sym">-</span> <span class="num">1.0</span>d  do<span class="sym">: [:</span>y<span class="sym">|</span>
      <span class="num">0.0</span>d to<span class="sym">:</span> width <span class="sym">-</span> <span class="num">1.0</span>d do<span class="sym">: [:</span>x<span class="sym">| |</span> zr zi cr ci i <span class="sym">|</span>
         zr <span class="sym">:=</span> <span class="num">0.0</span>d<span class="sym">.</span> zi <span class="sym">:=</span> <span class="num">0.0</span>d<span class="sym">.</span>
         cr <span class="sym">:=</span> <span class="num">2.0</span>d <span class="sym">*</span> x <span class="sym">/</span> width <span class="sym">-</span> <span class="num">1.5</span>d<span class="sym">.</span>
         ci <span class="sym">:=</span> <span class="num">2.0</span>d <span class="sym">*</span> y <span class="sym">/</span> height <span class="sym">-</span> <span class="num">1.0</span>d<span class="sym">.</span>

         i <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>
         <span class="sym">[ |</span> tr ti <span class="sym">|</span>
            tr <span class="sym">:= (</span>zr<span class="sym">*</span>zr<span class="sym">) - (</span>zi<span class="sym">*</span>zi<span class="sym">) +</span> cr<span class="sym">.</span>
            ti <span class="sym">:=</span> <span class="num">2.0</span>d <span class="sym">*</span> zr <span class="sym">*</span> zi <span class="sym">+</span> ci<span class="sym">.</span>
            zr <span class="sym">:=</span> tr<span class="sym">.</span>
            zi <span class="sym">:=</span> ti<span class="sym">.</span>
            isOverLimit <span class="sym">:= (</span>zr<span class="sym">*</span>zr<span class="sym">) + (</span>zi<span class="sym">*</span>zi<span class="sym">) &gt;</span> limit2<span class="sym">.</span>
            <span class="sym">(</span>isOverLimit not<span class="sym">)</span> and<span class="sym">: [(</span>i <span class="sym">:=</span> i<span class="sym">+</span><span class="num">1</span><span class="sym">) &lt;</span> m<span class="sym">]</span>
         <span class="sym">]</span> whileTrue<span class="sym">.</span>

         bits <span class="sym">:=</span> bits bitShift<span class="sym">:</span> <span class="num">1</span><span class="sym">.</span>
         <span class="sym">(</span>isOverLimit not<span class="sym">)</span> ifTrue<span class="sym">: [</span>bits <span class="sym">:=</span> bits <span class="sym">+</span> <span class="num">1</span><span class="sym">].</span>
         bitnum <span class="sym">:=</span> bitnum <span class="sym">+</span> <span class="num">1</span><span class="sym">.</span>

         <span class="sym">(</span>x <span class="sym">= (</span>width <span class="sym">-</span> <span class="num">1</span><span class="sym">))</span> ifTrue<span class="sym">: [</span>
            bits <span class="sym">:=</span> bits bitShift<span class="sym">: (</span><span class="num">8</span> <span class="sym">-</span> bitnum<span class="sym">).</span>
            bitnum <span class="sym">:=</span> <span class="num">8</span><span class="sym">.</span>
            <span class="sym">].</span>

         <span class="sym">(</span>bitnum <span class="sym">=</span> <span class="num">8</span><span class="sym">)</span> ifTrue<span class="sym">: [</span>
            s nextPut<span class="sym">:</span> bits<span class="sym">.</span>
            bits <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span> bitnum <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>
            <span class="sym">].</span>
         <span class="sym">].</span>
      <span class="sym">].</span>
   s flush<span class="sym">.</span>
   <span class="sym">^</span><span class="str">''</span> <span class="sym">! !</span>
