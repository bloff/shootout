<span class="com">&quot;* The Computer Language Shootout</span>
<span class="com">    http://shootout.alioth.debian.org/</span>
<span class="com">    contributed by Eliot Miranda *&quot;</span><span class="sym">!</span>

Object subclass<span class="sym">: #</span>Tests	instanceVariableNames<span class="sym">:</span> <span class="str">''</span>	classVariableNames<span class="sym">:</span> <span class="str">''</span>	poolDictionaries<span class="sym">:</span> <span class="str">''</span>	category<span class="sym">:</span> <span class="str">'Shootout'</span><span class="sym">!!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>mandelbrot<span class="sym">:</span> extent to<span class="sym">:</span> output   <span class="sym">|</span> limit2 isOverLimit bits bitnum <span class="sym">|</span>   limit2 <span class="sym">:=</span> <span class="num">4.0</span><span class="sym">.</span>   bits <span class="sym">:=</span> bitnum <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>   <span class="num">0</span> to<span class="sym">:</span> extent <span class="sym">-</span> <span class="num">1</span> do<span class="sym">:      [:</span>y <span class="sym">|</span>      <span class="num">0</span> to<span class="sym">:</span> extent <span class="sym">-</span> <span class="num">1</span> do<span class="sym">:         [:</span>x <span class="sym">| |</span> zr zi cr ci i <span class="sym">|</span>         zr <span class="sym">:=</span> zi <span class="sym">:=</span> <span class="num">0.0</span><span class="sym">.</span>         cr <span class="sym">:=</span> <span class="num">2.0</span> <span class="sym">*</span> x <span class="sym">/</span> extent <span class="sym">-</span> <span class="num">1.5</span><span class="sym">.</span>         ci <span class="sym">:=</span> <span class="num">2.0</span> <span class="sym">*</span> y <span class="sym">/</span> extent <span class="sym">-</span> <span class="num">1.0</span><span class="sym">.</span>         i <span class="sym">:=</span> <span class="num">0</span><span class="sym">.         [|</span> tr ti <span class="sym">|</span>         tr <span class="sym">:=</span> zr <span class="sym">*</span> zr <span class="sym">- (</span>zi <span class="sym">*</span> zi<span class="sym">) +</span> cr<span class="sym">.</span>         ti <span class="sym">:=</span> <span class="num">2.0</span> <span class="sym">*</span> zr <span class="sym">*</span> zi <span class="sym">+</span> ci<span class="sym">.</span>         zr <span class="sym">:=</span> tr<span class="sym">.</span>         zi <span class="sym">:=</span> ti<span class="sym">.         (</span>isOverLimit <span class="sym">:=</span> zr <span class="sym">*</span> zr <span class="sym">+ (</span>zi <span class="sym">*</span> zi<span class="sym">) &gt;</span> limit2<span class="sym">)</span> or<span class="sym">: [(</span>i <span class="sym">:=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">) &gt;=</span> <span class="num">50</span><span class="sym">]]</span>            whileFalse<span class="sym">.</span>         bits <span class="sym">:=</span> bits <span class="sym">+</span> bits<span class="sym">.</span>         isOverLimit ifFalse<span class="sym">: [</span>bits <span class="sym">:=</span> bits <span class="sym">+</span> <span class="num">1</span><span class="sym">].</span>         bitnum <span class="sym">:=</span> bitnum <span class="sym">+</span> <span class="num">1</span><span class="sym">.</span>         x <span class="sym">= (</span>extent <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> ifTrue<span class="sym">:            [</span>bits <span class="sym">:=</span> bits bitShift<span class="sym">:</span> <span class="num">8</span> <span class="sym">-</span> bitnum<span class="sym">.</span>            bitnum <span class="sym">:=</span> <span class="num">8</span><span class="sym">].</span>         bitnum <span class="sym">=</span> <span class="num">8</span> ifTrue<span class="sym">:            [</span>output nextPut<span class="sym">:</span> bits<span class="sym">.</span>            bits <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>            bitnum <span class="sym">:=</span> <span class="num">0</span><span class="sym">]]]! !!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'platform'</span><span class="sym">!</span>arg   <span class="sym">^</span>CEnvironment commandLine last asNumber<span class="sym">! !!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'platform'</span><span class="sym">!</span>postscript   <span class="sym">^</span><span class="str">''</span><span class="sym">! !!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'platform'</span><span class="sym">!</span>stdout   <span class="sym">^</span>Stdout<span class="sym">! !!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmark scripts'</span><span class="sym">!</span>mandelbrot   <span class="sym">|</span> n <span class="sym">|</span>   n <span class="sym">:=</span> <span class="kwa">self</span> arg<span class="sym">.</span>   <span class="kwa">self</span> stdout      nextPutAll<span class="sym">:</span> <span class="str">'P4'</span><span class="sym">;</span> nextPut<span class="sym">:</span> Character lf<span class="sym">;</span>      nextPutAll<span class="sym">:</span> n printString<span class="sym">;</span> space<span class="sym">;</span>       nextPutAll<span class="sym">:</span> n printString<span class="sym">;</span> nextPut<span class="sym">:</span> Character lf<span class="sym">;</span>
      binary<span class="sym">.</span>   <span class="kwa">self</span> mandelbrot<span class="sym">:</span> n to<span class="sym">:</span> <span class="kwa">self</span> stdout<span class="sym">.   ^</span><span class="kwa">self</span> postscript<span class="sym">! !</span>
