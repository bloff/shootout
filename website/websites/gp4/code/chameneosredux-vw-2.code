<span class="hl com">&quot;* The Computer Language Benchmarks Game</span>
<span class="hl com">    http://shootout.alioth.debian.org/</span>
<span class="hl com">    contributed by Carlo Teixeira *&quot;</span><span class="hl sym">!</span>

Smalltalk defineClass<span class="hl sym">: #</span>ChameneosColour
   superclass<span class="hl sym">: #</span>{Core<span class="hl sym">.</span>Object}
   indexedType<span class="hl sym">: #</span>none
   private<span class="hl sym">:</span> <span class="hl kwa">false</span>
   instanceVariableNames<span class="hl sym">:</span> <span class="hl str">'color '</span>
   classInstanceVariableNames<span class="hl sym">:</span> <span class="hl str">'red yellow blue '</span>
   imports<span class="hl sym">:</span> <span class="hl str">''</span>
   category<span class="hl sym">:</span> <span class="hl str">'chameleon'</span><span class="hl sym">!</span>


<span class="hl sym">!</span>ChameneosColour class methodsFor<span class="hl sym">:</span> <span class="hl str">'as yet unclassified'</span><span class="hl sym">!</span>

createBlue
   <span class="hl sym">^(</span><span class="hl kwa">super</span> new<span class="hl sym">)</span> color<span class="hl sym">: #</span>blue<span class="hl sym">.!</span>

createRed
   <span class="hl sym">^(</span><span class="hl kwa">super</span> new<span class="hl sym">)</span> color<span class="hl sym">: #</span>red<span class="hl sym">.!</span>

createYellow
   <span class="hl sym">^(</span><span class="hl kwa">super</span> new<span class="hl sym">)</span> color<span class="hl sym">: #</span>yellow<span class="hl sym">.!</span>

generateReportOfColours
   <span class="hl sym">|</span> readOut colours <span class="hl sym">|</span>
   colours<span class="hl sym">:=</span>Array with<span class="hl sym">:</span> blue with<span class="hl sym">:</span> red with<span class="hl sym">:</span> yellow<span class="hl sym">.</span>
   readOut <span class="hl sym">:=</span> WriteStream on<span class="hl sym">:</span> String new<span class="hl sym">.</span>

   colours do<span class="hl sym">:[:</span>aColour<span class="hl sym">|</span>
      colours do<span class="hl sym">:[:</span>anotherColour<span class="hl sym">|</span>
         aColour printOn<span class="hl sym">:</span> readOut<span class="hl sym">.</span>
         readOut nextPutAll<span class="hl sym">:</span> <span class="hl str">' + '</span><span class="hl sym">.</span>
         anotherColour printOn<span class="hl sym">:</span> readOut<span class="hl sym">.</span>
         readOut nextPutAll<span class="hl sym">:</span> <span class="hl str">' -&gt; '</span><span class="hl sym">.</span>
         <span class="hl sym">(</span>aColour complementaryColourFor<span class="hl sym">:</span> anotherColour<span class="hl sym">)</span> printOn<span class="hl sym">:</span> readOut<span class="hl sym">.</span>
         readOut cr
         <span class="hl sym">]</span>
      <span class="hl sym">].</span>
   <span class="hl sym">^</span>readOut<span class="hl sym">.!</span>

initialize
   &quot;<span class="hl kwa">self</span> initialize&quot;
   red<span class="hl sym">:=</span><span class="hl kwa">self</span> createRed<span class="hl sym">.</span>
   blue<span class="hl sym">:=</span><span class="hl kwa">self</span> createBlue<span class="hl sym">.</span>
   yellow<span class="hl sym">:=</span><span class="hl kwa">self</span> createYellow<span class="hl sym">.! !</span>

<span class="hl sym">!</span>ChameneosColour class methodsFor<span class="hl sym">:</span> <span class="hl str">'accessing'</span><span class="hl sym">!</span>

blue
   <span class="hl sym">^</span>blue<span class="hl sym">!</span>

blue<span class="hl sym">:</span> anObject
   blue <span class="hl sym">:=</span> anObject<span class="hl sym">!</span>

red
   <span class="hl sym">^</span>red<span class="hl sym">!</span>

red<span class="hl sym">:</span> anObject
   red <span class="hl sym">:=</span> anObject<span class="hl sym">!</span>

yellow
   <span class="hl sym">^</span>yellow<span class="hl sym">!</span>

yellow<span class="hl sym">:</span> anObject
   yellow <span class="hl sym">:=</span> anObject<span class="hl sym">! !</span>


<span class="hl sym">!</span>ChameneosColour methodsFor<span class="hl sym">:</span> <span class="hl str">'as yet unclassified'</span><span class="hl sym">!</span>

color
   <span class="hl sym">^</span>color<span class="hl sym">!</span>

color<span class="hl sym">:</span> aColor
   color<span class="hl sym">:=</span>aColor <span class="hl sym">.!</span>

complementaryColourFor<span class="hl sym">:</span> aChameneosColour
   &quot;determine the complementary colour defined as<span class="hl sym">...</span>&quot;
   <span class="hl sym">(</span><span class="hl kwa">self</span><span class="hl sym">==</span>aChameneosColour<span class="hl sym">)</span> ifTrue<span class="hl sym">:[^</span><span class="hl kwa">self</span><span class="hl sym">].</span>
   <span class="hl kwa">self</span> isBlue
      ifTrue<span class="hl sym">: [</span>
         aChameneosColour isRed
            ifTrue<span class="hl sym">: [^</span><span class="hl kwa">self</span> class yellow<span class="hl sym">]</span>
            ifFalse<span class="hl sym">: [^</span><span class="hl kwa">self</span> class red<span class="hl sym">.]</span>
         <span class="hl sym">].</span>
   <span class="hl kwa">self</span> isRed
      ifTrue<span class="hl sym">: [</span>
         aChameneosColour isBlue
            ifTrue<span class="hl sym">: [^</span><span class="hl kwa">self</span> class yellow<span class="hl sym">]</span>
            ifFalse<span class="hl sym">: [^</span><span class="hl kwa">self</span> class blue<span class="hl sym">.]</span>
         <span class="hl sym">].</span>
   aChameneosColour isBlue
      ifTrue<span class="hl sym">: [^</span><span class="hl kwa">self</span> class red<span class="hl sym">]</span>
      ifFalse<span class="hl sym">: [^</span><span class="hl kwa">self</span> class blue<span class="hl sym">.].!</span>

hasSameColorAs<span class="hl sym">:</span> aChameneos
   <span class="hl sym">^</span><span class="hl kwa">self</span> color<span class="hl sym">==</span>aChameneos color<span class="hl sym">.!</span>

isBlue
   <span class="hl sym">^</span><span class="hl kwa">self</span><span class="hl sym">==</span><span class="hl kwa">self</span> class blue<span class="hl sym">.!</span>

isRed
   <span class="hl sym">^</span><span class="hl kwa">self</span><span class="hl sym">==</span><span class="hl kwa">self</span> class red<span class="hl sym">.!</span>

isYellow
   <span class="hl sym">^</span><span class="hl kwa">self</span><span class="hl sym">==</span><span class="hl kwa">self</span> class yellow<span class="hl sym">.!</span>

printOn<span class="hl sym">:</span> aStream
   aStream nextPutAll<span class="hl sym">:</span> <span class="hl kwa">self</span> color<span class="hl sym">.! !</span>

<span class="hl sym">#</span>{ChameneosColour} initialize<span class="hl sym">!</span>

Smalltalk defineClass<span class="hl sym">: #</span>Creature
   superclass<span class="hl sym">: #</span>{Core<span class="hl sym">.</span>Object}
   indexedType<span class="hl sym">: #</span>none
   private<span class="hl sym">:</span> <span class="hl kwa">false</span>
   instanceVariableNames<span class="hl sym">:</span> <span class="hl str">'creatureName colour selfMet creaturesMet '</span>
   classInstanceVariableNames<span class="hl sym">:</span> <span class="hl str">''</span>
   imports<span class="hl sym">:</span> <span class="hl str">''</span>
   category<span class="hl sym">:</span> <span class="hl str">'chameleon'</span><span class="hl sym">!</span>



<span class="hl sym">!</span>Creature class methodsFor<span class="hl sym">:</span> <span class="hl str">'as yet unclassified'</span><span class="hl sym">!</span>

withName<span class="hl sym">:</span> aName colour<span class="hl sym">:</span> aColour
   <span class="hl sym">|</span>creature<span class="hl sym">|</span>
   creature<span class="hl sym">:=</span>Creature new initialize<span class="hl sym">.</span>
   creature name<span class="hl sym">:</span> aName<span class="hl sym">.</span>
   creature colour<span class="hl sym">:</span> aColour <span class="hl sym">.</span>
   <span class="hl sym">^</span>creature<span class="hl sym">.! !</span>



<span class="hl sym">!</span>Creature methodsFor<span class="hl sym">:</span> <span class="hl str">'as yet unclassified'</span><span class="hl sym">!</span>

initialize
   selfMet <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">.</span>
   creaturesMet <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">.!</span>

visitMall<span class="hl sym">:</span> mall
      <span class="hl sym">[   |</span> partner <span class="hl sym">|</span>
      partner <span class="hl sym">:=</span> mall visitWith<span class="hl sym">:</span> <span class="hl kwa">self</span><span class="hl sym">.</span>
      partner ifNotNil<span class="hl sym">:</span>
         <span class="hl sym">[</span> colour<span class="hl sym">:= (</span>colour complementaryColourFor<span class="hl sym">:</span> partner colour<span class="hl sym">).</span>
         <span class="hl kwa">self</span> <span class="hl sym">==</span> partner
            ifTrue<span class="hl sym">: [</span> selfMet <span class="hl sym">:=</span> selfMet <span class="hl sym">+</span> <span class="hl num">1</span> <span class="hl sym">].</span>
            creaturesMet <span class="hl sym">:=</span> creaturesMet <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">.</span>
          <span class="hl sym">] .</span>
      partner isNil<span class="hl sym">. ]</span> whileFalse<span class="hl sym">! !</span>

<span class="hl sym">!</span>Creature methodsFor<span class="hl sym">:</span> <span class="hl str">'accessing'</span><span class="hl sym">!</span>

colour
   <span class="hl sym">^</span> colour<span class="hl sym">!</span>

colour<span class="hl sym">:</span> anObject
   colour <span class="hl sym">:=</span> anObject<span class="hl sym">!</span>

creaturesMet
   <span class="hl sym">^</span> creaturesMet<span class="hl sym">!</span>

creaturesMet<span class="hl sym">:</span> anObject
   creaturesMet <span class="hl sym">:=</span> anObject<span class="hl sym">!</span>

name
   <span class="hl sym">^</span> creatureName <span class="hl sym">!</span>

name<span class="hl sym">:</span> anObject
   creatureName <span class="hl sym">:=</span> anObject<span class="hl sym">!</span>

selfMet
   <span class="hl sym">^</span> selfMet<span class="hl sym">!</span>

selfMet<span class="hl sym">:</span> anObject
   <span class="hl sym">^</span> selfMet <span class="hl sym">:=</span> anObject<span class="hl sym">! !</span>

Smalltalk defineClass<span class="hl sym">: #</span>Mall
   superclass<span class="hl sym">: #</span>{Core<span class="hl sym">.</span>Object}
   indexedType<span class="hl sym">: #</span>none
   private<span class="hl sym">:</span> <span class="hl kwa">false</span>
   instanceVariableNames<span class="hl sym">:</span> <span class="hl str">'guard maxRendezvous open process queue cache pairCache '</span>
   classInstanceVariableNames<span class="hl sym">:</span> <span class="hl str">''</span>
   imports<span class="hl sym">:</span> <span class="hl str">''</span>
   category<span class="hl sym">:</span> <span class="hl str">'chameleon'</span><span class="hl sym">!</span>

Smalltalk<span class="hl sym">.</span>Mall defineSharedVariable<span class="hl sym">: #</span>Units
   private<span class="hl sym">:</span> <span class="hl kwa">false</span>
   constant<span class="hl sym">:</span> <span class="hl kwa">false</span>
   category<span class="hl sym">:</span> <span class="hl str">'As yet unclassified'</span>
   initializer<span class="hl sym">:</span> <span class="hl kwa">nil</span><span class="hl sym">!</span>



<span class="hl sym">!</span>Mall class methodsFor<span class="hl sym">:</span> <span class="hl str">'as yet unclassified'</span><span class="hl sym">!</span>

closeMall<span class="hl sym">:</span> aMall forCreatures<span class="hl sym">:</span> creatures usingGuard<span class="hl sym">:</span> guard
   creatures size timesRepeat<span class="hl sym">: [</span> guard wait <span class="hl sym">].</span>
<span class="hl sym">!</span>

createCreaturesWith<span class="hl sym">:</span> aCollectionOfColours
   <span class="hl sym">|</span> aName <span class="hl sym">|</span>
   aName <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">.</span>
   <span class="hl sym">^</span> aCollectionOfColours collect<span class="hl sym">: [:</span>aColour<span class="hl sym">|</span>
      aName <span class="hl sym">:=</span> aName <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">.</span>
      Creature
         withName<span class="hl sym">:</span> aName
         colour<span class="hl sym">:</span> aColour <span class="hl sym">].</span>
<span class="hl sym">!</span>

generateReportFor<span class="hl sym">:</span> creatures
   <span class="hl sym">|</span> sum readOut <span class="hl sym">|</span>
   readOut <span class="hl sym">:=</span> WriteStream on<span class="hl sym">:</span> String new<span class="hl sym">.</span>
   creatures do<span class="hl sym">: [:</span>aCreature<span class="hl sym">|</span>
      aCreature creaturesMet printOn<span class="hl sym">:</span> readOut<span class="hl sym">.</span>
      readOut space<span class="hl sym">.</span>
      aCreature selfMet printOn<span class="hl sym">:</span> readOut<span class="hl sym">.</span>
      readOut cr<span class="hl sym">.</span>
      <span class="hl sym">].</span>
   sum <span class="hl sym">:=</span> creatures inject<span class="hl sym">:</span> <span class="hl num">0</span> into<span class="hl sym">: [:</span>accum <span class="hl sym">:</span>each<span class="hl sym">|</span> accum <span class="hl sym">+</span> each creaturesMet<span class="hl sym">].</span>
   readOut space<span class="hl sym">.</span>
   sum printString do<span class="hl sym">: [ :</span> el <span class="hl sym">|</span>
      readOut
         nextPutAll<span class="hl sym">: (</span><span class="hl kwa">self</span> units at<span class="hl sym">:</span> el digitValue <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">) ;</span>
         space <span class="hl sym">].</span>
   <span class="hl sym">^</span> readOut<span class="hl sym">!</span>

generateReportForColours<span class="hl sym">:</span> colours
   <span class="hl sym">|</span> readOut <span class="hl sym">|</span>
   readOut <span class="hl sym">:=</span> WriteStream on<span class="hl sym">:</span> String new<span class="hl sym">.</span>
   colours do<span class="hl sym">:</span>
      <span class="hl sym">[ :</span>colour <span class="hl sym">|</span>
         colour printOn<span class="hl sym">:</span> readOut<span class="hl sym">.</span>
         readOut space <span class="hl sym">].</span>
   <span class="hl sym">^</span> readOut<span class="hl sym">!</span>

initialize
   &quot;<span class="hl kwa">self</span> initialize&quot;
   Units <span class="hl sym">:= #(</span>
      <span class="hl str">'zero'</span>
      <span class="hl str">'one'</span>
      <span class="hl str">'two'</span>
      <span class="hl str">'three'</span>
      <span class="hl str">'four'</span>
      <span class="hl str">'five'</span>
      <span class="hl str">'six'</span>
      <span class="hl str">'seven'</span>
      <span class="hl str">'eight'</span>
      <span class="hl str">'nine'</span>
   <span class="hl sym">).!</span>

new
   <span class="hl sym">^</span><span class="hl kwa">super</span> new initialize<span class="hl sym">.!</span>

openMall<span class="hl sym">:</span> aMall forCreatures<span class="hl sym">:</span> creatures usingGuard<span class="hl sym">:</span> sema
   <span class="hl sym">|</span>processes<span class="hl sym">|</span>
   processes<span class="hl sym">:=</span>creatures collect<span class="hl sym">: [ :</span>aCreature <span class="hl sym">|</span>
         <span class="hl sym">[</span> aCreature visitMall<span class="hl sym">:</span> aMall<span class="hl sym">.</span> sema signal <span class="hl sym">]</span> newProcess
      <span class="hl sym">].</span>
   processes do<span class="hl sym">: [:</span>proc<span class="hl sym">|</span> proc resume<span class="hl sym">.].!</span>

openMallWith<span class="hl sym">:</span> aCollectionOfColours forNumberOfMeets<span class="hl sym">:</span> aNumber
   <span class="hl sym">|</span> mall creatures guard readOut <span class="hl sym">|</span>
   readOut <span class="hl sym">:=</span> WriteStream on<span class="hl sym">:</span> String new<span class="hl sym">.</span>
   guard <span class="hl sym">:=</span> Semaphore new<span class="hl sym">.</span>
   mall <span class="hl sym">:=</span> Mall new<span class="hl sym">.</span>
   mall maxRendezvous<span class="hl sym">:</span> aNumber<span class="hl sym">.</span>
   mall run<span class="hl sym">.</span>

   readOut nextPutAll<span class="hl sym">:</span>
      <span class="hl sym">(</span><span class="hl kwa">self</span> generateReportForColours<span class="hl sym">:</span> aCollectionOfColours<span class="hl sym">)</span> contents<span class="hl sym">;</span>
      cr<span class="hl sym">.</span>

   creatures <span class="hl sym">:=</span> <span class="hl kwa">self</span> createCreaturesWith<span class="hl sym">:</span> aCollectionOfColours<span class="hl sym">.</span>
   <span class="hl kwa">self</span> openMall<span class="hl sym">:</span> mall forCreatures<span class="hl sym">:</span>  creatures usingGuard<span class="hl sym">:</span> guard<span class="hl sym">.</span>
   <span class="hl kwa">self</span> waitForClosingOfMall<span class="hl sym">:</span> mall withCreatures<span class="hl sym">:</span>  creatures usingGuard<span class="hl sym">:</span> guard<span class="hl sym">.</span>

   readOut nextPutAll<span class="hl sym">: (</span><span class="hl kwa">self</span> generateReportFor<span class="hl sym">:</span> creatures<span class="hl sym">)</span> contents<span class="hl sym">;</span> cr<span class="hl sym">.</span>
   <span class="hl sym">^</span>readOut<span class="hl sym">.!</span>

runBenchMark<span class="hl sym">:</span> number on<span class="hl sym">:</span> anOutputStream
   <span class="hl sym">|</span>firstTestColours secondTestColours <span class="hl sym">|</span>

   anOutputStream nextPutAll<span class="hl sym">:</span>
      <span class="hl sym">(</span>ChameneosColour generateReportOfColours contents<span class="hl sym">);</span> cr<span class="hl sym">.</span>

   firstTestColours <span class="hl sym">:=</span>
      Array
         with<span class="hl sym">:</span> ChameneosColour createBlue
         with<span class="hl sym">:</span> ChameneosColour createRed
         with<span class="hl sym">:</span> ChameneosColour createYellow<span class="hl sym">.</span>

   secondTestColours <span class="hl sym">:=(</span>OrderedCollection new<span class="hl sym">)</span>
      add<span class="hl sym">:</span> ChameneosColour createBlue<span class="hl sym">;</span>
      add<span class="hl sym">:</span> ChameneosColour createRed<span class="hl sym">;</span>
      add<span class="hl sym">:</span> ChameneosColour createYellow<span class="hl sym">;</span>
      add<span class="hl sym">:</span> ChameneosColour createRed<span class="hl sym">;</span>
      add<span class="hl sym">:</span> ChameneosColour createYellow<span class="hl sym">;</span>
      add<span class="hl sym">:</span> ChameneosColour createBlue<span class="hl sym">;</span>
      add<span class="hl sym">:</span> ChameneosColour createRed<span class="hl sym">;</span>
      add<span class="hl sym">:</span> ChameneosColour createYellow<span class="hl sym">;</span>
      add<span class="hl sym">:</span> ChameneosColour createRed<span class="hl sym">;</span>
      add<span class="hl sym">:</span> ChameneosColour createBlue<span class="hl sym">;</span>
      yourself<span class="hl sym">.</span>

   anOutputStream nextPutAll<span class="hl sym">:</span>
      <span class="hl sym">(</span>Mall openMallWith<span class="hl sym">:</span> firstTestColours forNumberOfMeets<span class="hl sym">:</span> number<span class="hl sym">)</span> contents<span class="hl sym">.</span>
   anOutputStream cr<span class="hl sym">.</span>
   anOutputStream nextPutAll<span class="hl sym">:</span>
      <span class="hl sym">(</span>Mall openMallWith<span class="hl sym">:</span> secondTestColours  forNumberOfMeets<span class="hl sym">:</span> number<span class="hl sym">)</span> contents<span class="hl sym">.</span>
   anOutputStream flush<span class="hl sym">.</span>
<span class="hl sym">!</span>

units
   <span class="hl sym">^</span>Units<span class="hl sym">.!</span>

waitForClosingOfMall<span class="hl sym">:</span> aMall withCreatures<span class="hl sym">:</span> creatures usingGuard<span class="hl sym">:</span> guard
   creatures size timesRepeat<span class="hl sym">: [</span> guard wait <span class="hl sym">].</span>
   aMall close<span class="hl sym">.! !</span>


<span class="hl sym">!</span>Mall methodsFor<span class="hl sym">:</span> <span class="hl str">'accessing'</span><span class="hl sym">!</span>

maxRendezvous<span class="hl sym">:</span> max
    maxRendezvous<span class="hl sym">:=</span>max<span class="hl sym">.! !</span>

<span class="hl sym">!</span>Mall methodsFor<span class="hl sym">:</span> <span class="hl str">'as yet unclassified'</span><span class="hl sym">!</span>

close
   open<span class="hl sym">:=</span><span class="hl kwa">false</span><span class="hl sym">.</span>
<span class="hl sym">!</span>

initialize
   guard <span class="hl sym">:=</span> Semaphore forMutualExclusion<span class="hl sym">.</span>
   queue<span class="hl sym">:=</span>SharedQueue new<span class="hl sym">.</span>
   cache<span class="hl sym">:=</span>OrderedCollection new<span class="hl sym">.</span>
   <span class="hl num">1</span> to<span class="hl sym">:</span> <span class="hl num">11</span> do<span class="hl sym">: [:</span>x<span class="hl sym">|</span> cache add<span class="hl sym">:</span> Pair new<span class="hl sym">].!</span>

obtainPair
   <span class="hl sym">^</span>cache removeFirst<span class="hl sym">.</span>
<span class="hl sym">!</span>

processVisitors
   <span class="hl sym">[</span>open<span class="hl sym">]</span> whileTrue<span class="hl sym">: [</span>
      <span class="hl num">1</span> to<span class="hl sym">:</span> maxRendezvous do<span class="hl sym">: [ :</span>x<span class="hl sym">| |</span>first second<span class="hl sym">|</span>
         first<span class="hl sym">:=</span>queue next<span class="hl sym">.</span> second<span class="hl sym">:=</span>queue next<span class="hl sym">.</span>
         <span class="hl kwa">self</span> setPartnersOn<span class="hl sym">:</span> first and<span class="hl sym">:</span> second<span class="hl sym">.</span>
      first signal<span class="hl sym">.</span>
      second signal<span class="hl sym">.</span>
      <span class="hl sym">].</span>
      <span class="hl sym">[</span>queue isEmpty<span class="hl sym">]</span> whileFalse<span class="hl sym">: [</span>queue next signal<span class="hl sym">].</span>
   <span class="hl sym">].</span>
   process terminate<span class="hl sym">.</span>
   process<span class="hl sym">:=</span><span class="hl kwa">nil</span><span class="hl sym">.!</span>

releasePair<span class="hl sym">:</span> pair
   pair partner<span class="hl sym">:</span> <span class="hl kwa">nil</span><span class="hl sym">.</span>
   cache addFirst<span class="hl sym">:</span> pair<span class="hl sym">.</span>
<span class="hl sym">!</span>

run
   open<span class="hl sym">:=</span><span class="hl kwa">true</span><span class="hl sym">.</span>
   process ifNil<span class="hl sym">:[</span>
      process <span class="hl sym">:= [</span><span class="hl kwa">self</span> processVisitors<span class="hl sym">]</span> newProcess<span class="hl sym">.</span>
      process priority<span class="hl sym">:</span> Processor userBackgroundPriority<span class="hl sym">.</span>
      <span class="hl sym">].</span>
   process resume<span class="hl sym">.!</span>

setPartnersOn<span class="hl sym">:</span> first and<span class="hl sym">:</span> second
   first partner<span class="hl sym">:</span> second me<span class="hl sym">.</span>
   second partner<span class="hl sym">:</span> first me<span class="hl sym">.</span>
<span class="hl sym">!</span>

visitWith<span class="hl sym">:</span> aChameneos
   <span class="hl sym">|</span>pair partner<span class="hl sym">|</span>
   pair <span class="hl sym">:=</span> <span class="hl kwa">self</span> obtainPair<span class="hl sym">.</span>

   pair me<span class="hl sym">:</span> aChameneos<span class="hl sym">.</span>
   queue nextPut<span class="hl sym">:</span> pair<span class="hl sym">.</span>
   pair wait<span class="hl sym">.</span>

   partner <span class="hl sym">:=</span> pair partner<span class="hl sym">.</span>
   <span class="hl kwa">self</span> releasePair<span class="hl sym">:</span> pair<span class="hl sym">.</span>
   <span class="hl sym">^</span> partner<span class="hl sym">.! !</span>

<span class="hl sym">#</span>{Mall} initialize<span class="hl sym">!</span>

Smalltalk defineClass<span class="hl sym">: #</span>Pair
   superclass<span class="hl sym">: #</span>{Core<span class="hl sym">.</span>Object}
   indexedType<span class="hl sym">: #</span>none
   private<span class="hl sym">:</span> <span class="hl kwa">false</span>
   instanceVariableNames<span class="hl sym">:</span> <span class="hl str">'partner me sema '</span>
   classInstanceVariableNames<span class="hl sym">:</span> <span class="hl str">''</span>
   imports<span class="hl sym">:</span> <span class="hl str">''</span>
   category<span class="hl sym">:</span> <span class="hl str">'(none)'</span><span class="hl sym">!</span>



<span class="hl sym">!</span>Pair class methodsFor<span class="hl sym">:</span> <span class="hl str">'instance creation'</span><span class="hl sym">!</span>

new
   <span class="hl sym">^</span><span class="hl kwa">super</span> new initialize<span class="hl sym">!</span>

with<span class="hl sym">:</span> me   <span class="hl sym">^</span><span class="hl kwa">super</span> new initialize me<span class="hl sym">:</span> me<span class="hl sym">.! !</span>


<span class="hl sym">!</span>Pair methodsFor<span class="hl sym">:</span> <span class="hl str">'accessing'</span><span class="hl sym">!</span>

me
   <span class="hl sym">^</span>me<span class="hl sym">!</span>

me<span class="hl sym">:</span> anObject
   me <span class="hl sym">:=</span> anObject<span class="hl sym">!</span>

partner
   <span class="hl sym">^</span>partner<span class="hl sym">!</span>

partner<span class="hl sym">:</span> anObject
   partner <span class="hl sym">:=</span> anObject<span class="hl sym">! !</span>

<span class="hl sym">!</span>Pair methodsFor<span class="hl sym">:</span> <span class="hl str">'initialize-release'</span><span class="hl sym">!</span>

initialize
   &quot;Initialize a newly created instance<span class="hl sym">.</span> This method must answer the receiver<span class="hl sym">.</span>&quot;
   partner <span class="hl sym">:=</span> <span class="hl kwa">nil</span><span class="hl sym">.</span>
   me<span class="hl sym">:=</span><span class="hl kwa">nil</span><span class="hl sym">.</span>
   sema<span class="hl sym">:=</span>Semaphore new<span class="hl sym">.</span>
   <span class="hl sym">^</span><span class="hl kwa">self</span><span class="hl sym">!</span>

signal
   sema signal<span class="hl sym">.!</span>

wait
   sema wait<span class="hl sym">.! !</span>


<span class="hl sym">!</span>Tests class methodsFor<span class="hl sym">:</span> <span class="hl str">'benchmark scripts'</span><span class="hl sym">!</span>

chameneosredux2
   Mall runBenchMark<span class="hl sym">:</span> <span class="hl kwa">self</span> arg on<span class="hl sym">:</span> <span class="hl kwa">self</span> stdout<span class="hl sym">.</span>
   <span class="hl sym">^</span><span class="hl str">''</span><span class="hl sym">! !</span>
