<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Lester Vecsey */</span>


<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {</span>

	<span class="kwb">double</span> Cr<span class="sym">,</span> Ci<span class="sym">,</span> Zr_sq<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> Zi_sq<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> ZrZi<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> Zr<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> Zi<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> limit_sq <span class="sym">=</span> <span class="num">4.0</span><span class="sym">;</span>
	<span class="kwb">int</span> expecting_len<span class="sym">,</span> max<span class="sym">,</span> bl<span class="sym">,</span> res<span class="sym">,</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> x<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> y<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> pos<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> acc<span class="sym">=</span><span class="num">1</span><span class="sym">,</span> iter <span class="sym">=</span> <span class="num">50</span><span class="sym">;</span>

	<span class="kwb">char</span> <span class="sym">*</span>pbm_data<span class="sym">,</span> pbm_header<span class="sym">[</span><span class="num">20</span><span class="sym">], *</span>p<span class="sym">, *</span>pend<span class="sym">, *</span>res_str<span class="sym">;</span>

	res <span class="sym">=</span> <span class="kwd">strtol</span><span class="sym">(</span> res_str <span class="sym">= (</span>argc <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">)</span> ? argv<span class="sym">[</span><span class="num">1</span><span class="sym">] :</span> <span class="str">&quot;200&quot;</span><span class="sym">,</span> NULL<span class="sym">,</span> <span class="num">10</span><span class="sym">);</span>

	<span class="kwa">if</span> <span class="sym">( (</span>p <span class="sym">=</span> pbm_data <span class="sym">= (</span><span class="kwb">char</span><span class="sym">*)</span> <span class="kwd">malloc</span><span class="sym">(</span> max <span class="sym">=</span> res <span class="sym">* (</span>bl <span class="sym">= ((</span>res<span class="sym">&gt;&gt;</span><span class="num">3</span><span class="sym">) + ((</span>res<span class="sym">&amp;</span><span class="num">7</span><span class="sym">) &gt;</span> <span class="num">0</span><span class="sym">))))) ==</span> NULL<span class="sym">)</span> <span class="kwa">return</span> <span class="sym">-</span><span class="num">1</span><span class="sym">;</span>

	<span class="kwa">if</span> <span class="sym">(</span><span class="kwd">sprintf</span><span class="sym">(</span>pbm_header<span class="sym">,</span> <span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">%d %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> res<span class="sym">,</span> res<span class="sym">) != (</span>expecting_len <span class="sym">=</span> <span class="kwd">strlen</span><span class="sym">(</span>res_str<span class="sym">) *</span> <span class="num">2</span> <span class="sym">+</span> <span class="num">5</span><span class="sym">) )</span> <span class="kwa">return</span> <span class="sym">-</span><span class="num">1</span><span class="sym">;</span>

	<span class="kwa">if</span> <span class="sym">(</span><span class="kwd">fwrite</span><span class="sym">(</span>pbm_header<span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> expecting_len<span class="sym">,</span> stdout<span class="sym">) !=</span> expecting_len<span class="sym">)</span> <span class="kwa">return</span> <span class="sym">-</span><span class="num">1</span><span class="sym">;</span>

	<span class="kwa">for</span> <span class="sym">(</span> pend <span class="sym">=</span> p <span class="sym">+</span> max<span class="sym">;</span> p <span class="sym">&lt;</span> pend<span class="sym">;</span> x<span class="sym">%=</span>res<span class="sym">,</span> Zr<span class="sym">=</span>Zi<span class="sym">=</span>ZrZi<span class="sym">=</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">) {</span>

		Cr <span class="sym">= (</span><span class="num">2</span><span class="sym">*((</span><span class="kwb">double</span><span class="sym">)</span>x<span class="sym">)/</span>res <span class="sym">-</span> <span class="num">1.5</span><span class="sym">);</span> Ci<span class="sym">=(</span><span class="num">2</span><span class="sym">*((</span><span class="kwb">double</span><span class="sym">)</span>y<span class="sym">)/</span>res <span class="sym">-</span> <span class="num">1</span><span class="sym">);</span>

		<span class="kwa">for</span><span class="sym">(</span>acc<span class="sym">&lt;&lt;=</span><span class="num">1</span><span class="sym">; !(</span>acc<span class="sym">&amp;</span><span class="num">1</span><span class="sym">) &amp;&amp;</span> i<span class="sym">++ &lt;</span> iter<span class="sym">;</span> acc <span class="sym">|=</span> Zr_sq<span class="sym">+</span>Zi_sq <span class="sym">&gt;</span> limit_sq<span class="sym">,</span> ZrZi<span class="sym">=</span>Zr<span class="sym">*</span>Zi<span class="sym">) {</span>

			Zr <span class="sym">= (</span>Zr_sq<span class="sym">=</span>Zr<span class="sym">*</span>Zr<span class="sym">) - (</span>Zi_sq<span class="sym">=</span>Zi<span class="sym">*</span>Zi<span class="sym">) +</span> Cr<span class="sym">;</span>
			Zi <span class="sym">=</span> <span class="num">2</span><span class="sym">*</span>ZrZi <span class="sym">+</span> Ci<span class="sym">;</span>

			<span class="sym">}</span>

		<span class="kwa">if</span> <span class="sym">(++</span>x<span class="sym">==</span>res<span class="sym">) {</span> y<span class="sym">++;</span> <span class="kwa">if</span> <span class="sym">(</span>acc<span class="sym">&lt;</span><span class="num">256</span><span class="sym">)</span> acc <span class="sym">&lt;&lt;= (</span><span class="num">8</span> <span class="sym">-</span> res<span class="sym">%</span><span class="num">8</span><span class="sym">); }</span>

		<span class="kwa">if</span> <span class="sym">(</span>acc<span class="sym">&gt;</span><span class="num">255</span><span class="sym">) { *</span>p<span class="sym">++ = (</span>acc ^<span class="sym">=</span> <span class="num">255</span><span class="sym">) &amp;</span> <span class="num">255</span><span class="sym">;</span> acc <span class="sym">=</span> <span class="num">1</span><span class="sym">; }</span>

		<span class="sym">}</span>

	<span class="kwa">return</span> <span class="sym">-</span><span class="num">1</span> <span class="sym">*</span> <span class="kwd">fwrite</span><span class="sym">(</span>pbm_data<span class="sym">,</span> bl<span class="sym">,</span> res<span class="sym">,</span> stdout<span class="sym">) !=</span> res<span class="sym">;</span>

	<span class="sym">}</span>

