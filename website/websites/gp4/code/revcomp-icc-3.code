<span class="hl com">/*</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by Bob W (2008-05-05)</span>
<span class="hl com"> *</span>
<span class="hl com"> * Further optimisation is possible by removing data integrity</span>
<span class="hl com"> * checks and expecting source to be in LF terminated text format.</span>
<span class="hl com"> */</span>

<span class="hl dir">#include &lt;stdio.h&gt;</span>

<span class="hl kwb">static const char</span> XTAB<span class="hl sym">[</span><span class="hl num">128</span><span class="hl sym">] = {</span>  <span class="hl slc">// 7-bit character conversion table</span>
  <span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span>
  <span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span>
  <span class="hl num">0</span><span class="hl sym">,</span><span class="hl str">'T'</span><span class="hl sym">,</span><span class="hl str">'V'</span><span class="hl sym">,</span><span class="hl str">'G'</span><span class="hl sym">,</span><span class="hl str">'H'</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span>  <span class="hl num">0</span><span class="hl sym">,</span><span class="hl str">'C'</span><span class="hl sym">,</span> <span class="hl str">'D'</span><span class="hl sym">,</span>  <span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl str">'M'</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span><span class="hl str">'K'</span><span class="hl sym">,</span><span class="hl str">'N'</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span>
  <span class="hl num">0</span><span class="hl sym">,</span>  <span class="hl num">0</span><span class="hl sym">,</span><span class="hl str">'Y'</span><span class="hl sym">,</span><span class="hl str">'S'</span><span class="hl sym">,</span><span class="hl str">'A'</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl str">'B'</span><span class="hl sym">,</span><span class="hl str">'W'</span><span class="hl sym">,</span>   <span class="hl num">0</span><span class="hl sym">,</span><span class="hl str">'R'</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span>  <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span>  <span class="hl num">0</span><span class="hl sym">,</span>  <span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span>
  <span class="hl num">0</span><span class="hl sym">,</span><span class="hl str">'T'</span><span class="hl sym">,</span><span class="hl str">'V'</span><span class="hl sym">,</span><span class="hl str">'G'</span><span class="hl sym">,</span><span class="hl str">'H'</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span>  <span class="hl num">0</span><span class="hl sym">,</span><span class="hl str">'C'</span><span class="hl sym">,</span> <span class="hl str">'D'</span><span class="hl sym">,</span>  <span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl str">'M'</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span><span class="hl str">'K'</span><span class="hl sym">,</span><span class="hl str">'N'</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span>
  <span class="hl num">0</span><span class="hl sym">,</span>  <span class="hl num">0</span><span class="hl sym">,</span><span class="hl str">'Y'</span><span class="hl sym">,</span><span class="hl str">'S'</span><span class="hl sym">,</span><span class="hl str">'A'</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl str">'B'</span><span class="hl sym">,</span><span class="hl str">'W'</span><span class="hl sym">,</span>   <span class="hl num">0</span><span class="hl sym">,</span><span class="hl str">'R'</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span>  <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span>  <span class="hl num">0</span><span class="hl sym">,</span>  <span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span>
<span class="hl sym">};</span>


<span class="hl kwb">int</span> <span class="hl kwd">errex</span><span class="hl sym">(</span><span class="hl kwb">char</span> <span class="hl sym">*</span>s<span class="hl sym">,</span> <span class="hl kwb">int</span> n<span class="hl sym">) {</span>      <span class="hl slc">// display message &amp; value, return 1</span>
  <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;*** Error: %s [%d]!</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> s<span class="hl sym">,</span> n<span class="hl sym">);</span>
  <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl sym">;</span>
<span class="hl sym">}</span>


<span class="hl kwb">int</span> <span class="hl kwd">main</span> <span class="hl sym">() {</span>
  <span class="hl kwb">char</span> c<span class="hl sym">;</span>                                <span class="hl slc">// temp</span>
  <span class="hl kwb">int</span>  lile<span class="hl sym">;</span>                             <span class="hl slc">// output sequence line length</span>
  <span class="hl kwb">char</span> <span class="hl sym">*</span>pj<span class="hl sym">, *</span>pjstop<span class="hl sym">, *</span>pq<span class="hl sym">, *</span>pr<span class="hl sym">, *</span>prlo<span class="hl sym">;</span>    <span class="hl slc">// pointers to I/O buffers</span>

  <span class="hl kwb">char</span>   bbj<span class="hl sym">[</span><span class="hl num">11888</span><span class="hl sym">],</span> bbq<span class="hl sym">[</span><span class="hl num">11888</span><span class="hl sym">];</span>         <span class="hl slc">// input and output buffers</span>
  <span class="hl kwb">size_t</span> bbjsz<span class="hl sym">=</span><span class="hl kwa">sizeof</span><span class="hl sym">(</span>bbj<span class="hl sym">);</span>              <span class="hl slc">// max. size of input buffer</span>
  <span class="hl kwb">size_t</span> bbjle<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span>                        <span class="hl slc">// actual length of buffer data</span>

  bbjle <span class="hl sym">=</span> <span class="hl kwd">fread</span><span class="hl sym">(</span>bbj<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> bbjsz<span class="hl sym">,</span> stdin<span class="hl sym">);</span>   <span class="hl slc">// get input from stdin</span>
  <span class="hl kwa">if</span> <span class="hl sym">(</span>bbjle <span class="hl sym">&lt;</span> <span class="hl num">999</span> <span class="hl sym">||</span> bbjle <span class="hl sym">&gt; (</span>bbjsz<span class="hl sym">-</span><span class="hl num">9</span><span class="hl sym">))</span>  <span class="hl slc">// (# remove check if desired #)</span>
    <span class="hl kwa">return</span> <span class="hl kwd">errex</span><span class="hl sym">(</span><span class="hl str">&quot;Input data size&quot;</span><span class="hl sym">,</span>bbjle<span class="hl sym">);</span>
  <span class="hl kwa">if</span> <span class="hl sym">(*</span>bbj<span class="hl sym">!=</span><span class="hl str">'&gt;'</span><span class="hl sym">)</span>                         <span class="hl slc">// (# remove check if desired #)</span>
    <span class="hl kwa">return</span> <span class="hl kwd">errex</span><span class="hl sym">(</span><span class="hl str">&quot;expected '&gt;' as 1st char&quot;</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">);</span>
  <span class="hl kwa">if</span> <span class="hl sym">(!</span>bbj<span class="hl sym">[</span>bbjle<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">])</span>                     <span class="hl slc">// discard ev. trailing zero</span>
    bbjle<span class="hl sym">--;</span>

  pj<span class="hl sym">=</span>bbj<span class="hl sym">;</span>  pq<span class="hl sym">=</span>bbq<span class="hl sym">;</span>  pjstop<span class="hl sym">=</span>pj<span class="hl sym">+</span>bbjle<span class="hl sym">;</span>     <span class="hl slc">// init pointers for good ol'C</span>

  <span class="hl kwa">while</span> <span class="hl sym">(</span>pj<span class="hl sym">&lt;</span>pjstop<span class="hl sym">) {</span>                    <span class="hl slc">// loop: read input data</span>
    <span class="hl kwa">while</span> <span class="hl sym">(*</span>pj<span class="hl sym">!=</span><span class="hl num">0xA</span> <span class="hl sym">&amp;&amp; *</span>pj<span class="hl sym">!=</span><span class="hl num">0xD</span><span class="hl sym">) {</span>       <span class="hl slc">// loop: copy ID line</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>pj<span class="hl sym">&gt;=</span>pjstop<span class="hl sym">)</span>                    <span class="hl slc">// (# remove check if desired #)</span>
        <span class="hl kwa">return</span> <span class="hl kwd">errex</span><span class="hl sym">(</span><span class="hl str">&quot;Unexpected end of data&quot;</span><span class="hl sym">, (</span><span class="hl kwb">int</span><span class="hl sym">)(</span>pj<span class="hl sym">-</span>bbj<span class="hl sym">));</span>
      <span class="hl sym">*</span>pq<span class="hl sym">++ = *</span>pj<span class="hl sym">++;</span>                     <span class="hl slc">// copy line contents (chars)</span>
    <span class="hl sym">}</span>
    <span class="hl sym">*</span>pq<span class="hl sym">++ =</span> <span class="hl num">0xa</span><span class="hl sym">;</span>  prlo<span class="hl sym">=</span>pj<span class="hl sym">;</span>               <span class="hl slc">// add LF; mark start of data</span>

    <span class="hl kwa">while</span> <span class="hl sym">(*</span>pj<span class="hl sym">!=</span><span class="hl str">'&gt;'</span> <span class="hl sym">&amp;&amp;</span> pj<span class="hl sym">&lt;</span>pjstop<span class="hl sym">)</span>        <span class="hl slc">// find seq. data block end</span>
      pj<span class="hl sym">++;</span>                              <span class="hl slc">// adjust pointer accordingly</span>

    pr<span class="hl sym">=</span>pj<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">;</span>  lile<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span>                    <span class="hl slc">// init reverse ptr and line len.</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>pr<span class="hl sym">&lt;=</span>prlo<span class="hl sym">)</span>                        <span class="hl slc">// (# remove check if desired #)</span>
      <span class="hl kwa">return</span> <span class="hl kwd">errex</span><span class="hl sym">(</span><span class="hl str">&quot;Sequence too short&quot;</span><span class="hl sym">,(</span><span class="hl kwb">int</span><span class="hl sym">)(</span>prlo<span class="hl sym">-</span>bbj<span class="hl sym">));</span>

    <span class="hl kwa">while</span> <span class="hl sym">(</span>pr<span class="hl sym">&gt;=</span>prlo<span class="hl sym">) {</span>                   <span class="hl slc">// loop: revert &amp; convert</span>
      c<span class="hl sym">=</span>XTAB<span class="hl sym">[*</span>pr<span class="hl sym">-- &amp;</span> <span class="hl num">0x7f</span><span class="hl sym">];</span>              <span class="hl slc">// get char, use 7 bits</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>c<span class="hl sym">) {</span>                           <span class="hl slc">// conversion possible</span>
        <span class="hl sym">*</span>pq<span class="hl sym">++ =</span> c<span class="hl sym">;</span>  lile<span class="hl sym">++;</span>              <span class="hl slc">// output to buffer; inc. length</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>lile<span class="hl sym">&gt;</span><span class="hl num">59</span><span class="hl sym">)</span>                     <span class="hl slc">// long line - EOL required</span>
          <span class="hl sym">{</span> lile<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;  *</span>pq<span class="hl sym">++ =</span> <span class="hl num">0xa</span><span class="hl sym">; }</span>      <span class="hl slc">// reset line length; add LF</span>
      <span class="hl sym">}</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">if</span> <span class="hl sym">(</span>lile<span class="hl sym">)  *</span>pq<span class="hl sym">++ =</span> <span class="hl num">0xa</span><span class="hl sym">;</span>              <span class="hl slc">// last line not empty, add LF</span>
  <span class="hl sym">}</span>

  <span class="hl kwd">fwrite</span><span class="hl sym">(</span>bbq<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">, (</span><span class="hl kwb">int</span><span class="hl sym">)(</span>pq<span class="hl sym">-</span>bbq<span class="hl sym">),</span> stdout<span class="hl sym">);</span> <span class="hl slc">// dump buffer to stdout</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>
