<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org

   contributed by Isaac Gouy */</span>

<span class="kwa">using</span> System<span class="sym">;
</span><span class="kwa">using</span> System<span class="sym">.</span>Net<span class="sym">.</span>Sockets<span class="sym">;

</span><span class="kwc">class</span> tcpsocket
<span class="sym">{
</span>   <span class="kwb">const</span> string HOST <span class="sym">=</span> <span class="str">&quot;127.0.0.1&quot;</span><span class="sym">;
</span>   <span class="kwb">const int</span> PORT <span class="sym">=</span> <span class="num">11000</span><span class="sym">,</span> REQUEST_SIZE <span class="sym">=</span> <span class="num">64</span><span class="sym">,</span> BUFFER_SIZE <span class="sym">=</span> <span class="num">1024</span><span class="sym">;

</span>   <span class="kwb">static</span> Reply<span class="sym">[]</span> replyTypes <span class="sym">=
      {</span> <span class="kwa">new</span> Reply<span class="sym">(</span><span class="num">2</span><span class="sym">,</span><span class="num">64</span><span class="sym">)
      ,</span> <span class="kwa">new</span> Reply<span class="sym">(</span><span class="num">7</span><span class="sym">,</span><span class="num">4096</span><span class="sym">)
      ,</span> <span class="kwa">new</span> Reply<span class="sym">(</span><span class="num">1</span><span class="sym">,</span><span class="num">409600</span><span class="sym">)
      };


</span>   <span class="kwb">static void</span> Main<span class="sym">(</span>string<span class="sym">[]</span> args<span class="sym">){
</span>      <span class="kwb">int</span> n <span class="sym">=</span> Int32<span class="sym">.</span>Parse<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);
</span>      <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)
</span>         MakeRequests<span class="sym">(</span>n<span class="sym">);
</span>      <span class="kwa">else
</span>         ReplyToRequests<span class="sym">(</span>n<span class="sym">);
   }


</span>   <span class="kwb">static void</span> MakeRequests<span class="sym">(</span><span class="kwb">int</span> n<span class="sym">) {
</span>      byte<span class="sym">[]</span> requestContents <span class="sym">=</span> <span class="kwa">new</span> byte<span class="sym">[</span>REQUEST_SIZE<span class="sym">];</span> <span class="slc">// use the same contents for every request
</span>      byte<span class="sym">[]</span> replyBuffer <span class="sym">=</span> <span class="kwa">new</span> byte<span class="sym">[</span>BUFFER_SIZE<span class="sym">];
</span>      <span class="kwb">int</span> replies <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> bytes <span class="sym">=</span> <span class="num">0</span><span class="sym">;

</span>      <span class="kwa">using</span> <span class="sym">(</span>TcpClient client <span class="sym">=</span> <span class="kwa">new</span> TcpClient<span class="sym">()){
</span>         <span class="kwb">int</span> byteCount <span class="sym">=</span> <span class="num">0</span><span class="sym">;

</span>         client<span class="sym">.</span>Connect<span class="sym">(</span>HOST<span class="sym">,</span>PORT<span class="sym">);
</span>         NetworkStream s <span class="sym">=</span> client<span class="sym">.</span>GetStream<span class="sym">();

</span>         foreach <span class="sym">(</span>Reply reply in replyTypes<span class="sym">){
</span>            <span class="kwb">int</span> requests <span class="sym">=</span> n <span class="sym">*</span> reply<span class="sym">.</span>multiplier<span class="sym">;
</span>            <span class="kwa">while</span> <span class="sym">(</span>requests<span class="sym">-- &gt;</span> <span class="num">0</span><span class="sym">){
</span>               s<span class="sym">.</span>Write<span class="sym">(</span>requestContents<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> requestContents<span class="sym">.</span>Length<span class="sym">);
</span>               <span class="kwa">while</span> <span class="sym">((</span>byteCount <span class="sym">+=</span> s<span class="sym">.</span>Read<span class="sym">(</span>replyBuffer<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> replyBuffer<span class="sym">.</span>Length<span class="sym">)) &lt;</span> reply<span class="sym">.</span>size<span class="sym">){}

</span>               bytes <span class="sym">+=</span> byteCount<span class="sym">;
</span>               byteCount <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>               replies<span class="sym">++;
            }
</span>            s<span class="sym">.</span>Write<span class="sym">(</span>requestContents<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> requestContents<span class="sym">.</span>Length<span class="sym">);</span> <span class="slc">// stop listener
</span>         <span class="sym">}
</span>         client<span class="sym">.</span>Close<span class="sym">();

</span>         Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;replies: {0}</span><span class="esc">\t</span><span class="str">bytes: {1}&quot;</span><span class="sym">,</span> replies<span class="sym">,</span> bytes<span class="sym">);
      }
   }


</span>   <span class="kwb">static void</span> ReplyToRequests<span class="sym">(</span><span class="kwb">int</span> n<span class="sym">) {
</span>      byte<span class="sym">[]</span> requestBuffer <span class="sym">=</span> <span class="kwa">new</span> byte<span class="sym">[</span>BUFFER_SIZE<span class="sym">];

</span>      TcpListener listener <span class="sym">=</span> <span class="kwa">new</span> TcpListener<span class="sym">(</span>PORT<span class="sym">);
</span>      listener<span class="sym">.</span>Start<span class="sym">();

</span>      <span class="kwa">using</span> <span class="sym">(</span>TcpClient client <span class="sym">=</span> listener<span class="sym">.</span>AcceptTcpClient<span class="sym">()){
</span>         NetworkStream s <span class="sym">=</span> client<span class="sym">.</span>GetStream<span class="sym">();

</span>         foreach <span class="sym">(</span>Reply reply in replyTypes<span class="sym">)
         {
</span>            reply<span class="sym">.</span>contents <span class="sym">=</span> <span class="kwa">new</span> byte<span class="sym">[</span>reply<span class="sym">.</span>size<span class="sym">];
</span>            <span class="kwb">int</span> requests <span class="sym">=</span> n <span class="sym">*</span> reply<span class="sym">.</span>multiplier<span class="sym">;

</span>            <span class="kwa">while</span> <span class="sym">((</span>s<span class="sym">.</span>Read<span class="sym">(</span>requestBuffer<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> REQUEST_SIZE<span class="sym">) &gt;</span> <span class="num">0</span><span class="sym">)&amp;&amp;(</span>requests<span class="sym">++ &lt;</span> <span class="num">0</span><span class="sym">))
</span>               s<span class="sym">.</span>Write<span class="sym">(</span>reply<span class="sym">.</span>contents<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> reply<span class="sym">.</span>size<span class="sym">);
         }
      }

</span>      listener<span class="sym">.</span>Stop<span class="sym">();
   }


</span>   <span class="kwc">class</span> Reply <span class="sym">{
</span>      internal <span class="kwb">int</span> multiplier<span class="sym">,</span> size<span class="sym">;
</span>      internal byte<span class="sym">[]</span> contents<span class="sym">;

</span>      internal Reply<span class="sym">(</span><span class="kwb">int</span> multiplier<span class="sym">,</span> <span class="kwb">int</span> size<span class="sym">){
</span>         <span class="kwa">this</span><span class="sym">.</span>multiplier <span class="sym">=</span> multiplier<span class="sym">;
</span>         <span class="kwa">this</span><span class="sym">.</span>size <span class="sym">=</span> size<span class="sym">;
      }
   }
}</span>
