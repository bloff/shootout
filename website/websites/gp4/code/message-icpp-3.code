<span class="hl slc">//   The Computer Language Shootout</span>
<span class="hl slc">//   http://shootout.alioth.debian.org/</span>
<span class="hl slc">//   contributed by Paul Kitchin</span>

<span class="hl dir">#include &lt;iostream&gt;</span>
<span class="hl dir">#include &lt;list&gt;</span>
<span class="hl dir">#include &lt;sstream&gt;</span>

<span class="hl kwa">namespace</span> threads
<span class="hl sym">{</span>

   <span class="hl kwc">class</span> thread<span class="hl sym">;</span>

   <span class="hl kwb">struct</span> thread_parameter
   <span class="hl sym">{</span>

      <span class="hl kwd">thread_parameter</span><span class="hl sym">(</span><span class="hl kwb">unsigned int</span> id<span class="hl sym">,</span> thread <span class="hl sym">*</span> next_thread<span class="hl sym">)</span>
         <span class="hl sym">:</span>
         <span class="hl kwd">id</span><span class="hl sym">(</span>id<span class="hl sym">),</span>
         <span class="hl kwd">next_thread</span><span class="hl sym">(</span>next_thread<span class="hl sym">)</span>
      <span class="hl sym">{</span>
      <span class="hl sym">}</span>

      <span class="hl kwb">unsigned int</span> id<span class="hl sym">;</span>
      thread <span class="hl sym">*</span> next_thread<span class="hl sym">;</span>

   <span class="hl sym">};</span>

   <span class="hl kwc">class</span> thread
   <span class="hl sym">{</span>

      <span class="hl kwc">public</span><span class="hl sym">:</span>

         <span class="hl kwd">thread</span><span class="hl sym">(</span><span class="hl kwb">unsigned int</span> <span class="hl sym">(*</span>function<span class="hl sym">)(</span>thread_parameter <span class="hl kwb">const</span> <span class="hl sym">&amp;),</span> thread_parameter <span class="hl kwb">const</span> <span class="hl sym">&amp;</span> arguments<span class="hl sym">)</span>
            <span class="hl sym">:</span>
            <span class="hl kwd">stack_top_</span><span class="hl sym">(</span><span class="hl kwa">reinterpret_cast</span><span class="hl sym">&lt;</span> std<span class="hl sym">::</span><span class="hl kwb">size_t</span> <span class="hl sym">&gt;(</span>stack_ <span class="hl sym">+ (</span><span class="hl kwa">sizeof</span><span class="hl sym">(</span>stack_<span class="hl sym">) /</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span><span class="hl kwb">unsigned int</span><span class="hl sym">)))),</span>
            <span class="hl kwd">function_</span><span class="hl sym">(</span>function<span class="hl sym">),</span>
            <span class="hl kwd">arguments_</span><span class="hl sym">(</span>arguments<span class="hl sym">),</span>
            <span class="hl kwd">running_</span><span class="hl sym">(</span><span class="hl kwa">true</span><span class="hl sym">)</span>
         <span class="hl sym">{</span>
         <span class="hl sym">}</span>

         std<span class="hl sym">::</span><span class="hl kwb">size_t</span> <span class="hl kwd">stack_top</span><span class="hl sym">()</span> <span class="hl kwb">const</span>
         <span class="hl sym">{</span>
            <span class="hl kwa">return</span> stack_top_<span class="hl sym">;</span>
         <span class="hl sym">}</span>

         <span class="hl kwb">bool</span> <span class="hl kwd">terminated</span><span class="hl sym">()</span> <span class="hl kwb">const</span>
         <span class="hl sym">{</span>
            <span class="hl kwa">return</span> <span class="hl sym">!</span>running_<span class="hl sym">;</span>
         <span class="hl sym">}</span>

      <span class="hl kwc">private</span><span class="hl sym">:</span>

         std<span class="hl sym">::</span><span class="hl kwb">size_t</span> stack_top_<span class="hl sym">;</span>
         <span class="hl kwb">unsigned int</span> <span class="hl sym">(*</span>function_<span class="hl sym">)(</span>thread_parameter <span class="hl kwb">const</span> <span class="hl sym">&amp;);</span>
         thread_parameter arguments_<span class="hl sym">;</span>
         <span class="hl kwb">bool</span> running_<span class="hl sym">;</span>
         <span class="hl kwb">unsigned int</span> stack_<span class="hl sym">[</span><span class="hl num">128</span><span class="hl sym">];</span>

   <span class="hl sym">};</span>

   std<span class="hl sym">::</span>list<span class="hl sym">&lt;</span> thread <span class="hl sym">* &gt;</span> waiting_threads<span class="hl sym">;</span>
   thread <span class="hl kwd">main_thread_object</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> <span class="hl kwd">thread_parameter</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">));</span>
   thread <span class="hl sym">*</span> current_thread <span class="hl sym">= &amp;</span>main_thread_object<span class="hl sym">;</span>

   std<span class="hl sym">::</span><span class="hl kwb">size_t</span> <span class="hl kwd">yield_thread</span><span class="hl sym">()</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">return</span> waiting_threads<span class="hl sym">.</span><span class="hl kwd">front</span><span class="hl sym">()-&gt;</span><span class="hl kwd">stack_top</span><span class="hl sym">();</span>
   <span class="hl sym">}</span>

   <span class="hl kwb">void</span> <span class="hl kwd">schedule_thread</span><span class="hl sym">()</span>
   <span class="hl sym">{</span>
      current_thread <span class="hl sym">=</span> waiting_threads<span class="hl sym">.</span><span class="hl kwd">front</span><span class="hl sym">();</span>
      waiting_threads<span class="hl sym">.</span><span class="hl kwd">pop_front</span><span class="hl sym">();</span>
   <span class="hl sym">}</span>

   <span class="hl kwb">void</span> <span class="hl kwd">yield</span><span class="hl sym">();</span>

   <span class="hl kwb">void</span> <span class="hl kwd">naked</span><span class="hl sym">()</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">asm</span>
      <span class="hl sym">(</span>
         <span class="hl str">&quot;_ZN7threads5yieldEv:</span><span class="hl esc">\n\t</span><span class="hl str">&quot;</span>
         <span class="hl str">&quot;pusha</span><span class="hl esc">\n\t</span><span class="hl str">&quot;</span>
         <span class="hl str">&quot;pushf</span><span class="hl esc">\n\t</span><span class="hl str">&quot;</span>
         <span class="hl str">&quot;mov   _ZN7threads14current_threadE, %eax</span><span class="hl esc">\n\t</span><span class="hl str">&quot;</span>
         <span class="hl str">&quot;mov   %esp, (%eax)</span><span class="hl esc">\n\t</span><span class="hl str">&quot;</span>
         <span class="hl str">&quot;call   _ZN7threads12yield_threadEv</span><span class="hl esc">\n\t</span><span class="hl str">&quot;</span>
         <span class="hl str">&quot;mov   %eax, %esp</span><span class="hl esc">\n\t</span><span class="hl str">&quot;</span>
         <span class="hl str">&quot;popf</span><span class="hl esc">\n\t</span><span class="hl str">&quot;</span>
         <span class="hl str">&quot;popa</span><span class="hl esc">\n\t</span><span class="hl str">&quot;</span>
         <span class="hl str">&quot;call   _ZN7threads15schedule_threadEv</span><span class="hl esc">\n\t</span><span class="hl str">&quot;</span>
         <span class="hl str">&quot;ret</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
         <span class="hl str">&quot;_ZN7threads21thread_start_functionEv:</span><span class="hl esc">\n\t</span><span class="hl str">&quot;</span>
         <span class="hl str">&quot;pusha</span><span class="hl esc">\n\t</span><span class="hl str">&quot;</span>
         <span class="hl str">&quot;pushf</span><span class="hl esc">\n\t</span><span class="hl str">&quot;</span>
         <span class="hl str">&quot;mov   %esp, (%eax)</span><span class="hl esc">\n\t</span><span class="hl str">&quot;</span>
         <span class="hl str">&quot;mov   %ebx, %esp</span><span class="hl esc">\n\t</span><span class="hl str">&quot;</span>
         <span class="hl str">&quot;ret</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
         <span class="hl str">&quot;_ZN7threads12thread_startEv:</span><span class="hl esc">\n\t</span><span class="hl str">&quot;</span>
         <span class="hl str">&quot;mov   %esp, %ebx</span><span class="hl esc">\n\t</span><span class="hl str">&quot;</span>
         <span class="hl str">&quot;mov   (%eax), %esp</span><span class="hl esc">\n\t</span><span class="hl str">&quot;</span>
         <span class="hl str">&quot;call   _ZN7threads21thread_start_functionEv</span><span class="hl esc">\n\t</span><span class="hl str">&quot;</span>
         <span class="hl str">&quot;subl   $4, %esp</span><span class="hl esc">\n\t</span><span class="hl str">&quot;</span>
         <span class="hl str">&quot;movl   _ZN7threads14current_threadE, %eax</span><span class="hl esc">\n\t</span><span class="hl str">&quot;</span>
         <span class="hl str">&quot;leal   8(%eax), %ecx</span><span class="hl esc">\n\t</span><span class="hl str">&quot;</span>
         <span class="hl str">&quot;movl   %ecx, (%esp)</span><span class="hl esc">\n\t</span><span class="hl str">&quot;</span>
         <span class="hl str">&quot;call   *4(%eax)</span><span class="hl esc">\n\t</span><span class="hl str">&quot;</span>
         <span class="hl str">&quot;movl   _ZN7threads14current_threadE, %edx</span><span class="hl esc">\n\t</span><span class="hl str">&quot;</span>
         <span class="hl str">&quot;movb   $0, 16(%edx)</span><span class="hl esc">\n\t</span><span class="hl str">&quot;</span>
         <span class="hl str">&quot;call   _ZN7threads5yieldEv</span><span class="hl esc">\n\t</span><span class="hl str">&quot;</span>
         <span class="hl str">&quot;ret</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
      <span class="hl sym">);</span>
   <span class="hl sym">}</span>

   thread <span class="hl sym">*</span> <span class="hl kwd">create_thread</span><span class="hl sym">(</span><span class="hl kwb">unsigned int</span> <span class="hl sym">(*</span>thread_function<span class="hl sym">)(</span>thread_parameter <span class="hl kwb">const</span> <span class="hl sym">&amp;),</span> thread_parameter <span class="hl kwb">const</span> <span class="hl sym">&amp;</span> parameters<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      thread <span class="hl sym">*</span> thread_ <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">thread</span><span class="hl sym">(</span>thread_function<span class="hl sym">,</span> parameters<span class="hl sym">);</span>
      <span class="hl kwa">asm</span>
      <span class="hl sym">(</span>
         <span class="hl str">&quot;push   %%eax</span><span class="hl esc">\n\t</span><span class="hl str">&quot;</span>
         <span class="hl str">&quot;push   %%ebx</span><span class="hl esc">\n\t</span><span class="hl str">&quot;</span>
         <span class="hl str">&quot;add   $8, %%esp</span><span class="hl esc">\n\t</span><span class="hl str">&quot;</span>
         <span class="hl str">&quot;mov   %0, %%eax</span><span class="hl esc">\n\t</span><span class="hl str">&quot;</span>
         <span class="hl str">&quot;sub   $8, %%esp</span><span class="hl esc">\n\t</span><span class="hl str">&quot;</span>
         <span class="hl str">&quot;call   _ZN7threads12thread_startEv</span><span class="hl esc">\n\t</span><span class="hl str">&quot;</span>
         <span class="hl str">&quot;pop   %%ebx</span><span class="hl esc">\n\t</span><span class="hl str">&quot;</span>
         <span class="hl str">&quot;pop   %%eax&quot;</span>
         <span class="hl sym">:</span>
         <span class="hl sym">:</span>
         <span class="hl str">&quot;m&quot;</span><span class="hl sym">(</span>thread_<span class="hl sym">)</span>
      <span class="hl sym">);</span>
      <span class="hl kwa">return</span> thread_<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwb">void</span> <span class="hl kwd">resume</span><span class="hl sym">(</span>thread <span class="hl sym">*</span> thread<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      waiting_threads<span class="hl sym">.</span><span class="hl kwd">push_back</span><span class="hl sym">(</span>thread<span class="hl sym">);</span>
   <span class="hl sym">}</span>

   <span class="hl kwb">void</span> <span class="hl kwd">suspend</span><span class="hl sym">()</span>
   <span class="hl sym">{</span>
      <span class="hl kwd">yield</span><span class="hl sym">();</span>
   <span class="hl sym">}</span>

   <span class="hl kwb">void</span> <span class="hl kwd">join</span><span class="hl sym">(</span>thread <span class="hl sym">*</span> thread<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">while</span> <span class="hl sym">(!</span>thread<span class="hl sym">-&gt;</span><span class="hl kwd">terminated</span><span class="hl sym">())</span>
      <span class="hl sym">{</span>
         <span class="hl kwd">yield</span><span class="hl sym">();</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">delete</span> thread<span class="hl sym">;</span>
   <span class="hl sym">}</span>

<span class="hl sym">}</span>

<span class="hl kwb">unsigned int const</span> number_of_threads <span class="hl sym">=</span> <span class="hl num">500</span><span class="hl sym">;</span>
<span class="hl kwb">unsigned int</span> number_of_messages_per_thread<span class="hl sym">;</span>
<span class="hl kwb">unsigned int</span> message_total <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

<span class="hl kwb">unsigned int</span> <span class="hl kwc">volatile</span> messages<span class="hl sym">[</span>number_of_threads<span class="hl sym">];</span>

<span class="hl kwb">unsigned int</span> <span class="hl kwd">thread_function</span><span class="hl sym">(</span>threads<span class="hl sym">::</span>thread_parameter <span class="hl kwb">const</span> <span class="hl sym">&amp;</span> parameters<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwa">using namespace</span> threads<span class="hl sym">;</span>
   <span class="hl kwb">unsigned int</span> <span class="hl kwc">volatile</span> <span class="hl sym">&amp;</span> <span class="hl kwd">thread_message</span><span class="hl sym">(</span>messages<span class="hl sym">[</span>parameters<span class="hl sym">.</span>id<span class="hl sym">]);</span>
   <span class="hl kwb">unsigned int</span> messages_received <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span>parameters<span class="hl sym">.</span>id <span class="hl sym">+</span> <span class="hl num">1</span> <span class="hl sym">!=</span> number_of_threads<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwb">unsigned int</span> <span class="hl kwc">volatile</span> <span class="hl sym">&amp;</span> <span class="hl kwd">next_thread_message</span><span class="hl sym">(</span>messages<span class="hl sym">[</span>parameters<span class="hl sym">.</span>id <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">]);</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>messages_received <span class="hl sym">!=</span> number_of_messages_per_thread<span class="hl sym">)</span>
      <span class="hl sym">{</span>
         next_thread_message <span class="hl sym">=</span> thread_message <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
         thread_message <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         <span class="hl sym">++</span>messages_received<span class="hl sym">;</span>
         <span class="hl kwd">resume</span><span class="hl sym">(</span>parameters<span class="hl sym">.</span>next_thread<span class="hl sym">);</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>messages_received <span class="hl sym">!=</span> number_of_messages_per_thread<span class="hl sym">)</span>
         <span class="hl sym">{</span>
            <span class="hl kwd">suspend</span><span class="hl sym">();</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">else</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>messages_received <span class="hl sym">!=</span> number_of_messages_per_thread<span class="hl sym">)</span>
      <span class="hl sym">{</span>
         message_total <span class="hl sym">+=</span> thread_message <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
         thread_message <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         <span class="hl sym">++</span>messages_received<span class="hl sym">;</span>
         <span class="hl kwd">resume</span><span class="hl sym">(</span>parameters<span class="hl sym">.</span>next_thread<span class="hl sym">);</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>messages_received <span class="hl sym">!=</span> number_of_messages_per_thread<span class="hl sym">)</span>
         <span class="hl sym">{</span>
            <span class="hl kwd">suspend</span><span class="hl sym">();</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">* *</span> argv<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwa">using namespace</span> threads<span class="hl sym">;</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span>argc <span class="hl sym">!=</span> <span class="hl num">2</span><span class="hl sym">)</span>
   <span class="hl sym">{</span>
      std<span class="hl sym">::</span>cout <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;Usage: &quot;</span> <span class="hl sym">&lt;&lt;</span> argv<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] &lt;&lt;</span> <span class="hl str">&quot; &lt;n&gt;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
      <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>
   <span class="hl sym">{</span>
      std<span class="hl sym">::</span>istringstream <span class="hl kwd">convertor</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]);</span>
      <span class="hl kwa">if</span> <span class="hl sym">(!(</span>convertor <span class="hl sym">&gt;&gt;</span> number_of_messages_per_thread<span class="hl sym">) || !</span>convertor<span class="hl sym">.</span><span class="hl kwd">eof</span><span class="hl sym">())</span>
      <span class="hl sym">{</span>
         std<span class="hl sym">::</span>cout <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;Usage: &quot;</span> <span class="hl sym">&lt;&lt;</span> argv<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] &lt;&lt;</span> <span class="hl str">&quot; &lt;n&gt;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
         std<span class="hl sym">::</span>cout <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">n must be an integer</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
         <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
   thread <span class="hl sym">*</span> threads<span class="hl sym">[</span>number_of_threads <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">];</span>
   threads<span class="hl sym">[</span>number_of_threads<span class="hl sym">] = &amp;</span>main_thread_object<span class="hl sym">;</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">unsigned int</span> thread_number <span class="hl sym">=</span> number_of_threads<span class="hl sym">;</span> thread_number <span class="hl sym">!=</span> <span class="hl num">0</span><span class="hl sym">;)</span>
   <span class="hl sym">{</span>
      thread_parameter <span class="hl kwd">thread_parameters</span><span class="hl sym">(</span>thread_number <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> threads<span class="hl sym">[</span>thread_number<span class="hl sym">]);</span>
      <span class="hl sym">--</span>thread_number<span class="hl sym">;</span>
      threads<span class="hl sym">[</span>thread_number<span class="hl sym">] =</span> <span class="hl kwd">create_thread</span><span class="hl sym">(</span>thread_function<span class="hl sym">,</span> thread_parameters<span class="hl sym">);</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">unsigned int</span> message_number <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> message_number <span class="hl sym">&lt;</span> number_of_messages_per_thread<span class="hl sym">; ++</span>message_number<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      messages<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] =</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwd">resume</span><span class="hl sym">(</span>threads<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>
      <span class="hl kwd">suspend</span><span class="hl sym">();</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">unsigned int</span> thread_number <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> thread_number <span class="hl sym">&lt;</span> number_of_threads<span class="hl sym">; ++</span>thread_number<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwd">join</span><span class="hl sym">(</span>threads<span class="hl sym">[</span>thread_number<span class="hl sym">]);</span>
   <span class="hl sym">}</span>
   std<span class="hl sym">::</span>cout <span class="hl sym">&lt;&lt;</span> message_total <span class="hl sym">&lt;&lt;</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">;</span>
<span class="hl sym">}</span>
