<span class="hl slc">! -*- mode: f90 -*-</span>
<span class="hl slc">!</span>
<span class="hl slc">! $Id: mandelbrot-g95.code,v 1.30 2008-03-05 04:52:37 igouy-guest Exp $ ; $Name:  $</span>
<span class="hl slc">!</span>
<span class="hl slc">! The Great Computer Language Shootout</span>
<span class="hl slc">! http://shootout.alioth.debian.org/</span>
<span class="hl slc">!</span>
<span class="hl slc">! Simon Geard, 6/1/05</span>
<span class="hl slc">!</span>
<span class="hl slc">! Adapted  mandelbrot.c by Greg Buchholz</span>
<span class="hl slc">!</span>
<span class="hl slc">! Building info.</span>
<span class="hl slc">! ==============</span>
<span class="hl slc">!</span>
<span class="hl slc">! Linux  - using the Intel Fortran90 compiler:</span>
<span class="hl slc">!</span>
<span class="hl slc">!          ifort mandelbrot.f90 -O3 -static-libcxa -o mandelbrot</span>
<span class="hl slc">!</span>
program mandelbrot
  implicit none
  integer w<span class="hl sym">,</span> h<span class="hl sym">,</span> x<span class="hl sym">,</span> y<span class="hl sym">,</span> bit_num
  integer<span class="hl sym">(</span>kind<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">)</span> byte_acc
  integer<span class="hl sym">(</span>kind<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">),</span> parameter <span class="hl sym">::</span> K0 <span class="hl sym">=</span> <span class="hl num">0</span>
  integer<span class="hl sym">(</span>kind<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">),</span> parameter <span class="hl sym">::</span> K1 <span class="hl sym">=</span> <span class="hl num">1</span>
  integer<span class="hl sym">,</span> parameter <span class="hl sym">::</span> iter <span class="hl sym">=</span> <span class="hl num">50</span>
  real<span class="hl sym">*</span><span class="hl num">8</span><span class="hl sym">,</span> parameter  <span class="hl sym">::</span> limit2 <span class="hl sym">=</span> <span class="hl num">4.0</span>d0
  integer  i
  character<span class="hl sym">(</span>len<span class="hl sym">=</span><span class="hl num">8</span><span class="hl sym">)</span> argv
  complex<span class="hl sym">(</span>kind<span class="hl sym">=</span><span class="hl num">8</span><span class="hl sym">)</span> Z<span class="hl sym">,</span> C
  logical debug<span class="hl sym">,</span> in_mandelbrot

  call getarg<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span>argv<span class="hl sym">)</span>
  read<span class="hl sym">(</span>argv<span class="hl sym">,*)</span> w
  h <span class="hl sym">=</span> w
  bit_num <span class="hl sym">=</span> <span class="hl num">0</span>
  byte_acc <span class="hl sym">=</span> K0
  <span class="hl slc">! Output pbm header</span>
  write<span class="hl sym">(*,</span><span class="hl str">'(a)'</span><span class="hl sym">)</span> <span class="hl str">'P4'</span>
  write<span class="hl sym">(*,</span><span class="hl str">'(i0,a,i0)'</span><span class="hl sym">)</span> w<span class="hl sym">,</span><span class="hl str">' '</span><span class="hl sym">,</span>h
  do y<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">,</span>h<span class="hl sym">-</span><span class="hl num">1</span>
     do x<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">,</span>w<span class="hl sym">-</span><span class="hl num">1</span>
        C <span class="hl sym">=</span> cmplx<span class="hl sym">(</span><span class="hl num">2.0</span>d0<span class="hl sym">*</span>x<span class="hl sym">/</span>w<span class="hl sym">-</span><span class="hl num">1.5</span>d0<span class="hl sym">,</span><span class="hl num">2.0</span>d0<span class="hl sym">*</span>y<span class="hl sym">/</span>h<span class="hl sym">-</span><span class="hl num">1.0</span>d0<span class="hl sym">)</span>
        Z <span class="hl sym">= (</span><span class="hl num">0.0</span>d0<span class="hl sym">,</span><span class="hl num">0.0</span>d0<span class="hl sym">)</span>
        in_mandelbrot <span class="hl sym">=</span> .true.
        do i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">,</span>iter<span class="hl sym">-</span><span class="hl num">1</span>
           Z <span class="hl sym">=</span> Z<span class="hl sym">**</span><span class="hl num">2</span> <span class="hl sym">+</span> C
           if <span class="hl sym">(</span>real<span class="hl sym">(</span>Z<span class="hl sym">*</span>conjg<span class="hl sym">(</span>Z<span class="hl sym">)) &gt;</span> limit2<span class="hl sym">)</span> then
              in_mandelbrot <span class="hl sym">=</span> .false.
              exit
           end if
        end do
        if <span class="hl sym">(</span>in_mandelbrot<span class="hl sym">)</span> then
           <span class="hl slc">! Inside the set so set this bit to 1</span>
           byte_acc <span class="hl sym">=</span> ior<span class="hl sym">(</span>ishft<span class="hl sym">(</span>byte_acc<span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">),</span>K1<span class="hl sym">)</span>
        else
           <span class="hl slc">! Outside the set so set this bit to 0</span>
           byte_acc <span class="hl sym">=</span> ishft<span class="hl sym">(</span>byte_acc<span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">)</span>
        end if

        bit_num <span class="hl sym">=</span> bit_num <span class="hl sym">+</span> <span class="hl num">1</span>
        if <span class="hl sym">(</span>bit_num <span class="hl sym">==</span> <span class="hl num">8</span><span class="hl sym">)</span> then
           <span class="hl slc">! All bits set so output them</span>
           write<span class="hl sym">(*,</span><span class="hl str">'(a1)'</span><span class="hl sym">,</span>advance<span class="hl sym">=</span><span class="hl str">'no'</span><span class="hl sym">)</span> char<span class="hl sym">(</span>byte_acc<span class="hl sym">)</span>
           byte_acc <span class="hl sym">=</span> K0
           bit_num <span class="hl sym">=</span> <span class="hl num">0</span>

        elseif <span class="hl sym">(</span>x <span class="hl sym">==</span> w<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span> then
           <span class="hl slc">! End of a row so left-justify the bits we have and output them</span>
           byte_acc <span class="hl sym">=</span> ishft<span class="hl sym">(</span>byte_acc<span class="hl sym">,</span><span class="hl num">8</span><span class="hl sym">-</span>mod<span class="hl sym">(</span>w<span class="hl sym">,</span><span class="hl num">8</span><span class="hl sym">))</span>
           write<span class="hl sym">(*,</span><span class="hl str">'(a1)'</span><span class="hl sym">,</span>advance<span class="hl sym">=</span><span class="hl str">'no'</span><span class="hl sym">)</span> char<span class="hl sym">(</span>byte_acc<span class="hl sym">)</span>
           byte_acc <span class="hl sym">=</span> K0
           bit_num <span class="hl sym">=</span> <span class="hl num">0</span>

        end if

     end do
  end do
end program mandelbrot
