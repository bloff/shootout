<span class="slc">// ---------------------------------------------------------------------</span>
<span class="slc">// The Great Computer Language Shootout</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>
<span class="slc">//</span>
<span class="slc">// Contributed by Anthony Borla</span>
<span class="slc">// ---------------------------------------------------------------------</span>

<span class="kwa">object</span> mandelbrot
<span class="sym">{</span>
  <span class="kwa">def</span> main<span class="sym">(</span>args<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]):</span> unit <span class="sym">=</span>
  <span class="sym">{</span>
    <span class="kwa">val</span> ITERATIONS<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="num">50</span><span class="sym">;</span> <span class="kwa">val</span> LIMIT_SQR<span class="sym">:</span><span class="kwb">double</span> <span class="sym">=</span> <span class="num">4.0</span><span class="sym">;</span>

    <span class="kwa">var</span> bit_num<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> <span class="kwa">var</span> byte_acc<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="num">0x00</span><span class="sym">;</span>

    <span class="kwa">var</span> N <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">(</span><span class="num">0</span><span class="sym">));</span>

    <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">(</span><span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">+</span> N <span class="sym">+</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span> N<span class="sym">);</span>

    <span class="kwa">var</span> y<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

    <span class="kwa">while</span> <span class="sym">(</span>y <span class="sym">&lt;</span> N<span class="sym">)</span>
    <span class="sym">{</span>
      <span class="kwa">var</span> x<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

      <span class="kwa">while</span> <span class="sym">(</span>x <span class="sym">&lt;</span> N<span class="sym">)</span>
      <span class="sym">{</span>
        <span class="kwa">var</span> ZR<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span> <span class="kwa">var</span> ZI<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
        <span class="kwa">var</span> TR<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span> <span class="kwa">var</span> TI<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
        <span class="kwa">var</span> CR<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">= (</span><span class="num">2.0</span> <span class="sym">*</span> x <span class="sym">/</span> N<span class="sym">) -</span> <span class="num">1.5</span><span class="sym">;</span>
        <span class="kwa">var</span> CI<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">= (</span><span class="num">2.0</span> <span class="sym">*</span> y <span class="sym">/</span> N<span class="sym">) -</span> <span class="num">1.0</span><span class="sym">;</span>
        <span class="kwa">var</span> ESCAPE<span class="sym">:</span> <span class="kwb">boolean</span> <span class="sym">=</span> false<span class="sym">;</span>

        <span class="kwa">var</span> i<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

        <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> ITERATIONS <span class="sym">&amp;&amp; !</span>ESCAPE<span class="sym">)</span>
        <span class="sym">{</span>
          TR <span class="sym">=</span> ZR <span class="sym">*</span> ZR <span class="sym">-</span> ZI <span class="sym">*</span> ZI <span class="sym">+</span> CR<span class="sym">;</span> TI <span class="sym">=</span> <span class="num">2.0</span> <span class="sym">*</span> ZR <span class="sym">*</span> ZI <span class="sym">+</span> CI<span class="sym">;</span>
          ZR <span class="sym">=</span> TR<span class="sym">;</span> ZI <span class="sym">=</span> TI<span class="sym">;</span>

          <span class="kwa">if</span> <span class="sym">(</span>ZR <span class="sym">*</span> ZR <span class="sym">+</span> ZI <span class="sym">*</span> ZI <span class="sym">&gt;</span> LIMIT_SQR<span class="sym">)</span> ESCAPE <span class="sym">=</span> true<span class="sym">;</span>
          i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
        <span class="sym">}</span>

        byte_acc <span class="sym">= (</span>byte_acc <span class="sym">&lt;&lt;</span> <span class="num">1</span><span class="sym">) | (</span><span class="kwa">if</span> <span class="sym">(</span>ESCAPE<span class="sym">)</span> <span class="num">0</span><span class="sym">;</span> <span class="kwa">else</span> <span class="num">1</span><span class="sym">);</span>

        bit_num <span class="sym">=</span> bit_num <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>

        <span class="kwa">if</span> <span class="sym">(</span>bit_num <span class="sym">==</span> <span class="num">8</span> <span class="sym">||</span> x <span class="sym">==</span> N <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span>
        <span class="sym">{</span>
          byte_acc <span class="sym">= (</span>byte_acc <span class="sym">&lt;&lt; (</span><span class="num">8</span> <span class="sym">-</span> bit_num<span class="sym">));</span>
          <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>write<span class="sym">(</span>byte_acc<span class="sym">);</span>
          byte_acc <span class="sym">=</span> <span class="num">0x00</span><span class="sym">;</span> bit_num <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
        <span class="sym">}</span>

        x <span class="sym">=</span> x <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
      <span class="sym">}</span>

      y <span class="sym">=</span> y <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>flush<span class="sym">();</span>
  <span class="sym">}</span>
<span class="sym">}</span>

