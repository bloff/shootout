<span class="hl slc">;;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; contributed by Anthony Borla</span>
<span class="hl slc">;;</span>
<span class="hl slc">;; A buffered version of the 'revcomp' benchmark. Although this benchmark</span>
<span class="hl slc">;; can more straightforwardly be implemented by replacing the procedures</span>
<span class="hl slc">;; below with the following:</span>
<span class="hl slc">;;</span>
<span class="hl slc">;;  (define (add-to-segment segment sequence)</span>
<span class="hl slc">;;    (string-upcase! sequence)</span>
<span class="hl slc">;;    (string-reverse! sequence)</span>
<span class="hl slc">;;    (string-replace segment (string-translate* sequence +codes+) 0 0))</span>
<span class="hl slc">;;</span>
<span class="hl slc">;;  ; -------------</span>
<span class="hl slc">;;</span>
<span class="hl slc">;;  (define (dump-segment segment line-size)</span>
<span class="hl slc">;;    (if (not (string-null? segment))</span>
<span class="hl slc">;;      (for-each</span>
<span class="hl slc">;;        (lambda (line) (print line))</span>
<span class="hl slc">;;        (string-chop segment line-size)))</span>
<span class="hl slc">;;    (make-string 0))</span>
<span class="hl slc">;;</span>
<span class="hl slc">;; the buffered approach is needed to keep strings at an optimal size</span>
<span class="hl slc">;; so as to maintain acceptable performance for all input ranges.</span>
<span class="hl slc">;; Unfortunately it seems that a close eye has to be kept on the sizes</span>
<span class="hl slc">;; of strings when using the native string implementation: let them grow</span>
<span class="hl slc">;; too much, and performance quickly degrades. For example, using an</span>
<span class="hl slc">;; input file size of approximately 1.5MB, the buffered version clocked</span>
<span class="hl slc">;; in at just on 9 sec, whilst the unbuffered version clocked in at</span>
<span class="hl slc">;; about 29 min; the relative performance difference is undeniably</span>
<span class="hl slc">;; considerable.</span>
<span class="hl slc">;;</span>
<span class="hl slc">;; Of course, alternate string implementations could have been used, but</span>
<span class="hl slc">;; it was thought appropriate to stick to using out-of-the-box</span>
<span class="hl slc">;; facilities, in this case, SRFI-1 strings, so as to better gauge</span>
<span class="hl slc">;; language performance.</span>


<span class="hl sym">(</span>declare <span class="hl sym">(</span>inline end-of-segment?<span class="hl sym">)</span>
         <span class="hl sym">(</span>fixnum<span class="hl sym">) (</span>disable-interrupts<span class="hl sym">) (</span>unsafe<span class="hl sym">) (</span>block<span class="hl sym">) (</span><span class="hl kwa">lambda</span>-lift<span class="hl sym">)</span>
         <span class="hl sym">(</span>uses srfi-<span class="hl num">1</span> srfi-<span class="hl num">13</span><span class="hl sym">))</span>

<span class="hl sym">(</span>define-constant <span class="hl sym">+</span>segment-limit<span class="hl sym">+</span> <span class="hl num">120</span><span class="hl sym">)</span>
<span class="hl sym">(</span>define-constant <span class="hl sym">+</span><span class="hl kwa">line</span>-size<span class="hl sym">+</span> <span class="hl num">60</span><span class="hl sym">)</span>

<span class="hl sym">(</span>define-constant <span class="hl sym">+</span>codes<span class="hl sym">+</span>
  <span class="hl sym">(</span><span class="hl kwa">list</span>
    <span class="hl sym">'(</span><span class="hl str">&quot;A&quot;</span> . <span class="hl str">&quot;T&quot;</span><span class="hl sym">) '(</span><span class="hl str">&quot;B&quot;</span> . <span class="hl str">&quot;V&quot;</span><span class="hl sym">) '(</span><span class="hl str">&quot;C&quot;</span> . <span class="hl str">&quot;G&quot;</span><span class="hl sym">) '(</span><span class="hl str">&quot;D&quot;</span> . <span class="hl str">&quot;H&quot;</span><span class="hl sym">) '(</span><span class="hl str">&quot;G&quot;</span> . <span class="hl str">&quot;C&quot;</span><span class="hl sym">)</span>
    <span class="hl sym">'(</span><span class="hl str">&quot;H&quot;</span> . <span class="hl str">&quot;D&quot;</span><span class="hl sym">) '(</span><span class="hl str">&quot;K&quot;</span> . <span class="hl str">&quot;M&quot;</span><span class="hl sym">) '(</span><span class="hl str">&quot;M&quot;</span> . <span class="hl str">&quot;K&quot;</span><span class="hl sym">) '(</span><span class="hl str">&quot;N&quot;</span> . <span class="hl str">&quot;N&quot;</span><span class="hl sym">) '(</span><span class="hl str">&quot;R&quot;</span> . <span class="hl str">&quot;Y&quot;</span><span class="hl sym">)</span>
    <span class="hl sym">'(</span><span class="hl str">&quot;S&quot;</span> . <span class="hl str">&quot;S&quot;</span><span class="hl sym">) '(</span><span class="hl str">&quot;T&quot;</span> . <span class="hl str">&quot;A&quot;</span><span class="hl sym">) '(</span><span class="hl str">&quot;V&quot;</span> . <span class="hl str">&quot;B&quot;</span><span class="hl sym">) '(</span><span class="hl str">&quot;W&quot;</span> . <span class="hl str">&quot;W&quot;</span><span class="hl sym">) '(</span><span class="hl str">&quot;Y&quot;</span> . <span class="hl str">&quot;R&quot;</span><span class="hl sym">)))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>add-to-segment segment sequence<span class="hl sym">)</span>
  <span class="hl sym">(</span>let<span class="hl sym">* ((</span>segment-<span class="hl kwa">list</span> <span class="hl sym">(</span><span class="hl kwa">car</span> segment<span class="hl sym">))</span>
         <span class="hl sym">(</span>current-segment <span class="hl sym">(</span><span class="hl kwa">cdr</span> segment<span class="hl sym">))</span>
         <span class="hl sym">(</span>segment-size <span class="hl sym">(</span>string-<span class="hl kwa">length</span> current-segment<span class="hl sym">))</span>
         <span class="hl sym">(</span>t-sequence <span class="hl sym">(</span>string-translate<span class="hl sym">* (</span>string-<span class="hl kwa">reverse</span> <span class="hl sym">(</span>string-upcase sequence<span class="hl sym">)) +</span>codes<span class="hl sym">+)))</span>
    <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(&gt;=</span> segment-size <span class="hl sym">+</span>segment-limit<span class="hl sym">+)</span>
    <span class="hl sym">(</span>begin
      <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> segment-<span class="hl kwa">list</span> <span class="hl sym">(</span><span class="hl kwa">append</span> <span class="hl sym">(</span><span class="hl kwa">list</span> current-segment<span class="hl sym">)</span> segment-<span class="hl kwa">list</span><span class="hl sym">))</span>
      <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> current-segment <span class="hl sym">(</span>make-string <span class="hl num">0</span><span class="hl sym">))))</span>
    <span class="hl sym">(</span><span class="hl kwa">cons</span> segment-<span class="hl kwa">list</span> <span class="hl sym">(</span>string-replace current-segment t-sequence <span class="hl num">0 0</span><span class="hl sym">))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>dump-segment segment <span class="hl kwa">line</span>-size<span class="hl sym">)</span>
  <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">not</span> <span class="hl sym">(</span>segment-<span class="hl kwa">null</span>? segment<span class="hl sym">))</span>
    <span class="hl sym">(</span>let <span class="hl sym">((</span>segment-<span class="hl kwa">list</span> <span class="hl sym">(</span><span class="hl kwa">car</span> segment<span class="hl sym">)) (</span>seg-lines nil<span class="hl sym">) (</span>spill <span class="hl sym">(</span>make-string <span class="hl num">0</span><span class="hl sym">)))</span>
      <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>segment-has-<span class="hl kwa">list</span>? segment<span class="hl sym">)</span>
        <span class="hl sym">(</span><span class="hl kwa">set</span>-<span class="hl kwa">car</span><span class="hl sym">!</span> segment-<span class="hl kwa">list</span> <span class="hl sym">(</span>string-replace <span class="hl sym">(</span><span class="hl kwa">caar</span> segment<span class="hl sym">) (</span><span class="hl kwa">cdr</span> segment<span class="hl sym">)</span> <span class="hl num">0 0</span><span class="hl sym">))</span>
      <span class="hl slc">; else</span>
        <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> segment-<span class="hl kwa">list</span> <span class="hl sym">(</span><span class="hl kwa">list</span> <span class="hl sym">(</span><span class="hl kwa">cdr</span> segment<span class="hl sym">))))</span>
      <span class="hl sym">(</span>for-each
        <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>segment<span class="hl sym">)</span>
          <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> seg-lines <span class="hl sym">(</span>string-chop <span class="hl sym">(</span>string-<span class="hl kwa">append</span> spill segment<span class="hl sym">)</span> <span class="hl kwa">line</span>-size<span class="hl sym">))</span>
          <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> spill <span class="hl sym">(</span><span class="hl kwa">last</span> seg-lines<span class="hl sym">))</span>
          <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(&lt;= (</span>string-<span class="hl kwa">length</span> spill<span class="hl sym">)</span> <span class="hl kwa">line</span>-size<span class="hl sym">) (</span><span class="hl kwa">set</span><span class="hl sym">!</span> seg-lines <span class="hl sym">(</span>butlast seg-lines<span class="hl sym">)))</span>
          <span class="hl sym">(</span>for-each
            <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span><span class="hl kwa">line</span><span class="hl sym">) (</span><span class="hl kwa">print line</span><span class="hl sym">))</span>
            seg-lines<span class="hl sym">))</span>
      segment-<span class="hl kwa">list</span><span class="hl sym">)</span>
      <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">not</span> <span class="hl sym">(</span>string-<span class="hl kwa">null</span>? spill<span class="hl sym">)) (</span><span class="hl kwa">print</span> spill<span class="hl sym">))))</span>
  <span class="hl sym">(</span>make-segment<span class="hl sym">))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>make-segment<span class="hl sym">) (</span><span class="hl kwa">cons</span> <span class="hl sym">'()</span> <span class="hl str">&quot;&quot;</span><span class="hl sym">))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>segment-<span class="hl kwa">null</span>? segment<span class="hl sym">)</span>
  <span class="hl sym">(</span><span class="hl kwa">and</span> <span class="hl sym">(</span>pair? segment<span class="hl sym">) (</span><span class="hl kwa">and</span> <span class="hl sym">(</span><span class="hl kwa">null</span>? <span class="hl sym">(</span><span class="hl kwa">car</span> segment<span class="hl sym">)) (</span>string-<span class="hl kwa">null</span>? <span class="hl sym">(</span><span class="hl kwa">cdr</span> segment<span class="hl sym">)))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>segment-has-<span class="hl kwa">list</span>? segment<span class="hl sym">) (</span><span class="hl kwa">and</span> <span class="hl sym">(</span>pair? segment<span class="hl sym">) (</span><span class="hl kwa">not</span> <span class="hl sym">(</span><span class="hl kwa">null</span>? <span class="hl sym">(</span><span class="hl kwa">car</span> segment<span class="hl sym">)))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>end-of-segment? sequence<span class="hl sym">) (</span>char<span class="hl sym">=</span>? <span class="hl sym">(</span>string-ref sequence <span class="hl num">0</span><span class="hl sym">)</span> #\&gt;<span class="hl sym">))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>main<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>segment <span class="hl sym">(</span>make-segment<span class="hl sym">)))</span>

    <span class="hl sym">(</span>let loop <span class="hl sym">((</span>sequence <span class="hl sym">(</span><span class="hl kwa">read</span>-<span class="hl kwa">line</span><span class="hl sym">)))</span>
      <span class="hl sym">(</span><span class="hl kwa">cond</span> <span class="hl sym">((</span>eof-object? sequence<span class="hl sym">)</span>
        <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> segment <span class="hl sym">(</span>dump-segment segment <span class="hl sym">+</span><span class="hl kwa">line</span>-size<span class="hl sym">+)))</span>
      <span class="hl sym">(</span>else
        <span class="hl sym">(</span><span class="hl kwa">cond</span> <span class="hl sym">((</span>end-of-segment? sequence<span class="hl sym">)</span>
          <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> segment <span class="hl sym">(</span>dump-segment segment <span class="hl sym">+</span><span class="hl kwa">line</span>-size<span class="hl sym">+))</span>
          <span class="hl sym">(</span><span class="hl kwa">print</span> sequence<span class="hl sym">))</span>
        <span class="hl sym">(</span>else
          <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> segment <span class="hl sym">(</span>add-to-segment segment sequence<span class="hl sym">))))</span>
      <span class="hl sym">(</span>loop <span class="hl sym">(</span><span class="hl kwa">read</span>-<span class="hl kwa">line</span><span class="hl sym">)))))))</span>

<span class="hl sym">(</span>main<span class="hl sym">)</span>

