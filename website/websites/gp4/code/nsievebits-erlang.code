<span class="slc">%% The Computer Language Shootout</span>
<span class="slc">%% http://shootout.alioth.debian.org/</span>
<span class="slc">%% contributed by Alexey Shchepin &lt;alexey&#64;sevcom.net&gt;</span>

<span class="sym">-</span><span class="kwd">module</span><span class="sym">(</span>nsievebits<span class="sym">)</span>.
<span class="sym">-</span><span class="kwd">export</span><span class="sym">([</span>main<span class="sym">/</span><span class="num">0</span><span class="sym">,</span> main<span class="sym">/</span><span class="num">1</span><span class="sym">])</span>.

<span class="kwd">main</span><span class="sym">() -&gt;</span> <span class="kwd">main</span><span class="sym">([</span><span class="str">&quot;1&quot;</span><span class="sym">])</span>.
<span class="kwd">main</span><span class="sym">([</span>Arg<span class="sym">]) -&gt;</span>
    N <span class="sym">=</span> <span class="kwb">list_to_integer</span><span class="sym">(</span>Arg<span class="sym">),</span>
    <span class="kwd">nsieve</span><span class="sym">((</span><span class="num">1</span> bsl N<span class="sym">) *</span> <span class="num">10000</span><span class="sym">),</span>
    <span class="kwd">nsieve</span><span class="sym">((</span><span class="num">1</span> <span class="kwd">bsl</span> <span class="sym">(</span>N <span class="sym">-</span> <span class="num">1</span><span class="sym">)) *</span> <span class="num">10000</span><span class="sym">),</span>
    <span class="kwd">nsieve</span><span class="sym">((</span><span class="num">1</span> <span class="kwd">bsl</span> <span class="sym">(</span>N <span class="sym">-</span> <span class="num">2</span><span class="sym">)) *</span> <span class="num">10000</span><span class="sym">),</span>
    <span class="kwb">halt</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>.

<span class="kwd">nsieve</span><span class="sym">(</span>M<span class="sym">) -&gt;</span>
    <span class="kwd">nsieve</span><span class="sym">(</span><span class="num">2</span><span class="sym">,</span> M<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">)</span>.

<span class="kwd">nsieve</span><span class="sym">(</span>I<span class="sym">,</span> M<span class="sym">,</span> Sieve<span class="sym">,</span> Counter<span class="sym">)</span> <span class="kwa">when</span> I <span class="sym">=&lt;</span> M <span class="sym">-&gt;</span>
    <span class="kwa">if</span>
	Sieve <span class="kwd">band</span> <span class="sym">(</span><span class="num">1</span> bsl I<span class="sym">) ==</span> <span class="num">0</span> <span class="sym">-&gt;</span>
	    NewSieve <span class="sym">=</span> <span class="kwd">sieve_num</span><span class="sym">(</span><span class="num">2</span><span class="sym">*</span>I<span class="sym">,</span> I<span class="sym">,</span> M<span class="sym">,</span> Sieve<span class="sym">),</span>
	    <span class="kwd">nsieve</span><span class="sym">(</span>I<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> M<span class="sym">,</span> NewSieve<span class="sym">,</span> Counter <span class="sym">+</span> <span class="num">1</span><span class="sym">);</span>
	true <span class="sym">-&gt;</span>
	    <span class="kwd">nsieve</span><span class="sym">(</span>I<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> M<span class="sym">,</span> Sieve<span class="sym">,</span> Counter<span class="sym">)</span>
    <span class="kwa">end</span><span class="sym">;</span>
<span class="kwd">nsieve</span><span class="sym">(</span>_I<span class="sym">,</span> M<span class="sym">,</span> _S<span class="sym">,</span> Counter<span class="sym">) -&gt;</span>
    io<span class="sym">:</span><span class="kwd">format</span><span class="sym">(</span><span class="str">&quot;Primes up to ~8w~8w</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">, [</span>M<span class="sym">,</span> Counter<span class="sym">]),</span>
    Counter.

<span class="kwd">sieve_num</span><span class="sym">(</span>J<span class="sym">,</span> I<span class="sym">,</span> M<span class="sym">,</span> Sieve<span class="sym">)</span> <span class="kwa">when</span> J <span class="sym">=&lt;</span> M <span class="sym">-&gt;</span>
    <span class="kwd">sieve_num</span><span class="sym">(</span>J <span class="sym">+</span> I<span class="sym">,</span> I<span class="sym">,</span> M<span class="sym">,</span> Sieve <span class="kwd">bor</span> <span class="sym">(</span><span class="num">1</span> bsl J<span class="sym">));</span>
<span class="kwd">sieve_num</span><span class="sym">(</span>_J<span class="sym">,</span> _I<span class="sym">,</span> _M<span class="sym">,</span> Sieve<span class="sym">) -&gt;</span>
    Sieve.


