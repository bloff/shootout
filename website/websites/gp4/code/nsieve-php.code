<span class="sym">&lt;</span>? <span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com"></span>
<span class="com">   php -q nsieve.php 2</span>
<span class="com">*/</span>


<span class="kwa">function</span> NSieve<span class="sym">(</span><span class="kwb">$m</span><span class="sym">, &amp;</span><span class="kwb">$isPrime</span><span class="sym">){</span>
   <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">$i</span><span class="sym">=</span><span class="num">2</span><span class="sym">;</span> <span class="kwb">$i</span><span class="sym">&lt;=</span><span class="kwb">$m</span><span class="sym">;</span> <span class="kwb">$i</span><span class="sym">++)</span> <span class="kwb">$isPrime</span><span class="sym">[</span><span class="kwb">$i</span><span class="sym">] =</span> TRUE<span class="sym">;</span>
   <span class="kwb">$count</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

   <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">$i</span><span class="sym">=</span><span class="num">2</span><span class="sym">;</span> <span class="kwb">$i</span><span class="sym">&lt;=</span><span class="kwb">$m</span><span class="sym">;</span> <span class="kwb">$i</span><span class="sym">++){</span>
      <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$isPrime</span><span class="sym">[</span><span class="kwb">$i</span><span class="sym">]){</span>
         <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">$k</span><span class="sym">=</span><span class="kwb">$i</span><span class="sym">+</span><span class="kwb">$i</span><span class="sym">;</span> <span class="kwb">$k</span><span class="sym">&lt;=</span><span class="kwb">$m</span><span class="sym">;</span> <span class="kwb">$k</span><span class="sym">+=</span><span class="kwb">$i</span><span class="sym">)</span> <span class="kwb">$isPrime</span><span class="sym">[</span><span class="kwb">$k</span><span class="sym">] =</span> FALSE<span class="sym">;</span>
         <span class="kwb">$count</span><span class="sym">++;</span>
      <span class="sym">}</span>
   <span class="sym">}</span>
   <span class="kwa">return</span> <span class="kwb">$count</span><span class="sym">;</span>
<span class="sym">}</span>


<span class="kwb">$n</span> <span class="sym">=</span> <span class="kwb">$argv</span><span class="sym">[</span><span class="num">1</span><span class="sym">];</span>
<span class="kwb">$flags</span> <span class="sym">=</span> <span class="kwa">array</span><span class="sym">();</span>

<span class="kwb">$m</span> <span class="sym">= (</span><span class="num">1</span><span class="sym">&lt;&lt;</span><span class="kwb">$n</span><span class="sym">)*</span><span class="num">10000</span><span class="sym">;</span>
<span class="kwa">printf</span><span class="sym">(</span><span class="str">&quot;Primes up to %8d %8d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwb">$m</span><span class="sym">,</span> NSieve<span class="sym">(</span><span class="kwb">$m</span><span class="sym">,</span> <span class="kwb">$flags</span><span class="sym">));</span>

<span class="kwb">$m</span> <span class="sym">= (</span><span class="num">1</span><span class="sym">&lt;&lt;</span><span class="kwb">$n</span><span class="sym">-</span><span class="num">1</span><span class="sym">)*</span><span class="num">10000</span><span class="sym">;</span>
<span class="kwa">printf</span><span class="sym">(</span><span class="str">&quot;Primes up to %8d %8d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwb">$m</span><span class="sym">,</span> NSieve<span class="sym">(</span><span class="kwb">$m</span><span class="sym">,</span> <span class="kwb">$flags</span><span class="sym">));</span>

<span class="kwb">$m</span> <span class="sym">= (</span><span class="num">1</span><span class="sym">&lt;&lt;</span><span class="kwb">$n</span><span class="sym">-</span><span class="num">2</span><span class="sym">)*</span><span class="num">10000</span><span class="sym">;</span>
<span class="kwa">printf</span><span class="sym">(</span><span class="str">&quot;Primes up to %8d %8d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwb">$m</span><span class="sym">,</span> NSieve<span class="sym">(</span><span class="kwb">$m</span><span class="sym">,</span> <span class="kwb">$flags</span><span class="sym">));</span>
?<span class="sym">&gt;</span>
