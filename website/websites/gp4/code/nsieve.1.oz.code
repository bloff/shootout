<span class="hl slc">% The Computer Language Shootout</span>
<span class="hl slc">% http://shootout.alioth.debian.org/</span>
<span class="hl slc">% contributed by Isaac Gouy</span>

<span class="hl kwa">functor</span>
<span class="hl kwa">import</span> System Application

<span class="hl kwa">define</span>
   <span class="hl kwa">fun</span> <span class="hl sym">{</span>NSieve N <span class="hl sym">?</span>IsPrime<span class="hl sym">}</span>
      Count <span class="hl sym">= {</span>NewCell <span class="hl num">0</span><span class="hl sym">}</span>
   <span class="hl kwa">in</span>
      <span class="hl kwa">for</span> I <span class="hl kwa">in</span> <span class="hl num">2</span><span class="hl sym">..</span>N do IsPrime<span class="hl sym">.</span>I <span class="hl sym">:=</span> <span class="hl kwa">true end</span>

      <span class="hl kwa">for</span> I <span class="hl kwa">in</span> <span class="hl num">2</span><span class="hl sym">..</span>N do
         <span class="hl kwa">if</span> IsPrime<span class="hl sym">.</span>I <span class="hl kwa">then</span>
            Count <span class="hl sym">:= &#64;</span>Count <span class="hl sym">+</span> <span class="hl num">1</span>
            <span class="hl kwa">for</span> K <span class="hl kwa">in</span> I<span class="hl sym">+</span>I<span class="hl sym">;</span> K<span class="hl sym">=&lt;</span>N<span class="hl sym">;</span> K<span class="hl sym">+</span>I do IsPrime<span class="hl sym">.</span>K <span class="hl sym">:=</span> <span class="hl kwa">false end</span>
         <span class="hl kwa">end</span>
      <span class="hl kwa">end</span>
      <span class="hl sym">&#64;</span>Count
   <span class="hl kwa">end</span>


   <span class="hl kwa">proc</span> <span class="hl sym">{</span>Line N A<span class="hl sym">}</span>
      S <span class="hl sym">=</span> &quot;Primes up to &quot; N1 <span class="hl sym">=</span> N<span class="hl sym">*</span><span class="hl num">10000</span> <span class="hl kwa">in</span>
         <span class="hl sym">{</span>System<span class="hl sym">.</span>showInfo S <span class="hl sym"># {</span>Pad N1 <span class="hl num">8</span><span class="hl sym">} #</span> &quot; &quot; <span class="hl sym"># {</span>Pad <span class="hl sym">{</span>NSieve N1 A<span class="hl sym">}</span> <span class="hl num">8</span><span class="hl sym">} }</span>
   <span class="hl kwa">end</span>

   <span class="hl kwa">fun</span> <span class="hl sym">{</span>Pad I W<span class="hl sym">}</span>
      S <span class="hl sym">= {</span>NewCell <span class="hl sym">{</span>IntToString I<span class="hl sym">}}</span>
      L <span class="hl sym">=</span> W <span class="hl sym">- {</span>Length <span class="hl sym">&#64;</span>S<span class="hl sym">}</span>
   <span class="hl kwa">in</span>
      <span class="hl kwa">for</span> I <span class="hl kwa">in</span> <span class="hl num">1</span><span class="hl sym">..</span>L do S <span class="hl sym">:= {</span>Append &quot; &quot; <span class="hl sym">&#64;</span>S<span class="hl sym">}</span> <span class="hl kwa">end</span>
      <span class="hl sym">&#64;</span>S
   <span class="hl kwa">end</span>

   <span class="hl sym">[</span>Arg<span class="hl sym">] = {</span>Application<span class="hl sym">.</span>getArgs plain<span class="hl sym">}</span>
   N <span class="hl sym">= {</span>String<span class="hl sym">.</span>toInt Arg<span class="hl sym">}</span>

   BooleanArray <span class="hl sym">= {</span>NewArray <span class="hl num">0</span> <span class="hl sym">({</span>Pow <span class="hl num">2</span> N  <span class="hl sym">}*</span><span class="hl num">10000</span><span class="hl sym">)+</span><span class="hl num">1</span> <span class="hl kwa">true</span><span class="hl sym">}</span>

<span class="hl kwa">in</span>
   <span class="hl sym">{</span>Line <span class="hl sym">{</span>Pow <span class="hl num">2</span> N  <span class="hl sym">}</span> BooleanArray<span class="hl sym">}</span>
   <span class="hl sym">{</span>Line <span class="hl sym">{</span>Pow <span class="hl num">2</span> N<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">}</span> BooleanArray<span class="hl sym">}</span>
   <span class="hl sym">{</span>Line <span class="hl sym">{</span>Pow <span class="hl num">2</span> N<span class="hl sym">-</span><span class="hl num">2</span><span class="hl sym">}</span> BooleanArray<span class="hl sym">}</span>
   <span class="hl sym">{</span>Application<span class="hl sym">.</span>exit <span class="hl num">0</span><span class="hl sym">}</span>
<span class="hl kwa">end</span>
