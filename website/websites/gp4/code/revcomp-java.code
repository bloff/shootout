<span class="com">/*</span>
<span class="com"> * The Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> * contributed by Anthony Donnefort</span>
<span class="com"> */</span>

<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;</span>

<span class="kwa">public class</span> revcomp <span class="sym">{</span>
	<span class="kwa">static final</span> <span class="kwb">char</span><span class="sym">[]</span> comp <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">char</span><span class="sym">[</span><span class="num">128</span><span class="sym">];</span>
	<span class="kwa">static</span> <span class="sym">{</span>
		<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> comp<span class="sym">.</span>length<span class="sym">;</span> i<span class="sym">++)</span> comp<span class="sym">[</span>i<span class="sym">] = (</span><span class="kwb">char</span><span class="sym">)</span> i<span class="sym">;</span>
		comp<span class="sym">[</span><span class="str">'t'</span><span class="sym">] =</span> comp<span class="sym">[</span><span class="str">'T'</span><span class="sym">] =</span> <span class="str">'A'</span><span class="sym">;</span>
		comp<span class="sym">[</span><span class="str">'a'</span><span class="sym">] =</span> comp<span class="sym">[</span><span class="str">'A'</span><span class="sym">] =</span> <span class="str">'T'</span><span class="sym">;</span>
		comp<span class="sym">[</span><span class="str">'g'</span><span class="sym">] =</span> comp<span class="sym">[</span><span class="str">'G'</span><span class="sym">] =</span> <span class="str">'C'</span><span class="sym">;</span>
		comp<span class="sym">[</span><span class="str">'c'</span><span class="sym">] =</span> comp<span class="sym">[</span><span class="str">'C'</span><span class="sym">] =</span> <span class="str">'G'</span><span class="sym">;</span>
		comp<span class="sym">[</span><span class="str">'v'</span><span class="sym">] =</span> comp<span class="sym">[</span><span class="str">'V'</span><span class="sym">] =</span> <span class="str">'B'</span><span class="sym">;</span>
		comp<span class="sym">[</span><span class="str">'h'</span><span class="sym">] =</span> comp<span class="sym">[</span><span class="str">'H'</span><span class="sym">] =</span> <span class="str">'D'</span><span class="sym">;</span>
		comp<span class="sym">[</span><span class="str">'r'</span><span class="sym">] =</span> comp<span class="sym">[</span><span class="str">'R'</span><span class="sym">] =</span> <span class="str">'Y'</span><span class="sym">;</span>
		comp<span class="sym">[</span><span class="str">'m'</span><span class="sym">] =</span> comp<span class="sym">[</span><span class="str">'M'</span><span class="sym">] =</span> <span class="str">'K'</span><span class="sym">;</span>
		comp<span class="sym">[</span><span class="str">'y'</span><span class="sym">] =</span> comp<span class="sym">[</span><span class="str">'Y'</span><span class="sym">] =</span> <span class="str">'R'</span><span class="sym">;</span>
		comp<span class="sym">[</span><span class="str">'k'</span><span class="sym">] =</span> comp<span class="sym">[</span><span class="str">'K'</span><span class="sym">] =</span> <span class="str">'M'</span><span class="sym">;</span>
		comp<span class="sym">[</span><span class="str">'b'</span><span class="sym">] =</span> comp<span class="sym">[</span><span class="str">'B'</span><span class="sym">] =</span> <span class="str">'V'</span><span class="sym">;</span>
		comp<span class="sym">[</span><span class="str">'d'</span><span class="sym">] =</span> comp<span class="sym">[</span><span class="str">'D'</span><span class="sym">] =</span> <span class="str">'H'</span><span class="sym">;</span>
		comp<span class="sym">[</span><span class="str">'u'</span><span class="sym">] =</span> comp<span class="sym">[</span><span class="str">'U'</span><span class="sym">] =</span> <span class="str">'A'</span><span class="sym">;</span>
	<span class="sym">}</span>

	<span class="kwa">private static</span> <span class="kwb">void</span> <span class="kwd">reverseAndInsertCR</span><span class="sym">(</span><span class="kwc">StringBuffer</span> buf<span class="sym">) {</span>
		buf<span class="sym">.</span><span class="kwd">reverse</span><span class="sym">();</span>
		<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">60</span><span class="sym">;</span> i <span class="sym">&lt;</span> buf<span class="sym">.</span><span class="kwd">length</span><span class="sym">();</span> i <span class="sym">+=</span> <span class="num">61</span><span class="sym">)</span> buf<span class="sym">.</span><span class="kwd">insert</span><span class="sym">(</span>i<span class="sym">,</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">);</span>
		<span class="kwa">if</span> <span class="sym">(</span>buf<span class="sym">.</span><span class="kwd">length</span><span class="sym">() !=</span> <span class="num">0</span><span class="sym">)</span> buf<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span><span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">);</span>
	<span class="sym">}</span>

	<span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">)</span> <span class="kwa">throws</span> <span class="kwc">IOException</span> <span class="sym">{</span>
		<span class="kwc">BufferedReader</span> in <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">BufferedReader</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwc">InputStreamReader</span><span class="sym">(</span><span class="kwc">System</span><span class="sym">.</span>in<span class="sym">));</span>
		<span class="kwc">StringBuffer</span> buf <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">StringBuffer</span><span class="sym">();</span>
		<span class="kwa">for</span> <span class="sym">(</span><span class="kwc">String</span> line<span class="sym">; (</span>line <span class="sym">=</span> in<span class="sym">.</span><span class="kwd">readLine</span><span class="sym">()) !=</span> null<span class="sym">;)</span>
			<span class="kwa">if</span> <span class="sym">(</span>line<span class="sym">.</span><span class="kwd">startsWith</span><span class="sym">(</span><span class="str">&quot;&gt;&quot;</span><span class="sym">)) {</span>
				<span class="kwd">reverseAndInsertCR</span><span class="sym">(</span>buf<span class="sym">);</span>
				buf<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span>line<span class="sym">);</span> buf<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span><span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">);</span>
				<span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span>buf<span class="sym">);</span>
				buf<span class="sym">.</span><span class="kwd">delete</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> buf<span class="sym">.</span><span class="kwd">length</span><span class="sym">());</span>
			<span class="sym">}</span> <span class="kwa">else for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> line<span class="sym">.</span><span class="kwd">length</span><span class="sym">();</span> i<span class="sym">++)</span> buf<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span>comp<span class="sym">[</span>line<span class="sym">.</span><span class="kwd">charAt</span><span class="sym">(</span>i<span class="sym">)]);</span>
		<span class="kwd">reverseAndInsertCR</span><span class="sym">(</span>buf<span class="sym">);</span>
		<span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span>buf<span class="sym">);</span>
	<span class="sym">}</span>
<span class="sym">}</span>
