<span class="com">{- The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Jeff Newbern</span>
<span class="com">   updated by Spencer Janssen and Don Stewart -}</span>

<span class="kwa">import</span> System
<span class="kwa">import qualified</span> Data.ByteString.Char8 <span class="kwa">as</span> B

randomSequence <span class="sym">::</span> <span class="kwb">Int</span> <span class="sym">-&gt; [(</span><span class="kwb">Char</span><span class="sym">,</span><span class="kwb">Double</span><span class="sym">)] -&gt;</span> <span class="kwb">Int</span> <span class="sym">-&gt; (</span>B.ByteString<span class="sym">,</span> <span class="kwb">Int</span><span class="sym">)</span>
randomSequence n bf seed <span class="sym">= (</span>sequence<span class="sym">,</span> seed'<span class="sym">)</span>
  <span class="kwa">where</span> <span class="sym">(</span>sequence<span class="sym">,</span> Just seed'<span class="sym">) =</span> B.unfoldrN n f seed
        f s <span class="sym">=</span> Just <span class="sym">(</span>chooseBase bf <span class="sym">(</span>normalize s<span class="sym">),</span> nextSeed s<span class="sym">)</span>

chooseBase <span class="sym">:: [(</span><span class="kwb">Char</span><span class="sym">,</span><span class="kwb">Double</span><span class="sym">)] -&gt;</span> <span class="kwb">Double</span> <span class="sym">-&gt;</span> <span class="kwb">Char</span>
chooseBase <span class="sym">[(</span>b<span class="sym">,</span>_<span class="sym">)]</span>    _ <span class="sym">=</span> b
chooseBase <span class="sym">((</span>b<span class="sym">,</span>f<span class="sym">):</span>xs<span class="sym">)</span> p <span class="sym">|</span> p <span class="sym">&lt;</span> f     <span class="sym">=</span> b
                        <span class="sym">|</span> otherwise <span class="sym">=</span> chooseBase xs <span class="sym">(</span>p<span class="sym">-</span>f<span class="sym">)</span>

writeFasta label title sequence <span class="sym">=</span> <span class="kwa">do</span>
     putStrLn $ <span class="str">&quot;&gt;&quot;</span> <span class="sym">++</span> label <span class="sym">++</span> <span class="str">&quot; &quot;</span> <span class="sym">++</span> title
     mapM_ B.putStrLn $ split <span class="num">60</span> sequence

split n xs <span class="sym">|</span> B.null xs <span class="sym">= []</span>
           <span class="sym">|</span> otherwise <span class="sym">=</span> l <span class="sym">:</span> split n r
    <span class="kwa">where</span> <span class="sym">(</span>l<span class="sym">,</span> r<span class="sym">) =</span> B.splitAt n xs

main <span class="sym">=</span> <span class="kwa">do</span>
    n <span class="sym">&lt;-</span> getArgs <span class="sym">&gt;&gt;=</span> readIO . head
    <span class="kwa">let</span> aluLen         <span class="sym">=</span> <span class="num">1</span> <span class="sym">+</span> <span class="num">2</span> <span class="sym">*</span> n `div` B.length alu
        aluSeq         <span class="sym">=</span> B.take <span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> n<span class="sym">)</span> . B.concat . replicate aluLen $ alu
        <span class="sym">(</span>iubSeq<span class="sym">,</span> seed<span class="sym">) =</span> randomSequence <span class="sym">(</span><span class="num">3</span> <span class="sym">*</span> n<span class="sym">)</span> iub         initSeed
        <span class="sym">(</span>homSeq<span class="sym">,</span> _<span class="sym">)    =</span> randomSequence <span class="sym">(</span><span class="num">5</span> <span class="sym">*</span> n<span class="sym">)</span> homosapiens seed

    writeFasta <span class="str">&quot;ONE&quot;</span>   <span class="str">&quot;Homo sapiens alu&quot;</span>       aluSeq
    writeFasta <span class="str">&quot;TWO&quot;</span>   <span class="str">&quot;IUB ambiguity codes&quot;</span>    iubSeq
    writeFasta <span class="str">&quot;THREE&quot;</span> <span class="str">&quot;Homo sapiens frequency&quot;</span> homSeq

alu <span class="sym">=</span> B.pack
         <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG\</span>
<span class="str">         \GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA\</span>
<span class="str">         \CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT\</span>
<span class="str">         \ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA\</span>
<span class="str">         \GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG\</span>
<span class="str">         \AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC\</span>
<span class="str">         \AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>

iub <span class="sym">= [ (</span>'a'<span class="sym">,</span> <span class="num">0.27</span><span class="sym">), (</span>'c'<span class="sym">,</span> <span class="num">0.12</span><span class="sym">), (</span>'g'<span class="sym">,</span> <span class="num">0.12</span><span class="sym">), (</span>'t'<span class="sym">,</span> <span class="num">0.27</span><span class="sym">), (</span>'B'<span class="sym">,</span> <span class="num">0.02</span><span class="sym">)</span>
      <span class="sym">, (</span>'D'<span class="sym">,</span> <span class="num">0.02</span><span class="sym">), (</span>'H'<span class="sym">,</span> <span class="num">0.02</span><span class="sym">), (</span>'K'<span class="sym">,</span> <span class="num">0.02</span><span class="sym">), (</span>'M'<span class="sym">,</span> <span class="num">0.02</span><span class="sym">), (</span>'N'<span class="sym">,</span> <span class="num">0.02</span><span class="sym">)</span>
      <span class="sym">, (</span>'R'<span class="sym">,</span> <span class="num">0.02</span><span class="sym">), (</span>'S'<span class="sym">,</span> <span class="num">0.02</span><span class="sym">), (</span>'V'<span class="sym">,</span> <span class="num">0.02</span><span class="sym">), (</span>'W'<span class="sym">,</span> <span class="num">0.02</span><span class="sym">), (</span>'Y'<span class="sym">,</span> <span class="num">0.02</span><span class="sym">) ]</span>

homosapiens <span class="sym">= [ (</span>'a'<span class="sym">,</span> <span class="num">0.3029549426680</span><span class="sym">), (</span>'c'<span class="sym">,</span> <span class="num">0.1979883004921</span><span class="sym">),</span>
                <span class="sym">(</span>'g'<span class="sym">,</span> <span class="num">0.1975473066391</span><span class="sym">), (</span>'t'<span class="sym">,</span> <span class="num">0.3015094502008</span><span class="sym">) ]</span>

im          <span class="sym">=</span> <span class="num">139968</span>
ia          <span class="sym">=</span> <span class="num">3877</span>
ic          <span class="sym">=</span> <span class="num">29573</span>
nextSeed s  <span class="sym">= (</span>s <span class="sym">*</span> ia <span class="sym">+</span> ic<span class="sym">)</span> `rem` im
normalize n <span class="sym">= (</span>fromIntegral n<span class="sym">) * (</span><span class="num">1.0</span> <span class="sym">/</span> fromIntegral im<span class="sym">)</span>
initSeed    <span class="sym">=</span> nextSeed <span class="num">42</span>
