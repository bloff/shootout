<span class="hl com">&quot;* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Paolo Bonzini *&quot;</span><span class="hl sym">!</span>


Object subclass<span class="hl sym">: #</span>PermGenerator
   instanceVariableNames<span class="hl sym">:</span> <span class="hl str">'timesRotated perm atEnd'</span>
   classVariableNames<span class="hl sym">:</span> <span class="hl str">''</span>
   poolDictionaries<span class="hl sym">:</span> <span class="hl str">''</span>
   category<span class="hl sym">:</span> <span class="hl str">'Shootout'</span><span class="hl sym">!</span>


<span class="hl sym">!</span>Array methodsFor<span class="hl sym">:</span> <span class="hl str">'benchmarking'</span><span class="hl sym">!</span>
pfannkuchen
   <span class="hl sym">|</span> first complement a b k <span class="hl sym">|</span>
   k <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">.</span>
   <span class="hl sym">[ (</span>first <span class="hl sym">:=</span> <span class="hl kwa">self</span> at<span class="hl sym">:</span> <span class="hl num">1</span><span class="hl sym">) ==</span> <span class="hl num">1</span> <span class="hl sym">]</span> whileFalse<span class="hl sym">: [</span>
      k <span class="hl sym">:=</span> k <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">.</span>
      complement <span class="hl sym">:=</span> first <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">.</span>
      <span class="hl num">1</span> to<span class="hl sym">:</span> first <span class="hl sym">//</span> <span class="hl num">2</span> do<span class="hl sym">: [ :</span>i <span class="hl sym">|</span>
         a <span class="hl sym">:=</span> <span class="hl kwa">self</span> at<span class="hl sym">:</span> i<span class="hl sym">.</span>
         b <span class="hl sym">:=</span> <span class="hl kwa">self</span> at<span class="hl sym">:</span> complement <span class="hl sym">-</span> i<span class="hl sym">.</span>
         <span class="hl kwa">self</span> at<span class="hl sym">:</span> i put<span class="hl sym">:</span> b<span class="hl sym">.</span>
         <span class="hl kwa">self</span> at<span class="hl sym">:</span> complement <span class="hl sym">-</span> i put<span class="hl sym">:</span> a<span class="hl sym">.</span>
      <span class="hl sym">]</span>
   <span class="hl sym">].</span>
   <span class="hl sym">^</span>k<span class="hl sym">! !</span>



<span class="hl sym">!</span>PermGenerator methodsFor<span class="hl sym">:</span> <span class="hl str">'initialize-release'</span><span class="hl sym">!</span>
initialize<span class="hl sym">:</span> size
   perm <span class="hl sym">:= (</span><span class="hl num">1</span> to<span class="hl sym">:</span> size<span class="hl sym">)</span> asArray<span class="hl sym">.</span>
   timesRotated <span class="hl sym">:=</span> Array new<span class="hl sym">:</span> size withAll<span class="hl sym">:</span> <span class="hl num">0</span><span class="hl sym">.</span>
   atEnd <span class="hl sym">:=</span> <span class="hl kwa">false</span><span class="hl sym">! !</span>



<span class="hl sym">!</span>PermGenerator methodsFor<span class="hl sym">:</span> <span class="hl str">'initialize-release'</span><span class="hl sym">!</span>
makeNext
   <span class="hl sym">|</span> temp remainder <span class="hl sym">|</span>
   <span class="hl com">&quot;* Generate the next permutation. *&quot;</span>
   <span class="hl num">2</span> to<span class="hl sym">:</span> perm size do<span class="hl sym">: [ :</span>r <span class="hl sym">|</span>
      <span class="hl com">&quot;* Rotate the first r items to the left. *&quot;</span>
      temp <span class="hl sym">:=</span> perm at<span class="hl sym">:</span> <span class="hl num">1</span><span class="hl sym">.</span>
      <span class="hl num">1</span> to<span class="hl sym">:</span> r <span class="hl sym">-</span> <span class="hl num">1</span> do<span class="hl sym">: [ :</span>i <span class="hl sym">|</span> perm at<span class="hl sym">:</span> i put<span class="hl sym">: (</span>perm at<span class="hl sym">:</span> i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">) ].</span>
      perm at<span class="hl sym">:</span> r put<span class="hl sym">:</span> temp<span class="hl sym">.</span>

      remainder <span class="hl sym">:=</span> timesRotated at<span class="hl sym">:</span> r put<span class="hl sym">: ((</span>timesRotated at<span class="hl sym">:</span> r<span class="hl sym">) +</span> <span class="hl num">1</span><span class="hl sym">) \\</span> r<span class="hl sym">.</span>
      remainder <span class="hl sym">=</span> <span class="hl num">0</span> ifFalse<span class="hl sym">: [ ^</span><span class="hl kwa">self</span> <span class="hl sym">].</span>

      <span class="hl com">&quot;* After r rotations, the first r items are in their original positions.</span>
<span class="hl com">      Go on rotating the first r+1 items. *&quot;</span>
   <span class="hl sym">].</span>

   <span class="hl com">&quot;* We are past the final permutation. *&quot;</span>
   atEnd <span class="hl sym">:=</span> <span class="hl kwa">true</span><span class="hl sym">! !</span>



<span class="hl sym">!</span>PermGenerator methodsFor<span class="hl sym">:</span> <span class="hl str">'benchmarks'</span><span class="hl sym">!</span>
maxPfannkuchenTo<span class="hl sym">:</span> output
   <span class="hl sym">|</span> max permutation check <span class="hl sym">|</span>
   max <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">.</span>
   check <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">.</span>
   <span class="hl sym">[</span><span class="hl kwa">self</span> atEnd<span class="hl sym">]</span> whileFalse<span class="hl sym">:</span>
      <span class="hl sym">[</span>permutation <span class="hl sym">:=</span> <span class="hl kwa">self</span> next<span class="hl sym">.</span>
      check <span class="hl sym">&lt;</span> <span class="hl num">30</span> ifTrue<span class="hl sym">:</span>
         <span class="hl sym">[</span>permutation do<span class="hl sym">: [:</span>each <span class="hl sym">|</span> output print<span class="hl sym">:</span> each<span class="hl sym">].</span>
         output nl<span class="hl sym">.</span>
         check <span class="hl sym">:=</span> check <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">].</span>
      max <span class="hl sym">:=</span> max max<span class="hl sym">:</span> permutation pfannkuchen<span class="hl sym">].</span>
   <span class="hl sym">^</span>max<span class="hl sym">! !</span>



<span class="hl sym">!</span>PermGenerator methodsFor<span class="hl sym">:</span> <span class="hl str">'accessing'</span><span class="hl sym">!</span>
atEnd
   <span class="hl sym">^</span>atEnd<span class="hl sym">! !</span>



<span class="hl sym">!</span>PermGenerator methodsFor<span class="hl sym">:</span> <span class="hl str">'accessing'</span><span class="hl sym">!</span>
next
   <span class="hl sym">|</span> result <span class="hl sym">|</span>
   result <span class="hl sym">:=</span> perm copy<span class="hl sym">.</span>
   <span class="hl kwa">self</span> makeNext<span class="hl sym">.</span>
   <span class="hl sym">^</span>result<span class="hl sym">! !</span>



<span class="hl sym">!</span>PermGenerator class methodsFor<span class="hl sym">:</span> <span class="hl str">'instance creation'</span><span class="hl sym">!</span>
new<span class="hl sym">:</span> size
   <span class="hl sym">^</span><span class="hl kwa">self</span> new
      initialize<span class="hl sym">:</span> size<span class="hl sym">;</span>
      yourself<span class="hl sym">! !</span>



<span class="hl sym">!</span>Tests class methodsFor<span class="hl sym">:</span> <span class="hl str">'benchmarking'</span><span class="hl sym">!</span>
fannkuch<span class="hl sym">:</span> n to<span class="hl sym">:</span> output
   <span class="hl sym">^(</span>PermGenerator new<span class="hl sym">:</span> n<span class="hl sym">)</span> maxPfannkuchenTo<span class="hl sym">:</span> output<span class="hl sym">! !</span>



<span class="hl sym">!</span>Tests class methodsFor<span class="hl sym">:</span> <span class="hl str">'benchmark scripts'</span><span class="hl sym">!</span>
fannkuch
   <span class="hl sym">|</span> n f <span class="hl sym">|</span>
   n <span class="hl sym">:=</span> <span class="hl kwa">self</span> arg<span class="hl sym">.</span>
   f <span class="hl sym">:=</span> <span class="hl kwa">self</span> fannkuch<span class="hl sym">:</span> n to<span class="hl sym">:</span> <span class="hl kwa">self</span> stdout<span class="hl sym">.</span>
   <span class="hl kwa">self</span> stdout
      nextPutAll<span class="hl sym">:</span> <span class="hl str">'Pfannkuchen('</span><span class="hl sym">,</span> n printString<span class="hl sym">,</span> <span class="hl str">') = '</span><span class="hl sym">;</span>
      print<span class="hl sym">:</span> f<span class="hl sym">;</span> nl<span class="hl sym">.</span>
   <span class="hl sym">^</span><span class="hl str">''</span><span class="hl sym">! !</span>
