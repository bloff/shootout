<span class="slc">;;; The Great Computer Language Shootout</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;;</span>
<span class="slc">;;; transcribed from Christophe Troestler's OCaml version by Juho Snellman</span>

<span class="sym">(</span><span class="kwa">defun</span> fannkuch <span class="sym">(</span>n<span class="sym">)</span>
  <span class="sym">(</span>declare <span class="sym">(</span>fixnum n<span class="sym">))</span>
  <span class="sym">(</span>let<span class="sym">* ((</span>p <span class="sym">(</span>make<span class="sym">-</span>array n
                        <span class="sym">:</span>element<span class="sym">-</span><span class="kwa">type</span> <span class="str">'fixnum</span>
<span class="str">                        :initial-contents (loop for i below n collect i)))</span>
<span class="str">         (p2 (make-array n :element-type '</span>fixnum<span class="sym">))</span>
         <span class="sym">(</span>count <span class="sym">(</span>make<span class="sym">-</span>array n
                            <span class="sym">:</span>element<span class="sym">-</span><span class="kwa">type</span> <span class="str">'fixnum</span>
<span class="str">                            :initial-contents (loop for i from 1 to n</span>
<span class="str">                                                    collect i)))</span>
<span class="str">         (m (1- n)))</span>
<span class="str">    (labels ((count-flips (p)</span>
<span class="str">               (loop for k = (aref p 0)</span>
<span class="str">                     until (zerop k)</span>
<span class="str">                     do (dotimes (i (ceiling k 2))</span>
<span class="str">                          (rotatef (aref p i)</span>
<span class="str">                                   (aref p (- k i))))</span>
<span class="str">                     count t))</span>
<span class="str">             (aux (r acc)</span>
<span class="str">               (declare (fixnum acc))</span>
<span class="str">               (cond ((= r n)</span>
<span class="str">                      acc)</span>
<span class="str">                     (t</span>
<span class="str">                      (let ((p/0 (aref p 0)))</span>
<span class="str">                        (dotimes (i r)</span>
<span class="str">                          (setf (aref p i)</span>
<span class="str">                                (aref p (1+ i))))</span>
<span class="str">                        (setf (aref p r) p/0))</span>
<span class="str">                      (decf (aref count r))</span>
<span class="str">                      (cond ((plusp (aref count r))</span>
<span class="str">                            (dotimes (i r)</span>
<span class="str">                              (setf (aref count i) (1+ i)))</span>
<span class="str">                             (cond ((and (/= (aref p 0) 0)</span>
<span class="str">                                         (/= (aref p m) m))</span>
<span class="str">                                    (replace p2 p)</span>
<span class="str">                                    (aux 1 (max (count-flips p2) acc)))</span>
<span class="str">                                   (t</span>
<span class="str">                                    (aux 1 acc))))</span>
<span class="str">                            (t</span>
<span class="str">                             (aux (1+ r) acc)))))))</span>
<span class="str">      (aux 1 0))))</span>
<span class="str"></span>
<span class="str">(defun main ()</span>
<span class="str">  (let* ((args #+sbcl sb-ext:*posix-argv*</span>
<span class="str">               #+cmu extensions:*command-line-strings*</span>
<span class="str">               #+gcl si::*command-args*)</span>
<span class="str">         (n (parse-integer (car (last args)))))</span>
<span class="str">    (format t &quot;Pfannkuchen(~d) = ~d~%&quot; n (fannkuch n))))</span>
