<span class="hl slc">% The Computer Language Shootout</span>
<span class="hl slc">% http://shootout.alioth.debian.org/</span>
<span class="hl slc">% contributed by Isaac Gouy</span>

<span class="hl kwa">functor</span>
<span class="hl kwa">import</span> Application System

<span class="hl kwa">define</span>
   <span class="hl kwa">fun</span> <span class="hl sym">{</span>NewMeetingPlace<span class="hl sym">}</span>
      ColourList
      ColourPort <span class="hl sym">= {</span>Port<span class="hl sym">.</span>new ColourList<span class="hl sym">}</span>
      OtherList
      OtherPort <span class="hl sym">= {</span>Port<span class="hl sym">.</span>new OtherList<span class="hl sym">}</span>
      CountDown <span class="hl sym">= {</span>NewCell N<span class="hl sym">}</span>

      <span class="hl kwa">proc</span> <span class="hl sym">{</span>Meetings C1<span class="hl sym">|</span>C2<span class="hl sym">|</span>C O1<span class="hl sym">|</span>O2<span class="hl sym">|</span>O<span class="hl sym">}</span>
         <span class="hl kwa">if</span> <span class="hl sym">&#64;</span>CountDown <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
            O1 <span class="hl sym">=</span> C2
            O2 <span class="hl sym">=</span> C1
            CountDown <span class="hl sym">:= &#64;</span>CountDown <span class="hl sym">-</span> <span class="hl num">1</span>
         <span class="hl kwa">else</span>
            O1 <span class="hl sym">=</span> faded
            O2 <span class="hl sym">=</span> faded
         <span class="hl kwa">end</span>
         <span class="hl sym">{</span>Meetings C O<span class="hl sym">}</span>
      <span class="hl kwa">end</span>

      <span class="hl kwa">fun</span> <span class="hl sym">{</span>OtherColour Me<span class="hl sym">}</span>
         Other
      <span class="hl kwa">in</span>
         <span class="hl sym">{</span>Port<span class="hl sym">.</span>send ColourPort Me<span class="hl sym">}</span>
         <span class="hl sym">{</span>Port<span class="hl sym">.</span>send OtherPort Other<span class="hl sym">}</span>
         Other
      <span class="hl kwa">end</span>

   <span class="hl kwa">in</span>
      <span class="hl kwa">thread</span> <span class="hl sym">{</span>Meetings ColourList OtherList<span class="hl sym">}</span> <span class="hl kwa">end</span>
      place<span class="hl sym">(</span>otherCreaturesColour<span class="hl sym">:</span> OtherColour<span class="hl sym">)</span>
   <span class="hl kwa">end</span>

   MeetingPlace <span class="hl sym">= {</span>NewMeetingPlace<span class="hl sym">}</span>


   <span class="hl kwa">class</span> Creature
      <span class="hl kwa">attr</span> creaturesMet<span class="hl sym">:</span><span class="hl num">0</span> colour

      <span class="hl kwa">meth</span> init<span class="hl sym">(</span>Colour<span class="hl sym">)</span> colour <span class="hl sym">:=</span> Colour <span class="hl kwa">end</span>
      <span class="hl kwa">meth</span> creaturesMet<span class="hl sym">($) &#64;</span>creaturesMet <span class="hl kwa">end</span>

      <span class="hl kwa">meth</span> be<span class="hl sym">(</span>Done Marker<span class="hl sym">)</span>
         <span class="hl kwa">thread</span> <span class="hl sym">{</span><span class="hl kwa">self</span> meet<span class="hl sym">}</span> Done<span class="hl sym">=</span>Marker <span class="hl kwa">end</span>
      <span class="hl kwa">end</span>

      <span class="hl kwa">meth</span> meet<span class="hl sym">()</span>
         Other <span class="hl sym">= {</span>MeetingPlace<span class="hl sym">.</span>otherCreaturesColour <span class="hl sym">&#64;</span>colour<span class="hl sym">}</span>
      <span class="hl kwa">in</span>
         <span class="hl kwa">if</span> Other <span class="hl sym">\=</span> faded <span class="hl kwa">then</span>
            creaturesMet <span class="hl sym">:= &#64;</span>creaturesMet <span class="hl sym">+</span> <span class="hl num">1</span>
            colour <span class="hl sym">:= {</span><span class="hl kwa">self</span> complement<span class="hl sym">(</span>Other <span class="hl sym">$)}</span>
            <span class="hl sym">{</span><span class="hl kwa">self</span> meet<span class="hl sym">}</span>
         <span class="hl kwa">end</span>
      <span class="hl kwa">end</span>

      <span class="hl kwa">meth</span> complement<span class="hl sym">(</span>Other <span class="hl sym">$)</span>
         <span class="hl kwa">if</span> <span class="hl sym">&#64;</span>colour <span class="hl sym">==</span> Other <span class="hl kwa">then</span>
            Other
         <span class="hl kwa">else</span>
            <span class="hl kwa">case</span> <span class="hl sym">&#64;</span>colour
            <span class="hl kwa">of</span> blue <span class="hl kwa">then if</span> Other <span class="hl sym">==</span> red <span class="hl kwa">then</span> yellow <span class="hl kwa">else</span> red <span class="hl kwa">end</span>
            <span class="hl sym">[]</span> red <span class="hl kwa">then if</span> Other <span class="hl sym">==</span> blue <span class="hl kwa">then</span> yellow <span class="hl kwa">else</span> blue <span class="hl kwa">end</span>
            <span class="hl sym">[]</span> yellow <span class="hl kwa">then if</span> Other <span class="hl sym">==</span> blue <span class="hl kwa">then</span> red <span class="hl kwa">else</span> blue <span class="hl kwa">end</span>
            <span class="hl kwa">end</span>
         <span class="hl kwa">end</span>
      <span class="hl kwa">end</span>
   <span class="hl kwa">end</span>   <span class="hl slc">% Creature</span>


   <span class="hl sym">[</span>Arg<span class="hl sym">] = {</span>Application<span class="hl sym">.</span>getArgs plain<span class="hl sym">}</span>
   N <span class="hl sym">= {</span>String<span class="hl sym">.</span>toInt Arg<span class="hl sym">}</span>

   Colours <span class="hl sym">= [</span>blue red yellow blue<span class="hl sym">]</span>
   Creatures <span class="hl sym">= {</span>Map Colours <span class="hl kwa">fun</span><span class="hl sym">{$</span> C<span class="hl sym">} {</span>New Creature init<span class="hl sym">(</span>C<span class="hl sym">)}</span> <span class="hl kwa">end</span><span class="hl sym">}</span>

   <span class="hl kwa">proc</span> <span class="hl sym">{</span>WaitForMeetingsToEnd Creatures Marker<span class="hl sym">}</span>
      <span class="hl kwa">if</span> Creatures <span class="hl sym">\=</span> nil <span class="hl kwa">then</span>
         C<span class="hl sym">|</span>Cs <span class="hl sym">=</span> Creatures
         Done
      <span class="hl kwa">in</span>
         <span class="hl sym">{</span>C be<span class="hl sym">(</span>Done Marker<span class="hl sym">)}</span>
         <span class="hl sym">{</span>WaitForMeetingsToEnd Cs Done<span class="hl sym">}</span>
      <span class="hl kwa">end</span>
      <span class="hl sym">{</span>Wait Marker<span class="hl sym">}</span>
   <span class="hl kwa">end</span>


<span class="hl kwa">in</span>
   <span class="hl sym">{</span>WaitForMeetingsToEnd Creatures unit<span class="hl sym">}</span>

   <span class="hl sym">{</span>System<span class="hl sym">.</span>show
      <span class="hl sym">{</span>FoldL
         Creatures
         <span class="hl kwa">fun</span><span class="hl sym">{$</span> Count C<span class="hl sym">} {</span>C creaturesMet<span class="hl sym">($)} +</span> Count <span class="hl kwa">end</span>
         <span class="hl num">0</span><span class="hl sym">} }</span>

   <span class="hl sym">{</span>Application<span class="hl sym">.</span>exit <span class="hl num">0</span><span class="hl sym">}</span>
<span class="hl kwa">end</span>
