<span class="com">/* ------------------------------------------------------------------ */</span>
<span class="com">/* The Great Computer Language Shootout                               */</span>
<span class="com">/* http://shootout.alioth.debian.org/                                 */</span>
<span class="com">/*                                                                    */</span>
<span class="com">/* Contributed by Anthony Borla                                       */</span>
<span class="com">/* ------------------------------------------------------------------ */</span>

<span class="kwa">object</span> spectralnorm
<span class="sym">{</span>
  <span class="kwa">def</span> main<span class="sym">(</span>args<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]):</span> unit <span class="sym">=</span>
  <span class="sym">{</span>
    <span class="kwa">val</span> N <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">(</span><span class="num">0</span><span class="sym">));</span>
    Console<span class="sym">.</span>printf<span class="sym">(</span><span class="str">&quot;{0,number,0.000000000}</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)(</span>approximate<span class="sym">(</span>N<span class="sym">));</span>
  <span class="sym">}</span>

  <span class="kwa">def</span> approximate<span class="sym">(</span>n<span class="sym">:</span> <span class="kwb">int</span><span class="sym">):</span> <span class="kwb">double</span> <span class="sym">=</span>
  <span class="sym">{</span>
    <span class="kwa">val</span> u<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwb">double</span><span class="sym">] =</span> <span class="kwa">new</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwb">double</span><span class="sym">](</span>n<span class="sym">) ;</span> <span class="kwa">val</span> v<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwb">double</span><span class="sym">] =</span> <span class="kwa">new</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwb">double</span><span class="sym">](</span>n<span class="sym">)</span>
    <span class="kwa">var</span> vBv<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">=</span> <span class="num">0.0</span> <span class="sym">;</span> <span class="kwa">var</span> vV<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">=</span> <span class="num">0.0</span> <span class="sym">;</span> <span class="kwa">var</span> i<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="num">0</span>

    i <span class="sym">=</span> <span class="num">0</span> <span class="sym">;</span> <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> n<span class="sym">) {</span> u<span class="sym">(</span>i<span class="sym">) =</span> <span class="num">1.0</span> <span class="sym">;</span> i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span> <span class="sym">}</span>
    i <span class="sym">=</span> <span class="num">0</span> <span class="sym">;</span> <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> <span class="num">10</span><span class="sym">) {</span> mulAtAv<span class="sym">(</span>n<span class="sym">,</span> u<span class="sym">,</span> v<span class="sym">) ;</span> mulAtAv<span class="sym">(</span>n<span class="sym">,</span> v<span class="sym">,</span> u<span class="sym">) ;</span> i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span> <span class="sym">}</span>
    i <span class="sym">=</span> <span class="num">0</span> <span class="sym">;</span> <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> n<span class="sym">) {</span> vBv <span class="sym">=</span> vBv <span class="sym">+</span> u<span class="sym">(</span>i<span class="sym">) *</span> v<span class="sym">(</span>i<span class="sym">) ;</span> vV <span class="sym">=</span> vV <span class="sym">+</span> v<span class="sym">(</span>i<span class="sym">) *</span> v<span class="sym">(</span>i<span class="sym">) ;</span> i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span> <span class="sym">}</span>

    <span class="kwa">return</span> <span class="kwc">Math</span><span class="sym">.</span>sqrt<span class="sym">(</span>vBv <span class="sym">/</span> vV<span class="sym">)</span>
  <span class="sym">}</span>

  <span class="kwa">def</span> A<span class="sym">(</span>i<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,</span> j<span class="sym">:</span> <span class="kwb">int</span><span class="sym">):</span> <span class="kwb">double</span> <span class="sym">=</span>
  <span class="sym">{</span>
    <span class="kwa">return</span> <span class="num">1.0</span> <span class="sym">/ ((</span>i <span class="sym">+</span> j<span class="sym">) * (</span> i <span class="sym">+</span> j <span class="sym">+</span> <span class="num">1.0</span><span class="sym">) /</span> <span class="num">2.0</span> <span class="sym">+</span> i <span class="sym">+</span> <span class="num">1.0</span><span class="sym">)</span>
  <span class="sym">}</span>

  <span class="kwa">def</span> mulAv<span class="sym">(</span>n<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,</span> v<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwb">double</span><span class="sym">],</span> av<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwb">double</span><span class="sym">]):</span> unit <span class="sym">=</span>
  <span class="sym">{</span>
    <span class="kwa">var</span> i<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="num">0</span>

    <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> n<span class="sym">)</span>
    <span class="sym">{</span>
      <span class="kwa">var</span> j<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="num">0</span> <span class="sym">;</span> av<span class="sym">(</span>i<span class="sym">) =</span> <span class="num">0.0</span>

      <span class="kwa">while</span> <span class="sym">(</span>j <span class="sym">&lt;</span> n<span class="sym">)</span>
      <span class="sym">{</span>
        av<span class="sym">(</span>i<span class="sym">) =</span> av<span class="sym">(</span>i<span class="sym">) +</span> A<span class="sym">(</span>i<span class="sym">,</span> j<span class="sym">) *</span> v<span class="sym">(</span>j<span class="sym">) ;</span> j <span class="sym">=</span> j <span class="sym">+</span> <span class="num">1</span>
      <span class="sym">}</span>

      i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span>
    <span class="sym">}</span>
  <span class="sym">}</span>

  <span class="kwa">def</span> mulAtV<span class="sym">(</span>n<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,</span> v<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwb">double</span><span class="sym">],</span> atv<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwb">double</span><span class="sym">]):</span> unit <span class="sym">=</span>
  <span class="sym">{</span>
    <span class="kwa">var</span> i<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="num">0</span>

    <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> n<span class="sym">)</span>
    <span class="sym">{</span>
      <span class="kwa">var</span> j<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="num">0</span> <span class="sym">;</span> atv<span class="sym">(</span>i<span class="sym">) =</span> <span class="num">0.0</span>

      <span class="kwa">while</span> <span class="sym">(</span>j <span class="sym">&lt;</span> n<span class="sym">)</span>
      <span class="sym">{</span>
        atv<span class="sym">(</span>i<span class="sym">) =</span> atv<span class="sym">(</span>i<span class="sym">) +</span> A<span class="sym">(</span>j<span class="sym">,</span> i<span class="sym">) *</span> v<span class="sym">(</span>j<span class="sym">) ;</span> j <span class="sym">=</span> j <span class="sym">+</span> <span class="num">1</span>
      <span class="sym">}</span>

      i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span>
    <span class="sym">}</span>
  <span class="sym">}</span>

  <span class="kwa">def</span> mulAtAv<span class="sym">(</span>n<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,</span> v<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwb">double</span><span class="sym">],</span> atav<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwb">double</span><span class="sym">]):</span> unit <span class="sym">=</span>
  <span class="sym">{</span>
    <span class="kwa">val</span> u<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwb">double</span><span class="sym">] =</span> <span class="kwa">new</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwb">double</span><span class="sym">](</span>n<span class="sym">)</span>
    mulAv<span class="sym">(</span>n<span class="sym">,</span> v<span class="sym">,</span> u<span class="sym">) ;</span> mulAtV<span class="sym">(</span>n<span class="sym">,</span> u<span class="sym">,</span> atav<span class="sym">)</span>
  <span class="sym">}</span>
<span class="sym">}</span>

