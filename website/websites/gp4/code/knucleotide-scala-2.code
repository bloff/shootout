<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Isaac Gouy</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> java<span class="hl sym">.</span>io<span class="hl sym">.</span>_
<span class="hl kwa">import</span> scala<span class="hl sym">.</span>collection<span class="hl sym">.</span>mutable<span class="hl sym">.</span><span class="hl kwc">HashMap</span>
<span class="hl kwa">import</span> scala<span class="hl sym">.</span>Console

<span class="hl kwa">object</span> knucleotide <span class="hl sym">{</span>

   <span class="hl kwa">var</span> sequence<span class="hl sym">:</span> <span class="hl kwc">String</span> <span class="hl sym">=</span> _

   <span class="hl kwa">def</span> main<span class="hl sym">(</span>args<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">String</span><span class="hl sym">]) = {</span>
      <span class="hl kwa">val</span> r <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">BufferedReader</span><span class="hl sym">(</span><span class="hl kwa">new</span> <span class="hl kwc">InputStreamReader</span><span class="hl sym">(</span><span class="hl kwc">System</span><span class="hl sym">.</span>in<span class="hl sym">))</span>
      findSequence<span class="hl sym">(</span><span class="hl str">&quot;&gt;THREE&quot;</span><span class="hl sym">,</span> r<span class="hl sym">)</span>
      sequence <span class="hl sym">=</span> nextSequence<span class="hl sym">(</span>r<span class="hl sym">)</span>
      r<span class="hl sym">.</span>close

      writeFrequencies<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>
      writeFrequencies<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">)</span>

      writeCount<span class="hl sym">(</span><span class="hl str">&quot;GGT&quot;</span><span class="hl sym">)</span>
      writeCount<span class="hl sym">(</span><span class="hl str">&quot;GGTA&quot;</span><span class="hl sym">)</span>
      writeCount<span class="hl sym">(</span><span class="hl str">&quot;GGTATT&quot;</span><span class="hl sym">)</span>
      writeCount<span class="hl sym">(</span><span class="hl str">&quot;GGTATTTTAATT&quot;</span><span class="hl sym">)</span>
      writeCount<span class="hl sym">(</span><span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl sym">)</span>
   <span class="hl sym">}</span>



   <span class="hl kwa">def</span> findSequence<span class="hl sym">(</span>id<span class="hl sym">:</span> <span class="hl kwc">String</span><span class="hl sym">,</span> r<span class="hl sym">:</span> <span class="hl kwc">BufferedReader</span><span class="hl sym">):</span> Unit <span class="hl sym">= {</span>
      <span class="hl kwa">var</span> line <span class="hl sym">=</span> r<span class="hl sym">.</span>readLine
      <span class="hl kwa">while</span> <span class="hl sym">(</span>line <span class="hl sym">!=</span> null<span class="hl sym">) {</span>
         <span class="hl kwa">val</span> c <span class="hl sym">=</span> line<span class="hl sym">.</span>charAt<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>c <span class="hl sym">==</span> <span class="hl str">'&gt;'</span> <span class="hl sym">&amp;&amp;</span> line<span class="hl sym">.</span>startsWith<span class="hl sym">(</span>id<span class="hl sym">))</span> <span class="hl kwa">return</span>
         line <span class="hl sym">=</span> r<span class="hl sym">.</span>readLine
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>


   <span class="hl kwa">def</span> nextSequence<span class="hl sym">(</span>r<span class="hl sym">:</span> <span class="hl kwc">BufferedReader</span><span class="hl sym">):</span> <span class="hl kwc">String</span> <span class="hl sym">= {</span>
      <span class="hl kwa">val</span> b <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">StringBuffer</span><span class="hl sym">()</span>

      <span class="hl kwa">var</span> line <span class="hl sym">=</span> r<span class="hl sym">.</span>readLine
      <span class="hl kwa">while</span> <span class="hl sym">(</span>line <span class="hl sym">!=</span> null<span class="hl sym">) {</span>
         <span class="hl kwa">val</span> c <span class="hl sym">=</span> line<span class="hl sym">.</span>charAt<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>c <span class="hl sym">==</span> <span class="hl str">'&gt;'</span><span class="hl sym">) {</span>
            <span class="hl kwa">return</span> b<span class="hl sym">.</span>toString
         <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>c <span class="hl sym">!=</span> <span class="hl str">';'</span><span class="hl sym">)</span> b<span class="hl sym">.</span>append<span class="hl sym">(</span>line<span class="hl sym">.</span>toUpperCase<span class="hl sym">)</span>
         <span class="hl sym">}</span>
         line <span class="hl sym">=</span> r<span class="hl sym">.</span>readLine
      <span class="hl sym">}</span>
      b<span class="hl sym">.</span>toString
   <span class="hl sym">}</span>


   <span class="hl kwa">class</span> Counter<span class="hl sym">(</span>_value<span class="hl sym">:</span> <span class="hl kwb">int</span><span class="hl sym">){</span>
      <span class="hl kwa">var</span> value <span class="hl sym">=</span> _value
      <span class="hl kwa">def</span> <span class="hl sym">++() = {</span> value <span class="hl sym">=</span> value <span class="hl sym">+</span> <span class="hl num">1</span> <span class="hl sym">}</span>
   <span class="hl sym">}</span>


   <span class="hl kwa">def</span> generateFrequencies<span class="hl sym">(</span>length<span class="hl sym">:</span> <span class="hl kwb">int</span><span class="hl sym">) = {</span>
      <span class="hl kwa">val</span> d<span class="hl sym">:</span> <span class="hl kwc">HashMap</span><span class="hl sym">[</span><span class="hl kwc">String</span><span class="hl sym">,</span>Counter<span class="hl sym">] =</span> <span class="hl kwa">new</span> <span class="hl kwc">HashMap</span><span class="hl sym">()</span>

      <span class="hl kwa">def</span> kFrequency<span class="hl sym">(</span>offset<span class="hl sym">:</span> <span class="hl kwb">int</span><span class="hl sym">,</span> j<span class="hl sym">:</span> <span class="hl kwb">int</span><span class="hl sym">) = {</span>
         <span class="hl kwa">val</span> n <span class="hl sym">=</span> sequence<span class="hl sym">.</span>length <span class="hl sym">-</span> j <span class="hl sym">+</span> <span class="hl num">1</span>
         <span class="hl kwa">var</span> i <span class="hl sym">=</span> offset
         <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> n<span class="hl sym">){</span>
            <span class="hl kwa">val</span> k <span class="hl sym">=</span> sequence<span class="hl sym">.</span>substring<span class="hl sym">(</span>i<span class="hl sym">,</span>i<span class="hl sym">+</span>j<span class="hl sym">)</span>
            d<span class="hl sym">.</span>get<span class="hl sym">(</span>k<span class="hl sym">)</span> match <span class="hl sym">{</span>
               <span class="hl kwa">case</span> None <span class="hl sym">=&gt;</span> d <span class="hl sym">+=</span> k <span class="hl sym">-&gt;</span> <span class="hl kwa">new</span> Counter<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>
               <span class="hl kwa">case</span> Some<span class="hl sym">(</span>c<span class="hl sym">) =&gt;</span> c<span class="hl sym">++</span>
            <span class="hl sym">}</span>
            i <span class="hl sym">=</span> i <span class="hl sym">+</span> j
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">val</span> o <span class="hl sym">&lt;-</span> <span class="hl kwc">Iterator</span><span class="hl sym">.</span>range<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span>length<span class="hl sym">))</span> kFrequency<span class="hl sym">(</span>o<span class="hl sym">,</span>length<span class="hl sym">)</span>
      d
   <span class="hl sym">}</span>


   <span class="hl kwa">def</span> writeFrequencies<span class="hl sym">(</span>j<span class="hl sym">:</span> <span class="hl kwb">int</span><span class="hl sym">) = {</span>
      <span class="hl kwa">val</span> d <span class="hl sym">=</span> generateFrequencies<span class="hl sym">(</span>j<span class="hl sym">)</span>
      <span class="hl kwa">val</span> n <span class="hl sym">=</span> sequence<span class="hl sym">.</span>length <span class="hl sym">-</span> j <span class="hl sym">+</span> <span class="hl num">1.0</span>
      <span class="hl kwa">val</span> sortedValues <span class="hl sym">=</span> d<span class="hl sym">.</span>toList<span class="hl sym">.</span>sort<span class="hl sym">(</span>
         <span class="hl sym">(</span>a<span class="hl sym">,</span>b<span class="hl sym">) =&gt;</span> <span class="hl kwa">if</span> <span class="hl sym">(</span>a<span class="hl sym">.</span>_2<span class="hl sym">.</span>value <span class="hl sym">==</span> b<span class="hl sym">.</span>_2<span class="hl sym">.</span>value<span class="hl sym">)</span> a<span class="hl sym">.</span>_1 <span class="hl sym">&gt;</span> b<span class="hl sym">.</span>_1
                  <span class="hl kwa">else</span> a<span class="hl sym">.</span>_2<span class="hl sym">.</span>value <span class="hl sym">&gt;</span> b<span class="hl sym">.</span>_2<span class="hl sym">.</span>value <span class="hl sym">)</span>

      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">val</span> a <span class="hl sym">&lt;-</span> sortedValues<span class="hl sym">)</span>
         Console<span class="hl sym">.</span>printf<span class="hl sym">(</span><span class="hl str">&quot;{0} {1,number,0.000}</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> a<span class="hl sym">.</span>_1<span class="hl sym">,</span> a<span class="hl sym">.</span>_2<span class="hl sym">.</span>value <span class="hl sym">/</span> n <span class="hl sym">*</span> <span class="hl num">100.0</span><span class="hl sym">)</span>

      Console<span class="hl sym">.</span>println
   <span class="hl sym">}</span>


   <span class="hl kwa">def</span> writeCount<span class="hl sym">(</span>fragment<span class="hl sym">:</span> <span class="hl kwc">String</span><span class="hl sym">) = {</span>
      <span class="hl kwa">val</span> d <span class="hl sym">=</span> generateFrequencies<span class="hl sym">(</span>fragment<span class="hl sym">.</span>length<span class="hl sym">)</span>
      <span class="hl kwa">val</span> count <span class="hl sym">=</span> <span class="hl kwa">if</span> <span class="hl sym">(</span>d<span class="hl sym">.</span>contains<span class="hl sym">(</span>fragment<span class="hl sym">))</span> d<span class="hl sym">(</span>fragment<span class="hl sym">).</span>value <span class="hl kwa">else</span> <span class="hl num">0</span>
      Console<span class="hl sym">.</span>println<span class="hl sym">(</span>count <span class="hl sym">+</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">&quot;</span> <span class="hl sym">+</span> fragment<span class="hl sym">)</span>
   <span class="hl sym">}</span>

<span class="hl sym">}</span>
