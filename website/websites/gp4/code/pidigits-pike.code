<span class="slc">// The Great Computer Language Shootout</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>
<span class="slc">//</span>
<span class="slc">// contributed by Marcus Comstedt</span>

<span class="kwb">int</span> k <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
<span class="kwb">array</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">)</span> z <span class="sym">= ({</span> <span class="num">1</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">1</span> <span class="sym">});</span>

<span class="kwb">array</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">)</span> <span class="kwd">compose</span><span class="sym">(</span><span class="kwb">array</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">)</span> a<span class="sym">,</span> <span class="kwb">array</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">)</span> b<span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwd">return</span> <span class="sym">({</span> a<span class="sym">[</span><span class="num">0</span><span class="sym">]*</span>b<span class="sym">[</span><span class="num">0</span><span class="sym">],</span> a<span class="sym">[</span><span class="num">0</span><span class="sym">]*</span>b<span class="sym">[</span><span class="num">1</span><span class="sym">]+</span>a<span class="sym">[</span><span class="num">1</span><span class="sym">]*</span>b<span class="sym">[</span><span class="num">3</span><span class="sym">],</span>
	    a<span class="sym">[</span><span class="num">2</span><span class="sym">]*</span>b<span class="sym">[</span><span class="num">0</span><span class="sym">]+</span>a<span class="sym">[</span><span class="num">3</span><span class="sym">]*</span>b<span class="sym">[</span><span class="num">2</span><span class="sym">],</span> a<span class="sym">[</span><span class="num">2</span><span class="sym">]*</span>b<span class="sym">[</span><span class="num">1</span><span class="sym">]+</span>a<span class="sym">[</span><span class="num">3</span><span class="sym">]*</span>b<span class="sym">[</span><span class="num">3</span><span class="sym">] });</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">extract</span><span class="sym">(</span><span class="kwb">array</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">)</span> a<span class="sym">,</span> <span class="kwb">int</span> j<span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwd">return</span> <span class="sym">(</span>a<span class="sym">[</span><span class="num">0</span><span class="sym">]*</span>j<span class="sym">+</span>a<span class="sym">[</span><span class="num">1</span><span class="sym">]) / (</span>a<span class="sym">[</span><span class="num">2</span><span class="sym">]*</span>j<span class="sym">+</span>a<span class="sym">[</span><span class="num">3</span><span class="sym">]);</span>
<span class="sym">}</span>

<span class="kwb">array</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">)</span> <span class="kwd">pi_digits</span><span class="sym">(</span><span class="kwb">int</span> c<span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwb">array</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">)</span> r <span class="sym">=</span> <span class="kwa">allocate</span><span class="sym">(</span>c<span class="sym">);</span>
  <span class="kwd">for</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>c<span class="sym">;</span> i<span class="sym">++) {</span>
    <span class="kwb">int</span> y<span class="sym">;</span>
    <span class="kwd">while</span><span class="sym">((</span>y <span class="sym">=</span> <span class="kwd">extract</span><span class="sym">(</span>z<span class="sym">,</span> <span class="num">3</span><span class="sym">)) !=</span> <span class="kwd">extract</span><span class="sym">(</span>z<span class="sym">,</span> <span class="num">4</span><span class="sym">)) {</span>
      <span class="sym">++</span>k<span class="sym">;</span>
      z <span class="sym">=</span> <span class="kwd">compose</span><span class="sym">(</span>z<span class="sym">, ({</span>k<span class="sym">,</span> <span class="num">4</span><span class="sym">*</span>k<span class="sym">+</span><span class="num">2</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">2</span><span class="sym">*</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">}));</span>
    <span class="sym">}</span>
    z <span class="sym">=</span> <span class="kwd">compose</span><span class="sym">(({</span><span class="num">10</span><span class="sym">, -</span><span class="num">10</span><span class="sym">*</span>y<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">1</span><span class="sym">}),</span> z<span class="sym">);</span>
    r<span class="sym">[</span>i<span class="sym">] =</span> y<span class="sym">;</span>
  <span class="sym">}</span>
  return r<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">array</span><span class="sym">(</span><span class="kwb">string</span><span class="sym">)</span> argv<span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwb">int</span> i<span class="sym">,</span> n <span class="sym">= (</span><span class="kwb">int</span><span class="sym">)</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">];</span>
  <span class="kwd">for</span><span class="sym">(</span>i<span class="sym">=</span><span class="num">10</span><span class="sym">;</span> i <span class="sym">&lt;=</span> n<span class="sym">;</span> i<span class="sym">+=</span><span class="num">10</span><span class="sym">)</span>
    <span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;%&#64;d</span><span class="esc">\t</span><span class="str">:%d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwd">pi_digits</span><span class="sym">(</span><span class="num">10</span><span class="sym">),</span> i<span class="sym">);</span>
  <span class="kwd">if</span><span class="sym">((</span>i<span class="sym">-=</span><span class="num">10</span><span class="sym">) &lt;</span> n<span class="sym">)</span>
    <span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;%-10{%d%}</span><span class="esc">\t</span><span class="str">:%d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwd">pi_digits</span><span class="sym">(</span>n<span class="sym">-</span>i<span class="sym">)/</span><span class="num">1</span><span class="sym">,</span> n<span class="sym">);</span>
  return <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>
