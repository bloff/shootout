<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by - Michael Snoyman (D novice)</span>
<span class="hl com">*/</span>
<span class="hl kwa">import</span> std<span class="hl sym">.</span>stdio<span class="hl sym">;</span>

<span class="hl kwa">enum</span> <span class="hl sym">{</span> E<span class="hl sym">,</span> SE<span class="hl sym">,</span> SW<span class="hl sym">,</span> W<span class="hl sym">,</span> NW<span class="hl sym">,</span> NE <span class="hl sym">}</span>
<span class="hl kwa">const uint</span> CellsPerRow <span class="hl sym">=</span> <span class="hl num">5</span><span class="hl sym">;</span>
<span class="hl kwa">const uint</span> RowsPerBoard <span class="hl sym">=</span> <span class="hl num">10</span><span class="hl sym">;</span>
<span class="hl kwa">const uint</span> CellsPerBoard <span class="hl sym">=</span> CellsPerRow <span class="hl sym">*</span> RowsPerBoard<span class="hl sym">;</span>
<span class="hl kwa">const uint</span> PermutationCount <span class="hl sym">=</span> <span class="hl num">12</span><span class="hl sym">;</span>
<span class="hl kwa">const uint</span> CellsPerPiece <span class="hl sym">=</span> <span class="hl num">5</span><span class="hl sym">;</span>

<span class="hl kwa">class</span> result_t <span class="hl sym">{</span>
   <span class="hl kwa">ubyte</span><span class="hl sym">[</span><span class="hl num">50</span><span class="hl sym">]</span> numbers<span class="hl sym">;</span>

   <span class="hl kwa">void</span> <span class="hl kwd">write</span><span class="hl sym">() {</span>
      <span class="hl kwa">foreach</span><span class="hl sym">(</span>i<span class="hl sym">,</span> n<span class="hl sym">;</span> numbers<span class="hl sym">) {</span>
         <span class="hl kwa">if</span><span class="hl sym">((</span>i <span class="hl sym">%</span> <span class="hl num">10</span><span class="hl sym">) ==</span> <span class="hl num">5</span><span class="hl sym">)</span> <span class="hl slc">// beginning of odd row</span>
            <span class="hl kwd">writef</span><span class="hl sym">(</span><span class="hl str">&quot; &quot;</span><span class="hl sym">);</span>
         <span class="hl kwa">assert</span><span class="hl sym">(</span>n <span class="hl sym">&lt;</span> <span class="hl num">10</span><span class="hl sym">);</span>
         <span class="hl kwd">writef</span><span class="hl sym">(</span><span class="hl str">&quot;%d &quot;</span><span class="hl sym">,</span> n<span class="hl sym">);</span>
         <span class="hl kwa">if</span><span class="hl sym">((</span>i <span class="hl sym">%</span> <span class="hl num">5</span><span class="hl sym">) ==</span> <span class="hl num">4</span><span class="hl sym">)</span> <span class="hl slc">// end of row</span>
            <span class="hl kwd">writefln</span><span class="hl sym">(</span><span class="hl str">&quot;&quot;</span><span class="hl sym">);</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   <span class="hl slc">/// fill the values from a solved board</span>
   <span class="hl kwa">void</span> <span class="hl kwd">fill</span><span class="hl sym">(</span>Board b<span class="hl sym">)</span>
   <span class="hl kwa">in</span> <span class="hl sym">{</span>
      <span class="hl kwa">foreach</span><span class="hl sym">(</span>cell<span class="hl sym">;</span> b<span class="hl sym">.</span>cells<span class="hl sym">)</span>
         <span class="hl kwa">assert</span><span class="hl sym">(!(</span>cell<span class="hl sym">.</span>pieceCell <span class="hl kwa">is null</span><span class="hl sym">));</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">out</span> <span class="hl sym">{</span>
      <span class="hl kwa">int</span> nums<span class="hl sym">[</span><span class="hl num">10</span><span class="hl sym">];</span>
      <span class="hl kwa">foreach</span><span class="hl sym">(</span>n<span class="hl sym">;</span> numbers<span class="hl sym">) {</span>
         <span class="hl kwa">assert</span><span class="hl sym">(</span>n <span class="hl sym">&lt;</span> <span class="hl num">10</span><span class="hl sym">);</span>
         <span class="hl sym">++</span>nums<span class="hl sym">[</span>n<span class="hl sym">];</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">foreach</span><span class="hl sym">(</span>i<span class="hl sym">,</span> num<span class="hl sym">;</span> nums<span class="hl sym">)</span>
         <span class="hl kwa">assert</span><span class="hl sym">(</span>num <span class="hl sym">==</span> <span class="hl num">5</span><span class="hl sym">);</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">body</span> <span class="hl sym">{</span>
      <span class="hl kwa">foreach</span><span class="hl sym">(</span>n<span class="hl sym">,</span> cell<span class="hl sym">;</span> b<span class="hl sym">.</span>cells<span class="hl sym">)</span>
         numbers<span class="hl sym">[</span>n<span class="hl sym">] =</span> cell<span class="hl sym">.</span>pieceCell<span class="hl sym">.</span>number<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">int</span> <span class="hl kwd">opCmp</span><span class="hl sym">(</span>Board rhs<span class="hl sym">) {</span>
      <span class="hl kwa">foreach</span><span class="hl sym">(</span>index<span class="hl sym">,</span> number<span class="hl sym">;</span> numbers<span class="hl sym">) {</span>
         <span class="hl kwa">int</span> rnumber <span class="hl sym">=</span> rhs<span class="hl sym">.</span>cells<span class="hl sym">[</span>index<span class="hl sym">].</span>pieceCell<span class="hl sym">.</span>number<span class="hl sym">;</span>
         <span class="hl kwa">assert</span><span class="hl sym">(</span>number <span class="hl sym">&lt;</span> <span class="hl num">10</span> <span class="hl sym">&amp;&amp;</span> rnumber <span class="hl sym">&lt;</span> <span class="hl num">10</span><span class="hl sym">);</span>
         <span class="hl kwa">if</span><span class="hl sym">(</span>number <span class="hl sym">&lt;</span> rnumber<span class="hl sym">)</span>
            <span class="hl kwa">return</span> <span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">;</span>
         <span class="hl kwa">else if</span><span class="hl sym">(</span>number <span class="hl sym">&gt;</span> rnumber<span class="hl sym">)</span>
            <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">ubyte</span> <span class="hl kwd">opIndex</span><span class="hl sym">(</span>size_t index<span class="hl sym">)</span>
   <span class="hl kwa">in</span> <span class="hl sym">{</span>
      <span class="hl kwa">assert</span><span class="hl sym">(</span>index <span class="hl sym">&lt;</span> <span class="hl num">50</span><span class="hl sym">);</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">out</span><span class="hl sym">(</span>result<span class="hl sym">) {</span>
      <span class="hl kwa">assert</span><span class="hl sym">(</span>result <span class="hl sym">&lt;</span> <span class="hl num">10</span><span class="hl sym">);</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">body</span> <span class="hl sym">{</span>
      <span class="hl kwa">return</span> numbers<span class="hl sym">[</span>index<span class="hl sym">];</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">ubyte</span> <span class="hl kwd">opIndexAssign</span><span class="hl sym">(</span><span class="hl kwa">ubyte</span> n<span class="hl sym">,</span> size_t index<span class="hl sym">)</span>
   <span class="hl kwa">in</span> <span class="hl sym">{</span>
      <span class="hl kwa">assert</span><span class="hl sym">(</span>index <span class="hl sym">&lt;</span> <span class="hl num">50</span><span class="hl sym">);</span>
      <span class="hl kwa">assert</span><span class="hl sym">(</span>n <span class="hl sym">&lt;</span> <span class="hl num">10</span><span class="hl sym">);</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">body</span> <span class="hl sym">{</span>
      <span class="hl kwa">return</span> numbers<span class="hl sym">[</span>index<span class="hl sym">] =</span> n<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">invariant</span> <span class="hl sym">{</span>
      <span class="hl kwa">foreach</span><span class="hl sym">(</span>number<span class="hl sym">;</span> numbers<span class="hl sym">)</span>
         <span class="hl kwa">assert</span><span class="hl sym">(</span>number <span class="hl sym">&lt;</span> <span class="hl num">10</span><span class="hl sym">);</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwa">class</span> PieceCell <span class="hl sym">{</span>
   PieceConfig pieceConfig<span class="hl sym">;</span>
   PieceCell<span class="hl sym">[</span><span class="hl num">6</span><span class="hl sym">]</span> around<span class="hl sym">;</span>
   BoardCell place<span class="hl sym">;</span>
   <span class="hl kwa">int</span> index<span class="hl sym">;</span> <span class="hl slc">//FIXME</span>

   <span class="hl kwa">this</span><span class="hl sym">(</span>PieceConfig p<span class="hl sym">,</span> <span class="hl kwa">int</span> index<span class="hl sym">) {</span>
      pieceConfig <span class="hl sym">=</span> p<span class="hl sym">;</span>
      <span class="hl kwa">this</span><span class="hl sym">.</span>index <span class="hl sym">=</span> index<span class="hl sym">;</span>
   <span class="hl sym">}</span>
   bool <span class="hl kwd">placed</span><span class="hl sym">() {</span> <span class="hl kwa">return</span> <span class="hl sym">!(</span>place <span class="hl kwa">is null</span><span class="hl sym">); }</span>
   <span class="hl kwa">void</span> <span class="hl kwd">placed</span><span class="hl sym">(</span>bool b<span class="hl sym">)</span>
   <span class="hl kwa">in</span> <span class="hl sym">{</span>
      <span class="hl kwa">assert</span><span class="hl sym">(!</span>b<span class="hl sym">);</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">out</span> <span class="hl sym">{</span>
      <span class="hl kwa">assert</span><span class="hl sym">(</span>b <span class="hl sym">==</span> placed<span class="hl sym">);</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">body</span> <span class="hl sym">{</span>
      <span class="hl kwa">if</span><span class="hl sym">(!(</span>place <span class="hl kwa">is null</span><span class="hl sym">)) {</span>
         place<span class="hl sym">.</span>pieceCell <span class="hl sym">=</span> <span class="hl kwa">null</span><span class="hl sym">;</span>
         place <span class="hl sym">=</span> <span class="hl kwa">null</span><span class="hl sym">;</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">int</span> <span class="hl kwd">number</span><span class="hl sym">() {</span>
      <span class="hl kwa">return</span> pieceConfig<span class="hl sym">.</span>piece<span class="hl sym">.</span>number<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">void</span> <span class="hl kwd">flip</span><span class="hl sym">() {</span>
      PieceCell tmp <span class="hl sym">=</span> around<span class="hl sym">[</span>NE<span class="hl sym">];</span>
      around<span class="hl sym">[</span>NE<span class="hl sym">] =</span> around<span class="hl sym">[</span>NW<span class="hl sym">];</span>
      around<span class="hl sym">[</span>NW<span class="hl sym">] =</span> tmp<span class="hl sym">;</span>

      tmp <span class="hl sym">=</span> around<span class="hl sym">[</span>SE<span class="hl sym">];</span>
      around<span class="hl sym">[</span>SE<span class="hl sym">] =</span> around<span class="hl sym">[</span>SW<span class="hl sym">];</span>
      around<span class="hl sym">[</span>SW<span class="hl sym">] =</span> tmp<span class="hl sym">;</span>

      tmp <span class="hl sym">=</span> around<span class="hl sym">[</span>E<span class="hl sym">];</span>
      around<span class="hl sym">[</span>E<span class="hl sym">] =</span> around<span class="hl sym">[</span>W<span class="hl sym">];</span>
      around<span class="hl sym">[</span>W<span class="hl sym">] =</span> tmp<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">void</span> <span class="hl kwd">rotate</span><span class="hl sym">() {</span>
      PieceCell tmp <span class="hl sym">=</span> around<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
      <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwa">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">5</span><span class="hl sym">; ++</span>i<span class="hl sym">)</span>
         around<span class="hl sym">[</span>i<span class="hl sym">] =</span> around<span class="hl sym">[</span>i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">];</span>
      around<span class="hl sym">[</span><span class="hl num">5</span><span class="hl sym">] =</span> tmp<span class="hl sym">;</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwa">class</span> PieceConfig <span class="hl sym">{</span>
   PieceCell<span class="hl sym">[</span>CellsPerPiece<span class="hl sym">]</span> cells<span class="hl sym">;</span>
   Piece piece<span class="hl sym">;</span>
   <span class="hl kwa">int</span> permIndex<span class="hl sym">;</span> <span class="hl slc">/// which permuation this is</span>

   <span class="hl kwa">this</span><span class="hl sym">(</span>Piece piece<span class="hl sym">,</span> <span class="hl kwa">int</span> permIndex<span class="hl sym">) {</span>
      <span class="hl kwa">this</span><span class="hl sym">.</span>piece <span class="hl sym">=</span> piece<span class="hl sym">;</span>
      <span class="hl kwa">this</span><span class="hl sym">.</span>permIndex <span class="hl sym">=</span> permIndex<span class="hl sym">;</span>

      <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwa">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> CellsPerPiece<span class="hl sym">; ++</span>i<span class="hl sym">)</span>
         cells<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">PieceCell</span><span class="hl sym">(</span><span class="hl kwa">this</span><span class="hl sym">,</span> i<span class="hl sym">);</span>
      <span class="hl kwd">loadConfig</span><span class="hl sym">(</span>piece<span class="hl sym">.</span>number<span class="hl sym">);</span>
      <span class="hl kwa">if</span><span class="hl sym">(</span>permIndex <span class="hl sym">&gt;=</span> PermutationCount<span class="hl sym">/</span><span class="hl num">2</span><span class="hl sym">)</span>
         <span class="hl kwd">flip</span><span class="hl sym">();</span>
      <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwa">int</span> i <span class="hl sym">=</span> permIndex<span class="hl sym">%(</span>PermutationCount<span class="hl sym">/</span><span class="hl num">2</span><span class="hl sym">);</span> i<span class="hl sym">; --</span>i<span class="hl sym">)</span>
         <span class="hl kwd">rotate</span><span class="hl sym">();</span>
   <span class="hl sym">}</span>

   bool <span class="hl kwd">placed</span><span class="hl sym">()</span>
   <span class="hl kwa">out</span><span class="hl sym">(</span>result<span class="hl sym">) {</span>
      <span class="hl kwa">foreach</span><span class="hl sym">(</span>cell<span class="hl sym">;</span> cells<span class="hl sym">)</span>
         <span class="hl kwa">assert</span><span class="hl sym">(</span>cell<span class="hl sym">.</span>placed <span class="hl sym">==</span> result<span class="hl sym">);</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">body</span> <span class="hl sym">{</span>
      <span class="hl kwa">return</span> cells<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">].</span>placed<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">void</span> <span class="hl kwd">placed</span><span class="hl sym">(</span>bool b<span class="hl sym">) {</span>
      <span class="hl kwa">foreach</span><span class="hl sym">(</span>cell<span class="hl sym">;</span> cells<span class="hl sym">)</span>
         cell<span class="hl sym">.</span>placed <span class="hl sym">=</span> b<span class="hl sym">;</span>
   <span class="hl sym">}</span>

<span class="hl kwa">private</span><span class="hl sym">:</span>
   <span class="hl slc">/// load the basic configuration for the given piece number</span>
   <span class="hl kwa">void</span> <span class="hl kwd">loadConfig</span><span class="hl sym">(</span><span class="hl kwa">int</span> number<span class="hl sym">)</span>
   <span class="hl kwa">in</span> <span class="hl sym">{</span>
      <span class="hl kwa">assert</span><span class="hl sym">(</span>number <span class="hl sym">&lt;</span> <span class="hl num">10</span><span class="hl sym">);</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">body</span> <span class="hl sym">{</span>
      <span class="hl kwa">switch</span><span class="hl sym">(</span>number<span class="hl sym">) {</span>
      <span class="hl kwa">case</span> <span class="hl num">0</span><span class="hl sym">:</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> E<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">);</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> E<span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">);</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">,</span> E<span class="hl sym">,</span> <span class="hl num">3</span><span class="hl sym">);</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">,</span> SE<span class="hl sym">,</span> <span class="hl num">4</span><span class="hl sym">);</span>
         <span class="hl kwa">break</span><span class="hl sym">;</span>
      <span class="hl kwa">case</span> <span class="hl num">1</span><span class="hl sym">:</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> SE<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">);</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> SW<span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">);</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">,</span> W<span class="hl sym">,</span> <span class="hl num">3</span><span class="hl sym">);</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">,</span> SW<span class="hl sym">,</span> <span class="hl num">4</span><span class="hl sym">);</span>
         <span class="hl kwa">break</span><span class="hl sym">;</span>
      <span class="hl kwa">case</span> <span class="hl num">2</span><span class="hl sym">:</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> W<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">);</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> W<span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">);</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">,</span> SW<span class="hl sym">,</span> <span class="hl num">3</span><span class="hl sym">);</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">,</span> SE<span class="hl sym">,</span> <span class="hl num">4</span><span class="hl sym">);</span>
         <span class="hl kwa">break</span><span class="hl sym">;</span>
      <span class="hl kwa">case</span> <span class="hl num">3</span><span class="hl sym">:</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> E<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">);</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> E<span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">);</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> SE<span class="hl sym">,</span> <span class="hl num">3</span><span class="hl sym">);</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">,</span> SW<span class="hl sym">,</span> <span class="hl num">3</span><span class="hl sym">);</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">,</span> SE<span class="hl sym">,</span> <span class="hl num">4</span><span class="hl sym">);</span>
         <span class="hl kwa">break</span><span class="hl sym">;</span>
      <span class="hl kwa">case</span> <span class="hl num">4</span><span class="hl sym">:</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> SE<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">);</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> SW<span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">);</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> E<span class="hl sym">,</span> <span class="hl num">3</span><span class="hl sym">);</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">,</span> SE<span class="hl sym">,</span> <span class="hl num">4</span><span class="hl sym">);</span>
         <span class="hl kwa">break</span><span class="hl sym">;</span>
      <span class="hl kwa">case</span> <span class="hl num">5</span><span class="hl sym">:</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> W<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">);</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> SW<span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">);</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> SE<span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">);</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> SW<span class="hl sym">,</span> <span class="hl num">3</span><span class="hl sym">);</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">,</span> W<span class="hl sym">,</span> <span class="hl num">3</span><span class="hl sym">);</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">,</span> W<span class="hl sym">,</span> <span class="hl num">4</span><span class="hl sym">);</span>
         <span class="hl kwa">break</span><span class="hl sym">;</span>
      <span class="hl kwa">case</span> <span class="hl num">6</span><span class="hl sym">:</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> E<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">);</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> SE<span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">);</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> SW<span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">);</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">,</span> SW<span class="hl sym">,</span> <span class="hl num">3</span><span class="hl sym">);</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">,</span> SE<span class="hl sym">,</span> <span class="hl num">4</span><span class="hl sym">);</span>
         <span class="hl kwa">break</span><span class="hl sym">;</span>
      <span class="hl kwa">case</span> <span class="hl num">7</span><span class="hl sym">:</span>
      <span class="hl com">/*</span>
<span class="hl com">         connect(0, SW, 1);</span>
<span class="hl com">         connect(1, W, 2);</span>
<span class="hl com">         connect(2, W, 3);</span>
<span class="hl com">         connect(2, NW, 4);</span>
<span class="hl com">         connect(3, NE, 4);</span>
<span class="hl com">      */</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> SW<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">);</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> SE<span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">);</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> E<span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">);</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">,</span> E<span class="hl sym">,</span> <span class="hl num">3</span><span class="hl sym">);</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">,</span> NE<span class="hl sym">,</span> <span class="hl num">4</span><span class="hl sym">);</span>
         <span class="hl kwa">break</span><span class="hl sym">;</span>
      <span class="hl kwa">case</span> <span class="hl num">8</span><span class="hl sym">:</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> SE<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">);</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> SE<span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">);</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">,</span> E<span class="hl sym">,</span> <span class="hl num">3</span><span class="hl sym">);</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">,</span> SE<span class="hl sym">,</span> <span class="hl num">4</span><span class="hl sym">);</span>
         <span class="hl kwa">break</span><span class="hl sym">;</span>
      <span class="hl kwa">case</span> <span class="hl num">9</span><span class="hl sym">:</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> SE<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">);</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> SE<span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">);</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">,</span> SE<span class="hl sym">,</span> <span class="hl num">3</span><span class="hl sym">);</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">,</span> SW<span class="hl sym">,</span> <span class="hl num">4</span><span class="hl sym">);</span>
         <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">,</span> W<span class="hl sym">,</span> <span class="hl num">4</span><span class="hl sym">);</span>
         <span class="hl kwa">break</span><span class="hl sym">;</span>
      <span class="hl kwa">default</span><span class="hl sym">:</span>
         <span class="hl kwa">assert</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   <span class="hl slc">/// connect two cells along the specified border</span>
   <span class="hl kwa">void</span> <span class="hl kwd">connect</span><span class="hl sym">(</span><span class="hl kwa">int</span> cell1<span class="hl sym">,</span> <span class="hl kwa">int</span> border<span class="hl sym">,</span> <span class="hl kwa">int</span> cell2<span class="hl sym">)</span>
   <span class="hl kwa">in</span> <span class="hl sym">{</span>
      <span class="hl kwa">assert</span><span class="hl sym">(</span>cell1 <span class="hl sym">!=</span> cell2<span class="hl sym">);</span>
      <span class="hl kwa">assert</span><span class="hl sym">(</span><span class="hl num">0</span> <span class="hl sym">&lt;=</span> border <span class="hl sym">&amp;&amp;</span> border <span class="hl sym">&lt;</span> <span class="hl num">6</span><span class="hl sym">);</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">body</span> <span class="hl sym">{</span>
      cells<span class="hl sym">[</span>cell1<span class="hl sym">].</span>around<span class="hl sym">[</span>border<span class="hl sym">] =</span> cells<span class="hl sym">[</span>cell2<span class="hl sym">];</span>
      <span class="hl kwa">switch</span><span class="hl sym">(</span>border<span class="hl sym">) {</span>
         <span class="hl kwa">case</span> E<span class="hl sym">:</span> border <span class="hl sym">=</span> W<span class="hl sym">;</span> <span class="hl kwa">break</span><span class="hl sym">;</span>
         <span class="hl kwa">case</span> W<span class="hl sym">:</span> border <span class="hl sym">=</span> E<span class="hl sym">;</span> <span class="hl kwa">break</span><span class="hl sym">;</span>
         <span class="hl kwa">case</span> SE<span class="hl sym">:</span> border <span class="hl sym">=</span> NW<span class="hl sym">;</span> <span class="hl kwa">break</span><span class="hl sym">;</span>
         <span class="hl kwa">case</span> NW<span class="hl sym">:</span> border <span class="hl sym">=</span> SE<span class="hl sym">;</span> <span class="hl kwa">break</span><span class="hl sym">;</span>
         <span class="hl kwa">case</span> NE<span class="hl sym">:</span> border <span class="hl sym">=</span> SW<span class="hl sym">;</span> <span class="hl kwa">break</span><span class="hl sym">;</span>
         <span class="hl kwa">case</span> SW<span class="hl sym">:</span> border <span class="hl sym">=</span> NE<span class="hl sym">;</span> <span class="hl kwa">break</span><span class="hl sym">;</span>
         <span class="hl kwa">default</span><span class="hl sym">:</span> <span class="hl kwa">assert</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span>
      <span class="hl sym">}</span>
      cells<span class="hl sym">[</span>cell2<span class="hl sym">].</span>around<span class="hl sym">[</span>border<span class="hl sym">] =</span> cells<span class="hl sym">[</span>cell1<span class="hl sym">];</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">void</span> <span class="hl kwd">flip</span><span class="hl sym">() {</span>
      <span class="hl kwa">foreach</span><span class="hl sym">(</span>cell<span class="hl sym">;</span> cells<span class="hl sym">)</span>
         cell<span class="hl sym">.</span>flip<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">void</span> <span class="hl kwd">rotate</span><span class="hl sym">() {</span>
      <span class="hl kwa">foreach</span><span class="hl sym">(</span>cell<span class="hl sym">;</span> cells<span class="hl sym">)</span>
         cell<span class="hl sym">.</span>rotate<span class="hl sym">;</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwa">class</span> Piece <span class="hl sym">{</span>
   PieceConfig<span class="hl sym">[</span>PermutationCount<span class="hl sym">]</span> configs<span class="hl sym">;</span>
   <span class="hl kwa">int</span> number<span class="hl sym">;</span>

   <span class="hl kwa">this</span><span class="hl sym">(</span><span class="hl kwa">int</span> number<span class="hl sym">)</span>
   <span class="hl kwa">in</span> <span class="hl sym">{</span>
      <span class="hl kwa">assert</span><span class="hl sym">(</span>number <span class="hl sym">&gt;=</span> <span class="hl num">0</span> <span class="hl sym">&amp;&amp;</span> number <span class="hl sym">&lt;</span> <span class="hl num">10</span><span class="hl sym">);</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">body</span> <span class="hl sym">{</span>
      <span class="hl kwa">this</span><span class="hl sym">.</span>number <span class="hl sym">=</span> number<span class="hl sym">;</span>
      <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwa">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> PermutationCount<span class="hl sym">; ++</span>i<span class="hl sym">)</span>
         configs<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">PieceConfig</span><span class="hl sym">(</span><span class="hl kwa">this</span><span class="hl sym">,</span> i<span class="hl sym">);</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwa">class</span> BoardCell <span class="hl sym">{</span>
   BoardCell<span class="hl sym">[</span><span class="hl num">6</span><span class="hl sym">]</span> around<span class="hl sym">;</span>
   PieceCell pieceCell<span class="hl sym">;</span>

   <span class="hl kwa">uint</span> <span class="hl kwd">place</span><span class="hl sym">() {</span> <span class="hl kwa">return</span> place_<span class="hl sym">; }</span>
   <span class="hl kwa">void</span> <span class="hl kwd">setPlace</span><span class="hl sym">(</span><span class="hl kwa">uint</span> place<span class="hl sym">,</span> BoardCell<span class="hl sym">[</span>CellsPerBoard<span class="hl sym">]</span> cells<span class="hl sym">)</span>
   <span class="hl kwa">in</span> <span class="hl sym">{</span>
      <span class="hl kwa">assert</span><span class="hl sym">(</span>place <span class="hl sym">&lt;</span> <span class="hl num">50</span><span class="hl sym">);</span>
      <span class="hl kwa">foreach</span><span class="hl sym">(</span>cell<span class="hl sym">;</span> cells<span class="hl sym">)</span>
         <span class="hl kwa">assert</span><span class="hl sym">(!(</span>cell <span class="hl kwa">is null</span><span class="hl sym">));</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">body</span> <span class="hl sym">{</span>
      place_ <span class="hl sym">=</span> place<span class="hl sym">;</span>
      <span class="hl kwa">uint</span> row <span class="hl sym">=</span> place <span class="hl sym">/</span> <span class="hl num">5</span><span class="hl sym">;</span>
      <span class="hl kwa">assert</span><span class="hl sym">(</span>row <span class="hl sym">&lt;</span> <span class="hl num">10</span><span class="hl sym">);</span>
      bool firstCol <span class="hl sym">= ((</span>place<span class="hl sym">%</span><span class="hl num">5</span><span class="hl sym">) ==</span> <span class="hl num">0</span><span class="hl sym">);</span>
      bool lastCol <span class="hl sym">= ((</span>place<span class="hl sym">%</span><span class="hl num">5</span><span class="hl sym">) ==</span> <span class="hl num">4</span><span class="hl sym">);</span>

      <span class="hl kwa">if</span><span class="hl sym">(</span>row <span class="hl sym">%</span> <span class="hl num">2</span> <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">) {</span> <span class="hl slc">// even row</span>
         <span class="hl kwa">if</span><span class="hl sym">(</span>row<span class="hl sym">) {</span> <span class="hl slc">// has northern around</span>
            <span class="hl kwa">if</span><span class="hl sym">(!</span>firstCol<span class="hl sym">)</span>
               around<span class="hl sym">[</span>NW<span class="hl sym">] =</span> cells<span class="hl sym">[</span>place <span class="hl sym">-</span> <span class="hl num">6</span><span class="hl sym">];</span>
            around<span class="hl sym">[</span>NE<span class="hl sym">] =</span> cells<span class="hl sym">[</span>place <span class="hl sym">-</span> <span class="hl num">5</span><span class="hl sym">];</span>
         <span class="hl sym">}</span>
         <span class="hl slc">// all even rows have southern neighbors</span>
         <span class="hl kwa">if</span><span class="hl sym">(!</span>firstCol<span class="hl sym">)</span>
            around<span class="hl sym">[</span>SW<span class="hl sym">] =</span> cells<span class="hl sym">[</span>place <span class="hl sym">+</span> <span class="hl num">4</span><span class="hl sym">];</span>
         around<span class="hl sym">[</span>SE<span class="hl sym">] =</span> cells<span class="hl sym">[</span>place <span class="hl sym">+</span> <span class="hl num">5</span><span class="hl sym">];</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">else</span> <span class="hl sym">{</span> <span class="hl slc">// odd row</span>
         <span class="hl slc">// all odd rows have northern neighbors</span>
         around<span class="hl sym">[</span>NW<span class="hl sym">] =</span> cells<span class="hl sym">[</span>place <span class="hl sym">-</span> <span class="hl num">5</span><span class="hl sym">];</span>
         <span class="hl kwa">if</span><span class="hl sym">(!</span>lastCol<span class="hl sym">)</span>
            around<span class="hl sym">[</span>NE<span class="hl sym">] =</span> cells<span class="hl sym">[</span>place <span class="hl sym">-</span> <span class="hl num">4</span><span class="hl sym">];</span>
         <span class="hl kwa">if</span><span class="hl sym">(</span>row <span class="hl sym">!=</span> <span class="hl num">9</span><span class="hl sym">) {</span> <span class="hl slc">// has southern neighbors</span>
            around<span class="hl sym">[</span>SW<span class="hl sym">] =</span> cells<span class="hl sym">[</span>place <span class="hl sym">+</span> <span class="hl num">5</span><span class="hl sym">];</span>
            <span class="hl kwa">if</span><span class="hl sym">(!</span>lastCol<span class="hl sym">)</span>
               around<span class="hl sym">[</span>SE<span class="hl sym">] =</span> cells<span class="hl sym">[</span>place <span class="hl sym">+</span> <span class="hl num">6</span><span class="hl sym">];</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>

      <span class="hl slc">// add around on this row</span>
      <span class="hl kwa">if</span><span class="hl sym">(!</span>firstCol<span class="hl sym">)</span>
         around<span class="hl sym">[</span>W<span class="hl sym">] =</span> cells<span class="hl sym">[</span>place <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">];</span>
      <span class="hl kwa">if</span><span class="hl sym">(!</span>lastCol<span class="hl sym">)</span>
         around<span class="hl sym">[</span>E<span class="hl sym">] =</span> cells<span class="hl sym">[</span>place <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">];</span>
   <span class="hl sym">}</span>

   <span class="hl slc">/// size of the island i'm in; 0 for checked cells and placed ones</span>
   <span class="hl kwa">uint</span> <span class="hl kwd">islandSize</span><span class="hl sym">()</span>
   <span class="hl kwa">out</span><span class="hl sym">(</span>result<span class="hl sym">) {</span>
      <span class="hl kwa">assert</span><span class="hl sym">(</span>result <span class="hl sym">&lt;=</span> <span class="hl num">50</span><span class="hl sym">);</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">body</span> <span class="hl sym">{</span>
      <span class="hl kwa">if</span><span class="hl sym">(!(</span>pieceCell <span class="hl kwa">is null</span><span class="hl sym">) ||</span> checked<span class="hl sym">)</span>
         <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwa">uint</span> <span class="hl kwc">ret</span> <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span>
      checked <span class="hl sym">=</span> <span class="hl kwa">true</span><span class="hl sym">;</span>
      <span class="hl kwa">foreach</span><span class="hl sym">(</span>cell<span class="hl sym">;</span> around<span class="hl sym">)</span>
         <span class="hl kwa">if</span><span class="hl sym">(!(</span>cell <span class="hl kwa">is null</span><span class="hl sym">))</span>
            <span class="hl kwc">ret</span> <span class="hl sym">+=</span> cell<span class="hl sym">.</span>islandSize<span class="hl sym">;</span>
      <span class="hl kwa">return</span> <span class="hl kwc">ret</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>

<span class="hl kwa">private</span><span class="hl sym">:</span>
   <span class="hl kwa">uint</span> place_<span class="hl sym">;</span>
   bool checked<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwa">class</span> Board <span class="hl sym">{</span>
   BoardCell<span class="hl sym">[</span>CellsPerBoard<span class="hl sym">]</span> cells<span class="hl sym">;</span>

   <span class="hl kwa">this</span><span class="hl sym">() {</span>
      <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwa">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> CellsPerBoard<span class="hl sym">; ++</span>i<span class="hl sym">)</span>
         cells<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">BoardCell</span><span class="hl sym">();</span>
      <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwa">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> CellsPerBoard<span class="hl sym">; ++</span>i<span class="hl sym">)</span>
         cells<span class="hl sym">[</span>i<span class="hl sym">].</span><span class="hl kwd">setPlace</span><span class="hl sym">(</span>i<span class="hl sym">,</span> cells<span class="hl sym">);</span>
      <span class="hl kwa">assert</span><span class="hl sym">(</span>cells<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">].</span>islandSize <span class="hl sym">==</span> <span class="hl num">50</span><span class="hl sym">);</span>
      <span class="hl kwa">assert</span><span class="hl sym">(</span>cells<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">].</span>islandSize <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">);</span>
   <span class="hl sym">}</span>

   <span class="hl slc">/// attempt to put the given cell of the given config at the given place</span>
   bool <span class="hl kwd">put</span><span class="hl sym">(</span>PieceConfig pc<span class="hl sym">,</span> <span class="hl kwa">uint</span> cellIndex<span class="hl sym">,</span> <span class="hl kwa">uint</span> place<span class="hl sym">)</span>
   <span class="hl kwa">in</span> <span class="hl sym">{</span>
      <span class="hl kwa">assert</span><span class="hl sym">(</span>place <span class="hl sym">&lt;</span> <span class="hl num">50</span><span class="hl sym">);</span>
      <span class="hl kwa">assert</span><span class="hl sym">(</span>cellIndex <span class="hl sym">&lt;</span> <span class="hl num">5</span><span class="hl sym">);</span>
      <span class="hl kwa">assert</span><span class="hl sym">(!</span>pc<span class="hl sym">.</span>placed<span class="hl sym">);</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">out</span><span class="hl sym">(</span>result<span class="hl sym">) {</span>
      <span class="hl kwa">assert</span><span class="hl sym">(</span>pc<span class="hl sym">.</span>placed <span class="hl sym">==</span> result<span class="hl sym">);</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">body</span> <span class="hl sym">{</span>
      <span class="hl kwa">if</span><span class="hl sym">(</span><span class="hl kwd">put</span><span class="hl sym">(</span>pc<span class="hl sym">.</span>cells<span class="hl sym">[</span>cellIndex<span class="hl sym">],</span> cells<span class="hl sym">[</span>place<span class="hl sym">]))</span>
         <span class="hl kwa">return true</span><span class="hl sym">;</span>
      pc<span class="hl sym">.</span>placed <span class="hl sym">=</span> <span class="hl kwa">false</span><span class="hl sym">;</span> <span class="hl slc">// also removes the piece from the board</span>
      <span class="hl kwa">return false</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl slc">/// attempt to put a piececell in a boardcell</span>
   bool <span class="hl kwd">put</span><span class="hl sym">(</span>PieceCell p<span class="hl sym">,</span> BoardCell b<span class="hl sym">)</span>
   <span class="hl kwa">in</span> <span class="hl sym">{</span>
      <span class="hl kwa">assert</span><span class="hl sym">(!</span>p<span class="hl sym">.</span>placed<span class="hl sym">);</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">out</span><span class="hl sym">(</span>result<span class="hl sym">) {</span>
      <span class="hl kwa">if</span><span class="hl sym">(</span>result<span class="hl sym">) {</span>
         <span class="hl kwa">assert</span><span class="hl sym">(</span>p<span class="hl sym">.</span>placed<span class="hl sym">);</span>
         <span class="hl kwa">foreach</span><span class="hl sym">(</span>cell<span class="hl sym">;</span> p<span class="hl sym">.</span>around<span class="hl sym">)</span>
            <span class="hl kwa">assert</span><span class="hl sym">(</span>cell <span class="hl kwa">is null</span> <span class="hl sym">||</span> cell<span class="hl sym">.</span>placed<span class="hl sym">);</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">body</span> <span class="hl sym">{</span>
      <span class="hl kwa">if</span><span class="hl sym">(!(</span>b<span class="hl sym">.</span>pieceCell <span class="hl kwa">is null</span><span class="hl sym">))</span>
         <span class="hl kwa">return false</span><span class="hl sym">;</span>
      b<span class="hl sym">.</span>pieceCell <span class="hl sym">=</span> p<span class="hl sym">;</span>
      p<span class="hl sym">.</span>place <span class="hl sym">=</span> b<span class="hl sym">;</span>

      <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwa">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">6</span><span class="hl sym">; ++</span>i<span class="hl sym">) {</span>
         PieceCell p2 <span class="hl sym">=</span> p<span class="hl sym">.</span>around<span class="hl sym">[</span>i<span class="hl sym">];</span>
         <span class="hl kwa">if</span><span class="hl sym">(</span>p2 <span class="hl kwa">is null</span> <span class="hl sym">||</span> p2<span class="hl sym">.</span>placed<span class="hl sym">)</span>
            <span class="hl kwa">continue</span><span class="hl sym">;</span>
         BoardCell b2 <span class="hl sym">=</span> b<span class="hl sym">.</span>around<span class="hl sym">[</span>i<span class="hl sym">];</span>
         <span class="hl kwa">if</span><span class="hl sym">(</span>b2 <span class="hl kwa">is null</span><span class="hl sym">)</span>
            <span class="hl kwa">return false</span><span class="hl sym">;</span>

         <span class="hl kwa">if</span><span class="hl sym">(!</span><span class="hl kwd">put</span><span class="hl sym">(</span>p2<span class="hl sym">,</span> b2<span class="hl sym">))</span>
            <span class="hl kwa">return false</span><span class="hl sym">;</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">return true</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl slc">/// checks that a possible solutions exists; purely an optimization</span>
   bool <span class="hl kwd">possible</span><span class="hl sym">() {</span>
      <span class="hl kwa">foreach</span><span class="hl sym">(</span>cell<span class="hl sym">;</span> cells<span class="hl sym">)</span>
         cell<span class="hl sym">.</span>checked <span class="hl sym">=</span> <span class="hl kwa">false</span><span class="hl sym">;</span>
      <span class="hl kwa">foreach</span><span class="hl sym">(</span>cell<span class="hl sym">;</span> cells<span class="hl sym">) {</span>
         <span class="hl kwa">if</span><span class="hl sym">(</span>cell<span class="hl sym">.</span>islandSize <span class="hl sym">%</span> <span class="hl num">5</span><span class="hl sym">)</span>
            <span class="hl kwa">return false</span><span class="hl sym">;</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">return true</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl com">/*</span>
<span class="hl com">   /// print out the board-- merely for debugging purposes</span>
<span class="hl com">   void printBoard() {</span>
<span class="hl com">      int[6] printOrder = [NW, NE, W, E, SW, SE];</span>
<span class="hl com">      writefln(&quot;cell\tNW NE W  E  SW SE&quot;);</span>
<span class="hl com">      foreach(place, cell; cells) {</span>
<span class="hl com">         assert(cell.place == place);</span>
<span class="hl com">         writef(&quot;%d\t&quot;, place);</span>
<span class="hl com">         foreach(direction; printOrder) {</span>
<span class="hl com">            BoardCell b = cell.around[direction];</span>
<span class="hl com">            if(b is null)</span>
<span class="hl com">               writef(&quot;--&quot;);</span>
<span class="hl com">            else {</span>
<span class="hl com">               if(b.place &lt; 10)</span>
<span class="hl com">                  writef(&quot;0&quot;);</span>
<span class="hl com">               writef(&quot;%d&quot;, b.place);</span>
<span class="hl com">            }</span>
<span class="hl com">            writef(&quot; &quot;);</span>
<span class="hl com">         }</span>
<span class="hl com">         writefln(&quot;&quot;);</span>
<span class="hl com">      }</span>
<span class="hl com">      writefln(&quot;&quot;);</span>
<span class="hl com">   }</span>
<span class="hl com">   */</span>
<span class="hl sym">}</span>

<span class="hl kwa">class</span> Solver <span class="hl sym">{</span>
   result_t low<span class="hl sym">,</span> high<span class="hl sym">;</span>
   Piece<span class="hl sym">[</span><span class="hl num">10</span><span class="hl sym">]</span> pieces<span class="hl sym">;</span>
   Board b<span class="hl sym">;</span>
   <span class="hl kwa">uint</span> solutions<span class="hl sym">;</span>
   <span class="hl kwa">int</span> placedCount<span class="hl sym">;</span>

   <span class="hl kwa">this</span><span class="hl sym">() {</span>
      low <span class="hl sym">=</span> <span class="hl kwa">new</span> result_t<span class="hl sym">;</span>
      high <span class="hl sym">=</span> <span class="hl kwa">new</span> result_t<span class="hl sym">;</span>
      <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwa">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">50</span><span class="hl sym">; ++</span>i<span class="hl sym">)</span>
         low<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl num">9</span><span class="hl sym">;</span>
      <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwa">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">10</span><span class="hl sym">; ++</span>i<span class="hl sym">)</span>
         pieces<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">Piece</span><span class="hl sym">(</span>i<span class="hl sym">);</span>
      b <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Board</span><span class="hl sym">();</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">void</span> <span class="hl kwd">solve</span><span class="hl sym">() {</span>
      <span class="hl kwa">if</span><span class="hl sym">(</span>placedCount <span class="hl sym">==</span> <span class="hl num">10</span><span class="hl sym">) {</span>
         <span class="hl sym">++</span>solutions<span class="hl sym">;</span>
         <span class="hl kwa">if</span><span class="hl sym">(</span>low <span class="hl sym">&gt;</span> b<span class="hl sym">)</span>
            low<span class="hl sym">.</span><span class="hl kwd">fill</span><span class="hl sym">(</span>b<span class="hl sym">);</span>
         <span class="hl kwa">if</span><span class="hl sym">(</span>high <span class="hl sym">&lt;</span> b<span class="hl sym">)</span>
            high<span class="hl sym">.</span><span class="hl kwd">fill</span><span class="hl sym">(</span>b<span class="hl sym">);</span>
         <span class="hl kwa">return</span><span class="hl sym">;</span>
      <span class="hl sym">}</span>
      <span class="hl sym">++</span>placedCount<span class="hl sym">;</span>

      <span class="hl slc">// get the next empty board cell</span>
      <span class="hl kwa">int</span> place<span class="hl sym">;</span>
      <span class="hl kwa">for</span><span class="hl sym">(</span>place <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">; !(</span>b<span class="hl sym">.</span>cells<span class="hl sym">[</span>place<span class="hl sym">].</span>pieceCell <span class="hl kwa">is null</span><span class="hl sym">); ++</span>place<span class="hl sym">) {</span>
         <span class="hl kwa">assert</span><span class="hl sym">(</span>place <span class="hl sym">&lt;</span> <span class="hl num">50</span><span class="hl sym">);</span>
      <span class="hl sym">}</span>

      <span class="hl slc">// try fitting each piece in that slot</span>
      <span class="hl kwa">foreach</span><span class="hl sym">(</span>number<span class="hl sym">,</span> piece<span class="hl sym">;</span> pieces<span class="hl sym">) {</span>
         <span class="hl kwa">assert</span><span class="hl sym">(</span>piece<span class="hl sym">.</span>number <span class="hl sym">==</span> number<span class="hl sym">);</span>
         <span class="hl kwa">if</span><span class="hl sym">(</span>piecePlaced<span class="hl sym">[</span>number<span class="hl sym">])</span>
            <span class="hl kwa">continue</span><span class="hl sym">;</span>
         piecePlaced<span class="hl sym">[</span>number<span class="hl sym">] =</span> <span class="hl kwa">true</span><span class="hl sym">;</span>

         <span class="hl slc">// try each configuration of the piece</span>
         <span class="hl kwa">foreach</span><span class="hl sym">(</span>config<span class="hl sym">;</span> piece<span class="hl sym">.</span>configs<span class="hl sym">) {</span>
            <span class="hl kwa">assert</span><span class="hl sym">(!</span>config<span class="hl sym">.</span>placed<span class="hl sym">);</span>

            <span class="hl slc">// try each cell within the config</span>
            <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwa">int</span> cellIndex <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> cellIndex <span class="hl sym">&lt;</span> <span class="hl num">5</span><span class="hl sym">; ++</span>cellIndex<span class="hl sym">) {</span>
               <span class="hl kwa">if</span><span class="hl sym">(</span>b<span class="hl sym">.</span><span class="hl kwd">put</span><span class="hl sym">(</span>config<span class="hl sym">,</span> cellIndex<span class="hl sym">,</span> place<span class="hl sym">)) {</span>
                  <span class="hl kwa">if</span><span class="hl sym">(</span>b<span class="hl sym">.</span>possible<span class="hl sym">)</span>
                     <span class="hl kwd">solve</span><span class="hl sym">();</span>
                  config<span class="hl sym">.</span>placed <span class="hl sym">=</span> <span class="hl kwa">false</span><span class="hl sym">;</span>
               <span class="hl sym">}</span>
            <span class="hl sym">}</span>
            <span class="hl kwa">assert</span><span class="hl sym">(!</span>config<span class="hl sym">.</span>placed<span class="hl sym">);</span>
         <span class="hl sym">}</span>
         piecePlaced<span class="hl sym">[</span>number<span class="hl sym">] =</span> <span class="hl kwa">false</span><span class="hl sym">;</span>
      <span class="hl sym">}</span>
      <span class="hl sym">--</span>placedCount<span class="hl sym">;</span>
   <span class="hl sym">}</span>
<span class="hl kwa">private</span><span class="hl sym">:</span>
   bool piecePlaced<span class="hl sym">[</span><span class="hl num">10</span><span class="hl sym">];</span>
<span class="hl sym">}</span>

<span class="hl kwa">void</span> <span class="hl kwd">main</span><span class="hl sym">() {</span>
   Solver s <span class="hl sym">=</span> <span class="hl kwa">new</span> Solver<span class="hl sym">;</span>
   s<span class="hl sym">.</span><span class="hl kwd">solve</span><span class="hl sym">();</span>
   <span class="hl kwd">writefln</span><span class="hl sym">(</span><span class="hl str">&quot;%d solutions found</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> s<span class="hl sym">.</span>solutions<span class="hl sym">);</span>
   s<span class="hl sym">.</span>low<span class="hl sym">.</span>write<span class="hl sym">;</span>
   <span class="hl kwd">writefln</span><span class="hl sym">(</span><span class="hl str">&quot;&quot;</span><span class="hl sym">);</span>
   s<span class="hl sym">.</span>high<span class="hl sym">.</span>write<span class="hl sym">;</span>
   <span class="hl kwd">writefln</span><span class="hl sym">(</span><span class="hl str">&quot;&quot;</span><span class="hl sym">);</span>
<span class="hl sym">}</span>
