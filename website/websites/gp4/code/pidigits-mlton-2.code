<span class="com">(* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Scott Cruzen</span>
<span class="com">*)</span>

<span class="kwa">fun</span> floor_ev <span class="sym">(</span>q<span class="sym">,</span>r<span class="sym">,</span>s<span class="sym">,</span>t<span class="sym">)</span> x<span class="sym">:</span>IntInf.<span class="kwb">int</span> <span class="sym">=</span> IntInf.div <span class="sym">((</span>q <span class="sym">*</span> x <span class="sym">+</span> r<span class="sym">),(</span>s <span class="sym">*</span> x <span class="sym">+</span> t<span class="sym">))</span>

<span class="kwa">fun</span> comp <span class="sym">(</span>q<span class="sym">,</span>r<span class="sym">,</span>s<span class="sym">,</span>t<span class="sym">) (</span>q'<span class="sym">,</span>r'<span class="sym">,</span>s'<span class="sym">,</span>t'<span class="sym">) : (</span>IntInf.<span class="kwb">int</span> <span class="sym">*</span> IntInf.<span class="kwb">int</span> <span class="sym">*</span> IntInf.<span class="kwb">int</span> <span class="sym">*</span> IntInf.<span class="kwb">int</span><span class="sym">) =</span>
   <span class="sym">(</span>q <span class="sym">*</span> q' <span class="sym">+</span> r <span class="sym">*</span> s'<span class="sym">,</span>  q <span class="sym">*</span> r' <span class="sym">+</span> r <span class="sym">*</span> t'<span class="sym">,</span>
    s <span class="sym">*</span> q' <span class="sym">+</span> t <span class="sym">*</span> s'<span class="sym">,</span>  s <span class="sym">*</span> r' <span class="sym">+</span> t <span class="sym">*</span> t'<span class="sym">)</span>

<span class="kwa">fun</span> next z <span class="sym">=</span> floor_ev z <span class="num">3</span>
<span class="kwa">fun</span> safe z n <span class="sym">=</span> n <span class="sym">=</span> floor_ev z <span class="num">4</span>
<span class="kwa">fun</span> prod z n <span class="sym">=</span> comp <span class="sym">(</span><span class="num">10</span><span class="sym">,</span> ~<span class="num">10</span> <span class="sym">*</span> n<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)</span> z
<span class="kwa">fun</span> cons z k <span class="sym">=</span>
   comp z <span class="sym">(</span>IntInf.fromInt k<span class="sym">,</span> IntInf.fromInt <span class="sym">(</span><span class="num">2</span><span class="sym">*(</span><span class="num">2</span><span class="sym">*</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">)),</span> <span class="num">0</span><span class="sym">,</span> IntInf.fromInt <span class="sym">(</span><span class="num">2</span><span class="sym">*</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">))</span>

<span class="kwa">fun</span> digit k z n row col <span class="sym">=</span>
   <span class="kwa">if</span> n <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then</span>
      <span class="kwa">let val</span> y <span class="sym">=</span> next z <span class="kwa">in</span>
         <span class="kwa">if</span> safe z y <span class="kwa">then</span>
            <span class="kwa">if</span> col <span class="sym">=</span> <span class="num">10</span> <span class="kwa">then</span>
               <span class="kwa">let val</span> row <span class="sym">=</span> row <span class="sym">+</span> <span class="num">10</span> <span class="kwa">in</span>
                  print<span class="sym">(</span><span class="str">&quot;</span><span class="esc">\t</span><span class="str">:&quot;</span> ^ IntInf.toString row ^ <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span> ^ IntInf.toString y<span class="sym">);</span>
                  digit k <span class="sym">(</span>prod z y<span class="sym">) (</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> row <span class="num">1</span>
               <span class="kwa">end</span>
            <span class="kwa">else</span>
               <span class="sym">(</span> print <span class="sym">(</span>IntInf.toString y<span class="sym">)</span>
               <span class="sym">;</span> digit k <span class="sym">(</span>prod z y<span class="sym">) (</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> row <span class="sym">(</span>col<span class="sym">+</span><span class="num">1</span><span class="sym">))</span>
         <span class="kwa">else</span> digit <span class="sym">(</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">) (</span>cons z k<span class="sym">)</span> n row col
      <span class="kwa">end</span>
   <span class="kwa">else</span>
      print<span class="sym">(</span><span class="kwa">String</span>.implode<span class="sym">(</span><span class="kwa">List</span>.tabulate<span class="sym">((</span><span class="num">10</span> <span class="sym">-</span> IntInf.toInt col<span class="sym">),</span> <span class="kwa">fn</span> x <span class="sym">=&gt;</span> #<span class="str">&quot; &quot;</span><span class="sym">))</span>
           ^ <span class="str">&quot;</span><span class="esc">\t</span><span class="str">:&quot;</span> ^ IntInf.toString <span class="sym">(</span>row <span class="sym">+</span> col<span class="sym">)</span> ^ <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>

<span class="kwa">fun</span> digits n <span class="sym">=</span> digit <span class="num">1</span> <span class="sym">(</span><span class="num">1</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">)</span> n <span class="num">0 0</span>

<span class="kwa">val</span> <span class="sym">() =</span> digits <span class="sym">(</span>valOf <span class="sym">(</span><span class="kwa">Int</span>.fromString <span class="sym">(</span>hd <span class="sym">(</span>CommandLine.arguments<span class="sym">()))))</span>
