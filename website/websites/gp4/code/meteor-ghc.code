<span class="hl com">{-</span>
<span class="hl com">   The Computer Language Shootout</span>
<span class="hl com">      http://shootout.alioth.debian.org/</span>
<span class="hl com">      contributed by Olof Kraigher</span>
<span class="hl com">-}</span>

<span class="hl kwa">module</span> Main <span class="hl kwa">where</span>

<span class="hl kwa">import</span> System<span class="hl sym">(</span>getArgs<span class="hl sym">);</span>      <span class="hl kwa">import</span> Data.List<span class="hl sym">;</span>   <span class="hl kwa">import</span> Data.Bits<span class="hl sym">;</span>         <span class="hl kwa">import</span> Data.Array.IArray<span class="hl sym">;</span>
<span class="hl kwa">import</span> <span class="hl kwb">Char</span><span class="hl sym">(</span>intToDigit<span class="hl sym">);</span>   <span class="hl kwa">import</span> Data.Maybe<span class="hl sym">;</span>   <span class="hl kwa">import</span> Data.Word<span class="hl sym">(</span>Word64<span class="hl sym">);</span>   <span class="hl kwa">import</span> Numeric<span class="hl sym">(</span>showIntAtBase<span class="hl sym">);</span>

<span class="hl kwa">data</span> Direction <span class="hl sym">=</span> E <span class="hl sym">|</span> SE <span class="hl sym">|</span> SW <span class="hl sym">|</span> W <span class="hl sym">|</span> NW <span class="hl sym">|</span> NE <span class="hl kwa">deriving</span> <span class="hl sym">(</span>Enum<span class="hl sym">,</span> Eq<span class="hl sym">,</span> Ord<span class="hl sym">,</span> Show<span class="hl sym">)</span>
<span class="hl kwa">type</span> Piece <span class="hl sym">= [</span>Direction<span class="hl sym">]</span>
<span class="hl kwa">type</span> Cell <span class="hl sym">= (</span><span class="hl kwb">Int</span><span class="hl sym">,</span> <span class="hl kwb">Int</span><span class="hl sym">)</span>
<span class="hl kwa">type</span> Mask <span class="hl sym">=</span> Word64
<span class="hl kwa">type</span> Color <span class="hl sym">=</span> <span class="hl kwb">Int</span>

<span class="hl kwa">class</span> Rotatable a <span class="hl kwa">where</span>
   rot <span class="hl sym">::</span> a <span class="hl sym">-&gt;</span> a

<span class="hl kwa">class</span> Floppable a <span class="hl kwa">where</span>
   flop <span class="hl sym">::</span> a <span class="hl sym">-&gt;</span> a

<span class="hl kwa">class</span> Maskable a <span class="hl kwa">where</span>
   mask <span class="hl sym">::</span> a <span class="hl sym">-&gt;</span> Mask

<span class="hl kwa">instance</span> Rotatable Direction <span class="hl kwa">where</span>
   rot NE <span class="hl sym">=</span> E
   rot d <span class="hl sym">=</span> succ d

<span class="hl kwa">instance</span> Rotatable Piece <span class="hl kwa">where</span>
   rot a <span class="hl sym">=</span> map rot a

<span class="hl kwa">instance</span> Floppable Direction <span class="hl kwa">where</span>
   flop E <span class="hl sym">=</span> W
   flop W <span class="hl sym">=</span> E
   flop SE <span class="hl sym">=</span> SW
   flop SW <span class="hl sym">=</span> SE
   flop NE <span class="hl sym">=</span> NW
   flop NW <span class="hl sym">=</span> NE

<span class="hl kwa">instance</span> Floppable Piece <span class="hl kwa">where</span>
   flop a <span class="hl sym">=</span> map flop a

<span class="hl kwa">instance</span> Maskable Cell <span class="hl kwa">where</span>
   mask <span class="hl sym">(</span>x<span class="hl sym">,</span>y<span class="hl sym">) =</span> bit <span class="hl sym">(</span>x <span class="hl sym">+</span> y<span class="hl sym">*</span>width<span class="hl sym">)</span>

<span class="hl kwa">instance</span> Maskable <span class="hl sym">[</span>Cell<span class="hl sym">]</span> <span class="hl kwa">where</span>
   mask p <span class="hl sym">=</span> foldl<span class="hl str">' (\a b -&gt; a .|. mask b) 0 p</span>
<span class="hl str"></span>
<span class="hl str">width :: Int</span>
<span class="hl str">width = 5</span>
<span class="hl str"></span>
<span class="hl str">height :: Int</span>
<span class="hl str">height = 10</span>
<span class="hl str"></span>
<span class="hl str">allCells :: [Cell]</span>
<span class="hl str">allCells = [(x,y) | y &lt;- [0..height-1], x &lt;- [0..width-1]]</span>
<span class="hl str"></span>
<span class="hl str">left :: Mask</span>
<span class="hl str">left = shift right (width-1)</span>
<span class="hl str"></span>
<span class="hl str">right :: Mask</span>
<span class="hl str">right = foldl'</span> <span class="hl sym">(</span>\a b <span class="hl sym">-&gt;</span> a .<span class="hl sym">|</span>. <span class="hl sym">(</span>shift <span class="hl num">1</span> b<span class="hl sym">))</span> <span class="hl num">0</span> <span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">,</span>width..width<span class="hl sym">*(</span>height<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)]</span>

bottom <span class="hl sym">::</span> Mask
bottom <span class="hl sym">=</span> <span class="hl num">0x1f</span>

top <span class="hl sym">::</span> Mask
top <span class="hl sym">=</span> shift bottom <span class="hl sym">(</span>width<span class="hl sym">*(</span>height<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">))</span>

fullMask <span class="hl sym">::</span> Mask
fullMask <span class="hl sym">=</span> <span class="hl num">0x3FFFFFFFFFFFF</span>

pieces <span class="hl sym">::</span> Array Color Piece
pieces <span class="hl sym">=</span> array <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">9</span><span class="hl sym">)</span> $ zip <span class="hl sym">[</span><span class="hl num">0</span>.<span class="hl num">.9</span><span class="hl sym">]</span> $
      <span class="hl sym">[   [</span>E<span class="hl sym">,</span>    E<span class="hl sym">,</span>  E<span class="hl sym">,</span>  SE<span class="hl sym">],</span>
         <span class="hl sym">[</span>SE<span class="hl sym">,</span> SW<span class="hl sym">,</span> W<span class="hl sym">,</span>  SW<span class="hl sym">],</span>
         <span class="hl sym">[</span>W<span class="hl sym">,</span>  W<span class="hl sym">,</span>  SW<span class="hl sym">,</span> SE<span class="hl sym">],</span>
         <span class="hl sym">[</span>E<span class="hl sym">,</span>  E<span class="hl sym">,</span>  SW<span class="hl sym">,</span> SE<span class="hl sym">],</span>
         <span class="hl sym">[</span>NW<span class="hl sym">,</span> W<span class="hl sym">,</span>  NW<span class="hl sym">,</span> SE<span class="hl sym">,</span> SW<span class="hl sym">],</span>
         <span class="hl sym">[</span>E<span class="hl sym">,</span>  E<span class="hl sym">,</span>  NE<span class="hl sym">,</span> W<span class="hl sym">],</span>
         <span class="hl sym">[</span>NW<span class="hl sym">,</span> NE<span class="hl sym">,</span> NE<span class="hl sym">,</span> W<span class="hl sym">],</span>
         <span class="hl sym">[</span>NE<span class="hl sym">,</span> SE<span class="hl sym">,</span> E<span class="hl sym">,</span>  NE<span class="hl sym">],</span>
         <span class="hl sym">[</span>SE<span class="hl sym">,</span> SE<span class="hl sym">,</span> E<span class="hl sym">,</span>  SE<span class="hl sym">],</span>
         <span class="hl sym">[</span>E<span class="hl sym">,</span>  NW<span class="hl sym">,</span> NW<span class="hl sym">,</span> NW<span class="hl sym">]]</span>

valid <span class="hl sym">::</span> Cell <span class="hl sym">-&gt;</span> Maybe Cell
valid p&#64;<span class="hl sym">(</span>x<span class="hl sym">,</span>y<span class="hl sym">)</span>
   <span class="hl sym">|</span> <span class="hl num">0</span> <span class="hl sym">&lt;=</span> x<span class="hl sym">,</span> x <span class="hl sym">&lt;</span> width<span class="hl sym">,</span> <span class="hl num">0</span> <span class="hl sym">&lt;=</span> y<span class="hl sym">,</span> y <span class="hl sym">&lt;</span> height <span class="hl sym">=</span> Just p
   <span class="hl sym">|</span>otherwise <span class="hl sym">=</span> Nothing

move <span class="hl sym">::</span> Cell <span class="hl sym">-&gt;</span> Direction <span class="hl sym">-&gt;</span> Maybe Cell
move <span class="hl sym">(</span>x<span class="hl sym">,</span>y<span class="hl sym">)</span> E <span class="hl sym">=</span> valid <span class="hl sym">(</span>x<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span>y<span class="hl sym">)</span>
move <span class="hl sym">(</span>x<span class="hl sym">,</span>y<span class="hl sym">)</span> W <span class="hl sym">=</span> valid <span class="hl sym">(</span>x<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span>y<span class="hl sym">)</span>
move <span class="hl sym">(</span>x<span class="hl sym">,</span>y<span class="hl sym">)</span> NE <span class="hl sym">=</span> valid <span class="hl sym">(</span>x<span class="hl sym">+(</span>mod y <span class="hl num">2</span><span class="hl sym">),</span>y<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
move <span class="hl sym">(</span>x<span class="hl sym">,</span>y<span class="hl sym">)</span> NW <span class="hl sym">=</span> valid <span class="hl sym">(</span>x<span class="hl sym">+(</span>mod y <span class="hl num">2</span><span class="hl sym">)-</span><span class="hl num">1</span><span class="hl sym">,</span>y<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
move <span class="hl sym">(</span>x<span class="hl sym">,</span>y<span class="hl sym">)</span> SE <span class="hl sym">=</span> valid <span class="hl sym">(</span>x<span class="hl sym">+(</span>mod y <span class="hl num">2</span><span class="hl sym">),</span>y<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>
move <span class="hl sym">(</span>x<span class="hl sym">,</span>y<span class="hl sym">)</span> SW <span class="hl sym">=</span> valid <span class="hl sym">(</span>x<span class="hl sym">+(</span>mod y <span class="hl num">2</span><span class="hl sym">)-</span><span class="hl num">1</span><span class="hl sym">,</span>y<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>

cells <span class="hl sym">::</span> Piece <span class="hl sym">-&gt;</span> Cell <span class="hl sym">-&gt;</span> Maybe <span class="hl sym">[</span>Cell<span class="hl sym">]</span>
cells <span class="hl sym">[]</span> cell <span class="hl sym">=</span> Just <span class="hl sym">[</span>cell<span class="hl sym">]</span>
cells <span class="hl sym">(</span>d<span class="hl sym">:</span>ds<span class="hl sym">)</span> cell&#64;<span class="hl sym">(</span>x<span class="hl sym">,</span>y<span class="hl sym">) =</span>
   <span class="hl kwa">case</span> move <span class="hl sym">(</span>x<span class="hl sym">,</span>y<span class="hl sym">)</span> d <span class="hl kwa">of</span>
      Nothing <span class="hl sym">-&gt;</span> Nothing
      Just <span class="hl sym">(</span>x<span class="hl str">',y'</span><span class="hl sym">) -&gt;</span>
         <span class="hl kwa">case</span> cells ds <span class="hl sym">(</span>x<span class="hl str">',y'</span><span class="hl sym">)</span> <span class="hl kwa">of</span>
            Nothing <span class="hl sym">-&gt;</span> Nothing
            Just ps <span class="hl sym">-&gt;</span> Just $ <span class="hl sym">(</span>x<span class="hl sym">,</span>y<span class="hl sym">) :</span> ps

bitCount <span class="hl sym">::</span> Mask <span class="hl sym">-&gt;</span> <span class="hl kwb">Int</span>
bitCount <span class="hl num">0</span> <span class="hl sym">=</span> <span class="hl num">0</span>
bitCount mask <span class="hl sym">= (</span>fromIntegral $ <span class="hl sym">(</span>mask .<span class="hl sym">&amp;</span>. <span class="hl num">1</span><span class="hl sym">)) + (</span>bitCount <span class="hl sym">(</span>shiftR mask <span class="hl num">1</span><span class="hl sym">))</span>

floodFill <span class="hl sym">::</span> Mask <span class="hl sym">-&gt;</span> Mask <span class="hl sym">-&gt;</span> Mask
floodFill mask fromBit
   <span class="hl sym">|</span> overlaps fromBit mask <span class="hl sym">=</span> mask
   <span class="hl sym">|</span> otherwise <span class="hl sym">=</span>
      <span class="hl kwa">let</span> mask<span class="hl str">' = mask .|. fromBit</span>
<span class="hl str">      in foldl'</span> <span class="hl sym">(</span>floodFill<span class="hl sym">)</span> mask<span class="hl str">' $</span>
<span class="hl str">            map snd $ filter (\(a, b) -&gt; not $ overlaps a fromBit) $</span>
<span class="hl str">               zip [left, right, top, bottom] $</span>
<span class="hl str">                  map (shift fromBit) [1,-1,width,-width]</span>
<span class="hl str"></span>
<span class="hl str">findFreeBit :: Mask -&gt; Mask</span>
<span class="hl str">findFreeBit mask = fromJust $ find (not.(overlaps mask)) $ map (shift 1) [0..width*height-1]</span>
<span class="hl str"></span>
<span class="hl str">noIslands :: Mask -&gt; Bool</span>
<span class="hl str">noIslands mask = not $ any (&lt;5) $ diffs $ noIslands'</span> mask <span class="hl kwa">where</span>
   noIslands<span class="hl str">' mask</span>
<span class="hl str">      | mask == fullMask = [bitCount mask]</span>
<span class="hl str">      | otherwise = (bitCount mask): (noIslands'</span> $ floodFill mask $ findFreeBit mask<span class="hl sym">)</span>
   diffs <span class="hl sym">(</span>x<span class="hl sym">:</span>y<span class="hl sym">:[]) = [</span>y<span class="hl sym">-</span>x<span class="hl sym">]</span>
   diffs <span class="hl sym">(</span>x<span class="hl sym">:</span>y<span class="hl sym">:</span>xs<span class="hl sym">) = (</span>y<span class="hl sym">-</span>x<span class="hl sym">): (</span>diffs $ y<span class="hl sym">:</span>xs<span class="hl sym">)</span>

bitmasksWithColor <span class="hl sym">::</span> Array Color <span class="hl sym">[</span>Mask<span class="hl sym">]</span>
bitmasksWithColor <span class="hl sym">=</span> amap bitmasksWithColor<span class="hl str">' pieces where</span>
<span class="hl str"></span>
<span class="hl str">   bitmasksWithColor'</span> <span class="hl sym">::</span> Piece <span class="hl sym">-&gt; [</span>Mask<span class="hl sym">]</span>
   bitmasksWithColor<span class="hl str">' piece</span>
<span class="hl str">      | piece == [NW, W,  NW, SE, SW] = do</span>
<span class="hl str">         piece'</span> <span class="hl sym">&lt;- (</span>take <span class="hl num">3</span> $ iterate rot piece<span class="hl sym">) ++ (</span>take <span class="hl num">3</span> $ iterate rot $ flop piece<span class="hl sym">)</span>
         filter noIslands $ map mask $ mapMaybe <span class="hl sym">(</span>cells piece<span class="hl str">') allCells</span>
<span class="hl str"></span>
<span class="hl str">      | otherwise = do</span>
<span class="hl str">         piece'</span> <span class="hl sym">&lt;- (</span>take <span class="hl num">6</span> $ iterate rot piece<span class="hl sym">) ++ (</span>take <span class="hl num">6</span> $ iterate rot $ flop piece<span class="hl sym">)</span>
         filter noIslands $ map mask $ mapMaybe <span class="hl sym">(</span>cells piece<span class="hl str">') allCells</span>
<span class="hl str"></span>
<span class="hl str"></span>
<span class="hl str">bitmasksAtCell :: [Mask] -&gt; Array Cell [Mask]</span>
<span class="hl str">bitmasksAtCell masks =</span>
<span class="hl str">   let masks'</span> <span class="hl sym">= (</span>bitmasksAtCell<span class="hl str">' (shift 1 $ width*height - 1) [] (reverse $ sort masks))</span>
<span class="hl str">   in  array ((0,0),(4,9)) $ zip [(x,y) | y &lt;- [9,8..0], x &lt;- [4,3..0]] masks'</span> <span class="hl kwa">where</span>

      bitmasksAtCell<span class="hl str">' :: Mask -&gt; [Mask] -&gt; [Mask] -&gt; [[Mask]]</span>
<span class="hl str">      bitmasksAtCell'</span> <span class="hl num">1</span> cellMasks <span class="hl sym">[] = [</span>cellMasks<span class="hl sym">]</span>
      bitmasksAtCell<span class="hl str">' cellMask cellMasks [] = cellMasks:(bitmasksAtCell'</span> <span class="hl sym">(</span>shiftR cellMask <span class="hl num">1</span><span class="hl sym">) [] [])</span>
      bitmasksAtCell<span class="hl str">' cellMask cellMasks masks&#64;(m:ms)</span>
<span class="hl str">         | overlaps cellMask m = bitmasksAtCell'</span> cellMask <span class="hl sym">(</span>m<span class="hl sym">:</span>cellMasks<span class="hl sym">)</span> ms
         <span class="hl sym">|</span> otherwise <span class="hl sym">=</span> cellMasks <span class="hl sym">: (</span>bitmasksAtCell<span class="hl str">' (shiftR cellMask 1) [] masks)</span>
<span class="hl str"></span>
<span class="hl str"></span>
<span class="hl str">bitmasksWithColorAtCell :: Array Color (Array Cell [Mask])</span>
<span class="hl str">bitmasksWithColorAtCell = amap bitmasksAtCell bitmasksWithColor</span>
<span class="hl str"></span>
<span class="hl str">nextCell :: Cell -&gt; Cell</span>
<span class="hl str">nextCell (0,y) = (width-1,y-1)</span>
<span class="hl str">nextCell (x,y) =  (x-1,y)</span>
<span class="hl str"></span>
<span class="hl str"></span>
<span class="hl str">overlaps :: Mask -&gt; Mask -&gt; Bool</span>
<span class="hl str">overlaps a b = (a .&amp;. b) /= 0</span>
<span class="hl str"></span>
<span class="hl str">legal :: Mask -&gt; [Mask] -&gt; [Mask]</span>
<span class="hl str">legal boardMask masks = filter (not.(overlaps boardMask)) masks</span>
<span class="hl str"></span>
<span class="hl str"></span>
<span class="hl str">solutions :: [String]</span>
<span class="hl str">solutions = solutions'</span> <span class="hl num">0</span> <span class="hl sym">(</span>width<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> height<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">) [</span><span class="hl num">0</span>.<span class="hl num">.9</span><span class="hl sym">] []</span> <span class="hl kwa">where</span>

   solutions<span class="hl str">' :: Mask -&gt; Cell -&gt; [Color] -&gt; [(Color, Mask)]-&gt; [String]</span>
<span class="hl str">   solutions'</span> _ _ <span class="hl sym">[]</span> usedMasks <span class="hl sym">=</span>    <span class="hl kwa">let</span> s <span class="hl sym">=</span> stringOfColorMasks usedMasks <span class="hl kwa">in</span>   <span class="hl sym">[</span>s<span class="hl sym">,</span> invertString s<span class="hl sym">]</span>
   solutions<span class="hl str">' board cell colorsLeft usedMasks</span>
<span class="hl str">      | overlaps board (mask cell) = solutions'</span> board <span class="hl sym">(</span>nextCell cell<span class="hl sym">)</span> colorsLeft usedMasks
      <span class="hl sym">|</span> otherwise <span class="hl sym">=</span> <span class="hl kwa">do</span>
         color <span class="hl sym">&lt;-</span> colorsLeft
         mask <span class="hl sym">&lt;-</span> legal board $ bitmasksWithColorAtCell<span class="hl sym">!</span>color<span class="hl sym">!</span>cell
         solutions<span class="hl str">' (board .|. mask) (nextCell cell) (colorsLeft \\ [color]) ((color, mask):usedMasks)</span>
<span class="hl str"></span>
<span class="hl str">stringOfColorMasks :: [(Color, Mask)] -&gt; String</span>
<span class="hl str">stringOfColorMasks colorMasks =</span>
<span class="hl str">   tail $ show $ (+) (10^(width*height)) $</span>
<span class="hl str">      sum $ map (\(c,m) -&gt; ((fromIntegral c) * (read $ showIntAtBase 2 intToDigit m &quot;&quot;)) :: Integer) colorMasks</span>
<span class="hl str"></span>
<span class="hl str">invertString :: String -&gt; String</span>
<span class="hl str">invertString s = [s!!(width-x-1 + (height-y-1)*width) | y &lt;- [0..height-1], x &lt;- [0 .. width-1]]</span>
<span class="hl str"></span>
<span class="hl str">printSolution :: String -&gt; IO ()</span>
<span class="hl str">printSolution solution = printSolution'</span> <span class="hl num">0</span> solution <span class="hl kwa">where</span>
   printSolution<span class="hl str">' cell [] = return ()</span>
<span class="hl str">   printSolution'</span> cell <span class="hl sym">(</span>s<span class="hl sym">:</span>ss<span class="hl sym">) =</span> <span class="hl kwa">do</span>
      putStr $ s<span class="hl sym">:</span><span class="hl str">&quot; &quot;</span>
      <span class="hl kwa">case</span> mod <span class="hl sym">(</span>cell<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span> width <span class="hl kwa">of</span>
         <span class="hl num">0</span> <span class="hl sym">-&gt;</span> <span class="hl kwa">case</span> mod <span class="hl sym">(</span>cell<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) (</span><span class="hl num">2</span><span class="hl sym">*</span>width<span class="hl sym">)</span> <span class="hl kwa">of</span>
            <span class="hl num">0</span> <span class="hl sym">-&gt;</span> putStr <span class="hl str">&quot;\n&quot;</span>
            _ <span class="hl sym">-&gt;</span> putStr <span class="hl str">&quot;\n &quot;</span>
         _ <span class="hl sym">-&gt;</span> return <span class="hl sym">()</span>

      printSolution<span class="hl str">' (cell+1) ss</span>
<span class="hl str"></span>
<span class="hl str">main = do</span>
<span class="hl str">   (n :: Int) &lt;- return.read.head =&lt;&lt; getArgs</span>
<span class="hl str">   let nsolutions = take n solutions</span>
<span class="hl str">   putStrLn $ (show $ length nsolutions) ++ &quot; solutions found\n&quot;</span>
<span class="hl str">   printSolution $ minimum nsolutions</span>
<span class="hl str">   putStr &quot;\n&quot;</span>
<span class="hl str">   printSolution $ maximum nsolutions</span>
<span class="hl str">   putStr &quot;\n&quot;</span>
