<span class="com">&quot;  The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy&quot;</span>
<span class="com"></span>
<span class="com">!Shootout.Tests class methodsFor: 'benchmarking'!</span>
<span class="com"></span>
<span class="com">binarytrees</span>
<span class="com">   | minDepth n maxDepth stretchDepth check longLivedTree iterations |</span>
<span class="com">   minDepth := 4.</span>
<span class="com">   n := CEnvironment argv first asNumber.</span>
<span class="com">   maxDepth := minDepth + 2 max: n.</span>
<span class="com">   stretchDepth := maxDepth + 1.</span>
<span class="com"></span>
<span class="com">   check := (TreeNode bottomUpTree: 0 depth: stretchDepth) itemCheck.</span>
<span class="com">   OS.Stdout</span>
<span class="com">      nextPutAll: 'stretch tree of depth '; nextPutAll: stretchDepth printString; nextPut: Character tab;</span>
<span class="com">      nextPutAll: ' check: '; nextPutAll: check printString; cr.</span>
<span class="com"></span>
<span class="com">   longLivedTree := TreeNode bottomUpTree: 0 depth: maxDepth.</span>
<span class="com">   minDepth to: maxDepth by: 2 do: [:depth|</span>
<span class="com">      iterations := 1 bitShift: maxDepth - depth + minDepth.</span>
<span class="com"></span>
<span class="com">      check := 0.</span>
<span class="com">      1 to: iterations do: [:i|</span>
<span class="com">         check := check + (TreeNode bottomUpTree: i depth: depth) itemCheck.</span>
<span class="com">         check := check + (TreeNode bottomUpTree: -1*i depth: depth) itemCheck.</span>
<span class="com">      ].</span>
<span class="com">      OS.Stdout</span>
<span class="com">         nextPutAll:  (2*iterations) printString; nextPut: Character tab;</span>
<span class="com">         nextPutAll: ' trees of depth '; nextPutAll: depth printString; nextPut: Character tab;</span>
<span class="com">         nextPutAll: ' check: '; nextPutAll: check printString; cr.</span>
<span class="com">   ].</span>
<span class="com"></span>
<span class="com">   OS.Stdout</span>
<span class="com">      nextPutAll: 'long lived tree of depth '; nextPutAll: maxDepth printString; nextPut: Character tab;</span>
<span class="com">      nextPutAll: ' check: '; nextPutAll: longLivedTree itemCheck printString; cr.</span>
<span class="com"></span>
<span class="com">   ^'' ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">Smalltalk.Shootout defineClass: #TreeNode</span>
<span class="com">	superclass: #{Core.Object}</span>
<span class="com">	indexedType: #none</span>
<span class="com">	private: false</span>
<span class="com">	instanceVariableNames: 'left right item '</span>
<span class="com">	classInstanceVariableNames: ''</span>
<span class="com">	imports: ''</span>
<span class="com">	category: 'Shootout'!</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">!Shootout.TreeNode class methodsFor: 'instance creation'!</span>
<span class="com"></span>
<span class="com">bottomUpTree: anItem depth: anInteger</span>
<span class="com">   ^(anInteger &gt; 0)</span>
<span class="com">      ifTrue: [</span>
<span class="com">         self</span>
<span class="com">            left: (self bottomUpTree: 2*anItem - 1 depth: anInteger - 1)</span>
<span class="com">            right: (self bottomUpTree: 2*anItem depth: anInteger - 1)</span>
<span class="com">            item: anItem</span>
<span class="com">         ]</span>
<span class="com">      ifFalse: [self left: nil right: nil item: anItem] !</span>
<span class="com"></span>
<span class="com">left: leftChild right: rightChild item: anItem</span>
<span class="com">   ^(super new) left: leftChild right: rightChild item: anItem ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">!Shootout.TreeNode methodsFor: 'initialize-release'!</span>
<span class="com"></span>
<span class="com">left: leftChild right: rightChild item: anItem</span>
<span class="com">   left := leftChild.</span>
<span class="com">   right := rightChild.</span>
<span class="com">   item := anItem ! !</span>
<span class="com"></span>
<span class="com">!Shootout.TreeNode methodsFor: 'accessing'!</span>
<span class="com"></span>
<span class="com">itemCheck</span>
<span class="com">   ^left isNil</span>
<span class="com">      ifTrue: [item] ifFalse: [item + (left itemCheck - right itemCheck)] ! !</span>
