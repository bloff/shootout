<span class="slc">//</span>
<span class="slc">// The Computer Language Shootout</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>
<span class="slc">//</span>
<span class="slc">// Contributed by Shyamal Prasad</span>
<span class="slc">//</span>


<span class="slc">// This implementation of regexdna does not use the POSIX regex</span>
<span class="slc">// included with the GNU libc. Instead it uses the Boost C++ libraries</span>
<span class="slc">//</span>
<span class="slc">// http://www.boost.org/libs/regex/doc/index.html</span>
<span class="slc">//</span>
<span class="slc">// (On Debian: apt-get install libboost-regex-dev before compiling,</span>
<span class="slc">//  and then &quot;g++ -O3 -lboost_regex regexdna.cc -o regexdna</span>
<span class="slc">//  Gentoo seems to package boost as, well, 'boost')</span>
<span class="slc">//</span>


<span class="dir">#include &lt;iostream&gt;</span>
<span class="dir">#include &lt;string&gt;</span>
<span class="dir">#include &lt;map&gt;</span>
<span class="dir">#include &lt;boost/regex.hpp&gt;</span>

<span class="slc">// Use plain old arrays for the 8-mers and IUB code alternatives</span>
<span class="kwb">static const</span> std<span class="sym">::</span>string patterns<span class="sym">[] = {</span>
  <span class="str">&quot;agggtaaa|tttaccct&quot;</span><span class="sym">,</span>
  <span class="str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="sym">,</span>
  <span class="str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="sym">,</span>
  <span class="str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="sym">,</span>
  <span class="str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="sym">,</span>
  <span class="str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="sym">,</span>
  <span class="str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="sym">,</span>
  <span class="str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="sym">,</span>
  <span class="str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span>
<span class="sym">};</span>

<span class="kwc">typedef</span> std<span class="sym">::</span>pair<span class="sym">&lt;</span>std<span class="sym">::</span>string<span class="sym">,</span> std<span class="sym">::</span>string<span class="sym">&gt;</span> Pair<span class="sym">;</span>
<span class="kwb">static const</span> Pair alternatives<span class="sym">[] = {</span>
  <span class="kwd">Pair</span><span class="sym">(</span><span class="str">&quot;B&quot;</span><span class="sym">,</span> <span class="str">&quot;(c|g|t)&quot;</span><span class="sym">),</span> <span class="kwd">Pair</span><span class="sym">(</span><span class="str">&quot;D&quot;</span><span class="sym">,</span> <span class="str">&quot;(a|g|t)&quot;</span><span class="sym">),</span> <span class="kwd">Pair</span><span class="sym">(</span><span class="str">&quot;H&quot;</span><span class="sym">,</span> <span class="str">&quot;(a|c|t)&quot;</span><span class="sym">),</span>
  <span class="kwd">Pair</span><span class="sym">(</span><span class="str">&quot;K&quot;</span><span class="sym">,</span> <span class="str">&quot;(g|t)&quot;</span><span class="sym">),</span> <span class="kwd">Pair</span><span class="sym">(</span><span class="str">&quot;M&quot;</span><span class="sym">,</span> <span class="str">&quot;(a|c)&quot;</span><span class="sym">),</span> <span class="kwd">Pair</span><span class="sym">(</span><span class="str">&quot;N&quot;</span><span class="sym">,</span> <span class="str">&quot;(a|c|g|t)&quot;</span><span class="sym">),</span>
  <span class="kwd">Pair</span><span class="sym">(</span><span class="str">&quot;R&quot;</span><span class="sym">,</span> <span class="str">&quot;(a|g)&quot;</span><span class="sym">),</span> <span class="kwd">Pair</span><span class="sym">(</span><span class="str">&quot;S&quot;</span><span class="sym">,</span> <span class="str">&quot;(c|t)&quot;</span><span class="sym">),</span> <span class="kwd">Pair</span><span class="sym">(</span><span class="str">&quot;V&quot;</span><span class="sym">,</span> <span class="str">&quot;(a|c|g)&quot;</span><span class="sym">),</span>
  <span class="kwd">Pair</span><span class="sym">(</span><span class="str">&quot;W&quot;</span><span class="sym">,</span> <span class="str">&quot;(a|t)&quot;</span><span class="sym">),</span> <span class="kwd">Pair</span><span class="sym">(</span><span class="str">&quot;Y&quot;</span><span class="sym">,</span> <span class="str">&quot;(c|t)&quot;</span><span class="sym">)</span>
<span class="sym">};</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">()</span>
<span class="sym">{</span>
  <span class="slc">// Read file, remove headers and newlines to get sequence</span>
  std<span class="sym">::</span>string line<span class="sym">,</span> buf<span class="sym">;</span>
  <span class="kwa">while</span> <span class="sym">(</span> std<span class="sym">::</span><span class="kwd">getline</span><span class="sym">(</span>std<span class="sym">::</span>cin<span class="sym">,</span> line<span class="sym">) ){</span>
    buf <span class="sym">+=</span> line<span class="sym">;</span>
    buf <span class="sym">+=</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;</span> <span class="slc">// FASTA files always add a newline at line end</span>
  <span class="sym">}</span>
  <span class="kwb">const</span> boost<span class="sym">::</span>regex <span class="kwd">lose</span><span class="sym">(</span><span class="str">&quot;&gt;[^</span><span class="esc">\\</span><span class="str">n]*</span><span class="esc">\\</span><span class="str">n|</span><span class="esc">\\</span><span class="str">n&quot;</span><span class="sym">);</span>
  std<span class="sym">::</span>string sequence <span class="sym">=</span> boost<span class="sym">::</span><span class="kwd">regex_replace</span><span class="sym">(</span>buf<span class="sym">,</span> lose<span class="sym">,</span> <span class="str">&quot;&quot;</span><span class="sym">);</span>


  <span class="slc">// Count the number of times patterns occur in sequence</span>
  <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">unsigned</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> <span class="kwa">sizeof</span><span class="sym">(</span>patterns<span class="sym">)/</span><span class="kwa">sizeof</span><span class="sym">(</span>std<span class="sym">::</span>string<span class="sym">);</span> i<span class="sym">++) {</span>
    <span class="kwb">const</span> boost<span class="sym">::</span>regex <span class="kwd">e</span><span class="sym">(</span>patterns<span class="sym">[</span>i<span class="sym">]);</span>
    boost<span class="sym">::</span>sregex_iterator <span class="kwd">m</span><span class="sym">(</span>sequence<span class="sym">.</span><span class="kwd">begin</span><span class="sym">(),</span> sequence<span class="sym">.</span><span class="kwd">end</span><span class="sym">(),</span> e<span class="sym">);</span>
    <span class="kwb">const</span> boost<span class="sym">::</span>sregex_iterator end<span class="sym">;</span>

    <span class="kwb">unsigned</span> sum <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">while</span> <span class="sym">(</span> m <span class="sym">!=</span> end <span class="sym">)</span>
      <span class="sym">++</span>sum<span class="sym">, ++</span>m<span class="sym">;</span>

    std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> patterns<span class="sym">[</span>i<span class="sym">] &lt;&lt;</span> <span class="str">' '</span> <span class="sym">&lt;&lt;</span> sum <span class="sym">&lt;&lt;</span> std<span class="sym">::</span>endl<span class="sym">;</span>
  <span class="sym">}</span>

  std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> std<span class="sym">::</span>endl <span class="sym">&lt;&lt;</span> buf<span class="sym">.</span><span class="kwd">length</span><span class="sym">() &lt;&lt;</span> std<span class="sym">::</span>endl<span class="sym">;</span>
  std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> sequence<span class="sym">.</span><span class="kwd">length</span><span class="sym">() &lt;&lt;</span> std<span class="sym">::</span>endl<span class="sym">;</span>

  <span class="slc">// Insert alternatives into sequence</span>
  <span class="kwa">for</span> <span class="sym">(</span> <span class="kwb">unsigned</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> <span class="kwa">sizeof</span><span class="sym">(</span>alternatives<span class="sym">)/</span><span class="kwa">sizeof</span><span class="sym">(</span>Pair<span class="sym">);</span> i<span class="sym">++ ){</span>
    <span class="kwb">const</span> boost<span class="sym">::</span>regex <span class="kwd">e</span><span class="sym">(</span>alternatives<span class="sym">[</span>i<span class="sym">].</span>first<span class="sym">);</span>
    sequence <span class="sym">=</span> boost<span class="sym">::</span><span class="kwd">regex_replace</span><span class="sym">(</span>sequence<span class="sym">,</span> e<span class="sym">,</span>
					   alternatives<span class="sym">[</span>i<span class="sym">].</span>second<span class="sym">);</span>
  <span class="sym">}</span>
  std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> sequence<span class="sym">.</span><span class="kwd">length</span><span class="sym">() &lt;&lt;</span> std<span class="sym">::</span>endl<span class="sym">;</span>

  <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="slc">// Local Variables: *</span>
<span class="slc">// compile-command: &quot;g++ -Wall -Wextra -lboost_regex regexdna.cc -o regexdna&quot;*</span>
<span class="slc">// End: *</span>
