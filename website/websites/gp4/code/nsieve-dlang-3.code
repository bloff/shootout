<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   Written by Dave Fladebo</span>
<span class="hl com">   Compile with: dmd -O -inline -release nsieve.d</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> std<span class="hl sym">.</span>stdio<span class="hl sym">,</span> std<span class="hl sym">.</span>string<span class="hl sym">;</span>

<span class="hl kwa">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwa">char</span><span class="hl sym">[][]</span> args<span class="hl sym">)</span>
<span class="hl sym">{</span>
    <span class="hl kwa">int</span> n <span class="hl sym">=</span> args<span class="hl sym">.</span>length <span class="hl sym">&gt;</span> <span class="hl num">1</span> ? <span class="hl kwd">atoi</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]) :</span> <span class="hl num">1</span><span class="hl sym">;</span>

    <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwa">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">3</span><span class="hl sym">;</span> i<span class="hl sym">++)</span>
    <span class="hl sym">{</span>
        <span class="hl kwa">int</span> m <span class="hl sym">=</span> <span class="hl num">10000</span> <span class="hl sym">&lt;&lt; (</span>n<span class="hl sym">-</span>i<span class="hl sym">);</span>
        <span class="hl kwd">writefln</span><span class="hl sym">(</span><span class="hl str">&quot;Primes up to %8d %8d&quot;</span><span class="hl sym">,</span> m<span class="hl sym">,</span> <span class="hl kwd">nsieve</span><span class="hl sym">(</span>m<span class="hl sym">));</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwa">int</span> <span class="hl kwd">nsieve</span><span class="hl sym">(</span><span class="hl kwa">int</span> m<span class="hl sym">)</span>
<span class="hl sym">{</span>
    <span class="hl kwa">typedef</span> bool tbool <span class="hl sym">=</span> <span class="hl kwa">true</span><span class="hl sym">;</span>
    bool<span class="hl sym">[]</span> isPrime <span class="hl sym">=</span> <span class="hl kwa">cast</span><span class="hl sym">(</span>bool<span class="hl sym">[])</span><span class="hl kwa">new</span> tbool<span class="hl sym">[</span>m<span class="hl sym">];</span>
    <span class="hl kwa">int</span> count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

    <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwa">int</span> i <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> isPrime<span class="hl sym">.</span>length<span class="hl sym">;</span> i<span class="hl sym">++)</span>
    <span class="hl sym">{</span>
        <span class="hl kwa">if</span><span class="hl sym">(</span>isPrime<span class="hl sym">[</span>i<span class="hl sym">])</span>
        <span class="hl sym">{</span>
            count<span class="hl sym">++;</span>
            <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwa">int</span> k <span class="hl sym">=</span> i <span class="hl sym">*</span> <span class="hl num">2</span><span class="hl sym">;</span> k <span class="hl sym">&lt;</span> isPrime<span class="hl sym">.</span>length<span class="hl sym">;</span> k <span class="hl sym">+=</span> i<span class="hl sym">)</span>
                isPrime<span class="hl sym">[</span>k<span class="hl sym">] =</span> <span class="hl kwa">false</span><span class="hl sym">;</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">return</span> count<span class="hl sym">;</span>
<span class="hl sym">}</span>
