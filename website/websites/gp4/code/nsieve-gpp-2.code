<span class="com">/*</span>
<span class="com">-- The Computer Language Shootout</span>
<span class="com">-- http://shootout.alioth.debian.org/</span>
<span class="com">--</span>
<span class="com">-- contributed by Daniel Skiles</span>
<span class="com">-- modified by Vaclav Haisman</span>
<span class="com">*/</span>

<span class="dir">#include &lt;iostream&gt;</span>
<span class="dir">#include &lt;iomanip&gt;</span>
<span class="dir">#include &lt;vector&gt;</span>
<span class="dir">#include &lt;algorithm&gt;</span>
<span class="dir">#include &lt;cstdlib&gt;</span>


<span class="kwa">using namespace</span> std<span class="sym">;</span>


<span class="kwb">unsigned</span> <span class="kwd">nsieve</span> <span class="sym">(</span>vector<span class="sym">&lt;</span><span class="kwb">bool</span><span class="sym">&gt; &amp;</span> isPrime<span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwb">unsigned</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
  <span class="kwb">size_t const</span> m <span class="sym">=</span> isPrime<span class="sym">.</span><span class="kwd">size</span> <span class="sym">();</span>

  <span class="kwd">fill</span> <span class="sym">(</span>isPrime<span class="sym">.</span><span class="kwd">begin</span> <span class="sym">() +</span> <span class="num">2</span><span class="sym">,</span> isPrime<span class="sym">.</span><span class="kwd">end</span> <span class="sym">(),</span> <span class="kwa">true</span><span class="sym">);</span>

  <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">size_t</span> i<span class="sym">=</span><span class="num">2</span><span class="sym">;</span> i<span class="sym">&lt;</span>m<span class="sym">; ++</span>i<span class="sym">)</span>
    <span class="kwa">if</span> <span class="sym">(</span>isPrime<span class="sym">[</span>i<span class="sym">])</span>
      <span class="sym">{</span>
        <span class="kwa">for</span><span class="sym">(</span><span class="kwb">size_t</span> k<span class="sym">=</span>i<span class="sym">*</span><span class="num">2</span><span class="sym">;</span> k<span class="sym">&lt;</span>m<span class="sym">;</span> k<span class="sym">+=</span>i<span class="sym">)</span>
          isPrime<span class="sym">[</span>k<span class="sym">] =</span> <span class="kwa">false</span><span class="sym">;</span>
        <span class="sym">++</span>count<span class="sym">;</span>
      <span class="sym">}</span>
  <span class="kwa">return</span> count<span class="sym">;</span>
<span class="sym">}</span>


<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[])</span>
<span class="sym">{</span>
  <span class="kwb">int</span> n <span class="sym">= (</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">2</span><span class="sym">;</span>
  <span class="kwb">unsigned</span> m<span class="sym">;</span>

  m <span class="sym">= (</span><span class="num">1</span><span class="sym">&lt;&lt;</span>n<span class="sym">)*</span><span class="num">10000</span><span class="sym">;</span>
  vector<span class="sym">&lt;</span><span class="kwb">bool</span><span class="sym">&gt;</span> <span class="kwd">flags</span> <span class="sym">(</span>m<span class="sym">);</span>
  cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;Primes up to &quot;</span> <span class="sym">&lt;&lt;</span> <span class="kwd">setw</span><span class="sym">(</span><span class="num">8</span><span class="sym">) &lt;&lt;</span> m <span class="sym">&lt;&lt;</span> <span class="str">&quot; &quot;</span> <span class="sym">&lt;&lt;</span> <span class="kwd">setw</span><span class="sym">(</span><span class="num">8</span><span class="sym">) &lt;&lt;</span> <span class="kwd">nsieve</span><span class="sym">(</span>flags<span class="sym">) &lt;&lt;</span> endl<span class="sym">;</span>

  m <span class="sym">= (</span><span class="num">1</span><span class="sym">&lt;&lt;</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)*</span><span class="num">10000</span><span class="sym">;</span>
  flags<span class="sym">.</span><span class="kwd">resize</span> <span class="sym">(</span>m<span class="sym">);</span>
  cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;Primes up to &quot;</span> <span class="sym">&lt;&lt;</span> <span class="kwd">setw</span><span class="sym">(</span><span class="num">8</span><span class="sym">) &lt;&lt;</span> m <span class="sym">&lt;&lt;</span> <span class="str">&quot; &quot;</span> <span class="sym">&lt;&lt;</span> <span class="kwd">setw</span><span class="sym">(</span><span class="num">8</span><span class="sym">) &lt;&lt;</span> <span class="kwd">nsieve</span><span class="sym">(</span>flags<span class="sym">) &lt;&lt;</span> endl<span class="sym">;</span>

  m <span class="sym">= (</span><span class="num">1</span><span class="sym">&lt;&lt;</span>n<span class="sym">-</span><span class="num">2</span><span class="sym">)*</span><span class="num">10000</span><span class="sym">;</span>
  flags<span class="sym">.</span><span class="kwd">resize</span> <span class="sym">(</span>m<span class="sym">);</span>
  cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;Primes up to &quot;</span> <span class="sym">&lt;&lt;</span> <span class="kwd">setw</span><span class="sym">(</span><span class="num">8</span><span class="sym">) &lt;&lt;</span> m <span class="sym">&lt;&lt;</span> <span class="str">&quot; &quot;</span> <span class="sym">&lt;&lt;</span> <span class="kwd">setw</span><span class="sym">(</span><span class="num">8</span><span class="sym">) &lt;&lt;</span> <span class="kwd">nsieve</span><span class="sym">(</span>flags<span class="sym">) &lt;&lt;</span> endl<span class="sym">;</span>
<span class="sym">}</span>
