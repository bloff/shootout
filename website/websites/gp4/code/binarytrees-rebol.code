REBOL <span class="sym">[</span>
	Title<span class="sym">:</span> <span class="str">&quot;binary-trees&quot;</span>
	Author<span class="sym">:</span> <span class="str">&quot;Robert Brandner&quot;</span>
<span class="sym">]</span>

node<span class="sym">:</span> make object<span class="sym">! [</span>
	left<span class="sym">:</span> none
	right<span class="sym">:</span> none
	item<span class="sym">:</span> none
<span class="sym">]</span>

check<span class="sym">-</span>item<span class="sym">:</span> func <span class="sym">[</span>n<span class="sym">] [</span><span class="kwa">return</span> either <span class="kwa">not</span> n<span class="sym">/</span>left
   <span class="sym">[</span>n<span class="sym">/</span>item<span class="sym">][</span>n<span class="sym">/</span>item <span class="sym">+ (</span>check<span class="sym">-</span>item n<span class="sym">/</span>left<span class="sym">) - (</span>check<span class="sym">-</span>item n<span class="sym">/</span>right<span class="sym">)]]</span>

bottom<span class="sym">-</span>up<span class="sym">:</span> func <span class="sym">[</span>i depth <span class="sym">/</span>local n l r<span class="sym">][</span>
	either depth <span class="sym">&gt;</span> <span class="num">0</span> <span class="sym">[</span>l<span class="sym">:</span> bottom<span class="sym">-</span><span class="kwd">up</span> <span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> i <span class="sym">-</span> <span class="num">1</span><span class="sym">) (</span>depth <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span>
					  r<span class="sym">:</span> bottom<span class="sym">-</span><span class="kwd">up</span> <span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> i<span class="sym">) (</span>depth <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span>
					  n<span class="sym">:</span> make node <span class="sym">[</span>left<span class="sym">:</span> l right<span class="sym">:</span> r item<span class="sym">:</span> i<span class="sym">]]</span>
					 <span class="sym">[</span>n<span class="sym">:</span> make node <span class="sym">[</span>item<span class="sym">:</span> i<span class="sym">]]</span>
	<span class="kwa">return</span> n
<span class="sym">]</span>

n<span class="sym">:</span> either n<span class="sym">:</span> system<span class="sym">/</span>script<span class="sym">/</span>args <span class="sym">[</span>to integer<span class="sym">!</span> n<span class="sym">] [</span><span class="num">4</span><span class="sym">]</span>
min<span class="sym">-</span>depth<span class="sym">:</span> <span class="num">4</span>
max<span class="sym">-</span>depth<span class="sym">:</span> <span class="kwd">max</span> <span class="sym">(</span>min<span class="sym">-</span>depth <span class="sym">+</span> <span class="num">2</span><span class="sym">)</span> n
stretch<span class="sym">-</span>depth<span class="sym">:</span> n <span class="sym">+</span> <span class="num">1</span>
stretched<span class="sym">-</span>tree<span class="sym">:</span> bottom<span class="sym">-</span>up <span class="num">0</span> stretch<span class="sym">-</span>depth
print rejoin <span class="sym">[</span><span class="str">&quot;stretch tree of depth &quot;</span> stretch<span class="sym">-</span>depth <span class="str">&quot;^- check: &quot;</span> check<span class="sym">-</span>item stretched<span class="sym">-</span>tree<span class="sym">]</span>
longlived<span class="sym">-</span>tree<span class="sym">:</span> bottom<span class="sym">-</span>up <span class="num">0</span> n
<span class="kwa">for</span> depth min<span class="sym">-</span>depth max<span class="sym">-</span>depth <span class="num">2</span> <span class="sym">[</span>
	iterations<span class="sym">:</span> to<span class="sym">-</span>integer <span class="num">2</span> <span class="sym">** (</span>max<span class="sym">-</span>depth <span class="sym">-</span> depth <span class="sym">+</span> min<span class="sym">-</span>depth<span class="sym">)</span>
	check<span class="sym">:</span> <span class="num">0</span>
	repeat i iterations <span class="sym">[</span>
 		t<span class="sym">:</span> bottom<span class="sym">-</span>up i depth
		check<span class="sym">:</span> check <span class="sym">+ (</span>check<span class="sym">-</span>item t<span class="sym">)</span>
 		t<span class="sym">:</span> bottom<span class="sym">-</span>up <span class="sym">-</span> i depth
		check<span class="sym">:</span> check <span class="sym">+ (</span>check<span class="sym">-</span>item t<span class="sym">)</span>
	<span class="sym">]</span>
	print rejoin <span class="sym">[</span><span class="num">2</span> <span class="sym">*</span> iterations <span class="str">&quot;^- trees of depth &quot;</span> depth <span class="str">&quot;^- check: &quot;</span> check<span class="sym">]</span>
<span class="sym">]</span>
print rejoin <span class="sym">[</span><span class="str">&quot;long lived tree of depth &quot;</span> n <span class="str">&quot;^- check: &quot;</span> check<span class="sym">-</span>item longlived<span class="sym">-</span>tree<span class="sym">]</span>
