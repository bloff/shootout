<span class="com">(* nbody.sml</span>
<span class="com"> *   The Computer Language Shootout</span>
<span class="com"> *   http://shootout.alioth.debian.org/</span>
<span class="com"> *   (Loosely based on the Oberon version.)</span>
<span class="com"> *</span>
<span class="com"> * Copyright (c) 2004 by The Fellowship of SML/NJ</span>
<span class="com"> *</span>
<span class="com"> * Author: Matthias Blume (blume&#64;tti-c.org)</span>
<span class="com"> * Ported to MLton by Vesa Karvonen.</span>
<span class="com"> *)</span>

<span class="kwa">infix</span> <span class="num">8</span> $
<span class="kwa">val op</span>$ <span class="sym">=</span> Array.sub
<span class="kwa">infix</span> <span class="num">3</span> <span class="sym">&lt;-</span>
<span class="kwa">fun</span> <span class="sym">(</span>a<span class="sym">,</span> i<span class="sym">) &lt;-</span> x <span class="sym">=</span> Array.update <span class="sym">(</span>a<span class="sym">,</span> i<span class="sym">,</span> x<span class="sym">)</span>

<span class="kwa">val</span> SOLAR_MASS <span class="sym">=</span> <span class="num">4.0</span> <span class="sym">*</span> Math.pi <span class="sym">*</span> Math.pi
<span class="kwa">val</span> DAYS_PER_YEAR <span class="sym">=</span> <span class="num">365.24</span>

<span class="com">(* sun, jupiter, saturn, neptune, uranus *)</span>
<span class="kwa">val</span> bodies <span class="sym">=</span>
    <span class="sym">[(</span><span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">1.0</span><span class="sym">),</span>
     <span class="sym">(</span><span class="num">4.84143144246472090</span><span class="sym">,</span> ~<span class="num">1.16032004402742839</span><span class="sym">,</span> ~<span class="num">1.03622044471123109</span>e~<span class="num">1</span><span class="sym">,</span>
      <span class="num">1.66007664274403694</span>e~<span class="num">3</span><span class="sym">,</span> <span class="num">7.69901118419740425</span>e~<span class="num">3</span><span class="sym">,</span> ~<span class="num">6.90460016972063023</span>e~<span class="num">5</span><span class="sym">,</span>
      <span class="num">9.54791938424326609</span>e~<span class="num">4</span><span class="sym">),</span>
     <span class="sym">(</span><span class="num">8.34336671824457987</span><span class="sym">,</span> <span class="num">4.12479856412430479</span><span class="sym">,</span> ~<span class="num">4.03523417114321381</span>e~<span class="num">1</span><span class="sym">,</span>
      ~<span class="num">2.76742510726862411</span>e~<span class="num">3</span><span class="sym">,</span> <span class="num">4.99852801234917238</span>e~<span class="num">3</span><span class="sym">,</span> <span class="num">2.30417297573763929</span>e~<span class="num">5</span><span class="sym">,</span>
      <span class="num">2.85885980666130812</span>e~<span class="num">4</span><span class="sym">),</span>
     <span class="sym">(</span><span class="num">1.28943695621391310</span>e1<span class="sym">,</span> ~<span class="num">1.51111514016986312</span>e1<span class="sym">,</span> ~<span class="num">2.23307578892655734</span>e~<span class="num">1</span><span class="sym">,</span>
      <span class="num">2.96460137564761618</span>e~<span class="num">3</span><span class="sym">,</span> <span class="num">2.37847173959480950</span>e~<span class="num">3</span><span class="sym">,</span> ~<span class="num">2.96589568540237556</span>e~<span class="num">5</span><span class="sym">,</span>
      <span class="num">4.36624404335156298</span>e~<span class="num">5</span><span class="sym">),</span>
     <span class="sym">(</span><span class="num">1.53796971148509165</span>e1<span class="sym">,</span> ~<span class="num">2.59193146099879641</span>e1<span class="sym">,</span> <span class="num">1.79258772950371181</span>e~<span class="num">1</span><span class="sym">,</span>
      <span class="num">2.68067772490389322</span>e~<span class="num">3</span><span class="sym">,</span> <span class="num">1.62824170038242295</span>e~<span class="num">3</span><span class="sym">,</span> ~<span class="num">9.51592254519715870</span>e~<span class="num">5</span><span class="sym">,</span>
      <span class="num">5.15138902046611451</span>e~<span class="num">5</span><span class="sym">)]</span>

<span class="kwa">val</span> N <span class="sym">=</span> length bodies
<span class="kwa">fun</span> sm x <span class="sym">=</span> x <span class="sym">*</span> SOLAR_MASS
<span class="kwa">fun</span> dpy x <span class="sym">=</span> x <span class="sym">*</span> DAYS_PER_YEAR
<span class="kwa">fun</span> get sel <span class="sym">=</span> Array.fromList <span class="sym">(</span>map sel bodies<span class="sym">)</span>
<span class="kwa">val</span> <span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">) = (</span>get #<span class="num">1</span><span class="sym">,</span> get #<span class="num">2</span><span class="sym">,</span> get #<span class="num">3</span><span class="sym">)</span>
<span class="kwa">val</span> <span class="sym">(</span>vx<span class="sym">,</span> vy<span class="sym">,</span> vz<span class="sym">) = (</span>get <span class="sym">(</span>dpy <span class="kwa">o</span> #<span class="num">4</span><span class="sym">),</span> get <span class="sym">(</span>dpy <span class="kwa">o</span> #<span class="num">5</span><span class="sym">),</span> get <span class="sym">(</span>dpy <span class="kwa">o</span> #<span class="num">6</span><span class="sym">))</span>
<span class="kwa">val</span> m <span class="sym">=</span> get <span class="sym">(</span>sm <span class="kwa">o</span> #<span class="num">7</span><span class="sym">)</span>

<span class="com">(* one step *)</span>
<span class="kwa">fun</span> advance dt <span class="sym">=</span>
    <span class="kwa">let fun</span> pl i <span class="sym">=</span> <span class="kwa">if</span> i<span class="sym">&gt;=</span>N <span class="kwa">then</span> <span class="sym">()</span>
                   <span class="kwa">else</span> <span class="sym">((</span>x<span class="sym">,</span> i<span class="sym">) &lt;-</span> x$i<span class="sym">+</span>dt<span class="sym">*</span>vx$i
                       <span class="sym">; (</span>y<span class="sym">,</span> i<span class="sym">) &lt;-</span> y$i<span class="sym">+</span>dt<span class="sym">*</span>vy$i
                       <span class="sym">; (</span>z<span class="sym">,</span> i<span class="sym">) &lt;-</span> z$i<span class="sym">+</span>dt<span class="sym">*</span>vz$i
                       <span class="sym">;</span> pl <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">))</span>
        <span class="kwa">fun</span> vl <span class="sym">(</span>i<span class="sym">,</span> j<span class="sym">) =</span>
            <span class="kwa">if</span> i<span class="sym">&gt;=</span>N <span class="kwa">then</span> pl <span class="num">0</span>
            <span class="kwa">else if</span> j<span class="sym">&gt;=</span>N <span class="kwa">then</span> vl <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> i<span class="sym">+</span><span class="num">2</span><span class="sym">)</span>
            <span class="kwa">else let val</span> <span class="sym">(</span>dx<span class="sym">,</span> dy<span class="sym">,</span> dz<span class="sym">) = (</span>x$i<span class="sym">-</span>x$j<span class="sym">,</span> y$i<span class="sym">-</span>y$j<span class="sym">,</span> z$i<span class="sym">-</span>z$j<span class="sym">)</span>
                     <span class="kwa">val</span> dist <span class="sym">=</span> Math.sqrt<span class="sym">(</span>dx<span class="sym">*</span>dx<span class="sym">+</span>dy<span class="sym">*</span>dy<span class="sym">+</span>dz<span class="sym">*</span>dz<span class="sym">)</span>
                     <span class="kwa">val</span> mag <span class="sym">=</span> dt<span class="sym">/(</span>dist<span class="sym">*</span>dist<span class="sym">*</span>dist<span class="sym">)</span>
                     <span class="kwa">val</span> <span class="sym">(</span>mi<span class="sym">,</span> mj<span class="sym">) = (</span>m$i<span class="sym">*</span>mag<span class="sym">,</span> m$j<span class="sym">*</span>mag<span class="sym">)</span>
                 <span class="kwa">in</span> <span class="sym">(</span>vx<span class="sym">,</span> i<span class="sym">) &lt;-</span> vx$i<span class="sym">-</span>dx<span class="sym">*</span>mj <span class="sym">; (</span>vx<span class="sym">,</span> j<span class="sym">) &lt;-</span> vx$j<span class="sym">+</span>dx<span class="sym">*</span>mi
                  <span class="sym">; (</span>vy<span class="sym">,</span> i<span class="sym">) &lt;-</span> vy$i<span class="sym">-</span>dy<span class="sym">*</span>mj <span class="sym">; (</span>vy<span class="sym">,</span> j<span class="sym">) &lt;-</span> vy$j<span class="sym">+</span>dy<span class="sym">*</span>mi
                  <span class="sym">; (</span>vz<span class="sym">,</span> i<span class="sym">) &lt;-</span> vz$i<span class="sym">-</span>dz<span class="sym">*</span>mj <span class="sym">; (</span>vz<span class="sym">,</span> j<span class="sym">) &lt;-</span> vz$j<span class="sym">+</span>dz<span class="sym">*</span>mi
                  <span class="sym">;</span> vl <span class="sym">(</span>i<span class="sym">,</span> j<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>
                 <span class="kwa">end</span>
    <span class="kwa">in</span> vl <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">end</span>

<span class="com">(* calculate initial velocity for the sun *)</span>
<span class="kwa">fun</span> offmoment <span class="sym">() =</span>
    <span class="kwa">let fun</span> <span class="sym">%</span>v <span class="sym">=</span> ~v <span class="sym">/</span> SOLAR_MASS
        <span class="kwa">fun</span> loop <span class="sym">(</span>i<span class="sym">,</span> px<span class="sym">,</span> py<span class="sym">,</span> pz<span class="sym">) =</span>
            <span class="kwa">if</span> i<span class="sym">&gt;=</span>N <span class="kwa">then</span> <span class="sym">((</span>vx<span class="sym">,</span> <span class="num">0</span><span class="sym">) &lt;- %</span>px <span class="sym">; (</span>vy<span class="sym">,</span> <span class="num">0</span><span class="sym">) &lt;- %</span>py <span class="sym">; (</span>vz<span class="sym">,</span> <span class="num">0</span><span class="sym">) &lt;- %</span>pz<span class="sym">)</span>
            <span class="kwa">else</span> loop <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> px<span class="sym">+</span>vx$i<span class="sym">*</span>m$i<span class="sym">,</span> py<span class="sym">+</span>vy$i<span class="sym">*</span>m$i<span class="sym">,</span> pz<span class="sym">+</span>vz$i<span class="sym">*</span>m$i<span class="sym">)</span>
    <span class="kwa">in</span> loop <span class="sym">(</span><span class="num">1</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">)</span> <span class="kwa">end</span>

<span class="kwa">fun</span> energy <span class="sym">() =</span>
    <span class="kwa">let fun</span> l <span class="sym">(</span>i<span class="sym">,</span> j<span class="sym">,</span> e<span class="sym">) =</span>
            <span class="kwa">if</span> j <span class="sym">&gt;=</span> N <span class="kwa">then</span> l0 <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> e<span class="sym">)</span>
            <span class="kwa">else let val</span> <span class="sym">(</span>dx<span class="sym">,</span> dy<span class="sym">,</span> dz<span class="sym">) = (</span>x$i<span class="sym">-</span>x$j<span class="sym">,</span> y$i<span class="sym">-</span>y$j<span class="sym">,</span> z$i<span class="sym">-</span>z$j<span class="sym">)</span>
                     <span class="kwa">val</span> dist <span class="sym">=</span> Math.sqrt<span class="sym">(</span>dx<span class="sym">*</span>dx<span class="sym">+</span>dy<span class="sym">*</span>dy<span class="sym">+</span>dz<span class="sym">*</span>dz<span class="sym">)</span>
                 <span class="kwa">in</span> l <span class="sym">(</span>i<span class="sym">,</span> j<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> e<span class="sym">-</span>m$i<span class="sym">*</span>m$j<span class="sym">/</span>dist<span class="sym">)</span> <span class="kwa">end</span>
        <span class="kwa">and</span> l0 <span class="sym">(</span>i<span class="sym">,</span> e<span class="sym">) =</span>
            <span class="kwa">if</span> i<span class="sym">&gt;=</span>N <span class="kwa">then</span> e
            <span class="kwa">else let val</span> <span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">) = (</span>vx$i<span class="sym">,</span> vy$i<span class="sym">,</span> vz$i<span class="sym">)</span>
                 <span class="kwa">in</span> l <span class="sym">(</span>i<span class="sym">,</span> i<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> e <span class="sym">+</span> <span class="num">0.5</span><span class="sym">*</span>m$i<span class="sym">*(</span>x<span class="sym">*</span>x<span class="sym">+</span>y<span class="sym">*</span>y<span class="sym">+</span>z<span class="sym">*</span>z<span class="sym">))</span> <span class="kwa">end</span>
    <span class="kwa">in</span> l0 <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">)</span> <span class="kwa">end</span>

<span class="kwa">fun</span> addloop i <span class="sym">=</span> <span class="kwa">if</span> i <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then</span> <span class="sym">(</span>advance <span class="num">0.01</span> <span class="sym">;</span> addloop <span class="sym">(</span>i<span class="sym">-</span><span class="num">1</span><span class="sym">))</span> <span class="kwa">else</span> <span class="sym">()</span>

<span class="kwa">fun</span> pr x <span class="sym">=</span> app print <span class="sym">[(</span><span class="kwa">String</span>.translate <span class="sym">(</span><span class="kwa">fn</span> #<span class="str">&quot;~&quot;</span> <span class="sym">=&gt;</span> <span class="str">&quot;-&quot;</span> <span class="sym">|</span> c <span class="sym">=&gt;</span> str c<span class="sym">)</span> <span class="kwa">o</span>
                       <span class="kwa">Real</span>.fmt <span class="sym">(</span><span class="kwa">StringCvt</span>.FIX <span class="sym">(</span>SOME <span class="num">9</span><span class="sym">)))</span> x<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">]</span>

<span class="kwa">val</span> n <span class="sym">=</span> valOf <span class="sym">(</span><span class="kwa">Int</span>.fromString <span class="sym">(</span>hd <span class="sym">(</span>CommandLine.arguments <span class="sym">())))</span> <span class="kwa">handle</span> _ <span class="sym">=&gt;</span> <span class="num">1</span>

<span class="kwa">val</span> _ <span class="sym">= (</span>offmoment <span class="sym">() ;</span> pr <span class="sym">(</span>energy <span class="sym">()) ;</span> addloop n <span class="sym">;</span> pr <span class="sym">(</span>energy <span class="sym">()))</span>
