<span class="slc">;;; -*- mode: lisp -*-</span>
<span class="slc">;;; $Id: mandelbrot-sbcl.code,v 1.20 2005-11-16 01:36:02 igouy-guest Exp $</span>
<span class="slc">;;;</span>
<span class="slc">;;; The Great Computer Language Shootout</span>
<span class="slc">;;;   http://shootout.alioth.debian.org/</span>

<span class="slc">;;; contributed by Yannick Gingras &lt;ygingras&#64;ygingras.net&gt;</span>

<span class="sym">(</span>declaim <span class="sym">(</span>optimize speed <span class="sym">(</span>debug <span class="num">0</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">) (</span>space <span class="num">0</span><span class="sym">)))</span>

<span class="sym">(</span><span class="kwa">defun</span> render <span class="sym">(</span>size <span class="sym">&amp;</span>optional <span class="sym">(</span>stream <span class="sym">*</span>standard<span class="sym">-</span>output<span class="sym">*))</span>
  <span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> fixnum size<span class="sym">)</span>
           <span class="sym">(</span><span class="kwa">type</span> stream stream<span class="sym">))</span>
  <span class="sym">(</span>let<span class="sym">* ((</span>code <span class="num">0</span><span class="sym">)</span>
         <span class="sym">(</span>mask <span class="num">128</span><span class="sym">)</span>
         <span class="sym">(</span>zi <span class="num">0.0</span>d0<span class="sym">)</span>
         <span class="sym">(</span>zr <span class="num">0.0</span>d0<span class="sym">)</span>
         <span class="sym">(</span>tr <span class="num">0.0</span>d0<span class="sym">)</span>
         <span class="sym">(</span>base<span class="sym">-</span>imag <span class="sym">-</span><span class="num">1.0</span>d0<span class="sym">)</span>
         <span class="sym">(</span>base<span class="sym">-</span>real <span class="sym">-</span><span class="num">1.5</span>d0<span class="sym">)</span>
         <span class="sym">(</span>str <span class="sym">(</span>make<span class="sym">-</span>string <span class="sym">(*</span> size <span class="sym">(</span>ceiling size <span class="num">8</span><span class="sym">))))</span>
         <span class="sym">(</span>cur<span class="sym">-</span>char <span class="sym">-</span><span class="num">1</span><span class="sym">))</span>
    <span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span>unsigned<span class="sym">-</span>byte <span class="num">8</span><span class="sym">)</span> code mask<span class="sym">)</span>
             <span class="sym">(</span><span class="kwa">type</span> double<span class="sym">-</span><span class="kwa">float</span> zr zi tr base<span class="sym">-</span>real base<span class="sym">-</span>imag<span class="sym">)</span>
             <span class="sym">(</span><span class="kwa">type</span> fixnum cur<span class="sym">-</span>char<span class="sym">))</span>
    <span class="sym">(</span>format stream <span class="str">&quot;P4~%~d ~d~%&quot;</span> size size<span class="sym">)</span>
    <span class="sym">(</span>dotimes <span class="sym">(</span>y size<span class="sym">)</span>
      <span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> fixnum y<span class="sym">))</span>
      <span class="sym">(</span>setf base<span class="sym">-</span>imag <span class="sym">(+ -</span><span class="num">1.0</span>d0 <span class="sym">(/ (*</span> <span class="num">2</span>d0 y<span class="sym">)</span> size<span class="sym">)))</span>
      <span class="sym">(</span>dotimes <span class="sym">(</span>x size<span class="sym">)</span>
        <span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> fixnum x<span class="sym">))</span>
	<span class="sym">(</span>setf base<span class="sym">-</span>real <span class="sym">(+ -</span><span class="num">1.5</span>d0 <span class="sym">(/ (*</span> <span class="num">2</span>d0 x<span class="sym">)</span> size<span class="sym">)))</span>
	<span class="sym">(</span>setf zr <span class="num">0.0</span>d0<span class="sym">)</span>
        <span class="sym">(</span>setf zi <span class="num">0.0</span>d0<span class="sym">)</span>
        <span class="sym">(</span>when <span class="sym">(</span><span class="kwa">not</span> <span class="sym">(</span>dotimes <span class="sym">(</span>n <span class="num">51</span><span class="sym">)</span>
                     <span class="sym">(</span>when <span class="sym">(&lt;</span> <span class="num">4.0</span>d0 <span class="sym">(+ (*</span> zr zr<span class="sym">) (*</span> zi zi<span class="sym">)))</span>
                       <span class="sym">(</span>return t<span class="sym">))</span>
                     <span class="sym">(</span>setf tr <span class="sym">(+ (*</span> zr zr<span class="sym">) (- (*</span> zi zi<span class="sym">))</span> base<span class="sym">-</span>real<span class="sym">))</span>
                     <span class="sym">(</span>setf zi <span class="sym">(+ (*</span> <span class="num">2.0</span>d0 zr zi<span class="sym">)</span> base<span class="sym">-</span>imag<span class="sym">))</span>
                     <span class="sym">(</span>setf zr tr<span class="sym">)))</span>
          <span class="sym">(</span>setf code <span class="sym">(</span><span class="kwa">logior</span> mask code<span class="sym">)))</span>
        <span class="sym">(</span>setf mask <span class="sym">(</span>ash mask <span class="sym">-</span><span class="num">1</span><span class="sym">))</span>
        <span class="sym">(</span>when <span class="sym">(</span><span class="kwa">zerop</span> mask<span class="sym">)</span>
          <span class="sym">(</span>setf mask <span class="num">128</span><span class="sym">)</span>
          <span class="sym">(</span>setf <span class="sym">(</span>elt str <span class="sym">(</span>incf cur<span class="sym">-</span>char<span class="sym">)) (</span>code<span class="sym">-</span>char code<span class="sym">))</span>
          <span class="sym">(</span>setf code <span class="num">0</span><span class="sym">)))</span>
      <span class="sym">(</span>when <span class="sym">(/=</span> <span class="num">128</span> mask<span class="sym">)</span>
	<span class="sym">(</span>setf <span class="sym">(</span>elt str <span class="sym">(</span>incf cur<span class="sym">-</span>char<span class="sym">)) (</span>code<span class="sym">-</span>char code<span class="sym">))</span>
	<span class="sym">(</span>setf code <span class="num">0</span><span class="sym">)</span>
	<span class="sym">(</span>setf mask <span class="num">128</span><span class="sym">)))</span>

    <span class="sym">(</span>write<span class="sym">-</span>sequence str stream<span class="sym">)))</span>

<span class="sym">(</span><span class="kwa">defun</span> main <span class="sym">()</span>
  <span class="sym">(</span>let<span class="sym">* ((</span>args #<span class="sym">+</span>sbcl sb<span class="sym">-</span>ext<span class="sym">:*</span>posix<span class="sym">-</span>argv<span class="sym">*</span>
               #<span class="sym">+</span>cmu extensions<span class="sym">:*</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>strings<span class="sym">*</span>
               #<span class="sym">+</span>gcl si<span class="sym">::*</span><span class="kwa">command</span><span class="sym">-</span>args<span class="sym">*)</span>
         <span class="sym">(</span>n <span class="sym">(</span>parse<span class="sym">-</span>integer <span class="sym">(</span><span class="kwa">car</span> <span class="sym">(</span><span class="kwa">last</span> args<span class="sym">)))))</span>
    <span class="sym">(</span>render n<span class="sym">)))</span>

