
REBOL <span class="sym">[</span>
  Title<span class="sym">:</span> spectralnorm
  Name<span class="sym">: {</span>The Great Computer Language Shootout<span class="sym">}</span>
  Home<span class="sym">: {</span>http<span class="sym">:</span><span class="slc">//shootout.alioth.debian.org/}</span>
  Author<span class="sym">: {</span>Anthony Borla<span class="sym">}</span>
  Date<span class="sym">:</span> <span class="num">2006</span><span class="sym">-</span><span class="num">05</span><span class="sym">-</span><span class="num">04</span>
  Version<span class="sym">:</span> <span class="num">1.0</span>
<span class="sym">]</span>

<span class="sym">; -----------------------------</span>

approximate<span class="sym">:</span> func <span class="sym">[</span>n <span class="sym">/</span>local u v vBv vV<span class="sym">] [</span>
  u<span class="sym">:</span> make block<span class="sym">!</span> n
  insert<span class="sym">/</span>dup u <span class="num">1.0</span> n

  v<span class="sym">:</span> make block<span class="sym">!</span> n
  insert<span class="sym">/</span>dup v <span class="num">0.0</span> n

  vBv<span class="sym">:</span> vV<span class="sym">:</span> <span class="num">0.0</span>

  loop <span class="num">10</span> <span class="sym">[</span>
    mulAtAv n u v
    mulAtAv n v u
  <span class="sym">]</span>

  repeat i n <span class="sym">[</span>
    vBv<span class="sym">:</span> vBv <span class="sym">+ ((</span>pick u i<span class="sym">) * (</span>pick v i<span class="sym">))</span>
    vV<span class="sym">:</span> vV <span class="sym">+ ((</span>pick v i<span class="sym">) * (</span>pick v i<span class="sym">))</span>
  <span class="sym">]</span>

  <span class="kwa">return</span> square<span class="sym">-</span><span class="kwd">root</span> <span class="sym">(</span>vBv <span class="sym">/</span> vV<span class="sym">)</span>
<span class="sym">]</span>

<span class="sym">; -------------</span>

A<span class="sym">:</span> func <span class="sym">[</span>i j<span class="sym">] [</span>
  i<span class="sym">:</span> i <span class="sym">-</span> <span class="num">1</span>
  j<span class="sym">:</span> j <span class="sym">-</span> <span class="num">1</span>
  <span class="kwa">return</span> <span class="num">1.0</span> <span class="sym">/ ((((</span>i <span class="sym">+</span> j<span class="sym">) * (</span> i <span class="sym">+</span> j <span class="sym">+</span> <span class="num">1.0</span><span class="sym">)) /</span> <span class="num">2.0</span><span class="sym">) +</span> i <span class="sym">+</span> <span class="num">1.0</span><span class="sym">)</span>
<span class="sym">]</span>

<span class="sym">; -------------</span>

mulAv<span class="sym">:</span> func <span class="sym">[</span>n v av<span class="sym">] [</span>
  repeat i n <span class="sym">[</span>
    poke av i <span class="num">0.0</span>
    repeat j n <span class="sym">[</span>
      poke av <span class="kwd">i</span> <span class="sym">((</span>pick av i<span class="sym">) + ((</span>A i j<span class="sym">) * (</span>pick v j<span class="sym">)))</span>
    <span class="sym">]</span>
  <span class="sym">]</span>
<span class="sym">]</span>

<span class="sym">; -------------</span>

mulAtV<span class="sym">:</span> func <span class="sym">[</span>n v atv<span class="sym">] [</span>
  repeat i n <span class="sym">[</span>
    poke atv i <span class="num">0.0</span>
    repeat j n <span class="sym">[</span>
      poke atv <span class="kwd">i</span> <span class="sym">((</span>pick atv i<span class="sym">) + ((</span>A j i<span class="sym">) * (</span>pick v j<span class="sym">)))</span>
    <span class="sym">]</span>
  <span class="sym">]</span>
<span class="sym">]</span>

<span class="sym">; -------------</span>

mulAtAv<span class="sym">:</span> func <span class="sym">[</span>n v atav <span class="sym">/</span>local u<span class="sym">] [</span>
  u<span class="sym">:</span> make block<span class="sym">!</span> n
  insert<span class="sym">/</span>dup u <span class="num">0.0</span> n
  mulAv n v u
  mulAtV n u atav
<span class="sym">]</span>

<span class="sym">; -----------------------------</span>

N<span class="sym">:</span> either N<span class="sym">:</span> system<span class="sym">/</span>script<span class="sym">/</span>args <span class="sym">[</span>to<span class="sym">-</span>integer N<span class="sym">][</span><span class="num">1</span><span class="sym">]</span>

print round<span class="sym">/</span><span class="kwd">to</span> <span class="sym">(</span>approximate N<span class="sym">)</span> <span class="num">0.000000001</span>

quit<span class="sym">/</span><span class="kwa">return</span> <span class="num">0</span>

