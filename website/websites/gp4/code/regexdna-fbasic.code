<span class="slc">' The Computer Language Shootout</span>
<span class="slc">' http://shootout.alioth.debian.org/</span>
<span class="slc">' gcc program contributed by Mike Pall</span>
<span class="slc">' converted to FreeBASIC from gcc by Simon Nash</span>

#include <span class="str">&quot;crt.bi&quot;</span>
#include <span class="str">&quot;pcre/pcre.bi&quot;</span>
<span class="slc">'#include &quot;pcre/pcreposix.bi&quot;</span>

<span class="kwa">Type</span> fbuf_t
  <span class="kwa">As</span> ZString ptr buf
  <span class="kwa">As</span> size_t size<span class="sym">,</span> len
<span class="kwa">End Type</span>

<span class="kwa">Function</span> fb_need<span class="sym">(</span><span class="kwa">ByVal</span> b <span class="kwa">As</span> fbuf_t ptr<span class="sym">,</span> <span class="kwa">ByVal</span> need <span class="kwa">As</span> size_t<span class="sym">)</span> <span class="kwa">As</span> ZString ptr
  need <span class="sym">+=</span> b<span class="sym">-&gt;</span>len
  <span class="kwa">If</span> need <span class="sym">&gt;</span> b<span class="sym">-&gt;</span>size <span class="kwa">Then</span>
    <span class="kwa">If</span> b<span class="sym">-&gt;</span>size <span class="sym">=</span> <span class="num">0</span> <span class="kwa">Then</span>
      b<span class="sym">-&gt;</span>size <span class="sym">=</span> need
    <span class="kwa">Else</span>
      <span class="kwa">While</span> need <span class="sym">&gt;</span> b<span class="sym">-&gt;</span>size
        b<span class="sym">-&gt;</span>size <span class="sym">+=</span> b<span class="sym">-&gt;</span>size
      Wend
    <span class="kwa">End If</span>
    b<span class="sym">-&gt;</span>buf <span class="sym">=</span> realloc<span class="sym">(</span>b<span class="sym">-&gt;</span>buf<span class="sym">,</span> b<span class="sym">-&gt;</span>size<span class="sym">)</span>
    <span class="kwa">If</span> b<span class="sym">-&gt;</span>buf <span class="sym">=</span> <span class="kwa">NULL Then End</span> <span class="num">1</span>
  <span class="kwa">End If</span>
  Return b<span class="sym">-&gt;</span>buf<span class="sym">+</span>b<span class="sym">-&gt;</span>len
<span class="kwa">End Function</span>

#define FB_MINREAD  <span class="sym">(</span><span class="num">3</span> shl <span class="num">16</span><span class="sym">)</span>

<span class="slc">' Read all of a stdio stream into dst buffer</span>
<span class="kwa">Function</span> fb_readall<span class="sym">(</span><span class="kwa">ByVal</span> dst <span class="kwa">As</span> fbuf_t ptr<span class="sym">,</span> <span class="kwa">ByVal</span> fp <span class="kwa">As</span> FILE ptr<span class="sym">)</span> <span class="kwa">As</span> size_t
  <span class="kwa">Dim As</span> ZString ptr dp
  <span class="kwa">Dim As</span> <span class="kwb">Integer</span> n
    dp <span class="sym">=</span> fb_need<span class="sym">(</span>dst<span class="sym">,</span> FB_MINREAD<span class="sym">)</span>
    Do
      n <span class="sym">=</span> fread<span class="sym">(</span>dp<span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> dst<span class="sym">-&gt;</span>size<span class="sym">-</span>dst<span class="sym">-&gt;</span>len<span class="sym">,</span> fp<span class="sym">)</span>
      <span class="kwa">If</span> n <span class="sym">=</span> <span class="num">0</span> <span class="kwa">Then</span> Exit Do
      dst<span class="sym">-&gt;</span>len <span class="sym">+=</span> n
      dp <span class="sym">=</span> fb_need<span class="sym">(</span>dst<span class="sym">,</span> FB_MINREAD<span class="sym">)</span>
    Loop
    <span class="kwa">If</span> ferror<span class="sym">(</span>fp<span class="sym">) &lt;&gt;</span> <span class="num">0</span> <span class="kwa">Then End</span> <span class="num">1</span>
    Return dst<span class="sym">-&gt;</span>len
<span class="kwa">End Function</span>

<span class="slc">' Substitute pattern p with replacement r, copying from src to dst buffer.</span>
<span class="kwa">Function</span> fb_subst<span class="sym">(</span><span class="kwa">ByVal</span> dst <span class="kwa">As</span> fbuf_t ptr<span class="sym">,</span> <span class="kwa">ByVal</span> src <span class="kwa">As</span> fbuf_t ptr<span class="sym">,</span> _
                  <span class="kwa">ByVal</span> p <span class="kwa">As</span> ZString ptr<span class="sym">,</span> <span class="kwa">ByVal</span> r <span class="kwa">As</span> ZString ptr<span class="sym">)</span> <span class="kwa">As</span> size_t
  <span class="kwa">Dim As</span> pcre ptr re
  <span class="kwa">Dim As</span> pcre_extra ptr re_ex
  <span class="kwa">Dim As</span> ZString ptr re_e
  <span class="kwa">Dim As</span> ZString ptr dp
  <span class="kwa">Dim As</span> <span class="kwb">Integer</span> re_eo<span class="sym">,</span> m<span class="sym">(</span><span class="num">0</span> <span class="kwa">To</span> <span class="num">2</span><span class="sym">),</span> _pos<span class="sym">,</span> rlen<span class="sym">,</span> clen
    re <span class="sym">=</span> pcre_compile<span class="sym">(</span>p<span class="sym">,</span> PCRE_CASELESS<span class="sym">,</span> &#64;re_e<span class="sym">,</span> &#64;re_eo<span class="sym">,</span> <span class="kwa">NULL</span><span class="sym">)</span>
    <span class="kwa">If</span> re <span class="sym">=</span> <span class="num">0</span> <span class="kwa">Then End</span> <span class="num">1</span>
    re_ex <span class="sym">=</span> pcre_study<span class="sym">(</span>re<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> &#64;re_e<span class="sym">)</span>
    rlen <span class="sym">=</span> strlen<span class="sym">(</span>r<span class="sym">)</span>
    dst<span class="sym">-&gt;</span>len <span class="sym">=</span> <span class="num">0</span>
    Do
      <span class="kwa">If</span> pcre_exec<span class="sym">(</span>re<span class="sym">,</span> re_ex<span class="sym">,</span> src<span class="sym">-&gt;</span>buf<span class="sym">,</span> src<span class="sym">-&gt;</span>len<span class="sym">,</span> _pos<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> &#64;m<span class="sym">(</span><span class="num">0</span><span class="sym">),</span> <span class="num">3</span><span class="sym">) &lt;</span> <span class="num">0</span> <span class="kwa">Then</span> Exit Do
      clen <span class="sym">=</span> m<span class="sym">(</span><span class="num">0</span><span class="sym">)-</span>_pos
      dp <span class="sym">=</span> fb_need<span class="sym">(</span>dst<span class="sym">,</span> clen<span class="sym">+</span>rlen<span class="sym">)</span>
      dst<span class="sym">-&gt;</span>len <span class="sym">+=</span> clen<span class="sym">+</span>rlen
      memcpy<span class="sym">(</span>dp<span class="sym">,</span> src<span class="sym">-&gt;</span>buf<span class="sym">+</span>_pos<span class="sym">,</span> clen<span class="sym">)</span>
      memcpy<span class="sym">(</span>dp<span class="sym">+</span>clen<span class="sym">,</span> r<span class="sym">,</span> rlen<span class="sym">)</span>
      _pos <span class="sym">=</span> m<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
    Loop
    clen <span class="sym">=</span> src<span class="sym">-&gt;</span>len<span class="sym">-</span>_pos
    dp <span class="sym">=</span> fb_need<span class="sym">(</span>dst<span class="sym">,</span> clen<span class="sym">)</span>
    dst<span class="sym">-&gt;</span>len <span class="sym">+=</span> clen
    memcpy<span class="sym">(</span>dp<span class="sym">,</span> src<span class="sym">-&gt;</span>buf<span class="sym">+</span>_pos<span class="sym">,</span> clen<span class="sym">)</span>
    Return dst<span class="sym">-&gt;</span>len
<span class="kwa">End Function</span>

<span class="slc">' Count all matches with pattern p in src buffer.</span>
<span class="kwa">Function</span> fb_countmatches<span class="sym">(</span><span class="kwa">ByVal</span> src <span class="kwa">As</span> fbuf_t ptr<span class="sym">,</span> <span class="kwa">ByVal</span> p <span class="kwa">As</span> ZString ptr<span class="sym">)</span> <span class="kwa">As</span> <span class="kwb">Integer</span>
  <span class="kwa">Dim As</span> pcre ptr re
  <span class="kwa">Dim As</span> pcre_extra ptr re_ex
  <span class="kwa">Dim As</span> ZString ptr re_e
  <span class="kwa">Dim As</span> <span class="kwb">Integer</span> re_eo<span class="sym">,</span> m<span class="sym">(</span><span class="num">0</span> <span class="kwa">To</span> <span class="num">2</span><span class="sym">),</span> _pos<span class="sym">,</span> count
    re <span class="sym">=</span> pcre_compile<span class="sym">(</span>p<span class="sym">,</span> PCRE_CASELESS<span class="sym">,</span> &#64;re_e<span class="sym">,</span> &#64;re_eo<span class="sym">,</span> <span class="kwa">NULL</span><span class="sym">)</span>
    <span class="kwa">If</span> re <span class="sym">=</span> <span class="num">0</span> <span class="kwa">Then End</span> <span class="num">1</span>
    re_ex <span class="sym">=</span> pcre_study<span class="sym">(</span>re<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> &#64;re_e<span class="sym">)</span>
    Do
      <span class="kwa">If</span> pcre_exec<span class="sym">(</span>re<span class="sym">,</span> re_ex<span class="sym">,</span> src<span class="sym">-&gt;</span>buf<span class="sym">,</span> src<span class="sym">-&gt;</span>len<span class="sym">,</span> _pos<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> &#64;m<span class="sym">(</span><span class="num">0</span><span class="sym">),</span> <span class="num">3</span><span class="sym">) &lt;</span> <span class="num">0</span> <span class="kwa">Then</span> Exit Do
      count <span class="sym">+=</span> <span class="num">1</span>
      _pos <span class="sym">=</span> m<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
    Loop
    Return count
<span class="kwa">End Function</span>

<span class="kwa">Dim</span> Shared <span class="kwa">As</span> ZString ptr variants<span class="sym">(</span><span class="num">0</span> <span class="kwa">To</span> <span class="num">9</span><span class="sym">) = {</span> _
  &#64;<span class="str">&quot;agggtaaa|tttaccct&quot;</span><span class="sym">,</span>         &#64;<span class="str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="sym">,</span> _
  &#64;<span class="str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="sym">,</span> &#64;<span class="str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="sym">,</span> _
  &#64;<span class="str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="sym">,</span> &#64;<span class="str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="sym">,</span> _
  &#64;<span class="str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="sym">,</span> &#64;<span class="str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="sym">,</span> _
  &#64;<span class="str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span><span class="sym">,</span> <span class="kwa">NULL</span> _
<span class="sym">}</span>

<span class="kwa">Dim</span> Shared <span class="kwa">As</span> ZString ptr subst<span class="sym">(</span><span class="num">0</span> <span class="kwa">To</span> <span class="num">22</span><span class="sym">) = {</span> _
  &#64;<span class="str">&quot;B&quot;</span><span class="sym">,</span> &#64;<span class="str">&quot;(c|g|t)&quot;</span><span class="sym">,</span> &#64;<span class="str">&quot;D&quot;</span><span class="sym">,</span> &#64;<span class="str">&quot;(a|g|t)&quot;</span><span class="sym">,</span>   &#64;<span class="str">&quot;H&quot;</span><span class="sym">,</span> &#64;<span class="str">&quot;(a|c|t)&quot;</span><span class="sym">,</span> &#64;<span class="str">&quot;K&quot;</span><span class="sym">,</span> &#64;<span class="str">&quot;(g|t)&quot;</span><span class="sym">,</span> _
  &#64;<span class="str">&quot;M&quot;</span><span class="sym">,</span> &#64;<span class="str">&quot;(a|c)&quot;</span><span class="sym">,</span>   &#64;<span class="str">&quot;N&quot;</span><span class="sym">,</span> &#64;<span class="str">&quot;(a|c|g|t)&quot;</span><span class="sym">,</span> &#64;<span class="str">&quot;R&quot;</span><span class="sym">,</span> &#64;<span class="str">&quot;(a|g)&quot;</span><span class="sym">,</span>   &#64;<span class="str">&quot;S&quot;</span><span class="sym">,</span> &#64;<span class="str">&quot;(c|g)&quot;</span><span class="sym">,</span> _
  &#64;<span class="str">&quot;V&quot;</span><span class="sym">,</span> &#64;<span class="str">&quot;(a|c|g)&quot;</span><span class="sym">,</span> &#64;<span class="str">&quot;W&quot;</span><span class="sym">,</span> &#64;<span class="str">&quot;(a|t)&quot;</span><span class="sym">,</span>     &#64;<span class="str">&quot;Y&quot;</span><span class="sym">,</span> &#64;<span class="str">&quot;(c|t)&quot;</span><span class="sym">,</span>   <span class="kwa">NULL</span> _
<span class="sym">}</span>


<span class="kwa">Dim As</span> fbuf_t seq<span class="sym">(</span><span class="num">0</span> <span class="kwa">To</span> <span class="num">1</span><span class="sym">)</span>
<span class="kwa">Dim As</span> ZString ptr ptr pp
<span class="kwa">Dim As</span> size_t ilen<span class="sym">,</span> clen<span class="sym">,</span> slen
<span class="kwa">Dim As</span> <span class="kwb">Integer</span> _flip

  ilen <span class="sym">=</span> fb_readall<span class="sym">(</span>&#64;seq<span class="sym">(</span><span class="num">0</span><span class="sym">),</span> stdin<span class="sym">)</span>
  clen <span class="sym">=</span> fb_subst<span class="sym">(</span>&#64;seq<span class="sym">(</span><span class="num">1</span><span class="sym">),</span> &#64;seq<span class="sym">(</span><span class="num">0</span><span class="sym">),</span> <span class="str">&quot;&gt;.*|&quot;</span> <span class="sym">&amp;</span> Chr<span class="sym">(</span><span class="num">10</span><span class="sym">),</span> <span class="str">&quot;&quot;</span><span class="sym">)</span>

  pp <span class="sym">=</span> &#64;variants<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
  <span class="kwa">While</span> <span class="sym">*</span>pp
    printf<span class="sym">(</span><span class="str">&quot;%s %d%c&quot;</span><span class="sym">, *</span>pp<span class="sym">,</span> fb_countmatches<span class="sym">(</span>&#64;seq<span class="sym">(</span><span class="num">1</span><span class="sym">), *</span>pp<span class="sym">),</span> <span class="num">10</span><span class="sym">)</span>
    pp <span class="sym">+=</span> <span class="num">1</span>
  Wend

  _flip <span class="sym">=</span> <span class="num">1</span>
  pp <span class="sym">=</span> &#64;subst<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
  Do
    <span class="kwa">If</span> <span class="sym">*</span>pp <span class="sym">=</span> <span class="num">0</span> <span class="kwa">Then</span> Exit Do
    slen <span class="sym">=</span> fb_subst<span class="sym">(</span>&#64;seq<span class="sym">(</span><span class="num">1</span><span class="sym">-</span>_flip<span class="sym">),</span> &#64;seq<span class="sym">(</span>_flip<span class="sym">), *</span>pp<span class="sym">,</span> pp<span class="sym">[</span><span class="num">1</span><span class="sym">])</span>
    pp <span class="sym">+=</span> <span class="num">2</span>
    _flip <span class="sym">=</span> <span class="num">1</span><span class="sym">-</span>_flip
  Loop
  printf<span class="sym">(</span><span class="str">&quot;%c%zu%c%zu%c%zu%c&quot;</span><span class="sym">,</span> <span class="num">10</span><span class="sym">,</span> ilen<span class="sym">,</span> <span class="num">10</span><span class="sym">,</span> clen<span class="sym">,</span> <span class="num">10</span><span class="sym">,</span> slen<span class="sym">,</span> <span class="num">10</span><span class="sym">)</span>

