<span class="slc">' The Computer Language Shootout</span>
<span class="slc">' http://shootout.alioth.debian.org/</span>
<span class="slc">' contributed by Josh Goldfoot</span>
<span class="slc">' converted to FreeBASIC by Simon Nash(yetifoot)</span>

Option Explicit
Option Escape

#include <span class="str">&quot;crt.bi&quot;</span>
#undef size_t
#include <span class="str">&quot;regex.bi&quot;</span>

<span class="kwa">Sub</span> regsub2 <span class="sym">(</span><span class="kwa">ByVal</span> buffer <span class="kwa">As</span> ZString ptr<span class="sym">,</span> <span class="kwa">ByVal</span> searchFor <span class="kwa">As</span> ZString ptr<span class="sym">,</span> _
             <span class="kwa">ByVal</span> replaceWith <span class="kwa">As</span> ZString ptr<span class="sym">,</span> <span class="kwa">ByVal</span> buflen <span class="kwa">As</span> uInteger<span class="sym">,</span> _
             <span class="kwa">ByVal</span> returnBuf <span class="kwa">As</span> ZString ptr ptr<span class="sym">,</span> <span class="kwa">ByVal</span> newLen <span class="kwa">As</span> uInteger ptr<span class="sym">)</span>
  <span class="kwa">Dim As</span> regex_t preg
  <span class="kwa">Dim As</span> regmatch_t pmatch
  <span class="kwa">Dim As</span> <span class="kwb">Integer</span> result<span class="sym">,</span> replaceLen
    <span class="sym">*</span>returnBuf <span class="sym">=</span> malloc <span class="sym">(</span>buflen <span class="sym">*</span> <span class="num">14</span> <span class="sym">/</span> <span class="num">10</span><span class="sym">)</span>
    <span class="kwa">If</span> <span class="sym">*</span>returnBuf <span class="sym">=</span> <span class="num">0</span> <span class="kwa">Then</span> Exit <span class="kwa">Sub</span>
    <span class="kwa">If</span> regcomp <span class="sym">(</span>&#64;preg<span class="sym">,</span> searchFor<span class="sym">,</span> REG_EXTENDED <span class="kwa">OR</span> REG_NEWLINE<span class="sym">) &lt;&gt;</span> <span class="num">0</span> <span class="kwa">Then</span> Exit <span class="kwa">Sub</span>
    <span class="kwa">Dim As</span> uInteger start
    replaceLen <span class="sym">=</span> strlen <span class="sym">(</span>replaceWith<span class="sym">)</span>
    result <span class="sym">=</span> <span class="num">0</span>
    start <span class="sym">=</span> <span class="num">0</span>
    <span class="sym">*</span>newLen <span class="sym">=</span> <span class="num">0</span>
    <span class="kwa">While</span> result <span class="sym">=</span> <span class="num">0</span>
      result <span class="sym">=</span> regexec <span class="sym">(</span>&#64;preg<span class="sym">,</span> &#64;buffer<span class="sym">[</span>start<span class="sym">],</span> <span class="num">1</span><span class="sym">,</span> &#64;pmatch<span class="sym">,</span> <span class="num">0</span><span class="sym">)</span>
      <span class="kwa">If</span> result <span class="sym">=</span> <span class="num">0</span> <span class="kwa">Then</span>
        <span class="kwa">If</span> pmatch.rm_so <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">Then</span>
          memcpy<span class="sym">(*</span>returnBuf <span class="sym">+ *</span>newLen<span class="sym">,</span> &#64;buffer<span class="sym">[</span>start<span class="sym">],</span> pmatch.rm_so<span class="sym">)</span>
          <span class="sym">*</span>newLen <span class="sym">= *</span>newLen <span class="sym">+</span> pmatch.rm_so
        <span class="kwa">End If</span>
        memcpy<span class="sym">(*</span>returnBuf <span class="sym">+ *</span>newLen<span class="sym">,</span> replaceWith<span class="sym">,</span> replaceLen<span class="sym">)</span>
        <span class="sym">*</span>newLen <span class="sym">= *</span>newLen <span class="sym">+</span> replaceLen
        start <span class="sym">=</span> start <span class="sym">+</span> pmatch.rm_eo
      <span class="kwa">Else</span>
        memcpy<span class="sym">(*</span>returnBuf <span class="sym">+ *</span>newLen<span class="sym">,</span> &#64;buffer<span class="sym">[</span>start<span class="sym">],</span> buflen<span class="sym">-</span>start<span class="sym">)</span>
        <span class="sym">*</span>newLen <span class="sym">= *</span>newLen <span class="sym">+</span> buflen <span class="sym">-</span> start
      <span class="kwa">End If</span>
    Wend
<span class="kwa">End Sub</span>

<span class="kwa">Sub</span> regsub <span class="sym">(</span><span class="kwa">ByVal</span> bufHandle <span class="kwa">As</span> ZString ptr ptr<span class="sym">,</span> <span class="kwa">ByVal</span> searchFor <span class="kwa">As</span> ZString ptr<span class="sym">,</span> _
            <span class="kwa">ByVal</span> replaceWith <span class="kwa">As</span> ZString ptr<span class="sym">,</span> <span class="kwa">ByVal</span> buflen <span class="kwa">As</span> uInteger ptr<span class="sym">)</span>
  <span class="kwa">Dim As</span> ZString ptr tmp
  <span class="kwa">Dim As</span> uInteger newlen
    regsub2<span class="sym">(*</span>bufHandle<span class="sym">,</span> searchFor<span class="sym">,</span> replaceWith<span class="sym">, *</span>buflen<span class="sym">,</span> &#64;tmp<span class="sym">,</span> &#64;newlen<span class="sym">)</span>
    free<span class="sym">(*</span>bufHandle<span class="sym">)</span>
    <span class="sym">*</span>bufHandle <span class="sym">=</span> tmp
    <span class="sym">*</span>buflen <span class="sym">=</span> newlen
<span class="kwa">End Sub</span>

<span class="kwa">Function</span> count_matches <span class="sym">(</span><span class="kwa">ByVal</span> buffer <span class="kwa">As</span> ZString ptr<span class="sym">,</span> <span class="kwa">ByVal</span> searchFor <span class="kwa">As</span> ZString ptr<span class="sym">,</span> _
                        <span class="kwa">ByVal</span> buflen <span class="kwa">As</span> uInteger<span class="sym">)</span> <span class="kwa">As</span> uInteger
  <span class="kwa">Dim As</span> regex_t preg
  <span class="kwa">Dim As</span> regmatch_t pmatch
  <span class="kwa">Dim As</span> <span class="kwb">Integer</span> result
  <span class="kwa">Dim As</span> uInteger matches<span class="sym">,</span> start
    <span class="kwa">If</span> regcomp <span class="sym">(</span>&#64;preg<span class="sym">,</span> searchFor<span class="sym">,</span> REG_EXTENDED<span class="sym">) &lt;&gt;</span> <span class="num">0</span> <span class="kwa">Then</span>
      Return buflen
    <span class="kwa">End If</span>
    memset <span class="sym">(</span>&#64;pmatch<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> sizeof <span class="sym">(</span>pmatch<span class="sym">))</span>
    result <span class="sym">=</span> <span class="num">0</span>
    matches <span class="sym">=</span> <span class="num">0</span>
    start <span class="sym">=</span> <span class="num">0</span>
    <span class="kwa">While</span> result <span class="sym">=</span> <span class="num">0</span>
      result <span class="sym">=</span> regexec <span class="sym">(</span>&#64;preg<span class="sym">,</span> &#64;buffer<span class="sym">[</span>start<span class="sym">],</span> <span class="num">1</span><span class="sym">,</span> &#64;pmatch<span class="sym">,</span> <span class="num">0</span><span class="sym">)</span>
      <span class="kwa">If</span> result <span class="sym">=</span> <span class="num">0</span> <span class="kwa">Then</span>
        matches <span class="sym">+=</span> <span class="num">1</span>
        start <span class="sym">=</span> start <span class="sym">+</span> pmatch.rm_eo
      <span class="kwa">End If</span>
    Wend
    Return matches
<span class="kwa">End Function</span>

  <span class="kwa">Dim As</span> ZString ptr x<span class="sym">,</span> buffer<span class="sym">,</span> tmp
  <span class="kwa">Dim As</span> uInteger buflen<span class="sym">,</span> seqlen<span class="sym">,</span> clen<span class="sym">,</span> rlen
  <span class="kwa">Dim As</span> size_t readlen
  <span class="kwa">Dim As</span> <span class="kwb">Integer</span> i

  seqlen <span class="sym">=</span> <span class="num">0</span>
  buflen <span class="sym">=</span> <span class="num">206848</span>
  buffer <span class="sym">=</span> malloc <span class="sym">(</span>buflen <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span>
  <span class="kwa">If</span> buffer <span class="sym">=</span> <span class="num">0</span> <span class="kwa">Then</span>
    <span class="kwa">End</span> <span class="sym">-</span><span class="num">1</span>
  <span class="kwa">End If</span>
  x <span class="sym">=</span> buffer

  Do
    readlen <span class="sym">= (</span>fread <span class="sym">(</span>x<span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> buflen <span class="sym">-</span> seqlen <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> stdin<span class="sym">))</span>
    <span class="kwa">If</span> readlen <span class="sym">=</span> <span class="num">0</span> <span class="kwa">Then</span> Exit Do
    seqlen <span class="sym">=</span> seqlen <span class="sym">+</span> readlen
    <span class="kwa">If</span> feof <span class="sym">(</span>stdin<span class="sym">) =</span> <span class="num">0</span> <span class="kwa">Then</span>
      buflen <span class="sym">=</span> buflen <span class="sym">+</span> <span class="num">40960</span>
      tmp <span class="sym">=</span> realloc <span class="sym">(</span>buffer<span class="sym">,</span> buflen <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span>
      <span class="kwa">If</span> tmp <span class="sym">=</span> <span class="kwa">NULL Then</span>
        <span class="kwa">End</span> <span class="sym">-</span><span class="num">1</span>
      <span class="kwa">End If</span>
      buffer <span class="sym">=</span> tmp
      x <span class="sym">=</span> &#64;buffer<span class="sym">[</span>seqlen<span class="sym">]</span>
    <span class="kwa">End If</span>
  Loop
  buffer<span class="sym">[</span>seqlen<span class="sym">] =</span> <span class="num">0</span>
  clen <span class="sym">=</span> seqlen
  regsub <span class="sym">(</span>&#64;buffer<span class="sym">,</span> <span class="str">&quot;&gt;.*|\n&quot;</span><span class="sym">,</span> <span class="str">&quot;&quot;</span><span class="sym">,</span> &#64;clen<span class="sym">)</span>

  <span class="kwa">Dim</span> variants<span class="sym">(</span><span class="num">0</span> <span class="kwa">To</span> <span class="num">8</span><span class="sym">)</span> <span class="kwa">As</span> ZString <span class="sym">*</span> <span class="num">27</span>
  variants<span class="sym">(</span><span class="num">0</span><span class="sym">) =</span> <span class="str">&quot;agggtaaa|tttaccct&quot;</span>
  variants<span class="sym">(</span><span class="num">1</span><span class="sym">) =</span> <span class="str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span>
  variants<span class="sym">(</span><span class="num">2</span><span class="sym">) =</span> <span class="str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span>
  variants<span class="sym">(</span><span class="num">3</span><span class="sym">) =</span> <span class="str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span>
  variants<span class="sym">(</span><span class="num">4</span><span class="sym">) =</span> <span class="str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span>
  variants<span class="sym">(</span><span class="num">5</span><span class="sym">) =</span> <span class="str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span>
  variants<span class="sym">(</span><span class="num">6</span><span class="sym">) =</span> <span class="str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span>
  variants<span class="sym">(</span><span class="num">7</span><span class="sym">) =</span> <span class="str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span>
  variants<span class="sym">(</span><span class="num">8</span><span class="sym">) =</span> <span class="str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span>
  <span class="kwa">For</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">To</span> <span class="num">8</span>
    printf <span class="sym">(</span><span class="str">&quot;%s %ld\n&quot;</span><span class="sym">,</span> variants<span class="sym">(</span>i<span class="sym">),</span> count_matches <span class="sym">(</span>buffer<span class="sym">,</span> variants<span class="sym">(</span>i<span class="sym">),</span> clen<span class="sym">))</span>
  <span class="kwa">Next</span> i
  rlen <span class="sym">=</span> clen
  regsub <span class="sym">(</span>&#64;buffer<span class="sym">,</span> <span class="str">&quot;B&quot;</span><span class="sym">,</span> <span class="str">&quot;(c|g|t)&quot;</span><span class="sym">,</span> &#64;rlen<span class="sym">)</span>
  regsub <span class="sym">(</span>&#64;buffer<span class="sym">,</span> <span class="str">&quot;D&quot;</span><span class="sym">,</span> <span class="str">&quot;(a|g|t)&quot;</span><span class="sym">,</span> &#64;rlen<span class="sym">)</span>
  regsub <span class="sym">(</span>&#64;buffer<span class="sym">,</span> <span class="str">&quot;H&quot;</span><span class="sym">,</span> <span class="str">&quot;(a|c|t)&quot;</span><span class="sym">,</span> &#64;rlen<span class="sym">)</span>
  regsub <span class="sym">(</span>&#64;buffer<span class="sym">,</span> <span class="str">&quot;K&quot;</span><span class="sym">,</span> <span class="str">&quot;(g|t)&quot;</span><span class="sym">,</span> &#64;rlen<span class="sym">)</span>
  regsub <span class="sym">(</span>&#64;buffer<span class="sym">,</span> <span class="str">&quot;M&quot;</span><span class="sym">,</span> <span class="str">&quot;(a|c)&quot;</span><span class="sym">,</span> &#64;rlen<span class="sym">)</span>
  regsub <span class="sym">(</span>&#64;buffer<span class="sym">,</span> <span class="str">&quot;N&quot;</span><span class="sym">,</span> <span class="str">&quot;(a|c|g|t)&quot;</span><span class="sym">,</span> &#64;rlen<span class="sym">)</span>
  regsub <span class="sym">(</span>&#64;buffer<span class="sym">,</span> <span class="str">&quot;R&quot;</span><span class="sym">,</span> <span class="str">&quot;(a|g)&quot;</span><span class="sym">,</span> &#64;rlen<span class="sym">)</span>
  regsub <span class="sym">(</span>&#64;buffer<span class="sym">,</span> <span class="str">&quot;S&quot;</span><span class="sym">,</span> <span class="str">&quot;(c|g)&quot;</span><span class="sym">,</span> &#64;rlen<span class="sym">)</span>
  regsub <span class="sym">(</span>&#64;buffer<span class="sym">,</span> <span class="str">&quot;V&quot;</span><span class="sym">,</span> <span class="str">&quot;(a|c|g)&quot;</span><span class="sym">,</span> &#64;rlen<span class="sym">)</span>
  regsub <span class="sym">(</span>&#64;buffer<span class="sym">,</span> <span class="str">&quot;W&quot;</span><span class="sym">,</span> <span class="str">&quot;(a|t)&quot;</span><span class="sym">,</span> &#64;rlen<span class="sym">)</span>
  regsub <span class="sym">(</span>&#64;buffer<span class="sym">,</span> <span class="str">&quot;Y&quot;</span><span class="sym">,</span> <span class="str">&quot;(c|t)&quot;</span><span class="sym">,</span> &#64;rlen<span class="sym">)</span>
  printf <span class="sym">(</span><span class="str">&quot;\n%ld\n%ld\n%ld\n&quot;</span><span class="sym">,</span> seqlen<span class="sym">,</span> clen<span class="sym">,</span> rlen<span class="sym">)</span>
  free <span class="sym">(</span>buffer<span class="sym">)</span>
  <span class="kwa">End</span> <span class="num">0</span>
