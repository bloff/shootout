<span class="slc">% ----------------------------------------------------------------------</span>
<span class="slc">% The Great Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">%</span>
<span class="slc">% Floating point conversion routines courtesy Juergen Stuber and Jorge</span>
<span class="slc">% Marques Pelizzoni [previously used in other Mozart/Oz Shooutout</span>
<span class="slc">% submissions].</span>
<span class="slc">%</span>
<span class="slc">% Contributed by Anthony Borla</span>
<span class="slc">% ----------------------------------------------------------------------</span>

<span class="kwa">functor</span>

<span class="kwa">import</span>
  System<span class="sym">(</span>showInfo<span class="sym">)</span> Application<span class="sym">(</span>exit getArgs<span class="sym">)</span>

<span class="kwa">define</span>

<span class="slc">% ------------- %</span>

  <span class="kwa">fun</span> <span class="sym">{</span>Approximate N<span class="sym">}</span>
    U <span class="sym">= {</span>NewArray <span class="num">1</span> N <span class="num">1.0</span><span class="sym">}</span> V <span class="sym">= {</span>NewArray <span class="num">1</span> N <span class="num">0.0</span><span class="sym">}</span> VBv <span class="sym">= {</span>NewCell <span class="num">0.0</span><span class="sym">}</span> Vv <span class="sym">= {</span>NewCell <span class="num">0.0</span><span class="sym">}</span>
  <span class="kwa">in</span>
    <span class="kwa">for</span> I <span class="kwa">in</span> <span class="num">1</span><span class="sym">.</span><span class="num">.10</span> do
      <span class="sym">{</span>MulAtAv N U V<span class="sym">} {</span>MulAtAv N V U<span class="sym">}</span>
    <span class="kwa">end</span>

    <span class="kwa">for</span> I <span class="kwa">in</span> <span class="num">1</span><span class="sym">..{</span>Array<span class="sym">.</span>high U<span class="sym">}</span> do
      VBv <span class="sym">:= &#64;</span>VBv <span class="sym">+ {</span>Array<span class="sym">.</span>get U I<span class="sym">} * {</span>Array<span class="sym">.</span>get V I<span class="sym">}</span>
      Vv <span class="sym">:= &#64;</span>Vv <span class="sym">+ {</span>Array<span class="sym">.</span>get V I<span class="sym">} * {</span>Array<span class="sym">.</span>get V I<span class="sym">}</span>
    <span class="kwa">end</span>

    <span class="sym">{</span>Float<span class="sym">.</span>sqrt <span class="sym">(&#64;</span>VBv <span class="sym">/ &#64;</span>Vv<span class="sym">)}</span>
  <span class="kwa">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwa">fun</span> <span class="sym">{</span>A I J<span class="sym">}</span>
    If <span class="sym">= {</span>IntToFloat <span class="sym">(</span>I <span class="sym">-</span> <span class="num">1</span><span class="sym">)}</span> Jf <span class="sym">= {</span>IntToFloat <span class="sym">(</span>J <span class="sym">-</span> <span class="num">1</span><span class="sym">)}</span>
  <span class="kwa">in</span>
    <span class="num">1.0</span> <span class="sym">/ ((</span>If <span class="sym">+</span> Jf<span class="sym">) *(</span> If <span class="sym">+</span> Jf <span class="sym">+</span> <span class="num">1.0</span><span class="sym">) /</span> <span class="num">2.0</span> <span class="sym">+</span> If <span class="sym">+</span> <span class="num">1.0</span><span class="sym">)</span>
  <span class="kwa">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwa">proc</span> <span class="sym">{</span>MulAv N V Av<span class="sym">}</span>
    <span class="kwa">for</span> I <span class="kwa">in</span> <span class="num">1</span><span class="sym">..</span>N do
      <span class="sym">{</span>Array<span class="sym">.</span>put Av I <span class="num">0.0</span><span class="sym">}</span>
      <span class="kwa">for</span> J <span class="kwa">in</span> <span class="num">1</span><span class="sym">..</span>N do
        <span class="sym">{</span>Array<span class="sym">.</span>put Av I <span class="sym">({</span>Array<span class="sym">.</span>get Av I<span class="sym">} + {</span>A I J<span class="sym">} * {</span>Array<span class="sym">.</span>get V J<span class="sym">})}</span>
      <span class="kwa">end</span>
    <span class="kwa">end</span>
  <span class="kwa">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwa">proc</span> <span class="sym">{</span>MulAtv N V Atv<span class="sym">}</span>
    <span class="kwa">for</span> I <span class="kwa">in</span> <span class="num">1</span><span class="sym">..</span>N do
      <span class="sym">{</span>Array<span class="sym">.</span>put Atv I <span class="num">0.0</span><span class="sym">}</span>
      <span class="kwa">for</span> J <span class="kwa">in</span> <span class="num">1</span><span class="sym">..</span>N do
        <span class="sym">{</span>Array<span class="sym">.</span>put Atv I <span class="sym">({</span>Array<span class="sym">.</span>get Atv I<span class="sym">} + {</span>A J I<span class="sym">} * {</span>Array<span class="sym">.</span>get V J<span class="sym">})}</span>
      <span class="kwa">end</span>
    <span class="kwa">end</span>
  <span class="kwa">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwa">proc</span> <span class="sym">{</span>MulAtAv N V AtAv<span class="sym">}</span>
    U <span class="sym">= {</span>NewArray <span class="num">1</span> N <span class="num">0.0</span><span class="sym">}</span>
  <span class="kwa">in</span>
    <span class="sym">{</span>MulAv N V U<span class="sym">} {</span>MulAtv N U AtAv<span class="sym">}</span>
  <span class="kwa">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwa">fun</span> <span class="sym">{</span>CmdlNArg Nth Default<span class="sym">}</span> N Nt <span class="kwa">in</span>
    <span class="kwa">try</span>
      Nt <span class="sym">= {</span>String<span class="sym">.</span>toInt <span class="sym">{</span>Application<span class="sym">.</span>getArgs plain<span class="sym">}.</span>Nth<span class="sym">}</span>
      N <span class="sym">=</span> <span class="kwa">if</span> Nt <span class="sym">&lt;</span> Default <span class="kwa">then</span> Default <span class="kwa">else</span> Nt <span class="kwa">end</span>
    <span class="kwa">catch</span> error<span class="sym">(...)</span> <span class="kwa">then</span>
      N <span class="sym">=</span> Default
    <span class="kwa">end</span>
    N
  <span class="kwa">end</span>

<span class="slc">% ------------- %</span>

  <span class="slc">%% Floating Point Conversion Routines</span>

  <span class="kwa">fun</span> <span class="sym">{</span>FloatAbs X<span class="sym">}</span>
    <span class="kwa">if</span> X <span class="sym">&gt;=</span> <span class="num">0.0</span> <span class="kwa">then</span> X <span class="kwa">else</span> <span class="sym">~</span>X <span class="kwa">end</span>
  <span class="kwa">end</span>

  <span class="kwa">fun</span> <span class="sym">{</span>FloatSquare X<span class="sym">}</span>
    X <span class="sym">*</span> X
  <span class="kwa">end</span>

  <span class="kwa">fun</span> <span class="sym">{</span>FloatPower X E<span class="sym">}</span>
    <span class="kwa">if</span> E<span class="sym">==</span><span class="num">0</span> <span class="kwa">then</span> <span class="num">1.0</span>
    elseif E<span class="sym">&lt;</span><span class="num">0</span> <span class="kwa">then raise</span> negativeExponent<span class="sym">(</span>E<span class="sym">)</span> <span class="kwa">end</span>
    <span class="kwa">else</span>
      <span class="kwa">if</span> E mod <span class="num">2</span> <span class="sym">==</span> <span class="num">1</span> <span class="kwa">then</span> X <span class="kwa">else</span> <span class="num">1.0</span> <span class="kwa">end</span>
      <span class="sym">* {</span>FloatSquare <span class="sym">{</span>FloatPower X E div <span class="num">2</span><span class="sym">}}</span>
    <span class="kwa">end</span>
  <span class="kwa">end</span>

  <span class="kwa">fun</span> <span class="sym">{</span>MakePadding Ch L<span class="sym">}</span>
    <span class="kwa">if</span> L <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then</span>
      Padding <span class="sym">= {</span>MakeList L<span class="sym">}</span>
    <span class="kwa">in</span>
      <span class="kwa">for</span> V <span class="kwa">in</span> Padding do V <span class="sym">=</span> Ch <span class="kwa">end</span>
        Padding
      <span class="kwa">else</span>
        nil
    <span class="kwa">end</span>
  <span class="kwa">end</span>

  <span class="kwa">fun</span> <span class="sym">{</span>PadLeft Ch String L<span class="sym">}</span>
    PL <span class="sym">=</span> L <span class="sym">- {</span>List<span class="sym">.</span>length String<span class="sym">}</span>
  <span class="kwa">in</span>
    <span class="sym">{</span>MakePadding Ch PL<span class="sym">} #</span> String
  <span class="kwa">end</span>

  <span class="kwa">fun</span> <span class="sym">{</span>FloatToVS F Prec<span class="sym">}</span>
    <span class="kwa">fun</span> <span class="sym">{</span>FractionToString Frac Prec<span class="sym">}</span>
      <span class="kwa">if</span> Prec <span class="sym">=&lt;</span> <span class="num">0</span> <span class="kwa">then</span> &quot;&quot;
      elseif Prec <span class="sym">&gt;</span> <span class="num">10</span> <span class="kwa">then raise</span> excessivePrecision<span class="sym">(</span>Prec<span class="sym">)</span> <span class="kwa">end</span>
      <span class="kwa">else</span>
        Shifted <span class="sym">= {</span>FloatPower <span class="num">10.0</span> Prec<span class="sym">} *</span> Frac
        Digits <span class="sym">= {</span>FloatToInt <span class="sym">{</span>Round Shifted<span class="sym">}}</span>
        <span class="kwa">in</span> <span class="sym">{</span>PadLeft <span class="sym">&amp;</span><span class="num">0</span> <span class="sym">{</span>IntToString Digits<span class="sym">}</span> Prec<span class="sym">}</span>
      <span class="kwa">end</span>
    <span class="kwa">end</span>

    I <span class="sym">= {</span>FloatToInt <span class="sym">{</span><span class="kwa">if</span> F <span class="sym">&gt;=</span> <span class="num">0.0</span> <span class="kwa">then</span> Floor <span class="kwa">else</span> Ceil <span class="kwa">end</span> F<span class="sym">}}</span>
    Frac <span class="sym">= {</span>FloatAbs F <span class="sym">- {</span>IntToFloat I<span class="sym">}}</span>
  <span class="kwa">in</span>
    <span class="sym">{</span>IntToString I<span class="sym">} #</span> &quot;<span class="sym">.</span>&quot; <span class="sym"># {</span>FractionToString Frac Prec<span class="sym">}</span>
  <span class="kwa">end</span>

  <span class="kwa">fun</span> <span class="sym">{</span>FloatToString F Prec<span class="sym">}</span>
    Result <span class="sym">= {</span>NewCell <span class="sym">{</span>VirtualString<span class="sym">.</span>toString <span class="sym">{</span>FloatToVS F Prec<span class="sym">}}}</span>
    P <span class="sym">=</span> <span class="kwa">fun</span> <span class="sym">{$</span> C<span class="sym">}</span> <span class="kwa">if</span> C <span class="sym">== &amp;~</span> <span class="kwa">then</span> <span class="sym">&amp;-</span> <span class="kwa">else</span> C <span class="kwa">end end</span>
  <span class="kwa">in</span>
    <span class="kwa">if</span> F <span class="sym">&lt;</span> <span class="num">0.0</span> <span class="kwa">andthen</span> <span class="sym">{</span>Nth <span class="sym">&#64;</span>Result <span class="num">1</span><span class="sym">} \= &amp;~</span> <span class="kwa">then</span>
      Result <span class="sym">:= &amp;~|&#64;</span>Result
    <span class="kwa">end</span>
    <span class="sym">{</span>Map <span class="sym">&#64;</span>Result P<span class="sym">}</span>
  <span class="kwa">end</span>

<span class="slc">% ------------- %</span>

  N

<span class="slc">% ------------- %</span>

<span class="kwa">in</span>
  N <span class="sym">= {</span>CmdlNArg <span class="num">1 100</span><span class="sym">}</span>

  <span class="sym">{</span>System<span class="sym">.</span>showInfo <span class="sym">{</span>FloatToString <span class="sym">{</span>Approximate N<span class="sym">}</span> <span class="num">9</span><span class="sym">}}</span>

  <span class="sym">{</span>Application<span class="sym">.</span>exit <span class="num">0</span><span class="sym">}</span>
<span class="kwa">end</span>

