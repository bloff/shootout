<span class="slc"># ----------------------------------------------------------------------</span>
<span class="slc"># The Great Computer Language Shootout</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc"># Contributed by Anthony Borla</span>
<span class="slc"># ----------------------------------------------------------------------</span>

<span class="kwb">$define</span> ITERATIONS <span class="num">50</span>
<span class="kwb">$define</span> LIMIT_SQR <span class="num">4.0</span>

<span class="kwb">$define</span> NO <span class="num">0</span>
<span class="kwb">$define</span> YES <span class="num">1</span>

<span class="kwa">procedure</span> main<span class="sym">(</span>argv<span class="sym">)</span>
  <span class="kwa">local</span> N<span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">,</span> bit_num<span class="sym">,</span> byte_acc<span class="sym">,</span> ZR<span class="sym">,</span> ZI<span class="sym">,</span> TR<span class="sym">,</span> TI<span class="sym">,</span> CR<span class="sym">,</span> CI<span class="sym">,</span> LIMIT_ADJ<span class="sym">,</span> OUTPUT<span class="sym">,</span> i

  N <span class="sym">:= (</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">] |</span> <span class="num">10</span><span class="sym">) ;</span> bit_num <span class="sym">:=</span> <span class="num">0</span> <span class="sym">;</span> byte_acc <span class="sym">:=</span> <span class="num">0</span> <span class="sym">;</span> OUTPUT <span class="sym">:=</span> NO

  write<span class="sym">(</span><span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> N<span class="sym">,</span> <span class="str">&quot; &quot;</span><span class="sym">,</span> N<span class="sym">)</span>

  <span class="kwa">every</span> y <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">to</span> <span class="sym">(</span>N <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">do</span>
  <span class="sym">{</span>
    <span class="kwa">every</span> x <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">to</span> <span class="sym">(</span>N <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">do</span>
    <span class="sym">{</span>
      ZR <span class="sym">:=</span> ZI <span class="sym">:=</span> TR <span class="sym">:=</span> TI <span class="sym">:=</span> <span class="num">0.0</span>
      CR <span class="sym">:=</span> <span class="num">2.0</span> <span class="sym">*</span> x <span class="sym">/</span> N <span class="sym">-</span> <span class="num">1.5</span> <span class="sym">;</span> CI <span class="sym">:=</span> <span class="num">2.0</span> <span class="sym">*</span> y <span class="sym">/</span> N <span class="sym">-</span> <span class="num">1.0</span>

      LIMIT_ADJ <span class="sym">:=</span> <span class="num">1</span> <span class="sym">;</span> i <span class="sym">:=</span> <span class="num">0</span>

      <span class="kwa">while</span> i <span class="sym">&lt;</span> ITERATIONS <span class="kwa">do</span>
      <span class="sym">{</span>
        TR <span class="sym">:=</span> ZR <span class="sym">*</span> ZR <span class="sym">-</span> ZI <span class="sym">*</span> ZI <span class="sym">+</span> CR <span class="sym">;</span> TI <span class="sym">:=</span> <span class="num">2.0</span> <span class="sym">*</span> ZR <span class="sym">*</span> ZI <span class="sym">+</span> CI
        ZR <span class="sym">:=</span> TR <span class="sym">;</span> ZI <span class="sym">:=</span> TI

        <span class="kwa">if</span> ZR <span class="sym">*</span> ZR <span class="sym">+</span> ZI <span class="sym">*</span> ZI <span class="sym">&gt;</span> LIMIT_SQR <span class="kwa">then</span> <span class="sym">{</span> LIMIT_ADJ <span class="sym">:=</span> <span class="num">0</span> <span class="sym">;</span> <span class="kwa">break</span> <span class="sym">}</span>

        i <span class="sym">+:=</span> <span class="num">1</span>
      <span class="sym">}</span>

      bit_num <span class="sym">+:=</span> <span class="num">1</span> <span class="sym">;</span> <span class="kwa">if</span> bit_num <span class="sym">=</span> <span class="num">8</span> <span class="kwa">then</span> OUTPUT <span class="sym">:=</span> YES

      byte_acc <span class="sym">:=</span> byte_acc <span class="sym">*</span> <span class="num">2</span> <span class="sym">+</span> LIMIT_ADJ

      <span class="kwa">if</span> x <span class="sym">= (</span>N <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> &amp; bit_num ~<span class="sym">=</span> <span class="num">8</span> <span class="kwa">then</span>
      <span class="sym">{</span>
        byte_acc <span class="sym">:=</span> byte_acc <span class="sym">* (</span><span class="num">2</span> ^ <span class="sym">(</span><span class="num">8</span> <span class="sym">-</span> N % <span class="num">8</span><span class="sym">)) ;</span> OUTPUT <span class="sym">:=</span> YES
      <span class="sym">}</span>

      <span class="kwa">if</span> OUTPUT <span class="sym">=</span> YES <span class="kwa">then</span>
      <span class="sym">{</span>
        writes<span class="sym">(</span>char<span class="sym">(</span>byte_acc<span class="sym">))</span>
        byte_acc <span class="sym">:=</span> bit_num <span class="sym">:=</span> <span class="num">0</span> <span class="sym">;</span> OUTPUT <span class="sym">:=</span> NO
      <span class="sym">}</span>
    <span class="sym">}</span>
  <span class="sym">}</span>

<span class="kwa">end</span>

