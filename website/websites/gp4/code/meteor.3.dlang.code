<span class="hl slc">// The Computer Language Benchmarks Game</span>
<span class="hl slc">// http://shootout.alioth.debian.org/</span>
<span class="hl slc">// contributed by Michael Deardeuff (grignaak)</span>
<span class="hl slc">// but all the real work was done by Ben St. John</span>
<span class="hl com">/*</span>
<span class="hl com"> (Real) Differences between this and Ben's implementation (g++ #4):</span>
<span class="hl com">    SPiece has a copy construtor</span>
<span class="hl com">   Soln has a clone() property</span>
<span class="hl com">   recordSolution uses the clone property</span>
<span class="hl com">*/</span>
<span class="hl kwa">import</span> std<span class="hl sym">.</span>stdio<span class="hl sym">;</span>

<span class="hl slc">//-- Enums, aliases, consts ----------</span>
<span class="hl kwa">enum</span> <span class="hl sym">{</span>X<span class="hl sym">,</span> Y<span class="hl sym">,</span> N_DIM<span class="hl sym">};</span>
<span class="hl kwa">enum</span> <span class="hl sym">{</span>EVEN<span class="hl sym">,</span> ODD<span class="hl sym">,</span> N_PARITY<span class="hl sym">};</span>
<span class="hl kwa">enum</span> <span class="hl sym">{</span>GOOD<span class="hl sym">,</span> BAD<span class="hl sym">,</span> ALWAYS_BAD<span class="hl sym">};</span>
<span class="hl kwa">enum</span> <span class="hl sym">{</span>OPEN<span class="hl sym">,</span> CLOSED<span class="hl sym">,</span> N_FIXED<span class="hl sym">};</span>


<span class="hl kwa">alias uint</span> BitVec<span class="hl sym">;</span>

<span class="hl kwa">const int</span> N_COL <span class="hl sym">=</span> <span class="hl num">5</span><span class="hl sym">;</span>
<span class="hl kwa">const int</span> N_ROW <span class="hl sym">=</span> <span class="hl num">10</span><span class="hl sym">;</span>
<span class="hl kwa">const int</span> N_CELL <span class="hl sym">=</span> N_COL <span class="hl sym">*</span> N_ROW<span class="hl sym">;</span>
<span class="hl kwa">const int</span> N_PIECE_TYPE <span class="hl sym">=</span> <span class="hl num">10</span><span class="hl sym">;</span>
<span class="hl kwa">const int</span> MAX_ISLAND_OFFSET <span class="hl sym">=</span> <span class="hl num">1024</span><span class="hl sym">;</span>
<span class="hl kwa">const int</span> N_ORIENT <span class="hl sym">=</span> <span class="hl num">12</span><span class="hl sym">;</span>

<span class="hl slc">//-- Globals -------------------------</span>
IslandInfo g_islandInfo<span class="hl sym">[</span>MAX_ISLAND_OFFSET<span class="hl sym">];</span>
<span class="hl kwa">int</span> g_nIslandInfo <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
OkPieces g_okPieces<span class="hl sym">[</span>N_ROW<span class="hl sym">][</span>N_COL<span class="hl sym">];</span>

<span class="hl kwa">const uint</span> g_firstRegion<span class="hl sym">[</span><span class="hl num">32</span><span class="hl sym">] = [</span>
   <span class="hl num">0x00</span><span class="hl sym">,</span> <span class="hl num">0x01</span><span class="hl sym">,</span> <span class="hl num">0x02</span><span class="hl sym">,</span> <span class="hl num">0x03</span><span class="hl sym">,</span>   <span class="hl num">0x04</span><span class="hl sym">,</span> <span class="hl num">0x01</span><span class="hl sym">,</span> <span class="hl num">0x06</span><span class="hl sym">,</span> <span class="hl num">0x07</span><span class="hl sym">,</span>
   <span class="hl num">0x08</span><span class="hl sym">,</span> <span class="hl num">0x01</span><span class="hl sym">,</span> <span class="hl num">0x02</span><span class="hl sym">,</span> <span class="hl num">0x03</span><span class="hl sym">,</span>   <span class="hl num">0x0c</span><span class="hl sym">,</span> <span class="hl num">0x01</span><span class="hl sym">,</span> <span class="hl num">0x0e</span><span class="hl sym">,</span> <span class="hl num">0x0f</span><span class="hl sym">,</span>

   <span class="hl num">0x10</span><span class="hl sym">,</span> <span class="hl num">0x01</span><span class="hl sym">,</span> <span class="hl num">0x02</span><span class="hl sym">,</span> <span class="hl num">0x03</span><span class="hl sym">,</span>   <span class="hl num">0x04</span><span class="hl sym">,</span> <span class="hl num">0x01</span><span class="hl sym">,</span> <span class="hl num">0x06</span><span class="hl sym">,</span> <span class="hl num">0x07</span><span class="hl sym">,</span>
   <span class="hl num">0x18</span><span class="hl sym">,</span> <span class="hl num">0x01</span><span class="hl sym">,</span> <span class="hl num">0x02</span><span class="hl sym">,</span> <span class="hl num">0x03</span><span class="hl sym">,</span>   <span class="hl num">0x1c</span><span class="hl sym">,</span> <span class="hl num">0x01</span><span class="hl sym">,</span> <span class="hl num">0x1e</span><span class="hl sym">,</span> <span class="hl num">0x1f</span>
<span class="hl sym">];</span>

<span class="hl kwa">const uint</span> g_flip<span class="hl sym">[</span><span class="hl num">32</span><span class="hl sym">] = [</span>
   <span class="hl num">0x00</span><span class="hl sym">,</span> <span class="hl num">0x10</span><span class="hl sym">,</span> <span class="hl num">0x08</span><span class="hl sym">,</span> <span class="hl num">0x18</span><span class="hl sym">,</span> <span class="hl num">0x04</span><span class="hl sym">,</span> <span class="hl num">0x14</span><span class="hl sym">,</span> <span class="hl num">0x0c</span><span class="hl sym">,</span> <span class="hl num">0x1c</span><span class="hl sym">,</span>
   <span class="hl num">0x02</span><span class="hl sym">,</span> <span class="hl num">0x12</span><span class="hl sym">,</span> <span class="hl num">0x0a</span><span class="hl sym">,</span> <span class="hl num">0x1a</span><span class="hl sym">,</span> <span class="hl num">0x06</span><span class="hl sym">,</span> <span class="hl num">0x16</span><span class="hl sym">,</span> <span class="hl num">0x0e</span><span class="hl sym">,</span> <span class="hl num">0x1e</span><span class="hl sym">,</span>

   <span class="hl num">0x01</span><span class="hl sym">,</span> <span class="hl num">0x11</span><span class="hl sym">,</span> <span class="hl num">0x09</span><span class="hl sym">,</span> <span class="hl num">0x19</span><span class="hl sym">,</span> <span class="hl num">0x05</span><span class="hl sym">,</span> <span class="hl num">0x15</span><span class="hl sym">,</span> <span class="hl num">0x0d</span><span class="hl sym">,</span> <span class="hl num">0x1d</span><span class="hl sym">,</span>
   <span class="hl num">0x03</span><span class="hl sym">,</span> <span class="hl num">0x13</span><span class="hl sym">,</span> <span class="hl num">0x0b</span><span class="hl sym">,</span> <span class="hl num">0x1b</span><span class="hl sym">,</span> <span class="hl num">0x07</span><span class="hl sym">,</span> <span class="hl num">0x17</span><span class="hl sym">,</span> <span class="hl num">0x0f</span><span class="hl sym">,</span> <span class="hl num">0x1f</span><span class="hl sym">,</span>
<span class="hl sym">];</span>

<span class="hl kwa">const uint</span> s_firstOne<span class="hl sym">[</span><span class="hl num">32</span><span class="hl sym">] = [</span>
   <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span>   <span class="hl num">2</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span>
   <span class="hl num">3</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span>   <span class="hl num">2</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span>

   <span class="hl num">4</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span>   <span class="hl num">2</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span>
   <span class="hl num">3</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span>   <span class="hl num">2</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span>
<span class="hl sym">];</span>

<span class="hl slc">//-- Functions -----------------------</span>
<span class="hl kwa">extern</span> <span class="hl sym">(</span>C<span class="hl sym">)</span> <span class="hl kwa">void</span><span class="hl sym">*</span> <span class="hl kwd">memset</span><span class="hl sym">(</span><span class="hl kwa">void</span><span class="hl sym">*,</span> <span class="hl kwa">int</span><span class="hl sym">,</span> <span class="hl kwa">int</span><span class="hl sym">);</span>

<span class="hl kwa">uint</span> <span class="hl kwd">getMask</span><span class="hl sym">(</span><span class="hl kwa">uint</span> iPos<span class="hl sym">) {</span><span class="hl kwa">return</span> <span class="hl sym">(</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>iPos<span class="hl sym">));}</span>

<span class="hl kwa">int</span> <span class="hl kwd">floor</span><span class="hl sym">(</span><span class="hl kwa">int</span> top<span class="hl sym">,</span> <span class="hl kwa">int</span> bot<span class="hl sym">) {</span>
   <span class="hl kwa">int</span> toZero <span class="hl sym">=</span> top <span class="hl sym">/</span> bot<span class="hl sym">;</span>
   <span class="hl slc">// negative numbers should be rounded down, not towards zero</span>
   <span class="hl kwa">if</span> <span class="hl sym">((</span>toZero <span class="hl sym">*</span> bot <span class="hl sym">!=</span> top<span class="hl sym">) &amp;&amp; ((</span>top <span class="hl sym">&lt;</span> <span class="hl num">0</span><span class="hl sym">) != (</span>bot <span class="hl sym">&lt;=</span> <span class="hl num">0</span><span class="hl sym">)))</span>
      toZero<span class="hl sym">--;</span>

   <span class="hl kwa">return</span> toZero<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwa">uint</span> <span class="hl kwd">getFirstOne</span><span class="hl sym">(</span>BitVec v<span class="hl sym">,</span> <span class="hl kwa">uint</span> startPos <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">) {</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span>v <span class="hl sym">==</span> <span class="hl kwa">cast</span><span class="hl sym">(</span>BitVec<span class="hl sym">)</span><span class="hl num">0</span><span class="hl sym">)</span>
      <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>

   <span class="hl kwa">uint</span> iPos <span class="hl sym">=</span> startPos<span class="hl sym">;</span>
   BitVec mask <span class="hl sym">=</span> <span class="hl num">0xff</span> <span class="hl sym">&lt;&lt;</span> startPos<span class="hl sym">;</span>
   <span class="hl kwa">while</span> <span class="hl sym">((</span>mask <span class="hl sym">&amp;</span> v<span class="hl sym">) ==</span> <span class="hl num">0</span><span class="hl sym">) {</span>
      mask <span class="hl sym">&lt;&lt;=</span> <span class="hl num">8</span><span class="hl sym">;</span>
      iPos <span class="hl sym">+=</span> <span class="hl num">8</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">uint</span> result <span class="hl sym">=</span> <span class="hl kwa">cast</span><span class="hl sym">(</span><span class="hl kwa">uint</span><span class="hl sym">)((</span>mask <span class="hl sym">&amp;</span> v<span class="hl sym">) &gt;&gt;</span> iPos<span class="hl sym">);</span>
   <span class="hl kwa">uint</span> resultLow <span class="hl sym">=</span> result <span class="hl sym">&amp;</span> <span class="hl num">0x0f</span><span class="hl sym">;</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span>resultLow <span class="hl sym">!=</span> <span class="hl num">0</span><span class="hl sym">)</span>
      iPos <span class="hl sym">+=</span> s_firstOne<span class="hl sym">[</span>resultLow<span class="hl sym">];</span>
   <span class="hl kwa">else</span>
      iPos <span class="hl sym">+=</span> <span class="hl num">4</span> <span class="hl sym">+</span> s_firstOne<span class="hl sym">[</span>result <span class="hl sym">&gt;&gt;</span> <span class="hl num">4</span><span class="hl sym">];</span>

   <span class="hl kwa">return</span> iPos<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwa">uint</span> <span class="hl kwd">countOnes</span><span class="hl sym">(</span>BitVec v<span class="hl sym">) {</span>
   <span class="hl kwa">uint</span> n <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">while</span> <span class="hl sym">(</span>v<span class="hl sym">) {</span>
      n<span class="hl sym">++;</span>
      v <span class="hl sym">=</span> v <span class="hl sym">&amp; (</span>v <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">);</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">return</span> n<span class="hl sym">;</span>
<span class="hl sym">}</span>


<span class="hl kwa">uint</span> <span class="hl kwd">flipTwoRows</span><span class="hl sym">(</span><span class="hl kwa">uint</span> bits<span class="hl sym">) {</span>
   <span class="hl kwa">uint</span> flipped <span class="hl sym">=</span> g_flip<span class="hl sym">[</span>bits <span class="hl sym">&gt;&gt;</span> N_COL<span class="hl sym">] &lt;&lt;</span> N_COL<span class="hl sym">;</span>
   <span class="hl kwa">return</span> <span class="hl sym">(</span>flipped <span class="hl sym">|</span> g_flip<span class="hl sym">[</span>bits <span class="hl sym">&amp;</span> Board<span class="hl sym">.</span>TOP_ROW<span class="hl sym">]);</span>
<span class="hl sym">}</span>

<span class="hl kwa">void</span> <span class="hl kwd">markBad</span><span class="hl sym">(</span>IslandInfo info<span class="hl sym">,</span> <span class="hl kwa">uint</span> mask<span class="hl sym">,</span> <span class="hl kwa">int</span> eo<span class="hl sym">,</span> bool always<span class="hl sym">) {</span>
   info<span class="hl sym">.</span>hasBad<span class="hl sym">[</span>eo<span class="hl sym">][</span>OPEN<span class="hl sym">] |=</span> mask<span class="hl sym">;</span>
   info<span class="hl sym">.</span>hasBad<span class="hl sym">[</span>eo<span class="hl sym">][</span>CLOSED<span class="hl sym">] |=</span> mask<span class="hl sym">;</span>

   <span class="hl kwa">if</span> <span class="hl sym">(</span>always<span class="hl sym">)</span>
      info<span class="hl sym">.</span>alwaysBad<span class="hl sym">[</span>eo<span class="hl sym">] |=</span> mask<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwa">void</span> <span class="hl kwd">initGlobals</span><span class="hl sym">() {</span>
   <span class="hl kwa">foreach</span> <span class="hl sym">(</span><span class="hl kwa">inout</span> IslandInfo i<span class="hl sym">;</span> g_islandInfo<span class="hl sym">)</span>
      i <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">IslandInfo</span><span class="hl sym">();</span>
   <span class="hl kwa">foreach</span> <span class="hl sym">(</span><span class="hl kwa">inout</span> OkPieces<span class="hl sym">[</span>N_COL<span class="hl sym">]</span> os<span class="hl sym">;</span> g_okPieces<span class="hl sym">)</span>
      <span class="hl kwa">foreach</span> <span class="hl sym">(</span><span class="hl kwa">inout</span> OkPieces o<span class="hl sym">;</span> os<span class="hl sym">)</span>
         o <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">OkPieces</span><span class="hl sym">();</span>
<span class="hl sym">}</span>




<span class="hl slc">//-- Classes -------------------------</span>

<span class="hl kwa">class</span> OkPieces <span class="hl sym">{</span>
   <span class="hl kwa">byte</span> nPieces<span class="hl sym">[</span>N_PIECE_TYPE<span class="hl sym">];</span>
   <span class="hl kwa">uint</span> pieceVec<span class="hl sym">[</span>N_PIECE_TYPE<span class="hl sym">][</span>N_ORIENT<span class="hl sym">];</span>
<span class="hl sym">};</span>


<span class="hl kwa">class</span> IslandInfo <span class="hl sym">{</span>
   <span class="hl kwa">uint</span> hasBad<span class="hl sym">[</span>N_FIXED<span class="hl sym">][</span>N_PARITY<span class="hl sym">];</span>
   <span class="hl kwa">uint</span> isKnown<span class="hl sym">[</span>N_FIXED<span class="hl sym">][</span>N_PARITY<span class="hl sym">];</span>
   <span class="hl kwa">uint</span> alwaysBad<span class="hl sym">[</span>N_PARITY<span class="hl sym">];</span>
<span class="hl sym">};</span>



<span class="hl kwa">class</span> Soln <span class="hl sym">{</span>
   <span class="hl kwa">static const int</span> NO_PIECE <span class="hl sym">= -</span><span class="hl num">1</span><span class="hl sym">;</span>

   bool <span class="hl kwd">isEmpty</span><span class="hl sym">() {</span><span class="hl kwa">return</span> <span class="hl sym">(</span>m_nPiece <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">);}</span>
   <span class="hl kwa">void</span> <span class="hl kwd">popPiece</span><span class="hl sym">() {</span>m_nPiece<span class="hl sym">--;</span> m_synched <span class="hl sym">=</span> <span class="hl kwa">false</span><span class="hl sym">;}</span>
   <span class="hl kwa">void</span> <span class="hl kwd">pushPiece</span><span class="hl sym">(</span>BitVec vec<span class="hl sym">,</span> <span class="hl kwa">int</span> iPiece<span class="hl sym">,</span> <span class="hl kwa">int</span> row<span class="hl sym">) {</span>
      SPiece p <span class="hl sym">=</span> m_pieces<span class="hl sym">[</span>m_nPiece<span class="hl sym">++];</span>
      p<span class="hl sym">.</span>vec <span class="hl sym">=</span> vec<span class="hl sym">;</span>
      p<span class="hl sym">.</span>iPiece <span class="hl sym">=</span> <span class="hl kwa">cast</span><span class="hl sym">(</span><span class="hl kwa">short</span><span class="hl sym">)</span>iPiece<span class="hl sym">;</span>
      p<span class="hl sym">.</span>row <span class="hl sym">=</span> <span class="hl kwa">cast</span><span class="hl sym">(</span><span class="hl kwa">short</span><span class="hl sym">)</span>row<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">this</span><span class="hl sym">() {</span> m_synched <span class="hl sym">=</span> <span class="hl kwa">false</span><span class="hl sym">;</span> m_nPiece <span class="hl sym">=</span> <span class="hl kwa">false</span><span class="hl sym">;</span> <span class="hl kwd">init</span><span class="hl sym">();}</span>

   <span class="hl kwa">class</span> SPiece <span class="hl sym">{</span>
      BitVec vec<span class="hl sym">;</span>
      <span class="hl kwa">short</span> iPiece<span class="hl sym">;</span>
      <span class="hl kwa">short</span> row<span class="hl sym">;</span>
      <span class="hl kwa">this</span><span class="hl sym">() {}</span>
      <span class="hl kwa">this</span><span class="hl sym">(</span>BitVec avec<span class="hl sym">,</span> <span class="hl kwa">uint</span> apiece<span class="hl sym">,</span> <span class="hl kwa">uint</span> arow<span class="hl sym">) {</span>
         vec <span class="hl sym">=</span> avec<span class="hl sym">;</span>
                iPiece <span class="hl sym">=</span> <span class="hl kwa">cast</span><span class="hl sym">(</span><span class="hl kwa">short</span><span class="hl sym">)</span>apiece<span class="hl sym">;</span>
                row <span class="hl sym">=</span> <span class="hl kwa">cast</span><span class="hl sym">(</span><span class="hl kwa">short</span><span class="hl sym">)</span>arow<span class="hl sym">;</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">this</span><span class="hl sym">(</span>SPiece other<span class="hl sym">) {</span>
         vec <span class="hl sym">=</span> other<span class="hl sym">.</span>vec<span class="hl sym">;</span>
         iPiece <span class="hl sym">=</span> other<span class="hl sym">.</span>iPiece<span class="hl sym">;</span>
         row <span class="hl sym">=</span> other<span class="hl sym">.</span>row<span class="hl sym">;</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   SPiece m_pieces<span class="hl sym">[</span>N_PIECE_TYPE<span class="hl sym">];</span>
   <span class="hl kwa">uint</span> m_nPiece<span class="hl sym">;</span>
   <span class="hl kwa">byte</span> m_cells<span class="hl sym">[</span>N_ROW<span class="hl sym">][</span>N_COL<span class="hl sym">];</span>
   bool m_synched<span class="hl sym">;</span>

   <span class="hl kwa">void</span> <span class="hl kwd">init</span><span class="hl sym">() {</span>
      <span class="hl kwa">foreach</span> <span class="hl sym">(</span><span class="hl kwa">inout</span> SPiece s<span class="hl sym">;</span> m_pieces<span class="hl sym">)</span>
         s <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">SPiece</span><span class="hl sym">();</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">this</span><span class="hl sym">(</span><span class="hl kwa">int</span> fillVal<span class="hl sym">) {</span>
      <span class="hl kwd">init</span><span class="hl sym">();</span>
      m_nPiece <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwd">fill</span><span class="hl sym">(</span>fillVal<span class="hl sym">);</span>
   <span class="hl sym">}</span>
   Soln <span class="hl kwd">clone</span><span class="hl sym">() {</span>
      Soln s <span class="hl sym">=</span> <span class="hl kwa">new</span> Soln<span class="hl sym">;</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">uint</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> m_pieces<span class="hl sym">.</span>length<span class="hl sym">;</span> i<span class="hl sym">++)</span>
         s<span class="hl sym">.</span>m_pieces<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">SPiece</span><span class="hl sym">(</span>m_pieces<span class="hl sym">[</span>i<span class="hl sym">]);</span>

      s<span class="hl sym">.</span>m_nPiece <span class="hl sym">=</span> m_nPiece<span class="hl sym">;</span>
      s<span class="hl sym">.</span>m_cells<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">..</span>$<span class="hl sym">] =</span> m_cells<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">..</span>$<span class="hl sym">];</span>
      s<span class="hl sym">.</span>m_synched <span class="hl sym">=</span> m_synched<span class="hl sym">;</span>
      <span class="hl kwa">return</span> s<span class="hl sym">;</span>
   <span class="hl sym">}</span>


   <span class="hl kwa">void</span> <span class="hl kwd">fill</span><span class="hl sym">(</span><span class="hl kwa">int</span> val<span class="hl sym">) {</span>
      m_synched <span class="hl sym">=</span> <span class="hl kwa">false</span><span class="hl sym">;</span>
      <span class="hl kwd">memset</span><span class="hl sym">(&amp;</span>m_cells<span class="hl sym">,</span> val<span class="hl sym">,</span> N_CELL<span class="hl sym">);</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">char</span><span class="hl sym">[]</span> <span class="hl kwd">toString</span><span class="hl sym">() {</span>
      <span class="hl kwa">char</span><span class="hl sym">[]</span> result<span class="hl sym">;</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">int</span> y <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> y <span class="hl sym">&lt;</span> N_ROW<span class="hl sym">;</span> y<span class="hl sym">++) {</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">int</span> x <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> x <span class="hl sym">&lt;</span> N_COL<span class="hl sym">;</span> x<span class="hl sym">++) {</span>
            <span class="hl kwa">int</span> val <span class="hl sym">=</span> m_cells<span class="hl sym">[</span>y<span class="hl sym">][</span>x<span class="hl sym">];</span>
            result <span class="hl sym">~= ((</span>val <span class="hl sym">==</span> NO_PIECE<span class="hl sym">)</span> ? <span class="hl str">'.'</span> <span class="hl sym">:</span> <span class="hl kwa">cast</span><span class="hl sym">(</span><span class="hl kwa">char</span><span class="hl sym">)(</span><span class="hl str">'0'</span> <span class="hl sym">+</span> val<span class="hl sym">));</span>
            result <span class="hl sym">~=</span> <span class="hl str">' '</span><span class="hl sym">;</span>
         <span class="hl sym">}</span>
         result <span class="hl sym">~=</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">;</span>

         <span class="hl slc">// indent every second line</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>y <span class="hl sym">%</span> <span class="hl num">2</span> <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span>
            result <span class="hl sym">~=</span> <span class="hl str">&quot; &quot;</span><span class="hl sym">;</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">return</span> result<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">void</span> <span class="hl kwd">setCells</span><span class="hl sym">() {</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>m_synched<span class="hl sym">)</span>
         <span class="hl kwa">return</span><span class="hl sym">;</span>

      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">uint</span> iPiece <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> iPiece <span class="hl sym">&lt;</span> m_nPiece<span class="hl sym">;</span> iPiece<span class="hl sym">++) {</span>
         SPiece p <span class="hl sym">=</span> m_pieces<span class="hl sym">[</span>iPiece<span class="hl sym">];</span>
         BitVec vec <span class="hl sym">=</span> p<span class="hl sym">.</span>vec<span class="hl sym">;</span>
         <span class="hl kwa">byte</span> pID <span class="hl sym">=</span> <span class="hl kwa">cast</span><span class="hl sym">(</span><span class="hl kwa">byte</span><span class="hl sym">)</span>p<span class="hl sym">.</span>iPiece<span class="hl sym">;</span>
         <span class="hl kwa">int</span> rowOffset <span class="hl sym">=</span> p<span class="hl sym">.</span>row<span class="hl sym">;</span>

         <span class="hl kwa">int</span> nNewCells <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">int</span> y <span class="hl sym">=</span> rowOffset<span class="hl sym">;</span> y <span class="hl sym">&lt;</span> N_ROW<span class="hl sym">;</span> y<span class="hl sym">++) {</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">int</span> x <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> x <span class="hl sym">&lt;</span> N_COL<span class="hl sym">;</span> x<span class="hl sym">++) {</span>
               <span class="hl kwa">if</span> <span class="hl sym">(</span>vec <span class="hl sym">&amp;</span> <span class="hl num">1</span><span class="hl sym">) {</span>
                  m_cells<span class="hl sym">[</span>y<span class="hl sym">][</span>x<span class="hl sym">] =</span> pID<span class="hl sym">;</span>
                  nNewCells<span class="hl sym">++;</span>
               <span class="hl sym">}</span>
               vec <span class="hl sym">&gt;&gt;=</span> <span class="hl num">1</span><span class="hl sym">;</span>
            <span class="hl sym">}</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>nNewCells <span class="hl sym">==</span> Piece<span class="hl sym">.</span>N_ELEM<span class="hl sym">)</span>
               <span class="hl kwa">break</span><span class="hl sym">;</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>
      m_synched <span class="hl sym">=</span> <span class="hl kwa">true</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>

   bool <span class="hl kwd">lessThan</span><span class="hl sym">(</span>Soln r<span class="hl sym">) {</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>m_pieces<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">].</span>iPiece <span class="hl sym">!=</span> r<span class="hl sym">.</span>m_pieces<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">].</span>iPiece<span class="hl sym">) {</span>
         <span class="hl kwa">return</span> m_pieces<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">].</span>iPiece <span class="hl sym">&lt;</span> r<span class="hl sym">.</span>m_pieces<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">].</span>iPiece<span class="hl sym">;</span>
      <span class="hl sym">}</span>

      <span class="hl kwd">setCells</span><span class="hl sym">();</span>
      r<span class="hl sym">.</span><span class="hl kwd">setCells</span><span class="hl sym">();</span>

      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">int</span> y <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> y <span class="hl sym">&lt;</span> N_ROW<span class="hl sym">;</span> y<span class="hl sym">++) {</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">int</span> x <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> x <span class="hl sym">&lt;</span> N_COL<span class="hl sym">;</span> x<span class="hl sym">++) {</span>
            <span class="hl kwa">int</span> lval <span class="hl sym">=</span> m_cells<span class="hl sym">[</span>y<span class="hl sym">][</span>x<span class="hl sym">];</span>
            <span class="hl kwa">int</span> rval <span class="hl sym">=</span> r<span class="hl sym">.</span>m_cells<span class="hl sym">[</span>y<span class="hl sym">][</span>x<span class="hl sym">];</span>

            <span class="hl kwa">if</span> <span class="hl sym">(</span>lval <span class="hl sym">!=</span> rval<span class="hl sym">)</span>
               <span class="hl kwa">return</span> <span class="hl sym">(</span>lval <span class="hl sym">&lt;</span> rval<span class="hl sym">);</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">return false</span><span class="hl sym">;</span> <span class="hl slc">// solutions are equal</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">void</span> <span class="hl kwd">spin</span><span class="hl sym">(</span>Soln spun<span class="hl sym">) {</span>
      <span class="hl kwd">setCells</span><span class="hl sym">();</span>

      <span class="hl slc">// swap cells</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">int</span> y <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> y <span class="hl sym">&lt;</span> N_ROW<span class="hl sym">;</span> y<span class="hl sym">++) {</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">int</span> x <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> x <span class="hl sym">&lt;</span> N_COL<span class="hl sym">;</span> x<span class="hl sym">++) {</span>
            <span class="hl kwa">byte</span> flipped <span class="hl sym">=</span> m_cells<span class="hl sym">[</span>N_ROW <span class="hl sym">-</span> y <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">][</span>N_COL <span class="hl sym">-</span> x <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">];</span>
            spun<span class="hl sym">.</span>m_cells<span class="hl sym">[</span>y<span class="hl sym">][</span>x<span class="hl sym">] =</span> flipped<span class="hl sym">;</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>

      <span class="hl slc">// swap first and last pieces (the rest aren't used)</span>
      spun<span class="hl sym">.</span>m_pieces<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">].</span>iPiece <span class="hl sym">=</span> m_pieces<span class="hl sym">[</span>N_PIECE_TYPE <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">].</span>iPiece<span class="hl sym">;</span>
      spun<span class="hl sym">.</span>m_synched <span class="hl sym">=</span> <span class="hl kwa">true</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>


<span class="hl slc">//------------</span>
<span class="hl kwa">class</span> Board <span class="hl sym">{</span>
   <span class="hl kwa">static const</span> BitVec L_EDGE_MASK <span class="hl sym">=</span>
      <span class="hl sym">(</span><span class="hl num">1L</span> <span class="hl sym">&lt;&lt;</span>  <span class="hl num">0</span><span class="hl sym">) | (</span><span class="hl num">1L</span> <span class="hl sym">&lt;&lt;</span>  <span class="hl num">5</span><span class="hl sym">) | (</span><span class="hl num">1L</span> <span class="hl sym">&lt;&lt;</span> <span class="hl num">10</span><span class="hl sym">) | (</span><span class="hl num">1L</span> <span class="hl sym">&lt;&lt;</span> <span class="hl num">15</span><span class="hl sym">) |</span>
      <span class="hl sym">(</span><span class="hl num">1L</span> <span class="hl sym">&lt;&lt;</span> <span class="hl num">20</span><span class="hl sym">) | (</span><span class="hl num">1L</span> <span class="hl sym">&lt;&lt;</span> <span class="hl num">25</span><span class="hl sym">) | (</span><span class="hl num">1L</span> <span class="hl sym">&lt;&lt;</span> <span class="hl num">30</span><span class="hl sym">);</span>
   <span class="hl kwa">static const</span> BitVec R_EDGE_MASK <span class="hl sym">=</span> L_EDGE_MASK <span class="hl sym">&lt;&lt;</span> <span class="hl num">4</span><span class="hl sym">;</span>
   <span class="hl kwa">static const</span> BitVec TOP_ROW <span class="hl sym">= (</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> N_COL<span class="hl sym">) -</span> <span class="hl num">1</span><span class="hl sym">;</span>
   <span class="hl kwa">static const</span> BitVec ROW_0_MASK <span class="hl sym">=</span>
      TOP_ROW <span class="hl sym">| (</span>TOP_ROW <span class="hl sym">&lt;&lt;</span> <span class="hl num">10</span><span class="hl sym">) | (</span>TOP_ROW <span class="hl sym">&lt;&lt;</span> <span class="hl num">20</span><span class="hl sym">) | (</span>TOP_ROW <span class="hl sym">&lt;&lt;</span> <span class="hl num">30</span><span class="hl sym">);</span>
   <span class="hl kwa">static const</span> BitVec ROW_1_MASK <span class="hl sym">=</span> ROW_0_MASK <span class="hl sym">&lt;&lt;</span> <span class="hl num">5</span><span class="hl sym">;</span>
   <span class="hl kwa">static const</span> BitVec BOARD_MASK <span class="hl sym">= (</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> <span class="hl num">30</span><span class="hl sym">) -</span> <span class="hl num">1</span><span class="hl sym">;</span>

   <span class="hl kwa">static uint</span> <span class="hl kwd">getIndex</span><span class="hl sym">(</span><span class="hl kwa">uint</span> x<span class="hl sym">,</span> <span class="hl kwa">uint</span> y<span class="hl sym">) {</span> <span class="hl kwa">return</span> y <span class="hl sym">*</span> N_COL <span class="hl sym">+</span> x<span class="hl sym">; }</span>

   Soln m_curSoln<span class="hl sym">;</span>
   Soln m_minSoln<span class="hl sym">;</span>
   Soln m_maxSoln<span class="hl sym">;</span>
   <span class="hl kwa">uint</span> m_nSoln<span class="hl sym">;</span>

   <span class="hl kwa">this</span><span class="hl sym">() {</span>
      m_curSoln <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Soln</span><span class="hl sym">(</span>Soln<span class="hl sym">.</span>NO_PIECE<span class="hl sym">),</span> m_minSoln <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Soln</span><span class="hl sym">(</span>N_PIECE_TYPE<span class="hl sym">),</span>
           m_maxSoln <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Soln</span><span class="hl sym">(</span>Soln<span class="hl sym">.</span>NO_PIECE<span class="hl sym">),</span> m_nSoln <span class="hl sym">= (</span><span class="hl num">0</span><span class="hl sym">);</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">static</span> bool <span class="hl kwd">badRegion</span><span class="hl sym">(</span><span class="hl kwa">inout</span> BitVec toFill<span class="hl sym">,</span> BitVec rNew<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl slc">// grow empty region, until it doesn't change any more</span>
      BitVec region<span class="hl sym">;</span>
      <span class="hl kwa">do</span> <span class="hl sym">{</span>
         region <span class="hl sym">=</span> rNew<span class="hl sym">;</span>

         <span class="hl slc">// simple grow up/down</span>
         rNew <span class="hl sym">|= (</span>region <span class="hl sym">&gt;&gt;</span> N_COL<span class="hl sym">);</span>
         rNew <span class="hl sym">|= (</span>region <span class="hl sym">&lt;&lt;</span> N_COL<span class="hl sym">);</span>

         <span class="hl slc">// grow right/left</span>
         rNew <span class="hl sym">|= (</span>region <span class="hl sym">&amp; ~</span>L_EDGE_MASK<span class="hl sym">) &gt;&gt;</span> <span class="hl num">1</span><span class="hl sym">;</span>
         rNew <span class="hl sym">|= (</span>region <span class="hl sym">&amp; ~</span>R_EDGE_MASK<span class="hl sym">) &lt;&lt;</span> <span class="hl num">1</span><span class="hl sym">;</span>

         <span class="hl slc">// tricky growth</span>
         BitVec evenRegion <span class="hl sym">=</span> region <span class="hl sym">&amp; (</span>ROW_0_MASK <span class="hl sym">&amp; ~</span>L_EDGE_MASK<span class="hl sym">);</span>
         rNew <span class="hl sym">|=</span> evenRegion <span class="hl sym">&gt;&gt; (</span>N_COL <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">);</span>
         rNew <span class="hl sym">|=</span> evenRegion <span class="hl sym">&lt;&lt; (</span>N_COL <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">);</span>
         BitVec oddRegion <span class="hl sym">=</span> region <span class="hl sym">&amp; (</span>ROW_1_MASK <span class="hl sym">&amp; ~</span>R_EDGE_MASK<span class="hl sym">);</span>
         rNew <span class="hl sym">|=</span> oddRegion <span class="hl sym">&gt;&gt; (</span>N_COL <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">);</span>
         rNew <span class="hl sym">|=</span> oddRegion <span class="hl sym">&lt;&lt; (</span>N_COL <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">);</span>

         <span class="hl slc">// clamp against existing pieces</span>
         rNew <span class="hl sym">&amp;=</span> toFill<span class="hl sym">;</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">while</span> <span class="hl sym">((</span>rNew <span class="hl sym">!=</span> toFill<span class="hl sym">) &amp;&amp; (</span>rNew <span class="hl sym">!=</span> region<span class="hl sym">));</span>

      <span class="hl slc">// subtract empty region from board</span>
      toFill ^<span class="hl sym">=</span> rNew<span class="hl sym">;</span>

      <span class="hl kwa">uint</span> nCells <span class="hl sym">=</span> <span class="hl kwd">countOnes</span><span class="hl sym">(</span>toFill<span class="hl sym">);</span>
      <span class="hl kwa">return</span> <span class="hl sym">(</span>nCells <span class="hl sym">%</span> Piece<span class="hl sym">.</span>N_ELEM <span class="hl sym">!=</span> <span class="hl num">0</span><span class="hl sym">);</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">static int</span> <span class="hl kwd">hasBadIslands</span><span class="hl sym">(</span>BitVec boardVec<span class="hl sym">,</span> <span class="hl kwa">int</span> row<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl slc">// skip over any filled rows</span>
      <span class="hl kwa">while</span> <span class="hl sym">((</span>boardVec <span class="hl sym">&amp;</span> TOP_ROW<span class="hl sym">) ==</span> TOP_ROW<span class="hl sym">) {</span>
         boardVec <span class="hl sym">&gt;&gt;=</span> N_COL<span class="hl sym">;</span>
         row<span class="hl sym">++;</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">uint</span> iInfo <span class="hl sym">=</span> boardVec <span class="hl sym">&amp; ((</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> <span class="hl num">2</span> <span class="hl sym">*</span> N_COL<span class="hl sym">) -</span> <span class="hl num">1</span><span class="hl sym">);</span>
      IslandInfo info <span class="hl sym">=</span> g_islandInfo<span class="hl sym">[</span>iInfo<span class="hl sym">];</span>

      <span class="hl kwa">uint</span> lastRow <span class="hl sym">= (</span>boardVec <span class="hl sym">&gt;&gt; (</span><span class="hl num">2</span> <span class="hl sym">*</span> N_COL<span class="hl sym">)) &amp;</span> TOP_ROW<span class="hl sym">;</span>
      <span class="hl kwa">uint</span> mask <span class="hl sym">=</span> <span class="hl kwd">getMask</span><span class="hl sym">(</span>lastRow<span class="hl sym">);</span>
      <span class="hl kwa">uint</span> isOdd <span class="hl sym">=</span> row <span class="hl sym">&amp;</span> <span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl kwa">uint</span><span class="hl sym">*</span> alwaysBad <span class="hl sym">= &amp;</span>info<span class="hl sym">.</span>alwaysBad<span class="hl sym">[</span>isOdd<span class="hl sym">];</span>

      <span class="hl kwa">if</span> <span class="hl sym">(*</span>alwaysBad <span class="hl sym">&amp;</span> mask<span class="hl sym">)</span>
         <span class="hl kwa">return</span> BAD<span class="hl sym">;</span>

      <span class="hl kwa">if</span> <span class="hl sym">(</span>boardVec <span class="hl sym">&amp; (</span>TOP_ROW <span class="hl sym">&lt;&lt;</span> N_COL <span class="hl sym">*</span> <span class="hl num">3</span><span class="hl sym">))</span>
         <span class="hl kwa">return</span> <span class="hl kwd">calcBadIslands</span><span class="hl sym">(</span>boardVec<span class="hl sym">,</span> row<span class="hl sym">);</span>

      <span class="hl kwa">int</span> isClosed <span class="hl sym">= (</span>row <span class="hl sym">&gt;</span> <span class="hl num">6</span><span class="hl sym">);</span> <span class="hl slc">// because we track 3 rows</span>
      <span class="hl kwa">uint</span><span class="hl sym">*</span> isKnownVector <span class="hl sym">= &amp;</span>info<span class="hl sym">.</span>isKnown<span class="hl sym">[</span>isOdd<span class="hl sym">][</span>isClosed<span class="hl sym">];</span>
      <span class="hl kwa">uint</span><span class="hl sym">*</span> badIsleVector <span class="hl sym">= &amp;</span>info<span class="hl sym">.</span>hasBad<span class="hl sym">[</span>isOdd<span class="hl sym">][</span>isClosed<span class="hl sym">];</span>

      <span class="hl kwa">if</span> <span class="hl sym">(*</span>isKnownVector <span class="hl sym">&amp;</span> mask<span class="hl sym">)</span>
         <span class="hl kwa">return</span> <span class="hl sym">((*</span>badIsleVector <span class="hl sym">&amp;</span> mask<span class="hl sym">) !=</span> <span class="hl num">0</span><span class="hl sym">);</span>

      <span class="hl kwa">if</span> <span class="hl sym">(</span>boardVec <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span>
         <span class="hl kwa">return</span> GOOD<span class="hl sym">;</span>

      <span class="hl kwa">int</span> hasBad <span class="hl sym">=</span> <span class="hl kwd">calcBadIslands</span><span class="hl sym">(</span>boardVec<span class="hl sym">,</span> row<span class="hl sym">);</span>

      <span class="hl sym">*</span>isKnownVector <span class="hl sym">|=</span> mask<span class="hl sym">;</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>hasBad<span class="hl sym">)</span>
         <span class="hl sym">*</span>badIsleVector <span class="hl sym">|=</span> mask<span class="hl sym">;</span>

      <span class="hl kwa">return</span> hasBad<span class="hl sym">;</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">static int</span> <span class="hl kwd">calcBadIslands</span><span class="hl sym">(</span>BitVec boardVec<span class="hl sym">,</span> <span class="hl kwa">int</span> row<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      BitVec toFill <span class="hl sym">= ~</span>boardVec<span class="hl sym">;</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>row <span class="hl sym">&amp;</span> <span class="hl num">1</span><span class="hl sym">) {</span>
         row<span class="hl sym">--;</span>
         toFill <span class="hl sym">&lt;&lt;=</span> N_COL<span class="hl sym">;</span>
      <span class="hl sym">}</span>

      BitVec boardMask <span class="hl sym">=</span> BOARD_MASK<span class="hl sym">;</span> <span class="hl slc">// all but the first two bits</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>row <span class="hl sym">&gt;</span> <span class="hl num">4</span><span class="hl sym">) {</span>
         <span class="hl kwa">int</span> boardMaskShift <span class="hl sym">= (</span>row <span class="hl sym">-</span> <span class="hl num">4</span><span class="hl sym">) *</span> N_COL<span class="hl sym">;</span>
         boardMask <span class="hl sym">&gt;&gt;=</span> boardMaskShift<span class="hl sym">;</span>
      <span class="hl sym">}</span>
      toFill <span class="hl sym">&amp;=</span> boardMask<span class="hl sym">;</span>

      <span class="hl slc">// a little pre-work to speed things up</span>
      BitVec bottom <span class="hl sym">= (</span>TOP_ROW <span class="hl sym">&lt;&lt; (</span><span class="hl num">5</span> <span class="hl sym">*</span> N_COL<span class="hl sym">));</span>
      bool filled <span class="hl sym">= ((</span>bottom <span class="hl sym">&amp;</span> toFill<span class="hl sym">) ==</span> bottom<span class="hl sym">);</span>
      <span class="hl kwa">while</span> <span class="hl sym">((</span>bottom <span class="hl sym">&amp;</span> toFill<span class="hl sym">) ==</span> bottom<span class="hl sym">) {</span>
         toFill ^<span class="hl sym">=</span> bottom<span class="hl sym">;</span>
         bottom <span class="hl sym">&gt;&gt;=</span> N_COL<span class="hl sym">;</span>
      <span class="hl sym">}</span>

      BitVec startRegion<span class="hl sym">;</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>filled <span class="hl sym">|| (</span>row <span class="hl sym">&lt;</span> <span class="hl num">4</span><span class="hl sym">))</span>
         startRegion <span class="hl sym">=</span> bottom <span class="hl sym">&amp;</span> toFill<span class="hl sym">;</span>
      <span class="hl kwa">else</span> <span class="hl sym">{</span>
         startRegion <span class="hl sym">=</span> g_firstRegion<span class="hl sym">[</span>toFill <span class="hl sym">&amp;</span> TOP_ROW<span class="hl sym">];</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>startRegion <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)  {</span>
            startRegion <span class="hl sym">= (</span>toFill <span class="hl sym">&gt;&gt;</span> N_COL<span class="hl sym">) &amp;</span> TOP_ROW<span class="hl sym">;</span>
            startRegion <span class="hl sym">=</span> g_firstRegion<span class="hl sym">[</span>startRegion<span class="hl sym">];</span>
            startRegion <span class="hl sym">&lt;&lt;=</span> N_COL<span class="hl sym">;</span>
         <span class="hl sym">}</span>
         startRegion <span class="hl sym">|= (</span>startRegion <span class="hl sym">&lt;&lt;</span> N_COL<span class="hl sym">) &amp;</span> toFill<span class="hl sym">;</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">while</span> <span class="hl sym">(</span>toFill<span class="hl sym">)    {</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">badRegion</span><span class="hl sym">(</span>toFill<span class="hl sym">,</span> startRegion<span class="hl sym">))</span>
            <span class="hl kwa">return</span> <span class="hl sym">(</span>toFill ? ALWAYS_BAD <span class="hl sym">:</span> BAD<span class="hl sym">);</span>
         <span class="hl kwa">int</span> iPos <span class="hl sym">=</span> <span class="hl kwd">getFirstOne</span><span class="hl sym">(</span>toFill<span class="hl sym">);</span>
         startRegion <span class="hl sym">=</span> <span class="hl kwd">getMask</span><span class="hl sym">(</span>iPos<span class="hl sym">);</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">return</span> GOOD<span class="hl sym">;</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">static void</span> <span class="hl kwd">calcAlwaysBad</span><span class="hl sym">() {</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">uint</span> iWord <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span> iWord <span class="hl sym">&lt;</span> MAX_ISLAND_OFFSET<span class="hl sym">;</span> iWord<span class="hl sym">++) {</span>
         IslandInfo isleInfo <span class="hl sym">=</span> g_islandInfo<span class="hl sym">[</span>iWord<span class="hl sym">];</span>
         IslandInfo flipped <span class="hl sym">=</span> g_islandInfo<span class="hl sym">[</span><span class="hl kwd">flipTwoRows</span><span class="hl sym">(</span>iWord<span class="hl sym">)];</span>

         <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">uint</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> mask <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">32</span><span class="hl sym">;</span> i<span class="hl sym">++,</span> mask <span class="hl sym">&lt;&lt;=</span> <span class="hl num">1</span><span class="hl sym">) {</span>
            <span class="hl kwa">uint</span> boardVec <span class="hl sym">= (</span>i <span class="hl sym">&lt;&lt; (</span><span class="hl num">2</span> <span class="hl sym">*</span> N_COL<span class="hl sym">)) |</span> iWord<span class="hl sym">;</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>isleInfo<span class="hl sym">.</span>isKnown<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">][</span>OPEN<span class="hl sym">] &amp;</span> mask<span class="hl sym">)</span>
               <span class="hl kwa">continue</span><span class="hl sym">;</span>

            <span class="hl kwa">int</span> hasBad <span class="hl sym">=</span> <span class="hl kwd">calcBadIslands</span><span class="hl sym">(</span>boardVec<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">);</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>hasBad <span class="hl sym">!=</span> GOOD<span class="hl sym">) {</span>
               bool always <span class="hl sym">= (</span>hasBad<span class="hl sym">==</span>ALWAYS_BAD<span class="hl sym">);</span>
               <span class="hl kwd">markBad</span><span class="hl sym">(</span>isleInfo<span class="hl sym">,</span> mask<span class="hl sym">,</span> EVEN<span class="hl sym">,</span> always<span class="hl sym">);</span>

               <span class="hl kwa">uint</span> flipMask <span class="hl sym">=</span> <span class="hl kwd">getMask</span><span class="hl sym">(</span>g_flip<span class="hl sym">[</span>i<span class="hl sym">]);</span>
               <span class="hl kwd">markBad</span><span class="hl sym">(</span>flipped<span class="hl sym">,</span> flipMask<span class="hl sym">,</span> ODD<span class="hl sym">,</span> always<span class="hl sym">);</span>
            <span class="hl sym">}</span>
         <span class="hl sym">}</span>
         flipped<span class="hl sym">.</span>isKnown<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">][</span>OPEN<span class="hl sym">] =</span> <span class="hl kwa">cast</span><span class="hl sym">(</span><span class="hl kwa">uint</span><span class="hl sym">)(-</span><span class="hl num">1</span><span class="hl sym">);</span>
         isleInfo<span class="hl sym">.</span>isKnown<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">][</span>OPEN<span class="hl sym">] =</span> <span class="hl kwa">cast</span><span class="hl sym">(</span><span class="hl kwa">uint</span><span class="hl sym">)(-</span><span class="hl num">1</span><span class="hl sym">);</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">static</span> bool <span class="hl kwd">hasBadIslandsSingle</span><span class="hl sym">(</span>BitVec boardVec<span class="hl sym">,</span> <span class="hl kwa">int</span> row<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      BitVec toFill <span class="hl sym">= ~</span>boardVec<span class="hl sym">;</span>
      bool isOdd <span class="hl sym">=</span> <span class="hl kwa">cast</span><span class="hl sym">(</span>bool<span class="hl sym">)(</span>row <span class="hl sym">&amp;</span> <span class="hl num">1</span><span class="hl sym">);</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>isOdd<span class="hl sym">) {</span>
         row<span class="hl sym">--;</span>
         toFill <span class="hl sym">&lt;&lt;=</span> N_COL<span class="hl sym">;</span> <span class="hl slc">// shift to even aligned</span>
         toFill <span class="hl sym">|=</span> TOP_ROW<span class="hl sym">;</span>
      <span class="hl sym">}</span>

      BitVec startRegion <span class="hl sym">=</span> TOP_ROW<span class="hl sym">;</span>
      BitVec lastRow <span class="hl sym">=</span> TOP_ROW <span class="hl sym">&lt;&lt; (</span><span class="hl num">5</span> <span class="hl sym">*</span> N_COL<span class="hl sym">);</span>
      BitVec boardMask <span class="hl sym">=</span> BOARD_MASK<span class="hl sym">;</span> <span class="hl slc">// all but the first two bits</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>row <span class="hl sym">&gt;=</span> <span class="hl num">4</span><span class="hl sym">)</span>
         boardMask <span class="hl sym">&gt;&gt;= ((</span>row <span class="hl sym">-</span> <span class="hl num">4</span><span class="hl sym">) *</span> N_COL<span class="hl sym">);</span>
      <span class="hl kwa">else if</span> <span class="hl sym">(</span>isOdd <span class="hl sym">|| (</span>row <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">))</span>
         startRegion <span class="hl sym">=</span> lastRow<span class="hl sym">;</span>

      toFill <span class="hl sym">&amp;=</span> boardMask<span class="hl sym">;</span>
      startRegion <span class="hl sym">&amp;=</span> toFill<span class="hl sym">;</span>

      <span class="hl kwa">while</span> <span class="hl sym">(</span>toFill<span class="hl sym">)    {</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">badRegion</span><span class="hl sym">(</span>toFill<span class="hl sym">,</span> startRegion<span class="hl sym">))</span>
            <span class="hl kwa">return true</span><span class="hl sym">;</span>
         <span class="hl kwa">int</span> iPos <span class="hl sym">=</span> <span class="hl kwd">getFirstOne</span><span class="hl sym">(</span>toFill<span class="hl sym">);</span>
         startRegion <span class="hl sym">=</span> <span class="hl kwd">getMask</span><span class="hl sym">(</span>iPos<span class="hl sym">);</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">return false</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">void</span> <span class="hl kwd">genAllSolutions</span><span class="hl sym">(</span>BitVec boardVec<span class="hl sym">,</span> <span class="hl kwa">uint</span> placedPieces<span class="hl sym">,</span> <span class="hl kwa">uint</span> row<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">while</span> <span class="hl sym">((</span>boardVec <span class="hl sym">&amp;</span> TOP_ROW<span class="hl sym">) ==</span> TOP_ROW<span class="hl sym">) {</span>
         boardVec <span class="hl sym">&gt;&gt;=</span> N_COL<span class="hl sym">;</span>
         row<span class="hl sym">++;</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">uint</span> iNextFill <span class="hl sym">=</span> s_firstOne<span class="hl sym">[~</span>boardVec <span class="hl sym">&amp;</span> TOP_ROW<span class="hl sym">];</span>
      OkPieces allowed <span class="hl sym">=</span> g_okPieces<span class="hl sym">[</span>row<span class="hl sym">][</span>iNextFill<span class="hl sym">];</span>

      <span class="hl kwa">int</span> iPiece <span class="hl sym">=</span> <span class="hl kwd">getFirstOne</span><span class="hl sym">(~</span>placedPieces<span class="hl sym">);</span>
      <span class="hl kwa">int</span> pieceMask <span class="hl sym">=</span> <span class="hl kwd">getMask</span><span class="hl sym">(</span>iPiece<span class="hl sym">);</span>
      <span class="hl kwa">for</span> <span class="hl sym">(;</span> iPiece <span class="hl sym">&lt;</span> N_PIECE_TYPE<span class="hl sym">;</span> iPiece<span class="hl sym">++,</span> pieceMask <span class="hl sym">&lt;&lt;=</span> <span class="hl num">1</span><span class="hl sym">)</span>
      <span class="hl sym">{</span>
         <span class="hl slc">// skip if we've already used this piece</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>pieceMask <span class="hl sym">&amp;</span> placedPieces<span class="hl sym">)</span>
            <span class="hl kwa">continue</span><span class="hl sym">;</span>

         placedPieces <span class="hl sym">|=</span> pieceMask<span class="hl sym">;</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">int</span> iOrient <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> iOrient <span class="hl sym">&lt;</span> allowed<span class="hl sym">.</span>nPieces<span class="hl sym">[</span>iPiece<span class="hl sym">];</span> iOrient<span class="hl sym">++) {</span>
            BitVec pieceVec <span class="hl sym">=</span> allowed<span class="hl sym">.</span>pieceVec<span class="hl sym">[</span>iPiece<span class="hl sym">][</span>iOrient<span class="hl sym">];</span>

            <span class="hl slc">// check if piece conflicts with other pieces</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>pieceVec <span class="hl sym">&amp;</span> boardVec<span class="hl sym">)</span>
               <span class="hl kwa">continue</span><span class="hl sym">;</span>

            <span class="hl slc">// add the piece to the board</span>
            boardVec <span class="hl sym">|=</span> pieceVec<span class="hl sym">;</span>

            <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">hasBadIslands</span><span class="hl sym">(</span>boardVec<span class="hl sym">,</span> row<span class="hl sym">)) {</span>
               boardVec ^<span class="hl sym">=</span> pieceVec<span class="hl sym">;</span>
               <span class="hl kwa">continue</span><span class="hl sym">;</span>
            <span class="hl sym">}</span>

            m_curSoln<span class="hl sym">.</span><span class="hl kwd">pushPiece</span><span class="hl sym">(</span>pieceVec<span class="hl sym">,</span> iPiece<span class="hl sym">,</span> row<span class="hl sym">);</span>

            <span class="hl slc">// recur or record solution</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>placedPieces <span class="hl sym">!=</span> Piece<span class="hl sym">.</span>ALL_PIECE_MASK<span class="hl sym">)</span>
               <span class="hl kwd">genAllSolutions</span><span class="hl sym">(</span>boardVec<span class="hl sym">,</span> placedPieces<span class="hl sym">,</span> row<span class="hl sym">);</span>
            <span class="hl kwa">else</span>
               <span class="hl kwd">recordSolution</span><span class="hl sym">(</span>m_curSoln<span class="hl sym">);</span>

            <span class="hl slc">// remove the piece before continuing with a new piece</span>
            boardVec ^<span class="hl sym">=</span> pieceVec<span class="hl sym">;</span>
            m_curSoln<span class="hl sym">.</span><span class="hl kwd">popPiece</span><span class="hl sym">();</span>
         <span class="hl sym">}</span>

         placedPieces ^<span class="hl sym">=</span> pieceMask<span class="hl sym">;</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">void</span> <span class="hl kwd">recordSolution</span><span class="hl sym">(</span>Soln s<span class="hl sym">) {</span>
      m_nSoln <span class="hl sym">+=</span> <span class="hl num">2</span><span class="hl sym">;</span> <span class="hl slc">// add solution and its rotation</span>

      <span class="hl kwa">if</span> <span class="hl sym">(</span>m_minSoln<span class="hl sym">.</span><span class="hl kwd">isEmpty</span><span class="hl sym">()) {</span>
         m_minSoln <span class="hl sym">=</span> m_maxSoln <span class="hl sym">=</span> s<span class="hl sym">.</span>clone<span class="hl sym">;</span>
         <span class="hl kwa">return</span><span class="hl sym">;</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">if</span> <span class="hl sym">(</span>s<span class="hl sym">.</span><span class="hl kwd">lessThan</span><span class="hl sym">(</span>m_minSoln<span class="hl sym">))</span>
         m_minSoln <span class="hl sym">=</span> s<span class="hl sym">.</span>clone<span class="hl sym">;</span>
      <span class="hl kwa">else if</span> <span class="hl sym">(</span>m_maxSoln<span class="hl sym">.</span><span class="hl kwd">lessThan</span><span class="hl sym">(</span>s<span class="hl sym">))</span>
         m_maxSoln <span class="hl sym">=</span> s<span class="hl sym">.</span>clone<span class="hl sym">;</span>

      Soln spun <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Soln</span><span class="hl sym">();</span>
      s<span class="hl sym">.</span><span class="hl kwd">spin</span><span class="hl sym">(</span>spun<span class="hl sym">);</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>spun<span class="hl sym">.</span><span class="hl kwd">lessThan</span><span class="hl sym">(</span>m_minSoln<span class="hl sym">))</span>
         m_minSoln <span class="hl sym">=</span> spun<span class="hl sym">;</span>
      <span class="hl kwa">else if</span> <span class="hl sym">(</span>m_maxSoln<span class="hl sym">.</span><span class="hl kwd">lessThan</span><span class="hl sym">(</span>spun<span class="hl sym">))</span>
         m_maxSoln <span class="hl sym">=</span> spun<span class="hl sym">;</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl slc">//------------</span>
<span class="hl kwa">class</span> Piece <span class="hl sym">{</span>
   <span class="hl kwa">class</span> Instance <span class="hl sym">{</span>
      <span class="hl kwa">ulong</span> m_allowed<span class="hl sym">;</span>
      BitVec m_vec<span class="hl sym">;</span>
      <span class="hl kwa">int</span> m_offset<span class="hl sym">;</span>
   <span class="hl sym">};</span>

   <span class="hl kwa">static const int</span> N_ELEM <span class="hl sym">=</span> <span class="hl num">5</span><span class="hl sym">;</span>
   <span class="hl kwa">static const int</span> ALL_PIECE_MASK <span class="hl sym">= (</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> N_PIECE_TYPE<span class="hl sym">) -</span> <span class="hl num">1</span><span class="hl sym">;</span>
   <span class="hl kwa">static const uint</span> SKIP_PIECE <span class="hl sym">=</span> <span class="hl num">5</span><span class="hl sym">;</span> <span class="hl slc">// it's magic!</span>

   <span class="hl kwa">alias int</span> TPts<span class="hl sym">[</span>N_ELEM<span class="hl sym">][</span>N_DIM<span class="hl sym">];</span>

   <span class="hl kwa">static const</span> BitVec BaseVecs<span class="hl sym">[</span>N_PIECE_TYPE<span class="hl sym">] = [</span>
   <span class="hl num">0x10f</span><span class="hl sym">,</span> <span class="hl num">0x0cb</span><span class="hl sym">,</span> <span class="hl num">0x1087</span><span class="hl sym">,</span> <span class="hl num">0x427</span><span class="hl sym">,</span> <span class="hl num">0x465</span><span class="hl sym">,</span>
   <span class="hl num">0x0c7</span><span class="hl sym">,</span> <span class="hl num">0x8423</span><span class="hl sym">,</span> <span class="hl num">0x0a7</span><span class="hl sym">,</span> <span class="hl num">0x187</span><span class="hl sym">,</span> <span class="hl num">0x08f</span>
   <span class="hl sym">];</span>

   <span class="hl kwa">static</span> Piece s_basePiece<span class="hl sym">[</span>N_PIECE_TYPE<span class="hl sym">][</span>N_ORIENT<span class="hl sym">];</span>

   Instance m_instance<span class="hl sym">[</span>N_PARITY<span class="hl sym">];</span>

   <span class="hl kwa">void</span> <span class="hl kwd">init</span><span class="hl sym">() {</span>
      <span class="hl kwa">foreach</span> <span class="hl sym">(</span><span class="hl kwa">inout</span> Instance i<span class="hl sym">;</span> m_instance<span class="hl sym">)</span>
         i <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Instance</span><span class="hl sym">();</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">this</span><span class="hl sym">() {</span><span class="hl kwd">init</span><span class="hl sym">();}</span>

   <span class="hl kwa">static this</span><span class="hl sym">() {</span>
   <span class="hl kwa">foreach</span> <span class="hl sym">(</span><span class="hl kwa">inout</span> Piece<span class="hl sym">[</span>N_ORIENT<span class="hl sym">]</span> ps<span class="hl sym">;</span> s_basePiece<span class="hl sym">)</span>
      <span class="hl kwa">foreach</span> <span class="hl sym">(</span><span class="hl kwa">inout</span> Piece p<span class="hl sym">;</span> ps<span class="hl sym">)</span>
         p <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Piece</span><span class="hl sym">();</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">static void</span> <span class="hl kwd">setCoordList</span><span class="hl sym">(</span>BitVec vec<span class="hl sym">,</span> TPts pts<span class="hl sym">) {</span>
      <span class="hl kwa">int</span> iPt <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      BitVec mask <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">int</span> y <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> y <span class="hl sym">&lt;</span> N_ROW<span class="hl sym">;</span> y<span class="hl sym">++) {</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">int</span> x <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> x <span class="hl sym">&lt;</span> N_COL<span class="hl sym">;</span> x<span class="hl sym">++) {</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>mask <span class="hl sym">&amp;</span> vec<span class="hl sym">) {</span>
               pts<span class="hl sym">[</span>iPt<span class="hl sym">][</span>X<span class="hl sym">] =</span> x<span class="hl sym">;</span>
               pts<span class="hl sym">[</span>iPt<span class="hl sym">][</span>Y<span class="hl sym">] =</span> y<span class="hl sym">;</span>

               iPt<span class="hl sym">++;</span>
            <span class="hl sym">}</span>
            mask <span class="hl sym">&lt;&lt;=</span> <span class="hl num">1</span><span class="hl sym">;</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">static</span> BitVec <span class="hl kwd">toBitVector</span><span class="hl sym">(</span>TPts pts<span class="hl sym">) {</span>
      <span class="hl kwa">int</span> y<span class="hl sym">,</span> x<span class="hl sym">;</span>
      BitVec result <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">int</span> iPt <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> iPt <span class="hl sym">&lt;</span> N_ELEM<span class="hl sym">;</span> iPt<span class="hl sym">++) {</span>
         x <span class="hl sym">=</span> pts<span class="hl sym">[</span>iPt<span class="hl sym">][</span>X<span class="hl sym">];</span>
         y <span class="hl sym">=</span> pts<span class="hl sym">[</span>iPt<span class="hl sym">][</span>Y<span class="hl sym">];</span>

         <span class="hl kwa">int</span> pos <span class="hl sym">=</span> Board<span class="hl sym">.</span><span class="hl kwd">getIndex</span><span class="hl sym">(</span>x<span class="hl sym">,</span> y<span class="hl sym">);</span>
         result <span class="hl sym">|= (</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> pos<span class="hl sym">);</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">return</span> result<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">static void</span> <span class="hl kwd">shiftUpLines</span><span class="hl sym">(</span>TPts pts<span class="hl sym">,</span> <span class="hl kwa">int</span> shift<span class="hl sym">) {</span>
      <span class="hl slc">// vertical shifts have a twist</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">int</span> iPt <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> iPt <span class="hl sym">&lt;</span> N_ELEM<span class="hl sym">;</span> iPt<span class="hl sym">++) {</span>
         <span class="hl kwa">int</span><span class="hl sym">*</span> rx <span class="hl sym">= &amp;</span>pts<span class="hl sym">[</span>iPt<span class="hl sym">][</span>X<span class="hl sym">];</span>
         <span class="hl kwa">int</span><span class="hl sym">*</span> ry <span class="hl sym">= &amp;</span>pts<span class="hl sym">[</span>iPt<span class="hl sym">][</span>Y<span class="hl sym">];</span>

         <span class="hl kwa">if</span> <span class="hl sym">(*</span>ry <span class="hl sym">&amp;</span> shift <span class="hl sym">&amp;</span> <span class="hl num">0x1</span><span class="hl sym">)</span>
            <span class="hl sym">(*</span>rx<span class="hl sym">)++;</span>
         <span class="hl sym">*</span>ry <span class="hl sym">-=</span> shift<span class="hl sym">;</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">static int</span> <span class="hl kwd">shiftToX0</span><span class="hl sym">(</span>TPts pts<span class="hl sym">,</span> Instance instance<span class="hl sym">,</span> <span class="hl kwa">int</span> offsetRow<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl slc">// .. determine shift</span>
      <span class="hl kwa">int</span> x<span class="hl sym">,</span> y<span class="hl sym">,</span> iPt<span class="hl sym">;</span>
      <span class="hl kwa">int</span> xMin <span class="hl sym">=</span> pts<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">][</span>X<span class="hl sym">];</span>
      <span class="hl kwa">int</span> xMax <span class="hl sym">=</span> xMin<span class="hl sym">;</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span>iPt <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span> iPt <span class="hl sym">&lt;</span> N_ELEM<span class="hl sym">;</span> iPt<span class="hl sym">++) {</span>
         x <span class="hl sym">=</span> pts<span class="hl sym">[</span>iPt<span class="hl sym">][</span>X<span class="hl sym">];</span>
         y <span class="hl sym">=</span> pts<span class="hl sym">[</span>iPt<span class="hl sym">][</span>Y<span class="hl sym">];</span>

         <span class="hl kwa">if</span> <span class="hl sym">(</span>x <span class="hl sym">&lt;</span> xMin<span class="hl sym">)</span>
            xMin <span class="hl sym">=</span> x<span class="hl sym">;</span>
         <span class="hl kwa">else if</span> <span class="hl sym">(</span>x <span class="hl sym">&gt;</span> xMax<span class="hl sym">)</span>
            xMax <span class="hl sym">=</span> x<span class="hl sym">;</span>
      <span class="hl sym">}</span>

      <span class="hl slc">// I'm dying for a 'foreach' here</span>
      <span class="hl kwa">int</span> offset <span class="hl sym">=</span> N_ELEM<span class="hl sym">;</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span>iPt <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> iPt <span class="hl sym">&lt;</span> N_ELEM<span class="hl sym">;</span> iPt<span class="hl sym">++) {</span>
         <span class="hl kwa">int</span><span class="hl sym">*</span> rx <span class="hl sym">= &amp;</span>pts<span class="hl sym">[</span>iPt<span class="hl sym">][</span>X<span class="hl sym">];</span>
         <span class="hl kwa">int</span><span class="hl sym">*</span> ry <span class="hl sym">= &amp;</span>pts<span class="hl sym">[</span>iPt<span class="hl sym">][</span>Y<span class="hl sym">];</span>

         <span class="hl sym">*</span>rx <span class="hl sym">-=</span> xMin<span class="hl sym">;</span>

         <span class="hl slc">// check offset -- leftmost cell on top line</span>
         <span class="hl kwa">if</span> <span class="hl sym">((*</span>ry <span class="hl sym">==</span> offsetRow<span class="hl sym">) &amp;&amp; (*</span>rx <span class="hl sym">&lt;</span> offset<span class="hl sym">))</span>
            offset <span class="hl sym">= *</span>rx<span class="hl sym">;</span>
      <span class="hl sym">}</span>

      instance<span class="hl sym">.</span>m_offset <span class="hl sym">=</span> offset<span class="hl sym">;</span>
      instance<span class="hl sym">.</span>m_vec <span class="hl sym">=</span> <span class="hl kwd">toBitVector</span><span class="hl sym">(</span>pts<span class="hl sym">);</span>
      <span class="hl kwa">return</span> xMax <span class="hl sym">-</span> xMin<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">void</span> <span class="hl kwd">setOkPos</span><span class="hl sym">(</span><span class="hl kwa">uint</span> isOdd<span class="hl sym">,</span> <span class="hl kwa">int</span> w<span class="hl sym">,</span> <span class="hl kwa">int</span> h<span class="hl sym">) {</span>
      Instance p <span class="hl sym">=</span> m_instance<span class="hl sym">[</span>isOdd<span class="hl sym">];</span>
      p<span class="hl sym">.</span>m_allowed <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwa">ulong</span> posMask <span class="hl sym">=</span> <span class="hl num">1U</span>L <span class="hl sym">&lt;&lt; (</span>isOdd <span class="hl sym">*</span> N_COL<span class="hl sym">);</span>

      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">int</span> y <span class="hl sym">=</span> isOdd<span class="hl sym">;</span> y <span class="hl sym">&lt;</span> N_ROW <span class="hl sym">-</span> h<span class="hl sym">;</span> y<span class="hl sym">+=</span><span class="hl num">2</span><span class="hl sym">,</span> posMask <span class="hl sym">&lt;&lt;=</span> N_COL<span class="hl sym">) {</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>p<span class="hl sym">.</span>m_offset<span class="hl sym">)</span>
            posMask <span class="hl sym">&lt;&lt;=</span> p<span class="hl sym">.</span>m_offset<span class="hl sym">;</span>

         <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">int</span> xPos <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> xPos <span class="hl sym">&lt;</span> N_COL <span class="hl sym">-</span> p<span class="hl sym">.</span>m_offset<span class="hl sym">;</span> xPos<span class="hl sym">++,</span> posMask <span class="hl sym">&lt;&lt;=</span> <span class="hl num">1</span><span class="hl sym">) {</span>
            <span class="hl slc">// check if the new position is on the board</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>xPos <span class="hl sym">&gt;=</span> N_COL <span class="hl sym">-</span> w<span class="hl sym">)</span>
               <span class="hl kwa">continue</span><span class="hl sym">;</span>

            <span class="hl slc">// move it to the desired location</span>
            BitVec pieceVec <span class="hl sym">=</span> p<span class="hl sym">.</span>m_vec <span class="hl sym">&lt;&lt;</span> xPos<span class="hl sym">;</span>

            <span class="hl kwa">if</span> <span class="hl sym">(</span>Board<span class="hl sym">.</span><span class="hl kwd">hasBadIslandsSingle</span><span class="hl sym">(</span>pieceVec<span class="hl sym">,</span> y<span class="hl sym">))</span>
               <span class="hl kwa">continue</span><span class="hl sym">;</span>

            <span class="hl slc">// position is allowed</span>
            p<span class="hl sym">.</span>m_allowed <span class="hl sym">|=</span> posMask<span class="hl sym">;</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">static void</span> <span class="hl kwd">genOrientation</span><span class="hl sym">(</span>BitVec vec<span class="hl sym">,</span> <span class="hl kwa">uint</span> iOrient<span class="hl sym">,</span> Piece target<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl slc">// get (x,y) coordinates</span>
      TPts pts<span class="hl sym">;</span>
      <span class="hl kwd">setCoordList</span><span class="hl sym">(</span>vec<span class="hl sym">,</span> pts<span class="hl sym">);</span>

      <span class="hl kwa">int</span> y<span class="hl sym">,</span> x<span class="hl sym">,</span> iPt<span class="hl sym">;</span>
      <span class="hl kwa">int</span> rot <span class="hl sym">=</span> iOrient <span class="hl sym">%</span> <span class="hl num">6</span><span class="hl sym">;</span>
      <span class="hl kwa">int</span> flip <span class="hl sym">=</span> iOrient <span class="hl sym">&gt;=</span> <span class="hl num">6</span><span class="hl sym">;</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>flip<span class="hl sym">) {</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span>iPt <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> iPt <span class="hl sym">&lt;</span> N_ELEM<span class="hl sym">;</span> iPt<span class="hl sym">++)</span>
            pts<span class="hl sym">[</span>iPt<span class="hl sym">][</span>Y<span class="hl sym">] = -</span>pts<span class="hl sym">[</span>iPt<span class="hl sym">][</span>Y<span class="hl sym">];</span>
      <span class="hl sym">}</span>

      <span class="hl slc">// rotate as necessary</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>rot<span class="hl sym">--) {</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span>iPt <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> iPt <span class="hl sym">&lt;</span> N_ELEM<span class="hl sym">;</span> iPt<span class="hl sym">++) {</span>
            x <span class="hl sym">=</span> pts<span class="hl sym">[</span>iPt<span class="hl sym">][</span>X<span class="hl sym">];</span>
            y <span class="hl sym">=</span> pts<span class="hl sym">[</span>iPt<span class="hl sym">][</span>Y<span class="hl sym">];</span>

            <span class="hl slc">// I just worked this out by hand. Took a while.</span>
            <span class="hl kwa">int</span> xNew <span class="hl sym">=</span> <span class="hl kwd">floor</span><span class="hl sym">((</span><span class="hl num">2</span> <span class="hl sym">*</span> x <span class="hl sym">-</span> <span class="hl num">3</span> <span class="hl sym">*</span> y <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">),</span> <span class="hl num">4</span><span class="hl sym">);</span>
            <span class="hl kwa">int</span> yNew <span class="hl sym">=</span> <span class="hl kwd">floor</span><span class="hl sym">((</span><span class="hl num">2</span> <span class="hl sym">*</span> x <span class="hl sym">+</span> y <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">),</span> <span class="hl num">2</span><span class="hl sym">);</span>
            pts<span class="hl sym">[</span>iPt<span class="hl sym">][</span>X<span class="hl sym">] =</span> xNew<span class="hl sym">;</span>
            pts<span class="hl sym">[</span>iPt<span class="hl sym">][</span>Y<span class="hl sym">] =</span> yNew<span class="hl sym">;</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>

      <span class="hl slc">// determine vertical shift</span>
      <span class="hl kwa">int</span> yMin <span class="hl sym">=</span> pts<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">][</span>Y<span class="hl sym">];</span>
      <span class="hl kwa">int</span> yMax <span class="hl sym">=</span> yMin<span class="hl sym">;</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span>iPt <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span> iPt <span class="hl sym">&lt;</span> N_ELEM<span class="hl sym">;</span> iPt<span class="hl sym">++) {</span>
         y <span class="hl sym">=</span> pts<span class="hl sym">[</span>iPt<span class="hl sym">][</span>Y<span class="hl sym">];</span>

         <span class="hl kwa">if</span> <span class="hl sym">(</span>y <span class="hl sym">&lt;</span> yMin<span class="hl sym">)</span>
            yMin <span class="hl sym">=</span> y<span class="hl sym">;</span>
         <span class="hl kwa">else if</span> <span class="hl sym">(</span>y <span class="hl sym">&gt;</span> yMax<span class="hl sym">)</span>
            yMax <span class="hl sym">=</span> y<span class="hl sym">;</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">int</span> h <span class="hl sym">=</span> yMax <span class="hl sym">-</span> yMin<span class="hl sym">;</span>
      Instance even <span class="hl sym">=</span> target<span class="hl sym">.</span>m_instance<span class="hl sym">[</span>EVEN<span class="hl sym">];</span>
      Instance odd <span class="hl sym">=</span> target<span class="hl sym">.</span>m_instance<span class="hl sym">[</span>ODD<span class="hl sym">];</span>

      <span class="hl kwd">shiftUpLines</span><span class="hl sym">(</span>pts<span class="hl sym">,</span> yMin<span class="hl sym">);</span>
      <span class="hl kwa">int</span> w <span class="hl sym">=</span> <span class="hl kwd">shiftToX0</span><span class="hl sym">(</span>pts<span class="hl sym">,</span> even<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">);</span>
      target<span class="hl sym">.</span><span class="hl kwd">setOkPos</span><span class="hl sym">(</span>EVEN<span class="hl sym">,</span> w<span class="hl sym">,</span> h<span class="hl sym">);</span>
      even<span class="hl sym">.</span>m_vec <span class="hl sym">&gt;&gt;=</span> even<span class="hl sym">.</span>m_offset<span class="hl sym">;</span>

      <span class="hl slc">// shift down one line</span>
      <span class="hl kwd">shiftUpLines</span><span class="hl sym">(</span>pts<span class="hl sym">, -</span><span class="hl num">1</span><span class="hl sym">);</span>
      w <span class="hl sym">=</span> <span class="hl kwd">shiftToX0</span><span class="hl sym">(</span>pts<span class="hl sym">,</span> odd<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">);</span>
      <span class="hl slc">// shift the bitmask back one line</span>
      odd<span class="hl sym">.</span>m_vec <span class="hl sym">&gt;&gt;=</span> N_COL<span class="hl sym">;</span>
      target<span class="hl sym">.</span><span class="hl kwd">setOkPos</span><span class="hl sym">(</span>ODD<span class="hl sym">,</span> w<span class="hl sym">,</span> h<span class="hl sym">);</span>
      odd<span class="hl sym">.</span>m_vec <span class="hl sym">&gt;&gt;=</span> odd<span class="hl sym">.</span>m_offset<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">static void</span> <span class="hl kwd">genAllOrientations</span><span class="hl sym">() {</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">int</span> iPiece <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> iPiece <span class="hl sym">&lt;</span> N_PIECE_TYPE<span class="hl sym">;</span> iPiece<span class="hl sym">++) {</span>
         BitVec refPiece <span class="hl sym">=</span> BaseVecs<span class="hl sym">[</span>iPiece<span class="hl sym">];</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">int</span> iOrient <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> iOrient <span class="hl sym">&lt;</span> N_ORIENT<span class="hl sym">;</span> iOrient<span class="hl sym">++) {</span>
            Piece p <span class="hl sym">=</span> s_basePiece<span class="hl sym">[</span>iPiece<span class="hl sym">][</span>iOrient<span class="hl sym">];</span>
            <span class="hl kwd">genOrientation</span><span class="hl sym">(</span>refPiece<span class="hl sym">,</span> iOrient<span class="hl sym">,</span> p<span class="hl sym">);</span>
            <span class="hl kwa">if</span> <span class="hl sym">((</span>iPiece <span class="hl sym">==</span> SKIP_PIECE<span class="hl sym">) &amp;&amp; ((</span>iOrient <span class="hl sym">/</span> <span class="hl num">3</span><span class="hl sym">) &amp;</span> <span class="hl num">1</span><span class="hl sym">))</span>
               p<span class="hl sym">.</span>m_instance<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">].</span>m_allowed <span class="hl sym">=</span> p<span class="hl sym">.</span>m_instance<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">].</span>m_allowed <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">int</span> iPiece <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> iPiece <span class="hl sym">&lt;</span> N_PIECE_TYPE<span class="hl sym">;</span> iPiece<span class="hl sym">++) {</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">int</span> iOrient <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> iOrient <span class="hl sym">&lt;</span> N_ORIENT<span class="hl sym">;</span> iOrient<span class="hl sym">++) {</span>
            <span class="hl kwa">ulong</span> mask <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">int</span> iRow <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> iRow <span class="hl sym">&lt;</span> N_ROW<span class="hl sym">;</span> iRow<span class="hl sym">++) {</span>
               Instance p <span class="hl sym">=</span> <span class="hl kwd">getPiece</span><span class="hl sym">(</span>iPiece<span class="hl sym">,</span> iOrient<span class="hl sym">, (</span>iRow <span class="hl sym">&amp;</span> <span class="hl num">1</span><span class="hl sym">));</span>
               <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">int</span> iCol <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> iCol <span class="hl sym">&lt;</span> N_COL<span class="hl sym">;</span> iCol<span class="hl sym">++) {</span>
                  OkPieces allowed <span class="hl sym">=</span> g_okPieces<span class="hl sym">[</span>iRow<span class="hl sym">][</span>iCol<span class="hl sym">];</span>
                  <span class="hl kwa">if</span> <span class="hl sym">(</span>p<span class="hl sym">.</span>m_allowed <span class="hl sym">&amp;</span> mask<span class="hl sym">) {</span>
                     <span class="hl kwa">byte</span><span class="hl sym">*</span> nPiece <span class="hl sym">= &amp;</span>allowed<span class="hl sym">.</span>nPieces<span class="hl sym">[</span>iPiece<span class="hl sym">];</span>
                     allowed<span class="hl sym">.</span>pieceVec<span class="hl sym">[</span>iPiece<span class="hl sym">][*</span>nPiece<span class="hl sym">] =</span> p<span class="hl sym">.</span>m_vec <span class="hl sym">&lt;&lt;</span> iCol<span class="hl sym">;</span>
                     <span class="hl sym">(*</span>nPiece<span class="hl sym">)++;</span>
                  <span class="hl sym">}</span>

                  mask <span class="hl sym">&lt;&lt;=</span> <span class="hl num">1</span><span class="hl sym">;</span>
               <span class="hl sym">}</span>
            <span class="hl sym">}</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>


   <span class="hl kwa">static</span> Instance <span class="hl kwd">getPiece</span><span class="hl sym">(</span><span class="hl kwa">uint</span> iPiece<span class="hl sym">,</span> <span class="hl kwa">uint</span> iOrient<span class="hl sym">,</span> <span class="hl kwa">uint</span> iParity<span class="hl sym">) {</span>
      <span class="hl kwa">return</span> s_basePiece<span class="hl sym">[</span>iPiece<span class="hl sym">][</span>iOrient<span class="hl sym">].</span>m_instance<span class="hl sym">[</span>iParity<span class="hl sym">];</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>



<span class="hl slc">//-- Main ----------------------------</span>
<span class="hl kwa">int</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwa">char</span><span class="hl sym">[][]</span> args<span class="hl sym">) {</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span>args<span class="hl sym">.</span>length <span class="hl sym">&gt;</span> <span class="hl num">2</span><span class="hl sym">)</span>
      <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl sym">;</span> <span class="hl slc">// spec says this is an error</span>

   <span class="hl kwd">initGlobals</span><span class="hl sym">();</span>
   Board b <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Board</span><span class="hl sym">();</span>
   Piece<span class="hl sym">.</span><span class="hl kwd">genAllOrientations</span><span class="hl sym">();</span>
   Board<span class="hl sym">.</span><span class="hl kwd">calcAlwaysBad</span><span class="hl sym">();</span>
   b<span class="hl sym">.</span><span class="hl kwd">genAllSolutions</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">);</span>

   <span class="hl kwd">writefln</span><span class="hl sym">(</span>b<span class="hl sym">.</span>m_nSoln<span class="hl sym">,</span> <span class="hl str">&quot; solutions found</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">);</span>
   <span class="hl kwd">writefln</span><span class="hl sym">(</span>b<span class="hl sym">.</span>m_minSoln<span class="hl sym">);</span>
   <span class="hl kwd">writefln</span><span class="hl sym">(</span>b<span class="hl sym">.</span>m_maxSoln<span class="hl sym">);</span>

   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>
