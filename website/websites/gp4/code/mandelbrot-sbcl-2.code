<span class="hl slc">;;; The Computer Language Shootout</span>
<span class="hl slc">;;;   http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; resubmitted by Wade Humeniuk (Fix Stream Problem)</span>
<span class="hl slc">;;; Original contributed by Yannick Gingras &lt;ygingras&#64;ygingras.net&gt;</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; To compile</span>
<span class="hl slc">;;; sbcl --load mandelbrot.lisp --eval &quot;(save-lisp-and-die \&quot;mandelbrot.core\&quot; :purify t :toplevel (lambda () (main) (quit)))&quot;</span>
<span class="hl slc">;;; To run</span>
<span class="hl slc">;;; sbcl --noinform --core mandelbrot.core %A</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> render <span class="hl sym">(</span>size stream<span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">type</span> fixnum size<span class="hl sym">) (</span>stream stream<span class="hl sym">)</span>
	   <span class="hl sym">(</span>optimize <span class="hl sym">(</span>speed <span class="hl num">3</span><span class="hl sym">) (</span>safety <span class="hl num">0</span><span class="hl sym">) (</span>debug <span class="hl num">0</span><span class="hl sym">)))</span>
  <span class="hl sym">(</span>assert <span class="hl sym">(</span><span class="hl kwa">and</span> <span class="hl sym">(&lt;=</span> <span class="hl num">8</span> size <span class="hl num">10000</span><span class="hl sym">) (</span><span class="hl kwa">zerop</span> <span class="hl sym">(</span>mod size <span class="hl num">8</span><span class="hl sym">))))</span>
  <span class="hl sym">(</span>let<span class="hl sym">* ((</span>code <span class="hl num">0</span><span class="hl sym">) (</span>bit <span class="hl num">0</span><span class="hl sym">)</span>
         <span class="hl sym">(</span>zr <span class="hl num">0.0</span>d0<span class="hl sym">) (</span>zi <span class="hl num">0.0</span>d0<span class="hl sym">) (</span>tr <span class="hl num">0.0</span>d0<span class="hl sym">)</span>
	 <span class="hl sym">(</span>delta <span class="hl sym">(/</span> <span class="hl num">2</span>d0 size<span class="hl sym">))</span>
         <span class="hl sym">(</span>base-real -<span class="hl num">1.5</span>d0<span class="hl sym">) (</span>base-imag -<span class="hl num">1.0</span>d0<span class="hl sym">)</span>
         <span class="hl sym">(</span>buffer <span class="hl sym">(</span>make-array <span class="hl sym">(*</span> size <span class="hl sym">(</span>ceiling size <span class="hl num">8</span><span class="hl sym">)) :</span>element-<span class="hl kwa">type</span> <span class="hl sym">'(</span>unsigned-byte <span class="hl num">8</span><span class="hl sym">)))</span>
         <span class="hl sym">(</span>index <span class="hl num">0</span><span class="hl sym">))</span>
    <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">type</span> <span class="hl sym">(</span>unsigned-byte <span class="hl num">8</span><span class="hl sym">)</span> code<span class="hl sym">)</span>
             <span class="hl sym">(</span><span class="hl kwa">type</span> double-<span class="hl kwa">float</span> zr zi tr base-real base-imag delta<span class="hl sym">)</span>
             <span class="hl sym">(</span><span class="hl kwa">type</span> fixnum index bit<span class="hl sym">))</span>

    <span class="hl sym">(</span>dotimes <span class="hl sym">(</span>y size<span class="hl sym">)</span>
      <span class="hl sym">(</span>setf base-imag <span class="hl sym">(</span>- <span class="hl num">1.0</span>d0 <span class="hl sym">(*</span> delta y<span class="hl sym">)))</span>
      <span class="hl sym">(</span>dotimes <span class="hl sym">(</span>x size<span class="hl sym">)</span>
	<span class="hl sym">(</span>declare <span class="hl sym">(</span>fixnum x<span class="hl sym">))</span>
	<span class="hl sym">(</span>setf base-real <span class="hl sym">(+</span> -<span class="hl num">1.5</span>d0 <span class="hl sym">(*</span> delta x<span class="hl sym">))</span>
	      zr base-real
	      zi base-imag<span class="hl sym">)</span>
        <span class="hl sym">(</span>setf code <span class="hl sym">(</span><span class="hl kwa">logior</span> <span class="hl sym">(</span>ash code <span class="hl num">1</span><span class="hl sym">)</span>
			   <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>dotimes <span class="hl sym">(</span>n <span class="hl num">50</span><span class="hl sym">)</span>
				 <span class="hl sym">(</span>when <span class="hl sym">(&lt;</span> <span class="hl num">4.0</span>d0 <span class="hl sym">(+ (*</span> zr zr<span class="hl sym">) (*</span> zi zi<span class="hl sym">)))</span>
				   <span class="hl sym">(</span>return t<span class="hl sym">))</span>
				 <span class="hl sym">(</span>setf tr <span class="hl sym">(+ (*</span> zr zr<span class="hl sym">) (</span>- <span class="hl sym">(*</span> zi zi<span class="hl sym">))</span> base-real<span class="hl sym">)</span>
				       zi <span class="hl sym">(+ (*</span> <span class="hl num">2.0</span>d0 zr zi<span class="hl sym">)</span> base-imag<span class="hl sym">)</span>
				       zr tr<span class="hl sym">))</span>
			       #x00
			       #x01<span class="hl sym">)))</span>
	<span class="hl sym">(</span>when <span class="hl sym">(= (</span>incf bit<span class="hl sym">)</span> <span class="hl num">8</span><span class="hl sym">)</span>
	  <span class="hl sym">(</span>setf <span class="hl sym">(</span>aref buffer index<span class="hl sym">)</span> code
		bit <span class="hl num">0</span> code <span class="hl num">0</span><span class="hl sym">)</span>
	  <span class="hl sym">(</span>incf index<span class="hl sym">))))</span>

    <span class="hl sym">(</span>write-sequence buffer stream<span class="hl sym">)))</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> main <span class="hl sym">()</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>optimize <span class="hl sym">(</span>speed <span class="hl num">0</span><span class="hl sym">) (</span>safety <span class="hl num">3</span><span class="hl sym">)))</span>
  <span class="hl sym">(</span>let<span class="hl sym">* ((</span>args sb-ext<span class="hl sym">:*</span>posix-argv<span class="hl sym">*)</span>
	 <span class="hl sym">(</span>n <span class="hl sym">(</span>parse-integer <span class="hl sym">(</span>second args<span class="hl sym">))))</span>
    <span class="hl sym">(</span>with-<span class="hl kwa">open</span>-stream <span class="hl sym">(</span>stream <span class="hl sym">(</span>sb-sys<span class="hl sym">:</span>make-fd-stream <span class="hl sym">(</span>sb-sys<span class="hl sym">:</span>fd-stream-fd sb-sys<span class="hl sym">:*</span>stdout<span class="hl sym">*)</span>
						     <span class="hl sym">:</span>element-<span class="hl kwa">type</span> <span class="hl sym">:</span>default
						     <span class="hl sym">:</span>buffering <span class="hl sym">:</span>full
						     <span class="hl sym">:</span>output t <span class="hl sym">:</span>input nil<span class="hl sym">))</span>

      <span class="hl sym">(</span>format stream <span class="hl str">&quot;P4~%~d ~d~%&quot;</span> n n<span class="hl sym">)</span>
      <span class="hl sym">(</span>render n stream<span class="hl sym">)</span>
      <span class="hl sym">(</span>force-output stream<span class="hl sym">))))</span>
