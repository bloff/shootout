<span class="hl slc">;; ---------------------------------------------------------------------</span>
<span class="hl slc">;; The Great Computer Language Shootout</span>
<span class="hl slc">;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;</span>
<span class="hl slc">;; Contributed by Anthony Borla</span>
<span class="hl slc">;; ---------------------------------------------------------------------</span>

<span class="hl sym">(</span>declare <span class="hl sym">(</span>disable-interrupts<span class="hl sym">) (</span>unsafe<span class="hl sym">) (</span>block<span class="hl sym">) (</span><span class="hl kwa">lambda</span>-lift<span class="hl sym">)</span>
         <span class="hl sym">(</span>uses srfi-<span class="hl num">1</span> lolevel<span class="hl sym">))</span>

<span class="hl slc">; -------------------------------</span>

<span class="hl sym">(</span>define <span class="hl sym">+</span>alu<span class="hl sym">+</span>
  <span class="hl sym">(</span>string-<span class="hl sym">&gt;</span>byte-vector
    <span class="hl sym">(</span>string-<span class="hl kwa">append</span>
      <span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>
      <span class="hl str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>
      <span class="hl str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>
      <span class="hl str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>
      <span class="hl str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>
      <span class="hl str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>
      <span class="hl str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="hl sym">)))</span>

<span class="hl slc">; -------------</span>

<span class="hl sym">(</span>define-constant <span class="hl sym">+</span>iub<span class="hl sym">+</span>
  <span class="hl sym">(</span><span class="hl kwa">list</span>
    <span class="hl sym">'(</span>#\a . <span class="hl num">0.27</span><span class="hl sym">) '(</span>#\c . <span class="hl num">0.12</span><span class="hl sym">) '(</span>#\g . <span class="hl num">0.12</span><span class="hl sym">) '(</span>#\t . <span class="hl num">0.27</span><span class="hl sym">) '(</span>#\B . <span class="hl num">0.02</span><span class="hl sym">)</span>
    <span class="hl sym">'(</span>#\D . <span class="hl num">0.02</span><span class="hl sym">) '(</span>#\H . <span class="hl num">0.02</span><span class="hl sym">) '(</span>#\K . <span class="hl num">0.02</span><span class="hl sym">) '(</span>#\M . <span class="hl num">0.02</span><span class="hl sym">) '(</span>#\N . <span class="hl num">0.02</span><span class="hl sym">)</span>
    <span class="hl sym">'(</span>#\R . <span class="hl num">0.02</span><span class="hl sym">) '(</span>#\S . <span class="hl num">0.02</span><span class="hl sym">) '(</span>#\V . <span class="hl num">0.02</span><span class="hl sym">) '(</span>#\W . <span class="hl num">0.02</span><span class="hl sym">) '(</span>#\Y . <span class="hl num">0.02</span><span class="hl sym">)))</span>

<span class="hl sym">(</span>define-constant <span class="hl sym">+</span>homosapien<span class="hl sym">+</span>
  <span class="hl sym">(</span><span class="hl kwa">list</span>
    <span class="hl sym">'(</span>#\a . <span class="hl num">0.3029549426680</span><span class="hl sym">) '(</span>#\c . <span class="hl num">0.1979883004921</span><span class="hl sym">)</span>
    <span class="hl sym">'(</span>#\g . <span class="hl num">0.1975473066391</span><span class="hl sym">) '(</span>#\t . <span class="hl num">0.3015094502008</span><span class="hl sym">)))</span>

<span class="hl slc">; -------------</span>

<span class="hl sym">(</span>define-constant <span class="hl sym">+</span><span class="hl kwa">line</span>-size<span class="hl sym">+</span> <span class="hl num">60</span><span class="hl sym">)</span>

<span class="hl slc">; -------------------------------</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>make-random seed<span class="hl sym">)</span>
  <span class="hl sym">(</span>let<span class="hl sym">* ((</span>ia <span class="hl num">3877</span><span class="hl sym">) (</span>ic <span class="hl num">29573</span><span class="hl sym">) (</span>im <span class="hl num">139968</span><span class="hl sym">) (</span><span class="hl kwa">last</span> seed<span class="hl sym">))</span>
    <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span><span class="hl kwa">max</span><span class="hl sym">)</span>
      <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> <span class="hl kwa">last</span> <span class="hl sym">(</span>modulo <span class="hl sym">(+</span> ic <span class="hl sym">(*</span> <span class="hl kwa">last</span> ia<span class="hl sym">))</span> im<span class="hl sym">))</span>
      <span class="hl sym">(/ (*</span> <span class="hl kwa">max last</span><span class="hl sym">)</span> im<span class="hl sym">) )))</span>

<span class="hl slc">; -------------------------------</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>make-cumulative-table frequency-table<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>cumulative <span class="hl num">0.0</span><span class="hl sym">))</span>
    <span class="hl sym">(</span>map-in-order
      <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>x<span class="hl sym">) (</span><span class="hl kwa">set</span><span class="hl sym">!</span> cumulative <span class="hl sym">(+</span> cumulative <span class="hl sym">(</span><span class="hl kwa">cdr</span> x<span class="hl sym">))) (</span><span class="hl kwa">cons</span> <span class="hl sym">(</span><span class="hl kwa">car</span> x<span class="hl sym">)</span> cumulative<span class="hl sym">))</span>
      frequency-table<span class="hl sym">)))</span>

<span class="hl slc">; -------------</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>make-fasta<span class="hl sym">)</span>
  <span class="hl sym">(</span>let<span class="hl sym">* ((</span>random-next <span class="hl sym">(</span>make-random <span class="hl num">42</span><span class="hl sym">)) (+</span>segmarker<span class="hl sym">+</span> <span class="hl str">&quot;&gt;&quot;</span><span class="hl sym">)</span>

    <span class="hl slc">; -------------</span>

    <span class="hl sym">(</span>select-random
      <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>cumulative-table<span class="hl sym">)</span>
        <span class="hl sym">(</span>let <span class="hl sym">((</span>rvalue <span class="hl sym">(</span>random-next <span class="hl num">1.0</span><span class="hl sym">)))</span>
          <span class="hl sym">(</span>let loop <span class="hl sym">((</span>table cumulative-table<span class="hl sym">))</span>
            <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(&lt;=</span> rvalue <span class="hl sym">(</span>cdar table<span class="hl sym">)) (</span><span class="hl kwa">caar</span> table<span class="hl sym">)</span>
            <span class="hl slc">; else</span>
            <span class="hl sym">(</span>loop <span class="hl sym">(</span><span class="hl kwa">cdr</span> table<span class="hl sym">)) )))))</span>

    <span class="hl slc">; -------------</span>

    <span class="hl sym">(</span><span class="hl kwa">repeat</span>-fasta
      <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>id desc n_ sequence <span class="hl kwa">line</span>-<span class="hl kwa">length</span><span class="hl sym">)</span>
        <span class="hl sym">(</span>let <span class="hl sym">((</span>seqlen <span class="hl sym">(</span>string-<span class="hl kwa">length</span> sequence<span class="hl sym">)) (</span>k <span class="hl num">0</span><span class="hl sym">))</span>
          <span class="hl sym">(</span>display <span class="hl sym">(</span>string-<span class="hl kwa">append</span> <span class="hl sym">+</span>segmarker<span class="hl sym">+</span> id <span class="hl str">&quot; &quot;</span> desc <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">))</span>
          <span class="hl sym">(</span>let loop-o <span class="hl sym">((</span>n n_<span class="hl sym">))</span>
            <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(&lt;=</span> n <span class="hl num">0</span><span class="hl sym">) '()</span>
            <span class="hl slc">; else</span>
            <span class="hl sym">(</span>let <span class="hl sym">((</span>m <span class="hl sym">(</span><span class="hl kwa">min</span> n <span class="hl kwa">line</span>-<span class="hl kwa">length</span><span class="hl sym">)))</span>
              <span class="hl sym">(</span>let loop-i <span class="hl sym">((</span>i <span class="hl num">0</span><span class="hl sym">))</span>
                <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(&gt;=</span> i m<span class="hl sym">) '()</span>
                <span class="hl slc">; else</span>
                <span class="hl sym">(</span>begin
                  <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(=</span> k seqlen<span class="hl sym">) (</span><span class="hl kwa">set</span><span class="hl sym">!</span> k <span class="hl num">0</span><span class="hl sym">))</span>
                  <span class="hl sym">(</span>display <span class="hl sym">(</span>integer-<span class="hl sym">&gt;</span>char <span class="hl sym">(</span>byte-vector-ref sequence k<span class="hl sym">)))</span>
                  <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> k <span class="hl sym">(</span>add1 k<span class="hl sym">))</span>
                  <span class="hl sym">(</span>loop-i <span class="hl sym">(</span>add1 i<span class="hl sym">)) )))</span>
                <span class="hl sym">(</span>newline<span class="hl sym">)</span>
                <span class="hl sym">(</span>loop-o <span class="hl sym">(</span>- n <span class="hl kwa">line</span>-<span class="hl kwa">length</span><span class="hl sym">)) ))) )))</span>

    <span class="hl slc">; -------------</span>

    <span class="hl sym">(</span>random-fasta
      <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>id desc n_ cumulative-table <span class="hl kwa">line</span>-<span class="hl kwa">length</span><span class="hl sym">)</span>
        <span class="hl sym">(</span>display <span class="hl sym">(</span>string-<span class="hl kwa">append</span> <span class="hl sym">+</span>segmarker<span class="hl sym">+</span> id <span class="hl str">&quot; &quot;</span> desc <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">))</span>
        <span class="hl sym">(</span>let loop-o <span class="hl sym">((</span>n n_<span class="hl sym">))</span>
          <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(&lt;=</span> n <span class="hl num">0</span><span class="hl sym">) '()</span>
          <span class="hl slc">; else</span>
          <span class="hl sym">(</span>let <span class="hl sym">((</span>m <span class="hl sym">(</span><span class="hl kwa">min</span> n <span class="hl kwa">line</span>-<span class="hl kwa">length</span><span class="hl sym">)))</span>
            <span class="hl sym">(</span>let loop-i <span class="hl sym">((</span>i <span class="hl num">0</span><span class="hl sym">))</span>
              <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(&gt;=</span> i m<span class="hl sym">) '()</span>
              <span class="hl slc">; else</span>
              <span class="hl sym">(</span>begin
                <span class="hl sym">(</span>display <span class="hl sym">(</span>select-random cumulative-table<span class="hl sym">))</span>
                <span class="hl sym">(</span>loop-i <span class="hl sym">(</span>add1 i<span class="hl sym">)) )))</span>
              <span class="hl sym">(</span>newline<span class="hl sym">)</span>
              <span class="hl sym">(</span>loop-o <span class="hl sym">(</span>- n <span class="hl kwa">line</span>-<span class="hl kwa">length</span><span class="hl sym">)) ))) )))</span>

    <span class="hl slc">; -------------</span>

    <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>op<span class="hl sym">)</span>
      <span class="hl sym">(</span><span class="hl kwa">cond</span>
        <span class="hl sym">((</span><span class="hl kwa">eq</span>? op <span class="hl sym">'</span><span class="hl kwa">repeat</span><span class="hl sym">)</span> <span class="hl kwa">repeat</span>-fasta<span class="hl sym">)</span>
        <span class="hl sym">((</span><span class="hl kwa">eq</span>? op <span class="hl sym">'</span>random<span class="hl sym">)</span> random-fasta<span class="hl sym">)</span>
        <span class="hl sym">(</span>else <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">() (</span>display <span class="hl str">&quot;*** make-fasta:invalid operation ***</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">))))) ))</span>

<span class="hl slc">; -------------------------------</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span><span class="hl kwa">repeat</span>-fasta fasta id desc n sequence <span class="hl kwa">line</span>-<span class="hl kwa">length</span><span class="hl sym">)</span>
  <span class="hl sym">(</span><span class="hl kwa">apply</span> <span class="hl sym">(</span>fasta <span class="hl sym">'</span><span class="hl kwa">repeat</span><span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl kwa">list</span> id desc n sequence <span class="hl kwa">line</span>-<span class="hl kwa">length</span><span class="hl sym">)))</span>

<span class="hl slc">; -------------</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>random-fasta fasta id desc n cumulative-table <span class="hl kwa">line</span>-<span class="hl kwa">length</span><span class="hl sym">)</span>
  <span class="hl sym">(</span><span class="hl kwa">apply</span> <span class="hl sym">(</span>fasta <span class="hl sym">'</span>random<span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl kwa">list</span> id desc n cumulative-table <span class="hl kwa">line</span>-<span class="hl kwa">length</span><span class="hl sym">)))</span>

<span class="hl slc">; -------------------------------</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>main args<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>n <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">null</span>? args<span class="hl sym">)</span>
               <span class="hl num">1</span>
               <span class="hl sym">(</span>string-<span class="hl sym">&gt;</span>number <span class="hl sym">(</span><span class="hl kwa">car</span> args<span class="hl sym">))))</span>

    <span class="hl sym">(</span>fasta <span class="hl sym">(</span>make-fasta<span class="hl sym">)))</span>

    <span class="hl sym">(</span><span class="hl kwa">repeat</span>-fasta fasta
      <span class="hl str">&quot;ONE&quot;</span> <span class="hl str">&quot;Homo sapiens alu&quot;</span> <span class="hl sym">(*</span> n <span class="hl num">2</span><span class="hl sym">) +</span>alu<span class="hl sym">+ +</span><span class="hl kwa">line</span>-size<span class="hl sym">+)</span>

    <span class="hl sym">(</span>random-fasta fasta
      <span class="hl str">&quot;TWO&quot;</span> <span class="hl str">&quot;IUB ambiguity codes&quot;</span> <span class="hl sym">(*</span> n <span class="hl num">3</span><span class="hl sym">)</span>
      <span class="hl sym">(</span>make-cumulative-table <span class="hl sym">+</span>iub<span class="hl sym">+) +</span><span class="hl kwa">line</span>-size<span class="hl sym">+)</span>

    <span class="hl sym">(</span>random-fasta fasta
      <span class="hl str">&quot;THREE&quot;</span> <span class="hl str">&quot;Homo sapiens frequency&quot;</span> <span class="hl sym">(*</span> n <span class="hl num">5</span><span class="hl sym">)</span>
      <span class="hl sym">(</span>make-cumulative-table <span class="hl sym">+</span>homosapien<span class="hl sym">+) +</span><span class="hl kwa">line</span>-size<span class="hl sym">+) ))</span>

<span class="hl slc">; -------------------------------</span>

<span class="hl sym">(</span>main <span class="hl sym">(</span><span class="hl kwa">command</span>-<span class="hl kwa">line</span>-arguments<span class="hl sym">))</span>

