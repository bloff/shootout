<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;; http://shootout.alioth.debian.org/</span>

<span class="hl slc">;; Derived by Michael D. Adams from the CMUCL varient, by Wade Humeniuk</span>


<span class="hl sym">(</span>import <span class="hl sym">(</span>rnrs<span class="hl sym">))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>write-permutation perm<span class="hl sym">)</span>
  <span class="hl sym">(</span>vector-for-each <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>i<span class="hl sym">) (</span>write <span class="hl sym">(</span>fx<span class="hl sym">+</span> <span class="hl num">1</span> i<span class="hl sym">)))</span> perm<span class="hl sym">)</span>
  <span class="hl sym">(</span>newline<span class="hl sym">))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>fannkuch n<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>perm <span class="hl sym">(</span>make-vector n<span class="hl sym">))</span>
        <span class="hl sym">(</span>perm1 <span class="hl sym">(</span>make-vector n<span class="hl sym">))</span>
        <span class="hl sym">(</span>count <span class="hl sym">(</span>make-vector n<span class="hl sym">))</span>
        <span class="hl sym">(</span>flips <span class="hl num">0</span><span class="hl sym">)</span>
        <span class="hl sym">(</span>flipsmax <span class="hl num">0</span><span class="hl sym">)</span>
        <span class="hl sym">(</span>r n<span class="hl sym">)</span>
        <span class="hl sym">(</span>check <span class="hl num">0</span><span class="hl sym">))</span>

    <span class="hl sym">(</span>do <span class="hl sym">((</span>i <span class="hl num">0</span> <span class="hl sym">(</span>fx<span class="hl sym">+</span> <span class="hl num">1</span> i<span class="hl sym">)))</span>
        <span class="hl sym">((</span><span class="hl kwa">eq</span>? i n<span class="hl sym">))</span>
      <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> perm1 i i<span class="hl sym">))</span>

    <span class="hl sym">(</span>let outer_loop <span class="hl sym">()</span>

     <span class="hl sym">(</span>when <span class="hl sym">(&lt;</span> check <span class="hl num">30</span><span class="hl sym">)</span>
           <span class="hl sym">(</span>write-permutation perm1<span class="hl sym">)</span>
           <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> check <span class="hl sym">(</span>fx<span class="hl sym">+</span> <span class="hl num">1</span> check<span class="hl sym">)))</span>

     <span class="hl sym">(</span>let loop <span class="hl sym">()</span>
       <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> count <span class="hl sym">(</span>fx- r <span class="hl num">1</span><span class="hl sym">)</span> r<span class="hl sym">)</span>
       <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> r <span class="hl sym">(</span>fx- r <span class="hl num">1</span><span class="hl sym">))</span>
       <span class="hl sym">(</span>when <span class="hl sym">(&gt;</span> r <span class="hl num">1</span><span class="hl sym">) (</span>loop<span class="hl sym">)))</span>

     <span class="hl sym">(</span>unless <span class="hl sym">(</span><span class="hl kwa">or</span> <span class="hl sym">(</span>zero? <span class="hl sym">(</span>vector-ref perm1 <span class="hl num">0</span><span class="hl sym">))</span>
                 <span class="hl sym">(</span><span class="hl kwa">eq</span>? <span class="hl sym">(</span>fx- n <span class="hl num">1</span><span class="hl sym">) (</span>vector-ref perm1 <span class="hl sym">(</span>fx- n <span class="hl num">1</span><span class="hl sym">))))</span>
             <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> flips <span class="hl num">0</span><span class="hl sym">)</span>
             <span class="hl sym">(</span>do <span class="hl sym">((</span>i <span class="hl num">0</span> <span class="hl sym">(</span>fx<span class="hl sym">+</span> <span class="hl num">1</span> i<span class="hl sym">)))</span>
                 <span class="hl sym">((</span><span class="hl kwa">eq</span>? i n<span class="hl sym">))</span>
               <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> perm i <span class="hl sym">(</span>vector-ref perm1 i<span class="hl sym">)))</span>
             <span class="hl sym">(</span>do <span class="hl sym">((</span>k <span class="hl sym">(</span>vector-ref perm1 <span class="hl num">0</span><span class="hl sym">) (</span>vector-ref perm <span class="hl num">0</span><span class="hl sym">)))</span>
                 <span class="hl sym">((</span>zero? k<span class="hl sym">))</span>
               <span class="hl sym">(</span>do <span class="hl sym">((</span>j <span class="hl sym">(</span>fx- k <span class="hl num">1</span><span class="hl sym">) (</span>fx- j <span class="hl num">1</span><span class="hl sym">))</span>
                    <span class="hl sym">(</span>i <span class="hl num">1</span> <span class="hl sym">(</span>fx<span class="hl sym">+</span> <span class="hl num">1</span> i<span class="hl sym">)))</span>
                   <span class="hl sym">((&gt;=</span> i j<span class="hl sym">))</span>
                 <span class="hl sym">(</span>let <span class="hl sym">((</span>i-val <span class="hl sym">(</span>vector-ref perm i<span class="hl sym">))</span>
                       <span class="hl sym">(</span>j-val <span class="hl sym">(</span>vector-ref perm j<span class="hl sym">)))</span>
                   <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> perm j i-val<span class="hl sym">)</span>
                   <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> perm i j-val<span class="hl sym">)))</span>
               <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> flips <span class="hl sym">(</span>fx<span class="hl sym">+</span> <span class="hl num">1</span> flips<span class="hl sym">))</span>
               <span class="hl sym">(</span>let <span class="hl sym">((</span>new-k <span class="hl sym">(</span>vector-ref perm k<span class="hl sym">)))</span>
                 <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> perm k k<span class="hl sym">)</span>
                 <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> perm <span class="hl num">0</span> new-k<span class="hl sym">)))</span>
             <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> flipsmax <span class="hl sym">(</span><span class="hl kwa">max</span> flipsmax flips<span class="hl sym">)))</span>

     <span class="hl sym">(</span>let loop <span class="hl sym">()</span>
       <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">eq</span>? r n<span class="hl sym">)</span>
           flipsmax
           <span class="hl sym">(</span>let <span class="hl sym">((</span>perm0 <span class="hl sym">(</span>vector-ref perm1 <span class="hl num">0</span><span class="hl sym">)))</span>
             <span class="hl sym">(</span>do <span class="hl sym">((</span>i <span class="hl num">0</span> <span class="hl sym">(</span>fx<span class="hl sym">+</span> <span class="hl num">1</span> i<span class="hl sym">)))</span>
                 <span class="hl sym">((&gt;=</span> i r<span class="hl sym">))</span>
               <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> perm1 i <span class="hl sym">(</span>vector-ref perm1 <span class="hl sym">(</span>fx<span class="hl sym">+</span> <span class="hl num">1</span> i<span class="hl sym">))))</span>
             <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> perm1 r perm0<span class="hl sym">)</span>
             <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> count r <span class="hl sym">(</span>fx- <span class="hl sym">(</span>vector-ref count r<span class="hl sym">)</span> <span class="hl num">1</span><span class="hl sym">))</span>
             <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(&gt; (</span>vector-ref count r<span class="hl sym">)</span> <span class="hl num">0</span><span class="hl sym">)</span>
                 <span class="hl sym">(</span>outer_loop<span class="hl sym">)</span>
                 <span class="hl sym">(</span>begin
                   <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> r <span class="hl sym">(</span>fx<span class="hl sym">+</span> <span class="hl num">1</span> r<span class="hl sym">))</span>
                   <span class="hl sym">(</span>loop<span class="hl sym">)))))))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>main args<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>n <span class="hl sym">(</span>string-<span class="hl sym">&gt;</span>number <span class="hl sym">(</span><span class="hl kwa">cadr</span> args<span class="hl sym">))))</span>
    <span class="hl sym">(</span>let <span class="hl sym">((</span>x <span class="hl sym">(</span>fannkuch n<span class="hl sym">)))</span>
      <span class="hl sym">(</span>display <span class="hl str">&quot;Pfannkuchen(&quot;</span><span class="hl sym">) (</span>display n<span class="hl sym">) (</span>display <span class="hl str">&quot;) = &quot;</span><span class="hl sym">) (</span>display x<span class="hl sym">) (</span>newline<span class="hl sym">))))</span>

<span class="hl sym">(</span>main <span class="hl sym">(</span><span class="hl kwa">command</span>-<span class="hl kwa">line</span><span class="hl sym">))</span>
