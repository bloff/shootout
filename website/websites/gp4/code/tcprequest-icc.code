<span class="hl com">/*</span>
<span class="hl com"> The Great Computer Language Shootout</span>
<span class="hl com">  http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">  contributed by John O'Hare 05 August 2005.</span>
<span class="hl com">*/</span>


<span class="hl dir">#include &lt;stdio.h&gt;</span>
<span class="hl dir">#include &lt;sys/socket.h&gt;</span>
<span class="hl dir">#include &lt;arpa/inet.h&gt;</span>
<span class="hl dir">#include &lt;stdlib.h&gt;</span>
<span class="hl dir">#include &lt;string.h&gt;</span>
<span class="hl dir">#include &lt;unistd.h&gt;</span>

<span class="hl dir">#define PORT_NUMBER 12341</span>
<span class="hl dir">#define M 100</span>
<span class="hl dir">#define REPLY_SIZE 4096</span>
<span class="hl dir">#define REQUEST_SIZE 64</span>
<span class="hl dir">#define BUFFER_SIZE 1024</span>

<span class="hl kwb">void</span> <span class="hl kwd">server</span><span class="hl sym">()</span>
<span class="hl sym">{</span>
	<span class="hl kwb">int</span> sock<span class="hl sym">;</span>
	<span class="hl kwb">int</span> conn<span class="hl sym">;</span>
	<span class="hl kwb">struct</span> sockaddr_in servaddr<span class="hl sym">;</span>
	<span class="hl kwb">struct</span> sockaddr_in cliaddr<span class="hl sym">;</span>
	<span class="hl kwb">unsigned int</span> cliaddr_len<span class="hl sym">;</span>
	<span class="hl kwb">char</span><span class="hl sym">*</span> reply <span class="hl sym">=</span> <span class="hl kwd">malloc</span><span class="hl sym">(</span>REPLY_SIZE<span class="hl sym">);</span>
	<span class="hl kwb">char</span><span class="hl sym">*</span> buf <span class="hl sym">=</span> <span class="hl kwd">malloc</span><span class="hl sym">(</span>BUFFER_SIZE<span class="hl sym">);</span>

	<span class="hl kwd">memset</span><span class="hl sym">(</span>reply<span class="hl sym">,</span> <span class="hl str">'&lt;'</span><span class="hl sym">,</span> REPLY_SIZE<span class="hl sym">);</span>

	<span class="hl kwa">if</span> <span class="hl sym">((</span>sock <span class="hl sym">=</span> <span class="hl kwd">socket</span><span class="hl sym">(</span>PF_INET<span class="hl sym">,</span> SOCK_STREAM<span class="hl sym">,</span> IPPROTO_TCP<span class="hl sym">)) &lt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
		<span class="hl kwd">exit</span><span class="hl sym">(</span><span class="hl num">10</span><span class="hl sym">);</span>

	<span class="hl kwd">memset</span><span class="hl sym">(&amp;</span>servaddr<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span>servaddr<span class="hl sym">));</span>
	servaddr<span class="hl sym">.</span>sin_family <span class="hl sym">=</span> AF_INET<span class="hl sym">;</span>
	servaddr<span class="hl sym">.</span>sin_addr<span class="hl sym">.</span>s_addr <span class="hl sym">=</span> <span class="hl kwd">htonl</span><span class="hl sym">(</span>INADDR_LOOPBACK<span class="hl sym">);</span>
	servaddr<span class="hl sym">.</span>sin_port <span class="hl sym">=</span> <span class="hl kwd">htons</span><span class="hl sym">(</span>PORT_NUMBER<span class="hl sym">);</span>

	<span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">bind</span><span class="hl sym">(</span>sock<span class="hl sym">, (</span><span class="hl kwb">struct</span> sockaddr <span class="hl sym">*) &amp;</span>servaddr<span class="hl sym">,</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span>servaddr<span class="hl sym">)) &lt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
		<span class="hl kwd">exit</span><span class="hl sym">(</span><span class="hl num">11</span><span class="hl sym">);</span>

	<span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">listen</span><span class="hl sym">(</span>sock<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">) &lt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
		<span class="hl kwd">exit</span><span class="hl sym">(</span><span class="hl num">12</span><span class="hl sym">);</span>

	<span class="hl kwa">if</span> <span class="hl sym">((</span>conn <span class="hl sym">=</span> <span class="hl kwd">accept</span><span class="hl sym">(</span>sock<span class="hl sym">, (</span><span class="hl kwb">struct</span> sockaddr <span class="hl sym">*) &amp;</span>cliaddr<span class="hl sym">, &amp;</span>cliaddr_len<span class="hl sym">)) &lt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
		<span class="hl kwd">exit</span><span class="hl sym">(</span><span class="hl num">13</span><span class="hl sym">);</span>

	<span class="hl kwa">while</span> <span class="hl sym">(</span><span class="hl kwd">recv</span><span class="hl sym">(</span>conn<span class="hl sym">,</span> buf<span class="hl sym">,</span> BUFFER_SIZE<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">) &gt;</span> <span class="hl num">0</span><span class="hl sym">) {</span>
		<span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">send</span><span class="hl sym">(</span>conn<span class="hl sym">,</span> reply<span class="hl sym">,</span> REPLY_SIZE<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">) !=</span> REPLY_SIZE<span class="hl sym">)</span>
			<span class="hl kwd">exit</span><span class="hl sym">(</span><span class="hl num">14</span><span class="hl sym">);</span>
	<span class="hl sym">}</span>

	<span class="hl kwd">close</span><span class="hl sym">(</span>conn<span class="hl sym">);</span>
	<span class="hl kwd">close</span><span class="hl sym">(</span>sock<span class="hl sym">);</span>

	<span class="hl kwd">free</span><span class="hl sym">(</span>buf<span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">client</span><span class="hl sym">(</span><span class="hl kwb">int</span> n<span class="hl sym">)</span>
<span class="hl sym">{</span>
	<span class="hl kwb">int</span> sock<span class="hl sym">;</span>
	<span class="hl kwb">struct</span> sockaddr_in servaddr<span class="hl sym">;</span>
	<span class="hl kwb">char</span><span class="hl sym">*</span> request <span class="hl sym">=</span> <span class="hl kwd">malloc</span><span class="hl sym">(</span>REQUEST_SIZE<span class="hl sym">);</span>
	<span class="hl kwb">char</span><span class="hl sym">*</span> buf <span class="hl sym">=</span> <span class="hl kwd">malloc</span><span class="hl sym">(</span>BUFFER_SIZE<span class="hl sym">);</span>
	<span class="hl kwb">int</span> tmpbytes<span class="hl sym">;</span>
	<span class="hl kwb">int</span> bytes <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
	<span class="hl kwb">int</span> replies <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

	<span class="hl kwd">memset</span><span class="hl sym">(</span>request<span class="hl sym">,</span> <span class="hl str">'&gt;'</span><span class="hl sym">,</span> REQUEST_SIZE<span class="hl sym">);</span>

	<span class="hl kwd">sleep</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">);</span> <span class="hl slc">//wait for server to start</span>

	<span class="hl kwa">if</span> <span class="hl sym">((</span>sock <span class="hl sym">=</span> <span class="hl kwd">socket</span><span class="hl sym">(</span>PF_INET<span class="hl sym">,</span> SOCK_STREAM<span class="hl sym">,</span> IPPROTO_TCP<span class="hl sym">)) &lt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
		<span class="hl kwd">exit</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">);</span>

	<span class="hl kwd">memset</span><span class="hl sym">(&amp;</span>servaddr<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span>servaddr<span class="hl sym">));</span>
	servaddr<span class="hl sym">.</span>sin_family <span class="hl sym">=</span> AF_INET<span class="hl sym">;</span>
	servaddr<span class="hl sym">.</span>sin_addr<span class="hl sym">.</span>s_addr <span class="hl sym">=</span> <span class="hl kwd">htonl</span><span class="hl sym">(</span>INADDR_LOOPBACK<span class="hl sym">);</span>
	servaddr<span class="hl sym">.</span>sin_port <span class="hl sym">=</span> <span class="hl kwd">htons</span><span class="hl sym">(</span>PORT_NUMBER<span class="hl sym">);</span>

	<span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">connect</span><span class="hl sym">(</span>sock<span class="hl sym">, (</span><span class="hl kwb">struct</span> sockaddr <span class="hl sym">*) &amp;</span>servaddr<span class="hl sym">,</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span>servaddr<span class="hl sym">)) &lt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
		<span class="hl kwd">exit</span><span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">);</span>

	<span class="hl kwa">while</span> <span class="hl sym">(</span>n<span class="hl sym">-- &gt;</span> <span class="hl num">0</span><span class="hl sym">) {</span>
		tmpbytes <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

		<span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">send</span><span class="hl sym">(</span>sock<span class="hl sym">,</span> request<span class="hl sym">,</span> REQUEST_SIZE<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">) !=</span> REQUEST_SIZE<span class="hl sym">)</span>
			<span class="hl kwd">exit</span><span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">);</span>

		<span class="hl kwa">while</span> <span class="hl sym">(</span>tmpbytes <span class="hl sym">&lt;</span> REPLY_SIZE<span class="hl sym">)</span>
			tmpbytes <span class="hl sym">+=</span> <span class="hl kwd">recv</span><span class="hl sym">(</span>sock<span class="hl sym">,</span> buf<span class="hl sym">,</span> BUFFER_SIZE <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">);</span>
		bytes <span class="hl sym">+=</span> tmpbytes<span class="hl sym">;</span>
		replies<span class="hl sym">++;</span>
	<span class="hl sym">}</span>
	<span class="hl kwd">close</span><span class="hl sym">(</span>sock<span class="hl sym">);</span>

	<span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;replies: %d</span><span class="hl esc">\t</span><span class="hl str">bytes: %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> replies<span class="hl sym">,</span> bytes<span class="hl sym">);</span>

	<span class="hl kwd">free</span><span class="hl sym">(</span>request<span class="hl sym">);</span>
	<span class="hl kwd">free</span><span class="hl sym">(</span>buf<span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span> <span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span><span class="hl sym">**</span> argv<span class="hl sym">)</span>
<span class="hl sym">{</span>
	<span class="hl kwb">int</span> pid<span class="hl sym">;</span>
	<span class="hl kwb">int</span> n<span class="hl sym">;</span>

	n <span class="hl sym">= (</span>argc <span class="hl sym">==</span> <span class="hl num">2</span> ? <span class="hl kwd">atoi</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]) :</span> <span class="hl num">1</span><span class="hl sym">);</span>

	<span class="hl kwa">if</span> <span class="hl sym">((</span>pid <span class="hl sym">=</span> <span class="hl kwd">fork</span><span class="hl sym">()) &lt;</span> <span class="hl num">0</span><span class="hl sym">) {</span>
		<span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl sym">;</span>
	<span class="hl sym">}</span>
	<span class="hl kwa">if</span> <span class="hl sym">(</span>pid <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">) {</span>
		<span class="hl kwd">client</span><span class="hl sym">(</span>M <span class="hl sym">*</span> n<span class="hl sym">);</span>
	<span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
		<span class="hl kwd">server</span><span class="hl sym">();</span>
	<span class="hl sym">}</span>
	<span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>
