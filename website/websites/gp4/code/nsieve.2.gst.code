<span class="hl com">&quot;* The Computer Language Benchmarks Game    http://shootout.alioth.debian.org/    contributed by Isaac Gouy    modified by Eliot Miranda    then by Nicolas Cellier *&quot;</span><span class="hl sym">!!</span>Tests class methodsFor<span class="hl sym">:</span> <span class="hl str">'benchmark scripts'</span><span class="hl sym">!</span>nsieve2   <span class="hl sym">|</span> n <span class="hl sym">|</span>   n <span class="hl sym">:=</span> <span class="hl kwa">self</span> arg<span class="hl sym">.   (</span>n <span class="hl sym">&lt;</span> <span class="hl num">2</span><span class="hl sym">)</span> ifTrue<span class="hl sym">: [</span>n <span class="hl sym">:=</span> <span class="hl num">2</span><span class="hl sym">].</span>   <span class="hl kwa">self</span> primeBenchmark2For<span class="hl sym">:</span> n to<span class="hl sym">:</span> <span class="hl kwa">self</span> stdout using<span class="hl sym">:</span> Array<span class="hl sym">.   ^</span><span class="hl str">''</span><span class="hl sym">! !!</span>Tests class methodsFor<span class="hl sym">:</span> <span class="hl str">'benchmarking'</span><span class="hl sym">!</span>nsieve2<span class="hl sym">:</span> n using<span class="hl sym">:</span> arrayClass    <span class="hl sym">|</span> count isPrime k <span class="hl sym">|</span>   count <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">.</span>   isPrime <span class="hl sym">:=</span> arrayClass new<span class="hl sym">:</span> n withAll<span class="hl sym">:</span> <span class="hl kwa">true</span><span class="hl sym">.</span>   <span class="hl num">2</span> to<span class="hl sym">:</span> n do<span class="hl sym">:      [:</span>i <span class="hl sym">|       (</span>isPrime at<span class="hl sym">:</span> i<span class="hl sym">)</span> ifTrue<span class="hl sym">:          [</span>k <span class="hl sym">:=</span> i<span class="hl sym">.         [(</span>k <span class="hl sym">:=</span> k <span class="hl sym">+</span> i<span class="hl sym">) &lt;=</span> n<span class="hl sym">]</span> whileTrue<span class="hl sym">: [</span>isPrime at<span class="hl sym">:</span> k put<span class="hl sym">:</span> <span class="hl kwa">false</span><span class="hl sym">].</span>         count <span class="hl sym">:=</span> count <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">]].   ^</span>count<span class="hl sym">! !!</span>Tests class methodsFor<span class="hl sym">:</span> <span class="hl str">'benchmarking'</span><span class="hl sym">!</span>primeBenchmark2For<span class="hl sym">:</span> v to<span class="hl sym">:</span> output using<span class="hl sym">:</span> arrayClass   v to<span class="hl sym">:</span> v <span class="hl sym">-</span> <span class="hl num">2</span> by<span class="hl sym">: -</span><span class="hl num">1</span> do<span class="hl sym">:      [:</span>n<span class="hl sym">| |</span> m <span class="hl sym">|</span>      m <span class="hl sym">:= (</span><span class="hl num">2</span> raisedTo<span class="hl sym">:</span> n<span class="hl sym">) *</span> <span class="hl num">10000</span><span class="hl sym">.</span>      output         nextPutAll<span class="hl sym">:</span> <span class="hl str">'Primes up to '</span><span class="hl sym">;</span>         print<span class="hl sym">:</span> m paddedTo<span class="hl sym">:</span> <span class="hl num">8</span><span class="hl sym">;</span>         print<span class="hl sym">: (</span><span class="hl kwa">self</span> nsieve2<span class="hl sym">:</span> m using<span class="hl sym">:</span> arrayClass<span class="hl sym">)</span> paddedTo<span class="hl sym">:</span> <span class="hl num">9</span><span class="hl sym">;</span> nl      <span class="hl sym">]! !</span>

Tests nsieve2<span class="hl sym">!</span>
