<span class="com">&quot;*  The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy *&quot;</span><span class="sym">!</span>

<span class="sym">!</span>Shootout<span class="sym">.</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>

pidigits
   <span class="sym">|</span> i length n pidigits stream <span class="sym">|</span>
   n <span class="sym">:=</span> CEnvironment argv first asNumber<span class="sym">.</span>
   i <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>
   length <span class="sym">:=</span> <span class="num">10</span><span class="sym">.</span>
   pidigits <span class="sym">:=</span> PiDigitSpigot new<span class="sym">.</span>

   stream <span class="sym">:=</span> ReadWriteStream on<span class="sym">: (</span>String new<span class="sym">:</span> <span class="num">30</span><span class="sym">).</span>

   <span class="sym">[</span>n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">]</span> whileTrue<span class="sym">: [</span>

      <span class="sym">(</span>n <span class="sym">&lt;</span> length<span class="sym">)</span>
         ifTrue<span class="sym">: [</span>
            n timesRepeat<span class="sym">: [</span>
               stream nextPut<span class="sym">: (</span>Character digitValue<span class="sym">:</span> pidigits next<span class="sym">)</span>
               <span class="sym">].</span>

            n to<span class="sym">:</span> length do<span class="sym">: [:</span>each<span class="sym">|</span> stream space<span class="sym">].</span>
            i <span class="sym">:=</span> i <span class="sym">+</span> n<span class="sym">.</span>
            <span class="sym">]</span>

         ifFalse<span class="sym">: [</span>
            length timesRepeat<span class="sym">: [</span>
               stream nextPut<span class="sym">: (</span>Character digitValue<span class="sym">:</span> pidigits next<span class="sym">)</span>
               <span class="sym">].</span>

            i <span class="sym">:=</span> i <span class="sym">+</span> length<span class="sym">.</span>
            <span class="sym">].</span>

     stream tab nextPut<span class="sym">: $:.</span>
      i printOn<span class="sym">:</span> stream<span class="sym">.</span>
      stream cr<span class="sym">.</span>

      OS<span class="sym">.</span>Stdout nextPutAll<span class="sym">:</span> stream contents<span class="sym">.</span>
      stream reset<span class="sym">.</span>
      n <span class="sym">:=</span> n <span class="sym">-</span> length<span class="sym">.</span>
   <span class="sym">].</span>
   <span class="sym">^</span><span class="str">''</span> <span class="sym">! !</span>


Smalltalk<span class="sym">.</span>Shootout defineClass<span class="sym">: #</span>PiDigitSpigot
	superclass<span class="sym">: #</span>{Core<span class="sym">.</span>Object}
	indexedType<span class="sym">: #</span>none
	private<span class="sym">:</span> <span class="kwa">false</span>
	instanceVariableNames<span class="sym">:</span> <span class="str">'z x inverse '</span>
	classInstanceVariableNames<span class="sym">:</span> <span class="str">''</span>
	imports<span class="sym">:</span> <span class="str">''</span>
	category<span class="sym">:</span> <span class="str">'Shootout'</span><span class="sym">!</span>


<span class="sym">!</span>Shootout<span class="sym">.</span>PiDigitSpigot class methodsFor<span class="sym">:</span> <span class="str">'instance creation'</span><span class="sym">!</span>

new
   <span class="sym">^</span><span class="kwa">super</span> new initialize <span class="sym">! !</span>


<span class="sym">!</span>Shootout<span class="sym">.</span>PiDigitSpigot methodsFor<span class="sym">:</span> <span class="str">'initialize-release'</span><span class="sym">!</span>

initialize
   z <span class="sym">:=</span> Transformation unity<span class="sym">.</span>
   x <span class="sym">:=</span> Transformation new<span class="sym">.</span>
   inverse <span class="sym">:=</span> Transformation new<span class="sym">. ! !</span>

<span class="sym">!</span>Shootout<span class="sym">.</span>PiDigitSpigot methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>

next
   <span class="sym">|</span> y <span class="sym">|</span>
   <span class="sym">^(</span><span class="kwa">self</span> isSafe<span class="sym">: (</span>y <span class="sym">:=</span> <span class="kwa">self</span> digit<span class="sym">))</span>
      ifTrue<span class="sym">: [</span>z <span class="sym">:=</span> <span class="kwa">self</span> produce<span class="sym">:</span> y<span class="sym">.</span> y<span class="sym">]</span>
      ifFalse<span class="sym">: [</span>z <span class="sym">:=</span> <span class="kwa">self</span> consume<span class="sym">:</span> x next<span class="sym">.</span> <span class="kwa">self</span> next<span class="sym">] ! !</span>

<span class="sym">!</span>Shootout<span class="sym">.</span>PiDigitSpigot methodsFor<span class="sym">:</span> <span class="str">'private'</span><span class="sym">!</span>

consume<span class="sym">:</span> aTransformation
   <span class="sym">^</span>z <span class="sym">*</span> aTransformation <span class="sym">!</span>

digit
   <span class="sym">^(</span>z extract<span class="sym">:</span> <span class="num">3</span><span class="sym">)</span> floor <span class="sym">!</span>

isSafe<span class="sym">:</span> aDigit
   <span class="sym">^</span>aDigit <span class="sym">= (</span>z extract<span class="sym">:</span> <span class="num">4</span><span class="sym">)</span> floor <span class="sym">!</span>

produce<span class="sym">:</span> anInteger
   inverse q<span class="sym">:</span> <span class="num">10</span> r<span class="sym">: -</span><span class="num">10</span> <span class="sym">*</span> anInteger s<span class="sym">:</span> <span class="num">0</span> t<span class="sym">:</span> <span class="num">1</span><span class="sym">.</span>
   <span class="sym">^</span>inverse <span class="sym">*</span> z <span class="sym">! !</span>


Smalltalk<span class="sym">.</span>Shootout defineClass<span class="sym">: #</span>Transformation
	superclass<span class="sym">: #</span>{Core<span class="sym">.</span>Object}
	indexedType<span class="sym">: #</span>none
	private<span class="sym">:</span> <span class="kwa">false</span>
	instanceVariableNames<span class="sym">:</span> <span class="str">'q r s t k '</span>
	classInstanceVariableNames<span class="sym">:</span> <span class="str">''</span>
	imports<span class="sym">:</span> <span class="str">''</span>
	category<span class="sym">:</span> <span class="str">'Shootout'</span><span class="sym">!</span>


<span class="sym">!</span>Shootout<span class="sym">.</span>Transformation class methodsFor<span class="sym">:</span> <span class="str">'instance creation'</span><span class="sym">!</span>

new
   <span class="sym">^</span><span class="kwa">super</span> new initialize<span class="sym">!</span>

q<span class="sym">:</span> anInteger1 r<span class="sym">:</span> anInteger2 s<span class="sym">:</span> anInteger3 t<span class="sym">:</span> anInteger4
   <span class="sym">^(</span><span class="kwa">super</span> new<span class="sym">)</span> q<span class="sym">:</span> anInteger1 r<span class="sym">:</span> anInteger2 s<span class="sym">:</span> anInteger3 t<span class="sym">:</span> anInteger4 <span class="sym">!</span>

unity
   <span class="sym">^</span><span class="kwa">self</span> q<span class="sym">:</span> <span class="num">1</span> r<span class="sym">:</span> <span class="num">0</span> s<span class="sym">:</span> <span class="num">0</span> t<span class="sym">:</span> <span class="num">1</span> <span class="sym">! !</span>



<span class="sym">!</span>Shootout<span class="sym">.</span>Transformation methodsFor<span class="sym">:</span> <span class="str">'initialize-release'</span><span class="sym">!</span>

initialize
   q <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>
   r <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>
   s <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>
   t <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>
   k <span class="sym">:=</span> <span class="num">0</span><span class="sym">. ! !</span>

<span class="sym">!</span>Shootout<span class="sym">.</span>Transformation methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>

<span class="sym">*</span> aTransformation
   <span class="sym">^</span><span class="kwa">self</span> species
      q<span class="sym">:</span> q <span class="sym">*</span> aTransformation q
      r<span class="sym">:</span> q <span class="sym">*</span> aTransformation r <span class="sym">+ (</span>r <span class="sym">*</span> aTransformation t<span class="sym">)</span>
      s<span class="sym">:</span> s <span class="sym">*</span> aTransformation q <span class="sym">+ (</span>t <span class="sym">*</span> aTransformation s<span class="sym">)</span>
      t<span class="sym">:</span> s <span class="sym">*</span> aTransformation r <span class="sym">+ (</span>t <span class="sym">*</span> aTransformation t<span class="sym">) !</span>

extract<span class="sym">:</span> anInteger
   <span class="sym">^(</span>q <span class="sym">*</span> anInteger <span class="sym">+</span> r<span class="sym">) // (</span>s <span class="sym">*</span> anInteger <span class="sym">+</span> t<span class="sym">) !</span>

next
   k <span class="sym">:=</span> k <span class="sym">+</span><span class="num">1</span><span class="sym">.</span>
   q <span class="sym">:=</span> k<span class="sym">.</span>
   r <span class="sym">:=</span> <span class="num">4</span> <span class="sym">*</span> k <span class="sym">+</span> <span class="num">2</span><span class="sym">.</span>
   s <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>
   t <span class="sym">:=</span> <span class="num">2</span> <span class="sym">*</span> k <span class="sym">+</span> <span class="num">1</span><span class="sym">. !</span>

q
   <span class="sym">^</span>q <span class="sym">!</span>

q<span class="sym">:</span> anInteger1 r<span class="sym">:</span> anInteger2 s<span class="sym">:</span> anInteger3 t<span class="sym">:</span> anInteger4
   q <span class="sym">:=</span> anInteger1<span class="sym">.</span>
   r <span class="sym">:=</span> anInteger2<span class="sym">.</span>
   s <span class="sym">:=</span> anInteger3<span class="sym">.</span>
   t <span class="sym">:=</span> anInteger4<span class="sym">.</span>
   k <span class="sym">:=</span> <span class="num">0</span><span class="sym">. !</span>

r
   <span class="sym">^</span>r <span class="sym">!</span>

s
   <span class="sym">^</span>s <span class="sym">!</span>

t
   <span class="sym">^</span>t <span class="sym">! !</span>
