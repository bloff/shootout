<span class="com">/*</span>
<span class="com">	The Great Computer Language Shootout</span>
<span class="com">	http://shootout.alioth.debian.org/</span>
<span class="com">	Based on the SML version, written by Matthias Blume,</span>
<span class="com">	and the Clean program, written by Diederik van Arkel.</span>
<span class="com">	Contributed by John van Groningen</span>
<span class="com">*/</span>

<span class="kwa">module</span> mandelbrot

<span class="kwa">import</span> StdEnv<span class="sym">,</span>LanguageShootout

Start world
	<span class="sym"># (</span>console<span class="sym">,</span> world<span class="sym">)	=</span> stdio world
	  width				<span class="sym">=</span> argi
	  console			<span class="sym">=</span> console &lt;&lt;&lt; <span class="str">&quot;P4\n&quot;</span> &lt;&lt;&lt; width &lt;&lt;&lt; <span class="str">&quot; &quot;</span> &lt;&lt;&lt; width &lt;&lt;&lt; <span class="str">&quot;\n&quot;</span>
	  console			<span class="sym">=</span> loop_y <span class="num">0</span> console width width
	<span class="sym">=</span> snd <span class="sym">(</span>fclose console world<span class="sym">)</span>

max_iter <span class="sym">:==</span> <span class="num">50</span>

loop_y <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!*</span><span class="kwb">File</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">-&gt; *</span><span class="kwb">File</span>
loop_y y file width height
	<span class="sym">|</span> y&lt;width
		<span class="sym">=</span> loop_y <span class="sym">(</span>y<span class="sym">+</span><span class="num">1</span><span class="sym">) (</span>loop_x <span class="num">0</span> y <span class="num">0 8</span> file width height<span class="sym">)</span> width height
		<span class="sym">=</span> file

loop_x <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!*</span><span class="kwb">File</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">-&gt; *</span><span class="kwb">File</span>
loop_x x y bits bit_shift file width height
	<span class="sym">|</span> x&lt;height
		<span class="sym">|</span> bit_shift<span class="sym">==</span><span class="num">0</span>
			<span class="sym">=</span> loop_x x y <span class="num">0 8</span> <span class="sym">(</span>fwritec <span class="sym">(</span>toChar bits<span class="sym">)</span> file<span class="sym">)</span> width height
			<span class="sym"># (</span>w<span class="sym">,</span>h<span class="sym">) = (</span>toReal width<span class="sym">,</span>toReal height<span class="sym">)</span>
			  c <span class="sym">= (</span><span class="num">2.0</span><span class="sym">*</span>toReal x<span class="sym">/</span>w <span class="sym">-</span> <span class="num">1.5</span><span class="sym">,</span> <span class="num">2.0</span><span class="sym">*</span>toReal y<span class="sym">/</span>h <span class="sym">-</span> <span class="num">1.0</span><span class="sym">)</span>
			  point <span class="sym">=</span> fractal <span class="sym">(</span><span class="num">0.0</span><span class="sym">,</span><span class="num">0.0</span><span class="sym">)</span> max_iter c
			<span class="sym">=</span> loop_x <span class="sym">(</span>x<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> y <span class="sym">(</span>bits<span class="sym">+</span>bits<span class="sym">+</span>point<span class="sym">) (</span>bit_shift<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> file width height
		<span class="sym">|</span> bit_shift&lt;<span class="num">8</span>
			<span class="sym">=</span> fwritec <span class="sym">(</span>toChar <span class="sym">(</span>bits&lt;&lt;bit_shift<span class="sym">))</span> file
			<span class="sym">=</span> file

fractal <span class="sym">:: !(!</span><span class="kwb">Real</span><span class="sym">,!</span><span class="kwb">Real</span><span class="sym">) !</span><span class="kwb">Int</span> <span class="sym">!(!</span><span class="kwb">Real</span><span class="sym">,!</span><span class="kwb">Real</span><span class="sym">) -&gt;</span> <span class="kwb">Int</span>
fractal <span class="sym">(</span>r<span class="sym">,</span>i<span class="sym">)</span> iter c<span class="sym">=:(</span>cr<span class="sym">,</span>ci<span class="sym">)</span>
	<span class="sym"># (</span>r2<span class="sym">,</span>i2<span class="sym">) = (</span>r<span class="sym">*</span>r<span class="sym">,</span>i<span class="sym">*</span>i<span class="sym">)</span>
	<span class="sym">|</span> r2 <span class="sym">+</span> i2 &lt;<span class="sym">=</span> <span class="num">4.0</span>
		<span class="sym">|</span> iter &gt; <span class="num">0</span>	<span class="sym">=</span> <span class="kwa">let</span> pri<span class="sym">=</span>r<span class="sym">*</span>i <span class="kwa">in</span> fractal <span class="sym">(</span>r2<span class="sym">-</span>i2<span class="sym">+</span>cr<span class="sym">,</span>pri<span class="sym">+</span>pri<span class="sym">+</span>ci<span class="sym">) (</span>iter<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> c
					<span class="sym">=</span> <span class="num">1</span>
		<span class="sym">=</span> <span class="num">0</span>
