<span class="com">/**</span>
<span class="com"> * fannkuch.pike by Robert Brandner</span>
<span class="com"> * heavily based on the Java JDK-client version by Paul Lofte</span>
<span class="com"> */</span>
<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">array</span><span class="sym">(</span><span class="kwb">string</span><span class="sym">)</span> argv<span class="sym">) {</span>
	<span class="kwb">int</span> n <span class="sym">= (</span><span class="kwb">int</span><span class="sym">)</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">];</span>
	<span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;Pfannkuchen(&quot;</span> <span class="sym">+</span> n <span class="sym">+</span> <span class="str">&quot;) = &quot;</span> <span class="sym">+</span> <span class="kwd">fannkuch</span><span class="sym">(</span>n<span class="sym">)+</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">fannkuch</span><span class="sym">(</span><span class="kwb">int</span> n<span class="sym">) {</span>
    <span class="kwb">int</span> check <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwb">array</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">)</span> perm <span class="sym">=</span> <span class="kwa">allocate</span><span class="sym">(</span>n<span class="sym">);</span>
    <span class="kwb">array</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">)</span> perm1 <span class="sym">=</span> <span class="kwa">allocate</span><span class="sym">(</span>n<span class="sym">);</span>
    <span class="kwb">array</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">)</span> count <span class="sym">=</span> <span class="kwa">allocate</span><span class="sym">(</span>n<span class="sym">);</span>
    <span class="kwb">array</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">)</span> maxPerm <span class="sym">=</span> <span class="kwa">allocate</span><span class="sym">(</span>n<span class="sym">);</span>
    <span class="kwb">int</span> maxFlipsCount <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwb">int</span> m <span class="sym">=</span> n <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span>

    <span class="kwd">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++)</span> perm1<span class="sym">[</span>i<span class="sym">] =</span> i<span class="sym">;</span>
    <span class="kwb">int</span> r <span class="sym">=</span> n<span class="sym">;</span>

    <span class="kwd">while</span> <span class="sym">(</span><span class="num">1</span><span class="sym">) {</span>
        <span class="slc">// write-out the first 30 permutations</span>
        <span class="kwd">if</span> <span class="sym">(</span>check <span class="sym">&lt;</span> <span class="num">30</span><span class="sym">){</span>
          <span class="kwd">for</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++)</span> <span class="kwa">write</span><span class="sym">((</span><span class="kwb">string</span><span class="sym">)(</span>perm1<span class="sym">[</span>i<span class="sym">]+</span><span class="num">1</span><span class="sym">));</span>
          <span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
          check<span class="sym">++;</span>
        <span class="sym">}</span>

        <span class="kwd">while</span> <span class="sym">(</span>r <span class="sym">!=</span> <span class="num">1</span><span class="sym">) {</span> count<span class="sym">[</span>r <span class="sym">-</span> <span class="num">1</span><span class="sym">] =</span> r<span class="sym">;</span> r<span class="sym">--; }</span>
        <span class="kwd">if</span> <span class="sym">(!(</span>perm1<span class="sym">[</span><span class="num">0</span><span class="sym">] ==</span> <span class="num">0</span> <span class="sym">||</span> perm1<span class="sym">[</span>m<span class="sym">] ==</span> m<span class="sym">)) {</span>
            <span class="kwd">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++)</span> perm<span class="sym">[</span>i<span class="sym">] =</span> perm1<span class="sym">[</span>i<span class="sym">];</span>

            <span class="kwb">int</span> flipsCount <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
            <span class="kwb">int</span> k<span class="sym">;</span>

            <span class="kwd">while</span> <span class="sym">(!((</span>k <span class="sym">=</span> perm<span class="sym">[</span><span class="num">0</span><span class="sym">]) ==</span> <span class="num">0</span><span class="sym">)) {</span>
                <span class="kwb">int</span> k2 <span class="sym">= (</span>k <span class="sym">+</span> <span class="num">1</span><span class="sym">) &gt;&gt;</span> <span class="num">1</span><span class="sym">;</span>
                <span class="kwd">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> k2<span class="sym">;</span> i<span class="sym">++) {</span>
                    <span class="kwb">int</span> temp <span class="sym">=</span> perm<span class="sym">[</span>i<span class="sym">];</span> perm<span class="sym">[</span>i<span class="sym">] =</span> perm<span class="sym">[</span>k <span class="sym">-</span> i<span class="sym">];</span> perm<span class="sym">[</span>k <span class="sym">-</span> i<span class="sym">] =</span> temp<span class="sym">;</span>
                <span class="sym">}</span>
                flipsCount<span class="sym">++;</span>
            <span class="sym">}</span>

            <span class="kwd">if</span> <span class="sym">(</span>flipsCount <span class="sym">&gt;</span> maxFlipsCount<span class="sym">) {</span>
                maxFlipsCount <span class="sym">=</span> flipsCount<span class="sym">;</span>
                <span class="kwd">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++)</span> maxPerm<span class="sym">[</span>i<span class="sym">] =</span> perm1<span class="sym">[</span>i<span class="sym">];</span>
            <span class="sym">}</span>
        <span class="sym">}</span>

        <span class="kwd">while</span> <span class="sym">(</span><span class="num">1</span><span class="sym">) {</span>
            <span class="kwd">if</span> <span class="sym">(</span>r <span class="sym">==</span> n<span class="sym">)</span> return maxFlipsCount<span class="sym">;</span>
            <span class="kwb">int</span> perm0 <span class="sym">=</span> perm1<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
            <span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
            <span class="kwd">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> r<span class="sym">) {</span>
                <span class="kwb">int</span> j <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
                perm1<span class="sym">[</span>i<span class="sym">] =</span> perm1<span class="sym">[</span>j<span class="sym">];</span>
                i <span class="sym">=</span> j<span class="sym">;</span>
            <span class="sym">}</span>
            perm1<span class="sym">[</span>r<span class="sym">] =</span> perm0<span class="sym">;</span>

            count<span class="sym">[</span>r<span class="sym">] =</span> count<span class="sym">[</span>r<span class="sym">] -</span> <span class="num">1</span><span class="sym">;</span>
            <span class="kwd">if</span> <span class="sym">(</span>count<span class="sym">[</span>r<span class="sym">] &gt;</span> <span class="num">0</span><span class="sym">)</span> break<span class="sym">;</span>
            r<span class="sym">++;</span>
        <span class="sym">}</span>
    <span class="sym">}</span>
<span class="sym">}</span>

