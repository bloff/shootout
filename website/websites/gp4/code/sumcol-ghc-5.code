<span class="hl com">{-# OPTIONS -fbang-patterns #-}</span>
<span class="hl slc">--</span>
<span class="hl slc">-- The Computer Language Shootout</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Contributed by Vasile Gaburici, refactored heavily by Don Stewart</span>
<span class="hl slc">-- Real line-oriented I/O</span>
<span class="hl slc">--</span>

<span class="hl kwa">import qualified</span> Data.ByteString.Char8 <span class="hl kwa">as</span> S
<span class="hl kwa">import</span> Control.Exception <span class="hl kwa">as</span> E
<span class="hl kwa">import</span> Control.Monad
<span class="hl kwa">import</span> Data.Maybe
<span class="hl kwa">import</span> System.Exit

main <span class="hl sym">=</span> go <span class="hl num">0</span>
  <span class="hl kwa">where</span>
    go <span class="hl sym">!</span>n <span class="hl sym">=</span> <span class="hl kwa">do</span>
        s <span class="hl sym">&lt;-</span> E.handle <span class="hl sym">(</span>const <span class="hl sym">(</span>return Nothing<span class="hl sym">)) (</span>liftM return S.getLine<span class="hl sym">)</span>
        <span class="hl kwa">case</span> s <span class="hl kwa">of</span>
            Nothing <span class="hl sym">-&gt;</span> print n
            Just t  <span class="hl sym">-&gt;</span> go <span class="hl sym">(</span>n<span class="hl sym">+</span>k<span class="hl sym">)</span> <span class="hl kwa">where</span> Just <span class="hl sym">(</span>k<span class="hl sym">,</span>_<span class="hl sym">) =</span> S.readInt t
