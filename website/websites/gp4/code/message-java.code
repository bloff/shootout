<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by James McIlree</span>
<span class="hl com">   modified by Dimitar Dimitrov</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span>concurrent<span class="hl sym">.</span><span class="hl kwc">BlockingQueue</span><span class="hl sym">;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span>concurrent<span class="hl sym">.</span><span class="hl kwc">ArrayBlockingQueue</span><span class="hl sym">;</span>


<span class="hl kwa">public class</span> message <span class="hl kwa">implements</span> <span class="hl kwc">Runnable</span> <span class="hl sym">{</span>
    <span class="hl kwa">private static final</span> <span class="hl kwb">int</span> NUMBER_OF_THREADS <span class="hl sym">=</span> <span class="hl num">500</span><span class="hl sym">;</span>
    <span class="hl kwa">private static final</span> <span class="hl kwb">double</span> QUEUE_BUFFER_RATIO <span class="hl sym">=</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span><span class="hl kwd">getInteger</span><span class="hl sym">(</span><span class="hl str">&quot;bufferPct&quot;</span><span class="hl sym">,</span> <span class="hl num">100</span><span class="hl sym">) /</span> <span class="hl num">100.0</span><span class="hl sym">;</span>

    <span class="hl kwa">private final</span> <span class="hl kwc">BlockingQueue</span><span class="hl sym">&lt;</span><span class="hl kwc">Integer</span><span class="hl sym">&gt;</span> queue<span class="hl sym">;</span>
    <span class="hl kwa">private final</span> message next<span class="hl sym">;</span>

    <span class="hl kwd">message</span><span class="hl sym">(</span>message next<span class="hl sym">,</span> <span class="hl kwb">int</span> queueSize<span class="hl sym">) {</span>
        <span class="hl kwa">this</span><span class="hl sym">.</span>queue <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">ArrayBlockingQueue</span><span class="hl sym">&lt;</span><span class="hl kwc">Integer</span><span class="hl sym">&gt;(</span>queueSize<span class="hl sym">);</span>
        <span class="hl kwa">this</span><span class="hl sym">.</span>next <span class="hl sym">=</span> next<span class="hl sym">;</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">run</span><span class="hl sym">() {</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>next<span class="hl sym">==</span>null<span class="hl sym">)</span>  <span class="hl kwa">return</span><span class="hl sym">;</span>
        <span class="hl kwa">try</span> <span class="hl sym">{</span>
            <span class="hl kwa">while</span> <span class="hl sym">(</span>true<span class="hl sym">) {</span>
                next<span class="hl sym">.</span>queue<span class="hl sym">.</span><span class="hl kwd">put</span><span class="hl sym">(</span><span class="hl kwa">this</span><span class="hl sym">.</span>queue<span class="hl sym">.</span><span class="hl kwd">take</span><span class="hl sym">() +</span> <span class="hl num">1</span><span class="hl sym">);</span>
            <span class="hl sym">}</span>
        <span class="hl sym">}</span> <span class="hl kwa">catch</span> <span class="hl sym">(</span><span class="hl kwc">InterruptedException</span> e<span class="hl sym">) {</span>
            <span class="hl kwa">throw new</span> <span class="hl kwc">RuntimeException</span><span class="hl sym">(</span>e<span class="hl sym">);</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwc">String</span> args<span class="hl sym">[])</span> <span class="hl kwa">throws</span> <span class="hl kwc">InterruptedException</span> <span class="hl sym">{</span>
        <span class="hl kwb">int</span> messagesCount <span class="hl sym">=</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span><span class="hl kwd">parseInt</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>
        <span class="hl kwb">int</span> queueSize <span class="hl sym">= (</span><span class="hl kwb">int</span><span class="hl sym">) (</span>messagesCount <span class="hl sym">*</span> QUEUE_BUFFER_RATIO<span class="hl sym">);</span>

        message first <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">message</span><span class="hl sym">(</span>null<span class="hl sym">,</span> queueSize<span class="hl sym">);</span>
        message last <span class="hl sym">=</span> first<span class="hl sym">;</span>
        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> NUMBER_OF_THREADS<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">;</span> i<span class="hl sym">++) {</span>
            last <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">message</span><span class="hl sym">(</span>last<span class="hl sym">,</span> queueSize<span class="hl sym">);</span>
            <span class="hl kwc">Thread</span> thread <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">Thread</span><span class="hl sym">(</span>last<span class="hl sym">,</span> <span class="hl str">&quot;Worker-&quot;</span> <span class="hl sym">+</span> i<span class="hl sym">);</span>
            thread<span class="hl sym">.</span><span class="hl kwd">setDaemon</span><span class="hl sym">(</span>true<span class="hl sym">);</span>
            thread<span class="hl sym">.</span><span class="hl kwd">start</span><span class="hl sym">();</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> j <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> j <span class="hl sym">&lt;</span> messagesCount<span class="hl sym">;</span> j<span class="hl sym">++) {</span>
            last<span class="hl sym">.</span>queue<span class="hl sym">.</span><span class="hl kwd">put</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">);</span>
        <span class="hl sym">}</span>

        <span class="hl kwb">int</span> sum <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
        <span class="hl kwa">while</span> <span class="hl sym">(</span>sum <span class="hl sym">&lt;</span> NUMBER_OF_THREADS <span class="hl sym">*</span> messagesCount<span class="hl sym">) {</span>
            sum <span class="hl sym">+=</span> first<span class="hl sym">.</span>queue<span class="hl sym">.</span><span class="hl kwd">take</span><span class="hl sym">();</span>
        <span class="hl sym">}</span>

        <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span>sum<span class="hl sym">);</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>
