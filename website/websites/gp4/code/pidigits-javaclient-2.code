<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">   modified by Richard Warburton on 29th Oct. 2006</span>
<span class="com">*/</span>

<span class="kwa">import</span> java<span class="sym">.</span>math<span class="sym">.</span><span class="kwc">BigInteger</span><span class="sym">;</span>

<span class="kwa">public class</span> pidigits <span class="sym">{</span>
   <span class="kwa">static final</span> <span class="kwb">int</span> L <span class="sym">=</span> <span class="num">10</span><span class="sym">;</span>

   <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwc">String</span> args<span class="sym">[]) {</span>
      <span class="kwb">int</span> n <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span><span class="kwd">parseInt</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>
      <span class="kwb">int</span> j <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

      PiDigitSpigot digits <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">PiDigitSpigot</span><span class="sym">();</span>

      <span class="kwc">StringBuffer</span> sb <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">StringBuffer</span><span class="sym">(</span>L <span class="sym">*</span> n<span class="sym">);</span>

      <span class="kwa">while</span> <span class="sym">(</span>n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">){</span>
         <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&gt;=</span> L<span class="sym">){</span>
            <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>L<span class="sym">;</span> i<span class="sym">++)</span> sb<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span> digits<span class="sym">.</span><span class="kwd">next</span><span class="sym">() );</span>
            j <span class="sym">+=</span> L<span class="sym">;</span>
         <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
            <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++)</span> sb<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span> digits<span class="sym">.</span><span class="kwd">next</span><span class="sym">() );</span>
            <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span>n<span class="sym">;</span> i<span class="sym">&lt;</span>L<span class="sym">;</span> i<span class="sym">++)</span> sb<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span><span class="str">&quot; &quot;</span><span class="sym">);</span>
            j <span class="sym">+=</span> n<span class="sym">;</span>
         <span class="sym">}</span>
         sb<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\t</span><span class="str">:&quot;</span><span class="sym">);</span> sb<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span>j<span class="sym">);</span> sb<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
         n <span class="sym">-=</span> L<span class="sym">;</span>
      <span class="sym">}</span>

      <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">println</span><span class="sym">(</span>sb<span class="sym">.</span><span class="kwd">toString</span><span class="sym">());</span>
   <span class="sym">}</span>
<span class="sym">}</span>


<span class="kwa">class</span> PiDigitSpigot <span class="sym">{</span>
   Transformation z<span class="sym">,</span> x<span class="sym">,</span> inverse<span class="sym">;</span>

   <span class="kwa">public</span> <span class="kwd">PiDigitSpigot</span><span class="sym">(){</span>
      z <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Transformation</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">);</span>
      x <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Transformation</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">);</span>
      inverse <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Transformation</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">);</span>
   <span class="sym">}</span>

   <span class="kwa">public</span> <span class="kwb">int</span> <span class="kwd">next</span><span class="sym">(){</span>
      <span class="kwb">int</span> y <span class="sym">=</span> <span class="kwd">digit</span><span class="sym">();</span>
      <span class="kwa">if</span> <span class="sym">(</span><span class="kwd">isSafe</span><span class="sym">(</span>y<span class="sym">)){</span>
         z <span class="sym">=</span> <span class="kwd">produce</span><span class="sym">(</span>y<span class="sym">);</span> <span class="kwa">return</span> y<span class="sym">;</span>
      <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
         z <span class="sym">=</span> <span class="kwd">consume</span><span class="sym">(</span> x<span class="sym">.</span><span class="kwd">next</span><span class="sym">() );</span> <span class="kwa">return</span> <span class="kwd">next</span><span class="sym">();</span>
      <span class="sym">}</span>
   <span class="sym">}</span>

   <span class="kwa">public</span> <span class="kwb">int</span> <span class="kwd">digit</span><span class="sym">(){</span>
      <span class="kwa">return</span> z<span class="sym">.</span><span class="kwd">extract</span><span class="sym">(</span><span class="num">3</span><span class="sym">);</span>
   <span class="sym">}</span>

   <span class="kwa">public</span> <span class="kwb">boolean</span> <span class="kwd">isSafe</span><span class="sym">(</span><span class="kwb">int</span> digit<span class="sym">){</span>
      <span class="kwa">return</span> digit <span class="sym">==</span> z<span class="sym">.</span><span class="kwd">extract</span><span class="sym">(</span><span class="num">4</span><span class="sym">);</span>
   <span class="sym">}</span>

   <span class="kwa">public</span> Transformation <span class="kwd">produce</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">){</span>
      <span class="kwa">return</span> <span class="sym">(</span> inverse<span class="sym">.</span><span class="kwd">qrst</span><span class="sym">(</span><span class="num">10</span><span class="sym">,-</span><span class="num">10</span><span class="sym">*</span>i<span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">) ).</span><span class="kwd">compose</span><span class="sym">(</span>z<span class="sym">);</span>
   <span class="sym">}</span>

   <span class="kwa">public</span> Transformation <span class="kwd">consume</span><span class="sym">(</span>Transformation a<span class="sym">){</span>
      <span class="kwa">return</span> z<span class="sym">.</span><span class="kwd">compose</span><span class="sym">(</span>a<span class="sym">);</span>
   <span class="sym">}</span>
<span class="sym">}</span>


<span class="kwa">class</span> Transformation <span class="sym">{</span>
   <span class="kwc">BigInteger</span> q<span class="sym">,</span> r<span class="sym">,</span> s<span class="sym">,</span> t<span class="sym">;</span>
   <span class="kwb">int</span> k<span class="sym">;</span>

   <span class="kwa">public</span> <span class="kwd">Transformation</span><span class="sym">(</span><span class="kwb">int</span> q<span class="sym">,</span> <span class="kwb">int</span> r<span class="sym">,</span> <span class="kwb">int</span> s<span class="sym">,</span> <span class="kwb">int</span> t<span class="sym">){</span>
      <span class="kwa">this</span><span class="sym">.</span>q <span class="sym">=</span> <span class="kwc">BigInteger</span><span class="sym">.</span><span class="kwd">valueOf</span><span class="sym">(</span>q<span class="sym">);</span>
      <span class="kwa">this</span><span class="sym">.</span>r <span class="sym">=</span> <span class="kwc">BigInteger</span><span class="sym">.</span><span class="kwd">valueOf</span><span class="sym">(</span>r<span class="sym">);</span>
      <span class="kwa">this</span><span class="sym">.</span>s <span class="sym">=</span> <span class="kwc">BigInteger</span><span class="sym">.</span><span class="kwd">valueOf</span><span class="sym">(</span>s<span class="sym">);</span>
      <span class="kwa">this</span><span class="sym">.</span>t <span class="sym">=</span> <span class="kwc">BigInteger</span><span class="sym">.</span><span class="kwd">valueOf</span><span class="sym">(</span>t<span class="sym">);</span>
      k <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="sym">}</span>

   <span class="kwa">public</span> <span class="kwd">Transformation</span><span class="sym">(</span><span class="kwc">BigInteger</span> q<span class="sym">,</span> <span class="kwc">BigInteger</span> r<span class="sym">,</span> <span class="kwc">BigInteger</span> s<span class="sym">,</span> <span class="kwc">BigInteger</span> t<span class="sym">){</span>
      <span class="kwa">this</span><span class="sym">.</span>q <span class="sym">=</span> q<span class="sym">;</span>
      <span class="kwa">this</span><span class="sym">.</span>r <span class="sym">=</span> r<span class="sym">;</span>
      <span class="kwa">this</span><span class="sym">.</span>s <span class="sym">=</span> s<span class="sym">;</span>
      <span class="kwa">this</span><span class="sym">.</span>t <span class="sym">=</span> t<span class="sym">;</span>
      k <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="sym">}</span>

   <span class="kwa">public</span> Transformation <span class="kwd">next</span><span class="sym">(){</span>
      k<span class="sym">++;</span>
      q <span class="sym">=</span> <span class="kwc">BigInteger</span><span class="sym">.</span><span class="kwd">valueOf</span><span class="sym">(</span>k<span class="sym">);</span>
      r <span class="sym">=</span> <span class="kwc">BigInteger</span><span class="sym">.</span><span class="kwd">valueOf</span><span class="sym">(</span><span class="num">4</span> <span class="sym">*</span> k <span class="sym">+</span> <span class="num">2</span><span class="sym">);</span>
      s <span class="sym">=</span> <span class="kwc">BigInteger</span><span class="sym">.</span><span class="kwd">valueOf</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
      t <span class="sym">=</span> <span class="kwc">BigInteger</span><span class="sym">.</span><span class="kwd">valueOf</span><span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> k <span class="sym">+</span> <span class="num">1</span><span class="sym">);</span>
      <span class="kwa">return this</span><span class="sym">;</span>
   <span class="sym">}</span>

   <span class="kwa">public</span> <span class="kwb">int</span> <span class="kwd">extract</span><span class="sym">(</span><span class="kwb">int</span> j<span class="sym">){</span>
      <span class="kwc">BigInteger</span> bigj <span class="sym">=</span> <span class="kwc">BigInteger</span><span class="sym">.</span><span class="kwd">valueOf</span><span class="sym">(</span>j<span class="sym">);</span>
      <span class="kwc">BigInteger</span> numerator <span class="sym">= (</span>q<span class="sym">.</span><span class="kwd">multiply</span><span class="sym">(</span>bigj<span class="sym">)).</span><span class="kwd">add</span><span class="sym">(</span>r<span class="sym">);</span>
      <span class="kwc">BigInteger</span> denominator <span class="sym">= (</span>s<span class="sym">.</span><span class="kwd">multiply</span><span class="sym">(</span>bigj<span class="sym">)).</span><span class="kwd">add</span><span class="sym">(</span>t<span class="sym">);</span>
      <span class="kwa">return</span> <span class="sym">(</span> numerator<span class="sym">.</span><span class="kwd">divide</span><span class="sym">(</span>denominator<span class="sym">) ).</span><span class="kwd">intValue</span><span class="sym">();</span>
   <span class="sym">}</span>

   <span class="kwa">public</span> Transformation <span class="kwd">qrst</span><span class="sym">(</span><span class="kwb">int</span> q<span class="sym">,</span> <span class="kwb">int</span> r<span class="sym">,</span> <span class="kwb">int</span> s<span class="sym">,</span> <span class="kwb">int</span> t<span class="sym">){</span>
      <span class="kwa">this</span><span class="sym">.</span>q <span class="sym">=</span> <span class="kwc">BigInteger</span><span class="sym">.</span><span class="kwd">valueOf</span><span class="sym">(</span>q<span class="sym">);</span>
      <span class="kwa">this</span><span class="sym">.</span>r <span class="sym">=</span> <span class="kwc">BigInteger</span><span class="sym">.</span><span class="kwd">valueOf</span><span class="sym">(</span>r<span class="sym">);</span>
      <span class="kwa">this</span><span class="sym">.</span>s <span class="sym">=</span> <span class="kwc">BigInteger</span><span class="sym">.</span><span class="kwd">valueOf</span><span class="sym">(</span>s<span class="sym">);</span>
      <span class="kwa">this</span><span class="sym">.</span>t <span class="sym">=</span> <span class="kwc">BigInteger</span><span class="sym">.</span><span class="kwd">valueOf</span><span class="sym">(</span>t<span class="sym">);</span>
      k <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
      <span class="kwa">return this</span><span class="sym">;</span>
   <span class="sym">}</span>

   <span class="kwa">public</span> Transformation <span class="kwd">compose</span><span class="sym">(</span>Transformation a<span class="sym">){</span>
      <span class="kwa">return new</span> <span class="kwd">Transformation</span><span class="sym">(</span>
         q<span class="sym">.</span><span class="kwd">multiply</span><span class="sym">(</span>a<span class="sym">.</span>q<span class="sym">)</span>
         <span class="sym">,(</span>q<span class="sym">.</span><span class="kwd">multiply</span><span class="sym">(</span>a<span class="sym">.</span>r<span class="sym">)).</span><span class="kwd">add</span><span class="sym">( (</span>r<span class="sym">.</span><span class="kwd">multiply</span><span class="sym">(</span>a<span class="sym">.</span>t<span class="sym">)) )</span>
         <span class="sym">,(</span>s<span class="sym">.</span><span class="kwd">multiply</span><span class="sym">(</span>a<span class="sym">.</span>q<span class="sym">)).</span><span class="kwd">add</span><span class="sym">( (</span>t<span class="sym">.</span><span class="kwd">multiply</span><span class="sym">(</span>a<span class="sym">.</span>s<span class="sym">)) )</span>
         <span class="sym">,(</span>s<span class="sym">.</span><span class="kwd">multiply</span><span class="sym">(</span>a<span class="sym">.</span>r<span class="sym">)).</span><span class="kwd">add</span><span class="sym">( (</span>t<span class="sym">.</span><span class="kwd">multiply</span><span class="sym">(</span>a<span class="sym">.</span>t<span class="sym">)) )</span>
         <span class="sym">);</span>
   <span class="sym">}</span>
<span class="sym">}</span>



