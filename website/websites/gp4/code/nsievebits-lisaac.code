<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Xavier Oswald</span>
<span class="hl com">*/</span>

Section Header

  <span class="hl sym">+</span> name <span class="hl sym">:=</span> NSIEVEBITS<span class="hl sym">;</span>

Section Inherit

  <span class="hl sym">-</span> parent_any<span class="hl sym">:</span>OBJECT <span class="hl sym">:=</span> OBJECT<span class="hl sym">;</span>

Section Private

  <span class="hl sym">-</span> primes      <span class="hl sym">:</span>FAST_ARRAY<span class="hl sym">[</span>UINTEGER_32<span class="hl sym">];</span>

  <span class="hl sym">-</span> sizeof_bits <span class="hl sym">:</span>UINTEGER_32 <span class="hl sym">:=</span> <span class="hl num">4</span><span class="hl sym">;</span>

  <span class="hl sym">-</span> bbits       <span class="hl sym">:</span>UINTEGER_32 <span class="hl sym">:=</span> <span class="hl num">32</span><span class="hl sym">;</span>

  <span class="hl sym">-</span> bsize x<span class="hl sym">:</span>UINTEGER_32 <span class="hl sym">:</span>UINTEGER_32 <span class="hl sym">&lt;-</span>
  <span class="hl sym">(</span>
    <span class="hl sym">(</span>x <span class="hl sym">/</span> <span class="hl num">8</span><span class="hl sym">) +</span> sizeof_bits
  <span class="hl sym">);</span>

  <span class="hl sym">-</span> bmask x<span class="hl sym">:</span>UINTEGER_32 <span class="hl sym">:</span>UINTEGER_32 <span class="hl sym">&lt;-</span>
  <span class="hl sym">(</span>
    <span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>x % bbits<span class="hl sym">)</span>
  <span class="hl sym">);</span>

  <span class="hl sym">-</span> btest<span class="hl sym">(</span>p<span class="hl sym">:</span> FAST_ARRAY<span class="hl sym">[</span>UINTEGER_32<span class="hl sym">],</span> x <span class="hl sym">:</span>UINTEGER_32<span class="hl sym">) :</span>UINTEGER_32 <span class="hl sym">&lt;-</span>
  <span class="hl sym">(</span>
    <span class="hl sym">(</span>p.item <span class="hl sym">(</span>x <span class="hl sym">/</span> bbits<span class="hl sym">)) &amp;</span> bmask x
  <span class="hl sym">);</span>

  <span class="hl sym">-</span> bflip<span class="hl sym">(</span>p<span class="hl sym">:</span> FAST_ARRAY<span class="hl sym">[</span>UINTEGER_32<span class="hl sym">],</span> x <span class="hl sym">:</span>UINTEGER_32<span class="hl sym">) :</span>UINTEGER_32 <span class="hl sym">&lt;-</span>
  <span class="hl sym">( +</span> t<span class="hl sym">,</span>idx <span class="hl sym">:</span>UINTEGER_32<span class="hl sym">;</span>

    idx <span class="hl sym">:=</span> x <span class="hl sym">/</span> bbits<span class="hl sym">;</span>
    t <span class="hl sym">:=</span> p.item idx ^ bmask x<span class="hl sym">;</span>
    p.put t to idx<span class="hl sym">;</span>
    t
  <span class="hl sym">);</span>

Section Public

  <span class="hl sym">-</span> main <span class="hl sym">&lt;-</span>
  <span class="hl sym">( +</span> sz<span class="hl sym">,</span> param <span class="hl sym">:</span>UINTEGER_32<span class="hl sym">;</span>
    <span class="hl sym">+</span> count<span class="hl sym">,</span> n <span class="hl sym">:</span>UINTEGER_32<span class="hl sym">;</span>
    <span class="hl sym">+</span> j <span class="hl sym">:</span>UINTEGER_32<span class="hl sym">;</span>
    <span class="hl sym">+</span> size <span class="hl sym">:</span>UINTEGER_32<span class="hl sym">;</span>

    <span class="hl sym">(</span>COMMAND_LINE.upper <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">)</span>.if <span class="hl sym">{</span>
      param <span class="hl sym">:=</span> COMMAND_LINE.item <span class="hl num">1</span>.to_integer<span class="hl sym">;</span>
    <span class="hl sym">}</span> else <span class="hl sym">{</span>
      param <span class="hl sym">:=</span> <span class="hl num">1</span><span class="hl sym">;</span>
    <span class="hl sym">};</span>

    sz <span class="hl sym">:=</span> <span class="hl num">10000</span> <span class="hl sym">&lt;&lt;</span> param<span class="hl sym">;</span>
    primes <span class="hl sym">:=</span> FAST_ARRAY<span class="hl sym">[</span>UINTEGER_32<span class="hl sym">]</span>.create <span class="hl sym">(</span>bsize<span class="hl sym">(</span>sz<span class="hl sym">));</span>

    <span class="hl num">0</span>.to <span class="hl num">2</span> do <span class="hl sym">{</span> m<span class="hl sym">:</span>UINTEGER_32<span class="hl sym">;</span>
      count <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      n <span class="hl sym">:=</span> sz <span class="hl sym">&gt;&gt;</span> m<span class="hl sym">;</span>

      size <span class="hl sym">:=</span> bsize<span class="hl sym">(</span>n<span class="hl sym">);</span>
      ? <span class="hl sym">{</span>size <span class="hl sym">&amp;</span> <span class="hl num">3</span> <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">};</span>

      <span class="hl num">0</span>.to <span class="hl sym">(</span>size <span class="hl sym">/</span> <span class="hl num">4</span><span class="hl sym">)</span> do <span class="hl sym">{</span> j1<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
        primes.put <span class="hl sym">(</span>~<span class="hl num">0</span><span class="hl sym">)</span> to j1<span class="hl sym">;</span>
      <span class="hl sym">};</span>

      <span class="hl num">2</span>.to n do <span class="hl sym">{</span> i<span class="hl sym">:</span>UINTEGER_32<span class="hl sym">;</span>
        <span class="hl sym">(</span>btest<span class="hl sym">(</span>primes<span class="hl sym">,</span>i<span class="hl sym">) !=</span> <span class="hl num">0</span><span class="hl sym">)</span>.if <span class="hl sym">{</span>
          count <span class="hl sym">:=</span> count <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
          j <span class="hl sym">:=</span> i <span class="hl sym">+</span> i<span class="hl sym">;</span>
          <span class="hl sym">{</span>j <span class="hl sym">&lt;=</span> n<span class="hl sym">}</span>.while_do <span class="hl sym">{</span>
            <span class="hl sym">(</span>btest<span class="hl sym">(</span>primes<span class="hl sym">,</span>j<span class="hl sym">) !=</span> <span class="hl num">0</span><span class="hl sym">)</span>.if <span class="hl sym">{</span>
              bflip<span class="hl sym">(</span>primes<span class="hl sym">,</span>j<span class="hl sym">);</span>
            <span class="hl sym">};</span>
            j <span class="hl sym">:=</span> j <span class="hl sym">+</span> i<span class="hl sym">;</span>
          <span class="hl sym">};</span>
        <span class="hl sym">};</span>
      <span class="hl sym">};</span>
      <span class="hl str">&quot;Primes up to &quot;</span>.print<span class="hl sym">;</span>
      n.print_format <span class="hl num">8</span><span class="hl sym">;</span>
      <span class="hl str">' '</span>.print<span class="hl sym">;</span>
      count.print_format <span class="hl num">8</span><span class="hl sym">;</span>
      <span class="hl str">'\n'</span>.print<span class="hl sym">;</span>
    <span class="hl sym">};</span>
  <span class="hl sym">);</span>
