<span class="slc">% ----------------------------------------------------------------------</span>
<span class="slc">% The Great Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">%</span>
<span class="slc">% Floating point conversion routines courtesy Juergen Stuber and Jorge</span>
<span class="slc">% Marques Pelizzoni [previously used in other Mozart/Oz Shootout</span>
<span class="slc">% submissions].</span>
<span class="slc">%</span>
<span class="slc">% Contributed by Anthony Borla</span>
<span class="slc">% ----------------------------------------------------------------------</span>

<span class="kwa">functor</span>

<span class="kwa">import</span>
  System<span class="sym">(</span>showInfo<span class="sym">)</span> Application<span class="sym">(</span>exit<span class="sym">)</span> Open<span class="sym">(</span>file text<span class="sym">)</span>

<span class="kwa">define</span>

  <span class="kwa">class</span> TextFile_
    <span class="kwa">from</span> Open<span class="sym">.</span>file Open<span class="sym">.</span>text
  <span class="kwa">end</span>

<span class="slc">% ------------- %</span>

  SPACE <span class="sym">= &amp;\</span><span class="num">040</span>

<span class="slc">% ------------- %</span>

  <span class="kwa">fun</span> <span class="sym">{</span>NewKnucleotide FILE<span class="sym">}</span>

    <span class="kwa">proc</span> <span class="sym">{</span>PrintFrequencies FragmentLength<span class="sym">}</span>
      Entries <span class="sym">= {</span>Dictionary<span class="sym">.</span>entries <span class="sym">{</span>GenerateCounts FragmentLength<span class="sym">}}</span>
      CountSum <span class="sym">= {</span>List<span class="sym">.</span>foldL Entries <span class="kwa">fun</span> <span class="sym">{$</span> A _<span class="sym">#</span>V<span class="sym">} (</span>A <span class="sym">+ {</span>Int<span class="sym">.</span>toFloat V<span class="sym">})</span> <span class="kwa">end</span> <span class="num">0.0</span><span class="sym">}</span>

      CalcFreq <span class="sym">=</span> <span class="kwa">fun</span> <span class="sym">{$</span> K<span class="sym">#</span>V<span class="sym">}</span> K<span class="sym">#({</span>Int<span class="sym">.</span>toFloat V<span class="sym">} /</span> CountSum<span class="sym">) *</span> <span class="num">100.0</span> <span class="kwa">end</span>
      Sorter <span class="sym">=</span> <span class="kwa">fun</span> <span class="sym">{$</span> X<span class="sym">#</span>Xt Y<span class="sym">#</span>Yt<span class="sym">}</span> <span class="kwa">if</span> Xt <span class="sym">==</span> Yt <span class="kwa">then</span> X <span class="sym">&gt;</span> Y <span class="kwa">else</span> Xt <span class="sym">&gt;</span> Yt <span class="kwa">end end</span>
      ShowEntry <span class="sym">=</span> <span class="kwa">proc</span> <span class="sym">{$</span> K<span class="sym">#</span>V<span class="sym">} {</span>System<span class="sym">.</span>showInfo K <span class="sym">#</span> &quot; &quot; <span class="sym"># {</span>FloatToString V <span class="num">3</span><span class="sym">}}</span> <span class="kwa">end</span>

    <span class="kwa">in</span>
      <span class="sym">{</span>ForAll <span class="sym">{</span>List<span class="sym">.</span>sort <span class="sym">{</span>List<span class="sym">.</span>map Entries CalcFreq<span class="sym">}</span> Sorter<span class="sym">}</span> ShowEntry<span class="sym">}</span>
      <span class="sym">{</span>System<span class="sym">.</span>showInfo &quot;&quot;<span class="sym">}</span>
    <span class="kwa">end</span>

    <span class="slc">% ------------- %</span>

    <span class="kwa">proc</span> <span class="sym">{</span>PrintCount Fragment<span class="sym">}</span> Key <span class="sym">= {</span>String<span class="sym">.</span>toAtom Fragment<span class="sym">}</span> Count <span class="kwa">in</span>
      Count <span class="sym">= {</span>Dictionary<span class="sym">.</span>condGet <span class="sym">{</span>GenerateCounts <span class="sym">{</span>List<span class="sym">.</span>length Fragment<span class="sym">}}</span> Key <span class="num">0</span><span class="sym">}</span>
      <span class="slc">%{System.showInfo {PadRight SPACE {Int.toString Count} 8} # Fragment}</span>
      <span class="sym">{</span>System<span class="sym">.</span>showInfo <span class="sym">{</span>Int<span class="sym">.</span>toString Count<span class="sym">} #</span> &quot;<span class="sym">\</span>t&quot; <span class="sym">#</span> Fragment<span class="sym">}</span>
    <span class="kwa">end</span>

    <span class="slc">% ------------- %</span>

    <span class="kwa">fun</span> <span class="sym">{</span>GenerateCounts FragmentLength<span class="sym">}</span>
      Table <span class="sym">= {</span>NewDictionary<span class="sym">}</span>

      <span class="kwa">proc</span> <span class="sym">{</span>Do_J SequenceSlice<span class="sym">}</span>
        <span class="kwa">case</span> SequenceSlice <span class="kwa">of</span> nil <span class="kwa">then</span>
          <span class="kwa">skip</span>
        <span class="kwa">else</span> Key CurrentSlice RestSlice <span class="kwa">in</span>
          <span class="sym">{</span>List<span class="sym">.</span>takeDrop SequenceSlice FragmentLength CurrentSlice RestSlice<span class="sym">}</span>
          <span class="kwa">if</span> <span class="sym">{</span>List<span class="sym">.</span>length CurrentSlice<span class="sym">} &lt;</span> FragmentLength <span class="kwa">then</span>
            <span class="kwa">skip</span>
          <span class="kwa">else</span>
            Key <span class="sym">= {</span>String<span class="sym">.</span>toAtom CurrentSlice<span class="sym">}</span>
            <span class="sym">{</span>Dictionary<span class="sym">.</span>put Table Key <span class="sym">({</span>Dictionary<span class="sym">.</span>condGet Table Key <span class="num">0</span><span class="sym">} +</span> <span class="num">1</span><span class="sym">)}</span>
            <span class="sym">{</span>Do_J RestSlice<span class="sym">}</span>
          <span class="kwa">end</span>
        <span class="kwa">end</span>
      <span class="kwa">end</span>

    <span class="kwa">in</span>
      <span class="kwa">for</span> I <span class="kwa">in</span> <span class="num">1</span><span class="sym">..</span>FragmentLength do
        <span class="kwa">if</span> I <span class="sym">&gt;</span> <span class="num">1</span> <span class="kwa">then</span>
          <span class="sym">{</span>Do_J <span class="sym">{</span>List<span class="sym">.</span>drop Sequence <span class="sym">(</span>I <span class="sym">-</span> <span class="num">1</span><span class="sym">)}}</span>
        <span class="kwa">else</span>
          <span class="sym">{</span>Do_J Sequence<span class="sym">}</span>
        <span class="kwa">end</span>
      <span class="kwa">end</span>

      Table
    <span class="kwa">end</span>

    <span class="slc">% ------------- %</span>

    <span class="kwa">fun</span> <span class="sym">{</span>LoadSequence Loading Sequence_<span class="sym">}</span>
      <span class="kwa">if</span> Loading <span class="kwa">then</span>
        <span class="kwa">case</span> <span class="sym">{</span>FILE getS<span class="sym">($)}</span> <span class="kwa">of false then</span>
          <span class="sym">{</span>List<span class="sym">.</span>reverse Sequence_<span class="sym">}</span>
        elseof <span class="sym">&amp;&gt;|</span>_ <span class="kwa">then</span>
          <span class="sym">{</span>List<span class="sym">.</span>reverse Sequence_<span class="sym">}</span>
        elseof <span class="sym">&amp;;|</span>_ <span class="kwa">then</span>
          <span class="sym">{</span>LoadSequence Loading Sequence_<span class="sym">}</span>
        elseof LINE <span class="kwa">then</span>
          <span class="sym">{</span>LoadSequence Loading <span class="sym">{</span>List<span class="sym">.</span>append <span class="sym">{</span>List<span class="sym">.</span>reverse <span class="sym">{</span>List<span class="sym">.</span>map LINE Char<span class="sym">.</span>toUpper<span class="sym">}}</span> Sequence_<span class="sym">}}</span>
        <span class="kwa">end</span>
      <span class="kwa">else</span>
        <span class="kwa">case</span> <span class="sym">{</span>FILE getS<span class="sym">($)}</span> <span class="kwa">of false then</span>
          <span class="sym">{</span>List<span class="sym">.</span>reverse Sequence_<span class="sym">}</span>
        elseof <span class="sym">&amp;&gt;|&amp;</span>T<span class="sym">|&amp;</span>H<span class="sym">|&amp;</span>R<span class="sym">|&amp;</span>E<span class="sym">|&amp;</span>E<span class="sym">|</span>_ <span class="kwa">then</span>
          <span class="sym">{</span>LoadSequence <span class="kwa">true</span> Sequence_<span class="sym">}</span>
        <span class="kwa">else</span>
          <span class="sym">{</span>LoadSequence Loading Sequence_<span class="sym">}</span>
        <span class="kwa">end</span>
      <span class="kwa">end</span>
    <span class="kwa">end</span>

    Sequence

  <span class="kwa">in</span>
    Sequence <span class="sym">= {</span>LoadSequence <span class="kwa">false</span> nil<span class="sym">}</span>
    ops<span class="sym">(</span>printFrequencies<span class="sym">:</span>PrintFrequencies printCount<span class="sym">:</span>PrintCount<span class="sym">)</span>
  <span class="kwa">end</span>

<span class="slc">% ------------- %</span>

  <span class="slc">%% Floating Point Conversion Routines</span>

  <span class="kwa">fun</span> <span class="sym">{</span>FloatAbs X<span class="sym">}</span>
    <span class="kwa">if</span> X <span class="sym">&gt;=</span> <span class="num">0.0</span> <span class="kwa">then</span> X <span class="kwa">else</span> <span class="sym">~</span>X <span class="kwa">end</span>
  <span class="kwa">end</span>

  <span class="kwa">fun</span> <span class="sym">{</span>FloatSquare X<span class="sym">}</span>
    X <span class="sym">*</span> X
  <span class="kwa">end</span>

  <span class="kwa">fun</span> <span class="sym">{</span>FloatPower X E<span class="sym">}</span>
    <span class="kwa">if</span> E<span class="sym">==</span><span class="num">0</span> <span class="kwa">then</span> <span class="num">1.0</span>
    elseif E<span class="sym">&lt;</span><span class="num">0</span> <span class="kwa">then raise</span> negativeExponent<span class="sym">(</span>E<span class="sym">)</span> <span class="kwa">end</span>
    <span class="kwa">else</span>
      <span class="kwa">if</span> E mod <span class="num">2</span> <span class="sym">==</span> <span class="num">1</span> <span class="kwa">then</span> X <span class="kwa">else</span> <span class="num">1.0</span> <span class="kwa">end</span>
      <span class="sym">* {</span>FloatSquare <span class="sym">{</span>FloatPower X E div <span class="num">2</span><span class="sym">}}</span>
    <span class="kwa">end</span>
  <span class="kwa">end</span>

  <span class="kwa">fun</span> <span class="sym">{</span>MakePadding Ch L<span class="sym">}</span>
    <span class="kwa">if</span> L <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then</span>
      Padding <span class="sym">= {</span>MakeList L<span class="sym">}</span>
    <span class="kwa">in</span>
      <span class="kwa">for</span> V <span class="kwa">in</span> Padding do V <span class="sym">=</span> Ch <span class="kwa">end</span>
        Padding
      <span class="kwa">else</span>
        nil
    <span class="kwa">end</span>
  <span class="kwa">end</span>

  <span class="kwa">fun</span> <span class="sym">{</span>PadLeft Ch String L<span class="sym">}</span>
    PL <span class="sym">=</span> L <span class="sym">- {</span>List<span class="sym">.</span>length String<span class="sym">}</span>
  <span class="kwa">in</span>
    <span class="sym">{</span>MakePadding Ch PL<span class="sym">} #</span> String
  <span class="kwa">end</span>

  <span class="kwa">fun</span> <span class="sym">{</span>PadRight Ch String L<span class="sym">}</span>
    PL <span class="sym">=</span> L <span class="sym">- {</span>List<span class="sym">.</span>length String<span class="sym">}</span>
  <span class="kwa">in</span>
    String <span class="sym"># {</span>MakePadding Ch PL<span class="sym">}</span>
  <span class="kwa">end</span>

  <span class="kwa">fun</span> <span class="sym">{</span>FloatToVS F Prec<span class="sym">}</span>
    <span class="kwa">fun</span> <span class="sym">{</span>FractionToString Frac Prec<span class="sym">}</span>
      <span class="kwa">if</span> Prec <span class="sym">=&lt;</span> <span class="num">0</span> <span class="kwa">then</span> &quot;&quot;
      elseif Prec <span class="sym">&gt;</span> <span class="num">10</span> <span class="kwa">then raise</span> excessivePrecision<span class="sym">(</span>Prec<span class="sym">)</span> <span class="kwa">end</span>
      <span class="kwa">else</span>
        Shifted <span class="sym">= {</span>FloatPower <span class="num">10.0</span> Prec<span class="sym">} *</span> Frac
        Digits <span class="sym">= {</span>FloatToInt <span class="sym">{</span>Round Shifted<span class="sym">}}</span>
        <span class="kwa">in</span> <span class="sym">{</span>PadLeft <span class="sym">&amp;</span><span class="num">0</span> <span class="sym">{</span>IntToString Digits<span class="sym">}</span> Prec<span class="sym">}</span>
      <span class="kwa">end</span>
    <span class="kwa">end</span>

    I <span class="sym">= {</span>FloatToInt <span class="sym">{</span><span class="kwa">if</span> F <span class="sym">&gt;=</span> <span class="num">0.0</span> <span class="kwa">then</span> Floor <span class="kwa">else</span> Ceil <span class="kwa">end</span> F<span class="sym">}}</span>
    Frac <span class="sym">= {</span>FloatAbs F <span class="sym">- {</span>IntToFloat I<span class="sym">}}</span>
  <span class="kwa">in</span>
    <span class="sym">{</span>IntToString I<span class="sym">} #</span> &quot;<span class="sym">.</span>&quot; <span class="sym"># {</span>FractionToString Frac Prec<span class="sym">}</span>
  <span class="kwa">end</span>

  <span class="kwa">fun</span> <span class="sym">{</span>FloatToString F Prec<span class="sym">}</span>
    Result <span class="sym">= {</span>NewCell <span class="sym">{</span>VirtualString<span class="sym">.</span>toString <span class="sym">{</span>FloatToVS F Prec<span class="sym">}}}</span>
    P <span class="sym">=</span> <span class="kwa">fun</span> <span class="sym">{$</span> C<span class="sym">}</span> <span class="kwa">if</span> C <span class="sym">== &amp;~</span> <span class="kwa">then</span> <span class="sym">&amp;-</span> <span class="kwa">else</span> C <span class="kwa">end end</span>
  <span class="kwa">in</span>
    <span class="kwa">if</span> F <span class="sym">&lt;</span> <span class="num">0.0</span> <span class="kwa">andthen</span> <span class="sym">{</span>Nth <span class="sym">&#64;</span>Result <span class="num">1</span><span class="sym">} \= &amp;~</span> <span class="kwa">then</span>
      Result <span class="sym">:= &amp;~|&#64;</span>Result
    <span class="kwa">end</span>
    <span class="sym">{</span>Map <span class="sym">&#64;</span>Result P<span class="sym">}</span>
  <span class="kwa">end</span>

<span class="slc">% ------------- %</span>

  Knucleotide

<span class="slc">% ------------- %</span>

<span class="kwa">in</span>
  Knucleotide <span class="sym">= {</span>NewKnucleotide <span class="sym">{</span>New TextFile_ init<span class="sym">(</span>name<span class="sym">:</span>stdin<span class="sym">)}}</span>

  <span class="sym">{</span>Knucleotide<span class="sym">.</span>printFrequencies <span class="num">1</span><span class="sym">}</span>
  <span class="sym">{</span>Knucleotide<span class="sym">.</span>printFrequencies <span class="num">2</span><span class="sym">}</span>

  <span class="sym">{</span>Knucleotide<span class="sym">.</span>printCount &quot;GGT&quot;<span class="sym">}</span>
  <span class="sym">{</span>Knucleotide<span class="sym">.</span>printCount &quot;GGTA&quot;<span class="sym">}</span>
  <span class="sym">{</span>Knucleotide<span class="sym">.</span>printCount &quot;GGTATT&quot;<span class="sym">}</span>
  <span class="sym">{</span>Knucleotide<span class="sym">.</span>printCount &quot;GGTATTTTAATT&quot;<span class="sym">}</span>
  <span class="sym">{</span>Knucleotide<span class="sym">.</span>printCount &quot;GGTATTTTAATTTATAGT&quot;<span class="sym">}</span>

  <span class="sym">{</span>Application<span class="sym">.</span>exit <span class="num">0</span><span class="sym">}</span>
<span class="kwa">end</span>

