<span class="hl com">/**</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * Based on the CAL Open Quark version</span>
<span class="hl com"> * Contributed by Magnus Byne.</span>
<span class="hl com"> */</span>
<span class="hl kwa">module</span> Revcomp<span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Prelude <span class="hl kwa">using</span>
    <span class="hl kwa">typeClass</span> <span class="hl sym">=</span> Inputable<span class="hl sym">,</span> Outputable<span class="hl sym">;</span>
    <span class="hl kwa">typeConstructor</span> <span class="hl sym">=</span> String<span class="hl sym">,</span> Boolean<span class="hl sym">,</span> JObject<span class="hl sym">,</span> Int<span class="hl sym">,</span> Byte<span class="hl sym">,</span> Char<span class="hl sym">;</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span>
        eager<span class="hl sym">,</span> toByte<span class="hl sym">,</span> stringToInt<span class="hl sym">,</span> add<span class="hl sym">,</span> not<span class="hl sym">,</span> seq<span class="hl sym">,</span> input<span class="hl sym">,</span> fromInt<span class="hl sym">,</span> snd<span class="hl sym">,</span> fst<span class="hl sym">,</span>
        induceComparator<span class="hl sym">,</span> combineComparators<span class="hl sym">,</span> reverseComparator<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Debug <span class="hl kwa">using</span>
    <span class="hl kwa">typeClass</span> <span class="hl sym">=</span> Show<span class="hl sym">;</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> show<span class="hl sym">;</span>
    <span class="hl sym">;</span>
<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Char <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> toLowerCase<span class="hl sym">,</span> toInt<span class="hl sym">;</span>
    <span class="hl sym">;</span>
<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>String <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> length<span class="hl sym">,</span> subscript<span class="hl sym">,</span> toUpperCase<span class="hl sym">,</span> startsWith<span class="hl sym">,</span> substring<span class="hl sym">;</span>
    <span class="hl sym">;</span>
<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Collections<span class="hl sym">.</span>List <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span>
        foldLeft1Strict<span class="hl sym">,</span> map<span class="hl sym">,</span> takeWhile<span class="hl sym">,</span> dropWhile<span class="hl sym">,</span> tail<span class="hl sym">,</span> foldLeftStrict<span class="hl sym">,</span>
        sortBy<span class="hl sym">;</span>
    <span class="hl sym">;</span>
<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Collections<span class="hl sym">.</span>Map <span class="hl kwa">using</span>
    <span class="hl kwa">typeConstructor</span> <span class="hl sym">=</span> Map<span class="hl sym">;</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> fromList<span class="hl sym">;</span>
    <span class="hl sym">;</span>
<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Utilities<span class="hl sym">.</span>MessageFormat <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> formatWithPattern<span class="hl sym">;</span>
    <span class="hl sym">;</span>
<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Utilities<span class="hl sym">.</span>Locale <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> invariantLocale<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">data foreign unsafe import jvm</span> <span class="hl str">&quot;java.io.BufferedReader&quot;</span> <span class="hl kwa">private</span> JBufferedReader<span class="hl sym">;</span>

<span class="hl kwa">data foreign unsafe import jvm</span> <span class="hl str">&quot;java.io.InputStream&quot;</span> <span class="hl kwa">private</span> JInputStream<span class="hl sym">;</span>

<span class="hl kwa">data foreign unsafe import jvm</span> <span class="hl str">&quot;java.io.InputStreamReader&quot;</span>
    <span class="hl kwa">private</span> JInputStreamReader<span class="hl sym">;</span>

<span class="hl kwa">data foreign unsafe import jvm</span> <span class="hl str">&quot;java.io.Reader&quot;</span> <span class="hl kwa">private</span> JReader<span class="hl sym">;</span>

<span class="hl kwa">data foreign unsafe import jvm</span> <span class="hl str">&quot;java.io.FileReader&quot;</span> <span class="hl kwa">private</span> JFileReader<span class="hl sym">;</span>

<span class="hl kwa">data foreign unsafe import jvm</span> <span class="hl str">&quot;java.io.PrintStream&quot;</span> <span class="hl kwa">private</span> JPrintStream<span class="hl sym">;</span>

<span class="hl kwa">data foreign unsafe import jvm</span> <span class="hl str">&quot;java.lang.StringBuffer&quot;</span>
    <span class="hl kwa">private</span> JStringBuffer <span class="hl kwa">deriving</span> Show<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;constructor&quot;</span>
    <span class="hl kwa">private</span> createStringBuffer <span class="hl sym">::</span> JStringBuffer<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;constructor&quot;</span>
    <span class="hl kwa">private</span> createBufferedReader <span class="hl sym">::</span> JReader <span class="hl sym">-&gt;</span> JBufferedReader<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;constructor&quot;</span>
    <span class="hl kwa">private</span> createInputStreamReaderStream <span class="hl sym">::</span> JInputStream <span class="hl sym">-&gt;</span> JInputStreamReader<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;method append&quot;</span>
    <span class="hl kwa">private</span> append <span class="hl sym">::</span> JStringBuffer <span class="hl sym">-&gt;</span> String <span class="hl sym">-&gt;</span> JStringBuffer<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;method readLine&quot;</span>
    <span class="hl kwa">private</span> readLine <span class="hl sym">::</span> JBufferedReader <span class="hl sym">-&gt;</span> String<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;static field java.lang.System.out&quot;</span>
    <span class="hl kwa">private</span> stdout <span class="hl sym">::</span> JPrintStream<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;static field java.lang.System.in&quot;</span>
    <span class="hl kwa">private</span> stdin <span class="hl sym">::</span> JInputStream<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;isNull&quot;</span> <span class="hl kwa">private</span> isNull <span class="hl sym">::</span> String <span class="hl sym">-&gt;</span> Boolean<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;method println&quot;</span>
    <span class="hl kwa">private</span> printLn <span class="hl sym">::</span> JPrintStream <span class="hl sym">-&gt;</span> String <span class="hl sym">-&gt; ();</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;method write&quot;</span>
    <span class="hl kwa">private</span> write <span class="hl sym">::</span> JPrintStream <span class="hl sym">-&gt;</span> JByteArray <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt; ();</span>

<span class="hl kwa">data foreign unsafe import jvm</span> <span class="hl str">&quot;byte[]&quot;</span>
    JByteArray <span class="hl kwa">deriving</span> Inputable<span class="hl sym">,</span> Outputable<span class="hl sym">,</span> Show<span class="hl sym">;</span>

<span class="hl slc">//Import Java integer arrays</span>
<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;newArray&quot;</span> byteArray_new <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> JByteArray<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;subscriptArray&quot;</span>
    byteArray_subscript <span class="hl sym">::</span> JByteArray <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Byte<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;updateArray&quot;</span>
    byteArray_update <span class="hl sym">::</span> JByteArray <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Byte <span class="hl sym">-&gt;</span> Byte<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;cast&quot;</span>
    jInputStreamReaderToJReader <span class="hl sym">::</span> JInputStreamReader <span class="hl sym">-&gt;</span> JReader<span class="hl sym">;</span>

charToByte <span class="hl sym">::</span> Char <span class="hl sym">-&gt;</span> Byte<span class="hl sym">;</span>
charToByte <span class="hl sym">!</span>c <span class="hl sym">=</span> toByte <span class="hl sym">(</span>Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Char<span class="hl sym">.</span>toInt c<span class="hl sym">);</span>

initCharMap <span class="hl sym">::</span> JByteArray <span class="hl sym">-&gt; ();</span>
initCharMap <span class="hl sym">!</span>charMap <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        loop <span class="hl sym">::</span> Int <span class="hl sym">-&gt; ();</span>
        loop <span class="hl sym">!</span>i <span class="hl sym">=</span>
            <span class="hl kwa">if</span> i <span class="hl sym">&lt;</span> <span class="hl num">128</span> <span class="hl kwa">then</span>
                byteArray_update charMap i <span class="hl sym">(</span>toByte i<span class="hl sym">)</span>
                <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                <span class="hl sym">()</span>
            <span class="hl kwa">else</span>
                <span class="hl sym">()</span>
            <span class="hl sym">;</span>

        mappings <span class="hl sym">:: [(</span>Char<span class="hl sym">,</span> Char<span class="hl sym">)];</span>
        mappings <span class="hl sym">=</span>
            <span class="hl sym">[</span>
                <span class="hl sym">(</span><span class="hl str">'A'</span><span class="hl sym">,</span> <span class="hl str">'T'</span><span class="hl sym">),</span>
                <span class="hl sym">(</span><span class="hl str">'C'</span><span class="hl sym">,</span> <span class="hl str">'G'</span><span class="hl sym">),</span>
                <span class="hl sym">(</span><span class="hl str">'G'</span><span class="hl sym">,</span> <span class="hl str">'C'</span><span class="hl sym">),</span>
                <span class="hl sym">(</span><span class="hl str">'T'</span><span class="hl sym">,</span> <span class="hl str">'A'</span><span class="hl sym">),</span>
                <span class="hl sym">(</span><span class="hl str">'U'</span><span class="hl sym">,</span> <span class="hl str">'A'</span><span class="hl sym">),</span>
                <span class="hl sym">(</span><span class="hl str">'M'</span><span class="hl sym">,</span> <span class="hl str">'K'</span><span class="hl sym">),</span>
                <span class="hl sym">(</span><span class="hl str">'R'</span><span class="hl sym">,</span> <span class="hl str">'Y'</span><span class="hl sym">),</span>
                <span class="hl sym">(</span><span class="hl str">'W'</span><span class="hl sym">,</span> <span class="hl str">'W'</span><span class="hl sym">),</span>
                <span class="hl sym">(</span><span class="hl str">'S'</span><span class="hl sym">,</span> <span class="hl str">'S'</span><span class="hl sym">),</span>
                <span class="hl sym">(</span><span class="hl str">'Y'</span><span class="hl sym">,</span> <span class="hl str">'R'</span><span class="hl sym">),</span>
                <span class="hl sym">(</span><span class="hl str">'K'</span><span class="hl sym">,</span> <span class="hl str">'M'</span><span class="hl sym">),</span>
                <span class="hl sym">(</span><span class="hl str">'V'</span><span class="hl sym">,</span> <span class="hl str">'B'</span><span class="hl sym">),</span>
                <span class="hl sym">(</span><span class="hl str">'H'</span><span class="hl sym">,</span> <span class="hl str">'D'</span><span class="hl sym">),</span>
                <span class="hl sym">(</span><span class="hl str">'D'</span><span class="hl sym">,</span> <span class="hl str">'H'</span><span class="hl sym">),</span>
                <span class="hl sym">(</span><span class="hl str">'B'</span><span class="hl sym">,</span> <span class="hl str">'V'</span><span class="hl sym">),</span>
                <span class="hl sym">(</span><span class="hl str">'N'</span><span class="hl sym">,</span> <span class="hl str">'N'</span><span class="hl sym">)</span>
            <span class="hl sym">]</span>
            <span class="hl sym">;</span>
    <span class="hl kwa">in</span>
        loop <span class="hl num">0</span>
        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
        foldLeftStrict
            <span class="hl sym">(</span>
                \a mapping <span class="hl sym">-&gt;</span>
                    byteArray_update
                        charMap
                        <span class="hl sym">(</span>Char<span class="hl sym">.</span>toInt mapping<span class="hl sym">.</span>#<span class="hl num">1</span><span class="hl sym">)</span>
                        <span class="hl sym">(</span>charToByte mapping<span class="hl sym">.</span>#<span class="hl num">2</span><span class="hl sym">)</span>
                    <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                    byteArray_update
                        charMap
                        <span class="hl sym">(</span>Char<span class="hl sym">.</span>toInt <span class="hl sym">(</span>toLowerCase mapping<span class="hl sym">.</span>#<span class="hl num">1</span><span class="hl sym">))</span>
                        <span class="hl sym">(</span>charToByte mapping<span class="hl sym">.</span>#<span class="hl num">2</span><span class="hl sym">)</span>
                    <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                    a
            <span class="hl sym">)</span>
            <span class="hl sym">()</span>
            mappings
    <span class="hl sym">;</span>

printReverseComplement <span class="hl sym">::</span> JByteArray <span class="hl sym">-&gt;</span> String <span class="hl sym">-&gt; ();</span>
printReverseComplement <span class="hl sym">!</span>charMap <span class="hl sym">!</span>sequence <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        lineLength <span class="hl sym">::</span> Int<span class="hl sym">;</span>
        lineLength <span class="hl sym">=</span> <span class="hl num">60</span><span class="hl sym">;</span>

        outputBufferSize <span class="hl sym">::</span> Int<span class="hl sym">;</span>
        outputBufferSize <span class="hl sym">=</span> <span class="hl num">10240</span><span class="hl sym">;</span>

        outputBuffer <span class="hl sym">::</span> JByteArray<span class="hl sym">;</span>
        outputBuffer <span class="hl sym">=</span> eager $ byteArray_new outputBufferSize<span class="hl sym">;</span>

        eol <span class="hl sym">::</span> Byte<span class="hl sym">;</span>
        eol <span class="hl sym">=</span> eager $ toByte <span class="hl sym">(</span>eager $ Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Char<span class="hl sym">.</span>toInt <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">);</span>

        startIndex <span class="hl sym">::</span> Int<span class="hl sym">;</span>
        startIndex <span class="hl sym">=</span> String<span class="hl sym">.</span>length sequence <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>

        loop <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt; ();</span>
        loop <span class="hl sym">!</span>inputIndex <span class="hl sym">!</span>outputIndex <span class="hl sym">!</span>eolCount <span class="hl sym">=</span>
            <span class="hl kwa">if</span> inputIndex <span class="hl sym">&gt;=</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
                byteArray_update
                    outputBuffer
                    outputIndex
                    <span class="hl sym">(</span>byteArray_subscript
                        charMap
                        <span class="hl sym">(</span>toInt <span class="hl sym">(</span>String<span class="hl sym">.</span>subscript sequence inputIndex<span class="hl sym">))</span>
                    <span class="hl sym">)</span>
                <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                <span class="hl sym">(</span>
                    <span class="hl kwa">if</span> outputIndex <span class="hl sym">+</span> <span class="hl num">1</span> <span class="hl sym">==</span> eolCount <span class="hl kwa">then</span>
                        byteArray_update outputBuffer <span class="hl sym">(</span>outputIndex <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span> eol
                        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                        <span class="hl sym">(</span>
                            <span class="hl kwa">if</span>
                                outputIndex <span class="hl sym">+</span> lineLength <span class="hl sym">+</span> <span class="hl num">3</span> <span class="hl sym">&gt;</span> outputBufferSize
                            <span class="hl kwa">then</span>
                                write stdout outputBuffer <span class="hl num">0</span> <span class="hl sym">(</span>outputIndex <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">)</span>
                                <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                                loop <span class="hl sym">(</span>inputIndex <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl num">0</span> lineLength
                            <span class="hl kwa">else</span>
                                loop
                                    <span class="hl sym">(</span>inputIndex <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span>
                                    <span class="hl sym">(</span>outputIndex <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">)</span>
                                    <span class="hl sym">(</span>outputIndex <span class="hl sym">+</span> <span class="hl num">2</span> <span class="hl sym">+</span> lineLength<span class="hl sym">)</span>
                        <span class="hl sym">)</span>
                    <span class="hl kwa">else</span>
                        loop <span class="hl sym">(</span>inputIndex <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">) (</span>outputIndex <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span> eolCount
                <span class="hl sym">)</span>
            <span class="hl kwa">else if</span> eolCount <span class="hl sym">-</span> outputIndex <span class="hl sym">!=</span> lineLength <span class="hl kwa">then</span>
                <span class="hl slc">//we need to terminate sequence with an extra \n</span>
                byteArray_update outputBuffer outputIndex eol
                <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                write stdout outputBuffer <span class="hl num">0</span> <span class="hl sym">(</span>outputIndex <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
            <span class="hl kwa">else</span>
                write stdout outputBuffer <span class="hl num">0</span> outputIndex
            <span class="hl sym">;</span>
    <span class="hl kwa">in</span>
        <span class="hl kwa">if</span> startIndex <span class="hl sym">&gt;=</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
            loop <span class="hl sym">(</span>String<span class="hl sym">.</span>length sequence <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl num">0</span> lineLength
        <span class="hl kwa">else</span>
            <span class="hl sym">()</span>
    <span class="hl sym">;</span>

main <span class="hl sym">:: [</span>String<span class="hl sym">] -&gt; ();</span>
<span class="hl kwa">public</span> main args <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        charMap <span class="hl sym">::</span> JByteArray<span class="hl sym">;</span>
        charMap <span class="hl sym">=</span> eager $ byteArray_new <span class="hl num">128</span><span class="hl sym">;</span>

        reader <span class="hl sym">::</span> JBufferedReader<span class="hl sym">;</span>
        reader <span class="hl sym">=</span>
            eager
            $ createBufferedReader
                <span class="hl sym">(</span>jInputStreamReaderToJReader
                    <span class="hl sym">(</span>createInputStreamReaderStream stdin<span class="hl sym">)</span>
                <span class="hl sym">)</span>
            <span class="hl sym">;</span>

        processLines <span class="hl sym">::</span> JBufferedReader <span class="hl sym">-&gt;</span> JStringBuffer <span class="hl sym">-&gt; ();</span>
        processLines <span class="hl sym">!</span>reader <span class="hl sym">!</span>buffer <span class="hl sym">=</span>
            <span class="hl kwa">let</span>
                line <span class="hl sym">::</span> String<span class="hl sym">;</span>
                line <span class="hl sym">=</span> eager $ readLine reader<span class="hl sym">;</span>
            <span class="hl kwa">in</span>

                <span class="hl kwa">if</span> isNull line <span class="hl kwa">then</span>
                    printReverseComplement charMap <span class="hl sym">(</span>show buffer<span class="hl sym">)</span>
                <span class="hl kwa">else if</span> subscript line <span class="hl num">0</span> <span class="hl sym">==</span> <span class="hl str">'&gt;'</span> <span class="hl kwa">then</span>
                    printReverseComplement charMap <span class="hl sym">(</span>show buffer<span class="hl sym">)</span>
                    <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                    printLn stdout line
                    <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                    processLines reader createStringBuffer
                <span class="hl kwa">else</span>
                    append buffer line
                    <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                    processLines reader buffer
            <span class="hl sym">;</span>
    <span class="hl kwa">in</span>

        initCharMap charMap
        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
        processLines reader createStringBuffer
    <span class="hl sym">;</span>

