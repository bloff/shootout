<span class="dir">#!/bin/env groovy</span>
<span class="com">/*</span>
<span class="com">	$Id: knucleotide-groovy.code,v 1.8 2005-11-07 21:04:42 igouy-guest Exp $</span>
<span class="com"></span>
<span class="com">	The Great Computer Language Shootout</span>
<span class="com">	http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">	contributed by Jochen Hinrichsen</span>
<span class="com">*/</span>

def sequence <span class="sym">=</span> <span class="kwd">readSequence</span><span class="sym">(</span>System<span class="sym">.</span>in<span class="sym">,</span> <span class="str">&quot;&gt;THREE&quot;</span><span class="sym">).</span><span class="kwd">toUpperCase</span><span class="sym">()</span>
assert sequence<span class="sym">.</span><span class="kwd">size</span><span class="sym">() &gt;</span> <span class="num">1000</span>

<span class="sym">[</span><span class="num">1</span><span class="sym">,</span> <span class="num">2</span><span class="sym">].</span><span class="kwd">each</span><span class="sym">() {</span>
    <span class="kwd">writeFrequency</span><span class="sym">(</span>sequence<span class="sym">,</span> it<span class="sym">)</span>
<span class="sym">}</span>

<span class="sym">[</span> <span class="str">&quot;GGT&quot;</span><span class="sym">,</span> <span class="str">&quot;GGTA&quot;</span><span class="sym">,</span> <span class="str">&quot;GGTATT&quot;</span><span class="sym">,</span> <span class="str">&quot;GGTATTTTAATT&quot;</span><span class="sym">,</span> <span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span> <span class="sym">].</span><span class="kwd">each</span><span class="sym">() {</span>
        println <span class="str">&quot;${sequence.count(it)}</span><span class="esc">\t</span><span class="str">${it}&quot;</span>
<span class="sym">}</span>

def <span class="kwd">readSequence</span><span class="sym">(</span>streamin<span class="sym">,</span> id<span class="sym">) {</span>
    def sequence <span class="sym">=</span> <span class="str">&quot;&quot;</span>
    def record <span class="sym">=</span> <span class="kwa">false</span>
    streamin<span class="sym">.</span><span class="kwd">eachLine</span><span class="sym">() {</span> line <span class="sym">-&gt;</span>
        <span class="kwa">switch</span> <span class="sym">(</span>line<span class="sym">) {</span>
            <span class="kwa">case</span> <span class="sym">~</span><span class="str">&quot;^$id.*&quot;</span><span class="sym">:</span>
                record <span class="sym">=</span> <span class="kwa">true</span>
                <span class="kwa">break</span>

            <span class="kwa">case</span> <span class="sym">[~</span><span class="str">&quot;^&gt;.*&quot;</span><span class="sym">, ~</span><span class="str">&quot;^;.*&quot;</span><span class="sym">]:</span>
                record <span class="sym">=</span> <span class="kwa">false</span>
                <span class="kwa">break</span>

            <span class="kwa">default</span><span class="sym">:</span>
                <span class="kwa">if</span> <span class="sym">(</span>record<span class="sym">) {</span>
                    sequence <span class="sym">+=</span> line
                <span class="sym">}</span>
        <span class="sym">}</span>
    <span class="sym">}</span>
    sequence
<span class="sym">}</span>

def <span class="kwd">writeFrequency</span><span class="sym">(</span>sequence<span class="sym">,</span> f<span class="sym">) {</span>
    def count <span class="sym">= [:]</span>
    def formater <span class="sym">=</span> <span class="kwa">new</span> java<span class="sym">.</span>text<span class="sym">.</span><span class="kwd">DecimalFormat</span><span class="sym">(</span><span class="str">&quot;#0.000&quot;</span><span class="sym">)</span>
    <span class="kwa">for</span> <span class="sym">(</span>offset in <span class="num">0</span><span class="sym">..&lt;</span>f<span class="sym">)</span> <span class="kwd">frequency</span><span class="sym">(</span>sequence<span class="sym">,</span> f<span class="sym">,</span> offset<span class="sym">,</span> count<span class="sym">)</span>

    <span class="slc">// default sort() is smallest first</span>
    <span class="slc">// sort for multiple properties: [ it.value, it.key ]</span>
    count<span class="sym">.</span><span class="kwd">values</span><span class="sym">().</span><span class="kwd">sort</span><span class="sym">({</span> l<span class="sym">,</span> r <span class="sym">-&gt;</span> r <span class="sym">&lt;=&gt;</span> l<span class="sym">}).</span><span class="kwd">each</span><span class="sym">() {</span> value <span class="sym">-&gt;</span>
        def entry <span class="sym">=</span> count<span class="sym">.</span><span class="kwd">find</span><span class="sym">() {</span> entry <span class="sym">-&gt;</span>
            entry<span class="sym">.</span><span class="kwd">getValue</span><span class="sym">() ==</span> value
        <span class="sym">}</span>

        println <span class="str">&quot;${entry.key} ${formater.format(100.0*value/sequence.size())}&quot;</span>
    <span class="sym">}</span>

    println <span class="str">&quot;&quot;</span>
<span class="sym">}</span>

def <span class="kwd">frequency</span><span class="sym">(</span>sequence<span class="sym">,</span> f<span class="sym">,</span> offset<span class="sym">,</span> count<span class="sym">) {</span>
    def n <span class="sym">=</span> sequence<span class="sym">.</span><span class="kwd">size</span><span class="sym">()</span>
    def last <span class="sym">=</span> n <span class="sym">-</span> f <span class="sym">+</span> <span class="num">1</span>

    <span class="sym">(</span>offset<span class="sym">..&lt;</span>last<span class="sym">).</span><span class="kwd">step</span><span class="sym">(</span>f<span class="sym">) {</span> i <span class="sym">-&gt;</span>
        def key <span class="sym">=</span> sequence<span class="sym">[</span>i<span class="sym">..&lt;</span>i<span class="sym">+</span>f<span class="sym">]</span>
        <span class="slc">// No automatic defaulting</span>
        <span class="kwa">if</span> <span class="sym">(</span>count<span class="sym">[</span>key<span class="sym">] ==</span> null<span class="sym">)</span> count<span class="sym">[</span>key<span class="sym">] =</span> <span class="num">1</span>
        <span class="slc">// ++ results in error</span>
        <span class="kwa">else</span> count<span class="sym">[</span>key<span class="sym">] +=</span> <span class="num">1</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="slc">// EOF</span>

