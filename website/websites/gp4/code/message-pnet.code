<span class="hl com">/*</span>
<span class="hl com"> * The Computer Language Shootout</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Contributed by: Alexandre Alapetite http://alexandre.alapetite.net/</span>
<span class="hl com"> * Date: 2006-08-13</span>
<span class="hl com"> */</span>

<span class="hl kwa">using</span> System<span class="hl sym">;</span>
<span class="hl kwa">using</span> System<span class="hl sym">.</span>Collections<span class="hl sym">.</span>Generic<span class="hl sym">;</span>
<span class="hl kwa">using</span> System<span class="hl sym">.</span>Threading<span class="hl sym">;</span>

<span class="hl kwa">namespace</span> cheap_concurrency
<span class="hl sym">{</span>
   <span class="hl kwa">public sealed class</span> MyMessage
   <span class="hl sym">{</span>
      <span class="hl kwa">private</span> <span class="hl kwb">const int</span> numberOfThreads <span class="hl sym">=</span> <span class="hl num">500</span><span class="hl sym">;</span>
      <span class="hl kwa">internal static</span> <span class="hl kwb">int</span> numberOfMessagesToSend<span class="hl sym">;</span>

      <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">Main</span><span class="hl sym">(</span><span class="hl kwb">string</span><span class="hl sym">[]</span> args<span class="hl sym">)</span>
      <span class="hl sym">{</span>
         numberOfMessagesToSend <span class="hl sym">=</span> <span class="hl kwb">int</span><span class="hl sym">.</span><span class="hl kwd">Parse</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>

         MessageThread chain <span class="hl sym">=</span> <span class="hl kwa">null</span><span class="hl sym">;</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> numberOfThreads<span class="hl sym">;</span> i <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">--)</span>
         <span class="hl sym">{</span>
            chain <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">MessageThread</span><span class="hl sym">(</span>chain<span class="hl sym">);</span>
            <span class="hl kwa">new</span> <span class="hl kwd">Thread</span><span class="hl sym">(</span><span class="hl kwa">new</span> <span class="hl kwd">ThreadStart</span><span class="hl sym">(</span>chain<span class="hl sym">.</span>Run<span class="hl sym">)).</span><span class="hl kwd">Start</span><span class="hl sym">();</span>
         <span class="hl sym">}</span>

         <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> numberOfMessagesToSend<span class="hl sym">;</span> i<span class="hl sym">++)</span>
            chain<span class="hl sym">.</span><span class="hl kwd">Enqueue</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">internal sealed class</span> MessageThread
   <span class="hl sym">{</span>
      <span class="hl kwa">private</span> MessageThread nextThread<span class="hl sym">;</span>
      <span class="hl kwa">private</span> Queue<span class="hl sym">&lt;</span><span class="hl kwb">int</span><span class="hl sym">&gt;</span> list <span class="hl sym">=</span> <span class="hl kwa">new</span> Queue<span class="hl sym">&lt;</span><span class="hl kwb">int</span><span class="hl sym">&gt;();</span>
      <span class="hl kwa">private</span> <span class="hl kwb">int</span> numberOfMessagesToSend<span class="hl sym">;</span>

      <span class="hl kwa">internal</span> <span class="hl kwd">MessageThread</span><span class="hl sym">(</span>MessageThread nextThread<span class="hl sym">)</span>
      <span class="hl sym">{</span>
         <span class="hl kwa">this</span><span class="hl sym">.</span>nextThread <span class="hl sym">=</span> nextThread<span class="hl sym">;</span>
         <span class="hl kwa">this</span><span class="hl sym">.</span>numberOfMessagesToSend <span class="hl sym">=</span> MyMessage<span class="hl sym">.</span>numberOfMessagesToSend<span class="hl sym">;</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">internal</span> <span class="hl kwb">void</span> <span class="hl kwd">Run</span><span class="hl sym">()</span>
      <span class="hl sym">{</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>nextThread <span class="hl sym">==</span> <span class="hl kwa">null</span><span class="hl sym">)</span>
         <span class="hl sym">{</span>
            <span class="hl kwb">int</span> sum <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl kwa">while</span> <span class="hl sym">(</span>numberOfMessagesToSend <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
            <span class="hl sym">{</span>
               <span class="hl kwd">lock</span> <span class="hl sym">(</span>list<span class="hl sym">)</span>
                  <span class="hl kwa">while</span> <span class="hl sym">(</span>list<span class="hl sym">.</span>Count <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
                  <span class="hl sym">{</span>
                     sum <span class="hl sym">+=</span> list<span class="hl sym">.</span><span class="hl kwd">Dequeue</span><span class="hl sym">();</span>
                     numberOfMessagesToSend<span class="hl sym">--;</span>
                  <span class="hl sym">}</span>
               Thread<span class="hl sym">.</span><span class="hl kwd">Sleep</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span>
            <span class="hl sym">}</span>
            Console<span class="hl sym">.</span><span class="hl kwd">WriteLine</span><span class="hl sym">(</span>sum<span class="hl sym">);</span>
         <span class="hl sym">}</span>
         <span class="hl kwa">else</span>
         <span class="hl sym">{</span>
            <span class="hl kwa">while</span> <span class="hl sym">(</span>numberOfMessagesToSend <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
            <span class="hl sym">{</span>
               <span class="hl kwd">lock</span> <span class="hl sym">(</span>list<span class="hl sym">)</span>
                  <span class="hl kwa">while</span> <span class="hl sym">(</span>list<span class="hl sym">.</span>Count <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
                  <span class="hl sym">{</span>
                     nextThread<span class="hl sym">.</span><span class="hl kwd">Enqueue</span><span class="hl sym">((</span><span class="hl kwb">int</span><span class="hl sym">)</span>list<span class="hl sym">.</span><span class="hl kwd">Dequeue</span><span class="hl sym">());</span>
                     numberOfMessagesToSend<span class="hl sym">--;</span>
                  <span class="hl sym">}</span>
               Thread<span class="hl sym">.</span><span class="hl kwd">Sleep</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span>
            <span class="hl sym">}</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">internal</span> <span class="hl kwb">void</span> <span class="hl kwd">Enqueue</span><span class="hl sym">(</span><span class="hl kwb">int</span> mess<span class="hl sym">)</span>
      <span class="hl sym">{</span>
         <span class="hl kwd">lock</span> <span class="hl sym">(</span>list<span class="hl sym">)</span>
            list<span class="hl sym">.</span><span class="hl kwd">Enqueue</span><span class="hl sym">(</span>mess <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">);</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>
