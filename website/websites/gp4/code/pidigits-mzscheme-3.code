<span class="hl slc">;; The Computer Language Shootout</span>
<span class="hl slc">;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;; Based on the MLton version of the benchmark</span>
<span class="hl slc">;; contributed by Scott Cruzen</span>
<span class="hl slc">;; modified by Matthew Flatt</span>

#lang scheme<span class="hl sym">/</span>base
<span class="hl sym">(</span>require scheme<span class="hl sym">/</span>cmdline<span class="hl sym">)</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>floor_ev q r s t x<span class="hl sym">)</span>
  <span class="hl sym">(</span>quotient <span class="hl sym">(+ (*</span> q x<span class="hl sym">)</span> r<span class="hl sym">) (+ (*</span> s x<span class="hl sym">)</span> t<span class="hl sym">)))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>comp q r s t  q2 r2 s2 t2<span class="hl sym">)</span>
  <span class="hl sym">(</span>values <span class="hl sym">(+ (*</span> q q2<span class="hl sym">) (*</span> r s2<span class="hl sym">))</span>
          <span class="hl sym">(+ (*</span> q r2<span class="hl sym">) (*</span> r t2<span class="hl sym">))</span>
          <span class="hl sym">(+ (*</span> s q2<span class="hl sym">) (*</span> t s2<span class="hl sym">))</span>
          <span class="hl sym">(+ (*</span> s r2<span class="hl sym">) (*</span> t t2<span class="hl sym">))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>next q r s t<span class="hl sym">) (</span>floor_ev q r s t <span class="hl num">3</span><span class="hl sym">))</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>safe? q r s t n<span class="hl sym">) (=</span> n <span class="hl sym">(</span>floor_ev q r s t <span class="hl num">4</span><span class="hl sym">)))</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>prod q r s t n<span class="hl sym">) (</span>comp <span class="hl num">10</span> <span class="hl sym">(*</span> -<span class="hl num">10</span> n<span class="hl sym">)</span> <span class="hl num">0 1</span>  q r s t<span class="hl sym">))</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>mk q r s t k<span class="hl sym">) (</span>comp q r s t k <span class="hl sym">(*</span> <span class="hl num">2</span> <span class="hl sym">(</span>add1 <span class="hl sym">(*</span> <span class="hl num">2</span> k<span class="hl sym">)))</span> <span class="hl num">0</span> <span class="hl sym">(</span>add1 <span class="hl sym">(*</span> <span class="hl num">2</span> k<span class="hl sym">))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>digit k  q r s t  n row col<span class="hl sym">)</span>
  <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(&gt;</span> n <span class="hl num">0</span><span class="hl sym">)</span>
      <span class="hl sym">(</span>let <span class="hl sym">([</span>y <span class="hl sym">(</span>next q r s t<span class="hl sym">)])</span>
        <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>safe? q r s t y<span class="hl sym">)</span>
            <span class="hl sym">(</span>let-values <span class="hl sym">([(</span>q r s t<span class="hl sym">) (</span>prod q r s t y<span class="hl sym">)])</span>
              <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(=</span> col <span class="hl num">10</span><span class="hl sym">)</span>
                  <span class="hl sym">(</span>let <span class="hl sym">([</span>row <span class="hl sym">(+</span> row <span class="hl num">10</span><span class="hl sym">)])</span>
                    <span class="hl sym">(</span>printf <span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">:~a</span><span class="hl esc">\n</span><span class="hl str">~a&quot;</span> row y<span class="hl sym">)</span>
                    <span class="hl sym">(</span>digit k q r s t <span class="hl sym">(</span>sub1 n<span class="hl sym">)</span> row <span class="hl num">1</span><span class="hl sym">))</span>
                  <span class="hl sym">(</span>begin
                    <span class="hl sym">(</span>printf <span class="hl str">&quot;~a&quot;</span> y<span class="hl sym">)</span>
                    <span class="hl sym">(</span>digit k q r s t <span class="hl sym">(</span>sub1 n<span class="hl sym">)</span> row <span class="hl sym">(</span>add1 col<span class="hl sym">)))))</span>
            <span class="hl sym">(</span>let-values <span class="hl sym">([(</span>q r s t<span class="hl sym">) (</span>mk q r s t k<span class="hl sym">)])</span>
              <span class="hl sym">(</span>digit <span class="hl sym">(</span>add1 k<span class="hl sym">)</span> q r s t n row col<span class="hl sym">))))</span>
      <span class="hl sym">(</span>printf <span class="hl str">&quot;~a</span><span class="hl esc">\t</span><span class="hl str">:~a</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
              <span class="hl sym">(</span>make-string <span class="hl sym">(</span>- <span class="hl num">10</span> col<span class="hl sym">)</span> #\space<span class="hl sym">)</span>
              <span class="hl sym">(+</span> row col<span class="hl sym">))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>digits n<span class="hl sym">)</span>
  <span class="hl sym">(</span>digit <span class="hl num">1  1 0 0 1</span>  n <span class="hl num">0 0</span><span class="hl sym">))</span>

<span class="hl sym">(</span>digits <span class="hl sym">(</span><span class="hl kwa">command</span>-<span class="hl kwa">line</span> #<span class="hl sym">:</span>args <span class="hl sym">(</span>n<span class="hl sym">) (</span>string-<span class="hl sym">&gt;</span>number n<span class="hl sym">)))</span>
