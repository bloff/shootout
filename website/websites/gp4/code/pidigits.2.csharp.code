<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> *    http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Contributed by Alp Toker &lt;alp&#64;atoker.com&gt;</span>
<span class="hl com"> * Modified by Antti Lankila &lt;alankila&#64;bel.fi&gt;</span>
<span class="hl com"> */</span>

<span class="hl kwa">using</span> System<span class="hl sym">;</span>
<span class="hl kwa">using</span> UBigInteger <span class="hl sym">=</span> Mono<span class="hl sym">.</span>Math<span class="hl sym">.</span>BigInteger<span class="hl sym">;</span>

<span class="hl kwa">public class</span> pidigits
<span class="hl sym">{</span>
    <span class="hl kwb">const int</span> L <span class="hl sym">=</span> <span class="hl num">10</span><span class="hl sym">;</span>

    <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">Main</span> <span class="hl sym">(</span><span class="hl kwb">string</span><span class="hl sym">[]</span> args<span class="hl sym">)</span>
    <span class="hl sym">{</span>
	<span class="hl kwa">if</span> <span class="hl sym">(</span>args<span class="hl sym">.</span>Length <span class="hl sym">!=</span> <span class="hl num">1</span><span class="hl sym">)</span>
	    <span class="hl kwa">return</span><span class="hl sym">;</span>

	<span class="hl kwb">int</span> n <span class="hl sym">=</span> Int32<span class="hl sym">.</span><span class="hl kwd">Parse</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>
	<span class="hl kwb">int</span> j <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

	PiDigitSpigot pds <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">PiDigitSpigot</span><span class="hl sym">();</span>
	<span class="hl kwa">while</span> <span class="hl sym">(</span>j <span class="hl sym">&lt;</span> n<span class="hl sym">) {</span>
	    <span class="hl kwb">string</span> output <span class="hl sym">=</span> <span class="hl str">&quot;&quot;</span><span class="hl sym">;</span>
	    <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">!=</span> L <span class="hl sym">&amp;&amp;</span> j <span class="hl sym">!=</span> n<span class="hl sym">;</span> i<span class="hl sym">++,</span> j<span class="hl sym">++)</span>
		output <span class="hl sym">+=</span> pds<span class="hl sym">.</span><span class="hl kwd">Next</span><span class="hl sym">();</span>
            Console<span class="hl sym">.</span><span class="hl kwd">WriteLine</span><span class="hl sym">(</span><span class="hl str">&quot;{0,-&quot;</span> <span class="hl sym">+</span> L <span class="hl sym">+</span> <span class="hl str">&quot;}</span><span class="hl esc">\t</span><span class="hl str">:{1}&quot;</span><span class="hl sym">,</span> output<span class="hl sym">,</span> j<span class="hl sym">);</span>
	<span class="hl sym">}</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwa">class</span> PiDigitSpigot
<span class="hl sym">{</span>
    <span class="hl kwa">private</span> BigInteger z0 <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">,</span> z1 <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> z2 <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span>
    <span class="hl kwa">private</span> <span class="hl kwb">int</span> k <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

    <span class="hl kwa">private</span> <span class="hl kwb">int</span> <span class="hl kwd">ExtractDigit</span><span class="hl sym">(</span><span class="hl kwb">int</span> digit<span class="hl sym">)</span>
    <span class="hl sym">{</span>
	<span class="hl kwa">return</span> <span class="hl sym">((</span>z0 <span class="hl sym">*</span> digit <span class="hl sym">+</span> z1<span class="hl sym">) /</span> z2<span class="hl sym">).</span><span class="hl kwd">IntValue</span><span class="hl sym">();</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">private</span> <span class="hl kwb">void</span> <span class="hl kwd">Compose_k</span><span class="hl sym">(</span><span class="hl kwb">int</span> k<span class="hl sym">)</span>
    <span class="hl sym">{</span>
	<span class="hl kwb">int</span> k2 <span class="hl sym">=</span> <span class="hl num">2</span> <span class="hl sym">*</span> k <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
	z1 <span class="hl sym">=</span> k2 <span class="hl sym">*</span> z1 <span class="hl sym">+</span> <span class="hl num">2</span> <span class="hl sym">*</span> k2 <span class="hl sym">*</span> z0<span class="hl sym">;</span>
	z0 <span class="hl sym">*=</span> k<span class="hl sym">;</span>
	z2 <span class="hl sym">*=</span> k2<span class="hl sym">;</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">private</span> <span class="hl kwb">void</span> <span class="hl kwd">Compose_d</span><span class="hl sym">(</span><span class="hl kwb">int</span> d<span class="hl sym">)</span>
    <span class="hl sym">{</span>
	z1 <span class="hl sym">=</span> <span class="hl num">10</span> <span class="hl sym">*</span> z1 <span class="hl sym">+ -</span><span class="hl num">10</span> <span class="hl sym">*</span> d <span class="hl sym">*</span> z2<span class="hl sym">;</span>
	z0 <span class="hl sym">*=</span> <span class="hl num">10</span><span class="hl sym">;</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">public</span> <span class="hl kwb">int</span> <span class="hl kwd">Next</span><span class="hl sym">()</span>
    <span class="hl sym">{</span>
	<span class="hl kwb">int</span> d<span class="hl sym">;</span>
	<span class="hl kwa">while</span> <span class="hl sym">(</span>z0 <span class="hl sym">==</span> z2 <span class="hl sym">|| (</span>d <span class="hl sym">=</span> <span class="hl kwd">ExtractDigit</span><span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">)) !=</span> <span class="hl kwd">ExtractDigit</span><span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">))</span>
	    <span class="hl kwd">Compose_k</span><span class="hl sym">(++</span>k<span class="hl sym">);</span>
	<span class="hl kwd">Compose_d</span><span class="hl sym">(</span>d<span class="hl sym">);</span>
	<span class="hl kwa">return</span> d<span class="hl sym">;</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwa">class</span> BigInteger
<span class="hl sym">{</span>
    <span class="hl kwa">private</span> UBigInteger bi<span class="hl sym">;</span>
    <span class="hl kwa">private</span> <span class="hl kwb">int</span> sign <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span>
    <span class="hl kwa">private static readonly</span> BigInteger zero <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

    <span class="hl kwa">private</span> <span class="hl kwd">BigInteger</span> <span class="hl sym">() {}</span>

    <span class="hl kwa">public static implicit operator</span> <span class="hl kwd">BigInteger</span><span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">)</span>
    <span class="hl sym">{</span>
	<span class="hl kwa">return new</span> <span class="hl kwd">BigInteger</span><span class="hl sym">(</span>i<span class="hl sym">);</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">public</span> <span class="hl kwd">BigInteger</span><span class="hl sym">(</span><span class="hl kwb">int</span> <span class="hl kwa">value</span><span class="hl sym">)</span>
    <span class="hl sym">{</span>
	<span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">value</span> <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span>
	    sign <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
	<span class="hl kwa">else if</span> <span class="hl sym">(</span><span class="hl kwa">value</span> <span class="hl sym">&lt;</span> <span class="hl num">0</span><span class="hl sym">) {</span>
	    sign <span class="hl sym">= -</span><span class="hl num">1</span><span class="hl sym">;</span>
	    <span class="hl kwa">value</span> <span class="hl sym">= -</span><span class="hl kwa">value</span><span class="hl sym">;</span>
	<span class="hl sym">}</span>
	bi <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">UBigInteger</span><span class="hl sym">(</span><span class="hl kwa">value</span><span class="hl sym">);</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">public</span> <span class="hl kwb">int</span> <span class="hl kwd">IntValue</span><span class="hl sym">()</span>
    <span class="hl sym">{</span>
	<span class="hl kwa">return</span> sign <span class="hl sym">*</span> bi<span class="hl sym">.</span><span class="hl kwd">GetBytes</span><span class="hl sym">()[</span><span class="hl num">0</span><span class="hl sym">];</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">public override</span> <span class="hl kwb">string</span> <span class="hl kwd">ToString</span> <span class="hl sym">()</span>
    <span class="hl sym">{</span>
	<span class="hl kwa">return</span> <span class="hl sym">(</span>sign <span class="hl sym">== -</span><span class="hl num">1</span> ? <span class="hl str">&quot;-&quot;</span> <span class="hl sym">:</span> <span class="hl str">&quot;&quot;</span><span class="hl sym">) +</span> bi<span class="hl sym">.</span><span class="hl kwd">ToString</span> <span class="hl sym">();</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">public static</span> BigInteger <span class="hl kwa">operator</span> <span class="hl sym">* (</span>BigInteger bi1<span class="hl sym">,</span> BigInteger bi2<span class="hl sym">)</span>
    <span class="hl sym">{</span>
	BigInteger ret <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BigInteger</span><span class="hl sym">();</span>
	ret<span class="hl sym">.</span>bi <span class="hl sym">=</span> bi1<span class="hl sym">.</span>bi <span class="hl sym">*</span> bi2<span class="hl sym">.</span>bi<span class="hl sym">;</span>
	ret<span class="hl sym">.</span>sign <span class="hl sym">=</span> bi1<span class="hl sym">.</span>sign <span class="hl sym">*</span> bi2<span class="hl sym">.</span>sign<span class="hl sym">;</span>
	<span class="hl kwa">return</span> ret<span class="hl sym">;</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">public static</span> BigInteger <span class="hl kwa">operator</span> <span class="hl sym">/ (</span>BigInteger bi1<span class="hl sym">,</span> BigInteger bi2<span class="hl sym">)</span>
    <span class="hl sym">{</span>
	BigInteger ret <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BigInteger</span><span class="hl sym">();</span>
	ret<span class="hl sym">.</span>bi <span class="hl sym">=</span> bi1<span class="hl sym">.</span>bi <span class="hl sym">/</span> bi2<span class="hl sym">.</span>bi<span class="hl sym">;</span>
	ret<span class="hl sym">.</span>sign <span class="hl sym">=</span> bi1<span class="hl sym">.</span>sign <span class="hl sym">*</span> bi2<span class="hl sym">.</span>sign<span class="hl sym">;</span>
	<span class="hl kwa">return</span> ret<span class="hl sym">;</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">public static</span> BigInteger <span class="hl kwa">operator</span> <span class="hl sym">+ (</span>BigInteger bi1<span class="hl sym">,</span> BigInteger bi2<span class="hl sym">)</span>
    <span class="hl sym">{</span>
	<span class="hl kwa">if</span> <span class="hl sym">(</span>bi1<span class="hl sym">.</span>sign <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span>
	    <span class="hl kwa">return</span> bi2<span class="hl sym">;</span>

	<span class="hl kwa">if</span> <span class="hl sym">(</span>bi2<span class="hl sym">.</span>sign <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span>
	    <span class="hl kwa">return</span> bi1<span class="hl sym">;</span>

	<span class="hl kwa">if</span> <span class="hl sym">(</span>bi1<span class="hl sym">.</span>sign <span class="hl sym">==</span> bi2<span class="hl sym">.</span>sign<span class="hl sym">) {</span>
	    BigInteger ret <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BigInteger</span><span class="hl sym">();</span>
	    ret<span class="hl sym">.</span>bi <span class="hl sym">=</span> bi1<span class="hl sym">.</span>bi <span class="hl sym">+</span> bi2<span class="hl sym">.</span>bi<span class="hl sym">;</span>
	    ret<span class="hl sym">.</span>sign <span class="hl sym">=</span> bi1<span class="hl sym">.</span>sign<span class="hl sym">;</span>
	    <span class="hl kwa">return</span> ret<span class="hl sym">;</span>
	<span class="hl sym">}</span>


	<span class="hl kwa">if</span> <span class="hl sym">(</span>bi1<span class="hl sym">.</span>bi <span class="hl sym">==</span> bi2<span class="hl sym">.</span>bi<span class="hl sym">)</span>
	    <span class="hl kwa">return</span> zero<span class="hl sym">;</span>

	<span class="hl kwa">if</span> <span class="hl sym">(</span>bi1<span class="hl sym">.</span>bi <span class="hl sym">&lt;</span> bi2<span class="hl sym">.</span>bi<span class="hl sym">) {</span>
	    BigInteger ret <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BigInteger</span><span class="hl sym">();</span>
	    ret<span class="hl sym">.</span>bi <span class="hl sym">=</span> bi2<span class="hl sym">.</span>bi <span class="hl sym">-</span> bi1<span class="hl sym">.</span>bi<span class="hl sym">;</span>
	    ret<span class="hl sym">.</span>sign <span class="hl sym">=</span> bi2<span class="hl sym">.</span>sign<span class="hl sym">;</span>
	    <span class="hl kwa">return</span> ret<span class="hl sym">;</span>
	<span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
	    BigInteger ret <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BigInteger</span><span class="hl sym">();</span>
	    ret<span class="hl sym">.</span>bi <span class="hl sym">=</span> bi1<span class="hl sym">.</span>bi <span class="hl sym">-</span> bi2<span class="hl sym">.</span>bi<span class="hl sym">;</span>
	    ret<span class="hl sym">.</span>sign <span class="hl sym">= -</span><span class="hl num">1</span> <span class="hl sym">*</span> bi2<span class="hl sym">.</span>sign<span class="hl sym">;</span>
	    <span class="hl kwa">return</span> ret<span class="hl sym">;</span>
	<span class="hl sym">}</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>
