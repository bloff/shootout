<span class="slc">\ The Great Computer Language Shootout</span>
<span class="slc">\ http://shootout.alioth.debian.org/</span>

<span class="slc">\ contributed by Ian Osgood</span>

<span class="slc">\ read NUM from last command line argument</span>
<span class="num">0</span><span class="sym">.</span> argc <span class="sym">&#64;</span> <span class="num">1</span><span class="sym">-</span> arg <span class="sym">&gt;</span>number <span class="num">2</span>drop drop constant NUM

<span class="slc">\ return element i,j of infinite matrix A</span>
<span class="sym">:</span> A<span class="sym">&#64;</span> <span class="com">( i j -- f )</span>
  over <span class="sym">+</span> dup <span class="num">1</span><span class="sym">+ *</span> <span class="num">2</span><span class="sym">/ +</span> <span class="num">1</span><span class="sym">+</span>  s<span class="sym">&gt;</span>d d<span class="sym">&gt;</span>f <span class="num">1</span><span class="sym">/</span>f <span class="sym">;</span>

<span class="slc">\ multiply vector by matrix A</span>
<span class="sym">:</span> A<span class="sym">*</span> <span class="com">( out in -- )</span>
  NUM <span class="num">0</span> do  <span class="num">0</span>e
    NUM <span class="num">0</span> do  dup i floats <span class="sym">+</span> f<span class="sym">&#64;</span> j i A<span class="sym">&#64;</span> f<span class="sym">*</span> f<span class="sym">+</span>  loop
    over i floats <span class="sym">+</span> f<span class="sym">!</span>
  loop <span class="num">2</span>drop <span class="sym">;</span>

<span class="slc">\ multiply vector by matrix A transposed</span>
<span class="sym">:</span> At<span class="sym">*</span> <span class="com">( out in -- )</span>
  NUM <span class="num">0</span> do  <span class="num">0</span>e
    NUM <span class="num">0</span> do  dup i floats <span class="sym">+</span> f<span class="sym">&#64;</span> i j A<span class="sym">&#64;</span> f<span class="sym">*</span> f<span class="sym">+</span>  loop
    over i floats <span class="sym">+</span> f<span class="sym">!</span>
  loop <span class="num">2</span>drop <span class="sym">;</span>

<span class="slc">\ composition of A* and At*</span>
<span class="sym">:</span> AtA<span class="sym">*</span> <span class="com">( out in -- )</span> falign here dup rot A<span class="sym">*</span> At<span class="sym">* ;</span>

<span class="sym">:</span> <span class="num">1</span>efill <span class="com">( n -- )</span> <span class="num">0</span> do <span class="num">1</span>e f<span class="sym">,</span> loop <span class="sym">;</span>
falign create u NUM <span class="num">1</span>efill           <span class="slc">\ unit vector</span>
falign create v NUM floats allot

<span class="sym">:</span> approx <span class="com">( -- f )</span>
  <span class="num">10 0</span> do  v u AtA<span class="sym">*</span>  u v AtA<span class="sym">*</span>  loop  <span class="slc">\ power method</span>
  <span class="num">0</span>e <span class="num">0</span>e <span class="com">( vBv vv )</span>
  NUM <span class="num">0</span> do
    fswap u i floats <span class="sym">+</span> f<span class="sym">&#64;</span> v i floats <span class="sym">+</span> f<span class="sym">&#64;</span> f<span class="sym">*</span> f<span class="sym">+</span>
    fswap v i floats <span class="sym">+</span> f<span class="sym">&#64;</span> fdup f<span class="sym">*</span> f<span class="sym">+</span>
  loop
  f<span class="sym">/</span> fsqrt <span class="sym">;</span>

<span class="sym">:</span> ff<span class="sym">.</span>  f$ scratch drop over type <span class="sym">'.</span> emit scratch rot <span class="sym">/</span>string type <span class="sym">;</span>

approx <span class="num">10</span> set<span class="sym">-</span>precision ff<span class="sym">.</span> cr bye  <span class="slc">\ done!</span>

