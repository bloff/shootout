\ The Great Computer Language Shootout
\ http<span class="sym">:</span><span class="slc">//shootout.alioth.debian.org/
</span>
\ contributed by Ian Osgood

\ read NUM from last command line argument
<span class="num">0</span><span class="sym">.</span> argc &#64; <span class="num">1</span><span class="sym">-</span> arg <span class="sym">&gt;</span>number <span class="num">2d</span>rop drop constant NUM

\ <span class="kwa">return</span> element i<span class="sym">,</span>j of infinite matrix A
<span class="sym">:</span> A&#64; <span class="sym">(</span> i j <span class="sym">--</span> f <span class="sym">)
</span>  over <span class="sym">+</span> dup <span class="num">1</span><span class="sym">+ *</span> <span class="num">2</span><span class="sym">/ +</span> <span class="num">1</span><span class="sym">+</span>  s<span class="sym">&gt;</span>d d<span class="sym">&gt;</span>f <span class="num">1</span><span class="sym">/</span>f <span class="sym">;

</span>\ multiply vector by matrix A
<span class="sym">:</span> A<span class="sym">* (</span> out in <span class="sym">-- )
</span>  NUM <span class="num">0</span> <span class="kwa">do</span>  <span class="num">0e
</span>    NUM <span class="num">0</span> <span class="kwa">do</span>  dup i floats <span class="sym">+</span> f&#64; j i A&#64; f<span class="sym">*</span> f<span class="sym">+</span>  loop
    over i floats <span class="sym">+</span> f<span class="sym">!
</span>  loop <span class="num">2d</span>rop <span class="sym">;

</span>\ multiply vector by matrix A transposed
<span class="sym">:</span> At<span class="sym">* (</span> out in <span class="sym">-- )
</span>  NUM <span class="num">0</span> <span class="kwa">do</span>  <span class="num">0e
</span>    NUM <span class="num">0</span> <span class="kwa">do</span>  dup i floats <span class="sym">+</span> f&#64; i j A&#64; f<span class="sym">*</span> f<span class="sym">+</span>  loop
    over i floats <span class="sym">+</span> f<span class="sym">!
</span>  loop <span class="num">2d</span>rop <span class="sym">;

</span>\ composition of A<span class="sym">*</span> <span class="kwa">and</span> At<span class="sym">*
:</span> AtA<span class="sym">* (</span> out in <span class="sym">-- )</span> falign here dup rot A<span class="sym">*</span> At<span class="sym">* ;

:</span> <span class="num">1ef</span>ill <span class="sym">(</span> n <span class="sym">-- )</span> <span class="num">0</span> <span class="kwa">do</span> <span class="num">1e</span> f<span class="sym">,</span> loop <span class="sym">;
</span>falign create u NUM <span class="num">1ef</span>ill           \ unit vector
falign create v NUM floats allot

<span class="sym">:</span> approx <span class="sym">( --</span> f <span class="sym">)
</span>  <span class="num">10 0</span> <span class="kwa">do</span>  v u AtA<span class="sym">*</span>  u v AtA<span class="sym">*</span>  loop  \ power method
  <span class="num">0e 0e</span> <span class="sym">(</span> vBv vv <span class="sym">)
</span>  NUM <span class="num">0</span> <span class="kwa">do
</span>    fswap u i floats <span class="sym">+</span> f&#64; v i floats <span class="sym">+</span> f&#64; f<span class="sym">*</span> f<span class="sym">+
</span>    fswap v i floats <span class="sym">+</span> f&#64; fdup f<span class="sym">*</span> f<span class="sym">+
</span>  loop
  f<span class="sym">/</span> fsqrt <span class="sym">;

:</span> ff<span class="sym">.</span>  f$ scratch drop over type <span class="str">'. emit scratch rot /string type ;

approx 10 set-precision ff. cr bye</span>  <span class="esc">\ </span><span class="str">done!
</span>
