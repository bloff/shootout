<span class="slc">\ The Computer Language Shootout</span>
<span class="slc">\ http://shootout.alioth.debian.org</span>

<span class="slc">\ Contributed by Ian Osgood</span>

<span class="slc">\ read NUM from last command line argument</span>
<span class="num">0</span><span class="sym">.</span> argc <span class="sym">&#64;</span> <span class="num">1</span><span class="sym">-</span> arg <span class="sym">&gt;</span>number <span class="num">2</span><span class="kwa">drop drop constant</span> NUM

<span class="kwa">create</span> a NUM <span class="kwa">allot</span>
a NUM <span class="num">1</span><span class="sym">- +</span> <span class="kwa">constant</span> a<span class="sym">-</span>last
<span class="kwa">create</span> pan NUM <span class="kwa">allot</span>
<span class="kwa">create</span> counts NUM <span class="kwa">allot</span>
<span class="num">0</span> value <span class="sym">#</span>perms

<span class="sym">: .</span>pan <span class="com">( a -- )</span> NUM <span class="num">0</span> <span class="kwa">do dup c</span><span class="sym">&#64;</span> <span class="num">1</span> u<span class="sym">.</span>r <span class="num">1</span><span class="sym">+</span> <span class="kwa">loop drop cr</span> <span class="sym">;</span>

<span class="sym">:</span> flip <span class="com">( n -- )</span>
  <span class="kwa">dup</span> pan <span class="sym">+</span>  <span class="kwa">swap</span> <span class="num">2</span><span class="sym">/</span> pan <span class="sym">+</span>  pan <span class="kwa">do</span>
    <span class="num">1</span><span class="sym">-</span>  <span class="kwa">i c</span><span class="sym">&#64;</span> <span class="kwa">over c</span><span class="sym">&#64;</span>  <span class="kwa">i c</span><span class="sym">!</span> <span class="kwa">over c</span><span class="sym">!</span>
  <span class="kwa">loop drop</span> <span class="sym">;</span>

<span class="sym">:</span> flips <span class="com">( -- n )</span>
  <span class="num">0</span> <span class="kwa">begin</span> pan <span class="kwa">c</span><span class="sym">&#64;</span> <span class="num">1</span> <span class="sym">&gt;</span> <span class="kwa">while</span> <span class="num">1</span><span class="sym">+</span>  pan <span class="kwa">c</span><span class="sym">&#64;</span> flip <span class="kwa">repeat</span> <span class="sym">;</span>

<span class="sym">:</span> fannkuch <span class="com">( -- max-flips )</span>
  NUM <span class="num">0</span> <span class="kwa">do i</span> <span class="num">1</span><span class="sym">+</span>  a <span class="kwa">i</span> <span class="sym">+</span> <span class="kwa">c</span><span class="sym">!</span> <span class="kwa">loop</span>
  <span class="num">0</span> NUM <span class="com">( max-flips r )</span>
  <span class="kwa">begin</span>
    <span class="slc">\ print first 30 permutations</span>
    <span class="sym">#</span>perms <span class="num">30</span> <span class="sym">&lt;</span> <span class="kwa">if</span> a <span class="sym">.</span>pan  <span class="sym">#</span>perms <span class="num">1</span><span class="sym">+</span> <span class="kwa">to</span> <span class="sym">#</span>perms <span class="kwa">then</span>

    <span class="slc">\ eliminate bad pans</span>
    a <span class="kwa">c</span><span class="sym">&#64;</span> <span class="num">1</span> <span class="sym">&gt;</span> <span class="kwa">if</span> a<span class="sym">-</span>last <span class="kwa">c</span><span class="sym">&#64;</span> NUM <span class="sym">&lt;</span> <span class="kwa">if</span>
      <span class="slc">\ fill the pan and start flipping</span>
      a pan NUM <span class="kwa">move</span>
      <span class="kwa">swap</span> flips <span class="kwa">max swap</span>
    <span class="kwa">then then</span>

    <span class="slc">\ next permutation</span>
    <span class="kwa">begin dup</span> <span class="num">1</span> <span class="sym">&gt;</span> <span class="kwa">while dup</span> <span class="num">1</span><span class="sym">-</span> tuck counts <span class="sym">+</span> <span class="kwa">c</span><span class="sym">!</span> <span class="kwa">repeat</span>
    <span class="kwa">begin dup</span> <span class="sym">&gt;</span>r  a <span class="kwa">c</span><span class="sym">&#64;</span>  a <span class="num">1</span><span class="sym">+</span> a r<span class="sym">&#64;</span> cmove  a r<span class="sym">&gt; +</span> <span class="kwa">c</span><span class="sym">!</span>      <span class="slc">\ roll</span>
          <span class="kwa">dup</span> counts <span class="sym">+</span>  <span class="kwa">dup c</span><span class="sym">&#64;</span> <span class="num">1</span><span class="sym">-</span>  <span class="kwa">dup rot c</span><span class="sym">!</span>  <span class="num">0</span><span class="sym">=</span>
    <span class="kwa">while</span> <span class="num">1</span><span class="sym">+</span>  <span class="kwa">dup</span> NUM <span class="sym">=</span> <span class="kwa">if drop exit then</span>
    <span class="kwa">repeat</span>
  again <span class="sym">;</span>

fannkuch <span class="sym">.</span><span class="str">&quot; Pfannkuchen(&quot;</span> NUM <span class="num">1</span> u<span class="sym">.</span>r <span class="sym">.</span><span class="str">&quot; ) = &quot;</span> <span class="num">1</span> u<span class="sym">.</span>r <span class="kwa">cr</span> bye
