<span class="slc">-- The Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">-- by Frederic Merizen</span>

<span class="kwa">class</span> FASTA

insert
	ARGUMENTS

creation <span class="sym">{</span>ANY<span class="sym">}</span>
	make

<span class="kwa">feature</span> <span class="sym">{</span>ANY<span class="sym">}</span>
	im<span class="sym">:</span> <span class="kwb">INTEGER</span> <span class="kwa">is</span> <span class="num">139968</span>

	ia<span class="sym">:</span> <span class="kwb">INTEGER</span> <span class="kwa">is</span> <span class="num">3877</span>

	ic<span class="sym">:</span> <span class="kwb">INTEGER</span> <span class="kwa">is</span> <span class="num">29573</span>

	last<span class="sym">:</span> INTEGER_32

	<span class="kwd">random</span> <span class="sym">(</span>max<span class="sym">:</span> REAL_64<span class="sym">):</span> REAL_64 <span class="kwa">is</span>
		<span class="kwa">do</span>
			last <span class="sym">:= (</span>last <span class="sym">*</span> ia <span class="sym">+</span> ic<span class="sym">)</span> \\ im
			<span class="kwa">Result</span> <span class="sym">:=</span> max <span class="sym">*</span> last <span class="sym">/</span> im
		<span class="kwa">end</span>

	alu<span class="sym">:</span> STRING <span class="kwa">is</span> <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG%</span>
<span class="str">						%GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA%</span>
<span class="str">						%CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT%</span>
<span class="str">						%ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA%</span>
<span class="str">						%GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG%</span>
<span class="str">						%AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC%</span>
<span class="str">						%AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>

	iub<span class="sym">:</span> FAST_ARRAY<span class="sym">[</span><span class="kwa">TUPLE</span><span class="sym">[</span><span class="kwb">CHARACTER</span><span class="sym">,</span> REAL_64<span class="sym">]]</span> <span class="kwa">is</span>
		<span class="kwa">once</span>
			<span class="kwa">Result</span> <span class="sym">:= {</span>FAST_ARRAY<span class="sym">[</span><span class="kwa">TUPLE</span><span class="sym">[</span><span class="kwb">CHARACTER</span><span class="sym">,</span> REAL_64<span class="sym">]]</span>
			<span class="sym">&lt;&lt;	[</span><span class="str">'a'</span><span class="sym">,</span> <span class="num">0.27</span><span class="sym">], [</span><span class="str">'c'</span><span class="sym">,</span> <span class="num">0.12</span><span class="sym">], [</span><span class="str">'g'</span><span class="sym">,</span> <span class="num">0.12</span><span class="sym">], [</span><span class="str">'t'</span><span class="sym">,</span> <span class="num">0.27</span><span class="sym">], [</span><span class="str">'B'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">],</span>
				<span class="sym">[</span><span class="str">'D'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">], [</span><span class="str">'H'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">], [</span><span class="str">'K'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">], [</span><span class="str">'M'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">], [</span><span class="str">'N'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">],</span>
				<span class="sym">[</span><span class="str">'R'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">], [</span><span class="str">'S'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">], [</span><span class="str">'V'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">], [</span><span class="str">'W'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">], [</span><span class="str">'Y'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">] &gt;&gt; }</span>
		<span class="kwa">end</span>

	homo_sapiens<span class="sym">:</span> FAST_ARRAY<span class="sym">[</span><span class="kwa">TUPLE</span><span class="sym">[</span><span class="kwb">CHARACTER</span><span class="sym">,</span> REAL_64<span class="sym">]]</span> <span class="kwa">is</span>
		<span class="kwa">once</span>
			<span class="kwa">Result</span> <span class="sym">:= {</span>FAST_ARRAY<span class="sym">[</span><span class="kwa">TUPLE</span><span class="sym">[</span><span class="kwb">CHARACTER</span><span class="sym">,</span> REAL_64<span class="sym">]]</span>
			<span class="sym">&lt;&lt; [</span><span class="str">'a'</span><span class="sym">,</span> <span class="num">0.3029549426680</span><span class="sym">], [</span><span class="str">'c'</span><span class="sym">,</span> <span class="num">0.1979883004921</span><span class="sym">],</span>
				<span class="sym">[</span><span class="str">'g'</span><span class="sym">,</span> <span class="num">0.1975473066391</span><span class="sym">], [</span><span class="str">'t'</span><span class="sym">,</span> <span class="num">0.3015094502008</span><span class="sym">] &gt;&gt; }</span>
		<span class="kwa">end</span>

	<span class="kwd">make_cumulative</span> <span class="sym">(</span>a<span class="sym">:</span> FAST_ARRAY<span class="sym">[</span><span class="kwa">TUPLE</span><span class="sym">[</span><span class="kwb">CHARACTER</span><span class="sym">,</span> REAL_64<span class="sym">]])</span> <span class="kwa">is</span>
		<span class="kwa">local</span>
			cp<span class="sym">:</span> REAL_64<span class="sym">;</span> i<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">;</span> t<span class="sym">:</span> <span class="kwa">TUPLE</span><span class="sym">[</span><span class="kwb">CHARACTER</span><span class="sym">,</span> REAL_64<span class="sym">]</span>
		<span class="kwa">do</span>
			cp <span class="sym">:=</span> <span class="num">0.0</span>
			<span class="kwa">from</span>
				i <span class="sym">:=</span> a.lower
			until
				i <span class="sym">&gt;</span> a.upper
			<span class="kwa">loop</span>
				t <span class="sym">:=</span> a.<span class="kwd">item</span><span class="sym">(</span>i<span class="sym">)</span>
				cp <span class="sym">:=</span> cp <span class="sym">+</span> t.second
				t.<span class="kwd">set_second</span><span class="sym">(</span>cp<span class="sym">)</span>
				i <span class="sym">:=</span> i <span class="sym">+</span> <span class="num">1</span>
			<span class="kwa">end</span>
		<span class="kwa">end</span>

	make <span class="kwa">is</span>
		<span class="kwa">local</span>
			n<span class="sym">:</span> <span class="kwb">INTEGER</span>
		<span class="kwa">do</span>
			last <span class="sym">:=</span> <span class="num">42</span>
			<span class="kwd">make_cumulative</span><span class="sym">(</span>homo_sapiens<span class="sym">)</span>
			<span class="kwd">make_cumulative</span><span class="sym">(</span>iub<span class="sym">)</span>
			<span class="kwa">if</span> argument_count <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then</span>
				n <span class="sym">:=</span> <span class="kwd">argument</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.to_integer
			<span class="kwa">else</span>
				n <span class="sym">:=</span> <span class="num">1000</span>
			<span class="kwa">end</span>
			<span class="kwd">make_repeat_fasta</span><span class="sym">(</span><span class="str">&quot;ONE&quot;</span><span class="sym">,</span> <span class="str">&quot;Homo sapiens alu&quot;</span><span class="sym">,</span> alu<span class="sym">,</span> n <span class="sym">*</span> <span class="num">2</span><span class="sym">,</span> std_output<span class="sym">)</span>
			<span class="kwd">make_random_fasta</span><span class="sym">(</span><span class="str">&quot;TWO&quot;</span><span class="sym">,</span> <span class="str">&quot;IUB ambiguity codes&quot;</span><span class="sym">,</span> iub<span class="sym">,</span> n <span class="sym">*</span> <span class="num">3</span><span class="sym">,</span> std_output<span class="sym">)</span>
			<span class="kwd">make_random_fasta</span><span class="sym">(</span><span class="str">&quot;THREE&quot;</span><span class="sym">,</span> <span class="str">&quot;Homo sapiens frequency&quot;</span><span class="sym">,</span> homo_sapiens<span class="sym">,</span> n <span class="sym">*</span> <span class="num">5</span><span class="sym">,</span> std_output<span class="sym">)</span>
		<span class="kwa">end</span>

	<span class="kwd">select_random</span> <span class="sym">(</span>a<span class="sym">:</span> FAST_ARRAY<span class="sym">[</span><span class="kwa">TUPLE</span><span class="sym">[</span><span class="kwb">CHARACTER</span><span class="sym">,</span> REAL_64<span class="sym">]]):</span> <span class="kwb">CHARACTER</span> <span class="kwa">is</span>
		<span class="kwa">local</span>
			r<span class="sym">:</span> REAL_64<span class="sym">;</span> i<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">;</span> stop<span class="sym">:</span> <span class="kwb">BOOLEAN</span><span class="sym">;</span> t<span class="sym">:</span> <span class="kwa">TUPLE</span><span class="sym">[</span><span class="kwb">CHARACTER</span><span class="sym">,</span> REAL_64<span class="sym">]</span>
		<span class="kwa">do</span>
			r <span class="sym">:=</span> <span class="kwd">random</span><span class="sym">(</span><span class="num">1.0</span><span class="sym">)</span>
			<span class="kwa">from</span>
				i <span class="sym">:=</span> a.lower
			until
				stop
			<span class="kwa">loop</span>
				t <span class="sym">:=</span> a.<span class="kwd">item</span><span class="sym">(</span>i<span class="sym">)</span>
				stop <span class="sym">:=</span> r <span class="sym">&lt;</span> t.second <span class="kwa">or else</span> i <span class="sym">=</span> a.upper
				<span class="kwa">if</span> stop <span class="kwa">then</span>
					<span class="kwa">Result</span> <span class="sym">:=</span> t.first
				<span class="kwa">end</span>
				i <span class="sym">:=</span> i <span class="sym">+</span> <span class="num">1</span>
			<span class="kwa">end</span>
		<span class="kwa">end</span>

	line_length<span class="sym">:</span> <span class="kwb">INTEGER</span> <span class="kwa">is</span> <span class="num">60</span>

	<span class="kwd">make_random_fasta</span> <span class="sym">(</span>id<span class="sym">,</span> desc<span class="sym">:</span> STRING<span class="sym">;</span> a<span class="sym">:</span> FAST_ARRAY<span class="sym">[</span><span class="kwa">TUPLE</span><span class="sym">[</span><span class="kwb">CHARACTER</span><span class="sym">,</span> REAL_64<span class="sym">]];</span> n<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">;</span> s<span class="sym">:</span> OUTPUT_STREAM<span class="sym">)</span> <span class="kwa">is</span>
		<span class="kwa">local</span>
			i<span class="sym">,</span> j<span class="sym">:</span> <span class="kwb">INTEGER</span>
		<span class="kwa">do</span>
			s.<span class="kwd">put_character</span><span class="sym">(</span><span class="str">'&gt;'</span><span class="sym">)</span>
			s.<span class="kwd">put_string</span><span class="sym">(</span>id<span class="sym">)</span>
			s.<span class="kwd">put_character</span><span class="sym">(</span><span class="str">' '</span><span class="sym">)</span>
			s.<span class="kwd">put_string</span><span class="sym">(</span>desc<span class="sym">)</span>
			s.put_new_line
			<span class="kwa">from</span>
				i <span class="sym">:=</span> n
			until
				i <span class="sym">&lt;</span> <span class="num">1</span>
			<span class="kwa">loop</span>
				<span class="kwa">from</span>
					j <span class="sym">:=</span> i.<span class="kwd">min</span><span class="sym">(</span>line_length<span class="sym">)</span>
				until
					j <span class="sym">&lt;</span> <span class="num">1</span>
				<span class="kwa">loop</span>
					s.<span class="kwd">put_character</span><span class="sym">(</span><span class="kwd">select_random</span><span class="sym">(</span>a<span class="sym">))</span>
					j <span class="sym">:=</span> j <span class="sym">-</span> <span class="num">1</span>
				<span class="kwa">end</span>
				s.put_new_line
				i <span class="sym">:=</span> i <span class="sym">-</span> line_length
			<span class="kwa">end</span>
		<span class="kwa">end</span>

	<span class="kwd">make_repeat_fasta</span> <span class="sym">(</span>id<span class="sym">,</span> desc<span class="sym">,</span> a<span class="sym">:</span> STRING<span class="sym">;</span> n<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">;</span> s<span class="sym">:</span> OUTPUT_STREAM<span class="sym">)</span> <span class="kwa">is</span>
		<span class="kwa">local</span>
			i<span class="sym">,</span> j<span class="sym">,</span> k<span class="sym">,</span> kn<span class="sym">:</span> <span class="kwb">INTEGER</span>
		<span class="kwa">do</span>
			s.<span class="kwd">put_character</span><span class="sym">(</span><span class="str">'&gt;'</span><span class="sym">)</span>
			s.<span class="kwd">put_string</span><span class="sym">(</span>id<span class="sym">)</span>
			s.<span class="kwd">put_character</span><span class="sym">(</span><span class="str">' '</span><span class="sym">)</span>
			s.<span class="kwd">put_string</span><span class="sym">(</span>desc<span class="sym">)</span>
			s.put_new_line
			kn <span class="sym">:=</span> a.count
			k <span class="sym">:=</span> <span class="num">1</span>
			<span class="kwa">from</span>
				i <span class="sym">:=</span> n
			until
				i <span class="sym">&lt;</span> <span class="num">1</span>
			<span class="kwa">loop</span>
				<span class="kwa">from</span>
					j <span class="sym">:=</span> i.<span class="kwd">min</span><span class="sym">(</span>line_length<span class="sym">)</span>
				until
					j <span class="sym">&lt;</span> <span class="num">1</span>
				<span class="kwa">loop</span>
					<span class="kwa">if</span> k <span class="sym">&gt;</span> kn <span class="kwa">then</span>
						k <span class="sym">:=</span> <span class="num">1</span>
					<span class="kwa">end</span>
					io.<span class="kwd">put_character</span><span class="sym">(</span>a.<span class="kwd">item</span><span class="sym">(</span>k<span class="sym">))</span>
					k <span class="sym">:=</span> k <span class="sym">+</span> <span class="num">1</span>
					j <span class="sym">:=</span> j <span class="sym">-</span> <span class="num">1</span>
				<span class="kwa">end</span>
				s.put_new_line
				i <span class="sym">:=</span> i <span class="sym">-</span> line_length
			<span class="kwa">end</span>
		<span class="kwa">end</span>

<span class="kwa">end</span> <span class="slc">-- class FASTA</span>
