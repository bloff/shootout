<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Isaac Gouy</span>
<span class="hl com">*/</span>


<span class="hl kwb">boolean</span> isPrime<span class="hl sym">(</span><span class="hl kwb">int</span> k<span class="hl sym">){</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span>k <span class="hl sym">&lt;</span> <span class="hl num">2</span><span class="hl sym">)</span> <span class="hl kwa">return</span> false<span class="hl sym">;</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span>k <span class="hl sym">&lt;</span> <span class="hl num">4</span><span class="hl sym">)</span> <span class="hl kwa">return</span> true<span class="hl sym">;</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span>k<span class="hl sym">%</span><span class="hl num">2</span> <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">return</span> false<span class="hl sym">;</span>
   <span class="hl kwa">if</span> <span class="hl sym">((</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)%</span><span class="hl num">6</span> <span class="hl sym">!=</span> <span class="hl num">0</span> <span class="hl sym">&amp;&amp; (</span>k<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)%</span><span class="hl num">6</span> <span class="hl sym">!=</span> <span class="hl num">0</span> <span class="hl sym">)</span> <span class="hl kwa">return</span> false<span class="hl sym">;</span>

   <span class="hl kwa">let</span> limit <span class="hl sym">=</span> <span class="hl kwc">Math</span><span class="hl sym">.</span>sqrt<span class="hl sym">(</span>k<span class="hl sym">);</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span>var i <span class="hl sym">=</span> <span class="hl num">5</span><span class="hl sym">;</span> i <span class="hl sym">&lt;=</span> limit<span class="hl sym">;</span> i <span class="hl sym">+=</span> <span class="hl num">2</span><span class="hl sym">)</span> <span class="hl kwa">if</span> <span class="hl sym">(</span>k<span class="hl sym">%</span>i <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">return</span> false<span class="hl sym">;</span>

   <span class="hl kwa">return</span> true<span class="hl sym">;</span>
<span class="hl sym">}</span>


<span class="hl kwb">int</span> Prime<span class="hl sym">(</span><span class="hl kwb">int</span> n<span class="hl sym">){</span>
   var count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   var primeNumber <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

   <span class="hl kwa">for</span> <span class="hl sym">(</span>var k <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span> count <span class="hl sym">&lt;</span> n<span class="hl sym">;</span> k<span class="hl sym">++)</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>isPrime<span class="hl sym">(</span>k<span class="hl sym">)){</span>
         count<span class="hl sym">++;</span>
         primeNumber <span class="hl sym">=</span> k<span class="hl sym">;</span>
      <span class="hl sym">}</span>

   <span class="hl kwa">return</span> primeNumber<span class="hl sym">;</span>
<span class="hl sym">}</span>


<span class="hl kwa">class</span> PrimeThread <span class="hl kwa">extends</span> <span class="hl kwc">Thread</span> <span class="hl sym">{</span>
   <span class="hl kwb">int</span> n<span class="hl sym">;</span>
   <span class="hl kwb">int</span> p <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   override <span class="hl kwb">void</span> run<span class="hl sym">(){</span> p <span class="hl sym">=</span> Prime<span class="hl sym">(</span>n<span class="hl sym">); }</span>
<span class="hl sym">}</span>


<span class="hl kwb">void</span> main<span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">){</span>
   var n <span class="hl sym">=</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span>parseInt<span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>

   println<span class="hl sym">(</span><span class="hl str">&quot;1st prime is &quot;</span> <span class="hl sym">+</span> Prime<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">));</span>
   println<span class="hl sym">(</span><span class="hl str">&quot;2nd prime is &quot;</span> <span class="hl sym">+</span> Prime<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">));</span>

   <span class="hl kwa">let</span> PrimeThread<span class="hl sym">[]</span> threads <span class="hl sym">=</span>
      fill<span class="hl sym">(</span><span class="hl kwa">new</span> PrimeThread<span class="hl sym">[</span><span class="hl num">5</span><span class="hl sym">],</span> <span class="hl kwb">int</span> i <span class="hl sym">=&gt;</span> <span class="hl kwa">new</span> PrimeThread<span class="hl sym">(</span>n<span class="hl sym">: (</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)*</span><span class="hl num">10</span><span class="hl sym">*</span>n<span class="hl sym">));</span>

   threads<span class="hl sym">.</span>reversefor<span class="hl sym">(</span>start<span class="hl sym">);</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span>t <span class="hl sym">:</span> threads<span class="hl sym">)</span> t<span class="hl sym">.</span>join<span class="hl sym">();</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span>t <span class="hl sym">:</span> threads<span class="hl sym">)</span> println<span class="hl sym">(</span>t<span class="hl sym">.</span>n <span class="hl sym">+</span> <span class="hl str">&quot;th prime is &quot;</span> <span class="hl sym">+</span> t<span class="hl sym">.</span>p<span class="hl sym">);</span>

<span class="hl sym">}</span>
