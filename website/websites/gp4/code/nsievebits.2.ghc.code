<span class="slc">-- The Great Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">-- Contributed by (c) Simon Marlow 2005</span>
<span class="slc">-- Modified by Don Stewart</span>

<span class="kwa">import</span> Data.Bits<span class="sym">;</span> <span class="kwa">import</span> Data.Array.IO<span class="sym">;</span> <span class="kwa">import</span> System<span class="sym">;</span> <span class="kwa">import</span> IO<span class="sym">;</span> <span class="kwa">import</span> Text.Printf

main <span class="sym">= (</span>\n <span class="sym">-&gt;</span> mapM_ <span class="sym">(</span>sieve.<span class="sym">(</span><span class="num">10000</span> <span class="sym">*)</span>.shiftL <span class="num">1</span><span class="sym">) [</span>n<span class="sym">,</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>n<span class="sym">-</span><span class="num">2</span><span class="sym">])</span> . read . head <span class="sym">=&lt;&lt;</span> getArgs

sieve m <span class="sym">=</span> <span class="kwa">do</span>
  arr <span class="sym">&lt;-</span> newArray <span class="sym">(</span><span class="num">0</span><span class="sym">,</span>m<span class="sym">)</span> <span class="kwa">False</span> <span class="sym">::</span> IO <span class="sym">(</span>IOUArray <span class="kwb">Int Bool</span><span class="sym">)</span>
  <span class="kwa">let</span> for i c
        <span class="sym">|</span> c `seq` <span class="kwa">False</span> <span class="sym">=</span> undefined <span class="slc">-- strictness hack</span>
        <span class="sym">|</span> otherwise <span class="sym">=</span> if i <span class="sym">&gt;</span> m <span class="kwa">then</span> return c <span class="kwa">else do</span>
                x <span class="sym">&lt;-</span> readArray arr i
                if x <span class="kwa">then</span> for <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> c
                     <span class="kwa">else let</span> for<span class="str">' j | j &gt; m = for (i+1) (c+1)</span>
<span class="str">                                     | otherwise = writeArray arr j True &gt;&gt; for'</span> <span class="sym">(</span>j<span class="sym">+</span>i<span class="sym">)</span>
                          <span class="kwa">in</span> for<span class="str">' (i*2)</span>
<span class="str">  r &lt;- for 2 0</span>
<span class="str">  printf &quot;Primes up to %8d %8d\n&quot; (m::Int) (r::Int) :: IO ()</span>
<span class="str"></span>
