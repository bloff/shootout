<span class="com">(* takfp.sml
 *
 *   Floating-point Takeuchi function.
 *
 * Copyright (c) 2004 by The Fellowship of SML/NJ
 *
 * Author: Matthias Blume (blume&#64;tti-c.org)
 *)</span>
<span class="kwa">structure</span> Test<span class="sym">:</span><span class="kwa">sig val</span> main<span class="sym">:</span><span class="kwb">string</span><span class="sym">*</span><span class="kwb">string</span> list<span class="sym">-&gt;</span>OS.Process.status <span class="kwa">end</span> <span class="sym">=</span> <span class="kwa">struct

    fun</span> tak <span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">) =</span> <span class="kwa">if</span> y <span class="sym">&gt;=</span> x <span class="kwa">then</span> z
			<span class="kwa">else</span> tak<span class="sym">(</span>tak<span class="sym">(</span>x<span class="num">-1.0</span><span class="sym">,</span>y<span class="sym">,</span>z<span class="sym">),</span>tak<span class="sym">(</span>y<span class="num">-1.0</span><span class="sym">,</span>z<span class="sym">,</span>x<span class="sym">),</span>tak<span class="sym">(</span>z<span class="num">-1.0</span><span class="sym">,</span>x<span class="sym">,</span>y<span class="sym">))

</span>    <span class="kwa">fun</span> main' n <span class="sym">=</span> <span class="kwa">let open</span> Format <span class="kwa">val</span> n <span class="sym">=</span> <span class="kwb">real</span> n
		  <span class="kwa">in</span> formatf <span class="str">&quot;%.1f</span><span class="esc">\n</span><span class="str">&quot;</span> print <span class="sym">[</span>REAL <span class="sym">(</span>tak <span class="sym">(</span>n <span class="sym">*</span> <span class="num">3.0</span><span class="sym">,</span> n <span class="sym">*</span> <span class="num">2.0</span><span class="sym">,</span> n<span class="sym">))];
</span>		     OS.Process.success
		  <span class="kwa">end

    fun</span> main <span class="sym">(</span>_<span class="sym">, []) =</span> main' <span class="num">1
</span>      <span class="sym">|</span> main <span class="sym">(</span>_<span class="sym">,</span> arg <span class="sym">::</span> _<span class="sym">) =</span> main' <span class="sym">(</span>getOpt <span class="sym">(</span><span class="kwa">Int</span>.fromString arg<span class="sym">,</span> <span class="num">1</span><span class="sym">))
</span><span class="kwa">end</span>
