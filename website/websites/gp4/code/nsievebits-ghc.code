<span class="slc">--</span>
<span class="slc">-- The Great Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">-- Haskell Shootout entries - http://haskell.org/hawiki/ShootoutEntry</span>
<span class="slc">-- Contributed by (c) Simon Marlow 2005</span>
<span class="slc">-- Modified by Don Stewart</span>
<span class="slc">--</span>

<span class="kwa">import</span> Data.Bits<span class="sym">;</span> <span class="kwa">import</span> Data.Array.IO<span class="sym">;</span> <span class="kwa">import</span> Data.Array.Base
<span class="kwa">import</span> System<span class="sym">;</span> <span class="kwa">import</span> IO<span class="sym">;</span> <span class="kwa">import</span> Text.Printf

main <span class="sym">= (</span>\n <span class="sym">-&gt;</span> mapM_ <span class="sym">(</span>sieve . shiftL <span class="num">10000</span> . <span class="sym">(-)</span> n<span class="sym">) [</span><span class="num">0</span>.<span class="num">.2</span><span class="sym">])</span> . read . head <span class="sym">=&lt;&lt;</span> getArgs

sieve m <span class="sym">=</span> <span class="kwa">do</span> r <span class="sym">&lt;-</span> newArray <span class="sym">(</span><span class="num">0</span><span class="sym">,</span>m<span class="sym">)</span> <span class="kwa">False</span> <span class="sym">&gt;&gt;=</span> \<span class="sym">(</span>a<span class="sym">::</span>IOUArray <span class="kwb">Int Bool</span><span class="sym">) -&gt;</span> for a m <span class="num">2 0</span>
             printf <span class="str">&quot;Primes up to %8d %8d\n&quot;</span> <span class="sym">(</span>m<span class="sym">::</span><span class="kwb">Int</span><span class="sym">) (</span>r<span class="sym">::</span><span class="kwb">Int</span><span class="sym">)</span>

for arr m i c <span class="sym">|</span> arr `seq` m `seq` i `seq` c `seq` <span class="kwa">False</span> <span class="sym">=</span> undefined <span class="slc">-- strict</span>
for arr m i c <span class="sym">=</span> if i <span class="sym">&gt;</span> m <span class="kwa">then</span> return c <span class="kwa">else do</span>
    x <span class="sym">&lt;-</span> unsafeRead arr i
    if x <span class="kwa">then</span> for arr m <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> c
         <span class="kwa">else let</span> for' j <span class="sym">|</span> j <span class="sym">&gt;</span> m     <span class="sym">=</span> for arr m <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">) (</span>c<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>
                         <span class="sym">|</span> otherwise <span class="sym">=</span> unsafeWrite arr j <span class="kwa">True</span> <span class="sym">&gt;&gt;</span> for' <span class="sym">(</span>j<span class="sym">+</span>i<span class="sym">)</span>
              <span class="kwa">in</span> for' <span class="sym">(</span>i<span class="sym">*</span><span class="num">2</span><span class="sym">)</span>
