<span class="com">(*</span>
<span class="com"> * The Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Contributed by Vladimir Silyaev</span>
<span class="com"> *)</span>

<span class="kwa">type</span> color <span class="sym">=</span> B <span class="sym">|</span> R <span class="sym">|</span> Y <span class="sym">|</span> Faded

<span class="kwa">let</span> compl c1 c2 <span class="sym">=</span> <span class="kwa">match</span> c1<span class="sym">,</span>c2 <span class="kwa">with</span>
  B<span class="sym">,</span>R <span class="sym">|</span> R<span class="sym">,</span>B <span class="sym">-&gt;</span> Y
  <span class="sym">|</span> Y<span class="sym">,</span>R <span class="sym">|</span> R<span class="sym">,</span>Y <span class="sym">-&gt;</span> B
<span class="sym">|</span> B<span class="sym">,</span>Y <span class="sym">|</span> Y<span class="sym">,</span>B <span class="sym">-&gt;</span> R
<span class="sym">|</span> c<span class="sym">,</span>_ <span class="sym">-&gt;</span> c

<span class="kwa">let</span> n <span class="sym">=</span> <span class="kwd">ref</span> <span class="sym">(</span><span class="kwa">try</span> <span class="kwd">int_of_string</span> <span class="sym">(</span>Array.get Sys.argv <span class="num">1</span><span class="sym">)</span> <span class="kwa">with</span> _ <span class="sym">-&gt;</span> <span class="num">10</span><span class="sym">)</span>

<span class="kwa">let</span> meet <span class="sym">=</span>
  <span class="kwa">let</span> first <span class="sym">=</span> ref None <span class="kwa">in</span>
    <span class="kwa">fun</span> creature cont <span class="sym">-&gt;</span>
      <span class="kwa">if</span> <span class="sym">!</span>n <span class="sym">&lt;=</span> <span class="num">0</span> <span class="kwa">then</span> <span class="sym">(</span>cont Faded<span class="sym">)</span>
      <span class="kwa">else match</span> <span class="sym">!</span>first <span class="kwa">with</span>
	  None <span class="sym">-&gt;</span>
	    first <span class="sym">:=</span> <span class="kwd">Some</span> <span class="sym">(</span>creature<span class="sym">,</span> cont<span class="sym">)</span>
	<span class="sym">|</span> <span class="kwd">Some</span> <span class="sym">(</span>creature'<span class="sym">,</span>cont'<span class="sym">) -&gt;</span>
	    decr n<span class="sym">;</span>
	    first <span class="sym">:=</span> None<span class="sym">;</span>
	    cont creature'<span class="sym">;</span>
	    cont' creature

<span class="kwa">let</span> wait<span class="sym">,</span>step <span class="sym">=</span>
  <span class="kwa">let</span> q <span class="sym">=</span> ref <span class="sym">[]</span> <span class="kwa">in</span>
  <span class="sym">(</span><span class="kwa">fun</span> cont <span class="sym">-&gt;</span> q <span class="sym">:=</span> cont <span class="sym">:: !</span>q<span class="sym">),</span>
  <span class="sym">(</span><span class="kwa">fun</span> _ <span class="sym">-&gt;</span> <span class="kwa">let</span> q' <span class="sym">= !</span>q <span class="kwa">in</span> q <span class="sym">:= [] ;</span>
     <span class="kwa">match</span> q' <span class="kwa">with</span>
	 <span class="sym">[] -&gt;</span> <span class="kwa">false</span>
       <span class="sym">|</span> _ <span class="sym">-&gt;</span> List.<span class="kwd">iter</span> <span class="sym">(</span><span class="kwa">fun</span> c <span class="sym">-&gt;</span> <span class="kwd">c</span> <span class="sym">())</span> q'<span class="sym">;</span><span class="kwa">true</span><span class="sym">)</span>


<span class="kwa">let rec</span> creature stop color <span class="sym">=</span>
  <span class="kwa">let rec</span> body n color <span class="sym">=</span>
    meet color
      <span class="sym">(</span><span class="kwa">function</span> Faded <span class="sym">-&gt;</span> stop n
	 <span class="sym">|</span> color' <span class="sym">-&gt;</span>
	     <span class="kwa">let</span> color <span class="sym">=</span> compl color color' <span class="kwa">in</span>
	       <span class="kwd">wait</span> <span class="sym">(</span><span class="kwa">fun</span> _ <span class="sym">-&gt;</span> <span class="kwd">body</span> <span class="sym">(</span>succ n<span class="sym">)</span> color<span class="sym">)</span>
      <span class="sym">)</span>
  <span class="kwa">in</span>
    body <span class="num">0</span> color

<span class="kwa">let</span> _ <span class="sym">=</span>
  <span class="kwa">let</span> met <span class="sym">=</span> ref <span class="num">0</span> <span class="kwa">in</span>
    List.<span class="kwd">iter</span> <span class="sym">(</span><span class="kwd">creature</span> <span class="sym">(</span><span class="kwa">fun</span> n <span class="sym">-&gt;</span> met <span class="sym">:= !</span>met <span class="sym">+</span> n<span class="sym">))  [</span>B<span class="sym">;</span>R<span class="sym">;</span>Y<span class="sym">;</span>B<span class="sym">;];</span>
    <span class="kwa">while</span> <span class="kwd">step</span> <span class="sym">()</span> <span class="kwa">do</span> <span class="sym">()</span> <span class="kwa">done</span><span class="sym">;</span>
    Printf.printf <span class="str">&quot;%i</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">!</span>met

