<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Alp Toker</span>
<span class="com">*/</span>

<span class="kwa">using</span> System<span class="sym">;</span>
<span class="kwa">using</span> Thread <span class="sym">=</span> System<span class="sym">.</span>Collections<span class="sym">.</span>IEnumerator<span class="sym">;</span>

<span class="kwa">class</span> Chameneos
<span class="sym">{</span>
   <span class="kwa">static</span> Color other<span class="sym">,</span> first<span class="sym">,</span> second<span class="sym">;</span>
   <span class="kwa">static</span> <span class="kwb">int</span> n<span class="sym">,</span> meetings<span class="sym">;</span>

   <span class="kwa">static</span> Thread <span class="kwd">Creature</span> <span class="sym">(</span>Color me<span class="sym">)</span>
   <span class="sym">{</span>
      <span class="kwb">int</span> met <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

      <span class="kwa">while</span> <span class="sym">(</span><span class="kwa">true</span><span class="sym">) {</span>
         <span class="slc">//wait until meeting place clears</span>
         <span class="kwa">while</span> <span class="sym">(</span>second <span class="sym">!=</span> Color<span class="sym">.</span>Faded<span class="sym">)</span>
            yield <span class="kwa">return null</span><span class="sym">;</span>

         other <span class="sym">=</span> first<span class="sym">;</span>

         <span class="kwa">if</span> <span class="sym">(</span>other <span class="sym">!=</span> Color<span class="sym">.</span>Faded<span class="sym">)</span>
            second <span class="sym">=</span> me<span class="sym">;</span>
         <span class="kwa">else</span> <span class="sym">{</span>
            <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&lt;=</span> <span class="num">0</span><span class="sym">) {</span>
               meetings <span class="sym">+=</span> met<span class="sym">;</span>
               yield <span class="kwa">return null</span><span class="sym">;</span>

               <span class="slc">//all faded</span>
               yield <span class="kwa">break</span><span class="sym">;</span>
            <span class="sym">}</span>

            n<span class="sym">--;</span>
            first <span class="sym">=</span> me<span class="sym">;</span>

            <span class="slc">//wait for another creature</span>
            <span class="kwa">while</span> <span class="sym">(</span>second <span class="sym">==</span> Color<span class="sym">.</span>Faded<span class="sym">)</span>
               yield <span class="kwa">return null</span><span class="sym">;</span>

            other <span class="sym">=</span> second<span class="sym">;</span>

            first <span class="sym">=</span> Color<span class="sym">.</span>Faded<span class="sym">;</span>
            second <span class="sym">=</span> Color<span class="sym">.</span>Faded<span class="sym">;</span>
            yield <span class="kwa">return null</span><span class="sym">;</span>
         <span class="sym">}</span>

         <span class="slc">//perform meeting</span>
         met<span class="sym">++;</span>
         <span class="kwa">if</span> <span class="sym">(</span>me <span class="sym">!=</span> other<span class="sym">)</span>
            me <span class="sym">=</span> <span class="kwd">Complement</span> <span class="sym">(</span>me<span class="sym">);</span>
      <span class="sym">}</span>
   <span class="sym">}</span>

   <span class="kwa">static</span> Color <span class="kwd">Complement</span> <span class="sym">(</span>Color me<span class="sym">)</span>
   <span class="sym">{</span>
      <span class="kwa">switch</span> <span class="sym">(</span>me<span class="sym">)</span>
      <span class="sym">{</span>
         <span class="kwa">case</span> Color<span class="sym">.</span>Blue<span class="sym">:</span>
            <span class="kwa">return</span> other <span class="sym">==</span> Color<span class="sym">.</span>Red ? Color<span class="sym">.</span>Yellow <span class="sym">:</span> Color<span class="sym">.</span>Red<span class="sym">;</span>
         <span class="kwa">case</span> Color<span class="sym">.</span>Red<span class="sym">:</span>
            <span class="kwa">return</span> other <span class="sym">==</span> Color<span class="sym">.</span>Blue ? Color<span class="sym">.</span>Yellow <span class="sym">:</span> Color<span class="sym">.</span>Blue<span class="sym">;</span>
         <span class="kwa">case</span> Color<span class="sym">.</span>Yellow<span class="sym">:</span>
            <span class="kwa">return</span> other <span class="sym">==</span> Color<span class="sym">.</span>Blue ? Color<span class="sym">.</span>Red <span class="sym">:</span> Color<span class="sym">.</span>Blue<span class="sym">;</span>
         <span class="kwa">default</span><span class="sym">:</span> <span class="kwa">return</span> me<span class="sym">;</span>
      <span class="sym">}</span>
   <span class="sym">}</span>

   <span class="kwa">static</span> <span class="kwb">int</span> <span class="kwd">Schedule</span> <span class="sym">(</span>Thread<span class="sym">[]</span> threads<span class="sym">)</span>
   <span class="sym">{</span>
      <span class="kwa">while</span> <span class="sym">(</span><span class="kwa">true</span><span class="sym">)</span>
         <span class="kwa">foreach</span> <span class="sym">(</span>Thread thread in threads<span class="sym">)</span>
            <span class="kwa">if</span> <span class="sym">(!</span>thread<span class="sym">.</span><span class="kwd">MoveNext</span> <span class="sym">())</span>
               <span class="kwa">return</span> meetings<span class="sym">;</span>
   <span class="sym">}</span>

   <span class="kwb">enum</span> Color <span class="sym">{</span> Faded<span class="sym">,</span> Blue<span class="sym">,</span> Red<span class="sym">,</span> Yellow <span class="sym">}</span>

   <span class="kwa">static</span> <span class="kwb">void</span> <span class="kwd">Main</span> <span class="sym">(</span><span class="kwb">string</span><span class="sym">[]</span> args<span class="sym">)</span>
   <span class="sym">{</span>
      n <span class="sym">=</span> Int32<span class="sym">.</span><span class="kwd">Parse</span> <span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>

      Thread<span class="sym">[]</span> threads <span class="sym">=</span> <span class="kwa">new</span> Thread<span class="sym">[] {</span><span class="kwd">Creature</span> <span class="sym">(</span>Color<span class="sym">.</span>Blue<span class="sym">),</span> <span class="kwd">Creature</span> <span class="sym">(</span>Color<span class="sym">.</span>Red<span class="sym">),</span> <span class="kwd">Creature</span> <span class="sym">(</span>Color<span class="sym">.</span>Yellow<span class="sym">),</span> <span class="kwd">Creature</span> <span class="sym">(</span>Color<span class="sym">.</span>Blue<span class="sym">)};</span>

      Console<span class="sym">.</span><span class="kwd">WriteLine</span> <span class="sym">(</span><span class="kwd">Schedule</span> <span class="sym">(</span>threads<span class="sym">));</span>
   <span class="sym">}</span>
<span class="sym">}</span>
