<span class="com">&quot;*  The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy *&quot;</span>

<span class="sym">!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span> stamp<span class="sym">:</span> <span class="str">'  11/29/2006 22:24'</span><span class="sym">!</span>binarytrees   <span class="sym">|</span> minDepth n maxDepth stretchDepth check longLivedTree iterations stdout <span class="sym">|</span>    minDepth <span class="sym">:=</span> <span class="num">4</span><span class="sym">.</span>   n <span class="sym">:= (</span>Smalltalk getSystemAttribute<span class="sym">:</span> <span class="num">3</span><span class="sym">)</span> asInteger<span class="sym">.</span>   maxDepth <span class="sym">:=</span> minDepth <span class="sym">+</span> <span class="num">2</span> max<span class="sym">:</span> n<span class="sym">.</span>   stretchDepth <span class="sym">:=</span> maxDepth <span class="sym">+</span> <span class="num">1</span><span class="sym">.</span>   stdout <span class="sym">:=</span> FileStream fileNamed<span class="sym">:</span> <span class="str">'/dev/stdout'</span><span class="sym">.</span>   check <span class="sym">:= (</span>TreeNode bottomUpTree<span class="sym">:</span> <span class="num">0</span> depth<span class="sym">:</span> stretchDepth<span class="sym">)</span> itemCheck<span class="sym">.</span>   stdout       nextPutAll<span class="sym">:</span> <span class="str">'stretch tree of depth '</span><span class="sym">;</span> nextPutAll<span class="sym">:</span> stretchDepth printString<span class="sym">;</span> nextPut<span class="sym">:</span> Character tab<span class="sym">;</span>      nextPutAll<span class="sym">:</span> <span class="str">' check: '</span><span class="sym">;</span> nextPutAll<span class="sym">:</span> check printString<span class="sym">;</span> nextPut<span class="sym">:</span> Character lf<span class="sym">.</span>   longLivedTree <span class="sym">:=</span> TreeNode bottomUpTree<span class="sym">:</span> <span class="num">0</span> depth<span class="sym">:</span> maxDepth<span class="sym">.</span>   minDepth to<span class="sym">:</span> maxDepth by<span class="sym">:</span> <span class="num">2</span> do<span class="sym">: [:</span>depth<span class="sym">|</span>      iterations <span class="sym">:=</span> <span class="num">1</span> bitShift<span class="sym">:</span> maxDepth <span class="sym">-</span> depth <span class="sym">+</span> minDepth<span class="sym">.</span>      check <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>      <span class="num">1</span> to<span class="sym">:</span> iterations do<span class="sym">: [:</span>i<span class="sym">|</span>         check <span class="sym">:=</span> check <span class="sym">+ (</span>TreeNode bottomUpTree<span class="sym">:</span> i depth<span class="sym">:</span> depth<span class="sym">)</span> itemCheck<span class="sym">.</span>         check <span class="sym">:=</span> check <span class="sym">+ (</span>TreeNode bottomUpTree<span class="sym">: -</span><span class="num">1</span><span class="sym">*</span>i depth<span class="sym">:</span> depth<span class="sym">)</span> itemCheck<span class="sym">.      ].</span>      stdout         nextPutAll<span class="sym">:  (</span><span class="num">2</span><span class="sym">*</span>iterations<span class="sym">)</span> printString<span class="sym">;</span> nextPut<span class="sym">:</span> Character tab<span class="sym">;</span>          nextPutAll<span class="sym">:</span> <span class="str">' trees of depth '</span><span class="sym">;</span> nextPutAll<span class="sym">:</span> depth printString<span class="sym">;</span> nextPut<span class="sym">:</span> Character tab<span class="sym">;</span>         nextPutAll<span class="sym">:</span> <span class="str">' check: '</span><span class="sym">;</span> nextPutAll<span class="sym">:</span> check printString<span class="sym">;</span> nextPut<span class="sym">:</span> Character lf<span class="sym">.   ].</span>   stdout      nextPutAll<span class="sym">:</span> <span class="str">'long lived tree of depth '</span><span class="sym">;</span> nextPutAll<span class="sym">:</span> maxDepth printString<span class="sym">;</span> nextPut<span class="sym">:</span> Character tab<span class="sym">;</span>      nextPutAll<span class="sym">:</span> <span class="str">' check: '</span><span class="sym">;</span> nextPutAll<span class="sym">:</span> longLivedTree itemCheck printString<span class="sym">;</span> nextPut<span class="sym">:</span> Character lf<span class="sym">. ! !</span>


Object subclass<span class="sym">: #</span>TreeNode	instanceVariableNames<span class="sym">:</span> <span class="str">'left right item'</span>	classVariableNames<span class="sym">:</span> <span class="str">''</span>	poolDictionaries<span class="sym">:</span> <span class="str">''</span>	category<span class="sym">:</span> <span class="str">'Shootout'</span><span class="sym">!!</span>TreeNode methodsFor<span class="sym">:</span> <span class="str">'initialize-release'</span> stamp<span class="sym">:</span> <span class="str">'  11/29/2006 22:18'</span><span class="sym">!</span>left<span class="sym">:</span> leftChild right<span class="sym">:</span> rightChild item<span class="sym">:</span> anItem   left <span class="sym">:=</span> leftChild<span class="sym">.</span>   right <span class="sym">:=</span> rightChild<span class="sym">.</span>   item <span class="sym">:=</span> anItem<span class="sym">! !!</span>TreeNode methodsFor<span class="sym">:</span> <span class="str">'accessing'</span> stamp<span class="sym">:</span> <span class="str">'  11/29/2006 22:18'</span><span class="sym">!</span>itemCheck   <span class="sym">^</span>left isNil       ifTrue<span class="sym">: [</span>item<span class="sym">]</span> ifFalse<span class="sym">: [</span>item <span class="sym">+ (</span>left itemCheck <span class="sym">-</span> right itemCheck<span class="sym">)]! !</span>


TreeNode class	instanceVariableNames<span class="sym">:</span> <span class="str">''</span><span class="sym">!!</span>TreeNode class methodsFor<span class="sym">:</span> <span class="str">'instance creation'</span> stamp<span class="sym">:</span> <span class="str">'  11/29/2006 22:17'</span><span class="sym">!</span>bottomUpTree<span class="sym">:</span> anItem depth<span class="sym">:</span> anInteger   <span class="sym">^(</span>anInteger <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span>       ifTrue<span class="sym">: [</span>         <span class="kwa">self</span>             left<span class="sym">: (</span><span class="kwa">self</span> bottomUpTree<span class="sym">:</span> <span class="num">2</span><span class="sym">*</span>anItem <span class="sym">-</span> <span class="num">1</span> depth<span class="sym">:</span> anInteger <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span>             right<span class="sym">: (</span><span class="kwa">self</span> bottomUpTree<span class="sym">:</span> <span class="num">2</span><span class="sym">*</span>anItem depth<span class="sym">:</span> anInteger <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span>              item<span class="sym">:</span> anItem         <span class="sym">]</span>      ifFalse<span class="sym">: [</span><span class="kwa">self</span> left<span class="sym">:</span> <span class="kwa">nil</span> right<span class="sym">:</span> <span class="kwa">nil</span> item<span class="sym">:</span> anItem<span class="sym">]! !!</span>TreeNode class methodsFor<span class="sym">:</span> <span class="str">'instance creation'</span> stamp<span class="sym">:</span> <span class="str">'  11/29/2006 22:18'</span><span class="sym">!</span>left<span class="sym">:</span> leftChild right<span class="sym">:</span> rightChild item<span class="sym">:</span> anItem         <span class="sym">^(</span><span class="kwa">super</span> new<span class="sym">)</span> left<span class="sym">:</span> leftChild right<span class="sym">:</span> rightChild item<span class="sym">:</span> anItem<span class="sym">! !</span>
