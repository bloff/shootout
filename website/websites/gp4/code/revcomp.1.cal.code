<span class="hl com">/**</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * Based on the CAL Open Quark version</span>
<span class="hl com"> * Contributed by Magnus Byne.</span>
<span class="hl com"> */</span>
<span class="hl kwa">module</span> Revcomp<span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Prelude <span class="hl kwa">using</span>
    <span class="hl kwa">typeConstructor</span> <span class="hl sym">=</span> Boolean<span class="hl sym">,</span> Byte<span class="hl sym">,</span> Char<span class="hl sym">,</span> Int<span class="hl sym">,</span> JObject<span class="hl sym">,</span> String<span class="hl sym">;</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> eager<span class="hl sym">,</span> seq<span class="hl sym">,</span> toByte<span class="hl sym">;</span>
    <span class="hl sym">;</span>
<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Char <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> toInt<span class="hl sym">,</span> toLowerCase<span class="hl sym">;</span>
    <span class="hl sym">;</span>
<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>String <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> subscript<span class="hl sym">;</span>
    <span class="hl sym">;</span>
<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Collections<span class="hl sym">.</span>List <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> foldLeftStrict<span class="hl sym">;</span>
    <span class="hl sym">;</span>
<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>IO<span class="hl sym">.</span>Console <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> printLine<span class="hl sym">;</span>
    <span class="hl sym">;</span>


<span class="hl kwa">data foreign unsafe import jvm</span> <span class="hl str">&quot;java.io.BufferedReader&quot;</span> <span class="hl kwa">private</span> JBufferedReader<span class="hl sym">;</span>

<span class="hl kwa">data foreign unsafe import jvm</span> <span class="hl str">&quot;java.io.InputStream&quot;</span> <span class="hl kwa">private</span> JInputStream<span class="hl sym">;</span>

<span class="hl kwa">data foreign unsafe import jvm</span> <span class="hl str">&quot;java.io.InputStreamReader&quot;</span>
    <span class="hl kwa">private</span> JInputStreamReader<span class="hl sym">;</span>

<span class="hl kwa">data foreign unsafe import jvm</span> <span class="hl str">&quot;java.io.Reader&quot;</span> <span class="hl kwa">private</span> JReader<span class="hl sym">;</span>

<span class="hl kwa">data foreign unsafe import jvm</span> <span class="hl str">&quot;java.io.FileReader&quot;</span> <span class="hl kwa">private</span> JFileReader<span class="hl sym">;</span>

<span class="hl kwa">data foreign unsafe import jvm</span> <span class="hl str">&quot;java.io.PrintStream&quot;</span> <span class="hl kwa">private</span> JPrintStream<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;constructor&quot;</span>
    <span class="hl kwa">private</span> createBufferedReader <span class="hl sym">::</span> JReader <span class="hl sym">-&gt;</span> JBufferedReader<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;constructor&quot;</span>
    <span class="hl kwa">private</span> createInputStreamReaderStream <span class="hl sym">::</span> JInputStream <span class="hl sym">-&gt;</span> JInputStreamReader<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;method readLine&quot;</span>
    <span class="hl kwa">private</span> readLine <span class="hl sym">::</span> JBufferedReader <span class="hl sym">-&gt;</span> String<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;static field java.lang.System.out&quot;</span>
    <span class="hl kwa">private</span> stdout <span class="hl sym">::</span> JPrintStream<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;static field java.lang.System.in&quot;</span>
    <span class="hl kwa">private</span> stdin <span class="hl sym">::</span> JInputStream<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;isNull&quot;</span> <span class="hl kwa">private</span> isNull <span class="hl sym">::</span> String <span class="hl sym">-&gt;</span> Boolean<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;method write&quot;</span>
    <span class="hl kwa">private</span> write <span class="hl sym">::</span> JPrintStream <span class="hl sym">-&gt;</span> JByteArray <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt; ();</span>

<span class="hl kwa">data foreign unsafe import jvm</span> <span class="hl str">&quot;byte[]&quot;</span> JByteArray<span class="hl sym">;</span>

<span class="hl slc">//Import Java byte arrays</span>
<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;newArray&quot;</span> byteArray_new <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> JByteArray<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;subscriptArray&quot;</span>
    byteArray_subscript <span class="hl sym">::</span> JByteArray <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Byte<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;lengthArray&quot;</span> byteArray_length <span class="hl sym">::</span> JByteArray <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;updateArray&quot;</span>
    byteArray_update <span class="hl sym">::</span> JByteArray <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Byte <span class="hl sym">-&gt;</span> Byte<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;cast&quot;</span>
    jInputStreamReaderToJReader <span class="hl sym">::</span> JInputStreamReader <span class="hl sym">-&gt;</span> JReader<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;cast&quot;</span> cast <span class="hl sym">::</span> JByteArray <span class="hl sym">-&gt;</span> JObject<span class="hl sym">;</span>

<span class="hl kwa">data</span> Chunk <span class="hl sym">=</span>
    Chunk
        dataChunk <span class="hl sym">:: !</span>JByteArray
        length <span class="hl sym">:: !</span>Int
    <span class="hl sym">;</span>

charToByte <span class="hl sym">::</span> Char <span class="hl sym">-&gt;</span> Byte<span class="hl sym">;</span>
charToByte <span class="hl sym">!</span>c <span class="hl sym">=</span> toByte <span class="hl sym">(</span>Char<span class="hl sym">.</span>toInt c<span class="hl sym">);</span>

initCharMap <span class="hl sym">::</span> JByteArray <span class="hl sym">-&gt; ();</span>
initCharMap <span class="hl sym">!</span>charMap <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        loop <span class="hl sym">::</span> Int <span class="hl sym">-&gt; ();</span>
        loop <span class="hl sym">!</span>i <span class="hl sym">=</span>
            <span class="hl kwa">if</span> i <span class="hl sym">&lt;</span> <span class="hl num">128</span> <span class="hl kwa">then</span>
                byteArray_update charMap i <span class="hl sym">(</span>toByte i<span class="hl sym">)</span>
                <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                <span class="hl sym">()</span>
            <span class="hl kwa">else</span>
                <span class="hl sym">()</span>
            <span class="hl sym">;</span>

        mappings <span class="hl sym">:: [(</span>Char<span class="hl sym">,</span> Char<span class="hl sym">)];</span>
        mappings <span class="hl sym">=</span>
            <span class="hl sym">[</span>
                <span class="hl sym">(</span><span class="hl str">'A'</span><span class="hl sym">,</span> <span class="hl str">'T'</span><span class="hl sym">),</span>
                <span class="hl sym">(</span><span class="hl str">'C'</span><span class="hl sym">,</span> <span class="hl str">'G'</span><span class="hl sym">),</span>
                <span class="hl sym">(</span><span class="hl str">'G'</span><span class="hl sym">,</span> <span class="hl str">'C'</span><span class="hl sym">),</span>
                <span class="hl sym">(</span><span class="hl str">'T'</span><span class="hl sym">,</span> <span class="hl str">'A'</span><span class="hl sym">),</span>
                <span class="hl sym">(</span><span class="hl str">'U'</span><span class="hl sym">,</span> <span class="hl str">'A'</span><span class="hl sym">),</span>
                <span class="hl sym">(</span><span class="hl str">'M'</span><span class="hl sym">,</span> <span class="hl str">'K'</span><span class="hl sym">),</span>
                <span class="hl sym">(</span><span class="hl str">'R'</span><span class="hl sym">,</span> <span class="hl str">'Y'</span><span class="hl sym">),</span>
                <span class="hl sym">(</span><span class="hl str">'W'</span><span class="hl sym">,</span> <span class="hl str">'W'</span><span class="hl sym">),</span>
                <span class="hl sym">(</span><span class="hl str">'S'</span><span class="hl sym">,</span> <span class="hl str">'S'</span><span class="hl sym">),</span>
                <span class="hl sym">(</span><span class="hl str">'Y'</span><span class="hl sym">,</span> <span class="hl str">'R'</span><span class="hl sym">),</span>
                <span class="hl sym">(</span><span class="hl str">'K'</span><span class="hl sym">,</span> <span class="hl str">'M'</span><span class="hl sym">),</span>
                <span class="hl sym">(</span><span class="hl str">'V'</span><span class="hl sym">,</span> <span class="hl str">'B'</span><span class="hl sym">),</span>
                <span class="hl sym">(</span><span class="hl str">'H'</span><span class="hl sym">,</span> <span class="hl str">'D'</span><span class="hl sym">),</span>
                <span class="hl sym">(</span><span class="hl str">'D'</span><span class="hl sym">,</span> <span class="hl str">'H'</span><span class="hl sym">),</span>
                <span class="hl sym">(</span><span class="hl str">'B'</span><span class="hl sym">,</span> <span class="hl str">'V'</span><span class="hl sym">),</span>
                <span class="hl sym">(</span><span class="hl str">'N'</span><span class="hl sym">,</span> <span class="hl str">'N'</span><span class="hl sym">)</span>
            <span class="hl sym">]</span>
            <span class="hl sym">;</span>
    <span class="hl kwa">in</span>
        loop <span class="hl num">0</span>
        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
        foldLeftStrict
            <span class="hl sym">(</span>
                \<span class="hl sym">!</span>a <span class="hl sym">!</span>mapping <span class="hl sym">-&gt;</span>
                    byteArray_update
                        charMap
                        <span class="hl sym">(</span>Char<span class="hl sym">.</span>toInt mapping<span class="hl sym">.</span>#<span class="hl num">1</span><span class="hl sym">)</span>
                        <span class="hl sym">(</span>charToByte mapping<span class="hl sym">.</span>#<span class="hl num">2</span><span class="hl sym">)</span>
                    <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                    byteArray_update
                        charMap
                        <span class="hl sym">(</span>Char<span class="hl sym">.</span>toInt <span class="hl sym">(</span>toLowerCase mapping<span class="hl sym">.</span>#<span class="hl num">1</span><span class="hl sym">))</span>
                        <span class="hl sym">(</span>charToByte mapping<span class="hl sym">.</span>#<span class="hl num">2</span><span class="hl sym">)</span>
                    <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                    a
            <span class="hl sym">)</span>
            <span class="hl sym">()</span>
            mappings
    <span class="hl sym">;</span>

<span class="hl slc">//this includes the CR</span>
outputLineLength <span class="hl sym">::</span> Int<span class="hl sym">;</span>
outputLineLength <span class="hl sym">=</span> <span class="hl num">61</span><span class="hl sym">;</span>

printChunks <span class="hl sym">:: [</span>Chunk<span class="hl sym">] -&gt; ();</span>
printChunks chunks <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        outputBuffer <span class="hl sym">::</span> JByteArray<span class="hl sym">;</span>
        outputBuffer <span class="hl sym">=</span>
            eager $ byteArray_new <span class="hl sym">(</span>chunkSize <span class="hl sym">*</span> List<span class="hl sym">.</span>length chunks <span class="hl sym">*</span> <span class="hl num">61</span> <span class="hl sym">/</span> <span class="hl num">60</span><span class="hl sym">)</span>
            <span class="hl sym">;</span>

        eol <span class="hl sym">::</span> Byte<span class="hl sym">;</span>
        eol <span class="hl sym">=</span> eager $ toByte <span class="hl sym">(</span>eager $ Char<span class="hl sym">.</span>toInt <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">);</span>

        appendChunk <span class="hl sym">::</span> JByteArray <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>
        appendChunk <span class="hl sym">!</span>chunk <span class="hl sym">!</span>i <span class="hl sym">!</span>charsOnLine <span class="hl sym">!</span>ptr <span class="hl sym">=</span>
            <span class="hl kwa">if</span> i <span class="hl sym">&gt;=</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
                byteArray_update
                    outputBuffer
                    ptr
                    <span class="hl sym">(</span>byteArray_subscript chunk i<span class="hl sym">)</span>
                <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                <span class="hl sym">(</span>
                    <span class="hl kwa">if</span> <span class="hl sym">(</span>ptr <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">) %</span> outputLineLength <span class="hl sym">==</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
                        byteArray_update outputBuffer <span class="hl sym">(</span>ptr <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span> eol
                        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                        appendChunk chunk <span class="hl sym">(</span>i <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl num">0</span> <span class="hl sym">(</span>ptr <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">)</span>
                    <span class="hl kwa">else</span>
                        appendChunk
                            chunk
                            <span class="hl sym">(</span>i <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span>
                            <span class="hl sym">(</span>charsOnLine <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
                            <span class="hl sym">(</span>ptr <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
                <span class="hl sym">)</span>
            <span class="hl kwa">else</span>
                ptr
            <span class="hl sym">;</span>

        appendChunks <span class="hl sym">:: [</span>Chunk<span class="hl sym">] -&gt;</span> Int <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>
        appendChunks <span class="hl sym">!</span>chunks <span class="hl sym">!</span>ptr <span class="hl sym">=</span>
            <span class="hl kwa">case</span> chunks <span class="hl kwa">of</span>
            <span class="hl sym">[] -&gt;</span>
                <span class="hl kwa">if</span> ptr <span class="hl sym">%</span> outputLineLength <span class="hl sym">!=</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
                    byteArray_update outputBuffer ptr eol
                    <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                    ptr <span class="hl sym">+</span> <span class="hl num">1</span>
                <span class="hl kwa">else</span>
                    ptr
                <span class="hl sym">;</span>
            first <span class="hl sym">:</span> rest <span class="hl sym">-&gt;</span>
                <span class="hl kwa">case</span> first <span class="hl kwa">of</span>
                Chunk buffer bytes <span class="hl sym">-&gt;</span>
                    appendChunks
                        rest
                        <span class="hl sym">(</span>appendChunk buffer <span class="hl sym">(</span>bytes <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">) (</span><span class="hl num">0</span> <span class="hl sym">::</span> Int<span class="hl sym">)</span> ptr<span class="hl sym">)</span>
                    <span class="hl sym">;</span>
                <span class="hl sym">;</span>
            <span class="hl sym">;</span>
    <span class="hl kwa">in</span>
        write stdout outputBuffer <span class="hl num">0</span> <span class="hl sym">(</span>appendChunks chunks <span class="hl num">0</span><span class="hl sym">)</span>
    <span class="hl sym">;</span>

appendToChunk <span class="hl sym">::</span> JByteArray <span class="hl sym">-&gt;</span> String <span class="hl sym">-&gt;</span> JByteArray <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt; ();</span>
appendToChunk <span class="hl sym">!</span>charMap <span class="hl sym">!</span>line <span class="hl sym">!</span>buffer <span class="hl sym">!</span>offset <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        helper <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt; ();</span>
        helper <span class="hl sym">!</span>i <span class="hl sym">!</span>end <span class="hl sym">=</span>
            <span class="hl kwa">if</span> i <span class="hl sym">&lt;</span> end <span class="hl kwa">then</span>
                byteArray_update
                    buffer
                    <span class="hl sym">(</span>offset <span class="hl sym">+</span> i<span class="hl sym">)</span>
                    <span class="hl sym">(</span>byteArray_subscript
                        charMap
                        <span class="hl sym">(</span>toInt <span class="hl sym">(</span>String<span class="hl sym">.</span>subscript line i<span class="hl sym">))</span>
                    <span class="hl sym">)</span>
                <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                helper <span class="hl sym">(</span>i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span> end
            <span class="hl kwa">else</span>
                <span class="hl sym">()</span>
            <span class="hl sym">;</span>
    <span class="hl kwa">in</span>
        helper <span class="hl num">0</span> <span class="hl sym">(</span>String<span class="hl sym">.</span>length line<span class="hl sym">)</span>
    <span class="hl sym">;</span>

chunkSize <span class="hl sym">::</span> Int<span class="hl sym">;</span>
chunkSize <span class="hl sym">=</span> <span class="hl num">10240</span><span class="hl sym">;</span>

main <span class="hl sym">:: [</span>String<span class="hl sym">] -&gt; ();</span>
<span class="hl kwa">public</span> main <span class="hl sym">!</span>args <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        charMap <span class="hl sym">::</span> JByteArray<span class="hl sym">;</span>
        charMap <span class="hl sym">=</span> eager $ byteArray_new <span class="hl num">128</span><span class="hl sym">;</span>

        reader <span class="hl sym">::</span> JBufferedReader<span class="hl sym">;</span>
        reader <span class="hl sym">=</span>
            eager
            $ createBufferedReader
                <span class="hl sym">(</span>jInputStreamReaderToJReader
                    <span class="hl sym">(</span>createInputStreamReaderStream stdin<span class="hl sym">)</span>
                <span class="hl sym">)</span>
            <span class="hl sym">;</span>

        readLines <span class="hl sym">::</span> JBufferedReader <span class="hl sym">-&gt; [</span>Chunk<span class="hl sym">] -&gt;</span> JByteArray <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt; ();</span>
        readLines <span class="hl sym">!</span>reader <span class="hl sym">!</span>chunks <span class="hl sym">!</span>buffer <span class="hl sym">!</span>bytesInBuffer <span class="hl sym">=</span>
            <span class="hl kwa">let</span>
                line <span class="hl sym">::</span> String<span class="hl sym">;</span>
                line <span class="hl sym">=</span> eager $ readLine reader<span class="hl sym">;</span>
            <span class="hl kwa">in</span>

                <span class="hl kwa">if</span> isNull line <span class="hl kwa">then</span>
                    printChunks <span class="hl sym">(</span>Chunk buffer bytesInBuffer <span class="hl sym">:</span> chunks<span class="hl sym">)</span>
                <span class="hl kwa">else if</span> subscript line <span class="hl num">0</span> <span class="hl sym">==</span> <span class="hl str">'&gt;'</span> <span class="hl kwa">then</span>
                    printChunks <span class="hl sym">(</span>Chunk buffer bytesInBuffer <span class="hl sym">:</span> chunks<span class="hl sym">)</span>
                    <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                    printLine line
                    <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                    readLines reader <span class="hl sym">[] (</span>byteArray_new chunkSize<span class="hl sym">)</span> <span class="hl num">0</span>
                <span class="hl kwa">else if</span> bytesInBuffer <span class="hl sym">+</span> String<span class="hl sym">.</span>length line <span class="hl sym">&lt;</span> chunkSize <span class="hl kwa">then</span>
                    appendToChunk charMap line buffer bytesInBuffer
                    <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                    readLines
                        reader
                        chunks
                        buffer
                        <span class="hl sym">(</span>bytesInBuffer <span class="hl sym">+</span> String<span class="hl sym">.</span>length line<span class="hl sym">)</span>
                <span class="hl kwa">else</span>
                    <span class="hl kwa">let</span>
                        newBuffer <span class="hl sym">::</span> JByteArray<span class="hl sym">;</span>
                        newBuffer <span class="hl sym">=</span> eager $ byteArray_new chunkSize<span class="hl sym">;</span>

                        len <span class="hl sym">::</span> Int<span class="hl sym">;</span>
                        len <span class="hl sym">=</span> eager $ String<span class="hl sym">.</span>length line<span class="hl sym">;</span>
                    <span class="hl kwa">in</span>
                        appendToChunk charMap line newBuffer <span class="hl num">0</span>
                        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                        readLines
                            reader
                            <span class="hl sym">(</span>Chunk buffer bytesInBuffer <span class="hl sym">:</span> chunks<span class="hl sym">)</span>
                            newBuffer
                            len
            <span class="hl sym">;</span>
    <span class="hl kwa">in</span>

        initCharMap charMap
        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
        readLines reader <span class="hl sym">[] (</span>byteArray_new chunkSize<span class="hl sym">)</span> <span class="hl num">0</span>
    <span class="hl sym">;</span>

