<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Isaac Gouy</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> java<span class="hl sym">.</span>io<span class="hl sym">.*;</span>

<span class="hl kwb">void</span> main<span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">){</span>

   <span class="hl kwb">byte</span><span class="hl sym">[]</span> IUBCodeComplements<span class="hl sym">(){</span>
      <span class="hl kwa">let</span> code <span class="hl sym">=</span> <span class="hl str">&quot;ABCDGHKMNRSTVWYabcdghkmnrstvwy&quot;</span><span class="hl sym">.</span>getBytes<span class="hl sym">;</span>
      <span class="hl kwa">let</span> comp <span class="hl sym">=</span> <span class="hl str">&quot;TVGHCDMKNYSABWRTVGHCDMKNYSABWR&quot;</span><span class="hl sym">.</span>getBytes<span class="hl sym">;</span>
      <span class="hl kwa">let</span> <span class="hl kwb">byte</span><span class="hl sym">[]</span> a <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl sym">[</span> <span class="hl str">&quot;z&quot;</span><span class="hl sym">.</span>getBytes<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] ];</span>

      <span class="hl kwa">for</span> <span class="hl sym">(</span>var i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>code<span class="hl sym">.</span>length<span class="hl sym">;</span> i<span class="hl sym">++)</span> a<span class="hl sym">[</span> code<span class="hl sym">[</span>i<span class="hl sym">] ] =</span> comp<span class="hl sym">[</span>i<span class="hl sym">];</span>
      <span class="hl kwa">return</span> a<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">let</span> IUB <span class="hl sym">=</span> IUBCodeComplements<span class="hl sym">();</span>


   <span class="hl kwb">void</span> complementReverseWrite<span class="hl sym">(</span><span class="hl kwc">String</span> desc<span class="hl sym">,</span> <span class="hl kwc">Stack</span><span class="hl sym">&lt;</span><span class="hl kwb">byte</span><span class="hl sym">[]&gt;</span> lines<span class="hl sym">,</span>
         <span class="hl kwc">BufferedOutputStream</span> w<span class="hl sym">){</span>

      <span class="hl kwb">void</span> inplaceComplementReverse<span class="hl sym">(</span><span class="hl kwb">byte</span><span class="hl sym">[]</span> b<span class="hl sym">){</span>
         var i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         var j <span class="hl sym">=</span> b<span class="hl sym">.</span>length <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>
         <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> j<span class="hl sym">){</span>
            <span class="hl kwa">let</span> swap <span class="hl sym">=</span> b<span class="hl sym">[</span>i<span class="hl sym">];</span>
            b<span class="hl sym">[</span>i<span class="hl sym">] =</span> IUB<span class="hl sym">[</span> b<span class="hl sym">[</span>j<span class="hl sym">] ];</span>
            b<span class="hl sym">[</span>j<span class="hl sym">] =</span> IUB<span class="hl sym">[</span> swap <span class="hl sym">];</span>
            i <span class="hl sym">=</span> i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
            j <span class="hl sym">=</span> j <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>
         <span class="hl sym">}</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>i <span class="hl sym">==</span> j<span class="hl sym">)</span> b<span class="hl sym">[</span>i<span class="hl sym">] =</span> IUB<span class="hl sym">[</span> b<span class="hl sym">[</span>i<span class="hl sym">] ];</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">let</span> nl <span class="hl sym">=</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">.</span>getBytes<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
      w<span class="hl sym">.</span>write<span class="hl sym">(</span>desc<span class="hl sym">.</span>getBytes<span class="hl sym">);</span> w<span class="hl sym">.</span>write<span class="hl sym">(</span>nl<span class="hl sym">);</span>

      <span class="hl kwa">let</span> n <span class="hl sym">=</span> <span class="hl num">60</span><span class="hl sym">;</span>
      var k <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwa">if</span> <span class="hl sym">(!</span>lines<span class="hl sym">.</span>empty<span class="hl sym">)</span> k <span class="hl sym">=</span> lines<span class="hl sym">.</span>peek<span class="hl sym">.</span>length<span class="hl sym">;</span>
      <span class="hl kwa">let</span> isSplitLine <span class="hl sym">=</span> k <span class="hl sym">&lt;</span> n<span class="hl sym">;</span>
      var isFirstLine <span class="hl sym">=</span> true<span class="hl sym">;</span>

      <span class="hl kwa">while</span> <span class="hl sym">(!</span>lines<span class="hl sym">.</span>empty<span class="hl sym">) {</span>
        <span class="hl kwa">let</span> line <span class="hl sym">=</span> lines<span class="hl sym">.</span>pop<span class="hl sym">;</span>
        inplaceComplementReverse<span class="hl sym">(</span>line<span class="hl sym">);</span>

        <span class="hl kwa">if</span> <span class="hl sym">(</span>isSplitLine<span class="hl sym">){</span>
           <span class="hl kwa">if</span> <span class="hl sym">(</span>isFirstLine<span class="hl sym">){</span> w<span class="hl sym">.</span>write<span class="hl sym">(</span>line<span class="hl sym">);</span> isFirstLine <span class="hl sym">=</span> false<span class="hl sym">; }</span>
           <span class="hl kwa">else</span> <span class="hl sym">{</span> w<span class="hl sym">.</span>write<span class="hl sym">(</span>line<span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span>n<span class="hl sym">-</span>k<span class="hl sym">);</span> w<span class="hl sym">.</span>write<span class="hl sym">(</span>nl<span class="hl sym">);</span> w<span class="hl sym">.</span>write<span class="hl sym">(</span>line<span class="hl sym">,</span>n<span class="hl sym">-</span>k<span class="hl sym">,</span>k<span class="hl sym">); }</span>
        <span class="hl sym">}</span>
        <span class="hl kwa">else</span> <span class="hl sym">{</span> w<span class="hl sym">.</span>write<span class="hl sym">(</span>line<span class="hl sym">);</span> w<span class="hl sym">.</span>write<span class="hl sym">(</span>nl<span class="hl sym">); }</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>isSplitLine <span class="hl sym">&amp;&amp; !</span>isFirstLine<span class="hl sym">)</span> w<span class="hl sym">.</span>write<span class="hl sym">(</span>nl<span class="hl sym">);</span>
   <span class="hl sym">}</span>



   <span class="hl kwa">let</span> r <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">BufferedReader</span><span class="hl sym">(</span><span class="hl kwa">new</span> <span class="hl kwc">InputStreamReader</span><span class="hl sym">(</span><span class="hl kwc">System</span><span class="hl sym">.</span>in<span class="hl sym">));</span>
   <span class="hl kwa">let</span> w <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">BufferedOutputStream</span><span class="hl sym">(</span><span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">);</span>

   var lines <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">Stack</span><span class="hl sym">();</span>
   var desc <span class="hl sym">=</span> <span class="hl str">&quot;&quot;</span><span class="hl sym">;</span>

   var ?<span class="hl kwc">String</span> line<span class="hl sym">;</span>
   <span class="hl kwa">while</span> <span class="hl sym">((</span>line <span class="hl sym">=</span> r<span class="hl sym">.</span>readLine<span class="hl sym">()) !=</span> null<span class="hl sym">) {</span>
      <span class="hl kwa">let</span> c <span class="hl sym">=</span> line<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>c <span class="hl sym">==</span> <span class="hl str">'&gt;'</span><span class="hl sym">){</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>desc<span class="hl sym">.</span>length <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">){</span>
            complementReverseWrite<span class="hl sym">(</span>desc<span class="hl sym">,</span> lines<span class="hl sym">,</span> w<span class="hl sym">);</span>
            lines <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">Stack</span><span class="hl sym">();</span>
         <span class="hl sym">}</span>
         desc <span class="hl sym">=</span> line<span class="hl sym">;</span>
      <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>c <span class="hl sym">!=</span> <span class="hl str">';'</span><span class="hl sym">)</span> lines<span class="hl sym">.</span>push<span class="hl sym">(</span>line<span class="hl sym">.</span>getBytes<span class="hl sym">);</span>
      <span class="hl sym">}</span>
      <span class="hl sym">}</span>
   r<span class="hl sym">.</span>close<span class="hl sym">;</span>

   <span class="hl kwa">if</span> <span class="hl sym">(</span>desc<span class="hl sym">.</span>length <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> complementReverseWrite<span class="hl sym">(</span>desc<span class="hl sym">,</span> lines<span class="hl sym">,</span> w<span class="hl sym">);</span>
   w<span class="hl sym">.</span>close<span class="hl sym">;</span>
<span class="hl sym">}</span>
