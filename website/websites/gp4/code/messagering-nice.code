<span class="hl com">/*</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * adapted from a Java program by Klaus Friedel</span>
<span class="hl com"> * contributed by Isaac Gouy</span>
<span class="hl com"> */</span>

<span class="hl kwb">void</span> main<span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">){</span>
   <span class="hl kwa">let</span> <span class="hl kwb">int</span> numberOfThreads <span class="hl sym">=</span> <span class="hl num">503</span><span class="hl sym">;</span>
   var numberOfMessagesToSend <span class="hl sym">=</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span>parseInt<span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>

   ?MessageRingThread first <span class="hl sym">=</span> null<span class="hl sym">;</span>
   ?MessageRingThread last <span class="hl sym">=</span> null<span class="hl sym">;</span>

   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> numberOfThreads<span class="hl sym">;</span> i <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl sym">;</span> i<span class="hl sym">--) {</span>
      first <span class="hl sym">=</span> <span class="hl kwa">new</span> MessageRingThread<span class="hl sym">(</span>name<span class="hl sym">:</span> i<span class="hl sym">,</span> next<span class="hl sym">:</span> first<span class="hl sym">);</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>last <span class="hl sym">==</span> null<span class="hl sym">)</span> last <span class="hl sym">=</span> first<span class="hl sym">;</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span>last <span class="hl sym">!=</span> null<span class="hl sym">)</span> last<span class="hl sym">.</span>next <span class="hl sym">=</span> first<span class="hl sym">;</span>

   <span class="hl kwa">if</span> <span class="hl sym">(</span>first <span class="hl sym">!=</span> null<span class="hl sym">)</span> first<span class="hl sym">.</span>take<span class="hl sym">(</span>numberOfMessagesToSend<span class="hl sym">);</span>
<span class="hl sym">}</span>



<span class="hl kwa">class</span> MessageRingThread <span class="hl kwa">extends</span> <span class="hl kwc">Thread</span> <span class="hl sym">{</span>
   <span class="hl kwa">private</span> <span class="hl kwb">int</span> name<span class="hl sym">;</span>
   ?MessageRingThread next<span class="hl sym">;</span>
   <span class="hl kwa">private</span> <span class="hl kwb">boolean</span> started <span class="hl sym">=</span> false<span class="hl sym">;</span>
   <span class="hl kwa">private</span> MessageBox messageBox <span class="hl sym">=</span> <span class="hl kwa">new</span> MessageBox<span class="hl sym">();</span>

   override <span class="hl kwb">void</span> run<span class="hl sym">() {</span>
      <span class="hl kwa">let</span> nextThread <span class="hl sym">=</span> next<span class="hl sym">;</span>

      <span class="hl kwa">if</span> <span class="hl sym">(</span>nextThread <span class="hl sym">!=</span> null<span class="hl sym">){</span>
         var <span class="hl kwb">int</span> m <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         <span class="hl kwa">while</span> <span class="hl sym">((</span>m <span class="hl sym">=</span> messageBox<span class="hl sym">.</span>message<span class="hl sym">()) &gt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
            nextThread<span class="hl sym">.</span>take<span class="hl sym">(</span>m<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">);</span>

         <span class="hl kwa">if</span> <span class="hl sym">(</span>m <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span> println<span class="hl sym">(</span>name<span class="hl sym">);</span>

         <span class="hl slc">//nextThread.take(m-1); // gentle exit</span>
         <span class="hl kwc">System</span><span class="hl sym">.</span>exit<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span>       <span class="hl slc">// brutal exit</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   <span class="hl kwb">void</span> take<span class="hl sym">(</span><span class="hl kwb">int</span> message<span class="hl sym">) {</span>
      <span class="hl kwa">if</span> <span class="hl sym">(!</span>started<span class="hl sym">) {</span>
         <span class="hl kwa">this</span><span class="hl sym">.</span>start<span class="hl sym">();</span>
         started <span class="hl sym">=</span> true<span class="hl sym">;</span>
      <span class="hl sym">}</span>
      messageBox<span class="hl sym">.</span>set<span class="hl sym">(</span>message<span class="hl sym">);</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>


<span class="hl kwa">class</span> MessageBox <span class="hl sym">{</span>
   <span class="hl kwa">private</span> <span class="hl kwb">boolean</span> empty <span class="hl sym">=</span> true<span class="hl sym">;</span>
   <span class="hl kwa">private</span> <span class="hl kwb">int</span> contents <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

   <span class="hl kwb">void</span> set<span class="hl sym">(</span><span class="hl kwb">int</span> message<span class="hl sym">){</span>
      <span class="hl kwa">synchronized</span> <span class="hl sym">(</span><span class="hl kwa">this</span><span class="hl sym">) {</span>
         contents <span class="hl sym">=</span> message<span class="hl sym">;</span>
         empty <span class="hl sym">=</span> false<span class="hl sym">;</span>
         <span class="hl kwa">this</span><span class="hl sym">.</span>notify<span class="hl sym">();</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   <span class="hl kwb">int</span> message<span class="hl sym">(){</span>
      <span class="hl kwa">synchronized</span> <span class="hl sym">(</span><span class="hl kwa">this</span><span class="hl sym">) {</span>
         <span class="hl kwa">while</span> <span class="hl sym">(</span>empty<span class="hl sym">)</span> <span class="hl kwa">this</span><span class="hl sym">.</span>wait<span class="hl sym">();</span>
         empty <span class="hl sym">=</span> true<span class="hl sym">;</span>
         <span class="hl kwa">return</span> contents<span class="hl sym">;</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

