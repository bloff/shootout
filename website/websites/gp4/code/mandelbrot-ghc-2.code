<span class="slc">-- The Great Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">-- Based on the SML version, written by Matthias Blume.</span>
<span class="slc">-- Implemented in Haskell by Don Stewart</span>
<span class="slc">--</span>
<span class="kwa">import</span> System<span class="sym">;</span> <span class="kwa">import</span> Data.Bits<span class="sym">;</span> <span class="kwa">import</span> Data.Word<span class="sym">;</span> <span class="kwa">import</span> GHC.Base<span class="sym">;</span> <span class="kwa">import</span> Text.Printf

main <span class="sym">=</span> <span class="kwa">do</span> <span class="sym">(</span>w<span class="sym">::</span>Word32<span class="sym">) &lt;-</span> getArgs <span class="sym">&gt;&gt;=</span> readIO . head
          printf <span class="str">&quot;P4\n%d %d\n&quot;</span> <span class="sym">(</span>fromIntegral w<span class="sym">::</span><span class="kwb">Int</span><span class="sym">) (</span>fromIntegral w<span class="sym">::</span><span class="kwb">Int</span><span class="sym">) &gt;&gt;</span> yl <span class="num">0</span> w w

yl y h w <span class="sym">=</span> if y <span class="sym">&lt;</span> h <span class="kwa">then</span> xl <span class="num">0</span> y <span class="num">0 8</span> h w <span class="kwa">else</span> return <span class="sym">()</span>

xl x y b n h w
    <span class="sym">|</span> x <span class="sym">==</span> w    <span class="sym">=</span> putChar <span class="sym">(</span>unsafeChr $ b `shiftL` n<span class="sym">) &gt;&gt;</span> yl <span class="sym">(</span>y<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> h w
    <span class="sym">|</span> otherwise <span class="sym">=</span> <span class="kwa">do</span>
        <span class="sym">(</span>b'<span class="sym">,</span>n'<span class="sym">) &lt;-</span> if n <span class="sym">==</span> <span class="num">0</span> <span class="kwa">then</span> putChar <span class="sym">(</span>chr b<span class="sym">) &gt;&gt;</span> return <span class="sym">(</span><span class="num">0</span><span class="sym">,</span><span class="num">8</span><span class="sym">)</span> <span class="kwa">else</span> return <span class="sym">(</span>b<span class="sym">,</span>n<span class="sym">)</span>
        xl <span class="sym">(</span>x<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> y <span class="sym">(</span>b'<span class="sym">+</span>b'<span class="sym">+</span> fromEnum <span class="sym">(</span>p x y w h<span class="sym">)) (</span>n'<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> h w

p <span class="sym">(</span>x<span class="sym">::</span>Word32<span class="sym">)</span> y w h <span class="sym">=</span> lp <span class="num">0.0 0.0 50</span> <span class="sym">(</span>f x <span class="sym">*</span> <span class="num">2.0</span> <span class="sym">/</span> f w <span class="sym">-</span> <span class="num">1.5</span><span class="sym">) (</span>f y <span class="sym">*</span> <span class="num">2.0</span> <span class="sym">/</span> f h <span class="sym">-</span> <span class="num">1.0</span><span class="sym">)</span>
    <span class="kwa">where</span> f <span class="sym">=</span> fromIntegral

lp r i k cr ci <span class="sym">|</span> r2 <span class="sym">+</span> i2 <span class="sym">&gt; (</span><span class="num">4.0</span> <span class="sym">::</span> <span class="kwb">Double</span><span class="sym">) =</span> <span class="num">0</span> <span class="sym">::</span> Word32
               <span class="sym">|</span> k <span class="sym">== (</span><span class="num">0</span> <span class="sym">::</span> Word32<span class="sym">)        =</span> <span class="num">1</span>
               <span class="sym">|</span> otherwise                 <span class="sym">=</span> lp <span class="sym">(</span>r2<span class="sym">-</span>i2<span class="sym">+</span>cr<span class="sym">) ((</span>r<span class="sym">+</span>r<span class="sym">)*</span>i<span class="sym">+</span>ci<span class="sym">) (</span>k<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> cr ci
    <span class="kwa">where</span> r2 <span class="sym">=</span> r<span class="sym">*</span>r <span class="sym">;</span> i2 <span class="sym">=</span> i<span class="sym">*</span>i

