<span class="hl slc">;; The Computer Language Shootout</span>
<span class="hl slc">;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;</span>
<span class="hl slc">;; adapted from the Java and Python versions by Robert Brown 2006-10-06</span>

<span class="hl sym">(</span>defconstant <span class="hl sym">+</span>digits-per-<span class="hl kwa">line</span><span class="hl sym">+</span> <span class="hl num">10</span><span class="hl sym">)</span>
<span class="hl sym">(</span>defconstant <span class="hl sym">+</span>default-stop-digits<span class="hl sym">+</span> <span class="hl str">&quot;1000&quot;</span><span class="hl sym">)</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> make-digit-generator <span class="hl sym">()</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>optimize <span class="hl sym">(</span>speed <span class="hl num">3</span><span class="hl sym">) (</span>debug <span class="hl num">0</span><span class="hl sym">) (</span>space <span class="hl num">0</span><span class="hl sym">) (</span>safety <span class="hl num">0</span><span class="hl sym">)))</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>zq <span class="hl num">1</span><span class="hl sym">)</span>
        <span class="hl sym">(</span>zr <span class="hl num">0</span><span class="hl sym">)</span>
        <span class="hl sym">(</span>zt <span class="hl num">1</span><span class="hl sym">)</span>
        <span class="hl sym">(</span>k <span class="hl num">0</span><span class="hl sym">)</span>
        <span class="hl sym">(</span><span class="hl num">4</span>k<span class="hl sym">+</span><span class="hl num">2 2</span><span class="hl sym">)</span>
        <span class="hl sym">(</span><span class="hl num">2</span>k<span class="hl sym">+</span><span class="hl num">1 1</span><span class="hl sym">))</span>
    <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">type</span> integer zq zr zt<span class="hl sym">)</span>
             <span class="hl sym">(</span><span class="hl kwa">type</span> fixnum k <span class="hl num">4</span>k<span class="hl sym">+</span><span class="hl num">2 2</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">))</span>
    <span class="hl sym">(</span>labels <span class="hl sym">((</span>extract <span class="hl sym">(</span>j<span class="hl sym">)</span>
               <span class="hl sym">(</span>the <span class="hl sym">(</span>integer <span class="hl num">0 9</span><span class="hl sym">) (</span>floor <span class="hl sym">(+ (*</span> zq j<span class="hl sym">)</span> zr<span class="hl sym">)</span> zt<span class="hl sym">)))</span>
             <span class="hl sym">(</span>compose <span class="hl sym">(</span>aq ar at bq br bt<span class="hl sym">)</span>
               <span class="hl sym">(</span><span class="hl kwa">setq</span> zq <span class="hl sym">(*</span> aq bq<span class="hl sym">)</span>
                     zr <span class="hl sym">(+ (*</span> aq br<span class="hl sym">) (*</span> ar bt<span class="hl sym">))</span>
                     zt <span class="hl sym">(*</span> at bt<span class="hl sym">))))</span>
      #<span class="hl sym">'(</span><span class="hl kwa">lambda</span> <span class="hl sym">()</span>
          <span class="hl sym">(</span>let <span class="hl sym">((</span>y <span class="hl sym">(</span>extract <span class="hl num">3</span><span class="hl sym">)))</span>
            <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">type</span> <span class="hl sym">(</span>integer <span class="hl num">0 9</span><span class="hl sym">)</span> y<span class="hl sym">))</span>
            <span class="hl sym">(</span>loop <span class="hl kwa">while</span> <span class="hl sym">(</span><span class="hl kwa">not</span> <span class="hl sym">(=</span> y <span class="hl sym">(</span>extract <span class="hl num">4</span><span class="hl sym">)))</span>
                  do <span class="hl sym">(</span>compose zq zr zt <span class="hl sym">(</span>incf k<span class="hl sym">) (</span>incf <span class="hl num">4</span>k<span class="hl sym">+</span><span class="hl num">2 4</span><span class="hl sym">) (</span>incf <span class="hl num">2</span>k<span class="hl sym">+</span><span class="hl num">1 2</span><span class="hl sym">))</span>
                     <span class="hl sym">(</span>setf y <span class="hl sym">(</span>extract <span class="hl num">3</span><span class="hl sym">)))</span>
            <span class="hl sym">(</span>compose <span class="hl num">10</span> <span class="hl sym">(*</span> -<span class="hl num">10</span> y<span class="hl sym">)</span> <span class="hl num">1</span> zq zr zt<span class="hl sym">)</span>
            y<span class="hl sym">)))))</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> spigot <span class="hl sym">(</span>digits<span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">type</span> fixnum digits<span class="hl sym">))</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>digits-printed <span class="hl num">0</span><span class="hl sym">)</span>
        <span class="hl sym">(</span>next-digit <span class="hl sym">(</span>make-digit-generator<span class="hl sym">)))</span>
    <span class="hl sym">(</span>loop <span class="hl kwa">while</span> <span class="hl sym">(</span>plusp digits<span class="hl sym">)</span>
          do <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(&gt;=</span> digits <span class="hl sym">+</span>digits-per-<span class="hl kwa">line</span><span class="hl sym">+)</span>
                 <span class="hl sym">(</span><span class="hl kwa">progn</span> <span class="hl sym">(</span>loop <span class="hl kwa">repeat</span> <span class="hl sym">+</span>digits-per-<span class="hl kwa">line</span><span class="hl sym">+</span>
                              do <span class="hl sym">(</span>format t <span class="hl str">&quot;~d&quot;</span> <span class="hl sym">(</span>funcall next-digit<span class="hl sym">)))</span>
                        <span class="hl sym">(</span>incf digits-printed <span class="hl sym">+</span>digits-per-<span class="hl kwa">line</span><span class="hl sym">+))</span>
                 <span class="hl sym">(</span><span class="hl kwa">progn</span> <span class="hl sym">(</span>loop <span class="hl kwa">repeat</span> digits
                              do <span class="hl sym">(</span>format t <span class="hl str">&quot;~d&quot;</span> <span class="hl sym">(</span>funcall next-digit<span class="hl sym">)))</span>
                        <span class="hl sym">(</span>loop <span class="hl kwa">repeat</span> <span class="hl sym">(</span>- <span class="hl sym">+</span>digits-per-<span class="hl kwa">line</span><span class="hl sym">+</span> digits<span class="hl sym">)</span>
                              do <span class="hl sym">(</span>format t <span class="hl str">&quot; &quot;</span><span class="hl sym">))</span>
                        <span class="hl sym">(</span>incf digits-printed digits<span class="hl sym">)))</span>
             <span class="hl sym">(</span>format t <span class="hl str">&quot;~a:~d~%&quot;</span> #\Tab digits-printed<span class="hl sym">)</span>
             <span class="hl sym">(</span>decf digits <span class="hl sym">+</span>digits-per-<span class="hl kwa">line</span><span class="hl sym">+))))</span>


<span class="hl sym">(</span><span class="hl kwa">defun</span> main <span class="hl sym">(&amp;</span>optional
	     <span class="hl sym">(</span>n <span class="hl sym">(</span>parse-integer
                 <span class="hl sym">(</span><span class="hl kwa">or</span> <span class="hl sym">(</span><span class="hl kwa">car</span> <span class="hl sym">(</span><span class="hl kwa">last</span> #<span class="hl sym">+</span>sbcl sb-ext<span class="hl sym">:*</span>posix-argv<span class="hl sym">*</span>
                                #<span class="hl sym">+</span>cmu extensions<span class="hl sym">:*</span><span class="hl kwa">command</span>-<span class="hl kwa">line</span>-strings<span class="hl sym">*</span>
                                #<span class="hl sym">+</span>gcl si<span class="hl sym">::*</span><span class="hl kwa">command</span>-args<span class="hl sym">*))</span>
                     <span class="hl sym">+</span>default-stop-digits<span class="hl sym">+))))</span>
    <span class="hl sym">(</span>spigot n<span class="hl sym">)))</span>
