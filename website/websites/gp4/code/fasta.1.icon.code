<span class="slc"># The Computer Language Shootout</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc"># by Charles Evans</span>
<span class="slc"># based on fasta.py, modified by Ian Osgood</span>

<span class="kwa">link</span> printf

<span class="kwa">procedure</span> gen_random<span class="sym">(</span>max_<span class="sym">)</span>
<span class="kwa">static</span> last<span class="sym">,</span> ia<span class="sym">,</span> ic<span class="sym">,</span> im
<span class="kwa">initial</span> <span class="sym">{</span>
last<span class="sym">:=</span><span class="num">42</span>
ia<span class="sym">:=</span><span class="num">3877</span>
ic<span class="sym">:=</span><span class="num">29573</span>
im<span class="sym">:=</span><span class="num">139968</span>
<span class="sym">}</span>
    last <span class="sym">:= (</span>last <span class="sym">*</span> ia <span class="sym">+</span> ic<span class="sym">)</span> % im
    <span class="kwa">return</span> <span class="sym">(</span>max_ <span class="sym">*</span> last<span class="sym">) /</span> im
<span class="kwa">end</span>

<span class="kwa">procedure</span> make_cumulative<span class="sym">(</span><span class="kwb">table</span><span class="sym">)</span>
<span class="kwa">local</span> prob<span class="sym">,</span>x
    prob <span class="sym">:=</span> <span class="num">0.0</span>
    <span class="kwa">every</span> x<span class="sym">:=!</span><span class="kwb">table</span> <span class="kwa">do</span>
       <span class="sym">{</span> prob <span class="sym">+:=</span> x<span class="sym">[-</span><span class="num">1</span><span class="sym">]</span>
        x<span class="sym">[-</span><span class="num">1</span><span class="sym">]:=</span>prob
	<span class="sym">}</span>
<span class="kwa">end</span>

<span class="kwa">global</span> alu<span class="sym">,</span> iub<span class="sym">,</span> homosapiens

<span class="kwa">procedure</span> init<span class="sym">()</span>
alu <span class="sym">:=</span>
   <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG_</span>
<span class="str">   GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA_</span>
<span class="str">   CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT_</span>
<span class="str">   ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA_</span>
<span class="str">   GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG_</span>
<span class="str">   AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC_</span>
<span class="str">   AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>

iub <span class="sym">:= [</span>
    <span class="sym">[</span><span class="str">&quot;a&quot;</span><span class="sym">,</span> <span class="num">0.27</span><span class="sym">],</span>
    <span class="sym">[</span><span class="str">&quot;c&quot;</span><span class="sym">,</span> <span class="num">0.12</span><span class="sym">],</span>
    <span class="sym">[</span><span class="str">&quot;g&quot;</span><span class="sym">,</span> <span class="num">0.12</span><span class="sym">],</span>
    <span class="sym">[</span><span class="str">&quot;t&quot;</span><span class="sym">,</span> <span class="num">0.27</span><span class="sym">],</span>

    <span class="sym">[</span><span class="str">&quot;B&quot;</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">],</span>
    <span class="sym">[</span><span class="str">&quot;D&quot;</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">],</span>
    <span class="sym">[</span><span class="str">&quot;H&quot;</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">],</span>
    <span class="sym">[</span><span class="str">&quot;K&quot;</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">],</span>
    <span class="sym">[</span><span class="str">&quot;M&quot;</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">],</span>
    <span class="sym">[</span><span class="str">&quot;N&quot;</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">],</span>
    <span class="sym">[</span><span class="str">&quot;R&quot;</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">],</span>
    <span class="sym">[</span><span class="str">&quot;S&quot;</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">],</span>
    <span class="sym">[</span><span class="str">&quot;V&quot;</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">],</span>
    <span class="sym">[</span><span class="str">&quot;W&quot;</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">],</span>
    <span class="sym">[</span><span class="str">&quot;Y&quot;</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">]</span>
<span class="sym">]</span>

homosapiens <span class="sym">:= [</span>
    <span class="sym">[</span><span class="str">&quot;a&quot;</span><span class="sym">,</span> <span class="num">0.3029549426680</span><span class="sym">],</span>
    <span class="sym">[</span><span class="str">&quot;c&quot;</span><span class="sym">,</span> <span class="num">0.1979883004921</span><span class="sym">],</span>
    <span class="sym">[</span><span class="str">&quot;g&quot;</span><span class="sym">,</span> <span class="num">0.1975473066391</span><span class="sym">],</span>
    <span class="sym">[</span><span class="str">&quot;t&quot;</span><span class="sym">,</span> <span class="num">0.3015094502008</span><span class="sym">]</span>
<span class="sym">]</span>
<span class="kwa">end</span>

<span class="kwa">procedure</span> make_random_fasta<span class="sym">(</span>id_<span class="sym">,</span> desc<span class="sym">,</span> <span class="kwb">table</span><span class="sym">,</span> n<span class="sym">)</span>
<span class="kwa">local</span> rn
    printf<span class="sym">(</span> <span class="str">&quot;&gt;%s %s</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">,</span>id_<span class="sym">,</span> desc<span class="sym">)</span>
    width <span class="sym">:=</span> <span class="num">60</span>
     make_cumulative<span class="sym">(</span><span class="kwb">table</span><span class="sym">)</span>
<span class="slc"># must do this once only per table</span>
    <span class="kwa">while</span> n<span class="sym">&gt;</span><span class="num">0</span> <span class="kwa">do</span><span class="sym">{</span>
	s<span class="sym">:=</span><span class="str">&quot;&quot;</span>
	m<span class="sym">:=</span> width<span class="sym">&gt;=</span>n <span class="sym">|</span> width
	<span class="kwa">while</span> <span class="sym">*</span>s<span class="sym">&lt;</span>m &amp; rn<span class="sym">:=</span>gen_random<span class="sym">(</span><span class="num">1.0</span><span class="sym">)</span> &amp; x<span class="sym">:=!</span><span class="kwb">table</span> &amp; rn <span class="sym">&lt;</span> x<span class="sym">[-</span><span class="num">1</span><span class="sym">]</span>
	   <span class="kwa">do</span> s<span class="sym">||:=</span> x<span class="sym">[</span><span class="num">1</span><span class="sym">]</span>
	write<span class="sym">(</span>s<span class="sym">)</span>
	n<span class="sym">-:=</span>width
    <span class="sym">}</span>
<span class="kwa">end</span>

<span class="kwa">procedure</span> make_repeat_fasta<span class="sym">(</span>id_<span class="sym">,</span> desc<span class="sym">,</span> src<span class="sym">,</span> n<span class="sym">)</span>
<span class="kwa">local</span> s2<span class="sym">,</span>i
    printf<span class="sym">(</span><span class="str">&quot;&gt;%s %s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>id_<span class="sym">,</span> desc<span class="sym">)</span>
    width <span class="sym">:=</span> <span class="num">60</span>
    i<span class="sym">:=</span><span class="num">0</span>
    l <span class="sym">:= *</span>src
    s2 <span class="sym">:=</span> src
    <span class="kwa">while</span> <span class="sym">*</span>s2<span class="sym">&lt;</span>l<span class="sym">*</span><span class="num">2</span> <span class="kwa">do</span> s2<span class="sym">||:=</span>src
    <span class="kwa">while</span> n<span class="sym">&gt;</span><span class="num">0</span> <span class="kwa">do</span><span class="sym">{</span>
	m<span class="sym">:=</span> width<span class="sym">&gt;=</span>n <span class="sym">|</span> width
	write<span class="sym">(</span>s2<span class="sym">[</span>i<span class="sym">+</span><span class="num">1</span> <span class="sym">+:</span>m<span class="sym">])</span>
	<span class="kwa">if</span> <span class="sym">(</span>i<span class="sym">+:=</span>m<span class="sym">)&gt;</span>l <span class="kwa">then</span> i<span class="sym">-:=</span>l
	n<span class="sym">-:=</span>width
    <span class="sym">}</span>
<span class="kwa">end</span>

<span class="kwa">procedure</span> main<span class="sym">(</span>argv<span class="sym">)</span>
init<span class="sym">()</span>
   n <span class="sym">:=</span> <span class="kwb">integer</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) |</span>
        stop<span class="sym">(</span><span class="str">&quot;Usage: fasta &lt;N&gt;&quot;</span><span class="sym">)</span>
    make_repeat_fasta<span class="sym">(</span><span class="str">&quot;ONE&quot;</span><span class="sym">,</span> <span class="str">&quot;Homo sapiens alu&quot;</span><span class="sym">,</span> alu<span class="sym">,</span> n<span class="sym">*</span><span class="num">2</span><span class="sym">)</span>
    make_random_fasta<span class="sym">(</span><span class="str">&quot;TWO&quot;</span><span class="sym">,</span> <span class="str">&quot;IUB ambiguity codes&quot;</span><span class="sym">,</span> iub<span class="sym">,</span> n<span class="sym">*</span><span class="num">3</span><span class="sym">)</span>
    make_random_fasta<span class="sym">(</span><span class="str">&quot;THREE&quot;</span><span class="sym">,</span> <span class="str">&quot;Homo sapiens frequency&quot;</span><span class="sym">,</span> homosapiens<span class="sym">,</span> n<span class="sym">*</span><span class="num">5</span><span class="sym">)</span>
<span class="slc">#write(&amp;errout,&quot;&gt;&quot;,&amp;time) # 2.5m=146s</span>
<span class="kwa">end</span>
